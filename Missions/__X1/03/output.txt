// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4062 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 8973 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 45
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36326 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36326 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36326 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36326 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36326 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36326 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36326 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36326 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36326 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36326 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36326 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3084
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 70
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 31
2647: PPUSH
2648: LD_INT 108
2650: PPUSH
2651: LD_INT 50
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2661: LD_INT 35
2663: PPUSH
2664: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2668: LD_INT 22
2670: PUSH
2671: LD_INT 5
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 4
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 57
2693: PUSH
2694: EMPTY
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: IFFALSE 2661
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_INT 22
2719: PUSH
2720: LD_INT 5
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 30
2729: PUSH
2730: LD_INT 4
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 57
2742: PUSH
2743: EMPTY
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PUSH
2760: LD_INT 1
2762: ARRAY
2763: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_EXP 39
2773: PPUSH
2774: LD_INT 25
2776: PUSH
2777: LD_INT 1
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 72
2788: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2789: LD_VAR 0 2
2793: PPUSH
2794: LD_VAR 0 3
2798: PPUSH
2799: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2803: LD_INT 35
2805: PPUSH
2806: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2810: LD_INT 22
2812: PUSH
2813: LD_INT 5
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: LD_INT 31
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 57
2835: PUSH
2836: EMPTY
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: PPUSH
2848: CALL_OW 69
2852: PUSH
2853: LD_INT 2
2855: GREATEREQUAL
2856: IFFALSE 2803
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: LD_EXP 39
2867: PPUSH
2868: LD_INT 25
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 72
2882: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2883: LD_VAR 0 2
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_INT 5
2894: PPUSH
2895: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 2
2906: ARRAY
2907: PUSH
2908: LD_VAR 0 2
2912: PUSH
2913: LD_INT 3
2915: ARRAY
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2930: LD_VAR 0 2
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PUSH
2939: LD_VAR 0 2
2943: PUSH
2944: LD_INT 3
2946: ARRAY
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 2
2966: ARRAY
2967: PUSH
2968: LD_VAR 0 2
2972: PUSH
2973: LD_INT 3
2975: ARRAY
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 5
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 30
3002: PUSH
3003: LD_INT 31
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 69
3018: ST_TO_ADDR
// for i := 1 to 2 do
3019: LD_ADDR_VAR 0 1
3023: PUSH
3024: DOUBLE
3025: LD_INT 1
3027: DEC
3028: ST_TO_ADDR
3029: LD_INT 2
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3067
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3035: LD_VAR 0 2
3039: PUSH
3040: LD_VAR 0 1
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ARRAY
3049: PPUSH
3050: LD_VAR 0 4
3054: PUSH
3055: LD_VAR 0 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 180
3065: GO 3032
3067: POP
3068: POP
// wait ( 1 1$00 ) ;
3069: LD_INT 2100
3071: PPUSH
3072: CALL_OW 67
// farmerBaseReady := true ;
3076: LD_ADDR_EXP 4
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// end ;
3084: PPOPN 4
3086: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3087: LD_EXP 4
3091: PUSH
3092: LD_EXP 11
3096: NOT
3097: AND
3098: IFFALSE 3620
3100: GO 3102
3102: DISABLE
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// begin enable ;
3110: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: LD_EXP 39
3120: PPUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PUSH
3136: LD_EXP 36
3140: ADD
3141: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_EXP 39
3151: PPUSH
3152: LD_INT 25
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PPUSH
3162: CALL_OW 72
3166: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3167: LD_ADDR_VAR 0 5
3171: PUSH
3172: LD_INT 22
3174: PUSH
3175: LD_INT 5
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 21
3184: PUSH
3185: LD_INT 3
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 24
3197: PUSH
3198: LD_INT 1000
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3219: LD_ADDR_VAR 0 4
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 5
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 4
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3253: LD_VAR 0 4
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: CALL_OW 302
3266: IFFALSE 3330
// for i in sol do
3268: LD_ADDR_VAR 0 1
3272: PUSH
3273: LD_VAR 0 3
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3328
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 256
3290: PUSH
3291: LD_INT 999
3293: LESS
3294: PUSH
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 310
3304: NOT
3305: AND
3306: IFFALSE 3326
// ComEnterUnit ( i , arm [ 1 ] ) ;
3308: LD_VAR 0 1
3312: PPUSH
3313: LD_VAR 0 4
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: CALL_OW 120
3326: GO 3278
3328: POP
3329: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3330: LD_VAR 0 2
3334: NOT
3335: PUSH
3336: LD_INT 22
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 21
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: NOT
3365: AND
3366: IFFALSE 3458
// begin uc_side := 5 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 5
3375: ST_TO_ADDR
// uc_nation := 2 ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 2
3383: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3384: LD_INT 0
3386: PPUSH
3387: LD_INT 2
3389: PPUSH
3390: LD_INT 2
3392: PPUSH
3393: CALL_OW 380
// eng := CreateHuman ;
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: CALL_OW 44
3406: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3407: LD_VAR 0 2
3411: PPUSH
3412: LD_INT 102
3414: PPUSH
3415: LD_INT 8
3417: PPUSH
3418: LD_INT 0
3420: PPUSH
3421: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3425: LD_VAR 0 2
3429: PPUSH
3430: LD_INT 110
3432: PPUSH
3433: LD_INT 60
3435: PPUSH
3436: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3440: LD_ADDR_EXP 39
3444: PUSH
3445: LD_EXP 39
3449: PUSH
3450: LD_VAR 0 2
3454: UNION
3455: ST_TO_ADDR
// end else
3456: GO 3620
// begin for i in eng do
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3618
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3471: LD_INT 10
3473: PPUSH
3474: LD_INT 1
3476: PPUSH
3477: CALL_OW 287
3481: IFFALSE 3532
// begin if IsInUnit ( i ) then
3483: LD_VAR 0 1
3487: PPUSH
3488: CALL_OW 310
3492: IFFALSE 3503
// ComExitBuilding ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_INT 10
3510: PPUSH
3511: CALL_OW 308
3515: NOT
3516: IFFALSE 3530
// AddComMoveToArea ( i , collectFarmerArea ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 10
3525: PPUSH
3526: CALL_OW 173
// end else
3530: GO 3616
// begin if damagedBuilding then
3532: LD_VAR 0 5
3536: IFFALSE 3580
// begin if IsInUnit ( i ) then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 310
3547: IFFALSE 3560
// ComExitBuilding ( i ) else
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 122
3558: GO 3578
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_VAR 0 5
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: CALL_OW 130
// end else
3578: GO 3616
// if not IsInUnit ( i ) and not HasTask ( i ) then
3580: LD_VAR 0 1
3584: PPUSH
3585: CALL_OW 310
3589: NOT
3590: PUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL_OW 314
3600: NOT
3601: AND
3602: IFFALSE 3616
// ComEnterUnit ( i , arDepot ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_INT 5
3611: PPUSH
3612: CALL_OW 120
// end ; end ;
3616: GO 3468
3618: POP
3619: POP
// end ; end ;
3620: PPOPN 5
3622: END
// export function CargoEvacuation ; begin
3623: LD_INT 0
3625: PPUSH
// wait ( 0 0$20 ) ;
3626: LD_INT 700
3628: PPUSH
3629: CALL_OW 67
// omarCargo := PrepareCargo ;
3633: LD_ADDR_EXP 43
3637: PUSH
3638: CALL 3944 0 0
3642: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3643: LD_EXP 43
3647: PPUSH
3648: LD_INT 0
3650: PPUSH
3651: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3655: LD_EXP 43
3659: PPUSH
3660: LD_INT 107
3662: PPUSH
3663: LD_INT 59
3665: PPUSH
3666: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3670: LD_INT 35
3672: PPUSH
3673: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3677: LD_EXP 43
3681: PPUSH
3682: LD_INT 107
3684: PPUSH
3685: LD_INT 59
3687: PPUSH
3688: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3692: LD_EXP 43
3696: PPUSH
3697: CALL_OW 302
3701: NOT
3702: PUSH
3703: LD_EXP 43
3707: PPUSH
3708: CALL_OW 301
3712: OR
3713: IFFALSE 3717
// exit ;
3715: GO 3939
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3717: LD_EXP 43
3721: PPUSH
3722: LD_INT 107
3724: PPUSH
3725: LD_INT 59
3727: PPUSH
3728: CALL_OW 307
3732: PUSH
3733: LD_EXP 43
3737: PPUSH
3738: LD_INT 5
3740: PPUSH
3741: CALL_OW 296
3745: PUSH
3746: LD_INT 6
3748: LESS
3749: OR
3750: IFFALSE 3670
// SetTag ( omarCargo , 1 ) ;
3752: LD_EXP 43
3756: PPUSH
3757: LD_INT 1
3759: PPUSH
3760: CALL_OW 109
// wait ( 0 0$05 ) ;
3764: LD_INT 175
3766: PPUSH
3767: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3771: LD_EXP 43
3775: PPUSH
3776: LD_INT 5
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3786: LD_EXP 43
3790: PPUSH
3791: LD_INT 103
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL_OW 171
// wait ( 0 0$1 ) ;
3801: LD_INT 35
3803: PPUSH
3804: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3808: LD_EXP 43
3812: PPUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 100
3818: PPUSH
3819: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3830: LD_EXP 43
3834: PPUSH
3835: LD_INT 103
3837: PPUSH
3838: LD_INT 9
3840: PPUSH
3841: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3845: LD_EXP 43
3849: PPUSH
3850: CALL_OW 302
3854: NOT
3855: PUSH
3856: LD_EXP 43
3860: PPUSH
3861: CALL_OW 301
3865: OR
3866: IFFALSE 3870
// exit ;
3868: GO 3939
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3870: LD_EXP 43
3874: PPUSH
3875: LD_INT 103
3877: PPUSH
3878: LD_INT 9
3880: PPUSH
3881: CALL_OW 307
3885: PUSH
3886: LD_EXP 43
3890: PPUSH
3891: LD_INT 3
3893: PPUSH
3894: CALL_OW 308
3898: OR
3899: PUSH
3900: LD_EXP 43
3904: PPUSH
3905: CALL_OW 110
3909: PUSH
3910: LD_INT 0
3912: GREATER
3913: AND
3914: IFFALSE 3823
// RemoveUnit ( omarCargo ) ;
3916: LD_EXP 43
3920: PPUSH
3921: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
3925: LD_ADDR_EXP 21
3929: PUSH
3930: LD_EXP 21
3934: PUSH
3935: LD_INT 1
3937: MINUS
3938: ST_TO_ADDR
// end ;
3939: LD_VAR 0 1
3943: RET
// export function PrepareCargo ; var un , veh ; begin
3944: LD_INT 0
3946: PPUSH
3947: PPUSH
3948: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3949: LD_ADDR_VAR 0 3
3953: PUSH
3954: LD_INT 5
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: LD_INT 13
3962: PPUSH
3963: LD_INT 1
3965: PPUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 32
3971: PPUSH
3972: LD_INT 80
3974: PPUSH
3975: CALL 313 0 7
3979: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_INT 4
3987: PPUSH
3988: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3992: LD_VAR 0 3
3996: PPUSH
3997: LD_INT 101
3999: PPUSH
4000: LD_INT 8
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4010: LD_INT 0
4012: PPUSH
4013: LD_INT 3
4015: PPUSH
4016: LD_INT 2
4018: PPUSH
4019: CALL_OW 380
// un := CreateHuman ;
4023: LD_ADDR_VAR 0 2
4027: PUSH
4028: CALL_OW 44
4032: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4033: LD_VAR 0 2
4037: PPUSH
4038: LD_VAR 0 3
4042: PPUSH
4043: CALL_OW 52
// result := veh ;
4047: LD_ADDR_VAR 0 1
4051: PUSH
4052: LD_VAR 0 3
4056: ST_TO_ADDR
// end ; end_of_file
4057: LD_VAR 0 1
4061: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
// usForces := [ ] ;
4067: LD_ADDR_EXP 44
4071: PUSH
4072: EMPTY
4073: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4074: LD_ADDR_EXP 46
4078: PUSH
4079: LD_INT 6
4081: PUSH
4082: LD_INT 32
4084: PUSH
4085: LD_INT 27
4087: PUSH
4088: LD_INT 1
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: LD_INT 4
4099: PUSH
4100: LD_INT 43
4102: PUSH
4103: LD_INT 24
4105: PUSH
4106: LD_INT 5
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 27
4117: PUSH
4118: LD_INT 29
4120: PUSH
4121: LD_INT 21
4123: PUSH
4124: LD_INT 0
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4138: LD_INT 11
4140: PPUSH
4141: CALL_OW 274
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_INT 150
4151: PUSH
4152: LD_INT 120
4154: PUSH
4155: LD_INT 100
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 277
// if Difficulty = 1 then
4173: LD_OWVAR 67
4177: PUSH
4178: LD_INT 1
4180: EQUAL
4181: IFFALSE 4190
// RemoveUnit ( hillBun ) ;
4183: LD_INT 14
4185: PPUSH
4186: CALL_OW 64
// uc_side := 1 ;
4190: LD_ADDR_OWVAR 20
4194: PUSH
4195: LD_INT 1
4197: ST_TO_ADDR
// uc_nation := 1 ;
4198: LD_ADDR_OWVAR 21
4202: PUSH
4203: LD_INT 1
4205: ST_TO_ADDR
// hc_gallery :=  ;
4206: LD_ADDR_OWVAR 33
4210: PUSH
4211: LD_STRING 
4213: ST_TO_ADDR
// hc_name :=  ;
4214: LD_ADDR_OWVAR 26
4218: PUSH
4219: LD_STRING 
4221: ST_TO_ADDR
// hc_importance := 0 ;
4222: LD_ADDR_OWVAR 32
4226: PUSH
4227: LD_INT 0
4229: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4230: LD_INT 1
4232: PPUSH
4233: LD_INT 1
4235: PPUSH
4236: LD_INT 3
4238: PPUSH
4239: CALL_OW 380
// usCommander := CreateHuman ;
4243: LD_ADDR_EXP 45
4247: PUSH
4248: CALL_OW 44
4252: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4253: LD_EXP 45
4257: PPUSH
4258: LD_INT 11
4260: PPUSH
4261: CALL_OW 52
// if Difficulty > 1 then
4265: LD_OWVAR 67
4269: PUSH
4270: LD_INT 1
4272: GREATER
4273: IFFALSE 4355
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4275: LD_INT 0
4277: PPUSH
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 1
4283: PUSH
4284: LD_INT 2
4286: PUSH
4287: LD_INT 3
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_OWVAR 67
4299: ARRAY
4300: PPUSH
4301: CALL_OW 380
// un := CreateHuman ;
4305: LD_ADDR_VAR 0 3
4309: PUSH
4310: CALL_OW 44
4314: ST_TO_ADDR
// usForces := usForces union un ;
4315: LD_ADDR_EXP 44
4319: PUSH
4320: LD_EXP 44
4324: PUSH
4325: LD_VAR 0 3
4329: UNION
4330: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4331: LD_VAR 0 3
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4343: LD_VAR 0 3
4347: PPUSH
4348: LD_INT 14
4350: PPUSH
4351: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4355: LD_ADDR_VAR 0 2
4359: PUSH
4360: DOUBLE
4361: LD_INT 1
4363: DEC
4364: ST_TO_ADDR
4365: LD_INT 2
4367: PUSH
4368: LD_INT 3
4370: PUSH
4371: LD_INT 4
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_OWVAR 67
4383: ARRAY
4384: PUSH
4385: FOR_TO
4386: IFFALSE 4528
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4388: LD_INT 0
4390: PPUSH
4391: LD_INT 1
4393: PPUSH
4394: LD_INT 1
4396: PUSH
4397: LD_INT 2
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: PUSH
4408: LD_OWVAR 67
4412: ARRAY
4413: PPUSH
4414: CALL_OW 380
// un := CreateHuman ;
4418: LD_ADDR_VAR 0 3
4422: PUSH
4423: CALL_OW 44
4427: ST_TO_ADDR
// usForces := usForces union un ;
4428: LD_ADDR_EXP 44
4432: PUSH
4433: LD_EXP 44
4437: PUSH
4438: LD_VAR 0 3
4442: UNION
4443: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4444: LD_VAR 0 3
4448: PPUSH
4449: LD_INT 39
4451: PPUSH
4452: LD_INT 24
4454: PPUSH
4455: LD_INT 4
4457: PPUSH
4458: LD_INT 0
4460: PPUSH
4461: CALL_OW 50
// if i < 3 then
4465: LD_VAR 0 2
4469: PUSH
4470: LD_INT 3
4472: LESS
4473: IFFALSE 4526
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4475: LD_VAR 0 3
4479: PPUSH
4480: LD_INT 22
4482: PUSH
4483: LD_INT 1
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 58
4492: PUSH
4493: EMPTY
4494: LIST
4495: PUSH
4496: LD_INT 30
4498: PUSH
4499: LD_INT 31
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PPUSH
4511: CALL_OW 69
4515: PUSH
4516: LD_VAR 0 2
4520: ARRAY
4521: PPUSH
4522: CALL_OW 120
// end ;
4526: GO 4385
4528: POP
4529: POP
// for i := 1 to 2 do
4530: LD_ADDR_VAR 0 2
4534: PUSH
4535: DOUBLE
4536: LD_INT 1
4538: DEC
4539: ST_TO_ADDR
4540: LD_INT 2
4542: PUSH
4543: FOR_TO
4544: IFFALSE 4608
// begin PrepareHuman ( false , 2 , 2 ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 2
4551: PPUSH
4552: LD_INT 2
4554: PPUSH
4555: CALL_OW 380
// un := CreateHuman ;
4559: LD_ADDR_VAR 0 3
4563: PUSH
4564: CALL_OW 44
4568: ST_TO_ADDR
// usForces := usForces union un ;
4569: LD_ADDR_EXP 44
4573: PUSH
4574: LD_EXP 44
4578: PUSH
4579: LD_VAR 0 3
4583: UNION
4584: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4585: LD_VAR 0 3
4589: PPUSH
4590: LD_INT 39
4592: PPUSH
4593: LD_INT 24
4595: PPUSH
4596: LD_INT 4
4598: PPUSH
4599: LD_INT 0
4601: PPUSH
4602: CALL_OW 50
// end ;
4606: GO 4543
4608: POP
4609: POP
// PrepareHuman ( false , 4 , 1 ) ;
4610: LD_INT 0
4612: PPUSH
4613: LD_INT 4
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: CALL_OW 380
// un := CreateHuman ;
4623: LD_ADDR_VAR 0 3
4627: PUSH
4628: CALL_OW 44
4632: ST_TO_ADDR
// usForces := usForces union un ;
4633: LD_ADDR_EXP 44
4637: PUSH
4638: LD_EXP 44
4642: PUSH
4643: LD_VAR 0 3
4647: UNION
4648: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4649: LD_VAR 0 3
4653: PPUSH
4654: LD_INT 39
4656: PPUSH
4657: LD_INT 24
4659: PPUSH
4660: LD_INT 4
4662: PPUSH
4663: LD_INT 0
4665: PPUSH
4666: CALL_OW 50
// end ;
4670: LD_VAR 0 1
4674: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4675: LD_EXP 44
4679: PUSH
4680: LD_EXP 6
4684: NOT
4685: AND
4686: PUSH
4687: LD_EXP 14
4691: NOT
4692: AND
4693: IFFALSE 5124
4695: GO 4697
4697: DISABLE
4698: LD_INT 0
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
4704: PPUSH
// begin enable ;
4705: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: LD_EXP 44
4715: PPUSH
4716: LD_INT 25
4718: PUSH
4719: LD_INT 2
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PPUSH
4726: CALL_OW 72
4730: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4731: LD_ADDR_VAR 0 4
4735: PUSH
4736: LD_EXP 44
4740: PPUSH
4741: LD_INT 25
4743: PUSH
4744: LD_INT 1
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PPUSH
4751: CALL_OW 72
4755: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4756: LD_ADDR_VAR 0 5
4760: PUSH
4761: LD_EXP 44
4765: PPUSH
4766: LD_INT 25
4768: PUSH
4769: LD_INT 4
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 72
4780: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4781: LD_INT 7
4783: PPUSH
4784: LD_INT 22
4786: PUSH
4787: LD_INT 2
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PPUSH
4794: CALL_OW 70
4798: PUSH
4799: LD_INT 1
4801: EQUAL
4802: IFFALSE 4878
// for i in sol do
4804: LD_ADDR_VAR 0 1
4808: PUSH
4809: LD_VAR 0 4
4813: PUSH
4814: FOR_IN
4815: IFFALSE 4876
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 310
4826: NOT
4827: PUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: CALL_OW 310
4837: PPUSH
4838: CALL_OW 266
4842: PUSH
4843: LD_INT 4
4845: EQUAL
4846: NOT
4847: OR
4848: IFFALSE 4874
// begin ComExitBuilding ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4859: LD_VAR 0 1
4863: PPUSH
4864: LD_INT 37
4866: PPUSH
4867: LD_INT 23
4869: PPUSH
4870: CALL_OW 174
// end ;
4874: GO 4814
4876: POP
4877: POP
// if eng then
4878: LD_VAR 0 3
4882: IFFALSE 5124
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4884: LD_ADDR_VAR 0 2
4888: PUSH
4889: LD_INT 22
4891: PUSH
4892: LD_INT 1
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 95
4901: PUSH
4902: LD_INT 7
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 21
4911: PUSH
4912: LD_INT 3
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: LD_INT 24
4924: PUSH
4925: LD_INT 1000
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: PPUSH
4942: CALL_OW 69
4946: ST_TO_ADDR
// if b then
4947: LD_VAR 0 2
4951: IFFALSE 4982
// begin ComExitBuilding ( eng ) ;
4953: LD_VAR 0 3
4957: PPUSH
4958: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4962: LD_VAR 0 3
4966: PPUSH
4967: LD_VAR 0 2
4971: PUSH
4972: LD_INT 1
4974: ARRAY
4975: PPUSH
4976: CALL_OW 190
// end else
4980: GO 5124
// begin for i in eng do
4982: LD_ADDR_VAR 0 1
4986: PUSH
4987: LD_VAR 0 3
4991: PUSH
4992: FOR_IN
4993: IFFALSE 5122
// if not HasTask ( i ) then
4995: LD_VAR 0 1
4999: PPUSH
5000: CALL_OW 314
5004: NOT
5005: IFFALSE 5120
// begin if americanBuildList then
5007: LD_EXP 46
5011: IFFALSE 5096
// begin if IsInUnit ( i ) then
5013: LD_VAR 0 1
5017: PPUSH
5018: CALL_OW 310
5022: IFFALSE 5033
// ComExitBuilding ( i ) ;
5024: LD_VAR 0 1
5028: PPUSH
5029: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5033: LD_VAR 0 1
5037: PPUSH
5038: LD_EXP 46
5042: PUSH
5043: LD_INT 1
5045: ARRAY
5046: PUSH
5047: LD_INT 1
5049: ARRAY
5050: PPUSH
5051: LD_EXP 46
5055: PUSH
5056: LD_INT 1
5058: ARRAY
5059: PUSH
5060: LD_INT 2
5062: ARRAY
5063: PPUSH
5064: LD_EXP 46
5068: PUSH
5069: LD_INT 1
5071: ARRAY
5072: PUSH
5073: LD_INT 3
5075: ARRAY
5076: PPUSH
5077: LD_EXP 46
5081: PUSH
5082: LD_INT 1
5084: ARRAY
5085: PUSH
5086: LD_INT 4
5088: ARRAY
5089: PPUSH
5090: CALL_OW 205
// end else
5094: GO 5120
// if not IsInUnit ( i ) then
5096: LD_VAR 0 1
5100: PPUSH
5101: CALL_OW 310
5105: NOT
5106: IFFALSE 5120
// ComEnterUnit ( i , usDepot ) ;
5108: LD_VAR 0 1
5112: PPUSH
5113: LD_INT 11
5115: PPUSH
5116: CALL_OW 120
// end ;
5120: GO 4992
5122: POP
5123: POP
// end ; end ; end ;
5124: PPOPN 5
5126: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5127: LD_INT 0
5129: PPUSH
5130: PPUSH
5131: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5132: LD_ADDR_VAR 0 3
5136: PUSH
5137: LD_INT 35
5139: PUSH
5140: LD_INT 45
5142: PUSH
5143: LD_INT 48
5145: PUSH
5146: LD_EXP 58
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// for i in tech do
5157: LD_ADDR_VAR 0 4
5161: PUSH
5162: LD_VAR 0 3
5166: PUSH
5167: FOR_IN
5168: IFFALSE 5186
// AddComResearch ( lab , i ) ;
5170: LD_VAR 0 1
5174: PPUSH
5175: LD_VAR 0 4
5179: PPUSH
5180: CALL_OW 184
5184: GO 5167
5186: POP
5187: POP
// end ;
5188: LD_VAR 0 2
5192: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5193: LD_EXP 12
5197: PUSH
5198: LD_EXP 23
5202: PUSH
5203: LD_EXP 27
5207: LESSEQUAL
5208: AND
5209: IFFALSE 5234
5211: GO 5213
5213: DISABLE
// begin enable ;
5214: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5215: LD_INT 35
5217: PPUSH
5218: LD_INT 2065
5220: PPUSH
5221: CALL_OW 12
5225: PPUSH
5226: CALL_OW 67
// SendConvoy ;
5230: CALL 5332 0 0
// end ;
5234: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5235: LD_EXP 6
5239: PUSH
5240: LD_EXP 18
5244: AND
5245: IFFALSE 5331
5247: GO 5249
5249: DISABLE
// begin if americanHasEscaped then
5250: LD_EXP 8
5254: IFFALSE 5265
// wait ( 3 3$20 ) else
5256: LD_INT 7000
5258: PPUSH
5259: CALL_OW 67
5263: GO 5272
// wait ( 6 6$40 ) ;
5265: LD_INT 14000
5267: PPUSH
5268: CALL_OW 67
// SendAttack ;
5272: CALL 6075 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5276: LD_INT 14000
5278: PUSH
5279: LD_INT 11900
5281: PUSH
5282: LD_INT 9800
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: PUSH
5290: LD_OWVAR 67
5294: ARRAY
5295: PPUSH
5296: CALL_OW 67
// SendAttack ;
5300: CALL 6075 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5304: LD_EXP 19
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: LD_INT 7
5314: PUSH
5315: LD_INT 8
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_OWVAR 67
5327: ARRAY
5328: LESS
5329: IFFALSE 5276
// end ;
5331: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5332: LD_INT 0
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
5338: PPUSH
5339: PPUSH
5340: PPUSH
5341: PPUSH
// road := rand ( 1 , 2 ) ;
5342: LD_ADDR_VAR 0 4
5346: PUSH
5347: LD_INT 1
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: CALL_OW 12
5357: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5358: LD_ADDR_VAR 0 8
5362: PUSH
5363: LD_INT 3
5365: PUSH
5366: LD_INT 8
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: LD_VAR 0 4
5377: ARRAY
5378: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5379: LD_ADDR_VAR 0 5
5383: PUSH
5384: LD_INT 35
5386: PUSH
5387: LD_INT 66
5389: PUSH
5390: LD_INT 1
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 101
5400: PUSH
5401: LD_INT 8
5403: PUSH
5404: LD_INT 4
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5416: LD_ADDR_VAR 0 6
5420: PUSH
5421: LD_INT 34
5423: PUSH
5424: LD_INT 67
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 38
5433: PUSH
5434: LD_INT 62
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: LD_INT 43
5443: PUSH
5444: LD_INT 54
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 57
5453: PUSH
5454: LD_INT 57
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 77
5463: PUSH
5464: LD_INT 71
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: LD_INT 86
5473: PUSH
5474: LD_INT 60
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 89
5483: PUSH
5484: LD_INT 35
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 93
5493: PUSH
5494: LD_INT 17
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 97
5503: PUSH
5504: LD_INT 10
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: LD_INT 103
5513: PUSH
5514: LD_INT 9
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: ST_TO_ADDR
// if road = 2 then
5533: LD_VAR 0 4
5537: PUSH
5538: LD_INT 2
5540: EQUAL
5541: IFFALSE 5558
// points := ReverseArray ( points ) ;
5543: LD_ADDR_VAR 0 6
5547: PUSH
5548: LD_VAR 0 6
5552: PPUSH
5553: CALL 973 0 1
5557: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5558: LD_INT 4
5560: PPUSH
5561: LD_INT 1
5563: PPUSH
5564: LD_INT 2
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: LD_INT 12
5575: PPUSH
5576: LD_INT 80
5578: PPUSH
5579: CALL 313 0 7
// veh := CreateVehicle ;
5583: LD_ADDR_VAR 0 3
5587: PUSH
5588: CALL_OW 45
5592: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5593: LD_VAR 0 3
5597: PPUSH
5598: LD_VAR 0 5
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 3
5611: ARRAY
5612: PPUSH
5613: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5617: LD_VAR 0 3
5621: PPUSH
5622: LD_VAR 0 5
5626: PUSH
5627: LD_VAR 0 4
5631: ARRAY
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 5
5641: PUSH
5642: LD_VAR 0 4
5646: ARRAY
5647: PUSH
5648: LD_INT 2
5650: ARRAY
5651: PPUSH
5652: LD_INT 0
5654: PPUSH
5655: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5659: LD_INT 0
5661: PPUSH
5662: LD_INT 1
5664: PPUSH
5665: LD_OWVAR 67
5669: PPUSH
5670: CALL_OW 380
// un := CreateHuman ;
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: CALL_OW 44
5683: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5684: LD_VAR 0 2
5688: PPUSH
5689: LD_VAR 0 3
5693: PPUSH
5694: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5698: LD_INT 60
5700: PUSH
5701: LD_INT 56
5703: PUSH
5704: LD_INT 52
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PUSH
5712: LD_OWVAR 67
5716: ARRAY
5717: PPUSH
5718: CALL_OW 13
5722: PUSH
5723: LD_OWVAR 1
5727: PUSH
5728: LD_INT 30
5730: MOD
5731: PLUS
5732: PUSH
5733: LD_EXP 23
5737: PUSH
5738: LD_INT 4
5740: LESS
5741: OR
5742: IFFALSE 5759
// SetCargo ( veh , mat_cans , 100 ) ;
5744: LD_VAR 0 3
5748: PPUSH
5749: LD_INT 1
5751: PPUSH
5752: LD_INT 100
5754: PPUSH
5755: CALL_OW 290
// for i := 2 to points do
5759: LD_ADDR_VAR 0 7
5763: PUSH
5764: DOUBLE
5765: LD_INT 2
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 6
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5818
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5777: LD_VAR 0 3
5781: PPUSH
5782: LD_VAR 0 6
5786: PUSH
5787: LD_VAR 0 7
5791: ARRAY
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PPUSH
5797: LD_VAR 0 6
5801: PUSH
5802: LD_VAR 0 7
5806: ARRAY
5807: PUSH
5808: LD_INT 2
5810: ARRAY
5811: PPUSH
5812: CALL_OW 171
5816: GO 5774
5818: POP
5819: POP
// convoyCounter := convoyCounter + 1 ;
5820: LD_ADDR_EXP 23
5824: PUSH
5825: LD_EXP 23
5829: PUSH
5830: LD_INT 1
5832: PLUS
5833: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5834: LD_INT 35
5836: PPUSH
5837: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5841: LD_VAR 0 3
5845: PPUSH
5846: CALL_OW 314
5850: NOT
5851: PUSH
5852: LD_VAR 0 3
5856: PPUSH
5857: CALL_OW 302
5861: AND
5862: IFFALSE 5903
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5864: LD_VAR 0 3
5868: PPUSH
5869: LD_VAR 0 6
5873: PUSH
5874: LD_VAR 0 6
5878: ARRAY
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PPUSH
5884: LD_VAR 0 6
5888: PUSH
5889: LD_VAR 0 6
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: PPUSH
5899: CALL_OW 111
// if not IsInUnit ( un ) then
5903: LD_VAR 0 2
5907: PPUSH
5908: CALL_OW 310
5912: NOT
5913: IFFALSE 5954
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5915: LD_VAR 0 2
5919: PPUSH
5920: LD_VAR 0 6
5924: PUSH
5925: LD_VAR 0 6
5929: ARRAY
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: LD_VAR 0 6
5939: PUSH
5940: LD_VAR 0 6
5944: ARRAY
5945: PUSH
5946: LD_INT 2
5948: ARRAY
5949: PPUSH
5950: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5954: LD_VAR 0 3
5958: PPUSH
5959: LD_VAR 0 8
5963: PPUSH
5964: CALL_OW 308
5968: PUSH
5969: LD_VAR 0 2
5973: PPUSH
5974: LD_VAR 0 8
5978: PPUSH
5979: CALL_OW 308
5983: OR
5984: IFFALSE 5834
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
5986: LD_VAR 0 2
5990: PPUSH
5991: CALL_OW 302
5995: PUSH
5996: LD_VAR 0 3
6000: PPUSH
6001: CALL_OW 302
6005: NOT
6006: AND
6007: PUSH
6008: LD_VAR 0 2
6012: PPUSH
6013: LD_VAR 0 8
6017: PPUSH
6018: CALL_OW 308
6022: AND
6023: IFFALSE 6034
// RemoveUnit ( un ) ;
6025: LD_VAR 0 2
6029: PPUSH
6030: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6034: LD_VAR 0 3
6038: PPUSH
6039: LD_VAR 0 8
6043: PPUSH
6044: CALL_OW 308
6048: PUSH
6049: LD_VAR 0 3
6053: PPUSH
6054: CALL_OW 302
6058: AND
6059: IFFALSE 6070
// RemoveUnit ( veh ) ;
6061: LD_VAR 0 3
6065: PPUSH
6066: CALL_OW 64
// end ;
6070: LD_VAR 0 1
6074: RET
// export function SendAttack ; var un , veh , i ; begin
6075: LD_INT 0
6077: PPUSH
6078: PPUSH
6079: PPUSH
6080: PPUSH
// IncomingAttack ;
6081: CALL 14922 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6085: LD_INT 2100
6087: PPUSH
6088: LD_INT 3500
6090: PPUSH
6091: CALL_OW 12
6095: PPUSH
6096: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6100: LD_ADDR_VAR 0 4
6104: PUSH
6105: DOUBLE
6106: LD_INT 1
6108: DEC
6109: ST_TO_ADDR
6110: LD_INT 3
6112: PUSH
6113: LD_INT 4
6115: PUSH
6116: LD_INT 4
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: LD_OWVAR 67
6128: ARRAY
6129: PUSH
6130: LD_EXP 19
6134: PUSH
6135: LD_INT 3
6137: DIV
6138: PLUS
6139: PUSH
6140: FOR_TO
6141: IFFALSE 6253
// begin uc_side := 1 ;
6143: LD_ADDR_OWVAR 20
6147: PUSH
6148: LD_INT 1
6150: ST_TO_ADDR
// uc_nation := 1 ;
6151: LD_ADDR_OWVAR 21
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6159: LD_INT 0
6161: PPUSH
6162: LD_INT 1
6164: PPUSH
6165: LD_INT 2
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: LD_INT 4
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: PUSH
6179: LD_OWVAR 67
6183: ARRAY
6184: PPUSH
6185: CALL_OW 380
// un := CreateHuman ;
6189: LD_ADDR_VAR 0 2
6193: PUSH
6194: CALL_OW 44
6198: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6199: LD_VAR 0 2
6203: PPUSH
6204: LD_INT 37
6206: PPUSH
6207: LD_INT 70
6209: PPUSH
6210: LD_INT 3
6212: PPUSH
6213: LD_INT 0
6215: PPUSH
6216: CALL_OW 50
// usAttackers := usAttackers union un ;
6220: LD_ADDR_EXP 47
6224: PUSH
6225: LD_EXP 47
6229: PUSH
6230: LD_VAR 0 2
6234: UNION
6235: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6236: LD_VAR 0 2
6240: PPUSH
6241: LD_INT 40
6243: PPUSH
6244: LD_INT 65
6246: PPUSH
6247: CALL_OW 111
// end ;
6251: GO 6140
6253: POP
6254: POP
// uc_side := 1 ;
6255: LD_ADDR_OWVAR 20
6259: PUSH
6260: LD_INT 1
6262: ST_TO_ADDR
// uc_nation := 1 ;
6263: LD_ADDR_OWVAR 21
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6271: LD_INT 0
6273: PPUSH
6274: LD_INT 4
6276: PPUSH
6277: LD_INT 2
6279: PPUSH
6280: CALL_OW 380
// un := CreateHuman ;
6284: LD_ADDR_VAR 0 2
6288: PUSH
6289: CALL_OW 44
6293: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6294: LD_VAR 0 2
6298: PPUSH
6299: LD_INT 37
6301: PPUSH
6302: LD_INT 70
6304: PPUSH
6305: LD_INT 3
6307: PPUSH
6308: LD_INT 0
6310: PPUSH
6311: CALL_OW 50
// usAttackers := usAttackers union un ;
6315: LD_ADDR_EXP 47
6319: PUSH
6320: LD_EXP 47
6324: PUSH
6325: LD_VAR 0 2
6329: UNION
6330: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6331: LD_VAR 0 2
6335: PPUSH
6336: LD_INT 40
6338: PPUSH
6339: LD_INT 65
6341: PPUSH
6342: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6346: LD_ADDR_VAR 0 4
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_OWVAR 67
6360: PUSH
6361: LD_EXP 19
6365: PUSH
6366: LD_INT 4
6368: DIV
6369: PLUS
6370: PUSH
6371: FOR_TO
6372: IFFALSE 6545
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6374: LD_ADDR_VAR 0 3
6378: PUSH
6379: LD_INT 1
6381: PPUSH
6382: LD_INT 1
6384: PPUSH
6385: LD_INT 2
6387: PPUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 4
6396: PUSH
6397: LD_INT 3
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: PUSH
6408: LD_INT 1
6410: PPUSH
6411: LD_INT 3
6413: PPUSH
6414: CALL_OW 12
6418: ARRAY
6419: PPUSH
6420: LD_INT 90
6422: PPUSH
6423: CALL 313 0 7
6427: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_INT 35
6435: PPUSH
6436: LD_INT 65
6438: PPUSH
6439: LD_INT 0
6441: PPUSH
6442: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6446: LD_INT 0
6448: PPUSH
6449: LD_INT 3
6451: PPUSH
6452: LD_OWVAR 67
6456: PUSH
6457: LD_INT 1
6459: PLUS
6460: PPUSH
6461: CALL_OW 380
// un := CreateHuman ;
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6475: LD_VAR 0 2
6479: PPUSH
6480: LD_VAR 0 3
6484: PPUSH
6485: CALL_OW 52
// usAttackers := usAttackers union un ;
6489: LD_ADDR_EXP 47
6493: PUSH
6494: LD_EXP 47
6498: PUSH
6499: LD_VAR 0 2
6503: UNION
6504: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6505: LD_VAR 0 3
6509: PPUSH
6510: LD_INT 39
6512: PPUSH
6513: LD_INT 60
6515: PPUSH
6516: CALL_OW 111
// wait ( 0 0$3 ) ;
6520: LD_INT 105
6522: PPUSH
6523: CALL_OW 67
// usAttackers := usAttackers union veh ;
6527: LD_ADDR_EXP 47
6531: PUSH
6532: LD_EXP 47
6536: PUSH
6537: LD_VAR 0 3
6541: UNION
6542: ST_TO_ADDR
// end ;
6543: GO 6371
6545: POP
6546: POP
// attackWave := attackWave + 1 ;
6547: LD_ADDR_EXP 19
6551: PUSH
6552: LD_EXP 19
6556: PUSH
6557: LD_INT 1
6559: PLUS
6560: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6561: LD_EXP 24
6565: PPUSH
6566: CALL_OW 427
// end ;
6570: LD_VAR 0 1
6574: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6575: LD_INT 0
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
6584: PPUSH
6585: PPUSH
6586: PPUSH
6587: PPUSH
// if retreatAllowed then
6588: LD_EXP 11
6592: IFFALSE 6604
// strategy := 2 else
6594: LD_ADDR_VAR 0 5
6598: PUSH
6599: LD_INT 2
6601: ST_TO_ADDR
6602: GO 6620
// strategy := rand ( 0 , 2 ) ;
6604: LD_ADDR_VAR 0 5
6608: PUSH
6609: LD_INT 0
6611: PPUSH
6612: LD_INT 2
6614: PPUSH
6615: CALL_OW 12
6619: ST_TO_ADDR
// attackFormula := [ ] ;
6620: LD_ADDR_VAR 0 6
6624: PUSH
6625: EMPTY
6626: ST_TO_ADDR
// case strategy of 0 :
6627: LD_VAR 0 5
6631: PUSH
6632: LD_INT 0
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6970
6640: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6641: LD_INT 11
6643: PPUSH
6644: LD_INT 22
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 30
6656: PUSH
6657: LD_INT 4
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PPUSH
6668: CALL_OW 70
6672: NOT
6673: IFFALSE 6745
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6675: LD_ADDR_VAR 0 6
6679: PUSH
6680: LD_INT 41
6682: PUSH
6683: LD_INT 34
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: PUSH
6693: LD_INT 53
6695: PUSH
6696: LD_INT 62
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 37
6705: PUSH
6706: LD_INT 63
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 44
6715: PUSH
6716: LD_INT 45
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 37
6725: PUSH
6726: LD_INT 28
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: ST_TO_ADDR
6743: GO 6968
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6745: LD_INT 12
6747: PPUSH
6748: LD_INT 22
6750: PUSH
6751: LD_INT 2
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 2
6760: PUSH
6761: LD_INT 30
6763: PUSH
6764: LD_INT 4
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 30
6773: PUSH
6774: LD_INT 31
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 30
6783: PUSH
6784: LD_INT 32
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PPUSH
6801: CALL_OW 70
6805: NOT
6806: IFFALSE 6889
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6808: LD_ADDR_VAR 0 6
6812: PUSH
6813: LD_INT 27
6815: PUSH
6816: LD_INT 42
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 27
6825: PUSH
6826: LD_INT 32
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 53
6839: PUSH
6840: LD_INT 62
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 37
6849: PUSH
6850: LD_INT 63
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 44
6859: PUSH
6860: LD_INT 45
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 37
6869: PUSH
6870: LD_INT 28
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: ST_TO_ADDR
6887: GO 6968
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6889: LD_ADDR_VAR 0 6
6893: PUSH
6894: LD_INT 71
6896: PUSH
6897: LD_INT 67
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 54
6906: PUSH
6907: LD_INT 35
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 63
6920: PUSH
6921: LD_INT 40
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: LD_INT 37
6930: PUSH
6931: LD_INT 63
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 44
6940: PUSH
6941: LD_INT 45
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 37
6950: PUSH
6951: LD_INT 28
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: ST_TO_ADDR
// end ; 1 :
6968: GO 7173
6970: LD_INT 1
6972: DOUBLE
6973: EQUAL
6974: IFTRUE 6978
6976: GO 7082
6978: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
6979: LD_ADDR_VAR 0 6
6983: PUSH
6984: LD_INT 71
6986: PUSH
6987: LD_INT 67
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 82
6996: PUSH
6997: LD_INT 23
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 53
7006: PUSH
7007: LD_INT 7
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 43
7016: PUSH
7017: LD_INT 10
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 53
7032: PUSH
7033: LD_INT 62
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 37
7042: PUSH
7043: LD_INT 63
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 44
7052: PUSH
7053: LD_INT 45
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 37
7062: PUSH
7063: LD_INT 28
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: ST_TO_ADDR
7080: GO 7173
7082: LD_INT 2
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7172
7090: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7091: LD_ADDR_VAR 0 6
7095: PUSH
7096: LD_INT 90
7098: PUSH
7099: LD_INT 59
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 108
7108: PUSH
7109: LD_INT 64
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 82
7122: PUSH
7123: LD_INT 75
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 73
7132: PUSH
7133: LD_INT 67
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 101
7142: PUSH
7143: LD_INT 65
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 108
7152: PUSH
7153: LD_INT 62
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: ST_TO_ADDR
7170: GO 7173
7172: POP
// if not attackFormula then
7173: LD_VAR 0 6
7177: NOT
7178: IFFALSE 7182
// exit ;
7180: GO 8860
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7182: LD_ADDR_VAR 0 7
7186: PUSH
7187: LD_EXP 47
7191: PPUSH
7192: LD_INT 25
7194: PUSH
7195: LD_INT 1
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PPUSH
7202: CALL_OW 72
7206: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7207: LD_ADDR_VAR 0 8
7211: PUSH
7212: LD_EXP 47
7216: PPUSH
7217: LD_INT 25
7219: PUSH
7220: LD_INT 4
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7232: LD_ADDR_VAR 0 9
7236: PUSH
7237: LD_EXP 47
7241: PPUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 3
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 72
7256: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7257: LD_ADDR_VAR 0 10
7261: PUSH
7262: LD_EXP 47
7266: PPUSH
7267: LD_INT 21
7269: PUSH
7270: LD_INT 2
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 72
7281: ST_TO_ADDR
// if sci then
7282: LD_VAR 0 8
7286: IFFALSE 7323
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7288: LD_VAR 0 8
7292: PPUSH
7293: LD_VAR 0 6
7297: PUSH
7298: LD_INT 2
7300: ARRAY
7301: PUSH
7302: LD_INT 1
7304: ARRAY
7305: PPUSH
7306: LD_VAR 0 6
7310: PUSH
7311: LD_INT 2
7313: ARRAY
7314: PUSH
7315: LD_INT 2
7317: ARRAY
7318: PPUSH
7319: CALL_OW 111
// repeat wait ( 10 ) ;
7323: LD_INT 10
7325: PPUSH
7326: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7330: LD_ADDR_VAR 0 7
7334: PUSH
7335: LD_EXP 47
7339: PPUSH
7340: LD_INT 25
7342: PUSH
7343: LD_INT 1
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 72
7354: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7355: LD_ADDR_VAR 0 8
7359: PUSH
7360: LD_EXP 47
7364: PPUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 4
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 72
7379: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7380: LD_ADDR_VAR 0 9
7384: PUSH
7385: LD_EXP 47
7389: PPUSH
7390: LD_INT 25
7392: PUSH
7393: LD_INT 3
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 72
7404: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: LD_EXP 47
7414: PPUSH
7415: LD_INT 21
7417: PUSH
7418: LD_INT 2
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 72
7429: ST_TO_ADDR
// if sol then
7430: LD_VAR 0 7
7434: IFFALSE 7855
// begin for i in sol do
7436: LD_ADDR_VAR 0 2
7440: PUSH
7441: LD_VAR 0 7
7445: PUSH
7446: FOR_IN
7447: IFFALSE 7853
// begin tag := GetTag ( i ) ;
7449: LD_ADDR_VAR 0 4
7453: PUSH
7454: LD_VAR 0 2
7458: PPUSH
7459: CALL_OW 110
7463: ST_TO_ADDR
// if not tag then
7464: LD_VAR 0 4
7468: NOT
7469: IFFALSE 7578
// begin if GetLives ( i ) = 1000 then
7471: LD_VAR 0 2
7475: PPUSH
7476: CALL_OW 256
7480: PUSH
7481: LD_INT 1000
7483: EQUAL
7484: IFFALSE 7500
// SetTag ( i , 1 ) else
7486: LD_VAR 0 2
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 109
7498: GO 7576
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7500: LD_VAR 0 2
7504: PPUSH
7505: LD_VAR 0 6
7509: PUSH
7510: LD_INT 2
7512: ARRAY
7513: PUSH
7514: LD_INT 1
7516: ARRAY
7517: PPUSH
7518: LD_VAR 0 6
7522: PUSH
7523: LD_INT 2
7525: ARRAY
7526: PUSH
7527: LD_INT 2
7529: ARRAY
7530: PPUSH
7531: CALL_OW 297
7535: PUSH
7536: LD_INT 10
7538: GREATER
7539: IFFALSE 7576
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7541: LD_VAR 0 2
7545: PPUSH
7546: LD_VAR 0 6
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: PUSH
7555: LD_INT 1
7557: ARRAY
7558: PPUSH
7559: LD_VAR 0 6
7563: PUSH
7564: LD_INT 2
7566: ARRAY
7567: PUSH
7568: LD_INT 2
7570: ARRAY
7571: PPUSH
7572: CALL_OW 111
// end else
7576: GO 7851
// begin if GetLives ( i ) < 760 then
7578: LD_VAR 0 2
7582: PPUSH
7583: CALL_OW 256
7587: PUSH
7588: LD_INT 760
7590: LESS
7591: IFFALSE 7642
// begin SetTag ( i , 0 ) ;
7593: LD_VAR 0 2
7597: PPUSH
7598: LD_INT 0
7600: PPUSH
7601: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_VAR 0 6
7614: PUSH
7615: LD_INT 2
7617: ARRAY
7618: PUSH
7619: LD_INT 1
7621: ARRAY
7622: PPUSH
7623: LD_VAR 0 6
7627: PUSH
7628: LD_INT 2
7630: ARRAY
7631: PUSH
7632: LD_INT 2
7634: ARRAY
7635: PPUSH
7636: CALL_OW 111
// end else
7640: GO 7851
// if tag <= attackFormula [ 1 ] then
7642: LD_VAR 0 4
7646: PUSH
7647: LD_VAR 0 6
7651: PUSH
7652: LD_INT 1
7654: ARRAY
7655: LESSEQUAL
7656: IFFALSE 7817
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7658: LD_VAR 0 2
7662: PPUSH
7663: LD_VAR 0 6
7667: PUSH
7668: LD_INT 1
7670: ARRAY
7671: PUSH
7672: LD_VAR 0 4
7676: ARRAY
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_INT 1
7689: ARRAY
7690: PUSH
7691: LD_VAR 0 4
7695: ARRAY
7696: PUSH
7697: LD_INT 2
7699: ARRAY
7700: PPUSH
7701: CALL_OW 297
7705: PUSH
7706: LD_INT 6
7708: GREATER
7709: IFFALSE 7760
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7711: LD_VAR 0 2
7715: PPUSH
7716: LD_VAR 0 6
7720: PUSH
7721: LD_INT 1
7723: ARRAY
7724: PUSH
7725: LD_VAR 0 4
7729: ARRAY
7730: PUSH
7731: LD_INT 1
7733: ARRAY
7734: PPUSH
7735: LD_VAR 0 6
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PUSH
7744: LD_VAR 0 4
7748: ARRAY
7749: PUSH
7750: LD_INT 2
7752: ARRAY
7753: PPUSH
7754: CALL_OW 114
7758: GO 7815
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7760: LD_INT 81
7762: PUSH
7763: LD_INT 1
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 91
7772: PUSH
7773: LD_VAR 0 2
7777: PUSH
7778: LD_INT 10
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: NOT
7795: IFFALSE 7815
// SetTag ( i , tag + 1 ) ;
7797: LD_VAR 0 2
7801: PPUSH
7802: LD_VAR 0 4
7806: PUSH
7807: LD_INT 1
7809: PLUS
7810: PPUSH
7811: CALL_OW 109
// end else
7815: GO 7851
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7817: LD_VAR 0 2
7821: PPUSH
7822: LD_INT 81
7824: PUSH
7825: LD_INT 1
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 69
7836: PPUSH
7837: LD_VAR 0 2
7841: PPUSH
7842: CALL_OW 74
7846: PPUSH
7847: CALL_OW 115
// end ; end ;
7851: GO 7446
7853: POP
7854: POP
// end ; if sci then
7855: LD_VAR 0 8
7859: IFFALSE 8128
// begin if not sol and not mech then
7861: LD_VAR 0 7
7865: NOT
7866: PUSH
7867: LD_VAR 0 9
7871: NOT
7872: AND
7873: IFFALSE 7925
// begin for i in sci do
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_VAR 0 8
7884: PUSH
7885: FOR_IN
7886: IFFALSE 7921
// begin usForces := usForces union i ;
7888: LD_ADDR_EXP 44
7892: PUSH
7893: LD_EXP 44
7897: PUSH
7898: LD_VAR 0 2
7902: UNION
7903: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_INT 34
7911: PPUSH
7912: LD_INT 68
7914: PPUSH
7915: CALL_OW 111
// end ;
7919: GO 7885
7921: POP
7922: POP
// end else
7923: GO 8128
// for i in sci do
7925: LD_ADDR_VAR 0 2
7929: PUSH
7930: LD_VAR 0 8
7934: PUSH
7935: FOR_IN
7936: IFFALSE 8126
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7938: LD_VAR 0 2
7942: PPUSH
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 2
7950: ARRAY
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 6
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PUSH
7965: LD_INT 2
7967: ARRAY
7968: PPUSH
7969: CALL_OW 297
7973: PUSH
7974: LD_INT 10
7976: GREATER
7977: IFFALSE 8016
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
7979: LD_VAR 0 2
7983: PPUSH
7984: LD_VAR 0 6
7988: PUSH
7989: LD_INT 2
7991: ARRAY
7992: PUSH
7993: LD_INT 1
7995: ARRAY
7996: PPUSH
7997: LD_VAR 0 6
8001: PUSH
8002: LD_INT 2
8004: ARRAY
8005: PUSH
8006: LD_INT 2
8008: ARRAY
8009: PPUSH
8010: CALL_OW 111
8014: GO 8124
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8016: LD_VAR 0 7
8020: PPUSH
8021: LD_INT 3
8023: PUSH
8024: LD_INT 24
8026: PUSH
8027: LD_INT 1000
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 91
8040: PUSH
8041: LD_VAR 0 2
8045: PUSH
8046: LD_INT 10
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PPUSH
8058: CALL_OW 72
8062: IFFALSE 8124
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8064: LD_VAR 0 2
8068: PPUSH
8069: LD_VAR 0 7
8073: PPUSH
8074: LD_INT 3
8076: PUSH
8077: LD_INT 24
8079: PUSH
8080: LD_INT 1000
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 91
8093: PUSH
8094: LD_VAR 0 2
8098: PUSH
8099: LD_INT 10
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PPUSH
8111: CALL_OW 72
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: CALL_OW 128
8124: GO 7935
8126: POP
8127: POP
// end ; if mech then
8128: LD_VAR 0 9
8132: IFFALSE 8842
// begin for i in mech do
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_VAR 0 9
8143: PUSH
8144: FOR_IN
8145: IFFALSE 8840
// begin tag := GetTag ( i ) ;
8147: LD_ADDR_VAR 0 4
8151: PUSH
8152: LD_VAR 0 2
8156: PPUSH
8157: CALL_OW 110
8161: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8162: LD_ADDR_VAR 0 11
8166: PUSH
8167: LD_VAR 0 2
8171: PPUSH
8172: CALL_OW 310
8176: ST_TO_ADDR
// if not tag then
8177: LD_VAR 0 4
8181: NOT
8182: IFFALSE 8553
// begin if veh then
8184: LD_VAR 0 11
8188: IFFALSE 8359
// begin if GetLives ( veh ) = 1000 then
8190: LD_VAR 0 11
8194: PPUSH
8195: CALL_OW 256
8199: PUSH
8200: LD_INT 1000
8202: EQUAL
8203: IFFALSE 8219
// SetTag ( i , 1 ) else
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_INT 1
8212: PPUSH
8213: CALL_OW 109
8217: GO 8357
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8219: LD_VAR 0 11
8223: PPUSH
8224: LD_VAR 0 6
8228: PUSH
8229: LD_INT 3
8231: ARRAY
8232: PUSH
8233: LD_INT 1
8235: ARRAY
8236: PPUSH
8237: LD_VAR 0 6
8241: PUSH
8242: LD_INT 3
8244: ARRAY
8245: PUSH
8246: LD_INT 2
8248: ARRAY
8249: PPUSH
8250: CALL_OW 297
8254: PUSH
8255: LD_INT 7
8257: GREATER
8258: IFFALSE 8297
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8260: LD_VAR 0 11
8264: PPUSH
8265: LD_VAR 0 6
8269: PUSH
8270: LD_INT 3
8272: ARRAY
8273: PUSH
8274: LD_INT 1
8276: ARRAY
8277: PPUSH
8278: LD_VAR 0 6
8282: PUSH
8283: LD_INT 3
8285: ARRAY
8286: PUSH
8287: LD_INT 2
8289: ARRAY
8290: PPUSH
8291: CALL_OW 111
8295: GO 8357
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8297: LD_INT 81
8299: PUSH
8300: LD_INT 1
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 91
8309: PUSH
8310: LD_VAR 0 2
8314: PUSH
8315: LD_INT 10
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: PPUSH
8327: CALL_OW 69
8331: NOT
8332: IFFALSE 8357
// begin ComExitVehicle ( i ) ;
8334: LD_VAR 0 2
8338: PPUSH
8339: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8343: LD_VAR 0 2
8347: PPUSH
8348: LD_VAR 0 11
8352: PPUSH
8353: CALL_OW 189
// end ; end else
8357: GO 8551
// if GetLives ( i ) < 400 then
8359: LD_VAR 0 2
8363: PPUSH
8364: CALL_OW 256
8368: PUSH
8369: LD_INT 400
8371: LESS
8372: IFFALSE 8423
// begin usAttackers := usAttackers diff i ;
8374: LD_ADDR_EXP 47
8378: PUSH
8379: LD_EXP 47
8383: PUSH
8384: LD_VAR 0 2
8388: DIFF
8389: ST_TO_ADDR
// usForces := usForces union i ;
8390: LD_ADDR_EXP 44
8394: PUSH
8395: LD_EXP 44
8399: PUSH
8400: LD_VAR 0 2
8404: UNION
8405: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8406: LD_VAR 0 2
8410: PPUSH
8411: LD_INT 34
8413: PPUSH
8414: LD_INT 68
8416: PPUSH
8417: CALL_OW 111
// end else
8421: GO 8551
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8423: LD_VAR 0 10
8427: PPUSH
8428: LD_INT 58
8430: PUSH
8431: EMPTY
8432: LIST
8433: PUSH
8434: LD_INT 24
8436: PUSH
8437: LD_INT 1000
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 72
8452: PUSH
8453: LD_VAR 0 2
8457: PPUSH
8458: CALL_OW 314
8462: NOT
8463: AND
8464: PUSH
8465: LD_INT 81
8467: PUSH
8468: LD_INT 1
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 91
8477: PUSH
8478: LD_VAR 0 2
8482: PUSH
8483: LD_INT 9
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PPUSH
8495: CALL_OW 69
8499: OR
8500: IFFALSE 8551
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8502: LD_VAR 0 2
8506: PPUSH
8507: LD_VAR 0 10
8511: PPUSH
8512: LD_INT 58
8514: PUSH
8515: EMPTY
8516: LIST
8517: PUSH
8518: LD_INT 24
8520: PUSH
8521: LD_INT 250
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PPUSH
8532: CALL_OW 72
8536: PPUSH
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 74
8546: PPUSH
8547: CALL_OW 120
// end else
8551: GO 8838
// begin if veh and GetLives ( veh ) < 760 then
8553: LD_VAR 0 11
8557: PUSH
8558: LD_VAR 0 11
8562: PPUSH
8563: CALL_OW 256
8567: PUSH
8568: LD_INT 760
8570: LESS
8571: AND
8572: IFFALSE 8623
// begin SetTag ( i , 0 ) ;
8574: LD_VAR 0 2
8578: PPUSH
8579: LD_INT 0
8581: PPUSH
8582: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8586: LD_VAR 0 11
8590: PPUSH
8591: LD_VAR 0 6
8595: PUSH
8596: LD_INT 3
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 6
8608: PUSH
8609: LD_INT 3
8611: ARRAY
8612: PUSH
8613: LD_INT 2
8615: ARRAY
8616: PPUSH
8617: CALL_OW 111
// end else
8621: GO 8838
// if veh then
8623: LD_VAR 0 11
8627: IFFALSE 8838
// if tag <= attackFormula [ 4 ] then
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 6
8638: PUSH
8639: LD_INT 4
8641: ARRAY
8642: LESSEQUAL
8643: IFFALSE 8804
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8645: LD_VAR 0 11
8649: PPUSH
8650: LD_VAR 0 6
8654: PUSH
8655: LD_INT 4
8657: ARRAY
8658: PUSH
8659: LD_VAR 0 4
8663: ARRAY
8664: PUSH
8665: LD_INT 1
8667: ARRAY
8668: PPUSH
8669: LD_VAR 0 6
8673: PUSH
8674: LD_INT 4
8676: ARRAY
8677: PUSH
8678: LD_VAR 0 4
8682: ARRAY
8683: PUSH
8684: LD_INT 2
8686: ARRAY
8687: PPUSH
8688: CALL_OW 297
8692: PUSH
8693: LD_INT 6
8695: GREATER
8696: IFFALSE 8747
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8698: LD_VAR 0 11
8702: PPUSH
8703: LD_VAR 0 6
8707: PUSH
8708: LD_INT 4
8710: ARRAY
8711: PUSH
8712: LD_VAR 0 4
8716: ARRAY
8717: PUSH
8718: LD_INT 1
8720: ARRAY
8721: PPUSH
8722: LD_VAR 0 6
8726: PUSH
8727: LD_INT 4
8729: ARRAY
8730: PUSH
8731: LD_VAR 0 4
8735: ARRAY
8736: PUSH
8737: LD_INT 2
8739: ARRAY
8740: PPUSH
8741: CALL_OW 114
8745: GO 8802
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8747: LD_INT 81
8749: PUSH
8750: LD_INT 1
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 91
8759: PUSH
8760: LD_VAR 0 11
8764: PUSH
8765: LD_INT 10
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 69
8781: NOT
8782: IFFALSE 8802
// SetTag ( i , tag + 1 ) ;
8784: LD_VAR 0 2
8788: PPUSH
8789: LD_VAR 0 4
8793: PUSH
8794: LD_INT 1
8796: PLUS
8797: PPUSH
8798: CALL_OW 109
// end else
8802: GO 8838
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8804: LD_VAR 0 11
8808: PPUSH
8809: LD_INT 81
8811: PUSH
8812: LD_INT 1
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 69
8823: PPUSH
8824: LD_VAR 0 2
8828: PPUSH
8829: CALL_OW 74
8833: PPUSH
8834: CALL_OW 115
// end ; end ;
8838: GO 8144
8840: POP
8841: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8842: LD_EXP 47
8846: PPUSH
8847: LD_INT 52
8849: PUSH
8850: EMPTY
8851: LIST
8852: PPUSH
8853: CALL_OW 72
8857: NOT
8858: IFFALSE 7323
// end ;
8860: LD_VAR 0 1
8864: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8865: LD_INT 22
8867: PUSH
8868: LD_INT 1
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 32
8877: PUSH
8878: LD_INT 1
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PPUSH
8889: CALL_OW 69
8893: IFFALSE 8970
8895: GO 8897
8897: DISABLE
8898: LD_INT 0
8900: PPUSH
// begin enable ;
8901: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8902: LD_ADDR_VAR 0 1
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 1
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 32
8919: PUSH
8920: LD_INT 1
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: PUSH
8936: FOR_IN
8937: IFFALSE 8968
// if GetFuel ( i ) < 10 then
8939: LD_VAR 0 1
8943: PPUSH
8944: CALL_OW 261
8948: PUSH
8949: LD_INT 10
8951: LESS
8952: IFFALSE 8966
// SetFuel ( i , 10 ) ;
8954: LD_VAR 0 1
8958: PPUSH
8959: LD_INT 10
8961: PPUSH
8962: CALL_OW 240
8966: GO 8936
8968: POP
8969: POP
// end ; end_of_file
8970: PPOPN 1
8972: END
// export function Action ; var hasAll , i , tmp ; begin
8973: LD_INT 0
8975: PPUSH
8976: PPUSH
8977: PPUSH
8978: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
8979: LD_ADDR_VAR 0 2
8983: PUSH
8984: LD_INT 22
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 21
8996: PUSH
8997: LD_INT 1
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 23
9006: PUSH
9007: LD_INT 2
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 69
9023: PUSH
9024: LD_INT 7
9026: GREATEREQUAL
9027: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9028: LD_VAR 0 2
9032: PPUSH
9033: LD_STRING 03_HasAll
9035: PPUSH
9036: CALL_OW 39
// Video ( true ) ;
9040: LD_INT 1
9042: PPUSH
9043: CALL 72287 0 1
// CenterNowOnUnits ( Heike ) ;
9047: LD_EXP 28
9051: PPUSH
9052: CALL_OW 87
// wait ( 0 0$2 ) ;
9056: LD_INT 70
9058: PPUSH
9059: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9063: LD_EXP 36
9067: PPUSH
9068: LD_STRING DF-1-start
9070: PPUSH
9071: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9075: LD_EXP 28
9079: PPUSH
9080: LD_EXP 36
9084: PPUSH
9085: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9089: LD_EXP 28
9093: PPUSH
9094: LD_STRING DH-1-start
9096: PPUSH
9097: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9101: LD_EXP 37
9105: PPUSH
9106: LD_INT 92
9108: PPUSH
9109: LD_INT 21
9111: PPUSH
9112: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9116: LD_EXP 32
9120: PPUSH
9121: LD_INT 94
9123: PPUSH
9124: LD_INT 23
9126: PPUSH
9127: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9131: LD_EXP 40
9135: PUSH
9136: LD_INT 1
9138: ARRAY
9139: PPUSH
9140: LD_INT 90
9142: PPUSH
9143: LD_INT 23
9145: PPUSH
9146: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9150: LD_EXP 40
9154: PUSH
9155: LD_INT 2
9157: ARRAY
9158: PPUSH
9159: LD_INT 93
9161: PPUSH
9162: LD_INT 25
9164: PPUSH
9165: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9169: LD_EXP 40
9173: PPUSH
9174: LD_EXP 37
9178: PPUSH
9179: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9183: LD_EXP 37
9187: PUSH
9188: LD_EXP 32
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PPUSH
9197: LD_EXP 28
9201: PPUSH
9202: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9206: LD_EXP 28
9210: PPUSH
9211: LD_EXP 37
9215: PPUSH
9216: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9220: LD_INT 35
9222: PPUSH
9223: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9227: LD_EXP 37
9231: PPUSH
9232: LD_INT 92
9234: PPUSH
9235: LD_INT 21
9237: PPUSH
9238: CALL_OW 307
9242: IFFALSE 9220
// Say ( Omar , DO-1-start ) ;
9244: LD_EXP 37
9248: PPUSH
9249: LD_STRING DO-1-start
9251: PPUSH
9252: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9256: LD_EXP 28
9260: PPUSH
9261: LD_STRING DH-2-start
9263: PPUSH
9264: CALL_OW 88
// if hasAll then
9268: LD_VAR 0 2
9272: IFFALSE 9400
// begin Say ( Omar , DO-2-start ) ;
9274: LD_EXP 37
9278: PPUSH
9279: LD_STRING DO-2-start
9281: PPUSH
9282: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9286: LD_EXP 37
9290: PPUSH
9291: LD_STRING DO-3-start
9293: PPUSH
9294: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9298: LD_EXP 28
9302: PPUSH
9303: LD_STRING DH-3-start
9305: PPUSH
9306: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9310: LD_EXP 36
9314: PPUSH
9315: LD_STRING DF-2-start
9317: PPUSH
9318: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9322: LD_EXP 37
9326: PPUSH
9327: LD_EXP 36
9331: PPUSH
9332: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9336: LD_EXP 37
9340: PPUSH
9341: LD_STRING DO-4-start
9343: PPUSH
9344: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9348: LD_EXP 36
9352: PPUSH
9353: LD_STRING DF-3-start
9355: PPUSH
9356: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9360: LD_EXP 37
9364: PPUSH
9365: LD_STRING DO-5-start
9367: PPUSH
9368: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9372: LD_EXP 36
9376: PPUSH
9377: LD_STRING DF-4-start
9379: PPUSH
9380: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9384: LD_EXP 37
9388: PPUSH
9389: LD_EXP 28
9393: PPUSH
9394: CALL_OW 119
// end else
9398: GO 9500
// begin Say ( Omar , DO-2-start-a ) ;
9400: LD_EXP 37
9404: PPUSH
9405: LD_STRING DO-2-start-a
9407: PPUSH
9408: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9412: LD_EXP 37
9416: PPUSH
9417: LD_STRING DO-3-start-a
9419: PPUSH
9420: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9424: LD_EXP 28
9428: PPUSH
9429: LD_STRING DH-3-start-a
9431: PPUSH
9432: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9436: LD_EXP 36
9440: PPUSH
9441: LD_STRING DF-2-start-a
9443: PPUSH
9444: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9448: LD_EXP 37
9452: PPUSH
9453: LD_EXP 36
9457: PPUSH
9458: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9462: LD_EXP 37
9466: PPUSH
9467: LD_STRING DO-4-start-a
9469: PPUSH
9470: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9474: LD_EXP 36
9478: PPUSH
9479: LD_STRING DF-3-start-a
9481: PPUSH
9482: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9486: LD_EXP 37
9490: PPUSH
9491: LD_EXP 28
9495: PPUSH
9496: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9500: LD_INT 10
9502: PPUSH
9503: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9507: LD_EXP 37
9511: PPUSH
9512: LD_STRING DO-1-mission
9514: PPUSH
9515: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9519: LD_EXP 37
9523: PPUSH
9524: LD_STRING DO-2-mission
9526: PPUSH
9527: CALL_OW 88
// if not hasAll then
9531: LD_VAR 0 2
9535: NOT
9536: IFFALSE 9550
// Say ( Omar , DO-3-mission ) ;
9538: LD_EXP 37
9542: PPUSH
9543: LD_STRING DO-3-mission
9545: PPUSH
9546: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9550: LD_EXP 37
9554: PPUSH
9555: LD_STRING DO-4-mission
9557: PPUSH
9558: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9562: LD_EXP 28
9566: PPUSH
9567: LD_STRING DH-1-mission
9569: PPUSH
9570: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9574: LD_EXP 36
9578: PPUSH
9579: LD_STRING DF-1-mission
9581: PPUSH
9582: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9586: LD_EXP 37
9590: PPUSH
9591: LD_STRING DO-5-mission
9593: PPUSH
9594: CALL_OW 88
// if not hasAll then
9598: LD_VAR 0 2
9602: NOT
9603: IFFALSE 9738
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9605: LD_ADDR_VAR 0 4
9609: PUSH
9610: LD_INT 22
9612: PUSH
9613: LD_INT 2
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 21
9622: PUSH
9623: LD_INT 1
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 23
9632: PUSH
9633: LD_INT 2
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PPUSH
9645: CALL_OW 69
9649: ST_TO_ADDR
// for i := 7 downto tmp do
9650: LD_ADDR_VAR 0 3
9654: PUSH
9655: DOUBLE
9656: LD_INT 7
9658: INC
9659: ST_TO_ADDR
9660: LD_VAR 0 4
9664: PUSH
9665: FOR_DOWNTO
9666: IFFALSE 9736
// begin if omarSquad < 3 then
9668: LD_EXP 40
9672: PUSH
9673: LD_INT 3
9675: LESS
9676: IFFALSE 9680
// break ;
9678: GO 9736
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9680: LD_EXP 40
9684: PUSH
9685: LD_INT 3
9687: ARRAY
9688: PPUSH
9689: LD_INT 2
9691: PPUSH
9692: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9696: LD_ADDR_EXP 42
9700: PUSH
9701: LD_EXP 42
9705: PUSH
9706: LD_EXP 40
9710: PUSH
9711: LD_INT 3
9713: ARRAY
9714: UNION
9715: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9716: LD_ADDR_EXP 40
9720: PUSH
9721: LD_EXP 40
9725: PPUSH
9726: LD_INT 3
9728: PPUSH
9729: CALL_OW 3
9733: ST_TO_ADDR
// end ;
9734: GO 9665
9736: POP
9737: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9738: LD_EXP 37
9742: PUSH
9743: LD_EXP 40
9747: ADD
9748: PPUSH
9749: LD_INT 103
9751: PPUSH
9752: LD_INT 9
9754: PPUSH
9755: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9759: LD_VAR 0 2
9763: PUSH
9764: LD_EXP 33
9768: PPUSH
9769: CALL_OW 302
9773: AND
9774: IFFALSE 9835
// begin wait ( 0 0$3 ) ;
9776: LD_INT 105
9778: PPUSH
9779: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9783: LD_EXP 33
9787: PPUSH
9788: LD_EXP 36
9792: PPUSH
9793: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9797: LD_EXP 33
9801: PPUSH
9802: LD_STRING DK-1-side
9804: PPUSH
9805: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9809: LD_EXP 36
9813: PPUSH
9814: LD_EXP 33
9818: PPUSH
9819: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9823: LD_EXP 36
9827: PPUSH
9828: LD_STRING DF-1-side
9830: PPUSH
9831: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9835: LD_INT 22
9837: PUSH
9838: LD_INT 2
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 69
9849: PPUSH
9850: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9854: LD_EXP 36
9858: PUSH
9859: LD_EXP 39
9863: ADD
9864: PPUSH
9865: LD_INT 108
9867: PPUSH
9868: LD_INT 62
9870: PPUSH
9871: CALL_OW 111
// gameStarted := true ;
9875: LD_ADDR_EXP 3
9879: PUSH
9880: LD_INT 1
9882: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9883: LD_INT 105
9885: PPUSH
9886: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9890: LD_EXP 28
9894: PPUSH
9895: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9899: LD_EXP 28
9903: PPUSH
9904: LD_EXP 32
9908: PPUSH
9909: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9913: LD_INT 22
9915: PUSH
9916: LD_INT 2
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PUSH
9928: LD_EXP 28
9932: DIFF
9933: PPUSH
9934: LD_EXP 28
9938: PPUSH
9939: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
9943: LD_EXP 28
9947: PPUSH
9948: LD_STRING DH-1-explore
9950: PPUSH
9951: CALL_OW 88
// if Givi then
9955: LD_EXP 29
9959: IFFALSE 9975
// Say ( Givi , DG-1-explore ) else
9961: LD_EXP 29
9965: PPUSH
9966: LD_STRING DG-1-explore
9968: PPUSH
9969: CALL_OW 88
9973: GO 10012
// if heikeSecondSquad then
9975: LD_EXP 42
9979: IFFALSE 10012
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
9981: LD_EXP 42
9985: PPUSH
9986: LD_INT 26
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PPUSH
9996: CALL_OW 72
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PPUSH
10005: LD_STRING DArm-1-explore
10007: PPUSH
10008: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10012: LD_EXP 32
10016: PPUSH
10017: LD_STRING DA-1-explore
10019: PPUSH
10020: CALL_OW 88
// if Sophia then
10024: LD_EXP 34
10028: IFFALSE 10106
// begin Say ( Sophia , DS-2-explore ) ;
10030: LD_EXP 34
10034: PPUSH
10035: LD_STRING DS-2-explore
10037: PPUSH
10038: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10042: LD_EXP 32
10046: PPUSH
10047: LD_STRING DA-2-explore
10049: PPUSH
10050: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10054: LD_EXP 34
10058: PPUSH
10059: LD_EXP 32
10063: PPUSH
10064: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10068: LD_EXP 32
10072: PPUSH
10073: LD_EXP 34
10077: PPUSH
10078: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10082: LD_EXP 34
10086: PPUSH
10087: LD_STRING DS-3-explore
10089: PPUSH
10090: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10094: LD_EXP 32
10098: PPUSH
10099: LD_STRING DA-3-explore
10101: PPUSH
10102: CALL_OW 88
// end ; if Mike then
10106: LD_EXP 30
10110: IFFALSE 10166
// begin Say ( Mike , DM-1-explore ) ;
10112: LD_EXP 30
10116: PPUSH
10117: LD_STRING DM-1-explore
10119: PPUSH
10120: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10124: LD_EXP 28
10128: PPUSH
10129: LD_STRING DH-2-explore
10131: PPUSH
10132: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10136: LD_EXP 30
10140: PPUSH
10141: LD_STRING DM-2-explore
10143: PPUSH
10144: CALL_OW 88
// if Kaia then
10148: LD_EXP 33
10152: IFFALSE 10166
// Say ( Kaia , DK-1-explore ) ;
10154: LD_EXP 33
10158: PPUSH
10159: LD_STRING DK-1-explore
10161: PPUSH
10162: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10166: LD_INT 22
10168: PUSH
10169: LD_INT 2
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PPUSH
10176: CALL_OW 69
10180: PPUSH
10181: CALL_OW 139
// Video ( false ) ;
10185: LD_INT 0
10187: PPUSH
10188: CALL 72287 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10192: LD_STRING BuildBase
10194: PPUSH
10195: CALL_OW 337
// SaveForQuickRestart ;
10199: CALL_OW 22
// end ;
10203: LD_VAR 0 1
10207: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10208: LD_EXP 5
10212: NOT
10213: PUSH
10214: LD_EXP 6
10218: NOT
10219: AND
10220: PUSH
10221: LD_INT 5
10223: PPUSH
10224: LD_INT 22
10226: PUSH
10227: LD_INT 2
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 70
10238: AND
10239: PUSH
10240: LD_EXP 6
10244: NOT
10245: AND
10246: IFFALSE 10331
10248: GO 10250
10250: DISABLE
// begin if Mike then
10251: LD_EXP 30
10255: IFFALSE 10271
// Say ( Mike , DM-1-scout ) else
10257: LD_EXP 30
10261: PPUSH
10262: LD_STRING DM-1-scout
10264: PPUSH
10265: CALL_OW 88
10269: GO 10302
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10271: LD_EXP 42
10275: PPUSH
10276: LD_INT 26
10278: PUSH
10279: LD_INT 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 72
10290: PUSH
10291: LD_INT 1
10293: ARRAY
10294: PPUSH
10295: LD_STRING DArm-1-explore
10297: PPUSH
10298: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10302: LD_INT 54
10304: PPUSH
10305: LD_INT 35
10307: PPUSH
10308: LD_INT 2
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10318: LD_INT 54
10320: PPUSH
10321: LD_INT 35
10323: PPUSH
10324: LD_INT 2
10326: PPUSH
10327: CALL_OW 331
// end ;
10331: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10332: LD_INT 6
10334: PPUSH
10335: LD_INT 22
10337: PUSH
10338: LD_INT 2
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 70
10349: PUSH
10350: LD_EXP 6
10354: NOT
10355: AND
10356: IFFALSE 10610
10358: GO 10360
10360: DISABLE
10361: LD_INT 0
10363: PPUSH
10364: PPUSH
10365: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10366: LD_ADDR_VAR 0 1
10370: PUSH
10371: LD_EXP 42
10375: PPUSH
10376: LD_INT 26
10378: PUSH
10379: LD_INT 1
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 72
10390: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10391: LD_ADDR_VAR 0 2
10395: PUSH
10396: LD_EXP 42
10400: PPUSH
10401: LD_INT 26
10403: PUSH
10404: LD_INT 2
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 72
10415: ST_TO_ADDR
// DialogueOn ;
10416: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10420: LD_INT 36
10422: PPUSH
10423: LD_INT 22
10425: PPUSH
10426: LD_INT 2
10428: PPUSH
10429: LD_INT 8
10431: PPUSH
10432: CALL_OW 330
// dwait ( 0 0$1 ) ;
10436: LD_INT 35
10438: PPUSH
10439: CALL_OW 68
// speakerOk := false ;
10443: LD_ADDR_VAR 0 3
10447: PUSH
10448: LD_INT 0
10450: ST_TO_ADDR
// if Mike then
10451: LD_EXP 30
10455: IFFALSE 10477
// speakerOk := Say ( Mike , DM-1-spot ) else
10457: LD_ADDR_VAR 0 3
10461: PUSH
10462: LD_EXP 30
10466: PPUSH
10467: LD_STRING DM-1-spot
10469: PPUSH
10470: CALL_OW 88
10474: ST_TO_ADDR
10475: GO 10505
// if randomMen then
10477: LD_VAR 0 1
10481: IFFALSE 10505
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10483: LD_ADDR_VAR 0 3
10487: PUSH
10488: LD_VAR 0 1
10492: PUSH
10493: LD_INT 1
10495: ARRAY
10496: PPUSH
10497: LD_STRING DArm-1-spot-a
10499: PPUSH
10500: CALL_OW 88
10504: ST_TO_ADDR
// if speakerOk then
10505: LD_VAR 0 3
10509: IFFALSE 10553
// begin if Givi then
10511: LD_EXP 29
10515: IFFALSE 10531
// Say ( Givi , DG-1-spot ) else
10517: LD_EXP 29
10521: PPUSH
10522: LD_STRING DG-1-spot
10524: PPUSH
10525: CALL_OW 88
10529: GO 10553
// if randomWomen then
10531: LD_VAR 0 2
10535: IFFALSE 10553
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10537: LD_VAR 0 2
10541: PUSH
10542: LD_INT 1
10544: ARRAY
10545: PPUSH
10546: LD_STRING DArf-1-spot-a
10548: PPUSH
10549: CALL_OW 88
// end ; if Mike then
10553: LD_EXP 30
10557: IFFALSE 10573
// Say ( Heike , DH-1-spot ) else
10559: LD_EXP 28
10563: PPUSH
10564: LD_STRING DH-1-spot
10566: PPUSH
10567: CALL_OW 88
10571: GO 10585
// Say ( Heike , DH-1-spot-a ) ;
10573: LD_EXP 28
10577: PPUSH
10578: LD_STRING DH-1-spot-a
10580: PPUSH
10581: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10585: LD_INT 36
10587: PPUSH
10588: LD_INT 22
10590: PPUSH
10591: LD_INT 2
10593: PPUSH
10594: CALL_OW 331
// DialogueOff ;
10598: CALL_OW 7
// americanBaseSpoted := true ;
10602: LD_ADDR_EXP 5
10606: PUSH
10607: LD_INT 1
10609: ST_TO_ADDR
// end ;
10610: PPOPN 3
10612: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10613: LD_EXP 5
10617: NOT
10618: PUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 2
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 101
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: AND
10648: PUSH
10649: LD_EXP 6
10653: NOT
10654: AND
10655: IFFALSE 10741
10657: GO 10659
10659: DISABLE
10660: LD_INT 0
10662: PPUSH
// begin americanBaseSpoted := true ;
10663: LD_ADDR_EXP 5
10667: PUSH
10668: LD_INT 1
10670: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10671: LD_ADDR_VAR 0 1
10675: PUSH
10676: LD_EXP 42
10680: PPUSH
10681: LD_INT 26
10683: PUSH
10684: LD_INT 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 72
10695: ST_TO_ADDR
// if not randomMen then
10696: LD_VAR 0 1
10700: NOT
10701: IFFALSE 10705
// exit ;
10703: GO 10741
// DialogueOn ;
10705: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10709: LD_VAR 0 1
10713: PUSH
10714: LD_INT 1
10716: ARRAY
10717: PPUSH
10718: LD_STRING DArm-1-spot-a
10720: PPUSH
10721: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10725: LD_EXP 28
10729: PPUSH
10730: LD_STRING DH-1-spot-a
10732: PPUSH
10733: CALL_OW 88
// DialogueOff ;
10737: CALL_OW 7
// end ;
10741: PPOPN 1
10743: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10744: LD_INT 11
10746: PPUSH
10747: CALL_OW 255
10751: PUSH
10752: LD_INT 2
10754: EQUAL
10755: PUSH
10756: LD_INT 7
10758: PPUSH
10759: LD_INT 22
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: LD_INT 50
10774: PUSH
10775: EMPTY
10776: LIST
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 30
10784: PUSH
10785: LD_INT 31
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 70
10801: OR
10802: PUSH
10803: LD_INT 7
10805: PPUSH
10806: LD_INT 22
10808: PUSH
10809: LD_INT 2
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PPUSH
10816: CALL_OW 70
10820: PUSH
10821: LD_INT 1
10823: GREATER
10824: OR
10825: PUSH
10826: LD_EXP 44
10830: PUSH
10831: LD_INT 4
10833: LESSEQUAL
10834: OR
10835: IFFALSE 11414
10837: GO 10839
10839: DISABLE
10840: LD_INT 0
10842: PPUSH
10843: PPUSH
// begin wait ( 0 0$3 ) ;
10844: LD_INT 105
10846: PPUSH
10847: CALL_OW 67
// americanStartRun := true ;
10851: LD_ADDR_EXP 14
10855: PUSH
10856: LD_INT 1
10858: ST_TO_ADDR
// if IsOk ( usCommander ) then
10859: LD_EXP 45
10863: PPUSH
10864: CALL_OW 302
10868: IFFALSE 10898
// begin usForces := usForces union usCommander ;
10870: LD_ADDR_EXP 44
10874: PUSH
10875: LD_EXP 44
10879: PUSH
10880: LD_EXP 45
10884: UNION
10885: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10886: LD_EXP 45
10890: PPUSH
10891: LD_STRING DUsm-1-assault
10893: PPUSH
10894: CALL_OW 88
// end ; for i in usForces do
10898: LD_ADDR_VAR 0 1
10902: PUSH
10903: LD_EXP 44
10907: PUSH
10908: FOR_IN
10909: IFFALSE 10955
// begin if IsInUnit ( i ) then
10911: LD_VAR 0 1
10915: PPUSH
10916: CALL_OW 310
10920: IFFALSE 10931
// ComExitBuilding ( i ) ;
10922: LD_VAR 0 1
10926: PPUSH
10927: CALL_OW 122
// wait ( 3 ) ;
10931: LD_INT 3
10933: PPUSH
10934: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10938: LD_VAR 0 1
10942: PPUSH
10943: LD_INT 34
10945: PPUSH
10946: LD_INT 67
10948: PPUSH
10949: CALL_OW 111
// end ;
10953: GO 10908
10955: POP
10956: POP
// Say ( Heike , DH-1-assault ) ;
10957: LD_EXP 28
10961: PPUSH
10962: LD_STRING DH-1-assault
10964: PPUSH
10965: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10969: LD_INT 35
10971: PPUSH
10972: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10976: LD_VAR 0 1
10980: PPUSH
10981: LD_INT 34
10983: PPUSH
10984: LD_INT 67
10986: PPUSH
10987: CALL_OW 111
// until not usForces ;
10991: LD_EXP 44
10995: NOT
10996: IFFALSE 10969
// music_nat := 2 ;
10998: LD_ADDR_OWVAR 71
11002: PUSH
11003: LD_INT 2
11005: ST_TO_ADDR
// music_class := music_victory ;
11006: LD_ADDR_OWVAR 72
11010: PUSH
11011: LD_INT 4
11013: ST_TO_ADDR
// if not americanHasEscaped then
11014: LD_EXP 8
11018: NOT
11019: IFFALSE 11040
// begin Say ( Heike , DH-2-assault ) ;
11021: LD_EXP 28
11025: PPUSH
11026: LD_STRING DH-2-assault
11028: PPUSH
11029: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11033: LD_STRING ACH_CLEAN
11035: PPUSH
11036: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11040: LD_INT 70
11042: PPUSH
11043: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11047: LD_INT 35
11049: PPUSH
11050: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11054: LD_INT 22
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 3
11076: PUSH
11077: LD_INT 50
11079: PUSH
11080: EMPTY
11081: LIST
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: PPUSH
11092: CALL_OW 69
11096: NOT
11097: IFFALSE 11047
// InGameOn ;
11099: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11103: LD_INT 11
11105: PPUSH
11106: CALL_OW 255
11110: PUSH
11111: LD_INT 2
11113: EQUAL
11114: NOT
11115: IFFALSE 11127
// SetSide ( usDepot , 2 ) ;
11117: LD_INT 11
11119: PPUSH
11120: LD_INT 2
11122: PPUSH
11123: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11127: LD_INT 35
11129: PPUSH
11130: LD_INT 22
11132: PPUSH
11133: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11137: LD_EXP 28
11141: PPUSH
11142: LD_INT 35
11144: PPUSH
11145: LD_INT 22
11147: PPUSH
11148: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11152: LD_EXP 28
11156: PPUSH
11157: LD_INT 38
11159: PPUSH
11160: LD_INT 25
11162: PPUSH
11163: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11167: LD_EXP 41
11171: PUSH
11172: LD_EXP 42
11176: UNION
11177: PPUSH
11178: LD_INT 39
11180: PPUSH
11181: LD_INT 26
11183: PPUSH
11184: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11188: LD_EXP 41
11192: PUSH
11193: LD_EXP 42
11197: UNION
11198: PPUSH
11199: LD_EXP 28
11203: PPUSH
11204: CALL_OW 179
// p := 0 ;
11208: LD_ADDR_VAR 0 2
11212: PUSH
11213: LD_INT 0
11215: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11216: LD_INT 35
11218: PPUSH
11219: CALL_OW 67
// p := p + 1 ;
11223: LD_ADDR_VAR 0 2
11227: PUSH
11228: LD_VAR 0 2
11232: PUSH
11233: LD_INT 1
11235: PLUS
11236: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11237: LD_EXP 28
11241: PPUSH
11242: CALL_OW 314
11246: NOT
11247: PUSH
11248: LD_VAR 0 2
11252: PUSH
11253: LD_INT 10
11255: GREATER
11256: OR
11257: IFFALSE 11216
// Say ( Heike , DH-1-capture ) ;
11259: LD_EXP 28
11263: PPUSH
11264: LD_STRING DH-1-capture
11266: PPUSH
11267: CALL_OW 88
// if Markov then
11271: LD_EXP 35
11275: IFFALSE 11289
// Say ( Markov , DMar-1-capture ) ;
11277: LD_EXP 35
11281: PPUSH
11282: LD_STRING DMar-1-capture
11284: PPUSH
11285: CALL_OW 88
// if Sophia then
11289: LD_EXP 34
11293: IFFALSE 11319
// begin Say ( Heike , DH-2-capture ) ;
11295: LD_EXP 28
11299: PPUSH
11300: LD_STRING DH-2-capture
11302: PPUSH
11303: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11307: LD_EXP 34
11311: PPUSH
11312: LD_STRING DS-1-capture
11314: PPUSH
11315: CALL_OW 88
// end ; InGameOff ;
11319: CALL_OW 9
// music_nat := music_auto ;
11323: LD_ADDR_OWVAR 71
11327: PUSH
11328: LD_INT 0
11330: ST_TO_ADDR
// music_class := music_auto ;
11331: LD_ADDR_OWVAR 72
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11339: LD_STRING ConstructBase
11341: PPUSH
11342: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11346: LD_ADDR_VAR 0 1
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 1
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 21
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: PUSH
11380: FOR_IN
11381: IFFALSE 11397
// SetSide ( i , 2 ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 2
11390: PPUSH
11391: CALL_OW 235
11395: GO 11380
11397: POP
11398: POP
// wait ( 0 0$3 ) ;
11399: LD_INT 105
11401: PPUSH
11402: CALL_OW 67
// americanBaseCaptured := true ;
11406: LD_ADDR_EXP 6
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// end ;
11414: PPOPN 2
11416: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11417: LD_EXP 13
11421: PUSH
11422: LD_INT 3
11424: GREATEREQUAL
11425: IFFALSE 11437
11427: GO 11429
11429: DISABLE
// SetAchievement ( ACH_ENG ) ;
11430: LD_STRING ACH_ENG
11432: PPUSH
11433: CALL_OW 543
11437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11438: LD_INT 22
11440: PUSH
11441: LD_INT 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 25
11450: PUSH
11451: LD_INT 15
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 69
11466: PUSH
11467: LD_INT 4
11469: GREATEREQUAL
11470: IFFALSE 11482
11472: GO 11474
11474: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11475: LD_STRING ACH_APEGEN
11477: PPUSH
11478: CALL_OW 543
11482: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11483: LD_INT 22
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 2
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 3
11505: PUSH
11506: LD_INT 57
11508: PUSH
11509: EMPTY
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: PPUSH
11521: CALL_OW 69
11525: IFFALSE 11768
11527: GO 11529
11529: DISABLE
// begin workshopBuilded := true ;
11530: LD_ADDR_EXP 10
11534: PUSH
11535: LD_INT 1
11537: ST_TO_ADDR
// if IsOk ( Markov ) then
11538: LD_EXP 35
11542: PPUSH
11543: CALL_OW 302
11547: IFFALSE 11606
// begin Say ( Heike , DH-1-shop-a ) ;
11549: LD_EXP 28
11553: PPUSH
11554: LD_STRING DH-1-shop-a
11556: PPUSH
11557: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11561: LD_INT 47
11563: PPUSH
11564: LD_INT 2
11566: PPUSH
11567: CALL_OW 321
11571: PUSH
11572: LD_INT 2
11574: EQUAL
11575: PUSH
11576: LD_INT 45
11578: PPUSH
11579: LD_INT 2
11581: PPUSH
11582: CALL_OW 321
11586: PUSH
11587: LD_INT 2
11589: EQUAL
11590: AND
11591: NOT
11592: IFFALSE 11606
// Say ( Markov , DMar-1-shop-a ) ;
11594: LD_EXP 35
11598: PPUSH
11599: LD_STRING DMar-1-shop-a
11601: PPUSH
11602: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11606: LD_INT 35
11608: PPUSH
11609: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11613: LD_INT 47
11615: PPUSH
11616: LD_INT 2
11618: PPUSH
11619: CALL_OW 321
11623: PUSH
11624: LD_INT 2
11626: EQUAL
11627: PUSH
11628: LD_INT 45
11630: PPUSH
11631: LD_INT 2
11633: PPUSH
11634: CALL_OW 321
11638: PUSH
11639: LD_INT 2
11641: EQUAL
11642: OR
11643: IFFALSE 11606
// DialogueOn ;
11645: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11649: LD_EXP 35
11653: PPUSH
11654: LD_STRING DMar-1-shop
11656: PPUSH
11657: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11661: LD_EXP 28
11665: PPUSH
11666: LD_STRING DH-1-shop
11668: PPUSH
11669: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11673: LD_EXP 35
11677: PPUSH
11678: LD_STRING DMar-2-shop
11680: PPUSH
11681: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11685: LD_EXP 35
11689: PPUSH
11690: LD_STRING DMar-3-shop
11692: PPUSH
11693: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11697: LD_EXP 28
11701: PPUSH
11702: LD_STRING DH-2-shop
11704: PPUSH
11705: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11709: LD_EXP 35
11713: PPUSH
11714: LD_STRING DMar-4-shop
11716: PPUSH
11717: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11721: LD_EXP 28
11725: PPUSH
11726: LD_STRING DH-3-shop
11728: PPUSH
11729: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11733: LD_EXP 35
11737: PPUSH
11738: LD_STRING DMar-5-shop
11740: PPUSH
11741: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11745: LD_EXP 28
11749: PPUSH
11750: LD_STRING DH-4-shop
11752: PPUSH
11753: CALL_OW 88
// DialogueOff ;
11757: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11761: LD_STRING ConstructVeh
11763: PPUSH
11764: CALL_OW 337
// end ;
11768: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11769: LD_INT 2
11771: PPUSH
11772: LD_INT 2
11774: PPUSH
11775: LD_INT 1
11777: PPUSH
11778: CALL 36389 0 3
11782: PUSH
11783: LD_INT 0
11785: EQUAL
11786: IFFALSE 11798
11788: GO 11790
11790: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11791: LD_STRING Techs
11793: PPUSH
11794: CALL_OW 337
11798: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11799: LD_EXP 35
11803: PPUSH
11804: CALL_OW 302
11808: PUSH
11809: LD_INT 22
11811: PUSH
11812: LD_INT 2
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 2
11821: PUSH
11822: LD_INT 34
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 35
11834: PUSH
11835: LD_INT 22
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: AND
11856: IFFALSE 11963
11858: GO 11860
11860: DISABLE
// begin DialogueOn ;
11861: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11865: LD_INT 22
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 2
11877: PUSH
11878: LD_INT 34
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 35
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: PPUSH
11912: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11916: LD_INT 10
11918: PPUSH
11919: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11923: LD_EXP 28
11927: PPUSH
11928: LD_STRING DH-1-bal
11930: PPUSH
11931: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
11935: LD_EXP 35
11939: PPUSH
11940: LD_STRING DMar-1-bal
11942: PPUSH
11943: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
11947: LD_EXP 28
11951: PPUSH
11952: LD_STRING DH-2-bal
11954: PPUSH
11955: CALL_OW 88
// DialogueOff ;
11959: CALL_OW 7
// end ;
11963: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
11964: LD_EXP 32
11968: PPUSH
11969: CALL_OW 302
11973: PUSH
11974: LD_INT 22
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 30
11986: PUSH
11987: LD_INT 6
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PPUSH
11998: CALL_OW 69
12002: AND
12003: IFFALSE 12064
12005: GO 12007
12007: DISABLE
// begin DialogueOn ;
12008: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12012: LD_EXP 32
12016: PPUSH
12017: LD_STRING DA-1-lab
12019: PPUSH
12020: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12024: LD_EXP 28
12028: PPUSH
12029: LD_STRING DH-1-lab
12031: PPUSH
12032: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12036: LD_EXP 32
12040: PPUSH
12041: LD_STRING DA-2-lab
12043: PPUSH
12044: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12048: LD_EXP 28
12052: PPUSH
12053: LD_STRING DH-2-lab
12055: PPUSH
12056: CALL_OW 88
// DialogueOff ;
12060: CALL_OW 7
// end ;
12064: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12065: LD_EXP 33
12069: PPUSH
12070: CALL_OW 302
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_INT 2
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 25
12087: PUSH
12088: LD_INT 15
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PPUSH
12099: CALL_OW 69
12103: AND
12104: PUSH
12105: LD_INT 81
12107: PUSH
12108: LD_INT 2
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 69
12119: NOT
12120: AND
12121: IFFALSE 12303
12123: GO 12125
12125: DISABLE
12126: LD_INT 0
12128: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12129: LD_ADDR_VAR 0 1
12133: PUSH
12134: LD_INT 22
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 25
12146: PUSH
12147: LD_INT 15
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PPUSH
12158: CALL_OW 69
12162: ST_TO_ADDR
// InGameOn ;
12163: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12167: LD_VAR 0 1
12171: PUSH
12172: LD_INT 1
12174: ARRAY
12175: PPUSH
12176: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12180: LD_VAR 0 1
12184: PUSH
12185: LD_INT 1
12187: ARRAY
12188: PPUSH
12189: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12193: LD_EXP 33
12197: PPUSH
12198: LD_STRING DK-1-apesol
12200: PPUSH
12201: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12205: LD_VAR 0 1
12209: PUSH
12210: LD_INT 1
12212: ARRAY
12213: PPUSH
12214: LD_INT 35
12216: PPUSH
12217: LD_INT 28
12219: PPUSH
12220: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12224: LD_VAR 0 1
12228: PUSH
12229: LD_INT 1
12231: ARRAY
12232: PPUSH
12233: LD_INT 36
12235: PPUSH
12236: LD_INT 17
12238: PPUSH
12239: CALL_OW 171
// DialogueOn ;
12243: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12247: LD_EXP 32
12251: PPUSH
12252: LD_STRING DA-1-apesol
12254: PPUSH
12255: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12259: LD_EXP 33
12263: PPUSH
12264: LD_STRING DK-2-apesol
12266: PPUSH
12267: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12271: LD_EXP 32
12275: PPUSH
12276: LD_STRING DA-2-apesol
12278: PPUSH
12279: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12283: LD_EXP 33
12287: PPUSH
12288: LD_STRING DK-3-apesol
12290: PPUSH
12291: CALL_OW 88
// DialogueOff ;
12295: CALL_OW 7
// InGameOff ;
12299: CALL_OW 9
// end ;
12303: PPOPN 1
12305: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12306: LD_EXP 34
12310: PPUSH
12311: CALL_OW 302
12315: PUSH
12316: LD_INT 22
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 25
12328: PUSH
12329: LD_INT 16
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PPUSH
12340: CALL_OW 69
12344: AND
12345: PUSH
12346: LD_INT 81
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PPUSH
12356: CALL_OW 69
12360: NOT
12361: AND
12362: IFFALSE 12625
12364: GO 12366
12366: DISABLE
12367: LD_INT 0
12369: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12370: LD_ADDR_VAR 0 1
12374: PUSH
12375: LD_INT 22
12377: PUSH
12378: LD_INT 2
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 25
12387: PUSH
12388: LD_INT 16
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 69
12403: ST_TO_ADDR
// InGameOn ;
12404: CALL_OW 8
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12408: LD_INT 5
12410: PPUSH
12411: LD_INT 35
12413: PPUSH
12414: LD_INT 22
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12424: LD_EXP 34
12428: PPUSH
12429: LD_VAR 0 1
12433: PUSH
12434: LD_INT 1
12436: ARRAY
12437: PPUSH
12438: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12442: LD_VAR 0 1
12446: PUSH
12447: LD_INT 1
12449: ARRAY
12450: PPUSH
12451: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12455: LD_VAR 0 1
12459: PUSH
12460: LD_INT 1
12462: ARRAY
12463: PPUSH
12464: CALL_OW 122
// wait ( 0 0$2 ) ;
12468: LD_INT 70
12470: PPUSH
12471: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12475: LD_EXP 34
12479: PPUSH
12480: LD_STRING DS-1-apeeng
12482: PPUSH
12483: CALL_OW 88
// if IsOk ( Kamil ) then
12487: LD_EXP 31
12491: PPUSH
12492: CALL_OW 302
12496: IFFALSE 12621
// begin Say ( Kamil , DKam-1-apeeng ) ;
12498: LD_EXP 31
12502: PPUSH
12503: LD_STRING DKam-1-apeeng
12505: PPUSH
12506: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12510: LD_EXP 34
12514: PPUSH
12515: LD_STRING DS-2-apeeng
12517: PPUSH
12518: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12522: LD_EXP 31
12526: PPUSH
12527: LD_STRING DKam-2-apeeng
12529: PPUSH
12530: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12534: LD_EXP 34
12538: PPUSH
12539: LD_STRING DS-3-apeeng
12541: PPUSH
12542: CALL_OW 88
// if not IsOK ( Kaia ) then
12546: LD_EXP 33
12550: PPUSH
12551: CALL_OW 302
12555: NOT
12556: IFFALSE 12564
// begin InGameOff ;
12558: CALL_OW 9
// exit ;
12562: GO 12625
// end ; Say ( Kaia , DK-1-apeeng ) ;
12564: LD_EXP 33
12568: PPUSH
12569: LD_STRING DK-1-apeeng
12571: PPUSH
12572: CALL_OW 88
// if not IsOk ( Givi ) then
12576: LD_EXP 29
12580: PPUSH
12581: CALL_OW 302
12585: NOT
12586: IFFALSE 12597
// begin Video ( false ) ;
12588: LD_INT 0
12590: PPUSH
12591: CALL 72287 0 1
// exit ;
12595: GO 12625
// end ; Say ( Givi , DG-1-apeeng ) ;
12597: LD_EXP 29
12601: PPUSH
12602: LD_STRING DG-1-apeeng
12604: PPUSH
12605: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12609: LD_EXP 33
12613: PPUSH
12614: LD_STRING DK-2-apeeng
12616: PPUSH
12617: CALL_OW 88
// end ; InGameOff ;
12621: CALL_OW 9
// end ;
12625: PPOPN 1
12627: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12628: LD_EXP 4
12632: PUSH
12633: LD_INT 22
12635: PUSH
12636: LD_INT 2
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 30
12645: PUSH
12646: LD_INT 0
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: AND
12662: IFFALSE 12827
12664: GO 12666
12666: DISABLE
// begin wait ( 0 0$10 ) ;
12667: LD_INT 350
12669: PPUSH
12670: CALL_OW 67
// DialogueOn ;
12674: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12678: LD_EXP 36
12682: PPUSH
12683: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12687: LD_EXP 36
12691: PPUSH
12692: LD_STRING DF-1-distribution
12694: PPUSH
12695: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12699: LD_EXP 28
12703: PPUSH
12704: LD_STRING DH-2-distribution
12706: PPUSH
12707: CALL_OW 88
// if IsOk ( Kaia ) then
12711: LD_EXP 33
12715: PPUSH
12716: CALL_OW 302
12720: IFFALSE 12781
// begin Say ( Kaia , DK-1-distribution ) ;
12722: LD_EXP 33
12726: PPUSH
12727: LD_STRING DK-1-distribution
12729: PPUSH
12730: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12734: LD_EXP 28
12738: PPUSH
12739: LD_STRING DH-1-distribution
12741: PPUSH
12742: CALL_OW 88
// if IsOk ( Givi ) then
12746: LD_EXP 29
12750: PPUSH
12751: CALL_OW 302
12755: IFFALSE 12781
// begin Say ( Givi , DG-1-distribution ) ;
12757: LD_EXP 29
12761: PPUSH
12762: LD_STRING DG-1-distribution
12764: PPUSH
12765: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12769: LD_EXP 28
12773: PPUSH
12774: LD_STRING DH-3-distribution
12776: PPUSH
12777: CALL_OW 88
// end ; end ; DialogueOff ;
12781: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12785: LD_STRING Crates1
12787: PPUSH
12788: CALL_OW 337
// farmerRequestedCrates := 300 ;
12792: LD_ADDR_EXP 16
12796: PUSH
12797: LD_INT 300
12799: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12800: LD_STRING FarmerCrates
12802: PPUSH
12803: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12807: LD_INT 10
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12817: LD_INT 108
12819: PPUSH
12820: LD_INT 61
12822: PPUSH
12823: CALL_OW 86
// end ;
12827: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12828: LD_EXP 6
12832: PUSH
12833: LD_INT 22
12835: PUSH
12836: LD_INT 2
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 3
12845: PUSH
12846: LD_INT 57
12848: PUSH
12849: EMPTY
12850: LIST
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 2
12858: PUSH
12859: LD_INT 30
12861: PUSH
12862: LD_INT 6
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 30
12871: PUSH
12872: LD_INT 7
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: PPUSH
12889: CALL_OW 69
12893: AND
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 2
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 3
12907: PUSH
12908: LD_INT 57
12910: PUSH
12911: EMPTY
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 30
12920: PUSH
12921: LD_INT 4
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: PPUSH
12933: CALL_OW 69
12937: AND
12938: IFFALSE 13102
12940: GO 12942
12942: DISABLE
12943: LD_INT 0
12945: PPUSH
// begin wait ( 0 0$10 ) ;
12946: LD_INT 350
12948: PPUSH
12949: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
12953: LD_ADDR_VAR 0 1
12957: PUSH
12958: LD_EXP 42
12962: PPUSH
12963: LD_INT 26
12965: PUSH
12966: LD_INT 1
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 25
12975: PUSH
12976: LD_INT 2
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PPUSH
12987: CALL_OW 72
12991: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
12992: LD_EXP 28
12996: PPUSH
12997: LD_STRING DH-1-task
12999: PPUSH
13000: CALL_OW 88
// if IsOk ( Sophia ) then
13004: LD_EXP 34
13008: PPUSH
13009: CALL_OW 302
13013: IFFALSE 13053
// begin Say ( Sophia , DS-1-task ) ;
13015: LD_EXP 34
13019: PPUSH
13020: LD_STRING DS-1-task
13022: PPUSH
13023: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13027: LD_EXP 34
13031: PPUSH
13032: LD_STRING DS-2-task
13034: PPUSH
13035: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13039: LD_EXP 28
13043: PPUSH
13044: LD_STRING DH-2-task
13046: PPUSH
13047: CALL_OW 88
// end else
13051: GO 13087
// if eng then
13053: LD_VAR 0 1
13057: IFFALSE 13087
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13059: LD_VAR 0 1
13063: PUSH
13064: LD_INT 1
13066: ARRAY
13067: PPUSH
13068: LD_STRING DArm-1-task
13070: PPUSH
13071: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13075: LD_EXP 28
13079: PPUSH
13080: LD_STRING DH-2-task
13082: PPUSH
13083: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13087: LD_STRING BaseConstructed
13089: PPUSH
13090: CALL_OW 337
// allowConvoys := true ;
13094: LD_ADDR_EXP 12
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// end ;
13102: PPOPN 1
13104: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13105: LD_INT 22
13107: PUSH
13108: LD_INT 4
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 34
13117: PUSH
13118: LD_INT 12
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PPUSH
13129: CALL_OW 69
13133: IFFALSE 13301
13135: GO 13137
13137: DISABLE
13138: LD_INT 0
13140: PPUSH
13141: PPUSH
13142: PPUSH
// begin wait ( 0 0$2 ) ;
13143: LD_INT 70
13145: PPUSH
13146: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13150: LD_ADDR_VAR 0 1
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 4
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 34
13167: PUSH
13168: LD_INT 12
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PPUSH
13179: CALL_OW 69
13183: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13184: LD_ADDR_VAR 0 2
13188: PUSH
13189: LD_VAR 0 1
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: PPUSH
13198: CALL_OW 250
13202: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13203: LD_ADDR_VAR 0 3
13207: PUSH
13208: LD_VAR 0 1
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: PPUSH
13217: CALL_OW 251
13221: ST_TO_ADDR
// DialogueOn ;
13222: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13226: LD_VAR 0 2
13230: PPUSH
13231: LD_VAR 0 3
13235: PPUSH
13236: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13240: LD_VAR 0 2
13244: PPUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 2
13252: PPUSH
13253: LD_INT 6
13255: NEG
13256: PPUSH
13257: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13261: LD_INT 10
13263: PPUSH
13264: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13268: LD_EXP 28
13272: PPUSH
13273: LD_STRING DH-1-seecargo
13275: PPUSH
13276: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13280: LD_VAR 0 2
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 2
13292: PPUSH
13293: CALL_OW 331
// DialogueOff ;
13297: CALL_OW 7
// end ;
13301: PPOPN 3
13303: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13304: LD_EXP 4
13308: PUSH
13309: LD_EXP 15
13313: PUSH
13314: LD_INT 300
13316: GREATEREQUAL
13317: AND
13318: IFFALSE 13390
13320: GO 13322
13322: DISABLE
// begin DialogueOn ;
13323: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13327: LD_EXP 36
13331: PPUSH
13332: LD_STRING DF-1-delivery-2
13334: PPUSH
13335: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13339: LD_EXP 28
13343: PPUSH
13344: LD_STRING DH-1-delivery-2
13346: PPUSH
13347: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13351: LD_EXP 36
13355: PPUSH
13356: LD_STRING DF-2-delivery-2
13358: PPUSH
13359: CALL_OW 94
// DialogueOff ;
13363: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13367: LD_STRING Crates2
13369: PPUSH
13370: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13374: LD_ADDR_EXP 17
13378: PUSH
13379: LD_INT 63000
13381: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13382: LD_ADDR_EXP 16
13386: PUSH
13387: LD_INT 600
13389: ST_TO_ADDR
// end ;
13390: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13391: LD_EXP 4
13395: PUSH
13396: LD_EXP 15
13400: PUSH
13401: LD_INT 600
13403: GREATEREQUAL
13404: AND
13405: PUSH
13406: LD_OWVAR 67
13410: PUSH
13411: LD_INT 1
13413: GREATER
13414: AND
13415: IFFALSE 13581
13417: GO 13419
13419: DISABLE
// begin DialogueOn ;
13420: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13424: LD_EXP 36
13428: PPUSH
13429: LD_STRING DF-1-delivery-3
13431: PPUSH
13432: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13436: LD_EXP 28
13440: PPUSH
13441: LD_STRING DH-1-delivery-3
13443: PPUSH
13444: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13448: LD_EXP 36
13452: PPUSH
13453: LD_STRING DF-2-delivery-3
13455: PPUSH
13456: CALL_OW 94
// if IsOk ( Kaia ) then
13460: LD_EXP 33
13464: PPUSH
13465: CALL_OW 302
13469: IFFALSE 13519
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13471: LD_EXP 33
13475: PPUSH
13476: LD_STRING DK-1-delivery-3
13478: PPUSH
13479: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13483: LD_EXP 28
13487: PPUSH
13488: LD_STRING DH-2-delivery-3
13490: PPUSH
13491: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13495: LD_EXP 29
13499: PPUSH
13500: LD_STRING DG-1-delivery-3
13502: PPUSH
13503: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13507: LD_EXP 30
13511: PPUSH
13512: LD_STRING DM-1-delivery-3
13514: PPUSH
13515: CALL_OW 88
// end ; DialogueOff ;
13519: CALL_OW 7
// if Difficulty = 2 then
13523: LD_OWVAR 67
13527: PUSH
13528: LD_INT 2
13530: EQUAL
13531: IFFALSE 13558
// begin ChangeMissionObjectives ( Crates3 ) ;
13533: LD_STRING Crates3
13535: PPUSH
13536: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13540: LD_ADDR_EXP 17
13544: PUSH
13545: LD_INT 63000
13547: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13548: LD_ADDR_EXP 16
13552: PUSH
13553: LD_INT 900
13555: ST_TO_ADDR
// end else
13556: GO 13581
// begin ChangeMissionObjectives ( Crates4 ) ;
13558: LD_STRING Crates4
13560: PPUSH
13561: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13565: LD_ADDR_EXP 17
13569: PUSH
13570: LD_INT 63000
13572: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13573: LD_ADDR_EXP 16
13577: PUSH
13578: LD_INT 1200
13580: ST_TO_ADDR
// end ; end ;
13581: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13582: LD_EXP 4
13586: PUSH
13587: LD_EXP 15
13591: PUSH
13592: LD_INT 600
13594: PUSH
13595: LD_INT 900
13597: PUSH
13598: LD_INT 1200
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: PUSH
13606: LD_OWVAR 67
13610: ARRAY
13611: GREATEREQUAL
13612: AND
13613: PUSH
13614: LD_EXP 16
13618: PUSH
13619: LD_EXP 17
13623: LESSEQUAL
13624: AND
13625: IFFALSE 13692
13627: GO 13629
13629: DISABLE
// begin retreatAllowed := true ;
13630: LD_ADDR_EXP 11
13634: PUSH
13635: LD_INT 1
13637: ST_TO_ADDR
// display_strings := [ ] ;
13638: LD_ADDR_OWVAR 47
13642: PUSH
13643: EMPTY
13644: ST_TO_ADDR
// DialogueOn ;
13645: CALL_OW 6
// InGameOn ;
13649: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13653: LD_EXP 37
13657: PPUSH
13658: LD_STRING DO-radio-end
13660: PPUSH
13661: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13665: LD_EXP 28
13669: PPUSH
13670: LD_STRING DH-1-radio-end
13672: PPUSH
13673: CALL_OW 88
// InGameOff ;
13677: CALL_OW 9
// DialogueOff ;
13681: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13685: LD_STRING Retreat
13687: PPUSH
13688: CALL_OW 337
// end ;
13692: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13693: LD_EXP 11
13697: IFFALSE 13828
13699: GO 13701
13701: DISABLE
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13706: LD_INT 10
13708: PPUSH
13709: LD_INT 0
13711: PPUSH
13712: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13716: LD_ADDR_VAR 0 1
13720: PUSH
13721: LD_EXP 39
13725: PPUSH
13726: LD_INT 25
13728: PUSH
13729: LD_INT 2
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PPUSH
13736: CALL_OW 72
13740: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13741: LD_VAR 0 1
13745: PUSH
13746: LD_INT 102
13748: PPUSH
13749: LD_INT 69
13751: PPUSH
13752: CALL_OW 428
13756: PUSH
13757: LD_INT 0
13759: EQUAL
13760: AND
13761: IFFALSE 13828
// begin for i in tmp do
13763: LD_ADDR_VAR 0 2
13767: PUSH
13768: LD_VAR 0 1
13772: PUSH
13773: FOR_IN
13774: IFFALSE 13798
// if IsInUnit ( i ) then
13776: LD_VAR 0 2
13780: PPUSH
13781: CALL_OW 310
13785: IFFALSE 13796
// ComExitBuilding ( i ) ;
13787: LD_VAR 0 2
13791: PPUSH
13792: CALL_OW 122
13796: GO 13773
13798: POP
13799: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_INT 31
13807: PPUSH
13808: LD_INT 102
13810: PPUSH
13811: LD_INT 69
13813: PPUSH
13814: LD_INT 2
13816: PPUSH
13817: CALL_OW 205
// wait ( 0 0$3 ) ;
13821: LD_INT 105
13823: PPUSH
13824: CALL_OW 67
// end ; end ;
13828: PPOPN 2
13830: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13831: LD_EXP 11
13835: NOT
13836: PUSH
13837: LD_INT 5
13839: PPUSH
13840: CALL_OW 301
13844: AND
13845: IFFALSE 13877
13847: GO 13849
13849: DISABLE
// begin DialogueOn ;
13850: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13854: LD_EXP 36
13858: PPUSH
13859: LD_STRING DF-1-failure
13861: PPUSH
13862: CALL_OW 94
// DialogueOff ;
13866: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13870: LD_STRING FarmerDepot
13872: PPUSH
13873: CALL_OW 104
// end ;
13877: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13878: LD_EXP 11
13882: PUSH
13883: LD_EXP 28
13887: PPUSH
13888: LD_EXP 36
13892: PPUSH
13893: CALL_OW 296
13897: PUSH
13898: LD_INT 6
13900: LESS
13901: AND
13902: PUSH
13903: LD_INT 81
13905: PUSH
13906: LD_INT 2
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 21
13915: PUSH
13916: LD_INT 1
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PPUSH
13927: CALL_OW 69
13931: NOT
13932: AND
13933: IFFALSE 14554
13935: GO 13937
13937: DISABLE
13938: LD_INT 0
13940: PPUSH
13941: PPUSH
13942: PPUSH
// begin allowConvoys := false ;
13943: LD_ADDR_EXP 12
13947: PUSH
13948: LD_INT 0
13950: ST_TO_ADDR
// InGameOn ;
13951: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
13955: LD_EXP 28
13959: PPUSH
13960: LD_EXP 36
13964: PPUSH
13965: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
13969: LD_EXP 36
13973: PPUSH
13974: LD_EXP 28
13978: PPUSH
13979: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
13983: LD_EXP 36
13987: PPUSH
13988: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
13992: LD_EXP 28
13996: PPUSH
13997: LD_STRING DH-1-end
13999: PPUSH
14000: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14004: LD_EXP 36
14008: PPUSH
14009: LD_STRING DF-1-end
14011: PPUSH
14012: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14016: LD_EXP 36
14020: PPUSH
14021: LD_STRING DF-2-end
14023: PPUSH
14024: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14028: LD_EXP 28
14032: PPUSH
14033: LD_STRING DH-2-end
14035: PPUSH
14036: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14040: LD_EXP 36
14044: PPUSH
14045: LD_STRING DF-3-end
14047: PPUSH
14048: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14052: LD_EXP 28
14056: PPUSH
14057: LD_STRING DH-3-end
14059: PPUSH
14060: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14064: LD_EXP 29
14068: PPUSH
14069: LD_STRING DG-1-end
14071: PPUSH
14072: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14076: LD_EXP 28
14080: PPUSH
14081: LD_STRING DH-4-end
14083: PPUSH
14084: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14088: LD_EXP 36
14092: PPUSH
14093: LD_STRING DF-4-end
14095: PPUSH
14096: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14100: LD_EXP 28
14104: PPUSH
14105: LD_STRING DH-5-end
14107: PPUSH
14108: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14112: LD_EXP 36
14116: PPUSH
14117: LD_STRING DF-5-end
14119: PPUSH
14120: CALL_OW 88
// InGameOff ;
14124: CALL_OW 9
// allowCargoEvacuation := true ;
14128: LD_ADDR_EXP 7
14132: PUSH
14133: LD_INT 1
14135: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14136: LD_ADDR_VAR 0 2
14140: PUSH
14141: LD_INT 4
14143: PUSH
14144: LD_INT 3
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: LIST
14154: PUSH
14155: LD_OWVAR 67
14159: ARRAY
14160: ST_TO_ADDR
// if farmerSquad < max then
14161: LD_EXP 39
14165: PUSH
14166: LD_VAR 0 2
14170: LESS
14171: IFFALSE 14183
// max := farmerSquad ;
14173: LD_ADDR_VAR 0 2
14177: PUSH
14178: LD_EXP 39
14182: ST_TO_ADDR
// for i := 1 to max do
14183: LD_ADDR_VAR 0 1
14187: PUSH
14188: DOUBLE
14189: LD_INT 1
14191: DEC
14192: ST_TO_ADDR
14193: LD_VAR 0 2
14197: PUSH
14198: FOR_TO
14199: IFFALSE 14237
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14201: LD_EXP 39
14205: PUSH
14206: LD_INT 1
14208: ARRAY
14209: PPUSH
14210: LD_INT 2
14212: PPUSH
14213: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14217: LD_ADDR_EXP 39
14221: PUSH
14222: LD_EXP 39
14226: PPUSH
14227: LD_INT 1
14229: PPUSH
14230: CALL_OW 3
14234: ST_TO_ADDR
// end ;
14235: GO 14198
14237: POP
14238: POP
// for i in Farmer ^ farmerSquad do
14239: LD_ADDR_VAR 0 1
14243: PUSH
14244: LD_EXP 36
14248: PUSH
14249: LD_EXP 39
14253: ADD
14254: PUSH
14255: FOR_IN
14256: IFFALSE 14295
// begin if IsInUnit ( i ) then
14258: LD_VAR 0 1
14262: PPUSH
14263: CALL_OW 310
14267: IFFALSE 14278
// ComExitBuilding ( i ) ;
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14278: LD_VAR 0 1
14282: PPUSH
14283: LD_INT 102
14285: PPUSH
14286: LD_INT 7
14288: PPUSH
14289: CALL_OW 171
// end ;
14293: GO 14255
14295: POP
14296: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14297: LD_ADDR_VAR 0 1
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_INT 5
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 3
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: PUSH
14331: LD_INT 5
14333: DIFF
14334: PUSH
14335: FOR_IN
14336: IFFALSE 14352
// SetSide ( i , 2 ) ;
14338: LD_VAR 0 1
14342: PPUSH
14343: LD_INT 2
14345: PPUSH
14346: CALL_OW 235
14350: GO 14335
14352: POP
14353: POP
// repeat wait ( 0 0$1 ) ;
14354: LD_INT 35
14356: PPUSH
14357: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14361: LD_ADDR_VAR 0 3
14365: PUSH
14366: LD_EXP 36
14370: PUSH
14371: LD_EXP 39
14375: ADD
14376: PPUSH
14377: LD_INT 95
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 72
14391: ST_TO_ADDR
// if tmp then
14392: LD_VAR 0 3
14396: IFFALSE 14440
// for i in tmp do
14398: LD_ADDR_VAR 0 1
14402: PUSH
14403: LD_VAR 0 3
14407: PUSH
14408: FOR_IN
14409: IFFALSE 14438
// begin farmerSquad := farmerSquad diff i ;
14411: LD_ADDR_EXP 39
14415: PUSH
14416: LD_EXP 39
14420: PUSH
14421: LD_VAR 0 1
14425: DIFF
14426: ST_TO_ADDR
// RemoveUnit ( i ) ;
14427: LD_VAR 0 1
14431: PPUSH
14432: CALL_OW 64
// end ;
14436: GO 14408
14438: POP
14439: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14440: LD_EXP 39
14444: PUSH
14445: EMPTY
14446: EQUAL
14447: PUSH
14448: LD_EXP 36
14452: PPUSH
14453: CALL_OW 305
14457: NOT
14458: AND
14459: IFFALSE 14354
// if farmerHumanLoseCounter = 0 then
14461: LD_EXP 20
14465: PUSH
14466: LD_INT 0
14468: EQUAL
14469: IFFALSE 14478
// SetAchievement ( ACH_BABY ) ;
14471: LD_STRING ACH_BABY
14473: PPUSH
14474: CALL_OW 543
// wait ( 1 1$00 ) ;
14478: LD_INT 2100
14480: PPUSH
14481: CALL_OW 67
// SendAttack ;
14485: CALL 6075 0 0
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14489: LD_ADDR_VAR 0 1
14493: PUSH
14494: DOUBLE
14495: LD_INT 1
14497: DEC
14498: ST_TO_ADDR
14499: LD_INT 2
14501: PUSH
14502: LD_INT 3
14504: PUSH
14505: LD_INT 4
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: PUSH
14513: LD_OWVAR 67
14517: ARRAY
14518: PUSH
14519: FOR_TO
14520: IFFALSE 14552
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14522: LD_INT 4200
14524: PUSH
14525: LD_INT 3500
14527: PUSH
14528: LD_INT 3150
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: LD_OWVAR 67
14540: ARRAY
14541: PPUSH
14542: CALL_OW 67
// SendAttack ;
14546: CALL 6075 0 0
// end ;
14550: GO 14519
14552: POP
14553: POP
// end ;
14554: PPOPN 3
14556: END
// every 1 1$20 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14557: LD_EXP 7
14561: PUSH
14562: LD_EXP 21
14566: PUSH
14567: LD_INT 0
14569: GREATER
14570: AND
14571: IFFALSE 14581
14573: GO 14575
14575: DISABLE
// begin enable ;
14576: ENABLE
// CargoEvacuation ;
14577: CALL 3623 0 0
// end ;
14581: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14582: LD_EXP 17
14586: PUSH
14587: LD_INT 18900
14589: LESSEQUAL
14590: IFFALSE 14639
14592: GO 14594
14594: DISABLE
// begin DialogueOn ;
14595: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14599: LD_EXP 36
14603: PPUSH
14604: LD_STRING DF-1-distribution-a
14606: PPUSH
14607: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14611: LD_EXP 28
14615: PPUSH
14616: LD_STRING DH-1-distribution-a
14618: PPUSH
14619: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14623: LD_EXP 36
14627: PPUSH
14628: LD_STRING DF-2-distribution-a
14630: PPUSH
14631: CALL_OW 94
// DialogueOff ;
14635: CALL_OW 7
// end ;
14639: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14640: LD_EXP 17
14644: PUSH
14645: LD_INT 0
14647: LESSEQUAL
14648: IFFALSE 14680
14650: GO 14652
14652: DISABLE
// begin DialogueOn ;
14653: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14657: LD_EXP 36
14661: PPUSH
14662: LD_STRING DF-3-distribution-a
14664: PPUSH
14665: CALL_OW 94
// YouLost ( Distribution ) ;
14669: LD_STRING Distribution
14671: PPUSH
14672: CALL_OW 104
// DialogueOff ;
14676: CALL_OW 7
// end ;
14680: END
// every 0 0$1 trigger vehCounter >= 2 do
14681: LD_EXP 22
14685: PUSH
14686: LD_INT 2
14688: GREATEREQUAL
14689: IFFALSE 14701
14691: GO 14693
14693: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14694: LD_STRING VehConstructed
14696: PPUSH
14697: CALL_OW 337
14701: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14702: LD_INT 22
14704: PUSH
14705: LD_INT 2
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 34
14714: PUSH
14715: LD_INT 12
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 69
14730: IFFALSE 14790
14732: GO 14734
14734: DISABLE
// begin DialogueOn ;
14735: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14739: LD_EXP 28
14743: PPUSH
14744: LD_STRING DH-1-truck
14746: PPUSH
14747: CALL_OW 88
// if IsOk ( Markov ) then
14751: LD_EXP 35
14755: PPUSH
14756: CALL_OW 302
14760: IFFALSE 14786
// begin Say ( Markov , DMar-1-truck ) ;
14762: LD_EXP 35
14766: PPUSH
14767: LD_STRING DMar-1-truck
14769: PPUSH
14770: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14774: LD_EXP 28
14778: PPUSH
14779: LD_STRING DH-2-truck
14781: PPUSH
14782: CALL_OW 88
// end ; DialogueOff ;
14786: CALL_OW 7
// end ;
14790: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
// if IsOk ( Givi ) then
14796: LD_EXP 29
14800: PPUSH
14801: CALL_OW 302
14805: IFFALSE 14821
// begin Say ( Givi , DG-1-nocargo ) ;
14807: LD_EXP 29
14811: PPUSH
14812: LD_STRING DG-1-nocargo
14814: PPUSH
14815: CALL_OW 88
// exit ;
14819: GO 14917
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14821: LD_ADDR_VAR 0 2
14825: PUSH
14826: LD_EXP 42
14830: PPUSH
14831: LD_INT 26
14833: PUSH
14834: LD_INT 1
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PPUSH
14841: CALL_OW 72
14845: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_EXP 42
14855: PPUSH
14856: LD_INT 26
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 72
14870: ST_TO_ADDR
// if randomMen then
14871: LD_VAR 0 2
14875: IFFALSE 14895
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14877: LD_VAR 0 2
14881: PUSH
14882: LD_INT 1
14884: ARRAY
14885: PPUSH
14886: LD_STRING DArm-1-nocargo
14888: PPUSH
14889: CALL_OW 88
14893: GO 14917
// if randomWomen then
14895: LD_VAR 0 3
14899: IFFALSE 14917
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14901: LD_VAR 0 3
14905: PUSH
14906: LD_INT 1
14908: ARRAY
14909: PPUSH
14910: LD_STRING DArf-1-nocargo
14912: PPUSH
14913: CALL_OW 88
// end ;
14917: LD_VAR 0 1
14921: RET
// export function IncomingAttack ; begin
14922: LD_INT 0
14924: PPUSH
// if attackWave = 1 then
14925: LD_EXP 19
14929: PUSH
14930: LD_INT 1
14932: EQUAL
14933: IFFALSE 15004
// begin DialogueOn ;
14935: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14939: LD_EXP 37
14943: PPUSH
14944: LD_STRING DO-1-radio-1
14946: PPUSH
14947: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
14951: LD_EXP 28
14955: PPUSH
14956: LD_STRING DH-1-radio-1-
14958: PPUSH
14959: CALL_OW 88
// if IsOk ( Markov ) then
14963: LD_EXP 35
14967: PPUSH
14968: CALL_OW 302
14972: IFFALSE 14998
// begin Say ( Markov , DMar-1-radio-1 ) ;
14974: LD_EXP 35
14978: PPUSH
14979: LD_STRING DMar-1-radio-1
14981: PPUSH
14982: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
14986: LD_EXP 28
14990: PPUSH
14991: LD_STRING DH-2-radio-1
14993: PPUSH
14994: CALL_OW 88
// end ; DialogueOff ;
14998: CALL_OW 7
// end else
15002: GO 15028
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15004: LD_EXP 37
15008: PPUSH
15009: LD_STRING DO-1-radio-u
15011: PPUSH
15012: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15016: LD_EXP 28
15020: PPUSH
15021: LD_STRING DH-1-radio-u
15023: PPUSH
15024: CALL_OW 88
// end ; end ;
15028: LD_VAR 0 1
15032: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15033: LD_EXP 44
15037: PPUSH
15038: LD_INT 95
15040: PUSH
15041: LD_INT 8
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 72
15052: IFFALSE 15155
15054: GO 15056
15056: DISABLE
15057: LD_INT 0
15059: PPUSH
// begin enable ;
15060: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15061: LD_ADDR_VAR 0 1
15065: PUSH
15066: LD_EXP 44
15070: PPUSH
15071: LD_INT 95
15073: PUSH
15074: LD_INT 8
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PPUSH
15081: CALL_OW 72
15085: PUSH
15086: FOR_IN
15087: IFFALSE 15116
// begin usForces := usForces diff i ;
15089: LD_ADDR_EXP 44
15093: PUSH
15094: LD_EXP 44
15098: PUSH
15099: LD_VAR 0 1
15103: DIFF
15104: ST_TO_ADDR
// RemoveUnit ( i ) ;
15105: LD_VAR 0 1
15109: PPUSH
15110: CALL_OW 64
// end ;
15114: GO 15086
15116: POP
15117: POP
// if not americanHasEscaped and attackWave = 1 then
15118: LD_EXP 8
15122: NOT
15123: PUSH
15124: LD_EXP 19
15128: PUSH
15129: LD_INT 1
15131: EQUAL
15132: AND
15133: IFFALSE 15155
// begin americanHasEscaped := true ;
15135: LD_ADDR_EXP 8
15139: PUSH
15140: LD_INT 1
15142: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15143: LD_EXP 28
15147: PPUSH
15148: LD_STRING DH-2-assault-a
15150: PPUSH
15151: CALL_OW 88
// end ; end ;
15155: PPOPN 1
15157: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15158: LD_INT 4
15160: PPUSH
15161: LD_INT 22
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PPUSH
15171: CALL_OW 70
15175: PUSH
15176: LD_EXP 11
15180: NOT
15181: AND
15182: IFFALSE 15199
15184: GO 15186
15186: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15187: LD_EXP 36
15191: PPUSH
15192: LD_STRING DF-1-attack
15194: PPUSH
15195: CALL_OW 94
15199: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15200: LD_INT 5
15202: PPUSH
15203: CALL_OW 255
15207: PUSH
15208: LD_INT 2
15210: EQUAL
15211: IFFALSE 15223
15213: GO 15215
15215: DISABLE
// YouLost ( Attack ) ;
15216: LD_STRING Attack
15218: PPUSH
15219: CALL_OW 104
15223: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15224: LD_INT 22
15226: PUSH
15227: LD_INT 1
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 21
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PPUSH
15248: CALL_OW 69
15252: NOT
15253: PUSH
15254: LD_INT 22
15256: PUSH
15257: LD_INT 4
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PPUSH
15264: CALL_OW 69
15268: NOT
15269: AND
15270: PUSH
15271: LD_EXP 11
15275: NOT
15276: AND
15277: PUSH
15278: LD_EXP 15
15282: PUSH
15283: LD_INT 90
15285: GREATER
15286: AND
15287: PUSH
15288: LD_INT 7
15290: PPUSH
15291: LD_INT 22
15293: PUSH
15294: LD_INT 2
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 21
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PPUSH
15315: CALL_OW 70
15319: AND
15320: PUSH
15321: LD_INT 22
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 50
15333: PUSH
15334: EMPTY
15335: LIST
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: LD_INT 0
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: AND
15357: IFFALSE 16150
15359: GO 15361
15361: DISABLE
15362: LD_INT 0
15364: PPUSH
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
// begin depot := usDepot ;
15369: LD_ADDR_VAR 0 5
15373: PUSH
15374: LD_INT 11
15376: ST_TO_ADDR
// if not depot then
15377: LD_VAR 0 5
15381: NOT
15382: IFFALSE 15422
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15384: LD_ADDR_VAR 0 5
15388: PUSH
15389: LD_INT 22
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 30
15401: PUSH
15402: LD_INT 0
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PPUSH
15413: CALL_OW 69
15417: PUSH
15418: LD_INT 1
15420: ARRAY
15421: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15422: LD_ADDR_VAR 0 1
15426: PUSH
15427: LD_EXP 42
15431: PPUSH
15432: LD_INT 26
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PPUSH
15442: CALL_OW 72
15446: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15447: LD_ADDR_VAR 0 2
15451: PUSH
15452: LD_EXP 42
15456: PPUSH
15457: LD_INT 26
15459: PUSH
15460: LD_INT 2
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 72
15471: ST_TO_ADDR
// if IsOk ( Kaia ) then
15472: LD_EXP 33
15476: PPUSH
15477: CALL_OW 302
15481: IFFALSE 15502
// speaker := [ Kaia , DK ] else
15483: LD_ADDR_VAR 0 3
15487: PUSH
15488: LD_EXP 33
15492: PUSH
15493: LD_STRING DK
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: ST_TO_ADDR
15500: GO 15582
// if randomMen then
15502: LD_VAR 0 1
15506: IFFALSE 15541
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15508: LD_ADDR_VAR 0 3
15512: PUSH
15513: LD_VAR 0 1
15517: PUSH
15518: LD_INT 1
15520: PPUSH
15521: LD_VAR 0 1
15525: PPUSH
15526: CALL_OW 12
15530: ARRAY
15531: PUSH
15532: LD_STRING DArm
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: ST_TO_ADDR
15539: GO 15582
// if randomWomen then
15541: LD_VAR 0 2
15545: IFFALSE 15580
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15547: LD_ADDR_VAR 0 3
15551: PUSH
15552: LD_VAR 0 2
15556: PUSH
15557: LD_INT 1
15559: PPUSH
15560: LD_VAR 0 2
15564: PPUSH
15565: CALL_OW 12
15569: ARRAY
15570: PUSH
15571: LD_STRING DArf
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: ST_TO_ADDR
15578: GO 15582
// exit ;
15580: GO 16150
// if IsInUnit ( speaker [ 1 ] ) then
15582: LD_VAR 0 3
15586: PUSH
15587: LD_INT 1
15589: ARRAY
15590: PPUSH
15591: CALL_OW 310
15595: IFFALSE 15618
// place := IsInUnit ( speaker [ 1 ] ) else
15597: LD_ADDR_VAR 0 4
15601: PUSH
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 1
15609: ARRAY
15610: PPUSH
15611: CALL_OW 310
15615: ST_TO_ADDR
15616: GO 15632
// place := speaker [ 1 ] ;
15618: LD_ADDR_VAR 0 4
15622: PUSH
15623: LD_VAR 0 3
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15632: LD_VAR 0 4
15636: PPUSH
15637: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15641: LD_VAR 0 4
15645: PPUSH
15646: CALL_OW 250
15650: PPUSH
15651: LD_VAR 0 4
15655: PPUSH
15656: CALL_OW 251
15660: PPUSH
15661: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15665: LD_INT 70
15667: PPUSH
15668: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15672: LD_EXP 38
15676: PPUSH
15677: CALL_OW 305
15681: NOT
15682: IFFALSE 15686
// exit ;
15684: GO 16150
// allowConvoys := false ;
15686: LD_ADDR_EXP 12
15690: PUSH
15691: LD_INT 0
15693: ST_TO_ADDR
// InGameOn ;
15694: CALL_OW 8
// wait ( 0 0$1 ) ;
15698: LD_INT 35
15700: PPUSH
15701: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15705: LD_EXP 38
15709: PPUSH
15710: LD_STRING DI-1-land
15712: PPUSH
15713: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15717: LD_VAR 0 3
15721: PUSH
15722: LD_INT 1
15724: ARRAY
15725: PPUSH
15726: CALL_OW 310
15730: IFFALSE 15745
// ComExit ( speaker [ 1 ] ) ;
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: PPUSH
15741: CALL 72703 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15745: LD_VAR 0 3
15749: PUSH
15750: LD_INT 1
15752: ARRAY
15753: PPUSH
15754: LD_EXP 38
15758: PPUSH
15759: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15763: LD_VAR 0 3
15767: PUSH
15768: LD_INT 1
15770: ARRAY
15771: PPUSH
15772: LD_EXP 38
15776: PPUSH
15777: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15781: LD_EXP 38
15785: PPUSH
15786: LD_VAR 0 3
15790: PUSH
15791: LD_INT 1
15793: ARRAY
15794: PPUSH
15795: CALL_OW 119
// wait ( 0 0$1 ) ;
15799: LD_INT 35
15801: PPUSH
15802: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15806: LD_VAR 0 3
15810: PUSH
15811: LD_INT 1
15813: ARRAY
15814: PPUSH
15815: LD_VAR 0 3
15819: PUSH
15820: LD_INT 2
15822: ARRAY
15823: PUSH
15824: LD_STRING -1-land
15826: STR
15827: PPUSH
15828: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15832: LD_EXP 38
15836: PPUSH
15837: LD_STRING DI-2-land
15839: PPUSH
15840: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15844: LD_VAR 0 3
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: LD_VAR 0 3
15857: PUSH
15858: LD_INT 2
15860: ARRAY
15861: PUSH
15862: LD_STRING -2-land
15864: STR
15865: PPUSH
15866: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15870: LD_VAR 0 3
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: LD_VAR 0 3
15883: PUSH
15884: LD_INT 2
15886: ARRAY
15887: PUSH
15888: LD_STRING -3-land
15890: STR
15891: PPUSH
15892: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15896: LD_EXP 28
15900: PPUSH
15901: LD_STRING DH-1-land
15903: PPUSH
15904: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
15908: LD_VAR 0 5
15912: PPUSH
15913: CALL_OW 313
15917: PUSH
15918: LD_INT 6
15920: EQUAL
15921: IFFALSE 15941
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
15923: LD_VAR 0 5
15927: PPUSH
15928: CALL_OW 313
15932: PUSH
15933: LD_INT 1
15935: ARRAY
15936: PPUSH
15937: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15941: LD_EXP 38
15945: PPUSH
15946: LD_INT 2
15948: PPUSH
15949: CALL_OW 235
// CenterOnUnits ( depot ) ;
15953: LD_VAR 0 5
15957: PPUSH
15958: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
15962: LD_EXP 38
15966: PPUSH
15967: LD_VAR 0 5
15971: PPUSH
15972: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 1
15983: ARRAY
15984: PPUSH
15985: LD_VAR 0 5
15989: PPUSH
15990: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15994: LD_INT 35
15996: PPUSH
15997: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16001: LD_EXP 38
16005: PPUSH
16006: CALL_OW 310
16010: PUSH
16011: LD_EXP 38
16015: PPUSH
16016: CALL_OW 302
16020: NOT
16021: OR
16022: PUSH
16023: LD_VAR 0 5
16027: PPUSH
16028: CALL_OW 302
16032: NOT
16033: OR
16034: IFFALSE 15994
// InGameOff ;
16036: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16040: LD_EXP 38
16044: PPUSH
16045: CALL_OW 302
16049: NOT
16050: IFFALSE 16054
// exit ;
16052: GO 16150
// if not IsOk ( depot ) then
16054: LD_VAR 0 5
16058: PPUSH
16059: CALL_OW 302
16063: NOT
16064: IFFALSE 16127
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16066: LD_EXP 38
16070: PPUSH
16071: LD_INT 30
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16081: LD_INT 35
16083: PPUSH
16084: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16088: LD_EXP 38
16092: PPUSH
16093: LD_INT 30
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 307
16103: PUSH
16104: LD_EXP 38
16108: PPUSH
16109: CALL_OW 301
16113: OR
16114: IFFALSE 16081
// RemoveUnit ( Ibrahim ) ;
16116: LD_EXP 38
16120: PPUSH
16121: CALL_OW 64
// exit ;
16125: GO 16150
// end ; ibrahimInDepot := true ;
16127: LD_ADDR_EXP 25
16131: PUSH
16132: LD_INT 1
16134: ST_TO_ADDR
// allowConvoys := true ;
16135: LD_ADDR_EXP 12
16139: PUSH
16140: LD_INT 1
16142: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16143: LD_STRING IbrahimInDepot
16145: PPUSH
16146: CALL_OW 97
// end ;
16150: PPOPN 5
16152: END
// export function IbrahimQuery ; begin
16153: LD_INT 0
16155: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16156: LD_STRING IbrahimQuery
16158: PPUSH
16159: CALL_OW 97
16163: PUSH
16164: LD_INT 1
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16448
16172: POP
// begin allowConvoys := false ;
16173: LD_ADDR_EXP 12
16177: PUSH
16178: LD_INT 0
16180: ST_TO_ADDR
// ibrahimInDepot := false ;
16181: LD_ADDR_EXP 25
16185: PUSH
16186: LD_INT 0
16188: ST_TO_ADDR
// InGameOn ;
16189: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16193: LD_EXP 28
16197: PPUSH
16198: CALL_OW 87
// wait ( 0 0$1 ) ;
16202: LD_INT 35
16204: PPUSH
16205: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16209: LD_EXP 28
16213: PPUSH
16214: LD_STRING DH-1-interrogation
16216: PPUSH
16217: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16221: LD_EXP 38
16225: PPUSH
16226: LD_STRING DI-1-interrogation
16228: PPUSH
16229: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16233: LD_EXP 28
16237: PPUSH
16238: LD_STRING DH-2-interrogation
16240: PPUSH
16241: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16245: LD_EXP 38
16249: PPUSH
16250: LD_STRING DI-2-interrogation
16252: PPUSH
16253: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16257: LD_EXP 28
16261: PPUSH
16262: LD_STRING DH-3-interrogation
16264: PPUSH
16265: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16269: LD_EXP 38
16273: PPUSH
16274: LD_STRING DI-3-interrogation
16276: PPUSH
16277: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16281: LD_EXP 28
16285: PPUSH
16286: LD_STRING DH-4-interrogation
16288: PPUSH
16289: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16293: LD_EXP 38
16297: PPUSH
16298: LD_STRING DI-4-interrogation
16300: PPUSH
16301: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16305: LD_EXP 28
16309: PPUSH
16310: LD_STRING DH-5-interrogation
16312: PPUSH
16313: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16317: LD_EXP 38
16321: PPUSH
16322: LD_STRING DI-5-interrogation
16324: PPUSH
16325: CALL_OW 88
// wait ( 0 0$1 ) ;
16329: LD_INT 35
16331: PPUSH
16332: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16336: LD_STRING IbrahimDecisionQuery
16338: PPUSH
16339: CALL_OW 97
16343: PUSH
16344: LD_INT 1
16346: DOUBLE
16347: EQUAL
16348: IFTRUE 16352
16350: GO 16376
16352: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16353: LD_EXP 38
16357: PPUSH
16358: LD_STRING DI-1-kill
16360: PPUSH
16361: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16365: LD_EXP 38
16369: PPUSH
16370: CALL_OW 66
// end ; 2 :
16374: GO 16442
16376: LD_INT 2
16378: DOUBLE
16379: EQUAL
16380: IFTRUE 16384
16382: GO 16441
16384: POP
// begin SetSide ( Ibrahim , 6 ) ;
16385: LD_EXP 38
16389: PPUSH
16390: LD_INT 6
16392: PPUSH
16393: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16397: LD_EXP 38
16401: PPUSH
16402: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16406: LD_EXP 38
16410: PPUSH
16411: LD_INT 66
16413: PPUSH
16414: LD_INT 2
16416: PPUSH
16417: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16421: LD_EXP 38
16425: PPUSH
16426: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16430: LD_EXP 28
16434: PPUSH
16435: CALL_OW 122
// end ; end ;
16439: GO 16442
16441: POP
// InGameOff ;
16442: CALL_OW 9
// end ; 2 :
16446: GO 16462
16448: LD_INT 2
16450: DOUBLE
16451: EQUAL
16452: IFTRUE 16456
16454: GO 16461
16456: POP
// exit ; end ;
16457: GO 16500
16459: GO 16462
16461: POP
// allowConvoys := true ;
16462: LD_ADDR_EXP 12
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16470: LD_INT 5250
16472: PPUSH
16473: CALL_OW 67
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16477: LD_EXP 38
16481: PPUSH
16482: LD_INT 38
16484: PPUSH
16485: LD_INT 28
16487: PPUSH
16488: CALL_OW 111
// ibrahimIsFree := true ;
16492: LD_ADDR_EXP 26
16496: PUSH
16497: LD_INT 1
16499: ST_TO_ADDR
// end ;
16500: LD_VAR 0 1
16504: RET
// every 0 0$1 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot , x , y ;
16505: LD_EXP 26
16509: PUSH
16510: LD_EXP 38
16514: PPUSH
16515: CALL_OW 302
16519: AND
16520: PUSH
16521: LD_INT 6
16523: PPUSH
16524: LD_EXP 28
16528: PPUSH
16529: CALL_OW 292
16533: AND
16534: PUSH
16535: LD_INT 22
16537: PUSH
16538: LD_INT 4
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: NOT
16550: AND
16551: PUSH
16552: LD_INT 22
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 21
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 69
16580: NOT
16581: AND
16582: IFFALSE 17342
16584: GO 16586
16586: DISABLE
16587: LD_INT 0
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
// begin allowConvoys := false ;
16595: LD_ADDR_EXP 12
16599: PUSH
16600: LD_INT 0
16602: ST_TO_ADDR
// depot := usDepot ;
16603: LD_ADDR_VAR 0 4
16607: PUSH
16608: LD_INT 11
16610: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16611: LD_INT 11
16613: NOT
16614: PUSH
16615: LD_INT 22
16617: PUSH
16618: LD_INT 2
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 50
16627: PUSH
16628: EMPTY
16629: LIST
16630: PUSH
16631: LD_INT 30
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: PPUSH
16646: CALL_OW 69
16650: AND
16651: IFFALSE 16698
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16653: LD_ADDR_VAR 0 4
16657: PUSH
16658: LD_INT 22
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 50
16670: PUSH
16671: EMPTY
16672: LIST
16673: PUSH
16674: LD_INT 30
16676: PUSH
16677: LD_INT 0
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL_OW 69
16693: PUSH
16694: LD_INT 1
16696: ARRAY
16697: ST_TO_ADDR
// InGameOn ;
16698: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16702: LD_EXP 38
16706: PPUSH
16707: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16711: LD_EXP 28
16715: PPUSH
16716: LD_EXP 38
16720: PPUSH
16721: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16725: LD_EXP 38
16729: PPUSH
16730: LD_EXP 28
16734: PPUSH
16735: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16739: LD_EXP 38
16743: PPUSH
16744: LD_STRING DI-1-free
16746: PPUSH
16747: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16751: LD_EXP 28
16755: PPUSH
16756: LD_STRING DH-1-free
16758: PPUSH
16759: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16763: LD_EXP 38
16767: PPUSH
16768: LD_STRING DI-2-free
16770: PPUSH
16771: CALL_OW 88
// changeClass := 0 ;
16775: LD_ADDR_VAR 0 1
16779: PUSH
16780: LD_INT 0
16782: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16783: LD_STRING IbrahimJoinQuery
16785: PPUSH
16786: CALL_OW 97
16790: PUSH
16791: LD_INT 1
16793: DOUBLE
16794: EQUAL
16795: IFTRUE 16799
16797: GO 16810
16799: POP
// begin changeClass := 1 ;
16800: LD_ADDR_VAR 0 1
16804: PUSH
16805: LD_INT 1
16807: ST_TO_ADDR
// end ; 2 :
16808: GO 17050
16810: LD_INT 2
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16970
16818: POP
// begin Say ( Heike , DH-1-decline ) ;
16819: LD_EXP 28
16823: PPUSH
16824: LD_STRING DH-1-decline
16826: PPUSH
16827: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16831: LD_EXP 38
16835: PPUSH
16836: LD_STRING DI-1-decline
16838: PPUSH
16839: CALL_OW 88
// InGameOff ;
16843: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16847: LD_EXP 38
16851: PPUSH
16852: LD_INT 30
16854: PPUSH
16855: LD_INT 1
16857: PPUSH
16858: CALL_OW 111
// p := 0 ;
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: LD_INT 0
16869: ST_TO_ADDR
// repeat p := p + 1 ;
16870: LD_ADDR_VAR 0 3
16874: PUSH
16875: LD_VAR 0 3
16879: PUSH
16880: LD_INT 1
16882: PLUS
16883: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16884: LD_INT 35
16886: PPUSH
16887: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
16891: LD_EXP 38
16895: PPUSH
16896: LD_INT 30
16898: PPUSH
16899: LD_INT 1
16901: PPUSH
16902: CALL_OW 307
16906: PUSH
16907: LD_INT 22
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 101
16919: PUSH
16920: LD_INT 6
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 69
16935: NOT
16936: OR
16937: PUSH
16938: LD_VAR 0 3
16942: PUSH
16943: LD_INT 10
16945: GREATER
16946: OR
16947: IFFALSE 16870
// RemoveUnit ( Ibrahim ) ;
16949: LD_EXP 38
16953: PPUSH
16954: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
16958: LD_INT 1
16960: PPUSH
16961: LD_STRING 03_IbrahimHasEscaped
16963: PPUSH
16964: CALL_OW 39
// end ; 3 :
16968: GO 17050
16970: LD_INT 3
16972: DOUBLE
16973: EQUAL
16974: IFTRUE 16978
16976: GO 17049
16978: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
16979: LD_EXP 28
16983: PPUSH
16984: LD_STRING DH-1-radio-hq
16986: PPUSH
16987: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
16991: LD_EXP 37
16995: PPUSH
16996: LD_STRING DO-1-radio-hq
16998: PPUSH
16999: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17003: LD_EXP 28
17007: PPUSH
17008: LD_STRING DH-2-radio-hq
17010: PPUSH
17011: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17015: LD_EXP 37
17019: PPUSH
17020: LD_STRING DO-2-radio-hq
17022: PPUSH
17023: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17027: LD_EXP 28
17031: PPUSH
17032: LD_STRING DH-3-radio-hq
17034: PPUSH
17035: CALL_OW 88
// changeClass := 1 ;
17039: LD_ADDR_VAR 0 1
17043: PUSH
17044: LD_INT 1
17046: ST_TO_ADDR
// end ; end ;
17047: GO 17050
17049: POP
// if changeClass then
17050: LD_VAR 0 1
17054: IFFALSE 17342
// begin Say ( Heike , DH-1-agree ) ;
17056: LD_EXP 28
17060: PPUSH
17061: LD_STRING DH-1-agree
17063: PPUSH
17064: CALL_OW 88
// if IsOk ( Givi ) then
17068: LD_EXP 29
17072: PPUSH
17073: CALL_OW 302
17077: IFFALSE 17115
// begin Say ( Givi , DG-1-agree ) ;
17079: LD_EXP 29
17083: PPUSH
17084: LD_STRING DG-1-agree
17086: PPUSH
17087: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17091: LD_EXP 28
17095: PPUSH
17096: LD_STRING DH-2-agree
17098: PPUSH
17099: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17103: LD_EXP 29
17107: PPUSH
17108: LD_STRING DG-2-agree
17110: PPUSH
17111: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17115: LD_VAR 0 4
17119: PPUSH
17120: CALL_OW 313
17124: PUSH
17125: LD_INT 6
17127: EQUAL
17128: IFFALSE 17148
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17130: LD_VAR 0 4
17134: PPUSH
17135: CALL_OW 313
17139: PUSH
17140: LD_INT 1
17142: ARRAY
17143: PPUSH
17144: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17148: LD_EXP 38
17152: PPUSH
17153: LD_INT 2
17155: PPUSH
17156: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17160: LD_ADDR_VAR 0 5
17164: PUSH
17165: LD_EXP 38
17169: PPUSH
17170: CALL_OW 250
17174: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17175: LD_ADDR_VAR 0 6
17179: PUSH
17180: LD_EXP 38
17184: PPUSH
17185: CALL_OW 251
17189: ST_TO_ADDR
// if depot then
17190: LD_VAR 0 4
17194: IFFALSE 17243
// begin ComEnterUnit ( Ibrahim , depot ) ;
17196: LD_EXP 38
17200: PPUSH
17201: LD_VAR 0 4
17205: PPUSH
17206: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17210: LD_INT 35
17212: PPUSH
17213: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17217: LD_EXP 38
17221: PPUSH
17222: CALL_OW 310
17226: IFFALSE 17210
// b := IsInUnit ( Ibrahim ) ;
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: LD_EXP 38
17237: PPUSH
17238: CALL_OW 310
17242: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17243: LD_EXP 38
17247: PPUSH
17248: CALL_OW 64
// uc_side := 2 ;
17252: LD_ADDR_OWVAR 20
17256: PUSH
17257: LD_INT 2
17259: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17260: LD_ADDR_EXP 38
17264: PUSH
17265: LD_STRING Ibrahim
17267: PPUSH
17268: LD_INT 0
17270: PPUSH
17271: LD_STRING 
17273: PPUSH
17274: CALL 36326 0 3
17278: ST_TO_ADDR
// if depot then
17279: LD_VAR 0 4
17283: IFFALSE 17301
// PlaceHumanInUnit ( Ibrahim , b ) else
17285: LD_EXP 38
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: CALL_OW 52
17299: GO 17323
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17301: LD_EXP 38
17305: PPUSH
17306: LD_VAR 0 5
17310: PPUSH
17311: LD_VAR 0 6
17315: PPUSH
17316: LD_INT 0
17318: PPUSH
17319: CALL_OW 48
// InGameOff ;
17323: CALL_OW 9
// allowConvoys := true ;
17327: LD_ADDR_EXP 12
17331: PUSH
17332: LD_INT 1
17334: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17335: LD_STRING ACH_IBRAHIM
17337: PPUSH
17338: CALL_OW 543
// end ; end ;
17342: PPOPN 6
17344: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17345: LD_EXP 33
17349: PPUSH
17350: CALL_OW 256
17354: PUSH
17355: LD_INT 3
17357: LESS
17358: IFFALSE 17425
17360: GO 17362
17362: DISABLE
// begin DialogueOn ;
17363: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17367: LD_EXP 33
17371: PPUSH
17372: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17376: LD_EXP 33
17380: PPUSH
17381: LD_STRING DK-keydeath-1
17383: PPUSH
17384: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17388: LD_EXP 28
17392: PPUSH
17393: LD_STRING DH-keydeath-2
17395: PPUSH
17396: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17400: LD_EXP 28
17404: PPUSH
17405: LD_STRING DH-keydeath-3
17407: PPUSH
17408: CALL_OW 88
// DialogueOff ;
17412: CALL_OW 7
// KillUnit ( Kaia ) ;
17416: LD_EXP 33
17420: PPUSH
17421: CALL_OW 66
// end ;
17425: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 do
17426: LD_EXP 11
17430: PUSH
17431: LD_EXP 21
17435: PUSH
17436: LD_INT 1
17438: LESS
17439: AND
17440: PUSH
17441: LD_INT 22
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 25
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: PUSH
17470: LD_INT 0
17472: EQUAL
17473: AND
17474: IFFALSE 17865
17476: GO 17478
17478: DISABLE
// begin DialogueOn ;
17479: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17483: LD_EXP 28
17487: PPUSH
17488: LD_STRING DH-1-final
17490: PPUSH
17491: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17495: LD_OWVAR 1
17499: PUSH
17500: LD_INT 126000
17502: PUSH
17503: LD_INT 115500
17505: PUSH
17506: LD_INT 105000
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: LD_OWVAR 67
17518: ARRAY
17519: LESSEQUAL
17520: IFFALSE 17534
// AddMedal ( med1 , 1 ) else
17522: LD_STRING med1
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL_OW 101
17532: GO 17545
// AddMedal ( med1 , - 1 ) ;
17534: LD_STRING med1
17536: PPUSH
17537: LD_INT 1
17539: NEG
17540: PPUSH
17541: CALL_OW 101
// if vehCounter >= 2 then
17545: LD_EXP 22
17549: PUSH
17550: LD_INT 2
17552: GREATEREQUAL
17553: IFFALSE 17567
// AddMedal ( med2 , 1 ) else
17555: LD_STRING med2
17557: PPUSH
17558: LD_INT 1
17560: PPUSH
17561: CALL_OW 101
17565: GO 17578
// AddMedal ( med2 , - 1 ) ;
17567: LD_STRING med2
17569: PPUSH
17570: LD_INT 1
17572: NEG
17573: PPUSH
17574: CALL_OW 101
// if deadCounter = 0 then
17578: LD_EXP 9
17582: PUSH
17583: LD_INT 0
17585: EQUAL
17586: IFFALSE 17600
// AddMedal ( med3 , 1 ) else
17588: LD_STRING med3
17590: PPUSH
17591: LD_INT 1
17593: PPUSH
17594: CALL_OW 101
17598: GO 17611
// AddMedal ( med3 , - 1 ) ;
17600: LD_STRING med3
17602: PPUSH
17603: LD_INT 1
17605: NEG
17606: PPUSH
17607: CALL_OW 101
// GiveMedals ( MAIN ) ;
17611: LD_STRING MAIN
17613: PPUSH
17614: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17618: LD_INT 22
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 23
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 21
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: PPUSH
17653: CALL_OW 69
17657: PPUSH
17658: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17662: LD_EXP 28
17666: PPUSH
17667: LD_STRING 03_Heike
17669: PPUSH
17670: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17674: LD_EXP 32
17678: PPUSH
17679: LD_STRING 03_Aviradze
17681: PPUSH
17682: CALL_OW 38
// if Givi then
17686: LD_EXP 29
17690: IFFALSE 17704
// SaveCharacters ( Givi , 03_Givi ) ;
17692: LD_EXP 29
17696: PPUSH
17697: LD_STRING 03_Givi
17699: PPUSH
17700: CALL_OW 38
// if Mike then
17704: LD_EXP 30
17708: IFFALSE 17722
// SaveCharacters ( Mike , 03_Mike ) ;
17710: LD_EXP 30
17714: PPUSH
17715: LD_STRING 03_Mike
17717: PPUSH
17718: CALL_OW 38
// if Kamil then
17722: LD_EXP 31
17726: IFFALSE 17740
// SaveCharacters ( Kamil , 03_Kamil ) ;
17728: LD_EXP 31
17732: PPUSH
17733: LD_STRING 03_Kamil
17735: PPUSH
17736: CALL_OW 38
// if Kaia then
17740: LD_EXP 33
17744: IFFALSE 17758
// SaveCharacters ( Kaia , 03_Kaia ) ;
17746: LD_EXP 33
17750: PPUSH
17751: LD_STRING 03_Kaia
17753: PPUSH
17754: CALL_OW 38
// if Sophia then
17758: LD_EXP 34
17762: IFFALSE 17776
// SaveCharacters ( Sophia , 03_Sophia ) ;
17764: LD_EXP 34
17768: PPUSH
17769: LD_STRING 03_Sophia
17771: PPUSH
17772: CALL_OW 38
// if Markov then
17776: LD_EXP 35
17780: IFFALSE 17794
// SaveCharacters ( Markov , 03_Markov ) ;
17782: LD_EXP 35
17786: PPUSH
17787: LD_STRING 03_Markov
17789: PPUSH
17790: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17794: LD_EXP 38
17798: PUSH
17799: LD_EXP 38
17803: PPUSH
17804: CALL_OW 255
17808: PUSH
17809: LD_INT 2
17811: EQUAL
17812: AND
17813: IFFALSE 17827
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17815: LD_EXP 38
17819: PPUSH
17820: LD_STRING 03_Ibrahim
17822: PPUSH
17823: CALL_OW 38
// if heikeSecondSquad then
17827: LD_EXP 42
17831: IFFALSE 17845
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17833: LD_EXP 42
17837: PPUSH
17838: LD_STRING 03_others
17840: PPUSH
17841: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17845: LD_EXP 9
17849: PPUSH
17850: LD_STRING 03_DeadCounter
17852: PPUSH
17853: CALL_OW 39
// YouWin ;
17857: CALL_OW 103
// DialogueOff ;
17861: CALL_OW 7
// end ; end_of_file
17865: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17866: LD_VAR 0 1
17870: PUSH
17871: LD_EXP 28
17875: EQUAL
17876: IFFALSE 17885
// YouLost ( Heike ) ;
17878: LD_STRING Heike
17880: PPUSH
17881: CALL_OW 104
// if un = Aviradze then
17885: LD_VAR 0 1
17889: PUSH
17890: LD_EXP 32
17894: EQUAL
17895: IFFALSE 17904
// YouLost ( Aviradze ) ;
17897: LD_STRING Aviradze
17899: PPUSH
17900: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17904: LD_VAR 0 1
17908: PUSH
17909: LD_INT 11
17911: EQUAL
17912: PUSH
17913: LD_EXP 11
17917: NOT
17918: AND
17919: IFFALSE 17928
// YouLost ( Depot ) ;
17921: LD_STRING Depot
17923: PPUSH
17924: CALL_OW 104
// if un = arDepot then
17928: LD_VAR 0 1
17932: PUSH
17933: LD_INT 5
17935: EQUAL
17936: IFFALSE 17945
// YouLost ( FarmerDepot ) ;
17938: LD_STRING FarmerDepot
17940: PPUSH
17941: CALL_OW 104
// if un = Farmer then
17945: LD_VAR 0 1
17949: PUSH
17950: LD_EXP 36
17954: EQUAL
17955: IFFALSE 17964
// YouLost ( Farmer ) ;
17957: LD_STRING Farmer
17959: PPUSH
17960: CALL_OW 104
// if un in usForces then
17964: LD_VAR 0 1
17968: PUSH
17969: LD_EXP 44
17973: IN
17974: IFFALSE 17992
// usForces := usForces diff un ;
17976: LD_ADDR_EXP 44
17980: PUSH
17981: LD_EXP 44
17985: PUSH
17986: LD_VAR 0 1
17990: DIFF
17991: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17992: LD_VAR 0 1
17996: PUSH
17997: LD_INT 22
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 23
18009: PUSH
18010: LD_INT 2
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 21
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: IN
18037: IFFALSE 18053
// deadCounter := deadCounter + 1 ;
18039: LD_ADDR_EXP 9
18043: PUSH
18044: LD_EXP 9
18048: PUSH
18049: LD_INT 1
18051: PLUS
18052: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18053: LD_VAR 0 1
18057: PUSH
18058: LD_INT 22
18060: PUSH
18061: LD_INT 4
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 34
18070: PUSH
18071: LD_INT 12
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PPUSH
18082: CALL_OW 69
18086: IN
18087: PUSH
18088: LD_EXP 18
18092: NOT
18093: AND
18094: IFFALSE 18104
// firstConvoyDestroyed := true ;
18096: LD_ADDR_EXP 18
18100: PUSH
18101: LD_INT 1
18103: ST_TO_ADDR
// if un in usAttackers then
18104: LD_VAR 0 1
18108: PUSH
18109: LD_EXP 47
18113: IN
18114: IFFALSE 18132
// usAttackers := usAttackers diff un ;
18116: LD_ADDR_EXP 47
18120: PUSH
18121: LD_EXP 47
18125: PUSH
18126: LD_VAR 0 1
18130: DIFF
18131: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18132: LD_VAR 0 1
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_INT 5
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 21
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: IN
18166: IFFALSE 18182
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18168: LD_ADDR_EXP 20
18172: PUSH
18173: LD_EXP 20
18177: PUSH
18178: LD_INT 1
18180: PLUS
18181: ST_TO_ADDR
// end ;
18182: PPOPN 1
18184: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18185: LD_VAR 0 2
18189: PUSH
18190: LD_EXP 38
18194: EQUAL
18195: PUSH
18196: LD_EXP 25
18200: AND
18201: IFFALSE 18347
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18203: LD_INT 22
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 30
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 50
18225: PUSH
18226: EMPTY
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: LIST
18233: PPUSH
18234: CALL_OW 69
18238: IFFALSE 18280
// begin InGameOn ;
18240: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18244: LD_EXP 38
18248: PPUSH
18249: LD_INT 11
18251: PPUSH
18252: CALL_OW 120
// repeat wait ( 3 ) ;
18256: LD_INT 3
18258: PPUSH
18259: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18263: LD_EXP 38
18267: PPUSH
18268: CALL_OW 310
18272: IFFALSE 18256
// InGameOff ;
18274: CALL_OW 9
// end else
18278: GO 18347
// begin ibrahimInDepot := false ;
18280: LD_ADDR_EXP 25
18284: PUSH
18285: LD_INT 0
18287: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18288: LD_EXP 38
18292: PPUSH
18293: LD_INT 30
18295: PPUSH
18296: LD_INT 1
18298: PPUSH
18299: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18303: LD_INT 35
18305: PPUSH
18306: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18310: LD_EXP 38
18314: PPUSH
18315: LD_INT 30
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 307
18325: PUSH
18326: LD_EXP 38
18330: PPUSH
18331: CALL_OW 301
18335: OR
18336: IFFALSE 18303
// RemoveUnit ( Ibrahim ) ;
18338: LD_EXP 38
18342: PPUSH
18343: CALL_OW 64
// end ; end ; end ;
18347: PPOPN 2
18349: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18350: LD_VAR 0 2
18354: PUSH
18355: LD_EXP 28
18359: EQUAL
18360: PUSH
18361: LD_VAR 0 1
18365: PUSH
18366: LD_INT 11
18368: EQUAL
18369: AND
18370: PUSH
18371: LD_EXP 25
18375: AND
18376: IFFALSE 18382
// IbrahimQuery ;
18378: CALL 16153 0 0
// end ;
18382: PPOPN 2
18384: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18385: LD_VAR 0 1
18389: PPUSH
18390: CALL_OW 141
// if oldId in usAttackers then
18394: LD_VAR 0 2
18398: PUSH
18399: LD_EXP 47
18403: IN
18404: IFFALSE 18422
// usAttackers := usAttackers diff oldId ;
18406: LD_ADDR_EXP 47
18410: PUSH
18411: LD_EXP 47
18415: PUSH
18416: LD_VAR 0 2
18420: DIFF
18421: ST_TO_ADDR
// if newId in usAttackers then
18422: LD_VAR 0 1
18426: PUSH
18427: LD_EXP 47
18431: IN
18432: IFFALSE 18450
// usAttackers := usAttackers diff newId ;
18434: LD_ADDR_EXP 47
18438: PUSH
18439: LD_EXP 47
18443: PUSH
18444: LD_VAR 0 1
18448: DIFF
18449: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18450: LD_VAR 0 3
18454: PUSH
18455: LD_INT 4
18457: EQUAL
18458: PUSH
18459: LD_EXP 18
18463: NOT
18464: AND
18465: IFFALSE 18475
// firstConvoyDestroyed := true ;
18467: LD_ADDR_EXP 18
18471: PUSH
18472: LD_INT 1
18474: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18475: LD_VAR 0 1
18479: PPUSH
18480: CALL_OW 264
18484: PUSH
18485: LD_INT 12
18487: EQUAL
18488: IFFALSE 18526
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18490: LD_ADDR_EXP 13
18494: PUSH
18495: LD_EXP 13
18499: PUSH
18500: LD_INT 1
18502: PLUS
18503: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18504: LD_VAR 0 1
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 289
18516: PUSH
18517: LD_INT 0
18519: EQUAL
18520: IFFALSE 18526
// EmptyCargoDialog ;
18522: CALL 14791 0 0
// end ; end ;
18526: PPOPN 4
18528: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18529: LD_VAR 0 1
18533: PUSH
18534: LD_INT 2
18536: EQUAL
18537: PUSH
18538: LD_VAR 0 2
18542: PUSH
18543: LD_INT 5
18545: EQUAL
18546: AND
18547: IFFALSE 18556
// YouLost ( Attack ) ;
18549: LD_STRING Attack
18551: PPUSH
18552: CALL_OW 104
// end ;
18556: PPOPN 2
18558: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 255
18568: PUSH
18569: LD_INT 1
18571: EQUAL
18572: PUSH
18573: LD_EXP 6
18577: NOT
18578: AND
18579: IFFALSE 18713
// begin if GetBType ( b ) = b_lab then
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 266
18590: PUSH
18591: LD_INT 6
18593: EQUAL
18594: IFFALSE 18634
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18596: LD_EXP 44
18600: PPUSH
18601: LD_INT 25
18603: PUSH
18604: LD_INT 4
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 72
18615: PPUSH
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 120
// AmLabResearch ( b ) ;
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL 5127 0 1
// end ; if GetBType ( b ) = b_armoury then
18634: LD_VAR 0 1
18638: PPUSH
18639: CALL_OW 266
18643: PUSH
18644: LD_INT 4
18646: EQUAL
18647: IFFALSE 18695
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18649: LD_EXP 44
18653: PPUSH
18654: LD_INT 25
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 3
18666: PUSH
18667: LD_INT 54
18669: PUSH
18670: EMPTY
18671: LIST
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PPUSH
18681: CALL_OW 72
18685: PPUSH
18686: LD_VAR 0 1
18690: PPUSH
18691: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18695: LD_ADDR_EXP 46
18699: PUSH
18700: LD_EXP 46
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: CALL_OW 3
18712: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18713: LD_VAR 0 1
18717: PPUSH
18718: CALL_OW 255
18722: PUSH
18723: LD_INT 5
18725: EQUAL
18726: IFFALSE 18740
// SetBLevel ( b , 5 ) ;
18728: LD_VAR 0 1
18732: PPUSH
18733: LD_INT 5
18735: PPUSH
18736: CALL_OW 241
// end ;
18740: PPOPN 1
18742: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18743: LD_VAR 0 1
18747: PPUSH
18748: CALL_OW 255
18752: PUSH
18753: LD_INT 2
18755: EQUAL
18756: IFFALSE 18772
// vehCounter := vehCounter + 1 ;
18758: LD_ADDR_EXP 22
18762: PUSH
18763: LD_EXP 22
18767: PUSH
18768: LD_INT 1
18770: PLUS
18771: ST_TO_ADDR
// end ;
18772: PPOPN 2
18774: END
// on SailEvent ( event ) do begin if event = eventAttack then
18775: LD_VAR 0 1
18779: PUSH
18780: LD_EXP 24
18784: EQUAL
18785: IFFALSE 18791
// AmericanAttack ;
18787: CALL 6575 0 0
// end ; end_of_file
18791: PPOPN 1
18793: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18794: LD_OWVAR 1
18798: PUSH
18799: LD_INT 10500
18801: PUSH
18802: LD_INT 9800
18804: PUSH
18805: LD_INT 9450
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: PUSH
18813: LD_OWVAR 67
18817: ARRAY
18818: LESSEQUAL
18819: IFFALSE 18846
18821: GO 18823
18823: DISABLE
// begin enable ;
18824: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18825: LD_INT 1
18827: PPUSH
18828: LD_INT 5
18830: PPUSH
18831: CALL_OW 12
18835: PPUSH
18836: LD_INT 9
18838: PPUSH
18839: LD_INT 1
18841: PPUSH
18842: CALL_OW 55
// end ;
18846: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
18847: LD_EXP 6
18851: PUSH
18852: LD_OWVAR 1
18856: PUSH
18857: LD_INT 56700
18859: PUSH
18860: LD_INT 55650
18862: PUSH
18863: LD_INT 54600
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: LD_OWVAR 67
18875: ARRAY
18876: LESSEQUAL
18877: AND
18878: IFFALSE 18905
18880: GO 18882
18882: DISABLE
// begin enable ;
18883: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
18884: LD_INT 3
18886: PPUSH
18887: LD_INT 5
18889: PPUSH
18890: CALL_OW 12
18894: PPUSH
18895: LD_INT 9
18897: PPUSH
18898: LD_INT 1
18900: PPUSH
18901: CALL_OW 55
// end ; end_of_file
18905: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18906: LD_EXP 11
18910: NOT
18911: PUSH
18912: LD_EXP 16
18916: AND
18917: PUSH
18918: LD_EXP 4
18922: AND
18923: PUSH
18924: LD_EXP 15
18928: PUSH
18929: LD_EXP 16
18933: LESSEQUAL
18934: AND
18935: IFFALSE 19025
18937: GO 18939
18939: DISABLE
// begin enable ;
18940: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
18941: LD_ADDR_OWVAR 47
18945: PUSH
18946: LD_STRING #X103-1
18948: PUSH
18949: LD_EXP 16
18953: PUSH
18954: LD_EXP 15
18958: MINUS
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18964: LD_ADDR_EXP 15
18968: PUSH
18969: LD_INT 5
18971: PPUSH
18972: CALL_OW 274
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 275
18984: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18985: LD_INT 10
18987: PPUSH
18988: LD_INT 1
18990: PPUSH
18991: CALL_OW 287
18995: PUSH
18996: LD_INT 0
18998: EQUAL
18999: IFFALSE 19017
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19001: LD_ADDR_EXP 17
19005: PUSH
19006: LD_EXP 17
19010: PUSH
19011: LD_INT 35
19013: MINUS
19014: ST_TO_ADDR
19015: GO 19025
// farmerCratesCounter := 30 30$00 ;
19017: LD_ADDR_EXP 17
19021: PUSH
19022: LD_INT 63000
19024: ST_TO_ADDR
// end ; end_of_file
19025: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19026: LD_INT 0
19028: PPUSH
// ar_miner := 81 ;
19029: LD_ADDR_EXP 55
19033: PUSH
19034: LD_INT 81
19036: ST_TO_ADDR
// ar_crane := 88 ;
19037: LD_ADDR_EXP 54
19041: PUSH
19042: LD_INT 88
19044: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19045: LD_ADDR_EXP 49
19049: PUSH
19050: LD_INT 89
19052: ST_TO_ADDR
// us_hack := 99 ;
19053: LD_ADDR_EXP 50
19057: PUSH
19058: LD_INT 99
19060: ST_TO_ADDR
// us_artillery := 97 ;
19061: LD_ADDR_EXP 51
19065: PUSH
19066: LD_INT 97
19068: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19069: LD_ADDR_EXP 52
19073: PUSH
19074: LD_INT 91
19076: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19077: LD_ADDR_EXP 53
19081: PUSH
19082: LD_INT 92
19084: ST_TO_ADDR
// ru_radar := 98 ;
19085: LD_ADDR_EXP 48
19089: PUSH
19090: LD_INT 98
19092: ST_TO_ADDR
// tech_Artillery := 80 ;
19093: LD_ADDR_EXP 56
19097: PUSH
19098: LD_INT 80
19100: ST_TO_ADDR
// tech_RadMat := 81 ;
19101: LD_ADDR_EXP 57
19105: PUSH
19106: LD_INT 81
19108: ST_TO_ADDR
// tech_BasicTools := 82 ;
19109: LD_ADDR_EXP 58
19113: PUSH
19114: LD_INT 82
19116: ST_TO_ADDR
// tech_Cargo := 83 ;
19117: LD_ADDR_EXP 59
19121: PUSH
19122: LD_INT 83
19124: ST_TO_ADDR
// tech_Track := 84 ;
19125: LD_ADDR_EXP 60
19129: PUSH
19130: LD_INT 84
19132: ST_TO_ADDR
// tech_Crane := 85 ;
19133: LD_ADDR_EXP 61
19137: PUSH
19138: LD_INT 85
19140: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19141: LD_ADDR_EXP 62
19145: PUSH
19146: LD_INT 86
19148: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19149: LD_ADDR_EXP 63
19153: PUSH
19154: LD_INT 87
19156: ST_TO_ADDR
// end ;
19157: LD_VAR 0 1
19161: RET
// every 1 do
19162: GO 19164
19164: DISABLE
// InitGlobalVariables ; end_of_file
19165: CALL 19026 0 0
19169: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19170: LD_VAR 0 2
19174: PUSH
19175: LD_INT 100
19177: EQUAL
19178: IFFALSE 20127
// begin if not StreamModeActive then
19180: LD_EXP 64
19184: NOT
19185: IFFALSE 19195
// StreamModeActive := true ;
19187: LD_ADDR_EXP 64
19191: PUSH
19192: LD_INT 1
19194: ST_TO_ADDR
// if p3 = 0 then
19195: LD_VAR 0 3
19199: PUSH
19200: LD_INT 0
19202: EQUAL
19203: IFFALSE 19209
// InitStreamMode ;
19205: CALL 20285 0 0
// if p3 = 1 then
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 1
19216: EQUAL
19217: IFFALSE 19227
// sRocket := true ;
19219: LD_ADDR_EXP 69
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// if p3 = 2 then
19227: LD_VAR 0 3
19231: PUSH
19232: LD_INT 2
19234: EQUAL
19235: IFFALSE 19245
// sSpeed := true ;
19237: LD_ADDR_EXP 68
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// if p3 = 3 then
19245: LD_VAR 0 3
19249: PUSH
19250: LD_INT 3
19252: EQUAL
19253: IFFALSE 19263
// sEngine := true ;
19255: LD_ADDR_EXP 70
19259: PUSH
19260: LD_INT 1
19262: ST_TO_ADDR
// if p3 = 4 then
19263: LD_VAR 0 3
19267: PUSH
19268: LD_INT 4
19270: EQUAL
19271: IFFALSE 19281
// sSpec := true ;
19273: LD_ADDR_EXP 67
19277: PUSH
19278: LD_INT 1
19280: ST_TO_ADDR
// if p3 = 5 then
19281: LD_VAR 0 3
19285: PUSH
19286: LD_INT 5
19288: EQUAL
19289: IFFALSE 19299
// sLevel := true ;
19291: LD_ADDR_EXP 71
19295: PUSH
19296: LD_INT 1
19298: ST_TO_ADDR
// if p3 = 6 then
19299: LD_VAR 0 3
19303: PUSH
19304: LD_INT 6
19306: EQUAL
19307: IFFALSE 19317
// sArmoury := true ;
19309: LD_ADDR_EXP 72
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// if p3 = 7 then
19317: LD_VAR 0 3
19321: PUSH
19322: LD_INT 7
19324: EQUAL
19325: IFFALSE 19335
// sRadar := true ;
19327: LD_ADDR_EXP 73
19331: PUSH
19332: LD_INT 1
19334: ST_TO_ADDR
// if p3 = 8 then
19335: LD_VAR 0 3
19339: PUSH
19340: LD_INT 8
19342: EQUAL
19343: IFFALSE 19353
// sBunker := true ;
19345: LD_ADDR_EXP 74
19349: PUSH
19350: LD_INT 1
19352: ST_TO_ADDR
// if p3 = 9 then
19353: LD_VAR 0 3
19357: PUSH
19358: LD_INT 9
19360: EQUAL
19361: IFFALSE 19371
// sHack := true ;
19363: LD_ADDR_EXP 75
19367: PUSH
19368: LD_INT 1
19370: ST_TO_ADDR
// if p3 = 10 then
19371: LD_VAR 0 3
19375: PUSH
19376: LD_INT 10
19378: EQUAL
19379: IFFALSE 19389
// sFire := true ;
19381: LD_ADDR_EXP 76
19385: PUSH
19386: LD_INT 1
19388: ST_TO_ADDR
// if p3 = 11 then
19389: LD_VAR 0 3
19393: PUSH
19394: LD_INT 11
19396: EQUAL
19397: IFFALSE 19407
// sRefresh := true ;
19399: LD_ADDR_EXP 77
19403: PUSH
19404: LD_INT 1
19406: ST_TO_ADDR
// if p3 = 12 then
19407: LD_VAR 0 3
19411: PUSH
19412: LD_INT 12
19414: EQUAL
19415: IFFALSE 19425
// sExp := true ;
19417: LD_ADDR_EXP 78
19421: PUSH
19422: LD_INT 1
19424: ST_TO_ADDR
// if p3 = 13 then
19425: LD_VAR 0 3
19429: PUSH
19430: LD_INT 13
19432: EQUAL
19433: IFFALSE 19443
// sDepot := true ;
19435: LD_ADDR_EXP 79
19439: PUSH
19440: LD_INT 1
19442: ST_TO_ADDR
// if p3 = 14 then
19443: LD_VAR 0 3
19447: PUSH
19448: LD_INT 14
19450: EQUAL
19451: IFFALSE 19461
// sFlag := true ;
19453: LD_ADDR_EXP 80
19457: PUSH
19458: LD_INT 1
19460: ST_TO_ADDR
// if p3 = 15 then
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 15
19468: EQUAL
19469: IFFALSE 19479
// sKamikadze := true ;
19471: LD_ADDR_EXP 88
19475: PUSH
19476: LD_INT 1
19478: ST_TO_ADDR
// if p3 = 16 then
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 16
19486: EQUAL
19487: IFFALSE 19497
// sTroll := true ;
19489: LD_ADDR_EXP 89
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
// if p3 = 17 then
19497: LD_VAR 0 3
19501: PUSH
19502: LD_INT 17
19504: EQUAL
19505: IFFALSE 19515
// sSlow := true ;
19507: LD_ADDR_EXP 90
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// if p3 = 18 then
19515: LD_VAR 0 3
19519: PUSH
19520: LD_INT 18
19522: EQUAL
19523: IFFALSE 19533
// sLack := true ;
19525: LD_ADDR_EXP 91
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// if p3 = 19 then
19533: LD_VAR 0 3
19537: PUSH
19538: LD_INT 19
19540: EQUAL
19541: IFFALSE 19551
// sTank := true ;
19543: LD_ADDR_EXP 93
19547: PUSH
19548: LD_INT 1
19550: ST_TO_ADDR
// if p3 = 20 then
19551: LD_VAR 0 3
19555: PUSH
19556: LD_INT 20
19558: EQUAL
19559: IFFALSE 19569
// sRemote := true ;
19561: LD_ADDR_EXP 94
19565: PUSH
19566: LD_INT 1
19568: ST_TO_ADDR
// if p3 = 21 then
19569: LD_VAR 0 3
19573: PUSH
19574: LD_INT 21
19576: EQUAL
19577: IFFALSE 19587
// sPowell := true ;
19579: LD_ADDR_EXP 95
19583: PUSH
19584: LD_INT 1
19586: ST_TO_ADDR
// if p3 = 22 then
19587: LD_VAR 0 3
19591: PUSH
19592: LD_INT 22
19594: EQUAL
19595: IFFALSE 19605
// sTeleport := true ;
19597: LD_ADDR_EXP 98
19601: PUSH
19602: LD_INT 1
19604: ST_TO_ADDR
// if p3 = 23 then
19605: LD_VAR 0 3
19609: PUSH
19610: LD_INT 23
19612: EQUAL
19613: IFFALSE 19623
// sOilTower := true ;
19615: LD_ADDR_EXP 100
19619: PUSH
19620: LD_INT 1
19622: ST_TO_ADDR
// if p3 = 24 then
19623: LD_VAR 0 3
19627: PUSH
19628: LD_INT 24
19630: EQUAL
19631: IFFALSE 19641
// sShovel := true ;
19633: LD_ADDR_EXP 101
19637: PUSH
19638: LD_INT 1
19640: ST_TO_ADDR
// if p3 = 25 then
19641: LD_VAR 0 3
19645: PUSH
19646: LD_INT 25
19648: EQUAL
19649: IFFALSE 19659
// sSheik := true ;
19651: LD_ADDR_EXP 102
19655: PUSH
19656: LD_INT 1
19658: ST_TO_ADDR
// if p3 = 26 then
19659: LD_VAR 0 3
19663: PUSH
19664: LD_INT 26
19666: EQUAL
19667: IFFALSE 19677
// sEarthquake := true ;
19669: LD_ADDR_EXP 104
19673: PUSH
19674: LD_INT 1
19676: ST_TO_ADDR
// if p3 = 27 then
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 27
19684: EQUAL
19685: IFFALSE 19695
// sAI := true ;
19687: LD_ADDR_EXP 105
19691: PUSH
19692: LD_INT 1
19694: ST_TO_ADDR
// if p3 = 28 then
19695: LD_VAR 0 3
19699: PUSH
19700: LD_INT 28
19702: EQUAL
19703: IFFALSE 19713
// sCargo := true ;
19705: LD_ADDR_EXP 108
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// if p3 = 29 then
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 29
19720: EQUAL
19721: IFFALSE 19731
// sDLaser := true ;
19723: LD_ADDR_EXP 109
19727: PUSH
19728: LD_INT 1
19730: ST_TO_ADDR
// if p3 = 30 then
19731: LD_VAR 0 3
19735: PUSH
19736: LD_INT 30
19738: EQUAL
19739: IFFALSE 19749
// sExchange := true ;
19741: LD_ADDR_EXP 110
19745: PUSH
19746: LD_INT 1
19748: ST_TO_ADDR
// if p3 = 31 then
19749: LD_VAR 0 3
19753: PUSH
19754: LD_INT 31
19756: EQUAL
19757: IFFALSE 19767
// sFac := true ;
19759: LD_ADDR_EXP 111
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// if p3 = 32 then
19767: LD_VAR 0 3
19771: PUSH
19772: LD_INT 32
19774: EQUAL
19775: IFFALSE 19785
// sPower := true ;
19777: LD_ADDR_EXP 112
19781: PUSH
19782: LD_INT 1
19784: ST_TO_ADDR
// if p3 = 33 then
19785: LD_VAR 0 3
19789: PUSH
19790: LD_INT 33
19792: EQUAL
19793: IFFALSE 19803
// sRandom := true ;
19795: LD_ADDR_EXP 113
19799: PUSH
19800: LD_INT 1
19802: ST_TO_ADDR
// if p3 = 34 then
19803: LD_VAR 0 3
19807: PUSH
19808: LD_INT 34
19810: EQUAL
19811: IFFALSE 19821
// sShield := true ;
19813: LD_ADDR_EXP 114
19817: PUSH
19818: LD_INT 1
19820: ST_TO_ADDR
// if p3 = 35 then
19821: LD_VAR 0 3
19825: PUSH
19826: LD_INT 35
19828: EQUAL
19829: IFFALSE 19839
// sTime := true ;
19831: LD_ADDR_EXP 115
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// if p3 = 36 then
19839: LD_VAR 0 3
19843: PUSH
19844: LD_INT 36
19846: EQUAL
19847: IFFALSE 19857
// sTools := true ;
19849: LD_ADDR_EXP 116
19853: PUSH
19854: LD_INT 1
19856: ST_TO_ADDR
// if p3 = 101 then
19857: LD_VAR 0 3
19861: PUSH
19862: LD_INT 101
19864: EQUAL
19865: IFFALSE 19875
// sSold := true ;
19867: LD_ADDR_EXP 81
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// if p3 = 102 then
19875: LD_VAR 0 3
19879: PUSH
19880: LD_INT 102
19882: EQUAL
19883: IFFALSE 19893
// sDiff := true ;
19885: LD_ADDR_EXP 82
19889: PUSH
19890: LD_INT 1
19892: ST_TO_ADDR
// if p3 = 103 then
19893: LD_VAR 0 3
19897: PUSH
19898: LD_INT 103
19900: EQUAL
19901: IFFALSE 19911
// sFog := true ;
19903: LD_ADDR_EXP 85
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
// if p3 = 104 then
19911: LD_VAR 0 3
19915: PUSH
19916: LD_INT 104
19918: EQUAL
19919: IFFALSE 19929
// sReset := true ;
19921: LD_ADDR_EXP 86
19925: PUSH
19926: LD_INT 1
19928: ST_TO_ADDR
// if p3 = 105 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 105
19936: EQUAL
19937: IFFALSE 19947
// sSun := true ;
19939: LD_ADDR_EXP 87
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 106 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 106
19954: EQUAL
19955: IFFALSE 19965
// sTiger := true ;
19957: LD_ADDR_EXP 83
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 107 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 107
19972: EQUAL
19973: IFFALSE 19983
// sBomb := true ;
19975: LD_ADDR_EXP 84
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// if p3 = 108 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 108
19990: EQUAL
19991: IFFALSE 20001
// sWound := true ;
19993: LD_ADDR_EXP 92
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 109 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 109
20008: EQUAL
20009: IFFALSE 20019
// sBetray := true ;
20011: LD_ADDR_EXP 96
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 110 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 110
20026: EQUAL
20027: IFFALSE 20037
// sContamin := true ;
20029: LD_ADDR_EXP 97
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 111 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 111
20044: EQUAL
20045: IFFALSE 20055
// sOil := true ;
20047: LD_ADDR_EXP 99
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 112 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 112
20062: EQUAL
20063: IFFALSE 20073
// sStu := true ;
20065: LD_ADDR_EXP 103
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 113 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 113
20080: EQUAL
20081: IFFALSE 20091
// sBazooka := true ;
20083: LD_ADDR_EXP 106
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 114 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 114
20098: EQUAL
20099: IFFALSE 20109
// sMortar := true ;
20101: LD_ADDR_EXP 107
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 115 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 115
20116: EQUAL
20117: IFFALSE 20127
// sRanger := true ;
20119: LD_ADDR_EXP 117
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// end ; if p2 = 101 then
20127: LD_VAR 0 2
20131: PUSH
20132: LD_INT 101
20134: EQUAL
20135: IFFALSE 20263
// begin case p3 of 1 :
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 1
20144: DOUBLE
20145: EQUAL
20146: IFTRUE 20150
20148: GO 20157
20150: POP
// hHackUnlimitedResources ; 2 :
20151: CALL 31298 0 0
20155: GO 20263
20157: LD_INT 2
20159: DOUBLE
20160: EQUAL
20161: IFTRUE 20165
20163: GO 20172
20165: POP
// hHackSetLevel10 ; 3 :
20166: CALL 31431 0 0
20170: GO 20263
20172: LD_INT 3
20174: DOUBLE
20175: EQUAL
20176: IFTRUE 20180
20178: GO 20187
20180: POP
// hHackSetLevel10YourUnits ; 4 :
20181: CALL 31516 0 0
20185: GO 20263
20187: LD_INT 4
20189: DOUBLE
20190: EQUAL
20191: IFTRUE 20195
20193: GO 20202
20195: POP
// hHackInvincible ; 5 :
20196: CALL 31964 0 0
20200: GO 20263
20202: LD_INT 5
20204: DOUBLE
20205: EQUAL
20206: IFTRUE 20210
20208: GO 20217
20210: POP
// hHackInvisible ; 6 :
20211: CALL 32075 0 0
20215: GO 20263
20217: LD_INT 6
20219: DOUBLE
20220: EQUAL
20221: IFTRUE 20225
20223: GO 20232
20225: POP
// hHackChangeYourSide ; 7 :
20226: CALL 32132 0 0
20230: GO 20263
20232: LD_INT 7
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20247
20240: POP
// hHackChangeUnitSide ; 8 :
20241: CALL 32174 0 0
20245: GO 20263
20247: LD_INT 8
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20262
20255: POP
// hHackFog ; end ;
20256: CALL 32275 0 0
20260: GO 20263
20262: POP
// end ; end ;
20263: PPOPN 6
20265: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20266: GO 20268
20268: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20269: LD_STRING initStreamRollete();
20271: PPUSH
20272: CALL_OW 559
// InitStreamMode ;
20276: CALL 20285 0 0
// DefineStreamItems ( ) ;
20280: CALL 20725 0 0
// end ;
20284: END
// function InitStreamMode ; begin
20285: LD_INT 0
20287: PPUSH
// streamModeActive := false ;
20288: LD_ADDR_EXP 64
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// normalCounter := 36 ;
20296: LD_ADDR_EXP 65
20300: PUSH
20301: LD_INT 36
20303: ST_TO_ADDR
// hardcoreCounter := 16 ;
20304: LD_ADDR_EXP 66
20308: PUSH
20309: LD_INT 16
20311: ST_TO_ADDR
// sRocket := false ;
20312: LD_ADDR_EXP 69
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// sSpeed := false ;
20320: LD_ADDR_EXP 68
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// sEngine := false ;
20328: LD_ADDR_EXP 70
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// sSpec := false ;
20336: LD_ADDR_EXP 67
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// sLevel := false ;
20344: LD_ADDR_EXP 71
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// sArmoury := false ;
20352: LD_ADDR_EXP 72
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// sRadar := false ;
20360: LD_ADDR_EXP 73
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// sBunker := false ;
20368: LD_ADDR_EXP 74
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// sHack := false ;
20376: LD_ADDR_EXP 75
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// sFire := false ;
20384: LD_ADDR_EXP 76
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// sRefresh := false ;
20392: LD_ADDR_EXP 77
20396: PUSH
20397: LD_INT 0
20399: ST_TO_ADDR
// sExp := false ;
20400: LD_ADDR_EXP 78
20404: PUSH
20405: LD_INT 0
20407: ST_TO_ADDR
// sDepot := false ;
20408: LD_ADDR_EXP 79
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
// sFlag := false ;
20416: LD_ADDR_EXP 80
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// sKamikadze := false ;
20424: LD_ADDR_EXP 88
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// sTroll := false ;
20432: LD_ADDR_EXP 89
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
// sSlow := false ;
20440: LD_ADDR_EXP 90
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
// sLack := false ;
20448: LD_ADDR_EXP 91
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// sTank := false ;
20456: LD_ADDR_EXP 93
20460: PUSH
20461: LD_INT 0
20463: ST_TO_ADDR
// sRemote := false ;
20464: LD_ADDR_EXP 94
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// sPowell := false ;
20472: LD_ADDR_EXP 95
20476: PUSH
20477: LD_INT 0
20479: ST_TO_ADDR
// sTeleport := false ;
20480: LD_ADDR_EXP 98
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// sOilTower := false ;
20488: LD_ADDR_EXP 100
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// sShovel := false ;
20496: LD_ADDR_EXP 101
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// sSheik := false ;
20504: LD_ADDR_EXP 102
20508: PUSH
20509: LD_INT 0
20511: ST_TO_ADDR
// sEarthquake := false ;
20512: LD_ADDR_EXP 104
20516: PUSH
20517: LD_INT 0
20519: ST_TO_ADDR
// sAI := false ;
20520: LD_ADDR_EXP 105
20524: PUSH
20525: LD_INT 0
20527: ST_TO_ADDR
// sCargo := false ;
20528: LD_ADDR_EXP 108
20532: PUSH
20533: LD_INT 0
20535: ST_TO_ADDR
// sDLaser := false ;
20536: LD_ADDR_EXP 109
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// sExchange := false ;
20544: LD_ADDR_EXP 110
20548: PUSH
20549: LD_INT 0
20551: ST_TO_ADDR
// sFac := false ;
20552: LD_ADDR_EXP 111
20556: PUSH
20557: LD_INT 0
20559: ST_TO_ADDR
// sPower := false ;
20560: LD_ADDR_EXP 112
20564: PUSH
20565: LD_INT 0
20567: ST_TO_ADDR
// sRandom := false ;
20568: LD_ADDR_EXP 113
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// sShield := false ;
20576: LD_ADDR_EXP 114
20580: PUSH
20581: LD_INT 0
20583: ST_TO_ADDR
// sTime := false ;
20584: LD_ADDR_EXP 115
20588: PUSH
20589: LD_INT 0
20591: ST_TO_ADDR
// sTools := false ;
20592: LD_ADDR_EXP 116
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// sSold := false ;
20600: LD_ADDR_EXP 81
20604: PUSH
20605: LD_INT 0
20607: ST_TO_ADDR
// sDiff := false ;
20608: LD_ADDR_EXP 82
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// sFog := false ;
20616: LD_ADDR_EXP 85
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
// sReset := false ;
20624: LD_ADDR_EXP 86
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// sSun := false ;
20632: LD_ADDR_EXP 87
20636: PUSH
20637: LD_INT 0
20639: ST_TO_ADDR
// sTiger := false ;
20640: LD_ADDR_EXP 83
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// sBomb := false ;
20648: LD_ADDR_EXP 84
20652: PUSH
20653: LD_INT 0
20655: ST_TO_ADDR
// sWound := false ;
20656: LD_ADDR_EXP 92
20660: PUSH
20661: LD_INT 0
20663: ST_TO_ADDR
// sBetray := false ;
20664: LD_ADDR_EXP 96
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// sContamin := false ;
20672: LD_ADDR_EXP 97
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// sOil := false ;
20680: LD_ADDR_EXP 99
20684: PUSH
20685: LD_INT 0
20687: ST_TO_ADDR
// sStu := false ;
20688: LD_ADDR_EXP 103
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// sBazooka := false ;
20696: LD_ADDR_EXP 106
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// sMortar := false ;
20704: LD_ADDR_EXP 107
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// sRanger := false ;
20712: LD_ADDR_EXP 117
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// end ;
20720: LD_VAR 0 1
20724: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20725: LD_INT 0
20727: PPUSH
20728: PPUSH
20729: PPUSH
20730: PPUSH
20731: PPUSH
// result := [ ] ;
20732: LD_ADDR_VAR 0 1
20736: PUSH
20737: EMPTY
20738: ST_TO_ADDR
// if campaign_id = 1 then
20739: LD_OWVAR 69
20743: PUSH
20744: LD_INT 1
20746: EQUAL
20747: IFFALSE 23685
// begin case mission_number of 1 :
20749: LD_OWVAR 70
20753: PUSH
20754: LD_INT 1
20756: DOUBLE
20757: EQUAL
20758: IFTRUE 20762
20760: GO 20826
20762: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20763: LD_ADDR_VAR 0 1
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 4
20773: PUSH
20774: LD_INT 11
20776: PUSH
20777: LD_INT 12
20779: PUSH
20780: LD_INT 15
20782: PUSH
20783: LD_INT 16
20785: PUSH
20786: LD_INT 22
20788: PUSH
20789: LD_INT 23
20791: PUSH
20792: LD_INT 26
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 101
20808: PUSH
20809: LD_INT 102
20811: PUSH
20812: LD_INT 106
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: ST_TO_ADDR
20824: GO 23683
20826: LD_INT 2
20828: DOUBLE
20829: EQUAL
20830: IFTRUE 20834
20832: GO 20906
20834: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20835: LD_ADDR_VAR 0 1
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 4
20845: PUSH
20846: LD_INT 11
20848: PUSH
20849: LD_INT 12
20851: PUSH
20852: LD_INT 15
20854: PUSH
20855: LD_INT 16
20857: PUSH
20858: LD_INT 22
20860: PUSH
20861: LD_INT 23
20863: PUSH
20864: LD_INT 26
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 101
20880: PUSH
20881: LD_INT 102
20883: PUSH
20884: LD_INT 105
20886: PUSH
20887: LD_INT 106
20889: PUSH
20890: LD_INT 108
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: ST_TO_ADDR
20904: GO 23683
20906: LD_INT 3
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20990
20914: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20915: LD_ADDR_VAR 0 1
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 4
20925: PUSH
20926: LD_INT 5
20928: PUSH
20929: LD_INT 11
20931: PUSH
20932: LD_INT 12
20934: PUSH
20935: LD_INT 15
20937: PUSH
20938: LD_INT 16
20940: PUSH
20941: LD_INT 22
20943: PUSH
20944: LD_INT 26
20946: PUSH
20947: LD_INT 36
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 101
20964: PUSH
20965: LD_INT 102
20967: PUSH
20968: LD_INT 105
20970: PUSH
20971: LD_INT 106
20973: PUSH
20974: LD_INT 108
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: ST_TO_ADDR
20988: GO 23683
20990: LD_INT 4
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21082
20998: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20999: LD_ADDR_VAR 0 1
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: LD_INT 4
21009: PUSH
21010: LD_INT 5
21012: PUSH
21013: LD_INT 8
21015: PUSH
21016: LD_INT 11
21018: PUSH
21019: LD_INT 12
21021: PUSH
21022: LD_INT 15
21024: PUSH
21025: LD_INT 16
21027: PUSH
21028: LD_INT 22
21030: PUSH
21031: LD_INT 23
21033: PUSH
21034: LD_INT 26
21036: PUSH
21037: LD_INT 36
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 101
21056: PUSH
21057: LD_INT 102
21059: PUSH
21060: LD_INT 105
21062: PUSH
21063: LD_INT 106
21065: PUSH
21066: LD_INT 108
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: ST_TO_ADDR
21080: GO 23683
21082: LD_INT 5
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21190
21090: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21091: LD_ADDR_VAR 0 1
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: LD_INT 4
21101: PUSH
21102: LD_INT 5
21104: PUSH
21105: LD_INT 6
21107: PUSH
21108: LD_INT 8
21110: PUSH
21111: LD_INT 11
21113: PUSH
21114: LD_INT 12
21116: PUSH
21117: LD_INT 15
21119: PUSH
21120: LD_INT 16
21122: PUSH
21123: LD_INT 22
21125: PUSH
21126: LD_INT 23
21128: PUSH
21129: LD_INT 25
21131: PUSH
21132: LD_INT 26
21134: PUSH
21135: LD_INT 36
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 101
21156: PUSH
21157: LD_INT 102
21159: PUSH
21160: LD_INT 105
21162: PUSH
21163: LD_INT 106
21165: PUSH
21166: LD_INT 108
21168: PUSH
21169: LD_INT 109
21171: PUSH
21172: LD_INT 112
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: ST_TO_ADDR
21188: GO 23683
21190: LD_INT 6
21192: DOUBLE
21193: EQUAL
21194: IFTRUE 21198
21196: GO 21318
21198: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21199: LD_ADDR_VAR 0 1
21203: PUSH
21204: LD_INT 2
21206: PUSH
21207: LD_INT 4
21209: PUSH
21210: LD_INT 5
21212: PUSH
21213: LD_INT 6
21215: PUSH
21216: LD_INT 8
21218: PUSH
21219: LD_INT 11
21221: PUSH
21222: LD_INT 12
21224: PUSH
21225: LD_INT 15
21227: PUSH
21228: LD_INT 16
21230: PUSH
21231: LD_INT 20
21233: PUSH
21234: LD_INT 21
21236: PUSH
21237: LD_INT 22
21239: PUSH
21240: LD_INT 23
21242: PUSH
21243: LD_INT 25
21245: PUSH
21246: LD_INT 26
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: LD_INT 31
21254: PUSH
21255: LD_INT 32
21257: PUSH
21258: LD_INT 36
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 101
21284: PUSH
21285: LD_INT 102
21287: PUSH
21288: LD_INT 105
21290: PUSH
21291: LD_INT 106
21293: PUSH
21294: LD_INT 108
21296: PUSH
21297: LD_INT 109
21299: PUSH
21300: LD_INT 112
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: ST_TO_ADDR
21316: GO 23683
21318: LD_INT 7
21320: DOUBLE
21321: EQUAL
21322: IFTRUE 21326
21324: GO 21426
21326: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21327: LD_ADDR_VAR 0 1
21331: PUSH
21332: LD_INT 2
21334: PUSH
21335: LD_INT 4
21337: PUSH
21338: LD_INT 5
21340: PUSH
21341: LD_INT 7
21343: PUSH
21344: LD_INT 11
21346: PUSH
21347: LD_INT 12
21349: PUSH
21350: LD_INT 15
21352: PUSH
21353: LD_INT 16
21355: PUSH
21356: LD_INT 20
21358: PUSH
21359: LD_INT 21
21361: PUSH
21362: LD_INT 22
21364: PUSH
21365: LD_INT 23
21367: PUSH
21368: LD_INT 25
21370: PUSH
21371: LD_INT 26
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 101
21392: PUSH
21393: LD_INT 102
21395: PUSH
21396: LD_INT 103
21398: PUSH
21399: LD_INT 105
21401: PUSH
21402: LD_INT 106
21404: PUSH
21405: LD_INT 108
21407: PUSH
21408: LD_INT 112
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: ST_TO_ADDR
21424: GO 23683
21426: LD_INT 8
21428: DOUBLE
21429: EQUAL
21430: IFTRUE 21434
21432: GO 21562
21434: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21435: LD_ADDR_VAR 0 1
21439: PUSH
21440: LD_INT 2
21442: PUSH
21443: LD_INT 4
21445: PUSH
21446: LD_INT 5
21448: PUSH
21449: LD_INT 6
21451: PUSH
21452: LD_INT 7
21454: PUSH
21455: LD_INT 8
21457: PUSH
21458: LD_INT 11
21460: PUSH
21461: LD_INT 12
21463: PUSH
21464: LD_INT 15
21466: PUSH
21467: LD_INT 16
21469: PUSH
21470: LD_INT 20
21472: PUSH
21473: LD_INT 21
21475: PUSH
21476: LD_INT 22
21478: PUSH
21479: LD_INT 23
21481: PUSH
21482: LD_INT 25
21484: PUSH
21485: LD_INT 26
21487: PUSH
21488: LD_INT 30
21490: PUSH
21491: LD_INT 31
21493: PUSH
21494: LD_INT 32
21496: PUSH
21497: LD_INT 36
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 101
21524: PUSH
21525: LD_INT 102
21527: PUSH
21528: LD_INT 103
21530: PUSH
21531: LD_INT 105
21533: PUSH
21534: LD_INT 106
21536: PUSH
21537: LD_INT 108
21539: PUSH
21540: LD_INT 109
21542: PUSH
21543: LD_INT 112
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: ST_TO_ADDR
21560: GO 23683
21562: LD_INT 9
21564: DOUBLE
21565: EQUAL
21566: IFTRUE 21570
21568: GO 21706
21570: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21571: LD_ADDR_VAR 0 1
21575: PUSH
21576: LD_INT 2
21578: PUSH
21579: LD_INT 4
21581: PUSH
21582: LD_INT 5
21584: PUSH
21585: LD_INT 6
21587: PUSH
21588: LD_INT 7
21590: PUSH
21591: LD_INT 8
21593: PUSH
21594: LD_INT 11
21596: PUSH
21597: LD_INT 12
21599: PUSH
21600: LD_INT 15
21602: PUSH
21603: LD_INT 16
21605: PUSH
21606: LD_INT 20
21608: PUSH
21609: LD_INT 21
21611: PUSH
21612: LD_INT 22
21614: PUSH
21615: LD_INT 23
21617: PUSH
21618: LD_INT 25
21620: PUSH
21621: LD_INT 26
21623: PUSH
21624: LD_INT 28
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: LD_INT 31
21632: PUSH
21633: LD_INT 32
21635: PUSH
21636: LD_INT 36
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 101
21664: PUSH
21665: LD_INT 102
21667: PUSH
21668: LD_INT 103
21670: PUSH
21671: LD_INT 105
21673: PUSH
21674: LD_INT 106
21676: PUSH
21677: LD_INT 108
21679: PUSH
21680: LD_INT 109
21682: PUSH
21683: LD_INT 112
21685: PUSH
21686: LD_INT 114
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: ST_TO_ADDR
21704: GO 23683
21706: LD_INT 10
21708: DOUBLE
21709: EQUAL
21710: IFTRUE 21714
21712: GO 21898
21714: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21715: LD_ADDR_VAR 0 1
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: LD_INT 4
21725: PUSH
21726: LD_INT 5
21728: PUSH
21729: LD_INT 6
21731: PUSH
21732: LD_INT 7
21734: PUSH
21735: LD_INT 8
21737: PUSH
21738: LD_INT 9
21740: PUSH
21741: LD_INT 10
21743: PUSH
21744: LD_INT 11
21746: PUSH
21747: LD_INT 12
21749: PUSH
21750: LD_INT 13
21752: PUSH
21753: LD_INT 14
21755: PUSH
21756: LD_INT 15
21758: PUSH
21759: LD_INT 16
21761: PUSH
21762: LD_INT 17
21764: PUSH
21765: LD_INT 18
21767: PUSH
21768: LD_INT 19
21770: PUSH
21771: LD_INT 20
21773: PUSH
21774: LD_INT 21
21776: PUSH
21777: LD_INT 22
21779: PUSH
21780: LD_INT 23
21782: PUSH
21783: LD_INT 24
21785: PUSH
21786: LD_INT 25
21788: PUSH
21789: LD_INT 26
21791: PUSH
21792: LD_INT 28
21794: PUSH
21795: LD_INT 30
21797: PUSH
21798: LD_INT 31
21800: PUSH
21801: LD_INT 32
21803: PUSH
21804: LD_INT 36
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 101
21840: PUSH
21841: LD_INT 102
21843: PUSH
21844: LD_INT 103
21846: PUSH
21847: LD_INT 104
21849: PUSH
21850: LD_INT 105
21852: PUSH
21853: LD_INT 106
21855: PUSH
21856: LD_INT 107
21858: PUSH
21859: LD_INT 108
21861: PUSH
21862: LD_INT 109
21864: PUSH
21865: LD_INT 110
21867: PUSH
21868: LD_INT 111
21870: PUSH
21871: LD_INT 112
21873: PUSH
21874: LD_INT 114
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: ST_TO_ADDR
21896: GO 23683
21898: LD_INT 11
21900: DOUBLE
21901: EQUAL
21902: IFTRUE 21906
21904: GO 22098
21906: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21907: LD_ADDR_VAR 0 1
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: LD_INT 3
21917: PUSH
21918: LD_INT 4
21920: PUSH
21921: LD_INT 5
21923: PUSH
21924: LD_INT 6
21926: PUSH
21927: LD_INT 7
21929: PUSH
21930: LD_INT 8
21932: PUSH
21933: LD_INT 9
21935: PUSH
21936: LD_INT 10
21938: PUSH
21939: LD_INT 11
21941: PUSH
21942: LD_INT 12
21944: PUSH
21945: LD_INT 13
21947: PUSH
21948: LD_INT 14
21950: PUSH
21951: LD_INT 15
21953: PUSH
21954: LD_INT 16
21956: PUSH
21957: LD_INT 17
21959: PUSH
21960: LD_INT 18
21962: PUSH
21963: LD_INT 19
21965: PUSH
21966: LD_INT 20
21968: PUSH
21969: LD_INT 21
21971: PUSH
21972: LD_INT 22
21974: PUSH
21975: LD_INT 23
21977: PUSH
21978: LD_INT 24
21980: PUSH
21981: LD_INT 25
21983: PUSH
21984: LD_INT 26
21986: PUSH
21987: LD_INT 28
21989: PUSH
21990: LD_INT 30
21992: PUSH
21993: LD_INT 31
21995: PUSH
21996: LD_INT 32
21998: PUSH
21999: LD_INT 34
22001: PUSH
22002: LD_INT 36
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 101
22040: PUSH
22041: LD_INT 102
22043: PUSH
22044: LD_INT 103
22046: PUSH
22047: LD_INT 104
22049: PUSH
22050: LD_INT 105
22052: PUSH
22053: LD_INT 106
22055: PUSH
22056: LD_INT 107
22058: PUSH
22059: LD_INT 108
22061: PUSH
22062: LD_INT 109
22064: PUSH
22065: LD_INT 110
22067: PUSH
22068: LD_INT 111
22070: PUSH
22071: LD_INT 112
22073: PUSH
22074: LD_INT 114
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: ST_TO_ADDR
22096: GO 23683
22098: LD_INT 12
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22106
22104: GO 22314
22106: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22107: LD_ADDR_VAR 0 1
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: LD_INT 3
22120: PUSH
22121: LD_INT 4
22123: PUSH
22124: LD_INT 5
22126: PUSH
22127: LD_INT 6
22129: PUSH
22130: LD_INT 7
22132: PUSH
22133: LD_INT 8
22135: PUSH
22136: LD_INT 9
22138: PUSH
22139: LD_INT 10
22141: PUSH
22142: LD_INT 11
22144: PUSH
22145: LD_INT 12
22147: PUSH
22148: LD_INT 13
22150: PUSH
22151: LD_INT 14
22153: PUSH
22154: LD_INT 15
22156: PUSH
22157: LD_INT 16
22159: PUSH
22160: LD_INT 17
22162: PUSH
22163: LD_INT 18
22165: PUSH
22166: LD_INT 19
22168: PUSH
22169: LD_INT 20
22171: PUSH
22172: LD_INT 21
22174: PUSH
22175: LD_INT 22
22177: PUSH
22178: LD_INT 23
22180: PUSH
22181: LD_INT 24
22183: PUSH
22184: LD_INT 25
22186: PUSH
22187: LD_INT 26
22189: PUSH
22190: LD_INT 27
22192: PUSH
22193: LD_INT 28
22195: PUSH
22196: LD_INT 30
22198: PUSH
22199: LD_INT 31
22201: PUSH
22202: LD_INT 32
22204: PUSH
22205: LD_INT 33
22207: PUSH
22208: LD_INT 34
22210: PUSH
22211: LD_INT 36
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 101
22252: PUSH
22253: LD_INT 102
22255: PUSH
22256: LD_INT 103
22258: PUSH
22259: LD_INT 104
22261: PUSH
22262: LD_INT 105
22264: PUSH
22265: LD_INT 106
22267: PUSH
22268: LD_INT 107
22270: PUSH
22271: LD_INT 108
22273: PUSH
22274: LD_INT 109
22276: PUSH
22277: LD_INT 110
22279: PUSH
22280: LD_INT 111
22282: PUSH
22283: LD_INT 112
22285: PUSH
22286: LD_INT 113
22288: PUSH
22289: LD_INT 114
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: ST_TO_ADDR
22312: GO 23683
22314: LD_INT 13
22316: DOUBLE
22317: EQUAL
22318: IFTRUE 22322
22320: GO 22518
22322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22323: LD_ADDR_VAR 0 1
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: LD_INT 2
22333: PUSH
22334: LD_INT 3
22336: PUSH
22337: LD_INT 4
22339: PUSH
22340: LD_INT 5
22342: PUSH
22343: LD_INT 8
22345: PUSH
22346: LD_INT 9
22348: PUSH
22349: LD_INT 10
22351: PUSH
22352: LD_INT 11
22354: PUSH
22355: LD_INT 12
22357: PUSH
22358: LD_INT 14
22360: PUSH
22361: LD_INT 15
22363: PUSH
22364: LD_INT 16
22366: PUSH
22367: LD_INT 17
22369: PUSH
22370: LD_INT 18
22372: PUSH
22373: LD_INT 19
22375: PUSH
22376: LD_INT 20
22378: PUSH
22379: LD_INT 21
22381: PUSH
22382: LD_INT 22
22384: PUSH
22385: LD_INT 23
22387: PUSH
22388: LD_INT 24
22390: PUSH
22391: LD_INT 25
22393: PUSH
22394: LD_INT 26
22396: PUSH
22397: LD_INT 27
22399: PUSH
22400: LD_INT 28
22402: PUSH
22403: LD_INT 30
22405: PUSH
22406: LD_INT 31
22408: PUSH
22409: LD_INT 32
22411: PUSH
22412: LD_INT 33
22414: PUSH
22415: LD_INT 34
22417: PUSH
22418: LD_INT 36
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 101
22456: PUSH
22457: LD_INT 102
22459: PUSH
22460: LD_INT 103
22462: PUSH
22463: LD_INT 104
22465: PUSH
22466: LD_INT 105
22468: PUSH
22469: LD_INT 106
22471: PUSH
22472: LD_INT 107
22474: PUSH
22475: LD_INT 108
22477: PUSH
22478: LD_INT 109
22480: PUSH
22481: LD_INT 110
22483: PUSH
22484: LD_INT 111
22486: PUSH
22487: LD_INT 112
22489: PUSH
22490: LD_INT 113
22492: PUSH
22493: LD_INT 114
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: ST_TO_ADDR
22516: GO 23683
22518: LD_INT 14
22520: DOUBLE
22521: EQUAL
22522: IFTRUE 22526
22524: GO 22738
22526: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22527: LD_ADDR_VAR 0 1
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 2
22537: PUSH
22538: LD_INT 3
22540: PUSH
22541: LD_INT 4
22543: PUSH
22544: LD_INT 5
22546: PUSH
22547: LD_INT 6
22549: PUSH
22550: LD_INT 7
22552: PUSH
22553: LD_INT 8
22555: PUSH
22556: LD_INT 9
22558: PUSH
22559: LD_INT 10
22561: PUSH
22562: LD_INT 11
22564: PUSH
22565: LD_INT 12
22567: PUSH
22568: LD_INT 13
22570: PUSH
22571: LD_INT 14
22573: PUSH
22574: LD_INT 15
22576: PUSH
22577: LD_INT 16
22579: PUSH
22580: LD_INT 17
22582: PUSH
22583: LD_INT 18
22585: PUSH
22586: LD_INT 19
22588: PUSH
22589: LD_INT 20
22591: PUSH
22592: LD_INT 21
22594: PUSH
22595: LD_INT 22
22597: PUSH
22598: LD_INT 23
22600: PUSH
22601: LD_INT 24
22603: PUSH
22604: LD_INT 25
22606: PUSH
22607: LD_INT 26
22609: PUSH
22610: LD_INT 27
22612: PUSH
22613: LD_INT 28
22615: PUSH
22616: LD_INT 29
22618: PUSH
22619: LD_INT 30
22621: PUSH
22622: LD_INT 31
22624: PUSH
22625: LD_INT 32
22627: PUSH
22628: LD_INT 33
22630: PUSH
22631: LD_INT 34
22633: PUSH
22634: LD_INT 36
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 101
22676: PUSH
22677: LD_INT 102
22679: PUSH
22680: LD_INT 103
22682: PUSH
22683: LD_INT 104
22685: PUSH
22686: LD_INT 105
22688: PUSH
22689: LD_INT 106
22691: PUSH
22692: LD_INT 107
22694: PUSH
22695: LD_INT 108
22697: PUSH
22698: LD_INT 109
22700: PUSH
22701: LD_INT 110
22703: PUSH
22704: LD_INT 111
22706: PUSH
22707: LD_INT 112
22709: PUSH
22710: LD_INT 113
22712: PUSH
22713: LD_INT 114
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: ST_TO_ADDR
22736: GO 23683
22738: LD_INT 15
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22958
22746: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22747: LD_ADDR_VAR 0 1
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: LD_INT 2
22757: PUSH
22758: LD_INT 3
22760: PUSH
22761: LD_INT 4
22763: PUSH
22764: LD_INT 5
22766: PUSH
22767: LD_INT 6
22769: PUSH
22770: LD_INT 7
22772: PUSH
22773: LD_INT 8
22775: PUSH
22776: LD_INT 9
22778: PUSH
22779: LD_INT 10
22781: PUSH
22782: LD_INT 11
22784: PUSH
22785: LD_INT 12
22787: PUSH
22788: LD_INT 13
22790: PUSH
22791: LD_INT 14
22793: PUSH
22794: LD_INT 15
22796: PUSH
22797: LD_INT 16
22799: PUSH
22800: LD_INT 17
22802: PUSH
22803: LD_INT 18
22805: PUSH
22806: LD_INT 19
22808: PUSH
22809: LD_INT 20
22811: PUSH
22812: LD_INT 21
22814: PUSH
22815: LD_INT 22
22817: PUSH
22818: LD_INT 23
22820: PUSH
22821: LD_INT 24
22823: PUSH
22824: LD_INT 25
22826: PUSH
22827: LD_INT 26
22829: PUSH
22830: LD_INT 27
22832: PUSH
22833: LD_INT 28
22835: PUSH
22836: LD_INT 29
22838: PUSH
22839: LD_INT 30
22841: PUSH
22842: LD_INT 31
22844: PUSH
22845: LD_INT 32
22847: PUSH
22848: LD_INT 33
22850: PUSH
22851: LD_INT 34
22853: PUSH
22854: LD_INT 36
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 101
22896: PUSH
22897: LD_INT 102
22899: PUSH
22900: LD_INT 103
22902: PUSH
22903: LD_INT 104
22905: PUSH
22906: LD_INT 105
22908: PUSH
22909: LD_INT 106
22911: PUSH
22912: LD_INT 107
22914: PUSH
22915: LD_INT 108
22917: PUSH
22918: LD_INT 109
22920: PUSH
22921: LD_INT 110
22923: PUSH
22924: LD_INT 111
22926: PUSH
22927: LD_INT 112
22929: PUSH
22930: LD_INT 113
22932: PUSH
22933: LD_INT 114
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: ST_TO_ADDR
22956: GO 23683
22958: LD_INT 16
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22966
22964: GO 23090
22966: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22967: LD_ADDR_VAR 0 1
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: LD_INT 4
22977: PUSH
22978: LD_INT 5
22980: PUSH
22981: LD_INT 7
22983: PUSH
22984: LD_INT 11
22986: PUSH
22987: LD_INT 12
22989: PUSH
22990: LD_INT 15
22992: PUSH
22993: LD_INT 16
22995: PUSH
22996: LD_INT 20
22998: PUSH
22999: LD_INT 21
23001: PUSH
23002: LD_INT 22
23004: PUSH
23005: LD_INT 23
23007: PUSH
23008: LD_INT 25
23010: PUSH
23011: LD_INT 26
23013: PUSH
23014: LD_INT 30
23016: PUSH
23017: LD_INT 31
23019: PUSH
23020: LD_INT 32
23022: PUSH
23023: LD_INT 33
23025: PUSH
23026: LD_INT 34
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 101
23052: PUSH
23053: LD_INT 102
23055: PUSH
23056: LD_INT 103
23058: PUSH
23059: LD_INT 106
23061: PUSH
23062: LD_INT 108
23064: PUSH
23065: LD_INT 112
23067: PUSH
23068: LD_INT 113
23070: PUSH
23071: LD_INT 114
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: ST_TO_ADDR
23088: GO 23683
23090: LD_INT 17
23092: DOUBLE
23093: EQUAL
23094: IFTRUE 23098
23096: GO 23310
23098: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23099: LD_ADDR_VAR 0 1
23103: PUSH
23104: LD_INT 1
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: LD_INT 3
23112: PUSH
23113: LD_INT 4
23115: PUSH
23116: LD_INT 5
23118: PUSH
23119: LD_INT 6
23121: PUSH
23122: LD_INT 7
23124: PUSH
23125: LD_INT 8
23127: PUSH
23128: LD_INT 9
23130: PUSH
23131: LD_INT 10
23133: PUSH
23134: LD_INT 11
23136: PUSH
23137: LD_INT 12
23139: PUSH
23140: LD_INT 13
23142: PUSH
23143: LD_INT 14
23145: PUSH
23146: LD_INT 15
23148: PUSH
23149: LD_INT 16
23151: PUSH
23152: LD_INT 17
23154: PUSH
23155: LD_INT 18
23157: PUSH
23158: LD_INT 19
23160: PUSH
23161: LD_INT 20
23163: PUSH
23164: LD_INT 21
23166: PUSH
23167: LD_INT 22
23169: PUSH
23170: LD_INT 23
23172: PUSH
23173: LD_INT 24
23175: PUSH
23176: LD_INT 25
23178: PUSH
23179: LD_INT 26
23181: PUSH
23182: LD_INT 27
23184: PUSH
23185: LD_INT 28
23187: PUSH
23188: LD_INT 29
23190: PUSH
23191: LD_INT 30
23193: PUSH
23194: LD_INT 31
23196: PUSH
23197: LD_INT 32
23199: PUSH
23200: LD_INT 33
23202: PUSH
23203: LD_INT 34
23205: PUSH
23206: LD_INT 36
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 101
23248: PUSH
23249: LD_INT 102
23251: PUSH
23252: LD_INT 103
23254: PUSH
23255: LD_INT 104
23257: PUSH
23258: LD_INT 105
23260: PUSH
23261: LD_INT 106
23263: PUSH
23264: LD_INT 107
23266: PUSH
23267: LD_INT 108
23269: PUSH
23270: LD_INT 109
23272: PUSH
23273: LD_INT 110
23275: PUSH
23276: LD_INT 111
23278: PUSH
23279: LD_INT 112
23281: PUSH
23282: LD_INT 113
23284: PUSH
23285: LD_INT 114
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: ST_TO_ADDR
23308: GO 23683
23310: LD_INT 18
23312: DOUBLE
23313: EQUAL
23314: IFTRUE 23318
23316: GO 23454
23318: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23319: LD_ADDR_VAR 0 1
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: LD_INT 7
23335: PUSH
23336: LD_INT 11
23338: PUSH
23339: LD_INT 12
23341: PUSH
23342: LD_INT 15
23344: PUSH
23345: LD_INT 16
23347: PUSH
23348: LD_INT 20
23350: PUSH
23351: LD_INT 21
23353: PUSH
23354: LD_INT 22
23356: PUSH
23357: LD_INT 23
23359: PUSH
23360: LD_INT 25
23362: PUSH
23363: LD_INT 26
23365: PUSH
23366: LD_INT 30
23368: PUSH
23369: LD_INT 31
23371: PUSH
23372: LD_INT 32
23374: PUSH
23375: LD_INT 33
23377: PUSH
23378: LD_INT 34
23380: PUSH
23381: LD_INT 35
23383: PUSH
23384: LD_INT 36
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 101
23412: PUSH
23413: LD_INT 102
23415: PUSH
23416: LD_INT 103
23418: PUSH
23419: LD_INT 106
23421: PUSH
23422: LD_INT 108
23424: PUSH
23425: LD_INT 112
23427: PUSH
23428: LD_INT 113
23430: PUSH
23431: LD_INT 114
23433: PUSH
23434: LD_INT 115
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: ST_TO_ADDR
23452: GO 23683
23454: LD_INT 19
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23682
23462: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23463: LD_ADDR_VAR 0 1
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: LD_INT 3
23476: PUSH
23477: LD_INT 4
23479: PUSH
23480: LD_INT 5
23482: PUSH
23483: LD_INT 6
23485: PUSH
23486: LD_INT 7
23488: PUSH
23489: LD_INT 8
23491: PUSH
23492: LD_INT 9
23494: PUSH
23495: LD_INT 10
23497: PUSH
23498: LD_INT 11
23500: PUSH
23501: LD_INT 12
23503: PUSH
23504: LD_INT 13
23506: PUSH
23507: LD_INT 14
23509: PUSH
23510: LD_INT 15
23512: PUSH
23513: LD_INT 16
23515: PUSH
23516: LD_INT 17
23518: PUSH
23519: LD_INT 18
23521: PUSH
23522: LD_INT 19
23524: PUSH
23525: LD_INT 20
23527: PUSH
23528: LD_INT 21
23530: PUSH
23531: LD_INT 22
23533: PUSH
23534: LD_INT 23
23536: PUSH
23537: LD_INT 24
23539: PUSH
23540: LD_INT 25
23542: PUSH
23543: LD_INT 26
23545: PUSH
23546: LD_INT 27
23548: PUSH
23549: LD_INT 28
23551: PUSH
23552: LD_INT 29
23554: PUSH
23555: LD_INT 30
23557: PUSH
23558: LD_INT 31
23560: PUSH
23561: LD_INT 32
23563: PUSH
23564: LD_INT 33
23566: PUSH
23567: LD_INT 34
23569: PUSH
23570: LD_INT 35
23572: PUSH
23573: LD_INT 36
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 101
23616: PUSH
23617: LD_INT 102
23619: PUSH
23620: LD_INT 103
23622: PUSH
23623: LD_INT 104
23625: PUSH
23626: LD_INT 105
23628: PUSH
23629: LD_INT 106
23631: PUSH
23632: LD_INT 107
23634: PUSH
23635: LD_INT 108
23637: PUSH
23638: LD_INT 109
23640: PUSH
23641: LD_INT 110
23643: PUSH
23644: LD_INT 111
23646: PUSH
23647: LD_INT 112
23649: PUSH
23650: LD_INT 113
23652: PUSH
23653: LD_INT 114
23655: PUSH
23656: LD_INT 115
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: ST_TO_ADDR
23680: GO 23683
23682: POP
// end else
23683: GO 23902
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23685: LD_ADDR_VAR 0 1
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: LD_INT 3
23698: PUSH
23699: LD_INT 4
23701: PUSH
23702: LD_INT 5
23704: PUSH
23705: LD_INT 6
23707: PUSH
23708: LD_INT 7
23710: PUSH
23711: LD_INT 8
23713: PUSH
23714: LD_INT 9
23716: PUSH
23717: LD_INT 10
23719: PUSH
23720: LD_INT 11
23722: PUSH
23723: LD_INT 12
23725: PUSH
23726: LD_INT 13
23728: PUSH
23729: LD_INT 14
23731: PUSH
23732: LD_INT 15
23734: PUSH
23735: LD_INT 16
23737: PUSH
23738: LD_INT 17
23740: PUSH
23741: LD_INT 18
23743: PUSH
23744: LD_INT 19
23746: PUSH
23747: LD_INT 20
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 22
23755: PUSH
23756: LD_INT 23
23758: PUSH
23759: LD_INT 24
23761: PUSH
23762: LD_INT 25
23764: PUSH
23765: LD_INT 26
23767: PUSH
23768: LD_INT 27
23770: PUSH
23771: LD_INT 28
23773: PUSH
23774: LD_INT 29
23776: PUSH
23777: LD_INT 30
23779: PUSH
23780: LD_INT 31
23782: PUSH
23783: LD_INT 32
23785: PUSH
23786: LD_INT 33
23788: PUSH
23789: LD_INT 34
23791: PUSH
23792: LD_INT 35
23794: PUSH
23795: LD_INT 36
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 101
23838: PUSH
23839: LD_INT 102
23841: PUSH
23842: LD_INT 103
23844: PUSH
23845: LD_INT 104
23847: PUSH
23848: LD_INT 105
23850: PUSH
23851: LD_INT 106
23853: PUSH
23854: LD_INT 107
23856: PUSH
23857: LD_INT 108
23859: PUSH
23860: LD_INT 109
23862: PUSH
23863: LD_INT 110
23865: PUSH
23866: LD_INT 111
23868: PUSH
23869: LD_INT 112
23871: PUSH
23872: LD_INT 113
23874: PUSH
23875: LD_INT 114
23877: PUSH
23878: LD_INT 115
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: ST_TO_ADDR
// if result then
23902: LD_VAR 0 1
23906: IFFALSE 24195
// begin normal :=  ;
23908: LD_ADDR_VAR 0 3
23912: PUSH
23913: LD_STRING 
23915: ST_TO_ADDR
// hardcore :=  ;
23916: LD_ADDR_VAR 0 4
23920: PUSH
23921: LD_STRING 
23923: ST_TO_ADDR
// for i = 1 to normalCounter do
23924: LD_ADDR_VAR 0 5
23928: PUSH
23929: DOUBLE
23930: LD_INT 1
23932: DEC
23933: ST_TO_ADDR
23934: LD_EXP 65
23938: PUSH
23939: FOR_TO
23940: IFFALSE 24041
// begin tmp := 0 ;
23942: LD_ADDR_VAR 0 2
23946: PUSH
23947: LD_STRING 0
23949: ST_TO_ADDR
// if result [ 1 ] then
23950: LD_VAR 0 1
23954: PUSH
23955: LD_INT 1
23957: ARRAY
23958: IFFALSE 24023
// if result [ 1 ] [ 1 ] = i then
23960: LD_VAR 0 1
23964: PUSH
23965: LD_INT 1
23967: ARRAY
23968: PUSH
23969: LD_INT 1
23971: ARRAY
23972: PUSH
23973: LD_VAR 0 5
23977: EQUAL
23978: IFFALSE 24023
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23980: LD_ADDR_VAR 0 1
23984: PUSH
23985: LD_VAR 0 1
23989: PPUSH
23990: LD_INT 1
23992: PPUSH
23993: LD_VAR 0 1
23997: PUSH
23998: LD_INT 1
24000: ARRAY
24001: PPUSH
24002: LD_INT 1
24004: PPUSH
24005: CALL_OW 3
24009: PPUSH
24010: CALL_OW 1
24014: ST_TO_ADDR
// tmp := 1 ;
24015: LD_ADDR_VAR 0 2
24019: PUSH
24020: LD_STRING 1
24022: ST_TO_ADDR
// end ; normal := normal & tmp ;
24023: LD_ADDR_VAR 0 3
24027: PUSH
24028: LD_VAR 0 3
24032: PUSH
24033: LD_VAR 0 2
24037: STR
24038: ST_TO_ADDR
// end ;
24039: GO 23939
24041: POP
24042: POP
// for i = 1 to hardcoreCounter do
24043: LD_ADDR_VAR 0 5
24047: PUSH
24048: DOUBLE
24049: LD_INT 1
24051: DEC
24052: ST_TO_ADDR
24053: LD_EXP 66
24057: PUSH
24058: FOR_TO
24059: IFFALSE 24164
// begin tmp := 0 ;
24061: LD_ADDR_VAR 0 2
24065: PUSH
24066: LD_STRING 0
24068: ST_TO_ADDR
// if result [ 2 ] then
24069: LD_VAR 0 1
24073: PUSH
24074: LD_INT 2
24076: ARRAY
24077: IFFALSE 24146
// if result [ 2 ] [ 1 ] = 100 + i then
24079: LD_VAR 0 1
24083: PUSH
24084: LD_INT 2
24086: ARRAY
24087: PUSH
24088: LD_INT 1
24090: ARRAY
24091: PUSH
24092: LD_INT 100
24094: PUSH
24095: LD_VAR 0 5
24099: PLUS
24100: EQUAL
24101: IFFALSE 24146
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24103: LD_ADDR_VAR 0 1
24107: PUSH
24108: LD_VAR 0 1
24112: PPUSH
24113: LD_INT 2
24115: PPUSH
24116: LD_VAR 0 1
24120: PUSH
24121: LD_INT 2
24123: ARRAY
24124: PPUSH
24125: LD_INT 1
24127: PPUSH
24128: CALL_OW 3
24132: PPUSH
24133: CALL_OW 1
24137: ST_TO_ADDR
// tmp := 1 ;
24138: LD_ADDR_VAR 0 2
24142: PUSH
24143: LD_STRING 1
24145: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24146: LD_ADDR_VAR 0 4
24150: PUSH
24151: LD_VAR 0 4
24155: PUSH
24156: LD_VAR 0 2
24160: STR
24161: ST_TO_ADDR
// end ;
24162: GO 24058
24164: POP
24165: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24166: LD_STRING getStreamItemsFromMission("
24168: PUSH
24169: LD_VAR 0 3
24173: STR
24174: PUSH
24175: LD_STRING ","
24177: STR
24178: PUSH
24179: LD_VAR 0 4
24183: STR
24184: PUSH
24185: LD_STRING ")
24187: STR
24188: PPUSH
24189: CALL_OW 559
// end else
24193: GO 24202
// ToLua ( getStreamItemsFromMission("","") ) ;
24195: LD_STRING getStreamItemsFromMission("","")
24197: PPUSH
24198: CALL_OW 559
// end ;
24202: LD_VAR 0 1
24206: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24207: LD_EXP 64
24211: PUSH
24212: LD_EXP 69
24216: AND
24217: IFFALSE 24341
24219: GO 24221
24221: DISABLE
24222: LD_INT 0
24224: PPUSH
24225: PPUSH
// begin enable ;
24226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24227: LD_ADDR_VAR 0 2
24231: PUSH
24232: LD_INT 22
24234: PUSH
24235: LD_OWVAR 2
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: LD_INT 34
24249: PUSH
24250: LD_INT 7
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 34
24259: PUSH
24260: LD_INT 45
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 34
24269: PUSH
24270: LD_INT 28
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 34
24279: PUSH
24280: LD_INT 47
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 69
24302: ST_TO_ADDR
// if not tmp then
24303: LD_VAR 0 2
24307: NOT
24308: IFFALSE 24312
// exit ;
24310: GO 24341
// for i in tmp do
24312: LD_ADDR_VAR 0 1
24316: PUSH
24317: LD_VAR 0 2
24321: PUSH
24322: FOR_IN
24323: IFFALSE 24339
// begin SetLives ( i , 0 ) ;
24325: LD_VAR 0 1
24329: PPUSH
24330: LD_INT 0
24332: PPUSH
24333: CALL_OW 234
// end ;
24337: GO 24322
24339: POP
24340: POP
// end ;
24341: PPOPN 2
24343: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24344: LD_EXP 64
24348: PUSH
24349: LD_EXP 70
24353: AND
24354: IFFALSE 24438
24356: GO 24358
24358: DISABLE
24359: LD_INT 0
24361: PPUSH
24362: PPUSH
// begin enable ;
24363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24364: LD_ADDR_VAR 0 2
24368: PUSH
24369: LD_INT 22
24371: PUSH
24372: LD_OWVAR 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 32
24383: PUSH
24384: LD_INT 3
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PPUSH
24395: CALL_OW 69
24399: ST_TO_ADDR
// if not tmp then
24400: LD_VAR 0 2
24404: NOT
24405: IFFALSE 24409
// exit ;
24407: GO 24438
// for i in tmp do
24409: LD_ADDR_VAR 0 1
24413: PUSH
24414: LD_VAR 0 2
24418: PUSH
24419: FOR_IN
24420: IFFALSE 24436
// begin SetLives ( i , 0 ) ;
24422: LD_VAR 0 1
24426: PPUSH
24427: LD_INT 0
24429: PPUSH
24430: CALL_OW 234
// end ;
24434: GO 24419
24436: POP
24437: POP
// end ;
24438: PPOPN 2
24440: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24441: LD_EXP 64
24445: PUSH
24446: LD_EXP 67
24450: AND
24451: IFFALSE 24544
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
// begin enable ;
24459: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24460: LD_ADDR_VAR 0 1
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_OWVAR 2
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: PUSH
24480: LD_INT 25
24482: PUSH
24483: LD_INT 5
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 25
24492: PUSH
24493: LD_INT 9
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 25
24502: PUSH
24503: LD_INT 8
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PPUSH
24520: CALL_OW 69
24524: PUSH
24525: FOR_IN
24526: IFFALSE 24542
// begin SetClass ( i , 1 ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_INT 1
24535: PPUSH
24536: CALL_OW 336
// end ;
24540: GO 24525
24542: POP
24543: POP
// end ;
24544: PPOPN 1
24546: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24547: LD_EXP 64
24551: PUSH
24552: LD_EXP 68
24556: AND
24557: PUSH
24558: LD_OWVAR 65
24562: PUSH
24563: LD_INT 7
24565: LESS
24566: AND
24567: IFFALSE 24581
24569: GO 24571
24571: DISABLE
// begin enable ;
24572: ENABLE
// game_speed := 7 ;
24573: LD_ADDR_OWVAR 65
24577: PUSH
24578: LD_INT 7
24580: ST_TO_ADDR
// end ;
24581: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24582: LD_EXP 64
24586: PUSH
24587: LD_EXP 71
24591: AND
24592: IFFALSE 24794
24594: GO 24596
24596: DISABLE
24597: LD_INT 0
24599: PPUSH
24600: PPUSH
24601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24602: LD_ADDR_VAR 0 3
24606: PUSH
24607: LD_INT 81
24609: PUSH
24610: LD_OWVAR 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 21
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PPUSH
24633: CALL_OW 69
24637: ST_TO_ADDR
// if not tmp then
24638: LD_VAR 0 3
24642: NOT
24643: IFFALSE 24647
// exit ;
24645: GO 24794
// if tmp > 5 then
24647: LD_VAR 0 3
24651: PUSH
24652: LD_INT 5
24654: GREATER
24655: IFFALSE 24667
// k := 5 else
24657: LD_ADDR_VAR 0 2
24661: PUSH
24662: LD_INT 5
24664: ST_TO_ADDR
24665: GO 24677
// k := tmp ;
24667: LD_ADDR_VAR 0 2
24671: PUSH
24672: LD_VAR 0 3
24676: ST_TO_ADDR
// for i := 1 to k do
24677: LD_ADDR_VAR 0 1
24681: PUSH
24682: DOUBLE
24683: LD_INT 1
24685: DEC
24686: ST_TO_ADDR
24687: LD_VAR 0 2
24691: PUSH
24692: FOR_TO
24693: IFFALSE 24792
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24695: LD_VAR 0 3
24699: PUSH
24700: LD_VAR 0 1
24704: ARRAY
24705: PPUSH
24706: LD_VAR 0 1
24710: PUSH
24711: LD_INT 4
24713: MOD
24714: PUSH
24715: LD_INT 1
24717: PLUS
24718: PPUSH
24719: CALL_OW 259
24723: PUSH
24724: LD_INT 10
24726: LESS
24727: IFFALSE 24790
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24729: LD_VAR 0 3
24733: PUSH
24734: LD_VAR 0 1
24738: ARRAY
24739: PPUSH
24740: LD_VAR 0 1
24744: PUSH
24745: LD_INT 4
24747: MOD
24748: PUSH
24749: LD_INT 1
24751: PLUS
24752: PPUSH
24753: LD_VAR 0 3
24757: PUSH
24758: LD_VAR 0 1
24762: ARRAY
24763: PPUSH
24764: LD_VAR 0 1
24768: PUSH
24769: LD_INT 4
24771: MOD
24772: PUSH
24773: LD_INT 1
24775: PLUS
24776: PPUSH
24777: CALL_OW 259
24781: PUSH
24782: LD_INT 1
24784: PLUS
24785: PPUSH
24786: CALL_OW 237
24790: GO 24692
24792: POP
24793: POP
// end ;
24794: PPOPN 3
24796: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24797: LD_EXP 64
24801: PUSH
24802: LD_EXP 72
24806: AND
24807: IFFALSE 24827
24809: GO 24811
24811: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24812: LD_INT 4
24814: PPUSH
24815: LD_OWVAR 2
24819: PPUSH
24820: LD_INT 0
24822: PPUSH
24823: CALL_OW 324
24827: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24828: LD_EXP 64
24832: PUSH
24833: LD_EXP 101
24837: AND
24838: IFFALSE 24858
24840: GO 24842
24842: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24843: LD_INT 19
24845: PPUSH
24846: LD_OWVAR 2
24850: PPUSH
24851: LD_INT 0
24853: PPUSH
24854: CALL_OW 324
24858: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24859: LD_EXP 64
24863: PUSH
24864: LD_EXP 73
24868: AND
24869: IFFALSE 24971
24871: GO 24873
24873: DISABLE
24874: LD_INT 0
24876: PPUSH
24877: PPUSH
// begin enable ;
24878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24879: LD_ADDR_VAR 0 2
24883: PUSH
24884: LD_INT 22
24886: PUSH
24887: LD_OWVAR 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: LD_INT 34
24901: PUSH
24902: LD_INT 11
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 34
24911: PUSH
24912: LD_INT 30
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: LIST
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PPUSH
24928: CALL_OW 69
24932: ST_TO_ADDR
// if not tmp then
24933: LD_VAR 0 2
24937: NOT
24938: IFFALSE 24942
// exit ;
24940: GO 24971
// for i in tmp do
24942: LD_ADDR_VAR 0 1
24946: PUSH
24947: LD_VAR 0 2
24951: PUSH
24952: FOR_IN
24953: IFFALSE 24969
// begin SetLives ( i , 0 ) ;
24955: LD_VAR 0 1
24959: PPUSH
24960: LD_INT 0
24962: PPUSH
24963: CALL_OW 234
// end ;
24967: GO 24952
24969: POP
24970: POP
// end ;
24971: PPOPN 2
24973: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24974: LD_EXP 64
24978: PUSH
24979: LD_EXP 74
24983: AND
24984: IFFALSE 25004
24986: GO 24988
24988: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24989: LD_INT 32
24991: PPUSH
24992: LD_OWVAR 2
24996: PPUSH
24997: LD_INT 0
24999: PPUSH
25000: CALL_OW 324
25004: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25005: LD_EXP 64
25009: PUSH
25010: LD_EXP 75
25014: AND
25015: IFFALSE 25196
25017: GO 25019
25019: DISABLE
25020: LD_INT 0
25022: PPUSH
25023: PPUSH
25024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25025: LD_ADDR_VAR 0 2
25029: PUSH
25030: LD_INT 22
25032: PUSH
25033: LD_OWVAR 2
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 33
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PPUSH
25056: CALL_OW 69
25060: ST_TO_ADDR
// if not tmp then
25061: LD_VAR 0 2
25065: NOT
25066: IFFALSE 25070
// exit ;
25068: GO 25196
// side := 0 ;
25070: LD_ADDR_VAR 0 3
25074: PUSH
25075: LD_INT 0
25077: ST_TO_ADDR
// for i := 1 to 8 do
25078: LD_ADDR_VAR 0 1
25082: PUSH
25083: DOUBLE
25084: LD_INT 1
25086: DEC
25087: ST_TO_ADDR
25088: LD_INT 8
25090: PUSH
25091: FOR_TO
25092: IFFALSE 25140
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25094: LD_OWVAR 2
25098: PUSH
25099: LD_VAR 0 1
25103: NONEQUAL
25104: PUSH
25105: LD_OWVAR 2
25109: PPUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 81
25119: PUSH
25120: LD_INT 2
25122: EQUAL
25123: AND
25124: IFFALSE 25138
// begin side := i ;
25126: LD_ADDR_VAR 0 3
25130: PUSH
25131: LD_VAR 0 1
25135: ST_TO_ADDR
// break ;
25136: GO 25140
// end ;
25138: GO 25091
25140: POP
25141: POP
// if not side then
25142: LD_VAR 0 3
25146: NOT
25147: IFFALSE 25151
// exit ;
25149: GO 25196
// for i := 1 to tmp do
25151: LD_ADDR_VAR 0 1
25155: PUSH
25156: DOUBLE
25157: LD_INT 1
25159: DEC
25160: ST_TO_ADDR
25161: LD_VAR 0 2
25165: PUSH
25166: FOR_TO
25167: IFFALSE 25194
// if Prob ( 60 ) then
25169: LD_INT 60
25171: PPUSH
25172: CALL_OW 13
25176: IFFALSE 25192
// SetSide ( i , side ) ;
25178: LD_VAR 0 1
25182: PPUSH
25183: LD_VAR 0 3
25187: PPUSH
25188: CALL_OW 235
25192: GO 25166
25194: POP
25195: POP
// end ;
25196: PPOPN 3
25198: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25199: LD_EXP 64
25203: PUSH
25204: LD_EXP 77
25208: AND
25209: IFFALSE 25328
25211: GO 25213
25213: DISABLE
25214: LD_INT 0
25216: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25217: LD_ADDR_VAR 0 1
25221: PUSH
25222: LD_INT 22
25224: PUSH
25225: LD_OWVAR 2
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 21
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 3
25246: PUSH
25247: LD_INT 23
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: PPUSH
25266: CALL_OW 69
25270: PUSH
25271: FOR_IN
25272: IFFALSE 25326
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25274: LD_VAR 0 1
25278: PPUSH
25279: CALL_OW 257
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 3
25292: PUSH
25293: LD_INT 4
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: IN
25302: IFFALSE 25324
// SetClass ( un , rand ( 1 , 4 ) ) ;
25304: LD_VAR 0 1
25308: PPUSH
25309: LD_INT 1
25311: PPUSH
25312: LD_INT 4
25314: PPUSH
25315: CALL_OW 12
25319: PPUSH
25320: CALL_OW 336
25324: GO 25271
25326: POP
25327: POP
// end ;
25328: PPOPN 1
25330: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25331: LD_EXP 64
25335: PUSH
25336: LD_EXP 76
25340: AND
25341: IFFALSE 25420
25343: GO 25345
25345: DISABLE
25346: LD_INT 0
25348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25349: LD_ADDR_VAR 0 1
25353: PUSH
25354: LD_INT 22
25356: PUSH
25357: LD_OWVAR 2
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 21
25368: PUSH
25369: LD_INT 3
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PPUSH
25380: CALL_OW 69
25384: ST_TO_ADDR
// if not tmp then
25385: LD_VAR 0 1
25389: NOT
25390: IFFALSE 25394
// exit ;
25392: GO 25420
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25394: LD_VAR 0 1
25398: PUSH
25399: LD_INT 1
25401: PPUSH
25402: LD_VAR 0 1
25406: PPUSH
25407: CALL_OW 12
25411: ARRAY
25412: PPUSH
25413: LD_INT 100
25415: PPUSH
25416: CALL_OW 234
// end ;
25420: PPOPN 1
25422: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25423: LD_EXP 64
25427: PUSH
25428: LD_EXP 78
25432: AND
25433: IFFALSE 25531
25435: GO 25437
25437: DISABLE
25438: LD_INT 0
25440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25441: LD_ADDR_VAR 0 1
25445: PUSH
25446: LD_INT 22
25448: PUSH
25449: LD_OWVAR 2
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 21
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PPUSH
25472: CALL_OW 69
25476: ST_TO_ADDR
// if not tmp then
25477: LD_VAR 0 1
25481: NOT
25482: IFFALSE 25486
// exit ;
25484: GO 25531
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25486: LD_VAR 0 1
25490: PUSH
25491: LD_INT 1
25493: PPUSH
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 12
25503: ARRAY
25504: PPUSH
25505: LD_INT 1
25507: PPUSH
25508: LD_INT 4
25510: PPUSH
25511: CALL_OW 12
25515: PPUSH
25516: LD_INT 3000
25518: PPUSH
25519: LD_INT 9000
25521: PPUSH
25522: CALL_OW 12
25526: PPUSH
25527: CALL_OW 492
// end ;
25531: PPOPN 1
25533: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25534: LD_EXP 64
25538: PUSH
25539: LD_EXP 79
25543: AND
25544: IFFALSE 25564
25546: GO 25548
25548: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25549: LD_INT 1
25551: PPUSH
25552: LD_OWVAR 2
25556: PPUSH
25557: LD_INT 0
25559: PPUSH
25560: CALL_OW 324
25564: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25565: LD_EXP 64
25569: PUSH
25570: LD_EXP 80
25574: AND
25575: IFFALSE 25658
25577: GO 25579
25579: DISABLE
25580: LD_INT 0
25582: PPUSH
25583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25584: LD_ADDR_VAR 0 2
25588: PUSH
25589: LD_INT 22
25591: PUSH
25592: LD_OWVAR 2
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 21
25603: PUSH
25604: LD_INT 3
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PPUSH
25615: CALL_OW 69
25619: ST_TO_ADDR
// if not tmp then
25620: LD_VAR 0 2
25624: NOT
25625: IFFALSE 25629
// exit ;
25627: GO 25658
// for i in tmp do
25629: LD_ADDR_VAR 0 1
25633: PUSH
25634: LD_VAR 0 2
25638: PUSH
25639: FOR_IN
25640: IFFALSE 25656
// SetBLevel ( i , 10 ) ;
25642: LD_VAR 0 1
25646: PPUSH
25647: LD_INT 10
25649: PPUSH
25650: CALL_OW 241
25654: GO 25639
25656: POP
25657: POP
// end ;
25658: PPOPN 2
25660: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25661: LD_EXP 64
25665: PUSH
25666: LD_EXP 81
25670: AND
25671: IFFALSE 25782
25673: GO 25675
25675: DISABLE
25676: LD_INT 0
25678: PPUSH
25679: PPUSH
25680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25681: LD_ADDR_VAR 0 3
25685: PUSH
25686: LD_INT 22
25688: PUSH
25689: LD_OWVAR 2
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 25
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PPUSH
25712: CALL_OW 69
25716: ST_TO_ADDR
// if not tmp then
25717: LD_VAR 0 3
25721: NOT
25722: IFFALSE 25726
// exit ;
25724: GO 25782
// un := tmp [ rand ( 1 , tmp ) ] ;
25726: LD_ADDR_VAR 0 2
25730: PUSH
25731: LD_VAR 0 3
25735: PUSH
25736: LD_INT 1
25738: PPUSH
25739: LD_VAR 0 3
25743: PPUSH
25744: CALL_OW 12
25748: ARRAY
25749: ST_TO_ADDR
// if Crawls ( un ) then
25750: LD_VAR 0 2
25754: PPUSH
25755: CALL_OW 318
25759: IFFALSE 25770
// ComWalk ( un ) ;
25761: LD_VAR 0 2
25765: PPUSH
25766: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25770: LD_VAR 0 2
25774: PPUSH
25775: LD_INT 5
25777: PPUSH
25778: CALL_OW 336
// end ;
25782: PPOPN 3
25784: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25785: LD_EXP 64
25789: PUSH
25790: LD_EXP 82
25794: AND
25795: PUSH
25796: LD_OWVAR 67
25800: PUSH
25801: LD_INT 3
25803: LESS
25804: AND
25805: IFFALSE 25824
25807: GO 25809
25809: DISABLE
// Difficulty := Difficulty + 1 ;
25810: LD_ADDR_OWVAR 67
25814: PUSH
25815: LD_OWVAR 67
25819: PUSH
25820: LD_INT 1
25822: PLUS
25823: ST_TO_ADDR
25824: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25825: LD_EXP 64
25829: PUSH
25830: LD_EXP 83
25834: AND
25835: IFFALSE 25938
25837: GO 25839
25839: DISABLE
25840: LD_INT 0
25842: PPUSH
// begin for i := 1 to 5 do
25843: LD_ADDR_VAR 0 1
25847: PUSH
25848: DOUBLE
25849: LD_INT 1
25851: DEC
25852: ST_TO_ADDR
25853: LD_INT 5
25855: PUSH
25856: FOR_TO
25857: IFFALSE 25936
// begin uc_nation := nation_nature ;
25859: LD_ADDR_OWVAR 21
25863: PUSH
25864: LD_INT 0
25866: ST_TO_ADDR
// uc_side := 0 ;
25867: LD_ADDR_OWVAR 20
25871: PUSH
25872: LD_INT 0
25874: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25875: LD_ADDR_OWVAR 29
25879: PUSH
25880: LD_INT 12
25882: PUSH
25883: LD_INT 12
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: ST_TO_ADDR
// hc_agressivity := 20 ;
25890: LD_ADDR_OWVAR 35
25894: PUSH
25895: LD_INT 20
25897: ST_TO_ADDR
// hc_class := class_tiger ;
25898: LD_ADDR_OWVAR 28
25902: PUSH
25903: LD_INT 14
25905: ST_TO_ADDR
// hc_gallery :=  ;
25906: LD_ADDR_OWVAR 33
25910: PUSH
25911: LD_STRING 
25913: ST_TO_ADDR
// hc_name :=  ;
25914: LD_ADDR_OWVAR 26
25918: PUSH
25919: LD_STRING 
25921: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25922: CALL_OW 44
25926: PPUSH
25927: LD_INT 0
25929: PPUSH
25930: CALL_OW 51
// end ;
25934: GO 25856
25936: POP
25937: POP
// end ;
25938: PPOPN 1
25940: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25941: LD_EXP 64
25945: PUSH
25946: LD_EXP 84
25950: AND
25951: IFFALSE 25960
25953: GO 25955
25955: DISABLE
// StreamSibBomb ;
25956: CALL 25961 0 0
25960: END
// export function StreamSibBomb ; var i , x , y ; begin
25961: LD_INT 0
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
// result := false ;
25967: LD_ADDR_VAR 0 1
25971: PUSH
25972: LD_INT 0
25974: ST_TO_ADDR
// for i := 1 to 16 do
25975: LD_ADDR_VAR 0 2
25979: PUSH
25980: DOUBLE
25981: LD_INT 1
25983: DEC
25984: ST_TO_ADDR
25985: LD_INT 16
25987: PUSH
25988: FOR_TO
25989: IFFALSE 26188
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25991: LD_ADDR_VAR 0 3
25995: PUSH
25996: LD_INT 10
25998: PUSH
25999: LD_INT 20
26001: PUSH
26002: LD_INT 30
26004: PUSH
26005: LD_INT 40
26007: PUSH
26008: LD_INT 50
26010: PUSH
26011: LD_INT 60
26013: PUSH
26014: LD_INT 70
26016: PUSH
26017: LD_INT 80
26019: PUSH
26020: LD_INT 90
26022: PUSH
26023: LD_INT 100
26025: PUSH
26026: LD_INT 110
26028: PUSH
26029: LD_INT 120
26031: PUSH
26032: LD_INT 130
26034: PUSH
26035: LD_INT 140
26037: PUSH
26038: LD_INT 150
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: PPUSH
26061: LD_INT 15
26063: PPUSH
26064: CALL_OW 12
26068: ARRAY
26069: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26070: LD_ADDR_VAR 0 4
26074: PUSH
26075: LD_INT 10
26077: PUSH
26078: LD_INT 20
26080: PUSH
26081: LD_INT 30
26083: PUSH
26084: LD_INT 40
26086: PUSH
26087: LD_INT 50
26089: PUSH
26090: LD_INT 60
26092: PUSH
26093: LD_INT 70
26095: PUSH
26096: LD_INT 80
26098: PUSH
26099: LD_INT 90
26101: PUSH
26102: LD_INT 100
26104: PUSH
26105: LD_INT 110
26107: PUSH
26108: LD_INT 120
26110: PUSH
26111: LD_INT 130
26113: PUSH
26114: LD_INT 140
26116: PUSH
26117: LD_INT 150
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 1
26139: PPUSH
26140: LD_INT 15
26142: PPUSH
26143: CALL_OW 12
26147: ARRAY
26148: ST_TO_ADDR
// if ValidHex ( x , y ) then
26149: LD_VAR 0 3
26153: PPUSH
26154: LD_VAR 0 4
26158: PPUSH
26159: CALL_OW 488
26163: IFFALSE 26186
// begin result := [ x , y ] ;
26165: LD_ADDR_VAR 0 1
26169: PUSH
26170: LD_VAR 0 3
26174: PUSH
26175: LD_VAR 0 4
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: ST_TO_ADDR
// break ;
26184: GO 26188
// end ; end ;
26186: GO 25988
26188: POP
26189: POP
// if result then
26190: LD_VAR 0 1
26194: IFFALSE 26254
// begin ToLua ( playSibBomb() ) ;
26196: LD_STRING playSibBomb()
26198: PPUSH
26199: CALL_OW 559
// wait ( 0 0$14 ) ;
26203: LD_INT 490
26205: PPUSH
26206: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26210: LD_VAR 0 1
26214: PUSH
26215: LD_INT 1
26217: ARRAY
26218: PPUSH
26219: LD_VAR 0 1
26223: PUSH
26224: LD_INT 2
26226: ARRAY
26227: PPUSH
26228: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26232: LD_VAR 0 1
26236: PUSH
26237: LD_INT 1
26239: ARRAY
26240: PPUSH
26241: LD_VAR 0 1
26245: PUSH
26246: LD_INT 2
26248: ARRAY
26249: PPUSH
26250: CALL_OW 429
// end ; end ;
26254: LD_VAR 0 1
26258: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26259: LD_EXP 64
26263: PUSH
26264: LD_EXP 86
26268: AND
26269: IFFALSE 26281
26271: GO 26273
26273: DISABLE
// YouLost (  ) ;
26274: LD_STRING 
26276: PPUSH
26277: CALL_OW 104
26281: END
// every 0 0$1 trigger StreamModeActive and sFog do
26282: LD_EXP 64
26286: PUSH
26287: LD_EXP 85
26291: AND
26292: IFFALSE 26306
26294: GO 26296
26296: DISABLE
// FogOff ( your_side ) ;
26297: LD_OWVAR 2
26301: PPUSH
26302: CALL_OW 344
26306: END
// every 0 0$1 trigger StreamModeActive and sSun do
26307: LD_EXP 64
26311: PUSH
26312: LD_EXP 87
26316: AND
26317: IFFALSE 26345
26319: GO 26321
26321: DISABLE
// begin solar_recharge_percent := 0 ;
26322: LD_ADDR_OWVAR 79
26326: PUSH
26327: LD_INT 0
26329: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26330: LD_INT 10500
26332: PPUSH
26333: CALL_OW 67
// solar_recharge_percent := 100 ;
26337: LD_ADDR_OWVAR 79
26341: PUSH
26342: LD_INT 100
26344: ST_TO_ADDR
// end ;
26345: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26346: LD_EXP 64
26350: PUSH
26351: LD_EXP 88
26355: AND
26356: IFFALSE 26595
26358: GO 26360
26360: DISABLE
26361: LD_INT 0
26363: PPUSH
26364: PPUSH
26365: PPUSH
// begin tmp := [ ] ;
26366: LD_ADDR_VAR 0 3
26370: PUSH
26371: EMPTY
26372: ST_TO_ADDR
// for i := 1 to 6 do
26373: LD_ADDR_VAR 0 1
26377: PUSH
26378: DOUBLE
26379: LD_INT 1
26381: DEC
26382: ST_TO_ADDR
26383: LD_INT 6
26385: PUSH
26386: FOR_TO
26387: IFFALSE 26492
// begin uc_nation := nation_nature ;
26389: LD_ADDR_OWVAR 21
26393: PUSH
26394: LD_INT 0
26396: ST_TO_ADDR
// uc_side := 0 ;
26397: LD_ADDR_OWVAR 20
26401: PUSH
26402: LD_INT 0
26404: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26405: LD_ADDR_OWVAR 29
26409: PUSH
26410: LD_INT 12
26412: PUSH
26413: LD_INT 12
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: ST_TO_ADDR
// hc_agressivity := 20 ;
26420: LD_ADDR_OWVAR 35
26424: PUSH
26425: LD_INT 20
26427: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26428: LD_ADDR_OWVAR 28
26432: PUSH
26433: LD_INT 17
26435: ST_TO_ADDR
// hc_gallery :=  ;
26436: LD_ADDR_OWVAR 33
26440: PUSH
26441: LD_STRING 
26443: ST_TO_ADDR
// hc_name :=  ;
26444: LD_ADDR_OWVAR 26
26448: PUSH
26449: LD_STRING 
26451: ST_TO_ADDR
// un := CreateHuman ;
26452: LD_ADDR_VAR 0 2
26456: PUSH
26457: CALL_OW 44
26461: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26462: LD_VAR 0 2
26466: PPUSH
26467: LD_INT 1
26469: PPUSH
26470: CALL_OW 51
// tmp := tmp ^ un ;
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_VAR 0 3
26483: PUSH
26484: LD_VAR 0 2
26488: ADD
26489: ST_TO_ADDR
// end ;
26490: GO 26386
26492: POP
26493: POP
// repeat wait ( 0 0$1 ) ;
26494: LD_INT 35
26496: PPUSH
26497: CALL_OW 67
// for un in tmp do
26501: LD_ADDR_VAR 0 2
26505: PUSH
26506: LD_VAR 0 3
26510: PUSH
26511: FOR_IN
26512: IFFALSE 26586
// begin if IsDead ( un ) then
26514: LD_VAR 0 2
26518: PPUSH
26519: CALL_OW 301
26523: IFFALSE 26543
// begin tmp := tmp diff un ;
26525: LD_ADDR_VAR 0 3
26529: PUSH
26530: LD_VAR 0 3
26534: PUSH
26535: LD_VAR 0 2
26539: DIFF
26540: ST_TO_ADDR
// continue ;
26541: GO 26511
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26543: LD_VAR 0 2
26547: PPUSH
26548: LD_INT 3
26550: PUSH
26551: LD_INT 22
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PPUSH
26565: CALL_OW 69
26569: PPUSH
26570: LD_VAR 0 2
26574: PPUSH
26575: CALL_OW 74
26579: PPUSH
26580: CALL_OW 115
// end ;
26584: GO 26511
26586: POP
26587: POP
// until not tmp ;
26588: LD_VAR 0 3
26592: NOT
26593: IFFALSE 26494
// end ;
26595: PPOPN 3
26597: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26598: LD_EXP 64
26602: PUSH
26603: LD_EXP 89
26607: AND
26608: IFFALSE 26662
26610: GO 26612
26612: DISABLE
// begin ToLua ( displayTroll(); ) ;
26613: LD_STRING displayTroll();
26615: PPUSH
26616: CALL_OW 559
// wait ( 3 3$00 ) ;
26620: LD_INT 6300
26622: PPUSH
26623: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26627: LD_STRING hideTroll();
26629: PPUSH
26630: CALL_OW 559
// wait ( 1 1$00 ) ;
26634: LD_INT 2100
26636: PPUSH
26637: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26641: LD_STRING displayTroll();
26643: PPUSH
26644: CALL_OW 559
// wait ( 1 1$00 ) ;
26648: LD_INT 2100
26650: PPUSH
26651: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26655: LD_STRING hideTroll();
26657: PPUSH
26658: CALL_OW 559
// end ;
26662: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26663: LD_EXP 64
26667: PUSH
26668: LD_EXP 90
26672: AND
26673: IFFALSE 26736
26675: GO 26677
26677: DISABLE
26678: LD_INT 0
26680: PPUSH
// begin p := 0 ;
26681: LD_ADDR_VAR 0 1
26685: PUSH
26686: LD_INT 0
26688: ST_TO_ADDR
// repeat game_speed := 1 ;
26689: LD_ADDR_OWVAR 65
26693: PUSH
26694: LD_INT 1
26696: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26697: LD_INT 35
26699: PPUSH
26700: CALL_OW 67
// p := p + 1 ;
26704: LD_ADDR_VAR 0 1
26708: PUSH
26709: LD_VAR 0 1
26713: PUSH
26714: LD_INT 1
26716: PLUS
26717: ST_TO_ADDR
// until p >= 60 ;
26718: LD_VAR 0 1
26722: PUSH
26723: LD_INT 60
26725: GREATEREQUAL
26726: IFFALSE 26689
// game_speed := 4 ;
26728: LD_ADDR_OWVAR 65
26732: PUSH
26733: LD_INT 4
26735: ST_TO_ADDR
// end ;
26736: PPOPN 1
26738: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26739: LD_EXP 64
26743: PUSH
26744: LD_EXP 91
26748: AND
26749: IFFALSE 26895
26751: GO 26753
26753: DISABLE
26754: LD_INT 0
26756: PPUSH
26757: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26758: LD_ADDR_VAR 0 1
26762: PUSH
26763: LD_INT 22
26765: PUSH
26766: LD_OWVAR 2
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: LD_INT 30
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 30
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: LIST
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PPUSH
26807: CALL_OW 69
26811: ST_TO_ADDR
// if not depot then
26812: LD_VAR 0 1
26816: NOT
26817: IFFALSE 26821
// exit ;
26819: GO 26895
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26821: LD_ADDR_VAR 0 2
26825: PUSH
26826: LD_VAR 0 1
26830: PUSH
26831: LD_INT 1
26833: PPUSH
26834: LD_VAR 0 1
26838: PPUSH
26839: CALL_OW 12
26843: ARRAY
26844: PPUSH
26845: CALL_OW 274
26849: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26850: LD_VAR 0 2
26854: PPUSH
26855: LD_INT 1
26857: PPUSH
26858: LD_INT 0
26860: PPUSH
26861: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26865: LD_VAR 0 2
26869: PPUSH
26870: LD_INT 2
26872: PPUSH
26873: LD_INT 0
26875: PPUSH
26876: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26880: LD_VAR 0 2
26884: PPUSH
26885: LD_INT 3
26887: PPUSH
26888: LD_INT 0
26890: PPUSH
26891: CALL_OW 277
// end ;
26895: PPOPN 2
26897: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26898: LD_EXP 64
26902: PUSH
26903: LD_EXP 92
26907: AND
26908: IFFALSE 27005
26910: GO 26912
26912: DISABLE
26913: LD_INT 0
26915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26916: LD_ADDR_VAR 0 1
26920: PUSH
26921: LD_INT 22
26923: PUSH
26924: LD_OWVAR 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 21
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 3
26945: PUSH
26946: LD_INT 23
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 69
26969: ST_TO_ADDR
// if not tmp then
26970: LD_VAR 0 1
26974: NOT
26975: IFFALSE 26979
// exit ;
26977: GO 27005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26979: LD_VAR 0 1
26983: PUSH
26984: LD_INT 1
26986: PPUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 12
26996: ARRAY
26997: PPUSH
26998: LD_INT 200
27000: PPUSH
27001: CALL_OW 234
// end ;
27005: PPOPN 1
27007: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27008: LD_EXP 64
27012: PUSH
27013: LD_EXP 93
27017: AND
27018: IFFALSE 27097
27020: GO 27022
27022: DISABLE
27023: LD_INT 0
27025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27026: LD_ADDR_VAR 0 1
27030: PUSH
27031: LD_INT 22
27033: PUSH
27034: LD_OWVAR 2
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 21
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PPUSH
27057: CALL_OW 69
27061: ST_TO_ADDR
// if not tmp then
27062: LD_VAR 0 1
27066: NOT
27067: IFFALSE 27071
// exit ;
27069: GO 27097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27071: LD_VAR 0 1
27075: PUSH
27076: LD_INT 1
27078: PPUSH
27079: LD_VAR 0 1
27083: PPUSH
27084: CALL_OW 12
27088: ARRAY
27089: PPUSH
27090: LD_INT 60
27092: PPUSH
27093: CALL_OW 234
// end ;
27097: PPOPN 1
27099: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27100: LD_EXP 64
27104: PUSH
27105: LD_EXP 94
27109: AND
27110: IFFALSE 27209
27112: GO 27114
27114: DISABLE
27115: LD_INT 0
27117: PPUSH
27118: PPUSH
// begin enable ;
27119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27120: LD_ADDR_VAR 0 1
27124: PUSH
27125: LD_INT 22
27127: PUSH
27128: LD_OWVAR 2
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 61
27139: PUSH
27140: EMPTY
27141: LIST
27142: PUSH
27143: LD_INT 33
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: PPUSH
27158: CALL_OW 69
27162: ST_TO_ADDR
// if not tmp then
27163: LD_VAR 0 1
27167: NOT
27168: IFFALSE 27172
// exit ;
27170: GO 27209
// for i in tmp do
27172: LD_ADDR_VAR 0 2
27176: PUSH
27177: LD_VAR 0 1
27181: PUSH
27182: FOR_IN
27183: IFFALSE 27207
// if IsControledBy ( i ) then
27185: LD_VAR 0 2
27189: PPUSH
27190: CALL_OW 312
27194: IFFALSE 27205
// ComUnlink ( i ) ;
27196: LD_VAR 0 2
27200: PPUSH
27201: CALL_OW 136
27205: GO 27182
27207: POP
27208: POP
// end ;
27209: PPOPN 2
27211: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27212: LD_EXP 64
27216: PUSH
27217: LD_EXP 95
27221: AND
27222: IFFALSE 27362
27224: GO 27226
27226: DISABLE
27227: LD_INT 0
27229: PPUSH
27230: PPUSH
// begin ToLua ( displayPowell(); ) ;
27231: LD_STRING displayPowell();
27233: PPUSH
27234: CALL_OW 559
// uc_side := 0 ;
27238: LD_ADDR_OWVAR 20
27242: PUSH
27243: LD_INT 0
27245: ST_TO_ADDR
// uc_nation := 2 ;
27246: LD_ADDR_OWVAR 21
27250: PUSH
27251: LD_INT 2
27253: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27254: LD_ADDR_OWVAR 37
27258: PUSH
27259: LD_INT 14
27261: ST_TO_ADDR
// vc_engine := engine_siberite ;
27262: LD_ADDR_OWVAR 39
27266: PUSH
27267: LD_INT 3
27269: ST_TO_ADDR
// vc_control := control_apeman ;
27270: LD_ADDR_OWVAR 38
27274: PUSH
27275: LD_INT 5
27277: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27278: LD_ADDR_OWVAR 40
27282: PUSH
27283: LD_INT 29
27285: ST_TO_ADDR
// un := CreateVehicle ;
27286: LD_ADDR_VAR 0 2
27290: PUSH
27291: CALL_OW 45
27295: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27296: LD_VAR 0 2
27300: PPUSH
27301: LD_INT 1
27303: PPUSH
27304: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27308: LD_INT 35
27310: PPUSH
27311: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27315: LD_VAR 0 2
27319: PPUSH
27320: LD_INT 22
27322: PUSH
27323: LD_OWVAR 2
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PPUSH
27332: CALL_OW 69
27336: PPUSH
27337: LD_VAR 0 2
27341: PPUSH
27342: CALL_OW 74
27346: PPUSH
27347: CALL_OW 115
// until IsDead ( un ) ;
27351: LD_VAR 0 2
27355: PPUSH
27356: CALL_OW 301
27360: IFFALSE 27308
// end ;
27362: PPOPN 2
27364: END
// every 0 0$1 trigger StreamModeActive and sStu do
27365: LD_EXP 64
27369: PUSH
27370: LD_EXP 103
27374: AND
27375: IFFALSE 27391
27377: GO 27379
27379: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27380: LD_STRING displayStucuk();
27382: PPUSH
27383: CALL_OW 559
// ResetFog ;
27387: CALL_OW 335
// end ;
27391: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27392: LD_EXP 64
27396: PUSH
27397: LD_EXP 96
27401: AND
27402: IFFALSE 27543
27404: GO 27406
27406: DISABLE
27407: LD_INT 0
27409: PPUSH
27410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27411: LD_ADDR_VAR 0 2
27415: PUSH
27416: LD_INT 22
27418: PUSH
27419: LD_OWVAR 2
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 21
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PPUSH
27442: CALL_OW 69
27446: ST_TO_ADDR
// if not tmp then
27447: LD_VAR 0 2
27451: NOT
27452: IFFALSE 27456
// exit ;
27454: GO 27543
// un := tmp [ rand ( 1 , tmp ) ] ;
27456: LD_ADDR_VAR 0 1
27460: PUSH
27461: LD_VAR 0 2
27465: PUSH
27466: LD_INT 1
27468: PPUSH
27469: LD_VAR 0 2
27473: PPUSH
27474: CALL_OW 12
27478: ARRAY
27479: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27480: LD_VAR 0 1
27484: PPUSH
27485: LD_INT 0
27487: PPUSH
27488: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27492: LD_VAR 0 1
27496: PPUSH
27497: LD_OWVAR 3
27501: PUSH
27502: LD_VAR 0 1
27506: DIFF
27507: PPUSH
27508: LD_VAR 0 1
27512: PPUSH
27513: CALL_OW 74
27517: PPUSH
27518: CALL_OW 115
// wait ( 0 0$20 ) ;
27522: LD_INT 700
27524: PPUSH
27525: CALL_OW 67
// SetSide ( un , your_side ) ;
27529: LD_VAR 0 1
27533: PPUSH
27534: LD_OWVAR 2
27538: PPUSH
27539: CALL_OW 235
// end ;
27543: PPOPN 2
27545: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27546: LD_EXP 64
27550: PUSH
27551: LD_EXP 97
27555: AND
27556: IFFALSE 27662
27558: GO 27560
27560: DISABLE
27561: LD_INT 0
27563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27564: LD_ADDR_VAR 0 1
27568: PUSH
27569: LD_INT 22
27571: PUSH
27572: LD_OWVAR 2
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: LD_INT 30
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 30
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PPUSH
27613: CALL_OW 69
27617: ST_TO_ADDR
// if not depot then
27618: LD_VAR 0 1
27622: NOT
27623: IFFALSE 27627
// exit ;
27625: GO 27662
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27627: LD_VAR 0 1
27631: PUSH
27632: LD_INT 1
27634: ARRAY
27635: PPUSH
27636: CALL_OW 250
27640: PPUSH
27641: LD_VAR 0 1
27645: PUSH
27646: LD_INT 1
27648: ARRAY
27649: PPUSH
27650: CALL_OW 251
27654: PPUSH
27655: LD_INT 70
27657: PPUSH
27658: CALL_OW 495
// end ;
27662: PPOPN 1
27664: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27665: LD_EXP 64
27669: PUSH
27670: LD_EXP 98
27674: AND
27675: IFFALSE 27886
27677: GO 27679
27679: DISABLE
27680: LD_INT 0
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
27686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27687: LD_ADDR_VAR 0 5
27691: PUSH
27692: LD_INT 22
27694: PUSH
27695: LD_OWVAR 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 21
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PPUSH
27718: CALL_OW 69
27722: ST_TO_ADDR
// if not tmp then
27723: LD_VAR 0 5
27727: NOT
27728: IFFALSE 27732
// exit ;
27730: GO 27886
// for i in tmp do
27732: LD_ADDR_VAR 0 1
27736: PUSH
27737: LD_VAR 0 5
27741: PUSH
27742: FOR_IN
27743: IFFALSE 27884
// begin d := rand ( 0 , 5 ) ;
27745: LD_ADDR_VAR 0 4
27749: PUSH
27750: LD_INT 0
27752: PPUSH
27753: LD_INT 5
27755: PPUSH
27756: CALL_OW 12
27760: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27761: LD_ADDR_VAR 0 2
27765: PUSH
27766: LD_VAR 0 1
27770: PPUSH
27771: CALL_OW 250
27775: PPUSH
27776: LD_VAR 0 4
27780: PPUSH
27781: LD_INT 3
27783: PPUSH
27784: LD_INT 12
27786: PPUSH
27787: CALL_OW 12
27791: PPUSH
27792: CALL_OW 272
27796: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27797: LD_ADDR_VAR 0 3
27801: PUSH
27802: LD_VAR 0 1
27806: PPUSH
27807: CALL_OW 251
27811: PPUSH
27812: LD_VAR 0 4
27816: PPUSH
27817: LD_INT 3
27819: PPUSH
27820: LD_INT 12
27822: PPUSH
27823: CALL_OW 12
27827: PPUSH
27828: CALL_OW 273
27832: ST_TO_ADDR
// if ValidHex ( x , y ) then
27833: LD_VAR 0 2
27837: PPUSH
27838: LD_VAR 0 3
27842: PPUSH
27843: CALL_OW 488
27847: IFFALSE 27882
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27849: LD_VAR 0 1
27853: PPUSH
27854: LD_VAR 0 2
27858: PPUSH
27859: LD_VAR 0 3
27863: PPUSH
27864: LD_INT 3
27866: PPUSH
27867: LD_INT 6
27869: PPUSH
27870: CALL_OW 12
27874: PPUSH
27875: LD_INT 1
27877: PPUSH
27878: CALL_OW 483
// end ;
27882: GO 27742
27884: POP
27885: POP
// end ;
27886: PPOPN 5
27888: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27889: LD_EXP 64
27893: PUSH
27894: LD_EXP 99
27898: AND
27899: IFFALSE 27993
27901: GO 27903
27903: DISABLE
27904: LD_INT 0
27906: PPUSH
27907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27908: LD_ADDR_VAR 0 2
27912: PUSH
27913: LD_INT 22
27915: PUSH
27916: LD_OWVAR 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 32
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 21
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: PPUSH
27950: CALL_OW 69
27954: ST_TO_ADDR
// if not tmp then
27955: LD_VAR 0 2
27959: NOT
27960: IFFALSE 27964
// exit ;
27962: GO 27993
// for i in tmp do
27964: LD_ADDR_VAR 0 1
27968: PUSH
27969: LD_VAR 0 2
27973: PUSH
27974: FOR_IN
27975: IFFALSE 27991
// SetFuel ( i , 0 ) ;
27977: LD_VAR 0 1
27981: PPUSH
27982: LD_INT 0
27984: PPUSH
27985: CALL_OW 240
27989: GO 27974
27991: POP
27992: POP
// end ;
27993: PPOPN 2
27995: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27996: LD_EXP 64
28000: PUSH
28001: LD_EXP 100
28005: AND
28006: IFFALSE 28072
28008: GO 28010
28010: DISABLE
28011: LD_INT 0
28013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28014: LD_ADDR_VAR 0 1
28018: PUSH
28019: LD_INT 22
28021: PUSH
28022: LD_OWVAR 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 30
28033: PUSH
28034: LD_INT 29
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PPUSH
28045: CALL_OW 69
28049: ST_TO_ADDR
// if not tmp then
28050: LD_VAR 0 1
28054: NOT
28055: IFFALSE 28059
// exit ;
28057: GO 28072
// DestroyUnit ( tmp [ 1 ] ) ;
28059: LD_VAR 0 1
28063: PUSH
28064: LD_INT 1
28066: ARRAY
28067: PPUSH
28068: CALL_OW 65
// end ;
28072: PPOPN 1
28074: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28075: LD_EXP 64
28079: PUSH
28080: LD_EXP 102
28084: AND
28085: IFFALSE 28214
28087: GO 28089
28089: DISABLE
28090: LD_INT 0
28092: PPUSH
// begin uc_side := 0 ;
28093: LD_ADDR_OWVAR 20
28097: PUSH
28098: LD_INT 0
28100: ST_TO_ADDR
// uc_nation := nation_arabian ;
28101: LD_ADDR_OWVAR 21
28105: PUSH
28106: LD_INT 2
28108: ST_TO_ADDR
// hc_gallery :=  ;
28109: LD_ADDR_OWVAR 33
28113: PUSH
28114: LD_STRING 
28116: ST_TO_ADDR
// hc_name :=  ;
28117: LD_ADDR_OWVAR 26
28121: PUSH
28122: LD_STRING 
28124: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28125: LD_INT 1
28127: PPUSH
28128: LD_INT 11
28130: PPUSH
28131: LD_INT 10
28133: PPUSH
28134: CALL_OW 380
// un := CreateHuman ;
28138: LD_ADDR_VAR 0 1
28142: PUSH
28143: CALL_OW 44
28147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28148: LD_VAR 0 1
28152: PPUSH
28153: LD_INT 1
28155: PPUSH
28156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28160: LD_INT 35
28162: PPUSH
28163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28167: LD_VAR 0 1
28171: PPUSH
28172: LD_INT 22
28174: PUSH
28175: LD_OWVAR 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 69
28188: PPUSH
28189: LD_VAR 0 1
28193: PPUSH
28194: CALL_OW 74
28198: PPUSH
28199: CALL_OW 115
// until IsDead ( un ) ;
28203: LD_VAR 0 1
28207: PPUSH
28208: CALL_OW 301
28212: IFFALSE 28160
// end ;
28214: PPOPN 1
28216: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28217: LD_EXP 64
28221: PUSH
28222: LD_EXP 104
28226: AND
28227: IFFALSE 28239
28229: GO 28231
28231: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28232: LD_STRING earthquake(getX(game), 0, 32)
28234: PPUSH
28235: CALL_OW 559
28239: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28240: LD_EXP 64
28244: PUSH
28245: LD_EXP 105
28249: AND
28250: IFFALSE 28341
28252: GO 28254
28254: DISABLE
28255: LD_INT 0
28257: PPUSH
// begin enable ;
28258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28259: LD_ADDR_VAR 0 1
28263: PUSH
28264: LD_INT 22
28266: PUSH
28267: LD_OWVAR 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 21
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 33
28288: PUSH
28289: LD_INT 3
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: LIST
28300: PPUSH
28301: CALL_OW 69
28305: ST_TO_ADDR
// if not tmp then
28306: LD_VAR 0 1
28310: NOT
28311: IFFALSE 28315
// exit ;
28313: GO 28341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28315: LD_VAR 0 1
28319: PUSH
28320: LD_INT 1
28322: PPUSH
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 12
28332: ARRAY
28333: PPUSH
28334: LD_INT 1
28336: PPUSH
28337: CALL_OW 234
// end ;
28341: PPOPN 1
28343: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28344: LD_EXP 64
28348: PUSH
28349: LD_EXP 106
28353: AND
28354: IFFALSE 28495
28356: GO 28358
28358: DISABLE
28359: LD_INT 0
28361: PPUSH
28362: PPUSH
28363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28364: LD_ADDR_VAR 0 3
28368: PUSH
28369: LD_INT 22
28371: PUSH
28372: LD_OWVAR 2
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 25
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PPUSH
28395: CALL_OW 69
28399: ST_TO_ADDR
// if not tmp then
28400: LD_VAR 0 3
28404: NOT
28405: IFFALSE 28409
// exit ;
28407: GO 28495
// un := tmp [ rand ( 1 , tmp ) ] ;
28409: LD_ADDR_VAR 0 2
28413: PUSH
28414: LD_VAR 0 3
28418: PUSH
28419: LD_INT 1
28421: PPUSH
28422: LD_VAR 0 3
28426: PPUSH
28427: CALL_OW 12
28431: ARRAY
28432: ST_TO_ADDR
// if Crawls ( un ) then
28433: LD_VAR 0 2
28437: PPUSH
28438: CALL_OW 318
28442: IFFALSE 28453
// ComWalk ( un ) ;
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28453: LD_VAR 0 2
28457: PPUSH
28458: LD_INT 9
28460: PPUSH
28461: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28465: LD_INT 28
28467: PPUSH
28468: LD_OWVAR 2
28472: PPUSH
28473: LD_INT 2
28475: PPUSH
28476: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28480: LD_INT 29
28482: PPUSH
28483: LD_OWVAR 2
28487: PPUSH
28488: LD_INT 2
28490: PPUSH
28491: CALL_OW 322
// end ;
28495: PPOPN 3
28497: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28498: LD_EXP 64
28502: PUSH
28503: LD_EXP 107
28507: AND
28508: IFFALSE 28619
28510: GO 28512
28512: DISABLE
28513: LD_INT 0
28515: PPUSH
28516: PPUSH
28517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28518: LD_ADDR_VAR 0 3
28522: PUSH
28523: LD_INT 22
28525: PUSH
28526: LD_OWVAR 2
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 25
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PPUSH
28549: CALL_OW 69
28553: ST_TO_ADDR
// if not tmp then
28554: LD_VAR 0 3
28558: NOT
28559: IFFALSE 28563
// exit ;
28561: GO 28619
// un := tmp [ rand ( 1 , tmp ) ] ;
28563: LD_ADDR_VAR 0 2
28567: PUSH
28568: LD_VAR 0 3
28572: PUSH
28573: LD_INT 1
28575: PPUSH
28576: LD_VAR 0 3
28580: PPUSH
28581: CALL_OW 12
28585: ARRAY
28586: ST_TO_ADDR
// if Crawls ( un ) then
28587: LD_VAR 0 2
28591: PPUSH
28592: CALL_OW 318
28596: IFFALSE 28607
// ComWalk ( un ) ;
28598: LD_VAR 0 2
28602: PPUSH
28603: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28607: LD_VAR 0 2
28611: PPUSH
28612: LD_INT 8
28614: PPUSH
28615: CALL_OW 336
// end ;
28619: PPOPN 3
28621: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28622: LD_EXP 64
28626: PUSH
28627: LD_EXP 108
28631: AND
28632: IFFALSE 28776
28634: GO 28636
28636: DISABLE
28637: LD_INT 0
28639: PPUSH
28640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28641: LD_ADDR_VAR 0 2
28645: PUSH
28646: LD_INT 22
28648: PUSH
28649: LD_OWVAR 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 21
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 34
28673: PUSH
28674: LD_INT 12
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 34
28683: PUSH
28684: LD_INT 51
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 34
28693: PUSH
28694: LD_INT 32
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: LIST
28711: PPUSH
28712: CALL_OW 69
28716: ST_TO_ADDR
// if not tmp then
28717: LD_VAR 0 2
28721: NOT
28722: IFFALSE 28726
// exit ;
28724: GO 28776
// for i in tmp do
28726: LD_ADDR_VAR 0 1
28730: PUSH
28731: LD_VAR 0 2
28735: PUSH
28736: FOR_IN
28737: IFFALSE 28774
// if GetCargo ( i , mat_artifact ) = 0 then
28739: LD_VAR 0 1
28743: PPUSH
28744: LD_INT 4
28746: PPUSH
28747: CALL_OW 289
28751: PUSH
28752: LD_INT 0
28754: EQUAL
28755: IFFALSE 28772
// SetCargo ( i , mat_siberit , 100 ) ;
28757: LD_VAR 0 1
28761: PPUSH
28762: LD_INT 3
28764: PPUSH
28765: LD_INT 100
28767: PPUSH
28768: CALL_OW 290
28772: GO 28736
28774: POP
28775: POP
// end ;
28776: PPOPN 2
28778: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28779: LD_EXP 64
28783: PUSH
28784: LD_EXP 109
28788: AND
28789: IFFALSE 28972
28791: GO 28793
28793: DISABLE
28794: LD_INT 0
28796: PPUSH
28797: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28798: LD_ADDR_VAR 0 2
28802: PUSH
28803: LD_INT 22
28805: PUSH
28806: LD_OWVAR 2
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PPUSH
28815: CALL_OW 69
28819: ST_TO_ADDR
// if not tmp then
28820: LD_VAR 0 2
28824: NOT
28825: IFFALSE 28829
// exit ;
28827: GO 28972
// for i := 1 to 2 do
28829: LD_ADDR_VAR 0 1
28833: PUSH
28834: DOUBLE
28835: LD_INT 1
28837: DEC
28838: ST_TO_ADDR
28839: LD_INT 2
28841: PUSH
28842: FOR_TO
28843: IFFALSE 28970
// begin uc_side := your_side ;
28845: LD_ADDR_OWVAR 20
28849: PUSH
28850: LD_OWVAR 2
28854: ST_TO_ADDR
// uc_nation := nation_american ;
28855: LD_ADDR_OWVAR 21
28859: PUSH
28860: LD_INT 1
28862: ST_TO_ADDR
// vc_chassis := us_morphling ;
28863: LD_ADDR_OWVAR 37
28867: PUSH
28868: LD_INT 5
28870: ST_TO_ADDR
// vc_engine := engine_siberite ;
28871: LD_ADDR_OWVAR 39
28875: PUSH
28876: LD_INT 3
28878: ST_TO_ADDR
// vc_control := control_computer ;
28879: LD_ADDR_OWVAR 38
28883: PUSH
28884: LD_INT 3
28886: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28887: LD_ADDR_OWVAR 40
28891: PUSH
28892: LD_INT 10
28894: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28895: LD_VAR 0 2
28899: PUSH
28900: LD_INT 1
28902: ARRAY
28903: PPUSH
28904: CALL_OW 310
28908: NOT
28909: IFFALSE 28956
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28911: CALL_OW 45
28915: PPUSH
28916: LD_VAR 0 2
28920: PUSH
28921: LD_INT 1
28923: ARRAY
28924: PPUSH
28925: CALL_OW 250
28929: PPUSH
28930: LD_VAR 0 2
28934: PUSH
28935: LD_INT 1
28937: ARRAY
28938: PPUSH
28939: CALL_OW 251
28943: PPUSH
28944: LD_INT 12
28946: PPUSH
28947: LD_INT 1
28949: PPUSH
28950: CALL_OW 50
28954: GO 28968
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28956: CALL_OW 45
28960: PPUSH
28961: LD_INT 1
28963: PPUSH
28964: CALL_OW 51
// end ;
28968: GO 28842
28970: POP
28971: POP
// end ;
28972: PPOPN 2
28974: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28975: LD_EXP 64
28979: PUSH
28980: LD_EXP 110
28984: AND
28985: IFFALSE 29207
28987: GO 28989
28989: DISABLE
28990: LD_INT 0
28992: PPUSH
28993: PPUSH
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28998: LD_ADDR_VAR 0 6
29002: PUSH
29003: LD_INT 22
29005: PUSH
29006: LD_OWVAR 2
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 21
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: LD_INT 23
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: ST_TO_ADDR
// if not tmp then
29052: LD_VAR 0 6
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29207
// s1 := rand ( 1 , 4 ) ;
29061: LD_ADDR_VAR 0 2
29065: PUSH
29066: LD_INT 1
29068: PPUSH
29069: LD_INT 4
29071: PPUSH
29072: CALL_OW 12
29076: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29077: LD_ADDR_VAR 0 4
29081: PUSH
29082: LD_VAR 0 6
29086: PUSH
29087: LD_INT 1
29089: ARRAY
29090: PPUSH
29091: LD_VAR 0 2
29095: PPUSH
29096: CALL_OW 259
29100: ST_TO_ADDR
// if s1 = 1 then
29101: LD_VAR 0 2
29105: PUSH
29106: LD_INT 1
29108: EQUAL
29109: IFFALSE 29129
// s2 := rand ( 2 , 4 ) else
29111: LD_ADDR_VAR 0 3
29115: PUSH
29116: LD_INT 2
29118: PPUSH
29119: LD_INT 4
29121: PPUSH
29122: CALL_OW 12
29126: ST_TO_ADDR
29127: GO 29137
// s2 := 1 ;
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_INT 1
29136: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29137: LD_ADDR_VAR 0 5
29141: PUSH
29142: LD_VAR 0 6
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: PPUSH
29151: LD_VAR 0 3
29155: PPUSH
29156: CALL_OW 259
29160: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29161: LD_VAR 0 6
29165: PUSH
29166: LD_INT 1
29168: ARRAY
29169: PPUSH
29170: LD_VAR 0 2
29174: PPUSH
29175: LD_VAR 0 5
29179: PPUSH
29180: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29184: LD_VAR 0 6
29188: PUSH
29189: LD_INT 1
29191: ARRAY
29192: PPUSH
29193: LD_VAR 0 3
29197: PPUSH
29198: LD_VAR 0 4
29202: PPUSH
29203: CALL_OW 237
// end ;
29207: PPOPN 6
29209: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29210: LD_EXP 64
29214: PUSH
29215: LD_EXP 111
29219: AND
29220: IFFALSE 29299
29222: GO 29224
29224: DISABLE
29225: LD_INT 0
29227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29228: LD_ADDR_VAR 0 1
29232: PUSH
29233: LD_INT 22
29235: PUSH
29236: LD_OWVAR 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 30
29247: PUSH
29248: LD_INT 3
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PPUSH
29259: CALL_OW 69
29263: ST_TO_ADDR
// if not tmp then
29264: LD_VAR 0 1
29268: NOT
29269: IFFALSE 29273
// exit ;
29271: GO 29299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29273: LD_VAR 0 1
29277: PUSH
29278: LD_INT 1
29280: PPUSH
29281: LD_VAR 0 1
29285: PPUSH
29286: CALL_OW 12
29290: ARRAY
29291: PPUSH
29292: LD_INT 1
29294: PPUSH
29295: CALL_OW 234
// end ;
29299: PPOPN 1
29301: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29302: LD_EXP 64
29306: PUSH
29307: LD_EXP 112
29311: AND
29312: IFFALSE 29424
29314: GO 29316
29316: DISABLE
29317: LD_INT 0
29319: PPUSH
29320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29321: LD_ADDR_VAR 0 2
29325: PUSH
29326: LD_INT 22
29328: PUSH
29329: LD_OWVAR 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 30
29343: PUSH
29344: LD_INT 27
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 30
29353: PUSH
29354: LD_INT 26
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 30
29363: PUSH
29364: LD_INT 28
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PPUSH
29381: CALL_OW 69
29385: ST_TO_ADDR
// if not tmp then
29386: LD_VAR 0 2
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 29424
// for i in tmp do
29395: LD_ADDR_VAR 0 1
29399: PUSH
29400: LD_VAR 0 2
29404: PUSH
29405: FOR_IN
29406: IFFALSE 29422
// SetLives ( i , 1 ) ;
29408: LD_VAR 0 1
29412: PPUSH
29413: LD_INT 1
29415: PPUSH
29416: CALL_OW 234
29420: GO 29405
29422: POP
29423: POP
// end ;
29424: PPOPN 2
29426: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29427: LD_EXP 64
29431: PUSH
29432: LD_EXP 113
29436: AND
29437: IFFALSE 29711
29439: GO 29441
29441: DISABLE
29442: LD_INT 0
29444: PPUSH
29445: PPUSH
29446: PPUSH
// begin i := rand ( 1 , 7 ) ;
29447: LD_ADDR_VAR 0 1
29451: PUSH
29452: LD_INT 1
29454: PPUSH
29455: LD_INT 7
29457: PPUSH
29458: CALL_OW 12
29462: ST_TO_ADDR
// case i of 1 :
29463: LD_VAR 0 1
29467: PUSH
29468: LD_INT 1
29470: DOUBLE
29471: EQUAL
29472: IFTRUE 29476
29474: GO 29486
29476: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29477: LD_STRING earthquake(getX(game), 0, 32)
29479: PPUSH
29480: CALL_OW 559
29484: GO 29711
29486: LD_INT 2
29488: DOUBLE
29489: EQUAL
29490: IFTRUE 29494
29492: GO 29508
29494: POP
// begin ToLua ( displayStucuk(); ) ;
29495: LD_STRING displayStucuk();
29497: PPUSH
29498: CALL_OW 559
// ResetFog ;
29502: CALL_OW 335
// end ; 3 :
29506: GO 29711
29508: LD_INT 3
29510: DOUBLE
29511: EQUAL
29512: IFTRUE 29516
29514: GO 29620
29516: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29517: LD_ADDR_VAR 0 2
29521: PUSH
29522: LD_INT 22
29524: PUSH
29525: LD_OWVAR 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 25
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PPUSH
29548: CALL_OW 69
29552: ST_TO_ADDR
// if not tmp then
29553: LD_VAR 0 2
29557: NOT
29558: IFFALSE 29562
// exit ;
29560: GO 29711
// un := tmp [ rand ( 1 , tmp ) ] ;
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_VAR 0 2
29571: PUSH
29572: LD_INT 1
29574: PPUSH
29575: LD_VAR 0 2
29579: PPUSH
29580: CALL_OW 12
29584: ARRAY
29585: ST_TO_ADDR
// if Crawls ( un ) then
29586: LD_VAR 0 3
29590: PPUSH
29591: CALL_OW 318
29595: IFFALSE 29606
// ComWalk ( un ) ;
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29606: LD_VAR 0 3
29610: PPUSH
29611: LD_INT 8
29613: PPUSH
29614: CALL_OW 336
// end ; 4 :
29618: GO 29711
29620: LD_INT 4
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29689
29628: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29629: LD_ADDR_VAR 0 2
29633: PUSH
29634: LD_INT 22
29636: PUSH
29637: LD_OWVAR 2
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 30
29648: PUSH
29649: LD_INT 29
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PPUSH
29660: CALL_OW 69
29664: ST_TO_ADDR
// if not tmp then
29665: LD_VAR 0 2
29669: NOT
29670: IFFALSE 29674
// exit ;
29672: GO 29711
// DestroyUnit ( tmp [ 1 ] ) ;
29674: LD_VAR 0 2
29678: PUSH
29679: LD_INT 1
29681: ARRAY
29682: PPUSH
29683: CALL_OW 65
// end ; 5 .. 7 :
29687: GO 29711
29689: LD_INT 5
29691: DOUBLE
29692: GREATEREQUAL
29693: IFFALSE 29701
29695: LD_INT 7
29697: DOUBLE
29698: LESSEQUAL
29699: IFTRUE 29703
29701: GO 29710
29703: POP
// StreamSibBomb ; end ;
29704: CALL 25961 0 0
29708: GO 29711
29710: POP
// end ;
29711: PPOPN 3
29713: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29714: LD_EXP 64
29718: PUSH
29719: LD_EXP 114
29723: AND
29724: IFFALSE 29880
29726: GO 29728
29728: DISABLE
29729: LD_INT 0
29731: PPUSH
29732: PPUSH
29733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29734: LD_ADDR_VAR 0 2
29738: PUSH
29739: LD_INT 81
29741: PUSH
29742: LD_OWVAR 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: LD_INT 21
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 21
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PPUSH
29783: CALL_OW 69
29787: ST_TO_ADDR
// if not tmp then
29788: LD_VAR 0 2
29792: NOT
29793: IFFALSE 29797
// exit ;
29795: GO 29880
// p := 0 ;
29797: LD_ADDR_VAR 0 3
29801: PUSH
29802: LD_INT 0
29804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29805: LD_INT 35
29807: PPUSH
29808: CALL_OW 67
// p := p + 1 ;
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_VAR 0 3
29821: PUSH
29822: LD_INT 1
29824: PLUS
29825: ST_TO_ADDR
// for i in tmp do
29826: LD_ADDR_VAR 0 1
29830: PUSH
29831: LD_VAR 0 2
29835: PUSH
29836: FOR_IN
29837: IFFALSE 29868
// if GetLives ( i ) < 1000 then
29839: LD_VAR 0 1
29843: PPUSH
29844: CALL_OW 256
29848: PUSH
29849: LD_INT 1000
29851: LESS
29852: IFFALSE 29866
// SetLives ( i , 1000 ) ;
29854: LD_VAR 0 1
29858: PPUSH
29859: LD_INT 1000
29861: PPUSH
29862: CALL_OW 234
29866: GO 29836
29868: POP
29869: POP
// until p > 20 ;
29870: LD_VAR 0 3
29874: PUSH
29875: LD_INT 20
29877: GREATER
29878: IFFALSE 29805
// end ;
29880: PPOPN 3
29882: END
// every 0 0$1 trigger StreamModeActive and sTime do
29883: LD_EXP 64
29887: PUSH
29888: LD_EXP 115
29892: AND
29893: IFFALSE 29928
29895: GO 29897
29897: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29898: LD_INT 28
29900: PPUSH
29901: LD_OWVAR 2
29905: PPUSH
29906: LD_INT 2
29908: PPUSH
29909: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29913: LD_INT 30
29915: PPUSH
29916: LD_OWVAR 2
29920: PPUSH
29921: LD_INT 2
29923: PPUSH
29924: CALL_OW 322
// end ;
29928: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29929: LD_EXP 64
29933: PUSH
29934: LD_EXP 116
29938: AND
29939: IFFALSE 30060
29941: GO 29943
29943: DISABLE
29944: LD_INT 0
29946: PPUSH
29947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29948: LD_ADDR_VAR 0 2
29952: PUSH
29953: LD_INT 22
29955: PUSH
29956: LD_OWVAR 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 21
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 3
29977: PUSH
29978: LD_INT 23
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: PPUSH
29997: CALL_OW 69
30001: ST_TO_ADDR
// if not tmp then
30002: LD_VAR 0 2
30006: NOT
30007: IFFALSE 30011
// exit ;
30009: GO 30060
// for i in tmp do
30011: LD_ADDR_VAR 0 1
30015: PUSH
30016: LD_VAR 0 2
30020: PUSH
30021: FOR_IN
30022: IFFALSE 30058
// begin if Crawls ( i ) then
30024: LD_VAR 0 1
30028: PPUSH
30029: CALL_OW 318
30033: IFFALSE 30044
// ComWalk ( i ) ;
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 138
// SetClass ( i , 2 ) ;
30044: LD_VAR 0 1
30048: PPUSH
30049: LD_INT 2
30051: PPUSH
30052: CALL_OW 336
// end ;
30056: GO 30021
30058: POP
30059: POP
// end ;
30060: PPOPN 2
30062: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30063: LD_EXP 64
30067: PUSH
30068: LD_EXP 117
30072: AND
30073: IFFALSE 30354
30075: GO 30077
30077: DISABLE
30078: LD_INT 0
30080: PPUSH
30081: PPUSH
30082: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30083: LD_OWVAR 2
30087: PPUSH
30088: LD_INT 9
30090: PPUSH
30091: LD_INT 1
30093: PPUSH
30094: LD_INT 1
30096: PPUSH
30097: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30101: LD_INT 9
30103: PPUSH
30104: LD_OWVAR 2
30108: PPUSH
30109: CALL_OW 343
// uc_side := 9 ;
30113: LD_ADDR_OWVAR 20
30117: PUSH
30118: LD_INT 9
30120: ST_TO_ADDR
// uc_nation := 2 ;
30121: LD_ADDR_OWVAR 21
30125: PUSH
30126: LD_INT 2
30128: ST_TO_ADDR
// hc_name := Dark Warrior ;
30129: LD_ADDR_OWVAR 26
30133: PUSH
30134: LD_STRING Dark Warrior
30136: ST_TO_ADDR
// hc_gallery :=  ;
30137: LD_ADDR_OWVAR 33
30141: PUSH
30142: LD_STRING 
30144: ST_TO_ADDR
// hc_noskilllimit := true ;
30145: LD_ADDR_OWVAR 76
30149: PUSH
30150: LD_INT 1
30152: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30153: LD_ADDR_OWVAR 31
30157: PUSH
30158: LD_INT 30
30160: PUSH
30161: LD_INT 30
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 30
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: ST_TO_ADDR
// un := CreateHuman ;
30176: LD_ADDR_VAR 0 3
30180: PUSH
30181: CALL_OW 44
30185: ST_TO_ADDR
// hc_noskilllimit := false ;
30186: LD_ADDR_OWVAR 76
30190: PUSH
30191: LD_INT 0
30193: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30194: LD_VAR 0 3
30198: PPUSH
30199: LD_INT 1
30201: PPUSH
30202: CALL_OW 51
// p := 0 ;
30206: LD_ADDR_VAR 0 2
30210: PUSH
30211: LD_INT 0
30213: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30214: LD_INT 35
30216: PPUSH
30217: CALL_OW 67
// p := p + 1 ;
30221: LD_ADDR_VAR 0 2
30225: PUSH
30226: LD_VAR 0 2
30230: PUSH
30231: LD_INT 1
30233: PLUS
30234: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30235: LD_VAR 0 3
30239: PPUSH
30240: CALL_OW 256
30244: PUSH
30245: LD_INT 1000
30247: LESS
30248: IFFALSE 30262
// SetLives ( un , 1000 ) ;
30250: LD_VAR 0 3
30254: PPUSH
30255: LD_INT 1000
30257: PPUSH
30258: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30262: LD_VAR 0 3
30266: PPUSH
30267: LD_INT 81
30269: PUSH
30270: LD_OWVAR 2
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 91
30281: PUSH
30282: LD_VAR 0 3
30286: PUSH
30287: LD_INT 30
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PPUSH
30299: CALL_OW 69
30303: PPUSH
30304: LD_VAR 0 3
30308: PPUSH
30309: CALL_OW 74
30313: PPUSH
30314: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30318: LD_VAR 0 2
30322: PUSH
30323: LD_INT 60
30325: GREATER
30326: PUSH
30327: LD_VAR 0 3
30331: PPUSH
30332: CALL_OW 301
30336: OR
30337: IFFALSE 30214
// if un then
30339: LD_VAR 0 3
30343: IFFALSE 30354
// RemoveUnit ( un ) ;
30345: LD_VAR 0 3
30349: PPUSH
30350: CALL_OW 64
// end ;
30354: PPOPN 3
30356: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30357: LD_INT 0
30359: PPUSH
// case cmd of 301 :
30360: LD_VAR 0 1
30364: PUSH
30365: LD_INT 301
30367: DOUBLE
30368: EQUAL
30369: IFTRUE 30373
30371: GO 30405
30373: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30374: LD_VAR 0 6
30378: PPUSH
30379: LD_VAR 0 7
30383: PPUSH
30384: LD_VAR 0 8
30388: PPUSH
30389: LD_VAR 0 4
30393: PPUSH
30394: LD_VAR 0 5
30398: PPUSH
30399: CALL 31606 0 5
30403: GO 30526
30405: LD_INT 302
30407: DOUBLE
30408: EQUAL
30409: IFTRUE 30413
30411: GO 30450
30413: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30414: LD_VAR 0 6
30418: PPUSH
30419: LD_VAR 0 7
30423: PPUSH
30424: LD_VAR 0 8
30428: PPUSH
30429: LD_VAR 0 9
30433: PPUSH
30434: LD_VAR 0 4
30438: PPUSH
30439: LD_VAR 0 5
30443: PPUSH
30444: CALL 31697 0 6
30448: GO 30526
30450: LD_INT 303
30452: DOUBLE
30453: EQUAL
30454: IFTRUE 30458
30456: GO 30495
30458: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30459: LD_VAR 0 6
30463: PPUSH
30464: LD_VAR 0 7
30468: PPUSH
30469: LD_VAR 0 8
30473: PPUSH
30474: LD_VAR 0 9
30478: PPUSH
30479: LD_VAR 0 4
30483: PPUSH
30484: LD_VAR 0 5
30488: PPUSH
30489: CALL 30531 0 6
30493: GO 30526
30495: LD_INT 304
30497: DOUBLE
30498: EQUAL
30499: IFTRUE 30503
30501: GO 30525
30503: POP
// hHackTeleport ( unit , x , y ) ; end ;
30504: LD_VAR 0 2
30508: PPUSH
30509: LD_VAR 0 4
30513: PPUSH
30514: LD_VAR 0 5
30518: PPUSH
30519: CALL 32290 0 3
30523: GO 30526
30525: POP
// end ;
30526: LD_VAR 0 12
30530: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30531: LD_INT 0
30533: PPUSH
30534: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30535: LD_VAR 0 1
30539: PUSH
30540: LD_INT 1
30542: LESS
30543: PUSH
30544: LD_VAR 0 1
30548: PUSH
30549: LD_INT 3
30551: GREATER
30552: OR
30553: PUSH
30554: LD_VAR 0 5
30558: PPUSH
30559: LD_VAR 0 6
30563: PPUSH
30564: CALL_OW 428
30568: OR
30569: IFFALSE 30573
// exit ;
30571: GO 31293
// uc_side := your_side ;
30573: LD_ADDR_OWVAR 20
30577: PUSH
30578: LD_OWVAR 2
30582: ST_TO_ADDR
// uc_nation := nation ;
30583: LD_ADDR_OWVAR 21
30587: PUSH
30588: LD_VAR 0 1
30592: ST_TO_ADDR
// bc_level = 1 ;
30593: LD_ADDR_OWVAR 43
30597: PUSH
30598: LD_INT 1
30600: ST_TO_ADDR
// case btype of 1 :
30601: LD_VAR 0 2
30605: PUSH
30606: LD_INT 1
30608: DOUBLE
30609: EQUAL
30610: IFTRUE 30614
30612: GO 30625
30614: POP
// bc_type := b_depot ; 2 :
30615: LD_ADDR_OWVAR 42
30619: PUSH
30620: LD_INT 0
30622: ST_TO_ADDR
30623: GO 31237
30625: LD_INT 2
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30644
30633: POP
// bc_type := b_warehouse ; 3 :
30634: LD_ADDR_OWVAR 42
30638: PUSH
30639: LD_INT 1
30641: ST_TO_ADDR
30642: GO 31237
30644: LD_INT 3
30646: DOUBLE
30647: EQUAL
30648: IFTRUE 30652
30650: GO 30663
30652: POP
// bc_type := b_lab ; 4 .. 9 :
30653: LD_ADDR_OWVAR 42
30657: PUSH
30658: LD_INT 6
30660: ST_TO_ADDR
30661: GO 31237
30663: LD_INT 4
30665: DOUBLE
30666: GREATEREQUAL
30667: IFFALSE 30675
30669: LD_INT 9
30671: DOUBLE
30672: LESSEQUAL
30673: IFTRUE 30677
30675: GO 30729
30677: POP
// begin bc_type := b_lab_half ;
30678: LD_ADDR_OWVAR 42
30682: PUSH
30683: LD_INT 7
30685: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30686: LD_ADDR_OWVAR 44
30690: PUSH
30691: LD_INT 10
30693: PUSH
30694: LD_INT 11
30696: PUSH
30697: LD_INT 12
30699: PUSH
30700: LD_INT 15
30702: PUSH
30703: LD_INT 14
30705: PUSH
30706: LD_INT 13
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: PUSH
30717: LD_VAR 0 2
30721: PUSH
30722: LD_INT 3
30724: MINUS
30725: ARRAY
30726: ST_TO_ADDR
// end ; 10 .. 13 :
30727: GO 31237
30729: LD_INT 10
30731: DOUBLE
30732: GREATEREQUAL
30733: IFFALSE 30741
30735: LD_INT 13
30737: DOUBLE
30738: LESSEQUAL
30739: IFTRUE 30743
30741: GO 30820
30743: POP
// begin bc_type := b_lab_full ;
30744: LD_ADDR_OWVAR 42
30748: PUSH
30749: LD_INT 8
30751: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30752: LD_ADDR_OWVAR 44
30756: PUSH
30757: LD_INT 10
30759: PUSH
30760: LD_INT 12
30762: PUSH
30763: LD_INT 14
30765: PUSH
30766: LD_INT 13
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: PUSH
30775: LD_VAR 0 2
30779: PUSH
30780: LD_INT 9
30782: MINUS
30783: ARRAY
30784: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30785: LD_ADDR_OWVAR 45
30789: PUSH
30790: LD_INT 11
30792: PUSH
30793: LD_INT 15
30795: PUSH
30796: LD_INT 12
30798: PUSH
30799: LD_INT 15
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: PUSH
30808: LD_VAR 0 2
30812: PUSH
30813: LD_INT 9
30815: MINUS
30816: ARRAY
30817: ST_TO_ADDR
// end ; 14 :
30818: GO 31237
30820: LD_INT 14
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 30839
30828: POP
// bc_type := b_workshop ; 15 :
30829: LD_ADDR_OWVAR 42
30833: PUSH
30834: LD_INT 2
30836: ST_TO_ADDR
30837: GO 31237
30839: LD_INT 15
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30858
30847: POP
// bc_type := b_factory ; 16 :
30848: LD_ADDR_OWVAR 42
30852: PUSH
30853: LD_INT 3
30855: ST_TO_ADDR
30856: GO 31237
30858: LD_INT 16
30860: DOUBLE
30861: EQUAL
30862: IFTRUE 30866
30864: GO 30877
30866: POP
// bc_type := b_ext_gun ; 17 :
30867: LD_ADDR_OWVAR 42
30871: PUSH
30872: LD_INT 17
30874: ST_TO_ADDR
30875: GO 31237
30877: LD_INT 17
30879: DOUBLE
30880: EQUAL
30881: IFTRUE 30885
30883: GO 30913
30885: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30886: LD_ADDR_OWVAR 42
30890: PUSH
30891: LD_INT 19
30893: PUSH
30894: LD_INT 23
30896: PUSH
30897: LD_INT 19
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: PUSH
30905: LD_VAR 0 1
30909: ARRAY
30910: ST_TO_ADDR
30911: GO 31237
30913: LD_INT 18
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30921
30919: GO 30932
30921: POP
// bc_type := b_ext_radar ; 19 :
30922: LD_ADDR_OWVAR 42
30926: PUSH
30927: LD_INT 20
30929: ST_TO_ADDR
30930: GO 31237
30932: LD_INT 19
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30951
30940: POP
// bc_type := b_ext_radio ; 20 :
30941: LD_ADDR_OWVAR 42
30945: PUSH
30946: LD_INT 22
30948: ST_TO_ADDR
30949: GO 31237
30951: LD_INT 20
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30970
30959: POP
// bc_type := b_ext_siberium ; 21 :
30960: LD_ADDR_OWVAR 42
30964: PUSH
30965: LD_INT 21
30967: ST_TO_ADDR
30968: GO 31237
30970: LD_INT 21
30972: DOUBLE
30973: EQUAL
30974: IFTRUE 30978
30976: GO 30989
30978: POP
// bc_type := b_ext_computer ; 22 :
30979: LD_ADDR_OWVAR 42
30983: PUSH
30984: LD_INT 24
30986: ST_TO_ADDR
30987: GO 31237
30989: LD_INT 22
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 30997
30995: GO 31008
30997: POP
// bc_type := b_ext_track ; 23 :
30998: LD_ADDR_OWVAR 42
31002: PUSH
31003: LD_INT 16
31005: ST_TO_ADDR
31006: GO 31237
31008: LD_INT 23
31010: DOUBLE
31011: EQUAL
31012: IFTRUE 31016
31014: GO 31027
31016: POP
// bc_type := b_ext_laser ; 24 :
31017: LD_ADDR_OWVAR 42
31021: PUSH
31022: LD_INT 25
31024: ST_TO_ADDR
31025: GO 31237
31027: LD_INT 24
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31046
31035: POP
// bc_type := b_control_tower ; 25 :
31036: LD_ADDR_OWVAR 42
31040: PUSH
31041: LD_INT 36
31043: ST_TO_ADDR
31044: GO 31237
31046: LD_INT 25
31048: DOUBLE
31049: EQUAL
31050: IFTRUE 31054
31052: GO 31065
31054: POP
// bc_type := b_breastwork ; 26 :
31055: LD_ADDR_OWVAR 42
31059: PUSH
31060: LD_INT 31
31062: ST_TO_ADDR
31063: GO 31237
31065: LD_INT 26
31067: DOUBLE
31068: EQUAL
31069: IFTRUE 31073
31071: GO 31084
31073: POP
// bc_type := b_bunker ; 27 :
31074: LD_ADDR_OWVAR 42
31078: PUSH
31079: LD_INT 32
31081: ST_TO_ADDR
31082: GO 31237
31084: LD_INT 27
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31103
31092: POP
// bc_type := b_turret ; 28 :
31093: LD_ADDR_OWVAR 42
31097: PUSH
31098: LD_INT 33
31100: ST_TO_ADDR
31101: GO 31237
31103: LD_INT 28
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31122
31111: POP
// bc_type := b_armoury ; 29 :
31112: LD_ADDR_OWVAR 42
31116: PUSH
31117: LD_INT 4
31119: ST_TO_ADDR
31120: GO 31237
31122: LD_INT 29
31124: DOUBLE
31125: EQUAL
31126: IFTRUE 31130
31128: GO 31141
31130: POP
// bc_type := b_barracks ; 30 :
31131: LD_ADDR_OWVAR 42
31135: PUSH
31136: LD_INT 5
31138: ST_TO_ADDR
31139: GO 31237
31141: LD_INT 30
31143: DOUBLE
31144: EQUAL
31145: IFTRUE 31149
31147: GO 31160
31149: POP
// bc_type := b_solar_power ; 31 :
31150: LD_ADDR_OWVAR 42
31154: PUSH
31155: LD_INT 27
31157: ST_TO_ADDR
31158: GO 31237
31160: LD_INT 31
31162: DOUBLE
31163: EQUAL
31164: IFTRUE 31168
31166: GO 31179
31168: POP
// bc_type := b_oil_power ; 32 :
31169: LD_ADDR_OWVAR 42
31173: PUSH
31174: LD_INT 26
31176: ST_TO_ADDR
31177: GO 31237
31179: LD_INT 32
31181: DOUBLE
31182: EQUAL
31183: IFTRUE 31187
31185: GO 31198
31187: POP
// bc_type := b_siberite_power ; 33 :
31188: LD_ADDR_OWVAR 42
31192: PUSH
31193: LD_INT 28
31195: ST_TO_ADDR
31196: GO 31237
31198: LD_INT 33
31200: DOUBLE
31201: EQUAL
31202: IFTRUE 31206
31204: GO 31217
31206: POP
// bc_type := b_oil_mine ; 34 :
31207: LD_ADDR_OWVAR 42
31211: PUSH
31212: LD_INT 29
31214: ST_TO_ADDR
31215: GO 31237
31217: LD_INT 34
31219: DOUBLE
31220: EQUAL
31221: IFTRUE 31225
31223: GO 31236
31225: POP
// bc_type := b_siberite_mine ; end ;
31226: LD_ADDR_OWVAR 42
31230: PUSH
31231: LD_INT 30
31233: ST_TO_ADDR
31234: GO 31237
31236: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31237: LD_ADDR_VAR 0 8
31241: PUSH
31242: LD_VAR 0 5
31246: PPUSH
31247: LD_VAR 0 6
31251: PPUSH
31252: LD_VAR 0 3
31256: PPUSH
31257: CALL_OW 47
31261: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31262: LD_OWVAR 42
31266: PUSH
31267: LD_INT 32
31269: PUSH
31270: LD_INT 33
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: IN
31277: IFFALSE 31293
// PlaceWeaponTurret ( b , weapon ) ;
31279: LD_VAR 0 8
31283: PPUSH
31284: LD_VAR 0 4
31288: PPUSH
31289: CALL_OW 431
// end ;
31293: LD_VAR 0 7
31297: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31298: LD_INT 0
31300: PPUSH
31301: PPUSH
31302: PPUSH
31303: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31304: LD_ADDR_VAR 0 4
31308: PUSH
31309: LD_INT 22
31311: PUSH
31312: LD_OWVAR 2
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: LD_INT 30
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 30
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PPUSH
31353: CALL_OW 69
31357: ST_TO_ADDR
// if not tmp then
31358: LD_VAR 0 4
31362: NOT
31363: IFFALSE 31367
// exit ;
31365: GO 31426
// for i in tmp do
31367: LD_ADDR_VAR 0 2
31371: PUSH
31372: LD_VAR 0 4
31376: PUSH
31377: FOR_IN
31378: IFFALSE 31424
// for j = 1 to 3 do
31380: LD_ADDR_VAR 0 3
31384: PUSH
31385: DOUBLE
31386: LD_INT 1
31388: DEC
31389: ST_TO_ADDR
31390: LD_INT 3
31392: PUSH
31393: FOR_TO
31394: IFFALSE 31420
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31396: LD_VAR 0 2
31400: PPUSH
31401: CALL_OW 274
31405: PPUSH
31406: LD_VAR 0 3
31410: PPUSH
31411: LD_INT 99999
31413: PPUSH
31414: CALL_OW 277
31418: GO 31393
31420: POP
31421: POP
31422: GO 31377
31424: POP
31425: POP
// end ;
31426: LD_VAR 0 1
31430: RET
// export function hHackSetLevel10 ; var i , j ; begin
31431: LD_INT 0
31433: PPUSH
31434: PPUSH
31435: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31436: LD_ADDR_VAR 0 2
31440: PUSH
31441: LD_INT 21
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PPUSH
31451: CALL_OW 69
31455: PUSH
31456: FOR_IN
31457: IFFALSE 31509
// if IsSelected ( i ) then
31459: LD_VAR 0 2
31463: PPUSH
31464: CALL_OW 306
31468: IFFALSE 31507
// begin for j := 1 to 4 do
31470: LD_ADDR_VAR 0 3
31474: PUSH
31475: DOUBLE
31476: LD_INT 1
31478: DEC
31479: ST_TO_ADDR
31480: LD_INT 4
31482: PUSH
31483: FOR_TO
31484: IFFALSE 31505
// SetSkill ( i , j , 10 ) ;
31486: LD_VAR 0 2
31490: PPUSH
31491: LD_VAR 0 3
31495: PPUSH
31496: LD_INT 10
31498: PPUSH
31499: CALL_OW 237
31503: GO 31483
31505: POP
31506: POP
// end ;
31507: GO 31456
31509: POP
31510: POP
// end ;
31511: LD_VAR 0 1
31515: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31516: LD_INT 0
31518: PPUSH
31519: PPUSH
31520: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31521: LD_ADDR_VAR 0 2
31525: PUSH
31526: LD_INT 22
31528: PUSH
31529: LD_OWVAR 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 21
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PPUSH
31552: CALL_OW 69
31556: PUSH
31557: FOR_IN
31558: IFFALSE 31599
// begin for j := 1 to 4 do
31560: LD_ADDR_VAR 0 3
31564: PUSH
31565: DOUBLE
31566: LD_INT 1
31568: DEC
31569: ST_TO_ADDR
31570: LD_INT 4
31572: PUSH
31573: FOR_TO
31574: IFFALSE 31595
// SetSkill ( i , j , 10 ) ;
31576: LD_VAR 0 2
31580: PPUSH
31581: LD_VAR 0 3
31585: PPUSH
31586: LD_INT 10
31588: PPUSH
31589: CALL_OW 237
31593: GO 31573
31595: POP
31596: POP
// end ;
31597: GO 31557
31599: POP
31600: POP
// end ;
31601: LD_VAR 0 1
31605: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31606: LD_INT 0
31608: PPUSH
// uc_side := your_side ;
31609: LD_ADDR_OWVAR 20
31613: PUSH
31614: LD_OWVAR 2
31618: ST_TO_ADDR
// uc_nation := nation ;
31619: LD_ADDR_OWVAR 21
31623: PUSH
31624: LD_VAR 0 1
31628: ST_TO_ADDR
// InitHc ;
31629: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31633: LD_INT 0
31635: PPUSH
31636: LD_VAR 0 2
31640: PPUSH
31641: LD_VAR 0 3
31645: PPUSH
31646: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31650: LD_VAR 0 4
31654: PPUSH
31655: LD_VAR 0 5
31659: PPUSH
31660: CALL_OW 428
31664: PUSH
31665: LD_INT 0
31667: EQUAL
31668: IFFALSE 31692
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31670: CALL_OW 44
31674: PPUSH
31675: LD_VAR 0 4
31679: PPUSH
31680: LD_VAR 0 5
31684: PPUSH
31685: LD_INT 1
31687: PPUSH
31688: CALL_OW 48
// end ;
31692: LD_VAR 0 6
31696: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31697: LD_INT 0
31699: PPUSH
31700: PPUSH
// uc_side := your_side ;
31701: LD_ADDR_OWVAR 20
31705: PUSH
31706: LD_OWVAR 2
31710: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31711: LD_VAR 0 1
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 3
31724: PUSH
31725: LD_INT 4
31727: PUSH
31728: LD_INT 5
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: IN
31738: IFFALSE 31750
// uc_nation := nation_american else
31740: LD_ADDR_OWVAR 21
31744: PUSH
31745: LD_INT 1
31747: ST_TO_ADDR
31748: GO 31793
// if chassis in [ 11 , 12 , 13 , 14 ] then
31750: LD_VAR 0 1
31754: PUSH
31755: LD_INT 11
31757: PUSH
31758: LD_INT 12
31760: PUSH
31761: LD_INT 13
31763: PUSH
31764: LD_INT 14
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: IN
31773: IFFALSE 31785
// uc_nation := nation_arabian else
31775: LD_ADDR_OWVAR 21
31779: PUSH
31780: LD_INT 2
31782: ST_TO_ADDR
31783: GO 31793
// uc_nation := nation_russian ;
31785: LD_ADDR_OWVAR 21
31789: PUSH
31790: LD_INT 3
31792: ST_TO_ADDR
// vc_chassis := chassis ;
31793: LD_ADDR_OWVAR 37
31797: PUSH
31798: LD_VAR 0 1
31802: ST_TO_ADDR
// vc_engine := engine ;
31803: LD_ADDR_OWVAR 39
31807: PUSH
31808: LD_VAR 0 2
31812: ST_TO_ADDR
// vc_control := control ;
31813: LD_ADDR_OWVAR 38
31817: PUSH
31818: LD_VAR 0 3
31822: ST_TO_ADDR
// vc_weapon := weapon ;
31823: LD_ADDR_OWVAR 40
31827: PUSH
31828: LD_VAR 0 4
31832: ST_TO_ADDR
// un := CreateVehicle ;
31833: LD_ADDR_VAR 0 8
31837: PUSH
31838: CALL_OW 45
31842: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31843: LD_VAR 0 8
31847: PPUSH
31848: LD_INT 0
31850: PPUSH
31851: LD_INT 5
31853: PPUSH
31854: CALL_OW 12
31858: PPUSH
31859: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31863: LD_VAR 0 8
31867: PPUSH
31868: LD_VAR 0 5
31872: PPUSH
31873: LD_VAR 0 6
31877: PPUSH
31878: LD_INT 1
31880: PPUSH
31881: CALL_OW 48
// end ;
31885: LD_VAR 0 7
31889: RET
// export hInvincible ; every 1 do
31890: GO 31892
31892: DISABLE
// hInvincible := [ ] ;
31893: LD_ADDR_EXP 118
31897: PUSH
31898: EMPTY
31899: ST_TO_ADDR
31900: END
// every 10 do var i ;
31901: GO 31903
31903: DISABLE
31904: LD_INT 0
31906: PPUSH
// begin enable ;
31907: ENABLE
// if not hInvincible then
31908: LD_EXP 118
31912: NOT
31913: IFFALSE 31917
// exit ;
31915: GO 31961
// for i in hInvincible do
31917: LD_ADDR_VAR 0 1
31921: PUSH
31922: LD_EXP 118
31926: PUSH
31927: FOR_IN
31928: IFFALSE 31959
// if GetLives ( i ) < 1000 then
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 256
31939: PUSH
31940: LD_INT 1000
31942: LESS
31943: IFFALSE 31957
// SetLives ( i , 1000 ) ;
31945: LD_VAR 0 1
31949: PPUSH
31950: LD_INT 1000
31952: PPUSH
31953: CALL_OW 234
31957: GO 31927
31959: POP
31960: POP
// end ;
31961: PPOPN 1
31963: END
// export function hHackInvincible ; var i ; begin
31964: LD_INT 0
31966: PPUSH
31967: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31968: LD_ADDR_VAR 0 2
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: LD_INT 21
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 21
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: PPUSH
32001: CALL_OW 69
32005: PUSH
32006: FOR_IN
32007: IFFALSE 32068
// if IsSelected ( i ) then
32009: LD_VAR 0 2
32013: PPUSH
32014: CALL_OW 306
32018: IFFALSE 32066
// begin if i in hInvincible then
32020: LD_VAR 0 2
32024: PUSH
32025: LD_EXP 118
32029: IN
32030: IFFALSE 32050
// hInvincible := hInvincible diff i else
32032: LD_ADDR_EXP 118
32036: PUSH
32037: LD_EXP 118
32041: PUSH
32042: LD_VAR 0 2
32046: DIFF
32047: ST_TO_ADDR
32048: GO 32066
// hInvincible := hInvincible union i ;
32050: LD_ADDR_EXP 118
32054: PUSH
32055: LD_EXP 118
32059: PUSH
32060: LD_VAR 0 2
32064: UNION
32065: ST_TO_ADDR
// end ;
32066: GO 32006
32068: POP
32069: POP
// end ;
32070: LD_VAR 0 1
32074: RET
// export function hHackInvisible ; var i , j ; begin
32075: LD_INT 0
32077: PPUSH
32078: PPUSH
32079: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32080: LD_ADDR_VAR 0 2
32084: PUSH
32085: LD_INT 21
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PPUSH
32095: CALL_OW 69
32099: PUSH
32100: FOR_IN
32101: IFFALSE 32125
// if IsSelected ( i ) then
32103: LD_VAR 0 2
32107: PPUSH
32108: CALL_OW 306
32112: IFFALSE 32123
// ComForceInvisible ( i ) ;
32114: LD_VAR 0 2
32118: PPUSH
32119: CALL_OW 496
32123: GO 32100
32125: POP
32126: POP
// end ;
32127: LD_VAR 0 1
32131: RET
// export function hHackChangeYourSide ; begin
32132: LD_INT 0
32134: PPUSH
// if your_side = 8 then
32135: LD_OWVAR 2
32139: PUSH
32140: LD_INT 8
32142: EQUAL
32143: IFFALSE 32155
// your_side := 0 else
32145: LD_ADDR_OWVAR 2
32149: PUSH
32150: LD_INT 0
32152: ST_TO_ADDR
32153: GO 32169
// your_side := your_side + 1 ;
32155: LD_ADDR_OWVAR 2
32159: PUSH
32160: LD_OWVAR 2
32164: PUSH
32165: LD_INT 1
32167: PLUS
32168: ST_TO_ADDR
// end ;
32169: LD_VAR 0 1
32173: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32174: LD_INT 0
32176: PPUSH
32177: PPUSH
32178: PPUSH
// for i in all_units do
32179: LD_ADDR_VAR 0 2
32183: PUSH
32184: LD_OWVAR 3
32188: PUSH
32189: FOR_IN
32190: IFFALSE 32268
// if IsSelected ( i ) then
32192: LD_VAR 0 2
32196: PPUSH
32197: CALL_OW 306
32201: IFFALSE 32266
// begin j := GetSide ( i ) ;
32203: LD_ADDR_VAR 0 3
32207: PUSH
32208: LD_VAR 0 2
32212: PPUSH
32213: CALL_OW 255
32217: ST_TO_ADDR
// if j = 8 then
32218: LD_VAR 0 3
32222: PUSH
32223: LD_INT 8
32225: EQUAL
32226: IFFALSE 32238
// j := 0 else
32228: LD_ADDR_VAR 0 3
32232: PUSH
32233: LD_INT 0
32235: ST_TO_ADDR
32236: GO 32252
// j := j + 1 ;
32238: LD_ADDR_VAR 0 3
32242: PUSH
32243: LD_VAR 0 3
32247: PUSH
32248: LD_INT 1
32250: PLUS
32251: ST_TO_ADDR
// SetSide ( i , j ) ;
32252: LD_VAR 0 2
32256: PPUSH
32257: LD_VAR 0 3
32261: PPUSH
32262: CALL_OW 235
// end ;
32266: GO 32189
32268: POP
32269: POP
// end ;
32270: LD_VAR 0 1
32274: RET
// export function hHackFog ; begin
32275: LD_INT 0
32277: PPUSH
// FogOff ( true ) ;
32278: LD_INT 1
32280: PPUSH
32281: CALL_OW 344
// end ;
32285: LD_VAR 0 1
32289: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32290: LD_INT 0
32292: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32293: LD_VAR 0 1
32297: PPUSH
32298: LD_VAR 0 2
32302: PPUSH
32303: LD_VAR 0 3
32307: PPUSH
32308: LD_INT 1
32310: PPUSH
32311: LD_INT 1
32313: PPUSH
32314: CALL_OW 483
// CenterOnXY ( x , y ) ;
32318: LD_VAR 0 2
32322: PPUSH
32323: LD_VAR 0 3
32327: PPUSH
32328: CALL_OW 84
// end ; end_of_file
32332: LD_VAR 0 4
32336: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32337: LD_INT 0
32339: PPUSH
32340: PPUSH
32341: PPUSH
32342: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32343: LD_VAR 0 1
32347: PPUSH
32348: CALL_OW 264
32352: PUSH
32353: LD_EXP 52
32357: EQUAL
32358: IFFALSE 32430
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32360: LD_INT 68
32362: PPUSH
32363: LD_VAR 0 1
32367: PPUSH
32368: CALL_OW 255
32372: PPUSH
32373: CALL_OW 321
32377: PUSH
32378: LD_INT 2
32380: EQUAL
32381: IFFALSE 32393
// eff := 70 else
32383: LD_ADDR_VAR 0 4
32387: PUSH
32388: LD_INT 70
32390: ST_TO_ADDR
32391: GO 32401
// eff := 30 ;
32393: LD_ADDR_VAR 0 4
32397: PUSH
32398: LD_INT 30
32400: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 250
32410: PPUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: CALL_OW 251
32420: PPUSH
32421: LD_VAR 0 4
32425: PPUSH
32426: CALL_OW 495
// end ; end ;
32430: LD_VAR 0 2
32434: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32435: LD_INT 0
32437: PPUSH
// end ;
32438: LD_VAR 0 4
32442: RET
// export function SOS_Command ( cmd ) ; begin
32443: LD_INT 0
32445: PPUSH
// end ;
32446: LD_VAR 0 2
32450: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32451: LD_INT 0
32453: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32454: LD_VAR 0 1
32458: PUSH
32459: LD_INT 250
32461: EQUAL
32462: PUSH
32463: LD_VAR 0 2
32467: PPUSH
32468: CALL_OW 264
32472: PUSH
32473: LD_EXP 55
32477: EQUAL
32478: AND
32479: IFFALSE 32500
// MinerPlaceMine ( unit , x , y ) ;
32481: LD_VAR 0 2
32485: PPUSH
32486: LD_VAR 0 4
32490: PPUSH
32491: LD_VAR 0 5
32495: PPUSH
32496: CALL 34841 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32500: LD_VAR 0 1
32504: PUSH
32505: LD_INT 251
32507: EQUAL
32508: PUSH
32509: LD_VAR 0 2
32513: PPUSH
32514: CALL_OW 264
32518: PUSH
32519: LD_EXP 55
32523: EQUAL
32524: AND
32525: IFFALSE 32546
// MinerDetonateMine ( unit , x , y ) ;
32527: LD_VAR 0 2
32531: PPUSH
32532: LD_VAR 0 4
32536: PPUSH
32537: LD_VAR 0 5
32541: PPUSH
32542: CALL 35118 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32546: LD_VAR 0 1
32550: PUSH
32551: LD_INT 252
32553: EQUAL
32554: PUSH
32555: LD_VAR 0 2
32559: PPUSH
32560: CALL_OW 264
32564: PUSH
32565: LD_EXP 55
32569: EQUAL
32570: AND
32571: IFFALSE 32592
// MinerCreateMinefield ( unit , x , y ) ;
32573: LD_VAR 0 2
32577: PPUSH
32578: LD_VAR 0 4
32582: PPUSH
32583: LD_VAR 0 5
32587: PPUSH
32588: CALL 35535 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32592: LD_VAR 0 1
32596: PUSH
32597: LD_INT 253
32599: EQUAL
32600: PUSH
32601: LD_VAR 0 2
32605: PPUSH
32606: CALL_OW 257
32610: PUSH
32611: LD_INT 5
32613: EQUAL
32614: AND
32615: IFFALSE 32636
// ComBinocular ( unit , x , y ) ;
32617: LD_VAR 0 2
32621: PPUSH
32622: LD_VAR 0 4
32626: PPUSH
32627: LD_VAR 0 5
32631: PPUSH
32632: CALL 35906 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32636: LD_VAR 0 1
32640: PUSH
32641: LD_INT 254
32643: EQUAL
32644: PUSH
32645: LD_VAR 0 2
32649: PPUSH
32650: CALL_OW 264
32654: PUSH
32655: LD_EXP 50
32659: EQUAL
32660: AND
32661: PUSH
32662: LD_VAR 0 3
32666: PPUSH
32667: CALL_OW 263
32671: PUSH
32672: LD_INT 3
32674: EQUAL
32675: AND
32676: IFFALSE 32692
// HackDestroyVehicle ( unit , selectedUnit ) ;
32678: LD_VAR 0 2
32682: PPUSH
32683: LD_VAR 0 3
32687: PPUSH
32688: CALL 34201 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32692: LD_VAR 0 1
32696: PUSH
32697: LD_INT 255
32699: EQUAL
32700: PUSH
32701: LD_VAR 0 2
32705: PPUSH
32706: CALL_OW 264
32710: PUSH
32711: LD_INT 14
32713: PUSH
32714: LD_INT 53
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: IN
32721: AND
32722: PUSH
32723: LD_VAR 0 4
32727: PPUSH
32728: LD_VAR 0 5
32732: PPUSH
32733: CALL_OW 488
32737: AND
32738: IFFALSE 32762
// CutTreeXYR ( unit , x , y , 12 ) ;
32740: LD_VAR 0 2
32744: PPUSH
32745: LD_VAR 0 4
32749: PPUSH
32750: LD_VAR 0 5
32754: PPUSH
32755: LD_INT 12
32757: PPUSH
32758: CALL 32767 0 4
// end ;
32762: LD_VAR 0 6
32766: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32767: LD_INT 0
32769: PPUSH
32770: PPUSH
32771: PPUSH
32772: PPUSH
32773: PPUSH
32774: PPUSH
32775: PPUSH
32776: PPUSH
32777: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32778: LD_VAR 0 1
32782: NOT
32783: PUSH
32784: LD_VAR 0 2
32788: PPUSH
32789: LD_VAR 0 3
32793: PPUSH
32794: CALL_OW 488
32798: NOT
32799: OR
32800: PUSH
32801: LD_VAR 0 4
32805: NOT
32806: OR
32807: IFFALSE 32811
// exit ;
32809: GO 33151
// list := [ ] ;
32811: LD_ADDR_VAR 0 13
32815: PUSH
32816: EMPTY
32817: ST_TO_ADDR
// if x - r < 0 then
32818: LD_VAR 0 2
32822: PUSH
32823: LD_VAR 0 4
32827: MINUS
32828: PUSH
32829: LD_INT 0
32831: LESS
32832: IFFALSE 32844
// min_x := 0 else
32834: LD_ADDR_VAR 0 7
32838: PUSH
32839: LD_INT 0
32841: ST_TO_ADDR
32842: GO 32860
// min_x := x - r ;
32844: LD_ADDR_VAR 0 7
32848: PUSH
32849: LD_VAR 0 2
32853: PUSH
32854: LD_VAR 0 4
32858: MINUS
32859: ST_TO_ADDR
// if y - r < 0 then
32860: LD_VAR 0 3
32864: PUSH
32865: LD_VAR 0 4
32869: MINUS
32870: PUSH
32871: LD_INT 0
32873: LESS
32874: IFFALSE 32886
// min_y := 0 else
32876: LD_ADDR_VAR 0 8
32880: PUSH
32881: LD_INT 0
32883: ST_TO_ADDR
32884: GO 32902
// min_y := y - r ;
32886: LD_ADDR_VAR 0 8
32890: PUSH
32891: LD_VAR 0 3
32895: PUSH
32896: LD_VAR 0 4
32900: MINUS
32901: ST_TO_ADDR
// max_x := x + r ;
32902: LD_ADDR_VAR 0 9
32906: PUSH
32907: LD_VAR 0 2
32911: PUSH
32912: LD_VAR 0 4
32916: PLUS
32917: ST_TO_ADDR
// max_y := y + r ;
32918: LD_ADDR_VAR 0 10
32922: PUSH
32923: LD_VAR 0 3
32927: PUSH
32928: LD_VAR 0 4
32932: PLUS
32933: ST_TO_ADDR
// for _x = min_x to max_x do
32934: LD_ADDR_VAR 0 11
32938: PUSH
32939: DOUBLE
32940: LD_VAR 0 7
32944: DEC
32945: ST_TO_ADDR
32946: LD_VAR 0 9
32950: PUSH
32951: FOR_TO
32952: IFFALSE 33069
// for _y = min_y to max_y do
32954: LD_ADDR_VAR 0 12
32958: PUSH
32959: DOUBLE
32960: LD_VAR 0 8
32964: DEC
32965: ST_TO_ADDR
32966: LD_VAR 0 10
32970: PUSH
32971: FOR_TO
32972: IFFALSE 33065
// begin if not ValidHex ( _x , _y ) then
32974: LD_VAR 0 11
32978: PPUSH
32979: LD_VAR 0 12
32983: PPUSH
32984: CALL_OW 488
32988: NOT
32989: IFFALSE 32993
// continue ;
32991: GO 32971
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32993: LD_VAR 0 11
32997: PPUSH
32998: LD_VAR 0 12
33002: PPUSH
33003: CALL_OW 351
33007: PUSH
33008: LD_VAR 0 11
33012: PPUSH
33013: LD_VAR 0 12
33017: PPUSH
33018: CALL_OW 554
33022: AND
33023: IFFALSE 33063
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33025: LD_ADDR_VAR 0 13
33029: PUSH
33030: LD_VAR 0 13
33034: PPUSH
33035: LD_VAR 0 13
33039: PUSH
33040: LD_INT 1
33042: PLUS
33043: PPUSH
33044: LD_VAR 0 11
33048: PUSH
33049: LD_VAR 0 12
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PPUSH
33058: CALL_OW 2
33062: ST_TO_ADDR
// end ;
33063: GO 32971
33065: POP
33066: POP
33067: GO 32951
33069: POP
33070: POP
// if not list then
33071: LD_VAR 0 13
33075: NOT
33076: IFFALSE 33080
// exit ;
33078: GO 33151
// for i in list do
33080: LD_ADDR_VAR 0 6
33084: PUSH
33085: LD_VAR 0 13
33089: PUSH
33090: FOR_IN
33091: IFFALSE 33149
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33093: LD_VAR 0 1
33097: PPUSH
33098: LD_STRING M
33100: PUSH
33101: LD_VAR 0 6
33105: PUSH
33106: LD_INT 1
33108: ARRAY
33109: PUSH
33110: LD_VAR 0 6
33114: PUSH
33115: LD_INT 2
33117: ARRAY
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: PUSH
33140: EMPTY
33141: LIST
33142: PPUSH
33143: CALL_OW 447
33147: GO 33090
33149: POP
33150: POP
// end ;
33151: LD_VAR 0 5
33155: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33156: LD_EXP 119
33160: NOT
33161: IFFALSE 33211
33163: GO 33165
33165: DISABLE
// begin initHack := true ;
33166: LD_ADDR_EXP 119
33170: PUSH
33171: LD_INT 1
33173: ST_TO_ADDR
// hackTanks := [ ] ;
33174: LD_ADDR_EXP 120
33178: PUSH
33179: EMPTY
33180: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33181: LD_ADDR_EXP 121
33185: PUSH
33186: EMPTY
33187: ST_TO_ADDR
// hackLimit := 3 ;
33188: LD_ADDR_EXP 122
33192: PUSH
33193: LD_INT 3
33195: ST_TO_ADDR
// hackDist := 12 ;
33196: LD_ADDR_EXP 123
33200: PUSH
33201: LD_INT 12
33203: ST_TO_ADDR
// hackCounter := [ ] ;
33204: LD_ADDR_EXP 124
33208: PUSH
33209: EMPTY
33210: ST_TO_ADDR
// end ;
33211: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33212: LD_EXP 119
33216: PUSH
33217: LD_INT 34
33219: PUSH
33220: LD_EXP 50
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PPUSH
33229: CALL_OW 69
33233: AND
33234: IFFALSE 33489
33236: GO 33238
33238: DISABLE
33239: LD_INT 0
33241: PPUSH
33242: PPUSH
// begin enable ;
33243: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33244: LD_ADDR_VAR 0 1
33248: PUSH
33249: LD_INT 34
33251: PUSH
33252: LD_EXP 50
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PPUSH
33261: CALL_OW 69
33265: PUSH
33266: FOR_IN
33267: IFFALSE 33487
// begin if not i in hackTanks then
33269: LD_VAR 0 1
33273: PUSH
33274: LD_EXP 120
33278: IN
33279: NOT
33280: IFFALSE 33363
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33282: LD_ADDR_EXP 120
33286: PUSH
33287: LD_EXP 120
33291: PPUSH
33292: LD_EXP 120
33296: PUSH
33297: LD_INT 1
33299: PLUS
33300: PPUSH
33301: LD_VAR 0 1
33305: PPUSH
33306: CALL_OW 1
33310: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33311: LD_ADDR_EXP 121
33315: PUSH
33316: LD_EXP 121
33320: PPUSH
33321: LD_EXP 121
33325: PUSH
33326: LD_INT 1
33328: PLUS
33329: PPUSH
33330: EMPTY
33331: PPUSH
33332: CALL_OW 1
33336: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33337: LD_ADDR_EXP 124
33341: PUSH
33342: LD_EXP 124
33346: PPUSH
33347: LD_EXP 124
33351: PUSH
33352: LD_INT 1
33354: PLUS
33355: PPUSH
33356: EMPTY
33357: PPUSH
33358: CALL_OW 1
33362: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33363: LD_VAR 0 1
33367: PPUSH
33368: CALL_OW 302
33372: NOT
33373: IFFALSE 33386
// begin HackUnlinkAll ( i ) ;
33375: LD_VAR 0 1
33379: PPUSH
33380: CALL 33492 0 1
// continue ;
33384: GO 33266
// end ; HackCheckCapturedStatus ( i ) ;
33386: LD_VAR 0 1
33390: PPUSH
33391: CALL 33935 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33395: LD_ADDR_VAR 0 2
33399: PUSH
33400: LD_INT 81
33402: PUSH
33403: LD_VAR 0 1
33407: PPUSH
33408: CALL_OW 255
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 33
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 91
33429: PUSH
33430: LD_VAR 0 1
33434: PUSH
33435: LD_EXP 123
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 50
33447: PUSH
33448: EMPTY
33449: LIST
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: PPUSH
33457: CALL_OW 69
33461: ST_TO_ADDR
// if not tmp then
33462: LD_VAR 0 2
33466: NOT
33467: IFFALSE 33471
// continue ;
33469: GO 33266
// HackLink ( i , tmp ) ;
33471: LD_VAR 0 1
33475: PPUSH
33476: LD_VAR 0 2
33480: PPUSH
33481: CALL 33628 0 2
// end ;
33485: GO 33266
33487: POP
33488: POP
// end ;
33489: PPOPN 2
33491: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33492: LD_INT 0
33494: PPUSH
33495: PPUSH
33496: PPUSH
// if not hack in hackTanks then
33497: LD_VAR 0 1
33501: PUSH
33502: LD_EXP 120
33506: IN
33507: NOT
33508: IFFALSE 33512
// exit ;
33510: GO 33623
// index := GetElementIndex ( hackTanks , hack ) ;
33512: LD_ADDR_VAR 0 4
33516: PUSH
33517: LD_EXP 120
33521: PPUSH
33522: LD_VAR 0 1
33526: PPUSH
33527: CALL 41057 0 2
33531: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33532: LD_EXP 121
33536: PUSH
33537: LD_VAR 0 4
33541: ARRAY
33542: IFFALSE 33623
// begin for i in hackTanksCaptured [ index ] do
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: LD_EXP 121
33553: PUSH
33554: LD_VAR 0 4
33558: ARRAY
33559: PUSH
33560: FOR_IN
33561: IFFALSE 33587
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33563: LD_VAR 0 3
33567: PUSH
33568: LD_INT 1
33570: ARRAY
33571: PPUSH
33572: LD_VAR 0 3
33576: PUSH
33577: LD_INT 2
33579: ARRAY
33580: PPUSH
33581: CALL_OW 235
33585: GO 33560
33587: POP
33588: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33589: LD_ADDR_EXP 121
33593: PUSH
33594: LD_EXP 121
33598: PPUSH
33599: LD_VAR 0 4
33603: PPUSH
33604: EMPTY
33605: PPUSH
33606: CALL_OW 1
33610: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33611: LD_VAR 0 1
33615: PPUSH
33616: LD_INT 0
33618: PPUSH
33619: CALL_OW 505
// end ; end ;
33623: LD_VAR 0 2
33627: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33628: LD_INT 0
33630: PPUSH
33631: PPUSH
33632: PPUSH
// if not hack in hackTanks or not vehicles then
33633: LD_VAR 0 1
33637: PUSH
33638: LD_EXP 120
33642: IN
33643: NOT
33644: PUSH
33645: LD_VAR 0 2
33649: NOT
33650: OR
33651: IFFALSE 33655
// exit ;
33653: GO 33930
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33655: LD_ADDR_VAR 0 2
33659: PUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: LD_VAR 0 2
33669: PPUSH
33670: LD_INT 1
33672: PPUSH
33673: LD_INT 1
33675: PPUSH
33676: CALL 41707 0 4
33680: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33681: LD_ADDR_VAR 0 5
33685: PUSH
33686: LD_EXP 120
33690: PPUSH
33691: LD_VAR 0 1
33695: PPUSH
33696: CALL 41057 0 2
33700: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33701: LD_EXP 121
33705: PUSH
33706: LD_VAR 0 5
33710: ARRAY
33711: PUSH
33712: LD_EXP 122
33716: LESS
33717: IFFALSE 33906
// begin for i := 1 to vehicles do
33719: LD_ADDR_VAR 0 4
33723: PUSH
33724: DOUBLE
33725: LD_INT 1
33727: DEC
33728: ST_TO_ADDR
33729: LD_VAR 0 2
33733: PUSH
33734: FOR_TO
33735: IFFALSE 33904
// begin if hackTanksCaptured [ index ] = hackLimit then
33737: LD_EXP 121
33741: PUSH
33742: LD_VAR 0 5
33746: ARRAY
33747: PUSH
33748: LD_EXP 122
33752: EQUAL
33753: IFFALSE 33757
// break ;
33755: GO 33904
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33757: LD_ADDR_EXP 124
33761: PUSH
33762: LD_EXP 124
33766: PPUSH
33767: LD_VAR 0 5
33771: PPUSH
33772: LD_EXP 124
33776: PUSH
33777: LD_VAR 0 5
33781: ARRAY
33782: PUSH
33783: LD_INT 1
33785: PLUS
33786: PPUSH
33787: CALL_OW 1
33791: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33792: LD_ADDR_EXP 121
33796: PUSH
33797: LD_EXP 121
33801: PPUSH
33802: LD_VAR 0 5
33806: PUSH
33807: LD_EXP 121
33811: PUSH
33812: LD_VAR 0 5
33816: ARRAY
33817: PUSH
33818: LD_INT 1
33820: PLUS
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PPUSH
33826: LD_VAR 0 2
33830: PUSH
33831: LD_VAR 0 4
33835: ARRAY
33836: PUSH
33837: LD_VAR 0 2
33841: PUSH
33842: LD_VAR 0 4
33846: ARRAY
33847: PPUSH
33848: CALL_OW 255
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PPUSH
33857: CALL 41272 0 3
33861: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33862: LD_VAR 0 2
33866: PUSH
33867: LD_VAR 0 4
33871: ARRAY
33872: PPUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: CALL_OW 255
33882: PPUSH
33883: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33887: LD_VAR 0 2
33891: PUSH
33892: LD_VAR 0 4
33896: ARRAY
33897: PPUSH
33898: CALL_OW 141
// end ;
33902: GO 33734
33904: POP
33905: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33906: LD_VAR 0 1
33910: PPUSH
33911: LD_EXP 121
33915: PUSH
33916: LD_VAR 0 5
33920: ARRAY
33921: PUSH
33922: LD_INT 0
33924: PLUS
33925: PPUSH
33926: CALL_OW 505
// end ;
33930: LD_VAR 0 3
33934: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33935: LD_INT 0
33937: PPUSH
33938: PPUSH
33939: PPUSH
33940: PPUSH
// if not hack in hackTanks then
33941: LD_VAR 0 1
33945: PUSH
33946: LD_EXP 120
33950: IN
33951: NOT
33952: IFFALSE 33956
// exit ;
33954: GO 34196
// index := GetElementIndex ( hackTanks , hack ) ;
33956: LD_ADDR_VAR 0 4
33960: PUSH
33961: LD_EXP 120
33965: PPUSH
33966: LD_VAR 0 1
33970: PPUSH
33971: CALL 41057 0 2
33975: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: DOUBLE
33982: LD_EXP 121
33986: PUSH
33987: LD_VAR 0 4
33991: ARRAY
33992: INC
33993: ST_TO_ADDR
33994: LD_INT 1
33996: PUSH
33997: FOR_DOWNTO
33998: IFFALSE 34170
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34000: LD_ADDR_VAR 0 5
34004: PUSH
34005: LD_EXP 121
34009: PUSH
34010: LD_VAR 0 4
34014: ARRAY
34015: PUSH
34016: LD_VAR 0 3
34020: ARRAY
34021: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34022: LD_VAR 0 5
34026: PUSH
34027: LD_INT 1
34029: ARRAY
34030: PPUSH
34031: CALL_OW 302
34035: NOT
34036: PUSH
34037: LD_VAR 0 5
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PPUSH
34046: CALL_OW 255
34050: PUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 255
34060: NONEQUAL
34061: OR
34062: IFFALSE 34168
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34064: LD_VAR 0 5
34068: PUSH
34069: LD_INT 1
34071: ARRAY
34072: PPUSH
34073: CALL_OW 305
34077: PUSH
34078: LD_VAR 0 5
34082: PUSH
34083: LD_INT 1
34085: ARRAY
34086: PPUSH
34087: CALL_OW 255
34091: PUSH
34092: LD_VAR 0 1
34096: PPUSH
34097: CALL_OW 255
34101: EQUAL
34102: AND
34103: IFFALSE 34127
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34105: LD_VAR 0 5
34109: PUSH
34110: LD_INT 1
34112: ARRAY
34113: PPUSH
34114: LD_VAR 0 5
34118: PUSH
34119: LD_INT 2
34121: ARRAY
34122: PPUSH
34123: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34127: LD_ADDR_EXP 121
34131: PUSH
34132: LD_EXP 121
34136: PPUSH
34137: LD_VAR 0 4
34141: PPUSH
34142: LD_EXP 121
34146: PUSH
34147: LD_VAR 0 4
34151: ARRAY
34152: PPUSH
34153: LD_VAR 0 3
34157: PPUSH
34158: CALL_OW 3
34162: PPUSH
34163: CALL_OW 1
34167: ST_TO_ADDR
// end ; end ;
34168: GO 33997
34170: POP
34171: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34172: LD_VAR 0 1
34176: PPUSH
34177: LD_EXP 121
34181: PUSH
34182: LD_VAR 0 4
34186: ARRAY
34187: PUSH
34188: LD_INT 0
34190: PLUS
34191: PPUSH
34192: CALL_OW 505
// end ;
34196: LD_VAR 0 2
34200: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34201: LD_INT 0
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
// if not hack in hackTanks then
34207: LD_VAR 0 1
34211: PUSH
34212: LD_EXP 120
34216: IN
34217: NOT
34218: IFFALSE 34222
// exit ;
34220: GO 34307
// index := GetElementIndex ( hackTanks , hack ) ;
34222: LD_ADDR_VAR 0 5
34226: PUSH
34227: LD_EXP 120
34231: PPUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL 41057 0 2
34241: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34242: LD_ADDR_VAR 0 4
34246: PUSH
34247: DOUBLE
34248: LD_INT 1
34250: DEC
34251: ST_TO_ADDR
34252: LD_EXP 121
34256: PUSH
34257: LD_VAR 0 5
34261: ARRAY
34262: PUSH
34263: FOR_TO
34264: IFFALSE 34305
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34266: LD_EXP 121
34270: PUSH
34271: LD_VAR 0 5
34275: ARRAY
34276: PUSH
34277: LD_VAR 0 4
34281: ARRAY
34282: PUSH
34283: LD_INT 1
34285: ARRAY
34286: PUSH
34287: LD_VAR 0 2
34291: EQUAL
34292: IFFALSE 34303
// KillUnit ( vehicle ) ;
34294: LD_VAR 0 2
34298: PPUSH
34299: CALL_OW 66
34303: GO 34263
34305: POP
34306: POP
// end ;
34307: LD_VAR 0 3
34311: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34312: LD_EXP 125
34316: NOT
34317: IFFALSE 34352
34319: GO 34321
34321: DISABLE
// begin initMiner := true ;
34322: LD_ADDR_EXP 125
34326: PUSH
34327: LD_INT 1
34329: ST_TO_ADDR
// minersList := [ ] ;
34330: LD_ADDR_EXP 126
34334: PUSH
34335: EMPTY
34336: ST_TO_ADDR
// minerMinesList := [ ] ;
34337: LD_ADDR_EXP 127
34341: PUSH
34342: EMPTY
34343: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34344: LD_ADDR_EXP 128
34348: PUSH
34349: LD_INT 5
34351: ST_TO_ADDR
// end ;
34352: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34353: LD_EXP 125
34357: PUSH
34358: LD_INT 34
34360: PUSH
34361: LD_EXP 55
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PPUSH
34370: CALL_OW 69
34374: AND
34375: IFFALSE 34838
34377: GO 34379
34379: DISABLE
34380: LD_INT 0
34382: PPUSH
34383: PPUSH
34384: PPUSH
34385: PPUSH
// begin enable ;
34386: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34387: LD_ADDR_VAR 0 1
34391: PUSH
34392: LD_INT 34
34394: PUSH
34395: LD_EXP 55
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PPUSH
34404: CALL_OW 69
34408: PUSH
34409: FOR_IN
34410: IFFALSE 34482
// begin if not i in minersList then
34412: LD_VAR 0 1
34416: PUSH
34417: LD_EXP 126
34421: IN
34422: NOT
34423: IFFALSE 34480
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34425: LD_ADDR_EXP 126
34429: PUSH
34430: LD_EXP 126
34434: PPUSH
34435: LD_EXP 126
34439: PUSH
34440: LD_INT 1
34442: PLUS
34443: PPUSH
34444: LD_VAR 0 1
34448: PPUSH
34449: CALL_OW 1
34453: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34454: LD_ADDR_EXP 127
34458: PUSH
34459: LD_EXP 127
34463: PPUSH
34464: LD_EXP 127
34468: PUSH
34469: LD_INT 1
34471: PLUS
34472: PPUSH
34473: EMPTY
34474: PPUSH
34475: CALL_OW 1
34479: ST_TO_ADDR
// end end ;
34480: GO 34409
34482: POP
34483: POP
// for i := minerMinesList downto 1 do
34484: LD_ADDR_VAR 0 1
34488: PUSH
34489: DOUBLE
34490: LD_EXP 127
34494: INC
34495: ST_TO_ADDR
34496: LD_INT 1
34498: PUSH
34499: FOR_DOWNTO
34500: IFFALSE 34836
// begin if IsLive ( minersList [ i ] ) then
34502: LD_EXP 126
34506: PUSH
34507: LD_VAR 0 1
34511: ARRAY
34512: PPUSH
34513: CALL_OW 300
34517: IFFALSE 34545
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34519: LD_EXP 126
34523: PUSH
34524: LD_VAR 0 1
34528: ARRAY
34529: PPUSH
34530: LD_EXP 127
34534: PUSH
34535: LD_VAR 0 1
34539: ARRAY
34540: PPUSH
34541: CALL_OW 505
// if not minerMinesList [ i ] then
34545: LD_EXP 127
34549: PUSH
34550: LD_VAR 0 1
34554: ARRAY
34555: NOT
34556: IFFALSE 34560
// continue ;
34558: GO 34499
// for j := minerMinesList [ i ] downto 1 do
34560: LD_ADDR_VAR 0 2
34564: PUSH
34565: DOUBLE
34566: LD_EXP 127
34570: PUSH
34571: LD_VAR 0 1
34575: ARRAY
34576: INC
34577: ST_TO_ADDR
34578: LD_INT 1
34580: PUSH
34581: FOR_DOWNTO
34582: IFFALSE 34832
// begin side := GetSide ( minersList [ i ] ) ;
34584: LD_ADDR_VAR 0 3
34588: PUSH
34589: LD_EXP 126
34593: PUSH
34594: LD_VAR 0 1
34598: ARRAY
34599: PPUSH
34600: CALL_OW 255
34604: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34605: LD_ADDR_VAR 0 4
34609: PUSH
34610: LD_EXP 127
34614: PUSH
34615: LD_VAR 0 1
34619: ARRAY
34620: PUSH
34621: LD_VAR 0 2
34625: ARRAY
34626: PUSH
34627: LD_INT 1
34629: ARRAY
34630: PPUSH
34631: LD_EXP 127
34635: PUSH
34636: LD_VAR 0 1
34640: ARRAY
34641: PUSH
34642: LD_VAR 0 2
34646: ARRAY
34647: PUSH
34648: LD_INT 2
34650: ARRAY
34651: PPUSH
34652: CALL_OW 428
34656: ST_TO_ADDR
// if not tmp then
34657: LD_VAR 0 4
34661: NOT
34662: IFFALSE 34666
// continue ;
34664: GO 34581
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34666: LD_VAR 0 4
34670: PUSH
34671: LD_INT 81
34673: PUSH
34674: LD_VAR 0 3
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PPUSH
34683: CALL_OW 69
34687: IN
34688: PUSH
34689: LD_EXP 127
34693: PUSH
34694: LD_VAR 0 1
34698: ARRAY
34699: PUSH
34700: LD_VAR 0 2
34704: ARRAY
34705: PUSH
34706: LD_INT 1
34708: ARRAY
34709: PPUSH
34710: LD_EXP 127
34714: PUSH
34715: LD_VAR 0 1
34719: ARRAY
34720: PUSH
34721: LD_VAR 0 2
34725: ARRAY
34726: PUSH
34727: LD_INT 2
34729: ARRAY
34730: PPUSH
34731: CALL_OW 458
34735: AND
34736: IFFALSE 34830
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34738: LD_EXP 127
34742: PUSH
34743: LD_VAR 0 1
34747: ARRAY
34748: PUSH
34749: LD_VAR 0 2
34753: ARRAY
34754: PUSH
34755: LD_INT 1
34757: ARRAY
34758: PPUSH
34759: LD_EXP 127
34763: PUSH
34764: LD_VAR 0 1
34768: ARRAY
34769: PUSH
34770: LD_VAR 0 2
34774: ARRAY
34775: PUSH
34776: LD_INT 2
34778: ARRAY
34779: PPUSH
34780: LD_VAR 0 3
34784: PPUSH
34785: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34789: LD_ADDR_EXP 127
34793: PUSH
34794: LD_EXP 127
34798: PPUSH
34799: LD_VAR 0 1
34803: PPUSH
34804: LD_EXP 127
34808: PUSH
34809: LD_VAR 0 1
34813: ARRAY
34814: PPUSH
34815: LD_VAR 0 2
34819: PPUSH
34820: CALL_OW 3
34824: PPUSH
34825: CALL_OW 1
34829: ST_TO_ADDR
// end ; end ;
34830: GO 34581
34832: POP
34833: POP
// end ;
34834: GO 34499
34836: POP
34837: POP
// end ;
34838: PPOPN 4
34840: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34841: LD_INT 0
34843: PPUSH
34844: PPUSH
// result := false ;
34845: LD_ADDR_VAR 0 4
34849: PUSH
34850: LD_INT 0
34852: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34853: LD_VAR 0 1
34857: PPUSH
34858: CALL_OW 264
34862: PUSH
34863: LD_EXP 55
34867: EQUAL
34868: NOT
34869: IFFALSE 34873
// exit ;
34871: GO 35113
// index := GetElementIndex ( minersList , unit ) ;
34873: LD_ADDR_VAR 0 5
34877: PUSH
34878: LD_EXP 126
34882: PPUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL 41057 0 2
34892: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34893: LD_EXP 127
34897: PUSH
34898: LD_VAR 0 5
34902: ARRAY
34903: PUSH
34904: LD_EXP 128
34908: GREATEREQUAL
34909: IFFALSE 34913
// exit ;
34911: GO 35113
// ComMoveXY ( unit , x , y ) ;
34913: LD_VAR 0 1
34917: PPUSH
34918: LD_VAR 0 2
34922: PPUSH
34923: LD_VAR 0 3
34927: PPUSH
34928: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34932: LD_INT 35
34934: PPUSH
34935: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34939: LD_VAR 0 1
34943: PPUSH
34944: LD_VAR 0 2
34948: PPUSH
34949: LD_VAR 0 3
34953: PPUSH
34954: CALL 71121 0 3
34958: NOT
34959: PUSH
34960: LD_VAR 0 1
34964: PPUSH
34965: CALL_OW 314
34969: AND
34970: IFFALSE 34974
// exit ;
34972: GO 35113
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34974: LD_VAR 0 2
34978: PPUSH
34979: LD_VAR 0 3
34983: PPUSH
34984: CALL_OW 428
34988: PUSH
34989: LD_VAR 0 1
34993: EQUAL
34994: PUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL_OW 314
35004: NOT
35005: AND
35006: IFFALSE 34932
// PlaySoundXY ( x , y , PlantMine ) ;
35008: LD_VAR 0 2
35012: PPUSH
35013: LD_VAR 0 3
35017: PPUSH
35018: LD_STRING PlantMine
35020: PPUSH
35021: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35025: LD_VAR 0 2
35029: PPUSH
35030: LD_VAR 0 3
35034: PPUSH
35035: LD_VAR 0 1
35039: PPUSH
35040: CALL_OW 255
35044: PPUSH
35045: LD_INT 0
35047: PPUSH
35048: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35052: LD_ADDR_EXP 127
35056: PUSH
35057: LD_EXP 127
35061: PPUSH
35062: LD_VAR 0 5
35066: PUSH
35067: LD_EXP 127
35071: PUSH
35072: LD_VAR 0 5
35076: ARRAY
35077: PUSH
35078: LD_INT 1
35080: PLUS
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PPUSH
35086: LD_VAR 0 2
35090: PUSH
35091: LD_VAR 0 3
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PPUSH
35100: CALL 41272 0 3
35104: ST_TO_ADDR
// result := true ;
35105: LD_ADDR_VAR 0 4
35109: PUSH
35110: LD_INT 1
35112: ST_TO_ADDR
// end ;
35113: LD_VAR 0 4
35117: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35118: LD_INT 0
35120: PPUSH
35121: PPUSH
35122: PPUSH
// if not unit in minersList then
35123: LD_VAR 0 1
35127: PUSH
35128: LD_EXP 126
35132: IN
35133: NOT
35134: IFFALSE 35138
// exit ;
35136: GO 35530
// index := GetElementIndex ( minersList , unit ) ;
35138: LD_ADDR_VAR 0 6
35142: PUSH
35143: LD_EXP 126
35147: PPUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL 41057 0 2
35157: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35158: LD_ADDR_VAR 0 5
35162: PUSH
35163: DOUBLE
35164: LD_EXP 127
35168: PUSH
35169: LD_VAR 0 6
35173: ARRAY
35174: INC
35175: ST_TO_ADDR
35176: LD_INT 1
35178: PUSH
35179: FOR_DOWNTO
35180: IFFALSE 35341
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35182: LD_EXP 127
35186: PUSH
35187: LD_VAR 0 6
35191: ARRAY
35192: PUSH
35193: LD_VAR 0 5
35197: ARRAY
35198: PUSH
35199: LD_INT 1
35201: ARRAY
35202: PUSH
35203: LD_VAR 0 2
35207: EQUAL
35208: PUSH
35209: LD_EXP 127
35213: PUSH
35214: LD_VAR 0 6
35218: ARRAY
35219: PUSH
35220: LD_VAR 0 5
35224: ARRAY
35225: PUSH
35226: LD_INT 2
35228: ARRAY
35229: PUSH
35230: LD_VAR 0 3
35234: EQUAL
35235: AND
35236: IFFALSE 35339
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35238: LD_EXP 127
35242: PUSH
35243: LD_VAR 0 6
35247: ARRAY
35248: PUSH
35249: LD_VAR 0 5
35253: ARRAY
35254: PUSH
35255: LD_INT 1
35257: ARRAY
35258: PPUSH
35259: LD_EXP 127
35263: PUSH
35264: LD_VAR 0 6
35268: ARRAY
35269: PUSH
35270: LD_VAR 0 5
35274: ARRAY
35275: PUSH
35276: LD_INT 2
35278: ARRAY
35279: PPUSH
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL_OW 255
35289: PPUSH
35290: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35294: LD_ADDR_EXP 127
35298: PUSH
35299: LD_EXP 127
35303: PPUSH
35304: LD_VAR 0 6
35308: PPUSH
35309: LD_EXP 127
35313: PUSH
35314: LD_VAR 0 6
35318: ARRAY
35319: PPUSH
35320: LD_VAR 0 5
35324: PPUSH
35325: CALL_OW 3
35329: PPUSH
35330: CALL_OW 1
35334: ST_TO_ADDR
// exit ;
35335: POP
35336: POP
35337: GO 35530
// end ; end ;
35339: GO 35179
35341: POP
35342: POP
// for i := minerMinesList [ index ] downto 1 do
35343: LD_ADDR_VAR 0 5
35347: PUSH
35348: DOUBLE
35349: LD_EXP 127
35353: PUSH
35354: LD_VAR 0 6
35358: ARRAY
35359: INC
35360: ST_TO_ADDR
35361: LD_INT 1
35363: PUSH
35364: FOR_DOWNTO
35365: IFFALSE 35528
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35367: LD_EXP 127
35371: PUSH
35372: LD_VAR 0 6
35376: ARRAY
35377: PUSH
35378: LD_VAR 0 5
35382: ARRAY
35383: PUSH
35384: LD_INT 1
35386: ARRAY
35387: PPUSH
35388: LD_EXP 127
35392: PUSH
35393: LD_VAR 0 6
35397: ARRAY
35398: PUSH
35399: LD_VAR 0 5
35403: ARRAY
35404: PUSH
35405: LD_INT 2
35407: ARRAY
35408: PPUSH
35409: LD_VAR 0 2
35413: PPUSH
35414: LD_VAR 0 3
35418: PPUSH
35419: CALL_OW 298
35423: PUSH
35424: LD_INT 6
35426: LESS
35427: IFFALSE 35526
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35429: LD_EXP 127
35433: PUSH
35434: LD_VAR 0 6
35438: ARRAY
35439: PUSH
35440: LD_VAR 0 5
35444: ARRAY
35445: PUSH
35446: LD_INT 1
35448: ARRAY
35449: PPUSH
35450: LD_EXP 127
35454: PUSH
35455: LD_VAR 0 6
35459: ARRAY
35460: PUSH
35461: LD_VAR 0 5
35465: ARRAY
35466: PUSH
35467: LD_INT 2
35469: ARRAY
35470: PPUSH
35471: LD_VAR 0 1
35475: PPUSH
35476: CALL_OW 255
35480: PPUSH
35481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35485: LD_ADDR_EXP 127
35489: PUSH
35490: LD_EXP 127
35494: PPUSH
35495: LD_VAR 0 6
35499: PPUSH
35500: LD_EXP 127
35504: PUSH
35505: LD_VAR 0 6
35509: ARRAY
35510: PPUSH
35511: LD_VAR 0 5
35515: PPUSH
35516: CALL_OW 3
35520: PPUSH
35521: CALL_OW 1
35525: ST_TO_ADDR
// end ; end ;
35526: GO 35364
35528: POP
35529: POP
// end ;
35530: LD_VAR 0 4
35534: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35535: LD_INT 0
35537: PPUSH
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35546: LD_VAR 0 1
35550: PPUSH
35551: CALL_OW 264
35555: PUSH
35556: LD_EXP 55
35560: EQUAL
35561: NOT
35562: PUSH
35563: LD_VAR 0 1
35567: PUSH
35568: LD_EXP 126
35572: IN
35573: NOT
35574: OR
35575: IFFALSE 35579
// exit ;
35577: GO 35901
// index := GetElementIndex ( minersList , unit ) ;
35579: LD_ADDR_VAR 0 6
35583: PUSH
35584: LD_EXP 126
35588: PPUSH
35589: LD_VAR 0 1
35593: PPUSH
35594: CALL 41057 0 2
35598: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35599: LD_ADDR_VAR 0 8
35603: PUSH
35604: LD_EXP 128
35608: PUSH
35609: LD_EXP 127
35613: PUSH
35614: LD_VAR 0 6
35618: ARRAY
35619: MINUS
35620: ST_TO_ADDR
// if not minesFreeAmount then
35621: LD_VAR 0 8
35625: NOT
35626: IFFALSE 35630
// exit ;
35628: GO 35901
// tmp := [ ] ;
35630: LD_ADDR_VAR 0 7
35634: PUSH
35635: EMPTY
35636: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35637: LD_ADDR_VAR 0 5
35641: PUSH
35642: DOUBLE
35643: LD_INT 1
35645: DEC
35646: ST_TO_ADDR
35647: LD_VAR 0 8
35651: PUSH
35652: FOR_TO
35653: IFFALSE 35848
// begin _d := rand ( 0 , 5 ) ;
35655: LD_ADDR_VAR 0 11
35659: PUSH
35660: LD_INT 0
35662: PPUSH
35663: LD_INT 5
35665: PPUSH
35666: CALL_OW 12
35670: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35671: LD_ADDR_VAR 0 12
35675: PUSH
35676: LD_INT 2
35678: PPUSH
35679: LD_INT 6
35681: PPUSH
35682: CALL_OW 12
35686: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35687: LD_ADDR_VAR 0 9
35691: PUSH
35692: LD_VAR 0 2
35696: PPUSH
35697: LD_VAR 0 11
35701: PPUSH
35702: LD_VAR 0 12
35706: PPUSH
35707: CALL_OW 272
35711: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35712: LD_ADDR_VAR 0 10
35716: PUSH
35717: LD_VAR 0 3
35721: PPUSH
35722: LD_VAR 0 11
35726: PPUSH
35727: LD_VAR 0 12
35731: PPUSH
35732: CALL_OW 273
35736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35737: LD_VAR 0 9
35741: PPUSH
35742: LD_VAR 0 10
35746: PPUSH
35747: CALL_OW 488
35751: PUSH
35752: LD_VAR 0 9
35756: PUSH
35757: LD_VAR 0 10
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_VAR 0 7
35770: IN
35771: NOT
35772: AND
35773: PUSH
35774: LD_VAR 0 9
35778: PPUSH
35779: LD_VAR 0 10
35783: PPUSH
35784: CALL_OW 458
35788: NOT
35789: AND
35790: IFFALSE 35832
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35792: LD_ADDR_VAR 0 7
35796: PUSH
35797: LD_VAR 0 7
35801: PPUSH
35802: LD_VAR 0 7
35806: PUSH
35807: LD_INT 1
35809: PLUS
35810: PPUSH
35811: LD_VAR 0 9
35815: PUSH
35816: LD_VAR 0 10
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PPUSH
35825: CALL_OW 1
35829: ST_TO_ADDR
35830: GO 35846
// i := i - 1 ;
35832: LD_ADDR_VAR 0 5
35836: PUSH
35837: LD_VAR 0 5
35841: PUSH
35842: LD_INT 1
35844: MINUS
35845: ST_TO_ADDR
// end ;
35846: GO 35652
35848: POP
35849: POP
// for i in tmp do
35850: LD_ADDR_VAR 0 5
35854: PUSH
35855: LD_VAR 0 7
35859: PUSH
35860: FOR_IN
35861: IFFALSE 35899
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35863: LD_VAR 0 1
35867: PPUSH
35868: LD_VAR 0 5
35872: PUSH
35873: LD_INT 1
35875: ARRAY
35876: PPUSH
35877: LD_VAR 0 5
35881: PUSH
35882: LD_INT 2
35884: ARRAY
35885: PPUSH
35886: CALL 34841 0 3
35890: NOT
35891: IFFALSE 35897
// exit ;
35893: POP
35894: POP
35895: GO 35901
35897: GO 35860
35899: POP
35900: POP
// end ;
35901: LD_VAR 0 4
35905: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35906: LD_INT 0
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
// if not GetClass ( unit ) = class_sniper then
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 257
35924: PUSH
35925: LD_INT 5
35927: EQUAL
35928: NOT
35929: IFFALSE 35933
// exit ;
35931: GO 36321
// dist := 8 ;
35933: LD_ADDR_VAR 0 5
35937: PUSH
35938: LD_INT 8
35940: ST_TO_ADDR
// viewRange := 12 ;
35941: LD_ADDR_VAR 0 7
35945: PUSH
35946: LD_INT 12
35948: ST_TO_ADDR
// side := GetSide ( unit ) ;
35949: LD_ADDR_VAR 0 6
35953: PUSH
35954: LD_VAR 0 1
35958: PPUSH
35959: CALL_OW 255
35963: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35964: LD_INT 61
35966: PPUSH
35967: LD_VAR 0 6
35971: PPUSH
35972: CALL_OW 321
35976: PUSH
35977: LD_INT 2
35979: EQUAL
35980: IFFALSE 35990
// viewRange := 16 ;
35982: LD_ADDR_VAR 0 7
35986: PUSH
35987: LD_INT 16
35989: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35990: LD_VAR 0 1
35994: PPUSH
35995: LD_VAR 0 2
35999: PPUSH
36000: LD_VAR 0 3
36004: PPUSH
36005: CALL_OW 297
36009: PUSH
36010: LD_VAR 0 5
36014: GREATER
36015: IFFALSE 36094
// begin ComMoveXY ( unit , x , y ) ;
36017: LD_VAR 0 1
36021: PPUSH
36022: LD_VAR 0 2
36026: PPUSH
36027: LD_VAR 0 3
36031: PPUSH
36032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36036: LD_INT 35
36038: PPUSH
36039: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36043: LD_VAR 0 1
36047: PPUSH
36048: LD_VAR 0 2
36052: PPUSH
36053: LD_VAR 0 3
36057: PPUSH
36058: CALL 71121 0 3
36062: NOT
36063: IFFALSE 36067
// exit ;
36065: GO 36321
// until GetDistUnitXY ( unit , x , y ) < dist ;
36067: LD_VAR 0 1
36071: PPUSH
36072: LD_VAR 0 2
36076: PPUSH
36077: LD_VAR 0 3
36081: PPUSH
36082: CALL_OW 297
36086: PUSH
36087: LD_VAR 0 5
36091: LESS
36092: IFFALSE 36036
// end ; ComTurnXY ( unit , x , y ) ;
36094: LD_VAR 0 1
36098: PPUSH
36099: LD_VAR 0 2
36103: PPUSH
36104: LD_VAR 0 3
36108: PPUSH
36109: CALL_OW 118
// wait ( 5 ) ;
36113: LD_INT 5
36115: PPUSH
36116: CALL_OW 67
// _d := GetDir ( unit ) ;
36120: LD_ADDR_VAR 0 10
36124: PUSH
36125: LD_VAR 0 1
36129: PPUSH
36130: CALL_OW 254
36134: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36135: LD_ADDR_VAR 0 8
36139: PUSH
36140: LD_VAR 0 1
36144: PPUSH
36145: CALL_OW 250
36149: PPUSH
36150: LD_VAR 0 10
36154: PPUSH
36155: LD_VAR 0 5
36159: PPUSH
36160: CALL_OW 272
36164: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36165: LD_ADDR_VAR 0 9
36169: PUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 251
36179: PPUSH
36180: LD_VAR 0 10
36184: PPUSH
36185: LD_VAR 0 5
36189: PPUSH
36190: CALL_OW 273
36194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36195: LD_VAR 0 8
36199: PPUSH
36200: LD_VAR 0 9
36204: PPUSH
36205: CALL_OW 488
36209: NOT
36210: IFFALSE 36214
// exit ;
36212: GO 36321
// ComAnimCustom ( unit , 1 ) ;
36214: LD_VAR 0 1
36218: PPUSH
36219: LD_INT 1
36221: PPUSH
36222: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36226: LD_VAR 0 8
36230: PPUSH
36231: LD_VAR 0 9
36235: PPUSH
36236: LD_VAR 0 6
36240: PPUSH
36241: LD_VAR 0 7
36245: PPUSH
36246: CALL_OW 330
// repeat wait ( 1 ) ;
36250: LD_INT 1
36252: PPUSH
36253: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL_OW 316
36266: PUSH
36267: LD_VAR 0 1
36271: PPUSH
36272: CALL_OW 314
36276: OR
36277: PUSH
36278: LD_VAR 0 1
36282: PPUSH
36283: CALL_OW 302
36287: NOT
36288: OR
36289: PUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: CALL_OW 301
36299: OR
36300: IFFALSE 36250
// RemoveSeeing ( _x , _y , side ) ;
36302: LD_VAR 0 8
36306: PPUSH
36307: LD_VAR 0 9
36311: PPUSH
36312: LD_VAR 0 6
36316: PPUSH
36317: CALL_OW 331
// end ; end_of_file
36321: LD_VAR 0 4
36325: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36326: LD_INT 0
36328: PPUSH
36329: PPUSH
// if exist_mode then
36330: LD_VAR 0 2
36334: IFFALSE 36359
// unit := CreateCharacter ( prefix & ident ) else
36336: LD_ADDR_VAR 0 5
36340: PUSH
36341: LD_VAR 0 3
36345: PUSH
36346: LD_VAR 0 1
36350: STR
36351: PPUSH
36352: CALL_OW 34
36356: ST_TO_ADDR
36357: GO 36374
// unit := NewCharacter ( ident ) ;
36359: LD_ADDR_VAR 0 5
36363: PUSH
36364: LD_VAR 0 1
36368: PPUSH
36369: CALL_OW 25
36373: ST_TO_ADDR
// result := unit ;
36374: LD_ADDR_VAR 0 4
36378: PUSH
36379: LD_VAR 0 5
36383: ST_TO_ADDR
// end ;
36384: LD_VAR 0 4
36388: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36389: LD_INT 0
36391: PPUSH
36392: PPUSH
// if not side or not nation then
36393: LD_VAR 0 1
36397: NOT
36398: PUSH
36399: LD_VAR 0 2
36403: NOT
36404: OR
36405: IFFALSE 36409
// exit ;
36407: GO 37173
// case nation of nation_american :
36409: LD_VAR 0 2
36413: PUSH
36414: LD_INT 1
36416: DOUBLE
36417: EQUAL
36418: IFTRUE 36422
36420: GO 36636
36422: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36423: LD_ADDR_VAR 0 4
36427: PUSH
36428: LD_INT 35
36430: PUSH
36431: LD_INT 45
36433: PUSH
36434: LD_INT 46
36436: PUSH
36437: LD_INT 47
36439: PUSH
36440: LD_INT 82
36442: PUSH
36443: LD_INT 83
36445: PUSH
36446: LD_INT 84
36448: PUSH
36449: LD_INT 85
36451: PUSH
36452: LD_INT 86
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: LD_INT 6
36463: PUSH
36464: LD_INT 15
36466: PUSH
36467: LD_INT 16
36469: PUSH
36470: LD_INT 7
36472: PUSH
36473: LD_INT 12
36475: PUSH
36476: LD_INT 13
36478: PUSH
36479: LD_INT 10
36481: PUSH
36482: LD_INT 14
36484: PUSH
36485: LD_INT 20
36487: PUSH
36488: LD_INT 21
36490: PUSH
36491: LD_INT 22
36493: PUSH
36494: LD_INT 25
36496: PUSH
36497: LD_INT 32
36499: PUSH
36500: LD_INT 27
36502: PUSH
36503: LD_INT 36
36505: PUSH
36506: LD_INT 69
36508: PUSH
36509: LD_INT 39
36511: PUSH
36512: LD_INT 34
36514: PUSH
36515: LD_INT 40
36517: PUSH
36518: LD_INT 48
36520: PUSH
36521: LD_INT 49
36523: PUSH
36524: LD_INT 50
36526: PUSH
36527: LD_INT 51
36529: PUSH
36530: LD_INT 52
36532: PUSH
36533: LD_INT 53
36535: PUSH
36536: LD_INT 54
36538: PUSH
36539: LD_INT 55
36541: PUSH
36542: LD_INT 56
36544: PUSH
36545: LD_INT 57
36547: PUSH
36548: LD_INT 58
36550: PUSH
36551: LD_INT 59
36553: PUSH
36554: LD_INT 60
36556: PUSH
36557: LD_INT 61
36559: PUSH
36560: LD_INT 62
36562: PUSH
36563: LD_INT 80
36565: PUSH
36566: LD_INT 82
36568: PUSH
36569: LD_INT 83
36571: PUSH
36572: LD_INT 84
36574: PUSH
36575: LD_INT 85
36577: PUSH
36578: LD_INT 86
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: ST_TO_ADDR
36634: GO 37097
36636: LD_INT 2
36638: DOUBLE
36639: EQUAL
36640: IFTRUE 36644
36642: GO 36866
36644: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36645: LD_ADDR_VAR 0 4
36649: PUSH
36650: LD_INT 35
36652: PUSH
36653: LD_INT 45
36655: PUSH
36656: LD_INT 46
36658: PUSH
36659: LD_INT 47
36661: PUSH
36662: LD_INT 82
36664: PUSH
36665: LD_INT 83
36667: PUSH
36668: LD_INT 84
36670: PUSH
36671: LD_INT 85
36673: PUSH
36674: LD_INT 87
36676: PUSH
36677: LD_INT 70
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 11
36685: PUSH
36686: LD_INT 3
36688: PUSH
36689: LD_INT 4
36691: PUSH
36692: LD_INT 5
36694: PUSH
36695: LD_INT 6
36697: PUSH
36698: LD_INT 15
36700: PUSH
36701: LD_INT 18
36703: PUSH
36704: LD_INT 7
36706: PUSH
36707: LD_INT 17
36709: PUSH
36710: LD_INT 8
36712: PUSH
36713: LD_INT 20
36715: PUSH
36716: LD_INT 21
36718: PUSH
36719: LD_INT 22
36721: PUSH
36722: LD_INT 72
36724: PUSH
36725: LD_INT 26
36727: PUSH
36728: LD_INT 69
36730: PUSH
36731: LD_INT 39
36733: PUSH
36734: LD_INT 40
36736: PUSH
36737: LD_INT 41
36739: PUSH
36740: LD_INT 42
36742: PUSH
36743: LD_INT 43
36745: PUSH
36746: LD_INT 48
36748: PUSH
36749: LD_INT 49
36751: PUSH
36752: LD_INT 50
36754: PUSH
36755: LD_INT 51
36757: PUSH
36758: LD_INT 52
36760: PUSH
36761: LD_INT 53
36763: PUSH
36764: LD_INT 54
36766: PUSH
36767: LD_INT 55
36769: PUSH
36770: LD_INT 56
36772: PUSH
36773: LD_INT 60
36775: PUSH
36776: LD_INT 61
36778: PUSH
36779: LD_INT 62
36781: PUSH
36782: LD_INT 66
36784: PUSH
36785: LD_INT 67
36787: PUSH
36788: LD_INT 68
36790: PUSH
36791: LD_INT 81
36793: PUSH
36794: LD_INT 82
36796: PUSH
36797: LD_INT 83
36799: PUSH
36800: LD_INT 84
36802: PUSH
36803: LD_INT 85
36805: PUSH
36806: LD_INT 87
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
36864: GO 37097
36866: LD_INT 3
36868: DOUBLE
36869: EQUAL
36870: IFTRUE 36874
36872: GO 37096
36874: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36875: LD_ADDR_VAR 0 4
36879: PUSH
36880: LD_INT 46
36882: PUSH
36883: LD_INT 47
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: LD_INT 82
36894: PUSH
36895: LD_INT 83
36897: PUSH
36898: LD_INT 84
36900: PUSH
36901: LD_INT 85
36903: PUSH
36904: LD_INT 86
36906: PUSH
36907: LD_INT 11
36909: PUSH
36910: LD_INT 9
36912: PUSH
36913: LD_INT 20
36915: PUSH
36916: LD_INT 19
36918: PUSH
36919: LD_INT 21
36921: PUSH
36922: LD_INT 24
36924: PUSH
36925: LD_INT 22
36927: PUSH
36928: LD_INT 25
36930: PUSH
36931: LD_INT 28
36933: PUSH
36934: LD_INT 29
36936: PUSH
36937: LD_INT 30
36939: PUSH
36940: LD_INT 31
36942: PUSH
36943: LD_INT 37
36945: PUSH
36946: LD_INT 38
36948: PUSH
36949: LD_INT 32
36951: PUSH
36952: LD_INT 27
36954: PUSH
36955: LD_INT 33
36957: PUSH
36958: LD_INT 69
36960: PUSH
36961: LD_INT 39
36963: PUSH
36964: LD_INT 34
36966: PUSH
36967: LD_INT 40
36969: PUSH
36970: LD_INT 71
36972: PUSH
36973: LD_INT 23
36975: PUSH
36976: LD_INT 44
36978: PUSH
36979: LD_INT 48
36981: PUSH
36982: LD_INT 49
36984: PUSH
36985: LD_INT 50
36987: PUSH
36988: LD_INT 51
36990: PUSH
36991: LD_INT 52
36993: PUSH
36994: LD_INT 53
36996: PUSH
36997: LD_INT 54
36999: PUSH
37000: LD_INT 55
37002: PUSH
37003: LD_INT 56
37005: PUSH
37006: LD_INT 57
37008: PUSH
37009: LD_INT 58
37011: PUSH
37012: LD_INT 59
37014: PUSH
37015: LD_INT 63
37017: PUSH
37018: LD_INT 64
37020: PUSH
37021: LD_INT 65
37023: PUSH
37024: LD_INT 82
37026: PUSH
37027: LD_INT 83
37029: PUSH
37030: LD_INT 84
37032: PUSH
37033: LD_INT 85
37035: PUSH
37036: LD_INT 86
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
37094: GO 37097
37096: POP
// if state > - 1 and state < 3 then
37097: LD_VAR 0 3
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: GREATER
37106: PUSH
37107: LD_VAR 0 3
37111: PUSH
37112: LD_INT 3
37114: LESS
37115: AND
37116: IFFALSE 37173
// for i in result do
37118: LD_ADDR_VAR 0 5
37122: PUSH
37123: LD_VAR 0 4
37127: PUSH
37128: FOR_IN
37129: IFFALSE 37171
// if GetTech ( i , side ) <> state then
37131: LD_VAR 0 5
37135: PPUSH
37136: LD_VAR 0 1
37140: PPUSH
37141: CALL_OW 321
37145: PUSH
37146: LD_VAR 0 3
37150: NONEQUAL
37151: IFFALSE 37169
// result := result diff i ;
37153: LD_ADDR_VAR 0 4
37157: PUSH
37158: LD_VAR 0 4
37162: PUSH
37163: LD_VAR 0 5
37167: DIFF
37168: ST_TO_ADDR
37169: GO 37128
37171: POP
37172: POP
// end ;
37173: LD_VAR 0 4
37177: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37178: LD_INT 0
37180: PPUSH
37181: PPUSH
37182: PPUSH
// result := true ;
37183: LD_ADDR_VAR 0 3
37187: PUSH
37188: LD_INT 1
37190: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37191: LD_ADDR_VAR 0 5
37195: PUSH
37196: LD_VAR 0 2
37200: PPUSH
37201: CALL_OW 480
37205: ST_TO_ADDR
// if not tmp then
37206: LD_VAR 0 5
37210: NOT
37211: IFFALSE 37215
// exit ;
37213: GO 37264
// for i in tmp do
37215: LD_ADDR_VAR 0 4
37219: PUSH
37220: LD_VAR 0 5
37224: PUSH
37225: FOR_IN
37226: IFFALSE 37262
// if GetTech ( i , side ) <> state_researched then
37228: LD_VAR 0 4
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 321
37242: PUSH
37243: LD_INT 2
37245: NONEQUAL
37246: IFFALSE 37260
// begin result := false ;
37248: LD_ADDR_VAR 0 3
37252: PUSH
37253: LD_INT 0
37255: ST_TO_ADDR
// exit ;
37256: POP
37257: POP
37258: GO 37264
// end ;
37260: GO 37225
37262: POP
37263: POP
// end ;
37264: LD_VAR 0 3
37268: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37269: LD_INT 0
37271: PPUSH
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37284: LD_VAR 0 1
37288: NOT
37289: PUSH
37290: LD_VAR 0 1
37294: PPUSH
37295: CALL_OW 257
37299: PUSH
37300: LD_INT 9
37302: NONEQUAL
37303: OR
37304: IFFALSE 37308
// exit ;
37306: GO 37881
// side := GetSide ( unit ) ;
37308: LD_ADDR_VAR 0 9
37312: PUSH
37313: LD_VAR 0 1
37317: PPUSH
37318: CALL_OW 255
37322: ST_TO_ADDR
// tech_space := tech_spacanom ;
37323: LD_ADDR_VAR 0 12
37327: PUSH
37328: LD_INT 29
37330: ST_TO_ADDR
// tech_time := tech_taurad ;
37331: LD_ADDR_VAR 0 13
37335: PUSH
37336: LD_INT 28
37338: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37339: LD_ADDR_VAR 0 11
37343: PUSH
37344: LD_VAR 0 1
37348: PPUSH
37349: CALL_OW 310
37353: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37354: LD_VAR 0 11
37358: PPUSH
37359: CALL_OW 247
37363: PUSH
37364: LD_INT 2
37366: EQUAL
37367: IFFALSE 37371
// exit ;
37369: GO 37881
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37371: LD_ADDR_VAR 0 8
37375: PUSH
37376: LD_INT 81
37378: PUSH
37379: LD_VAR 0 9
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 3
37390: PUSH
37391: LD_INT 21
37393: PUSH
37394: LD_INT 3
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PPUSH
37409: CALL_OW 69
37413: ST_TO_ADDR
// if not tmp then
37414: LD_VAR 0 8
37418: NOT
37419: IFFALSE 37423
// exit ;
37421: GO 37881
// if in_unit then
37423: LD_VAR 0 11
37427: IFFALSE 37451
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37429: LD_ADDR_VAR 0 10
37433: PUSH
37434: LD_VAR 0 8
37438: PPUSH
37439: LD_VAR 0 11
37443: PPUSH
37444: CALL_OW 74
37448: ST_TO_ADDR
37449: GO 37471
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37451: LD_ADDR_VAR 0 10
37455: PUSH
37456: LD_VAR 0 8
37460: PPUSH
37461: LD_VAR 0 1
37465: PPUSH
37466: CALL_OW 74
37470: ST_TO_ADDR
// if not enemy then
37471: LD_VAR 0 10
37475: NOT
37476: IFFALSE 37480
// exit ;
37478: GO 37881
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37480: LD_VAR 0 11
37484: PUSH
37485: LD_VAR 0 11
37489: PPUSH
37490: LD_VAR 0 10
37494: PPUSH
37495: CALL_OW 296
37499: PUSH
37500: LD_INT 13
37502: GREATER
37503: AND
37504: PUSH
37505: LD_VAR 0 1
37509: PPUSH
37510: LD_VAR 0 10
37514: PPUSH
37515: CALL_OW 296
37519: PUSH
37520: LD_INT 12
37522: GREATER
37523: OR
37524: IFFALSE 37528
// exit ;
37526: GO 37881
// missile := [ 1 ] ;
37528: LD_ADDR_VAR 0 14
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37539: LD_VAR 0 9
37543: PPUSH
37544: LD_VAR 0 12
37548: PPUSH
37549: CALL_OW 325
37553: IFFALSE 37582
// missile := Insert ( missile , missile + 1 , 2 ) ;
37555: LD_ADDR_VAR 0 14
37559: PUSH
37560: LD_VAR 0 14
37564: PPUSH
37565: LD_VAR 0 14
37569: PUSH
37570: LD_INT 1
37572: PLUS
37573: PPUSH
37574: LD_INT 2
37576: PPUSH
37577: CALL_OW 2
37581: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37582: LD_VAR 0 9
37586: PPUSH
37587: LD_VAR 0 13
37591: PPUSH
37592: CALL_OW 325
37596: PUSH
37597: LD_VAR 0 10
37601: PPUSH
37602: CALL_OW 255
37606: PPUSH
37607: LD_VAR 0 13
37611: PPUSH
37612: CALL_OW 325
37616: NOT
37617: AND
37618: IFFALSE 37647
// missile := Insert ( missile , missile + 1 , 3 ) ;
37620: LD_ADDR_VAR 0 14
37624: PUSH
37625: LD_VAR 0 14
37629: PPUSH
37630: LD_VAR 0 14
37634: PUSH
37635: LD_INT 1
37637: PLUS
37638: PPUSH
37639: LD_INT 3
37641: PPUSH
37642: CALL_OW 2
37646: ST_TO_ADDR
// if missile < 2 then
37647: LD_VAR 0 14
37651: PUSH
37652: LD_INT 2
37654: LESS
37655: IFFALSE 37659
// exit ;
37657: GO 37881
// x := GetX ( enemy ) ;
37659: LD_ADDR_VAR 0 4
37663: PUSH
37664: LD_VAR 0 10
37668: PPUSH
37669: CALL_OW 250
37673: ST_TO_ADDR
// y := GetY ( enemy ) ;
37674: LD_ADDR_VAR 0 5
37678: PUSH
37679: LD_VAR 0 10
37683: PPUSH
37684: CALL_OW 251
37688: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37689: LD_ADDR_VAR 0 6
37693: PUSH
37694: LD_VAR 0 4
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PPUSH
37703: LD_INT 1
37705: PPUSH
37706: CALL_OW 12
37710: PLUS
37711: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37712: LD_ADDR_VAR 0 7
37716: PUSH
37717: LD_VAR 0 5
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PPUSH
37726: LD_INT 1
37728: PPUSH
37729: CALL_OW 12
37733: PLUS
37734: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37735: LD_VAR 0 6
37739: PPUSH
37740: LD_VAR 0 7
37744: PPUSH
37745: CALL_OW 488
37749: NOT
37750: IFFALSE 37772
// begin _x := x ;
37752: LD_ADDR_VAR 0 6
37756: PUSH
37757: LD_VAR 0 4
37761: ST_TO_ADDR
// _y := y ;
37762: LD_ADDR_VAR 0 7
37766: PUSH
37767: LD_VAR 0 5
37771: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37772: LD_ADDR_VAR 0 3
37776: PUSH
37777: LD_INT 1
37779: PPUSH
37780: LD_VAR 0 14
37784: PPUSH
37785: CALL_OW 12
37789: ST_TO_ADDR
// case i of 1 :
37790: LD_VAR 0 3
37794: PUSH
37795: LD_INT 1
37797: DOUBLE
37798: EQUAL
37799: IFTRUE 37803
37801: GO 37820
37803: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37804: LD_VAR 0 1
37808: PPUSH
37809: LD_VAR 0 10
37813: PPUSH
37814: CALL_OW 115
37818: GO 37881
37820: LD_INT 2
37822: DOUBLE
37823: EQUAL
37824: IFTRUE 37828
37826: GO 37850
37828: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37829: LD_VAR 0 1
37833: PPUSH
37834: LD_VAR 0 6
37838: PPUSH
37839: LD_VAR 0 7
37843: PPUSH
37844: CALL_OW 153
37848: GO 37881
37850: LD_INT 3
37852: DOUBLE
37853: EQUAL
37854: IFTRUE 37858
37856: GO 37880
37858: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37859: LD_VAR 0 1
37863: PPUSH
37864: LD_VAR 0 6
37868: PPUSH
37869: LD_VAR 0 7
37873: PPUSH
37874: CALL_OW 154
37878: GO 37881
37880: POP
// end ;
37881: LD_VAR 0 2
37885: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37886: LD_INT 0
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
37893: PPUSH
// if not unit or not building then
37894: LD_VAR 0 1
37898: NOT
37899: PUSH
37900: LD_VAR 0 2
37904: NOT
37905: OR
37906: IFFALSE 37910
// exit ;
37908: GO 38068
// x := GetX ( building ) ;
37910: LD_ADDR_VAR 0 5
37914: PUSH
37915: LD_VAR 0 2
37919: PPUSH
37920: CALL_OW 250
37924: ST_TO_ADDR
// y := GetY ( building ) ;
37925: LD_ADDR_VAR 0 6
37929: PUSH
37930: LD_VAR 0 2
37934: PPUSH
37935: CALL_OW 251
37939: ST_TO_ADDR
// for i = 0 to 5 do
37940: LD_ADDR_VAR 0 4
37944: PUSH
37945: DOUBLE
37946: LD_INT 0
37948: DEC
37949: ST_TO_ADDR
37950: LD_INT 5
37952: PUSH
37953: FOR_TO
37954: IFFALSE 38066
// begin _x := ShiftX ( x , i , 3 ) ;
37956: LD_ADDR_VAR 0 7
37960: PUSH
37961: LD_VAR 0 5
37965: PPUSH
37966: LD_VAR 0 4
37970: PPUSH
37971: LD_INT 3
37973: PPUSH
37974: CALL_OW 272
37978: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37979: LD_ADDR_VAR 0 8
37983: PUSH
37984: LD_VAR 0 6
37988: PPUSH
37989: LD_VAR 0 4
37993: PPUSH
37994: LD_INT 3
37996: PPUSH
37997: CALL_OW 273
38001: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38002: LD_VAR 0 7
38006: PPUSH
38007: LD_VAR 0 8
38011: PPUSH
38012: CALL_OW 488
38016: NOT
38017: IFFALSE 38021
// continue ;
38019: GO 37953
// if HexInfo ( _x , _y ) = 0 then
38021: LD_VAR 0 7
38025: PPUSH
38026: LD_VAR 0 8
38030: PPUSH
38031: CALL_OW 428
38035: PUSH
38036: LD_INT 0
38038: EQUAL
38039: IFFALSE 38064
// begin ComMoveXY ( unit , _x , _y ) ;
38041: LD_VAR 0 1
38045: PPUSH
38046: LD_VAR 0 7
38050: PPUSH
38051: LD_VAR 0 8
38055: PPUSH
38056: CALL_OW 111
// exit ;
38060: POP
38061: POP
38062: GO 38068
// end ; end ;
38064: GO 37953
38066: POP
38067: POP
// end ;
38068: LD_VAR 0 3
38072: RET
// export function ScanBase ( side , base_area ) ; begin
38073: LD_INT 0
38075: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38076: LD_ADDR_VAR 0 3
38080: PUSH
38081: LD_VAR 0 2
38085: PPUSH
38086: LD_INT 81
38088: PUSH
38089: LD_VAR 0 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PPUSH
38098: CALL_OW 70
38102: ST_TO_ADDR
// end ;
38103: LD_VAR 0 3
38107: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38108: LD_INT 0
38110: PPUSH
38111: PPUSH
38112: PPUSH
38113: PPUSH
// result := false ;
38114: LD_ADDR_VAR 0 2
38118: PUSH
38119: LD_INT 0
38121: ST_TO_ADDR
// side := GetSide ( unit ) ;
38122: LD_ADDR_VAR 0 3
38126: PUSH
38127: LD_VAR 0 1
38131: PPUSH
38132: CALL_OW 255
38136: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38137: LD_ADDR_VAR 0 4
38141: PUSH
38142: LD_VAR 0 1
38146: PPUSH
38147: CALL_OW 248
38151: ST_TO_ADDR
// case nat of 1 :
38152: LD_VAR 0 4
38156: PUSH
38157: LD_INT 1
38159: DOUBLE
38160: EQUAL
38161: IFTRUE 38165
38163: GO 38176
38165: POP
// tech := tech_lassight ; 2 :
38166: LD_ADDR_VAR 0 5
38170: PUSH
38171: LD_INT 12
38173: ST_TO_ADDR
38174: GO 38215
38176: LD_INT 2
38178: DOUBLE
38179: EQUAL
38180: IFTRUE 38184
38182: GO 38195
38184: POP
// tech := tech_mortar ; 3 :
38185: LD_ADDR_VAR 0 5
38189: PUSH
38190: LD_INT 41
38192: ST_TO_ADDR
38193: GO 38215
38195: LD_INT 3
38197: DOUBLE
38198: EQUAL
38199: IFTRUE 38203
38201: GO 38214
38203: POP
// tech := tech_bazooka ; end ;
38204: LD_ADDR_VAR 0 5
38208: PUSH
38209: LD_INT 44
38211: ST_TO_ADDR
38212: GO 38215
38214: POP
// if Researched ( side , tech ) then
38215: LD_VAR 0 3
38219: PPUSH
38220: LD_VAR 0 5
38224: PPUSH
38225: CALL_OW 325
38229: IFFALSE 38256
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38231: LD_ADDR_VAR 0 2
38235: PUSH
38236: LD_INT 5
38238: PUSH
38239: LD_INT 8
38241: PUSH
38242: LD_INT 9
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: PUSH
38250: LD_VAR 0 4
38254: ARRAY
38255: ST_TO_ADDR
// end ;
38256: LD_VAR 0 2
38260: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38261: LD_INT 0
38263: PPUSH
38264: PPUSH
38265: PPUSH
// if not mines then
38266: LD_VAR 0 2
38270: NOT
38271: IFFALSE 38275
// exit ;
38273: GO 38419
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38275: LD_ADDR_VAR 0 5
38279: PUSH
38280: LD_INT 81
38282: PUSH
38283: LD_VAR 0 1
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 3
38294: PUSH
38295: LD_INT 21
38297: PUSH
38298: LD_INT 3
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PPUSH
38313: CALL_OW 69
38317: ST_TO_ADDR
// for i in mines do
38318: LD_ADDR_VAR 0 4
38322: PUSH
38323: LD_VAR 0 2
38327: PUSH
38328: FOR_IN
38329: IFFALSE 38417
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38331: LD_VAR 0 4
38335: PUSH
38336: LD_INT 1
38338: ARRAY
38339: PPUSH
38340: LD_VAR 0 4
38344: PUSH
38345: LD_INT 2
38347: ARRAY
38348: PPUSH
38349: CALL_OW 458
38353: NOT
38354: IFFALSE 38358
// continue ;
38356: GO 38328
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38358: LD_VAR 0 4
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: LD_VAR 0 4
38371: PUSH
38372: LD_INT 2
38374: ARRAY
38375: PPUSH
38376: CALL_OW 428
38380: PUSH
38381: LD_VAR 0 5
38385: IN
38386: IFFALSE 38415
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38388: LD_VAR 0 4
38392: PUSH
38393: LD_INT 1
38395: ARRAY
38396: PPUSH
38397: LD_VAR 0 4
38401: PUSH
38402: LD_INT 2
38404: ARRAY
38405: PPUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: CALL_OW 456
// end ;
38415: GO 38328
38417: POP
38418: POP
// end ;
38419: LD_VAR 0 3
38423: RET
// export function Count ( array ) ; var i ; begin
38424: LD_INT 0
38426: PPUSH
38427: PPUSH
// result := 0 ;
38428: LD_ADDR_VAR 0 2
38432: PUSH
38433: LD_INT 0
38435: ST_TO_ADDR
// for i in array do
38436: LD_ADDR_VAR 0 3
38440: PUSH
38441: LD_VAR 0 1
38445: PUSH
38446: FOR_IN
38447: IFFALSE 38471
// if i then
38449: LD_VAR 0 3
38453: IFFALSE 38469
// result := result + 1 ;
38455: LD_ADDR_VAR 0 2
38459: PUSH
38460: LD_VAR 0 2
38464: PUSH
38465: LD_INT 1
38467: PLUS
38468: ST_TO_ADDR
38469: GO 38446
38471: POP
38472: POP
// end ;
38473: LD_VAR 0 2
38477: RET
// export function IsEmpty ( building ) ; begin
38478: LD_INT 0
38480: PPUSH
// if not building then
38481: LD_VAR 0 1
38485: NOT
38486: IFFALSE 38490
// exit ;
38488: GO 38533
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38490: LD_ADDR_VAR 0 2
38494: PUSH
38495: LD_VAR 0 1
38499: PUSH
38500: LD_INT 22
38502: PUSH
38503: LD_VAR 0 1
38507: PPUSH
38508: CALL_OW 255
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 58
38519: PUSH
38520: EMPTY
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PPUSH
38527: CALL_OW 69
38531: IN
38532: ST_TO_ADDR
// end ;
38533: LD_VAR 0 2
38537: RET
// export function IsNotFull ( building ) ; begin
38538: LD_INT 0
38540: PPUSH
// if not building then
38541: LD_VAR 0 1
38545: NOT
38546: IFFALSE 38550
// exit ;
38548: GO 38569
// result := UnitsInside ( building ) < 6 ;
38550: LD_ADDR_VAR 0 2
38554: PUSH
38555: LD_VAR 0 1
38559: PPUSH
38560: CALL_OW 313
38564: PUSH
38565: LD_INT 6
38567: LESS
38568: ST_TO_ADDR
// end ;
38569: LD_VAR 0 2
38573: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38574: LD_INT 0
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
// tmp := [ ] ;
38580: LD_ADDR_VAR 0 3
38584: PUSH
38585: EMPTY
38586: ST_TO_ADDR
// list := [ ] ;
38587: LD_ADDR_VAR 0 5
38591: PUSH
38592: EMPTY
38593: ST_TO_ADDR
// for i = 16 to 25 do
38594: LD_ADDR_VAR 0 4
38598: PUSH
38599: DOUBLE
38600: LD_INT 16
38602: DEC
38603: ST_TO_ADDR
38604: LD_INT 25
38606: PUSH
38607: FOR_TO
38608: IFFALSE 38681
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38610: LD_ADDR_VAR 0 3
38614: PUSH
38615: LD_VAR 0 3
38619: PUSH
38620: LD_INT 22
38622: PUSH
38623: LD_VAR 0 1
38627: PPUSH
38628: CALL_OW 255
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 91
38639: PUSH
38640: LD_VAR 0 1
38644: PUSH
38645: LD_INT 6
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 30
38655: PUSH
38656: LD_VAR 0 4
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: PUSH
38670: EMPTY
38671: LIST
38672: PPUSH
38673: CALL_OW 69
38677: ADD
38678: ST_TO_ADDR
38679: GO 38607
38681: POP
38682: POP
// for i = 1 to tmp do
38683: LD_ADDR_VAR 0 4
38687: PUSH
38688: DOUBLE
38689: LD_INT 1
38691: DEC
38692: ST_TO_ADDR
38693: LD_VAR 0 3
38697: PUSH
38698: FOR_TO
38699: IFFALSE 38787
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38701: LD_ADDR_VAR 0 5
38705: PUSH
38706: LD_VAR 0 5
38710: PUSH
38711: LD_VAR 0 3
38715: PUSH
38716: LD_VAR 0 4
38720: ARRAY
38721: PPUSH
38722: CALL_OW 266
38726: PUSH
38727: LD_VAR 0 3
38731: PUSH
38732: LD_VAR 0 4
38736: ARRAY
38737: PPUSH
38738: CALL_OW 250
38742: PUSH
38743: LD_VAR 0 3
38747: PUSH
38748: LD_VAR 0 4
38752: ARRAY
38753: PPUSH
38754: CALL_OW 251
38758: PUSH
38759: LD_VAR 0 3
38763: PUSH
38764: LD_VAR 0 4
38768: ARRAY
38769: PPUSH
38770: CALL_OW 254
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: PUSH
38781: EMPTY
38782: LIST
38783: ADD
38784: ST_TO_ADDR
38785: GO 38698
38787: POP
38788: POP
// result := list ;
38789: LD_ADDR_VAR 0 2
38793: PUSH
38794: LD_VAR 0 5
38798: ST_TO_ADDR
// end ;
38799: LD_VAR 0 2
38803: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38804: LD_INT 0
38806: PPUSH
38807: PPUSH
38808: PPUSH
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
// if not factory then
38813: LD_VAR 0 1
38817: NOT
38818: IFFALSE 38822
// exit ;
38820: GO 39415
// if control = control_apeman then
38822: LD_VAR 0 4
38826: PUSH
38827: LD_INT 5
38829: EQUAL
38830: IFFALSE 38939
// begin tmp := UnitsInside ( factory ) ;
38832: LD_ADDR_VAR 0 8
38836: PUSH
38837: LD_VAR 0 1
38841: PPUSH
38842: CALL_OW 313
38846: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38847: LD_VAR 0 8
38851: PPUSH
38852: LD_INT 25
38854: PUSH
38855: LD_INT 12
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PPUSH
38862: CALL_OW 72
38866: NOT
38867: IFFALSE 38877
// control := control_manual ;
38869: LD_ADDR_VAR 0 4
38873: PUSH
38874: LD_INT 1
38876: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38877: LD_ADDR_VAR 0 8
38881: PUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: CALL 38574 0 1
38891: ST_TO_ADDR
// if tmp then
38892: LD_VAR 0 8
38896: IFFALSE 38939
// begin for i in tmp do
38898: LD_ADDR_VAR 0 7
38902: PUSH
38903: LD_VAR 0 8
38907: PUSH
38908: FOR_IN
38909: IFFALSE 38937
// if i [ 1 ] = b_ext_radio then
38911: LD_VAR 0 7
38915: PUSH
38916: LD_INT 1
38918: ARRAY
38919: PUSH
38920: LD_INT 22
38922: EQUAL
38923: IFFALSE 38935
// begin control := control_remote ;
38925: LD_ADDR_VAR 0 4
38929: PUSH
38930: LD_INT 2
38932: ST_TO_ADDR
// break ;
38933: GO 38937
// end ;
38935: GO 38908
38937: POP
38938: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38939: LD_VAR 0 1
38943: PPUSH
38944: LD_VAR 0 2
38948: PPUSH
38949: LD_VAR 0 3
38953: PPUSH
38954: LD_VAR 0 4
38958: PPUSH
38959: LD_VAR 0 5
38963: PPUSH
38964: CALL_OW 448
38968: IFFALSE 39003
// begin result := [ chassis , engine , control , weapon ] ;
38970: LD_ADDR_VAR 0 6
38974: PUSH
38975: LD_VAR 0 2
38979: PUSH
38980: LD_VAR 0 3
38984: PUSH
38985: LD_VAR 0 4
38989: PUSH
38990: LD_VAR 0 5
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: ST_TO_ADDR
// exit ;
39001: GO 39415
// end ; _chassis := AvailableChassisList ( factory ) ;
39003: LD_ADDR_VAR 0 9
39007: PUSH
39008: LD_VAR 0 1
39012: PPUSH
39013: CALL_OW 475
39017: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39018: LD_ADDR_VAR 0 11
39022: PUSH
39023: LD_VAR 0 1
39027: PPUSH
39028: CALL_OW 476
39032: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39033: LD_ADDR_VAR 0 12
39037: PUSH
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 477
39047: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39048: LD_ADDR_VAR 0 10
39052: PUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL_OW 478
39062: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39063: LD_VAR 0 9
39067: NOT
39068: PUSH
39069: LD_VAR 0 11
39073: NOT
39074: OR
39075: PUSH
39076: LD_VAR 0 12
39080: NOT
39081: OR
39082: PUSH
39083: LD_VAR 0 10
39087: NOT
39088: OR
39089: IFFALSE 39124
// begin result := [ chassis , engine , control , weapon ] ;
39091: LD_ADDR_VAR 0 6
39095: PUSH
39096: LD_VAR 0 2
39100: PUSH
39101: LD_VAR 0 3
39105: PUSH
39106: LD_VAR 0 4
39110: PUSH
39111: LD_VAR 0 5
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: ST_TO_ADDR
// exit ;
39122: GO 39415
// end ; if not chassis in _chassis then
39124: LD_VAR 0 2
39128: PUSH
39129: LD_VAR 0 9
39133: IN
39134: NOT
39135: IFFALSE 39161
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39137: LD_ADDR_VAR 0 2
39141: PUSH
39142: LD_VAR 0 9
39146: PUSH
39147: LD_INT 1
39149: PPUSH
39150: LD_VAR 0 9
39154: PPUSH
39155: CALL_OW 12
39159: ARRAY
39160: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39161: LD_VAR 0 2
39165: PPUSH
39166: LD_VAR 0 3
39170: PPUSH
39171: CALL 39420 0 2
39175: NOT
39176: IFFALSE 39235
// repeat engine := _engine [ 1 ] ;
39178: LD_ADDR_VAR 0 3
39182: PUSH
39183: LD_VAR 0 11
39187: PUSH
39188: LD_INT 1
39190: ARRAY
39191: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39192: LD_ADDR_VAR 0 11
39196: PUSH
39197: LD_VAR 0 11
39201: PPUSH
39202: LD_INT 1
39204: PPUSH
39205: CALL_OW 3
39209: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39210: LD_VAR 0 2
39214: PPUSH
39215: LD_VAR 0 3
39219: PPUSH
39220: CALL 39420 0 2
39224: PUSH
39225: LD_VAR 0 11
39229: PUSH
39230: EMPTY
39231: EQUAL
39232: OR
39233: IFFALSE 39178
// if not control in _control then
39235: LD_VAR 0 4
39239: PUSH
39240: LD_VAR 0 12
39244: IN
39245: NOT
39246: IFFALSE 39272
// control := _control [ rand ( 1 , _control ) ] ;
39248: LD_ADDR_VAR 0 4
39252: PUSH
39253: LD_VAR 0 12
39257: PUSH
39258: LD_INT 1
39260: PPUSH
39261: LD_VAR 0 12
39265: PPUSH
39266: CALL_OW 12
39270: ARRAY
39271: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39272: LD_VAR 0 2
39276: PPUSH
39277: LD_VAR 0 5
39281: PPUSH
39282: CALL 39640 0 2
39286: NOT
39287: IFFALSE 39346
// repeat weapon := _weapon [ 1 ] ;
39289: LD_ADDR_VAR 0 5
39293: PUSH
39294: LD_VAR 0 10
39298: PUSH
39299: LD_INT 1
39301: ARRAY
39302: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39303: LD_ADDR_VAR 0 10
39307: PUSH
39308: LD_VAR 0 10
39312: PPUSH
39313: LD_INT 1
39315: PPUSH
39316: CALL_OW 3
39320: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39321: LD_VAR 0 2
39325: PPUSH
39326: LD_VAR 0 5
39330: PPUSH
39331: CALL 39640 0 2
39335: PUSH
39336: LD_VAR 0 10
39340: PUSH
39341: EMPTY
39342: EQUAL
39343: OR
39344: IFFALSE 39289
// result := [ ] ;
39346: LD_ADDR_VAR 0 6
39350: PUSH
39351: EMPTY
39352: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39353: LD_VAR 0 1
39357: PPUSH
39358: LD_VAR 0 2
39362: PPUSH
39363: LD_VAR 0 3
39367: PPUSH
39368: LD_VAR 0 4
39372: PPUSH
39373: LD_VAR 0 5
39377: PPUSH
39378: CALL_OW 448
39382: IFFALSE 39415
// result := [ chassis , engine , control , weapon ] ;
39384: LD_ADDR_VAR 0 6
39388: PUSH
39389: LD_VAR 0 2
39393: PUSH
39394: LD_VAR 0 3
39398: PUSH
39399: LD_VAR 0 4
39403: PUSH
39404: LD_VAR 0 5
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
// end ;
39415: LD_VAR 0 6
39419: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39420: LD_INT 0
39422: PPUSH
// if not chassis or not engine then
39423: LD_VAR 0 1
39427: NOT
39428: PUSH
39429: LD_VAR 0 2
39433: NOT
39434: OR
39435: IFFALSE 39439
// exit ;
39437: GO 39635
// case engine of engine_solar :
39439: LD_VAR 0 2
39443: PUSH
39444: LD_INT 2
39446: DOUBLE
39447: EQUAL
39448: IFTRUE 39452
39450: GO 39490
39452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: LD_INT 11
39460: PUSH
39461: LD_INT 12
39463: PUSH
39464: LD_INT 13
39466: PUSH
39467: LD_INT 14
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: ST_TO_ADDR
39488: GO 39619
39490: LD_INT 1
39492: DOUBLE
39493: EQUAL
39494: IFTRUE 39498
39496: GO 39560
39498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39499: LD_ADDR_VAR 0 3
39503: PUSH
39504: LD_INT 11
39506: PUSH
39507: LD_INT 12
39509: PUSH
39510: LD_INT 13
39512: PUSH
39513: LD_INT 14
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: LD_INT 3
39524: PUSH
39525: LD_INT 4
39527: PUSH
39528: LD_INT 5
39530: PUSH
39531: LD_INT 21
39533: PUSH
39534: LD_INT 23
39536: PUSH
39537: LD_INT 22
39539: PUSH
39540: LD_INT 24
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
39558: GO 39619
39560: LD_INT 3
39562: DOUBLE
39563: EQUAL
39564: IFTRUE 39568
39566: GO 39618
39568: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39569: LD_ADDR_VAR 0 3
39573: PUSH
39574: LD_INT 13
39576: PUSH
39577: LD_INT 14
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: LD_INT 4
39588: PUSH
39589: LD_INT 5
39591: PUSH
39592: LD_INT 21
39594: PUSH
39595: LD_INT 22
39597: PUSH
39598: LD_INT 23
39600: PUSH
39601: LD_INT 24
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: ST_TO_ADDR
39616: GO 39619
39618: POP
// result := ( chassis in result ) ;
39619: LD_ADDR_VAR 0 3
39623: PUSH
39624: LD_VAR 0 1
39628: PUSH
39629: LD_VAR 0 3
39633: IN
39634: ST_TO_ADDR
// end ;
39635: LD_VAR 0 3
39639: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39640: LD_INT 0
39642: PPUSH
// if not chassis or not weapon then
39643: LD_VAR 0 1
39647: NOT
39648: PUSH
39649: LD_VAR 0 2
39653: NOT
39654: OR
39655: IFFALSE 39659
// exit ;
39657: GO 40685
// case weapon of us_machine_gun :
39659: LD_VAR 0 2
39663: PUSH
39664: LD_INT 2
39666: DOUBLE
39667: EQUAL
39668: IFTRUE 39672
39670: GO 39702
39672: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39673: LD_ADDR_VAR 0 3
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 3
39686: PUSH
39687: LD_INT 4
39689: PUSH
39690: LD_INT 5
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: ST_TO_ADDR
39700: GO 40669
39702: LD_INT 3
39704: DOUBLE
39705: EQUAL
39706: IFTRUE 39710
39708: GO 39740
39710: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39711: LD_ADDR_VAR 0 3
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 3
39724: PUSH
39725: LD_INT 4
39727: PUSH
39728: LD_INT 5
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: ST_TO_ADDR
39738: GO 40669
39740: LD_INT 11
39742: DOUBLE
39743: EQUAL
39744: IFTRUE 39748
39746: GO 39778
39748: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39749: LD_ADDR_VAR 0 3
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: LD_INT 4
39765: PUSH
39766: LD_INT 5
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: ST_TO_ADDR
39776: GO 40669
39778: LD_INT 4
39780: DOUBLE
39781: EQUAL
39782: IFTRUE 39786
39784: GO 39812
39786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39787: LD_ADDR_VAR 0 3
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: LD_INT 4
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: ST_TO_ADDR
39810: GO 40669
39812: LD_INT 5
39814: DOUBLE
39815: EQUAL
39816: IFTRUE 39820
39818: GO 39846
39820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39821: LD_ADDR_VAR 0 3
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 3
39831: PUSH
39832: LD_INT 4
39834: PUSH
39835: LD_INT 5
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: ST_TO_ADDR
39844: GO 40669
39846: LD_INT 9
39848: DOUBLE
39849: EQUAL
39850: IFTRUE 39854
39852: GO 39880
39854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39855: LD_ADDR_VAR 0 3
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: LD_INT 4
39868: PUSH
39869: LD_INT 5
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: ST_TO_ADDR
39878: GO 40669
39880: LD_INT 7
39882: DOUBLE
39883: EQUAL
39884: IFTRUE 39888
39886: GO 39914
39888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_INT 2
39896: PUSH
39897: LD_INT 3
39899: PUSH
39900: LD_INT 4
39902: PUSH
39903: LD_INT 5
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: ST_TO_ADDR
39912: GO 40669
39914: LD_INT 12
39916: DOUBLE
39917: EQUAL
39918: IFTRUE 39922
39920: GO 39948
39922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39923: LD_ADDR_VAR 0 3
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 3
39933: PUSH
39934: LD_INT 4
39936: PUSH
39937: LD_INT 5
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: ST_TO_ADDR
39946: GO 40669
39948: LD_INT 13
39950: DOUBLE
39951: EQUAL
39952: IFTRUE 39956
39954: GO 39982
39956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39957: LD_ADDR_VAR 0 3
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: LD_INT 4
39970: PUSH
39971: LD_INT 5
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: ST_TO_ADDR
39980: GO 40669
39982: LD_INT 14
39984: DOUBLE
39985: EQUAL
39986: IFTRUE 39990
39988: GO 40008
39990: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39991: LD_ADDR_VAR 0 3
39995: PUSH
39996: LD_INT 4
39998: PUSH
39999: LD_INT 5
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: ST_TO_ADDR
40006: GO 40669
40008: LD_INT 6
40010: DOUBLE
40011: EQUAL
40012: IFTRUE 40016
40014: GO 40034
40016: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40017: LD_ADDR_VAR 0 3
40021: PUSH
40022: LD_INT 4
40024: PUSH
40025: LD_INT 5
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: ST_TO_ADDR
40032: GO 40669
40034: LD_INT 10
40036: DOUBLE
40037: EQUAL
40038: IFTRUE 40042
40040: GO 40060
40042: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40043: LD_ADDR_VAR 0 3
40047: PUSH
40048: LD_INT 4
40050: PUSH
40051: LD_INT 5
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: ST_TO_ADDR
40058: GO 40669
40060: LD_INT 22
40062: DOUBLE
40063: EQUAL
40064: IFTRUE 40068
40066: GO 40094
40068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_INT 11
40076: PUSH
40077: LD_INT 12
40079: PUSH
40080: LD_INT 13
40082: PUSH
40083: LD_INT 14
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: ST_TO_ADDR
40092: GO 40669
40094: LD_INT 23
40096: DOUBLE
40097: EQUAL
40098: IFTRUE 40102
40100: GO 40128
40102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40103: LD_ADDR_VAR 0 3
40107: PUSH
40108: LD_INT 11
40110: PUSH
40111: LD_INT 12
40113: PUSH
40114: LD_INT 13
40116: PUSH
40117: LD_INT 14
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
40126: GO 40669
40128: LD_INT 24
40130: DOUBLE
40131: EQUAL
40132: IFTRUE 40136
40134: GO 40162
40136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40137: LD_ADDR_VAR 0 3
40141: PUSH
40142: LD_INT 11
40144: PUSH
40145: LD_INT 12
40147: PUSH
40148: LD_INT 13
40150: PUSH
40151: LD_INT 14
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: ST_TO_ADDR
40160: GO 40669
40162: LD_INT 30
40164: DOUBLE
40165: EQUAL
40166: IFTRUE 40170
40168: GO 40196
40170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40171: LD_ADDR_VAR 0 3
40175: PUSH
40176: LD_INT 11
40178: PUSH
40179: LD_INT 12
40181: PUSH
40182: LD_INT 13
40184: PUSH
40185: LD_INT 14
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: ST_TO_ADDR
40194: GO 40669
40196: LD_INT 25
40198: DOUBLE
40199: EQUAL
40200: IFTRUE 40204
40202: GO 40222
40204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40205: LD_ADDR_VAR 0 3
40209: PUSH
40210: LD_INT 13
40212: PUSH
40213: LD_INT 14
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: ST_TO_ADDR
40220: GO 40669
40222: LD_INT 27
40224: DOUBLE
40225: EQUAL
40226: IFTRUE 40230
40228: GO 40248
40230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40231: LD_ADDR_VAR 0 3
40235: PUSH
40236: LD_INT 13
40238: PUSH
40239: LD_INT 14
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: ST_TO_ADDR
40246: GO 40669
40248: LD_INT 28
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40256
40254: GO 40274
40256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_INT 13
40264: PUSH
40265: LD_INT 14
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: ST_TO_ADDR
40272: GO 40669
40274: LD_INT 29
40276: DOUBLE
40277: EQUAL
40278: IFTRUE 40282
40280: GO 40300
40282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40283: LD_ADDR_VAR 0 3
40287: PUSH
40288: LD_INT 13
40290: PUSH
40291: LD_INT 14
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: ST_TO_ADDR
40298: GO 40669
40300: LD_INT 31
40302: DOUBLE
40303: EQUAL
40304: IFTRUE 40308
40306: GO 40326
40308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_INT 13
40316: PUSH
40317: LD_INT 14
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: ST_TO_ADDR
40324: GO 40669
40326: LD_INT 26
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40352
40334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40335: LD_ADDR_VAR 0 3
40339: PUSH
40340: LD_INT 13
40342: PUSH
40343: LD_INT 14
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: ST_TO_ADDR
40350: GO 40669
40352: LD_INT 42
40354: DOUBLE
40355: EQUAL
40356: IFTRUE 40360
40358: GO 40386
40360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40361: LD_ADDR_VAR 0 3
40365: PUSH
40366: LD_INT 21
40368: PUSH
40369: LD_INT 22
40371: PUSH
40372: LD_INT 23
40374: PUSH
40375: LD_INT 24
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: ST_TO_ADDR
40384: GO 40669
40386: LD_INT 43
40388: DOUBLE
40389: EQUAL
40390: IFTRUE 40394
40392: GO 40420
40394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40395: LD_ADDR_VAR 0 3
40399: PUSH
40400: LD_INT 21
40402: PUSH
40403: LD_INT 22
40405: PUSH
40406: LD_INT 23
40408: PUSH
40409: LD_INT 24
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: ST_TO_ADDR
40418: GO 40669
40420: LD_INT 44
40422: DOUBLE
40423: EQUAL
40424: IFTRUE 40428
40426: GO 40454
40428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40429: LD_ADDR_VAR 0 3
40433: PUSH
40434: LD_INT 21
40436: PUSH
40437: LD_INT 22
40439: PUSH
40440: LD_INT 23
40442: PUSH
40443: LD_INT 24
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: ST_TO_ADDR
40452: GO 40669
40454: LD_INT 45
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40488
40462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40463: LD_ADDR_VAR 0 3
40467: PUSH
40468: LD_INT 21
40470: PUSH
40471: LD_INT 22
40473: PUSH
40474: LD_INT 23
40476: PUSH
40477: LD_INT 24
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: ST_TO_ADDR
40486: GO 40669
40488: LD_INT 49
40490: DOUBLE
40491: EQUAL
40492: IFTRUE 40496
40494: GO 40522
40496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40497: LD_ADDR_VAR 0 3
40501: PUSH
40502: LD_INT 21
40504: PUSH
40505: LD_INT 22
40507: PUSH
40508: LD_INT 23
40510: PUSH
40511: LD_INT 24
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: ST_TO_ADDR
40520: GO 40669
40522: LD_INT 51
40524: DOUBLE
40525: EQUAL
40526: IFTRUE 40530
40528: GO 40556
40530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40531: LD_ADDR_VAR 0 3
40535: PUSH
40536: LD_INT 21
40538: PUSH
40539: LD_INT 22
40541: PUSH
40542: LD_INT 23
40544: PUSH
40545: LD_INT 24
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
40554: GO 40669
40556: LD_INT 52
40558: DOUBLE
40559: EQUAL
40560: IFTRUE 40564
40562: GO 40590
40564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40565: LD_ADDR_VAR 0 3
40569: PUSH
40570: LD_INT 21
40572: PUSH
40573: LD_INT 22
40575: PUSH
40576: LD_INT 23
40578: PUSH
40579: LD_INT 24
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: ST_TO_ADDR
40588: GO 40669
40590: LD_INT 53
40592: DOUBLE
40593: EQUAL
40594: IFTRUE 40598
40596: GO 40616
40598: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40599: LD_ADDR_VAR 0 3
40603: PUSH
40604: LD_INT 23
40606: PUSH
40607: LD_INT 24
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: ST_TO_ADDR
40614: GO 40669
40616: LD_INT 46
40618: DOUBLE
40619: EQUAL
40620: IFTRUE 40624
40622: GO 40642
40624: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40625: LD_ADDR_VAR 0 3
40629: PUSH
40630: LD_INT 23
40632: PUSH
40633: LD_INT 24
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: ST_TO_ADDR
40640: GO 40669
40642: LD_INT 47
40644: DOUBLE
40645: EQUAL
40646: IFTRUE 40650
40648: GO 40668
40650: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40651: LD_ADDR_VAR 0 3
40655: PUSH
40656: LD_INT 23
40658: PUSH
40659: LD_INT 24
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: ST_TO_ADDR
40666: GO 40669
40668: POP
// result := ( chassis in result ) ;
40669: LD_ADDR_VAR 0 3
40673: PUSH
40674: LD_VAR 0 1
40678: PUSH
40679: LD_VAR 0 3
40683: IN
40684: ST_TO_ADDR
// end ;
40685: LD_VAR 0 3
40689: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40690: LD_INT 0
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
// result := array ;
40699: LD_ADDR_VAR 0 5
40703: PUSH
40704: LD_VAR 0 1
40708: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40709: LD_VAR 0 1
40713: NOT
40714: PUSH
40715: LD_VAR 0 2
40719: NOT
40720: OR
40721: PUSH
40722: LD_VAR 0 3
40726: NOT
40727: OR
40728: PUSH
40729: LD_VAR 0 2
40733: PUSH
40734: LD_VAR 0 1
40738: GREATER
40739: OR
40740: PUSH
40741: LD_VAR 0 3
40745: PUSH
40746: LD_VAR 0 1
40750: GREATER
40751: OR
40752: IFFALSE 40756
// exit ;
40754: GO 41052
// if direction then
40756: LD_VAR 0 4
40760: IFFALSE 40824
// begin d := 1 ;
40762: LD_ADDR_VAR 0 9
40766: PUSH
40767: LD_INT 1
40769: ST_TO_ADDR
// if i_from > i_to then
40770: LD_VAR 0 2
40774: PUSH
40775: LD_VAR 0 3
40779: GREATER
40780: IFFALSE 40806
// length := ( array - i_from ) + i_to else
40782: LD_ADDR_VAR 0 11
40786: PUSH
40787: LD_VAR 0 1
40791: PUSH
40792: LD_VAR 0 2
40796: MINUS
40797: PUSH
40798: LD_VAR 0 3
40802: PLUS
40803: ST_TO_ADDR
40804: GO 40822
// length := i_to - i_from ;
40806: LD_ADDR_VAR 0 11
40810: PUSH
40811: LD_VAR 0 3
40815: PUSH
40816: LD_VAR 0 2
40820: MINUS
40821: ST_TO_ADDR
// end else
40822: GO 40885
// begin d := - 1 ;
40824: LD_ADDR_VAR 0 9
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: ST_TO_ADDR
// if i_from > i_to then
40833: LD_VAR 0 2
40837: PUSH
40838: LD_VAR 0 3
40842: GREATER
40843: IFFALSE 40863
// length := i_from - i_to else
40845: LD_ADDR_VAR 0 11
40849: PUSH
40850: LD_VAR 0 2
40854: PUSH
40855: LD_VAR 0 3
40859: MINUS
40860: ST_TO_ADDR
40861: GO 40885
// length := ( array - i_to ) + i_from ;
40863: LD_ADDR_VAR 0 11
40867: PUSH
40868: LD_VAR 0 1
40872: PUSH
40873: LD_VAR 0 3
40877: MINUS
40878: PUSH
40879: LD_VAR 0 2
40883: PLUS
40884: ST_TO_ADDR
// end ; if not length then
40885: LD_VAR 0 11
40889: NOT
40890: IFFALSE 40894
// exit ;
40892: GO 41052
// tmp := array ;
40894: LD_ADDR_VAR 0 10
40898: PUSH
40899: LD_VAR 0 1
40903: ST_TO_ADDR
// for i = 1 to length do
40904: LD_ADDR_VAR 0 6
40908: PUSH
40909: DOUBLE
40910: LD_INT 1
40912: DEC
40913: ST_TO_ADDR
40914: LD_VAR 0 11
40918: PUSH
40919: FOR_TO
40920: IFFALSE 41040
// begin for j = 1 to array do
40922: LD_ADDR_VAR 0 7
40926: PUSH
40927: DOUBLE
40928: LD_INT 1
40930: DEC
40931: ST_TO_ADDR
40932: LD_VAR 0 1
40936: PUSH
40937: FOR_TO
40938: IFFALSE 41026
// begin k := j + d ;
40940: LD_ADDR_VAR 0 8
40944: PUSH
40945: LD_VAR 0 7
40949: PUSH
40950: LD_VAR 0 9
40954: PLUS
40955: ST_TO_ADDR
// if k > array then
40956: LD_VAR 0 8
40960: PUSH
40961: LD_VAR 0 1
40965: GREATER
40966: IFFALSE 40976
// k := 1 ;
40968: LD_ADDR_VAR 0 8
40972: PUSH
40973: LD_INT 1
40975: ST_TO_ADDR
// if not k then
40976: LD_VAR 0 8
40980: NOT
40981: IFFALSE 40993
// k := array ;
40983: LD_ADDR_VAR 0 8
40987: PUSH
40988: LD_VAR 0 1
40992: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40993: LD_ADDR_VAR 0 10
40997: PUSH
40998: LD_VAR 0 10
41002: PPUSH
41003: LD_VAR 0 8
41007: PPUSH
41008: LD_VAR 0 1
41012: PUSH
41013: LD_VAR 0 7
41017: ARRAY
41018: PPUSH
41019: CALL_OW 1
41023: ST_TO_ADDR
// end ;
41024: GO 40937
41026: POP
41027: POP
// array := tmp ;
41028: LD_ADDR_VAR 0 1
41032: PUSH
41033: LD_VAR 0 10
41037: ST_TO_ADDR
// end ;
41038: GO 40919
41040: POP
41041: POP
// result := array ;
41042: LD_ADDR_VAR 0 5
41046: PUSH
41047: LD_VAR 0 1
41051: ST_TO_ADDR
// end ;
41052: LD_VAR 0 5
41056: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41057: LD_INT 0
41059: PPUSH
41060: PPUSH
// result := 0 ;
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_INT 0
41068: ST_TO_ADDR
// if not array or not value in array then
41069: LD_VAR 0 1
41073: NOT
41074: PUSH
41075: LD_VAR 0 2
41079: PUSH
41080: LD_VAR 0 1
41084: IN
41085: NOT
41086: OR
41087: IFFALSE 41091
// exit ;
41089: GO 41145
// for i = 1 to array do
41091: LD_ADDR_VAR 0 4
41095: PUSH
41096: DOUBLE
41097: LD_INT 1
41099: DEC
41100: ST_TO_ADDR
41101: LD_VAR 0 1
41105: PUSH
41106: FOR_TO
41107: IFFALSE 41143
// if value = array [ i ] then
41109: LD_VAR 0 2
41113: PUSH
41114: LD_VAR 0 1
41118: PUSH
41119: LD_VAR 0 4
41123: ARRAY
41124: EQUAL
41125: IFFALSE 41141
// begin result := i ;
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_VAR 0 4
41136: ST_TO_ADDR
// exit ;
41137: POP
41138: POP
41139: GO 41145
// end ;
41141: GO 41106
41143: POP
41144: POP
// end ;
41145: LD_VAR 0 3
41149: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41150: LD_INT 0
41152: PPUSH
// vc_chassis := chassis ;
41153: LD_ADDR_OWVAR 37
41157: PUSH
41158: LD_VAR 0 1
41162: ST_TO_ADDR
// vc_engine := engine ;
41163: LD_ADDR_OWVAR 39
41167: PUSH
41168: LD_VAR 0 2
41172: ST_TO_ADDR
// vc_control := control ;
41173: LD_ADDR_OWVAR 38
41177: PUSH
41178: LD_VAR 0 3
41182: ST_TO_ADDR
// vc_weapon := weapon ;
41183: LD_ADDR_OWVAR 40
41187: PUSH
41188: LD_VAR 0 4
41192: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41193: LD_ADDR_OWVAR 41
41197: PUSH
41198: LD_VAR 0 5
41202: ST_TO_ADDR
// end ;
41203: LD_VAR 0 6
41207: RET
// export function WantPlant ( unit ) ; var task ; begin
41208: LD_INT 0
41210: PPUSH
41211: PPUSH
// result := false ;
41212: LD_ADDR_VAR 0 2
41216: PUSH
41217: LD_INT 0
41219: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41220: LD_ADDR_VAR 0 3
41224: PUSH
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 437
41234: ST_TO_ADDR
// if task then
41235: LD_VAR 0 3
41239: IFFALSE 41267
// if task [ 1 ] [ 1 ] = p then
41241: LD_VAR 0 3
41245: PUSH
41246: LD_INT 1
41248: ARRAY
41249: PUSH
41250: LD_INT 1
41252: ARRAY
41253: PUSH
41254: LD_STRING p
41256: EQUAL
41257: IFFALSE 41267
// result := true ;
41259: LD_ADDR_VAR 0 2
41263: PUSH
41264: LD_INT 1
41266: ST_TO_ADDR
// end ;
41267: LD_VAR 0 2
41271: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41272: LD_INT 0
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
// if pos < 1 then
41278: LD_VAR 0 2
41282: PUSH
41283: LD_INT 1
41285: LESS
41286: IFFALSE 41290
// exit ;
41288: GO 41593
// if pos = 1 then
41290: LD_VAR 0 2
41294: PUSH
41295: LD_INT 1
41297: EQUAL
41298: IFFALSE 41331
// result := Replace ( arr , pos [ 1 ] , value ) else
41300: LD_ADDR_VAR 0 4
41304: PUSH
41305: LD_VAR 0 1
41309: PPUSH
41310: LD_VAR 0 2
41314: PUSH
41315: LD_INT 1
41317: ARRAY
41318: PPUSH
41319: LD_VAR 0 3
41323: PPUSH
41324: CALL_OW 1
41328: ST_TO_ADDR
41329: GO 41593
// begin tmp := arr ;
41331: LD_ADDR_VAR 0 6
41335: PUSH
41336: LD_VAR 0 1
41340: ST_TO_ADDR
// s_arr := [ tmp ] ;
41341: LD_ADDR_VAR 0 7
41345: PUSH
41346: LD_VAR 0 6
41350: PUSH
41351: EMPTY
41352: LIST
41353: ST_TO_ADDR
// for i = 1 to pos - 1 do
41354: LD_ADDR_VAR 0 5
41358: PUSH
41359: DOUBLE
41360: LD_INT 1
41362: DEC
41363: ST_TO_ADDR
41364: LD_VAR 0 2
41368: PUSH
41369: LD_INT 1
41371: MINUS
41372: PUSH
41373: FOR_TO
41374: IFFALSE 41419
// begin tmp := tmp [ pos [ i ] ] ;
41376: LD_ADDR_VAR 0 6
41380: PUSH
41381: LD_VAR 0 6
41385: PUSH
41386: LD_VAR 0 2
41390: PUSH
41391: LD_VAR 0 5
41395: ARRAY
41396: ARRAY
41397: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41398: LD_ADDR_VAR 0 7
41402: PUSH
41403: LD_VAR 0 7
41407: PUSH
41408: LD_VAR 0 6
41412: PUSH
41413: EMPTY
41414: LIST
41415: ADD
41416: ST_TO_ADDR
// end ;
41417: GO 41373
41419: POP
41420: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41421: LD_ADDR_VAR 0 6
41425: PUSH
41426: LD_VAR 0 6
41430: PPUSH
41431: LD_VAR 0 2
41435: PUSH
41436: LD_VAR 0 2
41440: ARRAY
41441: PPUSH
41442: LD_VAR 0 3
41446: PPUSH
41447: CALL_OW 1
41451: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41452: LD_ADDR_VAR 0 7
41456: PUSH
41457: LD_VAR 0 7
41461: PPUSH
41462: LD_VAR 0 7
41466: PPUSH
41467: LD_VAR 0 6
41471: PPUSH
41472: CALL_OW 1
41476: ST_TO_ADDR
// for i = s_arr downto 2 do
41477: LD_ADDR_VAR 0 5
41481: PUSH
41482: DOUBLE
41483: LD_VAR 0 7
41487: INC
41488: ST_TO_ADDR
41489: LD_INT 2
41491: PUSH
41492: FOR_DOWNTO
41493: IFFALSE 41577
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41495: LD_ADDR_VAR 0 6
41499: PUSH
41500: LD_VAR 0 7
41504: PUSH
41505: LD_VAR 0 5
41509: PUSH
41510: LD_INT 1
41512: MINUS
41513: ARRAY
41514: PPUSH
41515: LD_VAR 0 2
41519: PUSH
41520: LD_VAR 0 5
41524: PUSH
41525: LD_INT 1
41527: MINUS
41528: ARRAY
41529: PPUSH
41530: LD_VAR 0 7
41534: PUSH
41535: LD_VAR 0 5
41539: ARRAY
41540: PPUSH
41541: CALL_OW 1
41545: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41546: LD_ADDR_VAR 0 7
41550: PUSH
41551: LD_VAR 0 7
41555: PPUSH
41556: LD_VAR 0 5
41560: PUSH
41561: LD_INT 1
41563: MINUS
41564: PPUSH
41565: LD_VAR 0 6
41569: PPUSH
41570: CALL_OW 1
41574: ST_TO_ADDR
// end ;
41575: GO 41492
41577: POP
41578: POP
// result := s_arr [ 1 ] ;
41579: LD_ADDR_VAR 0 4
41583: PUSH
41584: LD_VAR 0 7
41588: PUSH
41589: LD_INT 1
41591: ARRAY
41592: ST_TO_ADDR
// end ; end ;
41593: LD_VAR 0 4
41597: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41598: LD_INT 0
41600: PPUSH
41601: PPUSH
// if not list then
41602: LD_VAR 0 1
41606: NOT
41607: IFFALSE 41611
// exit ;
41609: GO 41702
// i := list [ pos1 ] ;
41611: LD_ADDR_VAR 0 5
41615: PUSH
41616: LD_VAR 0 1
41620: PUSH
41621: LD_VAR 0 2
41625: ARRAY
41626: ST_TO_ADDR
// if not i then
41627: LD_VAR 0 5
41631: NOT
41632: IFFALSE 41636
// exit ;
41634: GO 41702
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41636: LD_ADDR_VAR 0 1
41640: PUSH
41641: LD_VAR 0 1
41645: PPUSH
41646: LD_VAR 0 2
41650: PPUSH
41651: LD_VAR 0 1
41655: PUSH
41656: LD_VAR 0 3
41660: ARRAY
41661: PPUSH
41662: CALL_OW 1
41666: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41667: LD_ADDR_VAR 0 1
41671: PUSH
41672: LD_VAR 0 1
41676: PPUSH
41677: LD_VAR 0 3
41681: PPUSH
41682: LD_VAR 0 5
41686: PPUSH
41687: CALL_OW 1
41691: ST_TO_ADDR
// result := list ;
41692: LD_ADDR_VAR 0 4
41696: PUSH
41697: LD_VAR 0 1
41701: ST_TO_ADDR
// end ;
41702: LD_VAR 0 4
41706: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41707: LD_INT 0
41709: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41710: LD_ADDR_VAR 0 5
41714: PUSH
41715: LD_VAR 0 1
41719: PPUSH
41720: CALL_OW 250
41724: PPUSH
41725: LD_VAR 0 1
41729: PPUSH
41730: CALL_OW 251
41734: PPUSH
41735: LD_VAR 0 2
41739: PPUSH
41740: LD_VAR 0 3
41744: PPUSH
41745: LD_VAR 0 4
41749: PPUSH
41750: CALL 41760 0 5
41754: ST_TO_ADDR
// end ;
41755: LD_VAR 0 5
41759: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41760: LD_INT 0
41762: PPUSH
41763: PPUSH
41764: PPUSH
41765: PPUSH
// if not list then
41766: LD_VAR 0 3
41770: NOT
41771: IFFALSE 41775
// exit ;
41773: GO 42163
// result := [ ] ;
41775: LD_ADDR_VAR 0 6
41779: PUSH
41780: EMPTY
41781: ST_TO_ADDR
// for i in list do
41782: LD_ADDR_VAR 0 7
41786: PUSH
41787: LD_VAR 0 3
41791: PUSH
41792: FOR_IN
41793: IFFALSE 41995
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41795: LD_ADDR_VAR 0 9
41799: PUSH
41800: LD_VAR 0 7
41804: PPUSH
41805: LD_VAR 0 1
41809: PPUSH
41810: LD_VAR 0 2
41814: PPUSH
41815: CALL_OW 297
41819: ST_TO_ADDR
// if not result then
41820: LD_VAR 0 6
41824: NOT
41825: IFFALSE 41851
// result := [ [ i , tmp ] ] else
41827: LD_ADDR_VAR 0 6
41831: PUSH
41832: LD_VAR 0 7
41836: PUSH
41837: LD_VAR 0 9
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: EMPTY
41847: LIST
41848: ST_TO_ADDR
41849: GO 41993
// begin if result [ result ] [ 2 ] < tmp then
41851: LD_VAR 0 6
41855: PUSH
41856: LD_VAR 0 6
41860: ARRAY
41861: PUSH
41862: LD_INT 2
41864: ARRAY
41865: PUSH
41866: LD_VAR 0 9
41870: LESS
41871: IFFALSE 41913
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41873: LD_ADDR_VAR 0 6
41877: PUSH
41878: LD_VAR 0 6
41882: PPUSH
41883: LD_VAR 0 6
41887: PUSH
41888: LD_INT 1
41890: PLUS
41891: PPUSH
41892: LD_VAR 0 7
41896: PUSH
41897: LD_VAR 0 9
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PPUSH
41906: CALL_OW 2
41910: ST_TO_ADDR
41911: GO 41993
// for j = 1 to result do
41913: LD_ADDR_VAR 0 8
41917: PUSH
41918: DOUBLE
41919: LD_INT 1
41921: DEC
41922: ST_TO_ADDR
41923: LD_VAR 0 6
41927: PUSH
41928: FOR_TO
41929: IFFALSE 41991
// begin if tmp < result [ j ] [ 2 ] then
41931: LD_VAR 0 9
41935: PUSH
41936: LD_VAR 0 6
41940: PUSH
41941: LD_VAR 0 8
41945: ARRAY
41946: PUSH
41947: LD_INT 2
41949: ARRAY
41950: LESS
41951: IFFALSE 41989
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41953: LD_ADDR_VAR 0 6
41957: PUSH
41958: LD_VAR 0 6
41962: PPUSH
41963: LD_VAR 0 8
41967: PPUSH
41968: LD_VAR 0 7
41972: PUSH
41973: LD_VAR 0 9
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PPUSH
41982: CALL_OW 2
41986: ST_TO_ADDR
// break ;
41987: GO 41991
// end ; end ;
41989: GO 41928
41991: POP
41992: POP
// end ; end ;
41993: GO 41792
41995: POP
41996: POP
// if result and not asc then
41997: LD_VAR 0 6
42001: PUSH
42002: LD_VAR 0 4
42006: NOT
42007: AND
42008: IFFALSE 42083
// begin tmp := result ;
42010: LD_ADDR_VAR 0 9
42014: PUSH
42015: LD_VAR 0 6
42019: ST_TO_ADDR
// for i = tmp downto 1 do
42020: LD_ADDR_VAR 0 7
42024: PUSH
42025: DOUBLE
42026: LD_VAR 0 9
42030: INC
42031: ST_TO_ADDR
42032: LD_INT 1
42034: PUSH
42035: FOR_DOWNTO
42036: IFFALSE 42081
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42038: LD_ADDR_VAR 0 6
42042: PUSH
42043: LD_VAR 0 6
42047: PPUSH
42048: LD_VAR 0 9
42052: PUSH
42053: LD_VAR 0 7
42057: MINUS
42058: PUSH
42059: LD_INT 1
42061: PLUS
42062: PPUSH
42063: LD_VAR 0 9
42067: PUSH
42068: LD_VAR 0 7
42072: ARRAY
42073: PPUSH
42074: CALL_OW 1
42078: ST_TO_ADDR
42079: GO 42035
42081: POP
42082: POP
// end ; tmp := [ ] ;
42083: LD_ADDR_VAR 0 9
42087: PUSH
42088: EMPTY
42089: ST_TO_ADDR
// if mode then
42090: LD_VAR 0 5
42094: IFFALSE 42163
// begin for i = 1 to result do
42096: LD_ADDR_VAR 0 7
42100: PUSH
42101: DOUBLE
42102: LD_INT 1
42104: DEC
42105: ST_TO_ADDR
42106: LD_VAR 0 6
42110: PUSH
42111: FOR_TO
42112: IFFALSE 42151
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42114: LD_ADDR_VAR 0 9
42118: PUSH
42119: LD_VAR 0 9
42123: PPUSH
42124: LD_VAR 0 7
42128: PPUSH
42129: LD_VAR 0 6
42133: PUSH
42134: LD_VAR 0 7
42138: ARRAY
42139: PUSH
42140: LD_INT 1
42142: ARRAY
42143: PPUSH
42144: CALL_OW 1
42148: ST_TO_ADDR
42149: GO 42111
42151: POP
42152: POP
// result := tmp ;
42153: LD_ADDR_VAR 0 6
42157: PUSH
42158: LD_VAR 0 9
42162: ST_TO_ADDR
// end ; end ;
42163: LD_VAR 0 6
42167: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42168: LD_INT 0
42170: PPUSH
42171: PPUSH
42172: PPUSH
42173: PPUSH
42174: PPUSH
42175: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42176: LD_ADDR_VAR 0 5
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
// if not x or not y then
42198: LD_VAR 0 2
42202: NOT
42203: PUSH
42204: LD_VAR 0 3
42208: NOT
42209: OR
42210: IFFALSE 42214
// exit ;
42212: GO 43860
// if not range then
42214: LD_VAR 0 4
42218: NOT
42219: IFFALSE 42229
// range := 10 ;
42221: LD_ADDR_VAR 0 4
42225: PUSH
42226: LD_INT 10
42228: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42229: LD_ADDR_VAR 0 8
42233: PUSH
42234: LD_INT 81
42236: PUSH
42237: LD_VAR 0 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 92
42248: PUSH
42249: LD_VAR 0 2
42253: PUSH
42254: LD_VAR 0 3
42258: PUSH
42259: LD_VAR 0 4
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: LD_INT 21
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: PPUSH
42292: CALL_OW 69
42296: ST_TO_ADDR
// if not tmp then
42297: LD_VAR 0 8
42301: NOT
42302: IFFALSE 42306
// exit ;
42304: GO 43860
// for i in tmp do
42306: LD_ADDR_VAR 0 6
42310: PUSH
42311: LD_VAR 0 8
42315: PUSH
42316: FOR_IN
42317: IFFALSE 43835
// begin points := [ 0 , 0 , 0 ] ;
42319: LD_ADDR_VAR 0 9
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: ST_TO_ADDR
// bpoints := 1 ;
42338: LD_ADDR_VAR 0 10
42342: PUSH
42343: LD_INT 1
42345: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42346: LD_VAR 0 6
42350: PPUSH
42351: CALL_OW 247
42355: PUSH
42356: LD_INT 1
42358: DOUBLE
42359: EQUAL
42360: IFTRUE 42364
42362: GO 42942
42364: POP
// begin if GetClass ( i ) = 1 then
42365: LD_VAR 0 6
42369: PPUSH
42370: CALL_OW 257
42374: PUSH
42375: LD_INT 1
42377: EQUAL
42378: IFFALSE 42399
// points := [ 10 , 5 , 3 ] ;
42380: LD_ADDR_VAR 0 9
42384: PUSH
42385: LD_INT 10
42387: PUSH
42388: LD_INT 5
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42399: LD_VAR 0 6
42403: PPUSH
42404: CALL_OW 257
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: LD_INT 4
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: IN
42423: IFFALSE 42444
// points := [ 3 , 2 , 1 ] ;
42425: LD_ADDR_VAR 0 9
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42444: LD_VAR 0 6
42448: PPUSH
42449: CALL_OW 257
42453: PUSH
42454: LD_INT 5
42456: EQUAL
42457: IFFALSE 42478
// points := [ 130 , 5 , 2 ] ;
42459: LD_ADDR_VAR 0 9
42463: PUSH
42464: LD_INT 130
42466: PUSH
42467: LD_INT 5
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42478: LD_VAR 0 6
42482: PPUSH
42483: CALL_OW 257
42487: PUSH
42488: LD_INT 8
42490: EQUAL
42491: IFFALSE 42512
// points := [ 35 , 35 , 30 ] ;
42493: LD_ADDR_VAR 0 9
42497: PUSH
42498: LD_INT 35
42500: PUSH
42501: LD_INT 35
42503: PUSH
42504: LD_INT 30
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42512: LD_VAR 0 6
42516: PPUSH
42517: CALL_OW 257
42521: PUSH
42522: LD_INT 9
42524: EQUAL
42525: IFFALSE 42546
// points := [ 20 , 55 , 40 ] ;
42527: LD_ADDR_VAR 0 9
42531: PUSH
42532: LD_INT 20
42534: PUSH
42535: LD_INT 55
42537: PUSH
42538: LD_INT 40
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42546: LD_VAR 0 6
42550: PPUSH
42551: CALL_OW 257
42555: PUSH
42556: LD_INT 12
42558: PUSH
42559: LD_INT 16
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: IN
42566: IFFALSE 42587
// points := [ 5 , 3 , 2 ] ;
42568: LD_ADDR_VAR 0 9
42572: PUSH
42573: LD_INT 5
42575: PUSH
42576: LD_INT 3
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42587: LD_VAR 0 6
42591: PPUSH
42592: CALL_OW 257
42596: PUSH
42597: LD_INT 17
42599: EQUAL
42600: IFFALSE 42621
// points := [ 100 , 50 , 75 ] ;
42602: LD_ADDR_VAR 0 9
42606: PUSH
42607: LD_INT 100
42609: PUSH
42610: LD_INT 50
42612: PUSH
42613: LD_INT 75
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: LIST
42620: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42621: LD_VAR 0 6
42625: PPUSH
42626: CALL_OW 257
42630: PUSH
42631: LD_INT 15
42633: EQUAL
42634: IFFALSE 42655
// points := [ 10 , 5 , 3 ] ;
42636: LD_ADDR_VAR 0 9
42640: PUSH
42641: LD_INT 10
42643: PUSH
42644: LD_INT 5
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42655: LD_VAR 0 6
42659: PPUSH
42660: CALL_OW 257
42664: PUSH
42665: LD_INT 14
42667: EQUAL
42668: IFFALSE 42689
// points := [ 10 , 0 , 0 ] ;
42670: LD_ADDR_VAR 0 9
42674: PUSH
42675: LD_INT 10
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42689: LD_VAR 0 6
42693: PPUSH
42694: CALL_OW 257
42698: PUSH
42699: LD_INT 11
42701: EQUAL
42702: IFFALSE 42723
// points := [ 30 , 10 , 5 ] ;
42704: LD_ADDR_VAR 0 9
42708: PUSH
42709: LD_INT 30
42711: PUSH
42712: LD_INT 10
42714: PUSH
42715: LD_INT 5
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42723: LD_VAR 0 1
42727: PPUSH
42728: LD_INT 5
42730: PPUSH
42731: CALL_OW 321
42735: PUSH
42736: LD_INT 2
42738: EQUAL
42739: IFFALSE 42756
// bpoints := bpoints * 1.8 ;
42741: LD_ADDR_VAR 0 10
42745: PUSH
42746: LD_VAR 0 10
42750: PUSH
42751: LD_REAL  1.80000000000000E+0000
42754: MUL
42755: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42756: LD_VAR 0 6
42760: PPUSH
42761: CALL_OW 257
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 3
42774: PUSH
42775: LD_INT 4
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: IN
42784: PUSH
42785: LD_VAR 0 1
42789: PPUSH
42790: LD_INT 51
42792: PPUSH
42793: CALL_OW 321
42797: PUSH
42798: LD_INT 2
42800: EQUAL
42801: AND
42802: IFFALSE 42819
// bpoints := bpoints * 1.2 ;
42804: LD_ADDR_VAR 0 10
42808: PUSH
42809: LD_VAR 0 10
42813: PUSH
42814: LD_REAL  1.20000000000000E+0000
42817: MUL
42818: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42819: LD_VAR 0 6
42823: PPUSH
42824: CALL_OW 257
42828: PUSH
42829: LD_INT 5
42831: PUSH
42832: LD_INT 7
42834: PUSH
42835: LD_INT 9
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: IN
42843: PUSH
42844: LD_VAR 0 1
42848: PPUSH
42849: LD_INT 52
42851: PPUSH
42852: CALL_OW 321
42856: PUSH
42857: LD_INT 2
42859: EQUAL
42860: AND
42861: IFFALSE 42878
// bpoints := bpoints * 1.5 ;
42863: LD_ADDR_VAR 0 10
42867: PUSH
42868: LD_VAR 0 10
42872: PUSH
42873: LD_REAL  1.50000000000000E+0000
42876: MUL
42877: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42878: LD_VAR 0 1
42882: PPUSH
42883: LD_INT 66
42885: PPUSH
42886: CALL_OW 321
42890: PUSH
42891: LD_INT 2
42893: EQUAL
42894: IFFALSE 42911
// bpoints := bpoints * 1.1 ;
42896: LD_ADDR_VAR 0 10
42900: PUSH
42901: LD_VAR 0 10
42905: PUSH
42906: LD_REAL  1.10000000000000E+0000
42909: MUL
42910: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42911: LD_ADDR_VAR 0 10
42915: PUSH
42916: LD_VAR 0 10
42920: PUSH
42921: LD_VAR 0 6
42925: PPUSH
42926: LD_INT 1
42928: PPUSH
42929: CALL_OW 259
42933: PUSH
42934: LD_REAL  1.15000000000000E+0000
42937: MUL
42938: MUL
42939: ST_TO_ADDR
// end ; unit_vehicle :
42940: GO 43764
42942: LD_INT 2
42944: DOUBLE
42945: EQUAL
42946: IFTRUE 42950
42948: GO 43752
42950: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42951: LD_VAR 0 6
42955: PPUSH
42956: CALL_OW 264
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 42
42966: PUSH
42967: LD_INT 24
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: IN
42975: IFFALSE 42996
// points := [ 25 , 5 , 3 ] ;
42977: LD_ADDR_VAR 0 9
42981: PUSH
42982: LD_INT 25
42984: PUSH
42985: LD_INT 5
42987: PUSH
42988: LD_INT 3
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: LIST
42995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42996: LD_VAR 0 6
43000: PPUSH
43001: CALL_OW 264
43005: PUSH
43006: LD_INT 4
43008: PUSH
43009: LD_INT 43
43011: PUSH
43012: LD_INT 25
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: IN
43020: IFFALSE 43041
// points := [ 40 , 15 , 5 ] ;
43022: LD_ADDR_VAR 0 9
43026: PUSH
43027: LD_INT 40
43029: PUSH
43030: LD_INT 15
43032: PUSH
43033: LD_INT 5
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43041: LD_VAR 0 6
43045: PPUSH
43046: CALL_OW 264
43050: PUSH
43051: LD_INT 3
43053: PUSH
43054: LD_INT 23
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: IN
43061: IFFALSE 43082
// points := [ 7 , 25 , 8 ] ;
43063: LD_ADDR_VAR 0 9
43067: PUSH
43068: LD_INT 7
43070: PUSH
43071: LD_INT 25
43073: PUSH
43074: LD_INT 8
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43082: LD_VAR 0 6
43086: PPUSH
43087: CALL_OW 264
43091: PUSH
43092: LD_INT 5
43094: PUSH
43095: LD_INT 27
43097: PUSH
43098: LD_INT 44
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: IN
43106: IFFALSE 43127
// points := [ 14 , 50 , 16 ] ;
43108: LD_ADDR_VAR 0 9
43112: PUSH
43113: LD_INT 14
43115: PUSH
43116: LD_INT 50
43118: PUSH
43119: LD_INT 16
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: LIST
43126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43127: LD_VAR 0 6
43131: PPUSH
43132: CALL_OW 264
43136: PUSH
43137: LD_INT 6
43139: PUSH
43140: LD_INT 46
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: IN
43147: IFFALSE 43168
// points := [ 32 , 120 , 70 ] ;
43149: LD_ADDR_VAR 0 9
43153: PUSH
43154: LD_INT 32
43156: PUSH
43157: LD_INT 120
43159: PUSH
43160: LD_INT 70
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43168: LD_VAR 0 6
43172: PPUSH
43173: CALL_OW 264
43177: PUSH
43178: LD_INT 7
43180: PUSH
43181: LD_INT 28
43183: PUSH
43184: LD_INT 45
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: LIST
43191: IN
43192: IFFALSE 43213
// points := [ 35 , 20 , 45 ] ;
43194: LD_ADDR_VAR 0 9
43198: PUSH
43199: LD_INT 35
43201: PUSH
43202: LD_INT 20
43204: PUSH
43205: LD_INT 45
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43213: LD_VAR 0 6
43217: PPUSH
43218: CALL_OW 264
43222: PUSH
43223: LD_INT 47
43225: PUSH
43226: EMPTY
43227: LIST
43228: IN
43229: IFFALSE 43250
// points := [ 67 , 45 , 75 ] ;
43231: LD_ADDR_VAR 0 9
43235: PUSH
43236: LD_INT 67
43238: PUSH
43239: LD_INT 45
43241: PUSH
43242: LD_INT 75
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43250: LD_VAR 0 6
43254: PPUSH
43255: CALL_OW 264
43259: PUSH
43260: LD_INT 26
43262: PUSH
43263: EMPTY
43264: LIST
43265: IN
43266: IFFALSE 43287
// points := [ 120 , 30 , 80 ] ;
43268: LD_ADDR_VAR 0 9
43272: PUSH
43273: LD_INT 120
43275: PUSH
43276: LD_INT 30
43278: PUSH
43279: LD_INT 80
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43287: LD_VAR 0 6
43291: PPUSH
43292: CALL_OW 264
43296: PUSH
43297: LD_INT 22
43299: PUSH
43300: EMPTY
43301: LIST
43302: IN
43303: IFFALSE 43324
// points := [ 40 , 1 , 1 ] ;
43305: LD_ADDR_VAR 0 9
43309: PUSH
43310: LD_INT 40
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43324: LD_VAR 0 6
43328: PPUSH
43329: CALL_OW 264
43333: PUSH
43334: LD_INT 29
43336: PUSH
43337: EMPTY
43338: LIST
43339: IN
43340: IFFALSE 43361
// points := [ 70 , 200 , 400 ] ;
43342: LD_ADDR_VAR 0 9
43346: PUSH
43347: LD_INT 70
43349: PUSH
43350: LD_INT 200
43352: PUSH
43353: LD_INT 400
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43361: LD_VAR 0 6
43365: PPUSH
43366: CALL_OW 264
43370: PUSH
43371: LD_INT 14
43373: PUSH
43374: LD_INT 53
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: IN
43381: IFFALSE 43402
// points := [ 40 , 10 , 20 ] ;
43383: LD_ADDR_VAR 0 9
43387: PUSH
43388: LD_INT 40
43390: PUSH
43391: LD_INT 10
43393: PUSH
43394: LD_INT 20
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43402: LD_VAR 0 6
43406: PPUSH
43407: CALL_OW 264
43411: PUSH
43412: LD_INT 9
43414: PUSH
43415: EMPTY
43416: LIST
43417: IN
43418: IFFALSE 43439
// points := [ 5 , 70 , 20 ] ;
43420: LD_ADDR_VAR 0 9
43424: PUSH
43425: LD_INT 5
43427: PUSH
43428: LD_INT 70
43430: PUSH
43431: LD_INT 20
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43439: LD_VAR 0 6
43443: PPUSH
43444: CALL_OW 264
43448: PUSH
43449: LD_INT 10
43451: PUSH
43452: EMPTY
43453: LIST
43454: IN
43455: IFFALSE 43476
// points := [ 35 , 110 , 70 ] ;
43457: LD_ADDR_VAR 0 9
43461: PUSH
43462: LD_INT 35
43464: PUSH
43465: LD_INT 110
43467: PUSH
43468: LD_INT 70
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43476: LD_VAR 0 6
43480: PPUSH
43481: CALL_OW 265
43485: PUSH
43486: LD_INT 25
43488: EQUAL
43489: IFFALSE 43510
// points := [ 80 , 65 , 100 ] ;
43491: LD_ADDR_VAR 0 9
43495: PUSH
43496: LD_INT 80
43498: PUSH
43499: LD_INT 65
43501: PUSH
43502: LD_INT 100
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: LIST
43509: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43510: LD_VAR 0 6
43514: PPUSH
43515: CALL_OW 263
43519: PUSH
43520: LD_INT 1
43522: EQUAL
43523: IFFALSE 43558
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43525: LD_ADDR_VAR 0 10
43529: PUSH
43530: LD_VAR 0 10
43534: PUSH
43535: LD_VAR 0 6
43539: PPUSH
43540: CALL_OW 311
43544: PPUSH
43545: LD_INT 3
43547: PPUSH
43548: CALL_OW 259
43552: PUSH
43553: LD_INT 4
43555: MUL
43556: MUL
43557: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43558: LD_VAR 0 6
43562: PPUSH
43563: CALL_OW 263
43567: PUSH
43568: LD_INT 2
43570: EQUAL
43571: IFFALSE 43622
// begin j := IsControledBy ( i ) ;
43573: LD_ADDR_VAR 0 7
43577: PUSH
43578: LD_VAR 0 6
43582: PPUSH
43583: CALL_OW 312
43587: ST_TO_ADDR
// if j then
43588: LD_VAR 0 7
43592: IFFALSE 43622
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43594: LD_ADDR_VAR 0 10
43598: PUSH
43599: LD_VAR 0 10
43603: PUSH
43604: LD_VAR 0 7
43608: PPUSH
43609: LD_INT 3
43611: PPUSH
43612: CALL_OW 259
43616: PUSH
43617: LD_INT 3
43619: MUL
43620: MUL
43621: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43622: LD_VAR 0 6
43626: PPUSH
43627: CALL_OW 264
43631: PUSH
43632: LD_INT 5
43634: PUSH
43635: LD_INT 6
43637: PUSH
43638: LD_INT 46
43640: PUSH
43641: LD_INT 44
43643: PUSH
43644: LD_INT 47
43646: PUSH
43647: LD_INT 45
43649: PUSH
43650: LD_INT 28
43652: PUSH
43653: LD_INT 7
43655: PUSH
43656: LD_INT 27
43658: PUSH
43659: LD_INT 29
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: IN
43674: PUSH
43675: LD_VAR 0 1
43679: PPUSH
43680: LD_INT 52
43682: PPUSH
43683: CALL_OW 321
43687: PUSH
43688: LD_INT 2
43690: EQUAL
43691: AND
43692: IFFALSE 43709
// bpoints := bpoints * 1.2 ;
43694: LD_ADDR_VAR 0 10
43698: PUSH
43699: LD_VAR 0 10
43703: PUSH
43704: LD_REAL  1.20000000000000E+0000
43707: MUL
43708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43709: LD_VAR 0 6
43713: PPUSH
43714: CALL_OW 264
43718: PUSH
43719: LD_INT 6
43721: PUSH
43722: LD_INT 46
43724: PUSH
43725: LD_INT 47
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: IN
43733: IFFALSE 43750
// bpoints := bpoints * 1.2 ;
43735: LD_ADDR_VAR 0 10
43739: PUSH
43740: LD_VAR 0 10
43744: PUSH
43745: LD_REAL  1.20000000000000E+0000
43748: MUL
43749: ST_TO_ADDR
// end ; unit_building :
43750: GO 43764
43752: LD_INT 3
43754: DOUBLE
43755: EQUAL
43756: IFTRUE 43760
43758: GO 43763
43760: POP
// ; end ;
43761: GO 43764
43763: POP
// for j = 1 to 3 do
43764: LD_ADDR_VAR 0 7
43768: PUSH
43769: DOUBLE
43770: LD_INT 1
43772: DEC
43773: ST_TO_ADDR
43774: LD_INT 3
43776: PUSH
43777: FOR_TO
43778: IFFALSE 43831
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43780: LD_ADDR_VAR 0 5
43784: PUSH
43785: LD_VAR 0 5
43789: PPUSH
43790: LD_VAR 0 7
43794: PPUSH
43795: LD_VAR 0 5
43799: PUSH
43800: LD_VAR 0 7
43804: ARRAY
43805: PUSH
43806: LD_VAR 0 9
43810: PUSH
43811: LD_VAR 0 7
43815: ARRAY
43816: PUSH
43817: LD_VAR 0 10
43821: MUL
43822: PLUS
43823: PPUSH
43824: CALL_OW 1
43828: ST_TO_ADDR
43829: GO 43777
43831: POP
43832: POP
// end ;
43833: GO 42316
43835: POP
43836: POP
// result := Replace ( result , 4 , tmp ) ;
43837: LD_ADDR_VAR 0 5
43841: PUSH
43842: LD_VAR 0 5
43846: PPUSH
43847: LD_INT 4
43849: PPUSH
43850: LD_VAR 0 8
43854: PPUSH
43855: CALL_OW 1
43859: ST_TO_ADDR
// end ;
43860: LD_VAR 0 5
43864: RET
// export function DangerAtRange ( unit , range ) ; begin
43865: LD_INT 0
43867: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43868: LD_ADDR_VAR 0 3
43872: PUSH
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 255
43882: PPUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 250
43892: PPUSH
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 251
43902: PPUSH
43903: LD_VAR 0 2
43907: PPUSH
43908: CALL 42168 0 4
43912: ST_TO_ADDR
// end ;
43913: LD_VAR 0 3
43917: RET
// export function DangerInArea ( side , area ) ; begin
43918: LD_INT 0
43920: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43921: LD_ADDR_VAR 0 3
43925: PUSH
43926: LD_VAR 0 2
43930: PPUSH
43931: LD_INT 81
43933: PUSH
43934: LD_VAR 0 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PPUSH
43943: CALL_OW 70
43947: ST_TO_ADDR
// end ;
43948: LD_VAR 0 3
43952: RET
// export function IsExtension ( b ) ; begin
43953: LD_INT 0
43955: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43956: LD_ADDR_VAR 0 2
43960: PUSH
43961: LD_VAR 0 1
43965: PUSH
43966: LD_INT 23
43968: PUSH
43969: LD_INT 20
43971: PUSH
43972: LD_INT 22
43974: PUSH
43975: LD_INT 17
43977: PUSH
43978: LD_INT 24
43980: PUSH
43981: LD_INT 21
43983: PUSH
43984: LD_INT 19
43986: PUSH
43987: LD_INT 16
43989: PUSH
43990: LD_INT 25
43992: PUSH
43993: LD_INT 18
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: IN
44008: ST_TO_ADDR
// end ;
44009: LD_VAR 0 2
44013: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
44014: LD_INT 0
44016: PPUSH
44017: PPUSH
44018: PPUSH
// result := [ ] ;
44019: LD_ADDR_VAR 0 3
44023: PUSH
44024: EMPTY
44025: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44026: LD_ADDR_VAR 0 4
44030: PUSH
44031: LD_VAR 0 2
44035: PPUSH
44036: LD_INT 21
44038: PUSH
44039: LD_INT 3
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PPUSH
44046: CALL_OW 70
44050: ST_TO_ADDR
// if not tmp then
44051: LD_VAR 0 4
44055: NOT
44056: IFFALSE 44060
// exit ;
44058: GO 44118
// for i in tmp do
44060: LD_ADDR_VAR 0 5
44064: PUSH
44065: LD_VAR 0 4
44069: PUSH
44070: FOR_IN
44071: IFFALSE 44106
// if GetBase ( i ) <> base then
44073: LD_VAR 0 5
44077: PPUSH
44078: CALL_OW 274
44082: PUSH
44083: LD_VAR 0 1
44087: NONEQUAL
44088: IFFALSE 44104
// ComLinkToBase ( base , i ) ;
44090: LD_VAR 0 1
44094: PPUSH
44095: LD_VAR 0 5
44099: PPUSH
44100: CALL_OW 169
44104: GO 44070
44106: POP
44107: POP
// result := tmp ;
44108: LD_ADDR_VAR 0 3
44112: PUSH
44113: LD_VAR 0 4
44117: ST_TO_ADDR
// end ;
44118: LD_VAR 0 3
44122: RET
// export function ComComplete ( unit , b ) ; var i ; begin
44123: LD_INT 0
44125: PPUSH
44126: PPUSH
// if BuildingStatus ( b ) = bs_build then
44127: LD_VAR 0 2
44131: PPUSH
44132: CALL_OW 461
44136: PUSH
44137: LD_INT 1
44139: EQUAL
44140: IFFALSE 44200
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44142: LD_VAR 0 1
44146: PPUSH
44147: LD_STRING h
44149: PUSH
44150: LD_VAR 0 2
44154: PPUSH
44155: CALL_OW 250
44159: PUSH
44160: LD_VAR 0 2
44164: PPUSH
44165: CALL_OW 251
44169: PUSH
44170: LD_VAR 0 2
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: PUSH
44193: EMPTY
44194: LIST
44195: PPUSH
44196: CALL_OW 446
// end ;
44200: LD_VAR 0 3
44204: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44205: LD_INT 0
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44213: LD_VAR 0 1
44217: NOT
44218: PUSH
44219: LD_VAR 0 1
44223: PPUSH
44224: CALL_OW 263
44228: PUSH
44229: LD_INT 2
44231: EQUAL
44232: NOT
44233: OR
44234: IFFALSE 44238
// exit ;
44236: GO 44554
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44238: LD_ADDR_VAR 0 6
44242: PUSH
44243: LD_INT 22
44245: PUSH
44246: LD_VAR 0 1
44250: PPUSH
44251: CALL_OW 255
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 30
44265: PUSH
44266: LD_INT 36
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 34
44275: PUSH
44276: LD_INT 31
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PPUSH
44292: CALL_OW 69
44296: ST_TO_ADDR
// if not tmp then
44297: LD_VAR 0 6
44301: NOT
44302: IFFALSE 44306
// exit ;
44304: GO 44554
// result := [ ] ;
44306: LD_ADDR_VAR 0 2
44310: PUSH
44311: EMPTY
44312: ST_TO_ADDR
// for i in tmp do
44313: LD_ADDR_VAR 0 3
44317: PUSH
44318: LD_VAR 0 6
44322: PUSH
44323: FOR_IN
44324: IFFALSE 44395
// begin t := UnitsInside ( i ) ;
44326: LD_ADDR_VAR 0 4
44330: PUSH
44331: LD_VAR 0 3
44335: PPUSH
44336: CALL_OW 313
44340: ST_TO_ADDR
// if t then
44341: LD_VAR 0 4
44345: IFFALSE 44393
// for j in t do
44347: LD_ADDR_VAR 0 7
44351: PUSH
44352: LD_VAR 0 4
44356: PUSH
44357: FOR_IN
44358: IFFALSE 44391
// result := Insert ( result , result + 1 , j ) ;
44360: LD_ADDR_VAR 0 2
44364: PUSH
44365: LD_VAR 0 2
44369: PPUSH
44370: LD_VAR 0 2
44374: PUSH
44375: LD_INT 1
44377: PLUS
44378: PPUSH
44379: LD_VAR 0 7
44383: PPUSH
44384: CALL_OW 2
44388: ST_TO_ADDR
44389: GO 44357
44391: POP
44392: POP
// end ;
44393: GO 44323
44395: POP
44396: POP
// if not result then
44397: LD_VAR 0 2
44401: NOT
44402: IFFALSE 44406
// exit ;
44404: GO 44554
// mech := result [ 1 ] ;
44406: LD_ADDR_VAR 0 5
44410: PUSH
44411: LD_VAR 0 2
44415: PUSH
44416: LD_INT 1
44418: ARRAY
44419: ST_TO_ADDR
// if result > 1 then
44420: LD_VAR 0 2
44424: PUSH
44425: LD_INT 1
44427: GREATER
44428: IFFALSE 44540
// for i = 2 to result do
44430: LD_ADDR_VAR 0 3
44434: PUSH
44435: DOUBLE
44436: LD_INT 2
44438: DEC
44439: ST_TO_ADDR
44440: LD_VAR 0 2
44444: PUSH
44445: FOR_TO
44446: IFFALSE 44538
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44448: LD_ADDR_VAR 0 4
44452: PUSH
44453: LD_VAR 0 2
44457: PUSH
44458: LD_VAR 0 3
44462: ARRAY
44463: PPUSH
44464: LD_INT 3
44466: PPUSH
44467: CALL_OW 259
44471: PUSH
44472: LD_VAR 0 2
44476: PUSH
44477: LD_VAR 0 3
44481: ARRAY
44482: PPUSH
44483: CALL_OW 432
44487: MINUS
44488: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44489: LD_VAR 0 4
44493: PUSH
44494: LD_VAR 0 5
44498: PPUSH
44499: LD_INT 3
44501: PPUSH
44502: CALL_OW 259
44506: PUSH
44507: LD_VAR 0 5
44511: PPUSH
44512: CALL_OW 432
44516: MINUS
44517: GREATEREQUAL
44518: IFFALSE 44536
// mech := result [ i ] ;
44520: LD_ADDR_VAR 0 5
44524: PUSH
44525: LD_VAR 0 2
44529: PUSH
44530: LD_VAR 0 3
44534: ARRAY
44535: ST_TO_ADDR
// end ;
44536: GO 44445
44538: POP
44539: POP
// ComLinkTo ( vehicle , mech ) ;
44540: LD_VAR 0 1
44544: PPUSH
44545: LD_VAR 0 5
44549: PPUSH
44550: CALL_OW 135
// end ;
44554: LD_VAR 0 2
44558: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44559: LD_INT 0
44561: PPUSH
44562: PPUSH
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
// result := [ ] ;
44574: LD_ADDR_VAR 0 7
44578: PUSH
44579: EMPTY
44580: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44581: LD_VAR 0 1
44585: PPUSH
44586: CALL_OW 266
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: IN
44601: NOT
44602: IFFALSE 44606
// exit ;
44604: GO 46237
// if name then
44606: LD_VAR 0 3
44610: IFFALSE 44626
// SetBName ( base_dep , name ) ;
44612: LD_VAR 0 1
44616: PPUSH
44617: LD_VAR 0 3
44621: PPUSH
44622: CALL_OW 500
// base := GetBase ( base_dep ) ;
44626: LD_ADDR_VAR 0 15
44630: PUSH
44631: LD_VAR 0 1
44635: PPUSH
44636: CALL_OW 274
44640: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44641: LD_ADDR_VAR 0 16
44645: PUSH
44646: LD_VAR 0 1
44650: PPUSH
44651: CALL_OW 255
44655: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44656: LD_ADDR_VAR 0 17
44660: PUSH
44661: LD_VAR 0 1
44665: PPUSH
44666: CALL_OW 248
44670: ST_TO_ADDR
// if sources then
44671: LD_VAR 0 5
44675: IFFALSE 44722
// for i = 1 to 3 do
44677: LD_ADDR_VAR 0 8
44681: PUSH
44682: DOUBLE
44683: LD_INT 1
44685: DEC
44686: ST_TO_ADDR
44687: LD_INT 3
44689: PUSH
44690: FOR_TO
44691: IFFALSE 44720
// AddResourceType ( base , i , sources [ i ] ) ;
44693: LD_VAR 0 15
44697: PPUSH
44698: LD_VAR 0 8
44702: PPUSH
44703: LD_VAR 0 5
44707: PUSH
44708: LD_VAR 0 8
44712: ARRAY
44713: PPUSH
44714: CALL_OW 276
44718: GO 44690
44720: POP
44721: POP
// buildings := GetBaseBuildings ( base , area ) ;
44722: LD_ADDR_VAR 0 18
44726: PUSH
44727: LD_VAR 0 15
44731: PPUSH
44732: LD_VAR 0 2
44736: PPUSH
44737: CALL 44014 0 2
44741: ST_TO_ADDR
// InitHc ;
44742: CALL_OW 19
// InitUc ;
44746: CALL_OW 18
// uc_side := side ;
44750: LD_ADDR_OWVAR 20
44754: PUSH
44755: LD_VAR 0 16
44759: ST_TO_ADDR
// uc_nation := nation ;
44760: LD_ADDR_OWVAR 21
44764: PUSH
44765: LD_VAR 0 17
44769: ST_TO_ADDR
// if buildings then
44770: LD_VAR 0 18
44774: IFFALSE 46096
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44776: LD_ADDR_VAR 0 19
44780: PUSH
44781: LD_VAR 0 18
44785: PPUSH
44786: LD_INT 2
44788: PUSH
44789: LD_INT 30
44791: PUSH
44792: LD_INT 29
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 30
44801: PUSH
44802: LD_INT 30
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: PPUSH
44814: CALL_OW 72
44818: ST_TO_ADDR
// if tmp then
44819: LD_VAR 0 19
44823: IFFALSE 44871
// for i in tmp do
44825: LD_ADDR_VAR 0 8
44829: PUSH
44830: LD_VAR 0 19
44834: PUSH
44835: FOR_IN
44836: IFFALSE 44869
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44838: LD_VAR 0 8
44842: PPUSH
44843: CALL_OW 250
44847: PPUSH
44848: LD_VAR 0 8
44852: PPUSH
44853: CALL_OW 251
44857: PPUSH
44858: LD_VAR 0 16
44862: PPUSH
44863: CALL_OW 441
44867: GO 44835
44869: POP
44870: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44871: LD_VAR 0 18
44875: PPUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 30
44881: PUSH
44882: LD_INT 32
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 30
44891: PUSH
44892: LD_INT 33
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: PPUSH
44904: CALL_OW 72
44908: IFFALSE 44996
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44910: LD_ADDR_VAR 0 8
44914: PUSH
44915: LD_VAR 0 18
44919: PPUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 30
44925: PUSH
44926: LD_INT 32
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 30
44935: PUSH
44936: LD_INT 33
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: PPUSH
44948: CALL_OW 72
44952: PUSH
44953: FOR_IN
44954: IFFALSE 44994
// begin if not GetBWeapon ( i ) then
44956: LD_VAR 0 8
44960: PPUSH
44961: CALL_OW 269
44965: NOT
44966: IFFALSE 44992
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44968: LD_VAR 0 8
44972: PPUSH
44973: LD_VAR 0 8
44977: PPUSH
44978: LD_VAR 0 2
44982: PPUSH
44983: CALL 46242 0 2
44987: PPUSH
44988: CALL_OW 431
// end ;
44992: GO 44953
44994: POP
44995: POP
// end ; for i = 1 to personel do
44996: LD_ADDR_VAR 0 8
45000: PUSH
45001: DOUBLE
45002: LD_INT 1
45004: DEC
45005: ST_TO_ADDR
45006: LD_VAR 0 6
45010: PUSH
45011: FOR_TO
45012: IFFALSE 46076
// begin if i > 4 then
45014: LD_VAR 0 8
45018: PUSH
45019: LD_INT 4
45021: GREATER
45022: IFFALSE 45026
// break ;
45024: GO 46076
// case i of 1 :
45026: LD_VAR 0 8
45030: PUSH
45031: LD_INT 1
45033: DOUBLE
45034: EQUAL
45035: IFTRUE 45039
45037: GO 45119
45039: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45040: LD_ADDR_VAR 0 12
45044: PUSH
45045: LD_VAR 0 18
45049: PPUSH
45050: LD_INT 22
45052: PUSH
45053: LD_VAR 0 16
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 58
45064: PUSH
45065: EMPTY
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: LD_INT 30
45073: PUSH
45074: LD_INT 32
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 30
45083: PUSH
45084: LD_INT 4
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 30
45093: PUSH
45094: LD_INT 5
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: PPUSH
45112: CALL_OW 72
45116: ST_TO_ADDR
45117: GO 45341
45119: LD_INT 2
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 45189
45127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45128: LD_ADDR_VAR 0 12
45132: PUSH
45133: LD_VAR 0 18
45137: PPUSH
45138: LD_INT 22
45140: PUSH
45141: LD_VAR 0 16
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 30
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 30
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PPUSH
45182: CALL_OW 72
45186: ST_TO_ADDR
45187: GO 45341
45189: LD_INT 3
45191: DOUBLE
45192: EQUAL
45193: IFTRUE 45197
45195: GO 45259
45197: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45198: LD_ADDR_VAR 0 12
45202: PUSH
45203: LD_VAR 0 18
45207: PPUSH
45208: LD_INT 22
45210: PUSH
45211: LD_VAR 0 16
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: LD_INT 30
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 30
45235: PUSH
45236: LD_INT 3
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PPUSH
45252: CALL_OW 72
45256: ST_TO_ADDR
45257: GO 45341
45259: LD_INT 4
45261: DOUBLE
45262: EQUAL
45263: IFTRUE 45267
45265: GO 45340
45267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45268: LD_ADDR_VAR 0 12
45272: PUSH
45273: LD_VAR 0 18
45277: PPUSH
45278: LD_INT 22
45280: PUSH
45281: LD_VAR 0 16
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 30
45295: PUSH
45296: LD_INT 6
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 30
45305: PUSH
45306: LD_INT 7
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 30
45315: PUSH
45316: LD_INT 8
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PPUSH
45333: CALL_OW 72
45337: ST_TO_ADDR
45338: GO 45341
45340: POP
// if i = 1 then
45341: LD_VAR 0 8
45345: PUSH
45346: LD_INT 1
45348: EQUAL
45349: IFFALSE 45460
// begin tmp := [ ] ;
45351: LD_ADDR_VAR 0 19
45355: PUSH
45356: EMPTY
45357: ST_TO_ADDR
// for j in f do
45358: LD_ADDR_VAR 0 9
45362: PUSH
45363: LD_VAR 0 12
45367: PUSH
45368: FOR_IN
45369: IFFALSE 45442
// if GetBType ( j ) = b_bunker then
45371: LD_VAR 0 9
45375: PPUSH
45376: CALL_OW 266
45380: PUSH
45381: LD_INT 32
45383: EQUAL
45384: IFFALSE 45411
// tmp := Insert ( tmp , 1 , j ) else
45386: LD_ADDR_VAR 0 19
45390: PUSH
45391: LD_VAR 0 19
45395: PPUSH
45396: LD_INT 1
45398: PPUSH
45399: LD_VAR 0 9
45403: PPUSH
45404: CALL_OW 2
45408: ST_TO_ADDR
45409: GO 45440
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45411: LD_ADDR_VAR 0 19
45415: PUSH
45416: LD_VAR 0 19
45420: PPUSH
45421: LD_VAR 0 19
45425: PUSH
45426: LD_INT 1
45428: PLUS
45429: PPUSH
45430: LD_VAR 0 9
45434: PPUSH
45435: CALL_OW 2
45439: ST_TO_ADDR
45440: GO 45368
45442: POP
45443: POP
// if tmp then
45444: LD_VAR 0 19
45448: IFFALSE 45460
// f := tmp ;
45450: LD_ADDR_VAR 0 12
45454: PUSH
45455: LD_VAR 0 19
45459: ST_TO_ADDR
// end ; x := personel [ i ] ;
45460: LD_ADDR_VAR 0 13
45464: PUSH
45465: LD_VAR 0 6
45469: PUSH
45470: LD_VAR 0 8
45474: ARRAY
45475: ST_TO_ADDR
// if x = - 1 then
45476: LD_VAR 0 13
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: EQUAL
45485: IFFALSE 45694
// begin for j in f do
45487: LD_ADDR_VAR 0 9
45491: PUSH
45492: LD_VAR 0 12
45496: PUSH
45497: FOR_IN
45498: IFFALSE 45690
// repeat InitHc ;
45500: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45504: LD_VAR 0 9
45508: PPUSH
45509: CALL_OW 266
45513: PUSH
45514: LD_INT 5
45516: EQUAL
45517: IFFALSE 45587
// begin if UnitsInside ( j ) < 3 then
45519: LD_VAR 0 9
45523: PPUSH
45524: CALL_OW 313
45528: PUSH
45529: LD_INT 3
45531: LESS
45532: IFFALSE 45568
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45534: LD_INT 0
45536: PPUSH
45537: LD_INT 5
45539: PUSH
45540: LD_INT 8
45542: PUSH
45543: LD_INT 9
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: LIST
45550: PUSH
45551: LD_VAR 0 17
45555: ARRAY
45556: PPUSH
45557: LD_VAR 0 4
45561: PPUSH
45562: CALL_OW 380
45566: GO 45585
// PrepareHuman ( false , i , skill ) ;
45568: LD_INT 0
45570: PPUSH
45571: LD_VAR 0 8
45575: PPUSH
45576: LD_VAR 0 4
45580: PPUSH
45581: CALL_OW 380
// end else
45585: GO 45604
// PrepareHuman ( false , i , skill ) ;
45587: LD_INT 0
45589: PPUSH
45590: LD_VAR 0 8
45594: PPUSH
45595: LD_VAR 0 4
45599: PPUSH
45600: CALL_OW 380
// un := CreateHuman ;
45604: LD_ADDR_VAR 0 14
45608: PUSH
45609: CALL_OW 44
45613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45614: LD_ADDR_VAR 0 7
45618: PUSH
45619: LD_VAR 0 7
45623: PPUSH
45624: LD_INT 1
45626: PPUSH
45627: LD_VAR 0 14
45631: PPUSH
45632: CALL_OW 2
45636: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45637: LD_VAR 0 14
45641: PPUSH
45642: LD_VAR 0 9
45646: PPUSH
45647: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45651: LD_VAR 0 9
45655: PPUSH
45656: CALL_OW 313
45660: PUSH
45661: LD_INT 6
45663: EQUAL
45664: PUSH
45665: LD_VAR 0 9
45669: PPUSH
45670: CALL_OW 266
45674: PUSH
45675: LD_INT 32
45677: PUSH
45678: LD_INT 31
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: IN
45685: OR
45686: IFFALSE 45500
45688: GO 45497
45690: POP
45691: POP
// end else
45692: GO 46074
// for j = 1 to x do
45694: LD_ADDR_VAR 0 9
45698: PUSH
45699: DOUBLE
45700: LD_INT 1
45702: DEC
45703: ST_TO_ADDR
45704: LD_VAR 0 13
45708: PUSH
45709: FOR_TO
45710: IFFALSE 46072
// begin InitHc ;
45712: CALL_OW 19
// if not f then
45716: LD_VAR 0 12
45720: NOT
45721: IFFALSE 45810
// begin PrepareHuman ( false , i , skill ) ;
45723: LD_INT 0
45725: PPUSH
45726: LD_VAR 0 8
45730: PPUSH
45731: LD_VAR 0 4
45735: PPUSH
45736: CALL_OW 380
// un := CreateHuman ;
45740: LD_ADDR_VAR 0 14
45744: PUSH
45745: CALL_OW 44
45749: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45750: LD_ADDR_VAR 0 7
45754: PUSH
45755: LD_VAR 0 7
45759: PPUSH
45760: LD_INT 1
45762: PPUSH
45763: LD_VAR 0 14
45767: PPUSH
45768: CALL_OW 2
45772: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45773: LD_VAR 0 14
45777: PPUSH
45778: LD_VAR 0 1
45782: PPUSH
45783: CALL_OW 250
45787: PPUSH
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 251
45797: PPUSH
45798: LD_INT 10
45800: PPUSH
45801: LD_INT 0
45803: PPUSH
45804: CALL_OW 50
// continue ;
45808: GO 45709
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45810: LD_VAR 0 12
45814: PUSH
45815: LD_INT 1
45817: ARRAY
45818: PPUSH
45819: CALL_OW 313
45823: PUSH
45824: LD_VAR 0 12
45828: PUSH
45829: LD_INT 1
45831: ARRAY
45832: PPUSH
45833: CALL_OW 266
45837: PUSH
45838: LD_INT 32
45840: PUSH
45841: LD_INT 31
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: IN
45848: AND
45849: PUSH
45850: LD_VAR 0 12
45854: PUSH
45855: LD_INT 1
45857: ARRAY
45858: PPUSH
45859: CALL_OW 313
45863: PUSH
45864: LD_INT 6
45866: EQUAL
45867: OR
45868: IFFALSE 45888
// f := Delete ( f , 1 ) ;
45870: LD_ADDR_VAR 0 12
45874: PUSH
45875: LD_VAR 0 12
45879: PPUSH
45880: LD_INT 1
45882: PPUSH
45883: CALL_OW 3
45887: ST_TO_ADDR
// if not f then
45888: LD_VAR 0 12
45892: NOT
45893: IFFALSE 45911
// begin x := x + 2 ;
45895: LD_ADDR_VAR 0 13
45899: PUSH
45900: LD_VAR 0 13
45904: PUSH
45905: LD_INT 2
45907: PLUS
45908: ST_TO_ADDR
// continue ;
45909: GO 45709
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45911: LD_VAR 0 12
45915: PUSH
45916: LD_INT 1
45918: ARRAY
45919: PPUSH
45920: CALL_OW 266
45924: PUSH
45925: LD_INT 5
45927: EQUAL
45928: IFFALSE 46002
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45930: LD_VAR 0 12
45934: PUSH
45935: LD_INT 1
45937: ARRAY
45938: PPUSH
45939: CALL_OW 313
45943: PUSH
45944: LD_INT 3
45946: LESS
45947: IFFALSE 45983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45949: LD_INT 0
45951: PPUSH
45952: LD_INT 5
45954: PUSH
45955: LD_INT 8
45957: PUSH
45958: LD_INT 9
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: PUSH
45966: LD_VAR 0 17
45970: ARRAY
45971: PPUSH
45972: LD_VAR 0 4
45976: PPUSH
45977: CALL_OW 380
45981: GO 46000
// PrepareHuman ( false , i , skill ) ;
45983: LD_INT 0
45985: PPUSH
45986: LD_VAR 0 8
45990: PPUSH
45991: LD_VAR 0 4
45995: PPUSH
45996: CALL_OW 380
// end else
46000: GO 46019
// PrepareHuman ( false , i , skill ) ;
46002: LD_INT 0
46004: PPUSH
46005: LD_VAR 0 8
46009: PPUSH
46010: LD_VAR 0 4
46014: PPUSH
46015: CALL_OW 380
// un := CreateHuman ;
46019: LD_ADDR_VAR 0 14
46023: PUSH
46024: CALL_OW 44
46028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46029: LD_ADDR_VAR 0 7
46033: PUSH
46034: LD_VAR 0 7
46038: PPUSH
46039: LD_INT 1
46041: PPUSH
46042: LD_VAR 0 14
46046: PPUSH
46047: CALL_OW 2
46051: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46052: LD_VAR 0 14
46056: PPUSH
46057: LD_VAR 0 12
46061: PUSH
46062: LD_INT 1
46064: ARRAY
46065: PPUSH
46066: CALL_OW 52
// end ;
46070: GO 45709
46072: POP
46073: POP
// end ;
46074: GO 45011
46076: POP
46077: POP
// result := result ^ buildings ;
46078: LD_ADDR_VAR 0 7
46082: PUSH
46083: LD_VAR 0 7
46087: PUSH
46088: LD_VAR 0 18
46092: ADD
46093: ST_TO_ADDR
// end else
46094: GO 46237
// begin for i = 1 to personel do
46096: LD_ADDR_VAR 0 8
46100: PUSH
46101: DOUBLE
46102: LD_INT 1
46104: DEC
46105: ST_TO_ADDR
46106: LD_VAR 0 6
46110: PUSH
46111: FOR_TO
46112: IFFALSE 46235
// begin if i > 4 then
46114: LD_VAR 0 8
46118: PUSH
46119: LD_INT 4
46121: GREATER
46122: IFFALSE 46126
// break ;
46124: GO 46235
// x := personel [ i ] ;
46126: LD_ADDR_VAR 0 13
46130: PUSH
46131: LD_VAR 0 6
46135: PUSH
46136: LD_VAR 0 8
46140: ARRAY
46141: ST_TO_ADDR
// if x = - 1 then
46142: LD_VAR 0 13
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: EQUAL
46151: IFFALSE 46155
// continue ;
46153: GO 46111
// PrepareHuman ( false , i , skill ) ;
46155: LD_INT 0
46157: PPUSH
46158: LD_VAR 0 8
46162: PPUSH
46163: LD_VAR 0 4
46167: PPUSH
46168: CALL_OW 380
// un := CreateHuman ;
46172: LD_ADDR_VAR 0 14
46176: PUSH
46177: CALL_OW 44
46181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46182: LD_VAR 0 14
46186: PPUSH
46187: LD_VAR 0 1
46191: PPUSH
46192: CALL_OW 250
46196: PPUSH
46197: LD_VAR 0 1
46201: PPUSH
46202: CALL_OW 251
46206: PPUSH
46207: LD_INT 10
46209: PPUSH
46210: LD_INT 0
46212: PPUSH
46213: CALL_OW 50
// result := result ^ un ;
46217: LD_ADDR_VAR 0 7
46221: PUSH
46222: LD_VAR 0 7
46226: PUSH
46227: LD_VAR 0 14
46231: ADD
46232: ST_TO_ADDR
// end ;
46233: GO 46111
46235: POP
46236: POP
// end ; end ;
46237: LD_VAR 0 7
46241: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46242: LD_INT 0
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
// result := false ;
46260: LD_ADDR_VAR 0 3
46264: PUSH
46265: LD_INT 0
46267: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46268: LD_VAR 0 1
46272: NOT
46273: PUSH
46274: LD_VAR 0 1
46278: PPUSH
46279: CALL_OW 266
46283: PUSH
46284: LD_INT 32
46286: PUSH
46287: LD_INT 33
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: IN
46294: NOT
46295: OR
46296: IFFALSE 46300
// exit ;
46298: GO 47436
// nat := GetNation ( tower ) ;
46300: LD_ADDR_VAR 0 12
46304: PUSH
46305: LD_VAR 0 1
46309: PPUSH
46310: CALL_OW 248
46314: ST_TO_ADDR
// side := GetSide ( tower ) ;
46315: LD_ADDR_VAR 0 16
46319: PUSH
46320: LD_VAR 0 1
46324: PPUSH
46325: CALL_OW 255
46329: ST_TO_ADDR
// x := GetX ( tower ) ;
46330: LD_ADDR_VAR 0 10
46334: PUSH
46335: LD_VAR 0 1
46339: PPUSH
46340: CALL_OW 250
46344: ST_TO_ADDR
// y := GetY ( tower ) ;
46345: LD_ADDR_VAR 0 11
46349: PUSH
46350: LD_VAR 0 1
46354: PPUSH
46355: CALL_OW 251
46359: ST_TO_ADDR
// if not x or not y then
46360: LD_VAR 0 10
46364: NOT
46365: PUSH
46366: LD_VAR 0 11
46370: NOT
46371: OR
46372: IFFALSE 46376
// exit ;
46374: GO 47436
// weapon := 0 ;
46376: LD_ADDR_VAR 0 18
46380: PUSH
46381: LD_INT 0
46383: ST_TO_ADDR
// fac_list := [ ] ;
46384: LD_ADDR_VAR 0 17
46388: PUSH
46389: EMPTY
46390: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
46391: LD_ADDR_VAR 0 6
46395: PUSH
46396: LD_VAR 0 1
46400: PPUSH
46401: CALL_OW 274
46405: PPUSH
46406: LD_VAR 0 2
46410: PPUSH
46411: CALL 44014 0 2
46415: PPUSH
46416: LD_INT 30
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PPUSH
46426: CALL_OW 72
46430: ST_TO_ADDR
// if not factories then
46431: LD_VAR 0 6
46435: NOT
46436: IFFALSE 46440
// exit ;
46438: GO 47436
// for i in factories do
46440: LD_ADDR_VAR 0 8
46444: PUSH
46445: LD_VAR 0 6
46449: PUSH
46450: FOR_IN
46451: IFFALSE 46476
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46453: LD_ADDR_VAR 0 17
46457: PUSH
46458: LD_VAR 0 17
46462: PUSH
46463: LD_VAR 0 8
46467: PPUSH
46468: CALL_OW 478
46472: UNION
46473: ST_TO_ADDR
46474: GO 46450
46476: POP
46477: POP
// if not fac_list then
46478: LD_VAR 0 17
46482: NOT
46483: IFFALSE 46487
// exit ;
46485: GO 47436
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46487: LD_ADDR_VAR 0 5
46491: PUSH
46492: LD_INT 4
46494: PUSH
46495: LD_INT 5
46497: PUSH
46498: LD_INT 9
46500: PUSH
46501: LD_INT 10
46503: PUSH
46504: LD_INT 6
46506: PUSH
46507: LD_INT 7
46509: PUSH
46510: LD_INT 11
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 27
46524: PUSH
46525: LD_INT 28
46527: PUSH
46528: LD_INT 26
46530: PUSH
46531: LD_INT 30
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 43
46542: PUSH
46543: LD_INT 44
46545: PUSH
46546: LD_INT 46
46548: PUSH
46549: LD_INT 45
46551: PUSH
46552: LD_INT 47
46554: PUSH
46555: LD_INT 49
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: PUSH
46571: LD_VAR 0 12
46575: ARRAY
46576: ST_TO_ADDR
// for i in list do
46577: LD_ADDR_VAR 0 8
46581: PUSH
46582: LD_VAR 0 5
46586: PUSH
46587: FOR_IN
46588: IFFALSE 46621
// if not i in fac_list then
46590: LD_VAR 0 8
46594: PUSH
46595: LD_VAR 0 17
46599: IN
46600: NOT
46601: IFFALSE 46619
// list := list diff i ;
46603: LD_ADDR_VAR 0 5
46607: PUSH
46608: LD_VAR 0 5
46612: PUSH
46613: LD_VAR 0 8
46617: DIFF
46618: ST_TO_ADDR
46619: GO 46587
46621: POP
46622: POP
// if not list then
46623: LD_VAR 0 5
46627: NOT
46628: IFFALSE 46632
// exit ;
46630: GO 47436
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46632: LD_VAR 0 12
46636: PUSH
46637: LD_INT 3
46639: EQUAL
46640: PUSH
46641: LD_INT 49
46643: PUSH
46644: LD_VAR 0 5
46648: IN
46649: AND
46650: PUSH
46651: LD_INT 31
46653: PPUSH
46654: LD_VAR 0 16
46658: PPUSH
46659: CALL_OW 321
46663: PUSH
46664: LD_INT 2
46666: EQUAL
46667: AND
46668: IFFALSE 46728
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46670: LD_INT 22
46672: PUSH
46673: LD_VAR 0 16
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 35
46684: PUSH
46685: LD_INT 49
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 91
46694: PUSH
46695: LD_VAR 0 1
46699: PUSH
46700: LD_INT 10
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: PPUSH
46713: CALL_OW 69
46717: NOT
46718: IFFALSE 46728
// weapon := ru_time_lapser ;
46720: LD_ADDR_VAR 0 18
46724: PUSH
46725: LD_INT 49
46727: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46728: LD_VAR 0 12
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: IN
46743: PUSH
46744: LD_INT 11
46746: PUSH
46747: LD_VAR 0 5
46751: IN
46752: PUSH
46753: LD_INT 30
46755: PUSH
46756: LD_VAR 0 5
46760: IN
46761: OR
46762: AND
46763: PUSH
46764: LD_INT 6
46766: PPUSH
46767: LD_VAR 0 16
46771: PPUSH
46772: CALL_OW 321
46776: PUSH
46777: LD_INT 2
46779: EQUAL
46780: AND
46781: IFFALSE 46946
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46783: LD_INT 22
46785: PUSH
46786: LD_VAR 0 16
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 35
46800: PUSH
46801: LD_INT 11
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 35
46810: PUSH
46811: LD_INT 30
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 91
46825: PUSH
46826: LD_VAR 0 1
46830: PUSH
46831: LD_INT 18
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: PPUSH
46844: CALL_OW 69
46848: NOT
46849: PUSH
46850: LD_INT 22
46852: PUSH
46853: LD_VAR 0 16
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 30
46867: PUSH
46868: LD_INT 32
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 30
46877: PUSH
46878: LD_INT 33
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 91
46892: PUSH
46893: LD_VAR 0 1
46897: PUSH
46898: LD_INT 12
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: PPUSH
46914: CALL_OW 69
46918: PUSH
46919: LD_INT 2
46921: GREATER
46922: AND
46923: IFFALSE 46946
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46925: LD_ADDR_VAR 0 18
46929: PUSH
46930: LD_INT 11
46932: PUSH
46933: LD_INT 30
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_VAR 0 12
46944: ARRAY
46945: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46946: LD_VAR 0 18
46950: NOT
46951: PUSH
46952: LD_INT 40
46954: PPUSH
46955: LD_VAR 0 16
46959: PPUSH
46960: CALL_OW 321
46964: PUSH
46965: LD_INT 2
46967: EQUAL
46968: AND
46969: PUSH
46970: LD_INT 7
46972: PUSH
46973: LD_VAR 0 5
46977: IN
46978: PUSH
46979: LD_INT 28
46981: PUSH
46982: LD_VAR 0 5
46986: IN
46987: OR
46988: PUSH
46989: LD_INT 45
46991: PUSH
46992: LD_VAR 0 5
46996: IN
46997: OR
46998: AND
46999: IFFALSE 47253
// begin hex := GetHexInfo ( x , y ) ;
47001: LD_ADDR_VAR 0 4
47005: PUSH
47006: LD_VAR 0 10
47010: PPUSH
47011: LD_VAR 0 11
47015: PPUSH
47016: CALL_OW 546
47020: ST_TO_ADDR
// if hex [ 1 ] then
47021: LD_VAR 0 4
47025: PUSH
47026: LD_INT 1
47028: ARRAY
47029: IFFALSE 47033
// exit ;
47031: GO 47436
// height := hex [ 2 ] ;
47033: LD_ADDR_VAR 0 15
47037: PUSH
47038: LD_VAR 0 4
47042: PUSH
47043: LD_INT 2
47045: ARRAY
47046: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47047: LD_ADDR_VAR 0 14
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 5
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: ST_TO_ADDR
// for i in tmp do
47070: LD_ADDR_VAR 0 8
47074: PUSH
47075: LD_VAR 0 14
47079: PUSH
47080: FOR_IN
47081: IFFALSE 47251
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47083: LD_ADDR_VAR 0 9
47087: PUSH
47088: LD_VAR 0 10
47092: PPUSH
47093: LD_VAR 0 8
47097: PPUSH
47098: LD_INT 5
47100: PPUSH
47101: CALL_OW 272
47105: PUSH
47106: LD_VAR 0 11
47110: PPUSH
47111: LD_VAR 0 8
47115: PPUSH
47116: LD_INT 5
47118: PPUSH
47119: CALL_OW 273
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47128: LD_VAR 0 9
47132: PUSH
47133: LD_INT 1
47135: ARRAY
47136: PPUSH
47137: LD_VAR 0 9
47141: PUSH
47142: LD_INT 2
47144: ARRAY
47145: PPUSH
47146: CALL_OW 488
47150: IFFALSE 47249
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47152: LD_ADDR_VAR 0 4
47156: PUSH
47157: LD_VAR 0 9
47161: PUSH
47162: LD_INT 1
47164: ARRAY
47165: PPUSH
47166: LD_VAR 0 9
47170: PUSH
47171: LD_INT 2
47173: ARRAY
47174: PPUSH
47175: CALL_OW 546
47179: ST_TO_ADDR
// if hex [ 1 ] then
47180: LD_VAR 0 4
47184: PUSH
47185: LD_INT 1
47187: ARRAY
47188: IFFALSE 47192
// continue ;
47190: GO 47080
// h := hex [ 2 ] ;
47192: LD_ADDR_VAR 0 13
47196: PUSH
47197: LD_VAR 0 4
47201: PUSH
47202: LD_INT 2
47204: ARRAY
47205: ST_TO_ADDR
// if h + 7 < height then
47206: LD_VAR 0 13
47210: PUSH
47211: LD_INT 7
47213: PLUS
47214: PUSH
47215: LD_VAR 0 15
47219: LESS
47220: IFFALSE 47249
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47222: LD_ADDR_VAR 0 18
47226: PUSH
47227: LD_INT 7
47229: PUSH
47230: LD_INT 28
47232: PUSH
47233: LD_INT 45
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: PUSH
47241: LD_VAR 0 12
47245: ARRAY
47246: ST_TO_ADDR
// break ;
47247: GO 47251
// end ; end ; end ;
47249: GO 47080
47251: POP
47252: POP
// end ; if not weapon then
47253: LD_VAR 0 18
47257: NOT
47258: IFFALSE 47318
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47260: LD_ADDR_VAR 0 5
47264: PUSH
47265: LD_VAR 0 5
47269: PUSH
47270: LD_INT 11
47272: PUSH
47273: LD_INT 30
47275: PUSH
47276: LD_INT 49
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: DIFF
47284: ST_TO_ADDR
// if not list then
47285: LD_VAR 0 5
47289: NOT
47290: IFFALSE 47294
// exit ;
47292: GO 47436
// weapon := list [ rand ( 1 , list ) ] ;
47294: LD_ADDR_VAR 0 18
47298: PUSH
47299: LD_VAR 0 5
47303: PUSH
47304: LD_INT 1
47306: PPUSH
47307: LD_VAR 0 5
47311: PPUSH
47312: CALL_OW 12
47316: ARRAY
47317: ST_TO_ADDR
// end ; if weapon then
47318: LD_VAR 0 18
47322: IFFALSE 47436
// begin tmp := CostOfWeapon ( weapon ) ;
47324: LD_ADDR_VAR 0 14
47328: PUSH
47329: LD_VAR 0 18
47333: PPUSH
47334: CALL_OW 451
47338: ST_TO_ADDR
// j := GetBase ( tower ) ;
47339: LD_ADDR_VAR 0 9
47343: PUSH
47344: LD_VAR 0 1
47348: PPUSH
47349: CALL_OW 274
47353: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47354: LD_VAR 0 9
47358: PPUSH
47359: LD_INT 1
47361: PPUSH
47362: CALL_OW 275
47366: PUSH
47367: LD_VAR 0 14
47371: PUSH
47372: LD_INT 1
47374: ARRAY
47375: GREATEREQUAL
47376: PUSH
47377: LD_VAR 0 9
47381: PPUSH
47382: LD_INT 2
47384: PPUSH
47385: CALL_OW 275
47389: PUSH
47390: LD_VAR 0 14
47394: PUSH
47395: LD_INT 2
47397: ARRAY
47398: GREATEREQUAL
47399: AND
47400: PUSH
47401: LD_VAR 0 9
47405: PPUSH
47406: LD_INT 3
47408: PPUSH
47409: CALL_OW 275
47413: PUSH
47414: LD_VAR 0 14
47418: PUSH
47419: LD_INT 3
47421: ARRAY
47422: GREATEREQUAL
47423: AND
47424: IFFALSE 47436
// result := weapon ;
47426: LD_ADDR_VAR 0 3
47430: PUSH
47431: LD_VAR 0 18
47435: ST_TO_ADDR
// end ; end ;
47436: LD_VAR 0 3
47440: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47441: LD_INT 0
47443: PPUSH
47444: PPUSH
// result := true ;
47445: LD_ADDR_VAR 0 3
47449: PUSH
47450: LD_INT 1
47452: ST_TO_ADDR
// if array1 = array2 then
47453: LD_VAR 0 1
47457: PUSH
47458: LD_VAR 0 2
47462: EQUAL
47463: IFFALSE 47523
// begin for i = 1 to array1 do
47465: LD_ADDR_VAR 0 4
47469: PUSH
47470: DOUBLE
47471: LD_INT 1
47473: DEC
47474: ST_TO_ADDR
47475: LD_VAR 0 1
47479: PUSH
47480: FOR_TO
47481: IFFALSE 47519
// if array1 [ i ] <> array2 [ i ] then
47483: LD_VAR 0 1
47487: PUSH
47488: LD_VAR 0 4
47492: ARRAY
47493: PUSH
47494: LD_VAR 0 2
47498: PUSH
47499: LD_VAR 0 4
47503: ARRAY
47504: NONEQUAL
47505: IFFALSE 47517
// begin result := false ;
47507: LD_ADDR_VAR 0 3
47511: PUSH
47512: LD_INT 0
47514: ST_TO_ADDR
// break ;
47515: GO 47519
// end ;
47517: GO 47480
47519: POP
47520: POP
// end else
47521: GO 47531
// result := false ;
47523: LD_ADDR_VAR 0 3
47527: PUSH
47528: LD_INT 0
47530: ST_TO_ADDR
// end ;
47531: LD_VAR 0 3
47535: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47536: LD_INT 0
47538: PPUSH
47539: PPUSH
47540: PPUSH
// pom := GetBase ( fac ) ;
47541: LD_ADDR_VAR 0 5
47545: PUSH
47546: LD_VAR 0 1
47550: PPUSH
47551: CALL_OW 274
47555: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47556: LD_ADDR_VAR 0 4
47560: PUSH
47561: LD_VAR 0 2
47565: PUSH
47566: LD_INT 1
47568: ARRAY
47569: PPUSH
47570: LD_VAR 0 2
47574: PUSH
47575: LD_INT 2
47577: ARRAY
47578: PPUSH
47579: LD_VAR 0 2
47583: PUSH
47584: LD_INT 3
47586: ARRAY
47587: PPUSH
47588: LD_VAR 0 2
47592: PUSH
47593: LD_INT 4
47595: ARRAY
47596: PPUSH
47597: CALL_OW 449
47601: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47602: LD_ADDR_VAR 0 3
47606: PUSH
47607: LD_VAR 0 5
47611: PPUSH
47612: LD_INT 1
47614: PPUSH
47615: CALL_OW 275
47619: PUSH
47620: LD_VAR 0 4
47624: PUSH
47625: LD_INT 1
47627: ARRAY
47628: GREATEREQUAL
47629: PUSH
47630: LD_VAR 0 5
47634: PPUSH
47635: LD_INT 2
47637: PPUSH
47638: CALL_OW 275
47642: PUSH
47643: LD_VAR 0 4
47647: PUSH
47648: LD_INT 2
47650: ARRAY
47651: GREATEREQUAL
47652: AND
47653: PUSH
47654: LD_VAR 0 5
47658: PPUSH
47659: LD_INT 3
47661: PPUSH
47662: CALL_OW 275
47666: PUSH
47667: LD_VAR 0 4
47671: PUSH
47672: LD_INT 3
47674: ARRAY
47675: GREATEREQUAL
47676: AND
47677: ST_TO_ADDR
// end ;
47678: LD_VAR 0 3
47682: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47683: LD_INT 0
47685: PPUSH
47686: PPUSH
47687: PPUSH
47688: PPUSH
// pom := GetBase ( building ) ;
47689: LD_ADDR_VAR 0 3
47693: PUSH
47694: LD_VAR 0 1
47698: PPUSH
47699: CALL_OW 274
47703: ST_TO_ADDR
// if not pom then
47704: LD_VAR 0 3
47708: NOT
47709: IFFALSE 47713
// exit ;
47711: GO 47883
// btype := GetBType ( building ) ;
47713: LD_ADDR_VAR 0 5
47717: PUSH
47718: LD_VAR 0 1
47722: PPUSH
47723: CALL_OW 266
47727: ST_TO_ADDR
// if btype = b_armoury then
47728: LD_VAR 0 5
47732: PUSH
47733: LD_INT 4
47735: EQUAL
47736: IFFALSE 47746
// btype := b_barracks ;
47738: LD_ADDR_VAR 0 5
47742: PUSH
47743: LD_INT 5
47745: ST_TO_ADDR
// if btype = b_depot then
47746: LD_VAR 0 5
47750: PUSH
47751: LD_INT 0
47753: EQUAL
47754: IFFALSE 47764
// btype := b_warehouse ;
47756: LD_ADDR_VAR 0 5
47760: PUSH
47761: LD_INT 1
47763: ST_TO_ADDR
// if btype = b_workshop then
47764: LD_VAR 0 5
47768: PUSH
47769: LD_INT 2
47771: EQUAL
47772: IFFALSE 47782
// btype := b_factory ;
47774: LD_ADDR_VAR 0 5
47778: PUSH
47779: LD_INT 3
47781: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47782: LD_ADDR_VAR 0 4
47786: PUSH
47787: LD_VAR 0 5
47791: PPUSH
47792: LD_VAR 0 1
47796: PPUSH
47797: CALL_OW 248
47801: PPUSH
47802: CALL_OW 450
47806: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47807: LD_ADDR_VAR 0 2
47811: PUSH
47812: LD_VAR 0 3
47816: PPUSH
47817: LD_INT 1
47819: PPUSH
47820: CALL_OW 275
47824: PUSH
47825: LD_VAR 0 4
47829: PUSH
47830: LD_INT 1
47832: ARRAY
47833: GREATEREQUAL
47834: PUSH
47835: LD_VAR 0 3
47839: PPUSH
47840: LD_INT 2
47842: PPUSH
47843: CALL_OW 275
47847: PUSH
47848: LD_VAR 0 4
47852: PUSH
47853: LD_INT 2
47855: ARRAY
47856: GREATEREQUAL
47857: AND
47858: PUSH
47859: LD_VAR 0 3
47863: PPUSH
47864: LD_INT 3
47866: PPUSH
47867: CALL_OW 275
47871: PUSH
47872: LD_VAR 0 4
47876: PUSH
47877: LD_INT 3
47879: ARRAY
47880: GREATEREQUAL
47881: AND
47882: ST_TO_ADDR
// end ;
47883: LD_VAR 0 2
47887: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47888: LD_INT 0
47890: PPUSH
47891: PPUSH
47892: PPUSH
// pom := GetBase ( building ) ;
47893: LD_ADDR_VAR 0 4
47897: PUSH
47898: LD_VAR 0 1
47902: PPUSH
47903: CALL_OW 274
47907: ST_TO_ADDR
// if not pom then
47908: LD_VAR 0 4
47912: NOT
47913: IFFALSE 47917
// exit ;
47915: GO 48018
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47917: LD_ADDR_VAR 0 5
47921: PUSH
47922: LD_VAR 0 2
47926: PPUSH
47927: LD_VAR 0 1
47931: PPUSH
47932: CALL_OW 248
47936: PPUSH
47937: CALL_OW 450
47941: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47942: LD_ADDR_VAR 0 3
47946: PUSH
47947: LD_VAR 0 4
47951: PPUSH
47952: LD_INT 1
47954: PPUSH
47955: CALL_OW 275
47959: PUSH
47960: LD_VAR 0 5
47964: PUSH
47965: LD_INT 1
47967: ARRAY
47968: GREATEREQUAL
47969: PUSH
47970: LD_VAR 0 4
47974: PPUSH
47975: LD_INT 2
47977: PPUSH
47978: CALL_OW 275
47982: PUSH
47983: LD_VAR 0 5
47987: PUSH
47988: LD_INT 2
47990: ARRAY
47991: GREATEREQUAL
47992: AND
47993: PUSH
47994: LD_VAR 0 4
47998: PPUSH
47999: LD_INT 3
48001: PPUSH
48002: CALL_OW 275
48006: PUSH
48007: LD_VAR 0 5
48011: PUSH
48012: LD_INT 3
48014: ARRAY
48015: GREATEREQUAL
48016: AND
48017: ST_TO_ADDR
// end ;
48018: LD_VAR 0 3
48022: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
48023: LD_INT 0
48025: PPUSH
48026: PPUSH
48027: PPUSH
48028: PPUSH
48029: PPUSH
48030: PPUSH
48031: PPUSH
48032: PPUSH
48033: PPUSH
48034: PPUSH
// result := false ;
48035: LD_ADDR_VAR 0 6
48039: PUSH
48040: LD_INT 0
48042: ST_TO_ADDR
// if not base or not btype or not x or not y then
48043: LD_VAR 0 1
48047: NOT
48048: PUSH
48049: LD_VAR 0 2
48053: NOT
48054: OR
48055: PUSH
48056: LD_VAR 0 3
48060: NOT
48061: OR
48062: PUSH
48063: LD_VAR 0 4
48067: NOT
48068: OR
48069: IFFALSE 48073
// exit ;
48071: GO 48682
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
48073: LD_ADDR_VAR 0 12
48077: PUSH
48078: LD_VAR 0 2
48082: PPUSH
48083: LD_VAR 0 3
48087: PPUSH
48088: LD_VAR 0 4
48092: PPUSH
48093: LD_VAR 0 5
48097: PPUSH
48098: LD_VAR 0 1
48102: PUSH
48103: LD_INT 1
48105: ARRAY
48106: PPUSH
48107: CALL_OW 248
48111: PPUSH
48112: LD_INT 0
48114: PPUSH
48115: CALL 49519 0 6
48119: ST_TO_ADDR
// if not hexes then
48120: LD_VAR 0 12
48124: NOT
48125: IFFALSE 48129
// exit ;
48127: GO 48682
// for i = 1 to hexes do
48129: LD_ADDR_VAR 0 7
48133: PUSH
48134: DOUBLE
48135: LD_INT 1
48137: DEC
48138: ST_TO_ADDR
48139: LD_VAR 0 12
48143: PUSH
48144: FOR_TO
48145: IFFALSE 48680
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48147: LD_ADDR_VAR 0 11
48151: PUSH
48152: LD_VAR 0 12
48156: PUSH
48157: LD_VAR 0 7
48161: ARRAY
48162: PUSH
48163: LD_INT 1
48165: ARRAY
48166: PPUSH
48167: LD_VAR 0 12
48171: PUSH
48172: LD_VAR 0 7
48176: ARRAY
48177: PUSH
48178: LD_INT 2
48180: ARRAY
48181: PPUSH
48182: CALL_OW 428
48186: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48187: LD_VAR 0 12
48191: PUSH
48192: LD_VAR 0 7
48196: ARRAY
48197: PUSH
48198: LD_INT 1
48200: ARRAY
48201: PPUSH
48202: LD_VAR 0 12
48206: PUSH
48207: LD_VAR 0 7
48211: ARRAY
48212: PUSH
48213: LD_INT 2
48215: ARRAY
48216: PPUSH
48217: CALL_OW 351
48221: PUSH
48222: LD_VAR 0 12
48226: PUSH
48227: LD_VAR 0 7
48231: ARRAY
48232: PUSH
48233: LD_INT 1
48235: ARRAY
48236: PPUSH
48237: LD_VAR 0 12
48241: PUSH
48242: LD_VAR 0 7
48246: ARRAY
48247: PUSH
48248: LD_INT 2
48250: ARRAY
48251: PPUSH
48252: CALL_OW 488
48256: NOT
48257: OR
48258: PUSH
48259: LD_VAR 0 11
48263: PPUSH
48264: CALL_OW 247
48268: PUSH
48269: LD_INT 3
48271: EQUAL
48272: OR
48273: IFFALSE 48279
// exit ;
48275: POP
48276: POP
48277: GO 48682
// if not tmp or not tmp in base then
48279: LD_VAR 0 11
48283: NOT
48284: PUSH
48285: LD_VAR 0 11
48289: PUSH
48290: LD_VAR 0 1
48294: IN
48295: NOT
48296: OR
48297: IFFALSE 48301
// continue ;
48299: GO 48144
// result := true ;
48301: LD_ADDR_VAR 0 6
48305: PUSH
48306: LD_INT 1
48308: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48309: LD_ADDR_VAR 0 15
48313: PUSH
48314: LD_VAR 0 1
48318: PPUSH
48319: LD_INT 22
48321: PUSH
48322: LD_VAR 0 11
48326: PPUSH
48327: CALL_OW 255
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: LD_INT 30
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 30
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: LIST
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PPUSH
48368: CALL_OW 72
48372: ST_TO_ADDR
// if dep then
48373: LD_VAR 0 15
48377: IFFALSE 48513
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48379: LD_ADDR_VAR 0 14
48383: PUSH
48384: LD_VAR 0 15
48388: PUSH
48389: LD_INT 1
48391: ARRAY
48392: PPUSH
48393: CALL_OW 250
48397: PPUSH
48398: LD_VAR 0 15
48402: PUSH
48403: LD_INT 1
48405: ARRAY
48406: PPUSH
48407: CALL_OW 254
48411: PPUSH
48412: LD_INT 5
48414: PPUSH
48415: CALL_OW 272
48419: PUSH
48420: LD_VAR 0 15
48424: PUSH
48425: LD_INT 1
48427: ARRAY
48428: PPUSH
48429: CALL_OW 251
48433: PPUSH
48434: LD_VAR 0 15
48438: PUSH
48439: LD_INT 1
48441: ARRAY
48442: PPUSH
48443: CALL_OW 254
48447: PPUSH
48448: LD_INT 5
48450: PPUSH
48451: CALL_OW 273
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48460: LD_VAR 0 14
48464: PUSH
48465: LD_INT 1
48467: ARRAY
48468: PPUSH
48469: LD_VAR 0 14
48473: PUSH
48474: LD_INT 2
48476: ARRAY
48477: PPUSH
48478: CALL_OW 488
48482: IFFALSE 48513
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48484: LD_VAR 0 11
48488: PPUSH
48489: LD_VAR 0 14
48493: PUSH
48494: LD_INT 1
48496: ARRAY
48497: PPUSH
48498: LD_VAR 0 14
48502: PUSH
48503: LD_INT 2
48505: ARRAY
48506: PPUSH
48507: CALL_OW 111
// continue ;
48511: GO 48144
// end ; end ; r := GetDir ( tmp ) ;
48513: LD_ADDR_VAR 0 13
48517: PUSH
48518: LD_VAR 0 11
48522: PPUSH
48523: CALL_OW 254
48527: ST_TO_ADDR
// if r = 5 then
48528: LD_VAR 0 13
48532: PUSH
48533: LD_INT 5
48535: EQUAL
48536: IFFALSE 48546
// r := 0 ;
48538: LD_ADDR_VAR 0 13
48542: PUSH
48543: LD_INT 0
48545: ST_TO_ADDR
// for j = r to 5 do
48546: LD_ADDR_VAR 0 8
48550: PUSH
48551: DOUBLE
48552: LD_VAR 0 13
48556: DEC
48557: ST_TO_ADDR
48558: LD_INT 5
48560: PUSH
48561: FOR_TO
48562: IFFALSE 48676
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48564: LD_ADDR_VAR 0 9
48568: PUSH
48569: LD_VAR 0 11
48573: PPUSH
48574: CALL_OW 250
48578: PPUSH
48579: LD_VAR 0 8
48583: PPUSH
48584: LD_INT 2
48586: PPUSH
48587: CALL_OW 272
48591: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48592: LD_ADDR_VAR 0 10
48596: PUSH
48597: LD_VAR 0 11
48601: PPUSH
48602: CALL_OW 251
48606: PPUSH
48607: LD_VAR 0 8
48611: PPUSH
48612: LD_INT 2
48614: PPUSH
48615: CALL_OW 273
48619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48620: LD_VAR 0 9
48624: PPUSH
48625: LD_VAR 0 10
48629: PPUSH
48630: CALL_OW 488
48634: PUSH
48635: LD_VAR 0 9
48639: PPUSH
48640: LD_VAR 0 10
48644: PPUSH
48645: CALL_OW 428
48649: NOT
48650: AND
48651: IFFALSE 48674
// begin ComMoveXY ( tmp , _x , _y ) ;
48653: LD_VAR 0 11
48657: PPUSH
48658: LD_VAR 0 9
48662: PPUSH
48663: LD_VAR 0 10
48667: PPUSH
48668: CALL_OW 111
// break ;
48672: GO 48676
// end ; end ;
48674: GO 48561
48676: POP
48677: POP
// end ;
48678: GO 48144
48680: POP
48681: POP
// end ;
48682: LD_VAR 0 6
48686: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48687: LD_INT 0
48689: PPUSH
48690: PPUSH
48691: PPUSH
48692: PPUSH
48693: PPUSH
48694: PPUSH
48695: PPUSH
48696: PPUSH
48697: PPUSH
48698: PPUSH
// result := false ;
48699: LD_ADDR_VAR 0 6
48703: PUSH
48704: LD_INT 0
48706: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48707: LD_VAR 0 1
48711: NOT
48712: PUSH
48713: LD_VAR 0 1
48717: PPUSH
48718: CALL_OW 266
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: IN
48733: NOT
48734: OR
48735: PUSH
48736: LD_VAR 0 2
48740: NOT
48741: OR
48742: PUSH
48743: LD_VAR 0 5
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: LD_INT 4
48762: PUSH
48763: LD_INT 5
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: IN
48774: NOT
48775: OR
48776: PUSH
48777: LD_VAR 0 3
48781: PPUSH
48782: LD_VAR 0 4
48786: PPUSH
48787: CALL_OW 488
48791: NOT
48792: OR
48793: IFFALSE 48797
// exit ;
48795: GO 49514
// pom := GetBase ( depot ) ;
48797: LD_ADDR_VAR 0 10
48801: PUSH
48802: LD_VAR 0 1
48806: PPUSH
48807: CALL_OW 274
48811: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48812: LD_ADDR_VAR 0 11
48816: PUSH
48817: LD_VAR 0 2
48821: PPUSH
48822: LD_VAR 0 1
48826: PPUSH
48827: CALL_OW 248
48831: PPUSH
48832: CALL_OW 450
48836: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48837: LD_VAR 0 10
48841: PPUSH
48842: LD_INT 1
48844: PPUSH
48845: CALL_OW 275
48849: PUSH
48850: LD_VAR 0 11
48854: PUSH
48855: LD_INT 1
48857: ARRAY
48858: GREATEREQUAL
48859: PUSH
48860: LD_VAR 0 10
48864: PPUSH
48865: LD_INT 2
48867: PPUSH
48868: CALL_OW 275
48872: PUSH
48873: LD_VAR 0 11
48877: PUSH
48878: LD_INT 2
48880: ARRAY
48881: GREATEREQUAL
48882: AND
48883: PUSH
48884: LD_VAR 0 10
48888: PPUSH
48889: LD_INT 3
48891: PPUSH
48892: CALL_OW 275
48896: PUSH
48897: LD_VAR 0 11
48901: PUSH
48902: LD_INT 3
48904: ARRAY
48905: GREATEREQUAL
48906: AND
48907: NOT
48908: IFFALSE 48912
// exit ;
48910: GO 49514
// if GetBType ( depot ) = b_depot then
48912: LD_VAR 0 1
48916: PPUSH
48917: CALL_OW 266
48921: PUSH
48922: LD_INT 0
48924: EQUAL
48925: IFFALSE 48937
// dist := 28 else
48927: LD_ADDR_VAR 0 14
48931: PUSH
48932: LD_INT 28
48934: ST_TO_ADDR
48935: GO 48945
// dist := 36 ;
48937: LD_ADDR_VAR 0 14
48941: PUSH
48942: LD_INT 36
48944: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48945: LD_VAR 0 1
48949: PPUSH
48950: LD_VAR 0 3
48954: PPUSH
48955: LD_VAR 0 4
48959: PPUSH
48960: CALL_OW 297
48964: PUSH
48965: LD_VAR 0 14
48969: GREATER
48970: IFFALSE 48974
// exit ;
48972: GO 49514
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48974: LD_ADDR_VAR 0 12
48978: PUSH
48979: LD_VAR 0 2
48983: PPUSH
48984: LD_VAR 0 3
48988: PPUSH
48989: LD_VAR 0 4
48993: PPUSH
48994: LD_VAR 0 5
48998: PPUSH
48999: LD_VAR 0 1
49003: PPUSH
49004: CALL_OW 248
49008: PPUSH
49009: LD_INT 0
49011: PPUSH
49012: CALL 49519 0 6
49016: ST_TO_ADDR
// if not hexes then
49017: LD_VAR 0 12
49021: NOT
49022: IFFALSE 49026
// exit ;
49024: GO 49514
// hex := GetHexInfo ( x , y ) ;
49026: LD_ADDR_VAR 0 15
49030: PUSH
49031: LD_VAR 0 3
49035: PPUSH
49036: LD_VAR 0 4
49040: PPUSH
49041: CALL_OW 546
49045: ST_TO_ADDR
// if hex [ 1 ] then
49046: LD_VAR 0 15
49050: PUSH
49051: LD_INT 1
49053: ARRAY
49054: IFFALSE 49058
// exit ;
49056: GO 49514
// height := hex [ 2 ] ;
49058: LD_ADDR_VAR 0 13
49062: PUSH
49063: LD_VAR 0 15
49067: PUSH
49068: LD_INT 2
49070: ARRAY
49071: ST_TO_ADDR
// for i = 1 to hexes do
49072: LD_ADDR_VAR 0 7
49076: PUSH
49077: DOUBLE
49078: LD_INT 1
49080: DEC
49081: ST_TO_ADDR
49082: LD_VAR 0 12
49086: PUSH
49087: FOR_TO
49088: IFFALSE 49418
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49090: LD_VAR 0 12
49094: PUSH
49095: LD_VAR 0 7
49099: ARRAY
49100: PUSH
49101: LD_INT 1
49103: ARRAY
49104: PPUSH
49105: LD_VAR 0 12
49109: PUSH
49110: LD_VAR 0 7
49114: ARRAY
49115: PUSH
49116: LD_INT 2
49118: ARRAY
49119: PPUSH
49120: CALL_OW 488
49124: NOT
49125: PUSH
49126: LD_VAR 0 12
49130: PUSH
49131: LD_VAR 0 7
49135: ARRAY
49136: PUSH
49137: LD_INT 1
49139: ARRAY
49140: PPUSH
49141: LD_VAR 0 12
49145: PUSH
49146: LD_VAR 0 7
49150: ARRAY
49151: PUSH
49152: LD_INT 2
49154: ARRAY
49155: PPUSH
49156: CALL_OW 428
49160: PUSH
49161: LD_INT 0
49163: GREATER
49164: OR
49165: PUSH
49166: LD_VAR 0 12
49170: PUSH
49171: LD_VAR 0 7
49175: ARRAY
49176: PUSH
49177: LD_INT 1
49179: ARRAY
49180: PPUSH
49181: LD_VAR 0 12
49185: PUSH
49186: LD_VAR 0 7
49190: ARRAY
49191: PUSH
49192: LD_INT 2
49194: ARRAY
49195: PPUSH
49196: CALL_OW 351
49200: OR
49201: IFFALSE 49207
// exit ;
49203: POP
49204: POP
49205: GO 49514
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49207: LD_ADDR_VAR 0 8
49211: PUSH
49212: LD_VAR 0 12
49216: PUSH
49217: LD_VAR 0 7
49221: ARRAY
49222: PUSH
49223: LD_INT 1
49225: ARRAY
49226: PPUSH
49227: LD_VAR 0 12
49231: PUSH
49232: LD_VAR 0 7
49236: ARRAY
49237: PUSH
49238: LD_INT 2
49240: ARRAY
49241: PPUSH
49242: CALL_OW 546
49246: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49247: LD_VAR 0 8
49251: PUSH
49252: LD_INT 1
49254: ARRAY
49255: PUSH
49256: LD_VAR 0 8
49260: PUSH
49261: LD_INT 2
49263: ARRAY
49264: PUSH
49265: LD_VAR 0 13
49269: PUSH
49270: LD_INT 2
49272: PLUS
49273: GREATER
49274: OR
49275: PUSH
49276: LD_VAR 0 8
49280: PUSH
49281: LD_INT 2
49283: ARRAY
49284: PUSH
49285: LD_VAR 0 13
49289: PUSH
49290: LD_INT 2
49292: MINUS
49293: LESS
49294: OR
49295: PUSH
49296: LD_VAR 0 8
49300: PUSH
49301: LD_INT 3
49303: ARRAY
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 8
49310: PUSH
49311: LD_INT 9
49313: PUSH
49314: LD_INT 10
49316: PUSH
49317: LD_INT 11
49319: PUSH
49320: LD_INT 12
49322: PUSH
49323: LD_INT 13
49325: PUSH
49326: LD_INT 16
49328: PUSH
49329: LD_INT 17
49331: PUSH
49332: LD_INT 18
49334: PUSH
49335: LD_INT 19
49337: PUSH
49338: LD_INT 20
49340: PUSH
49341: LD_INT 21
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: IN
49359: NOT
49360: OR
49361: PUSH
49362: LD_VAR 0 8
49366: PUSH
49367: LD_INT 5
49369: ARRAY
49370: NOT
49371: OR
49372: PUSH
49373: LD_VAR 0 8
49377: PUSH
49378: LD_INT 6
49380: ARRAY
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: LD_INT 7
49390: PUSH
49391: LD_INT 9
49393: PUSH
49394: LD_INT 10
49396: PUSH
49397: LD_INT 11
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: IN
49408: NOT
49409: OR
49410: IFFALSE 49416
// exit ;
49412: POP
49413: POP
49414: GO 49514
// end ;
49416: GO 49087
49418: POP
49419: POP
// side := GetSide ( depot ) ;
49420: LD_ADDR_VAR 0 9
49424: PUSH
49425: LD_VAR 0 1
49429: PPUSH
49430: CALL_OW 255
49434: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49435: LD_VAR 0 9
49439: PPUSH
49440: LD_VAR 0 3
49444: PPUSH
49445: LD_VAR 0 4
49449: PPUSH
49450: LD_INT 20
49452: PPUSH
49453: CALL 42168 0 4
49457: PUSH
49458: LD_INT 4
49460: ARRAY
49461: IFFALSE 49465
// exit ;
49463: GO 49514
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49465: LD_VAR 0 2
49469: PUSH
49470: LD_INT 29
49472: PUSH
49473: LD_INT 30
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: IN
49480: PUSH
49481: LD_VAR 0 3
49485: PPUSH
49486: LD_VAR 0 4
49490: PPUSH
49491: LD_VAR 0 9
49495: PPUSH
49496: CALL_OW 440
49500: NOT
49501: AND
49502: IFFALSE 49506
// exit ;
49504: GO 49514
// result := true ;
49506: LD_ADDR_VAR 0 6
49510: PUSH
49511: LD_INT 1
49513: ST_TO_ADDR
// end ;
49514: LD_VAR 0 6
49518: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49519: LD_INT 0
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
49539: PPUSH
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
49544: PPUSH
49545: PPUSH
49546: PPUSH
49547: PPUSH
49548: PPUSH
49549: PPUSH
49550: PPUSH
49551: PPUSH
49552: PPUSH
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
49558: PPUSH
49559: PPUSH
49560: PPUSH
49561: PPUSH
49562: PPUSH
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
// result = [ ] ;
49579: LD_ADDR_VAR 0 7
49583: PUSH
49584: EMPTY
49585: ST_TO_ADDR
// temp_list = [ ] ;
49586: LD_ADDR_VAR 0 9
49590: PUSH
49591: EMPTY
49592: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49593: LD_VAR 0 4
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: LD_INT 4
49612: PUSH
49613: LD_INT 5
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: IN
49624: NOT
49625: PUSH
49626: LD_VAR 0 1
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: IN
49641: PUSH
49642: LD_VAR 0 5
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: IN
49661: NOT
49662: AND
49663: OR
49664: IFFALSE 49668
// exit ;
49666: GO 68059
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49668: LD_VAR 0 1
49672: PUSH
49673: LD_INT 6
49675: PUSH
49676: LD_INT 7
49678: PUSH
49679: LD_INT 8
49681: PUSH
49682: LD_INT 13
49684: PUSH
49685: LD_INT 12
49687: PUSH
49688: LD_INT 15
49690: PUSH
49691: LD_INT 11
49693: PUSH
49694: LD_INT 14
49696: PUSH
49697: LD_INT 10
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: IN
49711: IFFALSE 49721
// btype = b_lab ;
49713: LD_ADDR_VAR 0 1
49717: PUSH
49718: LD_INT 6
49720: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49721: LD_VAR 0 6
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: LIST
49739: IN
49740: NOT
49741: PUSH
49742: LD_VAR 0 1
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: LD_INT 6
49761: PUSH
49762: LD_INT 36
49764: PUSH
49765: LD_INT 4
49767: PUSH
49768: LD_INT 5
49770: PUSH
49771: LD_INT 31
49773: PUSH
49774: LD_INT 32
49776: PUSH
49777: LD_INT 33
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: IN
49793: NOT
49794: PUSH
49795: LD_VAR 0 6
49799: PUSH
49800: LD_INT 1
49802: EQUAL
49803: AND
49804: OR
49805: PUSH
49806: LD_VAR 0 1
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: LD_INT 3
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: IN
49821: NOT
49822: PUSH
49823: LD_VAR 0 6
49827: PUSH
49828: LD_INT 2
49830: EQUAL
49831: AND
49832: OR
49833: IFFALSE 49843
// mode = 0 ;
49835: LD_ADDR_VAR 0 6
49839: PUSH
49840: LD_INT 0
49842: ST_TO_ADDR
// case mode of 0 :
49843: LD_VAR 0 6
49847: PUSH
49848: LD_INT 0
49850: DOUBLE
49851: EQUAL
49852: IFTRUE 49856
49854: GO 61309
49856: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49857: LD_ADDR_VAR 0 11
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 3
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50050: LD_ADDR_VAR 0 12
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 3
50218: NEG
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50246: LD_ADDR_VAR 0 13
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 3
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 3
50417: NEG
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50445: LD_ADDR_VAR 0 14
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 3
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 3
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50641: LD_ADDR_VAR 0 15
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50834: LD_ADDR_VAR 0 16
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 3
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51027: LD_ADDR_VAR 0 17
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51257: LD_ADDR_VAR 0 18
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51487: LD_ADDR_VAR 0 19
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51717: LD_ADDR_VAR 0 20
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51947: LD_ADDR_VAR 0 21
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52177: LD_ADDR_VAR 0 22
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52407: LD_ADDR_VAR 0 23
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 3
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52687: LD_ADDR_VAR 0 24
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52963: LD_ADDR_VAR 0 25
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 2
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: LD_INT 3
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 3
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53237: LD_ADDR_VAR 0 26
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53513: LD_ADDR_VAR 0 27
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53793: LD_ADDR_VAR 0 28
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 3
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: NEG
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54075: LD_ADDR_VAR 0 29
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: LD_INT 3
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54354: LD_ADDR_VAR 0 30
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 3
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54632: LD_ADDR_VAR 0 31
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: NEG
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 3
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 3
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54910: LD_ADDR_VAR 0 32
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55188: LD_ADDR_VAR 0 33
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: NEG
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55467: LD_ADDR_VAR 0 34
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55747: LD_ADDR_VAR 0 35
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55859: LD_ADDR_VAR 0 36
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55971: LD_ADDR_VAR 0 37
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56083: LD_ADDR_VAR 0 38
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56195: LD_ADDR_VAR 0 39
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56307: LD_ADDR_VAR 0 40
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56419: LD_ADDR_VAR 0 41
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 3
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 3
56728: NEG
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56769: LD_ADDR_VAR 0 42
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 3
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 3
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57119: LD_ADDR_VAR 0 43
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 3
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 3
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57467: LD_ADDR_VAR 0 44
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: LD_INT 2
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: LD_INT 3
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 3
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 3
57776: NEG
57777: PUSH
57778: LD_INT 3
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57817: LD_ADDR_VAR 0 45
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: LD_INT 2
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: LD_INT 3
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: LD_INT 3
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58167: LD_ADDR_VAR 0 46
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 3
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 3
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 3
58463: NEG
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58515: LD_ADDR_VAR 0 47
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58666: LD_ADDR_VAR 0 48
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58813: LD_ADDR_VAR 0 49
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58957: LD_ADDR_VAR 0 50
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59101: LD_ADDR_VAR 0 51
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59248: LD_ADDR_VAR 0 52
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59399: LD_ADDR_VAR 0 53
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59629: LD_ADDR_VAR 0 54
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59859: LD_ADDR_VAR 0 55
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 2
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60089: LD_ADDR_VAR 0 56
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 2
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60319: LD_ADDR_VAR 0 57
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: NEG
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60549: LD_ADDR_VAR 0 58
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: NEG
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60779: LD_ADDR_VAR 0 59
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60867: LD_ADDR_VAR 0 60
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60955: LD_ADDR_VAR 0 61
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61043: LD_ADDR_VAR 0 62
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61131: LD_ADDR_VAR 0 63
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61219: LD_ADDR_VAR 0 64
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: ST_TO_ADDR
// end ; 1 :
61307: GO 67204
61309: LD_INT 1
61311: DOUBLE
61312: EQUAL
61313: IFTRUE 61317
61315: GO 63940
61317: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61318: LD_ADDR_VAR 0 11
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 3
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61362: LD_ADDR_VAR 0 12
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: LIST
61402: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61403: LD_ADDR_VAR 0 13
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: LD_INT 3
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: LD_INT 3
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61443: LD_ADDR_VAR 0 14
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: LIST
61483: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61484: LD_ADDR_VAR 0 15
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 3
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61528: LD_ADDR_VAR 0 16
61532: PUSH
61533: LD_INT 2
61535: NEG
61536: PUSH
61537: LD_INT 3
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 3
61547: NEG
61548: PUSH
61549: LD_INT 2
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 3
61559: NEG
61560: PUSH
61561: LD_INT 3
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: LIST
61573: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61574: LD_ADDR_VAR 0 17
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: LIST
61617: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61618: LD_ADDR_VAR 0 18
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61659: LD_ADDR_VAR 0 19
61663: PUSH
61664: LD_INT 3
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: LD_INT 3
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61699: LD_ADDR_VAR 0 20
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61740: LD_ADDR_VAR 0 21
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 3
61758: NEG
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: NEG
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: LIST
61783: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61784: LD_ADDR_VAR 0 22
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: LD_INT 3
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: LIST
61829: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61830: LD_ADDR_VAR 0 23
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 4
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 3
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: LIST
61873: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61874: LD_ADDR_VAR 0 24
61878: PUSH
61879: LD_INT 3
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61915: LD_ADDR_VAR 0 25
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: LD_INT 4
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61955: LD_ADDR_VAR 0 26
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 4
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 3
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: LIST
61995: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61996: LD_ADDR_VAR 0 27
62000: PUSH
62001: LD_INT 3
62003: NEG
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 4
62025: NEG
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: LIST
62039: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62040: LD_ADDR_VAR 0 28
62044: PUSH
62045: LD_INT 3
62047: NEG
62048: PUSH
62049: LD_INT 3
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: NEG
62060: PUSH
62061: LD_INT 4
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 4
62071: NEG
62072: PUSH
62073: LD_INT 3
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62086: LD_ADDR_VAR 0 29
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 3
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 2
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 4
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 4
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: LD_INT 5
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 5
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: LD_INT 4
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 6
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 6
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 5
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62241: LD_ADDR_VAR 0 30
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 3
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 4
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 4
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 5
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 5
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 5
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 6
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 6
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62384: LD_ADDR_VAR 0 31
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 4
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 4
62431: PUSH
62432: LD_INT 4
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: LD_INT 4
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 5
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 5
62461: PUSH
62462: LD_INT 5
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 4
62471: PUSH
62472: LD_INT 5
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 6
62481: PUSH
62482: LD_INT 5
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 6
62491: PUSH
62492: LD_INT 6
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 5
62501: PUSH
62502: LD_INT 6
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62523: LD_ADDR_VAR 0 32
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: LD_INT 3
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 4
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 4
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 5
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 5
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: LD_INT 6
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 6
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 5
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62666: LD_ADDR_VAR 0 33
62670: PUSH
62671: LD_INT 2
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 3
62684: NEG
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 3
62695: NEG
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 3
62707: NEG
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 4
62718: NEG
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 4
62729: NEG
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 4
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 5
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 5
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 5
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 6
62786: NEG
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 6
62797: NEG
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62821: LD_ADDR_VAR 0 34
62825: PUSH
62826: LD_INT 2
62828: NEG
62829: PUSH
62830: LD_INT 3
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 3
62840: NEG
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: LD_INT 3
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 3
62864: NEG
62865: PUSH
62866: LD_INT 4
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 4
62876: NEG
62877: PUSH
62878: LD_INT 3
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 4
62888: NEG
62889: PUSH
62890: LD_INT 4
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 4
62900: NEG
62901: PUSH
62902: LD_INT 5
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 5
62912: NEG
62913: PUSH
62914: LD_INT 4
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 5
62924: NEG
62925: PUSH
62926: LD_INT 5
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 5
62936: NEG
62937: PUSH
62938: LD_INT 6
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 6
62948: NEG
62949: PUSH
62950: LD_INT 5
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 6
62960: NEG
62961: PUSH
62962: LD_INT 6
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62984: LD_ADDR_VAR 0 41
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 3
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: LIST
63027: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63028: LD_ADDR_VAR 0 42
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63069: LD_ADDR_VAR 0 43
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 3
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: LIST
63108: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63109: LD_ADDR_VAR 0 44
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 3
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63150: LD_ADDR_VAR 0 45
63154: PUSH
63155: LD_INT 2
63157: NEG
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 3
63179: NEG
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: LIST
63193: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63194: LD_ADDR_VAR 0 46
63198: PUSH
63199: LD_INT 2
63201: NEG
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 2
63213: NEG
63214: PUSH
63215: LD_INT 3
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 3
63225: NEG
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: LIST
63239: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63240: LD_ADDR_VAR 0 47
63244: PUSH
63245: LD_INT 2
63247: NEG
63248: PUSH
63249: LD_INT 3
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 3
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63273: LD_ADDR_VAR 0 48
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63304: LD_ADDR_VAR 0 49
63308: PUSH
63309: LD_INT 3
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 3
63321: PUSH
63322: LD_INT 2
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63333: LD_ADDR_VAR 0 50
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: LD_INT 3
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 3
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63362: LD_ADDR_VAR 0 51
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63393: LD_ADDR_VAR 0 52
63397: PUSH
63398: LD_INT 3
63400: NEG
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: NEG
63413: PUSH
63414: LD_INT 2
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63426: LD_ADDR_VAR 0 53
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: LD_INT 3
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: LD_INT 3
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63470: LD_ADDR_VAR 0 54
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: LIST
63510: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63511: LD_ADDR_VAR 0 55
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 3
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: LIST
63550: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63551: LD_ADDR_VAR 0 56
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 3
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63592: LD_ADDR_VAR 0 57
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 3
63610: NEG
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63636: LD_ADDR_VAR 0 58
63640: PUSH
63641: LD_INT 2
63643: NEG
63644: PUSH
63645: LD_INT 3
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: NEG
63656: PUSH
63657: LD_INT 2
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 3
63667: NEG
63668: PUSH
63669: LD_INT 3
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: LIST
63681: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63682: LD_ADDR_VAR 0 59
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63726: LD_ADDR_VAR 0 60
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: LD_INT 0
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: LIST
63766: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63767: LD_ADDR_VAR 0 61
63771: PUSH
63772: LD_INT 2
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 2
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: LIST
63806: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63807: LD_ADDR_VAR 0 62
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: LIST
63847: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63848: LD_ADDR_VAR 0 63
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 2
63877: NEG
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63892: LD_ADDR_VAR 0 64
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: LD_INT 2
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: ST_TO_ADDR
// end ; 2 :
63938: GO 67204
63940: LD_INT 2
63942: DOUBLE
63943: EQUAL
63944: IFTRUE 63948
63946: GO 67203
63948: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63949: LD_ADDR_VAR 0 29
63953: PUSH
63954: LD_INT 4
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 4
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 5
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 5
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 4
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 3
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 3
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 5
64039: PUSH
64040: LD_INT 2
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 3
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 3
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 4
64069: PUSH
64070: LD_INT 3
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 4
64079: PUSH
64080: LD_INT 4
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 3
64089: PUSH
64090: LD_INT 4
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 2
64099: PUSH
64100: LD_INT 3
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 2
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 4
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 4
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: LD_INT 4
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 1
64169: PUSH
64170: LD_INT 5
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 5
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: LD_INT 4
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: NEG
64201: PUSH
64202: LD_INT 3
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: LD_INT 5
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: LD_INT 3
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 3
64232: NEG
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: NEG
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 2
64266: NEG
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 3
64277: NEG
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 4
64288: NEG
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 4
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 4
64311: NEG
64312: PUSH
64313: LD_INT 2
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 2
64323: NEG
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 4
64334: NEG
64335: PUSH
64336: LD_INT 4
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 4
64346: NEG
64347: PUSH
64348: LD_INT 5
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 3
64358: NEG
64359: PUSH
64360: LD_INT 4
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 3
64370: NEG
64371: PUSH
64372: LD_INT 3
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 4
64382: NEG
64383: PUSH
64384: LD_INT 3
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 5
64394: NEG
64395: PUSH
64396: LD_INT 4
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 5
64406: NEG
64407: PUSH
64408: LD_INT 5
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 3
64418: NEG
64419: PUSH
64420: LD_INT 5
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 5
64430: NEG
64431: PUSH
64432: LD_INT 3
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64487: LD_ADDR_VAR 0 30
64491: PUSH
64492: LD_INT 4
64494: PUSH
64495: LD_INT 4
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 4
64504: PUSH
64505: LD_INT 3
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 5
64514: PUSH
64515: LD_INT 4
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 5
64524: PUSH
64525: LD_INT 5
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 4
64534: PUSH
64535: LD_INT 5
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: PUSH
64545: LD_INT 4
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 5
64564: PUSH
64565: LD_INT 3
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 3
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: LD_INT 4
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: LD_INT 4
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: LD_INT 3
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: LD_INT 4
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 4
64677: NEG
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 4
64688: NEG
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 3
64700: NEG
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 4
64722: NEG
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 5
64733: NEG
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 5
64744: NEG
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 5
64756: NEG
64757: PUSH
64758: LD_INT 2
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 3
64791: NEG
64792: PUSH
64793: LD_INT 4
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: LD_INT 3
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 3
64827: NEG
64828: PUSH
64829: LD_INT 2
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 4
64839: NEG
64840: PUSH
64841: LD_INT 3
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 4
64851: NEG
64852: PUSH
64853: LD_INT 4
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: LD_INT 4
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 4
64875: NEG
64876: PUSH
64877: LD_INT 2
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 4
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 5
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 4
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: LD_INT 4
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: LD_INT 5
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 2
64966: PUSH
64967: LD_INT 3
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: LD_INT 5
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65034: LD_ADDR_VAR 0 31
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 4
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: PUSH
65072: LD_INT 5
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 5
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: LD_INT 4
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: PUSH
65114: LD_INT 5
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 2
65123: NEG
65124: PUSH
65125: LD_INT 3
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 3
65134: NEG
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: LD_INT 1
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 2
65157: NEG
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 2
65168: NEG
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 4
65190: NEG
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 4
65201: NEG
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 4
65213: NEG
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: NEG
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 4
65236: NEG
65237: PUSH
65238: LD_INT 4
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 4
65248: NEG
65249: PUSH
65250: LD_INT 5
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: LD_INT 4
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: LD_INT 3
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 4
65284: NEG
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 5
65296: NEG
65297: PUSH
65298: LD_INT 4
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 5
65308: NEG
65309: PUSH
65310: LD_INT 5
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 3
65320: NEG
65321: PUSH
65322: LD_INT 5
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 5
65332: NEG
65333: PUSH
65334: LD_INT 3
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: LD_INT 3
65347: NEG
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: LD_INT 4
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: LD_INT 3
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: LD_INT 4
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 4
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 4
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 4
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 5
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 5
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 4
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 3
65507: PUSH
65508: LD_INT 1
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 3
65518: PUSH
65519: LD_INT 2
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 5
65529: PUSH
65530: LD_INT 2
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65584: LD_ADDR_VAR 0 32
65588: PUSH
65589: LD_INT 4
65591: NEG
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 4
65602: NEG
65603: PUSH
65604: LD_INT 1
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 3
65614: NEG
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 3
65625: NEG
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 4
65636: NEG
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 5
65647: NEG
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 5
65658: NEG
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 5
65670: NEG
65671: PUSH
65672: LD_INT 2
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 3
65682: NEG
65683: PUSH
65684: LD_INT 2
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: NEG
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: LD_INT 4
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 2
65717: NEG
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: LD_INT 2
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 3
65741: NEG
65742: PUSH
65743: LD_INT 2
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 4
65753: NEG
65754: PUSH
65755: LD_INT 3
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 4
65765: NEG
65766: PUSH
65767: LD_INT 4
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: LD_INT 4
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 4
65789: NEG
65790: PUSH
65791: LD_INT 2
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: LD_INT 4
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 5
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 4
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 1
65834: PUSH
65835: LD_INT 3
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 1
65856: NEG
65857: PUSH
65858: LD_INT 4
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 5
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 2
65880: PUSH
65881: LD_INT 3
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 2
65891: NEG
65892: PUSH
65893: LD_INT 5
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 3
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: LD_INT 1
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 4
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 4
65934: PUSH
65935: LD_INT 1
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 2
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 4
65986: PUSH
65987: LD_INT 2
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 4
65996: PUSH
65997: LD_INT 4
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 4
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 5
66016: PUSH
66017: LD_INT 4
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 5
66026: PUSH
66027: LD_INT 5
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 4
66036: PUSH
66037: LD_INT 5
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: PUSH
66047: LD_INT 4
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 3
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 5
66066: PUSH
66067: LD_INT 3
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 3
66076: PUSH
66077: LD_INT 5
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66131: LD_ADDR_VAR 0 33
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: LD_INT 4
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 4
66150: NEG
66151: PUSH
66152: LD_INT 5
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 3
66162: NEG
66163: PUSH
66164: LD_INT 4
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 3
66174: NEG
66175: PUSH
66176: LD_INT 3
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 4
66186: NEG
66187: PUSH
66188: LD_INT 3
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 5
66198: NEG
66199: PUSH
66200: LD_INT 4
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 5
66210: NEG
66211: PUSH
66212: LD_INT 5
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 3
66222: NEG
66223: PUSH
66224: LD_INT 5
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 5
66234: NEG
66235: PUSH
66236: LD_INT 3
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: LD_INT 3
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 4
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: LD_INT 2
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: LD_INT 2
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: LD_INT 3
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: LD_INT 4
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 2
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: LD_INT 4
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 4
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 4
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 5
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 5
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 4
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 3
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 3
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 3
66420: PUSH
66421: LD_INT 2
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 5
66431: PUSH
66432: LD_INT 2
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 3
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 3
66451: PUSH
66452: LD_INT 2
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 4
66461: PUSH
66462: LD_INT 3
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 4
66471: PUSH
66472: LD_INT 4
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 3
66481: PUSH
66482: LD_INT 4
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 2
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 4
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 2
66521: PUSH
66522: LD_INT 4
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: LD_INT 4
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 0
66541: PUSH
66542: LD_INT 3
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: LD_INT 4
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 1
66561: PUSH
66562: LD_INT 5
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: LD_INT 5
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: LD_INT 4
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: LD_INT 3
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 2
66603: PUSH
66604: LD_INT 5
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66669: LD_ADDR_VAR 0 34
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: LD_INT 4
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: LD_INT 5
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 1
66698: PUSH
66699: LD_INT 4
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 3
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 3
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: PUSH
66733: LD_INT 4
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 5
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 2
66766: NEG
66767: PUSH
66768: LD_INT 5
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 4
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: LD_INT 1
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 4
66871: PUSH
66872: LD_INT 4
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 4
66881: PUSH
66882: LD_INT 3
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 5
66891: PUSH
66892: LD_INT 4
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 5
66901: PUSH
66902: LD_INT 5
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 4
66911: PUSH
66912: LD_INT 5
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 5
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: LD_INT 5
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: LD_INT 4
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: LD_INT 3
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: LD_INT 2
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: LD_INT 4
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 2
67043: NEG
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 4
67054: NEG
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 4
67065: NEG
67066: PUSH
67067: LD_INT 1
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 3
67077: NEG
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 3
67088: NEG
67089: PUSH
67090: LD_INT 1
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 4
67099: NEG
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 5
67110: NEG
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 5
67121: NEG
67122: PUSH
67123: LD_INT 1
67125: NEG
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 5
67133: NEG
67134: PUSH
67135: LD_INT 2
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 3
67145: NEG
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: ST_TO_ADDR
// end ; end ;
67201: GO 67204
67203: POP
// case btype of b_depot , b_warehouse :
67204: LD_VAR 0 1
67208: PUSH
67209: LD_INT 0
67211: DOUBLE
67212: EQUAL
67213: IFTRUE 67223
67215: LD_INT 1
67217: DOUBLE
67218: EQUAL
67219: IFTRUE 67223
67221: GO 67424
67223: POP
// case nation of nation_american :
67224: LD_VAR 0 5
67228: PUSH
67229: LD_INT 1
67231: DOUBLE
67232: EQUAL
67233: IFTRUE 67237
67235: GO 67293
67237: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67238: LD_ADDR_VAR 0 9
67242: PUSH
67243: LD_VAR 0 11
67247: PUSH
67248: LD_VAR 0 12
67252: PUSH
67253: LD_VAR 0 13
67257: PUSH
67258: LD_VAR 0 14
67262: PUSH
67263: LD_VAR 0 15
67267: PUSH
67268: LD_VAR 0 16
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: PUSH
67281: LD_VAR 0 4
67285: PUSH
67286: LD_INT 1
67288: PLUS
67289: ARRAY
67290: ST_TO_ADDR
67291: GO 67422
67293: LD_INT 2
67295: DOUBLE
67296: EQUAL
67297: IFTRUE 67301
67299: GO 67357
67301: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67302: LD_ADDR_VAR 0 9
67306: PUSH
67307: LD_VAR 0 17
67311: PUSH
67312: LD_VAR 0 18
67316: PUSH
67317: LD_VAR 0 19
67321: PUSH
67322: LD_VAR 0 20
67326: PUSH
67327: LD_VAR 0 21
67331: PUSH
67332: LD_VAR 0 22
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: PUSH
67345: LD_VAR 0 4
67349: PUSH
67350: LD_INT 1
67352: PLUS
67353: ARRAY
67354: ST_TO_ADDR
67355: GO 67422
67357: LD_INT 3
67359: DOUBLE
67360: EQUAL
67361: IFTRUE 67365
67363: GO 67421
67365: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67366: LD_ADDR_VAR 0 9
67370: PUSH
67371: LD_VAR 0 23
67375: PUSH
67376: LD_VAR 0 24
67380: PUSH
67381: LD_VAR 0 25
67385: PUSH
67386: LD_VAR 0 26
67390: PUSH
67391: LD_VAR 0 27
67395: PUSH
67396: LD_VAR 0 28
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: PUSH
67409: LD_VAR 0 4
67413: PUSH
67414: LD_INT 1
67416: PLUS
67417: ARRAY
67418: ST_TO_ADDR
67419: GO 67422
67421: POP
67422: GO 67977
67424: LD_INT 2
67426: DOUBLE
67427: EQUAL
67428: IFTRUE 67438
67430: LD_INT 3
67432: DOUBLE
67433: EQUAL
67434: IFTRUE 67438
67436: GO 67494
67438: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67439: LD_ADDR_VAR 0 9
67443: PUSH
67444: LD_VAR 0 29
67448: PUSH
67449: LD_VAR 0 30
67453: PUSH
67454: LD_VAR 0 31
67458: PUSH
67459: LD_VAR 0 32
67463: PUSH
67464: LD_VAR 0 33
67468: PUSH
67469: LD_VAR 0 34
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: PUSH
67482: LD_VAR 0 4
67486: PUSH
67487: LD_INT 1
67489: PLUS
67490: ARRAY
67491: ST_TO_ADDR
67492: GO 67977
67494: LD_INT 16
67496: DOUBLE
67497: EQUAL
67498: IFTRUE 67556
67500: LD_INT 17
67502: DOUBLE
67503: EQUAL
67504: IFTRUE 67556
67506: LD_INT 18
67508: DOUBLE
67509: EQUAL
67510: IFTRUE 67556
67512: LD_INT 19
67514: DOUBLE
67515: EQUAL
67516: IFTRUE 67556
67518: LD_INT 22
67520: DOUBLE
67521: EQUAL
67522: IFTRUE 67556
67524: LD_INT 20
67526: DOUBLE
67527: EQUAL
67528: IFTRUE 67556
67530: LD_INT 21
67532: DOUBLE
67533: EQUAL
67534: IFTRUE 67556
67536: LD_INT 23
67538: DOUBLE
67539: EQUAL
67540: IFTRUE 67556
67542: LD_INT 24
67544: DOUBLE
67545: EQUAL
67546: IFTRUE 67556
67548: LD_INT 25
67550: DOUBLE
67551: EQUAL
67552: IFTRUE 67556
67554: GO 67612
67556: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67557: LD_ADDR_VAR 0 9
67561: PUSH
67562: LD_VAR 0 35
67566: PUSH
67567: LD_VAR 0 36
67571: PUSH
67572: LD_VAR 0 37
67576: PUSH
67577: LD_VAR 0 38
67581: PUSH
67582: LD_VAR 0 39
67586: PUSH
67587: LD_VAR 0 40
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: PUSH
67600: LD_VAR 0 4
67604: PUSH
67605: LD_INT 1
67607: PLUS
67608: ARRAY
67609: ST_TO_ADDR
67610: GO 67977
67612: LD_INT 6
67614: DOUBLE
67615: EQUAL
67616: IFTRUE 67668
67618: LD_INT 7
67620: DOUBLE
67621: EQUAL
67622: IFTRUE 67668
67624: LD_INT 8
67626: DOUBLE
67627: EQUAL
67628: IFTRUE 67668
67630: LD_INT 13
67632: DOUBLE
67633: EQUAL
67634: IFTRUE 67668
67636: LD_INT 12
67638: DOUBLE
67639: EQUAL
67640: IFTRUE 67668
67642: LD_INT 15
67644: DOUBLE
67645: EQUAL
67646: IFTRUE 67668
67648: LD_INT 11
67650: DOUBLE
67651: EQUAL
67652: IFTRUE 67668
67654: LD_INT 14
67656: DOUBLE
67657: EQUAL
67658: IFTRUE 67668
67660: LD_INT 10
67662: DOUBLE
67663: EQUAL
67664: IFTRUE 67668
67666: GO 67724
67668: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67669: LD_ADDR_VAR 0 9
67673: PUSH
67674: LD_VAR 0 41
67678: PUSH
67679: LD_VAR 0 42
67683: PUSH
67684: LD_VAR 0 43
67688: PUSH
67689: LD_VAR 0 44
67693: PUSH
67694: LD_VAR 0 45
67698: PUSH
67699: LD_VAR 0 46
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: PUSH
67712: LD_VAR 0 4
67716: PUSH
67717: LD_INT 1
67719: PLUS
67720: ARRAY
67721: ST_TO_ADDR
67722: GO 67977
67724: LD_INT 36
67726: DOUBLE
67727: EQUAL
67728: IFTRUE 67732
67730: GO 67788
67732: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67733: LD_ADDR_VAR 0 9
67737: PUSH
67738: LD_VAR 0 47
67742: PUSH
67743: LD_VAR 0 48
67747: PUSH
67748: LD_VAR 0 49
67752: PUSH
67753: LD_VAR 0 50
67757: PUSH
67758: LD_VAR 0 51
67762: PUSH
67763: LD_VAR 0 52
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: PUSH
67776: LD_VAR 0 4
67780: PUSH
67781: LD_INT 1
67783: PLUS
67784: ARRAY
67785: ST_TO_ADDR
67786: GO 67977
67788: LD_INT 4
67790: DOUBLE
67791: EQUAL
67792: IFTRUE 67814
67794: LD_INT 5
67796: DOUBLE
67797: EQUAL
67798: IFTRUE 67814
67800: LD_INT 34
67802: DOUBLE
67803: EQUAL
67804: IFTRUE 67814
67806: LD_INT 37
67808: DOUBLE
67809: EQUAL
67810: IFTRUE 67814
67812: GO 67870
67814: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67815: LD_ADDR_VAR 0 9
67819: PUSH
67820: LD_VAR 0 53
67824: PUSH
67825: LD_VAR 0 54
67829: PUSH
67830: LD_VAR 0 55
67834: PUSH
67835: LD_VAR 0 56
67839: PUSH
67840: LD_VAR 0 57
67844: PUSH
67845: LD_VAR 0 58
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: PUSH
67858: LD_VAR 0 4
67862: PUSH
67863: LD_INT 1
67865: PLUS
67866: ARRAY
67867: ST_TO_ADDR
67868: GO 67977
67870: LD_INT 31
67872: DOUBLE
67873: EQUAL
67874: IFTRUE 67920
67876: LD_INT 32
67878: DOUBLE
67879: EQUAL
67880: IFTRUE 67920
67882: LD_INT 33
67884: DOUBLE
67885: EQUAL
67886: IFTRUE 67920
67888: LD_INT 27
67890: DOUBLE
67891: EQUAL
67892: IFTRUE 67920
67894: LD_INT 26
67896: DOUBLE
67897: EQUAL
67898: IFTRUE 67920
67900: LD_INT 28
67902: DOUBLE
67903: EQUAL
67904: IFTRUE 67920
67906: LD_INT 29
67908: DOUBLE
67909: EQUAL
67910: IFTRUE 67920
67912: LD_INT 30
67914: DOUBLE
67915: EQUAL
67916: IFTRUE 67920
67918: GO 67976
67920: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67921: LD_ADDR_VAR 0 9
67925: PUSH
67926: LD_VAR 0 59
67930: PUSH
67931: LD_VAR 0 60
67935: PUSH
67936: LD_VAR 0 61
67940: PUSH
67941: LD_VAR 0 62
67945: PUSH
67946: LD_VAR 0 63
67950: PUSH
67951: LD_VAR 0 64
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: PUSH
67964: LD_VAR 0 4
67968: PUSH
67969: LD_INT 1
67971: PLUS
67972: ARRAY
67973: ST_TO_ADDR
67974: GO 67977
67976: POP
// temp_list2 = [ ] ;
67977: LD_ADDR_VAR 0 10
67981: PUSH
67982: EMPTY
67983: ST_TO_ADDR
// for i in temp_list do
67984: LD_ADDR_VAR 0 8
67988: PUSH
67989: LD_VAR 0 9
67993: PUSH
67994: FOR_IN
67995: IFFALSE 68047
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67997: LD_ADDR_VAR 0 10
68001: PUSH
68002: LD_VAR 0 10
68006: PUSH
68007: LD_VAR 0 8
68011: PUSH
68012: LD_INT 1
68014: ARRAY
68015: PUSH
68016: LD_VAR 0 2
68020: PLUS
68021: PUSH
68022: LD_VAR 0 8
68026: PUSH
68027: LD_INT 2
68029: ARRAY
68030: PUSH
68031: LD_VAR 0 3
68035: PLUS
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: EMPTY
68042: LIST
68043: ADD
68044: ST_TO_ADDR
68045: GO 67994
68047: POP
68048: POP
// result = temp_list2 ;
68049: LD_ADDR_VAR 0 7
68053: PUSH
68054: LD_VAR 0 10
68058: ST_TO_ADDR
// end ;
68059: LD_VAR 0 7
68063: RET
// export function EnemyInRange ( unit , dist ) ; begin
68064: LD_INT 0
68066: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68067: LD_ADDR_VAR 0 3
68071: PUSH
68072: LD_VAR 0 1
68076: PPUSH
68077: CALL_OW 255
68081: PPUSH
68082: LD_VAR 0 1
68086: PPUSH
68087: CALL_OW 250
68091: PPUSH
68092: LD_VAR 0 1
68096: PPUSH
68097: CALL_OW 251
68101: PPUSH
68102: LD_VAR 0 2
68106: PPUSH
68107: CALL 42168 0 4
68111: PUSH
68112: LD_INT 4
68114: ARRAY
68115: ST_TO_ADDR
// end ;
68116: LD_VAR 0 3
68120: RET
// export function PlayerSeeMe ( unit ) ; begin
68121: LD_INT 0
68123: PPUSH
// result := See ( your_side , unit ) ;
68124: LD_ADDR_VAR 0 2
68128: PUSH
68129: LD_OWVAR 2
68133: PPUSH
68134: LD_VAR 0 1
68138: PPUSH
68139: CALL_OW 292
68143: ST_TO_ADDR
// end ;
68144: LD_VAR 0 2
68148: RET
// export function ReverseDir ( unit ) ; begin
68149: LD_INT 0
68151: PPUSH
// if not unit then
68152: LD_VAR 0 1
68156: NOT
68157: IFFALSE 68161
// exit ;
68159: GO 68184
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68161: LD_ADDR_VAR 0 2
68165: PUSH
68166: LD_VAR 0 1
68170: PPUSH
68171: CALL_OW 254
68175: PUSH
68176: LD_INT 3
68178: PLUS
68179: PUSH
68180: LD_INT 6
68182: MOD
68183: ST_TO_ADDR
// end ;
68184: LD_VAR 0 2
68188: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68189: LD_INT 0
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
68195: PPUSH
// if not hexes then
68196: LD_VAR 0 2
68200: NOT
68201: IFFALSE 68205
// exit ;
68203: GO 68353
// dist := 9999 ;
68205: LD_ADDR_VAR 0 5
68209: PUSH
68210: LD_INT 9999
68212: ST_TO_ADDR
// for i = 1 to hexes do
68213: LD_ADDR_VAR 0 4
68217: PUSH
68218: DOUBLE
68219: LD_INT 1
68221: DEC
68222: ST_TO_ADDR
68223: LD_VAR 0 2
68227: PUSH
68228: FOR_TO
68229: IFFALSE 68341
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68231: LD_VAR 0 1
68235: PPUSH
68236: LD_VAR 0 2
68240: PUSH
68241: LD_VAR 0 4
68245: ARRAY
68246: PUSH
68247: LD_INT 1
68249: ARRAY
68250: PPUSH
68251: LD_VAR 0 2
68255: PUSH
68256: LD_VAR 0 4
68260: ARRAY
68261: PUSH
68262: LD_INT 2
68264: ARRAY
68265: PPUSH
68266: CALL_OW 297
68270: PUSH
68271: LD_VAR 0 5
68275: LESS
68276: IFFALSE 68339
// begin hex := hexes [ i ] ;
68278: LD_ADDR_VAR 0 7
68282: PUSH
68283: LD_VAR 0 2
68287: PUSH
68288: LD_VAR 0 4
68292: ARRAY
68293: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68294: LD_ADDR_VAR 0 5
68298: PUSH
68299: LD_VAR 0 1
68303: PPUSH
68304: LD_VAR 0 2
68308: PUSH
68309: LD_VAR 0 4
68313: ARRAY
68314: PUSH
68315: LD_INT 1
68317: ARRAY
68318: PPUSH
68319: LD_VAR 0 2
68323: PUSH
68324: LD_VAR 0 4
68328: ARRAY
68329: PUSH
68330: LD_INT 2
68332: ARRAY
68333: PPUSH
68334: CALL_OW 297
68338: ST_TO_ADDR
// end ; end ;
68339: GO 68228
68341: POP
68342: POP
// result := hex ;
68343: LD_ADDR_VAR 0 3
68347: PUSH
68348: LD_VAR 0 7
68352: ST_TO_ADDR
// end ;
68353: LD_VAR 0 3
68357: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68358: LD_INT 0
68360: PPUSH
68361: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68362: LD_VAR 0 1
68366: NOT
68367: PUSH
68368: LD_VAR 0 1
68372: PUSH
68373: LD_INT 21
68375: PUSH
68376: LD_INT 2
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 23
68385: PUSH
68386: LD_INT 2
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PPUSH
68397: CALL_OW 69
68401: IN
68402: NOT
68403: OR
68404: IFFALSE 68408
// exit ;
68406: GO 68455
// for i = 1 to 3 do
68408: LD_ADDR_VAR 0 3
68412: PUSH
68413: DOUBLE
68414: LD_INT 1
68416: DEC
68417: ST_TO_ADDR
68418: LD_INT 3
68420: PUSH
68421: FOR_TO
68422: IFFALSE 68453
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68424: LD_VAR 0 1
68428: PPUSH
68429: CALL_OW 250
68433: PPUSH
68434: LD_VAR 0 1
68438: PPUSH
68439: CALL_OW 251
68443: PPUSH
68444: LD_INT 1
68446: PPUSH
68447: CALL_OW 453
68451: GO 68421
68453: POP
68454: POP
// end ;
68455: LD_VAR 0 2
68459: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68460: LD_INT 0
68462: PPUSH
68463: PPUSH
68464: PPUSH
68465: PPUSH
68466: PPUSH
68467: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68468: LD_VAR 0 1
68472: NOT
68473: PUSH
68474: LD_VAR 0 2
68478: NOT
68479: OR
68480: PUSH
68481: LD_VAR 0 1
68485: PPUSH
68486: CALL_OW 314
68490: OR
68491: IFFALSE 68495
// exit ;
68493: GO 68936
// x := GetX ( enemy_unit ) ;
68495: LD_ADDR_VAR 0 7
68499: PUSH
68500: LD_VAR 0 2
68504: PPUSH
68505: CALL_OW 250
68509: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68510: LD_ADDR_VAR 0 8
68514: PUSH
68515: LD_VAR 0 2
68519: PPUSH
68520: CALL_OW 251
68524: ST_TO_ADDR
// if not x or not y then
68525: LD_VAR 0 7
68529: NOT
68530: PUSH
68531: LD_VAR 0 8
68535: NOT
68536: OR
68537: IFFALSE 68541
// exit ;
68539: GO 68936
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68541: LD_ADDR_VAR 0 6
68545: PUSH
68546: LD_VAR 0 7
68550: PPUSH
68551: LD_INT 0
68553: PPUSH
68554: LD_INT 4
68556: PPUSH
68557: CALL_OW 272
68561: PUSH
68562: LD_VAR 0 8
68566: PPUSH
68567: LD_INT 0
68569: PPUSH
68570: LD_INT 4
68572: PPUSH
68573: CALL_OW 273
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_VAR 0 7
68586: PPUSH
68587: LD_INT 1
68589: PPUSH
68590: LD_INT 4
68592: PPUSH
68593: CALL_OW 272
68597: PUSH
68598: LD_VAR 0 8
68602: PPUSH
68603: LD_INT 1
68605: PPUSH
68606: LD_INT 4
68608: PPUSH
68609: CALL_OW 273
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_VAR 0 7
68622: PPUSH
68623: LD_INT 2
68625: PPUSH
68626: LD_INT 4
68628: PPUSH
68629: CALL_OW 272
68633: PUSH
68634: LD_VAR 0 8
68638: PPUSH
68639: LD_INT 2
68641: PPUSH
68642: LD_INT 4
68644: PPUSH
68645: CALL_OW 273
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_VAR 0 7
68658: PPUSH
68659: LD_INT 3
68661: PPUSH
68662: LD_INT 4
68664: PPUSH
68665: CALL_OW 272
68669: PUSH
68670: LD_VAR 0 8
68674: PPUSH
68675: LD_INT 3
68677: PPUSH
68678: LD_INT 4
68680: PPUSH
68681: CALL_OW 273
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_VAR 0 7
68694: PPUSH
68695: LD_INT 4
68697: PPUSH
68698: LD_INT 4
68700: PPUSH
68701: CALL_OW 272
68705: PUSH
68706: LD_VAR 0 8
68710: PPUSH
68711: LD_INT 4
68713: PPUSH
68714: LD_INT 4
68716: PPUSH
68717: CALL_OW 273
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_VAR 0 7
68730: PPUSH
68731: LD_INT 5
68733: PPUSH
68734: LD_INT 4
68736: PPUSH
68737: CALL_OW 272
68741: PUSH
68742: LD_VAR 0 8
68746: PPUSH
68747: LD_INT 5
68749: PPUSH
68750: LD_INT 4
68752: PPUSH
68753: CALL_OW 273
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: ST_TO_ADDR
// for i = tmp downto 1 do
68770: LD_ADDR_VAR 0 4
68774: PUSH
68775: DOUBLE
68776: LD_VAR 0 6
68780: INC
68781: ST_TO_ADDR
68782: LD_INT 1
68784: PUSH
68785: FOR_DOWNTO
68786: IFFALSE 68887
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68788: LD_VAR 0 6
68792: PUSH
68793: LD_VAR 0 4
68797: ARRAY
68798: PUSH
68799: LD_INT 1
68801: ARRAY
68802: PPUSH
68803: LD_VAR 0 6
68807: PUSH
68808: LD_VAR 0 4
68812: ARRAY
68813: PUSH
68814: LD_INT 2
68816: ARRAY
68817: PPUSH
68818: CALL_OW 488
68822: NOT
68823: PUSH
68824: LD_VAR 0 6
68828: PUSH
68829: LD_VAR 0 4
68833: ARRAY
68834: PUSH
68835: LD_INT 1
68837: ARRAY
68838: PPUSH
68839: LD_VAR 0 6
68843: PUSH
68844: LD_VAR 0 4
68848: ARRAY
68849: PUSH
68850: LD_INT 2
68852: ARRAY
68853: PPUSH
68854: CALL_OW 428
68858: PUSH
68859: LD_INT 0
68861: NONEQUAL
68862: OR
68863: IFFALSE 68885
// tmp := Delete ( tmp , i ) ;
68865: LD_ADDR_VAR 0 6
68869: PUSH
68870: LD_VAR 0 6
68874: PPUSH
68875: LD_VAR 0 4
68879: PPUSH
68880: CALL_OW 3
68884: ST_TO_ADDR
68885: GO 68785
68887: POP
68888: POP
// j := GetClosestHex ( unit , tmp ) ;
68889: LD_ADDR_VAR 0 5
68893: PUSH
68894: LD_VAR 0 1
68898: PPUSH
68899: LD_VAR 0 6
68903: PPUSH
68904: CALL 68189 0 2
68908: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68909: LD_VAR 0 1
68913: PPUSH
68914: LD_VAR 0 5
68918: PUSH
68919: LD_INT 1
68921: ARRAY
68922: PPUSH
68923: LD_VAR 0 5
68927: PUSH
68928: LD_INT 2
68930: ARRAY
68931: PPUSH
68932: CALL_OW 111
// end ;
68936: LD_VAR 0 3
68940: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68941: LD_INT 0
68943: PPUSH
68944: PPUSH
68945: PPUSH
// uc_side = 0 ;
68946: LD_ADDR_OWVAR 20
68950: PUSH
68951: LD_INT 0
68953: ST_TO_ADDR
// uc_nation = 0 ;
68954: LD_ADDR_OWVAR 21
68958: PUSH
68959: LD_INT 0
68961: ST_TO_ADDR
// InitHc_All ( ) ;
68962: CALL_OW 584
// InitVc ;
68966: CALL_OW 20
// if mastodonts then
68970: LD_VAR 0 6
68974: IFFALSE 69041
// for i = 1 to mastodonts do
68976: LD_ADDR_VAR 0 11
68980: PUSH
68981: DOUBLE
68982: LD_INT 1
68984: DEC
68985: ST_TO_ADDR
68986: LD_VAR 0 6
68990: PUSH
68991: FOR_TO
68992: IFFALSE 69039
// begin vc_chassis := 31 ;
68994: LD_ADDR_OWVAR 37
68998: PUSH
68999: LD_INT 31
69001: ST_TO_ADDR
// vc_control := control_rider ;
69002: LD_ADDR_OWVAR 38
69006: PUSH
69007: LD_INT 4
69009: ST_TO_ADDR
// animal := CreateVehicle ;
69010: LD_ADDR_VAR 0 12
69014: PUSH
69015: CALL_OW 45
69019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69020: LD_VAR 0 12
69024: PPUSH
69025: LD_VAR 0 8
69029: PPUSH
69030: LD_INT 0
69032: PPUSH
69033: CALL 71229 0 3
// end ;
69037: GO 68991
69039: POP
69040: POP
// if horses then
69041: LD_VAR 0 5
69045: IFFALSE 69112
// for i = 1 to horses do
69047: LD_ADDR_VAR 0 11
69051: PUSH
69052: DOUBLE
69053: LD_INT 1
69055: DEC
69056: ST_TO_ADDR
69057: LD_VAR 0 5
69061: PUSH
69062: FOR_TO
69063: IFFALSE 69110
// begin hc_class := 21 ;
69065: LD_ADDR_OWVAR 28
69069: PUSH
69070: LD_INT 21
69072: ST_TO_ADDR
// hc_gallery :=  ;
69073: LD_ADDR_OWVAR 33
69077: PUSH
69078: LD_STRING 
69080: ST_TO_ADDR
// animal := CreateHuman ;
69081: LD_ADDR_VAR 0 12
69085: PUSH
69086: CALL_OW 44
69090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69091: LD_VAR 0 12
69095: PPUSH
69096: LD_VAR 0 8
69100: PPUSH
69101: LD_INT 0
69103: PPUSH
69104: CALL 71229 0 3
// end ;
69108: GO 69062
69110: POP
69111: POP
// if birds then
69112: LD_VAR 0 1
69116: IFFALSE 69183
// for i = 1 to birds do
69118: LD_ADDR_VAR 0 11
69122: PUSH
69123: DOUBLE
69124: LD_INT 1
69126: DEC
69127: ST_TO_ADDR
69128: LD_VAR 0 1
69132: PUSH
69133: FOR_TO
69134: IFFALSE 69181
// begin hc_class = 18 ;
69136: LD_ADDR_OWVAR 28
69140: PUSH
69141: LD_INT 18
69143: ST_TO_ADDR
// hc_gallery =  ;
69144: LD_ADDR_OWVAR 33
69148: PUSH
69149: LD_STRING 
69151: ST_TO_ADDR
// animal := CreateHuman ;
69152: LD_ADDR_VAR 0 12
69156: PUSH
69157: CALL_OW 44
69161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69162: LD_VAR 0 12
69166: PPUSH
69167: LD_VAR 0 8
69171: PPUSH
69172: LD_INT 0
69174: PPUSH
69175: CALL 71229 0 3
// end ;
69179: GO 69133
69181: POP
69182: POP
// if tigers then
69183: LD_VAR 0 2
69187: IFFALSE 69271
// for i = 1 to tigers do
69189: LD_ADDR_VAR 0 11
69193: PUSH
69194: DOUBLE
69195: LD_INT 1
69197: DEC
69198: ST_TO_ADDR
69199: LD_VAR 0 2
69203: PUSH
69204: FOR_TO
69205: IFFALSE 69269
// begin hc_class = class_tiger ;
69207: LD_ADDR_OWVAR 28
69211: PUSH
69212: LD_INT 14
69214: ST_TO_ADDR
// hc_gallery =  ;
69215: LD_ADDR_OWVAR 33
69219: PUSH
69220: LD_STRING 
69222: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69223: LD_ADDR_OWVAR 35
69227: PUSH
69228: LD_INT 7
69230: NEG
69231: PPUSH
69232: LD_INT 7
69234: PPUSH
69235: CALL_OW 12
69239: ST_TO_ADDR
// animal := CreateHuman ;
69240: LD_ADDR_VAR 0 12
69244: PUSH
69245: CALL_OW 44
69249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69250: LD_VAR 0 12
69254: PPUSH
69255: LD_VAR 0 8
69259: PPUSH
69260: LD_INT 0
69262: PPUSH
69263: CALL 71229 0 3
// end ;
69267: GO 69204
69269: POP
69270: POP
// if apemans then
69271: LD_VAR 0 3
69275: IFFALSE 69398
// for i = 1 to apemans do
69277: LD_ADDR_VAR 0 11
69281: PUSH
69282: DOUBLE
69283: LD_INT 1
69285: DEC
69286: ST_TO_ADDR
69287: LD_VAR 0 3
69291: PUSH
69292: FOR_TO
69293: IFFALSE 69396
// begin hc_class = class_apeman ;
69295: LD_ADDR_OWVAR 28
69299: PUSH
69300: LD_INT 12
69302: ST_TO_ADDR
// hc_gallery =  ;
69303: LD_ADDR_OWVAR 33
69307: PUSH
69308: LD_STRING 
69310: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69311: LD_ADDR_OWVAR 35
69315: PUSH
69316: LD_INT 5
69318: NEG
69319: PPUSH
69320: LD_INT 5
69322: PPUSH
69323: CALL_OW 12
69327: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69328: LD_ADDR_OWVAR 31
69332: PUSH
69333: LD_INT 1
69335: PPUSH
69336: LD_INT 3
69338: PPUSH
69339: CALL_OW 12
69343: PUSH
69344: LD_INT 1
69346: PPUSH
69347: LD_INT 3
69349: PPUSH
69350: CALL_OW 12
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: LD_INT 0
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: ST_TO_ADDR
// animal := CreateHuman ;
69367: LD_ADDR_VAR 0 12
69371: PUSH
69372: CALL_OW 44
69376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69377: LD_VAR 0 12
69381: PPUSH
69382: LD_VAR 0 8
69386: PPUSH
69387: LD_INT 0
69389: PPUSH
69390: CALL 71229 0 3
// end ;
69394: GO 69292
69396: POP
69397: POP
// if enchidnas then
69398: LD_VAR 0 4
69402: IFFALSE 69469
// for i = 1 to enchidnas do
69404: LD_ADDR_VAR 0 11
69408: PUSH
69409: DOUBLE
69410: LD_INT 1
69412: DEC
69413: ST_TO_ADDR
69414: LD_VAR 0 4
69418: PUSH
69419: FOR_TO
69420: IFFALSE 69467
// begin hc_class = 13 ;
69422: LD_ADDR_OWVAR 28
69426: PUSH
69427: LD_INT 13
69429: ST_TO_ADDR
// hc_gallery =  ;
69430: LD_ADDR_OWVAR 33
69434: PUSH
69435: LD_STRING 
69437: ST_TO_ADDR
// animal := CreateHuman ;
69438: LD_ADDR_VAR 0 12
69442: PUSH
69443: CALL_OW 44
69447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69448: LD_VAR 0 12
69452: PPUSH
69453: LD_VAR 0 8
69457: PPUSH
69458: LD_INT 0
69460: PPUSH
69461: CALL 71229 0 3
// end ;
69465: GO 69419
69467: POP
69468: POP
// if fishes then
69469: LD_VAR 0 7
69473: IFFALSE 69540
// for i = 1 to fishes do
69475: LD_ADDR_VAR 0 11
69479: PUSH
69480: DOUBLE
69481: LD_INT 1
69483: DEC
69484: ST_TO_ADDR
69485: LD_VAR 0 7
69489: PUSH
69490: FOR_TO
69491: IFFALSE 69538
// begin hc_class = 20 ;
69493: LD_ADDR_OWVAR 28
69497: PUSH
69498: LD_INT 20
69500: ST_TO_ADDR
// hc_gallery =  ;
69501: LD_ADDR_OWVAR 33
69505: PUSH
69506: LD_STRING 
69508: ST_TO_ADDR
// animal := CreateHuman ;
69509: LD_ADDR_VAR 0 12
69513: PUSH
69514: CALL_OW 44
69518: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69519: LD_VAR 0 12
69523: PPUSH
69524: LD_VAR 0 9
69528: PPUSH
69529: LD_INT 0
69531: PPUSH
69532: CALL 71229 0 3
// end ;
69536: GO 69490
69538: POP
69539: POP
// end ;
69540: LD_VAR 0 10
69544: RET
// export function WantHeal ( sci , unit ) ; begin
69545: LD_INT 0
69547: PPUSH
// if GetTaskList ( sci ) > 0 then
69548: LD_VAR 0 1
69552: PPUSH
69553: CALL_OW 437
69557: PUSH
69558: LD_INT 0
69560: GREATER
69561: IFFALSE 69631
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69563: LD_VAR 0 1
69567: PPUSH
69568: CALL_OW 437
69572: PUSH
69573: LD_INT 1
69575: ARRAY
69576: PUSH
69577: LD_INT 1
69579: ARRAY
69580: PUSH
69581: LD_STRING l
69583: EQUAL
69584: PUSH
69585: LD_VAR 0 1
69589: PPUSH
69590: CALL_OW 437
69594: PUSH
69595: LD_INT 1
69597: ARRAY
69598: PUSH
69599: LD_INT 4
69601: ARRAY
69602: PUSH
69603: LD_VAR 0 2
69607: EQUAL
69608: AND
69609: IFFALSE 69621
// result := true else
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_INT 1
69618: ST_TO_ADDR
69619: GO 69629
// result := false ;
69621: LD_ADDR_VAR 0 3
69625: PUSH
69626: LD_INT 0
69628: ST_TO_ADDR
// end else
69629: GO 69639
// result := false ;
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: LD_INT 0
69638: ST_TO_ADDR
// end ;
69639: LD_VAR 0 3
69643: RET
// export function HealTarget ( sci ) ; begin
69644: LD_INT 0
69646: PPUSH
// if not sci then
69647: LD_VAR 0 1
69651: NOT
69652: IFFALSE 69656
// exit ;
69654: GO 69721
// result := 0 ;
69656: LD_ADDR_VAR 0 2
69660: PUSH
69661: LD_INT 0
69663: ST_TO_ADDR
// if GetTaskList ( sci ) then
69664: LD_VAR 0 1
69668: PPUSH
69669: CALL_OW 437
69673: IFFALSE 69721
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69675: LD_VAR 0 1
69679: PPUSH
69680: CALL_OW 437
69684: PUSH
69685: LD_INT 1
69687: ARRAY
69688: PUSH
69689: LD_INT 1
69691: ARRAY
69692: PUSH
69693: LD_STRING l
69695: EQUAL
69696: IFFALSE 69721
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69698: LD_ADDR_VAR 0 2
69702: PUSH
69703: LD_VAR 0 1
69707: PPUSH
69708: CALL_OW 437
69712: PUSH
69713: LD_INT 1
69715: ARRAY
69716: PUSH
69717: LD_INT 4
69719: ARRAY
69720: ST_TO_ADDR
// end ;
69721: LD_VAR 0 2
69725: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69726: LD_INT 0
69728: PPUSH
69729: PPUSH
69730: PPUSH
69731: PPUSH
// if not base_units then
69732: LD_VAR 0 1
69736: NOT
69737: IFFALSE 69741
// exit ;
69739: GO 69828
// result := false ;
69741: LD_ADDR_VAR 0 2
69745: PUSH
69746: LD_INT 0
69748: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69749: LD_ADDR_VAR 0 5
69753: PUSH
69754: LD_VAR 0 1
69758: PPUSH
69759: LD_INT 21
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PPUSH
69769: CALL_OW 72
69773: ST_TO_ADDR
// if not tmp then
69774: LD_VAR 0 5
69778: NOT
69779: IFFALSE 69783
// exit ;
69781: GO 69828
// for i in tmp do
69783: LD_ADDR_VAR 0 3
69787: PUSH
69788: LD_VAR 0 5
69792: PUSH
69793: FOR_IN
69794: IFFALSE 69826
// begin result := EnemyInRange ( i , 22 ) ;
69796: LD_ADDR_VAR 0 2
69800: PUSH
69801: LD_VAR 0 3
69805: PPUSH
69806: LD_INT 22
69808: PPUSH
69809: CALL 68064 0 2
69813: ST_TO_ADDR
// if result then
69814: LD_VAR 0 2
69818: IFFALSE 69824
// exit ;
69820: POP
69821: POP
69822: GO 69828
// end ;
69824: GO 69793
69826: POP
69827: POP
// end ;
69828: LD_VAR 0 2
69832: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69833: LD_INT 0
69835: PPUSH
69836: PPUSH
// if not units then
69837: LD_VAR 0 1
69841: NOT
69842: IFFALSE 69846
// exit ;
69844: GO 69916
// result := [ ] ;
69846: LD_ADDR_VAR 0 3
69850: PUSH
69851: EMPTY
69852: ST_TO_ADDR
// for i in units do
69853: LD_ADDR_VAR 0 4
69857: PUSH
69858: LD_VAR 0 1
69862: PUSH
69863: FOR_IN
69864: IFFALSE 69914
// if GetTag ( i ) = tag then
69866: LD_VAR 0 4
69870: PPUSH
69871: CALL_OW 110
69875: PUSH
69876: LD_VAR 0 2
69880: EQUAL
69881: IFFALSE 69912
// result := Insert ( result , result + 1 , i ) ;
69883: LD_ADDR_VAR 0 3
69887: PUSH
69888: LD_VAR 0 3
69892: PPUSH
69893: LD_VAR 0 3
69897: PUSH
69898: LD_INT 1
69900: PLUS
69901: PPUSH
69902: LD_VAR 0 4
69906: PPUSH
69907: CALL_OW 2
69911: ST_TO_ADDR
69912: GO 69863
69914: POP
69915: POP
// end ;
69916: LD_VAR 0 3
69920: RET
// export function IsDriver ( un ) ; begin
69921: LD_INT 0
69923: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69924: LD_ADDR_VAR 0 2
69928: PUSH
69929: LD_VAR 0 1
69933: PUSH
69934: LD_INT 55
69936: PUSH
69937: EMPTY
69938: LIST
69939: PPUSH
69940: CALL_OW 69
69944: IN
69945: ST_TO_ADDR
// end ;
69946: LD_VAR 0 2
69950: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69951: LD_INT 0
69953: PPUSH
69954: PPUSH
// list := [ ] ;
69955: LD_ADDR_VAR 0 5
69959: PUSH
69960: EMPTY
69961: ST_TO_ADDR
// case d of 0 :
69962: LD_VAR 0 3
69966: PUSH
69967: LD_INT 0
69969: DOUBLE
69970: EQUAL
69971: IFTRUE 69975
69973: GO 70108
69975: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69976: LD_ADDR_VAR 0 5
69980: PUSH
69981: LD_VAR 0 1
69985: PUSH
69986: LD_INT 4
69988: MINUS
69989: PUSH
69990: LD_VAR 0 2
69994: PUSH
69995: LD_INT 4
69997: MINUS
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: LIST
70006: PUSH
70007: LD_VAR 0 1
70011: PUSH
70012: LD_INT 3
70014: MINUS
70015: PUSH
70016: LD_VAR 0 2
70020: PUSH
70021: LD_INT 1
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: LIST
70028: PUSH
70029: LD_VAR 0 1
70033: PUSH
70034: LD_INT 4
70036: PLUS
70037: PUSH
70038: LD_VAR 0 2
70042: PUSH
70043: LD_INT 4
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: PUSH
70051: LD_VAR 0 1
70055: PUSH
70056: LD_INT 3
70058: PLUS
70059: PUSH
70060: LD_VAR 0 2
70064: PUSH
70065: LD_INT 3
70067: PLUS
70068: PUSH
70069: LD_INT 5
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: LIST
70076: PUSH
70077: LD_VAR 0 1
70081: PUSH
70082: LD_VAR 0 2
70086: PUSH
70087: LD_INT 4
70089: PLUS
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: ST_TO_ADDR
// end ; 1 :
70106: GO 70806
70108: LD_INT 1
70110: DOUBLE
70111: EQUAL
70112: IFTRUE 70116
70114: GO 70249
70116: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70117: LD_ADDR_VAR 0 5
70121: PUSH
70122: LD_VAR 0 1
70126: PUSH
70127: LD_VAR 0 2
70131: PUSH
70132: LD_INT 4
70134: MINUS
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: LIST
70143: PUSH
70144: LD_VAR 0 1
70148: PUSH
70149: LD_INT 3
70151: MINUS
70152: PUSH
70153: LD_VAR 0 2
70157: PUSH
70158: LD_INT 3
70160: MINUS
70161: PUSH
70162: LD_INT 2
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: PUSH
70170: LD_VAR 0 1
70174: PUSH
70175: LD_INT 4
70177: MINUS
70178: PUSH
70179: LD_VAR 0 2
70183: PUSH
70184: LD_INT 1
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: LIST
70191: PUSH
70192: LD_VAR 0 1
70196: PUSH
70197: LD_VAR 0 2
70201: PUSH
70202: LD_INT 3
70204: PLUS
70205: PUSH
70206: LD_INT 0
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: LIST
70213: PUSH
70214: LD_VAR 0 1
70218: PUSH
70219: LD_INT 4
70221: PLUS
70222: PUSH
70223: LD_VAR 0 2
70227: PUSH
70228: LD_INT 4
70230: PLUS
70231: PUSH
70232: LD_INT 5
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: LIST
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: ST_TO_ADDR
// end ; 2 :
70247: GO 70806
70249: LD_INT 2
70251: DOUBLE
70252: EQUAL
70253: IFTRUE 70257
70255: GO 70386
70257: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70258: LD_ADDR_VAR 0 5
70262: PUSH
70263: LD_VAR 0 1
70267: PUSH
70268: LD_VAR 0 2
70272: PUSH
70273: LD_INT 3
70275: MINUS
70276: PUSH
70277: LD_INT 3
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: LIST
70284: PUSH
70285: LD_VAR 0 1
70289: PUSH
70290: LD_INT 4
70292: PLUS
70293: PUSH
70294: LD_VAR 0 2
70298: PUSH
70299: LD_INT 4
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: LIST
70306: PUSH
70307: LD_VAR 0 1
70311: PUSH
70312: LD_VAR 0 2
70316: PUSH
70317: LD_INT 4
70319: PLUS
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: PUSH
70329: LD_VAR 0 1
70333: PUSH
70334: LD_INT 3
70336: MINUS
70337: PUSH
70338: LD_VAR 0 2
70342: PUSH
70343: LD_INT 1
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: LIST
70350: PUSH
70351: LD_VAR 0 1
70355: PUSH
70356: LD_INT 4
70358: MINUS
70359: PUSH
70360: LD_VAR 0 2
70364: PUSH
70365: LD_INT 4
70367: MINUS
70368: PUSH
70369: LD_INT 2
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: LIST
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: ST_TO_ADDR
// end ; 3 :
70384: GO 70806
70386: LD_INT 3
70388: DOUBLE
70389: EQUAL
70390: IFTRUE 70394
70392: GO 70527
70394: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70395: LD_ADDR_VAR 0 5
70399: PUSH
70400: LD_VAR 0 1
70404: PUSH
70405: LD_INT 3
70407: PLUS
70408: PUSH
70409: LD_VAR 0 2
70413: PUSH
70414: LD_INT 4
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: LIST
70421: PUSH
70422: LD_VAR 0 1
70426: PUSH
70427: LD_INT 4
70429: PLUS
70430: PUSH
70431: LD_VAR 0 2
70435: PUSH
70436: LD_INT 4
70438: PLUS
70439: PUSH
70440: LD_INT 5
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: LIST
70447: PUSH
70448: LD_VAR 0 1
70452: PUSH
70453: LD_INT 4
70455: MINUS
70456: PUSH
70457: LD_VAR 0 2
70461: PUSH
70462: LD_INT 1
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: LIST
70469: PUSH
70470: LD_VAR 0 1
70474: PUSH
70475: LD_VAR 0 2
70479: PUSH
70480: LD_INT 4
70482: MINUS
70483: PUSH
70484: LD_INT 3
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: LIST
70491: PUSH
70492: LD_VAR 0 1
70496: PUSH
70497: LD_INT 3
70499: MINUS
70500: PUSH
70501: LD_VAR 0 2
70505: PUSH
70506: LD_INT 3
70508: MINUS
70509: PUSH
70510: LD_INT 2
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: LIST
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: ST_TO_ADDR
// end ; 4 :
70525: GO 70806
70527: LD_INT 4
70529: DOUBLE
70530: EQUAL
70531: IFTRUE 70535
70533: GO 70668
70535: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70536: LD_ADDR_VAR 0 5
70540: PUSH
70541: LD_VAR 0 1
70545: PUSH
70546: LD_VAR 0 2
70550: PUSH
70551: LD_INT 4
70553: PLUS
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: LIST
70562: PUSH
70563: LD_VAR 0 1
70567: PUSH
70568: LD_INT 3
70570: PLUS
70571: PUSH
70572: LD_VAR 0 2
70576: PUSH
70577: LD_INT 3
70579: PLUS
70580: PUSH
70581: LD_INT 5
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: PUSH
70589: LD_VAR 0 1
70593: PUSH
70594: LD_INT 4
70596: PLUS
70597: PUSH
70598: LD_VAR 0 2
70602: PUSH
70603: LD_INT 4
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: PUSH
70611: LD_VAR 0 1
70615: PUSH
70616: LD_VAR 0 2
70620: PUSH
70621: LD_INT 3
70623: MINUS
70624: PUSH
70625: LD_INT 3
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: LIST
70632: PUSH
70633: LD_VAR 0 1
70637: PUSH
70638: LD_INT 4
70640: MINUS
70641: PUSH
70642: LD_VAR 0 2
70646: PUSH
70647: LD_INT 4
70649: MINUS
70650: PUSH
70651: LD_INT 2
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: LIST
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: ST_TO_ADDR
// end ; 5 :
70666: GO 70806
70668: LD_INT 5
70670: DOUBLE
70671: EQUAL
70672: IFTRUE 70676
70674: GO 70805
70676: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70677: LD_ADDR_VAR 0 5
70681: PUSH
70682: LD_VAR 0 1
70686: PUSH
70687: LD_INT 4
70689: MINUS
70690: PUSH
70691: LD_VAR 0 2
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: PUSH
70704: LD_VAR 0 1
70708: PUSH
70709: LD_VAR 0 2
70713: PUSH
70714: LD_INT 4
70716: MINUS
70717: PUSH
70718: LD_INT 3
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: PUSH
70726: LD_VAR 0 1
70730: PUSH
70731: LD_INT 4
70733: PLUS
70734: PUSH
70735: LD_VAR 0 2
70739: PUSH
70740: LD_INT 4
70742: PLUS
70743: PUSH
70744: LD_INT 5
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: LIST
70751: PUSH
70752: LD_VAR 0 1
70756: PUSH
70757: LD_INT 3
70759: PLUS
70760: PUSH
70761: LD_VAR 0 2
70765: PUSH
70766: LD_INT 4
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: LIST
70773: PUSH
70774: LD_VAR 0 1
70778: PUSH
70779: LD_VAR 0 2
70783: PUSH
70784: LD_INT 3
70786: PLUS
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: LIST
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: ST_TO_ADDR
// end ; end ;
70803: GO 70806
70805: POP
// result := list ;
70806: LD_ADDR_VAR 0 4
70810: PUSH
70811: LD_VAR 0 5
70815: ST_TO_ADDR
// end ;
70816: LD_VAR 0 4
70820: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70821: LD_INT 0
70823: PPUSH
70824: PPUSH
70825: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70826: LD_VAR 0 1
70830: NOT
70831: PUSH
70832: LD_VAR 0 2
70836: PUSH
70837: LD_INT 1
70839: PUSH
70840: LD_INT 2
70842: PUSH
70843: LD_INT 3
70845: PUSH
70846: LD_INT 4
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: IN
70855: NOT
70856: OR
70857: IFFALSE 70861
// exit ;
70859: GO 70953
// tmp := [ ] ;
70861: LD_ADDR_VAR 0 5
70865: PUSH
70866: EMPTY
70867: ST_TO_ADDR
// for i in units do
70868: LD_ADDR_VAR 0 4
70872: PUSH
70873: LD_VAR 0 1
70877: PUSH
70878: FOR_IN
70879: IFFALSE 70922
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70881: LD_ADDR_VAR 0 5
70885: PUSH
70886: LD_VAR 0 5
70890: PPUSH
70891: LD_VAR 0 5
70895: PUSH
70896: LD_INT 1
70898: PLUS
70899: PPUSH
70900: LD_VAR 0 4
70904: PPUSH
70905: LD_VAR 0 2
70909: PPUSH
70910: CALL_OW 259
70914: PPUSH
70915: CALL_OW 2
70919: ST_TO_ADDR
70920: GO 70878
70922: POP
70923: POP
// if not tmp then
70924: LD_VAR 0 5
70928: NOT
70929: IFFALSE 70933
// exit ;
70931: GO 70953
// result := SortListByListDesc ( units , tmp ) ;
70933: LD_ADDR_VAR 0 3
70937: PUSH
70938: LD_VAR 0 1
70942: PPUSH
70943: LD_VAR 0 5
70947: PPUSH
70948: CALL_OW 77
70952: ST_TO_ADDR
// end ;
70953: LD_VAR 0 3
70957: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70958: LD_INT 0
70960: PPUSH
70961: PPUSH
70962: PPUSH
// result := false ;
70963: LD_ADDR_VAR 0 3
70967: PUSH
70968: LD_INT 0
70970: ST_TO_ADDR
// x := GetX ( building ) ;
70971: LD_ADDR_VAR 0 4
70975: PUSH
70976: LD_VAR 0 2
70980: PPUSH
70981: CALL_OW 250
70985: ST_TO_ADDR
// y := GetY ( building ) ;
70986: LD_ADDR_VAR 0 5
70990: PUSH
70991: LD_VAR 0 2
70995: PPUSH
70996: CALL_OW 251
71000: ST_TO_ADDR
// if not building or not x or not y then
71001: LD_VAR 0 2
71005: NOT
71006: PUSH
71007: LD_VAR 0 4
71011: NOT
71012: OR
71013: PUSH
71014: LD_VAR 0 5
71018: NOT
71019: OR
71020: IFFALSE 71024
// exit ;
71022: GO 71116
// if GetTaskList ( unit ) then
71024: LD_VAR 0 1
71028: PPUSH
71029: CALL_OW 437
71033: IFFALSE 71116
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71035: LD_STRING e
71037: PUSH
71038: LD_VAR 0 1
71042: PPUSH
71043: CALL_OW 437
71047: PUSH
71048: LD_INT 1
71050: ARRAY
71051: PUSH
71052: LD_INT 1
71054: ARRAY
71055: EQUAL
71056: PUSH
71057: LD_VAR 0 4
71061: PUSH
71062: LD_VAR 0 1
71066: PPUSH
71067: CALL_OW 437
71071: PUSH
71072: LD_INT 1
71074: ARRAY
71075: PUSH
71076: LD_INT 2
71078: ARRAY
71079: EQUAL
71080: AND
71081: PUSH
71082: LD_VAR 0 5
71086: PUSH
71087: LD_VAR 0 1
71091: PPUSH
71092: CALL_OW 437
71096: PUSH
71097: LD_INT 1
71099: ARRAY
71100: PUSH
71101: LD_INT 3
71103: ARRAY
71104: EQUAL
71105: AND
71106: IFFALSE 71116
// result := true end ;
71108: LD_ADDR_VAR 0 3
71112: PUSH
71113: LD_INT 1
71115: ST_TO_ADDR
// end ;
71116: LD_VAR 0 3
71120: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71121: LD_INT 0
71123: PPUSH
// result := false ;
71124: LD_ADDR_VAR 0 4
71128: PUSH
71129: LD_INT 0
71131: ST_TO_ADDR
// if GetTaskList ( unit ) then
71132: LD_VAR 0 1
71136: PPUSH
71137: CALL_OW 437
71141: IFFALSE 71224
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71143: LD_STRING M
71145: PUSH
71146: LD_VAR 0 1
71150: PPUSH
71151: CALL_OW 437
71155: PUSH
71156: LD_INT 1
71158: ARRAY
71159: PUSH
71160: LD_INT 1
71162: ARRAY
71163: EQUAL
71164: PUSH
71165: LD_VAR 0 2
71169: PUSH
71170: LD_VAR 0 1
71174: PPUSH
71175: CALL_OW 437
71179: PUSH
71180: LD_INT 1
71182: ARRAY
71183: PUSH
71184: LD_INT 2
71186: ARRAY
71187: EQUAL
71188: AND
71189: PUSH
71190: LD_VAR 0 3
71194: PUSH
71195: LD_VAR 0 1
71199: PPUSH
71200: CALL_OW 437
71204: PUSH
71205: LD_INT 1
71207: ARRAY
71208: PUSH
71209: LD_INT 3
71211: ARRAY
71212: EQUAL
71213: AND
71214: IFFALSE 71224
// result := true ;
71216: LD_ADDR_VAR 0 4
71220: PUSH
71221: LD_INT 1
71223: ST_TO_ADDR
// end ; end ;
71224: LD_VAR 0 4
71228: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71229: LD_INT 0
71231: PPUSH
71232: PPUSH
71233: PPUSH
71234: PPUSH
// if not unit or not area then
71235: LD_VAR 0 1
71239: NOT
71240: PUSH
71241: LD_VAR 0 2
71245: NOT
71246: OR
71247: IFFALSE 71251
// exit ;
71249: GO 71415
// tmp := AreaToList ( area , i ) ;
71251: LD_ADDR_VAR 0 6
71255: PUSH
71256: LD_VAR 0 2
71260: PPUSH
71261: LD_VAR 0 5
71265: PPUSH
71266: CALL_OW 517
71270: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71271: LD_ADDR_VAR 0 5
71275: PUSH
71276: DOUBLE
71277: LD_INT 1
71279: DEC
71280: ST_TO_ADDR
71281: LD_VAR 0 6
71285: PUSH
71286: LD_INT 1
71288: ARRAY
71289: PUSH
71290: FOR_TO
71291: IFFALSE 71413
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71293: LD_ADDR_VAR 0 7
71297: PUSH
71298: LD_VAR 0 6
71302: PUSH
71303: LD_INT 1
71305: ARRAY
71306: PUSH
71307: LD_VAR 0 5
71311: ARRAY
71312: PUSH
71313: LD_VAR 0 6
71317: PUSH
71318: LD_INT 2
71320: ARRAY
71321: PUSH
71322: LD_VAR 0 5
71326: ARRAY
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71332: LD_VAR 0 7
71336: PUSH
71337: LD_INT 1
71339: ARRAY
71340: PPUSH
71341: LD_VAR 0 7
71345: PUSH
71346: LD_INT 2
71348: ARRAY
71349: PPUSH
71350: CALL_OW 428
71354: PUSH
71355: LD_INT 0
71357: EQUAL
71358: IFFALSE 71411
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71360: LD_VAR 0 1
71364: PPUSH
71365: LD_VAR 0 7
71369: PUSH
71370: LD_INT 1
71372: ARRAY
71373: PPUSH
71374: LD_VAR 0 7
71378: PUSH
71379: LD_INT 2
71381: ARRAY
71382: PPUSH
71383: LD_VAR 0 3
71387: PPUSH
71388: CALL_OW 48
// result := IsPlaced ( unit ) ;
71392: LD_ADDR_VAR 0 4
71396: PUSH
71397: LD_VAR 0 1
71401: PPUSH
71402: CALL_OW 305
71406: ST_TO_ADDR
// exit ;
71407: POP
71408: POP
71409: GO 71415
// end ; end ;
71411: GO 71290
71413: POP
71414: POP
// end ;
71415: LD_VAR 0 4
71419: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71420: LD_INT 0
71422: PPUSH
71423: PPUSH
71424: PPUSH
// if not side or side > 8 then
71425: LD_VAR 0 1
71429: NOT
71430: PUSH
71431: LD_VAR 0 1
71435: PUSH
71436: LD_INT 8
71438: GREATER
71439: OR
71440: IFFALSE 71444
// exit ;
71442: GO 71631
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71444: LD_ADDR_VAR 0 4
71448: PUSH
71449: LD_INT 22
71451: PUSH
71452: LD_VAR 0 1
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 21
71463: PUSH
71464: LD_INT 3
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PPUSH
71475: CALL_OW 69
71479: ST_TO_ADDR
// if not tmp then
71480: LD_VAR 0 4
71484: NOT
71485: IFFALSE 71489
// exit ;
71487: GO 71631
// enable_addtolog := true ;
71489: LD_ADDR_OWVAR 81
71493: PUSH
71494: LD_INT 1
71496: ST_TO_ADDR
// AddToLog ( [ ) ;
71497: LD_STRING [
71499: PPUSH
71500: CALL_OW 561
// for i in tmp do
71504: LD_ADDR_VAR 0 3
71508: PUSH
71509: LD_VAR 0 4
71513: PUSH
71514: FOR_IN
71515: IFFALSE 71622
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71517: LD_STRING [
71519: PUSH
71520: LD_VAR 0 3
71524: PPUSH
71525: CALL_OW 266
71529: STR
71530: PUSH
71531: LD_STRING , 
71533: STR
71534: PUSH
71535: LD_VAR 0 3
71539: PPUSH
71540: CALL_OW 250
71544: STR
71545: PUSH
71546: LD_STRING , 
71548: STR
71549: PUSH
71550: LD_VAR 0 3
71554: PPUSH
71555: CALL_OW 251
71559: STR
71560: PUSH
71561: LD_STRING , 
71563: STR
71564: PUSH
71565: LD_VAR 0 3
71569: PPUSH
71570: CALL_OW 254
71574: STR
71575: PUSH
71576: LD_STRING , 
71578: STR
71579: PUSH
71580: LD_VAR 0 3
71584: PPUSH
71585: LD_INT 1
71587: PPUSH
71588: CALL_OW 268
71592: STR
71593: PUSH
71594: LD_STRING , 
71596: STR
71597: PUSH
71598: LD_VAR 0 3
71602: PPUSH
71603: LD_INT 2
71605: PPUSH
71606: CALL_OW 268
71610: STR
71611: PUSH
71612: LD_STRING ],
71614: STR
71615: PPUSH
71616: CALL_OW 561
// end ;
71620: GO 71514
71622: POP
71623: POP
// AddToLog ( ]; ) ;
71624: LD_STRING ];
71626: PPUSH
71627: CALL_OW 561
// end ;
71631: LD_VAR 0 2
71635: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71636: LD_INT 0
71638: PPUSH
71639: PPUSH
71640: PPUSH
71641: PPUSH
71642: PPUSH
// if not area or not rate or not max then
71643: LD_VAR 0 1
71647: NOT
71648: PUSH
71649: LD_VAR 0 2
71653: NOT
71654: OR
71655: PUSH
71656: LD_VAR 0 4
71660: NOT
71661: OR
71662: IFFALSE 71666
// exit ;
71664: GO 71858
// while 1 do
71666: LD_INT 1
71668: IFFALSE 71858
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71670: LD_ADDR_VAR 0 9
71674: PUSH
71675: LD_VAR 0 1
71679: PPUSH
71680: LD_INT 1
71682: PPUSH
71683: CALL_OW 287
71687: PUSH
71688: LD_INT 10
71690: MUL
71691: ST_TO_ADDR
// r := rate / 10 ;
71692: LD_ADDR_VAR 0 7
71696: PUSH
71697: LD_VAR 0 2
71701: PUSH
71702: LD_INT 10
71704: DIVREAL
71705: ST_TO_ADDR
// time := 1 1$00 ;
71706: LD_ADDR_VAR 0 8
71710: PUSH
71711: LD_INT 2100
71713: ST_TO_ADDR
// if amount < min then
71714: LD_VAR 0 9
71718: PUSH
71719: LD_VAR 0 3
71723: LESS
71724: IFFALSE 71742
// r := r * 2 else
71726: LD_ADDR_VAR 0 7
71730: PUSH
71731: LD_VAR 0 7
71735: PUSH
71736: LD_INT 2
71738: MUL
71739: ST_TO_ADDR
71740: GO 71768
// if amount > max then
71742: LD_VAR 0 9
71746: PUSH
71747: LD_VAR 0 4
71751: GREATER
71752: IFFALSE 71768
// r := r / 2 ;
71754: LD_ADDR_VAR 0 7
71758: PUSH
71759: LD_VAR 0 7
71763: PUSH
71764: LD_INT 2
71766: DIVREAL
71767: ST_TO_ADDR
// time := time / r ;
71768: LD_ADDR_VAR 0 8
71772: PUSH
71773: LD_VAR 0 8
71777: PUSH
71778: LD_VAR 0 7
71782: DIVREAL
71783: ST_TO_ADDR
// if time < 0 then
71784: LD_VAR 0 8
71788: PUSH
71789: LD_INT 0
71791: LESS
71792: IFFALSE 71809
// time := time * - 1 ;
71794: LD_ADDR_VAR 0 8
71798: PUSH
71799: LD_VAR 0 8
71803: PUSH
71804: LD_INT 1
71806: NEG
71807: MUL
71808: ST_TO_ADDR
// wait ( time ) ;
71809: LD_VAR 0 8
71813: PPUSH
71814: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71818: LD_INT 35
71820: PPUSH
71821: LD_INT 875
71823: PPUSH
71824: CALL_OW 12
71828: PPUSH
71829: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71833: LD_INT 1
71835: PPUSH
71836: LD_INT 5
71838: PPUSH
71839: CALL_OW 12
71843: PPUSH
71844: LD_VAR 0 1
71848: PPUSH
71849: LD_INT 1
71851: PPUSH
71852: CALL_OW 55
// end ;
71856: GO 71666
// end ;
71858: LD_VAR 0 5
71862: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71863: LD_INT 0
71865: PPUSH
71866: PPUSH
71867: PPUSH
71868: PPUSH
71869: PPUSH
71870: PPUSH
71871: PPUSH
71872: PPUSH
// if not turrets or not factories then
71873: LD_VAR 0 1
71877: NOT
71878: PUSH
71879: LD_VAR 0 2
71883: NOT
71884: OR
71885: IFFALSE 71889
// exit ;
71887: GO 72196
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71889: LD_ADDR_VAR 0 10
71893: PUSH
71894: LD_INT 5
71896: PUSH
71897: LD_INT 6
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 2
71906: PUSH
71907: LD_INT 4
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 3
71916: PUSH
71917: LD_INT 5
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 24
71931: PUSH
71932: LD_INT 25
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 23
71941: PUSH
71942: LD_INT 27
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 42
71955: PUSH
71956: LD_INT 43
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 44
71965: PUSH
71966: LD_INT 46
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 45
71975: PUSH
71976: LD_INT 47
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: LIST
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: LIST
71992: ST_TO_ADDR
// result := [ ] ;
71993: LD_ADDR_VAR 0 3
71997: PUSH
71998: EMPTY
71999: ST_TO_ADDR
// for i in turrets do
72000: LD_ADDR_VAR 0 4
72004: PUSH
72005: LD_VAR 0 1
72009: PUSH
72010: FOR_IN
72011: IFFALSE 72194
// begin nat := GetNation ( i ) ;
72013: LD_ADDR_VAR 0 7
72017: PUSH
72018: LD_VAR 0 4
72022: PPUSH
72023: CALL_OW 248
72027: ST_TO_ADDR
// weapon := 0 ;
72028: LD_ADDR_VAR 0 8
72032: PUSH
72033: LD_INT 0
72035: ST_TO_ADDR
// if not nat then
72036: LD_VAR 0 7
72040: NOT
72041: IFFALSE 72045
// continue ;
72043: GO 72010
// for j in list [ nat ] do
72045: LD_ADDR_VAR 0 5
72049: PUSH
72050: LD_VAR 0 10
72054: PUSH
72055: LD_VAR 0 7
72059: ARRAY
72060: PUSH
72061: FOR_IN
72062: IFFALSE 72103
// if GetBWeapon ( i ) = j [ 1 ] then
72064: LD_VAR 0 4
72068: PPUSH
72069: CALL_OW 269
72073: PUSH
72074: LD_VAR 0 5
72078: PUSH
72079: LD_INT 1
72081: ARRAY
72082: EQUAL
72083: IFFALSE 72101
// begin weapon := j [ 2 ] ;
72085: LD_ADDR_VAR 0 8
72089: PUSH
72090: LD_VAR 0 5
72094: PUSH
72095: LD_INT 2
72097: ARRAY
72098: ST_TO_ADDR
// break ;
72099: GO 72103
// end ;
72101: GO 72061
72103: POP
72104: POP
// if not weapon then
72105: LD_VAR 0 8
72109: NOT
72110: IFFALSE 72114
// continue ;
72112: GO 72010
// for k in factories do
72114: LD_ADDR_VAR 0 6
72118: PUSH
72119: LD_VAR 0 2
72123: PUSH
72124: FOR_IN
72125: IFFALSE 72190
// begin weapons := AvailableWeaponList ( k ) ;
72127: LD_ADDR_VAR 0 9
72131: PUSH
72132: LD_VAR 0 6
72136: PPUSH
72137: CALL_OW 478
72141: ST_TO_ADDR
// if not weapons then
72142: LD_VAR 0 9
72146: NOT
72147: IFFALSE 72151
// continue ;
72149: GO 72124
// if weapon in weapons then
72151: LD_VAR 0 8
72155: PUSH
72156: LD_VAR 0 9
72160: IN
72161: IFFALSE 72188
// begin result := [ i , weapon ] ;
72163: LD_ADDR_VAR 0 3
72167: PUSH
72168: LD_VAR 0 4
72172: PUSH
72173: LD_VAR 0 8
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: ST_TO_ADDR
// exit ;
72182: POP
72183: POP
72184: POP
72185: POP
72186: GO 72196
// end ; end ;
72188: GO 72124
72190: POP
72191: POP
// end ;
72192: GO 72010
72194: POP
72195: POP
// end ;
72196: LD_VAR 0 3
72200: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72201: LD_INT 0
72203: PPUSH
// if not side or side > 8 then
72204: LD_VAR 0 3
72208: NOT
72209: PUSH
72210: LD_VAR 0 3
72214: PUSH
72215: LD_INT 8
72217: GREATER
72218: OR
72219: IFFALSE 72223
// exit ;
72221: GO 72282
// if not range then
72223: LD_VAR 0 4
72227: NOT
72228: IFFALSE 72239
// range := - 12 ;
72230: LD_ADDR_VAR 0 4
72234: PUSH
72235: LD_INT 12
72237: NEG
72238: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72239: LD_VAR 0 1
72243: PPUSH
72244: LD_VAR 0 2
72248: PPUSH
72249: LD_VAR 0 3
72253: PPUSH
72254: LD_VAR 0 4
72258: PPUSH
72259: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72263: LD_VAR 0 1
72267: PPUSH
72268: LD_VAR 0 2
72272: PPUSH
72273: LD_VAR 0 3
72277: PPUSH
72278: CALL_OW 331
// end ;
72282: LD_VAR 0 5
72286: RET
// export function Video ( mode ) ; begin
72287: LD_INT 0
72289: PPUSH
// ingame_video = mode ;
72290: LD_ADDR_OWVAR 52
72294: PUSH
72295: LD_VAR 0 1
72299: ST_TO_ADDR
// interface_hidden = mode ;
72300: LD_ADDR_OWVAR 54
72304: PUSH
72305: LD_VAR 0 1
72309: ST_TO_ADDR
// end ;
72310: LD_VAR 0 2
72314: RET
// export function Join ( array , element ) ; begin
72315: LD_INT 0
72317: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72318: LD_ADDR_VAR 0 3
72322: PUSH
72323: LD_VAR 0 1
72327: PPUSH
72328: LD_VAR 0 1
72332: PUSH
72333: LD_INT 1
72335: PLUS
72336: PPUSH
72337: LD_VAR 0 2
72341: PPUSH
72342: CALL_OW 1
72346: ST_TO_ADDR
// end ;
72347: LD_VAR 0 3
72351: RET
// export function JoinUnion ( array , element ) ; begin
72352: LD_INT 0
72354: PPUSH
// result := array union element ;
72355: LD_ADDR_VAR 0 3
72359: PUSH
72360: LD_VAR 0 1
72364: PUSH
72365: LD_VAR 0 2
72369: UNION
72370: ST_TO_ADDR
// end ;
72371: LD_VAR 0 3
72375: RET
// export function GetBehemoths ( side ) ; begin
72376: LD_INT 0
72378: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72379: LD_ADDR_VAR 0 2
72383: PUSH
72384: LD_INT 22
72386: PUSH
72387: LD_VAR 0 1
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 31
72398: PUSH
72399: LD_INT 25
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PPUSH
72410: CALL_OW 69
72414: ST_TO_ADDR
// end ;
72415: LD_VAR 0 2
72419: RET
// export function Shuffle ( array ) ; var i , index ; begin
72420: LD_INT 0
72422: PPUSH
72423: PPUSH
72424: PPUSH
// result := [ ] ;
72425: LD_ADDR_VAR 0 2
72429: PUSH
72430: EMPTY
72431: ST_TO_ADDR
// if not array then
72432: LD_VAR 0 1
72436: NOT
72437: IFFALSE 72441
// exit ;
72439: GO 72540
// Randomize ;
72441: CALL_OW 10
// for i = array downto 1 do
72445: LD_ADDR_VAR 0 3
72449: PUSH
72450: DOUBLE
72451: LD_VAR 0 1
72455: INC
72456: ST_TO_ADDR
72457: LD_INT 1
72459: PUSH
72460: FOR_DOWNTO
72461: IFFALSE 72538
// begin index := rand ( 1 , array ) ;
72463: LD_ADDR_VAR 0 4
72467: PUSH
72468: LD_INT 1
72470: PPUSH
72471: LD_VAR 0 1
72475: PPUSH
72476: CALL_OW 12
72480: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72481: LD_ADDR_VAR 0 2
72485: PUSH
72486: LD_VAR 0 2
72490: PPUSH
72491: LD_VAR 0 2
72495: PUSH
72496: LD_INT 1
72498: PLUS
72499: PPUSH
72500: LD_VAR 0 1
72504: PUSH
72505: LD_VAR 0 4
72509: ARRAY
72510: PPUSH
72511: CALL_OW 2
72515: ST_TO_ADDR
// array := Delete ( array , index ) ;
72516: LD_ADDR_VAR 0 1
72520: PUSH
72521: LD_VAR 0 1
72525: PPUSH
72526: LD_VAR 0 4
72530: PPUSH
72531: CALL_OW 3
72535: ST_TO_ADDR
// end ;
72536: GO 72460
72538: POP
72539: POP
// end ;
72540: LD_VAR 0 2
72544: RET
// export function GetBaseMaterials ( base ) ; begin
72545: LD_INT 0
72547: PPUSH
// result := [ 0 , 0 , 0 ] ;
72548: LD_ADDR_VAR 0 2
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: LD_INT 0
72558: PUSH
72559: LD_INT 0
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: LIST
72566: ST_TO_ADDR
// if not base then
72567: LD_VAR 0 1
72571: NOT
72572: IFFALSE 72576
// exit ;
72574: GO 72625
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72576: LD_ADDR_VAR 0 2
72580: PUSH
72581: LD_VAR 0 1
72585: PPUSH
72586: LD_INT 1
72588: PPUSH
72589: CALL_OW 275
72593: PUSH
72594: LD_VAR 0 1
72598: PPUSH
72599: LD_INT 2
72601: PPUSH
72602: CALL_OW 275
72606: PUSH
72607: LD_VAR 0 1
72611: PPUSH
72612: LD_INT 3
72614: PPUSH
72615: CALL_OW 275
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: ST_TO_ADDR
// end ;
72625: LD_VAR 0 2
72629: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72630: LD_INT 0
72632: PPUSH
72633: PPUSH
// result := array ;
72634: LD_ADDR_VAR 0 3
72638: PUSH
72639: LD_VAR 0 1
72643: ST_TO_ADDR
// if size > 0 then
72644: LD_VAR 0 2
72648: PUSH
72649: LD_INT 0
72651: GREATER
72652: IFFALSE 72698
// for i := array downto size do
72654: LD_ADDR_VAR 0 4
72658: PUSH
72659: DOUBLE
72660: LD_VAR 0 1
72664: INC
72665: ST_TO_ADDR
72666: LD_VAR 0 2
72670: PUSH
72671: FOR_DOWNTO
72672: IFFALSE 72696
// result := Delete ( result , result ) ;
72674: LD_ADDR_VAR 0 3
72678: PUSH
72679: LD_VAR 0 3
72683: PPUSH
72684: LD_VAR 0 3
72688: PPUSH
72689: CALL_OW 3
72693: ST_TO_ADDR
72694: GO 72671
72696: POP
72697: POP
// end ;
72698: LD_VAR 0 3
72702: RET
// export function ComExit ( unit ) ; var tmp ; begin
72703: LD_INT 0
72705: PPUSH
72706: PPUSH
// if not IsInUnit ( unit ) then
72707: LD_VAR 0 1
72711: PPUSH
72712: CALL_OW 310
72716: NOT
72717: IFFALSE 72721
// exit ;
72719: GO 72781
// tmp := IsInUnit ( unit ) ;
72721: LD_ADDR_VAR 0 3
72725: PUSH
72726: LD_VAR 0 1
72730: PPUSH
72731: CALL_OW 310
72735: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72736: LD_VAR 0 3
72740: PPUSH
72741: CALL_OW 247
72745: PUSH
72746: LD_INT 2
72748: EQUAL
72749: IFFALSE 72762
// ComExitVehicle ( unit ) else
72751: LD_VAR 0 1
72755: PPUSH
72756: CALL_OW 121
72760: GO 72771
// ComExitBuilding ( unit ) ;
72762: LD_VAR 0 1
72766: PPUSH
72767: CALL_OW 122
// result := tmp ;
72771: LD_ADDR_VAR 0 2
72775: PUSH
72776: LD_VAR 0 3
72780: ST_TO_ADDR
// end ;
72781: LD_VAR 0 2
72785: RET
// export function ResetHc ; begin
72786: LD_INT 0
72788: PPUSH
// InitHc ;
72789: CALL_OW 19
// hc_importance := 0 ;
72793: LD_ADDR_OWVAR 32
72797: PUSH
72798: LD_INT 0
72800: ST_TO_ADDR
// end ;
72801: LD_VAR 0 1
72805: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72806: LD_INT 0
72808: PPUSH
72809: PPUSH
72810: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72811: LD_ADDR_VAR 0 6
72815: PUSH
72816: LD_VAR 0 1
72820: PUSH
72821: LD_VAR 0 3
72825: PLUS
72826: PUSH
72827: LD_INT 2
72829: DIV
72830: ST_TO_ADDR
// if _x < 0 then
72831: LD_VAR 0 6
72835: PUSH
72836: LD_INT 0
72838: LESS
72839: IFFALSE 72856
// _x := _x * - 1 ;
72841: LD_ADDR_VAR 0 6
72845: PUSH
72846: LD_VAR 0 6
72850: PUSH
72851: LD_INT 1
72853: NEG
72854: MUL
72855: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72856: LD_ADDR_VAR 0 7
72860: PUSH
72861: LD_VAR 0 2
72865: PUSH
72866: LD_VAR 0 4
72870: PLUS
72871: PUSH
72872: LD_INT 2
72874: DIV
72875: ST_TO_ADDR
// if _y < 0 then
72876: LD_VAR 0 7
72880: PUSH
72881: LD_INT 0
72883: LESS
72884: IFFALSE 72901
// _y := _y * - 1 ;
72886: LD_ADDR_VAR 0 7
72890: PUSH
72891: LD_VAR 0 7
72895: PUSH
72896: LD_INT 1
72898: NEG
72899: MUL
72900: ST_TO_ADDR
// result := [ _x , _y ] ;
72901: LD_ADDR_VAR 0 5
72905: PUSH
72906: LD_VAR 0 6
72910: PUSH
72911: LD_VAR 0 7
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: ST_TO_ADDR
// end ;
72920: LD_VAR 0 5
72924: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72925: LD_INT 0
72927: PPUSH
72928: PPUSH
72929: PPUSH
72930: PPUSH
// task := GetTaskList ( unit ) ;
72931: LD_ADDR_VAR 0 7
72935: PUSH
72936: LD_VAR 0 1
72940: PPUSH
72941: CALL_OW 437
72945: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72946: LD_VAR 0 7
72950: NOT
72951: PUSH
72952: LD_VAR 0 1
72956: PPUSH
72957: LD_VAR 0 2
72961: PPUSH
72962: CALL_OW 308
72966: NOT
72967: AND
72968: IFFALSE 72972
// exit ;
72970: GO 73090
// if IsInArea ( unit , area ) then
72972: LD_VAR 0 1
72976: PPUSH
72977: LD_VAR 0 2
72981: PPUSH
72982: CALL_OW 308
72986: IFFALSE 73004
// begin ComMoveToArea ( unit , goAway ) ;
72988: LD_VAR 0 1
72992: PPUSH
72993: LD_VAR 0 3
72997: PPUSH
72998: CALL_OW 113
// exit ;
73002: GO 73090
// end ; if task [ 1 ] [ 1 ] <> M then
73004: LD_VAR 0 7
73008: PUSH
73009: LD_INT 1
73011: ARRAY
73012: PUSH
73013: LD_INT 1
73015: ARRAY
73016: PUSH
73017: LD_STRING M
73019: NONEQUAL
73020: IFFALSE 73024
// exit ;
73022: GO 73090
// x := task [ 1 ] [ 2 ] ;
73024: LD_ADDR_VAR 0 5
73028: PUSH
73029: LD_VAR 0 7
73033: PUSH
73034: LD_INT 1
73036: ARRAY
73037: PUSH
73038: LD_INT 2
73040: ARRAY
73041: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73042: LD_ADDR_VAR 0 6
73046: PUSH
73047: LD_VAR 0 7
73051: PUSH
73052: LD_INT 1
73054: ARRAY
73055: PUSH
73056: LD_INT 3
73058: ARRAY
73059: ST_TO_ADDR
// if InArea ( x , y , area ) then
73060: LD_VAR 0 5
73064: PPUSH
73065: LD_VAR 0 6
73069: PPUSH
73070: LD_VAR 0 2
73074: PPUSH
73075: CALL_OW 309
73079: IFFALSE 73090
// ComStop ( unit ) ;
73081: LD_VAR 0 1
73085: PPUSH
73086: CALL_OW 141
// end ;
73090: LD_VAR 0 4
73094: RET
// export function Abs ( value ) ; begin
73095: LD_INT 0
73097: PPUSH
// result := value ;
73098: LD_ADDR_VAR 0 2
73102: PUSH
73103: LD_VAR 0 1
73107: ST_TO_ADDR
// if value < 0 then
73108: LD_VAR 0 1
73112: PUSH
73113: LD_INT 0
73115: LESS
73116: IFFALSE 73133
// result := value * - 1 ;
73118: LD_ADDR_VAR 0 2
73122: PUSH
73123: LD_VAR 0 1
73127: PUSH
73128: LD_INT 1
73130: NEG
73131: MUL
73132: ST_TO_ADDR
// end ; end_of_file
73133: LD_VAR 0 2
73137: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73138: LD_VAR 0 1
73142: PUSH
73143: LD_INT 200
73145: DOUBLE
73146: GREATEREQUAL
73147: IFFALSE 73155
73149: LD_INT 299
73151: DOUBLE
73152: LESSEQUAL
73153: IFTRUE 73157
73155: GO 73189
73157: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73158: LD_VAR 0 1
73162: PPUSH
73163: LD_VAR 0 2
73167: PPUSH
73168: LD_VAR 0 3
73172: PPUSH
73173: LD_VAR 0 4
73177: PPUSH
73178: LD_VAR 0 5
73182: PPUSH
73183: CALL 32451 0 5
73187: GO 73266
73189: LD_INT 300
73191: DOUBLE
73192: GREATEREQUAL
73193: IFFALSE 73201
73195: LD_INT 399
73197: DOUBLE
73198: LESSEQUAL
73199: IFTRUE 73203
73201: GO 73265
73203: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73204: LD_VAR 0 1
73208: PPUSH
73209: LD_VAR 0 2
73213: PPUSH
73214: LD_VAR 0 3
73218: PPUSH
73219: LD_VAR 0 4
73223: PPUSH
73224: LD_VAR 0 5
73228: PPUSH
73229: LD_VAR 0 6
73233: PPUSH
73234: LD_VAR 0 7
73238: PPUSH
73239: LD_VAR 0 8
73243: PPUSH
73244: LD_VAR 0 9
73248: PPUSH
73249: LD_VAR 0 10
73253: PPUSH
73254: LD_VAR 0 11
73258: PPUSH
73259: CALL 30357 0 11
73263: GO 73266
73265: POP
// end ;
73266: PPOPN 11
73268: END
