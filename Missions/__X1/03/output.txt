// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareNature ;
   8: CALL 636 0 0
// PrepareArabian ;
  12: CALL 1951 0 0
// PrepareAmerican ;
  16: CALL 4904 0 0
// Action ;
  20: CALL 9440 0 0
// end ;
  24: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 02_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 02_
  43: ST_TO_ADDR
// eventAttack := 1 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// deadCounter := 0 ;
  52: LD_ADDR_EXP 8
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// gameStarted := false ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// farmerBaseReady := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// americanBaseSpoted := false ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// americanBaseCaptured := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// americanHasEscaped := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// workshopBuilded := false ;
 100: LD_ADDR_EXP 9
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// retreatAllowed := false ;
 108: LD_ADDR_EXP 10
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// allowConvoys := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// farmerCrates := 0 ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: LD_INT 63000
 147: PUSH
 148: LD_INT 52500
 150: PUSH
 151: LD_INT 46200
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// attackWave := 1 ;
 173: LD_ADDR_EXP 16
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// omarCargoCounter := [ 6 , 9 , 12 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 17
 185: PUSH
 186: LD_INT 6
 188: PUSH
 189: LD_INT 9
 191: PUSH
 192: LD_INT 12
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// vehCounter := 0 ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// convoyCounter := 0 ;
 214: LD_ADDR_EXP 19
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ibrahimInDepot := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ibrahimIsFree := false ;
 230: LD_ADDR_EXP 22
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// maxConvoys := [ 16 , 15 , 14 ] [ Difficulty ] ;
 238: LD_ADDR_EXP 23
 242: PUSH
 243: LD_INT 16
 245: PUSH
 246: LD_INT 15
 248: PUSH
 249: LD_INT 14
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PUSH
 257: LD_OWVAR 67
 261: ARRAY
 262: ST_TO_ADDR
// end ; end_of_file
 263: LD_VAR 0 1
 267: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
// if exist_mode then
 272: LD_VAR 0 2
 276: IFFALSE 301
// unit := CreateCharacter ( prefix & ident ) else
 278: LD_ADDR_VAR 0 5
 282: PUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_VAR 0 1
 292: STR
 293: PPUSH
 294: CALL_OW 34
 298: ST_TO_ADDR
 299: GO 316
// unit := NewCharacter ( ident ) ;
 301: LD_ADDR_VAR 0 5
 305: PUSH
 306: LD_VAR 0 1
 310: PPUSH
 311: CALL_OW 25
 315: ST_TO_ADDR
// result := unit ;
 316: LD_ADDR_VAR 0 4
 320: PUSH
 321: LD_VAR 0 5
 325: ST_TO_ADDR
// end ;
 326: LD_VAR 0 4
 330: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 331: LD_INT 0
 333: PPUSH
// uc_side := side ;
 334: LD_ADDR_OWVAR 20
 338: PUSH
 339: LD_VAR 0 1
 343: ST_TO_ADDR
// uc_nation := nation ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_VAR 0 2
 353: ST_TO_ADDR
// vc_chassis := chassis ;
 354: LD_ADDR_OWVAR 37
 358: PUSH
 359: LD_VAR 0 3
 363: ST_TO_ADDR
// vc_engine := engine ;
 364: LD_ADDR_OWVAR 39
 368: PUSH
 369: LD_VAR 0 4
 373: ST_TO_ADDR
// vc_control := control ;
 374: LD_ADDR_OWVAR 38
 378: PUSH
 379: LD_VAR 0 5
 383: ST_TO_ADDR
// vc_weapon := weapon ;
 384: LD_ADDR_OWVAR 40
 388: PUSH
 389: LD_VAR 0 6
 393: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 394: LD_ADDR_OWVAR 41
 398: PUSH
 399: LD_VAR 0 7
 403: ST_TO_ADDR
// result := CreateVehicle ;
 404: LD_ADDR_VAR 0 8
 408: PUSH
 409: CALL_OW 45
 413: ST_TO_ADDR
// end ;
 414: LD_VAR 0 8
 418: RET
// export function SayX ( units , ident ) ; var i ; begin
 419: LD_INT 0
 421: PPUSH
 422: PPUSH
// result := false ;
 423: LD_ADDR_VAR 0 3
 427: PUSH
 428: LD_INT 0
 430: ST_TO_ADDR
// if not units then
 431: LD_VAR 0 1
 435: NOT
 436: IFFALSE 440
// exit ;
 438: GO 494
// for i in units do
 440: LD_ADDR_VAR 0 4
 444: PUSH
 445: LD_VAR 0 1
 449: PUSH
 450: FOR_IN
 451: IFFALSE 492
// if IsOk ( i ) then
 453: LD_VAR 0 4
 457: PPUSH
 458: CALL_OW 302
 462: IFFALSE 490
// begin Say ( i , ident ) ;
 464: LD_VAR 0 4
 468: PPUSH
 469: LD_VAR 0 2
 473: PPUSH
 474: CALL_OW 88
// result := i ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_VAR 0 4
 487: ST_TO_ADDR
// break ;
 488: GO 492
// end ;
 490: GO 450
 492: POP
 493: POP
// end ;
 494: LD_VAR 0 3
 498: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 499: LD_INT 0
 501: PPUSH
 502: PPUSH
// InitUc ;
 503: CALL_OW 18
// InitHc ;
 507: CALL_OW 19
// uc_side := 0 ;
 511: LD_ADDR_OWVAR 20
 515: PUSH
 516: LD_INT 0
 518: ST_TO_ADDR
// uc_nation := 0 ;
 519: LD_ADDR_OWVAR 21
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// for i = 1 to amount do
 527: LD_ADDR_VAR 0 4
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_VAR 0 2
 541: PUSH
 542: FOR_TO
 543: IFFALSE 625
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 545: LD_ADDR_OWVAR 29
 549: PUSH
 550: LD_INT 9
 552: PPUSH
 553: LD_INT 12
 555: PPUSH
 556: CALL_OW 12
 560: PUSH
 561: LD_INT 9
 563: PPUSH
 564: LD_INT 12
 566: PPUSH
 567: CALL_OW 12
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 576: LD_ADDR_OWVAR 35
 580: PUSH
 581: LD_INT 1
 583: NEG
 584: PPUSH
 585: LD_INT 1
 587: PPUSH
 588: CALL_OW 12
 592: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 593: LD_INT 0
 595: PPUSH
 596: LD_INT 12
 598: PPUSH
 599: LD_INT 1
 601: PPUSH
 602: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 606: CALL_OW 44
 610: PPUSH
 611: LD_VAR 0 1
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 49
// end ;
 623: GO 542
 625: POP
 626: POP
// InitHc ;
 627: CALL_OW 19
// end ;
 631: LD_VAR 0 3
 635: RET
// export function PrepareNature ; var i ; begin
 636: LD_INT 0
 638: PPUSH
 639: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 640: LD_INT 2
 642: PPUSH
 643: LD_INT 4
 645: PUSH
 646: LD_INT 4
 648: PUSH
 649: LD_INT 3
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: LD_OWVAR 67
 661: ARRAY
 662: PPUSH
 663: CALL 499 0 2
// for i := 1 to 3 do
 667: LD_ADDR_VAR 0 2
 671: PUSH
 672: DOUBLE
 673: LD_INT 1
 675: DEC
 676: ST_TO_ADDR
 677: LD_INT 3
 679: PUSH
 680: FOR_TO
 681: IFFALSE 716
// begin hc_class := 21 ;
 683: LD_ADDR_OWVAR 28
 687: PUSH
 688: LD_INT 21
 690: ST_TO_ADDR
// hc_gallery :=  ;
 691: LD_ADDR_OWVAR 33
 695: PUSH
 696: LD_STRING 
 698: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 699: CALL_OW 44
 703: PPUSH
 704: LD_INT 2
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: CALL_OW 49
// end ;
 714: GO 680
 716: POP
 717: POP
// for i := 1 to 2 do
 718: LD_ADDR_VAR 0 2
 722: PUSH
 723: DOUBLE
 724: LD_INT 1
 726: DEC
 727: ST_TO_ADDR
 728: LD_INT 2
 730: PUSH
 731: FOR_TO
 732: IFFALSE 767
// begin hc_class := 18 ;
 734: LD_ADDR_OWVAR 28
 738: PUSH
 739: LD_INT 18
 741: ST_TO_ADDR
// hc_gallery :=  ;
 742: LD_ADDR_OWVAR 33
 746: PUSH
 747: LD_STRING 
 749: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 750: CALL_OW 44
 754: PPUSH
 755: LD_INT 2
 757: PPUSH
 758: LD_INT 0
 760: PPUSH
 761: CALL_OW 49
// end ;
 765: GO 731
 767: POP
 768: POP
// for i := 1 to 2 do
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: DOUBLE
 775: LD_INT 1
 777: DEC
 778: ST_TO_ADDR
 779: LD_INT 2
 781: PUSH
 782: FOR_TO
 783: IFFALSE 818
// begin hc_class := 13 ;
 785: LD_ADDR_OWVAR 28
 789: PUSH
 790: LD_INT 13
 792: ST_TO_ADDR
// hc_gallery :=  ;
 793: LD_ADDR_OWVAR 33
 797: PUSH
 798: LD_STRING 
 800: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 801: CALL_OW 44
 805: PPUSH
 806: LD_INT 2
 808: PPUSH
 809: LD_INT 0
 811: PPUSH
 812: CALL_OW 49
// end ;
 816: GO 782
 818: POP
 819: POP
// end ;
 820: LD_VAR 0 1
 824: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 825: LD_INT 0
 827: PPUSH
 828: PPUSH
 829: PPUSH
// if not observer or not unit then
 830: LD_VAR 0 1
 834: NOT
 835: PUSH
 836: LD_VAR 0 2
 840: NOT
 841: OR
 842: IFFALSE 846
// exit ;
 844: GO 894
// if not See ( GetSide ( observer ) , unit ) then
 846: LD_VAR 0 1
 850: PPUSH
 851: CALL_OW 255
 855: PPUSH
 856: LD_VAR 0 2
 860: PPUSH
 861: CALL_OW 292
 865: NOT
 866: IFFALSE 870
// exit ;
 868: GO 894
// result := GetDistUnits ( observer , unit ) < 12 ;
 870: LD_ADDR_VAR 0 3
 874: PUSH
 875: LD_VAR 0 1
 879: PPUSH
 880: LD_VAR 0 2
 884: PPUSH
 885: CALL_OW 296
 889: PUSH
 890: LD_INT 12
 892: LESS
 893: ST_TO_ADDR
// end ;
 894: LD_VAR 0 3
 898: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 899: LD_INT 0
 901: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 1
 909: ARRAY
 910: PPUSH
 911: LD_VAR 0 2
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: PPUSH
 920: CALL_OW 488
 924: PUSH
 925: LD_VAR 0 2
 929: PUSH
 930: LD_INT 1
 932: ARRAY
 933: PPUSH
 934: LD_VAR 0 2
 938: PUSH
 939: LD_INT 2
 941: ARRAY
 942: PPUSH
 943: CALL_OW 428
 947: PUSH
 948: LD_INT 0
 950: EQUAL
 951: AND
 952: IFFALSE 986
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_VAR 0 2
 963: PUSH
 964: LD_INT 1
 966: ARRAY
 967: PPUSH
 968: LD_VAR 0 2
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_VAR 0 3
 981: PPUSH
 982: CALL_OW 48
// end ;
 986: LD_VAR 0 4
 990: RET
// export function Video ( mode ) ; begin
 991: LD_INT 0
 993: PPUSH
// ingame_video = mode ;
 994: LD_ADDR_OWVAR 52
 998: PUSH
 999: LD_VAR 0 1
1003: ST_TO_ADDR
// interface_hidden = mode ;
1004: LD_ADDR_OWVAR 54
1008: PUSH
1009: LD_VAR 0 1
1013: ST_TO_ADDR
// end ;
1014: LD_VAR 0 2
1018: RET
// export function ReverseArray ( array ) ; var i ; begin
1019: LD_INT 0
1021: PPUSH
1022: PPUSH
// if not array then
1023: LD_VAR 0 1
1027: NOT
1028: IFFALSE 1032
// exit ;
1030: GO 1090
// result := [ ] ;
1032: LD_ADDR_VAR 0 2
1036: PUSH
1037: EMPTY
1038: ST_TO_ADDR
// for i := 1 to array do
1039: LD_ADDR_VAR 0 3
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_VAR 0 1
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1088
// result := Insert ( result , 1 , array [ i ] ) ;
1057: LD_ADDR_VAR 0 2
1061: PUSH
1062: LD_VAR 0 2
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_VAR 0 1
1074: PUSH
1075: LD_VAR 0 3
1079: ARRAY
1080: PPUSH
1081: CALL_OW 2
1085: ST_TO_ADDR
1086: GO 1054
1088: POP
1089: POP
// end ;
1090: LD_VAR 0 2
1094: RET
// export function ComExit ( unit ) ; begin
1095: LD_INT 0
1097: PPUSH
// result := IsInUnit ( unit ) ;
1098: LD_ADDR_VAR 0 2
1102: PUSH
1103: LD_VAR 0 1
1107: PPUSH
1108: CALL_OW 310
1112: ST_TO_ADDR
// if not result then
1113: LD_VAR 0 2
1117: NOT
1118: IFFALSE 1122
// exit ;
1120: GO 1157
// if GetType ( result ) = unit_vehicle then
1122: LD_VAR 0 2
1126: PPUSH
1127: CALL_OW 247
1131: PUSH
1132: LD_INT 2
1134: EQUAL
1135: IFFALSE 1148
// ComExitVehicle ( unit ) else
1137: LD_VAR 0 1
1141: PPUSH
1142: CALL_OW 121
1146: GO 1157
// ComExitBuilding ( unit ) ;
1148: LD_VAR 0 1
1152: PPUSH
1153: CALL_OW 122
// end ;
1157: LD_VAR 0 2
1161: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1162: LD_INT 0
1164: PPUSH
1165: PPUSH
// if not side or not nation then
1166: LD_VAR 0 1
1170: NOT
1171: PUSH
1172: LD_VAR 0 2
1176: NOT
1177: OR
1178: IFFALSE 1182
// exit ;
1180: GO 1946
// case nation of nation_american :
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 1
1189: DOUBLE
1190: EQUAL
1191: IFTRUE 1195
1193: GO 1409
1195: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: LD_INT 35
1203: PUSH
1204: LD_INT 45
1206: PUSH
1207: LD_INT 46
1209: PUSH
1210: LD_INT 47
1212: PUSH
1213: LD_INT 82
1215: PUSH
1216: LD_INT 83
1218: PUSH
1219: LD_INT 84
1221: PUSH
1222: LD_INT 85
1224: PUSH
1225: LD_INT 86
1227: PUSH
1228: LD_INT 1
1230: PUSH
1231: LD_INT 2
1233: PUSH
1234: LD_INT 6
1236: PUSH
1237: LD_INT 15
1239: PUSH
1240: LD_INT 16
1242: PUSH
1243: LD_INT 7
1245: PUSH
1246: LD_INT 12
1248: PUSH
1249: LD_INT 13
1251: PUSH
1252: LD_INT 10
1254: PUSH
1255: LD_INT 14
1257: PUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 22
1266: PUSH
1267: LD_INT 25
1269: PUSH
1270: LD_INT 32
1272: PUSH
1273: LD_INT 27
1275: PUSH
1276: LD_INT 36
1278: PUSH
1279: LD_INT 69
1281: PUSH
1282: LD_INT 39
1284: PUSH
1285: LD_INT 34
1287: PUSH
1288: LD_INT 40
1290: PUSH
1291: LD_INT 48
1293: PUSH
1294: LD_INT 49
1296: PUSH
1297: LD_INT 50
1299: PUSH
1300: LD_INT 51
1302: PUSH
1303: LD_INT 52
1305: PUSH
1306: LD_INT 53
1308: PUSH
1309: LD_INT 54
1311: PUSH
1312: LD_INT 55
1314: PUSH
1315: LD_INT 56
1317: PUSH
1318: LD_INT 57
1320: PUSH
1321: LD_INT 58
1323: PUSH
1324: LD_INT 59
1326: PUSH
1327: LD_INT 60
1329: PUSH
1330: LD_INT 61
1332: PUSH
1333: LD_INT 62
1335: PUSH
1336: LD_INT 80
1338: PUSH
1339: LD_INT 82
1341: PUSH
1342: LD_INT 83
1344: PUSH
1345: LD_INT 84
1347: PUSH
1348: LD_INT 85
1350: PUSH
1351: LD_INT 86
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: ST_TO_ADDR
1407: GO 1870
1409: LD_INT 2
1411: DOUBLE
1412: EQUAL
1413: IFTRUE 1417
1415: GO 1639
1417: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1418: LD_ADDR_VAR 0 4
1422: PUSH
1423: LD_INT 35
1425: PUSH
1426: LD_INT 45
1428: PUSH
1429: LD_INT 46
1431: PUSH
1432: LD_INT 47
1434: PUSH
1435: LD_INT 82
1437: PUSH
1438: LD_INT 83
1440: PUSH
1441: LD_INT 84
1443: PUSH
1444: LD_INT 85
1446: PUSH
1447: LD_INT 87
1449: PUSH
1450: LD_INT 70
1452: PUSH
1453: LD_INT 1
1455: PUSH
1456: LD_INT 11
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: LD_INT 4
1464: PUSH
1465: LD_INT 5
1467: PUSH
1468: LD_INT 6
1470: PUSH
1471: LD_INT 15
1473: PUSH
1474: LD_INT 18
1476: PUSH
1477: LD_INT 7
1479: PUSH
1480: LD_INT 17
1482: PUSH
1483: LD_INT 8
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: LD_INT 21
1491: PUSH
1492: LD_INT 22
1494: PUSH
1495: LD_INT 72
1497: PUSH
1498: LD_INT 26
1500: PUSH
1501: LD_INT 69
1503: PUSH
1504: LD_INT 39
1506: PUSH
1507: LD_INT 40
1509: PUSH
1510: LD_INT 41
1512: PUSH
1513: LD_INT 42
1515: PUSH
1516: LD_INT 43
1518: PUSH
1519: LD_INT 48
1521: PUSH
1522: LD_INT 49
1524: PUSH
1525: LD_INT 50
1527: PUSH
1528: LD_INT 51
1530: PUSH
1531: LD_INT 52
1533: PUSH
1534: LD_INT 53
1536: PUSH
1537: LD_INT 54
1539: PUSH
1540: LD_INT 55
1542: PUSH
1543: LD_INT 56
1545: PUSH
1546: LD_INT 60
1548: PUSH
1549: LD_INT 61
1551: PUSH
1552: LD_INT 62
1554: PUSH
1555: LD_INT 66
1557: PUSH
1558: LD_INT 67
1560: PUSH
1561: LD_INT 68
1563: PUSH
1564: LD_INT 81
1566: PUSH
1567: LD_INT 82
1569: PUSH
1570: LD_INT 83
1572: PUSH
1573: LD_INT 84
1575: PUSH
1576: LD_INT 85
1578: PUSH
1579: LD_INT 87
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: ST_TO_ADDR
1637: GO 1870
1639: LD_INT 3
1641: DOUBLE
1642: EQUAL
1643: IFTRUE 1647
1645: GO 1869
1647: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_INT 46
1655: PUSH
1656: LD_INT 47
1658: PUSH
1659: LD_INT 1
1661: PUSH
1662: LD_INT 2
1664: PUSH
1665: LD_INT 82
1667: PUSH
1668: LD_INT 83
1670: PUSH
1671: LD_INT 84
1673: PUSH
1674: LD_INT 85
1676: PUSH
1677: LD_INT 86
1679: PUSH
1680: LD_INT 11
1682: PUSH
1683: LD_INT 9
1685: PUSH
1686: LD_INT 20
1688: PUSH
1689: LD_INT 19
1691: PUSH
1692: LD_INT 21
1694: PUSH
1695: LD_INT 24
1697: PUSH
1698: LD_INT 22
1700: PUSH
1701: LD_INT 25
1703: PUSH
1704: LD_INT 28
1706: PUSH
1707: LD_INT 29
1709: PUSH
1710: LD_INT 30
1712: PUSH
1713: LD_INT 31
1715: PUSH
1716: LD_INT 37
1718: PUSH
1719: LD_INT 38
1721: PUSH
1722: LD_INT 32
1724: PUSH
1725: LD_INT 27
1727: PUSH
1728: LD_INT 33
1730: PUSH
1731: LD_INT 69
1733: PUSH
1734: LD_INT 39
1736: PUSH
1737: LD_INT 34
1739: PUSH
1740: LD_INT 40
1742: PUSH
1743: LD_INT 71
1745: PUSH
1746: LD_INT 23
1748: PUSH
1749: LD_INT 44
1751: PUSH
1752: LD_INT 48
1754: PUSH
1755: LD_INT 49
1757: PUSH
1758: LD_INT 50
1760: PUSH
1761: LD_INT 51
1763: PUSH
1764: LD_INT 52
1766: PUSH
1767: LD_INT 53
1769: PUSH
1770: LD_INT 54
1772: PUSH
1773: LD_INT 55
1775: PUSH
1776: LD_INT 56
1778: PUSH
1779: LD_INT 57
1781: PUSH
1782: LD_INT 58
1784: PUSH
1785: LD_INT 59
1787: PUSH
1788: LD_INT 63
1790: PUSH
1791: LD_INT 64
1793: PUSH
1794: LD_INT 65
1796: PUSH
1797: LD_INT 82
1799: PUSH
1800: LD_INT 83
1802: PUSH
1803: LD_INT 84
1805: PUSH
1806: LD_INT 85
1808: PUSH
1809: LD_INT 86
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: ST_TO_ADDR
1867: GO 1870
1869: POP
// if state > - 1 and state < 3 then
1870: LD_VAR 0 3
1874: PUSH
1875: LD_INT 1
1877: NEG
1878: GREATER
1879: PUSH
1880: LD_VAR 0 3
1884: PUSH
1885: LD_INT 3
1887: LESS
1888: AND
1889: IFFALSE 1946
// for i in result do
1891: LD_ADDR_VAR 0 5
1895: PUSH
1896: LD_VAR 0 4
1900: PUSH
1901: FOR_IN
1902: IFFALSE 1944
// if GetTech ( i , side ) <> state then
1904: LD_VAR 0 5
1908: PPUSH
1909: LD_VAR 0 1
1913: PPUSH
1914: CALL_OW 321
1918: PUSH
1919: LD_VAR 0 3
1923: NONEQUAL
1924: IFFALSE 1942
// result := result diff i ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: LD_VAR 0 4
1935: PUSH
1936: LD_VAR 0 5
1940: DIFF
1941: ST_TO_ADDR
1942: GO 1901
1944: POP
1945: POP
// end ; end_of_file
1946: LD_VAR 0 4
1950: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1951: LD_INT 0
1953: PPUSH
1954: PPUSH
1955: PPUSH
1956: PPUSH
// uc_side := 5 ;
1957: LD_ADDR_OWVAR 20
1961: PUSH
1962: LD_INT 5
1964: ST_TO_ADDR
// uc_nation := 2 ;
1965: LD_ADDR_OWVAR 21
1969: PUSH
1970: LD_INT 2
1972: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1973: LD_INT 5
1975: PPUSH
1976: CALL_OW 274
1980: PPUSH
1981: LD_INT 1
1983: PPUSH
1984: LD_INT 45
1986: PPUSH
1987: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1991: LD_ADDR_EXP 32
1995: PUSH
1996: LD_STRING Farmer
1998: PPUSH
1999: LD_INT 0
2001: PPUSH
2002: LD_STRING 
2004: PPUSH
2005: CALL 268 0 3
2009: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2010: LD_ADDR_EXP 33
2014: PUSH
2015: LD_STRING Omar
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: LD_STRING 
2023: PPUSH
2024: CALL 268 0 3
2028: ST_TO_ADDR
// omarSquad := [ ] ;
2029: LD_ADDR_EXP 36
2033: PUSH
2034: EMPTY
2035: ST_TO_ADDR
// heikeSquad := [ ] ;
2036: LD_ADDR_EXP 37
2040: PUSH
2041: EMPTY
2042: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
2043: LD_ADDR_EXP 38
2047: PUSH
2048: EMPTY
2049: ST_TO_ADDR
// omarCargo := [ ] ;
2050: LD_ADDR_EXP 39
2054: PUSH
2055: EMPTY
2056: ST_TO_ADDR
// for i := 1 to 5 do
2057: LD_ADDR_VAR 0 2
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2229
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 1
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: LD_INT 2
2084: PUSH
2085: LD_INT 1
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_VAR 0 2
2102: ARRAY
2103: PPUSH
2104: LD_INT 3
2106: PPUSH
2107: CALL_OW 380
// un := CreateHuman ;
2111: LD_ADDR_VAR 0 3
2115: PUSH
2116: CALL_OW 44
2120: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2121: LD_ADDR_EXP 36
2125: PUSH
2126: LD_EXP 36
2130: PUSH
2131: LD_VAR 0 3
2135: UNION
2136: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
2137: LD_VAR 0 3
2141: PPUSH
2142: LD_INT 87
2144: PUSH
2145: LD_INT 30
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 91
2154: PUSH
2155: LD_INT 32
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 82
2164: PUSH
2165: LD_INT 15
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 79
2174: PUSH
2175: LD_INT 14
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: LD_INT 82
2184: PUSH
2185: LD_INT 13
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_VAR 0 2
2203: ARRAY
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL 899 0 3
// ComTurnXY ( un , 93 , 21 ) ;
2212: LD_VAR 0 3
2216: PPUSH
2217: LD_INT 93
2219: PPUSH
2220: LD_INT 21
2222: PPUSH
2223: CALL_OW 118
// end ;
2227: GO 2070
2229: POP
2230: POP
// uc_side := 2 ;
2231: LD_ADDR_OWVAR 20
2235: PUSH
2236: LD_INT 2
2238: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2239: LD_ADDR_EXP 24
2243: PUSH
2244: LD_STRING Heike
2246: PPUSH
2247: LD_EXP 1
2251: NOT
2252: PPUSH
2253: LD_EXP 2
2257: PPUSH
2258: CALL 268 0 3
2262: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2263: LD_ADDR_EXP 28
2267: PUSH
2268: LD_STRING Aviradze
2270: PPUSH
2271: LD_EXP 1
2275: NOT
2276: PPUSH
2277: LD_EXP 2
2281: PPUSH
2282: CALL 268 0 3
2286: ST_TO_ADDR
// tmp := [ ] ;
2287: LD_ADDR_VAR 0 4
2291: PUSH
2292: EMPTY
2293: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2294: LD_ADDR_EXP 25
2298: PUSH
2299: LD_STRING Givi
2301: PPUSH
2302: LD_EXP 1
2306: NOT
2307: PPUSH
2308: LD_EXP 2
2312: PPUSH
2313: CALL 268 0 3
2317: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2318: LD_ADDR_EXP 26
2322: PUSH
2323: LD_STRING Mike
2325: PPUSH
2326: LD_EXP 1
2330: NOT
2331: PPUSH
2332: LD_EXP 2
2336: PPUSH
2337: CALL 268 0 3
2341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2342: LD_ADDR_EXP 27
2346: PUSH
2347: LD_STRING Kamil
2349: PPUSH
2350: LD_EXP 1
2354: NOT
2355: PPUSH
2356: LD_EXP 2
2360: PPUSH
2361: CALL 268 0 3
2365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2366: LD_ADDR_EXP 29
2370: PUSH
2371: LD_STRING Kaia
2373: PPUSH
2374: LD_EXP 1
2378: NOT
2379: PPUSH
2380: LD_EXP 2
2384: PPUSH
2385: CALL 268 0 3
2389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2390: LD_ADDR_EXP 30
2394: PUSH
2395: LD_STRING Sophia
2397: PPUSH
2398: LD_EXP 1
2402: NOT
2403: PPUSH
2404: LD_EXP 2
2408: PPUSH
2409: CALL 268 0 3
2413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2414: LD_ADDR_EXP 31
2418: PUSH
2419: LD_STRING Markov
2421: PPUSH
2422: LD_EXP 1
2426: NOT
2427: PPUSH
2428: LD_EXP 2
2432: PPUSH
2433: CALL 268 0 3
2437: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
2438: LD_ADDR_EXP 38
2442: PUSH
2443: LD_STRING 02_others
2445: PPUSH
2446: CALL_OW 31
2450: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
2451: LD_ADDR_VAR 0 4
2455: PUSH
2456: LD_EXP 26
2460: PUSH
2461: LD_EXP 27
2465: PUSH
2466: LD_EXP 29
2470: PUSH
2471: LD_EXP 30
2475: PUSH
2476: LD_EXP 31
2480: PUSH
2481: LD_EXP 25
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: PUSH
2494: LD_EXP 38
2498: ADD
2499: PUSH
2500: LD_INT 0
2502: DIFF
2503: ST_TO_ADDR
// heikeSquad := tmp ;
2504: LD_ADDR_EXP 37
2508: PUSH
2509: LD_VAR 0 4
2513: ST_TO_ADDR
// uc_nation := 0 ;
2514: LD_ADDR_OWVAR 21
2518: PUSH
2519: LD_INT 0
2521: ST_TO_ADDR
// hc_class := class_apeman ;
2522: LD_ADDR_OWVAR 28
2526: PUSH
2527: LD_INT 12
2529: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2530: LD_ADDR_OWVAR 31
2534: PUSH
2535: LD_INT 0
2537: PUSH
2538: LD_INT 0
2540: PUSH
2541: LD_INT 0
2543: PUSH
2544: LD_INT 0
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: ST_TO_ADDR
// hc_gallery :=  ;
2553: LD_ADDR_OWVAR 33
2557: PUSH
2558: LD_STRING 
2560: ST_TO_ADDR
// hc_name :=  ;
2561: LD_ADDR_OWVAR 26
2565: PUSH
2566: LD_STRING 
2568: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
2569: LD_ADDR_VAR 0 4
2573: PUSH
2574: LD_VAR 0 4
2578: PUSH
2579: CALL_OW 44
2583: UNION
2584: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
2585: LD_EXP 24
2589: PPUSH
2590: LD_INT 92
2592: PPUSH
2593: LD_INT 17
2595: PPUSH
2596: LD_INT 0
2598: PPUSH
2599: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
2603: LD_EXP 32
2607: PPUSH
2608: LD_INT 95
2610: PPUSH
2611: LD_INT 19
2613: PPUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
2621: LD_EXP 33
2625: PPUSH
2626: LD_INT 89
2628: PPUSH
2629: LD_INT 25
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
2639: LD_EXP 28
2643: PPUSH
2644: LD_INT 92
2646: PPUSH
2647: LD_INT 27
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
2657: LD_EXP 33
2661: PPUSH
2662: LD_EXP 28
2666: PPUSH
2667: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
2671: LD_EXP 28
2675: PPUSH
2676: LD_EXP 33
2680: PPUSH
2681: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
2685: LD_EXP 24
2689: PUSH
2690: LD_EXP 32
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: LD_EXP 33
2703: PPUSH
2704: CALL_OW 119
// if tmp then
2708: LD_VAR 0 4
2712: IFFALSE 2766
// for i in tmp do
2714: LD_ADDR_VAR 0 2
2718: PUSH
2719: LD_VAR 0 4
2723: PUSH
2724: FOR_IN
2725: IFFALSE 2764
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
2727: LD_VAR 0 2
2731: PPUSH
2732: LD_INT 94
2734: PPUSH
2735: LD_INT 14
2737: PPUSH
2738: LD_INT 4
2740: PPUSH
2741: LD_INT 0
2743: PPUSH
2744: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
2748: LD_VAR 0 2
2752: PPUSH
2753: LD_EXP 24
2757: PPUSH
2758: CALL_OW 119
// end ;
2762: GO 2724
2764: POP
2765: POP
// farmerSquad := [ ] ;
2766: LD_ADDR_EXP 35
2770: PUSH
2771: EMPTY
2772: ST_TO_ADDR
// uc_side := 5 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 5
2780: ST_TO_ADDR
// uc_nation := 2 ;
2781: LD_ADDR_OWVAR 21
2785: PUSH
2786: LD_INT 2
2788: ST_TO_ADDR
// for i := 1 to 4 do
2789: LD_ADDR_VAR 0 2
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_INT 4
2801: PUSH
2802: FOR_TO
2803: IFFALSE 2881
// begin PrepareHuman ( false , 1 , 2 ) ;
2805: LD_INT 0
2807: PPUSH
2808: LD_INT 1
2810: PPUSH
2811: LD_INT 2
2813: PPUSH
2814: CALL_OW 380
// un := CreateHuman ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: CALL_OW 44
2827: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
2828: LD_VAR 0 3
2832: PPUSH
2833: LD_INT 102
2835: PPUSH
2836: LD_INT 27
2838: PPUSH
2839: LD_INT 4
2841: PPUSH
2842: LD_INT 0
2844: PPUSH
2845: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2849: LD_ADDR_EXP 35
2853: PUSH
2854: LD_EXP 35
2858: PUSH
2859: LD_VAR 0 3
2863: UNION
2864: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2865: LD_VAR 0 3
2869: PPUSH
2870: LD_EXP 33
2874: PPUSH
2875: CALL_OW 119
// end ;
2879: GO 2802
2881: POP
2882: POP
// PrepareHuman ( false , 2 , 2 ) ;
2883: LD_INT 0
2885: PPUSH
2886: LD_INT 2
2888: PPUSH
2889: LD_INT 2
2891: PPUSH
2892: CALL_OW 380
// un := CreateHuman ;
2896: LD_ADDR_VAR 0 3
2900: PUSH
2901: CALL_OW 44
2905: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: LD_INT 108
2913: PPUSH
2914: LD_INT 62
2916: PPUSH
2917: LD_INT 2
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2927: LD_ADDR_EXP 35
2931: PUSH
2932: LD_EXP 35
2936: PUSH
2937: LD_VAR 0 3
2941: UNION
2942: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_EXP 33
2952: PPUSH
2953: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2957: LD_INT 109
2959: PPUSH
2960: LD_INT 63
2962: PPUSH
2963: LD_INT 2
2965: PPUSH
2966: LD_INT 15
2968: NEG
2969: PPUSH
2970: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2974: LD_INT 109
2976: PPUSH
2977: LD_INT 63
2979: PPUSH
2980: LD_INT 2
2982: PPUSH
2983: CALL_OW 331
// end ;
2987: LD_VAR 0 1
2991: RET
// export function PrepareIbrahim ( x , y ) ; begin
2992: LD_INT 0
2994: PPUSH
// uc_side := 6 ;
2995: LD_ADDR_OWVAR 20
2999: PUSH
3000: LD_INT 6
3002: ST_TO_ADDR
// uc_nation := 3 ;
3003: LD_ADDR_OWVAR 21
3007: PUSH
3008: LD_INT 3
3010: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3011: LD_ADDR_EXP 34
3015: PUSH
3016: LD_STRING IbrahimRu
3018: PPUSH
3019: LD_INT 0
3021: PPUSH
3022: LD_STRING 
3024: PPUSH
3025: CALL 268 0 3
3029: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
3030: LD_EXP 34
3034: PPUSH
3035: LD_VAR 0 1
3039: PPUSH
3040: LD_VAR 0 2
3044: PPUSH
3045: LD_INT 8
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: CALL_OW 50
// end ;
3055: LD_VAR 0 3
3059: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
3060: LD_EXP 33
3064: PUSH
3065: LD_EXP 36
3069: ADD
3070: PPUSH
3071: LD_INT 95
3073: PUSH
3074: LD_INT 3
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: PPUSH
3081: CALL_OW 72
3085: IFFALSE 3141
3087: GO 3089
3089: DISABLE
3090: LD_INT 0
3092: PPUSH
// begin enable ;
3093: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
3094: LD_ADDR_VAR 0 1
3098: PUSH
3099: LD_EXP 33
3103: PUSH
3104: LD_EXP 36
3108: ADD
3109: PPUSH
3110: LD_INT 95
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 72
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3139
// RemoveUnit ( i ) ;
3128: LD_VAR 0 1
3132: PPUSH
3133: CALL_OW 64
3137: GO 3125
3139: POP
3140: POP
// end ;
3141: PPOPN 1
3143: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
3144: LD_EXP 3
3148: PUSH
3149: LD_EXP 32
3153: PPUSH
3154: LD_INT 4
3156: PPUSH
3157: CALL_OW 308
3161: AND
3162: IFFALSE 3945
3164: GO 3166
3166: DISABLE
3167: LD_INT 0
3169: PPUSH
3170: PPUSH
3171: PPUSH
3172: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
3173: LD_EXP 32
3177: PPUSH
3178: LD_INT 110
3180: PPUSH
3181: LD_INT 60
3183: PPUSH
3184: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
3188: LD_EXP 32
3192: PPUSH
3193: LD_INT 110
3195: PPUSH
3196: LD_INT 61
3198: PPUSH
3199: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: LD_EXP 35
3212: PPUSH
3213: LD_INT 25
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PPUSH
3223: CALL_OW 72
3227: ST_TO_ADDR
// if tmp then
3228: LD_VAR 0 2
3232: IFFALSE 3326
// begin for i := 1 to 2 do
3234: LD_ADDR_VAR 0 1
3238: PUSH
3239: DOUBLE
3240: LD_INT 1
3242: DEC
3243: ST_TO_ADDR
3244: LD_INT 2
3246: PUSH
3247: FOR_TO
3248: IFFALSE 3324
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
3250: LD_VAR 0 2
3254: PUSH
3255: LD_VAR 0 1
3259: ARRAY
3260: PPUSH
3261: LD_INT 5
3263: PPUSH
3264: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
3268: LD_VAR 0 2
3272: PUSH
3273: LD_VAR 0 1
3277: ARRAY
3278: PPUSH
3279: LD_INT 2
3281: PPUSH
3282: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
3286: LD_VAR 0 2
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PPUSH
3297: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
3301: LD_VAR 0 2
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 107
3314: PPUSH
3315: LD_INT 66
3317: PPUSH
3318: CALL_OW 171
// end ;
3322: GO 3247
3324: POP
3325: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: LD_EXP 35
3335: PPUSH
3336: LD_INT 25
3338: PUSH
3339: LD_INT 2
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PPUSH
3346: CALL_OW 72
3350: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3351: LD_INT 35
3353: PPUSH
3354: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3358: LD_ADDR_VAR 0 2
3362: PUSH
3363: LD_EXP 35
3367: PPUSH
3368: LD_INT 25
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 72
3382: ST_TO_ADDR
// until tmp ;
3383: LD_VAR 0 2
3387: IFFALSE 3351
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
3389: LD_VAR 0 2
3393: PPUSH
3394: LD_INT 31
3396: PPUSH
3397: LD_INT 102
3399: PPUSH
3400: LD_INT 69
3402: PPUSH
3403: LD_INT 2
3405: PPUSH
3406: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
3410: LD_INT 35
3412: PPUSH
3413: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3417: LD_EXP 35
3421: PPUSH
3422: LD_INT 3
3424: PUSH
3425: LD_INT 60
3427: PUSH
3428: EMPTY
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 25
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 72
3453: IFFALSE 3410
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3455: LD_ADDR_VAR 0 2
3459: PUSH
3460: LD_EXP 35
3464: PPUSH
3465: LD_INT 25
3467: PUSH
3468: LD_INT 2
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 72
3479: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
3480: LD_VAR 0 2
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 116
3490: PPUSH
3491: LD_INT 70
3493: PPUSH
3494: LD_INT 5
3496: PPUSH
3497: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
3501: LD_VAR 0 2
3505: PPUSH
3506: LD_INT 31
3508: PPUSH
3509: LD_INT 108
3511: PPUSH
3512: LD_INT 50
3514: PPUSH
3515: LD_INT 2
3517: PPUSH
3518: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
3522: LD_INT 35
3524: PPUSH
3525: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
3529: LD_INT 22
3531: PUSH
3532: LD_INT 5
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PUSH
3539: LD_INT 30
3541: PUSH
3542: LD_INT 4
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 3
3551: PUSH
3552: LD_INT 57
3554: PUSH
3555: EMPTY
3556: LIST
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 69
3571: IFFALSE 3522
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
3573: LD_ADDR_VAR 0 3
3577: PUSH
3578: LD_INT 22
3580: PUSH
3581: LD_INT 5
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 30
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 3
3600: PUSH
3601: LD_INT 57
3603: PUSH
3604: EMPTY
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: PUSH
3621: LD_INT 1
3623: ARRAY
3624: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3625: LD_ADDR_VAR 0 2
3629: PUSH
3630: LD_EXP 35
3634: PPUSH
3635: LD_INT 25
3637: PUSH
3638: LD_INT 1
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PPUSH
3645: CALL_OW 72
3649: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
3650: LD_VAR 0 2
3654: PPUSH
3655: LD_VAR 0 3
3659: PPUSH
3660: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3664: LD_INT 35
3666: PPUSH
3667: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
3671: LD_INT 22
3673: PUSH
3674: LD_INT 5
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: PUSH
3681: LD_INT 30
3683: PUSH
3684: LD_INT 31
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 3
3693: PUSH
3694: LD_INT 57
3696: PUSH
3697: EMPTY
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: PPUSH
3709: CALL_OW 69
3713: PUSH
3714: LD_INT 2
3716: GREATEREQUAL
3717: IFFALSE 3664
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3719: LD_ADDR_VAR 0 2
3723: PUSH
3724: LD_EXP 35
3728: PPUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 2
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PPUSH
3739: CALL_OW 72
3743: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
3744: LD_VAR 0 2
3748: PUSH
3749: LD_INT 1
3751: ARRAY
3752: PPUSH
3753: LD_INT 5
3755: PPUSH
3756: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
3760: LD_VAR 0 2
3764: PUSH
3765: LD_INT 2
3767: ARRAY
3768: PUSH
3769: LD_VAR 0 2
3773: PUSH
3774: LD_INT 3
3776: ARRAY
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PPUSH
3782: LD_VAR 0 3
3786: PPUSH
3787: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
3791: LD_VAR 0 2
3795: PUSH
3796: LD_INT 2
3798: ARRAY
3799: PUSH
3800: LD_VAR 0 2
3804: PUSH
3805: LD_INT 3
3807: ARRAY
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: PPUSH
3813: LD_INT 1
3815: PPUSH
3816: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
3820: LD_VAR 0 2
3824: PUSH
3825: LD_INT 2
3827: ARRAY
3828: PUSH
3829: LD_VAR 0 2
3833: PUSH
3834: LD_INT 3
3836: ARRAY
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3846: LD_ADDR_VAR 0 4
3850: PUSH
3851: LD_INT 22
3853: PUSH
3854: LD_INT 5
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 30
3863: PUSH
3864: LD_INT 31
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PPUSH
3875: CALL_OW 69
3879: ST_TO_ADDR
// for i := 1 to 2 do
3880: LD_ADDR_VAR 0 1
3884: PUSH
3885: DOUBLE
3886: LD_INT 1
3888: DEC
3889: ST_TO_ADDR
3890: LD_INT 2
3892: PUSH
3893: FOR_TO
3894: IFFALSE 3928
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3896: LD_VAR 0 2
3900: PUSH
3901: LD_VAR 0 1
3905: PUSH
3906: LD_INT 1
3908: PLUS
3909: ARRAY
3910: PPUSH
3911: LD_VAR 0 4
3915: PUSH
3916: LD_VAR 0 1
3920: ARRAY
3921: PPUSH
3922: CALL_OW 180
3926: GO 3893
3928: POP
3929: POP
// wait ( 1 1$00 ) ;
3930: LD_INT 2100
3932: PPUSH
3933: CALL_OW 67
// farmerBaseReady := true ;
3937: LD_ADDR_EXP 4
3941: PUSH
3942: LD_INT 1
3944: ST_TO_ADDR
// end ;
3945: PPOPN 4
3947: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3948: LD_EXP 4
3952: PUSH
3953: LD_EXP 10
3957: NOT
3958: AND
3959: IFFALSE 4454
3961: GO 3963
3963: DISABLE
3964: LD_INT 0
3966: PPUSH
3967: PPUSH
3968: PPUSH
3969: PPUSH
3970: PPUSH
// begin enable ;
3971: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3972: LD_ADDR_VAR 0 3
3976: PUSH
3977: LD_EXP 35
3981: PPUSH
3982: LD_INT 25
3984: PUSH
3985: LD_INT 1
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PPUSH
3992: CALL_OW 72
3996: PUSH
3997: LD_EXP 32
4001: ADD
4002: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
4003: LD_ADDR_VAR 0 2
4007: PUSH
4008: LD_EXP 35
4012: PPUSH
4013: LD_INT 25
4015: PUSH
4016: LD_INT 2
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PPUSH
4023: CALL_OW 72
4027: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4028: LD_ADDR_VAR 0 5
4032: PUSH
4033: LD_INT 22
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 21
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: LD_INT 3
4055: PUSH
4056: LD_INT 24
4058: PUSH
4059: LD_INT 1000
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: PPUSH
4075: CALL_OW 69
4079: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
4080: LD_ADDR_VAR 0 4
4084: PUSH
4085: LD_INT 22
4087: PUSH
4088: LD_INT 5
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_INT 30
4097: PUSH
4098: LD_INT 4
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 69
4113: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
4114: LD_VAR 0 4
4118: PUSH
4119: LD_INT 1
4121: ARRAY
4122: PPUSH
4123: CALL_OW 302
4127: IFFALSE 4191
// for i in sol do
4129: LD_ADDR_VAR 0 1
4133: PUSH
4134: LD_VAR 0 3
4138: PUSH
4139: FOR_IN
4140: IFFALSE 4189
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
4142: LD_VAR 0 1
4146: PPUSH
4147: CALL_OW 256
4151: PUSH
4152: LD_INT 999
4154: LESS
4155: PUSH
4156: LD_VAR 0 1
4160: PPUSH
4161: CALL_OW 310
4165: NOT
4166: AND
4167: IFFALSE 4187
// ComEnterUnit ( i , arm [ 1 ] ) ;
4169: LD_VAR 0 1
4173: PPUSH
4174: LD_VAR 0 4
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: CALL_OW 120
4187: GO 4139
4189: POP
4190: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
4191: LD_VAR 0 2
4195: NOT
4196: PUSH
4197: LD_INT 22
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: NOT
4226: AND
4227: IFFALSE 4319
// begin uc_side := 5 ;
4229: LD_ADDR_OWVAR 20
4233: PUSH
4234: LD_INT 5
4236: ST_TO_ADDR
// uc_nation := 2 ;
4237: LD_ADDR_OWVAR 21
4241: PUSH
4242: LD_INT 2
4244: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
4245: LD_INT 0
4247: PPUSH
4248: LD_INT 2
4250: PPUSH
4251: LD_INT 2
4253: PPUSH
4254: CALL_OW 380
// eng := CreateHuman ;
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: CALL_OW 44
4267: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
4268: LD_VAR 0 2
4272: PPUSH
4273: LD_INT 102
4275: PPUSH
4276: LD_INT 8
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
4286: LD_VAR 0 2
4290: PPUSH
4291: LD_INT 110
4293: PPUSH
4294: LD_INT 60
4296: PPUSH
4297: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
4301: LD_ADDR_EXP 35
4305: PUSH
4306: LD_EXP 35
4310: PUSH
4311: LD_VAR 0 2
4315: UNION
4316: ST_TO_ADDR
// end else
4317: GO 4454
// begin for i in eng do
4319: LD_ADDR_VAR 0 1
4323: PUSH
4324: LD_VAR 0 2
4328: PUSH
4329: FOR_IN
4330: IFFALSE 4452
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
4332: LD_INT 10
4334: PPUSH
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 287
4342: IFFALSE 4366
// begin if IsInUnit ( i ) then
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 310
4353: IFFALSE 4364
// ComExitBuilding ( i ) ;
4355: LD_VAR 0 1
4359: PPUSH
4360: CALL_OW 122
// end else
4364: GO 4450
// begin if damagedBuilding then
4366: LD_VAR 0 5
4370: IFFALSE 4414
// begin if IsInUnit ( i ) then
4372: LD_VAR 0 1
4376: PPUSH
4377: CALL_OW 310
4381: IFFALSE 4394
// ComExitBuilding ( i ) else
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 122
4392: GO 4412
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
4394: LD_VAR 0 1
4398: PPUSH
4399: LD_VAR 0 5
4403: PUSH
4404: LD_INT 1
4406: ARRAY
4407: PPUSH
4408: CALL_OW 130
// end else
4412: GO 4450
// if not IsInUnit ( i ) and not HasTask ( i ) then
4414: LD_VAR 0 1
4418: PPUSH
4419: CALL_OW 310
4423: NOT
4424: PUSH
4425: LD_VAR 0 1
4429: PPUSH
4430: CALL_OW 314
4434: NOT
4435: AND
4436: IFFALSE 4450
// ComEnterUnit ( i , arDepot ) ;
4438: LD_VAR 0 1
4442: PPUSH
4443: LD_INT 5
4445: PPUSH
4446: CALL_OW 120
// end ; end ;
4450: GO 4329
4452: POP
4453: POP
// end ; end ;
4454: PPOPN 5
4456: END
// export function StartCargoEvacuation ; begin
4457: LD_INT 0
4459: PPUSH
// while GetResourceType ( GetBase ( arDepot ) , mat_cans ) > 0 and omarCargoCounter > 0 do
4460: LD_INT 5
4462: PPUSH
4463: CALL_OW 274
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 275
4475: PUSH
4476: LD_INT 0
4478: GREATER
4479: PUSH
4480: LD_EXP 17
4484: PUSH
4485: LD_INT 0
4487: GREATER
4488: AND
4489: IFFALSE 4781
// begin wait ( 1 1$20 ) ;
4491: LD_INT 2800
4493: PPUSH
4494: CALL_OW 67
// omarCargo := PrepareCargo ;
4498: LD_ADDR_EXP 39
4502: PUSH
4503: CALL 4786 0 0
4507: ST_TO_ADDR
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4508: LD_EXP 39
4512: PPUSH
4513: LD_INT 107
4515: PPUSH
4516: LD_INT 59
4518: PPUSH
4519: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4523: LD_INT 35
4525: PPUSH
4526: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4530: LD_EXP 39
4534: PPUSH
4535: LD_INT 107
4537: PPUSH
4538: LD_INT 59
4540: PPUSH
4541: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4545: LD_EXP 39
4549: PPUSH
4550: CALL_OW 302
4554: NOT
4555: PUSH
4556: LD_EXP 39
4560: PPUSH
4561: CALL_OW 301
4565: OR
4566: IFFALSE 4570
// continue ;
4568: GO 4523
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
4570: LD_EXP 39
4574: PPUSH
4575: LD_INT 107
4577: PPUSH
4578: LD_INT 59
4580: PPUSH
4581: CALL_OW 307
4585: PUSH
4586: LD_EXP 39
4590: PPUSH
4591: LD_INT 5
4593: PPUSH
4594: CALL_OW 296
4598: PUSH
4599: LD_INT 6
4601: LESS
4602: OR
4603: IFFALSE 4523
// wait ( 0 0$05 ) ;
4605: LD_INT 175
4607: PPUSH
4608: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
4612: LD_EXP 39
4616: PPUSH
4617: LD_INT 1
4619: PPUSH
4620: LD_INT 100
4622: PPUSH
4623: CALL_OW 290
// SetResourceType ( GetBase ( arDepot ) , mat_cans , GetResourceType ( GetBase ( arDepot ) , mat_cans ) - 100 ) ;
4627: LD_INT 5
4629: PPUSH
4630: CALL_OW 274
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: LD_INT 5
4640: PPUSH
4641: CALL_OW 274
4645: PPUSH
4646: LD_INT 1
4648: PPUSH
4649: CALL_OW 275
4653: PUSH
4654: LD_INT 100
4656: MINUS
4657: PPUSH
4658: CALL_OW 277
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
4662: LD_EXP 39
4666: PPUSH
4667: LD_INT 103
4669: PPUSH
4670: LD_INT 9
4672: PPUSH
4673: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4677: LD_INT 35
4679: PPUSH
4680: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
4684: LD_EXP 39
4688: PPUSH
4689: LD_INT 103
4691: PPUSH
4692: LD_INT 9
4694: PPUSH
4695: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4699: LD_EXP 39
4703: PPUSH
4704: CALL_OW 302
4708: NOT
4709: PUSH
4710: LD_EXP 39
4714: PPUSH
4715: CALL_OW 301
4719: OR
4720: IFFALSE 4724
// continue ;
4722: GO 4677
// until IsInArea ( omarCargo , northRoad ) and GetCargo ( omarCargo , mat_cans ) > 0 ;
4724: LD_EXP 39
4728: PPUSH
4729: LD_INT 3
4731: PPUSH
4732: CALL_OW 308
4736: PUSH
4737: LD_EXP 39
4741: PPUSH
4742: LD_INT 1
4744: PPUSH
4745: CALL_OW 289
4749: PUSH
4750: LD_INT 0
4752: GREATER
4753: AND
4754: IFFALSE 4677
// RemoveUnit ( omarCargo ) ;
4756: LD_EXP 39
4760: PPUSH
4761: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
4765: LD_ADDR_EXP 17
4769: PUSH
4770: LD_EXP 17
4774: PUSH
4775: LD_INT 1
4777: MINUS
4778: ST_TO_ADDR
// end ;
4779: GO 4460
// end ;
4781: LD_VAR 0 1
4785: RET
// export function PrepareCargo ; var un , veh ; begin
4786: LD_INT 0
4788: PPUSH
4789: PPUSH
4790: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4791: LD_ADDR_VAR 0 3
4795: PUSH
4796: LD_INT 5
4798: PPUSH
4799: LD_INT 2
4801: PPUSH
4802: LD_INT 13
4804: PPUSH
4805: LD_INT 1
4807: PPUSH
4808: LD_INT 1
4810: PPUSH
4811: LD_INT 32
4813: PPUSH
4814: LD_INT 80
4816: PPUSH
4817: CALL 331 0 7
4821: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4822: LD_VAR 0 3
4826: PPUSH
4827: LD_INT 4
4829: PPUSH
4830: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_INT 101
4841: PPUSH
4842: LD_INT 8
4844: PPUSH
4845: LD_INT 0
4847: PPUSH
4848: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4852: LD_INT 0
4854: PPUSH
4855: LD_INT 3
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 380
// un := CreateHuman ;
4865: LD_ADDR_VAR 0 2
4869: PUSH
4870: CALL_OW 44
4874: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4875: LD_VAR 0 2
4879: PPUSH
4880: LD_VAR 0 3
4884: PPUSH
4885: CALL_OW 52
// result := veh ;
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_VAR 0 3
4898: ST_TO_ADDR
// end ; end_of_file
4899: LD_VAR 0 1
4903: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4904: LD_INT 0
4906: PPUSH
4907: PPUSH
4908: PPUSH
// usForces := [ ] ;
4909: LD_ADDR_EXP 40
4913: PUSH
4914: EMPTY
4915: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4916: LD_ADDR_EXP 42
4920: PUSH
4921: LD_INT 6
4923: PUSH
4924: LD_INT 32
4926: PUSH
4927: LD_INT 27
4929: PUSH
4930: LD_INT 1
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 4
4941: PUSH
4942: LD_INT 43
4944: PUSH
4945: LD_INT 24
4947: PUSH
4948: LD_INT 5
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 27
4959: PUSH
4960: LD_INT 29
4962: PUSH
4963: LD_INT 21
4965: PUSH
4966: LD_INT 0
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4980: LD_INT 11
4982: PPUSH
4983: CALL_OW 274
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: LD_INT 150
4993: PUSH
4994: LD_INT 120
4996: PUSH
4997: LD_INT 100
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: PUSH
5005: LD_OWVAR 67
5009: ARRAY
5010: PPUSH
5011: CALL_OW 277
// if Difficulty = 1 then
5015: LD_OWVAR 67
5019: PUSH
5020: LD_INT 1
5022: EQUAL
5023: IFFALSE 5032
// RemoveUnit ( hillBun ) ;
5025: LD_INT 14
5027: PPUSH
5028: CALL_OW 64
// uc_side := 1 ;
5032: LD_ADDR_OWVAR 20
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// uc_nation := 1 ;
5040: LD_ADDR_OWVAR 21
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// hc_gallery :=  ;
5048: LD_ADDR_OWVAR 33
5052: PUSH
5053: LD_STRING 
5055: ST_TO_ADDR
// hc_name :=  ;
5056: LD_ADDR_OWVAR 26
5060: PUSH
5061: LD_STRING 
5063: ST_TO_ADDR
// hc_importance := 0 ;
5064: LD_ADDR_OWVAR 32
5068: PUSH
5069: LD_INT 0
5071: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: LD_INT 3
5080: PPUSH
5081: CALL_OW 380
// usCommander := CreateHuman ;
5085: LD_ADDR_EXP 41
5089: PUSH
5090: CALL_OW 44
5094: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
5095: LD_EXP 41
5099: PPUSH
5100: LD_INT 11
5102: PPUSH
5103: CALL_OW 52
// if hillBun then
5107: LD_INT 14
5109: IFFALSE 5191
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5111: LD_INT 0
5113: PPUSH
5114: LD_INT 1
5116: PPUSH
5117: LD_INT 1
5119: PUSH
5120: LD_INT 2
5122: PUSH
5123: LD_INT 3
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: PUSH
5131: LD_OWVAR 67
5135: ARRAY
5136: PPUSH
5137: CALL_OW 380
// un := CreateHuman ;
5141: LD_ADDR_VAR 0 3
5145: PUSH
5146: CALL_OW 44
5150: ST_TO_ADDR
// usForces := usForces union un ;
5151: LD_ADDR_EXP 40
5155: PUSH
5156: LD_EXP 40
5160: PUSH
5161: LD_VAR 0 3
5165: UNION
5166: ST_TO_ADDR
// SetDir ( un , 1 ) ;
5167: LD_VAR 0 3
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 14
5186: PPUSH
5187: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: DOUBLE
5197: LD_INT 1
5199: DEC
5200: ST_TO_ADDR
5201: LD_INT 2
5203: PUSH
5204: LD_INT 3
5206: PUSH
5207: LD_INT 4
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: LD_OWVAR 67
5219: ARRAY
5220: PUSH
5221: FOR_TO
5222: IFFALSE 5364
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5224: LD_INT 0
5226: PPUSH
5227: LD_INT 1
5229: PPUSH
5230: LD_INT 1
5232: PUSH
5233: LD_INT 2
5235: PUSH
5236: LD_INT 3
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: LD_OWVAR 67
5248: ARRAY
5249: PPUSH
5250: CALL_OW 380
// un := CreateHuman ;
5254: LD_ADDR_VAR 0 3
5258: PUSH
5259: CALL_OW 44
5263: ST_TO_ADDR
// usForces := usForces union un ;
5264: LD_ADDR_EXP 40
5268: PUSH
5269: LD_EXP 40
5273: PUSH
5274: LD_VAR 0 3
5278: UNION
5279: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5280: LD_VAR 0 3
5284: PPUSH
5285: LD_INT 39
5287: PPUSH
5288: LD_INT 24
5290: PPUSH
5291: LD_INT 4
5293: PPUSH
5294: LD_INT 0
5296: PPUSH
5297: CALL_OW 50
// if i < 3 then
5301: LD_VAR 0 2
5305: PUSH
5306: LD_INT 3
5308: LESS
5309: IFFALSE 5362
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
5311: LD_VAR 0 3
5315: PPUSH
5316: LD_INT 22
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 58
5328: PUSH
5329: EMPTY
5330: LIST
5331: PUSH
5332: LD_INT 30
5334: PUSH
5335: LD_INT 31
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: PPUSH
5347: CALL_OW 69
5351: PUSH
5352: LD_VAR 0 2
5356: ARRAY
5357: PPUSH
5358: CALL_OW 120
// end ;
5362: GO 5221
5364: POP
5365: POP
// for i := 1 to 2 do
5366: LD_ADDR_VAR 0 2
5370: PUSH
5371: DOUBLE
5372: LD_INT 1
5374: DEC
5375: ST_TO_ADDR
5376: LD_INT 2
5378: PUSH
5379: FOR_TO
5380: IFFALSE 5444
// begin PrepareHuman ( false , 2 , 2 ) ;
5382: LD_INT 0
5384: PPUSH
5385: LD_INT 2
5387: PPUSH
5388: LD_INT 2
5390: PPUSH
5391: CALL_OW 380
// un := CreateHuman ;
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: CALL_OW 44
5404: ST_TO_ADDR
// usForces := usForces union un ;
5405: LD_ADDR_EXP 40
5409: PUSH
5410: LD_EXP 40
5414: PUSH
5415: LD_VAR 0 3
5419: UNION
5420: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5421: LD_VAR 0 3
5425: PPUSH
5426: LD_INT 39
5428: PPUSH
5429: LD_INT 24
5431: PPUSH
5432: LD_INT 4
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 50
// end ;
5442: GO 5379
5444: POP
5445: POP
// PrepareHuman ( false , 4 , 1 ) ;
5446: LD_INT 0
5448: PPUSH
5449: LD_INT 4
5451: PPUSH
5452: LD_INT 1
5454: PPUSH
5455: CALL_OW 380
// un := CreateHuman ;
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: CALL_OW 44
5468: ST_TO_ADDR
// usForces := usForces union un ;
5469: LD_ADDR_EXP 40
5473: PUSH
5474: LD_EXP 40
5478: PUSH
5479: LD_VAR 0 3
5483: UNION
5484: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_INT 39
5492: PPUSH
5493: LD_INT 24
5495: PPUSH
5496: LD_INT 4
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: CALL_OW 50
// end ;
5506: LD_VAR 0 1
5510: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
5511: LD_EXP 40
5515: PUSH
5516: LD_EXP 6
5520: NOT
5521: AND
5522: IFFALSE 5953
5524: GO 5526
5526: DISABLE
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
// begin enable ;
5534: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
5535: LD_ADDR_VAR 0 3
5539: PUSH
5540: LD_EXP 40
5544: PPUSH
5545: LD_INT 25
5547: PUSH
5548: LD_INT 2
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PPUSH
5555: CALL_OW 72
5559: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
5560: LD_ADDR_VAR 0 4
5564: PUSH
5565: LD_EXP 40
5569: PPUSH
5570: LD_INT 25
5572: PUSH
5573: LD_INT 1
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PPUSH
5580: CALL_OW 72
5584: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
5585: LD_ADDR_VAR 0 5
5589: PUSH
5590: LD_EXP 40
5594: PPUSH
5595: LD_INT 25
5597: PUSH
5598: LD_INT 4
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PPUSH
5605: CALL_OW 72
5609: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
5610: LD_INT 7
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PPUSH
5623: CALL_OW 70
5627: PUSH
5628: LD_INT 1
5630: EQUAL
5631: IFFALSE 5707
// for i in sol do
5633: LD_ADDR_VAR 0 1
5637: PUSH
5638: LD_VAR 0 4
5642: PUSH
5643: FOR_IN
5644: IFFALSE 5705
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
5646: LD_VAR 0 1
5650: PPUSH
5651: CALL_OW 310
5655: NOT
5656: PUSH
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 310
5666: PPUSH
5667: CALL_OW 266
5671: PUSH
5672: LD_INT 4
5674: EQUAL
5675: NOT
5676: OR
5677: IFFALSE 5703
// begin ComExitBuilding ( i ) ;
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
5688: LD_VAR 0 1
5692: PPUSH
5693: LD_INT 37
5695: PPUSH
5696: LD_INT 23
5698: PPUSH
5699: CALL_OW 174
// end ;
5703: GO 5643
5705: POP
5706: POP
// if eng then
5707: LD_VAR 0 3
5711: IFFALSE 5953
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 95
5730: PUSH
5731: LD_INT 7
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 21
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 24
5753: PUSH
5754: LD_INT 1000
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: PPUSH
5771: CALL_OW 69
5775: ST_TO_ADDR
// if b then
5776: LD_VAR 0 2
5780: IFFALSE 5811
// begin ComExitBuilding ( eng ) ;
5782: LD_VAR 0 3
5786: PPUSH
5787: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_VAR 0 2
5800: PUSH
5801: LD_INT 1
5803: ARRAY
5804: PPUSH
5805: CALL_OW 190
// end else
5809: GO 5953
// begin for i in eng do
5811: LD_ADDR_VAR 0 1
5815: PUSH
5816: LD_VAR 0 3
5820: PUSH
5821: FOR_IN
5822: IFFALSE 5951
// if not HasTask ( i ) then
5824: LD_VAR 0 1
5828: PPUSH
5829: CALL_OW 314
5833: NOT
5834: IFFALSE 5949
// begin if americanBuildList then
5836: LD_EXP 42
5840: IFFALSE 5925
// begin if IsInUnit ( i ) then
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL_OW 310
5851: IFFALSE 5862
// ComExitBuilding ( i ) ;
5853: LD_VAR 0 1
5857: PPUSH
5858: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5862: LD_VAR 0 1
5866: PPUSH
5867: LD_EXP 42
5871: PUSH
5872: LD_INT 1
5874: ARRAY
5875: PUSH
5876: LD_INT 1
5878: ARRAY
5879: PPUSH
5880: LD_EXP 42
5884: PUSH
5885: LD_INT 1
5887: ARRAY
5888: PUSH
5889: LD_INT 2
5891: ARRAY
5892: PPUSH
5893: LD_EXP 42
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PUSH
5902: LD_INT 3
5904: ARRAY
5905: PPUSH
5906: LD_EXP 42
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: PUSH
5915: LD_INT 4
5917: ARRAY
5918: PPUSH
5919: CALL_OW 205
// end else
5923: GO 5949
// if not IsInUnit ( i ) then
5925: LD_VAR 0 1
5929: PPUSH
5930: CALL_OW 310
5934: NOT
5935: IFFALSE 5949
// ComEnterUnit ( i , usDepot ) ;
5937: LD_VAR 0 1
5941: PPUSH
5942: LD_INT 11
5944: PPUSH
5945: CALL_OW 120
// end ;
5949: GO 5821
5951: POP
5952: POP
// end ; end ; end ;
5953: PPOPN 5
5955: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5956: LD_INT 0
5958: PPUSH
5959: PPUSH
5960: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5961: LD_ADDR_VAR 0 3
5965: PUSH
5966: LD_INT 35
5968: PUSH
5969: LD_INT 45
5971: PUSH
5972: LD_INT 48
5974: PUSH
5975: LD_EXP 51
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: ST_TO_ADDR
// for i in tech do
5986: LD_ADDR_VAR 0 4
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6015
// AddComResearch ( lab , i ) ;
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_VAR 0 4
6008: PPUSH
6009: CALL_OW 184
6013: GO 5996
6015: POP
6016: POP
// end ;
6017: LD_VAR 0 2
6021: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
6022: LD_EXP 11
6026: PUSH
6027: LD_EXP 19
6031: PUSH
6032: LD_EXP 23
6036: LESSEQUAL
6037: AND
6038: IFFALSE 6063
6040: GO 6042
6042: DISABLE
// begin enable ;
6043: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
6044: LD_INT 35
6046: PPUSH
6047: LD_INT 2065
6049: PPUSH
6050: CALL_OW 12
6054: PPUSH
6055: CALL_OW 67
// SendConvoy ;
6059: CALL 6161 0 0
// end ;
6063: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
6064: LD_EXP 6
6068: PUSH
6069: LD_EXP 15
6073: AND
6074: IFFALSE 6160
6076: GO 6078
6078: DISABLE
// begin if americanHasEscaped then
6079: LD_EXP 7
6083: IFFALSE 6094
// wait ( 3 3$20 ) else
6085: LD_INT 7000
6087: PPUSH
6088: CALL_OW 67
6092: GO 6101
// wait ( 6 6$40 ) ;
6094: LD_INT 14000
6096: PPUSH
6097: CALL_OW 67
// SendAttack ;
6101: CALL 6876 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
6105: LD_INT 14000
6107: PUSH
6108: LD_INT 11900
6110: PUSH
6111: LD_INT 9800
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_OWVAR 67
6123: ARRAY
6124: PPUSH
6125: CALL_OW 67
// SendAttack ;
6129: CALL 6876 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
6133: LD_EXP 16
6137: PUSH
6138: LD_INT 6
6140: PUSH
6141: LD_INT 7
6143: PUSH
6144: LD_INT 8
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: LD_OWVAR 67
6156: ARRAY
6157: LESS
6158: IFFALSE 6105
// end ;
6160: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
6161: LD_INT 0
6163: PPUSH
6164: PPUSH
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
6169: PPUSH
6170: PPUSH
// road := rand ( 1 , 2 ) ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 1
6178: PPUSH
6179: LD_INT 2
6181: PPUSH
6182: CALL_OW 12
6186: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
6187: LD_ADDR_VAR 0 8
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 8
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_VAR 0 4
6206: ARRAY
6207: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
6208: LD_ADDR_VAR 0 5
6212: PUSH
6213: LD_INT 35
6215: PUSH
6216: LD_INT 66
6218: PUSH
6219: LD_INT 1
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: LIST
6226: PUSH
6227: LD_INT 101
6229: PUSH
6230: LD_INT 8
6232: PUSH
6233: LD_INT 4
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
6245: LD_ADDR_VAR 0 6
6249: PUSH
6250: LD_INT 34
6252: PUSH
6253: LD_INT 67
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 38
6262: PUSH
6263: LD_INT 62
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 43
6272: PUSH
6273: LD_INT 54
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 57
6282: PUSH
6283: LD_INT 57
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 77
6292: PUSH
6293: LD_INT 71
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 86
6302: PUSH
6303: LD_INT 60
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: LD_INT 89
6312: PUSH
6313: LD_INT 35
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 93
6322: PUSH
6323: LD_INT 17
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: PUSH
6330: LD_INT 97
6332: PUSH
6333: LD_INT 10
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 103
6342: PUSH
6343: LD_INT 9
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: ST_TO_ADDR
// if road = 2 then
6362: LD_VAR 0 4
6366: PUSH
6367: LD_INT 2
6369: EQUAL
6370: IFFALSE 6387
// points := ReverseArray ( points ) ;
6372: LD_ADDR_VAR 0 6
6376: PUSH
6377: LD_VAR 0 6
6381: PPUSH
6382: CALL 1019 0 1
6386: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
6387: LD_INT 4
6389: PPUSH
6390: LD_INT 1
6392: PPUSH
6393: LD_INT 2
6395: PPUSH
6396: LD_INT 1
6398: PPUSH
6399: LD_INT 1
6401: PPUSH
6402: LD_INT 12
6404: PPUSH
6405: LD_INT 80
6407: PPUSH
6408: CALL 331 0 7
// veh := CreateVehicle ;
6412: LD_ADDR_VAR 0 3
6416: PUSH
6417: CALL_OW 45
6421: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
6422: LD_VAR 0 3
6426: PPUSH
6427: LD_VAR 0 5
6431: PUSH
6432: LD_VAR 0 4
6436: ARRAY
6437: PUSH
6438: LD_INT 3
6440: ARRAY
6441: PPUSH
6442: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
6446: LD_VAR 0 3
6450: PPUSH
6451: LD_VAR 0 5
6455: PUSH
6456: LD_VAR 0 4
6460: ARRAY
6461: PUSH
6462: LD_INT 1
6464: ARRAY
6465: PPUSH
6466: LD_VAR 0 5
6470: PUSH
6471: LD_VAR 0 4
6475: ARRAY
6476: PUSH
6477: LD_INT 2
6479: ARRAY
6480: PPUSH
6481: LD_INT 0
6483: PPUSH
6484: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
6488: LD_INT 0
6490: PPUSH
6491: LD_INT 1
6493: PPUSH
6494: LD_OWVAR 67
6498: PPUSH
6499: CALL_OW 380
// un := CreateHuman ;
6503: LD_ADDR_VAR 0 2
6507: PUSH
6508: CALL_OW 44
6512: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6513: LD_VAR 0 2
6517: PPUSH
6518: LD_VAR 0 3
6522: PPUSH
6523: CALL_OW 52
// if Prob ( 50 + tick mod 30 ) or convoyCounter < 3 then
6527: LD_INT 50
6529: PUSH
6530: LD_OWVAR 1
6534: PUSH
6535: LD_INT 30
6537: MOD
6538: PLUS
6539: PPUSH
6540: CALL_OW 13
6544: PUSH
6545: LD_EXP 19
6549: PUSH
6550: LD_INT 3
6552: LESS
6553: OR
6554: IFFALSE 6571
// SetCargo ( veh , mat_cans , 100 ) ;
6556: LD_VAR 0 3
6560: PPUSH
6561: LD_INT 1
6563: PPUSH
6564: LD_INT 100
6566: PPUSH
6567: CALL_OW 290
// for i := 2 to points do
6571: LD_ADDR_VAR 0 7
6575: PUSH
6576: DOUBLE
6577: LD_INT 2
6579: DEC
6580: ST_TO_ADDR
6581: LD_VAR 0 6
6585: PUSH
6586: FOR_TO
6587: IFFALSE 6630
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_VAR 0 6
6598: PUSH
6599: LD_VAR 0 7
6603: ARRAY
6604: PUSH
6605: LD_INT 1
6607: ARRAY
6608: PPUSH
6609: LD_VAR 0 6
6613: PUSH
6614: LD_VAR 0 7
6618: ARRAY
6619: PUSH
6620: LD_INT 2
6622: ARRAY
6623: PPUSH
6624: CALL_OW 171
6628: GO 6586
6630: POP
6631: POP
// convoyCounter := convoyCounter + 1 ;
6632: LD_ADDR_EXP 19
6636: PUSH
6637: LD_EXP 19
6641: PUSH
6642: LD_INT 1
6644: PLUS
6645: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6646: LD_INT 35
6648: PPUSH
6649: CALL_OW 67
// if not HasTask ( veh ) then
6653: LD_VAR 0 3
6657: PPUSH
6658: CALL_OW 314
6662: NOT
6663: IFFALSE 6704
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6665: LD_VAR 0 3
6669: PPUSH
6670: LD_VAR 0 6
6674: PUSH
6675: LD_VAR 0 6
6679: ARRAY
6680: PUSH
6681: LD_INT 1
6683: ARRAY
6684: PPUSH
6685: LD_VAR 0 6
6689: PUSH
6690: LD_VAR 0 6
6694: ARRAY
6695: PUSH
6696: LD_INT 2
6698: ARRAY
6699: PPUSH
6700: CALL_OW 111
// if not IsOk ( veh ) then
6704: LD_VAR 0 3
6708: PPUSH
6709: CALL_OW 302
6713: NOT
6714: IFFALSE 6755
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_VAR 0 6
6725: PUSH
6726: LD_VAR 0 6
6730: ARRAY
6731: PUSH
6732: LD_INT 1
6734: ARRAY
6735: PPUSH
6736: LD_VAR 0 6
6740: PUSH
6741: LD_VAR 0 6
6745: ARRAY
6746: PUSH
6747: LD_INT 2
6749: ARRAY
6750: PPUSH
6751: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6755: LD_VAR 0 3
6759: PPUSH
6760: LD_VAR 0 8
6764: PPUSH
6765: CALL_OW 308
6769: PUSH
6770: LD_VAR 0 2
6774: PPUSH
6775: LD_VAR 0 8
6779: PPUSH
6780: CALL_OW 308
6784: OR
6785: IFFALSE 6646
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 302
6796: PUSH
6797: LD_VAR 0 3
6801: PPUSH
6802: CALL_OW 302
6806: NOT
6807: AND
6808: PUSH
6809: LD_VAR 0 2
6813: PPUSH
6814: LD_VAR 0 8
6818: PPUSH
6819: CALL_OW 308
6823: AND
6824: IFFALSE 6835
// RemoveUnit ( un ) ;
6826: LD_VAR 0 2
6830: PPUSH
6831: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6835: LD_VAR 0 3
6839: PPUSH
6840: LD_VAR 0 8
6844: PPUSH
6845: CALL_OW 308
6849: PUSH
6850: LD_VAR 0 3
6854: PPUSH
6855: CALL_OW 302
6859: AND
6860: IFFALSE 6871
// RemoveUnit ( veh ) ;
6862: LD_VAR 0 3
6866: PPUSH
6867: CALL_OW 64
// end ;
6871: LD_VAR 0 1
6875: RET
// export function SendAttack ; var un , veh , i ; begin
6876: LD_INT 0
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
// IncomingAttack ;
6882: CALL 14996 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6886: LD_INT 2100
6888: PPUSH
6889: LD_INT 3500
6891: PPUSH
6892: CALL_OW 12
6896: PPUSH
6897: CALL_OW 67
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] + attackWave div 3 do
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: DOUBLE
6907: LD_INT 1
6909: DEC
6910: ST_TO_ADDR
6911: LD_INT 3
6913: PUSH
6914: LD_INT 3
6916: PUSH
6917: LD_INT 4
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: PUSH
6925: LD_OWVAR 67
6929: ARRAY
6930: PUSH
6931: LD_EXP 16
6935: PUSH
6936: LD_INT 3
6938: DIV
6939: PLUS
6940: PUSH
6941: FOR_TO
6942: IFFALSE 7054
// begin uc_side := 1 ;
6944: LD_ADDR_OWVAR 20
6948: PUSH
6949: LD_INT 1
6951: ST_TO_ADDR
// uc_nation := 1 ;
6952: LD_ADDR_OWVAR 21
6956: PUSH
6957: LD_INT 1
6959: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6960: LD_INT 0
6962: PPUSH
6963: LD_INT 1
6965: PPUSH
6966: LD_INT 2
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 4
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: LD_OWVAR 67
6984: ARRAY
6985: PPUSH
6986: CALL_OW 380
// un := CreateHuman ;
6990: LD_ADDR_VAR 0 2
6994: PUSH
6995: CALL_OW 44
6999: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7000: LD_VAR 0 2
7004: PPUSH
7005: LD_INT 37
7007: PPUSH
7008: LD_INT 70
7010: PPUSH
7011: LD_INT 3
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: CALL_OW 50
// usAttackers := usAttackers union un ;
7021: LD_ADDR_EXP 43
7025: PUSH
7026: LD_EXP 43
7030: PUSH
7031: LD_VAR 0 2
7035: UNION
7036: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7037: LD_VAR 0 2
7041: PPUSH
7042: LD_INT 40
7044: PPUSH
7045: LD_INT 65
7047: PPUSH
7048: CALL_OW 111
// end ;
7052: GO 6941
7054: POP
7055: POP
// uc_side := 1 ;
7056: LD_ADDR_OWVAR 20
7060: PUSH
7061: LD_INT 1
7063: ST_TO_ADDR
// uc_nation := 1 ;
7064: LD_ADDR_OWVAR 21
7068: PUSH
7069: LD_INT 1
7071: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
7072: LD_INT 0
7074: PPUSH
7075: LD_INT 4
7077: PPUSH
7078: LD_INT 2
7080: PPUSH
7081: CALL_OW 380
// un := CreateHuman ;
7085: LD_ADDR_VAR 0 2
7089: PUSH
7090: CALL_OW 44
7094: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7095: LD_VAR 0 2
7099: PPUSH
7100: LD_INT 37
7102: PPUSH
7103: LD_INT 70
7105: PPUSH
7106: LD_INT 3
7108: PPUSH
7109: LD_INT 0
7111: PPUSH
7112: CALL_OW 50
// usAttackers := usAttackers union un ;
7116: LD_ADDR_EXP 43
7120: PUSH
7121: LD_EXP 43
7125: PUSH
7126: LD_VAR 0 2
7130: UNION
7131: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7132: LD_VAR 0 2
7136: PPUSH
7137: LD_INT 40
7139: PPUSH
7140: LD_INT 65
7142: PPUSH
7143: CALL_OW 111
// if attackWave > 1 or Difficulty > 1 then
7147: LD_EXP 16
7151: PUSH
7152: LD_INT 1
7154: GREATER
7155: PUSH
7156: LD_OWVAR 67
7160: PUSH
7161: LD_INT 1
7163: GREATER
7164: OR
7165: IFFALSE 7368
// begin for i := 1 to Difficulty + attackWave div 4 do
7167: LD_ADDR_VAR 0 4
7171: PUSH
7172: DOUBLE
7173: LD_INT 1
7175: DEC
7176: ST_TO_ADDR
7177: LD_OWVAR 67
7181: PUSH
7182: LD_EXP 16
7186: PUSH
7187: LD_INT 4
7189: DIV
7190: PLUS
7191: PUSH
7192: FOR_TO
7193: IFFALSE 7366
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: LD_INT 1
7202: PPUSH
7203: LD_INT 1
7205: PPUSH
7206: LD_INT 2
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: LD_INT 1
7214: PPUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 1
7231: PPUSH
7232: LD_INT 3
7234: PPUSH
7235: CALL_OW 12
7239: ARRAY
7240: PPUSH
7241: LD_INT 90
7243: PPUSH
7244: CALL 331 0 7
7248: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
7249: LD_VAR 0 3
7253: PPUSH
7254: LD_INT 35
7256: PPUSH
7257: LD_INT 65
7259: PPUSH
7260: LD_INT 0
7262: PPUSH
7263: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
7267: LD_INT 0
7269: PPUSH
7270: LD_INT 3
7272: PPUSH
7273: LD_OWVAR 67
7277: PUSH
7278: LD_INT 1
7280: PLUS
7281: PPUSH
7282: CALL_OW 380
// un := CreateHuman ;
7286: LD_ADDR_VAR 0 2
7290: PUSH
7291: CALL_OW 44
7295: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7296: LD_VAR 0 2
7300: PPUSH
7301: LD_VAR 0 3
7305: PPUSH
7306: CALL_OW 52
// usAttackers := usAttackers union un ;
7310: LD_ADDR_EXP 43
7314: PUSH
7315: LD_EXP 43
7319: PUSH
7320: LD_VAR 0 2
7324: UNION
7325: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
7326: LD_VAR 0 3
7330: PPUSH
7331: LD_INT 39
7333: PPUSH
7334: LD_INT 60
7336: PPUSH
7337: CALL_OW 111
// wait ( 0 0$2 ) ;
7341: LD_INT 70
7343: PPUSH
7344: CALL_OW 67
// usAttackers := usAttackers union veh ;
7348: LD_ADDR_EXP 43
7352: PUSH
7353: LD_EXP 43
7357: PUSH
7358: LD_VAR 0 3
7362: UNION
7363: ST_TO_ADDR
// end ;
7364: GO 7192
7366: POP
7367: POP
// end ; attackWave := attackWave + 1 ;
7368: LD_ADDR_EXP 16
7372: PUSH
7373: LD_EXP 16
7377: PUSH
7378: LD_INT 1
7380: PLUS
7381: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
7382: LD_EXP 20
7386: PPUSH
7387: CALL_OW 427
// end ;
7391: LD_VAR 0 1
7395: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
7396: LD_INT 0
7398: PPUSH
7399: PPUSH
7400: PPUSH
7401: PPUSH
7402: PPUSH
7403: PPUSH
7404: PPUSH
7405: PPUSH
7406: PPUSH
7407: PPUSH
7408: PPUSH
// if retreatAllowed then
7409: LD_EXP 10
7413: IFFALSE 7425
// strategy := 2 else
7415: LD_ADDR_VAR 0 5
7419: PUSH
7420: LD_INT 2
7422: ST_TO_ADDR
7423: GO 7441
// strategy := rand ( 0 , 2 ) ;
7425: LD_ADDR_VAR 0 5
7429: PUSH
7430: LD_INT 0
7432: PPUSH
7433: LD_INT 2
7435: PPUSH
7436: CALL_OW 12
7440: ST_TO_ADDR
// attackFormula := [ ] ;
7441: LD_ADDR_VAR 0 6
7445: PUSH
7446: EMPTY
7447: ST_TO_ADDR
// case strategy of 0 :
7448: LD_VAR 0 5
7452: PUSH
7453: LD_INT 0
7455: DOUBLE
7456: EQUAL
7457: IFTRUE 7461
7459: GO 7791
7461: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
7462: LD_INT 11
7464: PPUSH
7465: LD_INT 22
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 4
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 70
7493: NOT
7494: IFFALSE 7566
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7496: LD_ADDR_VAR 0 6
7500: PUSH
7501: LD_INT 41
7503: PUSH
7504: LD_INT 34
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: EMPTY
7512: LIST
7513: PUSH
7514: LD_INT 53
7516: PUSH
7517: LD_INT 62
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 37
7526: PUSH
7527: LD_INT 63
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 44
7536: PUSH
7537: LD_INT 45
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 37
7546: PUSH
7547: LD_INT 28
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: ST_TO_ADDR
7564: GO 7789
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7566: LD_INT 12
7568: PPUSH
7569: LD_INT 22
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 2
7581: PUSH
7582: LD_INT 30
7584: PUSH
7585: LD_INT 4
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 30
7594: PUSH
7595: LD_INT 31
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 30
7604: PUSH
7605: LD_INT 32
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PPUSH
7622: CALL_OW 70
7626: NOT
7627: IFFALSE 7710
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7629: LD_ADDR_VAR 0 6
7633: PUSH
7634: LD_INT 27
7636: PUSH
7637: LD_INT 42
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 27
7646: PUSH
7647: LD_INT 32
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 53
7660: PUSH
7661: LD_INT 62
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 37
7670: PUSH
7671: LD_INT 63
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 44
7680: PUSH
7681: LD_INT 45
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 37
7690: PUSH
7691: LD_INT 28
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: ST_TO_ADDR
7708: GO 7789
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7710: LD_ADDR_VAR 0 6
7714: PUSH
7715: LD_INT 71
7717: PUSH
7718: LD_INT 67
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 54
7727: PUSH
7728: LD_INT 35
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 63
7741: PUSH
7742: LD_INT 40
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 37
7751: PUSH
7752: LD_INT 63
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 44
7761: PUSH
7762: LD_INT 45
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 37
7771: PUSH
7772: LD_INT 28
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: ST_TO_ADDR
// end ; 1 :
7789: GO 7994
7791: LD_INT 1
7793: DOUBLE
7794: EQUAL
7795: IFTRUE 7799
7797: GO 7903
7799: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7800: LD_ADDR_VAR 0 6
7804: PUSH
7805: LD_INT 71
7807: PUSH
7808: LD_INT 67
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 82
7817: PUSH
7818: LD_INT 23
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: LD_INT 53
7827: PUSH
7828: LD_INT 7
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 43
7837: PUSH
7838: LD_INT 10
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 53
7853: PUSH
7854: LD_INT 62
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 37
7863: PUSH
7864: LD_INT 63
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 44
7873: PUSH
7874: LD_INT 45
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 37
7883: PUSH
7884: LD_INT 28
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: ST_TO_ADDR
7901: GO 7994
7903: LD_INT 2
7905: DOUBLE
7906: EQUAL
7907: IFTRUE 7911
7909: GO 7993
7911: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7912: LD_ADDR_VAR 0 6
7916: PUSH
7917: LD_INT 90
7919: PUSH
7920: LD_INT 59
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 108
7929: PUSH
7930: LD_INT 64
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 82
7943: PUSH
7944: LD_INT 75
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: LD_INT 73
7953: PUSH
7954: LD_INT 67
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 101
7963: PUSH
7964: LD_INT 65
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 108
7973: PUSH
7974: LD_INT 62
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: ST_TO_ADDR
7991: GO 7994
7993: POP
// if not attackFormula then
7994: LD_VAR 0 6
7998: NOT
7999: IFFALSE 8003
// exit ;
8001: GO 9435
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8003: LD_ADDR_VAR 0 7
8007: PUSH
8008: LD_EXP 43
8012: PPUSH
8013: LD_INT 25
8015: PUSH
8016: LD_INT 1
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PPUSH
8023: CALL_OW 72
8027: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8028: LD_ADDR_VAR 0 8
8032: PUSH
8033: LD_EXP 43
8037: PPUSH
8038: LD_INT 25
8040: PUSH
8041: LD_INT 4
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PPUSH
8048: CALL_OW 72
8052: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8053: LD_ADDR_VAR 0 9
8057: PUSH
8058: LD_EXP 43
8062: PPUSH
8063: LD_INT 25
8065: PUSH
8066: LD_INT 3
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PPUSH
8073: CALL_OW 72
8077: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8078: LD_ADDR_VAR 0 10
8082: PUSH
8083: LD_EXP 43
8087: PPUSH
8088: LD_INT 21
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PPUSH
8098: CALL_OW 72
8102: ST_TO_ADDR
// if sci then
8103: LD_VAR 0 8
8107: IFFALSE 8144
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8109: LD_VAR 0 8
8113: PPUSH
8114: LD_VAR 0 6
8118: PUSH
8119: LD_INT 2
8121: ARRAY
8122: PUSH
8123: LD_INT 1
8125: ARRAY
8126: PPUSH
8127: LD_VAR 0 6
8131: PUSH
8132: LD_INT 2
8134: ARRAY
8135: PUSH
8136: LD_INT 2
8138: ARRAY
8139: PPUSH
8140: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8144: LD_INT 35
8146: PPUSH
8147: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8151: LD_ADDR_VAR 0 7
8155: PUSH
8156: LD_EXP 43
8160: PPUSH
8161: LD_INT 25
8163: PUSH
8164: LD_INT 1
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PPUSH
8171: CALL_OW 72
8175: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8176: LD_ADDR_VAR 0 8
8180: PUSH
8181: LD_EXP 43
8185: PPUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 4
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 72
8200: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8201: LD_ADDR_VAR 0 9
8205: PUSH
8206: LD_EXP 43
8210: PPUSH
8211: LD_INT 25
8213: PUSH
8214: LD_INT 3
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PPUSH
8221: CALL_OW 72
8225: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8226: LD_ADDR_VAR 0 10
8230: PUSH
8231: LD_EXP 43
8235: PPUSH
8236: LD_INT 21
8238: PUSH
8239: LD_INT 2
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 72
8250: ST_TO_ADDR
// if sol then
8251: LD_VAR 0 7
8255: IFFALSE 8650
// begin for i in sol do
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_VAR 0 7
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8648
// begin tag := GetTag ( i ) ;
8270: LD_ADDR_VAR 0 4
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 110
8284: ST_TO_ADDR
// if not tag then
8285: LD_VAR 0 4
8289: NOT
8290: IFFALSE 8408
// begin if GetLives ( i ) = 1000 then
8292: LD_VAR 0 2
8296: PPUSH
8297: CALL_OW 256
8301: PUSH
8302: LD_INT 1000
8304: EQUAL
8305: IFFALSE 8321
// SetTag ( i , 1 ) else
8307: LD_VAR 0 2
8311: PPUSH
8312: LD_INT 1
8314: PPUSH
8315: CALL_OW 109
8319: GO 8406
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 6 then
8321: LD_VAR 0 2
8325: PPUSH
8326: LD_VAR 0 6
8330: PUSH
8331: LD_INT 2
8333: ARRAY
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 6
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PUSH
8348: LD_INT 2
8350: ARRAY
8351: PPUSH
8352: CALL_OW 297
8356: PUSH
8357: LD_INT 6
8359: GREATER
8360: IFFALSE 8406
// begin ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_VAR 0 6
8371: PUSH
8372: LD_INT 2
8374: ARRAY
8375: PUSH
8376: LD_INT 1
8378: ARRAY
8379: PPUSH
8380: LD_VAR 0 6
8384: PUSH
8385: LD_INT 2
8387: ARRAY
8388: PUSH
8389: LD_INT 2
8391: ARRAY
8392: PPUSH
8393: CALL_OW 111
// AddComHold ( i ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: CALL_OW 200
// end ; end else
8406: GO 8646
// begin if GetLives ( i ) < 720 then
8408: LD_VAR 0 2
8412: PPUSH
8413: CALL_OW 256
8417: PUSH
8418: LD_INT 720
8420: LESS
8421: IFFALSE 8437
// SetTag ( i , 0 ) else
8423: LD_VAR 0 2
8427: PPUSH
8428: LD_INT 0
8430: PPUSH
8431: CALL_OW 109
8435: GO 8646
// if tag <= attackFormula [ 1 ] then
8437: LD_VAR 0 4
8441: PUSH
8442: LD_VAR 0 6
8446: PUSH
8447: LD_INT 1
8449: ARRAY
8450: LESSEQUAL
8451: IFFALSE 8612
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
8453: LD_VAR 0 2
8457: PPUSH
8458: LD_VAR 0 6
8462: PUSH
8463: LD_INT 1
8465: ARRAY
8466: PUSH
8467: LD_VAR 0 4
8471: ARRAY
8472: PUSH
8473: LD_INT 1
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 6
8481: PUSH
8482: LD_INT 1
8484: ARRAY
8485: PUSH
8486: LD_VAR 0 4
8490: ARRAY
8491: PUSH
8492: LD_INT 2
8494: ARRAY
8495: PPUSH
8496: CALL_OW 297
8500: PUSH
8501: LD_INT 6
8503: GREATER
8504: IFFALSE 8555
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8506: LD_VAR 0 2
8510: PPUSH
8511: LD_VAR 0 6
8515: PUSH
8516: LD_INT 1
8518: ARRAY
8519: PUSH
8520: LD_VAR 0 4
8524: ARRAY
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_VAR 0 6
8534: PUSH
8535: LD_INT 1
8537: ARRAY
8538: PUSH
8539: LD_VAR 0 4
8543: ARRAY
8544: PUSH
8545: LD_INT 2
8547: ARRAY
8548: PPUSH
8549: CALL_OW 114
8553: GO 8610
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8555: LD_INT 81
8557: PUSH
8558: LD_INT 1
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: LD_INT 91
8567: PUSH
8568: LD_VAR 0 2
8572: PUSH
8573: LD_INT 10
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PPUSH
8585: CALL_OW 69
8589: NOT
8590: IFFALSE 8610
// SetTag ( i , tag + 1 ) ;
8592: LD_VAR 0 2
8596: PPUSH
8597: LD_VAR 0 4
8601: PUSH
8602: LD_INT 1
8604: PLUS
8605: PPUSH
8606: CALL_OW 109
// end else
8610: GO 8646
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_INT 81
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PPUSH
8627: CALL_OW 69
8631: PPUSH
8632: LD_VAR 0 2
8636: PPUSH
8637: CALL_OW 74
8641: PPUSH
8642: CALL_OW 115
// end ; end ;
8646: GO 8267
8648: POP
8649: POP
// end ; if sci then
8650: LD_VAR 0 8
8654: IFFALSE 8813
// begin if not sol and not mech then
8656: LD_VAR 0 7
8660: NOT
8661: PUSH
8662: LD_VAR 0 9
8666: NOT
8667: AND
8668: IFFALSE 8720
// begin for i in sci do
8670: LD_ADDR_VAR 0 2
8674: PUSH
8675: LD_VAR 0 8
8679: PUSH
8680: FOR_IN
8681: IFFALSE 8716
// begin usForces := usForces union i ;
8683: LD_ADDR_EXP 40
8687: PUSH
8688: LD_EXP 40
8692: PUSH
8693: LD_VAR 0 2
8697: UNION
8698: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8699: LD_VAR 0 2
8703: PPUSH
8704: LD_INT 34
8706: PPUSH
8707: LD_INT 68
8709: PPUSH
8710: CALL_OW 111
// end ;
8714: GO 8680
8716: POP
8717: POP
// end else
8718: GO 8813
// for i in sci do
8720: LD_ADDR_VAR 0 2
8724: PUSH
8725: LD_VAR 0 8
8729: PUSH
8730: FOR_IN
8731: IFFALSE 8811
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 8 then
8733: LD_VAR 0 2
8737: PPUSH
8738: LD_VAR 0 6
8742: PUSH
8743: LD_INT 2
8745: ARRAY
8746: PUSH
8747: LD_INT 1
8749: ARRAY
8750: PPUSH
8751: LD_VAR 0 6
8755: PUSH
8756: LD_INT 2
8758: ARRAY
8759: PUSH
8760: LD_INT 2
8762: ARRAY
8763: PPUSH
8764: CALL_OW 297
8768: PUSH
8769: LD_INT 8
8771: GREATER
8772: IFFALSE 8809
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8774: LD_VAR 0 2
8778: PPUSH
8779: LD_VAR 0 6
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PPUSH
8792: LD_VAR 0 6
8796: PUSH
8797: LD_INT 2
8799: ARRAY
8800: PUSH
8801: LD_INT 2
8803: ARRAY
8804: PPUSH
8805: CALL_OW 111
8809: GO 8730
8811: POP
8812: POP
// end ; if tanks and mech then
8813: LD_VAR 0 10
8817: PUSH
8818: LD_VAR 0 9
8822: AND
8823: IFFALSE 9428
// begin for i in mech do
8825: LD_ADDR_VAR 0 2
8829: PUSH
8830: LD_VAR 0 9
8834: PUSH
8835: FOR_IN
8836: IFFALSE 9426
// begin tag := GetTag ( i ) ;
8838: LD_ADDR_VAR 0 4
8842: PUSH
8843: LD_VAR 0 2
8847: PPUSH
8848: CALL_OW 110
8852: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8853: LD_ADDR_VAR 0 11
8857: PUSH
8858: LD_VAR 0 2
8862: PPUSH
8863: CALL_OW 310
8867: ST_TO_ADDR
// if not tag then
8868: LD_VAR 0 4
8872: NOT
8873: IFFALSE 9186
// begin if veh then
8875: LD_VAR 0 11
8879: IFFALSE 9028
// begin if GetLives ( veh ) = 1000 and GetFuel ( veh ) > 60 then
8881: LD_VAR 0 11
8885: PPUSH
8886: CALL_OW 256
8890: PUSH
8891: LD_INT 1000
8893: EQUAL
8894: PUSH
8895: LD_VAR 0 11
8899: PPUSH
8900: CALL_OW 261
8904: PUSH
8905: LD_INT 60
8907: GREATER
8908: AND
8909: IFFALSE 8925
// SetTag ( i , 1 ) else
8911: LD_VAR 0 2
8915: PPUSH
8916: LD_INT 1
8918: PPUSH
8919: CALL_OW 109
8923: GO 9026
// if GetDistUnitXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_VAR 0 6
8934: PUSH
8935: LD_INT 3
8937: ARRAY
8938: PUSH
8939: LD_INT 1
8941: ARRAY
8942: PPUSH
8943: LD_VAR 0 6
8947: PUSH
8948: LD_INT 3
8950: ARRAY
8951: PUSH
8952: LD_INT 2
8954: ARRAY
8955: PPUSH
8956: CALL_OW 297
8960: PUSH
8961: LD_INT 7
8963: GREATER
8964: IFFALSE 9003
// ComMoveXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_VAR 0 6
8975: PUSH
8976: LD_INT 3
8978: ARRAY
8979: PUSH
8980: LD_INT 1
8982: ARRAY
8983: PPUSH
8984: LD_VAR 0 6
8988: PUSH
8989: LD_INT 3
8991: ARRAY
8992: PUSH
8993: LD_INT 2
8995: ARRAY
8996: PPUSH
8997: CALL_OW 111
9001: GO 9026
// begin ComExitVehicle ( i ) ;
9003: LD_VAR 0 2
9007: PPUSH
9008: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
9012: LD_VAR 0 2
9016: PPUSH
9017: LD_VAR 0 11
9021: PPUSH
9022: CALL_OW 189
// end ; end else
9026: GO 9184
// if GetLives ( i ) < 700 then
9028: LD_VAR 0 2
9032: PPUSH
9033: CALL_OW 256
9037: PUSH
9038: LD_INT 700
9040: LESS
9041: IFFALSE 9092
// begin usAttackers := usAttackers diff i ;
9043: LD_ADDR_EXP 43
9047: PUSH
9048: LD_EXP 43
9052: PUSH
9053: LD_VAR 0 2
9057: DIFF
9058: ST_TO_ADDR
// usForces := usForces union i ;
9059: LD_ADDR_EXP 40
9063: PUSH
9064: LD_EXP 40
9068: PUSH
9069: LD_VAR 0 2
9073: UNION
9074: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
9075: LD_VAR 0 2
9079: PPUSH
9080: LD_INT 34
9082: PPUSH
9083: LD_INT 68
9085: PPUSH
9086: CALL_OW 111
// end else
9090: GO 9184
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
9092: LD_VAR 0 10
9096: PPUSH
9097: LD_INT 58
9099: PUSH
9100: EMPTY
9101: LIST
9102: PUSH
9103: LD_INT 24
9105: PUSH
9106: LD_INT 1000
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PPUSH
9117: CALL_OW 72
9121: PUSH
9122: LD_VAR 0 2
9126: PPUSH
9127: CALL_OW 314
9131: NOT
9132: AND
9133: IFFALSE 9184
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) ;
9135: LD_VAR 0 2
9139: PPUSH
9140: LD_VAR 0 10
9144: PPUSH
9145: LD_INT 58
9147: PUSH
9148: EMPTY
9149: LIST
9150: PUSH
9151: LD_INT 24
9153: PUSH
9154: LD_INT 1000
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: CALL_OW 74
9179: PPUSH
9180: CALL_OW 120
// end else
9184: GO 9424
// begin if GetLives ( veh ) < 620 then
9186: LD_VAR 0 11
9190: PPUSH
9191: CALL_OW 256
9195: PUSH
9196: LD_INT 620
9198: LESS
9199: IFFALSE 9215
// SetTag ( i , 0 ) else
9201: LD_VAR 0 2
9205: PPUSH
9206: LD_INT 0
9208: PPUSH
9209: CALL_OW 109
9213: GO 9424
// if tag <= attackFormula [ 4 ] then
9215: LD_VAR 0 4
9219: PUSH
9220: LD_VAR 0 6
9224: PUSH
9225: LD_INT 4
9227: ARRAY
9228: LESSEQUAL
9229: IFFALSE 9390
// begin if GetDistUnitXY ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_VAR 0 6
9240: PUSH
9241: LD_INT 4
9243: ARRAY
9244: PUSH
9245: LD_VAR 0 4
9249: ARRAY
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: LD_VAR 0 6
9259: PUSH
9260: LD_INT 4
9262: ARRAY
9263: PUSH
9264: LD_VAR 0 4
9268: ARRAY
9269: PUSH
9270: LD_INT 2
9272: ARRAY
9273: PPUSH
9274: CALL_OW 297
9278: PUSH
9279: LD_INT 6
9281: GREATER
9282: IFFALSE 9333
// ComAgressiveMove ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9284: LD_VAR 0 2
9288: PPUSH
9289: LD_VAR 0 6
9293: PUSH
9294: LD_INT 4
9296: ARRAY
9297: PUSH
9298: LD_VAR 0 4
9302: ARRAY
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PPUSH
9308: LD_VAR 0 6
9312: PUSH
9313: LD_INT 4
9315: ARRAY
9316: PUSH
9317: LD_VAR 0 4
9321: ARRAY
9322: PUSH
9323: LD_INT 2
9325: ARRAY
9326: PPUSH
9327: CALL_OW 114
9331: GO 9388
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
9333: LD_INT 81
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 91
9345: PUSH
9346: LD_VAR 0 2
9350: PUSH
9351: LD_INT 10
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: NOT
9368: IFFALSE 9388
// SetTag ( i , tag + 1 ) ;
9370: LD_VAR 0 2
9374: PPUSH
9375: LD_VAR 0 4
9379: PUSH
9380: LD_INT 1
9382: PLUS
9383: PPUSH
9384: CALL_OW 109
// end else
9388: GO 9424
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9390: LD_VAR 0 2
9394: PPUSH
9395: LD_INT 81
9397: PUSH
9398: LD_INT 1
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 69
9409: PPUSH
9410: LD_VAR 0 2
9414: PPUSH
9415: CALL_OW 74
9419: PPUSH
9420: CALL_OW 115
// end ; end ;
9424: GO 8835
9426: POP
9427: POP
// end ; until not usAttackers ;
9428: LD_EXP 43
9432: NOT
9433: IFFALSE 8144
// end ; end_of_file
9435: LD_VAR 0 1
9439: RET
// export function Action ; var hasAll , i , tmp ; begin
9440: LD_INT 0
9442: PPUSH
9443: PPUSH
9444: PPUSH
9445: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9446: LD_ADDR_VAR 0 2
9450: PUSH
9451: LD_INT 22
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 21
9463: PUSH
9464: LD_INT 1
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 23
9473: PUSH
9474: LD_INT 2
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: LIST
9485: PPUSH
9486: CALL_OW 69
9490: PUSH
9491: LD_INT 7
9493: GREATEREQUAL
9494: ST_TO_ADDR
// Video ( true ) ;
9495: LD_INT 1
9497: PPUSH
9498: CALL 991 0 1
// CenterNowOnUnits ( Heike ) ;
9502: LD_EXP 24
9506: PPUSH
9507: CALL_OW 87
// wait ( 0 0$2 ) ;
9511: LD_INT 70
9513: PPUSH
9514: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9518: LD_EXP 32
9522: PPUSH
9523: LD_STRING DF-1-start
9525: PPUSH
9526: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9530: LD_EXP 24
9534: PPUSH
9535: LD_EXP 32
9539: PPUSH
9540: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9544: LD_EXP 24
9548: PPUSH
9549: LD_STRING DH-1-start
9551: PPUSH
9552: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9556: LD_EXP 33
9560: PPUSH
9561: LD_INT 92
9563: PPUSH
9564: LD_INT 21
9566: PPUSH
9567: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9571: LD_EXP 28
9575: PPUSH
9576: LD_INT 94
9578: PPUSH
9579: LD_INT 23
9581: PPUSH
9582: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9586: LD_EXP 36
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: LD_INT 90
9597: PPUSH
9598: LD_INT 23
9600: PPUSH
9601: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9605: LD_EXP 36
9609: PUSH
9610: LD_INT 2
9612: ARRAY
9613: PPUSH
9614: LD_INT 93
9616: PPUSH
9617: LD_INT 25
9619: PPUSH
9620: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9624: LD_EXP 36
9628: PPUSH
9629: LD_EXP 33
9633: PPUSH
9634: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9638: LD_EXP 33
9642: PUSH
9643: LD_EXP 28
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PPUSH
9652: LD_EXP 24
9656: PPUSH
9657: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9661: LD_EXP 24
9665: PPUSH
9666: LD_EXP 33
9670: PPUSH
9671: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9675: LD_INT 35
9677: PPUSH
9678: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9682: LD_EXP 33
9686: PPUSH
9687: LD_INT 92
9689: PPUSH
9690: LD_INT 21
9692: PPUSH
9693: CALL_OW 307
9697: IFFALSE 9675
// Say ( Omar , DO-1-start ) ;
9699: LD_EXP 33
9703: PPUSH
9704: LD_STRING DO-1-start
9706: PPUSH
9707: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9711: LD_EXP 24
9715: PPUSH
9716: LD_STRING DH-2-start
9718: PPUSH
9719: CALL_OW 88
// if hasAll then
9723: LD_VAR 0 2
9727: IFFALSE 9855
// begin Say ( Omar , DO-2-start ) ;
9729: LD_EXP 33
9733: PPUSH
9734: LD_STRING DO-2-start
9736: PPUSH
9737: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9741: LD_EXP 33
9745: PPUSH
9746: LD_STRING DO-3-start
9748: PPUSH
9749: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9753: LD_EXP 24
9757: PPUSH
9758: LD_STRING DH-3-start
9760: PPUSH
9761: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9765: LD_EXP 32
9769: PPUSH
9770: LD_STRING DF-2-start
9772: PPUSH
9773: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9777: LD_EXP 33
9781: PPUSH
9782: LD_EXP 32
9786: PPUSH
9787: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9791: LD_EXP 33
9795: PPUSH
9796: LD_STRING DO-4-start
9798: PPUSH
9799: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9803: LD_EXP 32
9807: PPUSH
9808: LD_STRING DF-3-start
9810: PPUSH
9811: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9815: LD_EXP 33
9819: PPUSH
9820: LD_STRING DO-5-start
9822: PPUSH
9823: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9827: LD_EXP 32
9831: PPUSH
9832: LD_STRING DF-4-start
9834: PPUSH
9835: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9839: LD_EXP 33
9843: PPUSH
9844: LD_EXP 24
9848: PPUSH
9849: CALL_OW 119
// end else
9853: GO 9955
// begin Say ( Omar , DO-2-start-a ) ;
9855: LD_EXP 33
9859: PPUSH
9860: LD_STRING DO-2-start-a
9862: PPUSH
9863: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9867: LD_EXP 33
9871: PPUSH
9872: LD_STRING DO-3-start-a
9874: PPUSH
9875: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9879: LD_EXP 24
9883: PPUSH
9884: LD_STRING DH-3-start-a
9886: PPUSH
9887: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9891: LD_EXP 32
9895: PPUSH
9896: LD_STRING DF-2-start-a
9898: PPUSH
9899: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9903: LD_EXP 33
9907: PPUSH
9908: LD_EXP 32
9912: PPUSH
9913: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9917: LD_EXP 33
9921: PPUSH
9922: LD_STRING DO-4-start-a
9924: PPUSH
9925: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9929: LD_EXP 32
9933: PPUSH
9934: LD_STRING DF-3-start-a
9936: PPUSH
9937: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9941: LD_EXP 33
9945: PPUSH
9946: LD_EXP 24
9950: PPUSH
9951: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9955: LD_INT 10
9957: PPUSH
9958: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9962: LD_EXP 33
9966: PPUSH
9967: LD_STRING DO-1-mission
9969: PPUSH
9970: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9974: LD_EXP 33
9978: PPUSH
9979: LD_STRING DO-2-mission
9981: PPUSH
9982: CALL_OW 88
// if not hasAll then
9986: LD_VAR 0 2
9990: NOT
9991: IFFALSE 10005
// Say ( Omar , DO-3-mission ) ;
9993: LD_EXP 33
9997: PPUSH
9998: LD_STRING DO-3-mission
10000: PPUSH
10001: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
10005: LD_EXP 33
10009: PPUSH
10010: LD_STRING DO-4-mission
10012: PPUSH
10013: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
10017: LD_EXP 24
10021: PPUSH
10022: LD_STRING DH-1-mission
10024: PPUSH
10025: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
10029: LD_EXP 32
10033: PPUSH
10034: LD_STRING DF-1-mission
10036: PPUSH
10037: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
10041: LD_EXP 33
10045: PPUSH
10046: LD_STRING DO-5-mission
10048: PPUSH
10049: CALL_OW 88
// if not hasAll then
10053: LD_VAR 0 2
10057: NOT
10058: IFFALSE 10193
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
10060: LD_ADDR_VAR 0 4
10064: PUSH
10065: LD_INT 22
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 21
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 23
10087: PUSH
10088: LD_INT 2
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: PPUSH
10100: CALL_OW 69
10104: ST_TO_ADDR
// for i := 7 downto tmp do
10105: LD_ADDR_VAR 0 3
10109: PUSH
10110: DOUBLE
10111: LD_INT 7
10113: INC
10114: ST_TO_ADDR
10115: LD_VAR 0 4
10119: PUSH
10120: FOR_DOWNTO
10121: IFFALSE 10191
// begin if omarSquad < 3 then
10123: LD_EXP 36
10127: PUSH
10128: LD_INT 3
10130: LESS
10131: IFFALSE 10135
// break ;
10133: GO 10191
// SetSide ( omarSquad [ 3 ] , 2 ) ;
10135: LD_EXP 36
10139: PUSH
10140: LD_INT 3
10142: ARRAY
10143: PPUSH
10144: LD_INT 2
10146: PPUSH
10147: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
10151: LD_ADDR_EXP 38
10155: PUSH
10156: LD_EXP 38
10160: PUSH
10161: LD_EXP 36
10165: PUSH
10166: LD_INT 3
10168: ARRAY
10169: UNION
10170: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
10171: LD_ADDR_EXP 36
10175: PUSH
10176: LD_EXP 36
10180: PPUSH
10181: LD_INT 3
10183: PPUSH
10184: CALL_OW 3
10188: ST_TO_ADDR
// end ;
10189: GO 10120
10191: POP
10192: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10193: LD_EXP 33
10197: PUSH
10198: LD_EXP 36
10202: ADD
10203: PPUSH
10204: LD_INT 103
10206: PPUSH
10207: LD_INT 9
10209: PPUSH
10210: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10214: LD_VAR 0 2
10218: PUSH
10219: LD_EXP 29
10223: PPUSH
10224: CALL_OW 302
10228: AND
10229: IFFALSE 10290
// begin wait ( 0 0$3 ) ;
10231: LD_INT 105
10233: PPUSH
10234: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10238: LD_EXP 29
10242: PPUSH
10243: LD_EXP 32
10247: PPUSH
10248: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10252: LD_EXP 29
10256: PPUSH
10257: LD_STRING DK-1-side
10259: PPUSH
10260: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10264: LD_EXP 32
10268: PPUSH
10269: LD_EXP 29
10273: PPUSH
10274: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10278: LD_EXP 32
10282: PPUSH
10283: LD_STRING DF-1-side
10285: PPUSH
10286: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10290: LD_INT 22
10292: PUSH
10293: LD_INT 2
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PPUSH
10300: CALL_OW 69
10304: PPUSH
10305: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10309: LD_EXP 32
10313: PUSH
10314: LD_EXP 35
10318: ADD
10319: PPUSH
10320: LD_INT 108
10322: PPUSH
10323: LD_INT 62
10325: PPUSH
10326: CALL_OW 111
// gameStarted := true ;
10330: LD_ADDR_EXP 3
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10338: LD_INT 105
10340: PPUSH
10341: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10345: LD_EXP 24
10349: PPUSH
10350: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10354: LD_EXP 24
10358: PPUSH
10359: LD_EXP 28
10363: PPUSH
10364: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10368: LD_INT 22
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PPUSH
10378: CALL_OW 69
10382: PUSH
10383: LD_EXP 24
10387: DIFF
10388: PPUSH
10389: LD_EXP 24
10393: PPUSH
10394: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10398: LD_EXP 24
10402: PPUSH
10403: LD_STRING DH-1-explore
10405: PPUSH
10406: CALL_OW 88
// if Givi then
10410: LD_EXP 25
10414: IFFALSE 10430
// Say ( Givi , DG-1-explore ) else
10416: LD_EXP 25
10420: PPUSH
10421: LD_STRING DG-1-explore
10423: PPUSH
10424: CALL_OW 88
10428: GO 10467
// if heikeSecondSquad then
10430: LD_EXP 38
10434: IFFALSE 10467
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10436: LD_EXP 38
10440: PPUSH
10441: LD_INT 26
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PPUSH
10451: CALL_OW 72
10455: PUSH
10456: LD_INT 1
10458: ARRAY
10459: PPUSH
10460: LD_STRING DArm-1-explore
10462: PPUSH
10463: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10467: LD_EXP 28
10471: PPUSH
10472: LD_STRING DA-1-explore
10474: PPUSH
10475: CALL_OW 88
// if Sophia then
10479: LD_EXP 30
10483: IFFALSE 10561
// begin Say ( Sophia , DS-2-explore ) ;
10485: LD_EXP 30
10489: PPUSH
10490: LD_STRING DS-2-explore
10492: PPUSH
10493: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10497: LD_EXP 28
10501: PPUSH
10502: LD_STRING DA-2-explore
10504: PPUSH
10505: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10509: LD_EXP 30
10513: PPUSH
10514: LD_EXP 28
10518: PPUSH
10519: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10523: LD_EXP 28
10527: PPUSH
10528: LD_EXP 30
10532: PPUSH
10533: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10537: LD_EXP 30
10541: PPUSH
10542: LD_STRING DS-3-explore
10544: PPUSH
10545: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10549: LD_EXP 28
10553: PPUSH
10554: LD_STRING DA-3-explore
10556: PPUSH
10557: CALL_OW 88
// end ; if Mike then
10561: LD_EXP 26
10565: IFFALSE 10621
// begin Say ( Mike , DM-1-explore ) ;
10567: LD_EXP 26
10571: PPUSH
10572: LD_STRING DM-1-explore
10574: PPUSH
10575: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10579: LD_EXP 24
10583: PPUSH
10584: LD_STRING DH-2-explore
10586: PPUSH
10587: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10591: LD_EXP 26
10595: PPUSH
10596: LD_STRING DM-2-explore
10598: PPUSH
10599: CALL_OW 88
// if Kaia then
10603: LD_EXP 29
10607: IFFALSE 10621
// Say ( Kaia , DK-1-explore ) ;
10609: LD_EXP 29
10613: PPUSH
10614: LD_STRING DK-1-explore
10616: PPUSH
10617: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10621: LD_INT 22
10623: PUSH
10624: LD_INT 2
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PPUSH
10636: CALL_OW 139
// Video ( false ) ;
10640: LD_INT 0
10642: PPUSH
10643: CALL 991 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10647: LD_STRING BuildBase
10649: PPUSH
10650: CALL_OW 337
// SaveForQuickRestart ;
10654: CALL_OW 22
// end ;
10658: LD_VAR 0 1
10662: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10663: LD_EXP 5
10667: NOT
10668: PUSH
10669: LD_EXP 6
10673: NOT
10674: AND
10675: PUSH
10676: LD_INT 5
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_INT 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PPUSH
10689: CALL_OW 70
10693: AND
10694: PUSH
10695: LD_EXP 6
10699: NOT
10700: AND
10701: IFFALSE 10786
10703: GO 10705
10705: DISABLE
// begin if Mike then
10706: LD_EXP 26
10710: IFFALSE 10726
// Say ( Mike , DM-1-scout ) else
10712: LD_EXP 26
10716: PPUSH
10717: LD_STRING DM-1-scout
10719: PPUSH
10720: CALL_OW 88
10724: GO 10757
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10726: LD_EXP 38
10730: PPUSH
10731: LD_INT 26
10733: PUSH
10734: LD_INT 1
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 72
10745: PUSH
10746: LD_INT 1
10748: ARRAY
10749: PPUSH
10750: LD_STRING DArm-1-explore
10752: PPUSH
10753: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10757: LD_INT 54
10759: PPUSH
10760: LD_INT 35
10762: PPUSH
10763: LD_INT 2
10765: PPUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10773: LD_INT 54
10775: PPUSH
10776: LD_INT 35
10778: PPUSH
10779: LD_INT 2
10781: PPUSH
10782: CALL_OW 331
// end ;
10786: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10787: LD_INT 6
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 70
10804: PUSH
10805: LD_EXP 6
10809: NOT
10810: AND
10811: IFFALSE 11065
10813: GO 10815
10815: DISABLE
10816: LD_INT 0
10818: PPUSH
10819: PPUSH
10820: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10821: LD_ADDR_VAR 0 1
10825: PUSH
10826: LD_EXP 38
10830: PPUSH
10831: LD_INT 26
10833: PUSH
10834: LD_INT 1
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PPUSH
10841: CALL_OW 72
10845: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_EXP 38
10855: PPUSH
10856: LD_INT 26
10858: PUSH
10859: LD_INT 2
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PPUSH
10866: CALL_OW 72
10870: ST_TO_ADDR
// DialogueOn ;
10871: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10875: LD_INT 36
10877: PPUSH
10878: LD_INT 22
10880: PPUSH
10881: LD_INT 2
10883: PPUSH
10884: LD_INT 8
10886: PPUSH
10887: CALL_OW 330
// dwait ( 0 0$1 ) ;
10891: LD_INT 35
10893: PPUSH
10894: CALL_OW 68
// speakerOk := false ;
10898: LD_ADDR_VAR 0 3
10902: PUSH
10903: LD_INT 0
10905: ST_TO_ADDR
// if Mike then
10906: LD_EXP 26
10910: IFFALSE 10932
// speakerOk := Say ( Mike , DM-1-spot ) else
10912: LD_ADDR_VAR 0 3
10916: PUSH
10917: LD_EXP 26
10921: PPUSH
10922: LD_STRING DM-1-spot
10924: PPUSH
10925: CALL_OW 88
10929: ST_TO_ADDR
10930: GO 10960
// if randomMen then
10932: LD_VAR 0 1
10936: IFFALSE 10960
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: LD_VAR 0 1
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: PPUSH
10952: LD_STRING DArm-1-spot-a
10954: PPUSH
10955: CALL_OW 88
10959: ST_TO_ADDR
// if speakerOk then
10960: LD_VAR 0 3
10964: IFFALSE 11008
// begin if Givi then
10966: LD_EXP 25
10970: IFFALSE 10986
// Say ( Givi , DG-1-spot ) else
10972: LD_EXP 25
10976: PPUSH
10977: LD_STRING DG-1-spot
10979: PPUSH
10980: CALL_OW 88
10984: GO 11008
// if randomWomen then
10986: LD_VAR 0 2
10990: IFFALSE 11008
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10992: LD_VAR 0 2
10996: PUSH
10997: LD_INT 1
10999: ARRAY
11000: PPUSH
11001: LD_STRING DArf-1-spot-a
11003: PPUSH
11004: CALL_OW 88
// end ; if Mike then
11008: LD_EXP 26
11012: IFFALSE 11028
// Say ( Heike , DH-1-spot ) else
11014: LD_EXP 24
11018: PPUSH
11019: LD_STRING DH-1-spot
11021: PPUSH
11022: CALL_OW 88
11026: GO 11040
// Say ( Heike , DH-1-spot-a ) ;
11028: LD_EXP 24
11032: PPUSH
11033: LD_STRING DH-1-spot-a
11035: PPUSH
11036: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11040: LD_INT 36
11042: PPUSH
11043: LD_INT 22
11045: PPUSH
11046: LD_INT 2
11048: PPUSH
11049: CALL_OW 331
// DialogueOff ;
11053: CALL_OW 7
// americanBaseSpoted := true ;
11057: LD_ADDR_EXP 5
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// end ;
11065: PPOPN 3
11067: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11068: LD_EXP 5
11072: NOT
11073: PUSH
11074: LD_INT 22
11076: PUSH
11077: LD_INT 2
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 101
11086: PUSH
11087: LD_INT 1
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PPUSH
11098: CALL_OW 69
11102: AND
11103: PUSH
11104: LD_EXP 6
11108: NOT
11109: AND
11110: IFFALSE 11196
11112: GO 11114
11114: DISABLE
11115: LD_INT 0
11117: PPUSH
// begin americanBaseSpoted := true ;
11118: LD_ADDR_EXP 5
11122: PUSH
11123: LD_INT 1
11125: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11126: LD_ADDR_VAR 0 1
11130: PUSH
11131: LD_EXP 38
11135: PPUSH
11136: LD_INT 26
11138: PUSH
11139: LD_INT 1
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PPUSH
11146: CALL_OW 72
11150: ST_TO_ADDR
// if not randomMen then
11151: LD_VAR 0 1
11155: NOT
11156: IFFALSE 11160
// exit ;
11158: GO 11196
// DialogueOn ;
11160: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11164: LD_VAR 0 1
11168: PUSH
11169: LD_INT 1
11171: ARRAY
11172: PPUSH
11173: LD_STRING DArm-1-spot-a
11175: PPUSH
11176: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11180: LD_EXP 24
11184: PPUSH
11185: LD_STRING DH-1-spot-a
11187: PPUSH
11188: CALL_OW 88
// DialogueOff ;
11192: CALL_OW 7
// end ;
11196: PPOPN 1
11198: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var i , p ;
11199: LD_INT 11
11201: PPUSH
11202: CALL_OW 255
11206: PUSH
11207: LD_INT 2
11209: EQUAL
11210: PUSH
11211: LD_INT 7
11213: PPUSH
11214: LD_INT 22
11216: PUSH
11217: LD_INT 1
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: LD_INT 50
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 30
11239: PUSH
11240: LD_INT 31
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 70
11256: OR
11257: PUSH
11258: LD_INT 7
11260: PPUSH
11261: LD_INT 22
11263: PUSH
11264: LD_INT 2
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 70
11275: PUSH
11276: LD_INT 1
11278: GREATER
11279: OR
11280: PUSH
11281: LD_INT 6
11283: PPUSH
11284: LD_INT 22
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PPUSH
11294: CALL_OW 70
11298: OR
11299: IFFALSE 11835
11301: GO 11303
11303: DISABLE
11304: LD_INT 0
11306: PPUSH
11307: PPUSH
// begin americanBaseCaptured := true ;
11308: LD_ADDR_EXP 6
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11316: LD_INT 105
11318: PPUSH
11319: CALL_OW 67
// if IsOk ( usCommander ) then
11323: LD_EXP 41
11327: PPUSH
11328: CALL_OW 302
11332: IFFALSE 11395
// begin usForces := usForces union usCommander ;
11334: LD_ADDR_EXP 40
11338: PUSH
11339: LD_EXP 40
11343: PUSH
11344: LD_EXP 41
11348: UNION
11349: ST_TO_ADDR
// if FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) then
11350: LD_INT 6
11352: PPUSH
11353: LD_INT 22
11355: PUSH
11356: LD_INT 2
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 70
11367: IFFALSE 11383
// Say ( usCommander , DUsm-2-assault ) else
11369: LD_EXP 41
11373: PPUSH
11374: LD_STRING DUsm-2-assault
11376: PPUSH
11377: CALL_OW 88
11381: GO 11395
// Say ( usCommander , DUsm-1-assault ) ;
11383: LD_EXP 41
11387: PPUSH
11388: LD_STRING DUsm-1-assault
11390: PPUSH
11391: CALL_OW 88
// end ; for i in usForces do
11395: LD_ADDR_VAR 0 1
11399: PUSH
11400: LD_EXP 40
11404: PUSH
11405: FOR_IN
11406: IFFALSE 11445
// begin if IsInUnit ( i ) then
11408: LD_VAR 0 1
11412: PPUSH
11413: CALL_OW 310
11417: IFFALSE 11428
// ComExitBuilding ( i ) ;
11419: LD_VAR 0 1
11423: PPUSH
11424: CALL_OW 122
// AddComMoveXY ( i , 34 , 67 ) ;
11428: LD_VAR 0 1
11432: PPUSH
11433: LD_INT 34
11435: PPUSH
11436: LD_INT 67
11438: PPUSH
11439: CALL_OW 171
// end ;
11443: GO 11405
11445: POP
11446: POP
// Say ( Heike , DH-1-assault ) ;
11447: LD_EXP 24
11451: PPUSH
11452: LD_STRING DH-1-assault
11454: PPUSH
11455: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11459: LD_INT 35
11461: PPUSH
11462: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11466: LD_VAR 0 1
11470: PPUSH
11471: LD_INT 34
11473: PPUSH
11474: LD_INT 67
11476: PPUSH
11477: CALL_OW 111
// until not usForces ;
11481: LD_EXP 40
11485: NOT
11486: IFFALSE 11459
// music_nat := 2 ;
11488: LD_ADDR_OWVAR 71
11492: PUSH
11493: LD_INT 2
11495: ST_TO_ADDR
// music_class := music_victory ;
11496: LD_ADDR_OWVAR 72
11500: PUSH
11501: LD_INT 4
11503: ST_TO_ADDR
// if not americanHasEscaped then
11504: LD_EXP 7
11508: NOT
11509: IFFALSE 11523
// Say ( Heike , DH-2-assault ) ;
11511: LD_EXP 24
11515: PPUSH
11516: LD_STRING DH-2-assault
11518: PPUSH
11519: CALL_OW 88
// wait ( 0 0$2 ) ;
11523: LD_INT 70
11525: PPUSH
11526: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11530: LD_INT 35
11532: PPUSH
11533: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11537: LD_INT 22
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 21
11549: PUSH
11550: LD_INT 1
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 3
11559: PUSH
11560: LD_INT 50
11562: PUSH
11563: EMPTY
11564: LIST
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: PPUSH
11575: CALL_OW 69
11579: NOT
11580: IFFALSE 11530
// Video ( true ) ;
11582: LD_INT 1
11584: PPUSH
11585: CALL 991 0 1
// if not GetSide ( usDepot ) = 2 then
11589: LD_INT 11
11591: PPUSH
11592: CALL_OW 255
11596: PUSH
11597: LD_INT 2
11599: EQUAL
11600: NOT
11601: IFFALSE 11613
// SetSide ( usDepot , 2 ) ;
11603: LD_INT 11
11605: PPUSH
11606: LD_INT 2
11608: PPUSH
11609: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11613: LD_INT 35
11615: PPUSH
11616: LD_INT 22
11618: PPUSH
11619: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11623: LD_EXP 24
11627: PPUSH
11628: LD_INT 35
11630: PPUSH
11631: LD_INT 22
11633: PPUSH
11634: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11638: LD_EXP 24
11642: PPUSH
11643: LD_INT 38
11645: PPUSH
11646: LD_INT 25
11648: PPUSH
11649: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11653: LD_EXP 37
11657: PUSH
11658: LD_EXP 38
11662: UNION
11663: PPUSH
11664: LD_INT 39
11666: PPUSH
11667: LD_INT 26
11669: PPUSH
11670: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11674: LD_EXP 37
11678: PUSH
11679: LD_EXP 38
11683: UNION
11684: PPUSH
11685: LD_EXP 24
11689: PPUSH
11690: CALL_OW 179
// p := 0 ;
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_INT 0
11701: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11702: LD_INT 35
11704: PPUSH
11705: CALL_OW 67
// p := p + 1 ;
11709: LD_ADDR_VAR 0 2
11713: PUSH
11714: LD_VAR 0 2
11718: PUSH
11719: LD_INT 1
11721: PLUS
11722: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11723: LD_EXP 24
11727: PPUSH
11728: CALL_OW 314
11732: NOT
11733: PUSH
11734: LD_VAR 0 2
11738: PUSH
11739: LD_INT 10
11741: GREATER
11742: OR
11743: IFFALSE 11702
// Say ( Heike , DH-1-capture ) ;
11745: LD_EXP 24
11749: PPUSH
11750: LD_STRING DH-1-capture
11752: PPUSH
11753: CALL_OW 88
// if Markov then
11757: LD_EXP 31
11761: IFFALSE 11775
// Say ( Markov , DMar-1-capture ) ;
11763: LD_EXP 31
11767: PPUSH
11768: LD_STRING DMar-1-capture
11770: PPUSH
11771: CALL_OW 88
// if Sophia then
11775: LD_EXP 30
11779: IFFALSE 11805
// begin Say ( Heike , DH-2-capture ) ;
11781: LD_EXP 24
11785: PPUSH
11786: LD_STRING DH-2-capture
11788: PPUSH
11789: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11793: LD_EXP 30
11797: PPUSH
11798: LD_STRING DS-1-capture
11800: PPUSH
11801: CALL_OW 88
// end ; Video ( false ) ;
11805: LD_INT 0
11807: PPUSH
11808: CALL 991 0 1
// music_nat := music_auto ;
11812: LD_ADDR_OWVAR 71
11816: PUSH
11817: LD_INT 0
11819: ST_TO_ADDR
// music_class := music_auto ;
11820: LD_ADDR_OWVAR 72
11824: PUSH
11825: LD_INT 0
11827: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11828: LD_STRING ConstructBase
11830: PPUSH
11831: CALL_OW 337
// end ;
11835: PPOPN 2
11837: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11838: LD_INT 22
11840: PUSH
11841: LD_INT 2
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 30
11850: PUSH
11851: LD_INT 2
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: LD_INT 57
11863: PUSH
11864: EMPTY
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: IFFALSE 12123
11882: GO 11884
11884: DISABLE
// begin workshopBuilded := true ;
11885: LD_ADDR_EXP 9
11889: PUSH
11890: LD_INT 1
11892: ST_TO_ADDR
// if IsOk ( Markov ) then
11893: LD_EXP 31
11897: PPUSH
11898: CALL_OW 302
11902: IFFALSE 11961
// begin Say ( Heike , DH-1-shop-a ) ;
11904: LD_EXP 24
11908: PPUSH
11909: LD_STRING DH-1-shop-a
11911: PPUSH
11912: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11916: LD_INT 47
11918: PPUSH
11919: LD_INT 2
11921: PPUSH
11922: CALL_OW 321
11926: PUSH
11927: LD_INT 2
11929: EQUAL
11930: PUSH
11931: LD_INT 45
11933: PPUSH
11934: LD_INT 2
11936: PPUSH
11937: CALL_OW 321
11941: PUSH
11942: LD_INT 2
11944: EQUAL
11945: AND
11946: NOT
11947: IFFALSE 11961
// Say ( Markov , DMar-1-shop-a ) ;
11949: LD_EXP 31
11953: PPUSH
11954: LD_STRING DMar-1-shop-a
11956: PPUSH
11957: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11961: LD_INT 35
11963: PPUSH
11964: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ;
11968: LD_INT 47
11970: PPUSH
11971: LD_INT 2
11973: PPUSH
11974: CALL_OW 321
11978: PUSH
11979: LD_INT 2
11981: EQUAL
11982: PUSH
11983: LD_INT 45
11985: PPUSH
11986: LD_INT 2
11988: PPUSH
11989: CALL_OW 321
11993: PUSH
11994: LD_INT 2
11996: EQUAL
11997: AND
11998: IFFALSE 11961
// DialogueOn ;
12000: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12004: LD_EXP 31
12008: PPUSH
12009: LD_STRING DMar-1-shop
12011: PPUSH
12012: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12016: LD_EXP 24
12020: PPUSH
12021: LD_STRING DH-1-shop
12023: PPUSH
12024: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12028: LD_EXP 31
12032: PPUSH
12033: LD_STRING DMar-2-shop
12035: PPUSH
12036: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12040: LD_EXP 31
12044: PPUSH
12045: LD_STRING DMar-3-shop
12047: PPUSH
12048: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12052: LD_EXP 24
12056: PPUSH
12057: LD_STRING DH-2-shop
12059: PPUSH
12060: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12064: LD_EXP 31
12068: PPUSH
12069: LD_STRING DMar-4-shop
12071: PPUSH
12072: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12076: LD_EXP 24
12080: PPUSH
12081: LD_STRING DH-3-shop
12083: PPUSH
12084: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12088: LD_EXP 31
12092: PPUSH
12093: LD_STRING DMar-5-shop
12095: PPUSH
12096: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12100: LD_EXP 24
12104: PPUSH
12105: LD_STRING DH-4-shop
12107: PPUSH
12108: CALL_OW 88
// DialogueOff ;
12112: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
12116: LD_STRING ConstructVeh
12118: PPUSH
12119: CALL_OW 337
// end ;
12123: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12124: LD_INT 2
12126: PPUSH
12127: LD_INT 2
12129: PPUSH
12130: LD_INT 1
12132: PPUSH
12133: CALL 1162 0 3
12137: PUSH
12138: LD_INT 0
12140: EQUAL
12141: IFFALSE 12153
12143: GO 12145
12145: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12146: LD_STRING Techs
12148: PPUSH
12149: CALL_OW 337
12153: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12154: LD_EXP 31
12158: PPUSH
12159: CALL_OW 302
12163: PUSH
12164: LD_INT 22
12166: PUSH
12167: LD_INT 2
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: LD_INT 34
12179: PUSH
12180: LD_INT 22
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 35
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PPUSH
12206: CALL_OW 69
12210: AND
12211: IFFALSE 12318
12213: GO 12215
12215: DISABLE
// begin DialogueOn ;
12216: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12220: LD_INT 22
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 2
12232: PUSH
12233: LD_INT 34
12235: PUSH
12236: LD_INT 22
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 35
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 69
12266: PPUSH
12267: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12271: LD_INT 10
12273: PPUSH
12274: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12278: LD_EXP 24
12282: PPUSH
12283: LD_STRING DH-1-bal
12285: PPUSH
12286: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12290: LD_EXP 31
12294: PPUSH
12295: LD_STRING DMar-1-bal
12297: PPUSH
12298: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12302: LD_EXP 24
12306: PPUSH
12307: LD_STRING DH-2-bal
12309: PPUSH
12310: CALL_OW 88
// DialogueOff ;
12314: CALL_OW 7
// end ;
12318: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12319: LD_EXP 28
12323: PPUSH
12324: CALL_OW 302
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 30
12341: PUSH
12342: LD_INT 6
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 69
12357: AND
12358: IFFALSE 12419
12360: GO 12362
12362: DISABLE
// begin DialogueOn ;
12363: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12367: LD_EXP 28
12371: PPUSH
12372: LD_STRING DA-1-lab
12374: PPUSH
12375: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12379: LD_EXP 24
12383: PPUSH
12384: LD_STRING DH-1-lab
12386: PPUSH
12387: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12391: LD_EXP 28
12395: PPUSH
12396: LD_STRING DA-2-lab
12398: PPUSH
12399: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12403: LD_EXP 24
12407: PPUSH
12408: LD_STRING DH-2-lab
12410: PPUSH
12411: CALL_OW 88
// DialogueOff ;
12415: CALL_OW 7
// end ;
12419: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
12420: LD_EXP 29
12424: PPUSH
12425: CALL_OW 302
12429: PUSH
12430: LD_INT 22
12432: PUSH
12433: LD_INT 2
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 15
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL_OW 69
12458: AND
12459: IFFALSE 12639
12461: GO 12463
12463: DISABLE
12464: LD_INT 0
12466: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12467: LD_ADDR_VAR 0 1
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_INT 2
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 25
12484: PUSH
12485: LD_INT 15
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 69
12500: ST_TO_ADDR
// Video ( true ) ;
12501: LD_INT 1
12503: PPUSH
12504: CALL 991 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: PPUSH
12517: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12521: LD_VAR 0 1
12525: PUSH
12526: LD_INT 1
12528: ARRAY
12529: PPUSH
12530: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12534: LD_VAR 0 1
12538: PUSH
12539: LD_INT 1
12541: ARRAY
12542: PPUSH
12543: LD_INT 35
12545: PPUSH
12546: LD_INT 28
12548: PPUSH
12549: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12553: LD_VAR 0 1
12557: PUSH
12558: LD_INT 1
12560: ARRAY
12561: PPUSH
12562: LD_INT 36
12564: PPUSH
12565: LD_INT 17
12567: PPUSH
12568: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
12572: LD_EXP 29
12576: PPUSH
12577: LD_STRING DK-1-apesol
12579: PPUSH
12580: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
12584: LD_EXP 28
12588: PPUSH
12589: LD_STRING DA-1-apesol
12591: PPUSH
12592: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12596: LD_EXP 29
12600: PPUSH
12601: LD_STRING DK-2-apesol
12603: PPUSH
12604: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12608: LD_EXP 28
12612: PPUSH
12613: LD_STRING DA-2-apesol
12615: PPUSH
12616: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12620: LD_EXP 29
12624: PPUSH
12625: LD_STRING DK-3-apesol
12627: PPUSH
12628: CALL_OW 88
// Video ( false ) ;
12632: LD_INT 0
12634: PPUSH
12635: CALL 991 0 1
// end ;
12639: PPOPN 1
12641: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
12642: LD_EXP 30
12646: PPUSH
12647: CALL_OW 302
12651: PUSH
12652: LD_INT 22
12654: PUSH
12655: LD_INT 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 25
12664: PUSH
12665: LD_INT 16
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PPUSH
12676: CALL_OW 69
12680: AND
12681: IFFALSE 12953
12683: GO 12685
12685: DISABLE
12686: LD_INT 0
12688: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12689: LD_ADDR_VAR 0 1
12693: PUSH
12694: LD_INT 22
12696: PUSH
12697: LD_INT 2
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 25
12706: PUSH
12707: LD_INT 16
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PPUSH
12718: CALL_OW 69
12722: ST_TO_ADDR
// Video ( true ) ;
12723: LD_INT 1
12725: PPUSH
12726: CALL 991 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12730: LD_INT 5
12732: PPUSH
12733: LD_INT 35
12735: PPUSH
12736: LD_INT 22
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12746: LD_EXP 30
12750: PPUSH
12751: LD_VAR 0 1
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12764: LD_VAR 0 1
12768: PUSH
12769: LD_INT 1
12771: ARRAY
12772: PPUSH
12773: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12777: LD_VAR 0 1
12781: PUSH
12782: LD_INT 1
12784: ARRAY
12785: PPUSH
12786: CALL_OW 122
// wait ( 0 0$2 ) ;
12790: LD_INT 70
12792: PPUSH
12793: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12797: LD_EXP 30
12801: PPUSH
12802: LD_STRING DS-1-apeeng
12804: PPUSH
12805: CALL_OW 88
// if IsOk ( Kamil ) then
12809: LD_EXP 27
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12946
// begin Say ( Kamil , DKam-1-apeeng ) ;
12820: LD_EXP 27
12824: PPUSH
12825: LD_STRING DKam-1-apeeng
12827: PPUSH
12828: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12832: LD_EXP 30
12836: PPUSH
12837: LD_STRING DS-2-apeeng
12839: PPUSH
12840: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12844: LD_EXP 27
12848: PPUSH
12849: LD_STRING DKam-2-apeeng
12851: PPUSH
12852: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12856: LD_EXP 30
12860: PPUSH
12861: LD_STRING DS-3-apeeng
12863: PPUSH
12864: CALL_OW 88
// if not IsOK ( Kaia ) then
12868: LD_EXP 29
12872: PPUSH
12873: CALL_OW 302
12877: NOT
12878: IFFALSE 12889
// begin Video ( false ) ;
12880: LD_INT 0
12882: PPUSH
12883: CALL 991 0 1
// exit ;
12887: GO 12953
// end ; Say ( Kaia , DK-1-apeeng ) ;
12889: LD_EXP 29
12893: PPUSH
12894: LD_STRING DK-1-apeeng
12896: PPUSH
12897: CALL_OW 88
// if not IsOk ( Givi ) then
12901: LD_EXP 25
12905: PPUSH
12906: CALL_OW 302
12910: NOT
12911: IFFALSE 12922
// begin Video ( false ) ;
12913: LD_INT 0
12915: PPUSH
12916: CALL 991 0 1
// exit ;
12920: GO 12953
// end ; Say ( Givi , DG-1-apeeng ) ;
12922: LD_EXP 25
12926: PPUSH
12927: LD_STRING DG-1-apeeng
12929: PPUSH
12930: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12934: LD_EXP 29
12938: PPUSH
12939: LD_STRING DK-2-apeeng
12941: PPUSH
12942: CALL_OW 88
// end ; Video ( false ) ;
12946: LD_INT 0
12948: PPUSH
12949: CALL 991 0 1
// end ;
12953: PPOPN 1
12955: END
// every 0 0$1 trigger farmerBaseReady do
12956: LD_EXP 4
12960: IFFALSE 13118
12962: GO 12964
12964: DISABLE
// begin DialogueOn ;
12965: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12969: LD_EXP 32
12973: PPUSH
12974: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12978: LD_EXP 32
12982: PPUSH
12983: LD_STRING DF-1-distribution
12985: PPUSH
12986: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12990: LD_EXP 24
12994: PPUSH
12995: LD_STRING DH-2-distribution
12997: PPUSH
12998: CALL_OW 88
// if IsOk ( Kaia ) then
13002: LD_EXP 29
13006: PPUSH
13007: CALL_OW 302
13011: IFFALSE 13072
// begin Say ( Kaia , DK-1-distribution ) ;
13013: LD_EXP 29
13017: PPUSH
13018: LD_STRING DK-1-distribution
13020: PPUSH
13021: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13025: LD_EXP 24
13029: PPUSH
13030: LD_STRING DH-1-distribution
13032: PPUSH
13033: CALL_OW 88
// if IsOk ( Givi ) then
13037: LD_EXP 25
13041: PPUSH
13042: CALL_OW 302
13046: IFFALSE 13072
// begin Say ( Givi , DG-1-distribution ) ;
13048: LD_EXP 25
13052: PPUSH
13053: LD_STRING DG-1-distribution
13055: PPUSH
13056: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13060: LD_EXP 24
13064: PPUSH
13065: LD_STRING DH-3-distribution
13067: PPUSH
13068: CALL_OW 88
// end ; end ; DialogueOff ;
13072: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13076: LD_STRING Crates1
13078: PPUSH
13079: CALL_OW 337
// farmerRequestedCrates := 300 ;
13083: LD_ADDR_EXP 13
13087: PUSH
13088: LD_INT 300
13090: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13091: LD_STRING FarmerCrates
13093: PPUSH
13094: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13098: LD_INT 10
13100: PPUSH
13101: LD_INT 1
13103: PPUSH
13104: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13108: LD_INT 108
13110: PPUSH
13111: LD_INT 61
13113: PPUSH
13114: CALL_OW 86
// end ;
13118: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13119: LD_EXP 6
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: LD_INT 2
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 3
13136: PUSH
13137: LD_INT 57
13139: PUSH
13140: EMPTY
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 2
13149: PUSH
13150: LD_INT 30
13152: PUSH
13153: LD_INT 6
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 30
13162: PUSH
13163: LD_INT 7
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: PPUSH
13180: CALL_OW 69
13184: AND
13185: PUSH
13186: LD_INT 22
13188: PUSH
13189: LD_INT 2
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 3
13198: PUSH
13199: LD_INT 57
13201: PUSH
13202: EMPTY
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: LD_INT 30
13211: PUSH
13212: LD_INT 4
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: AND
13229: IFFALSE 13393
13231: GO 13233
13233: DISABLE
13234: LD_INT 0
13236: PPUSH
// begin wait ( 0 0$10 ) ;
13237: LD_INT 350
13239: PPUSH
13240: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13244: LD_ADDR_VAR 0 1
13248: PUSH
13249: LD_EXP 38
13253: PPUSH
13254: LD_INT 26
13256: PUSH
13257: LD_INT 1
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 25
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PPUSH
13278: CALL_OW 72
13282: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13283: LD_EXP 24
13287: PPUSH
13288: LD_STRING DH-1-task
13290: PPUSH
13291: CALL_OW 88
// if IsOk ( Sophia ) then
13295: LD_EXP 30
13299: PPUSH
13300: CALL_OW 302
13304: IFFALSE 13344
// begin Say ( Sophia , DS-1-task ) ;
13306: LD_EXP 30
13310: PPUSH
13311: LD_STRING DS-1-task
13313: PPUSH
13314: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13318: LD_EXP 30
13322: PPUSH
13323: LD_STRING DS-2-task
13325: PPUSH
13326: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13330: LD_EXP 24
13334: PPUSH
13335: LD_STRING DH-2-task
13337: PPUSH
13338: CALL_OW 88
// end else
13342: GO 13378
// if eng then
13344: LD_VAR 0 1
13348: IFFALSE 13378
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13350: LD_VAR 0 1
13354: PUSH
13355: LD_INT 1
13357: ARRAY
13358: PPUSH
13359: LD_STRING DArm-1-task
13361: PPUSH
13362: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13366: LD_EXP 24
13370: PPUSH
13371: LD_STRING DH-2-task
13373: PPUSH
13374: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13378: LD_STRING BaseConstructed
13380: PPUSH
13381: CALL_OW 337
// allowConvoys := true ;
13385: LD_ADDR_EXP 11
13389: PUSH
13390: LD_INT 1
13392: ST_TO_ADDR
// end ;
13393: PPOPN 1
13395: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13396: LD_INT 22
13398: PUSH
13399: LD_INT 4
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 34
13408: PUSH
13409: LD_INT 12
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: IFFALSE 13592
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
13432: PPUSH
13433: PPUSH
// begin wait ( 0 0$2 ) ;
13434: LD_INT 70
13436: PPUSH
13437: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13441: LD_ADDR_VAR 0 1
13445: PUSH
13446: LD_INT 22
13448: PUSH
13449: LD_INT 4
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 34
13458: PUSH
13459: LD_INT 12
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PPUSH
13470: CALL_OW 69
13474: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13475: LD_ADDR_VAR 0 2
13479: PUSH
13480: LD_VAR 0 1
13484: PUSH
13485: LD_INT 1
13487: ARRAY
13488: PPUSH
13489: CALL_OW 250
13493: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13494: LD_ADDR_VAR 0 3
13498: PUSH
13499: LD_VAR 0 1
13503: PUSH
13504: LD_INT 1
13506: ARRAY
13507: PPUSH
13508: CALL_OW 251
13512: ST_TO_ADDR
// DialogueOn ;
13513: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13517: LD_VAR 0 2
13521: PPUSH
13522: LD_VAR 0 3
13526: PPUSH
13527: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13531: LD_VAR 0 2
13535: PPUSH
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_INT 2
13543: PPUSH
13544: LD_INT 6
13546: NEG
13547: PPUSH
13548: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13552: LD_INT 10
13554: PPUSH
13555: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13559: LD_EXP 24
13563: PPUSH
13564: LD_STRING DH-1-seecargo
13566: PPUSH
13567: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13571: LD_VAR 0 2
13575: PPUSH
13576: LD_VAR 0 3
13580: PPUSH
13581: LD_INT 2
13583: PPUSH
13584: CALL_OW 331
// DialogueOff ;
13588: CALL_OW 7
// end ;
13592: PPOPN 3
13594: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13595: LD_EXP 4
13599: PUSH
13600: LD_EXP 12
13604: PUSH
13605: LD_INT 300
13607: GREATEREQUAL
13608: AND
13609: IFFALSE 13681
13611: GO 13613
13613: DISABLE
// begin DialogueOn ;
13614: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13618: LD_EXP 32
13622: PPUSH
13623: LD_STRING DF-1-delivery-2
13625: PPUSH
13626: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13630: LD_EXP 24
13634: PPUSH
13635: LD_STRING DH-1-delivery-2
13637: PPUSH
13638: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13642: LD_EXP 32
13646: PPUSH
13647: LD_STRING DF-2-delivery-2
13649: PPUSH
13650: CALL_OW 94
// DialogueOff ;
13654: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13658: LD_STRING Crates2
13660: PPUSH
13661: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13665: LD_ADDR_EXP 14
13669: PUSH
13670: LD_INT 63000
13672: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13673: LD_ADDR_EXP 13
13677: PUSH
13678: LD_INT 600
13680: ST_TO_ADDR
// end ;
13681: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 do
13682: LD_EXP 4
13686: PUSH
13687: LD_EXP 12
13691: PUSH
13692: LD_INT 600
13694: GREATEREQUAL
13695: AND
13696: IFFALSE 13862
13698: GO 13700
13700: DISABLE
// begin DialogueOn ;
13701: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13705: LD_EXP 32
13709: PPUSH
13710: LD_STRING DF-1-delivery-3
13712: PPUSH
13713: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13717: LD_EXP 24
13721: PPUSH
13722: LD_STRING DH-1-delivery-3
13724: PPUSH
13725: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13729: LD_EXP 32
13733: PPUSH
13734: LD_STRING DF-2-delivery-3
13736: PPUSH
13737: CALL_OW 94
// if IsOk ( Kaia ) then
13741: LD_EXP 29
13745: PPUSH
13746: CALL_OW 302
13750: IFFALSE 13800
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13752: LD_EXP 29
13756: PPUSH
13757: LD_STRING DK-1-delivery-3
13759: PPUSH
13760: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13764: LD_EXP 24
13768: PPUSH
13769: LD_STRING DH-2-delivery-3
13771: PPUSH
13772: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13776: LD_EXP 25
13780: PPUSH
13781: LD_STRING DG-1-delivery-3
13783: PPUSH
13784: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13788: LD_EXP 26
13792: PPUSH
13793: LD_STRING DM-1-delivery-3
13795: PPUSH
13796: CALL_OW 88
// end ; DialogueOff ;
13800: CALL_OW 7
// if Difficulty = 2 then
13804: LD_OWVAR 67
13808: PUSH
13809: LD_INT 2
13811: EQUAL
13812: IFFALSE 13839
// begin ChangeMissionObjectives ( Crates3 ) ;
13814: LD_STRING Crates3
13816: PPUSH
13817: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13821: LD_ADDR_EXP 14
13825: PUSH
13826: LD_INT 63000
13828: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13829: LD_ADDR_EXP 13
13833: PUSH
13834: LD_INT 900
13836: ST_TO_ADDR
// end else
13837: GO 13862
// begin ChangeMissionObjectives ( Crates4 ) ;
13839: LD_STRING Crates4
13841: PPUSH
13842: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13846: LD_ADDR_EXP 14
13850: PUSH
13851: LD_INT 63000
13853: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13854: LD_ADDR_EXP 13
13858: PUSH
13859: LD_INT 1200
13861: ST_TO_ADDR
// end ; end ;
13862: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13863: LD_EXP 4
13867: PUSH
13868: LD_EXP 12
13872: PUSH
13873: LD_INT 600
13875: PUSH
13876: LD_INT 900
13878: PUSH
13879: LD_INT 1200
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: LD_OWVAR 67
13891: ARRAY
13892: GREATEREQUAL
13893: AND
13894: PUSH
13895: LD_EXP 13
13899: PUSH
13900: LD_EXP 14
13904: LESSEQUAL
13905: AND
13906: IFFALSE 13979
13908: GO 13910
13910: DISABLE
// begin retreatAllowed := true ;
13911: LD_ADDR_EXP 10
13915: PUSH
13916: LD_INT 1
13918: ST_TO_ADDR
// display_strings := [ ] ;
13919: LD_ADDR_OWVAR 47
13923: PUSH
13924: EMPTY
13925: ST_TO_ADDR
// DialogueOn ;
13926: CALL_OW 6
// Video ( true ) ;
13930: LD_INT 1
13932: PPUSH
13933: CALL 991 0 1
// SayRadio ( Omar , DO-radio-end ) ;
13937: LD_EXP 33
13941: PPUSH
13942: LD_STRING DO-radio-end
13944: PPUSH
13945: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13949: LD_EXP 24
13953: PPUSH
13954: LD_STRING DH-1-radio-end
13956: PPUSH
13957: CALL_OW 88
// Video ( false ) ;
13961: LD_INT 0
13963: PPUSH
13964: CALL 991 0 1
// DialogueOff ;
13968: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13972: LD_STRING Retreat
13974: PPUSH
13975: CALL_OW 337
// end ;
13979: END
// every 0 0$1 trigger retreatAllowed do
13980: LD_EXP 10
13984: IFFALSE 14003
13986: GO 13988
13988: DISABLE
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13989: LD_INT 10
13991: PPUSH
13992: LD_INT 0
13994: PPUSH
13995: CALL_OW 424
// StartCargoEvacuation ;
13999: CALL 4457 0 0
// end ;
14003: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14004: LD_EXP 10
14008: NOT
14009: PUSH
14010: LD_INT 5
14012: PPUSH
14013: CALL_OW 301
14017: AND
14018: IFFALSE 14042
14020: GO 14022
14022: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
14023: LD_EXP 32
14027: PPUSH
14028: LD_STRING DF-1-failure
14030: PPUSH
14031: CALL_OW 94
// YouLost ( FarmerDepot ) ;
14035: LD_STRING FarmerDepot
14037: PPUSH
14038: CALL_OW 104
// end ;
14042: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 do var i , max , tmp ;
14043: LD_EXP 10
14047: PUSH
14048: LD_EXP 24
14052: PPUSH
14053: LD_EXP 32
14057: PPUSH
14058: CALL_OW 296
14062: PUSH
14063: LD_INT 6
14065: LESS
14066: AND
14067: IFFALSE 14653
14069: GO 14071
14071: DISABLE
14072: LD_INT 0
14074: PPUSH
14075: PPUSH
14076: PPUSH
// begin allowConvoys := false ;
14077: LD_ADDR_EXP 11
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// Video ( true ) ;
14085: LD_INT 1
14087: PPUSH
14088: CALL 991 0 1
// ComTurnUnit ( Heike , Farmer ) ;
14092: LD_EXP 24
14096: PPUSH
14097: LD_EXP 32
14101: PPUSH
14102: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14106: LD_EXP 32
14110: PPUSH
14111: LD_EXP 24
14115: PPUSH
14116: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14120: LD_EXP 32
14124: PPUSH
14125: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14129: LD_EXP 24
14133: PPUSH
14134: LD_STRING DH-1-end
14136: PPUSH
14137: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14141: LD_EXP 32
14145: PPUSH
14146: LD_STRING DF-1-end
14148: PPUSH
14149: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14153: LD_EXP 32
14157: PPUSH
14158: LD_STRING DF-2-end
14160: PPUSH
14161: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14165: LD_EXP 24
14169: PPUSH
14170: LD_STRING DH-2-end
14172: PPUSH
14173: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14177: LD_EXP 32
14181: PPUSH
14182: LD_STRING DF-3-end
14184: PPUSH
14185: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14189: LD_EXP 24
14193: PPUSH
14194: LD_STRING DH-3-end
14196: PPUSH
14197: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14201: LD_EXP 25
14205: PPUSH
14206: LD_STRING DG-1-end
14208: PPUSH
14209: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14213: LD_EXP 24
14217: PPUSH
14218: LD_STRING DH-4-end
14220: PPUSH
14221: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14225: LD_EXP 32
14229: PPUSH
14230: LD_STRING DF-4-end
14232: PPUSH
14233: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14237: LD_EXP 24
14241: PPUSH
14242: LD_STRING DH-5-end
14244: PPUSH
14245: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14249: LD_EXP 32
14253: PPUSH
14254: LD_STRING DF-5-end
14256: PPUSH
14257: CALL_OW 88
// Video ( false ) ;
14261: LD_INT 0
14263: PPUSH
14264: CALL 991 0 1
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14268: LD_ADDR_VAR 0 2
14272: PUSH
14273: LD_INT 4
14275: PUSH
14276: LD_INT 3
14278: PUSH
14279: LD_INT 2
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_OWVAR 67
14291: ARRAY
14292: ST_TO_ADDR
// if farmerSquad < max then
14293: LD_EXP 35
14297: PUSH
14298: LD_VAR 0 2
14302: LESS
14303: IFFALSE 14315
// max := farmerSquad ;
14305: LD_ADDR_VAR 0 2
14309: PUSH
14310: LD_EXP 35
14314: ST_TO_ADDR
// for i := 1 to max do
14315: LD_ADDR_VAR 0 1
14319: PUSH
14320: DOUBLE
14321: LD_INT 1
14323: DEC
14324: ST_TO_ADDR
14325: LD_VAR 0 2
14329: PUSH
14330: FOR_TO
14331: IFFALSE 14369
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14333: LD_EXP 35
14337: PUSH
14338: LD_INT 1
14340: ARRAY
14341: PPUSH
14342: LD_INT 2
14344: PPUSH
14345: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14349: LD_ADDR_EXP 35
14353: PUSH
14354: LD_EXP 35
14358: PPUSH
14359: LD_INT 1
14361: PPUSH
14362: CALL_OW 3
14366: ST_TO_ADDR
// end ;
14367: GO 14330
14369: POP
14370: POP
// for i in Farmer ^ farmerSquad do
14371: LD_ADDR_VAR 0 1
14375: PUSH
14376: LD_EXP 32
14380: PUSH
14381: LD_EXP 35
14385: ADD
14386: PUSH
14387: FOR_IN
14388: IFFALSE 14427
// begin if IsInUnit ( i ) then
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 310
14399: IFFALSE 14410
// ComExitBuilding ( i ) ;
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14410: LD_VAR 0 1
14414: PPUSH
14415: LD_INT 102
14417: PPUSH
14418: LD_INT 7
14420: PPUSH
14421: CALL_OW 171
// end ;
14425: GO 14387
14427: POP
14428: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14429: LD_ADDR_VAR 0 1
14433: PUSH
14434: LD_INT 22
14436: PUSH
14437: LD_INT 5
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 21
14446: PUSH
14447: LD_INT 3
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PPUSH
14458: CALL_OW 69
14462: PUSH
14463: LD_INT 5
14465: DIFF
14466: PUSH
14467: FOR_IN
14468: IFFALSE 14484
// SetSide ( i , 2 ) ;
14470: LD_VAR 0 1
14474: PPUSH
14475: LD_INT 2
14477: PPUSH
14478: CALL_OW 235
14482: GO 14467
14484: POP
14485: POP
// repeat wait ( 0 0$1 ) ;
14486: LD_INT 35
14488: PPUSH
14489: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14493: LD_ADDR_VAR 0 3
14497: PUSH
14498: LD_EXP 32
14502: PUSH
14503: LD_EXP 35
14507: ADD
14508: PPUSH
14509: LD_INT 95
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PPUSH
14519: CALL_OW 72
14523: ST_TO_ADDR
// if tmp then
14524: LD_VAR 0 3
14528: IFFALSE 14572
// for i in tmp do
14530: LD_ADDR_VAR 0 1
14534: PUSH
14535: LD_VAR 0 3
14539: PUSH
14540: FOR_IN
14541: IFFALSE 14570
// begin farmerSquad := farmerSquad diff i ;
14543: LD_ADDR_EXP 35
14547: PUSH
14548: LD_EXP 35
14552: PUSH
14553: LD_VAR 0 1
14557: DIFF
14558: ST_TO_ADDR
// RemoveUnit ( i ) ;
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 64
// end ;
14568: GO 14540
14570: POP
14571: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14572: LD_EXP 35
14576: PUSH
14577: EMPTY
14578: EQUAL
14579: PUSH
14580: LD_EXP 32
14584: PPUSH
14585: CALL_OW 305
14589: NOT
14590: AND
14591: IFFALSE 14486
// wait ( 1 1$00 ) ;
14593: LD_INT 2100
14595: PPUSH
14596: CALL_OW 67
// SendAttack ;
14600: CALL 6876 0 0
// wait ( [ 5 5$00 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
14604: LD_INT 10500
14606: PUSH
14607: LD_INT 9450
14609: PUSH
14610: LD_INT 8400
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: PUSH
14618: LD_OWVAR 67
14622: ARRAY
14623: PPUSH
14624: CALL_OW 67
// SendAttack ;
14628: CALL 6876 0 0
// if Difficulty > 2 then
14632: LD_OWVAR 67
14636: PUSH
14637: LD_INT 2
14639: GREATER
14640: IFFALSE 14653
// begin wait ( 4 4$00 ) ;
14642: LD_INT 8400
14644: PPUSH
14645: CALL_OW 67
// SendAttack ;
14649: CALL 6876 0 0
// end ; end ;
14653: PPOPN 3
14655: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14656: LD_EXP 14
14660: PUSH
14661: LD_INT 18900
14663: LESSEQUAL
14664: IFFALSE 14713
14666: GO 14668
14668: DISABLE
// begin DialogueOn ;
14669: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14673: LD_EXP 32
14677: PPUSH
14678: LD_STRING DF-1-distribution-a
14680: PPUSH
14681: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14685: LD_EXP 24
14689: PPUSH
14690: LD_STRING DH-1-distribution-a
14692: PPUSH
14693: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14697: LD_EXP 32
14701: PPUSH
14702: LD_STRING DF-2-distribution-a
14704: PPUSH
14705: CALL_OW 94
// DialogueOff ;
14709: CALL_OW 7
// end ;
14713: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14714: LD_EXP 14
14718: PUSH
14719: LD_INT 0
14721: LESSEQUAL
14722: IFFALSE 14754
14724: GO 14726
14726: DISABLE
// begin DialogueOn ;
14727: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14731: LD_EXP 32
14735: PPUSH
14736: LD_STRING DF-3-distribution-a
14738: PPUSH
14739: CALL_OW 94
// YouLost ( Distribution ) ;
14743: LD_STRING Distribution
14745: PPUSH
14746: CALL_OW 104
// DialogueOff ;
14750: CALL_OW 7
// end ;
14754: END
// every 0 0$1 trigger vehCounter >= 2 do
14755: LD_EXP 18
14759: PUSH
14760: LD_INT 2
14762: GREATEREQUAL
14763: IFFALSE 14775
14765: GO 14767
14767: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14768: LD_STRING VehConstructed
14770: PPUSH
14771: CALL_OW 337
14775: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14776: LD_INT 22
14778: PUSH
14779: LD_INT 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 34
14788: PUSH
14789: LD_INT 12
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: IFFALSE 14864
14806: GO 14808
14808: DISABLE
// begin DialogueOn ;
14809: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14813: LD_EXP 24
14817: PPUSH
14818: LD_STRING DH-1-truck
14820: PPUSH
14821: CALL_OW 88
// if IsOk ( Markov ) then
14825: LD_EXP 31
14829: PPUSH
14830: CALL_OW 302
14834: IFFALSE 14860
// begin Say ( Markov , DMar-1-truck ) ;
14836: LD_EXP 31
14840: PPUSH
14841: LD_STRING DMar-1-truck
14843: PPUSH
14844: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14848: LD_EXP 24
14852: PPUSH
14853: LD_STRING DH-2-truck
14855: PPUSH
14856: CALL_OW 88
// end ; DialogueOff ;
14860: CALL_OW 7
// end ;
14864: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14865: LD_INT 0
14867: PPUSH
14868: PPUSH
14869: PPUSH
// if IsOk ( Givi ) then
14870: LD_EXP 25
14874: PPUSH
14875: CALL_OW 302
14879: IFFALSE 14895
// begin Say ( Givi , DG-1-nocargo ) ;
14881: LD_EXP 25
14885: PPUSH
14886: LD_STRING DG-1-nocargo
14888: PPUSH
14889: CALL_OW 88
// exit ;
14893: GO 14991
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_EXP 38
14904: PPUSH
14905: LD_INT 26
14907: PUSH
14908: LD_INT 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 72
14919: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14920: LD_ADDR_VAR 0 3
14924: PUSH
14925: LD_EXP 38
14929: PPUSH
14930: LD_INT 26
14932: PUSH
14933: LD_INT 2
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PPUSH
14940: CALL_OW 72
14944: ST_TO_ADDR
// if randomMen then
14945: LD_VAR 0 2
14949: IFFALSE 14969
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14951: LD_VAR 0 2
14955: PUSH
14956: LD_INT 1
14958: ARRAY
14959: PPUSH
14960: LD_STRING DArm-1-nocargo
14962: PPUSH
14963: CALL_OW 88
14967: GO 14991
// if randomWomen then
14969: LD_VAR 0 3
14973: IFFALSE 14991
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14975: LD_VAR 0 3
14979: PUSH
14980: LD_INT 1
14982: ARRAY
14983: PPUSH
14984: LD_STRING DArf-1-nocargo
14986: PPUSH
14987: CALL_OW 88
// end ;
14991: LD_VAR 0 1
14995: RET
// export function IncomingAttack ; begin
14996: LD_INT 0
14998: PPUSH
// if attackWave = 1 then
14999: LD_EXP 16
15003: PUSH
15004: LD_INT 1
15006: EQUAL
15007: IFFALSE 15078
// begin DialogueOn ;
15009: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15013: LD_EXP 33
15017: PPUSH
15018: LD_STRING DO-1-radio-1
15020: PPUSH
15021: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15025: LD_EXP 24
15029: PPUSH
15030: LD_STRING DH-1-radio-1-
15032: PPUSH
15033: CALL_OW 88
// if IsOk ( Markov ) then
15037: LD_EXP 31
15041: PPUSH
15042: CALL_OW 302
15046: IFFALSE 15072
// begin Say ( Markov , DMar-1-radio-1 ) ;
15048: LD_EXP 31
15052: PPUSH
15053: LD_STRING DMar-1-radio-1
15055: PPUSH
15056: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15060: LD_EXP 24
15064: PPUSH
15065: LD_STRING DH-2-radio-1
15067: PPUSH
15068: CALL_OW 88
// end ; DialogueOff ;
15072: CALL_OW 7
// end else
15076: GO 15102
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15078: LD_EXP 33
15082: PPUSH
15083: LD_STRING DO-1-radio-u
15085: PPUSH
15086: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15090: LD_EXP 24
15094: PPUSH
15095: LD_STRING DH-1-radio-u
15097: PPUSH
15098: CALL_OW 88
// end ; end ;
15102: LD_VAR 0 1
15106: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15107: LD_EXP 40
15111: PPUSH
15112: LD_INT 95
15114: PUSH
15115: LD_INT 8
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 72
15126: IFFALSE 15229
15128: GO 15130
15130: DISABLE
15131: LD_INT 0
15133: PPUSH
// begin enable ;
15134: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15135: LD_ADDR_VAR 0 1
15139: PUSH
15140: LD_EXP 40
15144: PPUSH
15145: LD_INT 95
15147: PUSH
15148: LD_INT 8
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PPUSH
15155: CALL_OW 72
15159: PUSH
15160: FOR_IN
15161: IFFALSE 15190
// begin usForces := usForces diff i ;
15163: LD_ADDR_EXP 40
15167: PUSH
15168: LD_EXP 40
15172: PUSH
15173: LD_VAR 0 1
15177: DIFF
15178: ST_TO_ADDR
// RemoveUnit ( i ) ;
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 64
// end ;
15188: GO 15160
15190: POP
15191: POP
// if not americanHasEscaped and attackWave = 1 then
15192: LD_EXP 7
15196: NOT
15197: PUSH
15198: LD_EXP 16
15202: PUSH
15203: LD_INT 1
15205: EQUAL
15206: AND
15207: IFFALSE 15229
// begin americanHasEscaped := true ;
15209: LD_ADDR_EXP 7
15213: PUSH
15214: LD_INT 1
15216: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15217: LD_EXP 24
15221: PPUSH
15222: LD_STRING DH-2-assault-a
15224: PPUSH
15225: CALL_OW 88
// end ; end ;
15229: PPOPN 1
15231: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) do
15232: LD_INT 4
15234: PPUSH
15235: LD_INT 22
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 70
15249: IFFALSE 15266
15251: GO 15253
15253: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15254: LD_EXP 32
15258: PPUSH
15259: LD_STRING DF-1-attack
15261: PPUSH
15262: CALL_OW 94
15266: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15267: LD_INT 5
15269: PPUSH
15270: CALL_OW 255
15274: PUSH
15275: LD_INT 2
15277: EQUAL
15278: IFFALSE 15290
15280: GO 15282
15282: DISABLE
// YouLost ( Attack ) ;
15283: LD_STRING Attack
15285: PPUSH
15286: CALL_OW 104
15290: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 160 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do var randomMen , randomWomen , speaker , place ;
15291: LD_INT 22
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 21
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PPUSH
15315: CALL_OW 69
15319: NOT
15320: PUSH
15321: LD_INT 22
15323: PUSH
15324: LD_INT 4
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PPUSH
15331: CALL_OW 69
15335: NOT
15336: AND
15337: PUSH
15338: LD_EXP 10
15342: NOT
15343: AND
15344: PUSH
15345: LD_EXP 12
15349: PUSH
15350: LD_INT 160
15352: GREATER
15353: AND
15354: PUSH
15355: LD_INT 7
15357: PPUSH
15358: LD_INT 22
15360: PUSH
15361: LD_INT 2
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 21
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 70
15386: AND
15387: IFFALSE 16120
15389: GO 15391
15391: DISABLE
15392: LD_INT 0
15394: PPUSH
15395: PPUSH
15396: PPUSH
15397: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15398: LD_ADDR_VAR 0 1
15402: PUSH
15403: LD_EXP 38
15407: PPUSH
15408: LD_INT 26
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PPUSH
15418: CALL_OW 72
15422: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15423: LD_ADDR_VAR 0 2
15427: PUSH
15428: LD_EXP 38
15432: PPUSH
15433: LD_INT 26
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PPUSH
15443: CALL_OW 72
15447: ST_TO_ADDR
// if IsOk ( Kaia ) then
15448: LD_EXP 29
15452: PPUSH
15453: CALL_OW 302
15457: IFFALSE 15478
// speaker := [ Kaia , DK ] else
15459: LD_ADDR_VAR 0 3
15463: PUSH
15464: LD_EXP 29
15468: PUSH
15469: LD_STRING DK
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: ST_TO_ADDR
15476: GO 15558
// if randomMen then
15478: LD_VAR 0 1
15482: IFFALSE 15517
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15484: LD_ADDR_VAR 0 3
15488: PUSH
15489: LD_VAR 0 1
15493: PUSH
15494: LD_INT 1
15496: PPUSH
15497: LD_VAR 0 1
15501: PPUSH
15502: CALL_OW 12
15506: ARRAY
15507: PUSH
15508: LD_STRING DArm
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: ST_TO_ADDR
15515: GO 15558
// if randomWomen then
15517: LD_VAR 0 2
15521: IFFALSE 15556
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15523: LD_ADDR_VAR 0 3
15527: PUSH
15528: LD_VAR 0 2
15532: PUSH
15533: LD_INT 1
15535: PPUSH
15536: LD_VAR 0 2
15540: PPUSH
15541: CALL_OW 12
15545: ARRAY
15546: PUSH
15547: LD_STRING DArf
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: ST_TO_ADDR
15554: GO 15558
// exit ;
15556: GO 16120
// if IsInUnit ( speaker [ 1 ] ) then
15558: LD_VAR 0 3
15562: PUSH
15563: LD_INT 1
15565: ARRAY
15566: PPUSH
15567: CALL_OW 310
15571: IFFALSE 15594
// place := IsInUnit ( speaker [ 1 ] ) else
15573: LD_ADDR_VAR 0 4
15577: PUSH
15578: LD_VAR 0 3
15582: PUSH
15583: LD_INT 1
15585: ARRAY
15586: PPUSH
15587: CALL_OW 310
15591: ST_TO_ADDR
15592: GO 15608
// place := speaker [ 1 ] ;
15594: LD_ADDR_VAR 0 4
15598: PUSH
15599: LD_VAR 0 3
15603: PUSH
15604: LD_INT 1
15606: ARRAY
15607: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15608: LD_VAR 0 4
15612: PPUSH
15613: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15617: LD_VAR 0 4
15621: PPUSH
15622: CALL_OW 250
15626: PPUSH
15627: LD_VAR 0 4
15631: PPUSH
15632: CALL_OW 251
15636: PPUSH
15637: CALL 2992 0 2
// wait ( 0 0$2 ) ;
15641: LD_INT 70
15643: PPUSH
15644: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15648: LD_EXP 34
15652: PPUSH
15653: CALL_OW 305
15657: NOT
15658: IFFALSE 15662
// exit ;
15660: GO 16120
// allowConvoys := false ;
15662: LD_ADDR_EXP 11
15666: PUSH
15667: LD_INT 0
15669: ST_TO_ADDR
// InGameOn ;
15670: CALL_OW 8
// wait ( 0 0$1 ) ;
15674: LD_INT 35
15676: PPUSH
15677: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15681: LD_EXP 34
15685: PPUSH
15686: LD_STRING DI-1-land
15688: PPUSH
15689: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15693: LD_VAR 0 3
15697: PUSH
15698: LD_INT 1
15700: ARRAY
15701: PPUSH
15702: CALL_OW 310
15706: IFFALSE 15721
// ComExit ( speaker [ 1 ] ) ;
15708: LD_VAR 0 3
15712: PUSH
15713: LD_INT 1
15715: ARRAY
15716: PPUSH
15717: CALL 1095 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: PPUSH
15730: LD_EXP 34
15734: PPUSH
15735: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 1
15746: ARRAY
15747: PPUSH
15748: LD_EXP 34
15752: PPUSH
15753: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15757: LD_EXP 34
15761: PPUSH
15762: LD_VAR 0 3
15766: PUSH
15767: LD_INT 1
15769: ARRAY
15770: PPUSH
15771: CALL_OW 119
// wait ( 0 0$1 ) ;
15775: LD_INT 35
15777: PPUSH
15778: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 1
15789: ARRAY
15790: PPUSH
15791: LD_VAR 0 3
15795: PUSH
15796: LD_INT 2
15798: ARRAY
15799: PUSH
15800: LD_STRING -1-land
15802: STR
15803: PPUSH
15804: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15808: LD_EXP 34
15812: PPUSH
15813: LD_STRING DI-2-land
15815: PPUSH
15816: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15820: LD_VAR 0 3
15824: PUSH
15825: LD_INT 1
15827: ARRAY
15828: PPUSH
15829: LD_VAR 0 3
15833: PUSH
15834: LD_INT 2
15836: ARRAY
15837: PUSH
15838: LD_STRING -2-land
15840: STR
15841: PPUSH
15842: CALL_OW 88
// if IsInUnit ( Heike ) then
15846: LD_EXP 24
15850: PPUSH
15851: CALL_OW 310
15855: IFFALSE 15866
// ComExitBuilding ( Heike ) ;
15857: LD_EXP 24
15861: PPUSH
15862: CALL_OW 122
// AddComMoveXY ( Heike , 34 , 21 ) ;
15866: LD_EXP 24
15870: PPUSH
15871: LD_INT 34
15873: PPUSH
15874: LD_INT 21
15876: PPUSH
15877: CALL_OW 171
// AddComTurnUnit ( Heike , speaker [ 1 ] ) ;
15881: LD_EXP 24
15885: PPUSH
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 1
15893: ARRAY
15894: PPUSH
15895: CALL_OW 179
// ComMoveXY ( Ibrahim , 36 , 22 ) ;
15899: LD_EXP 34
15903: PPUSH
15904: LD_INT 36
15906: PPUSH
15907: LD_INT 22
15909: PPUSH
15910: CALL_OW 111
// ComMoveXY ( speaker [ 1 ] , 35 , 22 ) ;
15914: LD_VAR 0 3
15918: PUSH
15919: LD_INT 1
15921: ARRAY
15922: PPUSH
15923: LD_INT 35
15925: PPUSH
15926: LD_INT 22
15928: PPUSH
15929: CALL_OW 111
// AddComTurnUnit ( [ Ibrahim , speaker [ 1 ] ] , Heike ) ;
15933: LD_EXP 34
15937: PUSH
15938: LD_VAR 0 3
15942: PUSH
15943: LD_INT 1
15945: ARRAY
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PPUSH
15951: LD_EXP 24
15955: PPUSH
15956: CALL_OW 179
// repeat wait ( 0 0$2 ) ;
15960: LD_INT 70
15962: PPUSH
15963: CALL_OW 67
// CenterOnUnits ( speaker [ 1 ] ) ;
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 1
15974: ARRAY
15975: PPUSH
15976: CALL_OW 85
// until GetDistUnits ( speaker [ 1 ] , usDepot ) < 8 ;
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 1
15987: ARRAY
15988: PPUSH
15989: LD_INT 11
15991: PPUSH
15992: CALL_OW 296
15996: PUSH
15997: LD_INT 8
15999: LESS
16000: IFFALSE 15960
// CenterOnUnits ( usDepot ) ;
16002: LD_INT 11
16004: PPUSH
16005: CALL_OW 85
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 1
16016: ARRAY
16017: PPUSH
16018: LD_VAR 0 3
16022: PUSH
16023: LD_INT 2
16025: ARRAY
16026: PUSH
16027: LD_STRING -3-land
16029: STR
16030: PPUSH
16031: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16035: LD_EXP 24
16039: PPUSH
16040: LD_STRING DH-1-land
16042: PPUSH
16043: CALL_OW 88
// if UnitsInside ( usDepot ) = 6 then
16047: LD_INT 11
16049: PPUSH
16050: CALL_OW 313
16054: PUSH
16055: LD_INT 6
16057: EQUAL
16058: IFFALSE 16076
// ComExitBuilding ( UnitsInside ( usDepot ) [ 1 ] ) ;
16060: LD_INT 11
16062: PPUSH
16063: CALL_OW 313
16067: PUSH
16068: LD_INT 1
16070: ARRAY
16071: PPUSH
16072: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16076: LD_EXP 34
16080: PPUSH
16081: LD_INT 2
16083: PPUSH
16084: CALL_OW 235
// ComEnterUnit ( Ibrahim , usDepot ) ;
16088: LD_EXP 34
16092: PPUSH
16093: LD_INT 11
16095: PPUSH
16096: CALL_OW 120
// InGameOff ;
16100: CALL_OW 9
// ibrahimInDepot := true ;
16104: LD_ADDR_EXP 21
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// allowConvoys := true ;
16112: LD_ADDR_EXP 11
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// end ;
16120: PPOPN 4
16122: END
// export function IbrahimQuery ; begin
16123: LD_INT 0
16125: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16126: LD_STRING IbrahimQuery
16128: PPUSH
16129: CALL_OW 97
16133: PUSH
16134: LD_INT 1
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16451
16142: POP
// begin allowConvoys := false ;
16143: LD_ADDR_EXP 11
16147: PUSH
16148: LD_INT 0
16150: ST_TO_ADDR
// ibrahimInDepot := false ;
16151: LD_ADDR_EXP 21
16155: PUSH
16156: LD_INT 0
16158: ST_TO_ADDR
// InGameOn ;
16159: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16163: LD_EXP 24
16167: PPUSH
16168: CALL_OW 87
// wait ( 0 0$1 ) ;
16172: LD_INT 35
16174: PPUSH
16175: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16179: LD_EXP 24
16183: PPUSH
16184: LD_STRING DH-1-interrogation
16186: PPUSH
16187: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16191: LD_EXP 34
16195: PPUSH
16196: LD_STRING DI-1-interrogation
16198: PPUSH
16199: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16203: LD_EXP 24
16207: PPUSH
16208: LD_STRING DH-2-interrogation
16210: PPUSH
16211: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16215: LD_EXP 34
16219: PPUSH
16220: LD_STRING DI-2-interrogation
16222: PPUSH
16223: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16227: LD_EXP 24
16231: PPUSH
16232: LD_STRING DH-3-interrogation
16234: PPUSH
16235: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16239: LD_EXP 34
16243: PPUSH
16244: LD_STRING DI-3-interrogation
16246: PPUSH
16247: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16251: LD_EXP 24
16255: PPUSH
16256: LD_STRING DH-4-interrogation
16258: PPUSH
16259: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16263: LD_EXP 34
16267: PPUSH
16268: LD_STRING DI-4-interrogation
16270: PPUSH
16271: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16275: LD_EXP 24
16279: PPUSH
16280: LD_STRING DH-5-interrogation
16282: PPUSH
16283: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16287: LD_EXP 34
16291: PPUSH
16292: LD_STRING DI-5-interrogation
16294: PPUSH
16295: CALL_OW 88
// wait ( 0 0$1 ) ;
16299: LD_INT 35
16301: PPUSH
16302: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16306: LD_STRING IbrahimDecisionQuery
16308: PPUSH
16309: CALL_OW 97
16313: PUSH
16314: LD_INT 1
16316: DOUBLE
16317: EQUAL
16318: IFTRUE 16322
16320: GO 16346
16322: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16323: LD_EXP 34
16327: PPUSH
16328: LD_STRING DI-1-kill
16330: PPUSH
16331: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16335: LD_EXP 34
16339: PPUSH
16340: CALL_OW 66
// end ; 2 :
16344: GO 16445
16346: LD_INT 2
16348: DOUBLE
16349: EQUAL
16350: IFTRUE 16354
16352: GO 16444
16354: POP
// begin SetSide ( Ibrahim , 6 ) ;
16355: LD_EXP 34
16359: PPUSH
16360: LD_INT 6
16362: PPUSH
16363: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16367: LD_EXP 34
16371: PPUSH
16372: CALL_OW 122
// AddComMoveXY ( Ibrahim , 32 , 5 ) ;
16376: LD_EXP 34
16380: PPUSH
16381: LD_INT 32
16383: PPUSH
16384: LD_INT 5
16386: PPUSH
16387: CALL_OW 171
// ComExitBuilding ( Heike ) ;
16391: LD_EXP 24
16395: PPUSH
16396: CALL_OW 122
// AddComMoveXY ( Heike , 36 , 21 ) ;
16400: LD_EXP 24
16404: PPUSH
16405: LD_INT 36
16407: PPUSH
16408: LD_INT 21
16410: PPUSH
16411: CALL_OW 171
// AddComWait ( Ibrahim , 1 1$20 ) ;
16415: LD_EXP 34
16419: PPUSH
16420: LD_INT 2800
16422: PPUSH
16423: CALL_OW 202
// AddComMoveXY ( Ibrahim , 38 , 28 ) ;
16427: LD_EXP 34
16431: PPUSH
16432: LD_INT 38
16434: PPUSH
16435: LD_INT 28
16437: PPUSH
16438: CALL_OW 171
// end ; end ;
16442: GO 16445
16444: POP
// InGameOff ;
16445: CALL_OW 9
// end ; 2 :
16449: GO 16465
16451: LD_INT 2
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16464
16459: POP
// exit ; end ;
16460: GO 16488
16462: GO 16465
16464: POP
// allowConvoys := true ;
16465: LD_ADDR_EXP 11
16469: PUSH
16470: LD_INT 1
16472: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16473: LD_INT 1400
16475: PPUSH
16476: CALL_OW 67
// ibrahimIsFree := true ;
16480: LD_ADDR_EXP 22
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// end ;
16488: LD_VAR 0 1
16492: RET
// every 0 0$10 trigger ibrahimIsFree and IsInArea ( Ibrahim , americanBaseArea ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b ;
16493: LD_EXP 22
16497: PUSH
16498: LD_EXP 34
16502: PPUSH
16503: LD_INT 7
16505: PPUSH
16506: CALL_OW 308
16510: AND
16511: PUSH
16512: LD_INT 6
16514: PPUSH
16515: LD_EXP 24
16519: PPUSH
16520: CALL_OW 292
16524: AND
16525: PUSH
16526: LD_INT 22
16528: PUSH
16529: LD_INT 4
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PPUSH
16536: CALL_OW 69
16540: NOT
16541: AND
16542: PUSH
16543: LD_INT 22
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 21
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PPUSH
16567: CALL_OW 69
16571: NOT
16572: AND
16573: IFFALSE 17141
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
16581: PPUSH
// begin allowConvoys := false ;
16582: LD_ADDR_EXP 11
16586: PUSH
16587: LD_INT 0
16589: ST_TO_ADDR
// InGameOn ;
16590: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16594: LD_EXP 34
16598: PPUSH
16599: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16603: LD_EXP 24
16607: PPUSH
16608: LD_EXP 34
16612: PPUSH
16613: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16617: LD_EXP 34
16621: PPUSH
16622: LD_EXP 24
16626: PPUSH
16627: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16631: LD_EXP 34
16635: PPUSH
16636: LD_STRING DI-1-free
16638: PPUSH
16639: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16643: LD_EXP 24
16647: PPUSH
16648: LD_STRING DH-1-free
16650: PPUSH
16651: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16655: LD_EXP 34
16659: PPUSH
16660: LD_STRING DI-2-free
16662: PPUSH
16663: CALL_OW 88
// changeClass := 0 ;
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16675: LD_STRING IbrahimJoinQuery
16677: PPUSH
16678: CALL_OW 97
16682: PUSH
16683: LD_INT 1
16685: DOUBLE
16686: EQUAL
16687: IFTRUE 16691
16689: GO 16702
16691: POP
// begin changeClass := 1 ;
16692: LD_ADDR_VAR 0 1
16696: PUSH
16697: LD_INT 1
16699: ST_TO_ADDR
// end ; 2 :
16700: GO 16910
16702: LD_INT 2
16704: DOUBLE
16705: EQUAL
16706: IFTRUE 16710
16708: GO 16830
16710: POP
// begin Say ( Heike , DH-1-decline ) ;
16711: LD_EXP 24
16715: PPUSH
16716: LD_STRING DH-1-decline
16718: PPUSH
16719: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16723: LD_EXP 34
16727: PPUSH
16728: LD_STRING DI-1-decline
16730: PPUSH
16731: CALL_OW 88
// InGameOff ;
16735: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16739: LD_EXP 34
16743: PPUSH
16744: LD_INT 30
16746: PPUSH
16747: LD_INT 1
16749: PPUSH
16750: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16754: LD_INT 35
16756: PPUSH
16757: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) ;
16761: LD_EXP 34
16765: PPUSH
16766: LD_INT 30
16768: PPUSH
16769: LD_INT 1
16771: PPUSH
16772: CALL_OW 307
16776: PUSH
16777: LD_INT 22
16779: PUSH
16780: LD_INT 2
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 101
16789: PUSH
16790: LD_INT 6
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PPUSH
16801: CALL_OW 69
16805: NOT
16806: OR
16807: IFFALSE 16754
// RemoveUnit ( Ibrahim ) ;
16809: LD_EXP 34
16813: PPUSH
16814: CALL_OW 64
// SaveVariable ( 1 , IbrahimHasEscaped ) ;
16818: LD_INT 1
16820: PPUSH
16821: LD_STRING IbrahimHasEscaped
16823: PPUSH
16824: CALL_OW 39
// end ; 3 :
16828: GO 16910
16830: LD_INT 3
16832: DOUBLE
16833: EQUAL
16834: IFTRUE 16838
16836: GO 16909
16838: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
16839: LD_EXP 24
16843: PPUSH
16844: LD_STRING DH-1-radio-hq
16846: PPUSH
16847: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
16851: LD_EXP 33
16855: PPUSH
16856: LD_STRING DO-1-radio-hq
16858: PPUSH
16859: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
16863: LD_EXP 24
16867: PPUSH
16868: LD_STRING DH-2-radio-hq
16870: PPUSH
16871: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
16875: LD_EXP 33
16879: PPUSH
16880: LD_STRING DO-2-radio-hq
16882: PPUSH
16883: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
16887: LD_EXP 24
16891: PPUSH
16892: LD_STRING DH-3-radio-hq
16894: PPUSH
16895: CALL_OW 88
// changeClass := 1 ;
16899: LD_ADDR_VAR 0 1
16903: PUSH
16904: LD_INT 1
16906: ST_TO_ADDR
// end ; end ;
16907: GO 16910
16909: POP
// if changeClass then
16910: LD_VAR 0 1
16914: IFFALSE 17141
// begin Say ( Heike , DH-1-agree ) ;
16916: LD_EXP 24
16920: PPUSH
16921: LD_STRING DH-1-agree
16923: PPUSH
16924: CALL_OW 88
// if IsOk ( Givi ) then
16928: LD_EXP 25
16932: PPUSH
16933: CALL_OW 302
16937: IFFALSE 16975
// begin Say ( Givi , DG-1-agree ) ;
16939: LD_EXP 25
16943: PPUSH
16944: LD_STRING DG-1-agree
16946: PPUSH
16947: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
16951: LD_EXP 24
16955: PPUSH
16956: LD_STRING DH-2-agree
16958: PPUSH
16959: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
16963: LD_EXP 25
16967: PPUSH
16968: LD_STRING DG-2-agree
16970: PPUSH
16971: CALL_OW 88
// end ; if UnitsInside ( usDepot ) = 6 then
16975: LD_INT 11
16977: PPUSH
16978: CALL_OW 313
16982: PUSH
16983: LD_INT 6
16985: EQUAL
16986: IFFALSE 17004
// ComExitBuilding ( UnitsInside ( usDepot ) [ 1 ] ) ;
16988: LD_INT 11
16990: PPUSH
16991: CALL_OW 313
16995: PUSH
16996: LD_INT 1
16998: ARRAY
16999: PPUSH
17000: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17004: LD_EXP 34
17008: PPUSH
17009: LD_INT 2
17011: PPUSH
17012: CALL_OW 235
// ComEnterUnit ( Ibrahim , usDepot ) ;
17016: LD_EXP 34
17020: PPUSH
17021: LD_INT 11
17023: PPUSH
17024: CALL_OW 120
// InGameOff ;
17028: CALL_OW 9
// allowConvoys := true ;
17032: LD_ADDR_EXP 11
17036: PUSH
17037: LD_INT 1
17039: ST_TO_ADDR
// b := 0 ;
17040: LD_ADDR_VAR 0 2
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17048: LD_INT 35
17050: PPUSH
17051: CALL_OW 67
// b := IsInUnit ( Ibrahim ) ;
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: LD_EXP 34
17064: PPUSH
17065: CALL_OW 310
17069: ST_TO_ADDR
// until b and GetType ( b ) = unit_building ;
17070: LD_VAR 0 2
17074: PUSH
17075: LD_VAR 0 2
17079: PPUSH
17080: CALL_OW 247
17084: PUSH
17085: LD_INT 3
17087: EQUAL
17088: AND
17089: IFFALSE 17048
// RemoveUnit ( Ibrahim ) ;
17091: LD_EXP 34
17095: PPUSH
17096: CALL_OW 64
// uc_side := 2 ;
17100: LD_ADDR_OWVAR 20
17104: PUSH
17105: LD_INT 2
17107: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17108: LD_ADDR_EXP 34
17112: PUSH
17113: LD_STRING Ibrahim
17115: PPUSH
17116: LD_INT 0
17118: PPUSH
17119: LD_STRING 
17121: PPUSH
17122: CALL 268 0 3
17126: ST_TO_ADDR
// PlaceHumanInUnit ( Ibrahim , b ) ;
17127: LD_EXP 34
17131: PPUSH
17132: LD_VAR 0 2
17136: PPUSH
17137: CALL_OW 52
// end ; end ;
17141: PPOPN 2
17143: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17144: LD_EXP 10
17148: PUSH
17149: LD_EXP 17
17153: PUSH
17154: LD_INT 1
17156: LESS
17157: AND
17158: IFFALSE 17537
17160: GO 17162
17162: DISABLE
// begin DialogueOn ;
17163: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17167: LD_EXP 24
17171: PPUSH
17172: LD_STRING DH-1-final
17174: PPUSH
17175: CALL_OW 88
// if tick <= [ 68 68$00 , 65 65$00 , 63 63$00 ] [ Difficulty ] then
17179: LD_OWVAR 1
17183: PUSH
17184: LD_INT 142800
17186: PUSH
17187: LD_INT 136500
17189: PUSH
17190: LD_INT 132300
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: LD_OWVAR 67
17202: ARRAY
17203: LESSEQUAL
17204: IFFALSE 17218
// AddMedal ( med1 , 1 ) else
17206: LD_STRING med1
17208: PPUSH
17209: LD_INT 1
17211: PPUSH
17212: CALL_OW 101
17216: GO 17229
// AddMedal ( med1 , - 1 ) ;
17218: LD_STRING med1
17220: PPUSH
17221: LD_INT 1
17223: NEG
17224: PPUSH
17225: CALL_OW 101
// if vehCounter >= 2 then
17229: LD_EXP 18
17233: PUSH
17234: LD_INT 2
17236: GREATEREQUAL
17237: IFFALSE 17251
// AddMedal ( med2 , 1 ) else
17239: LD_STRING med2
17241: PPUSH
17242: LD_INT 1
17244: PPUSH
17245: CALL_OW 101
17249: GO 17262
// AddMedal ( med2 , - 1 ) ;
17251: LD_STRING med2
17253: PPUSH
17254: LD_INT 1
17256: NEG
17257: PPUSH
17258: CALL_OW 101
// if deadCounter = 0 then
17262: LD_EXP 8
17266: PUSH
17267: LD_INT 0
17269: EQUAL
17270: IFFALSE 17284
// AddMedal ( med3 , 1 ) else
17272: LD_STRING med3
17274: PPUSH
17275: LD_INT 1
17277: PPUSH
17278: CALL_OW 101
17282: GO 17295
// AddMedal ( med3 , - 1 ) ;
17284: LD_STRING med3
17286: PPUSH
17287: LD_INT 1
17289: NEG
17290: PPUSH
17291: CALL_OW 101
// GiveMedals ( MAIN ) ;
17295: LD_STRING MAIN
17297: PPUSH
17298: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17302: LD_INT 22
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 23
17314: PUSH
17315: LD_INT 2
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 21
17324: PUSH
17325: LD_INT 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: PPUSH
17337: CALL_OW 69
17341: PPUSH
17342: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17346: LD_EXP 24
17350: PPUSH
17351: LD_STRING 03_Heike
17353: PPUSH
17354: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17358: LD_EXP 28
17362: PPUSH
17363: LD_STRING 03_Aviradze
17365: PPUSH
17366: CALL_OW 38
// if Givi then
17370: LD_EXP 25
17374: IFFALSE 17388
// SaveCharacters ( Givi , 03_Givi ) ;
17376: LD_EXP 25
17380: PPUSH
17381: LD_STRING 03_Givi
17383: PPUSH
17384: CALL_OW 38
// if Mike then
17388: LD_EXP 26
17392: IFFALSE 17406
// SaveCharacters ( Mike , 03_Mike ) ;
17394: LD_EXP 26
17398: PPUSH
17399: LD_STRING 03_Mike
17401: PPUSH
17402: CALL_OW 38
// if Kamil then
17406: LD_EXP 27
17410: IFFALSE 17424
// SaveCharacters ( Kamil , 03_Kamil ) ;
17412: LD_EXP 27
17416: PPUSH
17417: LD_STRING 03_Kamil
17419: PPUSH
17420: CALL_OW 38
// if Kaia then
17424: LD_EXP 29
17428: IFFALSE 17442
// SaveCharacters ( Kaia , 03_Kaia ) ;
17430: LD_EXP 29
17434: PPUSH
17435: LD_STRING 03_Kaia
17437: PPUSH
17438: CALL_OW 38
// if Sophia then
17442: LD_EXP 30
17446: IFFALSE 17460
// SaveCharacters ( Sophia , 03_Sophia ) ;
17448: LD_EXP 30
17452: PPUSH
17453: LD_STRING 03_Sophia
17455: PPUSH
17456: CALL_OW 38
// if Markov then
17460: LD_EXP 31
17464: IFFALSE 17478
// SaveCharacters ( Markov , 03_Markov ) ;
17466: LD_EXP 31
17470: PPUSH
17471: LD_STRING 03_Markov
17473: PPUSH
17474: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17478: LD_EXP 34
17482: PUSH
17483: LD_EXP 34
17487: PPUSH
17488: CALL_OW 255
17492: PUSH
17493: LD_INT 2
17495: EQUAL
17496: AND
17497: IFFALSE 17511
// SaveCharacters ( Markov , 03_Ibrahim ) ;
17499: LD_EXP 31
17503: PPUSH
17504: LD_STRING 03_Ibrahim
17506: PPUSH
17507: CALL_OW 38
// if heikeSecondSquad then
17511: LD_EXP 38
17515: IFFALSE 17529
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17517: LD_EXP 38
17521: PPUSH
17522: LD_STRING 03_others
17524: PPUSH
17525: CALL_OW 38
// YouWin ;
17529: CALL_OW 103
// DialogueOff ;
17533: CALL_OW 7
// end ; end_of_file
17537: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17538: LD_VAR 0 1
17542: PUSH
17543: LD_EXP 24
17547: EQUAL
17548: IFFALSE 17557
// YouLost ( Heike ) ;
17550: LD_STRING Heike
17552: PPUSH
17553: CALL_OW 104
// if un = Aviradze then
17557: LD_VAR 0 1
17561: PUSH
17562: LD_EXP 28
17566: EQUAL
17567: IFFALSE 17576
// YouLost ( Aviradze ) ;
17569: LD_STRING Aviradze
17571: PPUSH
17572: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17576: LD_VAR 0 1
17580: PUSH
17581: LD_INT 11
17583: EQUAL
17584: PUSH
17585: LD_EXP 10
17589: NOT
17590: AND
17591: IFFALSE 17600
// YouLost ( Depot ) ;
17593: LD_STRING Depot
17595: PPUSH
17596: CALL_OW 104
// if un = arDepot then
17600: LD_VAR 0 1
17604: PUSH
17605: LD_INT 5
17607: EQUAL
17608: IFFALSE 17617
// YouLost ( FarmerDepot ) ;
17610: LD_STRING FarmerDepot
17612: PPUSH
17613: CALL_OW 104
// if un = Farmer then
17617: LD_VAR 0 1
17621: PUSH
17622: LD_EXP 32
17626: EQUAL
17627: IFFALSE 17636
// YouLost ( Farmer ) ;
17629: LD_STRING Farmer
17631: PPUSH
17632: CALL_OW 104
// if un in usForces then
17636: LD_VAR 0 1
17640: PUSH
17641: LD_EXP 40
17645: IN
17646: IFFALSE 17664
// usForces := usForces diff un ;
17648: LD_ADDR_EXP 40
17652: PUSH
17653: LD_EXP 40
17657: PUSH
17658: LD_VAR 0 1
17662: DIFF
17663: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 22
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 23
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 21
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: PPUSH
17704: CALL_OW 69
17708: IN
17709: IFFALSE 17725
// deadCounter := deadCounter + 1 ;
17711: LD_ADDR_EXP 8
17715: PUSH
17716: LD_EXP 8
17720: PUSH
17721: LD_INT 1
17723: PLUS
17724: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
17725: LD_VAR 0 1
17729: PUSH
17730: LD_INT 22
17732: PUSH
17733: LD_INT 4
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 34
17742: PUSH
17743: LD_INT 12
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PPUSH
17754: CALL_OW 69
17758: IN
17759: PUSH
17760: LD_EXP 15
17764: NOT
17765: AND
17766: IFFALSE 17776
// firstConvoyDestroyed := true ;
17768: LD_ADDR_EXP 15
17772: PUSH
17773: LD_INT 1
17775: ST_TO_ADDR
// if un in usAttackers then
17776: LD_VAR 0 1
17780: PUSH
17781: LD_EXP 43
17785: IN
17786: IFFALSE 17804
// usAttackers := usAttackers diff un ;
17788: LD_ADDR_EXP 43
17792: PUSH
17793: LD_EXP 43
17797: PUSH
17798: LD_VAR 0 1
17802: DIFF
17803: ST_TO_ADDR
// end ;
17804: PPOPN 1
17806: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
17807: LD_VAR 0 2
17811: PUSH
17812: LD_EXP 34
17816: EQUAL
17817: PUSH
17818: LD_EXP 21
17822: AND
17823: IFFALSE 17858
// begin Video ( true ) ;
17825: LD_INT 1
17827: PPUSH
17828: CALL 991 0 1
// ComEnterUnit ( Ibrahim , usDepot ) ;
17832: LD_EXP 34
17836: PPUSH
17837: LD_INT 11
17839: PPUSH
17840: CALL_OW 120
// wait ( 0 0$1 ) ;
17844: LD_INT 35
17846: PPUSH
17847: CALL_OW 67
// Video ( false ) ;
17851: LD_INT 0
17853: PPUSH
17854: CALL 991 0 1
// end ; end ;
17858: PPOPN 2
17860: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
17861: LD_VAR 0 2
17865: PUSH
17866: LD_EXP 24
17870: EQUAL
17871: PUSH
17872: LD_VAR 0 1
17876: PUSH
17877: LD_INT 11
17879: EQUAL
17880: AND
17881: PUSH
17882: LD_EXP 21
17886: AND
17887: IFFALSE 17893
// IbrahimQuery ;
17889: CALL 16123 0 0
// end ;
17893: PPOPN 2
17895: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin if oldId in usAttackers then
17896: LD_VAR 0 2
17900: PUSH
17901: LD_EXP 43
17905: IN
17906: IFFALSE 17924
// usAttackers := usAttackers diff oldId ;
17908: LD_ADDR_EXP 43
17912: PUSH
17913: LD_EXP 43
17917: PUSH
17918: LD_VAR 0 2
17922: DIFF
17923: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
17924: LD_VAR 0 3
17928: PUSH
17929: LD_INT 4
17931: EQUAL
17932: PUSH
17933: LD_EXP 15
17937: NOT
17938: AND
17939: IFFALSE 17949
// firstConvoyDestroyed := true ;
17941: LD_ADDR_EXP 15
17945: PUSH
17946: LD_INT 1
17948: ST_TO_ADDR
// if GetWeapon ( oldId ) = us_cargo_bay and GetCargo ( oldId , mat_cans ) = 0 then
17949: LD_VAR 0 2
17953: PPUSH
17954: CALL_OW 264
17958: PUSH
17959: LD_INT 12
17961: EQUAL
17962: PUSH
17963: LD_VAR 0 2
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: CALL_OW 289
17975: PUSH
17976: LD_INT 0
17978: EQUAL
17979: AND
17980: IFFALSE 17986
// EmptyCargoDialog ;
17982: CALL 14865 0 0
// end ;
17986: PPOPN 4
17988: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
17989: LD_VAR 0 1
17993: PUSH
17994: LD_INT 2
17996: EQUAL
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: LD_INT 5
18005: EQUAL
18006: AND
18007: IFFALSE 18016
// YouLost ( Attack ) ;
18009: LD_STRING Attack
18011: PPUSH
18012: CALL_OW 104
// end ;
18016: PPOPN 2
18018: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 then
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 255
18028: PUSH
18029: LD_INT 1
18031: EQUAL
18032: IFFALSE 18166
// begin if GetBType ( b ) = b_lab then
18034: LD_VAR 0 1
18038: PPUSH
18039: CALL_OW 266
18043: PUSH
18044: LD_INT 6
18046: EQUAL
18047: IFFALSE 18087
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18049: LD_EXP 40
18053: PPUSH
18054: LD_INT 25
18056: PUSH
18057: LD_INT 4
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PPUSH
18064: CALL_OW 72
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL_OW 120
// AmLabResearch ( b ) ;
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL 5956 0 1
// end ; if GetBType ( b ) = b_armoury then
18087: LD_VAR 0 1
18091: PPUSH
18092: CALL_OW 266
18096: PUSH
18097: LD_INT 4
18099: EQUAL
18100: IFFALSE 18148
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18102: LD_EXP 40
18106: PPUSH
18107: LD_INT 25
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 3
18119: PUSH
18120: LD_INT 54
18122: PUSH
18123: EMPTY
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 72
18138: PPUSH
18139: LD_VAR 0 1
18143: PPUSH
18144: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18148: LD_ADDR_EXP 42
18152: PUSH
18153: LD_EXP 42
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: CALL_OW 3
18165: ST_TO_ADDR
// end ; end ;
18166: PPOPN 1
18168: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL_OW 255
18178: PUSH
18179: LD_INT 2
18181: EQUAL
18182: IFFALSE 18198
// vehCounter := vehCounter + 1 ;
18184: LD_ADDR_EXP 18
18188: PUSH
18189: LD_EXP 18
18193: PUSH
18194: LD_INT 1
18196: PLUS
18197: ST_TO_ADDR
// end ;
18198: PPOPN 2
18200: END
// on SailEvent ( event ) do begin if event = eventAttack then
18201: LD_VAR 0 1
18205: PUSH
18206: LD_EXP 20
18210: EQUAL
18211: IFFALSE 18217
// AmericanAttack ;
18213: CALL 7396 0 0
// end ; end_of_file
18217: PPOPN 1
18219: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] do
18220: LD_OWVAR 1
18224: PUSH
18225: LD_INT 8400
18227: PUSH
18228: LD_INT 6300
18230: PUSH
18231: LD_INT 5250
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: PUSH
18239: LD_OWVAR 67
18243: ARRAY
18244: LESSEQUAL
18245: IFFALSE 18272
18247: GO 18249
18249: DISABLE
// begin enable ;
18250: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18251: LD_INT 1
18253: PPUSH
18254: LD_INT 5
18256: PPUSH
18257: CALL_OW 12
18261: PPUSH
18262: LD_INT 9
18264: PPUSH
18265: LD_INT 1
18267: PPUSH
18268: CALL_OW 55
// end ;
18272: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 26 26$00 , 23 23$00 , 20 20$00 ] [ Difficulty ] do
18273: LD_EXP 6
18277: PUSH
18278: LD_OWVAR 1
18282: PUSH
18283: LD_INT 54600
18285: PUSH
18286: LD_INT 48300
18288: PUSH
18289: LD_INT 42000
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: PUSH
18297: LD_OWVAR 67
18301: ARRAY
18302: LESSEQUAL
18303: AND
18304: IFFALSE 18331
18306: GO 18308
18308: DISABLE
// begin enable ;
18309: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18310: LD_INT 1
18312: PPUSH
18313: LD_INT 5
18315: PPUSH
18316: CALL_OW 12
18320: PPUSH
18321: LD_INT 9
18323: PPUSH
18324: LD_INT 1
18326: PPUSH
18327: CALL_OW 55
// end ; end_of_file
18331: END
// every 0 0$1 trigger not retreatAllowed and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18332: LD_EXP 10
18336: NOT
18337: PUSH
18338: LD_EXP 4
18342: AND
18343: PUSH
18344: LD_EXP 12
18348: PUSH
18349: LD_EXP 13
18353: LESSEQUAL
18354: AND
18355: IFFALSE 18445
18357: GO 18359
18359: DISABLE
// begin enable ;
18360: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
18361: LD_ADDR_OWVAR 47
18365: PUSH
18366: LD_STRING #X103-1
18368: PUSH
18369: LD_EXP 12
18373: PUSH
18374: LD_EXP 13
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18384: LD_ADDR_EXP 12
18388: PUSH
18389: LD_INT 5
18391: PPUSH
18392: CALL_OW 274
18396: PPUSH
18397: LD_INT 1
18399: PPUSH
18400: CALL_OW 275
18404: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18405: LD_INT 10
18407: PPUSH
18408: LD_INT 1
18410: PPUSH
18411: CALL_OW 287
18415: PUSH
18416: LD_INT 0
18418: EQUAL
18419: IFFALSE 18437
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
18421: LD_ADDR_EXP 14
18425: PUSH
18426: LD_EXP 14
18430: PUSH
18431: LD_INT 35
18433: MINUS
18434: ST_TO_ADDR
18435: GO 18445
// farmerCratesCounter := 30 30$00 ;
18437: LD_ADDR_EXP 14
18441: PUSH
18442: LD_INT 63000
18444: ST_TO_ADDR
// end ; end_of_file
18445: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
18446: GO 18448
18448: DISABLE
// begin ru_radar := 98 ;
18449: LD_ADDR_EXP 44
18453: PUSH
18454: LD_INT 98
18456: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18457: LD_ADDR_EXP 45
18461: PUSH
18462: LD_INT 89
18464: ST_TO_ADDR
// us_hack := 99 ;
18465: LD_ADDR_EXP 46
18469: PUSH
18470: LD_INT 99
18472: ST_TO_ADDR
// us_artillery := 97 ;
18473: LD_ADDR_EXP 47
18477: PUSH
18478: LD_INT 97
18480: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18481: LD_ADDR_EXP 48
18485: PUSH
18486: LD_INT 91
18488: ST_TO_ADDR
// tech_Artillery := 80 ;
18489: LD_ADDR_EXP 49
18493: PUSH
18494: LD_INT 80
18496: ST_TO_ADDR
// tech_RadMat := 81 ;
18497: LD_ADDR_EXP 50
18501: PUSH
18502: LD_INT 81
18504: ST_TO_ADDR
// tech_BasicTools := 82 ;
18505: LD_ADDR_EXP 51
18509: PUSH
18510: LD_INT 82
18512: ST_TO_ADDR
// tech_Cargo := 83 ;
18513: LD_ADDR_EXP 52
18517: PUSH
18518: LD_INT 83
18520: ST_TO_ADDR
// tech_Track := 84 ;
18521: LD_ADDR_EXP 53
18525: PUSH
18526: LD_INT 84
18528: ST_TO_ADDR
// tech_Crane := 85 ;
18529: LD_ADDR_EXP 54
18533: PUSH
18534: LD_INT 85
18536: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18537: LD_ADDR_EXP 55
18541: PUSH
18542: LD_INT 86
18544: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18545: LD_ADDR_EXP 56
18549: PUSH
18550: LD_INT 87
18552: ST_TO_ADDR
// end ;
18553: END
