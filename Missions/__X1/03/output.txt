// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4089 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9000 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 45
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36396 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36396 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36396 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36396 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36396 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36396 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36396 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36396 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36396 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36396 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36396 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3084
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 70
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 31
2647: PPUSH
2648: LD_INT 108
2650: PPUSH
2651: LD_INT 50
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2661: LD_INT 35
2663: PPUSH
2664: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2668: LD_INT 22
2670: PUSH
2671: LD_INT 5
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 4
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 57
2693: PUSH
2694: EMPTY
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: IFFALSE 2661
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_INT 22
2719: PUSH
2720: LD_INT 5
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 30
2729: PUSH
2730: LD_INT 4
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 57
2742: PUSH
2743: EMPTY
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PUSH
2760: LD_INT 1
2762: ARRAY
2763: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_EXP 39
2773: PPUSH
2774: LD_INT 25
2776: PUSH
2777: LD_INT 1
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 72
2788: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2789: LD_VAR 0 2
2793: PPUSH
2794: LD_VAR 0 3
2798: PPUSH
2799: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2803: LD_INT 35
2805: PPUSH
2806: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2810: LD_INT 22
2812: PUSH
2813: LD_INT 5
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: LD_INT 31
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 57
2835: PUSH
2836: EMPTY
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: PPUSH
2848: CALL_OW 69
2852: PUSH
2853: LD_INT 2
2855: GREATEREQUAL
2856: IFFALSE 2803
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: LD_EXP 39
2867: PPUSH
2868: LD_INT 25
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 72
2882: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2883: LD_VAR 0 2
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_INT 5
2894: PPUSH
2895: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 2
2906: ARRAY
2907: PUSH
2908: LD_VAR 0 2
2912: PUSH
2913: LD_INT 3
2915: ARRAY
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2930: LD_VAR 0 2
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PUSH
2939: LD_VAR 0 2
2943: PUSH
2944: LD_INT 3
2946: ARRAY
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 2
2966: ARRAY
2967: PUSH
2968: LD_VAR 0 2
2972: PUSH
2973: LD_INT 3
2975: ARRAY
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 5
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 30
3002: PUSH
3003: LD_INT 31
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 69
3018: ST_TO_ADDR
// for i := 1 to 2 do
3019: LD_ADDR_VAR 0 1
3023: PUSH
3024: DOUBLE
3025: LD_INT 1
3027: DEC
3028: ST_TO_ADDR
3029: LD_INT 2
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3067
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3035: LD_VAR 0 2
3039: PUSH
3040: LD_VAR 0 1
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ARRAY
3049: PPUSH
3050: LD_VAR 0 4
3054: PUSH
3055: LD_VAR 0 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 180
3065: GO 3032
3067: POP
3068: POP
// wait ( 1 1$00 ) ;
3069: LD_INT 2100
3071: PPUSH
3072: CALL_OW 67
// farmerBaseReady := true ;
3076: LD_ADDR_EXP 4
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// end ;
3084: PPOPN 4
3086: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3087: LD_EXP 4
3091: PUSH
3092: LD_EXP 11
3096: NOT
3097: AND
3098: IFFALSE 3620
3100: GO 3102
3102: DISABLE
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// begin enable ;
3110: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: LD_EXP 39
3120: PPUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PUSH
3136: LD_EXP 36
3140: ADD
3141: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_EXP 39
3151: PPUSH
3152: LD_INT 25
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PPUSH
3162: CALL_OW 72
3166: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3167: LD_ADDR_VAR 0 5
3171: PUSH
3172: LD_INT 22
3174: PUSH
3175: LD_INT 5
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 21
3184: PUSH
3185: LD_INT 3
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 24
3197: PUSH
3198: LD_INT 1000
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3219: LD_ADDR_VAR 0 4
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 5
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 4
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3253: LD_VAR 0 4
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: CALL_OW 302
3266: IFFALSE 3330
// for i in sol do
3268: LD_ADDR_VAR 0 1
3272: PUSH
3273: LD_VAR 0 3
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3328
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 256
3290: PUSH
3291: LD_INT 999
3293: LESS
3294: PUSH
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 310
3304: NOT
3305: AND
3306: IFFALSE 3326
// ComEnterUnit ( i , arm [ 1 ] ) ;
3308: LD_VAR 0 1
3312: PPUSH
3313: LD_VAR 0 4
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: CALL_OW 120
3326: GO 3278
3328: POP
3329: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3330: LD_VAR 0 2
3334: NOT
3335: PUSH
3336: LD_INT 22
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 21
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: NOT
3365: AND
3366: IFFALSE 3458
// begin uc_side := 5 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 5
3375: ST_TO_ADDR
// uc_nation := 2 ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 2
3383: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3384: LD_INT 0
3386: PPUSH
3387: LD_INT 2
3389: PPUSH
3390: LD_INT 2
3392: PPUSH
3393: CALL_OW 380
// eng := CreateHuman ;
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: CALL_OW 44
3406: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3407: LD_VAR 0 2
3411: PPUSH
3412: LD_INT 102
3414: PPUSH
3415: LD_INT 8
3417: PPUSH
3418: LD_INT 0
3420: PPUSH
3421: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3425: LD_VAR 0 2
3429: PPUSH
3430: LD_INT 110
3432: PPUSH
3433: LD_INT 60
3435: PPUSH
3436: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3440: LD_ADDR_EXP 39
3444: PUSH
3445: LD_EXP 39
3449: PUSH
3450: LD_VAR 0 2
3454: UNION
3455: ST_TO_ADDR
// end else
3456: GO 3620
// begin for i in eng do
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3618
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3471: LD_INT 10
3473: PPUSH
3474: LD_INT 1
3476: PPUSH
3477: CALL_OW 287
3481: IFFALSE 3532
// begin if IsInUnit ( i ) then
3483: LD_VAR 0 1
3487: PPUSH
3488: CALL_OW 310
3492: IFFALSE 3503
// ComExitBuilding ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_INT 10
3510: PPUSH
3511: CALL_OW 308
3515: NOT
3516: IFFALSE 3530
// AddComMoveToArea ( i , collectFarmerArea ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 10
3525: PPUSH
3526: CALL_OW 173
// end else
3530: GO 3616
// begin if damagedBuilding then
3532: LD_VAR 0 5
3536: IFFALSE 3580
// begin if IsInUnit ( i ) then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 310
3547: IFFALSE 3560
// ComExitBuilding ( i ) else
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 122
3558: GO 3578
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_VAR 0 5
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: CALL_OW 130
// end else
3578: GO 3616
// if not IsInUnit ( i ) and not HasTask ( i ) then
3580: LD_VAR 0 1
3584: PPUSH
3585: CALL_OW 310
3589: NOT
3590: PUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL_OW 314
3600: NOT
3601: AND
3602: IFFALSE 3616
// ComEnterUnit ( i , arDepot ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_INT 5
3611: PPUSH
3612: CALL_OW 120
// end ; end ;
3616: GO 3468
3618: POP
3619: POP
// end ; end ;
3620: PPOPN 5
3622: END
// export function CargoEvacuation ; begin
3623: LD_INT 0
3625: PPUSH
// wait ( 0 0$20 ) ;
3626: LD_INT 700
3628: PPUSH
3629: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3633: LD_ADDR_EXP 21
3637: PUSH
3638: LD_EXP 21
3642: PUSH
3643: LD_INT 1
3645: MINUS
3646: ST_TO_ADDR
// if omarCargoCounter = 0 then
3647: LD_EXP 21
3651: PUSH
3652: LD_INT 0
3654: EQUAL
3655: IFFALSE 3659
// exit ;
3657: GO 3966
// if omarCargo then
3659: LD_EXP 43
3663: IFFALSE 3674
// RemoveUnit ( omarCargo ) ;
3665: LD_EXP 43
3669: PPUSH
3670: CALL_OW 64
// omarCargo := PrepareCargo ;
3674: LD_ADDR_EXP 43
3678: PUSH
3679: CALL 3971 0 0
3683: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3684: LD_EXP 43
3688: PPUSH
3689: LD_INT 0
3691: PPUSH
3692: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3696: LD_EXP 43
3700: PPUSH
3701: LD_INT 107
3703: PPUSH
3704: LD_INT 59
3706: PPUSH
3707: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3711: LD_INT 35
3713: PPUSH
3714: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3718: LD_EXP 43
3722: PPUSH
3723: LD_INT 107
3725: PPUSH
3726: LD_INT 59
3728: PPUSH
3729: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3733: LD_EXP 43
3737: PPUSH
3738: CALL_OW 302
3742: NOT
3743: PUSH
3744: LD_EXP 43
3748: PPUSH
3749: CALL_OW 301
3753: OR
3754: IFFALSE 3758
// exit ;
3756: GO 3966
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3758: LD_EXP 43
3762: PPUSH
3763: LD_INT 107
3765: PPUSH
3766: LD_INT 59
3768: PPUSH
3769: CALL_OW 307
3773: PUSH
3774: LD_EXP 43
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: CALL_OW 296
3786: PUSH
3787: LD_INT 6
3789: LESS
3790: OR
3791: IFFALSE 3711
// SetTag ( omarCargo , 1 ) ;
3793: LD_EXP 43
3797: PPUSH
3798: LD_INT 1
3800: PPUSH
3801: CALL_OW 109
// wait ( 0 0$05 ) ;
3805: LD_INT 175
3807: PPUSH
3808: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3812: LD_EXP 43
3816: PPUSH
3817: LD_INT 5
3819: PPUSH
3820: LD_INT 1
3822: PPUSH
3823: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3827: LD_EXP 43
3831: PPUSH
3832: LD_INT 103
3834: PPUSH
3835: LD_INT 9
3837: PPUSH
3838: CALL_OW 171
// wait ( 0 0$1 ) ;
3842: LD_INT 35
3844: PPUSH
3845: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3849: LD_EXP 43
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 100
3859: PPUSH
3860: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3864: LD_INT 35
3866: PPUSH
3867: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3871: LD_EXP 43
3875: PPUSH
3876: LD_INT 103
3878: PPUSH
3879: LD_INT 9
3881: PPUSH
3882: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3886: LD_EXP 43
3890: PPUSH
3891: CALL_OW 302
3895: NOT
3896: PUSH
3897: LD_EXP 43
3901: PPUSH
3902: CALL_OW 301
3906: OR
3907: IFFALSE 3911
// exit ;
3909: GO 3966
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3911: LD_EXP 43
3915: PPUSH
3916: LD_INT 103
3918: PPUSH
3919: LD_INT 9
3921: PPUSH
3922: CALL_OW 307
3926: PUSH
3927: LD_EXP 43
3931: PPUSH
3932: LD_INT 3
3934: PPUSH
3935: CALL_OW 308
3939: OR
3940: PUSH
3941: LD_EXP 43
3945: PPUSH
3946: CALL_OW 110
3950: PUSH
3951: LD_INT 0
3953: GREATER
3954: AND
3955: IFFALSE 3864
// RemoveUnit ( omarCargo ) ;
3957: LD_EXP 43
3961: PPUSH
3962: CALL_OW 64
// end ;
3966: LD_VAR 0 1
3970: RET
// export function PrepareCargo ; var un , veh ; begin
3971: LD_INT 0
3973: PPUSH
3974: PPUSH
3975: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_INT 5
3983: PPUSH
3984: LD_INT 2
3986: PPUSH
3987: LD_INT 13
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 32
3998: PPUSH
3999: LD_INT 80
4001: PPUSH
4002: CALL 313 0 7
4006: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_INT 4
4014: PPUSH
4015: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 101
4026: PPUSH
4027: LD_INT 8
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4037: LD_INT 0
4039: PPUSH
4040: LD_INT 3
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4060: LD_VAR 0 2
4064: PPUSH
4065: LD_VAR 0 3
4069: PPUSH
4070: CALL_OW 52
// result := veh ;
4074: LD_ADDR_VAR 0 1
4078: PUSH
4079: LD_VAR 0 3
4083: ST_TO_ADDR
// end ; end_of_file
4084: LD_VAR 0 1
4088: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4089: LD_INT 0
4091: PPUSH
4092: PPUSH
4093: PPUSH
// usForces := [ ] ;
4094: LD_ADDR_EXP 44
4098: PUSH
4099: EMPTY
4100: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4101: LD_ADDR_EXP 46
4105: PUSH
4106: LD_INT 6
4108: PUSH
4109: LD_INT 32
4111: PUSH
4112: LD_INT 27
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 4
4126: PUSH
4127: LD_INT 43
4129: PUSH
4130: LD_INT 24
4132: PUSH
4133: LD_INT 5
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 27
4144: PUSH
4145: LD_INT 29
4147: PUSH
4148: LD_INT 21
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4165: LD_INT 11
4167: PPUSH
4168: CALL_OW 274
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 150
4178: PUSH
4179: LD_INT 120
4181: PUSH
4182: LD_INT 100
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: PUSH
4190: LD_OWVAR 67
4194: ARRAY
4195: PPUSH
4196: CALL_OW 277
// if Difficulty = 1 then
4200: LD_OWVAR 67
4204: PUSH
4205: LD_INT 1
4207: EQUAL
4208: IFFALSE 4217
// RemoveUnit ( hillBun ) ;
4210: LD_INT 14
4212: PPUSH
4213: CALL_OW 64
// uc_side := 1 ;
4217: LD_ADDR_OWVAR 20
4221: PUSH
4222: LD_INT 1
4224: ST_TO_ADDR
// uc_nation := 1 ;
4225: LD_ADDR_OWVAR 21
4229: PUSH
4230: LD_INT 1
4232: ST_TO_ADDR
// hc_gallery :=  ;
4233: LD_ADDR_OWVAR 33
4237: PUSH
4238: LD_STRING 
4240: ST_TO_ADDR
// hc_name :=  ;
4241: LD_ADDR_OWVAR 26
4245: PUSH
4246: LD_STRING 
4248: ST_TO_ADDR
// hc_importance := 0 ;
4249: LD_ADDR_OWVAR 32
4253: PUSH
4254: LD_INT 0
4256: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4257: LD_INT 1
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 3
4265: PPUSH
4266: CALL_OW 380
// usCommander := CreateHuman ;
4270: LD_ADDR_EXP 45
4274: PUSH
4275: CALL_OW 44
4279: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4280: LD_EXP 45
4284: PPUSH
4285: LD_INT 11
4287: PPUSH
4288: CALL_OW 52
// if Difficulty > 1 then
4292: LD_OWVAR 67
4296: PUSH
4297: LD_INT 1
4299: GREATER
4300: IFFALSE 4382
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 1
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: LD_INT 3
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: LD_OWVAR 67
4326: ARRAY
4327: PPUSH
4328: CALL_OW 380
// un := CreateHuman ;
4332: LD_ADDR_VAR 0 3
4336: PUSH
4337: CALL_OW 44
4341: ST_TO_ADDR
// usForces := usForces union un ;
4342: LD_ADDR_EXP 44
4346: PUSH
4347: LD_EXP 44
4351: PUSH
4352: LD_VAR 0 3
4356: UNION
4357: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4358: LD_VAR 0 3
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4370: LD_VAR 0 3
4374: PPUSH
4375: LD_INT 14
4377: PPUSH
4378: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4382: LD_ADDR_VAR 0 2
4386: PUSH
4387: DOUBLE
4388: LD_INT 1
4390: DEC
4391: ST_TO_ADDR
4392: LD_INT 2
4394: PUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 4
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_OWVAR 67
4410: ARRAY
4411: PUSH
4412: FOR_TO
4413: IFFALSE 4555
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4415: LD_INT 0
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 2
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: PUSH
4435: LD_OWVAR 67
4439: ARRAY
4440: PPUSH
4441: CALL_OW 380
// un := CreateHuman ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: CALL_OW 44
4454: ST_TO_ADDR
// usForces := usForces union un ;
4455: LD_ADDR_EXP 44
4459: PUSH
4460: LD_EXP 44
4464: PUSH
4465: LD_VAR 0 3
4469: UNION
4470: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4471: LD_VAR 0 3
4475: PPUSH
4476: LD_INT 39
4478: PPUSH
4479: LD_INT 24
4481: PPUSH
4482: LD_INT 4
4484: PPUSH
4485: LD_INT 0
4487: PPUSH
4488: CALL_OW 50
// if i < 3 then
4492: LD_VAR 0 2
4496: PUSH
4497: LD_INT 3
4499: LESS
4500: IFFALSE 4553
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4502: LD_VAR 0 3
4506: PPUSH
4507: LD_INT 22
4509: PUSH
4510: LD_INT 1
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 58
4519: PUSH
4520: EMPTY
4521: LIST
4522: PUSH
4523: LD_INT 30
4525: PUSH
4526: LD_INT 31
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL_OW 69
4542: PUSH
4543: LD_VAR 0 2
4547: ARRAY
4548: PPUSH
4549: CALL_OW 120
// end ;
4553: GO 4412
4555: POP
4556: POP
// for i := 1 to 2 do
4557: LD_ADDR_VAR 0 2
4561: PUSH
4562: DOUBLE
4563: LD_INT 1
4565: DEC
4566: ST_TO_ADDR
4567: LD_INT 2
4569: PUSH
4570: FOR_TO
4571: IFFALSE 4635
// begin PrepareHuman ( false , 2 , 2 ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 2
4578: PPUSH
4579: LD_INT 2
4581: PPUSH
4582: CALL_OW 380
// un := CreateHuman ;
4586: LD_ADDR_VAR 0 3
4590: PUSH
4591: CALL_OW 44
4595: ST_TO_ADDR
// usForces := usForces union un ;
4596: LD_ADDR_EXP 44
4600: PUSH
4601: LD_EXP 44
4605: PUSH
4606: LD_VAR 0 3
4610: UNION
4611: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4612: LD_VAR 0 3
4616: PPUSH
4617: LD_INT 39
4619: PPUSH
4620: LD_INT 24
4622: PPUSH
4623: LD_INT 4
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: CALL_OW 50
// end ;
4633: GO 4570
4635: POP
4636: POP
// PrepareHuman ( false , 4 , 1 ) ;
4637: LD_INT 0
4639: PPUSH
4640: LD_INT 4
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: CALL_OW 380
// un := CreateHuman ;
4650: LD_ADDR_VAR 0 3
4654: PUSH
4655: CALL_OW 44
4659: ST_TO_ADDR
// usForces := usForces union un ;
4660: LD_ADDR_EXP 44
4664: PUSH
4665: LD_EXP 44
4669: PUSH
4670: LD_VAR 0 3
4674: UNION
4675: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4676: LD_VAR 0 3
4680: PPUSH
4681: LD_INT 39
4683: PPUSH
4684: LD_INT 24
4686: PPUSH
4687: LD_INT 4
4689: PPUSH
4690: LD_INT 0
4692: PPUSH
4693: CALL_OW 50
// end ;
4697: LD_VAR 0 1
4701: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4702: LD_EXP 44
4706: PUSH
4707: LD_EXP 6
4711: NOT
4712: AND
4713: PUSH
4714: LD_EXP 14
4718: NOT
4719: AND
4720: IFFALSE 5151
4722: GO 4724
4724: DISABLE
4725: LD_INT 0
4727: PPUSH
4728: PPUSH
4729: PPUSH
4730: PPUSH
4731: PPUSH
// begin enable ;
4732: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4733: LD_ADDR_VAR 0 3
4737: PUSH
4738: LD_EXP 44
4742: PPUSH
4743: LD_INT 25
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 72
4757: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4758: LD_ADDR_VAR 0 4
4762: PUSH
4763: LD_EXP 44
4767: PPUSH
4768: LD_INT 25
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PPUSH
4778: CALL_OW 72
4782: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4783: LD_ADDR_VAR 0 5
4787: PUSH
4788: LD_EXP 44
4792: PPUSH
4793: LD_INT 25
4795: PUSH
4796: LD_INT 4
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PPUSH
4803: CALL_OW 72
4807: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4808: LD_INT 7
4810: PPUSH
4811: LD_INT 22
4813: PUSH
4814: LD_INT 2
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 70
4825: PUSH
4826: LD_INT 1
4828: EQUAL
4829: IFFALSE 4905
// for i in sol do
4831: LD_ADDR_VAR 0 1
4835: PUSH
4836: LD_VAR 0 4
4840: PUSH
4841: FOR_IN
4842: IFFALSE 4903
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4844: LD_VAR 0 1
4848: PPUSH
4849: CALL_OW 310
4853: NOT
4854: PUSH
4855: LD_VAR 0 1
4859: PPUSH
4860: CALL_OW 310
4864: PPUSH
4865: CALL_OW 266
4869: PUSH
4870: LD_INT 4
4872: EQUAL
4873: NOT
4874: OR
4875: IFFALSE 4901
// begin ComExitBuilding ( i ) ;
4877: LD_VAR 0 1
4881: PPUSH
4882: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4886: LD_VAR 0 1
4890: PPUSH
4891: LD_INT 37
4893: PPUSH
4894: LD_INT 23
4896: PPUSH
4897: CALL_OW 174
// end ;
4901: GO 4841
4903: POP
4904: POP
// if eng then
4905: LD_VAR 0 3
4909: IFFALSE 5151
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4911: LD_ADDR_VAR 0 2
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 95
4928: PUSH
4929: LD_INT 7
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 21
4938: PUSH
4939: LD_INT 3
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 24
4951: PUSH
4952: LD_INT 1000
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: PPUSH
4969: CALL_OW 69
4973: ST_TO_ADDR
// if b then
4974: LD_VAR 0 2
4978: IFFALSE 5009
// begin ComExitBuilding ( eng ) ;
4980: LD_VAR 0 3
4984: PPUSH
4985: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4989: LD_VAR 0 3
4993: PPUSH
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 1
5001: ARRAY
5002: PPUSH
5003: CALL_OW 190
// end else
5007: GO 5151
// begin for i in eng do
5009: LD_ADDR_VAR 0 1
5013: PUSH
5014: LD_VAR 0 3
5018: PUSH
5019: FOR_IN
5020: IFFALSE 5149
// if not HasTask ( i ) then
5022: LD_VAR 0 1
5026: PPUSH
5027: CALL_OW 314
5031: NOT
5032: IFFALSE 5147
// begin if americanBuildList then
5034: LD_EXP 46
5038: IFFALSE 5123
// begin if IsInUnit ( i ) then
5040: LD_VAR 0 1
5044: PPUSH
5045: CALL_OW 310
5049: IFFALSE 5060
// ComExitBuilding ( i ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5060: LD_VAR 0 1
5064: PPUSH
5065: LD_EXP 46
5069: PUSH
5070: LD_INT 1
5072: ARRAY
5073: PUSH
5074: LD_INT 1
5076: ARRAY
5077: PPUSH
5078: LD_EXP 46
5082: PUSH
5083: LD_INT 1
5085: ARRAY
5086: PUSH
5087: LD_INT 2
5089: ARRAY
5090: PPUSH
5091: LD_EXP 46
5095: PUSH
5096: LD_INT 1
5098: ARRAY
5099: PUSH
5100: LD_INT 3
5102: ARRAY
5103: PPUSH
5104: LD_EXP 46
5108: PUSH
5109: LD_INT 1
5111: ARRAY
5112: PUSH
5113: LD_INT 4
5115: ARRAY
5116: PPUSH
5117: CALL_OW 205
// end else
5121: GO 5147
// if not IsInUnit ( i ) then
5123: LD_VAR 0 1
5127: PPUSH
5128: CALL_OW 310
5132: NOT
5133: IFFALSE 5147
// ComEnterUnit ( i , usDepot ) ;
5135: LD_VAR 0 1
5139: PPUSH
5140: LD_INT 11
5142: PPUSH
5143: CALL_OW 120
// end ;
5147: GO 5019
5149: POP
5150: POP
// end ; end ; end ;
5151: PPOPN 5
5153: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5154: LD_INT 0
5156: PPUSH
5157: PPUSH
5158: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5159: LD_ADDR_VAR 0 3
5163: PUSH
5164: LD_INT 35
5166: PUSH
5167: LD_INT 45
5169: PUSH
5170: LD_INT 48
5172: PUSH
5173: LD_EXP 58
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: ST_TO_ADDR
// for i in tech do
5184: LD_ADDR_VAR 0 4
5188: PUSH
5189: LD_VAR 0 3
5193: PUSH
5194: FOR_IN
5195: IFFALSE 5213
// AddComResearch ( lab , i ) ;
5197: LD_VAR 0 1
5201: PPUSH
5202: LD_VAR 0 4
5206: PPUSH
5207: CALL_OW 184
5211: GO 5194
5213: POP
5214: POP
// end ;
5215: LD_VAR 0 2
5219: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5220: LD_EXP 12
5224: PUSH
5225: LD_EXP 23
5229: PUSH
5230: LD_EXP 27
5234: LESSEQUAL
5235: AND
5236: IFFALSE 5261
5238: GO 5240
5240: DISABLE
// begin enable ;
5241: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5242: LD_INT 35
5244: PPUSH
5245: LD_INT 2065
5247: PPUSH
5248: CALL_OW 12
5252: PPUSH
5253: CALL_OW 67
// SendConvoy ;
5257: CALL 5359 0 0
// end ;
5261: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5262: LD_EXP 6
5266: PUSH
5267: LD_EXP 18
5271: AND
5272: IFFALSE 5358
5274: GO 5276
5276: DISABLE
// begin if americanHasEscaped then
5277: LD_EXP 8
5281: IFFALSE 5292
// wait ( 3 3$20 ) else
5283: LD_INT 7000
5285: PPUSH
5286: CALL_OW 67
5290: GO 5299
// wait ( 6 6$40 ) ;
5292: LD_INT 14000
5294: PPUSH
5295: CALL_OW 67
// SendAttack ;
5299: CALL 6102 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5303: LD_INT 14000
5305: PUSH
5306: LD_INT 11900
5308: PUSH
5309: LD_INT 9800
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_OWVAR 67
5321: ARRAY
5322: PPUSH
5323: CALL_OW 67
// SendAttack ;
5327: CALL 6102 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5331: LD_EXP 19
5335: PUSH
5336: LD_INT 6
5338: PUSH
5339: LD_INT 7
5341: PUSH
5342: LD_INT 8
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: PUSH
5350: LD_OWVAR 67
5354: ARRAY
5355: LESS
5356: IFFALSE 5303
// end ;
5358: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5359: LD_INT 0
5361: PPUSH
5362: PPUSH
5363: PPUSH
5364: PPUSH
5365: PPUSH
5366: PPUSH
5367: PPUSH
5368: PPUSH
// road := rand ( 1 , 2 ) ;
5369: LD_ADDR_VAR 0 4
5373: PUSH
5374: LD_INT 1
5376: PPUSH
5377: LD_INT 2
5379: PPUSH
5380: CALL_OW 12
5384: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5385: LD_ADDR_VAR 0 8
5389: PUSH
5390: LD_INT 3
5392: PUSH
5393: LD_INT 8
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_VAR 0 4
5404: ARRAY
5405: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5406: LD_ADDR_VAR 0 5
5410: PUSH
5411: LD_INT 35
5413: PUSH
5414: LD_INT 66
5416: PUSH
5417: LD_INT 1
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: LD_INT 101
5427: PUSH
5428: LD_INT 8
5430: PUSH
5431: LD_INT 4
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5443: LD_ADDR_VAR 0 6
5447: PUSH
5448: LD_INT 34
5450: PUSH
5451: LD_INT 67
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: LD_INT 38
5460: PUSH
5461: LD_INT 62
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PUSH
5468: LD_INT 43
5470: PUSH
5471: LD_INT 54
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: PUSH
5478: LD_INT 57
5480: PUSH
5481: LD_INT 57
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: LD_INT 77
5490: PUSH
5491: LD_INT 71
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 86
5500: PUSH
5501: LD_INT 60
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 89
5510: PUSH
5511: LD_INT 35
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PUSH
5518: LD_INT 93
5520: PUSH
5521: LD_INT 17
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 97
5530: PUSH
5531: LD_INT 10
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 103
5540: PUSH
5541: LD_INT 9
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: ST_TO_ADDR
// if road = 2 then
5560: LD_VAR 0 4
5564: PUSH
5565: LD_INT 2
5567: EQUAL
5568: IFFALSE 5585
// points := ReverseArray ( points ) ;
5570: LD_ADDR_VAR 0 6
5574: PUSH
5575: LD_VAR 0 6
5579: PPUSH
5580: CALL 973 0 1
5584: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5585: LD_INT 4
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 1
5599: PPUSH
5600: LD_INT 12
5602: PPUSH
5603: LD_INT 80
5605: PPUSH
5606: CALL 313 0 7
// veh := CreateVehicle ;
5610: LD_ADDR_VAR 0 3
5614: PUSH
5615: CALL_OW 45
5619: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5620: LD_VAR 0 3
5624: PPUSH
5625: LD_VAR 0 5
5629: PUSH
5630: LD_VAR 0 4
5634: ARRAY
5635: PUSH
5636: LD_INT 3
5638: ARRAY
5639: PPUSH
5640: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5644: LD_VAR 0 3
5648: PPUSH
5649: LD_VAR 0 5
5653: PUSH
5654: LD_VAR 0 4
5658: ARRAY
5659: PUSH
5660: LD_INT 1
5662: ARRAY
5663: PPUSH
5664: LD_VAR 0 5
5668: PUSH
5669: LD_VAR 0 4
5673: ARRAY
5674: PUSH
5675: LD_INT 2
5677: ARRAY
5678: PPUSH
5679: LD_INT 0
5681: PPUSH
5682: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5686: LD_INT 0
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: LD_OWVAR 67
5696: PPUSH
5697: CALL_OW 380
// un := CreateHuman ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: CALL_OW 44
5710: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5711: LD_VAR 0 2
5715: PPUSH
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5725: LD_INT 60
5727: PUSH
5728: LD_INT 56
5730: PUSH
5731: LD_INT 52
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: LIST
5738: PUSH
5739: LD_OWVAR 67
5743: ARRAY
5744: PPUSH
5745: CALL_OW 13
5749: PUSH
5750: LD_OWVAR 1
5754: PUSH
5755: LD_INT 30
5757: MOD
5758: PLUS
5759: PUSH
5760: LD_EXP 23
5764: PUSH
5765: LD_INT 4
5767: LESS
5768: OR
5769: IFFALSE 5786
// SetCargo ( veh , mat_cans , 100 ) ;
5771: LD_VAR 0 3
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: LD_INT 100
5781: PPUSH
5782: CALL_OW 290
// for i := 2 to points do
5786: LD_ADDR_VAR 0 7
5790: PUSH
5791: DOUBLE
5792: LD_INT 2
5794: DEC
5795: ST_TO_ADDR
5796: LD_VAR 0 6
5800: PUSH
5801: FOR_TO
5802: IFFALSE 5845
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 6
5813: PUSH
5814: LD_VAR 0 7
5818: ARRAY
5819: PUSH
5820: LD_INT 1
5822: ARRAY
5823: PPUSH
5824: LD_VAR 0 6
5828: PUSH
5829: LD_VAR 0 7
5833: ARRAY
5834: PUSH
5835: LD_INT 2
5837: ARRAY
5838: PPUSH
5839: CALL_OW 171
5843: GO 5801
5845: POP
5846: POP
// convoyCounter := convoyCounter + 1 ;
5847: LD_ADDR_EXP 23
5851: PUSH
5852: LD_EXP 23
5856: PUSH
5857: LD_INT 1
5859: PLUS
5860: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5861: LD_INT 35
5863: PPUSH
5864: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5868: LD_VAR 0 3
5872: PPUSH
5873: CALL_OW 314
5877: NOT
5878: PUSH
5879: LD_VAR 0 3
5883: PPUSH
5884: CALL_OW 302
5888: AND
5889: IFFALSE 5930
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5891: LD_VAR 0 3
5895: PPUSH
5896: LD_VAR 0 6
5900: PUSH
5901: LD_VAR 0 6
5905: ARRAY
5906: PUSH
5907: LD_INT 1
5909: ARRAY
5910: PPUSH
5911: LD_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: ARRAY
5921: PUSH
5922: LD_INT 2
5924: ARRAY
5925: PPUSH
5926: CALL_OW 111
// if not IsInUnit ( un ) then
5930: LD_VAR 0 2
5934: PPUSH
5935: CALL_OW 310
5939: NOT
5940: IFFALSE 5981
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5942: LD_VAR 0 2
5946: PPUSH
5947: LD_VAR 0 6
5951: PUSH
5952: LD_VAR 0 6
5956: ARRAY
5957: PUSH
5958: LD_INT 1
5960: ARRAY
5961: PPUSH
5962: LD_VAR 0 6
5966: PUSH
5967: LD_VAR 0 6
5971: ARRAY
5972: PUSH
5973: LD_INT 2
5975: ARRAY
5976: PPUSH
5977: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5981: LD_VAR 0 3
5985: PPUSH
5986: LD_VAR 0 8
5990: PPUSH
5991: CALL_OW 308
5995: PUSH
5996: LD_VAR 0 2
6000: PPUSH
6001: LD_VAR 0 8
6005: PPUSH
6006: CALL_OW 308
6010: OR
6011: IFFALSE 5861
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6013: LD_VAR 0 2
6017: PPUSH
6018: CALL_OW 302
6022: PUSH
6023: LD_VAR 0 3
6027: PPUSH
6028: CALL_OW 302
6032: NOT
6033: AND
6034: PUSH
6035: LD_VAR 0 2
6039: PPUSH
6040: LD_VAR 0 8
6044: PPUSH
6045: CALL_OW 308
6049: AND
6050: IFFALSE 6061
// RemoveUnit ( un ) ;
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6061: LD_VAR 0 3
6065: PPUSH
6066: LD_VAR 0 8
6070: PPUSH
6071: CALL_OW 308
6075: PUSH
6076: LD_VAR 0 3
6080: PPUSH
6081: CALL_OW 302
6085: AND
6086: IFFALSE 6097
// RemoveUnit ( veh ) ;
6088: LD_VAR 0 3
6092: PPUSH
6093: CALL_OW 64
// end ;
6097: LD_VAR 0 1
6101: RET
// export function SendAttack ; var un , veh , i ; begin
6102: LD_INT 0
6104: PPUSH
6105: PPUSH
6106: PPUSH
6107: PPUSH
// IncomingAttack ;
6108: CALL 14949 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6112: LD_INT 2100
6114: PPUSH
6115: LD_INT 3500
6117: PPUSH
6118: CALL_OW 12
6122: PPUSH
6123: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6127: LD_ADDR_VAR 0 4
6131: PUSH
6132: DOUBLE
6133: LD_INT 1
6135: DEC
6136: ST_TO_ADDR
6137: LD_INT 3
6139: PUSH
6140: LD_INT 4
6142: PUSH
6143: LD_INT 4
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: LD_OWVAR 67
6155: ARRAY
6156: PUSH
6157: LD_EXP 19
6161: PUSH
6162: LD_INT 3
6164: DIV
6165: PLUS
6166: PUSH
6167: FOR_TO
6168: IFFALSE 6280
// begin uc_side := 1 ;
6170: LD_ADDR_OWVAR 20
6174: PUSH
6175: LD_INT 1
6177: ST_TO_ADDR
// uc_nation := 1 ;
6178: LD_ADDR_OWVAR 21
6182: PUSH
6183: LD_INT 1
6185: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6186: LD_INT 0
6188: PPUSH
6189: LD_INT 1
6191: PPUSH
6192: LD_INT 2
6194: PUSH
6195: LD_INT 3
6197: PUSH
6198: LD_INT 4
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: PUSH
6206: LD_OWVAR 67
6210: ARRAY
6211: PPUSH
6212: CALL_OW 380
// un := CreateHuman ;
6216: LD_ADDR_VAR 0 2
6220: PUSH
6221: CALL_OW 44
6225: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6226: LD_VAR 0 2
6230: PPUSH
6231: LD_INT 37
6233: PPUSH
6234: LD_INT 70
6236: PPUSH
6237: LD_INT 3
6239: PPUSH
6240: LD_INT 0
6242: PPUSH
6243: CALL_OW 50
// usAttackers := usAttackers union un ;
6247: LD_ADDR_EXP 47
6251: PUSH
6252: LD_EXP 47
6256: PUSH
6257: LD_VAR 0 2
6261: UNION
6262: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6263: LD_VAR 0 2
6267: PPUSH
6268: LD_INT 40
6270: PPUSH
6271: LD_INT 65
6273: PPUSH
6274: CALL_OW 111
// end ;
6278: GO 6167
6280: POP
6281: POP
// uc_side := 1 ;
6282: LD_ADDR_OWVAR 20
6286: PUSH
6287: LD_INT 1
6289: ST_TO_ADDR
// uc_nation := 1 ;
6290: LD_ADDR_OWVAR 21
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6298: LD_INT 0
6300: PPUSH
6301: LD_INT 4
6303: PPUSH
6304: LD_INT 2
6306: PPUSH
6307: CALL_OW 380
// un := CreateHuman ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: CALL_OW 44
6320: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6321: LD_VAR 0 2
6325: PPUSH
6326: LD_INT 37
6328: PPUSH
6329: LD_INT 70
6331: PPUSH
6332: LD_INT 3
6334: PPUSH
6335: LD_INT 0
6337: PPUSH
6338: CALL_OW 50
// usAttackers := usAttackers union un ;
6342: LD_ADDR_EXP 47
6346: PUSH
6347: LD_EXP 47
6351: PUSH
6352: LD_VAR 0 2
6356: UNION
6357: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6358: LD_VAR 0 2
6362: PPUSH
6363: LD_INT 40
6365: PPUSH
6366: LD_INT 65
6368: PPUSH
6369: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6373: LD_ADDR_VAR 0 4
6377: PUSH
6378: DOUBLE
6379: LD_INT 1
6381: DEC
6382: ST_TO_ADDR
6383: LD_OWVAR 67
6387: PUSH
6388: LD_EXP 19
6392: PUSH
6393: LD_INT 4
6395: DIV
6396: PLUS
6397: PUSH
6398: FOR_TO
6399: IFFALSE 6572
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 1
6408: PPUSH
6409: LD_INT 1
6411: PPUSH
6412: LD_INT 2
6414: PPUSH
6415: LD_INT 1
6417: PPUSH
6418: LD_INT 1
6420: PPUSH
6421: LD_INT 4
6423: PUSH
6424: LD_INT 3
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 1
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: CALL_OW 12
6445: ARRAY
6446: PPUSH
6447: LD_INT 90
6449: PPUSH
6450: CALL 313 0 7
6454: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6455: LD_VAR 0 3
6459: PPUSH
6460: LD_INT 35
6462: PPUSH
6463: LD_INT 65
6465: PPUSH
6466: LD_INT 0
6468: PPUSH
6469: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6473: LD_INT 0
6475: PPUSH
6476: LD_INT 3
6478: PPUSH
6479: LD_OWVAR 67
6483: PUSH
6484: LD_INT 1
6486: PLUS
6487: PPUSH
6488: CALL_OW 380
// un := CreateHuman ;
6492: LD_ADDR_VAR 0 2
6496: PUSH
6497: CALL_OW 44
6501: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6502: LD_VAR 0 2
6506: PPUSH
6507: LD_VAR 0 3
6511: PPUSH
6512: CALL_OW 52
// usAttackers := usAttackers union un ;
6516: LD_ADDR_EXP 47
6520: PUSH
6521: LD_EXP 47
6525: PUSH
6526: LD_VAR 0 2
6530: UNION
6531: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6532: LD_VAR 0 3
6536: PPUSH
6537: LD_INT 39
6539: PPUSH
6540: LD_INT 60
6542: PPUSH
6543: CALL_OW 111
// wait ( 0 0$3 ) ;
6547: LD_INT 105
6549: PPUSH
6550: CALL_OW 67
// usAttackers := usAttackers union veh ;
6554: LD_ADDR_EXP 47
6558: PUSH
6559: LD_EXP 47
6563: PUSH
6564: LD_VAR 0 3
6568: UNION
6569: ST_TO_ADDR
// end ;
6570: GO 6398
6572: POP
6573: POP
// attackWave := attackWave + 1 ;
6574: LD_ADDR_EXP 19
6578: PUSH
6579: LD_EXP 19
6583: PUSH
6584: LD_INT 1
6586: PLUS
6587: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6588: LD_EXP 24
6592: PPUSH
6593: CALL_OW 427
// end ;
6597: LD_VAR 0 1
6601: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6602: LD_INT 0
6604: PPUSH
6605: PPUSH
6606: PPUSH
6607: PPUSH
6608: PPUSH
6609: PPUSH
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
6614: PPUSH
// if retreatAllowed then
6615: LD_EXP 11
6619: IFFALSE 6631
// strategy := 2 else
6621: LD_ADDR_VAR 0 5
6625: PUSH
6626: LD_INT 2
6628: ST_TO_ADDR
6629: GO 6647
// strategy := rand ( 0 , 2 ) ;
6631: LD_ADDR_VAR 0 5
6635: PUSH
6636: LD_INT 0
6638: PPUSH
6639: LD_INT 2
6641: PPUSH
6642: CALL_OW 12
6646: ST_TO_ADDR
// attackFormula := [ ] ;
6647: LD_ADDR_VAR 0 6
6651: PUSH
6652: EMPTY
6653: ST_TO_ADDR
// case strategy of 0 :
6654: LD_VAR 0 5
6658: PUSH
6659: LD_INT 0
6661: DOUBLE
6662: EQUAL
6663: IFTRUE 6667
6665: GO 6997
6667: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6668: LD_INT 11
6670: PPUSH
6671: LD_INT 22
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 30
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PPUSH
6695: CALL_OW 70
6699: NOT
6700: IFFALSE 6772
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6702: LD_ADDR_VAR 0 6
6706: PUSH
6707: LD_INT 41
6709: PUSH
6710: LD_INT 34
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: PUSH
6720: LD_INT 53
6722: PUSH
6723: LD_INT 62
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 37
6732: PUSH
6733: LD_INT 63
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 44
6742: PUSH
6743: LD_INT 45
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 37
6752: PUSH
6753: LD_INT 28
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: ST_TO_ADDR
6770: GO 6995
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6772: LD_INT 12
6774: PPUSH
6775: LD_INT 22
6777: PUSH
6778: LD_INT 2
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: LD_INT 2
6787: PUSH
6788: LD_INT 30
6790: PUSH
6791: LD_INT 4
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 30
6800: PUSH
6801: LD_INT 31
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: LD_INT 30
6810: PUSH
6811: LD_INT 32
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: NOT
6833: IFFALSE 6916
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6835: LD_ADDR_VAR 0 6
6839: PUSH
6840: LD_INT 27
6842: PUSH
6843: LD_INT 42
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 27
6852: PUSH
6853: LD_INT 32
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 53
6866: PUSH
6867: LD_INT 62
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 37
6876: PUSH
6877: LD_INT 63
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 44
6886: PUSH
6887: LD_INT 45
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 37
6896: PUSH
6897: LD_INT 28
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: ST_TO_ADDR
6914: GO 6995
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6916: LD_ADDR_VAR 0 6
6920: PUSH
6921: LD_INT 71
6923: PUSH
6924: LD_INT 67
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 54
6933: PUSH
6934: LD_INT 35
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 63
6947: PUSH
6948: LD_INT 40
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 37
6957: PUSH
6958: LD_INT 63
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 44
6967: PUSH
6968: LD_INT 45
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 37
6977: PUSH
6978: LD_INT 28
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: ST_TO_ADDR
// end ; 1 :
6995: GO 7200
6997: LD_INT 1
6999: DOUBLE
7000: EQUAL
7001: IFTRUE 7005
7003: GO 7109
7005: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7006: LD_ADDR_VAR 0 6
7010: PUSH
7011: LD_INT 71
7013: PUSH
7014: LD_INT 67
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: LD_INT 82
7023: PUSH
7024: LD_INT 23
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 53
7033: PUSH
7034: LD_INT 7
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 43
7043: PUSH
7044: LD_INT 10
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 53
7059: PUSH
7060: LD_INT 62
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 37
7069: PUSH
7070: LD_INT 63
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 44
7079: PUSH
7080: LD_INT 45
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 37
7089: PUSH
7090: LD_INT 28
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 7200
7109: LD_INT 2
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7199
7117: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7118: LD_ADDR_VAR 0 6
7122: PUSH
7123: LD_INT 90
7125: PUSH
7126: LD_INT 59
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 108
7135: PUSH
7136: LD_INT 64
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: LD_INT 82
7149: PUSH
7150: LD_INT 75
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 73
7159: PUSH
7160: LD_INT 67
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 101
7169: PUSH
7170: LD_INT 65
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 108
7179: PUSH
7180: LD_INT 62
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: ST_TO_ADDR
7197: GO 7200
7199: POP
// if not attackFormula then
7200: LD_VAR 0 6
7204: NOT
7205: IFFALSE 7209
// exit ;
7207: GO 8887
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7209: LD_ADDR_VAR 0 7
7213: PUSH
7214: LD_EXP 47
7218: PPUSH
7219: LD_INT 25
7221: PUSH
7222: LD_INT 1
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PPUSH
7229: CALL_OW 72
7233: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7234: LD_ADDR_VAR 0 8
7238: PUSH
7239: LD_EXP 47
7243: PPUSH
7244: LD_INT 25
7246: PUSH
7247: LD_INT 4
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 72
7258: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7259: LD_ADDR_VAR 0 9
7263: PUSH
7264: LD_EXP 47
7268: PPUSH
7269: LD_INT 25
7271: PUSH
7272: LD_INT 3
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PPUSH
7279: CALL_OW 72
7283: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7284: LD_ADDR_VAR 0 10
7288: PUSH
7289: LD_EXP 47
7293: PPUSH
7294: LD_INT 21
7296: PUSH
7297: LD_INT 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 72
7308: ST_TO_ADDR
// if sci then
7309: LD_VAR 0 8
7313: IFFALSE 7350
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7315: LD_VAR 0 8
7319: PPUSH
7320: LD_VAR 0 6
7324: PUSH
7325: LD_INT 2
7327: ARRAY
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PPUSH
7333: LD_VAR 0 6
7337: PUSH
7338: LD_INT 2
7340: ARRAY
7341: PUSH
7342: LD_INT 2
7344: ARRAY
7345: PPUSH
7346: CALL_OW 111
// repeat wait ( 10 ) ;
7350: LD_INT 10
7352: PPUSH
7353: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7357: LD_ADDR_VAR 0 7
7361: PUSH
7362: LD_EXP 47
7366: PPUSH
7367: LD_INT 25
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PPUSH
7377: CALL_OW 72
7381: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7382: LD_ADDR_VAR 0 8
7386: PUSH
7387: LD_EXP 47
7391: PPUSH
7392: LD_INT 25
7394: PUSH
7395: LD_INT 4
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PPUSH
7402: CALL_OW 72
7406: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7407: LD_ADDR_VAR 0 9
7411: PUSH
7412: LD_EXP 47
7416: PPUSH
7417: LD_INT 25
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 72
7431: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7432: LD_ADDR_VAR 0 10
7436: PUSH
7437: LD_EXP 47
7441: PPUSH
7442: LD_INT 21
7444: PUSH
7445: LD_INT 2
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PPUSH
7452: CALL_OW 72
7456: ST_TO_ADDR
// if sol then
7457: LD_VAR 0 7
7461: IFFALSE 7882
// begin for i in sol do
7463: LD_ADDR_VAR 0 2
7467: PUSH
7468: LD_VAR 0 7
7472: PUSH
7473: FOR_IN
7474: IFFALSE 7880
// begin tag := GetTag ( i ) ;
7476: LD_ADDR_VAR 0 4
7480: PUSH
7481: LD_VAR 0 2
7485: PPUSH
7486: CALL_OW 110
7490: ST_TO_ADDR
// if not tag then
7491: LD_VAR 0 4
7495: NOT
7496: IFFALSE 7605
// begin if GetLives ( i ) = 1000 then
7498: LD_VAR 0 2
7502: PPUSH
7503: CALL_OW 256
7507: PUSH
7508: LD_INT 1000
7510: EQUAL
7511: IFFALSE 7527
// SetTag ( i , 1 ) else
7513: LD_VAR 0 2
7517: PPUSH
7518: LD_INT 1
7520: PPUSH
7521: CALL_OW 109
7525: GO 7603
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7527: LD_VAR 0 2
7531: PPUSH
7532: LD_VAR 0 6
7536: PUSH
7537: LD_INT 2
7539: ARRAY
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: PPUSH
7545: LD_VAR 0 6
7549: PUSH
7550: LD_INT 2
7552: ARRAY
7553: PUSH
7554: LD_INT 2
7556: ARRAY
7557: PPUSH
7558: CALL_OW 297
7562: PUSH
7563: LD_INT 10
7565: GREATER
7566: IFFALSE 7603
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7568: LD_VAR 0 2
7572: PPUSH
7573: LD_VAR 0 6
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: PPUSH
7586: LD_VAR 0 6
7590: PUSH
7591: LD_INT 2
7593: ARRAY
7594: PUSH
7595: LD_INT 2
7597: ARRAY
7598: PPUSH
7599: CALL_OW 111
// end else
7603: GO 7878
// begin if GetLives ( i ) < 760 then
7605: LD_VAR 0 2
7609: PPUSH
7610: CALL_OW 256
7614: PUSH
7615: LD_INT 760
7617: LESS
7618: IFFALSE 7669
// begin SetTag ( i , 0 ) ;
7620: LD_VAR 0 2
7624: PPUSH
7625: LD_INT 0
7627: PPUSH
7628: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7632: LD_VAR 0 2
7636: PPUSH
7637: LD_VAR 0 6
7641: PUSH
7642: LD_INT 2
7644: ARRAY
7645: PUSH
7646: LD_INT 1
7648: ARRAY
7649: PPUSH
7650: LD_VAR 0 6
7654: PUSH
7655: LD_INT 2
7657: ARRAY
7658: PUSH
7659: LD_INT 2
7661: ARRAY
7662: PPUSH
7663: CALL_OW 111
// end else
7667: GO 7878
// if tag <= attackFormula [ 1 ] then
7669: LD_VAR 0 4
7673: PUSH
7674: LD_VAR 0 6
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: LESSEQUAL
7683: IFFALSE 7844
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7685: LD_VAR 0 2
7689: PPUSH
7690: LD_VAR 0 6
7694: PUSH
7695: LD_INT 1
7697: ARRAY
7698: PUSH
7699: LD_VAR 0 4
7703: ARRAY
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: LD_VAR 0 6
7713: PUSH
7714: LD_INT 1
7716: ARRAY
7717: PUSH
7718: LD_VAR 0 4
7722: ARRAY
7723: PUSH
7724: LD_INT 2
7726: ARRAY
7727: PPUSH
7728: CALL_OW 297
7732: PUSH
7733: LD_INT 6
7735: GREATER
7736: IFFALSE 7787
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7738: LD_VAR 0 2
7742: PPUSH
7743: LD_VAR 0 6
7747: PUSH
7748: LD_INT 1
7750: ARRAY
7751: PUSH
7752: LD_VAR 0 4
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 1
7769: ARRAY
7770: PUSH
7771: LD_VAR 0 4
7775: ARRAY
7776: PUSH
7777: LD_INT 2
7779: ARRAY
7780: PPUSH
7781: CALL_OW 114
7785: GO 7842
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7787: LD_INT 81
7789: PUSH
7790: LD_INT 1
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 91
7799: PUSH
7800: LD_VAR 0 2
7804: PUSH
7805: LD_INT 10
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 69
7821: NOT
7822: IFFALSE 7842
// SetTag ( i , tag + 1 ) ;
7824: LD_VAR 0 2
7828: PPUSH
7829: LD_VAR 0 4
7833: PUSH
7834: LD_INT 1
7836: PLUS
7837: PPUSH
7838: CALL_OW 109
// end else
7842: GO 7878
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7844: LD_VAR 0 2
7848: PPUSH
7849: LD_INT 81
7851: PUSH
7852: LD_INT 1
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: PPUSH
7864: LD_VAR 0 2
7868: PPUSH
7869: CALL_OW 74
7873: PPUSH
7874: CALL_OW 115
// end ; end ;
7878: GO 7473
7880: POP
7881: POP
// end ; if sci then
7882: LD_VAR 0 8
7886: IFFALSE 8155
// begin if not sol and not mech then
7888: LD_VAR 0 7
7892: NOT
7893: PUSH
7894: LD_VAR 0 9
7898: NOT
7899: AND
7900: IFFALSE 7952
// begin for i in sci do
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 8
7911: PUSH
7912: FOR_IN
7913: IFFALSE 7948
// begin usForces := usForces union i ;
7915: LD_ADDR_EXP 44
7919: PUSH
7920: LD_EXP 44
7924: PUSH
7925: LD_VAR 0 2
7929: UNION
7930: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7931: LD_VAR 0 2
7935: PPUSH
7936: LD_INT 34
7938: PPUSH
7939: LD_INT 68
7941: PPUSH
7942: CALL_OW 111
// end ;
7946: GO 7912
7948: POP
7949: POP
// end else
7950: GO 8155
// for i in sci do
7952: LD_ADDR_VAR 0 2
7956: PUSH
7957: LD_VAR 0 8
7961: PUSH
7962: FOR_IN
7963: IFFALSE 8153
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7965: LD_VAR 0 2
7969: PPUSH
7970: LD_VAR 0 6
7974: PUSH
7975: LD_INT 2
7977: ARRAY
7978: PUSH
7979: LD_INT 1
7981: ARRAY
7982: PPUSH
7983: LD_VAR 0 6
7987: PUSH
7988: LD_INT 2
7990: ARRAY
7991: PUSH
7992: LD_INT 2
7994: ARRAY
7995: PPUSH
7996: CALL_OW 297
8000: PUSH
8001: LD_INT 10
8003: GREATER
8004: IFFALSE 8043
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8006: LD_VAR 0 2
8010: PPUSH
8011: LD_VAR 0 6
8015: PUSH
8016: LD_INT 2
8018: ARRAY
8019: PUSH
8020: LD_INT 1
8022: ARRAY
8023: PPUSH
8024: LD_VAR 0 6
8028: PUSH
8029: LD_INT 2
8031: ARRAY
8032: PUSH
8033: LD_INT 2
8035: ARRAY
8036: PPUSH
8037: CALL_OW 111
8041: GO 8151
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8043: LD_VAR 0 7
8047: PPUSH
8048: LD_INT 3
8050: PUSH
8051: LD_INT 24
8053: PUSH
8054: LD_INT 1000
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 91
8067: PUSH
8068: LD_VAR 0 2
8072: PUSH
8073: LD_INT 10
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: LIST
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 72
8089: IFFALSE 8151
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8091: LD_VAR 0 2
8095: PPUSH
8096: LD_VAR 0 7
8100: PPUSH
8101: LD_INT 3
8103: PUSH
8104: LD_INT 24
8106: PUSH
8107: LD_INT 1000
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 91
8120: PUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 10
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PPUSH
8138: CALL_OW 72
8142: PUSH
8143: LD_INT 1
8145: ARRAY
8146: PPUSH
8147: CALL_OW 128
8151: GO 7962
8153: POP
8154: POP
// end ; if mech then
8155: LD_VAR 0 9
8159: IFFALSE 8869
// begin for i in mech do
8161: LD_ADDR_VAR 0 2
8165: PUSH
8166: LD_VAR 0 9
8170: PUSH
8171: FOR_IN
8172: IFFALSE 8867
// begin tag := GetTag ( i ) ;
8174: LD_ADDR_VAR 0 4
8178: PUSH
8179: LD_VAR 0 2
8183: PPUSH
8184: CALL_OW 110
8188: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8189: LD_ADDR_VAR 0 11
8193: PUSH
8194: LD_VAR 0 2
8198: PPUSH
8199: CALL_OW 310
8203: ST_TO_ADDR
// if not tag then
8204: LD_VAR 0 4
8208: NOT
8209: IFFALSE 8580
// begin if veh then
8211: LD_VAR 0 11
8215: IFFALSE 8386
// begin if GetLives ( veh ) = 1000 then
8217: LD_VAR 0 11
8221: PPUSH
8222: CALL_OW 256
8226: PUSH
8227: LD_INT 1000
8229: EQUAL
8230: IFFALSE 8246
// SetTag ( i , 1 ) else
8232: LD_VAR 0 2
8236: PPUSH
8237: LD_INT 1
8239: PPUSH
8240: CALL_OW 109
8244: GO 8384
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8246: LD_VAR 0 11
8250: PPUSH
8251: LD_VAR 0 6
8255: PUSH
8256: LD_INT 3
8258: ARRAY
8259: PUSH
8260: LD_INT 1
8262: ARRAY
8263: PPUSH
8264: LD_VAR 0 6
8268: PUSH
8269: LD_INT 3
8271: ARRAY
8272: PUSH
8273: LD_INT 2
8275: ARRAY
8276: PPUSH
8277: CALL_OW 297
8281: PUSH
8282: LD_INT 7
8284: GREATER
8285: IFFALSE 8324
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8287: LD_VAR 0 11
8291: PPUSH
8292: LD_VAR 0 6
8296: PUSH
8297: LD_INT 3
8299: ARRAY
8300: PUSH
8301: LD_INT 1
8303: ARRAY
8304: PPUSH
8305: LD_VAR 0 6
8309: PUSH
8310: LD_INT 3
8312: ARRAY
8313: PUSH
8314: LD_INT 2
8316: ARRAY
8317: PPUSH
8318: CALL_OW 111
8322: GO 8384
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8324: LD_INT 81
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 91
8336: PUSH
8337: LD_VAR 0 2
8341: PUSH
8342: LD_INT 10
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PPUSH
8354: CALL_OW 69
8358: NOT
8359: IFFALSE 8384
// begin ComExitVehicle ( i ) ;
8361: LD_VAR 0 2
8365: PPUSH
8366: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_VAR 0 11
8379: PPUSH
8380: CALL_OW 189
// end ; end else
8384: GO 8578
// if GetLives ( i ) < 400 then
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 256
8395: PUSH
8396: LD_INT 400
8398: LESS
8399: IFFALSE 8450
// begin usAttackers := usAttackers diff i ;
8401: LD_ADDR_EXP 47
8405: PUSH
8406: LD_EXP 47
8410: PUSH
8411: LD_VAR 0 2
8415: DIFF
8416: ST_TO_ADDR
// usForces := usForces union i ;
8417: LD_ADDR_EXP 44
8421: PUSH
8422: LD_EXP 44
8426: PUSH
8427: LD_VAR 0 2
8431: UNION
8432: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8433: LD_VAR 0 2
8437: PPUSH
8438: LD_INT 34
8440: PPUSH
8441: LD_INT 68
8443: PPUSH
8444: CALL_OW 111
// end else
8448: GO 8578
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8450: LD_VAR 0 10
8454: PPUSH
8455: LD_INT 58
8457: PUSH
8458: EMPTY
8459: LIST
8460: PUSH
8461: LD_INT 24
8463: PUSH
8464: LD_INT 1000
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 72
8479: PUSH
8480: LD_VAR 0 2
8484: PPUSH
8485: CALL_OW 314
8489: NOT
8490: AND
8491: PUSH
8492: LD_INT 81
8494: PUSH
8495: LD_INT 1
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 91
8504: PUSH
8505: LD_VAR 0 2
8509: PUSH
8510: LD_INT 9
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PPUSH
8522: CALL_OW 69
8526: OR
8527: IFFALSE 8578
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_VAR 0 10
8538: PPUSH
8539: LD_INT 58
8541: PUSH
8542: EMPTY
8543: LIST
8544: PUSH
8545: LD_INT 24
8547: PUSH
8548: LD_INT 250
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PPUSH
8559: CALL_OW 72
8563: PPUSH
8564: LD_VAR 0 2
8568: PPUSH
8569: CALL_OW 74
8573: PPUSH
8574: CALL_OW 120
// end else
8578: GO 8865
// begin if veh and GetLives ( veh ) < 760 then
8580: LD_VAR 0 11
8584: PUSH
8585: LD_VAR 0 11
8589: PPUSH
8590: CALL_OW 256
8594: PUSH
8595: LD_INT 760
8597: LESS
8598: AND
8599: IFFALSE 8650
// begin SetTag ( i , 0 ) ;
8601: LD_VAR 0 2
8605: PPUSH
8606: LD_INT 0
8608: PPUSH
8609: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8613: LD_VAR 0 11
8617: PPUSH
8618: LD_VAR 0 6
8622: PUSH
8623: LD_INT 3
8625: ARRAY
8626: PUSH
8627: LD_INT 1
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 6
8635: PUSH
8636: LD_INT 3
8638: ARRAY
8639: PUSH
8640: LD_INT 2
8642: ARRAY
8643: PPUSH
8644: CALL_OW 111
// end else
8648: GO 8865
// if veh then
8650: LD_VAR 0 11
8654: IFFALSE 8865
// if tag <= attackFormula [ 4 ] then
8656: LD_VAR 0 4
8660: PUSH
8661: LD_VAR 0 6
8665: PUSH
8666: LD_INT 4
8668: ARRAY
8669: LESSEQUAL
8670: IFFALSE 8831
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8672: LD_VAR 0 11
8676: PPUSH
8677: LD_VAR 0 6
8681: PUSH
8682: LD_INT 4
8684: ARRAY
8685: PUSH
8686: LD_VAR 0 4
8690: ARRAY
8691: PUSH
8692: LD_INT 1
8694: ARRAY
8695: PPUSH
8696: LD_VAR 0 6
8700: PUSH
8701: LD_INT 4
8703: ARRAY
8704: PUSH
8705: LD_VAR 0 4
8709: ARRAY
8710: PUSH
8711: LD_INT 2
8713: ARRAY
8714: PPUSH
8715: CALL_OW 297
8719: PUSH
8720: LD_INT 6
8722: GREATER
8723: IFFALSE 8774
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8725: LD_VAR 0 11
8729: PPUSH
8730: LD_VAR 0 6
8734: PUSH
8735: LD_INT 4
8737: ARRAY
8738: PUSH
8739: LD_VAR 0 4
8743: ARRAY
8744: PUSH
8745: LD_INT 1
8747: ARRAY
8748: PPUSH
8749: LD_VAR 0 6
8753: PUSH
8754: LD_INT 4
8756: ARRAY
8757: PUSH
8758: LD_VAR 0 4
8762: ARRAY
8763: PUSH
8764: LD_INT 2
8766: ARRAY
8767: PPUSH
8768: CALL_OW 114
8772: GO 8829
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8774: LD_INT 81
8776: PUSH
8777: LD_INT 1
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 91
8786: PUSH
8787: LD_VAR 0 11
8791: PUSH
8792: LD_INT 10
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: LIST
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PPUSH
8804: CALL_OW 69
8808: NOT
8809: IFFALSE 8829
// SetTag ( i , tag + 1 ) ;
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 4
8820: PUSH
8821: LD_INT 1
8823: PLUS
8824: PPUSH
8825: CALL_OW 109
// end else
8829: GO 8865
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8831: LD_VAR 0 11
8835: PPUSH
8836: LD_INT 81
8838: PUSH
8839: LD_INT 1
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: PPUSH
8851: LD_VAR 0 2
8855: PPUSH
8856: CALL_OW 74
8860: PPUSH
8861: CALL_OW 115
// end ; end ;
8865: GO 8171
8867: POP
8868: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8869: LD_EXP 47
8873: PPUSH
8874: LD_INT 52
8876: PUSH
8877: EMPTY
8878: LIST
8879: PPUSH
8880: CALL_OW 72
8884: NOT
8885: IFFALSE 7350
// end ;
8887: LD_VAR 0 1
8891: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8892: LD_INT 22
8894: PUSH
8895: LD_INT 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 32
8904: PUSH
8905: LD_INT 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PPUSH
8916: CALL_OW 69
8920: IFFALSE 8997
8922: GO 8924
8924: DISABLE
8925: LD_INT 0
8927: PPUSH
// begin enable ;
8928: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8929: LD_ADDR_VAR 0 1
8933: PUSH
8934: LD_INT 22
8936: PUSH
8937: LD_INT 1
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 32
8946: PUSH
8947: LD_INT 1
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PPUSH
8958: CALL_OW 69
8962: PUSH
8963: FOR_IN
8964: IFFALSE 8995
// if GetFuel ( i ) < 10 then
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 261
8975: PUSH
8976: LD_INT 10
8978: LESS
8979: IFFALSE 8993
// SetFuel ( i , 10 ) ;
8981: LD_VAR 0 1
8985: PPUSH
8986: LD_INT 10
8988: PPUSH
8989: CALL_OW 240
8993: GO 8963
8995: POP
8996: POP
// end ; end_of_file
8997: PPOPN 1
8999: END
// export function Action ; var hasAll , i , tmp ; begin
9000: LD_INT 0
9002: PPUSH
9003: PPUSH
9004: PPUSH
9005: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9006: LD_ADDR_VAR 0 2
9010: PUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: LD_INT 21
9023: PUSH
9024: LD_INT 1
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 23
9033: PUSH
9034: LD_INT 2
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 69
9050: PUSH
9051: LD_INT 7
9053: GREATEREQUAL
9054: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_STRING 03_HasAll
9062: PPUSH
9063: CALL_OW 39
// Video ( true ) ;
9067: LD_INT 1
9069: PPUSH
9070: CALL 72677 0 1
// CenterNowOnUnits ( Heike ) ;
9074: LD_EXP 28
9078: PPUSH
9079: CALL_OW 87
// wait ( 0 0$2 ) ;
9083: LD_INT 70
9085: PPUSH
9086: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9090: LD_EXP 36
9094: PPUSH
9095: LD_STRING DF-1-start
9097: PPUSH
9098: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9102: LD_EXP 28
9106: PPUSH
9107: LD_EXP 36
9111: PPUSH
9112: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9116: LD_EXP 28
9120: PPUSH
9121: LD_STRING DH-1-start
9123: PPUSH
9124: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9128: LD_EXP 37
9132: PPUSH
9133: LD_INT 92
9135: PPUSH
9136: LD_INT 21
9138: PPUSH
9139: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9143: LD_EXP 32
9147: PPUSH
9148: LD_INT 94
9150: PPUSH
9151: LD_INT 23
9153: PPUSH
9154: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9158: LD_EXP 40
9162: PUSH
9163: LD_INT 1
9165: ARRAY
9166: PPUSH
9167: LD_INT 90
9169: PPUSH
9170: LD_INT 23
9172: PPUSH
9173: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9177: LD_EXP 40
9181: PUSH
9182: LD_INT 2
9184: ARRAY
9185: PPUSH
9186: LD_INT 93
9188: PPUSH
9189: LD_INT 25
9191: PPUSH
9192: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9196: LD_EXP 40
9200: PPUSH
9201: LD_EXP 37
9205: PPUSH
9206: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9210: LD_EXP 37
9214: PUSH
9215: LD_EXP 32
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PPUSH
9224: LD_EXP 28
9228: PPUSH
9229: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9233: LD_EXP 28
9237: PPUSH
9238: LD_EXP 37
9242: PPUSH
9243: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9247: LD_INT 35
9249: PPUSH
9250: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9254: LD_EXP 37
9258: PPUSH
9259: LD_INT 92
9261: PPUSH
9262: LD_INT 21
9264: PPUSH
9265: CALL_OW 307
9269: IFFALSE 9247
// Say ( Omar , DO-1-start ) ;
9271: LD_EXP 37
9275: PPUSH
9276: LD_STRING DO-1-start
9278: PPUSH
9279: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9283: LD_EXP 28
9287: PPUSH
9288: LD_STRING DH-2-start
9290: PPUSH
9291: CALL_OW 88
// if hasAll then
9295: LD_VAR 0 2
9299: IFFALSE 9427
// begin Say ( Omar , DO-2-start ) ;
9301: LD_EXP 37
9305: PPUSH
9306: LD_STRING DO-2-start
9308: PPUSH
9309: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9313: LD_EXP 37
9317: PPUSH
9318: LD_STRING DO-3-start
9320: PPUSH
9321: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9325: LD_EXP 28
9329: PPUSH
9330: LD_STRING DH-3-start
9332: PPUSH
9333: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9337: LD_EXP 36
9341: PPUSH
9342: LD_STRING DF-2-start
9344: PPUSH
9345: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9349: LD_EXP 37
9353: PPUSH
9354: LD_EXP 36
9358: PPUSH
9359: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9363: LD_EXP 37
9367: PPUSH
9368: LD_STRING DO-4-start
9370: PPUSH
9371: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9375: LD_EXP 36
9379: PPUSH
9380: LD_STRING DF-3-start
9382: PPUSH
9383: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9387: LD_EXP 37
9391: PPUSH
9392: LD_STRING DO-5-start
9394: PPUSH
9395: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9399: LD_EXP 36
9403: PPUSH
9404: LD_STRING DF-4-start
9406: PPUSH
9407: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9411: LD_EXP 37
9415: PPUSH
9416: LD_EXP 28
9420: PPUSH
9421: CALL_OW 119
// end else
9425: GO 9527
// begin Say ( Omar , DO-2-start-a ) ;
9427: LD_EXP 37
9431: PPUSH
9432: LD_STRING DO-2-start-a
9434: PPUSH
9435: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9439: LD_EXP 37
9443: PPUSH
9444: LD_STRING DO-3-start-a
9446: PPUSH
9447: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9451: LD_EXP 28
9455: PPUSH
9456: LD_STRING DH-3-start-a
9458: PPUSH
9459: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9463: LD_EXP 36
9467: PPUSH
9468: LD_STRING DF-2-start-a
9470: PPUSH
9471: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9475: LD_EXP 37
9479: PPUSH
9480: LD_EXP 36
9484: PPUSH
9485: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9489: LD_EXP 37
9493: PPUSH
9494: LD_STRING DO-4-start-a
9496: PPUSH
9497: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9501: LD_EXP 36
9505: PPUSH
9506: LD_STRING DF-3-start-a
9508: PPUSH
9509: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9513: LD_EXP 37
9517: PPUSH
9518: LD_EXP 28
9522: PPUSH
9523: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9527: LD_INT 10
9529: PPUSH
9530: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9534: LD_EXP 37
9538: PPUSH
9539: LD_STRING DO-1-mission
9541: PPUSH
9542: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9546: LD_EXP 37
9550: PPUSH
9551: LD_STRING DO-2-mission
9553: PPUSH
9554: CALL_OW 88
// if not hasAll then
9558: LD_VAR 0 2
9562: NOT
9563: IFFALSE 9577
// Say ( Omar , DO-3-mission ) ;
9565: LD_EXP 37
9569: PPUSH
9570: LD_STRING DO-3-mission
9572: PPUSH
9573: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9577: LD_EXP 37
9581: PPUSH
9582: LD_STRING DO-4-mission
9584: PPUSH
9585: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9589: LD_EXP 28
9593: PPUSH
9594: LD_STRING DH-1-mission
9596: PPUSH
9597: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9601: LD_EXP 36
9605: PPUSH
9606: LD_STRING DF-1-mission
9608: PPUSH
9609: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9613: LD_EXP 37
9617: PPUSH
9618: LD_STRING DO-5-mission
9620: PPUSH
9621: CALL_OW 88
// if not hasAll then
9625: LD_VAR 0 2
9629: NOT
9630: IFFALSE 9765
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9632: LD_ADDR_VAR 0 4
9636: PUSH
9637: LD_INT 22
9639: PUSH
9640: LD_INT 2
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 1
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 23
9659: PUSH
9660: LD_INT 2
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: PPUSH
9672: CALL_OW 69
9676: ST_TO_ADDR
// for i := 7 downto tmp do
9677: LD_ADDR_VAR 0 3
9681: PUSH
9682: DOUBLE
9683: LD_INT 7
9685: INC
9686: ST_TO_ADDR
9687: LD_VAR 0 4
9691: PUSH
9692: FOR_DOWNTO
9693: IFFALSE 9763
// begin if omarSquad < 3 then
9695: LD_EXP 40
9699: PUSH
9700: LD_INT 3
9702: LESS
9703: IFFALSE 9707
// break ;
9705: GO 9763
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9707: LD_EXP 40
9711: PUSH
9712: LD_INT 3
9714: ARRAY
9715: PPUSH
9716: LD_INT 2
9718: PPUSH
9719: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9723: LD_ADDR_EXP 42
9727: PUSH
9728: LD_EXP 42
9732: PUSH
9733: LD_EXP 40
9737: PUSH
9738: LD_INT 3
9740: ARRAY
9741: UNION
9742: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9743: LD_ADDR_EXP 40
9747: PUSH
9748: LD_EXP 40
9752: PPUSH
9753: LD_INT 3
9755: PPUSH
9756: CALL_OW 3
9760: ST_TO_ADDR
// end ;
9761: GO 9692
9763: POP
9764: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9765: LD_EXP 37
9769: PUSH
9770: LD_EXP 40
9774: ADD
9775: PPUSH
9776: LD_INT 103
9778: PPUSH
9779: LD_INT 9
9781: PPUSH
9782: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9786: LD_VAR 0 2
9790: PUSH
9791: LD_EXP 33
9795: PPUSH
9796: CALL_OW 302
9800: AND
9801: IFFALSE 9862
// begin wait ( 0 0$3 ) ;
9803: LD_INT 105
9805: PPUSH
9806: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9810: LD_EXP 33
9814: PPUSH
9815: LD_EXP 36
9819: PPUSH
9820: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9824: LD_EXP 33
9828: PPUSH
9829: LD_STRING DK-1-side
9831: PPUSH
9832: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9836: LD_EXP 36
9840: PPUSH
9841: LD_EXP 33
9845: PPUSH
9846: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9850: LD_EXP 36
9854: PPUSH
9855: LD_STRING DF-1-side
9857: PPUSH
9858: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9862: LD_INT 22
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 69
9876: PPUSH
9877: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9881: LD_EXP 36
9885: PUSH
9886: LD_EXP 39
9890: ADD
9891: PPUSH
9892: LD_INT 108
9894: PPUSH
9895: LD_INT 62
9897: PPUSH
9898: CALL_OW 111
// gameStarted := true ;
9902: LD_ADDR_EXP 3
9906: PUSH
9907: LD_INT 1
9909: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9910: LD_INT 105
9912: PPUSH
9913: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9917: LD_EXP 28
9921: PPUSH
9922: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9926: LD_EXP 28
9930: PPUSH
9931: LD_EXP 32
9935: PPUSH
9936: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9940: LD_INT 22
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PPUSH
9950: CALL_OW 69
9954: PUSH
9955: LD_EXP 28
9959: DIFF
9960: PPUSH
9961: LD_EXP 28
9965: PPUSH
9966: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
9970: LD_EXP 28
9974: PPUSH
9975: LD_STRING DH-1-explore
9977: PPUSH
9978: CALL_OW 88
// if Givi then
9982: LD_EXP 29
9986: IFFALSE 10002
// Say ( Givi , DG-1-explore ) else
9988: LD_EXP 29
9992: PPUSH
9993: LD_STRING DG-1-explore
9995: PPUSH
9996: CALL_OW 88
10000: GO 10039
// if heikeSecondSquad then
10002: LD_EXP 42
10006: IFFALSE 10039
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10008: LD_EXP 42
10012: PPUSH
10013: LD_INT 26
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 72
10027: PUSH
10028: LD_INT 1
10030: ARRAY
10031: PPUSH
10032: LD_STRING DArm-1-explore
10034: PPUSH
10035: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10039: LD_EXP 32
10043: PPUSH
10044: LD_STRING DA-1-explore
10046: PPUSH
10047: CALL_OW 88
// if Sophia then
10051: LD_EXP 34
10055: IFFALSE 10133
// begin Say ( Sophia , DS-2-explore ) ;
10057: LD_EXP 34
10061: PPUSH
10062: LD_STRING DS-2-explore
10064: PPUSH
10065: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10069: LD_EXP 32
10073: PPUSH
10074: LD_STRING DA-2-explore
10076: PPUSH
10077: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10081: LD_EXP 34
10085: PPUSH
10086: LD_EXP 32
10090: PPUSH
10091: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10095: LD_EXP 32
10099: PPUSH
10100: LD_EXP 34
10104: PPUSH
10105: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10109: LD_EXP 34
10113: PPUSH
10114: LD_STRING DS-3-explore
10116: PPUSH
10117: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10121: LD_EXP 32
10125: PPUSH
10126: LD_STRING DA-3-explore
10128: PPUSH
10129: CALL_OW 88
// end ; if Mike then
10133: LD_EXP 30
10137: IFFALSE 10193
// begin Say ( Mike , DM-1-explore ) ;
10139: LD_EXP 30
10143: PPUSH
10144: LD_STRING DM-1-explore
10146: PPUSH
10147: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10151: LD_EXP 28
10155: PPUSH
10156: LD_STRING DH-2-explore
10158: PPUSH
10159: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10163: LD_EXP 30
10167: PPUSH
10168: LD_STRING DM-2-explore
10170: PPUSH
10171: CALL_OW 88
// if Kaia then
10175: LD_EXP 33
10179: IFFALSE 10193
// Say ( Kaia , DK-1-explore ) ;
10181: LD_EXP 33
10185: PPUSH
10186: LD_STRING DK-1-explore
10188: PPUSH
10189: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10193: LD_INT 22
10195: PUSH
10196: LD_INT 2
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PPUSH
10203: CALL_OW 69
10207: PPUSH
10208: CALL_OW 139
// Video ( false ) ;
10212: LD_INT 0
10214: PPUSH
10215: CALL 72677 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10219: LD_STRING BuildBase
10221: PPUSH
10222: CALL_OW 337
// SaveForQuickRestart ;
10226: CALL_OW 22
// end ;
10230: LD_VAR 0 1
10234: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10235: LD_EXP 5
10239: NOT
10240: PUSH
10241: LD_EXP 6
10245: NOT
10246: AND
10247: PUSH
10248: LD_INT 5
10250: PPUSH
10251: LD_INT 22
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 70
10265: AND
10266: PUSH
10267: LD_EXP 6
10271: NOT
10272: AND
10273: IFFALSE 10358
10275: GO 10277
10277: DISABLE
// begin if Mike then
10278: LD_EXP 30
10282: IFFALSE 10298
// Say ( Mike , DM-1-scout ) else
10284: LD_EXP 30
10288: PPUSH
10289: LD_STRING DM-1-scout
10291: PPUSH
10292: CALL_OW 88
10296: GO 10329
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10298: LD_EXP 42
10302: PPUSH
10303: LD_INT 26
10305: PUSH
10306: LD_INT 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 72
10317: PUSH
10318: LD_INT 1
10320: ARRAY
10321: PPUSH
10322: LD_STRING DArm-1-explore
10324: PPUSH
10325: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10329: LD_INT 54
10331: PPUSH
10332: LD_INT 35
10334: PPUSH
10335: LD_INT 2
10337: PPUSH
10338: LD_INT 1
10340: PPUSH
10341: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10345: LD_INT 54
10347: PPUSH
10348: LD_INT 35
10350: PPUSH
10351: LD_INT 2
10353: PPUSH
10354: CALL_OW 331
// end ;
10358: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10359: LD_INT 6
10361: PPUSH
10362: LD_INT 22
10364: PUSH
10365: LD_INT 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 70
10376: PUSH
10377: LD_EXP 6
10381: NOT
10382: AND
10383: IFFALSE 10637
10385: GO 10387
10387: DISABLE
10388: LD_INT 0
10390: PPUSH
10391: PPUSH
10392: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_EXP 42
10402: PPUSH
10403: LD_INT 26
10405: PUSH
10406: LD_INT 1
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PPUSH
10413: CALL_OW 72
10417: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10418: LD_ADDR_VAR 0 2
10422: PUSH
10423: LD_EXP 42
10427: PPUSH
10428: LD_INT 26
10430: PUSH
10431: LD_INT 2
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 72
10442: ST_TO_ADDR
// DialogueOn ;
10443: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10447: LD_INT 36
10449: PPUSH
10450: LD_INT 22
10452: PPUSH
10453: LD_INT 2
10455: PPUSH
10456: LD_INT 8
10458: PPUSH
10459: CALL_OW 330
// dwait ( 0 0$1 ) ;
10463: LD_INT 35
10465: PPUSH
10466: CALL_OW 68
// speakerOk := false ;
10470: LD_ADDR_VAR 0 3
10474: PUSH
10475: LD_INT 0
10477: ST_TO_ADDR
// if Mike then
10478: LD_EXP 30
10482: IFFALSE 10504
// speakerOk := Say ( Mike , DM-1-spot ) else
10484: LD_ADDR_VAR 0 3
10488: PUSH
10489: LD_EXP 30
10493: PPUSH
10494: LD_STRING DM-1-spot
10496: PPUSH
10497: CALL_OW 88
10501: ST_TO_ADDR
10502: GO 10532
// if randomMen then
10504: LD_VAR 0 1
10508: IFFALSE 10532
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10510: LD_ADDR_VAR 0 3
10514: PUSH
10515: LD_VAR 0 1
10519: PUSH
10520: LD_INT 1
10522: ARRAY
10523: PPUSH
10524: LD_STRING DArm-1-spot-a
10526: PPUSH
10527: CALL_OW 88
10531: ST_TO_ADDR
// if speakerOk then
10532: LD_VAR 0 3
10536: IFFALSE 10580
// begin if Givi then
10538: LD_EXP 29
10542: IFFALSE 10558
// Say ( Givi , DG-1-spot ) else
10544: LD_EXP 29
10548: PPUSH
10549: LD_STRING DG-1-spot
10551: PPUSH
10552: CALL_OW 88
10556: GO 10580
// if randomWomen then
10558: LD_VAR 0 2
10562: IFFALSE 10580
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10564: LD_VAR 0 2
10568: PUSH
10569: LD_INT 1
10571: ARRAY
10572: PPUSH
10573: LD_STRING DArf-1-spot-a
10575: PPUSH
10576: CALL_OW 88
// end ; if Mike then
10580: LD_EXP 30
10584: IFFALSE 10600
// Say ( Heike , DH-1-spot ) else
10586: LD_EXP 28
10590: PPUSH
10591: LD_STRING DH-1-spot
10593: PPUSH
10594: CALL_OW 88
10598: GO 10612
// Say ( Heike , DH-1-spot-a ) ;
10600: LD_EXP 28
10604: PPUSH
10605: LD_STRING DH-1-spot-a
10607: PPUSH
10608: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10612: LD_INT 36
10614: PPUSH
10615: LD_INT 22
10617: PPUSH
10618: LD_INT 2
10620: PPUSH
10621: CALL_OW 331
// DialogueOff ;
10625: CALL_OW 7
// americanBaseSpoted := true ;
10629: LD_ADDR_EXP 5
10633: PUSH
10634: LD_INT 1
10636: ST_TO_ADDR
// end ;
10637: PPOPN 3
10639: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10640: LD_EXP 5
10644: NOT
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 2
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 101
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: AND
10675: PUSH
10676: LD_EXP 6
10680: NOT
10681: AND
10682: IFFALSE 10768
10684: GO 10686
10686: DISABLE
10687: LD_INT 0
10689: PPUSH
// begin americanBaseSpoted := true ;
10690: LD_ADDR_EXP 5
10694: PUSH
10695: LD_INT 1
10697: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10698: LD_ADDR_VAR 0 1
10702: PUSH
10703: LD_EXP 42
10707: PPUSH
10708: LD_INT 26
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 72
10722: ST_TO_ADDR
// if not randomMen then
10723: LD_VAR 0 1
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 10768
// DialogueOn ;
10732: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10736: LD_VAR 0 1
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_STRING DArm-1-spot-a
10747: PPUSH
10748: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10752: LD_EXP 28
10756: PPUSH
10757: LD_STRING DH-1-spot-a
10759: PPUSH
10760: CALL_OW 88
// DialogueOff ;
10764: CALL_OW 7
// end ;
10768: PPOPN 1
10770: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10771: LD_INT 11
10773: PPUSH
10774: CALL_OW 255
10778: PUSH
10779: LD_INT 2
10781: EQUAL
10782: PUSH
10783: LD_INT 7
10785: PPUSH
10786: LD_INT 22
10788: PUSH
10789: LD_INT 1
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 3
10798: PUSH
10799: LD_INT 50
10801: PUSH
10802: EMPTY
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 30
10811: PUSH
10812: LD_INT 31
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: PPUSH
10824: CALL_OW 70
10828: OR
10829: PUSH
10830: LD_INT 7
10832: PPUSH
10833: LD_INT 22
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PPUSH
10843: CALL_OW 70
10847: PUSH
10848: LD_INT 1
10850: GREATER
10851: OR
10852: PUSH
10853: LD_EXP 44
10857: PUSH
10858: LD_INT 4
10860: LESSEQUAL
10861: OR
10862: IFFALSE 11441
10864: GO 10866
10866: DISABLE
10867: LD_INT 0
10869: PPUSH
10870: PPUSH
// begin wait ( 0 0$3 ) ;
10871: LD_INT 105
10873: PPUSH
10874: CALL_OW 67
// americanStartRun := true ;
10878: LD_ADDR_EXP 14
10882: PUSH
10883: LD_INT 1
10885: ST_TO_ADDR
// if IsOk ( usCommander ) then
10886: LD_EXP 45
10890: PPUSH
10891: CALL_OW 302
10895: IFFALSE 10925
// begin usForces := usForces union usCommander ;
10897: LD_ADDR_EXP 44
10901: PUSH
10902: LD_EXP 44
10906: PUSH
10907: LD_EXP 45
10911: UNION
10912: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10913: LD_EXP 45
10917: PPUSH
10918: LD_STRING DUsm-1-assault
10920: PPUSH
10921: CALL_OW 88
// end ; for i in usForces do
10925: LD_ADDR_VAR 0 1
10929: PUSH
10930: LD_EXP 44
10934: PUSH
10935: FOR_IN
10936: IFFALSE 10982
// begin if IsInUnit ( i ) then
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 310
10947: IFFALSE 10958
// ComExitBuilding ( i ) ;
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 122
// wait ( 3 ) ;
10958: LD_INT 3
10960: PPUSH
10961: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: LD_INT 34
10972: PPUSH
10973: LD_INT 67
10975: PPUSH
10976: CALL_OW 111
// end ;
10980: GO 10935
10982: POP
10983: POP
// Say ( Heike , DH-1-assault ) ;
10984: LD_EXP 28
10988: PPUSH
10989: LD_STRING DH-1-assault
10991: PPUSH
10992: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10996: LD_INT 35
10998: PPUSH
10999: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11003: LD_VAR 0 1
11007: PPUSH
11008: LD_INT 34
11010: PPUSH
11011: LD_INT 67
11013: PPUSH
11014: CALL_OW 111
// until not usForces ;
11018: LD_EXP 44
11022: NOT
11023: IFFALSE 10996
// music_nat := 2 ;
11025: LD_ADDR_OWVAR 71
11029: PUSH
11030: LD_INT 2
11032: ST_TO_ADDR
// music_class := music_victory ;
11033: LD_ADDR_OWVAR 72
11037: PUSH
11038: LD_INT 4
11040: ST_TO_ADDR
// if not americanHasEscaped then
11041: LD_EXP 8
11045: NOT
11046: IFFALSE 11067
// begin Say ( Heike , DH-2-assault ) ;
11048: LD_EXP 28
11052: PPUSH
11053: LD_STRING DH-2-assault
11055: PPUSH
11056: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11060: LD_STRING ACH_CLEAN
11062: PPUSH
11063: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11067: LD_INT 70
11069: PPUSH
11070: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11074: LD_INT 35
11076: PPUSH
11077: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11081: LD_INT 22
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 21
11093: PUSH
11094: LD_INT 1
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 3
11103: PUSH
11104: LD_INT 50
11106: PUSH
11107: EMPTY
11108: LIST
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: PPUSH
11119: CALL_OW 69
11123: NOT
11124: IFFALSE 11074
// InGameOn ;
11126: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11130: LD_INT 11
11132: PPUSH
11133: CALL_OW 255
11137: PUSH
11138: LD_INT 2
11140: EQUAL
11141: NOT
11142: IFFALSE 11154
// SetSide ( usDepot , 2 ) ;
11144: LD_INT 11
11146: PPUSH
11147: LD_INT 2
11149: PPUSH
11150: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11154: LD_INT 35
11156: PPUSH
11157: LD_INT 22
11159: PPUSH
11160: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11164: LD_EXP 28
11168: PPUSH
11169: LD_INT 35
11171: PPUSH
11172: LD_INT 22
11174: PPUSH
11175: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11179: LD_EXP 28
11183: PPUSH
11184: LD_INT 38
11186: PPUSH
11187: LD_INT 25
11189: PPUSH
11190: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11194: LD_EXP 41
11198: PUSH
11199: LD_EXP 42
11203: UNION
11204: PPUSH
11205: LD_INT 39
11207: PPUSH
11208: LD_INT 26
11210: PPUSH
11211: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11215: LD_EXP 41
11219: PUSH
11220: LD_EXP 42
11224: UNION
11225: PPUSH
11226: LD_EXP 28
11230: PPUSH
11231: CALL_OW 179
// p := 0 ;
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11243: LD_INT 35
11245: PPUSH
11246: CALL_OW 67
// p := p + 1 ;
11250: LD_ADDR_VAR 0 2
11254: PUSH
11255: LD_VAR 0 2
11259: PUSH
11260: LD_INT 1
11262: PLUS
11263: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11264: LD_EXP 28
11268: PPUSH
11269: CALL_OW 314
11273: NOT
11274: PUSH
11275: LD_VAR 0 2
11279: PUSH
11280: LD_INT 10
11282: GREATER
11283: OR
11284: IFFALSE 11243
// Say ( Heike , DH-1-capture ) ;
11286: LD_EXP 28
11290: PPUSH
11291: LD_STRING DH-1-capture
11293: PPUSH
11294: CALL_OW 88
// if Markov then
11298: LD_EXP 35
11302: IFFALSE 11316
// Say ( Markov , DMar-1-capture ) ;
11304: LD_EXP 35
11308: PPUSH
11309: LD_STRING DMar-1-capture
11311: PPUSH
11312: CALL_OW 88
// if Sophia then
11316: LD_EXP 34
11320: IFFALSE 11346
// begin Say ( Heike , DH-2-capture ) ;
11322: LD_EXP 28
11326: PPUSH
11327: LD_STRING DH-2-capture
11329: PPUSH
11330: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11334: LD_EXP 34
11338: PPUSH
11339: LD_STRING DS-1-capture
11341: PPUSH
11342: CALL_OW 88
// end ; InGameOff ;
11346: CALL_OW 9
// music_nat := music_auto ;
11350: LD_ADDR_OWVAR 71
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// music_class := music_auto ;
11358: LD_ADDR_OWVAR 72
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11366: LD_STRING ConstructBase
11368: PPUSH
11369: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11373: LD_ADDR_VAR 0 1
11377: PUSH
11378: LD_INT 22
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 21
11390: PUSH
11391: LD_INT 3
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 69
11406: PUSH
11407: FOR_IN
11408: IFFALSE 11424
// SetSide ( i , 2 ) ;
11410: LD_VAR 0 1
11414: PPUSH
11415: LD_INT 2
11417: PPUSH
11418: CALL_OW 235
11422: GO 11407
11424: POP
11425: POP
// wait ( 0 0$3 ) ;
11426: LD_INT 105
11428: PPUSH
11429: CALL_OW 67
// americanBaseCaptured := true ;
11433: LD_ADDR_EXP 6
11437: PUSH
11438: LD_INT 1
11440: ST_TO_ADDR
// end ;
11441: PPOPN 2
11443: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11444: LD_EXP 13
11448: PUSH
11449: LD_INT 3
11451: GREATEREQUAL
11452: IFFALSE 11464
11454: GO 11456
11456: DISABLE
// SetAchievement ( ACH_ENG ) ;
11457: LD_STRING ACH_ENG
11459: PPUSH
11460: CALL_OW 543
11464: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11465: LD_INT 22
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 25
11477: PUSH
11478: LD_INT 15
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 69
11493: PUSH
11494: LD_INT 4
11496: GREATEREQUAL
11497: IFFALSE 11509
11499: GO 11501
11501: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11502: LD_STRING ACH_APEGEN
11504: PPUSH
11505: CALL_OW 543
11509: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11510: LD_INT 22
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 30
11522: PUSH
11523: LD_INT 2
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 3
11532: PUSH
11533: LD_INT 57
11535: PUSH
11536: EMPTY
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: PPUSH
11548: CALL_OW 69
11552: IFFALSE 11795
11554: GO 11556
11556: DISABLE
// begin workshopBuilded := true ;
11557: LD_ADDR_EXP 10
11561: PUSH
11562: LD_INT 1
11564: ST_TO_ADDR
// if IsOk ( Markov ) then
11565: LD_EXP 35
11569: PPUSH
11570: CALL_OW 302
11574: IFFALSE 11633
// begin Say ( Heike , DH-1-shop-a ) ;
11576: LD_EXP 28
11580: PPUSH
11581: LD_STRING DH-1-shop-a
11583: PPUSH
11584: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11588: LD_INT 47
11590: PPUSH
11591: LD_INT 2
11593: PPUSH
11594: CALL_OW 321
11598: PUSH
11599: LD_INT 2
11601: EQUAL
11602: PUSH
11603: LD_INT 45
11605: PPUSH
11606: LD_INT 2
11608: PPUSH
11609: CALL_OW 321
11613: PUSH
11614: LD_INT 2
11616: EQUAL
11617: AND
11618: NOT
11619: IFFALSE 11633
// Say ( Markov , DMar-1-shop-a ) ;
11621: LD_EXP 35
11625: PPUSH
11626: LD_STRING DMar-1-shop-a
11628: PPUSH
11629: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11633: LD_INT 35
11635: PPUSH
11636: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11640: LD_INT 47
11642: PPUSH
11643: LD_INT 2
11645: PPUSH
11646: CALL_OW 321
11650: PUSH
11651: LD_INT 2
11653: EQUAL
11654: PUSH
11655: LD_INT 45
11657: PPUSH
11658: LD_INT 2
11660: PPUSH
11661: CALL_OW 321
11665: PUSH
11666: LD_INT 2
11668: EQUAL
11669: OR
11670: IFFALSE 11633
// DialogueOn ;
11672: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11676: LD_EXP 35
11680: PPUSH
11681: LD_STRING DMar-1-shop
11683: PPUSH
11684: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11688: LD_EXP 28
11692: PPUSH
11693: LD_STRING DH-1-shop
11695: PPUSH
11696: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11700: LD_EXP 35
11704: PPUSH
11705: LD_STRING DMar-2-shop
11707: PPUSH
11708: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11712: LD_EXP 35
11716: PPUSH
11717: LD_STRING DMar-3-shop
11719: PPUSH
11720: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11724: LD_EXP 28
11728: PPUSH
11729: LD_STRING DH-2-shop
11731: PPUSH
11732: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11736: LD_EXP 35
11740: PPUSH
11741: LD_STRING DMar-4-shop
11743: PPUSH
11744: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11748: LD_EXP 28
11752: PPUSH
11753: LD_STRING DH-3-shop
11755: PPUSH
11756: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11760: LD_EXP 35
11764: PPUSH
11765: LD_STRING DMar-5-shop
11767: PPUSH
11768: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11772: LD_EXP 28
11776: PPUSH
11777: LD_STRING DH-4-shop
11779: PPUSH
11780: CALL_OW 88
// DialogueOff ;
11784: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11788: LD_STRING ConstructVeh
11790: PPUSH
11791: CALL_OW 337
// end ;
11795: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11796: LD_INT 2
11798: PPUSH
11799: LD_INT 2
11801: PPUSH
11802: LD_INT 1
11804: PPUSH
11805: CALL 36459 0 3
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: IFFALSE 11825
11815: GO 11817
11817: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11818: LD_STRING Techs
11820: PPUSH
11821: CALL_OW 337
11825: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11826: LD_EXP 35
11830: PPUSH
11831: CALL_OW 302
11835: PUSH
11836: LD_INT 22
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 2
11848: PUSH
11849: LD_INT 34
11851: PUSH
11852: LD_INT 22
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 35
11861: PUSH
11862: LD_INT 22
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 69
11882: AND
11883: IFFALSE 11990
11885: GO 11887
11887: DISABLE
// begin DialogueOn ;
11888: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11892: LD_INT 22
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 2
11904: PUSH
11905: LD_INT 34
11907: PUSH
11908: LD_INT 22
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 35
11917: PUSH
11918: LD_INT 22
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PPUSH
11934: CALL_OW 69
11938: PPUSH
11939: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11943: LD_INT 10
11945: PPUSH
11946: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11950: LD_EXP 28
11954: PPUSH
11955: LD_STRING DH-1-bal
11957: PPUSH
11958: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
11962: LD_EXP 35
11966: PPUSH
11967: LD_STRING DMar-1-bal
11969: PPUSH
11970: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
11974: LD_EXP 28
11978: PPUSH
11979: LD_STRING DH-2-bal
11981: PPUSH
11982: CALL_OW 88
// DialogueOff ;
11986: CALL_OW 7
// end ;
11990: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
11991: LD_EXP 32
11995: PPUSH
11996: CALL_OW 302
12000: PUSH
12001: LD_INT 22
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 30
12013: PUSH
12014: LD_INT 6
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: AND
12030: IFFALSE 12091
12032: GO 12034
12034: DISABLE
// begin DialogueOn ;
12035: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12039: LD_EXP 32
12043: PPUSH
12044: LD_STRING DA-1-lab
12046: PPUSH
12047: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12051: LD_EXP 28
12055: PPUSH
12056: LD_STRING DH-1-lab
12058: PPUSH
12059: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12063: LD_EXP 32
12067: PPUSH
12068: LD_STRING DA-2-lab
12070: PPUSH
12071: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12075: LD_EXP 28
12079: PPUSH
12080: LD_STRING DH-2-lab
12082: PPUSH
12083: CALL_OW 88
// DialogueOff ;
12087: CALL_OW 7
// end ;
12091: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12092: LD_EXP 33
12096: PPUSH
12097: CALL_OW 302
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_INT 2
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 25
12114: PUSH
12115: LD_INT 15
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 69
12130: AND
12131: PUSH
12132: LD_INT 81
12134: PUSH
12135: LD_INT 2
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: NOT
12147: AND
12148: IFFALSE 12330
12150: GO 12152
12152: DISABLE
12153: LD_INT 0
12155: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12156: LD_ADDR_VAR 0 1
12160: PUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 2
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 15
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 69
12189: ST_TO_ADDR
// InGameOn ;
12190: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12194: LD_VAR 0 1
12198: PUSH
12199: LD_INT 1
12201: ARRAY
12202: PPUSH
12203: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12207: LD_VAR 0 1
12211: PUSH
12212: LD_INT 1
12214: ARRAY
12215: PPUSH
12216: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12220: LD_EXP 33
12224: PPUSH
12225: LD_STRING DK-1-apesol
12227: PPUSH
12228: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12232: LD_VAR 0 1
12236: PUSH
12237: LD_INT 1
12239: ARRAY
12240: PPUSH
12241: LD_INT 35
12243: PPUSH
12244: LD_INT 28
12246: PPUSH
12247: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 1
12258: ARRAY
12259: PPUSH
12260: LD_INT 36
12262: PPUSH
12263: LD_INT 17
12265: PPUSH
12266: CALL_OW 171
// DialogueOn ;
12270: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12274: LD_EXP 32
12278: PPUSH
12279: LD_STRING DA-1-apesol
12281: PPUSH
12282: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12286: LD_EXP 33
12290: PPUSH
12291: LD_STRING DK-2-apesol
12293: PPUSH
12294: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12298: LD_EXP 32
12302: PPUSH
12303: LD_STRING DA-2-apesol
12305: PPUSH
12306: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12310: LD_EXP 33
12314: PPUSH
12315: LD_STRING DK-3-apesol
12317: PPUSH
12318: CALL_OW 88
// DialogueOff ;
12322: CALL_OW 7
// InGameOff ;
12326: CALL_OW 9
// end ;
12330: PPOPN 1
12332: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12333: LD_EXP 34
12337: PPUSH
12338: CALL_OW 302
12342: PUSH
12343: LD_INT 22
12345: PUSH
12346: LD_INT 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 25
12355: PUSH
12356: LD_INT 16
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 69
12371: AND
12372: PUSH
12373: LD_INT 81
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 69
12387: NOT
12388: AND
12389: IFFALSE 12652
12391: GO 12393
12393: DISABLE
12394: LD_INT 0
12396: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12397: LD_ADDR_VAR 0 1
12401: PUSH
12402: LD_INT 22
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 25
12414: PUSH
12415: LD_INT 16
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PPUSH
12426: CALL_OW 69
12430: ST_TO_ADDR
// InGameOn ;
12431: CALL_OW 8
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12435: LD_INT 5
12437: PPUSH
12438: LD_INT 35
12440: PPUSH
12441: LD_INT 22
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12451: LD_EXP 34
12455: PPUSH
12456: LD_VAR 0 1
12460: PUSH
12461: LD_INT 1
12463: ARRAY
12464: PPUSH
12465: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12469: LD_VAR 0 1
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12482: LD_VAR 0 1
12486: PUSH
12487: LD_INT 1
12489: ARRAY
12490: PPUSH
12491: CALL_OW 122
// wait ( 0 0$2 ) ;
12495: LD_INT 70
12497: PPUSH
12498: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12502: LD_EXP 34
12506: PPUSH
12507: LD_STRING DS-1-apeeng
12509: PPUSH
12510: CALL_OW 88
// if IsOk ( Kamil ) then
12514: LD_EXP 31
12518: PPUSH
12519: CALL_OW 302
12523: IFFALSE 12648
// begin Say ( Kamil , DKam-1-apeeng ) ;
12525: LD_EXP 31
12529: PPUSH
12530: LD_STRING DKam-1-apeeng
12532: PPUSH
12533: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12537: LD_EXP 34
12541: PPUSH
12542: LD_STRING DS-2-apeeng
12544: PPUSH
12545: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12549: LD_EXP 31
12553: PPUSH
12554: LD_STRING DKam-2-apeeng
12556: PPUSH
12557: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12561: LD_EXP 34
12565: PPUSH
12566: LD_STRING DS-3-apeeng
12568: PPUSH
12569: CALL_OW 88
// if not IsOK ( Kaia ) then
12573: LD_EXP 33
12577: PPUSH
12578: CALL_OW 302
12582: NOT
12583: IFFALSE 12591
// begin InGameOff ;
12585: CALL_OW 9
// exit ;
12589: GO 12652
// end ; Say ( Kaia , DK-1-apeeng ) ;
12591: LD_EXP 33
12595: PPUSH
12596: LD_STRING DK-1-apeeng
12598: PPUSH
12599: CALL_OW 88
// if not IsOk ( Givi ) then
12603: LD_EXP 29
12607: PPUSH
12608: CALL_OW 302
12612: NOT
12613: IFFALSE 12624
// begin Video ( false ) ;
12615: LD_INT 0
12617: PPUSH
12618: CALL 72677 0 1
// exit ;
12622: GO 12652
// end ; Say ( Givi , DG-1-apeeng ) ;
12624: LD_EXP 29
12628: PPUSH
12629: LD_STRING DG-1-apeeng
12631: PPUSH
12632: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12636: LD_EXP 33
12640: PPUSH
12641: LD_STRING DK-2-apeeng
12643: PPUSH
12644: CALL_OW 88
// end ; InGameOff ;
12648: CALL_OW 9
// end ;
12652: PPOPN 1
12654: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12655: LD_EXP 4
12659: PUSH
12660: LD_INT 22
12662: PUSH
12663: LD_INT 2
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 30
12672: PUSH
12673: LD_INT 0
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PPUSH
12684: CALL_OW 69
12688: AND
12689: IFFALSE 12854
12691: GO 12693
12693: DISABLE
// begin wait ( 0 0$10 ) ;
12694: LD_INT 350
12696: PPUSH
12697: CALL_OW 67
// DialogueOn ;
12701: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12705: LD_EXP 36
12709: PPUSH
12710: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12714: LD_EXP 36
12718: PPUSH
12719: LD_STRING DF-1-distribution
12721: PPUSH
12722: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12726: LD_EXP 28
12730: PPUSH
12731: LD_STRING DH-2-distribution
12733: PPUSH
12734: CALL_OW 88
// if IsOk ( Kaia ) then
12738: LD_EXP 33
12742: PPUSH
12743: CALL_OW 302
12747: IFFALSE 12808
// begin Say ( Kaia , DK-1-distribution ) ;
12749: LD_EXP 33
12753: PPUSH
12754: LD_STRING DK-1-distribution
12756: PPUSH
12757: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12761: LD_EXP 28
12765: PPUSH
12766: LD_STRING DH-1-distribution
12768: PPUSH
12769: CALL_OW 88
// if IsOk ( Givi ) then
12773: LD_EXP 29
12777: PPUSH
12778: CALL_OW 302
12782: IFFALSE 12808
// begin Say ( Givi , DG-1-distribution ) ;
12784: LD_EXP 29
12788: PPUSH
12789: LD_STRING DG-1-distribution
12791: PPUSH
12792: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12796: LD_EXP 28
12800: PPUSH
12801: LD_STRING DH-3-distribution
12803: PPUSH
12804: CALL_OW 88
// end ; end ; DialogueOff ;
12808: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12812: LD_STRING Crates1
12814: PPUSH
12815: CALL_OW 337
// farmerRequestedCrates := 300 ;
12819: LD_ADDR_EXP 16
12823: PUSH
12824: LD_INT 300
12826: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12827: LD_STRING FarmerCrates
12829: PPUSH
12830: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12834: LD_INT 10
12836: PPUSH
12837: LD_INT 1
12839: PPUSH
12840: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12844: LD_INT 108
12846: PPUSH
12847: LD_INT 61
12849: PPUSH
12850: CALL_OW 86
// end ;
12854: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12855: LD_EXP 6
12859: PUSH
12860: LD_INT 22
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: LD_INT 3
12872: PUSH
12873: LD_INT 57
12875: PUSH
12876: EMPTY
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: LD_INT 30
12888: PUSH
12889: LD_INT 6
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 30
12898: PUSH
12899: LD_INT 7
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: PPUSH
12916: CALL_OW 69
12920: AND
12921: PUSH
12922: LD_INT 22
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 3
12934: PUSH
12935: LD_INT 57
12937: PUSH
12938: EMPTY
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 30
12947: PUSH
12948: LD_INT 4
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 69
12964: AND
12965: IFFALSE 13129
12967: GO 12969
12969: DISABLE
12970: LD_INT 0
12972: PPUSH
// begin wait ( 0 0$10 ) ;
12973: LD_INT 350
12975: PPUSH
12976: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
12980: LD_ADDR_VAR 0 1
12984: PUSH
12985: LD_EXP 42
12989: PPUSH
12990: LD_INT 26
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 25
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 72
13018: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13019: LD_EXP 28
13023: PPUSH
13024: LD_STRING DH-1-task
13026: PPUSH
13027: CALL_OW 88
// if IsOk ( Sophia ) then
13031: LD_EXP 34
13035: PPUSH
13036: CALL_OW 302
13040: IFFALSE 13080
// begin Say ( Sophia , DS-1-task ) ;
13042: LD_EXP 34
13046: PPUSH
13047: LD_STRING DS-1-task
13049: PPUSH
13050: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13054: LD_EXP 34
13058: PPUSH
13059: LD_STRING DS-2-task
13061: PPUSH
13062: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13066: LD_EXP 28
13070: PPUSH
13071: LD_STRING DH-2-task
13073: PPUSH
13074: CALL_OW 88
// end else
13078: GO 13114
// if eng then
13080: LD_VAR 0 1
13084: IFFALSE 13114
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13086: LD_VAR 0 1
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PPUSH
13095: LD_STRING DArm-1-task
13097: PPUSH
13098: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13102: LD_EXP 28
13106: PPUSH
13107: LD_STRING DH-2-task
13109: PPUSH
13110: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13114: LD_STRING BaseConstructed
13116: PPUSH
13117: CALL_OW 337
// allowConvoys := true ;
13121: LD_ADDR_EXP 12
13125: PUSH
13126: LD_INT 1
13128: ST_TO_ADDR
// end ;
13129: PPOPN 1
13131: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13132: LD_INT 22
13134: PUSH
13135: LD_INT 4
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 34
13144: PUSH
13145: LD_INT 12
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PPUSH
13156: CALL_OW 69
13160: IFFALSE 13328
13162: GO 13164
13164: DISABLE
13165: LD_INT 0
13167: PPUSH
13168: PPUSH
13169: PPUSH
// begin wait ( 0 0$2 ) ;
13170: LD_INT 70
13172: PPUSH
13173: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13177: LD_ADDR_VAR 0 1
13181: PUSH
13182: LD_INT 22
13184: PUSH
13185: LD_INT 4
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 34
13194: PUSH
13195: LD_INT 12
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 69
13210: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: LD_VAR 0 1
13220: PUSH
13221: LD_INT 1
13223: ARRAY
13224: PPUSH
13225: CALL_OW 250
13229: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13230: LD_ADDR_VAR 0 3
13234: PUSH
13235: LD_VAR 0 1
13239: PUSH
13240: LD_INT 1
13242: ARRAY
13243: PPUSH
13244: CALL_OW 251
13248: ST_TO_ADDR
// DialogueOn ;
13249: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13253: LD_VAR 0 2
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13267: LD_VAR 0 2
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 2
13279: PPUSH
13280: LD_INT 6
13282: NEG
13283: PPUSH
13284: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13288: LD_INT 10
13290: PPUSH
13291: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13295: LD_EXP 28
13299: PPUSH
13300: LD_STRING DH-1-seecargo
13302: PPUSH
13303: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13307: LD_VAR 0 2
13311: PPUSH
13312: LD_VAR 0 3
13316: PPUSH
13317: LD_INT 2
13319: PPUSH
13320: CALL_OW 331
// DialogueOff ;
13324: CALL_OW 7
// end ;
13328: PPOPN 3
13330: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13331: LD_EXP 4
13335: PUSH
13336: LD_EXP 15
13340: PUSH
13341: LD_INT 300
13343: GREATEREQUAL
13344: AND
13345: IFFALSE 13417
13347: GO 13349
13349: DISABLE
// begin DialogueOn ;
13350: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13354: LD_EXP 36
13358: PPUSH
13359: LD_STRING DF-1-delivery-2
13361: PPUSH
13362: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13366: LD_EXP 28
13370: PPUSH
13371: LD_STRING DH-1-delivery-2
13373: PPUSH
13374: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13378: LD_EXP 36
13382: PPUSH
13383: LD_STRING DF-2-delivery-2
13385: PPUSH
13386: CALL_OW 94
// DialogueOff ;
13390: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13394: LD_STRING Crates2
13396: PPUSH
13397: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13401: LD_ADDR_EXP 17
13405: PUSH
13406: LD_INT 63000
13408: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13409: LD_ADDR_EXP 16
13413: PUSH
13414: LD_INT 600
13416: ST_TO_ADDR
// end ;
13417: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13418: LD_EXP 4
13422: PUSH
13423: LD_EXP 15
13427: PUSH
13428: LD_INT 600
13430: GREATEREQUAL
13431: AND
13432: PUSH
13433: LD_OWVAR 67
13437: PUSH
13438: LD_INT 1
13440: GREATER
13441: AND
13442: IFFALSE 13608
13444: GO 13446
13446: DISABLE
// begin DialogueOn ;
13447: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13451: LD_EXP 36
13455: PPUSH
13456: LD_STRING DF-1-delivery-3
13458: PPUSH
13459: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13463: LD_EXP 28
13467: PPUSH
13468: LD_STRING DH-1-delivery-3
13470: PPUSH
13471: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13475: LD_EXP 36
13479: PPUSH
13480: LD_STRING DF-2-delivery-3
13482: PPUSH
13483: CALL_OW 94
// if IsOk ( Kaia ) then
13487: LD_EXP 33
13491: PPUSH
13492: CALL_OW 302
13496: IFFALSE 13546
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13498: LD_EXP 33
13502: PPUSH
13503: LD_STRING DK-1-delivery-3
13505: PPUSH
13506: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13510: LD_EXP 28
13514: PPUSH
13515: LD_STRING DH-2-delivery-3
13517: PPUSH
13518: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13522: LD_EXP 29
13526: PPUSH
13527: LD_STRING DG-1-delivery-3
13529: PPUSH
13530: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13534: LD_EXP 30
13538: PPUSH
13539: LD_STRING DM-1-delivery-3
13541: PPUSH
13542: CALL_OW 88
// end ; DialogueOff ;
13546: CALL_OW 7
// if Difficulty = 2 then
13550: LD_OWVAR 67
13554: PUSH
13555: LD_INT 2
13557: EQUAL
13558: IFFALSE 13585
// begin ChangeMissionObjectives ( Crates3 ) ;
13560: LD_STRING Crates3
13562: PPUSH
13563: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13567: LD_ADDR_EXP 17
13571: PUSH
13572: LD_INT 63000
13574: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13575: LD_ADDR_EXP 16
13579: PUSH
13580: LD_INT 900
13582: ST_TO_ADDR
// end else
13583: GO 13608
// begin ChangeMissionObjectives ( Crates4 ) ;
13585: LD_STRING Crates4
13587: PPUSH
13588: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13592: LD_ADDR_EXP 17
13596: PUSH
13597: LD_INT 63000
13599: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13600: LD_ADDR_EXP 16
13604: PUSH
13605: LD_INT 1200
13607: ST_TO_ADDR
// end ; end ;
13608: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13609: LD_EXP 4
13613: PUSH
13614: LD_EXP 15
13618: PUSH
13619: LD_INT 600
13621: PUSH
13622: LD_INT 900
13624: PUSH
13625: LD_INT 1200
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: LD_OWVAR 67
13637: ARRAY
13638: GREATEREQUAL
13639: AND
13640: PUSH
13641: LD_EXP 16
13645: PUSH
13646: LD_EXP 17
13650: LESSEQUAL
13651: AND
13652: IFFALSE 13719
13654: GO 13656
13656: DISABLE
// begin retreatAllowed := true ;
13657: LD_ADDR_EXP 11
13661: PUSH
13662: LD_INT 1
13664: ST_TO_ADDR
// display_strings := [ ] ;
13665: LD_ADDR_OWVAR 47
13669: PUSH
13670: EMPTY
13671: ST_TO_ADDR
// DialogueOn ;
13672: CALL_OW 6
// InGameOn ;
13676: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13680: LD_EXP 37
13684: PPUSH
13685: LD_STRING DO-radio-end
13687: PPUSH
13688: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13692: LD_EXP 28
13696: PPUSH
13697: LD_STRING DH-1-radio-end
13699: PPUSH
13700: CALL_OW 88
// InGameOff ;
13704: CALL_OW 9
// DialogueOff ;
13708: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13712: LD_STRING Retreat
13714: PPUSH
13715: CALL_OW 337
// end ;
13719: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13720: LD_EXP 11
13724: IFFALSE 13855
13726: GO 13728
13728: DISABLE
13729: LD_INT 0
13731: PPUSH
13732: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13733: LD_INT 10
13735: PPUSH
13736: LD_INT 0
13738: PPUSH
13739: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13743: LD_ADDR_VAR 0 1
13747: PUSH
13748: LD_EXP 39
13752: PPUSH
13753: LD_INT 25
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 72
13767: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13768: LD_VAR 0 1
13772: PUSH
13773: LD_INT 102
13775: PPUSH
13776: LD_INT 69
13778: PPUSH
13779: CALL_OW 428
13783: PUSH
13784: LD_INT 0
13786: EQUAL
13787: AND
13788: IFFALSE 13855
// begin for i in tmp do
13790: LD_ADDR_VAR 0 2
13794: PUSH
13795: LD_VAR 0 1
13799: PUSH
13800: FOR_IN
13801: IFFALSE 13825
// if IsInUnit ( i ) then
13803: LD_VAR 0 2
13807: PPUSH
13808: CALL_OW 310
13812: IFFALSE 13823
// ComExitBuilding ( i ) ;
13814: LD_VAR 0 2
13818: PPUSH
13819: CALL_OW 122
13823: GO 13800
13825: POP
13826: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13827: LD_VAR 0 1
13831: PPUSH
13832: LD_INT 31
13834: PPUSH
13835: LD_INT 102
13837: PPUSH
13838: LD_INT 69
13840: PPUSH
13841: LD_INT 2
13843: PPUSH
13844: CALL_OW 205
// wait ( 0 0$3 ) ;
13848: LD_INT 105
13850: PPUSH
13851: CALL_OW 67
// end ; end ;
13855: PPOPN 2
13857: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13858: LD_EXP 11
13862: NOT
13863: PUSH
13864: LD_INT 5
13866: PPUSH
13867: CALL_OW 301
13871: AND
13872: IFFALSE 13904
13874: GO 13876
13876: DISABLE
// begin DialogueOn ;
13877: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13881: LD_EXP 36
13885: PPUSH
13886: LD_STRING DF-1-failure
13888: PPUSH
13889: CALL_OW 94
// DialogueOff ;
13893: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13897: LD_STRING FarmerDepot
13899: PPUSH
13900: CALL_OW 104
// end ;
13904: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13905: LD_EXP 11
13909: PUSH
13910: LD_EXP 28
13914: PPUSH
13915: LD_EXP 36
13919: PPUSH
13920: CALL_OW 296
13924: PUSH
13925: LD_INT 6
13927: LESS
13928: AND
13929: PUSH
13930: LD_INT 81
13932: PUSH
13933: LD_INT 2
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 21
13942: PUSH
13943: LD_INT 1
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 69
13958: NOT
13959: AND
13960: IFFALSE 14581
13962: GO 13964
13964: DISABLE
13965: LD_INT 0
13967: PPUSH
13968: PPUSH
13969: PPUSH
// begin allowConvoys := false ;
13970: LD_ADDR_EXP 12
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// InGameOn ;
13978: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
13982: LD_EXP 28
13986: PPUSH
13987: LD_EXP 36
13991: PPUSH
13992: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
13996: LD_EXP 36
14000: PPUSH
14001: LD_EXP 28
14005: PPUSH
14006: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14010: LD_EXP 36
14014: PPUSH
14015: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14019: LD_EXP 28
14023: PPUSH
14024: LD_STRING DH-1-end
14026: PPUSH
14027: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14031: LD_EXP 36
14035: PPUSH
14036: LD_STRING DF-1-end
14038: PPUSH
14039: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14043: LD_EXP 36
14047: PPUSH
14048: LD_STRING DF-2-end
14050: PPUSH
14051: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14055: LD_EXP 28
14059: PPUSH
14060: LD_STRING DH-2-end
14062: PPUSH
14063: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14067: LD_EXP 36
14071: PPUSH
14072: LD_STRING DF-3-end
14074: PPUSH
14075: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14079: LD_EXP 28
14083: PPUSH
14084: LD_STRING DH-3-end
14086: PPUSH
14087: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14091: LD_EXP 29
14095: PPUSH
14096: LD_STRING DG-1-end
14098: PPUSH
14099: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14103: LD_EXP 28
14107: PPUSH
14108: LD_STRING DH-4-end
14110: PPUSH
14111: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14115: LD_EXP 36
14119: PPUSH
14120: LD_STRING DF-4-end
14122: PPUSH
14123: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14127: LD_EXP 28
14131: PPUSH
14132: LD_STRING DH-5-end
14134: PPUSH
14135: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14139: LD_EXP 36
14143: PPUSH
14144: LD_STRING DF-5-end
14146: PPUSH
14147: CALL_OW 88
// InGameOff ;
14151: CALL_OW 9
// allowCargoEvacuation := true ;
14155: LD_ADDR_EXP 7
14159: PUSH
14160: LD_INT 1
14162: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14163: LD_ADDR_VAR 0 2
14167: PUSH
14168: LD_INT 4
14170: PUSH
14171: LD_INT 3
14173: PUSH
14174: LD_INT 2
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: LIST
14181: PUSH
14182: LD_OWVAR 67
14186: ARRAY
14187: ST_TO_ADDR
// if farmerSquad < max then
14188: LD_EXP 39
14192: PUSH
14193: LD_VAR 0 2
14197: LESS
14198: IFFALSE 14210
// max := farmerSquad ;
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_EXP 39
14209: ST_TO_ADDR
// for i := 1 to max do
14210: LD_ADDR_VAR 0 1
14214: PUSH
14215: DOUBLE
14216: LD_INT 1
14218: DEC
14219: ST_TO_ADDR
14220: LD_VAR 0 2
14224: PUSH
14225: FOR_TO
14226: IFFALSE 14264
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14228: LD_EXP 39
14232: PUSH
14233: LD_INT 1
14235: ARRAY
14236: PPUSH
14237: LD_INT 2
14239: PPUSH
14240: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14244: LD_ADDR_EXP 39
14248: PUSH
14249: LD_EXP 39
14253: PPUSH
14254: LD_INT 1
14256: PPUSH
14257: CALL_OW 3
14261: ST_TO_ADDR
// end ;
14262: GO 14225
14264: POP
14265: POP
// for i in Farmer ^ farmerSquad do
14266: LD_ADDR_VAR 0 1
14270: PUSH
14271: LD_EXP 36
14275: PUSH
14276: LD_EXP 39
14280: ADD
14281: PUSH
14282: FOR_IN
14283: IFFALSE 14322
// begin if IsInUnit ( i ) then
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 310
14294: IFFALSE 14305
// ComExitBuilding ( i ) ;
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14305: LD_VAR 0 1
14309: PPUSH
14310: LD_INT 102
14312: PPUSH
14313: LD_INT 7
14315: PPUSH
14316: CALL_OW 171
// end ;
14320: GO 14282
14322: POP
14323: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14324: LD_ADDR_VAR 0 1
14328: PUSH
14329: LD_INT 22
14331: PUSH
14332: LD_INT 5
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 21
14341: PUSH
14342: LD_INT 3
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PPUSH
14353: CALL_OW 69
14357: PUSH
14358: LD_INT 5
14360: DIFF
14361: PUSH
14362: FOR_IN
14363: IFFALSE 14379
// SetSide ( i , 2 ) ;
14365: LD_VAR 0 1
14369: PPUSH
14370: LD_INT 2
14372: PPUSH
14373: CALL_OW 235
14377: GO 14362
14379: POP
14380: POP
// repeat wait ( 0 0$1 ) ;
14381: LD_INT 35
14383: PPUSH
14384: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14388: LD_ADDR_VAR 0 3
14392: PUSH
14393: LD_EXP 36
14397: PUSH
14398: LD_EXP 39
14402: ADD
14403: PPUSH
14404: LD_INT 95
14406: PUSH
14407: LD_INT 3
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 72
14418: ST_TO_ADDR
// if tmp then
14419: LD_VAR 0 3
14423: IFFALSE 14467
// for i in tmp do
14425: LD_ADDR_VAR 0 1
14429: PUSH
14430: LD_VAR 0 3
14434: PUSH
14435: FOR_IN
14436: IFFALSE 14465
// begin farmerSquad := farmerSquad diff i ;
14438: LD_ADDR_EXP 39
14442: PUSH
14443: LD_EXP 39
14447: PUSH
14448: LD_VAR 0 1
14452: DIFF
14453: ST_TO_ADDR
// RemoveUnit ( i ) ;
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 64
// end ;
14463: GO 14435
14465: POP
14466: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14467: LD_EXP 39
14471: PUSH
14472: EMPTY
14473: EQUAL
14474: PUSH
14475: LD_EXP 36
14479: PPUSH
14480: CALL_OW 305
14484: NOT
14485: AND
14486: IFFALSE 14381
// if farmerHumanLoseCounter = 0 then
14488: LD_EXP 20
14492: PUSH
14493: LD_INT 0
14495: EQUAL
14496: IFFALSE 14505
// SetAchievement ( ACH_BABY ) ;
14498: LD_STRING ACH_BABY
14500: PPUSH
14501: CALL_OW 543
// wait ( 1 1$00 ) ;
14505: LD_INT 2100
14507: PPUSH
14508: CALL_OW 67
// SendAttack ;
14512: CALL 6102 0 0
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14516: LD_ADDR_VAR 0 1
14520: PUSH
14521: DOUBLE
14522: LD_INT 1
14524: DEC
14525: ST_TO_ADDR
14526: LD_INT 2
14528: PUSH
14529: LD_INT 3
14531: PUSH
14532: LD_INT 4
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: PUSH
14540: LD_OWVAR 67
14544: ARRAY
14545: PUSH
14546: FOR_TO
14547: IFFALSE 14579
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14549: LD_INT 4200
14551: PUSH
14552: LD_INT 3500
14554: PUSH
14555: LD_INT 3150
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_OWVAR 67
14567: ARRAY
14568: PPUSH
14569: CALL_OW 67
// SendAttack ;
14573: CALL 6102 0 0
// end ;
14577: GO 14546
14579: POP
14580: POP
// end ;
14581: PPOPN 3
14583: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14584: LD_EXP 7
14588: PUSH
14589: LD_EXP 21
14593: PUSH
14594: LD_INT 0
14596: GREATER
14597: AND
14598: IFFALSE 14608
14600: GO 14602
14602: DISABLE
// begin enable ;
14603: ENABLE
// CargoEvacuation ;
14604: CALL 3623 0 0
// end ;
14608: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14609: LD_EXP 17
14613: PUSH
14614: LD_INT 18900
14616: LESSEQUAL
14617: IFFALSE 14666
14619: GO 14621
14621: DISABLE
// begin DialogueOn ;
14622: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14626: LD_EXP 36
14630: PPUSH
14631: LD_STRING DF-1-distribution-a
14633: PPUSH
14634: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14638: LD_EXP 28
14642: PPUSH
14643: LD_STRING DH-1-distribution-a
14645: PPUSH
14646: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14650: LD_EXP 36
14654: PPUSH
14655: LD_STRING DF-2-distribution-a
14657: PPUSH
14658: CALL_OW 94
// DialogueOff ;
14662: CALL_OW 7
// end ;
14666: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14667: LD_EXP 17
14671: PUSH
14672: LD_INT 0
14674: LESSEQUAL
14675: IFFALSE 14707
14677: GO 14679
14679: DISABLE
// begin DialogueOn ;
14680: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14684: LD_EXP 36
14688: PPUSH
14689: LD_STRING DF-3-distribution-a
14691: PPUSH
14692: CALL_OW 94
// YouLost ( Distribution ) ;
14696: LD_STRING Distribution
14698: PPUSH
14699: CALL_OW 104
// DialogueOff ;
14703: CALL_OW 7
// end ;
14707: END
// every 0 0$1 trigger vehCounter >= 2 do
14708: LD_EXP 22
14712: PUSH
14713: LD_INT 2
14715: GREATEREQUAL
14716: IFFALSE 14728
14718: GO 14720
14720: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14721: LD_STRING VehConstructed
14723: PPUSH
14724: CALL_OW 337
14728: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14729: LD_INT 22
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 34
14741: PUSH
14742: LD_INT 12
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 69
14757: IFFALSE 14817
14759: GO 14761
14761: DISABLE
// begin DialogueOn ;
14762: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14766: LD_EXP 28
14770: PPUSH
14771: LD_STRING DH-1-truck
14773: PPUSH
14774: CALL_OW 88
// if IsOk ( Markov ) then
14778: LD_EXP 35
14782: PPUSH
14783: CALL_OW 302
14787: IFFALSE 14813
// begin Say ( Markov , DMar-1-truck ) ;
14789: LD_EXP 35
14793: PPUSH
14794: LD_STRING DMar-1-truck
14796: PPUSH
14797: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14801: LD_EXP 28
14805: PPUSH
14806: LD_STRING DH-2-truck
14808: PPUSH
14809: CALL_OW 88
// end ; DialogueOff ;
14813: CALL_OW 7
// end ;
14817: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14818: LD_INT 0
14820: PPUSH
14821: PPUSH
14822: PPUSH
// if IsOk ( Givi ) then
14823: LD_EXP 29
14827: PPUSH
14828: CALL_OW 302
14832: IFFALSE 14848
// begin Say ( Givi , DG-1-nocargo ) ;
14834: LD_EXP 29
14838: PPUSH
14839: LD_STRING DG-1-nocargo
14841: PPUSH
14842: CALL_OW 88
// exit ;
14846: GO 14944
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14848: LD_ADDR_VAR 0 2
14852: PUSH
14853: LD_EXP 42
14857: PPUSH
14858: LD_INT 26
14860: PUSH
14861: LD_INT 1
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PPUSH
14868: CALL_OW 72
14872: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_EXP 42
14882: PPUSH
14883: LD_INT 26
14885: PUSH
14886: LD_INT 2
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 72
14897: ST_TO_ADDR
// if randomMen then
14898: LD_VAR 0 2
14902: IFFALSE 14922
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14904: LD_VAR 0 2
14908: PUSH
14909: LD_INT 1
14911: ARRAY
14912: PPUSH
14913: LD_STRING DArm-1-nocargo
14915: PPUSH
14916: CALL_OW 88
14920: GO 14944
// if randomWomen then
14922: LD_VAR 0 3
14926: IFFALSE 14944
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14928: LD_VAR 0 3
14932: PUSH
14933: LD_INT 1
14935: ARRAY
14936: PPUSH
14937: LD_STRING DArf-1-nocargo
14939: PPUSH
14940: CALL_OW 88
// end ;
14944: LD_VAR 0 1
14948: RET
// export function IncomingAttack ; begin
14949: LD_INT 0
14951: PPUSH
// if attackWave = 1 then
14952: LD_EXP 19
14956: PUSH
14957: LD_INT 1
14959: EQUAL
14960: IFFALSE 15031
// begin DialogueOn ;
14962: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14966: LD_EXP 37
14970: PPUSH
14971: LD_STRING DO-1-radio-1
14973: PPUSH
14974: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
14978: LD_EXP 28
14982: PPUSH
14983: LD_STRING DH-1-radio-1-
14985: PPUSH
14986: CALL_OW 88
// if IsOk ( Markov ) then
14990: LD_EXP 35
14994: PPUSH
14995: CALL_OW 302
14999: IFFALSE 15025
// begin Say ( Markov , DMar-1-radio-1 ) ;
15001: LD_EXP 35
15005: PPUSH
15006: LD_STRING DMar-1-radio-1
15008: PPUSH
15009: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15013: LD_EXP 28
15017: PPUSH
15018: LD_STRING DH-2-radio-1
15020: PPUSH
15021: CALL_OW 88
// end ; DialogueOff ;
15025: CALL_OW 7
// end else
15029: GO 15055
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15031: LD_EXP 37
15035: PPUSH
15036: LD_STRING DO-1-radio-u
15038: PPUSH
15039: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15043: LD_EXP 28
15047: PPUSH
15048: LD_STRING DH-1-radio-u
15050: PPUSH
15051: CALL_OW 88
// end ; end ;
15055: LD_VAR 0 1
15059: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15060: LD_EXP 44
15064: PPUSH
15065: LD_INT 95
15067: PUSH
15068: LD_INT 8
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PPUSH
15075: CALL_OW 72
15079: IFFALSE 15182
15081: GO 15083
15083: DISABLE
15084: LD_INT 0
15086: PPUSH
// begin enable ;
15087: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15088: LD_ADDR_VAR 0 1
15092: PUSH
15093: LD_EXP 44
15097: PPUSH
15098: LD_INT 95
15100: PUSH
15101: LD_INT 8
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PPUSH
15108: CALL_OW 72
15112: PUSH
15113: FOR_IN
15114: IFFALSE 15143
// begin usForces := usForces diff i ;
15116: LD_ADDR_EXP 44
15120: PUSH
15121: LD_EXP 44
15125: PUSH
15126: LD_VAR 0 1
15130: DIFF
15131: ST_TO_ADDR
// RemoveUnit ( i ) ;
15132: LD_VAR 0 1
15136: PPUSH
15137: CALL_OW 64
// end ;
15141: GO 15113
15143: POP
15144: POP
// if not americanHasEscaped and attackWave = 1 then
15145: LD_EXP 8
15149: NOT
15150: PUSH
15151: LD_EXP 19
15155: PUSH
15156: LD_INT 1
15158: EQUAL
15159: AND
15160: IFFALSE 15182
// begin americanHasEscaped := true ;
15162: LD_ADDR_EXP 8
15166: PUSH
15167: LD_INT 1
15169: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15170: LD_EXP 28
15174: PPUSH
15175: LD_STRING DH-2-assault-a
15177: PPUSH
15178: CALL_OW 88
// end ; end ;
15182: PPOPN 1
15184: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15185: LD_INT 4
15187: PPUSH
15188: LD_INT 22
15190: PUSH
15191: LD_INT 1
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 70
15202: PUSH
15203: LD_EXP 11
15207: NOT
15208: AND
15209: IFFALSE 15226
15211: GO 15213
15213: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15214: LD_EXP 36
15218: PPUSH
15219: LD_STRING DF-1-attack
15221: PPUSH
15222: CALL_OW 94
15226: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15227: LD_INT 5
15229: PPUSH
15230: CALL_OW 255
15234: PUSH
15235: LD_INT 2
15237: EQUAL
15238: IFFALSE 15250
15240: GO 15242
15242: DISABLE
// YouLost ( Attack ) ;
15243: LD_STRING Attack
15245: PPUSH
15246: CALL_OW 104
15250: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15251: LD_INT 22
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 21
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PPUSH
15275: CALL_OW 69
15279: NOT
15280: PUSH
15281: LD_INT 22
15283: PUSH
15284: LD_INT 4
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: NOT
15296: AND
15297: PUSH
15298: LD_EXP 11
15302: NOT
15303: AND
15304: PUSH
15305: LD_EXP 15
15309: PUSH
15310: LD_INT 90
15312: GREATER
15313: AND
15314: PUSH
15315: LD_INT 7
15317: PPUSH
15318: LD_INT 22
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 21
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 70
15346: AND
15347: PUSH
15348: LD_INT 22
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 50
15360: PUSH
15361: EMPTY
15362: LIST
15363: PUSH
15364: LD_INT 30
15366: PUSH
15367: LD_INT 0
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 69
15383: AND
15384: IFFALSE 16177
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
15395: PPUSH
// begin depot := usDepot ;
15396: LD_ADDR_VAR 0 5
15400: PUSH
15401: LD_INT 11
15403: ST_TO_ADDR
// if not depot then
15404: LD_VAR 0 5
15408: NOT
15409: IFFALSE 15449
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15411: LD_ADDR_VAR 0 5
15415: PUSH
15416: LD_INT 22
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 30
15428: PUSH
15429: LD_INT 0
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PPUSH
15440: CALL_OW 69
15444: PUSH
15445: LD_INT 1
15447: ARRAY
15448: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15449: LD_ADDR_VAR 0 1
15453: PUSH
15454: LD_EXP 42
15458: PPUSH
15459: LD_INT 26
15461: PUSH
15462: LD_INT 1
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 72
15473: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15474: LD_ADDR_VAR 0 2
15478: PUSH
15479: LD_EXP 42
15483: PPUSH
15484: LD_INT 26
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 72
15498: ST_TO_ADDR
// if IsOk ( Kaia ) then
15499: LD_EXP 33
15503: PPUSH
15504: CALL_OW 302
15508: IFFALSE 15529
// speaker := [ Kaia , DK ] else
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_EXP 33
15519: PUSH
15520: LD_STRING DK
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: ST_TO_ADDR
15527: GO 15609
// if randomMen then
15529: LD_VAR 0 1
15533: IFFALSE 15568
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_VAR 0 1
15544: PUSH
15545: LD_INT 1
15547: PPUSH
15548: LD_VAR 0 1
15552: PPUSH
15553: CALL_OW 12
15557: ARRAY
15558: PUSH
15559: LD_STRING DArm
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: ST_TO_ADDR
15566: GO 15609
// if randomWomen then
15568: LD_VAR 0 2
15572: IFFALSE 15607
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15574: LD_ADDR_VAR 0 3
15578: PUSH
15579: LD_VAR 0 2
15583: PUSH
15584: LD_INT 1
15586: PPUSH
15587: LD_VAR 0 2
15591: PPUSH
15592: CALL_OW 12
15596: ARRAY
15597: PUSH
15598: LD_STRING DArf
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: ST_TO_ADDR
15605: GO 15609
// exit ;
15607: GO 16177
// if IsInUnit ( speaker [ 1 ] ) then
15609: LD_VAR 0 3
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: CALL_OW 310
15622: IFFALSE 15645
// place := IsInUnit ( speaker [ 1 ] ) else
15624: LD_ADDR_VAR 0 4
15628: PUSH
15629: LD_VAR 0 3
15633: PUSH
15634: LD_INT 1
15636: ARRAY
15637: PPUSH
15638: CALL_OW 310
15642: ST_TO_ADDR
15643: GO 15659
// place := speaker [ 1 ] ;
15645: LD_ADDR_VAR 0 4
15649: PUSH
15650: LD_VAR 0 3
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15659: LD_VAR 0 4
15663: PPUSH
15664: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15668: LD_VAR 0 4
15672: PPUSH
15673: CALL_OW 250
15677: PPUSH
15678: LD_VAR 0 4
15682: PPUSH
15683: CALL_OW 251
15687: PPUSH
15688: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15692: LD_INT 70
15694: PPUSH
15695: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15699: LD_EXP 38
15703: PPUSH
15704: CALL_OW 305
15708: NOT
15709: IFFALSE 15713
// exit ;
15711: GO 16177
// allowConvoys := false ;
15713: LD_ADDR_EXP 12
15717: PUSH
15718: LD_INT 0
15720: ST_TO_ADDR
// InGameOn ;
15721: CALL_OW 8
// wait ( 0 0$1 ) ;
15725: LD_INT 35
15727: PPUSH
15728: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15732: LD_EXP 38
15736: PPUSH
15737: LD_STRING DI-1-land
15739: PPUSH
15740: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15744: LD_VAR 0 3
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 310
15757: IFFALSE 15772
// ComExit ( speaker [ 1 ] ) ;
15759: LD_VAR 0 3
15763: PUSH
15764: LD_INT 1
15766: ARRAY
15767: PPUSH
15768: CALL 73093 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15772: LD_VAR 0 3
15776: PUSH
15777: LD_INT 1
15779: ARRAY
15780: PPUSH
15781: LD_EXP 38
15785: PPUSH
15786: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15790: LD_VAR 0 3
15794: PUSH
15795: LD_INT 1
15797: ARRAY
15798: PPUSH
15799: LD_EXP 38
15803: PPUSH
15804: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15808: LD_EXP 38
15812: PPUSH
15813: LD_VAR 0 3
15817: PUSH
15818: LD_INT 1
15820: ARRAY
15821: PPUSH
15822: CALL_OW 119
// wait ( 0 0$1 ) ;
15826: LD_INT 35
15828: PPUSH
15829: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15833: LD_VAR 0 3
15837: PUSH
15838: LD_INT 1
15840: ARRAY
15841: PPUSH
15842: LD_VAR 0 3
15846: PUSH
15847: LD_INT 2
15849: ARRAY
15850: PUSH
15851: LD_STRING -1-land
15853: STR
15854: PPUSH
15855: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15859: LD_EXP 38
15863: PPUSH
15864: LD_STRING DI-2-land
15866: PPUSH
15867: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: PPUSH
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 2
15887: ARRAY
15888: PUSH
15889: LD_STRING -2-land
15891: STR
15892: PPUSH
15893: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15897: LD_VAR 0 3
15901: PUSH
15902: LD_INT 1
15904: ARRAY
15905: PPUSH
15906: LD_VAR 0 3
15910: PUSH
15911: LD_INT 2
15913: ARRAY
15914: PUSH
15915: LD_STRING -3-land
15917: STR
15918: PPUSH
15919: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15923: LD_EXP 28
15927: PPUSH
15928: LD_STRING DH-1-land
15930: PPUSH
15931: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
15935: LD_VAR 0 5
15939: PPUSH
15940: CALL_OW 313
15944: PUSH
15945: LD_INT 6
15947: EQUAL
15948: IFFALSE 15968
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
15950: LD_VAR 0 5
15954: PPUSH
15955: CALL_OW 313
15959: PUSH
15960: LD_INT 1
15962: ARRAY
15963: PPUSH
15964: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15968: LD_EXP 38
15972: PPUSH
15973: LD_INT 2
15975: PPUSH
15976: CALL_OW 235
// CenterOnUnits ( depot ) ;
15980: LD_VAR 0 5
15984: PPUSH
15985: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
15989: LD_EXP 38
15993: PPUSH
15994: LD_VAR 0 5
15998: PPUSH
15999: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16003: LD_VAR 0 3
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: PPUSH
16012: LD_VAR 0 5
16016: PPUSH
16017: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16021: LD_INT 35
16023: PPUSH
16024: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16028: LD_EXP 38
16032: PPUSH
16033: CALL_OW 310
16037: PUSH
16038: LD_EXP 38
16042: PPUSH
16043: CALL_OW 302
16047: NOT
16048: OR
16049: PUSH
16050: LD_VAR 0 5
16054: PPUSH
16055: CALL_OW 302
16059: NOT
16060: OR
16061: IFFALSE 16021
// InGameOff ;
16063: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16067: LD_EXP 38
16071: PPUSH
16072: CALL_OW 302
16076: NOT
16077: IFFALSE 16081
// exit ;
16079: GO 16177
// if not IsOk ( depot ) then
16081: LD_VAR 0 5
16085: PPUSH
16086: CALL_OW 302
16090: NOT
16091: IFFALSE 16154
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16093: LD_EXP 38
16097: PPUSH
16098: LD_INT 30
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16108: LD_INT 35
16110: PPUSH
16111: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16115: LD_EXP 38
16119: PPUSH
16120: LD_INT 30
16122: PPUSH
16123: LD_INT 1
16125: PPUSH
16126: CALL_OW 307
16130: PUSH
16131: LD_EXP 38
16135: PPUSH
16136: CALL_OW 301
16140: OR
16141: IFFALSE 16108
// RemoveUnit ( Ibrahim ) ;
16143: LD_EXP 38
16147: PPUSH
16148: CALL_OW 64
// exit ;
16152: GO 16177
// end ; ibrahimInDepot := true ;
16154: LD_ADDR_EXP 25
16158: PUSH
16159: LD_INT 1
16161: ST_TO_ADDR
// allowConvoys := true ;
16162: LD_ADDR_EXP 12
16166: PUSH
16167: LD_INT 1
16169: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16170: LD_STRING IbrahimInDepot
16172: PPUSH
16173: CALL_OW 97
// end ;
16177: PPOPN 5
16179: END
// export function IbrahimQuery ; begin
16180: LD_INT 0
16182: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16183: LD_STRING IbrahimQuery
16185: PPUSH
16186: CALL_OW 97
16190: PUSH
16191: LD_INT 1
16193: DOUBLE
16194: EQUAL
16195: IFTRUE 16199
16197: GO 16475
16199: POP
// begin allowConvoys := false ;
16200: LD_ADDR_EXP 12
16204: PUSH
16205: LD_INT 0
16207: ST_TO_ADDR
// ibrahimInDepot := false ;
16208: LD_ADDR_EXP 25
16212: PUSH
16213: LD_INT 0
16215: ST_TO_ADDR
// InGameOn ;
16216: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16220: LD_EXP 28
16224: PPUSH
16225: CALL_OW 87
// wait ( 0 0$1 ) ;
16229: LD_INT 35
16231: PPUSH
16232: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16236: LD_EXP 28
16240: PPUSH
16241: LD_STRING DH-1-interrogation
16243: PPUSH
16244: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16248: LD_EXP 38
16252: PPUSH
16253: LD_STRING DI-1-interrogation
16255: PPUSH
16256: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16260: LD_EXP 28
16264: PPUSH
16265: LD_STRING DH-2-interrogation
16267: PPUSH
16268: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16272: LD_EXP 38
16276: PPUSH
16277: LD_STRING DI-2-interrogation
16279: PPUSH
16280: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16284: LD_EXP 28
16288: PPUSH
16289: LD_STRING DH-3-interrogation
16291: PPUSH
16292: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16296: LD_EXP 38
16300: PPUSH
16301: LD_STRING DI-3-interrogation
16303: PPUSH
16304: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16308: LD_EXP 28
16312: PPUSH
16313: LD_STRING DH-4-interrogation
16315: PPUSH
16316: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16320: LD_EXP 38
16324: PPUSH
16325: LD_STRING DI-4-interrogation
16327: PPUSH
16328: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16332: LD_EXP 28
16336: PPUSH
16337: LD_STRING DH-5-interrogation
16339: PPUSH
16340: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16344: LD_EXP 38
16348: PPUSH
16349: LD_STRING DI-5-interrogation
16351: PPUSH
16352: CALL_OW 88
// wait ( 0 0$1 ) ;
16356: LD_INT 35
16358: PPUSH
16359: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16363: LD_STRING IbrahimDecisionQuery
16365: PPUSH
16366: CALL_OW 97
16370: PUSH
16371: LD_INT 1
16373: DOUBLE
16374: EQUAL
16375: IFTRUE 16379
16377: GO 16403
16379: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16380: LD_EXP 38
16384: PPUSH
16385: LD_STRING DI-1-kill
16387: PPUSH
16388: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16392: LD_EXP 38
16396: PPUSH
16397: CALL_OW 66
// end ; 2 :
16401: GO 16469
16403: LD_INT 2
16405: DOUBLE
16406: EQUAL
16407: IFTRUE 16411
16409: GO 16468
16411: POP
// begin SetSide ( Ibrahim , 6 ) ;
16412: LD_EXP 38
16416: PPUSH
16417: LD_INT 6
16419: PPUSH
16420: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16424: LD_EXP 38
16428: PPUSH
16429: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16433: LD_EXP 38
16437: PPUSH
16438: LD_INT 66
16440: PPUSH
16441: LD_INT 2
16443: PPUSH
16444: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16448: LD_EXP 38
16452: PPUSH
16453: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16457: LD_EXP 28
16461: PPUSH
16462: CALL_OW 122
// end ; end ;
16466: GO 16469
16468: POP
// InGameOff ;
16469: CALL_OW 9
// end ; 2 :
16473: GO 16489
16475: LD_INT 2
16477: DOUBLE
16478: EQUAL
16479: IFTRUE 16483
16481: GO 16488
16483: POP
// exit ; end ;
16484: GO 16527
16486: GO 16489
16488: POP
// allowConvoys := true ;
16489: LD_ADDR_EXP 12
16493: PUSH
16494: LD_INT 1
16496: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16497: LD_INT 5250
16499: PPUSH
16500: CALL_OW 67
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16504: LD_EXP 38
16508: PPUSH
16509: LD_INT 38
16511: PPUSH
16512: LD_INT 28
16514: PPUSH
16515: CALL_OW 111
// ibrahimIsFree := true ;
16519: LD_ADDR_EXP 26
16523: PUSH
16524: LD_INT 1
16526: ST_TO_ADDR
// end ;
16527: LD_VAR 0 1
16531: RET
// every 0 0$1 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot , x , y ;
16532: LD_EXP 26
16536: PUSH
16537: LD_EXP 38
16541: PPUSH
16542: CALL_OW 302
16546: AND
16547: PUSH
16548: LD_INT 6
16550: PPUSH
16551: LD_EXP 28
16555: PPUSH
16556: CALL_OW 292
16560: AND
16561: PUSH
16562: LD_INT 22
16564: PUSH
16565: LD_INT 4
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 69
16576: NOT
16577: AND
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 21
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 69
16607: NOT
16608: AND
16609: IFFALSE 17369
16611: GO 16613
16613: DISABLE
16614: LD_INT 0
16616: PPUSH
16617: PPUSH
16618: PPUSH
16619: PPUSH
16620: PPUSH
16621: PPUSH
// begin allowConvoys := false ;
16622: LD_ADDR_EXP 12
16626: PUSH
16627: LD_INT 0
16629: ST_TO_ADDR
// depot := usDepot ;
16630: LD_ADDR_VAR 0 4
16634: PUSH
16635: LD_INT 11
16637: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16638: LD_INT 11
16640: NOT
16641: PUSH
16642: LD_INT 22
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 50
16654: PUSH
16655: EMPTY
16656: LIST
16657: PUSH
16658: LD_INT 30
16660: PUSH
16661: LD_INT 0
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: PPUSH
16673: CALL_OW 69
16677: AND
16678: IFFALSE 16725
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16680: LD_ADDR_VAR 0 4
16684: PUSH
16685: LD_INT 22
16687: PUSH
16688: LD_INT 2
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 50
16697: PUSH
16698: EMPTY
16699: LIST
16700: PUSH
16701: LD_INT 30
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: PPUSH
16716: CALL_OW 69
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: ST_TO_ADDR
// InGameOn ;
16725: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16729: LD_EXP 38
16733: PPUSH
16734: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16738: LD_EXP 28
16742: PPUSH
16743: LD_EXP 38
16747: PPUSH
16748: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16752: LD_EXP 38
16756: PPUSH
16757: LD_EXP 28
16761: PPUSH
16762: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16766: LD_EXP 38
16770: PPUSH
16771: LD_STRING DI-1-free
16773: PPUSH
16774: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16778: LD_EXP 28
16782: PPUSH
16783: LD_STRING DH-1-free
16785: PPUSH
16786: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16790: LD_EXP 38
16794: PPUSH
16795: LD_STRING DI-2-free
16797: PPUSH
16798: CALL_OW 88
// changeClass := 0 ;
16802: LD_ADDR_VAR 0 1
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16810: LD_STRING IbrahimJoinQuery
16812: PPUSH
16813: CALL_OW 97
16817: PUSH
16818: LD_INT 1
16820: DOUBLE
16821: EQUAL
16822: IFTRUE 16826
16824: GO 16837
16826: POP
// begin changeClass := 1 ;
16827: LD_ADDR_VAR 0 1
16831: PUSH
16832: LD_INT 1
16834: ST_TO_ADDR
// end ; 2 :
16835: GO 17077
16837: LD_INT 2
16839: DOUBLE
16840: EQUAL
16841: IFTRUE 16845
16843: GO 16997
16845: POP
// begin Say ( Heike , DH-1-decline ) ;
16846: LD_EXP 28
16850: PPUSH
16851: LD_STRING DH-1-decline
16853: PPUSH
16854: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16858: LD_EXP 38
16862: PPUSH
16863: LD_STRING DI-1-decline
16865: PPUSH
16866: CALL_OW 88
// InGameOff ;
16870: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16874: LD_EXP 38
16878: PPUSH
16879: LD_INT 30
16881: PPUSH
16882: LD_INT 1
16884: PPUSH
16885: CALL_OW 111
// p := 0 ;
16889: LD_ADDR_VAR 0 3
16893: PUSH
16894: LD_INT 0
16896: ST_TO_ADDR
// repeat p := p + 1 ;
16897: LD_ADDR_VAR 0 3
16901: PUSH
16902: LD_VAR 0 3
16906: PUSH
16907: LD_INT 1
16909: PLUS
16910: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16911: LD_INT 35
16913: PPUSH
16914: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
16918: LD_EXP 38
16922: PPUSH
16923: LD_INT 30
16925: PPUSH
16926: LD_INT 1
16928: PPUSH
16929: CALL_OW 307
16933: PUSH
16934: LD_INT 22
16936: PUSH
16937: LD_INT 2
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 101
16946: PUSH
16947: LD_INT 6
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 69
16962: NOT
16963: OR
16964: PUSH
16965: LD_VAR 0 3
16969: PUSH
16970: LD_INT 10
16972: GREATER
16973: OR
16974: IFFALSE 16897
// RemoveUnit ( Ibrahim ) ;
16976: LD_EXP 38
16980: PPUSH
16981: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
16985: LD_INT 1
16987: PPUSH
16988: LD_STRING 03_IbrahimHasEscaped
16990: PPUSH
16991: CALL_OW 39
// end ; 3 :
16995: GO 17077
16997: LD_INT 3
16999: DOUBLE
17000: EQUAL
17001: IFTRUE 17005
17003: GO 17076
17005: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17006: LD_EXP 28
17010: PPUSH
17011: LD_STRING DH-1-radio-hq
17013: PPUSH
17014: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17018: LD_EXP 37
17022: PPUSH
17023: LD_STRING DO-1-radio-hq
17025: PPUSH
17026: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17030: LD_EXP 28
17034: PPUSH
17035: LD_STRING DH-2-radio-hq
17037: PPUSH
17038: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17042: LD_EXP 37
17046: PPUSH
17047: LD_STRING DO-2-radio-hq
17049: PPUSH
17050: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17054: LD_EXP 28
17058: PPUSH
17059: LD_STRING DH-3-radio-hq
17061: PPUSH
17062: CALL_OW 88
// changeClass := 1 ;
17066: LD_ADDR_VAR 0 1
17070: PUSH
17071: LD_INT 1
17073: ST_TO_ADDR
// end ; end ;
17074: GO 17077
17076: POP
// if changeClass then
17077: LD_VAR 0 1
17081: IFFALSE 17369
// begin Say ( Heike , DH-1-agree ) ;
17083: LD_EXP 28
17087: PPUSH
17088: LD_STRING DH-1-agree
17090: PPUSH
17091: CALL_OW 88
// if IsOk ( Givi ) then
17095: LD_EXP 29
17099: PPUSH
17100: CALL_OW 302
17104: IFFALSE 17142
// begin Say ( Givi , DG-1-agree ) ;
17106: LD_EXP 29
17110: PPUSH
17111: LD_STRING DG-1-agree
17113: PPUSH
17114: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17118: LD_EXP 28
17122: PPUSH
17123: LD_STRING DH-2-agree
17125: PPUSH
17126: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17130: LD_EXP 29
17134: PPUSH
17135: LD_STRING DG-2-agree
17137: PPUSH
17138: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17142: LD_VAR 0 4
17146: PPUSH
17147: CALL_OW 313
17151: PUSH
17152: LD_INT 6
17154: EQUAL
17155: IFFALSE 17175
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17157: LD_VAR 0 4
17161: PPUSH
17162: CALL_OW 313
17166: PUSH
17167: LD_INT 1
17169: ARRAY
17170: PPUSH
17171: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17175: LD_EXP 38
17179: PPUSH
17180: LD_INT 2
17182: PPUSH
17183: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17187: LD_ADDR_VAR 0 5
17191: PUSH
17192: LD_EXP 38
17196: PPUSH
17197: CALL_OW 250
17201: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17202: LD_ADDR_VAR 0 6
17206: PUSH
17207: LD_EXP 38
17211: PPUSH
17212: CALL_OW 251
17216: ST_TO_ADDR
// if depot then
17217: LD_VAR 0 4
17221: IFFALSE 17270
// begin ComEnterUnit ( Ibrahim , depot ) ;
17223: LD_EXP 38
17227: PPUSH
17228: LD_VAR 0 4
17232: PPUSH
17233: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17237: LD_INT 35
17239: PPUSH
17240: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17244: LD_EXP 38
17248: PPUSH
17249: CALL_OW 310
17253: IFFALSE 17237
// b := IsInUnit ( Ibrahim ) ;
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_EXP 38
17264: PPUSH
17265: CALL_OW 310
17269: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17270: LD_EXP 38
17274: PPUSH
17275: CALL_OW 64
// uc_side := 2 ;
17279: LD_ADDR_OWVAR 20
17283: PUSH
17284: LD_INT 2
17286: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17287: LD_ADDR_EXP 38
17291: PUSH
17292: LD_STRING Ibrahim
17294: PPUSH
17295: LD_INT 0
17297: PPUSH
17298: LD_STRING 
17300: PPUSH
17301: CALL 36396 0 3
17305: ST_TO_ADDR
// if depot then
17306: LD_VAR 0 4
17310: IFFALSE 17328
// PlaceHumanInUnit ( Ibrahim , b ) else
17312: LD_EXP 38
17316: PPUSH
17317: LD_VAR 0 2
17321: PPUSH
17322: CALL_OW 52
17326: GO 17350
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17328: LD_EXP 38
17332: PPUSH
17333: LD_VAR 0 5
17337: PPUSH
17338: LD_VAR 0 6
17342: PPUSH
17343: LD_INT 0
17345: PPUSH
17346: CALL_OW 48
// InGameOff ;
17350: CALL_OW 9
// allowConvoys := true ;
17354: LD_ADDR_EXP 12
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17362: LD_STRING ACH_IBRAHIM
17364: PPUSH
17365: CALL_OW 543
// end ; end ;
17369: PPOPN 6
17371: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17372: LD_EXP 33
17376: PPUSH
17377: CALL_OW 256
17381: PUSH
17382: LD_INT 3
17384: LESS
17385: IFFALSE 17452
17387: GO 17389
17389: DISABLE
// begin DialogueOn ;
17390: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17394: LD_EXP 33
17398: PPUSH
17399: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17403: LD_EXP 33
17407: PPUSH
17408: LD_STRING DK-keydeath-1
17410: PPUSH
17411: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17415: LD_EXP 28
17419: PPUSH
17420: LD_STRING DH-keydeath-2
17422: PPUSH
17423: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17427: LD_EXP 28
17431: PPUSH
17432: LD_STRING DH-keydeath-3
17434: PPUSH
17435: CALL_OW 88
// DialogueOff ;
17439: CALL_OW 7
// KillUnit ( Kaia ) ;
17443: LD_EXP 33
17447: PPUSH
17448: CALL_OW 66
// end ;
17452: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17453: LD_EXP 11
17457: PUSH
17458: LD_EXP 21
17462: PUSH
17463: LD_INT 1
17465: LESS
17466: AND
17467: IFFALSE 17909
17469: GO 17471
17471: DISABLE
// begin ChangeSideFog ( 1 , 2 ) ;
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 2
17477: PPUSH
17478: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
17482: LD_INT 35
17484: PPUSH
17485: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ;
17489: LD_INT 22
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 25
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 69
17517: PUSH
17518: LD_INT 0
17520: EQUAL
17521: IFFALSE 17482
// DialogueOn ;
17523: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17527: LD_EXP 28
17531: PPUSH
17532: LD_STRING DH-1-final
17534: PPUSH
17535: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17539: LD_OWVAR 1
17543: PUSH
17544: LD_INT 126000
17546: PUSH
17547: LD_INT 115500
17549: PUSH
17550: LD_INT 105000
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: PUSH
17558: LD_OWVAR 67
17562: ARRAY
17563: LESSEQUAL
17564: IFFALSE 17578
// AddMedal ( med1 , 1 ) else
17566: LD_STRING med1
17568: PPUSH
17569: LD_INT 1
17571: PPUSH
17572: CALL_OW 101
17576: GO 17589
// AddMedal ( med1 , - 1 ) ;
17578: LD_STRING med1
17580: PPUSH
17581: LD_INT 1
17583: NEG
17584: PPUSH
17585: CALL_OW 101
// if vehCounter >= 2 then
17589: LD_EXP 22
17593: PUSH
17594: LD_INT 2
17596: GREATEREQUAL
17597: IFFALSE 17611
// AddMedal ( med2 , 1 ) else
17599: LD_STRING med2
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: CALL_OW 101
17609: GO 17622
// AddMedal ( med2 , - 1 ) ;
17611: LD_STRING med2
17613: PPUSH
17614: LD_INT 1
17616: NEG
17617: PPUSH
17618: CALL_OW 101
// if deadCounter = 0 then
17622: LD_EXP 9
17626: PUSH
17627: LD_INT 0
17629: EQUAL
17630: IFFALSE 17644
// AddMedal ( med3 , 1 ) else
17632: LD_STRING med3
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: CALL_OW 101
17642: GO 17655
// AddMedal ( med3 , - 1 ) ;
17644: LD_STRING med3
17646: PPUSH
17647: LD_INT 1
17649: NEG
17650: PPUSH
17651: CALL_OW 101
// GiveMedals ( MAIN ) ;
17655: LD_STRING MAIN
17657: PPUSH
17658: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17662: LD_INT 22
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 23
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 21
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: LIST
17696: PPUSH
17697: CALL_OW 69
17701: PPUSH
17702: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17706: LD_EXP 28
17710: PPUSH
17711: LD_STRING 03_Heike
17713: PPUSH
17714: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17718: LD_EXP 32
17722: PPUSH
17723: LD_STRING 03_Aviradze
17725: PPUSH
17726: CALL_OW 38
// if Givi then
17730: LD_EXP 29
17734: IFFALSE 17748
// SaveCharacters ( Givi , 03_Givi ) ;
17736: LD_EXP 29
17740: PPUSH
17741: LD_STRING 03_Givi
17743: PPUSH
17744: CALL_OW 38
// if Mike then
17748: LD_EXP 30
17752: IFFALSE 17766
// SaveCharacters ( Mike , 03_Mike ) ;
17754: LD_EXP 30
17758: PPUSH
17759: LD_STRING 03_Mike
17761: PPUSH
17762: CALL_OW 38
// if Kamil then
17766: LD_EXP 31
17770: IFFALSE 17784
// SaveCharacters ( Kamil , 03_Kamil ) ;
17772: LD_EXP 31
17776: PPUSH
17777: LD_STRING 03_Kamil
17779: PPUSH
17780: CALL_OW 38
// if Kaia then
17784: LD_EXP 33
17788: IFFALSE 17802
// SaveCharacters ( Kaia , 03_Kaia ) ;
17790: LD_EXP 33
17794: PPUSH
17795: LD_STRING 03_Kaia
17797: PPUSH
17798: CALL_OW 38
// if Sophia then
17802: LD_EXP 34
17806: IFFALSE 17820
// SaveCharacters ( Sophia , 03_Sophia ) ;
17808: LD_EXP 34
17812: PPUSH
17813: LD_STRING 03_Sophia
17815: PPUSH
17816: CALL_OW 38
// if Markov then
17820: LD_EXP 35
17824: IFFALSE 17838
// SaveCharacters ( Markov , 03_Markov ) ;
17826: LD_EXP 35
17830: PPUSH
17831: LD_STRING 03_Markov
17833: PPUSH
17834: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17838: LD_EXP 38
17842: PUSH
17843: LD_EXP 38
17847: PPUSH
17848: CALL_OW 255
17852: PUSH
17853: LD_INT 2
17855: EQUAL
17856: AND
17857: IFFALSE 17871
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17859: LD_EXP 38
17863: PPUSH
17864: LD_STRING 03_Ibrahim
17866: PPUSH
17867: CALL_OW 38
// if heikeSecondSquad then
17871: LD_EXP 42
17875: IFFALSE 17889
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17877: LD_EXP 42
17881: PPUSH
17882: LD_STRING 03_others
17884: PPUSH
17885: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17889: LD_EXP 9
17893: PPUSH
17894: LD_STRING 03_DeadCounter
17896: PPUSH
17897: CALL_OW 39
// YouWin ;
17901: CALL_OW 103
// DialogueOff ;
17905: CALL_OW 7
// end ; end_of_file
17909: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17910: LD_VAR 0 1
17914: PUSH
17915: LD_EXP 28
17919: EQUAL
17920: IFFALSE 17929
// YouLost ( Heike ) ;
17922: LD_STRING Heike
17924: PPUSH
17925: CALL_OW 104
// if un = Aviradze then
17929: LD_VAR 0 1
17933: PUSH
17934: LD_EXP 32
17938: EQUAL
17939: IFFALSE 17948
// YouLost ( Aviradze ) ;
17941: LD_STRING Aviradze
17943: PPUSH
17944: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17948: LD_VAR 0 1
17952: PUSH
17953: LD_INT 11
17955: EQUAL
17956: PUSH
17957: LD_EXP 11
17961: NOT
17962: AND
17963: IFFALSE 17972
// YouLost ( Depot ) ;
17965: LD_STRING Depot
17967: PPUSH
17968: CALL_OW 104
// if un = arDepot then
17972: LD_VAR 0 1
17976: PUSH
17977: LD_INT 5
17979: EQUAL
17980: IFFALSE 17989
// YouLost ( FarmerDepot ) ;
17982: LD_STRING FarmerDepot
17984: PPUSH
17985: CALL_OW 104
// if un = Farmer then
17989: LD_VAR 0 1
17993: PUSH
17994: LD_EXP 36
17998: EQUAL
17999: IFFALSE 18008
// YouLost ( Farmer ) ;
18001: LD_STRING Farmer
18003: PPUSH
18004: CALL_OW 104
// if un in usForces then
18008: LD_VAR 0 1
18012: PUSH
18013: LD_EXP 44
18017: IN
18018: IFFALSE 18036
// usForces := usForces diff un ;
18020: LD_ADDR_EXP 44
18024: PUSH
18025: LD_EXP 44
18029: PUSH
18030: LD_VAR 0 1
18034: DIFF
18035: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18036: LD_VAR 0 1
18040: PUSH
18041: LD_INT 22
18043: PUSH
18044: LD_INT 2
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 23
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 21
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: PPUSH
18076: CALL_OW 69
18080: IN
18081: IFFALSE 18097
// deadCounter := deadCounter + 1 ;
18083: LD_ADDR_EXP 9
18087: PUSH
18088: LD_EXP 9
18092: PUSH
18093: LD_INT 1
18095: PLUS
18096: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18097: LD_VAR 0 1
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_INT 4
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 34
18114: PUSH
18115: LD_INT 12
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: IN
18131: PUSH
18132: LD_EXP 18
18136: NOT
18137: AND
18138: IFFALSE 18148
// firstConvoyDestroyed := true ;
18140: LD_ADDR_EXP 18
18144: PUSH
18145: LD_INT 1
18147: ST_TO_ADDR
// if un in usAttackers then
18148: LD_VAR 0 1
18152: PUSH
18153: LD_EXP 47
18157: IN
18158: IFFALSE 18176
// usAttackers := usAttackers diff un ;
18160: LD_ADDR_EXP 47
18164: PUSH
18165: LD_EXP 47
18169: PUSH
18170: LD_VAR 0 1
18174: DIFF
18175: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18176: LD_VAR 0 1
18180: PUSH
18181: LD_INT 22
18183: PUSH
18184: LD_INT 5
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 21
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: IN
18210: IFFALSE 18226
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18212: LD_ADDR_EXP 20
18216: PUSH
18217: LD_EXP 20
18221: PUSH
18222: LD_INT 1
18224: PLUS
18225: ST_TO_ADDR
// end ;
18226: PPOPN 1
18228: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18229: LD_VAR 0 2
18233: PUSH
18234: LD_EXP 38
18238: EQUAL
18239: PUSH
18240: LD_EXP 25
18244: AND
18245: IFFALSE 18391
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18247: LD_INT 22
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 50
18269: PUSH
18270: EMPTY
18271: LIST
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: LIST
18277: PPUSH
18278: CALL_OW 69
18282: IFFALSE 18324
// begin InGameOn ;
18284: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18288: LD_EXP 38
18292: PPUSH
18293: LD_INT 11
18295: PPUSH
18296: CALL_OW 120
// repeat wait ( 3 ) ;
18300: LD_INT 3
18302: PPUSH
18303: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18307: LD_EXP 38
18311: PPUSH
18312: CALL_OW 310
18316: IFFALSE 18300
// InGameOff ;
18318: CALL_OW 9
// end else
18322: GO 18391
// begin ibrahimInDepot := false ;
18324: LD_ADDR_EXP 25
18328: PUSH
18329: LD_INT 0
18331: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18332: LD_EXP 38
18336: PPUSH
18337: LD_INT 30
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18347: LD_INT 35
18349: PPUSH
18350: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18354: LD_EXP 38
18358: PPUSH
18359: LD_INT 30
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 307
18369: PUSH
18370: LD_EXP 38
18374: PPUSH
18375: CALL_OW 301
18379: OR
18380: IFFALSE 18347
// RemoveUnit ( Ibrahim ) ;
18382: LD_EXP 38
18386: PPUSH
18387: CALL_OW 64
// end ; end ; end ;
18391: PPOPN 2
18393: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18394: LD_VAR 0 2
18398: PUSH
18399: LD_EXP 28
18403: EQUAL
18404: PUSH
18405: LD_VAR 0 1
18409: PUSH
18410: LD_INT 11
18412: EQUAL
18413: AND
18414: PUSH
18415: LD_EXP 25
18419: AND
18420: IFFALSE 18426
// IbrahimQuery ;
18422: CALL 16180 0 0
// end ;
18426: PPOPN 2
18428: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL_OW 141
// if oldId in usAttackers then
18438: LD_VAR 0 2
18442: PUSH
18443: LD_EXP 47
18447: IN
18448: IFFALSE 18466
// usAttackers := usAttackers diff oldId ;
18450: LD_ADDR_EXP 47
18454: PUSH
18455: LD_EXP 47
18459: PUSH
18460: LD_VAR 0 2
18464: DIFF
18465: ST_TO_ADDR
// if newId in usAttackers then
18466: LD_VAR 0 1
18470: PUSH
18471: LD_EXP 47
18475: IN
18476: IFFALSE 18494
// usAttackers := usAttackers diff newId ;
18478: LD_ADDR_EXP 47
18482: PUSH
18483: LD_EXP 47
18487: PUSH
18488: LD_VAR 0 1
18492: DIFF
18493: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18494: LD_VAR 0 3
18498: PUSH
18499: LD_INT 4
18501: EQUAL
18502: PUSH
18503: LD_EXP 18
18507: NOT
18508: AND
18509: IFFALSE 18519
// firstConvoyDestroyed := true ;
18511: LD_ADDR_EXP 18
18515: PUSH
18516: LD_INT 1
18518: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18519: LD_VAR 0 1
18523: PPUSH
18524: CALL_OW 264
18528: PUSH
18529: LD_INT 12
18531: EQUAL
18532: IFFALSE 18570
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18534: LD_ADDR_EXP 13
18538: PUSH
18539: LD_EXP 13
18543: PUSH
18544: LD_INT 1
18546: PLUS
18547: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18548: LD_VAR 0 1
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL_OW 289
18560: PUSH
18561: LD_INT 0
18563: EQUAL
18564: IFFALSE 18570
// EmptyCargoDialog ;
18566: CALL 14818 0 0
// end ; end ;
18570: PPOPN 4
18572: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18573: LD_VAR 0 1
18577: PUSH
18578: LD_INT 2
18580: EQUAL
18581: PUSH
18582: LD_VAR 0 2
18586: PUSH
18587: LD_INT 5
18589: EQUAL
18590: AND
18591: IFFALSE 18600
// YouLost ( Attack ) ;
18593: LD_STRING Attack
18595: PPUSH
18596: CALL_OW 104
// end ;
18600: PPOPN 2
18602: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 255
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: PUSH
18617: LD_EXP 6
18621: NOT
18622: AND
18623: IFFALSE 18757
// begin if GetBType ( b ) = b_lab then
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 266
18634: PUSH
18635: LD_INT 6
18637: EQUAL
18638: IFFALSE 18678
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18640: LD_EXP 44
18644: PPUSH
18645: LD_INT 25
18647: PUSH
18648: LD_INT 4
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PPUSH
18655: CALL_OW 72
18659: PPUSH
18660: LD_VAR 0 1
18664: PPUSH
18665: CALL_OW 120
// AmLabResearch ( b ) ;
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL 5154 0 1
// end ; if GetBType ( b ) = b_armoury then
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 266
18687: PUSH
18688: LD_INT 4
18690: EQUAL
18691: IFFALSE 18739
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18693: LD_EXP 44
18697: PPUSH
18698: LD_INT 25
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 3
18710: PUSH
18711: LD_INT 54
18713: PUSH
18714: EMPTY
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PPUSH
18725: CALL_OW 72
18729: PPUSH
18730: LD_VAR 0 1
18734: PPUSH
18735: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18739: LD_ADDR_EXP 46
18743: PUSH
18744: LD_EXP 46
18748: PPUSH
18749: LD_INT 1
18751: PPUSH
18752: CALL_OW 3
18756: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 255
18766: PUSH
18767: LD_INT 5
18769: EQUAL
18770: IFFALSE 18784
// SetBLevel ( b , 5 ) ;
18772: LD_VAR 0 1
18776: PPUSH
18777: LD_INT 5
18779: PPUSH
18780: CALL_OW 241
// end ;
18784: PPOPN 1
18786: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 255
18796: PUSH
18797: LD_INT 2
18799: EQUAL
18800: IFFALSE 18816
// vehCounter := vehCounter + 1 ;
18802: LD_ADDR_EXP 22
18806: PUSH
18807: LD_EXP 22
18811: PUSH
18812: LD_INT 1
18814: PLUS
18815: ST_TO_ADDR
// end ;
18816: PPOPN 2
18818: END
// on SailEvent ( event ) do begin if event = eventAttack then
18819: LD_VAR 0 1
18823: PUSH
18824: LD_EXP 24
18828: EQUAL
18829: IFFALSE 18835
// AmericanAttack ;
18831: CALL 6602 0 0
// end ; end_of_file
18835: PPOPN 1
18837: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18838: LD_OWVAR 1
18842: PUSH
18843: LD_INT 10500
18845: PUSH
18846: LD_INT 9800
18848: PUSH
18849: LD_INT 9450
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: PUSH
18857: LD_OWVAR 67
18861: ARRAY
18862: LESSEQUAL
18863: IFFALSE 18890
18865: GO 18867
18867: DISABLE
// begin enable ;
18868: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18869: LD_INT 1
18871: PPUSH
18872: LD_INT 5
18874: PPUSH
18875: CALL_OW 12
18879: PPUSH
18880: LD_INT 9
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: CALL_OW 55
// end ;
18890: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
18891: LD_EXP 6
18895: PUSH
18896: LD_OWVAR 1
18900: PUSH
18901: LD_INT 56700
18903: PUSH
18904: LD_INT 55650
18906: PUSH
18907: LD_INT 54600
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: LD_OWVAR 67
18919: ARRAY
18920: LESSEQUAL
18921: AND
18922: IFFALSE 18949
18924: GO 18926
18926: DISABLE
// begin enable ;
18927: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
18928: LD_INT 3
18930: PPUSH
18931: LD_INT 5
18933: PPUSH
18934: CALL_OW 12
18938: PPUSH
18939: LD_INT 9
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 55
// end ; end_of_file
18949: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18950: LD_EXP 11
18954: NOT
18955: PUSH
18956: LD_EXP 16
18960: AND
18961: PUSH
18962: LD_EXP 4
18966: AND
18967: PUSH
18968: LD_EXP 15
18972: PUSH
18973: LD_EXP 16
18977: LESSEQUAL
18978: AND
18979: IFFALSE 19069
18981: GO 18983
18983: DISABLE
// begin enable ;
18984: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
18985: LD_ADDR_OWVAR 47
18989: PUSH
18990: LD_STRING #X103-1
18992: PUSH
18993: LD_EXP 16
18997: PUSH
18998: LD_EXP 15
19002: MINUS
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19008: LD_ADDR_EXP 15
19012: PUSH
19013: LD_INT 5
19015: PPUSH
19016: CALL_OW 274
19020: PPUSH
19021: LD_INT 1
19023: PPUSH
19024: CALL_OW 275
19028: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19029: LD_INT 10
19031: PPUSH
19032: LD_INT 1
19034: PPUSH
19035: CALL_OW 287
19039: PUSH
19040: LD_INT 0
19042: EQUAL
19043: IFFALSE 19061
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19045: LD_ADDR_EXP 17
19049: PUSH
19050: LD_EXP 17
19054: PUSH
19055: LD_INT 35
19057: MINUS
19058: ST_TO_ADDR
19059: GO 19069
// farmerCratesCounter := 30 30$00 ;
19061: LD_ADDR_EXP 17
19065: PUSH
19066: LD_INT 63000
19068: ST_TO_ADDR
// end ; end_of_file
19069: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19070: LD_INT 0
19072: PPUSH
// ar_miner := 81 ;
19073: LD_ADDR_EXP 55
19077: PUSH
19078: LD_INT 81
19080: ST_TO_ADDR
// ar_crane := 88 ;
19081: LD_ADDR_EXP 54
19085: PUSH
19086: LD_INT 88
19088: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19089: LD_ADDR_EXP 49
19093: PUSH
19094: LD_INT 89
19096: ST_TO_ADDR
// us_hack := 99 ;
19097: LD_ADDR_EXP 50
19101: PUSH
19102: LD_INT 99
19104: ST_TO_ADDR
// us_artillery := 97 ;
19105: LD_ADDR_EXP 51
19109: PUSH
19110: LD_INT 97
19112: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19113: LD_ADDR_EXP 52
19117: PUSH
19118: LD_INT 91
19120: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19121: LD_ADDR_EXP 53
19125: PUSH
19126: LD_INT 92
19128: ST_TO_ADDR
// ru_radar := 98 ;
19129: LD_ADDR_EXP 48
19133: PUSH
19134: LD_INT 98
19136: ST_TO_ADDR
// tech_Artillery := 80 ;
19137: LD_ADDR_EXP 56
19141: PUSH
19142: LD_INT 80
19144: ST_TO_ADDR
// tech_RadMat := 81 ;
19145: LD_ADDR_EXP 57
19149: PUSH
19150: LD_INT 81
19152: ST_TO_ADDR
// tech_BasicTools := 82 ;
19153: LD_ADDR_EXP 58
19157: PUSH
19158: LD_INT 82
19160: ST_TO_ADDR
// tech_Cargo := 83 ;
19161: LD_ADDR_EXP 59
19165: PUSH
19166: LD_INT 83
19168: ST_TO_ADDR
// tech_Track := 84 ;
19169: LD_ADDR_EXP 60
19173: PUSH
19174: LD_INT 84
19176: ST_TO_ADDR
// tech_Crane := 85 ;
19177: LD_ADDR_EXP 61
19181: PUSH
19182: LD_INT 85
19184: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19185: LD_ADDR_EXP 62
19189: PUSH
19190: LD_INT 86
19192: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19193: LD_ADDR_EXP 63
19197: PUSH
19198: LD_INT 87
19200: ST_TO_ADDR
// end ;
19201: LD_VAR 0 1
19205: RET
// every 1 do
19206: GO 19208
19208: DISABLE
// InitGlobalVariables ; end_of_file
19209: CALL 19070 0 0
19213: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19214: LD_VAR 0 2
19218: PUSH
19219: LD_INT 100
19221: EQUAL
19222: IFFALSE 20171
// begin if not StreamModeActive then
19224: LD_EXP 64
19228: NOT
19229: IFFALSE 19239
// StreamModeActive := true ;
19231: LD_ADDR_EXP 64
19235: PUSH
19236: LD_INT 1
19238: ST_TO_ADDR
// if p3 = 0 then
19239: LD_VAR 0 3
19243: PUSH
19244: LD_INT 0
19246: EQUAL
19247: IFFALSE 19253
// InitStreamMode ;
19249: CALL 20329 0 0
// if p3 = 1 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 1
19260: EQUAL
19261: IFFALSE 19271
// sRocket := true ;
19263: LD_ADDR_EXP 69
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 2 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 2
19278: EQUAL
19279: IFFALSE 19289
// sSpeed := true ;
19281: LD_ADDR_EXP 68
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 3 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 3
19296: EQUAL
19297: IFFALSE 19307
// sEngine := true ;
19299: LD_ADDR_EXP 70
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 4 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 4
19314: EQUAL
19315: IFFALSE 19325
// sSpec := true ;
19317: LD_ADDR_EXP 67
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 5 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 5
19332: EQUAL
19333: IFFALSE 19343
// sLevel := true ;
19335: LD_ADDR_EXP 71
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 6 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 6
19350: EQUAL
19351: IFFALSE 19361
// sArmoury := true ;
19353: LD_ADDR_EXP 72
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 7 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 7
19368: EQUAL
19369: IFFALSE 19379
// sRadar := true ;
19371: LD_ADDR_EXP 73
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 8 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 8
19386: EQUAL
19387: IFFALSE 19397
// sBunker := true ;
19389: LD_ADDR_EXP 74
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 9 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 9
19404: EQUAL
19405: IFFALSE 19415
// sHack := true ;
19407: LD_ADDR_EXP 75
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 10 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 10
19422: EQUAL
19423: IFFALSE 19433
// sFire := true ;
19425: LD_ADDR_EXP 76
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 11 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 11
19440: EQUAL
19441: IFFALSE 19451
// sRefresh := true ;
19443: LD_ADDR_EXP 77
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 12 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 12
19458: EQUAL
19459: IFFALSE 19469
// sExp := true ;
19461: LD_ADDR_EXP 78
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 13 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 13
19476: EQUAL
19477: IFFALSE 19487
// sDepot := true ;
19479: LD_ADDR_EXP 79
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 14 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 14
19494: EQUAL
19495: IFFALSE 19505
// sFlag := true ;
19497: LD_ADDR_EXP 80
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 15 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 15
19512: EQUAL
19513: IFFALSE 19523
// sKamikadze := true ;
19515: LD_ADDR_EXP 88
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 16 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 16
19530: EQUAL
19531: IFFALSE 19541
// sTroll := true ;
19533: LD_ADDR_EXP 89
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 17 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 17
19548: EQUAL
19549: IFFALSE 19559
// sSlow := true ;
19551: LD_ADDR_EXP 90
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 18 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 18
19566: EQUAL
19567: IFFALSE 19577
// sLack := true ;
19569: LD_ADDR_EXP 91
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 19 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 19
19584: EQUAL
19585: IFFALSE 19595
// sTank := true ;
19587: LD_ADDR_EXP 93
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 20 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 20
19602: EQUAL
19603: IFFALSE 19613
// sRemote := true ;
19605: LD_ADDR_EXP 94
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 21 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 21
19620: EQUAL
19621: IFFALSE 19631
// sPowell := true ;
19623: LD_ADDR_EXP 95
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 22 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 22
19638: EQUAL
19639: IFFALSE 19649
// sTeleport := true ;
19641: LD_ADDR_EXP 98
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 23 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 23
19656: EQUAL
19657: IFFALSE 19667
// sOilTower := true ;
19659: LD_ADDR_EXP 100
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 24 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 24
19674: EQUAL
19675: IFFALSE 19685
// sShovel := true ;
19677: LD_ADDR_EXP 101
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 25 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 25
19692: EQUAL
19693: IFFALSE 19703
// sSheik := true ;
19695: LD_ADDR_EXP 102
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 26 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 26
19710: EQUAL
19711: IFFALSE 19721
// sEarthquake := true ;
19713: LD_ADDR_EXP 104
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 27 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 27
19728: EQUAL
19729: IFFALSE 19739
// sAI := true ;
19731: LD_ADDR_EXP 105
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 28 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 28
19746: EQUAL
19747: IFFALSE 19757
// sCargo := true ;
19749: LD_ADDR_EXP 108
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 29 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 29
19764: EQUAL
19765: IFFALSE 19775
// sDLaser := true ;
19767: LD_ADDR_EXP 109
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 30 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 30
19782: EQUAL
19783: IFFALSE 19793
// sExchange := true ;
19785: LD_ADDR_EXP 110
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 31 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 31
19800: EQUAL
19801: IFFALSE 19811
// sFac := true ;
19803: LD_ADDR_EXP 111
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 32 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 32
19818: EQUAL
19819: IFFALSE 19829
// sPower := true ;
19821: LD_ADDR_EXP 112
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 33 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 33
19836: EQUAL
19837: IFFALSE 19847
// sRandom := true ;
19839: LD_ADDR_EXP 113
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 34 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 34
19854: EQUAL
19855: IFFALSE 19865
// sShield := true ;
19857: LD_ADDR_EXP 114
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 35 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 35
19872: EQUAL
19873: IFFALSE 19883
// sTime := true ;
19875: LD_ADDR_EXP 115
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 36 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 36
19890: EQUAL
19891: IFFALSE 19901
// sTools := true ;
19893: LD_ADDR_EXP 116
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 101 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 101
19908: EQUAL
19909: IFFALSE 19919
// sSold := true ;
19911: LD_ADDR_EXP 81
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 102 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 102
19926: EQUAL
19927: IFFALSE 19937
// sDiff := true ;
19929: LD_ADDR_EXP 82
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 103 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 103
19944: EQUAL
19945: IFFALSE 19955
// sFog := true ;
19947: LD_ADDR_EXP 85
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 104 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 104
19962: EQUAL
19963: IFFALSE 19973
// sReset := true ;
19965: LD_ADDR_EXP 86
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 105 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 105
19980: EQUAL
19981: IFFALSE 19991
// sSun := true ;
19983: LD_ADDR_EXP 87
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 106 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 106
19998: EQUAL
19999: IFFALSE 20009
// sTiger := true ;
20001: LD_ADDR_EXP 83
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 107 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 107
20016: EQUAL
20017: IFFALSE 20027
// sBomb := true ;
20019: LD_ADDR_EXP 84
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 108 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 108
20034: EQUAL
20035: IFFALSE 20045
// sWound := true ;
20037: LD_ADDR_EXP 92
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 109 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 109
20052: EQUAL
20053: IFFALSE 20063
// sBetray := true ;
20055: LD_ADDR_EXP 96
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 110 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 110
20070: EQUAL
20071: IFFALSE 20081
// sContamin := true ;
20073: LD_ADDR_EXP 97
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 111 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 111
20088: EQUAL
20089: IFFALSE 20099
// sOil := true ;
20091: LD_ADDR_EXP 99
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// if p3 = 112 then
20099: LD_VAR 0 3
20103: PUSH
20104: LD_INT 112
20106: EQUAL
20107: IFFALSE 20117
// sStu := true ;
20109: LD_ADDR_EXP 103
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if p3 = 113 then
20117: LD_VAR 0 3
20121: PUSH
20122: LD_INT 113
20124: EQUAL
20125: IFFALSE 20135
// sBazooka := true ;
20127: LD_ADDR_EXP 106
20131: PUSH
20132: LD_INT 1
20134: ST_TO_ADDR
// if p3 = 114 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 114
20142: EQUAL
20143: IFFALSE 20153
// sMortar := true ;
20145: LD_ADDR_EXP 107
20149: PUSH
20150: LD_INT 1
20152: ST_TO_ADDR
// if p3 = 115 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 115
20160: EQUAL
20161: IFFALSE 20171
// sRanger := true ;
20163: LD_ADDR_EXP 117
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// end ; if p2 = 101 then
20171: LD_VAR 0 2
20175: PUSH
20176: LD_INT 101
20178: EQUAL
20179: IFFALSE 20307
// begin case p3 of 1 :
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 1
20188: DOUBLE
20189: EQUAL
20190: IFTRUE 20194
20192: GO 20201
20194: POP
// hHackUnlimitedResources ; 2 :
20195: CALL 31342 0 0
20199: GO 20307
20201: LD_INT 2
20203: DOUBLE
20204: EQUAL
20205: IFTRUE 20209
20207: GO 20216
20209: POP
// hHackSetLevel10 ; 3 :
20210: CALL 31475 0 0
20214: GO 20307
20216: LD_INT 3
20218: DOUBLE
20219: EQUAL
20220: IFTRUE 20224
20222: GO 20231
20224: POP
// hHackSetLevel10YourUnits ; 4 :
20225: CALL 31560 0 0
20229: GO 20307
20231: LD_INT 4
20233: DOUBLE
20234: EQUAL
20235: IFTRUE 20239
20237: GO 20246
20239: POP
// hHackInvincible ; 5 :
20240: CALL 32008 0 0
20244: GO 20307
20246: LD_INT 5
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20261
20254: POP
// hHackInvisible ; 6 :
20255: CALL 32119 0 0
20259: GO 20307
20261: LD_INT 6
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20276
20269: POP
// hHackChangeYourSide ; 7 :
20270: CALL 32176 0 0
20274: GO 20307
20276: LD_INT 7
20278: DOUBLE
20279: EQUAL
20280: IFTRUE 20284
20282: GO 20291
20284: POP
// hHackChangeUnitSide ; 8 :
20285: CALL 32218 0 0
20289: GO 20307
20291: LD_INT 8
20293: DOUBLE
20294: EQUAL
20295: IFTRUE 20299
20297: GO 20306
20299: POP
// hHackFog ; end ;
20300: CALL 32319 0 0
20304: GO 20307
20306: POP
// end ; end ;
20307: PPOPN 6
20309: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20310: GO 20312
20312: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20313: LD_STRING initStreamRollete();
20315: PPUSH
20316: CALL_OW 559
// InitStreamMode ;
20320: CALL 20329 0 0
// DefineStreamItems ( ) ;
20324: CALL 20769 0 0
// end ;
20328: END
// function InitStreamMode ; begin
20329: LD_INT 0
20331: PPUSH
// streamModeActive := false ;
20332: LD_ADDR_EXP 64
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// normalCounter := 36 ;
20340: LD_ADDR_EXP 65
20344: PUSH
20345: LD_INT 36
20347: ST_TO_ADDR
// hardcoreCounter := 16 ;
20348: LD_ADDR_EXP 66
20352: PUSH
20353: LD_INT 16
20355: ST_TO_ADDR
// sRocket := false ;
20356: LD_ADDR_EXP 69
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// sSpeed := false ;
20364: LD_ADDR_EXP 68
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// sEngine := false ;
20372: LD_ADDR_EXP 70
20376: PUSH
20377: LD_INT 0
20379: ST_TO_ADDR
// sSpec := false ;
20380: LD_ADDR_EXP 67
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// sLevel := false ;
20388: LD_ADDR_EXP 71
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// sArmoury := false ;
20396: LD_ADDR_EXP 72
20400: PUSH
20401: LD_INT 0
20403: ST_TO_ADDR
// sRadar := false ;
20404: LD_ADDR_EXP 73
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sBunker := false ;
20412: LD_ADDR_EXP 74
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sHack := false ;
20420: LD_ADDR_EXP 75
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sFire := false ;
20428: LD_ADDR_EXP 76
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sRefresh := false ;
20436: LD_ADDR_EXP 77
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// sExp := false ;
20444: LD_ADDR_EXP 78
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// sDepot := false ;
20452: LD_ADDR_EXP 79
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// sFlag := false ;
20460: LD_ADDR_EXP 80
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// sKamikadze := false ;
20468: LD_ADDR_EXP 88
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sTroll := false ;
20476: LD_ADDR_EXP 89
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sSlow := false ;
20484: LD_ADDR_EXP 90
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// sLack := false ;
20492: LD_ADDR_EXP 91
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// sTank := false ;
20500: LD_ADDR_EXP 93
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// sRemote := false ;
20508: LD_ADDR_EXP 94
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// sPowell := false ;
20516: LD_ADDR_EXP 95
20520: PUSH
20521: LD_INT 0
20523: ST_TO_ADDR
// sTeleport := false ;
20524: LD_ADDR_EXP 98
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// sOilTower := false ;
20532: LD_ADDR_EXP 100
20536: PUSH
20537: LD_INT 0
20539: ST_TO_ADDR
// sShovel := false ;
20540: LD_ADDR_EXP 101
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// sSheik := false ;
20548: LD_ADDR_EXP 102
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// sEarthquake := false ;
20556: LD_ADDR_EXP 104
20560: PUSH
20561: LD_INT 0
20563: ST_TO_ADDR
// sAI := false ;
20564: LD_ADDR_EXP 105
20568: PUSH
20569: LD_INT 0
20571: ST_TO_ADDR
// sCargo := false ;
20572: LD_ADDR_EXP 108
20576: PUSH
20577: LD_INT 0
20579: ST_TO_ADDR
// sDLaser := false ;
20580: LD_ADDR_EXP 109
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// sExchange := false ;
20588: LD_ADDR_EXP 110
20592: PUSH
20593: LD_INT 0
20595: ST_TO_ADDR
// sFac := false ;
20596: LD_ADDR_EXP 111
20600: PUSH
20601: LD_INT 0
20603: ST_TO_ADDR
// sPower := false ;
20604: LD_ADDR_EXP 112
20608: PUSH
20609: LD_INT 0
20611: ST_TO_ADDR
// sRandom := false ;
20612: LD_ADDR_EXP 113
20616: PUSH
20617: LD_INT 0
20619: ST_TO_ADDR
// sShield := false ;
20620: LD_ADDR_EXP 114
20624: PUSH
20625: LD_INT 0
20627: ST_TO_ADDR
// sTime := false ;
20628: LD_ADDR_EXP 115
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// sTools := false ;
20636: LD_ADDR_EXP 116
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// sSold := false ;
20644: LD_ADDR_EXP 81
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// sDiff := false ;
20652: LD_ADDR_EXP 82
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// sFog := false ;
20660: LD_ADDR_EXP 85
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// sReset := false ;
20668: LD_ADDR_EXP 86
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// sSun := false ;
20676: LD_ADDR_EXP 87
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// sTiger := false ;
20684: LD_ADDR_EXP 83
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sBomb := false ;
20692: LD_ADDR_EXP 84
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sWound := false ;
20700: LD_ADDR_EXP 92
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sBetray := false ;
20708: LD_ADDR_EXP 96
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sContamin := false ;
20716: LD_ADDR_EXP 97
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sOil := false ;
20724: LD_ADDR_EXP 99
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sStu := false ;
20732: LD_ADDR_EXP 103
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sBazooka := false ;
20740: LD_ADDR_EXP 106
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sMortar := false ;
20748: LD_ADDR_EXP 107
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sRanger := false ;
20756: LD_ADDR_EXP 117
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// end ;
20764: LD_VAR 0 1
20768: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20769: LD_INT 0
20771: PPUSH
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
// result := [ ] ;
20776: LD_ADDR_VAR 0 1
20780: PUSH
20781: EMPTY
20782: ST_TO_ADDR
// if campaign_id = 1 then
20783: LD_OWVAR 69
20787: PUSH
20788: LD_INT 1
20790: EQUAL
20791: IFFALSE 23729
// begin case mission_number of 1 :
20793: LD_OWVAR 70
20797: PUSH
20798: LD_INT 1
20800: DOUBLE
20801: EQUAL
20802: IFTRUE 20806
20804: GO 20870
20806: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20807: LD_ADDR_VAR 0 1
20811: PUSH
20812: LD_INT 2
20814: PUSH
20815: LD_INT 4
20817: PUSH
20818: LD_INT 11
20820: PUSH
20821: LD_INT 12
20823: PUSH
20824: LD_INT 15
20826: PUSH
20827: LD_INT 16
20829: PUSH
20830: LD_INT 22
20832: PUSH
20833: LD_INT 23
20835: PUSH
20836: LD_INT 26
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 101
20852: PUSH
20853: LD_INT 102
20855: PUSH
20856: LD_INT 106
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: ST_TO_ADDR
20868: GO 23727
20870: LD_INT 2
20872: DOUBLE
20873: EQUAL
20874: IFTRUE 20878
20876: GO 20950
20878: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20879: LD_ADDR_VAR 0 1
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 4
20889: PUSH
20890: LD_INT 11
20892: PUSH
20893: LD_INT 12
20895: PUSH
20896: LD_INT 15
20898: PUSH
20899: LD_INT 16
20901: PUSH
20902: LD_INT 22
20904: PUSH
20905: LD_INT 23
20907: PUSH
20908: LD_INT 26
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 101
20924: PUSH
20925: LD_INT 102
20927: PUSH
20928: LD_INT 105
20930: PUSH
20931: LD_INT 106
20933: PUSH
20934: LD_INT 108
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: ST_TO_ADDR
20948: GO 23727
20950: LD_INT 3
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 21034
20958: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20959: LD_ADDR_VAR 0 1
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: LD_INT 11
20975: PUSH
20976: LD_INT 12
20978: PUSH
20979: LD_INT 15
20981: PUSH
20982: LD_INT 16
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_INT 26
20990: PUSH
20991: LD_INT 36
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 101
21008: PUSH
21009: LD_INT 102
21011: PUSH
21012: LD_INT 105
21014: PUSH
21015: LD_INT 106
21017: PUSH
21018: LD_INT 108
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: ST_TO_ADDR
21032: GO 23727
21034: LD_INT 4
21036: DOUBLE
21037: EQUAL
21038: IFTRUE 21042
21040: GO 21126
21042: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21043: LD_ADDR_VAR 0 1
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 4
21053: PUSH
21054: LD_INT 5
21056: PUSH
21057: LD_INT 8
21059: PUSH
21060: LD_INT 11
21062: PUSH
21063: LD_INT 12
21065: PUSH
21066: LD_INT 15
21068: PUSH
21069: LD_INT 16
21071: PUSH
21072: LD_INT 22
21074: PUSH
21075: LD_INT 23
21077: PUSH
21078: LD_INT 26
21080: PUSH
21081: LD_INT 36
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 101
21100: PUSH
21101: LD_INT 102
21103: PUSH
21104: LD_INT 105
21106: PUSH
21107: LD_INT 106
21109: PUSH
21110: LD_INT 108
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: ST_TO_ADDR
21124: GO 23727
21126: LD_INT 5
21128: DOUBLE
21129: EQUAL
21130: IFTRUE 21134
21132: GO 21234
21134: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21135: LD_ADDR_VAR 0 1
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: LD_INT 4
21145: PUSH
21146: LD_INT 5
21148: PUSH
21149: LD_INT 6
21151: PUSH
21152: LD_INT 8
21154: PUSH
21155: LD_INT 11
21157: PUSH
21158: LD_INT 12
21160: PUSH
21161: LD_INT 15
21163: PUSH
21164: LD_INT 16
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_INT 23
21172: PUSH
21173: LD_INT 25
21175: PUSH
21176: LD_INT 26
21178: PUSH
21179: LD_INT 36
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 101
21200: PUSH
21201: LD_INT 102
21203: PUSH
21204: LD_INT 105
21206: PUSH
21207: LD_INT 106
21209: PUSH
21210: LD_INT 108
21212: PUSH
21213: LD_INT 109
21215: PUSH
21216: LD_INT 112
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: ST_TO_ADDR
21232: GO 23727
21234: LD_INT 6
21236: DOUBLE
21237: EQUAL
21238: IFTRUE 21242
21240: GO 21362
21242: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21243: LD_ADDR_VAR 0 1
21247: PUSH
21248: LD_INT 2
21250: PUSH
21251: LD_INT 4
21253: PUSH
21254: LD_INT 5
21256: PUSH
21257: LD_INT 6
21259: PUSH
21260: LD_INT 8
21262: PUSH
21263: LD_INT 11
21265: PUSH
21266: LD_INT 12
21268: PUSH
21269: LD_INT 15
21271: PUSH
21272: LD_INT 16
21274: PUSH
21275: LD_INT 20
21277: PUSH
21278: LD_INT 21
21280: PUSH
21281: LD_INT 22
21283: PUSH
21284: LD_INT 23
21286: PUSH
21287: LD_INT 25
21289: PUSH
21290: LD_INT 26
21292: PUSH
21293: LD_INT 30
21295: PUSH
21296: LD_INT 31
21298: PUSH
21299: LD_INT 32
21301: PUSH
21302: LD_INT 36
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 101
21328: PUSH
21329: LD_INT 102
21331: PUSH
21332: LD_INT 105
21334: PUSH
21335: LD_INT 106
21337: PUSH
21338: LD_INT 108
21340: PUSH
21341: LD_INT 109
21343: PUSH
21344: LD_INT 112
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: ST_TO_ADDR
21360: GO 23727
21362: LD_INT 7
21364: DOUBLE
21365: EQUAL
21366: IFTRUE 21370
21368: GO 21470
21370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21371: LD_ADDR_VAR 0 1
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: LD_INT 4
21381: PUSH
21382: LD_INT 5
21384: PUSH
21385: LD_INT 7
21387: PUSH
21388: LD_INT 11
21390: PUSH
21391: LD_INT 12
21393: PUSH
21394: LD_INT 15
21396: PUSH
21397: LD_INT 16
21399: PUSH
21400: LD_INT 20
21402: PUSH
21403: LD_INT 21
21405: PUSH
21406: LD_INT 22
21408: PUSH
21409: LD_INT 23
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 26
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 101
21436: PUSH
21437: LD_INT 102
21439: PUSH
21440: LD_INT 103
21442: PUSH
21443: LD_INT 105
21445: PUSH
21446: LD_INT 106
21448: PUSH
21449: LD_INT 108
21451: PUSH
21452: LD_INT 112
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: ST_TO_ADDR
21468: GO 23727
21470: LD_INT 8
21472: DOUBLE
21473: EQUAL
21474: IFTRUE 21478
21476: GO 21606
21478: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21479: LD_ADDR_VAR 0 1
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: LD_INT 4
21489: PUSH
21490: LD_INT 5
21492: PUSH
21493: LD_INT 6
21495: PUSH
21496: LD_INT 7
21498: PUSH
21499: LD_INT 8
21501: PUSH
21502: LD_INT 11
21504: PUSH
21505: LD_INT 12
21507: PUSH
21508: LD_INT 15
21510: PUSH
21511: LD_INT 16
21513: PUSH
21514: LD_INT 20
21516: PUSH
21517: LD_INT 21
21519: PUSH
21520: LD_INT 22
21522: PUSH
21523: LD_INT 23
21525: PUSH
21526: LD_INT 25
21528: PUSH
21529: LD_INT 26
21531: PUSH
21532: LD_INT 30
21534: PUSH
21535: LD_INT 31
21537: PUSH
21538: LD_INT 32
21540: PUSH
21541: LD_INT 36
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 101
21568: PUSH
21569: LD_INT 102
21571: PUSH
21572: LD_INT 103
21574: PUSH
21575: LD_INT 105
21577: PUSH
21578: LD_INT 106
21580: PUSH
21581: LD_INT 108
21583: PUSH
21584: LD_INT 109
21586: PUSH
21587: LD_INT 112
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: ST_TO_ADDR
21604: GO 23727
21606: LD_INT 9
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21750
21614: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21615: LD_ADDR_VAR 0 1
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 4
21625: PUSH
21626: LD_INT 5
21628: PUSH
21629: LD_INT 6
21631: PUSH
21632: LD_INT 7
21634: PUSH
21635: LD_INT 8
21637: PUSH
21638: LD_INT 11
21640: PUSH
21641: LD_INT 12
21643: PUSH
21644: LD_INT 15
21646: PUSH
21647: LD_INT 16
21649: PUSH
21650: LD_INT 20
21652: PUSH
21653: LD_INT 21
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: LD_INT 23
21661: PUSH
21662: LD_INT 25
21664: PUSH
21665: LD_INT 26
21667: PUSH
21668: LD_INT 28
21670: PUSH
21671: LD_INT 30
21673: PUSH
21674: LD_INT 31
21676: PUSH
21677: LD_INT 32
21679: PUSH
21680: LD_INT 36
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 101
21708: PUSH
21709: LD_INT 102
21711: PUSH
21712: LD_INT 103
21714: PUSH
21715: LD_INT 105
21717: PUSH
21718: LD_INT 106
21720: PUSH
21721: LD_INT 108
21723: PUSH
21724: LD_INT 109
21726: PUSH
21727: LD_INT 112
21729: PUSH
21730: LD_INT 114
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: ST_TO_ADDR
21748: GO 23727
21750: LD_INT 10
21752: DOUBLE
21753: EQUAL
21754: IFTRUE 21758
21756: GO 21942
21758: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21759: LD_ADDR_VAR 0 1
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 4
21769: PUSH
21770: LD_INT 5
21772: PUSH
21773: LD_INT 6
21775: PUSH
21776: LD_INT 7
21778: PUSH
21779: LD_INT 8
21781: PUSH
21782: LD_INT 9
21784: PUSH
21785: LD_INT 10
21787: PUSH
21788: LD_INT 11
21790: PUSH
21791: LD_INT 12
21793: PUSH
21794: LD_INT 13
21796: PUSH
21797: LD_INT 14
21799: PUSH
21800: LD_INT 15
21802: PUSH
21803: LD_INT 16
21805: PUSH
21806: LD_INT 17
21808: PUSH
21809: LD_INT 18
21811: PUSH
21812: LD_INT 19
21814: PUSH
21815: LD_INT 20
21817: PUSH
21818: LD_INT 21
21820: PUSH
21821: LD_INT 22
21823: PUSH
21824: LD_INT 23
21826: PUSH
21827: LD_INT 24
21829: PUSH
21830: LD_INT 25
21832: PUSH
21833: LD_INT 26
21835: PUSH
21836: LD_INT 28
21838: PUSH
21839: LD_INT 30
21841: PUSH
21842: LD_INT 31
21844: PUSH
21845: LD_INT 32
21847: PUSH
21848: LD_INT 36
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 101
21884: PUSH
21885: LD_INT 102
21887: PUSH
21888: LD_INT 103
21890: PUSH
21891: LD_INT 104
21893: PUSH
21894: LD_INT 105
21896: PUSH
21897: LD_INT 106
21899: PUSH
21900: LD_INT 107
21902: PUSH
21903: LD_INT 108
21905: PUSH
21906: LD_INT 109
21908: PUSH
21909: LD_INT 110
21911: PUSH
21912: LD_INT 111
21914: PUSH
21915: LD_INT 112
21917: PUSH
21918: LD_INT 114
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: ST_TO_ADDR
21940: GO 23727
21942: LD_INT 11
21944: DOUBLE
21945: EQUAL
21946: IFTRUE 21950
21948: GO 22142
21950: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21951: LD_ADDR_VAR 0 1
21955: PUSH
21956: LD_INT 2
21958: PUSH
21959: LD_INT 3
21961: PUSH
21962: LD_INT 4
21964: PUSH
21965: LD_INT 5
21967: PUSH
21968: LD_INT 6
21970: PUSH
21971: LD_INT 7
21973: PUSH
21974: LD_INT 8
21976: PUSH
21977: LD_INT 9
21979: PUSH
21980: LD_INT 10
21982: PUSH
21983: LD_INT 11
21985: PUSH
21986: LD_INT 12
21988: PUSH
21989: LD_INT 13
21991: PUSH
21992: LD_INT 14
21994: PUSH
21995: LD_INT 15
21997: PUSH
21998: LD_INT 16
22000: PUSH
22001: LD_INT 17
22003: PUSH
22004: LD_INT 18
22006: PUSH
22007: LD_INT 19
22009: PUSH
22010: LD_INT 20
22012: PUSH
22013: LD_INT 21
22015: PUSH
22016: LD_INT 22
22018: PUSH
22019: LD_INT 23
22021: PUSH
22022: LD_INT 24
22024: PUSH
22025: LD_INT 25
22027: PUSH
22028: LD_INT 26
22030: PUSH
22031: LD_INT 28
22033: PUSH
22034: LD_INT 30
22036: PUSH
22037: LD_INT 31
22039: PUSH
22040: LD_INT 32
22042: PUSH
22043: LD_INT 34
22045: PUSH
22046: LD_INT 36
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 101
22084: PUSH
22085: LD_INT 102
22087: PUSH
22088: LD_INT 103
22090: PUSH
22091: LD_INT 104
22093: PUSH
22094: LD_INT 105
22096: PUSH
22097: LD_INT 106
22099: PUSH
22100: LD_INT 107
22102: PUSH
22103: LD_INT 108
22105: PUSH
22106: LD_INT 109
22108: PUSH
22109: LD_INT 110
22111: PUSH
22112: LD_INT 111
22114: PUSH
22115: LD_INT 112
22117: PUSH
22118: LD_INT 114
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: ST_TO_ADDR
22140: GO 23727
22142: LD_INT 12
22144: DOUBLE
22145: EQUAL
22146: IFTRUE 22150
22148: GO 22358
22150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22151: LD_ADDR_VAR 0 1
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: LD_INT 4
22167: PUSH
22168: LD_INT 5
22170: PUSH
22171: LD_INT 6
22173: PUSH
22174: LD_INT 7
22176: PUSH
22177: LD_INT 8
22179: PUSH
22180: LD_INT 9
22182: PUSH
22183: LD_INT 10
22185: PUSH
22186: LD_INT 11
22188: PUSH
22189: LD_INT 12
22191: PUSH
22192: LD_INT 13
22194: PUSH
22195: LD_INT 14
22197: PUSH
22198: LD_INT 15
22200: PUSH
22201: LD_INT 16
22203: PUSH
22204: LD_INT 17
22206: PUSH
22207: LD_INT 18
22209: PUSH
22210: LD_INT 19
22212: PUSH
22213: LD_INT 20
22215: PUSH
22216: LD_INT 21
22218: PUSH
22219: LD_INT 22
22221: PUSH
22222: LD_INT 23
22224: PUSH
22225: LD_INT 24
22227: PUSH
22228: LD_INT 25
22230: PUSH
22231: LD_INT 26
22233: PUSH
22234: LD_INT 27
22236: PUSH
22237: LD_INT 28
22239: PUSH
22240: LD_INT 30
22242: PUSH
22243: LD_INT 31
22245: PUSH
22246: LD_INT 32
22248: PUSH
22249: LD_INT 33
22251: PUSH
22252: LD_INT 34
22254: PUSH
22255: LD_INT 36
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 101
22296: PUSH
22297: LD_INT 102
22299: PUSH
22300: LD_INT 103
22302: PUSH
22303: LD_INT 104
22305: PUSH
22306: LD_INT 105
22308: PUSH
22309: LD_INT 106
22311: PUSH
22312: LD_INT 107
22314: PUSH
22315: LD_INT 108
22317: PUSH
22318: LD_INT 109
22320: PUSH
22321: LD_INT 110
22323: PUSH
22324: LD_INT 111
22326: PUSH
22327: LD_INT 112
22329: PUSH
22330: LD_INT 113
22332: PUSH
22333: LD_INT 114
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: ST_TO_ADDR
22356: GO 23727
22358: LD_INT 13
22360: DOUBLE
22361: EQUAL
22362: IFTRUE 22366
22364: GO 22562
22366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22367: LD_ADDR_VAR 0 1
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: LD_INT 4
22383: PUSH
22384: LD_INT 5
22386: PUSH
22387: LD_INT 8
22389: PUSH
22390: LD_INT 9
22392: PUSH
22393: LD_INT 10
22395: PUSH
22396: LD_INT 11
22398: PUSH
22399: LD_INT 12
22401: PUSH
22402: LD_INT 14
22404: PUSH
22405: LD_INT 15
22407: PUSH
22408: LD_INT 16
22410: PUSH
22411: LD_INT 17
22413: PUSH
22414: LD_INT 18
22416: PUSH
22417: LD_INT 19
22419: PUSH
22420: LD_INT 20
22422: PUSH
22423: LD_INT 21
22425: PUSH
22426: LD_INT 22
22428: PUSH
22429: LD_INT 23
22431: PUSH
22432: LD_INT 24
22434: PUSH
22435: LD_INT 25
22437: PUSH
22438: LD_INT 26
22440: PUSH
22441: LD_INT 27
22443: PUSH
22444: LD_INT 28
22446: PUSH
22447: LD_INT 30
22449: PUSH
22450: LD_INT 31
22452: PUSH
22453: LD_INT 32
22455: PUSH
22456: LD_INT 33
22458: PUSH
22459: LD_INT 34
22461: PUSH
22462: LD_INT 36
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 101
22500: PUSH
22501: LD_INT 102
22503: PUSH
22504: LD_INT 103
22506: PUSH
22507: LD_INT 104
22509: PUSH
22510: LD_INT 105
22512: PUSH
22513: LD_INT 106
22515: PUSH
22516: LD_INT 107
22518: PUSH
22519: LD_INT 108
22521: PUSH
22522: LD_INT 109
22524: PUSH
22525: LD_INT 110
22527: PUSH
22528: LD_INT 111
22530: PUSH
22531: LD_INT 112
22533: PUSH
22534: LD_INT 113
22536: PUSH
22537: LD_INT 114
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: ST_TO_ADDR
22560: GO 23727
22562: LD_INT 14
22564: DOUBLE
22565: EQUAL
22566: IFTRUE 22570
22568: GO 22782
22570: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22571: LD_ADDR_VAR 0 1
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: LD_INT 2
22581: PUSH
22582: LD_INT 3
22584: PUSH
22585: LD_INT 4
22587: PUSH
22588: LD_INT 5
22590: PUSH
22591: LD_INT 6
22593: PUSH
22594: LD_INT 7
22596: PUSH
22597: LD_INT 8
22599: PUSH
22600: LD_INT 9
22602: PUSH
22603: LD_INT 10
22605: PUSH
22606: LD_INT 11
22608: PUSH
22609: LD_INT 12
22611: PUSH
22612: LD_INT 13
22614: PUSH
22615: LD_INT 14
22617: PUSH
22618: LD_INT 15
22620: PUSH
22621: LD_INT 16
22623: PUSH
22624: LD_INT 17
22626: PUSH
22627: LD_INT 18
22629: PUSH
22630: LD_INT 19
22632: PUSH
22633: LD_INT 20
22635: PUSH
22636: LD_INT 21
22638: PUSH
22639: LD_INT 22
22641: PUSH
22642: LD_INT 23
22644: PUSH
22645: LD_INT 24
22647: PUSH
22648: LD_INT 25
22650: PUSH
22651: LD_INT 26
22653: PUSH
22654: LD_INT 27
22656: PUSH
22657: LD_INT 28
22659: PUSH
22660: LD_INT 29
22662: PUSH
22663: LD_INT 30
22665: PUSH
22666: LD_INT 31
22668: PUSH
22669: LD_INT 32
22671: PUSH
22672: LD_INT 33
22674: PUSH
22675: LD_INT 34
22677: PUSH
22678: LD_INT 36
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 101
22720: PUSH
22721: LD_INT 102
22723: PUSH
22724: LD_INT 103
22726: PUSH
22727: LD_INT 104
22729: PUSH
22730: LD_INT 105
22732: PUSH
22733: LD_INT 106
22735: PUSH
22736: LD_INT 107
22738: PUSH
22739: LD_INT 108
22741: PUSH
22742: LD_INT 109
22744: PUSH
22745: LD_INT 110
22747: PUSH
22748: LD_INT 111
22750: PUSH
22751: LD_INT 112
22753: PUSH
22754: LD_INT 113
22756: PUSH
22757: LD_INT 114
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: ST_TO_ADDR
22780: GO 23727
22782: LD_INT 15
22784: DOUBLE
22785: EQUAL
22786: IFTRUE 22790
22788: GO 23002
22790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22791: LD_ADDR_VAR 0 1
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: LD_INT 4
22807: PUSH
22808: LD_INT 5
22810: PUSH
22811: LD_INT 6
22813: PUSH
22814: LD_INT 7
22816: PUSH
22817: LD_INT 8
22819: PUSH
22820: LD_INT 9
22822: PUSH
22823: LD_INT 10
22825: PUSH
22826: LD_INT 11
22828: PUSH
22829: LD_INT 12
22831: PUSH
22832: LD_INT 13
22834: PUSH
22835: LD_INT 14
22837: PUSH
22838: LD_INT 15
22840: PUSH
22841: LD_INT 16
22843: PUSH
22844: LD_INT 17
22846: PUSH
22847: LD_INT 18
22849: PUSH
22850: LD_INT 19
22852: PUSH
22853: LD_INT 20
22855: PUSH
22856: LD_INT 21
22858: PUSH
22859: LD_INT 22
22861: PUSH
22862: LD_INT 23
22864: PUSH
22865: LD_INT 24
22867: PUSH
22868: LD_INT 25
22870: PUSH
22871: LD_INT 26
22873: PUSH
22874: LD_INT 27
22876: PUSH
22877: LD_INT 28
22879: PUSH
22880: LD_INT 29
22882: PUSH
22883: LD_INT 30
22885: PUSH
22886: LD_INT 31
22888: PUSH
22889: LD_INT 32
22891: PUSH
22892: LD_INT 33
22894: PUSH
22895: LD_INT 34
22897: PUSH
22898: LD_INT 36
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 101
22940: PUSH
22941: LD_INT 102
22943: PUSH
22944: LD_INT 103
22946: PUSH
22947: LD_INT 104
22949: PUSH
22950: LD_INT 105
22952: PUSH
22953: LD_INT 106
22955: PUSH
22956: LD_INT 107
22958: PUSH
22959: LD_INT 108
22961: PUSH
22962: LD_INT 109
22964: PUSH
22965: LD_INT 110
22967: PUSH
22968: LD_INT 111
22970: PUSH
22971: LD_INT 112
22973: PUSH
22974: LD_INT 113
22976: PUSH
22977: LD_INT 114
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: ST_TO_ADDR
23000: GO 23727
23002: LD_INT 16
23004: DOUBLE
23005: EQUAL
23006: IFTRUE 23010
23008: GO 23134
23010: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23011: LD_ADDR_VAR 0 1
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: LD_INT 4
23021: PUSH
23022: LD_INT 5
23024: PUSH
23025: LD_INT 7
23027: PUSH
23028: LD_INT 11
23030: PUSH
23031: LD_INT 12
23033: PUSH
23034: LD_INT 15
23036: PUSH
23037: LD_INT 16
23039: PUSH
23040: LD_INT 20
23042: PUSH
23043: LD_INT 21
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 23
23051: PUSH
23052: LD_INT 25
23054: PUSH
23055: LD_INT 26
23057: PUSH
23058: LD_INT 30
23060: PUSH
23061: LD_INT 31
23063: PUSH
23064: LD_INT 32
23066: PUSH
23067: LD_INT 33
23069: PUSH
23070: LD_INT 34
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 101
23096: PUSH
23097: LD_INT 102
23099: PUSH
23100: LD_INT 103
23102: PUSH
23103: LD_INT 106
23105: PUSH
23106: LD_INT 108
23108: PUSH
23109: LD_INT 112
23111: PUSH
23112: LD_INT 113
23114: PUSH
23115: LD_INT 114
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: ST_TO_ADDR
23132: GO 23727
23134: LD_INT 17
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23354
23142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23143: LD_ADDR_VAR 0 1
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: LD_INT 2
23153: PUSH
23154: LD_INT 3
23156: PUSH
23157: LD_INT 4
23159: PUSH
23160: LD_INT 5
23162: PUSH
23163: LD_INT 6
23165: PUSH
23166: LD_INT 7
23168: PUSH
23169: LD_INT 8
23171: PUSH
23172: LD_INT 9
23174: PUSH
23175: LD_INT 10
23177: PUSH
23178: LD_INT 11
23180: PUSH
23181: LD_INT 12
23183: PUSH
23184: LD_INT 13
23186: PUSH
23187: LD_INT 14
23189: PUSH
23190: LD_INT 15
23192: PUSH
23193: LD_INT 16
23195: PUSH
23196: LD_INT 17
23198: PUSH
23199: LD_INT 18
23201: PUSH
23202: LD_INT 19
23204: PUSH
23205: LD_INT 20
23207: PUSH
23208: LD_INT 21
23210: PUSH
23211: LD_INT 22
23213: PUSH
23214: LD_INT 23
23216: PUSH
23217: LD_INT 24
23219: PUSH
23220: LD_INT 25
23222: PUSH
23223: LD_INT 26
23225: PUSH
23226: LD_INT 27
23228: PUSH
23229: LD_INT 28
23231: PUSH
23232: LD_INT 29
23234: PUSH
23235: LD_INT 30
23237: PUSH
23238: LD_INT 31
23240: PUSH
23241: LD_INT 32
23243: PUSH
23244: LD_INT 33
23246: PUSH
23247: LD_INT 34
23249: PUSH
23250: LD_INT 36
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 101
23292: PUSH
23293: LD_INT 102
23295: PUSH
23296: LD_INT 103
23298: PUSH
23299: LD_INT 104
23301: PUSH
23302: LD_INT 105
23304: PUSH
23305: LD_INT 106
23307: PUSH
23308: LD_INT 107
23310: PUSH
23311: LD_INT 108
23313: PUSH
23314: LD_INT 109
23316: PUSH
23317: LD_INT 110
23319: PUSH
23320: LD_INT 111
23322: PUSH
23323: LD_INT 112
23325: PUSH
23326: LD_INT 113
23328: PUSH
23329: LD_INT 114
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: ST_TO_ADDR
23352: GO 23727
23354: LD_INT 18
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23498
23362: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23363: LD_ADDR_VAR 0 1
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: LD_INT 4
23373: PUSH
23374: LD_INT 5
23376: PUSH
23377: LD_INT 7
23379: PUSH
23380: LD_INT 11
23382: PUSH
23383: LD_INT 12
23385: PUSH
23386: LD_INT 15
23388: PUSH
23389: LD_INT 16
23391: PUSH
23392: LD_INT 20
23394: PUSH
23395: LD_INT 21
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_INT 23
23403: PUSH
23404: LD_INT 25
23406: PUSH
23407: LD_INT 26
23409: PUSH
23410: LD_INT 30
23412: PUSH
23413: LD_INT 31
23415: PUSH
23416: LD_INT 32
23418: PUSH
23419: LD_INT 33
23421: PUSH
23422: LD_INT 34
23424: PUSH
23425: LD_INT 35
23427: PUSH
23428: LD_INT 36
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 101
23456: PUSH
23457: LD_INT 102
23459: PUSH
23460: LD_INT 103
23462: PUSH
23463: LD_INT 106
23465: PUSH
23466: LD_INT 108
23468: PUSH
23469: LD_INT 112
23471: PUSH
23472: LD_INT 113
23474: PUSH
23475: LD_INT 114
23477: PUSH
23478: LD_INT 115
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: ST_TO_ADDR
23496: GO 23727
23498: LD_INT 19
23500: DOUBLE
23501: EQUAL
23502: IFTRUE 23506
23504: GO 23726
23506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23507: LD_ADDR_VAR 0 1
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: LD_INT 3
23520: PUSH
23521: LD_INT 4
23523: PUSH
23524: LD_INT 5
23526: PUSH
23527: LD_INT 6
23529: PUSH
23530: LD_INT 7
23532: PUSH
23533: LD_INT 8
23535: PUSH
23536: LD_INT 9
23538: PUSH
23539: LD_INT 10
23541: PUSH
23542: LD_INT 11
23544: PUSH
23545: LD_INT 12
23547: PUSH
23548: LD_INT 13
23550: PUSH
23551: LD_INT 14
23553: PUSH
23554: LD_INT 15
23556: PUSH
23557: LD_INT 16
23559: PUSH
23560: LD_INT 17
23562: PUSH
23563: LD_INT 18
23565: PUSH
23566: LD_INT 19
23568: PUSH
23569: LD_INT 20
23571: PUSH
23572: LD_INT 21
23574: PUSH
23575: LD_INT 22
23577: PUSH
23578: LD_INT 23
23580: PUSH
23581: LD_INT 24
23583: PUSH
23584: LD_INT 25
23586: PUSH
23587: LD_INT 26
23589: PUSH
23590: LD_INT 27
23592: PUSH
23593: LD_INT 28
23595: PUSH
23596: LD_INT 29
23598: PUSH
23599: LD_INT 30
23601: PUSH
23602: LD_INT 31
23604: PUSH
23605: LD_INT 32
23607: PUSH
23608: LD_INT 33
23610: PUSH
23611: LD_INT 34
23613: PUSH
23614: LD_INT 35
23616: PUSH
23617: LD_INT 36
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 101
23660: PUSH
23661: LD_INT 102
23663: PUSH
23664: LD_INT 103
23666: PUSH
23667: LD_INT 104
23669: PUSH
23670: LD_INT 105
23672: PUSH
23673: LD_INT 106
23675: PUSH
23676: LD_INT 107
23678: PUSH
23679: LD_INT 108
23681: PUSH
23682: LD_INT 109
23684: PUSH
23685: LD_INT 110
23687: PUSH
23688: LD_INT 111
23690: PUSH
23691: LD_INT 112
23693: PUSH
23694: LD_INT 113
23696: PUSH
23697: LD_INT 114
23699: PUSH
23700: LD_INT 115
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: ST_TO_ADDR
23724: GO 23727
23726: POP
// end else
23727: GO 23946
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23729: LD_ADDR_VAR 0 1
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 3
23742: PUSH
23743: LD_INT 4
23745: PUSH
23746: LD_INT 5
23748: PUSH
23749: LD_INT 6
23751: PUSH
23752: LD_INT 7
23754: PUSH
23755: LD_INT 8
23757: PUSH
23758: LD_INT 9
23760: PUSH
23761: LD_INT 10
23763: PUSH
23764: LD_INT 11
23766: PUSH
23767: LD_INT 12
23769: PUSH
23770: LD_INT 13
23772: PUSH
23773: LD_INT 14
23775: PUSH
23776: LD_INT 15
23778: PUSH
23779: LD_INT 16
23781: PUSH
23782: LD_INT 17
23784: PUSH
23785: LD_INT 18
23787: PUSH
23788: LD_INT 19
23790: PUSH
23791: LD_INT 20
23793: PUSH
23794: LD_INT 21
23796: PUSH
23797: LD_INT 22
23799: PUSH
23800: LD_INT 23
23802: PUSH
23803: LD_INT 24
23805: PUSH
23806: LD_INT 25
23808: PUSH
23809: LD_INT 26
23811: PUSH
23812: LD_INT 27
23814: PUSH
23815: LD_INT 28
23817: PUSH
23818: LD_INT 29
23820: PUSH
23821: LD_INT 30
23823: PUSH
23824: LD_INT 31
23826: PUSH
23827: LD_INT 32
23829: PUSH
23830: LD_INT 33
23832: PUSH
23833: LD_INT 34
23835: PUSH
23836: LD_INT 35
23838: PUSH
23839: LD_INT 36
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 101
23882: PUSH
23883: LD_INT 102
23885: PUSH
23886: LD_INT 103
23888: PUSH
23889: LD_INT 104
23891: PUSH
23892: LD_INT 105
23894: PUSH
23895: LD_INT 106
23897: PUSH
23898: LD_INT 107
23900: PUSH
23901: LD_INT 108
23903: PUSH
23904: LD_INT 109
23906: PUSH
23907: LD_INT 110
23909: PUSH
23910: LD_INT 111
23912: PUSH
23913: LD_INT 112
23915: PUSH
23916: LD_INT 113
23918: PUSH
23919: LD_INT 114
23921: PUSH
23922: LD_INT 115
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: ST_TO_ADDR
// if result then
23946: LD_VAR 0 1
23950: IFFALSE 24239
// begin normal :=  ;
23952: LD_ADDR_VAR 0 3
23956: PUSH
23957: LD_STRING 
23959: ST_TO_ADDR
// hardcore :=  ;
23960: LD_ADDR_VAR 0 4
23964: PUSH
23965: LD_STRING 
23967: ST_TO_ADDR
// for i = 1 to normalCounter do
23968: LD_ADDR_VAR 0 5
23972: PUSH
23973: DOUBLE
23974: LD_INT 1
23976: DEC
23977: ST_TO_ADDR
23978: LD_EXP 65
23982: PUSH
23983: FOR_TO
23984: IFFALSE 24085
// begin tmp := 0 ;
23986: LD_ADDR_VAR 0 2
23990: PUSH
23991: LD_STRING 0
23993: ST_TO_ADDR
// if result [ 1 ] then
23994: LD_VAR 0 1
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: IFFALSE 24067
// if result [ 1 ] [ 1 ] = i then
24004: LD_VAR 0 1
24008: PUSH
24009: LD_INT 1
24011: ARRAY
24012: PUSH
24013: LD_INT 1
24015: ARRAY
24016: PUSH
24017: LD_VAR 0 5
24021: EQUAL
24022: IFFALSE 24067
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24024: LD_ADDR_VAR 0 1
24028: PUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: LD_INT 1
24036: PPUSH
24037: LD_VAR 0 1
24041: PUSH
24042: LD_INT 1
24044: ARRAY
24045: PPUSH
24046: LD_INT 1
24048: PPUSH
24049: CALL_OW 3
24053: PPUSH
24054: CALL_OW 1
24058: ST_TO_ADDR
// tmp := 1 ;
24059: LD_ADDR_VAR 0 2
24063: PUSH
24064: LD_STRING 1
24066: ST_TO_ADDR
// end ; normal := normal & tmp ;
24067: LD_ADDR_VAR 0 3
24071: PUSH
24072: LD_VAR 0 3
24076: PUSH
24077: LD_VAR 0 2
24081: STR
24082: ST_TO_ADDR
// end ;
24083: GO 23983
24085: POP
24086: POP
// for i = 1 to hardcoreCounter do
24087: LD_ADDR_VAR 0 5
24091: PUSH
24092: DOUBLE
24093: LD_INT 1
24095: DEC
24096: ST_TO_ADDR
24097: LD_EXP 66
24101: PUSH
24102: FOR_TO
24103: IFFALSE 24208
// begin tmp := 0 ;
24105: LD_ADDR_VAR 0 2
24109: PUSH
24110: LD_STRING 0
24112: ST_TO_ADDR
// if result [ 2 ] then
24113: LD_VAR 0 1
24117: PUSH
24118: LD_INT 2
24120: ARRAY
24121: IFFALSE 24190
// if result [ 2 ] [ 1 ] = 100 + i then
24123: LD_VAR 0 1
24127: PUSH
24128: LD_INT 2
24130: ARRAY
24131: PUSH
24132: LD_INT 1
24134: ARRAY
24135: PUSH
24136: LD_INT 100
24138: PUSH
24139: LD_VAR 0 5
24143: PLUS
24144: EQUAL
24145: IFFALSE 24190
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24147: LD_ADDR_VAR 0 1
24151: PUSH
24152: LD_VAR 0 1
24156: PPUSH
24157: LD_INT 2
24159: PPUSH
24160: LD_VAR 0 1
24164: PUSH
24165: LD_INT 2
24167: ARRAY
24168: PPUSH
24169: LD_INT 1
24171: PPUSH
24172: CALL_OW 3
24176: PPUSH
24177: CALL_OW 1
24181: ST_TO_ADDR
// tmp := 1 ;
24182: LD_ADDR_VAR 0 2
24186: PUSH
24187: LD_STRING 1
24189: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24190: LD_ADDR_VAR 0 4
24194: PUSH
24195: LD_VAR 0 4
24199: PUSH
24200: LD_VAR 0 2
24204: STR
24205: ST_TO_ADDR
// end ;
24206: GO 24102
24208: POP
24209: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24210: LD_STRING getStreamItemsFromMission("
24212: PUSH
24213: LD_VAR 0 3
24217: STR
24218: PUSH
24219: LD_STRING ","
24221: STR
24222: PUSH
24223: LD_VAR 0 4
24227: STR
24228: PUSH
24229: LD_STRING ")
24231: STR
24232: PPUSH
24233: CALL_OW 559
// end else
24237: GO 24246
// ToLua ( getStreamItemsFromMission("","") ) ;
24239: LD_STRING getStreamItemsFromMission("","")
24241: PPUSH
24242: CALL_OW 559
// end ;
24246: LD_VAR 0 1
24250: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24251: LD_EXP 64
24255: PUSH
24256: LD_EXP 69
24260: AND
24261: IFFALSE 24385
24263: GO 24265
24265: DISABLE
24266: LD_INT 0
24268: PPUSH
24269: PPUSH
// begin enable ;
24270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_INT 22
24278: PUSH
24279: LD_OWVAR 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: LD_INT 34
24293: PUSH
24294: LD_INT 7
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 34
24303: PUSH
24304: LD_INT 45
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 34
24313: PUSH
24314: LD_INT 28
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 34
24323: PUSH
24324: LD_INT 47
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PPUSH
24342: CALL_OW 69
24346: ST_TO_ADDR
// if not tmp then
24347: LD_VAR 0 2
24351: NOT
24352: IFFALSE 24356
// exit ;
24354: GO 24385
// for i in tmp do
24356: LD_ADDR_VAR 0 1
24360: PUSH
24361: LD_VAR 0 2
24365: PUSH
24366: FOR_IN
24367: IFFALSE 24383
// begin SetLives ( i , 0 ) ;
24369: LD_VAR 0 1
24373: PPUSH
24374: LD_INT 0
24376: PPUSH
24377: CALL_OW 234
// end ;
24381: GO 24366
24383: POP
24384: POP
// end ;
24385: PPOPN 2
24387: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24388: LD_EXP 64
24392: PUSH
24393: LD_EXP 70
24397: AND
24398: IFFALSE 24482
24400: GO 24402
24402: DISABLE
24403: LD_INT 0
24405: PPUSH
24406: PPUSH
// begin enable ;
24407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24408: LD_ADDR_VAR 0 2
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_OWVAR 2
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 32
24427: PUSH
24428: LD_INT 3
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PPUSH
24439: CALL_OW 69
24443: ST_TO_ADDR
// if not tmp then
24444: LD_VAR 0 2
24448: NOT
24449: IFFALSE 24453
// exit ;
24451: GO 24482
// for i in tmp do
24453: LD_ADDR_VAR 0 1
24457: PUSH
24458: LD_VAR 0 2
24462: PUSH
24463: FOR_IN
24464: IFFALSE 24480
// begin SetLives ( i , 0 ) ;
24466: LD_VAR 0 1
24470: PPUSH
24471: LD_INT 0
24473: PPUSH
24474: CALL_OW 234
// end ;
24478: GO 24463
24480: POP
24481: POP
// end ;
24482: PPOPN 2
24484: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24485: LD_EXP 64
24489: PUSH
24490: LD_EXP 67
24494: AND
24495: IFFALSE 24588
24497: GO 24499
24499: DISABLE
24500: LD_INT 0
24502: PPUSH
// begin enable ;
24503: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24504: LD_ADDR_VAR 0 1
24508: PUSH
24509: LD_INT 22
24511: PUSH
24512: LD_OWVAR 2
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 2
24523: PUSH
24524: LD_INT 25
24526: PUSH
24527: LD_INT 5
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 25
24536: PUSH
24537: LD_INT 9
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 25
24546: PUSH
24547: LD_INT 8
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PPUSH
24564: CALL_OW 69
24568: PUSH
24569: FOR_IN
24570: IFFALSE 24586
// begin SetClass ( i , 1 ) ;
24572: LD_VAR 0 1
24576: PPUSH
24577: LD_INT 1
24579: PPUSH
24580: CALL_OW 336
// end ;
24584: GO 24569
24586: POP
24587: POP
// end ;
24588: PPOPN 1
24590: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24591: LD_EXP 64
24595: PUSH
24596: LD_EXP 68
24600: AND
24601: PUSH
24602: LD_OWVAR 65
24606: PUSH
24607: LD_INT 7
24609: LESS
24610: AND
24611: IFFALSE 24625
24613: GO 24615
24615: DISABLE
// begin enable ;
24616: ENABLE
// game_speed := 7 ;
24617: LD_ADDR_OWVAR 65
24621: PUSH
24622: LD_INT 7
24624: ST_TO_ADDR
// end ;
24625: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24626: LD_EXP 64
24630: PUSH
24631: LD_EXP 71
24635: AND
24636: IFFALSE 24838
24638: GO 24640
24640: DISABLE
24641: LD_INT 0
24643: PPUSH
24644: PPUSH
24645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24646: LD_ADDR_VAR 0 3
24650: PUSH
24651: LD_INT 81
24653: PUSH
24654: LD_OWVAR 2
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 21
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 69
24681: ST_TO_ADDR
// if not tmp then
24682: LD_VAR 0 3
24686: NOT
24687: IFFALSE 24691
// exit ;
24689: GO 24838
// if tmp > 5 then
24691: LD_VAR 0 3
24695: PUSH
24696: LD_INT 5
24698: GREATER
24699: IFFALSE 24711
// k := 5 else
24701: LD_ADDR_VAR 0 2
24705: PUSH
24706: LD_INT 5
24708: ST_TO_ADDR
24709: GO 24721
// k := tmp ;
24711: LD_ADDR_VAR 0 2
24715: PUSH
24716: LD_VAR 0 3
24720: ST_TO_ADDR
// for i := 1 to k do
24721: LD_ADDR_VAR 0 1
24725: PUSH
24726: DOUBLE
24727: LD_INT 1
24729: DEC
24730: ST_TO_ADDR
24731: LD_VAR 0 2
24735: PUSH
24736: FOR_TO
24737: IFFALSE 24836
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24739: LD_VAR 0 3
24743: PUSH
24744: LD_VAR 0 1
24748: ARRAY
24749: PPUSH
24750: LD_VAR 0 1
24754: PUSH
24755: LD_INT 4
24757: MOD
24758: PUSH
24759: LD_INT 1
24761: PLUS
24762: PPUSH
24763: CALL_OW 259
24767: PUSH
24768: LD_INT 10
24770: LESS
24771: IFFALSE 24834
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24773: LD_VAR 0 3
24777: PUSH
24778: LD_VAR 0 1
24782: ARRAY
24783: PPUSH
24784: LD_VAR 0 1
24788: PUSH
24789: LD_INT 4
24791: MOD
24792: PUSH
24793: LD_INT 1
24795: PLUS
24796: PPUSH
24797: LD_VAR 0 3
24801: PUSH
24802: LD_VAR 0 1
24806: ARRAY
24807: PPUSH
24808: LD_VAR 0 1
24812: PUSH
24813: LD_INT 4
24815: MOD
24816: PUSH
24817: LD_INT 1
24819: PLUS
24820: PPUSH
24821: CALL_OW 259
24825: PUSH
24826: LD_INT 1
24828: PLUS
24829: PPUSH
24830: CALL_OW 237
24834: GO 24736
24836: POP
24837: POP
// end ;
24838: PPOPN 3
24840: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24841: LD_EXP 64
24845: PUSH
24846: LD_EXP 72
24850: AND
24851: IFFALSE 24871
24853: GO 24855
24855: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24856: LD_INT 4
24858: PPUSH
24859: LD_OWVAR 2
24863: PPUSH
24864: LD_INT 0
24866: PPUSH
24867: CALL_OW 324
24871: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24872: LD_EXP 64
24876: PUSH
24877: LD_EXP 101
24881: AND
24882: IFFALSE 24902
24884: GO 24886
24886: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24887: LD_INT 19
24889: PPUSH
24890: LD_OWVAR 2
24894: PPUSH
24895: LD_INT 0
24897: PPUSH
24898: CALL_OW 324
24902: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24903: LD_EXP 64
24907: PUSH
24908: LD_EXP 73
24912: AND
24913: IFFALSE 25015
24915: GO 24917
24917: DISABLE
24918: LD_INT 0
24920: PPUSH
24921: PPUSH
// begin enable ;
24922: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24923: LD_ADDR_VAR 0 2
24927: PUSH
24928: LD_INT 22
24930: PUSH
24931: LD_OWVAR 2
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: LD_INT 34
24945: PUSH
24946: LD_INT 11
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 34
24955: PUSH
24956: LD_INT 30
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: LIST
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PPUSH
24972: CALL_OW 69
24976: ST_TO_ADDR
// if not tmp then
24977: LD_VAR 0 2
24981: NOT
24982: IFFALSE 24986
// exit ;
24984: GO 25015
// for i in tmp do
24986: LD_ADDR_VAR 0 1
24990: PUSH
24991: LD_VAR 0 2
24995: PUSH
24996: FOR_IN
24997: IFFALSE 25013
// begin SetLives ( i , 0 ) ;
24999: LD_VAR 0 1
25003: PPUSH
25004: LD_INT 0
25006: PPUSH
25007: CALL_OW 234
// end ;
25011: GO 24996
25013: POP
25014: POP
// end ;
25015: PPOPN 2
25017: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25018: LD_EXP 64
25022: PUSH
25023: LD_EXP 74
25027: AND
25028: IFFALSE 25048
25030: GO 25032
25032: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25033: LD_INT 32
25035: PPUSH
25036: LD_OWVAR 2
25040: PPUSH
25041: LD_INT 0
25043: PPUSH
25044: CALL_OW 324
25048: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25049: LD_EXP 64
25053: PUSH
25054: LD_EXP 75
25058: AND
25059: IFFALSE 25240
25061: GO 25063
25063: DISABLE
25064: LD_INT 0
25066: PPUSH
25067: PPUSH
25068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25069: LD_ADDR_VAR 0 2
25073: PUSH
25074: LD_INT 22
25076: PUSH
25077: LD_OWVAR 2
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 33
25088: PUSH
25089: LD_INT 3
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PPUSH
25100: CALL_OW 69
25104: ST_TO_ADDR
// if not tmp then
25105: LD_VAR 0 2
25109: NOT
25110: IFFALSE 25114
// exit ;
25112: GO 25240
// side := 0 ;
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_INT 0
25121: ST_TO_ADDR
// for i := 1 to 8 do
25122: LD_ADDR_VAR 0 1
25126: PUSH
25127: DOUBLE
25128: LD_INT 1
25130: DEC
25131: ST_TO_ADDR
25132: LD_INT 8
25134: PUSH
25135: FOR_TO
25136: IFFALSE 25184
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25138: LD_OWVAR 2
25142: PUSH
25143: LD_VAR 0 1
25147: NONEQUAL
25148: PUSH
25149: LD_OWVAR 2
25153: PPUSH
25154: LD_VAR 0 1
25158: PPUSH
25159: CALL_OW 81
25163: PUSH
25164: LD_INT 2
25166: EQUAL
25167: AND
25168: IFFALSE 25182
// begin side := i ;
25170: LD_ADDR_VAR 0 3
25174: PUSH
25175: LD_VAR 0 1
25179: ST_TO_ADDR
// break ;
25180: GO 25184
// end ;
25182: GO 25135
25184: POP
25185: POP
// if not side then
25186: LD_VAR 0 3
25190: NOT
25191: IFFALSE 25195
// exit ;
25193: GO 25240
// for i := 1 to tmp do
25195: LD_ADDR_VAR 0 1
25199: PUSH
25200: DOUBLE
25201: LD_INT 1
25203: DEC
25204: ST_TO_ADDR
25205: LD_VAR 0 2
25209: PUSH
25210: FOR_TO
25211: IFFALSE 25238
// if Prob ( 60 ) then
25213: LD_INT 60
25215: PPUSH
25216: CALL_OW 13
25220: IFFALSE 25236
// SetSide ( i , side ) ;
25222: LD_VAR 0 1
25226: PPUSH
25227: LD_VAR 0 3
25231: PPUSH
25232: CALL_OW 235
25236: GO 25210
25238: POP
25239: POP
// end ;
25240: PPOPN 3
25242: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25243: LD_EXP 64
25247: PUSH
25248: LD_EXP 77
25252: AND
25253: IFFALSE 25372
25255: GO 25257
25257: DISABLE
25258: LD_INT 0
25260: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25261: LD_ADDR_VAR 0 1
25265: PUSH
25266: LD_INT 22
25268: PUSH
25269: LD_OWVAR 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 21
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 3
25290: PUSH
25291: LD_INT 23
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: PPUSH
25310: CALL_OW 69
25314: PUSH
25315: FOR_IN
25316: IFFALSE 25370
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25318: LD_VAR 0 1
25322: PPUSH
25323: CALL_OW 257
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 3
25336: PUSH
25337: LD_INT 4
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: IN
25346: IFFALSE 25368
// SetClass ( un , rand ( 1 , 4 ) ) ;
25348: LD_VAR 0 1
25352: PPUSH
25353: LD_INT 1
25355: PPUSH
25356: LD_INT 4
25358: PPUSH
25359: CALL_OW 12
25363: PPUSH
25364: CALL_OW 336
25368: GO 25315
25370: POP
25371: POP
// end ;
25372: PPOPN 1
25374: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25375: LD_EXP 64
25379: PUSH
25380: LD_EXP 76
25384: AND
25385: IFFALSE 25464
25387: GO 25389
25389: DISABLE
25390: LD_INT 0
25392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25393: LD_ADDR_VAR 0 1
25397: PUSH
25398: LD_INT 22
25400: PUSH
25401: LD_OWVAR 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 21
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PPUSH
25424: CALL_OW 69
25428: ST_TO_ADDR
// if not tmp then
25429: LD_VAR 0 1
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25438: LD_VAR 0 1
25442: PUSH
25443: LD_INT 1
25445: PPUSH
25446: LD_VAR 0 1
25450: PPUSH
25451: CALL_OW 12
25455: ARRAY
25456: PPUSH
25457: LD_INT 100
25459: PPUSH
25460: CALL_OW 234
// end ;
25464: PPOPN 1
25466: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25467: LD_EXP 64
25471: PUSH
25472: LD_EXP 78
25476: AND
25477: IFFALSE 25575
25479: GO 25481
25481: DISABLE
25482: LD_INT 0
25484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25485: LD_ADDR_VAR 0 1
25489: PUSH
25490: LD_INT 22
25492: PUSH
25493: LD_OWVAR 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 21
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PPUSH
25516: CALL_OW 69
25520: ST_TO_ADDR
// if not tmp then
25521: LD_VAR 0 1
25525: NOT
25526: IFFALSE 25530
// exit ;
25528: GO 25575
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25530: LD_VAR 0 1
25534: PUSH
25535: LD_INT 1
25537: PPUSH
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 12
25547: ARRAY
25548: PPUSH
25549: LD_INT 1
25551: PPUSH
25552: LD_INT 4
25554: PPUSH
25555: CALL_OW 12
25559: PPUSH
25560: LD_INT 3000
25562: PPUSH
25563: LD_INT 9000
25565: PPUSH
25566: CALL_OW 12
25570: PPUSH
25571: CALL_OW 492
// end ;
25575: PPOPN 1
25577: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25578: LD_EXP 64
25582: PUSH
25583: LD_EXP 79
25587: AND
25588: IFFALSE 25608
25590: GO 25592
25592: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25593: LD_INT 1
25595: PPUSH
25596: LD_OWVAR 2
25600: PPUSH
25601: LD_INT 0
25603: PPUSH
25604: CALL_OW 324
25608: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25609: LD_EXP 64
25613: PUSH
25614: LD_EXP 80
25618: AND
25619: IFFALSE 25702
25621: GO 25623
25623: DISABLE
25624: LD_INT 0
25626: PPUSH
25627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25628: LD_ADDR_VAR 0 2
25632: PUSH
25633: LD_INT 22
25635: PUSH
25636: LD_OWVAR 2
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 21
25647: PUSH
25648: LD_INT 3
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PPUSH
25659: CALL_OW 69
25663: ST_TO_ADDR
// if not tmp then
25664: LD_VAR 0 2
25668: NOT
25669: IFFALSE 25673
// exit ;
25671: GO 25702
// for i in tmp do
25673: LD_ADDR_VAR 0 1
25677: PUSH
25678: LD_VAR 0 2
25682: PUSH
25683: FOR_IN
25684: IFFALSE 25700
// SetBLevel ( i , 10 ) ;
25686: LD_VAR 0 1
25690: PPUSH
25691: LD_INT 10
25693: PPUSH
25694: CALL_OW 241
25698: GO 25683
25700: POP
25701: POP
// end ;
25702: PPOPN 2
25704: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25705: LD_EXP 64
25709: PUSH
25710: LD_EXP 81
25714: AND
25715: IFFALSE 25826
25717: GO 25719
25719: DISABLE
25720: LD_INT 0
25722: PPUSH
25723: PPUSH
25724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25725: LD_ADDR_VAR 0 3
25729: PUSH
25730: LD_INT 22
25732: PUSH
25733: LD_OWVAR 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 25
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PPUSH
25756: CALL_OW 69
25760: ST_TO_ADDR
// if not tmp then
25761: LD_VAR 0 3
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 25826
// un := tmp [ rand ( 1 , tmp ) ] ;
25770: LD_ADDR_VAR 0 2
25774: PUSH
25775: LD_VAR 0 3
25779: PUSH
25780: LD_INT 1
25782: PPUSH
25783: LD_VAR 0 3
25787: PPUSH
25788: CALL_OW 12
25792: ARRAY
25793: ST_TO_ADDR
// if Crawls ( un ) then
25794: LD_VAR 0 2
25798: PPUSH
25799: CALL_OW 318
25803: IFFALSE 25814
// ComWalk ( un ) ;
25805: LD_VAR 0 2
25809: PPUSH
25810: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25814: LD_VAR 0 2
25818: PPUSH
25819: LD_INT 5
25821: PPUSH
25822: CALL_OW 336
// end ;
25826: PPOPN 3
25828: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25829: LD_EXP 64
25833: PUSH
25834: LD_EXP 82
25838: AND
25839: PUSH
25840: LD_OWVAR 67
25844: PUSH
25845: LD_INT 3
25847: LESS
25848: AND
25849: IFFALSE 25868
25851: GO 25853
25853: DISABLE
// Difficulty := Difficulty + 1 ;
25854: LD_ADDR_OWVAR 67
25858: PUSH
25859: LD_OWVAR 67
25863: PUSH
25864: LD_INT 1
25866: PLUS
25867: ST_TO_ADDR
25868: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25869: LD_EXP 64
25873: PUSH
25874: LD_EXP 83
25878: AND
25879: IFFALSE 25982
25881: GO 25883
25883: DISABLE
25884: LD_INT 0
25886: PPUSH
// begin for i := 1 to 5 do
25887: LD_ADDR_VAR 0 1
25891: PUSH
25892: DOUBLE
25893: LD_INT 1
25895: DEC
25896: ST_TO_ADDR
25897: LD_INT 5
25899: PUSH
25900: FOR_TO
25901: IFFALSE 25980
// begin uc_nation := nation_nature ;
25903: LD_ADDR_OWVAR 21
25907: PUSH
25908: LD_INT 0
25910: ST_TO_ADDR
// uc_side := 0 ;
25911: LD_ADDR_OWVAR 20
25915: PUSH
25916: LD_INT 0
25918: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25919: LD_ADDR_OWVAR 29
25923: PUSH
25924: LD_INT 12
25926: PUSH
25927: LD_INT 12
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: ST_TO_ADDR
// hc_agressivity := 20 ;
25934: LD_ADDR_OWVAR 35
25938: PUSH
25939: LD_INT 20
25941: ST_TO_ADDR
// hc_class := class_tiger ;
25942: LD_ADDR_OWVAR 28
25946: PUSH
25947: LD_INT 14
25949: ST_TO_ADDR
// hc_gallery :=  ;
25950: LD_ADDR_OWVAR 33
25954: PUSH
25955: LD_STRING 
25957: ST_TO_ADDR
// hc_name :=  ;
25958: LD_ADDR_OWVAR 26
25962: PUSH
25963: LD_STRING 
25965: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25966: CALL_OW 44
25970: PPUSH
25971: LD_INT 0
25973: PPUSH
25974: CALL_OW 51
// end ;
25978: GO 25900
25980: POP
25981: POP
// end ;
25982: PPOPN 1
25984: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25985: LD_EXP 64
25989: PUSH
25990: LD_EXP 84
25994: AND
25995: IFFALSE 26004
25997: GO 25999
25999: DISABLE
// StreamSibBomb ;
26000: CALL 26005 0 0
26004: END
// export function StreamSibBomb ; var i , x , y ; begin
26005: LD_INT 0
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
// result := false ;
26011: LD_ADDR_VAR 0 1
26015: PUSH
26016: LD_INT 0
26018: ST_TO_ADDR
// for i := 1 to 16 do
26019: LD_ADDR_VAR 0 2
26023: PUSH
26024: DOUBLE
26025: LD_INT 1
26027: DEC
26028: ST_TO_ADDR
26029: LD_INT 16
26031: PUSH
26032: FOR_TO
26033: IFFALSE 26232
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_INT 10
26042: PUSH
26043: LD_INT 20
26045: PUSH
26046: LD_INT 30
26048: PUSH
26049: LD_INT 40
26051: PUSH
26052: LD_INT 50
26054: PUSH
26055: LD_INT 60
26057: PUSH
26058: LD_INT 70
26060: PUSH
26061: LD_INT 80
26063: PUSH
26064: LD_INT 90
26066: PUSH
26067: LD_INT 100
26069: PUSH
26070: LD_INT 110
26072: PUSH
26073: LD_INT 120
26075: PUSH
26076: LD_INT 130
26078: PUSH
26079: LD_INT 140
26081: PUSH
26082: LD_INT 150
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: PPUSH
26105: LD_INT 15
26107: PPUSH
26108: CALL_OW 12
26112: ARRAY
26113: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26114: LD_ADDR_VAR 0 4
26118: PUSH
26119: LD_INT 10
26121: PUSH
26122: LD_INT 20
26124: PUSH
26125: LD_INT 30
26127: PUSH
26128: LD_INT 40
26130: PUSH
26131: LD_INT 50
26133: PUSH
26134: LD_INT 60
26136: PUSH
26137: LD_INT 70
26139: PUSH
26140: LD_INT 80
26142: PUSH
26143: LD_INT 90
26145: PUSH
26146: LD_INT 100
26148: PUSH
26149: LD_INT 110
26151: PUSH
26152: LD_INT 120
26154: PUSH
26155: LD_INT 130
26157: PUSH
26158: LD_INT 140
26160: PUSH
26161: LD_INT 150
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: PPUSH
26184: LD_INT 15
26186: PPUSH
26187: CALL_OW 12
26191: ARRAY
26192: ST_TO_ADDR
// if ValidHex ( x , y ) then
26193: LD_VAR 0 3
26197: PPUSH
26198: LD_VAR 0 4
26202: PPUSH
26203: CALL_OW 488
26207: IFFALSE 26230
// begin result := [ x , y ] ;
26209: LD_ADDR_VAR 0 1
26213: PUSH
26214: LD_VAR 0 3
26218: PUSH
26219: LD_VAR 0 4
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: ST_TO_ADDR
// break ;
26228: GO 26232
// end ; end ;
26230: GO 26032
26232: POP
26233: POP
// if result then
26234: LD_VAR 0 1
26238: IFFALSE 26298
// begin ToLua ( playSibBomb() ) ;
26240: LD_STRING playSibBomb()
26242: PPUSH
26243: CALL_OW 559
// wait ( 0 0$14 ) ;
26247: LD_INT 490
26249: PPUSH
26250: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26254: LD_VAR 0 1
26258: PUSH
26259: LD_INT 1
26261: ARRAY
26262: PPUSH
26263: LD_VAR 0 1
26267: PUSH
26268: LD_INT 2
26270: ARRAY
26271: PPUSH
26272: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26276: LD_VAR 0 1
26280: PUSH
26281: LD_INT 1
26283: ARRAY
26284: PPUSH
26285: LD_VAR 0 1
26289: PUSH
26290: LD_INT 2
26292: ARRAY
26293: PPUSH
26294: CALL_OW 429
// end ; end ;
26298: LD_VAR 0 1
26302: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26303: LD_EXP 64
26307: PUSH
26308: LD_EXP 86
26312: AND
26313: IFFALSE 26325
26315: GO 26317
26317: DISABLE
// YouLost (  ) ;
26318: LD_STRING 
26320: PPUSH
26321: CALL_OW 104
26325: END
// every 0 0$1 trigger StreamModeActive and sFog do
26326: LD_EXP 64
26330: PUSH
26331: LD_EXP 85
26335: AND
26336: IFFALSE 26350
26338: GO 26340
26340: DISABLE
// FogOff ( your_side ) ;
26341: LD_OWVAR 2
26345: PPUSH
26346: CALL_OW 344
26350: END
// every 0 0$1 trigger StreamModeActive and sSun do
26351: LD_EXP 64
26355: PUSH
26356: LD_EXP 87
26360: AND
26361: IFFALSE 26389
26363: GO 26365
26365: DISABLE
// begin solar_recharge_percent := 0 ;
26366: LD_ADDR_OWVAR 79
26370: PUSH
26371: LD_INT 0
26373: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26374: LD_INT 10500
26376: PPUSH
26377: CALL_OW 67
// solar_recharge_percent := 100 ;
26381: LD_ADDR_OWVAR 79
26385: PUSH
26386: LD_INT 100
26388: ST_TO_ADDR
// end ;
26389: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26390: LD_EXP 64
26394: PUSH
26395: LD_EXP 88
26399: AND
26400: IFFALSE 26639
26402: GO 26404
26404: DISABLE
26405: LD_INT 0
26407: PPUSH
26408: PPUSH
26409: PPUSH
// begin tmp := [ ] ;
26410: LD_ADDR_VAR 0 3
26414: PUSH
26415: EMPTY
26416: ST_TO_ADDR
// for i := 1 to 6 do
26417: LD_ADDR_VAR 0 1
26421: PUSH
26422: DOUBLE
26423: LD_INT 1
26425: DEC
26426: ST_TO_ADDR
26427: LD_INT 6
26429: PUSH
26430: FOR_TO
26431: IFFALSE 26536
// begin uc_nation := nation_nature ;
26433: LD_ADDR_OWVAR 21
26437: PUSH
26438: LD_INT 0
26440: ST_TO_ADDR
// uc_side := 0 ;
26441: LD_ADDR_OWVAR 20
26445: PUSH
26446: LD_INT 0
26448: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26449: LD_ADDR_OWVAR 29
26453: PUSH
26454: LD_INT 12
26456: PUSH
26457: LD_INT 12
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: ST_TO_ADDR
// hc_agressivity := 20 ;
26464: LD_ADDR_OWVAR 35
26468: PUSH
26469: LD_INT 20
26471: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26472: LD_ADDR_OWVAR 28
26476: PUSH
26477: LD_INT 17
26479: ST_TO_ADDR
// hc_gallery :=  ;
26480: LD_ADDR_OWVAR 33
26484: PUSH
26485: LD_STRING 
26487: ST_TO_ADDR
// hc_name :=  ;
26488: LD_ADDR_OWVAR 26
26492: PUSH
26493: LD_STRING 
26495: ST_TO_ADDR
// un := CreateHuman ;
26496: LD_ADDR_VAR 0 2
26500: PUSH
26501: CALL_OW 44
26505: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26506: LD_VAR 0 2
26510: PPUSH
26511: LD_INT 1
26513: PPUSH
26514: CALL_OW 51
// tmp := tmp ^ un ;
26518: LD_ADDR_VAR 0 3
26522: PUSH
26523: LD_VAR 0 3
26527: PUSH
26528: LD_VAR 0 2
26532: ADD
26533: ST_TO_ADDR
// end ;
26534: GO 26430
26536: POP
26537: POP
// repeat wait ( 0 0$1 ) ;
26538: LD_INT 35
26540: PPUSH
26541: CALL_OW 67
// for un in tmp do
26545: LD_ADDR_VAR 0 2
26549: PUSH
26550: LD_VAR 0 3
26554: PUSH
26555: FOR_IN
26556: IFFALSE 26630
// begin if IsDead ( un ) then
26558: LD_VAR 0 2
26562: PPUSH
26563: CALL_OW 301
26567: IFFALSE 26587
// begin tmp := tmp diff un ;
26569: LD_ADDR_VAR 0 3
26573: PUSH
26574: LD_VAR 0 3
26578: PUSH
26579: LD_VAR 0 2
26583: DIFF
26584: ST_TO_ADDR
// continue ;
26585: GO 26555
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26587: LD_VAR 0 2
26591: PPUSH
26592: LD_INT 3
26594: PUSH
26595: LD_INT 22
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PPUSH
26609: CALL_OW 69
26613: PPUSH
26614: LD_VAR 0 2
26618: PPUSH
26619: CALL_OW 74
26623: PPUSH
26624: CALL_OW 115
// end ;
26628: GO 26555
26630: POP
26631: POP
// until not tmp ;
26632: LD_VAR 0 3
26636: NOT
26637: IFFALSE 26538
// end ;
26639: PPOPN 3
26641: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26642: LD_EXP 64
26646: PUSH
26647: LD_EXP 89
26651: AND
26652: IFFALSE 26706
26654: GO 26656
26656: DISABLE
// begin ToLua ( displayTroll(); ) ;
26657: LD_STRING displayTroll();
26659: PPUSH
26660: CALL_OW 559
// wait ( 3 3$00 ) ;
26664: LD_INT 6300
26666: PPUSH
26667: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26671: LD_STRING hideTroll();
26673: PPUSH
26674: CALL_OW 559
// wait ( 1 1$00 ) ;
26678: LD_INT 2100
26680: PPUSH
26681: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26685: LD_STRING displayTroll();
26687: PPUSH
26688: CALL_OW 559
// wait ( 1 1$00 ) ;
26692: LD_INT 2100
26694: PPUSH
26695: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26699: LD_STRING hideTroll();
26701: PPUSH
26702: CALL_OW 559
// end ;
26706: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26707: LD_EXP 64
26711: PUSH
26712: LD_EXP 90
26716: AND
26717: IFFALSE 26780
26719: GO 26721
26721: DISABLE
26722: LD_INT 0
26724: PPUSH
// begin p := 0 ;
26725: LD_ADDR_VAR 0 1
26729: PUSH
26730: LD_INT 0
26732: ST_TO_ADDR
// repeat game_speed := 1 ;
26733: LD_ADDR_OWVAR 65
26737: PUSH
26738: LD_INT 1
26740: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26741: LD_INT 35
26743: PPUSH
26744: CALL_OW 67
// p := p + 1 ;
26748: LD_ADDR_VAR 0 1
26752: PUSH
26753: LD_VAR 0 1
26757: PUSH
26758: LD_INT 1
26760: PLUS
26761: ST_TO_ADDR
// until p >= 60 ;
26762: LD_VAR 0 1
26766: PUSH
26767: LD_INT 60
26769: GREATEREQUAL
26770: IFFALSE 26733
// game_speed := 4 ;
26772: LD_ADDR_OWVAR 65
26776: PUSH
26777: LD_INT 4
26779: ST_TO_ADDR
// end ;
26780: PPOPN 1
26782: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26783: LD_EXP 64
26787: PUSH
26788: LD_EXP 91
26792: AND
26793: IFFALSE 26939
26795: GO 26797
26797: DISABLE
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26802: LD_ADDR_VAR 0 1
26806: PUSH
26807: LD_INT 22
26809: PUSH
26810: LD_OWVAR 2
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: LD_INT 30
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 30
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PPUSH
26851: CALL_OW 69
26855: ST_TO_ADDR
// if not depot then
26856: LD_VAR 0 1
26860: NOT
26861: IFFALSE 26865
// exit ;
26863: GO 26939
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26865: LD_ADDR_VAR 0 2
26869: PUSH
26870: LD_VAR 0 1
26874: PUSH
26875: LD_INT 1
26877: PPUSH
26878: LD_VAR 0 1
26882: PPUSH
26883: CALL_OW 12
26887: ARRAY
26888: PPUSH
26889: CALL_OW 274
26893: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26894: LD_VAR 0 2
26898: PPUSH
26899: LD_INT 1
26901: PPUSH
26902: LD_INT 0
26904: PPUSH
26905: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26909: LD_VAR 0 2
26913: PPUSH
26914: LD_INT 2
26916: PPUSH
26917: LD_INT 0
26919: PPUSH
26920: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26924: LD_VAR 0 2
26928: PPUSH
26929: LD_INT 3
26931: PPUSH
26932: LD_INT 0
26934: PPUSH
26935: CALL_OW 277
// end ;
26939: PPOPN 2
26941: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26942: LD_EXP 64
26946: PUSH
26947: LD_EXP 92
26951: AND
26952: IFFALSE 27049
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26960: LD_ADDR_VAR 0 1
26964: PUSH
26965: LD_INT 22
26967: PUSH
26968: LD_OWVAR 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 21
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 3
26989: PUSH
26990: LD_INT 23
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: PPUSH
27009: CALL_OW 69
27013: ST_TO_ADDR
// if not tmp then
27014: LD_VAR 0 1
27018: NOT
27019: IFFALSE 27023
// exit ;
27021: GO 27049
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27023: LD_VAR 0 1
27027: PUSH
27028: LD_INT 1
27030: PPUSH
27031: LD_VAR 0 1
27035: PPUSH
27036: CALL_OW 12
27040: ARRAY
27041: PPUSH
27042: LD_INT 200
27044: PPUSH
27045: CALL_OW 234
// end ;
27049: PPOPN 1
27051: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27052: LD_EXP 64
27056: PUSH
27057: LD_EXP 93
27061: AND
27062: IFFALSE 27141
27064: GO 27066
27066: DISABLE
27067: LD_INT 0
27069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27070: LD_ADDR_VAR 0 1
27074: PUSH
27075: LD_INT 22
27077: PUSH
27078: LD_OWVAR 2
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 21
27089: PUSH
27090: LD_INT 2
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PPUSH
27101: CALL_OW 69
27105: ST_TO_ADDR
// if not tmp then
27106: LD_VAR 0 1
27110: NOT
27111: IFFALSE 27115
// exit ;
27113: GO 27141
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27115: LD_VAR 0 1
27119: PUSH
27120: LD_INT 1
27122: PPUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL_OW 12
27132: ARRAY
27133: PPUSH
27134: LD_INT 60
27136: PPUSH
27137: CALL_OW 234
// end ;
27141: PPOPN 1
27143: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27144: LD_EXP 64
27148: PUSH
27149: LD_EXP 94
27153: AND
27154: IFFALSE 27253
27156: GO 27158
27158: DISABLE
27159: LD_INT 0
27161: PPUSH
27162: PPUSH
// begin enable ;
27163: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27164: LD_ADDR_VAR 0 1
27168: PUSH
27169: LD_INT 22
27171: PUSH
27172: LD_OWVAR 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 61
27183: PUSH
27184: EMPTY
27185: LIST
27186: PUSH
27187: LD_INT 33
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: PPUSH
27202: CALL_OW 69
27206: ST_TO_ADDR
// if not tmp then
27207: LD_VAR 0 1
27211: NOT
27212: IFFALSE 27216
// exit ;
27214: GO 27253
// for i in tmp do
27216: LD_ADDR_VAR 0 2
27220: PUSH
27221: LD_VAR 0 1
27225: PUSH
27226: FOR_IN
27227: IFFALSE 27251
// if IsControledBy ( i ) then
27229: LD_VAR 0 2
27233: PPUSH
27234: CALL_OW 312
27238: IFFALSE 27249
// ComUnlink ( i ) ;
27240: LD_VAR 0 2
27244: PPUSH
27245: CALL_OW 136
27249: GO 27226
27251: POP
27252: POP
// end ;
27253: PPOPN 2
27255: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27256: LD_EXP 64
27260: PUSH
27261: LD_EXP 95
27265: AND
27266: IFFALSE 27406
27268: GO 27270
27270: DISABLE
27271: LD_INT 0
27273: PPUSH
27274: PPUSH
// begin ToLua ( displayPowell(); ) ;
27275: LD_STRING displayPowell();
27277: PPUSH
27278: CALL_OW 559
// uc_side := 0 ;
27282: LD_ADDR_OWVAR 20
27286: PUSH
27287: LD_INT 0
27289: ST_TO_ADDR
// uc_nation := 2 ;
27290: LD_ADDR_OWVAR 21
27294: PUSH
27295: LD_INT 2
27297: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27298: LD_ADDR_OWVAR 37
27302: PUSH
27303: LD_INT 14
27305: ST_TO_ADDR
// vc_engine := engine_siberite ;
27306: LD_ADDR_OWVAR 39
27310: PUSH
27311: LD_INT 3
27313: ST_TO_ADDR
// vc_control := control_apeman ;
27314: LD_ADDR_OWVAR 38
27318: PUSH
27319: LD_INT 5
27321: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27322: LD_ADDR_OWVAR 40
27326: PUSH
27327: LD_INT 29
27329: ST_TO_ADDR
// un := CreateVehicle ;
27330: LD_ADDR_VAR 0 2
27334: PUSH
27335: CALL_OW 45
27339: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27340: LD_VAR 0 2
27344: PPUSH
27345: LD_INT 1
27347: PPUSH
27348: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27352: LD_INT 35
27354: PPUSH
27355: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27359: LD_VAR 0 2
27363: PPUSH
27364: LD_INT 22
27366: PUSH
27367: LD_OWVAR 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PPUSH
27376: CALL_OW 69
27380: PPUSH
27381: LD_VAR 0 2
27385: PPUSH
27386: CALL_OW 74
27390: PPUSH
27391: CALL_OW 115
// until IsDead ( un ) ;
27395: LD_VAR 0 2
27399: PPUSH
27400: CALL_OW 301
27404: IFFALSE 27352
// end ;
27406: PPOPN 2
27408: END
// every 0 0$1 trigger StreamModeActive and sStu do
27409: LD_EXP 64
27413: PUSH
27414: LD_EXP 103
27418: AND
27419: IFFALSE 27435
27421: GO 27423
27423: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27424: LD_STRING displayStucuk();
27426: PPUSH
27427: CALL_OW 559
// ResetFog ;
27431: CALL_OW 335
// end ;
27435: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27436: LD_EXP 64
27440: PUSH
27441: LD_EXP 96
27445: AND
27446: IFFALSE 27587
27448: GO 27450
27450: DISABLE
27451: LD_INT 0
27453: PPUSH
27454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27455: LD_ADDR_VAR 0 2
27459: PUSH
27460: LD_INT 22
27462: PUSH
27463: LD_OWVAR 2
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 21
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 69
27490: ST_TO_ADDR
// if not tmp then
27491: LD_VAR 0 2
27495: NOT
27496: IFFALSE 27500
// exit ;
27498: GO 27587
// un := tmp [ rand ( 1 , tmp ) ] ;
27500: LD_ADDR_VAR 0 1
27504: PUSH
27505: LD_VAR 0 2
27509: PUSH
27510: LD_INT 1
27512: PPUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: CALL_OW 12
27522: ARRAY
27523: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27524: LD_VAR 0 1
27528: PPUSH
27529: LD_INT 0
27531: PPUSH
27532: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27536: LD_VAR 0 1
27540: PPUSH
27541: LD_OWVAR 3
27545: PUSH
27546: LD_VAR 0 1
27550: DIFF
27551: PPUSH
27552: LD_VAR 0 1
27556: PPUSH
27557: CALL_OW 74
27561: PPUSH
27562: CALL_OW 115
// wait ( 0 0$20 ) ;
27566: LD_INT 700
27568: PPUSH
27569: CALL_OW 67
// SetSide ( un , your_side ) ;
27573: LD_VAR 0 1
27577: PPUSH
27578: LD_OWVAR 2
27582: PPUSH
27583: CALL_OW 235
// end ;
27587: PPOPN 2
27589: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27590: LD_EXP 64
27594: PUSH
27595: LD_EXP 97
27599: AND
27600: IFFALSE 27706
27602: GO 27604
27604: DISABLE
27605: LD_INT 0
27607: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27608: LD_ADDR_VAR 0 1
27612: PUSH
27613: LD_INT 22
27615: PUSH
27616: LD_OWVAR 2
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: LD_INT 30
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 30
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PPUSH
27657: CALL_OW 69
27661: ST_TO_ADDR
// if not depot then
27662: LD_VAR 0 1
27666: NOT
27667: IFFALSE 27671
// exit ;
27669: GO 27706
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27671: LD_VAR 0 1
27675: PUSH
27676: LD_INT 1
27678: ARRAY
27679: PPUSH
27680: CALL_OW 250
27684: PPUSH
27685: LD_VAR 0 1
27689: PUSH
27690: LD_INT 1
27692: ARRAY
27693: PPUSH
27694: CALL_OW 251
27698: PPUSH
27699: LD_INT 70
27701: PPUSH
27702: CALL_OW 495
// end ;
27706: PPOPN 1
27708: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27709: LD_EXP 64
27713: PUSH
27714: LD_EXP 98
27718: AND
27719: IFFALSE 27930
27721: GO 27723
27723: DISABLE
27724: LD_INT 0
27726: PPUSH
27727: PPUSH
27728: PPUSH
27729: PPUSH
27730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27731: LD_ADDR_VAR 0 5
27735: PUSH
27736: LD_INT 22
27738: PUSH
27739: LD_OWVAR 2
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 21
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PPUSH
27762: CALL_OW 69
27766: ST_TO_ADDR
// if not tmp then
27767: LD_VAR 0 5
27771: NOT
27772: IFFALSE 27776
// exit ;
27774: GO 27930
// for i in tmp do
27776: LD_ADDR_VAR 0 1
27780: PUSH
27781: LD_VAR 0 5
27785: PUSH
27786: FOR_IN
27787: IFFALSE 27928
// begin d := rand ( 0 , 5 ) ;
27789: LD_ADDR_VAR 0 4
27793: PUSH
27794: LD_INT 0
27796: PPUSH
27797: LD_INT 5
27799: PPUSH
27800: CALL_OW 12
27804: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27805: LD_ADDR_VAR 0 2
27809: PUSH
27810: LD_VAR 0 1
27814: PPUSH
27815: CALL_OW 250
27819: PPUSH
27820: LD_VAR 0 4
27824: PPUSH
27825: LD_INT 3
27827: PPUSH
27828: LD_INT 12
27830: PPUSH
27831: CALL_OW 12
27835: PPUSH
27836: CALL_OW 272
27840: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27841: LD_ADDR_VAR 0 3
27845: PUSH
27846: LD_VAR 0 1
27850: PPUSH
27851: CALL_OW 251
27855: PPUSH
27856: LD_VAR 0 4
27860: PPUSH
27861: LD_INT 3
27863: PPUSH
27864: LD_INT 12
27866: PPUSH
27867: CALL_OW 12
27871: PPUSH
27872: CALL_OW 273
27876: ST_TO_ADDR
// if ValidHex ( x , y ) then
27877: LD_VAR 0 2
27881: PPUSH
27882: LD_VAR 0 3
27886: PPUSH
27887: CALL_OW 488
27891: IFFALSE 27926
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27893: LD_VAR 0 1
27897: PPUSH
27898: LD_VAR 0 2
27902: PPUSH
27903: LD_VAR 0 3
27907: PPUSH
27908: LD_INT 3
27910: PPUSH
27911: LD_INT 6
27913: PPUSH
27914: CALL_OW 12
27918: PPUSH
27919: LD_INT 1
27921: PPUSH
27922: CALL_OW 483
// end ;
27926: GO 27786
27928: POP
27929: POP
// end ;
27930: PPOPN 5
27932: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27933: LD_EXP 64
27937: PUSH
27938: LD_EXP 99
27942: AND
27943: IFFALSE 28037
27945: GO 27947
27947: DISABLE
27948: LD_INT 0
27950: PPUSH
27951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27952: LD_ADDR_VAR 0 2
27956: PUSH
27957: LD_INT 22
27959: PUSH
27960: LD_OWVAR 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 32
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 21
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: PPUSH
27994: CALL_OW 69
27998: ST_TO_ADDR
// if not tmp then
27999: LD_VAR 0 2
28003: NOT
28004: IFFALSE 28008
// exit ;
28006: GO 28037
// for i in tmp do
28008: LD_ADDR_VAR 0 1
28012: PUSH
28013: LD_VAR 0 2
28017: PUSH
28018: FOR_IN
28019: IFFALSE 28035
// SetFuel ( i , 0 ) ;
28021: LD_VAR 0 1
28025: PPUSH
28026: LD_INT 0
28028: PPUSH
28029: CALL_OW 240
28033: GO 28018
28035: POP
28036: POP
// end ;
28037: PPOPN 2
28039: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28040: LD_EXP 64
28044: PUSH
28045: LD_EXP 100
28049: AND
28050: IFFALSE 28116
28052: GO 28054
28054: DISABLE
28055: LD_INT 0
28057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28058: LD_ADDR_VAR 0 1
28062: PUSH
28063: LD_INT 22
28065: PUSH
28066: LD_OWVAR 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 30
28077: PUSH
28078: LD_INT 29
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PPUSH
28089: CALL_OW 69
28093: ST_TO_ADDR
// if not tmp then
28094: LD_VAR 0 1
28098: NOT
28099: IFFALSE 28103
// exit ;
28101: GO 28116
// DestroyUnit ( tmp [ 1 ] ) ;
28103: LD_VAR 0 1
28107: PUSH
28108: LD_INT 1
28110: ARRAY
28111: PPUSH
28112: CALL_OW 65
// end ;
28116: PPOPN 1
28118: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28119: LD_EXP 64
28123: PUSH
28124: LD_EXP 102
28128: AND
28129: IFFALSE 28258
28131: GO 28133
28133: DISABLE
28134: LD_INT 0
28136: PPUSH
// begin uc_side := 0 ;
28137: LD_ADDR_OWVAR 20
28141: PUSH
28142: LD_INT 0
28144: ST_TO_ADDR
// uc_nation := nation_arabian ;
28145: LD_ADDR_OWVAR 21
28149: PUSH
28150: LD_INT 2
28152: ST_TO_ADDR
// hc_gallery :=  ;
28153: LD_ADDR_OWVAR 33
28157: PUSH
28158: LD_STRING 
28160: ST_TO_ADDR
// hc_name :=  ;
28161: LD_ADDR_OWVAR 26
28165: PUSH
28166: LD_STRING 
28168: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28169: LD_INT 1
28171: PPUSH
28172: LD_INT 11
28174: PPUSH
28175: LD_INT 10
28177: PPUSH
28178: CALL_OW 380
// un := CreateHuman ;
28182: LD_ADDR_VAR 0 1
28186: PUSH
28187: CALL_OW 44
28191: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28192: LD_VAR 0 1
28196: PPUSH
28197: LD_INT 1
28199: PPUSH
28200: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28204: LD_INT 35
28206: PPUSH
28207: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28211: LD_VAR 0 1
28215: PPUSH
28216: LD_INT 22
28218: PUSH
28219: LD_OWVAR 2
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PPUSH
28228: CALL_OW 69
28232: PPUSH
28233: LD_VAR 0 1
28237: PPUSH
28238: CALL_OW 74
28242: PPUSH
28243: CALL_OW 115
// until IsDead ( un ) ;
28247: LD_VAR 0 1
28251: PPUSH
28252: CALL_OW 301
28256: IFFALSE 28204
// end ;
28258: PPOPN 1
28260: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28261: LD_EXP 64
28265: PUSH
28266: LD_EXP 104
28270: AND
28271: IFFALSE 28283
28273: GO 28275
28275: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28276: LD_STRING earthquake(getX(game), 0, 32)
28278: PPUSH
28279: CALL_OW 559
28283: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28284: LD_EXP 64
28288: PUSH
28289: LD_EXP 105
28293: AND
28294: IFFALSE 28385
28296: GO 28298
28298: DISABLE
28299: LD_INT 0
28301: PPUSH
// begin enable ;
28302: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28303: LD_ADDR_VAR 0 1
28307: PUSH
28308: LD_INT 22
28310: PUSH
28311: LD_OWVAR 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 21
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 33
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: PPUSH
28345: CALL_OW 69
28349: ST_TO_ADDR
// if not tmp then
28350: LD_VAR 0 1
28354: NOT
28355: IFFALSE 28359
// exit ;
28357: GO 28385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28359: LD_VAR 0 1
28363: PUSH
28364: LD_INT 1
28366: PPUSH
28367: LD_VAR 0 1
28371: PPUSH
28372: CALL_OW 12
28376: ARRAY
28377: PPUSH
28378: LD_INT 1
28380: PPUSH
28381: CALL_OW 234
// end ;
28385: PPOPN 1
28387: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28388: LD_EXP 64
28392: PUSH
28393: LD_EXP 106
28397: AND
28398: IFFALSE 28539
28400: GO 28402
28402: DISABLE
28403: LD_INT 0
28405: PPUSH
28406: PPUSH
28407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28408: LD_ADDR_VAR 0 3
28412: PUSH
28413: LD_INT 22
28415: PUSH
28416: LD_OWVAR 2
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 25
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PPUSH
28439: CALL_OW 69
28443: ST_TO_ADDR
// if not tmp then
28444: LD_VAR 0 3
28448: NOT
28449: IFFALSE 28453
// exit ;
28451: GO 28539
// un := tmp [ rand ( 1 , tmp ) ] ;
28453: LD_ADDR_VAR 0 2
28457: PUSH
28458: LD_VAR 0 3
28462: PUSH
28463: LD_INT 1
28465: PPUSH
28466: LD_VAR 0 3
28470: PPUSH
28471: CALL_OW 12
28475: ARRAY
28476: ST_TO_ADDR
// if Crawls ( un ) then
28477: LD_VAR 0 2
28481: PPUSH
28482: CALL_OW 318
28486: IFFALSE 28497
// ComWalk ( un ) ;
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28497: LD_VAR 0 2
28501: PPUSH
28502: LD_INT 9
28504: PPUSH
28505: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28509: LD_INT 28
28511: PPUSH
28512: LD_OWVAR 2
28516: PPUSH
28517: LD_INT 2
28519: PPUSH
28520: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28524: LD_INT 29
28526: PPUSH
28527: LD_OWVAR 2
28531: PPUSH
28532: LD_INT 2
28534: PPUSH
28535: CALL_OW 322
// end ;
28539: PPOPN 3
28541: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28542: LD_EXP 64
28546: PUSH
28547: LD_EXP 107
28551: AND
28552: IFFALSE 28663
28554: GO 28556
28556: DISABLE
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
28561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: LD_INT 22
28569: PUSH
28570: LD_OWVAR 2
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 25
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PPUSH
28593: CALL_OW 69
28597: ST_TO_ADDR
// if not tmp then
28598: LD_VAR 0 3
28602: NOT
28603: IFFALSE 28607
// exit ;
28605: GO 28663
// un := tmp [ rand ( 1 , tmp ) ] ;
28607: LD_ADDR_VAR 0 2
28611: PUSH
28612: LD_VAR 0 3
28616: PUSH
28617: LD_INT 1
28619: PPUSH
28620: LD_VAR 0 3
28624: PPUSH
28625: CALL_OW 12
28629: ARRAY
28630: ST_TO_ADDR
// if Crawls ( un ) then
28631: LD_VAR 0 2
28635: PPUSH
28636: CALL_OW 318
28640: IFFALSE 28651
// ComWalk ( un ) ;
28642: LD_VAR 0 2
28646: PPUSH
28647: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_INT 8
28658: PPUSH
28659: CALL_OW 336
// end ;
28663: PPOPN 3
28665: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28666: LD_EXP 64
28670: PUSH
28671: LD_EXP 108
28675: AND
28676: IFFALSE 28820
28678: GO 28680
28680: DISABLE
28681: LD_INT 0
28683: PPUSH
28684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28685: LD_ADDR_VAR 0 2
28689: PUSH
28690: LD_INT 22
28692: PUSH
28693: LD_OWVAR 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 21
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: LD_INT 34
28717: PUSH
28718: LD_INT 12
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 34
28727: PUSH
28728: LD_INT 51
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 34
28737: PUSH
28738: LD_INT 32
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: LIST
28755: PPUSH
28756: CALL_OW 69
28760: ST_TO_ADDR
// if not tmp then
28761: LD_VAR 0 2
28765: NOT
28766: IFFALSE 28770
// exit ;
28768: GO 28820
// for i in tmp do
28770: LD_ADDR_VAR 0 1
28774: PUSH
28775: LD_VAR 0 2
28779: PUSH
28780: FOR_IN
28781: IFFALSE 28818
// if GetCargo ( i , mat_artifact ) = 0 then
28783: LD_VAR 0 1
28787: PPUSH
28788: LD_INT 4
28790: PPUSH
28791: CALL_OW 289
28795: PUSH
28796: LD_INT 0
28798: EQUAL
28799: IFFALSE 28816
// SetCargo ( i , mat_siberit , 100 ) ;
28801: LD_VAR 0 1
28805: PPUSH
28806: LD_INT 3
28808: PPUSH
28809: LD_INT 100
28811: PPUSH
28812: CALL_OW 290
28816: GO 28780
28818: POP
28819: POP
// end ;
28820: PPOPN 2
28822: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28823: LD_EXP 64
28827: PUSH
28828: LD_EXP 109
28832: AND
28833: IFFALSE 29016
28835: GO 28837
28837: DISABLE
28838: LD_INT 0
28840: PPUSH
28841: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28842: LD_ADDR_VAR 0 2
28846: PUSH
28847: LD_INT 22
28849: PUSH
28850: LD_OWVAR 2
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PPUSH
28859: CALL_OW 69
28863: ST_TO_ADDR
// if not tmp then
28864: LD_VAR 0 2
28868: NOT
28869: IFFALSE 28873
// exit ;
28871: GO 29016
// for i := 1 to 2 do
28873: LD_ADDR_VAR 0 1
28877: PUSH
28878: DOUBLE
28879: LD_INT 1
28881: DEC
28882: ST_TO_ADDR
28883: LD_INT 2
28885: PUSH
28886: FOR_TO
28887: IFFALSE 29014
// begin uc_side := your_side ;
28889: LD_ADDR_OWVAR 20
28893: PUSH
28894: LD_OWVAR 2
28898: ST_TO_ADDR
// uc_nation := nation_american ;
28899: LD_ADDR_OWVAR 21
28903: PUSH
28904: LD_INT 1
28906: ST_TO_ADDR
// vc_chassis := us_morphling ;
28907: LD_ADDR_OWVAR 37
28911: PUSH
28912: LD_INT 5
28914: ST_TO_ADDR
// vc_engine := engine_siberite ;
28915: LD_ADDR_OWVAR 39
28919: PUSH
28920: LD_INT 3
28922: ST_TO_ADDR
// vc_control := control_computer ;
28923: LD_ADDR_OWVAR 38
28927: PUSH
28928: LD_INT 3
28930: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28931: LD_ADDR_OWVAR 40
28935: PUSH
28936: LD_INT 10
28938: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28939: LD_VAR 0 2
28943: PUSH
28944: LD_INT 1
28946: ARRAY
28947: PPUSH
28948: CALL_OW 310
28952: NOT
28953: IFFALSE 29000
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28955: CALL_OW 45
28959: PPUSH
28960: LD_VAR 0 2
28964: PUSH
28965: LD_INT 1
28967: ARRAY
28968: PPUSH
28969: CALL_OW 250
28973: PPUSH
28974: LD_VAR 0 2
28978: PUSH
28979: LD_INT 1
28981: ARRAY
28982: PPUSH
28983: CALL_OW 251
28987: PPUSH
28988: LD_INT 12
28990: PPUSH
28991: LD_INT 1
28993: PPUSH
28994: CALL_OW 50
28998: GO 29012
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29000: CALL_OW 45
29004: PPUSH
29005: LD_INT 1
29007: PPUSH
29008: CALL_OW 51
// end ;
29012: GO 28886
29014: POP
29015: POP
// end ;
29016: PPOPN 2
29018: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29019: LD_EXP 64
29023: PUSH
29024: LD_EXP 110
29028: AND
29029: IFFALSE 29251
29031: GO 29033
29033: DISABLE
29034: LD_INT 0
29036: PPUSH
29037: PPUSH
29038: PPUSH
29039: PPUSH
29040: PPUSH
29041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29042: LD_ADDR_VAR 0 6
29046: PUSH
29047: LD_INT 22
29049: PUSH
29050: LD_OWVAR 2
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 21
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 3
29071: PUSH
29072: LD_INT 23
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: ST_TO_ADDR
// if not tmp then
29096: LD_VAR 0 6
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29251
// s1 := rand ( 1 , 4 ) ;
29105: LD_ADDR_VAR 0 2
29109: PUSH
29110: LD_INT 1
29112: PPUSH
29113: LD_INT 4
29115: PPUSH
29116: CALL_OW 12
29120: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29121: LD_ADDR_VAR 0 4
29125: PUSH
29126: LD_VAR 0 6
29130: PUSH
29131: LD_INT 1
29133: ARRAY
29134: PPUSH
29135: LD_VAR 0 2
29139: PPUSH
29140: CALL_OW 259
29144: ST_TO_ADDR
// if s1 = 1 then
29145: LD_VAR 0 2
29149: PUSH
29150: LD_INT 1
29152: EQUAL
29153: IFFALSE 29173
// s2 := rand ( 2 , 4 ) else
29155: LD_ADDR_VAR 0 3
29159: PUSH
29160: LD_INT 2
29162: PPUSH
29163: LD_INT 4
29165: PPUSH
29166: CALL_OW 12
29170: ST_TO_ADDR
29171: GO 29181
// s2 := 1 ;
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_INT 1
29180: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29181: LD_ADDR_VAR 0 5
29185: PUSH
29186: LD_VAR 0 6
29190: PUSH
29191: LD_INT 1
29193: ARRAY
29194: PPUSH
29195: LD_VAR 0 3
29199: PPUSH
29200: CALL_OW 259
29204: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29205: LD_VAR 0 6
29209: PUSH
29210: LD_INT 1
29212: ARRAY
29213: PPUSH
29214: LD_VAR 0 2
29218: PPUSH
29219: LD_VAR 0 5
29223: PPUSH
29224: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29228: LD_VAR 0 6
29232: PUSH
29233: LD_INT 1
29235: ARRAY
29236: PPUSH
29237: LD_VAR 0 3
29241: PPUSH
29242: LD_VAR 0 4
29246: PPUSH
29247: CALL_OW 237
// end ;
29251: PPOPN 6
29253: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29254: LD_EXP 64
29258: PUSH
29259: LD_EXP 111
29263: AND
29264: IFFALSE 29343
29266: GO 29268
29268: DISABLE
29269: LD_INT 0
29271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29272: LD_ADDR_VAR 0 1
29276: PUSH
29277: LD_INT 22
29279: PUSH
29280: LD_OWVAR 2
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 30
29291: PUSH
29292: LD_INT 3
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PPUSH
29303: CALL_OW 69
29307: ST_TO_ADDR
// if not tmp then
29308: LD_VAR 0 1
29312: NOT
29313: IFFALSE 29317
// exit ;
29315: GO 29343
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29317: LD_VAR 0 1
29321: PUSH
29322: LD_INT 1
29324: PPUSH
29325: LD_VAR 0 1
29329: PPUSH
29330: CALL_OW 12
29334: ARRAY
29335: PPUSH
29336: LD_INT 1
29338: PPUSH
29339: CALL_OW 234
// end ;
29343: PPOPN 1
29345: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29346: LD_EXP 64
29350: PUSH
29351: LD_EXP 112
29355: AND
29356: IFFALSE 29468
29358: GO 29360
29360: DISABLE
29361: LD_INT 0
29363: PPUSH
29364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29365: LD_ADDR_VAR 0 2
29369: PUSH
29370: LD_INT 22
29372: PUSH
29373: LD_OWVAR 2
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 2
29384: PUSH
29385: LD_INT 30
29387: PUSH
29388: LD_INT 27
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 30
29397: PUSH
29398: LD_INT 26
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 30
29407: PUSH
29408: LD_INT 28
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PPUSH
29425: CALL_OW 69
29429: ST_TO_ADDR
// if not tmp then
29430: LD_VAR 0 2
29434: NOT
29435: IFFALSE 29439
// exit ;
29437: GO 29468
// for i in tmp do
29439: LD_ADDR_VAR 0 1
29443: PUSH
29444: LD_VAR 0 2
29448: PUSH
29449: FOR_IN
29450: IFFALSE 29466
// SetLives ( i , 1 ) ;
29452: LD_VAR 0 1
29456: PPUSH
29457: LD_INT 1
29459: PPUSH
29460: CALL_OW 234
29464: GO 29449
29466: POP
29467: POP
// end ;
29468: PPOPN 2
29470: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29471: LD_EXP 64
29475: PUSH
29476: LD_EXP 113
29480: AND
29481: IFFALSE 29755
29483: GO 29485
29485: DISABLE
29486: LD_INT 0
29488: PPUSH
29489: PPUSH
29490: PPUSH
// begin i := rand ( 1 , 7 ) ;
29491: LD_ADDR_VAR 0 1
29495: PUSH
29496: LD_INT 1
29498: PPUSH
29499: LD_INT 7
29501: PPUSH
29502: CALL_OW 12
29506: ST_TO_ADDR
// case i of 1 :
29507: LD_VAR 0 1
29511: PUSH
29512: LD_INT 1
29514: DOUBLE
29515: EQUAL
29516: IFTRUE 29520
29518: GO 29530
29520: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29521: LD_STRING earthquake(getX(game), 0, 32)
29523: PPUSH
29524: CALL_OW 559
29528: GO 29755
29530: LD_INT 2
29532: DOUBLE
29533: EQUAL
29534: IFTRUE 29538
29536: GO 29552
29538: POP
// begin ToLua ( displayStucuk(); ) ;
29539: LD_STRING displayStucuk();
29541: PPUSH
29542: CALL_OW 559
// ResetFog ;
29546: CALL_OW 335
// end ; 3 :
29550: GO 29755
29552: LD_INT 3
29554: DOUBLE
29555: EQUAL
29556: IFTRUE 29560
29558: GO 29664
29560: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29561: LD_ADDR_VAR 0 2
29565: PUSH
29566: LD_INT 22
29568: PUSH
29569: LD_OWVAR 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 25
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 69
29596: ST_TO_ADDR
// if not tmp then
29597: LD_VAR 0 2
29601: NOT
29602: IFFALSE 29606
// exit ;
29604: GO 29755
// un := tmp [ rand ( 1 , tmp ) ] ;
29606: LD_ADDR_VAR 0 3
29610: PUSH
29611: LD_VAR 0 2
29615: PUSH
29616: LD_INT 1
29618: PPUSH
29619: LD_VAR 0 2
29623: PPUSH
29624: CALL_OW 12
29628: ARRAY
29629: ST_TO_ADDR
// if Crawls ( un ) then
29630: LD_VAR 0 3
29634: PPUSH
29635: CALL_OW 318
29639: IFFALSE 29650
// ComWalk ( un ) ;
29641: LD_VAR 0 3
29645: PPUSH
29646: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29650: LD_VAR 0 3
29654: PPUSH
29655: LD_INT 8
29657: PPUSH
29658: CALL_OW 336
// end ; 4 :
29662: GO 29755
29664: LD_INT 4
29666: DOUBLE
29667: EQUAL
29668: IFTRUE 29672
29670: GO 29733
29672: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29673: LD_ADDR_VAR 0 2
29677: PUSH
29678: LD_INT 22
29680: PUSH
29681: LD_OWVAR 2
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 30
29692: PUSH
29693: LD_INT 29
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PPUSH
29704: CALL_OW 69
29708: ST_TO_ADDR
// if not tmp then
29709: LD_VAR 0 2
29713: NOT
29714: IFFALSE 29718
// exit ;
29716: GO 29755
// DestroyUnit ( tmp [ 1 ] ) ;
29718: LD_VAR 0 2
29722: PUSH
29723: LD_INT 1
29725: ARRAY
29726: PPUSH
29727: CALL_OW 65
// end ; 5 .. 7 :
29731: GO 29755
29733: LD_INT 5
29735: DOUBLE
29736: GREATEREQUAL
29737: IFFALSE 29745
29739: LD_INT 7
29741: DOUBLE
29742: LESSEQUAL
29743: IFTRUE 29747
29745: GO 29754
29747: POP
// StreamSibBomb ; end ;
29748: CALL 26005 0 0
29752: GO 29755
29754: POP
// end ;
29755: PPOPN 3
29757: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29758: LD_EXP 64
29762: PUSH
29763: LD_EXP 114
29767: AND
29768: IFFALSE 29924
29770: GO 29772
29772: DISABLE
29773: LD_INT 0
29775: PPUSH
29776: PPUSH
29777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29778: LD_ADDR_VAR 0 2
29782: PUSH
29783: LD_INT 81
29785: PUSH
29786: LD_OWVAR 2
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 21
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 21
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PPUSH
29827: CALL_OW 69
29831: ST_TO_ADDR
// if not tmp then
29832: LD_VAR 0 2
29836: NOT
29837: IFFALSE 29841
// exit ;
29839: GO 29924
// p := 0 ;
29841: LD_ADDR_VAR 0 3
29845: PUSH
29846: LD_INT 0
29848: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29849: LD_INT 35
29851: PPUSH
29852: CALL_OW 67
// p := p + 1 ;
29856: LD_ADDR_VAR 0 3
29860: PUSH
29861: LD_VAR 0 3
29865: PUSH
29866: LD_INT 1
29868: PLUS
29869: ST_TO_ADDR
// for i in tmp do
29870: LD_ADDR_VAR 0 1
29874: PUSH
29875: LD_VAR 0 2
29879: PUSH
29880: FOR_IN
29881: IFFALSE 29912
// if GetLives ( i ) < 1000 then
29883: LD_VAR 0 1
29887: PPUSH
29888: CALL_OW 256
29892: PUSH
29893: LD_INT 1000
29895: LESS
29896: IFFALSE 29910
// SetLives ( i , 1000 ) ;
29898: LD_VAR 0 1
29902: PPUSH
29903: LD_INT 1000
29905: PPUSH
29906: CALL_OW 234
29910: GO 29880
29912: POP
29913: POP
// until p > 20 ;
29914: LD_VAR 0 3
29918: PUSH
29919: LD_INT 20
29921: GREATER
29922: IFFALSE 29849
// end ;
29924: PPOPN 3
29926: END
// every 0 0$1 trigger StreamModeActive and sTime do
29927: LD_EXP 64
29931: PUSH
29932: LD_EXP 115
29936: AND
29937: IFFALSE 29972
29939: GO 29941
29941: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29942: LD_INT 28
29944: PPUSH
29945: LD_OWVAR 2
29949: PPUSH
29950: LD_INT 2
29952: PPUSH
29953: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29957: LD_INT 30
29959: PPUSH
29960: LD_OWVAR 2
29964: PPUSH
29965: LD_INT 2
29967: PPUSH
29968: CALL_OW 322
// end ;
29972: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29973: LD_EXP 64
29977: PUSH
29978: LD_EXP 116
29982: AND
29983: IFFALSE 30104
29985: GO 29987
29987: DISABLE
29988: LD_INT 0
29990: PPUSH
29991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29992: LD_ADDR_VAR 0 2
29996: PUSH
29997: LD_INT 22
29999: PUSH
30000: LD_OWVAR 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 21
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: LD_INT 23
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: PPUSH
30041: CALL_OW 69
30045: ST_TO_ADDR
// if not tmp then
30046: LD_VAR 0 2
30050: NOT
30051: IFFALSE 30055
// exit ;
30053: GO 30104
// for i in tmp do
30055: LD_ADDR_VAR 0 1
30059: PUSH
30060: LD_VAR 0 2
30064: PUSH
30065: FOR_IN
30066: IFFALSE 30102
// begin if Crawls ( i ) then
30068: LD_VAR 0 1
30072: PPUSH
30073: CALL_OW 318
30077: IFFALSE 30088
// ComWalk ( i ) ;
30079: LD_VAR 0 1
30083: PPUSH
30084: CALL_OW 138
// SetClass ( i , 2 ) ;
30088: LD_VAR 0 1
30092: PPUSH
30093: LD_INT 2
30095: PPUSH
30096: CALL_OW 336
// end ;
30100: GO 30065
30102: POP
30103: POP
// end ;
30104: PPOPN 2
30106: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30107: LD_EXP 64
30111: PUSH
30112: LD_EXP 117
30116: AND
30117: IFFALSE 30398
30119: GO 30121
30121: DISABLE
30122: LD_INT 0
30124: PPUSH
30125: PPUSH
30126: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30127: LD_OWVAR 2
30131: PPUSH
30132: LD_INT 9
30134: PPUSH
30135: LD_INT 1
30137: PPUSH
30138: LD_INT 1
30140: PPUSH
30141: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30145: LD_INT 9
30147: PPUSH
30148: LD_OWVAR 2
30152: PPUSH
30153: CALL_OW 343
// uc_side := 9 ;
30157: LD_ADDR_OWVAR 20
30161: PUSH
30162: LD_INT 9
30164: ST_TO_ADDR
// uc_nation := 2 ;
30165: LD_ADDR_OWVAR 21
30169: PUSH
30170: LD_INT 2
30172: ST_TO_ADDR
// hc_name := Dark Warrior ;
30173: LD_ADDR_OWVAR 26
30177: PUSH
30178: LD_STRING Dark Warrior
30180: ST_TO_ADDR
// hc_gallery :=  ;
30181: LD_ADDR_OWVAR 33
30185: PUSH
30186: LD_STRING 
30188: ST_TO_ADDR
// hc_noskilllimit := true ;
30189: LD_ADDR_OWVAR 76
30193: PUSH
30194: LD_INT 1
30196: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30197: LD_ADDR_OWVAR 31
30201: PUSH
30202: LD_INT 30
30204: PUSH
30205: LD_INT 30
30207: PUSH
30208: LD_INT 30
30210: PUSH
30211: LD_INT 30
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
// un := CreateHuman ;
30220: LD_ADDR_VAR 0 3
30224: PUSH
30225: CALL_OW 44
30229: ST_TO_ADDR
// hc_noskilllimit := false ;
30230: LD_ADDR_OWVAR 76
30234: PUSH
30235: LD_INT 0
30237: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30238: LD_VAR 0 3
30242: PPUSH
30243: LD_INT 1
30245: PPUSH
30246: CALL_OW 51
// p := 0 ;
30250: LD_ADDR_VAR 0 2
30254: PUSH
30255: LD_INT 0
30257: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30258: LD_INT 35
30260: PPUSH
30261: CALL_OW 67
// p := p + 1 ;
30265: LD_ADDR_VAR 0 2
30269: PUSH
30270: LD_VAR 0 2
30274: PUSH
30275: LD_INT 1
30277: PLUS
30278: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30279: LD_VAR 0 3
30283: PPUSH
30284: CALL_OW 256
30288: PUSH
30289: LD_INT 1000
30291: LESS
30292: IFFALSE 30306
// SetLives ( un , 1000 ) ;
30294: LD_VAR 0 3
30298: PPUSH
30299: LD_INT 1000
30301: PPUSH
30302: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30306: LD_VAR 0 3
30310: PPUSH
30311: LD_INT 81
30313: PUSH
30314: LD_OWVAR 2
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 91
30325: PUSH
30326: LD_VAR 0 3
30330: PUSH
30331: LD_INT 30
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PPUSH
30343: CALL_OW 69
30347: PPUSH
30348: LD_VAR 0 3
30352: PPUSH
30353: CALL_OW 74
30357: PPUSH
30358: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30362: LD_VAR 0 2
30366: PUSH
30367: LD_INT 60
30369: GREATER
30370: PUSH
30371: LD_VAR 0 3
30375: PPUSH
30376: CALL_OW 301
30380: OR
30381: IFFALSE 30258
// if un then
30383: LD_VAR 0 3
30387: IFFALSE 30398
// RemoveUnit ( un ) ;
30389: LD_VAR 0 3
30393: PPUSH
30394: CALL_OW 64
// end ;
30398: PPOPN 3
30400: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30401: LD_INT 0
30403: PPUSH
// case cmd of 301 :
30404: LD_VAR 0 1
30408: PUSH
30409: LD_INT 301
30411: DOUBLE
30412: EQUAL
30413: IFTRUE 30417
30415: GO 30449
30417: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30418: LD_VAR 0 6
30422: PPUSH
30423: LD_VAR 0 7
30427: PPUSH
30428: LD_VAR 0 8
30432: PPUSH
30433: LD_VAR 0 4
30437: PPUSH
30438: LD_VAR 0 5
30442: PPUSH
30443: CALL 31650 0 5
30447: GO 30570
30449: LD_INT 302
30451: DOUBLE
30452: EQUAL
30453: IFTRUE 30457
30455: GO 30494
30457: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30458: LD_VAR 0 6
30462: PPUSH
30463: LD_VAR 0 7
30467: PPUSH
30468: LD_VAR 0 8
30472: PPUSH
30473: LD_VAR 0 9
30477: PPUSH
30478: LD_VAR 0 4
30482: PPUSH
30483: LD_VAR 0 5
30487: PPUSH
30488: CALL 31741 0 6
30492: GO 30570
30494: LD_INT 303
30496: DOUBLE
30497: EQUAL
30498: IFTRUE 30502
30500: GO 30539
30502: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30503: LD_VAR 0 6
30507: PPUSH
30508: LD_VAR 0 7
30512: PPUSH
30513: LD_VAR 0 8
30517: PPUSH
30518: LD_VAR 0 9
30522: PPUSH
30523: LD_VAR 0 4
30527: PPUSH
30528: LD_VAR 0 5
30532: PPUSH
30533: CALL 30575 0 6
30537: GO 30570
30539: LD_INT 304
30541: DOUBLE
30542: EQUAL
30543: IFTRUE 30547
30545: GO 30569
30547: POP
// hHackTeleport ( unit , x , y ) ; end ;
30548: LD_VAR 0 2
30552: PPUSH
30553: LD_VAR 0 4
30557: PPUSH
30558: LD_VAR 0 5
30562: PPUSH
30563: CALL 32334 0 3
30567: GO 30570
30569: POP
// end ;
30570: LD_VAR 0 12
30574: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30575: LD_INT 0
30577: PPUSH
30578: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30579: LD_VAR 0 1
30583: PUSH
30584: LD_INT 1
30586: LESS
30587: PUSH
30588: LD_VAR 0 1
30592: PUSH
30593: LD_INT 3
30595: GREATER
30596: OR
30597: PUSH
30598: LD_VAR 0 5
30602: PPUSH
30603: LD_VAR 0 6
30607: PPUSH
30608: CALL_OW 428
30612: OR
30613: IFFALSE 30617
// exit ;
30615: GO 31337
// uc_side := your_side ;
30617: LD_ADDR_OWVAR 20
30621: PUSH
30622: LD_OWVAR 2
30626: ST_TO_ADDR
// uc_nation := nation ;
30627: LD_ADDR_OWVAR 21
30631: PUSH
30632: LD_VAR 0 1
30636: ST_TO_ADDR
// bc_level = 1 ;
30637: LD_ADDR_OWVAR 43
30641: PUSH
30642: LD_INT 1
30644: ST_TO_ADDR
// case btype of 1 :
30645: LD_VAR 0 2
30649: PUSH
30650: LD_INT 1
30652: DOUBLE
30653: EQUAL
30654: IFTRUE 30658
30656: GO 30669
30658: POP
// bc_type := b_depot ; 2 :
30659: LD_ADDR_OWVAR 42
30663: PUSH
30664: LD_INT 0
30666: ST_TO_ADDR
30667: GO 31281
30669: LD_INT 2
30671: DOUBLE
30672: EQUAL
30673: IFTRUE 30677
30675: GO 30688
30677: POP
// bc_type := b_warehouse ; 3 :
30678: LD_ADDR_OWVAR 42
30682: PUSH
30683: LD_INT 1
30685: ST_TO_ADDR
30686: GO 31281
30688: LD_INT 3
30690: DOUBLE
30691: EQUAL
30692: IFTRUE 30696
30694: GO 30707
30696: POP
// bc_type := b_lab ; 4 .. 9 :
30697: LD_ADDR_OWVAR 42
30701: PUSH
30702: LD_INT 6
30704: ST_TO_ADDR
30705: GO 31281
30707: LD_INT 4
30709: DOUBLE
30710: GREATEREQUAL
30711: IFFALSE 30719
30713: LD_INT 9
30715: DOUBLE
30716: LESSEQUAL
30717: IFTRUE 30721
30719: GO 30773
30721: POP
// begin bc_type := b_lab_half ;
30722: LD_ADDR_OWVAR 42
30726: PUSH
30727: LD_INT 7
30729: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30730: LD_ADDR_OWVAR 44
30734: PUSH
30735: LD_INT 10
30737: PUSH
30738: LD_INT 11
30740: PUSH
30741: LD_INT 12
30743: PUSH
30744: LD_INT 15
30746: PUSH
30747: LD_INT 14
30749: PUSH
30750: LD_INT 13
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: PUSH
30761: LD_VAR 0 2
30765: PUSH
30766: LD_INT 3
30768: MINUS
30769: ARRAY
30770: ST_TO_ADDR
// end ; 10 .. 13 :
30771: GO 31281
30773: LD_INT 10
30775: DOUBLE
30776: GREATEREQUAL
30777: IFFALSE 30785
30779: LD_INT 13
30781: DOUBLE
30782: LESSEQUAL
30783: IFTRUE 30787
30785: GO 30864
30787: POP
// begin bc_type := b_lab_full ;
30788: LD_ADDR_OWVAR 42
30792: PUSH
30793: LD_INT 8
30795: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30796: LD_ADDR_OWVAR 44
30800: PUSH
30801: LD_INT 10
30803: PUSH
30804: LD_INT 12
30806: PUSH
30807: LD_INT 14
30809: PUSH
30810: LD_INT 13
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: PUSH
30819: LD_VAR 0 2
30823: PUSH
30824: LD_INT 9
30826: MINUS
30827: ARRAY
30828: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30829: LD_ADDR_OWVAR 45
30833: PUSH
30834: LD_INT 11
30836: PUSH
30837: LD_INT 15
30839: PUSH
30840: LD_INT 12
30842: PUSH
30843: LD_INT 15
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: PUSH
30852: LD_VAR 0 2
30856: PUSH
30857: LD_INT 9
30859: MINUS
30860: ARRAY
30861: ST_TO_ADDR
// end ; 14 :
30862: GO 31281
30864: LD_INT 14
30866: DOUBLE
30867: EQUAL
30868: IFTRUE 30872
30870: GO 30883
30872: POP
// bc_type := b_workshop ; 15 :
30873: LD_ADDR_OWVAR 42
30877: PUSH
30878: LD_INT 2
30880: ST_TO_ADDR
30881: GO 31281
30883: LD_INT 15
30885: DOUBLE
30886: EQUAL
30887: IFTRUE 30891
30889: GO 30902
30891: POP
// bc_type := b_factory ; 16 :
30892: LD_ADDR_OWVAR 42
30896: PUSH
30897: LD_INT 3
30899: ST_TO_ADDR
30900: GO 31281
30902: LD_INT 16
30904: DOUBLE
30905: EQUAL
30906: IFTRUE 30910
30908: GO 30921
30910: POP
// bc_type := b_ext_gun ; 17 :
30911: LD_ADDR_OWVAR 42
30915: PUSH
30916: LD_INT 17
30918: ST_TO_ADDR
30919: GO 31281
30921: LD_INT 17
30923: DOUBLE
30924: EQUAL
30925: IFTRUE 30929
30927: GO 30957
30929: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30930: LD_ADDR_OWVAR 42
30934: PUSH
30935: LD_INT 19
30937: PUSH
30938: LD_INT 23
30940: PUSH
30941: LD_INT 19
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: PUSH
30949: LD_VAR 0 1
30953: ARRAY
30954: ST_TO_ADDR
30955: GO 31281
30957: LD_INT 18
30959: DOUBLE
30960: EQUAL
30961: IFTRUE 30965
30963: GO 30976
30965: POP
// bc_type := b_ext_radar ; 19 :
30966: LD_ADDR_OWVAR 42
30970: PUSH
30971: LD_INT 20
30973: ST_TO_ADDR
30974: GO 31281
30976: LD_INT 19
30978: DOUBLE
30979: EQUAL
30980: IFTRUE 30984
30982: GO 30995
30984: POP
// bc_type := b_ext_radio ; 20 :
30985: LD_ADDR_OWVAR 42
30989: PUSH
30990: LD_INT 22
30992: ST_TO_ADDR
30993: GO 31281
30995: LD_INT 20
30997: DOUBLE
30998: EQUAL
30999: IFTRUE 31003
31001: GO 31014
31003: POP
// bc_type := b_ext_siberium ; 21 :
31004: LD_ADDR_OWVAR 42
31008: PUSH
31009: LD_INT 21
31011: ST_TO_ADDR
31012: GO 31281
31014: LD_INT 21
31016: DOUBLE
31017: EQUAL
31018: IFTRUE 31022
31020: GO 31033
31022: POP
// bc_type := b_ext_computer ; 22 :
31023: LD_ADDR_OWVAR 42
31027: PUSH
31028: LD_INT 24
31030: ST_TO_ADDR
31031: GO 31281
31033: LD_INT 22
31035: DOUBLE
31036: EQUAL
31037: IFTRUE 31041
31039: GO 31052
31041: POP
// bc_type := b_ext_track ; 23 :
31042: LD_ADDR_OWVAR 42
31046: PUSH
31047: LD_INT 16
31049: ST_TO_ADDR
31050: GO 31281
31052: LD_INT 23
31054: DOUBLE
31055: EQUAL
31056: IFTRUE 31060
31058: GO 31071
31060: POP
// bc_type := b_ext_laser ; 24 :
31061: LD_ADDR_OWVAR 42
31065: PUSH
31066: LD_INT 25
31068: ST_TO_ADDR
31069: GO 31281
31071: LD_INT 24
31073: DOUBLE
31074: EQUAL
31075: IFTRUE 31079
31077: GO 31090
31079: POP
// bc_type := b_control_tower ; 25 :
31080: LD_ADDR_OWVAR 42
31084: PUSH
31085: LD_INT 36
31087: ST_TO_ADDR
31088: GO 31281
31090: LD_INT 25
31092: DOUBLE
31093: EQUAL
31094: IFTRUE 31098
31096: GO 31109
31098: POP
// bc_type := b_breastwork ; 26 :
31099: LD_ADDR_OWVAR 42
31103: PUSH
31104: LD_INT 31
31106: ST_TO_ADDR
31107: GO 31281
31109: LD_INT 26
31111: DOUBLE
31112: EQUAL
31113: IFTRUE 31117
31115: GO 31128
31117: POP
// bc_type := b_bunker ; 27 :
31118: LD_ADDR_OWVAR 42
31122: PUSH
31123: LD_INT 32
31125: ST_TO_ADDR
31126: GO 31281
31128: LD_INT 27
31130: DOUBLE
31131: EQUAL
31132: IFTRUE 31136
31134: GO 31147
31136: POP
// bc_type := b_turret ; 28 :
31137: LD_ADDR_OWVAR 42
31141: PUSH
31142: LD_INT 33
31144: ST_TO_ADDR
31145: GO 31281
31147: LD_INT 28
31149: DOUBLE
31150: EQUAL
31151: IFTRUE 31155
31153: GO 31166
31155: POP
// bc_type := b_armoury ; 29 :
31156: LD_ADDR_OWVAR 42
31160: PUSH
31161: LD_INT 4
31163: ST_TO_ADDR
31164: GO 31281
31166: LD_INT 29
31168: DOUBLE
31169: EQUAL
31170: IFTRUE 31174
31172: GO 31185
31174: POP
// bc_type := b_barracks ; 30 :
31175: LD_ADDR_OWVAR 42
31179: PUSH
31180: LD_INT 5
31182: ST_TO_ADDR
31183: GO 31281
31185: LD_INT 30
31187: DOUBLE
31188: EQUAL
31189: IFTRUE 31193
31191: GO 31204
31193: POP
// bc_type := b_solar_power ; 31 :
31194: LD_ADDR_OWVAR 42
31198: PUSH
31199: LD_INT 27
31201: ST_TO_ADDR
31202: GO 31281
31204: LD_INT 31
31206: DOUBLE
31207: EQUAL
31208: IFTRUE 31212
31210: GO 31223
31212: POP
// bc_type := b_oil_power ; 32 :
31213: LD_ADDR_OWVAR 42
31217: PUSH
31218: LD_INT 26
31220: ST_TO_ADDR
31221: GO 31281
31223: LD_INT 32
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31242
31231: POP
// bc_type := b_siberite_power ; 33 :
31232: LD_ADDR_OWVAR 42
31236: PUSH
31237: LD_INT 28
31239: ST_TO_ADDR
31240: GO 31281
31242: LD_INT 33
31244: DOUBLE
31245: EQUAL
31246: IFTRUE 31250
31248: GO 31261
31250: POP
// bc_type := b_oil_mine ; 34 :
31251: LD_ADDR_OWVAR 42
31255: PUSH
31256: LD_INT 29
31258: ST_TO_ADDR
31259: GO 31281
31261: LD_INT 34
31263: DOUBLE
31264: EQUAL
31265: IFTRUE 31269
31267: GO 31280
31269: POP
// bc_type := b_siberite_mine ; end ;
31270: LD_ADDR_OWVAR 42
31274: PUSH
31275: LD_INT 30
31277: ST_TO_ADDR
31278: GO 31281
31280: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31281: LD_ADDR_VAR 0 8
31285: PUSH
31286: LD_VAR 0 5
31290: PPUSH
31291: LD_VAR 0 6
31295: PPUSH
31296: LD_VAR 0 3
31300: PPUSH
31301: CALL_OW 47
31305: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31306: LD_OWVAR 42
31310: PUSH
31311: LD_INT 32
31313: PUSH
31314: LD_INT 33
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: IN
31321: IFFALSE 31337
// PlaceWeaponTurret ( b , weapon ) ;
31323: LD_VAR 0 8
31327: PPUSH
31328: LD_VAR 0 4
31332: PPUSH
31333: CALL_OW 431
// end ;
31337: LD_VAR 0 7
31341: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31342: LD_INT 0
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31348: LD_ADDR_VAR 0 4
31352: PUSH
31353: LD_INT 22
31355: PUSH
31356: LD_OWVAR 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 30
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 30
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PPUSH
31397: CALL_OW 69
31401: ST_TO_ADDR
// if not tmp then
31402: LD_VAR 0 4
31406: NOT
31407: IFFALSE 31411
// exit ;
31409: GO 31470
// for i in tmp do
31411: LD_ADDR_VAR 0 2
31415: PUSH
31416: LD_VAR 0 4
31420: PUSH
31421: FOR_IN
31422: IFFALSE 31468
// for j = 1 to 3 do
31424: LD_ADDR_VAR 0 3
31428: PUSH
31429: DOUBLE
31430: LD_INT 1
31432: DEC
31433: ST_TO_ADDR
31434: LD_INT 3
31436: PUSH
31437: FOR_TO
31438: IFFALSE 31464
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31440: LD_VAR 0 2
31444: PPUSH
31445: CALL_OW 274
31449: PPUSH
31450: LD_VAR 0 3
31454: PPUSH
31455: LD_INT 99999
31457: PPUSH
31458: CALL_OW 277
31462: GO 31437
31464: POP
31465: POP
31466: GO 31421
31468: POP
31469: POP
// end ;
31470: LD_VAR 0 1
31474: RET
// export function hHackSetLevel10 ; var i , j ; begin
31475: LD_INT 0
31477: PPUSH
31478: PPUSH
31479: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31480: LD_ADDR_VAR 0 2
31484: PUSH
31485: LD_INT 21
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PPUSH
31495: CALL_OW 69
31499: PUSH
31500: FOR_IN
31501: IFFALSE 31553
// if IsSelected ( i ) then
31503: LD_VAR 0 2
31507: PPUSH
31508: CALL_OW 306
31512: IFFALSE 31551
// begin for j := 1 to 4 do
31514: LD_ADDR_VAR 0 3
31518: PUSH
31519: DOUBLE
31520: LD_INT 1
31522: DEC
31523: ST_TO_ADDR
31524: LD_INT 4
31526: PUSH
31527: FOR_TO
31528: IFFALSE 31549
// SetSkill ( i , j , 10 ) ;
31530: LD_VAR 0 2
31534: PPUSH
31535: LD_VAR 0 3
31539: PPUSH
31540: LD_INT 10
31542: PPUSH
31543: CALL_OW 237
31547: GO 31527
31549: POP
31550: POP
// end ;
31551: GO 31500
31553: POP
31554: POP
// end ;
31555: LD_VAR 0 1
31559: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31560: LD_INT 0
31562: PPUSH
31563: PPUSH
31564: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31565: LD_ADDR_VAR 0 2
31569: PUSH
31570: LD_INT 22
31572: PUSH
31573: LD_OWVAR 2
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 21
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PPUSH
31596: CALL_OW 69
31600: PUSH
31601: FOR_IN
31602: IFFALSE 31643
// begin for j := 1 to 4 do
31604: LD_ADDR_VAR 0 3
31608: PUSH
31609: DOUBLE
31610: LD_INT 1
31612: DEC
31613: ST_TO_ADDR
31614: LD_INT 4
31616: PUSH
31617: FOR_TO
31618: IFFALSE 31639
// SetSkill ( i , j , 10 ) ;
31620: LD_VAR 0 2
31624: PPUSH
31625: LD_VAR 0 3
31629: PPUSH
31630: LD_INT 10
31632: PPUSH
31633: CALL_OW 237
31637: GO 31617
31639: POP
31640: POP
// end ;
31641: GO 31601
31643: POP
31644: POP
// end ;
31645: LD_VAR 0 1
31649: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31650: LD_INT 0
31652: PPUSH
// uc_side := your_side ;
31653: LD_ADDR_OWVAR 20
31657: PUSH
31658: LD_OWVAR 2
31662: ST_TO_ADDR
// uc_nation := nation ;
31663: LD_ADDR_OWVAR 21
31667: PUSH
31668: LD_VAR 0 1
31672: ST_TO_ADDR
// InitHc ;
31673: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31677: LD_INT 0
31679: PPUSH
31680: LD_VAR 0 2
31684: PPUSH
31685: LD_VAR 0 3
31689: PPUSH
31690: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31694: LD_VAR 0 4
31698: PPUSH
31699: LD_VAR 0 5
31703: PPUSH
31704: CALL_OW 428
31708: PUSH
31709: LD_INT 0
31711: EQUAL
31712: IFFALSE 31736
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31714: CALL_OW 44
31718: PPUSH
31719: LD_VAR 0 4
31723: PPUSH
31724: LD_VAR 0 5
31728: PPUSH
31729: LD_INT 1
31731: PPUSH
31732: CALL_OW 48
// end ;
31736: LD_VAR 0 6
31740: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31741: LD_INT 0
31743: PPUSH
31744: PPUSH
// uc_side := your_side ;
31745: LD_ADDR_OWVAR 20
31749: PUSH
31750: LD_OWVAR 2
31754: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31755: LD_VAR 0 1
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: LD_INT 3
31768: PUSH
31769: LD_INT 4
31771: PUSH
31772: LD_INT 5
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: IN
31782: IFFALSE 31794
// uc_nation := nation_american else
31784: LD_ADDR_OWVAR 21
31788: PUSH
31789: LD_INT 1
31791: ST_TO_ADDR
31792: GO 31837
// if chassis in [ 11 , 12 , 13 , 14 ] then
31794: LD_VAR 0 1
31798: PUSH
31799: LD_INT 11
31801: PUSH
31802: LD_INT 12
31804: PUSH
31805: LD_INT 13
31807: PUSH
31808: LD_INT 14
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: IN
31817: IFFALSE 31829
// uc_nation := nation_arabian else
31819: LD_ADDR_OWVAR 21
31823: PUSH
31824: LD_INT 2
31826: ST_TO_ADDR
31827: GO 31837
// uc_nation := nation_russian ;
31829: LD_ADDR_OWVAR 21
31833: PUSH
31834: LD_INT 3
31836: ST_TO_ADDR
// vc_chassis := chassis ;
31837: LD_ADDR_OWVAR 37
31841: PUSH
31842: LD_VAR 0 1
31846: ST_TO_ADDR
// vc_engine := engine ;
31847: LD_ADDR_OWVAR 39
31851: PUSH
31852: LD_VAR 0 2
31856: ST_TO_ADDR
// vc_control := control ;
31857: LD_ADDR_OWVAR 38
31861: PUSH
31862: LD_VAR 0 3
31866: ST_TO_ADDR
// vc_weapon := weapon ;
31867: LD_ADDR_OWVAR 40
31871: PUSH
31872: LD_VAR 0 4
31876: ST_TO_ADDR
// un := CreateVehicle ;
31877: LD_ADDR_VAR 0 8
31881: PUSH
31882: CALL_OW 45
31886: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31887: LD_VAR 0 8
31891: PPUSH
31892: LD_INT 0
31894: PPUSH
31895: LD_INT 5
31897: PPUSH
31898: CALL_OW 12
31902: PPUSH
31903: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31907: LD_VAR 0 8
31911: PPUSH
31912: LD_VAR 0 5
31916: PPUSH
31917: LD_VAR 0 6
31921: PPUSH
31922: LD_INT 1
31924: PPUSH
31925: CALL_OW 48
// end ;
31929: LD_VAR 0 7
31933: RET
// export hInvincible ; every 1 do
31934: GO 31936
31936: DISABLE
// hInvincible := [ ] ;
31937: LD_ADDR_EXP 118
31941: PUSH
31942: EMPTY
31943: ST_TO_ADDR
31944: END
// every 10 do var i ;
31945: GO 31947
31947: DISABLE
31948: LD_INT 0
31950: PPUSH
// begin enable ;
31951: ENABLE
// if not hInvincible then
31952: LD_EXP 118
31956: NOT
31957: IFFALSE 31961
// exit ;
31959: GO 32005
// for i in hInvincible do
31961: LD_ADDR_VAR 0 1
31965: PUSH
31966: LD_EXP 118
31970: PUSH
31971: FOR_IN
31972: IFFALSE 32003
// if GetLives ( i ) < 1000 then
31974: LD_VAR 0 1
31978: PPUSH
31979: CALL_OW 256
31983: PUSH
31984: LD_INT 1000
31986: LESS
31987: IFFALSE 32001
// SetLives ( i , 1000 ) ;
31989: LD_VAR 0 1
31993: PPUSH
31994: LD_INT 1000
31996: PPUSH
31997: CALL_OW 234
32001: GO 31971
32003: POP
32004: POP
// end ;
32005: PPOPN 1
32007: END
// export function hHackInvincible ; var i ; begin
32008: LD_INT 0
32010: PPUSH
32011: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32012: LD_ADDR_VAR 0 2
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: LD_INT 21
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 21
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: PPUSH
32045: CALL_OW 69
32049: PUSH
32050: FOR_IN
32051: IFFALSE 32112
// if IsSelected ( i ) then
32053: LD_VAR 0 2
32057: PPUSH
32058: CALL_OW 306
32062: IFFALSE 32110
// begin if i in hInvincible then
32064: LD_VAR 0 2
32068: PUSH
32069: LD_EXP 118
32073: IN
32074: IFFALSE 32094
// hInvincible := hInvincible diff i else
32076: LD_ADDR_EXP 118
32080: PUSH
32081: LD_EXP 118
32085: PUSH
32086: LD_VAR 0 2
32090: DIFF
32091: ST_TO_ADDR
32092: GO 32110
// hInvincible := hInvincible union i ;
32094: LD_ADDR_EXP 118
32098: PUSH
32099: LD_EXP 118
32103: PUSH
32104: LD_VAR 0 2
32108: UNION
32109: ST_TO_ADDR
// end ;
32110: GO 32050
32112: POP
32113: POP
// end ;
32114: LD_VAR 0 1
32118: RET
// export function hHackInvisible ; var i , j ; begin
32119: LD_INT 0
32121: PPUSH
32122: PPUSH
32123: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32124: LD_ADDR_VAR 0 2
32128: PUSH
32129: LD_INT 21
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PPUSH
32139: CALL_OW 69
32143: PUSH
32144: FOR_IN
32145: IFFALSE 32169
// if IsSelected ( i ) then
32147: LD_VAR 0 2
32151: PPUSH
32152: CALL_OW 306
32156: IFFALSE 32167
// ComForceInvisible ( i ) ;
32158: LD_VAR 0 2
32162: PPUSH
32163: CALL_OW 496
32167: GO 32144
32169: POP
32170: POP
// end ;
32171: LD_VAR 0 1
32175: RET
// export function hHackChangeYourSide ; begin
32176: LD_INT 0
32178: PPUSH
// if your_side = 8 then
32179: LD_OWVAR 2
32183: PUSH
32184: LD_INT 8
32186: EQUAL
32187: IFFALSE 32199
// your_side := 0 else
32189: LD_ADDR_OWVAR 2
32193: PUSH
32194: LD_INT 0
32196: ST_TO_ADDR
32197: GO 32213
// your_side := your_side + 1 ;
32199: LD_ADDR_OWVAR 2
32203: PUSH
32204: LD_OWVAR 2
32208: PUSH
32209: LD_INT 1
32211: PLUS
32212: ST_TO_ADDR
// end ;
32213: LD_VAR 0 1
32217: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32218: LD_INT 0
32220: PPUSH
32221: PPUSH
32222: PPUSH
// for i in all_units do
32223: LD_ADDR_VAR 0 2
32227: PUSH
32228: LD_OWVAR 3
32232: PUSH
32233: FOR_IN
32234: IFFALSE 32312
// if IsSelected ( i ) then
32236: LD_VAR 0 2
32240: PPUSH
32241: CALL_OW 306
32245: IFFALSE 32310
// begin j := GetSide ( i ) ;
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_VAR 0 2
32256: PPUSH
32257: CALL_OW 255
32261: ST_TO_ADDR
// if j = 8 then
32262: LD_VAR 0 3
32266: PUSH
32267: LD_INT 8
32269: EQUAL
32270: IFFALSE 32282
// j := 0 else
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: LD_INT 0
32279: ST_TO_ADDR
32280: GO 32296
// j := j + 1 ;
32282: LD_ADDR_VAR 0 3
32286: PUSH
32287: LD_VAR 0 3
32291: PUSH
32292: LD_INT 1
32294: PLUS
32295: ST_TO_ADDR
// SetSide ( i , j ) ;
32296: LD_VAR 0 2
32300: PPUSH
32301: LD_VAR 0 3
32305: PPUSH
32306: CALL_OW 235
// end ;
32310: GO 32233
32312: POP
32313: POP
// end ;
32314: LD_VAR 0 1
32318: RET
// export function hHackFog ; begin
32319: LD_INT 0
32321: PPUSH
// FogOff ( true ) ;
32322: LD_INT 1
32324: PPUSH
32325: CALL_OW 344
// end ;
32329: LD_VAR 0 1
32333: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32334: LD_INT 0
32336: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32337: LD_VAR 0 1
32341: PPUSH
32342: LD_VAR 0 2
32346: PPUSH
32347: LD_VAR 0 3
32351: PPUSH
32352: LD_INT 1
32354: PPUSH
32355: LD_INT 1
32357: PPUSH
32358: CALL_OW 483
// CenterOnXY ( x , y ) ;
32362: LD_VAR 0 2
32366: PPUSH
32367: LD_VAR 0 3
32371: PPUSH
32372: CALL_OW 84
// end ; end_of_file
32376: LD_VAR 0 4
32380: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32381: LD_INT 0
32383: PPUSH
32384: PPUSH
32385: PPUSH
32386: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 264
32396: PUSH
32397: LD_EXP 52
32401: EQUAL
32402: IFFALSE 32474
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32404: LD_INT 68
32406: PPUSH
32407: LD_VAR 0 1
32411: PPUSH
32412: CALL_OW 255
32416: PPUSH
32417: CALL_OW 321
32421: PUSH
32422: LD_INT 2
32424: EQUAL
32425: IFFALSE 32437
// eff := 70 else
32427: LD_ADDR_VAR 0 4
32431: PUSH
32432: LD_INT 70
32434: ST_TO_ADDR
32435: GO 32445
// eff := 30 ;
32437: LD_ADDR_VAR 0 4
32441: PUSH
32442: LD_INT 30
32444: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32445: LD_VAR 0 1
32449: PPUSH
32450: CALL_OW 250
32454: PPUSH
32455: LD_VAR 0 1
32459: PPUSH
32460: CALL_OW 251
32464: PPUSH
32465: LD_VAR 0 4
32469: PPUSH
32470: CALL_OW 495
// end ; end ;
32474: LD_VAR 0 2
32478: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32479: LD_INT 0
32481: PPUSH
// end ;
32482: LD_VAR 0 4
32486: RET
// export function SOS_Command ( cmd ) ; begin
32487: LD_INT 0
32489: PPUSH
// end ;
32490: LD_VAR 0 2
32494: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32495: LD_INT 0
32497: PPUSH
// if cmd = 121 then
32498: LD_VAR 0 1
32502: PUSH
32503: LD_INT 121
32505: EQUAL
32506: IFFALSE 32508
// end ;
32508: LD_VAR 0 6
32512: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32513: LD_INT 0
32515: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32516: LD_VAR 0 1
32520: PUSH
32521: LD_INT 250
32523: EQUAL
32524: PUSH
32525: LD_VAR 0 2
32529: PPUSH
32530: CALL_OW 264
32534: PUSH
32535: LD_EXP 55
32539: EQUAL
32540: AND
32541: IFFALSE 32562
// MinerPlaceMine ( unit , x , y ) ;
32543: LD_VAR 0 2
32547: PPUSH
32548: LD_VAR 0 4
32552: PPUSH
32553: LD_VAR 0 5
32557: PPUSH
32558: CALL 34911 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32562: LD_VAR 0 1
32566: PUSH
32567: LD_INT 251
32569: EQUAL
32570: PUSH
32571: LD_VAR 0 2
32575: PPUSH
32576: CALL_OW 264
32580: PUSH
32581: LD_EXP 55
32585: EQUAL
32586: AND
32587: IFFALSE 32608
// MinerDetonateMine ( unit , x , y ) ;
32589: LD_VAR 0 2
32593: PPUSH
32594: LD_VAR 0 4
32598: PPUSH
32599: LD_VAR 0 5
32603: PPUSH
32604: CALL 35188 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32608: LD_VAR 0 1
32612: PUSH
32613: LD_INT 252
32615: EQUAL
32616: PUSH
32617: LD_VAR 0 2
32621: PPUSH
32622: CALL_OW 264
32626: PUSH
32627: LD_EXP 55
32631: EQUAL
32632: AND
32633: IFFALSE 32654
// MinerCreateMinefield ( unit , x , y ) ;
32635: LD_VAR 0 2
32639: PPUSH
32640: LD_VAR 0 4
32644: PPUSH
32645: LD_VAR 0 5
32649: PPUSH
32650: CALL 35605 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32654: LD_VAR 0 1
32658: PUSH
32659: LD_INT 253
32661: EQUAL
32662: PUSH
32663: LD_VAR 0 2
32667: PPUSH
32668: CALL_OW 257
32672: PUSH
32673: LD_INT 5
32675: EQUAL
32676: AND
32677: IFFALSE 32698
// ComBinocular ( unit , x , y ) ;
32679: LD_VAR 0 2
32683: PPUSH
32684: LD_VAR 0 4
32688: PPUSH
32689: LD_VAR 0 5
32693: PPUSH
32694: CALL 35976 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32698: LD_VAR 0 1
32702: PUSH
32703: LD_INT 254
32705: EQUAL
32706: PUSH
32707: LD_VAR 0 2
32711: PPUSH
32712: CALL_OW 264
32716: PUSH
32717: LD_EXP 50
32721: EQUAL
32722: AND
32723: PUSH
32724: LD_VAR 0 3
32728: PPUSH
32729: CALL_OW 263
32733: PUSH
32734: LD_INT 3
32736: EQUAL
32737: AND
32738: IFFALSE 32754
// HackDestroyVehicle ( unit , selectedUnit ) ;
32740: LD_VAR 0 2
32744: PPUSH
32745: LD_VAR 0 3
32749: PPUSH
32750: CALL 34271 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32754: LD_VAR 0 1
32758: PUSH
32759: LD_INT 255
32761: EQUAL
32762: PUSH
32763: LD_VAR 0 2
32767: PPUSH
32768: CALL_OW 264
32772: PUSH
32773: LD_INT 14
32775: PUSH
32776: LD_INT 53
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: IN
32783: AND
32784: PUSH
32785: LD_VAR 0 4
32789: PPUSH
32790: LD_VAR 0 5
32794: PPUSH
32795: CALL_OW 488
32799: AND
32800: IFFALSE 32824
// CutTreeXYR ( unit , x , y , 12 ) ;
32802: LD_VAR 0 2
32806: PPUSH
32807: LD_VAR 0 4
32811: PPUSH
32812: LD_VAR 0 5
32816: PPUSH
32817: LD_INT 12
32819: PPUSH
32820: CALL 32837 0 4
// end ;
32824: LD_VAR 0 6
32828: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32829: LD_INT 0
32831: PPUSH
// end ;
32832: LD_VAR 0 4
32836: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32837: LD_INT 0
32839: PPUSH
32840: PPUSH
32841: PPUSH
32842: PPUSH
32843: PPUSH
32844: PPUSH
32845: PPUSH
32846: PPUSH
32847: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32848: LD_VAR 0 1
32852: NOT
32853: PUSH
32854: LD_VAR 0 2
32858: PPUSH
32859: LD_VAR 0 3
32863: PPUSH
32864: CALL_OW 488
32868: NOT
32869: OR
32870: PUSH
32871: LD_VAR 0 4
32875: NOT
32876: OR
32877: IFFALSE 32881
// exit ;
32879: GO 33221
// list := [ ] ;
32881: LD_ADDR_VAR 0 13
32885: PUSH
32886: EMPTY
32887: ST_TO_ADDR
// if x - r < 0 then
32888: LD_VAR 0 2
32892: PUSH
32893: LD_VAR 0 4
32897: MINUS
32898: PUSH
32899: LD_INT 0
32901: LESS
32902: IFFALSE 32914
// min_x := 0 else
32904: LD_ADDR_VAR 0 7
32908: PUSH
32909: LD_INT 0
32911: ST_TO_ADDR
32912: GO 32930
// min_x := x - r ;
32914: LD_ADDR_VAR 0 7
32918: PUSH
32919: LD_VAR 0 2
32923: PUSH
32924: LD_VAR 0 4
32928: MINUS
32929: ST_TO_ADDR
// if y - r < 0 then
32930: LD_VAR 0 3
32934: PUSH
32935: LD_VAR 0 4
32939: MINUS
32940: PUSH
32941: LD_INT 0
32943: LESS
32944: IFFALSE 32956
// min_y := 0 else
32946: LD_ADDR_VAR 0 8
32950: PUSH
32951: LD_INT 0
32953: ST_TO_ADDR
32954: GO 32972
// min_y := y - r ;
32956: LD_ADDR_VAR 0 8
32960: PUSH
32961: LD_VAR 0 3
32965: PUSH
32966: LD_VAR 0 4
32970: MINUS
32971: ST_TO_ADDR
// max_x := x + r ;
32972: LD_ADDR_VAR 0 9
32976: PUSH
32977: LD_VAR 0 2
32981: PUSH
32982: LD_VAR 0 4
32986: PLUS
32987: ST_TO_ADDR
// max_y := y + r ;
32988: LD_ADDR_VAR 0 10
32992: PUSH
32993: LD_VAR 0 3
32997: PUSH
32998: LD_VAR 0 4
33002: PLUS
33003: ST_TO_ADDR
// for _x = min_x to max_x do
33004: LD_ADDR_VAR 0 11
33008: PUSH
33009: DOUBLE
33010: LD_VAR 0 7
33014: DEC
33015: ST_TO_ADDR
33016: LD_VAR 0 9
33020: PUSH
33021: FOR_TO
33022: IFFALSE 33139
// for _y = min_y to max_y do
33024: LD_ADDR_VAR 0 12
33028: PUSH
33029: DOUBLE
33030: LD_VAR 0 8
33034: DEC
33035: ST_TO_ADDR
33036: LD_VAR 0 10
33040: PUSH
33041: FOR_TO
33042: IFFALSE 33135
// begin if not ValidHex ( _x , _y ) then
33044: LD_VAR 0 11
33048: PPUSH
33049: LD_VAR 0 12
33053: PPUSH
33054: CALL_OW 488
33058: NOT
33059: IFFALSE 33063
// continue ;
33061: GO 33041
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33063: LD_VAR 0 11
33067: PPUSH
33068: LD_VAR 0 12
33072: PPUSH
33073: CALL_OW 351
33077: PUSH
33078: LD_VAR 0 11
33082: PPUSH
33083: LD_VAR 0 12
33087: PPUSH
33088: CALL_OW 554
33092: AND
33093: IFFALSE 33133
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33095: LD_ADDR_VAR 0 13
33099: PUSH
33100: LD_VAR 0 13
33104: PPUSH
33105: LD_VAR 0 13
33109: PUSH
33110: LD_INT 1
33112: PLUS
33113: PPUSH
33114: LD_VAR 0 11
33118: PUSH
33119: LD_VAR 0 12
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PPUSH
33128: CALL_OW 2
33132: ST_TO_ADDR
// end ;
33133: GO 33041
33135: POP
33136: POP
33137: GO 33021
33139: POP
33140: POP
// if not list then
33141: LD_VAR 0 13
33145: NOT
33146: IFFALSE 33150
// exit ;
33148: GO 33221
// for i in list do
33150: LD_ADDR_VAR 0 6
33154: PUSH
33155: LD_VAR 0 13
33159: PUSH
33160: FOR_IN
33161: IFFALSE 33219
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33163: LD_VAR 0 1
33167: PPUSH
33168: LD_STRING M
33170: PUSH
33171: LD_VAR 0 6
33175: PUSH
33176: LD_INT 1
33178: ARRAY
33179: PUSH
33180: LD_VAR 0 6
33184: PUSH
33185: LD_INT 2
33187: ARRAY
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: PUSH
33210: EMPTY
33211: LIST
33212: PPUSH
33213: CALL_OW 447
33217: GO 33160
33219: POP
33220: POP
// end ;
33221: LD_VAR 0 5
33225: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33226: LD_EXP 121
33230: NOT
33231: IFFALSE 33281
33233: GO 33235
33235: DISABLE
// begin initHack := true ;
33236: LD_ADDR_EXP 121
33240: PUSH
33241: LD_INT 1
33243: ST_TO_ADDR
// hackTanks := [ ] ;
33244: LD_ADDR_EXP 122
33248: PUSH
33249: EMPTY
33250: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33251: LD_ADDR_EXP 123
33255: PUSH
33256: EMPTY
33257: ST_TO_ADDR
// hackLimit := 3 ;
33258: LD_ADDR_EXP 124
33262: PUSH
33263: LD_INT 3
33265: ST_TO_ADDR
// hackDist := 12 ;
33266: LD_ADDR_EXP 125
33270: PUSH
33271: LD_INT 12
33273: ST_TO_ADDR
// hackCounter := [ ] ;
33274: LD_ADDR_EXP 126
33278: PUSH
33279: EMPTY
33280: ST_TO_ADDR
// end ;
33281: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33282: LD_EXP 121
33286: PUSH
33287: LD_INT 34
33289: PUSH
33290: LD_EXP 50
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PPUSH
33299: CALL_OW 69
33303: AND
33304: IFFALSE 33559
33306: GO 33308
33308: DISABLE
33309: LD_INT 0
33311: PPUSH
33312: PPUSH
// begin enable ;
33313: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33314: LD_ADDR_VAR 0 1
33318: PUSH
33319: LD_INT 34
33321: PUSH
33322: LD_EXP 50
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PPUSH
33331: CALL_OW 69
33335: PUSH
33336: FOR_IN
33337: IFFALSE 33557
// begin if not i in hackTanks then
33339: LD_VAR 0 1
33343: PUSH
33344: LD_EXP 122
33348: IN
33349: NOT
33350: IFFALSE 33433
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33352: LD_ADDR_EXP 122
33356: PUSH
33357: LD_EXP 122
33361: PPUSH
33362: LD_EXP 122
33366: PUSH
33367: LD_INT 1
33369: PLUS
33370: PPUSH
33371: LD_VAR 0 1
33375: PPUSH
33376: CALL_OW 1
33380: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33381: LD_ADDR_EXP 123
33385: PUSH
33386: LD_EXP 123
33390: PPUSH
33391: LD_EXP 123
33395: PUSH
33396: LD_INT 1
33398: PLUS
33399: PPUSH
33400: EMPTY
33401: PPUSH
33402: CALL_OW 1
33406: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33407: LD_ADDR_EXP 126
33411: PUSH
33412: LD_EXP 126
33416: PPUSH
33417: LD_EXP 126
33421: PUSH
33422: LD_INT 1
33424: PLUS
33425: PPUSH
33426: EMPTY
33427: PPUSH
33428: CALL_OW 1
33432: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33433: LD_VAR 0 1
33437: PPUSH
33438: CALL_OW 302
33442: NOT
33443: IFFALSE 33456
// begin HackUnlinkAll ( i ) ;
33445: LD_VAR 0 1
33449: PPUSH
33450: CALL 33562 0 1
// continue ;
33454: GO 33336
// end ; HackCheckCapturedStatus ( i ) ;
33456: LD_VAR 0 1
33460: PPUSH
33461: CALL 34005 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33465: LD_ADDR_VAR 0 2
33469: PUSH
33470: LD_INT 81
33472: PUSH
33473: LD_VAR 0 1
33477: PPUSH
33478: CALL_OW 255
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 33
33489: PUSH
33490: LD_INT 3
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 91
33499: PUSH
33500: LD_VAR 0 1
33504: PUSH
33505: LD_EXP 125
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 50
33517: PUSH
33518: EMPTY
33519: LIST
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: PPUSH
33527: CALL_OW 69
33531: ST_TO_ADDR
// if not tmp then
33532: LD_VAR 0 2
33536: NOT
33537: IFFALSE 33541
// continue ;
33539: GO 33336
// HackLink ( i , tmp ) ;
33541: LD_VAR 0 1
33545: PPUSH
33546: LD_VAR 0 2
33550: PPUSH
33551: CALL 33698 0 2
// end ;
33555: GO 33336
33557: POP
33558: POP
// end ;
33559: PPOPN 2
33561: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33562: LD_INT 0
33564: PPUSH
33565: PPUSH
33566: PPUSH
// if not hack in hackTanks then
33567: LD_VAR 0 1
33571: PUSH
33572: LD_EXP 122
33576: IN
33577: NOT
33578: IFFALSE 33582
// exit ;
33580: GO 33693
// index := GetElementIndex ( hackTanks , hack ) ;
33582: LD_ADDR_VAR 0 4
33586: PUSH
33587: LD_EXP 122
33591: PPUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL 41127 0 2
33601: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33602: LD_EXP 123
33606: PUSH
33607: LD_VAR 0 4
33611: ARRAY
33612: IFFALSE 33693
// begin for i in hackTanksCaptured [ index ] do
33614: LD_ADDR_VAR 0 3
33618: PUSH
33619: LD_EXP 123
33623: PUSH
33624: LD_VAR 0 4
33628: ARRAY
33629: PUSH
33630: FOR_IN
33631: IFFALSE 33657
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33633: LD_VAR 0 3
33637: PUSH
33638: LD_INT 1
33640: ARRAY
33641: PPUSH
33642: LD_VAR 0 3
33646: PUSH
33647: LD_INT 2
33649: ARRAY
33650: PPUSH
33651: CALL_OW 235
33655: GO 33630
33657: POP
33658: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33659: LD_ADDR_EXP 123
33663: PUSH
33664: LD_EXP 123
33668: PPUSH
33669: LD_VAR 0 4
33673: PPUSH
33674: EMPTY
33675: PPUSH
33676: CALL_OW 1
33680: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33681: LD_VAR 0 1
33685: PPUSH
33686: LD_INT 0
33688: PPUSH
33689: CALL_OW 505
// end ; end ;
33693: LD_VAR 0 2
33697: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33698: LD_INT 0
33700: PPUSH
33701: PPUSH
33702: PPUSH
// if not hack in hackTanks or not vehicles then
33703: LD_VAR 0 1
33707: PUSH
33708: LD_EXP 122
33712: IN
33713: NOT
33714: PUSH
33715: LD_VAR 0 2
33719: NOT
33720: OR
33721: IFFALSE 33725
// exit ;
33723: GO 34000
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33725: LD_ADDR_VAR 0 2
33729: PUSH
33730: LD_VAR 0 1
33734: PPUSH
33735: LD_VAR 0 2
33739: PPUSH
33740: LD_INT 1
33742: PPUSH
33743: LD_INT 1
33745: PPUSH
33746: CALL 41777 0 4
33750: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33751: LD_ADDR_VAR 0 5
33755: PUSH
33756: LD_EXP 122
33760: PPUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL 41127 0 2
33770: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33771: LD_EXP 123
33775: PUSH
33776: LD_VAR 0 5
33780: ARRAY
33781: PUSH
33782: LD_EXP 124
33786: LESS
33787: IFFALSE 33976
// begin for i := 1 to vehicles do
33789: LD_ADDR_VAR 0 4
33793: PUSH
33794: DOUBLE
33795: LD_INT 1
33797: DEC
33798: ST_TO_ADDR
33799: LD_VAR 0 2
33803: PUSH
33804: FOR_TO
33805: IFFALSE 33974
// begin if hackTanksCaptured [ index ] = hackLimit then
33807: LD_EXP 123
33811: PUSH
33812: LD_VAR 0 5
33816: ARRAY
33817: PUSH
33818: LD_EXP 124
33822: EQUAL
33823: IFFALSE 33827
// break ;
33825: GO 33974
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33827: LD_ADDR_EXP 126
33831: PUSH
33832: LD_EXP 126
33836: PPUSH
33837: LD_VAR 0 5
33841: PPUSH
33842: LD_EXP 126
33846: PUSH
33847: LD_VAR 0 5
33851: ARRAY
33852: PUSH
33853: LD_INT 1
33855: PLUS
33856: PPUSH
33857: CALL_OW 1
33861: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33862: LD_ADDR_EXP 123
33866: PUSH
33867: LD_EXP 123
33871: PPUSH
33872: LD_VAR 0 5
33876: PUSH
33877: LD_EXP 123
33881: PUSH
33882: LD_VAR 0 5
33886: ARRAY
33887: PUSH
33888: LD_INT 1
33890: PLUS
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PPUSH
33896: LD_VAR 0 2
33900: PUSH
33901: LD_VAR 0 4
33905: ARRAY
33906: PUSH
33907: LD_VAR 0 2
33911: PUSH
33912: LD_VAR 0 4
33916: ARRAY
33917: PPUSH
33918: CALL_OW 255
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PPUSH
33927: CALL 41342 0 3
33931: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33932: LD_VAR 0 2
33936: PUSH
33937: LD_VAR 0 4
33941: ARRAY
33942: PPUSH
33943: LD_VAR 0 1
33947: PPUSH
33948: CALL_OW 255
33952: PPUSH
33953: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33957: LD_VAR 0 2
33961: PUSH
33962: LD_VAR 0 4
33966: ARRAY
33967: PPUSH
33968: CALL_OW 141
// end ;
33972: GO 33804
33974: POP
33975: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33976: LD_VAR 0 1
33980: PPUSH
33981: LD_EXP 123
33985: PUSH
33986: LD_VAR 0 5
33990: ARRAY
33991: PUSH
33992: LD_INT 0
33994: PLUS
33995: PPUSH
33996: CALL_OW 505
// end ;
34000: LD_VAR 0 3
34004: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34005: LD_INT 0
34007: PPUSH
34008: PPUSH
34009: PPUSH
34010: PPUSH
// if not hack in hackTanks then
34011: LD_VAR 0 1
34015: PUSH
34016: LD_EXP 122
34020: IN
34021: NOT
34022: IFFALSE 34026
// exit ;
34024: GO 34266
// index := GetElementIndex ( hackTanks , hack ) ;
34026: LD_ADDR_VAR 0 4
34030: PUSH
34031: LD_EXP 122
34035: PPUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL 41127 0 2
34045: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34046: LD_ADDR_VAR 0 3
34050: PUSH
34051: DOUBLE
34052: LD_EXP 123
34056: PUSH
34057: LD_VAR 0 4
34061: ARRAY
34062: INC
34063: ST_TO_ADDR
34064: LD_INT 1
34066: PUSH
34067: FOR_DOWNTO
34068: IFFALSE 34240
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34070: LD_ADDR_VAR 0 5
34074: PUSH
34075: LD_EXP 123
34079: PUSH
34080: LD_VAR 0 4
34084: ARRAY
34085: PUSH
34086: LD_VAR 0 3
34090: ARRAY
34091: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34092: LD_VAR 0 5
34096: PUSH
34097: LD_INT 1
34099: ARRAY
34100: PPUSH
34101: CALL_OW 302
34105: NOT
34106: PUSH
34107: LD_VAR 0 5
34111: PUSH
34112: LD_INT 1
34114: ARRAY
34115: PPUSH
34116: CALL_OW 255
34120: PUSH
34121: LD_VAR 0 1
34125: PPUSH
34126: CALL_OW 255
34130: NONEQUAL
34131: OR
34132: IFFALSE 34238
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34134: LD_VAR 0 5
34138: PUSH
34139: LD_INT 1
34141: ARRAY
34142: PPUSH
34143: CALL_OW 305
34147: PUSH
34148: LD_VAR 0 5
34152: PUSH
34153: LD_INT 1
34155: ARRAY
34156: PPUSH
34157: CALL_OW 255
34161: PUSH
34162: LD_VAR 0 1
34166: PPUSH
34167: CALL_OW 255
34171: EQUAL
34172: AND
34173: IFFALSE 34197
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34175: LD_VAR 0 5
34179: PUSH
34180: LD_INT 1
34182: ARRAY
34183: PPUSH
34184: LD_VAR 0 5
34188: PUSH
34189: LD_INT 2
34191: ARRAY
34192: PPUSH
34193: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34197: LD_ADDR_EXP 123
34201: PUSH
34202: LD_EXP 123
34206: PPUSH
34207: LD_VAR 0 4
34211: PPUSH
34212: LD_EXP 123
34216: PUSH
34217: LD_VAR 0 4
34221: ARRAY
34222: PPUSH
34223: LD_VAR 0 3
34227: PPUSH
34228: CALL_OW 3
34232: PPUSH
34233: CALL_OW 1
34237: ST_TO_ADDR
// end ; end ;
34238: GO 34067
34240: POP
34241: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34242: LD_VAR 0 1
34246: PPUSH
34247: LD_EXP 123
34251: PUSH
34252: LD_VAR 0 4
34256: ARRAY
34257: PUSH
34258: LD_INT 0
34260: PLUS
34261: PPUSH
34262: CALL_OW 505
// end ;
34266: LD_VAR 0 2
34270: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34271: LD_INT 0
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
// if not hack in hackTanks then
34277: LD_VAR 0 1
34281: PUSH
34282: LD_EXP 122
34286: IN
34287: NOT
34288: IFFALSE 34292
// exit ;
34290: GO 34377
// index := GetElementIndex ( hackTanks , hack ) ;
34292: LD_ADDR_VAR 0 5
34296: PUSH
34297: LD_EXP 122
34301: PPUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: CALL 41127 0 2
34311: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34312: LD_ADDR_VAR 0 4
34316: PUSH
34317: DOUBLE
34318: LD_INT 1
34320: DEC
34321: ST_TO_ADDR
34322: LD_EXP 123
34326: PUSH
34327: LD_VAR 0 5
34331: ARRAY
34332: PUSH
34333: FOR_TO
34334: IFFALSE 34375
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34336: LD_EXP 123
34340: PUSH
34341: LD_VAR 0 5
34345: ARRAY
34346: PUSH
34347: LD_VAR 0 4
34351: ARRAY
34352: PUSH
34353: LD_INT 1
34355: ARRAY
34356: PUSH
34357: LD_VAR 0 2
34361: EQUAL
34362: IFFALSE 34373
// KillUnit ( vehicle ) ;
34364: LD_VAR 0 2
34368: PPUSH
34369: CALL_OW 66
34373: GO 34333
34375: POP
34376: POP
// end ;
34377: LD_VAR 0 3
34381: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34382: LD_EXP 127
34386: NOT
34387: IFFALSE 34422
34389: GO 34391
34391: DISABLE
// begin initMiner := true ;
34392: LD_ADDR_EXP 127
34396: PUSH
34397: LD_INT 1
34399: ST_TO_ADDR
// minersList := [ ] ;
34400: LD_ADDR_EXP 128
34404: PUSH
34405: EMPTY
34406: ST_TO_ADDR
// minerMinesList := [ ] ;
34407: LD_ADDR_EXP 129
34411: PUSH
34412: EMPTY
34413: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34414: LD_ADDR_EXP 130
34418: PUSH
34419: LD_INT 5
34421: ST_TO_ADDR
// end ;
34422: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34423: LD_EXP 127
34427: PUSH
34428: LD_INT 34
34430: PUSH
34431: LD_EXP 55
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PPUSH
34440: CALL_OW 69
34444: AND
34445: IFFALSE 34908
34447: GO 34449
34449: DISABLE
34450: LD_INT 0
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
// begin enable ;
34456: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34457: LD_ADDR_VAR 0 1
34461: PUSH
34462: LD_INT 34
34464: PUSH
34465: LD_EXP 55
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PPUSH
34474: CALL_OW 69
34478: PUSH
34479: FOR_IN
34480: IFFALSE 34552
// begin if not i in minersList then
34482: LD_VAR 0 1
34486: PUSH
34487: LD_EXP 128
34491: IN
34492: NOT
34493: IFFALSE 34550
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34495: LD_ADDR_EXP 128
34499: PUSH
34500: LD_EXP 128
34504: PPUSH
34505: LD_EXP 128
34509: PUSH
34510: LD_INT 1
34512: PLUS
34513: PPUSH
34514: LD_VAR 0 1
34518: PPUSH
34519: CALL_OW 1
34523: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34524: LD_ADDR_EXP 129
34528: PUSH
34529: LD_EXP 129
34533: PPUSH
34534: LD_EXP 129
34538: PUSH
34539: LD_INT 1
34541: PLUS
34542: PPUSH
34543: EMPTY
34544: PPUSH
34545: CALL_OW 1
34549: ST_TO_ADDR
// end end ;
34550: GO 34479
34552: POP
34553: POP
// for i := minerMinesList downto 1 do
34554: LD_ADDR_VAR 0 1
34558: PUSH
34559: DOUBLE
34560: LD_EXP 129
34564: INC
34565: ST_TO_ADDR
34566: LD_INT 1
34568: PUSH
34569: FOR_DOWNTO
34570: IFFALSE 34906
// begin if IsLive ( minersList [ i ] ) then
34572: LD_EXP 128
34576: PUSH
34577: LD_VAR 0 1
34581: ARRAY
34582: PPUSH
34583: CALL_OW 300
34587: IFFALSE 34615
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34589: LD_EXP 128
34593: PUSH
34594: LD_VAR 0 1
34598: ARRAY
34599: PPUSH
34600: LD_EXP 129
34604: PUSH
34605: LD_VAR 0 1
34609: ARRAY
34610: PPUSH
34611: CALL_OW 505
// if not minerMinesList [ i ] then
34615: LD_EXP 129
34619: PUSH
34620: LD_VAR 0 1
34624: ARRAY
34625: NOT
34626: IFFALSE 34630
// continue ;
34628: GO 34569
// for j := minerMinesList [ i ] downto 1 do
34630: LD_ADDR_VAR 0 2
34634: PUSH
34635: DOUBLE
34636: LD_EXP 129
34640: PUSH
34641: LD_VAR 0 1
34645: ARRAY
34646: INC
34647: ST_TO_ADDR
34648: LD_INT 1
34650: PUSH
34651: FOR_DOWNTO
34652: IFFALSE 34902
// begin side := GetSide ( minersList [ i ] ) ;
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_EXP 128
34663: PUSH
34664: LD_VAR 0 1
34668: ARRAY
34669: PPUSH
34670: CALL_OW 255
34674: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34675: LD_ADDR_VAR 0 4
34679: PUSH
34680: LD_EXP 129
34684: PUSH
34685: LD_VAR 0 1
34689: ARRAY
34690: PUSH
34691: LD_VAR 0 2
34695: ARRAY
34696: PUSH
34697: LD_INT 1
34699: ARRAY
34700: PPUSH
34701: LD_EXP 129
34705: PUSH
34706: LD_VAR 0 1
34710: ARRAY
34711: PUSH
34712: LD_VAR 0 2
34716: ARRAY
34717: PUSH
34718: LD_INT 2
34720: ARRAY
34721: PPUSH
34722: CALL_OW 428
34726: ST_TO_ADDR
// if not tmp then
34727: LD_VAR 0 4
34731: NOT
34732: IFFALSE 34736
// continue ;
34734: GO 34651
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34736: LD_VAR 0 4
34740: PUSH
34741: LD_INT 81
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PPUSH
34753: CALL_OW 69
34757: IN
34758: PUSH
34759: LD_EXP 129
34763: PUSH
34764: LD_VAR 0 1
34768: ARRAY
34769: PUSH
34770: LD_VAR 0 2
34774: ARRAY
34775: PUSH
34776: LD_INT 1
34778: ARRAY
34779: PPUSH
34780: LD_EXP 129
34784: PUSH
34785: LD_VAR 0 1
34789: ARRAY
34790: PUSH
34791: LD_VAR 0 2
34795: ARRAY
34796: PUSH
34797: LD_INT 2
34799: ARRAY
34800: PPUSH
34801: CALL_OW 458
34805: AND
34806: IFFALSE 34900
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34808: LD_EXP 129
34812: PUSH
34813: LD_VAR 0 1
34817: ARRAY
34818: PUSH
34819: LD_VAR 0 2
34823: ARRAY
34824: PUSH
34825: LD_INT 1
34827: ARRAY
34828: PPUSH
34829: LD_EXP 129
34833: PUSH
34834: LD_VAR 0 1
34838: ARRAY
34839: PUSH
34840: LD_VAR 0 2
34844: ARRAY
34845: PUSH
34846: LD_INT 2
34848: ARRAY
34849: PPUSH
34850: LD_VAR 0 3
34854: PPUSH
34855: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34859: LD_ADDR_EXP 129
34863: PUSH
34864: LD_EXP 129
34868: PPUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: LD_EXP 129
34878: PUSH
34879: LD_VAR 0 1
34883: ARRAY
34884: PPUSH
34885: LD_VAR 0 2
34889: PPUSH
34890: CALL_OW 3
34894: PPUSH
34895: CALL_OW 1
34899: ST_TO_ADDR
// end ; end ;
34900: GO 34651
34902: POP
34903: POP
// end ;
34904: GO 34569
34906: POP
34907: POP
// end ;
34908: PPOPN 4
34910: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34911: LD_INT 0
34913: PPUSH
34914: PPUSH
// result := false ;
34915: LD_ADDR_VAR 0 4
34919: PUSH
34920: LD_INT 0
34922: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34923: LD_VAR 0 1
34927: PPUSH
34928: CALL_OW 264
34932: PUSH
34933: LD_EXP 55
34937: EQUAL
34938: NOT
34939: IFFALSE 34943
// exit ;
34941: GO 35183
// index := GetElementIndex ( minersList , unit ) ;
34943: LD_ADDR_VAR 0 5
34947: PUSH
34948: LD_EXP 128
34952: PPUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: CALL 41127 0 2
34962: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34963: LD_EXP 129
34967: PUSH
34968: LD_VAR 0 5
34972: ARRAY
34973: PUSH
34974: LD_EXP 130
34978: GREATEREQUAL
34979: IFFALSE 34983
// exit ;
34981: GO 35183
// ComMoveXY ( unit , x , y ) ;
34983: LD_VAR 0 1
34987: PPUSH
34988: LD_VAR 0 2
34992: PPUSH
34993: LD_VAR 0 3
34997: PPUSH
34998: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35002: LD_INT 35
35004: PPUSH
35005: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35009: LD_VAR 0 1
35013: PPUSH
35014: LD_VAR 0 2
35018: PPUSH
35019: LD_VAR 0 3
35023: PPUSH
35024: CALL 71511 0 3
35028: NOT
35029: PUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 314
35039: AND
35040: IFFALSE 35044
// exit ;
35042: GO 35183
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35044: LD_VAR 0 2
35048: PPUSH
35049: LD_VAR 0 3
35053: PPUSH
35054: CALL_OW 428
35058: PUSH
35059: LD_VAR 0 1
35063: EQUAL
35064: PUSH
35065: LD_VAR 0 1
35069: PPUSH
35070: CALL_OW 314
35074: NOT
35075: AND
35076: IFFALSE 35002
// PlaySoundXY ( x , y , PlantMine ) ;
35078: LD_VAR 0 2
35082: PPUSH
35083: LD_VAR 0 3
35087: PPUSH
35088: LD_STRING PlantMine
35090: PPUSH
35091: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35095: LD_VAR 0 2
35099: PPUSH
35100: LD_VAR 0 3
35104: PPUSH
35105: LD_VAR 0 1
35109: PPUSH
35110: CALL_OW 255
35114: PPUSH
35115: LD_INT 0
35117: PPUSH
35118: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35122: LD_ADDR_EXP 129
35126: PUSH
35127: LD_EXP 129
35131: PPUSH
35132: LD_VAR 0 5
35136: PUSH
35137: LD_EXP 129
35141: PUSH
35142: LD_VAR 0 5
35146: ARRAY
35147: PUSH
35148: LD_INT 1
35150: PLUS
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PPUSH
35156: LD_VAR 0 2
35160: PUSH
35161: LD_VAR 0 3
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PPUSH
35170: CALL 41342 0 3
35174: ST_TO_ADDR
// result := true ;
35175: LD_ADDR_VAR 0 4
35179: PUSH
35180: LD_INT 1
35182: ST_TO_ADDR
// end ;
35183: LD_VAR 0 4
35187: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35188: LD_INT 0
35190: PPUSH
35191: PPUSH
35192: PPUSH
// if not unit in minersList then
35193: LD_VAR 0 1
35197: PUSH
35198: LD_EXP 128
35202: IN
35203: NOT
35204: IFFALSE 35208
// exit ;
35206: GO 35600
// index := GetElementIndex ( minersList , unit ) ;
35208: LD_ADDR_VAR 0 6
35212: PUSH
35213: LD_EXP 128
35217: PPUSH
35218: LD_VAR 0 1
35222: PPUSH
35223: CALL 41127 0 2
35227: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35228: LD_ADDR_VAR 0 5
35232: PUSH
35233: DOUBLE
35234: LD_EXP 129
35238: PUSH
35239: LD_VAR 0 6
35243: ARRAY
35244: INC
35245: ST_TO_ADDR
35246: LD_INT 1
35248: PUSH
35249: FOR_DOWNTO
35250: IFFALSE 35411
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35252: LD_EXP 129
35256: PUSH
35257: LD_VAR 0 6
35261: ARRAY
35262: PUSH
35263: LD_VAR 0 5
35267: ARRAY
35268: PUSH
35269: LD_INT 1
35271: ARRAY
35272: PUSH
35273: LD_VAR 0 2
35277: EQUAL
35278: PUSH
35279: LD_EXP 129
35283: PUSH
35284: LD_VAR 0 6
35288: ARRAY
35289: PUSH
35290: LD_VAR 0 5
35294: ARRAY
35295: PUSH
35296: LD_INT 2
35298: ARRAY
35299: PUSH
35300: LD_VAR 0 3
35304: EQUAL
35305: AND
35306: IFFALSE 35409
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35308: LD_EXP 129
35312: PUSH
35313: LD_VAR 0 6
35317: ARRAY
35318: PUSH
35319: LD_VAR 0 5
35323: ARRAY
35324: PUSH
35325: LD_INT 1
35327: ARRAY
35328: PPUSH
35329: LD_EXP 129
35333: PUSH
35334: LD_VAR 0 6
35338: ARRAY
35339: PUSH
35340: LD_VAR 0 5
35344: ARRAY
35345: PUSH
35346: LD_INT 2
35348: ARRAY
35349: PPUSH
35350: LD_VAR 0 1
35354: PPUSH
35355: CALL_OW 255
35359: PPUSH
35360: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35364: LD_ADDR_EXP 129
35368: PUSH
35369: LD_EXP 129
35373: PPUSH
35374: LD_VAR 0 6
35378: PPUSH
35379: LD_EXP 129
35383: PUSH
35384: LD_VAR 0 6
35388: ARRAY
35389: PPUSH
35390: LD_VAR 0 5
35394: PPUSH
35395: CALL_OW 3
35399: PPUSH
35400: CALL_OW 1
35404: ST_TO_ADDR
// exit ;
35405: POP
35406: POP
35407: GO 35600
// end ; end ;
35409: GO 35249
35411: POP
35412: POP
// for i := minerMinesList [ index ] downto 1 do
35413: LD_ADDR_VAR 0 5
35417: PUSH
35418: DOUBLE
35419: LD_EXP 129
35423: PUSH
35424: LD_VAR 0 6
35428: ARRAY
35429: INC
35430: ST_TO_ADDR
35431: LD_INT 1
35433: PUSH
35434: FOR_DOWNTO
35435: IFFALSE 35598
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35437: LD_EXP 129
35441: PUSH
35442: LD_VAR 0 6
35446: ARRAY
35447: PUSH
35448: LD_VAR 0 5
35452: ARRAY
35453: PUSH
35454: LD_INT 1
35456: ARRAY
35457: PPUSH
35458: LD_EXP 129
35462: PUSH
35463: LD_VAR 0 6
35467: ARRAY
35468: PUSH
35469: LD_VAR 0 5
35473: ARRAY
35474: PUSH
35475: LD_INT 2
35477: ARRAY
35478: PPUSH
35479: LD_VAR 0 2
35483: PPUSH
35484: LD_VAR 0 3
35488: PPUSH
35489: CALL_OW 298
35493: PUSH
35494: LD_INT 6
35496: LESS
35497: IFFALSE 35596
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35499: LD_EXP 129
35503: PUSH
35504: LD_VAR 0 6
35508: ARRAY
35509: PUSH
35510: LD_VAR 0 5
35514: ARRAY
35515: PUSH
35516: LD_INT 1
35518: ARRAY
35519: PPUSH
35520: LD_EXP 129
35524: PUSH
35525: LD_VAR 0 6
35529: ARRAY
35530: PUSH
35531: LD_VAR 0 5
35535: ARRAY
35536: PUSH
35537: LD_INT 2
35539: ARRAY
35540: PPUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: CALL_OW 255
35550: PPUSH
35551: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35555: LD_ADDR_EXP 129
35559: PUSH
35560: LD_EXP 129
35564: PPUSH
35565: LD_VAR 0 6
35569: PPUSH
35570: LD_EXP 129
35574: PUSH
35575: LD_VAR 0 6
35579: ARRAY
35580: PPUSH
35581: LD_VAR 0 5
35585: PPUSH
35586: CALL_OW 3
35590: PPUSH
35591: CALL_OW 1
35595: ST_TO_ADDR
// end ; end ;
35596: GO 35434
35598: POP
35599: POP
// end ;
35600: LD_VAR 0 4
35604: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35605: LD_INT 0
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
35614: PPUSH
35615: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35616: LD_VAR 0 1
35620: PPUSH
35621: CALL_OW 264
35625: PUSH
35626: LD_EXP 55
35630: EQUAL
35631: NOT
35632: PUSH
35633: LD_VAR 0 1
35637: PUSH
35638: LD_EXP 128
35642: IN
35643: NOT
35644: OR
35645: IFFALSE 35649
// exit ;
35647: GO 35971
// index := GetElementIndex ( minersList , unit ) ;
35649: LD_ADDR_VAR 0 6
35653: PUSH
35654: LD_EXP 128
35658: PPUSH
35659: LD_VAR 0 1
35663: PPUSH
35664: CALL 41127 0 2
35668: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35669: LD_ADDR_VAR 0 8
35673: PUSH
35674: LD_EXP 130
35678: PUSH
35679: LD_EXP 129
35683: PUSH
35684: LD_VAR 0 6
35688: ARRAY
35689: MINUS
35690: ST_TO_ADDR
// if not minesFreeAmount then
35691: LD_VAR 0 8
35695: NOT
35696: IFFALSE 35700
// exit ;
35698: GO 35971
// tmp := [ ] ;
35700: LD_ADDR_VAR 0 7
35704: PUSH
35705: EMPTY
35706: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35707: LD_ADDR_VAR 0 5
35711: PUSH
35712: DOUBLE
35713: LD_INT 1
35715: DEC
35716: ST_TO_ADDR
35717: LD_VAR 0 8
35721: PUSH
35722: FOR_TO
35723: IFFALSE 35918
// begin _d := rand ( 0 , 5 ) ;
35725: LD_ADDR_VAR 0 11
35729: PUSH
35730: LD_INT 0
35732: PPUSH
35733: LD_INT 5
35735: PPUSH
35736: CALL_OW 12
35740: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35741: LD_ADDR_VAR 0 12
35745: PUSH
35746: LD_INT 2
35748: PPUSH
35749: LD_INT 6
35751: PPUSH
35752: CALL_OW 12
35756: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35757: LD_ADDR_VAR 0 9
35761: PUSH
35762: LD_VAR 0 2
35766: PPUSH
35767: LD_VAR 0 11
35771: PPUSH
35772: LD_VAR 0 12
35776: PPUSH
35777: CALL_OW 272
35781: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35782: LD_ADDR_VAR 0 10
35786: PUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: LD_VAR 0 11
35796: PPUSH
35797: LD_VAR 0 12
35801: PPUSH
35802: CALL_OW 273
35806: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35807: LD_VAR 0 9
35811: PPUSH
35812: LD_VAR 0 10
35816: PPUSH
35817: CALL_OW 488
35821: PUSH
35822: LD_VAR 0 9
35826: PUSH
35827: LD_VAR 0 10
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_VAR 0 7
35840: IN
35841: NOT
35842: AND
35843: PUSH
35844: LD_VAR 0 9
35848: PPUSH
35849: LD_VAR 0 10
35853: PPUSH
35854: CALL_OW 458
35858: NOT
35859: AND
35860: IFFALSE 35902
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35862: LD_ADDR_VAR 0 7
35866: PUSH
35867: LD_VAR 0 7
35871: PPUSH
35872: LD_VAR 0 7
35876: PUSH
35877: LD_INT 1
35879: PLUS
35880: PPUSH
35881: LD_VAR 0 9
35885: PUSH
35886: LD_VAR 0 10
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PPUSH
35895: CALL_OW 1
35899: ST_TO_ADDR
35900: GO 35916
// i := i - 1 ;
35902: LD_ADDR_VAR 0 5
35906: PUSH
35907: LD_VAR 0 5
35911: PUSH
35912: LD_INT 1
35914: MINUS
35915: ST_TO_ADDR
// end ;
35916: GO 35722
35918: POP
35919: POP
// for i in tmp do
35920: LD_ADDR_VAR 0 5
35924: PUSH
35925: LD_VAR 0 7
35929: PUSH
35930: FOR_IN
35931: IFFALSE 35969
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35933: LD_VAR 0 1
35937: PPUSH
35938: LD_VAR 0 5
35942: PUSH
35943: LD_INT 1
35945: ARRAY
35946: PPUSH
35947: LD_VAR 0 5
35951: PUSH
35952: LD_INT 2
35954: ARRAY
35955: PPUSH
35956: CALL 34911 0 3
35960: NOT
35961: IFFALSE 35967
// exit ;
35963: POP
35964: POP
35965: GO 35971
35967: GO 35930
35969: POP
35970: POP
// end ;
35971: LD_VAR 0 4
35975: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35976: LD_INT 0
35978: PPUSH
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
35983: PPUSH
35984: PPUSH
// if not GetClass ( unit ) = class_sniper then
35985: LD_VAR 0 1
35989: PPUSH
35990: CALL_OW 257
35994: PUSH
35995: LD_INT 5
35997: EQUAL
35998: NOT
35999: IFFALSE 36003
// exit ;
36001: GO 36391
// dist := 8 ;
36003: LD_ADDR_VAR 0 5
36007: PUSH
36008: LD_INT 8
36010: ST_TO_ADDR
// viewRange := 12 ;
36011: LD_ADDR_VAR 0 7
36015: PUSH
36016: LD_INT 12
36018: ST_TO_ADDR
// side := GetSide ( unit ) ;
36019: LD_ADDR_VAR 0 6
36023: PUSH
36024: LD_VAR 0 1
36028: PPUSH
36029: CALL_OW 255
36033: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36034: LD_INT 61
36036: PPUSH
36037: LD_VAR 0 6
36041: PPUSH
36042: CALL_OW 321
36046: PUSH
36047: LD_INT 2
36049: EQUAL
36050: IFFALSE 36060
// viewRange := 16 ;
36052: LD_ADDR_VAR 0 7
36056: PUSH
36057: LD_INT 16
36059: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36060: LD_VAR 0 1
36064: PPUSH
36065: LD_VAR 0 2
36069: PPUSH
36070: LD_VAR 0 3
36074: PPUSH
36075: CALL_OW 297
36079: PUSH
36080: LD_VAR 0 5
36084: GREATER
36085: IFFALSE 36164
// begin ComMoveXY ( unit , x , y ) ;
36087: LD_VAR 0 1
36091: PPUSH
36092: LD_VAR 0 2
36096: PPUSH
36097: LD_VAR 0 3
36101: PPUSH
36102: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36106: LD_INT 35
36108: PPUSH
36109: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36113: LD_VAR 0 1
36117: PPUSH
36118: LD_VAR 0 2
36122: PPUSH
36123: LD_VAR 0 3
36127: PPUSH
36128: CALL 71511 0 3
36132: NOT
36133: IFFALSE 36137
// exit ;
36135: GO 36391
// until GetDistUnitXY ( unit , x , y ) < dist ;
36137: LD_VAR 0 1
36141: PPUSH
36142: LD_VAR 0 2
36146: PPUSH
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 297
36156: PUSH
36157: LD_VAR 0 5
36161: LESS
36162: IFFALSE 36106
// end ; ComTurnXY ( unit , x , y ) ;
36164: LD_VAR 0 1
36168: PPUSH
36169: LD_VAR 0 2
36173: PPUSH
36174: LD_VAR 0 3
36178: PPUSH
36179: CALL_OW 118
// wait ( 5 ) ;
36183: LD_INT 5
36185: PPUSH
36186: CALL_OW 67
// _d := GetDir ( unit ) ;
36190: LD_ADDR_VAR 0 10
36194: PUSH
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 254
36204: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36205: LD_ADDR_VAR 0 8
36209: PUSH
36210: LD_VAR 0 1
36214: PPUSH
36215: CALL_OW 250
36219: PPUSH
36220: LD_VAR 0 10
36224: PPUSH
36225: LD_VAR 0 5
36229: PPUSH
36230: CALL_OW 272
36234: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36235: LD_ADDR_VAR 0 9
36239: PUSH
36240: LD_VAR 0 1
36244: PPUSH
36245: CALL_OW 251
36249: PPUSH
36250: LD_VAR 0 10
36254: PPUSH
36255: LD_VAR 0 5
36259: PPUSH
36260: CALL_OW 273
36264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36265: LD_VAR 0 8
36269: PPUSH
36270: LD_VAR 0 9
36274: PPUSH
36275: CALL_OW 488
36279: NOT
36280: IFFALSE 36284
// exit ;
36282: GO 36391
// ComAnimCustom ( unit , 1 ) ;
36284: LD_VAR 0 1
36288: PPUSH
36289: LD_INT 1
36291: PPUSH
36292: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36296: LD_VAR 0 8
36300: PPUSH
36301: LD_VAR 0 9
36305: PPUSH
36306: LD_VAR 0 6
36310: PPUSH
36311: LD_VAR 0 7
36315: PPUSH
36316: CALL_OW 330
// repeat wait ( 1 ) ;
36320: LD_INT 1
36322: PPUSH
36323: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36327: LD_VAR 0 1
36331: PPUSH
36332: CALL_OW 316
36336: PUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL_OW 314
36346: OR
36347: PUSH
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL_OW 302
36357: NOT
36358: OR
36359: PUSH
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL_OW 301
36369: OR
36370: IFFALSE 36320
// RemoveSeeing ( _x , _y , side ) ;
36372: LD_VAR 0 8
36376: PPUSH
36377: LD_VAR 0 9
36381: PPUSH
36382: LD_VAR 0 6
36386: PPUSH
36387: CALL_OW 331
// end ; end_of_file
36391: LD_VAR 0 4
36395: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36396: LD_INT 0
36398: PPUSH
36399: PPUSH
// if exist_mode then
36400: LD_VAR 0 2
36404: IFFALSE 36429
// unit := CreateCharacter ( prefix & ident ) else
36406: LD_ADDR_VAR 0 5
36410: PUSH
36411: LD_VAR 0 3
36415: PUSH
36416: LD_VAR 0 1
36420: STR
36421: PPUSH
36422: CALL_OW 34
36426: ST_TO_ADDR
36427: GO 36444
// unit := NewCharacter ( ident ) ;
36429: LD_ADDR_VAR 0 5
36433: PUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 25
36443: ST_TO_ADDR
// result := unit ;
36444: LD_ADDR_VAR 0 4
36448: PUSH
36449: LD_VAR 0 5
36453: ST_TO_ADDR
// end ;
36454: LD_VAR 0 4
36458: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36459: LD_INT 0
36461: PPUSH
36462: PPUSH
// if not side or not nation then
36463: LD_VAR 0 1
36467: NOT
36468: PUSH
36469: LD_VAR 0 2
36473: NOT
36474: OR
36475: IFFALSE 36479
// exit ;
36477: GO 37243
// case nation of nation_american :
36479: LD_VAR 0 2
36483: PUSH
36484: LD_INT 1
36486: DOUBLE
36487: EQUAL
36488: IFTRUE 36492
36490: GO 36706
36492: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36493: LD_ADDR_VAR 0 4
36497: PUSH
36498: LD_INT 35
36500: PUSH
36501: LD_INT 45
36503: PUSH
36504: LD_INT 46
36506: PUSH
36507: LD_INT 47
36509: PUSH
36510: LD_INT 82
36512: PUSH
36513: LD_INT 83
36515: PUSH
36516: LD_INT 84
36518: PUSH
36519: LD_INT 85
36521: PUSH
36522: LD_INT 86
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: LD_INT 6
36533: PUSH
36534: LD_INT 15
36536: PUSH
36537: LD_INT 16
36539: PUSH
36540: LD_INT 7
36542: PUSH
36543: LD_INT 12
36545: PUSH
36546: LD_INT 13
36548: PUSH
36549: LD_INT 10
36551: PUSH
36552: LD_INT 14
36554: PUSH
36555: LD_INT 20
36557: PUSH
36558: LD_INT 21
36560: PUSH
36561: LD_INT 22
36563: PUSH
36564: LD_INT 25
36566: PUSH
36567: LD_INT 32
36569: PUSH
36570: LD_INT 27
36572: PUSH
36573: LD_INT 36
36575: PUSH
36576: LD_INT 69
36578: PUSH
36579: LD_INT 39
36581: PUSH
36582: LD_INT 34
36584: PUSH
36585: LD_INT 40
36587: PUSH
36588: LD_INT 48
36590: PUSH
36591: LD_INT 49
36593: PUSH
36594: LD_INT 50
36596: PUSH
36597: LD_INT 51
36599: PUSH
36600: LD_INT 52
36602: PUSH
36603: LD_INT 53
36605: PUSH
36606: LD_INT 54
36608: PUSH
36609: LD_INT 55
36611: PUSH
36612: LD_INT 56
36614: PUSH
36615: LD_INT 57
36617: PUSH
36618: LD_INT 58
36620: PUSH
36621: LD_INT 59
36623: PUSH
36624: LD_INT 60
36626: PUSH
36627: LD_INT 61
36629: PUSH
36630: LD_INT 62
36632: PUSH
36633: LD_INT 80
36635: PUSH
36636: LD_INT 82
36638: PUSH
36639: LD_INT 83
36641: PUSH
36642: LD_INT 84
36644: PUSH
36645: LD_INT 85
36647: PUSH
36648: LD_INT 86
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: ST_TO_ADDR
36704: GO 37167
36706: LD_INT 2
36708: DOUBLE
36709: EQUAL
36710: IFTRUE 36714
36712: GO 36936
36714: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36715: LD_ADDR_VAR 0 4
36719: PUSH
36720: LD_INT 35
36722: PUSH
36723: LD_INT 45
36725: PUSH
36726: LD_INT 46
36728: PUSH
36729: LD_INT 47
36731: PUSH
36732: LD_INT 82
36734: PUSH
36735: LD_INT 83
36737: PUSH
36738: LD_INT 84
36740: PUSH
36741: LD_INT 85
36743: PUSH
36744: LD_INT 87
36746: PUSH
36747: LD_INT 70
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 11
36755: PUSH
36756: LD_INT 3
36758: PUSH
36759: LD_INT 4
36761: PUSH
36762: LD_INT 5
36764: PUSH
36765: LD_INT 6
36767: PUSH
36768: LD_INT 15
36770: PUSH
36771: LD_INT 18
36773: PUSH
36774: LD_INT 7
36776: PUSH
36777: LD_INT 17
36779: PUSH
36780: LD_INT 8
36782: PUSH
36783: LD_INT 20
36785: PUSH
36786: LD_INT 21
36788: PUSH
36789: LD_INT 22
36791: PUSH
36792: LD_INT 72
36794: PUSH
36795: LD_INT 26
36797: PUSH
36798: LD_INT 69
36800: PUSH
36801: LD_INT 39
36803: PUSH
36804: LD_INT 40
36806: PUSH
36807: LD_INT 41
36809: PUSH
36810: LD_INT 42
36812: PUSH
36813: LD_INT 43
36815: PUSH
36816: LD_INT 48
36818: PUSH
36819: LD_INT 49
36821: PUSH
36822: LD_INT 50
36824: PUSH
36825: LD_INT 51
36827: PUSH
36828: LD_INT 52
36830: PUSH
36831: LD_INT 53
36833: PUSH
36834: LD_INT 54
36836: PUSH
36837: LD_INT 55
36839: PUSH
36840: LD_INT 56
36842: PUSH
36843: LD_INT 60
36845: PUSH
36846: LD_INT 61
36848: PUSH
36849: LD_INT 62
36851: PUSH
36852: LD_INT 66
36854: PUSH
36855: LD_INT 67
36857: PUSH
36858: LD_INT 68
36860: PUSH
36861: LD_INT 81
36863: PUSH
36864: LD_INT 82
36866: PUSH
36867: LD_INT 83
36869: PUSH
36870: LD_INT 84
36872: PUSH
36873: LD_INT 85
36875: PUSH
36876: LD_INT 87
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: ST_TO_ADDR
36934: GO 37167
36936: LD_INT 3
36938: DOUBLE
36939: EQUAL
36940: IFTRUE 36944
36942: GO 37166
36944: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36945: LD_ADDR_VAR 0 4
36949: PUSH
36950: LD_INT 46
36952: PUSH
36953: LD_INT 47
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 82
36964: PUSH
36965: LD_INT 83
36967: PUSH
36968: LD_INT 84
36970: PUSH
36971: LD_INT 85
36973: PUSH
36974: LD_INT 86
36976: PUSH
36977: LD_INT 11
36979: PUSH
36980: LD_INT 9
36982: PUSH
36983: LD_INT 20
36985: PUSH
36986: LD_INT 19
36988: PUSH
36989: LD_INT 21
36991: PUSH
36992: LD_INT 24
36994: PUSH
36995: LD_INT 22
36997: PUSH
36998: LD_INT 25
37000: PUSH
37001: LD_INT 28
37003: PUSH
37004: LD_INT 29
37006: PUSH
37007: LD_INT 30
37009: PUSH
37010: LD_INT 31
37012: PUSH
37013: LD_INT 37
37015: PUSH
37016: LD_INT 38
37018: PUSH
37019: LD_INT 32
37021: PUSH
37022: LD_INT 27
37024: PUSH
37025: LD_INT 33
37027: PUSH
37028: LD_INT 69
37030: PUSH
37031: LD_INT 39
37033: PUSH
37034: LD_INT 34
37036: PUSH
37037: LD_INT 40
37039: PUSH
37040: LD_INT 71
37042: PUSH
37043: LD_INT 23
37045: PUSH
37046: LD_INT 44
37048: PUSH
37049: LD_INT 48
37051: PUSH
37052: LD_INT 49
37054: PUSH
37055: LD_INT 50
37057: PUSH
37058: LD_INT 51
37060: PUSH
37061: LD_INT 52
37063: PUSH
37064: LD_INT 53
37066: PUSH
37067: LD_INT 54
37069: PUSH
37070: LD_INT 55
37072: PUSH
37073: LD_INT 56
37075: PUSH
37076: LD_INT 57
37078: PUSH
37079: LD_INT 58
37081: PUSH
37082: LD_INT 59
37084: PUSH
37085: LD_INT 63
37087: PUSH
37088: LD_INT 64
37090: PUSH
37091: LD_INT 65
37093: PUSH
37094: LD_INT 82
37096: PUSH
37097: LD_INT 83
37099: PUSH
37100: LD_INT 84
37102: PUSH
37103: LD_INT 85
37105: PUSH
37106: LD_INT 86
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: ST_TO_ADDR
37164: GO 37167
37166: POP
// if state > - 1 and state < 3 then
37167: LD_VAR 0 3
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: GREATER
37176: PUSH
37177: LD_VAR 0 3
37181: PUSH
37182: LD_INT 3
37184: LESS
37185: AND
37186: IFFALSE 37243
// for i in result do
37188: LD_ADDR_VAR 0 5
37192: PUSH
37193: LD_VAR 0 4
37197: PUSH
37198: FOR_IN
37199: IFFALSE 37241
// if GetTech ( i , side ) <> state then
37201: LD_VAR 0 5
37205: PPUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 321
37215: PUSH
37216: LD_VAR 0 3
37220: NONEQUAL
37221: IFFALSE 37239
// result := result diff i ;
37223: LD_ADDR_VAR 0 4
37227: PUSH
37228: LD_VAR 0 4
37232: PUSH
37233: LD_VAR 0 5
37237: DIFF
37238: ST_TO_ADDR
37239: GO 37198
37241: POP
37242: POP
// end ;
37243: LD_VAR 0 4
37247: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37248: LD_INT 0
37250: PPUSH
37251: PPUSH
37252: PPUSH
// result := true ;
37253: LD_ADDR_VAR 0 3
37257: PUSH
37258: LD_INT 1
37260: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37261: LD_ADDR_VAR 0 5
37265: PUSH
37266: LD_VAR 0 2
37270: PPUSH
37271: CALL_OW 480
37275: ST_TO_ADDR
// if not tmp then
37276: LD_VAR 0 5
37280: NOT
37281: IFFALSE 37285
// exit ;
37283: GO 37334
// for i in tmp do
37285: LD_ADDR_VAR 0 4
37289: PUSH
37290: LD_VAR 0 5
37294: PUSH
37295: FOR_IN
37296: IFFALSE 37332
// if GetTech ( i , side ) <> state_researched then
37298: LD_VAR 0 4
37302: PPUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 321
37312: PUSH
37313: LD_INT 2
37315: NONEQUAL
37316: IFFALSE 37330
// begin result := false ;
37318: LD_ADDR_VAR 0 3
37322: PUSH
37323: LD_INT 0
37325: ST_TO_ADDR
// exit ;
37326: POP
37327: POP
37328: GO 37334
// end ;
37330: GO 37295
37332: POP
37333: POP
// end ;
37334: LD_VAR 0 3
37338: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37339: LD_INT 0
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
37350: PPUSH
37351: PPUSH
37352: PPUSH
37353: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37354: LD_VAR 0 1
37358: NOT
37359: PUSH
37360: LD_VAR 0 1
37364: PPUSH
37365: CALL_OW 257
37369: PUSH
37370: LD_INT 9
37372: NONEQUAL
37373: OR
37374: IFFALSE 37378
// exit ;
37376: GO 37951
// side := GetSide ( unit ) ;
37378: LD_ADDR_VAR 0 9
37382: PUSH
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 255
37392: ST_TO_ADDR
// tech_space := tech_spacanom ;
37393: LD_ADDR_VAR 0 12
37397: PUSH
37398: LD_INT 29
37400: ST_TO_ADDR
// tech_time := tech_taurad ;
37401: LD_ADDR_VAR 0 13
37405: PUSH
37406: LD_INT 28
37408: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37409: LD_ADDR_VAR 0 11
37413: PUSH
37414: LD_VAR 0 1
37418: PPUSH
37419: CALL_OW 310
37423: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37424: LD_VAR 0 11
37428: PPUSH
37429: CALL_OW 247
37433: PUSH
37434: LD_INT 2
37436: EQUAL
37437: IFFALSE 37441
// exit ;
37439: GO 37951
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37441: LD_ADDR_VAR 0 8
37445: PUSH
37446: LD_INT 81
37448: PUSH
37449: LD_VAR 0 9
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 3
37460: PUSH
37461: LD_INT 21
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PPUSH
37479: CALL_OW 69
37483: ST_TO_ADDR
// if not tmp then
37484: LD_VAR 0 8
37488: NOT
37489: IFFALSE 37493
// exit ;
37491: GO 37951
// if in_unit then
37493: LD_VAR 0 11
37497: IFFALSE 37521
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37499: LD_ADDR_VAR 0 10
37503: PUSH
37504: LD_VAR 0 8
37508: PPUSH
37509: LD_VAR 0 11
37513: PPUSH
37514: CALL_OW 74
37518: ST_TO_ADDR
37519: GO 37541
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37521: LD_ADDR_VAR 0 10
37525: PUSH
37526: LD_VAR 0 8
37530: PPUSH
37531: LD_VAR 0 1
37535: PPUSH
37536: CALL_OW 74
37540: ST_TO_ADDR
// if not enemy then
37541: LD_VAR 0 10
37545: NOT
37546: IFFALSE 37550
// exit ;
37548: GO 37951
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37550: LD_VAR 0 11
37554: PUSH
37555: LD_VAR 0 11
37559: PPUSH
37560: LD_VAR 0 10
37564: PPUSH
37565: CALL_OW 296
37569: PUSH
37570: LD_INT 13
37572: GREATER
37573: AND
37574: PUSH
37575: LD_VAR 0 1
37579: PPUSH
37580: LD_VAR 0 10
37584: PPUSH
37585: CALL_OW 296
37589: PUSH
37590: LD_INT 12
37592: GREATER
37593: OR
37594: IFFALSE 37598
// exit ;
37596: GO 37951
// missile := [ 1 ] ;
37598: LD_ADDR_VAR 0 14
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: EMPTY
37607: LIST
37608: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37609: LD_VAR 0 9
37613: PPUSH
37614: LD_VAR 0 12
37618: PPUSH
37619: CALL_OW 325
37623: IFFALSE 37652
// missile := Insert ( missile , missile + 1 , 2 ) ;
37625: LD_ADDR_VAR 0 14
37629: PUSH
37630: LD_VAR 0 14
37634: PPUSH
37635: LD_VAR 0 14
37639: PUSH
37640: LD_INT 1
37642: PLUS
37643: PPUSH
37644: LD_INT 2
37646: PPUSH
37647: CALL_OW 2
37651: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37652: LD_VAR 0 9
37656: PPUSH
37657: LD_VAR 0 13
37661: PPUSH
37662: CALL_OW 325
37666: PUSH
37667: LD_VAR 0 10
37671: PPUSH
37672: CALL_OW 255
37676: PPUSH
37677: LD_VAR 0 13
37681: PPUSH
37682: CALL_OW 325
37686: NOT
37687: AND
37688: IFFALSE 37717
// missile := Insert ( missile , missile + 1 , 3 ) ;
37690: LD_ADDR_VAR 0 14
37694: PUSH
37695: LD_VAR 0 14
37699: PPUSH
37700: LD_VAR 0 14
37704: PUSH
37705: LD_INT 1
37707: PLUS
37708: PPUSH
37709: LD_INT 3
37711: PPUSH
37712: CALL_OW 2
37716: ST_TO_ADDR
// if missile < 2 then
37717: LD_VAR 0 14
37721: PUSH
37722: LD_INT 2
37724: LESS
37725: IFFALSE 37729
// exit ;
37727: GO 37951
// x := GetX ( enemy ) ;
37729: LD_ADDR_VAR 0 4
37733: PUSH
37734: LD_VAR 0 10
37738: PPUSH
37739: CALL_OW 250
37743: ST_TO_ADDR
// y := GetY ( enemy ) ;
37744: LD_ADDR_VAR 0 5
37748: PUSH
37749: LD_VAR 0 10
37753: PPUSH
37754: CALL_OW 251
37758: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37759: LD_ADDR_VAR 0 6
37763: PUSH
37764: LD_VAR 0 4
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PPUSH
37773: LD_INT 1
37775: PPUSH
37776: CALL_OW 12
37780: PLUS
37781: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37782: LD_ADDR_VAR 0 7
37786: PUSH
37787: LD_VAR 0 5
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PPUSH
37796: LD_INT 1
37798: PPUSH
37799: CALL_OW 12
37803: PLUS
37804: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37805: LD_VAR 0 6
37809: PPUSH
37810: LD_VAR 0 7
37814: PPUSH
37815: CALL_OW 488
37819: NOT
37820: IFFALSE 37842
// begin _x := x ;
37822: LD_ADDR_VAR 0 6
37826: PUSH
37827: LD_VAR 0 4
37831: ST_TO_ADDR
// _y := y ;
37832: LD_ADDR_VAR 0 7
37836: PUSH
37837: LD_VAR 0 5
37841: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37842: LD_ADDR_VAR 0 3
37846: PUSH
37847: LD_INT 1
37849: PPUSH
37850: LD_VAR 0 14
37854: PPUSH
37855: CALL_OW 12
37859: ST_TO_ADDR
// case i of 1 :
37860: LD_VAR 0 3
37864: PUSH
37865: LD_INT 1
37867: DOUBLE
37868: EQUAL
37869: IFTRUE 37873
37871: GO 37890
37873: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37874: LD_VAR 0 1
37878: PPUSH
37879: LD_VAR 0 10
37883: PPUSH
37884: CALL_OW 115
37888: GO 37951
37890: LD_INT 2
37892: DOUBLE
37893: EQUAL
37894: IFTRUE 37898
37896: GO 37920
37898: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37899: LD_VAR 0 1
37903: PPUSH
37904: LD_VAR 0 6
37908: PPUSH
37909: LD_VAR 0 7
37913: PPUSH
37914: CALL_OW 153
37918: GO 37951
37920: LD_INT 3
37922: DOUBLE
37923: EQUAL
37924: IFTRUE 37928
37926: GO 37950
37928: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37929: LD_VAR 0 1
37933: PPUSH
37934: LD_VAR 0 6
37938: PPUSH
37939: LD_VAR 0 7
37943: PPUSH
37944: CALL_OW 154
37948: GO 37951
37950: POP
// end ;
37951: LD_VAR 0 2
37955: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37956: LD_INT 0
37958: PPUSH
37959: PPUSH
37960: PPUSH
37961: PPUSH
37962: PPUSH
37963: PPUSH
// if not unit or not building then
37964: LD_VAR 0 1
37968: NOT
37969: PUSH
37970: LD_VAR 0 2
37974: NOT
37975: OR
37976: IFFALSE 37980
// exit ;
37978: GO 38138
// x := GetX ( building ) ;
37980: LD_ADDR_VAR 0 5
37984: PUSH
37985: LD_VAR 0 2
37989: PPUSH
37990: CALL_OW 250
37994: ST_TO_ADDR
// y := GetY ( building ) ;
37995: LD_ADDR_VAR 0 6
37999: PUSH
38000: LD_VAR 0 2
38004: PPUSH
38005: CALL_OW 251
38009: ST_TO_ADDR
// for i = 0 to 5 do
38010: LD_ADDR_VAR 0 4
38014: PUSH
38015: DOUBLE
38016: LD_INT 0
38018: DEC
38019: ST_TO_ADDR
38020: LD_INT 5
38022: PUSH
38023: FOR_TO
38024: IFFALSE 38136
// begin _x := ShiftX ( x , i , 3 ) ;
38026: LD_ADDR_VAR 0 7
38030: PUSH
38031: LD_VAR 0 5
38035: PPUSH
38036: LD_VAR 0 4
38040: PPUSH
38041: LD_INT 3
38043: PPUSH
38044: CALL_OW 272
38048: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38049: LD_ADDR_VAR 0 8
38053: PUSH
38054: LD_VAR 0 6
38058: PPUSH
38059: LD_VAR 0 4
38063: PPUSH
38064: LD_INT 3
38066: PPUSH
38067: CALL_OW 273
38071: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38072: LD_VAR 0 7
38076: PPUSH
38077: LD_VAR 0 8
38081: PPUSH
38082: CALL_OW 488
38086: NOT
38087: IFFALSE 38091
// continue ;
38089: GO 38023
// if HexInfo ( _x , _y ) = 0 then
38091: LD_VAR 0 7
38095: PPUSH
38096: LD_VAR 0 8
38100: PPUSH
38101: CALL_OW 428
38105: PUSH
38106: LD_INT 0
38108: EQUAL
38109: IFFALSE 38134
// begin ComMoveXY ( unit , _x , _y ) ;
38111: LD_VAR 0 1
38115: PPUSH
38116: LD_VAR 0 7
38120: PPUSH
38121: LD_VAR 0 8
38125: PPUSH
38126: CALL_OW 111
// exit ;
38130: POP
38131: POP
38132: GO 38138
// end ; end ;
38134: GO 38023
38136: POP
38137: POP
// end ;
38138: LD_VAR 0 3
38142: RET
// export function ScanBase ( side , base_area ) ; begin
38143: LD_INT 0
38145: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38146: LD_ADDR_VAR 0 3
38150: PUSH
38151: LD_VAR 0 2
38155: PPUSH
38156: LD_INT 81
38158: PUSH
38159: LD_VAR 0 1
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PPUSH
38168: CALL_OW 70
38172: ST_TO_ADDR
// end ;
38173: LD_VAR 0 3
38177: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38178: LD_INT 0
38180: PPUSH
38181: PPUSH
38182: PPUSH
38183: PPUSH
// result := false ;
38184: LD_ADDR_VAR 0 2
38188: PUSH
38189: LD_INT 0
38191: ST_TO_ADDR
// side := GetSide ( unit ) ;
38192: LD_ADDR_VAR 0 3
38196: PUSH
38197: LD_VAR 0 1
38201: PPUSH
38202: CALL_OW 255
38206: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38207: LD_ADDR_VAR 0 4
38211: PUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL_OW 248
38221: ST_TO_ADDR
// case nat of 1 :
38222: LD_VAR 0 4
38226: PUSH
38227: LD_INT 1
38229: DOUBLE
38230: EQUAL
38231: IFTRUE 38235
38233: GO 38246
38235: POP
// tech := tech_lassight ; 2 :
38236: LD_ADDR_VAR 0 5
38240: PUSH
38241: LD_INT 12
38243: ST_TO_ADDR
38244: GO 38285
38246: LD_INT 2
38248: DOUBLE
38249: EQUAL
38250: IFTRUE 38254
38252: GO 38265
38254: POP
// tech := tech_mortar ; 3 :
38255: LD_ADDR_VAR 0 5
38259: PUSH
38260: LD_INT 41
38262: ST_TO_ADDR
38263: GO 38285
38265: LD_INT 3
38267: DOUBLE
38268: EQUAL
38269: IFTRUE 38273
38271: GO 38284
38273: POP
// tech := tech_bazooka ; end ;
38274: LD_ADDR_VAR 0 5
38278: PUSH
38279: LD_INT 44
38281: ST_TO_ADDR
38282: GO 38285
38284: POP
// if Researched ( side , tech ) then
38285: LD_VAR 0 3
38289: PPUSH
38290: LD_VAR 0 5
38294: PPUSH
38295: CALL_OW 325
38299: IFFALSE 38326
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38301: LD_ADDR_VAR 0 2
38305: PUSH
38306: LD_INT 5
38308: PUSH
38309: LD_INT 8
38311: PUSH
38312: LD_INT 9
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: PUSH
38320: LD_VAR 0 4
38324: ARRAY
38325: ST_TO_ADDR
// end ;
38326: LD_VAR 0 2
38330: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38331: LD_INT 0
38333: PPUSH
38334: PPUSH
38335: PPUSH
// if not mines then
38336: LD_VAR 0 2
38340: NOT
38341: IFFALSE 38345
// exit ;
38343: GO 38489
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38345: LD_ADDR_VAR 0 5
38349: PUSH
38350: LD_INT 81
38352: PUSH
38353: LD_VAR 0 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: LD_INT 21
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PPUSH
38383: CALL_OW 69
38387: ST_TO_ADDR
// for i in mines do
38388: LD_ADDR_VAR 0 4
38392: PUSH
38393: LD_VAR 0 2
38397: PUSH
38398: FOR_IN
38399: IFFALSE 38487
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38401: LD_VAR 0 4
38405: PUSH
38406: LD_INT 1
38408: ARRAY
38409: PPUSH
38410: LD_VAR 0 4
38414: PUSH
38415: LD_INT 2
38417: ARRAY
38418: PPUSH
38419: CALL_OW 458
38423: NOT
38424: IFFALSE 38428
// continue ;
38426: GO 38398
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38428: LD_VAR 0 4
38432: PUSH
38433: LD_INT 1
38435: ARRAY
38436: PPUSH
38437: LD_VAR 0 4
38441: PUSH
38442: LD_INT 2
38444: ARRAY
38445: PPUSH
38446: CALL_OW 428
38450: PUSH
38451: LD_VAR 0 5
38455: IN
38456: IFFALSE 38485
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38458: LD_VAR 0 4
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: PPUSH
38467: LD_VAR 0 4
38471: PUSH
38472: LD_INT 2
38474: ARRAY
38475: PPUSH
38476: LD_VAR 0 1
38480: PPUSH
38481: CALL_OW 456
// end ;
38485: GO 38398
38487: POP
38488: POP
// end ;
38489: LD_VAR 0 3
38493: RET
// export function Count ( array ) ; var i ; begin
38494: LD_INT 0
38496: PPUSH
38497: PPUSH
// result := 0 ;
38498: LD_ADDR_VAR 0 2
38502: PUSH
38503: LD_INT 0
38505: ST_TO_ADDR
// for i in array do
38506: LD_ADDR_VAR 0 3
38510: PUSH
38511: LD_VAR 0 1
38515: PUSH
38516: FOR_IN
38517: IFFALSE 38541
// if i then
38519: LD_VAR 0 3
38523: IFFALSE 38539
// result := result + 1 ;
38525: LD_ADDR_VAR 0 2
38529: PUSH
38530: LD_VAR 0 2
38534: PUSH
38535: LD_INT 1
38537: PLUS
38538: ST_TO_ADDR
38539: GO 38516
38541: POP
38542: POP
// end ;
38543: LD_VAR 0 2
38547: RET
// export function IsEmpty ( building ) ; begin
38548: LD_INT 0
38550: PPUSH
// if not building then
38551: LD_VAR 0 1
38555: NOT
38556: IFFALSE 38560
// exit ;
38558: GO 38603
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38560: LD_ADDR_VAR 0 2
38564: PUSH
38565: LD_VAR 0 1
38569: PUSH
38570: LD_INT 22
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 255
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 58
38589: PUSH
38590: EMPTY
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PPUSH
38597: CALL_OW 69
38601: IN
38602: ST_TO_ADDR
// end ;
38603: LD_VAR 0 2
38607: RET
// export function IsNotFull ( building ) ; begin
38608: LD_INT 0
38610: PPUSH
// if not building then
38611: LD_VAR 0 1
38615: NOT
38616: IFFALSE 38620
// exit ;
38618: GO 38639
// result := UnitsInside ( building ) < 6 ;
38620: LD_ADDR_VAR 0 2
38624: PUSH
38625: LD_VAR 0 1
38629: PPUSH
38630: CALL_OW 313
38634: PUSH
38635: LD_INT 6
38637: LESS
38638: ST_TO_ADDR
// end ;
38639: LD_VAR 0 2
38643: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38644: LD_INT 0
38646: PPUSH
38647: PPUSH
38648: PPUSH
38649: PPUSH
// tmp := [ ] ;
38650: LD_ADDR_VAR 0 3
38654: PUSH
38655: EMPTY
38656: ST_TO_ADDR
// list := [ ] ;
38657: LD_ADDR_VAR 0 5
38661: PUSH
38662: EMPTY
38663: ST_TO_ADDR
// for i = 16 to 25 do
38664: LD_ADDR_VAR 0 4
38668: PUSH
38669: DOUBLE
38670: LD_INT 16
38672: DEC
38673: ST_TO_ADDR
38674: LD_INT 25
38676: PUSH
38677: FOR_TO
38678: IFFALSE 38751
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38680: LD_ADDR_VAR 0 3
38684: PUSH
38685: LD_VAR 0 3
38689: PUSH
38690: LD_INT 22
38692: PUSH
38693: LD_VAR 0 1
38697: PPUSH
38698: CALL_OW 255
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 91
38709: PUSH
38710: LD_VAR 0 1
38714: PUSH
38715: LD_INT 6
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 30
38725: PUSH
38726: LD_VAR 0 4
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: PPUSH
38743: CALL_OW 69
38747: ADD
38748: ST_TO_ADDR
38749: GO 38677
38751: POP
38752: POP
// for i = 1 to tmp do
38753: LD_ADDR_VAR 0 4
38757: PUSH
38758: DOUBLE
38759: LD_INT 1
38761: DEC
38762: ST_TO_ADDR
38763: LD_VAR 0 3
38767: PUSH
38768: FOR_TO
38769: IFFALSE 38857
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38771: LD_ADDR_VAR 0 5
38775: PUSH
38776: LD_VAR 0 5
38780: PUSH
38781: LD_VAR 0 3
38785: PUSH
38786: LD_VAR 0 4
38790: ARRAY
38791: PPUSH
38792: CALL_OW 266
38796: PUSH
38797: LD_VAR 0 3
38801: PUSH
38802: LD_VAR 0 4
38806: ARRAY
38807: PPUSH
38808: CALL_OW 250
38812: PUSH
38813: LD_VAR 0 3
38817: PUSH
38818: LD_VAR 0 4
38822: ARRAY
38823: PPUSH
38824: CALL_OW 251
38828: PUSH
38829: LD_VAR 0 3
38833: PUSH
38834: LD_VAR 0 4
38838: ARRAY
38839: PPUSH
38840: CALL_OW 254
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: ADD
38854: ST_TO_ADDR
38855: GO 38768
38857: POP
38858: POP
// result := list ;
38859: LD_ADDR_VAR 0 2
38863: PUSH
38864: LD_VAR 0 5
38868: ST_TO_ADDR
// end ;
38869: LD_VAR 0 2
38873: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38874: LD_INT 0
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
// if not factory then
38883: LD_VAR 0 1
38887: NOT
38888: IFFALSE 38892
// exit ;
38890: GO 39485
// if control = control_apeman then
38892: LD_VAR 0 4
38896: PUSH
38897: LD_INT 5
38899: EQUAL
38900: IFFALSE 39009
// begin tmp := UnitsInside ( factory ) ;
38902: LD_ADDR_VAR 0 8
38906: PUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 313
38916: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38917: LD_VAR 0 8
38921: PPUSH
38922: LD_INT 25
38924: PUSH
38925: LD_INT 12
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PPUSH
38932: CALL_OW 72
38936: NOT
38937: IFFALSE 38947
// control := control_manual ;
38939: LD_ADDR_VAR 0 4
38943: PUSH
38944: LD_INT 1
38946: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38947: LD_ADDR_VAR 0 8
38951: PUSH
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL 38644 0 1
38961: ST_TO_ADDR
// if tmp then
38962: LD_VAR 0 8
38966: IFFALSE 39009
// begin for i in tmp do
38968: LD_ADDR_VAR 0 7
38972: PUSH
38973: LD_VAR 0 8
38977: PUSH
38978: FOR_IN
38979: IFFALSE 39007
// if i [ 1 ] = b_ext_radio then
38981: LD_VAR 0 7
38985: PUSH
38986: LD_INT 1
38988: ARRAY
38989: PUSH
38990: LD_INT 22
38992: EQUAL
38993: IFFALSE 39005
// begin control := control_remote ;
38995: LD_ADDR_VAR 0 4
38999: PUSH
39000: LD_INT 2
39002: ST_TO_ADDR
// break ;
39003: GO 39007
// end ;
39005: GO 38978
39007: POP
39008: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39009: LD_VAR 0 1
39013: PPUSH
39014: LD_VAR 0 2
39018: PPUSH
39019: LD_VAR 0 3
39023: PPUSH
39024: LD_VAR 0 4
39028: PPUSH
39029: LD_VAR 0 5
39033: PPUSH
39034: CALL_OW 448
39038: IFFALSE 39073
// begin result := [ chassis , engine , control , weapon ] ;
39040: LD_ADDR_VAR 0 6
39044: PUSH
39045: LD_VAR 0 2
39049: PUSH
39050: LD_VAR 0 3
39054: PUSH
39055: LD_VAR 0 4
39059: PUSH
39060: LD_VAR 0 5
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: ST_TO_ADDR
// exit ;
39071: GO 39485
// end ; _chassis := AvailableChassisList ( factory ) ;
39073: LD_ADDR_VAR 0 9
39077: PUSH
39078: LD_VAR 0 1
39082: PPUSH
39083: CALL_OW 475
39087: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39088: LD_ADDR_VAR 0 11
39092: PUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 476
39102: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39103: LD_ADDR_VAR 0 12
39107: PUSH
39108: LD_VAR 0 1
39112: PPUSH
39113: CALL_OW 477
39117: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39118: LD_ADDR_VAR 0 10
39122: PUSH
39123: LD_VAR 0 1
39127: PPUSH
39128: CALL_OW 478
39132: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39133: LD_VAR 0 9
39137: NOT
39138: PUSH
39139: LD_VAR 0 11
39143: NOT
39144: OR
39145: PUSH
39146: LD_VAR 0 12
39150: NOT
39151: OR
39152: PUSH
39153: LD_VAR 0 10
39157: NOT
39158: OR
39159: IFFALSE 39194
// begin result := [ chassis , engine , control , weapon ] ;
39161: LD_ADDR_VAR 0 6
39165: PUSH
39166: LD_VAR 0 2
39170: PUSH
39171: LD_VAR 0 3
39175: PUSH
39176: LD_VAR 0 4
39180: PUSH
39181: LD_VAR 0 5
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: ST_TO_ADDR
// exit ;
39192: GO 39485
// end ; if not chassis in _chassis then
39194: LD_VAR 0 2
39198: PUSH
39199: LD_VAR 0 9
39203: IN
39204: NOT
39205: IFFALSE 39231
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39207: LD_ADDR_VAR 0 2
39211: PUSH
39212: LD_VAR 0 9
39216: PUSH
39217: LD_INT 1
39219: PPUSH
39220: LD_VAR 0 9
39224: PPUSH
39225: CALL_OW 12
39229: ARRAY
39230: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39231: LD_VAR 0 2
39235: PPUSH
39236: LD_VAR 0 3
39240: PPUSH
39241: CALL 39490 0 2
39245: NOT
39246: IFFALSE 39305
// repeat engine := _engine [ 1 ] ;
39248: LD_ADDR_VAR 0 3
39252: PUSH
39253: LD_VAR 0 11
39257: PUSH
39258: LD_INT 1
39260: ARRAY
39261: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39262: LD_ADDR_VAR 0 11
39266: PUSH
39267: LD_VAR 0 11
39271: PPUSH
39272: LD_INT 1
39274: PPUSH
39275: CALL_OW 3
39279: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39280: LD_VAR 0 2
39284: PPUSH
39285: LD_VAR 0 3
39289: PPUSH
39290: CALL 39490 0 2
39294: PUSH
39295: LD_VAR 0 11
39299: PUSH
39300: EMPTY
39301: EQUAL
39302: OR
39303: IFFALSE 39248
// if not control in _control then
39305: LD_VAR 0 4
39309: PUSH
39310: LD_VAR 0 12
39314: IN
39315: NOT
39316: IFFALSE 39342
// control := _control [ rand ( 1 , _control ) ] ;
39318: LD_ADDR_VAR 0 4
39322: PUSH
39323: LD_VAR 0 12
39327: PUSH
39328: LD_INT 1
39330: PPUSH
39331: LD_VAR 0 12
39335: PPUSH
39336: CALL_OW 12
39340: ARRAY
39341: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39342: LD_VAR 0 2
39346: PPUSH
39347: LD_VAR 0 5
39351: PPUSH
39352: CALL 39710 0 2
39356: NOT
39357: IFFALSE 39416
// repeat weapon := _weapon [ 1 ] ;
39359: LD_ADDR_VAR 0 5
39363: PUSH
39364: LD_VAR 0 10
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39373: LD_ADDR_VAR 0 10
39377: PUSH
39378: LD_VAR 0 10
39382: PPUSH
39383: LD_INT 1
39385: PPUSH
39386: CALL_OW 3
39390: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39391: LD_VAR 0 2
39395: PPUSH
39396: LD_VAR 0 5
39400: PPUSH
39401: CALL 39710 0 2
39405: PUSH
39406: LD_VAR 0 10
39410: PUSH
39411: EMPTY
39412: EQUAL
39413: OR
39414: IFFALSE 39359
// result := [ ] ;
39416: LD_ADDR_VAR 0 6
39420: PUSH
39421: EMPTY
39422: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39423: LD_VAR 0 1
39427: PPUSH
39428: LD_VAR 0 2
39432: PPUSH
39433: LD_VAR 0 3
39437: PPUSH
39438: LD_VAR 0 4
39442: PPUSH
39443: LD_VAR 0 5
39447: PPUSH
39448: CALL_OW 448
39452: IFFALSE 39485
// result := [ chassis , engine , control , weapon ] ;
39454: LD_ADDR_VAR 0 6
39458: PUSH
39459: LD_VAR 0 2
39463: PUSH
39464: LD_VAR 0 3
39468: PUSH
39469: LD_VAR 0 4
39473: PUSH
39474: LD_VAR 0 5
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: ST_TO_ADDR
// end ;
39485: LD_VAR 0 6
39489: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39490: LD_INT 0
39492: PPUSH
// if not chassis or not engine then
39493: LD_VAR 0 1
39497: NOT
39498: PUSH
39499: LD_VAR 0 2
39503: NOT
39504: OR
39505: IFFALSE 39509
// exit ;
39507: GO 39705
// case engine of engine_solar :
39509: LD_VAR 0 2
39513: PUSH
39514: LD_INT 2
39516: DOUBLE
39517: EQUAL
39518: IFTRUE 39522
39520: GO 39560
39522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_INT 11
39530: PUSH
39531: LD_INT 12
39533: PUSH
39534: LD_INT 13
39536: PUSH
39537: LD_INT 14
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 3
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
39558: GO 39689
39560: LD_INT 1
39562: DOUBLE
39563: EQUAL
39564: IFTRUE 39568
39566: GO 39630
39568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39569: LD_ADDR_VAR 0 3
39573: PUSH
39574: LD_INT 11
39576: PUSH
39577: LD_INT 12
39579: PUSH
39580: LD_INT 13
39582: PUSH
39583: LD_INT 14
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: LD_INT 3
39594: PUSH
39595: LD_INT 4
39597: PUSH
39598: LD_INT 5
39600: PUSH
39601: LD_INT 21
39603: PUSH
39604: LD_INT 23
39606: PUSH
39607: LD_INT 22
39609: PUSH
39610: LD_INT 24
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: ST_TO_ADDR
39628: GO 39689
39630: LD_INT 3
39632: DOUBLE
39633: EQUAL
39634: IFTRUE 39638
39636: GO 39688
39638: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39639: LD_ADDR_VAR 0 3
39643: PUSH
39644: LD_INT 13
39646: PUSH
39647: LD_INT 14
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: LD_INT 4
39658: PUSH
39659: LD_INT 5
39661: PUSH
39662: LD_INT 21
39664: PUSH
39665: LD_INT 22
39667: PUSH
39668: LD_INT 23
39670: PUSH
39671: LD_INT 24
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: ST_TO_ADDR
39686: GO 39689
39688: POP
// result := ( chassis in result ) ;
39689: LD_ADDR_VAR 0 3
39693: PUSH
39694: LD_VAR 0 1
39698: PUSH
39699: LD_VAR 0 3
39703: IN
39704: ST_TO_ADDR
// end ;
39705: LD_VAR 0 3
39709: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39710: LD_INT 0
39712: PPUSH
// if not chassis or not weapon then
39713: LD_VAR 0 1
39717: NOT
39718: PUSH
39719: LD_VAR 0 2
39723: NOT
39724: OR
39725: IFFALSE 39729
// exit ;
39727: GO 40755
// case weapon of us_machine_gun :
39729: LD_VAR 0 2
39733: PUSH
39734: LD_INT 2
39736: DOUBLE
39737: EQUAL
39738: IFTRUE 39742
39740: GO 39772
39742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39743: LD_ADDR_VAR 0 3
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 3
39756: PUSH
39757: LD_INT 4
39759: PUSH
39760: LD_INT 5
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: ST_TO_ADDR
39770: GO 40739
39772: LD_INT 3
39774: DOUBLE
39775: EQUAL
39776: IFTRUE 39780
39778: GO 39810
39780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39781: LD_ADDR_VAR 0 3
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: LD_INT 2
39791: PUSH
39792: LD_INT 3
39794: PUSH
39795: LD_INT 4
39797: PUSH
39798: LD_INT 5
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: ST_TO_ADDR
39808: GO 40739
39810: LD_INT 11
39812: DOUBLE
39813: EQUAL
39814: IFTRUE 39818
39816: GO 39848
39818: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39819: LD_ADDR_VAR 0 3
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: LD_INT 4
39835: PUSH
39836: LD_INT 5
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: ST_TO_ADDR
39846: GO 40739
39848: LD_INT 4
39850: DOUBLE
39851: EQUAL
39852: IFTRUE 39856
39854: GO 39882
39856: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39857: LD_ADDR_VAR 0 3
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 3
39867: PUSH
39868: LD_INT 4
39870: PUSH
39871: LD_INT 5
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
39880: GO 40739
39882: LD_INT 5
39884: DOUBLE
39885: EQUAL
39886: IFTRUE 39890
39888: GO 39916
39890: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39891: LD_ADDR_VAR 0 3
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 3
39901: PUSH
39902: LD_INT 4
39904: PUSH
39905: LD_INT 5
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: ST_TO_ADDR
39914: GO 40739
39916: LD_INT 9
39918: DOUBLE
39919: EQUAL
39920: IFTRUE 39924
39922: GO 39950
39924: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39925: LD_ADDR_VAR 0 3
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: LD_INT 3
39935: PUSH
39936: LD_INT 4
39938: PUSH
39939: LD_INT 5
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: ST_TO_ADDR
39948: GO 40739
39950: LD_INT 7
39952: DOUBLE
39953: EQUAL
39954: IFTRUE 39958
39956: GO 39984
39958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39959: LD_ADDR_VAR 0 3
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: LD_INT 4
39972: PUSH
39973: LD_INT 5
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
39982: GO 40739
39984: LD_INT 12
39986: DOUBLE
39987: EQUAL
39988: IFTRUE 39992
39990: GO 40018
39992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39993: LD_ADDR_VAR 0 3
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: LD_INT 3
40003: PUSH
40004: LD_INT 4
40006: PUSH
40007: LD_INT 5
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: ST_TO_ADDR
40016: GO 40739
40018: LD_INT 13
40020: DOUBLE
40021: EQUAL
40022: IFTRUE 40026
40024: GO 40052
40026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40027: LD_ADDR_VAR 0 3
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: LD_INT 3
40037: PUSH
40038: LD_INT 4
40040: PUSH
40041: LD_INT 5
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: ST_TO_ADDR
40050: GO 40739
40052: LD_INT 14
40054: DOUBLE
40055: EQUAL
40056: IFTRUE 40060
40058: GO 40078
40060: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40061: LD_ADDR_VAR 0 3
40065: PUSH
40066: LD_INT 4
40068: PUSH
40069: LD_INT 5
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: ST_TO_ADDR
40076: GO 40739
40078: LD_INT 6
40080: DOUBLE
40081: EQUAL
40082: IFTRUE 40086
40084: GO 40104
40086: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40087: LD_ADDR_VAR 0 3
40091: PUSH
40092: LD_INT 4
40094: PUSH
40095: LD_INT 5
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: ST_TO_ADDR
40102: GO 40739
40104: LD_INT 10
40106: DOUBLE
40107: EQUAL
40108: IFTRUE 40112
40110: GO 40130
40112: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40113: LD_ADDR_VAR 0 3
40117: PUSH
40118: LD_INT 4
40120: PUSH
40121: LD_INT 5
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: ST_TO_ADDR
40128: GO 40739
40130: LD_INT 22
40132: DOUBLE
40133: EQUAL
40134: IFTRUE 40138
40136: GO 40164
40138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40139: LD_ADDR_VAR 0 3
40143: PUSH
40144: LD_INT 11
40146: PUSH
40147: LD_INT 12
40149: PUSH
40150: LD_INT 13
40152: PUSH
40153: LD_INT 14
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: ST_TO_ADDR
40162: GO 40739
40164: LD_INT 23
40166: DOUBLE
40167: EQUAL
40168: IFTRUE 40172
40170: GO 40198
40172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40173: LD_ADDR_VAR 0 3
40177: PUSH
40178: LD_INT 11
40180: PUSH
40181: LD_INT 12
40183: PUSH
40184: LD_INT 13
40186: PUSH
40187: LD_INT 14
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: ST_TO_ADDR
40196: GO 40739
40198: LD_INT 24
40200: DOUBLE
40201: EQUAL
40202: IFTRUE 40206
40204: GO 40232
40206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40207: LD_ADDR_VAR 0 3
40211: PUSH
40212: LD_INT 11
40214: PUSH
40215: LD_INT 12
40217: PUSH
40218: LD_INT 13
40220: PUSH
40221: LD_INT 14
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: ST_TO_ADDR
40230: GO 40739
40232: LD_INT 30
40234: DOUBLE
40235: EQUAL
40236: IFTRUE 40240
40238: GO 40266
40240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: LD_INT 11
40248: PUSH
40249: LD_INT 12
40251: PUSH
40252: LD_INT 13
40254: PUSH
40255: LD_INT 14
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: ST_TO_ADDR
40264: GO 40739
40266: LD_INT 25
40268: DOUBLE
40269: EQUAL
40270: IFTRUE 40274
40272: GO 40292
40274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: LD_INT 13
40282: PUSH
40283: LD_INT 14
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: ST_TO_ADDR
40290: GO 40739
40292: LD_INT 27
40294: DOUBLE
40295: EQUAL
40296: IFTRUE 40300
40298: GO 40318
40300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40301: LD_ADDR_VAR 0 3
40305: PUSH
40306: LD_INT 13
40308: PUSH
40309: LD_INT 14
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: ST_TO_ADDR
40316: GO 40739
40318: LD_INT 28
40320: DOUBLE
40321: EQUAL
40322: IFTRUE 40326
40324: GO 40344
40326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40327: LD_ADDR_VAR 0 3
40331: PUSH
40332: LD_INT 13
40334: PUSH
40335: LD_INT 14
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: ST_TO_ADDR
40342: GO 40739
40344: LD_INT 29
40346: DOUBLE
40347: EQUAL
40348: IFTRUE 40352
40350: GO 40370
40352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40353: LD_ADDR_VAR 0 3
40357: PUSH
40358: LD_INT 13
40360: PUSH
40361: LD_INT 14
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: ST_TO_ADDR
40368: GO 40739
40370: LD_INT 31
40372: DOUBLE
40373: EQUAL
40374: IFTRUE 40378
40376: GO 40396
40378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40379: LD_ADDR_VAR 0 3
40383: PUSH
40384: LD_INT 13
40386: PUSH
40387: LD_INT 14
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: ST_TO_ADDR
40394: GO 40739
40396: LD_INT 26
40398: DOUBLE
40399: EQUAL
40400: IFTRUE 40404
40402: GO 40422
40404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40405: LD_ADDR_VAR 0 3
40409: PUSH
40410: LD_INT 13
40412: PUSH
40413: LD_INT 14
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: ST_TO_ADDR
40420: GO 40739
40422: LD_INT 42
40424: DOUBLE
40425: EQUAL
40426: IFTRUE 40430
40428: GO 40456
40430: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40431: LD_ADDR_VAR 0 3
40435: PUSH
40436: LD_INT 21
40438: PUSH
40439: LD_INT 22
40441: PUSH
40442: LD_INT 23
40444: PUSH
40445: LD_INT 24
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
40454: GO 40739
40456: LD_INT 43
40458: DOUBLE
40459: EQUAL
40460: IFTRUE 40464
40462: GO 40490
40464: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40465: LD_ADDR_VAR 0 3
40469: PUSH
40470: LD_INT 21
40472: PUSH
40473: LD_INT 22
40475: PUSH
40476: LD_INT 23
40478: PUSH
40479: LD_INT 24
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: ST_TO_ADDR
40488: GO 40739
40490: LD_INT 44
40492: DOUBLE
40493: EQUAL
40494: IFTRUE 40498
40496: GO 40524
40498: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40499: LD_ADDR_VAR 0 3
40503: PUSH
40504: LD_INT 21
40506: PUSH
40507: LD_INT 22
40509: PUSH
40510: LD_INT 23
40512: PUSH
40513: LD_INT 24
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
40522: GO 40739
40524: LD_INT 45
40526: DOUBLE
40527: EQUAL
40528: IFTRUE 40532
40530: GO 40558
40532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40533: LD_ADDR_VAR 0 3
40537: PUSH
40538: LD_INT 21
40540: PUSH
40541: LD_INT 22
40543: PUSH
40544: LD_INT 23
40546: PUSH
40547: LD_INT 24
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: ST_TO_ADDR
40556: GO 40739
40558: LD_INT 49
40560: DOUBLE
40561: EQUAL
40562: IFTRUE 40566
40564: GO 40592
40566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40567: LD_ADDR_VAR 0 3
40571: PUSH
40572: LD_INT 21
40574: PUSH
40575: LD_INT 22
40577: PUSH
40578: LD_INT 23
40580: PUSH
40581: LD_INT 24
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: ST_TO_ADDR
40590: GO 40739
40592: LD_INT 51
40594: DOUBLE
40595: EQUAL
40596: IFTRUE 40600
40598: GO 40626
40600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40601: LD_ADDR_VAR 0 3
40605: PUSH
40606: LD_INT 21
40608: PUSH
40609: LD_INT 22
40611: PUSH
40612: LD_INT 23
40614: PUSH
40615: LD_INT 24
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: ST_TO_ADDR
40624: GO 40739
40626: LD_INT 52
40628: DOUBLE
40629: EQUAL
40630: IFTRUE 40634
40632: GO 40660
40634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40635: LD_ADDR_VAR 0 3
40639: PUSH
40640: LD_INT 21
40642: PUSH
40643: LD_INT 22
40645: PUSH
40646: LD_INT 23
40648: PUSH
40649: LD_INT 24
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: ST_TO_ADDR
40658: GO 40739
40660: LD_INT 53
40662: DOUBLE
40663: EQUAL
40664: IFTRUE 40668
40666: GO 40686
40668: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40669: LD_ADDR_VAR 0 3
40673: PUSH
40674: LD_INT 23
40676: PUSH
40677: LD_INT 24
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: ST_TO_ADDR
40684: GO 40739
40686: LD_INT 46
40688: DOUBLE
40689: EQUAL
40690: IFTRUE 40694
40692: GO 40712
40694: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40695: LD_ADDR_VAR 0 3
40699: PUSH
40700: LD_INT 23
40702: PUSH
40703: LD_INT 24
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: ST_TO_ADDR
40710: GO 40739
40712: LD_INT 47
40714: DOUBLE
40715: EQUAL
40716: IFTRUE 40720
40718: GO 40738
40720: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40721: LD_ADDR_VAR 0 3
40725: PUSH
40726: LD_INT 23
40728: PUSH
40729: LD_INT 24
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: ST_TO_ADDR
40736: GO 40739
40738: POP
// result := ( chassis in result ) ;
40739: LD_ADDR_VAR 0 3
40743: PUSH
40744: LD_VAR 0 1
40748: PUSH
40749: LD_VAR 0 3
40753: IN
40754: ST_TO_ADDR
// end ;
40755: LD_VAR 0 3
40759: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40760: LD_INT 0
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
// result := array ;
40769: LD_ADDR_VAR 0 5
40773: PUSH
40774: LD_VAR 0 1
40778: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40779: LD_VAR 0 1
40783: NOT
40784: PUSH
40785: LD_VAR 0 2
40789: NOT
40790: OR
40791: PUSH
40792: LD_VAR 0 3
40796: NOT
40797: OR
40798: PUSH
40799: LD_VAR 0 2
40803: PUSH
40804: LD_VAR 0 1
40808: GREATER
40809: OR
40810: PUSH
40811: LD_VAR 0 3
40815: PUSH
40816: LD_VAR 0 1
40820: GREATER
40821: OR
40822: IFFALSE 40826
// exit ;
40824: GO 41122
// if direction then
40826: LD_VAR 0 4
40830: IFFALSE 40894
// begin d := 1 ;
40832: LD_ADDR_VAR 0 9
40836: PUSH
40837: LD_INT 1
40839: ST_TO_ADDR
// if i_from > i_to then
40840: LD_VAR 0 2
40844: PUSH
40845: LD_VAR 0 3
40849: GREATER
40850: IFFALSE 40876
// length := ( array - i_from ) + i_to else
40852: LD_ADDR_VAR 0 11
40856: PUSH
40857: LD_VAR 0 1
40861: PUSH
40862: LD_VAR 0 2
40866: MINUS
40867: PUSH
40868: LD_VAR 0 3
40872: PLUS
40873: ST_TO_ADDR
40874: GO 40892
// length := i_to - i_from ;
40876: LD_ADDR_VAR 0 11
40880: PUSH
40881: LD_VAR 0 3
40885: PUSH
40886: LD_VAR 0 2
40890: MINUS
40891: ST_TO_ADDR
// end else
40892: GO 40955
// begin d := - 1 ;
40894: LD_ADDR_VAR 0 9
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: ST_TO_ADDR
// if i_from > i_to then
40903: LD_VAR 0 2
40907: PUSH
40908: LD_VAR 0 3
40912: GREATER
40913: IFFALSE 40933
// length := i_from - i_to else
40915: LD_ADDR_VAR 0 11
40919: PUSH
40920: LD_VAR 0 2
40924: PUSH
40925: LD_VAR 0 3
40929: MINUS
40930: ST_TO_ADDR
40931: GO 40955
// length := ( array - i_to ) + i_from ;
40933: LD_ADDR_VAR 0 11
40937: PUSH
40938: LD_VAR 0 1
40942: PUSH
40943: LD_VAR 0 3
40947: MINUS
40948: PUSH
40949: LD_VAR 0 2
40953: PLUS
40954: ST_TO_ADDR
// end ; if not length then
40955: LD_VAR 0 11
40959: NOT
40960: IFFALSE 40964
// exit ;
40962: GO 41122
// tmp := array ;
40964: LD_ADDR_VAR 0 10
40968: PUSH
40969: LD_VAR 0 1
40973: ST_TO_ADDR
// for i = 1 to length do
40974: LD_ADDR_VAR 0 6
40978: PUSH
40979: DOUBLE
40980: LD_INT 1
40982: DEC
40983: ST_TO_ADDR
40984: LD_VAR 0 11
40988: PUSH
40989: FOR_TO
40990: IFFALSE 41110
// begin for j = 1 to array do
40992: LD_ADDR_VAR 0 7
40996: PUSH
40997: DOUBLE
40998: LD_INT 1
41000: DEC
41001: ST_TO_ADDR
41002: LD_VAR 0 1
41006: PUSH
41007: FOR_TO
41008: IFFALSE 41096
// begin k := j + d ;
41010: LD_ADDR_VAR 0 8
41014: PUSH
41015: LD_VAR 0 7
41019: PUSH
41020: LD_VAR 0 9
41024: PLUS
41025: ST_TO_ADDR
// if k > array then
41026: LD_VAR 0 8
41030: PUSH
41031: LD_VAR 0 1
41035: GREATER
41036: IFFALSE 41046
// k := 1 ;
41038: LD_ADDR_VAR 0 8
41042: PUSH
41043: LD_INT 1
41045: ST_TO_ADDR
// if not k then
41046: LD_VAR 0 8
41050: NOT
41051: IFFALSE 41063
// k := array ;
41053: LD_ADDR_VAR 0 8
41057: PUSH
41058: LD_VAR 0 1
41062: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41063: LD_ADDR_VAR 0 10
41067: PUSH
41068: LD_VAR 0 10
41072: PPUSH
41073: LD_VAR 0 8
41077: PPUSH
41078: LD_VAR 0 1
41082: PUSH
41083: LD_VAR 0 7
41087: ARRAY
41088: PPUSH
41089: CALL_OW 1
41093: ST_TO_ADDR
// end ;
41094: GO 41007
41096: POP
41097: POP
// array := tmp ;
41098: LD_ADDR_VAR 0 1
41102: PUSH
41103: LD_VAR 0 10
41107: ST_TO_ADDR
// end ;
41108: GO 40989
41110: POP
41111: POP
// result := array ;
41112: LD_ADDR_VAR 0 5
41116: PUSH
41117: LD_VAR 0 1
41121: ST_TO_ADDR
// end ;
41122: LD_VAR 0 5
41126: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41127: LD_INT 0
41129: PPUSH
41130: PPUSH
// result := 0 ;
41131: LD_ADDR_VAR 0 3
41135: PUSH
41136: LD_INT 0
41138: ST_TO_ADDR
// if not array or not value in array then
41139: LD_VAR 0 1
41143: NOT
41144: PUSH
41145: LD_VAR 0 2
41149: PUSH
41150: LD_VAR 0 1
41154: IN
41155: NOT
41156: OR
41157: IFFALSE 41161
// exit ;
41159: GO 41215
// for i = 1 to array do
41161: LD_ADDR_VAR 0 4
41165: PUSH
41166: DOUBLE
41167: LD_INT 1
41169: DEC
41170: ST_TO_ADDR
41171: LD_VAR 0 1
41175: PUSH
41176: FOR_TO
41177: IFFALSE 41213
// if value = array [ i ] then
41179: LD_VAR 0 2
41183: PUSH
41184: LD_VAR 0 1
41188: PUSH
41189: LD_VAR 0 4
41193: ARRAY
41194: EQUAL
41195: IFFALSE 41211
// begin result := i ;
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_VAR 0 4
41206: ST_TO_ADDR
// exit ;
41207: POP
41208: POP
41209: GO 41215
// end ;
41211: GO 41176
41213: POP
41214: POP
// end ;
41215: LD_VAR 0 3
41219: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41220: LD_INT 0
41222: PPUSH
// vc_chassis := chassis ;
41223: LD_ADDR_OWVAR 37
41227: PUSH
41228: LD_VAR 0 1
41232: ST_TO_ADDR
// vc_engine := engine ;
41233: LD_ADDR_OWVAR 39
41237: PUSH
41238: LD_VAR 0 2
41242: ST_TO_ADDR
// vc_control := control ;
41243: LD_ADDR_OWVAR 38
41247: PUSH
41248: LD_VAR 0 3
41252: ST_TO_ADDR
// vc_weapon := weapon ;
41253: LD_ADDR_OWVAR 40
41257: PUSH
41258: LD_VAR 0 4
41262: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41263: LD_ADDR_OWVAR 41
41267: PUSH
41268: LD_VAR 0 5
41272: ST_TO_ADDR
// end ;
41273: LD_VAR 0 6
41277: RET
// export function WantPlant ( unit ) ; var task ; begin
41278: LD_INT 0
41280: PPUSH
41281: PPUSH
// result := false ;
41282: LD_ADDR_VAR 0 2
41286: PUSH
41287: LD_INT 0
41289: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_VAR 0 1
41299: PPUSH
41300: CALL_OW 437
41304: ST_TO_ADDR
// if task then
41305: LD_VAR 0 3
41309: IFFALSE 41337
// if task [ 1 ] [ 1 ] = p then
41311: LD_VAR 0 3
41315: PUSH
41316: LD_INT 1
41318: ARRAY
41319: PUSH
41320: LD_INT 1
41322: ARRAY
41323: PUSH
41324: LD_STRING p
41326: EQUAL
41327: IFFALSE 41337
// result := true ;
41329: LD_ADDR_VAR 0 2
41333: PUSH
41334: LD_INT 1
41336: ST_TO_ADDR
// end ;
41337: LD_VAR 0 2
41341: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41342: LD_INT 0
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
// if pos < 1 then
41348: LD_VAR 0 2
41352: PUSH
41353: LD_INT 1
41355: LESS
41356: IFFALSE 41360
// exit ;
41358: GO 41663
// if pos = 1 then
41360: LD_VAR 0 2
41364: PUSH
41365: LD_INT 1
41367: EQUAL
41368: IFFALSE 41401
// result := Replace ( arr , pos [ 1 ] , value ) else
41370: LD_ADDR_VAR 0 4
41374: PUSH
41375: LD_VAR 0 1
41379: PPUSH
41380: LD_VAR 0 2
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PPUSH
41389: LD_VAR 0 3
41393: PPUSH
41394: CALL_OW 1
41398: ST_TO_ADDR
41399: GO 41663
// begin tmp := arr ;
41401: LD_ADDR_VAR 0 6
41405: PUSH
41406: LD_VAR 0 1
41410: ST_TO_ADDR
// s_arr := [ tmp ] ;
41411: LD_ADDR_VAR 0 7
41415: PUSH
41416: LD_VAR 0 6
41420: PUSH
41421: EMPTY
41422: LIST
41423: ST_TO_ADDR
// for i = 1 to pos - 1 do
41424: LD_ADDR_VAR 0 5
41428: PUSH
41429: DOUBLE
41430: LD_INT 1
41432: DEC
41433: ST_TO_ADDR
41434: LD_VAR 0 2
41438: PUSH
41439: LD_INT 1
41441: MINUS
41442: PUSH
41443: FOR_TO
41444: IFFALSE 41489
// begin tmp := tmp [ pos [ i ] ] ;
41446: LD_ADDR_VAR 0 6
41450: PUSH
41451: LD_VAR 0 6
41455: PUSH
41456: LD_VAR 0 2
41460: PUSH
41461: LD_VAR 0 5
41465: ARRAY
41466: ARRAY
41467: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41468: LD_ADDR_VAR 0 7
41472: PUSH
41473: LD_VAR 0 7
41477: PUSH
41478: LD_VAR 0 6
41482: PUSH
41483: EMPTY
41484: LIST
41485: ADD
41486: ST_TO_ADDR
// end ;
41487: GO 41443
41489: POP
41490: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41491: LD_ADDR_VAR 0 6
41495: PUSH
41496: LD_VAR 0 6
41500: PPUSH
41501: LD_VAR 0 2
41505: PUSH
41506: LD_VAR 0 2
41510: ARRAY
41511: PPUSH
41512: LD_VAR 0 3
41516: PPUSH
41517: CALL_OW 1
41521: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41522: LD_ADDR_VAR 0 7
41526: PUSH
41527: LD_VAR 0 7
41531: PPUSH
41532: LD_VAR 0 7
41536: PPUSH
41537: LD_VAR 0 6
41541: PPUSH
41542: CALL_OW 1
41546: ST_TO_ADDR
// for i = s_arr downto 2 do
41547: LD_ADDR_VAR 0 5
41551: PUSH
41552: DOUBLE
41553: LD_VAR 0 7
41557: INC
41558: ST_TO_ADDR
41559: LD_INT 2
41561: PUSH
41562: FOR_DOWNTO
41563: IFFALSE 41647
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41565: LD_ADDR_VAR 0 6
41569: PUSH
41570: LD_VAR 0 7
41574: PUSH
41575: LD_VAR 0 5
41579: PUSH
41580: LD_INT 1
41582: MINUS
41583: ARRAY
41584: PPUSH
41585: LD_VAR 0 2
41589: PUSH
41590: LD_VAR 0 5
41594: PUSH
41595: LD_INT 1
41597: MINUS
41598: ARRAY
41599: PPUSH
41600: LD_VAR 0 7
41604: PUSH
41605: LD_VAR 0 5
41609: ARRAY
41610: PPUSH
41611: CALL_OW 1
41615: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41616: LD_ADDR_VAR 0 7
41620: PUSH
41621: LD_VAR 0 7
41625: PPUSH
41626: LD_VAR 0 5
41630: PUSH
41631: LD_INT 1
41633: MINUS
41634: PPUSH
41635: LD_VAR 0 6
41639: PPUSH
41640: CALL_OW 1
41644: ST_TO_ADDR
// end ;
41645: GO 41562
41647: POP
41648: POP
// result := s_arr [ 1 ] ;
41649: LD_ADDR_VAR 0 4
41653: PUSH
41654: LD_VAR 0 7
41658: PUSH
41659: LD_INT 1
41661: ARRAY
41662: ST_TO_ADDR
// end ; end ;
41663: LD_VAR 0 4
41667: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41668: LD_INT 0
41670: PPUSH
41671: PPUSH
// if not list then
41672: LD_VAR 0 1
41676: NOT
41677: IFFALSE 41681
// exit ;
41679: GO 41772
// i := list [ pos1 ] ;
41681: LD_ADDR_VAR 0 5
41685: PUSH
41686: LD_VAR 0 1
41690: PUSH
41691: LD_VAR 0 2
41695: ARRAY
41696: ST_TO_ADDR
// if not i then
41697: LD_VAR 0 5
41701: NOT
41702: IFFALSE 41706
// exit ;
41704: GO 41772
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41706: LD_ADDR_VAR 0 1
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: LD_VAR 0 2
41720: PPUSH
41721: LD_VAR 0 1
41725: PUSH
41726: LD_VAR 0 3
41730: ARRAY
41731: PPUSH
41732: CALL_OW 1
41736: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41737: LD_ADDR_VAR 0 1
41741: PUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: LD_VAR 0 3
41751: PPUSH
41752: LD_VAR 0 5
41756: PPUSH
41757: CALL_OW 1
41761: ST_TO_ADDR
// result := list ;
41762: LD_ADDR_VAR 0 4
41766: PUSH
41767: LD_VAR 0 1
41771: ST_TO_ADDR
// end ;
41772: LD_VAR 0 4
41776: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41777: LD_INT 0
41779: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41780: LD_ADDR_VAR 0 5
41784: PUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 250
41794: PPUSH
41795: LD_VAR 0 1
41799: PPUSH
41800: CALL_OW 251
41804: PPUSH
41805: LD_VAR 0 2
41809: PPUSH
41810: LD_VAR 0 3
41814: PPUSH
41815: LD_VAR 0 4
41819: PPUSH
41820: CALL 41830 0 5
41824: ST_TO_ADDR
// end ;
41825: LD_VAR 0 5
41829: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41830: LD_INT 0
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
// if not list then
41836: LD_VAR 0 3
41840: NOT
41841: IFFALSE 41845
// exit ;
41843: GO 42233
// result := [ ] ;
41845: LD_ADDR_VAR 0 6
41849: PUSH
41850: EMPTY
41851: ST_TO_ADDR
// for i in list do
41852: LD_ADDR_VAR 0 7
41856: PUSH
41857: LD_VAR 0 3
41861: PUSH
41862: FOR_IN
41863: IFFALSE 42065
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41865: LD_ADDR_VAR 0 9
41869: PUSH
41870: LD_VAR 0 7
41874: PPUSH
41875: LD_VAR 0 1
41879: PPUSH
41880: LD_VAR 0 2
41884: PPUSH
41885: CALL_OW 297
41889: ST_TO_ADDR
// if not result then
41890: LD_VAR 0 6
41894: NOT
41895: IFFALSE 41921
// result := [ [ i , tmp ] ] else
41897: LD_ADDR_VAR 0 6
41901: PUSH
41902: LD_VAR 0 7
41906: PUSH
41907: LD_VAR 0 9
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: EMPTY
41917: LIST
41918: ST_TO_ADDR
41919: GO 42063
// begin if result [ result ] [ 2 ] < tmp then
41921: LD_VAR 0 6
41925: PUSH
41926: LD_VAR 0 6
41930: ARRAY
41931: PUSH
41932: LD_INT 2
41934: ARRAY
41935: PUSH
41936: LD_VAR 0 9
41940: LESS
41941: IFFALSE 41983
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41943: LD_ADDR_VAR 0 6
41947: PUSH
41948: LD_VAR 0 6
41952: PPUSH
41953: LD_VAR 0 6
41957: PUSH
41958: LD_INT 1
41960: PLUS
41961: PPUSH
41962: LD_VAR 0 7
41966: PUSH
41967: LD_VAR 0 9
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PPUSH
41976: CALL_OW 2
41980: ST_TO_ADDR
41981: GO 42063
// for j = 1 to result do
41983: LD_ADDR_VAR 0 8
41987: PUSH
41988: DOUBLE
41989: LD_INT 1
41991: DEC
41992: ST_TO_ADDR
41993: LD_VAR 0 6
41997: PUSH
41998: FOR_TO
41999: IFFALSE 42061
// begin if tmp < result [ j ] [ 2 ] then
42001: LD_VAR 0 9
42005: PUSH
42006: LD_VAR 0 6
42010: PUSH
42011: LD_VAR 0 8
42015: ARRAY
42016: PUSH
42017: LD_INT 2
42019: ARRAY
42020: LESS
42021: IFFALSE 42059
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42023: LD_ADDR_VAR 0 6
42027: PUSH
42028: LD_VAR 0 6
42032: PPUSH
42033: LD_VAR 0 8
42037: PPUSH
42038: LD_VAR 0 7
42042: PUSH
42043: LD_VAR 0 9
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PPUSH
42052: CALL_OW 2
42056: ST_TO_ADDR
// break ;
42057: GO 42061
// end ; end ;
42059: GO 41998
42061: POP
42062: POP
// end ; end ;
42063: GO 41862
42065: POP
42066: POP
// if result and not asc then
42067: LD_VAR 0 6
42071: PUSH
42072: LD_VAR 0 4
42076: NOT
42077: AND
42078: IFFALSE 42153
// begin tmp := result ;
42080: LD_ADDR_VAR 0 9
42084: PUSH
42085: LD_VAR 0 6
42089: ST_TO_ADDR
// for i = tmp downto 1 do
42090: LD_ADDR_VAR 0 7
42094: PUSH
42095: DOUBLE
42096: LD_VAR 0 9
42100: INC
42101: ST_TO_ADDR
42102: LD_INT 1
42104: PUSH
42105: FOR_DOWNTO
42106: IFFALSE 42151
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42108: LD_ADDR_VAR 0 6
42112: PUSH
42113: LD_VAR 0 6
42117: PPUSH
42118: LD_VAR 0 9
42122: PUSH
42123: LD_VAR 0 7
42127: MINUS
42128: PUSH
42129: LD_INT 1
42131: PLUS
42132: PPUSH
42133: LD_VAR 0 9
42137: PUSH
42138: LD_VAR 0 7
42142: ARRAY
42143: PPUSH
42144: CALL_OW 1
42148: ST_TO_ADDR
42149: GO 42105
42151: POP
42152: POP
// end ; tmp := [ ] ;
42153: LD_ADDR_VAR 0 9
42157: PUSH
42158: EMPTY
42159: ST_TO_ADDR
// if mode then
42160: LD_VAR 0 5
42164: IFFALSE 42233
// begin for i = 1 to result do
42166: LD_ADDR_VAR 0 7
42170: PUSH
42171: DOUBLE
42172: LD_INT 1
42174: DEC
42175: ST_TO_ADDR
42176: LD_VAR 0 6
42180: PUSH
42181: FOR_TO
42182: IFFALSE 42221
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42184: LD_ADDR_VAR 0 9
42188: PUSH
42189: LD_VAR 0 9
42193: PPUSH
42194: LD_VAR 0 7
42198: PPUSH
42199: LD_VAR 0 6
42203: PUSH
42204: LD_VAR 0 7
42208: ARRAY
42209: PUSH
42210: LD_INT 1
42212: ARRAY
42213: PPUSH
42214: CALL_OW 1
42218: ST_TO_ADDR
42219: GO 42181
42221: POP
42222: POP
// result := tmp ;
42223: LD_ADDR_VAR 0 6
42227: PUSH
42228: LD_VAR 0 9
42232: ST_TO_ADDR
// end ; end ;
42233: LD_VAR 0 6
42237: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42238: LD_INT 0
42240: PPUSH
42241: PPUSH
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42246: LD_ADDR_VAR 0 5
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: ST_TO_ADDR
// if not x or not y then
42268: LD_VAR 0 2
42272: NOT
42273: PUSH
42274: LD_VAR 0 3
42278: NOT
42279: OR
42280: IFFALSE 42284
// exit ;
42282: GO 43930
// if not range then
42284: LD_VAR 0 4
42288: NOT
42289: IFFALSE 42299
// range := 10 ;
42291: LD_ADDR_VAR 0 4
42295: PUSH
42296: LD_INT 10
42298: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42299: LD_ADDR_VAR 0 8
42303: PUSH
42304: LD_INT 81
42306: PUSH
42307: LD_VAR 0 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 92
42318: PUSH
42319: LD_VAR 0 2
42323: PUSH
42324: LD_VAR 0 3
42328: PUSH
42329: LD_VAR 0 4
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: LD_INT 21
42345: PUSH
42346: LD_INT 3
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: PPUSH
42362: CALL_OW 69
42366: ST_TO_ADDR
// if not tmp then
42367: LD_VAR 0 8
42371: NOT
42372: IFFALSE 42376
// exit ;
42374: GO 43930
// for i in tmp do
42376: LD_ADDR_VAR 0 6
42380: PUSH
42381: LD_VAR 0 8
42385: PUSH
42386: FOR_IN
42387: IFFALSE 43905
// begin points := [ 0 , 0 , 0 ] ;
42389: LD_ADDR_VAR 0 9
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
// bpoints := 1 ;
42408: LD_ADDR_VAR 0 10
42412: PUSH
42413: LD_INT 1
42415: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42416: LD_VAR 0 6
42420: PPUSH
42421: CALL_OW 247
42425: PUSH
42426: LD_INT 1
42428: DOUBLE
42429: EQUAL
42430: IFTRUE 42434
42432: GO 43012
42434: POP
// begin if GetClass ( i ) = 1 then
42435: LD_VAR 0 6
42439: PPUSH
42440: CALL_OW 257
42444: PUSH
42445: LD_INT 1
42447: EQUAL
42448: IFFALSE 42469
// points := [ 10 , 5 , 3 ] ;
42450: LD_ADDR_VAR 0 9
42454: PUSH
42455: LD_INT 10
42457: PUSH
42458: LD_INT 5
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42469: LD_VAR 0 6
42473: PPUSH
42474: CALL_OW 257
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: LD_INT 4
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: IN
42493: IFFALSE 42514
// points := [ 3 , 2 , 1 ] ;
42495: LD_ADDR_VAR 0 9
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42514: LD_VAR 0 6
42518: PPUSH
42519: CALL_OW 257
42523: PUSH
42524: LD_INT 5
42526: EQUAL
42527: IFFALSE 42548
// points := [ 130 , 5 , 2 ] ;
42529: LD_ADDR_VAR 0 9
42533: PUSH
42534: LD_INT 130
42536: PUSH
42537: LD_INT 5
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42548: LD_VAR 0 6
42552: PPUSH
42553: CALL_OW 257
42557: PUSH
42558: LD_INT 8
42560: EQUAL
42561: IFFALSE 42582
// points := [ 35 , 35 , 30 ] ;
42563: LD_ADDR_VAR 0 9
42567: PUSH
42568: LD_INT 35
42570: PUSH
42571: LD_INT 35
42573: PUSH
42574: LD_INT 30
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42582: LD_VAR 0 6
42586: PPUSH
42587: CALL_OW 257
42591: PUSH
42592: LD_INT 9
42594: EQUAL
42595: IFFALSE 42616
// points := [ 20 , 55 , 40 ] ;
42597: LD_ADDR_VAR 0 9
42601: PUSH
42602: LD_INT 20
42604: PUSH
42605: LD_INT 55
42607: PUSH
42608: LD_INT 40
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42616: LD_VAR 0 6
42620: PPUSH
42621: CALL_OW 257
42625: PUSH
42626: LD_INT 12
42628: PUSH
42629: LD_INT 16
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: IN
42636: IFFALSE 42657
// points := [ 5 , 3 , 2 ] ;
42638: LD_ADDR_VAR 0 9
42642: PUSH
42643: LD_INT 5
42645: PUSH
42646: LD_INT 3
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42657: LD_VAR 0 6
42661: PPUSH
42662: CALL_OW 257
42666: PUSH
42667: LD_INT 17
42669: EQUAL
42670: IFFALSE 42691
// points := [ 100 , 50 , 75 ] ;
42672: LD_ADDR_VAR 0 9
42676: PUSH
42677: LD_INT 100
42679: PUSH
42680: LD_INT 50
42682: PUSH
42683: LD_INT 75
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42691: LD_VAR 0 6
42695: PPUSH
42696: CALL_OW 257
42700: PUSH
42701: LD_INT 15
42703: EQUAL
42704: IFFALSE 42725
// points := [ 10 , 5 , 3 ] ;
42706: LD_ADDR_VAR 0 9
42710: PUSH
42711: LD_INT 10
42713: PUSH
42714: LD_INT 5
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: LIST
42724: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42725: LD_VAR 0 6
42729: PPUSH
42730: CALL_OW 257
42734: PUSH
42735: LD_INT 14
42737: EQUAL
42738: IFFALSE 42759
// points := [ 10 , 0 , 0 ] ;
42740: LD_ADDR_VAR 0 9
42744: PUSH
42745: LD_INT 10
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42759: LD_VAR 0 6
42763: PPUSH
42764: CALL_OW 257
42768: PUSH
42769: LD_INT 11
42771: EQUAL
42772: IFFALSE 42793
// points := [ 30 , 10 , 5 ] ;
42774: LD_ADDR_VAR 0 9
42778: PUSH
42779: LD_INT 30
42781: PUSH
42782: LD_INT 10
42784: PUSH
42785: LD_INT 5
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: LIST
42792: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42793: LD_VAR 0 1
42797: PPUSH
42798: LD_INT 5
42800: PPUSH
42801: CALL_OW 321
42805: PUSH
42806: LD_INT 2
42808: EQUAL
42809: IFFALSE 42826
// bpoints := bpoints * 1.8 ;
42811: LD_ADDR_VAR 0 10
42815: PUSH
42816: LD_VAR 0 10
42820: PUSH
42821: LD_REAL  1.80000000000000E+0000
42824: MUL
42825: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42826: LD_VAR 0 6
42830: PPUSH
42831: CALL_OW 257
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 3
42844: PUSH
42845: LD_INT 4
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: IN
42854: PUSH
42855: LD_VAR 0 1
42859: PPUSH
42860: LD_INT 51
42862: PPUSH
42863: CALL_OW 321
42867: PUSH
42868: LD_INT 2
42870: EQUAL
42871: AND
42872: IFFALSE 42889
// bpoints := bpoints * 1.2 ;
42874: LD_ADDR_VAR 0 10
42878: PUSH
42879: LD_VAR 0 10
42883: PUSH
42884: LD_REAL  1.20000000000000E+0000
42887: MUL
42888: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42889: LD_VAR 0 6
42893: PPUSH
42894: CALL_OW 257
42898: PUSH
42899: LD_INT 5
42901: PUSH
42902: LD_INT 7
42904: PUSH
42905: LD_INT 9
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: IN
42913: PUSH
42914: LD_VAR 0 1
42918: PPUSH
42919: LD_INT 52
42921: PPUSH
42922: CALL_OW 321
42926: PUSH
42927: LD_INT 2
42929: EQUAL
42930: AND
42931: IFFALSE 42948
// bpoints := bpoints * 1.5 ;
42933: LD_ADDR_VAR 0 10
42937: PUSH
42938: LD_VAR 0 10
42942: PUSH
42943: LD_REAL  1.50000000000000E+0000
42946: MUL
42947: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42948: LD_VAR 0 1
42952: PPUSH
42953: LD_INT 66
42955: PPUSH
42956: CALL_OW 321
42960: PUSH
42961: LD_INT 2
42963: EQUAL
42964: IFFALSE 42981
// bpoints := bpoints * 1.1 ;
42966: LD_ADDR_VAR 0 10
42970: PUSH
42971: LD_VAR 0 10
42975: PUSH
42976: LD_REAL  1.10000000000000E+0000
42979: MUL
42980: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42981: LD_ADDR_VAR 0 10
42985: PUSH
42986: LD_VAR 0 10
42990: PUSH
42991: LD_VAR 0 6
42995: PPUSH
42996: LD_INT 1
42998: PPUSH
42999: CALL_OW 259
43003: PUSH
43004: LD_REAL  1.15000000000000E+0000
43007: MUL
43008: MUL
43009: ST_TO_ADDR
// end ; unit_vehicle :
43010: GO 43834
43012: LD_INT 2
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43020
43018: GO 43822
43020: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43021: LD_VAR 0 6
43025: PPUSH
43026: CALL_OW 264
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 42
43036: PUSH
43037: LD_INT 24
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: IN
43045: IFFALSE 43066
// points := [ 25 , 5 , 3 ] ;
43047: LD_ADDR_VAR 0 9
43051: PUSH
43052: LD_INT 25
43054: PUSH
43055: LD_INT 5
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43066: LD_VAR 0 6
43070: PPUSH
43071: CALL_OW 264
43075: PUSH
43076: LD_INT 4
43078: PUSH
43079: LD_INT 43
43081: PUSH
43082: LD_INT 25
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: IN
43090: IFFALSE 43111
// points := [ 40 , 15 , 5 ] ;
43092: LD_ADDR_VAR 0 9
43096: PUSH
43097: LD_INT 40
43099: PUSH
43100: LD_INT 15
43102: PUSH
43103: LD_INT 5
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43111: LD_VAR 0 6
43115: PPUSH
43116: CALL_OW 264
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 23
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: IN
43131: IFFALSE 43152
// points := [ 7 , 25 , 8 ] ;
43133: LD_ADDR_VAR 0 9
43137: PUSH
43138: LD_INT 7
43140: PUSH
43141: LD_INT 25
43143: PUSH
43144: LD_INT 8
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43152: LD_VAR 0 6
43156: PPUSH
43157: CALL_OW 264
43161: PUSH
43162: LD_INT 5
43164: PUSH
43165: LD_INT 27
43167: PUSH
43168: LD_INT 44
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: IN
43176: IFFALSE 43197
// points := [ 14 , 50 , 16 ] ;
43178: LD_ADDR_VAR 0 9
43182: PUSH
43183: LD_INT 14
43185: PUSH
43186: LD_INT 50
43188: PUSH
43189: LD_INT 16
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43197: LD_VAR 0 6
43201: PPUSH
43202: CALL_OW 264
43206: PUSH
43207: LD_INT 6
43209: PUSH
43210: LD_INT 46
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: IN
43217: IFFALSE 43238
// points := [ 32 , 120 , 70 ] ;
43219: LD_ADDR_VAR 0 9
43223: PUSH
43224: LD_INT 32
43226: PUSH
43227: LD_INT 120
43229: PUSH
43230: LD_INT 70
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: LIST
43237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43238: LD_VAR 0 6
43242: PPUSH
43243: CALL_OW 264
43247: PUSH
43248: LD_INT 7
43250: PUSH
43251: LD_INT 28
43253: PUSH
43254: LD_INT 45
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: IN
43262: IFFALSE 43283
// points := [ 35 , 20 , 45 ] ;
43264: LD_ADDR_VAR 0 9
43268: PUSH
43269: LD_INT 35
43271: PUSH
43272: LD_INT 20
43274: PUSH
43275: LD_INT 45
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43283: LD_VAR 0 6
43287: PPUSH
43288: CALL_OW 264
43292: PUSH
43293: LD_INT 47
43295: PUSH
43296: EMPTY
43297: LIST
43298: IN
43299: IFFALSE 43320
// points := [ 67 , 45 , 75 ] ;
43301: LD_ADDR_VAR 0 9
43305: PUSH
43306: LD_INT 67
43308: PUSH
43309: LD_INT 45
43311: PUSH
43312: LD_INT 75
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43320: LD_VAR 0 6
43324: PPUSH
43325: CALL_OW 264
43329: PUSH
43330: LD_INT 26
43332: PUSH
43333: EMPTY
43334: LIST
43335: IN
43336: IFFALSE 43357
// points := [ 120 , 30 , 80 ] ;
43338: LD_ADDR_VAR 0 9
43342: PUSH
43343: LD_INT 120
43345: PUSH
43346: LD_INT 30
43348: PUSH
43349: LD_INT 80
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43357: LD_VAR 0 6
43361: PPUSH
43362: CALL_OW 264
43366: PUSH
43367: LD_INT 22
43369: PUSH
43370: EMPTY
43371: LIST
43372: IN
43373: IFFALSE 43394
// points := [ 40 , 1 , 1 ] ;
43375: LD_ADDR_VAR 0 9
43379: PUSH
43380: LD_INT 40
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43394: LD_VAR 0 6
43398: PPUSH
43399: CALL_OW 264
43403: PUSH
43404: LD_INT 29
43406: PUSH
43407: EMPTY
43408: LIST
43409: IN
43410: IFFALSE 43431
// points := [ 70 , 200 , 400 ] ;
43412: LD_ADDR_VAR 0 9
43416: PUSH
43417: LD_INT 70
43419: PUSH
43420: LD_INT 200
43422: PUSH
43423: LD_INT 400
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43431: LD_VAR 0 6
43435: PPUSH
43436: CALL_OW 264
43440: PUSH
43441: LD_INT 14
43443: PUSH
43444: LD_INT 53
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: IN
43451: IFFALSE 43472
// points := [ 40 , 10 , 20 ] ;
43453: LD_ADDR_VAR 0 9
43457: PUSH
43458: LD_INT 40
43460: PUSH
43461: LD_INT 10
43463: PUSH
43464: LD_INT 20
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43472: LD_VAR 0 6
43476: PPUSH
43477: CALL_OW 264
43481: PUSH
43482: LD_INT 9
43484: PUSH
43485: EMPTY
43486: LIST
43487: IN
43488: IFFALSE 43509
// points := [ 5 , 70 , 20 ] ;
43490: LD_ADDR_VAR 0 9
43494: PUSH
43495: LD_INT 5
43497: PUSH
43498: LD_INT 70
43500: PUSH
43501: LD_INT 20
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43509: LD_VAR 0 6
43513: PPUSH
43514: CALL_OW 264
43518: PUSH
43519: LD_INT 10
43521: PUSH
43522: EMPTY
43523: LIST
43524: IN
43525: IFFALSE 43546
// points := [ 35 , 110 , 70 ] ;
43527: LD_ADDR_VAR 0 9
43531: PUSH
43532: LD_INT 35
43534: PUSH
43535: LD_INT 110
43537: PUSH
43538: LD_INT 70
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: LIST
43545: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43546: LD_VAR 0 6
43550: PPUSH
43551: CALL_OW 265
43555: PUSH
43556: LD_INT 25
43558: EQUAL
43559: IFFALSE 43580
// points := [ 80 , 65 , 100 ] ;
43561: LD_ADDR_VAR 0 9
43565: PUSH
43566: LD_INT 80
43568: PUSH
43569: LD_INT 65
43571: PUSH
43572: LD_INT 100
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43580: LD_VAR 0 6
43584: PPUSH
43585: CALL_OW 263
43589: PUSH
43590: LD_INT 1
43592: EQUAL
43593: IFFALSE 43628
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43595: LD_ADDR_VAR 0 10
43599: PUSH
43600: LD_VAR 0 10
43604: PUSH
43605: LD_VAR 0 6
43609: PPUSH
43610: CALL_OW 311
43614: PPUSH
43615: LD_INT 3
43617: PPUSH
43618: CALL_OW 259
43622: PUSH
43623: LD_INT 4
43625: MUL
43626: MUL
43627: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43628: LD_VAR 0 6
43632: PPUSH
43633: CALL_OW 263
43637: PUSH
43638: LD_INT 2
43640: EQUAL
43641: IFFALSE 43692
// begin j := IsControledBy ( i ) ;
43643: LD_ADDR_VAR 0 7
43647: PUSH
43648: LD_VAR 0 6
43652: PPUSH
43653: CALL_OW 312
43657: ST_TO_ADDR
// if j then
43658: LD_VAR 0 7
43662: IFFALSE 43692
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43664: LD_ADDR_VAR 0 10
43668: PUSH
43669: LD_VAR 0 10
43673: PUSH
43674: LD_VAR 0 7
43678: PPUSH
43679: LD_INT 3
43681: PPUSH
43682: CALL_OW 259
43686: PUSH
43687: LD_INT 3
43689: MUL
43690: MUL
43691: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43692: LD_VAR 0 6
43696: PPUSH
43697: CALL_OW 264
43701: PUSH
43702: LD_INT 5
43704: PUSH
43705: LD_INT 6
43707: PUSH
43708: LD_INT 46
43710: PUSH
43711: LD_INT 44
43713: PUSH
43714: LD_INT 47
43716: PUSH
43717: LD_INT 45
43719: PUSH
43720: LD_INT 28
43722: PUSH
43723: LD_INT 7
43725: PUSH
43726: LD_INT 27
43728: PUSH
43729: LD_INT 29
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: IN
43744: PUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: LD_INT 52
43752: PPUSH
43753: CALL_OW 321
43757: PUSH
43758: LD_INT 2
43760: EQUAL
43761: AND
43762: IFFALSE 43779
// bpoints := bpoints * 1.2 ;
43764: LD_ADDR_VAR 0 10
43768: PUSH
43769: LD_VAR 0 10
43773: PUSH
43774: LD_REAL  1.20000000000000E+0000
43777: MUL
43778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43779: LD_VAR 0 6
43783: PPUSH
43784: CALL_OW 264
43788: PUSH
43789: LD_INT 6
43791: PUSH
43792: LD_INT 46
43794: PUSH
43795: LD_INT 47
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: IN
43803: IFFALSE 43820
// bpoints := bpoints * 1.2 ;
43805: LD_ADDR_VAR 0 10
43809: PUSH
43810: LD_VAR 0 10
43814: PUSH
43815: LD_REAL  1.20000000000000E+0000
43818: MUL
43819: ST_TO_ADDR
// end ; unit_building :
43820: GO 43834
43822: LD_INT 3
43824: DOUBLE
43825: EQUAL
43826: IFTRUE 43830
43828: GO 43833
43830: POP
// ; end ;
43831: GO 43834
43833: POP
// for j = 1 to 3 do
43834: LD_ADDR_VAR 0 7
43838: PUSH
43839: DOUBLE
43840: LD_INT 1
43842: DEC
43843: ST_TO_ADDR
43844: LD_INT 3
43846: PUSH
43847: FOR_TO
43848: IFFALSE 43901
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43850: LD_ADDR_VAR 0 5
43854: PUSH
43855: LD_VAR 0 5
43859: PPUSH
43860: LD_VAR 0 7
43864: PPUSH
43865: LD_VAR 0 5
43869: PUSH
43870: LD_VAR 0 7
43874: ARRAY
43875: PUSH
43876: LD_VAR 0 9
43880: PUSH
43881: LD_VAR 0 7
43885: ARRAY
43886: PUSH
43887: LD_VAR 0 10
43891: MUL
43892: PLUS
43893: PPUSH
43894: CALL_OW 1
43898: ST_TO_ADDR
43899: GO 43847
43901: POP
43902: POP
// end ;
43903: GO 42386
43905: POP
43906: POP
// result := Replace ( result , 4 , tmp ) ;
43907: LD_ADDR_VAR 0 5
43911: PUSH
43912: LD_VAR 0 5
43916: PPUSH
43917: LD_INT 4
43919: PPUSH
43920: LD_VAR 0 8
43924: PPUSH
43925: CALL_OW 1
43929: ST_TO_ADDR
// end ;
43930: LD_VAR 0 5
43934: RET
// export function DangerAtRange ( unit , range ) ; begin
43935: LD_INT 0
43937: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43938: LD_ADDR_VAR 0 3
43942: PUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL_OW 255
43952: PPUSH
43953: LD_VAR 0 1
43957: PPUSH
43958: CALL_OW 250
43962: PPUSH
43963: LD_VAR 0 1
43967: PPUSH
43968: CALL_OW 251
43972: PPUSH
43973: LD_VAR 0 2
43977: PPUSH
43978: CALL 42238 0 4
43982: ST_TO_ADDR
// end ;
43983: LD_VAR 0 3
43987: RET
// export function DangerInArea ( side , area ) ; begin
43988: LD_INT 0
43990: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43991: LD_ADDR_VAR 0 3
43995: PUSH
43996: LD_VAR 0 2
44000: PPUSH
44001: LD_INT 81
44003: PUSH
44004: LD_VAR 0 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PPUSH
44013: CALL_OW 70
44017: ST_TO_ADDR
// end ;
44018: LD_VAR 0 3
44022: RET
// export function IsExtension ( b ) ; begin
44023: LD_INT 0
44025: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44026: LD_ADDR_VAR 0 2
44030: PUSH
44031: LD_VAR 0 1
44035: PUSH
44036: LD_INT 23
44038: PUSH
44039: LD_INT 20
44041: PUSH
44042: LD_INT 22
44044: PUSH
44045: LD_INT 17
44047: PUSH
44048: LD_INT 24
44050: PUSH
44051: LD_INT 21
44053: PUSH
44054: LD_INT 19
44056: PUSH
44057: LD_INT 16
44059: PUSH
44060: LD_INT 25
44062: PUSH
44063: LD_INT 18
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: IN
44078: ST_TO_ADDR
// end ;
44079: LD_VAR 0 2
44083: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44084: LD_INT 0
44086: PPUSH
44087: PPUSH
44088: PPUSH
// result := [ ] ;
44089: LD_ADDR_VAR 0 4
44093: PUSH
44094: EMPTY
44095: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44096: LD_ADDR_VAR 0 5
44100: PUSH
44101: LD_VAR 0 2
44105: PPUSH
44106: LD_INT 21
44108: PUSH
44109: LD_INT 3
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PPUSH
44116: CALL_OW 70
44120: ST_TO_ADDR
// if not tmp then
44121: LD_VAR 0 5
44125: NOT
44126: IFFALSE 44130
// exit ;
44128: GO 44194
// if checkLink then
44130: LD_VAR 0 3
44134: IFFALSE 44184
// begin for i in tmp do
44136: LD_ADDR_VAR 0 6
44140: PUSH
44141: LD_VAR 0 5
44145: PUSH
44146: FOR_IN
44147: IFFALSE 44182
// if GetBase ( i ) <> base then
44149: LD_VAR 0 6
44153: PPUSH
44154: CALL_OW 274
44158: PUSH
44159: LD_VAR 0 1
44163: NONEQUAL
44164: IFFALSE 44180
// ComLinkToBase ( base , i ) ;
44166: LD_VAR 0 1
44170: PPUSH
44171: LD_VAR 0 6
44175: PPUSH
44176: CALL_OW 169
44180: GO 44146
44182: POP
44183: POP
// end ; result := tmp ;
44184: LD_ADDR_VAR 0 4
44188: PUSH
44189: LD_VAR 0 5
44193: ST_TO_ADDR
// end ;
44194: LD_VAR 0 4
44198: RET
// export function ComComplete ( units , b ) ; var i ; begin
44199: LD_INT 0
44201: PPUSH
44202: PPUSH
// if not units then
44203: LD_VAR 0 1
44207: NOT
44208: IFFALSE 44212
// exit ;
44210: GO 44302
// for i in units do
44212: LD_ADDR_VAR 0 4
44216: PUSH
44217: LD_VAR 0 1
44221: PUSH
44222: FOR_IN
44223: IFFALSE 44300
// if BuildingStatus ( b ) = bs_build then
44225: LD_VAR 0 2
44229: PPUSH
44230: CALL_OW 461
44234: PUSH
44235: LD_INT 1
44237: EQUAL
44238: IFFALSE 44298
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44240: LD_VAR 0 4
44244: PPUSH
44245: LD_STRING h
44247: PUSH
44248: LD_VAR 0 2
44252: PPUSH
44253: CALL_OW 250
44257: PUSH
44258: LD_VAR 0 2
44262: PPUSH
44263: CALL_OW 251
44267: PUSH
44268: LD_VAR 0 2
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: PUSH
44291: EMPTY
44292: LIST
44293: PPUSH
44294: CALL_OW 446
44298: GO 44222
44300: POP
44301: POP
// end ;
44302: LD_VAR 0 3
44306: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44307: LD_INT 0
44309: PPUSH
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
44314: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44315: LD_VAR 0 1
44319: NOT
44320: PUSH
44321: LD_VAR 0 1
44325: PPUSH
44326: CALL_OW 263
44330: PUSH
44331: LD_INT 2
44333: EQUAL
44334: NOT
44335: OR
44336: IFFALSE 44340
// exit ;
44338: GO 44656
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44340: LD_ADDR_VAR 0 6
44344: PUSH
44345: LD_INT 22
44347: PUSH
44348: LD_VAR 0 1
44352: PPUSH
44353: CALL_OW 255
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 30
44367: PUSH
44368: LD_INT 36
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 34
44377: PUSH
44378: LD_INT 31
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PPUSH
44394: CALL_OW 69
44398: ST_TO_ADDR
// if not tmp then
44399: LD_VAR 0 6
44403: NOT
44404: IFFALSE 44408
// exit ;
44406: GO 44656
// result := [ ] ;
44408: LD_ADDR_VAR 0 2
44412: PUSH
44413: EMPTY
44414: ST_TO_ADDR
// for i in tmp do
44415: LD_ADDR_VAR 0 3
44419: PUSH
44420: LD_VAR 0 6
44424: PUSH
44425: FOR_IN
44426: IFFALSE 44497
// begin t := UnitsInside ( i ) ;
44428: LD_ADDR_VAR 0 4
44432: PUSH
44433: LD_VAR 0 3
44437: PPUSH
44438: CALL_OW 313
44442: ST_TO_ADDR
// if t then
44443: LD_VAR 0 4
44447: IFFALSE 44495
// for j in t do
44449: LD_ADDR_VAR 0 7
44453: PUSH
44454: LD_VAR 0 4
44458: PUSH
44459: FOR_IN
44460: IFFALSE 44493
// result := Insert ( result , result + 1 , j ) ;
44462: LD_ADDR_VAR 0 2
44466: PUSH
44467: LD_VAR 0 2
44471: PPUSH
44472: LD_VAR 0 2
44476: PUSH
44477: LD_INT 1
44479: PLUS
44480: PPUSH
44481: LD_VAR 0 7
44485: PPUSH
44486: CALL_OW 2
44490: ST_TO_ADDR
44491: GO 44459
44493: POP
44494: POP
// end ;
44495: GO 44425
44497: POP
44498: POP
// if not result then
44499: LD_VAR 0 2
44503: NOT
44504: IFFALSE 44508
// exit ;
44506: GO 44656
// mech := result [ 1 ] ;
44508: LD_ADDR_VAR 0 5
44512: PUSH
44513: LD_VAR 0 2
44517: PUSH
44518: LD_INT 1
44520: ARRAY
44521: ST_TO_ADDR
// if result > 1 then
44522: LD_VAR 0 2
44526: PUSH
44527: LD_INT 1
44529: GREATER
44530: IFFALSE 44642
// for i = 2 to result do
44532: LD_ADDR_VAR 0 3
44536: PUSH
44537: DOUBLE
44538: LD_INT 2
44540: DEC
44541: ST_TO_ADDR
44542: LD_VAR 0 2
44546: PUSH
44547: FOR_TO
44548: IFFALSE 44640
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44550: LD_ADDR_VAR 0 4
44554: PUSH
44555: LD_VAR 0 2
44559: PUSH
44560: LD_VAR 0 3
44564: ARRAY
44565: PPUSH
44566: LD_INT 3
44568: PPUSH
44569: CALL_OW 259
44573: PUSH
44574: LD_VAR 0 2
44578: PUSH
44579: LD_VAR 0 3
44583: ARRAY
44584: PPUSH
44585: CALL_OW 432
44589: MINUS
44590: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44591: LD_VAR 0 4
44595: PUSH
44596: LD_VAR 0 5
44600: PPUSH
44601: LD_INT 3
44603: PPUSH
44604: CALL_OW 259
44608: PUSH
44609: LD_VAR 0 5
44613: PPUSH
44614: CALL_OW 432
44618: MINUS
44619: GREATEREQUAL
44620: IFFALSE 44638
// mech := result [ i ] ;
44622: LD_ADDR_VAR 0 5
44626: PUSH
44627: LD_VAR 0 2
44631: PUSH
44632: LD_VAR 0 3
44636: ARRAY
44637: ST_TO_ADDR
// end ;
44638: GO 44547
44640: POP
44641: POP
// ComLinkTo ( vehicle , mech ) ;
44642: LD_VAR 0 1
44646: PPUSH
44647: LD_VAR 0 5
44651: PPUSH
44652: CALL_OW 135
// end ;
44656: LD_VAR 0 2
44660: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44661: LD_INT 0
44663: PPUSH
44664: PPUSH
44665: PPUSH
44666: PPUSH
44667: PPUSH
44668: PPUSH
44669: PPUSH
44670: PPUSH
44671: PPUSH
44672: PPUSH
44673: PPUSH
44674: PPUSH
44675: PPUSH
// result := [ ] ;
44676: LD_ADDR_VAR 0 7
44680: PUSH
44681: EMPTY
44682: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44683: LD_VAR 0 1
44687: PPUSH
44688: CALL_OW 266
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: IN
44703: NOT
44704: IFFALSE 44708
// exit ;
44706: GO 46342
// if name then
44708: LD_VAR 0 3
44712: IFFALSE 44728
// SetBName ( base_dep , name ) ;
44714: LD_VAR 0 1
44718: PPUSH
44719: LD_VAR 0 3
44723: PPUSH
44724: CALL_OW 500
// base := GetBase ( base_dep ) ;
44728: LD_ADDR_VAR 0 15
44732: PUSH
44733: LD_VAR 0 1
44737: PPUSH
44738: CALL_OW 274
44742: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44743: LD_ADDR_VAR 0 16
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: CALL_OW 255
44757: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44758: LD_ADDR_VAR 0 17
44762: PUSH
44763: LD_VAR 0 1
44767: PPUSH
44768: CALL_OW 248
44772: ST_TO_ADDR
// if sources then
44773: LD_VAR 0 5
44777: IFFALSE 44824
// for i = 1 to 3 do
44779: LD_ADDR_VAR 0 8
44783: PUSH
44784: DOUBLE
44785: LD_INT 1
44787: DEC
44788: ST_TO_ADDR
44789: LD_INT 3
44791: PUSH
44792: FOR_TO
44793: IFFALSE 44822
// AddResourceType ( base , i , sources [ i ] ) ;
44795: LD_VAR 0 15
44799: PPUSH
44800: LD_VAR 0 8
44804: PPUSH
44805: LD_VAR 0 5
44809: PUSH
44810: LD_VAR 0 8
44814: ARRAY
44815: PPUSH
44816: CALL_OW 276
44820: GO 44792
44822: POP
44823: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44824: LD_ADDR_VAR 0 18
44828: PUSH
44829: LD_VAR 0 15
44833: PPUSH
44834: LD_VAR 0 2
44838: PPUSH
44839: LD_INT 1
44841: PPUSH
44842: CALL 44084 0 3
44846: ST_TO_ADDR
// InitHc ;
44847: CALL_OW 19
// InitUc ;
44851: CALL_OW 18
// uc_side := side ;
44855: LD_ADDR_OWVAR 20
44859: PUSH
44860: LD_VAR 0 16
44864: ST_TO_ADDR
// uc_nation := nation ;
44865: LD_ADDR_OWVAR 21
44869: PUSH
44870: LD_VAR 0 17
44874: ST_TO_ADDR
// if buildings then
44875: LD_VAR 0 18
44879: IFFALSE 46201
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44881: LD_ADDR_VAR 0 19
44885: PUSH
44886: LD_VAR 0 18
44890: PPUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 30
44896: PUSH
44897: LD_INT 29
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 30
44906: PUSH
44907: LD_INT 30
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: PPUSH
44919: CALL_OW 72
44923: ST_TO_ADDR
// if tmp then
44924: LD_VAR 0 19
44928: IFFALSE 44976
// for i in tmp do
44930: LD_ADDR_VAR 0 8
44934: PUSH
44935: LD_VAR 0 19
44939: PUSH
44940: FOR_IN
44941: IFFALSE 44974
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44943: LD_VAR 0 8
44947: PPUSH
44948: CALL_OW 250
44952: PPUSH
44953: LD_VAR 0 8
44957: PPUSH
44958: CALL_OW 251
44962: PPUSH
44963: LD_VAR 0 16
44967: PPUSH
44968: CALL_OW 441
44972: GO 44940
44974: POP
44975: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44976: LD_VAR 0 18
44980: PPUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 30
44986: PUSH
44987: LD_INT 32
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 30
44996: PUSH
44997: LD_INT 33
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: PPUSH
45009: CALL_OW 72
45013: IFFALSE 45101
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45015: LD_ADDR_VAR 0 8
45019: PUSH
45020: LD_VAR 0 18
45024: PPUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 30
45030: PUSH
45031: LD_INT 32
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 30
45040: PUSH
45041: LD_INT 33
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: PPUSH
45053: CALL_OW 72
45057: PUSH
45058: FOR_IN
45059: IFFALSE 45099
// begin if not GetBWeapon ( i ) then
45061: LD_VAR 0 8
45065: PPUSH
45066: CALL_OW 269
45070: NOT
45071: IFFALSE 45097
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45073: LD_VAR 0 8
45077: PPUSH
45078: LD_VAR 0 8
45082: PPUSH
45083: LD_VAR 0 2
45087: PPUSH
45088: CALL 46347 0 2
45092: PPUSH
45093: CALL_OW 431
// end ;
45097: GO 45058
45099: POP
45100: POP
// end ; for i = 1 to personel do
45101: LD_ADDR_VAR 0 8
45105: PUSH
45106: DOUBLE
45107: LD_INT 1
45109: DEC
45110: ST_TO_ADDR
45111: LD_VAR 0 6
45115: PUSH
45116: FOR_TO
45117: IFFALSE 46181
// begin if i > 4 then
45119: LD_VAR 0 8
45123: PUSH
45124: LD_INT 4
45126: GREATER
45127: IFFALSE 45131
// break ;
45129: GO 46181
// case i of 1 :
45131: LD_VAR 0 8
45135: PUSH
45136: LD_INT 1
45138: DOUBLE
45139: EQUAL
45140: IFTRUE 45144
45142: GO 45224
45144: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45145: LD_ADDR_VAR 0 12
45149: PUSH
45150: LD_VAR 0 18
45154: PPUSH
45155: LD_INT 22
45157: PUSH
45158: LD_VAR 0 16
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 58
45169: PUSH
45170: EMPTY
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: LD_INT 30
45178: PUSH
45179: LD_INT 32
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 30
45188: PUSH
45189: LD_INT 4
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 30
45198: PUSH
45199: LD_INT 5
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: PPUSH
45217: CALL_OW 72
45221: ST_TO_ADDR
45222: GO 45446
45224: LD_INT 2
45226: DOUBLE
45227: EQUAL
45228: IFTRUE 45232
45230: GO 45294
45232: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45233: LD_ADDR_VAR 0 12
45237: PUSH
45238: LD_VAR 0 18
45242: PPUSH
45243: LD_INT 22
45245: PUSH
45246: LD_VAR 0 16
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 30
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 30
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PPUSH
45287: CALL_OW 72
45291: ST_TO_ADDR
45292: GO 45446
45294: LD_INT 3
45296: DOUBLE
45297: EQUAL
45298: IFTRUE 45302
45300: GO 45364
45302: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45303: LD_ADDR_VAR 0 12
45307: PUSH
45308: LD_VAR 0 18
45312: PPUSH
45313: LD_INT 22
45315: PUSH
45316: LD_VAR 0 16
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 30
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 30
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PPUSH
45357: CALL_OW 72
45361: ST_TO_ADDR
45362: GO 45446
45364: LD_INT 4
45366: DOUBLE
45367: EQUAL
45368: IFTRUE 45372
45370: GO 45445
45372: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45373: LD_ADDR_VAR 0 12
45377: PUSH
45378: LD_VAR 0 18
45382: PPUSH
45383: LD_INT 22
45385: PUSH
45386: LD_VAR 0 16
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: LD_INT 30
45400: PUSH
45401: LD_INT 6
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 30
45410: PUSH
45411: LD_INT 7
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 30
45420: PUSH
45421: LD_INT 8
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PPUSH
45438: CALL_OW 72
45442: ST_TO_ADDR
45443: GO 45446
45445: POP
// if i = 1 then
45446: LD_VAR 0 8
45450: PUSH
45451: LD_INT 1
45453: EQUAL
45454: IFFALSE 45565
// begin tmp := [ ] ;
45456: LD_ADDR_VAR 0 19
45460: PUSH
45461: EMPTY
45462: ST_TO_ADDR
// for j in f do
45463: LD_ADDR_VAR 0 9
45467: PUSH
45468: LD_VAR 0 12
45472: PUSH
45473: FOR_IN
45474: IFFALSE 45547
// if GetBType ( j ) = b_bunker then
45476: LD_VAR 0 9
45480: PPUSH
45481: CALL_OW 266
45485: PUSH
45486: LD_INT 32
45488: EQUAL
45489: IFFALSE 45516
// tmp := Insert ( tmp , 1 , j ) else
45491: LD_ADDR_VAR 0 19
45495: PUSH
45496: LD_VAR 0 19
45500: PPUSH
45501: LD_INT 1
45503: PPUSH
45504: LD_VAR 0 9
45508: PPUSH
45509: CALL_OW 2
45513: ST_TO_ADDR
45514: GO 45545
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45516: LD_ADDR_VAR 0 19
45520: PUSH
45521: LD_VAR 0 19
45525: PPUSH
45526: LD_VAR 0 19
45530: PUSH
45531: LD_INT 1
45533: PLUS
45534: PPUSH
45535: LD_VAR 0 9
45539: PPUSH
45540: CALL_OW 2
45544: ST_TO_ADDR
45545: GO 45473
45547: POP
45548: POP
// if tmp then
45549: LD_VAR 0 19
45553: IFFALSE 45565
// f := tmp ;
45555: LD_ADDR_VAR 0 12
45559: PUSH
45560: LD_VAR 0 19
45564: ST_TO_ADDR
// end ; x := personel [ i ] ;
45565: LD_ADDR_VAR 0 13
45569: PUSH
45570: LD_VAR 0 6
45574: PUSH
45575: LD_VAR 0 8
45579: ARRAY
45580: ST_TO_ADDR
// if x = - 1 then
45581: LD_VAR 0 13
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: EQUAL
45590: IFFALSE 45799
// begin for j in f do
45592: LD_ADDR_VAR 0 9
45596: PUSH
45597: LD_VAR 0 12
45601: PUSH
45602: FOR_IN
45603: IFFALSE 45795
// repeat InitHc ;
45605: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45609: LD_VAR 0 9
45613: PPUSH
45614: CALL_OW 266
45618: PUSH
45619: LD_INT 5
45621: EQUAL
45622: IFFALSE 45692
// begin if UnitsInside ( j ) < 3 then
45624: LD_VAR 0 9
45628: PPUSH
45629: CALL_OW 313
45633: PUSH
45634: LD_INT 3
45636: LESS
45637: IFFALSE 45673
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45639: LD_INT 0
45641: PPUSH
45642: LD_INT 5
45644: PUSH
45645: LD_INT 8
45647: PUSH
45648: LD_INT 9
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: PUSH
45656: LD_VAR 0 17
45660: ARRAY
45661: PPUSH
45662: LD_VAR 0 4
45666: PPUSH
45667: CALL_OW 380
45671: GO 45690
// PrepareHuman ( false , i , skill ) ;
45673: LD_INT 0
45675: PPUSH
45676: LD_VAR 0 8
45680: PPUSH
45681: LD_VAR 0 4
45685: PPUSH
45686: CALL_OW 380
// end else
45690: GO 45709
// PrepareHuman ( false , i , skill ) ;
45692: LD_INT 0
45694: PPUSH
45695: LD_VAR 0 8
45699: PPUSH
45700: LD_VAR 0 4
45704: PPUSH
45705: CALL_OW 380
// un := CreateHuman ;
45709: LD_ADDR_VAR 0 14
45713: PUSH
45714: CALL_OW 44
45718: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45719: LD_ADDR_VAR 0 7
45723: PUSH
45724: LD_VAR 0 7
45728: PPUSH
45729: LD_INT 1
45731: PPUSH
45732: LD_VAR 0 14
45736: PPUSH
45737: CALL_OW 2
45741: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45742: LD_VAR 0 14
45746: PPUSH
45747: LD_VAR 0 9
45751: PPUSH
45752: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45756: LD_VAR 0 9
45760: PPUSH
45761: CALL_OW 313
45765: PUSH
45766: LD_INT 6
45768: EQUAL
45769: PUSH
45770: LD_VAR 0 9
45774: PPUSH
45775: CALL_OW 266
45779: PUSH
45780: LD_INT 32
45782: PUSH
45783: LD_INT 31
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: IN
45790: OR
45791: IFFALSE 45605
45793: GO 45602
45795: POP
45796: POP
// end else
45797: GO 46179
// for j = 1 to x do
45799: LD_ADDR_VAR 0 9
45803: PUSH
45804: DOUBLE
45805: LD_INT 1
45807: DEC
45808: ST_TO_ADDR
45809: LD_VAR 0 13
45813: PUSH
45814: FOR_TO
45815: IFFALSE 46177
// begin InitHc ;
45817: CALL_OW 19
// if not f then
45821: LD_VAR 0 12
45825: NOT
45826: IFFALSE 45915
// begin PrepareHuman ( false , i , skill ) ;
45828: LD_INT 0
45830: PPUSH
45831: LD_VAR 0 8
45835: PPUSH
45836: LD_VAR 0 4
45840: PPUSH
45841: CALL_OW 380
// un := CreateHuman ;
45845: LD_ADDR_VAR 0 14
45849: PUSH
45850: CALL_OW 44
45854: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45855: LD_ADDR_VAR 0 7
45859: PUSH
45860: LD_VAR 0 7
45864: PPUSH
45865: LD_INT 1
45867: PPUSH
45868: LD_VAR 0 14
45872: PPUSH
45873: CALL_OW 2
45877: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45878: LD_VAR 0 14
45882: PPUSH
45883: LD_VAR 0 1
45887: PPUSH
45888: CALL_OW 250
45892: PPUSH
45893: LD_VAR 0 1
45897: PPUSH
45898: CALL_OW 251
45902: PPUSH
45903: LD_INT 10
45905: PPUSH
45906: LD_INT 0
45908: PPUSH
45909: CALL_OW 50
// continue ;
45913: GO 45814
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45915: LD_VAR 0 12
45919: PUSH
45920: LD_INT 1
45922: ARRAY
45923: PPUSH
45924: CALL_OW 313
45928: PUSH
45929: LD_VAR 0 12
45933: PUSH
45934: LD_INT 1
45936: ARRAY
45937: PPUSH
45938: CALL_OW 266
45942: PUSH
45943: LD_INT 32
45945: PUSH
45946: LD_INT 31
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: IN
45953: AND
45954: PUSH
45955: LD_VAR 0 12
45959: PUSH
45960: LD_INT 1
45962: ARRAY
45963: PPUSH
45964: CALL_OW 313
45968: PUSH
45969: LD_INT 6
45971: EQUAL
45972: OR
45973: IFFALSE 45993
// f := Delete ( f , 1 ) ;
45975: LD_ADDR_VAR 0 12
45979: PUSH
45980: LD_VAR 0 12
45984: PPUSH
45985: LD_INT 1
45987: PPUSH
45988: CALL_OW 3
45992: ST_TO_ADDR
// if not f then
45993: LD_VAR 0 12
45997: NOT
45998: IFFALSE 46016
// begin x := x + 2 ;
46000: LD_ADDR_VAR 0 13
46004: PUSH
46005: LD_VAR 0 13
46009: PUSH
46010: LD_INT 2
46012: PLUS
46013: ST_TO_ADDR
// continue ;
46014: GO 45814
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46016: LD_VAR 0 12
46020: PUSH
46021: LD_INT 1
46023: ARRAY
46024: PPUSH
46025: CALL_OW 266
46029: PUSH
46030: LD_INT 5
46032: EQUAL
46033: IFFALSE 46107
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46035: LD_VAR 0 12
46039: PUSH
46040: LD_INT 1
46042: ARRAY
46043: PPUSH
46044: CALL_OW 313
46048: PUSH
46049: LD_INT 3
46051: LESS
46052: IFFALSE 46088
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46054: LD_INT 0
46056: PPUSH
46057: LD_INT 5
46059: PUSH
46060: LD_INT 8
46062: PUSH
46063: LD_INT 9
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: PUSH
46071: LD_VAR 0 17
46075: ARRAY
46076: PPUSH
46077: LD_VAR 0 4
46081: PPUSH
46082: CALL_OW 380
46086: GO 46105
// PrepareHuman ( false , i , skill ) ;
46088: LD_INT 0
46090: PPUSH
46091: LD_VAR 0 8
46095: PPUSH
46096: LD_VAR 0 4
46100: PPUSH
46101: CALL_OW 380
// end else
46105: GO 46124
// PrepareHuman ( false , i , skill ) ;
46107: LD_INT 0
46109: PPUSH
46110: LD_VAR 0 8
46114: PPUSH
46115: LD_VAR 0 4
46119: PPUSH
46120: CALL_OW 380
// un := CreateHuman ;
46124: LD_ADDR_VAR 0 14
46128: PUSH
46129: CALL_OW 44
46133: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46134: LD_ADDR_VAR 0 7
46138: PUSH
46139: LD_VAR 0 7
46143: PPUSH
46144: LD_INT 1
46146: PPUSH
46147: LD_VAR 0 14
46151: PPUSH
46152: CALL_OW 2
46156: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46157: LD_VAR 0 14
46161: PPUSH
46162: LD_VAR 0 12
46166: PUSH
46167: LD_INT 1
46169: ARRAY
46170: PPUSH
46171: CALL_OW 52
// end ;
46175: GO 45814
46177: POP
46178: POP
// end ;
46179: GO 45116
46181: POP
46182: POP
// result := result ^ buildings ;
46183: LD_ADDR_VAR 0 7
46187: PUSH
46188: LD_VAR 0 7
46192: PUSH
46193: LD_VAR 0 18
46197: ADD
46198: ST_TO_ADDR
// end else
46199: GO 46342
// begin for i = 1 to personel do
46201: LD_ADDR_VAR 0 8
46205: PUSH
46206: DOUBLE
46207: LD_INT 1
46209: DEC
46210: ST_TO_ADDR
46211: LD_VAR 0 6
46215: PUSH
46216: FOR_TO
46217: IFFALSE 46340
// begin if i > 4 then
46219: LD_VAR 0 8
46223: PUSH
46224: LD_INT 4
46226: GREATER
46227: IFFALSE 46231
// break ;
46229: GO 46340
// x := personel [ i ] ;
46231: LD_ADDR_VAR 0 13
46235: PUSH
46236: LD_VAR 0 6
46240: PUSH
46241: LD_VAR 0 8
46245: ARRAY
46246: ST_TO_ADDR
// if x = - 1 then
46247: LD_VAR 0 13
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: EQUAL
46256: IFFALSE 46260
// continue ;
46258: GO 46216
// PrepareHuman ( false , i , skill ) ;
46260: LD_INT 0
46262: PPUSH
46263: LD_VAR 0 8
46267: PPUSH
46268: LD_VAR 0 4
46272: PPUSH
46273: CALL_OW 380
// un := CreateHuman ;
46277: LD_ADDR_VAR 0 14
46281: PUSH
46282: CALL_OW 44
46286: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46287: LD_VAR 0 14
46291: PPUSH
46292: LD_VAR 0 1
46296: PPUSH
46297: CALL_OW 250
46301: PPUSH
46302: LD_VAR 0 1
46306: PPUSH
46307: CALL_OW 251
46311: PPUSH
46312: LD_INT 10
46314: PPUSH
46315: LD_INT 0
46317: PPUSH
46318: CALL_OW 50
// result := result ^ un ;
46322: LD_ADDR_VAR 0 7
46326: PUSH
46327: LD_VAR 0 7
46331: PUSH
46332: LD_VAR 0 14
46336: ADD
46337: ST_TO_ADDR
// end ;
46338: GO 46216
46340: POP
46341: POP
// end ; end ;
46342: LD_VAR 0 7
46346: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46347: LD_INT 0
46349: PPUSH
46350: PPUSH
46351: PPUSH
46352: PPUSH
46353: PPUSH
46354: PPUSH
46355: PPUSH
46356: PPUSH
46357: PPUSH
46358: PPUSH
46359: PPUSH
46360: PPUSH
46361: PPUSH
46362: PPUSH
46363: PPUSH
46364: PPUSH
// result := false ;
46365: LD_ADDR_VAR 0 3
46369: PUSH
46370: LD_INT 0
46372: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46373: LD_VAR 0 1
46377: NOT
46378: PUSH
46379: LD_VAR 0 1
46383: PPUSH
46384: CALL_OW 266
46388: PUSH
46389: LD_INT 32
46391: PUSH
46392: LD_INT 33
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: IN
46399: NOT
46400: OR
46401: IFFALSE 46405
// exit ;
46403: GO 47544
// nat := GetNation ( tower ) ;
46405: LD_ADDR_VAR 0 12
46409: PUSH
46410: LD_VAR 0 1
46414: PPUSH
46415: CALL_OW 248
46419: ST_TO_ADDR
// side := GetSide ( tower ) ;
46420: LD_ADDR_VAR 0 16
46424: PUSH
46425: LD_VAR 0 1
46429: PPUSH
46430: CALL_OW 255
46434: ST_TO_ADDR
// x := GetX ( tower ) ;
46435: LD_ADDR_VAR 0 10
46439: PUSH
46440: LD_VAR 0 1
46444: PPUSH
46445: CALL_OW 250
46449: ST_TO_ADDR
// y := GetY ( tower ) ;
46450: LD_ADDR_VAR 0 11
46454: PUSH
46455: LD_VAR 0 1
46459: PPUSH
46460: CALL_OW 251
46464: ST_TO_ADDR
// if not x or not y then
46465: LD_VAR 0 10
46469: NOT
46470: PUSH
46471: LD_VAR 0 11
46475: NOT
46476: OR
46477: IFFALSE 46481
// exit ;
46479: GO 47544
// weapon := 0 ;
46481: LD_ADDR_VAR 0 18
46485: PUSH
46486: LD_INT 0
46488: ST_TO_ADDR
// fac_list := [ ] ;
46489: LD_ADDR_VAR 0 17
46493: PUSH
46494: EMPTY
46495: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46496: LD_ADDR_VAR 0 6
46500: PUSH
46501: LD_VAR 0 1
46505: PPUSH
46506: CALL_OW 274
46510: PPUSH
46511: LD_VAR 0 2
46515: PPUSH
46516: LD_INT 0
46518: PPUSH
46519: CALL 44084 0 3
46523: PPUSH
46524: LD_INT 30
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PPUSH
46534: CALL_OW 72
46538: ST_TO_ADDR
// if not factories then
46539: LD_VAR 0 6
46543: NOT
46544: IFFALSE 46548
// exit ;
46546: GO 47544
// for i in factories do
46548: LD_ADDR_VAR 0 8
46552: PUSH
46553: LD_VAR 0 6
46557: PUSH
46558: FOR_IN
46559: IFFALSE 46584
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46561: LD_ADDR_VAR 0 17
46565: PUSH
46566: LD_VAR 0 17
46570: PUSH
46571: LD_VAR 0 8
46575: PPUSH
46576: CALL_OW 478
46580: UNION
46581: ST_TO_ADDR
46582: GO 46558
46584: POP
46585: POP
// if not fac_list then
46586: LD_VAR 0 17
46590: NOT
46591: IFFALSE 46595
// exit ;
46593: GO 47544
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46595: LD_ADDR_VAR 0 5
46599: PUSH
46600: LD_INT 4
46602: PUSH
46603: LD_INT 5
46605: PUSH
46606: LD_INT 9
46608: PUSH
46609: LD_INT 10
46611: PUSH
46612: LD_INT 6
46614: PUSH
46615: LD_INT 7
46617: PUSH
46618: LD_INT 11
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 27
46632: PUSH
46633: LD_INT 28
46635: PUSH
46636: LD_INT 26
46638: PUSH
46639: LD_INT 30
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 43
46650: PUSH
46651: LD_INT 44
46653: PUSH
46654: LD_INT 46
46656: PUSH
46657: LD_INT 45
46659: PUSH
46660: LD_INT 47
46662: PUSH
46663: LD_INT 49
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: PUSH
46679: LD_VAR 0 12
46683: ARRAY
46684: ST_TO_ADDR
// for i in list do
46685: LD_ADDR_VAR 0 8
46689: PUSH
46690: LD_VAR 0 5
46694: PUSH
46695: FOR_IN
46696: IFFALSE 46729
// if not i in fac_list then
46698: LD_VAR 0 8
46702: PUSH
46703: LD_VAR 0 17
46707: IN
46708: NOT
46709: IFFALSE 46727
// list := list diff i ;
46711: LD_ADDR_VAR 0 5
46715: PUSH
46716: LD_VAR 0 5
46720: PUSH
46721: LD_VAR 0 8
46725: DIFF
46726: ST_TO_ADDR
46727: GO 46695
46729: POP
46730: POP
// if not list then
46731: LD_VAR 0 5
46735: NOT
46736: IFFALSE 46740
// exit ;
46738: GO 47544
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46740: LD_VAR 0 12
46744: PUSH
46745: LD_INT 3
46747: EQUAL
46748: PUSH
46749: LD_INT 49
46751: PUSH
46752: LD_VAR 0 5
46756: IN
46757: AND
46758: PUSH
46759: LD_INT 31
46761: PPUSH
46762: LD_VAR 0 16
46766: PPUSH
46767: CALL_OW 321
46771: PUSH
46772: LD_INT 2
46774: EQUAL
46775: AND
46776: IFFALSE 46836
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46778: LD_INT 22
46780: PUSH
46781: LD_VAR 0 16
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 35
46792: PUSH
46793: LD_INT 49
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 91
46802: PUSH
46803: LD_VAR 0 1
46807: PUSH
46808: LD_INT 10
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: PPUSH
46821: CALL_OW 69
46825: NOT
46826: IFFALSE 46836
// weapon := ru_time_lapser ;
46828: LD_ADDR_VAR 0 18
46832: PUSH
46833: LD_INT 49
46835: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46836: LD_VAR 0 12
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: IN
46851: PUSH
46852: LD_INT 11
46854: PUSH
46855: LD_VAR 0 5
46859: IN
46860: PUSH
46861: LD_INT 30
46863: PUSH
46864: LD_VAR 0 5
46868: IN
46869: OR
46870: AND
46871: PUSH
46872: LD_INT 6
46874: PPUSH
46875: LD_VAR 0 16
46879: PPUSH
46880: CALL_OW 321
46884: PUSH
46885: LD_INT 2
46887: EQUAL
46888: AND
46889: IFFALSE 47054
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46891: LD_INT 22
46893: PUSH
46894: LD_VAR 0 16
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 35
46908: PUSH
46909: LD_INT 11
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 35
46918: PUSH
46919: LD_INT 30
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 91
46933: PUSH
46934: LD_VAR 0 1
46938: PUSH
46939: LD_INT 18
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: PPUSH
46952: CALL_OW 69
46956: NOT
46957: PUSH
46958: LD_INT 22
46960: PUSH
46961: LD_VAR 0 16
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: LD_INT 30
46975: PUSH
46976: LD_INT 32
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 30
46985: PUSH
46986: LD_INT 33
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 91
47000: PUSH
47001: LD_VAR 0 1
47005: PUSH
47006: LD_INT 12
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: PUSH
47019: EMPTY
47020: LIST
47021: PPUSH
47022: CALL_OW 69
47026: PUSH
47027: LD_INT 2
47029: GREATER
47030: AND
47031: IFFALSE 47054
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47033: LD_ADDR_VAR 0 18
47037: PUSH
47038: LD_INT 11
47040: PUSH
47041: LD_INT 30
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_VAR 0 12
47052: ARRAY
47053: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47054: LD_VAR 0 18
47058: NOT
47059: PUSH
47060: LD_INT 40
47062: PPUSH
47063: LD_VAR 0 16
47067: PPUSH
47068: CALL_OW 321
47072: PUSH
47073: LD_INT 2
47075: EQUAL
47076: AND
47077: PUSH
47078: LD_INT 7
47080: PUSH
47081: LD_VAR 0 5
47085: IN
47086: PUSH
47087: LD_INT 28
47089: PUSH
47090: LD_VAR 0 5
47094: IN
47095: OR
47096: PUSH
47097: LD_INT 45
47099: PUSH
47100: LD_VAR 0 5
47104: IN
47105: OR
47106: AND
47107: IFFALSE 47361
// begin hex := GetHexInfo ( x , y ) ;
47109: LD_ADDR_VAR 0 4
47113: PUSH
47114: LD_VAR 0 10
47118: PPUSH
47119: LD_VAR 0 11
47123: PPUSH
47124: CALL_OW 546
47128: ST_TO_ADDR
// if hex [ 1 ] then
47129: LD_VAR 0 4
47133: PUSH
47134: LD_INT 1
47136: ARRAY
47137: IFFALSE 47141
// exit ;
47139: GO 47544
// height := hex [ 2 ] ;
47141: LD_ADDR_VAR 0 15
47145: PUSH
47146: LD_VAR 0 4
47150: PUSH
47151: LD_INT 2
47153: ARRAY
47154: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47155: LD_ADDR_VAR 0 14
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 5
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// for i in tmp do
47178: LD_ADDR_VAR 0 8
47182: PUSH
47183: LD_VAR 0 14
47187: PUSH
47188: FOR_IN
47189: IFFALSE 47359
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47191: LD_ADDR_VAR 0 9
47195: PUSH
47196: LD_VAR 0 10
47200: PPUSH
47201: LD_VAR 0 8
47205: PPUSH
47206: LD_INT 5
47208: PPUSH
47209: CALL_OW 272
47213: PUSH
47214: LD_VAR 0 11
47218: PPUSH
47219: LD_VAR 0 8
47223: PPUSH
47224: LD_INT 5
47226: PPUSH
47227: CALL_OW 273
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47236: LD_VAR 0 9
47240: PUSH
47241: LD_INT 1
47243: ARRAY
47244: PPUSH
47245: LD_VAR 0 9
47249: PUSH
47250: LD_INT 2
47252: ARRAY
47253: PPUSH
47254: CALL_OW 488
47258: IFFALSE 47357
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47260: LD_ADDR_VAR 0 4
47264: PUSH
47265: LD_VAR 0 9
47269: PUSH
47270: LD_INT 1
47272: ARRAY
47273: PPUSH
47274: LD_VAR 0 9
47278: PUSH
47279: LD_INT 2
47281: ARRAY
47282: PPUSH
47283: CALL_OW 546
47287: ST_TO_ADDR
// if hex [ 1 ] then
47288: LD_VAR 0 4
47292: PUSH
47293: LD_INT 1
47295: ARRAY
47296: IFFALSE 47300
// continue ;
47298: GO 47188
// h := hex [ 2 ] ;
47300: LD_ADDR_VAR 0 13
47304: PUSH
47305: LD_VAR 0 4
47309: PUSH
47310: LD_INT 2
47312: ARRAY
47313: ST_TO_ADDR
// if h + 7 < height then
47314: LD_VAR 0 13
47318: PUSH
47319: LD_INT 7
47321: PLUS
47322: PUSH
47323: LD_VAR 0 15
47327: LESS
47328: IFFALSE 47357
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47330: LD_ADDR_VAR 0 18
47334: PUSH
47335: LD_INT 7
47337: PUSH
47338: LD_INT 28
47340: PUSH
47341: LD_INT 45
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: PUSH
47349: LD_VAR 0 12
47353: ARRAY
47354: ST_TO_ADDR
// break ;
47355: GO 47359
// end ; end ; end ;
47357: GO 47188
47359: POP
47360: POP
// end ; if not weapon then
47361: LD_VAR 0 18
47365: NOT
47366: IFFALSE 47426
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47368: LD_ADDR_VAR 0 5
47372: PUSH
47373: LD_VAR 0 5
47377: PUSH
47378: LD_INT 11
47380: PUSH
47381: LD_INT 30
47383: PUSH
47384: LD_INT 49
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: DIFF
47392: ST_TO_ADDR
// if not list then
47393: LD_VAR 0 5
47397: NOT
47398: IFFALSE 47402
// exit ;
47400: GO 47544
// weapon := list [ rand ( 1 , list ) ] ;
47402: LD_ADDR_VAR 0 18
47406: PUSH
47407: LD_VAR 0 5
47411: PUSH
47412: LD_INT 1
47414: PPUSH
47415: LD_VAR 0 5
47419: PPUSH
47420: CALL_OW 12
47424: ARRAY
47425: ST_TO_ADDR
// end ; if weapon then
47426: LD_VAR 0 18
47430: IFFALSE 47544
// begin tmp := CostOfWeapon ( weapon ) ;
47432: LD_ADDR_VAR 0 14
47436: PUSH
47437: LD_VAR 0 18
47441: PPUSH
47442: CALL_OW 451
47446: ST_TO_ADDR
// j := GetBase ( tower ) ;
47447: LD_ADDR_VAR 0 9
47451: PUSH
47452: LD_VAR 0 1
47456: PPUSH
47457: CALL_OW 274
47461: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47462: LD_VAR 0 9
47466: PPUSH
47467: LD_INT 1
47469: PPUSH
47470: CALL_OW 275
47474: PUSH
47475: LD_VAR 0 14
47479: PUSH
47480: LD_INT 1
47482: ARRAY
47483: GREATEREQUAL
47484: PUSH
47485: LD_VAR 0 9
47489: PPUSH
47490: LD_INT 2
47492: PPUSH
47493: CALL_OW 275
47497: PUSH
47498: LD_VAR 0 14
47502: PUSH
47503: LD_INT 2
47505: ARRAY
47506: GREATEREQUAL
47507: AND
47508: PUSH
47509: LD_VAR 0 9
47513: PPUSH
47514: LD_INT 3
47516: PPUSH
47517: CALL_OW 275
47521: PUSH
47522: LD_VAR 0 14
47526: PUSH
47527: LD_INT 3
47529: ARRAY
47530: GREATEREQUAL
47531: AND
47532: IFFALSE 47544
// result := weapon ;
47534: LD_ADDR_VAR 0 3
47538: PUSH
47539: LD_VAR 0 18
47543: ST_TO_ADDR
// end ; end ;
47544: LD_VAR 0 3
47548: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47549: LD_INT 0
47551: PPUSH
47552: PPUSH
// result := true ;
47553: LD_ADDR_VAR 0 3
47557: PUSH
47558: LD_INT 1
47560: ST_TO_ADDR
// if array1 = array2 then
47561: LD_VAR 0 1
47565: PUSH
47566: LD_VAR 0 2
47570: EQUAL
47571: IFFALSE 47631
// begin for i = 1 to array1 do
47573: LD_ADDR_VAR 0 4
47577: PUSH
47578: DOUBLE
47579: LD_INT 1
47581: DEC
47582: ST_TO_ADDR
47583: LD_VAR 0 1
47587: PUSH
47588: FOR_TO
47589: IFFALSE 47627
// if array1 [ i ] <> array2 [ i ] then
47591: LD_VAR 0 1
47595: PUSH
47596: LD_VAR 0 4
47600: ARRAY
47601: PUSH
47602: LD_VAR 0 2
47606: PUSH
47607: LD_VAR 0 4
47611: ARRAY
47612: NONEQUAL
47613: IFFALSE 47625
// begin result := false ;
47615: LD_ADDR_VAR 0 3
47619: PUSH
47620: LD_INT 0
47622: ST_TO_ADDR
// break ;
47623: GO 47627
// end ;
47625: GO 47588
47627: POP
47628: POP
// end else
47629: GO 47639
// result := false ;
47631: LD_ADDR_VAR 0 3
47635: PUSH
47636: LD_INT 0
47638: ST_TO_ADDR
// end ;
47639: LD_VAR 0 3
47643: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47644: LD_INT 0
47646: PPUSH
47647: PPUSH
// if not array1 or not array2 then
47648: LD_VAR 0 1
47652: NOT
47653: PUSH
47654: LD_VAR 0 2
47658: NOT
47659: OR
47660: IFFALSE 47664
// exit ;
47662: GO 47728
// result := true ;
47664: LD_ADDR_VAR 0 3
47668: PUSH
47669: LD_INT 1
47671: ST_TO_ADDR
// for i = 1 to array1 do
47672: LD_ADDR_VAR 0 4
47676: PUSH
47677: DOUBLE
47678: LD_INT 1
47680: DEC
47681: ST_TO_ADDR
47682: LD_VAR 0 1
47686: PUSH
47687: FOR_TO
47688: IFFALSE 47726
// if array1 [ i ] <> array2 [ i ] then
47690: LD_VAR 0 1
47694: PUSH
47695: LD_VAR 0 4
47699: ARRAY
47700: PUSH
47701: LD_VAR 0 2
47705: PUSH
47706: LD_VAR 0 4
47710: ARRAY
47711: NONEQUAL
47712: IFFALSE 47724
// begin result := false ;
47714: LD_ADDR_VAR 0 3
47718: PUSH
47719: LD_INT 0
47721: ST_TO_ADDR
// break ;
47722: GO 47726
// end ;
47724: GO 47687
47726: POP
47727: POP
// end ;
47728: LD_VAR 0 3
47732: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47733: LD_INT 0
47735: PPUSH
47736: PPUSH
47737: PPUSH
// pom := GetBase ( fac ) ;
47738: LD_ADDR_VAR 0 5
47742: PUSH
47743: LD_VAR 0 1
47747: PPUSH
47748: CALL_OW 274
47752: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47753: LD_ADDR_VAR 0 4
47757: PUSH
47758: LD_VAR 0 2
47762: PUSH
47763: LD_INT 1
47765: ARRAY
47766: PPUSH
47767: LD_VAR 0 2
47771: PUSH
47772: LD_INT 2
47774: ARRAY
47775: PPUSH
47776: LD_VAR 0 2
47780: PUSH
47781: LD_INT 3
47783: ARRAY
47784: PPUSH
47785: LD_VAR 0 2
47789: PUSH
47790: LD_INT 4
47792: ARRAY
47793: PPUSH
47794: CALL_OW 449
47798: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47799: LD_ADDR_VAR 0 3
47803: PUSH
47804: LD_VAR 0 5
47808: PPUSH
47809: LD_INT 1
47811: PPUSH
47812: CALL_OW 275
47816: PUSH
47817: LD_VAR 0 4
47821: PUSH
47822: LD_INT 1
47824: ARRAY
47825: GREATEREQUAL
47826: PUSH
47827: LD_VAR 0 5
47831: PPUSH
47832: LD_INT 2
47834: PPUSH
47835: CALL_OW 275
47839: PUSH
47840: LD_VAR 0 4
47844: PUSH
47845: LD_INT 2
47847: ARRAY
47848: GREATEREQUAL
47849: AND
47850: PUSH
47851: LD_VAR 0 5
47855: PPUSH
47856: LD_INT 3
47858: PPUSH
47859: CALL_OW 275
47863: PUSH
47864: LD_VAR 0 4
47868: PUSH
47869: LD_INT 3
47871: ARRAY
47872: GREATEREQUAL
47873: AND
47874: ST_TO_ADDR
// end ;
47875: LD_VAR 0 3
47879: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47880: LD_INT 0
47882: PPUSH
47883: PPUSH
47884: PPUSH
47885: PPUSH
// pom := GetBase ( building ) ;
47886: LD_ADDR_VAR 0 3
47890: PUSH
47891: LD_VAR 0 1
47895: PPUSH
47896: CALL_OW 274
47900: ST_TO_ADDR
// if not pom then
47901: LD_VAR 0 3
47905: NOT
47906: IFFALSE 47910
// exit ;
47908: GO 48080
// btype := GetBType ( building ) ;
47910: LD_ADDR_VAR 0 5
47914: PUSH
47915: LD_VAR 0 1
47919: PPUSH
47920: CALL_OW 266
47924: ST_TO_ADDR
// if btype = b_armoury then
47925: LD_VAR 0 5
47929: PUSH
47930: LD_INT 4
47932: EQUAL
47933: IFFALSE 47943
// btype := b_barracks ;
47935: LD_ADDR_VAR 0 5
47939: PUSH
47940: LD_INT 5
47942: ST_TO_ADDR
// if btype = b_depot then
47943: LD_VAR 0 5
47947: PUSH
47948: LD_INT 0
47950: EQUAL
47951: IFFALSE 47961
// btype := b_warehouse ;
47953: LD_ADDR_VAR 0 5
47957: PUSH
47958: LD_INT 1
47960: ST_TO_ADDR
// if btype = b_workshop then
47961: LD_VAR 0 5
47965: PUSH
47966: LD_INT 2
47968: EQUAL
47969: IFFALSE 47979
// btype := b_factory ;
47971: LD_ADDR_VAR 0 5
47975: PUSH
47976: LD_INT 3
47978: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47979: LD_ADDR_VAR 0 4
47983: PUSH
47984: LD_VAR 0 5
47988: PPUSH
47989: LD_VAR 0 1
47993: PPUSH
47994: CALL_OW 248
47998: PPUSH
47999: CALL_OW 450
48003: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48004: LD_ADDR_VAR 0 2
48008: PUSH
48009: LD_VAR 0 3
48013: PPUSH
48014: LD_INT 1
48016: PPUSH
48017: CALL_OW 275
48021: PUSH
48022: LD_VAR 0 4
48026: PUSH
48027: LD_INT 1
48029: ARRAY
48030: GREATEREQUAL
48031: PUSH
48032: LD_VAR 0 3
48036: PPUSH
48037: LD_INT 2
48039: PPUSH
48040: CALL_OW 275
48044: PUSH
48045: LD_VAR 0 4
48049: PUSH
48050: LD_INT 2
48052: ARRAY
48053: GREATEREQUAL
48054: AND
48055: PUSH
48056: LD_VAR 0 3
48060: PPUSH
48061: LD_INT 3
48063: PPUSH
48064: CALL_OW 275
48068: PUSH
48069: LD_VAR 0 4
48073: PUSH
48074: LD_INT 3
48076: ARRAY
48077: GREATEREQUAL
48078: AND
48079: ST_TO_ADDR
// end ;
48080: LD_VAR 0 2
48084: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48085: LD_INT 0
48087: PPUSH
48088: PPUSH
48089: PPUSH
// pom := GetBase ( building ) ;
48090: LD_ADDR_VAR 0 4
48094: PUSH
48095: LD_VAR 0 1
48099: PPUSH
48100: CALL_OW 274
48104: ST_TO_ADDR
// if not pom then
48105: LD_VAR 0 4
48109: NOT
48110: IFFALSE 48114
// exit ;
48112: GO 48215
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48114: LD_ADDR_VAR 0 5
48118: PUSH
48119: LD_VAR 0 2
48123: PPUSH
48124: LD_VAR 0 1
48128: PPUSH
48129: CALL_OW 248
48133: PPUSH
48134: CALL_OW 450
48138: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48139: LD_ADDR_VAR 0 3
48143: PUSH
48144: LD_VAR 0 4
48148: PPUSH
48149: LD_INT 1
48151: PPUSH
48152: CALL_OW 275
48156: PUSH
48157: LD_VAR 0 5
48161: PUSH
48162: LD_INT 1
48164: ARRAY
48165: GREATEREQUAL
48166: PUSH
48167: LD_VAR 0 4
48171: PPUSH
48172: LD_INT 2
48174: PPUSH
48175: CALL_OW 275
48179: PUSH
48180: LD_VAR 0 5
48184: PUSH
48185: LD_INT 2
48187: ARRAY
48188: GREATEREQUAL
48189: AND
48190: PUSH
48191: LD_VAR 0 4
48195: PPUSH
48196: LD_INT 3
48198: PPUSH
48199: CALL_OW 275
48203: PUSH
48204: LD_VAR 0 5
48208: PUSH
48209: LD_INT 3
48211: ARRAY
48212: GREATEREQUAL
48213: AND
48214: ST_TO_ADDR
// end ;
48215: LD_VAR 0 3
48219: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48220: LD_INT 0
48222: PPUSH
48223: PPUSH
48224: PPUSH
48225: PPUSH
48226: PPUSH
48227: PPUSH
48228: PPUSH
48229: PPUSH
48230: PPUSH
48231: PPUSH
48232: PPUSH
// result := false ;
48233: LD_ADDR_VAR 0 8
48237: PUSH
48238: LD_INT 0
48240: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48241: LD_VAR 0 5
48245: NOT
48246: PUSH
48247: LD_VAR 0 1
48251: NOT
48252: OR
48253: PUSH
48254: LD_VAR 0 2
48258: NOT
48259: OR
48260: PUSH
48261: LD_VAR 0 3
48265: NOT
48266: OR
48267: IFFALSE 48271
// exit ;
48269: GO 49072
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48271: LD_ADDR_VAR 0 14
48275: PUSH
48276: LD_VAR 0 1
48280: PPUSH
48281: LD_VAR 0 2
48285: PPUSH
48286: LD_VAR 0 3
48290: PPUSH
48291: LD_VAR 0 4
48295: PPUSH
48296: LD_VAR 0 5
48300: PUSH
48301: LD_INT 1
48303: ARRAY
48304: PPUSH
48305: CALL_OW 248
48309: PPUSH
48310: LD_INT 0
48312: PPUSH
48313: CALL 49909 0 6
48317: ST_TO_ADDR
// if not hexes then
48318: LD_VAR 0 14
48322: NOT
48323: IFFALSE 48327
// exit ;
48325: GO 49072
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48327: LD_ADDR_VAR 0 17
48331: PUSH
48332: LD_VAR 0 5
48336: PPUSH
48337: LD_INT 22
48339: PUSH
48340: LD_VAR 0 13
48344: PPUSH
48345: CALL_OW 255
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 30
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 30
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PPUSH
48386: CALL_OW 72
48390: ST_TO_ADDR
// for i = 1 to hexes do
48391: LD_ADDR_VAR 0 9
48395: PUSH
48396: DOUBLE
48397: LD_INT 1
48399: DEC
48400: ST_TO_ADDR
48401: LD_VAR 0 14
48405: PUSH
48406: FOR_TO
48407: IFFALSE 49070
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48409: LD_ADDR_VAR 0 13
48413: PUSH
48414: LD_VAR 0 14
48418: PUSH
48419: LD_VAR 0 9
48423: ARRAY
48424: PUSH
48425: LD_INT 1
48427: ARRAY
48428: PPUSH
48429: LD_VAR 0 14
48433: PUSH
48434: LD_VAR 0 9
48438: ARRAY
48439: PUSH
48440: LD_INT 2
48442: ARRAY
48443: PPUSH
48444: CALL_OW 428
48448: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48449: LD_VAR 0 14
48453: PUSH
48454: LD_VAR 0 9
48458: ARRAY
48459: PUSH
48460: LD_INT 1
48462: ARRAY
48463: PPUSH
48464: LD_VAR 0 14
48468: PUSH
48469: LD_VAR 0 9
48473: ARRAY
48474: PUSH
48475: LD_INT 2
48477: ARRAY
48478: PPUSH
48479: CALL_OW 351
48483: PUSH
48484: LD_VAR 0 14
48488: PUSH
48489: LD_VAR 0 9
48493: ARRAY
48494: PUSH
48495: LD_INT 1
48497: ARRAY
48498: PPUSH
48499: LD_VAR 0 14
48503: PUSH
48504: LD_VAR 0 9
48508: ARRAY
48509: PUSH
48510: LD_INT 2
48512: ARRAY
48513: PPUSH
48514: CALL_OW 488
48518: NOT
48519: OR
48520: PUSH
48521: LD_VAR 0 13
48525: PPUSH
48526: CALL_OW 247
48530: PUSH
48531: LD_INT 3
48533: EQUAL
48534: OR
48535: IFFALSE 48541
// exit ;
48537: POP
48538: POP
48539: GO 49072
// if not tmp then
48541: LD_VAR 0 13
48545: NOT
48546: IFFALSE 48550
// continue ;
48548: GO 48406
// result := true ;
48550: LD_ADDR_VAR 0 8
48554: PUSH
48555: LD_INT 1
48557: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48558: LD_VAR 0 13
48562: PPUSH
48563: CALL_OW 247
48567: PUSH
48568: LD_INT 2
48570: EQUAL
48571: PUSH
48572: LD_VAR 0 13
48576: PPUSH
48577: CALL_OW 263
48581: PUSH
48582: LD_INT 1
48584: EQUAL
48585: AND
48586: IFFALSE 48750
// begin if IsDrivenBy ( tmp ) then
48588: LD_VAR 0 13
48592: PPUSH
48593: CALL_OW 311
48597: IFFALSE 48601
// continue ;
48599: GO 48406
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48601: LD_VAR 0 6
48605: PPUSH
48606: LD_INT 3
48608: PUSH
48609: LD_INT 60
48611: PUSH
48612: EMPTY
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 3
48621: PUSH
48622: LD_INT 55
48624: PUSH
48625: EMPTY
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PPUSH
48636: CALL_OW 72
48640: IFFALSE 48748
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48642: LD_ADDR_VAR 0 18
48646: PUSH
48647: LD_VAR 0 6
48651: PPUSH
48652: LD_INT 3
48654: PUSH
48655: LD_INT 60
48657: PUSH
48658: EMPTY
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: PUSH
48668: LD_INT 55
48670: PUSH
48671: EMPTY
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PPUSH
48682: CALL_OW 72
48686: PUSH
48687: LD_INT 1
48689: ARRAY
48690: ST_TO_ADDR
// if IsInUnit ( driver ) then
48691: LD_VAR 0 18
48695: PPUSH
48696: CALL_OW 310
48700: IFFALSE 48711
// ComExit ( driver ) ;
48702: LD_VAR 0 18
48706: PPUSH
48707: CALL 73093 0 1
// AddComEnterUnit ( driver , tmp ) ;
48711: LD_VAR 0 18
48715: PPUSH
48716: LD_VAR 0 13
48720: PPUSH
48721: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48725: LD_VAR 0 18
48729: PPUSH
48730: LD_VAR 0 7
48734: PPUSH
48735: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48739: LD_VAR 0 18
48743: PPUSH
48744: CALL_OW 181
// end ; continue ;
48748: GO 48406
// end ; if not tmp in cleaners then
48750: LD_VAR 0 13
48754: PUSH
48755: LD_VAR 0 6
48759: IN
48760: NOT
48761: IFFALSE 49068
// begin if dep then
48763: LD_VAR 0 17
48767: IFFALSE 48903
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48769: LD_ADDR_VAR 0 16
48773: PUSH
48774: LD_VAR 0 17
48778: PUSH
48779: LD_INT 1
48781: ARRAY
48782: PPUSH
48783: CALL_OW 250
48787: PPUSH
48788: LD_VAR 0 17
48792: PUSH
48793: LD_INT 1
48795: ARRAY
48796: PPUSH
48797: CALL_OW 254
48801: PPUSH
48802: LD_INT 5
48804: PPUSH
48805: CALL_OW 272
48809: PUSH
48810: LD_VAR 0 17
48814: PUSH
48815: LD_INT 1
48817: ARRAY
48818: PPUSH
48819: CALL_OW 251
48823: PPUSH
48824: LD_VAR 0 17
48828: PUSH
48829: LD_INT 1
48831: ARRAY
48832: PPUSH
48833: CALL_OW 254
48837: PPUSH
48838: LD_INT 5
48840: PPUSH
48841: CALL_OW 273
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48850: LD_VAR 0 16
48854: PUSH
48855: LD_INT 1
48857: ARRAY
48858: PPUSH
48859: LD_VAR 0 16
48863: PUSH
48864: LD_INT 2
48866: ARRAY
48867: PPUSH
48868: CALL_OW 488
48872: IFFALSE 48903
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48874: LD_VAR 0 13
48878: PPUSH
48879: LD_VAR 0 16
48883: PUSH
48884: LD_INT 1
48886: ARRAY
48887: PPUSH
48888: LD_VAR 0 16
48892: PUSH
48893: LD_INT 2
48895: ARRAY
48896: PPUSH
48897: CALL_OW 111
// continue ;
48901: GO 48406
// end ; end ; r := GetDir ( tmp ) ;
48903: LD_ADDR_VAR 0 15
48907: PUSH
48908: LD_VAR 0 13
48912: PPUSH
48913: CALL_OW 254
48917: ST_TO_ADDR
// if r = 5 then
48918: LD_VAR 0 15
48922: PUSH
48923: LD_INT 5
48925: EQUAL
48926: IFFALSE 48936
// r := 0 ;
48928: LD_ADDR_VAR 0 15
48932: PUSH
48933: LD_INT 0
48935: ST_TO_ADDR
// for j = r to 5 do
48936: LD_ADDR_VAR 0 10
48940: PUSH
48941: DOUBLE
48942: LD_VAR 0 15
48946: DEC
48947: ST_TO_ADDR
48948: LD_INT 5
48950: PUSH
48951: FOR_TO
48952: IFFALSE 49066
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48954: LD_ADDR_VAR 0 11
48958: PUSH
48959: LD_VAR 0 13
48963: PPUSH
48964: CALL_OW 250
48968: PPUSH
48969: LD_VAR 0 10
48973: PPUSH
48974: LD_INT 2
48976: PPUSH
48977: CALL_OW 272
48981: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48982: LD_ADDR_VAR 0 12
48986: PUSH
48987: LD_VAR 0 13
48991: PPUSH
48992: CALL_OW 251
48996: PPUSH
48997: LD_VAR 0 10
49001: PPUSH
49002: LD_INT 2
49004: PPUSH
49005: CALL_OW 273
49009: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49010: LD_VAR 0 11
49014: PPUSH
49015: LD_VAR 0 12
49019: PPUSH
49020: CALL_OW 488
49024: PUSH
49025: LD_VAR 0 11
49029: PPUSH
49030: LD_VAR 0 12
49034: PPUSH
49035: CALL_OW 428
49039: NOT
49040: AND
49041: IFFALSE 49064
// begin ComMoveXY ( tmp , _x , _y ) ;
49043: LD_VAR 0 13
49047: PPUSH
49048: LD_VAR 0 11
49052: PPUSH
49053: LD_VAR 0 12
49057: PPUSH
49058: CALL_OW 111
// break ;
49062: GO 49066
// end ; end ;
49064: GO 48951
49066: POP
49067: POP
// end ; end ;
49068: GO 48406
49070: POP
49071: POP
// end ;
49072: LD_VAR 0 8
49076: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49077: LD_INT 0
49079: PPUSH
49080: PPUSH
49081: PPUSH
49082: PPUSH
49083: PPUSH
49084: PPUSH
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
// result := false ;
49089: LD_ADDR_VAR 0 6
49093: PUSH
49094: LD_INT 0
49096: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49097: LD_VAR 0 1
49101: NOT
49102: PUSH
49103: LD_VAR 0 1
49107: PPUSH
49108: CALL_OW 266
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: IN
49123: NOT
49124: OR
49125: PUSH
49126: LD_VAR 0 2
49130: NOT
49131: OR
49132: PUSH
49133: LD_VAR 0 5
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: LD_INT 4
49152: PUSH
49153: LD_INT 5
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: IN
49164: NOT
49165: OR
49166: PUSH
49167: LD_VAR 0 3
49171: PPUSH
49172: LD_VAR 0 4
49176: PPUSH
49177: CALL_OW 488
49181: NOT
49182: OR
49183: IFFALSE 49187
// exit ;
49185: GO 49904
// pom := GetBase ( depot ) ;
49187: LD_ADDR_VAR 0 10
49191: PUSH
49192: LD_VAR 0 1
49196: PPUSH
49197: CALL_OW 274
49201: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49202: LD_ADDR_VAR 0 11
49206: PUSH
49207: LD_VAR 0 2
49211: PPUSH
49212: LD_VAR 0 1
49216: PPUSH
49217: CALL_OW 248
49221: PPUSH
49222: CALL_OW 450
49226: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49227: LD_VAR 0 10
49231: PPUSH
49232: LD_INT 1
49234: PPUSH
49235: CALL_OW 275
49239: PUSH
49240: LD_VAR 0 11
49244: PUSH
49245: LD_INT 1
49247: ARRAY
49248: GREATEREQUAL
49249: PUSH
49250: LD_VAR 0 10
49254: PPUSH
49255: LD_INT 2
49257: PPUSH
49258: CALL_OW 275
49262: PUSH
49263: LD_VAR 0 11
49267: PUSH
49268: LD_INT 2
49270: ARRAY
49271: GREATEREQUAL
49272: AND
49273: PUSH
49274: LD_VAR 0 10
49278: PPUSH
49279: LD_INT 3
49281: PPUSH
49282: CALL_OW 275
49286: PUSH
49287: LD_VAR 0 11
49291: PUSH
49292: LD_INT 3
49294: ARRAY
49295: GREATEREQUAL
49296: AND
49297: NOT
49298: IFFALSE 49302
// exit ;
49300: GO 49904
// if GetBType ( depot ) = b_depot then
49302: LD_VAR 0 1
49306: PPUSH
49307: CALL_OW 266
49311: PUSH
49312: LD_INT 0
49314: EQUAL
49315: IFFALSE 49327
// dist := 28 else
49317: LD_ADDR_VAR 0 14
49321: PUSH
49322: LD_INT 28
49324: ST_TO_ADDR
49325: GO 49335
// dist := 36 ;
49327: LD_ADDR_VAR 0 14
49331: PUSH
49332: LD_INT 36
49334: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49335: LD_VAR 0 1
49339: PPUSH
49340: LD_VAR 0 3
49344: PPUSH
49345: LD_VAR 0 4
49349: PPUSH
49350: CALL_OW 297
49354: PUSH
49355: LD_VAR 0 14
49359: GREATER
49360: IFFALSE 49364
// exit ;
49362: GO 49904
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49364: LD_ADDR_VAR 0 12
49368: PUSH
49369: LD_VAR 0 2
49373: PPUSH
49374: LD_VAR 0 3
49378: PPUSH
49379: LD_VAR 0 4
49383: PPUSH
49384: LD_VAR 0 5
49388: PPUSH
49389: LD_VAR 0 1
49393: PPUSH
49394: CALL_OW 248
49398: PPUSH
49399: LD_INT 0
49401: PPUSH
49402: CALL 49909 0 6
49406: ST_TO_ADDR
// if not hexes then
49407: LD_VAR 0 12
49411: NOT
49412: IFFALSE 49416
// exit ;
49414: GO 49904
// hex := GetHexInfo ( x , y ) ;
49416: LD_ADDR_VAR 0 15
49420: PUSH
49421: LD_VAR 0 3
49425: PPUSH
49426: LD_VAR 0 4
49430: PPUSH
49431: CALL_OW 546
49435: ST_TO_ADDR
// if hex [ 1 ] then
49436: LD_VAR 0 15
49440: PUSH
49441: LD_INT 1
49443: ARRAY
49444: IFFALSE 49448
// exit ;
49446: GO 49904
// height := hex [ 2 ] ;
49448: LD_ADDR_VAR 0 13
49452: PUSH
49453: LD_VAR 0 15
49457: PUSH
49458: LD_INT 2
49460: ARRAY
49461: ST_TO_ADDR
// for i = 1 to hexes do
49462: LD_ADDR_VAR 0 7
49466: PUSH
49467: DOUBLE
49468: LD_INT 1
49470: DEC
49471: ST_TO_ADDR
49472: LD_VAR 0 12
49476: PUSH
49477: FOR_TO
49478: IFFALSE 49808
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49480: LD_VAR 0 12
49484: PUSH
49485: LD_VAR 0 7
49489: ARRAY
49490: PUSH
49491: LD_INT 1
49493: ARRAY
49494: PPUSH
49495: LD_VAR 0 12
49499: PUSH
49500: LD_VAR 0 7
49504: ARRAY
49505: PUSH
49506: LD_INT 2
49508: ARRAY
49509: PPUSH
49510: CALL_OW 488
49514: NOT
49515: PUSH
49516: LD_VAR 0 12
49520: PUSH
49521: LD_VAR 0 7
49525: ARRAY
49526: PUSH
49527: LD_INT 1
49529: ARRAY
49530: PPUSH
49531: LD_VAR 0 12
49535: PUSH
49536: LD_VAR 0 7
49540: ARRAY
49541: PUSH
49542: LD_INT 2
49544: ARRAY
49545: PPUSH
49546: CALL_OW 428
49550: PUSH
49551: LD_INT 0
49553: GREATER
49554: OR
49555: PUSH
49556: LD_VAR 0 12
49560: PUSH
49561: LD_VAR 0 7
49565: ARRAY
49566: PUSH
49567: LD_INT 1
49569: ARRAY
49570: PPUSH
49571: LD_VAR 0 12
49575: PUSH
49576: LD_VAR 0 7
49580: ARRAY
49581: PUSH
49582: LD_INT 2
49584: ARRAY
49585: PPUSH
49586: CALL_OW 351
49590: OR
49591: IFFALSE 49597
// exit ;
49593: POP
49594: POP
49595: GO 49904
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49597: LD_ADDR_VAR 0 8
49601: PUSH
49602: LD_VAR 0 12
49606: PUSH
49607: LD_VAR 0 7
49611: ARRAY
49612: PUSH
49613: LD_INT 1
49615: ARRAY
49616: PPUSH
49617: LD_VAR 0 12
49621: PUSH
49622: LD_VAR 0 7
49626: ARRAY
49627: PUSH
49628: LD_INT 2
49630: ARRAY
49631: PPUSH
49632: CALL_OW 546
49636: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49637: LD_VAR 0 8
49641: PUSH
49642: LD_INT 1
49644: ARRAY
49645: PUSH
49646: LD_VAR 0 8
49650: PUSH
49651: LD_INT 2
49653: ARRAY
49654: PUSH
49655: LD_VAR 0 13
49659: PUSH
49660: LD_INT 2
49662: PLUS
49663: GREATER
49664: OR
49665: PUSH
49666: LD_VAR 0 8
49670: PUSH
49671: LD_INT 2
49673: ARRAY
49674: PUSH
49675: LD_VAR 0 13
49679: PUSH
49680: LD_INT 2
49682: MINUS
49683: LESS
49684: OR
49685: PUSH
49686: LD_VAR 0 8
49690: PUSH
49691: LD_INT 3
49693: ARRAY
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 8
49700: PUSH
49701: LD_INT 9
49703: PUSH
49704: LD_INT 10
49706: PUSH
49707: LD_INT 11
49709: PUSH
49710: LD_INT 12
49712: PUSH
49713: LD_INT 13
49715: PUSH
49716: LD_INT 16
49718: PUSH
49719: LD_INT 17
49721: PUSH
49722: LD_INT 18
49724: PUSH
49725: LD_INT 19
49727: PUSH
49728: LD_INT 20
49730: PUSH
49731: LD_INT 21
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: IN
49749: NOT
49750: OR
49751: PUSH
49752: LD_VAR 0 8
49756: PUSH
49757: LD_INT 5
49759: ARRAY
49760: NOT
49761: OR
49762: PUSH
49763: LD_VAR 0 8
49767: PUSH
49768: LD_INT 6
49770: ARRAY
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 7
49780: PUSH
49781: LD_INT 9
49783: PUSH
49784: LD_INT 10
49786: PUSH
49787: LD_INT 11
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: IN
49798: NOT
49799: OR
49800: IFFALSE 49806
// exit ;
49802: POP
49803: POP
49804: GO 49904
// end ;
49806: GO 49477
49808: POP
49809: POP
// side := GetSide ( depot ) ;
49810: LD_ADDR_VAR 0 9
49814: PUSH
49815: LD_VAR 0 1
49819: PPUSH
49820: CALL_OW 255
49824: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49825: LD_VAR 0 9
49829: PPUSH
49830: LD_VAR 0 3
49834: PPUSH
49835: LD_VAR 0 4
49839: PPUSH
49840: LD_INT 20
49842: PPUSH
49843: CALL 42238 0 4
49847: PUSH
49848: LD_INT 4
49850: ARRAY
49851: IFFALSE 49855
// exit ;
49853: GO 49904
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49855: LD_VAR 0 2
49859: PUSH
49860: LD_INT 29
49862: PUSH
49863: LD_INT 30
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: IN
49870: PUSH
49871: LD_VAR 0 3
49875: PPUSH
49876: LD_VAR 0 4
49880: PPUSH
49881: LD_VAR 0 9
49885: PPUSH
49886: CALL_OW 440
49890: NOT
49891: AND
49892: IFFALSE 49896
// exit ;
49894: GO 49904
// result := true ;
49896: LD_ADDR_VAR 0 6
49900: PUSH
49901: LD_INT 1
49903: ST_TO_ADDR
// end ;
49904: LD_VAR 0 6
49908: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49909: LD_INT 0
49911: PPUSH
49912: PPUSH
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
49929: PPUSH
49930: PPUSH
49931: PPUSH
49932: PPUSH
49933: PPUSH
49934: PPUSH
49935: PPUSH
49936: PPUSH
49937: PPUSH
49938: PPUSH
49939: PPUSH
49940: PPUSH
49941: PPUSH
49942: PPUSH
49943: PPUSH
49944: PPUSH
49945: PPUSH
49946: PPUSH
49947: PPUSH
49948: PPUSH
49949: PPUSH
49950: PPUSH
49951: PPUSH
49952: PPUSH
49953: PPUSH
49954: PPUSH
49955: PPUSH
49956: PPUSH
49957: PPUSH
49958: PPUSH
49959: PPUSH
49960: PPUSH
49961: PPUSH
49962: PPUSH
49963: PPUSH
49964: PPUSH
49965: PPUSH
49966: PPUSH
49967: PPUSH
49968: PPUSH
// result = [ ] ;
49969: LD_ADDR_VAR 0 7
49973: PUSH
49974: EMPTY
49975: ST_TO_ADDR
// temp_list = [ ] ;
49976: LD_ADDR_VAR 0 9
49980: PUSH
49981: EMPTY
49982: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49983: LD_VAR 0 4
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 3
49999: PUSH
50000: LD_INT 4
50002: PUSH
50003: LD_INT 5
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: IN
50014: NOT
50015: PUSH
50016: LD_VAR 0 1
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: IN
50031: PUSH
50032: LD_VAR 0 5
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 3
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: IN
50051: NOT
50052: AND
50053: OR
50054: IFFALSE 50058
// exit ;
50056: GO 68449
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50058: LD_VAR 0 1
50062: PUSH
50063: LD_INT 6
50065: PUSH
50066: LD_INT 7
50068: PUSH
50069: LD_INT 8
50071: PUSH
50072: LD_INT 13
50074: PUSH
50075: LD_INT 12
50077: PUSH
50078: LD_INT 15
50080: PUSH
50081: LD_INT 11
50083: PUSH
50084: LD_INT 14
50086: PUSH
50087: LD_INT 10
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: IN
50101: IFFALSE 50111
// btype = b_lab ;
50103: LD_ADDR_VAR 0 1
50107: PUSH
50108: LD_INT 6
50110: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50111: LD_VAR 0 6
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: LIST
50129: IN
50130: NOT
50131: PUSH
50132: LD_VAR 0 1
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: LD_INT 6
50151: PUSH
50152: LD_INT 36
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: LD_INT 5
50160: PUSH
50161: LD_INT 31
50163: PUSH
50164: LD_INT 32
50166: PUSH
50167: LD_INT 33
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: IN
50183: NOT
50184: PUSH
50185: LD_VAR 0 6
50189: PUSH
50190: LD_INT 1
50192: EQUAL
50193: AND
50194: OR
50195: PUSH
50196: LD_VAR 0 1
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 3
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: IN
50211: NOT
50212: PUSH
50213: LD_VAR 0 6
50217: PUSH
50218: LD_INT 2
50220: EQUAL
50221: AND
50222: OR
50223: IFFALSE 50233
// mode = 0 ;
50225: LD_ADDR_VAR 0 6
50229: PUSH
50230: LD_INT 0
50232: ST_TO_ADDR
// case mode of 0 :
50233: LD_VAR 0 6
50237: PUSH
50238: LD_INT 0
50240: DOUBLE
50241: EQUAL
50242: IFTRUE 50246
50244: GO 61699
50246: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50247: LD_ADDR_VAR 0 11
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50440: LD_ADDR_VAR 0 12
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50636: LD_ADDR_VAR 0 13
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: NEG
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50835: LD_ADDR_VAR 0 14
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51031: LD_ADDR_VAR 0 15
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51224: LD_ADDR_VAR 0 16
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51417: LD_ADDR_VAR 0 17
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51647: LD_ADDR_VAR 0 18
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51877: LD_ADDR_VAR 0 19
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52107: LD_ADDR_VAR 0 20
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52337: LD_ADDR_VAR 0 21
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52567: LD_ADDR_VAR 0 22
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52797: LD_ADDR_VAR 0 23
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53077: LD_ADDR_VAR 0 24
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53353: LD_ADDR_VAR 0 25
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 3
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53627: LD_ADDR_VAR 0 26
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: LD_INT 3
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53903: LD_ADDR_VAR 0 27
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 2
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54183: LD_ADDR_VAR 0 28
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 3
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 3
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54465: LD_ADDR_VAR 0 29
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 3
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: NEG
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54744: LD_ADDR_VAR 0 30
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 3
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: LD_INT 3
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55022: LD_ADDR_VAR 0 31
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55300: LD_ADDR_VAR 0 32
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55578: LD_ADDR_VAR 0 33
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 3
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55857: LD_ADDR_VAR 0 34
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 3
56102: NEG
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56137: LD_ADDR_VAR 0 35
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56249: LD_ADDR_VAR 0 36
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56361: LD_ADDR_VAR 0 37
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56473: LD_ADDR_VAR 0 38
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56585: LD_ADDR_VAR 0 39
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56697: LD_ADDR_VAR 0 40
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56809: LD_ADDR_VAR 0 41
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 3
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 3
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57159: LD_ADDR_VAR 0 42
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: LD_INT 3
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 3
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 3
57468: NEG
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57509: LD_ADDR_VAR 0 43
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 3
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57857: LD_ADDR_VAR 0 44
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58207: LD_ADDR_VAR 0 45
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: LD_INT 3
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 3
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 3
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58557: LD_ADDR_VAR 0 46
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 3
58853: NEG
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 3
58864: NEG
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58905: LD_ADDR_VAR 0 47
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 2
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59056: LD_ADDR_VAR 0 48
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59203: LD_ADDR_VAR 0 49
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: LD_INT 2
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59347: LD_ADDR_VAR 0 50
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59491: LD_ADDR_VAR 0 51
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59638: LD_ADDR_VAR 0 52
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59789: LD_ADDR_VAR 0 53
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60019: LD_ADDR_VAR 0 54
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: NEG
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: NEG
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60249: LD_ADDR_VAR 0 55
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 2
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60479: LD_ADDR_VAR 0 56
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60709: LD_ADDR_VAR 0 57
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60939: LD_ADDR_VAR 0 58
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61169: LD_ADDR_VAR 0 59
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61257: LD_ADDR_VAR 0 60
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61345: LD_ADDR_VAR 0 61
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61433: LD_ADDR_VAR 0 62
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61521: LD_ADDR_VAR 0 63
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61609: LD_ADDR_VAR 0 64
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: ST_TO_ADDR
// end ; 1 :
61697: GO 67594
61699: LD_INT 1
61701: DOUBLE
61702: EQUAL
61703: IFTRUE 61707
61705: GO 64330
61707: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61708: LD_ADDR_VAR 0 11
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: LD_INT 3
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 3
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61752: LD_ADDR_VAR 0 12
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 3
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: LIST
61792: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61793: LD_ADDR_VAR 0 13
61797: PUSH
61798: LD_INT 3
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: LD_INT 3
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: LD_INT 3
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61833: LD_ADDR_VAR 0 14
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: LIST
61873: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61874: LD_ADDR_VAR 0 15
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 3
61892: NEG
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: LIST
61917: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61918: LD_ADDR_VAR 0 16
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: LD_INT 3
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: NEG
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 3
61949: NEG
61950: PUSH
61951: LD_INT 3
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61964: LD_ADDR_VAR 0 17
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: LD_INT 3
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: LD_INT 3
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62008: LD_ADDR_VAR 0 18
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62049: LD_ADDR_VAR 0 19
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: LD_INT 2
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62089: LD_ADDR_VAR 0 20
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62130: LD_ADDR_VAR 0 21
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62174: LD_ADDR_VAR 0 22
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 3
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: NEG
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 3
62205: NEG
62206: PUSH
62207: LD_INT 3
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62220: LD_ADDR_VAR 0 23
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 3
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 4
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: LD_INT 3
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62264: LD_ADDR_VAR 0 24
62268: PUSH
62269: LD_INT 3
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 3
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 4
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62305: LD_ADDR_VAR 0 25
62309: PUSH
62310: LD_INT 3
62312: PUSH
62313: LD_INT 3
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 4
62322: PUSH
62323: LD_INT 3
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: LD_INT 4
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: LIST
62344: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62345: LD_ADDR_VAR 0 26
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: LD_INT 4
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: LD_INT 3
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62386: LD_ADDR_VAR 0 27
62390: PUSH
62391: LD_INT 3
62393: NEG
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 3
62404: NEG
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 4
62415: NEG
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: LIST
62429: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62430: LD_ADDR_VAR 0 28
62434: PUSH
62435: LD_INT 3
62437: NEG
62438: PUSH
62439: LD_INT 3
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: LD_INT 4
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 4
62461: NEG
62462: PUSH
62463: LD_INT 3
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62476: LD_ADDR_VAR 0 29
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 2
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: LD_INT 4
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 4
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 3
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: LD_INT 5
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 5
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 4
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: LD_INT 6
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 6
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 5
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62631: LD_ADDR_VAR 0 30
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 4
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 4
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 5
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 5
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 5
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 6
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 6
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62774: LD_ADDR_VAR 0 31
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: LD_INT 3
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: LD_INT 3
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 4
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 4
62821: PUSH
62822: LD_INT 4
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: LD_INT 4
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 5
62841: PUSH
62842: LD_INT 4
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 5
62851: PUSH
62852: LD_INT 5
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 4
62861: PUSH
62862: LD_INT 5
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 6
62871: PUSH
62872: LD_INT 5
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 6
62881: PUSH
62882: LD_INT 6
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 5
62891: PUSH
62892: LD_INT 6
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62913: LD_ADDR_VAR 0 32
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: LD_INT 4
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: LD_INT 4
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: LD_INT 3
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: LD_INT 5
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 5
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: LD_INT 6
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 6
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: LD_INT 5
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63056: LD_ADDR_VAR 0 33
63060: PUSH
63061: LD_INT 2
63063: NEG
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 3
63074: NEG
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 3
63085: NEG
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 4
63108: NEG
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 4
63119: NEG
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 4
63131: NEG
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 5
63142: NEG
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 5
63153: NEG
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 5
63165: NEG
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 6
63176: NEG
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 6
63187: NEG
63188: PUSH
63189: LD_INT 1
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63211: LD_ADDR_VAR 0 34
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: LD_INT 3
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 3
63254: NEG
63255: PUSH
63256: LD_INT 4
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 4
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 4
63278: NEG
63279: PUSH
63280: LD_INT 4
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 4
63290: NEG
63291: PUSH
63292: LD_INT 5
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 5
63302: NEG
63303: PUSH
63304: LD_INT 4
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 5
63314: NEG
63315: PUSH
63316: LD_INT 5
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 5
63326: NEG
63327: PUSH
63328: LD_INT 6
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 6
63338: NEG
63339: PUSH
63340: LD_INT 5
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 6
63350: NEG
63351: PUSH
63352: LD_INT 6
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63374: LD_ADDR_VAR 0 41
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: LIST
63417: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63418: LD_ADDR_VAR 0 42
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63459: LD_ADDR_VAR 0 43
63463: PUSH
63464: LD_INT 2
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 3
63476: PUSH
63477: LD_INT 2
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: LIST
63498: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63499: LD_ADDR_VAR 0 44
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: LD_INT 2
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63540: LD_ADDR_VAR 0 45
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 3
63569: NEG
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: LIST
63583: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63584: LD_ADDR_VAR 0 46
63588: PUSH
63589: LD_INT 2
63591: NEG
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: LIST
63629: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63630: LD_ADDR_VAR 0 47
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: LD_INT 3
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: LD_INT 3
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63663: LD_ADDR_VAR 0 48
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 2
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63694: LD_ADDR_VAR 0 49
63698: PUSH
63699: LD_INT 3
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 3
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63723: LD_ADDR_VAR 0 50
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: LD_INT 3
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: LD_INT 3
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63752: LD_ADDR_VAR 0 51
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 2
63770: NEG
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63783: LD_ADDR_VAR 0 52
63787: PUSH
63788: LD_INT 3
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 3
63802: NEG
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63816: LD_ADDR_VAR 0 53
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 3
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63860: LD_ADDR_VAR 0 54
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 3
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 3
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63901: LD_ADDR_VAR 0 55
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 3
63918: PUSH
63919: LD_INT 3
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: PUSH
63929: LD_INT 3
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63941: LD_ADDR_VAR 0 56
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: LD_INT 3
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 3
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: LIST
63981: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63982: LD_ADDR_VAR 0 57
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 3
64000: NEG
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64026: LD_ADDR_VAR 0 58
64030: PUSH
64031: LD_INT 2
64033: NEG
64034: PUSH
64035: LD_INT 3
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 3
64045: NEG
64046: PUSH
64047: LD_INT 2
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 3
64057: NEG
64058: PUSH
64059: LD_INT 3
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64072: LD_ADDR_VAR 0 59
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: LD_INT 2
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64116: LD_ADDR_VAR 0 60
64120: PUSH
64121: LD_INT 1
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 2
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: LIST
64156: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64157: LD_ADDR_VAR 0 61
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 2
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: LIST
64196: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64197: LD_ADDR_VAR 0 62
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64238: LD_ADDR_VAR 0 63
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64282: LD_ADDR_VAR 0 64
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 2
64301: NEG
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: LD_INT 2
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// end ; 2 :
64328: GO 67594
64330: LD_INT 2
64332: DOUBLE
64333: EQUAL
64334: IFTRUE 64338
64336: GO 67593
64338: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64339: LD_ADDR_VAR 0 29
64343: PUSH
64344: LD_INT 4
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 4
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 5
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 5
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 4
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 3
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: PUSH
64408: LD_INT 1
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 3
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 5
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 3
64439: PUSH
64440: LD_INT 3
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 3
64449: PUSH
64450: LD_INT 2
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 4
64459: PUSH
64460: LD_INT 3
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 4
64469: PUSH
64470: LD_INT 4
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 3
64479: PUSH
64480: LD_INT 4
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: LD_INT 3
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 4
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: LD_INT 4
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 4
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 3
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: LD_INT 4
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 5
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 5
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 4
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 3
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: LD_INT 5
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: LD_INT 3
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: NEG
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 3
64633: NEG
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: NEG
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 3
64667: NEG
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 4
64678: NEG
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 4
64689: NEG
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 4
64701: NEG
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 2
64713: NEG
64714: PUSH
64715: LD_INT 2
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 4
64724: NEG
64725: PUSH
64726: LD_INT 4
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 4
64736: NEG
64737: PUSH
64738: LD_INT 5
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 3
64748: NEG
64749: PUSH
64750: LD_INT 4
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 3
64760: NEG
64761: PUSH
64762: LD_INT 3
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 4
64772: NEG
64773: PUSH
64774: LD_INT 3
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 5
64784: NEG
64785: PUSH
64786: LD_INT 4
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 5
64796: NEG
64797: PUSH
64798: LD_INT 5
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: LD_INT 5
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 5
64820: NEG
64821: PUSH
64822: LD_INT 3
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64877: LD_ADDR_VAR 0 30
64881: PUSH
64882: LD_INT 4
64884: PUSH
64885: LD_INT 4
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 4
64894: PUSH
64895: LD_INT 3
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 5
64904: PUSH
64905: LD_INT 4
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 5
64914: PUSH
64915: LD_INT 5
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 4
64924: PUSH
64925: LD_INT 5
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 3
64934: PUSH
64935: LD_INT 4
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 3
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 5
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 3
64964: PUSH
64965: LD_INT 5
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 3
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 4
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: LD_INT 3
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 2
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: LD_INT 4
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: NEG
65057: PUSH
65058: LD_INT 2
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 4
65067: NEG
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 4
65078: NEG
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 3
65090: NEG
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 3
65101: NEG
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 4
65112: NEG
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 5
65123: NEG
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 5
65134: NEG
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 5
65146: NEG
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 3
65158: NEG
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 3
65169: NEG
65170: PUSH
65171: LD_INT 3
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 3
65181: NEG
65182: PUSH
65183: LD_INT 4
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: LD_INT 3
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: LD_INT 2
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 4
65229: NEG
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 4
65241: NEG
65242: PUSH
65243: LD_INT 4
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: LD_INT 4
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 4
65265: NEG
65266: PUSH
65267: LD_INT 2
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: LD_INT 4
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: LD_INT 5
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: LD_INT 4
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: LD_INT 3
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: LD_INT 4
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: LD_INT 5
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: LD_INT 3
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 2
65367: NEG
65368: PUSH
65369: LD_INT 5
65371: NEG
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65424: LD_ADDR_VAR 0 31
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 4
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 3
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: LD_INT 4
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: LD_INT 5
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 5
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 4
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: LD_INT 3
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: LD_INT 5
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: NEG
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 3
65535: NEG
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 2
65558: NEG
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 3
65569: NEG
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 4
65580: NEG
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 4
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 4
65603: NEG
65604: PUSH
65605: LD_INT 2
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 2
65615: NEG
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 4
65626: NEG
65627: PUSH
65628: LD_INT 4
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 4
65638: NEG
65639: PUSH
65640: LD_INT 5
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 3
65650: NEG
65651: PUSH
65652: LD_INT 4
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 3
65662: NEG
65663: PUSH
65664: LD_INT 3
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 4
65674: NEG
65675: PUSH
65676: LD_INT 3
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 5
65686: NEG
65687: PUSH
65688: LD_INT 4
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 5
65698: NEG
65699: PUSH
65700: LD_INT 5
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 3
65710: NEG
65711: PUSH
65712: LD_INT 5
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 5
65722: NEG
65723: PUSH
65724: LD_INT 3
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_INT 4
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: PUSH
65757: LD_INT 3
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: LD_INT 2
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: LD_INT 3
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: LD_INT 4
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: LD_INT 2
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 2
65824: NEG
65825: PUSH
65826: LD_INT 4
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 4
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 4
65846: PUSH
65847: LD_INT 1
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 5
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 5
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 4
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 3
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 3
65908: PUSH
65909: LD_INT 2
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 5
65919: PUSH
65920: LD_INT 2
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65974: LD_ADDR_VAR 0 32
65978: PUSH
65979: LD_INT 4
65981: NEG
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 4
65992: NEG
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 3
66004: NEG
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 3
66015: NEG
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 4
66026: NEG
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 5
66037: NEG
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 5
66048: NEG
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 5
66060: NEG
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: LD_INT 2
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 3
66083: NEG
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: NEG
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 2
66107: NEG
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 2
66119: NEG
66120: PUSH
66121: LD_INT 2
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: LD_INT 2
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 4
66143: NEG
66144: PUSH
66145: LD_INT 3
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 4
66155: NEG
66156: PUSH
66157: LD_INT 4
66159: NEG
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 2
66167: NEG
66168: PUSH
66169: LD_INT 4
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 4
66179: NEG
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 4
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: LD_INT 5
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: LD_INT 4
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: LD_INT 3
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: LD_INT 4
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: NEG
66259: PUSH
66260: LD_INT 5
66262: NEG
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: LD_INT 3
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 2
66281: NEG
66282: PUSH
66283: LD_INT 5
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 3
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 3
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 4
66324: PUSH
66325: LD_INT 1
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 2
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 2
66354: PUSH
66355: LD_INT 1
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: LD_INT 2
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 4
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 4
66386: PUSH
66387: LD_INT 4
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 4
66396: PUSH
66397: LD_INT 3
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 5
66406: PUSH
66407: LD_INT 4
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 5
66416: PUSH
66417: LD_INT 5
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 4
66426: PUSH
66427: LD_INT 5
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 3
66436: PUSH
66437: LD_INT 4
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 3
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 5
66456: PUSH
66457: LD_INT 3
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 3
66466: PUSH
66467: LD_INT 5
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66521: LD_ADDR_VAR 0 33
66525: PUSH
66526: LD_INT 4
66528: NEG
66529: PUSH
66530: LD_INT 4
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 4
66540: NEG
66541: PUSH
66542: LD_INT 5
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 3
66552: NEG
66553: PUSH
66554: LD_INT 4
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: LD_INT 3
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 4
66576: NEG
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 5
66588: NEG
66589: PUSH
66590: LD_INT 4
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 5
66600: NEG
66601: PUSH
66602: LD_INT 5
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 3
66612: NEG
66613: PUSH
66614: LD_INT 5
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 5
66624: NEG
66625: PUSH
66626: LD_INT 3
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: LD_INT 4
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 2
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: LD_INT 3
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: LD_INT 4
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: LD_INT 2
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 2
66726: NEG
66727: PUSH
66728: LD_INT 4
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 4
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 4
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 5
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 5
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 4
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 3
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 3
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 3
66810: PUSH
66811: LD_INT 2
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 5
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: LD_INT 3
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 4
66851: PUSH
66852: LD_INT 3
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: LD_INT 4
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 3
66871: PUSH
66872: LD_INT 4
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: LD_INT 3
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 2
66891: PUSH
66892: LD_INT 2
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 4
66901: PUSH
66902: LD_INT 2
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 2
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: LD_INT 5
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 5
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: LD_INT 4
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: LD_INT 3
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 2
66993: PUSH
66994: LD_INT 5
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: LD_INT 3
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67059: LD_ADDR_VAR 0 34
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: LD_INT 4
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: LD_INT 5
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: LD_INT 4
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 1
67121: NEG
67122: PUSH
67123: LD_INT 4
67125: NEG
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: LD_INT 5
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 2
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 2
67156: NEG
67157: PUSH
67158: LD_INT 5
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: LD_INT 1
67181: NEG
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 4
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 4
67199: PUSH
67200: LD_INT 1
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 3
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 2
67240: PUSH
67241: LD_INT 2
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 4
67251: PUSH
67252: LD_INT 2
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 4
67261: PUSH
67262: LD_INT 4
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 4
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 5
67281: PUSH
67282: LD_INT 4
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 5
67291: PUSH
67292: LD_INT 5
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 4
67301: PUSH
67302: LD_INT 5
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: LD_INT 4
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: PUSH
67322: LD_INT 3
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 5
67331: PUSH
67332: LD_INT 3
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 3
67341: PUSH
67342: LD_INT 5
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 3
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: LD_INT 2
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: LD_INT 3
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: LD_INT 4
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: NEG
67402: PUSH
67403: LD_INT 3
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 2
67423: PUSH
67424: LD_INT 4
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 2
67433: NEG
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 4
67444: NEG
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 4
67455: NEG
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 3
67467: NEG
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 3
67478: NEG
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 4
67489: NEG
67490: PUSH
67491: LD_INT 1
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 5
67500: NEG
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 5
67511: NEG
67512: PUSH
67513: LD_INT 1
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 5
67523: NEG
67524: PUSH
67525: LD_INT 2
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: LD_INT 2
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: ST_TO_ADDR
// end ; end ;
67591: GO 67594
67593: POP
// case btype of b_depot , b_warehouse :
67594: LD_VAR 0 1
67598: PUSH
67599: LD_INT 0
67601: DOUBLE
67602: EQUAL
67603: IFTRUE 67613
67605: LD_INT 1
67607: DOUBLE
67608: EQUAL
67609: IFTRUE 67613
67611: GO 67814
67613: POP
// case nation of nation_american :
67614: LD_VAR 0 5
67618: PUSH
67619: LD_INT 1
67621: DOUBLE
67622: EQUAL
67623: IFTRUE 67627
67625: GO 67683
67627: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67628: LD_ADDR_VAR 0 9
67632: PUSH
67633: LD_VAR 0 11
67637: PUSH
67638: LD_VAR 0 12
67642: PUSH
67643: LD_VAR 0 13
67647: PUSH
67648: LD_VAR 0 14
67652: PUSH
67653: LD_VAR 0 15
67657: PUSH
67658: LD_VAR 0 16
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: PUSH
67671: LD_VAR 0 4
67675: PUSH
67676: LD_INT 1
67678: PLUS
67679: ARRAY
67680: ST_TO_ADDR
67681: GO 67812
67683: LD_INT 2
67685: DOUBLE
67686: EQUAL
67687: IFTRUE 67691
67689: GO 67747
67691: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67692: LD_ADDR_VAR 0 9
67696: PUSH
67697: LD_VAR 0 17
67701: PUSH
67702: LD_VAR 0 18
67706: PUSH
67707: LD_VAR 0 19
67711: PUSH
67712: LD_VAR 0 20
67716: PUSH
67717: LD_VAR 0 21
67721: PUSH
67722: LD_VAR 0 22
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: PUSH
67735: LD_VAR 0 4
67739: PUSH
67740: LD_INT 1
67742: PLUS
67743: ARRAY
67744: ST_TO_ADDR
67745: GO 67812
67747: LD_INT 3
67749: DOUBLE
67750: EQUAL
67751: IFTRUE 67755
67753: GO 67811
67755: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67756: LD_ADDR_VAR 0 9
67760: PUSH
67761: LD_VAR 0 23
67765: PUSH
67766: LD_VAR 0 24
67770: PUSH
67771: LD_VAR 0 25
67775: PUSH
67776: LD_VAR 0 26
67780: PUSH
67781: LD_VAR 0 27
67785: PUSH
67786: LD_VAR 0 28
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: PUSH
67799: LD_VAR 0 4
67803: PUSH
67804: LD_INT 1
67806: PLUS
67807: ARRAY
67808: ST_TO_ADDR
67809: GO 67812
67811: POP
67812: GO 68367
67814: LD_INT 2
67816: DOUBLE
67817: EQUAL
67818: IFTRUE 67828
67820: LD_INT 3
67822: DOUBLE
67823: EQUAL
67824: IFTRUE 67828
67826: GO 67884
67828: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67829: LD_ADDR_VAR 0 9
67833: PUSH
67834: LD_VAR 0 29
67838: PUSH
67839: LD_VAR 0 30
67843: PUSH
67844: LD_VAR 0 31
67848: PUSH
67849: LD_VAR 0 32
67853: PUSH
67854: LD_VAR 0 33
67858: PUSH
67859: LD_VAR 0 34
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: PUSH
67872: LD_VAR 0 4
67876: PUSH
67877: LD_INT 1
67879: PLUS
67880: ARRAY
67881: ST_TO_ADDR
67882: GO 68367
67884: LD_INT 16
67886: DOUBLE
67887: EQUAL
67888: IFTRUE 67946
67890: LD_INT 17
67892: DOUBLE
67893: EQUAL
67894: IFTRUE 67946
67896: LD_INT 18
67898: DOUBLE
67899: EQUAL
67900: IFTRUE 67946
67902: LD_INT 19
67904: DOUBLE
67905: EQUAL
67906: IFTRUE 67946
67908: LD_INT 22
67910: DOUBLE
67911: EQUAL
67912: IFTRUE 67946
67914: LD_INT 20
67916: DOUBLE
67917: EQUAL
67918: IFTRUE 67946
67920: LD_INT 21
67922: DOUBLE
67923: EQUAL
67924: IFTRUE 67946
67926: LD_INT 23
67928: DOUBLE
67929: EQUAL
67930: IFTRUE 67946
67932: LD_INT 24
67934: DOUBLE
67935: EQUAL
67936: IFTRUE 67946
67938: LD_INT 25
67940: DOUBLE
67941: EQUAL
67942: IFTRUE 67946
67944: GO 68002
67946: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67947: LD_ADDR_VAR 0 9
67951: PUSH
67952: LD_VAR 0 35
67956: PUSH
67957: LD_VAR 0 36
67961: PUSH
67962: LD_VAR 0 37
67966: PUSH
67967: LD_VAR 0 38
67971: PUSH
67972: LD_VAR 0 39
67976: PUSH
67977: LD_VAR 0 40
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: PUSH
67990: LD_VAR 0 4
67994: PUSH
67995: LD_INT 1
67997: PLUS
67998: ARRAY
67999: ST_TO_ADDR
68000: GO 68367
68002: LD_INT 6
68004: DOUBLE
68005: EQUAL
68006: IFTRUE 68058
68008: LD_INT 7
68010: DOUBLE
68011: EQUAL
68012: IFTRUE 68058
68014: LD_INT 8
68016: DOUBLE
68017: EQUAL
68018: IFTRUE 68058
68020: LD_INT 13
68022: DOUBLE
68023: EQUAL
68024: IFTRUE 68058
68026: LD_INT 12
68028: DOUBLE
68029: EQUAL
68030: IFTRUE 68058
68032: LD_INT 15
68034: DOUBLE
68035: EQUAL
68036: IFTRUE 68058
68038: LD_INT 11
68040: DOUBLE
68041: EQUAL
68042: IFTRUE 68058
68044: LD_INT 14
68046: DOUBLE
68047: EQUAL
68048: IFTRUE 68058
68050: LD_INT 10
68052: DOUBLE
68053: EQUAL
68054: IFTRUE 68058
68056: GO 68114
68058: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68059: LD_ADDR_VAR 0 9
68063: PUSH
68064: LD_VAR 0 41
68068: PUSH
68069: LD_VAR 0 42
68073: PUSH
68074: LD_VAR 0 43
68078: PUSH
68079: LD_VAR 0 44
68083: PUSH
68084: LD_VAR 0 45
68088: PUSH
68089: LD_VAR 0 46
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: PUSH
68102: LD_VAR 0 4
68106: PUSH
68107: LD_INT 1
68109: PLUS
68110: ARRAY
68111: ST_TO_ADDR
68112: GO 68367
68114: LD_INT 36
68116: DOUBLE
68117: EQUAL
68118: IFTRUE 68122
68120: GO 68178
68122: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68123: LD_ADDR_VAR 0 9
68127: PUSH
68128: LD_VAR 0 47
68132: PUSH
68133: LD_VAR 0 48
68137: PUSH
68138: LD_VAR 0 49
68142: PUSH
68143: LD_VAR 0 50
68147: PUSH
68148: LD_VAR 0 51
68152: PUSH
68153: LD_VAR 0 52
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: PUSH
68166: LD_VAR 0 4
68170: PUSH
68171: LD_INT 1
68173: PLUS
68174: ARRAY
68175: ST_TO_ADDR
68176: GO 68367
68178: LD_INT 4
68180: DOUBLE
68181: EQUAL
68182: IFTRUE 68204
68184: LD_INT 5
68186: DOUBLE
68187: EQUAL
68188: IFTRUE 68204
68190: LD_INT 34
68192: DOUBLE
68193: EQUAL
68194: IFTRUE 68204
68196: LD_INT 37
68198: DOUBLE
68199: EQUAL
68200: IFTRUE 68204
68202: GO 68260
68204: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68205: LD_ADDR_VAR 0 9
68209: PUSH
68210: LD_VAR 0 53
68214: PUSH
68215: LD_VAR 0 54
68219: PUSH
68220: LD_VAR 0 55
68224: PUSH
68225: LD_VAR 0 56
68229: PUSH
68230: LD_VAR 0 57
68234: PUSH
68235: LD_VAR 0 58
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: PUSH
68248: LD_VAR 0 4
68252: PUSH
68253: LD_INT 1
68255: PLUS
68256: ARRAY
68257: ST_TO_ADDR
68258: GO 68367
68260: LD_INT 31
68262: DOUBLE
68263: EQUAL
68264: IFTRUE 68310
68266: LD_INT 32
68268: DOUBLE
68269: EQUAL
68270: IFTRUE 68310
68272: LD_INT 33
68274: DOUBLE
68275: EQUAL
68276: IFTRUE 68310
68278: LD_INT 27
68280: DOUBLE
68281: EQUAL
68282: IFTRUE 68310
68284: LD_INT 26
68286: DOUBLE
68287: EQUAL
68288: IFTRUE 68310
68290: LD_INT 28
68292: DOUBLE
68293: EQUAL
68294: IFTRUE 68310
68296: LD_INT 29
68298: DOUBLE
68299: EQUAL
68300: IFTRUE 68310
68302: LD_INT 30
68304: DOUBLE
68305: EQUAL
68306: IFTRUE 68310
68308: GO 68366
68310: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68311: LD_ADDR_VAR 0 9
68315: PUSH
68316: LD_VAR 0 59
68320: PUSH
68321: LD_VAR 0 60
68325: PUSH
68326: LD_VAR 0 61
68330: PUSH
68331: LD_VAR 0 62
68335: PUSH
68336: LD_VAR 0 63
68340: PUSH
68341: LD_VAR 0 64
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: PUSH
68354: LD_VAR 0 4
68358: PUSH
68359: LD_INT 1
68361: PLUS
68362: ARRAY
68363: ST_TO_ADDR
68364: GO 68367
68366: POP
// temp_list2 = [ ] ;
68367: LD_ADDR_VAR 0 10
68371: PUSH
68372: EMPTY
68373: ST_TO_ADDR
// for i in temp_list do
68374: LD_ADDR_VAR 0 8
68378: PUSH
68379: LD_VAR 0 9
68383: PUSH
68384: FOR_IN
68385: IFFALSE 68437
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68387: LD_ADDR_VAR 0 10
68391: PUSH
68392: LD_VAR 0 10
68396: PUSH
68397: LD_VAR 0 8
68401: PUSH
68402: LD_INT 1
68404: ARRAY
68405: PUSH
68406: LD_VAR 0 2
68410: PLUS
68411: PUSH
68412: LD_VAR 0 8
68416: PUSH
68417: LD_INT 2
68419: ARRAY
68420: PUSH
68421: LD_VAR 0 3
68425: PLUS
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: EMPTY
68432: LIST
68433: ADD
68434: ST_TO_ADDR
68435: GO 68384
68437: POP
68438: POP
// result = temp_list2 ;
68439: LD_ADDR_VAR 0 7
68443: PUSH
68444: LD_VAR 0 10
68448: ST_TO_ADDR
// end ;
68449: LD_VAR 0 7
68453: RET
// export function EnemyInRange ( unit , dist ) ; begin
68454: LD_INT 0
68456: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68457: LD_ADDR_VAR 0 3
68461: PUSH
68462: LD_VAR 0 1
68466: PPUSH
68467: CALL_OW 255
68471: PPUSH
68472: LD_VAR 0 1
68476: PPUSH
68477: CALL_OW 250
68481: PPUSH
68482: LD_VAR 0 1
68486: PPUSH
68487: CALL_OW 251
68491: PPUSH
68492: LD_VAR 0 2
68496: PPUSH
68497: CALL 42238 0 4
68501: PUSH
68502: LD_INT 4
68504: ARRAY
68505: ST_TO_ADDR
// end ;
68506: LD_VAR 0 3
68510: RET
// export function PlayerSeeMe ( unit ) ; begin
68511: LD_INT 0
68513: PPUSH
// result := See ( your_side , unit ) ;
68514: LD_ADDR_VAR 0 2
68518: PUSH
68519: LD_OWVAR 2
68523: PPUSH
68524: LD_VAR 0 1
68528: PPUSH
68529: CALL_OW 292
68533: ST_TO_ADDR
// end ;
68534: LD_VAR 0 2
68538: RET
// export function ReverseDir ( unit ) ; begin
68539: LD_INT 0
68541: PPUSH
// if not unit then
68542: LD_VAR 0 1
68546: NOT
68547: IFFALSE 68551
// exit ;
68549: GO 68574
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68551: LD_ADDR_VAR 0 2
68555: PUSH
68556: LD_VAR 0 1
68560: PPUSH
68561: CALL_OW 254
68565: PUSH
68566: LD_INT 3
68568: PLUS
68569: PUSH
68570: LD_INT 6
68572: MOD
68573: ST_TO_ADDR
// end ;
68574: LD_VAR 0 2
68578: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68579: LD_INT 0
68581: PPUSH
68582: PPUSH
68583: PPUSH
68584: PPUSH
68585: PPUSH
// if not hexes then
68586: LD_VAR 0 2
68590: NOT
68591: IFFALSE 68595
// exit ;
68593: GO 68743
// dist := 9999 ;
68595: LD_ADDR_VAR 0 5
68599: PUSH
68600: LD_INT 9999
68602: ST_TO_ADDR
// for i = 1 to hexes do
68603: LD_ADDR_VAR 0 4
68607: PUSH
68608: DOUBLE
68609: LD_INT 1
68611: DEC
68612: ST_TO_ADDR
68613: LD_VAR 0 2
68617: PUSH
68618: FOR_TO
68619: IFFALSE 68731
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68621: LD_VAR 0 1
68625: PPUSH
68626: LD_VAR 0 2
68630: PUSH
68631: LD_VAR 0 4
68635: ARRAY
68636: PUSH
68637: LD_INT 1
68639: ARRAY
68640: PPUSH
68641: LD_VAR 0 2
68645: PUSH
68646: LD_VAR 0 4
68650: ARRAY
68651: PUSH
68652: LD_INT 2
68654: ARRAY
68655: PPUSH
68656: CALL_OW 297
68660: PUSH
68661: LD_VAR 0 5
68665: LESS
68666: IFFALSE 68729
// begin hex := hexes [ i ] ;
68668: LD_ADDR_VAR 0 7
68672: PUSH
68673: LD_VAR 0 2
68677: PUSH
68678: LD_VAR 0 4
68682: ARRAY
68683: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68684: LD_ADDR_VAR 0 5
68688: PUSH
68689: LD_VAR 0 1
68693: PPUSH
68694: LD_VAR 0 2
68698: PUSH
68699: LD_VAR 0 4
68703: ARRAY
68704: PUSH
68705: LD_INT 1
68707: ARRAY
68708: PPUSH
68709: LD_VAR 0 2
68713: PUSH
68714: LD_VAR 0 4
68718: ARRAY
68719: PUSH
68720: LD_INT 2
68722: ARRAY
68723: PPUSH
68724: CALL_OW 297
68728: ST_TO_ADDR
// end ; end ;
68729: GO 68618
68731: POP
68732: POP
// result := hex ;
68733: LD_ADDR_VAR 0 3
68737: PUSH
68738: LD_VAR 0 7
68742: ST_TO_ADDR
// end ;
68743: LD_VAR 0 3
68747: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68748: LD_INT 0
68750: PPUSH
68751: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68752: LD_VAR 0 1
68756: NOT
68757: PUSH
68758: LD_VAR 0 1
68762: PUSH
68763: LD_INT 21
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 23
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PPUSH
68787: CALL_OW 69
68791: IN
68792: NOT
68793: OR
68794: IFFALSE 68798
// exit ;
68796: GO 68845
// for i = 1 to 3 do
68798: LD_ADDR_VAR 0 3
68802: PUSH
68803: DOUBLE
68804: LD_INT 1
68806: DEC
68807: ST_TO_ADDR
68808: LD_INT 3
68810: PUSH
68811: FOR_TO
68812: IFFALSE 68843
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68814: LD_VAR 0 1
68818: PPUSH
68819: CALL_OW 250
68823: PPUSH
68824: LD_VAR 0 1
68828: PPUSH
68829: CALL_OW 251
68833: PPUSH
68834: LD_INT 1
68836: PPUSH
68837: CALL_OW 453
68841: GO 68811
68843: POP
68844: POP
// end ;
68845: LD_VAR 0 2
68849: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68850: LD_INT 0
68852: PPUSH
68853: PPUSH
68854: PPUSH
68855: PPUSH
68856: PPUSH
68857: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68858: LD_VAR 0 1
68862: NOT
68863: PUSH
68864: LD_VAR 0 2
68868: NOT
68869: OR
68870: PUSH
68871: LD_VAR 0 1
68875: PPUSH
68876: CALL_OW 314
68880: OR
68881: IFFALSE 68885
// exit ;
68883: GO 69326
// x := GetX ( enemy_unit ) ;
68885: LD_ADDR_VAR 0 7
68889: PUSH
68890: LD_VAR 0 2
68894: PPUSH
68895: CALL_OW 250
68899: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68900: LD_ADDR_VAR 0 8
68904: PUSH
68905: LD_VAR 0 2
68909: PPUSH
68910: CALL_OW 251
68914: ST_TO_ADDR
// if not x or not y then
68915: LD_VAR 0 7
68919: NOT
68920: PUSH
68921: LD_VAR 0 8
68925: NOT
68926: OR
68927: IFFALSE 68931
// exit ;
68929: GO 69326
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68931: LD_ADDR_VAR 0 6
68935: PUSH
68936: LD_VAR 0 7
68940: PPUSH
68941: LD_INT 0
68943: PPUSH
68944: LD_INT 4
68946: PPUSH
68947: CALL_OW 272
68951: PUSH
68952: LD_VAR 0 8
68956: PPUSH
68957: LD_INT 0
68959: PPUSH
68960: LD_INT 4
68962: PPUSH
68963: CALL_OW 273
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_VAR 0 7
68976: PPUSH
68977: LD_INT 1
68979: PPUSH
68980: LD_INT 4
68982: PPUSH
68983: CALL_OW 272
68987: PUSH
68988: LD_VAR 0 8
68992: PPUSH
68993: LD_INT 1
68995: PPUSH
68996: LD_INT 4
68998: PPUSH
68999: CALL_OW 273
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_VAR 0 7
69012: PPUSH
69013: LD_INT 2
69015: PPUSH
69016: LD_INT 4
69018: PPUSH
69019: CALL_OW 272
69023: PUSH
69024: LD_VAR 0 8
69028: PPUSH
69029: LD_INT 2
69031: PPUSH
69032: LD_INT 4
69034: PPUSH
69035: CALL_OW 273
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_VAR 0 7
69048: PPUSH
69049: LD_INT 3
69051: PPUSH
69052: LD_INT 4
69054: PPUSH
69055: CALL_OW 272
69059: PUSH
69060: LD_VAR 0 8
69064: PPUSH
69065: LD_INT 3
69067: PPUSH
69068: LD_INT 4
69070: PPUSH
69071: CALL_OW 273
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_VAR 0 7
69084: PPUSH
69085: LD_INT 4
69087: PPUSH
69088: LD_INT 4
69090: PPUSH
69091: CALL_OW 272
69095: PUSH
69096: LD_VAR 0 8
69100: PPUSH
69101: LD_INT 4
69103: PPUSH
69104: LD_INT 4
69106: PPUSH
69107: CALL_OW 273
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_VAR 0 7
69120: PPUSH
69121: LD_INT 5
69123: PPUSH
69124: LD_INT 4
69126: PPUSH
69127: CALL_OW 272
69131: PUSH
69132: LD_VAR 0 8
69136: PPUSH
69137: LD_INT 5
69139: PPUSH
69140: LD_INT 4
69142: PPUSH
69143: CALL_OW 273
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: ST_TO_ADDR
// for i = tmp downto 1 do
69160: LD_ADDR_VAR 0 4
69164: PUSH
69165: DOUBLE
69166: LD_VAR 0 6
69170: INC
69171: ST_TO_ADDR
69172: LD_INT 1
69174: PUSH
69175: FOR_DOWNTO
69176: IFFALSE 69277
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69178: LD_VAR 0 6
69182: PUSH
69183: LD_VAR 0 4
69187: ARRAY
69188: PUSH
69189: LD_INT 1
69191: ARRAY
69192: PPUSH
69193: LD_VAR 0 6
69197: PUSH
69198: LD_VAR 0 4
69202: ARRAY
69203: PUSH
69204: LD_INT 2
69206: ARRAY
69207: PPUSH
69208: CALL_OW 488
69212: NOT
69213: PUSH
69214: LD_VAR 0 6
69218: PUSH
69219: LD_VAR 0 4
69223: ARRAY
69224: PUSH
69225: LD_INT 1
69227: ARRAY
69228: PPUSH
69229: LD_VAR 0 6
69233: PUSH
69234: LD_VAR 0 4
69238: ARRAY
69239: PUSH
69240: LD_INT 2
69242: ARRAY
69243: PPUSH
69244: CALL_OW 428
69248: PUSH
69249: LD_INT 0
69251: NONEQUAL
69252: OR
69253: IFFALSE 69275
// tmp := Delete ( tmp , i ) ;
69255: LD_ADDR_VAR 0 6
69259: PUSH
69260: LD_VAR 0 6
69264: PPUSH
69265: LD_VAR 0 4
69269: PPUSH
69270: CALL_OW 3
69274: ST_TO_ADDR
69275: GO 69175
69277: POP
69278: POP
// j := GetClosestHex ( unit , tmp ) ;
69279: LD_ADDR_VAR 0 5
69283: PUSH
69284: LD_VAR 0 1
69288: PPUSH
69289: LD_VAR 0 6
69293: PPUSH
69294: CALL 68579 0 2
69298: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69299: LD_VAR 0 1
69303: PPUSH
69304: LD_VAR 0 5
69308: PUSH
69309: LD_INT 1
69311: ARRAY
69312: PPUSH
69313: LD_VAR 0 5
69317: PUSH
69318: LD_INT 2
69320: ARRAY
69321: PPUSH
69322: CALL_OW 111
// end ;
69326: LD_VAR 0 3
69330: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69331: LD_INT 0
69333: PPUSH
69334: PPUSH
69335: PPUSH
// uc_side = 0 ;
69336: LD_ADDR_OWVAR 20
69340: PUSH
69341: LD_INT 0
69343: ST_TO_ADDR
// uc_nation = 0 ;
69344: LD_ADDR_OWVAR 21
69348: PUSH
69349: LD_INT 0
69351: ST_TO_ADDR
// InitHc_All ( ) ;
69352: CALL_OW 584
// InitVc ;
69356: CALL_OW 20
// if mastodonts then
69360: LD_VAR 0 6
69364: IFFALSE 69431
// for i = 1 to mastodonts do
69366: LD_ADDR_VAR 0 11
69370: PUSH
69371: DOUBLE
69372: LD_INT 1
69374: DEC
69375: ST_TO_ADDR
69376: LD_VAR 0 6
69380: PUSH
69381: FOR_TO
69382: IFFALSE 69429
// begin vc_chassis := 31 ;
69384: LD_ADDR_OWVAR 37
69388: PUSH
69389: LD_INT 31
69391: ST_TO_ADDR
// vc_control := control_rider ;
69392: LD_ADDR_OWVAR 38
69396: PUSH
69397: LD_INT 4
69399: ST_TO_ADDR
// animal := CreateVehicle ;
69400: LD_ADDR_VAR 0 12
69404: PUSH
69405: CALL_OW 45
69409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69410: LD_VAR 0 12
69414: PPUSH
69415: LD_VAR 0 8
69419: PPUSH
69420: LD_INT 0
69422: PPUSH
69423: CALL 71619 0 3
// end ;
69427: GO 69381
69429: POP
69430: POP
// if horses then
69431: LD_VAR 0 5
69435: IFFALSE 69502
// for i = 1 to horses do
69437: LD_ADDR_VAR 0 11
69441: PUSH
69442: DOUBLE
69443: LD_INT 1
69445: DEC
69446: ST_TO_ADDR
69447: LD_VAR 0 5
69451: PUSH
69452: FOR_TO
69453: IFFALSE 69500
// begin hc_class := 21 ;
69455: LD_ADDR_OWVAR 28
69459: PUSH
69460: LD_INT 21
69462: ST_TO_ADDR
// hc_gallery :=  ;
69463: LD_ADDR_OWVAR 33
69467: PUSH
69468: LD_STRING 
69470: ST_TO_ADDR
// animal := CreateHuman ;
69471: LD_ADDR_VAR 0 12
69475: PUSH
69476: CALL_OW 44
69480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69481: LD_VAR 0 12
69485: PPUSH
69486: LD_VAR 0 8
69490: PPUSH
69491: LD_INT 0
69493: PPUSH
69494: CALL 71619 0 3
// end ;
69498: GO 69452
69500: POP
69501: POP
// if birds then
69502: LD_VAR 0 1
69506: IFFALSE 69573
// for i = 1 to birds do
69508: LD_ADDR_VAR 0 11
69512: PUSH
69513: DOUBLE
69514: LD_INT 1
69516: DEC
69517: ST_TO_ADDR
69518: LD_VAR 0 1
69522: PUSH
69523: FOR_TO
69524: IFFALSE 69571
// begin hc_class = 18 ;
69526: LD_ADDR_OWVAR 28
69530: PUSH
69531: LD_INT 18
69533: ST_TO_ADDR
// hc_gallery =  ;
69534: LD_ADDR_OWVAR 33
69538: PUSH
69539: LD_STRING 
69541: ST_TO_ADDR
// animal := CreateHuman ;
69542: LD_ADDR_VAR 0 12
69546: PUSH
69547: CALL_OW 44
69551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69552: LD_VAR 0 12
69556: PPUSH
69557: LD_VAR 0 8
69561: PPUSH
69562: LD_INT 0
69564: PPUSH
69565: CALL 71619 0 3
// end ;
69569: GO 69523
69571: POP
69572: POP
// if tigers then
69573: LD_VAR 0 2
69577: IFFALSE 69661
// for i = 1 to tigers do
69579: LD_ADDR_VAR 0 11
69583: PUSH
69584: DOUBLE
69585: LD_INT 1
69587: DEC
69588: ST_TO_ADDR
69589: LD_VAR 0 2
69593: PUSH
69594: FOR_TO
69595: IFFALSE 69659
// begin hc_class = class_tiger ;
69597: LD_ADDR_OWVAR 28
69601: PUSH
69602: LD_INT 14
69604: ST_TO_ADDR
// hc_gallery =  ;
69605: LD_ADDR_OWVAR 33
69609: PUSH
69610: LD_STRING 
69612: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69613: LD_ADDR_OWVAR 35
69617: PUSH
69618: LD_INT 7
69620: NEG
69621: PPUSH
69622: LD_INT 7
69624: PPUSH
69625: CALL_OW 12
69629: ST_TO_ADDR
// animal := CreateHuman ;
69630: LD_ADDR_VAR 0 12
69634: PUSH
69635: CALL_OW 44
69639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69640: LD_VAR 0 12
69644: PPUSH
69645: LD_VAR 0 8
69649: PPUSH
69650: LD_INT 0
69652: PPUSH
69653: CALL 71619 0 3
// end ;
69657: GO 69594
69659: POP
69660: POP
// if apemans then
69661: LD_VAR 0 3
69665: IFFALSE 69788
// for i = 1 to apemans do
69667: LD_ADDR_VAR 0 11
69671: PUSH
69672: DOUBLE
69673: LD_INT 1
69675: DEC
69676: ST_TO_ADDR
69677: LD_VAR 0 3
69681: PUSH
69682: FOR_TO
69683: IFFALSE 69786
// begin hc_class = class_apeman ;
69685: LD_ADDR_OWVAR 28
69689: PUSH
69690: LD_INT 12
69692: ST_TO_ADDR
// hc_gallery =  ;
69693: LD_ADDR_OWVAR 33
69697: PUSH
69698: LD_STRING 
69700: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69701: LD_ADDR_OWVAR 35
69705: PUSH
69706: LD_INT 5
69708: NEG
69709: PPUSH
69710: LD_INT 5
69712: PPUSH
69713: CALL_OW 12
69717: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69718: LD_ADDR_OWVAR 31
69722: PUSH
69723: LD_INT 1
69725: PPUSH
69726: LD_INT 3
69728: PPUSH
69729: CALL_OW 12
69733: PUSH
69734: LD_INT 1
69736: PPUSH
69737: LD_INT 3
69739: PPUSH
69740: CALL_OW 12
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: ST_TO_ADDR
// animal := CreateHuman ;
69757: LD_ADDR_VAR 0 12
69761: PUSH
69762: CALL_OW 44
69766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69767: LD_VAR 0 12
69771: PPUSH
69772: LD_VAR 0 8
69776: PPUSH
69777: LD_INT 0
69779: PPUSH
69780: CALL 71619 0 3
// end ;
69784: GO 69682
69786: POP
69787: POP
// if enchidnas then
69788: LD_VAR 0 4
69792: IFFALSE 69859
// for i = 1 to enchidnas do
69794: LD_ADDR_VAR 0 11
69798: PUSH
69799: DOUBLE
69800: LD_INT 1
69802: DEC
69803: ST_TO_ADDR
69804: LD_VAR 0 4
69808: PUSH
69809: FOR_TO
69810: IFFALSE 69857
// begin hc_class = 13 ;
69812: LD_ADDR_OWVAR 28
69816: PUSH
69817: LD_INT 13
69819: ST_TO_ADDR
// hc_gallery =  ;
69820: LD_ADDR_OWVAR 33
69824: PUSH
69825: LD_STRING 
69827: ST_TO_ADDR
// animal := CreateHuman ;
69828: LD_ADDR_VAR 0 12
69832: PUSH
69833: CALL_OW 44
69837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69838: LD_VAR 0 12
69842: PPUSH
69843: LD_VAR 0 8
69847: PPUSH
69848: LD_INT 0
69850: PPUSH
69851: CALL 71619 0 3
// end ;
69855: GO 69809
69857: POP
69858: POP
// if fishes then
69859: LD_VAR 0 7
69863: IFFALSE 69930
// for i = 1 to fishes do
69865: LD_ADDR_VAR 0 11
69869: PUSH
69870: DOUBLE
69871: LD_INT 1
69873: DEC
69874: ST_TO_ADDR
69875: LD_VAR 0 7
69879: PUSH
69880: FOR_TO
69881: IFFALSE 69928
// begin hc_class = 20 ;
69883: LD_ADDR_OWVAR 28
69887: PUSH
69888: LD_INT 20
69890: ST_TO_ADDR
// hc_gallery =  ;
69891: LD_ADDR_OWVAR 33
69895: PUSH
69896: LD_STRING 
69898: ST_TO_ADDR
// animal := CreateHuman ;
69899: LD_ADDR_VAR 0 12
69903: PUSH
69904: CALL_OW 44
69908: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69909: LD_VAR 0 12
69913: PPUSH
69914: LD_VAR 0 9
69918: PPUSH
69919: LD_INT 0
69921: PPUSH
69922: CALL 71619 0 3
// end ;
69926: GO 69880
69928: POP
69929: POP
// end ;
69930: LD_VAR 0 10
69934: RET
// export function WantHeal ( sci , unit ) ; begin
69935: LD_INT 0
69937: PPUSH
// if GetTaskList ( sci ) > 0 then
69938: LD_VAR 0 1
69942: PPUSH
69943: CALL_OW 437
69947: PUSH
69948: LD_INT 0
69950: GREATER
69951: IFFALSE 70021
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69953: LD_VAR 0 1
69957: PPUSH
69958: CALL_OW 437
69962: PUSH
69963: LD_INT 1
69965: ARRAY
69966: PUSH
69967: LD_INT 1
69969: ARRAY
69970: PUSH
69971: LD_STRING l
69973: EQUAL
69974: PUSH
69975: LD_VAR 0 1
69979: PPUSH
69980: CALL_OW 437
69984: PUSH
69985: LD_INT 1
69987: ARRAY
69988: PUSH
69989: LD_INT 4
69991: ARRAY
69992: PUSH
69993: LD_VAR 0 2
69997: EQUAL
69998: AND
69999: IFFALSE 70011
// result := true else
70001: LD_ADDR_VAR 0 3
70005: PUSH
70006: LD_INT 1
70008: ST_TO_ADDR
70009: GO 70019
// result := false ;
70011: LD_ADDR_VAR 0 3
70015: PUSH
70016: LD_INT 0
70018: ST_TO_ADDR
// end else
70019: GO 70029
// result := false ;
70021: LD_ADDR_VAR 0 3
70025: PUSH
70026: LD_INT 0
70028: ST_TO_ADDR
// end ;
70029: LD_VAR 0 3
70033: RET
// export function HealTarget ( sci ) ; begin
70034: LD_INT 0
70036: PPUSH
// if not sci then
70037: LD_VAR 0 1
70041: NOT
70042: IFFALSE 70046
// exit ;
70044: GO 70111
// result := 0 ;
70046: LD_ADDR_VAR 0 2
70050: PUSH
70051: LD_INT 0
70053: ST_TO_ADDR
// if GetTaskList ( sci ) then
70054: LD_VAR 0 1
70058: PPUSH
70059: CALL_OW 437
70063: IFFALSE 70111
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70065: LD_VAR 0 1
70069: PPUSH
70070: CALL_OW 437
70074: PUSH
70075: LD_INT 1
70077: ARRAY
70078: PUSH
70079: LD_INT 1
70081: ARRAY
70082: PUSH
70083: LD_STRING l
70085: EQUAL
70086: IFFALSE 70111
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70088: LD_ADDR_VAR 0 2
70092: PUSH
70093: LD_VAR 0 1
70097: PPUSH
70098: CALL_OW 437
70102: PUSH
70103: LD_INT 1
70105: ARRAY
70106: PUSH
70107: LD_INT 4
70109: ARRAY
70110: ST_TO_ADDR
// end ;
70111: LD_VAR 0 2
70115: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70116: LD_INT 0
70118: PPUSH
70119: PPUSH
70120: PPUSH
70121: PPUSH
// if not base_units then
70122: LD_VAR 0 1
70126: NOT
70127: IFFALSE 70131
// exit ;
70129: GO 70218
// result := false ;
70131: LD_ADDR_VAR 0 2
70135: PUSH
70136: LD_INT 0
70138: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70139: LD_ADDR_VAR 0 5
70143: PUSH
70144: LD_VAR 0 1
70148: PPUSH
70149: LD_INT 21
70151: PUSH
70152: LD_INT 3
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PPUSH
70159: CALL_OW 72
70163: ST_TO_ADDR
// if not tmp then
70164: LD_VAR 0 5
70168: NOT
70169: IFFALSE 70173
// exit ;
70171: GO 70218
// for i in tmp do
70173: LD_ADDR_VAR 0 3
70177: PUSH
70178: LD_VAR 0 5
70182: PUSH
70183: FOR_IN
70184: IFFALSE 70216
// begin result := EnemyInRange ( i , 22 ) ;
70186: LD_ADDR_VAR 0 2
70190: PUSH
70191: LD_VAR 0 3
70195: PPUSH
70196: LD_INT 22
70198: PPUSH
70199: CALL 68454 0 2
70203: ST_TO_ADDR
// if result then
70204: LD_VAR 0 2
70208: IFFALSE 70214
// exit ;
70210: POP
70211: POP
70212: GO 70218
// end ;
70214: GO 70183
70216: POP
70217: POP
// end ;
70218: LD_VAR 0 2
70222: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70223: LD_INT 0
70225: PPUSH
70226: PPUSH
// if not units then
70227: LD_VAR 0 1
70231: NOT
70232: IFFALSE 70236
// exit ;
70234: GO 70306
// result := [ ] ;
70236: LD_ADDR_VAR 0 3
70240: PUSH
70241: EMPTY
70242: ST_TO_ADDR
// for i in units do
70243: LD_ADDR_VAR 0 4
70247: PUSH
70248: LD_VAR 0 1
70252: PUSH
70253: FOR_IN
70254: IFFALSE 70304
// if GetTag ( i ) = tag then
70256: LD_VAR 0 4
70260: PPUSH
70261: CALL_OW 110
70265: PUSH
70266: LD_VAR 0 2
70270: EQUAL
70271: IFFALSE 70302
// result := Insert ( result , result + 1 , i ) ;
70273: LD_ADDR_VAR 0 3
70277: PUSH
70278: LD_VAR 0 3
70282: PPUSH
70283: LD_VAR 0 3
70287: PUSH
70288: LD_INT 1
70290: PLUS
70291: PPUSH
70292: LD_VAR 0 4
70296: PPUSH
70297: CALL_OW 2
70301: ST_TO_ADDR
70302: GO 70253
70304: POP
70305: POP
// end ;
70306: LD_VAR 0 3
70310: RET
// export function IsDriver ( un ) ; begin
70311: LD_INT 0
70313: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70314: LD_ADDR_VAR 0 2
70318: PUSH
70319: LD_VAR 0 1
70323: PUSH
70324: LD_INT 55
70326: PUSH
70327: EMPTY
70328: LIST
70329: PPUSH
70330: CALL_OW 69
70334: IN
70335: ST_TO_ADDR
// end ;
70336: LD_VAR 0 2
70340: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70341: LD_INT 0
70343: PPUSH
70344: PPUSH
// list := [ ] ;
70345: LD_ADDR_VAR 0 5
70349: PUSH
70350: EMPTY
70351: ST_TO_ADDR
// case d of 0 :
70352: LD_VAR 0 3
70356: PUSH
70357: LD_INT 0
70359: DOUBLE
70360: EQUAL
70361: IFTRUE 70365
70363: GO 70498
70365: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70366: LD_ADDR_VAR 0 5
70370: PUSH
70371: LD_VAR 0 1
70375: PUSH
70376: LD_INT 4
70378: MINUS
70379: PUSH
70380: LD_VAR 0 2
70384: PUSH
70385: LD_INT 4
70387: MINUS
70388: PUSH
70389: LD_INT 2
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: LIST
70396: PUSH
70397: LD_VAR 0 1
70401: PUSH
70402: LD_INT 3
70404: MINUS
70405: PUSH
70406: LD_VAR 0 2
70410: PUSH
70411: LD_INT 1
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: LIST
70418: PUSH
70419: LD_VAR 0 1
70423: PUSH
70424: LD_INT 4
70426: PLUS
70427: PUSH
70428: LD_VAR 0 2
70432: PUSH
70433: LD_INT 4
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: LIST
70440: PUSH
70441: LD_VAR 0 1
70445: PUSH
70446: LD_INT 3
70448: PLUS
70449: PUSH
70450: LD_VAR 0 2
70454: PUSH
70455: LD_INT 3
70457: PLUS
70458: PUSH
70459: LD_INT 5
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: LIST
70466: PUSH
70467: LD_VAR 0 1
70471: PUSH
70472: LD_VAR 0 2
70476: PUSH
70477: LD_INT 4
70479: PLUS
70480: PUSH
70481: LD_INT 0
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: LIST
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: ST_TO_ADDR
// end ; 1 :
70496: GO 71196
70498: LD_INT 1
70500: DOUBLE
70501: EQUAL
70502: IFTRUE 70506
70504: GO 70639
70506: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70507: LD_ADDR_VAR 0 5
70511: PUSH
70512: LD_VAR 0 1
70516: PUSH
70517: LD_VAR 0 2
70521: PUSH
70522: LD_INT 4
70524: MINUS
70525: PUSH
70526: LD_INT 3
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: LIST
70533: PUSH
70534: LD_VAR 0 1
70538: PUSH
70539: LD_INT 3
70541: MINUS
70542: PUSH
70543: LD_VAR 0 2
70547: PUSH
70548: LD_INT 3
70550: MINUS
70551: PUSH
70552: LD_INT 2
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: LIST
70559: PUSH
70560: LD_VAR 0 1
70564: PUSH
70565: LD_INT 4
70567: MINUS
70568: PUSH
70569: LD_VAR 0 2
70573: PUSH
70574: LD_INT 1
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: LIST
70581: PUSH
70582: LD_VAR 0 1
70586: PUSH
70587: LD_VAR 0 2
70591: PUSH
70592: LD_INT 3
70594: PLUS
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: LIST
70603: PUSH
70604: LD_VAR 0 1
70608: PUSH
70609: LD_INT 4
70611: PLUS
70612: PUSH
70613: LD_VAR 0 2
70617: PUSH
70618: LD_INT 4
70620: PLUS
70621: PUSH
70622: LD_INT 5
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: LIST
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: ST_TO_ADDR
// end ; 2 :
70637: GO 71196
70639: LD_INT 2
70641: DOUBLE
70642: EQUAL
70643: IFTRUE 70647
70645: GO 70776
70647: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70648: LD_ADDR_VAR 0 5
70652: PUSH
70653: LD_VAR 0 1
70657: PUSH
70658: LD_VAR 0 2
70662: PUSH
70663: LD_INT 3
70665: MINUS
70666: PUSH
70667: LD_INT 3
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: LIST
70674: PUSH
70675: LD_VAR 0 1
70679: PUSH
70680: LD_INT 4
70682: PLUS
70683: PUSH
70684: LD_VAR 0 2
70688: PUSH
70689: LD_INT 4
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: LIST
70696: PUSH
70697: LD_VAR 0 1
70701: PUSH
70702: LD_VAR 0 2
70706: PUSH
70707: LD_INT 4
70709: PLUS
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: LIST
70718: PUSH
70719: LD_VAR 0 1
70723: PUSH
70724: LD_INT 3
70726: MINUS
70727: PUSH
70728: LD_VAR 0 2
70732: PUSH
70733: LD_INT 1
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: LIST
70740: PUSH
70741: LD_VAR 0 1
70745: PUSH
70746: LD_INT 4
70748: MINUS
70749: PUSH
70750: LD_VAR 0 2
70754: PUSH
70755: LD_INT 4
70757: MINUS
70758: PUSH
70759: LD_INT 2
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: LIST
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: ST_TO_ADDR
// end ; 3 :
70774: GO 71196
70776: LD_INT 3
70778: DOUBLE
70779: EQUAL
70780: IFTRUE 70784
70782: GO 70917
70784: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70785: LD_ADDR_VAR 0 5
70789: PUSH
70790: LD_VAR 0 1
70794: PUSH
70795: LD_INT 3
70797: PLUS
70798: PUSH
70799: LD_VAR 0 2
70803: PUSH
70804: LD_INT 4
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: LIST
70811: PUSH
70812: LD_VAR 0 1
70816: PUSH
70817: LD_INT 4
70819: PLUS
70820: PUSH
70821: LD_VAR 0 2
70825: PUSH
70826: LD_INT 4
70828: PLUS
70829: PUSH
70830: LD_INT 5
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: PUSH
70838: LD_VAR 0 1
70842: PUSH
70843: LD_INT 4
70845: MINUS
70846: PUSH
70847: LD_VAR 0 2
70851: PUSH
70852: LD_INT 1
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: LIST
70859: PUSH
70860: LD_VAR 0 1
70864: PUSH
70865: LD_VAR 0 2
70869: PUSH
70870: LD_INT 4
70872: MINUS
70873: PUSH
70874: LD_INT 3
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: LIST
70881: PUSH
70882: LD_VAR 0 1
70886: PUSH
70887: LD_INT 3
70889: MINUS
70890: PUSH
70891: LD_VAR 0 2
70895: PUSH
70896: LD_INT 3
70898: MINUS
70899: PUSH
70900: LD_INT 2
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: LIST
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: ST_TO_ADDR
// end ; 4 :
70915: GO 71196
70917: LD_INT 4
70919: DOUBLE
70920: EQUAL
70921: IFTRUE 70925
70923: GO 71058
70925: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70926: LD_ADDR_VAR 0 5
70930: PUSH
70931: LD_VAR 0 1
70935: PUSH
70936: LD_VAR 0 2
70940: PUSH
70941: LD_INT 4
70943: PLUS
70944: PUSH
70945: LD_INT 0
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: LIST
70952: PUSH
70953: LD_VAR 0 1
70957: PUSH
70958: LD_INT 3
70960: PLUS
70961: PUSH
70962: LD_VAR 0 2
70966: PUSH
70967: LD_INT 3
70969: PLUS
70970: PUSH
70971: LD_INT 5
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: LIST
70978: PUSH
70979: LD_VAR 0 1
70983: PUSH
70984: LD_INT 4
70986: PLUS
70987: PUSH
70988: LD_VAR 0 2
70992: PUSH
70993: LD_INT 4
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: LIST
71000: PUSH
71001: LD_VAR 0 1
71005: PUSH
71006: LD_VAR 0 2
71010: PUSH
71011: LD_INT 3
71013: MINUS
71014: PUSH
71015: LD_INT 3
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: PUSH
71023: LD_VAR 0 1
71027: PUSH
71028: LD_INT 4
71030: MINUS
71031: PUSH
71032: LD_VAR 0 2
71036: PUSH
71037: LD_INT 4
71039: MINUS
71040: PUSH
71041: LD_INT 2
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: LIST
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: ST_TO_ADDR
// end ; 5 :
71056: GO 71196
71058: LD_INT 5
71060: DOUBLE
71061: EQUAL
71062: IFTRUE 71066
71064: GO 71195
71066: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71067: LD_ADDR_VAR 0 5
71071: PUSH
71072: LD_VAR 0 1
71076: PUSH
71077: LD_INT 4
71079: MINUS
71080: PUSH
71081: LD_VAR 0 2
71085: PUSH
71086: LD_INT 1
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: LIST
71093: PUSH
71094: LD_VAR 0 1
71098: PUSH
71099: LD_VAR 0 2
71103: PUSH
71104: LD_INT 4
71106: MINUS
71107: PUSH
71108: LD_INT 3
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: LIST
71115: PUSH
71116: LD_VAR 0 1
71120: PUSH
71121: LD_INT 4
71123: PLUS
71124: PUSH
71125: LD_VAR 0 2
71129: PUSH
71130: LD_INT 4
71132: PLUS
71133: PUSH
71134: LD_INT 5
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: LIST
71141: PUSH
71142: LD_VAR 0 1
71146: PUSH
71147: LD_INT 3
71149: PLUS
71150: PUSH
71151: LD_VAR 0 2
71155: PUSH
71156: LD_INT 4
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: LIST
71163: PUSH
71164: LD_VAR 0 1
71168: PUSH
71169: LD_VAR 0 2
71173: PUSH
71174: LD_INT 3
71176: PLUS
71177: PUSH
71178: LD_INT 0
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: LIST
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: ST_TO_ADDR
// end ; end ;
71193: GO 71196
71195: POP
// result := list ;
71196: LD_ADDR_VAR 0 4
71200: PUSH
71201: LD_VAR 0 5
71205: ST_TO_ADDR
// end ;
71206: LD_VAR 0 4
71210: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71211: LD_INT 0
71213: PPUSH
71214: PPUSH
71215: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71216: LD_VAR 0 1
71220: NOT
71221: PUSH
71222: LD_VAR 0 2
71226: PUSH
71227: LD_INT 1
71229: PUSH
71230: LD_INT 2
71232: PUSH
71233: LD_INT 3
71235: PUSH
71236: LD_INT 4
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: IN
71245: NOT
71246: OR
71247: IFFALSE 71251
// exit ;
71249: GO 71343
// tmp := [ ] ;
71251: LD_ADDR_VAR 0 5
71255: PUSH
71256: EMPTY
71257: ST_TO_ADDR
// for i in units do
71258: LD_ADDR_VAR 0 4
71262: PUSH
71263: LD_VAR 0 1
71267: PUSH
71268: FOR_IN
71269: IFFALSE 71312
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71271: LD_ADDR_VAR 0 5
71275: PUSH
71276: LD_VAR 0 5
71280: PPUSH
71281: LD_VAR 0 5
71285: PUSH
71286: LD_INT 1
71288: PLUS
71289: PPUSH
71290: LD_VAR 0 4
71294: PPUSH
71295: LD_VAR 0 2
71299: PPUSH
71300: CALL_OW 259
71304: PPUSH
71305: CALL_OW 2
71309: ST_TO_ADDR
71310: GO 71268
71312: POP
71313: POP
// if not tmp then
71314: LD_VAR 0 5
71318: NOT
71319: IFFALSE 71323
// exit ;
71321: GO 71343
// result := SortListByListDesc ( units , tmp ) ;
71323: LD_ADDR_VAR 0 3
71327: PUSH
71328: LD_VAR 0 1
71332: PPUSH
71333: LD_VAR 0 5
71337: PPUSH
71338: CALL_OW 77
71342: ST_TO_ADDR
// end ;
71343: LD_VAR 0 3
71347: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71348: LD_INT 0
71350: PPUSH
71351: PPUSH
71352: PPUSH
// result := false ;
71353: LD_ADDR_VAR 0 3
71357: PUSH
71358: LD_INT 0
71360: ST_TO_ADDR
// x := GetX ( building ) ;
71361: LD_ADDR_VAR 0 4
71365: PUSH
71366: LD_VAR 0 2
71370: PPUSH
71371: CALL_OW 250
71375: ST_TO_ADDR
// y := GetY ( building ) ;
71376: LD_ADDR_VAR 0 5
71380: PUSH
71381: LD_VAR 0 2
71385: PPUSH
71386: CALL_OW 251
71390: ST_TO_ADDR
// if not building or not x or not y then
71391: LD_VAR 0 2
71395: NOT
71396: PUSH
71397: LD_VAR 0 4
71401: NOT
71402: OR
71403: PUSH
71404: LD_VAR 0 5
71408: NOT
71409: OR
71410: IFFALSE 71414
// exit ;
71412: GO 71506
// if GetTaskList ( unit ) then
71414: LD_VAR 0 1
71418: PPUSH
71419: CALL_OW 437
71423: IFFALSE 71506
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71425: LD_STRING e
71427: PUSH
71428: LD_VAR 0 1
71432: PPUSH
71433: CALL_OW 437
71437: PUSH
71438: LD_INT 1
71440: ARRAY
71441: PUSH
71442: LD_INT 1
71444: ARRAY
71445: EQUAL
71446: PUSH
71447: LD_VAR 0 4
71451: PUSH
71452: LD_VAR 0 1
71456: PPUSH
71457: CALL_OW 437
71461: PUSH
71462: LD_INT 1
71464: ARRAY
71465: PUSH
71466: LD_INT 2
71468: ARRAY
71469: EQUAL
71470: AND
71471: PUSH
71472: LD_VAR 0 5
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: CALL_OW 437
71486: PUSH
71487: LD_INT 1
71489: ARRAY
71490: PUSH
71491: LD_INT 3
71493: ARRAY
71494: EQUAL
71495: AND
71496: IFFALSE 71506
// result := true end ;
71498: LD_ADDR_VAR 0 3
71502: PUSH
71503: LD_INT 1
71505: ST_TO_ADDR
// end ;
71506: LD_VAR 0 3
71510: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71511: LD_INT 0
71513: PPUSH
// result := false ;
71514: LD_ADDR_VAR 0 4
71518: PUSH
71519: LD_INT 0
71521: ST_TO_ADDR
// if GetTaskList ( unit ) then
71522: LD_VAR 0 1
71526: PPUSH
71527: CALL_OW 437
71531: IFFALSE 71614
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71533: LD_STRING M
71535: PUSH
71536: LD_VAR 0 1
71540: PPUSH
71541: CALL_OW 437
71545: PUSH
71546: LD_INT 1
71548: ARRAY
71549: PUSH
71550: LD_INT 1
71552: ARRAY
71553: EQUAL
71554: PUSH
71555: LD_VAR 0 2
71559: PUSH
71560: LD_VAR 0 1
71564: PPUSH
71565: CALL_OW 437
71569: PUSH
71570: LD_INT 1
71572: ARRAY
71573: PUSH
71574: LD_INT 2
71576: ARRAY
71577: EQUAL
71578: AND
71579: PUSH
71580: LD_VAR 0 3
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: CALL_OW 437
71594: PUSH
71595: LD_INT 1
71597: ARRAY
71598: PUSH
71599: LD_INT 3
71601: ARRAY
71602: EQUAL
71603: AND
71604: IFFALSE 71614
// result := true ;
71606: LD_ADDR_VAR 0 4
71610: PUSH
71611: LD_INT 1
71613: ST_TO_ADDR
// end ; end ;
71614: LD_VAR 0 4
71618: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71619: LD_INT 0
71621: PPUSH
71622: PPUSH
71623: PPUSH
71624: PPUSH
// if not unit or not area then
71625: LD_VAR 0 1
71629: NOT
71630: PUSH
71631: LD_VAR 0 2
71635: NOT
71636: OR
71637: IFFALSE 71641
// exit ;
71639: GO 71805
// tmp := AreaToList ( area , i ) ;
71641: LD_ADDR_VAR 0 6
71645: PUSH
71646: LD_VAR 0 2
71650: PPUSH
71651: LD_VAR 0 5
71655: PPUSH
71656: CALL_OW 517
71660: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71661: LD_ADDR_VAR 0 5
71665: PUSH
71666: DOUBLE
71667: LD_INT 1
71669: DEC
71670: ST_TO_ADDR
71671: LD_VAR 0 6
71675: PUSH
71676: LD_INT 1
71678: ARRAY
71679: PUSH
71680: FOR_TO
71681: IFFALSE 71803
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71683: LD_ADDR_VAR 0 7
71687: PUSH
71688: LD_VAR 0 6
71692: PUSH
71693: LD_INT 1
71695: ARRAY
71696: PUSH
71697: LD_VAR 0 5
71701: ARRAY
71702: PUSH
71703: LD_VAR 0 6
71707: PUSH
71708: LD_INT 2
71710: ARRAY
71711: PUSH
71712: LD_VAR 0 5
71716: ARRAY
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71722: LD_VAR 0 7
71726: PUSH
71727: LD_INT 1
71729: ARRAY
71730: PPUSH
71731: LD_VAR 0 7
71735: PUSH
71736: LD_INT 2
71738: ARRAY
71739: PPUSH
71740: CALL_OW 428
71744: PUSH
71745: LD_INT 0
71747: EQUAL
71748: IFFALSE 71801
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71750: LD_VAR 0 1
71754: PPUSH
71755: LD_VAR 0 7
71759: PUSH
71760: LD_INT 1
71762: ARRAY
71763: PPUSH
71764: LD_VAR 0 7
71768: PUSH
71769: LD_INT 2
71771: ARRAY
71772: PPUSH
71773: LD_VAR 0 3
71777: PPUSH
71778: CALL_OW 48
// result := IsPlaced ( unit ) ;
71782: LD_ADDR_VAR 0 4
71786: PUSH
71787: LD_VAR 0 1
71791: PPUSH
71792: CALL_OW 305
71796: ST_TO_ADDR
// exit ;
71797: POP
71798: POP
71799: GO 71805
// end ; end ;
71801: GO 71680
71803: POP
71804: POP
// end ;
71805: LD_VAR 0 4
71809: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71810: LD_INT 0
71812: PPUSH
71813: PPUSH
71814: PPUSH
// if not side or side > 8 then
71815: LD_VAR 0 1
71819: NOT
71820: PUSH
71821: LD_VAR 0 1
71825: PUSH
71826: LD_INT 8
71828: GREATER
71829: OR
71830: IFFALSE 71834
// exit ;
71832: GO 72021
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71834: LD_ADDR_VAR 0 4
71838: PUSH
71839: LD_INT 22
71841: PUSH
71842: LD_VAR 0 1
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 21
71853: PUSH
71854: LD_INT 3
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PPUSH
71865: CALL_OW 69
71869: ST_TO_ADDR
// if not tmp then
71870: LD_VAR 0 4
71874: NOT
71875: IFFALSE 71879
// exit ;
71877: GO 72021
// enable_addtolog := true ;
71879: LD_ADDR_OWVAR 81
71883: PUSH
71884: LD_INT 1
71886: ST_TO_ADDR
// AddToLog ( [ ) ;
71887: LD_STRING [
71889: PPUSH
71890: CALL_OW 561
// for i in tmp do
71894: LD_ADDR_VAR 0 3
71898: PUSH
71899: LD_VAR 0 4
71903: PUSH
71904: FOR_IN
71905: IFFALSE 72012
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71907: LD_STRING [
71909: PUSH
71910: LD_VAR 0 3
71914: PPUSH
71915: CALL_OW 266
71919: STR
71920: PUSH
71921: LD_STRING , 
71923: STR
71924: PUSH
71925: LD_VAR 0 3
71929: PPUSH
71930: CALL_OW 250
71934: STR
71935: PUSH
71936: LD_STRING , 
71938: STR
71939: PUSH
71940: LD_VAR 0 3
71944: PPUSH
71945: CALL_OW 251
71949: STR
71950: PUSH
71951: LD_STRING , 
71953: STR
71954: PUSH
71955: LD_VAR 0 3
71959: PPUSH
71960: CALL_OW 254
71964: STR
71965: PUSH
71966: LD_STRING , 
71968: STR
71969: PUSH
71970: LD_VAR 0 3
71974: PPUSH
71975: LD_INT 1
71977: PPUSH
71978: CALL_OW 268
71982: STR
71983: PUSH
71984: LD_STRING , 
71986: STR
71987: PUSH
71988: LD_VAR 0 3
71992: PPUSH
71993: LD_INT 2
71995: PPUSH
71996: CALL_OW 268
72000: STR
72001: PUSH
72002: LD_STRING ],
72004: STR
72005: PPUSH
72006: CALL_OW 561
// end ;
72010: GO 71904
72012: POP
72013: POP
// AddToLog ( ]; ) ;
72014: LD_STRING ];
72016: PPUSH
72017: CALL_OW 561
// end ;
72021: LD_VAR 0 2
72025: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72026: LD_INT 0
72028: PPUSH
72029: PPUSH
72030: PPUSH
72031: PPUSH
72032: PPUSH
// if not area or not rate or not max then
72033: LD_VAR 0 1
72037: NOT
72038: PUSH
72039: LD_VAR 0 2
72043: NOT
72044: OR
72045: PUSH
72046: LD_VAR 0 4
72050: NOT
72051: OR
72052: IFFALSE 72056
// exit ;
72054: GO 72248
// while 1 do
72056: LD_INT 1
72058: IFFALSE 72248
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72060: LD_ADDR_VAR 0 9
72064: PUSH
72065: LD_VAR 0 1
72069: PPUSH
72070: LD_INT 1
72072: PPUSH
72073: CALL_OW 287
72077: PUSH
72078: LD_INT 10
72080: MUL
72081: ST_TO_ADDR
// r := rate / 10 ;
72082: LD_ADDR_VAR 0 7
72086: PUSH
72087: LD_VAR 0 2
72091: PUSH
72092: LD_INT 10
72094: DIVREAL
72095: ST_TO_ADDR
// time := 1 1$00 ;
72096: LD_ADDR_VAR 0 8
72100: PUSH
72101: LD_INT 2100
72103: ST_TO_ADDR
// if amount < min then
72104: LD_VAR 0 9
72108: PUSH
72109: LD_VAR 0 3
72113: LESS
72114: IFFALSE 72132
// r := r * 2 else
72116: LD_ADDR_VAR 0 7
72120: PUSH
72121: LD_VAR 0 7
72125: PUSH
72126: LD_INT 2
72128: MUL
72129: ST_TO_ADDR
72130: GO 72158
// if amount > max then
72132: LD_VAR 0 9
72136: PUSH
72137: LD_VAR 0 4
72141: GREATER
72142: IFFALSE 72158
// r := r / 2 ;
72144: LD_ADDR_VAR 0 7
72148: PUSH
72149: LD_VAR 0 7
72153: PUSH
72154: LD_INT 2
72156: DIVREAL
72157: ST_TO_ADDR
// time := time / r ;
72158: LD_ADDR_VAR 0 8
72162: PUSH
72163: LD_VAR 0 8
72167: PUSH
72168: LD_VAR 0 7
72172: DIVREAL
72173: ST_TO_ADDR
// if time < 0 then
72174: LD_VAR 0 8
72178: PUSH
72179: LD_INT 0
72181: LESS
72182: IFFALSE 72199
// time := time * - 1 ;
72184: LD_ADDR_VAR 0 8
72188: PUSH
72189: LD_VAR 0 8
72193: PUSH
72194: LD_INT 1
72196: NEG
72197: MUL
72198: ST_TO_ADDR
// wait ( time ) ;
72199: LD_VAR 0 8
72203: PPUSH
72204: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72208: LD_INT 35
72210: PPUSH
72211: LD_INT 875
72213: PPUSH
72214: CALL_OW 12
72218: PPUSH
72219: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72223: LD_INT 1
72225: PPUSH
72226: LD_INT 5
72228: PPUSH
72229: CALL_OW 12
72233: PPUSH
72234: LD_VAR 0 1
72238: PPUSH
72239: LD_INT 1
72241: PPUSH
72242: CALL_OW 55
// end ;
72246: GO 72056
// end ;
72248: LD_VAR 0 5
72252: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72253: LD_INT 0
72255: PPUSH
72256: PPUSH
72257: PPUSH
72258: PPUSH
72259: PPUSH
72260: PPUSH
72261: PPUSH
72262: PPUSH
// if not turrets or not factories then
72263: LD_VAR 0 1
72267: NOT
72268: PUSH
72269: LD_VAR 0 2
72273: NOT
72274: OR
72275: IFFALSE 72279
// exit ;
72277: GO 72586
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72279: LD_ADDR_VAR 0 10
72283: PUSH
72284: LD_INT 5
72286: PUSH
72287: LD_INT 6
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: LD_INT 4
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 3
72306: PUSH
72307: LD_INT 5
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 24
72321: PUSH
72322: LD_INT 25
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 23
72331: PUSH
72332: LD_INT 27
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 42
72345: PUSH
72346: LD_INT 43
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 44
72355: PUSH
72356: LD_INT 46
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 45
72365: PUSH
72366: LD_INT 47
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: LIST
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: LIST
72382: ST_TO_ADDR
// result := [ ] ;
72383: LD_ADDR_VAR 0 3
72387: PUSH
72388: EMPTY
72389: ST_TO_ADDR
// for i in turrets do
72390: LD_ADDR_VAR 0 4
72394: PUSH
72395: LD_VAR 0 1
72399: PUSH
72400: FOR_IN
72401: IFFALSE 72584
// begin nat := GetNation ( i ) ;
72403: LD_ADDR_VAR 0 7
72407: PUSH
72408: LD_VAR 0 4
72412: PPUSH
72413: CALL_OW 248
72417: ST_TO_ADDR
// weapon := 0 ;
72418: LD_ADDR_VAR 0 8
72422: PUSH
72423: LD_INT 0
72425: ST_TO_ADDR
// if not nat then
72426: LD_VAR 0 7
72430: NOT
72431: IFFALSE 72435
// continue ;
72433: GO 72400
// for j in list [ nat ] do
72435: LD_ADDR_VAR 0 5
72439: PUSH
72440: LD_VAR 0 10
72444: PUSH
72445: LD_VAR 0 7
72449: ARRAY
72450: PUSH
72451: FOR_IN
72452: IFFALSE 72493
// if GetBWeapon ( i ) = j [ 1 ] then
72454: LD_VAR 0 4
72458: PPUSH
72459: CALL_OW 269
72463: PUSH
72464: LD_VAR 0 5
72468: PUSH
72469: LD_INT 1
72471: ARRAY
72472: EQUAL
72473: IFFALSE 72491
// begin weapon := j [ 2 ] ;
72475: LD_ADDR_VAR 0 8
72479: PUSH
72480: LD_VAR 0 5
72484: PUSH
72485: LD_INT 2
72487: ARRAY
72488: ST_TO_ADDR
// break ;
72489: GO 72493
// end ;
72491: GO 72451
72493: POP
72494: POP
// if not weapon then
72495: LD_VAR 0 8
72499: NOT
72500: IFFALSE 72504
// continue ;
72502: GO 72400
// for k in factories do
72504: LD_ADDR_VAR 0 6
72508: PUSH
72509: LD_VAR 0 2
72513: PUSH
72514: FOR_IN
72515: IFFALSE 72580
// begin weapons := AvailableWeaponList ( k ) ;
72517: LD_ADDR_VAR 0 9
72521: PUSH
72522: LD_VAR 0 6
72526: PPUSH
72527: CALL_OW 478
72531: ST_TO_ADDR
// if not weapons then
72532: LD_VAR 0 9
72536: NOT
72537: IFFALSE 72541
// continue ;
72539: GO 72514
// if weapon in weapons then
72541: LD_VAR 0 8
72545: PUSH
72546: LD_VAR 0 9
72550: IN
72551: IFFALSE 72578
// begin result := [ i , weapon ] ;
72553: LD_ADDR_VAR 0 3
72557: PUSH
72558: LD_VAR 0 4
72562: PUSH
72563: LD_VAR 0 8
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: ST_TO_ADDR
// exit ;
72572: POP
72573: POP
72574: POP
72575: POP
72576: GO 72586
// end ; end ;
72578: GO 72514
72580: POP
72581: POP
// end ;
72582: GO 72400
72584: POP
72585: POP
// end ;
72586: LD_VAR 0 3
72590: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72591: LD_INT 0
72593: PPUSH
// if not side or side > 8 then
72594: LD_VAR 0 3
72598: NOT
72599: PUSH
72600: LD_VAR 0 3
72604: PUSH
72605: LD_INT 8
72607: GREATER
72608: OR
72609: IFFALSE 72613
// exit ;
72611: GO 72672
// if not range then
72613: LD_VAR 0 4
72617: NOT
72618: IFFALSE 72629
// range := - 12 ;
72620: LD_ADDR_VAR 0 4
72624: PUSH
72625: LD_INT 12
72627: NEG
72628: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72629: LD_VAR 0 1
72633: PPUSH
72634: LD_VAR 0 2
72638: PPUSH
72639: LD_VAR 0 3
72643: PPUSH
72644: LD_VAR 0 4
72648: PPUSH
72649: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72653: LD_VAR 0 1
72657: PPUSH
72658: LD_VAR 0 2
72662: PPUSH
72663: LD_VAR 0 3
72667: PPUSH
72668: CALL_OW 331
// end ;
72672: LD_VAR 0 5
72676: RET
// export function Video ( mode ) ; begin
72677: LD_INT 0
72679: PPUSH
// ingame_video = mode ;
72680: LD_ADDR_OWVAR 52
72684: PUSH
72685: LD_VAR 0 1
72689: ST_TO_ADDR
// interface_hidden = mode ;
72690: LD_ADDR_OWVAR 54
72694: PUSH
72695: LD_VAR 0 1
72699: ST_TO_ADDR
// end ;
72700: LD_VAR 0 2
72704: RET
// export function Join ( array , element ) ; begin
72705: LD_INT 0
72707: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72708: LD_ADDR_VAR 0 3
72712: PUSH
72713: LD_VAR 0 1
72717: PPUSH
72718: LD_VAR 0 1
72722: PUSH
72723: LD_INT 1
72725: PLUS
72726: PPUSH
72727: LD_VAR 0 2
72731: PPUSH
72732: CALL_OW 1
72736: ST_TO_ADDR
// end ;
72737: LD_VAR 0 3
72741: RET
// export function JoinUnion ( array , element ) ; begin
72742: LD_INT 0
72744: PPUSH
// result := array union element ;
72745: LD_ADDR_VAR 0 3
72749: PUSH
72750: LD_VAR 0 1
72754: PUSH
72755: LD_VAR 0 2
72759: UNION
72760: ST_TO_ADDR
// end ;
72761: LD_VAR 0 3
72765: RET
// export function GetBehemoths ( side ) ; begin
72766: LD_INT 0
72768: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72769: LD_ADDR_VAR 0 2
72773: PUSH
72774: LD_INT 22
72776: PUSH
72777: LD_VAR 0 1
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 31
72788: PUSH
72789: LD_INT 25
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PPUSH
72800: CALL_OW 69
72804: ST_TO_ADDR
// end ;
72805: LD_VAR 0 2
72809: RET
// export function Shuffle ( array ) ; var i , index ; begin
72810: LD_INT 0
72812: PPUSH
72813: PPUSH
72814: PPUSH
// result := [ ] ;
72815: LD_ADDR_VAR 0 2
72819: PUSH
72820: EMPTY
72821: ST_TO_ADDR
// if not array then
72822: LD_VAR 0 1
72826: NOT
72827: IFFALSE 72831
// exit ;
72829: GO 72930
// Randomize ;
72831: CALL_OW 10
// for i = array downto 1 do
72835: LD_ADDR_VAR 0 3
72839: PUSH
72840: DOUBLE
72841: LD_VAR 0 1
72845: INC
72846: ST_TO_ADDR
72847: LD_INT 1
72849: PUSH
72850: FOR_DOWNTO
72851: IFFALSE 72928
// begin index := rand ( 1 , array ) ;
72853: LD_ADDR_VAR 0 4
72857: PUSH
72858: LD_INT 1
72860: PPUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 12
72870: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72871: LD_ADDR_VAR 0 2
72875: PUSH
72876: LD_VAR 0 2
72880: PPUSH
72881: LD_VAR 0 2
72885: PUSH
72886: LD_INT 1
72888: PLUS
72889: PPUSH
72890: LD_VAR 0 1
72894: PUSH
72895: LD_VAR 0 4
72899: ARRAY
72900: PPUSH
72901: CALL_OW 2
72905: ST_TO_ADDR
// array := Delete ( array , index ) ;
72906: LD_ADDR_VAR 0 1
72910: PUSH
72911: LD_VAR 0 1
72915: PPUSH
72916: LD_VAR 0 4
72920: PPUSH
72921: CALL_OW 3
72925: ST_TO_ADDR
// end ;
72926: GO 72850
72928: POP
72929: POP
// end ;
72930: LD_VAR 0 2
72934: RET
// export function GetBaseMaterials ( base ) ; begin
72935: LD_INT 0
72937: PPUSH
// result := [ 0 , 0 , 0 ] ;
72938: LD_ADDR_VAR 0 2
72942: PUSH
72943: LD_INT 0
72945: PUSH
72946: LD_INT 0
72948: PUSH
72949: LD_INT 0
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: LIST
72956: ST_TO_ADDR
// if not base then
72957: LD_VAR 0 1
72961: NOT
72962: IFFALSE 72966
// exit ;
72964: GO 73015
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72966: LD_ADDR_VAR 0 2
72970: PUSH
72971: LD_VAR 0 1
72975: PPUSH
72976: LD_INT 1
72978: PPUSH
72979: CALL_OW 275
72983: PUSH
72984: LD_VAR 0 1
72988: PPUSH
72989: LD_INT 2
72991: PPUSH
72992: CALL_OW 275
72996: PUSH
72997: LD_VAR 0 1
73001: PPUSH
73002: LD_INT 3
73004: PPUSH
73005: CALL_OW 275
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: LIST
73014: ST_TO_ADDR
// end ;
73015: LD_VAR 0 2
73019: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73020: LD_INT 0
73022: PPUSH
73023: PPUSH
// result := array ;
73024: LD_ADDR_VAR 0 3
73028: PUSH
73029: LD_VAR 0 1
73033: ST_TO_ADDR
// if size > 0 then
73034: LD_VAR 0 2
73038: PUSH
73039: LD_INT 0
73041: GREATER
73042: IFFALSE 73088
// for i := array downto size do
73044: LD_ADDR_VAR 0 4
73048: PUSH
73049: DOUBLE
73050: LD_VAR 0 1
73054: INC
73055: ST_TO_ADDR
73056: LD_VAR 0 2
73060: PUSH
73061: FOR_DOWNTO
73062: IFFALSE 73086
// result := Delete ( result , result ) ;
73064: LD_ADDR_VAR 0 3
73068: PUSH
73069: LD_VAR 0 3
73073: PPUSH
73074: LD_VAR 0 3
73078: PPUSH
73079: CALL_OW 3
73083: ST_TO_ADDR
73084: GO 73061
73086: POP
73087: POP
// end ;
73088: LD_VAR 0 3
73092: RET
// export function ComExit ( unit ) ; var tmp ; begin
73093: LD_INT 0
73095: PPUSH
73096: PPUSH
// if not IsInUnit ( unit ) then
73097: LD_VAR 0 1
73101: PPUSH
73102: CALL_OW 310
73106: NOT
73107: IFFALSE 73111
// exit ;
73109: GO 73171
// tmp := IsInUnit ( unit ) ;
73111: LD_ADDR_VAR 0 3
73115: PUSH
73116: LD_VAR 0 1
73120: PPUSH
73121: CALL_OW 310
73125: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73126: LD_VAR 0 3
73130: PPUSH
73131: CALL_OW 247
73135: PUSH
73136: LD_INT 2
73138: EQUAL
73139: IFFALSE 73152
// ComExitVehicle ( unit ) else
73141: LD_VAR 0 1
73145: PPUSH
73146: CALL_OW 121
73150: GO 73161
// ComExitBuilding ( unit ) ;
73152: LD_VAR 0 1
73156: PPUSH
73157: CALL_OW 122
// result := tmp ;
73161: LD_ADDR_VAR 0 2
73165: PUSH
73166: LD_VAR 0 3
73170: ST_TO_ADDR
// end ;
73171: LD_VAR 0 2
73175: RET
// export function ComExitAll ( units ) ; var i ; begin
73176: LD_INT 0
73178: PPUSH
73179: PPUSH
// if not units then
73180: LD_VAR 0 1
73184: NOT
73185: IFFALSE 73189
// exit ;
73187: GO 73215
// for i in units do
73189: LD_ADDR_VAR 0 3
73193: PUSH
73194: LD_VAR 0 1
73198: PUSH
73199: FOR_IN
73200: IFFALSE 73213
// ComExit ( i ) ;
73202: LD_VAR 0 3
73206: PPUSH
73207: CALL 73093 0 1
73211: GO 73199
73213: POP
73214: POP
// end ;
73215: LD_VAR 0 2
73219: RET
// export function ResetHc ; begin
73220: LD_INT 0
73222: PPUSH
// InitHc ;
73223: CALL_OW 19
// hc_importance := 0 ;
73227: LD_ADDR_OWVAR 32
73231: PUSH
73232: LD_INT 0
73234: ST_TO_ADDR
// end ;
73235: LD_VAR 0 1
73239: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73240: LD_INT 0
73242: PPUSH
73243: PPUSH
73244: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73245: LD_ADDR_VAR 0 6
73249: PUSH
73250: LD_VAR 0 1
73254: PUSH
73255: LD_VAR 0 3
73259: PLUS
73260: PUSH
73261: LD_INT 2
73263: DIV
73264: ST_TO_ADDR
// if _x < 0 then
73265: LD_VAR 0 6
73269: PUSH
73270: LD_INT 0
73272: LESS
73273: IFFALSE 73290
// _x := _x * - 1 ;
73275: LD_ADDR_VAR 0 6
73279: PUSH
73280: LD_VAR 0 6
73284: PUSH
73285: LD_INT 1
73287: NEG
73288: MUL
73289: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73290: LD_ADDR_VAR 0 7
73294: PUSH
73295: LD_VAR 0 2
73299: PUSH
73300: LD_VAR 0 4
73304: PLUS
73305: PUSH
73306: LD_INT 2
73308: DIV
73309: ST_TO_ADDR
// if _y < 0 then
73310: LD_VAR 0 7
73314: PUSH
73315: LD_INT 0
73317: LESS
73318: IFFALSE 73335
// _y := _y * - 1 ;
73320: LD_ADDR_VAR 0 7
73324: PUSH
73325: LD_VAR 0 7
73329: PUSH
73330: LD_INT 1
73332: NEG
73333: MUL
73334: ST_TO_ADDR
// result := [ _x , _y ] ;
73335: LD_ADDR_VAR 0 5
73339: PUSH
73340: LD_VAR 0 6
73344: PUSH
73345: LD_VAR 0 7
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: ST_TO_ADDR
// end ;
73354: LD_VAR 0 5
73358: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73359: LD_INT 0
73361: PPUSH
73362: PPUSH
73363: PPUSH
73364: PPUSH
// task := GetTaskList ( unit ) ;
73365: LD_ADDR_VAR 0 7
73369: PUSH
73370: LD_VAR 0 1
73374: PPUSH
73375: CALL_OW 437
73379: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73380: LD_VAR 0 7
73384: NOT
73385: PUSH
73386: LD_VAR 0 1
73390: PPUSH
73391: LD_VAR 0 2
73395: PPUSH
73396: CALL_OW 308
73400: NOT
73401: AND
73402: IFFALSE 73406
// exit ;
73404: GO 73524
// if IsInArea ( unit , area ) then
73406: LD_VAR 0 1
73410: PPUSH
73411: LD_VAR 0 2
73415: PPUSH
73416: CALL_OW 308
73420: IFFALSE 73438
// begin ComMoveToArea ( unit , goAway ) ;
73422: LD_VAR 0 1
73426: PPUSH
73427: LD_VAR 0 3
73431: PPUSH
73432: CALL_OW 113
// exit ;
73436: GO 73524
// end ; if task [ 1 ] [ 1 ] <> M then
73438: LD_VAR 0 7
73442: PUSH
73443: LD_INT 1
73445: ARRAY
73446: PUSH
73447: LD_INT 1
73449: ARRAY
73450: PUSH
73451: LD_STRING M
73453: NONEQUAL
73454: IFFALSE 73458
// exit ;
73456: GO 73524
// x := task [ 1 ] [ 2 ] ;
73458: LD_ADDR_VAR 0 5
73462: PUSH
73463: LD_VAR 0 7
73467: PUSH
73468: LD_INT 1
73470: ARRAY
73471: PUSH
73472: LD_INT 2
73474: ARRAY
73475: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73476: LD_ADDR_VAR 0 6
73480: PUSH
73481: LD_VAR 0 7
73485: PUSH
73486: LD_INT 1
73488: ARRAY
73489: PUSH
73490: LD_INT 3
73492: ARRAY
73493: ST_TO_ADDR
// if InArea ( x , y , area ) then
73494: LD_VAR 0 5
73498: PPUSH
73499: LD_VAR 0 6
73503: PPUSH
73504: LD_VAR 0 2
73508: PPUSH
73509: CALL_OW 309
73513: IFFALSE 73524
// ComStop ( unit ) ;
73515: LD_VAR 0 1
73519: PPUSH
73520: CALL_OW 141
// end ;
73524: LD_VAR 0 4
73528: RET
// export function Abs ( value ) ; begin
73529: LD_INT 0
73531: PPUSH
// result := value ;
73532: LD_ADDR_VAR 0 2
73536: PUSH
73537: LD_VAR 0 1
73541: ST_TO_ADDR
// if value < 0 then
73542: LD_VAR 0 1
73546: PUSH
73547: LD_INT 0
73549: LESS
73550: IFFALSE 73567
// result := value * - 1 ;
73552: LD_ADDR_VAR 0 2
73556: PUSH
73557: LD_VAR 0 1
73561: PUSH
73562: LD_INT 1
73564: NEG
73565: MUL
73566: ST_TO_ADDR
// end ;
73567: LD_VAR 0 2
73571: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73572: LD_INT 0
73574: PPUSH
73575: PPUSH
73576: PPUSH
73577: PPUSH
73578: PPUSH
73579: PPUSH
73580: PPUSH
73581: PPUSH
// if not unit or not building then
73582: LD_VAR 0 1
73586: NOT
73587: PUSH
73588: LD_VAR 0 2
73592: NOT
73593: OR
73594: IFFALSE 73598
// exit ;
73596: GO 73824
// x := GetX ( building ) ;
73598: LD_ADDR_VAR 0 4
73602: PUSH
73603: LD_VAR 0 2
73607: PPUSH
73608: CALL_OW 250
73612: ST_TO_ADDR
// y := GetY ( building ) ;
73613: LD_ADDR_VAR 0 6
73617: PUSH
73618: LD_VAR 0 2
73622: PPUSH
73623: CALL_OW 251
73627: ST_TO_ADDR
// d := GetDir ( building ) ;
73628: LD_ADDR_VAR 0 8
73632: PUSH
73633: LD_VAR 0 2
73637: PPUSH
73638: CALL_OW 254
73642: ST_TO_ADDR
// r := 4 ;
73643: LD_ADDR_VAR 0 9
73647: PUSH
73648: LD_INT 4
73650: ST_TO_ADDR
// for i := 1 to 5 do
73651: LD_ADDR_VAR 0 10
73655: PUSH
73656: DOUBLE
73657: LD_INT 1
73659: DEC
73660: ST_TO_ADDR
73661: LD_INT 5
73663: PUSH
73664: FOR_TO
73665: IFFALSE 73822
// begin _x := ShiftX ( x , d , r + i ) ;
73667: LD_ADDR_VAR 0 5
73671: PUSH
73672: LD_VAR 0 4
73676: PPUSH
73677: LD_VAR 0 8
73681: PPUSH
73682: LD_VAR 0 9
73686: PUSH
73687: LD_VAR 0 10
73691: PLUS
73692: PPUSH
73693: CALL_OW 272
73697: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73698: LD_ADDR_VAR 0 7
73702: PUSH
73703: LD_VAR 0 6
73707: PPUSH
73708: LD_VAR 0 8
73712: PPUSH
73713: LD_VAR 0 9
73717: PUSH
73718: LD_VAR 0 10
73722: PLUS
73723: PPUSH
73724: CALL_OW 273
73728: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73729: LD_VAR 0 5
73733: PPUSH
73734: LD_VAR 0 7
73738: PPUSH
73739: CALL_OW 488
73743: PUSH
73744: LD_VAR 0 5
73748: PPUSH
73749: LD_VAR 0 7
73753: PPUSH
73754: CALL_OW 428
73758: PPUSH
73759: CALL_OW 247
73763: PUSH
73764: LD_INT 3
73766: PUSH
73767: LD_INT 2
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: IN
73774: NOT
73775: AND
73776: IFFALSE 73820
// begin ComMoveXY ( unit , _x , _y ) ;
73778: LD_VAR 0 1
73782: PPUSH
73783: LD_VAR 0 5
73787: PPUSH
73788: LD_VAR 0 7
73792: PPUSH
73793: CALL_OW 111
// result := [ _x , _y ] ;
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_VAR 0 5
73806: PUSH
73807: LD_VAR 0 7
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: ST_TO_ADDR
// exit ;
73816: POP
73817: POP
73818: GO 73824
// end ; end ;
73820: GO 73664
73822: POP
73823: POP
// end ;
73824: LD_VAR 0 3
73828: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73829: LD_INT 0
73831: PPUSH
73832: PPUSH
73833: PPUSH
// result := 0 ;
73834: LD_ADDR_VAR 0 3
73838: PUSH
73839: LD_INT 0
73841: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73842: LD_VAR 0 1
73846: PUSH
73847: LD_INT 0
73849: LESS
73850: PUSH
73851: LD_VAR 0 1
73855: PUSH
73856: LD_INT 8
73858: GREATER
73859: OR
73860: PUSH
73861: LD_VAR 0 2
73865: PUSH
73866: LD_INT 0
73868: LESS
73869: OR
73870: PUSH
73871: LD_VAR 0 2
73875: PUSH
73876: LD_INT 8
73878: GREATER
73879: OR
73880: IFFALSE 73884
// exit ;
73882: GO 73959
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73884: LD_ADDR_VAR 0 4
73888: PUSH
73889: LD_INT 22
73891: PUSH
73892: LD_VAR 0 2
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PPUSH
73901: CALL_OW 69
73905: PUSH
73906: FOR_IN
73907: IFFALSE 73957
// begin un := UnitShoot ( i ) ;
73909: LD_ADDR_VAR 0 5
73913: PUSH
73914: LD_VAR 0 4
73918: PPUSH
73919: CALL_OW 504
73923: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73924: LD_VAR 0 5
73928: PPUSH
73929: CALL_OW 255
73933: PUSH
73934: LD_VAR 0 1
73938: EQUAL
73939: IFFALSE 73955
// begin result := un ;
73941: LD_ADDR_VAR 0 3
73945: PUSH
73946: LD_VAR 0 5
73950: ST_TO_ADDR
// exit ;
73951: POP
73952: POP
73953: GO 73959
// end ; end ;
73955: GO 73906
73957: POP
73958: POP
// end ;
73959: LD_VAR 0 3
73963: RET
// export function GetCargoBay ( units ) ; begin
73964: LD_INT 0
73966: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73967: LD_ADDR_VAR 0 2
73971: PUSH
73972: LD_VAR 0 1
73976: PPUSH
73977: LD_INT 2
73979: PUSH
73980: LD_INT 34
73982: PUSH
73983: LD_INT 12
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 34
73992: PUSH
73993: LD_INT 51
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: LD_INT 34
74002: PUSH
74003: LD_INT 32
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 34
74012: PUSH
74013: LD_EXP 49
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: PPUSH
74029: CALL_OW 72
74033: ST_TO_ADDR
// end ; end_of_file
74034: LD_VAR 0 2
74038: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74039: LD_VAR 0 1
74043: PUSH
74044: LD_INT 200
74046: DOUBLE
74047: GREATEREQUAL
74048: IFFALSE 74056
74050: LD_INT 299
74052: DOUBLE
74053: LESSEQUAL
74054: IFTRUE 74058
74056: GO 74090
74058: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
74059: LD_VAR 0 1
74063: PPUSH
74064: LD_VAR 0 2
74068: PPUSH
74069: LD_VAR 0 3
74073: PPUSH
74074: LD_VAR 0 4
74078: PPUSH
74079: LD_VAR 0 5
74083: PPUSH
74084: CALL 32513 0 5
74088: GO 74091
74090: POP
// end ;
74091: PPOPN 11
74093: END
