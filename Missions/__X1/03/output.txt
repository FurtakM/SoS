// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareNature ;
   8: CALL 619 0 0
// PrepareArabian ;
  12: CALL 1934 0 0
// PrepareAmerican ;
  16: CALL 4712 0 0
// Action ;
  20: CALL 9189 0 0
// end ;
  24: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := 1 ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// prefix := 02_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 02_
  43: ST_TO_ADDR
// eventAttack := 1 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// deadCounter := 0 ;
  52: LD_ADDR_EXP 8
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// gameStarted := false ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// farmerBaseReady := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// americanBaseSpoted := false ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// americanBaseCaptured := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// americanHasEscaped := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// workshopBuilded := false ;
 100: LD_ADDR_EXP 9
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// retreatAllowed := false ;
 108: LD_ADDR_EXP 10
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// allowConvoys := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// farmerCrates := 0 ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// farmerCratesCounter := 30 30$00 ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: LD_INT 63000
 147: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// attackWave := 1 ;
 156: LD_ADDR_EXP 16
 160: PUSH
 161: LD_INT 1
 163: ST_TO_ADDR
// omarCargoCounter := [ 6 , 9 , 12 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 17
 168: PUSH
 169: LD_INT 6
 171: PUSH
 172: LD_INT 9
 174: PUSH
 175: LD_INT 12
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// vehCounter := 0 ;
 189: LD_ADDR_EXP 18
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// convoyCounter := 0 ;
 197: LD_ADDR_EXP 19
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// ibrahimInDepot := false ;
 205: LD_ADDR_EXP 21
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// ibrahimIsFree := false ;
 213: LD_ADDR_EXP 22
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// maxConvoys := [ 16 , 15 , 14 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 23
 225: PUSH
 226: LD_INT 16
 228: PUSH
 229: LD_INT 15
 231: PUSH
 232: LD_INT 14
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// end ; end_of_file
 246: LD_VAR 0 1
 250: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 251: LD_INT 0
 253: PPUSH
 254: PPUSH
// if exist_mode then
 255: LD_VAR 0 2
 259: IFFALSE 284
// unit := CreateCharacter ( prefix & ident ) else
 261: LD_ADDR_VAR 0 5
 265: PUSH
 266: LD_VAR 0 3
 270: PUSH
 271: LD_VAR 0 1
 275: STR
 276: PPUSH
 277: CALL_OW 34
 281: ST_TO_ADDR
 282: GO 299
// unit := NewCharacter ( ident ) ;
 284: LD_ADDR_VAR 0 5
 288: PUSH
 289: LD_VAR 0 1
 293: PPUSH
 294: CALL_OW 25
 298: ST_TO_ADDR
// result := unit ;
 299: LD_ADDR_VAR 0 4
 303: PUSH
 304: LD_VAR 0 5
 308: ST_TO_ADDR
// end ;
 309: LD_VAR 0 4
 313: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 314: LD_INT 0
 316: PPUSH
// uc_side := side ;
 317: LD_ADDR_OWVAR 20
 321: PUSH
 322: LD_VAR 0 1
 326: ST_TO_ADDR
// uc_nation := nation ;
 327: LD_ADDR_OWVAR 21
 331: PUSH
 332: LD_VAR 0 2
 336: ST_TO_ADDR
// vc_chassis := chassis ;
 337: LD_ADDR_OWVAR 37
 341: PUSH
 342: LD_VAR 0 3
 346: ST_TO_ADDR
// vc_engine := engine ;
 347: LD_ADDR_OWVAR 39
 351: PUSH
 352: LD_VAR 0 4
 356: ST_TO_ADDR
// vc_control := control ;
 357: LD_ADDR_OWVAR 38
 361: PUSH
 362: LD_VAR 0 5
 366: ST_TO_ADDR
// vc_weapon := weapon ;
 367: LD_ADDR_OWVAR 40
 371: PUSH
 372: LD_VAR 0 6
 376: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 377: LD_ADDR_OWVAR 41
 381: PUSH
 382: LD_VAR 0 7
 386: ST_TO_ADDR
// result := CreateVehicle ;
 387: LD_ADDR_VAR 0 8
 391: PUSH
 392: CALL_OW 45
 396: ST_TO_ADDR
// end ;
 397: LD_VAR 0 8
 401: RET
// export function SayX ( units , ident ) ; var i ; begin
 402: LD_INT 0
 404: PPUSH
 405: PPUSH
// result := false ;
 406: LD_ADDR_VAR 0 3
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// if not units then
 414: LD_VAR 0 1
 418: NOT
 419: IFFALSE 423
// exit ;
 421: GO 477
// for i in units do
 423: LD_ADDR_VAR 0 4
 427: PUSH
 428: LD_VAR 0 1
 432: PUSH
 433: FOR_IN
 434: IFFALSE 475
// if IsOk ( i ) then
 436: LD_VAR 0 4
 440: PPUSH
 441: CALL_OW 302
 445: IFFALSE 473
// begin Say ( i , ident ) ;
 447: LD_VAR 0 4
 451: PPUSH
 452: LD_VAR 0 2
 456: PPUSH
 457: CALL_OW 88
// result := i ;
 461: LD_ADDR_VAR 0 3
 465: PUSH
 466: LD_VAR 0 4
 470: ST_TO_ADDR
// break ;
 471: GO 475
// end ;
 473: GO 433
 475: POP
 476: POP
// end ;
 477: LD_VAR 0 3
 481: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 482: LD_INT 0
 484: PPUSH
 485: PPUSH
// InitUc ;
 486: CALL_OW 18
// InitHc ;
 490: CALL_OW 19
// uc_side := 0 ;
 494: LD_ADDR_OWVAR 20
 498: PUSH
 499: LD_INT 0
 501: ST_TO_ADDR
// uc_nation := 0 ;
 502: LD_ADDR_OWVAR 21
 506: PUSH
 507: LD_INT 0
 509: ST_TO_ADDR
// for i = 1 to amount do
 510: LD_ADDR_VAR 0 4
 514: PUSH
 515: DOUBLE
 516: LD_INT 1
 518: DEC
 519: ST_TO_ADDR
 520: LD_VAR 0 2
 524: PUSH
 525: FOR_TO
 526: IFFALSE 608
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 528: LD_ADDR_OWVAR 29
 532: PUSH
 533: LD_INT 9
 535: PPUSH
 536: LD_INT 12
 538: PPUSH
 539: CALL_OW 12
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 559: LD_ADDR_OWVAR 35
 563: PUSH
 564: LD_INT 1
 566: NEG
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL_OW 12
 575: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 576: LD_INT 0
 578: PPUSH
 579: LD_INT 12
 581: PPUSH
 582: LD_INT 1
 584: PPUSH
 585: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 589: CALL_OW 44
 593: PPUSH
 594: LD_VAR 0 1
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 49
// end ;
 606: GO 525
 608: POP
 609: POP
// InitHc ;
 610: CALL_OW 19
// end ;
 614: LD_VAR 0 3
 618: RET
// export function PrepareNature ; var i ; begin
 619: LD_INT 0
 621: PPUSH
 622: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 623: LD_INT 2
 625: PPUSH
 626: LD_INT 4
 628: PUSH
 629: LD_INT 4
 631: PUSH
 632: LD_INT 3
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: LIST
 639: PUSH
 640: LD_OWVAR 67
 644: ARRAY
 645: PPUSH
 646: CALL 482 0 2
// for i := 1 to 3 do
 650: LD_ADDR_VAR 0 2
 654: PUSH
 655: DOUBLE
 656: LD_INT 1
 658: DEC
 659: ST_TO_ADDR
 660: LD_INT 3
 662: PUSH
 663: FOR_TO
 664: IFFALSE 699
// begin hc_class := 21 ;
 666: LD_ADDR_OWVAR 28
 670: PUSH
 671: LD_INT 21
 673: ST_TO_ADDR
// hc_gallery :=  ;
 674: LD_ADDR_OWVAR 33
 678: PUSH
 679: LD_STRING 
 681: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 682: CALL_OW 44
 686: PPUSH
 687: LD_INT 2
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 49
// end ;
 697: GO 663
 699: POP
 700: POP
// for i := 1 to 2 do
 701: LD_ADDR_VAR 0 2
 705: PUSH
 706: DOUBLE
 707: LD_INT 1
 709: DEC
 710: ST_TO_ADDR
 711: LD_INT 2
 713: PUSH
 714: FOR_TO
 715: IFFALSE 750
// begin hc_class := 18 ;
 717: LD_ADDR_OWVAR 28
 721: PUSH
 722: LD_INT 18
 724: ST_TO_ADDR
// hc_gallery :=  ;
 725: LD_ADDR_OWVAR 33
 729: PUSH
 730: LD_STRING 
 732: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 733: CALL_OW 44
 737: PPUSH
 738: LD_INT 2
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 49
// end ;
 748: GO 714
 750: POP
 751: POP
// for i := 1 to 2 do
 752: LD_ADDR_VAR 0 2
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_INT 2
 764: PUSH
 765: FOR_TO
 766: IFFALSE 801
// begin hc_class := 13 ;
 768: LD_ADDR_OWVAR 28
 772: PUSH
 773: LD_INT 13
 775: ST_TO_ADDR
// hc_gallery :=  ;
 776: LD_ADDR_OWVAR 33
 780: PUSH
 781: LD_STRING 
 783: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 784: CALL_OW 44
 788: PPUSH
 789: LD_INT 2
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// end ;
 799: GO 765
 801: POP
 802: POP
// end ;
 803: LD_VAR 0 1
 807: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 808: LD_INT 0
 810: PPUSH
 811: PPUSH
 812: PPUSH
// if not observer or not unit then
 813: LD_VAR 0 1
 817: NOT
 818: PUSH
 819: LD_VAR 0 2
 823: NOT
 824: OR
 825: IFFALSE 829
// exit ;
 827: GO 877
// if not See ( GetSide ( observer ) , unit ) then
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 255
 838: PPUSH
 839: LD_VAR 0 2
 843: PPUSH
 844: CALL_OW 292
 848: NOT
 849: IFFALSE 853
// exit ;
 851: GO 877
// result := GetDistUnits ( observer , unit ) < 12 ;
 853: LD_ADDR_VAR 0 3
 857: PUSH
 858: LD_VAR 0 1
 862: PPUSH
 863: LD_VAR 0 2
 867: PPUSH
 868: CALL_OW 296
 872: PUSH
 873: LD_INT 12
 875: LESS
 876: ST_TO_ADDR
// end ;
 877: LD_VAR 0 3
 881: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 882: LD_INT 0
 884: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 885: LD_VAR 0 2
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PPUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 2
 901: ARRAY
 902: PPUSH
 903: CALL_OW 488
 907: PUSH
 908: LD_VAR 0 2
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: PPUSH
 917: LD_VAR 0 2
 921: PUSH
 922: LD_INT 2
 924: ARRAY
 925: PPUSH
 926: CALL_OW 428
 930: PUSH
 931: LD_INT 0
 933: EQUAL
 934: AND
 935: IFFALSE 969
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 937: LD_VAR 0 1
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: CALL_OW 48
// end ;
 969: LD_VAR 0 4
 973: RET
// export function Video ( mode ) ; begin
 974: LD_INT 0
 976: PPUSH
// ingame_video = mode ;
 977: LD_ADDR_OWVAR 52
 981: PUSH
 982: LD_VAR 0 1
 986: ST_TO_ADDR
// interface_hidden = mode ;
 987: LD_ADDR_OWVAR 54
 991: PUSH
 992: LD_VAR 0 1
 996: ST_TO_ADDR
// end ;
 997: LD_VAR 0 2
1001: RET
// export function ReverseArray ( array ) ; var i ; begin
1002: LD_INT 0
1004: PPUSH
1005: PPUSH
// if not array then
1006: LD_VAR 0 1
1010: NOT
1011: IFFALSE 1015
// exit ;
1013: GO 1073
// result := [ ] ;
1015: LD_ADDR_VAR 0 2
1019: PUSH
1020: EMPTY
1021: ST_TO_ADDR
// for i := 1 to array do
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: DOUBLE
1028: LD_INT 1
1030: DEC
1031: ST_TO_ADDR
1032: LD_VAR 0 1
1036: PUSH
1037: FOR_TO
1038: IFFALSE 1071
// result := Insert ( result , 1 , array [ i ] ) ;
1040: LD_ADDR_VAR 0 2
1044: PUSH
1045: LD_VAR 0 2
1049: PPUSH
1050: LD_INT 1
1052: PPUSH
1053: LD_VAR 0 1
1057: PUSH
1058: LD_VAR 0 3
1062: ARRAY
1063: PPUSH
1064: CALL_OW 2
1068: ST_TO_ADDR
1069: GO 1037
1071: POP
1072: POP
// end ;
1073: LD_VAR 0 2
1077: RET
// export function ComExit ( unit ) ; begin
1078: LD_INT 0
1080: PPUSH
// result := IsInUnit ( unit ) ;
1081: LD_ADDR_VAR 0 2
1085: PUSH
1086: LD_VAR 0 1
1090: PPUSH
1091: CALL_OW 310
1095: ST_TO_ADDR
// if not result then
1096: LD_VAR 0 2
1100: NOT
1101: IFFALSE 1105
// exit ;
1103: GO 1140
// if GetType ( result ) = unit_vehicle then
1105: LD_VAR 0 2
1109: PPUSH
1110: CALL_OW 247
1114: PUSH
1115: LD_INT 2
1117: EQUAL
1118: IFFALSE 1131
// ComExitVehicle ( unit ) else
1120: LD_VAR 0 1
1124: PPUSH
1125: CALL_OW 121
1129: GO 1140
// ComExitBuilding ( unit ) ;
1131: LD_VAR 0 1
1135: PPUSH
1136: CALL_OW 122
// end ;
1140: LD_VAR 0 2
1144: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
// if not side or not nation then
1149: LD_VAR 0 1
1153: NOT
1154: PUSH
1155: LD_VAR 0 2
1159: NOT
1160: OR
1161: IFFALSE 1165
// exit ;
1163: GO 1929
// case nation of nation_american :
1165: LD_VAR 0 2
1169: PUSH
1170: LD_INT 1
1172: DOUBLE
1173: EQUAL
1174: IFTRUE 1178
1176: GO 1392
1178: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_INT 35
1186: PUSH
1187: LD_INT 45
1189: PUSH
1190: LD_INT 46
1192: PUSH
1193: LD_INT 47
1195: PUSH
1196: LD_INT 82
1198: PUSH
1199: LD_INT 83
1201: PUSH
1202: LD_INT 84
1204: PUSH
1205: LD_INT 85
1207: PUSH
1208: LD_INT 86
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: LD_INT 6
1219: PUSH
1220: LD_INT 15
1222: PUSH
1223: LD_INT 16
1225: PUSH
1226: LD_INT 7
1228: PUSH
1229: LD_INT 12
1231: PUSH
1232: LD_INT 13
1234: PUSH
1235: LD_INT 10
1237: PUSH
1238: LD_INT 14
1240: PUSH
1241: LD_INT 20
1243: PUSH
1244: LD_INT 21
1246: PUSH
1247: LD_INT 22
1249: PUSH
1250: LD_INT 25
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: LD_INT 27
1258: PUSH
1259: LD_INT 36
1261: PUSH
1262: LD_INT 69
1264: PUSH
1265: LD_INT 39
1267: PUSH
1268: LD_INT 34
1270: PUSH
1271: LD_INT 40
1273: PUSH
1274: LD_INT 48
1276: PUSH
1277: LD_INT 49
1279: PUSH
1280: LD_INT 50
1282: PUSH
1283: LD_INT 51
1285: PUSH
1286: LD_INT 52
1288: PUSH
1289: LD_INT 53
1291: PUSH
1292: LD_INT 54
1294: PUSH
1295: LD_INT 55
1297: PUSH
1298: LD_INT 56
1300: PUSH
1301: LD_INT 57
1303: PUSH
1304: LD_INT 58
1306: PUSH
1307: LD_INT 59
1309: PUSH
1310: LD_INT 60
1312: PUSH
1313: LD_INT 61
1315: PUSH
1316: LD_INT 62
1318: PUSH
1319: LD_INT 80
1321: PUSH
1322: LD_INT 82
1324: PUSH
1325: LD_INT 83
1327: PUSH
1328: LD_INT 84
1330: PUSH
1331: LD_INT 85
1333: PUSH
1334: LD_INT 86
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: ST_TO_ADDR
1390: GO 1853
1392: LD_INT 2
1394: DOUBLE
1395: EQUAL
1396: IFTRUE 1400
1398: GO 1622
1400: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: LD_INT 35
1408: PUSH
1409: LD_INT 45
1411: PUSH
1412: LD_INT 46
1414: PUSH
1415: LD_INT 47
1417: PUSH
1418: LD_INT 82
1420: PUSH
1421: LD_INT 83
1423: PUSH
1424: LD_INT 84
1426: PUSH
1427: LD_INT 85
1429: PUSH
1430: LD_INT 87
1432: PUSH
1433: LD_INT 70
1435: PUSH
1436: LD_INT 1
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 4
1447: PUSH
1448: LD_INT 5
1450: PUSH
1451: LD_INT 6
1453: PUSH
1454: LD_INT 15
1456: PUSH
1457: LD_INT 18
1459: PUSH
1460: LD_INT 7
1462: PUSH
1463: LD_INT 17
1465: PUSH
1466: LD_INT 8
1468: PUSH
1469: LD_INT 20
1471: PUSH
1472: LD_INT 21
1474: PUSH
1475: LD_INT 22
1477: PUSH
1478: LD_INT 72
1480: PUSH
1481: LD_INT 26
1483: PUSH
1484: LD_INT 69
1486: PUSH
1487: LD_INT 39
1489: PUSH
1490: LD_INT 40
1492: PUSH
1493: LD_INT 41
1495: PUSH
1496: LD_INT 42
1498: PUSH
1499: LD_INT 43
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: LD_INT 49
1507: PUSH
1508: LD_INT 50
1510: PUSH
1511: LD_INT 51
1513: PUSH
1514: LD_INT 52
1516: PUSH
1517: LD_INT 53
1519: PUSH
1520: LD_INT 54
1522: PUSH
1523: LD_INT 55
1525: PUSH
1526: LD_INT 56
1528: PUSH
1529: LD_INT 60
1531: PUSH
1532: LD_INT 61
1534: PUSH
1535: LD_INT 62
1537: PUSH
1538: LD_INT 66
1540: PUSH
1541: LD_INT 67
1543: PUSH
1544: LD_INT 68
1546: PUSH
1547: LD_INT 81
1549: PUSH
1550: LD_INT 82
1552: PUSH
1553: LD_INT 83
1555: PUSH
1556: LD_INT 84
1558: PUSH
1559: LD_INT 85
1561: PUSH
1562: LD_INT 87
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
1620: GO 1853
1622: LD_INT 3
1624: DOUBLE
1625: EQUAL
1626: IFTRUE 1630
1628: GO 1852
1630: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1631: LD_ADDR_VAR 0 4
1635: PUSH
1636: LD_INT 46
1638: PUSH
1639: LD_INT 47
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 2
1647: PUSH
1648: LD_INT 82
1650: PUSH
1651: LD_INT 83
1653: PUSH
1654: LD_INT 84
1656: PUSH
1657: LD_INT 85
1659: PUSH
1660: LD_INT 86
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: LD_INT 9
1668: PUSH
1669: LD_INT 20
1671: PUSH
1672: LD_INT 19
1674: PUSH
1675: LD_INT 21
1677: PUSH
1678: LD_INT 24
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 25
1686: PUSH
1687: LD_INT 28
1689: PUSH
1690: LD_INT 29
1692: PUSH
1693: LD_INT 30
1695: PUSH
1696: LD_INT 31
1698: PUSH
1699: LD_INT 37
1701: PUSH
1702: LD_INT 38
1704: PUSH
1705: LD_INT 32
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 33
1713: PUSH
1714: LD_INT 69
1716: PUSH
1717: LD_INT 39
1719: PUSH
1720: LD_INT 34
1722: PUSH
1723: LD_INT 40
1725: PUSH
1726: LD_INT 71
1728: PUSH
1729: LD_INT 23
1731: PUSH
1732: LD_INT 44
1734: PUSH
1735: LD_INT 48
1737: PUSH
1738: LD_INT 49
1740: PUSH
1741: LD_INT 50
1743: PUSH
1744: LD_INT 51
1746: PUSH
1747: LD_INT 52
1749: PUSH
1750: LD_INT 53
1752: PUSH
1753: LD_INT 54
1755: PUSH
1756: LD_INT 55
1758: PUSH
1759: LD_INT 56
1761: PUSH
1762: LD_INT 57
1764: PUSH
1765: LD_INT 58
1767: PUSH
1768: LD_INT 59
1770: PUSH
1771: LD_INT 63
1773: PUSH
1774: LD_INT 64
1776: PUSH
1777: LD_INT 65
1779: PUSH
1780: LD_INT 82
1782: PUSH
1783: LD_INT 83
1785: PUSH
1786: LD_INT 84
1788: PUSH
1789: LD_INT 85
1791: PUSH
1792: LD_INT 86
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: ST_TO_ADDR
1850: GO 1853
1852: POP
// if state > - 1 and state < 3 then
1853: LD_VAR 0 3
1857: PUSH
1858: LD_INT 1
1860: NEG
1861: GREATER
1862: PUSH
1863: LD_VAR 0 3
1867: PUSH
1868: LD_INT 3
1870: LESS
1871: AND
1872: IFFALSE 1929
// for i in result do
1874: LD_ADDR_VAR 0 5
1878: PUSH
1879: LD_VAR 0 4
1883: PUSH
1884: FOR_IN
1885: IFFALSE 1927
// if GetTech ( i , side ) <> state then
1887: LD_VAR 0 5
1891: PPUSH
1892: LD_VAR 0 1
1896: PPUSH
1897: CALL_OW 321
1901: PUSH
1902: LD_VAR 0 3
1906: NONEQUAL
1907: IFFALSE 1925
// result := result diff i ;
1909: LD_ADDR_VAR 0 4
1913: PUSH
1914: LD_VAR 0 4
1918: PUSH
1919: LD_VAR 0 5
1923: DIFF
1924: ST_TO_ADDR
1925: GO 1884
1927: POP
1928: POP
// end ; end_of_file
1929: LD_VAR 0 4
1933: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1934: LD_INT 0
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 274
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: LD_INT 45
1969: PPUSH
1970: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1974: LD_ADDR_EXP 32
1978: PUSH
1979: LD_STRING Farmer
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: LD_STRING 
1987: PPUSH
1988: CALL 251 0 3
1992: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1993: LD_ADDR_EXP 33
1997: PUSH
1998: LD_STRING Omar
2000: PPUSH
2001: LD_INT 0
2003: PPUSH
2004: LD_STRING 
2006: PPUSH
2007: CALL 251 0 3
2011: ST_TO_ADDR
// omarSquad := [ ] ;
2012: LD_ADDR_EXP 36
2016: PUSH
2017: EMPTY
2018: ST_TO_ADDR
// heikeSquad := [ ] ;
2019: LD_ADDR_EXP 37
2023: PUSH
2024: EMPTY
2025: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
2026: LD_ADDR_EXP 38
2030: PUSH
2031: EMPTY
2032: ST_TO_ADDR
// omarCargo := [ ] ;
2033: LD_ADDR_EXP 39
2037: PUSH
2038: EMPTY
2039: ST_TO_ADDR
// for i := 1 to 5 do
2040: LD_ADDR_VAR 0 2
2044: PUSH
2045: DOUBLE
2046: LD_INT 1
2048: DEC
2049: ST_TO_ADDR
2050: LD_INT 5
2052: PUSH
2053: FOR_TO
2054: IFFALSE 2212
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
2056: LD_INT 0
2058: PPUSH
2059: LD_INT 1
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: LD_INT 2
2067: PUSH
2068: LD_INT 1
2070: PUSH
2071: LD_INT 1
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: PUSH
2081: LD_VAR 0 2
2085: ARRAY
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: CALL_OW 380
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2104: LD_ADDR_EXP 36
2108: PUSH
2109: LD_EXP 36
2113: PUSH
2114: LD_VAR 0 3
2118: UNION
2119: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
2120: LD_VAR 0 3
2124: PPUSH
2125: LD_INT 87
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 91
2137: PUSH
2138: LD_INT 32
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 82
2147: PUSH
2148: LD_INT 15
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 79
2157: PUSH
2158: LD_INT 14
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 82
2167: PUSH
2168: LD_INT 13
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PUSH
2182: LD_VAR 0 2
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL 882 0 3
// ComTurnXY ( un , 93 , 21 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 93
2202: PPUSH
2203: LD_INT 21
2205: PPUSH
2206: CALL_OW 118
// end ;
2210: GO 2053
2212: POP
2213: POP
// uc_side := 2 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 2
2221: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2222: LD_ADDR_EXP 24
2226: PUSH
2227: LD_STRING Heike
2229: PPUSH
2230: LD_EXP 1
2234: NOT
2235: PPUSH
2236: LD_EXP 2
2240: PPUSH
2241: CALL 251 0 3
2245: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2246: LD_ADDR_EXP 28
2250: PUSH
2251: LD_STRING Aviradze
2253: PPUSH
2254: LD_EXP 1
2258: NOT
2259: PPUSH
2260: LD_EXP 2
2264: PPUSH
2265: CALL 251 0 3
2269: ST_TO_ADDR
// tmp := [ ] ;
2270: LD_ADDR_VAR 0 4
2274: PUSH
2275: EMPTY
2276: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2277: LD_ADDR_EXP 25
2281: PUSH
2282: LD_STRING Givi
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_EXP 2
2295: PPUSH
2296: CALL 251 0 3
2300: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2301: LD_ADDR_EXP 26
2305: PUSH
2306: LD_STRING Mike
2308: PPUSH
2309: LD_EXP 1
2313: NOT
2314: PPUSH
2315: LD_EXP 2
2319: PPUSH
2320: CALL 251 0 3
2324: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2325: LD_ADDR_EXP 27
2329: PUSH
2330: LD_STRING Kamil
2332: PPUSH
2333: LD_EXP 1
2337: NOT
2338: PPUSH
2339: LD_EXP 2
2343: PPUSH
2344: CALL 251 0 3
2348: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2349: LD_ADDR_EXP 29
2353: PUSH
2354: LD_STRING Kaia
2356: PPUSH
2357: LD_EXP 1
2361: NOT
2362: PPUSH
2363: LD_EXP 2
2367: PPUSH
2368: CALL 251 0 3
2372: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2373: LD_ADDR_EXP 30
2377: PUSH
2378: LD_STRING Sophia
2380: PPUSH
2381: LD_EXP 1
2385: NOT
2386: PPUSH
2387: LD_EXP 2
2391: PPUSH
2392: CALL 251 0 3
2396: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2397: LD_ADDR_EXP 31
2401: PUSH
2402: LD_STRING Markov
2404: PPUSH
2405: LD_EXP 1
2409: NOT
2410: PPUSH
2411: LD_EXP 2
2415: PPUSH
2416: CALL 251 0 3
2420: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
2421: LD_ADDR_EXP 38
2425: PUSH
2426: LD_STRING 02_others
2428: PPUSH
2429: CALL_OW 31
2433: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
2434: LD_ADDR_VAR 0 4
2438: PUSH
2439: LD_EXP 26
2443: PUSH
2444: LD_EXP 27
2448: PUSH
2449: LD_EXP 29
2453: PUSH
2454: LD_EXP 30
2458: PUSH
2459: LD_EXP 31
2463: PUSH
2464: LD_EXP 25
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: PUSH
2477: LD_EXP 38
2481: ADD
2482: PUSH
2483: LD_INT 0
2485: DIFF
2486: ST_TO_ADDR
// heikeSquad := tmp ;
2487: LD_ADDR_EXP 37
2491: PUSH
2492: LD_VAR 0 4
2496: ST_TO_ADDR
// uc_nation := 0 ;
2497: LD_ADDR_OWVAR 21
2501: PUSH
2502: LD_INT 0
2504: ST_TO_ADDR
// hc_class := class_apeman ;
2505: LD_ADDR_OWVAR 28
2509: PUSH
2510: LD_INT 12
2512: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2513: LD_ADDR_OWVAR 31
2517: PUSH
2518: LD_INT 0
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: LD_INT 0
2526: PUSH
2527: LD_INT 0
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: ST_TO_ADDR
// hc_gallery :=  ;
2536: LD_ADDR_OWVAR 33
2540: PUSH
2541: LD_STRING 
2543: ST_TO_ADDR
// hc_name :=  ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING 
2551: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
2552: LD_ADDR_VAR 0 4
2556: PUSH
2557: LD_VAR 0 4
2561: PUSH
2562: CALL_OW 44
2566: UNION
2567: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
2568: LD_EXP 24
2572: PPUSH
2573: LD_INT 92
2575: PPUSH
2576: LD_INT 17
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
2586: LD_EXP 32
2590: PPUSH
2591: LD_INT 95
2593: PPUSH
2594: LD_INT 19
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
2604: LD_EXP 33
2608: PPUSH
2609: LD_INT 89
2611: PPUSH
2612: LD_INT 25
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
2622: LD_EXP 28
2626: PPUSH
2627: LD_INT 92
2629: PPUSH
2630: LD_INT 27
2632: PPUSH
2633: LD_INT 0
2635: PPUSH
2636: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
2640: LD_EXP 33
2644: PPUSH
2645: LD_EXP 28
2649: PPUSH
2650: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
2654: LD_EXP 28
2658: PPUSH
2659: LD_EXP 33
2663: PPUSH
2664: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
2668: LD_EXP 24
2672: PUSH
2673: LD_EXP 32
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PPUSH
2682: LD_EXP 33
2686: PPUSH
2687: CALL_OW 119
// if tmp then
2691: LD_VAR 0 4
2695: IFFALSE 2749
// for i in tmp do
2697: LD_ADDR_VAR 0 2
2701: PUSH
2702: LD_VAR 0 4
2706: PUSH
2707: FOR_IN
2708: IFFALSE 2747
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
2710: LD_VAR 0 2
2714: PPUSH
2715: LD_INT 94
2717: PPUSH
2718: LD_INT 14
2720: PPUSH
2721: LD_INT 4
2723: PPUSH
2724: LD_INT 0
2726: PPUSH
2727: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
2731: LD_VAR 0 2
2735: PPUSH
2736: LD_EXP 24
2740: PPUSH
2741: CALL_OW 119
// end ;
2745: GO 2707
2747: POP
2748: POP
// farmerSquad := [ ] ;
2749: LD_ADDR_EXP 35
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// uc_side := 5 ;
2756: LD_ADDR_OWVAR 20
2760: PUSH
2761: LD_INT 5
2763: ST_TO_ADDR
// uc_nation := 2 ;
2764: LD_ADDR_OWVAR 21
2768: PUSH
2769: LD_INT 2
2771: ST_TO_ADDR
// for i := 1 to 4 do
2772: LD_ADDR_VAR 0 2
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 4
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2864
// begin PrepareHuman ( false , 1 , 2 ) ;
2788: LD_INT 0
2790: PPUSH
2791: LD_INT 1
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 380
// un := CreateHuman ;
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: CALL_OW 44
2810: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
2811: LD_VAR 0 3
2815: PPUSH
2816: LD_INT 102
2818: PPUSH
2819: LD_INT 27
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2832: LD_ADDR_EXP 35
2836: PUSH
2837: LD_EXP 35
2841: PUSH
2842: LD_VAR 0 3
2846: UNION
2847: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2848: LD_VAR 0 3
2852: PPUSH
2853: LD_EXP 33
2857: PPUSH
2858: CALL_OW 119
// end ;
2862: GO 2785
2864: POP
2865: POP
// PrepareHuman ( false , 2 , 2 ) ;
2866: LD_INT 0
2868: PPUSH
2869: LD_INT 2
2871: PPUSH
2872: LD_INT 2
2874: PPUSH
2875: CALL_OW 380
// un := CreateHuman ;
2879: LD_ADDR_VAR 0 3
2883: PUSH
2884: CALL_OW 44
2888: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2889: LD_VAR 0 3
2893: PPUSH
2894: LD_INT 108
2896: PPUSH
2897: LD_INT 62
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2910: LD_ADDR_EXP 35
2914: PUSH
2915: LD_EXP 35
2919: PUSH
2920: LD_VAR 0 3
2924: UNION
2925: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_EXP 33
2935: PPUSH
2936: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2940: LD_INT 109
2942: PPUSH
2943: LD_INT 63
2945: PPUSH
2946: LD_INT 2
2948: PPUSH
2949: LD_INT 15
2951: NEG
2952: PPUSH
2953: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2957: LD_INT 109
2959: PPUSH
2960: LD_INT 63
2962: PPUSH
2963: LD_INT 2
2965: PPUSH
2966: CALL_OW 331
// end ;
2970: LD_VAR 0 1
2974: RET
// export function PrepareIbrahim ( x , y ) ; begin
2975: LD_INT 0
2977: PPUSH
// uc_side := 6 ;
2978: LD_ADDR_OWVAR 20
2982: PUSH
2983: LD_INT 6
2985: ST_TO_ADDR
// uc_nation := 3 ;
2986: LD_ADDR_OWVAR 21
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2994: LD_ADDR_EXP 34
2998: PUSH
2999: LD_STRING IbrahimRu
3001: PPUSH
3002: LD_INT 0
3004: PPUSH
3005: LD_STRING 
3007: PPUSH
3008: CALL 251 0 3
3012: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
3013: LD_EXP 34
3017: PPUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_VAR 0 2
3027: PPUSH
3028: LD_INT 8
3030: PPUSH
3031: LD_INT 1
3033: PPUSH
3034: CALL_OW 50
// end ;
3038: LD_VAR 0 3
3042: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
3043: LD_EXP 33
3047: PUSH
3048: LD_EXP 36
3052: ADD
3053: PPUSH
3054: LD_INT 95
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 72
3068: IFFALSE 3124
3070: GO 3072
3072: DISABLE
3073: LD_INT 0
3075: PPUSH
// begin enable ;
3076: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
3077: LD_ADDR_VAR 0 1
3081: PUSH
3082: LD_EXP 33
3086: PUSH
3087: LD_EXP 36
3091: ADD
3092: PPUSH
3093: LD_INT 95
3095: PUSH
3096: LD_INT 3
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 72
3107: PUSH
3108: FOR_IN
3109: IFFALSE 3122
// RemoveUnit ( i ) ;
3111: LD_VAR 0 1
3115: PPUSH
3116: CALL_OW 64
3120: GO 3108
3122: POP
3123: POP
// end ;
3124: PPOPN 1
3126: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
3127: LD_EXP 3
3131: PUSH
3132: LD_EXP 32
3136: PPUSH
3137: LD_INT 4
3139: PPUSH
3140: CALL_OW 308
3144: AND
3145: IFFALSE 3928
3147: GO 3149
3149: DISABLE
3150: LD_INT 0
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
3156: LD_EXP 32
3160: PPUSH
3161: LD_INT 110
3163: PPUSH
3164: LD_INT 60
3166: PPUSH
3167: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
3171: LD_EXP 32
3175: PPUSH
3176: LD_INT 110
3178: PPUSH
3179: LD_INT 61
3181: PPUSH
3182: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3186: LD_ADDR_VAR 0 2
3190: PUSH
3191: LD_EXP 35
3195: PPUSH
3196: LD_INT 25
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 72
3210: ST_TO_ADDR
// if tmp then
3211: LD_VAR 0 2
3215: IFFALSE 3309
// begin for i := 1 to 2 do
3217: LD_ADDR_VAR 0 1
3221: PUSH
3222: DOUBLE
3223: LD_INT 1
3225: DEC
3226: ST_TO_ADDR
3227: LD_INT 2
3229: PUSH
3230: FOR_TO
3231: IFFALSE 3307
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
3233: LD_VAR 0 2
3237: PUSH
3238: LD_VAR 0 1
3242: ARRAY
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
3251: LD_VAR 0 2
3255: PUSH
3256: LD_VAR 0 1
3260: ARRAY
3261: PPUSH
3262: LD_INT 2
3264: PPUSH
3265: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
3269: LD_VAR 0 2
3273: PUSH
3274: LD_VAR 0 1
3278: ARRAY
3279: PPUSH
3280: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
3284: LD_VAR 0 2
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PPUSH
3295: LD_INT 107
3297: PPUSH
3298: LD_INT 66
3300: PPUSH
3301: CALL_OW 171
// end ;
3305: GO 3230
3307: POP
3308: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: LD_EXP 35
3318: PPUSH
3319: LD_INT 25
3321: PUSH
3322: LD_INT 2
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 72
3333: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3334: LD_INT 35
3336: PPUSH
3337: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3341: LD_ADDR_VAR 0 2
3345: PUSH
3346: LD_EXP 35
3350: PPUSH
3351: LD_INT 25
3353: PUSH
3354: LD_INT 2
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 72
3365: ST_TO_ADDR
// until tmp ;
3366: LD_VAR 0 2
3370: IFFALSE 3334
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 31
3379: PPUSH
3380: LD_INT 102
3382: PPUSH
3383: LD_INT 69
3385: PPUSH
3386: LD_INT 2
3388: PPUSH
3389: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
3393: LD_INT 35
3395: PPUSH
3396: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3400: LD_EXP 35
3404: PPUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 60
3410: PUSH
3411: EMPTY
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: LD_INT 25
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PPUSH
3432: CALL_OW 72
3436: IFFALSE 3393
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: LD_EXP 35
3447: PPUSH
3448: LD_INT 25
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: CALL_OW 72
3462: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
3463: LD_VAR 0 2
3467: PPUSH
3468: LD_INT 4
3470: PPUSH
3471: LD_INT 116
3473: PPUSH
3474: LD_INT 70
3476: PPUSH
3477: LD_INT 5
3479: PPUSH
3480: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
3484: LD_VAR 0 2
3488: PPUSH
3489: LD_INT 31
3491: PPUSH
3492: LD_INT 108
3494: PPUSH
3495: LD_INT 50
3497: PPUSH
3498: LD_INT 2
3500: PPUSH
3501: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
3505: LD_INT 35
3507: PPUSH
3508: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
3512: LD_INT 22
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: PUSH
3522: LD_INT 30
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PUSH
3532: LD_INT 3
3534: PUSH
3535: LD_INT 57
3537: PUSH
3538: EMPTY
3539: LIST
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: PPUSH
3550: CALL_OW 69
3554: IFFALSE 3505
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
3556: LD_ADDR_VAR 0 3
3560: PUSH
3561: LD_INT 22
3563: PUSH
3564: LD_INT 5
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 30
3573: PUSH
3574: LD_INT 4
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 3
3583: PUSH
3584: LD_INT 57
3586: PUSH
3587: EMPTY
3588: LIST
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PPUSH
3599: CALL_OW 69
3603: PUSH
3604: LD_INT 1
3606: ARRAY
3607: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: LD_EXP 35
3617: PPUSH
3618: LD_INT 25
3620: PUSH
3621: LD_INT 1
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: CALL_OW 72
3632: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
3633: LD_VAR 0 2
3637: PPUSH
3638: LD_VAR 0 3
3642: PPUSH
3643: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
3654: LD_INT 22
3656: PUSH
3657: LD_INT 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 30
3666: PUSH
3667: LD_INT 31
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: LD_INT 57
3679: PUSH
3680: EMPTY
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: LD_INT 2
3699: GREATEREQUAL
3700: IFFALSE 3647
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3702: LD_ADDR_VAR 0 2
3706: PUSH
3707: LD_EXP 35
3711: PPUSH
3712: LD_INT 25
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 72
3726: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
3727: LD_VAR 0 2
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_INT 5
3738: PPUSH
3739: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
3743: LD_VAR 0 2
3747: PUSH
3748: LD_INT 2
3750: ARRAY
3751: PUSH
3752: LD_VAR 0 2
3756: PUSH
3757: LD_INT 3
3759: ARRAY
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PPUSH
3765: LD_VAR 0 3
3769: PPUSH
3770: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
3774: LD_VAR 0 2
3778: PUSH
3779: LD_INT 2
3781: ARRAY
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: ARRAY
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
3803: LD_VAR 0 2
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: PUSH
3812: LD_VAR 0 2
3816: PUSH
3817: LD_INT 3
3819: ARRAY
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_INT 22
3836: PUSH
3837: LD_INT 5
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 30
3846: PUSH
3847: LD_INT 31
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: CALL_OW 69
3862: ST_TO_ADDR
// for i := 1 to 2 do
3863: LD_ADDR_VAR 0 1
3867: PUSH
3868: DOUBLE
3869: LD_INT 1
3871: DEC
3872: ST_TO_ADDR
3873: LD_INT 2
3875: PUSH
3876: FOR_TO
3877: IFFALSE 3911
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3879: LD_VAR 0 2
3883: PUSH
3884: LD_VAR 0 1
3888: PUSH
3889: LD_INT 1
3891: PLUS
3892: ARRAY
3893: PPUSH
3894: LD_VAR 0 4
3898: PUSH
3899: LD_VAR 0 1
3903: ARRAY
3904: PPUSH
3905: CALL_OW 180
3909: GO 3876
3911: POP
3912: POP
// wait ( 1 1$00 ) ;
3913: LD_INT 2100
3915: PPUSH
3916: CALL_OW 67
// farmerBaseReady := true ;
3920: LD_ADDR_EXP 4
3924: PUSH
3925: LD_INT 1
3927: ST_TO_ADDR
// end ;
3928: PPOPN 4
3930: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , damagedBuilding ;
3931: LD_EXP 4
3935: PUSH
3936: LD_EXP 10
3940: NOT
3941: AND
3942: IFFALSE 4262
3944: GO 3946
3946: DISABLE
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
3951: PPUSH
// begin enable ;
3952: ENABLE
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3953: LD_ADDR_VAR 0 2
3957: PUSH
3958: LD_EXP 35
3962: PPUSH
3963: LD_INT 25
3965: PUSH
3966: LD_INT 2
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PPUSH
3973: CALL_OW 72
3977: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 22
3985: PUSH
3986: LD_INT 5
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 21
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: LD_INT 24
4008: PUSH
4009: LD_INT 1000
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 69
4029: ST_TO_ADDR
// if not eng then
4030: LD_VAR 0 2
4034: NOT
4035: IFFALSE 4127
// begin uc_side := 5 ;
4037: LD_ADDR_OWVAR 20
4041: PUSH
4042: LD_INT 5
4044: ST_TO_ADDR
// uc_nation := 2 ;
4045: LD_ADDR_OWVAR 21
4049: PUSH
4050: LD_INT 2
4052: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
4053: LD_INT 0
4055: PPUSH
4056: LD_INT 2
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: CALL_OW 380
// eng := CreateHuman ;
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
4076: LD_VAR 0 2
4080: PPUSH
4081: LD_INT 102
4083: PPUSH
4084: LD_INT 8
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 110
4101: PPUSH
4102: LD_INT 60
4104: PPUSH
4105: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
4109: LD_ADDR_EXP 35
4113: PUSH
4114: LD_EXP 35
4118: PUSH
4119: LD_VAR 0 2
4123: UNION
4124: ST_TO_ADDR
// end else
4125: GO 4262
// begin for i in eng do
4127: LD_ADDR_VAR 0 1
4131: PUSH
4132: LD_VAR 0 2
4136: PUSH
4137: FOR_IN
4138: IFFALSE 4260
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
4140: LD_INT 10
4142: PPUSH
4143: LD_INT 1
4145: PPUSH
4146: CALL_OW 287
4150: IFFALSE 4174
// begin if IsInUnit ( i ) then
4152: LD_VAR 0 1
4156: PPUSH
4157: CALL_OW 310
4161: IFFALSE 4172
// ComExitBuilding ( i ) ;
4163: LD_VAR 0 1
4167: PPUSH
4168: CALL_OW 122
// end else
4172: GO 4258
// begin if damagedBuilding then
4174: LD_VAR 0 3
4178: IFFALSE 4222
// begin if IsInUnit ( i ) then
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 310
4189: IFFALSE 4202
// ComExitBuilding ( i ) else
4191: LD_VAR 0 1
4195: PPUSH
4196: CALL_OW 122
4200: GO 4220
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_VAR 0 3
4211: PUSH
4212: LD_INT 1
4214: ARRAY
4215: PPUSH
4216: CALL_OW 130
// end else
4220: GO 4258
// if not IsInUnit ( i ) and not HasTask ( i ) then
4222: LD_VAR 0 1
4226: PPUSH
4227: CALL_OW 310
4231: NOT
4232: PUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 314
4242: NOT
4243: AND
4244: IFFALSE 4258
// ComEnterUnit ( i , arDepot ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_INT 5
4253: PPUSH
4254: CALL_OW 120
// end ; end ;
4258: GO 4137
4260: POP
4261: POP
// end ; end ;
4262: PPOPN 3
4264: END
// export function StartCargoEvacuation ; begin
4265: LD_INT 0
4267: PPUSH
// while GetResourceType ( GetBase ( arDepot ) , mat_cans ) > 0 and omarCargoCounter > 0 do
4268: LD_INT 5
4270: PPUSH
4271: CALL_OW 274
4275: PPUSH
4276: LD_INT 1
4278: PPUSH
4279: CALL_OW 275
4283: PUSH
4284: LD_INT 0
4286: GREATER
4287: PUSH
4288: LD_EXP 17
4292: PUSH
4293: LD_INT 0
4295: GREATER
4296: AND
4297: IFFALSE 4589
// begin wait ( 1 1$20 ) ;
4299: LD_INT 2800
4301: PPUSH
4302: CALL_OW 67
// omarCargo := PrepareCargo ;
4306: LD_ADDR_EXP 39
4310: PUSH
4311: CALL 4594 0 0
4315: ST_TO_ADDR
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4316: LD_EXP 39
4320: PPUSH
4321: LD_INT 107
4323: PPUSH
4324: LD_INT 59
4326: PPUSH
4327: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4331: LD_INT 35
4333: PPUSH
4334: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4338: LD_EXP 39
4342: PPUSH
4343: LD_INT 107
4345: PPUSH
4346: LD_INT 59
4348: PPUSH
4349: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4353: LD_EXP 39
4357: PPUSH
4358: CALL_OW 302
4362: NOT
4363: PUSH
4364: LD_EXP 39
4368: PPUSH
4369: CALL_OW 301
4373: OR
4374: IFFALSE 4378
// continue ;
4376: GO 4331
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
4378: LD_EXP 39
4382: PPUSH
4383: LD_INT 107
4385: PPUSH
4386: LD_INT 59
4388: PPUSH
4389: CALL_OW 307
4393: PUSH
4394: LD_EXP 39
4398: PPUSH
4399: LD_INT 5
4401: PPUSH
4402: CALL_OW 296
4406: PUSH
4407: LD_INT 6
4409: LESS
4410: OR
4411: IFFALSE 4331
// wait ( 0 0$05 ) ;
4413: LD_INT 175
4415: PPUSH
4416: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
4420: LD_EXP 39
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: LD_INT 100
4430: PPUSH
4431: CALL_OW 290
// SetResourceType ( GetBase ( arDepot ) , mat_cans , GetResourceType ( GetBase ( arDepot ) , mat_cans ) - 100 ) ;
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 274
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_INT 5
4448: PPUSH
4449: CALL_OW 274
4453: PPUSH
4454: LD_INT 1
4456: PPUSH
4457: CALL_OW 275
4461: PUSH
4462: LD_INT 100
4464: MINUS
4465: PPUSH
4466: CALL_OW 277
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
4470: LD_EXP 39
4474: PPUSH
4475: LD_INT 103
4477: PPUSH
4478: LD_INT 9
4480: PPUSH
4481: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4485: LD_INT 35
4487: PPUSH
4488: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
4492: LD_EXP 39
4496: PPUSH
4497: LD_INT 103
4499: PPUSH
4500: LD_INT 9
4502: PPUSH
4503: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4507: LD_EXP 39
4511: PPUSH
4512: CALL_OW 302
4516: NOT
4517: PUSH
4518: LD_EXP 39
4522: PPUSH
4523: CALL_OW 301
4527: OR
4528: IFFALSE 4532
// continue ;
4530: GO 4485
// until IsInArea ( omarCargo , northRoad ) and GetCargo ( omarCargo , mat_cans ) > 0 ;
4532: LD_EXP 39
4536: PPUSH
4537: LD_INT 3
4539: PPUSH
4540: CALL_OW 308
4544: PUSH
4545: LD_EXP 39
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: CALL_OW 289
4557: PUSH
4558: LD_INT 0
4560: GREATER
4561: AND
4562: IFFALSE 4485
// RemoveUnit ( omarCargo ) ;
4564: LD_EXP 39
4568: PPUSH
4569: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
4573: LD_ADDR_EXP 17
4577: PUSH
4578: LD_EXP 17
4582: PUSH
4583: LD_INT 1
4585: MINUS
4586: ST_TO_ADDR
// end ;
4587: GO 4268
// end ;
4589: LD_VAR 0 1
4593: RET
// export function PrepareCargo ; var un , veh ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
4598: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4599: LD_ADDR_VAR 0 3
4603: PUSH
4604: LD_INT 5
4606: PPUSH
4607: LD_INT 2
4609: PPUSH
4610: LD_INT 13
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: LD_INT 32
4621: PPUSH
4622: LD_INT 80
4624: PPUSH
4625: CALL 314 0 7
4629: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_INT 4
4637: PPUSH
4638: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: LD_INT 101
4649: PPUSH
4650: LD_INT 8
4652: PPUSH
4653: LD_INT 0
4655: PPUSH
4656: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4660: LD_INT 0
4662: PPUSH
4663: LD_INT 3
4665: PPUSH
4666: LD_INT 2
4668: PPUSH
4669: CALL_OW 380
// un := CreateHuman ;
4673: LD_ADDR_VAR 0 2
4677: PUSH
4678: CALL_OW 44
4682: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4683: LD_VAR 0 2
4687: PPUSH
4688: LD_VAR 0 3
4692: PPUSH
4693: CALL_OW 52
// result := veh ;
4697: LD_ADDR_VAR 0 1
4701: PUSH
4702: LD_VAR 0 3
4706: ST_TO_ADDR
// end ; end_of_file
4707: LD_VAR 0 1
4711: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
4716: PPUSH
// usForces := [ ] ;
4717: LD_ADDR_EXP 40
4721: PUSH
4722: EMPTY
4723: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4724: LD_ADDR_EXP 42
4728: PUSH
4729: LD_INT 6
4731: PUSH
4732: LD_INT 32
4734: PUSH
4735: LD_INT 27
4737: PUSH
4738: LD_INT 1
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 4
4749: PUSH
4750: LD_INT 43
4752: PUSH
4753: LD_INT 24
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 27
4767: PUSH
4768: LD_INT 29
4770: PUSH
4771: LD_INT 21
4773: PUSH
4774: LD_INT 0
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4788: LD_INT 11
4790: PPUSH
4791: CALL_OW 274
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: LD_INT 150
4801: PUSH
4802: LD_INT 120
4804: PUSH
4805: LD_INT 100
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: LD_OWVAR 67
4817: ARRAY
4818: PPUSH
4819: CALL_OW 277
// if Difficulty = 1 then
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 1
4830: EQUAL
4831: IFFALSE 4840
// RemoveUnit ( hillBun ) ;
4833: LD_INT 14
4835: PPUSH
4836: CALL_OW 64
// uc_side := 1 ;
4840: LD_ADDR_OWVAR 20
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// uc_nation := 1 ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// hc_gallery :=  ;
4856: LD_ADDR_OWVAR 33
4860: PUSH
4861: LD_STRING 
4863: ST_TO_ADDR
// hc_name :=  ;
4864: LD_ADDR_OWVAR 26
4868: PUSH
4869: LD_STRING 
4871: ST_TO_ADDR
// hc_importance := 0 ;
4872: LD_ADDR_OWVAR 32
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4880: LD_INT 1
4882: PPUSH
4883: LD_INT 1
4885: PPUSH
4886: LD_INT 3
4888: PPUSH
4889: CALL_OW 380
// usCommander := CreateHuman ;
4893: LD_ADDR_EXP 41
4897: PUSH
4898: CALL_OW 44
4902: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4903: LD_EXP 41
4907: PPUSH
4908: LD_INT 11
4910: PPUSH
4911: CALL_OW 52
// if hillBun then
4915: LD_INT 14
4917: IFFALSE 4999
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4919: LD_INT 0
4921: PPUSH
4922: LD_INT 1
4924: PPUSH
4925: LD_INT 1
4927: PUSH
4928: LD_INT 2
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_OWVAR 67
4943: ARRAY
4944: PPUSH
4945: CALL_OW 380
// un := CreateHuman ;
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: CALL_OW 44
4958: ST_TO_ADDR
// usForces := usForces union un ;
4959: LD_ADDR_EXP 40
4963: PUSH
4964: LD_EXP 40
4968: PUSH
4969: LD_VAR 0 3
4973: UNION
4974: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4975: LD_VAR 0 3
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4987: LD_VAR 0 3
4991: PPUSH
4992: LD_INT 14
4994: PPUSH
4995: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4999: LD_ADDR_VAR 0 2
5003: PUSH
5004: DOUBLE
5005: LD_INT 1
5007: DEC
5008: ST_TO_ADDR
5009: LD_INT 2
5011: PUSH
5012: LD_INT 3
5014: PUSH
5015: LD_INT 4
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: PUSH
5023: LD_OWVAR 67
5027: ARRAY
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5172
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: LD_INT 1
5040: PUSH
5041: LD_INT 2
5043: PUSH
5044: LD_INT 3
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: PUSH
5052: LD_OWVAR 67
5056: ARRAY
5057: PPUSH
5058: CALL_OW 380
// un := CreateHuman ;
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: CALL_OW 44
5071: ST_TO_ADDR
// usForces := usForces union un ;
5072: LD_ADDR_EXP 40
5076: PUSH
5077: LD_EXP 40
5081: PUSH
5082: LD_VAR 0 3
5086: UNION
5087: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5088: LD_VAR 0 3
5092: PPUSH
5093: LD_INT 39
5095: PPUSH
5096: LD_INT 24
5098: PPUSH
5099: LD_INT 4
5101: PPUSH
5102: LD_INT 0
5104: PPUSH
5105: CALL_OW 50
// if i < 3 then
5109: LD_VAR 0 2
5113: PUSH
5114: LD_INT 3
5116: LESS
5117: IFFALSE 5170
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
5119: LD_VAR 0 3
5123: PPUSH
5124: LD_INT 22
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 58
5136: PUSH
5137: EMPTY
5138: LIST
5139: PUSH
5140: LD_INT 30
5142: PUSH
5143: LD_INT 31
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 69
5159: PUSH
5160: LD_VAR 0 2
5164: ARRAY
5165: PPUSH
5166: CALL_OW 120
// end ;
5170: GO 5029
5172: POP
5173: POP
// for i := 1 to 2 do
5174: LD_ADDR_VAR 0 2
5178: PUSH
5179: DOUBLE
5180: LD_INT 1
5182: DEC
5183: ST_TO_ADDR
5184: LD_INT 2
5186: PUSH
5187: FOR_TO
5188: IFFALSE 5252
// begin PrepareHuman ( false , 2 , 2 ) ;
5190: LD_INT 0
5192: PPUSH
5193: LD_INT 2
5195: PPUSH
5196: LD_INT 2
5198: PPUSH
5199: CALL_OW 380
// un := CreateHuman ;
5203: LD_ADDR_VAR 0 3
5207: PUSH
5208: CALL_OW 44
5212: ST_TO_ADDR
// usForces := usForces union un ;
5213: LD_ADDR_EXP 40
5217: PUSH
5218: LD_EXP 40
5222: PUSH
5223: LD_VAR 0 3
5227: UNION
5228: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5229: LD_VAR 0 3
5233: PPUSH
5234: LD_INT 39
5236: PPUSH
5237: LD_INT 24
5239: PPUSH
5240: LD_INT 4
5242: PPUSH
5243: LD_INT 0
5245: PPUSH
5246: CALL_OW 50
// end ;
5250: GO 5187
5252: POP
5253: POP
// PrepareHuman ( false , 4 , 1 ) ;
5254: LD_INT 0
5256: PPUSH
5257: LD_INT 4
5259: PPUSH
5260: LD_INT 1
5262: PPUSH
5263: CALL_OW 380
// un := CreateHuman ;
5267: LD_ADDR_VAR 0 3
5271: PUSH
5272: CALL_OW 44
5276: ST_TO_ADDR
// usForces := usForces union un ;
5277: LD_ADDR_EXP 40
5281: PUSH
5282: LD_EXP 40
5286: PUSH
5287: LD_VAR 0 3
5291: UNION
5292: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5293: LD_VAR 0 3
5297: PPUSH
5298: LD_INT 39
5300: PPUSH
5301: LD_INT 24
5303: PPUSH
5304: LD_INT 4
5306: PPUSH
5307: LD_INT 0
5309: PPUSH
5310: CALL_OW 50
// end ;
5314: LD_VAR 0 1
5318: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
5319: LD_EXP 40
5323: PUSH
5324: LD_EXP 6
5328: NOT
5329: AND
5330: IFFALSE 5761
5332: GO 5334
5334: DISABLE
5335: LD_INT 0
5337: PPUSH
5338: PPUSH
5339: PPUSH
5340: PPUSH
5341: PPUSH
// begin enable ;
5342: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
5343: LD_ADDR_VAR 0 3
5347: PUSH
5348: LD_EXP 40
5352: PPUSH
5353: LD_INT 25
5355: PUSH
5356: LD_INT 2
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
5368: LD_ADDR_VAR 0 4
5372: PUSH
5373: LD_EXP 40
5377: PPUSH
5378: LD_INT 25
5380: PUSH
5381: LD_INT 1
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PPUSH
5388: CALL_OW 72
5392: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
5393: LD_ADDR_VAR 0 5
5397: PUSH
5398: LD_EXP 40
5402: PPUSH
5403: LD_INT 25
5405: PUSH
5406: LD_INT 4
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PPUSH
5413: CALL_OW 72
5417: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
5418: LD_INT 7
5420: PPUSH
5421: LD_INT 22
5423: PUSH
5424: LD_INT 2
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PPUSH
5431: CALL_OW 70
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5515
// for i in sol do
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_VAR 0 4
5450: PUSH
5451: FOR_IN
5452: IFFALSE 5513
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
5454: LD_VAR 0 1
5458: PPUSH
5459: CALL_OW 310
5463: NOT
5464: PUSH
5465: LD_VAR 0 1
5469: PPUSH
5470: CALL_OW 310
5474: PPUSH
5475: CALL_OW 266
5479: PUSH
5480: LD_INT 4
5482: EQUAL
5483: NOT
5484: OR
5485: IFFALSE 5511
// begin ComExitBuilding ( i ) ;
5487: LD_VAR 0 1
5491: PPUSH
5492: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
5496: LD_VAR 0 1
5500: PPUSH
5501: LD_INT 37
5503: PPUSH
5504: LD_INT 23
5506: PPUSH
5507: CALL_OW 174
// end ;
5511: GO 5451
5513: POP
5514: POP
// if eng then
5515: LD_VAR 0 3
5519: IFFALSE 5761
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: LD_INT 22
5528: PUSH
5529: LD_INT 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 95
5538: PUSH
5539: LD_INT 7
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 24
5561: PUSH
5562: LD_INT 1000
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: ST_TO_ADDR
// if b then
5584: LD_VAR 0 2
5588: IFFALSE 5619
// begin ComExitBuilding ( eng ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5599: LD_VAR 0 3
5603: PPUSH
5604: LD_VAR 0 2
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: CALL_OW 190
// end else
5617: GO 5761
// begin for i in eng do
5619: LD_ADDR_VAR 0 1
5623: PUSH
5624: LD_VAR 0 3
5628: PUSH
5629: FOR_IN
5630: IFFALSE 5759
// if not HasTask ( i ) then
5632: LD_VAR 0 1
5636: PPUSH
5637: CALL_OW 314
5641: NOT
5642: IFFALSE 5757
// begin if americanBuildList then
5644: LD_EXP 42
5648: IFFALSE 5733
// begin if IsInUnit ( i ) then
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL_OW 310
5659: IFFALSE 5670
// ComExitBuilding ( i ) ;
5661: LD_VAR 0 1
5665: PPUSH
5666: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_EXP 42
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PUSH
5684: LD_INT 1
5686: ARRAY
5687: PPUSH
5688: LD_EXP 42
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PUSH
5697: LD_INT 2
5699: ARRAY
5700: PPUSH
5701: LD_EXP 42
5705: PUSH
5706: LD_INT 1
5708: ARRAY
5709: PUSH
5710: LD_INT 3
5712: ARRAY
5713: PPUSH
5714: LD_EXP 42
5718: PUSH
5719: LD_INT 1
5721: ARRAY
5722: PUSH
5723: LD_INT 4
5725: ARRAY
5726: PPUSH
5727: CALL_OW 205
// end else
5731: GO 5757
// if not IsInUnit ( i ) then
5733: LD_VAR 0 1
5737: PPUSH
5738: CALL_OW 310
5742: NOT
5743: IFFALSE 5757
// ComEnterUnit ( i , usDepot ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_INT 11
5752: PPUSH
5753: CALL_OW 120
// end ;
5757: GO 5629
5759: POP
5760: POP
// end ; end ; end ;
5761: PPOPN 5
5763: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5764: LD_INT 0
5766: PPUSH
5767: PPUSH
5768: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5769: LD_ADDR_VAR 0 3
5773: PUSH
5774: LD_INT 35
5776: PUSH
5777: LD_INT 45
5779: PUSH
5780: LD_INT 48
5782: PUSH
5783: LD_EXP 51
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// for i in tech do
5794: LD_ADDR_VAR 0 4
5798: PUSH
5799: LD_VAR 0 3
5803: PUSH
5804: FOR_IN
5805: IFFALSE 5823
// AddComResearch ( lab , i ) ;
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: CALL_OW 184
5821: GO 5804
5823: POP
5824: POP
// end ;
5825: LD_VAR 0 2
5829: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5830: LD_EXP 11
5834: PUSH
5835: LD_EXP 19
5839: PUSH
5840: LD_EXP 23
5844: LESSEQUAL
5845: AND
5846: IFFALSE 5871
5848: GO 5850
5850: DISABLE
// begin enable ;
5851: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5852: LD_INT 35
5854: PPUSH
5855: LD_INT 2065
5857: PPUSH
5858: CALL_OW 12
5862: PPUSH
5863: CALL_OW 67
// SendConvoy ;
5867: CALL 5969 0 0
// end ;
5871: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5872: LD_EXP 6
5876: PUSH
5877: LD_EXP 15
5881: AND
5882: IFFALSE 5968
5884: GO 5886
5886: DISABLE
// begin if americanHasEscaped then
5887: LD_EXP 7
5891: IFFALSE 5902
// wait ( 3 3$20 ) else
5893: LD_INT 7000
5895: PPUSH
5896: CALL_OW 67
5900: GO 5909
// wait ( 6 6$40 ) ;
5902: LD_INT 14000
5904: PPUSH
5905: CALL_OW 67
// SendAttack ;
5909: CALL 6684 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5913: LD_INT 14000
5915: PUSH
5916: LD_INT 11900
5918: PUSH
5919: LD_INT 9800
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: PPUSH
5933: CALL_OW 67
// SendAttack ;
5937: CALL 6684 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5941: LD_EXP 16
5945: PUSH
5946: LD_INT 6
5948: PUSH
5949: LD_INT 7
5951: PUSH
5952: LD_INT 8
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_OWVAR 67
5964: ARRAY
5965: LESS
5966: IFFALSE 5913
// end ;
5968: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5969: LD_INT 0
5971: PPUSH
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// road := rand ( 1 , 2 ) ;
5979: LD_ADDR_VAR 0 4
5983: PUSH
5984: LD_INT 1
5986: PPUSH
5987: LD_INT 2
5989: PPUSH
5990: CALL_OW 12
5994: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5995: LD_ADDR_VAR 0 8
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: LD_INT 8
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: LD_VAR 0 4
6014: ARRAY
6015: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
6016: LD_ADDR_VAR 0 5
6020: PUSH
6021: LD_INT 35
6023: PUSH
6024: LD_INT 66
6026: PUSH
6027: LD_INT 1
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 101
6037: PUSH
6038: LD_INT 8
6040: PUSH
6041: LD_INT 4
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
6053: LD_ADDR_VAR 0 6
6057: PUSH
6058: LD_INT 34
6060: PUSH
6061: LD_INT 67
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 38
6070: PUSH
6071: LD_INT 62
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 43
6080: PUSH
6081: LD_INT 54
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 57
6090: PUSH
6091: LD_INT 57
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: LD_INT 77
6100: PUSH
6101: LD_INT 71
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 86
6110: PUSH
6111: LD_INT 60
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 89
6120: PUSH
6121: LD_INT 35
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 93
6130: PUSH
6131: LD_INT 17
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 97
6140: PUSH
6141: LD_INT 10
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 103
6150: PUSH
6151: LD_INT 9
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: ST_TO_ADDR
// if road = 2 then
6170: LD_VAR 0 4
6174: PUSH
6175: LD_INT 2
6177: EQUAL
6178: IFFALSE 6195
// points := ReverseArray ( points ) ;
6180: LD_ADDR_VAR 0 6
6184: PUSH
6185: LD_VAR 0 6
6189: PPUSH
6190: CALL 1002 0 1
6194: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
6195: LD_INT 4
6197: PPUSH
6198: LD_INT 1
6200: PPUSH
6201: LD_INT 2
6203: PPUSH
6204: LD_INT 1
6206: PPUSH
6207: LD_INT 1
6209: PPUSH
6210: LD_INT 12
6212: PPUSH
6213: LD_INT 80
6215: PPUSH
6216: CALL 314 0 7
// veh := CreateVehicle ;
6220: LD_ADDR_VAR 0 3
6224: PUSH
6225: CALL_OW 45
6229: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
6230: LD_VAR 0 3
6234: PPUSH
6235: LD_VAR 0 5
6239: PUSH
6240: LD_VAR 0 4
6244: ARRAY
6245: PUSH
6246: LD_INT 3
6248: ARRAY
6249: PPUSH
6250: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_VAR 0 5
6263: PUSH
6264: LD_VAR 0 4
6268: ARRAY
6269: PUSH
6270: LD_INT 1
6272: ARRAY
6273: PPUSH
6274: LD_VAR 0 5
6278: PUSH
6279: LD_VAR 0 4
6283: ARRAY
6284: PUSH
6285: LD_INT 2
6287: ARRAY
6288: PPUSH
6289: LD_INT 0
6291: PPUSH
6292: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
6296: LD_INT 0
6298: PPUSH
6299: LD_INT 1
6301: PPUSH
6302: LD_OWVAR 67
6306: PPUSH
6307: CALL_OW 380
// un := CreateHuman ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: CALL_OW 44
6320: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6321: LD_VAR 0 2
6325: PPUSH
6326: LD_VAR 0 3
6330: PPUSH
6331: CALL_OW 52
// if Prob ( 50 + tick mod 30 ) or convoyCounter < 3 then
6335: LD_INT 50
6337: PUSH
6338: LD_OWVAR 1
6342: PUSH
6343: LD_INT 30
6345: MOD
6346: PLUS
6347: PPUSH
6348: CALL_OW 13
6352: PUSH
6353: LD_EXP 19
6357: PUSH
6358: LD_INT 3
6360: LESS
6361: OR
6362: IFFALSE 6379
// SetCargo ( veh , mat_cans , 100 ) ;
6364: LD_VAR 0 3
6368: PPUSH
6369: LD_INT 1
6371: PPUSH
6372: LD_INT 100
6374: PPUSH
6375: CALL_OW 290
// for i := 2 to points do
6379: LD_ADDR_VAR 0 7
6383: PUSH
6384: DOUBLE
6385: LD_INT 2
6387: DEC
6388: ST_TO_ADDR
6389: LD_VAR 0 6
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6438
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
6397: LD_VAR 0 3
6401: PPUSH
6402: LD_VAR 0 6
6406: PUSH
6407: LD_VAR 0 7
6411: ARRAY
6412: PUSH
6413: LD_INT 1
6415: ARRAY
6416: PPUSH
6417: LD_VAR 0 6
6421: PUSH
6422: LD_VAR 0 7
6426: ARRAY
6427: PUSH
6428: LD_INT 2
6430: ARRAY
6431: PPUSH
6432: CALL_OW 171
6436: GO 6394
6438: POP
6439: POP
// convoyCounter := convoyCounter + 1 ;
6440: LD_ADDR_EXP 19
6444: PUSH
6445: LD_EXP 19
6449: PUSH
6450: LD_INT 1
6452: PLUS
6453: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6454: LD_INT 35
6456: PPUSH
6457: CALL_OW 67
// if not HasTask ( veh ) then
6461: LD_VAR 0 3
6465: PPUSH
6466: CALL_OW 314
6470: NOT
6471: IFFALSE 6512
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6473: LD_VAR 0 3
6477: PPUSH
6478: LD_VAR 0 6
6482: PUSH
6483: LD_VAR 0 6
6487: ARRAY
6488: PUSH
6489: LD_INT 1
6491: ARRAY
6492: PPUSH
6493: LD_VAR 0 6
6497: PUSH
6498: LD_VAR 0 6
6502: ARRAY
6503: PUSH
6504: LD_INT 2
6506: ARRAY
6507: PPUSH
6508: CALL_OW 111
// if not IsOk ( veh ) then
6512: LD_VAR 0 3
6516: PPUSH
6517: CALL_OW 302
6521: NOT
6522: IFFALSE 6563
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6524: LD_VAR 0 2
6528: PPUSH
6529: LD_VAR 0 6
6533: PUSH
6534: LD_VAR 0 6
6538: ARRAY
6539: PUSH
6540: LD_INT 1
6542: ARRAY
6543: PPUSH
6544: LD_VAR 0 6
6548: PUSH
6549: LD_VAR 0 6
6553: ARRAY
6554: PUSH
6555: LD_INT 2
6557: ARRAY
6558: PPUSH
6559: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6563: LD_VAR 0 3
6567: PPUSH
6568: LD_VAR 0 8
6572: PPUSH
6573: CALL_OW 308
6577: PUSH
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_VAR 0 8
6587: PPUSH
6588: CALL_OW 308
6592: OR
6593: IFFALSE 6454
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6595: LD_VAR 0 2
6599: PPUSH
6600: CALL_OW 302
6604: PUSH
6605: LD_VAR 0 3
6609: PPUSH
6610: CALL_OW 302
6614: NOT
6615: AND
6616: PUSH
6617: LD_VAR 0 2
6621: PPUSH
6622: LD_VAR 0 8
6626: PPUSH
6627: CALL_OW 308
6631: AND
6632: IFFALSE 6643
// RemoveUnit ( un ) ;
6634: LD_VAR 0 2
6638: PPUSH
6639: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6643: LD_VAR 0 3
6647: PPUSH
6648: LD_VAR 0 8
6652: PPUSH
6653: CALL_OW 308
6657: PUSH
6658: LD_VAR 0 3
6662: PPUSH
6663: CALL_OW 302
6667: AND
6668: IFFALSE 6679
// RemoveUnit ( veh ) ;
6670: LD_VAR 0 3
6674: PPUSH
6675: CALL_OW 64
// end ;
6679: LD_VAR 0 1
6683: RET
// export function SendAttack ; var un , veh , i ; begin
6684: LD_INT 0
6686: PPUSH
6687: PPUSH
6688: PPUSH
6689: PPUSH
// IncomingAttack ;
6690: CALL 14745 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6694: LD_INT 2100
6696: PPUSH
6697: LD_INT 3500
6699: PPUSH
6700: CALL_OW 12
6704: PPUSH
6705: CALL_OW 67
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] + attackWave div 3 do
6709: LD_ADDR_VAR 0 4
6713: PUSH
6714: DOUBLE
6715: LD_INT 1
6717: DEC
6718: ST_TO_ADDR
6719: LD_INT 3
6721: PUSH
6722: LD_INT 3
6724: PUSH
6725: LD_INT 4
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: PUSH
6733: LD_OWVAR 67
6737: ARRAY
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: LD_INT 3
6746: DIV
6747: PLUS
6748: PUSH
6749: FOR_TO
6750: IFFALSE 6862
// begin uc_side := 1 ;
6752: LD_ADDR_OWVAR 20
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// uc_nation := 1 ;
6760: LD_ADDR_OWVAR 21
6764: PUSH
6765: LD_INT 1
6767: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6768: LD_INT 0
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 2
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: PUSH
6788: LD_OWVAR 67
6792: ARRAY
6793: PPUSH
6794: CALL_OW 380
// un := CreateHuman ;
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: CALL_OW 44
6807: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6808: LD_VAR 0 2
6812: PPUSH
6813: LD_INT 37
6815: PPUSH
6816: LD_INT 70
6818: PPUSH
6819: LD_INT 3
6821: PPUSH
6822: LD_INT 0
6824: PPUSH
6825: CALL_OW 50
// usAttackers := usAttackers union un ;
6829: LD_ADDR_EXP 43
6833: PUSH
6834: LD_EXP 43
6838: PUSH
6839: LD_VAR 0 2
6843: UNION
6844: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6845: LD_VAR 0 2
6849: PPUSH
6850: LD_INT 40
6852: PPUSH
6853: LD_INT 65
6855: PPUSH
6856: CALL_OW 111
// end ;
6860: GO 6749
6862: POP
6863: POP
// uc_side := 1 ;
6864: LD_ADDR_OWVAR 20
6868: PUSH
6869: LD_INT 1
6871: ST_TO_ADDR
// uc_nation := 1 ;
6872: LD_ADDR_OWVAR 21
6876: PUSH
6877: LD_INT 1
6879: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6880: LD_INT 0
6882: PPUSH
6883: LD_INT 4
6885: PPUSH
6886: LD_INT 2
6888: PPUSH
6889: CALL_OW 380
// un := CreateHuman ;
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: CALL_OW 44
6902: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6903: LD_VAR 0 2
6907: PPUSH
6908: LD_INT 37
6910: PPUSH
6911: LD_INT 70
6913: PPUSH
6914: LD_INT 3
6916: PPUSH
6917: LD_INT 0
6919: PPUSH
6920: CALL_OW 50
// usAttackers := usAttackers union un ;
6924: LD_ADDR_EXP 43
6928: PUSH
6929: LD_EXP 43
6933: PUSH
6934: LD_VAR 0 2
6938: UNION
6939: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6940: LD_VAR 0 2
6944: PPUSH
6945: LD_INT 40
6947: PPUSH
6948: LD_INT 65
6950: PPUSH
6951: CALL_OW 111
// if attackWave > 1 or Difficulty > 1 then
6955: LD_EXP 16
6959: PUSH
6960: LD_INT 1
6962: GREATER
6963: PUSH
6964: LD_OWVAR 67
6968: PUSH
6969: LD_INT 1
6971: GREATER
6972: OR
6973: IFFALSE 7176
// begin for i := 1 to Difficulty + attackWave div 4 do
6975: LD_ADDR_VAR 0 4
6979: PUSH
6980: DOUBLE
6981: LD_INT 1
6983: DEC
6984: ST_TO_ADDR
6985: LD_OWVAR 67
6989: PUSH
6990: LD_EXP 16
6994: PUSH
6995: LD_INT 4
6997: DIV
6998: PLUS
6999: PUSH
7000: FOR_TO
7001: IFFALSE 7174
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
7003: LD_ADDR_VAR 0 3
7007: PUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_INT 1
7013: PPUSH
7014: LD_INT 2
7016: PPUSH
7017: LD_INT 2
7019: PPUSH
7020: LD_INT 1
7022: PPUSH
7023: LD_INT 4
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 2
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 1
7039: PPUSH
7040: LD_INT 3
7042: PPUSH
7043: CALL_OW 12
7047: ARRAY
7048: PPUSH
7049: LD_INT 90
7051: PPUSH
7052: CALL 314 0 7
7056: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
7057: LD_VAR 0 3
7061: PPUSH
7062: LD_INT 35
7064: PPUSH
7065: LD_INT 65
7067: PPUSH
7068: LD_INT 0
7070: PPUSH
7071: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
7075: LD_INT 0
7077: PPUSH
7078: LD_INT 3
7080: PPUSH
7081: LD_OWVAR 67
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: CALL_OW 380
// un := CreateHuman ;
7094: LD_ADDR_VAR 0 2
7098: PUSH
7099: CALL_OW 44
7103: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7104: LD_VAR 0 2
7108: PPUSH
7109: LD_VAR 0 3
7113: PPUSH
7114: CALL_OW 52
// usAttackers := usAttackers union un ;
7118: LD_ADDR_EXP 43
7122: PUSH
7123: LD_EXP 43
7127: PUSH
7128: LD_VAR 0 2
7132: UNION
7133: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
7134: LD_VAR 0 3
7138: PPUSH
7139: LD_INT 39
7141: PPUSH
7142: LD_INT 60
7144: PPUSH
7145: CALL_OW 111
// wait ( 0 0$2 ) ;
7149: LD_INT 70
7151: PPUSH
7152: CALL_OW 67
// usAttackers := usAttackers union veh ;
7156: LD_ADDR_EXP 43
7160: PUSH
7161: LD_EXP 43
7165: PUSH
7166: LD_VAR 0 3
7170: UNION
7171: ST_TO_ADDR
// end ;
7172: GO 7000
7174: POP
7175: POP
// end ; attackWave := attackWave + 1 ;
7176: LD_ADDR_EXP 16
7180: PUSH
7181: LD_EXP 16
7185: PUSH
7186: LD_INT 1
7188: PLUS
7189: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
7190: LD_EXP 20
7194: PPUSH
7195: CALL_OW 427
// end ;
7199: LD_VAR 0 1
7203: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
7204: LD_INT 0
7206: PPUSH
7207: PPUSH
7208: PPUSH
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
7216: PPUSH
// if retreatAllowed then
7217: LD_EXP 10
7221: IFFALSE 7233
// strategy := 2 else
7223: LD_ADDR_VAR 0 5
7227: PUSH
7228: LD_INT 2
7230: ST_TO_ADDR
7231: GO 7249
// strategy := rand ( 0 , 2 ) ;
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_INT 0
7240: PPUSH
7241: LD_INT 2
7243: PPUSH
7244: CALL_OW 12
7248: ST_TO_ADDR
// attackFormula := [ ] ;
7249: LD_ADDR_VAR 0 6
7253: PUSH
7254: EMPTY
7255: ST_TO_ADDR
// case strategy of 0 :
7256: LD_VAR 0 5
7260: PUSH
7261: LD_INT 0
7263: DOUBLE
7264: EQUAL
7265: IFTRUE 7269
7267: GO 7566
7269: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
7270: LD_INT 11
7272: PPUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 30
7285: PUSH
7286: LD_INT 4
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 70
7301: NOT
7302: IFFALSE 7363
// attackFormula := [ [ [ 41 , 34 ] ] , [ 33 , 46 ] , [ 41 , 34 ] , [ [ 39 , 53 ] ] ] else
7304: LD_ADDR_VAR 0 6
7308: PUSH
7309: LD_INT 41
7311: PUSH
7312: LD_INT 34
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: PUSH
7322: LD_INT 33
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 41
7334: PUSH
7335: LD_INT 34
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 39
7344: PUSH
7345: LD_INT 53
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: ST_TO_ADDR
7361: GO 7564
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7363: LD_INT 12
7365: PPUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 2
7378: PUSH
7379: LD_INT 30
7381: PUSH
7382: LD_INT 4
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 30
7391: PUSH
7392: LD_INT 31
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 30
7401: PUSH
7402: LD_INT 32
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PPUSH
7419: CALL_OW 70
7423: NOT
7424: IFFALSE 7496
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 33 , 46 ] , [ 41 , 34 ] , [ [ 39 , 53 ] ] ] else
7426: LD_ADDR_VAR 0 6
7430: PUSH
7431: LD_INT 27
7433: PUSH
7434: LD_INT 42
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 27
7443: PUSH
7444: LD_INT 32
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 33
7457: PUSH
7458: LD_INT 46
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 41
7467: PUSH
7468: LD_INT 34
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 39
7477: PUSH
7478: LD_INT 53
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: ST_TO_ADDR
7494: GO 7564
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 41 , 34 ] , [ [ 39 , 53 ] ] ] ;
7496: LD_ADDR_VAR 0 6
7500: PUSH
7501: LD_INT 71
7503: PUSH
7504: LD_INT 67
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 54
7513: PUSH
7514: LD_INT 35
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 63
7527: PUSH
7528: LD_INT 40
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: LD_INT 41
7537: PUSH
7538: LD_INT 34
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PUSH
7545: LD_INT 39
7547: PUSH
7548: LD_INT 53
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: EMPTY
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: ST_TO_ADDR
// end ; 1 :
7564: GO 7736
7566: LD_INT 1
7568: DOUBLE
7569: EQUAL
7570: IFTRUE 7574
7572: GO 7667
7574: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 63 , 40 ] , [ 41 , 34 ] , [ [ 39 , 53 ] ] ] ; 2 :
7575: LD_ADDR_VAR 0 6
7579: PUSH
7580: LD_INT 71
7582: PUSH
7583: LD_INT 67
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 82
7592: PUSH
7593: LD_INT 23
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 53
7602: PUSH
7603: LD_INT 7
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 43
7612: PUSH
7613: LD_INT 10
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 63
7628: PUSH
7629: LD_INT 40
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 41
7638: PUSH
7639: LD_INT 34
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 39
7648: PUSH
7649: LD_INT 53
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: ST_TO_ADDR
7665: GO 7736
7667: LD_INT 2
7669: DOUBLE
7670: EQUAL
7671: IFTRUE 7675
7673: GO 7735
7675: POP
// attackFormula := [ [ [ 95 , 61 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 95 , 61 ] ] ] ; end ;
7676: LD_ADDR_VAR 0 6
7680: PUSH
7681: LD_INT 95
7683: PUSH
7684: LD_INT 61
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: EMPTY
7692: LIST
7693: PUSH
7694: LD_INT 82
7696: PUSH
7697: LD_INT 75
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 73
7706: PUSH
7707: LD_INT 67
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 95
7716: PUSH
7717: LD_INT 61
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: EMPTY
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: ST_TO_ADDR
7733: GO 7736
7735: POP
// if not attackFormula then
7736: LD_VAR 0 6
7740: NOT
7741: IFFALSE 7745
// exit ;
7743: GO 9184
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7745: LD_ADDR_VAR 0 7
7749: PUSH
7750: LD_EXP 43
7754: PPUSH
7755: LD_INT 25
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 72
7769: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7770: LD_ADDR_VAR 0 8
7774: PUSH
7775: LD_EXP 43
7779: PPUSH
7780: LD_INT 25
7782: PUSH
7783: LD_INT 4
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 72
7794: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7795: LD_ADDR_VAR 0 9
7799: PUSH
7800: LD_EXP 43
7804: PPUSH
7805: LD_INT 25
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PPUSH
7815: CALL_OW 72
7819: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7820: LD_ADDR_VAR 0 10
7824: PUSH
7825: LD_EXP 43
7829: PPUSH
7830: LD_INT 21
7832: PUSH
7833: LD_INT 2
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 72
7844: ST_TO_ADDR
// if sci then
7845: LD_VAR 0 8
7849: IFFALSE 7886
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7851: LD_VAR 0 8
7855: PPUSH
7856: LD_VAR 0 6
7860: PUSH
7861: LD_INT 2
7863: ARRAY
7864: PUSH
7865: LD_INT 1
7867: ARRAY
7868: PPUSH
7869: LD_VAR 0 6
7873: PUSH
7874: LD_INT 2
7876: ARRAY
7877: PUSH
7878: LD_INT 2
7880: ARRAY
7881: PPUSH
7882: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7886: LD_INT 35
7888: PPUSH
7889: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7893: LD_ADDR_VAR 0 7
7897: PUSH
7898: LD_EXP 43
7902: PPUSH
7903: LD_INT 25
7905: PUSH
7906: LD_INT 1
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PPUSH
7913: CALL_OW 72
7917: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7918: LD_ADDR_VAR 0 8
7922: PUSH
7923: LD_EXP 43
7927: PPUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 4
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PPUSH
7938: CALL_OW 72
7942: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7943: LD_ADDR_VAR 0 9
7947: PUSH
7948: LD_EXP 43
7952: PPUSH
7953: LD_INT 25
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PPUSH
7963: CALL_OW 72
7967: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7968: LD_ADDR_VAR 0 10
7972: PUSH
7973: LD_EXP 43
7977: PPUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 2
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 72
7992: ST_TO_ADDR
// if sol then
7993: LD_VAR 0 7
7997: IFFALSE 8383
// begin for i in sol do
7999: LD_ADDR_VAR 0 2
8003: PUSH
8004: LD_VAR 0 7
8008: PUSH
8009: FOR_IN
8010: IFFALSE 8381
// begin tag := GetTag ( i ) ;
8012: LD_ADDR_VAR 0 4
8016: PUSH
8017: LD_VAR 0 2
8021: PPUSH
8022: CALL_OW 110
8026: ST_TO_ADDR
// if not tag then
8027: LD_VAR 0 4
8031: NOT
8032: IFFALSE 8141
// begin if GetLives ( i ) = 1000 then
8034: LD_VAR 0 2
8038: PPUSH
8039: CALL_OW 256
8043: PUSH
8044: LD_INT 1000
8046: EQUAL
8047: IFFALSE 8063
// SetTag ( i , 1 ) else
8049: LD_VAR 0 2
8053: PPUSH
8054: LD_INT 1
8056: PPUSH
8057: CALL_OW 109
8061: GO 8139
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 6 then
8063: LD_VAR 0 2
8067: PPUSH
8068: LD_VAR 0 6
8072: PUSH
8073: LD_INT 2
8075: ARRAY
8076: PUSH
8077: LD_INT 1
8079: ARRAY
8080: PPUSH
8081: LD_VAR 0 6
8085: PUSH
8086: LD_INT 2
8088: ARRAY
8089: PUSH
8090: LD_INT 2
8092: ARRAY
8093: PPUSH
8094: CALL_OW 297
8098: PUSH
8099: LD_INT 6
8101: GREATER
8102: IFFALSE 8139
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8104: LD_VAR 0 2
8108: PPUSH
8109: LD_VAR 0 6
8113: PUSH
8114: LD_INT 2
8116: ARRAY
8117: PUSH
8118: LD_INT 1
8120: ARRAY
8121: PPUSH
8122: LD_VAR 0 6
8126: PUSH
8127: LD_INT 2
8129: ARRAY
8130: PUSH
8131: LD_INT 2
8133: ARRAY
8134: PPUSH
8135: CALL_OW 111
// end else
8139: GO 8379
// begin if GetLives ( i ) < 720 then
8141: LD_VAR 0 2
8145: PPUSH
8146: CALL_OW 256
8150: PUSH
8151: LD_INT 720
8153: LESS
8154: IFFALSE 8170
// SetTag ( i , 0 ) else
8156: LD_VAR 0 2
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: CALL_OW 109
8168: GO 8379
// if tag <= attackFormula [ 1 ] then
8170: LD_VAR 0 4
8174: PUSH
8175: LD_VAR 0 6
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: LESSEQUAL
8184: IFFALSE 8345
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
8186: LD_VAR 0 2
8190: PPUSH
8191: LD_VAR 0 6
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PUSH
8200: LD_VAR 0 4
8204: ARRAY
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: PPUSH
8210: LD_VAR 0 6
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PUSH
8219: LD_VAR 0 4
8223: ARRAY
8224: PUSH
8225: LD_INT 2
8227: ARRAY
8228: PPUSH
8229: CALL_OW 297
8233: PUSH
8234: LD_INT 6
8236: GREATER
8237: IFFALSE 8288
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8239: LD_VAR 0 2
8243: PPUSH
8244: LD_VAR 0 6
8248: PUSH
8249: LD_INT 1
8251: ARRAY
8252: PUSH
8253: LD_VAR 0 4
8257: ARRAY
8258: PUSH
8259: LD_INT 1
8261: ARRAY
8262: PPUSH
8263: LD_VAR 0 6
8267: PUSH
8268: LD_INT 1
8270: ARRAY
8271: PUSH
8272: LD_VAR 0 4
8276: ARRAY
8277: PUSH
8278: LD_INT 2
8280: ARRAY
8281: PPUSH
8282: CALL_OW 114
8286: GO 8343
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8288: LD_INT 81
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 91
8300: PUSH
8301: LD_VAR 0 2
8305: PUSH
8306: LD_INT 10
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PPUSH
8318: CALL_OW 69
8322: NOT
8323: IFFALSE 8343
// SetTag ( i , tag + 1 ) ;
8325: LD_VAR 0 2
8329: PPUSH
8330: LD_VAR 0 4
8334: PUSH
8335: LD_INT 1
8337: PLUS
8338: PPUSH
8339: CALL_OW 109
// end else
8343: GO 8379
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8345: LD_VAR 0 2
8349: PPUSH
8350: LD_INT 81
8352: PUSH
8353: LD_INT 1
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PPUSH
8360: CALL_OW 69
8364: PPUSH
8365: LD_VAR 0 2
8369: PPUSH
8370: CALL_OW 74
8374: PPUSH
8375: CALL_OW 115
// end ; end ;
8379: GO 8009
8381: POP
8382: POP
// end ; if sci then
8383: LD_VAR 0 8
8387: IFFALSE 8562
// begin if not sol and not mech then
8389: LD_VAR 0 7
8393: NOT
8394: PUSH
8395: LD_VAR 0 9
8399: NOT
8400: AND
8401: IFFALSE 8469
// begin for i in sci do
8403: LD_ADDR_VAR 0 2
8407: PUSH
8408: LD_VAR 0 8
8412: PUSH
8413: FOR_IN
8414: IFFALSE 8465
// begin usAttackers := usAttackers diff i ;
8416: LD_ADDR_EXP 43
8420: PUSH
8421: LD_EXP 43
8425: PUSH
8426: LD_VAR 0 2
8430: DIFF
8431: ST_TO_ADDR
// usForces := usForces union i ;
8432: LD_ADDR_EXP 40
8436: PUSH
8437: LD_EXP 40
8441: PUSH
8442: LD_VAR 0 2
8446: UNION
8447: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8448: LD_VAR 0 2
8452: PPUSH
8453: LD_INT 34
8455: PPUSH
8456: LD_INT 68
8458: PPUSH
8459: CALL_OW 111
// end ;
8463: GO 8413
8465: POP
8466: POP
// end else
8467: GO 8562
// for i in sci do
8469: LD_ADDR_VAR 0 2
8473: PUSH
8474: LD_VAR 0 8
8478: PUSH
8479: FOR_IN
8480: IFFALSE 8560
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 8 then
8482: LD_VAR 0 2
8486: PPUSH
8487: LD_VAR 0 6
8491: PUSH
8492: LD_INT 2
8494: ARRAY
8495: PUSH
8496: LD_INT 1
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 6
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PUSH
8509: LD_INT 2
8511: ARRAY
8512: PPUSH
8513: CALL_OW 297
8517: PUSH
8518: LD_INT 8
8520: GREATER
8521: IFFALSE 8558
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_VAR 0 6
8532: PUSH
8533: LD_INT 2
8535: ARRAY
8536: PUSH
8537: LD_INT 1
8539: ARRAY
8540: PPUSH
8541: LD_VAR 0 6
8545: PUSH
8546: LD_INT 2
8548: ARRAY
8549: PUSH
8550: LD_INT 2
8552: ARRAY
8553: PPUSH
8554: CALL_OW 111
8558: GO 8479
8560: POP
8561: POP
// end ; if tanks and mech then
8562: LD_VAR 0 10
8566: PUSH
8567: LD_VAR 0 9
8571: AND
8572: IFFALSE 9177
// begin for i in mech do
8574: LD_ADDR_VAR 0 2
8578: PUSH
8579: LD_VAR 0 9
8583: PUSH
8584: FOR_IN
8585: IFFALSE 9175
// begin tag := GetTag ( i ) ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_VAR 0 2
8596: PPUSH
8597: CALL_OW 110
8601: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8602: LD_ADDR_VAR 0 11
8606: PUSH
8607: LD_VAR 0 2
8611: PPUSH
8612: CALL_OW 310
8616: ST_TO_ADDR
// if not tag then
8617: LD_VAR 0 4
8621: NOT
8622: IFFALSE 8935
// begin if veh then
8624: LD_VAR 0 11
8628: IFFALSE 8777
// begin if GetLives ( veh ) = 1000 and GetFuel ( veh ) > 60 then
8630: LD_VAR 0 11
8634: PPUSH
8635: CALL_OW 256
8639: PUSH
8640: LD_INT 1000
8642: EQUAL
8643: PUSH
8644: LD_VAR 0 11
8648: PPUSH
8649: CALL_OW 261
8653: PUSH
8654: LD_INT 60
8656: GREATER
8657: AND
8658: IFFALSE 8674
// SetTag ( i , 1 ) else
8660: LD_VAR 0 2
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: CALL_OW 109
8672: GO 8775
// if GetDistUnitXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_VAR 0 6
8683: PUSH
8684: LD_INT 3
8686: ARRAY
8687: PUSH
8688: LD_INT 1
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 6
8696: PUSH
8697: LD_INT 3
8699: ARRAY
8700: PUSH
8701: LD_INT 2
8703: ARRAY
8704: PPUSH
8705: CALL_OW 297
8709: PUSH
8710: LD_INT 7
8712: GREATER
8713: IFFALSE 8752
// ComMoveXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8715: LD_VAR 0 2
8719: PPUSH
8720: LD_VAR 0 6
8724: PUSH
8725: LD_INT 3
8727: ARRAY
8728: PUSH
8729: LD_INT 1
8731: ARRAY
8732: PPUSH
8733: LD_VAR 0 6
8737: PUSH
8738: LD_INT 3
8740: ARRAY
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
8750: GO 8775
// begin ComExitVehicle ( i ) ;
8752: LD_VAR 0 2
8756: PPUSH
8757: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8761: LD_VAR 0 2
8765: PPUSH
8766: LD_VAR 0 11
8770: PPUSH
8771: CALL_OW 189
// end ; end else
8775: GO 8933
// if GetLives ( i ) < 700 then
8777: LD_VAR 0 2
8781: PPUSH
8782: CALL_OW 256
8786: PUSH
8787: LD_INT 700
8789: LESS
8790: IFFALSE 8841
// begin usAttackers := usAttackers diff i ;
8792: LD_ADDR_EXP 43
8796: PUSH
8797: LD_EXP 43
8801: PUSH
8802: LD_VAR 0 2
8806: DIFF
8807: ST_TO_ADDR
// usForces := usForces union i ;
8808: LD_ADDR_EXP 40
8812: PUSH
8813: LD_EXP 40
8817: PUSH
8818: LD_VAR 0 2
8822: UNION
8823: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8824: LD_VAR 0 2
8828: PPUSH
8829: LD_INT 34
8831: PPUSH
8832: LD_INT 68
8834: PPUSH
8835: CALL_OW 111
// end else
8839: GO 8933
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
8841: LD_VAR 0 10
8845: PPUSH
8846: LD_INT 58
8848: PUSH
8849: EMPTY
8850: LIST
8851: PUSH
8852: LD_INT 24
8854: PUSH
8855: LD_INT 1000
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PPUSH
8866: CALL_OW 72
8870: PUSH
8871: LD_VAR 0 2
8875: PPUSH
8876: CALL_OW 314
8880: NOT
8881: AND
8882: IFFALSE 8933
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) ;
8884: LD_VAR 0 2
8888: PPUSH
8889: LD_VAR 0 10
8893: PPUSH
8894: LD_INT 58
8896: PUSH
8897: EMPTY
8898: LIST
8899: PUSH
8900: LD_INT 24
8902: PUSH
8903: LD_INT 1000
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 72
8918: PPUSH
8919: LD_VAR 0 2
8923: PPUSH
8924: CALL_OW 74
8928: PPUSH
8929: CALL_OW 120
// end else
8933: GO 9173
// begin if GetLives ( veh ) < 620 then
8935: LD_VAR 0 11
8939: PPUSH
8940: CALL_OW 256
8944: PUSH
8945: LD_INT 620
8947: LESS
8948: IFFALSE 8964
// SetTag ( i , 0 ) else
8950: LD_VAR 0 2
8954: PPUSH
8955: LD_INT 0
8957: PPUSH
8958: CALL_OW 109
8962: GO 9173
// if tag <= attackFormula [ 4 ] then
8964: LD_VAR 0 4
8968: PUSH
8969: LD_VAR 0 6
8973: PUSH
8974: LD_INT 4
8976: ARRAY
8977: LESSEQUAL
8978: IFFALSE 9139
// begin if GetDistUnitXY ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8980: LD_VAR 0 2
8984: PPUSH
8985: LD_VAR 0 6
8989: PUSH
8990: LD_INT 4
8992: ARRAY
8993: PUSH
8994: LD_VAR 0 4
8998: ARRAY
8999: PUSH
9000: LD_INT 1
9002: ARRAY
9003: PPUSH
9004: LD_VAR 0 6
9008: PUSH
9009: LD_INT 4
9011: ARRAY
9012: PUSH
9013: LD_VAR 0 4
9017: ARRAY
9018: PUSH
9019: LD_INT 2
9021: ARRAY
9022: PPUSH
9023: CALL_OW 297
9027: PUSH
9028: LD_INT 6
9030: GREATER
9031: IFFALSE 9082
// ComAgressiveMove ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9033: LD_VAR 0 2
9037: PPUSH
9038: LD_VAR 0 6
9042: PUSH
9043: LD_INT 4
9045: ARRAY
9046: PUSH
9047: LD_VAR 0 4
9051: ARRAY
9052: PUSH
9053: LD_INT 1
9055: ARRAY
9056: PPUSH
9057: LD_VAR 0 6
9061: PUSH
9062: LD_INT 4
9064: ARRAY
9065: PUSH
9066: LD_VAR 0 4
9070: ARRAY
9071: PUSH
9072: LD_INT 2
9074: ARRAY
9075: PPUSH
9076: CALL_OW 114
9080: GO 9137
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 16 ] ] ) then
9082: LD_INT 81
9084: PUSH
9085: LD_INT 1
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 91
9094: PUSH
9095: LD_VAR 0 2
9099: PUSH
9100: LD_INT 16
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: CALL_OW 69
9116: NOT
9117: IFFALSE 9137
// SetTag ( i , tag + 1 ) ;
9119: LD_VAR 0 2
9123: PPUSH
9124: LD_VAR 0 4
9128: PUSH
9129: LD_INT 1
9131: PLUS
9132: PPUSH
9133: CALL_OW 109
// end else
9137: GO 9173
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9139: LD_VAR 0 2
9143: PPUSH
9144: LD_INT 81
9146: PUSH
9147: LD_INT 1
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: PPUSH
9159: LD_VAR 0 2
9163: PPUSH
9164: CALL_OW 74
9168: PPUSH
9169: CALL_OW 115
// end ; end ;
9173: GO 8584
9175: POP
9176: POP
// end ; until not usAttackers ;
9177: LD_EXP 43
9181: NOT
9182: IFFALSE 7886
// end ; end_of_file
9184: LD_VAR 0 1
9188: RET
// export function Action ; var hasAll , i , tmp ; begin
9189: LD_INT 0
9191: PPUSH
9192: PPUSH
9193: PPUSH
9194: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9195: LD_ADDR_VAR 0 2
9199: PUSH
9200: LD_INT 22
9202: PUSH
9203: LD_INT 2
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 21
9212: PUSH
9213: LD_INT 1
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 23
9222: PUSH
9223: LD_INT 2
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PUSH
9240: LD_INT 7
9242: GREATEREQUAL
9243: ST_TO_ADDR
// Video ( true ) ;
9244: LD_INT 1
9246: PPUSH
9247: CALL 974 0 1
// CenterNowOnUnits ( Heike ) ;
9251: LD_EXP 24
9255: PPUSH
9256: CALL_OW 87
// wait ( 0 0$2 ) ;
9260: LD_INT 70
9262: PPUSH
9263: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9267: LD_EXP 32
9271: PPUSH
9272: LD_STRING DF-1-start
9274: PPUSH
9275: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9279: LD_EXP 24
9283: PPUSH
9284: LD_EXP 32
9288: PPUSH
9289: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9293: LD_EXP 24
9297: PPUSH
9298: LD_STRING DH-1-start
9300: PPUSH
9301: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9305: LD_EXP 33
9309: PPUSH
9310: LD_INT 92
9312: PPUSH
9313: LD_INT 21
9315: PPUSH
9316: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9320: LD_EXP 28
9324: PPUSH
9325: LD_INT 94
9327: PPUSH
9328: LD_INT 23
9330: PPUSH
9331: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9335: LD_EXP 36
9339: PUSH
9340: LD_INT 1
9342: ARRAY
9343: PPUSH
9344: LD_INT 90
9346: PPUSH
9347: LD_INT 23
9349: PPUSH
9350: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9354: LD_EXP 36
9358: PUSH
9359: LD_INT 2
9361: ARRAY
9362: PPUSH
9363: LD_INT 93
9365: PPUSH
9366: LD_INT 25
9368: PPUSH
9369: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9373: LD_EXP 36
9377: PPUSH
9378: LD_EXP 33
9382: PPUSH
9383: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9387: LD_EXP 33
9391: PUSH
9392: LD_EXP 28
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: LD_EXP 24
9405: PPUSH
9406: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9410: LD_EXP 24
9414: PPUSH
9415: LD_EXP 33
9419: PPUSH
9420: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9424: LD_INT 35
9426: PPUSH
9427: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9431: LD_EXP 33
9435: PPUSH
9436: LD_INT 92
9438: PPUSH
9439: LD_INT 21
9441: PPUSH
9442: CALL_OW 307
9446: IFFALSE 9424
// Say ( Omar , DO-1-start ) ;
9448: LD_EXP 33
9452: PPUSH
9453: LD_STRING DO-1-start
9455: PPUSH
9456: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9460: LD_EXP 24
9464: PPUSH
9465: LD_STRING DH-2-start
9467: PPUSH
9468: CALL_OW 88
// if hasAll then
9472: LD_VAR 0 2
9476: IFFALSE 9604
// begin Say ( Omar , DO-2-start ) ;
9478: LD_EXP 33
9482: PPUSH
9483: LD_STRING DO-2-start
9485: PPUSH
9486: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9490: LD_EXP 33
9494: PPUSH
9495: LD_STRING DO-3-start
9497: PPUSH
9498: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9502: LD_EXP 24
9506: PPUSH
9507: LD_STRING DH-3-start
9509: PPUSH
9510: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9514: LD_EXP 32
9518: PPUSH
9519: LD_STRING DF-2-start
9521: PPUSH
9522: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9526: LD_EXP 33
9530: PPUSH
9531: LD_EXP 32
9535: PPUSH
9536: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9540: LD_EXP 33
9544: PPUSH
9545: LD_STRING DO-4-start
9547: PPUSH
9548: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9552: LD_EXP 32
9556: PPUSH
9557: LD_STRING DF-3-start
9559: PPUSH
9560: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9564: LD_EXP 33
9568: PPUSH
9569: LD_STRING DO-5-start
9571: PPUSH
9572: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9576: LD_EXP 32
9580: PPUSH
9581: LD_STRING DF-4-start
9583: PPUSH
9584: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9588: LD_EXP 33
9592: PPUSH
9593: LD_EXP 24
9597: PPUSH
9598: CALL_OW 119
// end else
9602: GO 9704
// begin Say ( Omar , DO-2-start-a ) ;
9604: LD_EXP 33
9608: PPUSH
9609: LD_STRING DO-2-start-a
9611: PPUSH
9612: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9616: LD_EXP 33
9620: PPUSH
9621: LD_STRING DO-3-start-a
9623: PPUSH
9624: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9628: LD_EXP 24
9632: PPUSH
9633: LD_STRING DH-3-start-a
9635: PPUSH
9636: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9640: LD_EXP 32
9644: PPUSH
9645: LD_STRING DF-2-start-a
9647: PPUSH
9648: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9652: LD_EXP 33
9656: PPUSH
9657: LD_EXP 32
9661: PPUSH
9662: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9666: LD_EXP 33
9670: PPUSH
9671: LD_STRING DO-4-start-a
9673: PPUSH
9674: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9678: LD_EXP 32
9682: PPUSH
9683: LD_STRING DF-3-start-a
9685: PPUSH
9686: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9690: LD_EXP 33
9694: PPUSH
9695: LD_EXP 24
9699: PPUSH
9700: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9704: LD_INT 10
9706: PPUSH
9707: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9711: LD_EXP 33
9715: PPUSH
9716: LD_STRING DO-1-mission
9718: PPUSH
9719: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9723: LD_EXP 33
9727: PPUSH
9728: LD_STRING DO-2-mission
9730: PPUSH
9731: CALL_OW 88
// if not hasAll then
9735: LD_VAR 0 2
9739: NOT
9740: IFFALSE 9754
// Say ( Omar , DO-3-mission ) ;
9742: LD_EXP 33
9746: PPUSH
9747: LD_STRING DO-3-mission
9749: PPUSH
9750: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9754: LD_EXP 33
9758: PPUSH
9759: LD_STRING DO-4-mission
9761: PPUSH
9762: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9766: LD_EXP 24
9770: PPUSH
9771: LD_STRING DH-1-mission
9773: PPUSH
9774: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9778: LD_EXP 32
9782: PPUSH
9783: LD_STRING DF-1-mission
9785: PPUSH
9786: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9790: LD_EXP 33
9794: PPUSH
9795: LD_STRING DO-5-mission
9797: PPUSH
9798: CALL_OW 88
// if not hasAll then
9802: LD_VAR 0 2
9806: NOT
9807: IFFALSE 9942
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9809: LD_ADDR_VAR 0 4
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 21
9826: PUSH
9827: LD_INT 1
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 23
9836: PUSH
9837: LD_INT 2
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: PPUSH
9849: CALL_OW 69
9853: ST_TO_ADDR
// for i := 7 downto tmp do
9854: LD_ADDR_VAR 0 3
9858: PUSH
9859: DOUBLE
9860: LD_INT 7
9862: INC
9863: ST_TO_ADDR
9864: LD_VAR 0 4
9868: PUSH
9869: FOR_DOWNTO
9870: IFFALSE 9940
// begin if omarSquad < 3 then
9872: LD_EXP 36
9876: PUSH
9877: LD_INT 3
9879: LESS
9880: IFFALSE 9884
// break ;
9882: GO 9940
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9884: LD_EXP 36
9888: PUSH
9889: LD_INT 3
9891: ARRAY
9892: PPUSH
9893: LD_INT 2
9895: PPUSH
9896: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9900: LD_ADDR_EXP 38
9904: PUSH
9905: LD_EXP 38
9909: PUSH
9910: LD_EXP 36
9914: PUSH
9915: LD_INT 3
9917: ARRAY
9918: UNION
9919: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9920: LD_ADDR_EXP 36
9924: PUSH
9925: LD_EXP 36
9929: PPUSH
9930: LD_INT 3
9932: PPUSH
9933: CALL_OW 3
9937: ST_TO_ADDR
// end ;
9938: GO 9869
9940: POP
9941: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9942: LD_EXP 33
9946: PUSH
9947: LD_EXP 36
9951: ADD
9952: PPUSH
9953: LD_INT 103
9955: PPUSH
9956: LD_INT 9
9958: PPUSH
9959: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9963: LD_VAR 0 2
9967: PUSH
9968: LD_EXP 29
9972: PPUSH
9973: CALL_OW 302
9977: AND
9978: IFFALSE 10039
// begin wait ( 0 0$3 ) ;
9980: LD_INT 105
9982: PPUSH
9983: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9987: LD_EXP 29
9991: PPUSH
9992: LD_EXP 32
9996: PPUSH
9997: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10001: LD_EXP 29
10005: PPUSH
10006: LD_STRING DK-1-side
10008: PPUSH
10009: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10013: LD_EXP 32
10017: PPUSH
10018: LD_EXP 29
10022: PPUSH
10023: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10027: LD_EXP 32
10031: PPUSH
10032: LD_STRING DF-1-side
10034: PPUSH
10035: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10039: LD_INT 22
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PPUSH
10054: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10058: LD_EXP 32
10062: PUSH
10063: LD_EXP 35
10067: ADD
10068: PPUSH
10069: LD_INT 108
10071: PPUSH
10072: LD_INT 62
10074: PPUSH
10075: CALL_OW 111
// gameStarted := true ;
10079: LD_ADDR_EXP 3
10083: PUSH
10084: LD_INT 1
10086: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10087: LD_INT 105
10089: PPUSH
10090: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10094: LD_EXP 24
10098: PPUSH
10099: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10103: LD_EXP 24
10107: PPUSH
10108: LD_EXP 28
10112: PPUSH
10113: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10117: LD_INT 22
10119: PUSH
10120: LD_INT 2
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PPUSH
10127: CALL_OW 69
10131: PUSH
10132: LD_EXP 24
10136: DIFF
10137: PPUSH
10138: LD_EXP 24
10142: PPUSH
10143: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10147: LD_EXP 24
10151: PPUSH
10152: LD_STRING DH-1-explore
10154: PPUSH
10155: CALL_OW 88
// if Givi then
10159: LD_EXP 25
10163: IFFALSE 10179
// Say ( Givi , DG-1-explore ) else
10165: LD_EXP 25
10169: PPUSH
10170: LD_STRING DG-1-explore
10172: PPUSH
10173: CALL_OW 88
10177: GO 10216
// if heikeSecondSquad then
10179: LD_EXP 38
10183: IFFALSE 10216
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10185: LD_EXP 38
10189: PPUSH
10190: LD_INT 26
10192: PUSH
10193: LD_INT 1
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 72
10204: PUSH
10205: LD_INT 1
10207: ARRAY
10208: PPUSH
10209: LD_STRING DArm-1-explore
10211: PPUSH
10212: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10216: LD_EXP 28
10220: PPUSH
10221: LD_STRING DA-1-explore
10223: PPUSH
10224: CALL_OW 88
// if Sophia then
10228: LD_EXP 30
10232: IFFALSE 10310
// begin Say ( Sophia , DS-2-explore ) ;
10234: LD_EXP 30
10238: PPUSH
10239: LD_STRING DS-2-explore
10241: PPUSH
10242: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10246: LD_EXP 28
10250: PPUSH
10251: LD_STRING DA-2-explore
10253: PPUSH
10254: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10258: LD_EXP 30
10262: PPUSH
10263: LD_EXP 28
10267: PPUSH
10268: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10272: LD_EXP 28
10276: PPUSH
10277: LD_EXP 30
10281: PPUSH
10282: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10286: LD_EXP 30
10290: PPUSH
10291: LD_STRING DS-3-explore
10293: PPUSH
10294: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10298: LD_EXP 28
10302: PPUSH
10303: LD_STRING DA-3-explore
10305: PPUSH
10306: CALL_OW 88
// end ; if Mike then
10310: LD_EXP 26
10314: IFFALSE 10370
// begin Say ( Mike , DM-1-explore ) ;
10316: LD_EXP 26
10320: PPUSH
10321: LD_STRING DM-1-explore
10323: PPUSH
10324: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10328: LD_EXP 24
10332: PPUSH
10333: LD_STRING DH-2-explore
10335: PPUSH
10336: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10340: LD_EXP 26
10344: PPUSH
10345: LD_STRING DM-2-explore
10347: PPUSH
10348: CALL_OW 88
// if Kaia then
10352: LD_EXP 29
10356: IFFALSE 10370
// Say ( Kaia , DK-1-explore ) ;
10358: LD_EXP 29
10362: PPUSH
10363: LD_STRING DK-1-explore
10365: PPUSH
10366: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10370: LD_INT 22
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 69
10384: PPUSH
10385: CALL_OW 139
// Video ( false ) ;
10389: LD_INT 0
10391: PPUSH
10392: CALL 974 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10396: LD_STRING BuildBase
10398: PPUSH
10399: CALL_OW 337
// SaveForQuickRestart ;
10403: CALL_OW 22
// end ;
10407: LD_VAR 0 1
10411: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10412: LD_EXP 5
10416: NOT
10417: PUSH
10418: LD_EXP 6
10422: NOT
10423: AND
10424: PUSH
10425: LD_INT 5
10427: PPUSH
10428: LD_INT 22
10430: PUSH
10431: LD_INT 2
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 70
10442: AND
10443: PUSH
10444: LD_EXP 6
10448: NOT
10449: AND
10450: IFFALSE 10535
10452: GO 10454
10454: DISABLE
// begin if Mike then
10455: LD_EXP 26
10459: IFFALSE 10475
// Say ( Mike , DM-1-scout ) else
10461: LD_EXP 26
10465: PPUSH
10466: LD_STRING DM-1-scout
10468: PPUSH
10469: CALL_OW 88
10473: GO 10506
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10475: LD_EXP 38
10479: PPUSH
10480: LD_INT 26
10482: PUSH
10483: LD_INT 1
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 72
10494: PUSH
10495: LD_INT 1
10497: ARRAY
10498: PPUSH
10499: LD_STRING DArm-1-explore
10501: PPUSH
10502: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10506: LD_INT 54
10508: PPUSH
10509: LD_INT 35
10511: PPUSH
10512: LD_INT 2
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10522: LD_INT 54
10524: PPUSH
10525: LD_INT 35
10527: PPUSH
10528: LD_INT 2
10530: PPUSH
10531: CALL_OW 331
// end ;
10535: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10536: LD_INT 6
10538: PPUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PPUSH
10549: CALL_OW 70
10553: PUSH
10554: LD_EXP 6
10558: NOT
10559: AND
10560: IFFALSE 10814
10562: GO 10564
10564: DISABLE
10565: LD_INT 0
10567: PPUSH
10568: PPUSH
10569: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10570: LD_ADDR_VAR 0 1
10574: PUSH
10575: LD_EXP 38
10579: PPUSH
10580: LD_INT 26
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 72
10594: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_EXP 38
10604: PPUSH
10605: LD_INT 26
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PPUSH
10615: CALL_OW 72
10619: ST_TO_ADDR
// DialogueOn ;
10620: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10624: LD_INT 36
10626: PPUSH
10627: LD_INT 22
10629: PPUSH
10630: LD_INT 2
10632: PPUSH
10633: LD_INT 8
10635: PPUSH
10636: CALL_OW 330
// dwait ( 0 0$1 ) ;
10640: LD_INT 35
10642: PPUSH
10643: CALL_OW 68
// speakerOk := false ;
10647: LD_ADDR_VAR 0 3
10651: PUSH
10652: LD_INT 0
10654: ST_TO_ADDR
// if Mike then
10655: LD_EXP 26
10659: IFFALSE 10681
// speakerOk := Say ( Mike , DM-1-spot ) else
10661: LD_ADDR_VAR 0 3
10665: PUSH
10666: LD_EXP 26
10670: PPUSH
10671: LD_STRING DM-1-spot
10673: PPUSH
10674: CALL_OW 88
10678: ST_TO_ADDR
10679: GO 10709
// if randomMen then
10681: LD_VAR 0 1
10685: IFFALSE 10709
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10687: LD_ADDR_VAR 0 3
10691: PUSH
10692: LD_VAR 0 1
10696: PUSH
10697: LD_INT 1
10699: ARRAY
10700: PPUSH
10701: LD_STRING DArm-1-spot-a
10703: PPUSH
10704: CALL_OW 88
10708: ST_TO_ADDR
// if speakerOk then
10709: LD_VAR 0 3
10713: IFFALSE 10757
// begin if Givi then
10715: LD_EXP 25
10719: IFFALSE 10735
// Say ( Givi , DG-1-spot ) else
10721: LD_EXP 25
10725: PPUSH
10726: LD_STRING DG-1-spot
10728: PPUSH
10729: CALL_OW 88
10733: GO 10757
// if randomWomen then
10735: LD_VAR 0 2
10739: IFFALSE 10757
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10741: LD_VAR 0 2
10745: PUSH
10746: LD_INT 1
10748: ARRAY
10749: PPUSH
10750: LD_STRING DArf-1-spot-a
10752: PPUSH
10753: CALL_OW 88
// end ; if Mike then
10757: LD_EXP 26
10761: IFFALSE 10777
// Say ( Heike , DH-1-spot ) else
10763: LD_EXP 24
10767: PPUSH
10768: LD_STRING DH-1-spot
10770: PPUSH
10771: CALL_OW 88
10775: GO 10789
// Say ( Heike , DH-1-spot-a ) ;
10777: LD_EXP 24
10781: PPUSH
10782: LD_STRING DH-1-spot-a
10784: PPUSH
10785: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10789: LD_INT 36
10791: PPUSH
10792: LD_INT 22
10794: PPUSH
10795: LD_INT 2
10797: PPUSH
10798: CALL_OW 331
// DialogueOff ;
10802: CALL_OW 7
// americanBaseSpoted := true ;
10806: LD_ADDR_EXP 5
10810: PUSH
10811: LD_INT 1
10813: ST_TO_ADDR
// end ;
10814: PPOPN 3
10816: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10817: LD_EXP 5
10821: NOT
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_INT 2
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 101
10835: PUSH
10836: LD_INT 1
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PPUSH
10847: CALL_OW 69
10851: AND
10852: PUSH
10853: LD_EXP 6
10857: NOT
10858: AND
10859: IFFALSE 10945
10861: GO 10863
10863: DISABLE
10864: LD_INT 0
10866: PPUSH
// begin americanBaseSpoted := true ;
10867: LD_ADDR_EXP 5
10871: PUSH
10872: LD_INT 1
10874: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10875: LD_ADDR_VAR 0 1
10879: PUSH
10880: LD_EXP 38
10884: PPUSH
10885: LD_INT 26
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 72
10899: ST_TO_ADDR
// if not randomMen then
10900: LD_VAR 0 1
10904: NOT
10905: IFFALSE 10909
// exit ;
10907: GO 10945
// DialogueOn ;
10909: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10913: LD_VAR 0 1
10917: PUSH
10918: LD_INT 1
10920: ARRAY
10921: PPUSH
10922: LD_STRING DArm-1-spot-a
10924: PPUSH
10925: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10929: LD_EXP 24
10933: PPUSH
10934: LD_STRING DH-1-spot-a
10936: PPUSH
10937: CALL_OW 88
// DialogueOff ;
10941: CALL_OW 7
// end ;
10945: PPOPN 1
10947: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var i , p ;
10948: LD_INT 11
10950: PPUSH
10951: CALL_OW 255
10955: PUSH
10956: LD_INT 2
10958: EQUAL
10959: PUSH
10960: LD_INT 7
10962: PPUSH
10963: LD_INT 22
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 3
10975: PUSH
10976: LD_INT 50
10978: PUSH
10979: EMPTY
10980: LIST
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 30
10988: PUSH
10989: LD_INT 31
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: LIST
11000: PPUSH
11001: CALL_OW 70
11005: OR
11006: PUSH
11007: LD_INT 7
11009: PPUSH
11010: LD_INT 22
11012: PUSH
11013: LD_INT 2
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PPUSH
11020: CALL_OW 70
11024: PUSH
11025: LD_INT 1
11027: GREATER
11028: OR
11029: PUSH
11030: LD_INT 6
11032: PPUSH
11033: LD_INT 22
11035: PUSH
11036: LD_INT 2
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PPUSH
11043: CALL_OW 70
11047: OR
11048: IFFALSE 11584
11050: GO 11052
11052: DISABLE
11053: LD_INT 0
11055: PPUSH
11056: PPUSH
// begin americanBaseCaptured := true ;
11057: LD_ADDR_EXP 6
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11065: LD_INT 105
11067: PPUSH
11068: CALL_OW 67
// if IsOk ( usCommander ) then
11072: LD_EXP 41
11076: PPUSH
11077: CALL_OW 302
11081: IFFALSE 11144
// begin usForces := usForces union usCommander ;
11083: LD_ADDR_EXP 40
11087: PUSH
11088: LD_EXP 40
11092: PUSH
11093: LD_EXP 41
11097: UNION
11098: ST_TO_ADDR
// if FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) then
11099: LD_INT 6
11101: PPUSH
11102: LD_INT 22
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 70
11116: IFFALSE 11132
// Say ( usCommander , DUsm-2-assault ) else
11118: LD_EXP 41
11122: PPUSH
11123: LD_STRING DUsm-2-assault
11125: PPUSH
11126: CALL_OW 88
11130: GO 11144
// Say ( usCommander , DUsm-1-assault ) ;
11132: LD_EXP 41
11136: PPUSH
11137: LD_STRING DUsm-1-assault
11139: PPUSH
11140: CALL_OW 88
// end ; for i in usForces do
11144: LD_ADDR_VAR 0 1
11148: PUSH
11149: LD_EXP 40
11153: PUSH
11154: FOR_IN
11155: IFFALSE 11194
// begin if IsInUnit ( i ) then
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 310
11166: IFFALSE 11177
// ComExitBuilding ( i ) ;
11168: LD_VAR 0 1
11172: PPUSH
11173: CALL_OW 122
// AddComMoveXY ( i , 34 , 67 ) ;
11177: LD_VAR 0 1
11181: PPUSH
11182: LD_INT 34
11184: PPUSH
11185: LD_INT 67
11187: PPUSH
11188: CALL_OW 171
// end ;
11192: GO 11154
11194: POP
11195: POP
// Say ( Heike , DH-1-assault ) ;
11196: LD_EXP 24
11200: PPUSH
11201: LD_STRING DH-1-assault
11203: PPUSH
11204: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11208: LD_INT 35
11210: PPUSH
11211: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11215: LD_VAR 0 1
11219: PPUSH
11220: LD_INT 34
11222: PPUSH
11223: LD_INT 67
11225: PPUSH
11226: CALL_OW 111
// until not usForces ;
11230: LD_EXP 40
11234: NOT
11235: IFFALSE 11208
// music_nat := 2 ;
11237: LD_ADDR_OWVAR 71
11241: PUSH
11242: LD_INT 2
11244: ST_TO_ADDR
// music_class := music_victory ;
11245: LD_ADDR_OWVAR 72
11249: PUSH
11250: LD_INT 4
11252: ST_TO_ADDR
// if not americanHasEscaped then
11253: LD_EXP 7
11257: NOT
11258: IFFALSE 11272
// Say ( Heike , DH-2-assault ) ;
11260: LD_EXP 24
11264: PPUSH
11265: LD_STRING DH-2-assault
11267: PPUSH
11268: CALL_OW 88
// wait ( 0 0$2 ) ;
11272: LD_INT 70
11274: PPUSH
11275: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11279: LD_INT 35
11281: PPUSH
11282: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11286: LD_INT 22
11288: PUSH
11289: LD_INT 2
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 21
11298: PUSH
11299: LD_INT 1
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: LD_INT 50
11311: PUSH
11312: EMPTY
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: NOT
11329: IFFALSE 11279
// Video ( true ) ;
11331: LD_INT 1
11333: PPUSH
11334: CALL 974 0 1
// if not GetSide ( usDepot ) = 2 then
11338: LD_INT 11
11340: PPUSH
11341: CALL_OW 255
11345: PUSH
11346: LD_INT 2
11348: EQUAL
11349: NOT
11350: IFFALSE 11362
// SetSide ( usDepot , 2 ) ;
11352: LD_INT 11
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11362: LD_INT 35
11364: PPUSH
11365: LD_INT 22
11367: PPUSH
11368: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11372: LD_EXP 24
11376: PPUSH
11377: LD_INT 35
11379: PPUSH
11380: LD_INT 22
11382: PPUSH
11383: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11387: LD_EXP 24
11391: PPUSH
11392: LD_INT 38
11394: PPUSH
11395: LD_INT 25
11397: PPUSH
11398: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11402: LD_EXP 37
11406: PUSH
11407: LD_EXP 38
11411: UNION
11412: PPUSH
11413: LD_INT 39
11415: PPUSH
11416: LD_INT 26
11418: PPUSH
11419: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11423: LD_EXP 37
11427: PUSH
11428: LD_EXP 38
11432: UNION
11433: PPUSH
11434: LD_EXP 24
11438: PPUSH
11439: CALL_OW 179
// p := 0 ;
11443: LD_ADDR_VAR 0 2
11447: PUSH
11448: LD_INT 0
11450: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11451: LD_INT 35
11453: PPUSH
11454: CALL_OW 67
// p := p + 1 ;
11458: LD_ADDR_VAR 0 2
11462: PUSH
11463: LD_VAR 0 2
11467: PUSH
11468: LD_INT 1
11470: PLUS
11471: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11472: LD_EXP 24
11476: PPUSH
11477: CALL_OW 314
11481: NOT
11482: PUSH
11483: LD_VAR 0 2
11487: PUSH
11488: LD_INT 10
11490: GREATER
11491: OR
11492: IFFALSE 11451
// Say ( Heike , DH-1-capture ) ;
11494: LD_EXP 24
11498: PPUSH
11499: LD_STRING DH-1-capture
11501: PPUSH
11502: CALL_OW 88
// if Markov then
11506: LD_EXP 31
11510: IFFALSE 11524
// Say ( Markov , DMar-1-capture ) ;
11512: LD_EXP 31
11516: PPUSH
11517: LD_STRING DMar-1-capture
11519: PPUSH
11520: CALL_OW 88
// if Sophia then
11524: LD_EXP 30
11528: IFFALSE 11554
// begin Say ( Heike , DH-2-capture ) ;
11530: LD_EXP 24
11534: PPUSH
11535: LD_STRING DH-2-capture
11537: PPUSH
11538: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11542: LD_EXP 30
11546: PPUSH
11547: LD_STRING DS-1-capture
11549: PPUSH
11550: CALL_OW 88
// end ; Video ( false ) ;
11554: LD_INT 0
11556: PPUSH
11557: CALL 974 0 1
// music_nat := music_auto ;
11561: LD_ADDR_OWVAR 71
11565: PUSH
11566: LD_INT 0
11568: ST_TO_ADDR
// music_class := music_auto ;
11569: LD_ADDR_OWVAR 72
11573: PUSH
11574: LD_INT 0
11576: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11577: LD_STRING ConstructBase
11579: PPUSH
11580: CALL_OW 337
// end ;
11584: PPOPN 2
11586: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11587: LD_INT 22
11589: PUSH
11590: LD_INT 2
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 30
11599: PUSH
11600: LD_INT 2
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 57
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 69
11629: IFFALSE 11872
11631: GO 11633
11633: DISABLE
// begin workshopBuilded := true ;
11634: LD_ADDR_EXP 9
11638: PUSH
11639: LD_INT 1
11641: ST_TO_ADDR
// if IsOk ( Markov ) then
11642: LD_EXP 31
11646: PPUSH
11647: CALL_OW 302
11651: IFFALSE 11710
// begin Say ( Heike , DH-1-shop-a ) ;
11653: LD_EXP 24
11657: PPUSH
11658: LD_STRING DH-1-shop-a
11660: PPUSH
11661: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11665: LD_INT 47
11667: PPUSH
11668: LD_INT 2
11670: PPUSH
11671: CALL_OW 321
11675: PUSH
11676: LD_INT 2
11678: EQUAL
11679: PUSH
11680: LD_INT 45
11682: PPUSH
11683: LD_INT 2
11685: PPUSH
11686: CALL_OW 321
11690: PUSH
11691: LD_INT 2
11693: EQUAL
11694: AND
11695: NOT
11696: IFFALSE 11710
// Say ( Markov , DMar-1-shop-a ) ;
11698: LD_EXP 31
11702: PPUSH
11703: LD_STRING DMar-1-shop-a
11705: PPUSH
11706: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11710: LD_INT 35
11712: PPUSH
11713: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ;
11717: LD_INT 47
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: CALL_OW 321
11727: PUSH
11728: LD_INT 2
11730: EQUAL
11731: PUSH
11732: LD_INT 45
11734: PPUSH
11735: LD_INT 2
11737: PPUSH
11738: CALL_OW 321
11742: PUSH
11743: LD_INT 2
11745: EQUAL
11746: AND
11747: IFFALSE 11710
// DialogueOn ;
11749: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11753: LD_EXP 31
11757: PPUSH
11758: LD_STRING DMar-1-shop
11760: PPUSH
11761: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11765: LD_EXP 24
11769: PPUSH
11770: LD_STRING DH-1-shop
11772: PPUSH
11773: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11777: LD_EXP 31
11781: PPUSH
11782: LD_STRING DMar-2-shop
11784: PPUSH
11785: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11789: LD_EXP 31
11793: PPUSH
11794: LD_STRING DMar-3-shop
11796: PPUSH
11797: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11801: LD_EXP 24
11805: PPUSH
11806: LD_STRING DH-2-shop
11808: PPUSH
11809: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11813: LD_EXP 31
11817: PPUSH
11818: LD_STRING DMar-4-shop
11820: PPUSH
11821: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11825: LD_EXP 24
11829: PPUSH
11830: LD_STRING DH-3-shop
11832: PPUSH
11833: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11837: LD_EXP 31
11841: PPUSH
11842: LD_STRING DMar-5-shop
11844: PPUSH
11845: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11849: LD_EXP 24
11853: PPUSH
11854: LD_STRING DH-4-shop
11856: PPUSH
11857: CALL_OW 88
// DialogueOff ;
11861: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11865: LD_STRING ConstructVeh
11867: PPUSH
11868: CALL_OW 337
// end ;
11872: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11873: LD_INT 2
11875: PPUSH
11876: LD_INT 2
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL 1145 0 3
11886: PUSH
11887: LD_INT 0
11889: EQUAL
11890: IFFALSE 11902
11892: GO 11894
11894: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11895: LD_STRING Techs
11897: PPUSH
11898: CALL_OW 337
11902: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11903: LD_EXP 31
11907: PPUSH
11908: CALL_OW 302
11912: PUSH
11913: LD_INT 22
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 2
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 22
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 35
11938: PUSH
11939: LD_INT 22
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: AND
11960: IFFALSE 12067
11962: GO 11964
11964: DISABLE
// begin DialogueOn ;
11965: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11969: LD_INT 22
11971: PUSH
11972: LD_INT 2
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 2
11981: PUSH
11982: LD_INT 34
11984: PUSH
11985: LD_INT 22
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 35
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PPUSH
12011: CALL_OW 69
12015: PPUSH
12016: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12020: LD_INT 10
12022: PPUSH
12023: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12027: LD_EXP 24
12031: PPUSH
12032: LD_STRING DH-1-bal
12034: PPUSH
12035: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12039: LD_EXP 31
12043: PPUSH
12044: LD_STRING DMar-1-bal
12046: PPUSH
12047: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12051: LD_EXP 24
12055: PPUSH
12056: LD_STRING DH-2-bal
12058: PPUSH
12059: CALL_OW 88
// DialogueOff ;
12063: CALL_OW 7
// end ;
12067: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12068: LD_EXP 28
12072: PPUSH
12073: CALL_OW 302
12077: PUSH
12078: LD_INT 22
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 30
12090: PUSH
12091: LD_INT 6
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PPUSH
12102: CALL_OW 69
12106: AND
12107: IFFALSE 12168
12109: GO 12111
12111: DISABLE
// begin DialogueOn ;
12112: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12116: LD_EXP 28
12120: PPUSH
12121: LD_STRING DA-1-lab
12123: PPUSH
12124: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12128: LD_EXP 24
12132: PPUSH
12133: LD_STRING DH-1-lab
12135: PPUSH
12136: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12140: LD_EXP 28
12144: PPUSH
12145: LD_STRING DA-2-lab
12147: PPUSH
12148: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12152: LD_EXP 24
12156: PPUSH
12157: LD_STRING DH-2-lab
12159: PPUSH
12160: CALL_OW 88
// DialogueOff ;
12164: CALL_OW 7
// end ;
12168: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
12169: LD_EXP 29
12173: PPUSH
12174: CALL_OW 302
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_INT 2
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 25
12191: PUSH
12192: LD_INT 15
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PPUSH
12203: CALL_OW 69
12207: AND
12208: IFFALSE 12388
12210: GO 12212
12212: DISABLE
12213: LD_INT 0
12215: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12216: LD_ADDR_VAR 0 1
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 25
12233: PUSH
12234: LD_INT 15
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PPUSH
12245: CALL_OW 69
12249: ST_TO_ADDR
// Video ( true ) ;
12250: LD_INT 1
12252: PPUSH
12253: CALL 974 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
12257: LD_VAR 0 1
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12270: LD_VAR 0 1
12274: PUSH
12275: LD_INT 1
12277: ARRAY
12278: PPUSH
12279: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 1
12290: ARRAY
12291: PPUSH
12292: LD_INT 35
12294: PPUSH
12295: LD_INT 28
12297: PPUSH
12298: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12302: LD_VAR 0 1
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: LD_INT 36
12313: PPUSH
12314: LD_INT 17
12316: PPUSH
12317: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
12321: LD_EXP 29
12325: PPUSH
12326: LD_STRING DK-1-apesol
12328: PPUSH
12329: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
12333: LD_EXP 28
12337: PPUSH
12338: LD_STRING DA-1-apesol
12340: PPUSH
12341: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12345: LD_EXP 29
12349: PPUSH
12350: LD_STRING DK-2-apesol
12352: PPUSH
12353: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12357: LD_EXP 28
12361: PPUSH
12362: LD_STRING DA-2-apesol
12364: PPUSH
12365: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12369: LD_EXP 29
12373: PPUSH
12374: LD_STRING DK-3-apesol
12376: PPUSH
12377: CALL_OW 88
// Video ( false ) ;
12381: LD_INT 0
12383: PPUSH
12384: CALL 974 0 1
// end ;
12388: PPOPN 1
12390: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
12391: LD_EXP 30
12395: PPUSH
12396: CALL_OW 302
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_INT 2
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 25
12413: PUSH
12414: LD_INT 16
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: AND
12430: IFFALSE 12702
12432: GO 12434
12434: DISABLE
12435: LD_INT 0
12437: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12438: LD_ADDR_VAR 0 1
12442: PUSH
12443: LD_INT 22
12445: PUSH
12446: LD_INT 2
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 25
12455: PUSH
12456: LD_INT 16
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PPUSH
12467: CALL_OW 69
12471: ST_TO_ADDR
// Video ( true ) ;
12472: LD_INT 1
12474: PPUSH
12475: CALL 974 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12479: LD_INT 5
12481: PPUSH
12482: LD_INT 35
12484: PPUSH
12485: LD_INT 22
12487: PPUSH
12488: LD_INT 1
12490: PPUSH
12491: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12495: LD_EXP 30
12499: PPUSH
12500: LD_VAR 0 1
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12513: LD_VAR 0 1
12517: PUSH
12518: LD_INT 1
12520: ARRAY
12521: PPUSH
12522: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12526: LD_VAR 0 1
12530: PUSH
12531: LD_INT 1
12533: ARRAY
12534: PPUSH
12535: CALL_OW 122
// wait ( 0 0$2 ) ;
12539: LD_INT 70
12541: PPUSH
12542: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12546: LD_EXP 30
12550: PPUSH
12551: LD_STRING DS-1-apeeng
12553: PPUSH
12554: CALL_OW 88
// if IsOk ( Kamil ) then
12558: LD_EXP 27
12562: PPUSH
12563: CALL_OW 302
12567: IFFALSE 12695
// begin Say ( Kamil , DKam-1-apeeng ) ;
12569: LD_EXP 27
12573: PPUSH
12574: LD_STRING DKam-1-apeeng
12576: PPUSH
12577: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12581: LD_EXP 30
12585: PPUSH
12586: LD_STRING DS-2-apeeng
12588: PPUSH
12589: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12593: LD_EXP 27
12597: PPUSH
12598: LD_STRING DKam-2-apeeng
12600: PPUSH
12601: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12605: LD_EXP 30
12609: PPUSH
12610: LD_STRING DS-3-apeeng
12612: PPUSH
12613: CALL_OW 88
// if not IsOK ( Kaia ) then
12617: LD_EXP 29
12621: PPUSH
12622: CALL_OW 302
12626: NOT
12627: IFFALSE 12638
// begin Video ( false ) ;
12629: LD_INT 0
12631: PPUSH
12632: CALL 974 0 1
// exit ;
12636: GO 12702
// end ; Say ( Kaia , DK-1-apeeng ) ;
12638: LD_EXP 29
12642: PPUSH
12643: LD_STRING DK-1-apeeng
12645: PPUSH
12646: CALL_OW 88
// if not IsOk ( Givi ) then
12650: LD_EXP 25
12654: PPUSH
12655: CALL_OW 302
12659: NOT
12660: IFFALSE 12671
// begin Video ( false ) ;
12662: LD_INT 0
12664: PPUSH
12665: CALL 974 0 1
// exit ;
12669: GO 12702
// end ; Say ( Givi , DG-1-apeeng ) ;
12671: LD_EXP 25
12675: PPUSH
12676: LD_STRING DG-1-apeeng
12678: PPUSH
12679: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12683: LD_EXP 29
12687: PPUSH
12688: LD_STRING DK-2-apeeng
12690: PPUSH
12691: CALL_OW 88
// end ; Video ( false ) ;
12695: LD_INT 0
12697: PPUSH
12698: CALL 974 0 1
// end ;
12702: PPOPN 1
12704: END
// every 0 0$1 trigger farmerBaseReady do
12705: LD_EXP 4
12709: IFFALSE 12867
12711: GO 12713
12713: DISABLE
// begin DialogueOn ;
12714: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12718: LD_EXP 32
12722: PPUSH
12723: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12727: LD_EXP 32
12731: PPUSH
12732: LD_STRING DF-1-distribution
12734: PPUSH
12735: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12739: LD_EXP 24
12743: PPUSH
12744: LD_STRING DH-2-distribution
12746: PPUSH
12747: CALL_OW 88
// if IsOk ( Kaia ) then
12751: LD_EXP 29
12755: PPUSH
12756: CALL_OW 302
12760: IFFALSE 12821
// begin Say ( Kaia , DK-1-distribution ) ;
12762: LD_EXP 29
12766: PPUSH
12767: LD_STRING DK-1-distribution
12769: PPUSH
12770: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12774: LD_EXP 24
12778: PPUSH
12779: LD_STRING DH-1-distribution
12781: PPUSH
12782: CALL_OW 88
// if IsOk ( Givi ) then
12786: LD_EXP 25
12790: PPUSH
12791: CALL_OW 302
12795: IFFALSE 12821
// begin Say ( Givi , DG-1-distribution ) ;
12797: LD_EXP 25
12801: PPUSH
12802: LD_STRING DG-1-distribution
12804: PPUSH
12805: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12809: LD_EXP 24
12813: PPUSH
12814: LD_STRING DH-3-distribution
12816: PPUSH
12817: CALL_OW 88
// end ; end ; DialogueOff ;
12821: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12825: LD_STRING Crates1
12827: PPUSH
12828: CALL_OW 337
// farmerRequestedCrates := 300 ;
12832: LD_ADDR_EXP 13
12836: PUSH
12837: LD_INT 300
12839: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12840: LD_STRING FarmerCrates
12842: PPUSH
12843: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12847: LD_INT 10
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12857: LD_INT 108
12859: PPUSH
12860: LD_INT 61
12862: PPUSH
12863: CALL_OW 86
// end ;
12867: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12868: LD_EXP 6
12872: PUSH
12873: LD_INT 22
12875: PUSH
12876: LD_INT 2
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 3
12885: PUSH
12886: LD_INT 57
12888: PUSH
12889: EMPTY
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 2
12898: PUSH
12899: LD_INT 30
12901: PUSH
12902: LD_INT 6
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 30
12911: PUSH
12912: LD_INT 7
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: PPUSH
12929: CALL_OW 69
12933: AND
12934: PUSH
12935: LD_INT 22
12937: PUSH
12938: LD_INT 2
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: LD_INT 57
12950: PUSH
12951: EMPTY
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 30
12960: PUSH
12961: LD_INT 4
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: AND
12978: IFFALSE 13142
12980: GO 12982
12982: DISABLE
12983: LD_INT 0
12985: PPUSH
// begin wait ( 0 0$10 ) ;
12986: LD_INT 350
12988: PPUSH
12989: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: LD_EXP 38
13002: PPUSH
13003: LD_INT 26
13005: PUSH
13006: LD_INT 1
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 25
13015: PUSH
13016: LD_INT 2
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PPUSH
13027: CALL_OW 72
13031: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13032: LD_EXP 24
13036: PPUSH
13037: LD_STRING DH-1-task
13039: PPUSH
13040: CALL_OW 88
// if IsOk ( Sophia ) then
13044: LD_EXP 30
13048: PPUSH
13049: CALL_OW 302
13053: IFFALSE 13093
// begin Say ( Sophia , DS-1-task ) ;
13055: LD_EXP 30
13059: PPUSH
13060: LD_STRING DS-1-task
13062: PPUSH
13063: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13067: LD_EXP 30
13071: PPUSH
13072: LD_STRING DS-2-task
13074: PPUSH
13075: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13079: LD_EXP 24
13083: PPUSH
13084: LD_STRING DH-2-task
13086: PPUSH
13087: CALL_OW 88
// end else
13091: GO 13127
// if eng then
13093: LD_VAR 0 1
13097: IFFALSE 13127
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13099: LD_VAR 0 1
13103: PUSH
13104: LD_INT 1
13106: ARRAY
13107: PPUSH
13108: LD_STRING DArm-1-task
13110: PPUSH
13111: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13115: LD_EXP 24
13119: PPUSH
13120: LD_STRING DH-2-task
13122: PPUSH
13123: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13127: LD_STRING BaseConstructed
13129: PPUSH
13130: CALL_OW 337
// allowConvoys := true ;
13134: LD_ADDR_EXP 11
13138: PUSH
13139: LD_INT 1
13141: ST_TO_ADDR
// end ;
13142: PPOPN 1
13144: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13145: LD_INT 22
13147: PUSH
13148: LD_INT 4
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 34
13157: PUSH
13158: LD_INT 12
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 69
13173: IFFALSE 13341
13175: GO 13177
13177: DISABLE
13178: LD_INT 0
13180: PPUSH
13181: PPUSH
13182: PPUSH
// begin wait ( 0 0$2 ) ;
13183: LD_INT 70
13185: PPUSH
13186: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13190: LD_ADDR_VAR 0 1
13194: PUSH
13195: LD_INT 22
13197: PUSH
13198: LD_INT 4
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 34
13207: PUSH
13208: LD_INT 12
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PPUSH
13219: CALL_OW 69
13223: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13224: LD_ADDR_VAR 0 2
13228: PUSH
13229: LD_VAR 0 1
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: CALL_OW 250
13242: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_VAR 0 1
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 251
13261: ST_TO_ADDR
// DialogueOn ;
13262: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13266: LD_VAR 0 2
13270: PPUSH
13271: LD_VAR 0 3
13275: PPUSH
13276: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13280: LD_VAR 0 2
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 2
13292: PPUSH
13293: LD_INT 6
13295: NEG
13296: PPUSH
13297: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13301: LD_INT 10
13303: PPUSH
13304: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13308: LD_EXP 24
13312: PPUSH
13313: LD_STRING DH-1-seecargo
13315: PPUSH
13316: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13320: LD_VAR 0 2
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 2
13332: PPUSH
13333: CALL_OW 331
// DialogueOff ;
13337: CALL_OW 7
// end ;
13341: PPOPN 3
13343: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13344: LD_EXP 4
13348: PUSH
13349: LD_EXP 12
13353: PUSH
13354: LD_INT 300
13356: GREATEREQUAL
13357: AND
13358: IFFALSE 13430
13360: GO 13362
13362: DISABLE
// begin DialogueOn ;
13363: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13367: LD_EXP 32
13371: PPUSH
13372: LD_STRING DF-1-delivery-2
13374: PPUSH
13375: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13379: LD_EXP 24
13383: PPUSH
13384: LD_STRING DH-1-delivery-2
13386: PPUSH
13387: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13391: LD_EXP 32
13395: PPUSH
13396: LD_STRING DF-2-delivery-2
13398: PPUSH
13399: CALL_OW 94
// DialogueOff ;
13403: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13407: LD_STRING Crates2
13409: PPUSH
13410: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13414: LD_ADDR_EXP 14
13418: PUSH
13419: LD_INT 63000
13421: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13422: LD_ADDR_EXP 13
13426: PUSH
13427: LD_INT 600
13429: ST_TO_ADDR
// end ;
13430: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 do
13431: LD_EXP 4
13435: PUSH
13436: LD_EXP 12
13440: PUSH
13441: LD_INT 600
13443: GREATEREQUAL
13444: AND
13445: IFFALSE 13611
13447: GO 13449
13449: DISABLE
// begin DialogueOn ;
13450: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13454: LD_EXP 32
13458: PPUSH
13459: LD_STRING DF-1-delivery-3
13461: PPUSH
13462: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13466: LD_EXP 24
13470: PPUSH
13471: LD_STRING DH-1-delivery-3
13473: PPUSH
13474: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13478: LD_EXP 32
13482: PPUSH
13483: LD_STRING DF-2-delivery-3
13485: PPUSH
13486: CALL_OW 94
// if IsOk ( Kaia ) then
13490: LD_EXP 29
13494: PPUSH
13495: CALL_OW 302
13499: IFFALSE 13549
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13501: LD_EXP 29
13505: PPUSH
13506: LD_STRING DK-1-delivery-3
13508: PPUSH
13509: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13513: LD_EXP 24
13517: PPUSH
13518: LD_STRING DH-2-delivery-3
13520: PPUSH
13521: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13525: LD_EXP 25
13529: PPUSH
13530: LD_STRING DG-1-delivery-3
13532: PPUSH
13533: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13537: LD_EXP 26
13541: PPUSH
13542: LD_STRING DM-1-delivery-3
13544: PPUSH
13545: CALL_OW 88
// end ; DialogueOff ;
13549: CALL_OW 7
// if Difficulty = 2 then
13553: LD_OWVAR 67
13557: PUSH
13558: LD_INT 2
13560: EQUAL
13561: IFFALSE 13588
// begin ChangeMissionObjectives ( Crates3 ) ;
13563: LD_STRING Crates3
13565: PPUSH
13566: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13570: LD_ADDR_EXP 14
13574: PUSH
13575: LD_INT 63000
13577: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13578: LD_ADDR_EXP 13
13582: PUSH
13583: LD_INT 900
13585: ST_TO_ADDR
// end else
13586: GO 13611
// begin ChangeMissionObjectives ( Crates4 ) ;
13588: LD_STRING Crates4
13590: PPUSH
13591: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13595: LD_ADDR_EXP 14
13599: PUSH
13600: LD_INT 63000
13602: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13603: LD_ADDR_EXP 13
13607: PUSH
13608: LD_INT 1200
13610: ST_TO_ADDR
// end ; end ;
13611: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13612: LD_EXP 4
13616: PUSH
13617: LD_EXP 12
13621: PUSH
13622: LD_INT 600
13624: PUSH
13625: LD_INT 900
13627: PUSH
13628: LD_INT 1200
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: PUSH
13636: LD_OWVAR 67
13640: ARRAY
13641: GREATEREQUAL
13642: AND
13643: PUSH
13644: LD_EXP 13
13648: PUSH
13649: LD_EXP 14
13653: LESSEQUAL
13654: AND
13655: IFFALSE 13728
13657: GO 13659
13659: DISABLE
// begin retreatAllowed := true ;
13660: LD_ADDR_EXP 10
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// display_strings := [ ] ;
13668: LD_ADDR_OWVAR 47
13672: PUSH
13673: EMPTY
13674: ST_TO_ADDR
// DialogueOn ;
13675: CALL_OW 6
// Video ( true ) ;
13679: LD_INT 1
13681: PPUSH
13682: CALL 974 0 1
// SayRadio ( Omar , DO-radio-end ) ;
13686: LD_EXP 33
13690: PPUSH
13691: LD_STRING DO-radio-end
13693: PPUSH
13694: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13698: LD_EXP 24
13702: PPUSH
13703: LD_STRING DH-1-radio-end
13705: PPUSH
13706: CALL_OW 88
// Video ( false ) ;
13710: LD_INT 0
13712: PPUSH
13713: CALL 974 0 1
// DialogueOff ;
13717: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13721: LD_STRING Retreat
13723: PPUSH
13724: CALL_OW 337
// end ;
13728: END
// every 0 0$1 trigger retreatAllowed do
13729: LD_EXP 10
13733: IFFALSE 13752
13735: GO 13737
13737: DISABLE
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13738: LD_INT 10
13740: PPUSH
13741: LD_INT 0
13743: PPUSH
13744: CALL_OW 424
// StartCargoEvacuation ;
13748: CALL 4265 0 0
// end ;
13752: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13753: LD_EXP 10
13757: NOT
13758: PUSH
13759: LD_INT 5
13761: PPUSH
13762: CALL_OW 301
13766: AND
13767: IFFALSE 13791
13769: GO 13771
13771: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
13772: LD_EXP 32
13776: PPUSH
13777: LD_STRING DF-1-failure
13779: PPUSH
13780: CALL_OW 94
// YouLost ( FarmerDepot ) ;
13784: LD_STRING FarmerDepot
13786: PPUSH
13787: CALL_OW 104
// end ;
13791: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 do var i , max , tmp ;
13792: LD_EXP 10
13796: PUSH
13797: LD_EXP 24
13801: PPUSH
13802: LD_EXP 32
13806: PPUSH
13807: CALL_OW 296
13811: PUSH
13812: LD_INT 6
13814: LESS
13815: AND
13816: IFFALSE 14402
13818: GO 13820
13820: DISABLE
13821: LD_INT 0
13823: PPUSH
13824: PPUSH
13825: PPUSH
// begin allowConvoys := false ;
13826: LD_ADDR_EXP 11
13830: PUSH
13831: LD_INT 0
13833: ST_TO_ADDR
// Video ( true ) ;
13834: LD_INT 1
13836: PPUSH
13837: CALL 974 0 1
// ComTurnUnit ( Heike , Farmer ) ;
13841: LD_EXP 24
13845: PPUSH
13846: LD_EXP 32
13850: PPUSH
13851: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
13855: LD_EXP 32
13859: PPUSH
13860: LD_EXP 24
13864: PPUSH
13865: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
13869: LD_EXP 32
13873: PPUSH
13874: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
13878: LD_EXP 24
13882: PPUSH
13883: LD_STRING DH-1-end
13885: PPUSH
13886: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
13890: LD_EXP 32
13894: PPUSH
13895: LD_STRING DF-1-end
13897: PPUSH
13898: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
13902: LD_EXP 32
13906: PPUSH
13907: LD_STRING DF-2-end
13909: PPUSH
13910: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
13914: LD_EXP 24
13918: PPUSH
13919: LD_STRING DH-2-end
13921: PPUSH
13922: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
13926: LD_EXP 32
13930: PPUSH
13931: LD_STRING DF-3-end
13933: PPUSH
13934: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
13938: LD_EXP 24
13942: PPUSH
13943: LD_STRING DH-3-end
13945: PPUSH
13946: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
13950: LD_EXP 25
13954: PPUSH
13955: LD_STRING DG-1-end
13957: PPUSH
13958: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
13962: LD_EXP 24
13966: PPUSH
13967: LD_STRING DH-4-end
13969: PPUSH
13970: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
13974: LD_EXP 32
13978: PPUSH
13979: LD_STRING DF-4-end
13981: PPUSH
13982: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
13986: LD_EXP 24
13990: PPUSH
13991: LD_STRING DH-5-end
13993: PPUSH
13994: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
13998: LD_EXP 32
14002: PPUSH
14003: LD_STRING DF-5-end
14005: PPUSH
14006: CALL_OW 88
// Video ( false ) ;
14010: LD_INT 0
14012: PPUSH
14013: CALL 974 0 1
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14017: LD_ADDR_VAR 0 2
14021: PUSH
14022: LD_INT 4
14024: PUSH
14025: LD_INT 3
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: PUSH
14036: LD_OWVAR 67
14040: ARRAY
14041: ST_TO_ADDR
// if farmerSquad < max then
14042: LD_EXP 35
14046: PUSH
14047: LD_VAR 0 2
14051: LESS
14052: IFFALSE 14064
// max := farmerSquad ;
14054: LD_ADDR_VAR 0 2
14058: PUSH
14059: LD_EXP 35
14063: ST_TO_ADDR
// for i := 1 to max do
14064: LD_ADDR_VAR 0 1
14068: PUSH
14069: DOUBLE
14070: LD_INT 1
14072: DEC
14073: ST_TO_ADDR
14074: LD_VAR 0 2
14078: PUSH
14079: FOR_TO
14080: IFFALSE 14118
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14082: LD_EXP 35
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: LD_INT 2
14093: PPUSH
14094: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14098: LD_ADDR_EXP 35
14102: PUSH
14103: LD_EXP 35
14107: PPUSH
14108: LD_INT 1
14110: PPUSH
14111: CALL_OW 3
14115: ST_TO_ADDR
// end ;
14116: GO 14079
14118: POP
14119: POP
// for i in Farmer ^ farmerSquad do
14120: LD_ADDR_VAR 0 1
14124: PUSH
14125: LD_EXP 32
14129: PUSH
14130: LD_EXP 35
14134: ADD
14135: PUSH
14136: FOR_IN
14137: IFFALSE 14176
// begin if IsInUnit ( i ) then
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL_OW 310
14148: IFFALSE 14159
// ComExitBuilding ( i ) ;
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14159: LD_VAR 0 1
14163: PPUSH
14164: LD_INT 102
14166: PPUSH
14167: LD_INT 7
14169: PPUSH
14170: CALL_OW 171
// end ;
14174: GO 14136
14176: POP
14177: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14178: LD_ADDR_VAR 0 1
14182: PUSH
14183: LD_INT 22
14185: PUSH
14186: LD_INT 5
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PPUSH
14207: CALL_OW 69
14211: PUSH
14212: LD_INT 5
14214: DIFF
14215: PUSH
14216: FOR_IN
14217: IFFALSE 14233
// SetSide ( i , 2 ) ;
14219: LD_VAR 0 1
14223: PPUSH
14224: LD_INT 2
14226: PPUSH
14227: CALL_OW 235
14231: GO 14216
14233: POP
14234: POP
// repeat wait ( 0 0$1 ) ;
14235: LD_INT 35
14237: PPUSH
14238: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_EXP 32
14251: PUSH
14252: LD_EXP 35
14256: ADD
14257: PPUSH
14258: LD_INT 95
14260: PUSH
14261: LD_INT 3
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 72
14272: ST_TO_ADDR
// if tmp then
14273: LD_VAR 0 3
14277: IFFALSE 14321
// for i in tmp do
14279: LD_ADDR_VAR 0 1
14283: PUSH
14284: LD_VAR 0 3
14288: PUSH
14289: FOR_IN
14290: IFFALSE 14319
// begin farmerSquad := farmerSquad diff i ;
14292: LD_ADDR_EXP 35
14296: PUSH
14297: LD_EXP 35
14301: PUSH
14302: LD_VAR 0 1
14306: DIFF
14307: ST_TO_ADDR
// RemoveUnit ( i ) ;
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 64
// end ;
14317: GO 14289
14319: POP
14320: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14321: LD_EXP 35
14325: PUSH
14326: EMPTY
14327: EQUAL
14328: PUSH
14329: LD_EXP 32
14333: PPUSH
14334: CALL_OW 305
14338: NOT
14339: AND
14340: IFFALSE 14235
// wait ( 2 2$00 ) ;
14342: LD_INT 4200
14344: PPUSH
14345: CALL_OW 67
// SendAttack ;
14349: CALL 6684 0 0
// wait ( [ 4 4$00 , 3 3$30 , 3 3$00 ] [ Difficulty ] ) ;
14353: LD_INT 8400
14355: PUSH
14356: LD_INT 7350
14358: PUSH
14359: LD_INT 6300
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: PUSH
14367: LD_OWVAR 67
14371: ARRAY
14372: PPUSH
14373: CALL_OW 67
// SendAttack ;
14377: CALL 6684 0 0
// if Difficulty > 2 then
14381: LD_OWVAR 67
14385: PUSH
14386: LD_INT 2
14388: GREATER
14389: IFFALSE 14402
// begin wait ( 3 3$00 ) ;
14391: LD_INT 6300
14393: PPUSH
14394: CALL_OW 67
// SendAttack ;
14398: CALL 6684 0 0
// end ; end ;
14402: PPOPN 3
14404: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14405: LD_EXP 14
14409: PUSH
14410: LD_INT 18900
14412: LESSEQUAL
14413: IFFALSE 14462
14415: GO 14417
14417: DISABLE
// begin DialogueOn ;
14418: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14422: LD_EXP 32
14426: PPUSH
14427: LD_STRING DF-1-distribution-a
14429: PPUSH
14430: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14434: LD_EXP 24
14438: PPUSH
14439: LD_STRING DH-1-distribution-a
14441: PPUSH
14442: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14446: LD_EXP 32
14450: PPUSH
14451: LD_STRING DF-2-distribution-a
14453: PPUSH
14454: CALL_OW 94
// DialogueOff ;
14458: CALL_OW 7
// end ;
14462: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14463: LD_EXP 14
14467: PUSH
14468: LD_INT 0
14470: LESSEQUAL
14471: IFFALSE 14503
14473: GO 14475
14475: DISABLE
// begin DialogueOn ;
14476: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14480: LD_EXP 32
14484: PPUSH
14485: LD_STRING DF-3-distribution-a
14487: PPUSH
14488: CALL_OW 94
// YouLost ( Distribution ) ;
14492: LD_STRING Distribution
14494: PPUSH
14495: CALL_OW 104
// DialogueOff ;
14499: CALL_OW 7
// end ;
14503: END
// every 0 0$1 trigger vehCounter >= 2 do
14504: LD_EXP 18
14508: PUSH
14509: LD_INT 2
14511: GREATEREQUAL
14512: IFFALSE 14524
14514: GO 14516
14516: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14517: LD_STRING VehConstructed
14519: PPUSH
14520: CALL_OW 337
14524: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14525: LD_INT 22
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 34
14537: PUSH
14538: LD_INT 12
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: IFFALSE 14613
14555: GO 14557
14557: DISABLE
// begin DialogueOn ;
14558: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14562: LD_EXP 24
14566: PPUSH
14567: LD_STRING DH-1-truck
14569: PPUSH
14570: CALL_OW 88
// if IsOk ( Markov ) then
14574: LD_EXP 31
14578: PPUSH
14579: CALL_OW 302
14583: IFFALSE 14609
// begin Say ( Markov , DMar-1-truck ) ;
14585: LD_EXP 31
14589: PPUSH
14590: LD_STRING DMar-1-truck
14592: PPUSH
14593: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14597: LD_EXP 24
14601: PPUSH
14602: LD_STRING DH-2-truck
14604: PPUSH
14605: CALL_OW 88
// end ; DialogueOff ;
14609: CALL_OW 7
// end ;
14613: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14614: LD_INT 0
14616: PPUSH
14617: PPUSH
14618: PPUSH
// if IsOk ( Givi ) then
14619: LD_EXP 25
14623: PPUSH
14624: CALL_OW 302
14628: IFFALSE 14644
// begin Say ( Givi , DG-1-nocargo ) ;
14630: LD_EXP 25
14634: PPUSH
14635: LD_STRING DG-1-nocargo
14637: PPUSH
14638: CALL_OW 88
// exit ;
14642: GO 14740
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: LD_EXP 38
14653: PPUSH
14654: LD_INT 26
14656: PUSH
14657: LD_INT 1
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PPUSH
14664: CALL_OW 72
14668: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14669: LD_ADDR_VAR 0 3
14673: PUSH
14674: LD_EXP 38
14678: PPUSH
14679: LD_INT 26
14681: PUSH
14682: LD_INT 2
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PPUSH
14689: CALL_OW 72
14693: ST_TO_ADDR
// if randomMen then
14694: LD_VAR 0 2
14698: IFFALSE 14718
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14700: LD_VAR 0 2
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: LD_STRING DArm-1-nocargo
14711: PPUSH
14712: CALL_OW 88
14716: GO 14740
// if randomWomen then
14718: LD_VAR 0 3
14722: IFFALSE 14740
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14724: LD_VAR 0 3
14728: PUSH
14729: LD_INT 1
14731: ARRAY
14732: PPUSH
14733: LD_STRING DArf-1-nocargo
14735: PPUSH
14736: CALL_OW 88
// end ;
14740: LD_VAR 0 1
14744: RET
// export function IncomingAttack ; begin
14745: LD_INT 0
14747: PPUSH
// if attackWave = 1 then
14748: LD_EXP 16
14752: PUSH
14753: LD_INT 1
14755: EQUAL
14756: IFFALSE 14827
// begin DialogueOn ;
14758: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14762: LD_EXP 33
14766: PPUSH
14767: LD_STRING DO-1-radio-1
14769: PPUSH
14770: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
14774: LD_EXP 24
14778: PPUSH
14779: LD_STRING DH-1-radio-1-
14781: PPUSH
14782: CALL_OW 88
// if IsOk ( Markov ) then
14786: LD_EXP 31
14790: PPUSH
14791: CALL_OW 302
14795: IFFALSE 14821
// begin Say ( Markov , DMar-1-radio-1 ) ;
14797: LD_EXP 31
14801: PPUSH
14802: LD_STRING DMar-1-radio-1
14804: PPUSH
14805: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
14809: LD_EXP 24
14813: PPUSH
14814: LD_STRING DH-2-radio-1
14816: PPUSH
14817: CALL_OW 88
// end ; DialogueOff ;
14821: CALL_OW 7
// end else
14825: GO 14851
// begin SayRadio ( Omar , DO-1-radio-u ) ;
14827: LD_EXP 33
14831: PPUSH
14832: LD_STRING DO-1-radio-u
14834: PPUSH
14835: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
14839: LD_EXP 24
14843: PPUSH
14844: LD_STRING DH-1-radio-u
14846: PPUSH
14847: CALL_OW 88
// end ; end ;
14851: LD_VAR 0 1
14855: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
14856: LD_EXP 40
14860: PPUSH
14861: LD_INT 95
14863: PUSH
14864: LD_INT 8
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 72
14875: IFFALSE 14978
14877: GO 14879
14879: DISABLE
14880: LD_INT 0
14882: PPUSH
// begin enable ;
14883: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
14884: LD_ADDR_VAR 0 1
14888: PUSH
14889: LD_EXP 40
14893: PPUSH
14894: LD_INT 95
14896: PUSH
14897: LD_INT 8
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PPUSH
14904: CALL_OW 72
14908: PUSH
14909: FOR_IN
14910: IFFALSE 14939
// begin usForces := usForces diff i ;
14912: LD_ADDR_EXP 40
14916: PUSH
14917: LD_EXP 40
14921: PUSH
14922: LD_VAR 0 1
14926: DIFF
14927: ST_TO_ADDR
// RemoveUnit ( i ) ;
14928: LD_VAR 0 1
14932: PPUSH
14933: CALL_OW 64
// end ;
14937: GO 14909
14939: POP
14940: POP
// if not americanHasEscaped and attackWave = 1 then
14941: LD_EXP 7
14945: NOT
14946: PUSH
14947: LD_EXP 16
14951: PUSH
14952: LD_INT 1
14954: EQUAL
14955: AND
14956: IFFALSE 14978
// begin americanHasEscaped := true ;
14958: LD_ADDR_EXP 7
14962: PUSH
14963: LD_INT 1
14965: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
14966: LD_EXP 24
14970: PPUSH
14971: LD_STRING DH-2-assault-a
14973: PPUSH
14974: CALL_OW 88
// end ; end ;
14978: PPOPN 1
14980: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
14981: LD_INT 5
14983: PPUSH
14984: CALL_OW 255
14988: PUSH
14989: LD_INT 2
14991: EQUAL
14992: IFFALSE 15004
14994: GO 14996
14996: DISABLE
// YouLost ( Attack ) ;
14997: LD_STRING Attack
14999: PPUSH
15000: CALL_OW 104
15004: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 160 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do var randomMen , randomWomen , speaker , place ;
15005: LD_INT 22
15007: PUSH
15008: LD_INT 1
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 21
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PPUSH
15029: CALL_OW 69
15033: NOT
15034: PUSH
15035: LD_INT 22
15037: PUSH
15038: LD_INT 4
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PPUSH
15045: CALL_OW 69
15049: NOT
15050: AND
15051: PUSH
15052: LD_EXP 10
15056: NOT
15057: AND
15058: PUSH
15059: LD_EXP 12
15063: PUSH
15064: LD_INT 160
15066: GREATER
15067: AND
15068: PUSH
15069: LD_INT 7
15071: PPUSH
15072: LD_INT 22
15074: PUSH
15075: LD_INT 2
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 21
15084: PUSH
15085: LD_INT 1
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PPUSH
15096: CALL_OW 70
15100: AND
15101: IFFALSE 15834
15103: GO 15105
15105: DISABLE
15106: LD_INT 0
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15112: LD_ADDR_VAR 0 1
15116: PUSH
15117: LD_EXP 38
15121: PPUSH
15122: LD_INT 26
15124: PUSH
15125: LD_INT 1
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 72
15136: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15137: LD_ADDR_VAR 0 2
15141: PUSH
15142: LD_EXP 38
15146: PPUSH
15147: LD_INT 26
15149: PUSH
15150: LD_INT 2
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PPUSH
15157: CALL_OW 72
15161: ST_TO_ADDR
// if IsOk ( Kaia ) then
15162: LD_EXP 29
15166: PPUSH
15167: CALL_OW 302
15171: IFFALSE 15192
// speaker := [ Kaia , DK ] else
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_EXP 29
15182: PUSH
15183: LD_STRING DK
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: ST_TO_ADDR
15190: GO 15272
// if randomMen then
15192: LD_VAR 0 1
15196: IFFALSE 15231
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15198: LD_ADDR_VAR 0 3
15202: PUSH
15203: LD_VAR 0 1
15207: PUSH
15208: LD_INT 1
15210: PPUSH
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 12
15220: ARRAY
15221: PUSH
15222: LD_STRING DArm
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: ST_TO_ADDR
15229: GO 15272
// if randomWomen then
15231: LD_VAR 0 2
15235: IFFALSE 15270
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15237: LD_ADDR_VAR 0 3
15241: PUSH
15242: LD_VAR 0 2
15246: PUSH
15247: LD_INT 1
15249: PPUSH
15250: LD_VAR 0 2
15254: PPUSH
15255: CALL_OW 12
15259: ARRAY
15260: PUSH
15261: LD_STRING DArf
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: ST_TO_ADDR
15268: GO 15272
// exit ;
15270: GO 15834
// if IsInUnit ( speaker [ 1 ] ) then
15272: LD_VAR 0 3
15276: PUSH
15277: LD_INT 1
15279: ARRAY
15280: PPUSH
15281: CALL_OW 310
15285: IFFALSE 15308
// place := IsInUnit ( speaker [ 1 ] ) else
15287: LD_ADDR_VAR 0 4
15291: PUSH
15292: LD_VAR 0 3
15296: PUSH
15297: LD_INT 1
15299: ARRAY
15300: PPUSH
15301: CALL_OW 310
15305: ST_TO_ADDR
15306: GO 15322
// place := speaker [ 1 ] ;
15308: LD_ADDR_VAR 0 4
15312: PUSH
15313: LD_VAR 0 3
15317: PUSH
15318: LD_INT 1
15320: ARRAY
15321: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15322: LD_VAR 0 4
15326: PPUSH
15327: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15331: LD_VAR 0 4
15335: PPUSH
15336: CALL_OW 250
15340: PPUSH
15341: LD_VAR 0 4
15345: PPUSH
15346: CALL_OW 251
15350: PPUSH
15351: CALL 2975 0 2
// wait ( 0 0$2 ) ;
15355: LD_INT 70
15357: PPUSH
15358: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15362: LD_EXP 34
15366: PPUSH
15367: CALL_OW 305
15371: NOT
15372: IFFALSE 15376
// exit ;
15374: GO 15834
// allowConvoys := false ;
15376: LD_ADDR_EXP 11
15380: PUSH
15381: LD_INT 0
15383: ST_TO_ADDR
// InGameOn ;
15384: CALL_OW 8
// wait ( 0 0$1 ) ;
15388: LD_INT 35
15390: PPUSH
15391: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15395: LD_EXP 34
15399: PPUSH
15400: LD_STRING DI-1-land
15402: PPUSH
15403: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15407: LD_VAR 0 3
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: CALL_OW 310
15420: IFFALSE 15435
// ComExit ( speaker [ 1 ] ) ;
15422: LD_VAR 0 3
15426: PUSH
15427: LD_INT 1
15429: ARRAY
15430: PPUSH
15431: CALL 1078 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15435: LD_VAR 0 3
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: PPUSH
15444: LD_EXP 34
15448: PPUSH
15449: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15453: LD_VAR 0 3
15457: PUSH
15458: LD_INT 1
15460: ARRAY
15461: PPUSH
15462: LD_EXP 34
15466: PPUSH
15467: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15471: LD_EXP 34
15475: PPUSH
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: PPUSH
15485: CALL_OW 119
// wait ( 0 0$1 ) ;
15489: LD_INT 35
15491: PPUSH
15492: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15496: LD_VAR 0 3
15500: PUSH
15501: LD_INT 1
15503: ARRAY
15504: PPUSH
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 2
15512: ARRAY
15513: PUSH
15514: LD_STRING -1-land
15516: STR
15517: PPUSH
15518: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15522: LD_EXP 34
15526: PPUSH
15527: LD_STRING DI-2-land
15529: PPUSH
15530: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15534: LD_VAR 0 3
15538: PUSH
15539: LD_INT 1
15541: ARRAY
15542: PPUSH
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 2
15550: ARRAY
15551: PUSH
15552: LD_STRING -2-land
15554: STR
15555: PPUSH
15556: CALL_OW 88
// if IsInUnit ( Heike ) then
15560: LD_EXP 24
15564: PPUSH
15565: CALL_OW 310
15569: IFFALSE 15580
// ComExitBuilding ( Heike ) ;
15571: LD_EXP 24
15575: PPUSH
15576: CALL_OW 122
// AddComMoveXY ( Heike , 34 , 21 ) ;
15580: LD_EXP 24
15584: PPUSH
15585: LD_INT 34
15587: PPUSH
15588: LD_INT 21
15590: PPUSH
15591: CALL_OW 171
// AddComTurnUnit ( Heike , speaker [ 1 ] ) ;
15595: LD_EXP 24
15599: PPUSH
15600: LD_VAR 0 3
15604: PUSH
15605: LD_INT 1
15607: ARRAY
15608: PPUSH
15609: CALL_OW 179
// ComMoveXY ( Ibrahim , 36 , 22 ) ;
15613: LD_EXP 34
15617: PPUSH
15618: LD_INT 36
15620: PPUSH
15621: LD_INT 22
15623: PPUSH
15624: CALL_OW 111
// ComMoveXY ( speaker [ 1 ] , 35 , 22 ) ;
15628: LD_VAR 0 3
15632: PUSH
15633: LD_INT 1
15635: ARRAY
15636: PPUSH
15637: LD_INT 35
15639: PPUSH
15640: LD_INT 22
15642: PPUSH
15643: CALL_OW 111
// AddComTurnUnit ( [ Ibrahim , speaker [ 1 ] ] , Heike ) ;
15647: LD_EXP 34
15651: PUSH
15652: LD_VAR 0 3
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: LD_EXP 24
15669: PPUSH
15670: CALL_OW 179
// repeat wait ( 0 0$2 ) ;
15674: LD_INT 70
15676: PPUSH
15677: CALL_OW 67
// CenterOnUnits ( speaker [ 1 ] ) ;
15681: LD_VAR 0 3
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: CALL_OW 85
// until GetDistUnits ( speaker [ 1 ] , usDepot ) < 8 ;
15694: LD_VAR 0 3
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: LD_INT 11
15705: PPUSH
15706: CALL_OW 296
15710: PUSH
15711: LD_INT 8
15713: LESS
15714: IFFALSE 15674
// CenterOnUnits ( usDepot ) ;
15716: LD_INT 11
15718: PPUSH
15719: CALL_OW 85
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15723: LD_VAR 0 3
15727: PUSH
15728: LD_INT 1
15730: ARRAY
15731: PPUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 2
15739: ARRAY
15740: PUSH
15741: LD_STRING -3-land
15743: STR
15744: PPUSH
15745: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15749: LD_EXP 24
15753: PPUSH
15754: LD_STRING DH-1-land
15756: PPUSH
15757: CALL_OW 88
// if UnitsInside ( usDepot ) = 6 then
15761: LD_INT 11
15763: PPUSH
15764: CALL_OW 313
15768: PUSH
15769: LD_INT 6
15771: EQUAL
15772: IFFALSE 15790
// ComExitBuilding ( UnitsInside ( usDepot ) [ 1 ] ) ;
15774: LD_INT 11
15776: PPUSH
15777: CALL_OW 313
15781: PUSH
15782: LD_INT 1
15784: ARRAY
15785: PPUSH
15786: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15790: LD_EXP 34
15794: PPUSH
15795: LD_INT 2
15797: PPUSH
15798: CALL_OW 235
// ComEnterUnit ( Ibrahim , usDepot ) ;
15802: LD_EXP 34
15806: PPUSH
15807: LD_INT 11
15809: PPUSH
15810: CALL_OW 120
// InGameOff ;
15814: CALL_OW 9
// ibrahimInDepot := true ;
15818: LD_ADDR_EXP 21
15822: PUSH
15823: LD_INT 1
15825: ST_TO_ADDR
// allowConvoys := true ;
15826: LD_ADDR_EXP 11
15830: PUSH
15831: LD_INT 1
15833: ST_TO_ADDR
// end ;
15834: PPOPN 4
15836: END
// export function IbrahimQuery ; begin
15837: LD_INT 0
15839: PPUSH
// case Query ( IbrahimQuery ) of 1 :
15840: LD_STRING IbrahimQuery
15842: PPUSH
15843: CALL_OW 97
15847: PUSH
15848: LD_INT 1
15850: DOUBLE
15851: EQUAL
15852: IFTRUE 15856
15854: GO 16165
15856: POP
// begin allowConvoys := false ;
15857: LD_ADDR_EXP 11
15861: PUSH
15862: LD_INT 0
15864: ST_TO_ADDR
// ibrahimInDepot := false ;
15865: LD_ADDR_EXP 21
15869: PUSH
15870: LD_INT 0
15872: ST_TO_ADDR
// InGameOn ;
15873: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
15877: LD_EXP 24
15881: PPUSH
15882: CALL_OW 87
// wait ( 0 0$1 ) ;
15886: LD_INT 35
15888: PPUSH
15889: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
15893: LD_EXP 24
15897: PPUSH
15898: LD_STRING DH-1-interrogation
15900: PPUSH
15901: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
15905: LD_EXP 34
15909: PPUSH
15910: LD_STRING DI-1-interrogation
15912: PPUSH
15913: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
15917: LD_EXP 24
15921: PPUSH
15922: LD_STRING DH-2-interrogation
15924: PPUSH
15925: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
15929: LD_EXP 34
15933: PPUSH
15934: LD_STRING DI-2-interrogation
15936: PPUSH
15937: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
15941: LD_EXP 24
15945: PPUSH
15946: LD_STRING DH-3-interrogation
15948: PPUSH
15949: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
15953: LD_EXP 34
15957: PPUSH
15958: LD_STRING DI-3-interrogation
15960: PPUSH
15961: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
15965: LD_EXP 24
15969: PPUSH
15970: LD_STRING DH-4-interrogation
15972: PPUSH
15973: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
15977: LD_EXP 34
15981: PPUSH
15982: LD_STRING DI-4-interrogation
15984: PPUSH
15985: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
15989: LD_EXP 24
15993: PPUSH
15994: LD_STRING DH-5-interrogation
15996: PPUSH
15997: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16001: LD_EXP 34
16005: PPUSH
16006: LD_STRING DI-5-interrogation
16008: PPUSH
16009: CALL_OW 88
// wait ( 0 0$1 ) ;
16013: LD_INT 35
16015: PPUSH
16016: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16020: LD_STRING IbrahimDecisionQuery
16022: PPUSH
16023: CALL_OW 97
16027: PUSH
16028: LD_INT 1
16030: DOUBLE
16031: EQUAL
16032: IFTRUE 16036
16034: GO 16060
16036: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16037: LD_EXP 34
16041: PPUSH
16042: LD_STRING DI-1-kill
16044: PPUSH
16045: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16049: LD_EXP 34
16053: PPUSH
16054: CALL_OW 66
// end ; 2 :
16058: GO 16159
16060: LD_INT 2
16062: DOUBLE
16063: EQUAL
16064: IFTRUE 16068
16066: GO 16158
16068: POP
// begin SetSide ( Ibrahim , 6 ) ;
16069: LD_EXP 34
16073: PPUSH
16074: LD_INT 6
16076: PPUSH
16077: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16081: LD_EXP 34
16085: PPUSH
16086: CALL_OW 122
// AddComMoveXY ( Ibrahim , 32 , 5 ) ;
16090: LD_EXP 34
16094: PPUSH
16095: LD_INT 32
16097: PPUSH
16098: LD_INT 5
16100: PPUSH
16101: CALL_OW 171
// ComExitBuilding ( Heike ) ;
16105: LD_EXP 24
16109: PPUSH
16110: CALL_OW 122
// AddComMoveXY ( Heike , 36 , 21 ) ;
16114: LD_EXP 24
16118: PPUSH
16119: LD_INT 36
16121: PPUSH
16122: LD_INT 21
16124: PPUSH
16125: CALL_OW 171
// AddComWait ( Ibrahim , 1 1$20 ) ;
16129: LD_EXP 34
16133: PPUSH
16134: LD_INT 2800
16136: PPUSH
16137: CALL_OW 202
// AddComMoveXY ( Ibrahim , 38 , 28 ) ;
16141: LD_EXP 34
16145: PPUSH
16146: LD_INT 38
16148: PPUSH
16149: LD_INT 28
16151: PPUSH
16152: CALL_OW 171
// end ; end ;
16156: GO 16159
16158: POP
// InGameOff ;
16159: CALL_OW 9
// end ; 2 :
16163: GO 16179
16165: LD_INT 2
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16178
16173: POP
// exit ; end ;
16174: GO 16202
16176: GO 16179
16178: POP
// allowConvoys := true ;
16179: LD_ADDR_EXP 11
16183: PUSH
16184: LD_INT 1
16186: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16187: LD_INT 1400
16189: PPUSH
16190: CALL_OW 67
// ibrahimIsFree := true ;
16194: LD_ADDR_EXP 22
16198: PUSH
16199: LD_INT 1
16201: ST_TO_ADDR
// end ;
16202: LD_VAR 0 1
16206: RET
// every 0 0$10 trigger ibrahimIsFree and IsInArea ( Ibrahim , americanBaseArea ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b ;
16207: LD_EXP 22
16211: PUSH
16212: LD_EXP 34
16216: PPUSH
16217: LD_INT 7
16219: PPUSH
16220: CALL_OW 308
16224: AND
16225: PUSH
16226: LD_INT 6
16228: PPUSH
16229: LD_EXP 24
16233: PPUSH
16234: CALL_OW 292
16238: AND
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 4
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PPUSH
16250: CALL_OW 69
16254: NOT
16255: AND
16256: PUSH
16257: LD_INT 22
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 21
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PPUSH
16281: CALL_OW 69
16285: NOT
16286: AND
16287: IFFALSE 16843
16289: GO 16291
16291: DISABLE
16292: LD_INT 0
16294: PPUSH
16295: PPUSH
// begin allowConvoys := false ;
16296: LD_ADDR_EXP 11
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// InGameOn ;
16304: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16308: LD_EXP 34
16312: PPUSH
16313: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16317: LD_EXP 24
16321: PPUSH
16322: LD_EXP 34
16326: PPUSH
16327: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16331: LD_EXP 34
16335: PPUSH
16336: LD_EXP 24
16340: PPUSH
16341: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16345: LD_EXP 34
16349: PPUSH
16350: LD_STRING DI-1-free
16352: PPUSH
16353: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16357: LD_EXP 24
16361: PPUSH
16362: LD_STRING DH-1-free
16364: PPUSH
16365: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16369: LD_EXP 34
16373: PPUSH
16374: LD_STRING DI-2-free
16376: PPUSH
16377: CALL_OW 88
// changeClass := 0 ;
16381: LD_ADDR_VAR 0 1
16385: PUSH
16386: LD_INT 0
16388: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16389: LD_STRING IbrahimJoinQuery
16391: PPUSH
16392: CALL_OW 97
16396: PUSH
16397: LD_INT 1
16399: DOUBLE
16400: EQUAL
16401: IFTRUE 16405
16403: GO 16416
16405: POP
// begin changeClass := 1 ;
16406: LD_ADDR_VAR 0 1
16410: PUSH
16411: LD_INT 1
16413: ST_TO_ADDR
// end ; 2 :
16414: GO 16624
16416: LD_INT 2
16418: DOUBLE
16419: EQUAL
16420: IFTRUE 16424
16422: GO 16544
16424: POP
// begin Say ( Heike , DH-1-decline ) ;
16425: LD_EXP 24
16429: PPUSH
16430: LD_STRING DH-1-decline
16432: PPUSH
16433: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16437: LD_EXP 34
16441: PPUSH
16442: LD_STRING DI-1-decline
16444: PPUSH
16445: CALL_OW 88
// InGameOff ;
16449: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16453: LD_EXP 34
16457: PPUSH
16458: LD_INT 30
16460: PPUSH
16461: LD_INT 1
16463: PPUSH
16464: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16468: LD_INT 35
16470: PPUSH
16471: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) ;
16475: LD_EXP 34
16479: PPUSH
16480: LD_INT 30
16482: PPUSH
16483: LD_INT 1
16485: PPUSH
16486: CALL_OW 307
16490: PUSH
16491: LD_INT 22
16493: PUSH
16494: LD_INT 2
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 101
16503: PUSH
16504: LD_INT 6
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 69
16519: NOT
16520: OR
16521: IFFALSE 16468
// RemoveUnit ( Ibrahim ) ;
16523: LD_EXP 34
16527: PPUSH
16528: CALL_OW 64
// SaveVariable ( 1 , IbrahimHasEscaped ) ;
16532: LD_INT 1
16534: PPUSH
16535: LD_STRING IbrahimHasEscaped
16537: PPUSH
16538: CALL_OW 39
// end ; 3 :
16542: GO 16624
16544: LD_INT 3
16546: DOUBLE
16547: EQUAL
16548: IFTRUE 16552
16550: GO 16623
16552: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
16553: LD_EXP 24
16557: PPUSH
16558: LD_STRING DH-1-radio-hq
16560: PPUSH
16561: CALL_OW 88
// Say ( Ibrahim , DO-1-radio-hq ) ;
16565: LD_EXP 34
16569: PPUSH
16570: LD_STRING DO-1-radio-hq
16572: PPUSH
16573: CALL_OW 88
// Say ( Heike , DH-2-radio-hq ) ;
16577: LD_EXP 24
16581: PPUSH
16582: LD_STRING DH-2-radio-hq
16584: PPUSH
16585: CALL_OW 88
// Say ( Ibrahim , DO-2-radio-hq ) ;
16589: LD_EXP 34
16593: PPUSH
16594: LD_STRING DO-2-radio-hq
16596: PPUSH
16597: CALL_OW 88
// Say ( Heike , DH-3-radio-hq ) ;
16601: LD_EXP 24
16605: PPUSH
16606: LD_STRING DH-3-radio-hq
16608: PPUSH
16609: CALL_OW 88
// changeClass := 1 ;
16613: LD_ADDR_VAR 0 1
16617: PUSH
16618: LD_INT 1
16620: ST_TO_ADDR
// end ; end ;
16621: GO 16624
16623: POP
// if changeClass then
16624: LD_VAR 0 1
16628: IFFALSE 16843
// begin Say ( Heike , DH-1-agree ) ;
16630: LD_EXP 24
16634: PPUSH
16635: LD_STRING DH-1-agree
16637: PPUSH
16638: CALL_OW 88
// if IsOk ( Givi ) then
16642: LD_EXP 25
16646: PPUSH
16647: CALL_OW 302
16651: IFFALSE 16689
// begin Say ( Givi , DG-1-agree ) ;
16653: LD_EXP 25
16657: PPUSH
16658: LD_STRING DG-1-agree
16660: PPUSH
16661: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
16665: LD_EXP 24
16669: PPUSH
16670: LD_STRING DH-2-agree
16672: PPUSH
16673: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
16677: LD_EXP 25
16681: PPUSH
16682: LD_STRING DG-2-agree
16684: PPUSH
16685: CALL_OW 88
// end ; if UnitsInside ( usDepot ) = 6 then
16689: LD_INT 11
16691: PPUSH
16692: CALL_OW 313
16696: PUSH
16697: LD_INT 6
16699: EQUAL
16700: IFFALSE 16718
// ComExitBuilding ( UnitsInside ( usDepot ) [ 1 ] ) ;
16702: LD_INT 11
16704: PPUSH
16705: CALL_OW 313
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: PPUSH
16714: CALL_OW 122
// ComEnterUnit ( Ibrahim , usDepot ) ;
16718: LD_EXP 34
16722: PPUSH
16723: LD_INT 11
16725: PPUSH
16726: CALL_OW 120
// InGameOff ;
16730: CALL_OW 9
// allowConvoys := true ;
16734: LD_ADDR_EXP 11
16738: PUSH
16739: LD_INT 1
16741: ST_TO_ADDR
// b := 0 ;
16742: LD_ADDR_VAR 0 2
16746: PUSH
16747: LD_INT 0
16749: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16750: LD_INT 35
16752: PPUSH
16753: CALL_OW 67
// b := IsInUnit ( Ibrahim ) ;
16757: LD_ADDR_VAR 0 2
16761: PUSH
16762: LD_EXP 34
16766: PPUSH
16767: CALL_OW 310
16771: ST_TO_ADDR
// until b and GetType ( b ) = unit_building ;
16772: LD_VAR 0 2
16776: PUSH
16777: LD_VAR 0 2
16781: PPUSH
16782: CALL_OW 247
16786: PUSH
16787: LD_INT 3
16789: EQUAL
16790: AND
16791: IFFALSE 16750
// RemoveUnit ( Ibrahim ) ;
16793: LD_EXP 34
16797: PPUSH
16798: CALL_OW 64
// uc_side := 2 ;
16802: LD_ADDR_OWVAR 20
16806: PUSH
16807: LD_INT 2
16809: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
16810: LD_ADDR_EXP 34
16814: PUSH
16815: LD_STRING Ibrahim
16817: PPUSH
16818: LD_INT 0
16820: PPUSH
16821: LD_STRING 
16823: PPUSH
16824: CALL 251 0 3
16828: ST_TO_ADDR
// PlaceHumanInUnit ( Ibrahim , b ) ;
16829: LD_EXP 34
16833: PPUSH
16834: LD_VAR 0 2
16838: PPUSH
16839: CALL_OW 52
// end ; end ;
16843: PPOPN 2
16845: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
16846: LD_EXP 10
16850: PUSH
16851: LD_EXP 17
16855: PUSH
16856: LD_INT 1
16858: LESS
16859: AND
16860: IFFALSE 17239
16862: GO 16864
16864: DISABLE
// begin DialogueOn ;
16865: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
16869: LD_EXP 24
16873: PPUSH
16874: LD_STRING DH-1-final
16876: PPUSH
16877: CALL_OW 88
// if tick <= [ 68 68$00 , 65 65$00 , 63 63$00 ] [ Difficulty ] then
16881: LD_OWVAR 1
16885: PUSH
16886: LD_INT 142800
16888: PUSH
16889: LD_INT 136500
16891: PUSH
16892: LD_INT 132300
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: PUSH
16900: LD_OWVAR 67
16904: ARRAY
16905: LESSEQUAL
16906: IFFALSE 16920
// AddMedal ( med1 , 1 ) else
16908: LD_STRING med1
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: CALL_OW 101
16918: GO 16931
// AddMedal ( med1 , - 1 ) ;
16920: LD_STRING med1
16922: PPUSH
16923: LD_INT 1
16925: NEG
16926: PPUSH
16927: CALL_OW 101
// if vehCounter >= 2 then
16931: LD_EXP 18
16935: PUSH
16936: LD_INT 2
16938: GREATEREQUAL
16939: IFFALSE 16953
// AddMedal ( med2 , 1 ) else
16941: LD_STRING med2
16943: PPUSH
16944: LD_INT 1
16946: PPUSH
16947: CALL_OW 101
16951: GO 16964
// AddMedal ( med2 , - 1 ) ;
16953: LD_STRING med2
16955: PPUSH
16956: LD_INT 1
16958: NEG
16959: PPUSH
16960: CALL_OW 101
// if deadCounter = 0 then
16964: LD_EXP 8
16968: PUSH
16969: LD_INT 0
16971: EQUAL
16972: IFFALSE 16986
// AddMedal ( med3 , 1 ) else
16974: LD_STRING med3
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: CALL_OW 101
16984: GO 16997
// AddMedal ( med3 , - 1 ) ;
16986: LD_STRING med3
16988: PPUSH
16989: LD_INT 1
16991: NEG
16992: PPUSH
16993: CALL_OW 101
// GiveMedals ( MAIN ) ;
16997: LD_STRING MAIN
16999: PPUSH
17000: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17004: LD_INT 22
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 23
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 21
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: PPUSH
17044: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17048: LD_EXP 24
17052: PPUSH
17053: LD_STRING 03_Heike
17055: PPUSH
17056: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17060: LD_EXP 28
17064: PPUSH
17065: LD_STRING 03_Aviradze
17067: PPUSH
17068: CALL_OW 38
// if Givi then
17072: LD_EXP 25
17076: IFFALSE 17090
// SaveCharacters ( Givi , 03_Givi ) ;
17078: LD_EXP 25
17082: PPUSH
17083: LD_STRING 03_Givi
17085: PPUSH
17086: CALL_OW 38
// if Mike then
17090: LD_EXP 26
17094: IFFALSE 17108
// SaveCharacters ( Mike , 03_Mike ) ;
17096: LD_EXP 26
17100: PPUSH
17101: LD_STRING 03_Mike
17103: PPUSH
17104: CALL_OW 38
// if Kamil then
17108: LD_EXP 27
17112: IFFALSE 17126
// SaveCharacters ( Kamil , 03_Kamil ) ;
17114: LD_EXP 27
17118: PPUSH
17119: LD_STRING 03_Kamil
17121: PPUSH
17122: CALL_OW 38
// if Kaia then
17126: LD_EXP 29
17130: IFFALSE 17144
// SaveCharacters ( Kaia , 03_Kaia ) ;
17132: LD_EXP 29
17136: PPUSH
17137: LD_STRING 03_Kaia
17139: PPUSH
17140: CALL_OW 38
// if Sophia then
17144: LD_EXP 30
17148: IFFALSE 17162
// SaveCharacters ( Sophia , 03_Sophia ) ;
17150: LD_EXP 30
17154: PPUSH
17155: LD_STRING 03_Sophia
17157: PPUSH
17158: CALL_OW 38
// if Markov then
17162: LD_EXP 31
17166: IFFALSE 17180
// SaveCharacters ( Markov , 03_Markov ) ;
17168: LD_EXP 31
17172: PPUSH
17173: LD_STRING 03_Markov
17175: PPUSH
17176: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17180: LD_EXP 34
17184: PUSH
17185: LD_EXP 34
17189: PPUSH
17190: CALL_OW 255
17194: PUSH
17195: LD_INT 2
17197: EQUAL
17198: AND
17199: IFFALSE 17213
// SaveCharacters ( Markov , 03_Ibrahim ) ;
17201: LD_EXP 31
17205: PPUSH
17206: LD_STRING 03_Ibrahim
17208: PPUSH
17209: CALL_OW 38
// if heikeSecondSquad then
17213: LD_EXP 38
17217: IFFALSE 17231
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17219: LD_EXP 38
17223: PPUSH
17224: LD_STRING 03_others
17226: PPUSH
17227: CALL_OW 38
// YouWin ;
17231: CALL_OW 103
// DialogueOff ;
17235: CALL_OW 7
// end ; end_of_file
17239: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17240: LD_VAR 0 1
17244: PUSH
17245: LD_EXP 24
17249: EQUAL
17250: IFFALSE 17259
// YouLost ( Heike ) ;
17252: LD_STRING Heike
17254: PPUSH
17255: CALL_OW 104
// if un = Aviradze then
17259: LD_VAR 0 1
17263: PUSH
17264: LD_EXP 28
17268: EQUAL
17269: IFFALSE 17278
// YouLost ( Aviradze ) ;
17271: LD_STRING Aviradze
17273: PPUSH
17274: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17278: LD_VAR 0 1
17282: PUSH
17283: LD_INT 11
17285: EQUAL
17286: PUSH
17287: LD_EXP 10
17291: NOT
17292: AND
17293: IFFALSE 17302
// YouLost ( Depot ) ;
17295: LD_STRING Depot
17297: PPUSH
17298: CALL_OW 104
// if un = Farmer then
17302: LD_VAR 0 1
17306: PUSH
17307: LD_EXP 32
17311: EQUAL
17312: IFFALSE 17321
// YouLost ( Farmer ) ;
17314: LD_STRING Farmer
17316: PPUSH
17317: CALL_OW 104
// if un in usForces then
17321: LD_VAR 0 1
17325: PUSH
17326: LD_EXP 40
17330: IN
17331: IFFALSE 17349
// usForces := usForces diff un ;
17333: LD_ADDR_EXP 40
17337: PUSH
17338: LD_EXP 40
17342: PUSH
17343: LD_VAR 0 1
17347: DIFF
17348: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17349: LD_VAR 0 1
17353: PUSH
17354: LD_INT 22
17356: PUSH
17357: LD_INT 2
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 23
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 21
17376: PUSH
17377: LD_INT 1
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 69
17393: IN
17394: IFFALSE 17410
// deadCounter := deadCounter + 1 ;
17396: LD_ADDR_EXP 8
17400: PUSH
17401: LD_EXP 8
17405: PUSH
17406: LD_INT 1
17408: PLUS
17409: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
17410: LD_VAR 0 1
17414: PUSH
17415: LD_INT 22
17417: PUSH
17418: LD_INT 4
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 34
17427: PUSH
17428: LD_INT 12
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PPUSH
17439: CALL_OW 69
17443: IN
17444: PUSH
17445: LD_EXP 15
17449: NOT
17450: AND
17451: IFFALSE 17461
// firstConvoyDestroyed := true ;
17453: LD_ADDR_EXP 15
17457: PUSH
17458: LD_INT 1
17460: ST_TO_ADDR
// if un in usAttackers then
17461: LD_VAR 0 1
17465: PUSH
17466: LD_EXP 43
17470: IN
17471: IFFALSE 17489
// usAttackers := usAttackers diff un ;
17473: LD_ADDR_EXP 43
17477: PUSH
17478: LD_EXP 43
17482: PUSH
17483: LD_VAR 0 1
17487: DIFF
17488: ST_TO_ADDR
// end ;
17489: PPOPN 1
17491: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
17492: LD_VAR 0 2
17496: PUSH
17497: LD_EXP 34
17501: EQUAL
17502: PUSH
17503: LD_EXP 21
17507: AND
17508: IFFALSE 17543
// begin Video ( true ) ;
17510: LD_INT 1
17512: PPUSH
17513: CALL 974 0 1
// ComEnterUnit ( Ibrahim , usDepot ) ;
17517: LD_EXP 34
17521: PPUSH
17522: LD_INT 11
17524: PPUSH
17525: CALL_OW 120
// wait ( 0 0$1 ) ;
17529: LD_INT 35
17531: PPUSH
17532: CALL_OW 67
// Video ( false ) ;
17536: LD_INT 0
17538: PPUSH
17539: CALL 974 0 1
// end ; end ;
17543: PPOPN 2
17545: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
17546: LD_VAR 0 2
17550: PUSH
17551: LD_EXP 24
17555: EQUAL
17556: PUSH
17557: LD_VAR 0 1
17561: PUSH
17562: LD_INT 11
17564: EQUAL
17565: AND
17566: PUSH
17567: LD_EXP 21
17571: AND
17572: IFFALSE 17578
// IbrahimQuery ;
17574: CALL 15837 0 0
// end ;
17578: PPOPN 2
17580: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin if oldId in usAttackers then
17581: LD_VAR 0 2
17585: PUSH
17586: LD_EXP 43
17590: IN
17591: IFFALSE 17609
// usAttackers := usAttackers diff oldId ;
17593: LD_ADDR_EXP 43
17597: PUSH
17598: LD_EXP 43
17602: PUSH
17603: LD_VAR 0 2
17607: DIFF
17608: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
17609: LD_VAR 0 3
17613: PUSH
17614: LD_INT 4
17616: EQUAL
17617: PUSH
17618: LD_EXP 15
17622: NOT
17623: AND
17624: IFFALSE 17634
// firstConvoyDestroyed := true ;
17626: LD_ADDR_EXP 15
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// if GetWeapon ( oldId ) = us_cargo_bay and GetCargo ( oldId , mat_cans ) = 0 then
17634: LD_VAR 0 2
17638: PPUSH
17639: CALL_OW 264
17643: PUSH
17644: LD_INT 12
17646: EQUAL
17647: PUSH
17648: LD_VAR 0 2
17652: PPUSH
17653: LD_INT 1
17655: PPUSH
17656: CALL_OW 289
17660: PUSH
17661: LD_INT 0
17663: EQUAL
17664: AND
17665: IFFALSE 17671
// EmptyCargoDialog ;
17667: CALL 14614 0 0
// end ;
17671: PPOPN 4
17673: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
17674: LD_VAR 0 1
17678: PUSH
17679: LD_INT 2
17681: EQUAL
17682: PUSH
17683: LD_VAR 0 2
17687: PUSH
17688: LD_INT 5
17690: EQUAL
17691: AND
17692: IFFALSE 17701
// YouLost ( Attack ) ;
17694: LD_STRING Attack
17696: PPUSH
17697: CALL_OW 104
// end ;
17701: PPOPN 2
17703: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 then
17704: LD_VAR 0 1
17708: PPUSH
17709: CALL_OW 255
17713: PUSH
17714: LD_INT 1
17716: EQUAL
17717: IFFALSE 17851
// begin if GetBType ( b ) = b_lab then
17719: LD_VAR 0 1
17723: PPUSH
17724: CALL_OW 266
17728: PUSH
17729: LD_INT 6
17731: EQUAL
17732: IFFALSE 17772
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
17734: LD_EXP 40
17738: PPUSH
17739: LD_INT 25
17741: PUSH
17742: LD_INT 4
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PPUSH
17749: CALL_OW 72
17753: PPUSH
17754: LD_VAR 0 1
17758: PPUSH
17759: CALL_OW 120
// AmLabResearch ( b ) ;
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL 5764 0 1
// end ; if GetBType ( b ) = b_armoury then
17772: LD_VAR 0 1
17776: PPUSH
17777: CALL_OW 266
17781: PUSH
17782: LD_INT 4
17784: EQUAL
17785: IFFALSE 17833
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
17787: LD_EXP 40
17791: PPUSH
17792: LD_INT 25
17794: PUSH
17795: LD_INT 1
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 3
17804: PUSH
17805: LD_INT 54
17807: PUSH
17808: EMPTY
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 72
17823: PPUSH
17824: LD_VAR 0 1
17828: PPUSH
17829: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
17833: LD_ADDR_EXP 42
17837: PUSH
17838: LD_EXP 42
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: CALL_OW 3
17850: ST_TO_ADDR
// end ; end ;
17851: PPOPN 1
17853: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
17854: LD_VAR 0 1
17858: PPUSH
17859: CALL_OW 255
17863: PUSH
17864: LD_INT 2
17866: EQUAL
17867: IFFALSE 17883
// vehCounter := vehCounter + 1 ;
17869: LD_ADDR_EXP 18
17873: PUSH
17874: LD_EXP 18
17878: PUSH
17879: LD_INT 1
17881: PLUS
17882: ST_TO_ADDR
// end ;
17883: PPOPN 2
17885: END
// on SailEvent ( event ) do begin if event = eventAttack then
17886: LD_VAR 0 1
17890: PUSH
17891: LD_EXP 20
17895: EQUAL
17896: IFFALSE 17902
// AmericanAttack ;
17898: CALL 7204 0 0
// end ; end_of_file
17902: PPOPN 1
17904: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] do
17905: LD_OWVAR 1
17909: PUSH
17910: LD_INT 8400
17912: PUSH
17913: LD_INT 6300
17915: PUSH
17916: LD_INT 5250
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: PUSH
17924: LD_OWVAR 67
17928: ARRAY
17929: LESSEQUAL
17930: IFFALSE 17957
17932: GO 17934
17934: DISABLE
// begin enable ;
17935: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17936: LD_INT 1
17938: PPUSH
17939: LD_INT 5
17941: PPUSH
17942: CALL_OW 12
17946: PPUSH
17947: LD_INT 9
17949: PPUSH
17950: LD_INT 1
17952: PPUSH
17953: CALL_OW 55
// end ;
17957: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 26 26$00 , 23 23$00 , 20 20$00 ] [ Difficulty ] do
17958: LD_EXP 6
17962: PUSH
17963: LD_OWVAR 1
17967: PUSH
17968: LD_INT 54600
17970: PUSH
17971: LD_INT 48300
17973: PUSH
17974: LD_INT 42000
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: PUSH
17982: LD_OWVAR 67
17986: ARRAY
17987: LESSEQUAL
17988: AND
17989: IFFALSE 18016
17991: GO 17993
17993: DISABLE
// begin enable ;
17994: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17995: LD_INT 1
17997: PPUSH
17998: LD_INT 5
18000: PPUSH
18001: CALL_OW 12
18005: PPUSH
18006: LD_INT 9
18008: PPUSH
18009: LD_INT 1
18011: PPUSH
18012: CALL_OW 55
// end ; end_of_file
18016: END
// every 0 0$1 trigger not retreatAllowed and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18017: LD_EXP 10
18021: NOT
18022: PUSH
18023: LD_EXP 4
18027: AND
18028: PUSH
18029: LD_EXP 12
18033: PUSH
18034: LD_EXP 13
18038: LESSEQUAL
18039: AND
18040: IFFALSE 18130
18042: GO 18044
18044: DISABLE
// begin enable ;
18045: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
18046: LD_ADDR_OWVAR 47
18050: PUSH
18051: LD_STRING #X103-1
18053: PUSH
18054: LD_EXP 12
18058: PUSH
18059: LD_EXP 13
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18069: LD_ADDR_EXP 12
18073: PUSH
18074: LD_INT 5
18076: PPUSH
18077: CALL_OW 274
18081: PPUSH
18082: LD_INT 1
18084: PPUSH
18085: CALL_OW 275
18089: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18090: LD_INT 10
18092: PPUSH
18093: LD_INT 1
18095: PPUSH
18096: CALL_OW 287
18100: PUSH
18101: LD_INT 0
18103: EQUAL
18104: IFFALSE 18122
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
18106: LD_ADDR_EXP 14
18110: PUSH
18111: LD_EXP 14
18115: PUSH
18116: LD_INT 35
18118: MINUS
18119: ST_TO_ADDR
18120: GO 18130
// farmerCratesCounter := 30 30$00 ;
18122: LD_ADDR_EXP 14
18126: PUSH
18127: LD_INT 63000
18129: ST_TO_ADDR
// end ; end_of_file
18130: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
18131: GO 18133
18133: DISABLE
// begin ru_radar := 98 ;
18134: LD_ADDR_EXP 44
18138: PUSH
18139: LD_INT 98
18141: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18142: LD_ADDR_EXP 45
18146: PUSH
18147: LD_INT 89
18149: ST_TO_ADDR
// us_hack := 99 ;
18150: LD_ADDR_EXP 46
18154: PUSH
18155: LD_INT 99
18157: ST_TO_ADDR
// us_artillery := 97 ;
18158: LD_ADDR_EXP 47
18162: PUSH
18163: LD_INT 97
18165: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18166: LD_ADDR_EXP 48
18170: PUSH
18171: LD_INT 91
18173: ST_TO_ADDR
// tech_Artillery := 80 ;
18174: LD_ADDR_EXP 49
18178: PUSH
18179: LD_INT 80
18181: ST_TO_ADDR
// tech_RadMat := 81 ;
18182: LD_ADDR_EXP 50
18186: PUSH
18187: LD_INT 81
18189: ST_TO_ADDR
// tech_BasicTools := 82 ;
18190: LD_ADDR_EXP 51
18194: PUSH
18195: LD_INT 82
18197: ST_TO_ADDR
// tech_Cargo := 83 ;
18198: LD_ADDR_EXP 52
18202: PUSH
18203: LD_INT 83
18205: ST_TO_ADDR
// tech_Track := 84 ;
18206: LD_ADDR_EXP 53
18210: PUSH
18211: LD_INT 84
18213: ST_TO_ADDR
// tech_Crane := 85 ;
18214: LD_ADDR_EXP 54
18218: PUSH
18219: LD_INT 85
18221: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18222: LD_ADDR_EXP 55
18226: PUSH
18227: LD_INT 86
18229: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18230: LD_ADDR_EXP 56
18234: PUSH
18235: LD_INT 87
18237: ST_TO_ADDR
// end ;
18238: END
