// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4074 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 8985 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 45
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36316 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36316 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36316 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36316 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36316 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36316 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36316 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36316 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36316 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36316 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36316 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3084
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 70
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 31
2647: PPUSH
2648: LD_INT 108
2650: PPUSH
2651: LD_INT 50
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2661: LD_INT 35
2663: PPUSH
2664: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2668: LD_INT 22
2670: PUSH
2671: LD_INT 5
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 4
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 57
2693: PUSH
2694: EMPTY
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: IFFALSE 2661
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_INT 22
2719: PUSH
2720: LD_INT 5
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 30
2729: PUSH
2730: LD_INT 4
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 57
2742: PUSH
2743: EMPTY
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PUSH
2760: LD_INT 1
2762: ARRAY
2763: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_EXP 39
2773: PPUSH
2774: LD_INT 25
2776: PUSH
2777: LD_INT 1
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 72
2788: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2789: LD_VAR 0 2
2793: PPUSH
2794: LD_VAR 0 3
2798: PPUSH
2799: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2803: LD_INT 35
2805: PPUSH
2806: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2810: LD_INT 22
2812: PUSH
2813: LD_INT 5
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: LD_INT 31
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 57
2835: PUSH
2836: EMPTY
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: PPUSH
2848: CALL_OW 69
2852: PUSH
2853: LD_INT 2
2855: GREATEREQUAL
2856: IFFALSE 2803
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: LD_EXP 39
2867: PPUSH
2868: LD_INT 25
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 72
2882: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2883: LD_VAR 0 2
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_INT 5
2894: PPUSH
2895: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 2
2906: ARRAY
2907: PUSH
2908: LD_VAR 0 2
2912: PUSH
2913: LD_INT 3
2915: ARRAY
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2930: LD_VAR 0 2
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PUSH
2939: LD_VAR 0 2
2943: PUSH
2944: LD_INT 3
2946: ARRAY
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 2
2966: ARRAY
2967: PUSH
2968: LD_VAR 0 2
2972: PUSH
2973: LD_INT 3
2975: ARRAY
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 5
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 30
3002: PUSH
3003: LD_INT 31
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 69
3018: ST_TO_ADDR
// for i := 1 to 2 do
3019: LD_ADDR_VAR 0 1
3023: PUSH
3024: DOUBLE
3025: LD_INT 1
3027: DEC
3028: ST_TO_ADDR
3029: LD_INT 2
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3067
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3035: LD_VAR 0 2
3039: PUSH
3040: LD_VAR 0 1
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ARRAY
3049: PPUSH
3050: LD_VAR 0 4
3054: PUSH
3055: LD_VAR 0 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 180
3065: GO 3032
3067: POP
3068: POP
// wait ( 1 1$00 ) ;
3069: LD_INT 2100
3071: PPUSH
3072: CALL_OW 67
// farmerBaseReady := true ;
3076: LD_ADDR_EXP 4
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// end ;
3084: PPOPN 4
3086: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3087: LD_EXP 4
3091: PUSH
3092: LD_EXP 11
3096: NOT
3097: AND
3098: IFFALSE 3620
3100: GO 3102
3102: DISABLE
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// begin enable ;
3110: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: LD_EXP 39
3120: PPUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PUSH
3136: LD_EXP 36
3140: ADD
3141: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_EXP 39
3151: PPUSH
3152: LD_INT 25
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PPUSH
3162: CALL_OW 72
3166: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3167: LD_ADDR_VAR 0 5
3171: PUSH
3172: LD_INT 22
3174: PUSH
3175: LD_INT 5
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 21
3184: PUSH
3185: LD_INT 3
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 24
3197: PUSH
3198: LD_INT 1000
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3219: LD_ADDR_VAR 0 4
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 5
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 4
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3253: LD_VAR 0 4
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: CALL_OW 302
3266: IFFALSE 3330
// for i in sol do
3268: LD_ADDR_VAR 0 1
3272: PUSH
3273: LD_VAR 0 3
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3328
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 256
3290: PUSH
3291: LD_INT 999
3293: LESS
3294: PUSH
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 310
3304: NOT
3305: AND
3306: IFFALSE 3326
// ComEnterUnit ( i , arm [ 1 ] ) ;
3308: LD_VAR 0 1
3312: PPUSH
3313: LD_VAR 0 4
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: CALL_OW 120
3326: GO 3278
3328: POP
3329: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3330: LD_VAR 0 2
3334: NOT
3335: PUSH
3336: LD_INT 22
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 21
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: NOT
3365: AND
3366: IFFALSE 3458
// begin uc_side := 5 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 5
3375: ST_TO_ADDR
// uc_nation := 2 ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 2
3383: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3384: LD_INT 0
3386: PPUSH
3387: LD_INT 2
3389: PPUSH
3390: LD_INT 2
3392: PPUSH
3393: CALL_OW 380
// eng := CreateHuman ;
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: CALL_OW 44
3406: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3407: LD_VAR 0 2
3411: PPUSH
3412: LD_INT 102
3414: PPUSH
3415: LD_INT 8
3417: PPUSH
3418: LD_INT 0
3420: PPUSH
3421: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3425: LD_VAR 0 2
3429: PPUSH
3430: LD_INT 110
3432: PPUSH
3433: LD_INT 60
3435: PPUSH
3436: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3440: LD_ADDR_EXP 39
3444: PUSH
3445: LD_EXP 39
3449: PUSH
3450: LD_VAR 0 2
3454: UNION
3455: ST_TO_ADDR
// end else
3456: GO 3620
// begin for i in eng do
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3618
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3471: LD_INT 10
3473: PPUSH
3474: LD_INT 1
3476: PPUSH
3477: CALL_OW 287
3481: IFFALSE 3532
// begin if IsInUnit ( i ) then
3483: LD_VAR 0 1
3487: PPUSH
3488: CALL_OW 310
3492: IFFALSE 3503
// ComExitBuilding ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_INT 10
3510: PPUSH
3511: CALL_OW 308
3515: NOT
3516: IFFALSE 3530
// AddComMoveToArea ( i , collectFarmerArea ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 10
3525: PPUSH
3526: CALL_OW 173
// end else
3530: GO 3616
// begin if damagedBuilding then
3532: LD_VAR 0 5
3536: IFFALSE 3580
// begin if IsInUnit ( i ) then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 310
3547: IFFALSE 3560
// ComExitBuilding ( i ) else
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 122
3558: GO 3578
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_VAR 0 5
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: CALL_OW 130
// end else
3578: GO 3616
// if not IsInUnit ( i ) and not HasTask ( i ) then
3580: LD_VAR 0 1
3584: PPUSH
3585: CALL_OW 310
3589: NOT
3590: PUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL_OW 314
3600: NOT
3601: AND
3602: IFFALSE 3616
// ComEnterUnit ( i , arDepot ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_INT 5
3611: PPUSH
3612: CALL_OW 120
// end ; end ;
3616: GO 3468
3618: POP
3619: POP
// end ; end ;
3620: PPOPN 5
3622: END
// export function StartCargoEvacuation ; begin
3623: LD_INT 0
3625: PPUSH
// while omarCargoCounter > 0 do
3626: LD_EXP 21
3630: PUSH
3631: LD_INT 0
3633: GREATER
3634: IFFALSE 3951
// begin wait ( 0 0$20 ) ;
3636: LD_INT 700
3638: PPUSH
3639: CALL_OW 67
// omarCargo := PrepareCargo ;
3643: LD_ADDR_EXP 43
3647: PUSH
3648: CALL 3956 0 0
3652: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3653: LD_EXP 43
3657: PPUSH
3658: LD_INT 0
3660: PPUSH
3661: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3665: LD_EXP 43
3669: PPUSH
3670: LD_INT 107
3672: PPUSH
3673: LD_INT 59
3675: PPUSH
3676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3680: LD_INT 35
3682: PPUSH
3683: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3687: LD_EXP 43
3691: PPUSH
3692: LD_INT 107
3694: PPUSH
3695: LD_INT 59
3697: PPUSH
3698: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 302
3711: NOT
3712: PUSH
3713: LD_EXP 43
3717: PPUSH
3718: CALL_OW 301
3722: OR
3723: IFFALSE 3727
// continue ;
3725: GO 3680
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3727: LD_EXP 43
3731: PPUSH
3732: LD_INT 107
3734: PPUSH
3735: LD_INT 59
3737: PPUSH
3738: CALL_OW 307
3742: PUSH
3743: LD_EXP 43
3747: PPUSH
3748: LD_INT 5
3750: PPUSH
3751: CALL_OW 296
3755: PUSH
3756: LD_INT 6
3758: LESS
3759: OR
3760: IFFALSE 3680
// SetTag ( omarCargo , 1 ) ;
3762: LD_EXP 43
3766: PPUSH
3767: LD_INT 1
3769: PPUSH
3770: CALL_OW 109
// wait ( 0 0$05 ) ;
3774: LD_INT 175
3776: PPUSH
3777: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3781: LD_EXP 43
3785: PPUSH
3786: LD_INT 5
3788: PPUSH
3789: LD_INT 1
3791: PPUSH
3792: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3796: LD_EXP 43
3800: PPUSH
3801: LD_INT 103
3803: PPUSH
3804: LD_INT 9
3806: PPUSH
3807: CALL_OW 171
// wait ( 0 0$1 ) ;
3811: LD_INT 35
3813: PPUSH
3814: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3818: LD_EXP 43
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 100
3828: PPUSH
3829: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3840: LD_EXP 43
3844: PPUSH
3845: LD_INT 103
3847: PPUSH
3848: LD_INT 9
3850: PPUSH
3851: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3855: LD_EXP 43
3859: PPUSH
3860: CALL_OW 302
3864: NOT
3865: PUSH
3866: LD_EXP 43
3870: PPUSH
3871: CALL_OW 301
3875: OR
3876: IFFALSE 3880
// continue ;
3878: GO 3833
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3880: LD_EXP 43
3884: PPUSH
3885: LD_INT 103
3887: PPUSH
3888: LD_INT 9
3890: PPUSH
3891: CALL_OW 307
3895: PUSH
3896: LD_EXP 43
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: CALL_OW 308
3908: OR
3909: PUSH
3910: LD_EXP 43
3914: PPUSH
3915: CALL_OW 110
3919: PUSH
3920: LD_INT 0
3922: GREATER
3923: AND
3924: IFFALSE 3833
// RemoveUnit ( omarCargo ) ;
3926: LD_EXP 43
3930: PPUSH
3931: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
3935: LD_ADDR_EXP 21
3939: PUSH
3940: LD_EXP 21
3944: PUSH
3945: LD_INT 1
3947: MINUS
3948: ST_TO_ADDR
// end ;
3949: GO 3626
// end ;
3951: LD_VAR 0 1
3955: RET
// export function PrepareCargo ; var un , veh ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_INT 5
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: LD_INT 13
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 32
3983: PPUSH
3984: LD_INT 80
3986: PPUSH
3987: CALL 313 0 7
3991: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3992: LD_VAR 0 3
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4004: LD_VAR 0 3
4008: PPUSH
4009: LD_INT 101
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 2
4030: PPUSH
4031: CALL_OW 380
// un := CreateHuman ;
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: CALL_OW 44
4044: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_VAR 0 3
4054: PPUSH
4055: CALL_OW 52
// result := veh ;
4059: LD_ADDR_VAR 0 1
4063: PUSH
4064: LD_VAR 0 3
4068: ST_TO_ADDR
// end ; end_of_file
4069: LD_VAR 0 1
4073: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// usForces := [ ] ;
4079: LD_ADDR_EXP 44
4083: PUSH
4084: EMPTY
4085: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4086: LD_ADDR_EXP 46
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: LD_INT 32
4096: PUSH
4097: LD_INT 27
4099: PUSH
4100: LD_INT 1
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 4
4111: PUSH
4112: LD_INT 43
4114: PUSH
4115: LD_INT 24
4117: PUSH
4118: LD_INT 5
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 27
4129: PUSH
4130: LD_INT 29
4132: PUSH
4133: LD_INT 21
4135: PUSH
4136: LD_INT 0
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4150: LD_INT 11
4152: PPUSH
4153: CALL_OW 274
4157: PPUSH
4158: LD_INT 1
4160: PPUSH
4161: LD_INT 150
4163: PUSH
4164: LD_INT 120
4166: PUSH
4167: LD_INT 100
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: PUSH
4175: LD_OWVAR 67
4179: ARRAY
4180: PPUSH
4181: CALL_OW 277
// if Difficulty = 1 then
4185: LD_OWVAR 67
4189: PUSH
4190: LD_INT 1
4192: EQUAL
4193: IFFALSE 4202
// RemoveUnit ( hillBun ) ;
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 64
// uc_side := 1 ;
4202: LD_ADDR_OWVAR 20
4206: PUSH
4207: LD_INT 1
4209: ST_TO_ADDR
// uc_nation := 1 ;
4210: LD_ADDR_OWVAR 21
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// hc_gallery :=  ;
4218: LD_ADDR_OWVAR 33
4222: PUSH
4223: LD_STRING 
4225: ST_TO_ADDR
// hc_name :=  ;
4226: LD_ADDR_OWVAR 26
4230: PUSH
4231: LD_STRING 
4233: ST_TO_ADDR
// hc_importance := 0 ;
4234: LD_ADDR_OWVAR 32
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4242: LD_INT 1
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: CALL_OW 380
// usCommander := CreateHuman ;
4255: LD_ADDR_EXP 45
4259: PUSH
4260: CALL_OW 44
4264: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4265: LD_EXP 45
4269: PPUSH
4270: LD_INT 11
4272: PPUSH
4273: CALL_OW 52
// if Difficulty > 1 then
4277: LD_OWVAR 67
4281: PUSH
4282: LD_INT 1
4284: GREATER
4285: IFFALSE 4367
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4287: LD_INT 0
4289: PPUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 1
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: LD_OWVAR 67
4311: ARRAY
4312: PPUSH
4313: CALL_OW 380
// un := CreateHuman ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: CALL_OW 44
4326: ST_TO_ADDR
// usForces := usForces union un ;
4327: LD_ADDR_EXP 44
4331: PUSH
4332: LD_EXP 44
4336: PUSH
4337: LD_VAR 0 3
4341: UNION
4342: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4343: LD_VAR 0 3
4347: PPUSH
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4355: LD_VAR 0 3
4359: PPUSH
4360: LD_INT 14
4362: PPUSH
4363: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4367: LD_ADDR_VAR 0 2
4371: PUSH
4372: DOUBLE
4373: LD_INT 1
4375: DEC
4376: ST_TO_ADDR
4377: LD_INT 2
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PUSH
4397: FOR_TO
4398: IFFALSE 4540
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4400: LD_INT 0
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_INT 1
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_OWVAR 67
4424: ARRAY
4425: PPUSH
4426: CALL_OW 380
// un := CreateHuman ;
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// usForces := usForces union un ;
4440: LD_ADDR_EXP 44
4444: PUSH
4445: LD_EXP 44
4449: PUSH
4450: LD_VAR 0 3
4454: UNION
4455: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4456: LD_VAR 0 3
4460: PPUSH
4461: LD_INT 39
4463: PPUSH
4464: LD_INT 24
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 50
// if i < 3 then
4477: LD_VAR 0 2
4481: PUSH
4482: LD_INT 3
4484: LESS
4485: IFFALSE 4538
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 22
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 58
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: LD_INT 30
4510: PUSH
4511: LD_INT 31
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: PUSH
4528: LD_VAR 0 2
4532: ARRAY
4533: PPUSH
4534: CALL_OW 120
// end ;
4538: GO 4397
4540: POP
4541: POP
// for i := 1 to 2 do
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_INT 2
4554: PUSH
4555: FOR_TO
4556: IFFALSE 4620
// begin PrepareHuman ( false , 2 , 2 ) ;
4558: LD_INT 0
4560: PPUSH
4561: LD_INT 2
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: CALL_OW 380
// un := CreateHuman ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: CALL_OW 44
4580: ST_TO_ADDR
// usForces := usForces union un ;
4581: LD_ADDR_EXP 44
4585: PUSH
4586: LD_EXP 44
4590: PUSH
4591: LD_VAR 0 3
4595: UNION
4596: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_INT 39
4604: PPUSH
4605: LD_INT 24
4607: PPUSH
4608: LD_INT 4
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 50
// end ;
4618: GO 4555
4620: POP
4621: POP
// PrepareHuman ( false , 4 , 1 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 4
4627: PPUSH
4628: LD_INT 1
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: LD_VAR 0 1
4686: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4687: LD_EXP 44
4691: PUSH
4692: LD_EXP 6
4696: NOT
4697: AND
4698: PUSH
4699: LD_EXP 14
4703: NOT
4704: AND
4705: IFFALSE 5136
4707: GO 4709
4709: DISABLE
4710: LD_INT 0
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
// begin enable ;
4717: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4718: LD_ADDR_VAR 0 3
4722: PUSH
4723: LD_EXP 44
4727: PPUSH
4728: LD_INT 25
4730: PUSH
4731: LD_INT 2
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 72
4742: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: LD_EXP 44
4752: PPUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 72
4767: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_EXP 44
4777: PPUSH
4778: LD_INT 25
4780: PUSH
4781: LD_INT 4
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PPUSH
4788: CALL_OW 72
4792: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4793: LD_INT 7
4795: PPUSH
4796: LD_INT 22
4798: PUSH
4799: LD_INT 2
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PUSH
4811: LD_INT 1
4813: EQUAL
4814: IFFALSE 4890
// for i in sol do
4816: LD_ADDR_VAR 0 1
4820: PUSH
4821: LD_VAR 0 4
4825: PUSH
4826: FOR_IN
4827: IFFALSE 4888
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4829: LD_VAR 0 1
4833: PPUSH
4834: CALL_OW 310
4838: NOT
4839: PUSH
4840: LD_VAR 0 1
4844: PPUSH
4845: CALL_OW 310
4849: PPUSH
4850: CALL_OW 266
4854: PUSH
4855: LD_INT 4
4857: EQUAL
4858: NOT
4859: OR
4860: IFFALSE 4886
// begin ComExitBuilding ( i ) ;
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4871: LD_VAR 0 1
4875: PPUSH
4876: LD_INT 37
4878: PPUSH
4879: LD_INT 23
4881: PPUSH
4882: CALL_OW 174
// end ;
4886: GO 4826
4888: POP
4889: POP
// if eng then
4890: LD_VAR 0 3
4894: IFFALSE 5136
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 95
4913: PUSH
4914: LD_INT 7
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 3
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: LD_INT 24
4936: PUSH
4937: LD_INT 1000
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: PPUSH
4954: CALL_OW 69
4958: ST_TO_ADDR
// if b then
4959: LD_VAR 0 2
4963: IFFALSE 4994
// begin ComExitBuilding ( eng ) ;
4965: LD_VAR 0 3
4969: PPUSH
4970: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4974: LD_VAR 0 3
4978: PPUSH
4979: LD_VAR 0 2
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: CALL_OW 190
// end else
4992: GO 5136
// begin for i in eng do
4994: LD_ADDR_VAR 0 1
4998: PUSH
4999: LD_VAR 0 3
5003: PUSH
5004: FOR_IN
5005: IFFALSE 5134
// if not HasTask ( i ) then
5007: LD_VAR 0 1
5011: PPUSH
5012: CALL_OW 314
5016: NOT
5017: IFFALSE 5132
// begin if americanBuildList then
5019: LD_EXP 46
5023: IFFALSE 5108
// begin if IsInUnit ( i ) then
5025: LD_VAR 0 1
5029: PPUSH
5030: CALL_OW 310
5034: IFFALSE 5045
// ComExitBuilding ( i ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5045: LD_VAR 0 1
5049: PPUSH
5050: LD_EXP 46
5054: PUSH
5055: LD_INT 1
5057: ARRAY
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: PPUSH
5063: LD_EXP 46
5067: PUSH
5068: LD_INT 1
5070: ARRAY
5071: PUSH
5072: LD_INT 2
5074: ARRAY
5075: PPUSH
5076: LD_EXP 46
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PUSH
5085: LD_INT 3
5087: ARRAY
5088: PPUSH
5089: LD_EXP 46
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PUSH
5098: LD_INT 4
5100: ARRAY
5101: PPUSH
5102: CALL_OW 205
// end else
5106: GO 5132
// if not IsInUnit ( i ) then
5108: LD_VAR 0 1
5112: PPUSH
5113: CALL_OW 310
5117: NOT
5118: IFFALSE 5132
// ComEnterUnit ( i , usDepot ) ;
5120: LD_VAR 0 1
5124: PPUSH
5125: LD_INT 11
5127: PPUSH
5128: CALL_OW 120
// end ;
5132: GO 5004
5134: POP
5135: POP
// end ; end ; end ;
5136: PPOPN 5
5138: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5139: LD_INT 0
5141: PPUSH
5142: PPUSH
5143: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5144: LD_ADDR_VAR 0 3
5148: PUSH
5149: LD_INT 35
5151: PUSH
5152: LD_INT 45
5154: PUSH
5155: LD_INT 48
5157: PUSH
5158: LD_EXP 58
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// for i in tech do
5169: LD_ADDR_VAR 0 4
5173: PUSH
5174: LD_VAR 0 3
5178: PUSH
5179: FOR_IN
5180: IFFALSE 5198
// AddComResearch ( lab , i ) ;
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_VAR 0 4
5191: PPUSH
5192: CALL_OW 184
5196: GO 5179
5198: POP
5199: POP
// end ;
5200: LD_VAR 0 2
5204: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5205: LD_EXP 12
5209: PUSH
5210: LD_EXP 23
5214: PUSH
5215: LD_EXP 27
5219: LESSEQUAL
5220: AND
5221: IFFALSE 5246
5223: GO 5225
5225: DISABLE
// begin enable ;
5226: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5227: LD_INT 35
5229: PPUSH
5230: LD_INT 2065
5232: PPUSH
5233: CALL_OW 12
5237: PPUSH
5238: CALL_OW 67
// SendConvoy ;
5242: CALL 5344 0 0
// end ;
5246: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5247: LD_EXP 6
5251: PUSH
5252: LD_EXP 18
5256: AND
5257: IFFALSE 5343
5259: GO 5261
5261: DISABLE
// begin if americanHasEscaped then
5262: LD_EXP 8
5266: IFFALSE 5277
// wait ( 3 3$20 ) else
5268: LD_INT 7000
5270: PPUSH
5271: CALL_OW 67
5275: GO 5284
// wait ( 6 6$40 ) ;
5277: LD_INT 14000
5279: PPUSH
5280: CALL_OW 67
// SendAttack ;
5284: CALL 6087 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5288: LD_INT 14000
5290: PUSH
5291: LD_INT 11900
5293: PUSH
5294: LD_INT 9800
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_OWVAR 67
5306: ARRAY
5307: PPUSH
5308: CALL_OW 67
// SendAttack ;
5312: CALL 6087 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5316: LD_EXP 19
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PUSH
5335: LD_OWVAR 67
5339: ARRAY
5340: LESS
5341: IFFALSE 5288
// end ;
5343: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5344: LD_INT 0
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
// road := rand ( 1 , 2 ) ;
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: LD_INT 1
5361: PPUSH
5362: LD_INT 2
5364: PPUSH
5365: CALL_OW 12
5369: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5370: LD_ADDR_VAR 0 8
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: LD_INT 8
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5391: LD_ADDR_VAR 0 5
5395: PUSH
5396: LD_INT 35
5398: PUSH
5399: LD_INT 66
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 101
5412: PUSH
5413: LD_INT 8
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5428: LD_ADDR_VAR 0 6
5432: PUSH
5433: LD_INT 34
5435: PUSH
5436: LD_INT 67
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 38
5445: PUSH
5446: LD_INT 62
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 43
5455: PUSH
5456: LD_INT 54
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: LD_INT 57
5465: PUSH
5466: LD_INT 57
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 77
5475: PUSH
5476: LD_INT 71
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 86
5485: PUSH
5486: LD_INT 60
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 89
5495: PUSH
5496: LD_INT 35
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 93
5505: PUSH
5506: LD_INT 17
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 97
5515: PUSH
5516: LD_INT 10
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 103
5525: PUSH
5526: LD_INT 9
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: ST_TO_ADDR
// if road = 2 then
5545: LD_VAR 0 4
5549: PUSH
5550: LD_INT 2
5552: EQUAL
5553: IFFALSE 5570
// points := ReverseArray ( points ) ;
5555: LD_ADDR_VAR 0 6
5559: PUSH
5560: LD_VAR 0 6
5564: PPUSH
5565: CALL 973 0 1
5569: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5570: LD_INT 4
5572: PPUSH
5573: LD_INT 1
5575: PPUSH
5576: LD_INT 2
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 12
5587: PPUSH
5588: LD_INT 80
5590: PPUSH
5591: CALL 313 0 7
// veh := CreateVehicle ;
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: CALL_OW 45
5604: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: LD_VAR 0 5
5614: PUSH
5615: LD_VAR 0 4
5619: ARRAY
5620: PUSH
5621: LD_INT 3
5623: ARRAY
5624: PPUSH
5625: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5629: LD_VAR 0 3
5633: PPUSH
5634: LD_VAR 0 5
5638: PUSH
5639: LD_VAR 0 4
5643: ARRAY
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PPUSH
5649: LD_VAR 0 5
5653: PUSH
5654: LD_VAR 0 4
5658: ARRAY
5659: PUSH
5660: LD_INT 2
5662: ARRAY
5663: PPUSH
5664: LD_INT 0
5666: PPUSH
5667: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5671: LD_INT 0
5673: PPUSH
5674: LD_INT 1
5676: PPUSH
5677: LD_OWVAR 67
5681: PPUSH
5682: CALL_OW 380
// un := CreateHuman ;
5686: LD_ADDR_VAR 0 2
5690: PUSH
5691: CALL_OW 44
5695: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5710: LD_INT 60
5712: PUSH
5713: LD_INT 56
5715: PUSH
5716: LD_INT 52
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_OWVAR 67
5728: ARRAY
5729: PPUSH
5730: CALL_OW 13
5734: PUSH
5735: LD_OWVAR 1
5739: PUSH
5740: LD_INT 30
5742: MOD
5743: PLUS
5744: PUSH
5745: LD_EXP 23
5749: PUSH
5750: LD_INT 4
5752: LESS
5753: OR
5754: IFFALSE 5771
// SetCargo ( veh , mat_cans , 100 ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: LD_INT 1
5763: PPUSH
5764: LD_INT 100
5766: PPUSH
5767: CALL_OW 290
// for i := 2 to points do
5771: LD_ADDR_VAR 0 7
5775: PUSH
5776: DOUBLE
5777: LD_INT 2
5779: DEC
5780: ST_TO_ADDR
5781: LD_VAR 0 6
5785: PUSH
5786: FOR_TO
5787: IFFALSE 5830
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_VAR 0 6
5798: PUSH
5799: LD_VAR 0 7
5803: ARRAY
5804: PUSH
5805: LD_INT 1
5807: ARRAY
5808: PPUSH
5809: LD_VAR 0 6
5813: PUSH
5814: LD_VAR 0 7
5818: ARRAY
5819: PUSH
5820: LD_INT 2
5822: ARRAY
5823: PPUSH
5824: CALL_OW 171
5828: GO 5786
5830: POP
5831: POP
// convoyCounter := convoyCounter + 1 ;
5832: LD_ADDR_EXP 23
5836: PUSH
5837: LD_EXP 23
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5846: LD_INT 35
5848: PPUSH
5849: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5853: LD_VAR 0 3
5857: PPUSH
5858: CALL_OW 314
5862: NOT
5863: PUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 302
5873: AND
5874: IFFALSE 5915
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5876: LD_VAR 0 3
5880: PPUSH
5881: LD_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PPUSH
5896: LD_VAR 0 6
5900: PUSH
5901: LD_VAR 0 6
5905: ARRAY
5906: PUSH
5907: LD_INT 2
5909: ARRAY
5910: PPUSH
5911: CALL_OW 111
// if not IsInUnit ( un ) then
5915: LD_VAR 0 2
5919: PPUSH
5920: CALL_OW 310
5924: NOT
5925: IFFALSE 5966
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5927: LD_VAR 0 2
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: PPUSH
5947: LD_VAR 0 6
5951: PUSH
5952: LD_VAR 0 6
5956: ARRAY
5957: PUSH
5958: LD_INT 2
5960: ARRAY
5961: PPUSH
5962: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5966: LD_VAR 0 3
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 308
5980: PUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: LD_VAR 0 8
5990: PPUSH
5991: CALL_OW 308
5995: OR
5996: IFFALSE 5846
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
5998: LD_VAR 0 2
6002: PPUSH
6003: CALL_OW 302
6007: PUSH
6008: LD_VAR 0 3
6012: PPUSH
6013: CALL_OW 302
6017: NOT
6018: AND
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: AND
6035: IFFALSE 6046
// RemoveUnit ( un ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_VAR 0 8
6055: PPUSH
6056: CALL_OW 308
6060: PUSH
6061: LD_VAR 0 3
6065: PPUSH
6066: CALL_OW 302
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( veh ) ;
6073: LD_VAR 0 3
6077: PPUSH
6078: CALL_OW 64
// end ;
6082: LD_VAR 0 1
6086: RET
// export function SendAttack ; var un , veh , i ; begin
6087: LD_INT 0
6089: PPUSH
6090: PPUSH
6091: PPUSH
6092: PPUSH
// IncomingAttack ;
6093: CALL 14923 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6097: LD_INT 2100
6099: PPUSH
6100: LD_INT 3500
6102: PPUSH
6103: CALL_OW 12
6107: PPUSH
6108: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6112: LD_ADDR_VAR 0 4
6116: PUSH
6117: DOUBLE
6118: LD_INT 1
6120: DEC
6121: ST_TO_ADDR
6122: LD_INT 3
6124: PUSH
6125: LD_INT 4
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_OWVAR 67
6140: ARRAY
6141: PUSH
6142: LD_EXP 19
6146: PUSH
6147: LD_INT 3
6149: DIV
6150: PLUS
6151: PUSH
6152: FOR_TO
6153: IFFALSE 6265
// begin uc_side := 1 ;
6155: LD_ADDR_OWVAR 20
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// uc_nation := 1 ;
6163: LD_ADDR_OWVAR 21
6167: PUSH
6168: LD_INT 1
6170: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6171: LD_INT 0
6173: PPUSH
6174: LD_INT 1
6176: PPUSH
6177: LD_INT 2
6179: PUSH
6180: LD_INT 3
6182: PUSH
6183: LD_INT 4
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PUSH
6191: LD_OWVAR 67
6195: ARRAY
6196: PPUSH
6197: CALL_OW 380
// un := CreateHuman ;
6201: LD_ADDR_VAR 0 2
6205: PUSH
6206: CALL_OW 44
6210: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6211: LD_VAR 0 2
6215: PPUSH
6216: LD_INT 37
6218: PPUSH
6219: LD_INT 70
6221: PPUSH
6222: LD_INT 3
6224: PPUSH
6225: LD_INT 0
6227: PPUSH
6228: CALL_OW 50
// usAttackers := usAttackers union un ;
6232: LD_ADDR_EXP 47
6236: PUSH
6237: LD_EXP 47
6241: PUSH
6242: LD_VAR 0 2
6246: UNION
6247: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6248: LD_VAR 0 2
6252: PPUSH
6253: LD_INT 40
6255: PPUSH
6256: LD_INT 65
6258: PPUSH
6259: CALL_OW 111
// end ;
6263: GO 6152
6265: POP
6266: POP
// uc_side := 1 ;
6267: LD_ADDR_OWVAR 20
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// uc_nation := 1 ;
6275: LD_ADDR_OWVAR 21
6279: PUSH
6280: LD_INT 1
6282: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6283: LD_INT 0
6285: PPUSH
6286: LD_INT 4
6288: PPUSH
6289: LD_INT 2
6291: PPUSH
6292: CALL_OW 380
// un := CreateHuman ;
6296: LD_ADDR_VAR 0 2
6300: PUSH
6301: CALL_OW 44
6305: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6306: LD_VAR 0 2
6310: PPUSH
6311: LD_INT 37
6313: PPUSH
6314: LD_INT 70
6316: PPUSH
6317: LD_INT 3
6319: PPUSH
6320: LD_INT 0
6322: PPUSH
6323: CALL_OW 50
// usAttackers := usAttackers union un ;
6327: LD_ADDR_EXP 47
6331: PUSH
6332: LD_EXP 47
6336: PUSH
6337: LD_VAR 0 2
6341: UNION
6342: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6343: LD_VAR 0 2
6347: PPUSH
6348: LD_INT 40
6350: PPUSH
6351: LD_INT 65
6353: PPUSH
6354: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6358: LD_ADDR_VAR 0 4
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_OWVAR 67
6372: PUSH
6373: LD_EXP 19
6377: PUSH
6378: LD_INT 4
6380: DIV
6381: PLUS
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6557
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6386: LD_ADDR_VAR 0 3
6390: PUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: LD_INT 2
6399: PPUSH
6400: LD_INT 1
6402: PPUSH
6403: LD_INT 1
6405: PPUSH
6406: LD_INT 4
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: CALL_OW 12
6430: ARRAY
6431: PPUSH
6432: LD_INT 90
6434: PPUSH
6435: CALL 313 0 7
6439: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 35
6447: PPUSH
6448: LD_INT 65
6450: PPUSH
6451: LD_INT 0
6453: PPUSH
6454: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6458: LD_INT 0
6460: PPUSH
6461: LD_INT 3
6463: PPUSH
6464: LD_OWVAR 67
6468: PUSH
6469: LD_INT 1
6471: PLUS
6472: PPUSH
6473: CALL_OW 380
// un := CreateHuman ;
6477: LD_ADDR_VAR 0 2
6481: PUSH
6482: CALL_OW 44
6486: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6487: LD_VAR 0 2
6491: PPUSH
6492: LD_VAR 0 3
6496: PPUSH
6497: CALL_OW 52
// usAttackers := usAttackers union un ;
6501: LD_ADDR_EXP 47
6505: PUSH
6506: LD_EXP 47
6510: PUSH
6511: LD_VAR 0 2
6515: UNION
6516: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6517: LD_VAR 0 3
6521: PPUSH
6522: LD_INT 39
6524: PPUSH
6525: LD_INT 60
6527: PPUSH
6528: CALL_OW 111
// wait ( 0 0$3 ) ;
6532: LD_INT 105
6534: PPUSH
6535: CALL_OW 67
// usAttackers := usAttackers union veh ;
6539: LD_ADDR_EXP 47
6543: PUSH
6544: LD_EXP 47
6548: PUSH
6549: LD_VAR 0 3
6553: UNION
6554: ST_TO_ADDR
// end ;
6555: GO 6383
6557: POP
6558: POP
// attackWave := attackWave + 1 ;
6559: LD_ADDR_EXP 19
6563: PUSH
6564: LD_EXP 19
6568: PUSH
6569: LD_INT 1
6571: PLUS
6572: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6573: LD_EXP 24
6577: PPUSH
6578: CALL_OW 427
// end ;
6582: LD_VAR 0 1
6586: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6587: LD_INT 0
6589: PPUSH
6590: PPUSH
6591: PPUSH
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
// if retreatAllowed then
6600: LD_EXP 11
6604: IFFALSE 6616
// strategy := 2 else
6606: LD_ADDR_VAR 0 5
6610: PUSH
6611: LD_INT 2
6613: ST_TO_ADDR
6614: GO 6632
// strategy := rand ( 0 , 2 ) ;
6616: LD_ADDR_VAR 0 5
6620: PUSH
6621: LD_INT 0
6623: PPUSH
6624: LD_INT 2
6626: PPUSH
6627: CALL_OW 12
6631: ST_TO_ADDR
// attackFormula := [ ] ;
6632: LD_ADDR_VAR 0 6
6636: PUSH
6637: EMPTY
6638: ST_TO_ADDR
// case strategy of 0 :
6639: LD_VAR 0 5
6643: PUSH
6644: LD_INT 0
6646: DOUBLE
6647: EQUAL
6648: IFTRUE 6652
6650: GO 6982
6652: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6653: LD_INT 11
6655: PPUSH
6656: LD_INT 22
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 30
6668: PUSH
6669: LD_INT 4
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 70
6684: NOT
6685: IFFALSE 6757
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6687: LD_ADDR_VAR 0 6
6691: PUSH
6692: LD_INT 41
6694: PUSH
6695: LD_INT 34
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: PUSH
6705: LD_INT 53
6707: PUSH
6708: LD_INT 62
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 37
6717: PUSH
6718: LD_INT 63
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 44
6727: PUSH
6728: LD_INT 45
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 37
6737: PUSH
6738: LD_INT 28
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: ST_TO_ADDR
6755: GO 6980
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6757: LD_INT 12
6759: PPUSH
6760: LD_INT 22
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: LD_INT 30
6775: PUSH
6776: LD_INT 4
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 30
6785: PUSH
6786: LD_INT 31
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 30
6795: PUSH
6796: LD_INT 32
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PPUSH
6813: CALL_OW 70
6817: NOT
6818: IFFALSE 6901
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_INT 27
6827: PUSH
6828: LD_INT 42
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 27
6837: PUSH
6838: LD_INT 32
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 53
6851: PUSH
6852: LD_INT 62
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 37
6861: PUSH
6862: LD_INT 63
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 44
6871: PUSH
6872: LD_INT 45
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 37
6881: PUSH
6882: LD_INT 28
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: ST_TO_ADDR
6899: GO 6980
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6901: LD_ADDR_VAR 0 6
6905: PUSH
6906: LD_INT 71
6908: PUSH
6909: LD_INT 67
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 54
6918: PUSH
6919: LD_INT 35
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 63
6932: PUSH
6933: LD_INT 40
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 37
6942: PUSH
6943: LD_INT 63
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 44
6952: PUSH
6953: LD_INT 45
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 37
6962: PUSH
6963: LD_INT 28
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
// end ; 1 :
6980: GO 7185
6982: LD_INT 1
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7094
6990: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
6991: LD_ADDR_VAR 0 6
6995: PUSH
6996: LD_INT 71
6998: PUSH
6999: LD_INT 67
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 82
7008: PUSH
7009: LD_INT 23
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 53
7018: PUSH
7019: LD_INT 7
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 43
7028: PUSH
7029: LD_INT 10
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 53
7044: PUSH
7045: LD_INT 62
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 37
7054: PUSH
7055: LD_INT 63
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 44
7064: PUSH
7065: LD_INT 45
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 37
7074: PUSH
7075: LD_INT 28
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 7185
7094: LD_INT 2
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7184
7102: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 90
7110: PUSH
7111: LD_INT 59
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 108
7120: PUSH
7121: LD_INT 64
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 82
7134: PUSH
7135: LD_INT 75
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 73
7144: PUSH
7145: LD_INT 67
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 101
7154: PUSH
7155: LD_INT 65
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 108
7164: PUSH
7165: LD_INT 62
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: ST_TO_ADDR
7182: GO 7185
7184: POP
// if not attackFormula then
7185: LD_VAR 0 6
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 8872
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7194: LD_ADDR_VAR 0 7
7198: PUSH
7199: LD_EXP 47
7203: PPUSH
7204: LD_INT 25
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 72
7218: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7219: LD_ADDR_VAR 0 8
7223: PUSH
7224: LD_EXP 47
7228: PPUSH
7229: LD_INT 25
7231: PUSH
7232: LD_INT 4
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PPUSH
7239: CALL_OW 72
7243: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7244: LD_ADDR_VAR 0 9
7248: PUSH
7249: LD_EXP 47
7253: PPUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 3
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 72
7268: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7269: LD_ADDR_VAR 0 10
7273: PUSH
7274: LD_EXP 47
7278: PPUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 72
7293: ST_TO_ADDR
// if sci then
7294: LD_VAR 0 8
7298: IFFALSE 7335
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7300: LD_VAR 0 8
7304: PPUSH
7305: LD_VAR 0 6
7309: PUSH
7310: LD_INT 2
7312: ARRAY
7313: PUSH
7314: LD_INT 1
7316: ARRAY
7317: PPUSH
7318: LD_VAR 0 6
7322: PUSH
7323: LD_INT 2
7325: ARRAY
7326: PUSH
7327: LD_INT 2
7329: ARRAY
7330: PPUSH
7331: CALL_OW 111
// repeat wait ( 10 ) ;
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7342: LD_ADDR_VAR 0 7
7346: PUSH
7347: LD_EXP 47
7351: PPUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 72
7366: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7367: LD_ADDR_VAR 0 8
7371: PUSH
7372: LD_EXP 47
7376: PPUSH
7377: LD_INT 25
7379: PUSH
7380: LD_INT 4
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PPUSH
7387: CALL_OW 72
7391: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7392: LD_ADDR_VAR 0 9
7396: PUSH
7397: LD_EXP 47
7401: PPUSH
7402: LD_INT 25
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL_OW 72
7416: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7417: LD_ADDR_VAR 0 10
7421: PUSH
7422: LD_EXP 47
7426: PPUSH
7427: LD_INT 21
7429: PUSH
7430: LD_INT 2
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 72
7441: ST_TO_ADDR
// if sol then
7442: LD_VAR 0 7
7446: IFFALSE 7867
// begin for i in sol do
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: LD_VAR 0 7
7457: PUSH
7458: FOR_IN
7459: IFFALSE 7865
// begin tag := GetTag ( i ) ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: LD_VAR 0 2
7470: PPUSH
7471: CALL_OW 110
7475: ST_TO_ADDR
// if not tag then
7476: LD_VAR 0 4
7480: NOT
7481: IFFALSE 7590
// begin if GetLives ( i ) = 1000 then
7483: LD_VAR 0 2
7487: PPUSH
7488: CALL_OW 256
7492: PUSH
7493: LD_INT 1000
7495: EQUAL
7496: IFFALSE 7512
// SetTag ( i , 1 ) else
7498: LD_VAR 0 2
7502: PPUSH
7503: LD_INT 1
7505: PPUSH
7506: CALL_OW 109
7510: GO 7588
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7512: LD_VAR 0 2
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 6
7534: PUSH
7535: LD_INT 2
7537: ARRAY
7538: PUSH
7539: LD_INT 2
7541: ARRAY
7542: PPUSH
7543: CALL_OW 297
7547: PUSH
7548: LD_INT 10
7550: GREATER
7551: IFFALSE 7588
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7553: LD_VAR 0 2
7557: PPUSH
7558: LD_VAR 0 6
7562: PUSH
7563: LD_INT 2
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_VAR 0 6
7575: PUSH
7576: LD_INT 2
7578: ARRAY
7579: PUSH
7580: LD_INT 2
7582: ARRAY
7583: PPUSH
7584: CALL_OW 111
// end else
7588: GO 7863
// begin if GetLives ( i ) < 760 then
7590: LD_VAR 0 2
7594: PPUSH
7595: CALL_OW 256
7599: PUSH
7600: LD_INT 760
7602: LESS
7603: IFFALSE 7654
// begin SetTag ( i , 0 ) ;
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7617: LD_VAR 0 2
7621: PPUSH
7622: LD_VAR 0 6
7626: PUSH
7627: LD_INT 2
7629: ARRAY
7630: PUSH
7631: LD_INT 1
7633: ARRAY
7634: PPUSH
7635: LD_VAR 0 6
7639: PUSH
7640: LD_INT 2
7642: ARRAY
7643: PUSH
7644: LD_INT 2
7646: ARRAY
7647: PPUSH
7648: CALL_OW 111
// end else
7652: GO 7863
// if tag <= attackFormula [ 1 ] then
7654: LD_VAR 0 4
7658: PUSH
7659: LD_VAR 0 6
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: LESSEQUAL
7668: IFFALSE 7829
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 6
7679: PUSH
7680: LD_INT 1
7682: ARRAY
7683: PUSH
7684: LD_VAR 0 4
7688: ARRAY
7689: PUSH
7690: LD_INT 1
7692: ARRAY
7693: PPUSH
7694: LD_VAR 0 6
7698: PUSH
7699: LD_INT 1
7701: ARRAY
7702: PUSH
7703: LD_VAR 0 4
7707: ARRAY
7708: PUSH
7709: LD_INT 2
7711: ARRAY
7712: PPUSH
7713: CALL_OW 297
7717: PUSH
7718: LD_INT 6
7720: GREATER
7721: IFFALSE 7772
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_VAR 0 6
7732: PUSH
7733: LD_INT 1
7735: ARRAY
7736: PUSH
7737: LD_VAR 0 4
7741: ARRAY
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PPUSH
7747: LD_VAR 0 6
7751: PUSH
7752: LD_INT 1
7754: ARRAY
7755: PUSH
7756: LD_VAR 0 4
7760: ARRAY
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PPUSH
7766: CALL_OW 114
7770: GO 7827
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7772: LD_INT 81
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 91
7784: PUSH
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 10
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: NOT
7807: IFFALSE 7827
// SetTag ( i , tag + 1 ) ;
7809: LD_VAR 0 2
7813: PPUSH
7814: LD_VAR 0 4
7818: PUSH
7819: LD_INT 1
7821: PLUS
7822: PPUSH
7823: CALL_OW 109
// end else
7827: GO 7863
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7829: LD_VAR 0 2
7833: PPUSH
7834: LD_INT 81
7836: PUSH
7837: LD_INT 1
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PPUSH
7844: CALL_OW 69
7848: PPUSH
7849: LD_VAR 0 2
7853: PPUSH
7854: CALL_OW 74
7858: PPUSH
7859: CALL_OW 115
// end ; end ;
7863: GO 7458
7865: POP
7866: POP
// end ; if sci then
7867: LD_VAR 0 8
7871: IFFALSE 8140
// begin if not sol and not mech then
7873: LD_VAR 0 7
7877: NOT
7878: PUSH
7879: LD_VAR 0 9
7883: NOT
7884: AND
7885: IFFALSE 7937
// begin for i in sci do
7887: LD_ADDR_VAR 0 2
7891: PUSH
7892: LD_VAR 0 8
7896: PUSH
7897: FOR_IN
7898: IFFALSE 7933
// begin usForces := usForces union i ;
7900: LD_ADDR_EXP 44
7904: PUSH
7905: LD_EXP 44
7909: PUSH
7910: LD_VAR 0 2
7914: UNION
7915: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7916: LD_VAR 0 2
7920: PPUSH
7921: LD_INT 34
7923: PPUSH
7924: LD_INT 68
7926: PPUSH
7927: CALL_OW 111
// end ;
7931: GO 7897
7933: POP
7934: POP
// end else
7935: GO 8140
// for i in sci do
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: LD_VAR 0 8
7946: PUSH
7947: FOR_IN
7948: IFFALSE 8138
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7950: LD_VAR 0 2
7954: PPUSH
7955: LD_VAR 0 6
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PUSH
7964: LD_INT 1
7966: ARRAY
7967: PPUSH
7968: LD_VAR 0 6
7972: PUSH
7973: LD_INT 2
7975: ARRAY
7976: PUSH
7977: LD_INT 2
7979: ARRAY
7980: PPUSH
7981: CALL_OW 297
7985: PUSH
7986: LD_INT 10
7988: GREATER
7989: IFFALSE 8028
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
7991: LD_VAR 0 2
7995: PPUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 2
8003: ARRAY
8004: PUSH
8005: LD_INT 1
8007: ARRAY
8008: PPUSH
8009: LD_VAR 0 6
8013: PUSH
8014: LD_INT 2
8016: ARRAY
8017: PUSH
8018: LD_INT 2
8020: ARRAY
8021: PPUSH
8022: CALL_OW 111
8026: GO 8136
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8028: LD_VAR 0 7
8032: PPUSH
8033: LD_INT 3
8035: PUSH
8036: LD_INT 24
8038: PUSH
8039: LD_INT 1000
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 91
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 10
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 72
8074: IFFALSE 8136
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8076: LD_VAR 0 2
8080: PPUSH
8081: LD_VAR 0 7
8085: PPUSH
8086: LD_INT 3
8088: PUSH
8089: LD_INT 24
8091: PUSH
8092: LD_INT 1000
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 91
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 10
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 72
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: CALL_OW 128
8136: GO 7947
8138: POP
8139: POP
// end ; if mech then
8140: LD_VAR 0 9
8144: IFFALSE 8854
// begin for i in mech do
8146: LD_ADDR_VAR 0 2
8150: PUSH
8151: LD_VAR 0 9
8155: PUSH
8156: FOR_IN
8157: IFFALSE 8852
// begin tag := GetTag ( i ) ;
8159: LD_ADDR_VAR 0 4
8163: PUSH
8164: LD_VAR 0 2
8168: PPUSH
8169: CALL_OW 110
8173: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8174: LD_ADDR_VAR 0 11
8178: PUSH
8179: LD_VAR 0 2
8183: PPUSH
8184: CALL_OW 310
8188: ST_TO_ADDR
// if not tag then
8189: LD_VAR 0 4
8193: NOT
8194: IFFALSE 8565
// begin if veh then
8196: LD_VAR 0 11
8200: IFFALSE 8371
// begin if GetLives ( veh ) = 1000 then
8202: LD_VAR 0 11
8206: PPUSH
8207: CALL_OW 256
8211: PUSH
8212: LD_INT 1000
8214: EQUAL
8215: IFFALSE 8231
// SetTag ( i , 1 ) else
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_INT 1
8224: PPUSH
8225: CALL_OW 109
8229: GO 8369
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8231: LD_VAR 0 11
8235: PPUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_INT 3
8243: ARRAY
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: PPUSH
8249: LD_VAR 0 6
8253: PUSH
8254: LD_INT 3
8256: ARRAY
8257: PUSH
8258: LD_INT 2
8260: ARRAY
8261: PPUSH
8262: CALL_OW 297
8266: PUSH
8267: LD_INT 7
8269: GREATER
8270: IFFALSE 8309
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8272: LD_VAR 0 11
8276: PPUSH
8277: LD_VAR 0 6
8281: PUSH
8282: LD_INT 3
8284: ARRAY
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 6
8294: PUSH
8295: LD_INT 3
8297: ARRAY
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: PPUSH
8303: CALL_OW 111
8307: GO 8369
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8309: LD_INT 81
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 91
8321: PUSH
8322: LD_VAR 0 2
8326: PUSH
8327: LD_INT 10
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: NOT
8344: IFFALSE 8369
// begin ComExitVehicle ( i ) ;
8346: LD_VAR 0 2
8350: PPUSH
8351: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8355: LD_VAR 0 2
8359: PPUSH
8360: LD_VAR 0 11
8364: PPUSH
8365: CALL_OW 189
// end ; end else
8369: GO 8563
// if GetLives ( i ) < 400 then
8371: LD_VAR 0 2
8375: PPUSH
8376: CALL_OW 256
8380: PUSH
8381: LD_INT 400
8383: LESS
8384: IFFALSE 8435
// begin usAttackers := usAttackers diff i ;
8386: LD_ADDR_EXP 47
8390: PUSH
8391: LD_EXP 47
8395: PUSH
8396: LD_VAR 0 2
8400: DIFF
8401: ST_TO_ADDR
// usForces := usForces union i ;
8402: LD_ADDR_EXP 44
8406: PUSH
8407: LD_EXP 44
8411: PUSH
8412: LD_VAR 0 2
8416: UNION
8417: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_INT 34
8425: PPUSH
8426: LD_INT 68
8428: PPUSH
8429: CALL_OW 111
// end else
8433: GO 8563
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8435: LD_VAR 0 10
8439: PPUSH
8440: LD_INT 58
8442: PUSH
8443: EMPTY
8444: LIST
8445: PUSH
8446: LD_INT 24
8448: PUSH
8449: LD_INT 1000
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: PUSH
8465: LD_VAR 0 2
8469: PPUSH
8470: CALL_OW 314
8474: NOT
8475: AND
8476: PUSH
8477: LD_INT 81
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 91
8489: PUSH
8490: LD_VAR 0 2
8494: PUSH
8495: LD_INT 9
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 69
8511: OR
8512: IFFALSE 8563
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8514: LD_VAR 0 2
8518: PPUSH
8519: LD_VAR 0 10
8523: PPUSH
8524: LD_INT 58
8526: PUSH
8527: EMPTY
8528: LIST
8529: PUSH
8530: LD_INT 24
8532: PUSH
8533: LD_INT 250
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: PPUSH
8549: LD_VAR 0 2
8553: PPUSH
8554: CALL_OW 74
8558: PPUSH
8559: CALL_OW 120
// end else
8563: GO 8850
// begin if veh and GetLives ( veh ) < 760 then
8565: LD_VAR 0 11
8569: PUSH
8570: LD_VAR 0 11
8574: PPUSH
8575: CALL_OW 256
8579: PUSH
8580: LD_INT 760
8582: LESS
8583: AND
8584: IFFALSE 8635
// begin SetTag ( i , 0 ) ;
8586: LD_VAR 0 2
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8598: LD_VAR 0 11
8602: PPUSH
8603: LD_VAR 0 6
8607: PUSH
8608: LD_INT 3
8610: ARRAY
8611: PUSH
8612: LD_INT 1
8614: ARRAY
8615: PPUSH
8616: LD_VAR 0 6
8620: PUSH
8621: LD_INT 3
8623: ARRAY
8624: PUSH
8625: LD_INT 2
8627: ARRAY
8628: PPUSH
8629: CALL_OW 111
// end else
8633: GO 8850
// if veh then
8635: LD_VAR 0 11
8639: IFFALSE 8850
// if tag <= attackFormula [ 4 ] then
8641: LD_VAR 0 4
8645: PUSH
8646: LD_VAR 0 6
8650: PUSH
8651: LD_INT 4
8653: ARRAY
8654: LESSEQUAL
8655: IFFALSE 8816
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8657: LD_VAR 0 11
8661: PPUSH
8662: LD_VAR 0 6
8666: PUSH
8667: LD_INT 4
8669: ARRAY
8670: PUSH
8671: LD_VAR 0 4
8675: ARRAY
8676: PUSH
8677: LD_INT 1
8679: ARRAY
8680: PPUSH
8681: LD_VAR 0 6
8685: PUSH
8686: LD_INT 4
8688: ARRAY
8689: PUSH
8690: LD_VAR 0 4
8694: ARRAY
8695: PUSH
8696: LD_INT 2
8698: ARRAY
8699: PPUSH
8700: CALL_OW 297
8704: PUSH
8705: LD_INT 6
8707: GREATER
8708: IFFALSE 8759
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8710: LD_VAR 0 11
8714: PPUSH
8715: LD_VAR 0 6
8719: PUSH
8720: LD_INT 4
8722: ARRAY
8723: PUSH
8724: LD_VAR 0 4
8728: ARRAY
8729: PUSH
8730: LD_INT 1
8732: ARRAY
8733: PPUSH
8734: LD_VAR 0 6
8738: PUSH
8739: LD_INT 4
8741: ARRAY
8742: PUSH
8743: LD_VAR 0 4
8747: ARRAY
8748: PUSH
8749: LD_INT 2
8751: ARRAY
8752: PPUSH
8753: CALL_OW 114
8757: GO 8814
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8759: LD_INT 81
8761: PUSH
8762: LD_INT 1
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: LD_INT 91
8771: PUSH
8772: LD_VAR 0 11
8776: PUSH
8777: LD_INT 10
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PPUSH
8789: CALL_OW 69
8793: NOT
8794: IFFALSE 8814
// SetTag ( i , tag + 1 ) ;
8796: LD_VAR 0 2
8800: PPUSH
8801: LD_VAR 0 4
8805: PUSH
8806: LD_INT 1
8808: PLUS
8809: PPUSH
8810: CALL_OW 109
// end else
8814: GO 8850
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8816: LD_VAR 0 11
8820: PPUSH
8821: LD_INT 81
8823: PUSH
8824: LD_INT 1
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 69
8835: PPUSH
8836: LD_VAR 0 2
8840: PPUSH
8841: CALL_OW 74
8845: PPUSH
8846: CALL_OW 115
// end ; end ;
8850: GO 8156
8852: POP
8853: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8854: LD_EXP 47
8858: PPUSH
8859: LD_INT 52
8861: PUSH
8862: EMPTY
8863: LIST
8864: PPUSH
8865: CALL_OW 72
8869: NOT
8870: IFFALSE 7335
// end ;
8872: LD_VAR 0 1
8876: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8877: LD_INT 22
8879: PUSH
8880: LD_INT 1
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 32
8889: PUSH
8890: LD_INT 1
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: IFFALSE 8982
8907: GO 8909
8909: DISABLE
8910: LD_INT 0
8912: PPUSH
// begin enable ;
8913: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8914: LD_ADDR_VAR 0 1
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 32
8931: PUSH
8932: LD_INT 1
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: FOR_IN
8949: IFFALSE 8980
// if GetFuel ( i ) < 10 then
8951: LD_VAR 0 1
8955: PPUSH
8956: CALL_OW 261
8960: PUSH
8961: LD_INT 10
8963: LESS
8964: IFFALSE 8978
// SetFuel ( i , 10 ) ;
8966: LD_VAR 0 1
8970: PPUSH
8971: LD_INT 10
8973: PPUSH
8974: CALL_OW 240
8978: GO 8948
8980: POP
8981: POP
// end ; end_of_file
8982: PPOPN 1
8984: END
// export function Action ; var hasAll , i , tmp ; begin
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
8989: PPUSH
8990: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
8991: LD_ADDR_VAR 0 2
8995: PUSH
8996: LD_INT 22
8998: PUSH
8999: LD_INT 2
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 21
9008: PUSH
9009: LD_INT 1
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 23
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: LIST
9030: PPUSH
9031: CALL_OW 69
9035: PUSH
9036: LD_INT 7
9038: GREATEREQUAL
9039: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_STRING 03_HasAll
9047: PPUSH
9048: CALL_OW 39
// Video ( true ) ;
9052: LD_INT 1
9054: PPUSH
9055: CALL 72277 0 1
// CenterNowOnUnits ( Heike ) ;
9059: LD_EXP 28
9063: PPUSH
9064: CALL_OW 87
// wait ( 0 0$2 ) ;
9068: LD_INT 70
9070: PPUSH
9071: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9075: LD_EXP 36
9079: PPUSH
9080: LD_STRING DF-1-start
9082: PPUSH
9083: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9087: LD_EXP 28
9091: PPUSH
9092: LD_EXP 36
9096: PPUSH
9097: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9101: LD_EXP 28
9105: PPUSH
9106: LD_STRING DH-1-start
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9113: LD_EXP 37
9117: PPUSH
9118: LD_INT 92
9120: PPUSH
9121: LD_INT 21
9123: PPUSH
9124: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9128: LD_EXP 32
9132: PPUSH
9133: LD_INT 94
9135: PPUSH
9136: LD_INT 23
9138: PPUSH
9139: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9143: LD_EXP 40
9147: PUSH
9148: LD_INT 1
9150: ARRAY
9151: PPUSH
9152: LD_INT 90
9154: PPUSH
9155: LD_INT 23
9157: PPUSH
9158: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9162: LD_EXP 40
9166: PUSH
9167: LD_INT 2
9169: ARRAY
9170: PPUSH
9171: LD_INT 93
9173: PPUSH
9174: LD_INT 25
9176: PPUSH
9177: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9181: LD_EXP 40
9185: PPUSH
9186: LD_EXP 37
9190: PPUSH
9191: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9195: LD_EXP 37
9199: PUSH
9200: LD_EXP 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PPUSH
9209: LD_EXP 28
9213: PPUSH
9214: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9218: LD_EXP 28
9222: PPUSH
9223: LD_EXP 37
9227: PPUSH
9228: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9232: LD_INT 35
9234: PPUSH
9235: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9239: LD_EXP 37
9243: PPUSH
9244: LD_INT 92
9246: PPUSH
9247: LD_INT 21
9249: PPUSH
9250: CALL_OW 307
9254: IFFALSE 9232
// Say ( Omar , DO-1-start ) ;
9256: LD_EXP 37
9260: PPUSH
9261: LD_STRING DO-1-start
9263: PPUSH
9264: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9268: LD_EXP 28
9272: PPUSH
9273: LD_STRING DH-2-start
9275: PPUSH
9276: CALL_OW 88
// if hasAll then
9280: LD_VAR 0 2
9284: IFFALSE 9412
// begin Say ( Omar , DO-2-start ) ;
9286: LD_EXP 37
9290: PPUSH
9291: LD_STRING DO-2-start
9293: PPUSH
9294: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9298: LD_EXP 37
9302: PPUSH
9303: LD_STRING DO-3-start
9305: PPUSH
9306: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9310: LD_EXP 28
9314: PPUSH
9315: LD_STRING DH-3-start
9317: PPUSH
9318: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9322: LD_EXP 36
9326: PPUSH
9327: LD_STRING DF-2-start
9329: PPUSH
9330: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9334: LD_EXP 37
9338: PPUSH
9339: LD_EXP 36
9343: PPUSH
9344: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9348: LD_EXP 37
9352: PPUSH
9353: LD_STRING DO-4-start
9355: PPUSH
9356: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9360: LD_EXP 36
9364: PPUSH
9365: LD_STRING DF-3-start
9367: PPUSH
9368: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DO-5-start
9379: PPUSH
9380: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9384: LD_EXP 36
9388: PPUSH
9389: LD_STRING DF-4-start
9391: PPUSH
9392: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9396: LD_EXP 37
9400: PPUSH
9401: LD_EXP 28
9405: PPUSH
9406: CALL_OW 119
// end else
9410: GO 9512
// begin Say ( Omar , DO-2-start-a ) ;
9412: LD_EXP 37
9416: PPUSH
9417: LD_STRING DO-2-start-a
9419: PPUSH
9420: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9424: LD_EXP 37
9428: PPUSH
9429: LD_STRING DO-3-start-a
9431: PPUSH
9432: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9436: LD_EXP 28
9440: PPUSH
9441: LD_STRING DH-3-start-a
9443: PPUSH
9444: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9448: LD_EXP 36
9452: PPUSH
9453: LD_STRING DF-2-start-a
9455: PPUSH
9456: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9460: LD_EXP 37
9464: PPUSH
9465: LD_EXP 36
9469: PPUSH
9470: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9474: LD_EXP 37
9478: PPUSH
9479: LD_STRING DO-4-start-a
9481: PPUSH
9482: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9486: LD_EXP 36
9490: PPUSH
9491: LD_STRING DF-3-start-a
9493: PPUSH
9494: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9498: LD_EXP 37
9502: PPUSH
9503: LD_EXP 28
9507: PPUSH
9508: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9512: LD_INT 10
9514: PPUSH
9515: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9519: LD_EXP 37
9523: PPUSH
9524: LD_STRING DO-1-mission
9526: PPUSH
9527: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9531: LD_EXP 37
9535: PPUSH
9536: LD_STRING DO-2-mission
9538: PPUSH
9539: CALL_OW 88
// if not hasAll then
9543: LD_VAR 0 2
9547: NOT
9548: IFFALSE 9562
// Say ( Omar , DO-3-mission ) ;
9550: LD_EXP 37
9554: PPUSH
9555: LD_STRING DO-3-mission
9557: PPUSH
9558: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9562: LD_EXP 37
9566: PPUSH
9567: LD_STRING DO-4-mission
9569: PPUSH
9570: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9574: LD_EXP 28
9578: PPUSH
9579: LD_STRING DH-1-mission
9581: PPUSH
9582: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9586: LD_EXP 36
9590: PPUSH
9591: LD_STRING DF-1-mission
9593: PPUSH
9594: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9598: LD_EXP 37
9602: PPUSH
9603: LD_STRING DO-5-mission
9605: PPUSH
9606: CALL_OW 88
// if not hasAll then
9610: LD_VAR 0 2
9614: NOT
9615: IFFALSE 9750
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9617: LD_ADDR_VAR 0 4
9621: PUSH
9622: LD_INT 22
9624: PUSH
9625: LD_INT 2
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 21
9634: PUSH
9635: LD_INT 1
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 23
9644: PUSH
9645: LD_INT 2
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: PPUSH
9657: CALL_OW 69
9661: ST_TO_ADDR
// for i := 7 downto tmp do
9662: LD_ADDR_VAR 0 3
9666: PUSH
9667: DOUBLE
9668: LD_INT 7
9670: INC
9671: ST_TO_ADDR
9672: LD_VAR 0 4
9676: PUSH
9677: FOR_DOWNTO
9678: IFFALSE 9748
// begin if omarSquad < 3 then
9680: LD_EXP 40
9684: PUSH
9685: LD_INT 3
9687: LESS
9688: IFFALSE 9692
// break ;
9690: GO 9748
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9692: LD_EXP 40
9696: PUSH
9697: LD_INT 3
9699: ARRAY
9700: PPUSH
9701: LD_INT 2
9703: PPUSH
9704: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9708: LD_ADDR_EXP 42
9712: PUSH
9713: LD_EXP 42
9717: PUSH
9718: LD_EXP 40
9722: PUSH
9723: LD_INT 3
9725: ARRAY
9726: UNION
9727: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9728: LD_ADDR_EXP 40
9732: PUSH
9733: LD_EXP 40
9737: PPUSH
9738: LD_INT 3
9740: PPUSH
9741: CALL_OW 3
9745: ST_TO_ADDR
// end ;
9746: GO 9677
9748: POP
9749: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9750: LD_EXP 37
9754: PUSH
9755: LD_EXP 40
9759: ADD
9760: PPUSH
9761: LD_INT 103
9763: PPUSH
9764: LD_INT 9
9766: PPUSH
9767: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9771: LD_VAR 0 2
9775: PUSH
9776: LD_EXP 33
9780: PPUSH
9781: CALL_OW 302
9785: AND
9786: IFFALSE 9847
// begin wait ( 0 0$3 ) ;
9788: LD_INT 105
9790: PPUSH
9791: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9795: LD_EXP 33
9799: PPUSH
9800: LD_EXP 36
9804: PPUSH
9805: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9809: LD_EXP 33
9813: PPUSH
9814: LD_STRING DK-1-side
9816: PPUSH
9817: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9821: LD_EXP 36
9825: PPUSH
9826: LD_EXP 33
9830: PPUSH
9831: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9835: LD_EXP 36
9839: PPUSH
9840: LD_STRING DF-1-side
9842: PPUSH
9843: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 69
9861: PPUSH
9862: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9866: LD_EXP 36
9870: PUSH
9871: LD_EXP 39
9875: ADD
9876: PPUSH
9877: LD_INT 108
9879: PPUSH
9880: LD_INT 62
9882: PPUSH
9883: CALL_OW 111
// gameStarted := true ;
9887: LD_ADDR_EXP 3
9891: PUSH
9892: LD_INT 1
9894: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9895: LD_INT 105
9897: PPUSH
9898: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9902: LD_EXP 28
9906: PPUSH
9907: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9911: LD_EXP 28
9915: PPUSH
9916: LD_EXP 32
9920: PPUSH
9921: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9925: LD_INT 22
9927: PUSH
9928: LD_INT 2
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PPUSH
9935: CALL_OW 69
9939: PUSH
9940: LD_EXP 28
9944: DIFF
9945: PPUSH
9946: LD_EXP 28
9950: PPUSH
9951: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
9955: LD_EXP 28
9959: PPUSH
9960: LD_STRING DH-1-explore
9962: PPUSH
9963: CALL_OW 88
// if Givi then
9967: LD_EXP 29
9971: IFFALSE 9987
// Say ( Givi , DG-1-explore ) else
9973: LD_EXP 29
9977: PPUSH
9978: LD_STRING DG-1-explore
9980: PPUSH
9981: CALL_OW 88
9985: GO 10024
// if heikeSecondSquad then
9987: LD_EXP 42
9991: IFFALSE 10024
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
9993: LD_EXP 42
9997: PPUSH
9998: LD_INT 26
10000: PUSH
10001: LD_INT 1
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PPUSH
10008: CALL_OW 72
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PPUSH
10017: LD_STRING DArm-1-explore
10019: PPUSH
10020: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10024: LD_EXP 32
10028: PPUSH
10029: LD_STRING DA-1-explore
10031: PPUSH
10032: CALL_OW 88
// if Sophia then
10036: LD_EXP 34
10040: IFFALSE 10118
// begin Say ( Sophia , DS-2-explore ) ;
10042: LD_EXP 34
10046: PPUSH
10047: LD_STRING DS-2-explore
10049: PPUSH
10050: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10054: LD_EXP 32
10058: PPUSH
10059: LD_STRING DA-2-explore
10061: PPUSH
10062: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10066: LD_EXP 34
10070: PPUSH
10071: LD_EXP 32
10075: PPUSH
10076: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10080: LD_EXP 32
10084: PPUSH
10085: LD_EXP 34
10089: PPUSH
10090: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10094: LD_EXP 34
10098: PPUSH
10099: LD_STRING DS-3-explore
10101: PPUSH
10102: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10106: LD_EXP 32
10110: PPUSH
10111: LD_STRING DA-3-explore
10113: PPUSH
10114: CALL_OW 88
// end ; if Mike then
10118: LD_EXP 30
10122: IFFALSE 10178
// begin Say ( Mike , DM-1-explore ) ;
10124: LD_EXP 30
10128: PPUSH
10129: LD_STRING DM-1-explore
10131: PPUSH
10132: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10136: LD_EXP 28
10140: PPUSH
10141: LD_STRING DH-2-explore
10143: PPUSH
10144: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10148: LD_EXP 30
10152: PPUSH
10153: LD_STRING DM-2-explore
10155: PPUSH
10156: CALL_OW 88
// if Kaia then
10160: LD_EXP 33
10164: IFFALSE 10178
// Say ( Kaia , DK-1-explore ) ;
10166: LD_EXP 33
10170: PPUSH
10171: LD_STRING DK-1-explore
10173: PPUSH
10174: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10178: LD_INT 22
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: PPUSH
10193: CALL_OW 139
// Video ( false ) ;
10197: LD_INT 0
10199: PPUSH
10200: CALL 72277 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10204: LD_STRING BuildBase
10206: PPUSH
10207: CALL_OW 337
// SaveForQuickRestart ;
10211: CALL_OW 22
// end ;
10215: LD_VAR 0 1
10219: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10220: LD_EXP 5
10224: NOT
10225: PUSH
10226: LD_EXP 6
10230: NOT
10231: AND
10232: PUSH
10233: LD_INT 5
10235: PPUSH
10236: LD_INT 22
10238: PUSH
10239: LD_INT 2
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PPUSH
10246: CALL_OW 70
10250: AND
10251: PUSH
10252: LD_EXP 6
10256: NOT
10257: AND
10258: IFFALSE 10343
10260: GO 10262
10262: DISABLE
// begin if Mike then
10263: LD_EXP 30
10267: IFFALSE 10283
// Say ( Mike , DM-1-scout ) else
10269: LD_EXP 30
10273: PPUSH
10274: LD_STRING DM-1-scout
10276: PPUSH
10277: CALL_OW 88
10281: GO 10314
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10283: LD_EXP 42
10287: PPUSH
10288: LD_INT 26
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: LD_INT 1
10305: ARRAY
10306: PPUSH
10307: LD_STRING DArm-1-explore
10309: PPUSH
10310: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10314: LD_INT 54
10316: PPUSH
10317: LD_INT 35
10319: PPUSH
10320: LD_INT 2
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10330: LD_INT 54
10332: PPUSH
10333: LD_INT 35
10335: PPUSH
10336: LD_INT 2
10338: PPUSH
10339: CALL_OW 331
// end ;
10343: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10344: LD_INT 6
10346: PPUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 70
10361: PUSH
10362: LD_EXP 6
10366: NOT
10367: AND
10368: IFFALSE 10622
10370: GO 10372
10372: DISABLE
10373: LD_INT 0
10375: PPUSH
10376: PPUSH
10377: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10378: LD_ADDR_VAR 0 1
10382: PUSH
10383: LD_EXP 42
10387: PPUSH
10388: LD_INT 26
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 72
10402: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10403: LD_ADDR_VAR 0 2
10407: PUSH
10408: LD_EXP 42
10412: PPUSH
10413: LD_INT 26
10415: PUSH
10416: LD_INT 2
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 72
10427: ST_TO_ADDR
// DialogueOn ;
10428: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10432: LD_INT 36
10434: PPUSH
10435: LD_INT 22
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: LD_INT 8
10443: PPUSH
10444: CALL_OW 330
// dwait ( 0 0$1 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 68
// speakerOk := false ;
10455: LD_ADDR_VAR 0 3
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// if Mike then
10463: LD_EXP 30
10467: IFFALSE 10489
// speakerOk := Say ( Mike , DM-1-spot ) else
10469: LD_ADDR_VAR 0 3
10473: PUSH
10474: LD_EXP 30
10478: PPUSH
10479: LD_STRING DM-1-spot
10481: PPUSH
10482: CALL_OW 88
10486: ST_TO_ADDR
10487: GO 10517
// if randomMen then
10489: LD_VAR 0 1
10493: IFFALSE 10517
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10495: LD_ADDR_VAR 0 3
10499: PUSH
10500: LD_VAR 0 1
10504: PUSH
10505: LD_INT 1
10507: ARRAY
10508: PPUSH
10509: LD_STRING DArm-1-spot-a
10511: PPUSH
10512: CALL_OW 88
10516: ST_TO_ADDR
// if speakerOk then
10517: LD_VAR 0 3
10521: IFFALSE 10565
// begin if Givi then
10523: LD_EXP 29
10527: IFFALSE 10543
// Say ( Givi , DG-1-spot ) else
10529: LD_EXP 29
10533: PPUSH
10534: LD_STRING DG-1-spot
10536: PPUSH
10537: CALL_OW 88
10541: GO 10565
// if randomWomen then
10543: LD_VAR 0 2
10547: IFFALSE 10565
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10549: LD_VAR 0 2
10553: PUSH
10554: LD_INT 1
10556: ARRAY
10557: PPUSH
10558: LD_STRING DArf-1-spot-a
10560: PPUSH
10561: CALL_OW 88
// end ; if Mike then
10565: LD_EXP 30
10569: IFFALSE 10585
// Say ( Heike , DH-1-spot ) else
10571: LD_EXP 28
10575: PPUSH
10576: LD_STRING DH-1-spot
10578: PPUSH
10579: CALL_OW 88
10583: GO 10597
// Say ( Heike , DH-1-spot-a ) ;
10585: LD_EXP 28
10589: PPUSH
10590: LD_STRING DH-1-spot-a
10592: PPUSH
10593: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10597: LD_INT 36
10599: PPUSH
10600: LD_INT 22
10602: PPUSH
10603: LD_INT 2
10605: PPUSH
10606: CALL_OW 331
// DialogueOff ;
10610: CALL_OW 7
// americanBaseSpoted := true ;
10614: LD_ADDR_EXP 5
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// end ;
10622: PPOPN 3
10624: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10625: LD_EXP 5
10629: NOT
10630: PUSH
10631: LD_INT 22
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 101
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PPUSH
10655: CALL_OW 69
10659: AND
10660: PUSH
10661: LD_EXP 6
10665: NOT
10666: AND
10667: IFFALSE 10753
10669: GO 10671
10671: DISABLE
10672: LD_INT 0
10674: PPUSH
// begin americanBaseSpoted := true ;
10675: LD_ADDR_EXP 5
10679: PUSH
10680: LD_INT 1
10682: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10683: LD_ADDR_VAR 0 1
10687: PUSH
10688: LD_EXP 42
10692: PPUSH
10693: LD_INT 26
10695: PUSH
10696: LD_INT 1
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PPUSH
10703: CALL_OW 72
10707: ST_TO_ADDR
// if not randomMen then
10708: LD_VAR 0 1
10712: NOT
10713: IFFALSE 10717
// exit ;
10715: GO 10753
// DialogueOn ;
10717: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10721: LD_VAR 0 1
10725: PUSH
10726: LD_INT 1
10728: ARRAY
10729: PPUSH
10730: LD_STRING DArm-1-spot-a
10732: PPUSH
10733: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10737: LD_EXP 28
10741: PPUSH
10742: LD_STRING DH-1-spot-a
10744: PPUSH
10745: CALL_OW 88
// DialogueOff ;
10749: CALL_OW 7
// end ;
10753: PPOPN 1
10755: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10756: LD_INT 11
10758: PPUSH
10759: CALL_OW 255
10763: PUSH
10764: LD_INT 2
10766: EQUAL
10767: PUSH
10768: LD_INT 7
10770: PPUSH
10771: LD_INT 22
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: LD_INT 50
10786: PUSH
10787: EMPTY
10788: LIST
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 30
10796: PUSH
10797: LD_INT 31
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 70
10813: OR
10814: PUSH
10815: LD_INT 7
10817: PPUSH
10818: LD_INT 22
10820: PUSH
10821: LD_INT 2
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 70
10832: PUSH
10833: LD_INT 1
10835: GREATER
10836: OR
10837: PUSH
10838: LD_EXP 44
10842: PUSH
10843: LD_INT 4
10845: LESSEQUAL
10846: OR
10847: IFFALSE 11426
10849: GO 10851
10851: DISABLE
10852: LD_INT 0
10854: PPUSH
10855: PPUSH
// begin wait ( 0 0$3 ) ;
10856: LD_INT 105
10858: PPUSH
10859: CALL_OW 67
// americanStartRun := true ;
10863: LD_ADDR_EXP 14
10867: PUSH
10868: LD_INT 1
10870: ST_TO_ADDR
// if IsOk ( usCommander ) then
10871: LD_EXP 45
10875: PPUSH
10876: CALL_OW 302
10880: IFFALSE 10910
// begin usForces := usForces union usCommander ;
10882: LD_ADDR_EXP 44
10886: PUSH
10887: LD_EXP 44
10891: PUSH
10892: LD_EXP 45
10896: UNION
10897: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10898: LD_EXP 45
10902: PPUSH
10903: LD_STRING DUsm-1-assault
10905: PPUSH
10906: CALL_OW 88
// end ; for i in usForces do
10910: LD_ADDR_VAR 0 1
10914: PUSH
10915: LD_EXP 44
10919: PUSH
10920: FOR_IN
10921: IFFALSE 10967
// begin if IsInUnit ( i ) then
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 310
10932: IFFALSE 10943
// ComExitBuilding ( i ) ;
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 122
// wait ( 3 ) ;
10943: LD_INT 3
10945: PPUSH
10946: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10950: LD_VAR 0 1
10954: PPUSH
10955: LD_INT 34
10957: PPUSH
10958: LD_INT 67
10960: PPUSH
10961: CALL_OW 111
// end ;
10965: GO 10920
10967: POP
10968: POP
// Say ( Heike , DH-1-assault ) ;
10969: LD_EXP 28
10973: PPUSH
10974: LD_STRING DH-1-assault
10976: PPUSH
10977: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10981: LD_INT 35
10983: PPUSH
10984: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10988: LD_VAR 0 1
10992: PPUSH
10993: LD_INT 34
10995: PPUSH
10996: LD_INT 67
10998: PPUSH
10999: CALL_OW 111
// until not usForces ;
11003: LD_EXP 44
11007: NOT
11008: IFFALSE 10981
// music_nat := 2 ;
11010: LD_ADDR_OWVAR 71
11014: PUSH
11015: LD_INT 2
11017: ST_TO_ADDR
// music_class := music_victory ;
11018: LD_ADDR_OWVAR 72
11022: PUSH
11023: LD_INT 4
11025: ST_TO_ADDR
// if not americanHasEscaped then
11026: LD_EXP 8
11030: NOT
11031: IFFALSE 11052
// begin Say ( Heike , DH-2-assault ) ;
11033: LD_EXP 28
11037: PPUSH
11038: LD_STRING DH-2-assault
11040: PPUSH
11041: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11045: LD_STRING ACH_CLEAN
11047: PPUSH
11048: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11052: LD_INT 70
11054: PPUSH
11055: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11059: LD_INT 35
11061: PPUSH
11062: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11066: LD_INT 22
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 3
11088: PUSH
11089: LD_INT 50
11091: PUSH
11092: EMPTY
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: PPUSH
11104: CALL_OW 69
11108: NOT
11109: IFFALSE 11059
// InGameOn ;
11111: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11115: LD_INT 11
11117: PPUSH
11118: CALL_OW 255
11122: PUSH
11123: LD_INT 2
11125: EQUAL
11126: NOT
11127: IFFALSE 11139
// SetSide ( usDepot , 2 ) ;
11129: LD_INT 11
11131: PPUSH
11132: LD_INT 2
11134: PPUSH
11135: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11139: LD_INT 35
11141: PPUSH
11142: LD_INT 22
11144: PPUSH
11145: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11149: LD_EXP 28
11153: PPUSH
11154: LD_INT 35
11156: PPUSH
11157: LD_INT 22
11159: PPUSH
11160: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11164: LD_EXP 28
11168: PPUSH
11169: LD_INT 38
11171: PPUSH
11172: LD_INT 25
11174: PPUSH
11175: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11179: LD_EXP 41
11183: PUSH
11184: LD_EXP 42
11188: UNION
11189: PPUSH
11190: LD_INT 39
11192: PPUSH
11193: LD_INT 26
11195: PPUSH
11196: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11200: LD_EXP 41
11204: PUSH
11205: LD_EXP 42
11209: UNION
11210: PPUSH
11211: LD_EXP 28
11215: PPUSH
11216: CALL_OW 179
// p := 0 ;
11220: LD_ADDR_VAR 0 2
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11228: LD_INT 35
11230: PPUSH
11231: CALL_OW 67
// p := p + 1 ;
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: LD_VAR 0 2
11244: PUSH
11245: LD_INT 1
11247: PLUS
11248: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11249: LD_EXP 28
11253: PPUSH
11254: CALL_OW 314
11258: NOT
11259: PUSH
11260: LD_VAR 0 2
11264: PUSH
11265: LD_INT 10
11267: GREATER
11268: OR
11269: IFFALSE 11228
// Say ( Heike , DH-1-capture ) ;
11271: LD_EXP 28
11275: PPUSH
11276: LD_STRING DH-1-capture
11278: PPUSH
11279: CALL_OW 88
// if Markov then
11283: LD_EXP 35
11287: IFFALSE 11301
// Say ( Markov , DMar-1-capture ) ;
11289: LD_EXP 35
11293: PPUSH
11294: LD_STRING DMar-1-capture
11296: PPUSH
11297: CALL_OW 88
// if Sophia then
11301: LD_EXP 34
11305: IFFALSE 11331
// begin Say ( Heike , DH-2-capture ) ;
11307: LD_EXP 28
11311: PPUSH
11312: LD_STRING DH-2-capture
11314: PPUSH
11315: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11319: LD_EXP 34
11323: PPUSH
11324: LD_STRING DS-1-capture
11326: PPUSH
11327: CALL_OW 88
// end ; InGameOff ;
11331: CALL_OW 9
// music_nat := music_auto ;
11335: LD_ADDR_OWVAR 71
11339: PUSH
11340: LD_INT 0
11342: ST_TO_ADDR
// music_class := music_auto ;
11343: LD_ADDR_OWVAR 72
11347: PUSH
11348: LD_INT 0
11350: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11351: LD_STRING ConstructBase
11353: PPUSH
11354: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11358: LD_ADDR_VAR 0 1
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 21
11375: PUSH
11376: LD_INT 3
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: PUSH
11392: FOR_IN
11393: IFFALSE 11409
// SetSide ( i , 2 ) ;
11395: LD_VAR 0 1
11399: PPUSH
11400: LD_INT 2
11402: PPUSH
11403: CALL_OW 235
11407: GO 11392
11409: POP
11410: POP
// wait ( 0 0$3 ) ;
11411: LD_INT 105
11413: PPUSH
11414: CALL_OW 67
// americanBaseCaptured := true ;
11418: LD_ADDR_EXP 6
11422: PUSH
11423: LD_INT 1
11425: ST_TO_ADDR
// end ;
11426: PPOPN 2
11428: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11429: LD_EXP 13
11433: PUSH
11434: LD_INT 3
11436: GREATEREQUAL
11437: IFFALSE 11449
11439: GO 11441
11441: DISABLE
// SetAchievement ( ACH_ENG ) ;
11442: LD_STRING ACH_ENG
11444: PPUSH
11445: CALL_OW 543
11449: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11450: LD_INT 22
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 25
11462: PUSH
11463: LD_INT 15
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 69
11478: PUSH
11479: LD_INT 4
11481: GREATEREQUAL
11482: IFFALSE 11494
11484: GO 11486
11486: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11487: LD_STRING ACH_APEGEN
11489: PPUSH
11490: CALL_OW 543
11494: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11495: LD_INT 22
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 30
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 3
11517: PUSH
11518: LD_INT 57
11520: PUSH
11521: EMPTY
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: IFFALSE 11780
11539: GO 11541
11541: DISABLE
// begin workshopBuilded := true ;
11542: LD_ADDR_EXP 10
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if IsOk ( Markov ) then
11550: LD_EXP 35
11554: PPUSH
11555: CALL_OW 302
11559: IFFALSE 11618
// begin Say ( Heike , DH-1-shop-a ) ;
11561: LD_EXP 28
11565: PPUSH
11566: LD_STRING DH-1-shop-a
11568: PPUSH
11569: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11573: LD_INT 47
11575: PPUSH
11576: LD_INT 2
11578: PPUSH
11579: CALL_OW 321
11583: PUSH
11584: LD_INT 2
11586: EQUAL
11587: PUSH
11588: LD_INT 45
11590: PPUSH
11591: LD_INT 2
11593: PPUSH
11594: CALL_OW 321
11598: PUSH
11599: LD_INT 2
11601: EQUAL
11602: AND
11603: NOT
11604: IFFALSE 11618
// Say ( Markov , DMar-1-shop-a ) ;
11606: LD_EXP 35
11610: PPUSH
11611: LD_STRING DMar-1-shop-a
11613: PPUSH
11614: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11618: LD_INT 35
11620: PPUSH
11621: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11625: LD_INT 47
11627: PPUSH
11628: LD_INT 2
11630: PPUSH
11631: CALL_OW 321
11635: PUSH
11636: LD_INT 2
11638: EQUAL
11639: PUSH
11640: LD_INT 45
11642: PPUSH
11643: LD_INT 2
11645: PPUSH
11646: CALL_OW 321
11650: PUSH
11651: LD_INT 2
11653: EQUAL
11654: OR
11655: IFFALSE 11618
// DialogueOn ;
11657: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11661: LD_EXP 35
11665: PPUSH
11666: LD_STRING DMar-1-shop
11668: PPUSH
11669: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11673: LD_EXP 28
11677: PPUSH
11678: LD_STRING DH-1-shop
11680: PPUSH
11681: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11685: LD_EXP 35
11689: PPUSH
11690: LD_STRING DMar-2-shop
11692: PPUSH
11693: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11697: LD_EXP 35
11701: PPUSH
11702: LD_STRING DMar-3-shop
11704: PPUSH
11705: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11709: LD_EXP 28
11713: PPUSH
11714: LD_STRING DH-2-shop
11716: PPUSH
11717: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11721: LD_EXP 35
11725: PPUSH
11726: LD_STRING DMar-4-shop
11728: PPUSH
11729: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11733: LD_EXP 28
11737: PPUSH
11738: LD_STRING DH-3-shop
11740: PPUSH
11741: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11745: LD_EXP 35
11749: PPUSH
11750: LD_STRING DMar-5-shop
11752: PPUSH
11753: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11757: LD_EXP 28
11761: PPUSH
11762: LD_STRING DH-4-shop
11764: PPUSH
11765: CALL_OW 88
// DialogueOff ;
11769: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11773: LD_STRING ConstructVeh
11775: PPUSH
11776: CALL_OW 337
// end ;
11780: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11781: LD_INT 2
11783: PPUSH
11784: LD_INT 2
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: CALL 36379 0 3
11794: PUSH
11795: LD_INT 0
11797: EQUAL
11798: IFFALSE 11810
11800: GO 11802
11802: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11803: LD_STRING Techs
11805: PPUSH
11806: CALL_OW 337
11810: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11811: LD_EXP 35
11815: PPUSH
11816: CALL_OW 302
11820: PUSH
11821: LD_INT 22
11823: PUSH
11824: LD_INT 2
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: LD_INT 34
11836: PUSH
11837: LD_INT 22
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 35
11846: PUSH
11847: LD_INT 22
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 69
11867: AND
11868: IFFALSE 11975
11870: GO 11872
11872: DISABLE
// begin DialogueOn ;
11873: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11877: LD_INT 22
11879: PUSH
11880: LD_INT 2
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: LD_INT 34
11892: PUSH
11893: LD_INT 22
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 35
11902: PUSH
11903: LD_INT 22
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: PPUSH
11924: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11928: LD_INT 10
11930: PPUSH
11931: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11935: LD_EXP 28
11939: PPUSH
11940: LD_STRING DH-1-bal
11942: PPUSH
11943: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
11947: LD_EXP 35
11951: PPUSH
11952: LD_STRING DMar-1-bal
11954: PPUSH
11955: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
11959: LD_EXP 28
11963: PPUSH
11964: LD_STRING DH-2-bal
11966: PPUSH
11967: CALL_OW 88
// DialogueOff ;
11971: CALL_OW 7
// end ;
11975: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
11976: LD_EXP 32
11980: PPUSH
11981: CALL_OW 302
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 30
11998: PUSH
11999: LD_INT 6
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PPUSH
12010: CALL_OW 69
12014: AND
12015: IFFALSE 12076
12017: GO 12019
12019: DISABLE
// begin DialogueOn ;
12020: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12024: LD_EXP 32
12028: PPUSH
12029: LD_STRING DA-1-lab
12031: PPUSH
12032: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12036: LD_EXP 28
12040: PPUSH
12041: LD_STRING DH-1-lab
12043: PPUSH
12044: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12048: LD_EXP 32
12052: PPUSH
12053: LD_STRING DA-2-lab
12055: PPUSH
12056: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12060: LD_EXP 28
12064: PPUSH
12065: LD_STRING DH-2-lab
12067: PPUSH
12068: CALL_OW 88
// DialogueOff ;
12072: CALL_OW 7
// end ;
12076: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12077: LD_EXP 33
12081: PPUSH
12082: CALL_OW 302
12086: PUSH
12087: LD_INT 22
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 25
12099: PUSH
12100: LD_INT 15
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 69
12115: AND
12116: PUSH
12117: LD_INT 81
12119: PUSH
12120: LD_INT 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: NOT
12132: AND
12133: IFFALSE 12315
12135: GO 12137
12137: DISABLE
12138: LD_INT 0
12140: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12141: LD_ADDR_VAR 0 1
12145: PUSH
12146: LD_INT 22
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 25
12158: PUSH
12159: LD_INT 15
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 69
12174: ST_TO_ADDR
// InGameOn ;
12175: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12179: LD_VAR 0 1
12183: PUSH
12184: LD_INT 1
12186: ARRAY
12187: PPUSH
12188: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12192: LD_VAR 0 1
12196: PUSH
12197: LD_INT 1
12199: ARRAY
12200: PPUSH
12201: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12205: LD_EXP 33
12209: PPUSH
12210: LD_STRING DK-1-apesol
12212: PPUSH
12213: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12217: LD_VAR 0 1
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: LD_INT 35
12228: PPUSH
12229: LD_INT 28
12231: PPUSH
12232: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: PPUSH
12245: LD_INT 36
12247: PPUSH
12248: LD_INT 17
12250: PPUSH
12251: CALL_OW 171
// DialogueOn ;
12255: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12259: LD_EXP 32
12263: PPUSH
12264: LD_STRING DA-1-apesol
12266: PPUSH
12267: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12271: LD_EXP 33
12275: PPUSH
12276: LD_STRING DK-2-apesol
12278: PPUSH
12279: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12283: LD_EXP 32
12287: PPUSH
12288: LD_STRING DA-2-apesol
12290: PPUSH
12291: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12295: LD_EXP 33
12299: PPUSH
12300: LD_STRING DK-3-apesol
12302: PPUSH
12303: CALL_OW 88
// DialogueOff ;
12307: CALL_OW 7
// InGameOff ;
12311: CALL_OW 9
// end ;
12315: PPOPN 1
12317: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12318: LD_EXP 34
12322: PPUSH
12323: CALL_OW 302
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 25
12340: PUSH
12341: LD_INT 16
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: AND
12357: PUSH
12358: LD_INT 81
12360: PUSH
12361: LD_INT 2
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: NOT
12373: AND
12374: IFFALSE 12637
12376: GO 12378
12378: DISABLE
12379: LD_INT 0
12381: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12382: LD_ADDR_VAR 0 1
12386: PUSH
12387: LD_INT 22
12389: PUSH
12390: LD_INT 2
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 25
12399: PUSH
12400: LD_INT 16
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PPUSH
12411: CALL_OW 69
12415: ST_TO_ADDR
// InGameOn ;
12416: CALL_OW 8
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12420: LD_INT 5
12422: PPUSH
12423: LD_INT 35
12425: PPUSH
12426: LD_INT 22
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12436: LD_EXP 34
12440: PPUSH
12441: LD_VAR 0 1
12445: PUSH
12446: LD_INT 1
12448: ARRAY
12449: PPUSH
12450: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12454: LD_VAR 0 1
12458: PUSH
12459: LD_INT 1
12461: ARRAY
12462: PPUSH
12463: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12467: LD_VAR 0 1
12471: PUSH
12472: LD_INT 1
12474: ARRAY
12475: PPUSH
12476: CALL_OW 122
// wait ( 0 0$2 ) ;
12480: LD_INT 70
12482: PPUSH
12483: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12487: LD_EXP 34
12491: PPUSH
12492: LD_STRING DS-1-apeeng
12494: PPUSH
12495: CALL_OW 88
// if IsOk ( Kamil ) then
12499: LD_EXP 31
12503: PPUSH
12504: CALL_OW 302
12508: IFFALSE 12633
// begin Say ( Kamil , DKam-1-apeeng ) ;
12510: LD_EXP 31
12514: PPUSH
12515: LD_STRING DKam-1-apeeng
12517: PPUSH
12518: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12522: LD_EXP 34
12526: PPUSH
12527: LD_STRING DS-2-apeeng
12529: PPUSH
12530: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12534: LD_EXP 31
12538: PPUSH
12539: LD_STRING DKam-2-apeeng
12541: PPUSH
12542: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12546: LD_EXP 34
12550: PPUSH
12551: LD_STRING DS-3-apeeng
12553: PPUSH
12554: CALL_OW 88
// if not IsOK ( Kaia ) then
12558: LD_EXP 33
12562: PPUSH
12563: CALL_OW 302
12567: NOT
12568: IFFALSE 12576
// begin InGameOff ;
12570: CALL_OW 9
// exit ;
12574: GO 12637
// end ; Say ( Kaia , DK-1-apeeng ) ;
12576: LD_EXP 33
12580: PPUSH
12581: LD_STRING DK-1-apeeng
12583: PPUSH
12584: CALL_OW 88
// if not IsOk ( Givi ) then
12588: LD_EXP 29
12592: PPUSH
12593: CALL_OW 302
12597: NOT
12598: IFFALSE 12609
// begin Video ( false ) ;
12600: LD_INT 0
12602: PPUSH
12603: CALL 72277 0 1
// exit ;
12607: GO 12637
// end ; Say ( Givi , DG-1-apeeng ) ;
12609: LD_EXP 29
12613: PPUSH
12614: LD_STRING DG-1-apeeng
12616: PPUSH
12617: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12621: LD_EXP 33
12625: PPUSH
12626: LD_STRING DK-2-apeeng
12628: PPUSH
12629: CALL_OW 88
// end ; InGameOff ;
12633: CALL_OW 9
// end ;
12637: PPOPN 1
12639: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12640: LD_EXP 4
12644: PUSH
12645: LD_INT 22
12647: PUSH
12648: LD_INT 2
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 30
12657: PUSH
12658: LD_INT 0
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PPUSH
12669: CALL_OW 69
12673: AND
12674: IFFALSE 12839
12676: GO 12678
12678: DISABLE
// begin wait ( 0 0$10 ) ;
12679: LD_INT 350
12681: PPUSH
12682: CALL_OW 67
// DialogueOn ;
12686: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12690: LD_EXP 36
12694: PPUSH
12695: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12699: LD_EXP 36
12703: PPUSH
12704: LD_STRING DF-1-distribution
12706: PPUSH
12707: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12711: LD_EXP 28
12715: PPUSH
12716: LD_STRING DH-2-distribution
12718: PPUSH
12719: CALL_OW 88
// if IsOk ( Kaia ) then
12723: LD_EXP 33
12727: PPUSH
12728: CALL_OW 302
12732: IFFALSE 12793
// begin Say ( Kaia , DK-1-distribution ) ;
12734: LD_EXP 33
12738: PPUSH
12739: LD_STRING DK-1-distribution
12741: PPUSH
12742: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12746: LD_EXP 28
12750: PPUSH
12751: LD_STRING DH-1-distribution
12753: PPUSH
12754: CALL_OW 88
// if IsOk ( Givi ) then
12758: LD_EXP 29
12762: PPUSH
12763: CALL_OW 302
12767: IFFALSE 12793
// begin Say ( Givi , DG-1-distribution ) ;
12769: LD_EXP 29
12773: PPUSH
12774: LD_STRING DG-1-distribution
12776: PPUSH
12777: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12781: LD_EXP 28
12785: PPUSH
12786: LD_STRING DH-3-distribution
12788: PPUSH
12789: CALL_OW 88
// end ; end ; DialogueOff ;
12793: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12797: LD_STRING Crates1
12799: PPUSH
12800: CALL_OW 337
// farmerRequestedCrates := 300 ;
12804: LD_ADDR_EXP 16
12808: PUSH
12809: LD_INT 300
12811: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12812: LD_STRING FarmerCrates
12814: PPUSH
12815: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12819: LD_INT 10
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12829: LD_INT 108
12831: PPUSH
12832: LD_INT 61
12834: PPUSH
12835: CALL_OW 86
// end ;
12839: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12840: LD_EXP 6
12844: PUSH
12845: LD_INT 22
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: LD_INT 57
12860: PUSH
12861: EMPTY
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 30
12873: PUSH
12874: LD_INT 6
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 30
12883: PUSH
12884: LD_INT 7
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: PPUSH
12901: CALL_OW 69
12905: AND
12906: PUSH
12907: LD_INT 22
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: LD_INT 57
12922: PUSH
12923: EMPTY
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 30
12932: PUSH
12933: LD_INT 4
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: PPUSH
12945: CALL_OW 69
12949: AND
12950: IFFALSE 13114
12952: GO 12954
12954: DISABLE
12955: LD_INT 0
12957: PPUSH
// begin wait ( 0 0$10 ) ;
12958: LD_INT 350
12960: PPUSH
12961: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: LD_EXP 42
12974: PPUSH
12975: LD_INT 26
12977: PUSH
12978: LD_INT 1
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 25
12987: PUSH
12988: LD_INT 2
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PPUSH
12999: CALL_OW 72
13003: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13004: LD_EXP 28
13008: PPUSH
13009: LD_STRING DH-1-task
13011: PPUSH
13012: CALL_OW 88
// if IsOk ( Sophia ) then
13016: LD_EXP 34
13020: PPUSH
13021: CALL_OW 302
13025: IFFALSE 13065
// begin Say ( Sophia , DS-1-task ) ;
13027: LD_EXP 34
13031: PPUSH
13032: LD_STRING DS-1-task
13034: PPUSH
13035: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13039: LD_EXP 34
13043: PPUSH
13044: LD_STRING DS-2-task
13046: PPUSH
13047: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13051: LD_EXP 28
13055: PPUSH
13056: LD_STRING DH-2-task
13058: PPUSH
13059: CALL_OW 88
// end else
13063: GO 13099
// if eng then
13065: LD_VAR 0 1
13069: IFFALSE 13099
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13071: LD_VAR 0 1
13075: PUSH
13076: LD_INT 1
13078: ARRAY
13079: PPUSH
13080: LD_STRING DArm-1-task
13082: PPUSH
13083: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13087: LD_EXP 28
13091: PPUSH
13092: LD_STRING DH-2-task
13094: PPUSH
13095: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13099: LD_STRING BaseConstructed
13101: PPUSH
13102: CALL_OW 337
// allowConvoys := true ;
13106: LD_ADDR_EXP 12
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// end ;
13114: PPOPN 1
13116: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13117: LD_INT 22
13119: PUSH
13120: LD_INT 4
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 34
13129: PUSH
13130: LD_INT 12
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PPUSH
13141: CALL_OW 69
13145: IFFALSE 13313
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
13153: PPUSH
13154: PPUSH
// begin wait ( 0 0$2 ) ;
13155: LD_INT 70
13157: PPUSH
13158: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: LD_INT 22
13169: PUSH
13170: LD_INT 4
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 34
13179: PUSH
13180: LD_INT 12
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PPUSH
13191: CALL_OW 69
13195: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13196: LD_ADDR_VAR 0 2
13200: PUSH
13201: LD_VAR 0 1
13205: PUSH
13206: LD_INT 1
13208: ARRAY
13209: PPUSH
13210: CALL_OW 250
13214: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13215: LD_ADDR_VAR 0 3
13219: PUSH
13220: LD_VAR 0 1
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: CALL_OW 251
13233: ST_TO_ADDR
// DialogueOn ;
13234: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13238: LD_VAR 0 2
13242: PPUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13252: LD_VAR 0 2
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 2
13264: PPUSH
13265: LD_INT 6
13267: NEG
13268: PPUSH
13269: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13273: LD_INT 10
13275: PPUSH
13276: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13280: LD_EXP 28
13284: PPUSH
13285: LD_STRING DH-1-seecargo
13287: PPUSH
13288: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13292: LD_VAR 0 2
13296: PPUSH
13297: LD_VAR 0 3
13301: PPUSH
13302: LD_INT 2
13304: PPUSH
13305: CALL_OW 331
// DialogueOff ;
13309: CALL_OW 7
// end ;
13313: PPOPN 3
13315: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13316: LD_EXP 4
13320: PUSH
13321: LD_EXP 15
13325: PUSH
13326: LD_INT 300
13328: GREATEREQUAL
13329: AND
13330: IFFALSE 13402
13332: GO 13334
13334: DISABLE
// begin DialogueOn ;
13335: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13339: LD_EXP 36
13343: PPUSH
13344: LD_STRING DF-1-delivery-2
13346: PPUSH
13347: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13351: LD_EXP 28
13355: PPUSH
13356: LD_STRING DH-1-delivery-2
13358: PPUSH
13359: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13363: LD_EXP 36
13367: PPUSH
13368: LD_STRING DF-2-delivery-2
13370: PPUSH
13371: CALL_OW 94
// DialogueOff ;
13375: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13379: LD_STRING Crates2
13381: PPUSH
13382: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13386: LD_ADDR_EXP 17
13390: PUSH
13391: LD_INT 63000
13393: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13394: LD_ADDR_EXP 16
13398: PUSH
13399: LD_INT 600
13401: ST_TO_ADDR
// end ;
13402: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13403: LD_EXP 4
13407: PUSH
13408: LD_EXP 15
13412: PUSH
13413: LD_INT 600
13415: GREATEREQUAL
13416: AND
13417: PUSH
13418: LD_OWVAR 67
13422: PUSH
13423: LD_INT 1
13425: GREATER
13426: AND
13427: IFFALSE 13593
13429: GO 13431
13431: DISABLE
// begin DialogueOn ;
13432: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13436: LD_EXP 36
13440: PPUSH
13441: LD_STRING DF-1-delivery-3
13443: PPUSH
13444: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13448: LD_EXP 28
13452: PPUSH
13453: LD_STRING DH-1-delivery-3
13455: PPUSH
13456: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13460: LD_EXP 36
13464: PPUSH
13465: LD_STRING DF-2-delivery-3
13467: PPUSH
13468: CALL_OW 94
// if IsOk ( Kaia ) then
13472: LD_EXP 33
13476: PPUSH
13477: CALL_OW 302
13481: IFFALSE 13531
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13483: LD_EXP 33
13487: PPUSH
13488: LD_STRING DK-1-delivery-3
13490: PPUSH
13491: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13495: LD_EXP 28
13499: PPUSH
13500: LD_STRING DH-2-delivery-3
13502: PPUSH
13503: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13507: LD_EXP 29
13511: PPUSH
13512: LD_STRING DG-1-delivery-3
13514: PPUSH
13515: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13519: LD_EXP 30
13523: PPUSH
13524: LD_STRING DM-1-delivery-3
13526: PPUSH
13527: CALL_OW 88
// end ; DialogueOff ;
13531: CALL_OW 7
// if Difficulty = 2 then
13535: LD_OWVAR 67
13539: PUSH
13540: LD_INT 2
13542: EQUAL
13543: IFFALSE 13570
// begin ChangeMissionObjectives ( Crates3 ) ;
13545: LD_STRING Crates3
13547: PPUSH
13548: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13552: LD_ADDR_EXP 17
13556: PUSH
13557: LD_INT 63000
13559: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13560: LD_ADDR_EXP 16
13564: PUSH
13565: LD_INT 900
13567: ST_TO_ADDR
// end else
13568: GO 13593
// begin ChangeMissionObjectives ( Crates4 ) ;
13570: LD_STRING Crates4
13572: PPUSH
13573: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13577: LD_ADDR_EXP 17
13581: PUSH
13582: LD_INT 63000
13584: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13585: LD_ADDR_EXP 16
13589: PUSH
13590: LD_INT 1200
13592: ST_TO_ADDR
// end ; end ;
13593: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13594: LD_EXP 4
13598: PUSH
13599: LD_EXP 15
13603: PUSH
13604: LD_INT 600
13606: PUSH
13607: LD_INT 900
13609: PUSH
13610: LD_INT 1200
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: PUSH
13618: LD_OWVAR 67
13622: ARRAY
13623: GREATEREQUAL
13624: AND
13625: PUSH
13626: LD_EXP 16
13630: PUSH
13631: LD_EXP 17
13635: LESSEQUAL
13636: AND
13637: IFFALSE 13704
13639: GO 13641
13641: DISABLE
// begin retreatAllowed := true ;
13642: LD_ADDR_EXP 11
13646: PUSH
13647: LD_INT 1
13649: ST_TO_ADDR
// display_strings := [ ] ;
13650: LD_ADDR_OWVAR 47
13654: PUSH
13655: EMPTY
13656: ST_TO_ADDR
// DialogueOn ;
13657: CALL_OW 6
// InGameOn ;
13661: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13665: LD_EXP 37
13669: PPUSH
13670: LD_STRING DO-radio-end
13672: PPUSH
13673: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13677: LD_EXP 28
13681: PPUSH
13682: LD_STRING DH-1-radio-end
13684: PPUSH
13685: CALL_OW 88
// InGameOff ;
13689: CALL_OW 9
// DialogueOff ;
13693: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13697: LD_STRING Retreat
13699: PPUSH
13700: CALL_OW 337
// end ;
13704: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13705: LD_EXP 11
13709: IFFALSE 13840
13711: GO 13713
13713: DISABLE
13714: LD_INT 0
13716: PPUSH
13717: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13718: LD_INT 10
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13728: LD_ADDR_VAR 0 1
13732: PUSH
13733: LD_EXP 39
13737: PPUSH
13738: LD_INT 25
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 72
13752: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 102
13760: PPUSH
13761: LD_INT 69
13763: PPUSH
13764: CALL_OW 428
13768: PUSH
13769: LD_INT 0
13771: EQUAL
13772: AND
13773: IFFALSE 13840
// begin for i in tmp do
13775: LD_ADDR_VAR 0 2
13779: PUSH
13780: LD_VAR 0 1
13784: PUSH
13785: FOR_IN
13786: IFFALSE 13810
// if IsInUnit ( i ) then
13788: LD_VAR 0 2
13792: PPUSH
13793: CALL_OW 310
13797: IFFALSE 13808
// ComExitBuilding ( i ) ;
13799: LD_VAR 0 2
13803: PPUSH
13804: CALL_OW 122
13808: GO 13785
13810: POP
13811: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13812: LD_VAR 0 1
13816: PPUSH
13817: LD_INT 31
13819: PPUSH
13820: LD_INT 102
13822: PPUSH
13823: LD_INT 69
13825: PPUSH
13826: LD_INT 2
13828: PPUSH
13829: CALL_OW 205
// wait ( 0 0$3 ) ;
13833: LD_INT 105
13835: PPUSH
13836: CALL_OW 67
// end ; end ;
13840: PPOPN 2
13842: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13843: LD_EXP 11
13847: NOT
13848: PUSH
13849: LD_INT 5
13851: PPUSH
13852: CALL_OW 301
13856: AND
13857: IFFALSE 13889
13859: GO 13861
13861: DISABLE
// begin DialogueOn ;
13862: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13866: LD_EXP 36
13870: PPUSH
13871: LD_STRING DF-1-failure
13873: PPUSH
13874: CALL_OW 94
// DialogueOff ;
13878: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13882: LD_STRING FarmerDepot
13884: PPUSH
13885: CALL_OW 104
// end ;
13889: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13890: LD_EXP 11
13894: PUSH
13895: LD_EXP 28
13899: PPUSH
13900: LD_EXP 36
13904: PPUSH
13905: CALL_OW 296
13909: PUSH
13910: LD_INT 6
13912: LESS
13913: AND
13914: PUSH
13915: LD_INT 81
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 21
13927: PUSH
13928: LD_INT 1
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PPUSH
13939: CALL_OW 69
13943: NOT
13944: AND
13945: IFFALSE 14566
13947: GO 13949
13949: DISABLE
13950: LD_INT 0
13952: PPUSH
13953: PPUSH
13954: PPUSH
// begin allowConvoys := false ;
13955: LD_ADDR_EXP 12
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// InGameOn ;
13963: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
13967: LD_EXP 28
13971: PPUSH
13972: LD_EXP 36
13976: PPUSH
13977: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
13981: LD_EXP 36
13985: PPUSH
13986: LD_EXP 28
13990: PPUSH
13991: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
13995: LD_EXP 36
13999: PPUSH
14000: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14004: LD_EXP 28
14008: PPUSH
14009: LD_STRING DH-1-end
14011: PPUSH
14012: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14016: LD_EXP 36
14020: PPUSH
14021: LD_STRING DF-1-end
14023: PPUSH
14024: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14028: LD_EXP 36
14032: PPUSH
14033: LD_STRING DF-2-end
14035: PPUSH
14036: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14040: LD_EXP 28
14044: PPUSH
14045: LD_STRING DH-2-end
14047: PPUSH
14048: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14052: LD_EXP 36
14056: PPUSH
14057: LD_STRING DF-3-end
14059: PPUSH
14060: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14064: LD_EXP 28
14068: PPUSH
14069: LD_STRING DH-3-end
14071: PPUSH
14072: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14076: LD_EXP 29
14080: PPUSH
14081: LD_STRING DG-1-end
14083: PPUSH
14084: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14088: LD_EXP 28
14092: PPUSH
14093: LD_STRING DH-4-end
14095: PPUSH
14096: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14100: LD_EXP 36
14104: PPUSH
14105: LD_STRING DF-4-end
14107: PPUSH
14108: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14112: LD_EXP 28
14116: PPUSH
14117: LD_STRING DH-5-end
14119: PPUSH
14120: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14124: LD_EXP 36
14128: PPUSH
14129: LD_STRING DF-5-end
14131: PPUSH
14132: CALL_OW 88
// InGameOff ;
14136: CALL_OW 9
// allowCargoEvacuation := true ;
14140: LD_ADDR_EXP 7
14144: PUSH
14145: LD_INT 1
14147: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14148: LD_ADDR_VAR 0 2
14152: PUSH
14153: LD_INT 4
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_OWVAR 67
14171: ARRAY
14172: ST_TO_ADDR
// if farmerSquad < max then
14173: LD_EXP 39
14177: PUSH
14178: LD_VAR 0 2
14182: LESS
14183: IFFALSE 14195
// max := farmerSquad ;
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: LD_EXP 39
14194: ST_TO_ADDR
// for i := 1 to max do
14195: LD_ADDR_VAR 0 1
14199: PUSH
14200: DOUBLE
14201: LD_INT 1
14203: DEC
14204: ST_TO_ADDR
14205: LD_VAR 0 2
14209: PUSH
14210: FOR_TO
14211: IFFALSE 14249
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14213: LD_EXP 39
14217: PUSH
14218: LD_INT 1
14220: ARRAY
14221: PPUSH
14222: LD_INT 2
14224: PPUSH
14225: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14229: LD_ADDR_EXP 39
14233: PUSH
14234: LD_EXP 39
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: CALL_OW 3
14246: ST_TO_ADDR
// end ;
14247: GO 14210
14249: POP
14250: POP
// for i in Farmer ^ farmerSquad do
14251: LD_ADDR_VAR 0 1
14255: PUSH
14256: LD_EXP 36
14260: PUSH
14261: LD_EXP 39
14265: ADD
14266: PUSH
14267: FOR_IN
14268: IFFALSE 14307
// begin if IsInUnit ( i ) then
14270: LD_VAR 0 1
14274: PPUSH
14275: CALL_OW 310
14279: IFFALSE 14290
// ComExitBuilding ( i ) ;
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14290: LD_VAR 0 1
14294: PPUSH
14295: LD_INT 102
14297: PPUSH
14298: LD_INT 7
14300: PPUSH
14301: CALL_OW 171
// end ;
14305: GO 14267
14307: POP
14308: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14309: LD_ADDR_VAR 0 1
14313: PUSH
14314: LD_INT 22
14316: PUSH
14317: LD_INT 5
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 21
14326: PUSH
14327: LD_INT 3
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PPUSH
14338: CALL_OW 69
14342: PUSH
14343: LD_INT 5
14345: DIFF
14346: PUSH
14347: FOR_IN
14348: IFFALSE 14364
// SetSide ( i , 2 ) ;
14350: LD_VAR 0 1
14354: PPUSH
14355: LD_INT 2
14357: PPUSH
14358: CALL_OW 235
14362: GO 14347
14364: POP
14365: POP
// repeat wait ( 0 0$1 ) ;
14366: LD_INT 35
14368: PPUSH
14369: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14373: LD_ADDR_VAR 0 3
14377: PUSH
14378: LD_EXP 36
14382: PUSH
14383: LD_EXP 39
14387: ADD
14388: PPUSH
14389: LD_INT 95
14391: PUSH
14392: LD_INT 3
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PPUSH
14399: CALL_OW 72
14403: ST_TO_ADDR
// if tmp then
14404: LD_VAR 0 3
14408: IFFALSE 14452
// for i in tmp do
14410: LD_ADDR_VAR 0 1
14414: PUSH
14415: LD_VAR 0 3
14419: PUSH
14420: FOR_IN
14421: IFFALSE 14450
// begin farmerSquad := farmerSquad diff i ;
14423: LD_ADDR_EXP 39
14427: PUSH
14428: LD_EXP 39
14432: PUSH
14433: LD_VAR 0 1
14437: DIFF
14438: ST_TO_ADDR
// RemoveUnit ( i ) ;
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 64
// end ;
14448: GO 14420
14450: POP
14451: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14452: LD_EXP 39
14456: PUSH
14457: EMPTY
14458: EQUAL
14459: PUSH
14460: LD_EXP 36
14464: PPUSH
14465: CALL_OW 305
14469: NOT
14470: AND
14471: IFFALSE 14366
// if farmerHumanLoseCounter = 0 then
14473: LD_EXP 20
14477: PUSH
14478: LD_INT 0
14480: EQUAL
14481: IFFALSE 14490
// SetAchievement ( ACH_BABY ) ;
14483: LD_STRING ACH_BABY
14485: PPUSH
14486: CALL_OW 543
// wait ( 1 1$00 ) ;
14490: LD_INT 2100
14492: PPUSH
14493: CALL_OW 67
// SendAttack ;
14497: CALL 6087 0 0
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14501: LD_ADDR_VAR 0 1
14505: PUSH
14506: DOUBLE
14507: LD_INT 1
14509: DEC
14510: ST_TO_ADDR
14511: LD_INT 2
14513: PUSH
14514: LD_INT 3
14516: PUSH
14517: LD_INT 4
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: LD_OWVAR 67
14529: ARRAY
14530: PUSH
14531: FOR_TO
14532: IFFALSE 14564
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14534: LD_INT 4200
14536: PUSH
14537: LD_INT 3500
14539: PUSH
14540: LD_INT 3150
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: LD_OWVAR 67
14552: ARRAY
14553: PPUSH
14554: CALL_OW 67
// SendAttack ;
14558: CALL 6087 0 0
// end ;
14562: GO 14531
14564: POP
14565: POP
// end ;
14566: PPOPN 3
14568: END
// every 0 0$1 trigger allowCargoEvacuation do
14569: LD_EXP 7
14573: IFFALSE 14582
14575: GO 14577
14577: DISABLE
// StartCargoEvacuation ;
14578: CALL 3623 0 0
14582: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14583: LD_EXP 17
14587: PUSH
14588: LD_INT 18900
14590: LESSEQUAL
14591: IFFALSE 14640
14593: GO 14595
14595: DISABLE
// begin DialogueOn ;
14596: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14600: LD_EXP 36
14604: PPUSH
14605: LD_STRING DF-1-distribution-a
14607: PPUSH
14608: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14612: LD_EXP 28
14616: PPUSH
14617: LD_STRING DH-1-distribution-a
14619: PPUSH
14620: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14624: LD_EXP 36
14628: PPUSH
14629: LD_STRING DF-2-distribution-a
14631: PPUSH
14632: CALL_OW 94
// DialogueOff ;
14636: CALL_OW 7
// end ;
14640: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14641: LD_EXP 17
14645: PUSH
14646: LD_INT 0
14648: LESSEQUAL
14649: IFFALSE 14681
14651: GO 14653
14653: DISABLE
// begin DialogueOn ;
14654: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14658: LD_EXP 36
14662: PPUSH
14663: LD_STRING DF-3-distribution-a
14665: PPUSH
14666: CALL_OW 94
// YouLost ( Distribution ) ;
14670: LD_STRING Distribution
14672: PPUSH
14673: CALL_OW 104
// DialogueOff ;
14677: CALL_OW 7
// end ;
14681: END
// every 0 0$1 trigger vehCounter >= 2 do
14682: LD_EXP 22
14686: PUSH
14687: LD_INT 2
14689: GREATEREQUAL
14690: IFFALSE 14702
14692: GO 14694
14694: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14695: LD_STRING VehConstructed
14697: PPUSH
14698: CALL_OW 337
14702: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14703: LD_INT 22
14705: PUSH
14706: LD_INT 2
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 34
14715: PUSH
14716: LD_INT 12
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PPUSH
14727: CALL_OW 69
14731: IFFALSE 14791
14733: GO 14735
14735: DISABLE
// begin DialogueOn ;
14736: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14740: LD_EXP 28
14744: PPUSH
14745: LD_STRING DH-1-truck
14747: PPUSH
14748: CALL_OW 88
// if IsOk ( Markov ) then
14752: LD_EXP 35
14756: PPUSH
14757: CALL_OW 302
14761: IFFALSE 14787
// begin Say ( Markov , DMar-1-truck ) ;
14763: LD_EXP 35
14767: PPUSH
14768: LD_STRING DMar-1-truck
14770: PPUSH
14771: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14775: LD_EXP 28
14779: PPUSH
14780: LD_STRING DH-2-truck
14782: PPUSH
14783: CALL_OW 88
// end ; DialogueOff ;
14787: CALL_OW 7
// end ;
14791: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
14796: PPUSH
// if IsOk ( Givi ) then
14797: LD_EXP 29
14801: PPUSH
14802: CALL_OW 302
14806: IFFALSE 14822
// begin Say ( Givi , DG-1-nocargo ) ;
14808: LD_EXP 29
14812: PPUSH
14813: LD_STRING DG-1-nocargo
14815: PPUSH
14816: CALL_OW 88
// exit ;
14820: GO 14918
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14822: LD_ADDR_VAR 0 2
14826: PUSH
14827: LD_EXP 42
14831: PPUSH
14832: LD_INT 26
14834: PUSH
14835: LD_INT 1
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 72
14846: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: LD_EXP 42
14856: PPUSH
14857: LD_INT 26
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PPUSH
14867: CALL_OW 72
14871: ST_TO_ADDR
// if randomMen then
14872: LD_VAR 0 2
14876: IFFALSE 14896
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14878: LD_VAR 0 2
14882: PUSH
14883: LD_INT 1
14885: ARRAY
14886: PPUSH
14887: LD_STRING DArm-1-nocargo
14889: PPUSH
14890: CALL_OW 88
14894: GO 14918
// if randomWomen then
14896: LD_VAR 0 3
14900: IFFALSE 14918
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14902: LD_VAR 0 3
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: LD_STRING DArf-1-nocargo
14913: PPUSH
14914: CALL_OW 88
// end ;
14918: LD_VAR 0 1
14922: RET
// export function IncomingAttack ; begin
14923: LD_INT 0
14925: PPUSH
// if attackWave = 1 then
14926: LD_EXP 19
14930: PUSH
14931: LD_INT 1
14933: EQUAL
14934: IFFALSE 15005
// begin DialogueOn ;
14936: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14940: LD_EXP 37
14944: PPUSH
14945: LD_STRING DO-1-radio-1
14947: PPUSH
14948: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
14952: LD_EXP 28
14956: PPUSH
14957: LD_STRING DH-1-radio-1-
14959: PPUSH
14960: CALL_OW 88
// if IsOk ( Markov ) then
14964: LD_EXP 35
14968: PPUSH
14969: CALL_OW 302
14973: IFFALSE 14999
// begin Say ( Markov , DMar-1-radio-1 ) ;
14975: LD_EXP 35
14979: PPUSH
14980: LD_STRING DMar-1-radio-1
14982: PPUSH
14983: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
14987: LD_EXP 28
14991: PPUSH
14992: LD_STRING DH-2-radio-1
14994: PPUSH
14995: CALL_OW 88
// end ; DialogueOff ;
14999: CALL_OW 7
// end else
15003: GO 15029
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15005: LD_EXP 37
15009: PPUSH
15010: LD_STRING DO-1-radio-u
15012: PPUSH
15013: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15017: LD_EXP 28
15021: PPUSH
15022: LD_STRING DH-1-radio-u
15024: PPUSH
15025: CALL_OW 88
// end ; end ;
15029: LD_VAR 0 1
15033: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15034: LD_EXP 44
15038: PPUSH
15039: LD_INT 95
15041: PUSH
15042: LD_INT 8
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PPUSH
15049: CALL_OW 72
15053: IFFALSE 15156
15055: GO 15057
15057: DISABLE
15058: LD_INT 0
15060: PPUSH
// begin enable ;
15061: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15062: LD_ADDR_VAR 0 1
15066: PUSH
15067: LD_EXP 44
15071: PPUSH
15072: LD_INT 95
15074: PUSH
15075: LD_INT 8
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PPUSH
15082: CALL_OW 72
15086: PUSH
15087: FOR_IN
15088: IFFALSE 15117
// begin usForces := usForces diff i ;
15090: LD_ADDR_EXP 44
15094: PUSH
15095: LD_EXP 44
15099: PUSH
15100: LD_VAR 0 1
15104: DIFF
15105: ST_TO_ADDR
// RemoveUnit ( i ) ;
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 64
// end ;
15115: GO 15087
15117: POP
15118: POP
// if not americanHasEscaped and attackWave = 1 then
15119: LD_EXP 8
15123: NOT
15124: PUSH
15125: LD_EXP 19
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: AND
15134: IFFALSE 15156
// begin americanHasEscaped := true ;
15136: LD_ADDR_EXP 8
15140: PUSH
15141: LD_INT 1
15143: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15144: LD_EXP 28
15148: PPUSH
15149: LD_STRING DH-2-assault-a
15151: PPUSH
15152: CALL_OW 88
// end ; end ;
15156: PPOPN 1
15158: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15159: LD_INT 4
15161: PPUSH
15162: LD_INT 22
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PPUSH
15172: CALL_OW 70
15176: PUSH
15177: LD_EXP 11
15181: NOT
15182: AND
15183: IFFALSE 15200
15185: GO 15187
15187: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15188: LD_EXP 36
15192: PPUSH
15193: LD_STRING DF-1-attack
15195: PPUSH
15196: CALL_OW 94
15200: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15201: LD_INT 5
15203: PPUSH
15204: CALL_OW 255
15208: PUSH
15209: LD_INT 2
15211: EQUAL
15212: IFFALSE 15224
15214: GO 15216
15216: DISABLE
// YouLost ( Attack ) ;
15217: LD_STRING Attack
15219: PPUSH
15220: CALL_OW 104
15224: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15225: LD_INT 22
15227: PUSH
15228: LD_INT 1
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 21
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 69
15253: NOT
15254: PUSH
15255: LD_INT 22
15257: PUSH
15258: LD_INT 4
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 69
15269: NOT
15270: AND
15271: PUSH
15272: LD_EXP 11
15276: NOT
15277: AND
15278: PUSH
15279: LD_EXP 15
15283: PUSH
15284: LD_INT 90
15286: GREATER
15287: AND
15288: PUSH
15289: LD_INT 7
15291: PPUSH
15292: LD_INT 22
15294: PUSH
15295: LD_INT 2
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 21
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PPUSH
15316: CALL_OW 70
15320: AND
15321: PUSH
15322: LD_INT 22
15324: PUSH
15325: LD_INT 2
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 50
15334: PUSH
15335: EMPTY
15336: LIST
15337: PUSH
15338: LD_INT 30
15340: PUSH
15341: LD_INT 0
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: AND
15358: IFFALSE 16151
15360: GO 15362
15362: DISABLE
15363: LD_INT 0
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
15369: PPUSH
// begin depot := usDepot ;
15370: LD_ADDR_VAR 0 5
15374: PUSH
15375: LD_INT 11
15377: ST_TO_ADDR
// if not depot then
15378: LD_VAR 0 5
15382: NOT
15383: IFFALSE 15423
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15385: LD_ADDR_VAR 0 5
15389: PUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: LD_INT 0
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15423: LD_ADDR_VAR 0 1
15427: PUSH
15428: LD_EXP 42
15432: PPUSH
15433: LD_INT 26
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PPUSH
15443: CALL_OW 72
15447: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: LD_EXP 42
15457: PPUSH
15458: LD_INT 26
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 72
15472: ST_TO_ADDR
// if IsOk ( Kaia ) then
15473: LD_EXP 33
15477: PPUSH
15478: CALL_OW 302
15482: IFFALSE 15503
// speaker := [ Kaia , DK ] else
15484: LD_ADDR_VAR 0 3
15488: PUSH
15489: LD_EXP 33
15493: PUSH
15494: LD_STRING DK
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: ST_TO_ADDR
15501: GO 15583
// if randomMen then
15503: LD_VAR 0 1
15507: IFFALSE 15542
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15509: LD_ADDR_VAR 0 3
15513: PUSH
15514: LD_VAR 0 1
15518: PUSH
15519: LD_INT 1
15521: PPUSH
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 12
15531: ARRAY
15532: PUSH
15533: LD_STRING DArm
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: ST_TO_ADDR
15540: GO 15583
// if randomWomen then
15542: LD_VAR 0 2
15546: IFFALSE 15581
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15548: LD_ADDR_VAR 0 3
15552: PUSH
15553: LD_VAR 0 2
15557: PUSH
15558: LD_INT 1
15560: PPUSH
15561: LD_VAR 0 2
15565: PPUSH
15566: CALL_OW 12
15570: ARRAY
15571: PUSH
15572: LD_STRING DArf
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
15579: GO 15583
// exit ;
15581: GO 16151
// if IsInUnit ( speaker [ 1 ] ) then
15583: LD_VAR 0 3
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PPUSH
15592: CALL_OW 310
15596: IFFALSE 15619
// place := IsInUnit ( speaker [ 1 ] ) else
15598: LD_ADDR_VAR 0 4
15602: PUSH
15603: LD_VAR 0 3
15607: PUSH
15608: LD_INT 1
15610: ARRAY
15611: PPUSH
15612: CALL_OW 310
15616: ST_TO_ADDR
15617: GO 15633
// place := speaker [ 1 ] ;
15619: LD_ADDR_VAR 0 4
15623: PUSH
15624: LD_VAR 0 3
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15633: LD_VAR 0 4
15637: PPUSH
15638: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15642: LD_VAR 0 4
15646: PPUSH
15647: CALL_OW 250
15651: PPUSH
15652: LD_VAR 0 4
15656: PPUSH
15657: CALL_OW 251
15661: PPUSH
15662: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15666: LD_INT 70
15668: PPUSH
15669: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15673: LD_EXP 38
15677: PPUSH
15678: CALL_OW 305
15682: NOT
15683: IFFALSE 15687
// exit ;
15685: GO 16151
// allowConvoys := false ;
15687: LD_ADDR_EXP 12
15691: PUSH
15692: LD_INT 0
15694: ST_TO_ADDR
// InGameOn ;
15695: CALL_OW 8
// wait ( 0 0$1 ) ;
15699: LD_INT 35
15701: PPUSH
15702: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15706: LD_EXP 38
15710: PPUSH
15711: LD_STRING DI-1-land
15713: PPUSH
15714: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15718: LD_VAR 0 3
15722: PUSH
15723: LD_INT 1
15725: ARRAY
15726: PPUSH
15727: CALL_OW 310
15731: IFFALSE 15746
// ComExit ( speaker [ 1 ] ) ;
15733: LD_VAR 0 3
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PPUSH
15742: CALL 72693 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 1
15753: ARRAY
15754: PPUSH
15755: LD_EXP 38
15759: PPUSH
15760: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PPUSH
15773: LD_EXP 38
15777: PPUSH
15778: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15782: LD_EXP 38
15786: PPUSH
15787: LD_VAR 0 3
15791: PUSH
15792: LD_INT 1
15794: ARRAY
15795: PPUSH
15796: CALL_OW 119
// wait ( 0 0$1 ) ;
15800: LD_INT 35
15802: PPUSH
15803: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15807: LD_VAR 0 3
15811: PUSH
15812: LD_INT 1
15814: ARRAY
15815: PPUSH
15816: LD_VAR 0 3
15820: PUSH
15821: LD_INT 2
15823: ARRAY
15824: PUSH
15825: LD_STRING -1-land
15827: STR
15828: PPUSH
15829: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15833: LD_EXP 38
15837: PPUSH
15838: LD_STRING DI-2-land
15840: PPUSH
15841: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15845: LD_VAR 0 3
15849: PUSH
15850: LD_INT 1
15852: ARRAY
15853: PPUSH
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 2
15861: ARRAY
15862: PUSH
15863: LD_STRING -2-land
15865: STR
15866: PPUSH
15867: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: PPUSH
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 2
15887: ARRAY
15888: PUSH
15889: LD_STRING -3-land
15891: STR
15892: PPUSH
15893: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15897: LD_EXP 28
15901: PPUSH
15902: LD_STRING DH-1-land
15904: PPUSH
15905: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
15909: LD_VAR 0 5
15913: PPUSH
15914: CALL_OW 313
15918: PUSH
15919: LD_INT 6
15921: EQUAL
15922: IFFALSE 15942
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
15924: LD_VAR 0 5
15928: PPUSH
15929: CALL_OW 313
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15942: LD_EXP 38
15946: PPUSH
15947: LD_INT 2
15949: PPUSH
15950: CALL_OW 235
// CenterOnUnits ( depot ) ;
15954: LD_VAR 0 5
15958: PPUSH
15959: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
15963: LD_EXP 38
15967: PPUSH
15968: LD_VAR 0 5
15972: PPUSH
15973: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
15977: LD_VAR 0 3
15981: PUSH
15982: LD_INT 1
15984: ARRAY
15985: PPUSH
15986: LD_VAR 0 5
15990: PPUSH
15991: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15995: LD_INT 35
15997: PPUSH
15998: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16002: LD_EXP 38
16006: PPUSH
16007: CALL_OW 310
16011: PUSH
16012: LD_EXP 38
16016: PPUSH
16017: CALL_OW 302
16021: NOT
16022: OR
16023: PUSH
16024: LD_VAR 0 5
16028: PPUSH
16029: CALL_OW 302
16033: NOT
16034: OR
16035: IFFALSE 15995
// InGameOff ;
16037: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16041: LD_EXP 38
16045: PPUSH
16046: CALL_OW 302
16050: NOT
16051: IFFALSE 16055
// exit ;
16053: GO 16151
// if not IsOk ( depot ) then
16055: LD_VAR 0 5
16059: PPUSH
16060: CALL_OW 302
16064: NOT
16065: IFFALSE 16128
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16067: LD_EXP 38
16071: PPUSH
16072: LD_INT 30
16074: PPUSH
16075: LD_INT 1
16077: PPUSH
16078: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16082: LD_INT 35
16084: PPUSH
16085: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16089: LD_EXP 38
16093: PPUSH
16094: LD_INT 30
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: CALL_OW 307
16104: PUSH
16105: LD_EXP 38
16109: PPUSH
16110: CALL_OW 301
16114: OR
16115: IFFALSE 16082
// RemoveUnit ( Ibrahim ) ;
16117: LD_EXP 38
16121: PPUSH
16122: CALL_OW 64
// exit ;
16126: GO 16151
// end ; ibrahimInDepot := true ;
16128: LD_ADDR_EXP 25
16132: PUSH
16133: LD_INT 1
16135: ST_TO_ADDR
// allowConvoys := true ;
16136: LD_ADDR_EXP 12
16140: PUSH
16141: LD_INT 1
16143: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16144: LD_STRING IbrahimInDepot
16146: PPUSH
16147: CALL_OW 97
// end ;
16151: PPOPN 5
16153: END
// export function IbrahimQuery ; begin
16154: LD_INT 0
16156: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16157: LD_STRING IbrahimQuery
16159: PPUSH
16160: CALL_OW 97
16164: PUSH
16165: LD_INT 1
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16449
16173: POP
// begin allowConvoys := false ;
16174: LD_ADDR_EXP 12
16178: PUSH
16179: LD_INT 0
16181: ST_TO_ADDR
// ibrahimInDepot := false ;
16182: LD_ADDR_EXP 25
16186: PUSH
16187: LD_INT 0
16189: ST_TO_ADDR
// InGameOn ;
16190: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16194: LD_EXP 28
16198: PPUSH
16199: CALL_OW 87
// wait ( 0 0$1 ) ;
16203: LD_INT 35
16205: PPUSH
16206: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16210: LD_EXP 28
16214: PPUSH
16215: LD_STRING DH-1-interrogation
16217: PPUSH
16218: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16222: LD_EXP 38
16226: PPUSH
16227: LD_STRING DI-1-interrogation
16229: PPUSH
16230: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16234: LD_EXP 28
16238: PPUSH
16239: LD_STRING DH-2-interrogation
16241: PPUSH
16242: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16246: LD_EXP 38
16250: PPUSH
16251: LD_STRING DI-2-interrogation
16253: PPUSH
16254: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16258: LD_EXP 28
16262: PPUSH
16263: LD_STRING DH-3-interrogation
16265: PPUSH
16266: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16270: LD_EXP 38
16274: PPUSH
16275: LD_STRING DI-3-interrogation
16277: PPUSH
16278: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16282: LD_EXP 28
16286: PPUSH
16287: LD_STRING DH-4-interrogation
16289: PPUSH
16290: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16294: LD_EXP 38
16298: PPUSH
16299: LD_STRING DI-4-interrogation
16301: PPUSH
16302: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16306: LD_EXP 28
16310: PPUSH
16311: LD_STRING DH-5-interrogation
16313: PPUSH
16314: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16318: LD_EXP 38
16322: PPUSH
16323: LD_STRING DI-5-interrogation
16325: PPUSH
16326: CALL_OW 88
// wait ( 0 0$1 ) ;
16330: LD_INT 35
16332: PPUSH
16333: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16337: LD_STRING IbrahimDecisionQuery
16339: PPUSH
16340: CALL_OW 97
16344: PUSH
16345: LD_INT 1
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16377
16353: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16354: LD_EXP 38
16358: PPUSH
16359: LD_STRING DI-1-kill
16361: PPUSH
16362: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16366: LD_EXP 38
16370: PPUSH
16371: CALL_OW 66
// end ; 2 :
16375: GO 16443
16377: LD_INT 2
16379: DOUBLE
16380: EQUAL
16381: IFTRUE 16385
16383: GO 16442
16385: POP
// begin SetSide ( Ibrahim , 6 ) ;
16386: LD_EXP 38
16390: PPUSH
16391: LD_INT 6
16393: PPUSH
16394: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16398: LD_EXP 38
16402: PPUSH
16403: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16407: LD_EXP 38
16411: PPUSH
16412: LD_INT 66
16414: PPUSH
16415: LD_INT 2
16417: PPUSH
16418: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16422: LD_EXP 38
16426: PPUSH
16427: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16431: LD_EXP 28
16435: PPUSH
16436: CALL_OW 122
// end ; end ;
16440: GO 16443
16442: POP
// InGameOff ;
16443: CALL_OW 9
// end ; 2 :
16447: GO 16463
16449: LD_INT 2
16451: DOUBLE
16452: EQUAL
16453: IFTRUE 16457
16455: GO 16462
16457: POP
// exit ; end ;
16458: GO 16501
16460: GO 16463
16462: POP
// allowConvoys := true ;
16463: LD_ADDR_EXP 12
16467: PUSH
16468: LD_INT 1
16470: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16471: LD_INT 5250
16473: PPUSH
16474: CALL_OW 67
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16478: LD_EXP 38
16482: PPUSH
16483: LD_INT 38
16485: PPUSH
16486: LD_INT 28
16488: PPUSH
16489: CALL_OW 111
// ibrahimIsFree := true ;
16493: LD_ADDR_EXP 26
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// end ;
16501: LD_VAR 0 1
16505: RET
// every 0 0$1 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot , x , y ;
16506: LD_EXP 26
16510: PUSH
16511: LD_EXP 38
16515: PPUSH
16516: CALL_OW 302
16520: AND
16521: PUSH
16522: LD_INT 6
16524: PPUSH
16525: LD_EXP 28
16529: PPUSH
16530: CALL_OW 292
16534: AND
16535: PUSH
16536: LD_INT 22
16538: PUSH
16539: LD_INT 4
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 69
16550: NOT
16551: AND
16552: PUSH
16553: LD_INT 22
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 21
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 69
16581: NOT
16582: AND
16583: IFFALSE 17343
16585: GO 16587
16587: DISABLE
16588: LD_INT 0
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
// begin allowConvoys := false ;
16596: LD_ADDR_EXP 12
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// depot := usDepot ;
16604: LD_ADDR_VAR 0 4
16608: PUSH
16609: LD_INT 11
16611: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16612: LD_INT 11
16614: NOT
16615: PUSH
16616: LD_INT 22
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 50
16628: PUSH
16629: EMPTY
16630: LIST
16631: PUSH
16632: LD_INT 30
16634: PUSH
16635: LD_INT 0
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: AND
16652: IFFALSE 16699
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16654: LD_ADDR_VAR 0 4
16658: PUSH
16659: LD_INT 22
16661: PUSH
16662: LD_INT 2
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 50
16671: PUSH
16672: EMPTY
16673: LIST
16674: PUSH
16675: LD_INT 30
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PUSH
16695: LD_INT 1
16697: ARRAY
16698: ST_TO_ADDR
// InGameOn ;
16699: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16703: LD_EXP 38
16707: PPUSH
16708: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16712: LD_EXP 28
16716: PPUSH
16717: LD_EXP 38
16721: PPUSH
16722: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16726: LD_EXP 38
16730: PPUSH
16731: LD_EXP 28
16735: PPUSH
16736: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16740: LD_EXP 38
16744: PPUSH
16745: LD_STRING DI-1-free
16747: PPUSH
16748: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16752: LD_EXP 28
16756: PPUSH
16757: LD_STRING DH-1-free
16759: PPUSH
16760: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16764: LD_EXP 38
16768: PPUSH
16769: LD_STRING DI-2-free
16771: PPUSH
16772: CALL_OW 88
// changeClass := 0 ;
16776: LD_ADDR_VAR 0 1
16780: PUSH
16781: LD_INT 0
16783: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16784: LD_STRING IbrahimJoinQuery
16786: PPUSH
16787: CALL_OW 97
16791: PUSH
16792: LD_INT 1
16794: DOUBLE
16795: EQUAL
16796: IFTRUE 16800
16798: GO 16811
16800: POP
// begin changeClass := 1 ;
16801: LD_ADDR_VAR 0 1
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// end ; 2 :
16809: GO 17051
16811: LD_INT 2
16813: DOUBLE
16814: EQUAL
16815: IFTRUE 16819
16817: GO 16971
16819: POP
// begin Say ( Heike , DH-1-decline ) ;
16820: LD_EXP 28
16824: PPUSH
16825: LD_STRING DH-1-decline
16827: PPUSH
16828: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16832: LD_EXP 38
16836: PPUSH
16837: LD_STRING DI-1-decline
16839: PPUSH
16840: CALL_OW 88
// InGameOff ;
16844: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16848: LD_EXP 38
16852: PPUSH
16853: LD_INT 30
16855: PPUSH
16856: LD_INT 1
16858: PPUSH
16859: CALL_OW 111
// p := 0 ;
16863: LD_ADDR_VAR 0 3
16867: PUSH
16868: LD_INT 0
16870: ST_TO_ADDR
// repeat p := p + 1 ;
16871: LD_ADDR_VAR 0 3
16875: PUSH
16876: LD_VAR 0 3
16880: PUSH
16881: LD_INT 1
16883: PLUS
16884: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16885: LD_INT 35
16887: PPUSH
16888: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
16892: LD_EXP 38
16896: PPUSH
16897: LD_INT 30
16899: PPUSH
16900: LD_INT 1
16902: PPUSH
16903: CALL_OW 307
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 101
16920: PUSH
16921: LD_INT 6
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PPUSH
16932: CALL_OW 69
16936: NOT
16937: OR
16938: PUSH
16939: LD_VAR 0 3
16943: PUSH
16944: LD_INT 10
16946: GREATER
16947: OR
16948: IFFALSE 16871
// RemoveUnit ( Ibrahim ) ;
16950: LD_EXP 38
16954: PPUSH
16955: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
16959: LD_INT 1
16961: PPUSH
16962: LD_STRING 03_IbrahimHasEscaped
16964: PPUSH
16965: CALL_OW 39
// end ; 3 :
16969: GO 17051
16971: LD_INT 3
16973: DOUBLE
16974: EQUAL
16975: IFTRUE 16979
16977: GO 17050
16979: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
16980: LD_EXP 28
16984: PPUSH
16985: LD_STRING DH-1-radio-hq
16987: PPUSH
16988: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
16992: LD_EXP 37
16996: PPUSH
16997: LD_STRING DO-1-radio-hq
16999: PPUSH
17000: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17004: LD_EXP 28
17008: PPUSH
17009: LD_STRING DH-2-radio-hq
17011: PPUSH
17012: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17016: LD_EXP 37
17020: PPUSH
17021: LD_STRING DO-2-radio-hq
17023: PPUSH
17024: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17028: LD_EXP 28
17032: PPUSH
17033: LD_STRING DH-3-radio-hq
17035: PPUSH
17036: CALL_OW 88
// changeClass := 1 ;
17040: LD_ADDR_VAR 0 1
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// end ; end ;
17048: GO 17051
17050: POP
// if changeClass then
17051: LD_VAR 0 1
17055: IFFALSE 17343
// begin Say ( Heike , DH-1-agree ) ;
17057: LD_EXP 28
17061: PPUSH
17062: LD_STRING DH-1-agree
17064: PPUSH
17065: CALL_OW 88
// if IsOk ( Givi ) then
17069: LD_EXP 29
17073: PPUSH
17074: CALL_OW 302
17078: IFFALSE 17116
// begin Say ( Givi , DG-1-agree ) ;
17080: LD_EXP 29
17084: PPUSH
17085: LD_STRING DG-1-agree
17087: PPUSH
17088: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17092: LD_EXP 28
17096: PPUSH
17097: LD_STRING DH-2-agree
17099: PPUSH
17100: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17104: LD_EXP 29
17108: PPUSH
17109: LD_STRING DG-2-agree
17111: PPUSH
17112: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17116: LD_VAR 0 4
17120: PPUSH
17121: CALL_OW 313
17125: PUSH
17126: LD_INT 6
17128: EQUAL
17129: IFFALSE 17149
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17131: LD_VAR 0 4
17135: PPUSH
17136: CALL_OW 313
17140: PUSH
17141: LD_INT 1
17143: ARRAY
17144: PPUSH
17145: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17149: LD_EXP 38
17153: PPUSH
17154: LD_INT 2
17156: PPUSH
17157: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17161: LD_ADDR_VAR 0 5
17165: PUSH
17166: LD_EXP 38
17170: PPUSH
17171: CALL_OW 250
17175: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17176: LD_ADDR_VAR 0 6
17180: PUSH
17181: LD_EXP 38
17185: PPUSH
17186: CALL_OW 251
17190: ST_TO_ADDR
// if depot then
17191: LD_VAR 0 4
17195: IFFALSE 17244
// begin ComEnterUnit ( Ibrahim , depot ) ;
17197: LD_EXP 38
17201: PPUSH
17202: LD_VAR 0 4
17206: PPUSH
17207: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17211: LD_INT 35
17213: PPUSH
17214: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17218: LD_EXP 38
17222: PPUSH
17223: CALL_OW 310
17227: IFFALSE 17211
// b := IsInUnit ( Ibrahim ) ;
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_EXP 38
17238: PPUSH
17239: CALL_OW 310
17243: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17244: LD_EXP 38
17248: PPUSH
17249: CALL_OW 64
// uc_side := 2 ;
17253: LD_ADDR_OWVAR 20
17257: PUSH
17258: LD_INT 2
17260: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17261: LD_ADDR_EXP 38
17265: PUSH
17266: LD_STRING Ibrahim
17268: PPUSH
17269: LD_INT 0
17271: PPUSH
17272: LD_STRING 
17274: PPUSH
17275: CALL 36316 0 3
17279: ST_TO_ADDR
// if depot then
17280: LD_VAR 0 4
17284: IFFALSE 17302
// PlaceHumanInUnit ( Ibrahim , b ) else
17286: LD_EXP 38
17290: PPUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: CALL_OW 52
17300: GO 17324
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17302: LD_EXP 38
17306: PPUSH
17307: LD_VAR 0 5
17311: PPUSH
17312: LD_VAR 0 6
17316: PPUSH
17317: LD_INT 0
17319: PPUSH
17320: CALL_OW 48
// InGameOff ;
17324: CALL_OW 9
// allowConvoys := true ;
17328: LD_ADDR_EXP 12
17332: PUSH
17333: LD_INT 1
17335: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17336: LD_STRING ACH_IBRAHIM
17338: PPUSH
17339: CALL_OW 543
// end ; end ;
17343: PPOPN 6
17345: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17346: LD_EXP 33
17350: PPUSH
17351: CALL_OW 256
17355: PUSH
17356: LD_INT 3
17358: LESS
17359: IFFALSE 17426
17361: GO 17363
17363: DISABLE
// begin DialogueOn ;
17364: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17368: LD_EXP 33
17372: PPUSH
17373: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17377: LD_EXP 33
17381: PPUSH
17382: LD_STRING DK-keydeath-1
17384: PPUSH
17385: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17389: LD_EXP 28
17393: PPUSH
17394: LD_STRING DH-keydeath-2
17396: PPUSH
17397: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17401: LD_EXP 28
17405: PPUSH
17406: LD_STRING DH-keydeath-3
17408: PPUSH
17409: CALL_OW 88
// DialogueOff ;
17413: CALL_OW 7
// KillUnit ( Kaia ) ;
17417: LD_EXP 33
17421: PPUSH
17422: CALL_OW 66
// end ;
17426: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 do
17427: LD_EXP 11
17431: PUSH
17432: LD_EXP 21
17436: PUSH
17437: LD_INT 1
17439: LESS
17440: AND
17441: PUSH
17442: LD_INT 22
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 25
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: PUSH
17471: LD_INT 0
17473: EQUAL
17474: AND
17475: IFFALSE 17866
17477: GO 17479
17479: DISABLE
// begin DialogueOn ;
17480: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17484: LD_EXP 28
17488: PPUSH
17489: LD_STRING DH-1-final
17491: PPUSH
17492: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17496: LD_OWVAR 1
17500: PUSH
17501: LD_INT 126000
17503: PUSH
17504: LD_INT 115500
17506: PUSH
17507: LD_INT 105000
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: PUSH
17515: LD_OWVAR 67
17519: ARRAY
17520: LESSEQUAL
17521: IFFALSE 17535
// AddMedal ( med1 , 1 ) else
17523: LD_STRING med1
17525: PPUSH
17526: LD_INT 1
17528: PPUSH
17529: CALL_OW 101
17533: GO 17546
// AddMedal ( med1 , - 1 ) ;
17535: LD_STRING med1
17537: PPUSH
17538: LD_INT 1
17540: NEG
17541: PPUSH
17542: CALL_OW 101
// if vehCounter >= 2 then
17546: LD_EXP 22
17550: PUSH
17551: LD_INT 2
17553: GREATEREQUAL
17554: IFFALSE 17568
// AddMedal ( med2 , 1 ) else
17556: LD_STRING med2
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 101
17566: GO 17579
// AddMedal ( med2 , - 1 ) ;
17568: LD_STRING med2
17570: PPUSH
17571: LD_INT 1
17573: NEG
17574: PPUSH
17575: CALL_OW 101
// if deadCounter = 0 then
17579: LD_EXP 9
17583: PUSH
17584: LD_INT 0
17586: EQUAL
17587: IFFALSE 17601
// AddMedal ( med3 , 1 ) else
17589: LD_STRING med3
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: CALL_OW 101
17599: GO 17612
// AddMedal ( med3 , - 1 ) ;
17601: LD_STRING med3
17603: PPUSH
17604: LD_INT 1
17606: NEG
17607: PPUSH
17608: CALL_OW 101
// GiveMedals ( MAIN ) ;
17612: LD_STRING MAIN
17614: PPUSH
17615: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17619: LD_INT 22
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 23
17631: PUSH
17632: LD_INT 2
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 21
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 69
17658: PPUSH
17659: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17663: LD_EXP 28
17667: PPUSH
17668: LD_STRING 03_Heike
17670: PPUSH
17671: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17675: LD_EXP 32
17679: PPUSH
17680: LD_STRING 03_Aviradze
17682: PPUSH
17683: CALL_OW 38
// if Givi then
17687: LD_EXP 29
17691: IFFALSE 17705
// SaveCharacters ( Givi , 03_Givi ) ;
17693: LD_EXP 29
17697: PPUSH
17698: LD_STRING 03_Givi
17700: PPUSH
17701: CALL_OW 38
// if Mike then
17705: LD_EXP 30
17709: IFFALSE 17723
// SaveCharacters ( Mike , 03_Mike ) ;
17711: LD_EXP 30
17715: PPUSH
17716: LD_STRING 03_Mike
17718: PPUSH
17719: CALL_OW 38
// if Kamil then
17723: LD_EXP 31
17727: IFFALSE 17741
// SaveCharacters ( Kamil , 03_Kamil ) ;
17729: LD_EXP 31
17733: PPUSH
17734: LD_STRING 03_Kamil
17736: PPUSH
17737: CALL_OW 38
// if Kaia then
17741: LD_EXP 33
17745: IFFALSE 17759
// SaveCharacters ( Kaia , 03_Kaia ) ;
17747: LD_EXP 33
17751: PPUSH
17752: LD_STRING 03_Kaia
17754: PPUSH
17755: CALL_OW 38
// if Sophia then
17759: LD_EXP 34
17763: IFFALSE 17777
// SaveCharacters ( Sophia , 03_Sophia ) ;
17765: LD_EXP 34
17769: PPUSH
17770: LD_STRING 03_Sophia
17772: PPUSH
17773: CALL_OW 38
// if Markov then
17777: LD_EXP 35
17781: IFFALSE 17795
// SaveCharacters ( Markov , 03_Markov ) ;
17783: LD_EXP 35
17787: PPUSH
17788: LD_STRING 03_Markov
17790: PPUSH
17791: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17795: LD_EXP 38
17799: PUSH
17800: LD_EXP 38
17804: PPUSH
17805: CALL_OW 255
17809: PUSH
17810: LD_INT 2
17812: EQUAL
17813: AND
17814: IFFALSE 17828
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17816: LD_EXP 38
17820: PPUSH
17821: LD_STRING 03_Ibrahim
17823: PPUSH
17824: CALL_OW 38
// if heikeSecondSquad then
17828: LD_EXP 42
17832: IFFALSE 17846
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17834: LD_EXP 42
17838: PPUSH
17839: LD_STRING 03_others
17841: PPUSH
17842: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17846: LD_EXP 9
17850: PPUSH
17851: LD_STRING 03_DeadCounter
17853: PPUSH
17854: CALL_OW 39
// YouWin ;
17858: CALL_OW 103
// DialogueOff ;
17862: CALL_OW 7
// end ; end_of_file
17866: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17867: LD_VAR 0 1
17871: PUSH
17872: LD_EXP 28
17876: EQUAL
17877: IFFALSE 17886
// YouLost ( Heike ) ;
17879: LD_STRING Heike
17881: PPUSH
17882: CALL_OW 104
// if un = Aviradze then
17886: LD_VAR 0 1
17890: PUSH
17891: LD_EXP 32
17895: EQUAL
17896: IFFALSE 17905
// YouLost ( Aviradze ) ;
17898: LD_STRING Aviradze
17900: PPUSH
17901: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17905: LD_VAR 0 1
17909: PUSH
17910: LD_INT 11
17912: EQUAL
17913: PUSH
17914: LD_EXP 11
17918: NOT
17919: AND
17920: IFFALSE 17929
// YouLost ( Depot ) ;
17922: LD_STRING Depot
17924: PPUSH
17925: CALL_OW 104
// if un = arDepot then
17929: LD_VAR 0 1
17933: PUSH
17934: LD_INT 5
17936: EQUAL
17937: IFFALSE 17946
// YouLost ( FarmerDepot ) ;
17939: LD_STRING FarmerDepot
17941: PPUSH
17942: CALL_OW 104
// if un = Farmer then
17946: LD_VAR 0 1
17950: PUSH
17951: LD_EXP 36
17955: EQUAL
17956: IFFALSE 17965
// YouLost ( Farmer ) ;
17958: LD_STRING Farmer
17960: PPUSH
17961: CALL_OW 104
// if un in usForces then
17965: LD_VAR 0 1
17969: PUSH
17970: LD_EXP 44
17974: IN
17975: IFFALSE 17993
// usForces := usForces diff un ;
17977: LD_ADDR_EXP 44
17981: PUSH
17982: LD_EXP 44
17986: PUSH
17987: LD_VAR 0 1
17991: DIFF
17992: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17993: LD_VAR 0 1
17997: PUSH
17998: LD_INT 22
18000: PUSH
18001: LD_INT 2
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 23
18010: PUSH
18011: LD_INT 2
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 21
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: CALL_OW 69
18037: IN
18038: IFFALSE 18054
// deadCounter := deadCounter + 1 ;
18040: LD_ADDR_EXP 9
18044: PUSH
18045: LD_EXP 9
18049: PUSH
18050: LD_INT 1
18052: PLUS
18053: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 22
18061: PUSH
18062: LD_INT 4
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 34
18071: PUSH
18072: LD_INT 12
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PPUSH
18083: CALL_OW 69
18087: IN
18088: PUSH
18089: LD_EXP 18
18093: NOT
18094: AND
18095: IFFALSE 18105
// firstConvoyDestroyed := true ;
18097: LD_ADDR_EXP 18
18101: PUSH
18102: LD_INT 1
18104: ST_TO_ADDR
// if un in usAttackers then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_EXP 47
18114: IN
18115: IFFALSE 18133
// usAttackers := usAttackers diff un ;
18117: LD_ADDR_EXP 47
18121: PUSH
18122: LD_EXP 47
18126: PUSH
18127: LD_VAR 0 1
18131: DIFF
18132: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18133: LD_VAR 0 1
18137: PUSH
18138: LD_INT 22
18140: PUSH
18141: LD_INT 5
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 21
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL_OW 69
18166: IN
18167: IFFALSE 18183
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18169: LD_ADDR_EXP 20
18173: PUSH
18174: LD_EXP 20
18178: PUSH
18179: LD_INT 1
18181: PLUS
18182: ST_TO_ADDR
// end ;
18183: PPOPN 1
18185: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18186: LD_VAR 0 2
18190: PUSH
18191: LD_EXP 38
18195: EQUAL
18196: PUSH
18197: LD_EXP 25
18201: AND
18202: IFFALSE 18348
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18204: LD_INT 22
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 69
18239: IFFALSE 18281
// begin InGameOn ;
18241: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18245: LD_EXP 38
18249: PPUSH
18250: LD_INT 11
18252: PPUSH
18253: CALL_OW 120
// repeat wait ( 3 ) ;
18257: LD_INT 3
18259: PPUSH
18260: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18264: LD_EXP 38
18268: PPUSH
18269: CALL_OW 310
18273: IFFALSE 18257
// InGameOff ;
18275: CALL_OW 9
// end else
18279: GO 18348
// begin ibrahimInDepot := false ;
18281: LD_ADDR_EXP 25
18285: PUSH
18286: LD_INT 0
18288: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18289: LD_EXP 38
18293: PPUSH
18294: LD_INT 30
18296: PPUSH
18297: LD_INT 1
18299: PPUSH
18300: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18304: LD_INT 35
18306: PPUSH
18307: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18311: LD_EXP 38
18315: PPUSH
18316: LD_INT 30
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: CALL_OW 307
18326: PUSH
18327: LD_EXP 38
18331: PPUSH
18332: CALL_OW 301
18336: OR
18337: IFFALSE 18304
// RemoveUnit ( Ibrahim ) ;
18339: LD_EXP 38
18343: PPUSH
18344: CALL_OW 64
// end ; end ; end ;
18348: PPOPN 2
18350: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18351: LD_VAR 0 2
18355: PUSH
18356: LD_EXP 28
18360: EQUAL
18361: PUSH
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 11
18369: EQUAL
18370: AND
18371: PUSH
18372: LD_EXP 25
18376: AND
18377: IFFALSE 18383
// IbrahimQuery ;
18379: CALL 16154 0 0
// end ;
18383: PPOPN 2
18385: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18386: LD_VAR 0 1
18390: PPUSH
18391: CALL_OW 141
// if oldId in usAttackers then
18395: LD_VAR 0 2
18399: PUSH
18400: LD_EXP 47
18404: IN
18405: IFFALSE 18423
// usAttackers := usAttackers diff oldId ;
18407: LD_ADDR_EXP 47
18411: PUSH
18412: LD_EXP 47
18416: PUSH
18417: LD_VAR 0 2
18421: DIFF
18422: ST_TO_ADDR
// if newId in usAttackers then
18423: LD_VAR 0 1
18427: PUSH
18428: LD_EXP 47
18432: IN
18433: IFFALSE 18451
// usAttackers := usAttackers diff newId ;
18435: LD_ADDR_EXP 47
18439: PUSH
18440: LD_EXP 47
18444: PUSH
18445: LD_VAR 0 1
18449: DIFF
18450: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18451: LD_VAR 0 3
18455: PUSH
18456: LD_INT 4
18458: EQUAL
18459: PUSH
18460: LD_EXP 18
18464: NOT
18465: AND
18466: IFFALSE 18476
// firstConvoyDestroyed := true ;
18468: LD_ADDR_EXP 18
18472: PUSH
18473: LD_INT 1
18475: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18476: LD_VAR 0 1
18480: PPUSH
18481: CALL_OW 264
18485: PUSH
18486: LD_INT 12
18488: EQUAL
18489: IFFALSE 18527
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18491: LD_ADDR_EXP 13
18495: PUSH
18496: LD_EXP 13
18500: PUSH
18501: LD_INT 1
18503: PLUS
18504: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18505: LD_VAR 0 1
18509: PPUSH
18510: LD_INT 1
18512: PPUSH
18513: CALL_OW 289
18517: PUSH
18518: LD_INT 0
18520: EQUAL
18521: IFFALSE 18527
// EmptyCargoDialog ;
18523: CALL 14792 0 0
// end ; end ;
18527: PPOPN 4
18529: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18530: LD_VAR 0 1
18534: PUSH
18535: LD_INT 2
18537: EQUAL
18538: PUSH
18539: LD_VAR 0 2
18543: PUSH
18544: LD_INT 5
18546: EQUAL
18547: AND
18548: IFFALSE 18557
// YouLost ( Attack ) ;
18550: LD_STRING Attack
18552: PPUSH
18553: CALL_OW 104
// end ;
18557: PPOPN 2
18559: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL_OW 255
18569: PUSH
18570: LD_INT 1
18572: EQUAL
18573: PUSH
18574: LD_EXP 6
18578: NOT
18579: AND
18580: IFFALSE 18714
// begin if GetBType ( b ) = b_lab then
18582: LD_VAR 0 1
18586: PPUSH
18587: CALL_OW 266
18591: PUSH
18592: LD_INT 6
18594: EQUAL
18595: IFFALSE 18635
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18597: LD_EXP 44
18601: PPUSH
18602: LD_INT 25
18604: PUSH
18605: LD_INT 4
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PPUSH
18612: CALL_OW 72
18616: PPUSH
18617: LD_VAR 0 1
18621: PPUSH
18622: CALL_OW 120
// AmLabResearch ( b ) ;
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL 5139 0 1
// end ; if GetBType ( b ) = b_armoury then
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 266
18644: PUSH
18645: LD_INT 4
18647: EQUAL
18648: IFFALSE 18696
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18650: LD_EXP 44
18654: PPUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 3
18667: PUSH
18668: LD_INT 54
18670: PUSH
18671: EMPTY
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PPUSH
18682: CALL_OW 72
18686: PPUSH
18687: LD_VAR 0 1
18691: PPUSH
18692: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18696: LD_ADDR_EXP 46
18700: PUSH
18701: LD_EXP 46
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 3
18713: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL_OW 255
18723: PUSH
18724: LD_INT 5
18726: EQUAL
18727: IFFALSE 18741
// SetBLevel ( b , 5 ) ;
18729: LD_VAR 0 1
18733: PPUSH
18734: LD_INT 5
18736: PPUSH
18737: CALL_OW 241
// end ;
18741: PPOPN 1
18743: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18744: LD_VAR 0 1
18748: PPUSH
18749: CALL_OW 255
18753: PUSH
18754: LD_INT 2
18756: EQUAL
18757: IFFALSE 18773
// vehCounter := vehCounter + 1 ;
18759: LD_ADDR_EXP 22
18763: PUSH
18764: LD_EXP 22
18768: PUSH
18769: LD_INT 1
18771: PLUS
18772: ST_TO_ADDR
// end ;
18773: PPOPN 2
18775: END
// on SailEvent ( event ) do begin if event = eventAttack then
18776: LD_VAR 0 1
18780: PUSH
18781: LD_EXP 24
18785: EQUAL
18786: IFFALSE 18792
// AmericanAttack ;
18788: CALL 6587 0 0
// end ; end_of_file
18792: PPOPN 1
18794: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18795: LD_OWVAR 1
18799: PUSH
18800: LD_INT 10500
18802: PUSH
18803: LD_INT 9800
18805: PUSH
18806: LD_INT 9450
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: LD_OWVAR 67
18818: ARRAY
18819: LESSEQUAL
18820: IFFALSE 18847
18822: GO 18824
18824: DISABLE
// begin enable ;
18825: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18826: LD_INT 1
18828: PPUSH
18829: LD_INT 5
18831: PPUSH
18832: CALL_OW 12
18836: PPUSH
18837: LD_INT 9
18839: PPUSH
18840: LD_INT 1
18842: PPUSH
18843: CALL_OW 55
// end ;
18847: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
18848: LD_EXP 6
18852: PUSH
18853: LD_OWVAR 1
18857: PUSH
18858: LD_INT 56700
18860: PUSH
18861: LD_INT 55650
18863: PUSH
18864: LD_INT 54600
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: LD_OWVAR 67
18876: ARRAY
18877: LESSEQUAL
18878: AND
18879: IFFALSE 18906
18881: GO 18883
18883: DISABLE
// begin enable ;
18884: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
18885: LD_INT 3
18887: PPUSH
18888: LD_INT 5
18890: PPUSH
18891: CALL_OW 12
18895: PPUSH
18896: LD_INT 9
18898: PPUSH
18899: LD_INT 1
18901: PPUSH
18902: CALL_OW 55
// end ; end_of_file
18906: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18907: LD_EXP 11
18911: NOT
18912: PUSH
18913: LD_EXP 16
18917: AND
18918: PUSH
18919: LD_EXP 4
18923: AND
18924: PUSH
18925: LD_EXP 15
18929: PUSH
18930: LD_EXP 16
18934: LESSEQUAL
18935: AND
18936: IFFALSE 19026
18938: GO 18940
18940: DISABLE
// begin enable ;
18941: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
18942: LD_ADDR_OWVAR 47
18946: PUSH
18947: LD_STRING #X103-1
18949: PUSH
18950: LD_EXP 16
18954: PUSH
18955: LD_EXP 15
18959: MINUS
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18965: LD_ADDR_EXP 15
18969: PUSH
18970: LD_INT 5
18972: PPUSH
18973: CALL_OW 274
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: CALL_OW 275
18985: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18986: LD_INT 10
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL_OW 287
18996: PUSH
18997: LD_INT 0
18999: EQUAL
19000: IFFALSE 19018
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19002: LD_ADDR_EXP 17
19006: PUSH
19007: LD_EXP 17
19011: PUSH
19012: LD_INT 35
19014: MINUS
19015: ST_TO_ADDR
19016: GO 19026
// farmerCratesCounter := 30 30$00 ;
19018: LD_ADDR_EXP 17
19022: PUSH
19023: LD_INT 63000
19025: ST_TO_ADDR
// end ; end_of_file
19026: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19027: LD_INT 0
19029: PPUSH
// ar_miner := 81 ;
19030: LD_ADDR_EXP 55
19034: PUSH
19035: LD_INT 81
19037: ST_TO_ADDR
// ar_crane := 88 ;
19038: LD_ADDR_EXP 54
19042: PUSH
19043: LD_INT 88
19045: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19046: LD_ADDR_EXP 49
19050: PUSH
19051: LD_INT 89
19053: ST_TO_ADDR
// us_hack := 99 ;
19054: LD_ADDR_EXP 50
19058: PUSH
19059: LD_INT 99
19061: ST_TO_ADDR
// us_artillery := 97 ;
19062: LD_ADDR_EXP 51
19066: PUSH
19067: LD_INT 97
19069: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19070: LD_ADDR_EXP 52
19074: PUSH
19075: LD_INT 91
19077: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19078: LD_ADDR_EXP 53
19082: PUSH
19083: LD_INT 92
19085: ST_TO_ADDR
// ru_radar := 98 ;
19086: LD_ADDR_EXP 48
19090: PUSH
19091: LD_INT 98
19093: ST_TO_ADDR
// tech_Artillery := 80 ;
19094: LD_ADDR_EXP 56
19098: PUSH
19099: LD_INT 80
19101: ST_TO_ADDR
// tech_RadMat := 81 ;
19102: LD_ADDR_EXP 57
19106: PUSH
19107: LD_INT 81
19109: ST_TO_ADDR
// tech_BasicTools := 82 ;
19110: LD_ADDR_EXP 58
19114: PUSH
19115: LD_INT 82
19117: ST_TO_ADDR
// tech_Cargo := 83 ;
19118: LD_ADDR_EXP 59
19122: PUSH
19123: LD_INT 83
19125: ST_TO_ADDR
// tech_Track := 84 ;
19126: LD_ADDR_EXP 60
19130: PUSH
19131: LD_INT 84
19133: ST_TO_ADDR
// tech_Crane := 85 ;
19134: LD_ADDR_EXP 61
19138: PUSH
19139: LD_INT 85
19141: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19142: LD_ADDR_EXP 62
19146: PUSH
19147: LD_INT 86
19149: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19150: LD_ADDR_EXP 63
19154: PUSH
19155: LD_INT 87
19157: ST_TO_ADDR
// end ;
19158: LD_VAR 0 1
19162: RET
// every 1 do
19163: GO 19165
19165: DISABLE
// InitGlobalVariables ; end_of_file
19166: CALL 19027 0 0
19170: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19171: LD_VAR 0 2
19175: PUSH
19176: LD_INT 100
19178: EQUAL
19179: IFFALSE 20128
// begin if not StreamModeActive then
19181: LD_EXP 64
19185: NOT
19186: IFFALSE 19196
// StreamModeActive := true ;
19188: LD_ADDR_EXP 64
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// if p3 = 0 then
19196: LD_VAR 0 3
19200: PUSH
19201: LD_INT 0
19203: EQUAL
19204: IFFALSE 19210
// InitStreamMode ;
19206: CALL 20286 0 0
// if p3 = 1 then
19210: LD_VAR 0 3
19214: PUSH
19215: LD_INT 1
19217: EQUAL
19218: IFFALSE 19228
// sRocket := true ;
19220: LD_ADDR_EXP 69
19224: PUSH
19225: LD_INT 1
19227: ST_TO_ADDR
// if p3 = 2 then
19228: LD_VAR 0 3
19232: PUSH
19233: LD_INT 2
19235: EQUAL
19236: IFFALSE 19246
// sSpeed := true ;
19238: LD_ADDR_EXP 68
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// if p3 = 3 then
19246: LD_VAR 0 3
19250: PUSH
19251: LD_INT 3
19253: EQUAL
19254: IFFALSE 19264
// sEngine := true ;
19256: LD_ADDR_EXP 70
19260: PUSH
19261: LD_INT 1
19263: ST_TO_ADDR
// if p3 = 4 then
19264: LD_VAR 0 3
19268: PUSH
19269: LD_INT 4
19271: EQUAL
19272: IFFALSE 19282
// sSpec := true ;
19274: LD_ADDR_EXP 67
19278: PUSH
19279: LD_INT 1
19281: ST_TO_ADDR
// if p3 = 5 then
19282: LD_VAR 0 3
19286: PUSH
19287: LD_INT 5
19289: EQUAL
19290: IFFALSE 19300
// sLevel := true ;
19292: LD_ADDR_EXP 71
19296: PUSH
19297: LD_INT 1
19299: ST_TO_ADDR
// if p3 = 6 then
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 6
19307: EQUAL
19308: IFFALSE 19318
// sArmoury := true ;
19310: LD_ADDR_EXP 72
19314: PUSH
19315: LD_INT 1
19317: ST_TO_ADDR
// if p3 = 7 then
19318: LD_VAR 0 3
19322: PUSH
19323: LD_INT 7
19325: EQUAL
19326: IFFALSE 19336
// sRadar := true ;
19328: LD_ADDR_EXP 73
19332: PUSH
19333: LD_INT 1
19335: ST_TO_ADDR
// if p3 = 8 then
19336: LD_VAR 0 3
19340: PUSH
19341: LD_INT 8
19343: EQUAL
19344: IFFALSE 19354
// sBunker := true ;
19346: LD_ADDR_EXP 74
19350: PUSH
19351: LD_INT 1
19353: ST_TO_ADDR
// if p3 = 9 then
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 9
19361: EQUAL
19362: IFFALSE 19372
// sHack := true ;
19364: LD_ADDR_EXP 75
19368: PUSH
19369: LD_INT 1
19371: ST_TO_ADDR
// if p3 = 10 then
19372: LD_VAR 0 3
19376: PUSH
19377: LD_INT 10
19379: EQUAL
19380: IFFALSE 19390
// sFire := true ;
19382: LD_ADDR_EXP 76
19386: PUSH
19387: LD_INT 1
19389: ST_TO_ADDR
// if p3 = 11 then
19390: LD_VAR 0 3
19394: PUSH
19395: LD_INT 11
19397: EQUAL
19398: IFFALSE 19408
// sRefresh := true ;
19400: LD_ADDR_EXP 77
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// if p3 = 12 then
19408: LD_VAR 0 3
19412: PUSH
19413: LD_INT 12
19415: EQUAL
19416: IFFALSE 19426
// sExp := true ;
19418: LD_ADDR_EXP 78
19422: PUSH
19423: LD_INT 1
19425: ST_TO_ADDR
// if p3 = 13 then
19426: LD_VAR 0 3
19430: PUSH
19431: LD_INT 13
19433: EQUAL
19434: IFFALSE 19444
// sDepot := true ;
19436: LD_ADDR_EXP 79
19440: PUSH
19441: LD_INT 1
19443: ST_TO_ADDR
// if p3 = 14 then
19444: LD_VAR 0 3
19448: PUSH
19449: LD_INT 14
19451: EQUAL
19452: IFFALSE 19462
// sFlag := true ;
19454: LD_ADDR_EXP 80
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// if p3 = 15 then
19462: LD_VAR 0 3
19466: PUSH
19467: LD_INT 15
19469: EQUAL
19470: IFFALSE 19480
// sKamikadze := true ;
19472: LD_ADDR_EXP 88
19476: PUSH
19477: LD_INT 1
19479: ST_TO_ADDR
// if p3 = 16 then
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 16
19487: EQUAL
19488: IFFALSE 19498
// sTroll := true ;
19490: LD_ADDR_EXP 89
19494: PUSH
19495: LD_INT 1
19497: ST_TO_ADDR
// if p3 = 17 then
19498: LD_VAR 0 3
19502: PUSH
19503: LD_INT 17
19505: EQUAL
19506: IFFALSE 19516
// sSlow := true ;
19508: LD_ADDR_EXP 90
19512: PUSH
19513: LD_INT 1
19515: ST_TO_ADDR
// if p3 = 18 then
19516: LD_VAR 0 3
19520: PUSH
19521: LD_INT 18
19523: EQUAL
19524: IFFALSE 19534
// sLack := true ;
19526: LD_ADDR_EXP 91
19530: PUSH
19531: LD_INT 1
19533: ST_TO_ADDR
// if p3 = 19 then
19534: LD_VAR 0 3
19538: PUSH
19539: LD_INT 19
19541: EQUAL
19542: IFFALSE 19552
// sTank := true ;
19544: LD_ADDR_EXP 93
19548: PUSH
19549: LD_INT 1
19551: ST_TO_ADDR
// if p3 = 20 then
19552: LD_VAR 0 3
19556: PUSH
19557: LD_INT 20
19559: EQUAL
19560: IFFALSE 19570
// sRemote := true ;
19562: LD_ADDR_EXP 94
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
// if p3 = 21 then
19570: LD_VAR 0 3
19574: PUSH
19575: LD_INT 21
19577: EQUAL
19578: IFFALSE 19588
// sPowell := true ;
19580: LD_ADDR_EXP 95
19584: PUSH
19585: LD_INT 1
19587: ST_TO_ADDR
// if p3 = 22 then
19588: LD_VAR 0 3
19592: PUSH
19593: LD_INT 22
19595: EQUAL
19596: IFFALSE 19606
// sTeleport := true ;
19598: LD_ADDR_EXP 98
19602: PUSH
19603: LD_INT 1
19605: ST_TO_ADDR
// if p3 = 23 then
19606: LD_VAR 0 3
19610: PUSH
19611: LD_INT 23
19613: EQUAL
19614: IFFALSE 19624
// sOilTower := true ;
19616: LD_ADDR_EXP 100
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// if p3 = 24 then
19624: LD_VAR 0 3
19628: PUSH
19629: LD_INT 24
19631: EQUAL
19632: IFFALSE 19642
// sShovel := true ;
19634: LD_ADDR_EXP 101
19638: PUSH
19639: LD_INT 1
19641: ST_TO_ADDR
// if p3 = 25 then
19642: LD_VAR 0 3
19646: PUSH
19647: LD_INT 25
19649: EQUAL
19650: IFFALSE 19660
// sSheik := true ;
19652: LD_ADDR_EXP 102
19656: PUSH
19657: LD_INT 1
19659: ST_TO_ADDR
// if p3 = 26 then
19660: LD_VAR 0 3
19664: PUSH
19665: LD_INT 26
19667: EQUAL
19668: IFFALSE 19678
// sEarthquake := true ;
19670: LD_ADDR_EXP 104
19674: PUSH
19675: LD_INT 1
19677: ST_TO_ADDR
// if p3 = 27 then
19678: LD_VAR 0 3
19682: PUSH
19683: LD_INT 27
19685: EQUAL
19686: IFFALSE 19696
// sAI := true ;
19688: LD_ADDR_EXP 105
19692: PUSH
19693: LD_INT 1
19695: ST_TO_ADDR
// if p3 = 28 then
19696: LD_VAR 0 3
19700: PUSH
19701: LD_INT 28
19703: EQUAL
19704: IFFALSE 19714
// sCargo := true ;
19706: LD_ADDR_EXP 108
19710: PUSH
19711: LD_INT 1
19713: ST_TO_ADDR
// if p3 = 29 then
19714: LD_VAR 0 3
19718: PUSH
19719: LD_INT 29
19721: EQUAL
19722: IFFALSE 19732
// sDLaser := true ;
19724: LD_ADDR_EXP 109
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// if p3 = 30 then
19732: LD_VAR 0 3
19736: PUSH
19737: LD_INT 30
19739: EQUAL
19740: IFFALSE 19750
// sExchange := true ;
19742: LD_ADDR_EXP 110
19746: PUSH
19747: LD_INT 1
19749: ST_TO_ADDR
// if p3 = 31 then
19750: LD_VAR 0 3
19754: PUSH
19755: LD_INT 31
19757: EQUAL
19758: IFFALSE 19768
// sFac := true ;
19760: LD_ADDR_EXP 111
19764: PUSH
19765: LD_INT 1
19767: ST_TO_ADDR
// if p3 = 32 then
19768: LD_VAR 0 3
19772: PUSH
19773: LD_INT 32
19775: EQUAL
19776: IFFALSE 19786
// sPower := true ;
19778: LD_ADDR_EXP 112
19782: PUSH
19783: LD_INT 1
19785: ST_TO_ADDR
// if p3 = 33 then
19786: LD_VAR 0 3
19790: PUSH
19791: LD_INT 33
19793: EQUAL
19794: IFFALSE 19804
// sRandom := true ;
19796: LD_ADDR_EXP 113
19800: PUSH
19801: LD_INT 1
19803: ST_TO_ADDR
// if p3 = 34 then
19804: LD_VAR 0 3
19808: PUSH
19809: LD_INT 34
19811: EQUAL
19812: IFFALSE 19822
// sShield := true ;
19814: LD_ADDR_EXP 114
19818: PUSH
19819: LD_INT 1
19821: ST_TO_ADDR
// if p3 = 35 then
19822: LD_VAR 0 3
19826: PUSH
19827: LD_INT 35
19829: EQUAL
19830: IFFALSE 19840
// sTime := true ;
19832: LD_ADDR_EXP 115
19836: PUSH
19837: LD_INT 1
19839: ST_TO_ADDR
// if p3 = 36 then
19840: LD_VAR 0 3
19844: PUSH
19845: LD_INT 36
19847: EQUAL
19848: IFFALSE 19858
// sTools := true ;
19850: LD_ADDR_EXP 116
19854: PUSH
19855: LD_INT 1
19857: ST_TO_ADDR
// if p3 = 101 then
19858: LD_VAR 0 3
19862: PUSH
19863: LD_INT 101
19865: EQUAL
19866: IFFALSE 19876
// sSold := true ;
19868: LD_ADDR_EXP 81
19872: PUSH
19873: LD_INT 1
19875: ST_TO_ADDR
// if p3 = 102 then
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 102
19883: EQUAL
19884: IFFALSE 19894
// sDiff := true ;
19886: LD_ADDR_EXP 82
19890: PUSH
19891: LD_INT 1
19893: ST_TO_ADDR
// if p3 = 103 then
19894: LD_VAR 0 3
19898: PUSH
19899: LD_INT 103
19901: EQUAL
19902: IFFALSE 19912
// sFog := true ;
19904: LD_ADDR_EXP 85
19908: PUSH
19909: LD_INT 1
19911: ST_TO_ADDR
// if p3 = 104 then
19912: LD_VAR 0 3
19916: PUSH
19917: LD_INT 104
19919: EQUAL
19920: IFFALSE 19930
// sReset := true ;
19922: LD_ADDR_EXP 86
19926: PUSH
19927: LD_INT 1
19929: ST_TO_ADDR
// if p3 = 105 then
19930: LD_VAR 0 3
19934: PUSH
19935: LD_INT 105
19937: EQUAL
19938: IFFALSE 19948
// sSun := true ;
19940: LD_ADDR_EXP 87
19944: PUSH
19945: LD_INT 1
19947: ST_TO_ADDR
// if p3 = 106 then
19948: LD_VAR 0 3
19952: PUSH
19953: LD_INT 106
19955: EQUAL
19956: IFFALSE 19966
// sTiger := true ;
19958: LD_ADDR_EXP 83
19962: PUSH
19963: LD_INT 1
19965: ST_TO_ADDR
// if p3 = 107 then
19966: LD_VAR 0 3
19970: PUSH
19971: LD_INT 107
19973: EQUAL
19974: IFFALSE 19984
// sBomb := true ;
19976: LD_ADDR_EXP 84
19980: PUSH
19981: LD_INT 1
19983: ST_TO_ADDR
// if p3 = 108 then
19984: LD_VAR 0 3
19988: PUSH
19989: LD_INT 108
19991: EQUAL
19992: IFFALSE 20002
// sWound := true ;
19994: LD_ADDR_EXP 92
19998: PUSH
19999: LD_INT 1
20001: ST_TO_ADDR
// if p3 = 109 then
20002: LD_VAR 0 3
20006: PUSH
20007: LD_INT 109
20009: EQUAL
20010: IFFALSE 20020
// sBetray := true ;
20012: LD_ADDR_EXP 96
20016: PUSH
20017: LD_INT 1
20019: ST_TO_ADDR
// if p3 = 110 then
20020: LD_VAR 0 3
20024: PUSH
20025: LD_INT 110
20027: EQUAL
20028: IFFALSE 20038
// sContamin := true ;
20030: LD_ADDR_EXP 97
20034: PUSH
20035: LD_INT 1
20037: ST_TO_ADDR
// if p3 = 111 then
20038: LD_VAR 0 3
20042: PUSH
20043: LD_INT 111
20045: EQUAL
20046: IFFALSE 20056
// sOil := true ;
20048: LD_ADDR_EXP 99
20052: PUSH
20053: LD_INT 1
20055: ST_TO_ADDR
// if p3 = 112 then
20056: LD_VAR 0 3
20060: PUSH
20061: LD_INT 112
20063: EQUAL
20064: IFFALSE 20074
// sStu := true ;
20066: LD_ADDR_EXP 103
20070: PUSH
20071: LD_INT 1
20073: ST_TO_ADDR
// if p3 = 113 then
20074: LD_VAR 0 3
20078: PUSH
20079: LD_INT 113
20081: EQUAL
20082: IFFALSE 20092
// sBazooka := true ;
20084: LD_ADDR_EXP 106
20088: PUSH
20089: LD_INT 1
20091: ST_TO_ADDR
// if p3 = 114 then
20092: LD_VAR 0 3
20096: PUSH
20097: LD_INT 114
20099: EQUAL
20100: IFFALSE 20110
// sMortar := true ;
20102: LD_ADDR_EXP 107
20106: PUSH
20107: LD_INT 1
20109: ST_TO_ADDR
// if p3 = 115 then
20110: LD_VAR 0 3
20114: PUSH
20115: LD_INT 115
20117: EQUAL
20118: IFFALSE 20128
// sRanger := true ;
20120: LD_ADDR_EXP 117
20124: PUSH
20125: LD_INT 1
20127: ST_TO_ADDR
// end ; if p2 = 101 then
20128: LD_VAR 0 2
20132: PUSH
20133: LD_INT 101
20135: EQUAL
20136: IFFALSE 20264
// begin case p3 of 1 :
20138: LD_VAR 0 3
20142: PUSH
20143: LD_INT 1
20145: DOUBLE
20146: EQUAL
20147: IFTRUE 20151
20149: GO 20158
20151: POP
// hHackUnlimitedResources ; 2 :
20152: CALL 31299 0 0
20156: GO 20264
20158: LD_INT 2
20160: DOUBLE
20161: EQUAL
20162: IFTRUE 20166
20164: GO 20173
20166: POP
// hHackSetLevel10 ; 3 :
20167: CALL 31432 0 0
20171: GO 20264
20173: LD_INT 3
20175: DOUBLE
20176: EQUAL
20177: IFTRUE 20181
20179: GO 20188
20181: POP
// hHackSetLevel10YourUnits ; 4 :
20182: CALL 31517 0 0
20186: GO 20264
20188: LD_INT 4
20190: DOUBLE
20191: EQUAL
20192: IFTRUE 20196
20194: GO 20203
20196: POP
// hHackInvincible ; 5 :
20197: CALL 31965 0 0
20201: GO 20264
20203: LD_INT 5
20205: DOUBLE
20206: EQUAL
20207: IFTRUE 20211
20209: GO 20218
20211: POP
// hHackInvisible ; 6 :
20212: CALL 32076 0 0
20216: GO 20264
20218: LD_INT 6
20220: DOUBLE
20221: EQUAL
20222: IFTRUE 20226
20224: GO 20233
20226: POP
// hHackChangeYourSide ; 7 :
20227: CALL 32133 0 0
20231: GO 20264
20233: LD_INT 7
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20248
20241: POP
// hHackChangeUnitSide ; 8 :
20242: CALL 32175 0 0
20246: GO 20264
20248: LD_INT 8
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20263
20256: POP
// hHackFog ; end ;
20257: CALL 32276 0 0
20261: GO 20264
20263: POP
// end ; end ;
20264: PPOPN 6
20266: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20267: GO 20269
20269: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20270: LD_STRING initStreamRollete();
20272: PPUSH
20273: CALL_OW 559
// InitStreamMode ;
20277: CALL 20286 0 0
// DefineStreamItems ( ) ;
20281: CALL 20726 0 0
// end ;
20285: END
// function InitStreamMode ; begin
20286: LD_INT 0
20288: PPUSH
// streamModeActive := false ;
20289: LD_ADDR_EXP 64
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// normalCounter := 36 ;
20297: LD_ADDR_EXP 65
20301: PUSH
20302: LD_INT 36
20304: ST_TO_ADDR
// hardcoreCounter := 16 ;
20305: LD_ADDR_EXP 66
20309: PUSH
20310: LD_INT 16
20312: ST_TO_ADDR
// sRocket := false ;
20313: LD_ADDR_EXP 69
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sSpeed := false ;
20321: LD_ADDR_EXP 68
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sEngine := false ;
20329: LD_ADDR_EXP 70
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sSpec := false ;
20337: LD_ADDR_EXP 67
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sLevel := false ;
20345: LD_ADDR_EXP 71
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sArmoury := false ;
20353: LD_ADDR_EXP 72
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sRadar := false ;
20361: LD_ADDR_EXP 73
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sBunker := false ;
20369: LD_ADDR_EXP 74
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sHack := false ;
20377: LD_ADDR_EXP 75
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sFire := false ;
20385: LD_ADDR_EXP 76
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sRefresh := false ;
20393: LD_ADDR_EXP 77
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sExp := false ;
20401: LD_ADDR_EXP 78
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sDepot := false ;
20409: LD_ADDR_EXP 79
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sFlag := false ;
20417: LD_ADDR_EXP 80
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sKamikadze := false ;
20425: LD_ADDR_EXP 88
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sTroll := false ;
20433: LD_ADDR_EXP 89
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sSlow := false ;
20441: LD_ADDR_EXP 90
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sLack := false ;
20449: LD_ADDR_EXP 91
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sTank := false ;
20457: LD_ADDR_EXP 93
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sRemote := false ;
20465: LD_ADDR_EXP 94
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sPowell := false ;
20473: LD_ADDR_EXP 95
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sTeleport := false ;
20481: LD_ADDR_EXP 98
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sOilTower := false ;
20489: LD_ADDR_EXP 100
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sShovel := false ;
20497: LD_ADDR_EXP 101
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sSheik := false ;
20505: LD_ADDR_EXP 102
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sEarthquake := false ;
20513: LD_ADDR_EXP 104
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sAI := false ;
20521: LD_ADDR_EXP 105
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sCargo := false ;
20529: LD_ADDR_EXP 108
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sDLaser := false ;
20537: LD_ADDR_EXP 109
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sExchange := false ;
20545: LD_ADDR_EXP 110
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sFac := false ;
20553: LD_ADDR_EXP 111
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sPower := false ;
20561: LD_ADDR_EXP 112
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sRandom := false ;
20569: LD_ADDR_EXP 113
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sShield := false ;
20577: LD_ADDR_EXP 114
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sTime := false ;
20585: LD_ADDR_EXP 115
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sTools := false ;
20593: LD_ADDR_EXP 116
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sSold := false ;
20601: LD_ADDR_EXP 81
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sDiff := false ;
20609: LD_ADDR_EXP 82
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sFog := false ;
20617: LD_ADDR_EXP 85
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sReset := false ;
20625: LD_ADDR_EXP 86
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sSun := false ;
20633: LD_ADDR_EXP 87
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sTiger := false ;
20641: LD_ADDR_EXP 83
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sBomb := false ;
20649: LD_ADDR_EXP 84
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sWound := false ;
20657: LD_ADDR_EXP 92
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sBetray := false ;
20665: LD_ADDR_EXP 96
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sContamin := false ;
20673: LD_ADDR_EXP 97
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sOil := false ;
20681: LD_ADDR_EXP 99
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sStu := false ;
20689: LD_ADDR_EXP 103
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sBazooka := false ;
20697: LD_ADDR_EXP 106
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sMortar := false ;
20705: LD_ADDR_EXP 107
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sRanger := false ;
20713: LD_ADDR_EXP 117
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// end ;
20721: LD_VAR 0 1
20725: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20726: LD_INT 0
20728: PPUSH
20729: PPUSH
20730: PPUSH
20731: PPUSH
20732: PPUSH
// result := [ ] ;
20733: LD_ADDR_VAR 0 1
20737: PUSH
20738: EMPTY
20739: ST_TO_ADDR
// if campaign_id = 1 then
20740: LD_OWVAR 69
20744: PUSH
20745: LD_INT 1
20747: EQUAL
20748: IFFALSE 23686
// begin case mission_number of 1 :
20750: LD_OWVAR 70
20754: PUSH
20755: LD_INT 1
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20827
20763: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20764: LD_ADDR_VAR 0 1
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 4
20774: PUSH
20775: LD_INT 11
20777: PUSH
20778: LD_INT 12
20780: PUSH
20781: LD_INT 15
20783: PUSH
20784: LD_INT 16
20786: PUSH
20787: LD_INT 22
20789: PUSH
20790: LD_INT 23
20792: PUSH
20793: LD_INT 26
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 101
20809: PUSH
20810: LD_INT 102
20812: PUSH
20813: LD_INT 106
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: ST_TO_ADDR
20825: GO 23684
20827: LD_INT 2
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20907
20835: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20836: LD_ADDR_VAR 0 1
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 4
20846: PUSH
20847: LD_INT 11
20849: PUSH
20850: LD_INT 12
20852: PUSH
20853: LD_INT 15
20855: PUSH
20856: LD_INT 16
20858: PUSH
20859: LD_INT 22
20861: PUSH
20862: LD_INT 23
20864: PUSH
20865: LD_INT 26
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 101
20881: PUSH
20882: LD_INT 102
20884: PUSH
20885: LD_INT 105
20887: PUSH
20888: LD_INT 106
20890: PUSH
20891: LD_INT 108
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: ST_TO_ADDR
20905: GO 23684
20907: LD_INT 3
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20991
20915: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20916: LD_ADDR_VAR 0 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 4
20926: PUSH
20927: LD_INT 5
20929: PUSH
20930: LD_INT 11
20932: PUSH
20933: LD_INT 12
20935: PUSH
20936: LD_INT 15
20938: PUSH
20939: LD_INT 16
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_INT 26
20947: PUSH
20948: LD_INT 36
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 101
20965: PUSH
20966: LD_INT 102
20968: PUSH
20969: LD_INT 105
20971: PUSH
20972: LD_INT 106
20974: PUSH
20975: LD_INT 108
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: ST_TO_ADDR
20989: GO 23684
20991: LD_INT 4
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21083
20999: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21000: LD_ADDR_VAR 0 1
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 4
21010: PUSH
21011: LD_INT 5
21013: PUSH
21014: LD_INT 8
21016: PUSH
21017: LD_INT 11
21019: PUSH
21020: LD_INT 12
21022: PUSH
21023: LD_INT 15
21025: PUSH
21026: LD_INT 16
21028: PUSH
21029: LD_INT 22
21031: PUSH
21032: LD_INT 23
21034: PUSH
21035: LD_INT 26
21037: PUSH
21038: LD_INT 36
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 101
21057: PUSH
21058: LD_INT 102
21060: PUSH
21061: LD_INT 105
21063: PUSH
21064: LD_INT 106
21066: PUSH
21067: LD_INT 108
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: ST_TO_ADDR
21081: GO 23684
21083: LD_INT 5
21085: DOUBLE
21086: EQUAL
21087: IFTRUE 21091
21089: GO 21191
21091: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21092: LD_ADDR_VAR 0 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 4
21102: PUSH
21103: LD_INT 5
21105: PUSH
21106: LD_INT 6
21108: PUSH
21109: LD_INT 8
21111: PUSH
21112: LD_INT 11
21114: PUSH
21115: LD_INT 12
21117: PUSH
21118: LD_INT 15
21120: PUSH
21121: LD_INT 16
21123: PUSH
21124: LD_INT 22
21126: PUSH
21127: LD_INT 23
21129: PUSH
21130: LD_INT 25
21132: PUSH
21133: LD_INT 26
21135: PUSH
21136: LD_INT 36
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 101
21157: PUSH
21158: LD_INT 102
21160: PUSH
21161: LD_INT 105
21163: PUSH
21164: LD_INT 106
21166: PUSH
21167: LD_INT 108
21169: PUSH
21170: LD_INT 109
21172: PUSH
21173: LD_INT 112
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 23684
21191: LD_INT 6
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21319
21199: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21200: LD_ADDR_VAR 0 1
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 4
21210: PUSH
21211: LD_INT 5
21213: PUSH
21214: LD_INT 6
21216: PUSH
21217: LD_INT 8
21219: PUSH
21220: LD_INT 11
21222: PUSH
21223: LD_INT 12
21225: PUSH
21226: LD_INT 15
21228: PUSH
21229: LD_INT 16
21231: PUSH
21232: LD_INT 20
21234: PUSH
21235: LD_INT 21
21237: PUSH
21238: LD_INT 22
21240: PUSH
21241: LD_INT 23
21243: PUSH
21244: LD_INT 25
21246: PUSH
21247: LD_INT 26
21249: PUSH
21250: LD_INT 30
21252: PUSH
21253: LD_INT 31
21255: PUSH
21256: LD_INT 32
21258: PUSH
21259: LD_INT 36
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 101
21285: PUSH
21286: LD_INT 102
21288: PUSH
21289: LD_INT 105
21291: PUSH
21292: LD_INT 106
21294: PUSH
21295: LD_INT 108
21297: PUSH
21298: LD_INT 109
21300: PUSH
21301: LD_INT 112
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: ST_TO_ADDR
21317: GO 23684
21319: LD_INT 7
21321: DOUBLE
21322: EQUAL
21323: IFTRUE 21327
21325: GO 21427
21327: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21328: LD_ADDR_VAR 0 1
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: LD_INT 4
21338: PUSH
21339: LD_INT 5
21341: PUSH
21342: LD_INT 7
21344: PUSH
21345: LD_INT 11
21347: PUSH
21348: LD_INT 12
21350: PUSH
21351: LD_INT 15
21353: PUSH
21354: LD_INT 16
21356: PUSH
21357: LD_INT 20
21359: PUSH
21360: LD_INT 21
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_INT 23
21368: PUSH
21369: LD_INT 25
21371: PUSH
21372: LD_INT 26
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 101
21393: PUSH
21394: LD_INT 102
21396: PUSH
21397: LD_INT 103
21399: PUSH
21400: LD_INT 105
21402: PUSH
21403: LD_INT 106
21405: PUSH
21406: LD_INT 108
21408: PUSH
21409: LD_INT 112
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: ST_TO_ADDR
21425: GO 23684
21427: LD_INT 8
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21563
21435: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21436: LD_ADDR_VAR 0 1
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 4
21446: PUSH
21447: LD_INT 5
21449: PUSH
21450: LD_INT 6
21452: PUSH
21453: LD_INT 7
21455: PUSH
21456: LD_INT 8
21458: PUSH
21459: LD_INT 11
21461: PUSH
21462: LD_INT 12
21464: PUSH
21465: LD_INT 15
21467: PUSH
21468: LD_INT 16
21470: PUSH
21471: LD_INT 20
21473: PUSH
21474: LD_INT 21
21476: PUSH
21477: LD_INT 22
21479: PUSH
21480: LD_INT 23
21482: PUSH
21483: LD_INT 25
21485: PUSH
21486: LD_INT 26
21488: PUSH
21489: LD_INT 30
21491: PUSH
21492: LD_INT 31
21494: PUSH
21495: LD_INT 32
21497: PUSH
21498: LD_INT 36
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 101
21525: PUSH
21526: LD_INT 102
21528: PUSH
21529: LD_INT 103
21531: PUSH
21532: LD_INT 105
21534: PUSH
21535: LD_INT 106
21537: PUSH
21538: LD_INT 108
21540: PUSH
21541: LD_INT 109
21543: PUSH
21544: LD_INT 112
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: ST_TO_ADDR
21561: GO 23684
21563: LD_INT 9
21565: DOUBLE
21566: EQUAL
21567: IFTRUE 21571
21569: GO 21707
21571: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21572: LD_ADDR_VAR 0 1
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 4
21582: PUSH
21583: LD_INT 5
21585: PUSH
21586: LD_INT 6
21588: PUSH
21589: LD_INT 7
21591: PUSH
21592: LD_INT 8
21594: PUSH
21595: LD_INT 11
21597: PUSH
21598: LD_INT 12
21600: PUSH
21601: LD_INT 15
21603: PUSH
21604: LD_INT 16
21606: PUSH
21607: LD_INT 20
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 25
21621: PUSH
21622: LD_INT 26
21624: PUSH
21625: LD_INT 28
21627: PUSH
21628: LD_INT 30
21630: PUSH
21631: LD_INT 31
21633: PUSH
21634: LD_INT 32
21636: PUSH
21637: LD_INT 36
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 101
21665: PUSH
21666: LD_INT 102
21668: PUSH
21669: LD_INT 103
21671: PUSH
21672: LD_INT 105
21674: PUSH
21675: LD_INT 106
21677: PUSH
21678: LD_INT 108
21680: PUSH
21681: LD_INT 109
21683: PUSH
21684: LD_INT 112
21686: PUSH
21687: LD_INT 114
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: ST_TO_ADDR
21705: GO 23684
21707: LD_INT 10
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21899
21715: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21716: LD_ADDR_VAR 0 1
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 4
21726: PUSH
21727: LD_INT 5
21729: PUSH
21730: LD_INT 6
21732: PUSH
21733: LD_INT 7
21735: PUSH
21736: LD_INT 8
21738: PUSH
21739: LD_INT 9
21741: PUSH
21742: LD_INT 10
21744: PUSH
21745: LD_INT 11
21747: PUSH
21748: LD_INT 12
21750: PUSH
21751: LD_INT 13
21753: PUSH
21754: LD_INT 14
21756: PUSH
21757: LD_INT 15
21759: PUSH
21760: LD_INT 16
21762: PUSH
21763: LD_INT 17
21765: PUSH
21766: LD_INT 18
21768: PUSH
21769: LD_INT 19
21771: PUSH
21772: LD_INT 20
21774: PUSH
21775: LD_INT 21
21777: PUSH
21778: LD_INT 22
21780: PUSH
21781: LD_INT 23
21783: PUSH
21784: LD_INT 24
21786: PUSH
21787: LD_INT 25
21789: PUSH
21790: LD_INT 26
21792: PUSH
21793: LD_INT 28
21795: PUSH
21796: LD_INT 30
21798: PUSH
21799: LD_INT 31
21801: PUSH
21802: LD_INT 32
21804: PUSH
21805: LD_INT 36
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 101
21841: PUSH
21842: LD_INT 102
21844: PUSH
21845: LD_INT 103
21847: PUSH
21848: LD_INT 104
21850: PUSH
21851: LD_INT 105
21853: PUSH
21854: LD_INT 106
21856: PUSH
21857: LD_INT 107
21859: PUSH
21860: LD_INT 108
21862: PUSH
21863: LD_INT 109
21865: PUSH
21866: LD_INT 110
21868: PUSH
21869: LD_INT 111
21871: PUSH
21872: LD_INT 112
21874: PUSH
21875: LD_INT 114
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: ST_TO_ADDR
21897: GO 23684
21899: LD_INT 11
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 22099
21907: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21908: LD_ADDR_VAR 0 1
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 3
21918: PUSH
21919: LD_INT 4
21921: PUSH
21922: LD_INT 5
21924: PUSH
21925: LD_INT 6
21927: PUSH
21928: LD_INT 7
21930: PUSH
21931: LD_INT 8
21933: PUSH
21934: LD_INT 9
21936: PUSH
21937: LD_INT 10
21939: PUSH
21940: LD_INT 11
21942: PUSH
21943: LD_INT 12
21945: PUSH
21946: LD_INT 13
21948: PUSH
21949: LD_INT 14
21951: PUSH
21952: LD_INT 15
21954: PUSH
21955: LD_INT 16
21957: PUSH
21958: LD_INT 17
21960: PUSH
21961: LD_INT 18
21963: PUSH
21964: LD_INT 19
21966: PUSH
21967: LD_INT 20
21969: PUSH
21970: LD_INT 21
21972: PUSH
21973: LD_INT 22
21975: PUSH
21976: LD_INT 23
21978: PUSH
21979: LD_INT 24
21981: PUSH
21982: LD_INT 25
21984: PUSH
21985: LD_INT 26
21987: PUSH
21988: LD_INT 28
21990: PUSH
21991: LD_INT 30
21993: PUSH
21994: LD_INT 31
21996: PUSH
21997: LD_INT 32
21999: PUSH
22000: LD_INT 34
22002: PUSH
22003: LD_INT 36
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 101
22041: PUSH
22042: LD_INT 102
22044: PUSH
22045: LD_INT 103
22047: PUSH
22048: LD_INT 104
22050: PUSH
22051: LD_INT 105
22053: PUSH
22054: LD_INT 106
22056: PUSH
22057: LD_INT 107
22059: PUSH
22060: LD_INT 108
22062: PUSH
22063: LD_INT 109
22065: PUSH
22066: LD_INT 110
22068: PUSH
22069: LD_INT 111
22071: PUSH
22072: LD_INT 112
22074: PUSH
22075: LD_INT 114
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: ST_TO_ADDR
22097: GO 23684
22099: LD_INT 12
22101: DOUBLE
22102: EQUAL
22103: IFTRUE 22107
22105: GO 22315
22107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22108: LD_ADDR_VAR 0 1
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: LD_INT 4
22124: PUSH
22125: LD_INT 5
22127: PUSH
22128: LD_INT 6
22130: PUSH
22131: LD_INT 7
22133: PUSH
22134: LD_INT 8
22136: PUSH
22137: LD_INT 9
22139: PUSH
22140: LD_INT 10
22142: PUSH
22143: LD_INT 11
22145: PUSH
22146: LD_INT 12
22148: PUSH
22149: LD_INT 13
22151: PUSH
22152: LD_INT 14
22154: PUSH
22155: LD_INT 15
22157: PUSH
22158: LD_INT 16
22160: PUSH
22161: LD_INT 17
22163: PUSH
22164: LD_INT 18
22166: PUSH
22167: LD_INT 19
22169: PUSH
22170: LD_INT 20
22172: PUSH
22173: LD_INT 21
22175: PUSH
22176: LD_INT 22
22178: PUSH
22179: LD_INT 23
22181: PUSH
22182: LD_INT 24
22184: PUSH
22185: LD_INT 25
22187: PUSH
22188: LD_INT 26
22190: PUSH
22191: LD_INT 27
22193: PUSH
22194: LD_INT 28
22196: PUSH
22197: LD_INT 30
22199: PUSH
22200: LD_INT 31
22202: PUSH
22203: LD_INT 32
22205: PUSH
22206: LD_INT 33
22208: PUSH
22209: LD_INT 34
22211: PUSH
22212: LD_INT 36
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 101
22253: PUSH
22254: LD_INT 102
22256: PUSH
22257: LD_INT 103
22259: PUSH
22260: LD_INT 104
22262: PUSH
22263: LD_INT 105
22265: PUSH
22266: LD_INT 106
22268: PUSH
22269: LD_INT 107
22271: PUSH
22272: LD_INT 108
22274: PUSH
22275: LD_INT 109
22277: PUSH
22278: LD_INT 110
22280: PUSH
22281: LD_INT 111
22283: PUSH
22284: LD_INT 112
22286: PUSH
22287: LD_INT 113
22289: PUSH
22290: LD_INT 114
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: ST_TO_ADDR
22313: GO 23684
22315: LD_INT 13
22317: DOUBLE
22318: EQUAL
22319: IFTRUE 22323
22321: GO 22519
22323: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22324: LD_ADDR_VAR 0 1
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 3
22337: PUSH
22338: LD_INT 4
22340: PUSH
22341: LD_INT 5
22343: PUSH
22344: LD_INT 8
22346: PUSH
22347: LD_INT 9
22349: PUSH
22350: LD_INT 10
22352: PUSH
22353: LD_INT 11
22355: PUSH
22356: LD_INT 12
22358: PUSH
22359: LD_INT 14
22361: PUSH
22362: LD_INT 15
22364: PUSH
22365: LD_INT 16
22367: PUSH
22368: LD_INT 17
22370: PUSH
22371: LD_INT 18
22373: PUSH
22374: LD_INT 19
22376: PUSH
22377: LD_INT 20
22379: PUSH
22380: LD_INT 21
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_INT 23
22388: PUSH
22389: LD_INT 24
22391: PUSH
22392: LD_INT 25
22394: PUSH
22395: LD_INT 26
22397: PUSH
22398: LD_INT 27
22400: PUSH
22401: LD_INT 28
22403: PUSH
22404: LD_INT 30
22406: PUSH
22407: LD_INT 31
22409: PUSH
22410: LD_INT 32
22412: PUSH
22413: LD_INT 33
22415: PUSH
22416: LD_INT 34
22418: PUSH
22419: LD_INT 36
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 101
22457: PUSH
22458: LD_INT 102
22460: PUSH
22461: LD_INT 103
22463: PUSH
22464: LD_INT 104
22466: PUSH
22467: LD_INT 105
22469: PUSH
22470: LD_INT 106
22472: PUSH
22473: LD_INT 107
22475: PUSH
22476: LD_INT 108
22478: PUSH
22479: LD_INT 109
22481: PUSH
22482: LD_INT 110
22484: PUSH
22485: LD_INT 111
22487: PUSH
22488: LD_INT 112
22490: PUSH
22491: LD_INT 113
22493: PUSH
22494: LD_INT 114
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: ST_TO_ADDR
22517: GO 23684
22519: LD_INT 14
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22739
22527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22528: LD_ADDR_VAR 0 1
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: LD_INT 3
22541: PUSH
22542: LD_INT 4
22544: PUSH
22545: LD_INT 5
22547: PUSH
22548: LD_INT 6
22550: PUSH
22551: LD_INT 7
22553: PUSH
22554: LD_INT 8
22556: PUSH
22557: LD_INT 9
22559: PUSH
22560: LD_INT 10
22562: PUSH
22563: LD_INT 11
22565: PUSH
22566: LD_INT 12
22568: PUSH
22569: LD_INT 13
22571: PUSH
22572: LD_INT 14
22574: PUSH
22575: LD_INT 15
22577: PUSH
22578: LD_INT 16
22580: PUSH
22581: LD_INT 17
22583: PUSH
22584: LD_INT 18
22586: PUSH
22587: LD_INT 19
22589: PUSH
22590: LD_INT 20
22592: PUSH
22593: LD_INT 21
22595: PUSH
22596: LD_INT 22
22598: PUSH
22599: LD_INT 23
22601: PUSH
22602: LD_INT 24
22604: PUSH
22605: LD_INT 25
22607: PUSH
22608: LD_INT 26
22610: PUSH
22611: LD_INT 27
22613: PUSH
22614: LD_INT 28
22616: PUSH
22617: LD_INT 29
22619: PUSH
22620: LD_INT 30
22622: PUSH
22623: LD_INT 31
22625: PUSH
22626: LD_INT 32
22628: PUSH
22629: LD_INT 33
22631: PUSH
22632: LD_INT 34
22634: PUSH
22635: LD_INT 36
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 101
22677: PUSH
22678: LD_INT 102
22680: PUSH
22681: LD_INT 103
22683: PUSH
22684: LD_INT 104
22686: PUSH
22687: LD_INT 105
22689: PUSH
22690: LD_INT 106
22692: PUSH
22693: LD_INT 107
22695: PUSH
22696: LD_INT 108
22698: PUSH
22699: LD_INT 109
22701: PUSH
22702: LD_INT 110
22704: PUSH
22705: LD_INT 111
22707: PUSH
22708: LD_INT 112
22710: PUSH
22711: LD_INT 113
22713: PUSH
22714: LD_INT 114
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: ST_TO_ADDR
22737: GO 23684
22739: LD_INT 15
22741: DOUBLE
22742: EQUAL
22743: IFTRUE 22747
22745: GO 22959
22747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22748: LD_ADDR_VAR 0 1
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: LD_INT 4
22764: PUSH
22765: LD_INT 5
22767: PUSH
22768: LD_INT 6
22770: PUSH
22771: LD_INT 7
22773: PUSH
22774: LD_INT 8
22776: PUSH
22777: LD_INT 9
22779: PUSH
22780: LD_INT 10
22782: PUSH
22783: LD_INT 11
22785: PUSH
22786: LD_INT 12
22788: PUSH
22789: LD_INT 13
22791: PUSH
22792: LD_INT 14
22794: PUSH
22795: LD_INT 15
22797: PUSH
22798: LD_INT 16
22800: PUSH
22801: LD_INT 17
22803: PUSH
22804: LD_INT 18
22806: PUSH
22807: LD_INT 19
22809: PUSH
22810: LD_INT 20
22812: PUSH
22813: LD_INT 21
22815: PUSH
22816: LD_INT 22
22818: PUSH
22819: LD_INT 23
22821: PUSH
22822: LD_INT 24
22824: PUSH
22825: LD_INT 25
22827: PUSH
22828: LD_INT 26
22830: PUSH
22831: LD_INT 27
22833: PUSH
22834: LD_INT 28
22836: PUSH
22837: LD_INT 29
22839: PUSH
22840: LD_INT 30
22842: PUSH
22843: LD_INT 31
22845: PUSH
22846: LD_INT 32
22848: PUSH
22849: LD_INT 33
22851: PUSH
22852: LD_INT 34
22854: PUSH
22855: LD_INT 36
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 101
22897: PUSH
22898: LD_INT 102
22900: PUSH
22901: LD_INT 103
22903: PUSH
22904: LD_INT 104
22906: PUSH
22907: LD_INT 105
22909: PUSH
22910: LD_INT 106
22912: PUSH
22913: LD_INT 107
22915: PUSH
22916: LD_INT 108
22918: PUSH
22919: LD_INT 109
22921: PUSH
22922: LD_INT 110
22924: PUSH
22925: LD_INT 111
22927: PUSH
22928: LD_INT 112
22930: PUSH
22931: LD_INT 113
22933: PUSH
22934: LD_INT 114
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: ST_TO_ADDR
22957: GO 23684
22959: LD_INT 16
22961: DOUBLE
22962: EQUAL
22963: IFTRUE 22967
22965: GO 23091
22967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22968: LD_ADDR_VAR 0 1
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: LD_INT 4
22978: PUSH
22979: LD_INT 5
22981: PUSH
22982: LD_INT 7
22984: PUSH
22985: LD_INT 11
22987: PUSH
22988: LD_INT 12
22990: PUSH
22991: LD_INT 15
22993: PUSH
22994: LD_INT 16
22996: PUSH
22997: LD_INT 20
22999: PUSH
23000: LD_INT 21
23002: PUSH
23003: LD_INT 22
23005: PUSH
23006: LD_INT 23
23008: PUSH
23009: LD_INT 25
23011: PUSH
23012: LD_INT 26
23014: PUSH
23015: LD_INT 30
23017: PUSH
23018: LD_INT 31
23020: PUSH
23021: LD_INT 32
23023: PUSH
23024: LD_INT 33
23026: PUSH
23027: LD_INT 34
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 101
23053: PUSH
23054: LD_INT 102
23056: PUSH
23057: LD_INT 103
23059: PUSH
23060: LD_INT 106
23062: PUSH
23063: LD_INT 108
23065: PUSH
23066: LD_INT 112
23068: PUSH
23069: LD_INT 113
23071: PUSH
23072: LD_INT 114
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: ST_TO_ADDR
23089: GO 23684
23091: LD_INT 17
23093: DOUBLE
23094: EQUAL
23095: IFTRUE 23099
23097: GO 23311
23099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23100: LD_ADDR_VAR 0 1
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: LD_INT 4
23116: PUSH
23117: LD_INT 5
23119: PUSH
23120: LD_INT 6
23122: PUSH
23123: LD_INT 7
23125: PUSH
23126: LD_INT 8
23128: PUSH
23129: LD_INT 9
23131: PUSH
23132: LD_INT 10
23134: PUSH
23135: LD_INT 11
23137: PUSH
23138: LD_INT 12
23140: PUSH
23141: LD_INT 13
23143: PUSH
23144: LD_INT 14
23146: PUSH
23147: LD_INT 15
23149: PUSH
23150: LD_INT 16
23152: PUSH
23153: LD_INT 17
23155: PUSH
23156: LD_INT 18
23158: PUSH
23159: LD_INT 19
23161: PUSH
23162: LD_INT 20
23164: PUSH
23165: LD_INT 21
23167: PUSH
23168: LD_INT 22
23170: PUSH
23171: LD_INT 23
23173: PUSH
23174: LD_INT 24
23176: PUSH
23177: LD_INT 25
23179: PUSH
23180: LD_INT 26
23182: PUSH
23183: LD_INT 27
23185: PUSH
23186: LD_INT 28
23188: PUSH
23189: LD_INT 29
23191: PUSH
23192: LD_INT 30
23194: PUSH
23195: LD_INT 31
23197: PUSH
23198: LD_INT 32
23200: PUSH
23201: LD_INT 33
23203: PUSH
23204: LD_INT 34
23206: PUSH
23207: LD_INT 36
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 101
23249: PUSH
23250: LD_INT 102
23252: PUSH
23253: LD_INT 103
23255: PUSH
23256: LD_INT 104
23258: PUSH
23259: LD_INT 105
23261: PUSH
23262: LD_INT 106
23264: PUSH
23265: LD_INT 107
23267: PUSH
23268: LD_INT 108
23270: PUSH
23271: LD_INT 109
23273: PUSH
23274: LD_INT 110
23276: PUSH
23277: LD_INT 111
23279: PUSH
23280: LD_INT 112
23282: PUSH
23283: LD_INT 113
23285: PUSH
23286: LD_INT 114
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: ST_TO_ADDR
23309: GO 23684
23311: LD_INT 18
23313: DOUBLE
23314: EQUAL
23315: IFTRUE 23319
23317: GO 23455
23319: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23320: LD_ADDR_VAR 0 1
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: LD_INT 4
23330: PUSH
23331: LD_INT 5
23333: PUSH
23334: LD_INT 7
23336: PUSH
23337: LD_INT 11
23339: PUSH
23340: LD_INT 12
23342: PUSH
23343: LD_INT 15
23345: PUSH
23346: LD_INT 16
23348: PUSH
23349: LD_INT 20
23351: PUSH
23352: LD_INT 21
23354: PUSH
23355: LD_INT 22
23357: PUSH
23358: LD_INT 23
23360: PUSH
23361: LD_INT 25
23363: PUSH
23364: LD_INT 26
23366: PUSH
23367: LD_INT 30
23369: PUSH
23370: LD_INT 31
23372: PUSH
23373: LD_INT 32
23375: PUSH
23376: LD_INT 33
23378: PUSH
23379: LD_INT 34
23381: PUSH
23382: LD_INT 35
23384: PUSH
23385: LD_INT 36
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 101
23413: PUSH
23414: LD_INT 102
23416: PUSH
23417: LD_INT 103
23419: PUSH
23420: LD_INT 106
23422: PUSH
23423: LD_INT 108
23425: PUSH
23426: LD_INT 112
23428: PUSH
23429: LD_INT 113
23431: PUSH
23432: LD_INT 114
23434: PUSH
23435: LD_INT 115
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: ST_TO_ADDR
23453: GO 23684
23455: LD_INT 19
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23683
23463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23464: LD_ADDR_VAR 0 1
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: LD_INT 4
23480: PUSH
23481: LD_INT 5
23483: PUSH
23484: LD_INT 6
23486: PUSH
23487: LD_INT 7
23489: PUSH
23490: LD_INT 8
23492: PUSH
23493: LD_INT 9
23495: PUSH
23496: LD_INT 10
23498: PUSH
23499: LD_INT 11
23501: PUSH
23502: LD_INT 12
23504: PUSH
23505: LD_INT 13
23507: PUSH
23508: LD_INT 14
23510: PUSH
23511: LD_INT 15
23513: PUSH
23514: LD_INT 16
23516: PUSH
23517: LD_INT 17
23519: PUSH
23520: LD_INT 18
23522: PUSH
23523: LD_INT 19
23525: PUSH
23526: LD_INT 20
23528: PUSH
23529: LD_INT 21
23531: PUSH
23532: LD_INT 22
23534: PUSH
23535: LD_INT 23
23537: PUSH
23538: LD_INT 24
23540: PUSH
23541: LD_INT 25
23543: PUSH
23544: LD_INT 26
23546: PUSH
23547: LD_INT 27
23549: PUSH
23550: LD_INT 28
23552: PUSH
23553: LD_INT 29
23555: PUSH
23556: LD_INT 30
23558: PUSH
23559: LD_INT 31
23561: PUSH
23562: LD_INT 32
23564: PUSH
23565: LD_INT 33
23567: PUSH
23568: LD_INT 34
23570: PUSH
23571: LD_INT 35
23573: PUSH
23574: LD_INT 36
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 101
23617: PUSH
23618: LD_INT 102
23620: PUSH
23621: LD_INT 103
23623: PUSH
23624: LD_INT 104
23626: PUSH
23627: LD_INT 105
23629: PUSH
23630: LD_INT 106
23632: PUSH
23633: LD_INT 107
23635: PUSH
23636: LD_INT 108
23638: PUSH
23639: LD_INT 109
23641: PUSH
23642: LD_INT 110
23644: PUSH
23645: LD_INT 111
23647: PUSH
23648: LD_INT 112
23650: PUSH
23651: LD_INT 113
23653: PUSH
23654: LD_INT 114
23656: PUSH
23657: LD_INT 115
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: ST_TO_ADDR
23681: GO 23684
23683: POP
// end else
23684: GO 23903
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23686: LD_ADDR_VAR 0 1
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: LD_INT 2
23696: PUSH
23697: LD_INT 3
23699: PUSH
23700: LD_INT 4
23702: PUSH
23703: LD_INT 5
23705: PUSH
23706: LD_INT 6
23708: PUSH
23709: LD_INT 7
23711: PUSH
23712: LD_INT 8
23714: PUSH
23715: LD_INT 9
23717: PUSH
23718: LD_INT 10
23720: PUSH
23721: LD_INT 11
23723: PUSH
23724: LD_INT 12
23726: PUSH
23727: LD_INT 13
23729: PUSH
23730: LD_INT 14
23732: PUSH
23733: LD_INT 15
23735: PUSH
23736: LD_INT 16
23738: PUSH
23739: LD_INT 17
23741: PUSH
23742: LD_INT 18
23744: PUSH
23745: LD_INT 19
23747: PUSH
23748: LD_INT 20
23750: PUSH
23751: LD_INT 21
23753: PUSH
23754: LD_INT 22
23756: PUSH
23757: LD_INT 23
23759: PUSH
23760: LD_INT 24
23762: PUSH
23763: LD_INT 25
23765: PUSH
23766: LD_INT 26
23768: PUSH
23769: LD_INT 27
23771: PUSH
23772: LD_INT 28
23774: PUSH
23775: LD_INT 29
23777: PUSH
23778: LD_INT 30
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: LD_INT 32
23786: PUSH
23787: LD_INT 33
23789: PUSH
23790: LD_INT 34
23792: PUSH
23793: LD_INT 35
23795: PUSH
23796: LD_INT 36
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 101
23839: PUSH
23840: LD_INT 102
23842: PUSH
23843: LD_INT 103
23845: PUSH
23846: LD_INT 104
23848: PUSH
23849: LD_INT 105
23851: PUSH
23852: LD_INT 106
23854: PUSH
23855: LD_INT 107
23857: PUSH
23858: LD_INT 108
23860: PUSH
23861: LD_INT 109
23863: PUSH
23864: LD_INT 110
23866: PUSH
23867: LD_INT 111
23869: PUSH
23870: LD_INT 112
23872: PUSH
23873: LD_INT 113
23875: PUSH
23876: LD_INT 114
23878: PUSH
23879: LD_INT 115
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: ST_TO_ADDR
// if result then
23903: LD_VAR 0 1
23907: IFFALSE 24196
// begin normal :=  ;
23909: LD_ADDR_VAR 0 3
23913: PUSH
23914: LD_STRING 
23916: ST_TO_ADDR
// hardcore :=  ;
23917: LD_ADDR_VAR 0 4
23921: PUSH
23922: LD_STRING 
23924: ST_TO_ADDR
// for i = 1 to normalCounter do
23925: LD_ADDR_VAR 0 5
23929: PUSH
23930: DOUBLE
23931: LD_INT 1
23933: DEC
23934: ST_TO_ADDR
23935: LD_EXP 65
23939: PUSH
23940: FOR_TO
23941: IFFALSE 24042
// begin tmp := 0 ;
23943: LD_ADDR_VAR 0 2
23947: PUSH
23948: LD_STRING 0
23950: ST_TO_ADDR
// if result [ 1 ] then
23951: LD_VAR 0 1
23955: PUSH
23956: LD_INT 1
23958: ARRAY
23959: IFFALSE 24024
// if result [ 1 ] [ 1 ] = i then
23961: LD_VAR 0 1
23965: PUSH
23966: LD_INT 1
23968: ARRAY
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PUSH
23974: LD_VAR 0 5
23978: EQUAL
23979: IFFALSE 24024
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23981: LD_ADDR_VAR 0 1
23985: PUSH
23986: LD_VAR 0 1
23990: PPUSH
23991: LD_INT 1
23993: PPUSH
23994: LD_VAR 0 1
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: PPUSH
24003: LD_INT 1
24005: PPUSH
24006: CALL_OW 3
24010: PPUSH
24011: CALL_OW 1
24015: ST_TO_ADDR
// tmp := 1 ;
24016: LD_ADDR_VAR 0 2
24020: PUSH
24021: LD_STRING 1
24023: ST_TO_ADDR
// end ; normal := normal & tmp ;
24024: LD_ADDR_VAR 0 3
24028: PUSH
24029: LD_VAR 0 3
24033: PUSH
24034: LD_VAR 0 2
24038: STR
24039: ST_TO_ADDR
// end ;
24040: GO 23940
24042: POP
24043: POP
// for i = 1 to hardcoreCounter do
24044: LD_ADDR_VAR 0 5
24048: PUSH
24049: DOUBLE
24050: LD_INT 1
24052: DEC
24053: ST_TO_ADDR
24054: LD_EXP 66
24058: PUSH
24059: FOR_TO
24060: IFFALSE 24165
// begin tmp := 0 ;
24062: LD_ADDR_VAR 0 2
24066: PUSH
24067: LD_STRING 0
24069: ST_TO_ADDR
// if result [ 2 ] then
24070: LD_VAR 0 1
24074: PUSH
24075: LD_INT 2
24077: ARRAY
24078: IFFALSE 24147
// if result [ 2 ] [ 1 ] = 100 + i then
24080: LD_VAR 0 1
24084: PUSH
24085: LD_INT 2
24087: ARRAY
24088: PUSH
24089: LD_INT 1
24091: ARRAY
24092: PUSH
24093: LD_INT 100
24095: PUSH
24096: LD_VAR 0 5
24100: PLUS
24101: EQUAL
24102: IFFALSE 24147
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24104: LD_ADDR_VAR 0 1
24108: PUSH
24109: LD_VAR 0 1
24113: PPUSH
24114: LD_INT 2
24116: PPUSH
24117: LD_VAR 0 1
24121: PUSH
24122: LD_INT 2
24124: ARRAY
24125: PPUSH
24126: LD_INT 1
24128: PPUSH
24129: CALL_OW 3
24133: PPUSH
24134: CALL_OW 1
24138: ST_TO_ADDR
// tmp := 1 ;
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: LD_STRING 1
24146: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24147: LD_ADDR_VAR 0 4
24151: PUSH
24152: LD_VAR 0 4
24156: PUSH
24157: LD_VAR 0 2
24161: STR
24162: ST_TO_ADDR
// end ;
24163: GO 24059
24165: POP
24166: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24167: LD_STRING getStreamItemsFromMission("
24169: PUSH
24170: LD_VAR 0 3
24174: STR
24175: PUSH
24176: LD_STRING ","
24178: STR
24179: PUSH
24180: LD_VAR 0 4
24184: STR
24185: PUSH
24186: LD_STRING ")
24188: STR
24189: PPUSH
24190: CALL_OW 559
// end else
24194: GO 24203
// ToLua ( getStreamItemsFromMission("","") ) ;
24196: LD_STRING getStreamItemsFromMission("","")
24198: PPUSH
24199: CALL_OW 559
// end ;
24203: LD_VAR 0 1
24207: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24208: LD_EXP 64
24212: PUSH
24213: LD_EXP 69
24217: AND
24218: IFFALSE 24342
24220: GO 24222
24222: DISABLE
24223: LD_INT 0
24225: PPUSH
24226: PPUSH
// begin enable ;
24227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24228: LD_ADDR_VAR 0 2
24232: PUSH
24233: LD_INT 22
24235: PUSH
24236: LD_OWVAR 2
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: LD_INT 34
24250: PUSH
24251: LD_INT 7
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 34
24260: PUSH
24261: LD_INT 45
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 34
24270: PUSH
24271: LD_INT 28
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 34
24280: PUSH
24281: LD_INT 47
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PPUSH
24299: CALL_OW 69
24303: ST_TO_ADDR
// if not tmp then
24304: LD_VAR 0 2
24308: NOT
24309: IFFALSE 24313
// exit ;
24311: GO 24342
// for i in tmp do
24313: LD_ADDR_VAR 0 1
24317: PUSH
24318: LD_VAR 0 2
24322: PUSH
24323: FOR_IN
24324: IFFALSE 24340
// begin SetLives ( i , 0 ) ;
24326: LD_VAR 0 1
24330: PPUSH
24331: LD_INT 0
24333: PPUSH
24334: CALL_OW 234
// end ;
24338: GO 24323
24340: POP
24341: POP
// end ;
24342: PPOPN 2
24344: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24345: LD_EXP 64
24349: PUSH
24350: LD_EXP 70
24354: AND
24355: IFFALSE 24439
24357: GO 24359
24359: DISABLE
24360: LD_INT 0
24362: PPUSH
24363: PPUSH
// begin enable ;
24364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24365: LD_ADDR_VAR 0 2
24369: PUSH
24370: LD_INT 22
24372: PUSH
24373: LD_OWVAR 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 32
24384: PUSH
24385: LD_INT 3
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PPUSH
24396: CALL_OW 69
24400: ST_TO_ADDR
// if not tmp then
24401: LD_VAR 0 2
24405: NOT
24406: IFFALSE 24410
// exit ;
24408: GO 24439
// for i in tmp do
24410: LD_ADDR_VAR 0 1
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: FOR_IN
24421: IFFALSE 24437
// begin SetLives ( i , 0 ) ;
24423: LD_VAR 0 1
24427: PPUSH
24428: LD_INT 0
24430: PPUSH
24431: CALL_OW 234
// end ;
24435: GO 24420
24437: POP
24438: POP
// end ;
24439: PPOPN 2
24441: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24442: LD_EXP 64
24446: PUSH
24447: LD_EXP 67
24451: AND
24452: IFFALSE 24545
24454: GO 24456
24456: DISABLE
24457: LD_INT 0
24459: PPUSH
// begin enable ;
24460: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24461: LD_ADDR_VAR 0 1
24465: PUSH
24466: LD_INT 22
24468: PUSH
24469: LD_OWVAR 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 25
24483: PUSH
24484: LD_INT 5
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 25
24493: PUSH
24494: LD_INT 9
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 25
24503: PUSH
24504: LD_INT 8
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PPUSH
24521: CALL_OW 69
24525: PUSH
24526: FOR_IN
24527: IFFALSE 24543
// begin SetClass ( i , 1 ) ;
24529: LD_VAR 0 1
24533: PPUSH
24534: LD_INT 1
24536: PPUSH
24537: CALL_OW 336
// end ;
24541: GO 24526
24543: POP
24544: POP
// end ;
24545: PPOPN 1
24547: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24548: LD_EXP 64
24552: PUSH
24553: LD_EXP 68
24557: AND
24558: PUSH
24559: LD_OWVAR 65
24563: PUSH
24564: LD_INT 7
24566: LESS
24567: AND
24568: IFFALSE 24582
24570: GO 24572
24572: DISABLE
// begin enable ;
24573: ENABLE
// game_speed := 7 ;
24574: LD_ADDR_OWVAR 65
24578: PUSH
24579: LD_INT 7
24581: ST_TO_ADDR
// end ;
24582: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24583: LD_EXP 64
24587: PUSH
24588: LD_EXP 71
24592: AND
24593: IFFALSE 24795
24595: GO 24597
24597: DISABLE
24598: LD_INT 0
24600: PPUSH
24601: PPUSH
24602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24603: LD_ADDR_VAR 0 3
24607: PUSH
24608: LD_INT 81
24610: PUSH
24611: LD_OWVAR 2
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 21
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PPUSH
24634: CALL_OW 69
24638: ST_TO_ADDR
// if not tmp then
24639: LD_VAR 0 3
24643: NOT
24644: IFFALSE 24648
// exit ;
24646: GO 24795
// if tmp > 5 then
24648: LD_VAR 0 3
24652: PUSH
24653: LD_INT 5
24655: GREATER
24656: IFFALSE 24668
// k := 5 else
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_INT 5
24665: ST_TO_ADDR
24666: GO 24678
// k := tmp ;
24668: LD_ADDR_VAR 0 2
24672: PUSH
24673: LD_VAR 0 3
24677: ST_TO_ADDR
// for i := 1 to k do
24678: LD_ADDR_VAR 0 1
24682: PUSH
24683: DOUBLE
24684: LD_INT 1
24686: DEC
24687: ST_TO_ADDR
24688: LD_VAR 0 2
24692: PUSH
24693: FOR_TO
24694: IFFALSE 24793
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24696: LD_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: ARRAY
24706: PPUSH
24707: LD_VAR 0 1
24711: PUSH
24712: LD_INT 4
24714: MOD
24715: PUSH
24716: LD_INT 1
24718: PLUS
24719: PPUSH
24720: CALL_OW 259
24724: PUSH
24725: LD_INT 10
24727: LESS
24728: IFFALSE 24791
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24730: LD_VAR 0 3
24734: PUSH
24735: LD_VAR 0 1
24739: ARRAY
24740: PPUSH
24741: LD_VAR 0 1
24745: PUSH
24746: LD_INT 4
24748: MOD
24749: PUSH
24750: LD_INT 1
24752: PLUS
24753: PPUSH
24754: LD_VAR 0 3
24758: PUSH
24759: LD_VAR 0 1
24763: ARRAY
24764: PPUSH
24765: LD_VAR 0 1
24769: PUSH
24770: LD_INT 4
24772: MOD
24773: PUSH
24774: LD_INT 1
24776: PLUS
24777: PPUSH
24778: CALL_OW 259
24782: PUSH
24783: LD_INT 1
24785: PLUS
24786: PPUSH
24787: CALL_OW 237
24791: GO 24693
24793: POP
24794: POP
// end ;
24795: PPOPN 3
24797: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24798: LD_EXP 64
24802: PUSH
24803: LD_EXP 72
24807: AND
24808: IFFALSE 24828
24810: GO 24812
24812: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24813: LD_INT 4
24815: PPUSH
24816: LD_OWVAR 2
24820: PPUSH
24821: LD_INT 0
24823: PPUSH
24824: CALL_OW 324
24828: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24829: LD_EXP 64
24833: PUSH
24834: LD_EXP 101
24838: AND
24839: IFFALSE 24859
24841: GO 24843
24843: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24844: LD_INT 19
24846: PPUSH
24847: LD_OWVAR 2
24851: PPUSH
24852: LD_INT 0
24854: PPUSH
24855: CALL_OW 324
24859: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24860: LD_EXP 64
24864: PUSH
24865: LD_EXP 73
24869: AND
24870: IFFALSE 24972
24872: GO 24874
24874: DISABLE
24875: LD_INT 0
24877: PPUSH
24878: PPUSH
// begin enable ;
24879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24880: LD_ADDR_VAR 0 2
24884: PUSH
24885: LD_INT 22
24887: PUSH
24888: LD_OWVAR 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 2
24899: PUSH
24900: LD_INT 34
24902: PUSH
24903: LD_INT 11
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 34
24912: PUSH
24913: LD_INT 30
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PPUSH
24929: CALL_OW 69
24933: ST_TO_ADDR
// if not tmp then
24934: LD_VAR 0 2
24938: NOT
24939: IFFALSE 24943
// exit ;
24941: GO 24972
// for i in tmp do
24943: LD_ADDR_VAR 0 1
24947: PUSH
24948: LD_VAR 0 2
24952: PUSH
24953: FOR_IN
24954: IFFALSE 24970
// begin SetLives ( i , 0 ) ;
24956: LD_VAR 0 1
24960: PPUSH
24961: LD_INT 0
24963: PPUSH
24964: CALL_OW 234
// end ;
24968: GO 24953
24970: POP
24971: POP
// end ;
24972: PPOPN 2
24974: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24975: LD_EXP 64
24979: PUSH
24980: LD_EXP 74
24984: AND
24985: IFFALSE 25005
24987: GO 24989
24989: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24990: LD_INT 32
24992: PPUSH
24993: LD_OWVAR 2
24997: PPUSH
24998: LD_INT 0
25000: PPUSH
25001: CALL_OW 324
25005: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25006: LD_EXP 64
25010: PUSH
25011: LD_EXP 75
25015: AND
25016: IFFALSE 25197
25018: GO 25020
25020: DISABLE
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: LD_INT 22
25033: PUSH
25034: LD_OWVAR 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 33
25045: PUSH
25046: LD_INT 3
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PPUSH
25057: CALL_OW 69
25061: ST_TO_ADDR
// if not tmp then
25062: LD_VAR 0 2
25066: NOT
25067: IFFALSE 25071
// exit ;
25069: GO 25197
// side := 0 ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_INT 0
25078: ST_TO_ADDR
// for i := 1 to 8 do
25079: LD_ADDR_VAR 0 1
25083: PUSH
25084: DOUBLE
25085: LD_INT 1
25087: DEC
25088: ST_TO_ADDR
25089: LD_INT 8
25091: PUSH
25092: FOR_TO
25093: IFFALSE 25141
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25095: LD_OWVAR 2
25099: PUSH
25100: LD_VAR 0 1
25104: NONEQUAL
25105: PUSH
25106: LD_OWVAR 2
25110: PPUSH
25111: LD_VAR 0 1
25115: PPUSH
25116: CALL_OW 81
25120: PUSH
25121: LD_INT 2
25123: EQUAL
25124: AND
25125: IFFALSE 25139
// begin side := i ;
25127: LD_ADDR_VAR 0 3
25131: PUSH
25132: LD_VAR 0 1
25136: ST_TO_ADDR
// break ;
25137: GO 25141
// end ;
25139: GO 25092
25141: POP
25142: POP
// if not side then
25143: LD_VAR 0 3
25147: NOT
25148: IFFALSE 25152
// exit ;
25150: GO 25197
// for i := 1 to tmp do
25152: LD_ADDR_VAR 0 1
25156: PUSH
25157: DOUBLE
25158: LD_INT 1
25160: DEC
25161: ST_TO_ADDR
25162: LD_VAR 0 2
25166: PUSH
25167: FOR_TO
25168: IFFALSE 25195
// if Prob ( 60 ) then
25170: LD_INT 60
25172: PPUSH
25173: CALL_OW 13
25177: IFFALSE 25193
// SetSide ( i , side ) ;
25179: LD_VAR 0 1
25183: PPUSH
25184: LD_VAR 0 3
25188: PPUSH
25189: CALL_OW 235
25193: GO 25167
25195: POP
25196: POP
// end ;
25197: PPOPN 3
25199: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25200: LD_EXP 64
25204: PUSH
25205: LD_EXP 77
25209: AND
25210: IFFALSE 25329
25212: GO 25214
25214: DISABLE
25215: LD_INT 0
25217: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25218: LD_ADDR_VAR 0 1
25222: PUSH
25223: LD_INT 22
25225: PUSH
25226: LD_OWVAR 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 21
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 3
25247: PUSH
25248: LD_INT 23
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: PPUSH
25267: CALL_OW 69
25271: PUSH
25272: FOR_IN
25273: IFFALSE 25327
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25275: LD_VAR 0 1
25279: PPUSH
25280: CALL_OW 257
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: LD_INT 3
25293: PUSH
25294: LD_INT 4
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: IN
25303: IFFALSE 25325
// SetClass ( un , rand ( 1 , 4 ) ) ;
25305: LD_VAR 0 1
25309: PPUSH
25310: LD_INT 1
25312: PPUSH
25313: LD_INT 4
25315: PPUSH
25316: CALL_OW 12
25320: PPUSH
25321: CALL_OW 336
25325: GO 25272
25327: POP
25328: POP
// end ;
25329: PPOPN 1
25331: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25332: LD_EXP 64
25336: PUSH
25337: LD_EXP 76
25341: AND
25342: IFFALSE 25421
25344: GO 25346
25346: DISABLE
25347: LD_INT 0
25349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25350: LD_ADDR_VAR 0 1
25354: PUSH
25355: LD_INT 22
25357: PUSH
25358: LD_OWVAR 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 21
25369: PUSH
25370: LD_INT 3
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PPUSH
25381: CALL_OW 69
25385: ST_TO_ADDR
// if not tmp then
25386: LD_VAR 0 1
25390: NOT
25391: IFFALSE 25395
// exit ;
25393: GO 25421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25395: LD_VAR 0 1
25399: PUSH
25400: LD_INT 1
25402: PPUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 12
25412: ARRAY
25413: PPUSH
25414: LD_INT 100
25416: PPUSH
25417: CALL_OW 234
// end ;
25421: PPOPN 1
25423: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25424: LD_EXP 64
25428: PUSH
25429: LD_EXP 78
25433: AND
25434: IFFALSE 25532
25436: GO 25438
25438: DISABLE
25439: LD_INT 0
25441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25442: LD_ADDR_VAR 0 1
25446: PUSH
25447: LD_INT 22
25449: PUSH
25450: LD_OWVAR 2
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 21
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PPUSH
25473: CALL_OW 69
25477: ST_TO_ADDR
// if not tmp then
25478: LD_VAR 0 1
25482: NOT
25483: IFFALSE 25487
// exit ;
25485: GO 25532
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25487: LD_VAR 0 1
25491: PUSH
25492: LD_INT 1
25494: PPUSH
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 12
25504: ARRAY
25505: PPUSH
25506: LD_INT 1
25508: PPUSH
25509: LD_INT 4
25511: PPUSH
25512: CALL_OW 12
25516: PPUSH
25517: LD_INT 3000
25519: PPUSH
25520: LD_INT 9000
25522: PPUSH
25523: CALL_OW 12
25527: PPUSH
25528: CALL_OW 492
// end ;
25532: PPOPN 1
25534: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25535: LD_EXP 64
25539: PUSH
25540: LD_EXP 79
25544: AND
25545: IFFALSE 25565
25547: GO 25549
25549: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25550: LD_INT 1
25552: PPUSH
25553: LD_OWVAR 2
25557: PPUSH
25558: LD_INT 0
25560: PPUSH
25561: CALL_OW 324
25565: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25566: LD_EXP 64
25570: PUSH
25571: LD_EXP 80
25575: AND
25576: IFFALSE 25659
25578: GO 25580
25580: DISABLE
25581: LD_INT 0
25583: PPUSH
25584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25585: LD_ADDR_VAR 0 2
25589: PUSH
25590: LD_INT 22
25592: PUSH
25593: LD_OWVAR 2
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 21
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PPUSH
25616: CALL_OW 69
25620: ST_TO_ADDR
// if not tmp then
25621: LD_VAR 0 2
25625: NOT
25626: IFFALSE 25630
// exit ;
25628: GO 25659
// for i in tmp do
25630: LD_ADDR_VAR 0 1
25634: PUSH
25635: LD_VAR 0 2
25639: PUSH
25640: FOR_IN
25641: IFFALSE 25657
// SetBLevel ( i , 10 ) ;
25643: LD_VAR 0 1
25647: PPUSH
25648: LD_INT 10
25650: PPUSH
25651: CALL_OW 241
25655: GO 25640
25657: POP
25658: POP
// end ;
25659: PPOPN 2
25661: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25662: LD_EXP 64
25666: PUSH
25667: LD_EXP 81
25671: AND
25672: IFFALSE 25783
25674: GO 25676
25676: DISABLE
25677: LD_INT 0
25679: PPUSH
25680: PPUSH
25681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: LD_INT 22
25689: PUSH
25690: LD_OWVAR 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 25
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PPUSH
25713: CALL_OW 69
25717: ST_TO_ADDR
// if not tmp then
25718: LD_VAR 0 3
25722: NOT
25723: IFFALSE 25727
// exit ;
25725: GO 25783
// un := tmp [ rand ( 1 , tmp ) ] ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_VAR 0 3
25736: PUSH
25737: LD_INT 1
25739: PPUSH
25740: LD_VAR 0 3
25744: PPUSH
25745: CALL_OW 12
25749: ARRAY
25750: ST_TO_ADDR
// if Crawls ( un ) then
25751: LD_VAR 0 2
25755: PPUSH
25756: CALL_OW 318
25760: IFFALSE 25771
// ComWalk ( un ) ;
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25771: LD_VAR 0 2
25775: PPUSH
25776: LD_INT 5
25778: PPUSH
25779: CALL_OW 336
// end ;
25783: PPOPN 3
25785: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25786: LD_EXP 64
25790: PUSH
25791: LD_EXP 82
25795: AND
25796: PUSH
25797: LD_OWVAR 67
25801: PUSH
25802: LD_INT 3
25804: LESS
25805: AND
25806: IFFALSE 25825
25808: GO 25810
25810: DISABLE
// Difficulty := Difficulty + 1 ;
25811: LD_ADDR_OWVAR 67
25815: PUSH
25816: LD_OWVAR 67
25820: PUSH
25821: LD_INT 1
25823: PLUS
25824: ST_TO_ADDR
25825: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25826: LD_EXP 64
25830: PUSH
25831: LD_EXP 83
25835: AND
25836: IFFALSE 25939
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
// begin for i := 1 to 5 do
25844: LD_ADDR_VAR 0 1
25848: PUSH
25849: DOUBLE
25850: LD_INT 1
25852: DEC
25853: ST_TO_ADDR
25854: LD_INT 5
25856: PUSH
25857: FOR_TO
25858: IFFALSE 25937
// begin uc_nation := nation_nature ;
25860: LD_ADDR_OWVAR 21
25864: PUSH
25865: LD_INT 0
25867: ST_TO_ADDR
// uc_side := 0 ;
25868: LD_ADDR_OWVAR 20
25872: PUSH
25873: LD_INT 0
25875: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25876: LD_ADDR_OWVAR 29
25880: PUSH
25881: LD_INT 12
25883: PUSH
25884: LD_INT 12
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: ST_TO_ADDR
// hc_agressivity := 20 ;
25891: LD_ADDR_OWVAR 35
25895: PUSH
25896: LD_INT 20
25898: ST_TO_ADDR
// hc_class := class_tiger ;
25899: LD_ADDR_OWVAR 28
25903: PUSH
25904: LD_INT 14
25906: ST_TO_ADDR
// hc_gallery :=  ;
25907: LD_ADDR_OWVAR 33
25911: PUSH
25912: LD_STRING 
25914: ST_TO_ADDR
// hc_name :=  ;
25915: LD_ADDR_OWVAR 26
25919: PUSH
25920: LD_STRING 
25922: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25923: CALL_OW 44
25927: PPUSH
25928: LD_INT 0
25930: PPUSH
25931: CALL_OW 51
// end ;
25935: GO 25857
25937: POP
25938: POP
// end ;
25939: PPOPN 1
25941: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25942: LD_EXP 64
25946: PUSH
25947: LD_EXP 84
25951: AND
25952: IFFALSE 25961
25954: GO 25956
25956: DISABLE
// StreamSibBomb ;
25957: CALL 25962 0 0
25961: END
// export function StreamSibBomb ; var i , x , y ; begin
25962: LD_INT 0
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
// result := false ;
25968: LD_ADDR_VAR 0 1
25972: PUSH
25973: LD_INT 0
25975: ST_TO_ADDR
// for i := 1 to 16 do
25976: LD_ADDR_VAR 0 2
25980: PUSH
25981: DOUBLE
25982: LD_INT 1
25984: DEC
25985: ST_TO_ADDR
25986: LD_INT 16
25988: PUSH
25989: FOR_TO
25990: IFFALSE 26189
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25992: LD_ADDR_VAR 0 3
25996: PUSH
25997: LD_INT 10
25999: PUSH
26000: LD_INT 20
26002: PUSH
26003: LD_INT 30
26005: PUSH
26006: LD_INT 40
26008: PUSH
26009: LD_INT 50
26011: PUSH
26012: LD_INT 60
26014: PUSH
26015: LD_INT 70
26017: PUSH
26018: LD_INT 80
26020: PUSH
26021: LD_INT 90
26023: PUSH
26024: LD_INT 100
26026: PUSH
26027: LD_INT 110
26029: PUSH
26030: LD_INT 120
26032: PUSH
26033: LD_INT 130
26035: PUSH
26036: LD_INT 140
26038: PUSH
26039: LD_INT 150
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: PPUSH
26062: LD_INT 15
26064: PPUSH
26065: CALL_OW 12
26069: ARRAY
26070: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26071: LD_ADDR_VAR 0 4
26075: PUSH
26076: LD_INT 10
26078: PUSH
26079: LD_INT 20
26081: PUSH
26082: LD_INT 30
26084: PUSH
26085: LD_INT 40
26087: PUSH
26088: LD_INT 50
26090: PUSH
26091: LD_INT 60
26093: PUSH
26094: LD_INT 70
26096: PUSH
26097: LD_INT 80
26099: PUSH
26100: LD_INT 90
26102: PUSH
26103: LD_INT 100
26105: PUSH
26106: LD_INT 110
26108: PUSH
26109: LD_INT 120
26111: PUSH
26112: LD_INT 130
26114: PUSH
26115: LD_INT 140
26117: PUSH
26118: LD_INT 150
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PPUSH
26141: LD_INT 15
26143: PPUSH
26144: CALL_OW 12
26148: ARRAY
26149: ST_TO_ADDR
// if ValidHex ( x , y ) then
26150: LD_VAR 0 3
26154: PPUSH
26155: LD_VAR 0 4
26159: PPUSH
26160: CALL_OW 488
26164: IFFALSE 26187
// begin result := [ x , y ] ;
26166: LD_ADDR_VAR 0 1
26170: PUSH
26171: LD_VAR 0 3
26175: PUSH
26176: LD_VAR 0 4
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: ST_TO_ADDR
// break ;
26185: GO 26189
// end ; end ;
26187: GO 25989
26189: POP
26190: POP
// if result then
26191: LD_VAR 0 1
26195: IFFALSE 26255
// begin ToLua ( playSibBomb() ) ;
26197: LD_STRING playSibBomb()
26199: PPUSH
26200: CALL_OW 559
// wait ( 0 0$14 ) ;
26204: LD_INT 490
26206: PPUSH
26207: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26211: LD_VAR 0 1
26215: PUSH
26216: LD_INT 1
26218: ARRAY
26219: PPUSH
26220: LD_VAR 0 1
26224: PUSH
26225: LD_INT 2
26227: ARRAY
26228: PPUSH
26229: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: PPUSH
26242: LD_VAR 0 1
26246: PUSH
26247: LD_INT 2
26249: ARRAY
26250: PPUSH
26251: CALL_OW 429
// end ; end ;
26255: LD_VAR 0 1
26259: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26260: LD_EXP 64
26264: PUSH
26265: LD_EXP 86
26269: AND
26270: IFFALSE 26282
26272: GO 26274
26274: DISABLE
// YouLost (  ) ;
26275: LD_STRING 
26277: PPUSH
26278: CALL_OW 104
26282: END
// every 0 0$1 trigger StreamModeActive and sFog do
26283: LD_EXP 64
26287: PUSH
26288: LD_EXP 85
26292: AND
26293: IFFALSE 26307
26295: GO 26297
26297: DISABLE
// FogOff ( your_side ) ;
26298: LD_OWVAR 2
26302: PPUSH
26303: CALL_OW 344
26307: END
// every 0 0$1 trigger StreamModeActive and sSun do
26308: LD_EXP 64
26312: PUSH
26313: LD_EXP 87
26317: AND
26318: IFFALSE 26346
26320: GO 26322
26322: DISABLE
// begin solar_recharge_percent := 0 ;
26323: LD_ADDR_OWVAR 79
26327: PUSH
26328: LD_INT 0
26330: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26331: LD_INT 10500
26333: PPUSH
26334: CALL_OW 67
// solar_recharge_percent := 100 ;
26338: LD_ADDR_OWVAR 79
26342: PUSH
26343: LD_INT 100
26345: ST_TO_ADDR
// end ;
26346: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26347: LD_EXP 64
26351: PUSH
26352: LD_EXP 88
26356: AND
26357: IFFALSE 26596
26359: GO 26361
26361: DISABLE
26362: LD_INT 0
26364: PPUSH
26365: PPUSH
26366: PPUSH
// begin tmp := [ ] ;
26367: LD_ADDR_VAR 0 3
26371: PUSH
26372: EMPTY
26373: ST_TO_ADDR
// for i := 1 to 6 do
26374: LD_ADDR_VAR 0 1
26378: PUSH
26379: DOUBLE
26380: LD_INT 1
26382: DEC
26383: ST_TO_ADDR
26384: LD_INT 6
26386: PUSH
26387: FOR_TO
26388: IFFALSE 26493
// begin uc_nation := nation_nature ;
26390: LD_ADDR_OWVAR 21
26394: PUSH
26395: LD_INT 0
26397: ST_TO_ADDR
// uc_side := 0 ;
26398: LD_ADDR_OWVAR 20
26402: PUSH
26403: LD_INT 0
26405: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26406: LD_ADDR_OWVAR 29
26410: PUSH
26411: LD_INT 12
26413: PUSH
26414: LD_INT 12
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// hc_agressivity := 20 ;
26421: LD_ADDR_OWVAR 35
26425: PUSH
26426: LD_INT 20
26428: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26429: LD_ADDR_OWVAR 28
26433: PUSH
26434: LD_INT 17
26436: ST_TO_ADDR
// hc_gallery :=  ;
26437: LD_ADDR_OWVAR 33
26441: PUSH
26442: LD_STRING 
26444: ST_TO_ADDR
// hc_name :=  ;
26445: LD_ADDR_OWVAR 26
26449: PUSH
26450: LD_STRING 
26452: ST_TO_ADDR
// un := CreateHuman ;
26453: LD_ADDR_VAR 0 2
26457: PUSH
26458: CALL_OW 44
26462: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26463: LD_VAR 0 2
26467: PPUSH
26468: LD_INT 1
26470: PPUSH
26471: CALL_OW 51
// tmp := tmp ^ un ;
26475: LD_ADDR_VAR 0 3
26479: PUSH
26480: LD_VAR 0 3
26484: PUSH
26485: LD_VAR 0 2
26489: ADD
26490: ST_TO_ADDR
// end ;
26491: GO 26387
26493: POP
26494: POP
// repeat wait ( 0 0$1 ) ;
26495: LD_INT 35
26497: PPUSH
26498: CALL_OW 67
// for un in tmp do
26502: LD_ADDR_VAR 0 2
26506: PUSH
26507: LD_VAR 0 3
26511: PUSH
26512: FOR_IN
26513: IFFALSE 26587
// begin if IsDead ( un ) then
26515: LD_VAR 0 2
26519: PPUSH
26520: CALL_OW 301
26524: IFFALSE 26544
// begin tmp := tmp diff un ;
26526: LD_ADDR_VAR 0 3
26530: PUSH
26531: LD_VAR 0 3
26535: PUSH
26536: LD_VAR 0 2
26540: DIFF
26541: ST_TO_ADDR
// continue ;
26542: GO 26512
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26544: LD_VAR 0 2
26548: PPUSH
26549: LD_INT 3
26551: PUSH
26552: LD_INT 22
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PPUSH
26566: CALL_OW 69
26570: PPUSH
26571: LD_VAR 0 2
26575: PPUSH
26576: CALL_OW 74
26580: PPUSH
26581: CALL_OW 115
// end ;
26585: GO 26512
26587: POP
26588: POP
// until not tmp ;
26589: LD_VAR 0 3
26593: NOT
26594: IFFALSE 26495
// end ;
26596: PPOPN 3
26598: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26599: LD_EXP 64
26603: PUSH
26604: LD_EXP 89
26608: AND
26609: IFFALSE 26663
26611: GO 26613
26613: DISABLE
// begin ToLua ( displayTroll(); ) ;
26614: LD_STRING displayTroll();
26616: PPUSH
26617: CALL_OW 559
// wait ( 3 3$00 ) ;
26621: LD_INT 6300
26623: PPUSH
26624: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26628: LD_STRING hideTroll();
26630: PPUSH
26631: CALL_OW 559
// wait ( 1 1$00 ) ;
26635: LD_INT 2100
26637: PPUSH
26638: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26642: LD_STRING displayTroll();
26644: PPUSH
26645: CALL_OW 559
// wait ( 1 1$00 ) ;
26649: LD_INT 2100
26651: PPUSH
26652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26656: LD_STRING hideTroll();
26658: PPUSH
26659: CALL_OW 559
// end ;
26663: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26664: LD_EXP 64
26668: PUSH
26669: LD_EXP 90
26673: AND
26674: IFFALSE 26737
26676: GO 26678
26678: DISABLE
26679: LD_INT 0
26681: PPUSH
// begin p := 0 ;
26682: LD_ADDR_VAR 0 1
26686: PUSH
26687: LD_INT 0
26689: ST_TO_ADDR
// repeat game_speed := 1 ;
26690: LD_ADDR_OWVAR 65
26694: PUSH
26695: LD_INT 1
26697: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26698: LD_INT 35
26700: PPUSH
26701: CALL_OW 67
// p := p + 1 ;
26705: LD_ADDR_VAR 0 1
26709: PUSH
26710: LD_VAR 0 1
26714: PUSH
26715: LD_INT 1
26717: PLUS
26718: ST_TO_ADDR
// until p >= 60 ;
26719: LD_VAR 0 1
26723: PUSH
26724: LD_INT 60
26726: GREATEREQUAL
26727: IFFALSE 26690
// game_speed := 4 ;
26729: LD_ADDR_OWVAR 65
26733: PUSH
26734: LD_INT 4
26736: ST_TO_ADDR
// end ;
26737: PPOPN 1
26739: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26740: LD_EXP 64
26744: PUSH
26745: LD_EXP 91
26749: AND
26750: IFFALSE 26896
26752: GO 26754
26754: DISABLE
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26759: LD_ADDR_VAR 0 1
26763: PUSH
26764: LD_INT 22
26766: PUSH
26767: LD_OWVAR 2
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 30
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 30
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PPUSH
26808: CALL_OW 69
26812: ST_TO_ADDR
// if not depot then
26813: LD_VAR 0 1
26817: NOT
26818: IFFALSE 26822
// exit ;
26820: GO 26896
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26822: LD_ADDR_VAR 0 2
26826: PUSH
26827: LD_VAR 0 1
26831: PUSH
26832: LD_INT 1
26834: PPUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 12
26844: ARRAY
26845: PPUSH
26846: CALL_OW 274
26850: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26851: LD_VAR 0 2
26855: PPUSH
26856: LD_INT 1
26858: PPUSH
26859: LD_INT 0
26861: PPUSH
26862: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26866: LD_VAR 0 2
26870: PPUSH
26871: LD_INT 2
26873: PPUSH
26874: LD_INT 0
26876: PPUSH
26877: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26881: LD_VAR 0 2
26885: PPUSH
26886: LD_INT 3
26888: PPUSH
26889: LD_INT 0
26891: PPUSH
26892: CALL_OW 277
// end ;
26896: PPOPN 2
26898: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26899: LD_EXP 64
26903: PUSH
26904: LD_EXP 92
26908: AND
26909: IFFALSE 27006
26911: GO 26913
26913: DISABLE
26914: LD_INT 0
26916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26917: LD_ADDR_VAR 0 1
26921: PUSH
26922: LD_INT 22
26924: PUSH
26925: LD_OWVAR 2
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 21
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 3
26946: PUSH
26947: LD_INT 23
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: LIST
26965: PPUSH
26966: CALL_OW 69
26970: ST_TO_ADDR
// if not tmp then
26971: LD_VAR 0 1
26975: NOT
26976: IFFALSE 26980
// exit ;
26978: GO 27006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26980: LD_VAR 0 1
26984: PUSH
26985: LD_INT 1
26987: PPUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 12
26997: ARRAY
26998: PPUSH
26999: LD_INT 200
27001: PPUSH
27002: CALL_OW 234
// end ;
27006: PPOPN 1
27008: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27009: LD_EXP 64
27013: PUSH
27014: LD_EXP 93
27018: AND
27019: IFFALSE 27098
27021: GO 27023
27023: DISABLE
27024: LD_INT 0
27026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27027: LD_ADDR_VAR 0 1
27031: PUSH
27032: LD_INT 22
27034: PUSH
27035: LD_OWVAR 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 21
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 69
27062: ST_TO_ADDR
// if not tmp then
27063: LD_VAR 0 1
27067: NOT
27068: IFFALSE 27072
// exit ;
27070: GO 27098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27072: LD_VAR 0 1
27076: PUSH
27077: LD_INT 1
27079: PPUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 12
27089: ARRAY
27090: PPUSH
27091: LD_INT 60
27093: PPUSH
27094: CALL_OW 234
// end ;
27098: PPOPN 1
27100: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27101: LD_EXP 64
27105: PUSH
27106: LD_EXP 94
27110: AND
27111: IFFALSE 27210
27113: GO 27115
27115: DISABLE
27116: LD_INT 0
27118: PPUSH
27119: PPUSH
// begin enable ;
27120: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27121: LD_ADDR_VAR 0 1
27125: PUSH
27126: LD_INT 22
27128: PUSH
27129: LD_OWVAR 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 61
27140: PUSH
27141: EMPTY
27142: LIST
27143: PUSH
27144: LD_INT 33
27146: PUSH
27147: LD_INT 2
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: PPUSH
27159: CALL_OW 69
27163: ST_TO_ADDR
// if not tmp then
27164: LD_VAR 0 1
27168: NOT
27169: IFFALSE 27173
// exit ;
27171: GO 27210
// for i in tmp do
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_VAR 0 1
27182: PUSH
27183: FOR_IN
27184: IFFALSE 27208
// if IsControledBy ( i ) then
27186: LD_VAR 0 2
27190: PPUSH
27191: CALL_OW 312
27195: IFFALSE 27206
// ComUnlink ( i ) ;
27197: LD_VAR 0 2
27201: PPUSH
27202: CALL_OW 136
27206: GO 27183
27208: POP
27209: POP
// end ;
27210: PPOPN 2
27212: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27213: LD_EXP 64
27217: PUSH
27218: LD_EXP 95
27222: AND
27223: IFFALSE 27363
27225: GO 27227
27227: DISABLE
27228: LD_INT 0
27230: PPUSH
27231: PPUSH
// begin ToLua ( displayPowell(); ) ;
27232: LD_STRING displayPowell();
27234: PPUSH
27235: CALL_OW 559
// uc_side := 0 ;
27239: LD_ADDR_OWVAR 20
27243: PUSH
27244: LD_INT 0
27246: ST_TO_ADDR
// uc_nation := 2 ;
27247: LD_ADDR_OWVAR 21
27251: PUSH
27252: LD_INT 2
27254: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27255: LD_ADDR_OWVAR 37
27259: PUSH
27260: LD_INT 14
27262: ST_TO_ADDR
// vc_engine := engine_siberite ;
27263: LD_ADDR_OWVAR 39
27267: PUSH
27268: LD_INT 3
27270: ST_TO_ADDR
// vc_control := control_apeman ;
27271: LD_ADDR_OWVAR 38
27275: PUSH
27276: LD_INT 5
27278: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27279: LD_ADDR_OWVAR 40
27283: PUSH
27284: LD_INT 29
27286: ST_TO_ADDR
// un := CreateVehicle ;
27287: LD_ADDR_VAR 0 2
27291: PUSH
27292: CALL_OW 45
27296: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27297: LD_VAR 0 2
27301: PPUSH
27302: LD_INT 1
27304: PPUSH
27305: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27309: LD_INT 35
27311: PPUSH
27312: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27316: LD_VAR 0 2
27320: PPUSH
27321: LD_INT 22
27323: PUSH
27324: LD_OWVAR 2
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PPUSH
27333: CALL_OW 69
27337: PPUSH
27338: LD_VAR 0 2
27342: PPUSH
27343: CALL_OW 74
27347: PPUSH
27348: CALL_OW 115
// until IsDead ( un ) ;
27352: LD_VAR 0 2
27356: PPUSH
27357: CALL_OW 301
27361: IFFALSE 27309
// end ;
27363: PPOPN 2
27365: END
// every 0 0$1 trigger StreamModeActive and sStu do
27366: LD_EXP 64
27370: PUSH
27371: LD_EXP 103
27375: AND
27376: IFFALSE 27392
27378: GO 27380
27380: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27381: LD_STRING displayStucuk();
27383: PPUSH
27384: CALL_OW 559
// ResetFog ;
27388: CALL_OW 335
// end ;
27392: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27393: LD_EXP 64
27397: PUSH
27398: LD_EXP 96
27402: AND
27403: IFFALSE 27544
27405: GO 27407
27407: DISABLE
27408: LD_INT 0
27410: PPUSH
27411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27412: LD_ADDR_VAR 0 2
27416: PUSH
27417: LD_INT 22
27419: PUSH
27420: LD_OWVAR 2
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 21
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PPUSH
27443: CALL_OW 69
27447: ST_TO_ADDR
// if not tmp then
27448: LD_VAR 0 2
27452: NOT
27453: IFFALSE 27457
// exit ;
27455: GO 27544
// un := tmp [ rand ( 1 , tmp ) ] ;
27457: LD_ADDR_VAR 0 1
27461: PUSH
27462: LD_VAR 0 2
27466: PUSH
27467: LD_INT 1
27469: PPUSH
27470: LD_VAR 0 2
27474: PPUSH
27475: CALL_OW 12
27479: ARRAY
27480: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27481: LD_VAR 0 1
27485: PPUSH
27486: LD_INT 0
27488: PPUSH
27489: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27493: LD_VAR 0 1
27497: PPUSH
27498: LD_OWVAR 3
27502: PUSH
27503: LD_VAR 0 1
27507: DIFF
27508: PPUSH
27509: LD_VAR 0 1
27513: PPUSH
27514: CALL_OW 74
27518: PPUSH
27519: CALL_OW 115
// wait ( 0 0$20 ) ;
27523: LD_INT 700
27525: PPUSH
27526: CALL_OW 67
// SetSide ( un , your_side ) ;
27530: LD_VAR 0 1
27534: PPUSH
27535: LD_OWVAR 2
27539: PPUSH
27540: CALL_OW 235
// end ;
27544: PPOPN 2
27546: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27547: LD_EXP 64
27551: PUSH
27552: LD_EXP 97
27556: AND
27557: IFFALSE 27663
27559: GO 27561
27561: DISABLE
27562: LD_INT 0
27564: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27565: LD_ADDR_VAR 0 1
27569: PUSH
27570: LD_INT 22
27572: PUSH
27573: LD_OWVAR 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 30
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 30
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PPUSH
27614: CALL_OW 69
27618: ST_TO_ADDR
// if not depot then
27619: LD_VAR 0 1
27623: NOT
27624: IFFALSE 27628
// exit ;
27626: GO 27663
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27628: LD_VAR 0 1
27632: PUSH
27633: LD_INT 1
27635: ARRAY
27636: PPUSH
27637: CALL_OW 250
27641: PPUSH
27642: LD_VAR 0 1
27646: PUSH
27647: LD_INT 1
27649: ARRAY
27650: PPUSH
27651: CALL_OW 251
27655: PPUSH
27656: LD_INT 70
27658: PPUSH
27659: CALL_OW 495
// end ;
27663: PPOPN 1
27665: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27666: LD_EXP 64
27670: PUSH
27671: LD_EXP 98
27675: AND
27676: IFFALSE 27887
27678: GO 27680
27680: DISABLE
27681: LD_INT 0
27683: PPUSH
27684: PPUSH
27685: PPUSH
27686: PPUSH
27687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27688: LD_ADDR_VAR 0 5
27692: PUSH
27693: LD_INT 22
27695: PUSH
27696: LD_OWVAR 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 21
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PPUSH
27719: CALL_OW 69
27723: ST_TO_ADDR
// if not tmp then
27724: LD_VAR 0 5
27728: NOT
27729: IFFALSE 27733
// exit ;
27731: GO 27887
// for i in tmp do
27733: LD_ADDR_VAR 0 1
27737: PUSH
27738: LD_VAR 0 5
27742: PUSH
27743: FOR_IN
27744: IFFALSE 27885
// begin d := rand ( 0 , 5 ) ;
27746: LD_ADDR_VAR 0 4
27750: PUSH
27751: LD_INT 0
27753: PPUSH
27754: LD_INT 5
27756: PPUSH
27757: CALL_OW 12
27761: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27762: LD_ADDR_VAR 0 2
27766: PUSH
27767: LD_VAR 0 1
27771: PPUSH
27772: CALL_OW 250
27776: PPUSH
27777: LD_VAR 0 4
27781: PPUSH
27782: LD_INT 3
27784: PPUSH
27785: LD_INT 12
27787: PPUSH
27788: CALL_OW 12
27792: PPUSH
27793: CALL_OW 272
27797: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27798: LD_ADDR_VAR 0 3
27802: PUSH
27803: LD_VAR 0 1
27807: PPUSH
27808: CALL_OW 251
27812: PPUSH
27813: LD_VAR 0 4
27817: PPUSH
27818: LD_INT 3
27820: PPUSH
27821: LD_INT 12
27823: PPUSH
27824: CALL_OW 12
27828: PPUSH
27829: CALL_OW 273
27833: ST_TO_ADDR
// if ValidHex ( x , y ) then
27834: LD_VAR 0 2
27838: PPUSH
27839: LD_VAR 0 3
27843: PPUSH
27844: CALL_OW 488
27848: IFFALSE 27883
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27850: LD_VAR 0 1
27854: PPUSH
27855: LD_VAR 0 2
27859: PPUSH
27860: LD_VAR 0 3
27864: PPUSH
27865: LD_INT 3
27867: PPUSH
27868: LD_INT 6
27870: PPUSH
27871: CALL_OW 12
27875: PPUSH
27876: LD_INT 1
27878: PPUSH
27879: CALL_OW 483
// end ;
27883: GO 27743
27885: POP
27886: POP
// end ;
27887: PPOPN 5
27889: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27890: LD_EXP 64
27894: PUSH
27895: LD_EXP 99
27899: AND
27900: IFFALSE 27994
27902: GO 27904
27904: DISABLE
27905: LD_INT 0
27907: PPUSH
27908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27909: LD_ADDR_VAR 0 2
27913: PUSH
27914: LD_INT 22
27916: PUSH
27917: LD_OWVAR 2
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 32
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 21
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: PPUSH
27951: CALL_OW 69
27955: ST_TO_ADDR
// if not tmp then
27956: LD_VAR 0 2
27960: NOT
27961: IFFALSE 27965
// exit ;
27963: GO 27994
// for i in tmp do
27965: LD_ADDR_VAR 0 1
27969: PUSH
27970: LD_VAR 0 2
27974: PUSH
27975: FOR_IN
27976: IFFALSE 27992
// SetFuel ( i , 0 ) ;
27978: LD_VAR 0 1
27982: PPUSH
27983: LD_INT 0
27985: PPUSH
27986: CALL_OW 240
27990: GO 27975
27992: POP
27993: POP
// end ;
27994: PPOPN 2
27996: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27997: LD_EXP 64
28001: PUSH
28002: LD_EXP 100
28006: AND
28007: IFFALSE 28073
28009: GO 28011
28011: DISABLE
28012: LD_INT 0
28014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28015: LD_ADDR_VAR 0 1
28019: PUSH
28020: LD_INT 22
28022: PUSH
28023: LD_OWVAR 2
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 30
28034: PUSH
28035: LD_INT 29
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PPUSH
28046: CALL_OW 69
28050: ST_TO_ADDR
// if not tmp then
28051: LD_VAR 0 1
28055: NOT
28056: IFFALSE 28060
// exit ;
28058: GO 28073
// DestroyUnit ( tmp [ 1 ] ) ;
28060: LD_VAR 0 1
28064: PUSH
28065: LD_INT 1
28067: ARRAY
28068: PPUSH
28069: CALL_OW 65
// end ;
28073: PPOPN 1
28075: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28076: LD_EXP 64
28080: PUSH
28081: LD_EXP 102
28085: AND
28086: IFFALSE 28215
28088: GO 28090
28090: DISABLE
28091: LD_INT 0
28093: PPUSH
// begin uc_side := 0 ;
28094: LD_ADDR_OWVAR 20
28098: PUSH
28099: LD_INT 0
28101: ST_TO_ADDR
// uc_nation := nation_arabian ;
28102: LD_ADDR_OWVAR 21
28106: PUSH
28107: LD_INT 2
28109: ST_TO_ADDR
// hc_gallery :=  ;
28110: LD_ADDR_OWVAR 33
28114: PUSH
28115: LD_STRING 
28117: ST_TO_ADDR
// hc_name :=  ;
28118: LD_ADDR_OWVAR 26
28122: PUSH
28123: LD_STRING 
28125: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28126: LD_INT 1
28128: PPUSH
28129: LD_INT 11
28131: PPUSH
28132: LD_INT 10
28134: PPUSH
28135: CALL_OW 380
// un := CreateHuman ;
28139: LD_ADDR_VAR 0 1
28143: PUSH
28144: CALL_OW 44
28148: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_INT 1
28156: PPUSH
28157: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28161: LD_INT 35
28163: PPUSH
28164: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28168: LD_VAR 0 1
28172: PPUSH
28173: LD_INT 22
28175: PUSH
28176: LD_OWVAR 2
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PPUSH
28185: CALL_OW 69
28189: PPUSH
28190: LD_VAR 0 1
28194: PPUSH
28195: CALL_OW 74
28199: PPUSH
28200: CALL_OW 115
// until IsDead ( un ) ;
28204: LD_VAR 0 1
28208: PPUSH
28209: CALL_OW 301
28213: IFFALSE 28161
// end ;
28215: PPOPN 1
28217: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28218: LD_EXP 64
28222: PUSH
28223: LD_EXP 104
28227: AND
28228: IFFALSE 28240
28230: GO 28232
28232: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28233: LD_STRING earthquake(getX(game), 0, 32)
28235: PPUSH
28236: CALL_OW 559
28240: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28241: LD_EXP 64
28245: PUSH
28246: LD_EXP 105
28250: AND
28251: IFFALSE 28342
28253: GO 28255
28255: DISABLE
28256: LD_INT 0
28258: PPUSH
// begin enable ;
28259: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28260: LD_ADDR_VAR 0 1
28264: PUSH
28265: LD_INT 22
28267: PUSH
28268: LD_OWVAR 2
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 21
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 33
28289: PUSH
28290: LD_INT 3
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 69
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 1
28311: NOT
28312: IFFALSE 28316
// exit ;
28314: GO 28342
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28316: LD_VAR 0 1
28320: PUSH
28321: LD_INT 1
28323: PPUSH
28324: LD_VAR 0 1
28328: PPUSH
28329: CALL_OW 12
28333: ARRAY
28334: PPUSH
28335: LD_INT 1
28337: PPUSH
28338: CALL_OW 234
// end ;
28342: PPOPN 1
28344: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28345: LD_EXP 64
28349: PUSH
28350: LD_EXP 106
28354: AND
28355: IFFALSE 28496
28357: GO 28359
28359: DISABLE
28360: LD_INT 0
28362: PPUSH
28363: PPUSH
28364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_INT 22
28372: PUSH
28373: LD_OWVAR 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 25
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PPUSH
28396: CALL_OW 69
28400: ST_TO_ADDR
// if not tmp then
28401: LD_VAR 0 3
28405: NOT
28406: IFFALSE 28410
// exit ;
28408: GO 28496
// un := tmp [ rand ( 1 , tmp ) ] ;
28410: LD_ADDR_VAR 0 2
28414: PUSH
28415: LD_VAR 0 3
28419: PUSH
28420: LD_INT 1
28422: PPUSH
28423: LD_VAR 0 3
28427: PPUSH
28428: CALL_OW 12
28432: ARRAY
28433: ST_TO_ADDR
// if Crawls ( un ) then
28434: LD_VAR 0 2
28438: PPUSH
28439: CALL_OW 318
28443: IFFALSE 28454
// ComWalk ( un ) ;
28445: LD_VAR 0 2
28449: PPUSH
28450: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_INT 9
28461: PPUSH
28462: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28466: LD_INT 28
28468: PPUSH
28469: LD_OWVAR 2
28473: PPUSH
28474: LD_INT 2
28476: PPUSH
28477: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28481: LD_INT 29
28483: PPUSH
28484: LD_OWVAR 2
28488: PPUSH
28489: LD_INT 2
28491: PPUSH
28492: CALL_OW 322
// end ;
28496: PPOPN 3
28498: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28499: LD_EXP 64
28503: PUSH
28504: LD_EXP 107
28508: AND
28509: IFFALSE 28620
28511: GO 28513
28513: DISABLE
28514: LD_INT 0
28516: PPUSH
28517: PPUSH
28518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28519: LD_ADDR_VAR 0 3
28523: PUSH
28524: LD_INT 22
28526: PUSH
28527: LD_OWVAR 2
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 25
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: CALL_OW 69
28554: ST_TO_ADDR
// if not tmp then
28555: LD_VAR 0 3
28559: NOT
28560: IFFALSE 28564
// exit ;
28562: GO 28620
// un := tmp [ rand ( 1 , tmp ) ] ;
28564: LD_ADDR_VAR 0 2
28568: PUSH
28569: LD_VAR 0 3
28573: PUSH
28574: LD_INT 1
28576: PPUSH
28577: LD_VAR 0 3
28581: PPUSH
28582: CALL_OW 12
28586: ARRAY
28587: ST_TO_ADDR
// if Crawls ( un ) then
28588: LD_VAR 0 2
28592: PPUSH
28593: CALL_OW 318
28597: IFFALSE 28608
// ComWalk ( un ) ;
28599: LD_VAR 0 2
28603: PPUSH
28604: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28608: LD_VAR 0 2
28612: PPUSH
28613: LD_INT 8
28615: PPUSH
28616: CALL_OW 336
// end ;
28620: PPOPN 3
28622: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28623: LD_EXP 64
28627: PUSH
28628: LD_EXP 108
28632: AND
28633: IFFALSE 28777
28635: GO 28637
28637: DISABLE
28638: LD_INT 0
28640: PPUSH
28641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28642: LD_ADDR_VAR 0 2
28646: PUSH
28647: LD_INT 22
28649: PUSH
28650: LD_OWVAR 2
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 21
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 34
28674: PUSH
28675: LD_INT 12
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 34
28684: PUSH
28685: LD_INT 51
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 34
28694: PUSH
28695: LD_INT 32
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 69
28717: ST_TO_ADDR
// if not tmp then
28718: LD_VAR 0 2
28722: NOT
28723: IFFALSE 28727
// exit ;
28725: GO 28777
// for i in tmp do
28727: LD_ADDR_VAR 0 1
28731: PUSH
28732: LD_VAR 0 2
28736: PUSH
28737: FOR_IN
28738: IFFALSE 28775
// if GetCargo ( i , mat_artifact ) = 0 then
28740: LD_VAR 0 1
28744: PPUSH
28745: LD_INT 4
28747: PPUSH
28748: CALL_OW 289
28752: PUSH
28753: LD_INT 0
28755: EQUAL
28756: IFFALSE 28773
// SetCargo ( i , mat_siberit , 100 ) ;
28758: LD_VAR 0 1
28762: PPUSH
28763: LD_INT 3
28765: PPUSH
28766: LD_INT 100
28768: PPUSH
28769: CALL_OW 290
28773: GO 28737
28775: POP
28776: POP
// end ;
28777: PPOPN 2
28779: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28780: LD_EXP 64
28784: PUSH
28785: LD_EXP 109
28789: AND
28790: IFFALSE 28973
28792: GO 28794
28794: DISABLE
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28799: LD_ADDR_VAR 0 2
28803: PUSH
28804: LD_INT 22
28806: PUSH
28807: LD_OWVAR 2
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PPUSH
28816: CALL_OW 69
28820: ST_TO_ADDR
// if not tmp then
28821: LD_VAR 0 2
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28973
// for i := 1 to 2 do
28830: LD_ADDR_VAR 0 1
28834: PUSH
28835: DOUBLE
28836: LD_INT 1
28838: DEC
28839: ST_TO_ADDR
28840: LD_INT 2
28842: PUSH
28843: FOR_TO
28844: IFFALSE 28971
// begin uc_side := your_side ;
28846: LD_ADDR_OWVAR 20
28850: PUSH
28851: LD_OWVAR 2
28855: ST_TO_ADDR
// uc_nation := nation_american ;
28856: LD_ADDR_OWVAR 21
28860: PUSH
28861: LD_INT 1
28863: ST_TO_ADDR
// vc_chassis := us_morphling ;
28864: LD_ADDR_OWVAR 37
28868: PUSH
28869: LD_INT 5
28871: ST_TO_ADDR
// vc_engine := engine_siberite ;
28872: LD_ADDR_OWVAR 39
28876: PUSH
28877: LD_INT 3
28879: ST_TO_ADDR
// vc_control := control_computer ;
28880: LD_ADDR_OWVAR 38
28884: PUSH
28885: LD_INT 3
28887: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28888: LD_ADDR_OWVAR 40
28892: PUSH
28893: LD_INT 10
28895: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28896: LD_VAR 0 2
28900: PUSH
28901: LD_INT 1
28903: ARRAY
28904: PPUSH
28905: CALL_OW 310
28909: NOT
28910: IFFALSE 28957
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28912: CALL_OW 45
28916: PPUSH
28917: LD_VAR 0 2
28921: PUSH
28922: LD_INT 1
28924: ARRAY
28925: PPUSH
28926: CALL_OW 250
28930: PPUSH
28931: LD_VAR 0 2
28935: PUSH
28936: LD_INT 1
28938: ARRAY
28939: PPUSH
28940: CALL_OW 251
28944: PPUSH
28945: LD_INT 12
28947: PPUSH
28948: LD_INT 1
28950: PPUSH
28951: CALL_OW 50
28955: GO 28969
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28957: CALL_OW 45
28961: PPUSH
28962: LD_INT 1
28964: PPUSH
28965: CALL_OW 51
// end ;
28969: GO 28843
28971: POP
28972: POP
// end ;
28973: PPOPN 2
28975: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28976: LD_EXP 64
28980: PUSH
28981: LD_EXP 110
28985: AND
28986: IFFALSE 29208
28988: GO 28990
28990: DISABLE
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
28998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28999: LD_ADDR_VAR 0 6
29003: PUSH
29004: LD_INT 22
29006: PUSH
29007: LD_OWVAR 2
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 21
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 23
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: PPUSH
29048: CALL_OW 69
29052: ST_TO_ADDR
// if not tmp then
29053: LD_VAR 0 6
29057: NOT
29058: IFFALSE 29062
// exit ;
29060: GO 29208
// s1 := rand ( 1 , 4 ) ;
29062: LD_ADDR_VAR 0 2
29066: PUSH
29067: LD_INT 1
29069: PPUSH
29070: LD_INT 4
29072: PPUSH
29073: CALL_OW 12
29077: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29078: LD_ADDR_VAR 0 4
29082: PUSH
29083: LD_VAR 0 6
29087: PUSH
29088: LD_INT 1
29090: ARRAY
29091: PPUSH
29092: LD_VAR 0 2
29096: PPUSH
29097: CALL_OW 259
29101: ST_TO_ADDR
// if s1 = 1 then
29102: LD_VAR 0 2
29106: PUSH
29107: LD_INT 1
29109: EQUAL
29110: IFFALSE 29130
// s2 := rand ( 2 , 4 ) else
29112: LD_ADDR_VAR 0 3
29116: PUSH
29117: LD_INT 2
29119: PPUSH
29120: LD_INT 4
29122: PPUSH
29123: CALL_OW 12
29127: ST_TO_ADDR
29128: GO 29138
// s2 := 1 ;
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_INT 1
29137: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29138: LD_ADDR_VAR 0 5
29142: PUSH
29143: LD_VAR 0 6
29147: PUSH
29148: LD_INT 1
29150: ARRAY
29151: PPUSH
29152: LD_VAR 0 3
29156: PPUSH
29157: CALL_OW 259
29161: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29162: LD_VAR 0 6
29166: PUSH
29167: LD_INT 1
29169: ARRAY
29170: PPUSH
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_VAR 0 5
29180: PPUSH
29181: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29185: LD_VAR 0 6
29189: PUSH
29190: LD_INT 1
29192: ARRAY
29193: PPUSH
29194: LD_VAR 0 3
29198: PPUSH
29199: LD_VAR 0 4
29203: PPUSH
29204: CALL_OW 237
// end ;
29208: PPOPN 6
29210: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29211: LD_EXP 64
29215: PUSH
29216: LD_EXP 111
29220: AND
29221: IFFALSE 29300
29223: GO 29225
29225: DISABLE
29226: LD_INT 0
29228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29229: LD_ADDR_VAR 0 1
29233: PUSH
29234: LD_INT 22
29236: PUSH
29237: LD_OWVAR 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 30
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 69
29264: ST_TO_ADDR
// if not tmp then
29265: LD_VAR 0 1
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 29300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29274: LD_VAR 0 1
29278: PUSH
29279: LD_INT 1
29281: PPUSH
29282: LD_VAR 0 1
29286: PPUSH
29287: CALL_OW 12
29291: ARRAY
29292: PPUSH
29293: LD_INT 1
29295: PPUSH
29296: CALL_OW 234
// end ;
29300: PPOPN 1
29302: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29303: LD_EXP 64
29307: PUSH
29308: LD_EXP 112
29312: AND
29313: IFFALSE 29425
29315: GO 29317
29317: DISABLE
29318: LD_INT 0
29320: PPUSH
29321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29322: LD_ADDR_VAR 0 2
29326: PUSH
29327: LD_INT 22
29329: PUSH
29330: LD_OWVAR 2
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: LD_INT 30
29344: PUSH
29345: LD_INT 27
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 30
29354: PUSH
29355: LD_INT 26
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 30
29364: PUSH
29365: LD_INT 28
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PPUSH
29382: CALL_OW 69
29386: ST_TO_ADDR
// if not tmp then
29387: LD_VAR 0 2
29391: NOT
29392: IFFALSE 29396
// exit ;
29394: GO 29425
// for i in tmp do
29396: LD_ADDR_VAR 0 1
29400: PUSH
29401: LD_VAR 0 2
29405: PUSH
29406: FOR_IN
29407: IFFALSE 29423
// SetLives ( i , 1 ) ;
29409: LD_VAR 0 1
29413: PPUSH
29414: LD_INT 1
29416: PPUSH
29417: CALL_OW 234
29421: GO 29406
29423: POP
29424: POP
// end ;
29425: PPOPN 2
29427: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29428: LD_EXP 64
29432: PUSH
29433: LD_EXP 113
29437: AND
29438: IFFALSE 29712
29440: GO 29442
29442: DISABLE
29443: LD_INT 0
29445: PPUSH
29446: PPUSH
29447: PPUSH
// begin i := rand ( 1 , 7 ) ;
29448: LD_ADDR_VAR 0 1
29452: PUSH
29453: LD_INT 1
29455: PPUSH
29456: LD_INT 7
29458: PPUSH
29459: CALL_OW 12
29463: ST_TO_ADDR
// case i of 1 :
29464: LD_VAR 0 1
29468: PUSH
29469: LD_INT 1
29471: DOUBLE
29472: EQUAL
29473: IFTRUE 29477
29475: GO 29487
29477: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29478: LD_STRING earthquake(getX(game), 0, 32)
29480: PPUSH
29481: CALL_OW 559
29485: GO 29712
29487: LD_INT 2
29489: DOUBLE
29490: EQUAL
29491: IFTRUE 29495
29493: GO 29509
29495: POP
// begin ToLua ( displayStucuk(); ) ;
29496: LD_STRING displayStucuk();
29498: PPUSH
29499: CALL_OW 559
// ResetFog ;
29503: CALL_OW 335
// end ; 3 :
29507: GO 29712
29509: LD_INT 3
29511: DOUBLE
29512: EQUAL
29513: IFTRUE 29517
29515: GO 29621
29517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29518: LD_ADDR_VAR 0 2
29522: PUSH
29523: LD_INT 22
29525: PUSH
29526: LD_OWVAR 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 25
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PPUSH
29549: CALL_OW 69
29553: ST_TO_ADDR
// if not tmp then
29554: LD_VAR 0 2
29558: NOT
29559: IFFALSE 29563
// exit ;
29561: GO 29712
// un := tmp [ rand ( 1 , tmp ) ] ;
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_VAR 0 2
29572: PUSH
29573: LD_INT 1
29575: PPUSH
29576: LD_VAR 0 2
29580: PPUSH
29581: CALL_OW 12
29585: ARRAY
29586: ST_TO_ADDR
// if Crawls ( un ) then
29587: LD_VAR 0 3
29591: PPUSH
29592: CALL_OW 318
29596: IFFALSE 29607
// ComWalk ( un ) ;
29598: LD_VAR 0 3
29602: PPUSH
29603: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29607: LD_VAR 0 3
29611: PPUSH
29612: LD_INT 8
29614: PPUSH
29615: CALL_OW 336
// end ; 4 :
29619: GO 29712
29621: LD_INT 4
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29690
29629: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: LD_INT 22
29637: PUSH
29638: LD_OWVAR 2
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 30
29649: PUSH
29650: LD_INT 29
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PPUSH
29661: CALL_OW 69
29665: ST_TO_ADDR
// if not tmp then
29666: LD_VAR 0 2
29670: NOT
29671: IFFALSE 29675
// exit ;
29673: GO 29712
// DestroyUnit ( tmp [ 1 ] ) ;
29675: LD_VAR 0 2
29679: PUSH
29680: LD_INT 1
29682: ARRAY
29683: PPUSH
29684: CALL_OW 65
// end ; 5 .. 7 :
29688: GO 29712
29690: LD_INT 5
29692: DOUBLE
29693: GREATEREQUAL
29694: IFFALSE 29702
29696: LD_INT 7
29698: DOUBLE
29699: LESSEQUAL
29700: IFTRUE 29704
29702: GO 29711
29704: POP
// StreamSibBomb ; end ;
29705: CALL 25962 0 0
29709: GO 29712
29711: POP
// end ;
29712: PPOPN 3
29714: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29715: LD_EXP 64
29719: PUSH
29720: LD_EXP 114
29724: AND
29725: IFFALSE 29881
29727: GO 29729
29729: DISABLE
29730: LD_INT 0
29732: PPUSH
29733: PPUSH
29734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29735: LD_ADDR_VAR 0 2
29739: PUSH
29740: LD_INT 81
29742: PUSH
29743: LD_OWVAR 2
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: LD_INT 21
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 21
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PPUSH
29784: CALL_OW 69
29788: ST_TO_ADDR
// if not tmp then
29789: LD_VAR 0 2
29793: NOT
29794: IFFALSE 29798
// exit ;
29796: GO 29881
// p := 0 ;
29798: LD_ADDR_VAR 0 3
29802: PUSH
29803: LD_INT 0
29805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29806: LD_INT 35
29808: PPUSH
29809: CALL_OW 67
// p := p + 1 ;
29813: LD_ADDR_VAR 0 3
29817: PUSH
29818: LD_VAR 0 3
29822: PUSH
29823: LD_INT 1
29825: PLUS
29826: ST_TO_ADDR
// for i in tmp do
29827: LD_ADDR_VAR 0 1
29831: PUSH
29832: LD_VAR 0 2
29836: PUSH
29837: FOR_IN
29838: IFFALSE 29869
// if GetLives ( i ) < 1000 then
29840: LD_VAR 0 1
29844: PPUSH
29845: CALL_OW 256
29849: PUSH
29850: LD_INT 1000
29852: LESS
29853: IFFALSE 29867
// SetLives ( i , 1000 ) ;
29855: LD_VAR 0 1
29859: PPUSH
29860: LD_INT 1000
29862: PPUSH
29863: CALL_OW 234
29867: GO 29837
29869: POP
29870: POP
// until p > 20 ;
29871: LD_VAR 0 3
29875: PUSH
29876: LD_INT 20
29878: GREATER
29879: IFFALSE 29806
// end ;
29881: PPOPN 3
29883: END
// every 0 0$1 trigger StreamModeActive and sTime do
29884: LD_EXP 64
29888: PUSH
29889: LD_EXP 115
29893: AND
29894: IFFALSE 29929
29896: GO 29898
29898: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29899: LD_INT 28
29901: PPUSH
29902: LD_OWVAR 2
29906: PPUSH
29907: LD_INT 2
29909: PPUSH
29910: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29914: LD_INT 30
29916: PPUSH
29917: LD_OWVAR 2
29921: PPUSH
29922: LD_INT 2
29924: PPUSH
29925: CALL_OW 322
// end ;
29929: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29930: LD_EXP 64
29934: PUSH
29935: LD_EXP 116
29939: AND
29940: IFFALSE 30061
29942: GO 29944
29944: DISABLE
29945: LD_INT 0
29947: PPUSH
29948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29949: LD_ADDR_VAR 0 2
29953: PUSH
29954: LD_INT 22
29956: PUSH
29957: LD_OWVAR 2
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 21
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: LD_INT 23
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: PPUSH
29998: CALL_OW 69
30002: ST_TO_ADDR
// if not tmp then
30003: LD_VAR 0 2
30007: NOT
30008: IFFALSE 30012
// exit ;
30010: GO 30061
// for i in tmp do
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: LD_VAR 0 2
30021: PUSH
30022: FOR_IN
30023: IFFALSE 30059
// begin if Crawls ( i ) then
30025: LD_VAR 0 1
30029: PPUSH
30030: CALL_OW 318
30034: IFFALSE 30045
// ComWalk ( i ) ;
30036: LD_VAR 0 1
30040: PPUSH
30041: CALL_OW 138
// SetClass ( i , 2 ) ;
30045: LD_VAR 0 1
30049: PPUSH
30050: LD_INT 2
30052: PPUSH
30053: CALL_OW 336
// end ;
30057: GO 30022
30059: POP
30060: POP
// end ;
30061: PPOPN 2
30063: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30064: LD_EXP 64
30068: PUSH
30069: LD_EXP 117
30073: AND
30074: IFFALSE 30355
30076: GO 30078
30078: DISABLE
30079: LD_INT 0
30081: PPUSH
30082: PPUSH
30083: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30084: LD_OWVAR 2
30088: PPUSH
30089: LD_INT 9
30091: PPUSH
30092: LD_INT 1
30094: PPUSH
30095: LD_INT 1
30097: PPUSH
30098: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30102: LD_INT 9
30104: PPUSH
30105: LD_OWVAR 2
30109: PPUSH
30110: CALL_OW 343
// uc_side := 9 ;
30114: LD_ADDR_OWVAR 20
30118: PUSH
30119: LD_INT 9
30121: ST_TO_ADDR
// uc_nation := 2 ;
30122: LD_ADDR_OWVAR 21
30126: PUSH
30127: LD_INT 2
30129: ST_TO_ADDR
// hc_name := Dark Warrior ;
30130: LD_ADDR_OWVAR 26
30134: PUSH
30135: LD_STRING Dark Warrior
30137: ST_TO_ADDR
// hc_gallery :=  ;
30138: LD_ADDR_OWVAR 33
30142: PUSH
30143: LD_STRING 
30145: ST_TO_ADDR
// hc_noskilllimit := true ;
30146: LD_ADDR_OWVAR 76
30150: PUSH
30151: LD_INT 1
30153: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30154: LD_ADDR_OWVAR 31
30158: PUSH
30159: LD_INT 30
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: LD_INT 30
30167: PUSH
30168: LD_INT 30
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: ST_TO_ADDR
// un := CreateHuman ;
30177: LD_ADDR_VAR 0 3
30181: PUSH
30182: CALL_OW 44
30186: ST_TO_ADDR
// hc_noskilllimit := false ;
30187: LD_ADDR_OWVAR 76
30191: PUSH
30192: LD_INT 0
30194: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30195: LD_VAR 0 3
30199: PPUSH
30200: LD_INT 1
30202: PPUSH
30203: CALL_OW 51
// p := 0 ;
30207: LD_ADDR_VAR 0 2
30211: PUSH
30212: LD_INT 0
30214: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30215: LD_INT 35
30217: PPUSH
30218: CALL_OW 67
// p := p + 1 ;
30222: LD_ADDR_VAR 0 2
30226: PUSH
30227: LD_VAR 0 2
30231: PUSH
30232: LD_INT 1
30234: PLUS
30235: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30236: LD_VAR 0 3
30240: PPUSH
30241: CALL_OW 256
30245: PUSH
30246: LD_INT 1000
30248: LESS
30249: IFFALSE 30263
// SetLives ( un , 1000 ) ;
30251: LD_VAR 0 3
30255: PPUSH
30256: LD_INT 1000
30258: PPUSH
30259: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30263: LD_VAR 0 3
30267: PPUSH
30268: LD_INT 81
30270: PUSH
30271: LD_OWVAR 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 91
30282: PUSH
30283: LD_VAR 0 3
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PPUSH
30300: CALL_OW 69
30304: PPUSH
30305: LD_VAR 0 3
30309: PPUSH
30310: CALL_OW 74
30314: PPUSH
30315: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30319: LD_VAR 0 2
30323: PUSH
30324: LD_INT 60
30326: GREATER
30327: PUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: CALL_OW 301
30337: OR
30338: IFFALSE 30215
// if un then
30340: LD_VAR 0 3
30344: IFFALSE 30355
// RemoveUnit ( un ) ;
30346: LD_VAR 0 3
30350: PPUSH
30351: CALL_OW 64
// end ;
30355: PPOPN 3
30357: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30358: LD_INT 0
30360: PPUSH
// case cmd of 301 :
30361: LD_VAR 0 1
30365: PUSH
30366: LD_INT 301
30368: DOUBLE
30369: EQUAL
30370: IFTRUE 30374
30372: GO 30406
30374: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30375: LD_VAR 0 6
30379: PPUSH
30380: LD_VAR 0 7
30384: PPUSH
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 4
30394: PPUSH
30395: LD_VAR 0 5
30399: PPUSH
30400: CALL 31607 0 5
30404: GO 30527
30406: LD_INT 302
30408: DOUBLE
30409: EQUAL
30410: IFTRUE 30414
30412: GO 30451
30414: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30415: LD_VAR 0 6
30419: PPUSH
30420: LD_VAR 0 7
30424: PPUSH
30425: LD_VAR 0 8
30429: PPUSH
30430: LD_VAR 0 9
30434: PPUSH
30435: LD_VAR 0 4
30439: PPUSH
30440: LD_VAR 0 5
30444: PPUSH
30445: CALL 31698 0 6
30449: GO 30527
30451: LD_INT 303
30453: DOUBLE
30454: EQUAL
30455: IFTRUE 30459
30457: GO 30496
30459: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30460: LD_VAR 0 6
30464: PPUSH
30465: LD_VAR 0 7
30469: PPUSH
30470: LD_VAR 0 8
30474: PPUSH
30475: LD_VAR 0 9
30479: PPUSH
30480: LD_VAR 0 4
30484: PPUSH
30485: LD_VAR 0 5
30489: PPUSH
30490: CALL 30532 0 6
30494: GO 30527
30496: LD_INT 304
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30526
30504: POP
// hHackTeleport ( unit , x , y ) ; end ;
30505: LD_VAR 0 2
30509: PPUSH
30510: LD_VAR 0 4
30514: PPUSH
30515: LD_VAR 0 5
30519: PPUSH
30520: CALL 32291 0 3
30524: GO 30527
30526: POP
// end ;
30527: LD_VAR 0 12
30531: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30532: LD_INT 0
30534: PPUSH
30535: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30536: LD_VAR 0 1
30540: PUSH
30541: LD_INT 1
30543: LESS
30544: PUSH
30545: LD_VAR 0 1
30549: PUSH
30550: LD_INT 3
30552: GREATER
30553: OR
30554: PUSH
30555: LD_VAR 0 5
30559: PPUSH
30560: LD_VAR 0 6
30564: PPUSH
30565: CALL_OW 428
30569: OR
30570: IFFALSE 30574
// exit ;
30572: GO 31294
// uc_side := your_side ;
30574: LD_ADDR_OWVAR 20
30578: PUSH
30579: LD_OWVAR 2
30583: ST_TO_ADDR
// uc_nation := nation ;
30584: LD_ADDR_OWVAR 21
30588: PUSH
30589: LD_VAR 0 1
30593: ST_TO_ADDR
// bc_level = 1 ;
30594: LD_ADDR_OWVAR 43
30598: PUSH
30599: LD_INT 1
30601: ST_TO_ADDR
// case btype of 1 :
30602: LD_VAR 0 2
30606: PUSH
30607: LD_INT 1
30609: DOUBLE
30610: EQUAL
30611: IFTRUE 30615
30613: GO 30626
30615: POP
// bc_type := b_depot ; 2 :
30616: LD_ADDR_OWVAR 42
30620: PUSH
30621: LD_INT 0
30623: ST_TO_ADDR
30624: GO 31238
30626: LD_INT 2
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 30645
30634: POP
// bc_type := b_warehouse ; 3 :
30635: LD_ADDR_OWVAR 42
30639: PUSH
30640: LD_INT 1
30642: ST_TO_ADDR
30643: GO 31238
30645: LD_INT 3
30647: DOUBLE
30648: EQUAL
30649: IFTRUE 30653
30651: GO 30664
30653: POP
// bc_type := b_lab ; 4 .. 9 :
30654: LD_ADDR_OWVAR 42
30658: PUSH
30659: LD_INT 6
30661: ST_TO_ADDR
30662: GO 31238
30664: LD_INT 4
30666: DOUBLE
30667: GREATEREQUAL
30668: IFFALSE 30676
30670: LD_INT 9
30672: DOUBLE
30673: LESSEQUAL
30674: IFTRUE 30678
30676: GO 30730
30678: POP
// begin bc_type := b_lab_half ;
30679: LD_ADDR_OWVAR 42
30683: PUSH
30684: LD_INT 7
30686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30687: LD_ADDR_OWVAR 44
30691: PUSH
30692: LD_INT 10
30694: PUSH
30695: LD_INT 11
30697: PUSH
30698: LD_INT 12
30700: PUSH
30701: LD_INT 15
30703: PUSH
30704: LD_INT 14
30706: PUSH
30707: LD_INT 13
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: PUSH
30718: LD_VAR 0 2
30722: PUSH
30723: LD_INT 3
30725: MINUS
30726: ARRAY
30727: ST_TO_ADDR
// end ; 10 .. 13 :
30728: GO 31238
30730: LD_INT 10
30732: DOUBLE
30733: GREATEREQUAL
30734: IFFALSE 30742
30736: LD_INT 13
30738: DOUBLE
30739: LESSEQUAL
30740: IFTRUE 30744
30742: GO 30821
30744: POP
// begin bc_type := b_lab_full ;
30745: LD_ADDR_OWVAR 42
30749: PUSH
30750: LD_INT 8
30752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30753: LD_ADDR_OWVAR 44
30757: PUSH
30758: LD_INT 10
30760: PUSH
30761: LD_INT 12
30763: PUSH
30764: LD_INT 14
30766: PUSH
30767: LD_INT 13
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: PUSH
30776: LD_VAR 0 2
30780: PUSH
30781: LD_INT 9
30783: MINUS
30784: ARRAY
30785: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30786: LD_ADDR_OWVAR 45
30790: PUSH
30791: LD_INT 11
30793: PUSH
30794: LD_INT 15
30796: PUSH
30797: LD_INT 12
30799: PUSH
30800: LD_INT 15
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: PUSH
30809: LD_VAR 0 2
30813: PUSH
30814: LD_INT 9
30816: MINUS
30817: ARRAY
30818: ST_TO_ADDR
// end ; 14 :
30819: GO 31238
30821: LD_INT 14
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30840
30829: POP
// bc_type := b_workshop ; 15 :
30830: LD_ADDR_OWVAR 42
30834: PUSH
30835: LD_INT 2
30837: ST_TO_ADDR
30838: GO 31238
30840: LD_INT 15
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30859
30848: POP
// bc_type := b_factory ; 16 :
30849: LD_ADDR_OWVAR 42
30853: PUSH
30854: LD_INT 3
30856: ST_TO_ADDR
30857: GO 31238
30859: LD_INT 16
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30878
30867: POP
// bc_type := b_ext_gun ; 17 :
30868: LD_ADDR_OWVAR 42
30872: PUSH
30873: LD_INT 17
30875: ST_TO_ADDR
30876: GO 31238
30878: LD_INT 17
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 30914
30886: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30887: LD_ADDR_OWVAR 42
30891: PUSH
30892: LD_INT 19
30894: PUSH
30895: LD_INT 23
30897: PUSH
30898: LD_INT 19
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: LD_VAR 0 1
30910: ARRAY
30911: ST_TO_ADDR
30912: GO 31238
30914: LD_INT 18
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30933
30922: POP
// bc_type := b_ext_radar ; 19 :
30923: LD_ADDR_OWVAR 42
30927: PUSH
30928: LD_INT 20
30930: ST_TO_ADDR
30931: GO 31238
30933: LD_INT 19
30935: DOUBLE
30936: EQUAL
30937: IFTRUE 30941
30939: GO 30952
30941: POP
// bc_type := b_ext_radio ; 20 :
30942: LD_ADDR_OWVAR 42
30946: PUSH
30947: LD_INT 22
30949: ST_TO_ADDR
30950: GO 31238
30952: LD_INT 20
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30971
30960: POP
// bc_type := b_ext_siberium ; 21 :
30961: LD_ADDR_OWVAR 42
30965: PUSH
30966: LD_INT 21
30968: ST_TO_ADDR
30969: GO 31238
30971: LD_INT 21
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 30990
30979: POP
// bc_type := b_ext_computer ; 22 :
30980: LD_ADDR_OWVAR 42
30984: PUSH
30985: LD_INT 24
30987: ST_TO_ADDR
30988: GO 31238
30990: LD_INT 22
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31009
30998: POP
// bc_type := b_ext_track ; 23 :
30999: LD_ADDR_OWVAR 42
31003: PUSH
31004: LD_INT 16
31006: ST_TO_ADDR
31007: GO 31238
31009: LD_INT 23
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31028
31017: POP
// bc_type := b_ext_laser ; 24 :
31018: LD_ADDR_OWVAR 42
31022: PUSH
31023: LD_INT 25
31025: ST_TO_ADDR
31026: GO 31238
31028: LD_INT 24
31030: DOUBLE
31031: EQUAL
31032: IFTRUE 31036
31034: GO 31047
31036: POP
// bc_type := b_control_tower ; 25 :
31037: LD_ADDR_OWVAR 42
31041: PUSH
31042: LD_INT 36
31044: ST_TO_ADDR
31045: GO 31238
31047: LD_INT 25
31049: DOUBLE
31050: EQUAL
31051: IFTRUE 31055
31053: GO 31066
31055: POP
// bc_type := b_breastwork ; 26 :
31056: LD_ADDR_OWVAR 42
31060: PUSH
31061: LD_INT 31
31063: ST_TO_ADDR
31064: GO 31238
31066: LD_INT 26
31068: DOUBLE
31069: EQUAL
31070: IFTRUE 31074
31072: GO 31085
31074: POP
// bc_type := b_bunker ; 27 :
31075: LD_ADDR_OWVAR 42
31079: PUSH
31080: LD_INT 32
31082: ST_TO_ADDR
31083: GO 31238
31085: LD_INT 27
31087: DOUBLE
31088: EQUAL
31089: IFTRUE 31093
31091: GO 31104
31093: POP
// bc_type := b_turret ; 28 :
31094: LD_ADDR_OWVAR 42
31098: PUSH
31099: LD_INT 33
31101: ST_TO_ADDR
31102: GO 31238
31104: LD_INT 28
31106: DOUBLE
31107: EQUAL
31108: IFTRUE 31112
31110: GO 31123
31112: POP
// bc_type := b_armoury ; 29 :
31113: LD_ADDR_OWVAR 42
31117: PUSH
31118: LD_INT 4
31120: ST_TO_ADDR
31121: GO 31238
31123: LD_INT 29
31125: DOUBLE
31126: EQUAL
31127: IFTRUE 31131
31129: GO 31142
31131: POP
// bc_type := b_barracks ; 30 :
31132: LD_ADDR_OWVAR 42
31136: PUSH
31137: LD_INT 5
31139: ST_TO_ADDR
31140: GO 31238
31142: LD_INT 30
31144: DOUBLE
31145: EQUAL
31146: IFTRUE 31150
31148: GO 31161
31150: POP
// bc_type := b_solar_power ; 31 :
31151: LD_ADDR_OWVAR 42
31155: PUSH
31156: LD_INT 27
31158: ST_TO_ADDR
31159: GO 31238
31161: LD_INT 31
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31180
31169: POP
// bc_type := b_oil_power ; 32 :
31170: LD_ADDR_OWVAR 42
31174: PUSH
31175: LD_INT 26
31177: ST_TO_ADDR
31178: GO 31238
31180: LD_INT 32
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31199
31188: POP
// bc_type := b_siberite_power ; 33 :
31189: LD_ADDR_OWVAR 42
31193: PUSH
31194: LD_INT 28
31196: ST_TO_ADDR
31197: GO 31238
31199: LD_INT 33
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31218
31207: POP
// bc_type := b_oil_mine ; 34 :
31208: LD_ADDR_OWVAR 42
31212: PUSH
31213: LD_INT 29
31215: ST_TO_ADDR
31216: GO 31238
31218: LD_INT 34
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31237
31226: POP
// bc_type := b_siberite_mine ; end ;
31227: LD_ADDR_OWVAR 42
31231: PUSH
31232: LD_INT 30
31234: ST_TO_ADDR
31235: GO 31238
31237: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31238: LD_ADDR_VAR 0 8
31242: PUSH
31243: LD_VAR 0 5
31247: PPUSH
31248: LD_VAR 0 6
31252: PPUSH
31253: LD_VAR 0 3
31257: PPUSH
31258: CALL_OW 47
31262: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31263: LD_OWVAR 42
31267: PUSH
31268: LD_INT 32
31270: PUSH
31271: LD_INT 33
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: IN
31278: IFFALSE 31294
// PlaceWeaponTurret ( b , weapon ) ;
31280: LD_VAR 0 8
31284: PPUSH
31285: LD_VAR 0 4
31289: PPUSH
31290: CALL_OW 431
// end ;
31294: LD_VAR 0 7
31298: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31299: LD_INT 0
31301: PPUSH
31302: PPUSH
31303: PPUSH
31304: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31305: LD_ADDR_VAR 0 4
31309: PUSH
31310: LD_INT 22
31312: PUSH
31313: LD_OWVAR 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: LD_INT 30
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 30
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PPUSH
31354: CALL_OW 69
31358: ST_TO_ADDR
// if not tmp then
31359: LD_VAR 0 4
31363: NOT
31364: IFFALSE 31368
// exit ;
31366: GO 31427
// for i in tmp do
31368: LD_ADDR_VAR 0 2
31372: PUSH
31373: LD_VAR 0 4
31377: PUSH
31378: FOR_IN
31379: IFFALSE 31425
// for j = 1 to 3 do
31381: LD_ADDR_VAR 0 3
31385: PUSH
31386: DOUBLE
31387: LD_INT 1
31389: DEC
31390: ST_TO_ADDR
31391: LD_INT 3
31393: PUSH
31394: FOR_TO
31395: IFFALSE 31421
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31397: LD_VAR 0 2
31401: PPUSH
31402: CALL_OW 274
31406: PPUSH
31407: LD_VAR 0 3
31411: PPUSH
31412: LD_INT 99999
31414: PPUSH
31415: CALL_OW 277
31419: GO 31394
31421: POP
31422: POP
31423: GO 31378
31425: POP
31426: POP
// end ;
31427: LD_VAR 0 1
31431: RET
// export function hHackSetLevel10 ; var i , j ; begin
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
31436: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31437: LD_ADDR_VAR 0 2
31441: PUSH
31442: LD_INT 21
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PPUSH
31452: CALL_OW 69
31456: PUSH
31457: FOR_IN
31458: IFFALSE 31510
// if IsSelected ( i ) then
31460: LD_VAR 0 2
31464: PPUSH
31465: CALL_OW 306
31469: IFFALSE 31508
// begin for j := 1 to 4 do
31471: LD_ADDR_VAR 0 3
31475: PUSH
31476: DOUBLE
31477: LD_INT 1
31479: DEC
31480: ST_TO_ADDR
31481: LD_INT 4
31483: PUSH
31484: FOR_TO
31485: IFFALSE 31506
// SetSkill ( i , j , 10 ) ;
31487: LD_VAR 0 2
31491: PPUSH
31492: LD_VAR 0 3
31496: PPUSH
31497: LD_INT 10
31499: PPUSH
31500: CALL_OW 237
31504: GO 31484
31506: POP
31507: POP
// end ;
31508: GO 31457
31510: POP
31511: POP
// end ;
31512: LD_VAR 0 1
31516: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31517: LD_INT 0
31519: PPUSH
31520: PPUSH
31521: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31522: LD_ADDR_VAR 0 2
31526: PUSH
31527: LD_INT 22
31529: PUSH
31530: LD_OWVAR 2
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 21
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PPUSH
31553: CALL_OW 69
31557: PUSH
31558: FOR_IN
31559: IFFALSE 31600
// begin for j := 1 to 4 do
31561: LD_ADDR_VAR 0 3
31565: PUSH
31566: DOUBLE
31567: LD_INT 1
31569: DEC
31570: ST_TO_ADDR
31571: LD_INT 4
31573: PUSH
31574: FOR_TO
31575: IFFALSE 31596
// SetSkill ( i , j , 10 ) ;
31577: LD_VAR 0 2
31581: PPUSH
31582: LD_VAR 0 3
31586: PPUSH
31587: LD_INT 10
31589: PPUSH
31590: CALL_OW 237
31594: GO 31574
31596: POP
31597: POP
// end ;
31598: GO 31558
31600: POP
31601: POP
// end ;
31602: LD_VAR 0 1
31606: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31607: LD_INT 0
31609: PPUSH
// uc_side := your_side ;
31610: LD_ADDR_OWVAR 20
31614: PUSH
31615: LD_OWVAR 2
31619: ST_TO_ADDR
// uc_nation := nation ;
31620: LD_ADDR_OWVAR 21
31624: PUSH
31625: LD_VAR 0 1
31629: ST_TO_ADDR
// InitHc ;
31630: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31634: LD_INT 0
31636: PPUSH
31637: LD_VAR 0 2
31641: PPUSH
31642: LD_VAR 0 3
31646: PPUSH
31647: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31651: LD_VAR 0 4
31655: PPUSH
31656: LD_VAR 0 5
31660: PPUSH
31661: CALL_OW 428
31665: PUSH
31666: LD_INT 0
31668: EQUAL
31669: IFFALSE 31693
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31671: CALL_OW 44
31675: PPUSH
31676: LD_VAR 0 4
31680: PPUSH
31681: LD_VAR 0 5
31685: PPUSH
31686: LD_INT 1
31688: PPUSH
31689: CALL_OW 48
// end ;
31693: LD_VAR 0 6
31697: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
// uc_side := your_side ;
31702: LD_ADDR_OWVAR 20
31706: PUSH
31707: LD_OWVAR 2
31711: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31712: LD_VAR 0 1
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: IN
31739: IFFALSE 31751
// uc_nation := nation_american else
31741: LD_ADDR_OWVAR 21
31745: PUSH
31746: LD_INT 1
31748: ST_TO_ADDR
31749: GO 31794
// if chassis in [ 11 , 12 , 13 , 14 ] then
31751: LD_VAR 0 1
31755: PUSH
31756: LD_INT 11
31758: PUSH
31759: LD_INT 12
31761: PUSH
31762: LD_INT 13
31764: PUSH
31765: LD_INT 14
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: IN
31774: IFFALSE 31786
// uc_nation := nation_arabian else
31776: LD_ADDR_OWVAR 21
31780: PUSH
31781: LD_INT 2
31783: ST_TO_ADDR
31784: GO 31794
// uc_nation := nation_russian ;
31786: LD_ADDR_OWVAR 21
31790: PUSH
31791: LD_INT 3
31793: ST_TO_ADDR
// vc_chassis := chassis ;
31794: LD_ADDR_OWVAR 37
31798: PUSH
31799: LD_VAR 0 1
31803: ST_TO_ADDR
// vc_engine := engine ;
31804: LD_ADDR_OWVAR 39
31808: PUSH
31809: LD_VAR 0 2
31813: ST_TO_ADDR
// vc_control := control ;
31814: LD_ADDR_OWVAR 38
31818: PUSH
31819: LD_VAR 0 3
31823: ST_TO_ADDR
// vc_weapon := weapon ;
31824: LD_ADDR_OWVAR 40
31828: PUSH
31829: LD_VAR 0 4
31833: ST_TO_ADDR
// un := CreateVehicle ;
31834: LD_ADDR_VAR 0 8
31838: PUSH
31839: CALL_OW 45
31843: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31844: LD_VAR 0 8
31848: PPUSH
31849: LD_INT 0
31851: PPUSH
31852: LD_INT 5
31854: PPUSH
31855: CALL_OW 12
31859: PPUSH
31860: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31864: LD_VAR 0 8
31868: PPUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: LD_VAR 0 6
31878: PPUSH
31879: LD_INT 1
31881: PPUSH
31882: CALL_OW 48
// end ;
31886: LD_VAR 0 7
31890: RET
// export hInvincible ; every 1 do
31891: GO 31893
31893: DISABLE
// hInvincible := [ ] ;
31894: LD_ADDR_EXP 118
31898: PUSH
31899: EMPTY
31900: ST_TO_ADDR
31901: END
// every 10 do var i ;
31902: GO 31904
31904: DISABLE
31905: LD_INT 0
31907: PPUSH
// begin enable ;
31908: ENABLE
// if not hInvincible then
31909: LD_EXP 118
31913: NOT
31914: IFFALSE 31918
// exit ;
31916: GO 31962
// for i in hInvincible do
31918: LD_ADDR_VAR 0 1
31922: PUSH
31923: LD_EXP 118
31927: PUSH
31928: FOR_IN
31929: IFFALSE 31960
// if GetLives ( i ) < 1000 then
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 256
31940: PUSH
31941: LD_INT 1000
31943: LESS
31944: IFFALSE 31958
// SetLives ( i , 1000 ) ;
31946: LD_VAR 0 1
31950: PPUSH
31951: LD_INT 1000
31953: PPUSH
31954: CALL_OW 234
31958: GO 31928
31960: POP
31961: POP
// end ;
31962: PPOPN 1
31964: END
// export function hHackInvincible ; var i ; begin
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31969: LD_ADDR_VAR 0 2
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: LD_INT 21
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 21
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: PPUSH
32002: CALL_OW 69
32006: PUSH
32007: FOR_IN
32008: IFFALSE 32069
// if IsSelected ( i ) then
32010: LD_VAR 0 2
32014: PPUSH
32015: CALL_OW 306
32019: IFFALSE 32067
// begin if i in hInvincible then
32021: LD_VAR 0 2
32025: PUSH
32026: LD_EXP 118
32030: IN
32031: IFFALSE 32051
// hInvincible := hInvincible diff i else
32033: LD_ADDR_EXP 118
32037: PUSH
32038: LD_EXP 118
32042: PUSH
32043: LD_VAR 0 2
32047: DIFF
32048: ST_TO_ADDR
32049: GO 32067
// hInvincible := hInvincible union i ;
32051: LD_ADDR_EXP 118
32055: PUSH
32056: LD_EXP 118
32060: PUSH
32061: LD_VAR 0 2
32065: UNION
32066: ST_TO_ADDR
// end ;
32067: GO 32007
32069: POP
32070: POP
// end ;
32071: LD_VAR 0 1
32075: RET
// export function hHackInvisible ; var i , j ; begin
32076: LD_INT 0
32078: PPUSH
32079: PPUSH
32080: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32081: LD_ADDR_VAR 0 2
32085: PUSH
32086: LD_INT 21
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PPUSH
32096: CALL_OW 69
32100: PUSH
32101: FOR_IN
32102: IFFALSE 32126
// if IsSelected ( i ) then
32104: LD_VAR 0 2
32108: PPUSH
32109: CALL_OW 306
32113: IFFALSE 32124
// ComForceInvisible ( i ) ;
32115: LD_VAR 0 2
32119: PPUSH
32120: CALL_OW 496
32124: GO 32101
32126: POP
32127: POP
// end ;
32128: LD_VAR 0 1
32132: RET
// export function hHackChangeYourSide ; begin
32133: LD_INT 0
32135: PPUSH
// if your_side = 8 then
32136: LD_OWVAR 2
32140: PUSH
32141: LD_INT 8
32143: EQUAL
32144: IFFALSE 32156
// your_side := 0 else
32146: LD_ADDR_OWVAR 2
32150: PUSH
32151: LD_INT 0
32153: ST_TO_ADDR
32154: GO 32170
// your_side := your_side + 1 ;
32156: LD_ADDR_OWVAR 2
32160: PUSH
32161: LD_OWVAR 2
32165: PUSH
32166: LD_INT 1
32168: PLUS
32169: ST_TO_ADDR
// end ;
32170: LD_VAR 0 1
32174: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32175: LD_INT 0
32177: PPUSH
32178: PPUSH
32179: PPUSH
// for i in all_units do
32180: LD_ADDR_VAR 0 2
32184: PUSH
32185: LD_OWVAR 3
32189: PUSH
32190: FOR_IN
32191: IFFALSE 32269
// if IsSelected ( i ) then
32193: LD_VAR 0 2
32197: PPUSH
32198: CALL_OW 306
32202: IFFALSE 32267
// begin j := GetSide ( i ) ;
32204: LD_ADDR_VAR 0 3
32208: PUSH
32209: LD_VAR 0 2
32213: PPUSH
32214: CALL_OW 255
32218: ST_TO_ADDR
// if j = 8 then
32219: LD_VAR 0 3
32223: PUSH
32224: LD_INT 8
32226: EQUAL
32227: IFFALSE 32239
// j := 0 else
32229: LD_ADDR_VAR 0 3
32233: PUSH
32234: LD_INT 0
32236: ST_TO_ADDR
32237: GO 32253
// j := j + 1 ;
32239: LD_ADDR_VAR 0 3
32243: PUSH
32244: LD_VAR 0 3
32248: PUSH
32249: LD_INT 1
32251: PLUS
32252: ST_TO_ADDR
// SetSide ( i , j ) ;
32253: LD_VAR 0 2
32257: PPUSH
32258: LD_VAR 0 3
32262: PPUSH
32263: CALL_OW 235
// end ;
32267: GO 32190
32269: POP
32270: POP
// end ;
32271: LD_VAR 0 1
32275: RET
// export function hHackFog ; begin
32276: LD_INT 0
32278: PPUSH
// FogOff ( true ) ;
32279: LD_INT 1
32281: PPUSH
32282: CALL_OW 344
// end ;
32286: LD_VAR 0 1
32290: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32291: LD_INT 0
32293: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32294: LD_VAR 0 1
32298: PPUSH
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_VAR 0 3
32308: PPUSH
32309: LD_INT 1
32311: PPUSH
32312: LD_INT 1
32314: PPUSH
32315: CALL_OW 483
// CenterOnXY ( x , y ) ;
32319: LD_VAR 0 2
32323: PPUSH
32324: LD_VAR 0 3
32328: PPUSH
32329: CALL_OW 84
// end ; end_of_file
32333: LD_VAR 0 4
32337: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32338: LD_INT 0
32340: PPUSH
32341: PPUSH
32342: PPUSH
32343: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32344: LD_VAR 0 1
32348: PPUSH
32349: CALL_OW 264
32353: PUSH
32354: LD_EXP 52
32358: EQUAL
32359: IFFALSE 32431
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32361: LD_INT 68
32363: PPUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 255
32373: PPUSH
32374: CALL_OW 321
32378: PUSH
32379: LD_INT 2
32381: EQUAL
32382: IFFALSE 32394
// eff := 70 else
32384: LD_ADDR_VAR 0 4
32388: PUSH
32389: LD_INT 70
32391: ST_TO_ADDR
32392: GO 32402
// eff := 30 ;
32394: LD_ADDR_VAR 0 4
32398: PUSH
32399: LD_INT 30
32401: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL_OW 250
32411: PPUSH
32412: LD_VAR 0 1
32416: PPUSH
32417: CALL_OW 251
32421: PPUSH
32422: LD_VAR 0 4
32426: PPUSH
32427: CALL_OW 495
// end ; end ;
32431: LD_VAR 0 2
32435: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32436: LD_INT 0
32438: PPUSH
// end ;
32439: LD_VAR 0 4
32443: RET
// export function SOS_Command ( cmd ) ; begin
32444: LD_INT 0
32446: PPUSH
// end ;
32447: LD_VAR 0 2
32451: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32452: LD_INT 0
32454: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32455: LD_VAR 0 1
32459: PUSH
32460: LD_INT 250
32462: EQUAL
32463: PUSH
32464: LD_VAR 0 2
32468: PPUSH
32469: CALL_OW 264
32473: PUSH
32474: LD_EXP 55
32478: EQUAL
32479: AND
32480: IFFALSE 32501
// MinerPlaceMine ( unit , x , y ) ;
32482: LD_VAR 0 2
32486: PPUSH
32487: LD_VAR 0 4
32491: PPUSH
32492: LD_VAR 0 5
32496: PPUSH
32497: CALL 34842 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32501: LD_VAR 0 1
32505: PUSH
32506: LD_INT 251
32508: EQUAL
32509: PUSH
32510: LD_VAR 0 2
32514: PPUSH
32515: CALL_OW 264
32519: PUSH
32520: LD_EXP 55
32524: EQUAL
32525: AND
32526: IFFALSE 32547
// MinerDetonateMine ( unit , x , y ) ;
32528: LD_VAR 0 2
32532: PPUSH
32533: LD_VAR 0 4
32537: PPUSH
32538: LD_VAR 0 5
32542: PPUSH
32543: CALL 35119 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32547: LD_VAR 0 1
32551: PUSH
32552: LD_INT 252
32554: EQUAL
32555: PUSH
32556: LD_VAR 0 2
32560: PPUSH
32561: CALL_OW 264
32565: PUSH
32566: LD_EXP 55
32570: EQUAL
32571: AND
32572: IFFALSE 32593
// MinerCreateMinefield ( unit , x , y ) ;
32574: LD_VAR 0 2
32578: PPUSH
32579: LD_VAR 0 4
32583: PPUSH
32584: LD_VAR 0 5
32588: PPUSH
32589: CALL 35536 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32593: LD_VAR 0 1
32597: PUSH
32598: LD_INT 253
32600: EQUAL
32601: PUSH
32602: LD_VAR 0 2
32606: PPUSH
32607: CALL_OW 257
32611: PUSH
32612: LD_INT 5
32614: EQUAL
32615: AND
32616: IFFALSE 32637
// ComBinocular ( unit , x , y ) ;
32618: LD_VAR 0 2
32622: PPUSH
32623: LD_VAR 0 4
32627: PPUSH
32628: LD_VAR 0 5
32632: PPUSH
32633: CALL 35907 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32637: LD_VAR 0 1
32641: PUSH
32642: LD_INT 254
32644: EQUAL
32645: PUSH
32646: LD_VAR 0 2
32650: PPUSH
32651: CALL_OW 264
32655: PUSH
32656: LD_EXP 50
32660: EQUAL
32661: AND
32662: PUSH
32663: LD_VAR 0 3
32667: PPUSH
32668: CALL_OW 263
32672: PUSH
32673: LD_INT 3
32675: EQUAL
32676: AND
32677: IFFALSE 32693
// HackDestroyVehicle ( unit , selectedUnit ) ;
32679: LD_VAR 0 2
32683: PPUSH
32684: LD_VAR 0 3
32688: PPUSH
32689: CALL 34202 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32693: LD_VAR 0 1
32697: PUSH
32698: LD_INT 255
32700: EQUAL
32701: PUSH
32702: LD_VAR 0 2
32706: PPUSH
32707: CALL_OW 264
32711: PUSH
32712: LD_INT 14
32714: PUSH
32715: LD_INT 53
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: IN
32722: AND
32723: PUSH
32724: LD_VAR 0 4
32728: PPUSH
32729: LD_VAR 0 5
32733: PPUSH
32734: CALL_OW 488
32738: AND
32739: IFFALSE 32763
// CutTreeXYR ( unit , x , y , 12 ) ;
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 4
32750: PPUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: LD_INT 12
32758: PPUSH
32759: CALL 32768 0 4
// end ;
32763: LD_VAR 0 6
32767: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32768: LD_INT 0
32770: PPUSH
32771: PPUSH
32772: PPUSH
32773: PPUSH
32774: PPUSH
32775: PPUSH
32776: PPUSH
32777: PPUSH
32778: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32779: LD_VAR 0 1
32783: NOT
32784: PUSH
32785: LD_VAR 0 2
32789: PPUSH
32790: LD_VAR 0 3
32794: PPUSH
32795: CALL_OW 488
32799: NOT
32800: OR
32801: PUSH
32802: LD_VAR 0 4
32806: NOT
32807: OR
32808: IFFALSE 32812
// exit ;
32810: GO 33152
// list := [ ] ;
32812: LD_ADDR_VAR 0 13
32816: PUSH
32817: EMPTY
32818: ST_TO_ADDR
// if x - r < 0 then
32819: LD_VAR 0 2
32823: PUSH
32824: LD_VAR 0 4
32828: MINUS
32829: PUSH
32830: LD_INT 0
32832: LESS
32833: IFFALSE 32845
// min_x := 0 else
32835: LD_ADDR_VAR 0 7
32839: PUSH
32840: LD_INT 0
32842: ST_TO_ADDR
32843: GO 32861
// min_x := x - r ;
32845: LD_ADDR_VAR 0 7
32849: PUSH
32850: LD_VAR 0 2
32854: PUSH
32855: LD_VAR 0 4
32859: MINUS
32860: ST_TO_ADDR
// if y - r < 0 then
32861: LD_VAR 0 3
32865: PUSH
32866: LD_VAR 0 4
32870: MINUS
32871: PUSH
32872: LD_INT 0
32874: LESS
32875: IFFALSE 32887
// min_y := 0 else
32877: LD_ADDR_VAR 0 8
32881: PUSH
32882: LD_INT 0
32884: ST_TO_ADDR
32885: GO 32903
// min_y := y - r ;
32887: LD_ADDR_VAR 0 8
32891: PUSH
32892: LD_VAR 0 3
32896: PUSH
32897: LD_VAR 0 4
32901: MINUS
32902: ST_TO_ADDR
// max_x := x + r ;
32903: LD_ADDR_VAR 0 9
32907: PUSH
32908: LD_VAR 0 2
32912: PUSH
32913: LD_VAR 0 4
32917: PLUS
32918: ST_TO_ADDR
// max_y := y + r ;
32919: LD_ADDR_VAR 0 10
32923: PUSH
32924: LD_VAR 0 3
32928: PUSH
32929: LD_VAR 0 4
32933: PLUS
32934: ST_TO_ADDR
// for _x = min_x to max_x do
32935: LD_ADDR_VAR 0 11
32939: PUSH
32940: DOUBLE
32941: LD_VAR 0 7
32945: DEC
32946: ST_TO_ADDR
32947: LD_VAR 0 9
32951: PUSH
32952: FOR_TO
32953: IFFALSE 33070
// for _y = min_y to max_y do
32955: LD_ADDR_VAR 0 12
32959: PUSH
32960: DOUBLE
32961: LD_VAR 0 8
32965: DEC
32966: ST_TO_ADDR
32967: LD_VAR 0 10
32971: PUSH
32972: FOR_TO
32973: IFFALSE 33066
// begin if not ValidHex ( _x , _y ) then
32975: LD_VAR 0 11
32979: PPUSH
32980: LD_VAR 0 12
32984: PPUSH
32985: CALL_OW 488
32989: NOT
32990: IFFALSE 32994
// continue ;
32992: GO 32972
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32994: LD_VAR 0 11
32998: PPUSH
32999: LD_VAR 0 12
33003: PPUSH
33004: CALL_OW 351
33008: PUSH
33009: LD_VAR 0 11
33013: PPUSH
33014: LD_VAR 0 12
33018: PPUSH
33019: CALL_OW 554
33023: AND
33024: IFFALSE 33064
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33026: LD_ADDR_VAR 0 13
33030: PUSH
33031: LD_VAR 0 13
33035: PPUSH
33036: LD_VAR 0 13
33040: PUSH
33041: LD_INT 1
33043: PLUS
33044: PPUSH
33045: LD_VAR 0 11
33049: PUSH
33050: LD_VAR 0 12
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PPUSH
33059: CALL_OW 2
33063: ST_TO_ADDR
// end ;
33064: GO 32972
33066: POP
33067: POP
33068: GO 32952
33070: POP
33071: POP
// if not list then
33072: LD_VAR 0 13
33076: NOT
33077: IFFALSE 33081
// exit ;
33079: GO 33152
// for i in list do
33081: LD_ADDR_VAR 0 6
33085: PUSH
33086: LD_VAR 0 13
33090: PUSH
33091: FOR_IN
33092: IFFALSE 33150
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33094: LD_VAR 0 1
33098: PPUSH
33099: LD_STRING M
33101: PUSH
33102: LD_VAR 0 6
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: PUSH
33111: LD_VAR 0 6
33115: PUSH
33116: LD_INT 2
33118: ARRAY
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: PPUSH
33144: CALL_OW 447
33148: GO 33091
33150: POP
33151: POP
// end ;
33152: LD_VAR 0 5
33156: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33157: LD_EXP 119
33161: NOT
33162: IFFALSE 33212
33164: GO 33166
33166: DISABLE
// begin initHack := true ;
33167: LD_ADDR_EXP 119
33171: PUSH
33172: LD_INT 1
33174: ST_TO_ADDR
// hackTanks := [ ] ;
33175: LD_ADDR_EXP 120
33179: PUSH
33180: EMPTY
33181: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33182: LD_ADDR_EXP 121
33186: PUSH
33187: EMPTY
33188: ST_TO_ADDR
// hackLimit := 3 ;
33189: LD_ADDR_EXP 122
33193: PUSH
33194: LD_INT 3
33196: ST_TO_ADDR
// hackDist := 12 ;
33197: LD_ADDR_EXP 123
33201: PUSH
33202: LD_INT 12
33204: ST_TO_ADDR
// hackCounter := [ ] ;
33205: LD_ADDR_EXP 124
33209: PUSH
33210: EMPTY
33211: ST_TO_ADDR
// end ;
33212: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33213: LD_EXP 119
33217: PUSH
33218: LD_INT 34
33220: PUSH
33221: LD_EXP 50
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PPUSH
33230: CALL_OW 69
33234: AND
33235: IFFALSE 33490
33237: GO 33239
33239: DISABLE
33240: LD_INT 0
33242: PPUSH
33243: PPUSH
// begin enable ;
33244: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33245: LD_ADDR_VAR 0 1
33249: PUSH
33250: LD_INT 34
33252: PUSH
33253: LD_EXP 50
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PPUSH
33262: CALL_OW 69
33266: PUSH
33267: FOR_IN
33268: IFFALSE 33488
// begin if not i in hackTanks then
33270: LD_VAR 0 1
33274: PUSH
33275: LD_EXP 120
33279: IN
33280: NOT
33281: IFFALSE 33364
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33283: LD_ADDR_EXP 120
33287: PUSH
33288: LD_EXP 120
33292: PPUSH
33293: LD_EXP 120
33297: PUSH
33298: LD_INT 1
33300: PLUS
33301: PPUSH
33302: LD_VAR 0 1
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33312: LD_ADDR_EXP 121
33316: PUSH
33317: LD_EXP 121
33321: PPUSH
33322: LD_EXP 121
33326: PUSH
33327: LD_INT 1
33329: PLUS
33330: PPUSH
33331: EMPTY
33332: PPUSH
33333: CALL_OW 1
33337: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33338: LD_ADDR_EXP 124
33342: PUSH
33343: LD_EXP 124
33347: PPUSH
33348: LD_EXP 124
33352: PUSH
33353: LD_INT 1
33355: PLUS
33356: PPUSH
33357: EMPTY
33358: PPUSH
33359: CALL_OW 1
33363: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33364: LD_VAR 0 1
33368: PPUSH
33369: CALL_OW 302
33373: NOT
33374: IFFALSE 33387
// begin HackUnlinkAll ( i ) ;
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL 33493 0 1
// continue ;
33385: GO 33267
// end ; HackCheckCapturedStatus ( i ) ;
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL 33936 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33396: LD_ADDR_VAR 0 2
33400: PUSH
33401: LD_INT 81
33403: PUSH
33404: LD_VAR 0 1
33408: PPUSH
33409: CALL_OW 255
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 33
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 91
33430: PUSH
33431: LD_VAR 0 1
33435: PUSH
33436: LD_EXP 123
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 50
33448: PUSH
33449: EMPTY
33450: LIST
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL_OW 69
33462: ST_TO_ADDR
// if not tmp then
33463: LD_VAR 0 2
33467: NOT
33468: IFFALSE 33472
// continue ;
33470: GO 33267
// HackLink ( i , tmp ) ;
33472: LD_VAR 0 1
33476: PPUSH
33477: LD_VAR 0 2
33481: PPUSH
33482: CALL 33629 0 2
// end ;
33486: GO 33267
33488: POP
33489: POP
// end ;
33490: PPOPN 2
33492: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33493: LD_INT 0
33495: PPUSH
33496: PPUSH
33497: PPUSH
// if not hack in hackTanks then
33498: LD_VAR 0 1
33502: PUSH
33503: LD_EXP 120
33507: IN
33508: NOT
33509: IFFALSE 33513
// exit ;
33511: GO 33624
// index := GetElementIndex ( hackTanks , hack ) ;
33513: LD_ADDR_VAR 0 4
33517: PUSH
33518: LD_EXP 120
33522: PPUSH
33523: LD_VAR 0 1
33527: PPUSH
33528: CALL 41047 0 2
33532: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33533: LD_EXP 121
33537: PUSH
33538: LD_VAR 0 4
33542: ARRAY
33543: IFFALSE 33624
// begin for i in hackTanksCaptured [ index ] do
33545: LD_ADDR_VAR 0 3
33549: PUSH
33550: LD_EXP 121
33554: PUSH
33555: LD_VAR 0 4
33559: ARRAY
33560: PUSH
33561: FOR_IN
33562: IFFALSE 33588
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33564: LD_VAR 0 3
33568: PUSH
33569: LD_INT 1
33571: ARRAY
33572: PPUSH
33573: LD_VAR 0 3
33577: PUSH
33578: LD_INT 2
33580: ARRAY
33581: PPUSH
33582: CALL_OW 235
33586: GO 33561
33588: POP
33589: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33590: LD_ADDR_EXP 121
33594: PUSH
33595: LD_EXP 121
33599: PPUSH
33600: LD_VAR 0 4
33604: PPUSH
33605: EMPTY
33606: PPUSH
33607: CALL_OW 1
33611: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33612: LD_VAR 0 1
33616: PPUSH
33617: LD_INT 0
33619: PPUSH
33620: CALL_OW 505
// end ; end ;
33624: LD_VAR 0 2
33628: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33629: LD_INT 0
33631: PPUSH
33632: PPUSH
33633: PPUSH
// if not hack in hackTanks or not vehicles then
33634: LD_VAR 0 1
33638: PUSH
33639: LD_EXP 120
33643: IN
33644: NOT
33645: PUSH
33646: LD_VAR 0 2
33650: NOT
33651: OR
33652: IFFALSE 33656
// exit ;
33654: GO 33931
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33656: LD_ADDR_VAR 0 2
33660: PUSH
33661: LD_VAR 0 1
33665: PPUSH
33666: LD_VAR 0 2
33670: PPUSH
33671: LD_INT 1
33673: PPUSH
33674: LD_INT 1
33676: PPUSH
33677: CALL 41697 0 4
33681: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33682: LD_ADDR_VAR 0 5
33686: PUSH
33687: LD_EXP 120
33691: PPUSH
33692: LD_VAR 0 1
33696: PPUSH
33697: CALL 41047 0 2
33701: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33702: LD_EXP 121
33706: PUSH
33707: LD_VAR 0 5
33711: ARRAY
33712: PUSH
33713: LD_EXP 122
33717: LESS
33718: IFFALSE 33907
// begin for i := 1 to vehicles do
33720: LD_ADDR_VAR 0 4
33724: PUSH
33725: DOUBLE
33726: LD_INT 1
33728: DEC
33729: ST_TO_ADDR
33730: LD_VAR 0 2
33734: PUSH
33735: FOR_TO
33736: IFFALSE 33905
// begin if hackTanksCaptured [ index ] = hackLimit then
33738: LD_EXP 121
33742: PUSH
33743: LD_VAR 0 5
33747: ARRAY
33748: PUSH
33749: LD_EXP 122
33753: EQUAL
33754: IFFALSE 33758
// break ;
33756: GO 33905
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33758: LD_ADDR_EXP 124
33762: PUSH
33763: LD_EXP 124
33767: PPUSH
33768: LD_VAR 0 5
33772: PPUSH
33773: LD_EXP 124
33777: PUSH
33778: LD_VAR 0 5
33782: ARRAY
33783: PUSH
33784: LD_INT 1
33786: PLUS
33787: PPUSH
33788: CALL_OW 1
33792: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33793: LD_ADDR_EXP 121
33797: PUSH
33798: LD_EXP 121
33802: PPUSH
33803: LD_VAR 0 5
33807: PUSH
33808: LD_EXP 121
33812: PUSH
33813: LD_VAR 0 5
33817: ARRAY
33818: PUSH
33819: LD_INT 1
33821: PLUS
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PPUSH
33827: LD_VAR 0 2
33831: PUSH
33832: LD_VAR 0 4
33836: ARRAY
33837: PUSH
33838: LD_VAR 0 2
33842: PUSH
33843: LD_VAR 0 4
33847: ARRAY
33848: PPUSH
33849: CALL_OW 255
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PPUSH
33858: CALL 41262 0 3
33862: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33863: LD_VAR 0 2
33867: PUSH
33868: LD_VAR 0 4
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 1
33878: PPUSH
33879: CALL_OW 255
33883: PPUSH
33884: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33888: LD_VAR 0 2
33892: PUSH
33893: LD_VAR 0 4
33897: ARRAY
33898: PPUSH
33899: CALL_OW 141
// end ;
33903: GO 33735
33905: POP
33906: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33907: LD_VAR 0 1
33911: PPUSH
33912: LD_EXP 121
33916: PUSH
33917: LD_VAR 0 5
33921: ARRAY
33922: PUSH
33923: LD_INT 0
33925: PLUS
33926: PPUSH
33927: CALL_OW 505
// end ;
33931: LD_VAR 0 3
33935: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33936: LD_INT 0
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
// if not hack in hackTanks then
33942: LD_VAR 0 1
33946: PUSH
33947: LD_EXP 120
33951: IN
33952: NOT
33953: IFFALSE 33957
// exit ;
33955: GO 34197
// index := GetElementIndex ( hackTanks , hack ) ;
33957: LD_ADDR_VAR 0 4
33961: PUSH
33962: LD_EXP 120
33966: PPUSH
33967: LD_VAR 0 1
33971: PPUSH
33972: CALL 41047 0 2
33976: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33977: LD_ADDR_VAR 0 3
33981: PUSH
33982: DOUBLE
33983: LD_EXP 121
33987: PUSH
33988: LD_VAR 0 4
33992: ARRAY
33993: INC
33994: ST_TO_ADDR
33995: LD_INT 1
33997: PUSH
33998: FOR_DOWNTO
33999: IFFALSE 34171
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34001: LD_ADDR_VAR 0 5
34005: PUSH
34006: LD_EXP 121
34010: PUSH
34011: LD_VAR 0 4
34015: ARRAY
34016: PUSH
34017: LD_VAR 0 3
34021: ARRAY
34022: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34023: LD_VAR 0 5
34027: PUSH
34028: LD_INT 1
34030: ARRAY
34031: PPUSH
34032: CALL_OW 302
34036: NOT
34037: PUSH
34038: LD_VAR 0 5
34042: PUSH
34043: LD_INT 1
34045: ARRAY
34046: PPUSH
34047: CALL_OW 255
34051: PUSH
34052: LD_VAR 0 1
34056: PPUSH
34057: CALL_OW 255
34061: NONEQUAL
34062: OR
34063: IFFALSE 34169
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34065: LD_VAR 0 5
34069: PUSH
34070: LD_INT 1
34072: ARRAY
34073: PPUSH
34074: CALL_OW 305
34078: PUSH
34079: LD_VAR 0 5
34083: PUSH
34084: LD_INT 1
34086: ARRAY
34087: PPUSH
34088: CALL_OW 255
34092: PUSH
34093: LD_VAR 0 1
34097: PPUSH
34098: CALL_OW 255
34102: EQUAL
34103: AND
34104: IFFALSE 34128
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34106: LD_VAR 0 5
34110: PUSH
34111: LD_INT 1
34113: ARRAY
34114: PPUSH
34115: LD_VAR 0 5
34119: PUSH
34120: LD_INT 2
34122: ARRAY
34123: PPUSH
34124: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34128: LD_ADDR_EXP 121
34132: PUSH
34133: LD_EXP 121
34137: PPUSH
34138: LD_VAR 0 4
34142: PPUSH
34143: LD_EXP 121
34147: PUSH
34148: LD_VAR 0 4
34152: ARRAY
34153: PPUSH
34154: LD_VAR 0 3
34158: PPUSH
34159: CALL_OW 3
34163: PPUSH
34164: CALL_OW 1
34168: ST_TO_ADDR
// end ; end ;
34169: GO 33998
34171: POP
34172: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34173: LD_VAR 0 1
34177: PPUSH
34178: LD_EXP 121
34182: PUSH
34183: LD_VAR 0 4
34187: ARRAY
34188: PUSH
34189: LD_INT 0
34191: PLUS
34192: PPUSH
34193: CALL_OW 505
// end ;
34197: LD_VAR 0 2
34201: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34202: LD_INT 0
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
// if not hack in hackTanks then
34208: LD_VAR 0 1
34212: PUSH
34213: LD_EXP 120
34217: IN
34218: NOT
34219: IFFALSE 34223
// exit ;
34221: GO 34308
// index := GetElementIndex ( hackTanks , hack ) ;
34223: LD_ADDR_VAR 0 5
34227: PUSH
34228: LD_EXP 120
34232: PPUSH
34233: LD_VAR 0 1
34237: PPUSH
34238: CALL 41047 0 2
34242: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34243: LD_ADDR_VAR 0 4
34247: PUSH
34248: DOUBLE
34249: LD_INT 1
34251: DEC
34252: ST_TO_ADDR
34253: LD_EXP 121
34257: PUSH
34258: LD_VAR 0 5
34262: ARRAY
34263: PUSH
34264: FOR_TO
34265: IFFALSE 34306
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34267: LD_EXP 121
34271: PUSH
34272: LD_VAR 0 5
34276: ARRAY
34277: PUSH
34278: LD_VAR 0 4
34282: ARRAY
34283: PUSH
34284: LD_INT 1
34286: ARRAY
34287: PUSH
34288: LD_VAR 0 2
34292: EQUAL
34293: IFFALSE 34304
// KillUnit ( vehicle ) ;
34295: LD_VAR 0 2
34299: PPUSH
34300: CALL_OW 66
34304: GO 34264
34306: POP
34307: POP
// end ;
34308: LD_VAR 0 3
34312: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34313: LD_EXP 125
34317: NOT
34318: IFFALSE 34353
34320: GO 34322
34322: DISABLE
// begin initMiner := true ;
34323: LD_ADDR_EXP 125
34327: PUSH
34328: LD_INT 1
34330: ST_TO_ADDR
// minersList := [ ] ;
34331: LD_ADDR_EXP 126
34335: PUSH
34336: EMPTY
34337: ST_TO_ADDR
// minerMinesList := [ ] ;
34338: LD_ADDR_EXP 127
34342: PUSH
34343: EMPTY
34344: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34345: LD_ADDR_EXP 128
34349: PUSH
34350: LD_INT 5
34352: ST_TO_ADDR
// end ;
34353: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34354: LD_EXP 125
34358: PUSH
34359: LD_INT 34
34361: PUSH
34362: LD_EXP 55
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PPUSH
34371: CALL_OW 69
34375: AND
34376: IFFALSE 34839
34378: GO 34380
34380: DISABLE
34381: LD_INT 0
34383: PPUSH
34384: PPUSH
34385: PPUSH
34386: PPUSH
// begin enable ;
34387: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34388: LD_ADDR_VAR 0 1
34392: PUSH
34393: LD_INT 34
34395: PUSH
34396: LD_EXP 55
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 69
34409: PUSH
34410: FOR_IN
34411: IFFALSE 34483
// begin if not i in minersList then
34413: LD_VAR 0 1
34417: PUSH
34418: LD_EXP 126
34422: IN
34423: NOT
34424: IFFALSE 34481
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34426: LD_ADDR_EXP 126
34430: PUSH
34431: LD_EXP 126
34435: PPUSH
34436: LD_EXP 126
34440: PUSH
34441: LD_INT 1
34443: PLUS
34444: PPUSH
34445: LD_VAR 0 1
34449: PPUSH
34450: CALL_OW 1
34454: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34455: LD_ADDR_EXP 127
34459: PUSH
34460: LD_EXP 127
34464: PPUSH
34465: LD_EXP 127
34469: PUSH
34470: LD_INT 1
34472: PLUS
34473: PPUSH
34474: EMPTY
34475: PPUSH
34476: CALL_OW 1
34480: ST_TO_ADDR
// end end ;
34481: GO 34410
34483: POP
34484: POP
// for i := minerMinesList downto 1 do
34485: LD_ADDR_VAR 0 1
34489: PUSH
34490: DOUBLE
34491: LD_EXP 127
34495: INC
34496: ST_TO_ADDR
34497: LD_INT 1
34499: PUSH
34500: FOR_DOWNTO
34501: IFFALSE 34837
// begin if IsLive ( minersList [ i ] ) then
34503: LD_EXP 126
34507: PUSH
34508: LD_VAR 0 1
34512: ARRAY
34513: PPUSH
34514: CALL_OW 300
34518: IFFALSE 34546
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34520: LD_EXP 126
34524: PUSH
34525: LD_VAR 0 1
34529: ARRAY
34530: PPUSH
34531: LD_EXP 127
34535: PUSH
34536: LD_VAR 0 1
34540: ARRAY
34541: PPUSH
34542: CALL_OW 505
// if not minerMinesList [ i ] then
34546: LD_EXP 127
34550: PUSH
34551: LD_VAR 0 1
34555: ARRAY
34556: NOT
34557: IFFALSE 34561
// continue ;
34559: GO 34500
// for j := minerMinesList [ i ] downto 1 do
34561: LD_ADDR_VAR 0 2
34565: PUSH
34566: DOUBLE
34567: LD_EXP 127
34571: PUSH
34572: LD_VAR 0 1
34576: ARRAY
34577: INC
34578: ST_TO_ADDR
34579: LD_INT 1
34581: PUSH
34582: FOR_DOWNTO
34583: IFFALSE 34833
// begin side := GetSide ( minersList [ i ] ) ;
34585: LD_ADDR_VAR 0 3
34589: PUSH
34590: LD_EXP 126
34594: PUSH
34595: LD_VAR 0 1
34599: ARRAY
34600: PPUSH
34601: CALL_OW 255
34605: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34606: LD_ADDR_VAR 0 4
34610: PUSH
34611: LD_EXP 127
34615: PUSH
34616: LD_VAR 0 1
34620: ARRAY
34621: PUSH
34622: LD_VAR 0 2
34626: ARRAY
34627: PUSH
34628: LD_INT 1
34630: ARRAY
34631: PPUSH
34632: LD_EXP 127
34636: PUSH
34637: LD_VAR 0 1
34641: ARRAY
34642: PUSH
34643: LD_VAR 0 2
34647: ARRAY
34648: PUSH
34649: LD_INT 2
34651: ARRAY
34652: PPUSH
34653: CALL_OW 428
34657: ST_TO_ADDR
// if not tmp then
34658: LD_VAR 0 4
34662: NOT
34663: IFFALSE 34667
// continue ;
34665: GO 34582
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34667: LD_VAR 0 4
34671: PUSH
34672: LD_INT 81
34674: PUSH
34675: LD_VAR 0 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PPUSH
34684: CALL_OW 69
34688: IN
34689: PUSH
34690: LD_EXP 127
34694: PUSH
34695: LD_VAR 0 1
34699: ARRAY
34700: PUSH
34701: LD_VAR 0 2
34705: ARRAY
34706: PUSH
34707: LD_INT 1
34709: ARRAY
34710: PPUSH
34711: LD_EXP 127
34715: PUSH
34716: LD_VAR 0 1
34720: ARRAY
34721: PUSH
34722: LD_VAR 0 2
34726: ARRAY
34727: PUSH
34728: LD_INT 2
34730: ARRAY
34731: PPUSH
34732: CALL_OW 458
34736: AND
34737: IFFALSE 34831
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34739: LD_EXP 127
34743: PUSH
34744: LD_VAR 0 1
34748: ARRAY
34749: PUSH
34750: LD_VAR 0 2
34754: ARRAY
34755: PUSH
34756: LD_INT 1
34758: ARRAY
34759: PPUSH
34760: LD_EXP 127
34764: PUSH
34765: LD_VAR 0 1
34769: ARRAY
34770: PUSH
34771: LD_VAR 0 2
34775: ARRAY
34776: PUSH
34777: LD_INT 2
34779: ARRAY
34780: PPUSH
34781: LD_VAR 0 3
34785: PPUSH
34786: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34790: LD_ADDR_EXP 127
34794: PUSH
34795: LD_EXP 127
34799: PPUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: LD_EXP 127
34809: PUSH
34810: LD_VAR 0 1
34814: ARRAY
34815: PPUSH
34816: LD_VAR 0 2
34820: PPUSH
34821: CALL_OW 3
34825: PPUSH
34826: CALL_OW 1
34830: ST_TO_ADDR
// end ; end ;
34831: GO 34582
34833: POP
34834: POP
// end ;
34835: GO 34500
34837: POP
34838: POP
// end ;
34839: PPOPN 4
34841: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34842: LD_INT 0
34844: PPUSH
34845: PPUSH
// result := false ;
34846: LD_ADDR_VAR 0 4
34850: PUSH
34851: LD_INT 0
34853: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34854: LD_VAR 0 1
34858: PPUSH
34859: CALL_OW 264
34863: PUSH
34864: LD_EXP 55
34868: EQUAL
34869: NOT
34870: IFFALSE 34874
// exit ;
34872: GO 35114
// index := GetElementIndex ( minersList , unit ) ;
34874: LD_ADDR_VAR 0 5
34878: PUSH
34879: LD_EXP 126
34883: PPUSH
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL 41047 0 2
34893: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34894: LD_EXP 127
34898: PUSH
34899: LD_VAR 0 5
34903: ARRAY
34904: PUSH
34905: LD_EXP 128
34909: GREATEREQUAL
34910: IFFALSE 34914
// exit ;
34912: GO 35114
// ComMoveXY ( unit , x , y ) ;
34914: LD_VAR 0 1
34918: PPUSH
34919: LD_VAR 0 2
34923: PPUSH
34924: LD_VAR 0 3
34928: PPUSH
34929: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34933: LD_INT 35
34935: PPUSH
34936: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34940: LD_VAR 0 1
34944: PPUSH
34945: LD_VAR 0 2
34949: PPUSH
34950: LD_VAR 0 3
34954: PPUSH
34955: CALL 71111 0 3
34959: NOT
34960: PUSH
34961: LD_VAR 0 1
34965: PPUSH
34966: CALL_OW 314
34970: AND
34971: IFFALSE 34975
// exit ;
34973: GO 35114
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34975: LD_VAR 0 2
34979: PPUSH
34980: LD_VAR 0 3
34984: PPUSH
34985: CALL_OW 428
34989: PUSH
34990: LD_VAR 0 1
34994: EQUAL
34995: PUSH
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 314
35005: NOT
35006: AND
35007: IFFALSE 34933
// PlaySoundXY ( x , y , PlantMine ) ;
35009: LD_VAR 0 2
35013: PPUSH
35014: LD_VAR 0 3
35018: PPUSH
35019: LD_STRING PlantMine
35021: PPUSH
35022: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35026: LD_VAR 0 2
35030: PPUSH
35031: LD_VAR 0 3
35035: PPUSH
35036: LD_VAR 0 1
35040: PPUSH
35041: CALL_OW 255
35045: PPUSH
35046: LD_INT 0
35048: PPUSH
35049: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35053: LD_ADDR_EXP 127
35057: PUSH
35058: LD_EXP 127
35062: PPUSH
35063: LD_VAR 0 5
35067: PUSH
35068: LD_EXP 127
35072: PUSH
35073: LD_VAR 0 5
35077: ARRAY
35078: PUSH
35079: LD_INT 1
35081: PLUS
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PPUSH
35087: LD_VAR 0 2
35091: PUSH
35092: LD_VAR 0 3
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PPUSH
35101: CALL 41262 0 3
35105: ST_TO_ADDR
// result := true ;
35106: LD_ADDR_VAR 0 4
35110: PUSH
35111: LD_INT 1
35113: ST_TO_ADDR
// end ;
35114: LD_VAR 0 4
35118: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35119: LD_INT 0
35121: PPUSH
35122: PPUSH
35123: PPUSH
// if not unit in minersList then
35124: LD_VAR 0 1
35128: PUSH
35129: LD_EXP 126
35133: IN
35134: NOT
35135: IFFALSE 35139
// exit ;
35137: GO 35531
// index := GetElementIndex ( minersList , unit ) ;
35139: LD_ADDR_VAR 0 6
35143: PUSH
35144: LD_EXP 126
35148: PPUSH
35149: LD_VAR 0 1
35153: PPUSH
35154: CALL 41047 0 2
35158: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35159: LD_ADDR_VAR 0 5
35163: PUSH
35164: DOUBLE
35165: LD_EXP 127
35169: PUSH
35170: LD_VAR 0 6
35174: ARRAY
35175: INC
35176: ST_TO_ADDR
35177: LD_INT 1
35179: PUSH
35180: FOR_DOWNTO
35181: IFFALSE 35342
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35183: LD_EXP 127
35187: PUSH
35188: LD_VAR 0 6
35192: ARRAY
35193: PUSH
35194: LD_VAR 0 5
35198: ARRAY
35199: PUSH
35200: LD_INT 1
35202: ARRAY
35203: PUSH
35204: LD_VAR 0 2
35208: EQUAL
35209: PUSH
35210: LD_EXP 127
35214: PUSH
35215: LD_VAR 0 6
35219: ARRAY
35220: PUSH
35221: LD_VAR 0 5
35225: ARRAY
35226: PUSH
35227: LD_INT 2
35229: ARRAY
35230: PUSH
35231: LD_VAR 0 3
35235: EQUAL
35236: AND
35237: IFFALSE 35340
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35239: LD_EXP 127
35243: PUSH
35244: LD_VAR 0 6
35248: ARRAY
35249: PUSH
35250: LD_VAR 0 5
35254: ARRAY
35255: PUSH
35256: LD_INT 1
35258: ARRAY
35259: PPUSH
35260: LD_EXP 127
35264: PUSH
35265: LD_VAR 0 6
35269: ARRAY
35270: PUSH
35271: LD_VAR 0 5
35275: ARRAY
35276: PUSH
35277: LD_INT 2
35279: ARRAY
35280: PPUSH
35281: LD_VAR 0 1
35285: PPUSH
35286: CALL_OW 255
35290: PPUSH
35291: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35295: LD_ADDR_EXP 127
35299: PUSH
35300: LD_EXP 127
35304: PPUSH
35305: LD_VAR 0 6
35309: PPUSH
35310: LD_EXP 127
35314: PUSH
35315: LD_VAR 0 6
35319: ARRAY
35320: PPUSH
35321: LD_VAR 0 5
35325: PPUSH
35326: CALL_OW 3
35330: PPUSH
35331: CALL_OW 1
35335: ST_TO_ADDR
// exit ;
35336: POP
35337: POP
35338: GO 35531
// end ; end ;
35340: GO 35180
35342: POP
35343: POP
// for i := minerMinesList [ index ] downto 1 do
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: DOUBLE
35350: LD_EXP 127
35354: PUSH
35355: LD_VAR 0 6
35359: ARRAY
35360: INC
35361: ST_TO_ADDR
35362: LD_INT 1
35364: PUSH
35365: FOR_DOWNTO
35366: IFFALSE 35529
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35368: LD_EXP 127
35372: PUSH
35373: LD_VAR 0 6
35377: ARRAY
35378: PUSH
35379: LD_VAR 0 5
35383: ARRAY
35384: PUSH
35385: LD_INT 1
35387: ARRAY
35388: PPUSH
35389: LD_EXP 127
35393: PUSH
35394: LD_VAR 0 6
35398: ARRAY
35399: PUSH
35400: LD_VAR 0 5
35404: ARRAY
35405: PUSH
35406: LD_INT 2
35408: ARRAY
35409: PPUSH
35410: LD_VAR 0 2
35414: PPUSH
35415: LD_VAR 0 3
35419: PPUSH
35420: CALL_OW 298
35424: PUSH
35425: LD_INT 6
35427: LESS
35428: IFFALSE 35527
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35430: LD_EXP 127
35434: PUSH
35435: LD_VAR 0 6
35439: ARRAY
35440: PUSH
35441: LD_VAR 0 5
35445: ARRAY
35446: PUSH
35447: LD_INT 1
35449: ARRAY
35450: PPUSH
35451: LD_EXP 127
35455: PUSH
35456: LD_VAR 0 6
35460: ARRAY
35461: PUSH
35462: LD_VAR 0 5
35466: ARRAY
35467: PUSH
35468: LD_INT 2
35470: ARRAY
35471: PPUSH
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 255
35481: PPUSH
35482: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35486: LD_ADDR_EXP 127
35490: PUSH
35491: LD_EXP 127
35495: PPUSH
35496: LD_VAR 0 6
35500: PPUSH
35501: LD_EXP 127
35505: PUSH
35506: LD_VAR 0 6
35510: ARRAY
35511: PPUSH
35512: LD_VAR 0 5
35516: PPUSH
35517: CALL_OW 3
35521: PPUSH
35522: CALL_OW 1
35526: ST_TO_ADDR
// end ; end ;
35527: GO 35365
35529: POP
35530: POP
// end ;
35531: LD_VAR 0 4
35535: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35536: LD_INT 0
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 264
35556: PUSH
35557: LD_EXP 55
35561: EQUAL
35562: NOT
35563: PUSH
35564: LD_VAR 0 1
35568: PUSH
35569: LD_EXP 126
35573: IN
35574: NOT
35575: OR
35576: IFFALSE 35580
// exit ;
35578: GO 35902
// index := GetElementIndex ( minersList , unit ) ;
35580: LD_ADDR_VAR 0 6
35584: PUSH
35585: LD_EXP 126
35589: PPUSH
35590: LD_VAR 0 1
35594: PPUSH
35595: CALL 41047 0 2
35599: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35600: LD_ADDR_VAR 0 8
35604: PUSH
35605: LD_EXP 128
35609: PUSH
35610: LD_EXP 127
35614: PUSH
35615: LD_VAR 0 6
35619: ARRAY
35620: MINUS
35621: ST_TO_ADDR
// if not minesFreeAmount then
35622: LD_VAR 0 8
35626: NOT
35627: IFFALSE 35631
// exit ;
35629: GO 35902
// tmp := [ ] ;
35631: LD_ADDR_VAR 0 7
35635: PUSH
35636: EMPTY
35637: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35638: LD_ADDR_VAR 0 5
35642: PUSH
35643: DOUBLE
35644: LD_INT 1
35646: DEC
35647: ST_TO_ADDR
35648: LD_VAR 0 8
35652: PUSH
35653: FOR_TO
35654: IFFALSE 35849
// begin _d := rand ( 0 , 5 ) ;
35656: LD_ADDR_VAR 0 11
35660: PUSH
35661: LD_INT 0
35663: PPUSH
35664: LD_INT 5
35666: PPUSH
35667: CALL_OW 12
35671: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35672: LD_ADDR_VAR 0 12
35676: PUSH
35677: LD_INT 2
35679: PPUSH
35680: LD_INT 6
35682: PPUSH
35683: CALL_OW 12
35687: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35688: LD_ADDR_VAR 0 9
35692: PUSH
35693: LD_VAR 0 2
35697: PPUSH
35698: LD_VAR 0 11
35702: PPUSH
35703: LD_VAR 0 12
35707: PPUSH
35708: CALL_OW 272
35712: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35713: LD_ADDR_VAR 0 10
35717: PUSH
35718: LD_VAR 0 3
35722: PPUSH
35723: LD_VAR 0 11
35727: PPUSH
35728: LD_VAR 0 12
35732: PPUSH
35733: CALL_OW 273
35737: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35738: LD_VAR 0 9
35742: PPUSH
35743: LD_VAR 0 10
35747: PPUSH
35748: CALL_OW 488
35752: PUSH
35753: LD_VAR 0 9
35757: PUSH
35758: LD_VAR 0 10
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_VAR 0 7
35771: IN
35772: NOT
35773: AND
35774: PUSH
35775: LD_VAR 0 9
35779: PPUSH
35780: LD_VAR 0 10
35784: PPUSH
35785: CALL_OW 458
35789: NOT
35790: AND
35791: IFFALSE 35833
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35793: LD_ADDR_VAR 0 7
35797: PUSH
35798: LD_VAR 0 7
35802: PPUSH
35803: LD_VAR 0 7
35807: PUSH
35808: LD_INT 1
35810: PLUS
35811: PPUSH
35812: LD_VAR 0 9
35816: PUSH
35817: LD_VAR 0 10
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PPUSH
35826: CALL_OW 1
35830: ST_TO_ADDR
35831: GO 35847
// i := i - 1 ;
35833: LD_ADDR_VAR 0 5
35837: PUSH
35838: LD_VAR 0 5
35842: PUSH
35843: LD_INT 1
35845: MINUS
35846: ST_TO_ADDR
// end ;
35847: GO 35653
35849: POP
35850: POP
// for i in tmp do
35851: LD_ADDR_VAR 0 5
35855: PUSH
35856: LD_VAR 0 7
35860: PUSH
35861: FOR_IN
35862: IFFALSE 35900
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35864: LD_VAR 0 1
35868: PPUSH
35869: LD_VAR 0 5
35873: PUSH
35874: LD_INT 1
35876: ARRAY
35877: PPUSH
35878: LD_VAR 0 5
35882: PUSH
35883: LD_INT 2
35885: ARRAY
35886: PPUSH
35887: CALL 34842 0 3
35891: NOT
35892: IFFALSE 35898
// exit ;
35894: POP
35895: POP
35896: GO 35902
35898: GO 35861
35900: POP
35901: POP
// end ;
35902: LD_VAR 0 4
35906: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35907: LD_INT 0
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
// if not GetClass ( unit ) = class_sniper then
35916: LD_VAR 0 1
35920: PPUSH
35921: CALL_OW 257
35925: PUSH
35926: LD_INT 5
35928: EQUAL
35929: NOT
35930: IFFALSE 35934
// exit ;
35932: GO 36311
// dist := 8 ;
35934: LD_ADDR_VAR 0 5
35938: PUSH
35939: LD_INT 8
35941: ST_TO_ADDR
// viewRange := 12 ;
35942: LD_ADDR_VAR 0 7
35946: PUSH
35947: LD_INT 12
35949: ST_TO_ADDR
// side := GetSide ( unit ) ;
35950: LD_ADDR_VAR 0 6
35954: PUSH
35955: LD_VAR 0 1
35959: PPUSH
35960: CALL_OW 255
35964: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35965: LD_INT 61
35967: PPUSH
35968: LD_VAR 0 6
35972: PPUSH
35973: CALL_OW 321
35977: PUSH
35978: LD_INT 2
35980: EQUAL
35981: IFFALSE 35991
// viewRange := 16 ;
35983: LD_ADDR_VAR 0 7
35987: PUSH
35988: LD_INT 16
35990: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35991: LD_VAR 0 1
35995: PPUSH
35996: LD_VAR 0 2
36000: PPUSH
36001: LD_VAR 0 3
36005: PPUSH
36006: CALL_OW 297
36010: PUSH
36011: LD_VAR 0 5
36015: GREATER
36016: IFFALSE 36095
// begin ComMoveXY ( unit , x , y ) ;
36018: LD_VAR 0 1
36022: PPUSH
36023: LD_VAR 0 2
36027: PPUSH
36028: LD_VAR 0 3
36032: PPUSH
36033: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36037: LD_INT 35
36039: PPUSH
36040: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36044: LD_VAR 0 1
36048: PPUSH
36049: LD_VAR 0 2
36053: PPUSH
36054: LD_VAR 0 3
36058: PPUSH
36059: CALL 71111 0 3
36063: NOT
36064: IFFALSE 36068
// exit ;
36066: GO 36311
// until GetDistUnitXY ( unit , x , y ) < dist ;
36068: LD_VAR 0 1
36072: PPUSH
36073: LD_VAR 0 2
36077: PPUSH
36078: LD_VAR 0 3
36082: PPUSH
36083: CALL_OW 297
36087: PUSH
36088: LD_VAR 0 5
36092: LESS
36093: IFFALSE 36037
// end ; ComTurnXY ( unit , x , y ) ;
36095: LD_VAR 0 1
36099: PPUSH
36100: LD_VAR 0 2
36104: PPUSH
36105: LD_VAR 0 3
36109: PPUSH
36110: CALL_OW 118
// wait ( 5 ) ;
36114: LD_INT 5
36116: PPUSH
36117: CALL_OW 67
// _d := GetDir ( unit ) ;
36121: LD_ADDR_VAR 0 10
36125: PUSH
36126: LD_VAR 0 1
36130: PPUSH
36131: CALL_OW 254
36135: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36136: LD_ADDR_VAR 0 8
36140: PUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 250
36150: PPUSH
36151: LD_VAR 0 10
36155: PPUSH
36156: LD_VAR 0 5
36160: PPUSH
36161: CALL_OW 272
36165: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36166: LD_ADDR_VAR 0 9
36170: PUSH
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL_OW 251
36180: PPUSH
36181: LD_VAR 0 10
36185: PPUSH
36186: LD_VAR 0 5
36190: PPUSH
36191: CALL_OW 273
36195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36196: LD_VAR 0 8
36200: PPUSH
36201: LD_VAR 0 9
36205: PPUSH
36206: CALL_OW 488
36210: NOT
36211: IFFALSE 36215
// exit ;
36213: GO 36311
// ComAnimCustom ( unit , 1 ) ;
36215: LD_VAR 0 1
36219: PPUSH
36220: LD_INT 1
36222: PPUSH
36223: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36227: LD_VAR 0 8
36231: PPUSH
36232: LD_VAR 0 9
36236: PPUSH
36237: LD_VAR 0 6
36241: PPUSH
36242: LD_VAR 0 7
36246: PPUSH
36247: CALL_OW 330
// repeat wait ( 1 ) ;
36251: LD_INT 1
36253: PPUSH
36254: CALL_OW 67
// until IsIdle ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 316
36267: PUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 302
36277: NOT
36278: OR
36279: PUSH
36280: LD_VAR 0 1
36284: PPUSH
36285: CALL_OW 301
36289: OR
36290: IFFALSE 36251
// RemoveSeeing ( _x , _y , side ) ;
36292: LD_VAR 0 8
36296: PPUSH
36297: LD_VAR 0 9
36301: PPUSH
36302: LD_VAR 0 6
36306: PPUSH
36307: CALL_OW 331
// end ; end_of_file
36311: LD_VAR 0 4
36315: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36316: LD_INT 0
36318: PPUSH
36319: PPUSH
// if exist_mode then
36320: LD_VAR 0 2
36324: IFFALSE 36349
// unit := CreateCharacter ( prefix & ident ) else
36326: LD_ADDR_VAR 0 5
36330: PUSH
36331: LD_VAR 0 3
36335: PUSH
36336: LD_VAR 0 1
36340: STR
36341: PPUSH
36342: CALL_OW 34
36346: ST_TO_ADDR
36347: GO 36364
// unit := NewCharacter ( ident ) ;
36349: LD_ADDR_VAR 0 5
36353: PUSH
36354: LD_VAR 0 1
36358: PPUSH
36359: CALL_OW 25
36363: ST_TO_ADDR
// result := unit ;
36364: LD_ADDR_VAR 0 4
36368: PUSH
36369: LD_VAR 0 5
36373: ST_TO_ADDR
// end ;
36374: LD_VAR 0 4
36378: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36379: LD_INT 0
36381: PPUSH
36382: PPUSH
// if not side or not nation then
36383: LD_VAR 0 1
36387: NOT
36388: PUSH
36389: LD_VAR 0 2
36393: NOT
36394: OR
36395: IFFALSE 36399
// exit ;
36397: GO 37163
// case nation of nation_american :
36399: LD_VAR 0 2
36403: PUSH
36404: LD_INT 1
36406: DOUBLE
36407: EQUAL
36408: IFTRUE 36412
36410: GO 36626
36412: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36413: LD_ADDR_VAR 0 4
36417: PUSH
36418: LD_INT 35
36420: PUSH
36421: LD_INT 45
36423: PUSH
36424: LD_INT 46
36426: PUSH
36427: LD_INT 47
36429: PUSH
36430: LD_INT 82
36432: PUSH
36433: LD_INT 83
36435: PUSH
36436: LD_INT 84
36438: PUSH
36439: LD_INT 85
36441: PUSH
36442: LD_INT 86
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 6
36453: PUSH
36454: LD_INT 15
36456: PUSH
36457: LD_INT 16
36459: PUSH
36460: LD_INT 7
36462: PUSH
36463: LD_INT 12
36465: PUSH
36466: LD_INT 13
36468: PUSH
36469: LD_INT 10
36471: PUSH
36472: LD_INT 14
36474: PUSH
36475: LD_INT 20
36477: PUSH
36478: LD_INT 21
36480: PUSH
36481: LD_INT 22
36483: PUSH
36484: LD_INT 25
36486: PUSH
36487: LD_INT 32
36489: PUSH
36490: LD_INT 27
36492: PUSH
36493: LD_INT 36
36495: PUSH
36496: LD_INT 69
36498: PUSH
36499: LD_INT 39
36501: PUSH
36502: LD_INT 34
36504: PUSH
36505: LD_INT 40
36507: PUSH
36508: LD_INT 48
36510: PUSH
36511: LD_INT 49
36513: PUSH
36514: LD_INT 50
36516: PUSH
36517: LD_INT 51
36519: PUSH
36520: LD_INT 52
36522: PUSH
36523: LD_INT 53
36525: PUSH
36526: LD_INT 54
36528: PUSH
36529: LD_INT 55
36531: PUSH
36532: LD_INT 56
36534: PUSH
36535: LD_INT 57
36537: PUSH
36538: LD_INT 58
36540: PUSH
36541: LD_INT 59
36543: PUSH
36544: LD_INT 60
36546: PUSH
36547: LD_INT 61
36549: PUSH
36550: LD_INT 62
36552: PUSH
36553: LD_INT 80
36555: PUSH
36556: LD_INT 82
36558: PUSH
36559: LD_INT 83
36561: PUSH
36562: LD_INT 84
36564: PUSH
36565: LD_INT 85
36567: PUSH
36568: LD_INT 86
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: ST_TO_ADDR
36624: GO 37087
36626: LD_INT 2
36628: DOUBLE
36629: EQUAL
36630: IFTRUE 36634
36632: GO 36856
36634: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36635: LD_ADDR_VAR 0 4
36639: PUSH
36640: LD_INT 35
36642: PUSH
36643: LD_INT 45
36645: PUSH
36646: LD_INT 46
36648: PUSH
36649: LD_INT 47
36651: PUSH
36652: LD_INT 82
36654: PUSH
36655: LD_INT 83
36657: PUSH
36658: LD_INT 84
36660: PUSH
36661: LD_INT 85
36663: PUSH
36664: LD_INT 87
36666: PUSH
36667: LD_INT 70
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: LD_INT 11
36675: PUSH
36676: LD_INT 3
36678: PUSH
36679: LD_INT 4
36681: PUSH
36682: LD_INT 5
36684: PUSH
36685: LD_INT 6
36687: PUSH
36688: LD_INT 15
36690: PUSH
36691: LD_INT 18
36693: PUSH
36694: LD_INT 7
36696: PUSH
36697: LD_INT 17
36699: PUSH
36700: LD_INT 8
36702: PUSH
36703: LD_INT 20
36705: PUSH
36706: LD_INT 21
36708: PUSH
36709: LD_INT 22
36711: PUSH
36712: LD_INT 72
36714: PUSH
36715: LD_INT 26
36717: PUSH
36718: LD_INT 69
36720: PUSH
36721: LD_INT 39
36723: PUSH
36724: LD_INT 40
36726: PUSH
36727: LD_INT 41
36729: PUSH
36730: LD_INT 42
36732: PUSH
36733: LD_INT 43
36735: PUSH
36736: LD_INT 48
36738: PUSH
36739: LD_INT 49
36741: PUSH
36742: LD_INT 50
36744: PUSH
36745: LD_INT 51
36747: PUSH
36748: LD_INT 52
36750: PUSH
36751: LD_INT 53
36753: PUSH
36754: LD_INT 54
36756: PUSH
36757: LD_INT 55
36759: PUSH
36760: LD_INT 56
36762: PUSH
36763: LD_INT 60
36765: PUSH
36766: LD_INT 61
36768: PUSH
36769: LD_INT 62
36771: PUSH
36772: LD_INT 66
36774: PUSH
36775: LD_INT 67
36777: PUSH
36778: LD_INT 68
36780: PUSH
36781: LD_INT 81
36783: PUSH
36784: LD_INT 82
36786: PUSH
36787: LD_INT 83
36789: PUSH
36790: LD_INT 84
36792: PUSH
36793: LD_INT 85
36795: PUSH
36796: LD_INT 87
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: ST_TO_ADDR
36854: GO 37087
36856: LD_INT 3
36858: DOUBLE
36859: EQUAL
36860: IFTRUE 36864
36862: GO 37086
36864: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36865: LD_ADDR_VAR 0 4
36869: PUSH
36870: LD_INT 46
36872: PUSH
36873: LD_INT 47
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 82
36884: PUSH
36885: LD_INT 83
36887: PUSH
36888: LD_INT 84
36890: PUSH
36891: LD_INT 85
36893: PUSH
36894: LD_INT 86
36896: PUSH
36897: LD_INT 11
36899: PUSH
36900: LD_INT 9
36902: PUSH
36903: LD_INT 20
36905: PUSH
36906: LD_INT 19
36908: PUSH
36909: LD_INT 21
36911: PUSH
36912: LD_INT 24
36914: PUSH
36915: LD_INT 22
36917: PUSH
36918: LD_INT 25
36920: PUSH
36921: LD_INT 28
36923: PUSH
36924: LD_INT 29
36926: PUSH
36927: LD_INT 30
36929: PUSH
36930: LD_INT 31
36932: PUSH
36933: LD_INT 37
36935: PUSH
36936: LD_INT 38
36938: PUSH
36939: LD_INT 32
36941: PUSH
36942: LD_INT 27
36944: PUSH
36945: LD_INT 33
36947: PUSH
36948: LD_INT 69
36950: PUSH
36951: LD_INT 39
36953: PUSH
36954: LD_INT 34
36956: PUSH
36957: LD_INT 40
36959: PUSH
36960: LD_INT 71
36962: PUSH
36963: LD_INT 23
36965: PUSH
36966: LD_INT 44
36968: PUSH
36969: LD_INT 48
36971: PUSH
36972: LD_INT 49
36974: PUSH
36975: LD_INT 50
36977: PUSH
36978: LD_INT 51
36980: PUSH
36981: LD_INT 52
36983: PUSH
36984: LD_INT 53
36986: PUSH
36987: LD_INT 54
36989: PUSH
36990: LD_INT 55
36992: PUSH
36993: LD_INT 56
36995: PUSH
36996: LD_INT 57
36998: PUSH
36999: LD_INT 58
37001: PUSH
37002: LD_INT 59
37004: PUSH
37005: LD_INT 63
37007: PUSH
37008: LD_INT 64
37010: PUSH
37011: LD_INT 65
37013: PUSH
37014: LD_INT 82
37016: PUSH
37017: LD_INT 83
37019: PUSH
37020: LD_INT 84
37022: PUSH
37023: LD_INT 85
37025: PUSH
37026: LD_INT 86
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: ST_TO_ADDR
37084: GO 37087
37086: POP
// if state > - 1 and state < 3 then
37087: LD_VAR 0 3
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: GREATER
37096: PUSH
37097: LD_VAR 0 3
37101: PUSH
37102: LD_INT 3
37104: LESS
37105: AND
37106: IFFALSE 37163
// for i in result do
37108: LD_ADDR_VAR 0 5
37112: PUSH
37113: LD_VAR 0 4
37117: PUSH
37118: FOR_IN
37119: IFFALSE 37161
// if GetTech ( i , side ) <> state then
37121: LD_VAR 0 5
37125: PPUSH
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 321
37135: PUSH
37136: LD_VAR 0 3
37140: NONEQUAL
37141: IFFALSE 37159
// result := result diff i ;
37143: LD_ADDR_VAR 0 4
37147: PUSH
37148: LD_VAR 0 4
37152: PUSH
37153: LD_VAR 0 5
37157: DIFF
37158: ST_TO_ADDR
37159: GO 37118
37161: POP
37162: POP
// end ;
37163: LD_VAR 0 4
37167: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37168: LD_INT 0
37170: PPUSH
37171: PPUSH
37172: PPUSH
// result := true ;
37173: LD_ADDR_VAR 0 3
37177: PUSH
37178: LD_INT 1
37180: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37181: LD_ADDR_VAR 0 5
37185: PUSH
37186: LD_VAR 0 2
37190: PPUSH
37191: CALL_OW 480
37195: ST_TO_ADDR
// if not tmp then
37196: LD_VAR 0 5
37200: NOT
37201: IFFALSE 37205
// exit ;
37203: GO 37254
// for i in tmp do
37205: LD_ADDR_VAR 0 4
37209: PUSH
37210: LD_VAR 0 5
37214: PUSH
37215: FOR_IN
37216: IFFALSE 37252
// if GetTech ( i , side ) <> state_researched then
37218: LD_VAR 0 4
37222: PPUSH
37223: LD_VAR 0 1
37227: PPUSH
37228: CALL_OW 321
37232: PUSH
37233: LD_INT 2
37235: NONEQUAL
37236: IFFALSE 37250
// begin result := false ;
37238: LD_ADDR_VAR 0 3
37242: PUSH
37243: LD_INT 0
37245: ST_TO_ADDR
// exit ;
37246: POP
37247: POP
37248: GO 37254
// end ;
37250: GO 37215
37252: POP
37253: POP
// end ;
37254: LD_VAR 0 3
37258: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37259: LD_INT 0
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
37273: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37274: LD_VAR 0 1
37278: NOT
37279: PUSH
37280: LD_VAR 0 1
37284: PPUSH
37285: CALL_OW 257
37289: PUSH
37290: LD_INT 9
37292: NONEQUAL
37293: OR
37294: IFFALSE 37298
// exit ;
37296: GO 37871
// side := GetSide ( unit ) ;
37298: LD_ADDR_VAR 0 9
37302: PUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 255
37312: ST_TO_ADDR
// tech_space := tech_spacanom ;
37313: LD_ADDR_VAR 0 12
37317: PUSH
37318: LD_INT 29
37320: ST_TO_ADDR
// tech_time := tech_taurad ;
37321: LD_ADDR_VAR 0 13
37325: PUSH
37326: LD_INT 28
37328: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37329: LD_ADDR_VAR 0 11
37333: PUSH
37334: LD_VAR 0 1
37338: PPUSH
37339: CALL_OW 310
37343: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37344: LD_VAR 0 11
37348: PPUSH
37349: CALL_OW 247
37353: PUSH
37354: LD_INT 2
37356: EQUAL
37357: IFFALSE 37361
// exit ;
37359: GO 37871
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37361: LD_ADDR_VAR 0 8
37365: PUSH
37366: LD_INT 81
37368: PUSH
37369: LD_VAR 0 9
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 3
37380: PUSH
37381: LD_INT 21
37383: PUSH
37384: LD_INT 3
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PPUSH
37399: CALL_OW 69
37403: ST_TO_ADDR
// if not tmp then
37404: LD_VAR 0 8
37408: NOT
37409: IFFALSE 37413
// exit ;
37411: GO 37871
// if in_unit then
37413: LD_VAR 0 11
37417: IFFALSE 37441
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37419: LD_ADDR_VAR 0 10
37423: PUSH
37424: LD_VAR 0 8
37428: PPUSH
37429: LD_VAR 0 11
37433: PPUSH
37434: CALL_OW 74
37438: ST_TO_ADDR
37439: GO 37461
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37441: LD_ADDR_VAR 0 10
37445: PUSH
37446: LD_VAR 0 8
37450: PPUSH
37451: LD_VAR 0 1
37455: PPUSH
37456: CALL_OW 74
37460: ST_TO_ADDR
// if not enemy then
37461: LD_VAR 0 10
37465: NOT
37466: IFFALSE 37470
// exit ;
37468: GO 37871
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37470: LD_VAR 0 11
37474: PUSH
37475: LD_VAR 0 11
37479: PPUSH
37480: LD_VAR 0 10
37484: PPUSH
37485: CALL_OW 296
37489: PUSH
37490: LD_INT 13
37492: GREATER
37493: AND
37494: PUSH
37495: LD_VAR 0 1
37499: PPUSH
37500: LD_VAR 0 10
37504: PPUSH
37505: CALL_OW 296
37509: PUSH
37510: LD_INT 12
37512: GREATER
37513: OR
37514: IFFALSE 37518
// exit ;
37516: GO 37871
// missile := [ 1 ] ;
37518: LD_ADDR_VAR 0 14
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37529: LD_VAR 0 9
37533: PPUSH
37534: LD_VAR 0 12
37538: PPUSH
37539: CALL_OW 325
37543: IFFALSE 37572
// missile := Insert ( missile , missile + 1 , 2 ) ;
37545: LD_ADDR_VAR 0 14
37549: PUSH
37550: LD_VAR 0 14
37554: PPUSH
37555: LD_VAR 0 14
37559: PUSH
37560: LD_INT 1
37562: PLUS
37563: PPUSH
37564: LD_INT 2
37566: PPUSH
37567: CALL_OW 2
37571: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37572: LD_VAR 0 9
37576: PPUSH
37577: LD_VAR 0 13
37581: PPUSH
37582: CALL_OW 325
37586: PUSH
37587: LD_VAR 0 10
37591: PPUSH
37592: CALL_OW 255
37596: PPUSH
37597: LD_VAR 0 13
37601: PPUSH
37602: CALL_OW 325
37606: NOT
37607: AND
37608: IFFALSE 37637
// missile := Insert ( missile , missile + 1 , 3 ) ;
37610: LD_ADDR_VAR 0 14
37614: PUSH
37615: LD_VAR 0 14
37619: PPUSH
37620: LD_VAR 0 14
37624: PUSH
37625: LD_INT 1
37627: PLUS
37628: PPUSH
37629: LD_INT 3
37631: PPUSH
37632: CALL_OW 2
37636: ST_TO_ADDR
// if missile < 2 then
37637: LD_VAR 0 14
37641: PUSH
37642: LD_INT 2
37644: LESS
37645: IFFALSE 37649
// exit ;
37647: GO 37871
// x := GetX ( enemy ) ;
37649: LD_ADDR_VAR 0 4
37653: PUSH
37654: LD_VAR 0 10
37658: PPUSH
37659: CALL_OW 250
37663: ST_TO_ADDR
// y := GetY ( enemy ) ;
37664: LD_ADDR_VAR 0 5
37668: PUSH
37669: LD_VAR 0 10
37673: PPUSH
37674: CALL_OW 251
37678: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37679: LD_ADDR_VAR 0 6
37683: PUSH
37684: LD_VAR 0 4
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PPUSH
37693: LD_INT 1
37695: PPUSH
37696: CALL_OW 12
37700: PLUS
37701: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37702: LD_ADDR_VAR 0 7
37706: PUSH
37707: LD_VAR 0 5
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PPUSH
37716: LD_INT 1
37718: PPUSH
37719: CALL_OW 12
37723: PLUS
37724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37725: LD_VAR 0 6
37729: PPUSH
37730: LD_VAR 0 7
37734: PPUSH
37735: CALL_OW 488
37739: NOT
37740: IFFALSE 37762
// begin _x := x ;
37742: LD_ADDR_VAR 0 6
37746: PUSH
37747: LD_VAR 0 4
37751: ST_TO_ADDR
// _y := y ;
37752: LD_ADDR_VAR 0 7
37756: PUSH
37757: LD_VAR 0 5
37761: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37762: LD_ADDR_VAR 0 3
37766: PUSH
37767: LD_INT 1
37769: PPUSH
37770: LD_VAR 0 14
37774: PPUSH
37775: CALL_OW 12
37779: ST_TO_ADDR
// case i of 1 :
37780: LD_VAR 0 3
37784: PUSH
37785: LD_INT 1
37787: DOUBLE
37788: EQUAL
37789: IFTRUE 37793
37791: GO 37810
37793: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37794: LD_VAR 0 1
37798: PPUSH
37799: LD_VAR 0 10
37803: PPUSH
37804: CALL_OW 115
37808: GO 37871
37810: LD_INT 2
37812: DOUBLE
37813: EQUAL
37814: IFTRUE 37818
37816: GO 37840
37818: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37819: LD_VAR 0 1
37823: PPUSH
37824: LD_VAR 0 6
37828: PPUSH
37829: LD_VAR 0 7
37833: PPUSH
37834: CALL_OW 153
37838: GO 37871
37840: LD_INT 3
37842: DOUBLE
37843: EQUAL
37844: IFTRUE 37848
37846: GO 37870
37848: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37849: LD_VAR 0 1
37853: PPUSH
37854: LD_VAR 0 6
37858: PPUSH
37859: LD_VAR 0 7
37863: PPUSH
37864: CALL_OW 154
37868: GO 37871
37870: POP
// end ;
37871: LD_VAR 0 2
37875: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37876: LD_INT 0
37878: PPUSH
37879: PPUSH
37880: PPUSH
37881: PPUSH
37882: PPUSH
37883: PPUSH
// if not unit or not building then
37884: LD_VAR 0 1
37888: NOT
37889: PUSH
37890: LD_VAR 0 2
37894: NOT
37895: OR
37896: IFFALSE 37900
// exit ;
37898: GO 38058
// x := GetX ( building ) ;
37900: LD_ADDR_VAR 0 5
37904: PUSH
37905: LD_VAR 0 2
37909: PPUSH
37910: CALL_OW 250
37914: ST_TO_ADDR
// y := GetY ( building ) ;
37915: LD_ADDR_VAR 0 6
37919: PUSH
37920: LD_VAR 0 2
37924: PPUSH
37925: CALL_OW 251
37929: ST_TO_ADDR
// for i = 0 to 5 do
37930: LD_ADDR_VAR 0 4
37934: PUSH
37935: DOUBLE
37936: LD_INT 0
37938: DEC
37939: ST_TO_ADDR
37940: LD_INT 5
37942: PUSH
37943: FOR_TO
37944: IFFALSE 38056
// begin _x := ShiftX ( x , i , 3 ) ;
37946: LD_ADDR_VAR 0 7
37950: PUSH
37951: LD_VAR 0 5
37955: PPUSH
37956: LD_VAR 0 4
37960: PPUSH
37961: LD_INT 3
37963: PPUSH
37964: CALL_OW 272
37968: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37969: LD_ADDR_VAR 0 8
37973: PUSH
37974: LD_VAR 0 6
37978: PPUSH
37979: LD_VAR 0 4
37983: PPUSH
37984: LD_INT 3
37986: PPUSH
37987: CALL_OW 273
37991: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37992: LD_VAR 0 7
37996: PPUSH
37997: LD_VAR 0 8
38001: PPUSH
38002: CALL_OW 488
38006: NOT
38007: IFFALSE 38011
// continue ;
38009: GO 37943
// if HexInfo ( _x , _y ) = 0 then
38011: LD_VAR 0 7
38015: PPUSH
38016: LD_VAR 0 8
38020: PPUSH
38021: CALL_OW 428
38025: PUSH
38026: LD_INT 0
38028: EQUAL
38029: IFFALSE 38054
// begin ComMoveXY ( unit , _x , _y ) ;
38031: LD_VAR 0 1
38035: PPUSH
38036: LD_VAR 0 7
38040: PPUSH
38041: LD_VAR 0 8
38045: PPUSH
38046: CALL_OW 111
// exit ;
38050: POP
38051: POP
38052: GO 38058
// end ; end ;
38054: GO 37943
38056: POP
38057: POP
// end ;
38058: LD_VAR 0 3
38062: RET
// export function ScanBase ( side , base_area ) ; begin
38063: LD_INT 0
38065: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_VAR 0 2
38075: PPUSH
38076: LD_INT 81
38078: PUSH
38079: LD_VAR 0 1
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PPUSH
38088: CALL_OW 70
38092: ST_TO_ADDR
// end ;
38093: LD_VAR 0 3
38097: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38098: LD_INT 0
38100: PPUSH
38101: PPUSH
38102: PPUSH
38103: PPUSH
// result := false ;
38104: LD_ADDR_VAR 0 2
38108: PUSH
38109: LD_INT 0
38111: ST_TO_ADDR
// side := GetSide ( unit ) ;
38112: LD_ADDR_VAR 0 3
38116: PUSH
38117: LD_VAR 0 1
38121: PPUSH
38122: CALL_OW 255
38126: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38127: LD_ADDR_VAR 0 4
38131: PUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL_OW 248
38141: ST_TO_ADDR
// case nat of 1 :
38142: LD_VAR 0 4
38146: PUSH
38147: LD_INT 1
38149: DOUBLE
38150: EQUAL
38151: IFTRUE 38155
38153: GO 38166
38155: POP
// tech := tech_lassight ; 2 :
38156: LD_ADDR_VAR 0 5
38160: PUSH
38161: LD_INT 12
38163: ST_TO_ADDR
38164: GO 38205
38166: LD_INT 2
38168: DOUBLE
38169: EQUAL
38170: IFTRUE 38174
38172: GO 38185
38174: POP
// tech := tech_mortar ; 3 :
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: LD_INT 41
38182: ST_TO_ADDR
38183: GO 38205
38185: LD_INT 3
38187: DOUBLE
38188: EQUAL
38189: IFTRUE 38193
38191: GO 38204
38193: POP
// tech := tech_bazooka ; end ;
38194: LD_ADDR_VAR 0 5
38198: PUSH
38199: LD_INT 44
38201: ST_TO_ADDR
38202: GO 38205
38204: POP
// if Researched ( side , tech ) then
38205: LD_VAR 0 3
38209: PPUSH
38210: LD_VAR 0 5
38214: PPUSH
38215: CALL_OW 325
38219: IFFALSE 38246
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38221: LD_ADDR_VAR 0 2
38225: PUSH
38226: LD_INT 5
38228: PUSH
38229: LD_INT 8
38231: PUSH
38232: LD_INT 9
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: LD_VAR 0 4
38244: ARRAY
38245: ST_TO_ADDR
// end ;
38246: LD_VAR 0 2
38250: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
38255: PPUSH
// if not mines then
38256: LD_VAR 0 2
38260: NOT
38261: IFFALSE 38265
// exit ;
38263: GO 38409
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38265: LD_ADDR_VAR 0 5
38269: PUSH
38270: LD_INT 81
38272: PUSH
38273: LD_VAR 0 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: LD_INT 21
38287: PUSH
38288: LD_INT 3
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PPUSH
38303: CALL_OW 69
38307: ST_TO_ADDR
// for i in mines do
38308: LD_ADDR_VAR 0 4
38312: PUSH
38313: LD_VAR 0 2
38317: PUSH
38318: FOR_IN
38319: IFFALSE 38407
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38321: LD_VAR 0 4
38325: PUSH
38326: LD_INT 1
38328: ARRAY
38329: PPUSH
38330: LD_VAR 0 4
38334: PUSH
38335: LD_INT 2
38337: ARRAY
38338: PPUSH
38339: CALL_OW 458
38343: NOT
38344: IFFALSE 38348
// continue ;
38346: GO 38318
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38348: LD_VAR 0 4
38352: PUSH
38353: LD_INT 1
38355: ARRAY
38356: PPUSH
38357: LD_VAR 0 4
38361: PUSH
38362: LD_INT 2
38364: ARRAY
38365: PPUSH
38366: CALL_OW 428
38370: PUSH
38371: LD_VAR 0 5
38375: IN
38376: IFFALSE 38405
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38378: LD_VAR 0 4
38382: PUSH
38383: LD_INT 1
38385: ARRAY
38386: PPUSH
38387: LD_VAR 0 4
38391: PUSH
38392: LD_INT 2
38394: ARRAY
38395: PPUSH
38396: LD_VAR 0 1
38400: PPUSH
38401: CALL_OW 456
// end ;
38405: GO 38318
38407: POP
38408: POP
// end ;
38409: LD_VAR 0 3
38413: RET
// export function Count ( array ) ; var i ; begin
38414: LD_INT 0
38416: PPUSH
38417: PPUSH
// result := 0 ;
38418: LD_ADDR_VAR 0 2
38422: PUSH
38423: LD_INT 0
38425: ST_TO_ADDR
// for i in array do
38426: LD_ADDR_VAR 0 3
38430: PUSH
38431: LD_VAR 0 1
38435: PUSH
38436: FOR_IN
38437: IFFALSE 38461
// if i then
38439: LD_VAR 0 3
38443: IFFALSE 38459
// result := result + 1 ;
38445: LD_ADDR_VAR 0 2
38449: PUSH
38450: LD_VAR 0 2
38454: PUSH
38455: LD_INT 1
38457: PLUS
38458: ST_TO_ADDR
38459: GO 38436
38461: POP
38462: POP
// end ;
38463: LD_VAR 0 2
38467: RET
// export function IsEmpty ( building ) ; begin
38468: LD_INT 0
38470: PPUSH
// if not building then
38471: LD_VAR 0 1
38475: NOT
38476: IFFALSE 38480
// exit ;
38478: GO 38523
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38480: LD_ADDR_VAR 0 2
38484: PUSH
38485: LD_VAR 0 1
38489: PUSH
38490: LD_INT 22
38492: PUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 255
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 58
38509: PUSH
38510: EMPTY
38511: LIST
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PPUSH
38517: CALL_OW 69
38521: IN
38522: ST_TO_ADDR
// end ;
38523: LD_VAR 0 2
38527: RET
// export function IsNotFull ( building ) ; begin
38528: LD_INT 0
38530: PPUSH
// if not building then
38531: LD_VAR 0 1
38535: NOT
38536: IFFALSE 38540
// exit ;
38538: GO 38559
// result := UnitsInside ( building ) < 6 ;
38540: LD_ADDR_VAR 0 2
38544: PUSH
38545: LD_VAR 0 1
38549: PPUSH
38550: CALL_OW 313
38554: PUSH
38555: LD_INT 6
38557: LESS
38558: ST_TO_ADDR
// end ;
38559: LD_VAR 0 2
38563: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38564: LD_INT 0
38566: PPUSH
38567: PPUSH
38568: PPUSH
38569: PPUSH
// tmp := [ ] ;
38570: LD_ADDR_VAR 0 3
38574: PUSH
38575: EMPTY
38576: ST_TO_ADDR
// list := [ ] ;
38577: LD_ADDR_VAR 0 5
38581: PUSH
38582: EMPTY
38583: ST_TO_ADDR
// for i = 16 to 25 do
38584: LD_ADDR_VAR 0 4
38588: PUSH
38589: DOUBLE
38590: LD_INT 16
38592: DEC
38593: ST_TO_ADDR
38594: LD_INT 25
38596: PUSH
38597: FOR_TO
38598: IFFALSE 38671
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38600: LD_ADDR_VAR 0 3
38604: PUSH
38605: LD_VAR 0 3
38609: PUSH
38610: LD_INT 22
38612: PUSH
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 255
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 91
38629: PUSH
38630: LD_VAR 0 1
38634: PUSH
38635: LD_INT 6
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 30
38645: PUSH
38646: LD_VAR 0 4
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: PUSH
38660: EMPTY
38661: LIST
38662: PPUSH
38663: CALL_OW 69
38667: ADD
38668: ST_TO_ADDR
38669: GO 38597
38671: POP
38672: POP
// for i = 1 to tmp do
38673: LD_ADDR_VAR 0 4
38677: PUSH
38678: DOUBLE
38679: LD_INT 1
38681: DEC
38682: ST_TO_ADDR
38683: LD_VAR 0 3
38687: PUSH
38688: FOR_TO
38689: IFFALSE 38777
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38691: LD_ADDR_VAR 0 5
38695: PUSH
38696: LD_VAR 0 5
38700: PUSH
38701: LD_VAR 0 3
38705: PUSH
38706: LD_VAR 0 4
38710: ARRAY
38711: PPUSH
38712: CALL_OW 266
38716: PUSH
38717: LD_VAR 0 3
38721: PUSH
38722: LD_VAR 0 4
38726: ARRAY
38727: PPUSH
38728: CALL_OW 250
38732: PUSH
38733: LD_VAR 0 3
38737: PUSH
38738: LD_VAR 0 4
38742: ARRAY
38743: PPUSH
38744: CALL_OW 251
38748: PUSH
38749: LD_VAR 0 3
38753: PUSH
38754: LD_VAR 0 4
38758: ARRAY
38759: PPUSH
38760: CALL_OW 254
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: PUSH
38771: EMPTY
38772: LIST
38773: ADD
38774: ST_TO_ADDR
38775: GO 38688
38777: POP
38778: POP
// result := list ;
38779: LD_ADDR_VAR 0 2
38783: PUSH
38784: LD_VAR 0 5
38788: ST_TO_ADDR
// end ;
38789: LD_VAR 0 2
38793: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38794: LD_INT 0
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
// if not factory then
38803: LD_VAR 0 1
38807: NOT
38808: IFFALSE 38812
// exit ;
38810: GO 39405
// if control = control_apeman then
38812: LD_VAR 0 4
38816: PUSH
38817: LD_INT 5
38819: EQUAL
38820: IFFALSE 38929
// begin tmp := UnitsInside ( factory ) ;
38822: LD_ADDR_VAR 0 8
38826: PUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: CALL_OW 313
38836: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38837: LD_VAR 0 8
38841: PPUSH
38842: LD_INT 25
38844: PUSH
38845: LD_INT 12
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PPUSH
38852: CALL_OW 72
38856: NOT
38857: IFFALSE 38867
// control := control_manual ;
38859: LD_ADDR_VAR 0 4
38863: PUSH
38864: LD_INT 1
38866: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38867: LD_ADDR_VAR 0 8
38871: PUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: CALL 38564 0 1
38881: ST_TO_ADDR
// if tmp then
38882: LD_VAR 0 8
38886: IFFALSE 38929
// begin for i in tmp do
38888: LD_ADDR_VAR 0 7
38892: PUSH
38893: LD_VAR 0 8
38897: PUSH
38898: FOR_IN
38899: IFFALSE 38927
// if i [ 1 ] = b_ext_radio then
38901: LD_VAR 0 7
38905: PUSH
38906: LD_INT 1
38908: ARRAY
38909: PUSH
38910: LD_INT 22
38912: EQUAL
38913: IFFALSE 38925
// begin control := control_remote ;
38915: LD_ADDR_VAR 0 4
38919: PUSH
38920: LD_INT 2
38922: ST_TO_ADDR
// break ;
38923: GO 38927
// end ;
38925: GO 38898
38927: POP
38928: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38929: LD_VAR 0 1
38933: PPUSH
38934: LD_VAR 0 2
38938: PPUSH
38939: LD_VAR 0 3
38943: PPUSH
38944: LD_VAR 0 4
38948: PPUSH
38949: LD_VAR 0 5
38953: PPUSH
38954: CALL_OW 448
38958: IFFALSE 38993
// begin result := [ chassis , engine , control , weapon ] ;
38960: LD_ADDR_VAR 0 6
38964: PUSH
38965: LD_VAR 0 2
38969: PUSH
38970: LD_VAR 0 3
38974: PUSH
38975: LD_VAR 0 4
38979: PUSH
38980: LD_VAR 0 5
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// exit ;
38991: GO 39405
// end ; _chassis := AvailableChassisList ( factory ) ;
38993: LD_ADDR_VAR 0 9
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 475
39007: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39008: LD_ADDR_VAR 0 11
39012: PUSH
39013: LD_VAR 0 1
39017: PPUSH
39018: CALL_OW 476
39022: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39023: LD_ADDR_VAR 0 12
39027: PUSH
39028: LD_VAR 0 1
39032: PPUSH
39033: CALL_OW 477
39037: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39038: LD_ADDR_VAR 0 10
39042: PUSH
39043: LD_VAR 0 1
39047: PPUSH
39048: CALL_OW 478
39052: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39053: LD_VAR 0 9
39057: NOT
39058: PUSH
39059: LD_VAR 0 11
39063: NOT
39064: OR
39065: PUSH
39066: LD_VAR 0 12
39070: NOT
39071: OR
39072: PUSH
39073: LD_VAR 0 10
39077: NOT
39078: OR
39079: IFFALSE 39114
// begin result := [ chassis , engine , control , weapon ] ;
39081: LD_ADDR_VAR 0 6
39085: PUSH
39086: LD_VAR 0 2
39090: PUSH
39091: LD_VAR 0 3
39095: PUSH
39096: LD_VAR 0 4
39100: PUSH
39101: LD_VAR 0 5
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// exit ;
39112: GO 39405
// end ; if not chassis in _chassis then
39114: LD_VAR 0 2
39118: PUSH
39119: LD_VAR 0 9
39123: IN
39124: NOT
39125: IFFALSE 39151
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39127: LD_ADDR_VAR 0 2
39131: PUSH
39132: LD_VAR 0 9
39136: PUSH
39137: LD_INT 1
39139: PPUSH
39140: LD_VAR 0 9
39144: PPUSH
39145: CALL_OW 12
39149: ARRAY
39150: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39151: LD_VAR 0 2
39155: PPUSH
39156: LD_VAR 0 3
39160: PPUSH
39161: CALL 39410 0 2
39165: NOT
39166: IFFALSE 39225
// repeat engine := _engine [ 1 ] ;
39168: LD_ADDR_VAR 0 3
39172: PUSH
39173: LD_VAR 0 11
39177: PUSH
39178: LD_INT 1
39180: ARRAY
39181: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39182: LD_ADDR_VAR 0 11
39186: PUSH
39187: LD_VAR 0 11
39191: PPUSH
39192: LD_INT 1
39194: PPUSH
39195: CALL_OW 3
39199: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39200: LD_VAR 0 2
39204: PPUSH
39205: LD_VAR 0 3
39209: PPUSH
39210: CALL 39410 0 2
39214: PUSH
39215: LD_VAR 0 11
39219: PUSH
39220: EMPTY
39221: EQUAL
39222: OR
39223: IFFALSE 39168
// if not control in _control then
39225: LD_VAR 0 4
39229: PUSH
39230: LD_VAR 0 12
39234: IN
39235: NOT
39236: IFFALSE 39262
// control := _control [ rand ( 1 , _control ) ] ;
39238: LD_ADDR_VAR 0 4
39242: PUSH
39243: LD_VAR 0 12
39247: PUSH
39248: LD_INT 1
39250: PPUSH
39251: LD_VAR 0 12
39255: PPUSH
39256: CALL_OW 12
39260: ARRAY
39261: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39262: LD_VAR 0 2
39266: PPUSH
39267: LD_VAR 0 5
39271: PPUSH
39272: CALL 39630 0 2
39276: NOT
39277: IFFALSE 39336
// repeat weapon := _weapon [ 1 ] ;
39279: LD_ADDR_VAR 0 5
39283: PUSH
39284: LD_VAR 0 10
39288: PUSH
39289: LD_INT 1
39291: ARRAY
39292: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39293: LD_ADDR_VAR 0 10
39297: PUSH
39298: LD_VAR 0 10
39302: PPUSH
39303: LD_INT 1
39305: PPUSH
39306: CALL_OW 3
39310: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39311: LD_VAR 0 2
39315: PPUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: CALL 39630 0 2
39325: PUSH
39326: LD_VAR 0 10
39330: PUSH
39331: EMPTY
39332: EQUAL
39333: OR
39334: IFFALSE 39279
// result := [ ] ;
39336: LD_ADDR_VAR 0 6
39340: PUSH
39341: EMPTY
39342: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39343: LD_VAR 0 1
39347: PPUSH
39348: LD_VAR 0 2
39352: PPUSH
39353: LD_VAR 0 3
39357: PPUSH
39358: LD_VAR 0 4
39362: PPUSH
39363: LD_VAR 0 5
39367: PPUSH
39368: CALL_OW 448
39372: IFFALSE 39405
// result := [ chassis , engine , control , weapon ] ;
39374: LD_ADDR_VAR 0 6
39378: PUSH
39379: LD_VAR 0 2
39383: PUSH
39384: LD_VAR 0 3
39388: PUSH
39389: LD_VAR 0 4
39393: PUSH
39394: LD_VAR 0 5
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: ST_TO_ADDR
// end ;
39405: LD_VAR 0 6
39409: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39410: LD_INT 0
39412: PPUSH
// if not chassis or not engine then
39413: LD_VAR 0 1
39417: NOT
39418: PUSH
39419: LD_VAR 0 2
39423: NOT
39424: OR
39425: IFFALSE 39429
// exit ;
39427: GO 39625
// case engine of engine_solar :
39429: LD_VAR 0 2
39433: PUSH
39434: LD_INT 2
39436: DOUBLE
39437: EQUAL
39438: IFTRUE 39442
39440: GO 39480
39442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39443: LD_ADDR_VAR 0 3
39447: PUSH
39448: LD_INT 11
39450: PUSH
39451: LD_INT 12
39453: PUSH
39454: LD_INT 13
39456: PUSH
39457: LD_INT 14
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: ST_TO_ADDR
39478: GO 39609
39480: LD_INT 1
39482: DOUBLE
39483: EQUAL
39484: IFTRUE 39488
39486: GO 39550
39488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39489: LD_ADDR_VAR 0 3
39493: PUSH
39494: LD_INT 11
39496: PUSH
39497: LD_INT 12
39499: PUSH
39500: LD_INT 13
39502: PUSH
39503: LD_INT 14
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: LD_INT 3
39514: PUSH
39515: LD_INT 4
39517: PUSH
39518: LD_INT 5
39520: PUSH
39521: LD_INT 21
39523: PUSH
39524: LD_INT 23
39526: PUSH
39527: LD_INT 22
39529: PUSH
39530: LD_INT 24
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: ST_TO_ADDR
39548: GO 39609
39550: LD_INT 3
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 39608
39558: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39559: LD_ADDR_VAR 0 3
39563: PUSH
39564: LD_INT 13
39566: PUSH
39567: LD_INT 14
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 3
39575: PUSH
39576: LD_INT 4
39578: PUSH
39579: LD_INT 5
39581: PUSH
39582: LD_INT 21
39584: PUSH
39585: LD_INT 22
39587: PUSH
39588: LD_INT 23
39590: PUSH
39591: LD_INT 24
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: ST_TO_ADDR
39606: GO 39609
39608: POP
// result := ( chassis in result ) ;
39609: LD_ADDR_VAR 0 3
39613: PUSH
39614: LD_VAR 0 1
39618: PUSH
39619: LD_VAR 0 3
39623: IN
39624: ST_TO_ADDR
// end ;
39625: LD_VAR 0 3
39629: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39630: LD_INT 0
39632: PPUSH
// if not chassis or not weapon then
39633: LD_VAR 0 1
39637: NOT
39638: PUSH
39639: LD_VAR 0 2
39643: NOT
39644: OR
39645: IFFALSE 39649
// exit ;
39647: GO 40675
// case weapon of us_machine_gun :
39649: LD_VAR 0 2
39653: PUSH
39654: LD_INT 2
39656: DOUBLE
39657: EQUAL
39658: IFTRUE 39662
39660: GO 39692
39662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39663: LD_ADDR_VAR 0 3
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 3
39676: PUSH
39677: LD_INT 4
39679: PUSH
39680: LD_INT 5
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: ST_TO_ADDR
39690: GO 40659
39692: LD_INT 3
39694: DOUBLE
39695: EQUAL
39696: IFTRUE 39700
39698: GO 39730
39700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39701: LD_ADDR_VAR 0 3
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 3
39714: PUSH
39715: LD_INT 4
39717: PUSH
39718: LD_INT 5
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: ST_TO_ADDR
39728: GO 40659
39730: LD_INT 11
39732: DOUBLE
39733: EQUAL
39734: IFTRUE 39738
39736: GO 39768
39738: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39739: LD_ADDR_VAR 0 3
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: LD_INT 3
39752: PUSH
39753: LD_INT 4
39755: PUSH
39756: LD_INT 5
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: ST_TO_ADDR
39766: GO 40659
39768: LD_INT 4
39770: DOUBLE
39771: EQUAL
39772: IFTRUE 39776
39774: GO 39802
39776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: LD_INT 4
39790: PUSH
39791: LD_INT 5
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: ST_TO_ADDR
39800: GO 40659
39802: LD_INT 5
39804: DOUBLE
39805: EQUAL
39806: IFTRUE 39810
39808: GO 39836
39810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39811: LD_ADDR_VAR 0 3
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: LD_INT 4
39824: PUSH
39825: LD_INT 5
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: ST_TO_ADDR
39834: GO 40659
39836: LD_INT 9
39838: DOUBLE
39839: EQUAL
39840: IFTRUE 39844
39842: GO 39870
39844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: LD_INT 3
39855: PUSH
39856: LD_INT 4
39858: PUSH
39859: LD_INT 5
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: ST_TO_ADDR
39868: GO 40659
39870: LD_INT 7
39872: DOUBLE
39873: EQUAL
39874: IFTRUE 39878
39876: GO 39904
39878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39879: LD_ADDR_VAR 0 3
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: LD_INT 3
39889: PUSH
39890: LD_INT 4
39892: PUSH
39893: LD_INT 5
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: ST_TO_ADDR
39902: GO 40659
39904: LD_INT 12
39906: DOUBLE
39907: EQUAL
39908: IFTRUE 39912
39910: GO 39938
39912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39913: LD_ADDR_VAR 0 3
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: LD_INT 3
39923: PUSH
39924: LD_INT 4
39926: PUSH
39927: LD_INT 5
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: ST_TO_ADDR
39936: GO 40659
39938: LD_INT 13
39940: DOUBLE
39941: EQUAL
39942: IFTRUE 39946
39944: GO 39972
39946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39947: LD_ADDR_VAR 0 3
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: LD_INT 4
39960: PUSH
39961: LD_INT 5
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: ST_TO_ADDR
39970: GO 40659
39972: LD_INT 14
39974: DOUBLE
39975: EQUAL
39976: IFTRUE 39980
39978: GO 39998
39980: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39981: LD_ADDR_VAR 0 3
39985: PUSH
39986: LD_INT 4
39988: PUSH
39989: LD_INT 5
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: ST_TO_ADDR
39996: GO 40659
39998: LD_INT 6
40000: DOUBLE
40001: EQUAL
40002: IFTRUE 40006
40004: GO 40024
40006: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40007: LD_ADDR_VAR 0 3
40011: PUSH
40012: LD_INT 4
40014: PUSH
40015: LD_INT 5
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: ST_TO_ADDR
40022: GO 40659
40024: LD_INT 10
40026: DOUBLE
40027: EQUAL
40028: IFTRUE 40032
40030: GO 40050
40032: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40033: LD_ADDR_VAR 0 3
40037: PUSH
40038: LD_INT 4
40040: PUSH
40041: LD_INT 5
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: ST_TO_ADDR
40048: GO 40659
40050: LD_INT 22
40052: DOUBLE
40053: EQUAL
40054: IFTRUE 40058
40056: GO 40084
40058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40059: LD_ADDR_VAR 0 3
40063: PUSH
40064: LD_INT 11
40066: PUSH
40067: LD_INT 12
40069: PUSH
40070: LD_INT 13
40072: PUSH
40073: LD_INT 14
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: ST_TO_ADDR
40082: GO 40659
40084: LD_INT 23
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40092
40090: GO 40118
40092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40093: LD_ADDR_VAR 0 3
40097: PUSH
40098: LD_INT 11
40100: PUSH
40101: LD_INT 12
40103: PUSH
40104: LD_INT 13
40106: PUSH
40107: LD_INT 14
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: ST_TO_ADDR
40116: GO 40659
40118: LD_INT 24
40120: DOUBLE
40121: EQUAL
40122: IFTRUE 40126
40124: GO 40152
40126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40127: LD_ADDR_VAR 0 3
40131: PUSH
40132: LD_INT 11
40134: PUSH
40135: LD_INT 12
40137: PUSH
40138: LD_INT 13
40140: PUSH
40141: LD_INT 14
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: ST_TO_ADDR
40150: GO 40659
40152: LD_INT 30
40154: DOUBLE
40155: EQUAL
40156: IFTRUE 40160
40158: GO 40186
40160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40161: LD_ADDR_VAR 0 3
40165: PUSH
40166: LD_INT 11
40168: PUSH
40169: LD_INT 12
40171: PUSH
40172: LD_INT 13
40174: PUSH
40175: LD_INT 14
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: ST_TO_ADDR
40184: GO 40659
40186: LD_INT 25
40188: DOUBLE
40189: EQUAL
40190: IFTRUE 40194
40192: GO 40212
40194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40195: LD_ADDR_VAR 0 3
40199: PUSH
40200: LD_INT 13
40202: PUSH
40203: LD_INT 14
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: ST_TO_ADDR
40210: GO 40659
40212: LD_INT 27
40214: DOUBLE
40215: EQUAL
40216: IFTRUE 40220
40218: GO 40238
40220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40221: LD_ADDR_VAR 0 3
40225: PUSH
40226: LD_INT 13
40228: PUSH
40229: LD_INT 14
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: ST_TO_ADDR
40236: GO 40659
40238: LD_INT 28
40240: DOUBLE
40241: EQUAL
40242: IFTRUE 40246
40244: GO 40264
40246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40247: LD_ADDR_VAR 0 3
40251: PUSH
40252: LD_INT 13
40254: PUSH
40255: LD_INT 14
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: ST_TO_ADDR
40262: GO 40659
40264: LD_INT 29
40266: DOUBLE
40267: EQUAL
40268: IFTRUE 40272
40270: GO 40290
40272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40273: LD_ADDR_VAR 0 3
40277: PUSH
40278: LD_INT 13
40280: PUSH
40281: LD_INT 14
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: ST_TO_ADDR
40288: GO 40659
40290: LD_INT 31
40292: DOUBLE
40293: EQUAL
40294: IFTRUE 40298
40296: GO 40316
40298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40299: LD_ADDR_VAR 0 3
40303: PUSH
40304: LD_INT 13
40306: PUSH
40307: LD_INT 14
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: ST_TO_ADDR
40314: GO 40659
40316: LD_INT 26
40318: DOUBLE
40319: EQUAL
40320: IFTRUE 40324
40322: GO 40342
40324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40325: LD_ADDR_VAR 0 3
40329: PUSH
40330: LD_INT 13
40332: PUSH
40333: LD_INT 14
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: ST_TO_ADDR
40340: GO 40659
40342: LD_INT 42
40344: DOUBLE
40345: EQUAL
40346: IFTRUE 40350
40348: GO 40376
40350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40351: LD_ADDR_VAR 0 3
40355: PUSH
40356: LD_INT 21
40358: PUSH
40359: LD_INT 22
40361: PUSH
40362: LD_INT 23
40364: PUSH
40365: LD_INT 24
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: ST_TO_ADDR
40374: GO 40659
40376: LD_INT 43
40378: DOUBLE
40379: EQUAL
40380: IFTRUE 40384
40382: GO 40410
40384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40385: LD_ADDR_VAR 0 3
40389: PUSH
40390: LD_INT 21
40392: PUSH
40393: LD_INT 22
40395: PUSH
40396: LD_INT 23
40398: PUSH
40399: LD_INT 24
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: ST_TO_ADDR
40408: GO 40659
40410: LD_INT 44
40412: DOUBLE
40413: EQUAL
40414: IFTRUE 40418
40416: GO 40444
40418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40419: LD_ADDR_VAR 0 3
40423: PUSH
40424: LD_INT 21
40426: PUSH
40427: LD_INT 22
40429: PUSH
40430: LD_INT 23
40432: PUSH
40433: LD_INT 24
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: ST_TO_ADDR
40442: GO 40659
40444: LD_INT 45
40446: DOUBLE
40447: EQUAL
40448: IFTRUE 40452
40450: GO 40478
40452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_INT 21
40460: PUSH
40461: LD_INT 22
40463: PUSH
40464: LD_INT 23
40466: PUSH
40467: LD_INT 24
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: ST_TO_ADDR
40476: GO 40659
40478: LD_INT 49
40480: DOUBLE
40481: EQUAL
40482: IFTRUE 40486
40484: GO 40512
40486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40487: LD_ADDR_VAR 0 3
40491: PUSH
40492: LD_INT 21
40494: PUSH
40495: LD_INT 22
40497: PUSH
40498: LD_INT 23
40500: PUSH
40501: LD_INT 24
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: ST_TO_ADDR
40510: GO 40659
40512: LD_INT 51
40514: DOUBLE
40515: EQUAL
40516: IFTRUE 40520
40518: GO 40546
40520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40521: LD_ADDR_VAR 0 3
40525: PUSH
40526: LD_INT 21
40528: PUSH
40529: LD_INT 22
40531: PUSH
40532: LD_INT 23
40534: PUSH
40535: LD_INT 24
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: ST_TO_ADDR
40544: GO 40659
40546: LD_INT 52
40548: DOUBLE
40549: EQUAL
40550: IFTRUE 40554
40552: GO 40580
40554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40555: LD_ADDR_VAR 0 3
40559: PUSH
40560: LD_INT 21
40562: PUSH
40563: LD_INT 22
40565: PUSH
40566: LD_INT 23
40568: PUSH
40569: LD_INT 24
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: ST_TO_ADDR
40578: GO 40659
40580: LD_INT 53
40582: DOUBLE
40583: EQUAL
40584: IFTRUE 40588
40586: GO 40606
40588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40589: LD_ADDR_VAR 0 3
40593: PUSH
40594: LD_INT 23
40596: PUSH
40597: LD_INT 24
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: ST_TO_ADDR
40604: GO 40659
40606: LD_INT 46
40608: DOUBLE
40609: EQUAL
40610: IFTRUE 40614
40612: GO 40632
40614: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40615: LD_ADDR_VAR 0 3
40619: PUSH
40620: LD_INT 23
40622: PUSH
40623: LD_INT 24
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: ST_TO_ADDR
40630: GO 40659
40632: LD_INT 47
40634: DOUBLE
40635: EQUAL
40636: IFTRUE 40640
40638: GO 40658
40640: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40641: LD_ADDR_VAR 0 3
40645: PUSH
40646: LD_INT 23
40648: PUSH
40649: LD_INT 24
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: ST_TO_ADDR
40656: GO 40659
40658: POP
// result := ( chassis in result ) ;
40659: LD_ADDR_VAR 0 3
40663: PUSH
40664: LD_VAR 0 1
40668: PUSH
40669: LD_VAR 0 3
40673: IN
40674: ST_TO_ADDR
// end ;
40675: LD_VAR 0 3
40679: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40680: LD_INT 0
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
// result := array ;
40689: LD_ADDR_VAR 0 5
40693: PUSH
40694: LD_VAR 0 1
40698: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40699: LD_VAR 0 1
40703: NOT
40704: PUSH
40705: LD_VAR 0 2
40709: NOT
40710: OR
40711: PUSH
40712: LD_VAR 0 3
40716: NOT
40717: OR
40718: PUSH
40719: LD_VAR 0 2
40723: PUSH
40724: LD_VAR 0 1
40728: GREATER
40729: OR
40730: PUSH
40731: LD_VAR 0 3
40735: PUSH
40736: LD_VAR 0 1
40740: GREATER
40741: OR
40742: IFFALSE 40746
// exit ;
40744: GO 41042
// if direction then
40746: LD_VAR 0 4
40750: IFFALSE 40814
// begin d := 1 ;
40752: LD_ADDR_VAR 0 9
40756: PUSH
40757: LD_INT 1
40759: ST_TO_ADDR
// if i_from > i_to then
40760: LD_VAR 0 2
40764: PUSH
40765: LD_VAR 0 3
40769: GREATER
40770: IFFALSE 40796
// length := ( array - i_from ) + i_to else
40772: LD_ADDR_VAR 0 11
40776: PUSH
40777: LD_VAR 0 1
40781: PUSH
40782: LD_VAR 0 2
40786: MINUS
40787: PUSH
40788: LD_VAR 0 3
40792: PLUS
40793: ST_TO_ADDR
40794: GO 40812
// length := i_to - i_from ;
40796: LD_ADDR_VAR 0 11
40800: PUSH
40801: LD_VAR 0 3
40805: PUSH
40806: LD_VAR 0 2
40810: MINUS
40811: ST_TO_ADDR
// end else
40812: GO 40875
// begin d := - 1 ;
40814: LD_ADDR_VAR 0 9
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: ST_TO_ADDR
// if i_from > i_to then
40823: LD_VAR 0 2
40827: PUSH
40828: LD_VAR 0 3
40832: GREATER
40833: IFFALSE 40853
// length := i_from - i_to else
40835: LD_ADDR_VAR 0 11
40839: PUSH
40840: LD_VAR 0 2
40844: PUSH
40845: LD_VAR 0 3
40849: MINUS
40850: ST_TO_ADDR
40851: GO 40875
// length := ( array - i_to ) + i_from ;
40853: LD_ADDR_VAR 0 11
40857: PUSH
40858: LD_VAR 0 1
40862: PUSH
40863: LD_VAR 0 3
40867: MINUS
40868: PUSH
40869: LD_VAR 0 2
40873: PLUS
40874: ST_TO_ADDR
// end ; if not length then
40875: LD_VAR 0 11
40879: NOT
40880: IFFALSE 40884
// exit ;
40882: GO 41042
// tmp := array ;
40884: LD_ADDR_VAR 0 10
40888: PUSH
40889: LD_VAR 0 1
40893: ST_TO_ADDR
// for i = 1 to length do
40894: LD_ADDR_VAR 0 6
40898: PUSH
40899: DOUBLE
40900: LD_INT 1
40902: DEC
40903: ST_TO_ADDR
40904: LD_VAR 0 11
40908: PUSH
40909: FOR_TO
40910: IFFALSE 41030
// begin for j = 1 to array do
40912: LD_ADDR_VAR 0 7
40916: PUSH
40917: DOUBLE
40918: LD_INT 1
40920: DEC
40921: ST_TO_ADDR
40922: LD_VAR 0 1
40926: PUSH
40927: FOR_TO
40928: IFFALSE 41016
// begin k := j + d ;
40930: LD_ADDR_VAR 0 8
40934: PUSH
40935: LD_VAR 0 7
40939: PUSH
40940: LD_VAR 0 9
40944: PLUS
40945: ST_TO_ADDR
// if k > array then
40946: LD_VAR 0 8
40950: PUSH
40951: LD_VAR 0 1
40955: GREATER
40956: IFFALSE 40966
// k := 1 ;
40958: LD_ADDR_VAR 0 8
40962: PUSH
40963: LD_INT 1
40965: ST_TO_ADDR
// if not k then
40966: LD_VAR 0 8
40970: NOT
40971: IFFALSE 40983
// k := array ;
40973: LD_ADDR_VAR 0 8
40977: PUSH
40978: LD_VAR 0 1
40982: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40983: LD_ADDR_VAR 0 10
40987: PUSH
40988: LD_VAR 0 10
40992: PPUSH
40993: LD_VAR 0 8
40997: PPUSH
40998: LD_VAR 0 1
41002: PUSH
41003: LD_VAR 0 7
41007: ARRAY
41008: PPUSH
41009: CALL_OW 1
41013: ST_TO_ADDR
// end ;
41014: GO 40927
41016: POP
41017: POP
// array := tmp ;
41018: LD_ADDR_VAR 0 1
41022: PUSH
41023: LD_VAR 0 10
41027: ST_TO_ADDR
// end ;
41028: GO 40909
41030: POP
41031: POP
// result := array ;
41032: LD_ADDR_VAR 0 5
41036: PUSH
41037: LD_VAR 0 1
41041: ST_TO_ADDR
// end ;
41042: LD_VAR 0 5
41046: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41047: LD_INT 0
41049: PPUSH
41050: PPUSH
// result := 0 ;
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: LD_INT 0
41058: ST_TO_ADDR
// if not array or not value in array then
41059: LD_VAR 0 1
41063: NOT
41064: PUSH
41065: LD_VAR 0 2
41069: PUSH
41070: LD_VAR 0 1
41074: IN
41075: NOT
41076: OR
41077: IFFALSE 41081
// exit ;
41079: GO 41135
// for i = 1 to array do
41081: LD_ADDR_VAR 0 4
41085: PUSH
41086: DOUBLE
41087: LD_INT 1
41089: DEC
41090: ST_TO_ADDR
41091: LD_VAR 0 1
41095: PUSH
41096: FOR_TO
41097: IFFALSE 41133
// if value = array [ i ] then
41099: LD_VAR 0 2
41103: PUSH
41104: LD_VAR 0 1
41108: PUSH
41109: LD_VAR 0 4
41113: ARRAY
41114: EQUAL
41115: IFFALSE 41131
// begin result := i ;
41117: LD_ADDR_VAR 0 3
41121: PUSH
41122: LD_VAR 0 4
41126: ST_TO_ADDR
// exit ;
41127: POP
41128: POP
41129: GO 41135
// end ;
41131: GO 41096
41133: POP
41134: POP
// end ;
41135: LD_VAR 0 3
41139: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41140: LD_INT 0
41142: PPUSH
// vc_chassis := chassis ;
41143: LD_ADDR_OWVAR 37
41147: PUSH
41148: LD_VAR 0 1
41152: ST_TO_ADDR
// vc_engine := engine ;
41153: LD_ADDR_OWVAR 39
41157: PUSH
41158: LD_VAR 0 2
41162: ST_TO_ADDR
// vc_control := control ;
41163: LD_ADDR_OWVAR 38
41167: PUSH
41168: LD_VAR 0 3
41172: ST_TO_ADDR
// vc_weapon := weapon ;
41173: LD_ADDR_OWVAR 40
41177: PUSH
41178: LD_VAR 0 4
41182: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41183: LD_ADDR_OWVAR 41
41187: PUSH
41188: LD_VAR 0 5
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 6
41197: RET
// export function WantPlant ( unit ) ; var task ; begin
41198: LD_INT 0
41200: PPUSH
41201: PPUSH
// result := false ;
41202: LD_ADDR_VAR 0 2
41206: PUSH
41207: LD_INT 0
41209: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 437
41224: ST_TO_ADDR
// if task then
41225: LD_VAR 0 3
41229: IFFALSE 41257
// if task [ 1 ] [ 1 ] = p then
41231: LD_VAR 0 3
41235: PUSH
41236: LD_INT 1
41238: ARRAY
41239: PUSH
41240: LD_INT 1
41242: ARRAY
41243: PUSH
41244: LD_STRING p
41246: EQUAL
41247: IFFALSE 41257
// result := true ;
41249: LD_ADDR_VAR 0 2
41253: PUSH
41254: LD_INT 1
41256: ST_TO_ADDR
// end ;
41257: LD_VAR 0 2
41261: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
// if pos < 1 then
41268: LD_VAR 0 2
41272: PUSH
41273: LD_INT 1
41275: LESS
41276: IFFALSE 41280
// exit ;
41278: GO 41583
// if pos = 1 then
41280: LD_VAR 0 2
41284: PUSH
41285: LD_INT 1
41287: EQUAL
41288: IFFALSE 41321
// result := Replace ( arr , pos [ 1 ] , value ) else
41290: LD_ADDR_VAR 0 4
41294: PUSH
41295: LD_VAR 0 1
41299: PPUSH
41300: LD_VAR 0 2
41304: PUSH
41305: LD_INT 1
41307: ARRAY
41308: PPUSH
41309: LD_VAR 0 3
41313: PPUSH
41314: CALL_OW 1
41318: ST_TO_ADDR
41319: GO 41583
// begin tmp := arr ;
41321: LD_ADDR_VAR 0 6
41325: PUSH
41326: LD_VAR 0 1
41330: ST_TO_ADDR
// s_arr := [ tmp ] ;
41331: LD_ADDR_VAR 0 7
41335: PUSH
41336: LD_VAR 0 6
41340: PUSH
41341: EMPTY
41342: LIST
41343: ST_TO_ADDR
// for i = 1 to pos - 1 do
41344: LD_ADDR_VAR 0 5
41348: PUSH
41349: DOUBLE
41350: LD_INT 1
41352: DEC
41353: ST_TO_ADDR
41354: LD_VAR 0 2
41358: PUSH
41359: LD_INT 1
41361: MINUS
41362: PUSH
41363: FOR_TO
41364: IFFALSE 41409
// begin tmp := tmp [ pos [ i ] ] ;
41366: LD_ADDR_VAR 0 6
41370: PUSH
41371: LD_VAR 0 6
41375: PUSH
41376: LD_VAR 0 2
41380: PUSH
41381: LD_VAR 0 5
41385: ARRAY
41386: ARRAY
41387: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41388: LD_ADDR_VAR 0 7
41392: PUSH
41393: LD_VAR 0 7
41397: PUSH
41398: LD_VAR 0 6
41402: PUSH
41403: EMPTY
41404: LIST
41405: ADD
41406: ST_TO_ADDR
// end ;
41407: GO 41363
41409: POP
41410: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41411: LD_ADDR_VAR 0 6
41415: PUSH
41416: LD_VAR 0 6
41420: PPUSH
41421: LD_VAR 0 2
41425: PUSH
41426: LD_VAR 0 2
41430: ARRAY
41431: PPUSH
41432: LD_VAR 0 3
41436: PPUSH
41437: CALL_OW 1
41441: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41442: LD_ADDR_VAR 0 7
41446: PUSH
41447: LD_VAR 0 7
41451: PPUSH
41452: LD_VAR 0 7
41456: PPUSH
41457: LD_VAR 0 6
41461: PPUSH
41462: CALL_OW 1
41466: ST_TO_ADDR
// for i = s_arr downto 2 do
41467: LD_ADDR_VAR 0 5
41471: PUSH
41472: DOUBLE
41473: LD_VAR 0 7
41477: INC
41478: ST_TO_ADDR
41479: LD_INT 2
41481: PUSH
41482: FOR_DOWNTO
41483: IFFALSE 41567
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41485: LD_ADDR_VAR 0 6
41489: PUSH
41490: LD_VAR 0 7
41494: PUSH
41495: LD_VAR 0 5
41499: PUSH
41500: LD_INT 1
41502: MINUS
41503: ARRAY
41504: PPUSH
41505: LD_VAR 0 2
41509: PUSH
41510: LD_VAR 0 5
41514: PUSH
41515: LD_INT 1
41517: MINUS
41518: ARRAY
41519: PPUSH
41520: LD_VAR 0 7
41524: PUSH
41525: LD_VAR 0 5
41529: ARRAY
41530: PPUSH
41531: CALL_OW 1
41535: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41536: LD_ADDR_VAR 0 7
41540: PUSH
41541: LD_VAR 0 7
41545: PPUSH
41546: LD_VAR 0 5
41550: PUSH
41551: LD_INT 1
41553: MINUS
41554: PPUSH
41555: LD_VAR 0 6
41559: PPUSH
41560: CALL_OW 1
41564: ST_TO_ADDR
// end ;
41565: GO 41482
41567: POP
41568: POP
// result := s_arr [ 1 ] ;
41569: LD_ADDR_VAR 0 4
41573: PUSH
41574: LD_VAR 0 7
41578: PUSH
41579: LD_INT 1
41581: ARRAY
41582: ST_TO_ADDR
// end ; end ;
41583: LD_VAR 0 4
41587: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41588: LD_INT 0
41590: PPUSH
41591: PPUSH
// if not list then
41592: LD_VAR 0 1
41596: NOT
41597: IFFALSE 41601
// exit ;
41599: GO 41692
// i := list [ pos1 ] ;
41601: LD_ADDR_VAR 0 5
41605: PUSH
41606: LD_VAR 0 1
41610: PUSH
41611: LD_VAR 0 2
41615: ARRAY
41616: ST_TO_ADDR
// if not i then
41617: LD_VAR 0 5
41621: NOT
41622: IFFALSE 41626
// exit ;
41624: GO 41692
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41626: LD_ADDR_VAR 0 1
41630: PUSH
41631: LD_VAR 0 1
41635: PPUSH
41636: LD_VAR 0 2
41640: PPUSH
41641: LD_VAR 0 1
41645: PUSH
41646: LD_VAR 0 3
41650: ARRAY
41651: PPUSH
41652: CALL_OW 1
41656: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41657: LD_ADDR_VAR 0 1
41661: PUSH
41662: LD_VAR 0 1
41666: PPUSH
41667: LD_VAR 0 3
41671: PPUSH
41672: LD_VAR 0 5
41676: PPUSH
41677: CALL_OW 1
41681: ST_TO_ADDR
// result := list ;
41682: LD_ADDR_VAR 0 4
41686: PUSH
41687: LD_VAR 0 1
41691: ST_TO_ADDR
// end ;
41692: LD_VAR 0 4
41696: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41697: LD_INT 0
41699: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41700: LD_ADDR_VAR 0 5
41704: PUSH
41705: LD_VAR 0 1
41709: PPUSH
41710: CALL_OW 250
41714: PPUSH
41715: LD_VAR 0 1
41719: PPUSH
41720: CALL_OW 251
41724: PPUSH
41725: LD_VAR 0 2
41729: PPUSH
41730: LD_VAR 0 3
41734: PPUSH
41735: LD_VAR 0 4
41739: PPUSH
41740: CALL 41750 0 5
41744: ST_TO_ADDR
// end ;
41745: LD_VAR 0 5
41749: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41750: LD_INT 0
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
// if not list then
41756: LD_VAR 0 3
41760: NOT
41761: IFFALSE 41765
// exit ;
41763: GO 42153
// result := [ ] ;
41765: LD_ADDR_VAR 0 6
41769: PUSH
41770: EMPTY
41771: ST_TO_ADDR
// for i in list do
41772: LD_ADDR_VAR 0 7
41776: PUSH
41777: LD_VAR 0 3
41781: PUSH
41782: FOR_IN
41783: IFFALSE 41985
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41785: LD_ADDR_VAR 0 9
41789: PUSH
41790: LD_VAR 0 7
41794: PPUSH
41795: LD_VAR 0 1
41799: PPUSH
41800: LD_VAR 0 2
41804: PPUSH
41805: CALL_OW 297
41809: ST_TO_ADDR
// if not result then
41810: LD_VAR 0 6
41814: NOT
41815: IFFALSE 41841
// result := [ [ i , tmp ] ] else
41817: LD_ADDR_VAR 0 6
41821: PUSH
41822: LD_VAR 0 7
41826: PUSH
41827: LD_VAR 0 9
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: ST_TO_ADDR
41839: GO 41983
// begin if result [ result ] [ 2 ] < tmp then
41841: LD_VAR 0 6
41845: PUSH
41846: LD_VAR 0 6
41850: ARRAY
41851: PUSH
41852: LD_INT 2
41854: ARRAY
41855: PUSH
41856: LD_VAR 0 9
41860: LESS
41861: IFFALSE 41903
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41863: LD_ADDR_VAR 0 6
41867: PUSH
41868: LD_VAR 0 6
41872: PPUSH
41873: LD_VAR 0 6
41877: PUSH
41878: LD_INT 1
41880: PLUS
41881: PPUSH
41882: LD_VAR 0 7
41886: PUSH
41887: LD_VAR 0 9
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PPUSH
41896: CALL_OW 2
41900: ST_TO_ADDR
41901: GO 41983
// for j = 1 to result do
41903: LD_ADDR_VAR 0 8
41907: PUSH
41908: DOUBLE
41909: LD_INT 1
41911: DEC
41912: ST_TO_ADDR
41913: LD_VAR 0 6
41917: PUSH
41918: FOR_TO
41919: IFFALSE 41981
// begin if tmp < result [ j ] [ 2 ] then
41921: LD_VAR 0 9
41925: PUSH
41926: LD_VAR 0 6
41930: PUSH
41931: LD_VAR 0 8
41935: ARRAY
41936: PUSH
41937: LD_INT 2
41939: ARRAY
41940: LESS
41941: IFFALSE 41979
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41943: LD_ADDR_VAR 0 6
41947: PUSH
41948: LD_VAR 0 6
41952: PPUSH
41953: LD_VAR 0 8
41957: PPUSH
41958: LD_VAR 0 7
41962: PUSH
41963: LD_VAR 0 9
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PPUSH
41972: CALL_OW 2
41976: ST_TO_ADDR
// break ;
41977: GO 41981
// end ; end ;
41979: GO 41918
41981: POP
41982: POP
// end ; end ;
41983: GO 41782
41985: POP
41986: POP
// if result and not asc then
41987: LD_VAR 0 6
41991: PUSH
41992: LD_VAR 0 4
41996: NOT
41997: AND
41998: IFFALSE 42073
// begin tmp := result ;
42000: LD_ADDR_VAR 0 9
42004: PUSH
42005: LD_VAR 0 6
42009: ST_TO_ADDR
// for i = tmp downto 1 do
42010: LD_ADDR_VAR 0 7
42014: PUSH
42015: DOUBLE
42016: LD_VAR 0 9
42020: INC
42021: ST_TO_ADDR
42022: LD_INT 1
42024: PUSH
42025: FOR_DOWNTO
42026: IFFALSE 42071
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42028: LD_ADDR_VAR 0 6
42032: PUSH
42033: LD_VAR 0 6
42037: PPUSH
42038: LD_VAR 0 9
42042: PUSH
42043: LD_VAR 0 7
42047: MINUS
42048: PUSH
42049: LD_INT 1
42051: PLUS
42052: PPUSH
42053: LD_VAR 0 9
42057: PUSH
42058: LD_VAR 0 7
42062: ARRAY
42063: PPUSH
42064: CALL_OW 1
42068: ST_TO_ADDR
42069: GO 42025
42071: POP
42072: POP
// end ; tmp := [ ] ;
42073: LD_ADDR_VAR 0 9
42077: PUSH
42078: EMPTY
42079: ST_TO_ADDR
// if mode then
42080: LD_VAR 0 5
42084: IFFALSE 42153
// begin for i = 1 to result do
42086: LD_ADDR_VAR 0 7
42090: PUSH
42091: DOUBLE
42092: LD_INT 1
42094: DEC
42095: ST_TO_ADDR
42096: LD_VAR 0 6
42100: PUSH
42101: FOR_TO
42102: IFFALSE 42141
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42104: LD_ADDR_VAR 0 9
42108: PUSH
42109: LD_VAR 0 9
42113: PPUSH
42114: LD_VAR 0 7
42118: PPUSH
42119: LD_VAR 0 6
42123: PUSH
42124: LD_VAR 0 7
42128: ARRAY
42129: PUSH
42130: LD_INT 1
42132: ARRAY
42133: PPUSH
42134: CALL_OW 1
42138: ST_TO_ADDR
42139: GO 42101
42141: POP
42142: POP
// result := tmp ;
42143: LD_ADDR_VAR 0 6
42147: PUSH
42148: LD_VAR 0 9
42152: ST_TO_ADDR
// end ; end ;
42153: LD_VAR 0 6
42157: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42158: LD_INT 0
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
42165: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42166: LD_ADDR_VAR 0 5
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: ST_TO_ADDR
// if not x or not y then
42188: LD_VAR 0 2
42192: NOT
42193: PUSH
42194: LD_VAR 0 3
42198: NOT
42199: OR
42200: IFFALSE 42204
// exit ;
42202: GO 43850
// if not range then
42204: LD_VAR 0 4
42208: NOT
42209: IFFALSE 42219
// range := 10 ;
42211: LD_ADDR_VAR 0 4
42215: PUSH
42216: LD_INT 10
42218: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42219: LD_ADDR_VAR 0 8
42223: PUSH
42224: LD_INT 81
42226: PUSH
42227: LD_VAR 0 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 92
42238: PUSH
42239: LD_VAR 0 2
42243: PUSH
42244: LD_VAR 0 3
42248: PUSH
42249: LD_VAR 0 4
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: LD_INT 21
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: PPUSH
42282: CALL_OW 69
42286: ST_TO_ADDR
// if not tmp then
42287: LD_VAR 0 8
42291: NOT
42292: IFFALSE 42296
// exit ;
42294: GO 43850
// for i in tmp do
42296: LD_ADDR_VAR 0 6
42300: PUSH
42301: LD_VAR 0 8
42305: PUSH
42306: FOR_IN
42307: IFFALSE 43825
// begin points := [ 0 , 0 , 0 ] ;
42309: LD_ADDR_VAR 0 9
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
// bpoints := 1 ;
42328: LD_ADDR_VAR 0 10
42332: PUSH
42333: LD_INT 1
42335: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42336: LD_VAR 0 6
42340: PPUSH
42341: CALL_OW 247
42345: PUSH
42346: LD_INT 1
42348: DOUBLE
42349: EQUAL
42350: IFTRUE 42354
42352: GO 42932
42354: POP
// begin if GetClass ( i ) = 1 then
42355: LD_VAR 0 6
42359: PPUSH
42360: CALL_OW 257
42364: PUSH
42365: LD_INT 1
42367: EQUAL
42368: IFFALSE 42389
// points := [ 10 , 5 , 3 ] ;
42370: LD_ADDR_VAR 0 9
42374: PUSH
42375: LD_INT 10
42377: PUSH
42378: LD_INT 5
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42389: LD_VAR 0 6
42393: PPUSH
42394: CALL_OW 257
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: LD_INT 4
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: IN
42413: IFFALSE 42434
// points := [ 3 , 2 , 1 ] ;
42415: LD_ADDR_VAR 0 9
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: LIST
42433: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42434: LD_VAR 0 6
42438: PPUSH
42439: CALL_OW 257
42443: PUSH
42444: LD_INT 5
42446: EQUAL
42447: IFFALSE 42468
// points := [ 130 , 5 , 2 ] ;
42449: LD_ADDR_VAR 0 9
42453: PUSH
42454: LD_INT 130
42456: PUSH
42457: LD_INT 5
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42468: LD_VAR 0 6
42472: PPUSH
42473: CALL_OW 257
42477: PUSH
42478: LD_INT 8
42480: EQUAL
42481: IFFALSE 42502
// points := [ 35 , 35 , 30 ] ;
42483: LD_ADDR_VAR 0 9
42487: PUSH
42488: LD_INT 35
42490: PUSH
42491: LD_INT 35
42493: PUSH
42494: LD_INT 30
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: LIST
42501: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42502: LD_VAR 0 6
42506: PPUSH
42507: CALL_OW 257
42511: PUSH
42512: LD_INT 9
42514: EQUAL
42515: IFFALSE 42536
// points := [ 20 , 55 , 40 ] ;
42517: LD_ADDR_VAR 0 9
42521: PUSH
42522: LD_INT 20
42524: PUSH
42525: LD_INT 55
42527: PUSH
42528: LD_INT 40
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42536: LD_VAR 0 6
42540: PPUSH
42541: CALL_OW 257
42545: PUSH
42546: LD_INT 12
42548: PUSH
42549: LD_INT 16
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: IN
42556: IFFALSE 42577
// points := [ 5 , 3 , 2 ] ;
42558: LD_ADDR_VAR 0 9
42562: PUSH
42563: LD_INT 5
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: LIST
42576: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42577: LD_VAR 0 6
42581: PPUSH
42582: CALL_OW 257
42586: PUSH
42587: LD_INT 17
42589: EQUAL
42590: IFFALSE 42611
// points := [ 100 , 50 , 75 ] ;
42592: LD_ADDR_VAR 0 9
42596: PUSH
42597: LD_INT 100
42599: PUSH
42600: LD_INT 50
42602: PUSH
42603: LD_INT 75
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: LIST
42610: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42611: LD_VAR 0 6
42615: PPUSH
42616: CALL_OW 257
42620: PUSH
42621: LD_INT 15
42623: EQUAL
42624: IFFALSE 42645
// points := [ 10 , 5 , 3 ] ;
42626: LD_ADDR_VAR 0 9
42630: PUSH
42631: LD_INT 10
42633: PUSH
42634: LD_INT 5
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42645: LD_VAR 0 6
42649: PPUSH
42650: CALL_OW 257
42654: PUSH
42655: LD_INT 14
42657: EQUAL
42658: IFFALSE 42679
// points := [ 10 , 0 , 0 ] ;
42660: LD_ADDR_VAR 0 9
42664: PUSH
42665: LD_INT 10
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42679: LD_VAR 0 6
42683: PPUSH
42684: CALL_OW 257
42688: PUSH
42689: LD_INT 11
42691: EQUAL
42692: IFFALSE 42713
// points := [ 30 , 10 , 5 ] ;
42694: LD_ADDR_VAR 0 9
42698: PUSH
42699: LD_INT 30
42701: PUSH
42702: LD_INT 10
42704: PUSH
42705: LD_INT 5
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42713: LD_VAR 0 1
42717: PPUSH
42718: LD_INT 5
42720: PPUSH
42721: CALL_OW 321
42725: PUSH
42726: LD_INT 2
42728: EQUAL
42729: IFFALSE 42746
// bpoints := bpoints * 1.8 ;
42731: LD_ADDR_VAR 0 10
42735: PUSH
42736: LD_VAR 0 10
42740: PUSH
42741: LD_REAL  1.80000000000000E+0000
42744: MUL
42745: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42746: LD_VAR 0 6
42750: PPUSH
42751: CALL_OW 257
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: LD_INT 3
42764: PUSH
42765: LD_INT 4
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: IN
42774: PUSH
42775: LD_VAR 0 1
42779: PPUSH
42780: LD_INT 51
42782: PPUSH
42783: CALL_OW 321
42787: PUSH
42788: LD_INT 2
42790: EQUAL
42791: AND
42792: IFFALSE 42809
// bpoints := bpoints * 1.2 ;
42794: LD_ADDR_VAR 0 10
42798: PUSH
42799: LD_VAR 0 10
42803: PUSH
42804: LD_REAL  1.20000000000000E+0000
42807: MUL
42808: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42809: LD_VAR 0 6
42813: PPUSH
42814: CALL_OW 257
42818: PUSH
42819: LD_INT 5
42821: PUSH
42822: LD_INT 7
42824: PUSH
42825: LD_INT 9
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: IN
42833: PUSH
42834: LD_VAR 0 1
42838: PPUSH
42839: LD_INT 52
42841: PPUSH
42842: CALL_OW 321
42846: PUSH
42847: LD_INT 2
42849: EQUAL
42850: AND
42851: IFFALSE 42868
// bpoints := bpoints * 1.5 ;
42853: LD_ADDR_VAR 0 10
42857: PUSH
42858: LD_VAR 0 10
42862: PUSH
42863: LD_REAL  1.50000000000000E+0000
42866: MUL
42867: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42868: LD_VAR 0 1
42872: PPUSH
42873: LD_INT 66
42875: PPUSH
42876: CALL_OW 321
42880: PUSH
42881: LD_INT 2
42883: EQUAL
42884: IFFALSE 42901
// bpoints := bpoints * 1.1 ;
42886: LD_ADDR_VAR 0 10
42890: PUSH
42891: LD_VAR 0 10
42895: PUSH
42896: LD_REAL  1.10000000000000E+0000
42899: MUL
42900: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42901: LD_ADDR_VAR 0 10
42905: PUSH
42906: LD_VAR 0 10
42910: PUSH
42911: LD_VAR 0 6
42915: PPUSH
42916: LD_INT 1
42918: PPUSH
42919: CALL_OW 259
42923: PUSH
42924: LD_REAL  1.15000000000000E+0000
42927: MUL
42928: MUL
42929: ST_TO_ADDR
// end ; unit_vehicle :
42930: GO 43754
42932: LD_INT 2
42934: DOUBLE
42935: EQUAL
42936: IFTRUE 42940
42938: GO 43742
42940: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42941: LD_VAR 0 6
42945: PPUSH
42946: CALL_OW 264
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 42
42956: PUSH
42957: LD_INT 24
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: IN
42965: IFFALSE 42986
// points := [ 25 , 5 , 3 ] ;
42967: LD_ADDR_VAR 0 9
42971: PUSH
42972: LD_INT 25
42974: PUSH
42975: LD_INT 5
42977: PUSH
42978: LD_INT 3
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42986: LD_VAR 0 6
42990: PPUSH
42991: CALL_OW 264
42995: PUSH
42996: LD_INT 4
42998: PUSH
42999: LD_INT 43
43001: PUSH
43002: LD_INT 25
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: LIST
43009: IN
43010: IFFALSE 43031
// points := [ 40 , 15 , 5 ] ;
43012: LD_ADDR_VAR 0 9
43016: PUSH
43017: LD_INT 40
43019: PUSH
43020: LD_INT 15
43022: PUSH
43023: LD_INT 5
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43031: LD_VAR 0 6
43035: PPUSH
43036: CALL_OW 264
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: LD_INT 23
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: IN
43051: IFFALSE 43072
// points := [ 7 , 25 , 8 ] ;
43053: LD_ADDR_VAR 0 9
43057: PUSH
43058: LD_INT 7
43060: PUSH
43061: LD_INT 25
43063: PUSH
43064: LD_INT 8
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43072: LD_VAR 0 6
43076: PPUSH
43077: CALL_OW 264
43081: PUSH
43082: LD_INT 5
43084: PUSH
43085: LD_INT 27
43087: PUSH
43088: LD_INT 44
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: IN
43096: IFFALSE 43117
// points := [ 14 , 50 , 16 ] ;
43098: LD_ADDR_VAR 0 9
43102: PUSH
43103: LD_INT 14
43105: PUSH
43106: LD_INT 50
43108: PUSH
43109: LD_INT 16
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: LIST
43116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43117: LD_VAR 0 6
43121: PPUSH
43122: CALL_OW 264
43126: PUSH
43127: LD_INT 6
43129: PUSH
43130: LD_INT 46
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: IN
43137: IFFALSE 43158
// points := [ 32 , 120 , 70 ] ;
43139: LD_ADDR_VAR 0 9
43143: PUSH
43144: LD_INT 32
43146: PUSH
43147: LD_INT 120
43149: PUSH
43150: LD_INT 70
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43158: LD_VAR 0 6
43162: PPUSH
43163: CALL_OW 264
43167: PUSH
43168: LD_INT 7
43170: PUSH
43171: LD_INT 28
43173: PUSH
43174: LD_INT 45
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: IN
43182: IFFALSE 43203
// points := [ 35 , 20 , 45 ] ;
43184: LD_ADDR_VAR 0 9
43188: PUSH
43189: LD_INT 35
43191: PUSH
43192: LD_INT 20
43194: PUSH
43195: LD_INT 45
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43203: LD_VAR 0 6
43207: PPUSH
43208: CALL_OW 264
43212: PUSH
43213: LD_INT 47
43215: PUSH
43216: EMPTY
43217: LIST
43218: IN
43219: IFFALSE 43240
// points := [ 67 , 45 , 75 ] ;
43221: LD_ADDR_VAR 0 9
43225: PUSH
43226: LD_INT 67
43228: PUSH
43229: LD_INT 45
43231: PUSH
43232: LD_INT 75
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43240: LD_VAR 0 6
43244: PPUSH
43245: CALL_OW 264
43249: PUSH
43250: LD_INT 26
43252: PUSH
43253: EMPTY
43254: LIST
43255: IN
43256: IFFALSE 43277
// points := [ 120 , 30 , 80 ] ;
43258: LD_ADDR_VAR 0 9
43262: PUSH
43263: LD_INT 120
43265: PUSH
43266: LD_INT 30
43268: PUSH
43269: LD_INT 80
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43277: LD_VAR 0 6
43281: PPUSH
43282: CALL_OW 264
43286: PUSH
43287: LD_INT 22
43289: PUSH
43290: EMPTY
43291: LIST
43292: IN
43293: IFFALSE 43314
// points := [ 40 , 1 , 1 ] ;
43295: LD_ADDR_VAR 0 9
43299: PUSH
43300: LD_INT 40
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43314: LD_VAR 0 6
43318: PPUSH
43319: CALL_OW 264
43323: PUSH
43324: LD_INT 29
43326: PUSH
43327: EMPTY
43328: LIST
43329: IN
43330: IFFALSE 43351
// points := [ 70 , 200 , 400 ] ;
43332: LD_ADDR_VAR 0 9
43336: PUSH
43337: LD_INT 70
43339: PUSH
43340: LD_INT 200
43342: PUSH
43343: LD_INT 400
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43351: LD_VAR 0 6
43355: PPUSH
43356: CALL_OW 264
43360: PUSH
43361: LD_INT 14
43363: PUSH
43364: LD_INT 53
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: IN
43371: IFFALSE 43392
// points := [ 40 , 10 , 20 ] ;
43373: LD_ADDR_VAR 0 9
43377: PUSH
43378: LD_INT 40
43380: PUSH
43381: LD_INT 10
43383: PUSH
43384: LD_INT 20
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43392: LD_VAR 0 6
43396: PPUSH
43397: CALL_OW 264
43401: PUSH
43402: LD_INT 9
43404: PUSH
43405: EMPTY
43406: LIST
43407: IN
43408: IFFALSE 43429
// points := [ 5 , 70 , 20 ] ;
43410: LD_ADDR_VAR 0 9
43414: PUSH
43415: LD_INT 5
43417: PUSH
43418: LD_INT 70
43420: PUSH
43421: LD_INT 20
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43429: LD_VAR 0 6
43433: PPUSH
43434: CALL_OW 264
43438: PUSH
43439: LD_INT 10
43441: PUSH
43442: EMPTY
43443: LIST
43444: IN
43445: IFFALSE 43466
// points := [ 35 , 110 , 70 ] ;
43447: LD_ADDR_VAR 0 9
43451: PUSH
43452: LD_INT 35
43454: PUSH
43455: LD_INT 110
43457: PUSH
43458: LD_INT 70
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43466: LD_VAR 0 6
43470: PPUSH
43471: CALL_OW 265
43475: PUSH
43476: LD_INT 25
43478: EQUAL
43479: IFFALSE 43500
// points := [ 80 , 65 , 100 ] ;
43481: LD_ADDR_VAR 0 9
43485: PUSH
43486: LD_INT 80
43488: PUSH
43489: LD_INT 65
43491: PUSH
43492: LD_INT 100
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43500: LD_VAR 0 6
43504: PPUSH
43505: CALL_OW 263
43509: PUSH
43510: LD_INT 1
43512: EQUAL
43513: IFFALSE 43548
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43515: LD_ADDR_VAR 0 10
43519: PUSH
43520: LD_VAR 0 10
43524: PUSH
43525: LD_VAR 0 6
43529: PPUSH
43530: CALL_OW 311
43534: PPUSH
43535: LD_INT 3
43537: PPUSH
43538: CALL_OW 259
43542: PUSH
43543: LD_INT 4
43545: MUL
43546: MUL
43547: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43548: LD_VAR 0 6
43552: PPUSH
43553: CALL_OW 263
43557: PUSH
43558: LD_INT 2
43560: EQUAL
43561: IFFALSE 43612
// begin j := IsControledBy ( i ) ;
43563: LD_ADDR_VAR 0 7
43567: PUSH
43568: LD_VAR 0 6
43572: PPUSH
43573: CALL_OW 312
43577: ST_TO_ADDR
// if j then
43578: LD_VAR 0 7
43582: IFFALSE 43612
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43584: LD_ADDR_VAR 0 10
43588: PUSH
43589: LD_VAR 0 10
43593: PUSH
43594: LD_VAR 0 7
43598: PPUSH
43599: LD_INT 3
43601: PPUSH
43602: CALL_OW 259
43606: PUSH
43607: LD_INT 3
43609: MUL
43610: MUL
43611: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43612: LD_VAR 0 6
43616: PPUSH
43617: CALL_OW 264
43621: PUSH
43622: LD_INT 5
43624: PUSH
43625: LD_INT 6
43627: PUSH
43628: LD_INT 46
43630: PUSH
43631: LD_INT 44
43633: PUSH
43634: LD_INT 47
43636: PUSH
43637: LD_INT 45
43639: PUSH
43640: LD_INT 28
43642: PUSH
43643: LD_INT 7
43645: PUSH
43646: LD_INT 27
43648: PUSH
43649: LD_INT 29
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: IN
43664: PUSH
43665: LD_VAR 0 1
43669: PPUSH
43670: LD_INT 52
43672: PPUSH
43673: CALL_OW 321
43677: PUSH
43678: LD_INT 2
43680: EQUAL
43681: AND
43682: IFFALSE 43699
// bpoints := bpoints * 1.2 ;
43684: LD_ADDR_VAR 0 10
43688: PUSH
43689: LD_VAR 0 10
43693: PUSH
43694: LD_REAL  1.20000000000000E+0000
43697: MUL
43698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43699: LD_VAR 0 6
43703: PPUSH
43704: CALL_OW 264
43708: PUSH
43709: LD_INT 6
43711: PUSH
43712: LD_INT 46
43714: PUSH
43715: LD_INT 47
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: IN
43723: IFFALSE 43740
// bpoints := bpoints * 1.2 ;
43725: LD_ADDR_VAR 0 10
43729: PUSH
43730: LD_VAR 0 10
43734: PUSH
43735: LD_REAL  1.20000000000000E+0000
43738: MUL
43739: ST_TO_ADDR
// end ; unit_building :
43740: GO 43754
43742: LD_INT 3
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43753
43750: POP
// ; end ;
43751: GO 43754
43753: POP
// for j = 1 to 3 do
43754: LD_ADDR_VAR 0 7
43758: PUSH
43759: DOUBLE
43760: LD_INT 1
43762: DEC
43763: ST_TO_ADDR
43764: LD_INT 3
43766: PUSH
43767: FOR_TO
43768: IFFALSE 43821
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43770: LD_ADDR_VAR 0 5
43774: PUSH
43775: LD_VAR 0 5
43779: PPUSH
43780: LD_VAR 0 7
43784: PPUSH
43785: LD_VAR 0 5
43789: PUSH
43790: LD_VAR 0 7
43794: ARRAY
43795: PUSH
43796: LD_VAR 0 9
43800: PUSH
43801: LD_VAR 0 7
43805: ARRAY
43806: PUSH
43807: LD_VAR 0 10
43811: MUL
43812: PLUS
43813: PPUSH
43814: CALL_OW 1
43818: ST_TO_ADDR
43819: GO 43767
43821: POP
43822: POP
// end ;
43823: GO 42306
43825: POP
43826: POP
// result := Replace ( result , 4 , tmp ) ;
43827: LD_ADDR_VAR 0 5
43831: PUSH
43832: LD_VAR 0 5
43836: PPUSH
43837: LD_INT 4
43839: PPUSH
43840: LD_VAR 0 8
43844: PPUSH
43845: CALL_OW 1
43849: ST_TO_ADDR
// end ;
43850: LD_VAR 0 5
43854: RET
// export function DangerAtRange ( unit , range ) ; begin
43855: LD_INT 0
43857: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43858: LD_ADDR_VAR 0 3
43862: PUSH
43863: LD_VAR 0 1
43867: PPUSH
43868: CALL_OW 255
43872: PPUSH
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 250
43882: PPUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 251
43892: PPUSH
43893: LD_VAR 0 2
43897: PPUSH
43898: CALL 42158 0 4
43902: ST_TO_ADDR
// end ;
43903: LD_VAR 0 3
43907: RET
// export function DangerInArea ( side , area ) ; begin
43908: LD_INT 0
43910: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43911: LD_ADDR_VAR 0 3
43915: PUSH
43916: LD_VAR 0 2
43920: PPUSH
43921: LD_INT 81
43923: PUSH
43924: LD_VAR 0 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PPUSH
43933: CALL_OW 70
43937: ST_TO_ADDR
// end ;
43938: LD_VAR 0 3
43942: RET
// export function IsExtension ( b ) ; begin
43943: LD_INT 0
43945: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43946: LD_ADDR_VAR 0 2
43950: PUSH
43951: LD_VAR 0 1
43955: PUSH
43956: LD_INT 23
43958: PUSH
43959: LD_INT 20
43961: PUSH
43962: LD_INT 22
43964: PUSH
43965: LD_INT 17
43967: PUSH
43968: LD_INT 24
43970: PUSH
43971: LD_INT 21
43973: PUSH
43974: LD_INT 19
43976: PUSH
43977: LD_INT 16
43979: PUSH
43980: LD_INT 25
43982: PUSH
43983: LD_INT 18
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: IN
43998: ST_TO_ADDR
// end ;
43999: LD_VAR 0 2
44003: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
44004: LD_INT 0
44006: PPUSH
44007: PPUSH
44008: PPUSH
// result := [ ] ;
44009: LD_ADDR_VAR 0 3
44013: PUSH
44014: EMPTY
44015: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44016: LD_ADDR_VAR 0 4
44020: PUSH
44021: LD_VAR 0 2
44025: PPUSH
44026: LD_INT 21
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PPUSH
44036: CALL_OW 70
44040: ST_TO_ADDR
// if not tmp then
44041: LD_VAR 0 4
44045: NOT
44046: IFFALSE 44050
// exit ;
44048: GO 44108
// for i in tmp do
44050: LD_ADDR_VAR 0 5
44054: PUSH
44055: LD_VAR 0 4
44059: PUSH
44060: FOR_IN
44061: IFFALSE 44096
// if GetBase ( i ) <> base then
44063: LD_VAR 0 5
44067: PPUSH
44068: CALL_OW 274
44072: PUSH
44073: LD_VAR 0 1
44077: NONEQUAL
44078: IFFALSE 44094
// ComLinkToBase ( base , i ) ;
44080: LD_VAR 0 1
44084: PPUSH
44085: LD_VAR 0 5
44089: PPUSH
44090: CALL_OW 169
44094: GO 44060
44096: POP
44097: POP
// result := tmp ;
44098: LD_ADDR_VAR 0 3
44102: PUSH
44103: LD_VAR 0 4
44107: ST_TO_ADDR
// end ;
44108: LD_VAR 0 3
44112: RET
// export function ComComplete ( unit , b ) ; var i ; begin
44113: LD_INT 0
44115: PPUSH
44116: PPUSH
// if BuildingStatus ( b ) = bs_build then
44117: LD_VAR 0 2
44121: PPUSH
44122: CALL_OW 461
44126: PUSH
44127: LD_INT 1
44129: EQUAL
44130: IFFALSE 44190
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44132: LD_VAR 0 1
44136: PPUSH
44137: LD_STRING h
44139: PUSH
44140: LD_VAR 0 2
44144: PPUSH
44145: CALL_OW 250
44149: PUSH
44150: LD_VAR 0 2
44154: PPUSH
44155: CALL_OW 251
44159: PUSH
44160: LD_VAR 0 2
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: PUSH
44183: EMPTY
44184: LIST
44185: PPUSH
44186: CALL_OW 446
// end ;
44190: LD_VAR 0 3
44194: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44195: LD_INT 0
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44203: LD_VAR 0 1
44207: NOT
44208: PUSH
44209: LD_VAR 0 1
44213: PPUSH
44214: CALL_OW 263
44218: PUSH
44219: LD_INT 2
44221: EQUAL
44222: NOT
44223: OR
44224: IFFALSE 44228
// exit ;
44226: GO 44544
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44228: LD_ADDR_VAR 0 6
44232: PUSH
44233: LD_INT 22
44235: PUSH
44236: LD_VAR 0 1
44240: PPUSH
44241: CALL_OW 255
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 30
44255: PUSH
44256: LD_INT 36
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 34
44265: PUSH
44266: LD_INT 31
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PPUSH
44282: CALL_OW 69
44286: ST_TO_ADDR
// if not tmp then
44287: LD_VAR 0 6
44291: NOT
44292: IFFALSE 44296
// exit ;
44294: GO 44544
// result := [ ] ;
44296: LD_ADDR_VAR 0 2
44300: PUSH
44301: EMPTY
44302: ST_TO_ADDR
// for i in tmp do
44303: LD_ADDR_VAR 0 3
44307: PUSH
44308: LD_VAR 0 6
44312: PUSH
44313: FOR_IN
44314: IFFALSE 44385
// begin t := UnitsInside ( i ) ;
44316: LD_ADDR_VAR 0 4
44320: PUSH
44321: LD_VAR 0 3
44325: PPUSH
44326: CALL_OW 313
44330: ST_TO_ADDR
// if t then
44331: LD_VAR 0 4
44335: IFFALSE 44383
// for j in t do
44337: LD_ADDR_VAR 0 7
44341: PUSH
44342: LD_VAR 0 4
44346: PUSH
44347: FOR_IN
44348: IFFALSE 44381
// result := Insert ( result , result + 1 , j ) ;
44350: LD_ADDR_VAR 0 2
44354: PUSH
44355: LD_VAR 0 2
44359: PPUSH
44360: LD_VAR 0 2
44364: PUSH
44365: LD_INT 1
44367: PLUS
44368: PPUSH
44369: LD_VAR 0 7
44373: PPUSH
44374: CALL_OW 2
44378: ST_TO_ADDR
44379: GO 44347
44381: POP
44382: POP
// end ;
44383: GO 44313
44385: POP
44386: POP
// if not result then
44387: LD_VAR 0 2
44391: NOT
44392: IFFALSE 44396
// exit ;
44394: GO 44544
// mech := result [ 1 ] ;
44396: LD_ADDR_VAR 0 5
44400: PUSH
44401: LD_VAR 0 2
44405: PUSH
44406: LD_INT 1
44408: ARRAY
44409: ST_TO_ADDR
// if result > 1 then
44410: LD_VAR 0 2
44414: PUSH
44415: LD_INT 1
44417: GREATER
44418: IFFALSE 44530
// for i = 2 to result do
44420: LD_ADDR_VAR 0 3
44424: PUSH
44425: DOUBLE
44426: LD_INT 2
44428: DEC
44429: ST_TO_ADDR
44430: LD_VAR 0 2
44434: PUSH
44435: FOR_TO
44436: IFFALSE 44528
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44438: LD_ADDR_VAR 0 4
44442: PUSH
44443: LD_VAR 0 2
44447: PUSH
44448: LD_VAR 0 3
44452: ARRAY
44453: PPUSH
44454: LD_INT 3
44456: PPUSH
44457: CALL_OW 259
44461: PUSH
44462: LD_VAR 0 2
44466: PUSH
44467: LD_VAR 0 3
44471: ARRAY
44472: PPUSH
44473: CALL_OW 432
44477: MINUS
44478: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44479: LD_VAR 0 4
44483: PUSH
44484: LD_VAR 0 5
44488: PPUSH
44489: LD_INT 3
44491: PPUSH
44492: CALL_OW 259
44496: PUSH
44497: LD_VAR 0 5
44501: PPUSH
44502: CALL_OW 432
44506: MINUS
44507: GREATEREQUAL
44508: IFFALSE 44526
// mech := result [ i ] ;
44510: LD_ADDR_VAR 0 5
44514: PUSH
44515: LD_VAR 0 2
44519: PUSH
44520: LD_VAR 0 3
44524: ARRAY
44525: ST_TO_ADDR
// end ;
44526: GO 44435
44528: POP
44529: POP
// ComLinkTo ( vehicle , mech ) ;
44530: LD_VAR 0 1
44534: PPUSH
44535: LD_VAR 0 5
44539: PPUSH
44540: CALL_OW 135
// end ;
44544: LD_VAR 0 2
44548: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44549: LD_INT 0
44551: PPUSH
44552: PPUSH
44553: PPUSH
44554: PPUSH
44555: PPUSH
44556: PPUSH
44557: PPUSH
44558: PPUSH
44559: PPUSH
44560: PPUSH
44561: PPUSH
44562: PPUSH
44563: PPUSH
// result := [ ] ;
44564: LD_ADDR_VAR 0 7
44568: PUSH
44569: EMPTY
44570: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44571: LD_VAR 0 1
44575: PPUSH
44576: CALL_OW 266
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: IN
44591: NOT
44592: IFFALSE 44596
// exit ;
44594: GO 46227
// if name then
44596: LD_VAR 0 3
44600: IFFALSE 44616
// SetBName ( base_dep , name ) ;
44602: LD_VAR 0 1
44606: PPUSH
44607: LD_VAR 0 3
44611: PPUSH
44612: CALL_OW 500
// base := GetBase ( base_dep ) ;
44616: LD_ADDR_VAR 0 15
44620: PUSH
44621: LD_VAR 0 1
44625: PPUSH
44626: CALL_OW 274
44630: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44631: LD_ADDR_VAR 0 16
44635: PUSH
44636: LD_VAR 0 1
44640: PPUSH
44641: CALL_OW 255
44645: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44646: LD_ADDR_VAR 0 17
44650: PUSH
44651: LD_VAR 0 1
44655: PPUSH
44656: CALL_OW 248
44660: ST_TO_ADDR
// if sources then
44661: LD_VAR 0 5
44665: IFFALSE 44712
// for i = 1 to 3 do
44667: LD_ADDR_VAR 0 8
44671: PUSH
44672: DOUBLE
44673: LD_INT 1
44675: DEC
44676: ST_TO_ADDR
44677: LD_INT 3
44679: PUSH
44680: FOR_TO
44681: IFFALSE 44710
// AddResourceType ( base , i , sources [ i ] ) ;
44683: LD_VAR 0 15
44687: PPUSH
44688: LD_VAR 0 8
44692: PPUSH
44693: LD_VAR 0 5
44697: PUSH
44698: LD_VAR 0 8
44702: ARRAY
44703: PPUSH
44704: CALL_OW 276
44708: GO 44680
44710: POP
44711: POP
// buildings := GetBaseBuildings ( base , area ) ;
44712: LD_ADDR_VAR 0 18
44716: PUSH
44717: LD_VAR 0 15
44721: PPUSH
44722: LD_VAR 0 2
44726: PPUSH
44727: CALL 44004 0 2
44731: ST_TO_ADDR
// InitHc ;
44732: CALL_OW 19
// InitUc ;
44736: CALL_OW 18
// uc_side := side ;
44740: LD_ADDR_OWVAR 20
44744: PUSH
44745: LD_VAR 0 16
44749: ST_TO_ADDR
// uc_nation := nation ;
44750: LD_ADDR_OWVAR 21
44754: PUSH
44755: LD_VAR 0 17
44759: ST_TO_ADDR
// if buildings then
44760: LD_VAR 0 18
44764: IFFALSE 46086
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44766: LD_ADDR_VAR 0 19
44770: PUSH
44771: LD_VAR 0 18
44775: PPUSH
44776: LD_INT 2
44778: PUSH
44779: LD_INT 30
44781: PUSH
44782: LD_INT 29
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 30
44791: PUSH
44792: LD_INT 30
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: PPUSH
44804: CALL_OW 72
44808: ST_TO_ADDR
// if tmp then
44809: LD_VAR 0 19
44813: IFFALSE 44861
// for i in tmp do
44815: LD_ADDR_VAR 0 8
44819: PUSH
44820: LD_VAR 0 19
44824: PUSH
44825: FOR_IN
44826: IFFALSE 44859
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44828: LD_VAR 0 8
44832: PPUSH
44833: CALL_OW 250
44837: PPUSH
44838: LD_VAR 0 8
44842: PPUSH
44843: CALL_OW 251
44847: PPUSH
44848: LD_VAR 0 16
44852: PPUSH
44853: CALL_OW 441
44857: GO 44825
44859: POP
44860: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44861: LD_VAR 0 18
44865: PPUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 30
44871: PUSH
44872: LD_INT 32
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 30
44881: PUSH
44882: LD_INT 33
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: PPUSH
44894: CALL_OW 72
44898: IFFALSE 44986
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44900: LD_ADDR_VAR 0 8
44904: PUSH
44905: LD_VAR 0 18
44909: PPUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 30
44915: PUSH
44916: LD_INT 32
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 30
44925: PUSH
44926: LD_INT 33
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: PPUSH
44938: CALL_OW 72
44942: PUSH
44943: FOR_IN
44944: IFFALSE 44984
// begin if not GetBWeapon ( i ) then
44946: LD_VAR 0 8
44950: PPUSH
44951: CALL_OW 269
44955: NOT
44956: IFFALSE 44982
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44958: LD_VAR 0 8
44962: PPUSH
44963: LD_VAR 0 8
44967: PPUSH
44968: LD_VAR 0 2
44972: PPUSH
44973: CALL 46232 0 2
44977: PPUSH
44978: CALL_OW 431
// end ;
44982: GO 44943
44984: POP
44985: POP
// end ; for i = 1 to personel do
44986: LD_ADDR_VAR 0 8
44990: PUSH
44991: DOUBLE
44992: LD_INT 1
44994: DEC
44995: ST_TO_ADDR
44996: LD_VAR 0 6
45000: PUSH
45001: FOR_TO
45002: IFFALSE 46066
// begin if i > 4 then
45004: LD_VAR 0 8
45008: PUSH
45009: LD_INT 4
45011: GREATER
45012: IFFALSE 45016
// break ;
45014: GO 46066
// case i of 1 :
45016: LD_VAR 0 8
45020: PUSH
45021: LD_INT 1
45023: DOUBLE
45024: EQUAL
45025: IFTRUE 45029
45027: GO 45109
45029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45030: LD_ADDR_VAR 0 12
45034: PUSH
45035: LD_VAR 0 18
45039: PPUSH
45040: LD_INT 22
45042: PUSH
45043: LD_VAR 0 16
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 58
45054: PUSH
45055: EMPTY
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: LD_INT 30
45063: PUSH
45064: LD_INT 32
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 30
45073: PUSH
45074: LD_INT 4
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 30
45083: PUSH
45084: LD_INT 5
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: PPUSH
45102: CALL_OW 72
45106: ST_TO_ADDR
45107: GO 45331
45109: LD_INT 2
45111: DOUBLE
45112: EQUAL
45113: IFTRUE 45117
45115: GO 45179
45117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45118: LD_ADDR_VAR 0 12
45122: PUSH
45123: LD_VAR 0 18
45127: PPUSH
45128: LD_INT 22
45130: PUSH
45131: LD_VAR 0 16
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 30
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 30
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PPUSH
45172: CALL_OW 72
45176: ST_TO_ADDR
45177: GO 45331
45179: LD_INT 3
45181: DOUBLE
45182: EQUAL
45183: IFTRUE 45187
45185: GO 45249
45187: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45188: LD_ADDR_VAR 0 12
45192: PUSH
45193: LD_VAR 0 18
45197: PPUSH
45198: LD_INT 22
45200: PUSH
45201: LD_VAR 0 16
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 30
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 30
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PPUSH
45242: CALL_OW 72
45246: ST_TO_ADDR
45247: GO 45331
45249: LD_INT 4
45251: DOUBLE
45252: EQUAL
45253: IFTRUE 45257
45255: GO 45330
45257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45258: LD_ADDR_VAR 0 12
45262: PUSH
45263: LD_VAR 0 18
45267: PPUSH
45268: LD_INT 22
45270: PUSH
45271: LD_VAR 0 16
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 30
45285: PUSH
45286: LD_INT 6
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 30
45295: PUSH
45296: LD_INT 7
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 30
45305: PUSH
45306: LD_INT 8
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PPUSH
45323: CALL_OW 72
45327: ST_TO_ADDR
45328: GO 45331
45330: POP
// if i = 1 then
45331: LD_VAR 0 8
45335: PUSH
45336: LD_INT 1
45338: EQUAL
45339: IFFALSE 45450
// begin tmp := [ ] ;
45341: LD_ADDR_VAR 0 19
45345: PUSH
45346: EMPTY
45347: ST_TO_ADDR
// for j in f do
45348: LD_ADDR_VAR 0 9
45352: PUSH
45353: LD_VAR 0 12
45357: PUSH
45358: FOR_IN
45359: IFFALSE 45432
// if GetBType ( j ) = b_bunker then
45361: LD_VAR 0 9
45365: PPUSH
45366: CALL_OW 266
45370: PUSH
45371: LD_INT 32
45373: EQUAL
45374: IFFALSE 45401
// tmp := Insert ( tmp , 1 , j ) else
45376: LD_ADDR_VAR 0 19
45380: PUSH
45381: LD_VAR 0 19
45385: PPUSH
45386: LD_INT 1
45388: PPUSH
45389: LD_VAR 0 9
45393: PPUSH
45394: CALL_OW 2
45398: ST_TO_ADDR
45399: GO 45430
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45401: LD_ADDR_VAR 0 19
45405: PUSH
45406: LD_VAR 0 19
45410: PPUSH
45411: LD_VAR 0 19
45415: PUSH
45416: LD_INT 1
45418: PLUS
45419: PPUSH
45420: LD_VAR 0 9
45424: PPUSH
45425: CALL_OW 2
45429: ST_TO_ADDR
45430: GO 45358
45432: POP
45433: POP
// if tmp then
45434: LD_VAR 0 19
45438: IFFALSE 45450
// f := tmp ;
45440: LD_ADDR_VAR 0 12
45444: PUSH
45445: LD_VAR 0 19
45449: ST_TO_ADDR
// end ; x := personel [ i ] ;
45450: LD_ADDR_VAR 0 13
45454: PUSH
45455: LD_VAR 0 6
45459: PUSH
45460: LD_VAR 0 8
45464: ARRAY
45465: ST_TO_ADDR
// if x = - 1 then
45466: LD_VAR 0 13
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: EQUAL
45475: IFFALSE 45684
// begin for j in f do
45477: LD_ADDR_VAR 0 9
45481: PUSH
45482: LD_VAR 0 12
45486: PUSH
45487: FOR_IN
45488: IFFALSE 45680
// repeat InitHc ;
45490: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45494: LD_VAR 0 9
45498: PPUSH
45499: CALL_OW 266
45503: PUSH
45504: LD_INT 5
45506: EQUAL
45507: IFFALSE 45577
// begin if UnitsInside ( j ) < 3 then
45509: LD_VAR 0 9
45513: PPUSH
45514: CALL_OW 313
45518: PUSH
45519: LD_INT 3
45521: LESS
45522: IFFALSE 45558
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45524: LD_INT 0
45526: PPUSH
45527: LD_INT 5
45529: PUSH
45530: LD_INT 8
45532: PUSH
45533: LD_INT 9
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: PUSH
45541: LD_VAR 0 17
45545: ARRAY
45546: PPUSH
45547: LD_VAR 0 4
45551: PPUSH
45552: CALL_OW 380
45556: GO 45575
// PrepareHuman ( false , i , skill ) ;
45558: LD_INT 0
45560: PPUSH
45561: LD_VAR 0 8
45565: PPUSH
45566: LD_VAR 0 4
45570: PPUSH
45571: CALL_OW 380
// end else
45575: GO 45594
// PrepareHuman ( false , i , skill ) ;
45577: LD_INT 0
45579: PPUSH
45580: LD_VAR 0 8
45584: PPUSH
45585: LD_VAR 0 4
45589: PPUSH
45590: CALL_OW 380
// un := CreateHuman ;
45594: LD_ADDR_VAR 0 14
45598: PUSH
45599: CALL_OW 44
45603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45604: LD_ADDR_VAR 0 7
45608: PUSH
45609: LD_VAR 0 7
45613: PPUSH
45614: LD_INT 1
45616: PPUSH
45617: LD_VAR 0 14
45621: PPUSH
45622: CALL_OW 2
45626: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45627: LD_VAR 0 14
45631: PPUSH
45632: LD_VAR 0 9
45636: PPUSH
45637: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45641: LD_VAR 0 9
45645: PPUSH
45646: CALL_OW 313
45650: PUSH
45651: LD_INT 6
45653: EQUAL
45654: PUSH
45655: LD_VAR 0 9
45659: PPUSH
45660: CALL_OW 266
45664: PUSH
45665: LD_INT 32
45667: PUSH
45668: LD_INT 31
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: IN
45675: OR
45676: IFFALSE 45490
45678: GO 45487
45680: POP
45681: POP
// end else
45682: GO 46064
// for j = 1 to x do
45684: LD_ADDR_VAR 0 9
45688: PUSH
45689: DOUBLE
45690: LD_INT 1
45692: DEC
45693: ST_TO_ADDR
45694: LD_VAR 0 13
45698: PUSH
45699: FOR_TO
45700: IFFALSE 46062
// begin InitHc ;
45702: CALL_OW 19
// if not f then
45706: LD_VAR 0 12
45710: NOT
45711: IFFALSE 45800
// begin PrepareHuman ( false , i , skill ) ;
45713: LD_INT 0
45715: PPUSH
45716: LD_VAR 0 8
45720: PPUSH
45721: LD_VAR 0 4
45725: PPUSH
45726: CALL_OW 380
// un := CreateHuman ;
45730: LD_ADDR_VAR 0 14
45734: PUSH
45735: CALL_OW 44
45739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45740: LD_ADDR_VAR 0 7
45744: PUSH
45745: LD_VAR 0 7
45749: PPUSH
45750: LD_INT 1
45752: PPUSH
45753: LD_VAR 0 14
45757: PPUSH
45758: CALL_OW 2
45762: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45763: LD_VAR 0 14
45767: PPUSH
45768: LD_VAR 0 1
45772: PPUSH
45773: CALL_OW 250
45777: PPUSH
45778: LD_VAR 0 1
45782: PPUSH
45783: CALL_OW 251
45787: PPUSH
45788: LD_INT 10
45790: PPUSH
45791: LD_INT 0
45793: PPUSH
45794: CALL_OW 50
// continue ;
45798: GO 45699
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45800: LD_VAR 0 12
45804: PUSH
45805: LD_INT 1
45807: ARRAY
45808: PPUSH
45809: CALL_OW 313
45813: PUSH
45814: LD_VAR 0 12
45818: PUSH
45819: LD_INT 1
45821: ARRAY
45822: PPUSH
45823: CALL_OW 266
45827: PUSH
45828: LD_INT 32
45830: PUSH
45831: LD_INT 31
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: IN
45838: AND
45839: PUSH
45840: LD_VAR 0 12
45844: PUSH
45845: LD_INT 1
45847: ARRAY
45848: PPUSH
45849: CALL_OW 313
45853: PUSH
45854: LD_INT 6
45856: EQUAL
45857: OR
45858: IFFALSE 45878
// f := Delete ( f , 1 ) ;
45860: LD_ADDR_VAR 0 12
45864: PUSH
45865: LD_VAR 0 12
45869: PPUSH
45870: LD_INT 1
45872: PPUSH
45873: CALL_OW 3
45877: ST_TO_ADDR
// if not f then
45878: LD_VAR 0 12
45882: NOT
45883: IFFALSE 45901
// begin x := x + 2 ;
45885: LD_ADDR_VAR 0 13
45889: PUSH
45890: LD_VAR 0 13
45894: PUSH
45895: LD_INT 2
45897: PLUS
45898: ST_TO_ADDR
// continue ;
45899: GO 45699
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45901: LD_VAR 0 12
45905: PUSH
45906: LD_INT 1
45908: ARRAY
45909: PPUSH
45910: CALL_OW 266
45914: PUSH
45915: LD_INT 5
45917: EQUAL
45918: IFFALSE 45992
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45920: LD_VAR 0 12
45924: PUSH
45925: LD_INT 1
45927: ARRAY
45928: PPUSH
45929: CALL_OW 313
45933: PUSH
45934: LD_INT 3
45936: LESS
45937: IFFALSE 45973
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45939: LD_INT 0
45941: PPUSH
45942: LD_INT 5
45944: PUSH
45945: LD_INT 8
45947: PUSH
45948: LD_INT 9
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: PUSH
45956: LD_VAR 0 17
45960: ARRAY
45961: PPUSH
45962: LD_VAR 0 4
45966: PPUSH
45967: CALL_OW 380
45971: GO 45990
// PrepareHuman ( false , i , skill ) ;
45973: LD_INT 0
45975: PPUSH
45976: LD_VAR 0 8
45980: PPUSH
45981: LD_VAR 0 4
45985: PPUSH
45986: CALL_OW 380
// end else
45990: GO 46009
// PrepareHuman ( false , i , skill ) ;
45992: LD_INT 0
45994: PPUSH
45995: LD_VAR 0 8
45999: PPUSH
46000: LD_VAR 0 4
46004: PPUSH
46005: CALL_OW 380
// un := CreateHuman ;
46009: LD_ADDR_VAR 0 14
46013: PUSH
46014: CALL_OW 44
46018: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46019: LD_ADDR_VAR 0 7
46023: PUSH
46024: LD_VAR 0 7
46028: PPUSH
46029: LD_INT 1
46031: PPUSH
46032: LD_VAR 0 14
46036: PPUSH
46037: CALL_OW 2
46041: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46042: LD_VAR 0 14
46046: PPUSH
46047: LD_VAR 0 12
46051: PUSH
46052: LD_INT 1
46054: ARRAY
46055: PPUSH
46056: CALL_OW 52
// end ;
46060: GO 45699
46062: POP
46063: POP
// end ;
46064: GO 45001
46066: POP
46067: POP
// result := result ^ buildings ;
46068: LD_ADDR_VAR 0 7
46072: PUSH
46073: LD_VAR 0 7
46077: PUSH
46078: LD_VAR 0 18
46082: ADD
46083: ST_TO_ADDR
// end else
46084: GO 46227
// begin for i = 1 to personel do
46086: LD_ADDR_VAR 0 8
46090: PUSH
46091: DOUBLE
46092: LD_INT 1
46094: DEC
46095: ST_TO_ADDR
46096: LD_VAR 0 6
46100: PUSH
46101: FOR_TO
46102: IFFALSE 46225
// begin if i > 4 then
46104: LD_VAR 0 8
46108: PUSH
46109: LD_INT 4
46111: GREATER
46112: IFFALSE 46116
// break ;
46114: GO 46225
// x := personel [ i ] ;
46116: LD_ADDR_VAR 0 13
46120: PUSH
46121: LD_VAR 0 6
46125: PUSH
46126: LD_VAR 0 8
46130: ARRAY
46131: ST_TO_ADDR
// if x = - 1 then
46132: LD_VAR 0 13
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: EQUAL
46141: IFFALSE 46145
// continue ;
46143: GO 46101
// PrepareHuman ( false , i , skill ) ;
46145: LD_INT 0
46147: PPUSH
46148: LD_VAR 0 8
46152: PPUSH
46153: LD_VAR 0 4
46157: PPUSH
46158: CALL_OW 380
// un := CreateHuman ;
46162: LD_ADDR_VAR 0 14
46166: PUSH
46167: CALL_OW 44
46171: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46172: LD_VAR 0 14
46176: PPUSH
46177: LD_VAR 0 1
46181: PPUSH
46182: CALL_OW 250
46186: PPUSH
46187: LD_VAR 0 1
46191: PPUSH
46192: CALL_OW 251
46196: PPUSH
46197: LD_INT 10
46199: PPUSH
46200: LD_INT 0
46202: PPUSH
46203: CALL_OW 50
// result := result ^ un ;
46207: LD_ADDR_VAR 0 7
46211: PUSH
46212: LD_VAR 0 7
46216: PUSH
46217: LD_VAR 0 14
46221: ADD
46222: ST_TO_ADDR
// end ;
46223: GO 46101
46225: POP
46226: POP
// end ; end ;
46227: LD_VAR 0 7
46231: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46232: LD_INT 0
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
// result := false ;
46250: LD_ADDR_VAR 0 3
46254: PUSH
46255: LD_INT 0
46257: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46258: LD_VAR 0 1
46262: NOT
46263: PUSH
46264: LD_VAR 0 1
46268: PPUSH
46269: CALL_OW 266
46273: PUSH
46274: LD_INT 32
46276: PUSH
46277: LD_INT 33
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: IN
46284: NOT
46285: OR
46286: IFFALSE 46290
// exit ;
46288: GO 47426
// nat := GetNation ( tower ) ;
46290: LD_ADDR_VAR 0 12
46294: PUSH
46295: LD_VAR 0 1
46299: PPUSH
46300: CALL_OW 248
46304: ST_TO_ADDR
// side := GetSide ( tower ) ;
46305: LD_ADDR_VAR 0 16
46309: PUSH
46310: LD_VAR 0 1
46314: PPUSH
46315: CALL_OW 255
46319: ST_TO_ADDR
// x := GetX ( tower ) ;
46320: LD_ADDR_VAR 0 10
46324: PUSH
46325: LD_VAR 0 1
46329: PPUSH
46330: CALL_OW 250
46334: ST_TO_ADDR
// y := GetY ( tower ) ;
46335: LD_ADDR_VAR 0 11
46339: PUSH
46340: LD_VAR 0 1
46344: PPUSH
46345: CALL_OW 251
46349: ST_TO_ADDR
// if not x or not y then
46350: LD_VAR 0 10
46354: NOT
46355: PUSH
46356: LD_VAR 0 11
46360: NOT
46361: OR
46362: IFFALSE 46366
// exit ;
46364: GO 47426
// weapon := 0 ;
46366: LD_ADDR_VAR 0 18
46370: PUSH
46371: LD_INT 0
46373: ST_TO_ADDR
// fac_list := [ ] ;
46374: LD_ADDR_VAR 0 17
46378: PUSH
46379: EMPTY
46380: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
46381: LD_ADDR_VAR 0 6
46385: PUSH
46386: LD_VAR 0 1
46390: PPUSH
46391: CALL_OW 274
46395: PPUSH
46396: LD_VAR 0 2
46400: PPUSH
46401: CALL 44004 0 2
46405: PPUSH
46406: LD_INT 30
46408: PUSH
46409: LD_INT 3
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PPUSH
46416: CALL_OW 72
46420: ST_TO_ADDR
// if not factories then
46421: LD_VAR 0 6
46425: NOT
46426: IFFALSE 46430
// exit ;
46428: GO 47426
// for i in factories do
46430: LD_ADDR_VAR 0 8
46434: PUSH
46435: LD_VAR 0 6
46439: PUSH
46440: FOR_IN
46441: IFFALSE 46466
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46443: LD_ADDR_VAR 0 17
46447: PUSH
46448: LD_VAR 0 17
46452: PUSH
46453: LD_VAR 0 8
46457: PPUSH
46458: CALL_OW 478
46462: UNION
46463: ST_TO_ADDR
46464: GO 46440
46466: POP
46467: POP
// if not fac_list then
46468: LD_VAR 0 17
46472: NOT
46473: IFFALSE 46477
// exit ;
46475: GO 47426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46477: LD_ADDR_VAR 0 5
46481: PUSH
46482: LD_INT 4
46484: PUSH
46485: LD_INT 5
46487: PUSH
46488: LD_INT 9
46490: PUSH
46491: LD_INT 10
46493: PUSH
46494: LD_INT 6
46496: PUSH
46497: LD_INT 7
46499: PUSH
46500: LD_INT 11
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 27
46514: PUSH
46515: LD_INT 28
46517: PUSH
46518: LD_INT 26
46520: PUSH
46521: LD_INT 30
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 43
46532: PUSH
46533: LD_INT 44
46535: PUSH
46536: LD_INT 46
46538: PUSH
46539: LD_INT 45
46541: PUSH
46542: LD_INT 47
46544: PUSH
46545: LD_INT 49
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: PUSH
46561: LD_VAR 0 12
46565: ARRAY
46566: ST_TO_ADDR
// for i in list do
46567: LD_ADDR_VAR 0 8
46571: PUSH
46572: LD_VAR 0 5
46576: PUSH
46577: FOR_IN
46578: IFFALSE 46611
// if not i in fac_list then
46580: LD_VAR 0 8
46584: PUSH
46585: LD_VAR 0 17
46589: IN
46590: NOT
46591: IFFALSE 46609
// list := list diff i ;
46593: LD_ADDR_VAR 0 5
46597: PUSH
46598: LD_VAR 0 5
46602: PUSH
46603: LD_VAR 0 8
46607: DIFF
46608: ST_TO_ADDR
46609: GO 46577
46611: POP
46612: POP
// if not list then
46613: LD_VAR 0 5
46617: NOT
46618: IFFALSE 46622
// exit ;
46620: GO 47426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46622: LD_VAR 0 12
46626: PUSH
46627: LD_INT 3
46629: EQUAL
46630: PUSH
46631: LD_INT 49
46633: PUSH
46634: LD_VAR 0 5
46638: IN
46639: AND
46640: PUSH
46641: LD_INT 31
46643: PPUSH
46644: LD_VAR 0 16
46648: PPUSH
46649: CALL_OW 321
46653: PUSH
46654: LD_INT 2
46656: EQUAL
46657: AND
46658: IFFALSE 46718
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46660: LD_INT 22
46662: PUSH
46663: LD_VAR 0 16
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 35
46674: PUSH
46675: LD_INT 49
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 91
46684: PUSH
46685: LD_VAR 0 1
46689: PUSH
46690: LD_INT 10
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: PPUSH
46703: CALL_OW 69
46707: NOT
46708: IFFALSE 46718
// weapon := ru_time_lapser ;
46710: LD_ADDR_VAR 0 18
46714: PUSH
46715: LD_INT 49
46717: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46718: LD_VAR 0 12
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: IN
46733: PUSH
46734: LD_INT 11
46736: PUSH
46737: LD_VAR 0 5
46741: IN
46742: PUSH
46743: LD_INT 30
46745: PUSH
46746: LD_VAR 0 5
46750: IN
46751: OR
46752: AND
46753: PUSH
46754: LD_INT 6
46756: PPUSH
46757: LD_VAR 0 16
46761: PPUSH
46762: CALL_OW 321
46766: PUSH
46767: LD_INT 2
46769: EQUAL
46770: AND
46771: IFFALSE 46936
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46773: LD_INT 22
46775: PUSH
46776: LD_VAR 0 16
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: LD_INT 35
46790: PUSH
46791: LD_INT 11
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 35
46800: PUSH
46801: LD_INT 30
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 91
46815: PUSH
46816: LD_VAR 0 1
46820: PUSH
46821: LD_INT 18
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: PPUSH
46834: CALL_OW 69
46838: NOT
46839: PUSH
46840: LD_INT 22
46842: PUSH
46843: LD_VAR 0 16
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 30
46857: PUSH
46858: LD_INT 32
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 30
46867: PUSH
46868: LD_INT 33
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 91
46882: PUSH
46883: LD_VAR 0 1
46887: PUSH
46888: LD_INT 12
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: PUSH
46901: EMPTY
46902: LIST
46903: PPUSH
46904: CALL_OW 69
46908: PUSH
46909: LD_INT 2
46911: GREATER
46912: AND
46913: IFFALSE 46936
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46915: LD_ADDR_VAR 0 18
46919: PUSH
46920: LD_INT 11
46922: PUSH
46923: LD_INT 30
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_VAR 0 12
46934: ARRAY
46935: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46936: LD_VAR 0 18
46940: NOT
46941: PUSH
46942: LD_INT 40
46944: PPUSH
46945: LD_VAR 0 16
46949: PPUSH
46950: CALL_OW 321
46954: PUSH
46955: LD_INT 2
46957: EQUAL
46958: AND
46959: PUSH
46960: LD_INT 7
46962: PUSH
46963: LD_VAR 0 5
46967: IN
46968: PUSH
46969: LD_INT 28
46971: PUSH
46972: LD_VAR 0 5
46976: IN
46977: OR
46978: PUSH
46979: LD_INT 45
46981: PUSH
46982: LD_VAR 0 5
46986: IN
46987: OR
46988: AND
46989: IFFALSE 47243
// begin hex := GetHexInfo ( x , y ) ;
46991: LD_ADDR_VAR 0 4
46995: PUSH
46996: LD_VAR 0 10
47000: PPUSH
47001: LD_VAR 0 11
47005: PPUSH
47006: CALL_OW 546
47010: ST_TO_ADDR
// if hex [ 1 ] then
47011: LD_VAR 0 4
47015: PUSH
47016: LD_INT 1
47018: ARRAY
47019: IFFALSE 47023
// exit ;
47021: GO 47426
// height := hex [ 2 ] ;
47023: LD_ADDR_VAR 0 15
47027: PUSH
47028: LD_VAR 0 4
47032: PUSH
47033: LD_INT 2
47035: ARRAY
47036: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47037: LD_ADDR_VAR 0 14
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: LD_INT 5
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: ST_TO_ADDR
// for i in tmp do
47060: LD_ADDR_VAR 0 8
47064: PUSH
47065: LD_VAR 0 14
47069: PUSH
47070: FOR_IN
47071: IFFALSE 47241
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47073: LD_ADDR_VAR 0 9
47077: PUSH
47078: LD_VAR 0 10
47082: PPUSH
47083: LD_VAR 0 8
47087: PPUSH
47088: LD_INT 5
47090: PPUSH
47091: CALL_OW 272
47095: PUSH
47096: LD_VAR 0 11
47100: PPUSH
47101: LD_VAR 0 8
47105: PPUSH
47106: LD_INT 5
47108: PPUSH
47109: CALL_OW 273
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47118: LD_VAR 0 9
47122: PUSH
47123: LD_INT 1
47125: ARRAY
47126: PPUSH
47127: LD_VAR 0 9
47131: PUSH
47132: LD_INT 2
47134: ARRAY
47135: PPUSH
47136: CALL_OW 488
47140: IFFALSE 47239
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47142: LD_ADDR_VAR 0 4
47146: PUSH
47147: LD_VAR 0 9
47151: PUSH
47152: LD_INT 1
47154: ARRAY
47155: PPUSH
47156: LD_VAR 0 9
47160: PUSH
47161: LD_INT 2
47163: ARRAY
47164: PPUSH
47165: CALL_OW 546
47169: ST_TO_ADDR
// if hex [ 1 ] then
47170: LD_VAR 0 4
47174: PUSH
47175: LD_INT 1
47177: ARRAY
47178: IFFALSE 47182
// continue ;
47180: GO 47070
// h := hex [ 2 ] ;
47182: LD_ADDR_VAR 0 13
47186: PUSH
47187: LD_VAR 0 4
47191: PUSH
47192: LD_INT 2
47194: ARRAY
47195: ST_TO_ADDR
// if h + 7 < height then
47196: LD_VAR 0 13
47200: PUSH
47201: LD_INT 7
47203: PLUS
47204: PUSH
47205: LD_VAR 0 15
47209: LESS
47210: IFFALSE 47239
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47212: LD_ADDR_VAR 0 18
47216: PUSH
47217: LD_INT 7
47219: PUSH
47220: LD_INT 28
47222: PUSH
47223: LD_INT 45
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: PUSH
47231: LD_VAR 0 12
47235: ARRAY
47236: ST_TO_ADDR
// break ;
47237: GO 47241
// end ; end ; end ;
47239: GO 47070
47241: POP
47242: POP
// end ; if not weapon then
47243: LD_VAR 0 18
47247: NOT
47248: IFFALSE 47308
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47250: LD_ADDR_VAR 0 5
47254: PUSH
47255: LD_VAR 0 5
47259: PUSH
47260: LD_INT 11
47262: PUSH
47263: LD_INT 30
47265: PUSH
47266: LD_INT 49
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: LIST
47273: DIFF
47274: ST_TO_ADDR
// if not list then
47275: LD_VAR 0 5
47279: NOT
47280: IFFALSE 47284
// exit ;
47282: GO 47426
// weapon := list [ rand ( 1 , list ) ] ;
47284: LD_ADDR_VAR 0 18
47288: PUSH
47289: LD_VAR 0 5
47293: PUSH
47294: LD_INT 1
47296: PPUSH
47297: LD_VAR 0 5
47301: PPUSH
47302: CALL_OW 12
47306: ARRAY
47307: ST_TO_ADDR
// end ; if weapon then
47308: LD_VAR 0 18
47312: IFFALSE 47426
// begin tmp := CostOfWeapon ( weapon ) ;
47314: LD_ADDR_VAR 0 14
47318: PUSH
47319: LD_VAR 0 18
47323: PPUSH
47324: CALL_OW 451
47328: ST_TO_ADDR
// j := GetBase ( tower ) ;
47329: LD_ADDR_VAR 0 9
47333: PUSH
47334: LD_VAR 0 1
47338: PPUSH
47339: CALL_OW 274
47343: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47344: LD_VAR 0 9
47348: PPUSH
47349: LD_INT 1
47351: PPUSH
47352: CALL_OW 275
47356: PUSH
47357: LD_VAR 0 14
47361: PUSH
47362: LD_INT 1
47364: ARRAY
47365: GREATEREQUAL
47366: PUSH
47367: LD_VAR 0 9
47371: PPUSH
47372: LD_INT 2
47374: PPUSH
47375: CALL_OW 275
47379: PUSH
47380: LD_VAR 0 14
47384: PUSH
47385: LD_INT 2
47387: ARRAY
47388: GREATEREQUAL
47389: AND
47390: PUSH
47391: LD_VAR 0 9
47395: PPUSH
47396: LD_INT 3
47398: PPUSH
47399: CALL_OW 275
47403: PUSH
47404: LD_VAR 0 14
47408: PUSH
47409: LD_INT 3
47411: ARRAY
47412: GREATEREQUAL
47413: AND
47414: IFFALSE 47426
// result := weapon ;
47416: LD_ADDR_VAR 0 3
47420: PUSH
47421: LD_VAR 0 18
47425: ST_TO_ADDR
// end ; end ;
47426: LD_VAR 0 3
47430: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47431: LD_INT 0
47433: PPUSH
47434: PPUSH
// result := true ;
47435: LD_ADDR_VAR 0 3
47439: PUSH
47440: LD_INT 1
47442: ST_TO_ADDR
// if array1 = array2 then
47443: LD_VAR 0 1
47447: PUSH
47448: LD_VAR 0 2
47452: EQUAL
47453: IFFALSE 47513
// begin for i = 1 to array1 do
47455: LD_ADDR_VAR 0 4
47459: PUSH
47460: DOUBLE
47461: LD_INT 1
47463: DEC
47464: ST_TO_ADDR
47465: LD_VAR 0 1
47469: PUSH
47470: FOR_TO
47471: IFFALSE 47509
// if array1 [ i ] <> array2 [ i ] then
47473: LD_VAR 0 1
47477: PUSH
47478: LD_VAR 0 4
47482: ARRAY
47483: PUSH
47484: LD_VAR 0 2
47488: PUSH
47489: LD_VAR 0 4
47493: ARRAY
47494: NONEQUAL
47495: IFFALSE 47507
// begin result := false ;
47497: LD_ADDR_VAR 0 3
47501: PUSH
47502: LD_INT 0
47504: ST_TO_ADDR
// break ;
47505: GO 47509
// end ;
47507: GO 47470
47509: POP
47510: POP
// end else
47511: GO 47521
// result := false ;
47513: LD_ADDR_VAR 0 3
47517: PUSH
47518: LD_INT 0
47520: ST_TO_ADDR
// end ;
47521: LD_VAR 0 3
47525: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47526: LD_INT 0
47528: PPUSH
47529: PPUSH
47530: PPUSH
// pom := GetBase ( fac ) ;
47531: LD_ADDR_VAR 0 5
47535: PUSH
47536: LD_VAR 0 1
47540: PPUSH
47541: CALL_OW 274
47545: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47546: LD_ADDR_VAR 0 4
47550: PUSH
47551: LD_VAR 0 2
47555: PUSH
47556: LD_INT 1
47558: ARRAY
47559: PPUSH
47560: LD_VAR 0 2
47564: PUSH
47565: LD_INT 2
47567: ARRAY
47568: PPUSH
47569: LD_VAR 0 2
47573: PUSH
47574: LD_INT 3
47576: ARRAY
47577: PPUSH
47578: LD_VAR 0 2
47582: PUSH
47583: LD_INT 4
47585: ARRAY
47586: PPUSH
47587: CALL_OW 449
47591: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47592: LD_ADDR_VAR 0 3
47596: PUSH
47597: LD_VAR 0 5
47601: PPUSH
47602: LD_INT 1
47604: PPUSH
47605: CALL_OW 275
47609: PUSH
47610: LD_VAR 0 4
47614: PUSH
47615: LD_INT 1
47617: ARRAY
47618: GREATEREQUAL
47619: PUSH
47620: LD_VAR 0 5
47624: PPUSH
47625: LD_INT 2
47627: PPUSH
47628: CALL_OW 275
47632: PUSH
47633: LD_VAR 0 4
47637: PUSH
47638: LD_INT 2
47640: ARRAY
47641: GREATEREQUAL
47642: AND
47643: PUSH
47644: LD_VAR 0 5
47648: PPUSH
47649: LD_INT 3
47651: PPUSH
47652: CALL_OW 275
47656: PUSH
47657: LD_VAR 0 4
47661: PUSH
47662: LD_INT 3
47664: ARRAY
47665: GREATEREQUAL
47666: AND
47667: ST_TO_ADDR
// end ;
47668: LD_VAR 0 3
47672: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47673: LD_INT 0
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
// pom := GetBase ( building ) ;
47679: LD_ADDR_VAR 0 3
47683: PUSH
47684: LD_VAR 0 1
47688: PPUSH
47689: CALL_OW 274
47693: ST_TO_ADDR
// if not pom then
47694: LD_VAR 0 3
47698: NOT
47699: IFFALSE 47703
// exit ;
47701: GO 47873
// btype := GetBType ( building ) ;
47703: LD_ADDR_VAR 0 5
47707: PUSH
47708: LD_VAR 0 1
47712: PPUSH
47713: CALL_OW 266
47717: ST_TO_ADDR
// if btype = b_armoury then
47718: LD_VAR 0 5
47722: PUSH
47723: LD_INT 4
47725: EQUAL
47726: IFFALSE 47736
// btype := b_barracks ;
47728: LD_ADDR_VAR 0 5
47732: PUSH
47733: LD_INT 5
47735: ST_TO_ADDR
// if btype = b_depot then
47736: LD_VAR 0 5
47740: PUSH
47741: LD_INT 0
47743: EQUAL
47744: IFFALSE 47754
// btype := b_warehouse ;
47746: LD_ADDR_VAR 0 5
47750: PUSH
47751: LD_INT 1
47753: ST_TO_ADDR
// if btype = b_workshop then
47754: LD_VAR 0 5
47758: PUSH
47759: LD_INT 2
47761: EQUAL
47762: IFFALSE 47772
// btype := b_factory ;
47764: LD_ADDR_VAR 0 5
47768: PUSH
47769: LD_INT 3
47771: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47772: LD_ADDR_VAR 0 4
47776: PUSH
47777: LD_VAR 0 5
47781: PPUSH
47782: LD_VAR 0 1
47786: PPUSH
47787: CALL_OW 248
47791: PPUSH
47792: CALL_OW 450
47796: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47797: LD_ADDR_VAR 0 2
47801: PUSH
47802: LD_VAR 0 3
47806: PPUSH
47807: LD_INT 1
47809: PPUSH
47810: CALL_OW 275
47814: PUSH
47815: LD_VAR 0 4
47819: PUSH
47820: LD_INT 1
47822: ARRAY
47823: GREATEREQUAL
47824: PUSH
47825: LD_VAR 0 3
47829: PPUSH
47830: LD_INT 2
47832: PPUSH
47833: CALL_OW 275
47837: PUSH
47838: LD_VAR 0 4
47842: PUSH
47843: LD_INT 2
47845: ARRAY
47846: GREATEREQUAL
47847: AND
47848: PUSH
47849: LD_VAR 0 3
47853: PPUSH
47854: LD_INT 3
47856: PPUSH
47857: CALL_OW 275
47861: PUSH
47862: LD_VAR 0 4
47866: PUSH
47867: LD_INT 3
47869: ARRAY
47870: GREATEREQUAL
47871: AND
47872: ST_TO_ADDR
// end ;
47873: LD_VAR 0 2
47877: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47878: LD_INT 0
47880: PPUSH
47881: PPUSH
47882: PPUSH
// pom := GetBase ( building ) ;
47883: LD_ADDR_VAR 0 4
47887: PUSH
47888: LD_VAR 0 1
47892: PPUSH
47893: CALL_OW 274
47897: ST_TO_ADDR
// if not pom then
47898: LD_VAR 0 4
47902: NOT
47903: IFFALSE 47907
// exit ;
47905: GO 48008
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47907: LD_ADDR_VAR 0 5
47911: PUSH
47912: LD_VAR 0 2
47916: PPUSH
47917: LD_VAR 0 1
47921: PPUSH
47922: CALL_OW 248
47926: PPUSH
47927: CALL_OW 450
47931: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47932: LD_ADDR_VAR 0 3
47936: PUSH
47937: LD_VAR 0 4
47941: PPUSH
47942: LD_INT 1
47944: PPUSH
47945: CALL_OW 275
47949: PUSH
47950: LD_VAR 0 5
47954: PUSH
47955: LD_INT 1
47957: ARRAY
47958: GREATEREQUAL
47959: PUSH
47960: LD_VAR 0 4
47964: PPUSH
47965: LD_INT 2
47967: PPUSH
47968: CALL_OW 275
47972: PUSH
47973: LD_VAR 0 5
47977: PUSH
47978: LD_INT 2
47980: ARRAY
47981: GREATEREQUAL
47982: AND
47983: PUSH
47984: LD_VAR 0 4
47988: PPUSH
47989: LD_INT 3
47991: PPUSH
47992: CALL_OW 275
47996: PUSH
47997: LD_VAR 0 5
48001: PUSH
48002: LD_INT 3
48004: ARRAY
48005: GREATEREQUAL
48006: AND
48007: ST_TO_ADDR
// end ;
48008: LD_VAR 0 3
48012: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
48013: LD_INT 0
48015: PPUSH
48016: PPUSH
48017: PPUSH
48018: PPUSH
48019: PPUSH
48020: PPUSH
48021: PPUSH
48022: PPUSH
48023: PPUSH
48024: PPUSH
// result := false ;
48025: LD_ADDR_VAR 0 6
48029: PUSH
48030: LD_INT 0
48032: ST_TO_ADDR
// if not base or not btype or not x or not y then
48033: LD_VAR 0 1
48037: NOT
48038: PUSH
48039: LD_VAR 0 2
48043: NOT
48044: OR
48045: PUSH
48046: LD_VAR 0 3
48050: NOT
48051: OR
48052: PUSH
48053: LD_VAR 0 4
48057: NOT
48058: OR
48059: IFFALSE 48063
// exit ;
48061: GO 48672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
48063: LD_ADDR_VAR 0 12
48067: PUSH
48068: LD_VAR 0 2
48072: PPUSH
48073: LD_VAR 0 3
48077: PPUSH
48078: LD_VAR 0 4
48082: PPUSH
48083: LD_VAR 0 5
48087: PPUSH
48088: LD_VAR 0 1
48092: PUSH
48093: LD_INT 1
48095: ARRAY
48096: PPUSH
48097: CALL_OW 248
48101: PPUSH
48102: LD_INT 0
48104: PPUSH
48105: CALL 49509 0 6
48109: ST_TO_ADDR
// if not hexes then
48110: LD_VAR 0 12
48114: NOT
48115: IFFALSE 48119
// exit ;
48117: GO 48672
// for i = 1 to hexes do
48119: LD_ADDR_VAR 0 7
48123: PUSH
48124: DOUBLE
48125: LD_INT 1
48127: DEC
48128: ST_TO_ADDR
48129: LD_VAR 0 12
48133: PUSH
48134: FOR_TO
48135: IFFALSE 48670
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48137: LD_ADDR_VAR 0 11
48141: PUSH
48142: LD_VAR 0 12
48146: PUSH
48147: LD_VAR 0 7
48151: ARRAY
48152: PUSH
48153: LD_INT 1
48155: ARRAY
48156: PPUSH
48157: LD_VAR 0 12
48161: PUSH
48162: LD_VAR 0 7
48166: ARRAY
48167: PUSH
48168: LD_INT 2
48170: ARRAY
48171: PPUSH
48172: CALL_OW 428
48176: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48177: LD_VAR 0 12
48181: PUSH
48182: LD_VAR 0 7
48186: ARRAY
48187: PUSH
48188: LD_INT 1
48190: ARRAY
48191: PPUSH
48192: LD_VAR 0 12
48196: PUSH
48197: LD_VAR 0 7
48201: ARRAY
48202: PUSH
48203: LD_INT 2
48205: ARRAY
48206: PPUSH
48207: CALL_OW 351
48211: PUSH
48212: LD_VAR 0 12
48216: PUSH
48217: LD_VAR 0 7
48221: ARRAY
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: PPUSH
48227: LD_VAR 0 12
48231: PUSH
48232: LD_VAR 0 7
48236: ARRAY
48237: PUSH
48238: LD_INT 2
48240: ARRAY
48241: PPUSH
48242: CALL_OW 488
48246: NOT
48247: OR
48248: PUSH
48249: LD_VAR 0 11
48253: PPUSH
48254: CALL_OW 247
48258: PUSH
48259: LD_INT 3
48261: EQUAL
48262: OR
48263: IFFALSE 48269
// exit ;
48265: POP
48266: POP
48267: GO 48672
// if not tmp or not tmp in base then
48269: LD_VAR 0 11
48273: NOT
48274: PUSH
48275: LD_VAR 0 11
48279: PUSH
48280: LD_VAR 0 1
48284: IN
48285: NOT
48286: OR
48287: IFFALSE 48291
// continue ;
48289: GO 48134
// result := true ;
48291: LD_ADDR_VAR 0 6
48295: PUSH
48296: LD_INT 1
48298: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48299: LD_ADDR_VAR 0 15
48303: PUSH
48304: LD_VAR 0 1
48308: PPUSH
48309: LD_INT 22
48311: PUSH
48312: LD_VAR 0 11
48316: PPUSH
48317: CALL_OW 255
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 30
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 30
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PPUSH
48358: CALL_OW 72
48362: ST_TO_ADDR
// if dep then
48363: LD_VAR 0 15
48367: IFFALSE 48503
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48369: LD_ADDR_VAR 0 14
48373: PUSH
48374: LD_VAR 0 15
48378: PUSH
48379: LD_INT 1
48381: ARRAY
48382: PPUSH
48383: CALL_OW 250
48387: PPUSH
48388: LD_VAR 0 15
48392: PUSH
48393: LD_INT 1
48395: ARRAY
48396: PPUSH
48397: CALL_OW 254
48401: PPUSH
48402: LD_INT 5
48404: PPUSH
48405: CALL_OW 272
48409: PUSH
48410: LD_VAR 0 15
48414: PUSH
48415: LD_INT 1
48417: ARRAY
48418: PPUSH
48419: CALL_OW 251
48423: PPUSH
48424: LD_VAR 0 15
48428: PUSH
48429: LD_INT 1
48431: ARRAY
48432: PPUSH
48433: CALL_OW 254
48437: PPUSH
48438: LD_INT 5
48440: PPUSH
48441: CALL_OW 273
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48450: LD_VAR 0 14
48454: PUSH
48455: LD_INT 1
48457: ARRAY
48458: PPUSH
48459: LD_VAR 0 14
48463: PUSH
48464: LD_INT 2
48466: ARRAY
48467: PPUSH
48468: CALL_OW 488
48472: IFFALSE 48503
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48474: LD_VAR 0 11
48478: PPUSH
48479: LD_VAR 0 14
48483: PUSH
48484: LD_INT 1
48486: ARRAY
48487: PPUSH
48488: LD_VAR 0 14
48492: PUSH
48493: LD_INT 2
48495: ARRAY
48496: PPUSH
48497: CALL_OW 111
// continue ;
48501: GO 48134
// end ; end ; r := GetDir ( tmp ) ;
48503: LD_ADDR_VAR 0 13
48507: PUSH
48508: LD_VAR 0 11
48512: PPUSH
48513: CALL_OW 254
48517: ST_TO_ADDR
// if r = 5 then
48518: LD_VAR 0 13
48522: PUSH
48523: LD_INT 5
48525: EQUAL
48526: IFFALSE 48536
// r := 0 ;
48528: LD_ADDR_VAR 0 13
48532: PUSH
48533: LD_INT 0
48535: ST_TO_ADDR
// for j = r to 5 do
48536: LD_ADDR_VAR 0 8
48540: PUSH
48541: DOUBLE
48542: LD_VAR 0 13
48546: DEC
48547: ST_TO_ADDR
48548: LD_INT 5
48550: PUSH
48551: FOR_TO
48552: IFFALSE 48666
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48554: LD_ADDR_VAR 0 9
48558: PUSH
48559: LD_VAR 0 11
48563: PPUSH
48564: CALL_OW 250
48568: PPUSH
48569: LD_VAR 0 8
48573: PPUSH
48574: LD_INT 2
48576: PPUSH
48577: CALL_OW 272
48581: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48582: LD_ADDR_VAR 0 10
48586: PUSH
48587: LD_VAR 0 11
48591: PPUSH
48592: CALL_OW 251
48596: PPUSH
48597: LD_VAR 0 8
48601: PPUSH
48602: LD_INT 2
48604: PPUSH
48605: CALL_OW 273
48609: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48610: LD_VAR 0 9
48614: PPUSH
48615: LD_VAR 0 10
48619: PPUSH
48620: CALL_OW 488
48624: PUSH
48625: LD_VAR 0 9
48629: PPUSH
48630: LD_VAR 0 10
48634: PPUSH
48635: CALL_OW 428
48639: NOT
48640: AND
48641: IFFALSE 48664
// begin ComMoveXY ( tmp , _x , _y ) ;
48643: LD_VAR 0 11
48647: PPUSH
48648: LD_VAR 0 9
48652: PPUSH
48653: LD_VAR 0 10
48657: PPUSH
48658: CALL_OW 111
// break ;
48662: GO 48666
// end ; end ;
48664: GO 48551
48666: POP
48667: POP
// end ;
48668: GO 48134
48670: POP
48671: POP
// end ;
48672: LD_VAR 0 6
48676: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48677: LD_INT 0
48679: PPUSH
48680: PPUSH
48681: PPUSH
48682: PPUSH
48683: PPUSH
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
48688: PPUSH
// result := false ;
48689: LD_ADDR_VAR 0 6
48693: PUSH
48694: LD_INT 0
48696: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48697: LD_VAR 0 1
48701: NOT
48702: PUSH
48703: LD_VAR 0 1
48707: PPUSH
48708: CALL_OW 266
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: IN
48723: NOT
48724: OR
48725: PUSH
48726: LD_VAR 0 2
48730: NOT
48731: OR
48732: PUSH
48733: LD_VAR 0 5
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: LD_INT 4
48752: PUSH
48753: LD_INT 5
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: IN
48764: NOT
48765: OR
48766: PUSH
48767: LD_VAR 0 3
48771: PPUSH
48772: LD_VAR 0 4
48776: PPUSH
48777: CALL_OW 488
48781: NOT
48782: OR
48783: IFFALSE 48787
// exit ;
48785: GO 49504
// pom := GetBase ( depot ) ;
48787: LD_ADDR_VAR 0 10
48791: PUSH
48792: LD_VAR 0 1
48796: PPUSH
48797: CALL_OW 274
48801: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48802: LD_ADDR_VAR 0 11
48806: PUSH
48807: LD_VAR 0 2
48811: PPUSH
48812: LD_VAR 0 1
48816: PPUSH
48817: CALL_OW 248
48821: PPUSH
48822: CALL_OW 450
48826: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48827: LD_VAR 0 10
48831: PPUSH
48832: LD_INT 1
48834: PPUSH
48835: CALL_OW 275
48839: PUSH
48840: LD_VAR 0 11
48844: PUSH
48845: LD_INT 1
48847: ARRAY
48848: GREATEREQUAL
48849: PUSH
48850: LD_VAR 0 10
48854: PPUSH
48855: LD_INT 2
48857: PPUSH
48858: CALL_OW 275
48862: PUSH
48863: LD_VAR 0 11
48867: PUSH
48868: LD_INT 2
48870: ARRAY
48871: GREATEREQUAL
48872: AND
48873: PUSH
48874: LD_VAR 0 10
48878: PPUSH
48879: LD_INT 3
48881: PPUSH
48882: CALL_OW 275
48886: PUSH
48887: LD_VAR 0 11
48891: PUSH
48892: LD_INT 3
48894: ARRAY
48895: GREATEREQUAL
48896: AND
48897: NOT
48898: IFFALSE 48902
// exit ;
48900: GO 49504
// if GetBType ( depot ) = b_depot then
48902: LD_VAR 0 1
48906: PPUSH
48907: CALL_OW 266
48911: PUSH
48912: LD_INT 0
48914: EQUAL
48915: IFFALSE 48927
// dist := 28 else
48917: LD_ADDR_VAR 0 14
48921: PUSH
48922: LD_INT 28
48924: ST_TO_ADDR
48925: GO 48935
// dist := 36 ;
48927: LD_ADDR_VAR 0 14
48931: PUSH
48932: LD_INT 36
48934: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48935: LD_VAR 0 1
48939: PPUSH
48940: LD_VAR 0 3
48944: PPUSH
48945: LD_VAR 0 4
48949: PPUSH
48950: CALL_OW 297
48954: PUSH
48955: LD_VAR 0 14
48959: GREATER
48960: IFFALSE 48964
// exit ;
48962: GO 49504
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48964: LD_ADDR_VAR 0 12
48968: PUSH
48969: LD_VAR 0 2
48973: PPUSH
48974: LD_VAR 0 3
48978: PPUSH
48979: LD_VAR 0 4
48983: PPUSH
48984: LD_VAR 0 5
48988: PPUSH
48989: LD_VAR 0 1
48993: PPUSH
48994: CALL_OW 248
48998: PPUSH
48999: LD_INT 0
49001: PPUSH
49002: CALL 49509 0 6
49006: ST_TO_ADDR
// if not hexes then
49007: LD_VAR 0 12
49011: NOT
49012: IFFALSE 49016
// exit ;
49014: GO 49504
// hex := GetHexInfo ( x , y ) ;
49016: LD_ADDR_VAR 0 15
49020: PUSH
49021: LD_VAR 0 3
49025: PPUSH
49026: LD_VAR 0 4
49030: PPUSH
49031: CALL_OW 546
49035: ST_TO_ADDR
// if hex [ 1 ] then
49036: LD_VAR 0 15
49040: PUSH
49041: LD_INT 1
49043: ARRAY
49044: IFFALSE 49048
// exit ;
49046: GO 49504
// height := hex [ 2 ] ;
49048: LD_ADDR_VAR 0 13
49052: PUSH
49053: LD_VAR 0 15
49057: PUSH
49058: LD_INT 2
49060: ARRAY
49061: ST_TO_ADDR
// for i = 1 to hexes do
49062: LD_ADDR_VAR 0 7
49066: PUSH
49067: DOUBLE
49068: LD_INT 1
49070: DEC
49071: ST_TO_ADDR
49072: LD_VAR 0 12
49076: PUSH
49077: FOR_TO
49078: IFFALSE 49408
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49080: LD_VAR 0 12
49084: PUSH
49085: LD_VAR 0 7
49089: ARRAY
49090: PUSH
49091: LD_INT 1
49093: ARRAY
49094: PPUSH
49095: LD_VAR 0 12
49099: PUSH
49100: LD_VAR 0 7
49104: ARRAY
49105: PUSH
49106: LD_INT 2
49108: ARRAY
49109: PPUSH
49110: CALL_OW 488
49114: NOT
49115: PUSH
49116: LD_VAR 0 12
49120: PUSH
49121: LD_VAR 0 7
49125: ARRAY
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PPUSH
49131: LD_VAR 0 12
49135: PUSH
49136: LD_VAR 0 7
49140: ARRAY
49141: PUSH
49142: LD_INT 2
49144: ARRAY
49145: PPUSH
49146: CALL_OW 428
49150: PUSH
49151: LD_INT 0
49153: GREATER
49154: OR
49155: PUSH
49156: LD_VAR 0 12
49160: PUSH
49161: LD_VAR 0 7
49165: ARRAY
49166: PUSH
49167: LD_INT 1
49169: ARRAY
49170: PPUSH
49171: LD_VAR 0 12
49175: PUSH
49176: LD_VAR 0 7
49180: ARRAY
49181: PUSH
49182: LD_INT 2
49184: ARRAY
49185: PPUSH
49186: CALL_OW 351
49190: OR
49191: IFFALSE 49197
// exit ;
49193: POP
49194: POP
49195: GO 49504
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49197: LD_ADDR_VAR 0 8
49201: PUSH
49202: LD_VAR 0 12
49206: PUSH
49207: LD_VAR 0 7
49211: ARRAY
49212: PUSH
49213: LD_INT 1
49215: ARRAY
49216: PPUSH
49217: LD_VAR 0 12
49221: PUSH
49222: LD_VAR 0 7
49226: ARRAY
49227: PUSH
49228: LD_INT 2
49230: ARRAY
49231: PPUSH
49232: CALL_OW 546
49236: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49237: LD_VAR 0 8
49241: PUSH
49242: LD_INT 1
49244: ARRAY
49245: PUSH
49246: LD_VAR 0 8
49250: PUSH
49251: LD_INT 2
49253: ARRAY
49254: PUSH
49255: LD_VAR 0 13
49259: PUSH
49260: LD_INT 2
49262: PLUS
49263: GREATER
49264: OR
49265: PUSH
49266: LD_VAR 0 8
49270: PUSH
49271: LD_INT 2
49273: ARRAY
49274: PUSH
49275: LD_VAR 0 13
49279: PUSH
49280: LD_INT 2
49282: MINUS
49283: LESS
49284: OR
49285: PUSH
49286: LD_VAR 0 8
49290: PUSH
49291: LD_INT 3
49293: ARRAY
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 8
49300: PUSH
49301: LD_INT 9
49303: PUSH
49304: LD_INT 10
49306: PUSH
49307: LD_INT 11
49309: PUSH
49310: LD_INT 12
49312: PUSH
49313: LD_INT 13
49315: PUSH
49316: LD_INT 16
49318: PUSH
49319: LD_INT 17
49321: PUSH
49322: LD_INT 18
49324: PUSH
49325: LD_INT 19
49327: PUSH
49328: LD_INT 20
49330: PUSH
49331: LD_INT 21
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: IN
49349: NOT
49350: OR
49351: PUSH
49352: LD_VAR 0 8
49356: PUSH
49357: LD_INT 5
49359: ARRAY
49360: NOT
49361: OR
49362: PUSH
49363: LD_VAR 0 8
49367: PUSH
49368: LD_INT 6
49370: ARRAY
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 7
49380: PUSH
49381: LD_INT 9
49383: PUSH
49384: LD_INT 10
49386: PUSH
49387: LD_INT 11
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: IN
49398: NOT
49399: OR
49400: IFFALSE 49406
// exit ;
49402: POP
49403: POP
49404: GO 49504
// end ;
49406: GO 49077
49408: POP
49409: POP
// side := GetSide ( depot ) ;
49410: LD_ADDR_VAR 0 9
49414: PUSH
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 255
49424: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49425: LD_VAR 0 9
49429: PPUSH
49430: LD_VAR 0 3
49434: PPUSH
49435: LD_VAR 0 4
49439: PPUSH
49440: LD_INT 20
49442: PPUSH
49443: CALL 42158 0 4
49447: PUSH
49448: LD_INT 4
49450: ARRAY
49451: IFFALSE 49455
// exit ;
49453: GO 49504
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49455: LD_VAR 0 2
49459: PUSH
49460: LD_INT 29
49462: PUSH
49463: LD_INT 30
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: IN
49470: PUSH
49471: LD_VAR 0 3
49475: PPUSH
49476: LD_VAR 0 4
49480: PPUSH
49481: LD_VAR 0 9
49485: PPUSH
49486: CALL_OW 440
49490: NOT
49491: AND
49492: IFFALSE 49496
// exit ;
49494: GO 49504
// result := true ;
49496: LD_ADDR_VAR 0 6
49500: PUSH
49501: LD_INT 1
49503: ST_TO_ADDR
// end ;
49504: LD_VAR 0 6
49508: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49509: LD_INT 0
49511: PPUSH
49512: PPUSH
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
49520: PPUSH
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
49539: PPUSH
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
49544: PPUSH
49545: PPUSH
49546: PPUSH
49547: PPUSH
49548: PPUSH
49549: PPUSH
49550: PPUSH
49551: PPUSH
49552: PPUSH
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
49558: PPUSH
49559: PPUSH
49560: PPUSH
49561: PPUSH
49562: PPUSH
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
// result = [ ] ;
49569: LD_ADDR_VAR 0 7
49573: PUSH
49574: EMPTY
49575: ST_TO_ADDR
// temp_list = [ ] ;
49576: LD_ADDR_VAR 0 9
49580: PUSH
49581: EMPTY
49582: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49583: LD_VAR 0 4
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: LD_INT 4
49602: PUSH
49603: LD_INT 5
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: IN
49614: NOT
49615: PUSH
49616: LD_VAR 0 1
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: IN
49631: PUSH
49632: LD_VAR 0 5
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: IN
49651: NOT
49652: AND
49653: OR
49654: IFFALSE 49658
// exit ;
49656: GO 68049
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49658: LD_VAR 0 1
49662: PUSH
49663: LD_INT 6
49665: PUSH
49666: LD_INT 7
49668: PUSH
49669: LD_INT 8
49671: PUSH
49672: LD_INT 13
49674: PUSH
49675: LD_INT 12
49677: PUSH
49678: LD_INT 15
49680: PUSH
49681: LD_INT 11
49683: PUSH
49684: LD_INT 14
49686: PUSH
49687: LD_INT 10
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: IN
49701: IFFALSE 49711
// btype = b_lab ;
49703: LD_ADDR_VAR 0 1
49707: PUSH
49708: LD_INT 6
49710: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49711: LD_VAR 0 6
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: IN
49730: NOT
49731: PUSH
49732: LD_VAR 0 1
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: LD_INT 6
49751: PUSH
49752: LD_INT 36
49754: PUSH
49755: LD_INT 4
49757: PUSH
49758: LD_INT 5
49760: PUSH
49761: LD_INT 31
49763: PUSH
49764: LD_INT 32
49766: PUSH
49767: LD_INT 33
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: IN
49783: NOT
49784: PUSH
49785: LD_VAR 0 6
49789: PUSH
49790: LD_INT 1
49792: EQUAL
49793: AND
49794: OR
49795: PUSH
49796: LD_VAR 0 1
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: IN
49811: NOT
49812: PUSH
49813: LD_VAR 0 6
49817: PUSH
49818: LD_INT 2
49820: EQUAL
49821: AND
49822: OR
49823: IFFALSE 49833
// mode = 0 ;
49825: LD_ADDR_VAR 0 6
49829: PUSH
49830: LD_INT 0
49832: ST_TO_ADDR
// case mode of 0 :
49833: LD_VAR 0 6
49837: PUSH
49838: LD_INT 0
49840: DOUBLE
49841: EQUAL
49842: IFTRUE 49846
49844: GO 61299
49846: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49847: LD_ADDR_VAR 0 11
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 3
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50040: LD_ADDR_VAR 0 12
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: NEG
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50236: LD_ADDR_VAR 0 13
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: LD_INT 3
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 3
50395: NEG
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 3
50407: NEG
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50435: LD_ADDR_VAR 0 14
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50631: LD_ADDR_VAR 0 15
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50824: LD_ADDR_VAR 0 16
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51017: LD_ADDR_VAR 0 17
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51247: LD_ADDR_VAR 0 18
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51477: LD_ADDR_VAR 0 19
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51707: LD_ADDR_VAR 0 20
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51937: LD_ADDR_VAR 0 21
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52167: LD_ADDR_VAR 0 22
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52397: LD_ADDR_VAR 0 23
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 2
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52677: LD_ADDR_VAR 0 24
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52953: LD_ADDR_VAR 0 25
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 3
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 3
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53227: LD_ADDR_VAR 0 26
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53503: LD_ADDR_VAR 0 27
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53783: LD_ADDR_VAR 0 28
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54065: LD_ADDR_VAR 0 29
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 3
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 3
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 3
54309: NEG
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54344: LD_ADDR_VAR 0 30
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 3
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54622: LD_ADDR_VAR 0 31
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 3
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54900: LD_ADDR_VAR 0 32
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55178: LD_ADDR_VAR 0 33
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55457: LD_ADDR_VAR 0 34
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 3
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 3
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55737: LD_ADDR_VAR 0 35
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55849: LD_ADDR_VAR 0 36
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55961: LD_ADDR_VAR 0 37
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56073: LD_ADDR_VAR 0 38
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56185: LD_ADDR_VAR 0 39
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56297: LD_ADDR_VAR 0 40
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56409: LD_ADDR_VAR 0 41
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 3
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56759: LD_ADDR_VAR 0 42
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 3
57056: NEG
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57109: LD_ADDR_VAR 0 43
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 3
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 3
57405: NEG
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57457: LD_ADDR_VAR 0 44
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 3
57754: NEG
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 3
57766: NEG
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57807: LD_ADDR_VAR 0 45
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 3
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: LD_INT 3
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58157: LD_ADDR_VAR 0 46
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 3
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 3
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58505: LD_ADDR_VAR 0 47
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58656: LD_ADDR_VAR 0 48
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58803: LD_ADDR_VAR 0 49
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58947: LD_ADDR_VAR 0 50
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59091: LD_ADDR_VAR 0 51
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59238: LD_ADDR_VAR 0 52
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59389: LD_ADDR_VAR 0 53
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59619: LD_ADDR_VAR 0 54
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59849: LD_ADDR_VAR 0 55
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60079: LD_ADDR_VAR 0 56
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60309: LD_ADDR_VAR 0 57
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60539: LD_ADDR_VAR 0 58
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60769: LD_ADDR_VAR 0 59
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60857: LD_ADDR_VAR 0 60
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60945: LD_ADDR_VAR 0 61
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61033: LD_ADDR_VAR 0 62
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61121: LD_ADDR_VAR 0 63
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61209: LD_ADDR_VAR 0 64
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: ST_TO_ADDR
// end ; 1 :
61297: GO 67194
61299: LD_INT 1
61301: DOUBLE
61302: EQUAL
61303: IFTRUE 61307
61305: GO 63930
61307: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61308: LD_ADDR_VAR 0 11
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61352: LD_ADDR_VAR 0 12
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61393: LD_ADDR_VAR 0 13
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: LD_INT 3
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61433: LD_ADDR_VAR 0 14
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 2
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: LIST
61473: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61474: LD_ADDR_VAR 0 15
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 3
61492: NEG
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 3
61503: NEG
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: LIST
61517: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61518: LD_ADDR_VAR 0 16
61522: PUSH
61523: LD_INT 2
61525: NEG
61526: PUSH
61527: LD_INT 3
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 3
61537: NEG
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61564: LD_ADDR_VAR 0 17
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 3
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 3
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: LIST
61607: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61608: LD_ADDR_VAR 0 18
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61649: LD_ADDR_VAR 0 19
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 3
61666: PUSH
61667: LD_INT 3
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: LD_INT 3
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61689: LD_ADDR_VAR 0 20
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: LIST
61729: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61730: LD_ADDR_VAR 0 21
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 3
61748: NEG
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61774: LD_ADDR_VAR 0 22
61778: PUSH
61779: LD_INT 2
61781: NEG
61782: PUSH
61783: LD_INT 3
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 3
61793: NEG
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61820: LD_ADDR_VAR 0 23
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 3
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: LD_INT 4
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: LD_INT 3
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: LIST
61863: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61864: LD_ADDR_VAR 0 24
61868: PUSH
61869: LD_INT 3
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 4
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61905: LD_ADDR_VAR 0 25
61909: PUSH
61910: LD_INT 3
61912: PUSH
61913: LD_INT 3
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 4
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61945: LD_ADDR_VAR 0 26
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: LD_INT 3
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: LIST
61985: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61986: LD_ADDR_VAR 0 27
61990: PUSH
61991: LD_INT 3
61993: NEG
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 4
62015: NEG
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62030: LD_ADDR_VAR 0 28
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: LD_INT 3
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: LD_INT 4
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 4
62061: NEG
62062: PUSH
62063: LD_INT 3
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62076: LD_ADDR_VAR 0 29
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 4
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 3
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 5
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 5
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: LD_INT 4
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: LD_INT 6
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 6
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 5
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62231: LD_ADDR_VAR 0 30
62235: PUSH
62236: LD_INT 2
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 4
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 4
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 5
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 5
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 5
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 6
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 6
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62374: LD_ADDR_VAR 0 31
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 4
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 4
62421: PUSH
62422: LD_INT 4
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: LD_INT 4
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 5
62441: PUSH
62442: LD_INT 4
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 5
62451: PUSH
62452: LD_INT 5
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 4
62461: PUSH
62462: LD_INT 5
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 6
62471: PUSH
62472: LD_INT 5
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 6
62481: PUSH
62482: LD_INT 6
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 5
62491: PUSH
62492: LD_INT 6
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62513: LD_ADDR_VAR 0 32
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 3
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 4
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: LD_INT 4
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: LD_INT 3
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: LD_INT 5
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: LD_INT 5
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: LD_INT 4
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 6
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 6
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 5
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62656: LD_ADDR_VAR 0 33
62660: PUSH
62661: LD_INT 2
62663: NEG
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 3
62674: NEG
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 3
62685: NEG
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 3
62697: NEG
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 4
62708: NEG
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 4
62719: NEG
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 4
62731: NEG
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 5
62742: NEG
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 5
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 5
62765: NEG
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 6
62776: NEG
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 6
62787: NEG
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62811: LD_ADDR_VAR 0 34
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 3
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 3
62830: NEG
62831: PUSH
62832: LD_INT 2
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 3
62842: NEG
62843: PUSH
62844: LD_INT 3
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 3
62854: NEG
62855: PUSH
62856: LD_INT 4
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 4
62866: NEG
62867: PUSH
62868: LD_INT 3
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 4
62878: NEG
62879: PUSH
62880: LD_INT 4
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 4
62890: NEG
62891: PUSH
62892: LD_INT 5
62894: NEG
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 5
62902: NEG
62903: PUSH
62904: LD_INT 4
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 5
62914: NEG
62915: PUSH
62916: LD_INT 5
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 5
62926: NEG
62927: PUSH
62928: LD_INT 6
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 6
62938: NEG
62939: PUSH
62940: LD_INT 5
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 6
62950: NEG
62951: PUSH
62952: LD_INT 6
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62974: LD_ADDR_VAR 0 41
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 2
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: LD_INT 3
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63018: LD_ADDR_VAR 0 42
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: LIST
63058: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63059: LD_ADDR_VAR 0 43
63063: PUSH
63064: LD_INT 2
63066: PUSH
63067: LD_INT 2
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63099: LD_ADDR_VAR 0 44
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 2
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 2
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63140: LD_ADDR_VAR 0 45
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 2
63158: NEG
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 3
63169: NEG
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63184: LD_ADDR_VAR 0 46
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: LD_INT 2
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 2
63203: NEG
63204: PUSH
63205: LD_INT 3
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 3
63215: NEG
63216: PUSH
63217: LD_INT 2
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: LIST
63229: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63230: LD_ADDR_VAR 0 47
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 3
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63263: LD_ADDR_VAR 0 48
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 2
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63294: LD_ADDR_VAR 0 49
63298: PUSH
63299: LD_INT 3
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 3
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63323: LD_ADDR_VAR 0 50
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 3
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63352: LD_ADDR_VAR 0 51
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63383: LD_ADDR_VAR 0 52
63387: PUSH
63388: LD_INT 3
63390: NEG
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63416: LD_ADDR_VAR 0 53
63420: PUSH
63421: LD_INT 1
63423: NEG
63424: PUSH
63425: LD_INT 3
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: LD_INT 3
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: LD_INT 2
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: LIST
63459: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63460: LD_ADDR_VAR 0 54
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63501: LD_ADDR_VAR 0 55
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: LD_INT 2
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: LIST
63540: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63541: LD_ADDR_VAR 0 56
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: LD_INT 3
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: LIST
63581: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63582: LD_ADDR_VAR 0 57
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: NEG
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 3
63611: NEG
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: LIST
63625: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63626: LD_ADDR_VAR 0 58
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: LD_INT 3
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 3
63645: NEG
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 3
63657: NEG
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63672: LD_ADDR_VAR 0 59
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: LIST
63715: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63716: LD_ADDR_VAR 0 60
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63757: LD_ADDR_VAR 0 61
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: LIST
63796: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63797: LD_ADDR_VAR 0 62
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63838: LD_ADDR_VAR 0 63
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 2
63856: NEG
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63882: LD_ADDR_VAR 0 64
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: LD_INT 2
63893: NEG
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: LIST
63927: ST_TO_ADDR
// end ; 2 :
63928: GO 67194
63930: LD_INT 2
63932: DOUBLE
63933: EQUAL
63934: IFTRUE 63938
63936: GO 67193
63938: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63939: LD_ADDR_VAR 0 29
63943: PUSH
63944: LD_INT 4
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 4
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 5
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 5
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 4
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 3
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 3
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 5
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 3
64039: PUSH
64040: LD_INT 3
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 3
64049: PUSH
64050: LD_INT 2
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 4
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 4
64069: PUSH
64070: LD_INT 4
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 3
64079: PUSH
64080: LD_INT 4
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 2
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 4
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: LD_INT 4
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: LD_INT 4
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: LD_INT 5
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 5
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: LD_INT 4
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 2
64201: PUSH
64202: LD_INT 5
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 3
64222: NEG
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: NEG
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 3
64267: NEG
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 4
64278: NEG
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 4
64289: NEG
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 4
64301: NEG
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 4
64324: NEG
64325: PUSH
64326: LD_INT 4
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 4
64336: NEG
64337: PUSH
64338: LD_INT 5
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 3
64348: NEG
64349: PUSH
64350: LD_INT 4
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 3
64360: NEG
64361: PUSH
64362: LD_INT 3
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 4
64372: NEG
64373: PUSH
64374: LD_INT 3
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 5
64384: NEG
64385: PUSH
64386: LD_INT 4
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 5
64396: NEG
64397: PUSH
64398: LD_INT 5
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: NEG
64409: PUSH
64410: LD_INT 5
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 5
64420: NEG
64421: PUSH
64422: LD_INT 3
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64477: LD_ADDR_VAR 0 30
64481: PUSH
64482: LD_INT 4
64484: PUSH
64485: LD_INT 4
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 4
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 5
64504: PUSH
64505: LD_INT 4
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 5
64514: PUSH
64515: LD_INT 5
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 4
64524: PUSH
64525: LD_INT 5
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: PUSH
64535: LD_INT 4
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 5
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: LD_INT 5
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 3
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 2
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 3
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 4
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 4
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 3
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 2
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: LD_INT 4
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: NEG
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 4
64667: NEG
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 4
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 4
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 5
64723: NEG
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 5
64734: NEG
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 5
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 3
64758: NEG
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 3
64769: NEG
64770: PUSH
64771: LD_INT 3
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 3
64781: NEG
64782: PUSH
64783: LD_INT 4
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: LD_INT 3
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: LD_INT 2
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: LD_INT 2
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 4
64829: NEG
64830: PUSH
64831: LD_INT 3
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 4
64841: NEG
64842: PUSH
64843: LD_INT 4
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: LD_INT 4
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 4
64865: NEG
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 4
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 5
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: LD_INT 4
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: LD_INT 3
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: LD_INT 3
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 1
64932: NEG
64933: PUSH
64934: LD_INT 4
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: LD_INT 5
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: LD_INT 3
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: NEG
64968: PUSH
64969: LD_INT 5
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65024: LD_ADDR_VAR 0 31
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 4
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 4
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: LD_INT 5
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 5
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: LD_INT 4
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: LD_INT 3
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 2
65103: PUSH
65104: LD_INT 5
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 3
65124: NEG
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 3
65135: NEG
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 2
65147: NEG
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 3
65169: NEG
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 4
65180: NEG
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 4
65191: NEG
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 4
65203: NEG
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 4
65226: NEG
65227: PUSH
65228: LD_INT 4
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 4
65238: NEG
65239: PUSH
65240: LD_INT 5
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: LD_INT 4
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 3
65262: NEG
65263: PUSH
65264: LD_INT 3
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 4
65274: NEG
65275: PUSH
65276: LD_INT 3
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 5
65286: NEG
65287: PUSH
65288: LD_INT 4
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 5
65298: NEG
65299: PUSH
65300: LD_INT 5
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: LD_INT 5
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 5
65322: NEG
65323: PUSH
65324: LD_INT 3
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 4
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 3
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: LD_INT 2
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 2
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: LD_INT 3
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: LD_INT 4
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 2
65424: NEG
65425: PUSH
65426: LD_INT 4
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 4
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 4
65446: PUSH
65447: LD_INT 1
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 5
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 5
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 4
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 3
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 3
65508: PUSH
65509: LD_INT 2
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 5
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65574: LD_ADDR_VAR 0 32
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 4
65592: NEG
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 3
65604: NEG
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: NEG
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 4
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 5
65637: NEG
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 5
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 5
65660: NEG
65661: PUSH
65662: LD_INT 2
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 3
65672: NEG
65673: PUSH
65674: LD_INT 2
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: LD_INT 3
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 3
65695: NEG
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 2
65707: NEG
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 2
65719: NEG
65720: PUSH
65721: LD_INT 2
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: LD_INT 2
65735: NEG
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 4
65743: NEG
65744: PUSH
65745: LD_INT 3
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 4
65755: NEG
65756: PUSH
65757: LD_INT 4
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: NEG
65768: PUSH
65769: LD_INT 4
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 4
65779: NEG
65780: PUSH
65781: LD_INT 2
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: LD_INT 4
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: LD_INT 5
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: LD_INT 4
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: LD_INT 3
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: LD_INT 3
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: LD_INT 4
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: LD_INT 5
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 2
65870: PUSH
65871: LD_INT 3
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 2
65881: NEG
65882: PUSH
65883: LD_INT 5
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 3
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 3
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 4
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 4
65924: PUSH
65925: LD_INT 1
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: LD_INT 1
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: LD_INT 2
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 4
65976: PUSH
65977: LD_INT 2
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 4
65986: PUSH
65987: LD_INT 4
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 4
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 5
66006: PUSH
66007: LD_INT 4
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 5
66016: PUSH
66017: LD_INT 5
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 4
66026: PUSH
66027: LD_INT 5
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 3
66036: PUSH
66037: LD_INT 4
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: PUSH
66047: LD_INT 3
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 5
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 3
66066: PUSH
66067: LD_INT 5
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66121: LD_ADDR_VAR 0 33
66125: PUSH
66126: LD_INT 4
66128: NEG
66129: PUSH
66130: LD_INT 4
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 4
66140: NEG
66141: PUSH
66142: LD_INT 5
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: NEG
66153: PUSH
66154: LD_INT 4
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 3
66164: NEG
66165: PUSH
66166: LD_INT 3
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 4
66176: NEG
66177: PUSH
66178: LD_INT 3
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 5
66188: NEG
66189: PUSH
66190: LD_INT 4
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 5
66200: NEG
66201: PUSH
66202: LD_INT 5
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 3
66212: NEG
66213: PUSH
66214: LD_INT 5
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 5
66224: NEG
66225: PUSH
66226: LD_INT 3
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 4
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: LD_INT 3
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: NEG
66292: PUSH
66293: LD_INT 3
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: LD_INT 4
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 2
66315: PUSH
66316: LD_INT 2
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 2
66326: NEG
66327: PUSH
66328: LD_INT 4
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 4
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 4
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 5
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 5
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 4
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: LD_INT 0
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 3
66399: PUSH
66400: LD_INT 1
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 2
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 5
66421: PUSH
66422: LD_INT 2
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: LD_INT 3
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 3
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 4
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 4
66461: PUSH
66462: LD_INT 4
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: LD_INT 4
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 2
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 4
66501: PUSH
66502: LD_INT 2
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: LD_INT 4
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 4
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: PUSH
66542: LD_INT 4
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: LD_INT 5
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 5
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: PUSH
66573: LD_INT 4
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 3
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: LD_INT 5
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 2
66603: NEG
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66659: LD_ADDR_VAR 0 34
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_INT 4
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: LD_INT 5
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 1
66688: PUSH
66689: LD_INT 4
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_INT 3
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 1
66721: NEG
66722: PUSH
66723: LD_INT 4
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: LD_INT 5
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 2
66756: NEG
66757: PUSH
66758: LD_INT 5
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 4
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 4
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: LD_INT 1
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 2
66829: PUSH
66830: LD_INT 1
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 4
66851: PUSH
66852: LD_INT 2
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: LD_INT 4
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 4
66871: PUSH
66872: LD_INT 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 5
66881: PUSH
66882: LD_INT 4
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 5
66891: PUSH
66892: LD_INT 5
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 4
66901: PUSH
66902: LD_INT 5
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 3
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: LD_INT 3
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 5
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 3
66941: PUSH
66942: LD_INT 5
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 1
67012: NEG
67013: PUSH
67014: LD_INT 2
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: LD_INT 4
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 2
67033: NEG
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 4
67044: NEG
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 4
67055: NEG
67056: PUSH
67057: LD_INT 1
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 4
67089: NEG
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 5
67100: NEG
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 5
67111: NEG
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 5
67123: NEG
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 3
67135: NEG
67136: PUSH
67137: LD_INT 2
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// end ; end ;
67191: GO 67194
67193: POP
// case btype of b_depot , b_warehouse :
67194: LD_VAR 0 1
67198: PUSH
67199: LD_INT 0
67201: DOUBLE
67202: EQUAL
67203: IFTRUE 67213
67205: LD_INT 1
67207: DOUBLE
67208: EQUAL
67209: IFTRUE 67213
67211: GO 67414
67213: POP
// case nation of nation_american :
67214: LD_VAR 0 5
67218: PUSH
67219: LD_INT 1
67221: DOUBLE
67222: EQUAL
67223: IFTRUE 67227
67225: GO 67283
67227: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67228: LD_ADDR_VAR 0 9
67232: PUSH
67233: LD_VAR 0 11
67237: PUSH
67238: LD_VAR 0 12
67242: PUSH
67243: LD_VAR 0 13
67247: PUSH
67248: LD_VAR 0 14
67252: PUSH
67253: LD_VAR 0 15
67257: PUSH
67258: LD_VAR 0 16
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: PUSH
67271: LD_VAR 0 4
67275: PUSH
67276: LD_INT 1
67278: PLUS
67279: ARRAY
67280: ST_TO_ADDR
67281: GO 67412
67283: LD_INT 2
67285: DOUBLE
67286: EQUAL
67287: IFTRUE 67291
67289: GO 67347
67291: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67292: LD_ADDR_VAR 0 9
67296: PUSH
67297: LD_VAR 0 17
67301: PUSH
67302: LD_VAR 0 18
67306: PUSH
67307: LD_VAR 0 19
67311: PUSH
67312: LD_VAR 0 20
67316: PUSH
67317: LD_VAR 0 21
67321: PUSH
67322: LD_VAR 0 22
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: PUSH
67335: LD_VAR 0 4
67339: PUSH
67340: LD_INT 1
67342: PLUS
67343: ARRAY
67344: ST_TO_ADDR
67345: GO 67412
67347: LD_INT 3
67349: DOUBLE
67350: EQUAL
67351: IFTRUE 67355
67353: GO 67411
67355: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67356: LD_ADDR_VAR 0 9
67360: PUSH
67361: LD_VAR 0 23
67365: PUSH
67366: LD_VAR 0 24
67370: PUSH
67371: LD_VAR 0 25
67375: PUSH
67376: LD_VAR 0 26
67380: PUSH
67381: LD_VAR 0 27
67385: PUSH
67386: LD_VAR 0 28
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: PUSH
67399: LD_VAR 0 4
67403: PUSH
67404: LD_INT 1
67406: PLUS
67407: ARRAY
67408: ST_TO_ADDR
67409: GO 67412
67411: POP
67412: GO 67967
67414: LD_INT 2
67416: DOUBLE
67417: EQUAL
67418: IFTRUE 67428
67420: LD_INT 3
67422: DOUBLE
67423: EQUAL
67424: IFTRUE 67428
67426: GO 67484
67428: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67429: LD_ADDR_VAR 0 9
67433: PUSH
67434: LD_VAR 0 29
67438: PUSH
67439: LD_VAR 0 30
67443: PUSH
67444: LD_VAR 0 31
67448: PUSH
67449: LD_VAR 0 32
67453: PUSH
67454: LD_VAR 0 33
67458: PUSH
67459: LD_VAR 0 34
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: PUSH
67472: LD_VAR 0 4
67476: PUSH
67477: LD_INT 1
67479: PLUS
67480: ARRAY
67481: ST_TO_ADDR
67482: GO 67967
67484: LD_INT 16
67486: DOUBLE
67487: EQUAL
67488: IFTRUE 67546
67490: LD_INT 17
67492: DOUBLE
67493: EQUAL
67494: IFTRUE 67546
67496: LD_INT 18
67498: DOUBLE
67499: EQUAL
67500: IFTRUE 67546
67502: LD_INT 19
67504: DOUBLE
67505: EQUAL
67506: IFTRUE 67546
67508: LD_INT 22
67510: DOUBLE
67511: EQUAL
67512: IFTRUE 67546
67514: LD_INT 20
67516: DOUBLE
67517: EQUAL
67518: IFTRUE 67546
67520: LD_INT 21
67522: DOUBLE
67523: EQUAL
67524: IFTRUE 67546
67526: LD_INT 23
67528: DOUBLE
67529: EQUAL
67530: IFTRUE 67546
67532: LD_INT 24
67534: DOUBLE
67535: EQUAL
67536: IFTRUE 67546
67538: LD_INT 25
67540: DOUBLE
67541: EQUAL
67542: IFTRUE 67546
67544: GO 67602
67546: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67547: LD_ADDR_VAR 0 9
67551: PUSH
67552: LD_VAR 0 35
67556: PUSH
67557: LD_VAR 0 36
67561: PUSH
67562: LD_VAR 0 37
67566: PUSH
67567: LD_VAR 0 38
67571: PUSH
67572: LD_VAR 0 39
67576: PUSH
67577: LD_VAR 0 40
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: PUSH
67590: LD_VAR 0 4
67594: PUSH
67595: LD_INT 1
67597: PLUS
67598: ARRAY
67599: ST_TO_ADDR
67600: GO 67967
67602: LD_INT 6
67604: DOUBLE
67605: EQUAL
67606: IFTRUE 67658
67608: LD_INT 7
67610: DOUBLE
67611: EQUAL
67612: IFTRUE 67658
67614: LD_INT 8
67616: DOUBLE
67617: EQUAL
67618: IFTRUE 67658
67620: LD_INT 13
67622: DOUBLE
67623: EQUAL
67624: IFTRUE 67658
67626: LD_INT 12
67628: DOUBLE
67629: EQUAL
67630: IFTRUE 67658
67632: LD_INT 15
67634: DOUBLE
67635: EQUAL
67636: IFTRUE 67658
67638: LD_INT 11
67640: DOUBLE
67641: EQUAL
67642: IFTRUE 67658
67644: LD_INT 14
67646: DOUBLE
67647: EQUAL
67648: IFTRUE 67658
67650: LD_INT 10
67652: DOUBLE
67653: EQUAL
67654: IFTRUE 67658
67656: GO 67714
67658: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67659: LD_ADDR_VAR 0 9
67663: PUSH
67664: LD_VAR 0 41
67668: PUSH
67669: LD_VAR 0 42
67673: PUSH
67674: LD_VAR 0 43
67678: PUSH
67679: LD_VAR 0 44
67683: PUSH
67684: LD_VAR 0 45
67688: PUSH
67689: LD_VAR 0 46
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: PUSH
67702: LD_VAR 0 4
67706: PUSH
67707: LD_INT 1
67709: PLUS
67710: ARRAY
67711: ST_TO_ADDR
67712: GO 67967
67714: LD_INT 36
67716: DOUBLE
67717: EQUAL
67718: IFTRUE 67722
67720: GO 67778
67722: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67723: LD_ADDR_VAR 0 9
67727: PUSH
67728: LD_VAR 0 47
67732: PUSH
67733: LD_VAR 0 48
67737: PUSH
67738: LD_VAR 0 49
67742: PUSH
67743: LD_VAR 0 50
67747: PUSH
67748: LD_VAR 0 51
67752: PUSH
67753: LD_VAR 0 52
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: PUSH
67766: LD_VAR 0 4
67770: PUSH
67771: LD_INT 1
67773: PLUS
67774: ARRAY
67775: ST_TO_ADDR
67776: GO 67967
67778: LD_INT 4
67780: DOUBLE
67781: EQUAL
67782: IFTRUE 67804
67784: LD_INT 5
67786: DOUBLE
67787: EQUAL
67788: IFTRUE 67804
67790: LD_INT 34
67792: DOUBLE
67793: EQUAL
67794: IFTRUE 67804
67796: LD_INT 37
67798: DOUBLE
67799: EQUAL
67800: IFTRUE 67804
67802: GO 67860
67804: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67805: LD_ADDR_VAR 0 9
67809: PUSH
67810: LD_VAR 0 53
67814: PUSH
67815: LD_VAR 0 54
67819: PUSH
67820: LD_VAR 0 55
67824: PUSH
67825: LD_VAR 0 56
67829: PUSH
67830: LD_VAR 0 57
67834: PUSH
67835: LD_VAR 0 58
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: PUSH
67848: LD_VAR 0 4
67852: PUSH
67853: LD_INT 1
67855: PLUS
67856: ARRAY
67857: ST_TO_ADDR
67858: GO 67967
67860: LD_INT 31
67862: DOUBLE
67863: EQUAL
67864: IFTRUE 67910
67866: LD_INT 32
67868: DOUBLE
67869: EQUAL
67870: IFTRUE 67910
67872: LD_INT 33
67874: DOUBLE
67875: EQUAL
67876: IFTRUE 67910
67878: LD_INT 27
67880: DOUBLE
67881: EQUAL
67882: IFTRUE 67910
67884: LD_INT 26
67886: DOUBLE
67887: EQUAL
67888: IFTRUE 67910
67890: LD_INT 28
67892: DOUBLE
67893: EQUAL
67894: IFTRUE 67910
67896: LD_INT 29
67898: DOUBLE
67899: EQUAL
67900: IFTRUE 67910
67902: LD_INT 30
67904: DOUBLE
67905: EQUAL
67906: IFTRUE 67910
67908: GO 67966
67910: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67911: LD_ADDR_VAR 0 9
67915: PUSH
67916: LD_VAR 0 59
67920: PUSH
67921: LD_VAR 0 60
67925: PUSH
67926: LD_VAR 0 61
67930: PUSH
67931: LD_VAR 0 62
67935: PUSH
67936: LD_VAR 0 63
67940: PUSH
67941: LD_VAR 0 64
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: PUSH
67954: LD_VAR 0 4
67958: PUSH
67959: LD_INT 1
67961: PLUS
67962: ARRAY
67963: ST_TO_ADDR
67964: GO 67967
67966: POP
// temp_list2 = [ ] ;
67967: LD_ADDR_VAR 0 10
67971: PUSH
67972: EMPTY
67973: ST_TO_ADDR
// for i in temp_list do
67974: LD_ADDR_VAR 0 8
67978: PUSH
67979: LD_VAR 0 9
67983: PUSH
67984: FOR_IN
67985: IFFALSE 68037
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67987: LD_ADDR_VAR 0 10
67991: PUSH
67992: LD_VAR 0 10
67996: PUSH
67997: LD_VAR 0 8
68001: PUSH
68002: LD_INT 1
68004: ARRAY
68005: PUSH
68006: LD_VAR 0 2
68010: PLUS
68011: PUSH
68012: LD_VAR 0 8
68016: PUSH
68017: LD_INT 2
68019: ARRAY
68020: PUSH
68021: LD_VAR 0 3
68025: PLUS
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: EMPTY
68032: LIST
68033: ADD
68034: ST_TO_ADDR
68035: GO 67984
68037: POP
68038: POP
// result = temp_list2 ;
68039: LD_ADDR_VAR 0 7
68043: PUSH
68044: LD_VAR 0 10
68048: ST_TO_ADDR
// end ;
68049: LD_VAR 0 7
68053: RET
// export function EnemyInRange ( unit , dist ) ; begin
68054: LD_INT 0
68056: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68057: LD_ADDR_VAR 0 3
68061: PUSH
68062: LD_VAR 0 1
68066: PPUSH
68067: CALL_OW 255
68071: PPUSH
68072: LD_VAR 0 1
68076: PPUSH
68077: CALL_OW 250
68081: PPUSH
68082: LD_VAR 0 1
68086: PPUSH
68087: CALL_OW 251
68091: PPUSH
68092: LD_VAR 0 2
68096: PPUSH
68097: CALL 42158 0 4
68101: PUSH
68102: LD_INT 4
68104: ARRAY
68105: ST_TO_ADDR
// end ;
68106: LD_VAR 0 3
68110: RET
// export function PlayerSeeMe ( unit ) ; begin
68111: LD_INT 0
68113: PPUSH
// result := See ( your_side , unit ) ;
68114: LD_ADDR_VAR 0 2
68118: PUSH
68119: LD_OWVAR 2
68123: PPUSH
68124: LD_VAR 0 1
68128: PPUSH
68129: CALL_OW 292
68133: ST_TO_ADDR
// end ;
68134: LD_VAR 0 2
68138: RET
// export function ReverseDir ( unit ) ; begin
68139: LD_INT 0
68141: PPUSH
// if not unit then
68142: LD_VAR 0 1
68146: NOT
68147: IFFALSE 68151
// exit ;
68149: GO 68174
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68151: LD_ADDR_VAR 0 2
68155: PUSH
68156: LD_VAR 0 1
68160: PPUSH
68161: CALL_OW 254
68165: PUSH
68166: LD_INT 3
68168: PLUS
68169: PUSH
68170: LD_INT 6
68172: MOD
68173: ST_TO_ADDR
// end ;
68174: LD_VAR 0 2
68178: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68179: LD_INT 0
68181: PPUSH
68182: PPUSH
68183: PPUSH
68184: PPUSH
68185: PPUSH
// if not hexes then
68186: LD_VAR 0 2
68190: NOT
68191: IFFALSE 68195
// exit ;
68193: GO 68343
// dist := 9999 ;
68195: LD_ADDR_VAR 0 5
68199: PUSH
68200: LD_INT 9999
68202: ST_TO_ADDR
// for i = 1 to hexes do
68203: LD_ADDR_VAR 0 4
68207: PUSH
68208: DOUBLE
68209: LD_INT 1
68211: DEC
68212: ST_TO_ADDR
68213: LD_VAR 0 2
68217: PUSH
68218: FOR_TO
68219: IFFALSE 68331
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68221: LD_VAR 0 1
68225: PPUSH
68226: LD_VAR 0 2
68230: PUSH
68231: LD_VAR 0 4
68235: ARRAY
68236: PUSH
68237: LD_INT 1
68239: ARRAY
68240: PPUSH
68241: LD_VAR 0 2
68245: PUSH
68246: LD_VAR 0 4
68250: ARRAY
68251: PUSH
68252: LD_INT 2
68254: ARRAY
68255: PPUSH
68256: CALL_OW 297
68260: PUSH
68261: LD_VAR 0 5
68265: LESS
68266: IFFALSE 68329
// begin hex := hexes [ i ] ;
68268: LD_ADDR_VAR 0 7
68272: PUSH
68273: LD_VAR 0 2
68277: PUSH
68278: LD_VAR 0 4
68282: ARRAY
68283: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68284: LD_ADDR_VAR 0 5
68288: PUSH
68289: LD_VAR 0 1
68293: PPUSH
68294: LD_VAR 0 2
68298: PUSH
68299: LD_VAR 0 4
68303: ARRAY
68304: PUSH
68305: LD_INT 1
68307: ARRAY
68308: PPUSH
68309: LD_VAR 0 2
68313: PUSH
68314: LD_VAR 0 4
68318: ARRAY
68319: PUSH
68320: LD_INT 2
68322: ARRAY
68323: PPUSH
68324: CALL_OW 297
68328: ST_TO_ADDR
// end ; end ;
68329: GO 68218
68331: POP
68332: POP
// result := hex ;
68333: LD_ADDR_VAR 0 3
68337: PUSH
68338: LD_VAR 0 7
68342: ST_TO_ADDR
// end ;
68343: LD_VAR 0 3
68347: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68348: LD_INT 0
68350: PPUSH
68351: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68352: LD_VAR 0 1
68356: NOT
68357: PUSH
68358: LD_VAR 0 1
68362: PUSH
68363: LD_INT 21
68365: PUSH
68366: LD_INT 2
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 23
68375: PUSH
68376: LD_INT 2
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PPUSH
68387: CALL_OW 69
68391: IN
68392: NOT
68393: OR
68394: IFFALSE 68398
// exit ;
68396: GO 68445
// for i = 1 to 3 do
68398: LD_ADDR_VAR 0 3
68402: PUSH
68403: DOUBLE
68404: LD_INT 1
68406: DEC
68407: ST_TO_ADDR
68408: LD_INT 3
68410: PUSH
68411: FOR_TO
68412: IFFALSE 68443
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68414: LD_VAR 0 1
68418: PPUSH
68419: CALL_OW 250
68423: PPUSH
68424: LD_VAR 0 1
68428: PPUSH
68429: CALL_OW 251
68433: PPUSH
68434: LD_INT 1
68436: PPUSH
68437: CALL_OW 453
68441: GO 68411
68443: POP
68444: POP
// end ;
68445: LD_VAR 0 2
68449: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68450: LD_INT 0
68452: PPUSH
68453: PPUSH
68454: PPUSH
68455: PPUSH
68456: PPUSH
68457: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68458: LD_VAR 0 1
68462: NOT
68463: PUSH
68464: LD_VAR 0 2
68468: NOT
68469: OR
68470: PUSH
68471: LD_VAR 0 1
68475: PPUSH
68476: CALL_OW 314
68480: OR
68481: IFFALSE 68485
// exit ;
68483: GO 68926
// x := GetX ( enemy_unit ) ;
68485: LD_ADDR_VAR 0 7
68489: PUSH
68490: LD_VAR 0 2
68494: PPUSH
68495: CALL_OW 250
68499: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68500: LD_ADDR_VAR 0 8
68504: PUSH
68505: LD_VAR 0 2
68509: PPUSH
68510: CALL_OW 251
68514: ST_TO_ADDR
// if not x or not y then
68515: LD_VAR 0 7
68519: NOT
68520: PUSH
68521: LD_VAR 0 8
68525: NOT
68526: OR
68527: IFFALSE 68531
// exit ;
68529: GO 68926
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68531: LD_ADDR_VAR 0 6
68535: PUSH
68536: LD_VAR 0 7
68540: PPUSH
68541: LD_INT 0
68543: PPUSH
68544: LD_INT 4
68546: PPUSH
68547: CALL_OW 272
68551: PUSH
68552: LD_VAR 0 8
68556: PPUSH
68557: LD_INT 0
68559: PPUSH
68560: LD_INT 4
68562: PPUSH
68563: CALL_OW 273
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_VAR 0 7
68576: PPUSH
68577: LD_INT 1
68579: PPUSH
68580: LD_INT 4
68582: PPUSH
68583: CALL_OW 272
68587: PUSH
68588: LD_VAR 0 8
68592: PPUSH
68593: LD_INT 1
68595: PPUSH
68596: LD_INT 4
68598: PPUSH
68599: CALL_OW 273
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_VAR 0 7
68612: PPUSH
68613: LD_INT 2
68615: PPUSH
68616: LD_INT 4
68618: PPUSH
68619: CALL_OW 272
68623: PUSH
68624: LD_VAR 0 8
68628: PPUSH
68629: LD_INT 2
68631: PPUSH
68632: LD_INT 4
68634: PPUSH
68635: CALL_OW 273
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_VAR 0 7
68648: PPUSH
68649: LD_INT 3
68651: PPUSH
68652: LD_INT 4
68654: PPUSH
68655: CALL_OW 272
68659: PUSH
68660: LD_VAR 0 8
68664: PPUSH
68665: LD_INT 3
68667: PPUSH
68668: LD_INT 4
68670: PPUSH
68671: CALL_OW 273
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_VAR 0 7
68684: PPUSH
68685: LD_INT 4
68687: PPUSH
68688: LD_INT 4
68690: PPUSH
68691: CALL_OW 272
68695: PUSH
68696: LD_VAR 0 8
68700: PPUSH
68701: LD_INT 4
68703: PPUSH
68704: LD_INT 4
68706: PPUSH
68707: CALL_OW 273
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_VAR 0 7
68720: PPUSH
68721: LD_INT 5
68723: PPUSH
68724: LD_INT 4
68726: PPUSH
68727: CALL_OW 272
68731: PUSH
68732: LD_VAR 0 8
68736: PPUSH
68737: LD_INT 5
68739: PPUSH
68740: LD_INT 4
68742: PPUSH
68743: CALL_OW 273
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: ST_TO_ADDR
// for i = tmp downto 1 do
68760: LD_ADDR_VAR 0 4
68764: PUSH
68765: DOUBLE
68766: LD_VAR 0 6
68770: INC
68771: ST_TO_ADDR
68772: LD_INT 1
68774: PUSH
68775: FOR_DOWNTO
68776: IFFALSE 68877
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68778: LD_VAR 0 6
68782: PUSH
68783: LD_VAR 0 4
68787: ARRAY
68788: PUSH
68789: LD_INT 1
68791: ARRAY
68792: PPUSH
68793: LD_VAR 0 6
68797: PUSH
68798: LD_VAR 0 4
68802: ARRAY
68803: PUSH
68804: LD_INT 2
68806: ARRAY
68807: PPUSH
68808: CALL_OW 488
68812: NOT
68813: PUSH
68814: LD_VAR 0 6
68818: PUSH
68819: LD_VAR 0 4
68823: ARRAY
68824: PUSH
68825: LD_INT 1
68827: ARRAY
68828: PPUSH
68829: LD_VAR 0 6
68833: PUSH
68834: LD_VAR 0 4
68838: ARRAY
68839: PUSH
68840: LD_INT 2
68842: ARRAY
68843: PPUSH
68844: CALL_OW 428
68848: PUSH
68849: LD_INT 0
68851: NONEQUAL
68852: OR
68853: IFFALSE 68875
// tmp := Delete ( tmp , i ) ;
68855: LD_ADDR_VAR 0 6
68859: PUSH
68860: LD_VAR 0 6
68864: PPUSH
68865: LD_VAR 0 4
68869: PPUSH
68870: CALL_OW 3
68874: ST_TO_ADDR
68875: GO 68775
68877: POP
68878: POP
// j := GetClosestHex ( unit , tmp ) ;
68879: LD_ADDR_VAR 0 5
68883: PUSH
68884: LD_VAR 0 1
68888: PPUSH
68889: LD_VAR 0 6
68893: PPUSH
68894: CALL 68179 0 2
68898: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68899: LD_VAR 0 1
68903: PPUSH
68904: LD_VAR 0 5
68908: PUSH
68909: LD_INT 1
68911: ARRAY
68912: PPUSH
68913: LD_VAR 0 5
68917: PUSH
68918: LD_INT 2
68920: ARRAY
68921: PPUSH
68922: CALL_OW 111
// end ;
68926: LD_VAR 0 3
68930: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68931: LD_INT 0
68933: PPUSH
68934: PPUSH
68935: PPUSH
// uc_side = 0 ;
68936: LD_ADDR_OWVAR 20
68940: PUSH
68941: LD_INT 0
68943: ST_TO_ADDR
// uc_nation = 0 ;
68944: LD_ADDR_OWVAR 21
68948: PUSH
68949: LD_INT 0
68951: ST_TO_ADDR
// InitHc ;
68952: CALL_OW 19
// InitVc ;
68956: CALL_OW 20
// if mastodonts then
68960: LD_VAR 0 6
68964: IFFALSE 69031
// for i = 1 to mastodonts do
68966: LD_ADDR_VAR 0 11
68970: PUSH
68971: DOUBLE
68972: LD_INT 1
68974: DEC
68975: ST_TO_ADDR
68976: LD_VAR 0 6
68980: PUSH
68981: FOR_TO
68982: IFFALSE 69029
// begin vc_chassis := 31 ;
68984: LD_ADDR_OWVAR 37
68988: PUSH
68989: LD_INT 31
68991: ST_TO_ADDR
// vc_control := control_rider ;
68992: LD_ADDR_OWVAR 38
68996: PUSH
68997: LD_INT 4
68999: ST_TO_ADDR
// animal := CreateVehicle ;
69000: LD_ADDR_VAR 0 12
69004: PUSH
69005: CALL_OW 45
69009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69010: LD_VAR 0 12
69014: PPUSH
69015: LD_VAR 0 8
69019: PPUSH
69020: LD_INT 0
69022: PPUSH
69023: CALL 71219 0 3
// end ;
69027: GO 68981
69029: POP
69030: POP
// if horses then
69031: LD_VAR 0 5
69035: IFFALSE 69102
// for i = 1 to horses do
69037: LD_ADDR_VAR 0 11
69041: PUSH
69042: DOUBLE
69043: LD_INT 1
69045: DEC
69046: ST_TO_ADDR
69047: LD_VAR 0 5
69051: PUSH
69052: FOR_TO
69053: IFFALSE 69100
// begin hc_class := 21 ;
69055: LD_ADDR_OWVAR 28
69059: PUSH
69060: LD_INT 21
69062: ST_TO_ADDR
// hc_gallery :=  ;
69063: LD_ADDR_OWVAR 33
69067: PUSH
69068: LD_STRING 
69070: ST_TO_ADDR
// animal := CreateHuman ;
69071: LD_ADDR_VAR 0 12
69075: PUSH
69076: CALL_OW 44
69080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69081: LD_VAR 0 12
69085: PPUSH
69086: LD_VAR 0 8
69090: PPUSH
69091: LD_INT 0
69093: PPUSH
69094: CALL 71219 0 3
// end ;
69098: GO 69052
69100: POP
69101: POP
// if birds then
69102: LD_VAR 0 1
69106: IFFALSE 69173
// for i = 1 to birds do
69108: LD_ADDR_VAR 0 11
69112: PUSH
69113: DOUBLE
69114: LD_INT 1
69116: DEC
69117: ST_TO_ADDR
69118: LD_VAR 0 1
69122: PUSH
69123: FOR_TO
69124: IFFALSE 69171
// begin hc_class = 18 ;
69126: LD_ADDR_OWVAR 28
69130: PUSH
69131: LD_INT 18
69133: ST_TO_ADDR
// hc_gallery =  ;
69134: LD_ADDR_OWVAR 33
69138: PUSH
69139: LD_STRING 
69141: ST_TO_ADDR
// animal := CreateHuman ;
69142: LD_ADDR_VAR 0 12
69146: PUSH
69147: CALL_OW 44
69151: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69152: LD_VAR 0 12
69156: PPUSH
69157: LD_VAR 0 8
69161: PPUSH
69162: LD_INT 0
69164: PPUSH
69165: CALL 71219 0 3
// end ;
69169: GO 69123
69171: POP
69172: POP
// if tigers then
69173: LD_VAR 0 2
69177: IFFALSE 69261
// for i = 1 to tigers do
69179: LD_ADDR_VAR 0 11
69183: PUSH
69184: DOUBLE
69185: LD_INT 1
69187: DEC
69188: ST_TO_ADDR
69189: LD_VAR 0 2
69193: PUSH
69194: FOR_TO
69195: IFFALSE 69259
// begin hc_class = class_tiger ;
69197: LD_ADDR_OWVAR 28
69201: PUSH
69202: LD_INT 14
69204: ST_TO_ADDR
// hc_gallery =  ;
69205: LD_ADDR_OWVAR 33
69209: PUSH
69210: LD_STRING 
69212: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69213: LD_ADDR_OWVAR 35
69217: PUSH
69218: LD_INT 7
69220: NEG
69221: PPUSH
69222: LD_INT 7
69224: PPUSH
69225: CALL_OW 12
69229: ST_TO_ADDR
// animal := CreateHuman ;
69230: LD_ADDR_VAR 0 12
69234: PUSH
69235: CALL_OW 44
69239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69240: LD_VAR 0 12
69244: PPUSH
69245: LD_VAR 0 8
69249: PPUSH
69250: LD_INT 0
69252: PPUSH
69253: CALL 71219 0 3
// end ;
69257: GO 69194
69259: POP
69260: POP
// if apemans then
69261: LD_VAR 0 3
69265: IFFALSE 69388
// for i = 1 to apemans do
69267: LD_ADDR_VAR 0 11
69271: PUSH
69272: DOUBLE
69273: LD_INT 1
69275: DEC
69276: ST_TO_ADDR
69277: LD_VAR 0 3
69281: PUSH
69282: FOR_TO
69283: IFFALSE 69386
// begin hc_class = class_apeman ;
69285: LD_ADDR_OWVAR 28
69289: PUSH
69290: LD_INT 12
69292: ST_TO_ADDR
// hc_gallery =  ;
69293: LD_ADDR_OWVAR 33
69297: PUSH
69298: LD_STRING 
69300: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69301: LD_ADDR_OWVAR 35
69305: PUSH
69306: LD_INT 5
69308: NEG
69309: PPUSH
69310: LD_INT 5
69312: PPUSH
69313: CALL_OW 12
69317: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69318: LD_ADDR_OWVAR 31
69322: PUSH
69323: LD_INT 1
69325: PPUSH
69326: LD_INT 3
69328: PPUSH
69329: CALL_OW 12
69333: PUSH
69334: LD_INT 1
69336: PPUSH
69337: LD_INT 3
69339: PPUSH
69340: CALL_OW 12
69344: PUSH
69345: LD_INT 0
69347: PUSH
69348: LD_INT 0
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: ST_TO_ADDR
// animal := CreateHuman ;
69357: LD_ADDR_VAR 0 12
69361: PUSH
69362: CALL_OW 44
69366: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69367: LD_VAR 0 12
69371: PPUSH
69372: LD_VAR 0 8
69376: PPUSH
69377: LD_INT 0
69379: PPUSH
69380: CALL 71219 0 3
// end ;
69384: GO 69282
69386: POP
69387: POP
// if enchidnas then
69388: LD_VAR 0 4
69392: IFFALSE 69459
// for i = 1 to enchidnas do
69394: LD_ADDR_VAR 0 11
69398: PUSH
69399: DOUBLE
69400: LD_INT 1
69402: DEC
69403: ST_TO_ADDR
69404: LD_VAR 0 4
69408: PUSH
69409: FOR_TO
69410: IFFALSE 69457
// begin hc_class = 13 ;
69412: LD_ADDR_OWVAR 28
69416: PUSH
69417: LD_INT 13
69419: ST_TO_ADDR
// hc_gallery =  ;
69420: LD_ADDR_OWVAR 33
69424: PUSH
69425: LD_STRING 
69427: ST_TO_ADDR
// animal := CreateHuman ;
69428: LD_ADDR_VAR 0 12
69432: PUSH
69433: CALL_OW 44
69437: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69438: LD_VAR 0 12
69442: PPUSH
69443: LD_VAR 0 8
69447: PPUSH
69448: LD_INT 0
69450: PPUSH
69451: CALL 71219 0 3
// end ;
69455: GO 69409
69457: POP
69458: POP
// if fishes then
69459: LD_VAR 0 7
69463: IFFALSE 69530
// for i = 1 to fishes do
69465: LD_ADDR_VAR 0 11
69469: PUSH
69470: DOUBLE
69471: LD_INT 1
69473: DEC
69474: ST_TO_ADDR
69475: LD_VAR 0 7
69479: PUSH
69480: FOR_TO
69481: IFFALSE 69528
// begin hc_class = 20 ;
69483: LD_ADDR_OWVAR 28
69487: PUSH
69488: LD_INT 20
69490: ST_TO_ADDR
// hc_gallery =  ;
69491: LD_ADDR_OWVAR 33
69495: PUSH
69496: LD_STRING 
69498: ST_TO_ADDR
// animal := CreateHuman ;
69499: LD_ADDR_VAR 0 12
69503: PUSH
69504: CALL_OW 44
69508: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69509: LD_VAR 0 12
69513: PPUSH
69514: LD_VAR 0 9
69518: PPUSH
69519: LD_INT 0
69521: PPUSH
69522: CALL 71219 0 3
// end ;
69526: GO 69480
69528: POP
69529: POP
// end ;
69530: LD_VAR 0 10
69534: RET
// export function WantHeal ( sci , unit ) ; begin
69535: LD_INT 0
69537: PPUSH
// if GetTaskList ( sci ) > 0 then
69538: LD_VAR 0 1
69542: PPUSH
69543: CALL_OW 437
69547: PUSH
69548: LD_INT 0
69550: GREATER
69551: IFFALSE 69621
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69553: LD_VAR 0 1
69557: PPUSH
69558: CALL_OW 437
69562: PUSH
69563: LD_INT 1
69565: ARRAY
69566: PUSH
69567: LD_INT 1
69569: ARRAY
69570: PUSH
69571: LD_STRING l
69573: EQUAL
69574: PUSH
69575: LD_VAR 0 1
69579: PPUSH
69580: CALL_OW 437
69584: PUSH
69585: LD_INT 1
69587: ARRAY
69588: PUSH
69589: LD_INT 4
69591: ARRAY
69592: PUSH
69593: LD_VAR 0 2
69597: EQUAL
69598: AND
69599: IFFALSE 69611
// result := true else
69601: LD_ADDR_VAR 0 3
69605: PUSH
69606: LD_INT 1
69608: ST_TO_ADDR
69609: GO 69619
// result := false ;
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_INT 0
69618: ST_TO_ADDR
// end else
69619: GO 69629
// result := false ;
69621: LD_ADDR_VAR 0 3
69625: PUSH
69626: LD_INT 0
69628: ST_TO_ADDR
// end ;
69629: LD_VAR 0 3
69633: RET
// export function HealTarget ( sci ) ; begin
69634: LD_INT 0
69636: PPUSH
// if not sci then
69637: LD_VAR 0 1
69641: NOT
69642: IFFALSE 69646
// exit ;
69644: GO 69711
// result := 0 ;
69646: LD_ADDR_VAR 0 2
69650: PUSH
69651: LD_INT 0
69653: ST_TO_ADDR
// if GetTaskList ( sci ) then
69654: LD_VAR 0 1
69658: PPUSH
69659: CALL_OW 437
69663: IFFALSE 69711
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69665: LD_VAR 0 1
69669: PPUSH
69670: CALL_OW 437
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PUSH
69679: LD_INT 1
69681: ARRAY
69682: PUSH
69683: LD_STRING l
69685: EQUAL
69686: IFFALSE 69711
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69688: LD_ADDR_VAR 0 2
69692: PUSH
69693: LD_VAR 0 1
69697: PPUSH
69698: CALL_OW 437
69702: PUSH
69703: LD_INT 1
69705: ARRAY
69706: PUSH
69707: LD_INT 4
69709: ARRAY
69710: ST_TO_ADDR
// end ;
69711: LD_VAR 0 2
69715: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69716: LD_INT 0
69718: PPUSH
69719: PPUSH
69720: PPUSH
69721: PPUSH
// if not base_units then
69722: LD_VAR 0 1
69726: NOT
69727: IFFALSE 69731
// exit ;
69729: GO 69818
// result := false ;
69731: LD_ADDR_VAR 0 2
69735: PUSH
69736: LD_INT 0
69738: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69739: LD_ADDR_VAR 0 5
69743: PUSH
69744: LD_VAR 0 1
69748: PPUSH
69749: LD_INT 21
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PPUSH
69759: CALL_OW 72
69763: ST_TO_ADDR
// if not tmp then
69764: LD_VAR 0 5
69768: NOT
69769: IFFALSE 69773
// exit ;
69771: GO 69818
// for i in tmp do
69773: LD_ADDR_VAR 0 3
69777: PUSH
69778: LD_VAR 0 5
69782: PUSH
69783: FOR_IN
69784: IFFALSE 69816
// begin result := EnemyInRange ( i , 22 ) ;
69786: LD_ADDR_VAR 0 2
69790: PUSH
69791: LD_VAR 0 3
69795: PPUSH
69796: LD_INT 22
69798: PPUSH
69799: CALL 68054 0 2
69803: ST_TO_ADDR
// if result then
69804: LD_VAR 0 2
69808: IFFALSE 69814
// exit ;
69810: POP
69811: POP
69812: GO 69818
// end ;
69814: GO 69783
69816: POP
69817: POP
// end ;
69818: LD_VAR 0 2
69822: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69823: LD_INT 0
69825: PPUSH
69826: PPUSH
// if not units then
69827: LD_VAR 0 1
69831: NOT
69832: IFFALSE 69836
// exit ;
69834: GO 69906
// result := [ ] ;
69836: LD_ADDR_VAR 0 3
69840: PUSH
69841: EMPTY
69842: ST_TO_ADDR
// for i in units do
69843: LD_ADDR_VAR 0 4
69847: PUSH
69848: LD_VAR 0 1
69852: PUSH
69853: FOR_IN
69854: IFFALSE 69904
// if GetTag ( i ) = tag then
69856: LD_VAR 0 4
69860: PPUSH
69861: CALL_OW 110
69865: PUSH
69866: LD_VAR 0 2
69870: EQUAL
69871: IFFALSE 69902
// result := Insert ( result , result + 1 , i ) ;
69873: LD_ADDR_VAR 0 3
69877: PUSH
69878: LD_VAR 0 3
69882: PPUSH
69883: LD_VAR 0 3
69887: PUSH
69888: LD_INT 1
69890: PLUS
69891: PPUSH
69892: LD_VAR 0 4
69896: PPUSH
69897: CALL_OW 2
69901: ST_TO_ADDR
69902: GO 69853
69904: POP
69905: POP
// end ;
69906: LD_VAR 0 3
69910: RET
// export function IsDriver ( un ) ; begin
69911: LD_INT 0
69913: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69914: LD_ADDR_VAR 0 2
69918: PUSH
69919: LD_VAR 0 1
69923: PUSH
69924: LD_INT 55
69926: PUSH
69927: EMPTY
69928: LIST
69929: PPUSH
69930: CALL_OW 69
69934: IN
69935: ST_TO_ADDR
// end ;
69936: LD_VAR 0 2
69940: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69941: LD_INT 0
69943: PPUSH
69944: PPUSH
// list := [ ] ;
69945: LD_ADDR_VAR 0 5
69949: PUSH
69950: EMPTY
69951: ST_TO_ADDR
// case d of 0 :
69952: LD_VAR 0 3
69956: PUSH
69957: LD_INT 0
69959: DOUBLE
69960: EQUAL
69961: IFTRUE 69965
69963: GO 70098
69965: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69966: LD_ADDR_VAR 0 5
69970: PUSH
69971: LD_VAR 0 1
69975: PUSH
69976: LD_INT 4
69978: MINUS
69979: PUSH
69980: LD_VAR 0 2
69984: PUSH
69985: LD_INT 4
69987: MINUS
69988: PUSH
69989: LD_INT 2
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: LIST
69996: PUSH
69997: LD_VAR 0 1
70001: PUSH
70002: LD_INT 3
70004: MINUS
70005: PUSH
70006: LD_VAR 0 2
70010: PUSH
70011: LD_INT 1
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: LIST
70018: PUSH
70019: LD_VAR 0 1
70023: PUSH
70024: LD_INT 4
70026: PLUS
70027: PUSH
70028: LD_VAR 0 2
70032: PUSH
70033: LD_INT 4
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: LIST
70040: PUSH
70041: LD_VAR 0 1
70045: PUSH
70046: LD_INT 3
70048: PLUS
70049: PUSH
70050: LD_VAR 0 2
70054: PUSH
70055: LD_INT 3
70057: PLUS
70058: PUSH
70059: LD_INT 5
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: LIST
70066: PUSH
70067: LD_VAR 0 1
70071: PUSH
70072: LD_VAR 0 2
70076: PUSH
70077: LD_INT 4
70079: PLUS
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: LIST
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: ST_TO_ADDR
// end ; 1 :
70096: GO 70796
70098: LD_INT 1
70100: DOUBLE
70101: EQUAL
70102: IFTRUE 70106
70104: GO 70239
70106: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70107: LD_ADDR_VAR 0 5
70111: PUSH
70112: LD_VAR 0 1
70116: PUSH
70117: LD_VAR 0 2
70121: PUSH
70122: LD_INT 4
70124: MINUS
70125: PUSH
70126: LD_INT 3
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: PUSH
70134: LD_VAR 0 1
70138: PUSH
70139: LD_INT 3
70141: MINUS
70142: PUSH
70143: LD_VAR 0 2
70147: PUSH
70148: LD_INT 3
70150: MINUS
70151: PUSH
70152: LD_INT 2
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: LIST
70159: PUSH
70160: LD_VAR 0 1
70164: PUSH
70165: LD_INT 4
70167: MINUS
70168: PUSH
70169: LD_VAR 0 2
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: LIST
70181: PUSH
70182: LD_VAR 0 1
70186: PUSH
70187: LD_VAR 0 2
70191: PUSH
70192: LD_INT 3
70194: PLUS
70195: PUSH
70196: LD_INT 0
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: LIST
70203: PUSH
70204: LD_VAR 0 1
70208: PUSH
70209: LD_INT 4
70211: PLUS
70212: PUSH
70213: LD_VAR 0 2
70217: PUSH
70218: LD_INT 4
70220: PLUS
70221: PUSH
70222: LD_INT 5
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: LIST
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: ST_TO_ADDR
// end ; 2 :
70237: GO 70796
70239: LD_INT 2
70241: DOUBLE
70242: EQUAL
70243: IFTRUE 70247
70245: GO 70376
70247: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70248: LD_ADDR_VAR 0 5
70252: PUSH
70253: LD_VAR 0 1
70257: PUSH
70258: LD_VAR 0 2
70262: PUSH
70263: LD_INT 3
70265: MINUS
70266: PUSH
70267: LD_INT 3
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: PUSH
70275: LD_VAR 0 1
70279: PUSH
70280: LD_INT 4
70282: PLUS
70283: PUSH
70284: LD_VAR 0 2
70288: PUSH
70289: LD_INT 4
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: PUSH
70297: LD_VAR 0 1
70301: PUSH
70302: LD_VAR 0 2
70306: PUSH
70307: LD_INT 4
70309: PLUS
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: PUSH
70319: LD_VAR 0 1
70323: PUSH
70324: LD_INT 3
70326: MINUS
70327: PUSH
70328: LD_VAR 0 2
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: LIST
70340: PUSH
70341: LD_VAR 0 1
70345: PUSH
70346: LD_INT 4
70348: MINUS
70349: PUSH
70350: LD_VAR 0 2
70354: PUSH
70355: LD_INT 4
70357: MINUS
70358: PUSH
70359: LD_INT 2
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: LIST
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: ST_TO_ADDR
// end ; 3 :
70374: GO 70796
70376: LD_INT 3
70378: DOUBLE
70379: EQUAL
70380: IFTRUE 70384
70382: GO 70517
70384: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70385: LD_ADDR_VAR 0 5
70389: PUSH
70390: LD_VAR 0 1
70394: PUSH
70395: LD_INT 3
70397: PLUS
70398: PUSH
70399: LD_VAR 0 2
70403: PUSH
70404: LD_INT 4
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: LIST
70411: PUSH
70412: LD_VAR 0 1
70416: PUSH
70417: LD_INT 4
70419: PLUS
70420: PUSH
70421: LD_VAR 0 2
70425: PUSH
70426: LD_INT 4
70428: PLUS
70429: PUSH
70430: LD_INT 5
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: LIST
70437: PUSH
70438: LD_VAR 0 1
70442: PUSH
70443: LD_INT 4
70445: MINUS
70446: PUSH
70447: LD_VAR 0 2
70451: PUSH
70452: LD_INT 1
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: PUSH
70460: LD_VAR 0 1
70464: PUSH
70465: LD_VAR 0 2
70469: PUSH
70470: LD_INT 4
70472: MINUS
70473: PUSH
70474: LD_INT 3
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: LIST
70481: PUSH
70482: LD_VAR 0 1
70486: PUSH
70487: LD_INT 3
70489: MINUS
70490: PUSH
70491: LD_VAR 0 2
70495: PUSH
70496: LD_INT 3
70498: MINUS
70499: PUSH
70500: LD_INT 2
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: ST_TO_ADDR
// end ; 4 :
70515: GO 70796
70517: LD_INT 4
70519: DOUBLE
70520: EQUAL
70521: IFTRUE 70525
70523: GO 70658
70525: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70526: LD_ADDR_VAR 0 5
70530: PUSH
70531: LD_VAR 0 1
70535: PUSH
70536: LD_VAR 0 2
70540: PUSH
70541: LD_INT 4
70543: PLUS
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: LIST
70552: PUSH
70553: LD_VAR 0 1
70557: PUSH
70558: LD_INT 3
70560: PLUS
70561: PUSH
70562: LD_VAR 0 2
70566: PUSH
70567: LD_INT 3
70569: PLUS
70570: PUSH
70571: LD_INT 5
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: LIST
70578: PUSH
70579: LD_VAR 0 1
70583: PUSH
70584: LD_INT 4
70586: PLUS
70587: PUSH
70588: LD_VAR 0 2
70592: PUSH
70593: LD_INT 4
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: LIST
70600: PUSH
70601: LD_VAR 0 1
70605: PUSH
70606: LD_VAR 0 2
70610: PUSH
70611: LD_INT 3
70613: MINUS
70614: PUSH
70615: LD_INT 3
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: LIST
70622: PUSH
70623: LD_VAR 0 1
70627: PUSH
70628: LD_INT 4
70630: MINUS
70631: PUSH
70632: LD_VAR 0 2
70636: PUSH
70637: LD_INT 4
70639: MINUS
70640: PUSH
70641: LD_INT 2
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: LIST
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: ST_TO_ADDR
// end ; 5 :
70656: GO 70796
70658: LD_INT 5
70660: DOUBLE
70661: EQUAL
70662: IFTRUE 70666
70664: GO 70795
70666: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70667: LD_ADDR_VAR 0 5
70671: PUSH
70672: LD_VAR 0 1
70676: PUSH
70677: LD_INT 4
70679: MINUS
70680: PUSH
70681: LD_VAR 0 2
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: LIST
70693: PUSH
70694: LD_VAR 0 1
70698: PUSH
70699: LD_VAR 0 2
70703: PUSH
70704: LD_INT 4
70706: MINUS
70707: PUSH
70708: LD_INT 3
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: LIST
70715: PUSH
70716: LD_VAR 0 1
70720: PUSH
70721: LD_INT 4
70723: PLUS
70724: PUSH
70725: LD_VAR 0 2
70729: PUSH
70730: LD_INT 4
70732: PLUS
70733: PUSH
70734: LD_INT 5
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: LIST
70741: PUSH
70742: LD_VAR 0 1
70746: PUSH
70747: LD_INT 3
70749: PLUS
70750: PUSH
70751: LD_VAR 0 2
70755: PUSH
70756: LD_INT 4
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: LIST
70763: PUSH
70764: LD_VAR 0 1
70768: PUSH
70769: LD_VAR 0 2
70773: PUSH
70774: LD_INT 3
70776: PLUS
70777: PUSH
70778: LD_INT 0
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: LIST
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: ST_TO_ADDR
// end ; end ;
70793: GO 70796
70795: POP
// result := list ;
70796: LD_ADDR_VAR 0 4
70800: PUSH
70801: LD_VAR 0 5
70805: ST_TO_ADDR
// end ;
70806: LD_VAR 0 4
70810: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70811: LD_INT 0
70813: PPUSH
70814: PPUSH
70815: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70816: LD_VAR 0 1
70820: NOT
70821: PUSH
70822: LD_VAR 0 2
70826: PUSH
70827: LD_INT 1
70829: PUSH
70830: LD_INT 2
70832: PUSH
70833: LD_INT 3
70835: PUSH
70836: LD_INT 4
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: IN
70845: NOT
70846: OR
70847: IFFALSE 70851
// exit ;
70849: GO 70943
// tmp := [ ] ;
70851: LD_ADDR_VAR 0 5
70855: PUSH
70856: EMPTY
70857: ST_TO_ADDR
// for i in units do
70858: LD_ADDR_VAR 0 4
70862: PUSH
70863: LD_VAR 0 1
70867: PUSH
70868: FOR_IN
70869: IFFALSE 70912
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70871: LD_ADDR_VAR 0 5
70875: PUSH
70876: LD_VAR 0 5
70880: PPUSH
70881: LD_VAR 0 5
70885: PUSH
70886: LD_INT 1
70888: PLUS
70889: PPUSH
70890: LD_VAR 0 4
70894: PPUSH
70895: LD_VAR 0 2
70899: PPUSH
70900: CALL_OW 259
70904: PPUSH
70905: CALL_OW 2
70909: ST_TO_ADDR
70910: GO 70868
70912: POP
70913: POP
// if not tmp then
70914: LD_VAR 0 5
70918: NOT
70919: IFFALSE 70923
// exit ;
70921: GO 70943
// result := SortListByListDesc ( units , tmp ) ;
70923: LD_ADDR_VAR 0 3
70927: PUSH
70928: LD_VAR 0 1
70932: PPUSH
70933: LD_VAR 0 5
70937: PPUSH
70938: CALL_OW 77
70942: ST_TO_ADDR
// end ;
70943: LD_VAR 0 3
70947: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70948: LD_INT 0
70950: PPUSH
70951: PPUSH
70952: PPUSH
// result := false ;
70953: LD_ADDR_VAR 0 3
70957: PUSH
70958: LD_INT 0
70960: ST_TO_ADDR
// x := GetX ( building ) ;
70961: LD_ADDR_VAR 0 4
70965: PUSH
70966: LD_VAR 0 2
70970: PPUSH
70971: CALL_OW 250
70975: ST_TO_ADDR
// y := GetY ( building ) ;
70976: LD_ADDR_VAR 0 5
70980: PUSH
70981: LD_VAR 0 2
70985: PPUSH
70986: CALL_OW 251
70990: ST_TO_ADDR
// if not building or not x or not y then
70991: LD_VAR 0 2
70995: NOT
70996: PUSH
70997: LD_VAR 0 4
71001: NOT
71002: OR
71003: PUSH
71004: LD_VAR 0 5
71008: NOT
71009: OR
71010: IFFALSE 71014
// exit ;
71012: GO 71106
// if GetTaskList ( unit ) then
71014: LD_VAR 0 1
71018: PPUSH
71019: CALL_OW 437
71023: IFFALSE 71106
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71025: LD_STRING e
71027: PUSH
71028: LD_VAR 0 1
71032: PPUSH
71033: CALL_OW 437
71037: PUSH
71038: LD_INT 1
71040: ARRAY
71041: PUSH
71042: LD_INT 1
71044: ARRAY
71045: EQUAL
71046: PUSH
71047: LD_VAR 0 4
71051: PUSH
71052: LD_VAR 0 1
71056: PPUSH
71057: CALL_OW 437
71061: PUSH
71062: LD_INT 1
71064: ARRAY
71065: PUSH
71066: LD_INT 2
71068: ARRAY
71069: EQUAL
71070: AND
71071: PUSH
71072: LD_VAR 0 5
71076: PUSH
71077: LD_VAR 0 1
71081: PPUSH
71082: CALL_OW 437
71086: PUSH
71087: LD_INT 1
71089: ARRAY
71090: PUSH
71091: LD_INT 3
71093: ARRAY
71094: EQUAL
71095: AND
71096: IFFALSE 71106
// result := true end ;
71098: LD_ADDR_VAR 0 3
71102: PUSH
71103: LD_INT 1
71105: ST_TO_ADDR
// end ;
71106: LD_VAR 0 3
71110: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71111: LD_INT 0
71113: PPUSH
// result := false ;
71114: LD_ADDR_VAR 0 4
71118: PUSH
71119: LD_INT 0
71121: ST_TO_ADDR
// if GetTaskList ( unit ) then
71122: LD_VAR 0 1
71126: PPUSH
71127: CALL_OW 437
71131: IFFALSE 71214
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71133: LD_STRING M
71135: PUSH
71136: LD_VAR 0 1
71140: PPUSH
71141: CALL_OW 437
71145: PUSH
71146: LD_INT 1
71148: ARRAY
71149: PUSH
71150: LD_INT 1
71152: ARRAY
71153: EQUAL
71154: PUSH
71155: LD_VAR 0 2
71159: PUSH
71160: LD_VAR 0 1
71164: PPUSH
71165: CALL_OW 437
71169: PUSH
71170: LD_INT 1
71172: ARRAY
71173: PUSH
71174: LD_INT 2
71176: ARRAY
71177: EQUAL
71178: AND
71179: PUSH
71180: LD_VAR 0 3
71184: PUSH
71185: LD_VAR 0 1
71189: PPUSH
71190: CALL_OW 437
71194: PUSH
71195: LD_INT 1
71197: ARRAY
71198: PUSH
71199: LD_INT 3
71201: ARRAY
71202: EQUAL
71203: AND
71204: IFFALSE 71214
// result := true ;
71206: LD_ADDR_VAR 0 4
71210: PUSH
71211: LD_INT 1
71213: ST_TO_ADDR
// end ; end ;
71214: LD_VAR 0 4
71218: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71219: LD_INT 0
71221: PPUSH
71222: PPUSH
71223: PPUSH
71224: PPUSH
// if not unit or not area then
71225: LD_VAR 0 1
71229: NOT
71230: PUSH
71231: LD_VAR 0 2
71235: NOT
71236: OR
71237: IFFALSE 71241
// exit ;
71239: GO 71405
// tmp := AreaToList ( area , i ) ;
71241: LD_ADDR_VAR 0 6
71245: PUSH
71246: LD_VAR 0 2
71250: PPUSH
71251: LD_VAR 0 5
71255: PPUSH
71256: CALL_OW 517
71260: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71261: LD_ADDR_VAR 0 5
71265: PUSH
71266: DOUBLE
71267: LD_INT 1
71269: DEC
71270: ST_TO_ADDR
71271: LD_VAR 0 6
71275: PUSH
71276: LD_INT 1
71278: ARRAY
71279: PUSH
71280: FOR_TO
71281: IFFALSE 71403
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71283: LD_ADDR_VAR 0 7
71287: PUSH
71288: LD_VAR 0 6
71292: PUSH
71293: LD_INT 1
71295: ARRAY
71296: PUSH
71297: LD_VAR 0 5
71301: ARRAY
71302: PUSH
71303: LD_VAR 0 6
71307: PUSH
71308: LD_INT 2
71310: ARRAY
71311: PUSH
71312: LD_VAR 0 5
71316: ARRAY
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71322: LD_VAR 0 7
71326: PUSH
71327: LD_INT 1
71329: ARRAY
71330: PPUSH
71331: LD_VAR 0 7
71335: PUSH
71336: LD_INT 2
71338: ARRAY
71339: PPUSH
71340: CALL_OW 428
71344: PUSH
71345: LD_INT 0
71347: EQUAL
71348: IFFALSE 71401
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71350: LD_VAR 0 1
71354: PPUSH
71355: LD_VAR 0 7
71359: PUSH
71360: LD_INT 1
71362: ARRAY
71363: PPUSH
71364: LD_VAR 0 7
71368: PUSH
71369: LD_INT 2
71371: ARRAY
71372: PPUSH
71373: LD_VAR 0 3
71377: PPUSH
71378: CALL_OW 48
// result := IsPlaced ( unit ) ;
71382: LD_ADDR_VAR 0 4
71386: PUSH
71387: LD_VAR 0 1
71391: PPUSH
71392: CALL_OW 305
71396: ST_TO_ADDR
// exit ;
71397: POP
71398: POP
71399: GO 71405
// end ; end ;
71401: GO 71280
71403: POP
71404: POP
// end ;
71405: LD_VAR 0 4
71409: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71410: LD_INT 0
71412: PPUSH
71413: PPUSH
71414: PPUSH
// if not side or side > 8 then
71415: LD_VAR 0 1
71419: NOT
71420: PUSH
71421: LD_VAR 0 1
71425: PUSH
71426: LD_INT 8
71428: GREATER
71429: OR
71430: IFFALSE 71434
// exit ;
71432: GO 71621
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71434: LD_ADDR_VAR 0 4
71438: PUSH
71439: LD_INT 22
71441: PUSH
71442: LD_VAR 0 1
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 21
71453: PUSH
71454: LD_INT 3
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PPUSH
71465: CALL_OW 69
71469: ST_TO_ADDR
// if not tmp then
71470: LD_VAR 0 4
71474: NOT
71475: IFFALSE 71479
// exit ;
71477: GO 71621
// enable_addtolog := true ;
71479: LD_ADDR_OWVAR 81
71483: PUSH
71484: LD_INT 1
71486: ST_TO_ADDR
// AddToLog ( [ ) ;
71487: LD_STRING [
71489: PPUSH
71490: CALL_OW 561
// for i in tmp do
71494: LD_ADDR_VAR 0 3
71498: PUSH
71499: LD_VAR 0 4
71503: PUSH
71504: FOR_IN
71505: IFFALSE 71612
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71507: LD_STRING [
71509: PUSH
71510: LD_VAR 0 3
71514: PPUSH
71515: CALL_OW 266
71519: STR
71520: PUSH
71521: LD_STRING , 
71523: STR
71524: PUSH
71525: LD_VAR 0 3
71529: PPUSH
71530: CALL_OW 250
71534: STR
71535: PUSH
71536: LD_STRING , 
71538: STR
71539: PUSH
71540: LD_VAR 0 3
71544: PPUSH
71545: CALL_OW 251
71549: STR
71550: PUSH
71551: LD_STRING , 
71553: STR
71554: PUSH
71555: LD_VAR 0 3
71559: PPUSH
71560: CALL_OW 254
71564: STR
71565: PUSH
71566: LD_STRING , 
71568: STR
71569: PUSH
71570: LD_VAR 0 3
71574: PPUSH
71575: LD_INT 1
71577: PPUSH
71578: CALL_OW 268
71582: STR
71583: PUSH
71584: LD_STRING , 
71586: STR
71587: PUSH
71588: LD_VAR 0 3
71592: PPUSH
71593: LD_INT 2
71595: PPUSH
71596: CALL_OW 268
71600: STR
71601: PUSH
71602: LD_STRING ],
71604: STR
71605: PPUSH
71606: CALL_OW 561
// end ;
71610: GO 71504
71612: POP
71613: POP
// AddToLog ( ]; ) ;
71614: LD_STRING ];
71616: PPUSH
71617: CALL_OW 561
// end ;
71621: LD_VAR 0 2
71625: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71626: LD_INT 0
71628: PPUSH
71629: PPUSH
71630: PPUSH
71631: PPUSH
71632: PPUSH
// if not area or not rate or not max then
71633: LD_VAR 0 1
71637: NOT
71638: PUSH
71639: LD_VAR 0 2
71643: NOT
71644: OR
71645: PUSH
71646: LD_VAR 0 4
71650: NOT
71651: OR
71652: IFFALSE 71656
// exit ;
71654: GO 71848
// while 1 do
71656: LD_INT 1
71658: IFFALSE 71848
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71660: LD_ADDR_VAR 0 9
71664: PUSH
71665: LD_VAR 0 1
71669: PPUSH
71670: LD_INT 1
71672: PPUSH
71673: CALL_OW 287
71677: PUSH
71678: LD_INT 10
71680: MUL
71681: ST_TO_ADDR
// r := rate / 10 ;
71682: LD_ADDR_VAR 0 7
71686: PUSH
71687: LD_VAR 0 2
71691: PUSH
71692: LD_INT 10
71694: DIVREAL
71695: ST_TO_ADDR
// time := 1 1$00 ;
71696: LD_ADDR_VAR 0 8
71700: PUSH
71701: LD_INT 2100
71703: ST_TO_ADDR
// if amount < min then
71704: LD_VAR 0 9
71708: PUSH
71709: LD_VAR 0 3
71713: LESS
71714: IFFALSE 71732
// r := r * 2 else
71716: LD_ADDR_VAR 0 7
71720: PUSH
71721: LD_VAR 0 7
71725: PUSH
71726: LD_INT 2
71728: MUL
71729: ST_TO_ADDR
71730: GO 71758
// if amount > max then
71732: LD_VAR 0 9
71736: PUSH
71737: LD_VAR 0 4
71741: GREATER
71742: IFFALSE 71758
// r := r / 2 ;
71744: LD_ADDR_VAR 0 7
71748: PUSH
71749: LD_VAR 0 7
71753: PUSH
71754: LD_INT 2
71756: DIVREAL
71757: ST_TO_ADDR
// time := time / r ;
71758: LD_ADDR_VAR 0 8
71762: PUSH
71763: LD_VAR 0 8
71767: PUSH
71768: LD_VAR 0 7
71772: DIVREAL
71773: ST_TO_ADDR
// if time < 0 then
71774: LD_VAR 0 8
71778: PUSH
71779: LD_INT 0
71781: LESS
71782: IFFALSE 71799
// time := time * - 1 ;
71784: LD_ADDR_VAR 0 8
71788: PUSH
71789: LD_VAR 0 8
71793: PUSH
71794: LD_INT 1
71796: NEG
71797: MUL
71798: ST_TO_ADDR
// wait ( time ) ;
71799: LD_VAR 0 8
71803: PPUSH
71804: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71808: LD_INT 35
71810: PPUSH
71811: LD_INT 875
71813: PPUSH
71814: CALL_OW 12
71818: PPUSH
71819: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71823: LD_INT 1
71825: PPUSH
71826: LD_INT 5
71828: PPUSH
71829: CALL_OW 12
71833: PPUSH
71834: LD_VAR 0 1
71838: PPUSH
71839: LD_INT 1
71841: PPUSH
71842: CALL_OW 55
// end ;
71846: GO 71656
// end ;
71848: LD_VAR 0 5
71852: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71853: LD_INT 0
71855: PPUSH
71856: PPUSH
71857: PPUSH
71858: PPUSH
71859: PPUSH
71860: PPUSH
71861: PPUSH
71862: PPUSH
// if not turrets or not factories then
71863: LD_VAR 0 1
71867: NOT
71868: PUSH
71869: LD_VAR 0 2
71873: NOT
71874: OR
71875: IFFALSE 71879
// exit ;
71877: GO 72186
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71879: LD_ADDR_VAR 0 10
71883: PUSH
71884: LD_INT 5
71886: PUSH
71887: LD_INT 6
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 2
71896: PUSH
71897: LD_INT 4
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 3
71906: PUSH
71907: LD_INT 5
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 24
71921: PUSH
71922: LD_INT 25
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 23
71931: PUSH
71932: LD_INT 27
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 42
71945: PUSH
71946: LD_INT 43
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 44
71955: PUSH
71956: LD_INT 46
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 45
71965: PUSH
71966: LD_INT 47
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: LIST
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: LIST
71982: ST_TO_ADDR
// result := [ ] ;
71983: LD_ADDR_VAR 0 3
71987: PUSH
71988: EMPTY
71989: ST_TO_ADDR
// for i in turrets do
71990: LD_ADDR_VAR 0 4
71994: PUSH
71995: LD_VAR 0 1
71999: PUSH
72000: FOR_IN
72001: IFFALSE 72184
// begin nat := GetNation ( i ) ;
72003: LD_ADDR_VAR 0 7
72007: PUSH
72008: LD_VAR 0 4
72012: PPUSH
72013: CALL_OW 248
72017: ST_TO_ADDR
// weapon := 0 ;
72018: LD_ADDR_VAR 0 8
72022: PUSH
72023: LD_INT 0
72025: ST_TO_ADDR
// if not nat then
72026: LD_VAR 0 7
72030: NOT
72031: IFFALSE 72035
// continue ;
72033: GO 72000
// for j in list [ nat ] do
72035: LD_ADDR_VAR 0 5
72039: PUSH
72040: LD_VAR 0 10
72044: PUSH
72045: LD_VAR 0 7
72049: ARRAY
72050: PUSH
72051: FOR_IN
72052: IFFALSE 72093
// if GetBWeapon ( i ) = j [ 1 ] then
72054: LD_VAR 0 4
72058: PPUSH
72059: CALL_OW 269
72063: PUSH
72064: LD_VAR 0 5
72068: PUSH
72069: LD_INT 1
72071: ARRAY
72072: EQUAL
72073: IFFALSE 72091
// begin weapon := j [ 2 ] ;
72075: LD_ADDR_VAR 0 8
72079: PUSH
72080: LD_VAR 0 5
72084: PUSH
72085: LD_INT 2
72087: ARRAY
72088: ST_TO_ADDR
// break ;
72089: GO 72093
// end ;
72091: GO 72051
72093: POP
72094: POP
// if not weapon then
72095: LD_VAR 0 8
72099: NOT
72100: IFFALSE 72104
// continue ;
72102: GO 72000
// for k in factories do
72104: LD_ADDR_VAR 0 6
72108: PUSH
72109: LD_VAR 0 2
72113: PUSH
72114: FOR_IN
72115: IFFALSE 72180
// begin weapons := AvailableWeaponList ( k ) ;
72117: LD_ADDR_VAR 0 9
72121: PUSH
72122: LD_VAR 0 6
72126: PPUSH
72127: CALL_OW 478
72131: ST_TO_ADDR
// if not weapons then
72132: LD_VAR 0 9
72136: NOT
72137: IFFALSE 72141
// continue ;
72139: GO 72114
// if weapon in weapons then
72141: LD_VAR 0 8
72145: PUSH
72146: LD_VAR 0 9
72150: IN
72151: IFFALSE 72178
// begin result := [ i , weapon ] ;
72153: LD_ADDR_VAR 0 3
72157: PUSH
72158: LD_VAR 0 4
72162: PUSH
72163: LD_VAR 0 8
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: ST_TO_ADDR
// exit ;
72172: POP
72173: POP
72174: POP
72175: POP
72176: GO 72186
// end ; end ;
72178: GO 72114
72180: POP
72181: POP
// end ;
72182: GO 72000
72184: POP
72185: POP
// end ;
72186: LD_VAR 0 3
72190: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72191: LD_INT 0
72193: PPUSH
// if not side or side > 8 then
72194: LD_VAR 0 3
72198: NOT
72199: PUSH
72200: LD_VAR 0 3
72204: PUSH
72205: LD_INT 8
72207: GREATER
72208: OR
72209: IFFALSE 72213
// exit ;
72211: GO 72272
// if not range then
72213: LD_VAR 0 4
72217: NOT
72218: IFFALSE 72229
// range := - 12 ;
72220: LD_ADDR_VAR 0 4
72224: PUSH
72225: LD_INT 12
72227: NEG
72228: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72229: LD_VAR 0 1
72233: PPUSH
72234: LD_VAR 0 2
72238: PPUSH
72239: LD_VAR 0 3
72243: PPUSH
72244: LD_VAR 0 4
72248: PPUSH
72249: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72253: LD_VAR 0 1
72257: PPUSH
72258: LD_VAR 0 2
72262: PPUSH
72263: LD_VAR 0 3
72267: PPUSH
72268: CALL_OW 331
// end ;
72272: LD_VAR 0 5
72276: RET
// export function Video ( mode ) ; begin
72277: LD_INT 0
72279: PPUSH
// ingame_video = mode ;
72280: LD_ADDR_OWVAR 52
72284: PUSH
72285: LD_VAR 0 1
72289: ST_TO_ADDR
// interface_hidden = mode ;
72290: LD_ADDR_OWVAR 54
72294: PUSH
72295: LD_VAR 0 1
72299: ST_TO_ADDR
// end ;
72300: LD_VAR 0 2
72304: RET
// export function Join ( array , element ) ; begin
72305: LD_INT 0
72307: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72308: LD_ADDR_VAR 0 3
72312: PUSH
72313: LD_VAR 0 1
72317: PPUSH
72318: LD_VAR 0 1
72322: PUSH
72323: LD_INT 1
72325: PLUS
72326: PPUSH
72327: LD_VAR 0 2
72331: PPUSH
72332: CALL_OW 1
72336: ST_TO_ADDR
// end ;
72337: LD_VAR 0 3
72341: RET
// export function JoinUnion ( array , element ) ; begin
72342: LD_INT 0
72344: PPUSH
// result := array union element ;
72345: LD_ADDR_VAR 0 3
72349: PUSH
72350: LD_VAR 0 1
72354: PUSH
72355: LD_VAR 0 2
72359: UNION
72360: ST_TO_ADDR
// end ;
72361: LD_VAR 0 3
72365: RET
// export function GetBehemoths ( side ) ; begin
72366: LD_INT 0
72368: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72369: LD_ADDR_VAR 0 2
72373: PUSH
72374: LD_INT 22
72376: PUSH
72377: LD_VAR 0 1
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 31
72388: PUSH
72389: LD_INT 25
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PPUSH
72400: CALL_OW 69
72404: ST_TO_ADDR
// end ;
72405: LD_VAR 0 2
72409: RET
// export function Shuffle ( array ) ; var i , index ; begin
72410: LD_INT 0
72412: PPUSH
72413: PPUSH
72414: PPUSH
// result := [ ] ;
72415: LD_ADDR_VAR 0 2
72419: PUSH
72420: EMPTY
72421: ST_TO_ADDR
// if not array then
72422: LD_VAR 0 1
72426: NOT
72427: IFFALSE 72431
// exit ;
72429: GO 72530
// Randomize ;
72431: CALL_OW 10
// for i = array downto 1 do
72435: LD_ADDR_VAR 0 3
72439: PUSH
72440: DOUBLE
72441: LD_VAR 0 1
72445: INC
72446: ST_TO_ADDR
72447: LD_INT 1
72449: PUSH
72450: FOR_DOWNTO
72451: IFFALSE 72528
// begin index := rand ( 1 , array ) ;
72453: LD_ADDR_VAR 0 4
72457: PUSH
72458: LD_INT 1
72460: PPUSH
72461: LD_VAR 0 1
72465: PPUSH
72466: CALL_OW 12
72470: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72471: LD_ADDR_VAR 0 2
72475: PUSH
72476: LD_VAR 0 2
72480: PPUSH
72481: LD_VAR 0 2
72485: PUSH
72486: LD_INT 1
72488: PLUS
72489: PPUSH
72490: LD_VAR 0 1
72494: PUSH
72495: LD_VAR 0 4
72499: ARRAY
72500: PPUSH
72501: CALL_OW 2
72505: ST_TO_ADDR
// array := Delete ( array , index ) ;
72506: LD_ADDR_VAR 0 1
72510: PUSH
72511: LD_VAR 0 1
72515: PPUSH
72516: LD_VAR 0 4
72520: PPUSH
72521: CALL_OW 3
72525: ST_TO_ADDR
// end ;
72526: GO 72450
72528: POP
72529: POP
// end ;
72530: LD_VAR 0 2
72534: RET
// export function GetBaseMaterials ( base ) ; begin
72535: LD_INT 0
72537: PPUSH
// result := [ 0 , 0 , 0 ] ;
72538: LD_ADDR_VAR 0 2
72542: PUSH
72543: LD_INT 0
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: LD_INT 0
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: ST_TO_ADDR
// if not base then
72557: LD_VAR 0 1
72561: NOT
72562: IFFALSE 72566
// exit ;
72564: GO 72615
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72566: LD_ADDR_VAR 0 2
72570: PUSH
72571: LD_VAR 0 1
72575: PPUSH
72576: LD_INT 1
72578: PPUSH
72579: CALL_OW 275
72583: PUSH
72584: LD_VAR 0 1
72588: PPUSH
72589: LD_INT 2
72591: PPUSH
72592: CALL_OW 275
72596: PUSH
72597: LD_VAR 0 1
72601: PPUSH
72602: LD_INT 3
72604: PPUSH
72605: CALL_OW 275
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: LIST
72614: ST_TO_ADDR
// end ;
72615: LD_VAR 0 2
72619: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72620: LD_INT 0
72622: PPUSH
72623: PPUSH
// result := array ;
72624: LD_ADDR_VAR 0 3
72628: PUSH
72629: LD_VAR 0 1
72633: ST_TO_ADDR
// if size > 0 then
72634: LD_VAR 0 2
72638: PUSH
72639: LD_INT 0
72641: GREATER
72642: IFFALSE 72688
// for i := array downto size do
72644: LD_ADDR_VAR 0 4
72648: PUSH
72649: DOUBLE
72650: LD_VAR 0 1
72654: INC
72655: ST_TO_ADDR
72656: LD_VAR 0 2
72660: PUSH
72661: FOR_DOWNTO
72662: IFFALSE 72686
// result := Delete ( result , result ) ;
72664: LD_ADDR_VAR 0 3
72668: PUSH
72669: LD_VAR 0 3
72673: PPUSH
72674: LD_VAR 0 3
72678: PPUSH
72679: CALL_OW 3
72683: ST_TO_ADDR
72684: GO 72661
72686: POP
72687: POP
// end ;
72688: LD_VAR 0 3
72692: RET
// export function ComExit ( unit ) ; var tmp ; begin
72693: LD_INT 0
72695: PPUSH
72696: PPUSH
// if not IsInUnit ( unit ) then
72697: LD_VAR 0 1
72701: PPUSH
72702: CALL_OW 310
72706: NOT
72707: IFFALSE 72711
// exit ;
72709: GO 72771
// tmp := IsInUnit ( unit ) ;
72711: LD_ADDR_VAR 0 3
72715: PUSH
72716: LD_VAR 0 1
72720: PPUSH
72721: CALL_OW 310
72725: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72726: LD_VAR 0 3
72730: PPUSH
72731: CALL_OW 247
72735: PUSH
72736: LD_INT 2
72738: EQUAL
72739: IFFALSE 72752
// ComExitVehicle ( unit ) else
72741: LD_VAR 0 1
72745: PPUSH
72746: CALL_OW 121
72750: GO 72761
// ComExitBuilding ( unit ) ;
72752: LD_VAR 0 1
72756: PPUSH
72757: CALL_OW 122
// result := tmp ;
72761: LD_ADDR_VAR 0 2
72765: PUSH
72766: LD_VAR 0 3
72770: ST_TO_ADDR
// end ;
72771: LD_VAR 0 2
72775: RET
// export function ResetHc ; begin
72776: LD_INT 0
72778: PPUSH
// InitHc ;
72779: CALL_OW 19
// hc_importance := 0 ;
72783: LD_ADDR_OWVAR 32
72787: PUSH
72788: LD_INT 0
72790: ST_TO_ADDR
// end ;
72791: LD_VAR 0 1
72795: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72796: LD_INT 0
72798: PPUSH
72799: PPUSH
72800: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72801: LD_ADDR_VAR 0 6
72805: PUSH
72806: LD_VAR 0 1
72810: PUSH
72811: LD_VAR 0 3
72815: PLUS
72816: PUSH
72817: LD_INT 2
72819: DIV
72820: ST_TO_ADDR
// if _x < 0 then
72821: LD_VAR 0 6
72825: PUSH
72826: LD_INT 0
72828: LESS
72829: IFFALSE 72846
// _x := _x * - 1 ;
72831: LD_ADDR_VAR 0 6
72835: PUSH
72836: LD_VAR 0 6
72840: PUSH
72841: LD_INT 1
72843: NEG
72844: MUL
72845: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72846: LD_ADDR_VAR 0 7
72850: PUSH
72851: LD_VAR 0 2
72855: PUSH
72856: LD_VAR 0 4
72860: PLUS
72861: PUSH
72862: LD_INT 2
72864: DIV
72865: ST_TO_ADDR
// if _y < 0 then
72866: LD_VAR 0 7
72870: PUSH
72871: LD_INT 0
72873: LESS
72874: IFFALSE 72891
// _y := _y * - 1 ;
72876: LD_ADDR_VAR 0 7
72880: PUSH
72881: LD_VAR 0 7
72885: PUSH
72886: LD_INT 1
72888: NEG
72889: MUL
72890: ST_TO_ADDR
// result := [ _x , _y ] ;
72891: LD_ADDR_VAR 0 5
72895: PUSH
72896: LD_VAR 0 6
72900: PUSH
72901: LD_VAR 0 7
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: ST_TO_ADDR
// end ;
72910: LD_VAR 0 5
72914: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72915: LD_INT 0
72917: PPUSH
72918: PPUSH
72919: PPUSH
72920: PPUSH
// task := GetTaskList ( unit ) ;
72921: LD_ADDR_VAR 0 7
72925: PUSH
72926: LD_VAR 0 1
72930: PPUSH
72931: CALL_OW 437
72935: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72936: LD_VAR 0 7
72940: NOT
72941: PUSH
72942: LD_VAR 0 1
72946: PPUSH
72947: LD_VAR 0 2
72951: PPUSH
72952: CALL_OW 308
72956: NOT
72957: AND
72958: IFFALSE 72962
// exit ;
72960: GO 73080
// if IsInArea ( unit , area ) then
72962: LD_VAR 0 1
72966: PPUSH
72967: LD_VAR 0 2
72971: PPUSH
72972: CALL_OW 308
72976: IFFALSE 72994
// begin ComMoveToArea ( unit , goAway ) ;
72978: LD_VAR 0 1
72982: PPUSH
72983: LD_VAR 0 3
72987: PPUSH
72988: CALL_OW 113
// exit ;
72992: GO 73080
// end ; if task [ 1 ] [ 1 ] <> M then
72994: LD_VAR 0 7
72998: PUSH
72999: LD_INT 1
73001: ARRAY
73002: PUSH
73003: LD_INT 1
73005: ARRAY
73006: PUSH
73007: LD_STRING M
73009: NONEQUAL
73010: IFFALSE 73014
// exit ;
73012: GO 73080
// x := task [ 1 ] [ 2 ] ;
73014: LD_ADDR_VAR 0 5
73018: PUSH
73019: LD_VAR 0 7
73023: PUSH
73024: LD_INT 1
73026: ARRAY
73027: PUSH
73028: LD_INT 2
73030: ARRAY
73031: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73032: LD_ADDR_VAR 0 6
73036: PUSH
73037: LD_VAR 0 7
73041: PUSH
73042: LD_INT 1
73044: ARRAY
73045: PUSH
73046: LD_INT 3
73048: ARRAY
73049: ST_TO_ADDR
// if InArea ( x , y , area ) then
73050: LD_VAR 0 5
73054: PPUSH
73055: LD_VAR 0 6
73059: PPUSH
73060: LD_VAR 0 2
73064: PPUSH
73065: CALL_OW 309
73069: IFFALSE 73080
// ComStop ( unit ) ;
73071: LD_VAR 0 1
73075: PPUSH
73076: CALL_OW 141
// end ;
73080: LD_VAR 0 4
73084: RET
// export function Abs ( value ) ; begin
73085: LD_INT 0
73087: PPUSH
// result := value ;
73088: LD_ADDR_VAR 0 2
73092: PUSH
73093: LD_VAR 0 1
73097: ST_TO_ADDR
// if value < 0 then
73098: LD_VAR 0 1
73102: PUSH
73103: LD_INT 0
73105: LESS
73106: IFFALSE 73123
// result := value * - 1 ;
73108: LD_ADDR_VAR 0 2
73112: PUSH
73113: LD_VAR 0 1
73117: PUSH
73118: LD_INT 1
73120: NEG
73121: MUL
73122: ST_TO_ADDR
// end ;
73123: LD_VAR 0 2
73127: RET
