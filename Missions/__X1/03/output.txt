// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 621 0 0
// PrepareArabian ;
  12: CALL 1056 0 0
// PrepareAmerican ;
  16: CALL 4117 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9211 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 42000
 166: PUSH
 167: LD_INT 31500
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 5
 213: PUSH
 214: LD_INT 6
 216: PUSH
 217: LD_INT 7
 219: PUSH
 220: LD_INT 8
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 610
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := 0 ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 0
 577: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 578: LD_INT 0
 580: PPUSH
 581: LD_INT 12
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 591: CALL_OW 44
 595: PPUSH
 596: LD_VAR 0 1
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 49
// end ;
 608: GO 536
 610: POP
 611: POP
// InitHc ;
 612: CALL_OW 19
// end ;
 616: LD_VAR 0 3
 620: RET
// export function CreateNature ; var i ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 625: LD_INT 2
 627: PPUSH
 628: LD_INT 5
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: LD_INT 4
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: PUSH
 646: LD_OWVAR 67
 650: ARRAY
 651: PPUSH
 652: CALL 493 0 2
// for i := 1 to 2 do
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: DOUBLE
 662: LD_INT 1
 664: DEC
 665: ST_TO_ADDR
 666: LD_INT 2
 668: PUSH
 669: FOR_TO
 670: IFFALSE 705
// begin hc_class := 21 ;
 672: LD_ADDR_OWVAR 28
 676: PUSH
 677: LD_INT 21
 679: ST_TO_ADDR
// hc_gallery :=  ;
 680: LD_ADDR_OWVAR 33
 684: PUSH
 685: LD_STRING 
 687: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 688: CALL_OW 44
 692: PPUSH
 693: LD_INT 2
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// end ;
 703: GO 669
 705: POP
 706: POP
// for i := 1 to 2 do
 707: LD_ADDR_VAR 0 2
 711: PUSH
 712: DOUBLE
 713: LD_INT 1
 715: DEC
 716: ST_TO_ADDR
 717: LD_INT 2
 719: PUSH
 720: FOR_TO
 721: IFFALSE 756
// begin hc_class := 18 ;
 723: LD_ADDR_OWVAR 28
 727: PUSH
 728: LD_INT 18
 730: ST_TO_ADDR
// hc_gallery :=  ;
 731: LD_ADDR_OWVAR 33
 735: PUSH
 736: LD_STRING 
 738: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 739: CALL_OW 44
 743: PPUSH
 744: LD_INT 2
 746: PPUSH
 747: LD_INT 0
 749: PPUSH
 750: CALL_OW 49
// end ;
 754: GO 720
 756: POP
 757: POP
// for i := 1 to 2 do
 758: LD_ADDR_VAR 0 2
 762: PUSH
 763: DOUBLE
 764: LD_INT 1
 766: DEC
 767: ST_TO_ADDR
 768: LD_INT 2
 770: PUSH
 771: FOR_TO
 772: IFFALSE 807
// begin hc_class := 13 ;
 774: LD_ADDR_OWVAR 28
 778: PUSH
 779: LD_INT 13
 781: ST_TO_ADDR
// hc_gallery :=  ;
 782: LD_ADDR_OWVAR 33
 786: PUSH
 787: LD_STRING 
 789: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 790: CALL_OW 44
 794: PPUSH
 795: LD_INT 2
 797: PPUSH
 798: LD_INT 0
 800: PPUSH
 801: CALL_OW 49
// end ;
 805: GO 771
 807: POP
 808: POP
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 814: LD_INT 0
 816: PPUSH
 817: PPUSH
 818: PPUSH
// if not observer or not unit then
 819: LD_VAR 0 1
 823: NOT
 824: PUSH
 825: LD_VAR 0 2
 829: NOT
 830: OR
 831: IFFALSE 835
// exit ;
 833: GO 883
// if not See ( GetSide ( observer ) , unit ) then
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 255
 844: PPUSH
 845: LD_VAR 0 2
 849: PPUSH
 850: CALL_OW 292
 854: NOT
 855: IFFALSE 859
// exit ;
 857: GO 883
// result := GetDistUnits ( observer , unit ) < 12 ;
 859: LD_ADDR_VAR 0 3
 863: PUSH
 864: LD_VAR 0 1
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 296
 878: PUSH
 879: LD_INT 12
 881: LESS
 882: ST_TO_ADDR
// end ;
 883: LD_VAR 0 3
 887: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 888: LD_INT 0
 890: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 1
 898: ARRAY
 899: PPUSH
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 2
 907: ARRAY
 908: PPUSH
 909: CALL_OW 488
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: PPUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 2
 930: ARRAY
 931: PPUSH
 932: CALL_OW 428
 936: PUSH
 937: LD_INT 0
 939: EQUAL
 940: AND
 941: IFFALSE 975
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 943: LD_VAR 0 1
 947: PPUSH
 948: LD_VAR 0 2
 952: PUSH
 953: LD_INT 1
 955: ARRAY
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 2
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 3
 970: PPUSH
 971: CALL_OW 48
// end ;
 975: LD_VAR 0 4
 979: RET
// export function ReverseArray ( array ) ; var i ; begin
 980: LD_INT 0
 982: PPUSH
 983: PPUSH
// if not array then
 984: LD_VAR 0 1
 988: NOT
 989: IFFALSE 993
// exit ;
 991: GO 1051
// result := [ ] ;
 993: LD_ADDR_VAR 0 2
 997: PUSH
 998: EMPTY
 999: ST_TO_ADDR
// for i := 1 to array do
1000: LD_ADDR_VAR 0 3
1004: PUSH
1005: DOUBLE
1006: LD_INT 1
1008: DEC
1009: ST_TO_ADDR
1010: LD_VAR 0 1
1014: PUSH
1015: FOR_TO
1016: IFFALSE 1049
// result := Insert ( result , 1 , array [ i ] ) ;
1018: LD_ADDR_VAR 0 2
1022: PUSH
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: LD_VAR 0 1
1035: PUSH
1036: LD_VAR 0 3
1040: ARRAY
1041: PPUSH
1042: CALL_OW 2
1046: ST_TO_ADDR
1047: GO 1015
1049: POP
1050: POP
// end ; end_of_file
1051: LD_VAR 0 2
1055: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
1060: PPUSH
1061: PPUSH
// uc_side := 5 ;
1062: LD_ADDR_OWVAR 20
1066: PUSH
1067: LD_INT 5
1069: ST_TO_ADDR
// uc_nation := 2 ;
1070: LD_ADDR_OWVAR 21
1074: PUSH
1075: LD_INT 2
1077: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1078: LD_INT 5
1080: PPUSH
1081: CALL_OW 274
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: LD_INT 65
1091: PPUSH
1092: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1096: LD_ADDR_EXP 36
1100: PUSH
1101: LD_STRING Farmer
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: LD_STRING 
1109: PPUSH
1110: CALL 39822 0 3
1114: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1115: LD_ADDR_EXP 37
1119: PUSH
1120: LD_STRING Omar
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: LD_STRING 
1128: PPUSH
1129: CALL 39822 0 3
1133: ST_TO_ADDR
// omarSquad := [ ] ;
1134: LD_ADDR_EXP 40
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSquad := [ ] ;
1141: LD_ADDR_EXP 41
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1148: LD_ADDR_EXP 42
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// omarCargo := [ ] ;
1155: LD_ADDR_EXP 43
1159: PUSH
1160: EMPTY
1161: ST_TO_ADDR
// for i := 1 to 5 do
1162: LD_ADDR_VAR 0 2
1166: PUSH
1167: DOUBLE
1168: LD_INT 1
1170: DEC
1171: ST_TO_ADDR
1172: LD_INT 5
1174: PUSH
1175: FOR_TO
1176: IFFALSE 1334
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1178: LD_INT 0
1180: PPUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 2
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_VAR 0 2
1207: ARRAY
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: CALL_OW 380
// un := CreateHuman ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: CALL_OW 44
1225: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1226: LD_ADDR_EXP 40
1230: PUSH
1231: LD_EXP 40
1235: PUSH
1236: LD_VAR 0 3
1240: UNION
1241: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1242: LD_VAR 0 3
1246: PPUSH
1247: LD_INT 87
1249: PUSH
1250: LD_INT 30
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 91
1259: PUSH
1260: LD_INT 32
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 82
1269: PUSH
1270: LD_INT 15
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 79
1279: PUSH
1280: LD_INT 14
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 82
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: PUSH
1304: LD_VAR 0 2
1308: ARRAY
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL 888 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1317: LD_VAR 0 3
1321: PPUSH
1322: LD_INT 93
1324: PPUSH
1325: LD_INT 21
1327: PPUSH
1328: CALL_OW 118
// end ;
1332: GO 1175
1334: POP
1335: POP
// uc_side := 2 ;
1336: LD_ADDR_OWVAR 20
1340: PUSH
1341: LD_INT 2
1343: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1344: LD_ADDR_EXP 28
1348: PUSH
1349: LD_STRING Heike
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 39822 0 3
1367: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1368: LD_ADDR_EXP 32
1372: PUSH
1373: LD_STRING Aviradze
1375: PPUSH
1376: LD_EXP 1
1380: NOT
1381: PPUSH
1382: LD_EXP 2
1386: PPUSH
1387: CALL 39822 0 3
1391: ST_TO_ADDR
// tmp := [ ] ;
1392: LD_ADDR_VAR 0 4
1396: PUSH
1397: EMPTY
1398: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 29
1403: PUSH
1404: LD_STRING Givi
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 39822 0 3
1422: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 30
1427: PUSH
1428: LD_STRING Mike
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 39822 0 3
1446: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 31
1451: PUSH
1452: LD_STRING Kamil
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 39822 0 3
1470: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 33
1475: PUSH
1476: LD_STRING Kaia
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 39822 0 3
1494: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1495: LD_ADDR_EXP 34
1499: PUSH
1500: LD_STRING Sophia
1502: PPUSH
1503: LD_EXP 1
1507: NOT
1508: PPUSH
1509: LD_EXP 2
1513: PPUSH
1514: CALL 39822 0 3
1518: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1519: LD_ADDR_EXP 35
1523: PUSH
1524: LD_STRING Markov
1526: PPUSH
1527: LD_EXP 1
1531: NOT
1532: PPUSH
1533: LD_EXP 2
1537: PPUSH
1538: CALL 39822 0 3
1542: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1543: LD_ADDR_EXP 42
1547: PUSH
1548: LD_STRING 02_others
1550: PPUSH
1551: CALL_OW 31
1555: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1556: LD_ADDR_VAR 0 4
1560: PUSH
1561: LD_EXP 30
1565: PUSH
1566: LD_EXP 31
1570: PUSH
1571: LD_EXP 33
1575: PUSH
1576: LD_EXP 34
1580: PUSH
1581: LD_EXP 35
1585: PUSH
1586: LD_EXP 29
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_EXP 42
1603: ADD
1604: PUSH
1605: LD_INT 0
1607: DIFF
1608: ST_TO_ADDR
// heikeSquad := tmp ;
1609: LD_ADDR_EXP 41
1613: PUSH
1614: LD_VAR 0 4
1618: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1619: LD_EXP 41
1623: PPUSH
1624: LD_INT 25
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PPUSH
1634: CALL_OW 72
1638: PUSH
1639: LD_INT 3
1641: LESS
1642: IFFALSE 1692
// begin SetClass ( Kaia , 1 ) ;
1644: LD_EXP 33
1648: PPUSH
1649: LD_INT 1
1651: PPUSH
1652: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1656: LD_EXP 30
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1668: LD_EXP 29
1672: PPUSH
1673: LD_INT 1
1675: PPUSH
1676: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1680: LD_EXP 28
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1692: LD_ADDR_VAR 0 4
1696: PUSH
1697: LD_VAR 0 4
1701: PUSH
1702: LD_STRING 02_ape
1704: PPUSH
1705: CALL_OW 31
1709: UNION
1710: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1711: LD_EXP 28
1715: PPUSH
1716: LD_INT 92
1718: PPUSH
1719: LD_INT 17
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1729: LD_EXP 36
1733: PPUSH
1734: LD_INT 95
1736: PPUSH
1737: LD_INT 19
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1747: LD_EXP 37
1751: PPUSH
1752: LD_INT 89
1754: PPUSH
1755: LD_INT 25
1757: PPUSH
1758: LD_INT 0
1760: PPUSH
1761: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1765: LD_EXP 32
1769: PPUSH
1770: LD_INT 92
1772: PPUSH
1773: LD_INT 27
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1783: LD_EXP 37
1787: PPUSH
1788: LD_EXP 32
1792: PPUSH
1793: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1797: LD_EXP 32
1801: PPUSH
1802: LD_EXP 37
1806: PPUSH
1807: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1811: LD_EXP 28
1815: PUSH
1816: LD_EXP 36
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: LD_EXP 37
1829: PPUSH
1830: CALL_OW 119
// if tmp then
1834: LD_VAR 0 4
1838: IFFALSE 1892
// for i in tmp do
1840: LD_ADDR_VAR 0 2
1844: PUSH
1845: LD_VAR 0 4
1849: PUSH
1850: FOR_IN
1851: IFFALSE 1890
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1853: LD_VAR 0 2
1857: PPUSH
1858: LD_INT 94
1860: PPUSH
1861: LD_INT 14
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: LD_INT 0
1869: PPUSH
1870: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_EXP 28
1883: PPUSH
1884: CALL_OW 119
// end ;
1888: GO 1850
1890: POP
1891: POP
// farmerSquad := [ ] ;
1892: LD_ADDR_EXP 39
1896: PUSH
1897: EMPTY
1898: ST_TO_ADDR
// uc_side := 5 ;
1899: LD_ADDR_OWVAR 20
1903: PUSH
1904: LD_INT 5
1906: ST_TO_ADDR
// uc_nation := 2 ;
1907: LD_ADDR_OWVAR 21
1911: PUSH
1912: LD_INT 2
1914: ST_TO_ADDR
// for i := 1 to 4 do
1915: LD_ADDR_VAR 0 2
1919: PUSH
1920: DOUBLE
1921: LD_INT 1
1923: DEC
1924: ST_TO_ADDR
1925: LD_INT 4
1927: PUSH
1928: FOR_TO
1929: IFFALSE 2007
// begin PrepareHuman ( false , 1 , 2 ) ;
1931: LD_INT 0
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 2
1939: PPUSH
1940: CALL_OW 380
// un := CreateHuman ;
1944: LD_ADDR_VAR 0 3
1948: PUSH
1949: CALL_OW 44
1953: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1954: LD_VAR 0 3
1958: PPUSH
1959: LD_INT 102
1961: PPUSH
1962: LD_INT 27
1964: PPUSH
1965: LD_INT 4
1967: PPUSH
1968: LD_INT 0
1970: PPUSH
1971: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1975: LD_ADDR_EXP 39
1979: PUSH
1980: LD_EXP 39
1984: PUSH
1985: LD_VAR 0 3
1989: UNION
1990: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_EXP 37
2000: PPUSH
2001: CALL_OW 119
// end ;
2005: GO 1928
2007: POP
2008: POP
// for i := 1 to 2 do
2009: LD_ADDR_VAR 0 2
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 2
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2101
// begin PrepareHuman ( false , 2 , 2 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: CALL_OW 380
// un := CreateHuman ;
2038: LD_ADDR_VAR 0 3
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2048: LD_VAR 0 3
2052: PPUSH
2053: LD_INT 108
2055: PPUSH
2056: LD_INT 62
2058: PPUSH
2059: LD_INT 2
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2069: LD_ADDR_EXP 39
2073: PUSH
2074: LD_EXP 39
2078: PUSH
2079: LD_VAR 0 3
2083: UNION
2084: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_EXP 37
2094: PPUSH
2095: CALL_OW 119
// end ;
2099: GO 2022
2101: POP
2102: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2103: LD_INT 109
2105: PPUSH
2106: LD_INT 63
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 15
2114: NEG
2115: PPUSH
2116: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2120: LD_INT 109
2122: PPUSH
2123: LD_INT 63
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: CALL_OW 331
// end ;
2133: LD_VAR 0 1
2137: RET
// export function PrepareIbrahim ( x , y ) ; begin
2138: LD_INT 0
2140: PPUSH
// uc_side := 6 ;
2141: LD_ADDR_OWVAR 20
2145: PUSH
2146: LD_INT 6
2148: ST_TO_ADDR
// uc_nation := 3 ;
2149: LD_ADDR_OWVAR 21
2153: PUSH
2154: LD_INT 3
2156: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2157: LD_ADDR_EXP 38
2161: PUSH
2162: LD_STRING IbrahimRu
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: LD_STRING 
2170: PPUSH
2171: CALL 39822 0 3
2175: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2176: LD_EXP 38
2180: PPUSH
2181: LD_VAR 0 1
2185: PPUSH
2186: LD_VAR 0 2
2190: PPUSH
2191: LD_INT 8
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: CALL_OW 50
// end ;
2201: LD_VAR 0 3
2205: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2206: LD_EXP 37
2210: PUSH
2211: LD_EXP 40
2215: ADD
2216: PPUSH
2217: LD_INT 95
2219: PUSH
2220: LD_INT 3
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 72
2231: IFFALSE 2287
2233: GO 2235
2235: DISABLE
2236: LD_INT 0
2238: PPUSH
// begin enable ;
2239: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2240: LD_ADDR_VAR 0 1
2244: PUSH
2245: LD_EXP 37
2249: PUSH
2250: LD_EXP 40
2254: ADD
2255: PPUSH
2256: LD_INT 95
2258: PUSH
2259: LD_INT 3
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 72
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2285
// RemoveUnit ( i ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 64
2283: GO 2271
2285: POP
2286: POP
// end ;
2287: PPOPN 1
2289: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2290: LD_EXP 3
2294: PUSH
2295: LD_EXP 36
2299: PPUSH
2300: LD_INT 4
2302: PPUSH
2303: CALL_OW 308
2307: AND
2308: IFFALSE 3112
2310: GO 2312
2312: DISABLE
2313: LD_INT 0
2315: PPUSH
2316: PPUSH
2317: PPUSH
2318: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2319: LD_EXP 36
2323: PPUSH
2324: LD_INT 110
2326: PPUSH
2327: LD_INT 60
2329: PPUSH
2330: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2334: LD_EXP 36
2338: PPUSH
2339: LD_INT 110
2341: PPUSH
2342: LD_INT 61
2344: PPUSH
2345: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_EXP 39
2358: PPUSH
2359: LD_INT 25
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PPUSH
2369: CALL_OW 72
2373: ST_TO_ADDR
// if tmp then
2374: LD_VAR 0 2
2378: IFFALSE 2472
// begin for i := 1 to 2 do
2380: LD_ADDR_VAR 0 1
2384: PUSH
2385: DOUBLE
2386: LD_INT 1
2388: DEC
2389: ST_TO_ADDR
2390: LD_INT 2
2392: PUSH
2393: FOR_TO
2394: IFFALSE 2470
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2396: LD_VAR 0 2
2400: PUSH
2401: LD_VAR 0 1
2405: ARRAY
2406: PPUSH
2407: LD_INT 5
2409: PPUSH
2410: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2414: LD_VAR 0 2
2418: PUSH
2419: LD_VAR 0 1
2423: ARRAY
2424: PPUSH
2425: LD_INT 2
2427: PPUSH
2428: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2432: LD_VAR 0 2
2436: PUSH
2437: LD_VAR 0 1
2441: ARRAY
2442: PPUSH
2443: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2447: LD_VAR 0 2
2451: PUSH
2452: LD_VAR 0 1
2456: ARRAY
2457: PPUSH
2458: LD_INT 107
2460: PPUSH
2461: LD_INT 66
2463: PPUSH
2464: CALL_OW 171
// end ;
2468: GO 2393
2470: POP
2471: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_EXP 39
2481: PPUSH
2482: LD_INT 25
2484: PUSH
2485: LD_INT 2
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PPUSH
2492: CALL_OW 72
2496: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2497: LD_INT 35
2499: PPUSH
2500: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_EXP 39
2513: PPUSH
2514: LD_INT 25
2516: PUSH
2517: LD_INT 2
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 72
2528: ST_TO_ADDR
// until tmp ;
2529: LD_VAR 0 2
2533: IFFALSE 2497
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2535: LD_VAR 0 2
2539: PPUSH
2540: LD_INT 31
2542: PPUSH
2543: LD_INT 102
2545: PPUSH
2546: LD_INT 69
2548: PPUSH
2549: LD_INT 2
2551: PPUSH
2552: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2556: LD_INT 35
2558: PPUSH
2559: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2563: LD_EXP 39
2567: PPUSH
2568: LD_INT 3
2570: PUSH
2571: LD_INT 60
2573: PUSH
2574: EMPTY
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 25
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PPUSH
2595: CALL_OW 72
2599: IFFALSE 2556
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2601: LD_ADDR_VAR 0 2
2605: PUSH
2606: LD_EXP 39
2610: PPUSH
2611: LD_INT 25
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 72
2625: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 6
2633: PPUSH
2634: LD_INT 116
2636: PPUSH
2637: LD_INT 55
2639: PPUSH
2640: LD_INT 4
2642: PPUSH
2643: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_INT 4
2654: PPUSH
2655: LD_INT 116
2657: PPUSH
2658: LD_INT 70
2660: PPUSH
2661: LD_INT 5
2663: PPUSH
2664: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2668: LD_VAR 0 2
2672: PPUSH
2673: LD_INT 31
2675: PPUSH
2676: LD_INT 109
2678: PPUSH
2679: LD_INT 50
2681: PPUSH
2682: LD_INT 2
2684: PPUSH
2685: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2689: LD_INT 35
2691: PPUSH
2692: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2696: LD_INT 22
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: LD_INT 3
2718: PUSH
2719: LD_INT 57
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: PPUSH
2734: CALL_OW 69
2738: IFFALSE 2689
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2740: LD_ADDR_VAR 0 3
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 5
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 30
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 3
2767: PUSH
2768: LD_INT 57
2770: PUSH
2771: EMPTY
2772: LIST
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: PUSH
2788: LD_INT 1
2790: ARRAY
2791: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2792: LD_ADDR_VAR 0 2
2796: PUSH
2797: LD_EXP 39
2801: PPUSH
2802: LD_INT 25
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 72
2816: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2817: LD_VAR 0 2
2821: PPUSH
2822: LD_VAR 0 3
2826: PPUSH
2827: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2838: LD_INT 22
2840: PUSH
2841: LD_INT 5
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 30
2850: PUSH
2851: LD_INT 31
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 57
2863: PUSH
2864: EMPTY
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: LIST
2875: PPUSH
2876: CALL_OW 69
2880: PUSH
2881: LD_INT 2
2883: GREATEREQUAL
2884: IFFALSE 2831
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2886: LD_ADDR_VAR 0 2
2890: PUSH
2891: LD_EXP 39
2895: PPUSH
2896: LD_INT 25
2898: PUSH
2899: LD_INT 2
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2911: LD_VAR 0 2
2915: PUSH
2916: LD_INT 1
2918: ARRAY
2919: PPUSH
2920: LD_INT 5
2922: PPUSH
2923: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: LD_VAR 0 3
2953: PPUSH
2954: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2958: LD_VAR 0 2
2962: PUSH
2963: LD_INT 2
2965: ARRAY
2966: PUSH
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 3
2974: ARRAY
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2987: LD_VAR 0 2
2991: PUSH
2992: LD_INT 2
2994: ARRAY
2995: PUSH
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 3
3003: ARRAY
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PPUSH
3009: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3013: LD_ADDR_VAR 0 4
3017: PUSH
3018: LD_INT 22
3020: PUSH
3021: LD_INT 5
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 31
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: ST_TO_ADDR
// for i := 1 to 2 do
3047: LD_ADDR_VAR 0 1
3051: PUSH
3052: DOUBLE
3053: LD_INT 1
3055: DEC
3056: ST_TO_ADDR
3057: LD_INT 2
3059: PUSH
3060: FOR_TO
3061: IFFALSE 3095
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3063: LD_VAR 0 2
3067: PUSH
3068: LD_VAR 0 1
3072: PUSH
3073: LD_INT 1
3075: PLUS
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 4
3082: PUSH
3083: LD_VAR 0 1
3087: ARRAY
3088: PPUSH
3089: CALL_OW 180
3093: GO 3060
3095: POP
3096: POP
// wait ( 1 1$00 ) ;
3097: LD_INT 2100
3099: PPUSH
3100: CALL_OW 67
// farmerBaseReady := true ;
3104: LD_ADDR_EXP 4
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// end ;
3112: PPOPN 4
3114: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3115: LD_EXP 4
3119: PUSH
3120: LD_EXP 11
3124: NOT
3125: AND
3126: IFFALSE 3648
3128: GO 3130
3130: DISABLE
3131: LD_INT 0
3133: PPUSH
3134: PPUSH
3135: PPUSH
3136: PPUSH
3137: PPUSH
// begin enable ;
3138: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3139: LD_ADDR_VAR 0 3
3143: PUSH
3144: LD_EXP 39
3148: PPUSH
3149: LD_INT 25
3151: PUSH
3152: LD_INT 1
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 72
3163: PUSH
3164: LD_EXP 36
3168: ADD
3169: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: LD_EXP 39
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 72
3194: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3195: LD_ADDR_VAR 0 5
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_INT 3
3222: PUSH
3223: LD_INT 24
3225: PUSH
3226: LD_INT 1000
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3247: LD_ADDR_VAR 0 4
3251: PUSH
3252: LD_INT 22
3254: PUSH
3255: LD_INT 5
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 30
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: PPUSH
3276: CALL_OW 69
3280: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 302
3294: IFFALSE 3358
// for i in sol do
3296: LD_ADDR_VAR 0 1
3300: PUSH
3301: LD_VAR 0 3
3305: PUSH
3306: FOR_IN
3307: IFFALSE 3356
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 256
3318: PUSH
3319: LD_INT 999
3321: LESS
3322: PUSH
3323: LD_VAR 0 1
3327: PPUSH
3328: CALL_OW 310
3332: NOT
3333: AND
3334: IFFALSE 3354
// ComEnterUnit ( i , arm [ 1 ] ) ;
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_VAR 0 4
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: CALL_OW 120
3354: GO 3306
3356: POP
3357: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3358: LD_VAR 0 2
3362: NOT
3363: PUSH
3364: LD_INT 22
3366: PUSH
3367: LD_INT 1
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PPUSH
3388: CALL_OW 69
3392: NOT
3393: AND
3394: IFFALSE 3486
// begin uc_side := 5 ;
3396: LD_ADDR_OWVAR 20
3400: PUSH
3401: LD_INT 5
3403: ST_TO_ADDR
// uc_nation := 2 ;
3404: LD_ADDR_OWVAR 21
3408: PUSH
3409: LD_INT 2
3411: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3412: LD_INT 0
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: CALL_OW 380
// eng := CreateHuman ;
3425: LD_ADDR_VAR 0 2
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3435: LD_VAR 0 2
3439: PPUSH
3440: LD_INT 102
3442: PPUSH
3443: LD_INT 8
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3453: LD_VAR 0 2
3457: PPUSH
3458: LD_INT 110
3460: PPUSH
3461: LD_INT 60
3463: PPUSH
3464: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3468: LD_ADDR_EXP 39
3472: PUSH
3473: LD_EXP 39
3477: PUSH
3478: LD_VAR 0 2
3482: UNION
3483: ST_TO_ADDR
// end else
3484: GO 3648
// begin for i in eng do
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 2
3495: PUSH
3496: FOR_IN
3497: IFFALSE 3646
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3499: LD_INT 10
3501: PPUSH
3502: LD_INT 1
3504: PPUSH
3505: CALL_OW 287
3509: IFFALSE 3560
// begin if IsInUnit ( i ) then
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL_OW 310
3520: IFFALSE 3531
// ComExitBuilding ( i ) ;
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3531: LD_VAR 0 1
3535: PPUSH
3536: LD_INT 10
3538: PPUSH
3539: CALL_OW 308
3543: NOT
3544: IFFALSE 3558
// AddComMoveToArea ( i , collectFarmerArea ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 10
3553: PPUSH
3554: CALL_OW 173
// end else
3558: GO 3644
// begin if damagedBuilding then
3560: LD_VAR 0 5
3564: IFFALSE 3608
// begin if IsInUnit ( i ) then
3566: LD_VAR 0 1
3570: PPUSH
3571: CALL_OW 310
3575: IFFALSE 3588
// ComExitBuilding ( i ) else
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 122
3586: GO 3606
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_VAR 0 5
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PPUSH
3602: CALL_OW 130
// end else
3606: GO 3644
// if not IsInUnit ( i ) and not HasTask ( i ) then
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 310
3617: NOT
3618: PUSH
3619: LD_VAR 0 1
3623: PPUSH
3624: CALL_OW 314
3628: NOT
3629: AND
3630: IFFALSE 3644
// ComEnterUnit ( i , arDepot ) ;
3632: LD_VAR 0 1
3636: PPUSH
3637: LD_INT 5
3639: PPUSH
3640: CALL_OW 120
// end ; end ;
3644: GO 3496
3646: POP
3647: POP
// end ; end ;
3648: PPOPN 5
3650: END
// export function CargoEvacuation ; begin
3651: LD_INT 0
3653: PPUSH
// wait ( 0 0$3 ) ;
3654: LD_INT 105
3656: PPUSH
3657: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3661: LD_ADDR_EXP 21
3665: PUSH
3666: LD_EXP 21
3670: PUSH
3671: LD_INT 1
3673: MINUS
3674: ST_TO_ADDR
// if omarCargoCounter = 0 then
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 0
3682: EQUAL
3683: IFFALSE 3687
// exit ;
3685: GO 3994
// if omarCargo then
3687: LD_EXP 43
3691: IFFALSE 3702
// RemoveUnit ( omarCargo ) ;
3693: LD_EXP 43
3697: PPUSH
3698: CALL_OW 64
// omarCargo := PrepareCargo ;
3702: LD_ADDR_EXP 43
3706: PUSH
3707: CALL 3999 0 0
3711: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3712: LD_EXP 43
3716: PPUSH
3717: LD_INT 0
3719: PPUSH
3720: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3724: LD_EXP 43
3728: PPUSH
3729: LD_INT 107
3731: PPUSH
3732: LD_INT 59
3734: PPUSH
3735: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3739: LD_INT 35
3741: PPUSH
3742: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3746: LD_EXP 43
3750: PPUSH
3751: LD_INT 107
3753: PPUSH
3754: LD_INT 59
3756: PPUSH
3757: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3761: LD_EXP 43
3765: PPUSH
3766: CALL_OW 302
3770: NOT
3771: PUSH
3772: LD_EXP 43
3776: PPUSH
3777: CALL_OW 301
3781: OR
3782: IFFALSE 3786
// exit ;
3784: GO 3994
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3786: LD_EXP 43
3790: PPUSH
3791: LD_INT 107
3793: PPUSH
3794: LD_INT 59
3796: PPUSH
3797: CALL_OW 307
3801: PUSH
3802: LD_EXP 43
3806: PPUSH
3807: LD_INT 5
3809: PPUSH
3810: CALL_OW 296
3814: PUSH
3815: LD_INT 6
3817: LESS
3818: OR
3819: IFFALSE 3739
// SetTag ( omarCargo , 1 ) ;
3821: LD_EXP 43
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: CALL_OW 109
// wait ( 0 0$03 ) ;
3833: LD_INT 105
3835: PPUSH
3836: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3840: LD_EXP 43
3844: PPUSH
3845: LD_INT 5
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3855: LD_EXP 43
3859: PPUSH
3860: LD_INT 103
3862: PPUSH
3863: LD_INT 9
3865: PPUSH
3866: CALL_OW 171
// wait ( 0 0$1 ) ;
3870: LD_INT 35
3872: PPUSH
3873: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3877: LD_EXP 43
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 100
3887: PPUSH
3888: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3892: LD_INT 35
3894: PPUSH
3895: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3899: LD_EXP 43
3903: PPUSH
3904: LD_INT 103
3906: PPUSH
3907: LD_INT 9
3909: PPUSH
3910: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3914: LD_EXP 43
3918: PPUSH
3919: CALL_OW 302
3923: NOT
3924: PUSH
3925: LD_EXP 43
3929: PPUSH
3930: CALL_OW 301
3934: OR
3935: IFFALSE 3939
// exit ;
3937: GO 3994
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3939: LD_EXP 43
3943: PPUSH
3944: LD_INT 103
3946: PPUSH
3947: LD_INT 9
3949: PPUSH
3950: CALL_OW 307
3954: PUSH
3955: LD_EXP 43
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: CALL_OW 308
3967: OR
3968: PUSH
3969: LD_EXP 43
3973: PPUSH
3974: CALL_OW 110
3978: PUSH
3979: LD_INT 0
3981: GREATER
3982: AND
3983: IFFALSE 3892
// RemoveUnit ( omarCargo ) ;
3985: LD_EXP 43
3989: PPUSH
3990: CALL_OW 64
// end ;
3994: LD_VAR 0 1
3998: RET
// export function PrepareCargo ; var un , veh ; begin
3999: LD_INT 0
4001: PPUSH
4002: PPUSH
4003: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: LD_INT 5
4011: PPUSH
4012: LD_INT 2
4014: PPUSH
4015: LD_INT 14
4017: PPUSH
4018: LD_INT 1
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 32
4026: PPUSH
4027: LD_INT 80
4029: PPUSH
4030: CALL 325 0 7
4034: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4035: LD_VAR 0 3
4039: PPUSH
4040: LD_INT 4
4042: PPUSH
4043: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 101
4054: PPUSH
4055: LD_INT 8
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4065: LD_INT 0
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 4
4073: PPUSH
4074: CALL_OW 380
// un := CreateHuman ;
4078: LD_ADDR_VAR 0 2
4082: PUSH
4083: CALL_OW 44
4087: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4088: LD_VAR 0 2
4092: PPUSH
4093: LD_VAR 0 3
4097: PPUSH
4098: CALL_OW 52
// result := veh ;
4102: LD_ADDR_VAR 0 1
4106: PUSH
4107: LD_VAR 0 3
4111: ST_TO_ADDR
// end ; end_of_file
4112: LD_VAR 0 1
4116: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
// usForces := [ ] ;
4122: LD_ADDR_EXP 44
4126: PUSH
4127: EMPTY
4128: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4129: LD_ADDR_EXP 46
4133: PUSH
4134: LD_INT 6
4136: PUSH
4137: LD_INT 32
4139: PUSH
4140: LD_INT 27
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: LD_INT 43
4157: PUSH
4158: LD_INT 24
4160: PUSH
4161: LD_INT 5
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 27
4172: PUSH
4173: LD_INT 29
4175: PUSH
4176: LD_INT 21
4178: PUSH
4179: LD_INT 0
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4193: LD_INT 11
4195: PPUSH
4196: CALL_OW 274
4200: PPUSH
4201: LD_INT 1
4203: PPUSH
4204: LD_INT 150
4206: PUSH
4207: LD_INT 120
4209: PUSH
4210: LD_INT 100
4212: PUSH
4213: LD_INT 80
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_OWVAR 67
4226: ARRAY
4227: PPUSH
4228: CALL_OW 277
// if Difficulty = 1 then
4232: LD_OWVAR 67
4236: PUSH
4237: LD_INT 1
4239: EQUAL
4240: IFFALSE 4249
// RemoveUnit ( hillBun ) ;
4242: LD_INT 14
4244: PPUSH
4245: CALL_OW 64
// uc_side := 1 ;
4249: LD_ADDR_OWVAR 20
4253: PUSH
4254: LD_INT 1
4256: ST_TO_ADDR
// uc_nation := 1 ;
4257: LD_ADDR_OWVAR 21
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// hc_gallery :=  ;
4265: LD_ADDR_OWVAR 33
4269: PUSH
4270: LD_STRING 
4272: ST_TO_ADDR
// hc_name :=  ;
4273: LD_ADDR_OWVAR 26
4277: PUSH
4278: LD_STRING 
4280: ST_TO_ADDR
// hc_importance := 0 ;
4281: LD_ADDR_OWVAR 32
4285: PUSH
4286: LD_INT 0
4288: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4289: LD_INT 1
4291: PPUSH
4292: LD_INT 1
4294: PPUSH
4295: LD_INT 3
4297: PPUSH
4298: CALL_OW 380
// usCommander := CreateHuman ;
4302: LD_ADDR_EXP 45
4306: PUSH
4307: CALL_OW 44
4311: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4312: LD_EXP 45
4316: PPUSH
4317: LD_INT 11
4319: PPUSH
4320: CALL_OW 52
// if Difficulty > 1 then
4324: LD_OWVAR 67
4328: PUSH
4329: LD_INT 1
4331: GREATER
4332: IFFALSE 4414
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4334: LD_INT 0
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_INT 1
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 3
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: LIST
4353: PUSH
4354: LD_OWVAR 67
4358: ARRAY
4359: PPUSH
4360: CALL_OW 380
// un := CreateHuman ;
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: CALL_OW 44
4373: ST_TO_ADDR
// usForces := usForces union un ;
4374: LD_ADDR_EXP 44
4378: PUSH
4379: LD_EXP 44
4383: PUSH
4384: LD_VAR 0 3
4388: UNION
4389: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4390: LD_VAR 0 3
4394: PPUSH
4395: LD_INT 1
4397: PPUSH
4398: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4402: LD_VAR 0 3
4406: PPUSH
4407: LD_INT 14
4409: PPUSH
4410: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 2
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: PUSH
4442: LD_OWVAR 67
4446: ARRAY
4447: PUSH
4448: FOR_TO
4449: IFFALSE 4595
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4451: LD_INT 0
4453: PPUSH
4454: LD_INT 1
4456: PPUSH
4457: LD_INT 1
4459: PUSH
4460: LD_INT 2
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 3
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PUSH
4475: LD_OWVAR 67
4479: ARRAY
4480: PPUSH
4481: CALL_OW 380
// un := CreateHuman ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: CALL_OW 44
4494: ST_TO_ADDR
// usForces := usForces union un ;
4495: LD_ADDR_EXP 44
4499: PUSH
4500: LD_EXP 44
4504: PUSH
4505: LD_VAR 0 3
4509: UNION
4510: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4511: LD_VAR 0 3
4515: PPUSH
4516: LD_INT 39
4518: PPUSH
4519: LD_INT 24
4521: PPUSH
4522: LD_INT 4
4524: PPUSH
4525: LD_INT 0
4527: PPUSH
4528: CALL_OW 50
// if i < 3 then
4532: LD_VAR 0 2
4536: PUSH
4537: LD_INT 3
4539: LESS
4540: IFFALSE 4593
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4542: LD_VAR 0 3
4546: PPUSH
4547: LD_INT 22
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PUSH
4557: LD_INT 58
4559: PUSH
4560: EMPTY
4561: LIST
4562: PUSH
4563: LD_INT 30
4565: PUSH
4566: LD_INT 31
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: PPUSH
4578: CALL_OW 69
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: PPUSH
4589: CALL_OW 120
// end ;
4593: GO 4448
4595: POP
4596: POP
// for i := 1 to 2 do
4597: LD_ADDR_VAR 0 2
4601: PUSH
4602: DOUBLE
4603: LD_INT 1
4605: DEC
4606: ST_TO_ADDR
4607: LD_INT 2
4609: PUSH
4610: FOR_TO
4611: IFFALSE 4675
// begin PrepareHuman ( false , 2 , 2 ) ;
4613: LD_INT 0
4615: PPUSH
4616: LD_INT 2
4618: PPUSH
4619: LD_INT 2
4621: PPUSH
4622: CALL_OW 380
// un := CreateHuman ;
4626: LD_ADDR_VAR 0 3
4630: PUSH
4631: CALL_OW 44
4635: ST_TO_ADDR
// usForces := usForces union un ;
4636: LD_ADDR_EXP 44
4640: PUSH
4641: LD_EXP 44
4645: PUSH
4646: LD_VAR 0 3
4650: UNION
4651: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4652: LD_VAR 0 3
4656: PPUSH
4657: LD_INT 39
4659: PPUSH
4660: LD_INT 24
4662: PPUSH
4663: LD_INT 4
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL_OW 50
// end ;
4673: GO 4610
4675: POP
4676: POP
// PrepareHuman ( false , 4 , 1 ) ;
4677: LD_INT 0
4679: PPUSH
4680: LD_INT 4
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 380
// un := CreateHuman ;
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// usForces := usForces union un ;
4700: LD_ADDR_EXP 44
4704: PUSH
4705: LD_EXP 44
4709: PUSH
4710: LD_VAR 0 3
4714: UNION
4715: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4716: LD_VAR 0 3
4720: PPUSH
4721: LD_INT 39
4723: PPUSH
4724: LD_INT 24
4726: PPUSH
4727: LD_INT 4
4729: PPUSH
4730: LD_INT 0
4732: PPUSH
4733: CALL_OW 50
// end ;
4737: LD_VAR 0 1
4741: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4742: LD_EXP 44
4746: PUSH
4747: LD_EXP 6
4751: NOT
4752: AND
4753: PUSH
4754: LD_EXP 14
4758: NOT
4759: AND
4760: IFFALSE 5191
4762: GO 4764
4764: DISABLE
4765: LD_INT 0
4767: PPUSH
4768: PPUSH
4769: PPUSH
4770: PPUSH
4771: PPUSH
// begin enable ;
4772: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_EXP 44
4782: PPUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 72
4797: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4798: LD_ADDR_VAR 0 4
4802: PUSH
4803: LD_EXP 44
4807: PPUSH
4808: LD_INT 25
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PPUSH
4818: CALL_OW 72
4822: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4823: LD_ADDR_VAR 0 5
4827: PUSH
4828: LD_EXP 44
4832: PPUSH
4833: LD_INT 25
4835: PUSH
4836: LD_INT 4
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PPUSH
4843: CALL_OW 72
4847: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4848: LD_INT 7
4850: PPUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 2
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PPUSH
4861: CALL_OW 70
4865: PUSH
4866: LD_INT 1
4868: EQUAL
4869: IFFALSE 4945
// for i in sol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_VAR 0 4
4880: PUSH
4881: FOR_IN
4882: IFFALSE 4943
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 310
4893: NOT
4894: PUSH
4895: LD_VAR 0 1
4899: PPUSH
4900: CALL_OW 310
4904: PPUSH
4905: CALL_OW 266
4909: PUSH
4910: LD_INT 4
4912: EQUAL
4913: NOT
4914: OR
4915: IFFALSE 4941
// begin ComExitBuilding ( i ) ;
4917: LD_VAR 0 1
4921: PPUSH
4922: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: LD_INT 37
4933: PPUSH
4934: LD_INT 23
4936: PPUSH
4937: CALL_OW 174
// end ;
4941: GO 4881
4943: POP
4944: POP
// if eng then
4945: LD_VAR 0 3
4949: IFFALSE 5191
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4951: LD_ADDR_VAR 0 2
4955: PUSH
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 95
4968: PUSH
4969: LD_INT 7
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 21
4978: PUSH
4979: LD_INT 3
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: LD_INT 24
4991: PUSH
4992: LD_INT 1000
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// if b then
5014: LD_VAR 0 2
5018: IFFALSE 5049
// begin ComExitBuilding ( eng ) ;
5020: LD_VAR 0 3
5024: PPUSH
5025: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: LD_VAR 0 2
5038: PUSH
5039: LD_INT 1
5041: ARRAY
5042: PPUSH
5043: CALL_OW 190
// end else
5047: GO 5191
// begin for i in eng do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 3
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5189
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5187
// begin if americanBuildList then
5074: LD_EXP 46
5078: IFFALSE 5163
// begin if IsInUnit ( i ) then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 310
5089: IFFALSE 5100
// ComExitBuilding ( i ) ;
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_EXP 46
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PPUSH
5118: LD_EXP 46
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PPUSH
5131: LD_EXP 46
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_INT 3
5142: ARRAY
5143: PPUSH
5144: LD_EXP 46
5148: PUSH
5149: LD_INT 1
5151: ARRAY
5152: PUSH
5153: LD_INT 4
5155: ARRAY
5156: PPUSH
5157: CALL_OW 205
// end else
5161: GO 5187
// if not IsInUnit ( i ) then
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 310
5172: NOT
5173: IFFALSE 5187
// ComEnterUnit ( i , usDepot ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_INT 11
5182: PPUSH
5183: CALL_OW 120
// end ;
5187: GO 5059
5189: POP
5190: POP
// end ; end ; end ;
5191: PPOPN 5
5193: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5194: LD_INT 0
5196: PPUSH
5197: PPUSH
5198: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: LD_INT 35
5206: PUSH
5207: LD_INT 45
5209: PUSH
5210: LD_INT 48
5212: PUSH
5213: LD_EXP 59
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: ST_TO_ADDR
// for i in tech do
5224: LD_ADDR_VAR 0 4
5228: PUSH
5229: LD_VAR 0 3
5233: PUSH
5234: FOR_IN
5235: IFFALSE 5253
// AddComResearch ( lab , i ) ;
5237: LD_VAR 0 1
5241: PPUSH
5242: LD_VAR 0 4
5246: PPUSH
5247: CALL_OW 184
5251: GO 5234
5253: POP
5254: POP
// end ;
5255: LD_VAR 0 2
5259: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5260: LD_EXP 12
5264: PUSH
5265: LD_EXP 23
5269: PUSH
5270: LD_EXP 27
5274: LESSEQUAL
5275: AND
5276: IFFALSE 5301
5278: GO 5280
5280: DISABLE
// begin enable ;
5281: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5282: LD_INT 35
5284: PPUSH
5285: LD_INT 2065
5287: PPUSH
5288: CALL_OW 12
5292: PPUSH
5293: CALL_OW 67
// SendConvoy ;
5297: CALL 5407 0 0
// end ;
5301: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5302: LD_EXP 6
5306: PUSH
5307: LD_EXP 18
5311: AND
5312: IFFALSE 5406
5314: GO 5316
5316: DISABLE
// begin if americanHasEscaped then
5317: LD_EXP 8
5321: IFFALSE 5332
// wait ( 3 3$20 ) else
5323: LD_INT 7000
5325: PPUSH
5326: CALL_OW 67
5330: GO 5339
// wait ( 6 6$40 ) ;
5332: LD_INT 14000
5334: PPUSH
5335: CALL_OW 67
// SendAttack ;
5339: CALL 6180 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5343: LD_INT 14000
5345: PUSH
5346: LD_INT 11900
5348: PUSH
5349: LD_INT 11200
5351: PUSH
5352: LD_INT 10150
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: PUSH
5361: LD_OWVAR 67
5365: ARRAY
5366: PPUSH
5367: CALL_OW 67
// SendAttack ;
5371: CALL 6180 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5375: LD_EXP 19
5379: PUSH
5380: LD_INT 5
5382: PUSH
5383: LD_INT 6
5385: PUSH
5386: LD_INT 7
5388: PUSH
5389: LD_INT 8
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_OWVAR 67
5402: ARRAY
5403: LESS
5404: IFFALSE 5343
// end ;
5406: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5407: LD_INT 0
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// road := rand ( 1 , 2 ) ;
5417: LD_ADDR_VAR 0 4
5421: PUSH
5422: LD_INT 1
5424: PPUSH
5425: LD_INT 2
5427: PPUSH
5428: CALL_OW 12
5432: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5433: LD_ADDR_VAR 0 8
5437: PUSH
5438: LD_INT 3
5440: PUSH
5441: LD_INT 8
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_VAR 0 4
5452: ARRAY
5453: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5454: LD_ADDR_VAR 0 5
5458: PUSH
5459: LD_INT 35
5461: PUSH
5462: LD_INT 66
5464: PUSH
5465: LD_INT 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 101
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5491: LD_ADDR_VAR 0 6
5495: PUSH
5496: LD_INT 34
5498: PUSH
5499: LD_INT 67
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 38
5508: PUSH
5509: LD_INT 62
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 43
5518: PUSH
5519: LD_INT 54
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 57
5528: PUSH
5529: LD_INT 57
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 77
5538: PUSH
5539: LD_INT 71
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 86
5548: PUSH
5549: LD_INT 60
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 89
5558: PUSH
5559: LD_INT 35
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 93
5568: PUSH
5569: LD_INT 17
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 97
5578: PUSH
5579: LD_INT 10
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 103
5588: PUSH
5589: LD_INT 9
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// if road = 2 then
5608: LD_VAR 0 4
5612: PUSH
5613: LD_INT 2
5615: EQUAL
5616: IFFALSE 5633
// points := ReverseArray ( points ) ;
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: LD_VAR 0 6
5627: PPUSH
5628: CALL 980 0 1
5632: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5633: LD_INT 4
5635: PPUSH
5636: LD_INT 1
5638: PPUSH
5639: LD_INT 2
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 12
5650: PPUSH
5651: LD_INT 80
5653: PPUSH
5654: CALL 325 0 7
// veh := CreateVehicle ;
5658: LD_ADDR_VAR 0 3
5662: PUSH
5663: CALL_OW 45
5667: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5668: LD_VAR 0 3
5672: PPUSH
5673: LD_VAR 0 5
5677: PUSH
5678: LD_VAR 0 4
5682: ARRAY
5683: PUSH
5684: LD_INT 3
5686: ARRAY
5687: PPUSH
5688: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_VAR 0 5
5701: PUSH
5702: LD_VAR 0 4
5706: ARRAY
5707: PUSH
5708: LD_INT 1
5710: ARRAY
5711: PPUSH
5712: LD_VAR 0 5
5716: PUSH
5717: LD_VAR 0 4
5721: ARRAY
5722: PUSH
5723: LD_INT 2
5725: ARRAY
5726: PPUSH
5727: LD_INT 0
5729: PPUSH
5730: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5734: LD_INT 0
5736: PPUSH
5737: LD_INT 1
5739: PPUSH
5740: LD_OWVAR 67
5744: PPUSH
5745: CALL_OW 380
// un := CreateHuman ;
5749: LD_ADDR_VAR 0 2
5753: PUSH
5754: CALL_OW 44
5758: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PPUSH
5769: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5773: LD_INT 70
5775: PUSH
5776: LD_INT 66
5778: PUSH
5779: LD_INT 62
5781: PUSH
5782: LD_INT 58
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: PUSH
5791: LD_OWVAR 67
5795: ARRAY
5796: PPUSH
5797: CALL_OW 13
5801: PUSH
5802: LD_OWVAR 1
5806: PUSH
5807: LD_INT 30
5809: MOD
5810: PLUS
5811: PUSH
5812: LD_EXP 23
5816: PUSH
5817: LD_INT 4
5819: LESS
5820: OR
5821: IFFALSE 5838
// SetCargo ( veh , mat_cans , 100 ) ;
5823: LD_VAR 0 3
5827: PPUSH
5828: LD_INT 1
5830: PPUSH
5831: LD_INT 100
5833: PPUSH
5834: CALL_OW 290
// for i := 2 to points do
5838: LD_ADDR_VAR 0 7
5842: PUSH
5843: DOUBLE
5844: LD_INT 2
5846: DEC
5847: ST_TO_ADDR
5848: LD_VAR 0 6
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5897
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5856: LD_VAR 0 3
5860: PPUSH
5861: LD_VAR 0 6
5865: PUSH
5866: LD_VAR 0 7
5870: ARRAY
5871: PUSH
5872: LD_INT 1
5874: ARRAY
5875: PPUSH
5876: LD_VAR 0 6
5880: PUSH
5881: LD_VAR 0 7
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: PPUSH
5891: CALL_OW 171
5895: GO 5853
5897: POP
5898: POP
// convoyCounter := convoyCounter + 1 ;
5899: LD_ADDR_EXP 23
5903: PUSH
5904: LD_EXP 23
5908: PUSH
5909: LD_INT 1
5911: PLUS
5912: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5913: LD_INT 35
5915: PPUSH
5916: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5920: LD_VAR 0 3
5924: PPUSH
5925: CALL_OW 255
5929: PUSH
5930: LD_INT 4
5932: NONEQUAL
5933: IFFALSE 5946
// begin ComStop ( veh ) ;
5935: LD_VAR 0 3
5939: PPUSH
5940: CALL_OW 141
// exit ;
5944: GO 6175
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5946: LD_VAR 0 3
5950: PPUSH
5951: CALL_OW 314
5955: NOT
5956: PUSH
5957: LD_VAR 0 3
5961: PPUSH
5962: CALL_OW 302
5966: AND
5967: IFFALSE 6008
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5969: LD_VAR 0 3
5973: PPUSH
5974: LD_VAR 0 6
5978: PUSH
5979: LD_VAR 0 6
5983: ARRAY
5984: PUSH
5985: LD_INT 1
5987: ARRAY
5988: PPUSH
5989: LD_VAR 0 6
5993: PUSH
5994: LD_VAR 0 6
5998: ARRAY
5999: PUSH
6000: LD_INT 2
6002: ARRAY
6003: PPUSH
6004: CALL_OW 111
// if not IsInUnit ( un ) then
6008: LD_VAR 0 2
6012: PPUSH
6013: CALL_OW 310
6017: NOT
6018: IFFALSE 6059
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 6
6029: PUSH
6030: LD_VAR 0 6
6034: ARRAY
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: LD_VAR 0 6
6044: PUSH
6045: LD_VAR 0 6
6049: ARRAY
6050: PUSH
6051: LD_INT 2
6053: ARRAY
6054: PPUSH
6055: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6059: LD_VAR 0 3
6063: PPUSH
6064: LD_VAR 0 8
6068: PPUSH
6069: CALL_OW 308
6073: PUSH
6074: LD_VAR 0 2
6078: PPUSH
6079: LD_VAR 0 8
6083: PPUSH
6084: CALL_OW 308
6088: OR
6089: IFFALSE 5913
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6091: LD_VAR 0 2
6095: PPUSH
6096: CALL_OW 302
6100: PUSH
6101: LD_VAR 0 3
6105: PPUSH
6106: CALL_OW 302
6110: NOT
6111: AND
6112: PUSH
6113: LD_VAR 0 2
6117: PPUSH
6118: LD_VAR 0 8
6122: PPUSH
6123: CALL_OW 308
6127: AND
6128: IFFALSE 6139
// RemoveUnit ( un ) ;
6130: LD_VAR 0 2
6134: PPUSH
6135: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6139: LD_VAR 0 3
6143: PPUSH
6144: LD_VAR 0 8
6148: PPUSH
6149: CALL_OW 308
6153: PUSH
6154: LD_VAR 0 3
6158: PPUSH
6159: CALL_OW 302
6163: AND
6164: IFFALSE 6175
// RemoveUnit ( veh ) ;
6166: LD_VAR 0 3
6170: PPUSH
6171: CALL_OW 64
// end ;
6175: LD_VAR 0 1
6179: RET
// export function SendAttack ; var un , veh , i ; begin
6180: LD_INT 0
6182: PPUSH
6183: PPUSH
6184: PPUSH
6185: PPUSH
// if ingame_video then
6186: LD_OWVAR 52
6190: IFFALSE 6213
// begin repeat wait ( 0 0$1 ) ;
6192: LD_INT 35
6194: PPUSH
6195: CALL_OW 67
// until not ingame_video ;
6199: LD_OWVAR 52
6203: NOT
6204: IFFALSE 6192
// wait ( 0 0$5 ) ;
6206: LD_INT 175
6208: PPUSH
6209: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6213: LD_INT 22
6215: PUSH
6216: LD_INT 1
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PUSH
6223: LD_INT 21
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PPUSH
6237: CALL_OW 69
6241: PUSH
6242: LD_INT 10
6244: GREATER
6245: IFFALSE 6288
// begin repeat wait ( 0 0$1 ) ;
6247: LD_INT 35
6249: PPUSH
6250: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6254: LD_INT 22
6256: PUSH
6257: LD_INT 1
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 21
6266: PUSH
6267: LD_INT 1
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 69
6282: PUSH
6283: LD_INT 10
6285: LESSEQUAL
6286: IFFALSE 6247
// end ; IncomingAttack ;
6288: CALL 15324 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6292: LD_INT 2100
6294: PPUSH
6295: LD_INT 3500
6297: PPUSH
6298: CALL_OW 12
6302: PPUSH
6303: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6307: LD_ADDR_VAR 0 4
6311: PUSH
6312: DOUBLE
6313: LD_INT 1
6315: DEC
6316: ST_TO_ADDR
6317: LD_INT 3
6319: PUSH
6320: LD_INT 4
6322: PUSH
6323: LD_INT 4
6325: PUSH
6326: LD_INT 5
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_OWVAR 67
6339: ARRAY
6340: PUSH
6341: LD_EXP 19
6345: PUSH
6346: LD_INT 3
6348: DIV
6349: PLUS
6350: PUSH
6351: FOR_TO
6352: IFFALSE 6468
// begin uc_side := 1 ;
6354: LD_ADDR_OWVAR 20
6358: PUSH
6359: LD_INT 1
6361: ST_TO_ADDR
// uc_nation := 1 ;
6362: LD_ADDR_OWVAR 21
6366: PUSH
6367: LD_INT 1
6369: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6370: LD_INT 0
6372: PPUSH
6373: LD_INT 1
6375: PPUSH
6376: LD_INT 2
6378: PUSH
6379: LD_INT 3
6381: PUSH
6382: LD_INT 4
6384: PUSH
6385: LD_INT 4
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: PUSH
6394: LD_OWVAR 67
6398: ARRAY
6399: PPUSH
6400: CALL_OW 380
// un := CreateHuman ;
6404: LD_ADDR_VAR 0 2
6408: PUSH
6409: CALL_OW 44
6413: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6414: LD_VAR 0 2
6418: PPUSH
6419: LD_INT 37
6421: PPUSH
6422: LD_INT 70
6424: PPUSH
6425: LD_INT 3
6427: PPUSH
6428: LD_INT 0
6430: PPUSH
6431: CALL_OW 50
// usAttackers := usAttackers union un ;
6435: LD_ADDR_EXP 47
6439: PUSH
6440: LD_EXP 47
6444: PUSH
6445: LD_VAR 0 2
6449: UNION
6450: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6451: LD_VAR 0 2
6455: PPUSH
6456: LD_INT 40
6458: PPUSH
6459: LD_INT 65
6461: PPUSH
6462: CALL_OW 111
// end ;
6466: GO 6351
6468: POP
6469: POP
// uc_side := 1 ;
6470: LD_ADDR_OWVAR 20
6474: PUSH
6475: LD_INT 1
6477: ST_TO_ADDR
// uc_nation := 1 ;
6478: LD_ADDR_OWVAR 21
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6486: LD_INT 0
6488: PPUSH
6489: LD_INT 4
6491: PPUSH
6492: LD_INT 2
6494: PPUSH
6495: CALL_OW 380
// un := CreateHuman ;
6499: LD_ADDR_VAR 0 2
6503: PUSH
6504: CALL_OW 44
6508: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6509: LD_VAR 0 2
6513: PPUSH
6514: LD_INT 37
6516: PPUSH
6517: LD_INT 70
6519: PPUSH
6520: LD_INT 3
6522: PPUSH
6523: LD_INT 0
6525: PPUSH
6526: CALL_OW 50
// usAttackers := usAttackers union un ;
6530: LD_ADDR_EXP 47
6534: PUSH
6535: LD_EXP 47
6539: PUSH
6540: LD_VAR 0 2
6544: UNION
6545: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6546: LD_VAR 0 2
6550: PPUSH
6551: LD_INT 40
6553: PPUSH
6554: LD_INT 65
6556: PPUSH
6557: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6561: LD_ADDR_VAR 0 4
6565: PUSH
6566: DOUBLE
6567: LD_INT 1
6569: DEC
6570: ST_TO_ADDR
6571: LD_OWVAR 67
6575: PUSH
6576: LD_EXP 19
6580: PUSH
6581: LD_INT 4
6583: DIV
6584: PLUS
6585: PUSH
6586: FOR_TO
6587: IFFALSE 6783
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6589: LD_ADDR_VAR 0 3
6593: PUSH
6594: LD_INT 1
6596: PPUSH
6597: LD_INT 1
6599: PPUSH
6600: LD_INT 2
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: LD_INT 3
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 1
6616: PPUSH
6617: LD_INT 3
6619: PPUSH
6620: CALL_OW 12
6624: ARRAY
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: LD_INT 1
6631: PPUSH
6632: LD_INT 4
6634: PUSH
6635: LD_INT 3
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 1
6648: PPUSH
6649: LD_INT 3
6651: PPUSH
6652: CALL_OW 12
6656: ARRAY
6657: PPUSH
6658: LD_INT 90
6660: PPUSH
6661: CALL 325 0 7
6665: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6666: LD_VAR 0 3
6670: PPUSH
6671: LD_INT 35
6673: PPUSH
6674: LD_INT 65
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 3
6689: PPUSH
6690: LD_OWVAR 67
6694: PUSH
6695: LD_INT 1
6697: PLUS
6698: PPUSH
6699: CALL_OW 380
// un := CreateHuman ;
6703: LD_ADDR_VAR 0 2
6707: PUSH
6708: CALL_OW 44
6712: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6713: LD_VAR 0 2
6717: PPUSH
6718: LD_VAR 0 3
6722: PPUSH
6723: CALL_OW 52
// usAttackers := usAttackers union un ;
6727: LD_ADDR_EXP 47
6731: PUSH
6732: LD_EXP 47
6736: PUSH
6737: LD_VAR 0 2
6741: UNION
6742: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6743: LD_VAR 0 3
6747: PPUSH
6748: LD_INT 39
6750: PPUSH
6751: LD_INT 60
6753: PPUSH
6754: CALL_OW 111
// wait ( 0 0$3 ) ;
6758: LD_INT 105
6760: PPUSH
6761: CALL_OW 67
// usAttackers := usAttackers union veh ;
6765: LD_ADDR_EXP 47
6769: PUSH
6770: LD_EXP 47
6774: PUSH
6775: LD_VAR 0 3
6779: UNION
6780: ST_TO_ADDR
// end ;
6781: GO 6586
6783: POP
6784: POP
// attackWave := attackWave + 1 ;
6785: LD_ADDR_EXP 19
6789: PUSH
6790: LD_EXP 19
6794: PUSH
6795: LD_INT 1
6797: PLUS
6798: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6799: LD_EXP 24
6803: PPUSH
6804: CALL_OW 427
// end ;
6808: LD_VAR 0 1
6812: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6813: LD_INT 0
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
// if retreatAllowed then
6826: LD_EXP 11
6830: IFFALSE 6842
// strategy := 2 else
6832: LD_ADDR_VAR 0 5
6836: PUSH
6837: LD_INT 2
6839: ST_TO_ADDR
6840: GO 6858
// strategy := rand ( 0 , 2 ) ;
6842: LD_ADDR_VAR 0 5
6846: PUSH
6847: LD_INT 0
6849: PPUSH
6850: LD_INT 2
6852: PPUSH
6853: CALL_OW 12
6857: ST_TO_ADDR
// attackFormula := [ ] ;
6858: LD_ADDR_VAR 0 6
6862: PUSH
6863: EMPTY
6864: ST_TO_ADDR
// case strategy of 0 :
6865: LD_VAR 0 5
6869: PUSH
6870: LD_INT 0
6872: DOUBLE
6873: EQUAL
6874: IFTRUE 6878
6876: GO 7208
6878: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6879: LD_INT 11
6881: PPUSH
6882: LD_INT 22
6884: PUSH
6885: LD_INT 2
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 30
6894: PUSH
6895: LD_INT 4
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PPUSH
6906: CALL_OW 70
6910: NOT
6911: IFFALSE 6983
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6913: LD_ADDR_VAR 0 6
6917: PUSH
6918: LD_INT 41
6920: PUSH
6921: LD_INT 34
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: PUSH
6931: LD_INT 53
6933: PUSH
6934: LD_INT 62
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 37
6943: PUSH
6944: LD_INT 63
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 44
6953: PUSH
6954: LD_INT 45
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 37
6963: PUSH
6964: LD_INT 28
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 7206
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6983: LD_INT 12
6985: PPUSH
6986: LD_INT 22
6988: PUSH
6989: LD_INT 2
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 2
6998: PUSH
6999: LD_INT 30
7001: PUSH
7002: LD_INT 4
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 30
7011: PUSH
7012: LD_INT 31
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 30
7021: PUSH
7022: LD_INT 32
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 70
7043: NOT
7044: IFFALSE 7127
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7046: LD_ADDR_VAR 0 6
7050: PUSH
7051: LD_INT 27
7053: PUSH
7054: LD_INT 42
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 27
7063: PUSH
7064: LD_INT 32
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 53
7077: PUSH
7078: LD_INT 62
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 37
7087: PUSH
7088: LD_INT 63
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 44
7097: PUSH
7098: LD_INT 45
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 37
7107: PUSH
7108: LD_INT 28
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: ST_TO_ADDR
7125: GO 7206
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7127: LD_ADDR_VAR 0 6
7131: PUSH
7132: LD_INT 71
7134: PUSH
7135: LD_INT 67
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 54
7144: PUSH
7145: LD_INT 35
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 63
7158: PUSH
7159: LD_INT 40
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 37
7168: PUSH
7169: LD_INT 63
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 44
7178: PUSH
7179: LD_INT 45
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 37
7188: PUSH
7189: LD_INT 28
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// end ; 1 :
7206: GO 7411
7208: LD_INT 1
7210: DOUBLE
7211: EQUAL
7212: IFTRUE 7216
7214: GO 7320
7216: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7217: LD_ADDR_VAR 0 6
7221: PUSH
7222: LD_INT 71
7224: PUSH
7225: LD_INT 67
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 82
7234: PUSH
7235: LD_INT 23
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 53
7244: PUSH
7245: LD_INT 7
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 43
7254: PUSH
7255: LD_INT 10
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 53
7270: PUSH
7271: LD_INT 62
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 37
7280: PUSH
7281: LD_INT 63
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 44
7290: PUSH
7291: LD_INT 45
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 37
7300: PUSH
7301: LD_INT 28
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: ST_TO_ADDR
7318: GO 7411
7320: LD_INT 2
7322: DOUBLE
7323: EQUAL
7324: IFTRUE 7328
7326: GO 7410
7328: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7329: LD_ADDR_VAR 0 6
7333: PUSH
7334: LD_INT 90
7336: PUSH
7337: LD_INT 59
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 108
7346: PUSH
7347: LD_INT 64
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 82
7360: PUSH
7361: LD_INT 75
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 73
7370: PUSH
7371: LD_INT 67
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 101
7380: PUSH
7381: LD_INT 65
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 108
7390: PUSH
7391: LD_INT 62
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: ST_TO_ADDR
7408: GO 7411
7410: POP
// if not attackFormula then
7411: LD_VAR 0 6
7415: NOT
7416: IFFALSE 7420
// exit ;
7418: GO 9098
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7420: LD_ADDR_VAR 0 7
7424: PUSH
7425: LD_EXP 47
7429: PPUSH
7430: LD_INT 25
7432: PUSH
7433: LD_INT 1
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 72
7444: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7445: LD_ADDR_VAR 0 8
7449: PUSH
7450: LD_EXP 47
7454: PPUSH
7455: LD_INT 25
7457: PUSH
7458: LD_INT 4
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 72
7469: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7470: LD_ADDR_VAR 0 9
7474: PUSH
7475: LD_EXP 47
7479: PPUSH
7480: LD_INT 25
7482: PUSH
7483: LD_INT 3
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PPUSH
7490: CALL_OW 72
7494: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7495: LD_ADDR_VAR 0 10
7499: PUSH
7500: LD_EXP 47
7504: PPUSH
7505: LD_INT 21
7507: PUSH
7508: LD_INT 2
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PPUSH
7515: CALL_OW 72
7519: ST_TO_ADDR
// if sci then
7520: LD_VAR 0 8
7524: IFFALSE 7561
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7526: LD_VAR 0 8
7530: PPUSH
7531: LD_VAR 0 6
7535: PUSH
7536: LD_INT 2
7538: ARRAY
7539: PUSH
7540: LD_INT 1
7542: ARRAY
7543: PPUSH
7544: LD_VAR 0 6
7548: PUSH
7549: LD_INT 2
7551: ARRAY
7552: PUSH
7553: LD_INT 2
7555: ARRAY
7556: PPUSH
7557: CALL_OW 111
// repeat wait ( 10 ) ;
7561: LD_INT 10
7563: PPUSH
7564: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7568: LD_ADDR_VAR 0 7
7572: PUSH
7573: LD_EXP 47
7577: PPUSH
7578: LD_INT 25
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 72
7592: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7593: LD_ADDR_VAR 0 8
7597: PUSH
7598: LD_EXP 47
7602: PPUSH
7603: LD_INT 25
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 72
7617: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7618: LD_ADDR_VAR 0 9
7622: PUSH
7623: LD_EXP 47
7627: PPUSH
7628: LD_INT 25
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 72
7642: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7643: LD_ADDR_VAR 0 10
7647: PUSH
7648: LD_EXP 47
7652: PPUSH
7653: LD_INT 21
7655: PUSH
7656: LD_INT 2
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 72
7667: ST_TO_ADDR
// if sol then
7668: LD_VAR 0 7
7672: IFFALSE 8093
// begin for i in sol do
7674: LD_ADDR_VAR 0 2
7678: PUSH
7679: LD_VAR 0 7
7683: PUSH
7684: FOR_IN
7685: IFFALSE 8091
// begin tag := GetTag ( i ) ;
7687: LD_ADDR_VAR 0 4
7691: PUSH
7692: LD_VAR 0 2
7696: PPUSH
7697: CALL_OW 110
7701: ST_TO_ADDR
// if not tag then
7702: LD_VAR 0 4
7706: NOT
7707: IFFALSE 7816
// begin if GetLives ( i ) = 1000 then
7709: LD_VAR 0 2
7713: PPUSH
7714: CALL_OW 256
7718: PUSH
7719: LD_INT 1000
7721: EQUAL
7722: IFFALSE 7738
// SetTag ( i , 1 ) else
7724: LD_VAR 0 2
7728: PPUSH
7729: LD_INT 1
7731: PPUSH
7732: CALL_OW 109
7736: GO 7814
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7738: LD_VAR 0 2
7742: PPUSH
7743: LD_VAR 0 6
7747: PUSH
7748: LD_INT 2
7750: ARRAY
7751: PUSH
7752: LD_INT 1
7754: ARRAY
7755: PPUSH
7756: LD_VAR 0 6
7760: PUSH
7761: LD_INT 2
7763: ARRAY
7764: PUSH
7765: LD_INT 2
7767: ARRAY
7768: PPUSH
7769: CALL_OW 297
7773: PUSH
7774: LD_INT 10
7776: GREATER
7777: IFFALSE 7814
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7779: LD_VAR 0 2
7783: PPUSH
7784: LD_VAR 0 6
7788: PUSH
7789: LD_INT 2
7791: ARRAY
7792: PUSH
7793: LD_INT 1
7795: ARRAY
7796: PPUSH
7797: LD_VAR 0 6
7801: PUSH
7802: LD_INT 2
7804: ARRAY
7805: PUSH
7806: LD_INT 2
7808: ARRAY
7809: PPUSH
7810: CALL_OW 111
// end else
7814: GO 8089
// begin if GetLives ( i ) < 760 then
7816: LD_VAR 0 2
7820: PPUSH
7821: CALL_OW 256
7825: PUSH
7826: LD_INT 760
7828: LESS
7829: IFFALSE 7880
// begin SetTag ( i , 0 ) ;
7831: LD_VAR 0 2
7835: PPUSH
7836: LD_INT 0
7838: PPUSH
7839: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7843: LD_VAR 0 2
7847: PPUSH
7848: LD_VAR 0 6
7852: PUSH
7853: LD_INT 2
7855: ARRAY
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: PPUSH
7861: LD_VAR 0 6
7865: PUSH
7866: LD_INT 2
7868: ARRAY
7869: PUSH
7870: LD_INT 2
7872: ARRAY
7873: PPUSH
7874: CALL_OW 111
// end else
7878: GO 8089
// if tag <= attackFormula [ 1 ] then
7880: LD_VAR 0 4
7884: PUSH
7885: LD_VAR 0 6
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: LESSEQUAL
7894: IFFALSE 8055
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7896: LD_VAR 0 2
7900: PPUSH
7901: LD_VAR 0 6
7905: PUSH
7906: LD_INT 1
7908: ARRAY
7909: PUSH
7910: LD_VAR 0 4
7914: ARRAY
7915: PUSH
7916: LD_INT 1
7918: ARRAY
7919: PPUSH
7920: LD_VAR 0 6
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: PUSH
7929: LD_VAR 0 4
7933: ARRAY
7934: PUSH
7935: LD_INT 2
7937: ARRAY
7938: PPUSH
7939: CALL_OW 297
7943: PUSH
7944: LD_INT 6
7946: GREATER
7947: IFFALSE 7998
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7949: LD_VAR 0 2
7953: PPUSH
7954: LD_VAR 0 6
7958: PUSH
7959: LD_INT 1
7961: ARRAY
7962: PUSH
7963: LD_VAR 0 4
7967: ARRAY
7968: PUSH
7969: LD_INT 1
7971: ARRAY
7972: PPUSH
7973: LD_VAR 0 6
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PUSH
7982: LD_VAR 0 4
7986: ARRAY
7987: PUSH
7988: LD_INT 2
7990: ARRAY
7991: PPUSH
7992: CALL_OW 114
7996: GO 8053
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7998: LD_INT 81
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 91
8010: PUSH
8011: LD_VAR 0 2
8015: PUSH
8016: LD_INT 10
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PPUSH
8028: CALL_OW 69
8032: NOT
8033: IFFALSE 8053
// SetTag ( i , tag + 1 ) ;
8035: LD_VAR 0 2
8039: PPUSH
8040: LD_VAR 0 4
8044: PUSH
8045: LD_INT 1
8047: PLUS
8048: PPUSH
8049: CALL_OW 109
// end else
8053: GO 8089
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8055: LD_VAR 0 2
8059: PPUSH
8060: LD_INT 81
8062: PUSH
8063: LD_INT 1
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: PPUSH
8075: LD_VAR 0 2
8079: PPUSH
8080: CALL_OW 74
8084: PPUSH
8085: CALL_OW 115
// end ; end ;
8089: GO 7684
8091: POP
8092: POP
// end ; if sci then
8093: LD_VAR 0 8
8097: IFFALSE 8366
// begin if not sol and not mech then
8099: LD_VAR 0 7
8103: NOT
8104: PUSH
8105: LD_VAR 0 9
8109: NOT
8110: AND
8111: IFFALSE 8163
// begin for i in sci do
8113: LD_ADDR_VAR 0 2
8117: PUSH
8118: LD_VAR 0 8
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8159
// begin usForces := usForces union i ;
8126: LD_ADDR_EXP 44
8130: PUSH
8131: LD_EXP 44
8135: PUSH
8136: LD_VAR 0 2
8140: UNION
8141: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8142: LD_VAR 0 2
8146: PPUSH
8147: LD_INT 34
8149: PPUSH
8150: LD_INT 68
8152: PPUSH
8153: CALL_OW 111
// end ;
8157: GO 8123
8159: POP
8160: POP
// end else
8161: GO 8366
// for i in sci do
8163: LD_ADDR_VAR 0 2
8167: PUSH
8168: LD_VAR 0 8
8172: PUSH
8173: FOR_IN
8174: IFFALSE 8364
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_VAR 0 6
8185: PUSH
8186: LD_INT 2
8188: ARRAY
8189: PUSH
8190: LD_INT 1
8192: ARRAY
8193: PPUSH
8194: LD_VAR 0 6
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: PUSH
8203: LD_INT 2
8205: ARRAY
8206: PPUSH
8207: CALL_OW 297
8211: PUSH
8212: LD_INT 10
8214: GREATER
8215: IFFALSE 8254
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_VAR 0 6
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PUSH
8231: LD_INT 1
8233: ARRAY
8234: PPUSH
8235: LD_VAR 0 6
8239: PUSH
8240: LD_INT 2
8242: ARRAY
8243: PUSH
8244: LD_INT 2
8246: ARRAY
8247: PPUSH
8248: CALL_OW 111
8252: GO 8362
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8254: LD_VAR 0 7
8258: PPUSH
8259: LD_INT 3
8261: PUSH
8262: LD_INT 24
8264: PUSH
8265: LD_INT 1000
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 91
8278: PUSH
8279: LD_VAR 0 2
8283: PUSH
8284: LD_INT 10
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PPUSH
8296: CALL_OW 72
8300: IFFALSE 8362
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_VAR 0 7
8311: PPUSH
8312: LD_INT 3
8314: PUSH
8315: LD_INT 24
8317: PUSH
8318: LD_INT 1000
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 91
8331: PUSH
8332: LD_VAR 0 2
8336: PUSH
8337: LD_INT 10
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 72
8353: PUSH
8354: LD_INT 1
8356: ARRAY
8357: PPUSH
8358: CALL_OW 128
8362: GO 8173
8364: POP
8365: POP
// end ; if mech then
8366: LD_VAR 0 9
8370: IFFALSE 9080
// begin for i in mech do
8372: LD_ADDR_VAR 0 2
8376: PUSH
8377: LD_VAR 0 9
8381: PUSH
8382: FOR_IN
8383: IFFALSE 9078
// begin tag := GetTag ( i ) ;
8385: LD_ADDR_VAR 0 4
8389: PUSH
8390: LD_VAR 0 2
8394: PPUSH
8395: CALL_OW 110
8399: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8400: LD_ADDR_VAR 0 11
8404: PUSH
8405: LD_VAR 0 2
8409: PPUSH
8410: CALL_OW 310
8414: ST_TO_ADDR
// if not tag then
8415: LD_VAR 0 4
8419: NOT
8420: IFFALSE 8791
// begin if veh then
8422: LD_VAR 0 11
8426: IFFALSE 8597
// begin if GetLives ( veh ) = 1000 then
8428: LD_VAR 0 11
8432: PPUSH
8433: CALL_OW 256
8437: PUSH
8438: LD_INT 1000
8440: EQUAL
8441: IFFALSE 8457
// SetTag ( i , 1 ) else
8443: LD_VAR 0 2
8447: PPUSH
8448: LD_INT 1
8450: PPUSH
8451: CALL_OW 109
8455: GO 8595
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8457: LD_VAR 0 11
8461: PPUSH
8462: LD_VAR 0 6
8466: PUSH
8467: LD_INT 3
8469: ARRAY
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PPUSH
8475: LD_VAR 0 6
8479: PUSH
8480: LD_INT 3
8482: ARRAY
8483: PUSH
8484: LD_INT 2
8486: ARRAY
8487: PPUSH
8488: CALL_OW 297
8492: PUSH
8493: LD_INT 8
8495: GREATER
8496: IFFALSE 8535
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8498: LD_VAR 0 11
8502: PPUSH
8503: LD_VAR 0 6
8507: PUSH
8508: LD_INT 3
8510: ARRAY
8511: PUSH
8512: LD_INT 1
8514: ARRAY
8515: PPUSH
8516: LD_VAR 0 6
8520: PUSH
8521: LD_INT 3
8523: ARRAY
8524: PUSH
8525: LD_INT 2
8527: ARRAY
8528: PPUSH
8529: CALL_OW 111
8533: GO 8595
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8535: LD_INT 81
8537: PUSH
8538: LD_INT 1
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: LD_INT 91
8547: PUSH
8548: LD_VAR 0 2
8552: PUSH
8553: LD_INT 10
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PPUSH
8565: CALL_OW 69
8569: NOT
8570: IFFALSE 8595
// begin ComExitVehicle ( i ) ;
8572: LD_VAR 0 2
8576: PPUSH
8577: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8581: LD_VAR 0 2
8585: PPUSH
8586: LD_VAR 0 11
8590: PPUSH
8591: CALL_OW 189
// end ; end else
8595: GO 8789
// if GetLives ( i ) < 400 then
8597: LD_VAR 0 2
8601: PPUSH
8602: CALL_OW 256
8606: PUSH
8607: LD_INT 400
8609: LESS
8610: IFFALSE 8661
// begin usAttackers := usAttackers diff i ;
8612: LD_ADDR_EXP 47
8616: PUSH
8617: LD_EXP 47
8621: PUSH
8622: LD_VAR 0 2
8626: DIFF
8627: ST_TO_ADDR
// usForces := usForces union i ;
8628: LD_ADDR_EXP 44
8632: PUSH
8633: LD_EXP 44
8637: PUSH
8638: LD_VAR 0 2
8642: UNION
8643: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 34
8651: PPUSH
8652: LD_INT 68
8654: PPUSH
8655: CALL_OW 111
// end else
8659: GO 8789
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8661: LD_VAR 0 10
8665: PPUSH
8666: LD_INT 58
8668: PUSH
8669: EMPTY
8670: LIST
8671: PUSH
8672: LD_INT 24
8674: PUSH
8675: LD_INT 1000
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PPUSH
8686: CALL_OW 72
8690: PUSH
8691: LD_VAR 0 2
8695: PPUSH
8696: CALL_OW 314
8700: NOT
8701: AND
8702: PUSH
8703: LD_INT 81
8705: PUSH
8706: LD_INT 1
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 91
8715: PUSH
8716: LD_VAR 0 2
8720: PUSH
8721: LD_INT 9
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 69
8737: OR
8738: IFFALSE 8789
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_VAR 0 10
8749: PPUSH
8750: LD_INT 58
8752: PUSH
8753: EMPTY
8754: LIST
8755: PUSH
8756: LD_INT 24
8758: PUSH
8759: LD_INT 250
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 72
8774: PPUSH
8775: LD_VAR 0 2
8779: PPUSH
8780: CALL_OW 74
8784: PPUSH
8785: CALL_OW 120
// end else
8789: GO 9076
// begin if veh and GetLives ( veh ) < 760 then
8791: LD_VAR 0 11
8795: PUSH
8796: LD_VAR 0 11
8800: PPUSH
8801: CALL_OW 256
8805: PUSH
8806: LD_INT 760
8808: LESS
8809: AND
8810: IFFALSE 8861
// begin SetTag ( i , 0 ) ;
8812: LD_VAR 0 2
8816: PPUSH
8817: LD_INT 0
8819: PPUSH
8820: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8824: LD_VAR 0 11
8828: PPUSH
8829: LD_VAR 0 6
8833: PUSH
8834: LD_INT 3
8836: ARRAY
8837: PUSH
8838: LD_INT 1
8840: ARRAY
8841: PPUSH
8842: LD_VAR 0 6
8846: PUSH
8847: LD_INT 3
8849: ARRAY
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL_OW 111
// end else
8859: GO 9076
// if veh then
8861: LD_VAR 0 11
8865: IFFALSE 9076
// if tag <= attackFormula [ 4 ] then
8867: LD_VAR 0 4
8871: PUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_INT 4
8879: ARRAY
8880: LESSEQUAL
8881: IFFALSE 9042
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8883: LD_VAR 0 11
8887: PPUSH
8888: LD_VAR 0 6
8892: PUSH
8893: LD_INT 4
8895: ARRAY
8896: PUSH
8897: LD_VAR 0 4
8901: ARRAY
8902: PUSH
8903: LD_INT 1
8905: ARRAY
8906: PPUSH
8907: LD_VAR 0 6
8911: PUSH
8912: LD_INT 4
8914: ARRAY
8915: PUSH
8916: LD_VAR 0 4
8920: ARRAY
8921: PUSH
8922: LD_INT 2
8924: ARRAY
8925: PPUSH
8926: CALL_OW 297
8930: PUSH
8931: LD_INT 6
8933: GREATER
8934: IFFALSE 8985
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8936: LD_VAR 0 11
8940: PPUSH
8941: LD_VAR 0 6
8945: PUSH
8946: LD_INT 4
8948: ARRAY
8949: PUSH
8950: LD_VAR 0 4
8954: ARRAY
8955: PUSH
8956: LD_INT 1
8958: ARRAY
8959: PPUSH
8960: LD_VAR 0 6
8964: PUSH
8965: LD_INT 4
8967: ARRAY
8968: PUSH
8969: LD_VAR 0 4
8973: ARRAY
8974: PUSH
8975: LD_INT 2
8977: ARRAY
8978: PPUSH
8979: CALL_OW 114
8983: GO 9040
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8985: LD_INT 81
8987: PUSH
8988: LD_INT 1
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 91
8997: PUSH
8998: LD_VAR 0 11
9002: PUSH
9003: LD_INT 10
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PPUSH
9015: CALL_OW 69
9019: NOT
9020: IFFALSE 9040
// SetTag ( i , tag + 1 ) ;
9022: LD_VAR 0 2
9026: PPUSH
9027: LD_VAR 0 4
9031: PUSH
9032: LD_INT 1
9034: PLUS
9035: PPUSH
9036: CALL_OW 109
// end else
9040: GO 9076
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9042: LD_VAR 0 11
9046: PPUSH
9047: LD_INT 81
9049: PUSH
9050: LD_INT 1
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 69
9061: PPUSH
9062: LD_VAR 0 2
9066: PPUSH
9067: CALL_OW 74
9071: PPUSH
9072: CALL_OW 115
// end ; end ;
9076: GO 8382
9078: POP
9079: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9080: LD_EXP 47
9084: PPUSH
9085: LD_INT 52
9087: PUSH
9088: EMPTY
9089: LIST
9090: PPUSH
9091: CALL_OW 72
9095: NOT
9096: IFFALSE 7561
// end ;
9098: LD_VAR 0 1
9102: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9103: LD_INT 22
9105: PUSH
9106: LD_INT 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 32
9115: PUSH
9116: LD_INT 1
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 69
9131: IFFALSE 9208
9133: GO 9135
9135: DISABLE
9136: LD_INT 0
9138: PPUSH
// begin enable ;
9139: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9140: LD_ADDR_VAR 0 1
9144: PUSH
9145: LD_INT 22
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 32
9157: PUSH
9158: LD_INT 1
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 69
9173: PUSH
9174: FOR_IN
9175: IFFALSE 9206
// if GetFuel ( i ) < 10 then
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 261
9186: PUSH
9187: LD_INT 10
9189: LESS
9190: IFFALSE 9204
// SetFuel ( i , 10 ) ;
9192: LD_VAR 0 1
9196: PPUSH
9197: LD_INT 10
9199: PPUSH
9200: CALL_OW 240
9204: GO 9174
9206: POP
9207: POP
// end ; end_of_file
9208: PPOPN 1
9210: END
// export function Action ; var hasAll , i , tmp ; begin
9211: LD_INT 0
9213: PPUSH
9214: PPUSH
9215: PPUSH
9216: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9217: LD_ADDR_VAR 0 2
9221: PUSH
9222: LD_INT 22
9224: PUSH
9225: LD_INT 2
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 23
9244: PUSH
9245: LD_INT 2
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: PUSH
9262: LD_INT 7
9264: GREATEREQUAL
9265: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9266: LD_VAR 0 2
9270: PPUSH
9271: LD_STRING 03_HasAll
9273: PPUSH
9274: CALL_OW 39
// Video ( true ) ;
9278: LD_INT 1
9280: PPUSH
9281: CALL 77195 0 1
// CenterNowOnUnits ( Heike ) ;
9285: LD_EXP 28
9289: PPUSH
9290: CALL_OW 87
// wait ( 0 0$2 ) ;
9294: LD_INT 70
9296: PPUSH
9297: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9301: LD_EXP 36
9305: PPUSH
9306: LD_STRING DF-1-start
9308: PPUSH
9309: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9313: LD_EXP 28
9317: PPUSH
9318: LD_EXP 36
9322: PPUSH
9323: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9327: LD_EXP 28
9331: PPUSH
9332: LD_STRING DH-1-start
9334: PPUSH
9335: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9339: LD_EXP 37
9343: PPUSH
9344: LD_INT 92
9346: PPUSH
9347: LD_INT 21
9349: PPUSH
9350: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9354: LD_EXP 32
9358: PPUSH
9359: LD_INT 94
9361: PPUSH
9362: LD_INT 23
9364: PPUSH
9365: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9369: LD_EXP 40
9373: PUSH
9374: LD_INT 1
9376: ARRAY
9377: PPUSH
9378: LD_INT 90
9380: PPUSH
9381: LD_INT 23
9383: PPUSH
9384: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9388: LD_EXP 40
9392: PUSH
9393: LD_INT 2
9395: ARRAY
9396: PPUSH
9397: LD_INT 93
9399: PPUSH
9400: LD_INT 25
9402: PPUSH
9403: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9407: LD_EXP 40
9411: PPUSH
9412: LD_EXP 37
9416: PPUSH
9417: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9421: LD_EXP 37
9425: PUSH
9426: LD_EXP 32
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: LD_EXP 28
9439: PPUSH
9440: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9444: LD_EXP 28
9448: PPUSH
9449: LD_EXP 37
9453: PPUSH
9454: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9458: LD_INT 35
9460: PPUSH
9461: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9465: LD_EXP 37
9469: PPUSH
9470: LD_INT 92
9472: PPUSH
9473: LD_INT 21
9475: PPUSH
9476: CALL_OW 307
9480: IFFALSE 9458
// Say ( Omar , DO-1-start ) ;
9482: LD_EXP 37
9486: PPUSH
9487: LD_STRING DO-1-start
9489: PPUSH
9490: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9494: LD_EXP 28
9498: PPUSH
9499: LD_STRING DH-2-start
9501: PPUSH
9502: CALL_OW 88
// if hasAll then
9506: LD_VAR 0 2
9510: IFFALSE 9638
// begin Say ( Omar , DO-2-start ) ;
9512: LD_EXP 37
9516: PPUSH
9517: LD_STRING DO-2-start
9519: PPUSH
9520: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9524: LD_EXP 37
9528: PPUSH
9529: LD_STRING DO-3-start
9531: PPUSH
9532: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9536: LD_EXP 28
9540: PPUSH
9541: LD_STRING DH-3-start
9543: PPUSH
9544: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9548: LD_EXP 36
9552: PPUSH
9553: LD_STRING DF-2-start
9555: PPUSH
9556: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9560: LD_EXP 37
9564: PPUSH
9565: LD_EXP 36
9569: PPUSH
9570: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9574: LD_EXP 37
9578: PPUSH
9579: LD_STRING DO-4-start
9581: PPUSH
9582: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9586: LD_EXP 36
9590: PPUSH
9591: LD_STRING DF-3-start
9593: PPUSH
9594: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9598: LD_EXP 37
9602: PPUSH
9603: LD_STRING DO-5-start
9605: PPUSH
9606: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9610: LD_EXP 36
9614: PPUSH
9615: LD_STRING DF-4-start
9617: PPUSH
9618: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9622: LD_EXP 37
9626: PPUSH
9627: LD_EXP 28
9631: PPUSH
9632: CALL_OW 119
// end else
9636: GO 9738
// begin Say ( Omar , DO-2-start-a ) ;
9638: LD_EXP 37
9642: PPUSH
9643: LD_STRING DO-2-start-a
9645: PPUSH
9646: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9650: LD_EXP 37
9654: PPUSH
9655: LD_STRING DO-3-start-a
9657: PPUSH
9658: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9662: LD_EXP 28
9666: PPUSH
9667: LD_STRING DH-3-start-a
9669: PPUSH
9670: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9674: LD_EXP 36
9678: PPUSH
9679: LD_STRING DF-2-start-a
9681: PPUSH
9682: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9686: LD_EXP 37
9690: PPUSH
9691: LD_EXP 36
9695: PPUSH
9696: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9700: LD_EXP 37
9704: PPUSH
9705: LD_STRING DO-4-start-a
9707: PPUSH
9708: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9712: LD_EXP 36
9716: PPUSH
9717: LD_STRING DF-3-start-a
9719: PPUSH
9720: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9724: LD_EXP 37
9728: PPUSH
9729: LD_EXP 28
9733: PPUSH
9734: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9738: LD_INT 10
9740: PPUSH
9741: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9745: LD_EXP 37
9749: PPUSH
9750: LD_STRING DO-1-mission
9752: PPUSH
9753: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9757: LD_EXP 37
9761: PPUSH
9762: LD_STRING DO-2-mission
9764: PPUSH
9765: CALL_OW 88
// if not hasAll then
9769: LD_VAR 0 2
9773: NOT
9774: IFFALSE 9788
// Say ( Omar , DO-3-mission ) ;
9776: LD_EXP 37
9780: PPUSH
9781: LD_STRING DO-3-mission
9783: PPUSH
9784: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9788: LD_EXP 37
9792: PPUSH
9793: LD_STRING DO-4-mission
9795: PPUSH
9796: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9800: LD_EXP 28
9804: PPUSH
9805: LD_STRING DH-1-mission
9807: PPUSH
9808: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9812: LD_EXP 36
9816: PPUSH
9817: LD_STRING DF-1-mission
9819: PPUSH
9820: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9824: LD_EXP 37
9828: PPUSH
9829: LD_STRING DO-5-mission
9831: PPUSH
9832: CALL_OW 88
// if not hasAll then
9836: LD_VAR 0 2
9840: NOT
9841: IFFALSE 9976
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9843: LD_ADDR_VAR 0 4
9847: PUSH
9848: LD_INT 22
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 21
9860: PUSH
9861: LD_INT 1
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 23
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: PPUSH
9883: CALL_OW 69
9887: ST_TO_ADDR
// for i := 7 downto tmp do
9888: LD_ADDR_VAR 0 3
9892: PUSH
9893: DOUBLE
9894: LD_INT 7
9896: INC
9897: ST_TO_ADDR
9898: LD_VAR 0 4
9902: PUSH
9903: FOR_DOWNTO
9904: IFFALSE 9974
// begin if omarSquad < 3 then
9906: LD_EXP 40
9910: PUSH
9911: LD_INT 3
9913: LESS
9914: IFFALSE 9918
// break ;
9916: GO 9974
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9918: LD_EXP 40
9922: PUSH
9923: LD_INT 3
9925: ARRAY
9926: PPUSH
9927: LD_INT 2
9929: PPUSH
9930: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9934: LD_ADDR_EXP 42
9938: PUSH
9939: LD_EXP 42
9943: PUSH
9944: LD_EXP 40
9948: PUSH
9949: LD_INT 3
9951: ARRAY
9952: UNION
9953: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9954: LD_ADDR_EXP 40
9958: PUSH
9959: LD_EXP 40
9963: PPUSH
9964: LD_INT 3
9966: PPUSH
9967: CALL_OW 3
9971: ST_TO_ADDR
// end ;
9972: GO 9903
9974: POP
9975: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9976: LD_EXP 37
9980: PUSH
9981: LD_EXP 40
9985: ADD
9986: PPUSH
9987: LD_INT 103
9989: PPUSH
9990: LD_INT 9
9992: PPUSH
9993: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9997: LD_VAR 0 2
10001: PUSH
10002: LD_EXP 33
10006: PPUSH
10007: CALL_OW 302
10011: AND
10012: IFFALSE 10073
// begin wait ( 0 0$3 ) ;
10014: LD_INT 105
10016: PPUSH
10017: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10021: LD_EXP 33
10025: PPUSH
10026: LD_EXP 36
10030: PPUSH
10031: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10035: LD_EXP 33
10039: PPUSH
10040: LD_STRING DK-1-side
10042: PPUSH
10043: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10047: LD_EXP 36
10051: PPUSH
10052: LD_EXP 33
10056: PPUSH
10057: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10061: LD_EXP 36
10065: PPUSH
10066: LD_STRING DF-1-side
10068: PPUSH
10069: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10073: LD_INT 22
10075: PUSH
10076: LD_INT 2
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 69
10087: PPUSH
10088: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10092: LD_EXP 36
10096: PUSH
10097: LD_EXP 39
10101: ADD
10102: PPUSH
10103: LD_INT 108
10105: PPUSH
10106: LD_INT 62
10108: PPUSH
10109: CALL_OW 111
// gameStarted := true ;
10113: LD_ADDR_EXP 3
10117: PUSH
10118: LD_INT 1
10120: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10121: LD_INT 105
10123: PPUSH
10124: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10128: LD_EXP 28
10132: PPUSH
10133: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10137: LD_EXP 28
10141: PPUSH
10142: LD_EXP 32
10146: PPUSH
10147: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10151: LD_INT 22
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PPUSH
10161: CALL_OW 69
10165: PUSH
10166: LD_EXP 28
10170: DIFF
10171: PPUSH
10172: LD_EXP 28
10176: PPUSH
10177: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10181: LD_EXP 28
10185: PPUSH
10186: LD_STRING DH-1-explore
10188: PPUSH
10189: CALL_OW 88
// if Givi then
10193: LD_EXP 29
10197: IFFALSE 10213
// Say ( Givi , DG-1-explore ) else
10199: LD_EXP 29
10203: PPUSH
10204: LD_STRING DG-1-explore
10206: PPUSH
10207: CALL_OW 88
10211: GO 10250
// if heikeSecondSquad then
10213: LD_EXP 42
10217: IFFALSE 10250
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10219: LD_EXP 42
10223: PPUSH
10224: LD_INT 26
10226: PUSH
10227: LD_INT 1
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 72
10238: PUSH
10239: LD_INT 1
10241: ARRAY
10242: PPUSH
10243: LD_STRING DArm-1-explore
10245: PPUSH
10246: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10250: LD_EXP 32
10254: PPUSH
10255: LD_STRING DA-1-explore
10257: PPUSH
10258: CALL_OW 88
// if Sophia then
10262: LD_EXP 34
10266: IFFALSE 10344
// begin Say ( Sophia , DS-2-explore ) ;
10268: LD_EXP 34
10272: PPUSH
10273: LD_STRING DS-2-explore
10275: PPUSH
10276: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10280: LD_EXP 32
10284: PPUSH
10285: LD_STRING DA-2-explore
10287: PPUSH
10288: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10292: LD_EXP 34
10296: PPUSH
10297: LD_EXP 32
10301: PPUSH
10302: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10306: LD_EXP 32
10310: PPUSH
10311: LD_EXP 34
10315: PPUSH
10316: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10320: LD_EXP 34
10324: PPUSH
10325: LD_STRING DS-3-explore
10327: PPUSH
10328: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10332: LD_EXP 32
10336: PPUSH
10337: LD_STRING DA-3-explore
10339: PPUSH
10340: CALL_OW 88
// end ; if Mike then
10344: LD_EXP 30
10348: IFFALSE 10404
// begin Say ( Mike , DM-1-explore ) ;
10350: LD_EXP 30
10354: PPUSH
10355: LD_STRING DM-1-explore
10357: PPUSH
10358: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10362: LD_EXP 28
10366: PPUSH
10367: LD_STRING DH-2-explore
10369: PPUSH
10370: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10374: LD_EXP 30
10378: PPUSH
10379: LD_STRING DM-2-explore
10381: PPUSH
10382: CALL_OW 88
// if Kaia then
10386: LD_EXP 33
10390: IFFALSE 10404
// Say ( Kaia , DK-1-explore ) ;
10392: LD_EXP 33
10396: PPUSH
10397: LD_STRING DK-1-explore
10399: PPUSH
10400: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10404: LD_INT 22
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PPUSH
10414: CALL_OW 69
10418: PPUSH
10419: CALL_OW 139
// Video ( false ) ;
10423: LD_INT 0
10425: PPUSH
10426: CALL 77195 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10430: LD_STRING BuildBase
10432: PPUSH
10433: CALL_OW 337
// SaveForQuickRestart ;
10437: CALL_OW 22
// end ;
10441: LD_VAR 0 1
10445: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10446: LD_EXP 5
10450: NOT
10451: PUSH
10452: LD_EXP 6
10456: NOT
10457: AND
10458: PUSH
10459: LD_INT 5
10461: PPUSH
10462: LD_INT 22
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 70
10476: AND
10477: PUSH
10478: LD_EXP 6
10482: NOT
10483: AND
10484: IFFALSE 10569
10486: GO 10488
10488: DISABLE
// begin if Mike then
10489: LD_EXP 30
10493: IFFALSE 10509
// Say ( Mike , DM-1-scout ) else
10495: LD_EXP 30
10499: PPUSH
10500: LD_STRING DM-1-scout
10502: PPUSH
10503: CALL_OW 88
10507: GO 10540
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10509: LD_EXP 42
10513: PPUSH
10514: LD_INT 26
10516: PUSH
10517: LD_INT 1
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PPUSH
10524: CALL_OW 72
10528: PUSH
10529: LD_INT 1
10531: ARRAY
10532: PPUSH
10533: LD_STRING DArm-1-explore
10535: PPUSH
10536: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10540: LD_INT 54
10542: PPUSH
10543: LD_INT 35
10545: PPUSH
10546: LD_INT 2
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10556: LD_INT 54
10558: PPUSH
10559: LD_INT 35
10561: PPUSH
10562: LD_INT 2
10564: PPUSH
10565: CALL_OW 331
// end ;
10569: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10570: LD_INT 6
10572: PPUSH
10573: LD_INT 22
10575: PUSH
10576: LD_INT 2
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PPUSH
10583: CALL_OW 70
10587: PUSH
10588: LD_EXP 6
10592: NOT
10593: AND
10594: IFFALSE 10848
10596: GO 10598
10598: DISABLE
10599: LD_INT 0
10601: PPUSH
10602: PPUSH
10603: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10604: LD_ADDR_VAR 0 1
10608: PUSH
10609: LD_EXP 42
10613: PPUSH
10614: LD_INT 26
10616: PUSH
10617: LD_INT 1
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PPUSH
10624: CALL_OW 72
10628: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_EXP 42
10638: PPUSH
10639: LD_INT 26
10641: PUSH
10642: LD_INT 2
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 72
10653: ST_TO_ADDR
// DialogueOn ;
10654: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10658: LD_INT 36
10660: PPUSH
10661: LD_INT 22
10663: PPUSH
10664: LD_INT 2
10666: PPUSH
10667: LD_INT 8
10669: PPUSH
10670: CALL_OW 330
// dwait ( 0 0$1 ) ;
10674: LD_INT 35
10676: PPUSH
10677: CALL_OW 68
// speakerOk := false ;
10681: LD_ADDR_VAR 0 3
10685: PUSH
10686: LD_INT 0
10688: ST_TO_ADDR
// if Mike then
10689: LD_EXP 30
10693: IFFALSE 10715
// speakerOk := Say ( Mike , DM-1-spot ) else
10695: LD_ADDR_VAR 0 3
10699: PUSH
10700: LD_EXP 30
10704: PPUSH
10705: LD_STRING DM-1-spot
10707: PPUSH
10708: CALL_OW 88
10712: ST_TO_ADDR
10713: GO 10743
// if randomMen then
10715: LD_VAR 0 1
10719: IFFALSE 10743
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10721: LD_ADDR_VAR 0 3
10725: PUSH
10726: LD_VAR 0 1
10730: PUSH
10731: LD_INT 1
10733: ARRAY
10734: PPUSH
10735: LD_STRING DArm-1-spot-a
10737: PPUSH
10738: CALL_OW 88
10742: ST_TO_ADDR
// if speakerOk then
10743: LD_VAR 0 3
10747: IFFALSE 10791
// begin if Givi then
10749: LD_EXP 29
10753: IFFALSE 10769
// Say ( Givi , DG-1-spot ) else
10755: LD_EXP 29
10759: PPUSH
10760: LD_STRING DG-1-spot
10762: PPUSH
10763: CALL_OW 88
10767: GO 10791
// if randomWomen then
10769: LD_VAR 0 2
10773: IFFALSE 10791
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10775: LD_VAR 0 2
10779: PUSH
10780: LD_INT 1
10782: ARRAY
10783: PPUSH
10784: LD_STRING DArf-1-spot-a
10786: PPUSH
10787: CALL_OW 88
// end ; if Mike then
10791: LD_EXP 30
10795: IFFALSE 10811
// Say ( Heike , DH-1-spot ) else
10797: LD_EXP 28
10801: PPUSH
10802: LD_STRING DH-1-spot
10804: PPUSH
10805: CALL_OW 88
10809: GO 10823
// Say ( Heike , DH-1-spot-a ) ;
10811: LD_EXP 28
10815: PPUSH
10816: LD_STRING DH-1-spot-a
10818: PPUSH
10819: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10823: LD_INT 36
10825: PPUSH
10826: LD_INT 22
10828: PPUSH
10829: LD_INT 2
10831: PPUSH
10832: CALL_OW 331
// DialogueOff ;
10836: CALL_OW 7
// americanBaseSpoted := true ;
10840: LD_ADDR_EXP 5
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// end ;
10848: PPOPN 3
10850: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10851: LD_EXP 5
10855: NOT
10856: PUSH
10857: LD_INT 22
10859: PUSH
10860: LD_INT 2
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 101
10869: PUSH
10870: LD_INT 1
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PPUSH
10881: CALL_OW 69
10885: AND
10886: PUSH
10887: LD_EXP 6
10891: NOT
10892: AND
10893: IFFALSE 10979
10895: GO 10897
10897: DISABLE
10898: LD_INT 0
10900: PPUSH
// begin americanBaseSpoted := true ;
10901: LD_ADDR_EXP 5
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10909: LD_ADDR_VAR 0 1
10913: PUSH
10914: LD_EXP 42
10918: PPUSH
10919: LD_INT 26
10921: PUSH
10922: LD_INT 1
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 72
10933: ST_TO_ADDR
// if not randomMen then
10934: LD_VAR 0 1
10938: NOT
10939: IFFALSE 10943
// exit ;
10941: GO 10979
// DialogueOn ;
10943: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10947: LD_VAR 0 1
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: PPUSH
10956: LD_STRING DArm-1-spot-a
10958: PPUSH
10959: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10963: LD_EXP 28
10967: PPUSH
10968: LD_STRING DH-1-spot-a
10970: PPUSH
10971: CALL_OW 88
// DialogueOff ;
10975: CALL_OW 7
// end ;
10979: PPOPN 1
10981: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10982: LD_INT 11
10984: PPUSH
10985: CALL_OW 255
10989: PUSH
10990: LD_INT 2
10992: EQUAL
10993: PUSH
10994: LD_INT 7
10996: PPUSH
10997: LD_INT 22
10999: PUSH
11000: LD_INT 1
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 3
11009: PUSH
11010: LD_INT 50
11012: PUSH
11013: EMPTY
11014: LIST
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 30
11022: PUSH
11023: LD_INT 31
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: PPUSH
11035: CALL_OW 70
11039: OR
11040: PUSH
11041: LD_INT 7
11043: PPUSH
11044: LD_INT 22
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 70
11058: PUSH
11059: LD_INT 1
11061: GREATER
11062: OR
11063: PUSH
11064: LD_EXP 44
11068: PUSH
11069: LD_INT 4
11071: LESSEQUAL
11072: OR
11073: IFFALSE 11664
11075: GO 11077
11077: DISABLE
11078: LD_INT 0
11080: PPUSH
11081: PPUSH
// begin wait ( 0 0$3 ) ;
11082: LD_INT 105
11084: PPUSH
11085: CALL_OW 67
// americanStartRun := true ;
11089: LD_ADDR_EXP 14
11093: PUSH
11094: LD_INT 1
11096: ST_TO_ADDR
// if IsOk ( usCommander ) then
11097: LD_EXP 45
11101: PPUSH
11102: CALL_OW 302
11106: IFFALSE 11136
// begin usForces := usForces union usCommander ;
11108: LD_ADDR_EXP 44
11112: PUSH
11113: LD_EXP 44
11117: PUSH
11118: LD_EXP 45
11122: UNION
11123: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11124: LD_EXP 45
11128: PPUSH
11129: LD_STRING DUsm-1-assault
11131: PPUSH
11132: CALL_OW 88
// end ; for i in usForces do
11136: LD_ADDR_VAR 0 1
11140: PUSH
11141: LD_EXP 44
11145: PUSH
11146: FOR_IN
11147: IFFALSE 11193
// begin if IsInUnit ( i ) then
11149: LD_VAR 0 1
11153: PPUSH
11154: CALL_OW 310
11158: IFFALSE 11169
// ComExitBuilding ( i ) ;
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 122
// wait ( 3 ) ;
11169: LD_INT 3
11171: PPUSH
11172: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11176: LD_VAR 0 1
11180: PPUSH
11181: LD_INT 34
11183: PPUSH
11184: LD_INT 67
11186: PPUSH
11187: CALL_OW 111
// end ;
11191: GO 11146
11193: POP
11194: POP
// Say ( Heike , DH-1-assault ) ;
11195: LD_EXP 28
11199: PPUSH
11200: LD_STRING DH-1-assault
11202: PPUSH
11203: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11207: LD_INT 35
11209: PPUSH
11210: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11214: LD_VAR 0 1
11218: PPUSH
11219: LD_INT 34
11221: PPUSH
11222: LD_INT 67
11224: PPUSH
11225: CALL_OW 111
// until not usForces ;
11229: LD_EXP 44
11233: NOT
11234: IFFALSE 11207
// music_nat := 2 ;
11236: LD_ADDR_OWVAR 71
11240: PUSH
11241: LD_INT 2
11243: ST_TO_ADDR
// music_class := music_victory ;
11244: LD_ADDR_OWVAR 72
11248: PUSH
11249: LD_INT 4
11251: ST_TO_ADDR
// if not americanHasEscaped then
11252: LD_EXP 8
11256: NOT
11257: IFFALSE 11278
// begin Say ( Heike , DH-2-assault ) ;
11259: LD_EXP 28
11263: PPUSH
11264: LD_STRING DH-2-assault
11266: PPUSH
11267: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11271: LD_STRING ACH_CLEAN
11273: PPUSH
11274: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11278: LD_INT 70
11280: PPUSH
11281: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11285: LD_INT 35
11287: PPUSH
11288: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11292: LD_INT 22
11294: PUSH
11295: LD_INT 2
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 21
11304: PUSH
11305: LD_INT 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 3
11314: PUSH
11315: LD_INT 50
11317: PUSH
11318: EMPTY
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: PPUSH
11330: CALL_OW 69
11334: NOT
11335: IFFALSE 11285
// InGameOn ;
11337: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11341: LD_INT 11
11343: PPUSH
11344: CALL_OW 255
11348: PUSH
11349: LD_INT 2
11351: EQUAL
11352: NOT
11353: IFFALSE 11365
// SetSide ( usDepot , 2 ) ;
11355: LD_INT 11
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11365: LD_INT 35
11367: PPUSH
11368: LD_INT 22
11370: PPUSH
11371: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11375: LD_EXP 28
11379: PPUSH
11380: LD_INT 35
11382: PPUSH
11383: LD_INT 22
11385: PPUSH
11386: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11390: LD_EXP 28
11394: PPUSH
11395: LD_INT 38
11397: PPUSH
11398: LD_INT 25
11400: PPUSH
11401: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11405: LD_EXP 32
11409: PUSH
11410: LD_EXP 41
11414: UNION
11415: PUSH
11416: LD_EXP 42
11420: UNION
11421: PPUSH
11422: LD_INT 39
11424: PPUSH
11425: LD_INT 26
11427: PPUSH
11428: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11432: LD_EXP 32
11436: PUSH
11437: LD_EXP 41
11441: UNION
11442: PUSH
11443: LD_EXP 42
11447: UNION
11448: PPUSH
11449: LD_EXP 28
11453: PPUSH
11454: CALL_OW 179
// p := 0 ;
11458: LD_ADDR_VAR 0 2
11462: PUSH
11463: LD_INT 0
11465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11466: LD_INT 35
11468: PPUSH
11469: CALL_OW 67
// p := p + 1 ;
11473: LD_ADDR_VAR 0 2
11477: PUSH
11478: LD_VAR 0 2
11482: PUSH
11483: LD_INT 1
11485: PLUS
11486: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11487: LD_EXP 28
11491: PPUSH
11492: CALL_OW 314
11496: NOT
11497: PUSH
11498: LD_VAR 0 2
11502: PUSH
11503: LD_INT 10
11505: GREATER
11506: OR
11507: IFFALSE 11466
// Say ( Heike , DH-1-capture ) ;
11509: LD_EXP 28
11513: PPUSH
11514: LD_STRING DH-1-capture
11516: PPUSH
11517: CALL_OW 88
// if Markov then
11521: LD_EXP 35
11525: IFFALSE 11539
// Say ( Markov , DMar-1-capture ) ;
11527: LD_EXP 35
11531: PPUSH
11532: LD_STRING DMar-1-capture
11534: PPUSH
11535: CALL_OW 88
// if Sophia then
11539: LD_EXP 34
11543: IFFALSE 11569
// begin Say ( Heike , DH-2-capture ) ;
11545: LD_EXP 28
11549: PPUSH
11550: LD_STRING DH-2-capture
11552: PPUSH
11553: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11557: LD_EXP 34
11561: PPUSH
11562: LD_STRING DS-1-capture
11564: PPUSH
11565: CALL_OW 88
// end ; InGameOff ;
11569: CALL_OW 9
// music_nat := music_auto ;
11573: LD_ADDR_OWVAR 71
11577: PUSH
11578: LD_INT 0
11580: ST_TO_ADDR
// music_class := music_auto ;
11581: LD_ADDR_OWVAR 72
11585: PUSH
11586: LD_INT 0
11588: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11589: LD_STRING ConstructBase
11591: PPUSH
11592: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11596: LD_ADDR_VAR 0 1
11600: PUSH
11601: LD_INT 22
11603: PUSH
11604: LD_INT 1
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 3
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 69
11629: PUSH
11630: FOR_IN
11631: IFFALSE 11647
// SetSide ( i , 2 ) ;
11633: LD_VAR 0 1
11637: PPUSH
11638: LD_INT 2
11640: PPUSH
11641: CALL_OW 235
11645: GO 11630
11647: POP
11648: POP
// wait ( 0 0$3 ) ;
11649: LD_INT 105
11651: PPUSH
11652: CALL_OW 67
// americanBaseCaptured := true ;
11656: LD_ADDR_EXP 6
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// end ;
11664: PPOPN 2
11666: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11667: LD_EXP 13
11671: PUSH
11672: LD_INT 3
11674: GREATEREQUAL
11675: IFFALSE 11687
11677: GO 11679
11679: DISABLE
// SetAchievement ( ACH_ENG ) ;
11680: LD_STRING ACH_ENG
11682: PPUSH
11683: CALL_OW 543
11687: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11688: LD_INT 22
11690: PUSH
11691: LD_INT 2
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 25
11700: PUSH
11701: LD_INT 15
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PPUSH
11712: CALL_OW 69
11716: PUSH
11717: LD_INT 4
11719: GREATEREQUAL
11720: IFFALSE 11732
11722: GO 11724
11724: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11725: LD_STRING ACH_APEGEN
11727: PPUSH
11728: CALL_OW 543
11732: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11733: LD_INT 22
11735: PUSH
11736: LD_INT 2
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 30
11745: PUSH
11746: LD_INT 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 3
11755: PUSH
11756: LD_INT 57
11758: PUSH
11759: EMPTY
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: LIST
11770: PPUSH
11771: CALL_OW 69
11775: IFFALSE 12040
11777: GO 11779
11779: DISABLE
// begin workshopBuilded := true ;
11780: LD_ADDR_EXP 10
11784: PUSH
11785: LD_INT 1
11787: ST_TO_ADDR
// if IsOk ( Markov ) then
11788: LD_EXP 35
11792: PPUSH
11793: CALL_OW 302
11797: IFFALSE 11856
// begin Say ( Heike , DH-1-shop-a ) ;
11799: LD_EXP 28
11803: PPUSH
11804: LD_STRING DH-1-shop-a
11806: PPUSH
11807: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11811: LD_INT 47
11813: PPUSH
11814: LD_INT 2
11816: PPUSH
11817: CALL_OW 321
11821: PUSH
11822: LD_INT 2
11824: EQUAL
11825: PUSH
11826: LD_INT 45
11828: PPUSH
11829: LD_INT 2
11831: PPUSH
11832: CALL_OW 321
11836: PUSH
11837: LD_INT 2
11839: EQUAL
11840: AND
11841: NOT
11842: IFFALSE 11856
// Say ( Markov , DMar-1-shop-a ) ;
11844: LD_EXP 35
11848: PPUSH
11849: LD_STRING DMar-1-shop-a
11851: PPUSH
11852: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11856: LD_INT 35
11858: PPUSH
11859: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11863: LD_INT 47
11865: PPUSH
11866: LD_INT 2
11868: PPUSH
11869: CALL_OW 321
11873: PUSH
11874: LD_INT 2
11876: EQUAL
11877: PUSH
11878: LD_INT 45
11880: PPUSH
11881: LD_INT 2
11883: PPUSH
11884: CALL_OW 321
11888: PUSH
11889: LD_INT 2
11891: EQUAL
11892: OR
11893: IFFALSE 11856
// if IsOk ( Markov ) and IsOk ( Heike ) then
11895: LD_EXP 35
11899: PPUSH
11900: CALL_OW 302
11904: PUSH
11905: LD_EXP 28
11909: PPUSH
11910: CALL_OW 302
11914: AND
11915: IFFALSE 12033
// begin DialogueOn ;
11917: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11921: LD_EXP 35
11925: PPUSH
11926: LD_STRING DMar-1-shop
11928: PPUSH
11929: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11933: LD_EXP 28
11937: PPUSH
11938: LD_STRING DH-1-shop
11940: PPUSH
11941: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11945: LD_EXP 35
11949: PPUSH
11950: LD_STRING DMar-2-shop
11952: PPUSH
11953: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11957: LD_EXP 35
11961: PPUSH
11962: LD_STRING DMar-3-shop
11964: PPUSH
11965: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11969: LD_EXP 28
11973: PPUSH
11974: LD_STRING DH-2-shop
11976: PPUSH
11977: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11981: LD_EXP 35
11985: PPUSH
11986: LD_STRING DMar-4-shop
11988: PPUSH
11989: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11993: LD_EXP 28
11997: PPUSH
11998: LD_STRING DH-3-shop
12000: PPUSH
12001: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12005: LD_EXP 35
12009: PPUSH
12010: LD_STRING DMar-5-shop
12012: PPUSH
12013: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12017: LD_EXP 28
12021: PPUSH
12022: LD_STRING DH-4-shop
12024: PPUSH
12025: CALL_OW 88
// DialogueOff ;
12029: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12033: LD_STRING ConstructVeh
12035: PPUSH
12036: CALL_OW 337
// end ;
12040: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12041: LD_INT 2
12043: PPUSH
12044: LD_INT 2
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL 39885 0 3
12054: PUSH
12055: LD_INT 0
12057: EQUAL
12058: IFFALSE 12070
12060: GO 12062
12062: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12063: LD_STRING Techs
12065: PPUSH
12066: CALL_OW 337
12070: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12071: LD_EXP 35
12075: PPUSH
12076: CALL_OW 302
12080: PUSH
12081: LD_INT 22
12083: PUSH
12084: LD_INT 2
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 2
12093: PUSH
12094: LD_INT 34
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 35
12106: PUSH
12107: LD_INT 22
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: AND
12128: IFFALSE 12235
12130: GO 12132
12132: DISABLE
// begin DialogueOn ;
12133: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12137: LD_INT 22
12139: PUSH
12140: LD_INT 2
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: LD_INT 2
12149: PUSH
12150: LD_INT 34
12152: PUSH
12153: LD_INT 22
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 35
12162: PUSH
12163: LD_INT 22
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PPUSH
12179: CALL_OW 69
12183: PPUSH
12184: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12188: LD_INT 10
12190: PPUSH
12191: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12195: LD_EXP 28
12199: PPUSH
12200: LD_STRING DH-1-bal
12202: PPUSH
12203: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12207: LD_EXP 35
12211: PPUSH
12212: LD_STRING DMar-1-bal
12214: PPUSH
12215: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12219: LD_EXP 28
12223: PPUSH
12224: LD_STRING DH-2-bal
12226: PPUSH
12227: CALL_OW 88
// DialogueOff ;
12231: CALL_OW 7
// end ;
12235: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12236: LD_EXP 32
12240: PPUSH
12241: CALL_OW 302
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 30
12258: PUSH
12259: LD_INT 6
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PPUSH
12270: CALL_OW 69
12274: AND
12275: IFFALSE 12336
12277: GO 12279
12279: DISABLE
// begin DialogueOn ;
12280: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12284: LD_EXP 32
12288: PPUSH
12289: LD_STRING DA-1-lab
12291: PPUSH
12292: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12296: LD_EXP 28
12300: PPUSH
12301: LD_STRING DH-1-lab
12303: PPUSH
12304: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12308: LD_EXP 32
12312: PPUSH
12313: LD_STRING DA-2-lab
12315: PPUSH
12316: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12320: LD_EXP 28
12324: PPUSH
12325: LD_STRING DH-2-lab
12327: PPUSH
12328: CALL_OW 88
// DialogueOff ;
12332: CALL_OW 7
// end ;
12336: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12337: LD_EXP 33
12341: PPUSH
12342: CALL_OW 302
12346: PUSH
12347: LD_INT 22
12349: PUSH
12350: LD_INT 2
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 25
12359: PUSH
12360: LD_INT 15
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PPUSH
12371: CALL_OW 69
12375: AND
12376: PUSH
12377: LD_INT 81
12379: PUSH
12380: LD_INT 2
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: NOT
12392: AND
12393: IFFALSE 12575
12395: GO 12397
12397: DISABLE
12398: LD_INT 0
12400: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12401: LD_ADDR_VAR 0 1
12405: PUSH
12406: LD_INT 22
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 25
12418: PUSH
12419: LD_INT 15
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PPUSH
12430: CALL_OW 69
12434: ST_TO_ADDR
// InGameOn ;
12435: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12439: LD_VAR 0 1
12443: PUSH
12444: LD_INT 1
12446: ARRAY
12447: PPUSH
12448: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12452: LD_VAR 0 1
12456: PUSH
12457: LD_INT 1
12459: ARRAY
12460: PPUSH
12461: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12465: LD_EXP 33
12469: PPUSH
12470: LD_STRING DK-1-apesol
12472: PPUSH
12473: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12477: LD_VAR 0 1
12481: PUSH
12482: LD_INT 1
12484: ARRAY
12485: PPUSH
12486: LD_INT 35
12488: PPUSH
12489: LD_INT 28
12491: PPUSH
12492: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12496: LD_VAR 0 1
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PPUSH
12505: LD_INT 36
12507: PPUSH
12508: LD_INT 17
12510: PPUSH
12511: CALL_OW 171
// DialogueOn ;
12515: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12519: LD_EXP 32
12523: PPUSH
12524: LD_STRING DA-1-apesol
12526: PPUSH
12527: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12531: LD_EXP 33
12535: PPUSH
12536: LD_STRING DK-2-apesol
12538: PPUSH
12539: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12543: LD_EXP 32
12547: PPUSH
12548: LD_STRING DA-2-apesol
12550: PPUSH
12551: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12555: LD_EXP 33
12559: PPUSH
12560: LD_STRING DK-3-apesol
12562: PPUSH
12563: CALL_OW 88
// DialogueOff ;
12567: CALL_OW 7
// InGameOff ;
12571: CALL_OW 9
// end ;
12575: PPOPN 1
12577: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12578: LD_EXP 34
12582: PPUSH
12583: CALL_OW 302
12587: PUSH
12588: LD_INT 22
12590: PUSH
12591: LD_INT 2
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 25
12600: PUSH
12601: LD_INT 16
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: AND
12617: PUSH
12618: LD_INT 81
12620: PUSH
12621: LD_INT 2
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PPUSH
12628: CALL_OW 69
12632: NOT
12633: AND
12634: IFFALSE 12919
12636: GO 12638
12638: DISABLE
12639: LD_INT 0
12641: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12642: LD_ADDR_VAR 0 1
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 2
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 25
12659: PUSH
12660: LD_INT 16
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: ST_TO_ADDR
// InGameOn ;
12676: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12680: LD_INT 35
12682: PPUSH
12683: LD_INT 22
12685: PPUSH
12686: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12690: LD_INT 5
12692: PPUSH
12693: LD_INT 35
12695: PPUSH
12696: LD_INT 22
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12706: LD_EXP 34
12710: PPUSH
12711: LD_VAR 0 1
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: PPUSH
12720: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12724: LD_VAR 0 1
12728: PUSH
12729: LD_INT 1
12731: ARRAY
12732: PPUSH
12733: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12737: LD_VAR 0 1
12741: PUSH
12742: LD_INT 1
12744: ARRAY
12745: PPUSH
12746: CALL_OW 122
// wait ( 0 0$2 ) ;
12750: LD_INT 70
12752: PPUSH
12753: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12757: LD_EXP 34
12761: PPUSH
12762: LD_STRING DS-1-apeeng
12764: PPUSH
12765: CALL_OW 88
// if IsOk ( Kamil ) then
12769: LD_EXP 31
12773: PPUSH
12774: CALL_OW 302
12778: IFFALSE 12915
// begin Say ( Kamil , DKam-1-apeeng ) ;
12780: LD_EXP 31
12784: PPUSH
12785: LD_STRING DKam-1-apeeng
12787: PPUSH
12788: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12792: LD_EXP 34
12796: PPUSH
12797: LD_STRING DS-2-apeeng
12799: PPUSH
12800: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12804: LD_EXP 31
12808: PPUSH
12809: LD_STRING DKam-2-apeeng
12811: PPUSH
12812: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12816: LD_EXP 34
12820: PPUSH
12821: LD_STRING DS-3-apeeng
12823: PPUSH
12824: CALL_OW 88
// if not IsOK ( Kaia ) then
12828: LD_EXP 33
12832: PPUSH
12833: CALL_OW 302
12837: NOT
12838: IFFALSE 12846
// begin InGameOff ;
12840: CALL_OW 9
// exit ;
12844: GO 12919
// end ; Say ( Kaia , DK-1-apeeng ) ;
12846: LD_EXP 33
12850: PPUSH
12851: LD_STRING DK-1-apeeng
12853: PPUSH
12854: CALL_OW 88
// if not IsOk ( Givi ) then
12858: LD_EXP 29
12862: PPUSH
12863: CALL_OW 302
12867: NOT
12868: IFFALSE 12879
// begin Video ( false ) ;
12870: LD_INT 0
12872: PPUSH
12873: CALL 77195 0 1
// exit ;
12877: GO 12919
// end ; Say ( Givi , DG-1-apeeng ) ;
12879: LD_EXP 29
12883: PPUSH
12884: LD_STRING DG-1-apeeng
12886: PPUSH
12887: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12891: LD_EXP 33
12895: PPUSH
12896: LD_STRING DK-2-apeeng
12898: PPUSH
12899: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12903: LD_EXP 33
12907: PPUSH
12908: LD_STRING DK-3-apeeng
12910: PPUSH
12911: CALL_OW 88
// end ; InGameOff ;
12915: CALL_OW 9
// end ;
12919: PPOPN 1
12921: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12922: LD_EXP 4
12926: PUSH
12927: LD_INT 22
12929: PUSH
12930: LD_INT 2
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 30
12939: PUSH
12940: LD_INT 0
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: AND
12956: IFFALSE 13121
12958: GO 12960
12960: DISABLE
// begin wait ( 0 0$10 ) ;
12961: LD_INT 350
12963: PPUSH
12964: CALL_OW 67
// DialogueOn ;
12968: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12972: LD_EXP 36
12976: PPUSH
12977: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12981: LD_EXP 36
12985: PPUSH
12986: LD_STRING DF-1-distribution
12988: PPUSH
12989: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12993: LD_EXP 28
12997: PPUSH
12998: LD_STRING DH-2-distribution
13000: PPUSH
13001: CALL_OW 88
// if IsOk ( Kaia ) then
13005: LD_EXP 33
13009: PPUSH
13010: CALL_OW 302
13014: IFFALSE 13075
// begin Say ( Kaia , DK-1-distribution ) ;
13016: LD_EXP 33
13020: PPUSH
13021: LD_STRING DK-1-distribution
13023: PPUSH
13024: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13028: LD_EXP 28
13032: PPUSH
13033: LD_STRING DH-1-distribution
13035: PPUSH
13036: CALL_OW 88
// if IsOk ( Givi ) then
13040: LD_EXP 29
13044: PPUSH
13045: CALL_OW 302
13049: IFFALSE 13075
// begin Say ( Givi , DG-1-distribution ) ;
13051: LD_EXP 29
13055: PPUSH
13056: LD_STRING DG-1-distribution
13058: PPUSH
13059: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13063: LD_EXP 28
13067: PPUSH
13068: LD_STRING DH-3-distribution
13070: PPUSH
13071: CALL_OW 88
// end ; end ; DialogueOff ;
13075: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13079: LD_STRING Crates1
13081: PPUSH
13082: CALL_OW 337
// farmerRequestedCrates := 300 ;
13086: LD_ADDR_EXP 16
13090: PUSH
13091: LD_INT 300
13093: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13094: LD_STRING FarmerCrates
13096: PPUSH
13097: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13101: LD_INT 10
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13111: LD_INT 108
13113: PPUSH
13114: LD_INT 61
13116: PPUSH
13117: CALL_OW 86
// end ;
13121: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13122: LD_EXP 6
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 3
13139: PUSH
13140: LD_INT 57
13142: PUSH
13143: EMPTY
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: LD_INT 30
13155: PUSH
13156: LD_INT 6
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 30
13165: PUSH
13166: LD_INT 7
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: LIST
13182: PPUSH
13183: CALL_OW 69
13187: AND
13188: PUSH
13189: LD_INT 22
13191: PUSH
13192: LD_INT 2
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: LD_INT 57
13204: PUSH
13205: EMPTY
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 30
13214: PUSH
13215: LD_INT 4
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: AND
13232: IFFALSE 13396
13234: GO 13236
13236: DISABLE
13237: LD_INT 0
13239: PPUSH
// begin wait ( 0 0$10 ) ;
13240: LD_INT 350
13242: PPUSH
13243: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13247: LD_ADDR_VAR 0 1
13251: PUSH
13252: LD_EXP 42
13256: PPUSH
13257: LD_INT 26
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 25
13269: PUSH
13270: LD_INT 2
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 72
13285: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13286: LD_EXP 28
13290: PPUSH
13291: LD_STRING DH-1-task
13293: PPUSH
13294: CALL_OW 88
// if IsOk ( Sophia ) then
13298: LD_EXP 34
13302: PPUSH
13303: CALL_OW 302
13307: IFFALSE 13347
// begin Say ( Sophia , DS-1-task ) ;
13309: LD_EXP 34
13313: PPUSH
13314: LD_STRING DS-1-task
13316: PPUSH
13317: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13321: LD_EXP 34
13325: PPUSH
13326: LD_STRING DS-2-task
13328: PPUSH
13329: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13333: LD_EXP 28
13337: PPUSH
13338: LD_STRING DH-2-task
13340: PPUSH
13341: CALL_OW 88
// end else
13345: GO 13381
// if eng then
13347: LD_VAR 0 1
13351: IFFALSE 13381
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13353: LD_VAR 0 1
13357: PUSH
13358: LD_INT 1
13360: ARRAY
13361: PPUSH
13362: LD_STRING DArm-1-task
13364: PPUSH
13365: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13369: LD_EXP 28
13373: PPUSH
13374: LD_STRING DH-2-task
13376: PPUSH
13377: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13381: LD_STRING BaseConstructed
13383: PPUSH
13384: CALL_OW 337
// allowConvoys := true ;
13388: LD_ADDR_EXP 12
13392: PUSH
13393: LD_INT 1
13395: ST_TO_ADDR
// end ;
13396: PPOPN 1
13398: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13399: LD_INT 22
13401: PUSH
13402: LD_INT 4
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 34
13411: PUSH
13412: LD_INT 12
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PPUSH
13423: CALL_OW 69
13427: IFFALSE 13595
13429: GO 13431
13431: DISABLE
13432: LD_INT 0
13434: PPUSH
13435: PPUSH
13436: PPUSH
// begin wait ( 0 0$2 ) ;
13437: LD_INT 70
13439: PPUSH
13440: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13444: LD_ADDR_VAR 0 1
13448: PUSH
13449: LD_INT 22
13451: PUSH
13452: LD_INT 4
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 34
13461: PUSH
13462: LD_INT 12
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL_OW 69
13477: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13478: LD_ADDR_VAR 0 2
13482: PUSH
13483: LD_VAR 0 1
13487: PUSH
13488: LD_INT 1
13490: ARRAY
13491: PPUSH
13492: CALL_OW 250
13496: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13497: LD_ADDR_VAR 0 3
13501: PUSH
13502: LD_VAR 0 1
13506: PUSH
13507: LD_INT 1
13509: ARRAY
13510: PPUSH
13511: CALL_OW 251
13515: ST_TO_ADDR
// DialogueOn ;
13516: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13520: LD_VAR 0 2
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: LD_INT 2
13546: PPUSH
13547: LD_INT 6
13549: NEG
13550: PPUSH
13551: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13555: LD_INT 10
13557: PPUSH
13558: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13562: LD_EXP 28
13566: PPUSH
13567: LD_STRING DH-1-seecargo
13569: PPUSH
13570: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13574: LD_VAR 0 2
13578: PPUSH
13579: LD_VAR 0 3
13583: PPUSH
13584: LD_INT 2
13586: PPUSH
13587: CALL_OW 331
// DialogueOff ;
13591: CALL_OW 7
// end ;
13595: PPOPN 3
13597: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13598: LD_EXP 4
13602: PUSH
13603: LD_EXP 15
13607: PUSH
13608: LD_INT 300
13610: GREATEREQUAL
13611: AND
13612: IFFALSE 13684
13614: GO 13616
13616: DISABLE
// begin DialogueOn ;
13617: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13621: LD_EXP 36
13625: PPUSH
13626: LD_STRING DF-1-delivery-2
13628: PPUSH
13629: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13633: LD_EXP 28
13637: PPUSH
13638: LD_STRING DH-1-delivery-2
13640: PPUSH
13641: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13645: LD_EXP 36
13649: PPUSH
13650: LD_STRING DF-2-delivery-2
13652: PPUSH
13653: CALL_OW 94
// DialogueOff ;
13657: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13661: LD_STRING Crates2
13663: PPUSH
13664: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13668: LD_ADDR_EXP 17
13672: PUSH
13673: LD_INT 63000
13675: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13676: LD_ADDR_EXP 16
13680: PUSH
13681: LD_INT 600
13683: ST_TO_ADDR
// end ;
13684: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13685: LD_EXP 4
13689: PUSH
13690: LD_EXP 15
13694: PUSH
13695: LD_INT 600
13697: GREATEREQUAL
13698: AND
13699: PUSH
13700: LD_OWVAR 67
13704: PUSH
13705: LD_INT 1
13707: GREATER
13708: AND
13709: IFFALSE 13909
13711: GO 13713
13713: DISABLE
// begin DialogueOn ;
13714: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13718: LD_EXP 36
13722: PPUSH
13723: LD_STRING DF-1-delivery-3
13725: PPUSH
13726: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13730: LD_EXP 28
13734: PPUSH
13735: LD_STRING DH-1-delivery-3
13737: PPUSH
13738: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13742: LD_EXP 36
13746: PPUSH
13747: LD_STRING DF-2-delivery-3
13749: PPUSH
13750: CALL_OW 94
// if IsOk ( Kaia ) then
13754: LD_EXP 33
13758: PPUSH
13759: CALL_OW 302
13763: IFFALSE 13813
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13765: LD_EXP 33
13769: PPUSH
13770: LD_STRING DK-1-delivery-3
13772: PPUSH
13773: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13777: LD_EXP 28
13781: PPUSH
13782: LD_STRING DH-2-delivery-3
13784: PPUSH
13785: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13789: LD_EXP 29
13793: PPUSH
13794: LD_STRING DG-1-delivery-3
13796: PPUSH
13797: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13801: LD_EXP 30
13805: PPUSH
13806: LD_STRING DM-1-delivery-3
13808: PPUSH
13809: CALL_OW 88
// end ; DialogueOff ;
13813: CALL_OW 7
// case Difficulty of 2 :
13817: LD_OWVAR 67
13821: PUSH
13822: LD_INT 2
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13830
13828: GO 13848
13830: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
13831: LD_STRING Crates3
13833: PPUSH
13834: CALL_OW 337
// farmerRequestedCrates := 900 ;
13838: LD_ADDR_EXP 16
13842: PUSH
13843: LD_INT 900
13845: ST_TO_ADDR
// end ; 3 :
13846: GO 13901
13848: LD_INT 3
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 13874
13856: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
13857: LD_STRING Crates4
13859: PPUSH
13860: CALL_OW 337
// farmerRequestedCrates := 1200 ;
13864: LD_ADDR_EXP 16
13868: PUSH
13869: LD_INT 1200
13871: ST_TO_ADDR
// end ; 4 :
13872: GO 13901
13874: LD_INT 4
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 13900
13882: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
13883: LD_STRING Crates5
13885: PPUSH
13886: CALL_OW 337
// farmerRequestedCrates := 1400 ;
13890: LD_ADDR_EXP 16
13894: PUSH
13895: LD_INT 1400
13897: ST_TO_ADDR
// end ; end ;
13898: GO 13901
13900: POP
// farmerCratesCounter := 30 30$00 ;
13901: LD_ADDR_EXP 17
13905: PUSH
13906: LD_INT 63000
13908: ST_TO_ADDR
// end ;
13909: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
13910: LD_EXP 4
13914: PUSH
13915: LD_EXP 15
13919: PUSH
13920: LD_INT 600
13922: PUSH
13923: LD_INT 900
13925: PUSH
13926: LD_INT 1200
13928: PUSH
13929: LD_INT 1400
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: LD_OWVAR 67
13942: ARRAY
13943: GREATEREQUAL
13944: AND
13945: IFFALSE 14031
13947: GO 13949
13949: DISABLE
// begin retreatAllowed := true ;
13950: LD_ADDR_EXP 11
13954: PUSH
13955: LD_INT 1
13957: ST_TO_ADDR
// display_strings := [ ] ;
13958: LD_ADDR_OWVAR 47
13962: PUSH
13963: EMPTY
13964: ST_TO_ADDR
// DialogueOn ;
13965: CALL_OW 6
// InGameOn ;
13969: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13973: LD_EXP 37
13977: PPUSH
13978: LD_STRING DO-radio-end
13980: PPUSH
13981: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13985: LD_EXP 28
13989: PPUSH
13990: LD_STRING DH-1-radio-end
13992: PPUSH
13993: CALL_OW 88
// InGameOff ;
13997: CALL_OW 9
// DialogueOff ;
14001: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14005: LD_STRING Retreat
14007: PPUSH
14008: CALL_OW 337
// wait ( 0 0$2 ) ;
14012: LD_INT 70
14014: PPUSH
14015: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14019: LD_EXP 28
14023: PPUSH
14024: LD_STRING DH-2-radio-end
14026: PPUSH
14027: CALL_OW 88
// end ;
14031: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14032: LD_EXP 11
14036: IFFALSE 14167
14038: GO 14040
14040: DISABLE
14041: LD_INT 0
14043: PPUSH
14044: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14045: LD_INT 10
14047: PPUSH
14048: LD_INT 0
14050: PPUSH
14051: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14055: LD_ADDR_VAR 0 1
14059: PUSH
14060: LD_EXP 39
14064: PPUSH
14065: LD_INT 25
14067: PUSH
14068: LD_INT 2
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PPUSH
14075: CALL_OW 72
14079: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14080: LD_VAR 0 1
14084: PUSH
14085: LD_INT 102
14087: PPUSH
14088: LD_INT 69
14090: PPUSH
14091: CALL_OW 428
14095: PUSH
14096: LD_INT 0
14098: EQUAL
14099: AND
14100: IFFALSE 14167
// begin for i in tmp do
14102: LD_ADDR_VAR 0 2
14106: PUSH
14107: LD_VAR 0 1
14111: PUSH
14112: FOR_IN
14113: IFFALSE 14137
// if IsInUnit ( i ) then
14115: LD_VAR 0 2
14119: PPUSH
14120: CALL_OW 310
14124: IFFALSE 14135
// ComExitBuilding ( i ) ;
14126: LD_VAR 0 2
14130: PPUSH
14131: CALL_OW 122
14135: GO 14112
14137: POP
14138: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14139: LD_VAR 0 1
14143: PPUSH
14144: LD_INT 31
14146: PPUSH
14147: LD_INT 102
14149: PPUSH
14150: LD_INT 69
14152: PPUSH
14153: LD_INT 2
14155: PPUSH
14156: CALL_OW 205
// wait ( 0 0$3 ) ;
14160: LD_INT 105
14162: PPUSH
14163: CALL_OW 67
// end ; end ;
14167: PPOPN 2
14169: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14170: LD_EXP 11
14174: NOT
14175: PUSH
14176: LD_INT 5
14178: PPUSH
14179: CALL_OW 301
14183: AND
14184: IFFALSE 14216
14186: GO 14188
14188: DISABLE
// begin DialogueOn ;
14189: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14193: LD_EXP 36
14197: PPUSH
14198: LD_STRING DF-1-failure
14200: PPUSH
14201: CALL_OW 94
// DialogueOff ;
14205: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14209: LD_STRING FarmerDepot
14211: PPUSH
14212: CALL_OW 104
// end ;
14216: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14217: LD_EXP 11
14221: PUSH
14222: LD_EXP 28
14226: PPUSH
14227: LD_EXP 36
14231: PPUSH
14232: CALL_OW 296
14236: PUSH
14237: LD_INT 12
14239: LESS
14240: AND
14241: PUSH
14242: LD_INT 81
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 21
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: NOT
14271: AND
14272: IFFALSE 14956
14274: GO 14276
14276: DISABLE
14277: LD_INT 0
14279: PPUSH
14280: PPUSH
14281: PPUSH
// begin allowConvoys := false ;
14282: LD_ADDR_EXP 12
14286: PUSH
14287: LD_INT 0
14289: ST_TO_ADDR
// InGameOn ;
14290: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14294: LD_EXP 28
14298: PPUSH
14299: LD_EXP 36
14303: PPUSH
14304: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14308: LD_EXP 36
14312: PPUSH
14313: LD_EXP 28
14317: PPUSH
14318: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14322: LD_EXP 36
14326: PPUSH
14327: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14331: LD_EXP 28
14335: PPUSH
14336: LD_STRING DH-1-end
14338: PPUSH
14339: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14343: LD_EXP 36
14347: PPUSH
14348: LD_STRING DF-1-end
14350: PPUSH
14351: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14355: LD_EXP 36
14359: PPUSH
14360: LD_STRING DF-2-end
14362: PPUSH
14363: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14367: LD_EXP 28
14371: PPUSH
14372: LD_STRING DH-2-end
14374: PPUSH
14375: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14379: LD_EXP 36
14383: PPUSH
14384: LD_STRING DF-3-end
14386: PPUSH
14387: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14391: LD_EXP 28
14395: PPUSH
14396: LD_STRING DH-3-end
14398: PPUSH
14399: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14403: LD_EXP 29
14407: PPUSH
14408: LD_STRING DG-1-end
14410: PPUSH
14411: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14415: LD_EXP 28
14419: PPUSH
14420: LD_STRING DH-4-end
14422: PPUSH
14423: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14427: LD_EXP 36
14431: PPUSH
14432: LD_STRING DF-4-end
14434: PPUSH
14435: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14439: LD_EXP 28
14443: PPUSH
14444: LD_STRING DH-5-end
14446: PPUSH
14447: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14451: LD_EXP 36
14455: PPUSH
14456: LD_STRING DF-5-end
14458: PPUSH
14459: CALL_OW 88
// InGameOff ;
14463: CALL_OW 9
// allowCargoEvacuation := true ;
14467: LD_ADDR_EXP 7
14471: PUSH
14472: LD_INT 1
14474: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14475: LD_ADDR_VAR 0 2
14479: PUSH
14480: LD_INT 4
14482: PUSH
14483: LD_INT 3
14485: PUSH
14486: LD_INT 2
14488: PUSH
14489: LD_INT 1
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: PUSH
14498: LD_OWVAR 67
14502: ARRAY
14503: ST_TO_ADDR
// if farmerSquad < max then
14504: LD_EXP 39
14508: PUSH
14509: LD_VAR 0 2
14513: LESS
14514: IFFALSE 14526
// max := farmerSquad ;
14516: LD_ADDR_VAR 0 2
14520: PUSH
14521: LD_EXP 39
14525: ST_TO_ADDR
// for i := 1 to max do
14526: LD_ADDR_VAR 0 1
14530: PUSH
14531: DOUBLE
14532: LD_INT 1
14534: DEC
14535: ST_TO_ADDR
14536: LD_VAR 0 2
14540: PUSH
14541: FOR_TO
14542: IFFALSE 14580
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14544: LD_EXP 39
14548: PUSH
14549: LD_INT 1
14551: ARRAY
14552: PPUSH
14553: LD_INT 2
14555: PPUSH
14556: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14560: LD_ADDR_EXP 39
14564: PUSH
14565: LD_EXP 39
14569: PPUSH
14570: LD_INT 1
14572: PPUSH
14573: CALL_OW 3
14577: ST_TO_ADDR
// end ;
14578: GO 14541
14580: POP
14581: POP
// for i in Farmer ^ farmerSquad do
14582: LD_ADDR_VAR 0 1
14586: PUSH
14587: LD_EXP 36
14591: PUSH
14592: LD_EXP 39
14596: ADD
14597: PUSH
14598: FOR_IN
14599: IFFALSE 14638
// begin if IsInUnit ( i ) then
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 310
14610: IFFALSE 14621
// ComExitBuilding ( i ) ;
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_INT 102
14628: PPUSH
14629: LD_INT 7
14631: PPUSH
14632: CALL_OW 171
// end ;
14636: GO 14598
14638: POP
14639: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14640: LD_ADDR_VAR 0 1
14644: PUSH
14645: LD_INT 22
14647: PUSH
14648: LD_INT 5
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 21
14657: PUSH
14658: LD_INT 3
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PPUSH
14669: CALL_OW 69
14673: PUSH
14674: LD_INT 5
14676: DIFF
14677: PUSH
14678: FOR_IN
14679: IFFALSE 14695
// SetSide ( i , 2 ) ;
14681: LD_VAR 0 1
14685: PPUSH
14686: LD_INT 2
14688: PPUSH
14689: CALL_OW 235
14693: GO 14678
14695: POP
14696: POP
// wait ( 0 0$2 ) ;
14697: LD_INT 70
14699: PPUSH
14700: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14704: LD_EXP 28
14708: PPUSH
14709: LD_STRING DH-6-end
14711: PPUSH
14712: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14716: LD_INT 35
14718: PPUSH
14719: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14723: LD_ADDR_VAR 0 3
14727: PUSH
14728: LD_EXP 36
14732: PUSH
14733: LD_EXP 39
14737: ADD
14738: PPUSH
14739: LD_INT 95
14741: PUSH
14742: LD_INT 3
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PPUSH
14749: CALL_OW 72
14753: ST_TO_ADDR
// if tmp then
14754: LD_VAR 0 3
14758: IFFALSE 14802
// for i in tmp do
14760: LD_ADDR_VAR 0 1
14764: PUSH
14765: LD_VAR 0 3
14769: PUSH
14770: FOR_IN
14771: IFFALSE 14800
// begin farmerSquad := farmerSquad diff i ;
14773: LD_ADDR_EXP 39
14777: PUSH
14778: LD_EXP 39
14782: PUSH
14783: LD_VAR 0 1
14787: DIFF
14788: ST_TO_ADDR
// RemoveUnit ( i ) ;
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 64
// end ;
14798: GO 14770
14800: POP
14801: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14802: LD_EXP 39
14806: PUSH
14807: EMPTY
14808: EQUAL
14809: PUSH
14810: LD_EXP 36
14814: PPUSH
14815: CALL_OW 305
14819: NOT
14820: AND
14821: IFFALSE 14716
// if farmerHumanLoseCounter = 0 then
14823: LD_EXP 20
14827: PUSH
14828: LD_INT 0
14830: EQUAL
14831: IFFALSE 14840
// SetAchievement ( ACH_BABY ) ;
14833: LD_STRING ACH_BABY
14835: PPUSH
14836: CALL_OW 543
// wait ( 1 1$00 ) ;
14840: LD_INT 2100
14842: PPUSH
14843: CALL_OW 67
// SendAttack ;
14847: CALL 6180 0 0
// Say ( Heike , DH-7-end ) ;
14851: LD_EXP 28
14855: PPUSH
14856: LD_STRING DH-7-end
14858: PPUSH
14859: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
14863: LD_ADDR_VAR 0 1
14867: PUSH
14868: DOUBLE
14869: LD_INT 1
14871: DEC
14872: ST_TO_ADDR
14873: LD_INT 2
14875: PUSH
14876: LD_INT 3
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: LD_INT 4
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: PUSH
14891: LD_OWVAR 67
14895: ARRAY
14896: PUSH
14897: FOR_TO
14898: IFFALSE 14954
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14900: LD_INT 4200
14902: PUSH
14903: LD_INT 3500
14905: PUSH
14906: LD_INT 3150
14908: PUSH
14909: LD_INT 2800
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: PUSH
14918: LD_OWVAR 67
14922: ARRAY
14923: PPUSH
14924: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
14928: LD_EXP 11
14932: PUSH
14933: LD_EXP 21
14937: PUSH
14938: LD_INT 1
14940: LESS
14941: AND
14942: IFFALSE 14948
// exit ;
14944: POP
14945: POP
14946: GO 14956
// SendAttack ;
14948: CALL 6180 0 0
// end ;
14952: GO 14897
14954: POP
14955: POP
// end ;
14956: PPOPN 3
14958: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14959: LD_EXP 7
14963: PUSH
14964: LD_EXP 21
14968: PUSH
14969: LD_INT 0
14971: GREATER
14972: AND
14973: IFFALSE 14983
14975: GO 14977
14977: DISABLE
// begin enable ;
14978: ENABLE
// CargoEvacuation ;
14979: CALL 3651 0 0
// end ;
14983: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14984: LD_EXP 17
14988: PUSH
14989: LD_INT 18900
14991: LESSEQUAL
14992: IFFALSE 15041
14994: GO 14996
14996: DISABLE
// begin DialogueOn ;
14997: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15001: LD_EXP 36
15005: PPUSH
15006: LD_STRING DF-1-distribution-a
15008: PPUSH
15009: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15013: LD_EXP 28
15017: PPUSH
15018: LD_STRING DH-1-distribution-a
15020: PPUSH
15021: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15025: LD_EXP 36
15029: PPUSH
15030: LD_STRING DF-2-distribution-a
15032: PPUSH
15033: CALL_OW 94
// DialogueOff ;
15037: CALL_OW 7
// end ;
15041: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15042: LD_EXP 17
15046: PUSH
15047: LD_INT 0
15049: LESSEQUAL
15050: IFFALSE 15082
15052: GO 15054
15054: DISABLE
// begin DialogueOn ;
15055: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15059: LD_EXP 36
15063: PPUSH
15064: LD_STRING DF-3-distribution-a
15066: PPUSH
15067: CALL_OW 94
// YouLost ( Distribution ) ;
15071: LD_STRING Distribution
15073: PPUSH
15074: CALL_OW 104
// DialogueOff ;
15078: CALL_OW 7
// end ;
15082: END
// every 0 0$1 trigger vehCounter >= 2 do
15083: LD_EXP 22
15087: PUSH
15088: LD_INT 2
15090: GREATEREQUAL
15091: IFFALSE 15103
15093: GO 15095
15095: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15096: LD_STRING VehConstructed
15098: PPUSH
15099: CALL_OW 337
15103: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15104: LD_INT 22
15106: PUSH
15107: LD_INT 2
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 34
15116: PUSH
15117: LD_INT 12
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PPUSH
15128: CALL_OW 69
15132: IFFALSE 15192
15134: GO 15136
15136: DISABLE
// begin DialogueOn ;
15137: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15141: LD_EXP 28
15145: PPUSH
15146: LD_STRING DH-1-truck
15148: PPUSH
15149: CALL_OW 88
// if IsOk ( Markov ) then
15153: LD_EXP 35
15157: PPUSH
15158: CALL_OW 302
15162: IFFALSE 15188
// begin Say ( Markov , DMar-1-truck ) ;
15164: LD_EXP 35
15168: PPUSH
15169: LD_STRING DMar-1-truck
15171: PPUSH
15172: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15176: LD_EXP 28
15180: PPUSH
15181: LD_STRING DH-2-truck
15183: PPUSH
15184: CALL_OW 88
// end ; DialogueOff ;
15188: CALL_OW 7
// end ;
15192: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15193: LD_INT 0
15195: PPUSH
15196: PPUSH
15197: PPUSH
// if IsOk ( Givi ) then
15198: LD_EXP 29
15202: PPUSH
15203: CALL_OW 302
15207: IFFALSE 15223
// begin Say ( Givi , DG-1-nocargo ) ;
15209: LD_EXP 29
15213: PPUSH
15214: LD_STRING DG-1-nocargo
15216: PPUSH
15217: CALL_OW 88
// exit ;
15221: GO 15319
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_EXP 42
15232: PPUSH
15233: LD_INT 26
15235: PUSH
15236: LD_INT 1
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PPUSH
15243: CALL_OW 72
15247: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15248: LD_ADDR_VAR 0 3
15252: PUSH
15253: LD_EXP 42
15257: PPUSH
15258: LD_INT 26
15260: PUSH
15261: LD_INT 2
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PPUSH
15268: CALL_OW 72
15272: ST_TO_ADDR
// if randomMen then
15273: LD_VAR 0 2
15277: IFFALSE 15297
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15279: LD_VAR 0 2
15283: PUSH
15284: LD_INT 1
15286: ARRAY
15287: PPUSH
15288: LD_STRING DArm-1-nocargo
15290: PPUSH
15291: CALL_OW 88
15295: GO 15319
// if randomWomen then
15297: LD_VAR 0 3
15301: IFFALSE 15319
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15303: LD_VAR 0 3
15307: PUSH
15308: LD_INT 1
15310: ARRAY
15311: PPUSH
15312: LD_STRING DArf-1-nocargo
15314: PPUSH
15315: CALL_OW 88
// end ;
15319: LD_VAR 0 1
15323: RET
// export function IncomingAttack ; begin
15324: LD_INT 0
15326: PPUSH
// if attackWave = 1 then
15327: LD_EXP 19
15331: PUSH
15332: LD_INT 1
15334: EQUAL
15335: IFFALSE 15406
// begin DialogueOn ;
15337: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15341: LD_EXP 37
15345: PPUSH
15346: LD_STRING DO-1-radio-1
15348: PPUSH
15349: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15353: LD_EXP 28
15357: PPUSH
15358: LD_STRING DH-1-radio-1-
15360: PPUSH
15361: CALL_OW 88
// if IsOk ( Markov ) then
15365: LD_EXP 35
15369: PPUSH
15370: CALL_OW 302
15374: IFFALSE 15400
// begin Say ( Markov , DMar-1-radio-1 ) ;
15376: LD_EXP 35
15380: PPUSH
15381: LD_STRING DMar-1-radio-1
15383: PPUSH
15384: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15388: LD_EXP 28
15392: PPUSH
15393: LD_STRING DH-2-radio-1
15395: PPUSH
15396: CALL_OW 88
// end ; DialogueOff ;
15400: CALL_OW 7
// end else
15404: GO 15430
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15406: LD_EXP 37
15410: PPUSH
15411: LD_STRING DO-1-radio-u
15413: PPUSH
15414: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15418: LD_EXP 28
15422: PPUSH
15423: LD_STRING DH-1-radio-u
15425: PPUSH
15426: CALL_OW 88
// end ; end ;
15430: LD_VAR 0 1
15434: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15435: LD_EXP 44
15439: PPUSH
15440: LD_INT 95
15442: PUSH
15443: LD_INT 8
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PPUSH
15450: CALL_OW 72
15454: IFFALSE 15557
15456: GO 15458
15458: DISABLE
15459: LD_INT 0
15461: PPUSH
// begin enable ;
15462: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15463: LD_ADDR_VAR 0 1
15467: PUSH
15468: LD_EXP 44
15472: PPUSH
15473: LD_INT 95
15475: PUSH
15476: LD_INT 8
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 72
15487: PUSH
15488: FOR_IN
15489: IFFALSE 15518
// begin usForces := usForces diff i ;
15491: LD_ADDR_EXP 44
15495: PUSH
15496: LD_EXP 44
15500: PUSH
15501: LD_VAR 0 1
15505: DIFF
15506: ST_TO_ADDR
// RemoveUnit ( i ) ;
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 64
// end ;
15516: GO 15488
15518: POP
15519: POP
// if not americanHasEscaped and attackWave = 1 then
15520: LD_EXP 8
15524: NOT
15525: PUSH
15526: LD_EXP 19
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: AND
15535: IFFALSE 15557
// begin americanHasEscaped := true ;
15537: LD_ADDR_EXP 8
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15545: LD_EXP 28
15549: PPUSH
15550: LD_STRING DH-2-assault-a
15552: PPUSH
15553: CALL_OW 88
// end ; end ;
15557: PPOPN 1
15559: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15560: LD_INT 4
15562: PPUSH
15563: LD_INT 22
15565: PUSH
15566: LD_INT 1
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PPUSH
15573: CALL_OW 70
15577: PUSH
15578: LD_EXP 11
15582: NOT
15583: AND
15584: IFFALSE 15601
15586: GO 15588
15588: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15589: LD_EXP 36
15593: PPUSH
15594: LD_STRING DF-1-attack
15596: PPUSH
15597: CALL_OW 94
15601: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15602: LD_INT 5
15604: PPUSH
15605: CALL_OW 255
15609: PUSH
15610: LD_INT 2
15612: EQUAL
15613: IFFALSE 15629
15615: GO 15617
15617: DISABLE
// begin enable ;
15618: ENABLE
// SetSide ( arDepot , 5 ) ;
15619: LD_INT 5
15621: PPUSH
15622: LD_INT 5
15624: PPUSH
15625: CALL_OW 235
// end ;
15629: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15630: LD_INT 22
15632: PUSH
15633: LD_INT 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: NOT
15659: PUSH
15660: LD_INT 22
15662: PUSH
15663: LD_INT 4
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PPUSH
15670: CALL_OW 69
15674: NOT
15675: AND
15676: PUSH
15677: LD_EXP 11
15681: NOT
15682: AND
15683: PUSH
15684: LD_EXP 15
15688: PUSH
15689: LD_INT 90
15691: GREATER
15692: AND
15693: PUSH
15694: LD_INT 7
15696: PPUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 2
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 21
15709: PUSH
15710: LD_INT 1
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 70
15725: AND
15726: PUSH
15727: LD_INT 22
15729: PUSH
15730: LD_INT 2
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 50
15739: PUSH
15740: EMPTY
15741: LIST
15742: PUSH
15743: LD_INT 30
15745: PUSH
15746: LD_INT 0
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: PPUSH
15758: CALL_OW 69
15762: AND
15763: IFFALSE 16556
15765: GO 15767
15767: DISABLE
15768: LD_INT 0
15770: PPUSH
15771: PPUSH
15772: PPUSH
15773: PPUSH
15774: PPUSH
// begin depot := usDepot ;
15775: LD_ADDR_VAR 0 5
15779: PUSH
15780: LD_INT 11
15782: ST_TO_ADDR
// if not depot then
15783: LD_VAR 0 5
15787: NOT
15788: IFFALSE 15828
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15790: LD_ADDR_VAR 0 5
15794: PUSH
15795: LD_INT 22
15797: PUSH
15798: LD_INT 2
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 30
15807: PUSH
15808: LD_INT 0
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PPUSH
15819: CALL_OW 69
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15828: LD_ADDR_VAR 0 1
15832: PUSH
15833: LD_EXP 42
15837: PPUSH
15838: LD_INT 26
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PPUSH
15848: CALL_OW 72
15852: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15853: LD_ADDR_VAR 0 2
15857: PUSH
15858: LD_EXP 42
15862: PPUSH
15863: LD_INT 26
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PPUSH
15873: CALL_OW 72
15877: ST_TO_ADDR
// if IsOk ( Kaia ) then
15878: LD_EXP 33
15882: PPUSH
15883: CALL_OW 302
15887: IFFALSE 15908
// speaker := [ Kaia , DK ] else
15889: LD_ADDR_VAR 0 3
15893: PUSH
15894: LD_EXP 33
15898: PUSH
15899: LD_STRING DK
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: ST_TO_ADDR
15906: GO 15988
// if randomMen then
15908: LD_VAR 0 1
15912: IFFALSE 15947
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15914: LD_ADDR_VAR 0 3
15918: PUSH
15919: LD_VAR 0 1
15923: PUSH
15924: LD_INT 1
15926: PPUSH
15927: LD_VAR 0 1
15931: PPUSH
15932: CALL_OW 12
15936: ARRAY
15937: PUSH
15938: LD_STRING DArm
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: ST_TO_ADDR
15945: GO 15988
// if randomWomen then
15947: LD_VAR 0 2
15951: IFFALSE 15986
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15953: LD_ADDR_VAR 0 3
15957: PUSH
15958: LD_VAR 0 2
15962: PUSH
15963: LD_INT 1
15965: PPUSH
15966: LD_VAR 0 2
15970: PPUSH
15971: CALL_OW 12
15975: ARRAY
15976: PUSH
15977: LD_STRING DArf
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: ST_TO_ADDR
15984: GO 15988
// exit ;
15986: GO 16556
// if IsInUnit ( speaker [ 1 ] ) then
15988: LD_VAR 0 3
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: PPUSH
15997: CALL_OW 310
16001: IFFALSE 16024
// place := IsInUnit ( speaker [ 1 ] ) else
16003: LD_ADDR_VAR 0 4
16007: PUSH
16008: LD_VAR 0 3
16012: PUSH
16013: LD_INT 1
16015: ARRAY
16016: PPUSH
16017: CALL_OW 310
16021: ST_TO_ADDR
16022: GO 16038
// place := speaker [ 1 ] ;
16024: LD_ADDR_VAR 0 4
16028: PUSH
16029: LD_VAR 0 3
16033: PUSH
16034: LD_INT 1
16036: ARRAY
16037: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16038: LD_VAR 0 4
16042: PPUSH
16043: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16047: LD_VAR 0 4
16051: PPUSH
16052: CALL_OW 250
16056: PPUSH
16057: LD_VAR 0 4
16061: PPUSH
16062: CALL_OW 251
16066: PPUSH
16067: CALL 2138 0 2
// wait ( 0 0$2 ) ;
16071: LD_INT 70
16073: PPUSH
16074: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16078: LD_EXP 38
16082: PPUSH
16083: CALL_OW 305
16087: NOT
16088: IFFALSE 16092
// exit ;
16090: GO 16556
// allowConvoys := false ;
16092: LD_ADDR_EXP 12
16096: PUSH
16097: LD_INT 0
16099: ST_TO_ADDR
// InGameOn ;
16100: CALL_OW 8
// wait ( 0 0$1 ) ;
16104: LD_INT 35
16106: PPUSH
16107: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16111: LD_EXP 38
16115: PPUSH
16116: LD_STRING DI-1-land
16118: PPUSH
16119: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16123: LD_VAR 0 3
16127: PUSH
16128: LD_INT 1
16130: ARRAY
16131: PPUSH
16132: CALL_OW 310
16136: IFFALSE 16151
// ComExit ( speaker [ 1 ] ) ;
16138: LD_VAR 0 3
16142: PUSH
16143: LD_INT 1
16145: ARRAY
16146: PPUSH
16147: CALL 77621 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16151: LD_VAR 0 3
16155: PUSH
16156: LD_INT 1
16158: ARRAY
16159: PPUSH
16160: LD_EXP 38
16164: PPUSH
16165: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16169: LD_VAR 0 3
16173: PUSH
16174: LD_INT 1
16176: ARRAY
16177: PPUSH
16178: LD_EXP 38
16182: PPUSH
16183: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16187: LD_EXP 38
16191: PPUSH
16192: LD_VAR 0 3
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: PPUSH
16201: CALL_OW 119
// wait ( 0 0$1 ) ;
16205: LD_INT 35
16207: PPUSH
16208: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16212: LD_VAR 0 3
16216: PUSH
16217: LD_INT 1
16219: ARRAY
16220: PPUSH
16221: LD_VAR 0 3
16225: PUSH
16226: LD_INT 2
16228: ARRAY
16229: PUSH
16230: LD_STRING -1-land
16232: STR
16233: PPUSH
16234: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16238: LD_EXP 38
16242: PPUSH
16243: LD_STRING DI-2-land
16245: PPUSH
16246: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 1
16257: ARRAY
16258: PPUSH
16259: LD_VAR 0 3
16263: PUSH
16264: LD_INT 2
16266: ARRAY
16267: PUSH
16268: LD_STRING -2-land
16270: STR
16271: PPUSH
16272: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16276: LD_VAR 0 3
16280: PUSH
16281: LD_INT 1
16283: ARRAY
16284: PPUSH
16285: LD_VAR 0 3
16289: PUSH
16290: LD_INT 2
16292: ARRAY
16293: PUSH
16294: LD_STRING -3-land
16296: STR
16297: PPUSH
16298: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16302: LD_EXP 28
16306: PPUSH
16307: LD_STRING DH-1-land
16309: PPUSH
16310: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16314: LD_VAR 0 5
16318: PPUSH
16319: CALL_OW 313
16323: PUSH
16324: LD_INT 6
16326: EQUAL
16327: IFFALSE 16347
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16329: LD_VAR 0 5
16333: PPUSH
16334: CALL_OW 313
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16347: LD_EXP 38
16351: PPUSH
16352: LD_INT 2
16354: PPUSH
16355: CALL_OW 235
// CenterOnUnits ( depot ) ;
16359: LD_VAR 0 5
16363: PPUSH
16364: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16368: LD_EXP 38
16372: PPUSH
16373: LD_VAR 0 5
16377: PPUSH
16378: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16382: LD_VAR 0 3
16386: PUSH
16387: LD_INT 1
16389: ARRAY
16390: PPUSH
16391: LD_VAR 0 5
16395: PPUSH
16396: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16400: LD_INT 35
16402: PPUSH
16403: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16407: LD_EXP 38
16411: PPUSH
16412: CALL_OW 310
16416: PUSH
16417: LD_EXP 38
16421: PPUSH
16422: CALL_OW 302
16426: NOT
16427: OR
16428: PUSH
16429: LD_VAR 0 5
16433: PPUSH
16434: CALL_OW 302
16438: NOT
16439: OR
16440: IFFALSE 16400
// InGameOff ;
16442: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16446: LD_EXP 38
16450: PPUSH
16451: CALL_OW 302
16455: NOT
16456: IFFALSE 16460
// exit ;
16458: GO 16556
// if not IsOk ( depot ) then
16460: LD_VAR 0 5
16464: PPUSH
16465: CALL_OW 302
16469: NOT
16470: IFFALSE 16533
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16472: LD_EXP 38
16476: PPUSH
16477: LD_INT 30
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16487: LD_INT 35
16489: PPUSH
16490: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16494: LD_EXP 38
16498: PPUSH
16499: LD_INT 30
16501: PPUSH
16502: LD_INT 1
16504: PPUSH
16505: CALL_OW 307
16509: PUSH
16510: LD_EXP 38
16514: PPUSH
16515: CALL_OW 301
16519: OR
16520: IFFALSE 16487
// RemoveUnit ( Ibrahim ) ;
16522: LD_EXP 38
16526: PPUSH
16527: CALL_OW 64
// exit ;
16531: GO 16556
// end ; ibrahimInDepot := true ;
16533: LD_ADDR_EXP 25
16537: PUSH
16538: LD_INT 1
16540: ST_TO_ADDR
// allowConvoys := true ;
16541: LD_ADDR_EXP 12
16545: PUSH
16546: LD_INT 1
16548: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16549: LD_STRING IbrahimInDepot
16551: PPUSH
16552: CALL_OW 97
// end ;
16556: PPOPN 5
16558: END
// export function IbrahimQuery ; begin
16559: LD_INT 0
16561: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16562: LD_STRING IbrahimQuery
16564: PPUSH
16565: CALL_OW 97
16569: PUSH
16570: LD_INT 1
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 16940
16578: POP
// begin allowConvoys := false ;
16579: LD_ADDR_EXP 12
16583: PUSH
16584: LD_INT 0
16586: ST_TO_ADDR
// ibrahimInDepot := false ;
16587: LD_ADDR_EXP 25
16591: PUSH
16592: LD_INT 0
16594: ST_TO_ADDR
// InGameOn ;
16595: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16599: LD_EXP 28
16603: PPUSH
16604: CALL_OW 87
// wait ( 0 0$1 ) ;
16608: LD_INT 35
16610: PPUSH
16611: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16615: LD_EXP 28
16619: PPUSH
16620: LD_STRING DH-1-interrogation
16622: PPUSH
16623: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16627: LD_EXP 38
16631: PPUSH
16632: LD_STRING DI-1-interrogation
16634: PPUSH
16635: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16639: LD_EXP 28
16643: PPUSH
16644: LD_STRING DH-2-interrogation
16646: PPUSH
16647: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16651: LD_EXP 38
16655: PPUSH
16656: LD_STRING DI-2-interrogation
16658: PPUSH
16659: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16663: LD_EXP 28
16667: PPUSH
16668: LD_STRING DH-3-interrogation
16670: PPUSH
16671: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16675: LD_EXP 38
16679: PPUSH
16680: LD_STRING DI-3-interrogation
16682: PPUSH
16683: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16687: LD_EXP 28
16691: PPUSH
16692: LD_STRING DH-4-interrogation
16694: PPUSH
16695: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16699: LD_EXP 38
16703: PPUSH
16704: LD_STRING DI-4-interrogation
16706: PPUSH
16707: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16711: LD_EXP 28
16715: PPUSH
16716: LD_STRING DH-5-interrogation
16718: PPUSH
16719: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16723: LD_EXP 38
16727: PPUSH
16728: LD_STRING DI-5-interrogation
16730: PPUSH
16731: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16735: LD_INT 10
16737: PPUSH
16738: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16742: LD_EXP 28
16746: PPUSH
16747: LD_STRING DH-6-interrogation
16749: PPUSH
16750: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16754: LD_EXP 38
16758: PPUSH
16759: LD_STRING DI-6-interrogation
16761: PPUSH
16762: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16766: LD_EXP 38
16770: PPUSH
16771: LD_STRING DI-7-interrogation
16773: PPUSH
16774: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
16778: LD_EXP 28
16782: PPUSH
16783: LD_STRING DH-7-interrogation
16785: PPUSH
16786: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16790: LD_INT 10
16792: PPUSH
16793: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
16797: LD_EXP 28
16801: PPUSH
16802: LD_STRING DH-8-interrogation
16804: PPUSH
16805: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
16809: LD_EXP 38
16813: PPUSH
16814: LD_STRING DI-8-interrogation
16816: PPUSH
16817: CALL_OW 88
// wait ( 0 0$1 ) ;
16821: LD_INT 35
16823: PPUSH
16824: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16828: LD_STRING IbrahimDecisionQuery
16830: PPUSH
16831: CALL_OW 97
16835: PUSH
16836: LD_INT 1
16838: DOUBLE
16839: EQUAL
16840: IFTRUE 16844
16842: GO 16868
16844: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16845: LD_EXP 38
16849: PPUSH
16850: LD_STRING DI-1-kill
16852: PPUSH
16853: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16857: LD_EXP 38
16861: PPUSH
16862: CALL_OW 66
// end ; 2 :
16866: GO 16934
16868: LD_INT 2
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16933
16876: POP
// begin SetSide ( Ibrahim , 6 ) ;
16877: LD_EXP 38
16881: PPUSH
16882: LD_INT 6
16884: PPUSH
16885: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16889: LD_EXP 38
16893: PPUSH
16894: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16898: LD_EXP 38
16902: PPUSH
16903: LD_INT 66
16905: PPUSH
16906: LD_INT 2
16908: PPUSH
16909: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16913: LD_EXP 38
16917: PPUSH
16918: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16922: LD_EXP 28
16926: PPUSH
16927: CALL_OW 122
// end ; end ;
16931: GO 16934
16933: POP
// InGameOff ;
16934: CALL_OW 9
// end ; 2 :
16938: GO 16954
16940: LD_INT 2
16942: DOUBLE
16943: EQUAL
16944: IFTRUE 16948
16946: GO 16953
16948: POP
// exit ; end ;
16949: GO 17030
16951: GO 16954
16953: POP
// allowConvoys := true ;
16954: LD_ADDR_EXP 12
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16962: LD_INT 5250
16964: PPUSH
16965: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16969: LD_INT 35
16971: PPUSH
16972: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16976: LD_INT 81
16978: PUSH
16979: LD_INT 2
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 21
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 69
17004: NOT
17005: IFFALSE 16969
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17007: LD_EXP 38
17011: PPUSH
17012: LD_INT 34
17014: PPUSH
17015: LD_INT 21
17017: PPUSH
17018: CALL_OW 111
// ibrahimIsFree := true ;
17022: LD_ADDR_EXP 26
17026: PUSH
17027: LD_INT 1
17029: ST_TO_ADDR
// end ;
17030: LD_VAR 0 1
17034: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17035: LD_EXP 26
17039: PUSH
17040: LD_EXP 38
17044: PPUSH
17045: CALL_OW 302
17049: AND
17050: PUSH
17051: LD_INT 2
17053: PPUSH
17054: LD_EXP 38
17058: PPUSH
17059: CALL_OW 292
17063: AND
17064: IFFALSE 17831
17066: GO 17068
17068: DISABLE
17069: LD_INT 0
17071: PPUSH
17072: PPUSH
17073: PPUSH
17074: PPUSH
17075: PPUSH
17076: PPUSH
// begin wait ( 0 0$10 ) ;
17077: LD_INT 350
17079: PPUSH
17080: CALL_OW 67
// allowConvoys := false ;
17084: LD_ADDR_EXP 12
17088: PUSH
17089: LD_INT 0
17091: ST_TO_ADDR
// depot := usDepot ;
17092: LD_ADDR_VAR 0 4
17096: PUSH
17097: LD_INT 11
17099: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17100: LD_INT 11
17102: NOT
17103: PUSH
17104: LD_INT 22
17106: PUSH
17107: LD_INT 2
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 50
17116: PUSH
17117: EMPTY
17118: LIST
17119: PUSH
17120: LD_INT 30
17122: PUSH
17123: LD_INT 0
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: PPUSH
17135: CALL_OW 69
17139: AND
17140: IFFALSE 17187
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17142: LD_ADDR_VAR 0 4
17146: PUSH
17147: LD_INT 22
17149: PUSH
17150: LD_INT 2
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 50
17159: PUSH
17160: EMPTY
17161: LIST
17162: PUSH
17163: LD_INT 30
17165: PUSH
17166: LD_INT 0
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: PUSH
17183: LD_INT 1
17185: ARRAY
17186: ST_TO_ADDR
// InGameOn ;
17187: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17191: LD_EXP 38
17195: PPUSH
17196: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17200: LD_EXP 38
17204: PPUSH
17205: LD_STRING DI-1-free
17207: PPUSH
17208: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17212: LD_EXP 28
17216: PPUSH
17217: LD_EXP 38
17221: PPUSH
17222: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17226: LD_EXP 28
17230: PPUSH
17231: LD_STRING DH-1-free
17233: PPUSH
17234: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17238: LD_EXP 38
17242: PPUSH
17243: LD_EXP 28
17247: PPUSH
17248: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17252: LD_EXP 38
17256: PPUSH
17257: LD_STRING DI-2-free
17259: PPUSH
17260: CALL_OW 88
// changeClass := 0 ;
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17272: LD_STRING IbrahimJoinQuery
17274: PPUSH
17275: CALL_OW 97
17279: PUSH
17280: LD_INT 1
17282: DOUBLE
17283: EQUAL
17284: IFTRUE 17288
17286: GO 17299
17288: POP
// begin changeClass := 1 ;
17289: LD_ADDR_VAR 0 1
17293: PUSH
17294: LD_INT 1
17296: ST_TO_ADDR
// end ; 2 :
17297: GO 17539
17299: LD_INT 2
17301: DOUBLE
17302: EQUAL
17303: IFTRUE 17307
17305: GO 17459
17307: POP
// begin Say ( Heike , DH-1-decline ) ;
17308: LD_EXP 28
17312: PPUSH
17313: LD_STRING DH-1-decline
17315: PPUSH
17316: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17320: LD_EXP 38
17324: PPUSH
17325: LD_STRING DI-1-decline
17327: PPUSH
17328: CALL_OW 88
// InGameOff ;
17332: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17336: LD_EXP 38
17340: PPUSH
17341: LD_INT 30
17343: PPUSH
17344: LD_INT 1
17346: PPUSH
17347: CALL_OW 111
// p := 0 ;
17351: LD_ADDR_VAR 0 3
17355: PUSH
17356: LD_INT 0
17358: ST_TO_ADDR
// repeat p := p + 1 ;
17359: LD_ADDR_VAR 0 3
17363: PUSH
17364: LD_VAR 0 3
17368: PUSH
17369: LD_INT 1
17371: PLUS
17372: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17373: LD_INT 35
17375: PPUSH
17376: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17380: LD_EXP 38
17384: PPUSH
17385: LD_INT 30
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: CALL_OW 307
17395: PUSH
17396: LD_INT 22
17398: PUSH
17399: LD_INT 2
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 101
17408: PUSH
17409: LD_INT 6
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PPUSH
17420: CALL_OW 69
17424: NOT
17425: OR
17426: PUSH
17427: LD_VAR 0 3
17431: PUSH
17432: LD_INT 10
17434: GREATER
17435: OR
17436: IFFALSE 17359
// RemoveUnit ( Ibrahim ) ;
17438: LD_EXP 38
17442: PPUSH
17443: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17447: LD_INT 1
17449: PPUSH
17450: LD_STRING 03_IbrahimHasEscaped
17452: PPUSH
17453: CALL_OW 39
// end ; 3 :
17457: GO 17539
17459: LD_INT 3
17461: DOUBLE
17462: EQUAL
17463: IFTRUE 17467
17465: GO 17538
17467: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17468: LD_EXP 28
17472: PPUSH
17473: LD_STRING DH-1-radio-hq
17475: PPUSH
17476: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17480: LD_EXP 37
17484: PPUSH
17485: LD_STRING DO-1-radio-hq
17487: PPUSH
17488: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17492: LD_EXP 28
17496: PPUSH
17497: LD_STRING DH-2-radio-hq
17499: PPUSH
17500: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17504: LD_EXP 37
17508: PPUSH
17509: LD_STRING DO-2-radio-hq
17511: PPUSH
17512: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17516: LD_EXP 28
17520: PPUSH
17521: LD_STRING DH-3-radio-hq
17523: PPUSH
17524: CALL_OW 88
// changeClass := 1 ;
17528: LD_ADDR_VAR 0 1
17532: PUSH
17533: LD_INT 1
17535: ST_TO_ADDR
// end ; end ;
17536: GO 17539
17538: POP
// if changeClass then
17539: LD_VAR 0 1
17543: IFFALSE 17831
// begin Say ( Heike , DH-1-agree ) ;
17545: LD_EXP 28
17549: PPUSH
17550: LD_STRING DH-1-agree
17552: PPUSH
17553: CALL_OW 88
// if IsOk ( Givi ) then
17557: LD_EXP 29
17561: PPUSH
17562: CALL_OW 302
17566: IFFALSE 17604
// begin Say ( Givi , DG-1-agree ) ;
17568: LD_EXP 29
17572: PPUSH
17573: LD_STRING DG-1-agree
17575: PPUSH
17576: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17580: LD_EXP 28
17584: PPUSH
17585: LD_STRING DH-2-agree
17587: PPUSH
17588: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17592: LD_EXP 29
17596: PPUSH
17597: LD_STRING DG-2-agree
17599: PPUSH
17600: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17604: LD_VAR 0 4
17608: PPUSH
17609: CALL_OW 313
17613: PUSH
17614: LD_INT 6
17616: EQUAL
17617: IFFALSE 17637
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17619: LD_VAR 0 4
17623: PPUSH
17624: CALL_OW 313
17628: PUSH
17629: LD_INT 1
17631: ARRAY
17632: PPUSH
17633: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17637: LD_EXP 38
17641: PPUSH
17642: LD_INT 2
17644: PPUSH
17645: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17649: LD_ADDR_VAR 0 5
17653: PUSH
17654: LD_EXP 38
17658: PPUSH
17659: CALL_OW 250
17663: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17664: LD_ADDR_VAR 0 6
17668: PUSH
17669: LD_EXP 38
17673: PPUSH
17674: CALL_OW 251
17678: ST_TO_ADDR
// if depot then
17679: LD_VAR 0 4
17683: IFFALSE 17732
// begin ComEnterUnit ( Ibrahim , depot ) ;
17685: LD_EXP 38
17689: PPUSH
17690: LD_VAR 0 4
17694: PPUSH
17695: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17699: LD_INT 35
17701: PPUSH
17702: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17706: LD_EXP 38
17710: PPUSH
17711: CALL_OW 310
17715: IFFALSE 17699
// b := IsInUnit ( Ibrahim ) ;
17717: LD_ADDR_VAR 0 2
17721: PUSH
17722: LD_EXP 38
17726: PPUSH
17727: CALL_OW 310
17731: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17732: LD_EXP 38
17736: PPUSH
17737: CALL_OW 64
// uc_side := 2 ;
17741: LD_ADDR_OWVAR 20
17745: PUSH
17746: LD_INT 2
17748: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17749: LD_ADDR_EXP 38
17753: PUSH
17754: LD_STRING Ibrahim
17756: PPUSH
17757: LD_INT 0
17759: PPUSH
17760: LD_STRING 
17762: PPUSH
17763: CALL 39822 0 3
17767: ST_TO_ADDR
// if depot then
17768: LD_VAR 0 4
17772: IFFALSE 17790
// PlaceHumanInUnit ( Ibrahim , b ) else
17774: LD_EXP 38
17778: PPUSH
17779: LD_VAR 0 2
17783: PPUSH
17784: CALL_OW 52
17788: GO 17812
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17790: LD_EXP 38
17794: PPUSH
17795: LD_VAR 0 5
17799: PPUSH
17800: LD_VAR 0 6
17804: PPUSH
17805: LD_INT 0
17807: PPUSH
17808: CALL_OW 48
// InGameOff ;
17812: CALL_OW 9
// allowConvoys := true ;
17816: LD_ADDR_EXP 12
17820: PUSH
17821: LD_INT 1
17823: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17824: LD_STRING ACH_IBRAHIM
17826: PPUSH
17827: CALL_OW 543
// end ; end ;
17831: PPOPN 6
17833: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17834: LD_EXP 33
17838: PPUSH
17839: CALL_OW 256
17843: PUSH
17844: LD_INT 3
17846: LESS
17847: IFFALSE 17914
17849: GO 17851
17851: DISABLE
// begin DialogueOn ;
17852: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17856: LD_EXP 33
17860: PPUSH
17861: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17865: LD_EXP 33
17869: PPUSH
17870: LD_STRING DK-keydeath-1
17872: PPUSH
17873: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17877: LD_EXP 28
17881: PPUSH
17882: LD_STRING DH-keydeath-2
17884: PPUSH
17885: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17889: LD_EXP 28
17893: PPUSH
17894: LD_STRING DH-keydeath-3
17896: PPUSH
17897: CALL_OW 88
// DialogueOff ;
17901: CALL_OW 7
// KillUnit ( Kaia ) ;
17905: LD_EXP 33
17909: PPUSH
17910: CALL_OW 66
// end ;
17914: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17915: LD_EXP 11
17919: PUSH
17920: LD_EXP 21
17924: PUSH
17925: LD_INT 1
17927: LESS
17928: AND
17929: IFFALSE 18469
17931: GO 17933
17933: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17934: LD_INT 22
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 25
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 25
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: IFFALSE 18058
// begin ChangeSideFog ( 1 , 2 ) ;
17982: LD_INT 1
17984: PPUSH
17985: LD_INT 2
17987: PPUSH
17988: CALL_OW 343
// Query ( DestroyEnemy ) ;
17992: LD_STRING DestroyEnemy
17994: PPUSH
17995: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17999: LD_INT 35
18001: PPUSH
18002: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18006: LD_INT 22
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 2
18018: PUSH
18019: LD_INT 25
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 25
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PPUSH
18048: CALL_OW 69
18052: PUSH
18053: LD_INT 0
18055: EQUAL
18056: IFFALSE 17999
// end ; DialogueOn ;
18058: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18062: LD_EXP 28
18066: PPUSH
18067: LD_STRING DH-1-final
18069: PPUSH
18070: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18074: LD_OWVAR 1
18078: PUSH
18079: LD_INT 138600
18081: PUSH
18082: LD_INT 134400
18084: PUSH
18085: LD_INT 130200
18087: PUSH
18088: LD_INT 126000
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: PUSH
18097: LD_OWVAR 67
18101: ARRAY
18102: LESSEQUAL
18103: IFFALSE 18117
// AddMedal ( med1 , 1 ) else
18105: LD_STRING med1
18107: PPUSH
18108: LD_INT 1
18110: PPUSH
18111: CALL_OW 101
18115: GO 18128
// AddMedal ( med1 , - 1 ) ;
18117: LD_STRING med1
18119: PPUSH
18120: LD_INT 1
18122: NEG
18123: PPUSH
18124: CALL_OW 101
// if vehCounter >= 2 then
18128: LD_EXP 22
18132: PUSH
18133: LD_INT 2
18135: GREATEREQUAL
18136: IFFALSE 18150
// AddMedal ( med2 , 1 ) else
18138: LD_STRING med2
18140: PPUSH
18141: LD_INT 1
18143: PPUSH
18144: CALL_OW 101
18148: GO 18161
// AddMedal ( med2 , - 1 ) ;
18150: LD_STRING med2
18152: PPUSH
18153: LD_INT 1
18155: NEG
18156: PPUSH
18157: CALL_OW 101
// if deadCounter = 0 then
18161: LD_EXP 9
18165: PUSH
18166: LD_INT 0
18168: EQUAL
18169: IFFALSE 18183
// AddMedal ( med3 , 1 ) else
18171: LD_STRING med3
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 101
18181: GO 18194
// AddMedal ( med3 , - 1 ) ;
18183: LD_STRING med3
18185: PPUSH
18186: LD_INT 1
18188: NEG
18189: PPUSH
18190: CALL_OW 101
// GiveMedals ( MAIN ) ;
18194: LD_STRING MAIN
18196: PPUSH
18197: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18201: LD_INT 22
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 23
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 21
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: PPUSH
18236: CALL_OW 69
18240: PPUSH
18241: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18245: LD_EXP 28
18249: PPUSH
18250: LD_STRING 03_Heike
18252: PPUSH
18253: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18257: LD_EXP 32
18261: PPUSH
18262: LD_STRING 03_Aviradze
18264: PPUSH
18265: CALL_OW 38
// if Givi then
18269: LD_EXP 29
18273: IFFALSE 18287
// SaveCharacters ( Givi , 03_Givi ) ;
18275: LD_EXP 29
18279: PPUSH
18280: LD_STRING 03_Givi
18282: PPUSH
18283: CALL_OW 38
// if Mike then
18287: LD_EXP 30
18291: IFFALSE 18305
// SaveCharacters ( Mike , 03_Mike ) ;
18293: LD_EXP 30
18297: PPUSH
18298: LD_STRING 03_Mike
18300: PPUSH
18301: CALL_OW 38
// if Kamil then
18305: LD_EXP 31
18309: IFFALSE 18323
// SaveCharacters ( Kamil , 03_Kamil ) ;
18311: LD_EXP 31
18315: PPUSH
18316: LD_STRING 03_Kamil
18318: PPUSH
18319: CALL_OW 38
// if Kaia then
18323: LD_EXP 33
18327: IFFALSE 18341
// SaveCharacters ( Kaia , 03_Kaia ) ;
18329: LD_EXP 33
18333: PPUSH
18334: LD_STRING 03_Kaia
18336: PPUSH
18337: CALL_OW 38
// if Sophia then
18341: LD_EXP 34
18345: IFFALSE 18359
// SaveCharacters ( Sophia , 03_Sophia ) ;
18347: LD_EXP 34
18351: PPUSH
18352: LD_STRING 03_Sophia
18354: PPUSH
18355: CALL_OW 38
// if Markov then
18359: LD_EXP 35
18363: IFFALSE 18377
// SaveCharacters ( Markov , 03_Markov ) ;
18365: LD_EXP 35
18369: PPUSH
18370: LD_STRING 03_Markov
18372: PPUSH
18373: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18377: LD_EXP 38
18381: PUSH
18382: LD_EXP 38
18386: PPUSH
18387: CALL_OW 255
18391: PUSH
18392: LD_INT 2
18394: EQUAL
18395: AND
18396: IFFALSE 18417
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18398: LD_STRING enableBioCharacter(BIO_IBRA)
18400: PPUSH
18401: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18405: LD_EXP 38
18409: PPUSH
18410: LD_STRING 03_Ibrahim
18412: PPUSH
18413: CALL_OW 38
// end ; if heikeSecondSquad then
18417: LD_EXP 42
18421: IFFALSE 18435
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18423: LD_EXP 42
18427: PPUSH
18428: LD_STRING 03_others
18430: PPUSH
18431: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18435: LD_EXP 9
18439: PPUSH
18440: LD_STRING 03_DeadCounter
18442: PPUSH
18443: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18447: LD_STRING enableBioCharacter(BIO_OMAR)
18449: PPUSH
18450: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18454: LD_STRING enableBioCharacter(BIO_FARM)
18456: PPUSH
18457: CALL_OW 559
// YouWin ;
18461: CALL_OW 103
// DialogueOff ;
18465: CALL_OW 7
// end ; end_of_file
18469: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18470: LD_VAR 0 1
18474: PPUSH
18475: CALL 35511 0 1
// if un = Heike then
18479: LD_VAR 0 1
18483: PUSH
18484: LD_EXP 28
18488: EQUAL
18489: IFFALSE 18498
// YouLost ( Heike ) ;
18491: LD_STRING Heike
18493: PPUSH
18494: CALL_OW 104
// if un = Aviradze then
18498: LD_VAR 0 1
18502: PUSH
18503: LD_EXP 32
18507: EQUAL
18508: IFFALSE 18517
// YouLost ( Aviradze ) ;
18510: LD_STRING Aviradze
18512: PPUSH
18513: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18517: LD_VAR 0 1
18521: PUSH
18522: LD_INT 11
18524: EQUAL
18525: PUSH
18526: LD_EXP 11
18530: NOT
18531: AND
18532: IFFALSE 18541
// YouLost ( Depot ) ;
18534: LD_STRING Depot
18536: PPUSH
18537: CALL_OW 104
// if un = arDepot then
18541: LD_VAR 0 1
18545: PUSH
18546: LD_INT 5
18548: EQUAL
18549: IFFALSE 18558
// YouLost ( FarmerDepot ) ;
18551: LD_STRING FarmerDepot
18553: PPUSH
18554: CALL_OW 104
// if un = Farmer then
18558: LD_VAR 0 1
18562: PUSH
18563: LD_EXP 36
18567: EQUAL
18568: IFFALSE 18577
// YouLost ( Farmer ) ;
18570: LD_STRING Farmer
18572: PPUSH
18573: CALL_OW 104
// if un in usForces then
18577: LD_VAR 0 1
18581: PUSH
18582: LD_EXP 44
18586: IN
18587: IFFALSE 18605
// usForces := usForces diff un ;
18589: LD_ADDR_EXP 44
18593: PUSH
18594: LD_EXP 44
18598: PUSH
18599: LD_VAR 0 1
18603: DIFF
18604: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18605: LD_VAR 0 1
18609: PUSH
18610: LD_INT 22
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 23
18622: PUSH
18623: LD_INT 2
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 21
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: PPUSH
18645: CALL_OW 69
18649: IN
18650: IFFALSE 18666
// deadCounter := deadCounter + 1 ;
18652: LD_ADDR_EXP 9
18656: PUSH
18657: LD_EXP 9
18661: PUSH
18662: LD_INT 1
18664: PLUS
18665: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18666: LD_VAR 0 1
18670: PUSH
18671: LD_INT 22
18673: PUSH
18674: LD_INT 4
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 34
18683: PUSH
18684: LD_INT 12
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PPUSH
18695: CALL_OW 69
18699: IN
18700: PUSH
18701: LD_EXP 18
18705: NOT
18706: AND
18707: IFFALSE 18717
// firstConvoyDestroyed := true ;
18709: LD_ADDR_EXP 18
18713: PUSH
18714: LD_INT 1
18716: ST_TO_ADDR
// if un in usAttackers then
18717: LD_VAR 0 1
18721: PUSH
18722: LD_EXP 47
18726: IN
18727: IFFALSE 18745
// usAttackers := usAttackers diff un ;
18729: LD_ADDR_EXP 47
18733: PUSH
18734: LD_EXP 47
18738: PUSH
18739: LD_VAR 0 1
18743: DIFF
18744: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18745: LD_VAR 0 1
18749: PUSH
18750: LD_INT 22
18752: PUSH
18753: LD_INT 5
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 21
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PPUSH
18774: CALL_OW 69
18778: IN
18779: IFFALSE 18795
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18781: LD_ADDR_EXP 20
18785: PUSH
18786: LD_EXP 20
18790: PUSH
18791: LD_INT 1
18793: PLUS
18794: ST_TO_ADDR
// end ;
18795: PPOPN 1
18797: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18798: LD_VAR 0 2
18802: PUSH
18803: LD_EXP 38
18807: EQUAL
18808: PUSH
18809: LD_EXP 25
18813: AND
18814: IFFALSE 18999
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18816: LD_INT 22
18818: PUSH
18819: LD_INT 2
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 30
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 50
18838: PUSH
18839: EMPTY
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: PPUSH
18847: CALL_OW 69
18851: IFFALSE 18905
// begin InGameOn ;
18853: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18857: LD_EXP 38
18861: PPUSH
18862: LD_INT 11
18864: PPUSH
18865: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18869: LD_INT 35
18871: PPUSH
18872: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18876: LD_EXP 38
18880: PPUSH
18881: LD_INT 11
18883: PPUSH
18884: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18888: LD_EXP 38
18892: PPUSH
18893: CALL_OW 310
18897: IFFALSE 18869
// InGameOff ;
18899: CALL_OW 9
// end else
18903: GO 18999
// begin SetSide ( Ibrahim , 6 ) ;
18905: LD_EXP 38
18909: PPUSH
18910: LD_INT 6
18912: PPUSH
18913: CALL_OW 235
// ibrahimInDepot := false ;
18917: LD_ADDR_EXP 25
18921: PUSH
18922: LD_INT 0
18924: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18925: LD_EXP 38
18929: PPUSH
18930: LD_INT 30
18932: PPUSH
18933: LD_INT 1
18935: PPUSH
18936: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18940: LD_INT 35
18942: PPUSH
18943: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18947: LD_EXP 38
18951: PPUSH
18952: LD_INT 30
18954: PPUSH
18955: LD_INT 1
18957: PPUSH
18958: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18962: LD_EXP 38
18966: PPUSH
18967: LD_INT 30
18969: PPUSH
18970: LD_INT 1
18972: PPUSH
18973: CALL_OW 307
18977: PUSH
18978: LD_EXP 38
18982: PPUSH
18983: CALL_OW 301
18987: OR
18988: IFFALSE 18940
// RemoveUnit ( Ibrahim ) ;
18990: LD_EXP 38
18994: PPUSH
18995: CALL_OW 64
// end ; end ; end ;
18999: PPOPN 2
19001: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19002: LD_VAR 0 2
19006: PUSH
19007: LD_EXP 28
19011: EQUAL
19012: PUSH
19013: LD_VAR 0 1
19017: PUSH
19018: LD_INT 11
19020: EQUAL
19021: AND
19022: PUSH
19023: LD_EXP 25
19027: AND
19028: IFFALSE 19034
// IbrahimQuery ;
19030: CALL 16559 0 0
// end ;
19034: PPOPN 2
19036: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19037: LD_VAR 0 1
19041: PPUSH
19042: CALL_OW 141
// if oldId in usAttackers then
19046: LD_VAR 0 2
19050: PUSH
19051: LD_EXP 47
19055: IN
19056: IFFALSE 19074
// usAttackers := usAttackers diff oldId ;
19058: LD_ADDR_EXP 47
19062: PUSH
19063: LD_EXP 47
19067: PUSH
19068: LD_VAR 0 2
19072: DIFF
19073: ST_TO_ADDR
// if newId in usAttackers then
19074: LD_VAR 0 1
19078: PUSH
19079: LD_EXP 47
19083: IN
19084: IFFALSE 19102
// usAttackers := usAttackers diff newId ;
19086: LD_ADDR_EXP 47
19090: PUSH
19091: LD_EXP 47
19095: PUSH
19096: LD_VAR 0 1
19100: DIFF
19101: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19102: LD_VAR 0 3
19106: PUSH
19107: LD_INT 4
19109: EQUAL
19110: PUSH
19111: LD_EXP 18
19115: NOT
19116: AND
19117: IFFALSE 19127
// firstConvoyDestroyed := true ;
19119: LD_ADDR_EXP 18
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 264
19136: PUSH
19137: LD_INT 12
19139: EQUAL
19140: IFFALSE 19178
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19142: LD_ADDR_EXP 13
19146: PUSH
19147: LD_EXP 13
19151: PUSH
19152: LD_INT 1
19154: PLUS
19155: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19156: LD_VAR 0 1
19160: PPUSH
19161: LD_INT 1
19163: PPUSH
19164: CALL_OW 289
19168: PUSH
19169: LD_INT 0
19171: EQUAL
19172: IFFALSE 19178
// EmptyCargoDialog ;
19174: CALL 15193 0 0
// end ; end ;
19178: PPOPN 4
19180: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19181: LD_VAR 0 1
19185: PUSH
19186: LD_INT 2
19188: EQUAL
19189: PUSH
19190: LD_VAR 0 2
19194: PUSH
19195: LD_INT 5
19197: EQUAL
19198: AND
19199: IFFALSE 19208
// YouLost ( Attack ) ;
19201: LD_STRING Attack
19203: PPUSH
19204: CALL_OW 104
// end ;
19208: PPOPN 2
19210: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19211: LD_VAR 0 1
19215: PPUSH
19216: CALL_OW 255
19220: PUSH
19221: LD_INT 1
19223: EQUAL
19224: PUSH
19225: LD_EXP 6
19229: NOT
19230: AND
19231: IFFALSE 19365
// begin if GetBType ( b ) = b_lab then
19233: LD_VAR 0 1
19237: PPUSH
19238: CALL_OW 266
19242: PUSH
19243: LD_INT 6
19245: EQUAL
19246: IFFALSE 19286
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19248: LD_EXP 44
19252: PPUSH
19253: LD_INT 25
19255: PUSH
19256: LD_INT 4
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PPUSH
19263: CALL_OW 72
19267: PPUSH
19268: LD_VAR 0 1
19272: PPUSH
19273: CALL_OW 120
// AmLabResearch ( b ) ;
19277: LD_VAR 0 1
19281: PPUSH
19282: CALL 5194 0 1
// end ; if GetBType ( b ) = b_armoury then
19286: LD_VAR 0 1
19290: PPUSH
19291: CALL_OW 266
19295: PUSH
19296: LD_INT 4
19298: EQUAL
19299: IFFALSE 19347
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19301: LD_EXP 44
19305: PPUSH
19306: LD_INT 25
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 3
19318: PUSH
19319: LD_INT 54
19321: PUSH
19322: EMPTY
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PPUSH
19333: CALL_OW 72
19337: PPUSH
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19347: LD_ADDR_EXP 46
19351: PUSH
19352: LD_EXP 46
19356: PPUSH
19357: LD_INT 1
19359: PPUSH
19360: CALL_OW 3
19364: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19365: LD_VAR 0 1
19369: PPUSH
19370: CALL_OW 255
19374: PUSH
19375: LD_INT 5
19377: EQUAL
19378: IFFALSE 19392
// SetBLevel ( b , 5 ) ;
19380: LD_VAR 0 1
19384: PPUSH
19385: LD_INT 5
19387: PPUSH
19388: CALL_OW 241
// end ;
19392: PPOPN 1
19394: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 255
19404: PUSH
19405: LD_INT 2
19407: EQUAL
19408: IFFALSE 19424
// vehCounter := vehCounter + 1 ;
19410: LD_ADDR_EXP 22
19414: PUSH
19415: LD_EXP 22
19419: PUSH
19420: LD_INT 1
19422: PLUS
19423: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19424: LD_VAR 0 1
19428: PPUSH
19429: LD_VAR 0 2
19433: PPUSH
19434: CALL 35633 0 2
// end ;
19438: PPOPN 2
19440: END
// on SailEvent ( event ) do begin if event = eventAttack then
19441: LD_VAR 0 1
19445: PUSH
19446: LD_EXP 24
19450: EQUAL
19451: IFFALSE 19457
// AmericanAttack ;
19453: CALL 6813 0 0
// end ; end_of_file
19457: PPOPN 1
19459: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19460: LD_OWVAR 1
19464: PUSH
19465: LD_INT 10500
19467: PUSH
19468: LD_INT 9800
19470: PUSH
19471: LD_INT 9450
19473: PUSH
19474: LD_INT 9100
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: PUSH
19483: LD_OWVAR 67
19487: ARRAY
19488: LESSEQUAL
19489: IFFALSE 19516
19491: GO 19493
19493: DISABLE
// begin enable ;
19494: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19495: LD_INT 1
19497: PPUSH
19498: LD_INT 5
19500: PPUSH
19501: CALL_OW 12
19505: PPUSH
19506: LD_INT 9
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 55
// end ;
19516: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19517: LD_EXP 6
19521: PUSH
19522: LD_OWVAR 1
19526: PUSH
19527: LD_INT 94500
19529: LESSEQUAL
19530: AND
19531: IFFALSE 19558
19533: GO 19535
19535: DISABLE
// begin enable ;
19536: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19537: LD_INT 3
19539: PPUSH
19540: LD_INT 5
19542: PPUSH
19543: CALL_OW 12
19547: PPUSH
19548: LD_INT 9
19550: PPUSH
19551: LD_INT 1
19553: PPUSH
19554: CALL_OW 55
// end ; end_of_file
19558: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19559: LD_EXP 11
19563: NOT
19564: PUSH
19565: LD_EXP 16
19569: AND
19570: PUSH
19571: LD_EXP 4
19575: AND
19576: PUSH
19577: LD_EXP 15
19581: PUSH
19582: LD_EXP 16
19586: LESSEQUAL
19587: AND
19588: IFFALSE 19699
19590: GO 19592
19592: DISABLE
// begin enable ;
19593: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19594: LD_ADDR_OWVAR 47
19598: PUSH
19599: LD_STRING #X103-1
19601: PUSH
19602: LD_EXP 16
19606: PUSH
19607: LD_EXP 15
19611: MINUS
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19617: LD_ADDR_EXP 15
19621: PUSH
19622: LD_INT 5
19624: PPUSH
19625: CALL_OW 274
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 275
19637: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19638: LD_INT 10
19640: PPUSH
19641: LD_INT 1
19643: PPUSH
19644: CALL_OW 287
19648: PUSH
19649: LD_INT 0
19651: EQUAL
19652: IFFALSE 19670
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19654: LD_ADDR_EXP 17
19658: PUSH
19659: LD_EXP 17
19663: PUSH
19664: LD_INT 35
19666: MINUS
19667: ST_TO_ADDR
19668: GO 19699
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19670: LD_ADDR_EXP 17
19674: PUSH
19675: LD_INT 42000
19677: PUSH
19678: LD_INT 31500
19680: PUSH
19681: LD_INT 25200
19683: PUSH
19684: LD_INT 21000
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: PUSH
19693: LD_OWVAR 67
19697: ARRAY
19698: ST_TO_ADDR
// end ; end_of_file
19699: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
19700: LD_INT 0
19702: PPUSH
// ar_miner := 81 ;
19703: LD_ADDR_EXP 55
19707: PUSH
19708: LD_INT 81
19710: ST_TO_ADDR
// ar_crane := 88 ;
19711: LD_ADDR_EXP 54
19715: PUSH
19716: LD_INT 88
19718: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19719: LD_ADDR_EXP 49
19723: PUSH
19724: LD_INT 89
19726: ST_TO_ADDR
// us_hack := 99 ;
19727: LD_ADDR_EXP 50
19731: PUSH
19732: LD_INT 99
19734: ST_TO_ADDR
// us_artillery := 97 ;
19735: LD_ADDR_EXP 51
19739: PUSH
19740: LD_INT 97
19742: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19743: LD_ADDR_EXP 52
19747: PUSH
19748: LD_INT 91
19750: ST_TO_ADDR
// ar_mortar := 92 ;
19751: LD_ADDR_EXP 53
19755: PUSH
19756: LD_INT 92
19758: ST_TO_ADDR
// ru_flamethrower := 93 ;
19759: LD_ADDR_EXP 56
19763: PUSH
19764: LD_INT 93
19766: ST_TO_ADDR
// ru_radar := 98 ;
19767: LD_ADDR_EXP 48
19771: PUSH
19772: LD_INT 98
19774: ST_TO_ADDR
// tech_Artillery := 80 ;
19775: LD_ADDR_EXP 57
19779: PUSH
19780: LD_INT 80
19782: ST_TO_ADDR
// tech_RadMat := 81 ;
19783: LD_ADDR_EXP 58
19787: PUSH
19788: LD_INT 81
19790: ST_TO_ADDR
// tech_BasicTools := 82 ;
19791: LD_ADDR_EXP 59
19795: PUSH
19796: LD_INT 82
19798: ST_TO_ADDR
// tech_Cargo := 83 ;
19799: LD_ADDR_EXP 60
19803: PUSH
19804: LD_INT 83
19806: ST_TO_ADDR
// tech_Track := 84 ;
19807: LD_ADDR_EXP 61
19811: PUSH
19812: LD_INT 84
19814: ST_TO_ADDR
// tech_Crane := 85 ;
19815: LD_ADDR_EXP 62
19819: PUSH
19820: LD_INT 85
19822: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19823: LD_ADDR_EXP 63
19827: PUSH
19828: LD_INT 86
19830: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19831: LD_ADDR_EXP 64
19835: PUSH
19836: LD_INT 87
19838: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19839: LD_ADDR_EXP 65
19843: PUSH
19844: LD_INT 88
19846: ST_TO_ADDR
// end ;
19847: LD_VAR 0 1
19851: RET
// every 1 do
19852: GO 19854
19854: DISABLE
// InitGlobalVariables ; end_of_file
19855: CALL 19700 0 0
19859: END
// every 0 0$1 do
19860: GO 19862
19862: DISABLE
// begin enable ;
19863: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19864: LD_STRING updateTimer(
19866: PUSH
19867: LD_OWVAR 1
19871: STR
19872: PUSH
19873: LD_STRING );
19875: STR
19876: PPUSH
19877: CALL_OW 559
// end ;
19881: END
// export function SOS_MapStart ( ) ; begin
19882: LD_INT 0
19884: PPUSH
// if streamModeActive then
19885: LD_EXP 66
19889: IFFALSE 19898
// DefineStreamItems ( true ) ;
19891: LD_INT 1
19893: PPUSH
19894: CALL 21552 0 1
// UpdateFactoryWaypoints ( ) ;
19898: CALL 34413 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19902: CALL 34670 0 0
// end ;
19906: LD_VAR 0 1
19910: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19911: LD_INT 0
19913: PPUSH
// if p2 = 100 then
19914: LD_VAR 0 2
19918: PUSH
19919: LD_INT 100
19921: EQUAL
19922: IFFALSE 20925
// begin if not StreamModeActive then
19924: LD_EXP 66
19928: NOT
19929: IFFALSE 19939
// StreamModeActive := true ;
19931: LD_ADDR_EXP 66
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 0 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 0
19946: EQUAL
19947: IFFALSE 19953
// InitStreamMode ;
19949: CALL 21088 0 0
// if p3 = 1 then
19953: LD_VAR 0 3
19957: PUSH
19958: LD_INT 1
19960: EQUAL
19961: IFFALSE 19971
// sRocket := true ;
19963: LD_ADDR_EXP 71
19967: PUSH
19968: LD_INT 1
19970: ST_TO_ADDR
// if p3 = 2 then
19971: LD_VAR 0 3
19975: PUSH
19976: LD_INT 2
19978: EQUAL
19979: IFFALSE 19989
// sSpeed := true ;
19981: LD_ADDR_EXP 70
19985: PUSH
19986: LD_INT 1
19988: ST_TO_ADDR
// if p3 = 3 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 3
19996: EQUAL
19997: IFFALSE 20007
// sEngine := true ;
19999: LD_ADDR_EXP 72
20003: PUSH
20004: LD_INT 1
20006: ST_TO_ADDR
// if p3 = 4 then
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 4
20014: EQUAL
20015: IFFALSE 20025
// sSpec := true ;
20017: LD_ADDR_EXP 69
20021: PUSH
20022: LD_INT 1
20024: ST_TO_ADDR
// if p3 = 5 then
20025: LD_VAR 0 3
20029: PUSH
20030: LD_INT 5
20032: EQUAL
20033: IFFALSE 20043
// sLevel := true ;
20035: LD_ADDR_EXP 73
20039: PUSH
20040: LD_INT 1
20042: ST_TO_ADDR
// if p3 = 6 then
20043: LD_VAR 0 3
20047: PUSH
20048: LD_INT 6
20050: EQUAL
20051: IFFALSE 20061
// sArmoury := true ;
20053: LD_ADDR_EXP 74
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// if p3 = 7 then
20061: LD_VAR 0 3
20065: PUSH
20066: LD_INT 7
20068: EQUAL
20069: IFFALSE 20079
// sRadar := true ;
20071: LD_ADDR_EXP 75
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// if p3 = 8 then
20079: LD_VAR 0 3
20083: PUSH
20084: LD_INT 8
20086: EQUAL
20087: IFFALSE 20097
// sBunker := true ;
20089: LD_ADDR_EXP 76
20093: PUSH
20094: LD_INT 1
20096: ST_TO_ADDR
// if p3 = 9 then
20097: LD_VAR 0 3
20101: PUSH
20102: LD_INT 9
20104: EQUAL
20105: IFFALSE 20115
// sHack := true ;
20107: LD_ADDR_EXP 77
20111: PUSH
20112: LD_INT 1
20114: ST_TO_ADDR
// if p3 = 10 then
20115: LD_VAR 0 3
20119: PUSH
20120: LD_INT 10
20122: EQUAL
20123: IFFALSE 20133
// sFire := true ;
20125: LD_ADDR_EXP 78
20129: PUSH
20130: LD_INT 1
20132: ST_TO_ADDR
// if p3 = 11 then
20133: LD_VAR 0 3
20137: PUSH
20138: LD_INT 11
20140: EQUAL
20141: IFFALSE 20151
// sRefresh := true ;
20143: LD_ADDR_EXP 79
20147: PUSH
20148: LD_INT 1
20150: ST_TO_ADDR
// if p3 = 12 then
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 12
20158: EQUAL
20159: IFFALSE 20169
// sExp := true ;
20161: LD_ADDR_EXP 80
20165: PUSH
20166: LD_INT 1
20168: ST_TO_ADDR
// if p3 = 13 then
20169: LD_VAR 0 3
20173: PUSH
20174: LD_INT 13
20176: EQUAL
20177: IFFALSE 20187
// sDepot := true ;
20179: LD_ADDR_EXP 81
20183: PUSH
20184: LD_INT 1
20186: ST_TO_ADDR
// if p3 = 14 then
20187: LD_VAR 0 3
20191: PUSH
20192: LD_INT 14
20194: EQUAL
20195: IFFALSE 20205
// sFlag := true ;
20197: LD_ADDR_EXP 82
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// if p3 = 15 then
20205: LD_VAR 0 3
20209: PUSH
20210: LD_INT 15
20212: EQUAL
20213: IFFALSE 20223
// sKamikadze := true ;
20215: LD_ADDR_EXP 90
20219: PUSH
20220: LD_INT 1
20222: ST_TO_ADDR
// if p3 = 16 then
20223: LD_VAR 0 3
20227: PUSH
20228: LD_INT 16
20230: EQUAL
20231: IFFALSE 20241
// sTroll := true ;
20233: LD_ADDR_EXP 91
20237: PUSH
20238: LD_INT 1
20240: ST_TO_ADDR
// if p3 = 17 then
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 17
20248: EQUAL
20249: IFFALSE 20259
// sSlow := true ;
20251: LD_ADDR_EXP 92
20255: PUSH
20256: LD_INT 1
20258: ST_TO_ADDR
// if p3 = 18 then
20259: LD_VAR 0 3
20263: PUSH
20264: LD_INT 18
20266: EQUAL
20267: IFFALSE 20277
// sLack := true ;
20269: LD_ADDR_EXP 93
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if p3 = 19 then
20277: LD_VAR 0 3
20281: PUSH
20282: LD_INT 19
20284: EQUAL
20285: IFFALSE 20295
// sTank := true ;
20287: LD_ADDR_EXP 95
20291: PUSH
20292: LD_INT 1
20294: ST_TO_ADDR
// if p3 = 20 then
20295: LD_VAR 0 3
20299: PUSH
20300: LD_INT 20
20302: EQUAL
20303: IFFALSE 20313
// sRemote := true ;
20305: LD_ADDR_EXP 96
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// if p3 = 21 then
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 21
20320: EQUAL
20321: IFFALSE 20331
// sPowell := true ;
20323: LD_ADDR_EXP 97
20327: PUSH
20328: LD_INT 1
20330: ST_TO_ADDR
// if p3 = 22 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 22
20338: EQUAL
20339: IFFALSE 20349
// sTeleport := true ;
20341: LD_ADDR_EXP 100
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 23 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 23
20356: EQUAL
20357: IFFALSE 20367
// sOilTower := true ;
20359: LD_ADDR_EXP 102
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 24 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 24
20374: EQUAL
20375: IFFALSE 20385
// sShovel := true ;
20377: LD_ADDR_EXP 103
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 25 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 25
20392: EQUAL
20393: IFFALSE 20403
// sSheik := true ;
20395: LD_ADDR_EXP 104
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 26 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 26
20410: EQUAL
20411: IFFALSE 20421
// sEarthquake := true ;
20413: LD_ADDR_EXP 106
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 27 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 27
20428: EQUAL
20429: IFFALSE 20439
// sAI := true ;
20431: LD_ADDR_EXP 107
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 28 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 28
20446: EQUAL
20447: IFFALSE 20457
// sCargo := true ;
20449: LD_ADDR_EXP 110
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 29 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 29
20464: EQUAL
20465: IFFALSE 20475
// sDLaser := true ;
20467: LD_ADDR_EXP 111
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 30 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 30
20482: EQUAL
20483: IFFALSE 20493
// sExchange := true ;
20485: LD_ADDR_EXP 112
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 31 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 31
20500: EQUAL
20501: IFFALSE 20511
// sFac := true ;
20503: LD_ADDR_EXP 113
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 32 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 32
20518: EQUAL
20519: IFFALSE 20529
// sPower := true ;
20521: LD_ADDR_EXP 114
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 33 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 33
20536: EQUAL
20537: IFFALSE 20547
// sRandom := true ;
20539: LD_ADDR_EXP 115
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 34 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 34
20554: EQUAL
20555: IFFALSE 20565
// sShield := true ;
20557: LD_ADDR_EXP 116
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 35 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 35
20572: EQUAL
20573: IFFALSE 20583
// sTime := true ;
20575: LD_ADDR_EXP 117
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 36 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 36
20590: EQUAL
20591: IFFALSE 20601
// sTools := true ;
20593: LD_ADDR_EXP 118
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 101 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 101
20608: EQUAL
20609: IFFALSE 20619
// sSold := true ;
20611: LD_ADDR_EXP 83
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 102 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 102
20626: EQUAL
20627: IFFALSE 20637
// sDiff := true ;
20629: LD_ADDR_EXP 84
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 103 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 103
20644: EQUAL
20645: IFFALSE 20655
// sFog := true ;
20647: LD_ADDR_EXP 87
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 104 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 104
20662: EQUAL
20663: IFFALSE 20673
// sReset := true ;
20665: LD_ADDR_EXP 88
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 105 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 105
20680: EQUAL
20681: IFFALSE 20691
// sSun := true ;
20683: LD_ADDR_EXP 89
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 106 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 106
20698: EQUAL
20699: IFFALSE 20709
// sTiger := true ;
20701: LD_ADDR_EXP 85
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 107 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 107
20716: EQUAL
20717: IFFALSE 20727
// sBomb := true ;
20719: LD_ADDR_EXP 86
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 108 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 108
20734: EQUAL
20735: IFFALSE 20745
// sWound := true ;
20737: LD_ADDR_EXP 94
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 109 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 109
20752: EQUAL
20753: IFFALSE 20763
// sBetray := true ;
20755: LD_ADDR_EXP 98
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 110 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 110
20770: EQUAL
20771: IFFALSE 20781
// sContamin := true ;
20773: LD_ADDR_EXP 99
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 111 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 111
20788: EQUAL
20789: IFFALSE 20799
// sOil := true ;
20791: LD_ADDR_EXP 101
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 112 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 112
20806: EQUAL
20807: IFFALSE 20817
// sStu := true ;
20809: LD_ADDR_EXP 105
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 113 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 113
20824: EQUAL
20825: IFFALSE 20835
// sBazooka := true ;
20827: LD_ADDR_EXP 108
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 114 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 114
20842: EQUAL
20843: IFFALSE 20853
// sMortar := true ;
20845: LD_ADDR_EXP 109
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 115 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 115
20860: EQUAL
20861: IFFALSE 20871
// sRanger := true ;
20863: LD_ADDR_EXP 119
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 116 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 116
20878: EQUAL
20879: IFFALSE 20889
// sComputer := true ;
20881: LD_ADDR_EXP 120
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 117 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 117
20896: EQUAL
20897: IFFALSE 20907
// s30 := true ;
20899: LD_ADDR_EXP 121
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 118 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 118
20914: EQUAL
20915: IFFALSE 20925
// s60 := true ;
20917: LD_ADDR_EXP 122
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// end ; if p2 = 101 then
20925: LD_VAR 0 2
20929: PUSH
20930: LD_INT 101
20932: EQUAL
20933: IFFALSE 21061
// begin case p3 of 1 :
20935: LD_VAR 0 3
20939: PUSH
20940: LD_INT 1
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 20955
20948: POP
// hHackUnlimitedResources ; 2 :
20949: CALL 33159 0 0
20953: GO 21061
20955: LD_INT 2
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 20970
20963: POP
// hHackSetLevel10 ; 3 :
20964: CALL 33292 0 0
20968: GO 21061
20970: LD_INT 3
20972: DOUBLE
20973: EQUAL
20974: IFTRUE 20978
20976: GO 20985
20978: POP
// hHackSetLevel10YourUnits ; 4 :
20979: CALL 33377 0 0
20983: GO 21061
20985: LD_INT 4
20987: DOUBLE
20988: EQUAL
20989: IFTRUE 20993
20991: GO 21000
20993: POP
// hHackInvincible ; 5 :
20994: CALL 33825 0 0
20998: GO 21061
21000: LD_INT 5
21002: DOUBLE
21003: EQUAL
21004: IFTRUE 21008
21006: GO 21015
21008: POP
// hHackInvisible ; 6 :
21009: CALL 33936 0 0
21013: GO 21061
21015: LD_INT 6
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21030
21023: POP
// hHackChangeYourSide ; 7 :
21024: CALL 33993 0 0
21028: GO 21061
21030: LD_INT 7
21032: DOUBLE
21033: EQUAL
21034: IFTRUE 21038
21036: GO 21045
21038: POP
// hHackChangeUnitSide ; 8 :
21039: CALL 34035 0 0
21043: GO 21061
21045: LD_INT 8
21047: DOUBLE
21048: EQUAL
21049: IFTRUE 21053
21051: GO 21060
21053: POP
// hHackFog ; end ;
21054: CALL 34136 0 0
21058: GO 21061
21060: POP
// end ; end ;
21061: LD_VAR 0 7
21065: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21066: GO 21068
21068: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21069: LD_STRING initStreamRollete();
21071: PPUSH
21072: CALL_OW 559
// InitStreamMode ;
21076: CALL 21088 0 0
// DefineStreamItems ( false ) ;
21080: LD_INT 0
21082: PPUSH
21083: CALL 21552 0 1
// end ;
21087: END
// function InitStreamMode ; begin
21088: LD_INT 0
21090: PPUSH
// streamModeActive := false ;
21091: LD_ADDR_EXP 66
21095: PUSH
21096: LD_INT 0
21098: ST_TO_ADDR
// normalCounter := 36 ;
21099: LD_ADDR_EXP 67
21103: PUSH
21104: LD_INT 36
21106: ST_TO_ADDR
// hardcoreCounter := 18 ;
21107: LD_ADDR_EXP 68
21111: PUSH
21112: LD_INT 18
21114: ST_TO_ADDR
// sRocket := false ;
21115: LD_ADDR_EXP 71
21119: PUSH
21120: LD_INT 0
21122: ST_TO_ADDR
// sSpeed := false ;
21123: LD_ADDR_EXP 70
21127: PUSH
21128: LD_INT 0
21130: ST_TO_ADDR
// sEngine := false ;
21131: LD_ADDR_EXP 72
21135: PUSH
21136: LD_INT 0
21138: ST_TO_ADDR
// sSpec := false ;
21139: LD_ADDR_EXP 69
21143: PUSH
21144: LD_INT 0
21146: ST_TO_ADDR
// sLevel := false ;
21147: LD_ADDR_EXP 73
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// sArmoury := false ;
21155: LD_ADDR_EXP 74
21159: PUSH
21160: LD_INT 0
21162: ST_TO_ADDR
// sRadar := false ;
21163: LD_ADDR_EXP 75
21167: PUSH
21168: LD_INT 0
21170: ST_TO_ADDR
// sBunker := false ;
21171: LD_ADDR_EXP 76
21175: PUSH
21176: LD_INT 0
21178: ST_TO_ADDR
// sHack := false ;
21179: LD_ADDR_EXP 77
21183: PUSH
21184: LD_INT 0
21186: ST_TO_ADDR
// sFire := false ;
21187: LD_ADDR_EXP 78
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// sRefresh := false ;
21195: LD_ADDR_EXP 79
21199: PUSH
21200: LD_INT 0
21202: ST_TO_ADDR
// sExp := false ;
21203: LD_ADDR_EXP 80
21207: PUSH
21208: LD_INT 0
21210: ST_TO_ADDR
// sDepot := false ;
21211: LD_ADDR_EXP 81
21215: PUSH
21216: LD_INT 0
21218: ST_TO_ADDR
// sFlag := false ;
21219: LD_ADDR_EXP 82
21223: PUSH
21224: LD_INT 0
21226: ST_TO_ADDR
// sKamikadze := false ;
21227: LD_ADDR_EXP 90
21231: PUSH
21232: LD_INT 0
21234: ST_TO_ADDR
// sTroll := false ;
21235: LD_ADDR_EXP 91
21239: PUSH
21240: LD_INT 0
21242: ST_TO_ADDR
// sSlow := false ;
21243: LD_ADDR_EXP 92
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// sLack := false ;
21251: LD_ADDR_EXP 93
21255: PUSH
21256: LD_INT 0
21258: ST_TO_ADDR
// sTank := false ;
21259: LD_ADDR_EXP 95
21263: PUSH
21264: LD_INT 0
21266: ST_TO_ADDR
// sRemote := false ;
21267: LD_ADDR_EXP 96
21271: PUSH
21272: LD_INT 0
21274: ST_TO_ADDR
// sPowell := false ;
21275: LD_ADDR_EXP 97
21279: PUSH
21280: LD_INT 0
21282: ST_TO_ADDR
// sTeleport := false ;
21283: LD_ADDR_EXP 100
21287: PUSH
21288: LD_INT 0
21290: ST_TO_ADDR
// sOilTower := false ;
21291: LD_ADDR_EXP 102
21295: PUSH
21296: LD_INT 0
21298: ST_TO_ADDR
// sShovel := false ;
21299: LD_ADDR_EXP 103
21303: PUSH
21304: LD_INT 0
21306: ST_TO_ADDR
// sSheik := false ;
21307: LD_ADDR_EXP 104
21311: PUSH
21312: LD_INT 0
21314: ST_TO_ADDR
// sEarthquake := false ;
21315: LD_ADDR_EXP 106
21319: PUSH
21320: LD_INT 0
21322: ST_TO_ADDR
// sAI := false ;
21323: LD_ADDR_EXP 107
21327: PUSH
21328: LD_INT 0
21330: ST_TO_ADDR
// sCargo := false ;
21331: LD_ADDR_EXP 110
21335: PUSH
21336: LD_INT 0
21338: ST_TO_ADDR
// sDLaser := false ;
21339: LD_ADDR_EXP 111
21343: PUSH
21344: LD_INT 0
21346: ST_TO_ADDR
// sExchange := false ;
21347: LD_ADDR_EXP 112
21351: PUSH
21352: LD_INT 0
21354: ST_TO_ADDR
// sFac := false ;
21355: LD_ADDR_EXP 113
21359: PUSH
21360: LD_INT 0
21362: ST_TO_ADDR
// sPower := false ;
21363: LD_ADDR_EXP 114
21367: PUSH
21368: LD_INT 0
21370: ST_TO_ADDR
// sRandom := false ;
21371: LD_ADDR_EXP 115
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
// sShield := false ;
21379: LD_ADDR_EXP 116
21383: PUSH
21384: LD_INT 0
21386: ST_TO_ADDR
// sTime := false ;
21387: LD_ADDR_EXP 117
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
// sTools := false ;
21395: LD_ADDR_EXP 118
21399: PUSH
21400: LD_INT 0
21402: ST_TO_ADDR
// sSold := false ;
21403: LD_ADDR_EXP 83
21407: PUSH
21408: LD_INT 0
21410: ST_TO_ADDR
// sDiff := false ;
21411: LD_ADDR_EXP 84
21415: PUSH
21416: LD_INT 0
21418: ST_TO_ADDR
// sFog := false ;
21419: LD_ADDR_EXP 87
21423: PUSH
21424: LD_INT 0
21426: ST_TO_ADDR
// sReset := false ;
21427: LD_ADDR_EXP 88
21431: PUSH
21432: LD_INT 0
21434: ST_TO_ADDR
// sSun := false ;
21435: LD_ADDR_EXP 89
21439: PUSH
21440: LD_INT 0
21442: ST_TO_ADDR
// sTiger := false ;
21443: LD_ADDR_EXP 85
21447: PUSH
21448: LD_INT 0
21450: ST_TO_ADDR
// sBomb := false ;
21451: LD_ADDR_EXP 86
21455: PUSH
21456: LD_INT 0
21458: ST_TO_ADDR
// sWound := false ;
21459: LD_ADDR_EXP 94
21463: PUSH
21464: LD_INT 0
21466: ST_TO_ADDR
// sBetray := false ;
21467: LD_ADDR_EXP 98
21471: PUSH
21472: LD_INT 0
21474: ST_TO_ADDR
// sContamin := false ;
21475: LD_ADDR_EXP 99
21479: PUSH
21480: LD_INT 0
21482: ST_TO_ADDR
// sOil := false ;
21483: LD_ADDR_EXP 101
21487: PUSH
21488: LD_INT 0
21490: ST_TO_ADDR
// sStu := false ;
21491: LD_ADDR_EXP 105
21495: PUSH
21496: LD_INT 0
21498: ST_TO_ADDR
// sBazooka := false ;
21499: LD_ADDR_EXP 108
21503: PUSH
21504: LD_INT 0
21506: ST_TO_ADDR
// sMortar := false ;
21507: LD_ADDR_EXP 109
21511: PUSH
21512: LD_INT 0
21514: ST_TO_ADDR
// sRanger := false ;
21515: LD_ADDR_EXP 119
21519: PUSH
21520: LD_INT 0
21522: ST_TO_ADDR
// sComputer := false ;
21523: LD_ADDR_EXP 120
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// s30 := false ;
21531: LD_ADDR_EXP 121
21535: PUSH
21536: LD_INT 0
21538: ST_TO_ADDR
// s60 := false ;
21539: LD_ADDR_EXP 122
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// end ;
21547: LD_VAR 0 1
21551: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21552: LD_INT 0
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
// result := [ ] ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: EMPTY
21567: ST_TO_ADDR
// if campaign_id = 1 then
21568: LD_OWVAR 69
21572: PUSH
21573: LD_INT 1
21575: EQUAL
21576: IFFALSE 24742
// begin case mission_number of 1 :
21578: LD_OWVAR 70
21582: PUSH
21583: LD_INT 1
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 21667
21591: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21592: LD_ADDR_VAR 0 2
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 4
21602: PUSH
21603: LD_INT 11
21605: PUSH
21606: LD_INT 12
21608: PUSH
21609: LD_INT 15
21611: PUSH
21612: LD_INT 16
21614: PUSH
21615: LD_INT 22
21617: PUSH
21618: LD_INT 23
21620: PUSH
21621: LD_INT 26
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 101
21637: PUSH
21638: LD_INT 102
21640: PUSH
21641: LD_INT 106
21643: PUSH
21644: LD_INT 116
21646: PUSH
21647: LD_INT 117
21649: PUSH
21650: LD_INT 118
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: ST_TO_ADDR
21665: GO 24740
21667: LD_INT 2
21669: DOUBLE
21670: EQUAL
21671: IFTRUE 21675
21673: GO 21759
21675: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21676: LD_ADDR_VAR 0 2
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 4
21686: PUSH
21687: LD_INT 11
21689: PUSH
21690: LD_INT 12
21692: PUSH
21693: LD_INT 15
21695: PUSH
21696: LD_INT 16
21698: PUSH
21699: LD_INT 22
21701: PUSH
21702: LD_INT 23
21704: PUSH
21705: LD_INT 26
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 101
21721: PUSH
21722: LD_INT 102
21724: PUSH
21725: LD_INT 105
21727: PUSH
21728: LD_INT 106
21730: PUSH
21731: LD_INT 108
21733: PUSH
21734: LD_INT 116
21736: PUSH
21737: LD_INT 117
21739: PUSH
21740: LD_INT 118
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: ST_TO_ADDR
21757: GO 24740
21759: LD_INT 3
21761: DOUBLE
21762: EQUAL
21763: IFTRUE 21767
21765: GO 21855
21767: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21768: LD_ADDR_VAR 0 2
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: LD_INT 4
21778: PUSH
21779: LD_INT 5
21781: PUSH
21782: LD_INT 11
21784: PUSH
21785: LD_INT 12
21787: PUSH
21788: LD_INT 15
21790: PUSH
21791: LD_INT 16
21793: PUSH
21794: LD_INT 22
21796: PUSH
21797: LD_INT 26
21799: PUSH
21800: LD_INT 36
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 101
21817: PUSH
21818: LD_INT 102
21820: PUSH
21821: LD_INT 105
21823: PUSH
21824: LD_INT 106
21826: PUSH
21827: LD_INT 108
21829: PUSH
21830: LD_INT 116
21832: PUSH
21833: LD_INT 117
21835: PUSH
21836: LD_INT 118
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: ST_TO_ADDR
21853: GO 24740
21855: LD_INT 4
21857: DOUBLE
21858: EQUAL
21859: IFTRUE 21863
21861: GO 21959
21863: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21864: LD_ADDR_VAR 0 2
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: LD_INT 4
21874: PUSH
21875: LD_INT 5
21877: PUSH
21878: LD_INT 8
21880: PUSH
21881: LD_INT 11
21883: PUSH
21884: LD_INT 12
21886: PUSH
21887: LD_INT 15
21889: PUSH
21890: LD_INT 16
21892: PUSH
21893: LD_INT 22
21895: PUSH
21896: LD_INT 23
21898: PUSH
21899: LD_INT 26
21901: PUSH
21902: LD_INT 36
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 101
21921: PUSH
21922: LD_INT 102
21924: PUSH
21925: LD_INT 105
21927: PUSH
21928: LD_INT 106
21930: PUSH
21931: LD_INT 108
21933: PUSH
21934: LD_INT 116
21936: PUSH
21937: LD_INT 117
21939: PUSH
21940: LD_INT 118
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: ST_TO_ADDR
21957: GO 24740
21959: LD_INT 5
21961: DOUBLE
21962: EQUAL
21963: IFTRUE 21967
21965: GO 22079
21967: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21968: LD_ADDR_VAR 0 2
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: LD_INT 4
21978: PUSH
21979: LD_INT 5
21981: PUSH
21982: LD_INT 6
21984: PUSH
21985: LD_INT 8
21987: PUSH
21988: LD_INT 11
21990: PUSH
21991: LD_INT 12
21993: PUSH
21994: LD_INT 15
21996: PUSH
21997: LD_INT 16
21999: PUSH
22000: LD_INT 22
22002: PUSH
22003: LD_INT 23
22005: PUSH
22006: LD_INT 25
22008: PUSH
22009: LD_INT 26
22011: PUSH
22012: LD_INT 36
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 101
22033: PUSH
22034: LD_INT 102
22036: PUSH
22037: LD_INT 105
22039: PUSH
22040: LD_INT 106
22042: PUSH
22043: LD_INT 108
22045: PUSH
22046: LD_INT 109
22048: PUSH
22049: LD_INT 112
22051: PUSH
22052: LD_INT 116
22054: PUSH
22055: LD_INT 117
22057: PUSH
22058: LD_INT 118
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: ST_TO_ADDR
22077: GO 24740
22079: LD_INT 6
22081: DOUBLE
22082: EQUAL
22083: IFTRUE 22087
22085: GO 22219
22087: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22088: LD_ADDR_VAR 0 2
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: LD_INT 4
22098: PUSH
22099: LD_INT 5
22101: PUSH
22102: LD_INT 6
22104: PUSH
22105: LD_INT 8
22107: PUSH
22108: LD_INT 11
22110: PUSH
22111: LD_INT 12
22113: PUSH
22114: LD_INT 15
22116: PUSH
22117: LD_INT 16
22119: PUSH
22120: LD_INT 20
22122: PUSH
22123: LD_INT 21
22125: PUSH
22126: LD_INT 22
22128: PUSH
22129: LD_INT 23
22131: PUSH
22132: LD_INT 25
22134: PUSH
22135: LD_INT 26
22137: PUSH
22138: LD_INT 30
22140: PUSH
22141: LD_INT 31
22143: PUSH
22144: LD_INT 32
22146: PUSH
22147: LD_INT 36
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 101
22173: PUSH
22174: LD_INT 102
22176: PUSH
22177: LD_INT 105
22179: PUSH
22180: LD_INT 106
22182: PUSH
22183: LD_INT 108
22185: PUSH
22186: LD_INT 109
22188: PUSH
22189: LD_INT 112
22191: PUSH
22192: LD_INT 116
22194: PUSH
22195: LD_INT 117
22197: PUSH
22198: LD_INT 118
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: ST_TO_ADDR
22217: GO 24740
22219: LD_INT 7
22221: DOUBLE
22222: EQUAL
22223: IFTRUE 22227
22225: GO 22339
22227: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22228: LD_ADDR_VAR 0 2
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 4
22238: PUSH
22239: LD_INT 5
22241: PUSH
22242: LD_INT 7
22244: PUSH
22245: LD_INT 11
22247: PUSH
22248: LD_INT 12
22250: PUSH
22251: LD_INT 15
22253: PUSH
22254: LD_INT 16
22256: PUSH
22257: LD_INT 20
22259: PUSH
22260: LD_INT 21
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_INT 23
22268: PUSH
22269: LD_INT 25
22271: PUSH
22272: LD_INT 26
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 101
22293: PUSH
22294: LD_INT 102
22296: PUSH
22297: LD_INT 103
22299: PUSH
22300: LD_INT 105
22302: PUSH
22303: LD_INT 106
22305: PUSH
22306: LD_INT 108
22308: PUSH
22309: LD_INT 112
22311: PUSH
22312: LD_INT 116
22314: PUSH
22315: LD_INT 117
22317: PUSH
22318: LD_INT 118
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: ST_TO_ADDR
22337: GO 24740
22339: LD_INT 8
22341: DOUBLE
22342: EQUAL
22343: IFTRUE 22347
22345: GO 22487
22347: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22348: LD_ADDR_VAR 0 2
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: LD_INT 4
22358: PUSH
22359: LD_INT 5
22361: PUSH
22362: LD_INT 6
22364: PUSH
22365: LD_INT 7
22367: PUSH
22368: LD_INT 8
22370: PUSH
22371: LD_INT 11
22373: PUSH
22374: LD_INT 12
22376: PUSH
22377: LD_INT 15
22379: PUSH
22380: LD_INT 16
22382: PUSH
22383: LD_INT 20
22385: PUSH
22386: LD_INT 21
22388: PUSH
22389: LD_INT 22
22391: PUSH
22392: LD_INT 23
22394: PUSH
22395: LD_INT 25
22397: PUSH
22398: LD_INT 26
22400: PUSH
22401: LD_INT 30
22403: PUSH
22404: LD_INT 31
22406: PUSH
22407: LD_INT 32
22409: PUSH
22410: LD_INT 36
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 101
22437: PUSH
22438: LD_INT 102
22440: PUSH
22441: LD_INT 103
22443: PUSH
22444: LD_INT 105
22446: PUSH
22447: LD_INT 106
22449: PUSH
22450: LD_INT 108
22452: PUSH
22453: LD_INT 109
22455: PUSH
22456: LD_INT 112
22458: PUSH
22459: LD_INT 116
22461: PUSH
22462: LD_INT 117
22464: PUSH
22465: LD_INT 118
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: ST_TO_ADDR
22485: GO 24740
22487: LD_INT 9
22489: DOUBLE
22490: EQUAL
22491: IFTRUE 22495
22493: GO 22643
22495: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22496: LD_ADDR_VAR 0 2
22500: PUSH
22501: LD_INT 2
22503: PUSH
22504: LD_INT 4
22506: PUSH
22507: LD_INT 5
22509: PUSH
22510: LD_INT 6
22512: PUSH
22513: LD_INT 7
22515: PUSH
22516: LD_INT 8
22518: PUSH
22519: LD_INT 11
22521: PUSH
22522: LD_INT 12
22524: PUSH
22525: LD_INT 15
22527: PUSH
22528: LD_INT 16
22530: PUSH
22531: LD_INT 20
22533: PUSH
22534: LD_INT 21
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_INT 23
22542: PUSH
22543: LD_INT 25
22545: PUSH
22546: LD_INT 26
22548: PUSH
22549: LD_INT 28
22551: PUSH
22552: LD_INT 30
22554: PUSH
22555: LD_INT 31
22557: PUSH
22558: LD_INT 32
22560: PUSH
22561: LD_INT 36
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 101
22589: PUSH
22590: LD_INT 102
22592: PUSH
22593: LD_INT 103
22595: PUSH
22596: LD_INT 105
22598: PUSH
22599: LD_INT 106
22601: PUSH
22602: LD_INT 108
22604: PUSH
22605: LD_INT 109
22607: PUSH
22608: LD_INT 112
22610: PUSH
22611: LD_INT 114
22613: PUSH
22614: LD_INT 116
22616: PUSH
22617: LD_INT 117
22619: PUSH
22620: LD_INT 118
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: ST_TO_ADDR
22641: GO 24740
22643: LD_INT 10
22645: DOUBLE
22646: EQUAL
22647: IFTRUE 22651
22649: GO 22847
22651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22652: LD_ADDR_VAR 0 2
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: LD_INT 6
22668: PUSH
22669: LD_INT 7
22671: PUSH
22672: LD_INT 8
22674: PUSH
22675: LD_INT 9
22677: PUSH
22678: LD_INT 10
22680: PUSH
22681: LD_INT 11
22683: PUSH
22684: LD_INT 12
22686: PUSH
22687: LD_INT 13
22689: PUSH
22690: LD_INT 14
22692: PUSH
22693: LD_INT 15
22695: PUSH
22696: LD_INT 16
22698: PUSH
22699: LD_INT 17
22701: PUSH
22702: LD_INT 18
22704: PUSH
22705: LD_INT 19
22707: PUSH
22708: LD_INT 20
22710: PUSH
22711: LD_INT 21
22713: PUSH
22714: LD_INT 22
22716: PUSH
22717: LD_INT 23
22719: PUSH
22720: LD_INT 24
22722: PUSH
22723: LD_INT 25
22725: PUSH
22726: LD_INT 26
22728: PUSH
22729: LD_INT 28
22731: PUSH
22732: LD_INT 30
22734: PUSH
22735: LD_INT 31
22737: PUSH
22738: LD_INT 32
22740: PUSH
22741: LD_INT 36
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 101
22777: PUSH
22778: LD_INT 102
22780: PUSH
22781: LD_INT 103
22783: PUSH
22784: LD_INT 104
22786: PUSH
22787: LD_INT 105
22789: PUSH
22790: LD_INT 106
22792: PUSH
22793: LD_INT 107
22795: PUSH
22796: LD_INT 108
22798: PUSH
22799: LD_INT 109
22801: PUSH
22802: LD_INT 110
22804: PUSH
22805: LD_INT 111
22807: PUSH
22808: LD_INT 112
22810: PUSH
22811: LD_INT 114
22813: PUSH
22814: LD_INT 116
22816: PUSH
22817: LD_INT 117
22819: PUSH
22820: LD_INT 118
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: ST_TO_ADDR
22845: GO 24740
22847: LD_INT 11
22849: DOUBLE
22850: EQUAL
22851: IFTRUE 22855
22853: GO 23059
22855: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22856: LD_ADDR_VAR 0 2
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: LD_INT 4
22869: PUSH
22870: LD_INT 5
22872: PUSH
22873: LD_INT 6
22875: PUSH
22876: LD_INT 7
22878: PUSH
22879: LD_INT 8
22881: PUSH
22882: LD_INT 9
22884: PUSH
22885: LD_INT 10
22887: PUSH
22888: LD_INT 11
22890: PUSH
22891: LD_INT 12
22893: PUSH
22894: LD_INT 13
22896: PUSH
22897: LD_INT 14
22899: PUSH
22900: LD_INT 15
22902: PUSH
22903: LD_INT 16
22905: PUSH
22906: LD_INT 17
22908: PUSH
22909: LD_INT 18
22911: PUSH
22912: LD_INT 19
22914: PUSH
22915: LD_INT 20
22917: PUSH
22918: LD_INT 21
22920: PUSH
22921: LD_INT 22
22923: PUSH
22924: LD_INT 23
22926: PUSH
22927: LD_INT 24
22929: PUSH
22930: LD_INT 25
22932: PUSH
22933: LD_INT 26
22935: PUSH
22936: LD_INT 28
22938: PUSH
22939: LD_INT 30
22941: PUSH
22942: LD_INT 31
22944: PUSH
22945: LD_INT 32
22947: PUSH
22948: LD_INT 34
22950: PUSH
22951: LD_INT 36
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 101
22989: PUSH
22990: LD_INT 102
22992: PUSH
22993: LD_INT 103
22995: PUSH
22996: LD_INT 104
22998: PUSH
22999: LD_INT 105
23001: PUSH
23002: LD_INT 106
23004: PUSH
23005: LD_INT 107
23007: PUSH
23008: LD_INT 108
23010: PUSH
23011: LD_INT 109
23013: PUSH
23014: LD_INT 110
23016: PUSH
23017: LD_INT 111
23019: PUSH
23020: LD_INT 112
23022: PUSH
23023: LD_INT 114
23025: PUSH
23026: LD_INT 116
23028: PUSH
23029: LD_INT 117
23031: PUSH
23032: LD_INT 118
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: ST_TO_ADDR
23057: GO 24740
23059: LD_INT 12
23061: DOUBLE
23062: EQUAL
23063: IFTRUE 23067
23065: GO 23287
23067: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23068: LD_ADDR_VAR 0 2
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: LD_INT 2
23078: PUSH
23079: LD_INT 3
23081: PUSH
23082: LD_INT 4
23084: PUSH
23085: LD_INT 5
23087: PUSH
23088: LD_INT 6
23090: PUSH
23091: LD_INT 7
23093: PUSH
23094: LD_INT 8
23096: PUSH
23097: LD_INT 9
23099: PUSH
23100: LD_INT 10
23102: PUSH
23103: LD_INT 11
23105: PUSH
23106: LD_INT 12
23108: PUSH
23109: LD_INT 13
23111: PUSH
23112: LD_INT 14
23114: PUSH
23115: LD_INT 15
23117: PUSH
23118: LD_INT 16
23120: PUSH
23121: LD_INT 17
23123: PUSH
23124: LD_INT 18
23126: PUSH
23127: LD_INT 19
23129: PUSH
23130: LD_INT 20
23132: PUSH
23133: LD_INT 21
23135: PUSH
23136: LD_INT 22
23138: PUSH
23139: LD_INT 23
23141: PUSH
23142: LD_INT 24
23144: PUSH
23145: LD_INT 25
23147: PUSH
23148: LD_INT 26
23150: PUSH
23151: LD_INT 27
23153: PUSH
23154: LD_INT 28
23156: PUSH
23157: LD_INT 30
23159: PUSH
23160: LD_INT 31
23162: PUSH
23163: LD_INT 32
23165: PUSH
23166: LD_INT 33
23168: PUSH
23169: LD_INT 34
23171: PUSH
23172: LD_INT 36
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 101
23213: PUSH
23214: LD_INT 102
23216: PUSH
23217: LD_INT 103
23219: PUSH
23220: LD_INT 104
23222: PUSH
23223: LD_INT 105
23225: PUSH
23226: LD_INT 106
23228: PUSH
23229: LD_INT 107
23231: PUSH
23232: LD_INT 108
23234: PUSH
23235: LD_INT 109
23237: PUSH
23238: LD_INT 110
23240: PUSH
23241: LD_INT 111
23243: PUSH
23244: LD_INT 112
23246: PUSH
23247: LD_INT 113
23249: PUSH
23250: LD_INT 114
23252: PUSH
23253: LD_INT 116
23255: PUSH
23256: LD_INT 117
23258: PUSH
23259: LD_INT 118
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: ST_TO_ADDR
23285: GO 24740
23287: LD_INT 13
23289: DOUBLE
23290: EQUAL
23291: IFTRUE 23295
23293: GO 23503
23295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23296: LD_ADDR_VAR 0 2
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 3
23309: PUSH
23310: LD_INT 4
23312: PUSH
23313: LD_INT 5
23315: PUSH
23316: LD_INT 8
23318: PUSH
23319: LD_INT 9
23321: PUSH
23322: LD_INT 10
23324: PUSH
23325: LD_INT 11
23327: PUSH
23328: LD_INT 12
23330: PUSH
23331: LD_INT 14
23333: PUSH
23334: LD_INT 15
23336: PUSH
23337: LD_INT 16
23339: PUSH
23340: LD_INT 17
23342: PUSH
23343: LD_INT 18
23345: PUSH
23346: LD_INT 19
23348: PUSH
23349: LD_INT 20
23351: PUSH
23352: LD_INT 21
23354: PUSH
23355: LD_INT 22
23357: PUSH
23358: LD_INT 23
23360: PUSH
23361: LD_INT 24
23363: PUSH
23364: LD_INT 25
23366: PUSH
23367: LD_INT 26
23369: PUSH
23370: LD_INT 27
23372: PUSH
23373: LD_INT 28
23375: PUSH
23376: LD_INT 30
23378: PUSH
23379: LD_INT 31
23381: PUSH
23382: LD_INT 32
23384: PUSH
23385: LD_INT 33
23387: PUSH
23388: LD_INT 34
23390: PUSH
23391: LD_INT 36
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 101
23429: PUSH
23430: LD_INT 102
23432: PUSH
23433: LD_INT 103
23435: PUSH
23436: LD_INT 104
23438: PUSH
23439: LD_INT 105
23441: PUSH
23442: LD_INT 106
23444: PUSH
23445: LD_INT 107
23447: PUSH
23448: LD_INT 108
23450: PUSH
23451: LD_INT 109
23453: PUSH
23454: LD_INT 110
23456: PUSH
23457: LD_INT 111
23459: PUSH
23460: LD_INT 112
23462: PUSH
23463: LD_INT 113
23465: PUSH
23466: LD_INT 114
23468: PUSH
23469: LD_INT 116
23471: PUSH
23472: LD_INT 117
23474: PUSH
23475: LD_INT 118
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: ST_TO_ADDR
23501: GO 24740
23503: LD_INT 14
23505: DOUBLE
23506: EQUAL
23507: IFTRUE 23511
23509: GO 23735
23511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23512: LD_ADDR_VAR 0 2
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 4
23528: PUSH
23529: LD_INT 5
23531: PUSH
23532: LD_INT 6
23534: PUSH
23535: LD_INT 7
23537: PUSH
23538: LD_INT 8
23540: PUSH
23541: LD_INT 9
23543: PUSH
23544: LD_INT 10
23546: PUSH
23547: LD_INT 11
23549: PUSH
23550: LD_INT 12
23552: PUSH
23553: LD_INT 13
23555: PUSH
23556: LD_INT 14
23558: PUSH
23559: LD_INT 15
23561: PUSH
23562: LD_INT 16
23564: PUSH
23565: LD_INT 17
23567: PUSH
23568: LD_INT 18
23570: PUSH
23571: LD_INT 19
23573: PUSH
23574: LD_INT 20
23576: PUSH
23577: LD_INT 21
23579: PUSH
23580: LD_INT 22
23582: PUSH
23583: LD_INT 23
23585: PUSH
23586: LD_INT 24
23588: PUSH
23589: LD_INT 25
23591: PUSH
23592: LD_INT 26
23594: PUSH
23595: LD_INT 27
23597: PUSH
23598: LD_INT 28
23600: PUSH
23601: LD_INT 29
23603: PUSH
23604: LD_INT 30
23606: PUSH
23607: LD_INT 31
23609: PUSH
23610: LD_INT 32
23612: PUSH
23613: LD_INT 33
23615: PUSH
23616: LD_INT 34
23618: PUSH
23619: LD_INT 36
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 101
23661: PUSH
23662: LD_INT 102
23664: PUSH
23665: LD_INT 103
23667: PUSH
23668: LD_INT 104
23670: PUSH
23671: LD_INT 105
23673: PUSH
23674: LD_INT 106
23676: PUSH
23677: LD_INT 107
23679: PUSH
23680: LD_INT 108
23682: PUSH
23683: LD_INT 109
23685: PUSH
23686: LD_INT 110
23688: PUSH
23689: LD_INT 111
23691: PUSH
23692: LD_INT 112
23694: PUSH
23695: LD_INT 113
23697: PUSH
23698: LD_INT 114
23700: PUSH
23701: LD_INT 116
23703: PUSH
23704: LD_INT 117
23706: PUSH
23707: LD_INT 118
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: ST_TO_ADDR
23733: GO 24740
23735: LD_INT 15
23737: DOUBLE
23738: EQUAL
23739: IFTRUE 23743
23741: GO 23967
23743: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23744: LD_ADDR_VAR 0 2
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: LD_INT 3
23757: PUSH
23758: LD_INT 4
23760: PUSH
23761: LD_INT 5
23763: PUSH
23764: LD_INT 6
23766: PUSH
23767: LD_INT 7
23769: PUSH
23770: LD_INT 8
23772: PUSH
23773: LD_INT 9
23775: PUSH
23776: LD_INT 10
23778: PUSH
23779: LD_INT 11
23781: PUSH
23782: LD_INT 12
23784: PUSH
23785: LD_INT 13
23787: PUSH
23788: LD_INT 14
23790: PUSH
23791: LD_INT 15
23793: PUSH
23794: LD_INT 16
23796: PUSH
23797: LD_INT 17
23799: PUSH
23800: LD_INT 18
23802: PUSH
23803: LD_INT 19
23805: PUSH
23806: LD_INT 20
23808: PUSH
23809: LD_INT 21
23811: PUSH
23812: LD_INT 22
23814: PUSH
23815: LD_INT 23
23817: PUSH
23818: LD_INT 24
23820: PUSH
23821: LD_INT 25
23823: PUSH
23824: LD_INT 26
23826: PUSH
23827: LD_INT 27
23829: PUSH
23830: LD_INT 28
23832: PUSH
23833: LD_INT 29
23835: PUSH
23836: LD_INT 30
23838: PUSH
23839: LD_INT 31
23841: PUSH
23842: LD_INT 32
23844: PUSH
23845: LD_INT 33
23847: PUSH
23848: LD_INT 34
23850: PUSH
23851: LD_INT 36
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 101
23893: PUSH
23894: LD_INT 102
23896: PUSH
23897: LD_INT 103
23899: PUSH
23900: LD_INT 104
23902: PUSH
23903: LD_INT 105
23905: PUSH
23906: LD_INT 106
23908: PUSH
23909: LD_INT 107
23911: PUSH
23912: LD_INT 108
23914: PUSH
23915: LD_INT 109
23917: PUSH
23918: LD_INT 110
23920: PUSH
23921: LD_INT 111
23923: PUSH
23924: LD_INT 112
23926: PUSH
23927: LD_INT 113
23929: PUSH
23930: LD_INT 114
23932: PUSH
23933: LD_INT 116
23935: PUSH
23936: LD_INT 117
23938: PUSH
23939: LD_INT 118
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: ST_TO_ADDR
23965: GO 24740
23967: LD_INT 16
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 24111
23975: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23976: LD_ADDR_VAR 0 2
23980: PUSH
23981: LD_INT 2
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 5
23989: PUSH
23990: LD_INT 7
23992: PUSH
23993: LD_INT 11
23995: PUSH
23996: LD_INT 12
23998: PUSH
23999: LD_INT 15
24001: PUSH
24002: LD_INT 16
24004: PUSH
24005: LD_INT 20
24007: PUSH
24008: LD_INT 21
24010: PUSH
24011: LD_INT 22
24013: PUSH
24014: LD_INT 23
24016: PUSH
24017: LD_INT 25
24019: PUSH
24020: LD_INT 26
24022: PUSH
24023: LD_INT 30
24025: PUSH
24026: LD_INT 31
24028: PUSH
24029: LD_INT 32
24031: PUSH
24032: LD_INT 33
24034: PUSH
24035: LD_INT 34
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 101
24061: PUSH
24062: LD_INT 102
24064: PUSH
24065: LD_INT 103
24067: PUSH
24068: LD_INT 106
24070: PUSH
24071: LD_INT 108
24073: PUSH
24074: LD_INT 112
24076: PUSH
24077: LD_INT 113
24079: PUSH
24080: LD_INT 114
24082: PUSH
24083: LD_INT 116
24085: PUSH
24086: LD_INT 117
24088: PUSH
24089: LD_INT 118
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: ST_TO_ADDR
24109: GO 24740
24111: LD_INT 17
24113: DOUBLE
24114: EQUAL
24115: IFTRUE 24119
24117: GO 24343
24119: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24120: LD_ADDR_VAR 0 2
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 3
24133: PUSH
24134: LD_INT 4
24136: PUSH
24137: LD_INT 5
24139: PUSH
24140: LD_INT 6
24142: PUSH
24143: LD_INT 7
24145: PUSH
24146: LD_INT 8
24148: PUSH
24149: LD_INT 9
24151: PUSH
24152: LD_INT 10
24154: PUSH
24155: LD_INT 11
24157: PUSH
24158: LD_INT 12
24160: PUSH
24161: LD_INT 13
24163: PUSH
24164: LD_INT 14
24166: PUSH
24167: LD_INT 15
24169: PUSH
24170: LD_INT 16
24172: PUSH
24173: LD_INT 17
24175: PUSH
24176: LD_INT 18
24178: PUSH
24179: LD_INT 19
24181: PUSH
24182: LD_INT 20
24184: PUSH
24185: LD_INT 21
24187: PUSH
24188: LD_INT 22
24190: PUSH
24191: LD_INT 23
24193: PUSH
24194: LD_INT 24
24196: PUSH
24197: LD_INT 25
24199: PUSH
24200: LD_INT 26
24202: PUSH
24203: LD_INT 27
24205: PUSH
24206: LD_INT 28
24208: PUSH
24209: LD_INT 29
24211: PUSH
24212: LD_INT 30
24214: PUSH
24215: LD_INT 31
24217: PUSH
24218: LD_INT 32
24220: PUSH
24221: LD_INT 33
24223: PUSH
24224: LD_INT 34
24226: PUSH
24227: LD_INT 36
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 101
24269: PUSH
24270: LD_INT 102
24272: PUSH
24273: LD_INT 103
24275: PUSH
24276: LD_INT 104
24278: PUSH
24279: LD_INT 105
24281: PUSH
24282: LD_INT 106
24284: PUSH
24285: LD_INT 107
24287: PUSH
24288: LD_INT 108
24290: PUSH
24291: LD_INT 109
24293: PUSH
24294: LD_INT 110
24296: PUSH
24297: LD_INT 111
24299: PUSH
24300: LD_INT 112
24302: PUSH
24303: LD_INT 113
24305: PUSH
24306: LD_INT 114
24308: PUSH
24309: LD_INT 116
24311: PUSH
24312: LD_INT 117
24314: PUSH
24315: LD_INT 118
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: ST_TO_ADDR
24341: GO 24740
24343: LD_INT 18
24345: DOUBLE
24346: EQUAL
24347: IFTRUE 24351
24349: GO 24499
24351: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24352: LD_ADDR_VAR 0 2
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 4
24362: PUSH
24363: LD_INT 5
24365: PUSH
24366: LD_INT 7
24368: PUSH
24369: LD_INT 11
24371: PUSH
24372: LD_INT 12
24374: PUSH
24375: LD_INT 15
24377: PUSH
24378: LD_INT 16
24380: PUSH
24381: LD_INT 20
24383: PUSH
24384: LD_INT 21
24386: PUSH
24387: LD_INT 22
24389: PUSH
24390: LD_INT 23
24392: PUSH
24393: LD_INT 25
24395: PUSH
24396: LD_INT 26
24398: PUSH
24399: LD_INT 30
24401: PUSH
24402: LD_INT 31
24404: PUSH
24405: LD_INT 32
24407: PUSH
24408: LD_INT 33
24410: PUSH
24411: LD_INT 34
24413: PUSH
24414: LD_INT 35
24416: PUSH
24417: LD_INT 36
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 101
24445: PUSH
24446: LD_INT 102
24448: PUSH
24449: LD_INT 103
24451: PUSH
24452: LD_INT 106
24454: PUSH
24455: LD_INT 108
24457: PUSH
24458: LD_INT 112
24460: PUSH
24461: LD_INT 113
24463: PUSH
24464: LD_INT 114
24466: PUSH
24467: LD_INT 115
24469: PUSH
24470: LD_INT 116
24472: PUSH
24473: LD_INT 117
24475: PUSH
24476: LD_INT 118
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: ST_TO_ADDR
24497: GO 24740
24499: LD_INT 19
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24739
24507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24508: LD_ADDR_VAR 0 2
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: LD_INT 3
24521: PUSH
24522: LD_INT 4
24524: PUSH
24525: LD_INT 5
24527: PUSH
24528: LD_INT 6
24530: PUSH
24531: LD_INT 7
24533: PUSH
24534: LD_INT 8
24536: PUSH
24537: LD_INT 9
24539: PUSH
24540: LD_INT 10
24542: PUSH
24543: LD_INT 11
24545: PUSH
24546: LD_INT 12
24548: PUSH
24549: LD_INT 13
24551: PUSH
24552: LD_INT 14
24554: PUSH
24555: LD_INT 15
24557: PUSH
24558: LD_INT 16
24560: PUSH
24561: LD_INT 17
24563: PUSH
24564: LD_INT 18
24566: PUSH
24567: LD_INT 19
24569: PUSH
24570: LD_INT 20
24572: PUSH
24573: LD_INT 21
24575: PUSH
24576: LD_INT 22
24578: PUSH
24579: LD_INT 23
24581: PUSH
24582: LD_INT 24
24584: PUSH
24585: LD_INT 25
24587: PUSH
24588: LD_INT 26
24590: PUSH
24591: LD_INT 27
24593: PUSH
24594: LD_INT 28
24596: PUSH
24597: LD_INT 29
24599: PUSH
24600: LD_INT 30
24602: PUSH
24603: LD_INT 31
24605: PUSH
24606: LD_INT 32
24608: PUSH
24609: LD_INT 33
24611: PUSH
24612: LD_INT 34
24614: PUSH
24615: LD_INT 35
24617: PUSH
24618: LD_INT 36
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 101
24661: PUSH
24662: LD_INT 102
24664: PUSH
24665: LD_INT 103
24667: PUSH
24668: LD_INT 104
24670: PUSH
24671: LD_INT 105
24673: PUSH
24674: LD_INT 106
24676: PUSH
24677: LD_INT 107
24679: PUSH
24680: LD_INT 108
24682: PUSH
24683: LD_INT 109
24685: PUSH
24686: LD_INT 110
24688: PUSH
24689: LD_INT 111
24691: PUSH
24692: LD_INT 112
24694: PUSH
24695: LD_INT 113
24697: PUSH
24698: LD_INT 114
24700: PUSH
24701: LD_INT 115
24703: PUSH
24704: LD_INT 116
24706: PUSH
24707: LD_INT 117
24709: PUSH
24710: LD_INT 118
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: ST_TO_ADDR
24737: GO 24740
24739: POP
// end else
24740: GO 24971
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24742: LD_ADDR_VAR 0 2
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: LD_INT 2
24752: PUSH
24753: LD_INT 3
24755: PUSH
24756: LD_INT 4
24758: PUSH
24759: LD_INT 5
24761: PUSH
24762: LD_INT 6
24764: PUSH
24765: LD_INT 7
24767: PUSH
24768: LD_INT 8
24770: PUSH
24771: LD_INT 9
24773: PUSH
24774: LD_INT 10
24776: PUSH
24777: LD_INT 11
24779: PUSH
24780: LD_INT 12
24782: PUSH
24783: LD_INT 13
24785: PUSH
24786: LD_INT 14
24788: PUSH
24789: LD_INT 15
24791: PUSH
24792: LD_INT 16
24794: PUSH
24795: LD_INT 17
24797: PUSH
24798: LD_INT 18
24800: PUSH
24801: LD_INT 19
24803: PUSH
24804: LD_INT 20
24806: PUSH
24807: LD_INT 21
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 23
24815: PUSH
24816: LD_INT 24
24818: PUSH
24819: LD_INT 25
24821: PUSH
24822: LD_INT 26
24824: PUSH
24825: LD_INT 27
24827: PUSH
24828: LD_INT 28
24830: PUSH
24831: LD_INT 29
24833: PUSH
24834: LD_INT 30
24836: PUSH
24837: LD_INT 31
24839: PUSH
24840: LD_INT 32
24842: PUSH
24843: LD_INT 33
24845: PUSH
24846: LD_INT 34
24848: PUSH
24849: LD_INT 35
24851: PUSH
24852: LD_INT 36
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 101
24895: PUSH
24896: LD_INT 102
24898: PUSH
24899: LD_INT 103
24901: PUSH
24902: LD_INT 104
24904: PUSH
24905: LD_INT 105
24907: PUSH
24908: LD_INT 106
24910: PUSH
24911: LD_INT 107
24913: PUSH
24914: LD_INT 108
24916: PUSH
24917: LD_INT 109
24919: PUSH
24920: LD_INT 110
24922: PUSH
24923: LD_INT 111
24925: PUSH
24926: LD_INT 112
24928: PUSH
24929: LD_INT 113
24931: PUSH
24932: LD_INT 114
24934: PUSH
24935: LD_INT 115
24937: PUSH
24938: LD_INT 116
24940: PUSH
24941: LD_INT 117
24943: PUSH
24944: LD_INT 118
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: ST_TO_ADDR
// if result then
24971: LD_VAR 0 2
24975: IFFALSE 25761
// begin normal :=  ;
24977: LD_ADDR_VAR 0 5
24981: PUSH
24982: LD_STRING 
24984: ST_TO_ADDR
// hardcore :=  ;
24985: LD_ADDR_VAR 0 6
24989: PUSH
24990: LD_STRING 
24992: ST_TO_ADDR
// active :=  ;
24993: LD_ADDR_VAR 0 7
24997: PUSH
24998: LD_STRING 
25000: ST_TO_ADDR
// for i = 1 to normalCounter do
25001: LD_ADDR_VAR 0 8
25005: PUSH
25006: DOUBLE
25007: LD_INT 1
25009: DEC
25010: ST_TO_ADDR
25011: LD_EXP 67
25015: PUSH
25016: FOR_TO
25017: IFFALSE 25118
// begin tmp := 0 ;
25019: LD_ADDR_VAR 0 3
25023: PUSH
25024: LD_STRING 0
25026: ST_TO_ADDR
// if result [ 1 ] then
25027: LD_VAR 0 2
25031: PUSH
25032: LD_INT 1
25034: ARRAY
25035: IFFALSE 25100
// if result [ 1 ] [ 1 ] = i then
25037: LD_VAR 0 2
25041: PUSH
25042: LD_INT 1
25044: ARRAY
25045: PUSH
25046: LD_INT 1
25048: ARRAY
25049: PUSH
25050: LD_VAR 0 8
25054: EQUAL
25055: IFFALSE 25100
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25057: LD_ADDR_VAR 0 2
25061: PUSH
25062: LD_VAR 0 2
25066: PPUSH
25067: LD_INT 1
25069: PPUSH
25070: LD_VAR 0 2
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: CALL_OW 3
25086: PPUSH
25087: CALL_OW 1
25091: ST_TO_ADDR
// tmp := 1 ;
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_STRING 1
25099: ST_TO_ADDR
// end ; normal := normal & tmp ;
25100: LD_ADDR_VAR 0 5
25104: PUSH
25105: LD_VAR 0 5
25109: PUSH
25110: LD_VAR 0 3
25114: STR
25115: ST_TO_ADDR
// end ;
25116: GO 25016
25118: POP
25119: POP
// for i = 1 to hardcoreCounter do
25120: LD_ADDR_VAR 0 8
25124: PUSH
25125: DOUBLE
25126: LD_INT 1
25128: DEC
25129: ST_TO_ADDR
25130: LD_EXP 68
25134: PUSH
25135: FOR_TO
25136: IFFALSE 25241
// begin tmp := 0 ;
25138: LD_ADDR_VAR 0 3
25142: PUSH
25143: LD_STRING 0
25145: ST_TO_ADDR
// if result [ 2 ] then
25146: LD_VAR 0 2
25150: PUSH
25151: LD_INT 2
25153: ARRAY
25154: IFFALSE 25223
// if result [ 2 ] [ 1 ] = 100 + i then
25156: LD_VAR 0 2
25160: PUSH
25161: LD_INT 2
25163: ARRAY
25164: PUSH
25165: LD_INT 1
25167: ARRAY
25168: PUSH
25169: LD_INT 100
25171: PUSH
25172: LD_VAR 0 8
25176: PLUS
25177: EQUAL
25178: IFFALSE 25223
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25180: LD_ADDR_VAR 0 2
25184: PUSH
25185: LD_VAR 0 2
25189: PPUSH
25190: LD_INT 2
25192: PPUSH
25193: LD_VAR 0 2
25197: PUSH
25198: LD_INT 2
25200: ARRAY
25201: PPUSH
25202: LD_INT 1
25204: PPUSH
25205: CALL_OW 3
25209: PPUSH
25210: CALL_OW 1
25214: ST_TO_ADDR
// tmp := 1 ;
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_STRING 1
25222: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25223: LD_ADDR_VAR 0 6
25227: PUSH
25228: LD_VAR 0 6
25232: PUSH
25233: LD_VAR 0 3
25237: STR
25238: ST_TO_ADDR
// end ;
25239: GO 25135
25241: POP
25242: POP
// if isGameLoad then
25243: LD_VAR 0 1
25247: IFFALSE 25722
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25249: LD_ADDR_VAR 0 4
25253: PUSH
25254: LD_EXP 71
25258: PUSH
25259: LD_EXP 70
25263: PUSH
25264: LD_EXP 72
25268: PUSH
25269: LD_EXP 69
25273: PUSH
25274: LD_EXP 73
25278: PUSH
25279: LD_EXP 74
25283: PUSH
25284: LD_EXP 75
25288: PUSH
25289: LD_EXP 76
25293: PUSH
25294: LD_EXP 77
25298: PUSH
25299: LD_EXP 78
25303: PUSH
25304: LD_EXP 79
25308: PUSH
25309: LD_EXP 80
25313: PUSH
25314: LD_EXP 81
25318: PUSH
25319: LD_EXP 82
25323: PUSH
25324: LD_EXP 90
25328: PUSH
25329: LD_EXP 91
25333: PUSH
25334: LD_EXP 92
25338: PUSH
25339: LD_EXP 93
25343: PUSH
25344: LD_EXP 95
25348: PUSH
25349: LD_EXP 96
25353: PUSH
25354: LD_EXP 97
25358: PUSH
25359: LD_EXP 100
25363: PUSH
25364: LD_EXP 102
25368: PUSH
25369: LD_EXP 103
25373: PUSH
25374: LD_EXP 104
25378: PUSH
25379: LD_EXP 106
25383: PUSH
25384: LD_EXP 107
25388: PUSH
25389: LD_EXP 110
25393: PUSH
25394: LD_EXP 111
25398: PUSH
25399: LD_EXP 112
25403: PUSH
25404: LD_EXP 113
25408: PUSH
25409: LD_EXP 114
25413: PUSH
25414: LD_EXP 115
25418: PUSH
25419: LD_EXP 116
25423: PUSH
25424: LD_EXP 117
25428: PUSH
25429: LD_EXP 118
25433: PUSH
25434: LD_EXP 83
25438: PUSH
25439: LD_EXP 84
25443: PUSH
25444: LD_EXP 87
25448: PUSH
25449: LD_EXP 88
25453: PUSH
25454: LD_EXP 89
25458: PUSH
25459: LD_EXP 85
25463: PUSH
25464: LD_EXP 86
25468: PUSH
25469: LD_EXP 94
25473: PUSH
25474: LD_EXP 98
25478: PUSH
25479: LD_EXP 99
25483: PUSH
25484: LD_EXP 101
25488: PUSH
25489: LD_EXP 105
25493: PUSH
25494: LD_EXP 108
25498: PUSH
25499: LD_EXP 109
25503: PUSH
25504: LD_EXP 119
25508: PUSH
25509: LD_EXP 120
25513: PUSH
25514: LD_EXP 121
25518: PUSH
25519: LD_EXP 122
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: ST_TO_ADDR
// tmp :=  ;
25580: LD_ADDR_VAR 0 3
25584: PUSH
25585: LD_STRING 
25587: ST_TO_ADDR
// for i = 1 to normalCounter do
25588: LD_ADDR_VAR 0 8
25592: PUSH
25593: DOUBLE
25594: LD_INT 1
25596: DEC
25597: ST_TO_ADDR
25598: LD_EXP 67
25602: PUSH
25603: FOR_TO
25604: IFFALSE 25640
// begin if flags [ i ] then
25606: LD_VAR 0 4
25610: PUSH
25611: LD_VAR 0 8
25615: ARRAY
25616: IFFALSE 25638
// tmp := tmp & i & ; ;
25618: LD_ADDR_VAR 0 3
25622: PUSH
25623: LD_VAR 0 3
25627: PUSH
25628: LD_VAR 0 8
25632: STR
25633: PUSH
25634: LD_STRING ;
25636: STR
25637: ST_TO_ADDR
// end ;
25638: GO 25603
25640: POP
25641: POP
// for i = 1 to hardcoreCounter do
25642: LD_ADDR_VAR 0 8
25646: PUSH
25647: DOUBLE
25648: LD_INT 1
25650: DEC
25651: ST_TO_ADDR
25652: LD_EXP 68
25656: PUSH
25657: FOR_TO
25658: IFFALSE 25704
// begin if flags [ normalCounter + i ] then
25660: LD_VAR 0 4
25664: PUSH
25665: LD_EXP 67
25669: PUSH
25670: LD_VAR 0 8
25674: PLUS
25675: ARRAY
25676: IFFALSE 25702
// tmp := tmp & ( 100 + i ) & ; ;
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_VAR 0 3
25687: PUSH
25688: LD_INT 100
25690: PUSH
25691: LD_VAR 0 8
25695: PLUS
25696: STR
25697: PUSH
25698: LD_STRING ;
25700: STR
25701: ST_TO_ADDR
// end ;
25702: GO 25657
25704: POP
25705: POP
// if tmp then
25706: LD_VAR 0 3
25710: IFFALSE 25722
// active := tmp ;
25712: LD_ADDR_VAR 0 7
25716: PUSH
25717: LD_VAR 0 3
25721: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25722: LD_STRING getStreamItemsFromMission("
25724: PUSH
25725: LD_VAR 0 5
25729: STR
25730: PUSH
25731: LD_STRING ","
25733: STR
25734: PUSH
25735: LD_VAR 0 6
25739: STR
25740: PUSH
25741: LD_STRING ","
25743: STR
25744: PUSH
25745: LD_VAR 0 7
25749: STR
25750: PUSH
25751: LD_STRING ")
25753: STR
25754: PPUSH
25755: CALL_OW 559
// end else
25759: GO 25768
// ToLua ( getStreamItemsFromMission("","","") ) ;
25761: LD_STRING getStreamItemsFromMission("","","")
25763: PPUSH
25764: CALL_OW 559
// end ;
25768: LD_VAR 0 2
25772: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25773: LD_EXP 66
25777: PUSH
25778: LD_EXP 71
25782: AND
25783: IFFALSE 25907
25785: GO 25787
25787: DISABLE
25788: LD_INT 0
25790: PPUSH
25791: PPUSH
// begin enable ;
25792: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25793: LD_ADDR_VAR 0 2
25797: PUSH
25798: LD_INT 22
25800: PUSH
25801: LD_OWVAR 2
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: LD_INT 34
25815: PUSH
25816: LD_INT 7
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 34
25825: PUSH
25826: LD_INT 45
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 34
25835: PUSH
25836: LD_INT 28
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 34
25845: PUSH
25846: LD_INT 47
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PPUSH
25864: CALL_OW 69
25868: ST_TO_ADDR
// if not tmp then
25869: LD_VAR 0 2
25873: NOT
25874: IFFALSE 25878
// exit ;
25876: GO 25907
// for i in tmp do
25878: LD_ADDR_VAR 0 1
25882: PUSH
25883: LD_VAR 0 2
25887: PUSH
25888: FOR_IN
25889: IFFALSE 25905
// begin SetLives ( i , 0 ) ;
25891: LD_VAR 0 1
25895: PPUSH
25896: LD_INT 0
25898: PPUSH
25899: CALL_OW 234
// end ;
25903: GO 25888
25905: POP
25906: POP
// end ;
25907: PPOPN 2
25909: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25910: LD_EXP 66
25914: PUSH
25915: LD_EXP 72
25919: AND
25920: IFFALSE 26004
25922: GO 25924
25924: DISABLE
25925: LD_INT 0
25927: PPUSH
25928: PPUSH
// begin enable ;
25929: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25930: LD_ADDR_VAR 0 2
25934: PUSH
25935: LD_INT 22
25937: PUSH
25938: LD_OWVAR 2
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 32
25949: PUSH
25950: LD_INT 3
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PPUSH
25961: CALL_OW 69
25965: ST_TO_ADDR
// if not tmp then
25966: LD_VAR 0 2
25970: NOT
25971: IFFALSE 25975
// exit ;
25973: GO 26004
// for i in tmp do
25975: LD_ADDR_VAR 0 1
25979: PUSH
25980: LD_VAR 0 2
25984: PUSH
25985: FOR_IN
25986: IFFALSE 26002
// begin SetLives ( i , 0 ) ;
25988: LD_VAR 0 1
25992: PPUSH
25993: LD_INT 0
25995: PPUSH
25996: CALL_OW 234
// end ;
26000: GO 25985
26002: POP
26003: POP
// end ;
26004: PPOPN 2
26006: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26007: LD_EXP 66
26011: PUSH
26012: LD_EXP 69
26016: AND
26017: IFFALSE 26110
26019: GO 26021
26021: DISABLE
26022: LD_INT 0
26024: PPUSH
// begin enable ;
26025: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26026: LD_ADDR_VAR 0 1
26030: PUSH
26031: LD_INT 22
26033: PUSH
26034: LD_OWVAR 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: LD_INT 25
26048: PUSH
26049: LD_INT 5
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 25
26058: PUSH
26059: LD_INT 9
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 25
26068: PUSH
26069: LD_INT 8
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 69
26090: PUSH
26091: FOR_IN
26092: IFFALSE 26108
// begin SetClass ( i , 1 ) ;
26094: LD_VAR 0 1
26098: PPUSH
26099: LD_INT 1
26101: PPUSH
26102: CALL_OW 336
// end ;
26106: GO 26091
26108: POP
26109: POP
// end ;
26110: PPOPN 1
26112: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26113: LD_EXP 66
26117: PUSH
26118: LD_EXP 70
26122: AND
26123: PUSH
26124: LD_OWVAR 65
26128: PUSH
26129: LD_INT 7
26131: LESS
26132: AND
26133: IFFALSE 26147
26135: GO 26137
26137: DISABLE
// begin enable ;
26138: ENABLE
// game_speed := 7 ;
26139: LD_ADDR_OWVAR 65
26143: PUSH
26144: LD_INT 7
26146: ST_TO_ADDR
// end ;
26147: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26148: LD_EXP 66
26152: PUSH
26153: LD_EXP 73
26157: AND
26158: IFFALSE 26360
26160: GO 26162
26162: DISABLE
26163: LD_INT 0
26165: PPUSH
26166: PPUSH
26167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_INT 81
26175: PUSH
26176: LD_OWVAR 2
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 21
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PPUSH
26199: CALL_OW 69
26203: ST_TO_ADDR
// if not tmp then
26204: LD_VAR 0 3
26208: NOT
26209: IFFALSE 26213
// exit ;
26211: GO 26360
// if tmp > 5 then
26213: LD_VAR 0 3
26217: PUSH
26218: LD_INT 5
26220: GREATER
26221: IFFALSE 26233
// k := 5 else
26223: LD_ADDR_VAR 0 2
26227: PUSH
26228: LD_INT 5
26230: ST_TO_ADDR
26231: GO 26243
// k := tmp ;
26233: LD_ADDR_VAR 0 2
26237: PUSH
26238: LD_VAR 0 3
26242: ST_TO_ADDR
// for i := 1 to k do
26243: LD_ADDR_VAR 0 1
26247: PUSH
26248: DOUBLE
26249: LD_INT 1
26251: DEC
26252: ST_TO_ADDR
26253: LD_VAR 0 2
26257: PUSH
26258: FOR_TO
26259: IFFALSE 26358
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26261: LD_VAR 0 3
26265: PUSH
26266: LD_VAR 0 1
26270: ARRAY
26271: PPUSH
26272: LD_VAR 0 1
26276: PUSH
26277: LD_INT 4
26279: MOD
26280: PUSH
26281: LD_INT 1
26283: PLUS
26284: PPUSH
26285: CALL_OW 259
26289: PUSH
26290: LD_INT 10
26292: LESS
26293: IFFALSE 26356
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26295: LD_VAR 0 3
26299: PUSH
26300: LD_VAR 0 1
26304: ARRAY
26305: PPUSH
26306: LD_VAR 0 1
26310: PUSH
26311: LD_INT 4
26313: MOD
26314: PUSH
26315: LD_INT 1
26317: PLUS
26318: PPUSH
26319: LD_VAR 0 3
26323: PUSH
26324: LD_VAR 0 1
26328: ARRAY
26329: PPUSH
26330: LD_VAR 0 1
26334: PUSH
26335: LD_INT 4
26337: MOD
26338: PUSH
26339: LD_INT 1
26341: PLUS
26342: PPUSH
26343: CALL_OW 259
26347: PUSH
26348: LD_INT 1
26350: PLUS
26351: PPUSH
26352: CALL_OW 237
26356: GO 26258
26358: POP
26359: POP
// end ;
26360: PPOPN 3
26362: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26363: LD_EXP 66
26367: PUSH
26368: LD_EXP 74
26372: AND
26373: IFFALSE 26393
26375: GO 26377
26377: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26378: LD_INT 4
26380: PPUSH
26381: LD_OWVAR 2
26385: PPUSH
26386: LD_INT 0
26388: PPUSH
26389: CALL_OW 324
26393: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26394: LD_EXP 66
26398: PUSH
26399: LD_EXP 103
26403: AND
26404: IFFALSE 26424
26406: GO 26408
26408: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26409: LD_INT 19
26411: PPUSH
26412: LD_OWVAR 2
26416: PPUSH
26417: LD_INT 0
26419: PPUSH
26420: CALL_OW 324
26424: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26425: LD_EXP 66
26429: PUSH
26430: LD_EXP 75
26434: AND
26435: IFFALSE 26537
26437: GO 26439
26439: DISABLE
26440: LD_INT 0
26442: PPUSH
26443: PPUSH
// begin enable ;
26444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26445: LD_ADDR_VAR 0 2
26449: PUSH
26450: LD_INT 22
26452: PUSH
26453: LD_OWVAR 2
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 34
26467: PUSH
26468: LD_INT 11
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 34
26477: PUSH
26478: LD_INT 30
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: ST_TO_ADDR
// if not tmp then
26499: LD_VAR 0 2
26503: NOT
26504: IFFALSE 26508
// exit ;
26506: GO 26537
// for i in tmp do
26508: LD_ADDR_VAR 0 1
26512: PUSH
26513: LD_VAR 0 2
26517: PUSH
26518: FOR_IN
26519: IFFALSE 26535
// begin SetLives ( i , 0 ) ;
26521: LD_VAR 0 1
26525: PPUSH
26526: LD_INT 0
26528: PPUSH
26529: CALL_OW 234
// end ;
26533: GO 26518
26535: POP
26536: POP
// end ;
26537: PPOPN 2
26539: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26540: LD_EXP 66
26544: PUSH
26545: LD_EXP 76
26549: AND
26550: IFFALSE 26570
26552: GO 26554
26554: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26555: LD_INT 32
26557: PPUSH
26558: LD_OWVAR 2
26562: PPUSH
26563: LD_INT 0
26565: PPUSH
26566: CALL_OW 324
26570: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26571: LD_EXP 66
26575: PUSH
26576: LD_EXP 77
26580: AND
26581: IFFALSE 26762
26583: GO 26585
26585: DISABLE
26586: LD_INT 0
26588: PPUSH
26589: PPUSH
26590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26591: LD_ADDR_VAR 0 2
26595: PUSH
26596: LD_INT 22
26598: PUSH
26599: LD_OWVAR 2
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 33
26610: PUSH
26611: LD_INT 3
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PPUSH
26622: CALL_OW 69
26626: ST_TO_ADDR
// if not tmp then
26627: LD_VAR 0 2
26631: NOT
26632: IFFALSE 26636
// exit ;
26634: GO 26762
// side := 0 ;
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 0
26643: ST_TO_ADDR
// for i := 1 to 8 do
26644: LD_ADDR_VAR 0 1
26648: PUSH
26649: DOUBLE
26650: LD_INT 1
26652: DEC
26653: ST_TO_ADDR
26654: LD_INT 8
26656: PUSH
26657: FOR_TO
26658: IFFALSE 26706
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26660: LD_OWVAR 2
26664: PUSH
26665: LD_VAR 0 1
26669: NONEQUAL
26670: PUSH
26671: LD_OWVAR 2
26675: PPUSH
26676: LD_VAR 0 1
26680: PPUSH
26681: CALL_OW 81
26685: PUSH
26686: LD_INT 2
26688: EQUAL
26689: AND
26690: IFFALSE 26704
// begin side := i ;
26692: LD_ADDR_VAR 0 3
26696: PUSH
26697: LD_VAR 0 1
26701: ST_TO_ADDR
// break ;
26702: GO 26706
// end ;
26704: GO 26657
26706: POP
26707: POP
// if not side then
26708: LD_VAR 0 3
26712: NOT
26713: IFFALSE 26717
// exit ;
26715: GO 26762
// for i := 1 to tmp do
26717: LD_ADDR_VAR 0 1
26721: PUSH
26722: DOUBLE
26723: LD_INT 1
26725: DEC
26726: ST_TO_ADDR
26727: LD_VAR 0 2
26731: PUSH
26732: FOR_TO
26733: IFFALSE 26760
// if Prob ( 60 ) then
26735: LD_INT 60
26737: PPUSH
26738: CALL_OW 13
26742: IFFALSE 26758
// SetSide ( i , side ) ;
26744: LD_VAR 0 1
26748: PPUSH
26749: LD_VAR 0 3
26753: PPUSH
26754: CALL_OW 235
26758: GO 26732
26760: POP
26761: POP
// end ;
26762: PPOPN 3
26764: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26765: LD_EXP 66
26769: PUSH
26770: LD_EXP 79
26774: AND
26775: IFFALSE 26894
26777: GO 26779
26779: DISABLE
26780: LD_INT 0
26782: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26783: LD_ADDR_VAR 0 1
26787: PUSH
26788: LD_INT 22
26790: PUSH
26791: LD_OWVAR 2
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 21
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 3
26812: PUSH
26813: LD_INT 23
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: PPUSH
26832: CALL_OW 69
26836: PUSH
26837: FOR_IN
26838: IFFALSE 26892
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26840: LD_VAR 0 1
26844: PPUSH
26845: CALL_OW 257
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: LD_INT 3
26858: PUSH
26859: LD_INT 4
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: IN
26868: IFFALSE 26890
// SetClass ( un , rand ( 1 , 4 ) ) ;
26870: LD_VAR 0 1
26874: PPUSH
26875: LD_INT 1
26877: PPUSH
26878: LD_INT 4
26880: PPUSH
26881: CALL_OW 12
26885: PPUSH
26886: CALL_OW 336
26890: GO 26837
26892: POP
26893: POP
// end ;
26894: PPOPN 1
26896: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26897: LD_EXP 66
26901: PUSH
26902: LD_EXP 78
26906: AND
26907: IFFALSE 26986
26909: GO 26911
26911: DISABLE
26912: LD_INT 0
26914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26915: LD_ADDR_VAR 0 1
26919: PUSH
26920: LD_INT 22
26922: PUSH
26923: LD_OWVAR 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 21
26934: PUSH
26935: LD_INT 3
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PPUSH
26946: CALL_OW 69
26950: ST_TO_ADDR
// if not tmp then
26951: LD_VAR 0 1
26955: NOT
26956: IFFALSE 26960
// exit ;
26958: GO 26986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26960: LD_VAR 0 1
26964: PUSH
26965: LD_INT 1
26967: PPUSH
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL_OW 12
26977: ARRAY
26978: PPUSH
26979: LD_INT 100
26981: PPUSH
26982: CALL_OW 234
// end ;
26986: PPOPN 1
26988: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26989: LD_EXP 66
26993: PUSH
26994: LD_EXP 80
26998: AND
26999: IFFALSE 27097
27001: GO 27003
27003: DISABLE
27004: LD_INT 0
27006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27007: LD_ADDR_VAR 0 1
27011: PUSH
27012: LD_INT 22
27014: PUSH
27015: LD_OWVAR 2
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 21
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PPUSH
27038: CALL_OW 69
27042: ST_TO_ADDR
// if not tmp then
27043: LD_VAR 0 1
27047: NOT
27048: IFFALSE 27052
// exit ;
27050: GO 27097
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27052: LD_VAR 0 1
27056: PUSH
27057: LD_INT 1
27059: PPUSH
27060: LD_VAR 0 1
27064: PPUSH
27065: CALL_OW 12
27069: ARRAY
27070: PPUSH
27071: LD_INT 1
27073: PPUSH
27074: LD_INT 4
27076: PPUSH
27077: CALL_OW 12
27081: PPUSH
27082: LD_INT 3000
27084: PPUSH
27085: LD_INT 9000
27087: PPUSH
27088: CALL_OW 12
27092: PPUSH
27093: CALL_OW 492
// end ;
27097: PPOPN 1
27099: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27100: LD_EXP 66
27104: PUSH
27105: LD_EXP 81
27109: AND
27110: IFFALSE 27130
27112: GO 27114
27114: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27115: LD_INT 1
27117: PPUSH
27118: LD_OWVAR 2
27122: PPUSH
27123: LD_INT 0
27125: PPUSH
27126: CALL_OW 324
27130: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27131: LD_EXP 66
27135: PUSH
27136: LD_EXP 82
27140: AND
27141: IFFALSE 27224
27143: GO 27145
27145: DISABLE
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27150: LD_ADDR_VAR 0 2
27154: PUSH
27155: LD_INT 22
27157: PUSH
27158: LD_OWVAR 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 21
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PPUSH
27181: CALL_OW 69
27185: ST_TO_ADDR
// if not tmp then
27186: LD_VAR 0 2
27190: NOT
27191: IFFALSE 27195
// exit ;
27193: GO 27224
// for i in tmp do
27195: LD_ADDR_VAR 0 1
27199: PUSH
27200: LD_VAR 0 2
27204: PUSH
27205: FOR_IN
27206: IFFALSE 27222
// SetBLevel ( i , 10 ) ;
27208: LD_VAR 0 1
27212: PPUSH
27213: LD_INT 10
27215: PPUSH
27216: CALL_OW 241
27220: GO 27205
27222: POP
27223: POP
// end ;
27224: PPOPN 2
27226: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27227: LD_EXP 66
27231: PUSH
27232: LD_EXP 83
27236: AND
27237: IFFALSE 27348
27239: GO 27241
27241: DISABLE
27242: LD_INT 0
27244: PPUSH
27245: PPUSH
27246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27247: LD_ADDR_VAR 0 3
27251: PUSH
27252: LD_INT 22
27254: PUSH
27255: LD_OWVAR 2
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 25
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PPUSH
27278: CALL_OW 69
27282: ST_TO_ADDR
// if not tmp then
27283: LD_VAR 0 3
27287: NOT
27288: IFFALSE 27292
// exit ;
27290: GO 27348
// un := tmp [ rand ( 1 , tmp ) ] ;
27292: LD_ADDR_VAR 0 2
27296: PUSH
27297: LD_VAR 0 3
27301: PUSH
27302: LD_INT 1
27304: PPUSH
27305: LD_VAR 0 3
27309: PPUSH
27310: CALL_OW 12
27314: ARRAY
27315: ST_TO_ADDR
// if Crawls ( un ) then
27316: LD_VAR 0 2
27320: PPUSH
27321: CALL_OW 318
27325: IFFALSE 27336
// ComWalk ( un ) ;
27327: LD_VAR 0 2
27331: PPUSH
27332: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27336: LD_VAR 0 2
27340: PPUSH
27341: LD_INT 5
27343: PPUSH
27344: CALL_OW 336
// end ;
27348: PPOPN 3
27350: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27351: LD_EXP 66
27355: PUSH
27356: LD_EXP 84
27360: AND
27361: PUSH
27362: LD_OWVAR 67
27366: PUSH
27367: LD_INT 4
27369: LESS
27370: AND
27371: IFFALSE 27390
27373: GO 27375
27375: DISABLE
// begin Difficulty := Difficulty + 1 ;
27376: LD_ADDR_OWVAR 67
27380: PUSH
27381: LD_OWVAR 67
27385: PUSH
27386: LD_INT 1
27388: PLUS
27389: ST_TO_ADDR
// end ;
27390: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27391: LD_EXP 66
27395: PUSH
27396: LD_EXP 85
27400: AND
27401: IFFALSE 27504
27403: GO 27405
27405: DISABLE
27406: LD_INT 0
27408: PPUSH
// begin for i := 1 to 5 do
27409: LD_ADDR_VAR 0 1
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_INT 5
27421: PUSH
27422: FOR_TO
27423: IFFALSE 27502
// begin uc_nation := nation_nature ;
27425: LD_ADDR_OWVAR 21
27429: PUSH
27430: LD_INT 0
27432: ST_TO_ADDR
// uc_side := 0 ;
27433: LD_ADDR_OWVAR 20
27437: PUSH
27438: LD_INT 0
27440: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27441: LD_ADDR_OWVAR 29
27445: PUSH
27446: LD_INT 12
27448: PUSH
27449: LD_INT 12
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: ST_TO_ADDR
// hc_agressivity := 20 ;
27456: LD_ADDR_OWVAR 35
27460: PUSH
27461: LD_INT 20
27463: ST_TO_ADDR
// hc_class := class_tiger ;
27464: LD_ADDR_OWVAR 28
27468: PUSH
27469: LD_INT 14
27471: ST_TO_ADDR
// hc_gallery :=  ;
27472: LD_ADDR_OWVAR 33
27476: PUSH
27477: LD_STRING 
27479: ST_TO_ADDR
// hc_name :=  ;
27480: LD_ADDR_OWVAR 26
27484: PUSH
27485: LD_STRING 
27487: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27488: CALL_OW 44
27492: PPUSH
27493: LD_INT 0
27495: PPUSH
27496: CALL_OW 51
// end ;
27500: GO 27422
27502: POP
27503: POP
// end ;
27504: PPOPN 1
27506: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27507: LD_EXP 66
27511: PUSH
27512: LD_EXP 86
27516: AND
27517: IFFALSE 27526
27519: GO 27521
27521: DISABLE
// StreamSibBomb ;
27522: CALL 27527 0 0
27526: END
// export function StreamSibBomb ; var i , x , y ; begin
27527: LD_INT 0
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
// result := false ;
27533: LD_ADDR_VAR 0 1
27537: PUSH
27538: LD_INT 0
27540: ST_TO_ADDR
// for i := 1 to 16 do
27541: LD_ADDR_VAR 0 2
27545: PUSH
27546: DOUBLE
27547: LD_INT 1
27549: DEC
27550: ST_TO_ADDR
27551: LD_INT 16
27553: PUSH
27554: FOR_TO
27555: IFFALSE 27754
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_INT 10
27564: PUSH
27565: LD_INT 20
27567: PUSH
27568: LD_INT 30
27570: PUSH
27571: LD_INT 40
27573: PUSH
27574: LD_INT 50
27576: PUSH
27577: LD_INT 60
27579: PUSH
27580: LD_INT 70
27582: PUSH
27583: LD_INT 80
27585: PUSH
27586: LD_INT 90
27588: PUSH
27589: LD_INT 100
27591: PUSH
27592: LD_INT 110
27594: PUSH
27595: LD_INT 120
27597: PUSH
27598: LD_INT 130
27600: PUSH
27601: LD_INT 140
27603: PUSH
27604: LD_INT 150
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 1
27626: PPUSH
27627: LD_INT 15
27629: PPUSH
27630: CALL_OW 12
27634: ARRAY
27635: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27636: LD_ADDR_VAR 0 4
27640: PUSH
27641: LD_INT 10
27643: PUSH
27644: LD_INT 20
27646: PUSH
27647: LD_INT 30
27649: PUSH
27650: LD_INT 40
27652: PUSH
27653: LD_INT 50
27655: PUSH
27656: LD_INT 60
27658: PUSH
27659: LD_INT 70
27661: PUSH
27662: LD_INT 80
27664: PUSH
27665: LD_INT 90
27667: PUSH
27668: LD_INT 100
27670: PUSH
27671: LD_INT 110
27673: PUSH
27674: LD_INT 120
27676: PUSH
27677: LD_INT 130
27679: PUSH
27680: LD_INT 140
27682: PUSH
27683: LD_INT 150
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: PPUSH
27706: LD_INT 15
27708: PPUSH
27709: CALL_OW 12
27713: ARRAY
27714: ST_TO_ADDR
// if ValidHex ( x , y ) then
27715: LD_VAR 0 3
27719: PPUSH
27720: LD_VAR 0 4
27724: PPUSH
27725: CALL_OW 488
27729: IFFALSE 27752
// begin result := [ x , y ] ;
27731: LD_ADDR_VAR 0 1
27735: PUSH
27736: LD_VAR 0 3
27740: PUSH
27741: LD_VAR 0 4
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: ST_TO_ADDR
// break ;
27750: GO 27754
// end ; end ;
27752: GO 27554
27754: POP
27755: POP
// if result then
27756: LD_VAR 0 1
27760: IFFALSE 27820
// begin ToLua ( playSibBomb() ) ;
27762: LD_STRING playSibBomb()
27764: PPUSH
27765: CALL_OW 559
// wait ( 0 0$14 ) ;
27769: LD_INT 490
27771: PPUSH
27772: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27776: LD_VAR 0 1
27780: PUSH
27781: LD_INT 1
27783: ARRAY
27784: PPUSH
27785: LD_VAR 0 1
27789: PUSH
27790: LD_INT 2
27792: ARRAY
27793: PPUSH
27794: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27798: LD_VAR 0 1
27802: PUSH
27803: LD_INT 1
27805: ARRAY
27806: PPUSH
27807: LD_VAR 0 1
27811: PUSH
27812: LD_INT 2
27814: ARRAY
27815: PPUSH
27816: CALL_OW 429
// end ; end ;
27820: LD_VAR 0 1
27824: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27825: LD_EXP 66
27829: PUSH
27830: LD_EXP 88
27834: AND
27835: IFFALSE 27847
27837: GO 27839
27839: DISABLE
// YouLost (  ) ;
27840: LD_STRING 
27842: PPUSH
27843: CALL_OW 104
27847: END
// every 0 0$1 trigger StreamModeActive and sFog do
27848: LD_EXP 66
27852: PUSH
27853: LD_EXP 87
27857: AND
27858: IFFALSE 27872
27860: GO 27862
27862: DISABLE
// FogOff ( your_side ) ;
27863: LD_OWVAR 2
27867: PPUSH
27868: CALL_OW 344
27872: END
// every 0 0$1 trigger StreamModeActive and sSun do
27873: LD_EXP 66
27877: PUSH
27878: LD_EXP 89
27882: AND
27883: IFFALSE 27911
27885: GO 27887
27887: DISABLE
// begin solar_recharge_percent := 0 ;
27888: LD_ADDR_OWVAR 79
27892: PUSH
27893: LD_INT 0
27895: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27896: LD_INT 10500
27898: PPUSH
27899: CALL_OW 67
// solar_recharge_percent := 100 ;
27903: LD_ADDR_OWVAR 79
27907: PUSH
27908: LD_INT 100
27910: ST_TO_ADDR
// end ;
27911: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27912: LD_EXP 66
27916: PUSH
27917: LD_EXP 90
27921: AND
27922: IFFALSE 28161
27924: GO 27926
27926: DISABLE
27927: LD_INT 0
27929: PPUSH
27930: PPUSH
27931: PPUSH
// begin tmp := [ ] ;
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: EMPTY
27938: ST_TO_ADDR
// for i := 1 to 6 do
27939: LD_ADDR_VAR 0 1
27943: PUSH
27944: DOUBLE
27945: LD_INT 1
27947: DEC
27948: ST_TO_ADDR
27949: LD_INT 6
27951: PUSH
27952: FOR_TO
27953: IFFALSE 28058
// begin uc_nation := nation_nature ;
27955: LD_ADDR_OWVAR 21
27959: PUSH
27960: LD_INT 0
27962: ST_TO_ADDR
// uc_side := 0 ;
27963: LD_ADDR_OWVAR 20
27967: PUSH
27968: LD_INT 0
27970: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27971: LD_ADDR_OWVAR 29
27975: PUSH
27976: LD_INT 12
27978: PUSH
27979: LD_INT 12
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: ST_TO_ADDR
// hc_agressivity := 20 ;
27986: LD_ADDR_OWVAR 35
27990: PUSH
27991: LD_INT 20
27993: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27994: LD_ADDR_OWVAR 28
27998: PUSH
27999: LD_INT 17
28001: ST_TO_ADDR
// hc_gallery :=  ;
28002: LD_ADDR_OWVAR 33
28006: PUSH
28007: LD_STRING 
28009: ST_TO_ADDR
// hc_name :=  ;
28010: LD_ADDR_OWVAR 26
28014: PUSH
28015: LD_STRING 
28017: ST_TO_ADDR
// un := CreateHuman ;
28018: LD_ADDR_VAR 0 2
28022: PUSH
28023: CALL_OW 44
28027: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28028: LD_VAR 0 2
28032: PPUSH
28033: LD_INT 1
28035: PPUSH
28036: CALL_OW 51
// tmp := tmp ^ un ;
28040: LD_ADDR_VAR 0 3
28044: PUSH
28045: LD_VAR 0 3
28049: PUSH
28050: LD_VAR 0 2
28054: ADD
28055: ST_TO_ADDR
// end ;
28056: GO 27952
28058: POP
28059: POP
// repeat wait ( 0 0$1 ) ;
28060: LD_INT 35
28062: PPUSH
28063: CALL_OW 67
// for un in tmp do
28067: LD_ADDR_VAR 0 2
28071: PUSH
28072: LD_VAR 0 3
28076: PUSH
28077: FOR_IN
28078: IFFALSE 28152
// begin if IsDead ( un ) then
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL_OW 301
28089: IFFALSE 28109
// begin tmp := tmp diff un ;
28091: LD_ADDR_VAR 0 3
28095: PUSH
28096: LD_VAR 0 3
28100: PUSH
28101: LD_VAR 0 2
28105: DIFF
28106: ST_TO_ADDR
// continue ;
28107: GO 28077
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28109: LD_VAR 0 2
28113: PPUSH
28114: LD_INT 3
28116: PUSH
28117: LD_INT 22
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PPUSH
28131: CALL_OW 69
28135: PPUSH
28136: LD_VAR 0 2
28140: PPUSH
28141: CALL_OW 74
28145: PPUSH
28146: CALL_OW 115
// end ;
28150: GO 28077
28152: POP
28153: POP
// until not tmp ;
28154: LD_VAR 0 3
28158: NOT
28159: IFFALSE 28060
// end ;
28161: PPOPN 3
28163: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28164: LD_EXP 66
28168: PUSH
28169: LD_EXP 91
28173: AND
28174: IFFALSE 28228
28176: GO 28178
28178: DISABLE
// begin ToLua ( displayTroll(); ) ;
28179: LD_STRING displayTroll();
28181: PPUSH
28182: CALL_OW 559
// wait ( 3 3$00 ) ;
28186: LD_INT 6300
28188: PPUSH
28189: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28193: LD_STRING hideTroll();
28195: PPUSH
28196: CALL_OW 559
// wait ( 1 1$00 ) ;
28200: LD_INT 2100
28202: PPUSH
28203: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28207: LD_STRING displayTroll();
28209: PPUSH
28210: CALL_OW 559
// wait ( 1 1$00 ) ;
28214: LD_INT 2100
28216: PPUSH
28217: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28221: LD_STRING hideTroll();
28223: PPUSH
28224: CALL_OW 559
// end ;
28228: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28229: LD_EXP 66
28233: PUSH
28234: LD_EXP 92
28238: AND
28239: IFFALSE 28302
28241: GO 28243
28243: DISABLE
28244: LD_INT 0
28246: PPUSH
// begin p := 0 ;
28247: LD_ADDR_VAR 0 1
28251: PUSH
28252: LD_INT 0
28254: ST_TO_ADDR
// repeat game_speed := 1 ;
28255: LD_ADDR_OWVAR 65
28259: PUSH
28260: LD_INT 1
28262: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28263: LD_INT 35
28265: PPUSH
28266: CALL_OW 67
// p := p + 1 ;
28270: LD_ADDR_VAR 0 1
28274: PUSH
28275: LD_VAR 0 1
28279: PUSH
28280: LD_INT 1
28282: PLUS
28283: ST_TO_ADDR
// until p >= 60 ;
28284: LD_VAR 0 1
28288: PUSH
28289: LD_INT 60
28291: GREATEREQUAL
28292: IFFALSE 28255
// game_speed := 4 ;
28294: LD_ADDR_OWVAR 65
28298: PUSH
28299: LD_INT 4
28301: ST_TO_ADDR
// end ;
28302: PPOPN 1
28304: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28305: LD_EXP 66
28309: PUSH
28310: LD_EXP 93
28314: AND
28315: IFFALSE 28461
28317: GO 28319
28319: DISABLE
28320: LD_INT 0
28322: PPUSH
28323: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28324: LD_ADDR_VAR 0 1
28328: PUSH
28329: LD_INT 22
28331: PUSH
28332: LD_OWVAR 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: PUSH
28344: LD_INT 30
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 30
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PPUSH
28373: CALL_OW 69
28377: ST_TO_ADDR
// if not depot then
28378: LD_VAR 0 1
28382: NOT
28383: IFFALSE 28387
// exit ;
28385: GO 28461
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28387: LD_ADDR_VAR 0 2
28391: PUSH
28392: LD_VAR 0 1
28396: PUSH
28397: LD_INT 1
28399: PPUSH
28400: LD_VAR 0 1
28404: PPUSH
28405: CALL_OW 12
28409: ARRAY
28410: PPUSH
28411: CALL_OW 274
28415: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28416: LD_VAR 0 2
28420: PPUSH
28421: LD_INT 1
28423: PPUSH
28424: LD_INT 0
28426: PPUSH
28427: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28431: LD_VAR 0 2
28435: PPUSH
28436: LD_INT 2
28438: PPUSH
28439: LD_INT 0
28441: PPUSH
28442: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28446: LD_VAR 0 2
28450: PPUSH
28451: LD_INT 3
28453: PPUSH
28454: LD_INT 0
28456: PPUSH
28457: CALL_OW 277
// end ;
28461: PPOPN 2
28463: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28464: LD_EXP 66
28468: PUSH
28469: LD_EXP 94
28473: AND
28474: IFFALSE 28571
28476: GO 28478
28478: DISABLE
28479: LD_INT 0
28481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28482: LD_ADDR_VAR 0 1
28486: PUSH
28487: LD_INT 22
28489: PUSH
28490: LD_OWVAR 2
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 21
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 3
28511: PUSH
28512: LD_INT 23
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: LIST
28530: PPUSH
28531: CALL_OW 69
28535: ST_TO_ADDR
// if not tmp then
28536: LD_VAR 0 1
28540: NOT
28541: IFFALSE 28545
// exit ;
28543: GO 28571
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28545: LD_VAR 0 1
28549: PUSH
28550: LD_INT 1
28552: PPUSH
28553: LD_VAR 0 1
28557: PPUSH
28558: CALL_OW 12
28562: ARRAY
28563: PPUSH
28564: LD_INT 200
28566: PPUSH
28567: CALL_OW 234
// end ;
28571: PPOPN 1
28573: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28574: LD_EXP 66
28578: PUSH
28579: LD_EXP 95
28583: AND
28584: IFFALSE 28663
28586: GO 28588
28588: DISABLE
28589: LD_INT 0
28591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28592: LD_ADDR_VAR 0 1
28596: PUSH
28597: LD_INT 22
28599: PUSH
28600: LD_OWVAR 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 21
28611: PUSH
28612: LD_INT 2
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PPUSH
28623: CALL_OW 69
28627: ST_TO_ADDR
// if not tmp then
28628: LD_VAR 0 1
28632: NOT
28633: IFFALSE 28637
// exit ;
28635: GO 28663
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28637: LD_VAR 0 1
28641: PUSH
28642: LD_INT 1
28644: PPUSH
28645: LD_VAR 0 1
28649: PPUSH
28650: CALL_OW 12
28654: ARRAY
28655: PPUSH
28656: LD_INT 60
28658: PPUSH
28659: CALL_OW 234
// end ;
28663: PPOPN 1
28665: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28666: LD_EXP 66
28670: PUSH
28671: LD_EXP 96
28675: AND
28676: IFFALSE 28775
28678: GO 28680
28680: DISABLE
28681: LD_INT 0
28683: PPUSH
28684: PPUSH
// begin enable ;
28685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28686: LD_ADDR_VAR 0 1
28690: PUSH
28691: LD_INT 22
28693: PUSH
28694: LD_OWVAR 2
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 61
28705: PUSH
28706: EMPTY
28707: LIST
28708: PUSH
28709: LD_INT 33
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: PPUSH
28724: CALL_OW 69
28728: ST_TO_ADDR
// if not tmp then
28729: LD_VAR 0 1
28733: NOT
28734: IFFALSE 28738
// exit ;
28736: GO 28775
// for i in tmp do
28738: LD_ADDR_VAR 0 2
28742: PUSH
28743: LD_VAR 0 1
28747: PUSH
28748: FOR_IN
28749: IFFALSE 28773
// if IsControledBy ( i ) then
28751: LD_VAR 0 2
28755: PPUSH
28756: CALL_OW 312
28760: IFFALSE 28771
// ComUnlink ( i ) ;
28762: LD_VAR 0 2
28766: PPUSH
28767: CALL_OW 136
28771: GO 28748
28773: POP
28774: POP
// end ;
28775: PPOPN 2
28777: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28778: LD_EXP 66
28782: PUSH
28783: LD_EXP 97
28787: AND
28788: IFFALSE 28928
28790: GO 28792
28792: DISABLE
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
// begin ToLua ( displayPowell(); ) ;
28797: LD_STRING displayPowell();
28799: PPUSH
28800: CALL_OW 559
// uc_side := 0 ;
28804: LD_ADDR_OWVAR 20
28808: PUSH
28809: LD_INT 0
28811: ST_TO_ADDR
// uc_nation := 2 ;
28812: LD_ADDR_OWVAR 21
28816: PUSH
28817: LD_INT 2
28819: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28820: LD_ADDR_OWVAR 37
28824: PUSH
28825: LD_INT 14
28827: ST_TO_ADDR
// vc_engine := engine_siberite ;
28828: LD_ADDR_OWVAR 39
28832: PUSH
28833: LD_INT 3
28835: ST_TO_ADDR
// vc_control := control_apeman ;
28836: LD_ADDR_OWVAR 38
28840: PUSH
28841: LD_INT 5
28843: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28844: LD_ADDR_OWVAR 40
28848: PUSH
28849: LD_INT 29
28851: ST_TO_ADDR
// un := CreateVehicle ;
28852: LD_ADDR_VAR 0 2
28856: PUSH
28857: CALL_OW 45
28861: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28862: LD_VAR 0 2
28866: PPUSH
28867: LD_INT 1
28869: PPUSH
28870: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28874: LD_INT 35
28876: PPUSH
28877: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28881: LD_VAR 0 2
28885: PPUSH
28886: LD_INT 22
28888: PUSH
28889: LD_OWVAR 2
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PPUSH
28898: CALL_OW 69
28902: PPUSH
28903: LD_VAR 0 2
28907: PPUSH
28908: CALL_OW 74
28912: PPUSH
28913: CALL_OW 115
// until IsDead ( un ) ;
28917: LD_VAR 0 2
28921: PPUSH
28922: CALL_OW 301
28926: IFFALSE 28874
// end ;
28928: PPOPN 2
28930: END
// every 0 0$1 trigger StreamModeActive and sStu do
28931: LD_EXP 66
28935: PUSH
28936: LD_EXP 105
28940: AND
28941: IFFALSE 28957
28943: GO 28945
28945: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28946: LD_STRING displayStucuk();
28948: PPUSH
28949: CALL_OW 559
// ResetFog ;
28953: CALL_OW 335
// end ;
28957: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28958: LD_EXP 66
28962: PUSH
28963: LD_EXP 98
28967: AND
28968: IFFALSE 29109
28970: GO 28972
28972: DISABLE
28973: LD_INT 0
28975: PPUSH
28976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28977: LD_ADDR_VAR 0 2
28981: PUSH
28982: LD_INT 22
28984: PUSH
28985: LD_OWVAR 2
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 21
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PPUSH
29008: CALL_OW 69
29012: ST_TO_ADDR
// if not tmp then
29013: LD_VAR 0 2
29017: NOT
29018: IFFALSE 29022
// exit ;
29020: GO 29109
// un := tmp [ rand ( 1 , tmp ) ] ;
29022: LD_ADDR_VAR 0 1
29026: PUSH
29027: LD_VAR 0 2
29031: PUSH
29032: LD_INT 1
29034: PPUSH
29035: LD_VAR 0 2
29039: PPUSH
29040: CALL_OW 12
29044: ARRAY
29045: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29046: LD_VAR 0 1
29050: PPUSH
29051: LD_INT 0
29053: PPUSH
29054: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29058: LD_VAR 0 1
29062: PPUSH
29063: LD_OWVAR 3
29067: PUSH
29068: LD_VAR 0 1
29072: DIFF
29073: PPUSH
29074: LD_VAR 0 1
29078: PPUSH
29079: CALL_OW 74
29083: PPUSH
29084: CALL_OW 115
// wait ( 0 0$20 ) ;
29088: LD_INT 700
29090: PPUSH
29091: CALL_OW 67
// SetSide ( un , your_side ) ;
29095: LD_VAR 0 1
29099: PPUSH
29100: LD_OWVAR 2
29104: PPUSH
29105: CALL_OW 235
// end ;
29109: PPOPN 2
29111: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29112: LD_EXP 66
29116: PUSH
29117: LD_EXP 99
29121: AND
29122: IFFALSE 29228
29124: GO 29126
29126: DISABLE
29127: LD_INT 0
29129: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29130: LD_ADDR_VAR 0 1
29134: PUSH
29135: LD_INT 22
29137: PUSH
29138: LD_OWVAR 2
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: LD_INT 30
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 30
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 69
29183: ST_TO_ADDR
// if not depot then
29184: LD_VAR 0 1
29188: NOT
29189: IFFALSE 29193
// exit ;
29191: GO 29228
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29193: LD_VAR 0 1
29197: PUSH
29198: LD_INT 1
29200: ARRAY
29201: PPUSH
29202: CALL_OW 250
29206: PPUSH
29207: LD_VAR 0 1
29211: PUSH
29212: LD_INT 1
29214: ARRAY
29215: PPUSH
29216: CALL_OW 251
29220: PPUSH
29221: LD_INT 70
29223: PPUSH
29224: CALL_OW 495
// end ;
29228: PPOPN 1
29230: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29231: LD_EXP 66
29235: PUSH
29236: LD_EXP 100
29240: AND
29241: IFFALSE 29452
29243: GO 29245
29245: DISABLE
29246: LD_INT 0
29248: PPUSH
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29253: LD_ADDR_VAR 0 5
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_OWVAR 2
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 21
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 69
29288: ST_TO_ADDR
// if not tmp then
29289: LD_VAR 0 5
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29452
// for i in tmp do
29298: LD_ADDR_VAR 0 1
29302: PUSH
29303: LD_VAR 0 5
29307: PUSH
29308: FOR_IN
29309: IFFALSE 29450
// begin d := rand ( 0 , 5 ) ;
29311: LD_ADDR_VAR 0 4
29315: PUSH
29316: LD_INT 0
29318: PPUSH
29319: LD_INT 5
29321: PPUSH
29322: CALL_OW 12
29326: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29327: LD_ADDR_VAR 0 2
29331: PUSH
29332: LD_VAR 0 1
29336: PPUSH
29337: CALL_OW 250
29341: PPUSH
29342: LD_VAR 0 4
29346: PPUSH
29347: LD_INT 3
29349: PPUSH
29350: LD_INT 12
29352: PPUSH
29353: CALL_OW 12
29357: PPUSH
29358: CALL_OW 272
29362: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29363: LD_ADDR_VAR 0 3
29367: PUSH
29368: LD_VAR 0 1
29372: PPUSH
29373: CALL_OW 251
29377: PPUSH
29378: LD_VAR 0 4
29382: PPUSH
29383: LD_INT 3
29385: PPUSH
29386: LD_INT 12
29388: PPUSH
29389: CALL_OW 12
29393: PPUSH
29394: CALL_OW 273
29398: ST_TO_ADDR
// if ValidHex ( x , y ) then
29399: LD_VAR 0 2
29403: PPUSH
29404: LD_VAR 0 3
29408: PPUSH
29409: CALL_OW 488
29413: IFFALSE 29448
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29415: LD_VAR 0 1
29419: PPUSH
29420: LD_VAR 0 2
29424: PPUSH
29425: LD_VAR 0 3
29429: PPUSH
29430: LD_INT 3
29432: PPUSH
29433: LD_INT 6
29435: PPUSH
29436: CALL_OW 12
29440: PPUSH
29441: LD_INT 1
29443: PPUSH
29444: CALL_OW 483
// end ;
29448: GO 29308
29450: POP
29451: POP
// end ;
29452: PPOPN 5
29454: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29455: LD_EXP 66
29459: PUSH
29460: LD_EXP 101
29464: AND
29465: IFFALSE 29559
29467: GO 29469
29469: DISABLE
29470: LD_INT 0
29472: PPUSH
29473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29474: LD_ADDR_VAR 0 2
29478: PUSH
29479: LD_INT 22
29481: PUSH
29482: LD_OWVAR 2
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 32
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 21
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: PPUSH
29516: CALL_OW 69
29520: ST_TO_ADDR
// if not tmp then
29521: LD_VAR 0 2
29525: NOT
29526: IFFALSE 29530
// exit ;
29528: GO 29559
// for i in tmp do
29530: LD_ADDR_VAR 0 1
29534: PUSH
29535: LD_VAR 0 2
29539: PUSH
29540: FOR_IN
29541: IFFALSE 29557
// SetFuel ( i , 0 ) ;
29543: LD_VAR 0 1
29547: PPUSH
29548: LD_INT 0
29550: PPUSH
29551: CALL_OW 240
29555: GO 29540
29557: POP
29558: POP
// end ;
29559: PPOPN 2
29561: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29562: LD_EXP 66
29566: PUSH
29567: LD_EXP 102
29571: AND
29572: IFFALSE 29638
29574: GO 29576
29576: DISABLE
29577: LD_INT 0
29579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29580: LD_ADDR_VAR 0 1
29584: PUSH
29585: LD_INT 22
29587: PUSH
29588: LD_OWVAR 2
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 30
29599: PUSH
29600: LD_INT 29
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 69
29615: ST_TO_ADDR
// if not tmp then
29616: LD_VAR 0 1
29620: NOT
29621: IFFALSE 29625
// exit ;
29623: GO 29638
// DestroyUnit ( tmp [ 1 ] ) ;
29625: LD_VAR 0 1
29629: PUSH
29630: LD_INT 1
29632: ARRAY
29633: PPUSH
29634: CALL_OW 65
// end ;
29638: PPOPN 1
29640: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29641: LD_EXP 66
29645: PUSH
29646: LD_EXP 104
29650: AND
29651: IFFALSE 29780
29653: GO 29655
29655: DISABLE
29656: LD_INT 0
29658: PPUSH
// begin uc_side := 0 ;
29659: LD_ADDR_OWVAR 20
29663: PUSH
29664: LD_INT 0
29666: ST_TO_ADDR
// uc_nation := nation_arabian ;
29667: LD_ADDR_OWVAR 21
29671: PUSH
29672: LD_INT 2
29674: ST_TO_ADDR
// hc_gallery :=  ;
29675: LD_ADDR_OWVAR 33
29679: PUSH
29680: LD_STRING 
29682: ST_TO_ADDR
// hc_name :=  ;
29683: LD_ADDR_OWVAR 26
29687: PUSH
29688: LD_STRING 
29690: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29691: LD_INT 1
29693: PPUSH
29694: LD_INT 11
29696: PPUSH
29697: LD_INT 10
29699: PPUSH
29700: CALL_OW 380
// un := CreateHuman ;
29704: LD_ADDR_VAR 0 1
29708: PUSH
29709: CALL_OW 44
29713: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_INT 1
29721: PPUSH
29722: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29726: LD_INT 35
29728: PPUSH
29729: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29733: LD_VAR 0 1
29737: PPUSH
29738: LD_INT 22
29740: PUSH
29741: LD_OWVAR 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PPUSH
29750: CALL_OW 69
29754: PPUSH
29755: LD_VAR 0 1
29759: PPUSH
29760: CALL_OW 74
29764: PPUSH
29765: CALL_OW 115
// until IsDead ( un ) ;
29769: LD_VAR 0 1
29773: PPUSH
29774: CALL_OW 301
29778: IFFALSE 29726
// end ;
29780: PPOPN 1
29782: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29783: LD_EXP 66
29787: PUSH
29788: LD_EXP 106
29792: AND
29793: IFFALSE 29805
29795: GO 29797
29797: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29798: LD_STRING earthquake(getX(game), 0, 32)
29800: PPUSH
29801: CALL_OW 559
29805: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29806: LD_EXP 66
29810: PUSH
29811: LD_EXP 107
29815: AND
29816: IFFALSE 29907
29818: GO 29820
29820: DISABLE
29821: LD_INT 0
29823: PPUSH
// begin enable ;
29824: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29825: LD_ADDR_VAR 0 1
29829: PUSH
29830: LD_INT 22
29832: PUSH
29833: LD_OWVAR 2
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 21
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 33
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: PPUSH
29867: CALL_OW 69
29871: ST_TO_ADDR
// if not tmp then
29872: LD_VAR 0 1
29876: NOT
29877: IFFALSE 29881
// exit ;
29879: GO 29907
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29881: LD_VAR 0 1
29885: PUSH
29886: LD_INT 1
29888: PPUSH
29889: LD_VAR 0 1
29893: PPUSH
29894: CALL_OW 12
29898: ARRAY
29899: PPUSH
29900: LD_INT 1
29902: PPUSH
29903: CALL_OW 234
// end ;
29907: PPOPN 1
29909: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29910: LD_EXP 66
29914: PUSH
29915: LD_EXP 108
29919: AND
29920: IFFALSE 30061
29922: GO 29924
29924: DISABLE
29925: LD_INT 0
29927: PPUSH
29928: PPUSH
29929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29930: LD_ADDR_VAR 0 3
29934: PUSH
29935: LD_INT 22
29937: PUSH
29938: LD_OWVAR 2
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 25
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PPUSH
29961: CALL_OW 69
29965: ST_TO_ADDR
// if not tmp then
29966: LD_VAR 0 3
29970: NOT
29971: IFFALSE 29975
// exit ;
29973: GO 30061
// un := tmp [ rand ( 1 , tmp ) ] ;
29975: LD_ADDR_VAR 0 2
29979: PUSH
29980: LD_VAR 0 3
29984: PUSH
29985: LD_INT 1
29987: PPUSH
29988: LD_VAR 0 3
29992: PPUSH
29993: CALL_OW 12
29997: ARRAY
29998: ST_TO_ADDR
// if Crawls ( un ) then
29999: LD_VAR 0 2
30003: PPUSH
30004: CALL_OW 318
30008: IFFALSE 30019
// ComWalk ( un ) ;
30010: LD_VAR 0 2
30014: PPUSH
30015: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30019: LD_VAR 0 2
30023: PPUSH
30024: LD_INT 9
30026: PPUSH
30027: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30031: LD_INT 28
30033: PPUSH
30034: LD_OWVAR 2
30038: PPUSH
30039: LD_INT 2
30041: PPUSH
30042: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30046: LD_INT 29
30048: PPUSH
30049: LD_OWVAR 2
30053: PPUSH
30054: LD_INT 2
30056: PPUSH
30057: CALL_OW 322
// end ;
30061: PPOPN 3
30063: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30064: LD_EXP 66
30068: PUSH
30069: LD_EXP 109
30073: AND
30074: IFFALSE 30185
30076: GO 30078
30078: DISABLE
30079: LD_INT 0
30081: PPUSH
30082: PPUSH
30083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30084: LD_ADDR_VAR 0 3
30088: PUSH
30089: LD_INT 22
30091: PUSH
30092: LD_OWVAR 2
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 25
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PPUSH
30115: CALL_OW 69
30119: ST_TO_ADDR
// if not tmp then
30120: LD_VAR 0 3
30124: NOT
30125: IFFALSE 30129
// exit ;
30127: GO 30185
// un := tmp [ rand ( 1 , tmp ) ] ;
30129: LD_ADDR_VAR 0 2
30133: PUSH
30134: LD_VAR 0 3
30138: PUSH
30139: LD_INT 1
30141: PPUSH
30142: LD_VAR 0 3
30146: PPUSH
30147: CALL_OW 12
30151: ARRAY
30152: ST_TO_ADDR
// if Crawls ( un ) then
30153: LD_VAR 0 2
30157: PPUSH
30158: CALL_OW 318
30162: IFFALSE 30173
// ComWalk ( un ) ;
30164: LD_VAR 0 2
30168: PPUSH
30169: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30173: LD_VAR 0 2
30177: PPUSH
30178: LD_INT 8
30180: PPUSH
30181: CALL_OW 336
// end ;
30185: PPOPN 3
30187: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30188: LD_EXP 66
30192: PUSH
30193: LD_EXP 110
30197: AND
30198: IFFALSE 30342
30200: GO 30202
30202: DISABLE
30203: LD_INT 0
30205: PPUSH
30206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30207: LD_ADDR_VAR 0 2
30211: PUSH
30212: LD_INT 22
30214: PUSH
30215: LD_OWVAR 2
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 21
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: LD_INT 34
30239: PUSH
30240: LD_INT 12
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 34
30249: PUSH
30250: LD_INT 51
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 34
30259: PUSH
30260: LD_INT 32
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: PPUSH
30278: CALL_OW 69
30282: ST_TO_ADDR
// if not tmp then
30283: LD_VAR 0 2
30287: NOT
30288: IFFALSE 30292
// exit ;
30290: GO 30342
// for i in tmp do
30292: LD_ADDR_VAR 0 1
30296: PUSH
30297: LD_VAR 0 2
30301: PUSH
30302: FOR_IN
30303: IFFALSE 30340
// if GetCargo ( i , mat_artifact ) = 0 then
30305: LD_VAR 0 1
30309: PPUSH
30310: LD_INT 4
30312: PPUSH
30313: CALL_OW 289
30317: PUSH
30318: LD_INT 0
30320: EQUAL
30321: IFFALSE 30338
// SetCargo ( i , mat_siberit , 100 ) ;
30323: LD_VAR 0 1
30327: PPUSH
30328: LD_INT 3
30330: PPUSH
30331: LD_INT 100
30333: PPUSH
30334: CALL_OW 290
30338: GO 30302
30340: POP
30341: POP
// end ;
30342: PPOPN 2
30344: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30345: LD_EXP 66
30349: PUSH
30350: LD_EXP 111
30354: AND
30355: IFFALSE 30538
30357: GO 30359
30359: DISABLE
30360: LD_INT 0
30362: PPUSH
30363: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30364: LD_ADDR_VAR 0 2
30368: PUSH
30369: LD_INT 22
30371: PUSH
30372: LD_OWVAR 2
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PPUSH
30381: CALL_OW 69
30385: ST_TO_ADDR
// if not tmp then
30386: LD_VAR 0 2
30390: NOT
30391: IFFALSE 30395
// exit ;
30393: GO 30538
// for i := 1 to 2 do
30395: LD_ADDR_VAR 0 1
30399: PUSH
30400: DOUBLE
30401: LD_INT 1
30403: DEC
30404: ST_TO_ADDR
30405: LD_INT 2
30407: PUSH
30408: FOR_TO
30409: IFFALSE 30536
// begin uc_side := your_side ;
30411: LD_ADDR_OWVAR 20
30415: PUSH
30416: LD_OWVAR 2
30420: ST_TO_ADDR
// uc_nation := nation_american ;
30421: LD_ADDR_OWVAR 21
30425: PUSH
30426: LD_INT 1
30428: ST_TO_ADDR
// vc_chassis := us_morphling ;
30429: LD_ADDR_OWVAR 37
30433: PUSH
30434: LD_INT 5
30436: ST_TO_ADDR
// vc_engine := engine_siberite ;
30437: LD_ADDR_OWVAR 39
30441: PUSH
30442: LD_INT 3
30444: ST_TO_ADDR
// vc_control := control_computer ;
30445: LD_ADDR_OWVAR 38
30449: PUSH
30450: LD_INT 3
30452: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30453: LD_ADDR_OWVAR 40
30457: PUSH
30458: LD_INT 10
30460: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30461: LD_VAR 0 2
30465: PUSH
30466: LD_INT 1
30468: ARRAY
30469: PPUSH
30470: CALL_OW 310
30474: NOT
30475: IFFALSE 30522
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30477: CALL_OW 45
30481: PPUSH
30482: LD_VAR 0 2
30486: PUSH
30487: LD_INT 1
30489: ARRAY
30490: PPUSH
30491: CALL_OW 250
30495: PPUSH
30496: LD_VAR 0 2
30500: PUSH
30501: LD_INT 1
30503: ARRAY
30504: PPUSH
30505: CALL_OW 251
30509: PPUSH
30510: LD_INT 12
30512: PPUSH
30513: LD_INT 1
30515: PPUSH
30516: CALL_OW 50
30520: GO 30534
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30522: CALL_OW 45
30526: PPUSH
30527: LD_INT 1
30529: PPUSH
30530: CALL_OW 51
// end ;
30534: GO 30408
30536: POP
30537: POP
// end ;
30538: PPOPN 2
30540: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30541: LD_EXP 66
30545: PUSH
30546: LD_EXP 112
30550: AND
30551: IFFALSE 30773
30553: GO 30555
30555: DISABLE
30556: LD_INT 0
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
30562: PPUSH
30563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30564: LD_ADDR_VAR 0 6
30568: PUSH
30569: LD_INT 22
30571: PUSH
30572: LD_OWVAR 2
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 21
30583: PUSH
30584: LD_INT 1
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 23
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: PPUSH
30613: CALL_OW 69
30617: ST_TO_ADDR
// if not tmp then
30618: LD_VAR 0 6
30622: NOT
30623: IFFALSE 30627
// exit ;
30625: GO 30773
// s1 := rand ( 1 , 4 ) ;
30627: LD_ADDR_VAR 0 2
30631: PUSH
30632: LD_INT 1
30634: PPUSH
30635: LD_INT 4
30637: PPUSH
30638: CALL_OW 12
30642: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30643: LD_ADDR_VAR 0 4
30647: PUSH
30648: LD_VAR 0 6
30652: PUSH
30653: LD_INT 1
30655: ARRAY
30656: PPUSH
30657: LD_VAR 0 2
30661: PPUSH
30662: CALL_OW 259
30666: ST_TO_ADDR
// if s1 = 1 then
30667: LD_VAR 0 2
30671: PUSH
30672: LD_INT 1
30674: EQUAL
30675: IFFALSE 30695
// s2 := rand ( 2 , 4 ) else
30677: LD_ADDR_VAR 0 3
30681: PUSH
30682: LD_INT 2
30684: PPUSH
30685: LD_INT 4
30687: PPUSH
30688: CALL_OW 12
30692: ST_TO_ADDR
30693: GO 30703
// s2 := 1 ;
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_INT 1
30702: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30703: LD_ADDR_VAR 0 5
30707: PUSH
30708: LD_VAR 0 6
30712: PUSH
30713: LD_INT 1
30715: ARRAY
30716: PPUSH
30717: LD_VAR 0 3
30721: PPUSH
30722: CALL_OW 259
30726: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30727: LD_VAR 0 6
30731: PUSH
30732: LD_INT 1
30734: ARRAY
30735: PPUSH
30736: LD_VAR 0 2
30740: PPUSH
30741: LD_VAR 0 5
30745: PPUSH
30746: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30750: LD_VAR 0 6
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: PPUSH
30759: LD_VAR 0 3
30763: PPUSH
30764: LD_VAR 0 4
30768: PPUSH
30769: CALL_OW 237
// end ;
30773: PPOPN 6
30775: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30776: LD_EXP 66
30780: PUSH
30781: LD_EXP 113
30785: AND
30786: IFFALSE 30865
30788: GO 30790
30790: DISABLE
30791: LD_INT 0
30793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30794: LD_ADDR_VAR 0 1
30798: PUSH
30799: LD_INT 22
30801: PUSH
30802: LD_OWVAR 2
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 30
30813: PUSH
30814: LD_INT 3
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PPUSH
30825: CALL_OW 69
30829: ST_TO_ADDR
// if not tmp then
30830: LD_VAR 0 1
30834: NOT
30835: IFFALSE 30839
// exit ;
30837: GO 30865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30839: LD_VAR 0 1
30843: PUSH
30844: LD_INT 1
30846: PPUSH
30847: LD_VAR 0 1
30851: PPUSH
30852: CALL_OW 12
30856: ARRAY
30857: PPUSH
30858: LD_INT 1
30860: PPUSH
30861: CALL_OW 234
// end ;
30865: PPOPN 1
30867: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30868: LD_EXP 66
30872: PUSH
30873: LD_EXP 114
30877: AND
30878: IFFALSE 30990
30880: GO 30882
30882: DISABLE
30883: LD_INT 0
30885: PPUSH
30886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30887: LD_ADDR_VAR 0 2
30891: PUSH
30892: LD_INT 22
30894: PUSH
30895: LD_OWVAR 2
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: LD_INT 30
30909: PUSH
30910: LD_INT 27
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 30
30919: PUSH
30920: LD_INT 26
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 30
30929: PUSH
30930: LD_INT 28
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PPUSH
30947: CALL_OW 69
30951: ST_TO_ADDR
// if not tmp then
30952: LD_VAR 0 2
30956: NOT
30957: IFFALSE 30961
// exit ;
30959: GO 30990
// for i in tmp do
30961: LD_ADDR_VAR 0 1
30965: PUSH
30966: LD_VAR 0 2
30970: PUSH
30971: FOR_IN
30972: IFFALSE 30988
// SetLives ( i , 1 ) ;
30974: LD_VAR 0 1
30978: PPUSH
30979: LD_INT 1
30981: PPUSH
30982: CALL_OW 234
30986: GO 30971
30988: POP
30989: POP
// end ;
30990: PPOPN 2
30992: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30993: LD_EXP 66
30997: PUSH
30998: LD_EXP 115
31002: AND
31003: IFFALSE 31290
31005: GO 31007
31007: DISABLE
31008: LD_INT 0
31010: PPUSH
31011: PPUSH
31012: PPUSH
// begin i := rand ( 1 , 7 ) ;
31013: LD_ADDR_VAR 0 1
31017: PUSH
31018: LD_INT 1
31020: PPUSH
31021: LD_INT 7
31023: PPUSH
31024: CALL_OW 12
31028: ST_TO_ADDR
// case i of 1 :
31029: LD_VAR 0 1
31033: PUSH
31034: LD_INT 1
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31052
31042: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31043: LD_STRING earthquake(getX(game), 0, 32)
31045: PPUSH
31046: CALL_OW 559
31050: GO 31290
31052: LD_INT 2
31054: DOUBLE
31055: EQUAL
31056: IFTRUE 31060
31058: GO 31074
31060: POP
// begin ToLua ( displayStucuk(); ) ;
31061: LD_STRING displayStucuk();
31063: PPUSH
31064: CALL_OW 559
// ResetFog ;
31068: CALL_OW 335
// end ; 3 :
31072: GO 31290
31074: LD_INT 3
31076: DOUBLE
31077: EQUAL
31078: IFTRUE 31082
31080: GO 31186
31082: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31083: LD_ADDR_VAR 0 2
31087: PUSH
31088: LD_INT 22
31090: PUSH
31091: LD_OWVAR 2
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 25
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PPUSH
31114: CALL_OW 69
31118: ST_TO_ADDR
// if not tmp then
31119: LD_VAR 0 2
31123: NOT
31124: IFFALSE 31128
// exit ;
31126: GO 31290
// un := tmp [ rand ( 1 , tmp ) ] ;
31128: LD_ADDR_VAR 0 3
31132: PUSH
31133: LD_VAR 0 2
31137: PUSH
31138: LD_INT 1
31140: PPUSH
31141: LD_VAR 0 2
31145: PPUSH
31146: CALL_OW 12
31150: ARRAY
31151: ST_TO_ADDR
// if Crawls ( un ) then
31152: LD_VAR 0 3
31156: PPUSH
31157: CALL_OW 318
31161: IFFALSE 31172
// ComWalk ( un ) ;
31163: LD_VAR 0 3
31167: PPUSH
31168: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31172: LD_VAR 0 3
31176: PPUSH
31177: LD_INT 8
31179: PPUSH
31180: CALL_OW 336
// end ; 4 :
31184: GO 31290
31186: LD_INT 4
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31268
31194: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_INT 22
31202: PUSH
31203: LD_OWVAR 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 30
31214: PUSH
31215: LD_INT 29
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PPUSH
31226: CALL_OW 69
31230: ST_TO_ADDR
// if not tmp then
31231: LD_VAR 0 2
31235: NOT
31236: IFFALSE 31240
// exit ;
31238: GO 31290
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31240: LD_VAR 0 2
31244: PUSH
31245: LD_INT 1
31247: ARRAY
31248: PPUSH
31249: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31253: LD_VAR 0 2
31257: PUSH
31258: LD_INT 1
31260: ARRAY
31261: PPUSH
31262: CALL_OW 65
// end ; 5 .. 7 :
31266: GO 31290
31268: LD_INT 5
31270: DOUBLE
31271: GREATEREQUAL
31272: IFFALSE 31280
31274: LD_INT 7
31276: DOUBLE
31277: LESSEQUAL
31278: IFTRUE 31282
31280: GO 31289
31282: POP
// StreamSibBomb ; end ;
31283: CALL 27527 0 0
31287: GO 31290
31289: POP
// end ;
31290: PPOPN 3
31292: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31293: LD_EXP 66
31297: PUSH
31298: LD_EXP 116
31302: AND
31303: IFFALSE 31459
31305: GO 31307
31307: DISABLE
31308: LD_INT 0
31310: PPUSH
31311: PPUSH
31312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31313: LD_ADDR_VAR 0 2
31317: PUSH
31318: LD_INT 81
31320: PUSH
31321: LD_OWVAR 2
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: LD_INT 21
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 21
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PPUSH
31362: CALL_OW 69
31366: ST_TO_ADDR
// if not tmp then
31367: LD_VAR 0 2
31371: NOT
31372: IFFALSE 31376
// exit ;
31374: GO 31459
// p := 0 ;
31376: LD_ADDR_VAR 0 3
31380: PUSH
31381: LD_INT 0
31383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31384: LD_INT 35
31386: PPUSH
31387: CALL_OW 67
// p := p + 1 ;
31391: LD_ADDR_VAR 0 3
31395: PUSH
31396: LD_VAR 0 3
31400: PUSH
31401: LD_INT 1
31403: PLUS
31404: ST_TO_ADDR
// for i in tmp do
31405: LD_ADDR_VAR 0 1
31409: PUSH
31410: LD_VAR 0 2
31414: PUSH
31415: FOR_IN
31416: IFFALSE 31447
// if GetLives ( i ) < 1000 then
31418: LD_VAR 0 1
31422: PPUSH
31423: CALL_OW 256
31427: PUSH
31428: LD_INT 1000
31430: LESS
31431: IFFALSE 31445
// SetLives ( i , 1000 ) ;
31433: LD_VAR 0 1
31437: PPUSH
31438: LD_INT 1000
31440: PPUSH
31441: CALL_OW 234
31445: GO 31415
31447: POP
31448: POP
// until p > 20 ;
31449: LD_VAR 0 3
31453: PUSH
31454: LD_INT 20
31456: GREATER
31457: IFFALSE 31384
// end ;
31459: PPOPN 3
31461: END
// every 0 0$1 trigger StreamModeActive and sTime do
31462: LD_EXP 66
31466: PUSH
31467: LD_EXP 117
31471: AND
31472: IFFALSE 31507
31474: GO 31476
31476: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31477: LD_INT 28
31479: PPUSH
31480: LD_OWVAR 2
31484: PPUSH
31485: LD_INT 2
31487: PPUSH
31488: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31492: LD_INT 30
31494: PPUSH
31495: LD_OWVAR 2
31499: PPUSH
31500: LD_INT 2
31502: PPUSH
31503: CALL_OW 322
// end ;
31507: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31508: LD_EXP 66
31512: PUSH
31513: LD_EXP 118
31517: AND
31518: IFFALSE 31639
31520: GO 31522
31522: DISABLE
31523: LD_INT 0
31525: PPUSH
31526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31527: LD_ADDR_VAR 0 2
31531: PUSH
31532: LD_INT 22
31534: PUSH
31535: LD_OWVAR 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 21
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 3
31556: PUSH
31557: LD_INT 23
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: PPUSH
31576: CALL_OW 69
31580: ST_TO_ADDR
// if not tmp then
31581: LD_VAR 0 2
31585: NOT
31586: IFFALSE 31590
// exit ;
31588: GO 31639
// for i in tmp do
31590: LD_ADDR_VAR 0 1
31594: PUSH
31595: LD_VAR 0 2
31599: PUSH
31600: FOR_IN
31601: IFFALSE 31637
// begin if Crawls ( i ) then
31603: LD_VAR 0 1
31607: PPUSH
31608: CALL_OW 318
31612: IFFALSE 31623
// ComWalk ( i ) ;
31614: LD_VAR 0 1
31618: PPUSH
31619: CALL_OW 138
// SetClass ( i , 2 ) ;
31623: LD_VAR 0 1
31627: PPUSH
31628: LD_INT 2
31630: PPUSH
31631: CALL_OW 336
// end ;
31635: GO 31600
31637: POP
31638: POP
// end ;
31639: PPOPN 2
31641: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31642: LD_EXP 66
31646: PUSH
31647: LD_EXP 119
31651: AND
31652: IFFALSE 31940
31654: GO 31656
31656: DISABLE
31657: LD_INT 0
31659: PPUSH
31660: PPUSH
31661: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31662: LD_OWVAR 2
31666: PPUSH
31667: LD_INT 9
31669: PPUSH
31670: LD_INT 1
31672: PPUSH
31673: LD_INT 1
31675: PPUSH
31676: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31680: LD_INT 9
31682: PPUSH
31683: LD_OWVAR 2
31687: PPUSH
31688: CALL_OW 343
// uc_side := 9 ;
31692: LD_ADDR_OWVAR 20
31696: PUSH
31697: LD_INT 9
31699: ST_TO_ADDR
// uc_nation := 2 ;
31700: LD_ADDR_OWVAR 21
31704: PUSH
31705: LD_INT 2
31707: ST_TO_ADDR
// hc_name := Dark Warrior ;
31708: LD_ADDR_OWVAR 26
31712: PUSH
31713: LD_STRING Dark Warrior
31715: ST_TO_ADDR
// hc_gallery :=  ;
31716: LD_ADDR_OWVAR 33
31720: PUSH
31721: LD_STRING 
31723: ST_TO_ADDR
// hc_noskilllimit := true ;
31724: LD_ADDR_OWVAR 76
31728: PUSH
31729: LD_INT 1
31731: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31732: LD_ADDR_OWVAR 31
31736: PUSH
31737: LD_INT 30
31739: PUSH
31740: LD_INT 30
31742: PUSH
31743: LD_INT 30
31745: PUSH
31746: LD_INT 30
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: ST_TO_ADDR
// un := CreateHuman ;
31755: LD_ADDR_VAR 0 3
31759: PUSH
31760: CALL_OW 44
31764: ST_TO_ADDR
// hc_noskilllimit := false ;
31765: LD_ADDR_OWVAR 76
31769: PUSH
31770: LD_INT 0
31772: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31773: LD_VAR 0 3
31777: PPUSH
31778: LD_INT 1
31780: PPUSH
31781: CALL_OW 51
// ToLua ( playRanger() ) ;
31785: LD_STRING playRanger()
31787: PPUSH
31788: CALL_OW 559
// p := 0 ;
31792: LD_ADDR_VAR 0 2
31796: PUSH
31797: LD_INT 0
31799: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31800: LD_INT 35
31802: PPUSH
31803: CALL_OW 67
// p := p + 1 ;
31807: LD_ADDR_VAR 0 2
31811: PUSH
31812: LD_VAR 0 2
31816: PUSH
31817: LD_INT 1
31819: PLUS
31820: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31821: LD_VAR 0 3
31825: PPUSH
31826: CALL_OW 256
31830: PUSH
31831: LD_INT 1000
31833: LESS
31834: IFFALSE 31848
// SetLives ( un , 1000 ) ;
31836: LD_VAR 0 3
31840: PPUSH
31841: LD_INT 1000
31843: PPUSH
31844: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31848: LD_VAR 0 3
31852: PPUSH
31853: LD_INT 81
31855: PUSH
31856: LD_OWVAR 2
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 91
31867: PUSH
31868: LD_VAR 0 3
31872: PUSH
31873: LD_INT 30
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PPUSH
31885: CALL_OW 69
31889: PPUSH
31890: LD_VAR 0 3
31894: PPUSH
31895: CALL_OW 74
31899: PPUSH
31900: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31904: LD_VAR 0 2
31908: PUSH
31909: LD_INT 80
31911: GREATER
31912: PUSH
31913: LD_VAR 0 3
31917: PPUSH
31918: CALL_OW 301
31922: OR
31923: IFFALSE 31800
// if un then
31925: LD_VAR 0 3
31929: IFFALSE 31940
// RemoveUnit ( un ) ;
31931: LD_VAR 0 3
31935: PPUSH
31936: CALL_OW 64
// end ;
31940: PPOPN 3
31942: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31943: LD_EXP 120
31947: IFFALSE 32063
31949: GO 31951
31951: DISABLE
31952: LD_INT 0
31954: PPUSH
31955: PPUSH
31956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31957: LD_ADDR_VAR 0 2
31961: PUSH
31962: LD_INT 81
31964: PUSH
31965: LD_OWVAR 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 21
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PPUSH
31988: CALL_OW 69
31992: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31993: LD_STRING playComputer()
31995: PPUSH
31996: CALL_OW 559
// if not tmp then
32000: LD_VAR 0 2
32004: NOT
32005: IFFALSE 32009
// exit ;
32007: GO 32063
// for i in tmp do
32009: LD_ADDR_VAR 0 1
32013: PUSH
32014: LD_VAR 0 2
32018: PUSH
32019: FOR_IN
32020: IFFALSE 32061
// for j := 1 to 4 do
32022: LD_ADDR_VAR 0 3
32026: PUSH
32027: DOUBLE
32028: LD_INT 1
32030: DEC
32031: ST_TO_ADDR
32032: LD_INT 4
32034: PUSH
32035: FOR_TO
32036: IFFALSE 32057
// SetSkill ( i , j , 10 ) ;
32038: LD_VAR 0 1
32042: PPUSH
32043: LD_VAR 0 3
32047: PPUSH
32048: LD_INT 10
32050: PPUSH
32051: CALL_OW 237
32055: GO 32035
32057: POP
32058: POP
32059: GO 32019
32061: POP
32062: POP
// end ;
32063: PPOPN 3
32065: END
// every 0 0$1 trigger s30 do var i , tmp ;
32066: LD_EXP 121
32070: IFFALSE 32139
32072: GO 32074
32074: DISABLE
32075: LD_INT 0
32077: PPUSH
32078: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32079: LD_ADDR_VAR 0 2
32083: PUSH
32084: LD_INT 22
32086: PUSH
32087: LD_OWVAR 2
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PPUSH
32096: CALL_OW 69
32100: ST_TO_ADDR
// if not tmp then
32101: LD_VAR 0 2
32105: NOT
32106: IFFALSE 32110
// exit ;
32108: GO 32139
// for i in tmp do
32110: LD_ADDR_VAR 0 1
32114: PUSH
32115: LD_VAR 0 2
32119: PUSH
32120: FOR_IN
32121: IFFALSE 32137
// SetLives ( i , 300 ) ;
32123: LD_VAR 0 1
32127: PPUSH
32128: LD_INT 300
32130: PPUSH
32131: CALL_OW 234
32135: GO 32120
32137: POP
32138: POP
// end ;
32139: PPOPN 2
32141: END
// every 0 0$1 trigger s60 do var i , tmp ;
32142: LD_EXP 122
32146: IFFALSE 32215
32148: GO 32150
32150: DISABLE
32151: LD_INT 0
32153: PPUSH
32154: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32155: LD_ADDR_VAR 0 2
32159: PUSH
32160: LD_INT 22
32162: PUSH
32163: LD_OWVAR 2
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PPUSH
32172: CALL_OW 69
32176: ST_TO_ADDR
// if not tmp then
32177: LD_VAR 0 2
32181: NOT
32182: IFFALSE 32186
// exit ;
32184: GO 32215
// for i in tmp do
32186: LD_ADDR_VAR 0 1
32190: PUSH
32191: LD_VAR 0 2
32195: PUSH
32196: FOR_IN
32197: IFFALSE 32213
// SetLives ( i , 600 ) ;
32199: LD_VAR 0 1
32203: PPUSH
32204: LD_INT 600
32206: PPUSH
32207: CALL_OW 234
32211: GO 32196
32213: POP
32214: POP
// end ;
32215: PPOPN 2
32217: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32218: LD_INT 0
32220: PPUSH
// case cmd of 301 :
32221: LD_VAR 0 1
32225: PUSH
32226: LD_INT 301
32228: DOUBLE
32229: EQUAL
32230: IFTRUE 32234
32232: GO 32266
32234: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32235: LD_VAR 0 6
32239: PPUSH
32240: LD_VAR 0 7
32244: PPUSH
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 4
32254: PPUSH
32255: LD_VAR 0 5
32259: PPUSH
32260: CALL 33467 0 5
32264: GO 32387
32266: LD_INT 302
32268: DOUBLE
32269: EQUAL
32270: IFTRUE 32274
32272: GO 32311
32274: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32275: LD_VAR 0 6
32279: PPUSH
32280: LD_VAR 0 7
32284: PPUSH
32285: LD_VAR 0 8
32289: PPUSH
32290: LD_VAR 0 9
32294: PPUSH
32295: LD_VAR 0 4
32299: PPUSH
32300: LD_VAR 0 5
32304: PPUSH
32305: CALL 33558 0 6
32309: GO 32387
32311: LD_INT 303
32313: DOUBLE
32314: EQUAL
32315: IFTRUE 32319
32317: GO 32356
32319: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32320: LD_VAR 0 6
32324: PPUSH
32325: LD_VAR 0 7
32329: PPUSH
32330: LD_VAR 0 8
32334: PPUSH
32335: LD_VAR 0 9
32339: PPUSH
32340: LD_VAR 0 4
32344: PPUSH
32345: LD_VAR 0 5
32349: PPUSH
32350: CALL 32392 0 6
32354: GO 32387
32356: LD_INT 304
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32386
32364: POP
// hHackTeleport ( unit , x , y ) ; end ;
32365: LD_VAR 0 2
32369: PPUSH
32370: LD_VAR 0 4
32374: PPUSH
32375: LD_VAR 0 5
32379: PPUSH
32380: CALL 34151 0 3
32384: GO 32387
32386: POP
// end ;
32387: LD_VAR 0 12
32391: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32396: LD_VAR 0 1
32400: PUSH
32401: LD_INT 1
32403: LESS
32404: PUSH
32405: LD_VAR 0 1
32409: PUSH
32410: LD_INT 3
32412: GREATER
32413: OR
32414: PUSH
32415: LD_VAR 0 5
32419: PPUSH
32420: LD_VAR 0 6
32424: PPUSH
32425: CALL_OW 428
32429: OR
32430: IFFALSE 32434
// exit ;
32432: GO 33154
// uc_side := your_side ;
32434: LD_ADDR_OWVAR 20
32438: PUSH
32439: LD_OWVAR 2
32443: ST_TO_ADDR
// uc_nation := nation ;
32444: LD_ADDR_OWVAR 21
32448: PUSH
32449: LD_VAR 0 1
32453: ST_TO_ADDR
// bc_level = 1 ;
32454: LD_ADDR_OWVAR 43
32458: PUSH
32459: LD_INT 1
32461: ST_TO_ADDR
// case btype of 1 :
32462: LD_VAR 0 2
32466: PUSH
32467: LD_INT 1
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32475
32473: GO 32486
32475: POP
// bc_type := b_depot ; 2 :
32476: LD_ADDR_OWVAR 42
32480: PUSH
32481: LD_INT 0
32483: ST_TO_ADDR
32484: GO 33098
32486: LD_INT 2
32488: DOUBLE
32489: EQUAL
32490: IFTRUE 32494
32492: GO 32505
32494: POP
// bc_type := b_warehouse ; 3 :
32495: LD_ADDR_OWVAR 42
32499: PUSH
32500: LD_INT 1
32502: ST_TO_ADDR
32503: GO 33098
32505: LD_INT 3
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32524
32513: POP
// bc_type := b_lab ; 4 .. 9 :
32514: LD_ADDR_OWVAR 42
32518: PUSH
32519: LD_INT 6
32521: ST_TO_ADDR
32522: GO 33098
32524: LD_INT 4
32526: DOUBLE
32527: GREATEREQUAL
32528: IFFALSE 32536
32530: LD_INT 9
32532: DOUBLE
32533: LESSEQUAL
32534: IFTRUE 32538
32536: GO 32590
32538: POP
// begin bc_type := b_lab_half ;
32539: LD_ADDR_OWVAR 42
32543: PUSH
32544: LD_INT 7
32546: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32547: LD_ADDR_OWVAR 44
32551: PUSH
32552: LD_INT 10
32554: PUSH
32555: LD_INT 11
32557: PUSH
32558: LD_INT 12
32560: PUSH
32561: LD_INT 15
32563: PUSH
32564: LD_INT 14
32566: PUSH
32567: LD_INT 13
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: PUSH
32578: LD_VAR 0 2
32582: PUSH
32583: LD_INT 3
32585: MINUS
32586: ARRAY
32587: ST_TO_ADDR
// end ; 10 .. 13 :
32588: GO 33098
32590: LD_INT 10
32592: DOUBLE
32593: GREATEREQUAL
32594: IFFALSE 32602
32596: LD_INT 13
32598: DOUBLE
32599: LESSEQUAL
32600: IFTRUE 32604
32602: GO 32681
32604: POP
// begin bc_type := b_lab_full ;
32605: LD_ADDR_OWVAR 42
32609: PUSH
32610: LD_INT 8
32612: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32613: LD_ADDR_OWVAR 44
32617: PUSH
32618: LD_INT 10
32620: PUSH
32621: LD_INT 12
32623: PUSH
32624: LD_INT 14
32626: PUSH
32627: LD_INT 13
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: PUSH
32636: LD_VAR 0 2
32640: PUSH
32641: LD_INT 9
32643: MINUS
32644: ARRAY
32645: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32646: LD_ADDR_OWVAR 45
32650: PUSH
32651: LD_INT 11
32653: PUSH
32654: LD_INT 15
32656: PUSH
32657: LD_INT 12
32659: PUSH
32660: LD_INT 15
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: PUSH
32669: LD_VAR 0 2
32673: PUSH
32674: LD_INT 9
32676: MINUS
32677: ARRAY
32678: ST_TO_ADDR
// end ; 14 :
32679: GO 33098
32681: LD_INT 14
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32700
32689: POP
// bc_type := b_workshop ; 15 :
32690: LD_ADDR_OWVAR 42
32694: PUSH
32695: LD_INT 2
32697: ST_TO_ADDR
32698: GO 33098
32700: LD_INT 15
32702: DOUBLE
32703: EQUAL
32704: IFTRUE 32708
32706: GO 32719
32708: POP
// bc_type := b_factory ; 16 :
32709: LD_ADDR_OWVAR 42
32713: PUSH
32714: LD_INT 3
32716: ST_TO_ADDR
32717: GO 33098
32719: LD_INT 16
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32738
32727: POP
// bc_type := b_ext_gun ; 17 :
32728: LD_ADDR_OWVAR 42
32732: PUSH
32733: LD_INT 17
32735: ST_TO_ADDR
32736: GO 33098
32738: LD_INT 17
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32774
32746: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32747: LD_ADDR_OWVAR 42
32751: PUSH
32752: LD_INT 19
32754: PUSH
32755: LD_INT 23
32757: PUSH
32758: LD_INT 19
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: PUSH
32766: LD_VAR 0 1
32770: ARRAY
32771: ST_TO_ADDR
32772: GO 33098
32774: LD_INT 18
32776: DOUBLE
32777: EQUAL
32778: IFTRUE 32782
32780: GO 32793
32782: POP
// bc_type := b_ext_radar ; 19 :
32783: LD_ADDR_OWVAR 42
32787: PUSH
32788: LD_INT 20
32790: ST_TO_ADDR
32791: GO 33098
32793: LD_INT 19
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 32812
32801: POP
// bc_type := b_ext_radio ; 20 :
32802: LD_ADDR_OWVAR 42
32806: PUSH
32807: LD_INT 22
32809: ST_TO_ADDR
32810: GO 33098
32812: LD_INT 20
32814: DOUBLE
32815: EQUAL
32816: IFTRUE 32820
32818: GO 32831
32820: POP
// bc_type := b_ext_siberium ; 21 :
32821: LD_ADDR_OWVAR 42
32825: PUSH
32826: LD_INT 21
32828: ST_TO_ADDR
32829: GO 33098
32831: LD_INT 21
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32839
32837: GO 32850
32839: POP
// bc_type := b_ext_computer ; 22 :
32840: LD_ADDR_OWVAR 42
32844: PUSH
32845: LD_INT 24
32847: ST_TO_ADDR
32848: GO 33098
32850: LD_INT 22
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32858
32856: GO 32869
32858: POP
// bc_type := b_ext_track ; 23 :
32859: LD_ADDR_OWVAR 42
32863: PUSH
32864: LD_INT 16
32866: ST_TO_ADDR
32867: GO 33098
32869: LD_INT 23
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32888
32877: POP
// bc_type := b_ext_laser ; 24 :
32878: LD_ADDR_OWVAR 42
32882: PUSH
32883: LD_INT 25
32885: ST_TO_ADDR
32886: GO 33098
32888: LD_INT 24
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 32907
32896: POP
// bc_type := b_control_tower ; 25 :
32897: LD_ADDR_OWVAR 42
32901: PUSH
32902: LD_INT 36
32904: ST_TO_ADDR
32905: GO 33098
32907: LD_INT 25
32909: DOUBLE
32910: EQUAL
32911: IFTRUE 32915
32913: GO 32926
32915: POP
// bc_type := b_breastwork ; 26 :
32916: LD_ADDR_OWVAR 42
32920: PUSH
32921: LD_INT 31
32923: ST_TO_ADDR
32924: GO 33098
32926: LD_INT 26
32928: DOUBLE
32929: EQUAL
32930: IFTRUE 32934
32932: GO 32945
32934: POP
// bc_type := b_bunker ; 27 :
32935: LD_ADDR_OWVAR 42
32939: PUSH
32940: LD_INT 32
32942: ST_TO_ADDR
32943: GO 33098
32945: LD_INT 27
32947: DOUBLE
32948: EQUAL
32949: IFTRUE 32953
32951: GO 32964
32953: POP
// bc_type := b_turret ; 28 :
32954: LD_ADDR_OWVAR 42
32958: PUSH
32959: LD_INT 33
32961: ST_TO_ADDR
32962: GO 33098
32964: LD_INT 28
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32972
32970: GO 32983
32972: POP
// bc_type := b_armoury ; 29 :
32973: LD_ADDR_OWVAR 42
32977: PUSH
32978: LD_INT 4
32980: ST_TO_ADDR
32981: GO 33098
32983: LD_INT 29
32985: DOUBLE
32986: EQUAL
32987: IFTRUE 32991
32989: GO 33002
32991: POP
// bc_type := b_barracks ; 30 :
32992: LD_ADDR_OWVAR 42
32996: PUSH
32997: LD_INT 5
32999: ST_TO_ADDR
33000: GO 33098
33002: LD_INT 30
33004: DOUBLE
33005: EQUAL
33006: IFTRUE 33010
33008: GO 33021
33010: POP
// bc_type := b_solar_power ; 31 :
33011: LD_ADDR_OWVAR 42
33015: PUSH
33016: LD_INT 27
33018: ST_TO_ADDR
33019: GO 33098
33021: LD_INT 31
33023: DOUBLE
33024: EQUAL
33025: IFTRUE 33029
33027: GO 33040
33029: POP
// bc_type := b_oil_power ; 32 :
33030: LD_ADDR_OWVAR 42
33034: PUSH
33035: LD_INT 26
33037: ST_TO_ADDR
33038: GO 33098
33040: LD_INT 32
33042: DOUBLE
33043: EQUAL
33044: IFTRUE 33048
33046: GO 33059
33048: POP
// bc_type := b_siberite_power ; 33 :
33049: LD_ADDR_OWVAR 42
33053: PUSH
33054: LD_INT 28
33056: ST_TO_ADDR
33057: GO 33098
33059: LD_INT 33
33061: DOUBLE
33062: EQUAL
33063: IFTRUE 33067
33065: GO 33078
33067: POP
// bc_type := b_oil_mine ; 34 :
33068: LD_ADDR_OWVAR 42
33072: PUSH
33073: LD_INT 29
33075: ST_TO_ADDR
33076: GO 33098
33078: LD_INT 34
33080: DOUBLE
33081: EQUAL
33082: IFTRUE 33086
33084: GO 33097
33086: POP
// bc_type := b_siberite_mine ; end ;
33087: LD_ADDR_OWVAR 42
33091: PUSH
33092: LD_INT 30
33094: ST_TO_ADDR
33095: GO 33098
33097: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33098: LD_ADDR_VAR 0 8
33102: PUSH
33103: LD_VAR 0 5
33107: PPUSH
33108: LD_VAR 0 6
33112: PPUSH
33113: LD_VAR 0 3
33117: PPUSH
33118: CALL_OW 47
33122: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33123: LD_OWVAR 42
33127: PUSH
33128: LD_INT 32
33130: PUSH
33131: LD_INT 33
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: IN
33138: IFFALSE 33154
// PlaceWeaponTurret ( b , weapon ) ;
33140: LD_VAR 0 8
33144: PPUSH
33145: LD_VAR 0 4
33149: PPUSH
33150: CALL_OW 431
// end ;
33154: LD_VAR 0 7
33158: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33159: LD_INT 0
33161: PPUSH
33162: PPUSH
33163: PPUSH
33164: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33165: LD_ADDR_VAR 0 4
33169: PUSH
33170: LD_INT 22
33172: PUSH
33173: LD_OWVAR 2
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: LD_INT 30
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 30
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PPUSH
33214: CALL_OW 69
33218: ST_TO_ADDR
// if not tmp then
33219: LD_VAR 0 4
33223: NOT
33224: IFFALSE 33228
// exit ;
33226: GO 33287
// for i in tmp do
33228: LD_ADDR_VAR 0 2
33232: PUSH
33233: LD_VAR 0 4
33237: PUSH
33238: FOR_IN
33239: IFFALSE 33285
// for j = 1 to 3 do
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: DOUBLE
33247: LD_INT 1
33249: DEC
33250: ST_TO_ADDR
33251: LD_INT 3
33253: PUSH
33254: FOR_TO
33255: IFFALSE 33281
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33257: LD_VAR 0 2
33261: PPUSH
33262: CALL_OW 274
33266: PPUSH
33267: LD_VAR 0 3
33271: PPUSH
33272: LD_INT 99999
33274: PPUSH
33275: CALL_OW 277
33279: GO 33254
33281: POP
33282: POP
33283: GO 33238
33285: POP
33286: POP
// end ;
33287: LD_VAR 0 1
33291: RET
// export function hHackSetLevel10 ; var i , j ; begin
33292: LD_INT 0
33294: PPUSH
33295: PPUSH
33296: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33297: LD_ADDR_VAR 0 2
33301: PUSH
33302: LD_INT 21
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PPUSH
33312: CALL_OW 69
33316: PUSH
33317: FOR_IN
33318: IFFALSE 33370
// if IsSelected ( i ) then
33320: LD_VAR 0 2
33324: PPUSH
33325: CALL_OW 306
33329: IFFALSE 33368
// begin for j := 1 to 4 do
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: DOUBLE
33337: LD_INT 1
33339: DEC
33340: ST_TO_ADDR
33341: LD_INT 4
33343: PUSH
33344: FOR_TO
33345: IFFALSE 33366
// SetSkill ( i , j , 10 ) ;
33347: LD_VAR 0 2
33351: PPUSH
33352: LD_VAR 0 3
33356: PPUSH
33357: LD_INT 10
33359: PPUSH
33360: CALL_OW 237
33364: GO 33344
33366: POP
33367: POP
// end ;
33368: GO 33317
33370: POP
33371: POP
// end ;
33372: LD_VAR 0 1
33376: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33377: LD_INT 0
33379: PPUSH
33380: PPUSH
33381: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33382: LD_ADDR_VAR 0 2
33386: PUSH
33387: LD_INT 22
33389: PUSH
33390: LD_OWVAR 2
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 21
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PPUSH
33413: CALL_OW 69
33417: PUSH
33418: FOR_IN
33419: IFFALSE 33460
// begin for j := 1 to 4 do
33421: LD_ADDR_VAR 0 3
33425: PUSH
33426: DOUBLE
33427: LD_INT 1
33429: DEC
33430: ST_TO_ADDR
33431: LD_INT 4
33433: PUSH
33434: FOR_TO
33435: IFFALSE 33456
// SetSkill ( i , j , 10 ) ;
33437: LD_VAR 0 2
33441: PPUSH
33442: LD_VAR 0 3
33446: PPUSH
33447: LD_INT 10
33449: PPUSH
33450: CALL_OW 237
33454: GO 33434
33456: POP
33457: POP
// end ;
33458: GO 33418
33460: POP
33461: POP
// end ;
33462: LD_VAR 0 1
33466: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33467: LD_INT 0
33469: PPUSH
// uc_side := your_side ;
33470: LD_ADDR_OWVAR 20
33474: PUSH
33475: LD_OWVAR 2
33479: ST_TO_ADDR
// uc_nation := nation ;
33480: LD_ADDR_OWVAR 21
33484: PUSH
33485: LD_VAR 0 1
33489: ST_TO_ADDR
// InitHc ;
33490: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33494: LD_INT 0
33496: PPUSH
33497: LD_VAR 0 2
33501: PPUSH
33502: LD_VAR 0 3
33506: PPUSH
33507: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33511: LD_VAR 0 4
33515: PPUSH
33516: LD_VAR 0 5
33520: PPUSH
33521: CALL_OW 428
33525: PUSH
33526: LD_INT 0
33528: EQUAL
33529: IFFALSE 33553
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33531: CALL_OW 44
33535: PPUSH
33536: LD_VAR 0 4
33540: PPUSH
33541: LD_VAR 0 5
33545: PPUSH
33546: LD_INT 1
33548: PPUSH
33549: CALL_OW 48
// end ;
33553: LD_VAR 0 6
33557: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33558: LD_INT 0
33560: PPUSH
33561: PPUSH
// uc_side := your_side ;
33562: LD_ADDR_OWVAR 20
33566: PUSH
33567: LD_OWVAR 2
33571: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33572: LD_VAR 0 1
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: LD_INT 4
33588: PUSH
33589: LD_INT 5
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: IN
33599: IFFALSE 33611
// uc_nation := nation_american else
33601: LD_ADDR_OWVAR 21
33605: PUSH
33606: LD_INT 1
33608: ST_TO_ADDR
33609: GO 33654
// if chassis in [ 11 , 12 , 13 , 14 ] then
33611: LD_VAR 0 1
33615: PUSH
33616: LD_INT 11
33618: PUSH
33619: LD_INT 12
33621: PUSH
33622: LD_INT 13
33624: PUSH
33625: LD_INT 14
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: IN
33634: IFFALSE 33646
// uc_nation := nation_arabian else
33636: LD_ADDR_OWVAR 21
33640: PUSH
33641: LD_INT 2
33643: ST_TO_ADDR
33644: GO 33654
// uc_nation := nation_russian ;
33646: LD_ADDR_OWVAR 21
33650: PUSH
33651: LD_INT 3
33653: ST_TO_ADDR
// vc_chassis := chassis ;
33654: LD_ADDR_OWVAR 37
33658: PUSH
33659: LD_VAR 0 1
33663: ST_TO_ADDR
// vc_engine := engine ;
33664: LD_ADDR_OWVAR 39
33668: PUSH
33669: LD_VAR 0 2
33673: ST_TO_ADDR
// vc_control := control ;
33674: LD_ADDR_OWVAR 38
33678: PUSH
33679: LD_VAR 0 3
33683: ST_TO_ADDR
// vc_weapon := weapon ;
33684: LD_ADDR_OWVAR 40
33688: PUSH
33689: LD_VAR 0 4
33693: ST_TO_ADDR
// un := CreateVehicle ;
33694: LD_ADDR_VAR 0 8
33698: PUSH
33699: CALL_OW 45
33703: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33704: LD_VAR 0 8
33708: PPUSH
33709: LD_INT 0
33711: PPUSH
33712: LD_INT 5
33714: PPUSH
33715: CALL_OW 12
33719: PPUSH
33720: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33724: LD_VAR 0 8
33728: PPUSH
33729: LD_VAR 0 5
33733: PPUSH
33734: LD_VAR 0 6
33738: PPUSH
33739: LD_INT 1
33741: PPUSH
33742: CALL_OW 48
// end ;
33746: LD_VAR 0 7
33750: RET
// export hInvincible ; every 1 do
33751: GO 33753
33753: DISABLE
// hInvincible := [ ] ;
33754: LD_ADDR_EXP 123
33758: PUSH
33759: EMPTY
33760: ST_TO_ADDR
33761: END
// every 10 do var i ;
33762: GO 33764
33764: DISABLE
33765: LD_INT 0
33767: PPUSH
// begin enable ;
33768: ENABLE
// if not hInvincible then
33769: LD_EXP 123
33773: NOT
33774: IFFALSE 33778
// exit ;
33776: GO 33822
// for i in hInvincible do
33778: LD_ADDR_VAR 0 1
33782: PUSH
33783: LD_EXP 123
33787: PUSH
33788: FOR_IN
33789: IFFALSE 33820
// if GetLives ( i ) < 1000 then
33791: LD_VAR 0 1
33795: PPUSH
33796: CALL_OW 256
33800: PUSH
33801: LD_INT 1000
33803: LESS
33804: IFFALSE 33818
// SetLives ( i , 1000 ) ;
33806: LD_VAR 0 1
33810: PPUSH
33811: LD_INT 1000
33813: PPUSH
33814: CALL_OW 234
33818: GO 33788
33820: POP
33821: POP
// end ;
33822: PPOPN 1
33824: END
// export function hHackInvincible ; var i ; begin
33825: LD_INT 0
33827: PPUSH
33828: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33829: LD_ADDR_VAR 0 2
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: LD_INT 21
33839: PUSH
33840: LD_INT 1
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 21
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: LIST
33861: PPUSH
33862: CALL_OW 69
33866: PUSH
33867: FOR_IN
33868: IFFALSE 33929
// if IsSelected ( i ) then
33870: LD_VAR 0 2
33874: PPUSH
33875: CALL_OW 306
33879: IFFALSE 33927
// begin if i in hInvincible then
33881: LD_VAR 0 2
33885: PUSH
33886: LD_EXP 123
33890: IN
33891: IFFALSE 33911
// hInvincible := hInvincible diff i else
33893: LD_ADDR_EXP 123
33897: PUSH
33898: LD_EXP 123
33902: PUSH
33903: LD_VAR 0 2
33907: DIFF
33908: ST_TO_ADDR
33909: GO 33927
// hInvincible := hInvincible union i ;
33911: LD_ADDR_EXP 123
33915: PUSH
33916: LD_EXP 123
33920: PUSH
33921: LD_VAR 0 2
33925: UNION
33926: ST_TO_ADDR
// end ;
33927: GO 33867
33929: POP
33930: POP
// end ;
33931: LD_VAR 0 1
33935: RET
// export function hHackInvisible ; var i , j ; begin
33936: LD_INT 0
33938: PPUSH
33939: PPUSH
33940: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33941: LD_ADDR_VAR 0 2
33945: PUSH
33946: LD_INT 21
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PPUSH
33956: CALL_OW 69
33960: PUSH
33961: FOR_IN
33962: IFFALSE 33986
// if IsSelected ( i ) then
33964: LD_VAR 0 2
33968: PPUSH
33969: CALL_OW 306
33973: IFFALSE 33984
// ComForceInvisible ( i ) ;
33975: LD_VAR 0 2
33979: PPUSH
33980: CALL_OW 496
33984: GO 33961
33986: POP
33987: POP
// end ;
33988: LD_VAR 0 1
33992: RET
// export function hHackChangeYourSide ; begin
33993: LD_INT 0
33995: PPUSH
// if your_side = 8 then
33996: LD_OWVAR 2
34000: PUSH
34001: LD_INT 8
34003: EQUAL
34004: IFFALSE 34016
// your_side := 0 else
34006: LD_ADDR_OWVAR 2
34010: PUSH
34011: LD_INT 0
34013: ST_TO_ADDR
34014: GO 34030
// your_side := your_side + 1 ;
34016: LD_ADDR_OWVAR 2
34020: PUSH
34021: LD_OWVAR 2
34025: PUSH
34026: LD_INT 1
34028: PLUS
34029: ST_TO_ADDR
// end ;
34030: LD_VAR 0 1
34034: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34035: LD_INT 0
34037: PPUSH
34038: PPUSH
34039: PPUSH
// for i in all_units do
34040: LD_ADDR_VAR 0 2
34044: PUSH
34045: LD_OWVAR 3
34049: PUSH
34050: FOR_IN
34051: IFFALSE 34129
// if IsSelected ( i ) then
34053: LD_VAR 0 2
34057: PPUSH
34058: CALL_OW 306
34062: IFFALSE 34127
// begin j := GetSide ( i ) ;
34064: LD_ADDR_VAR 0 3
34068: PUSH
34069: LD_VAR 0 2
34073: PPUSH
34074: CALL_OW 255
34078: ST_TO_ADDR
// if j = 8 then
34079: LD_VAR 0 3
34083: PUSH
34084: LD_INT 8
34086: EQUAL
34087: IFFALSE 34099
// j := 0 else
34089: LD_ADDR_VAR 0 3
34093: PUSH
34094: LD_INT 0
34096: ST_TO_ADDR
34097: GO 34113
// j := j + 1 ;
34099: LD_ADDR_VAR 0 3
34103: PUSH
34104: LD_VAR 0 3
34108: PUSH
34109: LD_INT 1
34111: PLUS
34112: ST_TO_ADDR
// SetSide ( i , j ) ;
34113: LD_VAR 0 2
34117: PPUSH
34118: LD_VAR 0 3
34122: PPUSH
34123: CALL_OW 235
// end ;
34127: GO 34050
34129: POP
34130: POP
// end ;
34131: LD_VAR 0 1
34135: RET
// export function hHackFog ; begin
34136: LD_INT 0
34138: PPUSH
// FogOff ( true ) ;
34139: LD_INT 1
34141: PPUSH
34142: CALL_OW 344
// end ;
34146: LD_VAR 0 1
34150: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34151: LD_INT 0
34153: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34154: LD_VAR 0 1
34158: PPUSH
34159: LD_VAR 0 2
34163: PPUSH
34164: LD_VAR 0 3
34168: PPUSH
34169: LD_INT 1
34171: PPUSH
34172: LD_INT 1
34174: PPUSH
34175: CALL_OW 483
// CenterOnXY ( x , y ) ;
34179: LD_VAR 0 2
34183: PPUSH
34184: LD_VAR 0 3
34188: PPUSH
34189: CALL_OW 84
// end ;
34193: LD_VAR 0 4
34197: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34198: LD_INT 0
34200: PPUSH
34201: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34202: LD_VAR 0 1
34206: NOT
34207: PUSH
34208: LD_VAR 0 2
34212: PPUSH
34213: LD_VAR 0 3
34217: PPUSH
34218: CALL_OW 488
34222: NOT
34223: OR
34224: PUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 266
34234: PUSH
34235: LD_INT 3
34237: NONEQUAL
34238: PUSH
34239: LD_VAR 0 1
34243: PPUSH
34244: CALL_OW 247
34248: PUSH
34249: LD_INT 1
34251: EQUAL
34252: NOT
34253: AND
34254: OR
34255: IFFALSE 34259
// exit ;
34257: GO 34408
// if GetType ( factory ) = unit_human then
34259: LD_VAR 0 1
34263: PPUSH
34264: CALL_OW 247
34268: PUSH
34269: LD_INT 1
34271: EQUAL
34272: IFFALSE 34289
// factory := IsInUnit ( factory ) ;
34274: LD_ADDR_VAR 0 1
34278: PUSH
34279: LD_VAR 0 1
34283: PPUSH
34284: CALL_OW 310
34288: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 266
34298: PUSH
34299: LD_INT 3
34301: NONEQUAL
34302: IFFALSE 34306
// exit ;
34304: GO 34408
// if HexInfo ( x , y ) = factory then
34306: LD_VAR 0 2
34310: PPUSH
34311: LD_VAR 0 3
34315: PPUSH
34316: CALL_OW 428
34320: PUSH
34321: LD_VAR 0 1
34325: EQUAL
34326: IFFALSE 34353
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34328: LD_ADDR_EXP 124
34332: PUSH
34333: LD_EXP 124
34337: PPUSH
34338: LD_VAR 0 1
34342: PPUSH
34343: LD_INT 0
34345: PPUSH
34346: CALL_OW 1
34350: ST_TO_ADDR
34351: GO 34404
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34353: LD_ADDR_EXP 124
34357: PUSH
34358: LD_EXP 124
34362: PPUSH
34363: LD_VAR 0 1
34367: PPUSH
34368: LD_VAR 0 1
34372: PPUSH
34373: CALL_OW 255
34377: PUSH
34378: LD_VAR 0 1
34382: PUSH
34383: LD_VAR 0 2
34387: PUSH
34388: LD_VAR 0 3
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: PPUSH
34399: CALL_OW 1
34403: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34404: CALL 34413 0 0
// end ;
34408: LD_VAR 0 4
34412: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34413: LD_INT 0
34415: PPUSH
34416: PPUSH
34417: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34418: LD_STRING resetFactoryWaypoint();
34420: PPUSH
34421: CALL_OW 559
// if factoryWaypoints then
34425: LD_EXP 124
34429: IFFALSE 34555
// begin list := PrepareArray ( factoryWaypoints ) ;
34431: LD_ADDR_VAR 0 3
34435: PUSH
34436: LD_EXP 124
34440: PPUSH
34441: CALL 80987 0 1
34445: ST_TO_ADDR
// for i := 1 to list do
34446: LD_ADDR_VAR 0 2
34450: PUSH
34451: DOUBLE
34452: LD_INT 1
34454: DEC
34455: ST_TO_ADDR
34456: LD_VAR 0 3
34460: PUSH
34461: FOR_TO
34462: IFFALSE 34553
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34464: LD_STRING setFactoryWaypointXY(
34466: PUSH
34467: LD_VAR 0 3
34471: PUSH
34472: LD_VAR 0 2
34476: ARRAY
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: STR
34482: PUSH
34483: LD_STRING ,
34485: STR
34486: PUSH
34487: LD_VAR 0 3
34491: PUSH
34492: LD_VAR 0 2
34496: ARRAY
34497: PUSH
34498: LD_INT 2
34500: ARRAY
34501: STR
34502: PUSH
34503: LD_STRING ,
34505: STR
34506: PUSH
34507: LD_VAR 0 3
34511: PUSH
34512: LD_VAR 0 2
34516: ARRAY
34517: PUSH
34518: LD_INT 3
34520: ARRAY
34521: STR
34522: PUSH
34523: LD_STRING ,
34525: STR
34526: PUSH
34527: LD_VAR 0 3
34531: PUSH
34532: LD_VAR 0 2
34536: ARRAY
34537: PUSH
34538: LD_INT 4
34540: ARRAY
34541: STR
34542: PUSH
34543: LD_STRING )
34545: STR
34546: PPUSH
34547: CALL_OW 559
34551: GO 34461
34553: POP
34554: POP
// end ; end ;
34555: LD_VAR 0 1
34559: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34560: LD_INT 0
34562: PPUSH
// if HexInfo ( x , y ) = warehouse then
34563: LD_VAR 0 2
34567: PPUSH
34568: LD_VAR 0 3
34572: PPUSH
34573: CALL_OW 428
34577: PUSH
34578: LD_VAR 0 1
34582: EQUAL
34583: IFFALSE 34610
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34585: LD_ADDR_EXP 125
34589: PUSH
34590: LD_EXP 125
34594: PPUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: LD_INT 0
34602: PPUSH
34603: CALL_OW 1
34607: ST_TO_ADDR
34608: GO 34661
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34610: LD_ADDR_EXP 125
34614: PUSH
34615: LD_EXP 125
34619: PPUSH
34620: LD_VAR 0 1
34624: PPUSH
34625: LD_VAR 0 1
34629: PPUSH
34630: CALL_OW 255
34634: PUSH
34635: LD_VAR 0 1
34639: PUSH
34640: LD_VAR 0 2
34644: PUSH
34645: LD_VAR 0 3
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: PPUSH
34656: CALL_OW 1
34660: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34661: CALL 34670 0 0
// end ;
34665: LD_VAR 0 4
34669: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34670: LD_INT 0
34672: PPUSH
34673: PPUSH
34674: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34675: LD_STRING resetWarehouseGatheringPoints();
34677: PPUSH
34678: CALL_OW 559
// if warehouseGatheringPoints then
34682: LD_EXP 125
34686: IFFALSE 34812
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34688: LD_ADDR_VAR 0 3
34692: PUSH
34693: LD_EXP 125
34697: PPUSH
34698: CALL 80987 0 1
34702: ST_TO_ADDR
// for i := 1 to list do
34703: LD_ADDR_VAR 0 2
34707: PUSH
34708: DOUBLE
34709: LD_INT 1
34711: DEC
34712: ST_TO_ADDR
34713: LD_VAR 0 3
34717: PUSH
34718: FOR_TO
34719: IFFALSE 34810
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34721: LD_STRING setWarehouseGatheringPointXY(
34723: PUSH
34724: LD_VAR 0 3
34728: PUSH
34729: LD_VAR 0 2
34733: ARRAY
34734: PUSH
34735: LD_INT 1
34737: ARRAY
34738: STR
34739: PUSH
34740: LD_STRING ,
34742: STR
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_VAR 0 2
34753: ARRAY
34754: PUSH
34755: LD_INT 2
34757: ARRAY
34758: STR
34759: PUSH
34760: LD_STRING ,
34762: STR
34763: PUSH
34764: LD_VAR 0 3
34768: PUSH
34769: LD_VAR 0 2
34773: ARRAY
34774: PUSH
34775: LD_INT 3
34777: ARRAY
34778: STR
34779: PUSH
34780: LD_STRING ,
34782: STR
34783: PUSH
34784: LD_VAR 0 3
34788: PUSH
34789: LD_VAR 0 2
34793: ARRAY
34794: PUSH
34795: LD_INT 4
34797: ARRAY
34798: STR
34799: PUSH
34800: LD_STRING )
34802: STR
34803: PPUSH
34804: CALL_OW 559
34808: GO 34718
34810: POP
34811: POP
// end ; end ;
34812: LD_VAR 0 1
34816: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34817: LD_EXP 125
34821: IFFALSE 35508
34823: GO 34825
34825: DISABLE
34826: LD_INT 0
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
// begin enable ;
34837: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_EXP 125
34847: PPUSH
34848: CALL 80987 0 1
34852: ST_TO_ADDR
// if not list then
34853: LD_VAR 0 3
34857: NOT
34858: IFFALSE 34862
// exit ;
34860: GO 35508
// for i := 1 to list do
34862: LD_ADDR_VAR 0 1
34866: PUSH
34867: DOUBLE
34868: LD_INT 1
34870: DEC
34871: ST_TO_ADDR
34872: LD_VAR 0 3
34876: PUSH
34877: FOR_TO
34878: IFFALSE 35506
// begin depot := list [ i ] [ 2 ] ;
34880: LD_ADDR_VAR 0 8
34884: PUSH
34885: LD_VAR 0 3
34889: PUSH
34890: LD_VAR 0 1
34894: ARRAY
34895: PUSH
34896: LD_INT 2
34898: ARRAY
34899: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34900: LD_ADDR_VAR 0 5
34904: PUSH
34905: LD_VAR 0 3
34909: PUSH
34910: LD_VAR 0 1
34914: ARRAY
34915: PUSH
34916: LD_INT 1
34918: ARRAY
34919: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34920: LD_VAR 0 8
34924: PPUSH
34925: CALL_OW 301
34929: PUSH
34930: LD_VAR 0 5
34934: PUSH
34935: LD_VAR 0 8
34939: PPUSH
34940: CALL_OW 255
34944: NONEQUAL
34945: OR
34946: IFFALSE 34975
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34948: LD_ADDR_EXP 125
34952: PUSH
34953: LD_EXP 125
34957: PPUSH
34958: LD_VAR 0 8
34962: PPUSH
34963: LD_INT 0
34965: PPUSH
34966: CALL_OW 1
34970: ST_TO_ADDR
// exit ;
34971: POP
34972: POP
34973: GO 35508
// end ; x := list [ i ] [ 3 ] ;
34975: LD_ADDR_VAR 0 6
34979: PUSH
34980: LD_VAR 0 3
34984: PUSH
34985: LD_VAR 0 1
34989: ARRAY
34990: PUSH
34991: LD_INT 3
34993: ARRAY
34994: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34995: LD_ADDR_VAR 0 7
34999: PUSH
35000: LD_VAR 0 3
35004: PUSH
35005: LD_VAR 0 1
35009: ARRAY
35010: PUSH
35011: LD_INT 4
35013: ARRAY
35014: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35015: LD_ADDR_VAR 0 9
35019: PUSH
35020: LD_VAR 0 6
35024: PPUSH
35025: LD_VAR 0 7
35029: PPUSH
35030: LD_INT 16
35032: PPUSH
35033: CALL 79571 0 3
35037: ST_TO_ADDR
// if not cratesNearbyPoint then
35038: LD_VAR 0 9
35042: NOT
35043: IFFALSE 35049
// exit ;
35045: POP
35046: POP
35047: GO 35508
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35049: LD_ADDR_VAR 0 4
35053: PUSH
35054: LD_INT 22
35056: PUSH
35057: LD_VAR 0 5
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: LD_INT 60
35071: PUSH
35072: EMPTY
35073: LIST
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 91
35081: PUSH
35082: LD_VAR 0 8
35086: PUSH
35087: LD_INT 6
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 25
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 25
35110: PUSH
35111: LD_INT 16
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: PPUSH
35129: CALL_OW 69
35133: PUSH
35134: LD_VAR 0 8
35138: PPUSH
35139: CALL_OW 313
35143: PPUSH
35144: LD_INT 3
35146: PUSH
35147: LD_INT 60
35149: PUSH
35150: EMPTY
35151: LIST
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: LD_INT 25
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 25
35172: PUSH
35173: LD_INT 16
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PPUSH
35189: CALL_OW 72
35193: UNION
35194: ST_TO_ADDR
// if tmp then
35195: LD_VAR 0 4
35199: IFFALSE 35279
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35201: LD_ADDR_VAR 0 4
35205: PUSH
35206: LD_VAR 0 4
35210: PPUSH
35211: LD_INT 3
35213: PPUSH
35214: CALL 77538 0 2
35218: ST_TO_ADDR
// for j in tmp do
35219: LD_ADDR_VAR 0 2
35223: PUSH
35224: LD_VAR 0 4
35228: PUSH
35229: FOR_IN
35230: IFFALSE 35273
// begin if IsInUnit ( j ) then
35232: LD_VAR 0 2
35236: PPUSH
35237: CALL_OW 310
35241: IFFALSE 35252
// ComExit ( j ) ;
35243: LD_VAR 0 2
35247: PPUSH
35248: CALL 77621 0 1
// AddComCollect ( j , x , y ) ;
35252: LD_VAR 0 2
35256: PPUSH
35257: LD_VAR 0 6
35261: PPUSH
35262: LD_VAR 0 7
35266: PPUSH
35267: CALL_OW 177
// end ;
35271: GO 35229
35273: POP
35274: POP
// exit ;
35275: POP
35276: POP
35277: GO 35508
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35279: LD_ADDR_VAR 0 4
35283: PUSH
35284: LD_INT 22
35286: PUSH
35287: LD_VAR 0 5
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 91
35298: PUSH
35299: LD_VAR 0 8
35303: PUSH
35304: LD_INT 8
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: LD_INT 34
35317: PUSH
35318: LD_INT 12
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 34
35327: PUSH
35328: LD_INT 51
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 34
35337: PUSH
35338: LD_INT 32
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 34
35347: PUSH
35348: LD_EXP 49
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: PPUSH
35369: CALL_OW 69
35373: ST_TO_ADDR
// if tmp then
35374: LD_VAR 0 4
35378: IFFALSE 35504
// begin for j in tmp do
35380: LD_ADDR_VAR 0 2
35384: PUSH
35385: LD_VAR 0 4
35389: PUSH
35390: FOR_IN
35391: IFFALSE 35502
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35393: LD_VAR 0 2
35397: PPUSH
35398: CALL_OW 262
35402: PUSH
35403: LD_INT 3
35405: EQUAL
35406: PUSH
35407: LD_VAR 0 2
35411: PPUSH
35412: CALL_OW 261
35416: PUSH
35417: LD_INT 20
35419: GREATER
35420: OR
35421: PUSH
35422: LD_VAR 0 2
35426: PPUSH
35427: CALL_OW 314
35431: NOT
35432: AND
35433: PUSH
35434: LD_VAR 0 2
35438: PPUSH
35439: CALL_OW 263
35443: PUSH
35444: LD_INT 1
35446: NONEQUAL
35447: PUSH
35448: LD_VAR 0 2
35452: PPUSH
35453: CALL_OW 311
35457: OR
35458: AND
35459: IFFALSE 35500
// begin ComCollect ( j , x , y ) ;
35461: LD_VAR 0 2
35465: PPUSH
35466: LD_VAR 0 6
35470: PPUSH
35471: LD_VAR 0 7
35475: PPUSH
35476: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35480: LD_VAR 0 2
35484: PPUSH
35485: LD_VAR 0 8
35489: PPUSH
35490: CALL_OW 172
// exit ;
35494: POP
35495: POP
35496: POP
35497: POP
35498: GO 35508
// end ;
35500: GO 35390
35502: POP
35503: POP
// end ; end ;
35504: GO 34877
35506: POP
35507: POP
// end ; end_of_file
35508: PPOPN 9
35510: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35511: LD_INT 0
35513: PPUSH
35514: PPUSH
35515: PPUSH
35516: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35517: LD_VAR 0 1
35521: PPUSH
35522: CALL_OW 264
35526: PUSH
35527: LD_EXP 52
35531: EQUAL
35532: IFFALSE 35604
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35534: LD_INT 68
35536: PPUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL_OW 255
35546: PPUSH
35547: CALL_OW 321
35551: PUSH
35552: LD_INT 2
35554: EQUAL
35555: IFFALSE 35567
// eff := 70 else
35557: LD_ADDR_VAR 0 4
35561: PUSH
35562: LD_INT 70
35564: ST_TO_ADDR
35565: GO 35575
// eff := 30 ;
35567: LD_ADDR_VAR 0 4
35571: PUSH
35572: LD_INT 30
35574: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35575: LD_VAR 0 1
35579: PPUSH
35580: CALL_OW 250
35584: PPUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 251
35594: PPUSH
35595: LD_VAR 0 4
35599: PPUSH
35600: CALL_OW 495
// end ; end ;
35604: LD_VAR 0 2
35608: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35609: LD_INT 0
35611: PPUSH
// end ;
35612: LD_VAR 0 4
35616: RET
// export function SOS_Command ( cmd ) ; begin
35617: LD_INT 0
35619: PPUSH
// end ;
35620: LD_VAR 0 2
35624: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35625: LD_INT 0
35627: PPUSH
// end ;
35628: LD_VAR 0 6
35632: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35633: LD_INT 0
35635: PPUSH
35636: PPUSH
// if not vehicle or not factory then
35637: LD_VAR 0 1
35641: NOT
35642: PUSH
35643: LD_VAR 0 2
35647: NOT
35648: OR
35649: IFFALSE 35653
// exit ;
35651: GO 35884
// if factoryWaypoints >= factory then
35653: LD_EXP 124
35657: PUSH
35658: LD_VAR 0 2
35662: GREATEREQUAL
35663: IFFALSE 35884
// if factoryWaypoints [ factory ] then
35665: LD_EXP 124
35669: PUSH
35670: LD_VAR 0 2
35674: ARRAY
35675: IFFALSE 35884
// begin if GetControl ( vehicle ) = control_manual then
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 263
35686: PUSH
35687: LD_INT 1
35689: EQUAL
35690: IFFALSE 35771
// begin driver := IsDrivenBy ( vehicle ) ;
35692: LD_ADDR_VAR 0 4
35696: PUSH
35697: LD_VAR 0 1
35701: PPUSH
35702: CALL_OW 311
35706: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35707: LD_VAR 0 4
35711: PPUSH
35712: LD_EXP 124
35716: PUSH
35717: LD_VAR 0 2
35721: ARRAY
35722: PUSH
35723: LD_INT 3
35725: ARRAY
35726: PPUSH
35727: LD_EXP 124
35731: PUSH
35732: LD_VAR 0 2
35736: ARRAY
35737: PUSH
35738: LD_INT 4
35740: ARRAY
35741: PPUSH
35742: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35746: LD_VAR 0 4
35750: PPUSH
35751: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35755: LD_VAR 0 4
35759: PPUSH
35760: LD_VAR 0 2
35764: PPUSH
35765: CALL_OW 180
// end else
35769: GO 35884
// if GetControl ( vehicle ) = control_remote then
35771: LD_VAR 0 1
35775: PPUSH
35776: CALL_OW 263
35780: PUSH
35781: LD_INT 2
35783: EQUAL
35784: IFFALSE 35845
// begin wait ( 0 0$2 ) ;
35786: LD_INT 70
35788: PPUSH
35789: CALL_OW 67
// if Connect ( vehicle ) then
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL 47932 0 1
35802: IFFALSE 35843
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35804: LD_VAR 0 1
35808: PPUSH
35809: LD_EXP 124
35813: PUSH
35814: LD_VAR 0 2
35818: ARRAY
35819: PUSH
35820: LD_INT 3
35822: ARRAY
35823: PPUSH
35824: LD_EXP 124
35828: PUSH
35829: LD_VAR 0 2
35833: ARRAY
35834: PUSH
35835: LD_INT 4
35837: ARRAY
35838: PPUSH
35839: CALL_OW 171
// end else
35843: GO 35884
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35845: LD_VAR 0 1
35849: PPUSH
35850: LD_EXP 124
35854: PUSH
35855: LD_VAR 0 2
35859: ARRAY
35860: PUSH
35861: LD_INT 3
35863: ARRAY
35864: PPUSH
35865: LD_EXP 124
35869: PUSH
35870: LD_VAR 0 2
35874: ARRAY
35875: PUSH
35876: LD_INT 4
35878: ARRAY
35879: PPUSH
35880: CALL_OW 171
// end ; end ;
35884: LD_VAR 0 3
35888: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35889: LD_INT 0
35891: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35892: LD_VAR 0 1
35896: PUSH
35897: LD_INT 250
35899: EQUAL
35900: PUSH
35901: LD_VAR 0 2
35905: PPUSH
35906: CALL_OW 264
35910: PUSH
35911: LD_EXP 55
35915: EQUAL
35916: AND
35917: IFFALSE 35938
// MinerPlaceMine ( unit , x , y ) ;
35919: LD_VAR 0 2
35923: PPUSH
35924: LD_VAR 0 4
35928: PPUSH
35929: LD_VAR 0 5
35933: PPUSH
35934: CALL 38337 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35938: LD_VAR 0 1
35942: PUSH
35943: LD_INT 251
35945: EQUAL
35946: PUSH
35947: LD_VAR 0 2
35951: PPUSH
35952: CALL_OW 264
35956: PUSH
35957: LD_EXP 55
35961: EQUAL
35962: AND
35963: IFFALSE 35984
// MinerDetonateMine ( unit , x , y ) ;
35965: LD_VAR 0 2
35969: PPUSH
35970: LD_VAR 0 4
35974: PPUSH
35975: LD_VAR 0 5
35979: PPUSH
35980: CALL 38614 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35984: LD_VAR 0 1
35988: PUSH
35989: LD_INT 252
35991: EQUAL
35992: PUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: CALL_OW 264
36002: PUSH
36003: LD_EXP 55
36007: EQUAL
36008: AND
36009: IFFALSE 36030
// MinerCreateMinefield ( unit , x , y ) ;
36011: LD_VAR 0 2
36015: PPUSH
36016: LD_VAR 0 4
36020: PPUSH
36021: LD_VAR 0 5
36025: PPUSH
36026: CALL 39031 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36030: LD_VAR 0 1
36034: PUSH
36035: LD_INT 253
36037: EQUAL
36038: PUSH
36039: LD_VAR 0 2
36043: PPUSH
36044: CALL_OW 257
36048: PUSH
36049: LD_INT 5
36051: EQUAL
36052: AND
36053: IFFALSE 36074
// ComBinocular ( unit , x , y ) ;
36055: LD_VAR 0 2
36059: PPUSH
36060: LD_VAR 0 4
36064: PPUSH
36065: LD_VAR 0 5
36069: PPUSH
36070: CALL 39402 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36074: LD_VAR 0 1
36078: PUSH
36079: LD_INT 254
36081: EQUAL
36082: PUSH
36083: LD_VAR 0 2
36087: PPUSH
36088: CALL_OW 264
36092: PUSH
36093: LD_EXP 50
36097: EQUAL
36098: AND
36099: PUSH
36100: LD_VAR 0 3
36104: PPUSH
36105: CALL_OW 263
36109: PUSH
36110: LD_INT 3
36112: EQUAL
36113: AND
36114: IFFALSE 36130
// HackDestroyVehicle ( unit , selectedUnit ) ;
36116: LD_VAR 0 2
36120: PPUSH
36121: LD_VAR 0 3
36125: PPUSH
36126: CALL 37697 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36130: LD_VAR 0 1
36134: PUSH
36135: LD_INT 255
36137: EQUAL
36138: PUSH
36139: LD_VAR 0 2
36143: PPUSH
36144: CALL_OW 264
36148: PUSH
36149: LD_INT 14
36151: PUSH
36152: LD_INT 53
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: IN
36159: AND
36160: PUSH
36161: LD_VAR 0 4
36165: PPUSH
36166: LD_VAR 0 5
36170: PPUSH
36171: CALL_OW 488
36175: AND
36176: IFFALSE 36200
// CutTreeXYR ( unit , x , y , 12 ) ;
36178: LD_VAR 0 2
36182: PPUSH
36183: LD_VAR 0 4
36187: PPUSH
36188: LD_VAR 0 5
36192: PPUSH
36193: LD_INT 12
36195: PPUSH
36196: CALL 36263 0 4
// if cmd = 256 then
36200: LD_VAR 0 1
36204: PUSH
36205: LD_INT 256
36207: EQUAL
36208: IFFALSE 36229
// SetFactoryWaypoint ( unit , x , y ) ;
36210: LD_VAR 0 2
36214: PPUSH
36215: LD_VAR 0 4
36219: PPUSH
36220: LD_VAR 0 5
36224: PPUSH
36225: CALL 34198 0 3
// if cmd = 257 then
36229: LD_VAR 0 1
36233: PUSH
36234: LD_INT 257
36236: EQUAL
36237: IFFALSE 36258
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36239: LD_VAR 0 2
36243: PPUSH
36244: LD_VAR 0 4
36248: PPUSH
36249: LD_VAR 0 5
36253: PPUSH
36254: CALL 34560 0 3
// end ;
36258: LD_VAR 0 6
36262: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36263: LD_INT 0
36265: PPUSH
36266: PPUSH
36267: PPUSH
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36274: LD_VAR 0 1
36278: NOT
36279: PUSH
36280: LD_VAR 0 2
36284: PPUSH
36285: LD_VAR 0 3
36289: PPUSH
36290: CALL_OW 488
36294: NOT
36295: OR
36296: PUSH
36297: LD_VAR 0 4
36301: NOT
36302: OR
36303: IFFALSE 36307
// exit ;
36305: GO 36647
// list := [ ] ;
36307: LD_ADDR_VAR 0 13
36311: PUSH
36312: EMPTY
36313: ST_TO_ADDR
// if x - r < 0 then
36314: LD_VAR 0 2
36318: PUSH
36319: LD_VAR 0 4
36323: MINUS
36324: PUSH
36325: LD_INT 0
36327: LESS
36328: IFFALSE 36340
// min_x := 0 else
36330: LD_ADDR_VAR 0 7
36334: PUSH
36335: LD_INT 0
36337: ST_TO_ADDR
36338: GO 36356
// min_x := x - r ;
36340: LD_ADDR_VAR 0 7
36344: PUSH
36345: LD_VAR 0 2
36349: PUSH
36350: LD_VAR 0 4
36354: MINUS
36355: ST_TO_ADDR
// if y - r < 0 then
36356: LD_VAR 0 3
36360: PUSH
36361: LD_VAR 0 4
36365: MINUS
36366: PUSH
36367: LD_INT 0
36369: LESS
36370: IFFALSE 36382
// min_y := 0 else
36372: LD_ADDR_VAR 0 8
36376: PUSH
36377: LD_INT 0
36379: ST_TO_ADDR
36380: GO 36398
// min_y := y - r ;
36382: LD_ADDR_VAR 0 8
36386: PUSH
36387: LD_VAR 0 3
36391: PUSH
36392: LD_VAR 0 4
36396: MINUS
36397: ST_TO_ADDR
// max_x := x + r ;
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: LD_VAR 0 2
36407: PUSH
36408: LD_VAR 0 4
36412: PLUS
36413: ST_TO_ADDR
// max_y := y + r ;
36414: LD_ADDR_VAR 0 10
36418: PUSH
36419: LD_VAR 0 3
36423: PUSH
36424: LD_VAR 0 4
36428: PLUS
36429: ST_TO_ADDR
// for _x = min_x to max_x do
36430: LD_ADDR_VAR 0 11
36434: PUSH
36435: DOUBLE
36436: LD_VAR 0 7
36440: DEC
36441: ST_TO_ADDR
36442: LD_VAR 0 9
36446: PUSH
36447: FOR_TO
36448: IFFALSE 36565
// for _y = min_y to max_y do
36450: LD_ADDR_VAR 0 12
36454: PUSH
36455: DOUBLE
36456: LD_VAR 0 8
36460: DEC
36461: ST_TO_ADDR
36462: LD_VAR 0 10
36466: PUSH
36467: FOR_TO
36468: IFFALSE 36561
// begin if not ValidHex ( _x , _y ) then
36470: LD_VAR 0 11
36474: PPUSH
36475: LD_VAR 0 12
36479: PPUSH
36480: CALL_OW 488
36484: NOT
36485: IFFALSE 36489
// continue ;
36487: GO 36467
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36489: LD_VAR 0 11
36493: PPUSH
36494: LD_VAR 0 12
36498: PPUSH
36499: CALL_OW 351
36503: PUSH
36504: LD_VAR 0 11
36508: PPUSH
36509: LD_VAR 0 12
36513: PPUSH
36514: CALL_OW 554
36518: AND
36519: IFFALSE 36559
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36521: LD_ADDR_VAR 0 13
36525: PUSH
36526: LD_VAR 0 13
36530: PPUSH
36531: LD_VAR 0 13
36535: PUSH
36536: LD_INT 1
36538: PLUS
36539: PPUSH
36540: LD_VAR 0 11
36544: PUSH
36545: LD_VAR 0 12
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PPUSH
36554: CALL_OW 2
36558: ST_TO_ADDR
// end ;
36559: GO 36467
36561: POP
36562: POP
36563: GO 36447
36565: POP
36566: POP
// if not list then
36567: LD_VAR 0 13
36571: NOT
36572: IFFALSE 36576
// exit ;
36574: GO 36647
// for i in list do
36576: LD_ADDR_VAR 0 6
36580: PUSH
36581: LD_VAR 0 13
36585: PUSH
36586: FOR_IN
36587: IFFALSE 36645
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36589: LD_VAR 0 1
36593: PPUSH
36594: LD_STRING M
36596: PUSH
36597: LD_VAR 0 6
36601: PUSH
36602: LD_INT 1
36604: ARRAY
36605: PUSH
36606: LD_VAR 0 6
36610: PUSH
36611: LD_INT 2
36613: ARRAY
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: PUSH
36636: EMPTY
36637: LIST
36638: PPUSH
36639: CALL_OW 447
36643: GO 36586
36645: POP
36646: POP
// end ;
36647: LD_VAR 0 5
36651: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36652: LD_EXP 127
36656: NOT
36657: IFFALSE 36707
36659: GO 36661
36661: DISABLE
// begin initHack := true ;
36662: LD_ADDR_EXP 127
36666: PUSH
36667: LD_INT 1
36669: ST_TO_ADDR
// hackTanks := [ ] ;
36670: LD_ADDR_EXP 128
36674: PUSH
36675: EMPTY
36676: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36677: LD_ADDR_EXP 129
36681: PUSH
36682: EMPTY
36683: ST_TO_ADDR
// hackLimit := 3 ;
36684: LD_ADDR_EXP 130
36688: PUSH
36689: LD_INT 3
36691: ST_TO_ADDR
// hackDist := 12 ;
36692: LD_ADDR_EXP 131
36696: PUSH
36697: LD_INT 12
36699: ST_TO_ADDR
// hackCounter := [ ] ;
36700: LD_ADDR_EXP 132
36704: PUSH
36705: EMPTY
36706: ST_TO_ADDR
// end ;
36707: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36708: LD_EXP 127
36712: PUSH
36713: LD_INT 34
36715: PUSH
36716: LD_EXP 50
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PPUSH
36725: CALL_OW 69
36729: AND
36730: IFFALSE 36985
36732: GO 36734
36734: DISABLE
36735: LD_INT 0
36737: PPUSH
36738: PPUSH
// begin enable ;
36739: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36740: LD_ADDR_VAR 0 1
36744: PUSH
36745: LD_INT 34
36747: PUSH
36748: LD_EXP 50
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PPUSH
36757: CALL_OW 69
36761: PUSH
36762: FOR_IN
36763: IFFALSE 36983
// begin if not i in hackTanks then
36765: LD_VAR 0 1
36769: PUSH
36770: LD_EXP 128
36774: IN
36775: NOT
36776: IFFALSE 36859
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36778: LD_ADDR_EXP 128
36782: PUSH
36783: LD_EXP 128
36787: PPUSH
36788: LD_EXP 128
36792: PUSH
36793: LD_INT 1
36795: PLUS
36796: PPUSH
36797: LD_VAR 0 1
36801: PPUSH
36802: CALL_OW 1
36806: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36807: LD_ADDR_EXP 129
36811: PUSH
36812: LD_EXP 129
36816: PPUSH
36817: LD_EXP 129
36821: PUSH
36822: LD_INT 1
36824: PLUS
36825: PPUSH
36826: EMPTY
36827: PPUSH
36828: CALL_OW 1
36832: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36833: LD_ADDR_EXP 132
36837: PUSH
36838: LD_EXP 132
36842: PPUSH
36843: LD_EXP 132
36847: PUSH
36848: LD_INT 1
36850: PLUS
36851: PPUSH
36852: EMPTY
36853: PPUSH
36854: CALL_OW 1
36858: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36859: LD_VAR 0 1
36863: PPUSH
36864: CALL_OW 302
36868: NOT
36869: IFFALSE 36882
// begin HackUnlinkAll ( i ) ;
36871: LD_VAR 0 1
36875: PPUSH
36876: CALL 36988 0 1
// continue ;
36880: GO 36762
// end ; HackCheckCapturedStatus ( i ) ;
36882: LD_VAR 0 1
36886: PPUSH
36887: CALL 37431 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36891: LD_ADDR_VAR 0 2
36895: PUSH
36896: LD_INT 81
36898: PUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL_OW 255
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 33
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 91
36925: PUSH
36926: LD_VAR 0 1
36930: PUSH
36931: LD_EXP 131
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 50
36943: PUSH
36944: EMPTY
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: PPUSH
36953: CALL_OW 69
36957: ST_TO_ADDR
// if not tmp then
36958: LD_VAR 0 2
36962: NOT
36963: IFFALSE 36967
// continue ;
36965: GO 36762
// HackLink ( i , tmp ) ;
36967: LD_VAR 0 1
36971: PPUSH
36972: LD_VAR 0 2
36976: PPUSH
36977: CALL 37124 0 2
// end ;
36981: GO 36762
36983: POP
36984: POP
// end ;
36985: PPOPN 2
36987: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36988: LD_INT 0
36990: PPUSH
36991: PPUSH
36992: PPUSH
// if not hack in hackTanks then
36993: LD_VAR 0 1
36997: PUSH
36998: LD_EXP 128
37002: IN
37003: NOT
37004: IFFALSE 37008
// exit ;
37006: GO 37119
// index := GetElementIndex ( hackTanks , hack ) ;
37008: LD_ADDR_VAR 0 4
37012: PUSH
37013: LD_EXP 128
37017: PPUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: CALL 44746 0 2
37027: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37028: LD_EXP 129
37032: PUSH
37033: LD_VAR 0 4
37037: ARRAY
37038: IFFALSE 37119
// begin for i in hackTanksCaptured [ index ] do
37040: LD_ADDR_VAR 0 3
37044: PUSH
37045: LD_EXP 129
37049: PUSH
37050: LD_VAR 0 4
37054: ARRAY
37055: PUSH
37056: FOR_IN
37057: IFFALSE 37083
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37059: LD_VAR 0 3
37063: PUSH
37064: LD_INT 1
37066: ARRAY
37067: PPUSH
37068: LD_VAR 0 3
37072: PUSH
37073: LD_INT 2
37075: ARRAY
37076: PPUSH
37077: CALL_OW 235
37081: GO 37056
37083: POP
37084: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37085: LD_ADDR_EXP 129
37089: PUSH
37090: LD_EXP 129
37094: PPUSH
37095: LD_VAR 0 4
37099: PPUSH
37100: EMPTY
37101: PPUSH
37102: CALL_OW 1
37106: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37107: LD_VAR 0 1
37111: PPUSH
37112: LD_INT 0
37114: PPUSH
37115: CALL_OW 505
// end ; end ;
37119: LD_VAR 0 2
37123: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37124: LD_INT 0
37126: PPUSH
37127: PPUSH
37128: PPUSH
// if not hack in hackTanks or not vehicles then
37129: LD_VAR 0 1
37133: PUSH
37134: LD_EXP 128
37138: IN
37139: NOT
37140: PUSH
37141: LD_VAR 0 2
37145: NOT
37146: OR
37147: IFFALSE 37151
// exit ;
37149: GO 37426
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37151: LD_ADDR_VAR 0 2
37155: PUSH
37156: LD_VAR 0 1
37160: PPUSH
37161: LD_VAR 0 2
37165: PPUSH
37166: LD_INT 1
37168: PPUSH
37169: LD_INT 1
37171: PPUSH
37172: CALL 45396 0 4
37176: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37177: LD_ADDR_VAR 0 5
37181: PUSH
37182: LD_EXP 128
37186: PPUSH
37187: LD_VAR 0 1
37191: PPUSH
37192: CALL 44746 0 2
37196: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37197: LD_EXP 129
37201: PUSH
37202: LD_VAR 0 5
37206: ARRAY
37207: PUSH
37208: LD_EXP 130
37212: LESS
37213: IFFALSE 37402
// begin for i := 1 to vehicles do
37215: LD_ADDR_VAR 0 4
37219: PUSH
37220: DOUBLE
37221: LD_INT 1
37223: DEC
37224: ST_TO_ADDR
37225: LD_VAR 0 2
37229: PUSH
37230: FOR_TO
37231: IFFALSE 37400
// begin if hackTanksCaptured [ index ] = hackLimit then
37233: LD_EXP 129
37237: PUSH
37238: LD_VAR 0 5
37242: ARRAY
37243: PUSH
37244: LD_EXP 130
37248: EQUAL
37249: IFFALSE 37253
// break ;
37251: GO 37400
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37253: LD_ADDR_EXP 132
37257: PUSH
37258: LD_EXP 132
37262: PPUSH
37263: LD_VAR 0 5
37267: PPUSH
37268: LD_EXP 132
37272: PUSH
37273: LD_VAR 0 5
37277: ARRAY
37278: PUSH
37279: LD_INT 1
37281: PLUS
37282: PPUSH
37283: CALL_OW 1
37287: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37288: LD_ADDR_EXP 129
37292: PUSH
37293: LD_EXP 129
37297: PPUSH
37298: LD_VAR 0 5
37302: PUSH
37303: LD_EXP 129
37307: PUSH
37308: LD_VAR 0 5
37312: ARRAY
37313: PUSH
37314: LD_INT 1
37316: PLUS
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PPUSH
37322: LD_VAR 0 2
37326: PUSH
37327: LD_VAR 0 4
37331: ARRAY
37332: PUSH
37333: LD_VAR 0 2
37337: PUSH
37338: LD_VAR 0 4
37342: ARRAY
37343: PPUSH
37344: CALL_OW 255
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PPUSH
37353: CALL 44961 0 3
37357: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37358: LD_VAR 0 2
37362: PUSH
37363: LD_VAR 0 4
37367: ARRAY
37368: PPUSH
37369: LD_VAR 0 1
37373: PPUSH
37374: CALL_OW 255
37378: PPUSH
37379: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37383: LD_VAR 0 2
37387: PUSH
37388: LD_VAR 0 4
37392: ARRAY
37393: PPUSH
37394: CALL_OW 141
// end ;
37398: GO 37230
37400: POP
37401: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37402: LD_VAR 0 1
37406: PPUSH
37407: LD_EXP 129
37411: PUSH
37412: LD_VAR 0 5
37416: ARRAY
37417: PUSH
37418: LD_INT 0
37420: PLUS
37421: PPUSH
37422: CALL_OW 505
// end ;
37426: LD_VAR 0 3
37430: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37431: LD_INT 0
37433: PPUSH
37434: PPUSH
37435: PPUSH
37436: PPUSH
// if not hack in hackTanks then
37437: LD_VAR 0 1
37441: PUSH
37442: LD_EXP 128
37446: IN
37447: NOT
37448: IFFALSE 37452
// exit ;
37450: GO 37692
// index := GetElementIndex ( hackTanks , hack ) ;
37452: LD_ADDR_VAR 0 4
37456: PUSH
37457: LD_EXP 128
37461: PPUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL 44746 0 2
37471: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37472: LD_ADDR_VAR 0 3
37476: PUSH
37477: DOUBLE
37478: LD_EXP 129
37482: PUSH
37483: LD_VAR 0 4
37487: ARRAY
37488: INC
37489: ST_TO_ADDR
37490: LD_INT 1
37492: PUSH
37493: FOR_DOWNTO
37494: IFFALSE 37666
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37496: LD_ADDR_VAR 0 5
37500: PUSH
37501: LD_EXP 129
37505: PUSH
37506: LD_VAR 0 4
37510: ARRAY
37511: PUSH
37512: LD_VAR 0 3
37516: ARRAY
37517: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37518: LD_VAR 0 5
37522: PUSH
37523: LD_INT 1
37525: ARRAY
37526: PPUSH
37527: CALL_OW 302
37531: NOT
37532: PUSH
37533: LD_VAR 0 5
37537: PUSH
37538: LD_INT 1
37540: ARRAY
37541: PPUSH
37542: CALL_OW 255
37546: PUSH
37547: LD_VAR 0 1
37551: PPUSH
37552: CALL_OW 255
37556: NONEQUAL
37557: OR
37558: IFFALSE 37664
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37560: LD_VAR 0 5
37564: PUSH
37565: LD_INT 1
37567: ARRAY
37568: PPUSH
37569: CALL_OW 305
37573: PUSH
37574: LD_VAR 0 5
37578: PUSH
37579: LD_INT 1
37581: ARRAY
37582: PPUSH
37583: CALL_OW 255
37587: PUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: CALL_OW 255
37597: EQUAL
37598: AND
37599: IFFALSE 37623
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37601: LD_VAR 0 5
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PPUSH
37610: LD_VAR 0 5
37614: PUSH
37615: LD_INT 2
37617: ARRAY
37618: PPUSH
37619: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37623: LD_ADDR_EXP 129
37627: PUSH
37628: LD_EXP 129
37632: PPUSH
37633: LD_VAR 0 4
37637: PPUSH
37638: LD_EXP 129
37642: PUSH
37643: LD_VAR 0 4
37647: ARRAY
37648: PPUSH
37649: LD_VAR 0 3
37653: PPUSH
37654: CALL_OW 3
37658: PPUSH
37659: CALL_OW 1
37663: ST_TO_ADDR
// end ; end ;
37664: GO 37493
37666: POP
37667: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37668: LD_VAR 0 1
37672: PPUSH
37673: LD_EXP 129
37677: PUSH
37678: LD_VAR 0 4
37682: ARRAY
37683: PUSH
37684: LD_INT 0
37686: PLUS
37687: PPUSH
37688: CALL_OW 505
// end ;
37692: LD_VAR 0 2
37696: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
// if not hack in hackTanks then
37703: LD_VAR 0 1
37707: PUSH
37708: LD_EXP 128
37712: IN
37713: NOT
37714: IFFALSE 37718
// exit ;
37716: GO 37803
// index := GetElementIndex ( hackTanks , hack ) ;
37718: LD_ADDR_VAR 0 5
37722: PUSH
37723: LD_EXP 128
37727: PPUSH
37728: LD_VAR 0 1
37732: PPUSH
37733: CALL 44746 0 2
37737: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37738: LD_ADDR_VAR 0 4
37742: PUSH
37743: DOUBLE
37744: LD_INT 1
37746: DEC
37747: ST_TO_ADDR
37748: LD_EXP 129
37752: PUSH
37753: LD_VAR 0 5
37757: ARRAY
37758: PUSH
37759: FOR_TO
37760: IFFALSE 37801
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37762: LD_EXP 129
37766: PUSH
37767: LD_VAR 0 5
37771: ARRAY
37772: PUSH
37773: LD_VAR 0 4
37777: ARRAY
37778: PUSH
37779: LD_INT 1
37781: ARRAY
37782: PUSH
37783: LD_VAR 0 2
37787: EQUAL
37788: IFFALSE 37799
// KillUnit ( vehicle ) ;
37790: LD_VAR 0 2
37794: PPUSH
37795: CALL_OW 66
37799: GO 37759
37801: POP
37802: POP
// end ;
37803: LD_VAR 0 3
37807: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37808: LD_EXP 133
37812: NOT
37813: IFFALSE 37848
37815: GO 37817
37817: DISABLE
// begin initMiner := true ;
37818: LD_ADDR_EXP 133
37822: PUSH
37823: LD_INT 1
37825: ST_TO_ADDR
// minersList := [ ] ;
37826: LD_ADDR_EXP 134
37830: PUSH
37831: EMPTY
37832: ST_TO_ADDR
// minerMinesList := [ ] ;
37833: LD_ADDR_EXP 135
37837: PUSH
37838: EMPTY
37839: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37840: LD_ADDR_EXP 136
37844: PUSH
37845: LD_INT 5
37847: ST_TO_ADDR
// end ;
37848: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37849: LD_EXP 133
37853: PUSH
37854: LD_INT 34
37856: PUSH
37857: LD_EXP 55
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PPUSH
37866: CALL_OW 69
37870: AND
37871: IFFALSE 38334
37873: GO 37875
37875: DISABLE
37876: LD_INT 0
37878: PPUSH
37879: PPUSH
37880: PPUSH
37881: PPUSH
// begin enable ;
37882: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37883: LD_ADDR_VAR 0 1
37887: PUSH
37888: LD_INT 34
37890: PUSH
37891: LD_EXP 55
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PPUSH
37900: CALL_OW 69
37904: PUSH
37905: FOR_IN
37906: IFFALSE 37978
// begin if not i in minersList then
37908: LD_VAR 0 1
37912: PUSH
37913: LD_EXP 134
37917: IN
37918: NOT
37919: IFFALSE 37976
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37921: LD_ADDR_EXP 134
37925: PUSH
37926: LD_EXP 134
37930: PPUSH
37931: LD_EXP 134
37935: PUSH
37936: LD_INT 1
37938: PLUS
37939: PPUSH
37940: LD_VAR 0 1
37944: PPUSH
37945: CALL_OW 1
37949: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37950: LD_ADDR_EXP 135
37954: PUSH
37955: LD_EXP 135
37959: PPUSH
37960: LD_EXP 135
37964: PUSH
37965: LD_INT 1
37967: PLUS
37968: PPUSH
37969: EMPTY
37970: PPUSH
37971: CALL_OW 1
37975: ST_TO_ADDR
// end end ;
37976: GO 37905
37978: POP
37979: POP
// for i := minerMinesList downto 1 do
37980: LD_ADDR_VAR 0 1
37984: PUSH
37985: DOUBLE
37986: LD_EXP 135
37990: INC
37991: ST_TO_ADDR
37992: LD_INT 1
37994: PUSH
37995: FOR_DOWNTO
37996: IFFALSE 38332
// begin if IsLive ( minersList [ i ] ) then
37998: LD_EXP 134
38002: PUSH
38003: LD_VAR 0 1
38007: ARRAY
38008: PPUSH
38009: CALL_OW 300
38013: IFFALSE 38041
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38015: LD_EXP 134
38019: PUSH
38020: LD_VAR 0 1
38024: ARRAY
38025: PPUSH
38026: LD_EXP 135
38030: PUSH
38031: LD_VAR 0 1
38035: ARRAY
38036: PPUSH
38037: CALL_OW 505
// if not minerMinesList [ i ] then
38041: LD_EXP 135
38045: PUSH
38046: LD_VAR 0 1
38050: ARRAY
38051: NOT
38052: IFFALSE 38056
// continue ;
38054: GO 37995
// for j := minerMinesList [ i ] downto 1 do
38056: LD_ADDR_VAR 0 2
38060: PUSH
38061: DOUBLE
38062: LD_EXP 135
38066: PUSH
38067: LD_VAR 0 1
38071: ARRAY
38072: INC
38073: ST_TO_ADDR
38074: LD_INT 1
38076: PUSH
38077: FOR_DOWNTO
38078: IFFALSE 38328
// begin side := GetSide ( minersList [ i ] ) ;
38080: LD_ADDR_VAR 0 3
38084: PUSH
38085: LD_EXP 134
38089: PUSH
38090: LD_VAR 0 1
38094: ARRAY
38095: PPUSH
38096: CALL_OW 255
38100: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38101: LD_ADDR_VAR 0 4
38105: PUSH
38106: LD_EXP 135
38110: PUSH
38111: LD_VAR 0 1
38115: ARRAY
38116: PUSH
38117: LD_VAR 0 2
38121: ARRAY
38122: PUSH
38123: LD_INT 1
38125: ARRAY
38126: PPUSH
38127: LD_EXP 135
38131: PUSH
38132: LD_VAR 0 1
38136: ARRAY
38137: PUSH
38138: LD_VAR 0 2
38142: ARRAY
38143: PUSH
38144: LD_INT 2
38146: ARRAY
38147: PPUSH
38148: CALL_OW 428
38152: ST_TO_ADDR
// if not tmp then
38153: LD_VAR 0 4
38157: NOT
38158: IFFALSE 38162
// continue ;
38160: GO 38077
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38162: LD_VAR 0 4
38166: PUSH
38167: LD_INT 81
38169: PUSH
38170: LD_VAR 0 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PPUSH
38179: CALL_OW 69
38183: IN
38184: PUSH
38185: LD_EXP 135
38189: PUSH
38190: LD_VAR 0 1
38194: ARRAY
38195: PUSH
38196: LD_VAR 0 2
38200: ARRAY
38201: PUSH
38202: LD_INT 1
38204: ARRAY
38205: PPUSH
38206: LD_EXP 135
38210: PUSH
38211: LD_VAR 0 1
38215: ARRAY
38216: PUSH
38217: LD_VAR 0 2
38221: ARRAY
38222: PUSH
38223: LD_INT 2
38225: ARRAY
38226: PPUSH
38227: CALL_OW 458
38231: AND
38232: IFFALSE 38326
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38234: LD_EXP 135
38238: PUSH
38239: LD_VAR 0 1
38243: ARRAY
38244: PUSH
38245: LD_VAR 0 2
38249: ARRAY
38250: PUSH
38251: LD_INT 1
38253: ARRAY
38254: PPUSH
38255: LD_EXP 135
38259: PUSH
38260: LD_VAR 0 1
38264: ARRAY
38265: PUSH
38266: LD_VAR 0 2
38270: ARRAY
38271: PUSH
38272: LD_INT 2
38274: ARRAY
38275: PPUSH
38276: LD_VAR 0 3
38280: PPUSH
38281: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38285: LD_ADDR_EXP 135
38289: PUSH
38290: LD_EXP 135
38294: PPUSH
38295: LD_VAR 0 1
38299: PPUSH
38300: LD_EXP 135
38304: PUSH
38305: LD_VAR 0 1
38309: ARRAY
38310: PPUSH
38311: LD_VAR 0 2
38315: PPUSH
38316: CALL_OW 3
38320: PPUSH
38321: CALL_OW 1
38325: ST_TO_ADDR
// end ; end ;
38326: GO 38077
38328: POP
38329: POP
// end ;
38330: GO 37995
38332: POP
38333: POP
// end ;
38334: PPOPN 4
38336: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38337: LD_INT 0
38339: PPUSH
38340: PPUSH
// result := false ;
38341: LD_ADDR_VAR 0 4
38345: PUSH
38346: LD_INT 0
38348: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38349: LD_VAR 0 1
38353: PPUSH
38354: CALL_OW 264
38358: PUSH
38359: LD_EXP 55
38363: EQUAL
38364: NOT
38365: IFFALSE 38369
// exit ;
38367: GO 38609
// index := GetElementIndex ( minersList , unit ) ;
38369: LD_ADDR_VAR 0 5
38373: PUSH
38374: LD_EXP 134
38378: PPUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL 44746 0 2
38388: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38389: LD_EXP 135
38393: PUSH
38394: LD_VAR 0 5
38398: ARRAY
38399: PUSH
38400: LD_EXP 136
38404: GREATEREQUAL
38405: IFFALSE 38409
// exit ;
38407: GO 38609
// ComMoveXY ( unit , x , y ) ;
38409: LD_VAR 0 1
38413: PPUSH
38414: LD_VAR 0 2
38418: PPUSH
38419: LD_VAR 0 3
38423: PPUSH
38424: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38428: LD_INT 35
38430: PPUSH
38431: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38435: LD_VAR 0 1
38439: PPUSH
38440: LD_VAR 0 2
38444: PPUSH
38445: LD_VAR 0 3
38449: PPUSH
38450: CALL 76032 0 3
38454: NOT
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 314
38465: AND
38466: IFFALSE 38470
// exit ;
38468: GO 38609
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_VAR 0 3
38479: PPUSH
38480: CALL_OW 428
38484: PUSH
38485: LD_VAR 0 1
38489: EQUAL
38490: PUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 314
38500: NOT
38501: AND
38502: IFFALSE 38428
// PlaySoundXY ( x , y , PlantMine ) ;
38504: LD_VAR 0 2
38508: PPUSH
38509: LD_VAR 0 3
38513: PPUSH
38514: LD_STRING PlantMine
38516: PPUSH
38517: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38521: LD_VAR 0 2
38525: PPUSH
38526: LD_VAR 0 3
38530: PPUSH
38531: LD_VAR 0 1
38535: PPUSH
38536: CALL_OW 255
38540: PPUSH
38541: LD_INT 0
38543: PPUSH
38544: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38548: LD_ADDR_EXP 135
38552: PUSH
38553: LD_EXP 135
38557: PPUSH
38558: LD_VAR 0 5
38562: PUSH
38563: LD_EXP 135
38567: PUSH
38568: LD_VAR 0 5
38572: ARRAY
38573: PUSH
38574: LD_INT 1
38576: PLUS
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PPUSH
38582: LD_VAR 0 2
38586: PUSH
38587: LD_VAR 0 3
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PPUSH
38596: CALL 44961 0 3
38600: ST_TO_ADDR
// result := true ;
38601: LD_ADDR_VAR 0 4
38605: PUSH
38606: LD_INT 1
38608: ST_TO_ADDR
// end ;
38609: LD_VAR 0 4
38613: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38614: LD_INT 0
38616: PPUSH
38617: PPUSH
38618: PPUSH
// if not unit in minersList then
38619: LD_VAR 0 1
38623: PUSH
38624: LD_EXP 134
38628: IN
38629: NOT
38630: IFFALSE 38634
// exit ;
38632: GO 39026
// index := GetElementIndex ( minersList , unit ) ;
38634: LD_ADDR_VAR 0 6
38638: PUSH
38639: LD_EXP 134
38643: PPUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: CALL 44746 0 2
38653: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38654: LD_ADDR_VAR 0 5
38658: PUSH
38659: DOUBLE
38660: LD_EXP 135
38664: PUSH
38665: LD_VAR 0 6
38669: ARRAY
38670: INC
38671: ST_TO_ADDR
38672: LD_INT 1
38674: PUSH
38675: FOR_DOWNTO
38676: IFFALSE 38837
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38678: LD_EXP 135
38682: PUSH
38683: LD_VAR 0 6
38687: ARRAY
38688: PUSH
38689: LD_VAR 0 5
38693: ARRAY
38694: PUSH
38695: LD_INT 1
38697: ARRAY
38698: PUSH
38699: LD_VAR 0 2
38703: EQUAL
38704: PUSH
38705: LD_EXP 135
38709: PUSH
38710: LD_VAR 0 6
38714: ARRAY
38715: PUSH
38716: LD_VAR 0 5
38720: ARRAY
38721: PUSH
38722: LD_INT 2
38724: ARRAY
38725: PUSH
38726: LD_VAR 0 3
38730: EQUAL
38731: AND
38732: IFFALSE 38835
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38734: LD_EXP 135
38738: PUSH
38739: LD_VAR 0 6
38743: ARRAY
38744: PUSH
38745: LD_VAR 0 5
38749: ARRAY
38750: PUSH
38751: LD_INT 1
38753: ARRAY
38754: PPUSH
38755: LD_EXP 135
38759: PUSH
38760: LD_VAR 0 6
38764: ARRAY
38765: PUSH
38766: LD_VAR 0 5
38770: ARRAY
38771: PUSH
38772: LD_INT 2
38774: ARRAY
38775: PPUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 255
38785: PPUSH
38786: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38790: LD_ADDR_EXP 135
38794: PUSH
38795: LD_EXP 135
38799: PPUSH
38800: LD_VAR 0 6
38804: PPUSH
38805: LD_EXP 135
38809: PUSH
38810: LD_VAR 0 6
38814: ARRAY
38815: PPUSH
38816: LD_VAR 0 5
38820: PPUSH
38821: CALL_OW 3
38825: PPUSH
38826: CALL_OW 1
38830: ST_TO_ADDR
// exit ;
38831: POP
38832: POP
38833: GO 39026
// end ; end ;
38835: GO 38675
38837: POP
38838: POP
// for i := minerMinesList [ index ] downto 1 do
38839: LD_ADDR_VAR 0 5
38843: PUSH
38844: DOUBLE
38845: LD_EXP 135
38849: PUSH
38850: LD_VAR 0 6
38854: ARRAY
38855: INC
38856: ST_TO_ADDR
38857: LD_INT 1
38859: PUSH
38860: FOR_DOWNTO
38861: IFFALSE 39024
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38863: LD_EXP 135
38867: PUSH
38868: LD_VAR 0 6
38872: ARRAY
38873: PUSH
38874: LD_VAR 0 5
38878: ARRAY
38879: PUSH
38880: LD_INT 1
38882: ARRAY
38883: PPUSH
38884: LD_EXP 135
38888: PUSH
38889: LD_VAR 0 6
38893: ARRAY
38894: PUSH
38895: LD_VAR 0 5
38899: ARRAY
38900: PUSH
38901: LD_INT 2
38903: ARRAY
38904: PPUSH
38905: LD_VAR 0 2
38909: PPUSH
38910: LD_VAR 0 3
38914: PPUSH
38915: CALL_OW 298
38919: PUSH
38920: LD_INT 6
38922: LESS
38923: IFFALSE 39022
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38925: LD_EXP 135
38929: PUSH
38930: LD_VAR 0 6
38934: ARRAY
38935: PUSH
38936: LD_VAR 0 5
38940: ARRAY
38941: PUSH
38942: LD_INT 1
38944: ARRAY
38945: PPUSH
38946: LD_EXP 135
38950: PUSH
38951: LD_VAR 0 6
38955: ARRAY
38956: PUSH
38957: LD_VAR 0 5
38961: ARRAY
38962: PUSH
38963: LD_INT 2
38965: ARRAY
38966: PPUSH
38967: LD_VAR 0 1
38971: PPUSH
38972: CALL_OW 255
38976: PPUSH
38977: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38981: LD_ADDR_EXP 135
38985: PUSH
38986: LD_EXP 135
38990: PPUSH
38991: LD_VAR 0 6
38995: PPUSH
38996: LD_EXP 135
39000: PUSH
39001: LD_VAR 0 6
39005: ARRAY
39006: PPUSH
39007: LD_VAR 0 5
39011: PPUSH
39012: CALL_OW 3
39016: PPUSH
39017: CALL_OW 1
39021: ST_TO_ADDR
// end ; end ;
39022: GO 38860
39024: POP
39025: POP
// end ;
39026: LD_VAR 0 4
39030: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39031: LD_INT 0
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
39039: PPUSH
39040: PPUSH
39041: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 264
39051: PUSH
39052: LD_EXP 55
39056: EQUAL
39057: NOT
39058: PUSH
39059: LD_VAR 0 1
39063: PUSH
39064: LD_EXP 134
39068: IN
39069: NOT
39070: OR
39071: IFFALSE 39075
// exit ;
39073: GO 39397
// index := GetElementIndex ( minersList , unit ) ;
39075: LD_ADDR_VAR 0 6
39079: PUSH
39080: LD_EXP 134
39084: PPUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL 44746 0 2
39094: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39095: LD_ADDR_VAR 0 8
39099: PUSH
39100: LD_EXP 136
39104: PUSH
39105: LD_EXP 135
39109: PUSH
39110: LD_VAR 0 6
39114: ARRAY
39115: MINUS
39116: ST_TO_ADDR
// if not minesFreeAmount then
39117: LD_VAR 0 8
39121: NOT
39122: IFFALSE 39126
// exit ;
39124: GO 39397
// tmp := [ ] ;
39126: LD_ADDR_VAR 0 7
39130: PUSH
39131: EMPTY
39132: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39133: LD_ADDR_VAR 0 5
39137: PUSH
39138: DOUBLE
39139: LD_INT 1
39141: DEC
39142: ST_TO_ADDR
39143: LD_VAR 0 8
39147: PUSH
39148: FOR_TO
39149: IFFALSE 39344
// begin _d := rand ( 0 , 5 ) ;
39151: LD_ADDR_VAR 0 11
39155: PUSH
39156: LD_INT 0
39158: PPUSH
39159: LD_INT 5
39161: PPUSH
39162: CALL_OW 12
39166: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39167: LD_ADDR_VAR 0 12
39171: PUSH
39172: LD_INT 2
39174: PPUSH
39175: LD_INT 6
39177: PPUSH
39178: CALL_OW 12
39182: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39183: LD_ADDR_VAR 0 9
39187: PUSH
39188: LD_VAR 0 2
39192: PPUSH
39193: LD_VAR 0 11
39197: PPUSH
39198: LD_VAR 0 12
39202: PPUSH
39203: CALL_OW 272
39207: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39208: LD_ADDR_VAR 0 10
39212: PUSH
39213: LD_VAR 0 3
39217: PPUSH
39218: LD_VAR 0 11
39222: PPUSH
39223: LD_VAR 0 12
39227: PPUSH
39228: CALL_OW 273
39232: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39233: LD_VAR 0 9
39237: PPUSH
39238: LD_VAR 0 10
39242: PPUSH
39243: CALL_OW 488
39247: PUSH
39248: LD_VAR 0 9
39252: PUSH
39253: LD_VAR 0 10
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_VAR 0 7
39266: IN
39267: NOT
39268: AND
39269: PUSH
39270: LD_VAR 0 9
39274: PPUSH
39275: LD_VAR 0 10
39279: PPUSH
39280: CALL_OW 458
39284: NOT
39285: AND
39286: IFFALSE 39328
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39288: LD_ADDR_VAR 0 7
39292: PUSH
39293: LD_VAR 0 7
39297: PPUSH
39298: LD_VAR 0 7
39302: PUSH
39303: LD_INT 1
39305: PLUS
39306: PPUSH
39307: LD_VAR 0 9
39311: PUSH
39312: LD_VAR 0 10
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PPUSH
39321: CALL_OW 1
39325: ST_TO_ADDR
39326: GO 39342
// i := i - 1 ;
39328: LD_ADDR_VAR 0 5
39332: PUSH
39333: LD_VAR 0 5
39337: PUSH
39338: LD_INT 1
39340: MINUS
39341: ST_TO_ADDR
// end ;
39342: GO 39148
39344: POP
39345: POP
// for i in tmp do
39346: LD_ADDR_VAR 0 5
39350: PUSH
39351: LD_VAR 0 7
39355: PUSH
39356: FOR_IN
39357: IFFALSE 39395
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39359: LD_VAR 0 1
39363: PPUSH
39364: LD_VAR 0 5
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PPUSH
39373: LD_VAR 0 5
39377: PUSH
39378: LD_INT 2
39380: ARRAY
39381: PPUSH
39382: CALL 38337 0 3
39386: NOT
39387: IFFALSE 39393
// exit ;
39389: POP
39390: POP
39391: GO 39397
39393: GO 39356
39395: POP
39396: POP
// end ;
39397: LD_VAR 0 4
39401: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39402: LD_INT 0
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
39410: PPUSH
// if not GetClass ( unit ) = class_sniper then
39411: LD_VAR 0 1
39415: PPUSH
39416: CALL_OW 257
39420: PUSH
39421: LD_INT 5
39423: EQUAL
39424: NOT
39425: IFFALSE 39429
// exit ;
39427: GO 39817
// dist := 8 ;
39429: LD_ADDR_VAR 0 5
39433: PUSH
39434: LD_INT 8
39436: ST_TO_ADDR
// viewRange := 12 ;
39437: LD_ADDR_VAR 0 7
39441: PUSH
39442: LD_INT 12
39444: ST_TO_ADDR
// side := GetSide ( unit ) ;
39445: LD_ADDR_VAR 0 6
39449: PUSH
39450: LD_VAR 0 1
39454: PPUSH
39455: CALL_OW 255
39459: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39460: LD_INT 61
39462: PPUSH
39463: LD_VAR 0 6
39467: PPUSH
39468: CALL_OW 321
39472: PUSH
39473: LD_INT 2
39475: EQUAL
39476: IFFALSE 39486
// viewRange := 16 ;
39478: LD_ADDR_VAR 0 7
39482: PUSH
39483: LD_INT 16
39485: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39486: LD_VAR 0 1
39490: PPUSH
39491: LD_VAR 0 2
39495: PPUSH
39496: LD_VAR 0 3
39500: PPUSH
39501: CALL_OW 297
39505: PUSH
39506: LD_VAR 0 5
39510: GREATER
39511: IFFALSE 39590
// begin ComMoveXY ( unit , x , y ) ;
39513: LD_VAR 0 1
39517: PPUSH
39518: LD_VAR 0 2
39522: PPUSH
39523: LD_VAR 0 3
39527: PPUSH
39528: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39532: LD_INT 35
39534: PPUSH
39535: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39539: LD_VAR 0 1
39543: PPUSH
39544: LD_VAR 0 2
39548: PPUSH
39549: LD_VAR 0 3
39553: PPUSH
39554: CALL 76032 0 3
39558: NOT
39559: IFFALSE 39563
// exit ;
39561: GO 39817
// until GetDistUnitXY ( unit , x , y ) < dist ;
39563: LD_VAR 0 1
39567: PPUSH
39568: LD_VAR 0 2
39572: PPUSH
39573: LD_VAR 0 3
39577: PPUSH
39578: CALL_OW 297
39582: PUSH
39583: LD_VAR 0 5
39587: LESS
39588: IFFALSE 39532
// end ; ComTurnXY ( unit , x , y ) ;
39590: LD_VAR 0 1
39594: PPUSH
39595: LD_VAR 0 2
39599: PPUSH
39600: LD_VAR 0 3
39604: PPUSH
39605: CALL_OW 118
// wait ( 5 ) ;
39609: LD_INT 5
39611: PPUSH
39612: CALL_OW 67
// _d := GetDir ( unit ) ;
39616: LD_ADDR_VAR 0 10
39620: PUSH
39621: LD_VAR 0 1
39625: PPUSH
39626: CALL_OW 254
39630: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39631: LD_ADDR_VAR 0 8
39635: PUSH
39636: LD_VAR 0 1
39640: PPUSH
39641: CALL_OW 250
39645: PPUSH
39646: LD_VAR 0 10
39650: PPUSH
39651: LD_VAR 0 5
39655: PPUSH
39656: CALL_OW 272
39660: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39661: LD_ADDR_VAR 0 9
39665: PUSH
39666: LD_VAR 0 1
39670: PPUSH
39671: CALL_OW 251
39675: PPUSH
39676: LD_VAR 0 10
39680: PPUSH
39681: LD_VAR 0 5
39685: PPUSH
39686: CALL_OW 273
39690: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39691: LD_VAR 0 8
39695: PPUSH
39696: LD_VAR 0 9
39700: PPUSH
39701: CALL_OW 488
39705: NOT
39706: IFFALSE 39710
// exit ;
39708: GO 39817
// ComAnimCustom ( unit , 1 ) ;
39710: LD_VAR 0 1
39714: PPUSH
39715: LD_INT 1
39717: PPUSH
39718: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39722: LD_VAR 0 8
39726: PPUSH
39727: LD_VAR 0 9
39731: PPUSH
39732: LD_VAR 0 6
39736: PPUSH
39737: LD_VAR 0 7
39741: PPUSH
39742: CALL_OW 330
// repeat wait ( 1 ) ;
39746: LD_INT 1
39748: PPUSH
39749: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39753: LD_VAR 0 1
39757: PPUSH
39758: CALL_OW 316
39762: PUSH
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 314
39772: OR
39773: PUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 302
39783: NOT
39784: OR
39785: PUSH
39786: LD_VAR 0 1
39790: PPUSH
39791: CALL_OW 301
39795: OR
39796: IFFALSE 39746
// RemoveSeeing ( _x , _y , side ) ;
39798: LD_VAR 0 8
39802: PPUSH
39803: LD_VAR 0 9
39807: PPUSH
39808: LD_VAR 0 6
39812: PPUSH
39813: CALL_OW 331
// end ; end_of_file
39817: LD_VAR 0 4
39821: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39822: LD_INT 0
39824: PPUSH
39825: PPUSH
// if exist_mode then
39826: LD_VAR 0 2
39830: IFFALSE 39855
// unit := CreateCharacter ( prefix & ident ) else
39832: LD_ADDR_VAR 0 5
39836: PUSH
39837: LD_VAR 0 3
39841: PUSH
39842: LD_VAR 0 1
39846: STR
39847: PPUSH
39848: CALL_OW 34
39852: ST_TO_ADDR
39853: GO 39870
// unit := NewCharacter ( ident ) ;
39855: LD_ADDR_VAR 0 5
39859: PUSH
39860: LD_VAR 0 1
39864: PPUSH
39865: CALL_OW 25
39869: ST_TO_ADDR
// result := unit ;
39870: LD_ADDR_VAR 0 4
39874: PUSH
39875: LD_VAR 0 5
39879: ST_TO_ADDR
// end ;
39880: LD_VAR 0 4
39884: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39885: LD_INT 0
39887: PPUSH
39888: PPUSH
// if not side or not nation then
39889: LD_VAR 0 1
39893: NOT
39894: PUSH
39895: LD_VAR 0 2
39899: NOT
39900: OR
39901: IFFALSE 39905
// exit ;
39903: GO 40673
// case nation of nation_american :
39905: LD_VAR 0 2
39909: PUSH
39910: LD_INT 1
39912: DOUBLE
39913: EQUAL
39914: IFTRUE 39918
39916: GO 40132
39918: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39919: LD_ADDR_VAR 0 4
39923: PUSH
39924: LD_INT 35
39926: PUSH
39927: LD_INT 45
39929: PUSH
39930: LD_INT 46
39932: PUSH
39933: LD_INT 47
39935: PUSH
39936: LD_INT 82
39938: PUSH
39939: LD_INT 83
39941: PUSH
39942: LD_INT 84
39944: PUSH
39945: LD_INT 85
39947: PUSH
39948: LD_INT 86
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 6
39959: PUSH
39960: LD_INT 15
39962: PUSH
39963: LD_INT 16
39965: PUSH
39966: LD_INT 7
39968: PUSH
39969: LD_INT 12
39971: PUSH
39972: LD_INT 13
39974: PUSH
39975: LD_INT 10
39977: PUSH
39978: LD_INT 14
39980: PUSH
39981: LD_INT 20
39983: PUSH
39984: LD_INT 21
39986: PUSH
39987: LD_INT 22
39989: PUSH
39990: LD_INT 25
39992: PUSH
39993: LD_INT 32
39995: PUSH
39996: LD_INT 27
39998: PUSH
39999: LD_INT 36
40001: PUSH
40002: LD_INT 69
40004: PUSH
40005: LD_INT 39
40007: PUSH
40008: LD_INT 34
40010: PUSH
40011: LD_INT 40
40013: PUSH
40014: LD_INT 48
40016: PUSH
40017: LD_INT 49
40019: PUSH
40020: LD_INT 50
40022: PUSH
40023: LD_INT 51
40025: PUSH
40026: LD_INT 52
40028: PUSH
40029: LD_INT 53
40031: PUSH
40032: LD_INT 54
40034: PUSH
40035: LD_INT 55
40037: PUSH
40038: LD_INT 56
40040: PUSH
40041: LD_INT 57
40043: PUSH
40044: LD_INT 58
40046: PUSH
40047: LD_INT 59
40049: PUSH
40050: LD_INT 60
40052: PUSH
40053: LD_INT 61
40055: PUSH
40056: LD_INT 62
40058: PUSH
40059: LD_INT 80
40061: PUSH
40062: LD_INT 82
40064: PUSH
40065: LD_INT 83
40067: PUSH
40068: LD_INT 84
40070: PUSH
40071: LD_INT 85
40073: PUSH
40074: LD_INT 86
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: ST_TO_ADDR
40130: GO 40597
40132: LD_INT 2
40134: DOUBLE
40135: EQUAL
40136: IFTRUE 40140
40138: GO 40366
40140: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40141: LD_ADDR_VAR 0 4
40145: PUSH
40146: LD_INT 35
40148: PUSH
40149: LD_INT 45
40151: PUSH
40152: LD_INT 46
40154: PUSH
40155: LD_INT 47
40157: PUSH
40158: LD_INT 82
40160: PUSH
40161: LD_INT 83
40163: PUSH
40164: LD_INT 84
40166: PUSH
40167: LD_INT 85
40169: PUSH
40170: LD_INT 87
40172: PUSH
40173: LD_INT 70
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 11
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: LD_INT 4
40187: PUSH
40188: LD_INT 5
40190: PUSH
40191: LD_INT 6
40193: PUSH
40194: LD_INT 15
40196: PUSH
40197: LD_INT 18
40199: PUSH
40200: LD_INT 7
40202: PUSH
40203: LD_INT 17
40205: PUSH
40206: LD_INT 8
40208: PUSH
40209: LD_INT 20
40211: PUSH
40212: LD_INT 21
40214: PUSH
40215: LD_INT 22
40217: PUSH
40218: LD_INT 72
40220: PUSH
40221: LD_INT 26
40223: PUSH
40224: LD_INT 69
40226: PUSH
40227: LD_INT 39
40229: PUSH
40230: LD_INT 40
40232: PUSH
40233: LD_INT 41
40235: PUSH
40236: LD_INT 42
40238: PUSH
40239: LD_INT 43
40241: PUSH
40242: LD_INT 48
40244: PUSH
40245: LD_INT 49
40247: PUSH
40248: LD_INT 50
40250: PUSH
40251: LD_INT 51
40253: PUSH
40254: LD_INT 52
40256: PUSH
40257: LD_INT 53
40259: PUSH
40260: LD_INT 54
40262: PUSH
40263: LD_INT 55
40265: PUSH
40266: LD_INT 56
40268: PUSH
40269: LD_INT 60
40271: PUSH
40272: LD_INT 61
40274: PUSH
40275: LD_INT 62
40277: PUSH
40278: LD_INT 66
40280: PUSH
40281: LD_INT 67
40283: PUSH
40284: LD_INT 68
40286: PUSH
40287: LD_INT 81
40289: PUSH
40290: LD_INT 82
40292: PUSH
40293: LD_INT 83
40295: PUSH
40296: LD_INT 84
40298: PUSH
40299: LD_INT 85
40301: PUSH
40302: LD_INT 87
40304: PUSH
40305: LD_INT 88
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: ST_TO_ADDR
40364: GO 40597
40366: LD_INT 3
40368: DOUBLE
40369: EQUAL
40370: IFTRUE 40374
40372: GO 40596
40374: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40375: LD_ADDR_VAR 0 4
40379: PUSH
40380: LD_INT 46
40382: PUSH
40383: LD_INT 47
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 82
40394: PUSH
40395: LD_INT 83
40397: PUSH
40398: LD_INT 84
40400: PUSH
40401: LD_INT 85
40403: PUSH
40404: LD_INT 86
40406: PUSH
40407: LD_INT 11
40409: PUSH
40410: LD_INT 9
40412: PUSH
40413: LD_INT 20
40415: PUSH
40416: LD_INT 19
40418: PUSH
40419: LD_INT 21
40421: PUSH
40422: LD_INT 24
40424: PUSH
40425: LD_INT 22
40427: PUSH
40428: LD_INT 25
40430: PUSH
40431: LD_INT 28
40433: PUSH
40434: LD_INT 29
40436: PUSH
40437: LD_INT 30
40439: PUSH
40440: LD_INT 31
40442: PUSH
40443: LD_INT 37
40445: PUSH
40446: LD_INT 38
40448: PUSH
40449: LD_INT 32
40451: PUSH
40452: LD_INT 27
40454: PUSH
40455: LD_INT 33
40457: PUSH
40458: LD_INT 69
40460: PUSH
40461: LD_INT 39
40463: PUSH
40464: LD_INT 34
40466: PUSH
40467: LD_INT 40
40469: PUSH
40470: LD_INT 71
40472: PUSH
40473: LD_INT 23
40475: PUSH
40476: LD_INT 44
40478: PUSH
40479: LD_INT 48
40481: PUSH
40482: LD_INT 49
40484: PUSH
40485: LD_INT 50
40487: PUSH
40488: LD_INT 51
40490: PUSH
40491: LD_INT 52
40493: PUSH
40494: LD_INT 53
40496: PUSH
40497: LD_INT 54
40499: PUSH
40500: LD_INT 55
40502: PUSH
40503: LD_INT 56
40505: PUSH
40506: LD_INT 57
40508: PUSH
40509: LD_INT 58
40511: PUSH
40512: LD_INT 59
40514: PUSH
40515: LD_INT 63
40517: PUSH
40518: LD_INT 64
40520: PUSH
40521: LD_INT 65
40523: PUSH
40524: LD_INT 82
40526: PUSH
40527: LD_INT 83
40529: PUSH
40530: LD_INT 84
40532: PUSH
40533: LD_INT 85
40535: PUSH
40536: LD_INT 86
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: ST_TO_ADDR
40594: GO 40597
40596: POP
// if state > - 1 and state < 3 then
40597: LD_VAR 0 3
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: GREATER
40606: PUSH
40607: LD_VAR 0 3
40611: PUSH
40612: LD_INT 3
40614: LESS
40615: AND
40616: IFFALSE 40673
// for i in result do
40618: LD_ADDR_VAR 0 5
40622: PUSH
40623: LD_VAR 0 4
40627: PUSH
40628: FOR_IN
40629: IFFALSE 40671
// if GetTech ( i , side ) <> state then
40631: LD_VAR 0 5
40635: PPUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: CALL_OW 321
40645: PUSH
40646: LD_VAR 0 3
40650: NONEQUAL
40651: IFFALSE 40669
// result := result diff i ;
40653: LD_ADDR_VAR 0 4
40657: PUSH
40658: LD_VAR 0 4
40662: PUSH
40663: LD_VAR 0 5
40667: DIFF
40668: ST_TO_ADDR
40669: GO 40628
40671: POP
40672: POP
// end ;
40673: LD_VAR 0 4
40677: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40678: LD_INT 0
40680: PPUSH
40681: PPUSH
40682: PPUSH
// result := true ;
40683: LD_ADDR_VAR 0 3
40687: PUSH
40688: LD_INT 1
40690: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: LD_VAR 0 2
40700: PPUSH
40701: CALL_OW 480
40705: ST_TO_ADDR
// if not tmp then
40706: LD_VAR 0 5
40710: NOT
40711: IFFALSE 40715
// exit ;
40713: GO 40764
// for i in tmp do
40715: LD_ADDR_VAR 0 4
40719: PUSH
40720: LD_VAR 0 5
40724: PUSH
40725: FOR_IN
40726: IFFALSE 40762
// if GetTech ( i , side ) <> state_researched then
40728: LD_VAR 0 4
40732: PPUSH
40733: LD_VAR 0 1
40737: PPUSH
40738: CALL_OW 321
40742: PUSH
40743: LD_INT 2
40745: NONEQUAL
40746: IFFALSE 40760
// begin result := false ;
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_INT 0
40755: ST_TO_ADDR
// exit ;
40756: POP
40757: POP
40758: GO 40764
// end ;
40760: GO 40725
40762: POP
40763: POP
// end ;
40764: LD_VAR 0 3
40768: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40769: LD_INT 0
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40784: LD_VAR 0 1
40788: NOT
40789: PUSH
40790: LD_VAR 0 1
40794: PPUSH
40795: CALL_OW 257
40799: PUSH
40800: LD_INT 9
40802: NONEQUAL
40803: OR
40804: IFFALSE 40808
// exit ;
40806: GO 41381
// side := GetSide ( unit ) ;
40808: LD_ADDR_VAR 0 9
40812: PUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 255
40822: ST_TO_ADDR
// tech_space := tech_spacanom ;
40823: LD_ADDR_VAR 0 12
40827: PUSH
40828: LD_INT 29
40830: ST_TO_ADDR
// tech_time := tech_taurad ;
40831: LD_ADDR_VAR 0 13
40835: PUSH
40836: LD_INT 28
40838: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40839: LD_ADDR_VAR 0 11
40843: PUSH
40844: LD_VAR 0 1
40848: PPUSH
40849: CALL_OW 310
40853: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40854: LD_VAR 0 11
40858: PPUSH
40859: CALL_OW 247
40863: PUSH
40864: LD_INT 2
40866: EQUAL
40867: IFFALSE 40871
// exit ;
40869: GO 41381
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40871: LD_ADDR_VAR 0 8
40875: PUSH
40876: LD_INT 81
40878: PUSH
40879: LD_VAR 0 9
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: LD_INT 21
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PPUSH
40909: CALL_OW 69
40913: ST_TO_ADDR
// if not tmp then
40914: LD_VAR 0 8
40918: NOT
40919: IFFALSE 40923
// exit ;
40921: GO 41381
// if in_unit then
40923: LD_VAR 0 11
40927: IFFALSE 40951
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40929: LD_ADDR_VAR 0 10
40933: PUSH
40934: LD_VAR 0 8
40938: PPUSH
40939: LD_VAR 0 11
40943: PPUSH
40944: CALL_OW 74
40948: ST_TO_ADDR
40949: GO 40971
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40951: LD_ADDR_VAR 0 10
40955: PUSH
40956: LD_VAR 0 8
40960: PPUSH
40961: LD_VAR 0 1
40965: PPUSH
40966: CALL_OW 74
40970: ST_TO_ADDR
// if not enemy then
40971: LD_VAR 0 10
40975: NOT
40976: IFFALSE 40980
// exit ;
40978: GO 41381
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40980: LD_VAR 0 11
40984: PUSH
40985: LD_VAR 0 11
40989: PPUSH
40990: LD_VAR 0 10
40994: PPUSH
40995: CALL_OW 296
40999: PUSH
41000: LD_INT 13
41002: GREATER
41003: AND
41004: PUSH
41005: LD_VAR 0 1
41009: PPUSH
41010: LD_VAR 0 10
41014: PPUSH
41015: CALL_OW 296
41019: PUSH
41020: LD_INT 12
41022: GREATER
41023: OR
41024: IFFALSE 41028
// exit ;
41026: GO 41381
// missile := [ 1 ] ;
41028: LD_ADDR_VAR 0 14
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41039: LD_VAR 0 9
41043: PPUSH
41044: LD_VAR 0 12
41048: PPUSH
41049: CALL_OW 325
41053: IFFALSE 41082
// missile := Replace ( missile , missile + 1 , 2 ) ;
41055: LD_ADDR_VAR 0 14
41059: PUSH
41060: LD_VAR 0 14
41064: PPUSH
41065: LD_VAR 0 14
41069: PUSH
41070: LD_INT 1
41072: PLUS
41073: PPUSH
41074: LD_INT 2
41076: PPUSH
41077: CALL_OW 1
41081: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41082: LD_VAR 0 9
41086: PPUSH
41087: LD_VAR 0 13
41091: PPUSH
41092: CALL_OW 325
41096: PUSH
41097: LD_VAR 0 10
41101: PPUSH
41102: CALL_OW 255
41106: PPUSH
41107: LD_VAR 0 13
41111: PPUSH
41112: CALL_OW 325
41116: NOT
41117: AND
41118: IFFALSE 41147
// missile := Replace ( missile , missile + 1 , 3 ) ;
41120: LD_ADDR_VAR 0 14
41124: PUSH
41125: LD_VAR 0 14
41129: PPUSH
41130: LD_VAR 0 14
41134: PUSH
41135: LD_INT 1
41137: PLUS
41138: PPUSH
41139: LD_INT 3
41141: PPUSH
41142: CALL_OW 1
41146: ST_TO_ADDR
// if missile < 2 then
41147: LD_VAR 0 14
41151: PUSH
41152: LD_INT 2
41154: LESS
41155: IFFALSE 41159
// exit ;
41157: GO 41381
// x := GetX ( enemy ) ;
41159: LD_ADDR_VAR 0 4
41163: PUSH
41164: LD_VAR 0 10
41168: PPUSH
41169: CALL_OW 250
41173: ST_TO_ADDR
// y := GetY ( enemy ) ;
41174: LD_ADDR_VAR 0 5
41178: PUSH
41179: LD_VAR 0 10
41183: PPUSH
41184: CALL_OW 251
41188: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41189: LD_ADDR_VAR 0 6
41193: PUSH
41194: LD_VAR 0 4
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PPUSH
41203: LD_INT 1
41205: PPUSH
41206: CALL_OW 12
41210: PLUS
41211: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41212: LD_ADDR_VAR 0 7
41216: PUSH
41217: LD_VAR 0 5
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PPUSH
41226: LD_INT 1
41228: PPUSH
41229: CALL_OW 12
41233: PLUS
41234: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41235: LD_VAR 0 6
41239: PPUSH
41240: LD_VAR 0 7
41244: PPUSH
41245: CALL_OW 488
41249: NOT
41250: IFFALSE 41272
// begin _x := x ;
41252: LD_ADDR_VAR 0 6
41256: PUSH
41257: LD_VAR 0 4
41261: ST_TO_ADDR
// _y := y ;
41262: LD_ADDR_VAR 0 7
41266: PUSH
41267: LD_VAR 0 5
41271: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41272: LD_ADDR_VAR 0 3
41276: PUSH
41277: LD_INT 1
41279: PPUSH
41280: LD_VAR 0 14
41284: PPUSH
41285: CALL_OW 12
41289: ST_TO_ADDR
// case i of 1 :
41290: LD_VAR 0 3
41294: PUSH
41295: LD_INT 1
41297: DOUBLE
41298: EQUAL
41299: IFTRUE 41303
41301: GO 41320
41303: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41304: LD_VAR 0 1
41308: PPUSH
41309: LD_VAR 0 10
41313: PPUSH
41314: CALL_OW 115
41318: GO 41381
41320: LD_INT 2
41322: DOUBLE
41323: EQUAL
41324: IFTRUE 41328
41326: GO 41350
41328: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41329: LD_VAR 0 1
41333: PPUSH
41334: LD_VAR 0 6
41338: PPUSH
41339: LD_VAR 0 7
41343: PPUSH
41344: CALL_OW 153
41348: GO 41381
41350: LD_INT 3
41352: DOUBLE
41353: EQUAL
41354: IFTRUE 41358
41356: GO 41380
41358: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41359: LD_VAR 0 1
41363: PPUSH
41364: LD_VAR 0 6
41368: PPUSH
41369: LD_VAR 0 7
41373: PPUSH
41374: CALL_OW 154
41378: GO 41381
41380: POP
// end ;
41381: LD_VAR 0 2
41385: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41386: LD_INT 0
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
41393: PPUSH
// if not unit or not building then
41394: LD_VAR 0 1
41398: NOT
41399: PUSH
41400: LD_VAR 0 2
41404: NOT
41405: OR
41406: IFFALSE 41410
// exit ;
41408: GO 41568
// x := GetX ( building ) ;
41410: LD_ADDR_VAR 0 5
41414: PUSH
41415: LD_VAR 0 2
41419: PPUSH
41420: CALL_OW 250
41424: ST_TO_ADDR
// y := GetY ( building ) ;
41425: LD_ADDR_VAR 0 6
41429: PUSH
41430: LD_VAR 0 2
41434: PPUSH
41435: CALL_OW 251
41439: ST_TO_ADDR
// for i = 0 to 5 do
41440: LD_ADDR_VAR 0 4
41444: PUSH
41445: DOUBLE
41446: LD_INT 0
41448: DEC
41449: ST_TO_ADDR
41450: LD_INT 5
41452: PUSH
41453: FOR_TO
41454: IFFALSE 41566
// begin _x := ShiftX ( x , i , 3 ) ;
41456: LD_ADDR_VAR 0 7
41460: PUSH
41461: LD_VAR 0 5
41465: PPUSH
41466: LD_VAR 0 4
41470: PPUSH
41471: LD_INT 3
41473: PPUSH
41474: CALL_OW 272
41478: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41479: LD_ADDR_VAR 0 8
41483: PUSH
41484: LD_VAR 0 6
41488: PPUSH
41489: LD_VAR 0 4
41493: PPUSH
41494: LD_INT 3
41496: PPUSH
41497: CALL_OW 273
41501: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41502: LD_VAR 0 7
41506: PPUSH
41507: LD_VAR 0 8
41511: PPUSH
41512: CALL_OW 488
41516: NOT
41517: IFFALSE 41521
// continue ;
41519: GO 41453
// if HexInfo ( _x , _y ) = 0 then
41521: LD_VAR 0 7
41525: PPUSH
41526: LD_VAR 0 8
41530: PPUSH
41531: CALL_OW 428
41535: PUSH
41536: LD_INT 0
41538: EQUAL
41539: IFFALSE 41564
// begin ComMoveXY ( unit , _x , _y ) ;
41541: LD_VAR 0 1
41545: PPUSH
41546: LD_VAR 0 7
41550: PPUSH
41551: LD_VAR 0 8
41555: PPUSH
41556: CALL_OW 111
// exit ;
41560: POP
41561: POP
41562: GO 41568
// end ; end ;
41564: GO 41453
41566: POP
41567: POP
// end ;
41568: LD_VAR 0 3
41572: RET
// export function ScanBase ( side , base_area ) ; begin
41573: LD_INT 0
41575: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41576: LD_ADDR_VAR 0 3
41580: PUSH
41581: LD_VAR 0 2
41585: PPUSH
41586: LD_INT 81
41588: PUSH
41589: LD_VAR 0 1
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PPUSH
41598: CALL_OW 70
41602: ST_TO_ADDR
// end ;
41603: LD_VAR 0 3
41607: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41608: LD_INT 0
41610: PPUSH
41611: PPUSH
41612: PPUSH
41613: PPUSH
// result := false ;
41614: LD_ADDR_VAR 0 2
41618: PUSH
41619: LD_INT 0
41621: ST_TO_ADDR
// side := GetSide ( unit ) ;
41622: LD_ADDR_VAR 0 3
41626: PUSH
41627: LD_VAR 0 1
41631: PPUSH
41632: CALL_OW 255
41636: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41637: LD_ADDR_VAR 0 4
41641: PUSH
41642: LD_VAR 0 1
41646: PPUSH
41647: CALL_OW 248
41651: ST_TO_ADDR
// case nat of 1 :
41652: LD_VAR 0 4
41656: PUSH
41657: LD_INT 1
41659: DOUBLE
41660: EQUAL
41661: IFTRUE 41665
41663: GO 41676
41665: POP
// tech := tech_lassight ; 2 :
41666: LD_ADDR_VAR 0 5
41670: PUSH
41671: LD_INT 12
41673: ST_TO_ADDR
41674: GO 41715
41676: LD_INT 2
41678: DOUBLE
41679: EQUAL
41680: IFTRUE 41684
41682: GO 41695
41684: POP
// tech := tech_mortar ; 3 :
41685: LD_ADDR_VAR 0 5
41689: PUSH
41690: LD_INT 41
41692: ST_TO_ADDR
41693: GO 41715
41695: LD_INT 3
41697: DOUBLE
41698: EQUAL
41699: IFTRUE 41703
41701: GO 41714
41703: POP
// tech := tech_bazooka ; end ;
41704: LD_ADDR_VAR 0 5
41708: PUSH
41709: LD_INT 44
41711: ST_TO_ADDR
41712: GO 41715
41714: POP
// if Researched ( side , tech ) then
41715: LD_VAR 0 3
41719: PPUSH
41720: LD_VAR 0 5
41724: PPUSH
41725: CALL_OW 325
41729: IFFALSE 41756
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41731: LD_ADDR_VAR 0 2
41735: PUSH
41736: LD_INT 5
41738: PUSH
41739: LD_INT 8
41741: PUSH
41742: LD_INT 9
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: PUSH
41750: LD_VAR 0 4
41754: ARRAY
41755: ST_TO_ADDR
// end ;
41756: LD_VAR 0 2
41760: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41761: LD_INT 0
41763: PPUSH
41764: PPUSH
41765: PPUSH
// if not mines then
41766: LD_VAR 0 2
41770: NOT
41771: IFFALSE 41775
// exit ;
41773: GO 41919
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41775: LD_ADDR_VAR 0 5
41779: PUSH
41780: LD_INT 81
41782: PUSH
41783: LD_VAR 0 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: LD_INT 21
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PPUSH
41813: CALL_OW 69
41817: ST_TO_ADDR
// for i in mines do
41818: LD_ADDR_VAR 0 4
41822: PUSH
41823: LD_VAR 0 2
41827: PUSH
41828: FOR_IN
41829: IFFALSE 41917
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41831: LD_VAR 0 4
41835: PUSH
41836: LD_INT 1
41838: ARRAY
41839: PPUSH
41840: LD_VAR 0 4
41844: PUSH
41845: LD_INT 2
41847: ARRAY
41848: PPUSH
41849: CALL_OW 458
41853: NOT
41854: IFFALSE 41858
// continue ;
41856: GO 41828
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41858: LD_VAR 0 4
41862: PUSH
41863: LD_INT 1
41865: ARRAY
41866: PPUSH
41867: LD_VAR 0 4
41871: PUSH
41872: LD_INT 2
41874: ARRAY
41875: PPUSH
41876: CALL_OW 428
41880: PUSH
41881: LD_VAR 0 5
41885: IN
41886: IFFALSE 41915
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41888: LD_VAR 0 4
41892: PUSH
41893: LD_INT 1
41895: ARRAY
41896: PPUSH
41897: LD_VAR 0 4
41901: PUSH
41902: LD_INT 2
41904: ARRAY
41905: PPUSH
41906: LD_VAR 0 1
41910: PPUSH
41911: CALL_OW 456
// end ;
41915: GO 41828
41917: POP
41918: POP
// end ;
41919: LD_VAR 0 3
41923: RET
// export function Count ( array ) ; var i ; begin
41924: LD_INT 0
41926: PPUSH
41927: PPUSH
// result := 0 ;
41928: LD_ADDR_VAR 0 2
41932: PUSH
41933: LD_INT 0
41935: ST_TO_ADDR
// for i in array do
41936: LD_ADDR_VAR 0 3
41940: PUSH
41941: LD_VAR 0 1
41945: PUSH
41946: FOR_IN
41947: IFFALSE 41971
// if i then
41949: LD_VAR 0 3
41953: IFFALSE 41969
// result := result + 1 ;
41955: LD_ADDR_VAR 0 2
41959: PUSH
41960: LD_VAR 0 2
41964: PUSH
41965: LD_INT 1
41967: PLUS
41968: ST_TO_ADDR
41969: GO 41946
41971: POP
41972: POP
// end ;
41973: LD_VAR 0 2
41977: RET
// export function IsEmpty ( building ) ; begin
41978: LD_INT 0
41980: PPUSH
// if not building then
41981: LD_VAR 0 1
41985: NOT
41986: IFFALSE 41990
// exit ;
41988: GO 42033
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41990: LD_ADDR_VAR 0 2
41994: PUSH
41995: LD_VAR 0 1
41999: PUSH
42000: LD_INT 22
42002: PUSH
42003: LD_VAR 0 1
42007: PPUSH
42008: CALL_OW 255
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 58
42019: PUSH
42020: EMPTY
42021: LIST
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PPUSH
42027: CALL_OW 69
42031: IN
42032: ST_TO_ADDR
// end ;
42033: LD_VAR 0 2
42037: RET
// export function IsNotFull ( building ) ; var places ; begin
42038: LD_INT 0
42040: PPUSH
42041: PPUSH
// if not building then
42042: LD_VAR 0 1
42046: NOT
42047: IFFALSE 42051
// exit ;
42049: GO 42222
// result := false ;
42051: LD_ADDR_VAR 0 2
42055: PUSH
42056: LD_INT 0
42058: ST_TO_ADDR
// places := 0 ;
42059: LD_ADDR_VAR 0 3
42063: PUSH
42064: LD_INT 0
42066: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42067: LD_VAR 0 1
42071: PPUSH
42072: CALL_OW 266
42076: PUSH
42077: LD_INT 0
42079: DOUBLE
42080: EQUAL
42081: IFTRUE 42139
42083: LD_INT 1
42085: DOUBLE
42086: EQUAL
42087: IFTRUE 42139
42089: LD_INT 6
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42139
42095: LD_INT 7
42097: DOUBLE
42098: EQUAL
42099: IFTRUE 42139
42101: LD_INT 8
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42139
42107: LD_INT 4
42109: DOUBLE
42110: EQUAL
42111: IFTRUE 42139
42113: LD_INT 5
42115: DOUBLE
42116: EQUAL
42117: IFTRUE 42139
42119: LD_INT 2
42121: DOUBLE
42122: EQUAL
42123: IFTRUE 42139
42125: LD_INT 3
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42139
42131: LD_INT 35
42133: DOUBLE
42134: EQUAL
42135: IFTRUE 42139
42137: GO 42150
42139: POP
// places := 6 ; b_bunker , b_breastwork :
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: LD_INT 6
42147: ST_TO_ADDR
42148: GO 42195
42150: LD_INT 32
42152: DOUBLE
42153: EQUAL
42154: IFTRUE 42164
42156: LD_INT 31
42158: DOUBLE
42159: EQUAL
42160: IFTRUE 42164
42162: GO 42175
42164: POP
// places := 1 ; b_control_tower :
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_INT 1
42172: ST_TO_ADDR
42173: GO 42195
42175: LD_INT 36
42177: DOUBLE
42178: EQUAL
42179: IFTRUE 42183
42181: GO 42194
42183: POP
// places := 3 ; end ;
42184: LD_ADDR_VAR 0 3
42188: PUSH
42189: LD_INT 3
42191: ST_TO_ADDR
42192: GO 42195
42194: POP
// if places then
42195: LD_VAR 0 3
42199: IFFALSE 42222
// result := UnitsInside ( building ) < places ;
42201: LD_ADDR_VAR 0 2
42205: PUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 313
42215: PUSH
42216: LD_VAR 0 3
42220: LESS
42221: ST_TO_ADDR
// end ;
42222: LD_VAR 0 2
42226: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42227: LD_INT 0
42229: PPUSH
42230: PPUSH
42231: PPUSH
42232: PPUSH
// tmp := [ ] ;
42233: LD_ADDR_VAR 0 3
42237: PUSH
42238: EMPTY
42239: ST_TO_ADDR
// list := [ ] ;
42240: LD_ADDR_VAR 0 5
42244: PUSH
42245: EMPTY
42246: ST_TO_ADDR
// for i = 16 to 25 do
42247: LD_ADDR_VAR 0 4
42251: PUSH
42252: DOUBLE
42253: LD_INT 16
42255: DEC
42256: ST_TO_ADDR
42257: LD_INT 25
42259: PUSH
42260: FOR_TO
42261: IFFALSE 42334
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_VAR 0 3
42272: PUSH
42273: LD_INT 22
42275: PUSH
42276: LD_VAR 0 1
42280: PPUSH
42281: CALL_OW 255
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 91
42292: PUSH
42293: LD_VAR 0 1
42297: PUSH
42298: LD_INT 6
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 30
42308: PUSH
42309: LD_VAR 0 4
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: PPUSH
42326: CALL_OW 69
42330: ADD
42331: ST_TO_ADDR
42332: GO 42260
42334: POP
42335: POP
// for i = 1 to tmp do
42336: LD_ADDR_VAR 0 4
42340: PUSH
42341: DOUBLE
42342: LD_INT 1
42344: DEC
42345: ST_TO_ADDR
42346: LD_VAR 0 3
42350: PUSH
42351: FOR_TO
42352: IFFALSE 42440
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42354: LD_ADDR_VAR 0 5
42358: PUSH
42359: LD_VAR 0 5
42363: PUSH
42364: LD_VAR 0 3
42368: PUSH
42369: LD_VAR 0 4
42373: ARRAY
42374: PPUSH
42375: CALL_OW 266
42379: PUSH
42380: LD_VAR 0 3
42384: PUSH
42385: LD_VAR 0 4
42389: ARRAY
42390: PPUSH
42391: CALL_OW 250
42395: PUSH
42396: LD_VAR 0 3
42400: PUSH
42401: LD_VAR 0 4
42405: ARRAY
42406: PPUSH
42407: CALL_OW 251
42411: PUSH
42412: LD_VAR 0 3
42416: PUSH
42417: LD_VAR 0 4
42421: ARRAY
42422: PPUSH
42423: CALL_OW 254
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: PUSH
42434: EMPTY
42435: LIST
42436: ADD
42437: ST_TO_ADDR
42438: GO 42351
42440: POP
42441: POP
// result := list ;
42442: LD_ADDR_VAR 0 2
42446: PUSH
42447: LD_VAR 0 5
42451: ST_TO_ADDR
// end ;
42452: LD_VAR 0 2
42456: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42457: LD_INT 0
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
// if not factory then
42466: LD_VAR 0 1
42470: NOT
42471: IFFALSE 42475
// exit ;
42473: GO 43068
// if control = control_apeman then
42475: LD_VAR 0 4
42479: PUSH
42480: LD_INT 5
42482: EQUAL
42483: IFFALSE 42592
// begin tmp := UnitsInside ( factory ) ;
42485: LD_ADDR_VAR 0 8
42489: PUSH
42490: LD_VAR 0 1
42494: PPUSH
42495: CALL_OW 313
42499: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42500: LD_VAR 0 8
42504: PPUSH
42505: LD_INT 25
42507: PUSH
42508: LD_INT 12
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PPUSH
42515: CALL_OW 72
42519: NOT
42520: IFFALSE 42530
// control := control_manual ;
42522: LD_ADDR_VAR 0 4
42526: PUSH
42527: LD_INT 1
42529: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42530: LD_ADDR_VAR 0 8
42534: PUSH
42535: LD_VAR 0 1
42539: PPUSH
42540: CALL 42227 0 1
42544: ST_TO_ADDR
// if tmp then
42545: LD_VAR 0 8
42549: IFFALSE 42592
// begin for i in tmp do
42551: LD_ADDR_VAR 0 7
42555: PUSH
42556: LD_VAR 0 8
42560: PUSH
42561: FOR_IN
42562: IFFALSE 42590
// if i [ 1 ] = b_ext_radio then
42564: LD_VAR 0 7
42568: PUSH
42569: LD_INT 1
42571: ARRAY
42572: PUSH
42573: LD_INT 22
42575: EQUAL
42576: IFFALSE 42588
// begin control := control_remote ;
42578: LD_ADDR_VAR 0 4
42582: PUSH
42583: LD_INT 2
42585: ST_TO_ADDR
// break ;
42586: GO 42590
// end ;
42588: GO 42561
42590: POP
42591: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42592: LD_VAR 0 1
42596: PPUSH
42597: LD_VAR 0 2
42601: PPUSH
42602: LD_VAR 0 3
42606: PPUSH
42607: LD_VAR 0 4
42611: PPUSH
42612: LD_VAR 0 5
42616: PPUSH
42617: CALL_OW 448
42621: IFFALSE 42656
// begin result := [ chassis , engine , control , weapon ] ;
42623: LD_ADDR_VAR 0 6
42627: PUSH
42628: LD_VAR 0 2
42632: PUSH
42633: LD_VAR 0 3
42637: PUSH
42638: LD_VAR 0 4
42642: PUSH
42643: LD_VAR 0 5
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: ST_TO_ADDR
// exit ;
42654: GO 43068
// end ; _chassis := AvailableChassisList ( factory ) ;
42656: LD_ADDR_VAR 0 9
42660: PUSH
42661: LD_VAR 0 1
42665: PPUSH
42666: CALL_OW 475
42670: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42671: LD_ADDR_VAR 0 11
42675: PUSH
42676: LD_VAR 0 1
42680: PPUSH
42681: CALL_OW 476
42685: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42686: LD_ADDR_VAR 0 12
42690: PUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 477
42700: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42701: LD_ADDR_VAR 0 10
42705: PUSH
42706: LD_VAR 0 1
42710: PPUSH
42711: CALL_OW 478
42715: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42716: LD_VAR 0 9
42720: NOT
42721: PUSH
42722: LD_VAR 0 11
42726: NOT
42727: OR
42728: PUSH
42729: LD_VAR 0 12
42733: NOT
42734: OR
42735: PUSH
42736: LD_VAR 0 10
42740: NOT
42741: OR
42742: IFFALSE 42777
// begin result := [ chassis , engine , control , weapon ] ;
42744: LD_ADDR_VAR 0 6
42748: PUSH
42749: LD_VAR 0 2
42753: PUSH
42754: LD_VAR 0 3
42758: PUSH
42759: LD_VAR 0 4
42763: PUSH
42764: LD_VAR 0 5
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// exit ;
42775: GO 43068
// end ; if not chassis in _chassis then
42777: LD_VAR 0 2
42781: PUSH
42782: LD_VAR 0 9
42786: IN
42787: NOT
42788: IFFALSE 42814
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42790: LD_ADDR_VAR 0 2
42794: PUSH
42795: LD_VAR 0 9
42799: PUSH
42800: LD_INT 1
42802: PPUSH
42803: LD_VAR 0 9
42807: PPUSH
42808: CALL_OW 12
42812: ARRAY
42813: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42814: LD_VAR 0 2
42818: PPUSH
42819: LD_VAR 0 3
42823: PPUSH
42824: CALL 43073 0 2
42828: NOT
42829: IFFALSE 42888
// repeat engine := _engine [ 1 ] ;
42831: LD_ADDR_VAR 0 3
42835: PUSH
42836: LD_VAR 0 11
42840: PUSH
42841: LD_INT 1
42843: ARRAY
42844: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42845: LD_ADDR_VAR 0 11
42849: PUSH
42850: LD_VAR 0 11
42854: PPUSH
42855: LD_INT 1
42857: PPUSH
42858: CALL_OW 3
42862: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42863: LD_VAR 0 2
42867: PPUSH
42868: LD_VAR 0 3
42872: PPUSH
42873: CALL 43073 0 2
42877: PUSH
42878: LD_VAR 0 11
42882: PUSH
42883: EMPTY
42884: EQUAL
42885: OR
42886: IFFALSE 42831
// if not control in _control then
42888: LD_VAR 0 4
42892: PUSH
42893: LD_VAR 0 12
42897: IN
42898: NOT
42899: IFFALSE 42925
// control := _control [ rand ( 1 , _control ) ] ;
42901: LD_ADDR_VAR 0 4
42905: PUSH
42906: LD_VAR 0 12
42910: PUSH
42911: LD_INT 1
42913: PPUSH
42914: LD_VAR 0 12
42918: PPUSH
42919: CALL_OW 12
42923: ARRAY
42924: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42925: LD_VAR 0 2
42929: PPUSH
42930: LD_VAR 0 5
42934: PPUSH
42935: CALL 43293 0 2
42939: NOT
42940: IFFALSE 42999
// repeat weapon := _weapon [ 1 ] ;
42942: LD_ADDR_VAR 0 5
42946: PUSH
42947: LD_VAR 0 10
42951: PUSH
42952: LD_INT 1
42954: ARRAY
42955: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42956: LD_ADDR_VAR 0 10
42960: PUSH
42961: LD_VAR 0 10
42965: PPUSH
42966: LD_INT 1
42968: PPUSH
42969: CALL_OW 3
42973: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42974: LD_VAR 0 2
42978: PPUSH
42979: LD_VAR 0 5
42983: PPUSH
42984: CALL 43293 0 2
42988: PUSH
42989: LD_VAR 0 10
42993: PUSH
42994: EMPTY
42995: EQUAL
42996: OR
42997: IFFALSE 42942
// result := [ ] ;
42999: LD_ADDR_VAR 0 6
43003: PUSH
43004: EMPTY
43005: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43006: LD_VAR 0 1
43010: PPUSH
43011: LD_VAR 0 2
43015: PPUSH
43016: LD_VAR 0 3
43020: PPUSH
43021: LD_VAR 0 4
43025: PPUSH
43026: LD_VAR 0 5
43030: PPUSH
43031: CALL_OW 448
43035: IFFALSE 43068
// result := [ chassis , engine , control , weapon ] ;
43037: LD_ADDR_VAR 0 6
43041: PUSH
43042: LD_VAR 0 2
43046: PUSH
43047: LD_VAR 0 3
43051: PUSH
43052: LD_VAR 0 4
43056: PUSH
43057: LD_VAR 0 5
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
// end ;
43068: LD_VAR 0 6
43072: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43073: LD_INT 0
43075: PPUSH
// if not chassis or not engine then
43076: LD_VAR 0 1
43080: NOT
43081: PUSH
43082: LD_VAR 0 2
43086: NOT
43087: OR
43088: IFFALSE 43092
// exit ;
43090: GO 43288
// case engine of engine_solar :
43092: LD_VAR 0 2
43096: PUSH
43097: LD_INT 2
43099: DOUBLE
43100: EQUAL
43101: IFTRUE 43105
43103: GO 43143
43105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43106: LD_ADDR_VAR 0 3
43110: PUSH
43111: LD_INT 11
43113: PUSH
43114: LD_INT 12
43116: PUSH
43117: LD_INT 13
43119: PUSH
43120: LD_INT 14
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
43141: GO 43272
43143: LD_INT 1
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43213
43151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43152: LD_ADDR_VAR 0 3
43156: PUSH
43157: LD_INT 11
43159: PUSH
43160: LD_INT 12
43162: PUSH
43163: LD_INT 13
43165: PUSH
43166: LD_INT 14
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: LD_INT 4
43180: PUSH
43181: LD_INT 5
43183: PUSH
43184: LD_INT 21
43186: PUSH
43187: LD_INT 23
43189: PUSH
43190: LD_INT 22
43192: PUSH
43193: LD_INT 24
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: ST_TO_ADDR
43211: GO 43272
43213: LD_INT 3
43215: DOUBLE
43216: EQUAL
43217: IFTRUE 43221
43219: GO 43271
43221: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43222: LD_ADDR_VAR 0 3
43226: PUSH
43227: LD_INT 13
43229: PUSH
43230: LD_INT 14
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: LD_INT 4
43241: PUSH
43242: LD_INT 5
43244: PUSH
43245: LD_INT 21
43247: PUSH
43248: LD_INT 22
43250: PUSH
43251: LD_INT 23
43253: PUSH
43254: LD_INT 24
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: ST_TO_ADDR
43269: GO 43272
43271: POP
// result := ( chassis in result ) ;
43272: LD_ADDR_VAR 0 3
43276: PUSH
43277: LD_VAR 0 1
43281: PUSH
43282: LD_VAR 0 3
43286: IN
43287: ST_TO_ADDR
// end ;
43288: LD_VAR 0 3
43292: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43293: LD_INT 0
43295: PPUSH
// if not chassis or not weapon then
43296: LD_VAR 0 1
43300: NOT
43301: PUSH
43302: LD_VAR 0 2
43306: NOT
43307: OR
43308: IFFALSE 43312
// exit ;
43310: GO 44374
// case weapon of us_machine_gun :
43312: LD_VAR 0 2
43316: PUSH
43317: LD_INT 2
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43355
43325: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: LD_INT 4
43342: PUSH
43343: LD_INT 5
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: ST_TO_ADDR
43353: GO 44358
43355: LD_INT 3
43357: DOUBLE
43358: EQUAL
43359: IFTRUE 43363
43361: GO 43393
43363: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43364: LD_ADDR_VAR 0 3
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 4
43380: PUSH
43381: LD_INT 5
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: ST_TO_ADDR
43391: GO 44358
43393: LD_INT 11
43395: DOUBLE
43396: EQUAL
43397: IFTRUE 43401
43399: GO 43431
43401: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43402: LD_ADDR_VAR 0 3
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 3
43415: PUSH
43416: LD_INT 4
43418: PUSH
43419: LD_INT 5
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
43429: GO 44358
43431: LD_INT 4
43433: DOUBLE
43434: EQUAL
43435: IFTRUE 43439
43437: GO 43465
43439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43440: LD_ADDR_VAR 0 3
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: LD_INT 4
43453: PUSH
43454: LD_INT 5
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
43463: GO 44358
43465: LD_INT 5
43467: DOUBLE
43468: EQUAL
43469: IFTRUE 43473
43471: GO 43499
43473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43474: LD_ADDR_VAR 0 3
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: LD_INT 4
43487: PUSH
43488: LD_INT 5
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: ST_TO_ADDR
43497: GO 44358
43499: LD_INT 9
43501: DOUBLE
43502: EQUAL
43503: IFTRUE 43507
43505: GO 43533
43507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43508: LD_ADDR_VAR 0 3
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: LD_INT 4
43521: PUSH
43522: LD_INT 5
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: ST_TO_ADDR
43531: GO 44358
43533: LD_INT 7
43535: DOUBLE
43536: EQUAL
43537: IFTRUE 43541
43539: GO 43567
43541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43542: LD_ADDR_VAR 0 3
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 4
43555: PUSH
43556: LD_INT 5
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: ST_TO_ADDR
43565: GO 44358
43567: LD_INT 12
43569: DOUBLE
43570: EQUAL
43571: IFTRUE 43575
43573: GO 43601
43575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43576: LD_ADDR_VAR 0 3
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: LD_INT 4
43589: PUSH
43590: LD_INT 5
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
43599: GO 44358
43601: LD_INT 13
43603: DOUBLE
43604: EQUAL
43605: IFTRUE 43609
43607: GO 43635
43609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43610: LD_ADDR_VAR 0 3
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: LD_INT 4
43623: PUSH
43624: LD_INT 5
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: ST_TO_ADDR
43633: GO 44358
43635: LD_INT 14
43637: DOUBLE
43638: EQUAL
43639: IFTRUE 43643
43641: GO 43661
43643: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43644: LD_ADDR_VAR 0 3
43648: PUSH
43649: LD_INT 4
43651: PUSH
43652: LD_INT 5
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: ST_TO_ADDR
43659: GO 44358
43661: LD_INT 6
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43669
43667: GO 43687
43669: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43670: LD_ADDR_VAR 0 3
43674: PUSH
43675: LD_INT 4
43677: PUSH
43678: LD_INT 5
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: ST_TO_ADDR
43685: GO 44358
43687: LD_INT 10
43689: DOUBLE
43690: EQUAL
43691: IFTRUE 43695
43693: GO 43713
43695: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43696: LD_ADDR_VAR 0 3
43700: PUSH
43701: LD_INT 4
43703: PUSH
43704: LD_INT 5
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: ST_TO_ADDR
43711: GO 44358
43713: LD_INT 22
43715: DOUBLE
43716: EQUAL
43717: IFTRUE 43721
43719: GO 43747
43721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43722: LD_ADDR_VAR 0 3
43726: PUSH
43727: LD_INT 11
43729: PUSH
43730: LD_INT 12
43732: PUSH
43733: LD_INT 13
43735: PUSH
43736: LD_INT 14
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: ST_TO_ADDR
43745: GO 44358
43747: LD_INT 23
43749: DOUBLE
43750: EQUAL
43751: IFTRUE 43755
43753: GO 43781
43755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43756: LD_ADDR_VAR 0 3
43760: PUSH
43761: LD_INT 11
43763: PUSH
43764: LD_INT 12
43766: PUSH
43767: LD_INT 13
43769: PUSH
43770: LD_INT 14
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
43779: GO 44358
43781: LD_INT 24
43783: DOUBLE
43784: EQUAL
43785: IFTRUE 43789
43787: GO 43815
43789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43790: LD_ADDR_VAR 0 3
43794: PUSH
43795: LD_INT 11
43797: PUSH
43798: LD_INT 12
43800: PUSH
43801: LD_INT 13
43803: PUSH
43804: LD_INT 14
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: ST_TO_ADDR
43813: GO 44358
43815: LD_INT 30
43817: DOUBLE
43818: EQUAL
43819: IFTRUE 43823
43821: GO 43849
43823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43824: LD_ADDR_VAR 0 3
43828: PUSH
43829: LD_INT 11
43831: PUSH
43832: LD_INT 12
43834: PUSH
43835: LD_INT 13
43837: PUSH
43838: LD_INT 14
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: ST_TO_ADDR
43847: GO 44358
43849: LD_INT 25
43851: DOUBLE
43852: EQUAL
43853: IFTRUE 43857
43855: GO 43875
43857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43858: LD_ADDR_VAR 0 3
43862: PUSH
43863: LD_INT 13
43865: PUSH
43866: LD_INT 14
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: ST_TO_ADDR
43873: GO 44358
43875: LD_INT 27
43877: DOUBLE
43878: EQUAL
43879: IFTRUE 43883
43881: GO 43901
43883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43884: LD_ADDR_VAR 0 3
43888: PUSH
43889: LD_INT 13
43891: PUSH
43892: LD_INT 14
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: ST_TO_ADDR
43899: GO 44358
43901: LD_EXP 53
43905: DOUBLE
43906: EQUAL
43907: IFTRUE 43911
43909: GO 43937
43911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43912: LD_ADDR_VAR 0 3
43916: PUSH
43917: LD_INT 11
43919: PUSH
43920: LD_INT 12
43922: PUSH
43923: LD_INT 13
43925: PUSH
43926: LD_INT 14
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
43935: GO 44358
43937: LD_INT 28
43939: DOUBLE
43940: EQUAL
43941: IFTRUE 43945
43943: GO 43963
43945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43946: LD_ADDR_VAR 0 3
43950: PUSH
43951: LD_INT 13
43953: PUSH
43954: LD_INT 14
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: ST_TO_ADDR
43961: GO 44358
43963: LD_INT 29
43965: DOUBLE
43966: EQUAL
43967: IFTRUE 43971
43969: GO 43989
43971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43972: LD_ADDR_VAR 0 3
43976: PUSH
43977: LD_INT 13
43979: PUSH
43980: LD_INT 14
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: ST_TO_ADDR
43987: GO 44358
43989: LD_INT 31
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 43997
43995: GO 44015
43997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43998: LD_ADDR_VAR 0 3
44002: PUSH
44003: LD_INT 13
44005: PUSH
44006: LD_INT 14
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: ST_TO_ADDR
44013: GO 44358
44015: LD_INT 26
44017: DOUBLE
44018: EQUAL
44019: IFTRUE 44023
44021: GO 44041
44023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44024: LD_ADDR_VAR 0 3
44028: PUSH
44029: LD_INT 13
44031: PUSH
44032: LD_INT 14
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: ST_TO_ADDR
44039: GO 44358
44041: LD_INT 42
44043: DOUBLE
44044: EQUAL
44045: IFTRUE 44049
44047: GO 44075
44049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44050: LD_ADDR_VAR 0 3
44054: PUSH
44055: LD_INT 21
44057: PUSH
44058: LD_INT 22
44060: PUSH
44061: LD_INT 23
44063: PUSH
44064: LD_INT 24
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: ST_TO_ADDR
44073: GO 44358
44075: LD_INT 43
44077: DOUBLE
44078: EQUAL
44079: IFTRUE 44083
44081: GO 44109
44083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44084: LD_ADDR_VAR 0 3
44088: PUSH
44089: LD_INT 21
44091: PUSH
44092: LD_INT 22
44094: PUSH
44095: LD_INT 23
44097: PUSH
44098: LD_INT 24
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
44107: GO 44358
44109: LD_INT 44
44111: DOUBLE
44112: EQUAL
44113: IFTRUE 44117
44115: GO 44143
44117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44118: LD_ADDR_VAR 0 3
44122: PUSH
44123: LD_INT 21
44125: PUSH
44126: LD_INT 22
44128: PUSH
44129: LD_INT 23
44131: PUSH
44132: LD_INT 24
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
44141: GO 44358
44143: LD_INT 45
44145: DOUBLE
44146: EQUAL
44147: IFTRUE 44151
44149: GO 44177
44151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44152: LD_ADDR_VAR 0 3
44156: PUSH
44157: LD_INT 21
44159: PUSH
44160: LD_INT 22
44162: PUSH
44163: LD_INT 23
44165: PUSH
44166: LD_INT 24
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: ST_TO_ADDR
44175: GO 44358
44177: LD_INT 49
44179: DOUBLE
44180: EQUAL
44181: IFTRUE 44185
44183: GO 44211
44185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44186: LD_ADDR_VAR 0 3
44190: PUSH
44191: LD_INT 21
44193: PUSH
44194: LD_INT 22
44196: PUSH
44197: LD_INT 23
44199: PUSH
44200: LD_INT 24
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: ST_TO_ADDR
44209: GO 44358
44211: LD_INT 51
44213: DOUBLE
44214: EQUAL
44215: IFTRUE 44219
44217: GO 44245
44219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44220: LD_ADDR_VAR 0 3
44224: PUSH
44225: LD_INT 21
44227: PUSH
44228: LD_INT 22
44230: PUSH
44231: LD_INT 23
44233: PUSH
44234: LD_INT 24
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: ST_TO_ADDR
44243: GO 44358
44245: LD_INT 52
44247: DOUBLE
44248: EQUAL
44249: IFTRUE 44253
44251: GO 44279
44253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44254: LD_ADDR_VAR 0 3
44258: PUSH
44259: LD_INT 21
44261: PUSH
44262: LD_INT 22
44264: PUSH
44265: LD_INT 23
44267: PUSH
44268: LD_INT 24
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: ST_TO_ADDR
44277: GO 44358
44279: LD_INT 53
44281: DOUBLE
44282: EQUAL
44283: IFTRUE 44287
44285: GO 44305
44287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 23
44295: PUSH
44296: LD_INT 24
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: ST_TO_ADDR
44303: GO 44358
44305: LD_INT 46
44307: DOUBLE
44308: EQUAL
44309: IFTRUE 44313
44311: GO 44331
44313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44314: LD_ADDR_VAR 0 3
44318: PUSH
44319: LD_INT 23
44321: PUSH
44322: LD_INT 24
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: ST_TO_ADDR
44329: GO 44358
44331: LD_INT 47
44333: DOUBLE
44334: EQUAL
44335: IFTRUE 44339
44337: GO 44357
44339: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44340: LD_ADDR_VAR 0 3
44344: PUSH
44345: LD_INT 23
44347: PUSH
44348: LD_INT 24
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: ST_TO_ADDR
44355: GO 44358
44357: POP
// result := ( chassis in result ) ;
44358: LD_ADDR_VAR 0 3
44362: PUSH
44363: LD_VAR 0 1
44367: PUSH
44368: LD_VAR 0 3
44372: IN
44373: ST_TO_ADDR
// end ;
44374: LD_VAR 0 3
44378: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44379: LD_INT 0
44381: PPUSH
44382: PPUSH
44383: PPUSH
44384: PPUSH
44385: PPUSH
44386: PPUSH
44387: PPUSH
// result := array ;
44388: LD_ADDR_VAR 0 5
44392: PUSH
44393: LD_VAR 0 1
44397: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44398: LD_VAR 0 1
44402: NOT
44403: PUSH
44404: LD_VAR 0 2
44408: NOT
44409: OR
44410: PUSH
44411: LD_VAR 0 3
44415: NOT
44416: OR
44417: PUSH
44418: LD_VAR 0 2
44422: PUSH
44423: LD_VAR 0 1
44427: GREATER
44428: OR
44429: PUSH
44430: LD_VAR 0 3
44434: PUSH
44435: LD_VAR 0 1
44439: GREATER
44440: OR
44441: IFFALSE 44445
// exit ;
44443: GO 44741
// if direction then
44445: LD_VAR 0 4
44449: IFFALSE 44513
// begin d := 1 ;
44451: LD_ADDR_VAR 0 9
44455: PUSH
44456: LD_INT 1
44458: ST_TO_ADDR
// if i_from > i_to then
44459: LD_VAR 0 2
44463: PUSH
44464: LD_VAR 0 3
44468: GREATER
44469: IFFALSE 44495
// length := ( array - i_from ) + i_to else
44471: LD_ADDR_VAR 0 11
44475: PUSH
44476: LD_VAR 0 1
44480: PUSH
44481: LD_VAR 0 2
44485: MINUS
44486: PUSH
44487: LD_VAR 0 3
44491: PLUS
44492: ST_TO_ADDR
44493: GO 44511
// length := i_to - i_from ;
44495: LD_ADDR_VAR 0 11
44499: PUSH
44500: LD_VAR 0 3
44504: PUSH
44505: LD_VAR 0 2
44509: MINUS
44510: ST_TO_ADDR
// end else
44511: GO 44574
// begin d := - 1 ;
44513: LD_ADDR_VAR 0 9
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: ST_TO_ADDR
// if i_from > i_to then
44522: LD_VAR 0 2
44526: PUSH
44527: LD_VAR 0 3
44531: GREATER
44532: IFFALSE 44552
// length := i_from - i_to else
44534: LD_ADDR_VAR 0 11
44538: PUSH
44539: LD_VAR 0 2
44543: PUSH
44544: LD_VAR 0 3
44548: MINUS
44549: ST_TO_ADDR
44550: GO 44574
// length := ( array - i_to ) + i_from ;
44552: LD_ADDR_VAR 0 11
44556: PUSH
44557: LD_VAR 0 1
44561: PUSH
44562: LD_VAR 0 3
44566: MINUS
44567: PUSH
44568: LD_VAR 0 2
44572: PLUS
44573: ST_TO_ADDR
// end ; if not length then
44574: LD_VAR 0 11
44578: NOT
44579: IFFALSE 44583
// exit ;
44581: GO 44741
// tmp := array ;
44583: LD_ADDR_VAR 0 10
44587: PUSH
44588: LD_VAR 0 1
44592: ST_TO_ADDR
// for i = 1 to length do
44593: LD_ADDR_VAR 0 6
44597: PUSH
44598: DOUBLE
44599: LD_INT 1
44601: DEC
44602: ST_TO_ADDR
44603: LD_VAR 0 11
44607: PUSH
44608: FOR_TO
44609: IFFALSE 44729
// begin for j = 1 to array do
44611: LD_ADDR_VAR 0 7
44615: PUSH
44616: DOUBLE
44617: LD_INT 1
44619: DEC
44620: ST_TO_ADDR
44621: LD_VAR 0 1
44625: PUSH
44626: FOR_TO
44627: IFFALSE 44715
// begin k := j + d ;
44629: LD_ADDR_VAR 0 8
44633: PUSH
44634: LD_VAR 0 7
44638: PUSH
44639: LD_VAR 0 9
44643: PLUS
44644: ST_TO_ADDR
// if k > array then
44645: LD_VAR 0 8
44649: PUSH
44650: LD_VAR 0 1
44654: GREATER
44655: IFFALSE 44665
// k := 1 ;
44657: LD_ADDR_VAR 0 8
44661: PUSH
44662: LD_INT 1
44664: ST_TO_ADDR
// if not k then
44665: LD_VAR 0 8
44669: NOT
44670: IFFALSE 44682
// k := array ;
44672: LD_ADDR_VAR 0 8
44676: PUSH
44677: LD_VAR 0 1
44681: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44682: LD_ADDR_VAR 0 10
44686: PUSH
44687: LD_VAR 0 10
44691: PPUSH
44692: LD_VAR 0 8
44696: PPUSH
44697: LD_VAR 0 1
44701: PUSH
44702: LD_VAR 0 7
44706: ARRAY
44707: PPUSH
44708: CALL_OW 1
44712: ST_TO_ADDR
// end ;
44713: GO 44626
44715: POP
44716: POP
// array := tmp ;
44717: LD_ADDR_VAR 0 1
44721: PUSH
44722: LD_VAR 0 10
44726: ST_TO_ADDR
// end ;
44727: GO 44608
44729: POP
44730: POP
// result := array ;
44731: LD_ADDR_VAR 0 5
44735: PUSH
44736: LD_VAR 0 1
44740: ST_TO_ADDR
// end ;
44741: LD_VAR 0 5
44745: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44746: LD_INT 0
44748: PPUSH
44749: PPUSH
// result := 0 ;
44750: LD_ADDR_VAR 0 3
44754: PUSH
44755: LD_INT 0
44757: ST_TO_ADDR
// if not array or not value in array then
44758: LD_VAR 0 1
44762: NOT
44763: PUSH
44764: LD_VAR 0 2
44768: PUSH
44769: LD_VAR 0 1
44773: IN
44774: NOT
44775: OR
44776: IFFALSE 44780
// exit ;
44778: GO 44834
// for i = 1 to array do
44780: LD_ADDR_VAR 0 4
44784: PUSH
44785: DOUBLE
44786: LD_INT 1
44788: DEC
44789: ST_TO_ADDR
44790: LD_VAR 0 1
44794: PUSH
44795: FOR_TO
44796: IFFALSE 44832
// if value = array [ i ] then
44798: LD_VAR 0 2
44802: PUSH
44803: LD_VAR 0 1
44807: PUSH
44808: LD_VAR 0 4
44812: ARRAY
44813: EQUAL
44814: IFFALSE 44830
// begin result := i ;
44816: LD_ADDR_VAR 0 3
44820: PUSH
44821: LD_VAR 0 4
44825: ST_TO_ADDR
// exit ;
44826: POP
44827: POP
44828: GO 44834
// end ;
44830: GO 44795
44832: POP
44833: POP
// end ;
44834: LD_VAR 0 3
44838: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44839: LD_INT 0
44841: PPUSH
// vc_chassis := chassis ;
44842: LD_ADDR_OWVAR 37
44846: PUSH
44847: LD_VAR 0 1
44851: ST_TO_ADDR
// vc_engine := engine ;
44852: LD_ADDR_OWVAR 39
44856: PUSH
44857: LD_VAR 0 2
44861: ST_TO_ADDR
// vc_control := control ;
44862: LD_ADDR_OWVAR 38
44866: PUSH
44867: LD_VAR 0 3
44871: ST_TO_ADDR
// vc_weapon := weapon ;
44872: LD_ADDR_OWVAR 40
44876: PUSH
44877: LD_VAR 0 4
44881: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44882: LD_ADDR_OWVAR 41
44886: PUSH
44887: LD_VAR 0 5
44891: ST_TO_ADDR
// end ;
44892: LD_VAR 0 6
44896: RET
// export function WantPlant ( unit ) ; var task ; begin
44897: LD_INT 0
44899: PPUSH
44900: PPUSH
// result := false ;
44901: LD_ADDR_VAR 0 2
44905: PUSH
44906: LD_INT 0
44908: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44909: LD_ADDR_VAR 0 3
44913: PUSH
44914: LD_VAR 0 1
44918: PPUSH
44919: CALL_OW 437
44923: ST_TO_ADDR
// if task then
44924: LD_VAR 0 3
44928: IFFALSE 44956
// if task [ 1 ] [ 1 ] = p then
44930: LD_VAR 0 3
44934: PUSH
44935: LD_INT 1
44937: ARRAY
44938: PUSH
44939: LD_INT 1
44941: ARRAY
44942: PUSH
44943: LD_STRING p
44945: EQUAL
44946: IFFALSE 44956
// result := true ;
44948: LD_ADDR_VAR 0 2
44952: PUSH
44953: LD_INT 1
44955: ST_TO_ADDR
// end ;
44956: LD_VAR 0 2
44960: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44961: LD_INT 0
44963: PPUSH
44964: PPUSH
44965: PPUSH
44966: PPUSH
// if pos < 1 then
44967: LD_VAR 0 2
44971: PUSH
44972: LD_INT 1
44974: LESS
44975: IFFALSE 44979
// exit ;
44977: GO 45282
// if pos = 1 then
44979: LD_VAR 0 2
44983: PUSH
44984: LD_INT 1
44986: EQUAL
44987: IFFALSE 45020
// result := Replace ( arr , pos [ 1 ] , value ) else
44989: LD_ADDR_VAR 0 4
44993: PUSH
44994: LD_VAR 0 1
44998: PPUSH
44999: LD_VAR 0 2
45003: PUSH
45004: LD_INT 1
45006: ARRAY
45007: PPUSH
45008: LD_VAR 0 3
45012: PPUSH
45013: CALL_OW 1
45017: ST_TO_ADDR
45018: GO 45282
// begin tmp := arr ;
45020: LD_ADDR_VAR 0 6
45024: PUSH
45025: LD_VAR 0 1
45029: ST_TO_ADDR
// s_arr := [ tmp ] ;
45030: LD_ADDR_VAR 0 7
45034: PUSH
45035: LD_VAR 0 6
45039: PUSH
45040: EMPTY
45041: LIST
45042: ST_TO_ADDR
// for i = 1 to pos - 1 do
45043: LD_ADDR_VAR 0 5
45047: PUSH
45048: DOUBLE
45049: LD_INT 1
45051: DEC
45052: ST_TO_ADDR
45053: LD_VAR 0 2
45057: PUSH
45058: LD_INT 1
45060: MINUS
45061: PUSH
45062: FOR_TO
45063: IFFALSE 45108
// begin tmp := tmp [ pos [ i ] ] ;
45065: LD_ADDR_VAR 0 6
45069: PUSH
45070: LD_VAR 0 6
45074: PUSH
45075: LD_VAR 0 2
45079: PUSH
45080: LD_VAR 0 5
45084: ARRAY
45085: ARRAY
45086: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45087: LD_ADDR_VAR 0 7
45091: PUSH
45092: LD_VAR 0 7
45096: PUSH
45097: LD_VAR 0 6
45101: PUSH
45102: EMPTY
45103: LIST
45104: ADD
45105: ST_TO_ADDR
// end ;
45106: GO 45062
45108: POP
45109: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45110: LD_ADDR_VAR 0 6
45114: PUSH
45115: LD_VAR 0 6
45119: PPUSH
45120: LD_VAR 0 2
45124: PUSH
45125: LD_VAR 0 2
45129: ARRAY
45130: PPUSH
45131: LD_VAR 0 3
45135: PPUSH
45136: CALL_OW 1
45140: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45141: LD_ADDR_VAR 0 7
45145: PUSH
45146: LD_VAR 0 7
45150: PPUSH
45151: LD_VAR 0 7
45155: PPUSH
45156: LD_VAR 0 6
45160: PPUSH
45161: CALL_OW 1
45165: ST_TO_ADDR
// for i = s_arr downto 2 do
45166: LD_ADDR_VAR 0 5
45170: PUSH
45171: DOUBLE
45172: LD_VAR 0 7
45176: INC
45177: ST_TO_ADDR
45178: LD_INT 2
45180: PUSH
45181: FOR_DOWNTO
45182: IFFALSE 45266
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45184: LD_ADDR_VAR 0 6
45188: PUSH
45189: LD_VAR 0 7
45193: PUSH
45194: LD_VAR 0 5
45198: PUSH
45199: LD_INT 1
45201: MINUS
45202: ARRAY
45203: PPUSH
45204: LD_VAR 0 2
45208: PUSH
45209: LD_VAR 0 5
45213: PUSH
45214: LD_INT 1
45216: MINUS
45217: ARRAY
45218: PPUSH
45219: LD_VAR 0 7
45223: PUSH
45224: LD_VAR 0 5
45228: ARRAY
45229: PPUSH
45230: CALL_OW 1
45234: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45235: LD_ADDR_VAR 0 7
45239: PUSH
45240: LD_VAR 0 7
45244: PPUSH
45245: LD_VAR 0 5
45249: PUSH
45250: LD_INT 1
45252: MINUS
45253: PPUSH
45254: LD_VAR 0 6
45258: PPUSH
45259: CALL_OW 1
45263: ST_TO_ADDR
// end ;
45264: GO 45181
45266: POP
45267: POP
// result := s_arr [ 1 ] ;
45268: LD_ADDR_VAR 0 4
45272: PUSH
45273: LD_VAR 0 7
45277: PUSH
45278: LD_INT 1
45280: ARRAY
45281: ST_TO_ADDR
// end ; end ;
45282: LD_VAR 0 4
45286: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45287: LD_INT 0
45289: PPUSH
45290: PPUSH
// if not list then
45291: LD_VAR 0 1
45295: NOT
45296: IFFALSE 45300
// exit ;
45298: GO 45391
// i := list [ pos1 ] ;
45300: LD_ADDR_VAR 0 5
45304: PUSH
45305: LD_VAR 0 1
45309: PUSH
45310: LD_VAR 0 2
45314: ARRAY
45315: ST_TO_ADDR
// if not i then
45316: LD_VAR 0 5
45320: NOT
45321: IFFALSE 45325
// exit ;
45323: GO 45391
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45325: LD_ADDR_VAR 0 1
45329: PUSH
45330: LD_VAR 0 1
45334: PPUSH
45335: LD_VAR 0 2
45339: PPUSH
45340: LD_VAR 0 1
45344: PUSH
45345: LD_VAR 0 3
45349: ARRAY
45350: PPUSH
45351: CALL_OW 1
45355: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45356: LD_ADDR_VAR 0 1
45360: PUSH
45361: LD_VAR 0 1
45365: PPUSH
45366: LD_VAR 0 3
45370: PPUSH
45371: LD_VAR 0 5
45375: PPUSH
45376: CALL_OW 1
45380: ST_TO_ADDR
// result := list ;
45381: LD_ADDR_VAR 0 4
45385: PUSH
45386: LD_VAR 0 1
45390: ST_TO_ADDR
// end ;
45391: LD_VAR 0 4
45395: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45396: LD_INT 0
45398: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45399: LD_ADDR_VAR 0 5
45403: PUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: CALL_OW 250
45413: PPUSH
45414: LD_VAR 0 1
45418: PPUSH
45419: CALL_OW 251
45423: PPUSH
45424: LD_VAR 0 2
45428: PPUSH
45429: LD_VAR 0 3
45433: PPUSH
45434: LD_VAR 0 4
45438: PPUSH
45439: CALL 45449 0 5
45443: ST_TO_ADDR
// end ;
45444: LD_VAR 0 5
45448: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45449: LD_INT 0
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
// if not list then
45455: LD_VAR 0 3
45459: NOT
45460: IFFALSE 45464
// exit ;
45462: GO 45852
// result := [ ] ;
45464: LD_ADDR_VAR 0 6
45468: PUSH
45469: EMPTY
45470: ST_TO_ADDR
// for i in list do
45471: LD_ADDR_VAR 0 7
45475: PUSH
45476: LD_VAR 0 3
45480: PUSH
45481: FOR_IN
45482: IFFALSE 45684
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45484: LD_ADDR_VAR 0 9
45488: PUSH
45489: LD_VAR 0 7
45493: PPUSH
45494: LD_VAR 0 1
45498: PPUSH
45499: LD_VAR 0 2
45503: PPUSH
45504: CALL_OW 297
45508: ST_TO_ADDR
// if not result then
45509: LD_VAR 0 6
45513: NOT
45514: IFFALSE 45540
// result := [ [ i , tmp ] ] else
45516: LD_ADDR_VAR 0 6
45520: PUSH
45521: LD_VAR 0 7
45525: PUSH
45526: LD_VAR 0 9
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: EMPTY
45536: LIST
45537: ST_TO_ADDR
45538: GO 45682
// begin if result [ result ] [ 2 ] < tmp then
45540: LD_VAR 0 6
45544: PUSH
45545: LD_VAR 0 6
45549: ARRAY
45550: PUSH
45551: LD_INT 2
45553: ARRAY
45554: PUSH
45555: LD_VAR 0 9
45559: LESS
45560: IFFALSE 45602
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45562: LD_ADDR_VAR 0 6
45566: PUSH
45567: LD_VAR 0 6
45571: PPUSH
45572: LD_VAR 0 6
45576: PUSH
45577: LD_INT 1
45579: PLUS
45580: PPUSH
45581: LD_VAR 0 7
45585: PUSH
45586: LD_VAR 0 9
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PPUSH
45595: CALL_OW 2
45599: ST_TO_ADDR
45600: GO 45682
// for j = 1 to result do
45602: LD_ADDR_VAR 0 8
45606: PUSH
45607: DOUBLE
45608: LD_INT 1
45610: DEC
45611: ST_TO_ADDR
45612: LD_VAR 0 6
45616: PUSH
45617: FOR_TO
45618: IFFALSE 45680
// begin if tmp < result [ j ] [ 2 ] then
45620: LD_VAR 0 9
45624: PUSH
45625: LD_VAR 0 6
45629: PUSH
45630: LD_VAR 0 8
45634: ARRAY
45635: PUSH
45636: LD_INT 2
45638: ARRAY
45639: LESS
45640: IFFALSE 45678
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45642: LD_ADDR_VAR 0 6
45646: PUSH
45647: LD_VAR 0 6
45651: PPUSH
45652: LD_VAR 0 8
45656: PPUSH
45657: LD_VAR 0 7
45661: PUSH
45662: LD_VAR 0 9
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PPUSH
45671: CALL_OW 2
45675: ST_TO_ADDR
// break ;
45676: GO 45680
// end ; end ;
45678: GO 45617
45680: POP
45681: POP
// end ; end ;
45682: GO 45481
45684: POP
45685: POP
// if result and not asc then
45686: LD_VAR 0 6
45690: PUSH
45691: LD_VAR 0 4
45695: NOT
45696: AND
45697: IFFALSE 45772
// begin tmp := result ;
45699: LD_ADDR_VAR 0 9
45703: PUSH
45704: LD_VAR 0 6
45708: ST_TO_ADDR
// for i = tmp downto 1 do
45709: LD_ADDR_VAR 0 7
45713: PUSH
45714: DOUBLE
45715: LD_VAR 0 9
45719: INC
45720: ST_TO_ADDR
45721: LD_INT 1
45723: PUSH
45724: FOR_DOWNTO
45725: IFFALSE 45770
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45727: LD_ADDR_VAR 0 6
45731: PUSH
45732: LD_VAR 0 6
45736: PPUSH
45737: LD_VAR 0 9
45741: PUSH
45742: LD_VAR 0 7
45746: MINUS
45747: PUSH
45748: LD_INT 1
45750: PLUS
45751: PPUSH
45752: LD_VAR 0 9
45756: PUSH
45757: LD_VAR 0 7
45761: ARRAY
45762: PPUSH
45763: CALL_OW 1
45767: ST_TO_ADDR
45768: GO 45724
45770: POP
45771: POP
// end ; tmp := [ ] ;
45772: LD_ADDR_VAR 0 9
45776: PUSH
45777: EMPTY
45778: ST_TO_ADDR
// if mode then
45779: LD_VAR 0 5
45783: IFFALSE 45852
// begin for i = 1 to result do
45785: LD_ADDR_VAR 0 7
45789: PUSH
45790: DOUBLE
45791: LD_INT 1
45793: DEC
45794: ST_TO_ADDR
45795: LD_VAR 0 6
45799: PUSH
45800: FOR_TO
45801: IFFALSE 45840
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45803: LD_ADDR_VAR 0 9
45807: PUSH
45808: LD_VAR 0 9
45812: PPUSH
45813: LD_VAR 0 7
45817: PPUSH
45818: LD_VAR 0 6
45822: PUSH
45823: LD_VAR 0 7
45827: ARRAY
45828: PUSH
45829: LD_INT 1
45831: ARRAY
45832: PPUSH
45833: CALL_OW 1
45837: ST_TO_ADDR
45838: GO 45800
45840: POP
45841: POP
// result := tmp ;
45842: LD_ADDR_VAR 0 6
45846: PUSH
45847: LD_VAR 0 9
45851: ST_TO_ADDR
// end ; end ;
45852: LD_VAR 0 6
45856: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45857: LD_INT 0
45859: PPUSH
45860: PPUSH
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45865: LD_ADDR_VAR 0 5
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// if not x or not y then
45887: LD_VAR 0 2
45891: NOT
45892: PUSH
45893: LD_VAR 0 3
45897: NOT
45898: OR
45899: IFFALSE 45903
// exit ;
45901: GO 47555
// if not range then
45903: LD_VAR 0 4
45907: NOT
45908: IFFALSE 45918
// range := 10 ;
45910: LD_ADDR_VAR 0 4
45914: PUSH
45915: LD_INT 10
45917: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45918: LD_ADDR_VAR 0 8
45922: PUSH
45923: LD_INT 81
45925: PUSH
45926: LD_VAR 0 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 92
45937: PUSH
45938: LD_VAR 0 2
45942: PUSH
45943: LD_VAR 0 3
45947: PUSH
45948: LD_VAR 0 4
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: LD_INT 21
45964: PUSH
45965: LD_INT 3
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: PPUSH
45981: CALL_OW 69
45985: ST_TO_ADDR
// if not tmp then
45986: LD_VAR 0 8
45990: NOT
45991: IFFALSE 45995
// exit ;
45993: GO 47555
// for i in tmp do
45995: LD_ADDR_VAR 0 6
45999: PUSH
46000: LD_VAR 0 8
46004: PUSH
46005: FOR_IN
46006: IFFALSE 47530
// begin points := [ 0 , 0 , 0 ] ;
46008: LD_ADDR_VAR 0 9
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: ST_TO_ADDR
// bpoints := 1 ;
46027: LD_ADDR_VAR 0 10
46031: PUSH
46032: LD_INT 1
46034: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46035: LD_VAR 0 6
46039: PPUSH
46040: CALL_OW 247
46044: PUSH
46045: LD_INT 1
46047: DOUBLE
46048: EQUAL
46049: IFTRUE 46053
46051: GO 46631
46053: POP
// begin if GetClass ( i ) = 1 then
46054: LD_VAR 0 6
46058: PPUSH
46059: CALL_OW 257
46063: PUSH
46064: LD_INT 1
46066: EQUAL
46067: IFFALSE 46088
// points := [ 10 , 5 , 3 ] ;
46069: LD_ADDR_VAR 0 9
46073: PUSH
46074: LD_INT 10
46076: PUSH
46077: LD_INT 5
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46088: LD_VAR 0 6
46092: PPUSH
46093: CALL_OW 257
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: LD_INT 4
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: LIST
46111: IN
46112: IFFALSE 46133
// points := [ 3 , 2 , 1 ] ;
46114: LD_ADDR_VAR 0 9
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46133: LD_VAR 0 6
46137: PPUSH
46138: CALL_OW 257
46142: PUSH
46143: LD_INT 5
46145: EQUAL
46146: IFFALSE 46167
// points := [ 130 , 5 , 2 ] ;
46148: LD_ADDR_VAR 0 9
46152: PUSH
46153: LD_INT 130
46155: PUSH
46156: LD_INT 5
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46167: LD_VAR 0 6
46171: PPUSH
46172: CALL_OW 257
46176: PUSH
46177: LD_INT 8
46179: EQUAL
46180: IFFALSE 46201
// points := [ 35 , 35 , 30 ] ;
46182: LD_ADDR_VAR 0 9
46186: PUSH
46187: LD_INT 35
46189: PUSH
46190: LD_INT 35
46192: PUSH
46193: LD_INT 30
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: LIST
46200: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46201: LD_VAR 0 6
46205: PPUSH
46206: CALL_OW 257
46210: PUSH
46211: LD_INT 9
46213: EQUAL
46214: IFFALSE 46235
// points := [ 20 , 55 , 40 ] ;
46216: LD_ADDR_VAR 0 9
46220: PUSH
46221: LD_INT 20
46223: PUSH
46224: LD_INT 55
46226: PUSH
46227: LD_INT 40
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46235: LD_VAR 0 6
46239: PPUSH
46240: CALL_OW 257
46244: PUSH
46245: LD_INT 12
46247: PUSH
46248: LD_INT 16
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: IN
46255: IFFALSE 46276
// points := [ 5 , 3 , 2 ] ;
46257: LD_ADDR_VAR 0 9
46261: PUSH
46262: LD_INT 5
46264: PUSH
46265: LD_INT 3
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46276: LD_VAR 0 6
46280: PPUSH
46281: CALL_OW 257
46285: PUSH
46286: LD_INT 17
46288: EQUAL
46289: IFFALSE 46310
// points := [ 100 , 50 , 75 ] ;
46291: LD_ADDR_VAR 0 9
46295: PUSH
46296: LD_INT 100
46298: PUSH
46299: LD_INT 50
46301: PUSH
46302: LD_INT 75
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46310: LD_VAR 0 6
46314: PPUSH
46315: CALL_OW 257
46319: PUSH
46320: LD_INT 15
46322: EQUAL
46323: IFFALSE 46344
// points := [ 10 , 5 , 3 ] ;
46325: LD_ADDR_VAR 0 9
46329: PUSH
46330: LD_INT 10
46332: PUSH
46333: LD_INT 5
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46344: LD_VAR 0 6
46348: PPUSH
46349: CALL_OW 257
46353: PUSH
46354: LD_INT 14
46356: EQUAL
46357: IFFALSE 46378
// points := [ 10 , 0 , 0 ] ;
46359: LD_ADDR_VAR 0 9
46363: PUSH
46364: LD_INT 10
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46378: LD_VAR 0 6
46382: PPUSH
46383: CALL_OW 257
46387: PUSH
46388: LD_INT 11
46390: EQUAL
46391: IFFALSE 46412
// points := [ 30 , 10 , 5 ] ;
46393: LD_ADDR_VAR 0 9
46397: PUSH
46398: LD_INT 30
46400: PUSH
46401: LD_INT 10
46403: PUSH
46404: LD_INT 5
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46412: LD_VAR 0 1
46416: PPUSH
46417: LD_INT 5
46419: PPUSH
46420: CALL_OW 321
46424: PUSH
46425: LD_INT 2
46427: EQUAL
46428: IFFALSE 46445
// bpoints := bpoints * 1.8 ;
46430: LD_ADDR_VAR 0 10
46434: PUSH
46435: LD_VAR 0 10
46439: PUSH
46440: LD_REAL  1.80000000000000E+0000
46443: MUL
46444: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46445: LD_VAR 0 6
46449: PPUSH
46450: CALL_OW 257
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: LD_INT 4
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: IN
46473: PUSH
46474: LD_VAR 0 1
46478: PPUSH
46479: LD_INT 51
46481: PPUSH
46482: CALL_OW 321
46486: PUSH
46487: LD_INT 2
46489: EQUAL
46490: AND
46491: IFFALSE 46508
// bpoints := bpoints * 1.2 ;
46493: LD_ADDR_VAR 0 10
46497: PUSH
46498: LD_VAR 0 10
46502: PUSH
46503: LD_REAL  1.20000000000000E+0000
46506: MUL
46507: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46508: LD_VAR 0 6
46512: PPUSH
46513: CALL_OW 257
46517: PUSH
46518: LD_INT 5
46520: PUSH
46521: LD_INT 7
46523: PUSH
46524: LD_INT 9
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: IN
46532: PUSH
46533: LD_VAR 0 1
46537: PPUSH
46538: LD_INT 52
46540: PPUSH
46541: CALL_OW 321
46545: PUSH
46546: LD_INT 2
46548: EQUAL
46549: AND
46550: IFFALSE 46567
// bpoints := bpoints * 1.5 ;
46552: LD_ADDR_VAR 0 10
46556: PUSH
46557: LD_VAR 0 10
46561: PUSH
46562: LD_REAL  1.50000000000000E+0000
46565: MUL
46566: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46567: LD_VAR 0 1
46571: PPUSH
46572: LD_INT 66
46574: PPUSH
46575: CALL_OW 321
46579: PUSH
46580: LD_INT 2
46582: EQUAL
46583: IFFALSE 46600
// bpoints := bpoints * 1.1 ;
46585: LD_ADDR_VAR 0 10
46589: PUSH
46590: LD_VAR 0 10
46594: PUSH
46595: LD_REAL  1.10000000000000E+0000
46598: MUL
46599: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46600: LD_ADDR_VAR 0 10
46604: PUSH
46605: LD_VAR 0 10
46609: PUSH
46610: LD_VAR 0 6
46614: PPUSH
46615: LD_INT 1
46617: PPUSH
46618: CALL_OW 259
46622: PUSH
46623: LD_REAL  1.15000000000000E+0000
46626: MUL
46627: MUL
46628: ST_TO_ADDR
// end ; unit_vehicle :
46629: GO 47459
46631: LD_INT 2
46633: DOUBLE
46634: EQUAL
46635: IFTRUE 46639
46637: GO 47447
46639: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46640: LD_VAR 0 6
46644: PPUSH
46645: CALL_OW 264
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: LD_INT 42
46655: PUSH
46656: LD_INT 24
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: LIST
46663: IN
46664: IFFALSE 46685
// points := [ 25 , 5 , 3 ] ;
46666: LD_ADDR_VAR 0 9
46670: PUSH
46671: LD_INT 25
46673: PUSH
46674: LD_INT 5
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46685: LD_VAR 0 6
46689: PPUSH
46690: CALL_OW 264
46694: PUSH
46695: LD_INT 4
46697: PUSH
46698: LD_INT 43
46700: PUSH
46701: LD_INT 25
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: IN
46709: IFFALSE 46730
// points := [ 40 , 15 , 5 ] ;
46711: LD_ADDR_VAR 0 9
46715: PUSH
46716: LD_INT 40
46718: PUSH
46719: LD_INT 15
46721: PUSH
46722: LD_INT 5
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46730: LD_VAR 0 6
46734: PPUSH
46735: CALL_OW 264
46739: PUSH
46740: LD_INT 3
46742: PUSH
46743: LD_INT 23
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: IN
46750: IFFALSE 46771
// points := [ 7 , 25 , 8 ] ;
46752: LD_ADDR_VAR 0 9
46756: PUSH
46757: LD_INT 7
46759: PUSH
46760: LD_INT 25
46762: PUSH
46763: LD_INT 8
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46771: LD_VAR 0 6
46775: PPUSH
46776: CALL_OW 264
46780: PUSH
46781: LD_INT 5
46783: PUSH
46784: LD_INT 27
46786: PUSH
46787: LD_INT 44
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: IN
46795: IFFALSE 46816
// points := [ 14 , 50 , 16 ] ;
46797: LD_ADDR_VAR 0 9
46801: PUSH
46802: LD_INT 14
46804: PUSH
46805: LD_INT 50
46807: PUSH
46808: LD_INT 16
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46816: LD_VAR 0 6
46820: PPUSH
46821: CALL_OW 264
46825: PUSH
46826: LD_INT 6
46828: PUSH
46829: LD_INT 46
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: IN
46836: IFFALSE 46857
// points := [ 32 , 120 , 70 ] ;
46838: LD_ADDR_VAR 0 9
46842: PUSH
46843: LD_INT 32
46845: PUSH
46846: LD_INT 120
46848: PUSH
46849: LD_INT 70
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: LIST
46856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46857: LD_VAR 0 6
46861: PPUSH
46862: CALL_OW 264
46866: PUSH
46867: LD_INT 7
46869: PUSH
46870: LD_INT 28
46872: PUSH
46873: LD_INT 45
46875: PUSH
46876: LD_EXP 53
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: IN
46887: IFFALSE 46908
// points := [ 35 , 20 , 45 ] ;
46889: LD_ADDR_VAR 0 9
46893: PUSH
46894: LD_INT 35
46896: PUSH
46897: LD_INT 20
46899: PUSH
46900: LD_INT 45
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46908: LD_VAR 0 6
46912: PPUSH
46913: CALL_OW 264
46917: PUSH
46918: LD_INT 47
46920: PUSH
46921: EMPTY
46922: LIST
46923: IN
46924: IFFALSE 46945
// points := [ 67 , 45 , 75 ] ;
46926: LD_ADDR_VAR 0 9
46930: PUSH
46931: LD_INT 67
46933: PUSH
46934: LD_INT 45
46936: PUSH
46937: LD_INT 75
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: LIST
46944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46945: LD_VAR 0 6
46949: PPUSH
46950: CALL_OW 264
46954: PUSH
46955: LD_INT 26
46957: PUSH
46958: EMPTY
46959: LIST
46960: IN
46961: IFFALSE 46982
// points := [ 120 , 30 , 80 ] ;
46963: LD_ADDR_VAR 0 9
46967: PUSH
46968: LD_INT 120
46970: PUSH
46971: LD_INT 30
46973: PUSH
46974: LD_INT 80
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46982: LD_VAR 0 6
46986: PPUSH
46987: CALL_OW 264
46991: PUSH
46992: LD_INT 22
46994: PUSH
46995: EMPTY
46996: LIST
46997: IN
46998: IFFALSE 47019
// points := [ 40 , 1 , 1 ] ;
47000: LD_ADDR_VAR 0 9
47004: PUSH
47005: LD_INT 40
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47019: LD_VAR 0 6
47023: PPUSH
47024: CALL_OW 264
47028: PUSH
47029: LD_INT 29
47031: PUSH
47032: EMPTY
47033: LIST
47034: IN
47035: IFFALSE 47056
// points := [ 70 , 200 , 400 ] ;
47037: LD_ADDR_VAR 0 9
47041: PUSH
47042: LD_INT 70
47044: PUSH
47045: LD_INT 200
47047: PUSH
47048: LD_INT 400
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: LIST
47055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47056: LD_VAR 0 6
47060: PPUSH
47061: CALL_OW 264
47065: PUSH
47066: LD_INT 14
47068: PUSH
47069: LD_INT 53
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: IN
47076: IFFALSE 47097
// points := [ 40 , 10 , 20 ] ;
47078: LD_ADDR_VAR 0 9
47082: PUSH
47083: LD_INT 40
47085: PUSH
47086: LD_INT 10
47088: PUSH
47089: LD_INT 20
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47097: LD_VAR 0 6
47101: PPUSH
47102: CALL_OW 264
47106: PUSH
47107: LD_INT 9
47109: PUSH
47110: EMPTY
47111: LIST
47112: IN
47113: IFFALSE 47134
// points := [ 5 , 70 , 20 ] ;
47115: LD_ADDR_VAR 0 9
47119: PUSH
47120: LD_INT 5
47122: PUSH
47123: LD_INT 70
47125: PUSH
47126: LD_INT 20
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47134: LD_VAR 0 6
47138: PPUSH
47139: CALL_OW 264
47143: PUSH
47144: LD_INT 10
47146: PUSH
47147: EMPTY
47148: LIST
47149: IN
47150: IFFALSE 47171
// points := [ 35 , 110 , 70 ] ;
47152: LD_ADDR_VAR 0 9
47156: PUSH
47157: LD_INT 35
47159: PUSH
47160: LD_INT 110
47162: PUSH
47163: LD_INT 70
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47171: LD_VAR 0 6
47175: PPUSH
47176: CALL_OW 265
47180: PUSH
47181: LD_INT 25
47183: EQUAL
47184: IFFALSE 47205
// points := [ 80 , 65 , 100 ] ;
47186: LD_ADDR_VAR 0 9
47190: PUSH
47191: LD_INT 80
47193: PUSH
47194: LD_INT 65
47196: PUSH
47197: LD_INT 100
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47205: LD_VAR 0 6
47209: PPUSH
47210: CALL_OW 263
47214: PUSH
47215: LD_INT 1
47217: EQUAL
47218: IFFALSE 47253
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47220: LD_ADDR_VAR 0 10
47224: PUSH
47225: LD_VAR 0 10
47229: PUSH
47230: LD_VAR 0 6
47234: PPUSH
47235: CALL_OW 311
47239: PPUSH
47240: LD_INT 3
47242: PPUSH
47243: CALL_OW 259
47247: PUSH
47248: LD_INT 4
47250: MUL
47251: MUL
47252: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47253: LD_VAR 0 6
47257: PPUSH
47258: CALL_OW 263
47262: PUSH
47263: LD_INT 2
47265: EQUAL
47266: IFFALSE 47317
// begin j := IsControledBy ( i ) ;
47268: LD_ADDR_VAR 0 7
47272: PUSH
47273: LD_VAR 0 6
47277: PPUSH
47278: CALL_OW 312
47282: ST_TO_ADDR
// if j then
47283: LD_VAR 0 7
47287: IFFALSE 47317
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47289: LD_ADDR_VAR 0 10
47293: PUSH
47294: LD_VAR 0 10
47298: PUSH
47299: LD_VAR 0 7
47303: PPUSH
47304: LD_INT 3
47306: PPUSH
47307: CALL_OW 259
47311: PUSH
47312: LD_INT 3
47314: MUL
47315: MUL
47316: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47317: LD_VAR 0 6
47321: PPUSH
47322: CALL_OW 264
47326: PUSH
47327: LD_INT 5
47329: PUSH
47330: LD_INT 6
47332: PUSH
47333: LD_INT 46
47335: PUSH
47336: LD_INT 44
47338: PUSH
47339: LD_INT 47
47341: PUSH
47342: LD_INT 45
47344: PUSH
47345: LD_INT 28
47347: PUSH
47348: LD_INT 7
47350: PUSH
47351: LD_INT 27
47353: PUSH
47354: LD_INT 29
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: IN
47369: PUSH
47370: LD_VAR 0 1
47374: PPUSH
47375: LD_INT 52
47377: PPUSH
47378: CALL_OW 321
47382: PUSH
47383: LD_INT 2
47385: EQUAL
47386: AND
47387: IFFALSE 47404
// bpoints := bpoints * 1.2 ;
47389: LD_ADDR_VAR 0 10
47393: PUSH
47394: LD_VAR 0 10
47398: PUSH
47399: LD_REAL  1.20000000000000E+0000
47402: MUL
47403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47404: LD_VAR 0 6
47408: PPUSH
47409: CALL_OW 264
47413: PUSH
47414: LD_INT 6
47416: PUSH
47417: LD_INT 46
47419: PUSH
47420: LD_INT 47
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: IN
47428: IFFALSE 47445
// bpoints := bpoints * 1.2 ;
47430: LD_ADDR_VAR 0 10
47434: PUSH
47435: LD_VAR 0 10
47439: PUSH
47440: LD_REAL  1.20000000000000E+0000
47443: MUL
47444: ST_TO_ADDR
// end ; unit_building :
47445: GO 47459
47447: LD_INT 3
47449: DOUBLE
47450: EQUAL
47451: IFTRUE 47455
47453: GO 47458
47455: POP
// ; end ;
47456: GO 47459
47458: POP
// for j = 1 to 3 do
47459: LD_ADDR_VAR 0 7
47463: PUSH
47464: DOUBLE
47465: LD_INT 1
47467: DEC
47468: ST_TO_ADDR
47469: LD_INT 3
47471: PUSH
47472: FOR_TO
47473: IFFALSE 47526
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47475: LD_ADDR_VAR 0 5
47479: PUSH
47480: LD_VAR 0 5
47484: PPUSH
47485: LD_VAR 0 7
47489: PPUSH
47490: LD_VAR 0 5
47494: PUSH
47495: LD_VAR 0 7
47499: ARRAY
47500: PUSH
47501: LD_VAR 0 9
47505: PUSH
47506: LD_VAR 0 7
47510: ARRAY
47511: PUSH
47512: LD_VAR 0 10
47516: MUL
47517: PLUS
47518: PPUSH
47519: CALL_OW 1
47523: ST_TO_ADDR
47524: GO 47472
47526: POP
47527: POP
// end ;
47528: GO 46005
47530: POP
47531: POP
// result := Replace ( result , 4 , tmp ) ;
47532: LD_ADDR_VAR 0 5
47536: PUSH
47537: LD_VAR 0 5
47541: PPUSH
47542: LD_INT 4
47544: PPUSH
47545: LD_VAR 0 8
47549: PPUSH
47550: CALL_OW 1
47554: ST_TO_ADDR
// end ;
47555: LD_VAR 0 5
47559: RET
// export function DangerAtRange ( unit , range ) ; begin
47560: LD_INT 0
47562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47563: LD_ADDR_VAR 0 3
47567: PUSH
47568: LD_VAR 0 1
47572: PPUSH
47573: CALL_OW 255
47577: PPUSH
47578: LD_VAR 0 1
47582: PPUSH
47583: CALL_OW 250
47587: PPUSH
47588: LD_VAR 0 1
47592: PPUSH
47593: CALL_OW 251
47597: PPUSH
47598: LD_VAR 0 2
47602: PPUSH
47603: CALL 45857 0 4
47607: ST_TO_ADDR
// end ;
47608: LD_VAR 0 3
47612: RET
// export function DangerInArea ( side , area ) ; begin
47613: LD_INT 0
47615: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47616: LD_ADDR_VAR 0 3
47620: PUSH
47621: LD_VAR 0 2
47625: PPUSH
47626: LD_INT 81
47628: PUSH
47629: LD_VAR 0 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PPUSH
47638: CALL_OW 70
47642: ST_TO_ADDR
// end ;
47643: LD_VAR 0 3
47647: RET
// export function IsExtension ( b ) ; begin
47648: LD_INT 0
47650: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47651: LD_ADDR_VAR 0 2
47655: PUSH
47656: LD_VAR 0 1
47660: PUSH
47661: LD_INT 23
47663: PUSH
47664: LD_INT 20
47666: PUSH
47667: LD_INT 22
47669: PUSH
47670: LD_INT 17
47672: PUSH
47673: LD_INT 24
47675: PUSH
47676: LD_INT 21
47678: PUSH
47679: LD_INT 19
47681: PUSH
47682: LD_INT 16
47684: PUSH
47685: LD_INT 25
47687: PUSH
47688: LD_INT 18
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: IN
47703: ST_TO_ADDR
// end ;
47704: LD_VAR 0 2
47708: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47709: LD_INT 0
47711: PPUSH
47712: PPUSH
47713: PPUSH
// result := [ ] ;
47714: LD_ADDR_VAR 0 4
47718: PUSH
47719: EMPTY
47720: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47721: LD_ADDR_VAR 0 5
47725: PUSH
47726: LD_VAR 0 2
47730: PPUSH
47731: LD_INT 21
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PPUSH
47741: CALL_OW 70
47745: ST_TO_ADDR
// if not tmp then
47746: LD_VAR 0 5
47750: NOT
47751: IFFALSE 47755
// exit ;
47753: GO 47819
// if checkLink then
47755: LD_VAR 0 3
47759: IFFALSE 47809
// begin for i in tmp do
47761: LD_ADDR_VAR 0 6
47765: PUSH
47766: LD_VAR 0 5
47770: PUSH
47771: FOR_IN
47772: IFFALSE 47807
// if GetBase ( i ) <> base then
47774: LD_VAR 0 6
47778: PPUSH
47779: CALL_OW 274
47783: PUSH
47784: LD_VAR 0 1
47788: NONEQUAL
47789: IFFALSE 47805
// ComLinkToBase ( base , i ) ;
47791: LD_VAR 0 1
47795: PPUSH
47796: LD_VAR 0 6
47800: PPUSH
47801: CALL_OW 169
47805: GO 47771
47807: POP
47808: POP
// end ; result := tmp ;
47809: LD_ADDR_VAR 0 4
47813: PUSH
47814: LD_VAR 0 5
47818: ST_TO_ADDR
// end ;
47819: LD_VAR 0 4
47823: RET
// export function ComComplete ( units , b ) ; var i ; begin
47824: LD_INT 0
47826: PPUSH
47827: PPUSH
// if not units then
47828: LD_VAR 0 1
47832: NOT
47833: IFFALSE 47837
// exit ;
47835: GO 47927
// for i in units do
47837: LD_ADDR_VAR 0 4
47841: PUSH
47842: LD_VAR 0 1
47846: PUSH
47847: FOR_IN
47848: IFFALSE 47925
// if BuildingStatus ( b ) = bs_build then
47850: LD_VAR 0 2
47854: PPUSH
47855: CALL_OW 461
47859: PUSH
47860: LD_INT 1
47862: EQUAL
47863: IFFALSE 47923
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47865: LD_VAR 0 4
47869: PPUSH
47870: LD_STRING h
47872: PUSH
47873: LD_VAR 0 2
47877: PPUSH
47878: CALL_OW 250
47882: PUSH
47883: LD_VAR 0 2
47887: PPUSH
47888: CALL_OW 251
47892: PUSH
47893: LD_VAR 0 2
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: PPUSH
47919: CALL_OW 446
47923: GO 47847
47925: POP
47926: POP
// end ;
47927: LD_VAR 0 3
47931: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47932: LD_INT 0
47934: PPUSH
47935: PPUSH
47936: PPUSH
47937: PPUSH
47938: PPUSH
47939: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47940: LD_VAR 0 1
47944: NOT
47945: PUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: CALL_OW 263
47955: PUSH
47956: LD_INT 2
47958: NONEQUAL
47959: OR
47960: IFFALSE 47964
// exit ;
47962: GO 48280
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47964: LD_ADDR_VAR 0 6
47968: PUSH
47969: LD_INT 22
47971: PUSH
47972: LD_VAR 0 1
47976: PPUSH
47977: CALL_OW 255
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 30
47991: PUSH
47992: LD_INT 36
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 34
48001: PUSH
48002: LD_INT 31
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PPUSH
48018: CALL_OW 69
48022: ST_TO_ADDR
// if not tmp then
48023: LD_VAR 0 6
48027: NOT
48028: IFFALSE 48032
// exit ;
48030: GO 48280
// result := [ ] ;
48032: LD_ADDR_VAR 0 2
48036: PUSH
48037: EMPTY
48038: ST_TO_ADDR
// for i in tmp do
48039: LD_ADDR_VAR 0 3
48043: PUSH
48044: LD_VAR 0 6
48048: PUSH
48049: FOR_IN
48050: IFFALSE 48121
// begin t := UnitsInside ( i ) ;
48052: LD_ADDR_VAR 0 4
48056: PUSH
48057: LD_VAR 0 3
48061: PPUSH
48062: CALL_OW 313
48066: ST_TO_ADDR
// if t then
48067: LD_VAR 0 4
48071: IFFALSE 48119
// for j in t do
48073: LD_ADDR_VAR 0 7
48077: PUSH
48078: LD_VAR 0 4
48082: PUSH
48083: FOR_IN
48084: IFFALSE 48117
// result := Replace ( result , result + 1 , j ) ;
48086: LD_ADDR_VAR 0 2
48090: PUSH
48091: LD_VAR 0 2
48095: PPUSH
48096: LD_VAR 0 2
48100: PUSH
48101: LD_INT 1
48103: PLUS
48104: PPUSH
48105: LD_VAR 0 7
48109: PPUSH
48110: CALL_OW 1
48114: ST_TO_ADDR
48115: GO 48083
48117: POP
48118: POP
// end ;
48119: GO 48049
48121: POP
48122: POP
// if not result then
48123: LD_VAR 0 2
48127: NOT
48128: IFFALSE 48132
// exit ;
48130: GO 48280
// mech := result [ 1 ] ;
48132: LD_ADDR_VAR 0 5
48136: PUSH
48137: LD_VAR 0 2
48141: PUSH
48142: LD_INT 1
48144: ARRAY
48145: ST_TO_ADDR
// if result > 1 then
48146: LD_VAR 0 2
48150: PUSH
48151: LD_INT 1
48153: GREATER
48154: IFFALSE 48266
// begin for i = 2 to result do
48156: LD_ADDR_VAR 0 3
48160: PUSH
48161: DOUBLE
48162: LD_INT 2
48164: DEC
48165: ST_TO_ADDR
48166: LD_VAR 0 2
48170: PUSH
48171: FOR_TO
48172: IFFALSE 48264
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48174: LD_ADDR_VAR 0 4
48178: PUSH
48179: LD_VAR 0 2
48183: PUSH
48184: LD_VAR 0 3
48188: ARRAY
48189: PPUSH
48190: LD_INT 3
48192: PPUSH
48193: CALL_OW 259
48197: PUSH
48198: LD_VAR 0 2
48202: PUSH
48203: LD_VAR 0 3
48207: ARRAY
48208: PPUSH
48209: CALL_OW 432
48213: MINUS
48214: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48215: LD_VAR 0 4
48219: PUSH
48220: LD_VAR 0 5
48224: PPUSH
48225: LD_INT 3
48227: PPUSH
48228: CALL_OW 259
48232: PUSH
48233: LD_VAR 0 5
48237: PPUSH
48238: CALL_OW 432
48242: MINUS
48243: GREATEREQUAL
48244: IFFALSE 48262
// mech := result [ i ] ;
48246: LD_ADDR_VAR 0 5
48250: PUSH
48251: LD_VAR 0 2
48255: PUSH
48256: LD_VAR 0 3
48260: ARRAY
48261: ST_TO_ADDR
// end ;
48262: GO 48171
48264: POP
48265: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48266: LD_VAR 0 1
48270: PPUSH
48271: LD_VAR 0 5
48275: PPUSH
48276: CALL_OW 135
// end ;
48280: LD_VAR 0 2
48284: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48285: LD_INT 0
48287: PPUSH
48288: PPUSH
48289: PPUSH
48290: PPUSH
48291: PPUSH
48292: PPUSH
48293: PPUSH
48294: PPUSH
48295: PPUSH
48296: PPUSH
48297: PPUSH
48298: PPUSH
48299: PPUSH
// result := [ ] ;
48300: LD_ADDR_VAR 0 7
48304: PUSH
48305: EMPTY
48306: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48307: LD_VAR 0 1
48311: PPUSH
48312: CALL_OW 266
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: IN
48327: NOT
48328: IFFALSE 48332
// exit ;
48330: GO 49966
// if name then
48332: LD_VAR 0 3
48336: IFFALSE 48352
// SetBName ( base_dep , name ) ;
48338: LD_VAR 0 1
48342: PPUSH
48343: LD_VAR 0 3
48347: PPUSH
48348: CALL_OW 500
// base := GetBase ( base_dep ) ;
48352: LD_ADDR_VAR 0 15
48356: PUSH
48357: LD_VAR 0 1
48361: PPUSH
48362: CALL_OW 274
48366: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48367: LD_ADDR_VAR 0 16
48371: PUSH
48372: LD_VAR 0 1
48376: PPUSH
48377: CALL_OW 255
48381: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48382: LD_ADDR_VAR 0 17
48386: PUSH
48387: LD_VAR 0 1
48391: PPUSH
48392: CALL_OW 248
48396: ST_TO_ADDR
// if sources then
48397: LD_VAR 0 5
48401: IFFALSE 48448
// for i = 1 to 3 do
48403: LD_ADDR_VAR 0 8
48407: PUSH
48408: DOUBLE
48409: LD_INT 1
48411: DEC
48412: ST_TO_ADDR
48413: LD_INT 3
48415: PUSH
48416: FOR_TO
48417: IFFALSE 48446
// AddResourceType ( base , i , sources [ i ] ) ;
48419: LD_VAR 0 15
48423: PPUSH
48424: LD_VAR 0 8
48428: PPUSH
48429: LD_VAR 0 5
48433: PUSH
48434: LD_VAR 0 8
48438: ARRAY
48439: PPUSH
48440: CALL_OW 276
48444: GO 48416
48446: POP
48447: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48448: LD_ADDR_VAR 0 18
48452: PUSH
48453: LD_VAR 0 15
48457: PPUSH
48458: LD_VAR 0 2
48462: PPUSH
48463: LD_INT 1
48465: PPUSH
48466: CALL 47709 0 3
48470: ST_TO_ADDR
// InitHc ;
48471: CALL_OW 19
// InitUc ;
48475: CALL_OW 18
// uc_side := side ;
48479: LD_ADDR_OWVAR 20
48483: PUSH
48484: LD_VAR 0 16
48488: ST_TO_ADDR
// uc_nation := nation ;
48489: LD_ADDR_OWVAR 21
48493: PUSH
48494: LD_VAR 0 17
48498: ST_TO_ADDR
// if buildings then
48499: LD_VAR 0 18
48503: IFFALSE 49825
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48505: LD_ADDR_VAR 0 19
48509: PUSH
48510: LD_VAR 0 18
48514: PPUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 30
48520: PUSH
48521: LD_INT 29
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 30
48530: PUSH
48531: LD_INT 30
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: PPUSH
48543: CALL_OW 72
48547: ST_TO_ADDR
// if tmp then
48548: LD_VAR 0 19
48552: IFFALSE 48600
// for i in tmp do
48554: LD_ADDR_VAR 0 8
48558: PUSH
48559: LD_VAR 0 19
48563: PUSH
48564: FOR_IN
48565: IFFALSE 48598
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48567: LD_VAR 0 8
48571: PPUSH
48572: CALL_OW 250
48576: PPUSH
48577: LD_VAR 0 8
48581: PPUSH
48582: CALL_OW 251
48586: PPUSH
48587: LD_VAR 0 16
48591: PPUSH
48592: CALL_OW 441
48596: GO 48564
48598: POP
48599: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48600: LD_VAR 0 18
48604: PPUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 30
48610: PUSH
48611: LD_INT 32
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 30
48620: PUSH
48621: LD_INT 33
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: PPUSH
48633: CALL_OW 72
48637: IFFALSE 48725
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48639: LD_ADDR_VAR 0 8
48643: PUSH
48644: LD_VAR 0 18
48648: PPUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 30
48654: PUSH
48655: LD_INT 32
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 30
48664: PUSH
48665: LD_INT 33
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: LIST
48676: PPUSH
48677: CALL_OW 72
48681: PUSH
48682: FOR_IN
48683: IFFALSE 48723
// begin if not GetBWeapon ( i ) then
48685: LD_VAR 0 8
48689: PPUSH
48690: CALL_OW 269
48694: NOT
48695: IFFALSE 48721
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48697: LD_VAR 0 8
48701: PPUSH
48702: LD_VAR 0 8
48706: PPUSH
48707: LD_VAR 0 2
48711: PPUSH
48712: CALL 49971 0 2
48716: PPUSH
48717: CALL_OW 431
// end ;
48721: GO 48682
48723: POP
48724: POP
// end ; for i = 1 to personel do
48725: LD_ADDR_VAR 0 8
48729: PUSH
48730: DOUBLE
48731: LD_INT 1
48733: DEC
48734: ST_TO_ADDR
48735: LD_VAR 0 6
48739: PUSH
48740: FOR_TO
48741: IFFALSE 49805
// begin if i > 4 then
48743: LD_VAR 0 8
48747: PUSH
48748: LD_INT 4
48750: GREATER
48751: IFFALSE 48755
// break ;
48753: GO 49805
// case i of 1 :
48755: LD_VAR 0 8
48759: PUSH
48760: LD_INT 1
48762: DOUBLE
48763: EQUAL
48764: IFTRUE 48768
48766: GO 48848
48768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48769: LD_ADDR_VAR 0 12
48773: PUSH
48774: LD_VAR 0 18
48778: PPUSH
48779: LD_INT 22
48781: PUSH
48782: LD_VAR 0 16
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 58
48793: PUSH
48794: EMPTY
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 30
48802: PUSH
48803: LD_INT 32
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 30
48812: PUSH
48813: LD_INT 4
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 30
48822: PUSH
48823: LD_INT 5
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: PPUSH
48841: CALL_OW 72
48845: ST_TO_ADDR
48846: GO 49070
48848: LD_INT 2
48850: DOUBLE
48851: EQUAL
48852: IFTRUE 48856
48854: GO 48918
48856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48857: LD_ADDR_VAR 0 12
48861: PUSH
48862: LD_VAR 0 18
48866: PPUSH
48867: LD_INT 22
48869: PUSH
48870: LD_VAR 0 16
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 30
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 30
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PPUSH
48911: CALL_OW 72
48915: ST_TO_ADDR
48916: GO 49070
48918: LD_INT 3
48920: DOUBLE
48921: EQUAL
48922: IFTRUE 48926
48924: GO 48988
48926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48927: LD_ADDR_VAR 0 12
48931: PUSH
48932: LD_VAR 0 18
48936: PPUSH
48937: LD_INT 22
48939: PUSH
48940: LD_VAR 0 16
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 30
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 30
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PPUSH
48981: CALL_OW 72
48985: ST_TO_ADDR
48986: GO 49070
48988: LD_INT 4
48990: DOUBLE
48991: EQUAL
48992: IFTRUE 48996
48994: GO 49069
48996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48997: LD_ADDR_VAR 0 12
49001: PUSH
49002: LD_VAR 0 18
49006: PPUSH
49007: LD_INT 22
49009: PUSH
49010: LD_VAR 0 16
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 30
49024: PUSH
49025: LD_INT 6
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 30
49034: PUSH
49035: LD_INT 7
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 30
49044: PUSH
49045: LD_INT 8
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PPUSH
49062: CALL_OW 72
49066: ST_TO_ADDR
49067: GO 49070
49069: POP
// if i = 1 then
49070: LD_VAR 0 8
49074: PUSH
49075: LD_INT 1
49077: EQUAL
49078: IFFALSE 49189
// begin tmp := [ ] ;
49080: LD_ADDR_VAR 0 19
49084: PUSH
49085: EMPTY
49086: ST_TO_ADDR
// for j in f do
49087: LD_ADDR_VAR 0 9
49091: PUSH
49092: LD_VAR 0 12
49096: PUSH
49097: FOR_IN
49098: IFFALSE 49171
// if GetBType ( j ) = b_bunker then
49100: LD_VAR 0 9
49104: PPUSH
49105: CALL_OW 266
49109: PUSH
49110: LD_INT 32
49112: EQUAL
49113: IFFALSE 49140
// tmp := Insert ( tmp , 1 , j ) else
49115: LD_ADDR_VAR 0 19
49119: PUSH
49120: LD_VAR 0 19
49124: PPUSH
49125: LD_INT 1
49127: PPUSH
49128: LD_VAR 0 9
49132: PPUSH
49133: CALL_OW 2
49137: ST_TO_ADDR
49138: GO 49169
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49140: LD_ADDR_VAR 0 19
49144: PUSH
49145: LD_VAR 0 19
49149: PPUSH
49150: LD_VAR 0 19
49154: PUSH
49155: LD_INT 1
49157: PLUS
49158: PPUSH
49159: LD_VAR 0 9
49163: PPUSH
49164: CALL_OW 2
49168: ST_TO_ADDR
49169: GO 49097
49171: POP
49172: POP
// if tmp then
49173: LD_VAR 0 19
49177: IFFALSE 49189
// f := tmp ;
49179: LD_ADDR_VAR 0 12
49183: PUSH
49184: LD_VAR 0 19
49188: ST_TO_ADDR
// end ; x := personel [ i ] ;
49189: LD_ADDR_VAR 0 13
49193: PUSH
49194: LD_VAR 0 6
49198: PUSH
49199: LD_VAR 0 8
49203: ARRAY
49204: ST_TO_ADDR
// if x = - 1 then
49205: LD_VAR 0 13
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: EQUAL
49214: IFFALSE 49423
// begin for j in f do
49216: LD_ADDR_VAR 0 9
49220: PUSH
49221: LD_VAR 0 12
49225: PUSH
49226: FOR_IN
49227: IFFALSE 49419
// repeat InitHc ;
49229: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49233: LD_VAR 0 9
49237: PPUSH
49238: CALL_OW 266
49242: PUSH
49243: LD_INT 5
49245: EQUAL
49246: IFFALSE 49316
// begin if UnitsInside ( j ) < 3 then
49248: LD_VAR 0 9
49252: PPUSH
49253: CALL_OW 313
49257: PUSH
49258: LD_INT 3
49260: LESS
49261: IFFALSE 49297
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49263: LD_INT 0
49265: PPUSH
49266: LD_INT 5
49268: PUSH
49269: LD_INT 8
49271: PUSH
49272: LD_INT 9
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: PUSH
49280: LD_VAR 0 17
49284: ARRAY
49285: PPUSH
49286: LD_VAR 0 4
49290: PPUSH
49291: CALL_OW 380
49295: GO 49314
// PrepareHuman ( false , i , skill ) ;
49297: LD_INT 0
49299: PPUSH
49300: LD_VAR 0 8
49304: PPUSH
49305: LD_VAR 0 4
49309: PPUSH
49310: CALL_OW 380
// end else
49314: GO 49333
// PrepareHuman ( false , i , skill ) ;
49316: LD_INT 0
49318: PPUSH
49319: LD_VAR 0 8
49323: PPUSH
49324: LD_VAR 0 4
49328: PPUSH
49329: CALL_OW 380
// un := CreateHuman ;
49333: LD_ADDR_VAR 0 14
49337: PUSH
49338: CALL_OW 44
49342: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49343: LD_ADDR_VAR 0 7
49347: PUSH
49348: LD_VAR 0 7
49352: PPUSH
49353: LD_INT 1
49355: PPUSH
49356: LD_VAR 0 14
49360: PPUSH
49361: CALL_OW 2
49365: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49366: LD_VAR 0 14
49370: PPUSH
49371: LD_VAR 0 9
49375: PPUSH
49376: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49380: LD_VAR 0 9
49384: PPUSH
49385: CALL_OW 313
49389: PUSH
49390: LD_INT 6
49392: EQUAL
49393: PUSH
49394: LD_VAR 0 9
49398: PPUSH
49399: CALL_OW 266
49403: PUSH
49404: LD_INT 32
49406: PUSH
49407: LD_INT 31
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: IN
49414: OR
49415: IFFALSE 49229
49417: GO 49226
49419: POP
49420: POP
// end else
49421: GO 49803
// for j = 1 to x do
49423: LD_ADDR_VAR 0 9
49427: PUSH
49428: DOUBLE
49429: LD_INT 1
49431: DEC
49432: ST_TO_ADDR
49433: LD_VAR 0 13
49437: PUSH
49438: FOR_TO
49439: IFFALSE 49801
// begin InitHc ;
49441: CALL_OW 19
// if not f then
49445: LD_VAR 0 12
49449: NOT
49450: IFFALSE 49539
// begin PrepareHuman ( false , i , skill ) ;
49452: LD_INT 0
49454: PPUSH
49455: LD_VAR 0 8
49459: PPUSH
49460: LD_VAR 0 4
49464: PPUSH
49465: CALL_OW 380
// un := CreateHuman ;
49469: LD_ADDR_VAR 0 14
49473: PUSH
49474: CALL_OW 44
49478: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49479: LD_ADDR_VAR 0 7
49483: PUSH
49484: LD_VAR 0 7
49488: PPUSH
49489: LD_INT 1
49491: PPUSH
49492: LD_VAR 0 14
49496: PPUSH
49497: CALL_OW 2
49501: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49502: LD_VAR 0 14
49506: PPUSH
49507: LD_VAR 0 1
49511: PPUSH
49512: CALL_OW 250
49516: PPUSH
49517: LD_VAR 0 1
49521: PPUSH
49522: CALL_OW 251
49526: PPUSH
49527: LD_INT 10
49529: PPUSH
49530: LD_INT 0
49532: PPUSH
49533: CALL_OW 50
// continue ;
49537: GO 49438
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49539: LD_VAR 0 12
49543: PUSH
49544: LD_INT 1
49546: ARRAY
49547: PPUSH
49548: CALL_OW 313
49552: PUSH
49553: LD_VAR 0 12
49557: PUSH
49558: LD_INT 1
49560: ARRAY
49561: PPUSH
49562: CALL_OW 266
49566: PUSH
49567: LD_INT 32
49569: PUSH
49570: LD_INT 31
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: IN
49577: AND
49578: PUSH
49579: LD_VAR 0 12
49583: PUSH
49584: LD_INT 1
49586: ARRAY
49587: PPUSH
49588: CALL_OW 313
49592: PUSH
49593: LD_INT 6
49595: EQUAL
49596: OR
49597: IFFALSE 49617
// f := Delete ( f , 1 ) ;
49599: LD_ADDR_VAR 0 12
49603: PUSH
49604: LD_VAR 0 12
49608: PPUSH
49609: LD_INT 1
49611: PPUSH
49612: CALL_OW 3
49616: ST_TO_ADDR
// if not f then
49617: LD_VAR 0 12
49621: NOT
49622: IFFALSE 49640
// begin x := x + 2 ;
49624: LD_ADDR_VAR 0 13
49628: PUSH
49629: LD_VAR 0 13
49633: PUSH
49634: LD_INT 2
49636: PLUS
49637: ST_TO_ADDR
// continue ;
49638: GO 49438
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49640: LD_VAR 0 12
49644: PUSH
49645: LD_INT 1
49647: ARRAY
49648: PPUSH
49649: CALL_OW 266
49653: PUSH
49654: LD_INT 5
49656: EQUAL
49657: IFFALSE 49731
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49659: LD_VAR 0 12
49663: PUSH
49664: LD_INT 1
49666: ARRAY
49667: PPUSH
49668: CALL_OW 313
49672: PUSH
49673: LD_INT 3
49675: LESS
49676: IFFALSE 49712
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49678: LD_INT 0
49680: PPUSH
49681: LD_INT 5
49683: PUSH
49684: LD_INT 8
49686: PUSH
49687: LD_INT 9
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: PUSH
49695: LD_VAR 0 17
49699: ARRAY
49700: PPUSH
49701: LD_VAR 0 4
49705: PPUSH
49706: CALL_OW 380
49710: GO 49729
// PrepareHuman ( false , i , skill ) ;
49712: LD_INT 0
49714: PPUSH
49715: LD_VAR 0 8
49719: PPUSH
49720: LD_VAR 0 4
49724: PPUSH
49725: CALL_OW 380
// end else
49729: GO 49748
// PrepareHuman ( false , i , skill ) ;
49731: LD_INT 0
49733: PPUSH
49734: LD_VAR 0 8
49738: PPUSH
49739: LD_VAR 0 4
49743: PPUSH
49744: CALL_OW 380
// un := CreateHuman ;
49748: LD_ADDR_VAR 0 14
49752: PUSH
49753: CALL_OW 44
49757: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49758: LD_ADDR_VAR 0 7
49762: PUSH
49763: LD_VAR 0 7
49767: PPUSH
49768: LD_INT 1
49770: PPUSH
49771: LD_VAR 0 14
49775: PPUSH
49776: CALL_OW 2
49780: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49781: LD_VAR 0 14
49785: PPUSH
49786: LD_VAR 0 12
49790: PUSH
49791: LD_INT 1
49793: ARRAY
49794: PPUSH
49795: CALL_OW 52
// end ;
49799: GO 49438
49801: POP
49802: POP
// end ;
49803: GO 48740
49805: POP
49806: POP
// result := result ^ buildings ;
49807: LD_ADDR_VAR 0 7
49811: PUSH
49812: LD_VAR 0 7
49816: PUSH
49817: LD_VAR 0 18
49821: ADD
49822: ST_TO_ADDR
// end else
49823: GO 49966
// begin for i = 1 to personel do
49825: LD_ADDR_VAR 0 8
49829: PUSH
49830: DOUBLE
49831: LD_INT 1
49833: DEC
49834: ST_TO_ADDR
49835: LD_VAR 0 6
49839: PUSH
49840: FOR_TO
49841: IFFALSE 49964
// begin if i > 4 then
49843: LD_VAR 0 8
49847: PUSH
49848: LD_INT 4
49850: GREATER
49851: IFFALSE 49855
// break ;
49853: GO 49964
// x := personel [ i ] ;
49855: LD_ADDR_VAR 0 13
49859: PUSH
49860: LD_VAR 0 6
49864: PUSH
49865: LD_VAR 0 8
49869: ARRAY
49870: ST_TO_ADDR
// if x = - 1 then
49871: LD_VAR 0 13
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: EQUAL
49880: IFFALSE 49884
// continue ;
49882: GO 49840
// PrepareHuman ( false , i , skill ) ;
49884: LD_INT 0
49886: PPUSH
49887: LD_VAR 0 8
49891: PPUSH
49892: LD_VAR 0 4
49896: PPUSH
49897: CALL_OW 380
// un := CreateHuman ;
49901: LD_ADDR_VAR 0 14
49905: PUSH
49906: CALL_OW 44
49910: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49911: LD_VAR 0 14
49915: PPUSH
49916: LD_VAR 0 1
49920: PPUSH
49921: CALL_OW 250
49925: PPUSH
49926: LD_VAR 0 1
49930: PPUSH
49931: CALL_OW 251
49935: PPUSH
49936: LD_INT 10
49938: PPUSH
49939: LD_INT 0
49941: PPUSH
49942: CALL_OW 50
// result := result ^ un ;
49946: LD_ADDR_VAR 0 7
49950: PUSH
49951: LD_VAR 0 7
49955: PUSH
49956: LD_VAR 0 14
49960: ADD
49961: ST_TO_ADDR
// end ;
49962: GO 49840
49964: POP
49965: POP
// end ; end ;
49966: LD_VAR 0 7
49970: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49971: LD_INT 0
49973: PPUSH
49974: PPUSH
49975: PPUSH
49976: PPUSH
49977: PPUSH
49978: PPUSH
49979: PPUSH
49980: PPUSH
49981: PPUSH
49982: PPUSH
49983: PPUSH
49984: PPUSH
49985: PPUSH
49986: PPUSH
49987: PPUSH
49988: PPUSH
// result := false ;
49989: LD_ADDR_VAR 0 3
49993: PUSH
49994: LD_INT 0
49996: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49997: LD_VAR 0 1
50001: NOT
50002: PUSH
50003: LD_VAR 0 1
50007: PPUSH
50008: CALL_OW 266
50012: PUSH
50013: LD_INT 32
50015: PUSH
50016: LD_INT 33
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: IN
50023: NOT
50024: OR
50025: IFFALSE 50029
// exit ;
50027: GO 51138
// nat := GetNation ( tower ) ;
50029: LD_ADDR_VAR 0 12
50033: PUSH
50034: LD_VAR 0 1
50038: PPUSH
50039: CALL_OW 248
50043: ST_TO_ADDR
// side := GetSide ( tower ) ;
50044: LD_ADDR_VAR 0 16
50048: PUSH
50049: LD_VAR 0 1
50053: PPUSH
50054: CALL_OW 255
50058: ST_TO_ADDR
// x := GetX ( tower ) ;
50059: LD_ADDR_VAR 0 10
50063: PUSH
50064: LD_VAR 0 1
50068: PPUSH
50069: CALL_OW 250
50073: ST_TO_ADDR
// y := GetY ( tower ) ;
50074: LD_ADDR_VAR 0 11
50078: PUSH
50079: LD_VAR 0 1
50083: PPUSH
50084: CALL_OW 251
50088: ST_TO_ADDR
// if not x or not y then
50089: LD_VAR 0 10
50093: NOT
50094: PUSH
50095: LD_VAR 0 11
50099: NOT
50100: OR
50101: IFFALSE 50105
// exit ;
50103: GO 51138
// weapon := 0 ;
50105: LD_ADDR_VAR 0 18
50109: PUSH
50110: LD_INT 0
50112: ST_TO_ADDR
// fac_list := [ ] ;
50113: LD_ADDR_VAR 0 17
50117: PUSH
50118: EMPTY
50119: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50120: LD_ADDR_VAR 0 6
50124: PUSH
50125: LD_VAR 0 1
50129: PPUSH
50130: CALL_OW 274
50134: PPUSH
50135: LD_VAR 0 2
50139: PPUSH
50140: LD_INT 0
50142: PPUSH
50143: CALL 47709 0 3
50147: PPUSH
50148: LD_INT 30
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PPUSH
50158: CALL_OW 72
50162: ST_TO_ADDR
// if not factories then
50163: LD_VAR 0 6
50167: NOT
50168: IFFALSE 50172
// exit ;
50170: GO 51138
// for i in factories do
50172: LD_ADDR_VAR 0 8
50176: PUSH
50177: LD_VAR 0 6
50181: PUSH
50182: FOR_IN
50183: IFFALSE 50208
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50185: LD_ADDR_VAR 0 17
50189: PUSH
50190: LD_VAR 0 17
50194: PUSH
50195: LD_VAR 0 8
50199: PPUSH
50200: CALL_OW 478
50204: UNION
50205: ST_TO_ADDR
50206: GO 50182
50208: POP
50209: POP
// if not fac_list then
50210: LD_VAR 0 17
50214: NOT
50215: IFFALSE 50219
// exit ;
50217: GO 51138
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50219: LD_ADDR_VAR 0 5
50223: PUSH
50224: LD_INT 4
50226: PUSH
50227: LD_INT 5
50229: PUSH
50230: LD_INT 9
50232: PUSH
50233: LD_INT 10
50235: PUSH
50236: LD_INT 6
50238: PUSH
50239: LD_INT 7
50241: PUSH
50242: LD_INT 11
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 27
50256: PUSH
50257: LD_INT 28
50259: PUSH
50260: LD_INT 26
50262: PUSH
50263: LD_INT 30
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 43
50274: PUSH
50275: LD_INT 44
50277: PUSH
50278: LD_INT 46
50280: PUSH
50281: LD_INT 45
50283: PUSH
50284: LD_INT 47
50286: PUSH
50287: LD_INT 49
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: PUSH
50303: LD_VAR 0 12
50307: ARRAY
50308: ST_TO_ADDR
// list := list isect fac_list ;
50309: LD_ADDR_VAR 0 5
50313: PUSH
50314: LD_VAR 0 5
50318: PUSH
50319: LD_VAR 0 17
50323: ISECT
50324: ST_TO_ADDR
// if not list then
50325: LD_VAR 0 5
50329: NOT
50330: IFFALSE 50334
// exit ;
50332: GO 51138
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50334: LD_VAR 0 12
50338: PUSH
50339: LD_INT 3
50341: EQUAL
50342: PUSH
50343: LD_INT 49
50345: PUSH
50346: LD_VAR 0 5
50350: IN
50351: AND
50352: PUSH
50353: LD_INT 31
50355: PPUSH
50356: LD_VAR 0 16
50360: PPUSH
50361: CALL_OW 321
50365: PUSH
50366: LD_INT 2
50368: EQUAL
50369: AND
50370: IFFALSE 50430
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50372: LD_INT 22
50374: PUSH
50375: LD_VAR 0 16
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 35
50386: PUSH
50387: LD_INT 49
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 91
50396: PUSH
50397: LD_VAR 0 1
50401: PUSH
50402: LD_INT 10
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: PPUSH
50415: CALL_OW 69
50419: NOT
50420: IFFALSE 50430
// weapon := ru_time_lapser ;
50422: LD_ADDR_VAR 0 18
50426: PUSH
50427: LD_INT 49
50429: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50430: LD_VAR 0 12
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: IN
50445: PUSH
50446: LD_INT 11
50448: PUSH
50449: LD_VAR 0 5
50453: IN
50454: PUSH
50455: LD_INT 30
50457: PUSH
50458: LD_VAR 0 5
50462: IN
50463: OR
50464: AND
50465: PUSH
50466: LD_INT 6
50468: PPUSH
50469: LD_VAR 0 16
50473: PPUSH
50474: CALL_OW 321
50478: PUSH
50479: LD_INT 2
50481: EQUAL
50482: AND
50483: IFFALSE 50648
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50485: LD_INT 22
50487: PUSH
50488: LD_VAR 0 16
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 35
50502: PUSH
50503: LD_INT 11
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 35
50512: PUSH
50513: LD_INT 30
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 91
50527: PUSH
50528: LD_VAR 0 1
50532: PUSH
50533: LD_INT 18
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: PPUSH
50546: CALL_OW 69
50550: NOT
50551: PUSH
50552: LD_INT 22
50554: PUSH
50555: LD_VAR 0 16
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 30
50569: PUSH
50570: LD_INT 32
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 30
50579: PUSH
50580: LD_INT 33
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 91
50594: PUSH
50595: LD_VAR 0 1
50599: PUSH
50600: LD_INT 12
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: PUSH
50613: EMPTY
50614: LIST
50615: PPUSH
50616: CALL_OW 69
50620: PUSH
50621: LD_INT 2
50623: GREATER
50624: AND
50625: IFFALSE 50648
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50627: LD_ADDR_VAR 0 18
50631: PUSH
50632: LD_INT 11
50634: PUSH
50635: LD_INT 30
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_VAR 0 12
50646: ARRAY
50647: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50648: LD_VAR 0 18
50652: NOT
50653: PUSH
50654: LD_INT 40
50656: PPUSH
50657: LD_VAR 0 16
50661: PPUSH
50662: CALL_OW 321
50666: PUSH
50667: LD_INT 2
50669: EQUAL
50670: AND
50671: PUSH
50672: LD_INT 7
50674: PUSH
50675: LD_VAR 0 5
50679: IN
50680: PUSH
50681: LD_INT 28
50683: PUSH
50684: LD_VAR 0 5
50688: IN
50689: OR
50690: PUSH
50691: LD_INT 45
50693: PUSH
50694: LD_VAR 0 5
50698: IN
50699: OR
50700: AND
50701: IFFALSE 50955
// begin hex := GetHexInfo ( x , y ) ;
50703: LD_ADDR_VAR 0 4
50707: PUSH
50708: LD_VAR 0 10
50712: PPUSH
50713: LD_VAR 0 11
50717: PPUSH
50718: CALL_OW 546
50722: ST_TO_ADDR
// if hex [ 1 ] then
50723: LD_VAR 0 4
50727: PUSH
50728: LD_INT 1
50730: ARRAY
50731: IFFALSE 50735
// exit ;
50733: GO 51138
// height := hex [ 2 ] ;
50735: LD_ADDR_VAR 0 15
50739: PUSH
50740: LD_VAR 0 4
50744: PUSH
50745: LD_INT 2
50747: ARRAY
50748: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50749: LD_ADDR_VAR 0 14
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: LD_INT 5
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: ST_TO_ADDR
// for i in tmp do
50772: LD_ADDR_VAR 0 8
50776: PUSH
50777: LD_VAR 0 14
50781: PUSH
50782: FOR_IN
50783: IFFALSE 50953
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50785: LD_ADDR_VAR 0 9
50789: PUSH
50790: LD_VAR 0 10
50794: PPUSH
50795: LD_VAR 0 8
50799: PPUSH
50800: LD_INT 5
50802: PPUSH
50803: CALL_OW 272
50807: PUSH
50808: LD_VAR 0 11
50812: PPUSH
50813: LD_VAR 0 8
50817: PPUSH
50818: LD_INT 5
50820: PPUSH
50821: CALL_OW 273
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50830: LD_VAR 0 9
50834: PUSH
50835: LD_INT 1
50837: ARRAY
50838: PPUSH
50839: LD_VAR 0 9
50843: PUSH
50844: LD_INT 2
50846: ARRAY
50847: PPUSH
50848: CALL_OW 488
50852: IFFALSE 50951
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50854: LD_ADDR_VAR 0 4
50858: PUSH
50859: LD_VAR 0 9
50863: PUSH
50864: LD_INT 1
50866: ARRAY
50867: PPUSH
50868: LD_VAR 0 9
50872: PUSH
50873: LD_INT 2
50875: ARRAY
50876: PPUSH
50877: CALL_OW 546
50881: ST_TO_ADDR
// if hex [ 1 ] then
50882: LD_VAR 0 4
50886: PUSH
50887: LD_INT 1
50889: ARRAY
50890: IFFALSE 50894
// continue ;
50892: GO 50782
// h := hex [ 2 ] ;
50894: LD_ADDR_VAR 0 13
50898: PUSH
50899: LD_VAR 0 4
50903: PUSH
50904: LD_INT 2
50906: ARRAY
50907: ST_TO_ADDR
// if h + 7 < height then
50908: LD_VAR 0 13
50912: PUSH
50913: LD_INT 7
50915: PLUS
50916: PUSH
50917: LD_VAR 0 15
50921: LESS
50922: IFFALSE 50951
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50924: LD_ADDR_VAR 0 18
50928: PUSH
50929: LD_INT 7
50931: PUSH
50932: LD_INT 28
50934: PUSH
50935: LD_INT 45
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: LIST
50942: PUSH
50943: LD_VAR 0 12
50947: ARRAY
50948: ST_TO_ADDR
// break ;
50949: GO 50953
// end ; end ; end ;
50951: GO 50782
50953: POP
50954: POP
// end ; if not weapon then
50955: LD_VAR 0 18
50959: NOT
50960: IFFALSE 51020
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50962: LD_ADDR_VAR 0 5
50966: PUSH
50967: LD_VAR 0 5
50971: PUSH
50972: LD_INT 11
50974: PUSH
50975: LD_INT 30
50977: PUSH
50978: LD_INT 49
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: DIFF
50986: ST_TO_ADDR
// if not list then
50987: LD_VAR 0 5
50991: NOT
50992: IFFALSE 50996
// exit ;
50994: GO 51138
// weapon := list [ rand ( 1 , list ) ] ;
50996: LD_ADDR_VAR 0 18
51000: PUSH
51001: LD_VAR 0 5
51005: PUSH
51006: LD_INT 1
51008: PPUSH
51009: LD_VAR 0 5
51013: PPUSH
51014: CALL_OW 12
51018: ARRAY
51019: ST_TO_ADDR
// end ; if weapon then
51020: LD_VAR 0 18
51024: IFFALSE 51138
// begin tmp := CostOfWeapon ( weapon ) ;
51026: LD_ADDR_VAR 0 14
51030: PUSH
51031: LD_VAR 0 18
51035: PPUSH
51036: CALL_OW 451
51040: ST_TO_ADDR
// j := GetBase ( tower ) ;
51041: LD_ADDR_VAR 0 9
51045: PUSH
51046: LD_VAR 0 1
51050: PPUSH
51051: CALL_OW 274
51055: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51056: LD_VAR 0 9
51060: PPUSH
51061: LD_INT 1
51063: PPUSH
51064: CALL_OW 275
51068: PUSH
51069: LD_VAR 0 14
51073: PUSH
51074: LD_INT 1
51076: ARRAY
51077: GREATEREQUAL
51078: PUSH
51079: LD_VAR 0 9
51083: PPUSH
51084: LD_INT 2
51086: PPUSH
51087: CALL_OW 275
51091: PUSH
51092: LD_VAR 0 14
51096: PUSH
51097: LD_INT 2
51099: ARRAY
51100: GREATEREQUAL
51101: AND
51102: PUSH
51103: LD_VAR 0 9
51107: PPUSH
51108: LD_INT 3
51110: PPUSH
51111: CALL_OW 275
51115: PUSH
51116: LD_VAR 0 14
51120: PUSH
51121: LD_INT 3
51123: ARRAY
51124: GREATEREQUAL
51125: AND
51126: IFFALSE 51138
// result := weapon ;
51128: LD_ADDR_VAR 0 3
51132: PUSH
51133: LD_VAR 0 18
51137: ST_TO_ADDR
// end ; end ;
51138: LD_VAR 0 3
51142: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51143: LD_INT 0
51145: PPUSH
51146: PPUSH
// result := true ;
51147: LD_ADDR_VAR 0 3
51151: PUSH
51152: LD_INT 1
51154: ST_TO_ADDR
// if array1 = array2 then
51155: LD_VAR 0 1
51159: PUSH
51160: LD_VAR 0 2
51164: EQUAL
51165: IFFALSE 51225
// begin for i = 1 to array1 do
51167: LD_ADDR_VAR 0 4
51171: PUSH
51172: DOUBLE
51173: LD_INT 1
51175: DEC
51176: ST_TO_ADDR
51177: LD_VAR 0 1
51181: PUSH
51182: FOR_TO
51183: IFFALSE 51221
// if array1 [ i ] <> array2 [ i ] then
51185: LD_VAR 0 1
51189: PUSH
51190: LD_VAR 0 4
51194: ARRAY
51195: PUSH
51196: LD_VAR 0 2
51200: PUSH
51201: LD_VAR 0 4
51205: ARRAY
51206: NONEQUAL
51207: IFFALSE 51219
// begin result := false ;
51209: LD_ADDR_VAR 0 3
51213: PUSH
51214: LD_INT 0
51216: ST_TO_ADDR
// break ;
51217: GO 51221
// end ;
51219: GO 51182
51221: POP
51222: POP
// end else
51223: GO 51233
// result := false ;
51225: LD_ADDR_VAR 0 3
51229: PUSH
51230: LD_INT 0
51232: ST_TO_ADDR
// end ;
51233: LD_VAR 0 3
51237: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51238: LD_INT 0
51240: PPUSH
51241: PPUSH
// if not array1 or not array2 then
51242: LD_VAR 0 1
51246: NOT
51247: PUSH
51248: LD_VAR 0 2
51252: NOT
51253: OR
51254: IFFALSE 51258
// exit ;
51256: GO 51322
// result := true ;
51258: LD_ADDR_VAR 0 3
51262: PUSH
51263: LD_INT 1
51265: ST_TO_ADDR
// for i = 1 to array1 do
51266: LD_ADDR_VAR 0 4
51270: PUSH
51271: DOUBLE
51272: LD_INT 1
51274: DEC
51275: ST_TO_ADDR
51276: LD_VAR 0 1
51280: PUSH
51281: FOR_TO
51282: IFFALSE 51320
// if array1 [ i ] <> array2 [ i ] then
51284: LD_VAR 0 1
51288: PUSH
51289: LD_VAR 0 4
51293: ARRAY
51294: PUSH
51295: LD_VAR 0 2
51299: PUSH
51300: LD_VAR 0 4
51304: ARRAY
51305: NONEQUAL
51306: IFFALSE 51318
// begin result := false ;
51308: LD_ADDR_VAR 0 3
51312: PUSH
51313: LD_INT 0
51315: ST_TO_ADDR
// break ;
51316: GO 51320
// end ;
51318: GO 51281
51320: POP
51321: POP
// end ;
51322: LD_VAR 0 3
51326: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51327: LD_INT 0
51329: PPUSH
51330: PPUSH
51331: PPUSH
// pom := GetBase ( fac ) ;
51332: LD_ADDR_VAR 0 5
51336: PUSH
51337: LD_VAR 0 1
51341: PPUSH
51342: CALL_OW 274
51346: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51347: LD_ADDR_VAR 0 4
51351: PUSH
51352: LD_VAR 0 2
51356: PUSH
51357: LD_INT 1
51359: ARRAY
51360: PPUSH
51361: LD_VAR 0 2
51365: PUSH
51366: LD_INT 2
51368: ARRAY
51369: PPUSH
51370: LD_VAR 0 2
51374: PUSH
51375: LD_INT 3
51377: ARRAY
51378: PPUSH
51379: LD_VAR 0 2
51383: PUSH
51384: LD_INT 4
51386: ARRAY
51387: PPUSH
51388: CALL_OW 449
51392: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51393: LD_ADDR_VAR 0 3
51397: PUSH
51398: LD_VAR 0 5
51402: PPUSH
51403: LD_INT 1
51405: PPUSH
51406: CALL_OW 275
51410: PUSH
51411: LD_VAR 0 4
51415: PUSH
51416: LD_INT 1
51418: ARRAY
51419: GREATEREQUAL
51420: PUSH
51421: LD_VAR 0 5
51425: PPUSH
51426: LD_INT 2
51428: PPUSH
51429: CALL_OW 275
51433: PUSH
51434: LD_VAR 0 4
51438: PUSH
51439: LD_INT 2
51441: ARRAY
51442: GREATEREQUAL
51443: AND
51444: PUSH
51445: LD_VAR 0 5
51449: PPUSH
51450: LD_INT 3
51452: PPUSH
51453: CALL_OW 275
51457: PUSH
51458: LD_VAR 0 4
51462: PUSH
51463: LD_INT 3
51465: ARRAY
51466: GREATEREQUAL
51467: AND
51468: ST_TO_ADDR
// end ;
51469: LD_VAR 0 3
51473: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51474: LD_INT 0
51476: PPUSH
51477: PPUSH
51478: PPUSH
51479: PPUSH
// pom := GetBase ( building ) ;
51480: LD_ADDR_VAR 0 3
51484: PUSH
51485: LD_VAR 0 1
51489: PPUSH
51490: CALL_OW 274
51494: ST_TO_ADDR
// if not pom then
51495: LD_VAR 0 3
51499: NOT
51500: IFFALSE 51504
// exit ;
51502: GO 51674
// btype := GetBType ( building ) ;
51504: LD_ADDR_VAR 0 5
51508: PUSH
51509: LD_VAR 0 1
51513: PPUSH
51514: CALL_OW 266
51518: ST_TO_ADDR
// if btype = b_armoury then
51519: LD_VAR 0 5
51523: PUSH
51524: LD_INT 4
51526: EQUAL
51527: IFFALSE 51537
// btype := b_barracks ;
51529: LD_ADDR_VAR 0 5
51533: PUSH
51534: LD_INT 5
51536: ST_TO_ADDR
// if btype = b_depot then
51537: LD_VAR 0 5
51541: PUSH
51542: LD_INT 0
51544: EQUAL
51545: IFFALSE 51555
// btype := b_warehouse ;
51547: LD_ADDR_VAR 0 5
51551: PUSH
51552: LD_INT 1
51554: ST_TO_ADDR
// if btype = b_workshop then
51555: LD_VAR 0 5
51559: PUSH
51560: LD_INT 2
51562: EQUAL
51563: IFFALSE 51573
// btype := b_factory ;
51565: LD_ADDR_VAR 0 5
51569: PUSH
51570: LD_INT 3
51572: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51573: LD_ADDR_VAR 0 4
51577: PUSH
51578: LD_VAR 0 5
51582: PPUSH
51583: LD_VAR 0 1
51587: PPUSH
51588: CALL_OW 248
51592: PPUSH
51593: CALL_OW 450
51597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51598: LD_ADDR_VAR 0 2
51602: PUSH
51603: LD_VAR 0 3
51607: PPUSH
51608: LD_INT 1
51610: PPUSH
51611: CALL_OW 275
51615: PUSH
51616: LD_VAR 0 4
51620: PUSH
51621: LD_INT 1
51623: ARRAY
51624: GREATEREQUAL
51625: PUSH
51626: LD_VAR 0 3
51630: PPUSH
51631: LD_INT 2
51633: PPUSH
51634: CALL_OW 275
51638: PUSH
51639: LD_VAR 0 4
51643: PUSH
51644: LD_INT 2
51646: ARRAY
51647: GREATEREQUAL
51648: AND
51649: PUSH
51650: LD_VAR 0 3
51654: PPUSH
51655: LD_INT 3
51657: PPUSH
51658: CALL_OW 275
51662: PUSH
51663: LD_VAR 0 4
51667: PUSH
51668: LD_INT 3
51670: ARRAY
51671: GREATEREQUAL
51672: AND
51673: ST_TO_ADDR
// end ;
51674: LD_VAR 0 2
51678: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51679: LD_INT 0
51681: PPUSH
51682: PPUSH
51683: PPUSH
// pom := GetBase ( building ) ;
51684: LD_ADDR_VAR 0 4
51688: PUSH
51689: LD_VAR 0 1
51693: PPUSH
51694: CALL_OW 274
51698: ST_TO_ADDR
// if not pom then
51699: LD_VAR 0 4
51703: NOT
51704: IFFALSE 51708
// exit ;
51706: GO 51809
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51708: LD_ADDR_VAR 0 5
51712: PUSH
51713: LD_VAR 0 2
51717: PPUSH
51718: LD_VAR 0 1
51722: PPUSH
51723: CALL_OW 248
51727: PPUSH
51728: CALL_OW 450
51732: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51733: LD_ADDR_VAR 0 3
51737: PUSH
51738: LD_VAR 0 4
51742: PPUSH
51743: LD_INT 1
51745: PPUSH
51746: CALL_OW 275
51750: PUSH
51751: LD_VAR 0 5
51755: PUSH
51756: LD_INT 1
51758: ARRAY
51759: GREATEREQUAL
51760: PUSH
51761: LD_VAR 0 4
51765: PPUSH
51766: LD_INT 2
51768: PPUSH
51769: CALL_OW 275
51773: PUSH
51774: LD_VAR 0 5
51778: PUSH
51779: LD_INT 2
51781: ARRAY
51782: GREATEREQUAL
51783: AND
51784: PUSH
51785: LD_VAR 0 4
51789: PPUSH
51790: LD_INT 3
51792: PPUSH
51793: CALL_OW 275
51797: PUSH
51798: LD_VAR 0 5
51802: PUSH
51803: LD_INT 3
51805: ARRAY
51806: GREATEREQUAL
51807: AND
51808: ST_TO_ADDR
// end ;
51809: LD_VAR 0 3
51813: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51814: LD_INT 0
51816: PPUSH
51817: PPUSH
51818: PPUSH
51819: PPUSH
51820: PPUSH
51821: PPUSH
51822: PPUSH
51823: PPUSH
51824: PPUSH
51825: PPUSH
51826: PPUSH
// result := false ;
51827: LD_ADDR_VAR 0 8
51831: PUSH
51832: LD_INT 0
51834: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51835: LD_VAR 0 5
51839: NOT
51840: PUSH
51841: LD_VAR 0 1
51845: NOT
51846: OR
51847: PUSH
51848: LD_VAR 0 2
51852: NOT
51853: OR
51854: PUSH
51855: LD_VAR 0 3
51859: NOT
51860: OR
51861: IFFALSE 51865
// exit ;
51863: GO 52679
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51865: LD_ADDR_VAR 0 14
51869: PUSH
51870: LD_VAR 0 1
51874: PPUSH
51875: LD_VAR 0 2
51879: PPUSH
51880: LD_VAR 0 3
51884: PPUSH
51885: LD_VAR 0 4
51889: PPUSH
51890: LD_VAR 0 5
51894: PUSH
51895: LD_INT 1
51897: ARRAY
51898: PPUSH
51899: CALL_OW 248
51903: PPUSH
51904: LD_INT 0
51906: PPUSH
51907: CALL 53916 0 6
51911: ST_TO_ADDR
// if not hexes then
51912: LD_VAR 0 14
51916: NOT
51917: IFFALSE 51921
// exit ;
51919: GO 52679
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51921: LD_ADDR_VAR 0 17
51925: PUSH
51926: LD_VAR 0 5
51930: PPUSH
51931: LD_INT 22
51933: PUSH
51934: LD_VAR 0 13
51938: PPUSH
51939: CALL_OW 255
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: LD_INT 30
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 30
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PPUSH
51980: CALL_OW 72
51984: ST_TO_ADDR
// for i = 1 to hexes do
51985: LD_ADDR_VAR 0 9
51989: PUSH
51990: DOUBLE
51991: LD_INT 1
51993: DEC
51994: ST_TO_ADDR
51995: LD_VAR 0 14
51999: PUSH
52000: FOR_TO
52001: IFFALSE 52677
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52003: LD_ADDR_VAR 0 13
52007: PUSH
52008: LD_VAR 0 14
52012: PUSH
52013: LD_VAR 0 9
52017: ARRAY
52018: PUSH
52019: LD_INT 1
52021: ARRAY
52022: PPUSH
52023: LD_VAR 0 14
52027: PUSH
52028: LD_VAR 0 9
52032: ARRAY
52033: PUSH
52034: LD_INT 2
52036: ARRAY
52037: PPUSH
52038: CALL_OW 428
52042: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52043: LD_VAR 0 14
52047: PUSH
52048: LD_VAR 0 9
52052: ARRAY
52053: PUSH
52054: LD_INT 1
52056: ARRAY
52057: PPUSH
52058: LD_VAR 0 14
52062: PUSH
52063: LD_VAR 0 9
52067: ARRAY
52068: PUSH
52069: LD_INT 2
52071: ARRAY
52072: PPUSH
52073: CALL_OW 351
52077: PUSH
52078: LD_VAR 0 14
52082: PUSH
52083: LD_VAR 0 9
52087: ARRAY
52088: PUSH
52089: LD_INT 1
52091: ARRAY
52092: PPUSH
52093: LD_VAR 0 14
52097: PUSH
52098: LD_VAR 0 9
52102: ARRAY
52103: PUSH
52104: LD_INT 2
52106: ARRAY
52107: PPUSH
52108: CALL_OW 488
52112: NOT
52113: OR
52114: PUSH
52115: LD_VAR 0 13
52119: PPUSH
52120: CALL_OW 247
52124: PUSH
52125: LD_INT 3
52127: EQUAL
52128: OR
52129: IFFALSE 52135
// exit ;
52131: POP
52132: POP
52133: GO 52679
// if not tmp then
52135: LD_VAR 0 13
52139: NOT
52140: IFFALSE 52144
// continue ;
52142: GO 52000
// result := true ;
52144: LD_ADDR_VAR 0 8
52148: PUSH
52149: LD_INT 1
52151: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52152: LD_VAR 0 6
52156: PUSH
52157: LD_VAR 0 13
52161: PPUSH
52162: CALL_OW 247
52166: PUSH
52167: LD_INT 2
52169: EQUAL
52170: AND
52171: PUSH
52172: LD_VAR 0 13
52176: PPUSH
52177: CALL_OW 263
52181: PUSH
52182: LD_INT 1
52184: EQUAL
52185: AND
52186: IFFALSE 52350
// begin if IsDrivenBy ( tmp ) then
52188: LD_VAR 0 13
52192: PPUSH
52193: CALL_OW 311
52197: IFFALSE 52201
// continue ;
52199: GO 52000
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52201: LD_VAR 0 6
52205: PPUSH
52206: LD_INT 3
52208: PUSH
52209: LD_INT 60
52211: PUSH
52212: EMPTY
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: LD_INT 55
52224: PUSH
52225: EMPTY
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PPUSH
52236: CALL_OW 72
52240: IFFALSE 52348
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52242: LD_ADDR_VAR 0 18
52246: PUSH
52247: LD_VAR 0 6
52251: PPUSH
52252: LD_INT 3
52254: PUSH
52255: LD_INT 60
52257: PUSH
52258: EMPTY
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: LD_INT 55
52270: PUSH
52271: EMPTY
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PPUSH
52282: CALL_OW 72
52286: PUSH
52287: LD_INT 1
52289: ARRAY
52290: ST_TO_ADDR
// if IsInUnit ( driver ) then
52291: LD_VAR 0 18
52295: PPUSH
52296: CALL_OW 310
52300: IFFALSE 52311
// ComExit ( driver ) ;
52302: LD_VAR 0 18
52306: PPUSH
52307: CALL 77621 0 1
// AddComEnterUnit ( driver , tmp ) ;
52311: LD_VAR 0 18
52315: PPUSH
52316: LD_VAR 0 13
52320: PPUSH
52321: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52325: LD_VAR 0 18
52329: PPUSH
52330: LD_VAR 0 7
52334: PPUSH
52335: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52339: LD_VAR 0 18
52343: PPUSH
52344: CALL_OW 181
// end ; continue ;
52348: GO 52000
// end ; if not cleaners or not tmp in cleaners then
52350: LD_VAR 0 6
52354: NOT
52355: PUSH
52356: LD_VAR 0 13
52360: PUSH
52361: LD_VAR 0 6
52365: IN
52366: NOT
52367: OR
52368: IFFALSE 52675
// begin if dep then
52370: LD_VAR 0 17
52374: IFFALSE 52510
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52376: LD_ADDR_VAR 0 16
52380: PUSH
52381: LD_VAR 0 17
52385: PUSH
52386: LD_INT 1
52388: ARRAY
52389: PPUSH
52390: CALL_OW 250
52394: PPUSH
52395: LD_VAR 0 17
52399: PUSH
52400: LD_INT 1
52402: ARRAY
52403: PPUSH
52404: CALL_OW 254
52408: PPUSH
52409: LD_INT 5
52411: PPUSH
52412: CALL_OW 272
52416: PUSH
52417: LD_VAR 0 17
52421: PUSH
52422: LD_INT 1
52424: ARRAY
52425: PPUSH
52426: CALL_OW 251
52430: PPUSH
52431: LD_VAR 0 17
52435: PUSH
52436: LD_INT 1
52438: ARRAY
52439: PPUSH
52440: CALL_OW 254
52444: PPUSH
52445: LD_INT 5
52447: PPUSH
52448: CALL_OW 273
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52457: LD_VAR 0 16
52461: PUSH
52462: LD_INT 1
52464: ARRAY
52465: PPUSH
52466: LD_VAR 0 16
52470: PUSH
52471: LD_INT 2
52473: ARRAY
52474: PPUSH
52475: CALL_OW 488
52479: IFFALSE 52510
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52481: LD_VAR 0 13
52485: PPUSH
52486: LD_VAR 0 16
52490: PUSH
52491: LD_INT 1
52493: ARRAY
52494: PPUSH
52495: LD_VAR 0 16
52499: PUSH
52500: LD_INT 2
52502: ARRAY
52503: PPUSH
52504: CALL_OW 111
// continue ;
52508: GO 52000
// end ; end ; r := GetDir ( tmp ) ;
52510: LD_ADDR_VAR 0 15
52514: PUSH
52515: LD_VAR 0 13
52519: PPUSH
52520: CALL_OW 254
52524: ST_TO_ADDR
// if r = 5 then
52525: LD_VAR 0 15
52529: PUSH
52530: LD_INT 5
52532: EQUAL
52533: IFFALSE 52543
// r := 0 ;
52535: LD_ADDR_VAR 0 15
52539: PUSH
52540: LD_INT 0
52542: ST_TO_ADDR
// for j = r to 5 do
52543: LD_ADDR_VAR 0 10
52547: PUSH
52548: DOUBLE
52549: LD_VAR 0 15
52553: DEC
52554: ST_TO_ADDR
52555: LD_INT 5
52557: PUSH
52558: FOR_TO
52559: IFFALSE 52673
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52561: LD_ADDR_VAR 0 11
52565: PUSH
52566: LD_VAR 0 13
52570: PPUSH
52571: CALL_OW 250
52575: PPUSH
52576: LD_VAR 0 10
52580: PPUSH
52581: LD_INT 2
52583: PPUSH
52584: CALL_OW 272
52588: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52589: LD_ADDR_VAR 0 12
52593: PUSH
52594: LD_VAR 0 13
52598: PPUSH
52599: CALL_OW 251
52603: PPUSH
52604: LD_VAR 0 10
52608: PPUSH
52609: LD_INT 2
52611: PPUSH
52612: CALL_OW 273
52616: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52617: LD_VAR 0 11
52621: PPUSH
52622: LD_VAR 0 12
52626: PPUSH
52627: CALL_OW 488
52631: PUSH
52632: LD_VAR 0 11
52636: PPUSH
52637: LD_VAR 0 12
52641: PPUSH
52642: CALL_OW 428
52646: NOT
52647: AND
52648: IFFALSE 52671
// begin ComMoveXY ( tmp , _x , _y ) ;
52650: LD_VAR 0 13
52654: PPUSH
52655: LD_VAR 0 11
52659: PPUSH
52660: LD_VAR 0 12
52664: PPUSH
52665: CALL_OW 111
// break ;
52669: GO 52673
// end ; end ;
52671: GO 52558
52673: POP
52674: POP
// end ; end ;
52675: GO 52000
52677: POP
52678: POP
// end ;
52679: LD_VAR 0 8
52683: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52684: LD_INT 0
52686: PPUSH
// result := true ;
52687: LD_ADDR_VAR 0 3
52691: PUSH
52692: LD_INT 1
52694: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52695: LD_VAR 0 2
52699: PUSH
52700: LD_INT 24
52702: DOUBLE
52703: EQUAL
52704: IFTRUE 52714
52706: LD_INT 33
52708: DOUBLE
52709: EQUAL
52710: IFTRUE 52714
52712: GO 52739
52714: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52715: LD_ADDR_VAR 0 3
52719: PUSH
52720: LD_INT 32
52722: PPUSH
52723: LD_VAR 0 1
52727: PPUSH
52728: CALL_OW 321
52732: PUSH
52733: LD_INT 2
52735: EQUAL
52736: ST_TO_ADDR
52737: GO 53059
52739: LD_INT 20
52741: DOUBLE
52742: EQUAL
52743: IFTRUE 52747
52745: GO 52772
52747: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52748: LD_ADDR_VAR 0 3
52752: PUSH
52753: LD_INT 6
52755: PPUSH
52756: LD_VAR 0 1
52760: PPUSH
52761: CALL_OW 321
52765: PUSH
52766: LD_INT 2
52768: EQUAL
52769: ST_TO_ADDR
52770: GO 53059
52772: LD_INT 22
52774: DOUBLE
52775: EQUAL
52776: IFTRUE 52786
52778: LD_INT 36
52780: DOUBLE
52781: EQUAL
52782: IFTRUE 52786
52784: GO 52811
52786: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52787: LD_ADDR_VAR 0 3
52791: PUSH
52792: LD_INT 15
52794: PPUSH
52795: LD_VAR 0 1
52799: PPUSH
52800: CALL_OW 321
52804: PUSH
52805: LD_INT 2
52807: EQUAL
52808: ST_TO_ADDR
52809: GO 53059
52811: LD_INT 30
52813: DOUBLE
52814: EQUAL
52815: IFTRUE 52819
52817: GO 52844
52819: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52820: LD_ADDR_VAR 0 3
52824: PUSH
52825: LD_INT 20
52827: PPUSH
52828: LD_VAR 0 1
52832: PPUSH
52833: CALL_OW 321
52837: PUSH
52838: LD_INT 2
52840: EQUAL
52841: ST_TO_ADDR
52842: GO 53059
52844: LD_INT 28
52846: DOUBLE
52847: EQUAL
52848: IFTRUE 52858
52850: LD_INT 21
52852: DOUBLE
52853: EQUAL
52854: IFTRUE 52858
52856: GO 52883
52858: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52859: LD_ADDR_VAR 0 3
52863: PUSH
52864: LD_INT 21
52866: PPUSH
52867: LD_VAR 0 1
52871: PPUSH
52872: CALL_OW 321
52876: PUSH
52877: LD_INT 2
52879: EQUAL
52880: ST_TO_ADDR
52881: GO 53059
52883: LD_INT 16
52885: DOUBLE
52886: EQUAL
52887: IFTRUE 52891
52889: GO 52918
52891: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52892: LD_ADDR_VAR 0 3
52896: PUSH
52897: LD_EXP 61
52901: PPUSH
52902: LD_VAR 0 1
52906: PPUSH
52907: CALL_OW 321
52911: PUSH
52912: LD_INT 2
52914: EQUAL
52915: ST_TO_ADDR
52916: GO 53059
52918: LD_INT 19
52920: DOUBLE
52921: EQUAL
52922: IFTRUE 52932
52924: LD_INT 23
52926: DOUBLE
52927: EQUAL
52928: IFTRUE 52932
52930: GO 52959
52932: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52933: LD_ADDR_VAR 0 3
52937: PUSH
52938: LD_EXP 60
52942: PPUSH
52943: LD_VAR 0 1
52947: PPUSH
52948: CALL_OW 321
52952: PUSH
52953: LD_INT 2
52955: EQUAL
52956: ST_TO_ADDR
52957: GO 53059
52959: LD_INT 17
52961: DOUBLE
52962: EQUAL
52963: IFTRUE 52967
52965: GO 52992
52967: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52968: LD_ADDR_VAR 0 3
52972: PUSH
52973: LD_INT 39
52975: PPUSH
52976: LD_VAR 0 1
52980: PPUSH
52981: CALL_OW 321
52985: PUSH
52986: LD_INT 2
52988: EQUAL
52989: ST_TO_ADDR
52990: GO 53059
52992: LD_INT 18
52994: DOUBLE
52995: EQUAL
52996: IFTRUE 53000
52998: GO 53025
53000: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53001: LD_ADDR_VAR 0 3
53005: PUSH
53006: LD_INT 40
53008: PPUSH
53009: LD_VAR 0 1
53013: PPUSH
53014: CALL_OW 321
53018: PUSH
53019: LD_INT 2
53021: EQUAL
53022: ST_TO_ADDR
53023: GO 53059
53025: LD_INT 27
53027: DOUBLE
53028: EQUAL
53029: IFTRUE 53033
53031: GO 53058
53033: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53034: LD_ADDR_VAR 0 3
53038: PUSH
53039: LD_INT 35
53041: PPUSH
53042: LD_VAR 0 1
53046: PPUSH
53047: CALL_OW 321
53051: PUSH
53052: LD_INT 2
53054: EQUAL
53055: ST_TO_ADDR
53056: GO 53059
53058: POP
// end ;
53059: LD_VAR 0 3
53063: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53064: LD_INT 0
53066: PPUSH
53067: PPUSH
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
53072: PPUSH
53073: PPUSH
53074: PPUSH
53075: PPUSH
53076: PPUSH
// result := false ;
53077: LD_ADDR_VAR 0 6
53081: PUSH
53082: LD_INT 0
53084: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53085: LD_VAR 0 1
53089: NOT
53090: PUSH
53091: LD_VAR 0 1
53095: PPUSH
53096: CALL_OW 266
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: IN
53111: NOT
53112: OR
53113: PUSH
53114: LD_VAR 0 2
53118: NOT
53119: OR
53120: PUSH
53121: LD_VAR 0 5
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: LD_INT 4
53140: PUSH
53141: LD_INT 5
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: IN
53152: NOT
53153: OR
53154: PUSH
53155: LD_VAR 0 3
53159: PPUSH
53160: LD_VAR 0 4
53164: PPUSH
53165: CALL_OW 488
53169: NOT
53170: OR
53171: IFFALSE 53175
// exit ;
53173: GO 53911
// side := GetSide ( depot ) ;
53175: LD_ADDR_VAR 0 9
53179: PUSH
53180: LD_VAR 0 1
53184: PPUSH
53185: CALL_OW 255
53189: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53190: LD_VAR 0 9
53194: PPUSH
53195: LD_VAR 0 2
53199: PPUSH
53200: CALL 52684 0 2
53204: NOT
53205: IFFALSE 53209
// exit ;
53207: GO 53911
// pom := GetBase ( depot ) ;
53209: LD_ADDR_VAR 0 10
53213: PUSH
53214: LD_VAR 0 1
53218: PPUSH
53219: CALL_OW 274
53223: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53224: LD_ADDR_VAR 0 11
53228: PUSH
53229: LD_VAR 0 2
53233: PPUSH
53234: LD_VAR 0 1
53238: PPUSH
53239: CALL_OW 248
53243: PPUSH
53244: CALL_OW 450
53248: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53249: LD_VAR 0 10
53253: PPUSH
53254: LD_INT 1
53256: PPUSH
53257: CALL_OW 275
53261: PUSH
53262: LD_VAR 0 11
53266: PUSH
53267: LD_INT 1
53269: ARRAY
53270: GREATEREQUAL
53271: PUSH
53272: LD_VAR 0 10
53276: PPUSH
53277: LD_INT 2
53279: PPUSH
53280: CALL_OW 275
53284: PUSH
53285: LD_VAR 0 11
53289: PUSH
53290: LD_INT 2
53292: ARRAY
53293: GREATEREQUAL
53294: AND
53295: PUSH
53296: LD_VAR 0 10
53300: PPUSH
53301: LD_INT 3
53303: PPUSH
53304: CALL_OW 275
53308: PUSH
53309: LD_VAR 0 11
53313: PUSH
53314: LD_INT 3
53316: ARRAY
53317: GREATEREQUAL
53318: AND
53319: NOT
53320: IFFALSE 53324
// exit ;
53322: GO 53911
// if GetBType ( depot ) = b_depot then
53324: LD_VAR 0 1
53328: PPUSH
53329: CALL_OW 266
53333: PUSH
53334: LD_INT 0
53336: EQUAL
53337: IFFALSE 53349
// dist := 28 else
53339: LD_ADDR_VAR 0 14
53343: PUSH
53344: LD_INT 28
53346: ST_TO_ADDR
53347: GO 53357
// dist := 36 ;
53349: LD_ADDR_VAR 0 14
53353: PUSH
53354: LD_INT 36
53356: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53357: LD_VAR 0 1
53361: PPUSH
53362: LD_VAR 0 3
53366: PPUSH
53367: LD_VAR 0 4
53371: PPUSH
53372: CALL_OW 297
53376: PUSH
53377: LD_VAR 0 14
53381: GREATER
53382: IFFALSE 53386
// exit ;
53384: GO 53911
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53386: LD_ADDR_VAR 0 12
53390: PUSH
53391: LD_VAR 0 2
53395: PPUSH
53396: LD_VAR 0 3
53400: PPUSH
53401: LD_VAR 0 4
53405: PPUSH
53406: LD_VAR 0 5
53410: PPUSH
53411: LD_VAR 0 1
53415: PPUSH
53416: CALL_OW 248
53420: PPUSH
53421: LD_INT 0
53423: PPUSH
53424: CALL 53916 0 6
53428: ST_TO_ADDR
// if not hexes then
53429: LD_VAR 0 12
53433: NOT
53434: IFFALSE 53438
// exit ;
53436: GO 53911
// hex := GetHexInfo ( x , y ) ;
53438: LD_ADDR_VAR 0 15
53442: PUSH
53443: LD_VAR 0 3
53447: PPUSH
53448: LD_VAR 0 4
53452: PPUSH
53453: CALL_OW 546
53457: ST_TO_ADDR
// if hex [ 1 ] then
53458: LD_VAR 0 15
53462: PUSH
53463: LD_INT 1
53465: ARRAY
53466: IFFALSE 53470
// exit ;
53468: GO 53911
// height := hex [ 2 ] ;
53470: LD_ADDR_VAR 0 13
53474: PUSH
53475: LD_VAR 0 15
53479: PUSH
53480: LD_INT 2
53482: ARRAY
53483: ST_TO_ADDR
// for i = 1 to hexes do
53484: LD_ADDR_VAR 0 7
53488: PUSH
53489: DOUBLE
53490: LD_INT 1
53492: DEC
53493: ST_TO_ADDR
53494: LD_VAR 0 12
53498: PUSH
53499: FOR_TO
53500: IFFALSE 53830
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53502: LD_VAR 0 12
53506: PUSH
53507: LD_VAR 0 7
53511: ARRAY
53512: PUSH
53513: LD_INT 1
53515: ARRAY
53516: PPUSH
53517: LD_VAR 0 12
53521: PUSH
53522: LD_VAR 0 7
53526: ARRAY
53527: PUSH
53528: LD_INT 2
53530: ARRAY
53531: PPUSH
53532: CALL_OW 488
53536: NOT
53537: PUSH
53538: LD_VAR 0 12
53542: PUSH
53543: LD_VAR 0 7
53547: ARRAY
53548: PUSH
53549: LD_INT 1
53551: ARRAY
53552: PPUSH
53553: LD_VAR 0 12
53557: PUSH
53558: LD_VAR 0 7
53562: ARRAY
53563: PUSH
53564: LD_INT 2
53566: ARRAY
53567: PPUSH
53568: CALL_OW 428
53572: PUSH
53573: LD_INT 0
53575: GREATER
53576: OR
53577: PUSH
53578: LD_VAR 0 12
53582: PUSH
53583: LD_VAR 0 7
53587: ARRAY
53588: PUSH
53589: LD_INT 1
53591: ARRAY
53592: PPUSH
53593: LD_VAR 0 12
53597: PUSH
53598: LD_VAR 0 7
53602: ARRAY
53603: PUSH
53604: LD_INT 2
53606: ARRAY
53607: PPUSH
53608: CALL_OW 351
53612: OR
53613: IFFALSE 53619
// exit ;
53615: POP
53616: POP
53617: GO 53911
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53619: LD_ADDR_VAR 0 8
53623: PUSH
53624: LD_VAR 0 12
53628: PUSH
53629: LD_VAR 0 7
53633: ARRAY
53634: PUSH
53635: LD_INT 1
53637: ARRAY
53638: PPUSH
53639: LD_VAR 0 12
53643: PUSH
53644: LD_VAR 0 7
53648: ARRAY
53649: PUSH
53650: LD_INT 2
53652: ARRAY
53653: PPUSH
53654: CALL_OW 546
53658: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53659: LD_VAR 0 8
53663: PUSH
53664: LD_INT 1
53666: ARRAY
53667: PUSH
53668: LD_VAR 0 8
53672: PUSH
53673: LD_INT 2
53675: ARRAY
53676: PUSH
53677: LD_VAR 0 13
53681: PUSH
53682: LD_INT 2
53684: PLUS
53685: GREATER
53686: OR
53687: PUSH
53688: LD_VAR 0 8
53692: PUSH
53693: LD_INT 2
53695: ARRAY
53696: PUSH
53697: LD_VAR 0 13
53701: PUSH
53702: LD_INT 2
53704: MINUS
53705: LESS
53706: OR
53707: PUSH
53708: LD_VAR 0 8
53712: PUSH
53713: LD_INT 3
53715: ARRAY
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 8
53722: PUSH
53723: LD_INT 9
53725: PUSH
53726: LD_INT 10
53728: PUSH
53729: LD_INT 11
53731: PUSH
53732: LD_INT 12
53734: PUSH
53735: LD_INT 13
53737: PUSH
53738: LD_INT 16
53740: PUSH
53741: LD_INT 17
53743: PUSH
53744: LD_INT 18
53746: PUSH
53747: LD_INT 19
53749: PUSH
53750: LD_INT 20
53752: PUSH
53753: LD_INT 21
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: IN
53771: NOT
53772: OR
53773: PUSH
53774: LD_VAR 0 8
53778: PUSH
53779: LD_INT 5
53781: ARRAY
53782: NOT
53783: OR
53784: PUSH
53785: LD_VAR 0 8
53789: PUSH
53790: LD_INT 6
53792: ARRAY
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: LD_INT 7
53802: PUSH
53803: LD_INT 9
53805: PUSH
53806: LD_INT 10
53808: PUSH
53809: LD_INT 11
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: IN
53820: NOT
53821: OR
53822: IFFALSE 53828
// exit ;
53824: POP
53825: POP
53826: GO 53911
// end ;
53828: GO 53499
53830: POP
53831: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53832: LD_VAR 0 9
53836: PPUSH
53837: LD_VAR 0 3
53841: PPUSH
53842: LD_VAR 0 4
53846: PPUSH
53847: LD_INT 20
53849: PPUSH
53850: CALL 45857 0 4
53854: PUSH
53855: LD_INT 4
53857: ARRAY
53858: IFFALSE 53862
// exit ;
53860: GO 53911
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53862: LD_VAR 0 2
53866: PUSH
53867: LD_INT 29
53869: PUSH
53870: LD_INT 30
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: IN
53877: PUSH
53878: LD_VAR 0 3
53882: PPUSH
53883: LD_VAR 0 4
53887: PPUSH
53888: LD_VAR 0 9
53892: PPUSH
53893: CALL_OW 440
53897: NOT
53898: AND
53899: IFFALSE 53903
// exit ;
53901: GO 53911
// result := true ;
53903: LD_ADDR_VAR 0 6
53907: PUSH
53908: LD_INT 1
53910: ST_TO_ADDR
// end ;
53911: LD_VAR 0 6
53915: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53916: LD_INT 0
53918: PPUSH
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
53923: PPUSH
53924: PPUSH
53925: PPUSH
53926: PPUSH
53927: PPUSH
53928: PPUSH
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
53950: PPUSH
53951: PPUSH
53952: PPUSH
53953: PPUSH
53954: PPUSH
53955: PPUSH
53956: PPUSH
53957: PPUSH
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
53962: PPUSH
53963: PPUSH
53964: PPUSH
53965: PPUSH
53966: PPUSH
53967: PPUSH
53968: PPUSH
53969: PPUSH
53970: PPUSH
53971: PPUSH
53972: PPUSH
53973: PPUSH
53974: PPUSH
53975: PPUSH
// result = [ ] ;
53976: LD_ADDR_VAR 0 7
53980: PUSH
53981: EMPTY
53982: ST_TO_ADDR
// temp_list = [ ] ;
53983: LD_ADDR_VAR 0 9
53987: PUSH
53988: EMPTY
53989: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53990: LD_VAR 0 4
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: LD_INT 4
54009: PUSH
54010: LD_INT 5
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: IN
54021: NOT
54022: PUSH
54023: LD_VAR 0 1
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: IN
54038: PUSH
54039: LD_VAR 0 5
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 3
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: LIST
54057: IN
54058: NOT
54059: AND
54060: OR
54061: IFFALSE 54065
// exit ;
54063: GO 72456
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54065: LD_VAR 0 1
54069: PUSH
54070: LD_INT 6
54072: PUSH
54073: LD_INT 7
54075: PUSH
54076: LD_INT 8
54078: PUSH
54079: LD_INT 13
54081: PUSH
54082: LD_INT 12
54084: PUSH
54085: LD_INT 15
54087: PUSH
54088: LD_INT 11
54090: PUSH
54091: LD_INT 14
54093: PUSH
54094: LD_INT 10
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: IN
54108: IFFALSE 54118
// btype = b_lab ;
54110: LD_ADDR_VAR 0 1
54114: PUSH
54115: LD_INT 6
54117: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54118: LD_VAR 0 6
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: LIST
54136: IN
54137: NOT
54138: PUSH
54139: LD_VAR 0 1
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: LD_INT 6
54158: PUSH
54159: LD_INT 36
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: LD_INT 5
54167: PUSH
54168: LD_INT 31
54170: PUSH
54171: LD_INT 32
54173: PUSH
54174: LD_INT 33
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: IN
54190: NOT
54191: PUSH
54192: LD_VAR 0 6
54196: PUSH
54197: LD_INT 1
54199: EQUAL
54200: AND
54201: OR
54202: PUSH
54203: LD_VAR 0 1
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: IN
54218: NOT
54219: PUSH
54220: LD_VAR 0 6
54224: PUSH
54225: LD_INT 2
54227: EQUAL
54228: AND
54229: OR
54230: IFFALSE 54240
// mode = 0 ;
54232: LD_ADDR_VAR 0 6
54236: PUSH
54237: LD_INT 0
54239: ST_TO_ADDR
// case mode of 0 :
54240: LD_VAR 0 6
54244: PUSH
54245: LD_INT 0
54247: DOUBLE
54248: EQUAL
54249: IFTRUE 54253
54251: GO 65706
54253: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54254: LD_ADDR_VAR 0 11
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54447: LD_ADDR_VAR 0 12
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 3
54604: NEG
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54643: LD_ADDR_VAR 0 13
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 3
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: NEG
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 3
54814: NEG
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54842: LD_ADDR_VAR 0 14
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55038: LD_ADDR_VAR 0 15
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 3
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55231: LD_ADDR_VAR 0 16
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55424: LD_ADDR_VAR 0 17
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55654: LD_ADDR_VAR 0 18
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: NEG
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55884: LD_ADDR_VAR 0 19
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56114: LD_ADDR_VAR 0 20
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56344: LD_ADDR_VAR 0 21
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56574: LD_ADDR_VAR 0 22
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56804: LD_ADDR_VAR 0 23
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57084: LD_ADDR_VAR 0 24
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57360: LD_ADDR_VAR 0 25
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 3
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57634: LD_ADDR_VAR 0 26
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57910: LD_ADDR_VAR 0 27
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58190: LD_ADDR_VAR 0 28
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 3
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58472: LD_ADDR_VAR 0 29
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58751: LD_ADDR_VAR 0 30
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59029: LD_ADDR_VAR 0 31
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59307: LD_ADDR_VAR 0 32
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59585: LD_ADDR_VAR 0 33
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: LD_INT 2
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: LD_INT 3
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 3
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: NEG
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59864: LD_ADDR_VAR 0 34
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60144: LD_ADDR_VAR 0 35
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60256: LD_ADDR_VAR 0 36
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60368: LD_ADDR_VAR 0 37
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60480: LD_ADDR_VAR 0 38
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60592: LD_ADDR_VAR 0 39
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60704: LD_ADDR_VAR 0 40
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60816: LD_ADDR_VAR 0 41
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 2
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: NEG
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 3
61113: NEG
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 3
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61166: LD_ADDR_VAR 0 42
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 3
61463: NEG
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: LD_INT 3
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61516: LD_ADDR_VAR 0 43
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: LD_INT 3
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 3
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 3
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 3
61812: NEG
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 3
61823: NEG
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61864: LD_ADDR_VAR 0 44
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 2
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: LD_INT 2
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 3
62138: NEG
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 3
62149: NEG
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 3
62161: NEG
62162: PUSH
62163: LD_INT 2
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62214: LD_ADDR_VAR 0 45
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 2
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: LD_INT 2
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: NEG
62405: PUSH
62406: LD_INT 3
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: LD_INT 2
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: NEG
62524: PUSH
62525: LD_INT 3
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62564: LD_ADDR_VAR 0 46
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 2
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: NEG
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 3
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: LD_INT 3
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 3
62871: NEG
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62912: LD_ADDR_VAR 0 47
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63063: LD_ADDR_VAR 0 48
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: LD_INT 2
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63210: LD_ADDR_VAR 0 49
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63354: LD_ADDR_VAR 0 50
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: NEG
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63498: LD_ADDR_VAR 0 51
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 2
63621: NEG
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63645: LD_ADDR_VAR 0 52
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 1
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63796: LD_ADDR_VAR 0 53
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: NEG
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: LD_INT 2
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: LD_INT 2
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64026: LD_ADDR_VAR 0 54
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: LD_INT 2
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 2
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: LD_INT 2
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 2
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 2
64225: NEG
64226: PUSH
64227: LD_INT 2
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64256: LD_ADDR_VAR 0 55
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: LD_INT 1
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: LD_INT 2
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 2
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 2
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: LD_INT 2
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 2
64443: NEG
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 2
64455: NEG
64456: PUSH
64457: LD_INT 2
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64486: LD_ADDR_VAR 0 56
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: LD_INT 2
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 2
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 1
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 2
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 2
64685: NEG
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64716: LD_ADDR_VAR 0 57
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: NEG
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 2
64915: NEG
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64946: LD_ADDR_VAR 0 58
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 1
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 1
65015: NEG
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: LD_INT 2
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 2
65145: NEG
65146: PUSH
65147: LD_INT 2
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65176: LD_ADDR_VAR 0 59
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: LD_INT 0
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: NEG
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65264: LD_ADDR_VAR 0 60
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65352: LD_ADDR_VAR 0 61
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: LD_INT 1
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: LD_INT 1
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: NEG
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65440: LD_ADDR_VAR 0 62
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 1
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: LD_INT 1
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65528: LD_ADDR_VAR 0 63
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 1
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 1
65586: NEG
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 1
65597: NEG
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65616: LD_ADDR_VAR 0 64
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: ST_TO_ADDR
// end ; 1 :
65704: GO 71601
65706: LD_INT 1
65708: DOUBLE
65709: EQUAL
65710: IFTRUE 65714
65712: GO 68337
65714: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65715: LD_ADDR_VAR 0 11
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: LD_INT 3
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 2
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65759: LD_ADDR_VAR 0 12
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 3
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 3
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65800: LD_ADDR_VAR 0 13
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: LIST
65839: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65840: LD_ADDR_VAR 0 14
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: LD_INT 3
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 1
65867: NEG
65868: PUSH
65869: LD_INT 2
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: LIST
65880: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65881: LD_ADDR_VAR 0 15
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 3
65899: NEG
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 3
65910: NEG
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65925: LD_ADDR_VAR 0 16
65929: PUSH
65930: LD_INT 2
65932: NEG
65933: PUSH
65934: LD_INT 3
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 3
65944: NEG
65945: PUSH
65946: LD_INT 2
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 3
65956: NEG
65957: PUSH
65958: LD_INT 3
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65971: LD_ADDR_VAR 0 17
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: LD_INT 3
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 3
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: LIST
66014: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66015: LD_ADDR_VAR 0 18
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 3
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 3
66043: PUSH
66044: LD_INT 1
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66056: LD_ADDR_VAR 0 19
66060: PUSH
66061: LD_INT 3
66063: PUSH
66064: LD_INT 2
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 3
66073: PUSH
66074: LD_INT 3
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: LD_INT 3
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66096: LD_ADDR_VAR 0 20
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 0
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 1
66123: NEG
66124: PUSH
66125: LD_INT 2
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66137: LD_ADDR_VAR 0 21
66141: PUSH
66142: LD_INT 2
66144: NEG
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 3
66166: NEG
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66181: LD_ADDR_VAR 0 22
66185: PUSH
66186: LD_INT 2
66188: NEG
66189: PUSH
66190: LD_INT 3
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 3
66200: NEG
66201: PUSH
66202: LD_INT 2
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 3
66212: NEG
66213: PUSH
66214: LD_INT 3
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66227: LD_ADDR_VAR 0 23
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: LD_INT 3
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: NEG
66246: PUSH
66247: LD_INT 4
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: LD_INT 3
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66271: LD_ADDR_VAR 0 24
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: LD_INT 1
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 4
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66312: LD_ADDR_VAR 0 25
66316: PUSH
66317: LD_INT 3
66319: PUSH
66320: LD_INT 3
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 4
66329: PUSH
66330: LD_INT 3
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 3
66339: PUSH
66340: LD_INT 4
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: LIST
66351: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66352: LD_ADDR_VAR 0 26
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 3
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 4
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: NEG
66380: PUSH
66381: LD_INT 3
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66393: LD_ADDR_VAR 0 27
66397: PUSH
66398: LD_INT 3
66400: NEG
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 4
66422: NEG
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66437: LD_ADDR_VAR 0 28
66441: PUSH
66442: LD_INT 3
66444: NEG
66445: PUSH
66446: LD_INT 3
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 3
66456: NEG
66457: PUSH
66458: LD_INT 4
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 4
66468: NEG
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66483: LD_ADDR_VAR 0 29
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 3
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 3
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: LD_INT 2
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 1
66524: NEG
66525: PUSH
66526: LD_INT 4
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 4
66539: NEG
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: LD_INT 3
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: LD_INT 5
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_INT 5
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: LD_INT 4
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: LD_INT 6
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 6
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 1
66615: PUSH
66616: LD_INT 5
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66638: LD_ADDR_VAR 0 30
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 3
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 3
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 4
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 4
66697: PUSH
66698: LD_INT 1
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 4
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 5
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 5
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 5
66738: PUSH
66739: LD_INT 1
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 6
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 6
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66781: LD_ADDR_VAR 0 31
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: LD_INT 3
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 4
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 4
66828: PUSH
66829: LD_INT 4
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 3
66838: PUSH
66839: LD_INT 4
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 5
66848: PUSH
66849: LD_INT 4
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 5
66858: PUSH
66859: LD_INT 5
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 4
66868: PUSH
66869: LD_INT 5
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 6
66878: PUSH
66879: LD_INT 5
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 6
66888: PUSH
66889: LD_INT 6
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 5
66898: PUSH
66899: LD_INT 6
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66920: LD_ADDR_VAR 0 32
66924: PUSH
66925: LD_INT 1
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: LD_INT 3
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: LD_INT 4
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: LD_INT 4
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 1
66978: NEG
66979: PUSH
66980: LD_INT 3
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: LD_INT 5
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: LD_INT 5
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 1
67009: NEG
67010: PUSH
67011: LD_INT 4
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 6
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 6
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 5
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67063: LD_ADDR_VAR 0 33
67067: PUSH
67068: LD_INT 2
67070: NEG
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 3
67081: NEG
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 3
67092: NEG
67093: PUSH
67094: LD_INT 1
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 3
67104: NEG
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 4
67115: NEG
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 4
67126: NEG
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 4
67138: NEG
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 5
67149: NEG
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 5
67160: NEG
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 5
67172: NEG
67173: PUSH
67174: LD_INT 1
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 6
67183: NEG
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 6
67194: NEG
67195: PUSH
67196: LD_INT 1
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67218: LD_ADDR_VAR 0 34
67222: PUSH
67223: LD_INT 2
67225: NEG
67226: PUSH
67227: LD_INT 3
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 3
67237: NEG
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 3
67249: NEG
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 3
67261: NEG
67262: PUSH
67263: LD_INT 4
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 4
67273: NEG
67274: PUSH
67275: LD_INT 3
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 4
67285: NEG
67286: PUSH
67287: LD_INT 4
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 4
67297: NEG
67298: PUSH
67299: LD_INT 5
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 5
67309: NEG
67310: PUSH
67311: LD_INT 4
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 5
67321: NEG
67322: PUSH
67323: LD_INT 5
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 5
67333: NEG
67334: PUSH
67335: LD_INT 6
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 6
67345: NEG
67346: PUSH
67347: LD_INT 5
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 6
67357: NEG
67358: PUSH
67359: LD_INT 6
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67381: LD_ADDR_VAR 0 41
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: LD_INT 2
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 3
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: LD_INT 2
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: LIST
67424: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67425: LD_ADDR_VAR 0 42
67429: PUSH
67430: LD_INT 2
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 2
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 3
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67466: LD_ADDR_VAR 0 43
67470: PUSH
67471: LD_INT 2
67473: PUSH
67474: LD_INT 2
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 2
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 2
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67506: LD_ADDR_VAR 0 44
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: LD_INT 2
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 1
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 1
67533: NEG
67534: PUSH
67535: LD_INT 2
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67547: LD_ADDR_VAR 0 45
67551: PUSH
67552: LD_INT 2
67554: NEG
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: LIST
67590: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67591: LD_ADDR_VAR 0 46
67595: PUSH
67596: LD_INT 2
67598: NEG
67599: PUSH
67600: LD_INT 2
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 2
67610: NEG
67611: PUSH
67612: LD_INT 3
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 3
67622: NEG
67623: PUSH
67624: LD_INT 2
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: LIST
67636: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67637: LD_ADDR_VAR 0 47
67641: PUSH
67642: LD_INT 2
67644: NEG
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: NEG
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67670: LD_ADDR_VAR 0 48
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: LD_INT 2
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: LD_INT 1
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67701: LD_ADDR_VAR 0 49
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: LD_INT 1
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 3
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67730: LD_ADDR_VAR 0 50
67734: PUSH
67735: LD_INT 2
67737: PUSH
67738: LD_INT 3
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: LD_INT 3
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67759: LD_ADDR_VAR 0 51
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 2
67777: NEG
67778: PUSH
67779: LD_INT 1
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67790: LD_ADDR_VAR 0 52
67794: PUSH
67795: LD_INT 3
67797: NEG
67798: PUSH
67799: LD_INT 1
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 3
67809: NEG
67810: PUSH
67811: LD_INT 2
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67823: LD_ADDR_VAR 0 53
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: LD_INT 3
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_INT 3
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: LD_INT 2
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: LIST
67866: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67867: LD_ADDR_VAR 0 54
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: LD_INT 1
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 3
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 3
67895: PUSH
67896: LD_INT 1
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67908: LD_ADDR_VAR 0 55
67912: PUSH
67913: LD_INT 3
67915: PUSH
67916: LD_INT 2
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 3
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: LD_INT 3
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67948: LD_ADDR_VAR 0 56
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: LD_INT 3
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: LD_INT 3
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: LIST
67988: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67989: LD_ADDR_VAR 0 57
67993: PUSH
67994: LD_INT 2
67996: NEG
67997: PUSH
67998: LD_INT 1
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 3
68007: NEG
68008: PUSH
68009: LD_INT 0
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 3
68018: NEG
68019: PUSH
68020: LD_INT 1
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: LIST
68032: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68033: LD_ADDR_VAR 0 58
68037: PUSH
68038: LD_INT 2
68040: NEG
68041: PUSH
68042: LD_INT 3
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 3
68052: NEG
68053: PUSH
68054: LD_INT 2
68056: NEG
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 3
68064: NEG
68065: PUSH
68066: LD_INT 3
68068: NEG
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68079: LD_ADDR_VAR 0 59
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: LD_INT 2
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 0
68098: PUSH
68099: LD_INT 2
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 1
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68123: LD_ADDR_VAR 0 60
68127: PUSH
68128: LD_INT 1
68130: PUSH
68131: LD_INT 1
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 2
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 2
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68164: LD_ADDR_VAR 0 61
68168: PUSH
68169: LD_INT 2
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 2
68181: PUSH
68182: LD_INT 2
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: PUSH
68192: LD_INT 2
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: LIST
68203: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68204: LD_ADDR_VAR 0 62
68208: PUSH
68209: LD_INT 1
68211: PUSH
68212: LD_INT 2
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: LD_INT 2
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 1
68231: NEG
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68245: LD_ADDR_VAR 0 63
68249: PUSH
68250: LD_INT 1
68252: NEG
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 2
68263: NEG
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 2
68274: NEG
68275: PUSH
68276: LD_INT 1
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68289: LD_ADDR_VAR 0 64
68293: PUSH
68294: LD_INT 1
68296: NEG
68297: PUSH
68298: LD_INT 2
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 2
68308: NEG
68309: PUSH
68310: LD_INT 1
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 2
68320: NEG
68321: PUSH
68322: LD_INT 2
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: LIST
68334: ST_TO_ADDR
// end ; 2 :
68335: GO 71601
68337: LD_INT 2
68339: DOUBLE
68340: EQUAL
68341: IFTRUE 68345
68343: GO 71600
68345: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68346: LD_ADDR_VAR 0 29
68350: PUSH
68351: LD_INT 4
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 4
68363: PUSH
68364: LD_INT 1
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 5
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 5
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 4
68394: PUSH
68395: LD_INT 1
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 3
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 3
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 3
68425: PUSH
68426: LD_INT 2
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 5
68436: PUSH
68437: LD_INT 2
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 3
68446: PUSH
68447: LD_INT 3
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 3
68456: PUSH
68457: LD_INT 2
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 4
68466: PUSH
68467: LD_INT 3
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 4
68476: PUSH
68477: LD_INT 4
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 3
68486: PUSH
68487: LD_INT 4
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 2
68496: PUSH
68497: LD_INT 3
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 2
68506: PUSH
68507: LD_INT 2
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 4
68516: PUSH
68517: LD_INT 2
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 2
68526: PUSH
68527: LD_INT 4
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 4
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 0
68546: PUSH
68547: LD_INT 3
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: LD_INT 4
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: LD_INT 5
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: LD_INT 5
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: LD_INT 4
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: LD_INT 3
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 2
68608: PUSH
68609: LD_INT 5
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 2
68618: NEG
68619: PUSH
68620: LD_INT 3
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 3
68629: NEG
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 3
68640: NEG
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 2
68652: NEG
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 2
68663: NEG
68664: PUSH
68665: LD_INT 1
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 3
68674: NEG
68675: PUSH
68676: LD_INT 1
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 4
68685: NEG
68686: PUSH
68687: LD_INT 0
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 4
68696: NEG
68697: PUSH
68698: LD_INT 1
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 4
68708: NEG
68709: PUSH
68710: LD_INT 2
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 2
68720: NEG
68721: PUSH
68722: LD_INT 2
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 4
68731: NEG
68732: PUSH
68733: LD_INT 4
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 4
68743: NEG
68744: PUSH
68745: LD_INT 5
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: LD_INT 4
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 3
68767: NEG
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 4
68779: NEG
68780: PUSH
68781: LD_INT 3
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 5
68791: NEG
68792: PUSH
68793: LD_INT 4
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 5
68803: NEG
68804: PUSH
68805: LD_INT 5
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 3
68815: NEG
68816: PUSH
68817: LD_INT 5
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 5
68827: NEG
68828: PUSH
68829: LD_INT 3
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68884: LD_ADDR_VAR 0 30
68888: PUSH
68889: LD_INT 4
68891: PUSH
68892: LD_INT 4
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 4
68901: PUSH
68902: LD_INT 3
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 5
68911: PUSH
68912: LD_INT 4
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 5
68921: PUSH
68922: LD_INT 5
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 4
68931: PUSH
68932: LD_INT 5
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: LD_INT 4
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 3
68951: PUSH
68952: LD_INT 3
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 5
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 3
68971: PUSH
68972: LD_INT 5
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 0
68981: PUSH
68982: LD_INT 3
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: LD_INT 2
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: LD_INT 3
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 1
69011: PUSH
69012: LD_INT 4
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 4
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: NEG
69032: PUSH
69033: LD_INT 3
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: LD_INT 2
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 2
69053: PUSH
69054: LD_INT 4
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 2
69063: NEG
69064: PUSH
69065: LD_INT 2
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 4
69074: NEG
69075: PUSH
69076: LD_INT 0
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 4
69085: NEG
69086: PUSH
69087: LD_INT 1
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: NEG
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 3
69108: NEG
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 4
69119: NEG
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 5
69130: NEG
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 5
69141: NEG
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 5
69153: NEG
69154: PUSH
69155: LD_INT 2
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: LD_INT 2
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 3
69176: NEG
69177: PUSH
69178: LD_INT 3
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 3
69188: NEG
69189: PUSH
69190: LD_INT 4
69192: NEG
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 2
69200: NEG
69201: PUSH
69202: LD_INT 3
69204: NEG
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 2
69212: NEG
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 3
69224: NEG
69225: PUSH
69226: LD_INT 2
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 4
69236: NEG
69237: PUSH
69238: LD_INT 3
69240: NEG
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 4
69248: NEG
69249: PUSH
69250: LD_INT 4
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 2
69260: NEG
69261: PUSH
69262: LD_INT 4
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 4
69272: NEG
69273: PUSH
69274: LD_INT 2
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: LD_INT 4
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 0
69295: PUSH
69296: LD_INT 5
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 1
69306: PUSH
69307: LD_INT 4
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 1
69317: PUSH
69318: LD_INT 3
69320: NEG
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: LD_INT 3
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 1
69339: NEG
69340: PUSH
69341: LD_INT 4
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: NEG
69352: PUSH
69353: LD_INT 5
69355: NEG
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 2
69363: PUSH
69364: LD_INT 3
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 2
69374: NEG
69375: PUSH
69376: LD_INT 5
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69431: LD_ADDR_VAR 0 31
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: LD_INT 4
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: LD_INT 3
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: LD_INT 4
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: LD_INT 5
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 5
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: NEG
69489: PUSH
69490: LD_INT 4
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 3
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 2
69510: PUSH
69511: LD_INT 5
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 2
69520: NEG
69521: PUSH
69522: LD_INT 3
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: NEG
69543: PUSH
69544: LD_INT 1
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 2
69554: NEG
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 2
69565: NEG
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 3
69576: NEG
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 4
69587: NEG
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 4
69598: NEG
69599: PUSH
69600: LD_INT 1
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 4
69610: NEG
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: NEG
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 4
69633: NEG
69634: PUSH
69635: LD_INT 4
69637: NEG
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 4
69645: NEG
69646: PUSH
69647: LD_INT 5
69649: NEG
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 3
69657: NEG
69658: PUSH
69659: LD_INT 4
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 3
69669: NEG
69670: PUSH
69671: LD_INT 3
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 4
69681: NEG
69682: PUSH
69683: LD_INT 3
69685: NEG
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 5
69693: NEG
69694: PUSH
69695: LD_INT 4
69697: NEG
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 5
69705: NEG
69706: PUSH
69707: LD_INT 5
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: LD_INT 5
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 5
69729: NEG
69730: PUSH
69731: LD_INT 3
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 0
69752: PUSH
69753: LD_INT 4
69755: NEG
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: LD_INT 3
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 1
69774: PUSH
69775: LD_INT 2
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: LD_INT 2
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 1
69796: NEG
69797: PUSH
69798: LD_INT 3
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 1
69808: NEG
69809: PUSH
69810: LD_INT 4
69812: NEG
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 2
69820: PUSH
69821: LD_INT 2
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 2
69831: NEG
69832: PUSH
69833: LD_INT 4
69835: NEG
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 4
69843: PUSH
69844: LD_INT 0
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 4
69853: PUSH
69854: LD_INT 1
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 5
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 5
69874: PUSH
69875: LD_INT 1
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 4
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 3
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 3
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 3
69915: PUSH
69916: LD_INT 2
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 5
69926: PUSH
69927: LD_INT 2
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69981: LD_ADDR_VAR 0 32
69985: PUSH
69986: LD_INT 4
69988: NEG
69989: PUSH
69990: LD_INT 0
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 4
69999: NEG
70000: PUSH
70001: LD_INT 1
70003: NEG
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 3
70011: NEG
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 3
70022: NEG
70023: PUSH
70024: LD_INT 1
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 4
70033: NEG
70034: PUSH
70035: LD_INT 1
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 5
70044: NEG
70045: PUSH
70046: LD_INT 0
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 5
70055: NEG
70056: PUSH
70057: LD_INT 1
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 5
70067: NEG
70068: PUSH
70069: LD_INT 2
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 3
70079: NEG
70080: PUSH
70081: LD_INT 2
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 3
70090: NEG
70091: PUSH
70092: LD_INT 3
70094: NEG
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 3
70102: NEG
70103: PUSH
70104: LD_INT 4
70106: NEG
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 2
70114: NEG
70115: PUSH
70116: LD_INT 3
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 2
70126: NEG
70127: PUSH
70128: LD_INT 2
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 3
70138: NEG
70139: PUSH
70140: LD_INT 2
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 4
70150: NEG
70151: PUSH
70152: LD_INT 3
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 4
70162: NEG
70163: PUSH
70164: LD_INT 4
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 2
70174: NEG
70175: PUSH
70176: LD_INT 4
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 4
70186: NEG
70187: PUSH
70188: LD_INT 2
70190: NEG
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 0
70198: PUSH
70199: LD_INT 4
70201: NEG
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: LD_INT 5
70212: NEG
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: PUSH
70221: LD_INT 4
70223: NEG
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 1
70231: PUSH
70232: LD_INT 3
70234: NEG
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: LD_INT 3
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 1
70253: NEG
70254: PUSH
70255: LD_INT 4
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 1
70265: NEG
70266: PUSH
70267: LD_INT 5
70269: NEG
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 2
70277: PUSH
70278: LD_INT 3
70280: NEG
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 2
70288: NEG
70289: PUSH
70290: LD_INT 5
70292: NEG
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 3
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 3
70310: PUSH
70311: LD_INT 1
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 4
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 4
70331: PUSH
70332: LD_INT 1
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 3
70341: PUSH
70342: LD_INT 1
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 2
70361: PUSH
70362: LD_INT 1
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: LD_INT 2
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 4
70383: PUSH
70384: LD_INT 2
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 4
70393: PUSH
70394: LD_INT 4
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 4
70403: PUSH
70404: LD_INT 3
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 5
70413: PUSH
70414: LD_INT 4
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 5
70423: PUSH
70424: LD_INT 5
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 4
70433: PUSH
70434: LD_INT 5
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 3
70443: PUSH
70444: LD_INT 4
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 3
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 5
70463: PUSH
70464: LD_INT 3
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: LD_INT 5
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70528: LD_ADDR_VAR 0 33
70532: PUSH
70533: LD_INT 4
70535: NEG
70536: PUSH
70537: LD_INT 4
70539: NEG
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 4
70547: NEG
70548: PUSH
70549: LD_INT 5
70551: NEG
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 3
70559: NEG
70560: PUSH
70561: LD_INT 4
70563: NEG
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 3
70571: NEG
70572: PUSH
70573: LD_INT 3
70575: NEG
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 4
70583: NEG
70584: PUSH
70585: LD_INT 3
70587: NEG
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 5
70595: NEG
70596: PUSH
70597: LD_INT 4
70599: NEG
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 5
70607: NEG
70608: PUSH
70609: LD_INT 5
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 3
70619: NEG
70620: PUSH
70621: LD_INT 5
70623: NEG
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 5
70631: NEG
70632: PUSH
70633: LD_INT 3
70635: NEG
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: LD_INT 3
70646: NEG
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: LD_INT 4
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: PUSH
70666: LD_INT 3
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 1
70676: PUSH
70677: LD_INT 2
70679: NEG
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: LD_INT 2
70690: NEG
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 1
70698: NEG
70699: PUSH
70700: LD_INT 3
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 1
70710: NEG
70711: PUSH
70712: LD_INT 4
70714: NEG
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 2
70722: PUSH
70723: LD_INT 2
70725: NEG
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 2
70733: NEG
70734: PUSH
70735: LD_INT 4
70737: NEG
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 4
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 4
70755: PUSH
70756: LD_INT 1
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 5
70766: PUSH
70767: LD_INT 0
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 5
70776: PUSH
70777: LD_INT 1
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 4
70786: PUSH
70787: LD_INT 1
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 3
70796: PUSH
70797: LD_INT 0
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 3
70806: PUSH
70807: LD_INT 1
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 3
70817: PUSH
70818: LD_INT 2
70820: NEG
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 5
70828: PUSH
70829: LD_INT 2
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 3
70838: PUSH
70839: LD_INT 3
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 3
70848: PUSH
70849: LD_INT 2
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 4
70858: PUSH
70859: LD_INT 3
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 4
70868: PUSH
70869: LD_INT 4
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 3
70878: PUSH
70879: LD_INT 4
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 2
70888: PUSH
70889: LD_INT 3
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 2
70898: PUSH
70899: LD_INT 2
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 4
70908: PUSH
70909: LD_INT 2
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 2
70918: PUSH
70919: LD_INT 4
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 0
70928: PUSH
70929: LD_INT 4
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: LD_INT 3
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 1
70948: PUSH
70949: LD_INT 4
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: LD_INT 5
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 0
70968: PUSH
70969: LD_INT 5
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 1
70978: NEG
70979: PUSH
70980: LD_INT 4
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 1
70989: NEG
70990: PUSH
70991: LD_INT 3
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 2
71000: PUSH
71001: LD_INT 5
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 2
71010: NEG
71011: PUSH
71012: LD_INT 3
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71066: LD_ADDR_VAR 0 34
71070: PUSH
71071: LD_INT 0
71073: PUSH
71074: LD_INT 4
71076: NEG
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: LD_INT 5
71087: NEG
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 1
71095: PUSH
71096: LD_INT 4
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 1
71106: PUSH
71107: LD_INT 3
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 0
71117: PUSH
71118: LD_INT 3
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 1
71128: NEG
71129: PUSH
71130: LD_INT 4
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 1
71140: NEG
71141: PUSH
71142: LD_INT 5
71144: NEG
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 2
71152: PUSH
71153: LD_INT 3
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 2
71163: NEG
71164: PUSH
71165: LD_INT 5
71167: NEG
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 3
71175: PUSH
71176: LD_INT 0
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 3
71185: PUSH
71186: LD_INT 1
71188: NEG
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 4
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 4
71206: PUSH
71207: LD_INT 1
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 3
71216: PUSH
71217: LD_INT 1
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: PUSH
71237: LD_INT 1
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 2
71247: PUSH
71248: LD_INT 2
71250: NEG
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 4
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 4
71268: PUSH
71269: LD_INT 4
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 4
71278: PUSH
71279: LD_INT 3
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 5
71288: PUSH
71289: LD_INT 4
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 5
71298: PUSH
71299: LD_INT 5
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 4
71308: PUSH
71309: LD_INT 5
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 3
71318: PUSH
71319: LD_INT 4
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 3
71328: PUSH
71329: LD_INT 3
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 5
71338: PUSH
71339: LD_INT 3
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: LD_INT 5
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 0
71358: PUSH
71359: LD_INT 3
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: LD_INT 2
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 1
71378: PUSH
71379: LD_INT 3
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 1
71388: PUSH
71389: LD_INT 4
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 4
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 1
71408: NEG
71409: PUSH
71410: LD_INT 3
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 1
71419: NEG
71420: PUSH
71421: LD_INT 2
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 2
71430: PUSH
71431: LD_INT 4
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 2
71440: NEG
71441: PUSH
71442: LD_INT 2
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 4
71451: NEG
71452: PUSH
71453: LD_INT 0
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 4
71462: NEG
71463: PUSH
71464: LD_INT 1
71466: NEG
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 3
71474: NEG
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 3
71485: NEG
71486: PUSH
71487: LD_INT 1
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 4
71496: NEG
71497: PUSH
71498: LD_INT 1
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 5
71507: NEG
71508: PUSH
71509: LD_INT 0
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 5
71518: NEG
71519: PUSH
71520: LD_INT 1
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 5
71530: NEG
71531: PUSH
71532: LD_INT 2
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 3
71542: NEG
71543: PUSH
71544: LD_INT 2
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: ST_TO_ADDR
// end ; end ;
71598: GO 71601
71600: POP
// case btype of b_depot , b_warehouse :
71601: LD_VAR 0 1
71605: PUSH
71606: LD_INT 0
71608: DOUBLE
71609: EQUAL
71610: IFTRUE 71620
71612: LD_INT 1
71614: DOUBLE
71615: EQUAL
71616: IFTRUE 71620
71618: GO 71821
71620: POP
// case nation of nation_american :
71621: LD_VAR 0 5
71625: PUSH
71626: LD_INT 1
71628: DOUBLE
71629: EQUAL
71630: IFTRUE 71634
71632: GO 71690
71634: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71635: LD_ADDR_VAR 0 9
71639: PUSH
71640: LD_VAR 0 11
71644: PUSH
71645: LD_VAR 0 12
71649: PUSH
71650: LD_VAR 0 13
71654: PUSH
71655: LD_VAR 0 14
71659: PUSH
71660: LD_VAR 0 15
71664: PUSH
71665: LD_VAR 0 16
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: PUSH
71678: LD_VAR 0 4
71682: PUSH
71683: LD_INT 1
71685: PLUS
71686: ARRAY
71687: ST_TO_ADDR
71688: GO 71819
71690: LD_INT 2
71692: DOUBLE
71693: EQUAL
71694: IFTRUE 71698
71696: GO 71754
71698: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71699: LD_ADDR_VAR 0 9
71703: PUSH
71704: LD_VAR 0 17
71708: PUSH
71709: LD_VAR 0 18
71713: PUSH
71714: LD_VAR 0 19
71718: PUSH
71719: LD_VAR 0 20
71723: PUSH
71724: LD_VAR 0 21
71728: PUSH
71729: LD_VAR 0 22
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: PUSH
71742: LD_VAR 0 4
71746: PUSH
71747: LD_INT 1
71749: PLUS
71750: ARRAY
71751: ST_TO_ADDR
71752: GO 71819
71754: LD_INT 3
71756: DOUBLE
71757: EQUAL
71758: IFTRUE 71762
71760: GO 71818
71762: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71763: LD_ADDR_VAR 0 9
71767: PUSH
71768: LD_VAR 0 23
71772: PUSH
71773: LD_VAR 0 24
71777: PUSH
71778: LD_VAR 0 25
71782: PUSH
71783: LD_VAR 0 26
71787: PUSH
71788: LD_VAR 0 27
71792: PUSH
71793: LD_VAR 0 28
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: PUSH
71806: LD_VAR 0 4
71810: PUSH
71811: LD_INT 1
71813: PLUS
71814: ARRAY
71815: ST_TO_ADDR
71816: GO 71819
71818: POP
71819: GO 72374
71821: LD_INT 2
71823: DOUBLE
71824: EQUAL
71825: IFTRUE 71835
71827: LD_INT 3
71829: DOUBLE
71830: EQUAL
71831: IFTRUE 71835
71833: GO 71891
71835: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71836: LD_ADDR_VAR 0 9
71840: PUSH
71841: LD_VAR 0 29
71845: PUSH
71846: LD_VAR 0 30
71850: PUSH
71851: LD_VAR 0 31
71855: PUSH
71856: LD_VAR 0 32
71860: PUSH
71861: LD_VAR 0 33
71865: PUSH
71866: LD_VAR 0 34
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: PUSH
71879: LD_VAR 0 4
71883: PUSH
71884: LD_INT 1
71886: PLUS
71887: ARRAY
71888: ST_TO_ADDR
71889: GO 72374
71891: LD_INT 16
71893: DOUBLE
71894: EQUAL
71895: IFTRUE 71953
71897: LD_INT 17
71899: DOUBLE
71900: EQUAL
71901: IFTRUE 71953
71903: LD_INT 18
71905: DOUBLE
71906: EQUAL
71907: IFTRUE 71953
71909: LD_INT 19
71911: DOUBLE
71912: EQUAL
71913: IFTRUE 71953
71915: LD_INT 22
71917: DOUBLE
71918: EQUAL
71919: IFTRUE 71953
71921: LD_INT 20
71923: DOUBLE
71924: EQUAL
71925: IFTRUE 71953
71927: LD_INT 21
71929: DOUBLE
71930: EQUAL
71931: IFTRUE 71953
71933: LD_INT 23
71935: DOUBLE
71936: EQUAL
71937: IFTRUE 71953
71939: LD_INT 24
71941: DOUBLE
71942: EQUAL
71943: IFTRUE 71953
71945: LD_INT 25
71947: DOUBLE
71948: EQUAL
71949: IFTRUE 71953
71951: GO 72009
71953: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71954: LD_ADDR_VAR 0 9
71958: PUSH
71959: LD_VAR 0 35
71963: PUSH
71964: LD_VAR 0 36
71968: PUSH
71969: LD_VAR 0 37
71973: PUSH
71974: LD_VAR 0 38
71978: PUSH
71979: LD_VAR 0 39
71983: PUSH
71984: LD_VAR 0 40
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: PUSH
71997: LD_VAR 0 4
72001: PUSH
72002: LD_INT 1
72004: PLUS
72005: ARRAY
72006: ST_TO_ADDR
72007: GO 72374
72009: LD_INT 6
72011: DOUBLE
72012: EQUAL
72013: IFTRUE 72065
72015: LD_INT 7
72017: DOUBLE
72018: EQUAL
72019: IFTRUE 72065
72021: LD_INT 8
72023: DOUBLE
72024: EQUAL
72025: IFTRUE 72065
72027: LD_INT 13
72029: DOUBLE
72030: EQUAL
72031: IFTRUE 72065
72033: LD_INT 12
72035: DOUBLE
72036: EQUAL
72037: IFTRUE 72065
72039: LD_INT 15
72041: DOUBLE
72042: EQUAL
72043: IFTRUE 72065
72045: LD_INT 11
72047: DOUBLE
72048: EQUAL
72049: IFTRUE 72065
72051: LD_INT 14
72053: DOUBLE
72054: EQUAL
72055: IFTRUE 72065
72057: LD_INT 10
72059: DOUBLE
72060: EQUAL
72061: IFTRUE 72065
72063: GO 72121
72065: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72066: LD_ADDR_VAR 0 9
72070: PUSH
72071: LD_VAR 0 41
72075: PUSH
72076: LD_VAR 0 42
72080: PUSH
72081: LD_VAR 0 43
72085: PUSH
72086: LD_VAR 0 44
72090: PUSH
72091: LD_VAR 0 45
72095: PUSH
72096: LD_VAR 0 46
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: PUSH
72109: LD_VAR 0 4
72113: PUSH
72114: LD_INT 1
72116: PLUS
72117: ARRAY
72118: ST_TO_ADDR
72119: GO 72374
72121: LD_INT 36
72123: DOUBLE
72124: EQUAL
72125: IFTRUE 72129
72127: GO 72185
72129: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72130: LD_ADDR_VAR 0 9
72134: PUSH
72135: LD_VAR 0 47
72139: PUSH
72140: LD_VAR 0 48
72144: PUSH
72145: LD_VAR 0 49
72149: PUSH
72150: LD_VAR 0 50
72154: PUSH
72155: LD_VAR 0 51
72159: PUSH
72160: LD_VAR 0 52
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: PUSH
72173: LD_VAR 0 4
72177: PUSH
72178: LD_INT 1
72180: PLUS
72181: ARRAY
72182: ST_TO_ADDR
72183: GO 72374
72185: LD_INT 4
72187: DOUBLE
72188: EQUAL
72189: IFTRUE 72211
72191: LD_INT 5
72193: DOUBLE
72194: EQUAL
72195: IFTRUE 72211
72197: LD_INT 34
72199: DOUBLE
72200: EQUAL
72201: IFTRUE 72211
72203: LD_INT 37
72205: DOUBLE
72206: EQUAL
72207: IFTRUE 72211
72209: GO 72267
72211: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72212: LD_ADDR_VAR 0 9
72216: PUSH
72217: LD_VAR 0 53
72221: PUSH
72222: LD_VAR 0 54
72226: PUSH
72227: LD_VAR 0 55
72231: PUSH
72232: LD_VAR 0 56
72236: PUSH
72237: LD_VAR 0 57
72241: PUSH
72242: LD_VAR 0 58
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: PUSH
72255: LD_VAR 0 4
72259: PUSH
72260: LD_INT 1
72262: PLUS
72263: ARRAY
72264: ST_TO_ADDR
72265: GO 72374
72267: LD_INT 31
72269: DOUBLE
72270: EQUAL
72271: IFTRUE 72317
72273: LD_INT 32
72275: DOUBLE
72276: EQUAL
72277: IFTRUE 72317
72279: LD_INT 33
72281: DOUBLE
72282: EQUAL
72283: IFTRUE 72317
72285: LD_INT 27
72287: DOUBLE
72288: EQUAL
72289: IFTRUE 72317
72291: LD_INT 26
72293: DOUBLE
72294: EQUAL
72295: IFTRUE 72317
72297: LD_INT 28
72299: DOUBLE
72300: EQUAL
72301: IFTRUE 72317
72303: LD_INT 29
72305: DOUBLE
72306: EQUAL
72307: IFTRUE 72317
72309: LD_INT 30
72311: DOUBLE
72312: EQUAL
72313: IFTRUE 72317
72315: GO 72373
72317: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72318: LD_ADDR_VAR 0 9
72322: PUSH
72323: LD_VAR 0 59
72327: PUSH
72328: LD_VAR 0 60
72332: PUSH
72333: LD_VAR 0 61
72337: PUSH
72338: LD_VAR 0 62
72342: PUSH
72343: LD_VAR 0 63
72347: PUSH
72348: LD_VAR 0 64
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: PUSH
72361: LD_VAR 0 4
72365: PUSH
72366: LD_INT 1
72368: PLUS
72369: ARRAY
72370: ST_TO_ADDR
72371: GO 72374
72373: POP
// temp_list2 = [ ] ;
72374: LD_ADDR_VAR 0 10
72378: PUSH
72379: EMPTY
72380: ST_TO_ADDR
// for i in temp_list do
72381: LD_ADDR_VAR 0 8
72385: PUSH
72386: LD_VAR 0 9
72390: PUSH
72391: FOR_IN
72392: IFFALSE 72444
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72394: LD_ADDR_VAR 0 10
72398: PUSH
72399: LD_VAR 0 10
72403: PUSH
72404: LD_VAR 0 8
72408: PUSH
72409: LD_INT 1
72411: ARRAY
72412: PUSH
72413: LD_VAR 0 2
72417: PLUS
72418: PUSH
72419: LD_VAR 0 8
72423: PUSH
72424: LD_INT 2
72426: ARRAY
72427: PUSH
72428: LD_VAR 0 3
72432: PLUS
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: EMPTY
72439: LIST
72440: ADD
72441: ST_TO_ADDR
72442: GO 72391
72444: POP
72445: POP
// result = temp_list2 ;
72446: LD_ADDR_VAR 0 7
72450: PUSH
72451: LD_VAR 0 10
72455: ST_TO_ADDR
// end ;
72456: LD_VAR 0 7
72460: RET
// export function EnemyInRange ( unit , dist ) ; begin
72461: LD_INT 0
72463: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72464: LD_ADDR_VAR 0 3
72468: PUSH
72469: LD_VAR 0 1
72473: PPUSH
72474: CALL_OW 255
72478: PPUSH
72479: LD_VAR 0 1
72483: PPUSH
72484: CALL_OW 250
72488: PPUSH
72489: LD_VAR 0 1
72493: PPUSH
72494: CALL_OW 251
72498: PPUSH
72499: LD_VAR 0 2
72503: PPUSH
72504: CALL 45857 0 4
72508: PUSH
72509: LD_INT 4
72511: ARRAY
72512: ST_TO_ADDR
// end ;
72513: LD_VAR 0 3
72517: RET
// export function PlayerSeeMe ( unit ) ; begin
72518: LD_INT 0
72520: PPUSH
// result := See ( your_side , unit ) ;
72521: LD_ADDR_VAR 0 2
72525: PUSH
72526: LD_OWVAR 2
72530: PPUSH
72531: LD_VAR 0 1
72535: PPUSH
72536: CALL_OW 292
72540: ST_TO_ADDR
// end ;
72541: LD_VAR 0 2
72545: RET
// export function ReverseDir ( unit ) ; begin
72546: LD_INT 0
72548: PPUSH
// if not unit then
72549: LD_VAR 0 1
72553: NOT
72554: IFFALSE 72558
// exit ;
72556: GO 72581
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72558: LD_ADDR_VAR 0 2
72562: PUSH
72563: LD_VAR 0 1
72567: PPUSH
72568: CALL_OW 254
72572: PUSH
72573: LD_INT 3
72575: PLUS
72576: PUSH
72577: LD_INT 6
72579: MOD
72580: ST_TO_ADDR
// end ;
72581: LD_VAR 0 2
72585: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72586: LD_INT 0
72588: PPUSH
72589: PPUSH
72590: PPUSH
72591: PPUSH
72592: PPUSH
// if not hexes then
72593: LD_VAR 0 2
72597: NOT
72598: IFFALSE 72602
// exit ;
72600: GO 72750
// dist := 9999 ;
72602: LD_ADDR_VAR 0 5
72606: PUSH
72607: LD_INT 9999
72609: ST_TO_ADDR
// for i = 1 to hexes do
72610: LD_ADDR_VAR 0 4
72614: PUSH
72615: DOUBLE
72616: LD_INT 1
72618: DEC
72619: ST_TO_ADDR
72620: LD_VAR 0 2
72624: PUSH
72625: FOR_TO
72626: IFFALSE 72738
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72628: LD_VAR 0 1
72632: PPUSH
72633: LD_VAR 0 2
72637: PUSH
72638: LD_VAR 0 4
72642: ARRAY
72643: PUSH
72644: LD_INT 1
72646: ARRAY
72647: PPUSH
72648: LD_VAR 0 2
72652: PUSH
72653: LD_VAR 0 4
72657: ARRAY
72658: PUSH
72659: LD_INT 2
72661: ARRAY
72662: PPUSH
72663: CALL_OW 297
72667: PUSH
72668: LD_VAR 0 5
72672: LESS
72673: IFFALSE 72736
// begin hex := hexes [ i ] ;
72675: LD_ADDR_VAR 0 7
72679: PUSH
72680: LD_VAR 0 2
72684: PUSH
72685: LD_VAR 0 4
72689: ARRAY
72690: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72691: LD_ADDR_VAR 0 5
72695: PUSH
72696: LD_VAR 0 1
72700: PPUSH
72701: LD_VAR 0 2
72705: PUSH
72706: LD_VAR 0 4
72710: ARRAY
72711: PUSH
72712: LD_INT 1
72714: ARRAY
72715: PPUSH
72716: LD_VAR 0 2
72720: PUSH
72721: LD_VAR 0 4
72725: ARRAY
72726: PUSH
72727: LD_INT 2
72729: ARRAY
72730: PPUSH
72731: CALL_OW 297
72735: ST_TO_ADDR
// end ; end ;
72736: GO 72625
72738: POP
72739: POP
// result := hex ;
72740: LD_ADDR_VAR 0 3
72744: PUSH
72745: LD_VAR 0 7
72749: ST_TO_ADDR
// end ;
72750: LD_VAR 0 3
72754: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72755: LD_INT 0
72757: PPUSH
72758: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72759: LD_VAR 0 1
72763: NOT
72764: PUSH
72765: LD_VAR 0 1
72769: PUSH
72770: LD_INT 21
72772: PUSH
72773: LD_INT 2
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 23
72782: PUSH
72783: LD_INT 2
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PPUSH
72794: CALL_OW 69
72798: IN
72799: NOT
72800: OR
72801: IFFALSE 72805
// exit ;
72803: GO 72852
// for i = 1 to 3 do
72805: LD_ADDR_VAR 0 3
72809: PUSH
72810: DOUBLE
72811: LD_INT 1
72813: DEC
72814: ST_TO_ADDR
72815: LD_INT 3
72817: PUSH
72818: FOR_TO
72819: IFFALSE 72850
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72821: LD_VAR 0 1
72825: PPUSH
72826: CALL_OW 250
72830: PPUSH
72831: LD_VAR 0 1
72835: PPUSH
72836: CALL_OW 251
72840: PPUSH
72841: LD_INT 1
72843: PPUSH
72844: CALL_OW 453
72848: GO 72818
72850: POP
72851: POP
// end ;
72852: LD_VAR 0 2
72856: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72857: LD_INT 0
72859: PPUSH
72860: PPUSH
72861: PPUSH
72862: PPUSH
72863: PPUSH
72864: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72865: LD_VAR 0 1
72869: NOT
72870: PUSH
72871: LD_VAR 0 2
72875: NOT
72876: OR
72877: PUSH
72878: LD_VAR 0 1
72882: PPUSH
72883: CALL_OW 314
72887: OR
72888: IFFALSE 72892
// exit ;
72890: GO 73333
// x := GetX ( enemy_unit ) ;
72892: LD_ADDR_VAR 0 7
72896: PUSH
72897: LD_VAR 0 2
72901: PPUSH
72902: CALL_OW 250
72906: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72907: LD_ADDR_VAR 0 8
72911: PUSH
72912: LD_VAR 0 2
72916: PPUSH
72917: CALL_OW 251
72921: ST_TO_ADDR
// if not x or not y then
72922: LD_VAR 0 7
72926: NOT
72927: PUSH
72928: LD_VAR 0 8
72932: NOT
72933: OR
72934: IFFALSE 72938
// exit ;
72936: GO 73333
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72938: LD_ADDR_VAR 0 6
72942: PUSH
72943: LD_VAR 0 7
72947: PPUSH
72948: LD_INT 0
72950: PPUSH
72951: LD_INT 4
72953: PPUSH
72954: CALL_OW 272
72958: PUSH
72959: LD_VAR 0 8
72963: PPUSH
72964: LD_INT 0
72966: PPUSH
72967: LD_INT 4
72969: PPUSH
72970: CALL_OW 273
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_VAR 0 7
72983: PPUSH
72984: LD_INT 1
72986: PPUSH
72987: LD_INT 4
72989: PPUSH
72990: CALL_OW 272
72994: PUSH
72995: LD_VAR 0 8
72999: PPUSH
73000: LD_INT 1
73002: PPUSH
73003: LD_INT 4
73005: PPUSH
73006: CALL_OW 273
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_VAR 0 7
73019: PPUSH
73020: LD_INT 2
73022: PPUSH
73023: LD_INT 4
73025: PPUSH
73026: CALL_OW 272
73030: PUSH
73031: LD_VAR 0 8
73035: PPUSH
73036: LD_INT 2
73038: PPUSH
73039: LD_INT 4
73041: PPUSH
73042: CALL_OW 273
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_VAR 0 7
73055: PPUSH
73056: LD_INT 3
73058: PPUSH
73059: LD_INT 4
73061: PPUSH
73062: CALL_OW 272
73066: PUSH
73067: LD_VAR 0 8
73071: PPUSH
73072: LD_INT 3
73074: PPUSH
73075: LD_INT 4
73077: PPUSH
73078: CALL_OW 273
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: LD_VAR 0 7
73091: PPUSH
73092: LD_INT 4
73094: PPUSH
73095: LD_INT 4
73097: PPUSH
73098: CALL_OW 272
73102: PUSH
73103: LD_VAR 0 8
73107: PPUSH
73108: LD_INT 4
73110: PPUSH
73111: LD_INT 4
73113: PPUSH
73114: CALL_OW 273
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_VAR 0 7
73127: PPUSH
73128: LD_INT 5
73130: PPUSH
73131: LD_INT 4
73133: PPUSH
73134: CALL_OW 272
73138: PUSH
73139: LD_VAR 0 8
73143: PPUSH
73144: LD_INT 5
73146: PPUSH
73147: LD_INT 4
73149: PPUSH
73150: CALL_OW 273
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: ST_TO_ADDR
// for i = tmp downto 1 do
73167: LD_ADDR_VAR 0 4
73171: PUSH
73172: DOUBLE
73173: LD_VAR 0 6
73177: INC
73178: ST_TO_ADDR
73179: LD_INT 1
73181: PUSH
73182: FOR_DOWNTO
73183: IFFALSE 73284
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73185: LD_VAR 0 6
73189: PUSH
73190: LD_VAR 0 4
73194: ARRAY
73195: PUSH
73196: LD_INT 1
73198: ARRAY
73199: PPUSH
73200: LD_VAR 0 6
73204: PUSH
73205: LD_VAR 0 4
73209: ARRAY
73210: PUSH
73211: LD_INT 2
73213: ARRAY
73214: PPUSH
73215: CALL_OW 488
73219: NOT
73220: PUSH
73221: LD_VAR 0 6
73225: PUSH
73226: LD_VAR 0 4
73230: ARRAY
73231: PUSH
73232: LD_INT 1
73234: ARRAY
73235: PPUSH
73236: LD_VAR 0 6
73240: PUSH
73241: LD_VAR 0 4
73245: ARRAY
73246: PUSH
73247: LD_INT 2
73249: ARRAY
73250: PPUSH
73251: CALL_OW 428
73255: PUSH
73256: LD_INT 0
73258: NONEQUAL
73259: OR
73260: IFFALSE 73282
// tmp := Delete ( tmp , i ) ;
73262: LD_ADDR_VAR 0 6
73266: PUSH
73267: LD_VAR 0 6
73271: PPUSH
73272: LD_VAR 0 4
73276: PPUSH
73277: CALL_OW 3
73281: ST_TO_ADDR
73282: GO 73182
73284: POP
73285: POP
// j := GetClosestHex ( unit , tmp ) ;
73286: LD_ADDR_VAR 0 5
73290: PUSH
73291: LD_VAR 0 1
73295: PPUSH
73296: LD_VAR 0 6
73300: PPUSH
73301: CALL 72586 0 2
73305: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73306: LD_VAR 0 1
73310: PPUSH
73311: LD_VAR 0 5
73315: PUSH
73316: LD_INT 1
73318: ARRAY
73319: PPUSH
73320: LD_VAR 0 5
73324: PUSH
73325: LD_INT 2
73327: ARRAY
73328: PPUSH
73329: CALL_OW 111
// end ;
73333: LD_VAR 0 3
73337: RET
// export function PrepareApemanSoldier ( ) ; begin
73338: LD_INT 0
73340: PPUSH
// uc_nation := 0 ;
73341: LD_ADDR_OWVAR 21
73345: PUSH
73346: LD_INT 0
73348: ST_TO_ADDR
// hc_sex := sex_male ;
73349: LD_ADDR_OWVAR 27
73353: PUSH
73354: LD_INT 1
73356: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73357: LD_ADDR_OWVAR 28
73361: PUSH
73362: LD_INT 15
73364: ST_TO_ADDR
// hc_gallery :=  ;
73365: LD_ADDR_OWVAR 33
73369: PUSH
73370: LD_STRING 
73372: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73373: LD_ADDR_OWVAR 31
73377: PUSH
73378: LD_INT 0
73380: PPUSH
73381: LD_INT 3
73383: PPUSH
73384: CALL_OW 12
73388: PUSH
73389: LD_INT 0
73391: PPUSH
73392: LD_INT 3
73394: PPUSH
73395: CALL_OW 12
73399: PUSH
73400: LD_INT 0
73402: PUSH
73403: LD_INT 0
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: ST_TO_ADDR
// end ;
73412: LD_VAR 0 1
73416: RET
// export function PrepareApemanEngineer ( ) ; begin
73417: LD_INT 0
73419: PPUSH
// uc_nation := 0 ;
73420: LD_ADDR_OWVAR 21
73424: PUSH
73425: LD_INT 0
73427: ST_TO_ADDR
// hc_sex := sex_male ;
73428: LD_ADDR_OWVAR 27
73432: PUSH
73433: LD_INT 1
73435: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73436: LD_ADDR_OWVAR 28
73440: PUSH
73441: LD_INT 16
73443: ST_TO_ADDR
// hc_gallery :=  ;
73444: LD_ADDR_OWVAR 33
73448: PUSH
73449: LD_STRING 
73451: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73452: LD_ADDR_OWVAR 31
73456: PUSH
73457: LD_INT 0
73459: PPUSH
73460: LD_INT 3
73462: PPUSH
73463: CALL_OW 12
73467: PUSH
73468: LD_INT 0
73470: PPUSH
73471: LD_INT 3
73473: PPUSH
73474: CALL_OW 12
73478: PUSH
73479: LD_INT 0
73481: PUSH
73482: LD_INT 0
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: ST_TO_ADDR
// end ;
73491: LD_VAR 0 1
73495: RET
// export function PrepareApeman ( agressivity ) ; begin
73496: LD_INT 0
73498: PPUSH
// uc_side := 0 ;
73499: LD_ADDR_OWVAR 20
73503: PUSH
73504: LD_INT 0
73506: ST_TO_ADDR
// uc_nation := 0 ;
73507: LD_ADDR_OWVAR 21
73511: PUSH
73512: LD_INT 0
73514: ST_TO_ADDR
// hc_sex := sex_male ;
73515: LD_ADDR_OWVAR 27
73519: PUSH
73520: LD_INT 1
73522: ST_TO_ADDR
// hc_class := class_apeman ;
73523: LD_ADDR_OWVAR 28
73527: PUSH
73528: LD_INT 12
73530: ST_TO_ADDR
// hc_gallery :=  ;
73531: LD_ADDR_OWVAR 33
73535: PUSH
73536: LD_STRING 
73538: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73539: LD_ADDR_OWVAR 35
73543: PUSH
73544: LD_VAR 0 1
73548: NEG
73549: PPUSH
73550: LD_VAR 0 1
73554: PPUSH
73555: CALL_OW 12
73559: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73560: LD_ADDR_OWVAR 31
73564: PUSH
73565: LD_INT 0
73567: PPUSH
73568: LD_INT 3
73570: PPUSH
73571: CALL_OW 12
73575: PUSH
73576: LD_INT 0
73578: PPUSH
73579: LD_INT 3
73581: PPUSH
73582: CALL_OW 12
73586: PUSH
73587: LD_INT 0
73589: PUSH
73590: LD_INT 0
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: ST_TO_ADDR
// end ;
73599: LD_VAR 0 2
73603: RET
// export function PrepareTiger ( agressivity ) ; begin
73604: LD_INT 0
73606: PPUSH
// uc_side := 0 ;
73607: LD_ADDR_OWVAR 20
73611: PUSH
73612: LD_INT 0
73614: ST_TO_ADDR
// uc_nation := 0 ;
73615: LD_ADDR_OWVAR 21
73619: PUSH
73620: LD_INT 0
73622: ST_TO_ADDR
// hc_class := class_tiger ;
73623: LD_ADDR_OWVAR 28
73627: PUSH
73628: LD_INT 14
73630: ST_TO_ADDR
// hc_gallery :=  ;
73631: LD_ADDR_OWVAR 33
73635: PUSH
73636: LD_STRING 
73638: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73639: LD_ADDR_OWVAR 35
73643: PUSH
73644: LD_VAR 0 1
73648: NEG
73649: PPUSH
73650: LD_VAR 0 1
73654: PPUSH
73655: CALL_OW 12
73659: ST_TO_ADDR
// end ;
73660: LD_VAR 0 2
73664: RET
// export function PrepareEnchidna ( ) ; begin
73665: LD_INT 0
73667: PPUSH
// uc_side := 0 ;
73668: LD_ADDR_OWVAR 20
73672: PUSH
73673: LD_INT 0
73675: ST_TO_ADDR
// uc_nation := 0 ;
73676: LD_ADDR_OWVAR 21
73680: PUSH
73681: LD_INT 0
73683: ST_TO_ADDR
// hc_class := class_baggie ;
73684: LD_ADDR_OWVAR 28
73688: PUSH
73689: LD_INT 13
73691: ST_TO_ADDR
// hc_gallery :=  ;
73692: LD_ADDR_OWVAR 33
73696: PUSH
73697: LD_STRING 
73699: ST_TO_ADDR
// end ;
73700: LD_VAR 0 1
73704: RET
// export function PrepareFrog ( ) ; begin
73705: LD_INT 0
73707: PPUSH
// uc_side := 0 ;
73708: LD_ADDR_OWVAR 20
73712: PUSH
73713: LD_INT 0
73715: ST_TO_ADDR
// uc_nation := 0 ;
73716: LD_ADDR_OWVAR 21
73720: PUSH
73721: LD_INT 0
73723: ST_TO_ADDR
// hc_class := class_frog ;
73724: LD_ADDR_OWVAR 28
73728: PUSH
73729: LD_INT 19
73731: ST_TO_ADDR
// hc_gallery :=  ;
73732: LD_ADDR_OWVAR 33
73736: PUSH
73737: LD_STRING 
73739: ST_TO_ADDR
// end ;
73740: LD_VAR 0 1
73744: RET
// export function PrepareFish ( ) ; begin
73745: LD_INT 0
73747: PPUSH
// uc_side := 0 ;
73748: LD_ADDR_OWVAR 20
73752: PUSH
73753: LD_INT 0
73755: ST_TO_ADDR
// uc_nation := 0 ;
73756: LD_ADDR_OWVAR 21
73760: PUSH
73761: LD_INT 0
73763: ST_TO_ADDR
// hc_class := class_fish ;
73764: LD_ADDR_OWVAR 28
73768: PUSH
73769: LD_INT 20
73771: ST_TO_ADDR
// hc_gallery :=  ;
73772: LD_ADDR_OWVAR 33
73776: PUSH
73777: LD_STRING 
73779: ST_TO_ADDR
// end ;
73780: LD_VAR 0 1
73784: RET
// export function PrepareBird ( ) ; begin
73785: LD_INT 0
73787: PPUSH
// uc_side := 0 ;
73788: LD_ADDR_OWVAR 20
73792: PUSH
73793: LD_INT 0
73795: ST_TO_ADDR
// uc_nation := 0 ;
73796: LD_ADDR_OWVAR 21
73800: PUSH
73801: LD_INT 0
73803: ST_TO_ADDR
// hc_class := class_phororhacos ;
73804: LD_ADDR_OWVAR 28
73808: PUSH
73809: LD_INT 18
73811: ST_TO_ADDR
// hc_gallery :=  ;
73812: LD_ADDR_OWVAR 33
73816: PUSH
73817: LD_STRING 
73819: ST_TO_ADDR
// end ;
73820: LD_VAR 0 1
73824: RET
// export function PrepareHorse ( ) ; begin
73825: LD_INT 0
73827: PPUSH
// uc_side := 0 ;
73828: LD_ADDR_OWVAR 20
73832: PUSH
73833: LD_INT 0
73835: ST_TO_ADDR
// uc_nation := 0 ;
73836: LD_ADDR_OWVAR 21
73840: PUSH
73841: LD_INT 0
73843: ST_TO_ADDR
// hc_class := class_horse ;
73844: LD_ADDR_OWVAR 28
73848: PUSH
73849: LD_INT 21
73851: ST_TO_ADDR
// hc_gallery :=  ;
73852: LD_ADDR_OWVAR 33
73856: PUSH
73857: LD_STRING 
73859: ST_TO_ADDR
// end ;
73860: LD_VAR 0 1
73864: RET
// export function PrepareMastodont ( ) ; begin
73865: LD_INT 0
73867: PPUSH
// uc_side := 0 ;
73868: LD_ADDR_OWVAR 20
73872: PUSH
73873: LD_INT 0
73875: ST_TO_ADDR
// uc_nation := 0 ;
73876: LD_ADDR_OWVAR 21
73880: PUSH
73881: LD_INT 0
73883: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73884: LD_ADDR_OWVAR 37
73888: PUSH
73889: LD_INT 31
73891: ST_TO_ADDR
// vc_control := control_rider ;
73892: LD_ADDR_OWVAR 38
73896: PUSH
73897: LD_INT 4
73899: ST_TO_ADDR
// end ;
73900: LD_VAR 0 1
73904: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73905: LD_INT 0
73907: PPUSH
73908: PPUSH
73909: PPUSH
// uc_side = 0 ;
73910: LD_ADDR_OWVAR 20
73914: PUSH
73915: LD_INT 0
73917: ST_TO_ADDR
// uc_nation = 0 ;
73918: LD_ADDR_OWVAR 21
73922: PUSH
73923: LD_INT 0
73925: ST_TO_ADDR
// InitHc_All ( ) ;
73926: CALL_OW 584
// InitVc ;
73930: CALL_OW 20
// if mastodonts then
73934: LD_VAR 0 6
73938: IFFALSE 74005
// for i = 1 to mastodonts do
73940: LD_ADDR_VAR 0 11
73944: PUSH
73945: DOUBLE
73946: LD_INT 1
73948: DEC
73949: ST_TO_ADDR
73950: LD_VAR 0 6
73954: PUSH
73955: FOR_TO
73956: IFFALSE 74003
// begin vc_chassis := 31 ;
73958: LD_ADDR_OWVAR 37
73962: PUSH
73963: LD_INT 31
73965: ST_TO_ADDR
// vc_control := control_rider ;
73966: LD_ADDR_OWVAR 38
73970: PUSH
73971: LD_INT 4
73973: ST_TO_ADDR
// animal := CreateVehicle ;
73974: LD_ADDR_VAR 0 12
73978: PUSH
73979: CALL_OW 45
73983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73984: LD_VAR 0 12
73988: PPUSH
73989: LD_VAR 0 8
73993: PPUSH
73994: LD_INT 0
73996: PPUSH
73997: CALL 76140 0 3
// end ;
74001: GO 73955
74003: POP
74004: POP
// if horses then
74005: LD_VAR 0 5
74009: IFFALSE 74076
// for i = 1 to horses do
74011: LD_ADDR_VAR 0 11
74015: PUSH
74016: DOUBLE
74017: LD_INT 1
74019: DEC
74020: ST_TO_ADDR
74021: LD_VAR 0 5
74025: PUSH
74026: FOR_TO
74027: IFFALSE 74074
// begin hc_class := 21 ;
74029: LD_ADDR_OWVAR 28
74033: PUSH
74034: LD_INT 21
74036: ST_TO_ADDR
// hc_gallery :=  ;
74037: LD_ADDR_OWVAR 33
74041: PUSH
74042: LD_STRING 
74044: ST_TO_ADDR
// animal := CreateHuman ;
74045: LD_ADDR_VAR 0 12
74049: PUSH
74050: CALL_OW 44
74054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74055: LD_VAR 0 12
74059: PPUSH
74060: LD_VAR 0 8
74064: PPUSH
74065: LD_INT 0
74067: PPUSH
74068: CALL 76140 0 3
// end ;
74072: GO 74026
74074: POP
74075: POP
// if birds then
74076: LD_VAR 0 1
74080: IFFALSE 74147
// for i = 1 to birds do
74082: LD_ADDR_VAR 0 11
74086: PUSH
74087: DOUBLE
74088: LD_INT 1
74090: DEC
74091: ST_TO_ADDR
74092: LD_VAR 0 1
74096: PUSH
74097: FOR_TO
74098: IFFALSE 74145
// begin hc_class = 18 ;
74100: LD_ADDR_OWVAR 28
74104: PUSH
74105: LD_INT 18
74107: ST_TO_ADDR
// hc_gallery =  ;
74108: LD_ADDR_OWVAR 33
74112: PUSH
74113: LD_STRING 
74115: ST_TO_ADDR
// animal := CreateHuman ;
74116: LD_ADDR_VAR 0 12
74120: PUSH
74121: CALL_OW 44
74125: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74126: LD_VAR 0 12
74130: PPUSH
74131: LD_VAR 0 8
74135: PPUSH
74136: LD_INT 0
74138: PPUSH
74139: CALL 76140 0 3
// end ;
74143: GO 74097
74145: POP
74146: POP
// if tigers then
74147: LD_VAR 0 2
74151: IFFALSE 74235
// for i = 1 to tigers do
74153: LD_ADDR_VAR 0 11
74157: PUSH
74158: DOUBLE
74159: LD_INT 1
74161: DEC
74162: ST_TO_ADDR
74163: LD_VAR 0 2
74167: PUSH
74168: FOR_TO
74169: IFFALSE 74233
// begin hc_class = class_tiger ;
74171: LD_ADDR_OWVAR 28
74175: PUSH
74176: LD_INT 14
74178: ST_TO_ADDR
// hc_gallery =  ;
74179: LD_ADDR_OWVAR 33
74183: PUSH
74184: LD_STRING 
74186: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74187: LD_ADDR_OWVAR 35
74191: PUSH
74192: LD_INT 7
74194: NEG
74195: PPUSH
74196: LD_INT 7
74198: PPUSH
74199: CALL_OW 12
74203: ST_TO_ADDR
// animal := CreateHuman ;
74204: LD_ADDR_VAR 0 12
74208: PUSH
74209: CALL_OW 44
74213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74214: LD_VAR 0 12
74218: PPUSH
74219: LD_VAR 0 8
74223: PPUSH
74224: LD_INT 0
74226: PPUSH
74227: CALL 76140 0 3
// end ;
74231: GO 74168
74233: POP
74234: POP
// if apemans then
74235: LD_VAR 0 3
74239: IFFALSE 74362
// for i = 1 to apemans do
74241: LD_ADDR_VAR 0 11
74245: PUSH
74246: DOUBLE
74247: LD_INT 1
74249: DEC
74250: ST_TO_ADDR
74251: LD_VAR 0 3
74255: PUSH
74256: FOR_TO
74257: IFFALSE 74360
// begin hc_class = class_apeman ;
74259: LD_ADDR_OWVAR 28
74263: PUSH
74264: LD_INT 12
74266: ST_TO_ADDR
// hc_gallery =  ;
74267: LD_ADDR_OWVAR 33
74271: PUSH
74272: LD_STRING 
74274: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74275: LD_ADDR_OWVAR 35
74279: PUSH
74280: LD_INT 2
74282: NEG
74283: PPUSH
74284: LD_INT 2
74286: PPUSH
74287: CALL_OW 12
74291: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74292: LD_ADDR_OWVAR 31
74296: PUSH
74297: LD_INT 1
74299: PPUSH
74300: LD_INT 3
74302: PPUSH
74303: CALL_OW 12
74307: PUSH
74308: LD_INT 1
74310: PPUSH
74311: LD_INT 3
74313: PPUSH
74314: CALL_OW 12
74318: PUSH
74319: LD_INT 0
74321: PUSH
74322: LD_INT 0
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: ST_TO_ADDR
// animal := CreateHuman ;
74331: LD_ADDR_VAR 0 12
74335: PUSH
74336: CALL_OW 44
74340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74341: LD_VAR 0 12
74345: PPUSH
74346: LD_VAR 0 8
74350: PPUSH
74351: LD_INT 0
74353: PPUSH
74354: CALL 76140 0 3
// end ;
74358: GO 74256
74360: POP
74361: POP
// if enchidnas then
74362: LD_VAR 0 4
74366: IFFALSE 74433
// for i = 1 to enchidnas do
74368: LD_ADDR_VAR 0 11
74372: PUSH
74373: DOUBLE
74374: LD_INT 1
74376: DEC
74377: ST_TO_ADDR
74378: LD_VAR 0 4
74382: PUSH
74383: FOR_TO
74384: IFFALSE 74431
// begin hc_class = 13 ;
74386: LD_ADDR_OWVAR 28
74390: PUSH
74391: LD_INT 13
74393: ST_TO_ADDR
// hc_gallery =  ;
74394: LD_ADDR_OWVAR 33
74398: PUSH
74399: LD_STRING 
74401: ST_TO_ADDR
// animal := CreateHuman ;
74402: LD_ADDR_VAR 0 12
74406: PUSH
74407: CALL_OW 44
74411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74412: LD_VAR 0 12
74416: PPUSH
74417: LD_VAR 0 8
74421: PPUSH
74422: LD_INT 0
74424: PPUSH
74425: CALL 76140 0 3
// end ;
74429: GO 74383
74431: POP
74432: POP
// if fishes then
74433: LD_VAR 0 7
74437: IFFALSE 74504
// for i = 1 to fishes do
74439: LD_ADDR_VAR 0 11
74443: PUSH
74444: DOUBLE
74445: LD_INT 1
74447: DEC
74448: ST_TO_ADDR
74449: LD_VAR 0 7
74453: PUSH
74454: FOR_TO
74455: IFFALSE 74502
// begin hc_class = 20 ;
74457: LD_ADDR_OWVAR 28
74461: PUSH
74462: LD_INT 20
74464: ST_TO_ADDR
// hc_gallery =  ;
74465: LD_ADDR_OWVAR 33
74469: PUSH
74470: LD_STRING 
74472: ST_TO_ADDR
// animal := CreateHuman ;
74473: LD_ADDR_VAR 0 12
74477: PUSH
74478: CALL_OW 44
74482: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74483: LD_VAR 0 12
74487: PPUSH
74488: LD_VAR 0 9
74492: PPUSH
74493: LD_INT 0
74495: PPUSH
74496: CALL 76140 0 3
// end ;
74500: GO 74454
74502: POP
74503: POP
// end ;
74504: LD_VAR 0 10
74508: RET
// export function WantHeal ( sci , unit ) ; begin
74509: LD_INT 0
74511: PPUSH
// if GetTaskList ( sci ) > 0 then
74512: LD_VAR 0 1
74516: PPUSH
74517: CALL_OW 437
74521: PUSH
74522: LD_INT 0
74524: GREATER
74525: IFFALSE 74595
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74527: LD_VAR 0 1
74531: PPUSH
74532: CALL_OW 437
74536: PUSH
74537: LD_INT 1
74539: ARRAY
74540: PUSH
74541: LD_INT 1
74543: ARRAY
74544: PUSH
74545: LD_STRING l
74547: EQUAL
74548: PUSH
74549: LD_VAR 0 1
74553: PPUSH
74554: CALL_OW 437
74558: PUSH
74559: LD_INT 1
74561: ARRAY
74562: PUSH
74563: LD_INT 4
74565: ARRAY
74566: PUSH
74567: LD_VAR 0 2
74571: EQUAL
74572: AND
74573: IFFALSE 74585
// result := true else
74575: LD_ADDR_VAR 0 3
74579: PUSH
74580: LD_INT 1
74582: ST_TO_ADDR
74583: GO 74593
// result := false ;
74585: LD_ADDR_VAR 0 3
74589: PUSH
74590: LD_INT 0
74592: ST_TO_ADDR
// end else
74593: GO 74603
// result := false ;
74595: LD_ADDR_VAR 0 3
74599: PUSH
74600: LD_INT 0
74602: ST_TO_ADDR
// end ;
74603: LD_VAR 0 3
74607: RET
// export function HealTarget ( sci ) ; begin
74608: LD_INT 0
74610: PPUSH
// if not sci then
74611: LD_VAR 0 1
74615: NOT
74616: IFFALSE 74620
// exit ;
74618: GO 74685
// result := 0 ;
74620: LD_ADDR_VAR 0 2
74624: PUSH
74625: LD_INT 0
74627: ST_TO_ADDR
// if GetTaskList ( sci ) then
74628: LD_VAR 0 1
74632: PPUSH
74633: CALL_OW 437
74637: IFFALSE 74685
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74639: LD_VAR 0 1
74643: PPUSH
74644: CALL_OW 437
74648: PUSH
74649: LD_INT 1
74651: ARRAY
74652: PUSH
74653: LD_INT 1
74655: ARRAY
74656: PUSH
74657: LD_STRING l
74659: EQUAL
74660: IFFALSE 74685
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74662: LD_ADDR_VAR 0 2
74666: PUSH
74667: LD_VAR 0 1
74671: PPUSH
74672: CALL_OW 437
74676: PUSH
74677: LD_INT 1
74679: ARRAY
74680: PUSH
74681: LD_INT 4
74683: ARRAY
74684: ST_TO_ADDR
// end ;
74685: LD_VAR 0 2
74689: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74690: LD_INT 0
74692: PPUSH
74693: PPUSH
74694: PPUSH
74695: PPUSH
// if not base_units then
74696: LD_VAR 0 1
74700: NOT
74701: IFFALSE 74705
// exit ;
74703: GO 74792
// result := false ;
74705: LD_ADDR_VAR 0 2
74709: PUSH
74710: LD_INT 0
74712: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74713: LD_ADDR_VAR 0 5
74717: PUSH
74718: LD_VAR 0 1
74722: PPUSH
74723: LD_INT 21
74725: PUSH
74726: LD_INT 3
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: PPUSH
74733: CALL_OW 72
74737: ST_TO_ADDR
// if not tmp then
74738: LD_VAR 0 5
74742: NOT
74743: IFFALSE 74747
// exit ;
74745: GO 74792
// for i in tmp do
74747: LD_ADDR_VAR 0 3
74751: PUSH
74752: LD_VAR 0 5
74756: PUSH
74757: FOR_IN
74758: IFFALSE 74790
// begin result := EnemyInRange ( i , 22 ) ;
74760: LD_ADDR_VAR 0 2
74764: PUSH
74765: LD_VAR 0 3
74769: PPUSH
74770: LD_INT 22
74772: PPUSH
74773: CALL 72461 0 2
74777: ST_TO_ADDR
// if result then
74778: LD_VAR 0 2
74782: IFFALSE 74788
// exit ;
74784: POP
74785: POP
74786: GO 74792
// end ;
74788: GO 74757
74790: POP
74791: POP
// end ;
74792: LD_VAR 0 2
74796: RET
// export function FilterByTag ( units , tag ) ; begin
74797: LD_INT 0
74799: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74800: LD_ADDR_VAR 0 3
74804: PUSH
74805: LD_VAR 0 1
74809: PPUSH
74810: LD_INT 120
74812: PUSH
74813: LD_VAR 0 2
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PPUSH
74822: CALL_OW 72
74826: ST_TO_ADDR
// end ;
74827: LD_VAR 0 3
74831: RET
// export function IsDriver ( un ) ; begin
74832: LD_INT 0
74834: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74835: LD_ADDR_VAR 0 2
74839: PUSH
74840: LD_VAR 0 1
74844: PUSH
74845: LD_INT 55
74847: PUSH
74848: EMPTY
74849: LIST
74850: PPUSH
74851: CALL_OW 69
74855: IN
74856: ST_TO_ADDR
// end ;
74857: LD_VAR 0 2
74861: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74862: LD_INT 0
74864: PPUSH
74865: PPUSH
// list := [ ] ;
74866: LD_ADDR_VAR 0 5
74870: PUSH
74871: EMPTY
74872: ST_TO_ADDR
// case d of 0 :
74873: LD_VAR 0 3
74877: PUSH
74878: LD_INT 0
74880: DOUBLE
74881: EQUAL
74882: IFTRUE 74886
74884: GO 75019
74886: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74887: LD_ADDR_VAR 0 5
74891: PUSH
74892: LD_VAR 0 1
74896: PUSH
74897: LD_INT 4
74899: MINUS
74900: PUSH
74901: LD_VAR 0 2
74905: PUSH
74906: LD_INT 4
74908: MINUS
74909: PUSH
74910: LD_INT 2
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: LIST
74917: PUSH
74918: LD_VAR 0 1
74922: PUSH
74923: LD_INT 3
74925: MINUS
74926: PUSH
74927: LD_VAR 0 2
74931: PUSH
74932: LD_INT 1
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: LIST
74939: PUSH
74940: LD_VAR 0 1
74944: PUSH
74945: LD_INT 4
74947: PLUS
74948: PUSH
74949: LD_VAR 0 2
74953: PUSH
74954: LD_INT 4
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: LIST
74961: PUSH
74962: LD_VAR 0 1
74966: PUSH
74967: LD_INT 3
74969: PLUS
74970: PUSH
74971: LD_VAR 0 2
74975: PUSH
74976: LD_INT 3
74978: PLUS
74979: PUSH
74980: LD_INT 5
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: LIST
74987: PUSH
74988: LD_VAR 0 1
74992: PUSH
74993: LD_VAR 0 2
74997: PUSH
74998: LD_INT 4
75000: PLUS
75001: PUSH
75002: LD_INT 0
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: ST_TO_ADDR
// end ; 1 :
75017: GO 75717
75019: LD_INT 1
75021: DOUBLE
75022: EQUAL
75023: IFTRUE 75027
75025: GO 75160
75027: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75028: LD_ADDR_VAR 0 5
75032: PUSH
75033: LD_VAR 0 1
75037: PUSH
75038: LD_VAR 0 2
75042: PUSH
75043: LD_INT 4
75045: MINUS
75046: PUSH
75047: LD_INT 3
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: LIST
75054: PUSH
75055: LD_VAR 0 1
75059: PUSH
75060: LD_INT 3
75062: MINUS
75063: PUSH
75064: LD_VAR 0 2
75068: PUSH
75069: LD_INT 3
75071: MINUS
75072: PUSH
75073: LD_INT 2
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: LIST
75080: PUSH
75081: LD_VAR 0 1
75085: PUSH
75086: LD_INT 4
75088: MINUS
75089: PUSH
75090: LD_VAR 0 2
75094: PUSH
75095: LD_INT 1
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: LIST
75102: PUSH
75103: LD_VAR 0 1
75107: PUSH
75108: LD_VAR 0 2
75112: PUSH
75113: LD_INT 3
75115: PLUS
75116: PUSH
75117: LD_INT 0
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: LIST
75124: PUSH
75125: LD_VAR 0 1
75129: PUSH
75130: LD_INT 4
75132: PLUS
75133: PUSH
75134: LD_VAR 0 2
75138: PUSH
75139: LD_INT 4
75141: PLUS
75142: PUSH
75143: LD_INT 5
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: LIST
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: ST_TO_ADDR
// end ; 2 :
75158: GO 75717
75160: LD_INT 2
75162: DOUBLE
75163: EQUAL
75164: IFTRUE 75168
75166: GO 75297
75168: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75169: LD_ADDR_VAR 0 5
75173: PUSH
75174: LD_VAR 0 1
75178: PUSH
75179: LD_VAR 0 2
75183: PUSH
75184: LD_INT 3
75186: MINUS
75187: PUSH
75188: LD_INT 3
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: LIST
75195: PUSH
75196: LD_VAR 0 1
75200: PUSH
75201: LD_INT 4
75203: PLUS
75204: PUSH
75205: LD_VAR 0 2
75209: PUSH
75210: LD_INT 4
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: LIST
75217: PUSH
75218: LD_VAR 0 1
75222: PUSH
75223: LD_VAR 0 2
75227: PUSH
75228: LD_INT 4
75230: PLUS
75231: PUSH
75232: LD_INT 0
75234: PUSH
75235: EMPTY
75236: LIST
75237: LIST
75238: LIST
75239: PUSH
75240: LD_VAR 0 1
75244: PUSH
75245: LD_INT 3
75247: MINUS
75248: PUSH
75249: LD_VAR 0 2
75253: PUSH
75254: LD_INT 1
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: LIST
75261: PUSH
75262: LD_VAR 0 1
75266: PUSH
75267: LD_INT 4
75269: MINUS
75270: PUSH
75271: LD_VAR 0 2
75275: PUSH
75276: LD_INT 4
75278: MINUS
75279: PUSH
75280: LD_INT 2
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: LIST
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: ST_TO_ADDR
// end ; 3 :
75295: GO 75717
75297: LD_INT 3
75299: DOUBLE
75300: EQUAL
75301: IFTRUE 75305
75303: GO 75438
75305: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75306: LD_ADDR_VAR 0 5
75310: PUSH
75311: LD_VAR 0 1
75315: PUSH
75316: LD_INT 3
75318: PLUS
75319: PUSH
75320: LD_VAR 0 2
75324: PUSH
75325: LD_INT 4
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: LIST
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_INT 4
75340: PLUS
75341: PUSH
75342: LD_VAR 0 2
75346: PUSH
75347: LD_INT 4
75349: PLUS
75350: PUSH
75351: LD_INT 5
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: LIST
75358: PUSH
75359: LD_VAR 0 1
75363: PUSH
75364: LD_INT 4
75366: MINUS
75367: PUSH
75368: LD_VAR 0 2
75372: PUSH
75373: LD_INT 1
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: LIST
75380: PUSH
75381: LD_VAR 0 1
75385: PUSH
75386: LD_VAR 0 2
75390: PUSH
75391: LD_INT 4
75393: MINUS
75394: PUSH
75395: LD_INT 3
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: LIST
75402: PUSH
75403: LD_VAR 0 1
75407: PUSH
75408: LD_INT 3
75410: MINUS
75411: PUSH
75412: LD_VAR 0 2
75416: PUSH
75417: LD_INT 3
75419: MINUS
75420: PUSH
75421: LD_INT 2
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: LIST
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: ST_TO_ADDR
// end ; 4 :
75436: GO 75717
75438: LD_INT 4
75440: DOUBLE
75441: EQUAL
75442: IFTRUE 75446
75444: GO 75579
75446: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75447: LD_ADDR_VAR 0 5
75451: PUSH
75452: LD_VAR 0 1
75456: PUSH
75457: LD_VAR 0 2
75461: PUSH
75462: LD_INT 4
75464: PLUS
75465: PUSH
75466: LD_INT 0
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: LIST
75473: PUSH
75474: LD_VAR 0 1
75478: PUSH
75479: LD_INT 3
75481: PLUS
75482: PUSH
75483: LD_VAR 0 2
75487: PUSH
75488: LD_INT 3
75490: PLUS
75491: PUSH
75492: LD_INT 5
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: PUSH
75500: LD_VAR 0 1
75504: PUSH
75505: LD_INT 4
75507: PLUS
75508: PUSH
75509: LD_VAR 0 2
75513: PUSH
75514: LD_INT 4
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: LIST
75521: PUSH
75522: LD_VAR 0 1
75526: PUSH
75527: LD_VAR 0 2
75531: PUSH
75532: LD_INT 3
75534: MINUS
75535: PUSH
75536: LD_INT 3
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: LIST
75543: PUSH
75544: LD_VAR 0 1
75548: PUSH
75549: LD_INT 4
75551: MINUS
75552: PUSH
75553: LD_VAR 0 2
75557: PUSH
75558: LD_INT 4
75560: MINUS
75561: PUSH
75562: LD_INT 2
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: LIST
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: ST_TO_ADDR
// end ; 5 :
75577: GO 75717
75579: LD_INT 5
75581: DOUBLE
75582: EQUAL
75583: IFTRUE 75587
75585: GO 75716
75587: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75588: LD_ADDR_VAR 0 5
75592: PUSH
75593: LD_VAR 0 1
75597: PUSH
75598: LD_INT 4
75600: MINUS
75601: PUSH
75602: LD_VAR 0 2
75606: PUSH
75607: LD_INT 1
75609: PUSH
75610: EMPTY
75611: LIST
75612: LIST
75613: LIST
75614: PUSH
75615: LD_VAR 0 1
75619: PUSH
75620: LD_VAR 0 2
75624: PUSH
75625: LD_INT 4
75627: MINUS
75628: PUSH
75629: LD_INT 3
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: LIST
75636: PUSH
75637: LD_VAR 0 1
75641: PUSH
75642: LD_INT 4
75644: PLUS
75645: PUSH
75646: LD_VAR 0 2
75650: PUSH
75651: LD_INT 4
75653: PLUS
75654: PUSH
75655: LD_INT 5
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: LIST
75662: PUSH
75663: LD_VAR 0 1
75667: PUSH
75668: LD_INT 3
75670: PLUS
75671: PUSH
75672: LD_VAR 0 2
75676: PUSH
75677: LD_INT 4
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: LIST
75684: PUSH
75685: LD_VAR 0 1
75689: PUSH
75690: LD_VAR 0 2
75694: PUSH
75695: LD_INT 3
75697: PLUS
75698: PUSH
75699: LD_INT 0
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: LIST
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: ST_TO_ADDR
// end ; end ;
75714: GO 75717
75716: POP
// result := list ;
75717: LD_ADDR_VAR 0 4
75721: PUSH
75722: LD_VAR 0 5
75726: ST_TO_ADDR
// end ;
75727: LD_VAR 0 4
75731: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75732: LD_INT 0
75734: PPUSH
75735: PPUSH
75736: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75737: LD_VAR 0 1
75741: NOT
75742: PUSH
75743: LD_VAR 0 2
75747: PUSH
75748: LD_INT 1
75750: PUSH
75751: LD_INT 2
75753: PUSH
75754: LD_INT 3
75756: PUSH
75757: LD_INT 4
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: IN
75766: NOT
75767: OR
75768: IFFALSE 75772
// exit ;
75770: GO 75864
// tmp := [ ] ;
75772: LD_ADDR_VAR 0 5
75776: PUSH
75777: EMPTY
75778: ST_TO_ADDR
// for i in units do
75779: LD_ADDR_VAR 0 4
75783: PUSH
75784: LD_VAR 0 1
75788: PUSH
75789: FOR_IN
75790: IFFALSE 75833
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75792: LD_ADDR_VAR 0 5
75796: PUSH
75797: LD_VAR 0 5
75801: PPUSH
75802: LD_VAR 0 5
75806: PUSH
75807: LD_INT 1
75809: PLUS
75810: PPUSH
75811: LD_VAR 0 4
75815: PPUSH
75816: LD_VAR 0 2
75820: PPUSH
75821: CALL_OW 259
75825: PPUSH
75826: CALL_OW 2
75830: ST_TO_ADDR
75831: GO 75789
75833: POP
75834: POP
// if not tmp then
75835: LD_VAR 0 5
75839: NOT
75840: IFFALSE 75844
// exit ;
75842: GO 75864
// result := SortListByListDesc ( units , tmp ) ;
75844: LD_ADDR_VAR 0 3
75848: PUSH
75849: LD_VAR 0 1
75853: PPUSH
75854: LD_VAR 0 5
75858: PPUSH
75859: CALL_OW 77
75863: ST_TO_ADDR
// end ;
75864: LD_VAR 0 3
75868: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75869: LD_INT 0
75871: PPUSH
75872: PPUSH
75873: PPUSH
// result := false ;
75874: LD_ADDR_VAR 0 3
75878: PUSH
75879: LD_INT 0
75881: ST_TO_ADDR
// x := GetX ( building ) ;
75882: LD_ADDR_VAR 0 4
75886: PUSH
75887: LD_VAR 0 2
75891: PPUSH
75892: CALL_OW 250
75896: ST_TO_ADDR
// y := GetY ( building ) ;
75897: LD_ADDR_VAR 0 5
75901: PUSH
75902: LD_VAR 0 2
75906: PPUSH
75907: CALL_OW 251
75911: ST_TO_ADDR
// if not building or not x or not y then
75912: LD_VAR 0 2
75916: NOT
75917: PUSH
75918: LD_VAR 0 4
75922: NOT
75923: OR
75924: PUSH
75925: LD_VAR 0 5
75929: NOT
75930: OR
75931: IFFALSE 75935
// exit ;
75933: GO 76027
// if GetTaskList ( unit ) then
75935: LD_VAR 0 1
75939: PPUSH
75940: CALL_OW 437
75944: IFFALSE 76027
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75946: LD_STRING e
75948: PUSH
75949: LD_VAR 0 1
75953: PPUSH
75954: CALL_OW 437
75958: PUSH
75959: LD_INT 1
75961: ARRAY
75962: PUSH
75963: LD_INT 1
75965: ARRAY
75966: EQUAL
75967: PUSH
75968: LD_VAR 0 4
75972: PUSH
75973: LD_VAR 0 1
75977: PPUSH
75978: CALL_OW 437
75982: PUSH
75983: LD_INT 1
75985: ARRAY
75986: PUSH
75987: LD_INT 2
75989: ARRAY
75990: EQUAL
75991: AND
75992: PUSH
75993: LD_VAR 0 5
75997: PUSH
75998: LD_VAR 0 1
76002: PPUSH
76003: CALL_OW 437
76007: PUSH
76008: LD_INT 1
76010: ARRAY
76011: PUSH
76012: LD_INT 3
76014: ARRAY
76015: EQUAL
76016: AND
76017: IFFALSE 76027
// result := true end ;
76019: LD_ADDR_VAR 0 3
76023: PUSH
76024: LD_INT 1
76026: ST_TO_ADDR
// end ;
76027: LD_VAR 0 3
76031: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76032: LD_INT 0
76034: PPUSH
// result := false ;
76035: LD_ADDR_VAR 0 4
76039: PUSH
76040: LD_INT 0
76042: ST_TO_ADDR
// if GetTaskList ( unit ) then
76043: LD_VAR 0 1
76047: PPUSH
76048: CALL_OW 437
76052: IFFALSE 76135
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76054: LD_STRING M
76056: PUSH
76057: LD_VAR 0 1
76061: PPUSH
76062: CALL_OW 437
76066: PUSH
76067: LD_INT 1
76069: ARRAY
76070: PUSH
76071: LD_INT 1
76073: ARRAY
76074: EQUAL
76075: PUSH
76076: LD_VAR 0 2
76080: PUSH
76081: LD_VAR 0 1
76085: PPUSH
76086: CALL_OW 437
76090: PUSH
76091: LD_INT 1
76093: ARRAY
76094: PUSH
76095: LD_INT 2
76097: ARRAY
76098: EQUAL
76099: AND
76100: PUSH
76101: LD_VAR 0 3
76105: PUSH
76106: LD_VAR 0 1
76110: PPUSH
76111: CALL_OW 437
76115: PUSH
76116: LD_INT 1
76118: ARRAY
76119: PUSH
76120: LD_INT 3
76122: ARRAY
76123: EQUAL
76124: AND
76125: IFFALSE 76135
// result := true ;
76127: LD_ADDR_VAR 0 4
76131: PUSH
76132: LD_INT 1
76134: ST_TO_ADDR
// end ; end ;
76135: LD_VAR 0 4
76139: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76140: LD_INT 0
76142: PPUSH
76143: PPUSH
76144: PPUSH
76145: PPUSH
// if not unit or not area then
76146: LD_VAR 0 1
76150: NOT
76151: PUSH
76152: LD_VAR 0 2
76156: NOT
76157: OR
76158: IFFALSE 76162
// exit ;
76160: GO 76326
// tmp := AreaToList ( area , i ) ;
76162: LD_ADDR_VAR 0 6
76166: PUSH
76167: LD_VAR 0 2
76171: PPUSH
76172: LD_VAR 0 5
76176: PPUSH
76177: CALL_OW 517
76181: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76182: LD_ADDR_VAR 0 5
76186: PUSH
76187: DOUBLE
76188: LD_INT 1
76190: DEC
76191: ST_TO_ADDR
76192: LD_VAR 0 6
76196: PUSH
76197: LD_INT 1
76199: ARRAY
76200: PUSH
76201: FOR_TO
76202: IFFALSE 76324
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76204: LD_ADDR_VAR 0 7
76208: PUSH
76209: LD_VAR 0 6
76213: PUSH
76214: LD_INT 1
76216: ARRAY
76217: PUSH
76218: LD_VAR 0 5
76222: ARRAY
76223: PUSH
76224: LD_VAR 0 6
76228: PUSH
76229: LD_INT 2
76231: ARRAY
76232: PUSH
76233: LD_VAR 0 5
76237: ARRAY
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76243: LD_VAR 0 7
76247: PUSH
76248: LD_INT 1
76250: ARRAY
76251: PPUSH
76252: LD_VAR 0 7
76256: PUSH
76257: LD_INT 2
76259: ARRAY
76260: PPUSH
76261: CALL_OW 428
76265: PUSH
76266: LD_INT 0
76268: EQUAL
76269: IFFALSE 76322
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76271: LD_VAR 0 1
76275: PPUSH
76276: LD_VAR 0 7
76280: PUSH
76281: LD_INT 1
76283: ARRAY
76284: PPUSH
76285: LD_VAR 0 7
76289: PUSH
76290: LD_INT 2
76292: ARRAY
76293: PPUSH
76294: LD_VAR 0 3
76298: PPUSH
76299: CALL_OW 48
// result := IsPlaced ( unit ) ;
76303: LD_ADDR_VAR 0 4
76307: PUSH
76308: LD_VAR 0 1
76312: PPUSH
76313: CALL_OW 305
76317: ST_TO_ADDR
// exit ;
76318: POP
76319: POP
76320: GO 76326
// end ; end ;
76322: GO 76201
76324: POP
76325: POP
// end ;
76326: LD_VAR 0 4
76330: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76331: LD_INT 0
76333: PPUSH
76334: PPUSH
76335: PPUSH
// if not side or side > 8 then
76336: LD_VAR 0 1
76340: NOT
76341: PUSH
76342: LD_VAR 0 1
76346: PUSH
76347: LD_INT 8
76349: GREATER
76350: OR
76351: IFFALSE 76355
// exit ;
76353: GO 76542
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76355: LD_ADDR_VAR 0 4
76359: PUSH
76360: LD_INT 22
76362: PUSH
76363: LD_VAR 0 1
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: PUSH
76372: LD_INT 21
76374: PUSH
76375: LD_INT 3
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: PPUSH
76386: CALL_OW 69
76390: ST_TO_ADDR
// if not tmp then
76391: LD_VAR 0 4
76395: NOT
76396: IFFALSE 76400
// exit ;
76398: GO 76542
// enable_addtolog := true ;
76400: LD_ADDR_OWVAR 81
76404: PUSH
76405: LD_INT 1
76407: ST_TO_ADDR
// AddToLog ( [ ) ;
76408: LD_STRING [
76410: PPUSH
76411: CALL_OW 561
// for i in tmp do
76415: LD_ADDR_VAR 0 3
76419: PUSH
76420: LD_VAR 0 4
76424: PUSH
76425: FOR_IN
76426: IFFALSE 76533
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76428: LD_STRING [
76430: PUSH
76431: LD_VAR 0 3
76435: PPUSH
76436: CALL_OW 266
76440: STR
76441: PUSH
76442: LD_STRING , 
76444: STR
76445: PUSH
76446: LD_VAR 0 3
76450: PPUSH
76451: CALL_OW 250
76455: STR
76456: PUSH
76457: LD_STRING , 
76459: STR
76460: PUSH
76461: LD_VAR 0 3
76465: PPUSH
76466: CALL_OW 251
76470: STR
76471: PUSH
76472: LD_STRING , 
76474: STR
76475: PUSH
76476: LD_VAR 0 3
76480: PPUSH
76481: CALL_OW 254
76485: STR
76486: PUSH
76487: LD_STRING , 
76489: STR
76490: PUSH
76491: LD_VAR 0 3
76495: PPUSH
76496: LD_INT 1
76498: PPUSH
76499: CALL_OW 268
76503: STR
76504: PUSH
76505: LD_STRING , 
76507: STR
76508: PUSH
76509: LD_VAR 0 3
76513: PPUSH
76514: LD_INT 2
76516: PPUSH
76517: CALL_OW 268
76521: STR
76522: PUSH
76523: LD_STRING ],
76525: STR
76526: PPUSH
76527: CALL_OW 561
// end ;
76531: GO 76425
76533: POP
76534: POP
// AddToLog ( ]; ) ;
76535: LD_STRING ];
76537: PPUSH
76538: CALL_OW 561
// end ;
76542: LD_VAR 0 2
76546: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76547: LD_INT 0
76549: PPUSH
76550: PPUSH
76551: PPUSH
76552: PPUSH
76553: PPUSH
// if not area or not rate or not max then
76554: LD_VAR 0 1
76558: NOT
76559: PUSH
76560: LD_VAR 0 2
76564: NOT
76565: OR
76566: PUSH
76567: LD_VAR 0 4
76571: NOT
76572: OR
76573: IFFALSE 76577
// exit ;
76575: GO 76766
// while 1 do
76577: LD_INT 1
76579: IFFALSE 76766
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76581: LD_ADDR_VAR 0 9
76585: PUSH
76586: LD_VAR 0 1
76590: PPUSH
76591: LD_INT 1
76593: PPUSH
76594: CALL_OW 287
76598: PUSH
76599: LD_INT 10
76601: MUL
76602: ST_TO_ADDR
// r := rate / 10 ;
76603: LD_ADDR_VAR 0 7
76607: PUSH
76608: LD_VAR 0 2
76612: PUSH
76613: LD_INT 10
76615: DIVREAL
76616: ST_TO_ADDR
// time := 1 1$00 ;
76617: LD_ADDR_VAR 0 8
76621: PUSH
76622: LD_INT 2100
76624: ST_TO_ADDR
// if amount < min then
76625: LD_VAR 0 9
76629: PUSH
76630: LD_VAR 0 3
76634: LESS
76635: IFFALSE 76653
// r := r * 2 else
76637: LD_ADDR_VAR 0 7
76641: PUSH
76642: LD_VAR 0 7
76646: PUSH
76647: LD_INT 2
76649: MUL
76650: ST_TO_ADDR
76651: GO 76679
// if amount > max then
76653: LD_VAR 0 9
76657: PUSH
76658: LD_VAR 0 4
76662: GREATER
76663: IFFALSE 76679
// r := r / 2 ;
76665: LD_ADDR_VAR 0 7
76669: PUSH
76670: LD_VAR 0 7
76674: PUSH
76675: LD_INT 2
76677: DIVREAL
76678: ST_TO_ADDR
// time := time / r ;
76679: LD_ADDR_VAR 0 8
76683: PUSH
76684: LD_VAR 0 8
76688: PUSH
76689: LD_VAR 0 7
76693: DIVREAL
76694: ST_TO_ADDR
// if time < 0 then
76695: LD_VAR 0 8
76699: PUSH
76700: LD_INT 0
76702: LESS
76703: IFFALSE 76720
// time := time * - 1 ;
76705: LD_ADDR_VAR 0 8
76709: PUSH
76710: LD_VAR 0 8
76714: PUSH
76715: LD_INT 1
76717: NEG
76718: MUL
76719: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76720: LD_VAR 0 8
76724: PUSH
76725: LD_INT 35
76727: PPUSH
76728: LD_INT 875
76730: PPUSH
76731: CALL_OW 12
76735: PLUS
76736: PPUSH
76737: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76741: LD_INT 1
76743: PPUSH
76744: LD_INT 5
76746: PPUSH
76747: CALL_OW 12
76751: PPUSH
76752: LD_VAR 0 1
76756: PPUSH
76757: LD_INT 1
76759: PPUSH
76760: CALL_OW 55
// end ;
76764: GO 76577
// end ;
76766: LD_VAR 0 5
76770: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76771: LD_INT 0
76773: PPUSH
76774: PPUSH
76775: PPUSH
76776: PPUSH
76777: PPUSH
76778: PPUSH
76779: PPUSH
76780: PPUSH
// if not turrets or not factories then
76781: LD_VAR 0 1
76785: NOT
76786: PUSH
76787: LD_VAR 0 2
76791: NOT
76792: OR
76793: IFFALSE 76797
// exit ;
76795: GO 77104
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76797: LD_ADDR_VAR 0 10
76801: PUSH
76802: LD_INT 5
76804: PUSH
76805: LD_INT 6
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: PUSH
76812: LD_INT 2
76814: PUSH
76815: LD_INT 4
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 3
76824: PUSH
76825: LD_INT 5
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: EMPTY
76833: LIST
76834: LIST
76835: LIST
76836: PUSH
76837: LD_INT 24
76839: PUSH
76840: LD_INT 25
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: LD_INT 23
76849: PUSH
76850: LD_INT 27
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: PUSH
76861: LD_INT 42
76863: PUSH
76864: LD_INT 43
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: PUSH
76871: LD_INT 44
76873: PUSH
76874: LD_INT 46
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: PUSH
76881: LD_INT 45
76883: PUSH
76884: LD_INT 47
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: LIST
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: LIST
76900: ST_TO_ADDR
// result := [ ] ;
76901: LD_ADDR_VAR 0 3
76905: PUSH
76906: EMPTY
76907: ST_TO_ADDR
// for i in turrets do
76908: LD_ADDR_VAR 0 4
76912: PUSH
76913: LD_VAR 0 1
76917: PUSH
76918: FOR_IN
76919: IFFALSE 77102
// begin nat := GetNation ( i ) ;
76921: LD_ADDR_VAR 0 7
76925: PUSH
76926: LD_VAR 0 4
76930: PPUSH
76931: CALL_OW 248
76935: ST_TO_ADDR
// weapon := 0 ;
76936: LD_ADDR_VAR 0 8
76940: PUSH
76941: LD_INT 0
76943: ST_TO_ADDR
// if not nat then
76944: LD_VAR 0 7
76948: NOT
76949: IFFALSE 76953
// continue ;
76951: GO 76918
// for j in list [ nat ] do
76953: LD_ADDR_VAR 0 5
76957: PUSH
76958: LD_VAR 0 10
76962: PUSH
76963: LD_VAR 0 7
76967: ARRAY
76968: PUSH
76969: FOR_IN
76970: IFFALSE 77011
// if GetBWeapon ( i ) = j [ 1 ] then
76972: LD_VAR 0 4
76976: PPUSH
76977: CALL_OW 269
76981: PUSH
76982: LD_VAR 0 5
76986: PUSH
76987: LD_INT 1
76989: ARRAY
76990: EQUAL
76991: IFFALSE 77009
// begin weapon := j [ 2 ] ;
76993: LD_ADDR_VAR 0 8
76997: PUSH
76998: LD_VAR 0 5
77002: PUSH
77003: LD_INT 2
77005: ARRAY
77006: ST_TO_ADDR
// break ;
77007: GO 77011
// end ;
77009: GO 76969
77011: POP
77012: POP
// if not weapon then
77013: LD_VAR 0 8
77017: NOT
77018: IFFALSE 77022
// continue ;
77020: GO 76918
// for k in factories do
77022: LD_ADDR_VAR 0 6
77026: PUSH
77027: LD_VAR 0 2
77031: PUSH
77032: FOR_IN
77033: IFFALSE 77098
// begin weapons := AvailableWeaponList ( k ) ;
77035: LD_ADDR_VAR 0 9
77039: PUSH
77040: LD_VAR 0 6
77044: PPUSH
77045: CALL_OW 478
77049: ST_TO_ADDR
// if not weapons then
77050: LD_VAR 0 9
77054: NOT
77055: IFFALSE 77059
// continue ;
77057: GO 77032
// if weapon in weapons then
77059: LD_VAR 0 8
77063: PUSH
77064: LD_VAR 0 9
77068: IN
77069: IFFALSE 77096
// begin result := [ i , weapon ] ;
77071: LD_ADDR_VAR 0 3
77075: PUSH
77076: LD_VAR 0 4
77080: PUSH
77081: LD_VAR 0 8
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: ST_TO_ADDR
// exit ;
77090: POP
77091: POP
77092: POP
77093: POP
77094: GO 77104
// end ; end ;
77096: GO 77032
77098: POP
77099: POP
// end ;
77100: GO 76918
77102: POP
77103: POP
// end ;
77104: LD_VAR 0 3
77108: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77109: LD_INT 0
77111: PPUSH
// if not side or side > 8 then
77112: LD_VAR 0 3
77116: NOT
77117: PUSH
77118: LD_VAR 0 3
77122: PUSH
77123: LD_INT 8
77125: GREATER
77126: OR
77127: IFFALSE 77131
// exit ;
77129: GO 77190
// if not range then
77131: LD_VAR 0 4
77135: NOT
77136: IFFALSE 77147
// range := - 12 ;
77138: LD_ADDR_VAR 0 4
77142: PUSH
77143: LD_INT 12
77145: NEG
77146: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77147: LD_VAR 0 1
77151: PPUSH
77152: LD_VAR 0 2
77156: PPUSH
77157: LD_VAR 0 3
77161: PPUSH
77162: LD_VAR 0 4
77166: PPUSH
77167: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77171: LD_VAR 0 1
77175: PPUSH
77176: LD_VAR 0 2
77180: PPUSH
77181: LD_VAR 0 3
77185: PPUSH
77186: CALL_OW 331
// end ;
77190: LD_VAR 0 5
77194: RET
// export function Video ( mode ) ; begin
77195: LD_INT 0
77197: PPUSH
// ingame_video = mode ;
77198: LD_ADDR_OWVAR 52
77202: PUSH
77203: LD_VAR 0 1
77207: ST_TO_ADDR
// interface_hidden = mode ;
77208: LD_ADDR_OWVAR 54
77212: PUSH
77213: LD_VAR 0 1
77217: ST_TO_ADDR
// end ;
77218: LD_VAR 0 2
77222: RET
// export function Join ( array , element ) ; begin
77223: LD_INT 0
77225: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77226: LD_ADDR_VAR 0 3
77230: PUSH
77231: LD_VAR 0 1
77235: PPUSH
77236: LD_VAR 0 1
77240: PUSH
77241: LD_INT 1
77243: PLUS
77244: PPUSH
77245: LD_VAR 0 2
77249: PPUSH
77250: CALL_OW 1
77254: ST_TO_ADDR
// end ;
77255: LD_VAR 0 3
77259: RET
// export function JoinUnion ( array , element ) ; begin
77260: LD_INT 0
77262: PPUSH
// result := array union element ;
77263: LD_ADDR_VAR 0 3
77267: PUSH
77268: LD_VAR 0 1
77272: PUSH
77273: LD_VAR 0 2
77277: UNION
77278: ST_TO_ADDR
// end ;
77279: LD_VAR 0 3
77283: RET
// export function GetBehemoths ( side ) ; begin
77284: LD_INT 0
77286: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77287: LD_ADDR_VAR 0 2
77291: PUSH
77292: LD_INT 22
77294: PUSH
77295: LD_VAR 0 1
77299: PUSH
77300: EMPTY
77301: LIST
77302: LIST
77303: PUSH
77304: LD_INT 31
77306: PUSH
77307: LD_INT 25
77309: PUSH
77310: EMPTY
77311: LIST
77312: LIST
77313: PUSH
77314: EMPTY
77315: LIST
77316: LIST
77317: PPUSH
77318: CALL_OW 69
77322: ST_TO_ADDR
// end ;
77323: LD_VAR 0 2
77327: RET
// export function Shuffle ( array ) ; var i , index ; begin
77328: LD_INT 0
77330: PPUSH
77331: PPUSH
77332: PPUSH
// result := [ ] ;
77333: LD_ADDR_VAR 0 2
77337: PUSH
77338: EMPTY
77339: ST_TO_ADDR
// if not array then
77340: LD_VAR 0 1
77344: NOT
77345: IFFALSE 77349
// exit ;
77347: GO 77448
// Randomize ;
77349: CALL_OW 10
// for i = array downto 1 do
77353: LD_ADDR_VAR 0 3
77357: PUSH
77358: DOUBLE
77359: LD_VAR 0 1
77363: INC
77364: ST_TO_ADDR
77365: LD_INT 1
77367: PUSH
77368: FOR_DOWNTO
77369: IFFALSE 77446
// begin index := rand ( 1 , array ) ;
77371: LD_ADDR_VAR 0 4
77375: PUSH
77376: LD_INT 1
77378: PPUSH
77379: LD_VAR 0 1
77383: PPUSH
77384: CALL_OW 12
77388: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77389: LD_ADDR_VAR 0 2
77393: PUSH
77394: LD_VAR 0 2
77398: PPUSH
77399: LD_VAR 0 2
77403: PUSH
77404: LD_INT 1
77406: PLUS
77407: PPUSH
77408: LD_VAR 0 1
77412: PUSH
77413: LD_VAR 0 4
77417: ARRAY
77418: PPUSH
77419: CALL_OW 2
77423: ST_TO_ADDR
// array := Delete ( array , index ) ;
77424: LD_ADDR_VAR 0 1
77428: PUSH
77429: LD_VAR 0 1
77433: PPUSH
77434: LD_VAR 0 4
77438: PPUSH
77439: CALL_OW 3
77443: ST_TO_ADDR
// end ;
77444: GO 77368
77446: POP
77447: POP
// end ;
77448: LD_VAR 0 2
77452: RET
// export function GetBaseMaterials ( base ) ; begin
77453: LD_INT 0
77455: PPUSH
// result := [ 0 , 0 , 0 ] ;
77456: LD_ADDR_VAR 0 2
77460: PUSH
77461: LD_INT 0
77463: PUSH
77464: LD_INT 0
77466: PUSH
77467: LD_INT 0
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: LIST
77474: ST_TO_ADDR
// if not base then
77475: LD_VAR 0 1
77479: NOT
77480: IFFALSE 77484
// exit ;
77482: GO 77533
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77484: LD_ADDR_VAR 0 2
77488: PUSH
77489: LD_VAR 0 1
77493: PPUSH
77494: LD_INT 1
77496: PPUSH
77497: CALL_OW 275
77501: PUSH
77502: LD_VAR 0 1
77506: PPUSH
77507: LD_INT 2
77509: PPUSH
77510: CALL_OW 275
77514: PUSH
77515: LD_VAR 0 1
77519: PPUSH
77520: LD_INT 3
77522: PPUSH
77523: CALL_OW 275
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: LIST
77532: ST_TO_ADDR
// end ;
77533: LD_VAR 0 2
77537: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77538: LD_INT 0
77540: PPUSH
77541: PPUSH
// result := array ;
77542: LD_ADDR_VAR 0 3
77546: PUSH
77547: LD_VAR 0 1
77551: ST_TO_ADDR
// if size >= result then
77552: LD_VAR 0 2
77556: PUSH
77557: LD_VAR 0 3
77561: GREATEREQUAL
77562: IFFALSE 77566
// exit ;
77564: GO 77616
// if size then
77566: LD_VAR 0 2
77570: IFFALSE 77616
// for i := array downto size do
77572: LD_ADDR_VAR 0 4
77576: PUSH
77577: DOUBLE
77578: LD_VAR 0 1
77582: INC
77583: ST_TO_ADDR
77584: LD_VAR 0 2
77588: PUSH
77589: FOR_DOWNTO
77590: IFFALSE 77614
// result := Delete ( result , result ) ;
77592: LD_ADDR_VAR 0 3
77596: PUSH
77597: LD_VAR 0 3
77601: PPUSH
77602: LD_VAR 0 3
77606: PPUSH
77607: CALL_OW 3
77611: ST_TO_ADDR
77612: GO 77589
77614: POP
77615: POP
// end ;
77616: LD_VAR 0 3
77620: RET
// export function ComExit ( unit ) ; var tmp ; begin
77621: LD_INT 0
77623: PPUSH
77624: PPUSH
// if not IsInUnit ( unit ) then
77625: LD_VAR 0 1
77629: PPUSH
77630: CALL_OW 310
77634: NOT
77635: IFFALSE 77639
// exit ;
77637: GO 77699
// tmp := IsInUnit ( unit ) ;
77639: LD_ADDR_VAR 0 3
77643: PUSH
77644: LD_VAR 0 1
77648: PPUSH
77649: CALL_OW 310
77653: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77654: LD_VAR 0 3
77658: PPUSH
77659: CALL_OW 247
77663: PUSH
77664: LD_INT 2
77666: EQUAL
77667: IFFALSE 77680
// ComExitVehicle ( unit ) else
77669: LD_VAR 0 1
77673: PPUSH
77674: CALL_OW 121
77678: GO 77689
// ComExitBuilding ( unit ) ;
77680: LD_VAR 0 1
77684: PPUSH
77685: CALL_OW 122
// result := tmp ;
77689: LD_ADDR_VAR 0 2
77693: PUSH
77694: LD_VAR 0 3
77698: ST_TO_ADDR
// end ;
77699: LD_VAR 0 2
77703: RET
// export function ComExitAll ( units ) ; var i ; begin
77704: LD_INT 0
77706: PPUSH
77707: PPUSH
// if not units then
77708: LD_VAR 0 1
77712: NOT
77713: IFFALSE 77717
// exit ;
77715: GO 77743
// for i in units do
77717: LD_ADDR_VAR 0 3
77721: PUSH
77722: LD_VAR 0 1
77726: PUSH
77727: FOR_IN
77728: IFFALSE 77741
// ComExit ( i ) ;
77730: LD_VAR 0 3
77734: PPUSH
77735: CALL 77621 0 1
77739: GO 77727
77741: POP
77742: POP
// end ;
77743: LD_VAR 0 2
77747: RET
// export function ResetHc ; begin
77748: LD_INT 0
77750: PPUSH
// InitHc ;
77751: CALL_OW 19
// hc_importance := 0 ;
77755: LD_ADDR_OWVAR 32
77759: PUSH
77760: LD_INT 0
77762: ST_TO_ADDR
// end ;
77763: LD_VAR 0 1
77767: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77768: LD_INT 0
77770: PPUSH
77771: PPUSH
77772: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77773: LD_ADDR_VAR 0 6
77777: PUSH
77778: LD_VAR 0 1
77782: PUSH
77783: LD_VAR 0 3
77787: PLUS
77788: PUSH
77789: LD_INT 2
77791: DIV
77792: ST_TO_ADDR
// if _x < 0 then
77793: LD_VAR 0 6
77797: PUSH
77798: LD_INT 0
77800: LESS
77801: IFFALSE 77818
// _x := _x * - 1 ;
77803: LD_ADDR_VAR 0 6
77807: PUSH
77808: LD_VAR 0 6
77812: PUSH
77813: LD_INT 1
77815: NEG
77816: MUL
77817: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77818: LD_ADDR_VAR 0 7
77822: PUSH
77823: LD_VAR 0 2
77827: PUSH
77828: LD_VAR 0 4
77832: PLUS
77833: PUSH
77834: LD_INT 2
77836: DIV
77837: ST_TO_ADDR
// if _y < 0 then
77838: LD_VAR 0 7
77842: PUSH
77843: LD_INT 0
77845: LESS
77846: IFFALSE 77863
// _y := _y * - 1 ;
77848: LD_ADDR_VAR 0 7
77852: PUSH
77853: LD_VAR 0 7
77857: PUSH
77858: LD_INT 1
77860: NEG
77861: MUL
77862: ST_TO_ADDR
// result := [ _x , _y ] ;
77863: LD_ADDR_VAR 0 5
77867: PUSH
77868: LD_VAR 0 6
77872: PUSH
77873: LD_VAR 0 7
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: ST_TO_ADDR
// end ;
77882: LD_VAR 0 5
77886: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77887: LD_INT 0
77889: PPUSH
77890: PPUSH
77891: PPUSH
77892: PPUSH
// task := GetTaskList ( unit ) ;
77893: LD_ADDR_VAR 0 7
77897: PUSH
77898: LD_VAR 0 1
77902: PPUSH
77903: CALL_OW 437
77907: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77908: LD_VAR 0 7
77912: NOT
77913: PUSH
77914: LD_VAR 0 1
77918: PPUSH
77919: LD_VAR 0 2
77923: PPUSH
77924: CALL_OW 308
77928: NOT
77929: AND
77930: IFFALSE 77934
// exit ;
77932: GO 78052
// if IsInArea ( unit , area ) then
77934: LD_VAR 0 1
77938: PPUSH
77939: LD_VAR 0 2
77943: PPUSH
77944: CALL_OW 308
77948: IFFALSE 77966
// begin ComMoveToArea ( unit , goAway ) ;
77950: LD_VAR 0 1
77954: PPUSH
77955: LD_VAR 0 3
77959: PPUSH
77960: CALL_OW 113
// exit ;
77964: GO 78052
// end ; if task [ 1 ] [ 1 ] <> M then
77966: LD_VAR 0 7
77970: PUSH
77971: LD_INT 1
77973: ARRAY
77974: PUSH
77975: LD_INT 1
77977: ARRAY
77978: PUSH
77979: LD_STRING M
77981: NONEQUAL
77982: IFFALSE 77986
// exit ;
77984: GO 78052
// x := task [ 1 ] [ 2 ] ;
77986: LD_ADDR_VAR 0 5
77990: PUSH
77991: LD_VAR 0 7
77995: PUSH
77996: LD_INT 1
77998: ARRAY
77999: PUSH
78000: LD_INT 2
78002: ARRAY
78003: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78004: LD_ADDR_VAR 0 6
78008: PUSH
78009: LD_VAR 0 7
78013: PUSH
78014: LD_INT 1
78016: ARRAY
78017: PUSH
78018: LD_INT 3
78020: ARRAY
78021: ST_TO_ADDR
// if InArea ( x , y , area ) then
78022: LD_VAR 0 5
78026: PPUSH
78027: LD_VAR 0 6
78031: PPUSH
78032: LD_VAR 0 2
78036: PPUSH
78037: CALL_OW 309
78041: IFFALSE 78052
// ComStop ( unit ) ;
78043: LD_VAR 0 1
78047: PPUSH
78048: CALL_OW 141
// end ;
78052: LD_VAR 0 4
78056: RET
// export function Abs ( value ) ; begin
78057: LD_INT 0
78059: PPUSH
// result := value ;
78060: LD_ADDR_VAR 0 2
78064: PUSH
78065: LD_VAR 0 1
78069: ST_TO_ADDR
// if value < 0 then
78070: LD_VAR 0 1
78074: PUSH
78075: LD_INT 0
78077: LESS
78078: IFFALSE 78095
// result := value * - 1 ;
78080: LD_ADDR_VAR 0 2
78084: PUSH
78085: LD_VAR 0 1
78089: PUSH
78090: LD_INT 1
78092: NEG
78093: MUL
78094: ST_TO_ADDR
// end ;
78095: LD_VAR 0 2
78099: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78100: LD_INT 0
78102: PPUSH
78103: PPUSH
78104: PPUSH
78105: PPUSH
78106: PPUSH
78107: PPUSH
78108: PPUSH
78109: PPUSH
// if not unit or not building then
78110: LD_VAR 0 1
78114: NOT
78115: PUSH
78116: LD_VAR 0 2
78120: NOT
78121: OR
78122: IFFALSE 78126
// exit ;
78124: GO 78352
// x := GetX ( building ) ;
78126: LD_ADDR_VAR 0 4
78130: PUSH
78131: LD_VAR 0 2
78135: PPUSH
78136: CALL_OW 250
78140: ST_TO_ADDR
// y := GetY ( building ) ;
78141: LD_ADDR_VAR 0 6
78145: PUSH
78146: LD_VAR 0 2
78150: PPUSH
78151: CALL_OW 251
78155: ST_TO_ADDR
// d := GetDir ( building ) ;
78156: LD_ADDR_VAR 0 8
78160: PUSH
78161: LD_VAR 0 2
78165: PPUSH
78166: CALL_OW 254
78170: ST_TO_ADDR
// r := 4 ;
78171: LD_ADDR_VAR 0 9
78175: PUSH
78176: LD_INT 4
78178: ST_TO_ADDR
// for i := 1 to 5 do
78179: LD_ADDR_VAR 0 10
78183: PUSH
78184: DOUBLE
78185: LD_INT 1
78187: DEC
78188: ST_TO_ADDR
78189: LD_INT 5
78191: PUSH
78192: FOR_TO
78193: IFFALSE 78350
// begin _x := ShiftX ( x , d , r + i ) ;
78195: LD_ADDR_VAR 0 5
78199: PUSH
78200: LD_VAR 0 4
78204: PPUSH
78205: LD_VAR 0 8
78209: PPUSH
78210: LD_VAR 0 9
78214: PUSH
78215: LD_VAR 0 10
78219: PLUS
78220: PPUSH
78221: CALL_OW 272
78225: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78226: LD_ADDR_VAR 0 7
78230: PUSH
78231: LD_VAR 0 6
78235: PPUSH
78236: LD_VAR 0 8
78240: PPUSH
78241: LD_VAR 0 9
78245: PUSH
78246: LD_VAR 0 10
78250: PLUS
78251: PPUSH
78252: CALL_OW 273
78256: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78257: LD_VAR 0 5
78261: PPUSH
78262: LD_VAR 0 7
78266: PPUSH
78267: CALL_OW 488
78271: PUSH
78272: LD_VAR 0 5
78276: PPUSH
78277: LD_VAR 0 7
78281: PPUSH
78282: CALL_OW 428
78286: PPUSH
78287: CALL_OW 247
78291: PUSH
78292: LD_INT 3
78294: PUSH
78295: LD_INT 2
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: IN
78302: NOT
78303: AND
78304: IFFALSE 78348
// begin ComMoveXY ( unit , _x , _y ) ;
78306: LD_VAR 0 1
78310: PPUSH
78311: LD_VAR 0 5
78315: PPUSH
78316: LD_VAR 0 7
78320: PPUSH
78321: CALL_OW 111
// result := [ _x , _y ] ;
78325: LD_ADDR_VAR 0 3
78329: PUSH
78330: LD_VAR 0 5
78334: PUSH
78335: LD_VAR 0 7
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: ST_TO_ADDR
// exit ;
78344: POP
78345: POP
78346: GO 78352
// end ; end ;
78348: GO 78192
78350: POP
78351: POP
// end ;
78352: LD_VAR 0 3
78356: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78357: LD_INT 0
78359: PPUSH
78360: PPUSH
78361: PPUSH
// result := 0 ;
78362: LD_ADDR_VAR 0 3
78366: PUSH
78367: LD_INT 0
78369: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78370: LD_VAR 0 1
78374: PUSH
78375: LD_INT 0
78377: LESS
78378: PUSH
78379: LD_VAR 0 1
78383: PUSH
78384: LD_INT 8
78386: GREATER
78387: OR
78388: PUSH
78389: LD_VAR 0 2
78393: PUSH
78394: LD_INT 0
78396: LESS
78397: OR
78398: PUSH
78399: LD_VAR 0 2
78403: PUSH
78404: LD_INT 8
78406: GREATER
78407: OR
78408: IFFALSE 78412
// exit ;
78410: GO 78487
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78412: LD_ADDR_VAR 0 4
78416: PUSH
78417: LD_INT 22
78419: PUSH
78420: LD_VAR 0 2
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PPUSH
78429: CALL_OW 69
78433: PUSH
78434: FOR_IN
78435: IFFALSE 78485
// begin un := UnitShoot ( i ) ;
78437: LD_ADDR_VAR 0 5
78441: PUSH
78442: LD_VAR 0 4
78446: PPUSH
78447: CALL_OW 504
78451: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78452: LD_VAR 0 5
78456: PPUSH
78457: CALL_OW 255
78461: PUSH
78462: LD_VAR 0 1
78466: EQUAL
78467: IFFALSE 78483
// begin result := un ;
78469: LD_ADDR_VAR 0 3
78473: PUSH
78474: LD_VAR 0 5
78478: ST_TO_ADDR
// exit ;
78479: POP
78480: POP
78481: GO 78487
// end ; end ;
78483: GO 78434
78485: POP
78486: POP
// end ;
78487: LD_VAR 0 3
78491: RET
// export function GetCargoBay ( units ) ; begin
78492: LD_INT 0
78494: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78495: LD_ADDR_VAR 0 2
78499: PUSH
78500: LD_VAR 0 1
78504: PPUSH
78505: LD_INT 2
78507: PUSH
78508: LD_INT 34
78510: PUSH
78511: LD_INT 12
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: PUSH
78518: LD_INT 34
78520: PUSH
78521: LD_INT 51
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: PUSH
78528: LD_INT 34
78530: PUSH
78531: LD_INT 32
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: LD_INT 34
78540: PUSH
78541: LD_EXP 49
78545: PUSH
78546: EMPTY
78547: LIST
78548: LIST
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: PPUSH
78557: CALL_OW 72
78561: ST_TO_ADDR
// end ;
78562: LD_VAR 0 2
78566: RET
// export function Negate ( value ) ; begin
78567: LD_INT 0
78569: PPUSH
// result := not value ;
78570: LD_ADDR_VAR 0 2
78574: PUSH
78575: LD_VAR 0 1
78579: NOT
78580: ST_TO_ADDR
// end ;
78581: LD_VAR 0 2
78585: RET
// export function Inc ( value ) ; begin
78586: LD_INT 0
78588: PPUSH
// result := value + 1 ;
78589: LD_ADDR_VAR 0 2
78593: PUSH
78594: LD_VAR 0 1
78598: PUSH
78599: LD_INT 1
78601: PLUS
78602: ST_TO_ADDR
// end ;
78603: LD_VAR 0 2
78607: RET
// export function Dec ( value ) ; begin
78608: LD_INT 0
78610: PPUSH
// result := value - 1 ;
78611: LD_ADDR_VAR 0 2
78615: PUSH
78616: LD_VAR 0 1
78620: PUSH
78621: LD_INT 1
78623: MINUS
78624: ST_TO_ADDR
// end ;
78625: LD_VAR 0 2
78629: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78630: LD_INT 0
78632: PPUSH
78633: PPUSH
78634: PPUSH
78635: PPUSH
78636: PPUSH
78637: PPUSH
78638: PPUSH
78639: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78640: LD_VAR 0 1
78644: PPUSH
78645: LD_VAR 0 2
78649: PPUSH
78650: CALL_OW 488
78654: NOT
78655: PUSH
78656: LD_VAR 0 3
78660: PPUSH
78661: LD_VAR 0 4
78665: PPUSH
78666: CALL_OW 488
78670: NOT
78671: OR
78672: IFFALSE 78685
// begin result := - 1 ;
78674: LD_ADDR_VAR 0 5
78678: PUSH
78679: LD_INT 1
78681: NEG
78682: ST_TO_ADDR
// exit ;
78683: GO 78920
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78685: LD_ADDR_VAR 0 12
78689: PUSH
78690: LD_VAR 0 1
78694: PPUSH
78695: LD_VAR 0 2
78699: PPUSH
78700: LD_VAR 0 3
78704: PPUSH
78705: LD_VAR 0 4
78709: PPUSH
78710: CALL 77768 0 4
78714: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78715: LD_ADDR_VAR 0 11
78719: PUSH
78720: LD_VAR 0 1
78724: PPUSH
78725: LD_VAR 0 2
78729: PPUSH
78730: LD_VAR 0 12
78734: PUSH
78735: LD_INT 1
78737: ARRAY
78738: PPUSH
78739: LD_VAR 0 12
78743: PUSH
78744: LD_INT 2
78746: ARRAY
78747: PPUSH
78748: CALL_OW 298
78752: ST_TO_ADDR
// distance := 9999 ;
78753: LD_ADDR_VAR 0 10
78757: PUSH
78758: LD_INT 9999
78760: ST_TO_ADDR
// for i := 0 to 5 do
78761: LD_ADDR_VAR 0 6
78765: PUSH
78766: DOUBLE
78767: LD_INT 0
78769: DEC
78770: ST_TO_ADDR
78771: LD_INT 5
78773: PUSH
78774: FOR_TO
78775: IFFALSE 78918
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78777: LD_ADDR_VAR 0 7
78781: PUSH
78782: LD_VAR 0 1
78786: PPUSH
78787: LD_VAR 0 6
78791: PPUSH
78792: LD_VAR 0 11
78796: PPUSH
78797: CALL_OW 272
78801: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78802: LD_ADDR_VAR 0 8
78806: PUSH
78807: LD_VAR 0 2
78811: PPUSH
78812: LD_VAR 0 6
78816: PPUSH
78817: LD_VAR 0 11
78821: PPUSH
78822: CALL_OW 273
78826: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78827: LD_VAR 0 7
78831: PPUSH
78832: LD_VAR 0 8
78836: PPUSH
78837: CALL_OW 488
78841: NOT
78842: IFFALSE 78846
// continue ;
78844: GO 78774
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78846: LD_ADDR_VAR 0 9
78850: PUSH
78851: LD_VAR 0 12
78855: PUSH
78856: LD_INT 1
78858: ARRAY
78859: PPUSH
78860: LD_VAR 0 12
78864: PUSH
78865: LD_INT 2
78867: ARRAY
78868: PPUSH
78869: LD_VAR 0 7
78873: PPUSH
78874: LD_VAR 0 8
78878: PPUSH
78879: CALL_OW 298
78883: ST_TO_ADDR
// if tmp < distance then
78884: LD_VAR 0 9
78888: PUSH
78889: LD_VAR 0 10
78893: LESS
78894: IFFALSE 78916
// begin result := i ;
78896: LD_ADDR_VAR 0 5
78900: PUSH
78901: LD_VAR 0 6
78905: ST_TO_ADDR
// distance := tmp ;
78906: LD_ADDR_VAR 0 10
78910: PUSH
78911: LD_VAR 0 9
78915: ST_TO_ADDR
// end ; end ;
78916: GO 78774
78918: POP
78919: POP
// end ;
78920: LD_VAR 0 5
78924: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78925: LD_INT 0
78927: PPUSH
78928: PPUSH
// if not driver or not IsInUnit ( driver ) then
78929: LD_VAR 0 1
78933: NOT
78934: PUSH
78935: LD_VAR 0 1
78939: PPUSH
78940: CALL_OW 310
78944: NOT
78945: OR
78946: IFFALSE 78950
// exit ;
78948: GO 79040
// vehicle := IsInUnit ( driver ) ;
78950: LD_ADDR_VAR 0 3
78954: PUSH
78955: LD_VAR 0 1
78959: PPUSH
78960: CALL_OW 310
78964: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78965: LD_VAR 0 1
78969: PPUSH
78970: LD_STRING \
78972: PUSH
78973: LD_INT 0
78975: PUSH
78976: LD_INT 0
78978: PUSH
78979: LD_INT 0
78981: PUSH
78982: LD_INT 0
78984: PUSH
78985: LD_INT 0
78987: PUSH
78988: LD_INT 0
78990: PUSH
78991: EMPTY
78992: LIST
78993: LIST
78994: LIST
78995: LIST
78996: LIST
78997: LIST
78998: LIST
78999: PUSH
79000: LD_STRING E
79002: PUSH
79003: LD_INT 0
79005: PUSH
79006: LD_INT 0
79008: PUSH
79009: LD_VAR 0 3
79013: PUSH
79014: LD_INT 0
79016: PUSH
79017: LD_INT 0
79019: PUSH
79020: LD_INT 0
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: LIST
79027: LIST
79028: LIST
79029: LIST
79030: LIST
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PPUSH
79036: CALL_OW 446
// end ;
79040: LD_VAR 0 2
79044: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79045: LD_INT 0
79047: PPUSH
79048: PPUSH
// if not driver or not IsInUnit ( driver ) then
79049: LD_VAR 0 1
79053: NOT
79054: PUSH
79055: LD_VAR 0 1
79059: PPUSH
79060: CALL_OW 310
79064: NOT
79065: OR
79066: IFFALSE 79070
// exit ;
79068: GO 79160
// vehicle := IsInUnit ( driver ) ;
79070: LD_ADDR_VAR 0 3
79074: PUSH
79075: LD_VAR 0 1
79079: PPUSH
79080: CALL_OW 310
79084: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79085: LD_VAR 0 1
79089: PPUSH
79090: LD_STRING \
79092: PUSH
79093: LD_INT 0
79095: PUSH
79096: LD_INT 0
79098: PUSH
79099: LD_INT 0
79101: PUSH
79102: LD_INT 0
79104: PUSH
79105: LD_INT 0
79107: PUSH
79108: LD_INT 0
79110: PUSH
79111: EMPTY
79112: LIST
79113: LIST
79114: LIST
79115: LIST
79116: LIST
79117: LIST
79118: LIST
79119: PUSH
79120: LD_STRING E
79122: PUSH
79123: LD_INT 0
79125: PUSH
79126: LD_INT 0
79128: PUSH
79129: LD_VAR 0 3
79133: PUSH
79134: LD_INT 0
79136: PUSH
79137: LD_INT 0
79139: PUSH
79140: LD_INT 0
79142: PUSH
79143: EMPTY
79144: LIST
79145: LIST
79146: LIST
79147: LIST
79148: LIST
79149: LIST
79150: LIST
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: PPUSH
79156: CALL_OW 447
// end ;
79160: LD_VAR 0 2
79164: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79165: LD_INT 0
79167: PPUSH
79168: PPUSH
79169: PPUSH
// tmp := [ ] ;
79170: LD_ADDR_VAR 0 5
79174: PUSH
79175: EMPTY
79176: ST_TO_ADDR
// for i in units do
79177: LD_ADDR_VAR 0 4
79181: PUSH
79182: LD_VAR 0 1
79186: PUSH
79187: FOR_IN
79188: IFFALSE 79226
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79190: LD_ADDR_VAR 0 5
79194: PUSH
79195: LD_VAR 0 5
79199: PPUSH
79200: LD_VAR 0 5
79204: PUSH
79205: LD_INT 1
79207: PLUS
79208: PPUSH
79209: LD_VAR 0 4
79213: PPUSH
79214: CALL_OW 256
79218: PPUSH
79219: CALL_OW 2
79223: ST_TO_ADDR
79224: GO 79187
79226: POP
79227: POP
// if not tmp then
79228: LD_VAR 0 5
79232: NOT
79233: IFFALSE 79237
// exit ;
79235: GO 79285
// if asc then
79237: LD_VAR 0 2
79241: IFFALSE 79265
// result := SortListByListAsc ( units , tmp ) else
79243: LD_ADDR_VAR 0 3
79247: PUSH
79248: LD_VAR 0 1
79252: PPUSH
79253: LD_VAR 0 5
79257: PPUSH
79258: CALL_OW 76
79262: ST_TO_ADDR
79263: GO 79285
// result := SortListByListDesc ( units , tmp ) ;
79265: LD_ADDR_VAR 0 3
79269: PUSH
79270: LD_VAR 0 1
79274: PPUSH
79275: LD_VAR 0 5
79279: PPUSH
79280: CALL_OW 77
79284: ST_TO_ADDR
// end ;
79285: LD_VAR 0 3
79289: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79290: LD_INT 0
79292: PPUSH
79293: PPUSH
// task := GetTaskList ( mech ) ;
79294: LD_ADDR_VAR 0 4
79298: PUSH
79299: LD_VAR 0 1
79303: PPUSH
79304: CALL_OW 437
79308: ST_TO_ADDR
// if not task then
79309: LD_VAR 0 4
79313: NOT
79314: IFFALSE 79318
// exit ;
79316: GO 79360
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79318: LD_ADDR_VAR 0 3
79322: PUSH
79323: LD_VAR 0 4
79327: PUSH
79328: LD_INT 1
79330: ARRAY
79331: PUSH
79332: LD_INT 1
79334: ARRAY
79335: PUSH
79336: LD_STRING r
79338: EQUAL
79339: PUSH
79340: LD_VAR 0 4
79344: PUSH
79345: LD_INT 1
79347: ARRAY
79348: PUSH
79349: LD_INT 4
79351: ARRAY
79352: PUSH
79353: LD_VAR 0 2
79357: EQUAL
79358: AND
79359: ST_TO_ADDR
// end ;
79360: LD_VAR 0 3
79364: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79365: LD_INT 0
79367: PPUSH
// SetDir ( unit , d ) ;
79368: LD_VAR 0 1
79372: PPUSH
79373: LD_VAR 0 4
79377: PPUSH
79378: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79382: LD_VAR 0 1
79386: PPUSH
79387: LD_VAR 0 2
79391: PPUSH
79392: LD_VAR 0 3
79396: PPUSH
79397: LD_VAR 0 5
79401: PPUSH
79402: CALL_OW 48
// end ;
79406: LD_VAR 0 6
79410: RET
// export function ToNaturalNumber ( number ) ; begin
79411: LD_INT 0
79413: PPUSH
// result := number div 1 ;
79414: LD_ADDR_VAR 0 2
79418: PUSH
79419: LD_VAR 0 1
79423: PUSH
79424: LD_INT 1
79426: DIV
79427: ST_TO_ADDR
// if number < 0 then
79428: LD_VAR 0 1
79432: PUSH
79433: LD_INT 0
79435: LESS
79436: IFFALSE 79446
// result := 0 ;
79438: LD_ADDR_VAR 0 2
79442: PUSH
79443: LD_INT 0
79445: ST_TO_ADDR
// end ;
79446: LD_VAR 0 2
79450: RET
// export function SortByClass ( units , class ) ; var un ; begin
79451: LD_INT 0
79453: PPUSH
79454: PPUSH
// if not units or not class then
79455: LD_VAR 0 1
79459: NOT
79460: PUSH
79461: LD_VAR 0 2
79465: NOT
79466: OR
79467: IFFALSE 79471
// exit ;
79469: GO 79566
// result := [ ] ;
79471: LD_ADDR_VAR 0 3
79475: PUSH
79476: EMPTY
79477: ST_TO_ADDR
// for un in units do
79478: LD_ADDR_VAR 0 4
79482: PUSH
79483: LD_VAR 0 1
79487: PUSH
79488: FOR_IN
79489: IFFALSE 79564
// if GetClass ( un ) = class then
79491: LD_VAR 0 4
79495: PPUSH
79496: CALL_OW 257
79500: PUSH
79501: LD_VAR 0 2
79505: EQUAL
79506: IFFALSE 79533
// result := Insert ( result , 1 , un ) else
79508: LD_ADDR_VAR 0 3
79512: PUSH
79513: LD_VAR 0 3
79517: PPUSH
79518: LD_INT 1
79520: PPUSH
79521: LD_VAR 0 4
79525: PPUSH
79526: CALL_OW 2
79530: ST_TO_ADDR
79531: GO 79562
// result := Replace ( result , result + 1 , un ) ;
79533: LD_ADDR_VAR 0 3
79537: PUSH
79538: LD_VAR 0 3
79542: PPUSH
79543: LD_VAR 0 3
79547: PUSH
79548: LD_INT 1
79550: PLUS
79551: PPUSH
79552: LD_VAR 0 4
79556: PPUSH
79557: CALL_OW 1
79561: ST_TO_ADDR
79562: GO 79488
79564: POP
79565: POP
// end ;
79566: LD_VAR 0 3
79570: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79571: LD_INT 0
79573: PPUSH
79574: PPUSH
79575: PPUSH
79576: PPUSH
79577: PPUSH
79578: PPUSH
79579: PPUSH
// result := [ ] ;
79580: LD_ADDR_VAR 0 4
79584: PUSH
79585: EMPTY
79586: ST_TO_ADDR
// if x - r < 0 then
79587: LD_VAR 0 1
79591: PUSH
79592: LD_VAR 0 3
79596: MINUS
79597: PUSH
79598: LD_INT 0
79600: LESS
79601: IFFALSE 79613
// min_x := 0 else
79603: LD_ADDR_VAR 0 8
79607: PUSH
79608: LD_INT 0
79610: ST_TO_ADDR
79611: GO 79629
// min_x := x - r ;
79613: LD_ADDR_VAR 0 8
79617: PUSH
79618: LD_VAR 0 1
79622: PUSH
79623: LD_VAR 0 3
79627: MINUS
79628: ST_TO_ADDR
// if y - r < 0 then
79629: LD_VAR 0 2
79633: PUSH
79634: LD_VAR 0 3
79638: MINUS
79639: PUSH
79640: LD_INT 0
79642: LESS
79643: IFFALSE 79655
// min_y := 0 else
79645: LD_ADDR_VAR 0 7
79649: PUSH
79650: LD_INT 0
79652: ST_TO_ADDR
79653: GO 79671
// min_y := y - r ;
79655: LD_ADDR_VAR 0 7
79659: PUSH
79660: LD_VAR 0 2
79664: PUSH
79665: LD_VAR 0 3
79669: MINUS
79670: ST_TO_ADDR
// max_x := x + r ;
79671: LD_ADDR_VAR 0 9
79675: PUSH
79676: LD_VAR 0 1
79680: PUSH
79681: LD_VAR 0 3
79685: PLUS
79686: ST_TO_ADDR
// max_y := y + r ;
79687: LD_ADDR_VAR 0 10
79691: PUSH
79692: LD_VAR 0 2
79696: PUSH
79697: LD_VAR 0 3
79701: PLUS
79702: ST_TO_ADDR
// for _x = min_x to max_x do
79703: LD_ADDR_VAR 0 5
79707: PUSH
79708: DOUBLE
79709: LD_VAR 0 8
79713: DEC
79714: ST_TO_ADDR
79715: LD_VAR 0 9
79719: PUSH
79720: FOR_TO
79721: IFFALSE 79822
// for _y = min_y to max_y do
79723: LD_ADDR_VAR 0 6
79727: PUSH
79728: DOUBLE
79729: LD_VAR 0 7
79733: DEC
79734: ST_TO_ADDR
79735: LD_VAR 0 10
79739: PUSH
79740: FOR_TO
79741: IFFALSE 79818
// begin if not ValidHex ( _x , _y ) then
79743: LD_VAR 0 5
79747: PPUSH
79748: LD_VAR 0 6
79752: PPUSH
79753: CALL_OW 488
79757: NOT
79758: IFFALSE 79762
// continue ;
79760: GO 79740
// if GetResourceTypeXY ( _x , _y ) then
79762: LD_VAR 0 5
79766: PPUSH
79767: LD_VAR 0 6
79771: PPUSH
79772: CALL_OW 283
79776: IFFALSE 79816
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79778: LD_ADDR_VAR 0 4
79782: PUSH
79783: LD_VAR 0 4
79787: PPUSH
79788: LD_VAR 0 4
79792: PUSH
79793: LD_INT 1
79795: PLUS
79796: PPUSH
79797: LD_VAR 0 5
79801: PUSH
79802: LD_VAR 0 6
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PPUSH
79811: CALL_OW 1
79815: ST_TO_ADDR
// end ;
79816: GO 79740
79818: POP
79819: POP
79820: GO 79720
79822: POP
79823: POP
// end ;
79824: LD_VAR 0 4
79828: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79829: LD_INT 0
79831: PPUSH
79832: PPUSH
79833: PPUSH
79834: PPUSH
79835: PPUSH
79836: PPUSH
79837: PPUSH
79838: PPUSH
// if not units then
79839: LD_VAR 0 1
79843: NOT
79844: IFFALSE 79848
// exit ;
79846: GO 80374
// result := UnitFilter ( units , [ f_ok ] ) ;
79848: LD_ADDR_VAR 0 3
79852: PUSH
79853: LD_VAR 0 1
79857: PPUSH
79858: LD_INT 50
79860: PUSH
79861: EMPTY
79862: LIST
79863: PPUSH
79864: CALL_OW 72
79868: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79869: LD_ADDR_VAR 0 8
79873: PUSH
79874: LD_VAR 0 1
79878: PUSH
79879: LD_INT 1
79881: ARRAY
79882: PPUSH
79883: CALL_OW 255
79887: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79888: LD_ADDR_VAR 0 10
79892: PUSH
79893: LD_INT 29
79895: PUSH
79896: LD_EXP 52
79900: PUSH
79901: LD_INT 49
79903: PUSH
79904: EMPTY
79905: LIST
79906: LIST
79907: LIST
79908: ST_TO_ADDR
// if not result then
79909: LD_VAR 0 3
79913: NOT
79914: IFFALSE 79918
// exit ;
79916: GO 80374
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79918: LD_ADDR_VAR 0 5
79922: PUSH
79923: LD_INT 81
79925: PUSH
79926: LD_VAR 0 8
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PPUSH
79935: CALL_OW 69
79939: ST_TO_ADDR
// for i in result do
79940: LD_ADDR_VAR 0 4
79944: PUSH
79945: LD_VAR 0 3
79949: PUSH
79950: FOR_IN
79951: IFFALSE 80372
// begin tag := GetTag ( i ) + 1 ;
79953: LD_ADDR_VAR 0 9
79957: PUSH
79958: LD_VAR 0 4
79962: PPUSH
79963: CALL_OW 110
79967: PUSH
79968: LD_INT 1
79970: PLUS
79971: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79972: LD_ADDR_VAR 0 7
79976: PUSH
79977: LD_VAR 0 4
79981: PPUSH
79982: CALL_OW 250
79986: PPUSH
79987: LD_VAR 0 4
79991: PPUSH
79992: CALL_OW 251
79996: PPUSH
79997: LD_INT 6
79999: PPUSH
80000: CALL 79571 0 3
80004: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80005: LD_VAR 0 4
80009: PPUSH
80010: CALL_OW 247
80014: PUSH
80015: LD_INT 2
80017: EQUAL
80018: PUSH
80019: LD_VAR 0 7
80023: AND
80024: PUSH
80025: LD_VAR 0 4
80029: PPUSH
80030: CALL_OW 264
80034: PUSH
80035: LD_VAR 0 10
80039: IN
80040: NOT
80041: AND
80042: IFFALSE 80081
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80044: LD_VAR 0 4
80048: PPUSH
80049: LD_VAR 0 7
80053: PUSH
80054: LD_INT 1
80056: ARRAY
80057: PUSH
80058: LD_INT 1
80060: ARRAY
80061: PPUSH
80062: LD_VAR 0 7
80066: PUSH
80067: LD_INT 1
80069: ARRAY
80070: PUSH
80071: LD_INT 2
80073: ARRAY
80074: PPUSH
80075: CALL_OW 116
80079: GO 80370
// if path > tag then
80081: LD_VAR 0 2
80085: PUSH
80086: LD_VAR 0 9
80090: GREATER
80091: IFFALSE 80299
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80093: LD_ADDR_VAR 0 6
80097: PUSH
80098: LD_VAR 0 5
80102: PPUSH
80103: LD_INT 91
80105: PUSH
80106: LD_VAR 0 4
80110: PUSH
80111: LD_INT 8
80113: PUSH
80114: EMPTY
80115: LIST
80116: LIST
80117: LIST
80118: PPUSH
80119: CALL_OW 72
80123: ST_TO_ADDR
// if nearEnemy then
80124: LD_VAR 0 6
80128: IFFALSE 80197
// begin if GetWeapon ( i ) = ru_time_lapser then
80130: LD_VAR 0 4
80134: PPUSH
80135: CALL_OW 264
80139: PUSH
80140: LD_INT 49
80142: EQUAL
80143: IFFALSE 80171
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80145: LD_VAR 0 4
80149: PPUSH
80150: LD_VAR 0 6
80154: PPUSH
80155: LD_VAR 0 4
80159: PPUSH
80160: CALL_OW 74
80164: PPUSH
80165: CALL_OW 112
80169: GO 80195
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80171: LD_VAR 0 4
80175: PPUSH
80176: LD_VAR 0 6
80180: PPUSH
80181: LD_VAR 0 4
80185: PPUSH
80186: CALL_OW 74
80190: PPUSH
80191: CALL_OW 115
// end else
80195: GO 80297
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80197: LD_VAR 0 4
80201: PPUSH
80202: LD_VAR 0 2
80206: PUSH
80207: LD_VAR 0 9
80211: ARRAY
80212: PUSH
80213: LD_INT 1
80215: ARRAY
80216: PPUSH
80217: LD_VAR 0 2
80221: PUSH
80222: LD_VAR 0 9
80226: ARRAY
80227: PUSH
80228: LD_INT 2
80230: ARRAY
80231: PPUSH
80232: CALL_OW 297
80236: PUSH
80237: LD_INT 6
80239: GREATER
80240: IFFALSE 80283
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80242: LD_VAR 0 4
80246: PPUSH
80247: LD_VAR 0 2
80251: PUSH
80252: LD_VAR 0 9
80256: ARRAY
80257: PUSH
80258: LD_INT 1
80260: ARRAY
80261: PPUSH
80262: LD_VAR 0 2
80266: PUSH
80267: LD_VAR 0 9
80271: ARRAY
80272: PUSH
80273: LD_INT 2
80275: ARRAY
80276: PPUSH
80277: CALL_OW 114
80281: GO 80297
// SetTag ( i , tag ) ;
80283: LD_VAR 0 4
80287: PPUSH
80288: LD_VAR 0 9
80292: PPUSH
80293: CALL_OW 109
// end else
80297: GO 80370
// if enemy then
80299: LD_VAR 0 5
80303: IFFALSE 80370
// begin if GetWeapon ( i ) = ru_time_lapser then
80305: LD_VAR 0 4
80309: PPUSH
80310: CALL_OW 264
80314: PUSH
80315: LD_INT 49
80317: EQUAL
80318: IFFALSE 80346
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80320: LD_VAR 0 4
80324: PPUSH
80325: LD_VAR 0 5
80329: PPUSH
80330: LD_VAR 0 4
80334: PPUSH
80335: CALL_OW 74
80339: PPUSH
80340: CALL_OW 112
80344: GO 80370
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80346: LD_VAR 0 4
80350: PPUSH
80351: LD_VAR 0 5
80355: PPUSH
80356: LD_VAR 0 4
80360: PPUSH
80361: CALL_OW 74
80365: PPUSH
80366: CALL_OW 115
// end ; end ;
80370: GO 79950
80372: POP
80373: POP
// end ;
80374: LD_VAR 0 3
80378: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80379: LD_INT 0
80381: PPUSH
80382: PPUSH
80383: PPUSH
// if not unit or IsInUnit ( unit ) then
80384: LD_VAR 0 1
80388: NOT
80389: PUSH
80390: LD_VAR 0 1
80394: PPUSH
80395: CALL_OW 310
80399: OR
80400: IFFALSE 80404
// exit ;
80402: GO 80495
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80404: LD_ADDR_VAR 0 4
80408: PUSH
80409: LD_VAR 0 1
80413: PPUSH
80414: CALL_OW 250
80418: PPUSH
80419: LD_VAR 0 2
80423: PPUSH
80424: LD_INT 1
80426: PPUSH
80427: CALL_OW 272
80431: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80432: LD_ADDR_VAR 0 5
80436: PUSH
80437: LD_VAR 0 1
80441: PPUSH
80442: CALL_OW 251
80446: PPUSH
80447: LD_VAR 0 2
80451: PPUSH
80452: LD_INT 1
80454: PPUSH
80455: CALL_OW 273
80459: ST_TO_ADDR
// if ValidHex ( x , y ) then
80460: LD_VAR 0 4
80464: PPUSH
80465: LD_VAR 0 5
80469: PPUSH
80470: CALL_OW 488
80474: IFFALSE 80495
// ComTurnXY ( unit , x , y ) ;
80476: LD_VAR 0 1
80480: PPUSH
80481: LD_VAR 0 4
80485: PPUSH
80486: LD_VAR 0 5
80490: PPUSH
80491: CALL_OW 118
// end ;
80495: LD_VAR 0 3
80499: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80500: LD_INT 0
80502: PPUSH
80503: PPUSH
// result := false ;
80504: LD_ADDR_VAR 0 3
80508: PUSH
80509: LD_INT 0
80511: ST_TO_ADDR
// if not units then
80512: LD_VAR 0 2
80516: NOT
80517: IFFALSE 80521
// exit ;
80519: GO 80566
// for i in units do
80521: LD_ADDR_VAR 0 4
80525: PUSH
80526: LD_VAR 0 2
80530: PUSH
80531: FOR_IN
80532: IFFALSE 80564
// if See ( side , i ) then
80534: LD_VAR 0 1
80538: PPUSH
80539: LD_VAR 0 4
80543: PPUSH
80544: CALL_OW 292
80548: IFFALSE 80562
// begin result := true ;
80550: LD_ADDR_VAR 0 3
80554: PUSH
80555: LD_INT 1
80557: ST_TO_ADDR
// exit ;
80558: POP
80559: POP
80560: GO 80566
// end ;
80562: GO 80531
80564: POP
80565: POP
// end ;
80566: LD_VAR 0 3
80570: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80571: LD_INT 0
80573: PPUSH
80574: PPUSH
80575: PPUSH
80576: PPUSH
// if not unit or not points then
80577: LD_VAR 0 1
80581: NOT
80582: PUSH
80583: LD_VAR 0 2
80587: NOT
80588: OR
80589: IFFALSE 80593
// exit ;
80591: GO 80683
// dist := 99999 ;
80593: LD_ADDR_VAR 0 5
80597: PUSH
80598: LD_INT 99999
80600: ST_TO_ADDR
// for i in points do
80601: LD_ADDR_VAR 0 4
80605: PUSH
80606: LD_VAR 0 2
80610: PUSH
80611: FOR_IN
80612: IFFALSE 80681
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80614: LD_ADDR_VAR 0 6
80618: PUSH
80619: LD_VAR 0 1
80623: PPUSH
80624: LD_VAR 0 4
80628: PUSH
80629: LD_INT 1
80631: ARRAY
80632: PPUSH
80633: LD_VAR 0 4
80637: PUSH
80638: LD_INT 2
80640: ARRAY
80641: PPUSH
80642: CALL_OW 297
80646: ST_TO_ADDR
// if tmpDist < dist then
80647: LD_VAR 0 6
80651: PUSH
80652: LD_VAR 0 5
80656: LESS
80657: IFFALSE 80679
// begin result := i ;
80659: LD_ADDR_VAR 0 3
80663: PUSH
80664: LD_VAR 0 4
80668: ST_TO_ADDR
// dist := tmpDist ;
80669: LD_ADDR_VAR 0 5
80673: PUSH
80674: LD_VAR 0 6
80678: ST_TO_ADDR
// end ; end ;
80679: GO 80611
80681: POP
80682: POP
// end ;
80683: LD_VAR 0 3
80687: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80688: LD_INT 0
80690: PPUSH
// uc_side := side ;
80691: LD_ADDR_OWVAR 20
80695: PUSH
80696: LD_VAR 0 1
80700: ST_TO_ADDR
// uc_nation := 3 ;
80701: LD_ADDR_OWVAR 21
80705: PUSH
80706: LD_INT 3
80708: ST_TO_ADDR
// vc_chassis := 25 ;
80709: LD_ADDR_OWVAR 37
80713: PUSH
80714: LD_INT 25
80716: ST_TO_ADDR
// vc_engine := engine_siberite ;
80717: LD_ADDR_OWVAR 39
80721: PUSH
80722: LD_INT 3
80724: ST_TO_ADDR
// vc_control := control_computer ;
80725: LD_ADDR_OWVAR 38
80729: PUSH
80730: LD_INT 3
80732: ST_TO_ADDR
// vc_weapon := 59 ;
80733: LD_ADDR_OWVAR 40
80737: PUSH
80738: LD_INT 59
80740: ST_TO_ADDR
// result := CreateVehicle ;
80741: LD_ADDR_VAR 0 5
80745: PUSH
80746: CALL_OW 45
80750: ST_TO_ADDR
// SetDir ( result , d ) ;
80751: LD_VAR 0 5
80755: PPUSH
80756: LD_VAR 0 4
80760: PPUSH
80761: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80765: LD_VAR 0 5
80769: PPUSH
80770: LD_VAR 0 2
80774: PPUSH
80775: LD_VAR 0 3
80779: PPUSH
80780: LD_INT 0
80782: PPUSH
80783: CALL_OW 48
// end ;
80787: LD_VAR 0 5
80791: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80792: LD_INT 0
80794: PPUSH
80795: PPUSH
80796: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80797: LD_ADDR_VAR 0 2
80801: PUSH
80802: LD_INT 0
80804: PUSH
80805: LD_INT 0
80807: PUSH
80808: LD_INT 0
80810: PUSH
80811: LD_INT 0
80813: PUSH
80814: EMPTY
80815: LIST
80816: LIST
80817: LIST
80818: LIST
80819: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80820: LD_VAR 0 1
80824: NOT
80825: PUSH
80826: LD_VAR 0 1
80830: PPUSH
80831: CALL_OW 264
80835: PUSH
80836: LD_INT 12
80838: PUSH
80839: LD_INT 51
80841: PUSH
80842: LD_INT 32
80844: PUSH
80845: LD_EXP 49
80849: PUSH
80850: EMPTY
80851: LIST
80852: LIST
80853: LIST
80854: LIST
80855: IN
80856: NOT
80857: OR
80858: IFFALSE 80862
// exit ;
80860: GO 80960
// for i := 1 to 3 do
80862: LD_ADDR_VAR 0 3
80866: PUSH
80867: DOUBLE
80868: LD_INT 1
80870: DEC
80871: ST_TO_ADDR
80872: LD_INT 3
80874: PUSH
80875: FOR_TO
80876: IFFALSE 80958
// begin tmp := GetCargo ( cargo , i ) ;
80878: LD_ADDR_VAR 0 4
80882: PUSH
80883: LD_VAR 0 1
80887: PPUSH
80888: LD_VAR 0 3
80892: PPUSH
80893: CALL_OW 289
80897: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80898: LD_ADDR_VAR 0 2
80902: PUSH
80903: LD_VAR 0 2
80907: PPUSH
80908: LD_VAR 0 3
80912: PPUSH
80913: LD_VAR 0 4
80917: PPUSH
80918: CALL_OW 1
80922: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80923: LD_ADDR_VAR 0 2
80927: PUSH
80928: LD_VAR 0 2
80932: PPUSH
80933: LD_INT 4
80935: PPUSH
80936: LD_VAR 0 2
80940: PUSH
80941: LD_INT 4
80943: ARRAY
80944: PUSH
80945: LD_VAR 0 4
80949: PLUS
80950: PPUSH
80951: CALL_OW 1
80955: ST_TO_ADDR
// end ;
80956: GO 80875
80958: POP
80959: POP
// end ;
80960: LD_VAR 0 2
80964: RET
// export function Length ( array ) ; begin
80965: LD_INT 0
80967: PPUSH
// result := array + 0 ;
80968: LD_ADDR_VAR 0 2
80972: PUSH
80973: LD_VAR 0 1
80977: PUSH
80978: LD_INT 0
80980: PLUS
80981: ST_TO_ADDR
// end ;
80982: LD_VAR 0 2
80986: RET
// export function PrepareArray ( array ) ; begin
80987: LD_INT 0
80989: PPUSH
// result := array diff 0 ;
80990: LD_ADDR_VAR 0 2
80994: PUSH
80995: LD_VAR 0 1
80999: PUSH
81000: LD_INT 0
81002: DIFF
81003: ST_TO_ADDR
// if not result [ 1 ] then
81004: LD_VAR 0 2
81008: PUSH
81009: LD_INT 1
81011: ARRAY
81012: NOT
81013: IFFALSE 81033
// result := Delete ( result , 1 ) ;
81015: LD_ADDR_VAR 0 2
81019: PUSH
81020: LD_VAR 0 2
81024: PPUSH
81025: LD_INT 1
81027: PPUSH
81028: CALL_OW 3
81032: ST_TO_ADDR
// end ; end_of_file
81033: LD_VAR 0 2
81037: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81038: LD_VAR 0 1
81042: PUSH
81043: LD_INT 200
81045: DOUBLE
81046: GREATEREQUAL
81047: IFFALSE 81055
81049: LD_INT 299
81051: DOUBLE
81052: LESSEQUAL
81053: IFTRUE 81057
81055: GO 81089
81057: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81058: LD_VAR 0 1
81062: PPUSH
81063: LD_VAR 0 2
81067: PPUSH
81068: LD_VAR 0 3
81072: PPUSH
81073: LD_VAR 0 4
81077: PPUSH
81078: LD_VAR 0 5
81082: PPUSH
81083: CALL 35889 0 5
81087: GO 81166
81089: LD_INT 300
81091: DOUBLE
81092: GREATEREQUAL
81093: IFFALSE 81101
81095: LD_INT 399
81097: DOUBLE
81098: LESSEQUAL
81099: IFTRUE 81103
81101: GO 81165
81103: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81104: LD_VAR 0 1
81108: PPUSH
81109: LD_VAR 0 2
81113: PPUSH
81114: LD_VAR 0 3
81118: PPUSH
81119: LD_VAR 0 4
81123: PPUSH
81124: LD_VAR 0 5
81128: PPUSH
81129: LD_VAR 0 6
81133: PPUSH
81134: LD_VAR 0 7
81138: PPUSH
81139: LD_VAR 0 8
81143: PPUSH
81144: LD_VAR 0 9
81148: PPUSH
81149: LD_VAR 0 10
81153: PPUSH
81154: LD_VAR 0 11
81158: PPUSH
81159: CALL 32218 0 11
81163: GO 81166
81165: POP
// end ;
81166: PPOPN 11
81168: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81169: LD_VAR 0 1
81173: PPUSH
81174: LD_VAR 0 2
81178: PPUSH
81179: LD_VAR 0 3
81183: PPUSH
81184: LD_VAR 0 4
81188: PPUSH
81189: LD_VAR 0 5
81193: PPUSH
81194: CALL 35625 0 5
// end ; end_of_file
81198: PPOPN 5
81200: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81201: LD_VAR 0 1
81205: PPUSH
81206: LD_VAR 0 2
81210: PPUSH
81211: LD_VAR 0 3
81215: PPUSH
81216: LD_VAR 0 4
81220: PPUSH
81221: LD_VAR 0 5
81225: PPUSH
81226: LD_VAR 0 6
81230: PPUSH
81231: CALL 19911 0 6
// end ;
81235: PPOPN 6
81237: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81238: LD_INT 0
81240: PPUSH
// begin if not units then
81241: LD_VAR 0 1
81245: NOT
81246: IFFALSE 81250
// exit ;
81248: GO 81250
// end ;
81250: PPOPN 7
81252: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81253: CALL 19882 0 0
// end ;
81257: PPOPN 1
81259: END
