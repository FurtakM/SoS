// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 637 0 0
// PrepareArabian ;
  12: CALL 996 0 0
// PrepareAmerican ;
  16: CALL 4057 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9176 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// end ; end_of_file
 336: LD_VAR 0 1
 340: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 341: LD_INT 0
 343: PPUSH
// uc_side := side ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_VAR 0 1
 353: ST_TO_ADDR
// uc_nation := nation ;
 354: LD_ADDR_OWVAR 21
 358: PUSH
 359: LD_VAR 0 2
 363: ST_TO_ADDR
// vc_chassis := chassis ;
 364: LD_ADDR_OWVAR 37
 368: PUSH
 369: LD_VAR 0 3
 373: ST_TO_ADDR
// vc_engine := engine ;
 374: LD_ADDR_OWVAR 39
 378: PUSH
 379: LD_VAR 0 4
 383: ST_TO_ADDR
// vc_control := control ;
 384: LD_ADDR_OWVAR 38
 388: PUSH
 389: LD_VAR 0 5
 393: ST_TO_ADDR
// vc_weapon := weapon ;
 394: LD_ADDR_OWVAR 40
 398: PUSH
 399: LD_VAR 0 6
 403: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 404: LD_ADDR_OWVAR 41
 408: PUSH
 409: LD_VAR 0 7
 413: ST_TO_ADDR
// result := CreateVehicle ;
 414: LD_ADDR_VAR 0 8
 418: PUSH
 419: CALL_OW 45
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 8
 428: RET
// export function SayX ( units , ident ) ; var i ; begin
 429: LD_INT 0
 431: PPUSH
 432: PPUSH
// result := false ;
 433: LD_ADDR_VAR 0 3
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// if not units then
 441: LD_VAR 0 1
 445: NOT
 446: IFFALSE 450
// exit ;
 448: GO 504
// for i in units do
 450: LD_ADDR_VAR 0 4
 454: PUSH
 455: LD_VAR 0 1
 459: PUSH
 460: FOR_IN
 461: IFFALSE 502
// if IsOk ( i ) then
 463: LD_VAR 0 4
 467: PPUSH
 468: CALL_OW 302
 472: IFFALSE 500
// begin Say ( i , ident ) ;
 474: LD_VAR 0 4
 478: PPUSH
 479: LD_VAR 0 2
 483: PPUSH
 484: CALL_OW 88
// result := i ;
 488: LD_ADDR_VAR 0 3
 492: PUSH
 493: LD_VAR 0 4
 497: ST_TO_ADDR
// break ;
 498: GO 502
// end ;
 500: GO 460
 502: POP
 503: POP
// end ;
 504: LD_VAR 0 3
 508: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 509: LD_INT 0
 511: PPUSH
 512: PPUSH
// InitUc ;
 513: CALL_OW 18
// InitHc ;
 517: CALL_OW 19
// uc_side := 0 ;
 521: LD_ADDR_OWVAR 20
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// uc_nation := 0 ;
 529: LD_ADDR_OWVAR 21
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// for i = 1 to amount do
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: DOUBLE
 543: LD_INT 1
 545: DEC
 546: ST_TO_ADDR
 547: LD_VAR 0 2
 551: PUSH
 552: FOR_TO
 553: IFFALSE 626
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 555: LD_ADDR_OWVAR 29
 559: PUSH
 560: LD_INT 9
 562: PPUSH
 563: LD_INT 12
 565: PPUSH
 566: CALL_OW 12
 570: PUSH
 571: LD_INT 9
 573: PPUSH
 574: LD_INT 12
 576: PPUSH
 577: CALL_OW 12
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: ST_TO_ADDR
// hc_agressivity := 0 ;
 586: LD_ADDR_OWVAR 35
 590: PUSH
 591: LD_INT 0
 593: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 12
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 607: CALL_OW 44
 611: PPUSH
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 552
 626: POP
 627: POP
// InitHc ;
 628: CALL_OW 19
// end ;
 632: LD_VAR 0 3
 636: RET
// export function CreateNature ; var i ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 641: LD_INT 2
 643: PPUSH
 644: LD_INT 5
 646: PUSH
 647: LD_INT 4
 649: PUSH
 650: LD_INT 4
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_OWVAR 67
 666: ARRAY
 667: PPUSH
 668: CALL 509 0 2
// for i := 1 to 2 do
 672: LD_ADDR_VAR 0 2
 676: PUSH
 677: DOUBLE
 678: LD_INT 1
 680: DEC
 681: ST_TO_ADDR
 682: LD_INT 2
 684: PUSH
 685: FOR_TO
 686: IFFALSE 721
// begin hc_class := 21 ;
 688: LD_ADDR_OWVAR 28
 692: PUSH
 693: LD_INT 21
 695: ST_TO_ADDR
// hc_gallery :=  ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING 
 703: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 704: CALL_OW 44
 708: PPUSH
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 685
 721: POP
 722: POP
// for i := 1 to 2 do
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 2
 735: PUSH
 736: FOR_TO
 737: IFFALSE 772
// begin hc_class := 18 ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 18
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 49
// end ;
 770: GO 736
 772: POP
 773: POP
// for i := 1 to 2 do
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: DOUBLE
 780: LD_INT 1
 782: DEC
 783: ST_TO_ADDR
 784: LD_INT 2
 786: PUSH
 787: FOR_TO
 788: IFFALSE 823
// begin hc_class := 13 ;
 790: LD_ADDR_OWVAR 28
 794: PUSH
 795: LD_INT 13
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 787
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 1
 829: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
// if not observer or not unit then
 835: LD_VAR 0 1
 839: NOT
 840: PUSH
 841: LD_VAR 0 2
 845: NOT
 846: OR
 847: IFFALSE 851
// exit ;
 849: GO 899
// if not See ( GetSide ( observer ) , unit ) then
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: PPUSH
 861: LD_VAR 0 2
 865: PPUSH
 866: CALL_OW 292
 870: NOT
 871: IFFALSE 875
// exit ;
 873: GO 899
// result := GetDistUnits ( observer , unit ) < 12 ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: LD_VAR 0 1
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 296
 894: PUSH
 895: LD_INT 12
 897: LESS
 898: ST_TO_ADDR
// end ;
 899: LD_VAR 0 3
 903: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 904: LD_INT 0
 906: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 488
 929: PUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 428
 952: PUSH
 953: LD_INT 0
 955: EQUAL
 956: AND
 957: IFFALSE 991
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 959: LD_VAR 0 1
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: LD_VAR 0 3
 986: PPUSH
 987: CALL_OW 48
// end ; end_of_file
 991: LD_VAR 0 4
 995: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
 996: LD_INT 0
 998: PPUSH
 999: PPUSH
1000: PPUSH
1001: PPUSH
// uc_side := 5 ;
1002: LD_ADDR_OWVAR 20
1006: PUSH
1007: LD_INT 5
1009: ST_TO_ADDR
// uc_nation := 2 ;
1010: LD_ADDR_OWVAR 21
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1018: LD_INT 5
1020: PPUSH
1021: CALL_OW 274
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 65
1031: PPUSH
1032: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1036: LD_ADDR_EXP 38
1040: PUSH
1041: LD_STRING Farmer
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_STRING 
1049: PPUSH
1050: CALL 40080 0 3
1054: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1055: LD_ADDR_EXP 39
1059: PUSH
1060: LD_STRING Omar
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: LD_STRING 
1068: PPUSH
1069: CALL 40080 0 3
1073: ST_TO_ADDR
// omarSquad := [ ] ;
1074: LD_ADDR_EXP 42
1078: PUSH
1079: EMPTY
1080: ST_TO_ADDR
// heikeSquad := [ ] ;
1081: LD_ADDR_EXP 43
1085: PUSH
1086: EMPTY
1087: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1088: LD_ADDR_EXP 44
1092: PUSH
1093: EMPTY
1094: ST_TO_ADDR
// omarCargo := [ ] ;
1095: LD_ADDR_EXP 45
1099: PUSH
1100: EMPTY
1101: ST_TO_ADDR
// for i := 1 to 5 do
1102: LD_ADDR_VAR 0 2
1106: PUSH
1107: DOUBLE
1108: LD_INT 1
1110: DEC
1111: ST_TO_ADDR
1112: LD_INT 5
1114: PUSH
1115: FOR_TO
1116: IFFALSE 1274
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1118: LD_INT 0
1120: PPUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 2
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_VAR 0 2
1147: ARRAY
1148: PPUSH
1149: LD_INT 3
1151: PPUSH
1152: CALL_OW 380
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1166: LD_ADDR_EXP 42
1170: PUSH
1171: LD_EXP 42
1175: PUSH
1176: LD_VAR 0 3
1180: UNION
1181: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 87
1189: PUSH
1190: LD_INT 30
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 91
1199: PUSH
1200: LD_INT 32
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 15
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: LD_INT 79
1219: PUSH
1220: LD_INT 14
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 82
1229: PUSH
1230: LD_INT 13
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL 904 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 93
1264: PPUSH
1265: LD_INT 21
1267: PPUSH
1268: CALL_OW 118
// end ;
1272: GO 1115
1274: POP
1275: POP
// uc_side := 2 ;
1276: LD_ADDR_OWVAR 20
1280: PUSH
1281: LD_INT 2
1283: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_STRING Heike
1291: PPUSH
1292: LD_EXP 1
1296: NOT
1297: PPUSH
1298: LD_EXP 2
1302: PPUSH
1303: CALL 40080 0 3
1307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1308: LD_ADDR_EXP 34
1312: PUSH
1313: LD_STRING Aviradze
1315: PPUSH
1316: LD_EXP 1
1320: NOT
1321: PPUSH
1322: LD_EXP 2
1326: PPUSH
1327: CALL 40080 0 3
1331: ST_TO_ADDR
// tmp := [ ] ;
1332: LD_ADDR_VAR 0 4
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1339: LD_ADDR_EXP 31
1343: PUSH
1344: LD_STRING Givi
1346: PPUSH
1347: LD_EXP 1
1351: NOT
1352: PPUSH
1353: LD_EXP 2
1357: PPUSH
1358: CALL 40080 0 3
1362: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1363: LD_ADDR_EXP 32
1367: PUSH
1368: LD_STRING Mike
1370: PPUSH
1371: LD_EXP 1
1375: NOT
1376: PPUSH
1377: LD_EXP 2
1381: PPUSH
1382: CALL 40080 0 3
1386: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1387: LD_ADDR_EXP 33
1391: PUSH
1392: LD_STRING Kamil
1394: PPUSH
1395: LD_EXP 1
1399: NOT
1400: PPUSH
1401: LD_EXP 2
1405: PPUSH
1406: CALL 40080 0 3
1410: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1411: LD_ADDR_EXP 35
1415: PUSH
1416: LD_STRING Kaia
1418: PPUSH
1419: LD_EXP 1
1423: NOT
1424: PPUSH
1425: LD_EXP 2
1429: PPUSH
1430: CALL 40080 0 3
1434: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1435: LD_ADDR_EXP 36
1439: PUSH
1440: LD_STRING Sophia
1442: PPUSH
1443: LD_EXP 1
1447: NOT
1448: PPUSH
1449: LD_EXP 2
1453: PPUSH
1454: CALL 40080 0 3
1458: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1459: LD_ADDR_EXP 37
1463: PUSH
1464: LD_STRING Markov
1466: PPUSH
1467: LD_EXP 1
1471: NOT
1472: PPUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 40080 0 3
1482: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1483: LD_ADDR_EXP 44
1487: PUSH
1488: LD_STRING 02_others
1490: PPUSH
1491: CALL_OW 31
1495: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_EXP 32
1505: PUSH
1506: LD_EXP 33
1510: PUSH
1511: LD_EXP 35
1515: PUSH
1516: LD_EXP 36
1520: PUSH
1521: LD_EXP 37
1525: PUSH
1526: LD_EXP 31
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_EXP 44
1543: ADD
1544: PUSH
1545: LD_INT 0
1547: DIFF
1548: ST_TO_ADDR
// heikeSquad := tmp ;
1549: LD_ADDR_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1559: LD_EXP 43
1563: PPUSH
1564: LD_INT 25
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 72
1578: PUSH
1579: LD_INT 3
1581: LESS
1582: IFFALSE 1632
// begin SetClass ( Kaia , 1 ) ;
1584: LD_EXP 35
1588: PPUSH
1589: LD_INT 1
1591: PPUSH
1592: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1596: LD_EXP 32
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1608: LD_EXP 31
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1620: LD_EXP 30
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_VAR 0 4
1641: PUSH
1642: LD_STRING 02_ape
1644: PPUSH
1645: CALL_OW 31
1649: UNION
1650: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1651: LD_EXP 30
1655: PPUSH
1656: LD_INT 92
1658: PPUSH
1659: LD_INT 17
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1669: LD_EXP 38
1673: PPUSH
1674: LD_INT 95
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1687: LD_EXP 39
1691: PPUSH
1692: LD_INT 89
1694: PPUSH
1695: LD_INT 25
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1705: LD_EXP 34
1709: PPUSH
1710: LD_INT 92
1712: PPUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1723: LD_EXP 39
1727: PPUSH
1728: LD_EXP 34
1732: PPUSH
1733: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1737: LD_EXP 34
1741: PPUSH
1742: LD_EXP 39
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1751: LD_EXP 30
1755: PUSH
1756: LD_EXP 38
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PPUSH
1765: LD_EXP 39
1769: PPUSH
1770: CALL_OW 119
// if tmp then
1774: LD_VAR 0 4
1778: IFFALSE 1832
// for i in tmp do
1780: LD_ADDR_VAR 0 2
1784: PUSH
1785: LD_VAR 0 4
1789: PUSH
1790: FOR_IN
1791: IFFALSE 1830
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1793: LD_VAR 0 2
1797: PPUSH
1798: LD_INT 94
1800: PPUSH
1801: LD_INT 14
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1814: LD_VAR 0 2
1818: PPUSH
1819: LD_EXP 30
1823: PPUSH
1824: CALL_OW 119
// end ;
1828: GO 1790
1830: POP
1831: POP
// farmerSquad := [ ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: EMPTY
1838: ST_TO_ADDR
// uc_side := 5 ;
1839: LD_ADDR_OWVAR 20
1843: PUSH
1844: LD_INT 5
1846: ST_TO_ADDR
// uc_nation := 2 ;
1847: LD_ADDR_OWVAR 21
1851: PUSH
1852: LD_INT 2
1854: ST_TO_ADDR
// for i := 1 to 4 do
1855: LD_ADDR_VAR 0 2
1859: PUSH
1860: DOUBLE
1861: LD_INT 1
1863: DEC
1864: ST_TO_ADDR
1865: LD_INT 4
1867: PUSH
1868: FOR_TO
1869: IFFALSE 1947
// begin PrepareHuman ( false , 1 , 2 ) ;
1871: LD_INT 0
1873: PPUSH
1874: LD_INT 1
1876: PPUSH
1877: LD_INT 2
1879: PPUSH
1880: CALL_OW 380
// un := CreateHuman ;
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: CALL_OW 44
1893: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1894: LD_VAR 0 3
1898: PPUSH
1899: LD_INT 102
1901: PPUSH
1902: LD_INT 27
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1915: LD_ADDR_EXP 41
1919: PUSH
1920: LD_EXP 41
1924: PUSH
1925: LD_VAR 0 3
1929: UNION
1930: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_EXP 39
1940: PPUSH
1941: CALL_OW 119
// end ;
1945: GO 1868
1947: POP
1948: POP
// for i := 1 to 2 do
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 2
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2041
// begin PrepareHuman ( false , 2 , 2 ) ;
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: LD_INT 2
1973: PPUSH
1974: CALL_OW 380
// un := CreateHuman ;
1978: LD_ADDR_VAR 0 3
1982: PUSH
1983: CALL_OW 44
1987: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1988: LD_VAR 0 3
1992: PPUSH
1993: LD_INT 108
1995: PPUSH
1996: LD_INT 62
1998: PPUSH
1999: LD_INT 2
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2009: LD_ADDR_EXP 41
2013: PUSH
2014: LD_EXP 41
2018: PUSH
2019: LD_VAR 0 3
2023: UNION
2024: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2025: LD_VAR 0 3
2029: PPUSH
2030: LD_EXP 39
2034: PPUSH
2035: CALL_OW 119
// end ;
2039: GO 1962
2041: POP
2042: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2043: LD_INT 109
2045: PPUSH
2046: LD_INT 63
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 15
2054: NEG
2055: PPUSH
2056: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2060: LD_INT 109
2062: PPUSH
2063: LD_INT 63
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: CALL_OW 331
// end ;
2073: LD_VAR 0 1
2077: RET
// export function PrepareIbrahim ( x , y ) ; begin
2078: LD_INT 0
2080: PPUSH
// uc_side := 6 ;
2081: LD_ADDR_OWVAR 20
2085: PUSH
2086: LD_INT 6
2088: ST_TO_ADDR
// uc_nation := 3 ;
2089: LD_ADDR_OWVAR 21
2093: PUSH
2094: LD_INT 3
2096: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2097: LD_ADDR_EXP 40
2101: PUSH
2102: LD_STRING IbrahimRu
2104: PPUSH
2105: LD_INT 0
2107: PPUSH
2108: LD_STRING 
2110: PPUSH
2111: CALL 40080 0 3
2115: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2116: LD_EXP 40
2120: PPUSH
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_INT 8
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 50
// end ;
2141: LD_VAR 0 3
2145: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2146: LD_EXP 39
2150: PUSH
2151: LD_EXP 42
2155: ADD
2156: PPUSH
2157: LD_INT 95
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 72
2171: IFFALSE 2227
2173: GO 2175
2175: DISABLE
2176: LD_INT 0
2178: PPUSH
// begin enable ;
2179: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_EXP 39
2189: PUSH
2190: LD_EXP 42
2194: ADD
2195: PPUSH
2196: LD_INT 95
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PPUSH
2206: CALL_OW 72
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2225
// RemoveUnit ( i ) ;
2214: LD_VAR 0 1
2218: PPUSH
2219: CALL_OW 64
2223: GO 2211
2225: POP
2226: POP
// end ;
2227: PPOPN 1
2229: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 38
2239: PPUSH
2240: LD_INT 4
2242: PPUSH
2243: CALL_OW 308
2247: AND
2248: IFFALSE 3052
2250: GO 2252
2252: DISABLE
2253: LD_INT 0
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2259: LD_EXP 38
2263: PPUSH
2264: LD_INT 110
2266: PPUSH
2267: LD_INT 60
2269: PPUSH
2270: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2274: LD_EXP 38
2278: PPUSH
2279: LD_INT 110
2281: PPUSH
2282: LD_INT 61
2284: PPUSH
2285: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 41
2298: PPUSH
2299: LD_INT 25
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 72
2313: ST_TO_ADDR
// if tmp then
2314: LD_VAR 0 2
2318: IFFALSE 2412
// begin for i := 1 to 2 do
2320: LD_ADDR_VAR 0 1
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 2
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2410
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2336: LD_VAR 0 2
2340: PUSH
2341: LD_VAR 0 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 5
2349: PPUSH
2350: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PPUSH
2365: LD_INT 2
2367: PPUSH
2368: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: PPUSH
2383: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2387: LD_VAR 0 2
2391: PUSH
2392: LD_VAR 0 1
2396: ARRAY
2397: PPUSH
2398: LD_INT 107
2400: PPUSH
2401: LD_INT 66
2403: PPUSH
2404: CALL_OW 171
// end ;
2408: GO 2333
2410: POP
2411: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: LD_EXP 41
2421: PPUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: PPUSH
2432: CALL_OW 72
2436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2437: LD_INT 35
2439: PPUSH
2440: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: LD_EXP 41
2453: PPUSH
2454: LD_INT 25
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PPUSH
2464: CALL_OW 72
2468: ST_TO_ADDR
// until tmp ;
2469: LD_VAR 0 2
2473: IFFALSE 2437
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 31
2482: PPUSH
2483: LD_INT 102
2485: PPUSH
2486: LD_INT 69
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2503: LD_EXP 41
2507: PPUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 60
2513: PUSH
2514: EMPTY
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 25
2523: PUSH
2524: LD_INT 2
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PPUSH
2535: CALL_OW 72
2539: IFFALSE 2496
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2541: LD_ADDR_VAR 0 2
2545: PUSH
2546: LD_EXP 41
2550: PPUSH
2551: LD_INT 25
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PPUSH
2561: CALL_OW 72
2565: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2566: LD_VAR 0 2
2570: PPUSH
2571: LD_INT 6
2573: PPUSH
2574: LD_INT 116
2576: PPUSH
2577: LD_INT 55
2579: PPUSH
2580: LD_INT 4
2582: PPUSH
2583: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2587: LD_VAR 0 2
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 116
2597: PPUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2608: LD_VAR 0 2
2612: PPUSH
2613: LD_INT 31
2615: PPUSH
2616: LD_INT 109
2618: PPUSH
2619: LD_INT 50
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2629: LD_INT 35
2631: PPUSH
2632: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2636: LD_INT 22
2638: PUSH
2639: LD_INT 5
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 30
2648: PUSH
2649: LD_INT 4
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: IFFALSE 2629
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2680: LD_ADDR_VAR 0 3
2684: PUSH
2685: LD_INT 22
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 3
2707: PUSH
2708: LD_INT 57
2710: PUSH
2711: EMPTY
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: LD_INT 1
2730: ARRAY
2731: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2732: LD_ADDR_VAR 0 2
2736: PUSH
2737: LD_EXP 41
2741: PPUSH
2742: LD_INT 25
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: CALL_OW 72
2756: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2771: LD_INT 35
2773: PPUSH
2774: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2778: LD_INT 22
2780: PUSH
2781: LD_INT 5
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 30
2790: PUSH
2791: LD_INT 31
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 3
2800: PUSH
2801: LD_INT 57
2803: PUSH
2804: EMPTY
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: PUSH
2821: LD_INT 2
2823: GREATEREQUAL
2824: IFFALSE 2771
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2826: LD_ADDR_VAR 0 2
2830: PUSH
2831: LD_EXP 41
2835: PPUSH
2836: LD_INT 25
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 72
2850: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2851: LD_VAR 0 2
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2867: LD_VAR 0 2
2871: PUSH
2872: LD_INT 2
2874: ARRAY
2875: PUSH
2876: LD_VAR 0 2
2880: PUSH
2881: LD_INT 3
2883: ARRAY
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_VAR 0 3
2893: PPUSH
2894: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2898: LD_VAR 0 2
2902: PUSH
2903: LD_INT 2
2905: ARRAY
2906: PUSH
2907: LD_VAR 0 2
2911: PUSH
2912: LD_INT 3
2914: ARRAY
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 5
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 30
2970: PUSH
2971: LD_INT 31
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 1
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3035
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3003: LD_VAR 0 2
3007: PUSH
3008: LD_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PLUS
3016: ARRAY
3017: PPUSH
3018: LD_VAR 0 4
3022: PUSH
3023: LD_VAR 0 1
3027: ARRAY
3028: PPUSH
3029: CALL_OW 180
3033: GO 3000
3035: POP
3036: POP
// wait ( 1 1$00 ) ;
3037: LD_INT 2100
3039: PPUSH
3040: CALL_OW 67
// farmerBaseReady := true ;
3044: LD_ADDR_EXP 4
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// end ;
3052: PPOPN 4
3054: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3055: LD_EXP 4
3059: PUSH
3060: LD_EXP 12
3064: NOT
3065: AND
3066: IFFALSE 3588
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
3077: PPUSH
// begin enable ;
3078: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: LD_EXP 41
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: PUSH
3104: LD_EXP 38
3108: ADD
3109: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3110: LD_ADDR_VAR 0 2
3114: PUSH
3115: LD_EXP 41
3119: PPUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: LD_INT 22
3142: PUSH
3143: LD_INT 5
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 24
3165: PUSH
3166: LD_INT 1000
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 5
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 30
3204: PUSH
3205: LD_INT 4
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PPUSH
3216: CALL_OW 69
3220: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3221: LD_VAR 0 4
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PPUSH
3230: CALL_OW 302
3234: IFFALSE 3298
// for i in sol do
3236: LD_ADDR_VAR 0 1
3240: PUSH
3241: LD_VAR 0 3
3245: PUSH
3246: FOR_IN
3247: IFFALSE 3296
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3249: LD_VAR 0 1
3253: PPUSH
3254: CALL_OW 256
3258: PUSH
3259: LD_INT 999
3261: LESS
3262: PUSH
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 310
3272: NOT
3273: AND
3274: IFFALSE 3294
// ComEnterUnit ( i , arm [ 1 ] ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 120
3294: GO 3246
3296: POP
3297: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3298: LD_VAR 0 2
3302: NOT
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 1
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 1
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: NOT
3333: AND
3334: IFFALSE 3426
// begin uc_side := 5 ;
3336: LD_ADDR_OWVAR 20
3340: PUSH
3341: LD_INT 5
3343: ST_TO_ADDR
// uc_nation := 2 ;
3344: LD_ADDR_OWVAR 21
3348: PUSH
3349: LD_INT 2
3351: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3352: LD_INT 0
3354: PPUSH
3355: LD_INT 2
3357: PPUSH
3358: LD_INT 2
3360: PPUSH
3361: CALL_OW 380
// eng := CreateHuman ;
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3375: LD_VAR 0 2
3379: PPUSH
3380: LD_INT 102
3382: PPUSH
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_INT 110
3400: PPUSH
3401: LD_INT 60
3403: PPUSH
3404: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3408: LD_ADDR_EXP 41
3412: PUSH
3413: LD_EXP 41
3417: PUSH
3418: LD_VAR 0 2
3422: UNION
3423: ST_TO_ADDR
// end else
3424: GO 3588
// begin for i in eng do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: FOR_IN
3437: IFFALSE 3586
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3439: LD_INT 10
3441: PPUSH
3442: LD_INT 1
3444: PPUSH
3445: CALL_OW 287
3449: IFFALSE 3500
// begin if IsInUnit ( i ) then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 310
3460: IFFALSE 3471
// ComExitBuilding ( i ) ;
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 10
3478: PPUSH
3479: CALL_OW 308
3483: NOT
3484: IFFALSE 3498
// AddComMoveToArea ( i , collectFarmerArea ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: LD_INT 10
3493: PPUSH
3494: CALL_OW 173
// end else
3498: GO 3584
// begin if damagedBuilding then
3500: LD_VAR 0 5
3504: IFFALSE 3548
// begin if IsInUnit ( i ) then
3506: LD_VAR 0 1
3510: PPUSH
3511: CALL_OW 310
3515: IFFALSE 3528
// ComExitBuilding ( i ) else
3517: LD_VAR 0 1
3521: PPUSH
3522: CALL_OW 122
3526: GO 3546
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_VAR 0 5
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: CALL_OW 130
// end else
3546: GO 3584
// if not IsInUnit ( i ) and not HasTask ( i ) then
3548: LD_VAR 0 1
3552: PPUSH
3553: CALL_OW 310
3557: NOT
3558: PUSH
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 314
3568: NOT
3569: AND
3570: IFFALSE 3584
// ComEnterUnit ( i , arDepot ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 5
3579: PPUSH
3580: CALL_OW 120
// end ; end ;
3584: GO 3436
3586: POP
3587: POP
// end ; end ;
3588: PPOPN 5
3590: END
// export function CargoEvacuation ; begin
3591: LD_INT 0
3593: PPUSH
// wait ( 0 0$3 ) ;
3594: LD_INT 105
3596: PPUSH
3597: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3601: LD_ADDR_EXP 22
3605: PUSH
3606: LD_EXP 22
3610: PUSH
3611: LD_INT 1
3613: MINUS
3614: ST_TO_ADDR
// if omarCargoCounter = 0 then
3615: LD_EXP 22
3619: PUSH
3620: LD_INT 0
3622: EQUAL
3623: IFFALSE 3627
// exit ;
3625: GO 3934
// if omarCargo then
3627: LD_EXP 45
3631: IFFALSE 3642
// RemoveUnit ( omarCargo ) ;
3633: LD_EXP 45
3637: PPUSH
3638: CALL_OW 64
// omarCargo := PrepareCargo ;
3642: LD_ADDR_EXP 45
3646: PUSH
3647: CALL 3939 0 0
3651: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3652: LD_EXP 45
3656: PPUSH
3657: LD_INT 0
3659: PPUSH
3660: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3664: LD_EXP 45
3668: PPUSH
3669: LD_INT 107
3671: PPUSH
3672: LD_INT 59
3674: PPUSH
3675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3679: LD_INT 35
3681: PPUSH
3682: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 45
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3701: LD_EXP 45
3705: PPUSH
3706: CALL_OW 302
3710: NOT
3711: PUSH
3712: LD_EXP 45
3716: PPUSH
3717: CALL_OW 301
3721: OR
3722: IFFALSE 3726
// exit ;
3724: GO 3934
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3726: LD_EXP 45
3730: PPUSH
3731: LD_INT 107
3733: PPUSH
3734: LD_INT 59
3736: PPUSH
3737: CALL_OW 307
3741: PUSH
3742: LD_EXP 45
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: CALL_OW 296
3754: PUSH
3755: LD_INT 6
3757: LESS
3758: OR
3759: IFFALSE 3679
// SetTag ( omarCargo , 1 ) ;
3761: LD_EXP 45
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 109
// wait ( 0 0$03 ) ;
3773: LD_INT 105
3775: PPUSH
3776: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3780: LD_EXP 45
3784: PPUSH
3785: LD_INT 5
3787: PPUSH
3788: LD_INT 1
3790: PPUSH
3791: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3795: LD_EXP 45
3799: PPUSH
3800: LD_INT 103
3802: PPUSH
3803: LD_INT 9
3805: PPUSH
3806: CALL_OW 171
// wait ( 0 0$1 ) ;
3810: LD_INT 35
3812: PPUSH
3813: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3817: LD_EXP 45
3821: PPUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 100
3827: PPUSH
3828: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3832: LD_INT 35
3834: PPUSH
3835: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3839: LD_EXP 45
3843: PPUSH
3844: LD_INT 103
3846: PPUSH
3847: LD_INT 9
3849: PPUSH
3850: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3854: LD_EXP 45
3858: PPUSH
3859: CALL_OW 302
3863: NOT
3864: PUSH
3865: LD_EXP 45
3869: PPUSH
3870: CALL_OW 301
3874: OR
3875: IFFALSE 3879
// exit ;
3877: GO 3934
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3879: LD_EXP 45
3883: PPUSH
3884: LD_INT 103
3886: PPUSH
3887: LD_INT 9
3889: PPUSH
3890: CALL_OW 307
3894: PUSH
3895: LD_EXP 45
3899: PPUSH
3900: LD_INT 3
3902: PPUSH
3903: CALL_OW 308
3907: OR
3908: PUSH
3909: LD_EXP 45
3913: PPUSH
3914: CALL_OW 110
3918: PUSH
3919: LD_INT 0
3921: GREATER
3922: AND
3923: IFFALSE 3832
// RemoveUnit ( omarCargo ) ;
3925: LD_EXP 45
3929: PPUSH
3930: CALL_OW 64
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PrepareCargo ; var un , veh ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3944: LD_ADDR_VAR 0 3
3948: PUSH
3949: LD_INT 5
3951: PPUSH
3952: LD_INT 2
3954: PPUSH
3955: LD_INT 14
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: LD_INT 32
3966: PPUSH
3967: LD_INT 80
3969: PPUSH
3970: CALL 341 0 7
3974: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 101
3994: PPUSH
3995: LD_INT 8
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4005: LD_INT 0
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 4
4013: PPUSH
4014: CALL_OW 380
// un := CreateHuman ;
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: CALL_OW 44
4027: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4028: LD_VAR 0 2
4032: PPUSH
4033: LD_VAR 0 3
4037: PPUSH
4038: CALL_OW 52
// result := veh ;
4042: LD_ADDR_VAR 0 1
4046: PUSH
4047: LD_VAR 0 3
4051: ST_TO_ADDR
// end ; end_of_file
4052: LD_VAR 0 1
4056: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
4061: PPUSH
// usForces := [ ] ;
4062: LD_ADDR_EXP 46
4066: PUSH
4067: EMPTY
4068: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4069: LD_ADDR_EXP 48
4073: PUSH
4074: LD_INT 6
4076: PUSH
4077: LD_INT 32
4079: PUSH
4080: LD_INT 27
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 43
4097: PUSH
4098: LD_INT 24
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 27
4112: PUSH
4113: LD_INT 29
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4133: LD_INT 11
4135: PPUSH
4136: CALL_OW 274
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_INT 150
4146: PUSH
4147: LD_INT 120
4149: PUSH
4150: LD_INT 100
4152: PUSH
4153: LD_INT 80
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: PUSH
4162: LD_OWVAR 67
4166: ARRAY
4167: PPUSH
4168: CALL_OW 277
// if Difficulty = 1 then
4172: LD_OWVAR 67
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: IFFALSE 4189
// RemoveUnit ( hillBun ) ;
4182: LD_INT 14
4184: PPUSH
4185: CALL_OW 64
// uc_side := 1 ;
4189: LD_ADDR_OWVAR 20
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// uc_nation := 1 ;
4197: LD_ADDR_OWVAR 21
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// hc_gallery :=  ;
4205: LD_ADDR_OWVAR 33
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// hc_name :=  ;
4213: LD_ADDR_OWVAR 26
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_importance := 0 ;
4221: LD_ADDR_OWVAR 32
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 380
// usCommander := CreateHuman ;
4242: LD_ADDR_EXP 47
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4252: LD_EXP 47
4256: PPUSH
4257: LD_INT 11
4259: PPUSH
4260: CALL_OW 52
// if Difficulty > 1 then
4264: LD_OWVAR 67
4268: PUSH
4269: LD_INT 1
4271: GREATER
4272: IFFALSE 4354
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: LD_INT 1
4282: PUSH
4283: LD_INT 2
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_OWVAR 67
4298: ARRAY
4299: PPUSH
4300: CALL_OW 380
// un := CreateHuman ;
4304: LD_ADDR_VAR 0 3
4308: PUSH
4309: CALL_OW 44
4313: ST_TO_ADDR
// usForces := usForces union un ;
4314: LD_ADDR_EXP 46
4318: PUSH
4319: LD_EXP 46
4323: PUSH
4324: LD_VAR 0 3
4328: UNION
4329: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4330: LD_VAR 0 3
4334: PPUSH
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_INT 14
4349: PPUSH
4350: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4354: LD_ADDR_VAR 0 2
4358: PUSH
4359: DOUBLE
4360: LD_INT 1
4362: DEC
4363: ST_TO_ADDR
4364: LD_INT 2
4366: PUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: LD_OWVAR 67
4386: ARRAY
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4535
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4391: LD_INT 0
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 1
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_OWVAR 67
4419: ARRAY
4420: PPUSH
4421: CALL_OW 380
// un := CreateHuman ;
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: CALL_OW 44
4434: ST_TO_ADDR
// usForces := usForces union un ;
4435: LD_ADDR_EXP 46
4439: PUSH
4440: LD_EXP 46
4444: PUSH
4445: LD_VAR 0 3
4449: UNION
4450: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_INT 39
4458: PPUSH
4459: LD_INT 24
4461: PPUSH
4462: LD_INT 4
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL_OW 50
// if i < 3 then
4472: LD_VAR 0 2
4476: PUSH
4477: LD_INT 3
4479: LESS
4480: IFFALSE 4533
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4482: LD_VAR 0 3
4486: PPUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 58
4499: PUSH
4500: EMPTY
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 31
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: PUSH
4523: LD_VAR 0 2
4527: ARRAY
4528: PPUSH
4529: CALL_OW 120
// end ;
4533: GO 4388
4535: POP
4536: POP
// for i := 1 to 2 do
4537: LD_ADDR_VAR 0 2
4541: PUSH
4542: DOUBLE
4543: LD_INT 1
4545: DEC
4546: ST_TO_ADDR
4547: LD_INT 2
4549: PUSH
4550: FOR_TO
4551: IFFALSE 4615
// begin PrepareHuman ( false , 2 , 2 ) ;
4553: LD_INT 0
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 380
// un := CreateHuman ;
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// usForces := usForces union un ;
4576: LD_ADDR_EXP 46
4580: PUSH
4581: LD_EXP 46
4585: PUSH
4586: LD_VAR 0 3
4590: UNION
4591: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4592: LD_VAR 0 3
4596: PPUSH
4597: LD_INT 39
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 4
4605: PPUSH
4606: LD_INT 0
4608: PPUSH
4609: CALL_OW 50
// end ;
4613: GO 4550
4615: POP
4616: POP
// PrepareHuman ( false , 4 , 1 ) ;
4617: LD_INT 0
4619: PPUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 380
// un := CreateHuman ;
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: CALL_OW 44
4639: ST_TO_ADDR
// usForces := usForces union un ;
4640: LD_ADDR_EXP 46
4644: PUSH
4645: LD_EXP 46
4649: PUSH
4650: LD_VAR 0 3
4654: UNION
4655: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4656: LD_VAR 0 3
4660: PPUSH
4661: LD_INT 39
4663: PPUSH
4664: LD_INT 24
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 50
// end ;
4677: LD_VAR 0 1
4681: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4682: LD_EXP 46
4686: PUSH
4687: LD_EXP 7
4691: NOT
4692: AND
4693: PUSH
4694: LD_EXP 15
4698: NOT
4699: AND
4700: IFFALSE 5131
4702: GO 4704
4704: DISABLE
4705: LD_INT 0
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
// begin enable ;
4712: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4713: LD_ADDR_VAR 0 3
4717: PUSH
4718: LD_EXP 46
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 72
4737: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4738: LD_ADDR_VAR 0 4
4742: PUSH
4743: LD_EXP 46
4747: PPUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 72
4762: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4763: LD_ADDR_VAR 0 5
4767: PUSH
4768: LD_EXP 46
4772: PPUSH
4773: LD_INT 25
4775: PUSH
4776: LD_INT 4
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PPUSH
4783: CALL_OW 72
4787: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4788: LD_INT 7
4790: PPUSH
4791: LD_INT 22
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 70
4805: PUSH
4806: LD_INT 1
4808: EQUAL
4809: IFFALSE 4885
// for i in sol do
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: FOR_IN
4822: IFFALSE 4883
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4824: LD_VAR 0 1
4828: PPUSH
4829: CALL_OW 310
4833: NOT
4834: PUSH
4835: LD_VAR 0 1
4839: PPUSH
4840: CALL_OW 310
4844: PPUSH
4845: CALL_OW 266
4849: PUSH
4850: LD_INT 4
4852: EQUAL
4853: NOT
4854: OR
4855: IFFALSE 4881
// begin ComExitBuilding ( i ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_INT 37
4873: PPUSH
4874: LD_INT 23
4876: PPUSH
4877: CALL_OW 174
// end ;
4881: GO 4821
4883: POP
4884: POP
// if eng then
4885: LD_VAR 0 3
4889: IFFALSE 5131
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 22
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 95
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 21
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 24
4931: PUSH
4932: LD_INT 1000
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: PPUSH
4949: CALL_OW 69
4953: ST_TO_ADDR
// if b then
4954: LD_VAR 0 2
4958: IFFALSE 4989
// begin ComExitBuilding ( eng ) ;
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4969: LD_VAR 0 3
4973: PPUSH
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 190
// end else
4987: GO 5131
// begin for i in eng do
4989: LD_ADDR_VAR 0 1
4993: PUSH
4994: LD_VAR 0 3
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5129
// if not HasTask ( i ) then
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 314
5011: NOT
5012: IFFALSE 5127
// begin if americanBuildList then
5014: LD_EXP 48
5018: IFFALSE 5103
// begin if IsInUnit ( i ) then
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 310
5029: IFFALSE 5040
// ComExitBuilding ( i ) ;
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_EXP 48
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_INT 1
5065: ARRAY
5066: PUSH
5067: LD_INT 2
5069: ARRAY
5070: PPUSH
5071: LD_EXP 48
5075: PUSH
5076: LD_INT 1
5078: ARRAY
5079: PUSH
5080: LD_INT 3
5082: ARRAY
5083: PPUSH
5084: LD_EXP 48
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: PUSH
5093: LD_INT 4
5095: ARRAY
5096: PPUSH
5097: CALL_OW 205
// end else
5101: GO 5127
// if not IsInUnit ( i ) then
5103: LD_VAR 0 1
5107: PPUSH
5108: CALL_OW 310
5112: NOT
5113: IFFALSE 5127
// ComEnterUnit ( i , usDepot ) ;
5115: LD_VAR 0 1
5119: PPUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 120
// end ;
5127: GO 4999
5129: POP
5130: POP
// end ; end ; end ;
5131: PPOPN 5
5133: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5134: LD_INT 0
5136: PPUSH
5137: PPUSH
5138: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 35
5146: PUSH
5147: LD_INT 45
5149: PUSH
5150: LD_INT 48
5152: PUSH
5153: LD_INT 82
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: ST_TO_ADDR
// for i in tech do
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 3
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5191
// AddComResearch ( lab , i ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 4
5184: PPUSH
5185: CALL_OW 184
5189: GO 5172
5191: POP
5192: POP
// end ;
5193: LD_VAR 0 2
5197: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5198: LD_EXP 13
5202: PUSH
5203: LD_EXP 24
5207: PUSH
5208: LD_EXP 28
5212: LESSEQUAL
5213: AND
5214: IFFALSE 5239
5216: GO 5218
5218: DISABLE
// begin enable ;
5219: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5220: LD_INT 35
5222: PPUSH
5223: LD_INT 2065
5225: PPUSH
5226: CALL_OW 12
5230: PPUSH
5231: CALL_OW 67
// SendConvoy ;
5235: CALL 5345 0 0
// end ;
5239: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5240: LD_EXP 7
5244: PUSH
5245: LD_EXP 19
5249: AND
5250: IFFALSE 5344
5252: GO 5254
5254: DISABLE
// begin if americanHasEscaped then
5255: LD_EXP 9
5259: IFFALSE 5270
// wait ( 3 3$20 ) else
5261: LD_INT 7000
5263: PPUSH
5264: CALL_OW 67
5268: GO 5277
// wait ( 6 6$40 ) ;
5270: LD_INT 14000
5272: PPUSH
5273: CALL_OW 67
// SendAttack ;
5277: CALL 6118 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5281: LD_INT 14000
5283: PUSH
5284: LD_INT 11900
5286: PUSH
5287: LD_INT 11200
5289: PUSH
5290: LD_INT 10150
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_OWVAR 67
5303: ARRAY
5304: PPUSH
5305: CALL_OW 67
// SendAttack ;
5309: CALL 6118 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5313: LD_EXP 20
5317: PUSH
5318: LD_INT 5
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_OWVAR 67
5340: ARRAY
5341: LESS
5342: IFFALSE 5281
// end ;
5344: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
5354: PPUSH
// road := rand ( 1 , 2 ) ;
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: CALL_OW 12
5370: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5371: LD_ADDR_VAR 0 8
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 8
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_VAR 0 4
5390: ARRAY
5391: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5392: LD_ADDR_VAR 0 5
5396: PUSH
5397: LD_INT 35
5399: PUSH
5400: LD_INT 66
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 101
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: LD_INT 4
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5429: LD_ADDR_VAR 0 6
5433: PUSH
5434: LD_INT 34
5436: PUSH
5437: LD_INT 67
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 38
5446: PUSH
5447: LD_INT 62
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 43
5456: PUSH
5457: LD_INT 54
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 57
5466: PUSH
5467: LD_INT 57
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 77
5476: PUSH
5477: LD_INT 71
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 86
5486: PUSH
5487: LD_INT 60
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 89
5496: PUSH
5497: LD_INT 35
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 93
5506: PUSH
5507: LD_INT 17
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 97
5516: PUSH
5517: LD_INT 10
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 103
5526: PUSH
5527: LD_INT 9
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// if road = 2 then
5546: LD_VAR 0 4
5550: PUSH
5551: LD_INT 2
5553: EQUAL
5554: IFFALSE 5571
// points := ReverseArray ( points ) ;
5556: LD_ADDR_VAR 0 6
5560: PUSH
5561: LD_VAR 0 6
5565: PPUSH
5566: CALL 72836 0 1
5570: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 12
5588: PPUSH
5589: LD_INT 80
5591: PPUSH
5592: CALL 341 0 7
// veh := CreateVehicle ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: CALL_OW 45
5605: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_VAR 0 5
5615: PUSH
5616: LD_VAR 0 4
5620: ARRAY
5621: PUSH
5622: LD_INT 3
5624: ARRAY
5625: PPUSH
5626: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5630: LD_VAR 0 3
5634: PPUSH
5635: LD_VAR 0 5
5639: PUSH
5640: LD_VAR 0 4
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: LD_VAR 0 5
5654: PUSH
5655: LD_VAR 0 4
5659: ARRAY
5660: PUSH
5661: LD_INT 2
5663: ARRAY
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5672: LD_INT 0
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_OWVAR 67
5682: PPUSH
5683: CALL_OW 380
// un := CreateHuman ;
5687: LD_ADDR_VAR 0 2
5691: PUSH
5692: CALL_OW 44
5696: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_VAR 0 3
5706: PPUSH
5707: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5711: LD_INT 70
5713: PUSH
5714: LD_INT 66
5716: PUSH
5717: LD_INT 62
5719: PUSH
5720: LD_INT 58
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_OWVAR 67
5733: ARRAY
5734: PPUSH
5735: CALL_OW 13
5739: PUSH
5740: LD_OWVAR 1
5744: PUSH
5745: LD_INT 30
5747: MOD
5748: PLUS
5749: PUSH
5750: LD_EXP 24
5754: PUSH
5755: LD_INT 4
5757: LESS
5758: OR
5759: IFFALSE 5776
// SetCargo ( veh , mat_cans , 100 ) ;
5761: LD_VAR 0 3
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 100
5771: PPUSH
5772: CALL_OW 290
// for i := 2 to points do
5776: LD_ADDR_VAR 0 7
5780: PUSH
5781: DOUBLE
5782: LD_INT 2
5784: DEC
5785: ST_TO_ADDR
5786: LD_VAR 0 6
5790: PUSH
5791: FOR_TO
5792: IFFALSE 5835
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5794: LD_VAR 0 3
5798: PPUSH
5799: LD_VAR 0 6
5803: PUSH
5804: LD_VAR 0 7
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: ARRAY
5813: PPUSH
5814: LD_VAR 0 6
5818: PUSH
5819: LD_VAR 0 7
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: CALL_OW 171
5833: GO 5791
5835: POP
5836: POP
// convoyCounter := convoyCounter + 1 ;
5837: LD_ADDR_EXP 24
5841: PUSH
5842: LD_EXP 24
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5851: LD_INT 35
5853: PPUSH
5854: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5858: LD_VAR 0 3
5862: PPUSH
5863: CALL_OW 255
5867: PUSH
5868: LD_INT 4
5870: NONEQUAL
5871: IFFALSE 5884
// begin ComStop ( veh ) ;
5873: LD_VAR 0 3
5877: PPUSH
5878: CALL_OW 141
// exit ;
5882: GO 6113
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5884: LD_VAR 0 3
5888: PPUSH
5889: CALL_OW 314
5893: NOT
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: CALL_OW 302
5904: AND
5905: IFFALSE 5946
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5907: LD_VAR 0 3
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_VAR 0 6
5921: ARRAY
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_VAR 0 6
5931: PUSH
5932: LD_VAR 0 6
5936: ARRAY
5937: PUSH
5938: LD_INT 2
5940: ARRAY
5941: PPUSH
5942: CALL_OW 111
// if not IsInUnit ( un ) then
5946: LD_VAR 0 2
5950: PPUSH
5951: CALL_OW 310
5955: NOT
5956: IFFALSE 5997
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_VAR 0 6
5967: PUSH
5968: LD_VAR 0 6
5972: ARRAY
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: LD_VAR 0 6
5982: PUSH
5983: LD_VAR 0 6
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_VAR 0 8
6006: PPUSH
6007: CALL_OW 308
6011: PUSH
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_VAR 0 8
6021: PPUSH
6022: CALL_OW 308
6026: OR
6027: IFFALSE 5851
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6029: LD_VAR 0 2
6033: PPUSH
6034: CALL_OW 302
6038: PUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 302
6048: NOT
6049: AND
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 8
6060: PPUSH
6061: CALL_OW 308
6065: AND
6066: IFFALSE 6077
// RemoveUnit ( un ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 8
6086: PPUSH
6087: CALL_OW 308
6091: PUSH
6092: LD_VAR 0 3
6096: PPUSH
6097: CALL_OW 302
6101: AND
6102: IFFALSE 6113
// RemoveUnit ( veh ) ;
6104: LD_VAR 0 3
6108: PPUSH
6109: CALL_OW 64
// end ;
6113: LD_VAR 0 1
6117: RET
// export function SendAttack ; var un , veh , i ; begin
6118: LD_INT 0
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
// if blockAttack then
6124: LD_EXP 29
6128: IFFALSE 6151
// begin repeat wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// until not blockAttack ;
6137: LD_EXP 29
6141: NOT
6142: IFFALSE 6130
// wait ( 0 0$5 ) ;
6144: LD_INT 175
6146: PPUSH
6147: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: PUSH
6180: LD_INT 10
6182: GREATER
6183: IFFALSE 6226
// begin repeat wait ( 0 0$1 ) ;
6185: LD_INT 35
6187: PPUSH
6188: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6192: LD_INT 22
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: PUSH
6221: LD_INT 10
6223: LESSEQUAL
6224: IFFALSE 6185
// end ; IncomingAttack ;
6226: CALL 15540 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6230: LD_INT 2100
6232: PPUSH
6233: LD_INT 3500
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: CALL_OW 67
// if blockAttack then
6245: LD_EXP 29
6249: IFFALSE 6272
// begin repeat wait ( 0 0$1 ) ;
6251: LD_INT 35
6253: PPUSH
6254: CALL_OW 67
// until not blockAttack ;
6258: LD_EXP 29
6262: NOT
6263: IFFALSE 6251
// wait ( 0 0$5 ) ;
6265: LD_INT 175
6267: PPUSH
6268: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PUSH
6306: LD_EXP 20
6310: PUSH
6311: LD_INT 3
6313: DIV
6314: PLUS
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6433
// begin uc_side := 1 ;
6319: LD_ADDR_OWVAR 20
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// uc_nation := 1 ;
6327: LD_ADDR_OWVAR 21
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6335: LD_INT 0
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 2
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: LD_INT 4
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_OWVAR 67
6363: ARRAY
6364: PPUSH
6365: CALL_OW 380
// un := CreateHuman ;
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: CALL_OW 44
6378: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_INT 37
6386: PPUSH
6387: LD_INT 70
6389: PPUSH
6390: LD_INT 3
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: CALL_OW 50
// usAttackers := usAttackers union un ;
6400: LD_ADDR_EXP 49
6404: PUSH
6405: LD_EXP 49
6409: PUSH
6410: LD_VAR 0 2
6414: UNION
6415: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6416: LD_VAR 0 2
6420: PPUSH
6421: LD_INT 40
6423: PPUSH
6424: LD_INT 65
6426: PPUSH
6427: CALL_OW 111
// end ;
6431: GO 6316
6433: POP
6434: POP
// uc_side := 1 ;
6435: LD_ADDR_OWVAR 20
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// uc_nation := 1 ;
6443: LD_ADDR_OWVAR 21
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6451: LD_INT 0
6453: PPUSH
6454: LD_INT 4
6456: PPUSH
6457: LD_INT 2
6459: PPUSH
6460: CALL_OW 380
// un := CreateHuman ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: CALL_OW 44
6473: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6474: LD_VAR 0 2
6478: PPUSH
6479: LD_INT 37
6481: PPUSH
6482: LD_INT 70
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: LD_INT 0
6490: PPUSH
6491: CALL_OW 50
// usAttackers := usAttackers union un ;
6495: LD_ADDR_EXP 49
6499: PUSH
6500: LD_EXP 49
6504: PUSH
6505: LD_VAR 0 2
6509: UNION
6510: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6511: LD_VAR 0 2
6515: PPUSH
6516: LD_INT 40
6518: PPUSH
6519: LD_INT 65
6521: PPUSH
6522: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6526: LD_ADDR_VAR 0 4
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_OWVAR 67
6540: PUSH
6541: LD_EXP 20
6545: PUSH
6546: LD_INT 4
6548: DIV
6549: PLUS
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6748
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL_OW 12
6589: ARRAY
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: LD_INT 1
6596: PPUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: ARRAY
6622: PPUSH
6623: LD_INT 90
6625: PPUSH
6626: CALL 341 0 7
6630: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6631: LD_VAR 0 3
6635: PPUSH
6636: LD_INT 35
6638: PPUSH
6639: LD_INT 65
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6649: LD_INT 0
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_OWVAR 67
6659: PUSH
6660: LD_INT 1
6662: PLUS
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6678: LD_VAR 0 2
6682: PPUSH
6683: LD_VAR 0 3
6687: PPUSH
6688: CALL_OW 52
// usAttackers := usAttackers union un ;
6692: LD_ADDR_EXP 49
6696: PUSH
6697: LD_EXP 49
6701: PUSH
6702: LD_VAR 0 2
6706: UNION
6707: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6708: LD_VAR 0 3
6712: PPUSH
6713: LD_INT 39
6715: PPUSH
6716: LD_INT 60
6718: PPUSH
6719: CALL_OW 111
// wait ( 0 0$3 ) ;
6723: LD_INT 105
6725: PPUSH
6726: CALL_OW 67
// usAttackers := usAttackers union veh ;
6730: LD_ADDR_EXP 49
6734: PUSH
6735: LD_EXP 49
6739: PUSH
6740: LD_VAR 0 3
6744: UNION
6745: ST_TO_ADDR
// end ;
6746: GO 6551
6748: POP
6749: POP
// attackWave := attackWave + 1 ;
6750: LD_ADDR_EXP 20
6754: PUSH
6755: LD_EXP 20
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6764: LD_EXP 25
6768: PPUSH
6769: CALL_OW 427
// end ;
6773: LD_VAR 0 1
6777: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6778: LD_INT 0
6780: PPUSH
6781: PPUSH
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
// if retreatAllowed then
6791: LD_EXP 12
6795: IFFALSE 6807
// strategy := 2 else
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: LD_INT 2
6804: ST_TO_ADDR
6805: GO 6823
// strategy := rand ( 0 , 2 ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 0
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: CALL_OW 12
6822: ST_TO_ADDR
// attackFormula := [ ] ;
6823: LD_ADDR_VAR 0 6
6827: PUSH
6828: EMPTY
6829: ST_TO_ADDR
// case strategy of 0 :
6830: LD_VAR 0 5
6834: PUSH
6835: LD_INT 0
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 7173
6843: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6844: LD_INT 11
6846: PPUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 30
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 70
6875: NOT
6876: IFFALSE 6948
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_INT 41
6885: PUSH
6886: LD_INT 34
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: PUSH
6896: LD_INT 53
6898: PUSH
6899: LD_INT 62
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 37
6908: PUSH
6909: LD_INT 63
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 44
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 37
6928: PUSH
6929: LD_INT 28
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7171
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6948: LD_INT 12
6950: PPUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 2
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 2
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: NOT
7009: IFFALSE 7092
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7011: LD_ADDR_VAR 0 6
7015: PUSH
7016: LD_INT 27
7018: PUSH
7019: LD_INT 42
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 27
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 53
7042: PUSH
7043: LD_INT 62
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 37
7052: PUSH
7053: LD_INT 63
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 44
7062: PUSH
7063: LD_INT 45
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 37
7072: PUSH
7073: LD_INT 28
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7171
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_INT 71
7099: PUSH
7100: LD_INT 67
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 54
7109: PUSH
7110: LD_INT 35
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 63
7123: PUSH
7124: LD_INT 40
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 37
7133: PUSH
7134: LD_INT 63
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 44
7143: PUSH
7144: LD_INT 45
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 37
7153: PUSH
7154: LD_INT 28
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: ST_TO_ADDR
// end ; 1 :
7171: GO 7376
7173: LD_INT 1
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7285
7181: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7182: LD_ADDR_VAR 0 6
7186: PUSH
7187: LD_INT 71
7189: PUSH
7190: LD_INT 67
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 82
7199: PUSH
7200: LD_INT 23
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 53
7209: PUSH
7210: LD_INT 7
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 43
7219: PUSH
7220: LD_INT 10
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 53
7235: PUSH
7236: LD_INT 62
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 37
7245: PUSH
7246: LD_INT 63
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 44
7255: PUSH
7256: LD_INT 45
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 37
7265: PUSH
7266: LD_INT 28
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: ST_TO_ADDR
7283: GO 7376
7285: LD_INT 2
7287: DOUBLE
7288: EQUAL
7289: IFTRUE 7293
7291: GO 7375
7293: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7294: LD_ADDR_VAR 0 6
7298: PUSH
7299: LD_INT 90
7301: PUSH
7302: LD_INT 59
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 108
7311: PUSH
7312: LD_INT 64
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 82
7325: PUSH
7326: LD_INT 75
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 73
7335: PUSH
7336: LD_INT 67
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 101
7345: PUSH
7346: LD_INT 65
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 108
7355: PUSH
7356: LD_INT 62
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
7373: GO 7376
7375: POP
// if not attackFormula then
7376: LD_VAR 0 6
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 9063
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7385: LD_ADDR_VAR 0 7
7389: PUSH
7390: LD_EXP 49
7394: PPUSH
7395: LD_INT 25
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 72
7409: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7410: LD_ADDR_VAR 0 8
7414: PUSH
7415: LD_EXP 49
7419: PPUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 4
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 72
7434: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7435: LD_ADDR_VAR 0 9
7439: PUSH
7440: LD_EXP 49
7444: PPUSH
7445: LD_INT 25
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 72
7459: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7460: LD_ADDR_VAR 0 10
7464: PUSH
7465: LD_EXP 49
7469: PPUSH
7470: LD_INT 21
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: ST_TO_ADDR
// if sci then
7485: LD_VAR 0 8
7489: IFFALSE 7526
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7491: LD_VAR 0 8
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: LD_VAR 0 6
7513: PUSH
7514: LD_INT 2
7516: ARRAY
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: PPUSH
7522: CALL_OW 111
// repeat wait ( 10 ) ;
7526: LD_INT 10
7528: PPUSH
7529: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7533: LD_ADDR_VAR 0 7
7537: PUSH
7538: LD_EXP 49
7542: PPUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 72
7557: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7558: LD_ADDR_VAR 0 8
7562: PUSH
7563: LD_EXP 49
7567: PPUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 72
7582: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7583: LD_ADDR_VAR 0 9
7587: PUSH
7588: LD_EXP 49
7592: PPUSH
7593: LD_INT 25
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 72
7607: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7608: LD_ADDR_VAR 0 10
7612: PUSH
7613: LD_EXP 49
7617: PPUSH
7618: LD_INT 21
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 72
7632: ST_TO_ADDR
// if sol then
7633: LD_VAR 0 7
7637: IFFALSE 8058
// begin for i in sol do
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_VAR 0 7
7648: PUSH
7649: FOR_IN
7650: IFFALSE 8056
// begin tag := GetTag ( i ) ;
7652: LD_ADDR_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: PPUSH
7662: CALL_OW 110
7666: ST_TO_ADDR
// if not tag then
7667: LD_VAR 0 4
7671: NOT
7672: IFFALSE 7781
// begin if GetLives ( i ) = 1000 then
7674: LD_VAR 0 2
7678: PPUSH
7679: CALL_OW 256
7683: PUSH
7684: LD_INT 1000
7686: EQUAL
7687: IFFALSE 7703
// SetTag ( i , 1 ) else
7689: LD_VAR 0 2
7693: PPUSH
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 109
7701: GO 7779
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7703: LD_VAR 0 2
7707: PPUSH
7708: LD_VAR 0 6
7712: PUSH
7713: LD_INT 2
7715: ARRAY
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: ARRAY
7729: PUSH
7730: LD_INT 2
7732: ARRAY
7733: PPUSH
7734: CALL_OW 297
7738: PUSH
7739: LD_INT 10
7741: GREATER
7742: IFFALSE 7779
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_VAR 0 6
7753: PUSH
7754: LD_INT 2
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PUSH
7771: LD_INT 2
7773: ARRAY
7774: PPUSH
7775: CALL_OW 111
// end else
7779: GO 8054
// begin if GetLives ( i ) < 760 then
7781: LD_VAR 0 2
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 760
7793: LESS
7794: IFFALSE 7845
// begin SetTag ( i , 0 ) ;
7796: LD_VAR 0 2
7800: PPUSH
7801: LD_INT 0
7803: PPUSH
7804: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7808: LD_VAR 0 2
7812: PPUSH
7813: LD_VAR 0 6
7817: PUSH
7818: LD_INT 2
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_VAR 0 6
7830: PUSH
7831: LD_INT 2
7833: ARRAY
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: PPUSH
7839: CALL_OW 111
// end else
7843: GO 8054
// if tag <= attackFormula [ 1 ] then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 6
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: LESSEQUAL
7859: IFFALSE 8020
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 6
7870: PUSH
7871: LD_INT 1
7873: ARRAY
7874: PUSH
7875: LD_VAR 0 4
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 6
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PUSH
7900: LD_INT 2
7902: ARRAY
7903: PPUSH
7904: CALL_OW 297
7908: PUSH
7909: LD_INT 6
7911: GREATER
7912: IFFALSE 7963
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7914: LD_VAR 0 2
7918: PPUSH
7919: LD_VAR 0 6
7923: PUSH
7924: LD_INT 1
7926: ARRAY
7927: PUSH
7928: LD_VAR 0 4
7932: ARRAY
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 6
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PUSH
7947: LD_VAR 0 4
7951: ARRAY
7952: PUSH
7953: LD_INT 2
7955: ARRAY
7956: PPUSH
7957: CALL_OW 114
7961: GO 8018
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7963: LD_INT 81
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 91
7975: PUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 10
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PPUSH
7993: CALL_OW 69
7997: NOT
7998: IFFALSE 8018
// SetTag ( i , tag + 1 ) ;
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: PLUS
8013: PPUSH
8014: CALL_OW 109
// end else
8018: GO 8054
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 81
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PPUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 74
8049: PPUSH
8050: CALL_OW 115
// end ; end ;
8054: GO 7649
8056: POP
8057: POP
// end ; if sci then
8058: LD_VAR 0 8
8062: IFFALSE 8331
// begin if not sol and not mech then
8064: LD_VAR 0 7
8068: NOT
8069: PUSH
8070: LD_VAR 0 9
8074: NOT
8075: AND
8076: IFFALSE 8128
// begin for i in sci do
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_VAR 0 8
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8124
// begin usForces := usForces union i ;
8091: LD_ADDR_EXP 46
8095: PUSH
8096: LD_EXP 46
8100: PUSH
8101: LD_VAR 0 2
8105: UNION
8106: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_INT 34
8114: PPUSH
8115: LD_INT 68
8117: PPUSH
8118: CALL_OW 111
// end ;
8122: GO 8088
8124: POP
8125: POP
// end else
8126: GO 8331
// for i in sci do
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 8
8137: PUSH
8138: FOR_IN
8139: IFFALSE 8329
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_VAR 0 6
8150: PUSH
8151: LD_INT 2
8153: ARRAY
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 6
8163: PUSH
8164: LD_INT 2
8166: ARRAY
8167: PUSH
8168: LD_INT 2
8170: ARRAY
8171: PPUSH
8172: CALL_OW 297
8176: PUSH
8177: LD_INT 10
8179: GREATER
8180: IFFALSE 8219
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_VAR 0 6
8191: PUSH
8192: LD_INT 2
8194: ARRAY
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 6
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PPUSH
8213: CALL_OW 111
8217: GO 8327
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8219: LD_VAR 0 7
8223: PPUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: LD_INT 1000
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 91
8243: PUSH
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 10
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: IFFALSE 8327
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_VAR 0 7
8276: PPUSH
8277: LD_INT 3
8279: PUSH
8280: LD_INT 24
8282: PUSH
8283: LD_INT 1000
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 91
8296: PUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 10
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 72
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: CALL_OW 128
8327: GO 8138
8329: POP
8330: POP
// end ; if mech then
8331: LD_VAR 0 9
8335: IFFALSE 9045
// begin for i in mech do
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: FOR_IN
8348: IFFALSE 9043
// begin tag := GetTag ( i ) ;
8350: LD_ADDR_VAR 0 4
8354: PUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 110
8364: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8365: LD_ADDR_VAR 0 11
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 310
8379: ST_TO_ADDR
// if not tag then
8380: LD_VAR 0 4
8384: NOT
8385: IFFALSE 8756
// begin if veh then
8387: LD_VAR 0 11
8391: IFFALSE 8562
// begin if GetLives ( veh ) = 1000 then
8393: LD_VAR 0 11
8397: PPUSH
8398: CALL_OW 256
8402: PUSH
8403: LD_INT 1000
8405: EQUAL
8406: IFFALSE 8422
// SetTag ( i , 1 ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 1
8415: PPUSH
8416: CALL_OW 109
8420: GO 8560
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8422: LD_VAR 0 11
8426: PPUSH
8427: LD_VAR 0 6
8431: PUSH
8432: LD_INT 3
8434: ARRAY
8435: PUSH
8436: LD_INT 1
8438: ARRAY
8439: PPUSH
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 3
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PPUSH
8453: CALL_OW 297
8457: PUSH
8458: LD_INT 8
8460: GREATER
8461: IFFALSE 8500
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8463: LD_VAR 0 11
8467: PPUSH
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 6
8485: PUSH
8486: LD_INT 3
8488: ARRAY
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 111
8498: GO 8560
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8500: LD_INT 81
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 91
8512: PUSH
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 12
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: NOT
8535: IFFALSE 8560
// begin ComExitVehicle ( i ) ;
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 11
8555: PPUSH
8556: CALL_OW 189
// end ; end else
8560: GO 8754
// if GetLives ( i ) < 400 then
8562: LD_VAR 0 2
8566: PPUSH
8567: CALL_OW 256
8571: PUSH
8572: LD_INT 400
8574: LESS
8575: IFFALSE 8626
// begin usAttackers := usAttackers diff i ;
8577: LD_ADDR_EXP 49
8581: PUSH
8582: LD_EXP 49
8586: PUSH
8587: LD_VAR 0 2
8591: DIFF
8592: ST_TO_ADDR
// usForces := usForces union i ;
8593: LD_ADDR_EXP 46
8597: PUSH
8598: LD_EXP 46
8602: PUSH
8603: LD_VAR 0 2
8607: UNION
8608: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 34
8616: PPUSH
8617: LD_INT 68
8619: PPUSH
8620: CALL_OW 111
// end else
8624: GO 8754
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8626: LD_VAR 0 10
8630: PPUSH
8631: LD_INT 58
8633: PUSH
8634: EMPTY
8635: LIST
8636: PUSH
8637: LD_INT 24
8639: PUSH
8640: LD_INT 1000
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 72
8655: PUSH
8656: LD_VAR 0 2
8660: PPUSH
8661: CALL_OW 314
8665: NOT
8666: AND
8667: PUSH
8668: LD_INT 81
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 91
8680: PUSH
8681: LD_VAR 0 2
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: OR
8703: IFFALSE 8754
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_VAR 0 10
8714: PPUSH
8715: LD_INT 58
8717: PUSH
8718: EMPTY
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 250
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 72
8739: PPUSH
8740: LD_VAR 0 2
8744: PPUSH
8745: CALL_OW 74
8749: PPUSH
8750: CALL_OW 120
// end else
8754: GO 9041
// begin if veh and GetLives ( veh ) < 760 then
8756: LD_VAR 0 11
8760: PUSH
8761: LD_VAR 0 11
8765: PPUSH
8766: CALL_OW 256
8770: PUSH
8771: LD_INT 760
8773: LESS
8774: AND
8775: IFFALSE 8826
// begin SetTag ( i , 0 ) ;
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 0
8784: PPUSH
8785: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8789: LD_VAR 0 11
8793: PPUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 3
8801: ARRAY
8802: PUSH
8803: LD_INT 1
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 6
8811: PUSH
8812: LD_INT 3
8814: ARRAY
8815: PUSH
8816: LD_INT 2
8818: ARRAY
8819: PPUSH
8820: CALL_OW 111
// end else
8824: GO 9041
// if veh then
8826: LD_VAR 0 11
8830: IFFALSE 9041
// if tag <= attackFormula [ 4 ] then
8832: LD_VAR 0 4
8836: PUSH
8837: LD_VAR 0 6
8841: PUSH
8842: LD_INT 4
8844: ARRAY
8845: LESSEQUAL
8846: IFFALSE 9007
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8848: LD_VAR 0 11
8852: PPUSH
8853: LD_VAR 0 6
8857: PUSH
8858: LD_INT 4
8860: ARRAY
8861: PUSH
8862: LD_VAR 0 4
8866: ARRAY
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_INT 4
8879: ARRAY
8880: PUSH
8881: LD_VAR 0 4
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: PPUSH
8891: CALL_OW 297
8895: PUSH
8896: LD_INT 6
8898: GREATER
8899: IFFALSE 8950
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8901: LD_VAR 0 11
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 4
8913: ARRAY
8914: PUSH
8915: LD_VAR 0 4
8919: ARRAY
8920: PUSH
8921: LD_INT 1
8923: ARRAY
8924: PPUSH
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 4
8932: ARRAY
8933: PUSH
8934: LD_VAR 0 4
8938: ARRAY
8939: PUSH
8940: LD_INT 2
8942: ARRAY
8943: PPUSH
8944: CALL_OW 114
8948: GO 9005
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8950: LD_INT 81
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 91
8962: PUSH
8963: LD_VAR 0 11
8967: PUSH
8968: LD_INT 10
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 69
8984: NOT
8985: IFFALSE 9005
// SetTag ( i , tag + 1 ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_VAR 0 4
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: PPUSH
9001: CALL_OW 109
// end else
9005: GO 9041
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9007: LD_VAR 0 11
9011: PPUSH
9012: LD_INT 81
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL_OW 74
9036: PPUSH
9037: CALL_OW 115
// end ; end ;
9041: GO 8347
9043: POP
9044: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9045: LD_EXP 49
9049: PPUSH
9050: LD_INT 52
9052: PUSH
9053: EMPTY
9054: LIST
9055: PPUSH
9056: CALL_OW 72
9060: NOT
9061: IFFALSE 7526
// end ;
9063: LD_VAR 0 1
9067: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9068: LD_INT 22
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 32
9080: PUSH
9081: LD_INT 1
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: IFFALSE 9173
9098: GO 9100
9100: DISABLE
9101: LD_INT 0
9103: PPUSH
// begin enable ;
9104: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 32
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9171
// if GetFuel ( i ) < 10 then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 261
9151: PUSH
9152: LD_INT 10
9154: LESS
9155: IFFALSE 9169
// SetFuel ( i , 10 ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_INT 10
9164: PPUSH
9165: CALL_OW 240
9169: GO 9139
9171: POP
9172: POP
// end ; end_of_file
9173: PPOPN 1
9175: END
// export function Action ; var hasAll , i , tmp ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9182: LD_ADDR_VAR 0 2
9186: PUSH
9187: LD_INT 22
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 21
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 23
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 69
9226: PUSH
9227: LD_INT 7
9229: GREATEREQUAL
9230: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_STRING 03_HasAll
9238: PPUSH
9239: CALL_OW 39
// Video ( true ) ;
9243: LD_INT 1
9245: PPUSH
9246: CALL 77520 0 1
// CenterNowOnUnits ( Heike ) ;
9250: LD_EXP 30
9254: PPUSH
9255: CALL_OW 87
// wait ( 0 0$2 ) ;
9259: LD_INT 70
9261: PPUSH
9262: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9266: LD_EXP 38
9270: PPUSH
9271: LD_STRING DF-1-start
9273: PPUSH
9274: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9278: LD_EXP 30
9282: PPUSH
9283: LD_EXP 38
9287: PPUSH
9288: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DH-1-start
9299: PPUSH
9300: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9304: LD_EXP 39
9308: PPUSH
9309: LD_INT 92
9311: PPUSH
9312: LD_INT 21
9314: PPUSH
9315: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9319: LD_EXP 34
9323: PPUSH
9324: LD_INT 94
9326: PPUSH
9327: LD_INT 23
9329: PPUSH
9330: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9334: LD_EXP 42
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_INT 90
9345: PPUSH
9346: LD_INT 23
9348: PPUSH
9349: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9353: LD_EXP 42
9357: PUSH
9358: LD_INT 2
9360: ARRAY
9361: PPUSH
9362: LD_INT 93
9364: PPUSH
9365: LD_INT 25
9367: PPUSH
9368: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9372: LD_EXP 42
9376: PPUSH
9377: LD_EXP 39
9381: PPUSH
9382: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9386: LD_EXP 39
9390: PUSH
9391: LD_EXP 34
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: LD_EXP 30
9404: PPUSH
9405: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9409: LD_EXP 30
9413: PPUSH
9414: LD_EXP 39
9418: PPUSH
9419: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9423: LD_INT 35
9425: PPUSH
9426: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9430: LD_EXP 39
9434: PPUSH
9435: LD_INT 92
9437: PPUSH
9438: LD_INT 21
9440: PPUSH
9441: CALL_OW 307
9445: IFFALSE 9423
// Say ( Omar , DO-1-start ) ;
9447: LD_EXP 39
9451: PPUSH
9452: LD_STRING DO-1-start
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9459: LD_EXP 30
9463: PPUSH
9464: LD_STRING DH-2-start
9466: PPUSH
9467: CALL_OW 88
// if hasAll then
9471: LD_VAR 0 2
9475: IFFALSE 9603
// begin Say ( Omar , DO-2-start ) ;
9477: LD_EXP 39
9481: PPUSH
9482: LD_STRING DO-2-start
9484: PPUSH
9485: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9489: LD_EXP 39
9493: PPUSH
9494: LD_STRING DO-3-start
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9501: LD_EXP 30
9505: PPUSH
9506: LD_STRING DH-3-start
9508: PPUSH
9509: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9513: LD_EXP 38
9517: PPUSH
9518: LD_STRING DF-2-start
9520: PPUSH
9521: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9525: LD_EXP 39
9529: PPUSH
9530: LD_EXP 38
9534: PPUSH
9535: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9539: LD_EXP 39
9543: PPUSH
9544: LD_STRING DO-4-start
9546: PPUSH
9547: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9551: LD_EXP 38
9555: PPUSH
9556: LD_STRING DF-3-start
9558: PPUSH
9559: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9563: LD_EXP 39
9567: PPUSH
9568: LD_STRING DO-5-start
9570: PPUSH
9571: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9575: LD_EXP 38
9579: PPUSH
9580: LD_STRING DF-4-start
9582: PPUSH
9583: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9587: LD_EXP 39
9591: PPUSH
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 119
// end else
9601: GO 9703
// begin Say ( Omar , DO-2-start-a ) ;
9603: LD_EXP 39
9607: PPUSH
9608: LD_STRING DO-2-start-a
9610: PPUSH
9611: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9615: LD_EXP 39
9619: PPUSH
9620: LD_STRING DO-3-start-a
9622: PPUSH
9623: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9627: LD_EXP 30
9631: PPUSH
9632: LD_STRING DH-3-start-a
9634: PPUSH
9635: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9639: LD_EXP 38
9643: PPUSH
9644: LD_STRING DF-2-start-a
9646: PPUSH
9647: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9651: LD_EXP 39
9655: PPUSH
9656: LD_EXP 38
9660: PPUSH
9661: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9665: LD_EXP 39
9669: PPUSH
9670: LD_STRING DO-4-start-a
9672: PPUSH
9673: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9677: LD_EXP 38
9681: PPUSH
9682: LD_STRING DF-3-start-a
9684: PPUSH
9685: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9689: LD_EXP 39
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9703: LD_INT 10
9705: PPUSH
9706: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9710: LD_EXP 39
9714: PPUSH
9715: LD_STRING DO-1-mission
9717: PPUSH
9718: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9722: LD_EXP 39
9726: PPUSH
9727: LD_STRING DO-2-mission
9729: PPUSH
9730: CALL_OW 88
// if not hasAll then
9734: LD_VAR 0 2
9738: NOT
9739: IFFALSE 9753
// Say ( Omar , DO-3-mission ) ;
9741: LD_EXP 39
9745: PPUSH
9746: LD_STRING DO-3-mission
9748: PPUSH
9749: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9753: LD_EXP 39
9757: PPUSH
9758: LD_STRING DO-4-mission
9760: PPUSH
9761: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9765: LD_EXP 30
9769: PPUSH
9770: LD_STRING DH-1-mission
9772: PPUSH
9773: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9777: LD_EXP 38
9781: PPUSH
9782: LD_STRING DF-1-mission
9784: PPUSH
9785: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9789: LD_EXP 39
9793: PPUSH
9794: LD_STRING DO-5-mission
9796: PPUSH
9797: CALL_OW 88
// if not hasAll then
9801: LD_VAR 0 2
9805: NOT
9806: IFFALSE 9941
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9808: LD_ADDR_VAR 0 4
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 1
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 69
9852: ST_TO_ADDR
// for i := 7 downto tmp do
9853: LD_ADDR_VAR 0 3
9857: PUSH
9858: DOUBLE
9859: LD_INT 7
9861: INC
9862: ST_TO_ADDR
9863: LD_VAR 0 4
9867: PUSH
9868: FOR_DOWNTO
9869: IFFALSE 9939
// begin if omarSquad < 3 then
9871: LD_EXP 42
9875: PUSH
9876: LD_INT 3
9878: LESS
9879: IFFALSE 9883
// break ;
9881: GO 9939
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9883: LD_EXP 42
9887: PUSH
9888: LD_INT 3
9890: ARRAY
9891: PPUSH
9892: LD_INT 2
9894: PPUSH
9895: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9899: LD_ADDR_EXP 44
9903: PUSH
9904: LD_EXP 44
9908: PUSH
9909: LD_EXP 42
9913: PUSH
9914: LD_INT 3
9916: ARRAY
9917: UNION
9918: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9919: LD_ADDR_EXP 42
9923: PUSH
9924: LD_EXP 42
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: CALL_OW 3
9936: ST_TO_ADDR
// end ;
9937: GO 9868
9939: POP
9940: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9941: LD_EXP 39
9945: PUSH
9946: LD_EXP 42
9950: ADD
9951: PPUSH
9952: LD_INT 103
9954: PPUSH
9955: LD_INT 9
9957: PPUSH
9958: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9962: LD_VAR 0 2
9966: PUSH
9967: LD_EXP 35
9971: PPUSH
9972: CALL_OW 302
9976: AND
9977: IFFALSE 10038
// begin wait ( 0 0$3 ) ;
9979: LD_INT 105
9981: PPUSH
9982: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9986: LD_EXP 35
9990: PPUSH
9991: LD_EXP 38
9995: PPUSH
9996: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10000: LD_EXP 35
10004: PPUSH
10005: LD_STRING DK-1-side
10007: PPUSH
10008: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10012: LD_EXP 38
10016: PPUSH
10017: LD_EXP 35
10021: PPUSH
10022: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10026: LD_EXP 38
10030: PPUSH
10031: LD_STRING DF-1-side
10033: PPUSH
10034: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PPUSH
10053: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10057: LD_EXP 38
10061: PUSH
10062: LD_EXP 41
10066: ADD
10067: PPUSH
10068: LD_INT 108
10070: PPUSH
10071: LD_INT 62
10073: PPUSH
10074: CALL_OW 111
// gameStarted := true ;
10078: LD_ADDR_EXP 3
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10086: LD_INT 105
10088: PPUSH
10089: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10093: LD_EXP 30
10097: PPUSH
10098: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10102: LD_EXP 30
10106: PPUSH
10107: LD_EXP 34
10111: PPUSH
10112: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10116: LD_INT 22
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 69
10130: PUSH
10131: LD_EXP 30
10135: DIFF
10136: PPUSH
10137: LD_EXP 30
10141: PPUSH
10142: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10146: LD_EXP 30
10150: PPUSH
10151: LD_STRING DH-1-explore
10153: PPUSH
10154: CALL_OW 88
// if Givi then
10158: LD_EXP 31
10162: IFFALSE 10178
// Say ( Givi , DG-1-explore ) else
10164: LD_EXP 31
10168: PPUSH
10169: LD_STRING DG-1-explore
10171: PPUSH
10172: CALL_OW 88
10176: GO 10215
// if heikeSecondSquad then
10178: LD_EXP 44
10182: IFFALSE 10215
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10184: LD_EXP 44
10188: PPUSH
10189: LD_INT 26
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 72
10203: PUSH
10204: LD_INT 1
10206: ARRAY
10207: PPUSH
10208: LD_STRING DArm-1-explore
10210: PPUSH
10211: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10215: LD_EXP 34
10219: PPUSH
10220: LD_STRING DA-1-explore
10222: PPUSH
10223: CALL_OW 88
// if Sophia then
10227: LD_EXP 36
10231: IFFALSE 10309
// begin Say ( Sophia , DS-2-explore ) ;
10233: LD_EXP 36
10237: PPUSH
10238: LD_STRING DS-2-explore
10240: PPUSH
10241: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10245: LD_EXP 34
10249: PPUSH
10250: LD_STRING DA-2-explore
10252: PPUSH
10253: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_EXP 34
10266: PPUSH
10267: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10271: LD_EXP 34
10275: PPUSH
10276: LD_EXP 36
10280: PPUSH
10281: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10285: LD_EXP 36
10289: PPUSH
10290: LD_STRING DS-3-explore
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10297: LD_EXP 34
10301: PPUSH
10302: LD_STRING DA-3-explore
10304: PPUSH
10305: CALL_OW 88
// end ; if Mike then
10309: LD_EXP 32
10313: IFFALSE 10369
// begin Say ( Mike , DM-1-explore ) ;
10315: LD_EXP 32
10319: PPUSH
10320: LD_STRING DM-1-explore
10322: PPUSH
10323: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10327: LD_EXP 30
10331: PPUSH
10332: LD_STRING DH-2-explore
10334: PPUSH
10335: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10339: LD_EXP 32
10343: PPUSH
10344: LD_STRING DM-2-explore
10346: PPUSH
10347: CALL_OW 88
// if Kaia then
10351: LD_EXP 35
10355: IFFALSE 10369
// Say ( Kaia , DK-1-explore ) ;
10357: LD_EXP 35
10361: PPUSH
10362: LD_STRING DK-1-explore
10364: PPUSH
10365: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: PPUSH
10384: CALL_OW 139
// Video ( false ) ;
10388: LD_INT 0
10390: PPUSH
10391: CALL 77520 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10395: LD_STRING BuildBase
10397: PPUSH
10398: CALL_OW 337
// SaveForQuickRestart ;
10402: CALL_OW 22
// end ;
10406: LD_VAR 0 1
10410: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10411: LD_EXP 5
10415: PUSH
10416: LD_EXP 7
10420: NOT
10421: AND
10422: IFFALSE 10609
10424: GO 10426
10426: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10427: LD_EXP 47
10431: PPUSH
10432: LD_STRING DUsm-4-assault
10434: PPUSH
10435: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10446: LD_INT 22
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 1
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 50
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: LD_INT 95
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: IFFALSE 10439
// if not IsOk ( usCommander ) or americanBaseCaptured then
10494: LD_EXP 47
10498: PPUSH
10499: CALL_OW 302
10503: NOT
10504: PUSH
10505: LD_EXP 7
10509: OR
10510: IFFALSE 10514
// exit ;
10512: GO 10609
// repeat wait ( 0 0$1 ) ;
10514: LD_INT 35
10516: PPUSH
10517: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10521: LD_INT 22
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 50
10543: PUSH
10544: EMPTY
10545: LIST
10546: PUSH
10547: LD_INT 95
10549: PUSH
10550: LD_INT 7
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: NOT
10568: IFFALSE 10514
// wait ( 0 0$3 ) ;
10570: LD_INT 105
10572: PPUSH
10573: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10577: LD_EXP 47
10581: PPUSH
10582: CALL_OW 302
10586: NOT
10587: PUSH
10588: LD_EXP 7
10592: OR
10593: IFFALSE 10597
// exit ;
10595: GO 10609
// Say ( usCommander , DUsm-3-assault ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_STRING DUsm-3-assault
10604: PPUSH
10605: CALL_OW 88
// end ;
10609: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10610: LD_EXP 6
10614: NOT
10615: PUSH
10616: LD_EXP 7
10620: NOT
10621: AND
10622: PUSH
10623: LD_INT 5
10625: PPUSH
10626: LD_INT 22
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 70
10640: AND
10641: PUSH
10642: LD_EXP 7
10646: NOT
10647: AND
10648: IFFALSE 10733
10650: GO 10652
10652: DISABLE
// begin if Mike then
10653: LD_EXP 32
10657: IFFALSE 10673
// Say ( Mike , DM-1-scout ) else
10659: LD_EXP 32
10663: PPUSH
10664: LD_STRING DM-1-scout
10666: PPUSH
10667: CALL_OW 88
10671: GO 10704
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10673: LD_EXP 44
10677: PPUSH
10678: LD_INT 26
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PPUSH
10688: CALL_OW 72
10692: PUSH
10693: LD_INT 1
10695: ARRAY
10696: PPUSH
10697: LD_STRING DArm-1-explore
10699: PPUSH
10700: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10704: LD_INT 54
10706: PPUSH
10707: LD_INT 35
10709: PPUSH
10710: LD_INT 2
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10720: LD_INT 54
10722: PPUSH
10723: LD_INT 35
10725: PPUSH
10726: LD_INT 2
10728: PPUSH
10729: CALL_OW 331
// end ;
10733: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10734: LD_INT 6
10736: PPUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 70
10751: PUSH
10752: LD_EXP 7
10756: NOT
10757: AND
10758: IFFALSE 11012
10760: GO 10762
10762: DISABLE
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_EXP 44
10777: PPUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 72
10792: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: LD_EXP 44
10802: PPUSH
10803: LD_INT 26
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 72
10817: ST_TO_ADDR
// DialogueOn ;
10818: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10822: LD_INT 36
10824: PPUSH
10825: LD_INT 22
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: LD_INT 8
10833: PPUSH
10834: CALL_OW 330
// dwait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 68
// speakerOk := false ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// if Mike then
10853: LD_EXP 32
10857: IFFALSE 10879
// speakerOk := Say ( Mike , DM-1-spot ) else
10859: LD_ADDR_VAR 0 3
10863: PUSH
10864: LD_EXP 32
10868: PPUSH
10869: LD_STRING DM-1-spot
10871: PPUSH
10872: CALL_OW 88
10876: ST_TO_ADDR
10877: GO 10907
// if randomMen then
10879: LD_VAR 0 1
10883: IFFALSE 10907
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_VAR 0 1
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: LD_STRING DArm-1-spot-a
10901: PPUSH
10902: CALL_OW 88
10906: ST_TO_ADDR
// if speakerOk then
10907: LD_VAR 0 3
10911: IFFALSE 10955
// begin if Givi then
10913: LD_EXP 31
10917: IFFALSE 10933
// Say ( Givi , DG-1-spot ) else
10919: LD_EXP 31
10923: PPUSH
10924: LD_STRING DG-1-spot
10926: PPUSH
10927: CALL_OW 88
10931: GO 10955
// if randomWomen then
10933: LD_VAR 0 2
10937: IFFALSE 10955
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: PPUSH
10948: LD_STRING DArf-1-spot-a
10950: PPUSH
10951: CALL_OW 88
// end ; if Mike then
10955: LD_EXP 32
10959: IFFALSE 10975
// Say ( Heike , DH-1-spot ) else
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING DH-1-spot
10968: PPUSH
10969: CALL_OW 88
10973: GO 10987
// Say ( Heike , DH-1-spot-a ) ;
10975: LD_EXP 30
10979: PPUSH
10980: LD_STRING DH-1-spot-a
10982: PPUSH
10983: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10987: LD_INT 36
10989: PPUSH
10990: LD_INT 22
10992: PPUSH
10993: LD_INT 2
10995: PPUSH
10996: CALL_OW 331
// DialogueOff ;
11000: CALL_OW 7
// americanBaseSpoted := true ;
11004: LD_ADDR_EXP 6
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// end ;
11012: PPOPN 3
11014: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11015: LD_EXP 6
11019: NOT
11020: PUSH
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 69
11049: AND
11050: PUSH
11051: LD_EXP 7
11055: NOT
11056: AND
11057: IFFALSE 11143
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
// begin americanBaseSpoted := true ;
11065: LD_ADDR_EXP 6
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11073: LD_ADDR_VAR 0 1
11077: PUSH
11078: LD_EXP 44
11082: PPUSH
11083: LD_INT 26
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 72
11097: ST_TO_ADDR
// if not randomMen then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11143
// DialogueOn ;
11107: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 1
11118: ARRAY
11119: PPUSH
11120: LD_STRING DArm-1-spot-a
11122: PPUSH
11123: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11127: LD_EXP 30
11131: PPUSH
11132: LD_STRING DH-1-spot-a
11134: PPUSH
11135: CALL_OW 88
// DialogueOff ;
11139: CALL_OW 7
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11146: LD_INT 11
11148: PPUSH
11149: CALL_OW 255
11153: PUSH
11154: LD_INT 2
11156: EQUAL
11157: PUSH
11158: LD_INT 7
11160: PPUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 1
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: LD_INT 50
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 30
11186: PUSH
11187: LD_INT 31
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: OR
11204: PUSH
11205: LD_INT 7
11207: PPUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 70
11222: PUSH
11223: LD_INT 2
11225: GREATER
11226: OR
11227: PUSH
11228: LD_EXP 46
11232: PUSH
11233: LD_INT 4
11235: LESSEQUAL
11236: OR
11237: IFFALSE 11828
11239: GO 11241
11241: DISABLE
11242: LD_INT 0
11244: PPUSH
11245: PPUSH
// begin wait ( 0 0$3 ) ;
11246: LD_INT 105
11248: PPUSH
11249: CALL_OW 67
// americanStartRun := true ;
11253: LD_ADDR_EXP 15
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if IsOk ( usCommander ) then
11261: LD_EXP 47
11265: PPUSH
11266: CALL_OW 302
11270: IFFALSE 11300
// begin usForces := usForces union usCommander ;
11272: LD_ADDR_EXP 46
11276: PUSH
11277: LD_EXP 46
11281: PUSH
11282: LD_EXP 47
11286: UNION
11287: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11288: LD_EXP 47
11292: PPUSH
11293: LD_STRING DUsm-1-assault
11295: PPUSH
11296: CALL_OW 88
// end ; for i in usForces do
11300: LD_ADDR_VAR 0 1
11304: PUSH
11305: LD_EXP 46
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11357
// begin if IsInUnit ( i ) then
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 310
11322: IFFALSE 11333
// ComExitBuilding ( i ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 122
// wait ( 3 ) ;
11333: LD_INT 3
11335: PPUSH
11336: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_INT 34
11347: PPUSH
11348: LD_INT 67
11350: PPUSH
11351: CALL_OW 111
// end ;
11355: GO 11310
11357: POP
11358: POP
// Say ( Heike , DH-1-assault ) ;
11359: LD_EXP 30
11363: PPUSH
11364: LD_STRING DH-1-assault
11366: PPUSH
11367: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11371: LD_INT 35
11373: PPUSH
11374: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 34
11385: PPUSH
11386: LD_INT 67
11388: PPUSH
11389: CALL_OW 111
// until not usForces ;
11393: LD_EXP 46
11397: NOT
11398: IFFALSE 11371
// music_nat := 2 ;
11400: LD_ADDR_OWVAR 71
11404: PUSH
11405: LD_INT 2
11407: ST_TO_ADDR
// music_class := music_victory ;
11408: LD_ADDR_OWVAR 72
11412: PUSH
11413: LD_INT 4
11415: ST_TO_ADDR
// if not americanHasEscaped then
11416: LD_EXP 9
11420: NOT
11421: IFFALSE 11442
// begin Say ( Heike , DH-2-assault ) ;
11423: LD_EXP 30
11427: PPUSH
11428: LD_STRING DH-2-assault
11430: PPUSH
11431: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11435: LD_STRING ACH_CLEAN
11437: PPUSH
11438: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11449: LD_INT 35
11451: PPUSH
11452: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11456: LD_INT 22
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 50
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: NOT
11499: IFFALSE 11449
// InGameOn ;
11501: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11505: LD_INT 11
11507: PPUSH
11508: CALL_OW 255
11512: PUSH
11513: LD_INT 2
11515: EQUAL
11516: NOT
11517: IFFALSE 11529
// SetSide ( usDepot , 2 ) ;
11519: LD_INT 11
11521: PPUSH
11522: LD_INT 2
11524: PPUSH
11525: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11529: LD_INT 35
11531: PPUSH
11532: LD_INT 22
11534: PPUSH
11535: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11539: LD_EXP 30
11543: PPUSH
11544: LD_INT 35
11546: PPUSH
11547: LD_INT 22
11549: PPUSH
11550: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11554: LD_EXP 30
11558: PPUSH
11559: LD_INT 38
11561: PPUSH
11562: LD_INT 25
11564: PPUSH
11565: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11569: LD_EXP 34
11573: PUSH
11574: LD_EXP 43
11578: UNION
11579: PUSH
11580: LD_EXP 44
11584: UNION
11585: PPUSH
11586: LD_INT 39
11588: PPUSH
11589: LD_INT 26
11591: PPUSH
11592: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11596: LD_EXP 34
11600: PUSH
11601: LD_EXP 43
11605: UNION
11606: PUSH
11607: LD_EXP 44
11611: UNION
11612: PPUSH
11613: LD_EXP 30
11617: PPUSH
11618: CALL_OW 179
// p := 0 ;
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// p := p + 1 ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11651: LD_EXP 30
11655: PPUSH
11656: CALL_OW 314
11660: NOT
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: LD_INT 10
11669: GREATER
11670: OR
11671: IFFALSE 11630
// Say ( Heike , DH-1-capture ) ;
11673: LD_EXP 30
11677: PPUSH
11678: LD_STRING DH-1-capture
11680: PPUSH
11681: CALL_OW 88
// if Markov then
11685: LD_EXP 37
11689: IFFALSE 11703
// Say ( Markov , DMar-1-capture ) ;
11691: LD_EXP 37
11695: PPUSH
11696: LD_STRING DMar-1-capture
11698: PPUSH
11699: CALL_OW 88
// if Sophia then
11703: LD_EXP 36
11707: IFFALSE 11733
// begin Say ( Heike , DH-2-capture ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_STRING DH-2-capture
11716: PPUSH
11717: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11721: LD_EXP 36
11725: PPUSH
11726: LD_STRING DS-1-capture
11728: PPUSH
11729: CALL_OW 88
// end ; InGameOff ;
11733: CALL_OW 9
// music_nat := music_auto ;
11737: LD_ADDR_OWVAR 71
11741: PUSH
11742: LD_INT 0
11744: ST_TO_ADDR
// music_class := music_auto ;
11745: LD_ADDR_OWVAR 72
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11753: LD_STRING ConstructBase
11755: PPUSH
11756: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11811
// SetSide ( i , 2 ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_INT 2
11804: PPUSH
11805: CALL_OW 235
11809: GO 11794
11811: POP
11812: POP
// wait ( 0 0$3 ) ;
11813: LD_INT 105
11815: PPUSH
11816: CALL_OW 67
// americanBaseCaptured := true ;
11820: LD_ADDR_EXP 7
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// end ;
11828: PPOPN 2
11830: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11831: LD_EXP 14
11835: PUSH
11836: LD_INT 3
11838: GREATEREQUAL
11839: IFFALSE 11851
11841: GO 11843
11843: DISABLE
// SetAchievement ( ACH_ENG ) ;
11844: LD_STRING ACH_ENG
11846: PPUSH
11847: CALL_OW 543
11851: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11852: LD_INT 22
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 25
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PUSH
11881: LD_INT 4
11883: GREATEREQUAL
11884: IFFALSE 11896
11886: GO 11888
11888: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11889: LD_STRING ACH_APEGEN
11891: PPUSH
11892: CALL_OW 543
11896: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11897: LD_INT 22
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 57
11922: PUSH
11923: EMPTY
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: IFFALSE 12204
11941: GO 11943
11943: DISABLE
// begin workshopBuilded := true ;
11944: LD_ADDR_EXP 11
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if IsOk ( Markov ) then
11952: LD_EXP 37
11956: PPUSH
11957: CALL_OW 302
11961: IFFALSE 12020
// begin Say ( Heike , DH-1-shop-a ) ;
11963: LD_EXP 30
11967: PPUSH
11968: LD_STRING DH-1-shop-a
11970: PPUSH
11971: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11975: LD_INT 47
11977: PPUSH
11978: LD_INT 2
11980: PPUSH
11981: CALL_OW 321
11985: PUSH
11986: LD_INT 2
11988: EQUAL
11989: PUSH
11990: LD_INT 45
11992: PPUSH
11993: LD_INT 2
11995: PPUSH
11996: CALL_OW 321
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: AND
12005: NOT
12006: IFFALSE 12020
// Say ( Markov , DMar-1-shop-a ) ;
12008: LD_EXP 37
12012: PPUSH
12013: LD_STRING DMar-1-shop-a
12015: PPUSH
12016: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12020: LD_INT 35
12022: PPUSH
12023: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12027: LD_INT 47
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 321
12037: PUSH
12038: LD_INT 2
12040: EQUAL
12041: PUSH
12042: LD_INT 45
12044: PPUSH
12045: LD_INT 2
12047: PPUSH
12048: CALL_OW 321
12052: PUSH
12053: LD_INT 2
12055: EQUAL
12056: OR
12057: IFFALSE 12020
// if IsOk ( Markov ) and IsOk ( Heike ) then
12059: LD_EXP 37
12063: PPUSH
12064: CALL_OW 302
12068: PUSH
12069: LD_EXP 30
12073: PPUSH
12074: CALL_OW 302
12078: AND
12079: IFFALSE 12197
// begin DialogueOn ;
12081: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12085: LD_EXP 37
12089: PPUSH
12090: LD_STRING DMar-1-shop
12092: PPUSH
12093: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12097: LD_EXP 30
12101: PPUSH
12102: LD_STRING DH-1-shop
12104: PPUSH
12105: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12109: LD_EXP 37
12113: PPUSH
12114: LD_STRING DMar-2-shop
12116: PPUSH
12117: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12121: LD_EXP 37
12125: PPUSH
12126: LD_STRING DMar-3-shop
12128: PPUSH
12129: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12133: LD_EXP 30
12137: PPUSH
12138: LD_STRING DH-2-shop
12140: PPUSH
12141: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12145: LD_EXP 37
12149: PPUSH
12150: LD_STRING DMar-4-shop
12152: PPUSH
12153: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12157: LD_EXP 30
12161: PPUSH
12162: LD_STRING DH-3-shop
12164: PPUSH
12165: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12169: LD_EXP 37
12173: PPUSH
12174: LD_STRING DMar-5-shop
12176: PPUSH
12177: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12181: LD_EXP 30
12185: PPUSH
12186: LD_STRING DH-4-shop
12188: PPUSH
12189: CALL_OW 88
// DialogueOff ;
12193: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12197: LD_STRING ConstructVeh
12199: PPUSH
12200: CALL_OW 337
// end ;
12204: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12205: LD_INT 2
12207: PPUSH
12208: LD_INT 2
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL 40143 0 3
12218: PUSH
12219: LD_INT 0
12221: EQUAL
12222: IFFALSE 12234
12224: GO 12226
12226: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12227: LD_STRING Techs
12229: PPUSH
12230: CALL_OW 337
12234: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12235: LD_EXP 37
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 34
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 35
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: AND
12292: IFFALSE 12399
12294: GO 12296
12296: DISABLE
// begin DialogueOn ;
12297: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12301: LD_INT 22
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 35
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 69
12347: PPUSH
12348: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12352: LD_INT 10
12354: PPUSH
12355: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12359: LD_EXP 30
12363: PPUSH
12364: LD_STRING DH-1-bal
12366: PPUSH
12367: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12371: LD_EXP 37
12375: PPUSH
12376: LD_STRING DMar-1-bal
12378: PPUSH
12379: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12383: LD_EXP 30
12387: PPUSH
12388: LD_STRING DH-2-bal
12390: PPUSH
12391: CALL_OW 88
// DialogueOff ;
12395: CALL_OW 7
// end ;
12399: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12400: LD_EXP 34
12404: PPUSH
12405: CALL_OW 302
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 69
12438: AND
12439: IFFALSE 12500
12441: GO 12443
12443: DISABLE
// begin DialogueOn ;
12444: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12448: LD_EXP 34
12452: PPUSH
12453: LD_STRING DA-1-lab
12455: PPUSH
12456: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12460: LD_EXP 30
12464: PPUSH
12465: LD_STRING DH-1-lab
12467: PPUSH
12468: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12472: LD_EXP 34
12476: PPUSH
12477: LD_STRING DA-2-lab
12479: PPUSH
12480: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12484: LD_EXP 30
12488: PPUSH
12489: LD_STRING DH-2-lab
12491: PPUSH
12492: CALL_OW 88
// DialogueOff ;
12496: CALL_OW 7
// end ;
12500: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12501: LD_EXP 35
12505: PPUSH
12506: CALL_OW 302
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 25
12523: PUSH
12524: LD_INT 15
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: AND
12540: PUSH
12541: LD_INT 81
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: NOT
12556: AND
12557: IFFALSE 12746
12559: GO 12561
12561: DISABLE
12562: LD_INT 0
12564: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 25
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 69
12598: ST_TO_ADDR
// InGameOn ;
12599: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12603: LD_VAR 0 1
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12629: LD_EXP 35
12633: PPUSH
12634: LD_STRING DK-1-apesol
12636: PPUSH
12637: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12641: LD_VAR 0 1
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PPUSH
12650: LD_INT 35
12652: PPUSH
12653: LD_INT 28
12655: PPUSH
12656: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 1
12667: ARRAY
12668: PPUSH
12669: LD_INT 36
12671: PPUSH
12672: LD_INT 17
12674: PPUSH
12675: CALL_OW 171
// wait ( 0 0$2 ) ;
12679: LD_INT 70
12681: PPUSH
12682: CALL_OW 67
// DialogueOn ;
12686: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12690: LD_EXP 34
12694: PPUSH
12695: LD_STRING DA-1-apesol
12697: PPUSH
12698: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12702: LD_EXP 35
12706: PPUSH
12707: LD_STRING DK-2-apesol
12709: PPUSH
12710: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12714: LD_EXP 34
12718: PPUSH
12719: LD_STRING DA-2-apesol
12721: PPUSH
12722: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DK-3-apesol
12733: PPUSH
12734: CALL_OW 88
// DialogueOff ;
12738: CALL_OW 7
// InGameOff ;
12742: CALL_OW 9
// end ;
12746: PPOPN 1
12748: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12749: LD_EXP 36
12753: PPUSH
12754: CALL_OW 302
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 16
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: AND
12788: PUSH
12789: LD_INT 81
12791: PUSH
12792: LD_INT 2
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: NOT
12804: AND
12805: IFFALSE 13119
12807: GO 12809
12809: DISABLE
12810: LD_INT 0
12812: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 16
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// blockAttack := true ;
12847: LD_ADDR_EXP 29
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// InGameOn ;
12855: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12859: LD_INT 35
12861: PPUSH
12862: LD_INT 22
12864: PPUSH
12865: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12869: LD_INT 5
12871: PPUSH
12872: LD_INT 35
12874: PPUSH
12875: LD_INT 22
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12885: LD_EXP 36
12889: PPUSH
12890: LD_VAR 0 1
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PPUSH
12912: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: CALL_OW 122
// wait ( 0 0$2 ) ;
12929: LD_INT 70
12931: PPUSH
12932: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12936: LD_EXP 36
12940: PPUSH
12941: LD_STRING DS-1-apeeng
12943: PPUSH
12944: CALL_OW 88
// if IsOk ( Kamil ) then
12948: LD_EXP 33
12952: PPUSH
12953: CALL_OW 302
12957: IFFALSE 13107
// begin Say ( Kamil , DKam-1-apeeng ) ;
12959: LD_EXP 33
12963: PPUSH
12964: LD_STRING DKam-1-apeeng
12966: PPUSH
12967: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12971: LD_EXP 36
12975: PPUSH
12976: LD_STRING DS-2-apeeng
12978: PPUSH
12979: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12983: LD_EXP 33
12987: PPUSH
12988: LD_STRING DKam-2-apeeng
12990: PPUSH
12991: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12995: LD_EXP 36
12999: PPUSH
13000: LD_STRING DS-3-apeeng
13002: PPUSH
13003: CALL_OW 88
// if not IsOK ( Kaia ) then
13007: LD_EXP 35
13011: PPUSH
13012: CALL_OW 302
13016: NOT
13017: IFFALSE 13033
// begin InGameOff ;
13019: CALL_OW 9
// blockAttack := false ;
13023: LD_ADDR_EXP 29
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// exit ;
13031: GO 13119
// end ; Say ( Kaia , DK-1-apeeng ) ;
13033: LD_EXP 35
13037: PPUSH
13038: LD_STRING DK-1-apeeng
13040: PPUSH
13041: CALL_OW 88
// if not IsOk ( Givi ) then
13045: LD_EXP 31
13049: PPUSH
13050: CALL_OW 302
13054: NOT
13055: IFFALSE 13071
// begin InGameOff ;
13057: CALL_OW 9
// blockAttack := false ;
13061: LD_ADDR_EXP 29
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// exit ;
13069: GO 13119
// end ; Say ( Givi , DG-1-apeeng ) ;
13071: LD_EXP 31
13075: PPUSH
13076: LD_STRING DG-1-apeeng
13078: PPUSH
13079: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13083: LD_EXP 35
13087: PPUSH
13088: LD_STRING DK-2-apeeng
13090: PPUSH
13091: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13095: LD_EXP 35
13099: PPUSH
13100: LD_STRING DK-3-apeeng
13102: PPUSH
13103: CALL_OW 88
// end ; InGameOff ;
13107: CALL_OW 9
// blockAttack := false ;
13111: LD_ADDR_EXP 29
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// end ;
13119: PPOPN 1
13121: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13122: LD_EXP 4
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 0
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: AND
13156: IFFALSE 13337
13158: GO 13160
13160: DISABLE
// begin blockAttack := true ;
13161: LD_ADDR_EXP 29
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13169: LD_INT 350
13171: PPUSH
13172: CALL_OW 67
// DialogueOn ;
13176: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13180: LD_EXP 38
13184: PPUSH
13185: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13189: LD_EXP 38
13193: PPUSH
13194: LD_STRING DF-1-distribution
13196: PPUSH
13197: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13201: LD_EXP 30
13205: PPUSH
13206: LD_STRING DH-2-distribution
13208: PPUSH
13209: CALL_OW 88
// if IsOk ( Kaia ) then
13213: LD_EXP 35
13217: PPUSH
13218: CALL_OW 302
13222: IFFALSE 13283
// begin Say ( Kaia , DK-1-distribution ) ;
13224: LD_EXP 35
13228: PPUSH
13229: LD_STRING DK-1-distribution
13231: PPUSH
13232: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13236: LD_EXP 30
13240: PPUSH
13241: LD_STRING DH-1-distribution
13243: PPUSH
13244: CALL_OW 88
// if IsOk ( Givi ) then
13248: LD_EXP 31
13252: PPUSH
13253: CALL_OW 302
13257: IFFALSE 13283
// begin Say ( Givi , DG-1-distribution ) ;
13259: LD_EXP 31
13263: PPUSH
13264: LD_STRING DG-1-distribution
13266: PPUSH
13267: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13271: LD_EXP 30
13275: PPUSH
13276: LD_STRING DH-3-distribution
13278: PPUSH
13279: CALL_OW 88
// end ; end ; DialogueOff ;
13283: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13287: LD_STRING Crates1
13289: PPUSH
13290: CALL_OW 337
// farmerRequestedCrates := 300 ;
13294: LD_ADDR_EXP 17
13298: PUSH
13299: LD_INT 300
13301: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13302: LD_STRING FarmerCrates
13304: PPUSH
13305: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13309: LD_INT 10
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 424
// blockAttack := false ;
13319: LD_ADDR_EXP 29
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13327: LD_INT 108
13329: PPUSH
13330: LD_INT 61
13332: PPUSH
13333: CALL_OW 86
// end ;
13337: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13338: LD_EXP 7
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 57
13358: PUSH
13359: EMPTY
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 6
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: LD_INT 7
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: AND
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 3
13417: PUSH
13418: LD_INT 57
13420: PUSH
13421: EMPTY
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: AND
13448: IFFALSE 13612
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
// begin wait ( 0 0$10 ) ;
13456: LD_INT 350
13458: PPUSH
13459: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_EXP 44
13472: PPUSH
13473: LD_INT 26
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 72
13501: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13502: LD_EXP 30
13506: PPUSH
13507: LD_STRING DH-1-task
13509: PPUSH
13510: CALL_OW 88
// if IsOk ( Sophia ) then
13514: LD_EXP 36
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13563
// begin Say ( Sophia , DS-1-task ) ;
13525: LD_EXP 36
13529: PPUSH
13530: LD_STRING DS-1-task
13532: PPUSH
13533: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13537: LD_EXP 36
13541: PPUSH
13542: LD_STRING DS-2-task
13544: PPUSH
13545: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13549: LD_EXP 30
13553: PPUSH
13554: LD_STRING DH-2-task
13556: PPUSH
13557: CALL_OW 88
// end else
13561: GO 13597
// if eng then
13563: LD_VAR 0 1
13567: IFFALSE 13597
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13569: LD_VAR 0 1
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: LD_STRING DArm-1-task
13580: PPUSH
13581: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13585: LD_EXP 30
13589: PPUSH
13590: LD_STRING DH-2-task
13592: PPUSH
13593: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13597: LD_STRING BaseConstructed
13599: PPUSH
13600: CALL_OW 337
// allowConvoys := true ;
13604: LD_ADDR_EXP 13
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// end ;
13612: PPOPN 1
13614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13615: LD_INT 22
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 34
13627: PUSH
13628: LD_INT 12
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: IFFALSE 13811
13645: GO 13647
13647: DISABLE
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
13652: PPUSH
// begin wait ( 0 0$2 ) ;
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 12
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 250
13712: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 251
13731: ST_TO_ADDR
// DialogueOn ;
13732: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13736: LD_VAR 0 2
13740: PPUSH
13741: LD_VAR 0 3
13745: PPUSH
13746: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13750: LD_VAR 0 2
13754: PPUSH
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: LD_INT 6
13765: NEG
13766: PPUSH
13767: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13771: LD_INT 10
13773: PPUSH
13774: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13778: LD_EXP 30
13782: PPUSH
13783: LD_STRING DH-1-seecargo
13785: PPUSH
13786: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 2
13802: PPUSH
13803: CALL_OW 331
// DialogueOff ;
13807: CALL_OW 7
// end ;
13811: PPOPN 3
13813: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13814: LD_EXP 4
13818: PUSH
13819: LD_EXP 16
13823: PUSH
13824: LD_INT 300
13826: GREATEREQUAL
13827: AND
13828: IFFALSE 13900
13830: GO 13832
13832: DISABLE
// begin DialogueOn ;
13833: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13837: LD_EXP 38
13841: PPUSH
13842: LD_STRING DF-1-delivery-2
13844: PPUSH
13845: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13849: LD_EXP 30
13853: PPUSH
13854: LD_STRING DH-1-delivery-2
13856: PPUSH
13857: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13861: LD_EXP 38
13865: PPUSH
13866: LD_STRING DF-2-delivery-2
13868: PPUSH
13869: CALL_OW 94
// DialogueOff ;
13873: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13877: LD_STRING Crates2
13879: PPUSH
13880: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13884: LD_ADDR_EXP 18
13888: PUSH
13889: LD_INT 63000
13891: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13892: LD_ADDR_EXP 17
13896: PUSH
13897: LD_INT 600
13899: ST_TO_ADDR
// end ;
13900: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13901: LD_EXP 4
13905: PUSH
13906: LD_EXP 16
13910: PUSH
13911: LD_INT 600
13913: GREATEREQUAL
13914: AND
13915: PUSH
13916: LD_OWVAR 67
13920: PUSH
13921: LD_INT 1
13923: GREATER
13924: AND
13925: IFFALSE 14125
13927: GO 13929
13929: DISABLE
// begin DialogueOn ;
13930: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13934: LD_EXP 38
13938: PPUSH
13939: LD_STRING DF-1-delivery-3
13941: PPUSH
13942: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13946: LD_EXP 30
13950: PPUSH
13951: LD_STRING DH-1-delivery-3
13953: PPUSH
13954: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13958: LD_EXP 38
13962: PPUSH
13963: LD_STRING DF-2-delivery-3
13965: PPUSH
13966: CALL_OW 94
// if IsOk ( Kaia ) then
13970: LD_EXP 35
13974: PPUSH
13975: CALL_OW 302
13979: IFFALSE 14029
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13981: LD_EXP 35
13985: PPUSH
13986: LD_STRING DK-1-delivery-3
13988: PPUSH
13989: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13993: LD_EXP 30
13997: PPUSH
13998: LD_STRING DH-2-delivery-3
14000: PPUSH
14001: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14005: LD_EXP 31
14009: PPUSH
14010: LD_STRING DG-1-delivery-3
14012: PPUSH
14013: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14017: LD_EXP 32
14021: PPUSH
14022: LD_STRING DM-1-delivery-3
14024: PPUSH
14025: CALL_OW 88
// end ; DialogueOff ;
14029: CALL_OW 7
// case Difficulty of 2 :
14033: LD_OWVAR 67
14037: PUSH
14038: LD_INT 2
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14064
14046: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14047: LD_STRING Crates3
14049: PPUSH
14050: CALL_OW 337
// farmerRequestedCrates := 900 ;
14054: LD_ADDR_EXP 17
14058: PUSH
14059: LD_INT 900
14061: ST_TO_ADDR
// end ; 3 :
14062: GO 14117
14064: LD_INT 3
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14090
14072: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14073: LD_STRING Crates4
14075: PPUSH
14076: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14080: LD_ADDR_EXP 17
14084: PUSH
14085: LD_INT 1200
14087: ST_TO_ADDR
// end ; 4 :
14088: GO 14117
14090: LD_INT 4
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14116
14098: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14099: LD_STRING Crates5
14101: PPUSH
14102: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14106: LD_ADDR_EXP 17
14110: PUSH
14111: LD_INT 1400
14113: ST_TO_ADDR
// end ; end ;
14114: GO 14117
14116: POP
// farmerCratesCounter := 30 30$00 ;
14117: LD_ADDR_EXP 18
14121: PUSH
14122: LD_INT 63000
14124: ST_TO_ADDR
// end ;
14125: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14126: LD_EXP 4
14130: PUSH
14131: LD_EXP 16
14135: PUSH
14136: LD_INT 600
14138: PUSH
14139: LD_INT 900
14141: PUSH
14142: LD_INT 1200
14144: PUSH
14145: LD_INT 1400
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_OWVAR 67
14158: ARRAY
14159: GREATEREQUAL
14160: AND
14161: IFFALSE 14247
14163: GO 14165
14165: DISABLE
// begin retreatAllowed := true ;
14166: LD_ADDR_EXP 12
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// display_strings := [ ] ;
14174: LD_ADDR_OWVAR 47
14178: PUSH
14179: EMPTY
14180: ST_TO_ADDR
// DialogueOn ;
14181: CALL_OW 6
// InGameOn ;
14185: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14189: LD_EXP 39
14193: PPUSH
14194: LD_STRING DO-radio-end
14196: PPUSH
14197: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14201: LD_EXP 30
14205: PPUSH
14206: LD_STRING DH-1-radio-end
14208: PPUSH
14209: CALL_OW 88
// InGameOff ;
14213: CALL_OW 9
// DialogueOff ;
14217: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14221: LD_STRING Retreat
14223: PPUSH
14224: CALL_OW 337
// wait ( 0 0$2 ) ;
14228: LD_INT 70
14230: PPUSH
14231: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14235: LD_EXP 30
14239: PPUSH
14240: LD_STRING DH-2-radio-end
14242: PPUSH
14243: CALL_OW 88
// end ;
14247: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14248: LD_EXP 12
14252: IFFALSE 14383
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14261: LD_INT 10
14263: PPUSH
14264: LD_INT 0
14266: PPUSH
14267: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: LD_EXP 41
14280: PPUSH
14281: LD_INT 25
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 102
14303: PPUSH
14304: LD_INT 69
14306: PPUSH
14307: CALL_OW 428
14311: PUSH
14312: LD_INT 0
14314: EQUAL
14315: AND
14316: IFFALSE 14383
// begin for i in tmp do
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_VAR 0 1
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14353
// if IsInUnit ( i ) then
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 310
14340: IFFALSE 14351
// ComExitBuilding ( i ) ;
14342: LD_VAR 0 2
14346: PPUSH
14347: CALL_OW 122
14351: GO 14328
14353: POP
14354: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_INT 31
14362: PPUSH
14363: LD_INT 102
14365: PPUSH
14366: LD_INT 69
14368: PPUSH
14369: LD_INT 2
14371: PPUSH
14372: CALL_OW 205
// wait ( 0 0$3 ) ;
14376: LD_INT 105
14378: PPUSH
14379: CALL_OW 67
// end ; end ;
14383: PPOPN 2
14385: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14386: LD_EXP 12
14390: NOT
14391: PUSH
14392: LD_INT 5
14394: PPUSH
14395: CALL_OW 301
14399: AND
14400: IFFALSE 14432
14402: GO 14404
14404: DISABLE
// begin DialogueOn ;
14405: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14409: LD_EXP 38
14413: PPUSH
14414: LD_STRING DF-1-failure
14416: PPUSH
14417: CALL_OW 94
// DialogueOff ;
14421: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14425: LD_STRING FarmerDepot
14427: PPUSH
14428: CALL_OW 104
// end ;
14432: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14433: LD_EXP 12
14437: PUSH
14438: LD_EXP 30
14442: PPUSH
14443: LD_EXP 38
14447: PPUSH
14448: CALL_OW 296
14452: PUSH
14453: LD_INT 12
14455: LESS
14456: AND
14457: PUSH
14458: LD_INT 81
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: NOT
14487: AND
14488: IFFALSE 15172
14490: GO 14492
14492: DISABLE
14493: LD_INT 0
14495: PPUSH
14496: PPUSH
14497: PPUSH
// begin allowConvoys := false ;
14498: LD_ADDR_EXP 13
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// InGameOn ;
14506: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14510: LD_EXP 30
14514: PPUSH
14515: LD_EXP 38
14519: PPUSH
14520: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14524: LD_EXP 38
14528: PPUSH
14529: LD_EXP 30
14533: PPUSH
14534: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14538: LD_EXP 38
14542: PPUSH
14543: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14547: LD_EXP 30
14551: PPUSH
14552: LD_STRING DH-1-end
14554: PPUSH
14555: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14559: LD_EXP 38
14563: PPUSH
14564: LD_STRING DF-1-end
14566: PPUSH
14567: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14571: LD_EXP 38
14575: PPUSH
14576: LD_STRING DF-2-end
14578: PPUSH
14579: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14583: LD_EXP 30
14587: PPUSH
14588: LD_STRING DH-2-end
14590: PPUSH
14591: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14595: LD_EXP 38
14599: PPUSH
14600: LD_STRING DF-3-end
14602: PPUSH
14603: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14607: LD_EXP 30
14611: PPUSH
14612: LD_STRING DH-3-end
14614: PPUSH
14615: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14619: LD_EXP 31
14623: PPUSH
14624: LD_STRING DG-1-end
14626: PPUSH
14627: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14631: LD_EXP 30
14635: PPUSH
14636: LD_STRING DH-4-end
14638: PPUSH
14639: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14643: LD_EXP 38
14647: PPUSH
14648: LD_STRING DF-4-end
14650: PPUSH
14651: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14655: LD_EXP 30
14659: PPUSH
14660: LD_STRING DH-5-end
14662: PPUSH
14663: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14667: LD_EXP 38
14671: PPUSH
14672: LD_STRING DF-5-end
14674: PPUSH
14675: CALL_OW 88
// InGameOff ;
14679: CALL_OW 9
// allowCargoEvacuation := true ;
14683: LD_ADDR_EXP 8
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_INT 4
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_OWVAR 67
14718: ARRAY
14719: ST_TO_ADDR
// if farmerSquad < max then
14720: LD_EXP 41
14724: PUSH
14725: LD_VAR 0 2
14729: LESS
14730: IFFALSE 14742
// max := farmerSquad ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_EXP 41
14741: ST_TO_ADDR
// for i := 1 to max do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14796
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14760: LD_EXP 41
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: LD_INT 2
14771: PPUSH
14772: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14776: LD_ADDR_EXP 41
14780: PUSH
14781: LD_EXP 41
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 3
14793: ST_TO_ADDR
// end ;
14794: GO 14757
14796: POP
14797: POP
// for i in Farmer ^ farmerSquad do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_EXP 38
14807: PUSH
14808: LD_EXP 41
14812: ADD
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14854
// begin if IsInUnit ( i ) then
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 310
14826: IFFALSE 14837
// ComExitBuilding ( i ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_INT 102
14844: PPUSH
14845: LD_INT 7
14847: PPUSH
14848: CALL_OW 171
// end ;
14852: GO 14814
14854: POP
14855: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: LD_INT 5
14892: DIFF
14893: PUSH
14894: FOR_IN
14895: IFFALSE 14911
// SetSide ( i , 2 ) ;
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 2
14904: PPUSH
14905: CALL_OW 235
14909: GO 14894
14911: POP
14912: POP
// wait ( 0 0$2 ) ;
14913: LD_INT 70
14915: PPUSH
14916: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14920: LD_EXP 30
14924: PPUSH
14925: LD_STRING DH-6-end
14927: PPUSH
14928: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14932: LD_INT 35
14934: PPUSH
14935: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_EXP 38
14948: PUSH
14949: LD_EXP 41
14953: ADD
14954: PPUSH
14955: LD_INT 95
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 72
14969: ST_TO_ADDR
// if tmp then
14970: LD_VAR 0 3
14974: IFFALSE 15018
// for i in tmp do
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_VAR 0 3
14985: PUSH
14986: FOR_IN
14987: IFFALSE 15016
// begin farmerSquad := farmerSquad diff i ;
14989: LD_ADDR_EXP 41
14993: PUSH
14994: LD_EXP 41
14998: PUSH
14999: LD_VAR 0 1
15003: DIFF
15004: ST_TO_ADDR
// RemoveUnit ( i ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 64
// end ;
15014: GO 14986
15016: POP
15017: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15018: LD_EXP 41
15022: PUSH
15023: EMPTY
15024: EQUAL
15025: PUSH
15026: LD_EXP 38
15030: PPUSH
15031: CALL_OW 305
15035: NOT
15036: AND
15037: IFFALSE 14932
// if farmerHumanLoseCounter = 0 then
15039: LD_EXP 21
15043: PUSH
15044: LD_INT 0
15046: EQUAL
15047: IFFALSE 15056
// SetAchievement ( ACH_BABY ) ;
15049: LD_STRING ACH_BABY
15051: PPUSH
15052: CALL_OW 543
// wait ( 1 1$00 ) ;
15056: LD_INT 2100
15058: PPUSH
15059: CALL_OW 67
// SendAttack ;
15063: CALL 6118 0 0
// Say ( Heike , DH-7-end ) ;
15067: LD_EXP 30
15071: PPUSH
15072: LD_STRING DH-7-end
15074: PPUSH
15075: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: DOUBLE
15085: LD_INT 1
15087: DEC
15088: ST_TO_ADDR
15089: LD_INT 2
15091: PUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: LD_OWVAR 67
15111: ARRAY
15112: PUSH
15113: FOR_TO
15114: IFFALSE 15170
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15116: LD_INT 4200
15118: PUSH
15119: LD_INT 3500
15121: PUSH
15122: LD_INT 3150
15124: PUSH
15125: LD_INT 2800
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: PUSH
15134: LD_OWVAR 67
15138: ARRAY
15139: PPUSH
15140: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15144: LD_EXP 12
15148: PUSH
15149: LD_EXP 22
15153: PUSH
15154: LD_INT 1
15156: LESS
15157: AND
15158: IFFALSE 15164
// exit ;
15160: POP
15161: POP
15162: GO 15172
// SendAttack ;
15164: CALL 6118 0 0
// end ;
15168: GO 15113
15170: POP
15171: POP
// end ;
15172: PPOPN 3
15174: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15175: LD_EXP 8
15179: PUSH
15180: LD_EXP 22
15184: PUSH
15185: LD_INT 0
15187: GREATER
15188: AND
15189: IFFALSE 15199
15191: GO 15193
15193: DISABLE
// begin enable ;
15194: ENABLE
// CargoEvacuation ;
15195: CALL 3591 0 0
// end ;
15199: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15200: LD_EXP 18
15204: PUSH
15205: LD_INT 18900
15207: LESSEQUAL
15208: IFFALSE 15257
15210: GO 15212
15212: DISABLE
// begin DialogueOn ;
15213: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15217: LD_EXP 38
15221: PPUSH
15222: LD_STRING DF-1-distribution-a
15224: PPUSH
15225: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15229: LD_EXP 30
15233: PPUSH
15234: LD_STRING DH-1-distribution-a
15236: PPUSH
15237: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15241: LD_EXP 38
15245: PPUSH
15246: LD_STRING DF-2-distribution-a
15248: PPUSH
15249: CALL_OW 94
// DialogueOff ;
15253: CALL_OW 7
// end ;
15257: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15258: LD_EXP 18
15262: PUSH
15263: LD_INT 0
15265: LESSEQUAL
15266: IFFALSE 15298
15268: GO 15270
15270: DISABLE
// begin DialogueOn ;
15271: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15275: LD_EXP 38
15279: PPUSH
15280: LD_STRING DF-3-distribution-a
15282: PPUSH
15283: CALL_OW 94
// YouLost ( Distribution ) ;
15287: LD_STRING Distribution
15289: PPUSH
15290: CALL_OW 104
// DialogueOff ;
15294: CALL_OW 7
// end ;
15298: END
// every 0 0$1 trigger vehCounter >= 2 do
15299: LD_EXP 23
15303: PUSH
15304: LD_INT 2
15306: GREATEREQUAL
15307: IFFALSE 15319
15309: GO 15311
15311: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15312: LD_STRING VehConstructed
15314: PPUSH
15315: CALL_OW 337
15319: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15320: LD_INT 22
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 12
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: IFFALSE 15408
15350: GO 15352
15352: DISABLE
// begin DialogueOn ;
15353: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15357: LD_EXP 30
15361: PPUSH
15362: LD_STRING DH-1-truck
15364: PPUSH
15365: CALL_OW 88
// if IsOk ( Markov ) then
15369: LD_EXP 37
15373: PPUSH
15374: CALL_OW 302
15378: IFFALSE 15404
// begin Say ( Markov , DMar-1-truck ) ;
15380: LD_EXP 37
15384: PPUSH
15385: LD_STRING DMar-1-truck
15387: PPUSH
15388: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15392: LD_EXP 30
15396: PPUSH
15397: LD_STRING DH-2-truck
15399: PPUSH
15400: CALL_OW 88
// end ; DialogueOff ;
15404: CALL_OW 7
// end ;
15408: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if IsOk ( Givi ) then
15414: LD_EXP 31
15418: PPUSH
15419: CALL_OW 302
15423: IFFALSE 15439
// begin Say ( Givi , DG-1-nocargo ) ;
15425: LD_EXP 31
15429: PPUSH
15430: LD_STRING DG-1-nocargo
15432: PPUSH
15433: CALL_OW 88
// exit ;
15437: GO 15535
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: LD_EXP 44
15448: PPUSH
15449: LD_INT 26
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 72
15463: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15464: LD_ADDR_VAR 0 3
15468: PUSH
15469: LD_EXP 44
15473: PPUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: ST_TO_ADDR
// if randomMen then
15489: LD_VAR 0 2
15493: IFFALSE 15513
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15495: LD_VAR 0 2
15499: PUSH
15500: LD_INT 1
15502: ARRAY
15503: PPUSH
15504: LD_STRING DArm-1-nocargo
15506: PPUSH
15507: CALL_OW 88
15511: GO 15535
// if randomWomen then
15513: LD_VAR 0 3
15517: IFFALSE 15535
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15519: LD_VAR 0 3
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: LD_STRING DArf-1-nocargo
15530: PPUSH
15531: CALL_OW 88
// end ;
15535: LD_VAR 0 1
15539: RET
// export function IncomingAttack ; begin
15540: LD_INT 0
15542: PPUSH
// if attackWave = 1 then
15543: LD_EXP 20
15547: PUSH
15548: LD_INT 1
15550: EQUAL
15551: IFFALSE 15622
// begin DialogueOn ;
15553: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15557: LD_EXP 39
15561: PPUSH
15562: LD_STRING DO-1-radio-1
15564: PPUSH
15565: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15569: LD_EXP 30
15573: PPUSH
15574: LD_STRING DH-1-radio-1-
15576: PPUSH
15577: CALL_OW 88
// if IsOk ( Markov ) then
15581: LD_EXP 37
15585: PPUSH
15586: CALL_OW 302
15590: IFFALSE 15616
// begin Say ( Markov , DMar-1-radio-1 ) ;
15592: LD_EXP 37
15596: PPUSH
15597: LD_STRING DMar-1-radio-1
15599: PPUSH
15600: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15604: LD_EXP 30
15608: PPUSH
15609: LD_STRING DH-2-radio-1
15611: PPUSH
15612: CALL_OW 88
// end ; DialogueOff ;
15616: CALL_OW 7
// end else
15620: GO 15646
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15622: LD_EXP 39
15626: PPUSH
15627: LD_STRING DO-1-radio-u
15629: PPUSH
15630: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15634: LD_EXP 30
15638: PPUSH
15639: LD_STRING DH-1-radio-u
15641: PPUSH
15642: CALL_OW 88
// end ; end ;
15646: LD_VAR 0 1
15650: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15651: LD_EXP 46
15655: PPUSH
15656: LD_INT 95
15658: PUSH
15659: LD_INT 8
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 72
15670: IFFALSE 15773
15672: GO 15674
15674: DISABLE
15675: LD_INT 0
15677: PPUSH
// begin enable ;
15678: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_EXP 46
15688: PPUSH
15689: LD_INT 95
15691: PUSH
15692: LD_INT 8
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 72
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15734
// begin usForces := usForces diff i ;
15707: LD_ADDR_EXP 46
15711: PUSH
15712: LD_EXP 46
15716: PUSH
15717: LD_VAR 0 1
15721: DIFF
15722: ST_TO_ADDR
// RemoveUnit ( i ) ;
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 64
// end ;
15732: GO 15704
15734: POP
15735: POP
// if not americanHasEscaped and attackWave = 1 then
15736: LD_EXP 9
15740: NOT
15741: PUSH
15742: LD_EXP 20
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: AND
15751: IFFALSE 15773
// begin americanHasEscaped := true ;
15753: LD_ADDR_EXP 9
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15761: LD_EXP 30
15765: PPUSH
15766: LD_STRING DH-2-assault-a
15768: PPUSH
15769: CALL_OW 88
// end ; end ;
15773: PPOPN 1
15775: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15776: LD_INT 4
15778: PPUSH
15779: LD_INT 22
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 70
15793: PUSH
15794: LD_EXP 12
15798: NOT
15799: AND
15800: IFFALSE 15817
15802: GO 15804
15804: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15805: LD_EXP 38
15809: PPUSH
15810: LD_STRING DF-1-attack
15812: PPUSH
15813: CALL_OW 94
15817: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15818: LD_INT 5
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 2
15828: EQUAL
15829: IFFALSE 15845
15831: GO 15833
15833: DISABLE
// begin enable ;
15834: ENABLE
// SetSide ( arDepot , 5 ) ;
15835: LD_INT 5
15837: PPUSH
15838: LD_INT 5
15840: PPUSH
15841: CALL_OW 235
// end ;
15845: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: NOT
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_INT 4
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: NOT
15891: AND
15892: PUSH
15893: LD_EXP 12
15897: NOT
15898: AND
15899: PUSH
15900: LD_EXP 16
15904: PUSH
15905: LD_INT 90
15907: GREATER
15908: AND
15909: PUSH
15910: LD_INT 7
15912: PPUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 70
15941: AND
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 50
15955: PUSH
15956: EMPTY
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 69
15978: AND
15979: IFFALSE 16788
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
// begin depot := usDepot ;
15991: LD_ADDR_VAR 0 5
15995: PUSH
15996: LD_INT 11
15998: ST_TO_ADDR
// if not depot then
15999: LD_VAR 0 5
16003: NOT
16004: IFFALSE 16044
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16006: LD_ADDR_VAR 0 5
16010: PUSH
16011: LD_INT 22
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16044: LD_ADDR_VAR 0 1
16048: PUSH
16049: LD_EXP 44
16053: PPUSH
16054: LD_INT 26
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 72
16068: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_EXP 44
16078: PPUSH
16079: LD_INT 26
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 72
16093: ST_TO_ADDR
// if IsOk ( Kaia ) then
16094: LD_EXP 35
16098: PPUSH
16099: CALL_OW 302
16103: IFFALSE 16124
// speaker := [ Kaia , DK ] else
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_EXP 35
16114: PUSH
16115: LD_STRING DK
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: ST_TO_ADDR
16122: GO 16204
// if randomMen then
16124: LD_VAR 0 1
16128: IFFALSE 16163
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: PUSH
16140: LD_INT 1
16142: PPUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PUSH
16154: LD_STRING DArm
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: ST_TO_ADDR
16161: GO 16204
// if randomWomen then
16163: LD_VAR 0 2
16167: IFFALSE 16202
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PPUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: CALL_OW 12
16191: ARRAY
16192: PUSH
16193: LD_STRING DArf
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: ST_TO_ADDR
16200: GO 16204
// exit ;
16202: GO 16788
// if IsInUnit ( speaker [ 1 ] ) then
16204: LD_VAR 0 3
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: PPUSH
16213: CALL_OW 310
16217: IFFALSE 16240
// place := IsInUnit ( speaker [ 1 ] ) else
16219: LD_ADDR_VAR 0 4
16223: PUSH
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: CALL_OW 310
16237: ST_TO_ADDR
16238: GO 16254
// place := speaker [ 1 ] ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 1
16252: ARRAY
16253: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16254: LD_VAR 0 4
16258: PPUSH
16259: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 250
16272: PPUSH
16273: LD_VAR 0 4
16277: PPUSH
16278: CALL_OW 251
16282: PPUSH
16283: CALL 2078 0 2
// wait ( 0 0$2 ) ;
16287: LD_INT 70
16289: PPUSH
16290: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16294: LD_EXP 40
16298: PPUSH
16299: CALL_OW 305
16303: NOT
16304: IFFALSE 16308
// exit ;
16306: GO 16788
// allowConvoys := false ;
16308: LD_ADDR_EXP 13
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// blockAttack := true ;
16316: LD_ADDR_EXP 29
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// InGameOn ;
16324: CALL_OW 8
// wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16335: LD_EXP 40
16339: PPUSH
16340: LD_STRING DI-1-land
16342: PPUSH
16343: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 310
16360: IFFALSE 16375
// ComExit ( speaker [ 1 ] ) ;
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: CALL 77946 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 1
16382: ARRAY
16383: PPUSH
16384: LD_EXP 40
16388: PPUSH
16389: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: LD_EXP 40
16406: PPUSH
16407: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16411: LD_EXP 40
16415: PPUSH
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 1
16423: ARRAY
16424: PPUSH
16425: CALL_OW 119
// wait ( 0 0$1 ) ;
16429: LD_INT 35
16431: PPUSH
16432: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16436: LD_VAR 0 3
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 2
16452: ARRAY
16453: PUSH
16454: LD_STRING -1-land
16456: STR
16457: PPUSH
16458: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16462: LD_EXP 40
16466: PPUSH
16467: LD_STRING DI-2-land
16469: PPUSH
16470: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16474: LD_VAR 0 3
16478: PUSH
16479: LD_INT 1
16481: ARRAY
16482: PPUSH
16483: LD_VAR 0 3
16487: PUSH
16488: LD_INT 2
16490: ARRAY
16491: PUSH
16492: LD_STRING -2-land
16494: STR
16495: PPUSH
16496: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16500: LD_VAR 0 3
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 2
16516: ARRAY
16517: PUSH
16518: LD_STRING -3-land
16520: STR
16521: PPUSH
16522: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16526: LD_EXP 30
16530: PPUSH
16531: LD_STRING DH-1-land
16533: PPUSH
16534: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16538: LD_VAR 0 5
16542: PPUSH
16543: CALL_OW 313
16547: PUSH
16548: LD_INT 6
16550: EQUAL
16551: IFFALSE 16571
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16553: LD_VAR 0 5
16557: PPUSH
16558: CALL_OW 313
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16571: LD_EXP 40
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 235
// CenterOnUnits ( depot ) ;
16583: LD_VAR 0 5
16587: PPUSH
16588: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16592: LD_EXP 40
16596: PPUSH
16597: LD_VAR 0 5
16601: PPUSH
16602: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: LD_VAR 0 5
16619: PPUSH
16620: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16631: LD_EXP 40
16635: PPUSH
16636: CALL_OW 310
16640: PUSH
16641: LD_EXP 40
16645: PPUSH
16646: CALL_OW 302
16650: NOT
16651: OR
16652: PUSH
16653: LD_VAR 0 5
16657: PPUSH
16658: CALL_OW 302
16662: NOT
16663: OR
16664: IFFALSE 16624
// InGameOff ;
16666: CALL_OW 9
// blockAttack := false ;
16670: LD_ADDR_EXP 29
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16678: LD_EXP 40
16682: PPUSH
16683: CALL_OW 302
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16788
// if not IsOk ( depot ) then
16692: LD_VAR 0 5
16696: PPUSH
16697: CALL_OW 302
16701: NOT
16702: IFFALSE 16765
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16704: LD_EXP 40
16708: PPUSH
16709: LD_INT 30
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16719: LD_INT 35
16721: PPUSH
16722: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16726: LD_EXP 40
16730: PPUSH
16731: LD_INT 30
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 307
16741: PUSH
16742: LD_EXP 40
16746: PPUSH
16747: CALL_OW 301
16751: OR
16752: IFFALSE 16719
// RemoveUnit ( Ibrahim ) ;
16754: LD_EXP 40
16758: PPUSH
16759: CALL_OW 64
// exit ;
16763: GO 16788
// end ; ibrahimInDepot := true ;
16765: LD_ADDR_EXP 26
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// allowConvoys := true ;
16773: LD_ADDR_EXP 13
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16781: LD_STRING IbrahimInDepot
16783: PPUSH
16784: CALL_OW 97
// end ;
16788: PPOPN 5
16790: END
// export function IbrahimQuery ; begin
16791: LD_INT 0
16793: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16794: LD_STRING IbrahimQuery
16796: PPUSH
16797: CALL_OW 97
16801: PUSH
16802: LD_INT 1
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 17172
16810: POP
// begin allowConvoys := false ;
16811: LD_ADDR_EXP 13
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// ibrahimInDepot := false ;
16819: LD_ADDR_EXP 26
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// InGameOn ;
16827: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16831: LD_EXP 30
16835: PPUSH
16836: CALL_OW 87
// wait ( 0 0$1 ) ;
16840: LD_INT 35
16842: PPUSH
16843: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16847: LD_EXP 30
16851: PPUSH
16852: LD_STRING DH-1-interrogation
16854: PPUSH
16855: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16859: LD_EXP 40
16863: PPUSH
16864: LD_STRING DI-1-interrogation
16866: PPUSH
16867: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16871: LD_EXP 30
16875: PPUSH
16876: LD_STRING DH-2-interrogation
16878: PPUSH
16879: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16883: LD_EXP 40
16887: PPUSH
16888: LD_STRING DI-2-interrogation
16890: PPUSH
16891: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16895: LD_EXP 30
16899: PPUSH
16900: LD_STRING DH-3-interrogation
16902: PPUSH
16903: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16907: LD_EXP 40
16911: PPUSH
16912: LD_STRING DI-3-interrogation
16914: PPUSH
16915: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16919: LD_EXP 30
16923: PPUSH
16924: LD_STRING DH-4-interrogation
16926: PPUSH
16927: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16931: LD_EXP 40
16935: PPUSH
16936: LD_STRING DI-4-interrogation
16938: PPUSH
16939: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16943: LD_EXP 30
16947: PPUSH
16948: LD_STRING DH-5-interrogation
16950: PPUSH
16951: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16955: LD_EXP 40
16959: PPUSH
16960: LD_STRING DI-5-interrogation
16962: PPUSH
16963: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16967: LD_INT 10
16969: PPUSH
16970: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16974: LD_EXP 30
16978: PPUSH
16979: LD_STRING DH-6-interrogation
16981: PPUSH
16982: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16986: LD_EXP 40
16990: PPUSH
16991: LD_STRING DI-6-interrogation
16993: PPUSH
16994: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16998: LD_EXP 40
17002: PPUSH
17003: LD_STRING DI-7-interrogation
17005: PPUSH
17006: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17010: LD_EXP 30
17014: PPUSH
17015: LD_STRING DH-7-interrogation
17017: PPUSH
17018: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17022: LD_INT 10
17024: PPUSH
17025: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17029: LD_EXP 30
17033: PPUSH
17034: LD_STRING DH-8-interrogation
17036: PPUSH
17037: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17041: LD_EXP 40
17045: PPUSH
17046: LD_STRING DI-8-interrogation
17048: PPUSH
17049: CALL_OW 88
// wait ( 0 0$1 ) ;
17053: LD_INT 35
17055: PPUSH
17056: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
17060: LD_STRING IbrahimDecisionQuery
17062: PPUSH
17063: CALL_OW 97
17067: PUSH
17068: LD_INT 1
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17100
17076: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17077: LD_EXP 40
17081: PPUSH
17082: LD_STRING DI-1-kill
17084: PPUSH
17085: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17089: LD_EXP 40
17093: PPUSH
17094: CALL_OW 66
// end ; 2 :
17098: GO 17166
17100: LD_INT 2
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17165
17108: POP
// begin SetSide ( Ibrahim , 6 ) ;
17109: LD_EXP 40
17113: PPUSH
17114: LD_INT 6
17116: PPUSH
17117: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17121: LD_EXP 40
17125: PPUSH
17126: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17130: LD_EXP 40
17134: PPUSH
17135: LD_INT 66
17137: PPUSH
17138: LD_INT 2
17140: PPUSH
17141: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17145: LD_EXP 40
17149: PPUSH
17150: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17154: LD_EXP 30
17158: PPUSH
17159: CALL_OW 122
// end ; end ;
17163: GO 17166
17165: POP
// InGameOff ;
17166: CALL_OW 9
// end ; 2 :
17170: GO 17186
17172: LD_INT 2
17174: DOUBLE
17175: EQUAL
17176: IFTRUE 17180
17178: GO 17185
17180: POP
// exit ; end ;
17181: GO 17270
17183: GO 17186
17185: POP
// allowConvoys := true ;
17186: LD_ADDR_EXP 13
17190: PUSH
17191: LD_INT 1
17193: ST_TO_ADDR
// blockAttack := false ;
17194: LD_ADDR_EXP 29
17198: PUSH
17199: LD_INT 0
17201: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17202: LD_INT 5250
17204: PPUSH
17205: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17209: LD_INT 35
17211: PPUSH
17212: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17216: LD_INT 81
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 21
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: NOT
17245: IFFALSE 17209
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17247: LD_EXP 40
17251: PPUSH
17252: LD_INT 34
17254: PPUSH
17255: LD_INT 21
17257: PPUSH
17258: CALL_OW 111
// ibrahimIsFree := true ;
17262: LD_ADDR_EXP 27
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
// end ;
17270: LD_VAR 0 1
17274: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17275: LD_EXP 27
17279: PUSH
17280: LD_EXP 40
17284: PPUSH
17285: CALL_OW 302
17289: AND
17290: PUSH
17291: LD_INT 2
17293: PPUSH
17294: LD_EXP 40
17298: PPUSH
17299: CALL_OW 292
17303: AND
17304: IFFALSE 18095
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
17315: PPUSH
17316: PPUSH
// begin wait ( 0 0$10 ) ;
17317: LD_INT 350
17319: PPUSH
17320: CALL_OW 67
// allowConvoys := false ;
17324: LD_ADDR_EXP 13
17328: PUSH
17329: LD_INT 0
17331: ST_TO_ADDR
// blockAttack := true ;
17332: LD_ADDR_EXP 29
17336: PUSH
17337: LD_INT 1
17339: ST_TO_ADDR
// depot := usDepot ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: LD_INT 11
17347: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17348: LD_INT 11
17350: NOT
17351: PUSH
17352: LD_INT 22
17354: PUSH
17355: LD_INT 2
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 50
17364: PUSH
17365: EMPTY
17366: LIST
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 69
17387: AND
17388: IFFALSE 17435
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 22
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 50
17407: PUSH
17408: EMPTY
17409: LIST
17410: PUSH
17411: LD_INT 30
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: PPUSH
17426: CALL_OW 69
17430: PUSH
17431: LD_INT 1
17433: ARRAY
17434: ST_TO_ADDR
// InGameOn ;
17435: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17439: LD_EXP 40
17443: PPUSH
17444: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17448: LD_EXP 40
17452: PPUSH
17453: LD_STRING DI-1-free
17455: PPUSH
17456: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17460: LD_EXP 30
17464: PPUSH
17465: LD_EXP 40
17469: PPUSH
17470: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17474: LD_EXP 30
17478: PPUSH
17479: LD_STRING DH-1-free
17481: PPUSH
17482: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17486: LD_EXP 40
17490: PPUSH
17491: LD_EXP 30
17495: PPUSH
17496: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17500: LD_EXP 40
17504: PPUSH
17505: LD_STRING DI-2-free
17507: PPUSH
17508: CALL_OW 88
// changeClass := 0 ;
17512: LD_ADDR_VAR 0 1
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17520: LD_STRING IbrahimJoinQuery
17522: PPUSH
17523: CALL_OW 97
17527: PUSH
17528: LD_INT 1
17530: DOUBLE
17531: EQUAL
17532: IFTRUE 17536
17534: GO 17547
17536: POP
// begin changeClass := 1 ;
17537: LD_ADDR_VAR 0 1
17541: PUSH
17542: LD_INT 1
17544: ST_TO_ADDR
// end ; 2 :
17545: GO 17795
17547: LD_INT 2
17549: DOUBLE
17550: EQUAL
17551: IFTRUE 17555
17553: GO 17715
17555: POP
// begin Say ( Heike , DH-1-decline ) ;
17556: LD_EXP 30
17560: PPUSH
17561: LD_STRING DH-1-decline
17563: PPUSH
17564: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17568: LD_EXP 40
17572: PPUSH
17573: LD_STRING DI-1-decline
17575: PPUSH
17576: CALL_OW 88
// InGameOff ;
17580: CALL_OW 9
// blockAttack := false ;
17584: LD_ADDR_EXP 29
17588: PUSH
17589: LD_INT 0
17591: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17592: LD_EXP 40
17596: PPUSH
17597: LD_INT 30
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 111
// p := 0 ;
17607: LD_ADDR_VAR 0 3
17611: PUSH
17612: LD_INT 0
17614: ST_TO_ADDR
// repeat p := p + 1 ;
17615: LD_ADDR_VAR 0 3
17619: PUSH
17620: LD_VAR 0 3
17624: PUSH
17625: LD_INT 1
17627: PLUS
17628: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17629: LD_INT 35
17631: PPUSH
17632: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17636: LD_EXP 40
17640: PPUSH
17641: LD_INT 30
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: CALL_OW 307
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 101
17664: PUSH
17665: LD_INT 6
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 69
17680: NOT
17681: OR
17682: PUSH
17683: LD_VAR 0 3
17687: PUSH
17688: LD_INT 10
17690: GREATER
17691: OR
17692: IFFALSE 17615
// RemoveUnit ( Ibrahim ) ;
17694: LD_EXP 40
17698: PPUSH
17699: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17703: LD_INT 1
17705: PPUSH
17706: LD_STRING 03_IbrahimHasEscaped
17708: PPUSH
17709: CALL_OW 39
// end ; 3 :
17713: GO 17795
17715: LD_INT 3
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17794
17723: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17724: LD_EXP 30
17728: PPUSH
17729: LD_STRING DH-1-radio-hq
17731: PPUSH
17732: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17736: LD_EXP 39
17740: PPUSH
17741: LD_STRING DO-1-radio-hq
17743: PPUSH
17744: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17748: LD_EXP 30
17752: PPUSH
17753: LD_STRING DH-2-radio-hq
17755: PPUSH
17756: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17760: LD_EXP 39
17764: PPUSH
17765: LD_STRING DO-2-radio-hq
17767: PPUSH
17768: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17772: LD_EXP 30
17776: PPUSH
17777: LD_STRING DH-3-radio-hq
17779: PPUSH
17780: CALL_OW 88
// changeClass := 1 ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 1
17791: ST_TO_ADDR
// end ; end ;
17792: GO 17795
17794: POP
// if changeClass then
17795: LD_VAR 0 1
17799: IFFALSE 18095
// begin Say ( Heike , DH-1-agree ) ;
17801: LD_EXP 30
17805: PPUSH
17806: LD_STRING DH-1-agree
17808: PPUSH
17809: CALL_OW 88
// if IsOk ( Givi ) then
17813: LD_EXP 31
17817: PPUSH
17818: CALL_OW 302
17822: IFFALSE 17860
// begin Say ( Givi , DG-1-agree ) ;
17824: LD_EXP 31
17828: PPUSH
17829: LD_STRING DG-1-agree
17831: PPUSH
17832: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17836: LD_EXP 30
17840: PPUSH
17841: LD_STRING DH-2-agree
17843: PPUSH
17844: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17848: LD_EXP 31
17852: PPUSH
17853: LD_STRING DG-2-agree
17855: PPUSH
17856: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17860: LD_VAR 0 4
17864: PPUSH
17865: CALL_OW 313
17869: PUSH
17870: LD_INT 6
17872: EQUAL
17873: IFFALSE 17893
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17875: LD_VAR 0 4
17879: PPUSH
17880: CALL_OW 313
17884: PUSH
17885: LD_INT 1
17887: ARRAY
17888: PPUSH
17889: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17893: LD_EXP 40
17897: PPUSH
17898: LD_INT 2
17900: PPUSH
17901: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17905: LD_ADDR_VAR 0 5
17909: PUSH
17910: LD_EXP 40
17914: PPUSH
17915: CALL_OW 250
17919: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17920: LD_ADDR_VAR 0 6
17924: PUSH
17925: LD_EXP 40
17929: PPUSH
17930: CALL_OW 251
17934: ST_TO_ADDR
// if depot then
17935: LD_VAR 0 4
17939: IFFALSE 17988
// begin ComEnterUnit ( Ibrahim , depot ) ;
17941: LD_EXP 40
17945: PPUSH
17946: LD_VAR 0 4
17950: PPUSH
17951: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17955: LD_INT 35
17957: PPUSH
17958: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17962: LD_EXP 40
17966: PPUSH
17967: CALL_OW 310
17971: IFFALSE 17955
// b := IsInUnit ( Ibrahim ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_EXP 40
17982: PPUSH
17983: CALL_OW 310
17987: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17988: LD_EXP 40
17992: PPUSH
17993: CALL_OW 64
// uc_side := 2 ;
17997: LD_ADDR_OWVAR 20
18001: PUSH
18002: LD_INT 2
18004: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18005: LD_ADDR_EXP 40
18009: PUSH
18010: LD_STRING Ibrahim
18012: PPUSH
18013: LD_INT 0
18015: PPUSH
18016: LD_STRING 
18018: PPUSH
18019: CALL 40080 0 3
18023: ST_TO_ADDR
// if depot then
18024: LD_VAR 0 4
18028: IFFALSE 18046
// PlaceHumanInUnit ( Ibrahim , b ) else
18030: LD_EXP 40
18034: PPUSH
18035: LD_VAR 0 2
18039: PPUSH
18040: CALL_OW 52
18044: GO 18068
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18046: LD_EXP 40
18050: PPUSH
18051: LD_VAR 0 5
18055: PPUSH
18056: LD_VAR 0 6
18060: PPUSH
18061: LD_INT 0
18063: PPUSH
18064: CALL_OW 48
// InGameOff ;
18068: CALL_OW 9
// allowConvoys := true ;
18072: LD_ADDR_EXP 13
18076: PUSH
18077: LD_INT 1
18079: ST_TO_ADDR
// blockAttack := false ;
18080: LD_ADDR_EXP 29
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18088: LD_STRING ACH_IBRAHIM
18090: PPUSH
18091: CALL_OW 543
// end ; end ;
18095: PPOPN 6
18097: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18098: LD_EXP 35
18102: PPUSH
18103: CALL_OW 256
18107: PUSH
18108: LD_INT 3
18110: LESS
18111: IFFALSE 18178
18113: GO 18115
18115: DISABLE
// begin DialogueOn ;
18116: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18120: LD_EXP 35
18124: PPUSH
18125: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18129: LD_EXP 35
18133: PPUSH
18134: LD_STRING DK-keydeath-1
18136: PPUSH
18137: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18141: LD_EXP 30
18145: PPUSH
18146: LD_STRING DH-keydeath-2
18148: PPUSH
18149: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18153: LD_EXP 30
18157: PPUSH
18158: LD_STRING DH-keydeath-3
18160: PPUSH
18161: CALL_OW 88
// DialogueOff ;
18165: CALL_OW 7
// KillUnit ( Kaia ) ;
18169: LD_EXP 35
18173: PPUSH
18174: CALL_OW 66
// end ;
18178: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18179: LD_EXP 12
18183: PUSH
18184: LD_EXP 22
18188: PUSH
18189: LD_INT 1
18191: LESS
18192: AND
18193: IFFALSE 18733
18195: GO 18197
18197: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18198: LD_INT 22
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: LD_INT 25
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 25
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PPUSH
18240: CALL_OW 69
18244: IFFALSE 18322
// begin ChangeSideFog ( 1 , 2 ) ;
18246: LD_INT 1
18248: PPUSH
18249: LD_INT 2
18251: PPUSH
18252: CALL_OW 343
// Query ( DestroyEnemy ) ;
18256: LD_STRING DestroyEnemy
18258: PPUSH
18259: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18263: LD_INT 35
18265: PPUSH
18266: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18270: LD_INT 22
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 25
18285: PUSH
18286: LD_INT 1
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 25
18295: PUSH
18296: LD_INT 3
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: PUSH
18317: LD_INT 0
18319: EQUAL
18320: IFFALSE 18263
// end ; DialogueOn ;
18322: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18326: LD_EXP 30
18330: PPUSH
18331: LD_STRING DH-1-final
18333: PPUSH
18334: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18338: LD_OWVAR 1
18342: PUSH
18343: LD_INT 138600
18345: PUSH
18346: LD_INT 134400
18348: PUSH
18349: LD_INT 130200
18351: PUSH
18352: LD_INT 126000
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: PUSH
18361: LD_OWVAR 67
18365: ARRAY
18366: LESSEQUAL
18367: IFFALSE 18381
// AddMedal ( med1 , 1 ) else
18369: LD_STRING med1
18371: PPUSH
18372: LD_INT 1
18374: PPUSH
18375: CALL_OW 101
18379: GO 18392
// AddMedal ( med1 , - 1 ) ;
18381: LD_STRING med1
18383: PPUSH
18384: LD_INT 1
18386: NEG
18387: PPUSH
18388: CALL_OW 101
// if vehCounter >= 2 then
18392: LD_EXP 23
18396: PUSH
18397: LD_INT 2
18399: GREATEREQUAL
18400: IFFALSE 18414
// AddMedal ( med2 , 1 ) else
18402: LD_STRING med2
18404: PPUSH
18405: LD_INT 1
18407: PPUSH
18408: CALL_OW 101
18412: GO 18425
// AddMedal ( med2 , - 1 ) ;
18414: LD_STRING med2
18416: PPUSH
18417: LD_INT 1
18419: NEG
18420: PPUSH
18421: CALL_OW 101
// if deadCounter = 0 then
18425: LD_EXP 10
18429: PUSH
18430: LD_INT 0
18432: EQUAL
18433: IFFALSE 18447
// AddMedal ( med3 , 1 ) else
18435: LD_STRING med3
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: CALL_OW 101
18445: GO 18458
// AddMedal ( med3 , - 1 ) ;
18447: LD_STRING med3
18449: PPUSH
18450: LD_INT 1
18452: NEG
18453: PPUSH
18454: CALL_OW 101
// GiveMedals ( MAIN ) ;
18458: LD_STRING MAIN
18460: PPUSH
18461: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18465: LD_INT 22
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 23
18477: PUSH
18478: LD_INT 2
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 21
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: LIST
18499: PPUSH
18500: CALL_OW 69
18504: PPUSH
18505: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18509: LD_EXP 30
18513: PPUSH
18514: LD_STRING 03_Heike
18516: PPUSH
18517: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18521: LD_EXP 34
18525: PPUSH
18526: LD_STRING 03_Aviradze
18528: PPUSH
18529: CALL_OW 38
// if Givi then
18533: LD_EXP 31
18537: IFFALSE 18551
// SaveCharacters ( Givi , 03_Givi ) ;
18539: LD_EXP 31
18543: PPUSH
18544: LD_STRING 03_Givi
18546: PPUSH
18547: CALL_OW 38
// if Mike then
18551: LD_EXP 32
18555: IFFALSE 18569
// SaveCharacters ( Mike , 03_Mike ) ;
18557: LD_EXP 32
18561: PPUSH
18562: LD_STRING 03_Mike
18564: PPUSH
18565: CALL_OW 38
// if Kamil then
18569: LD_EXP 33
18573: IFFALSE 18587
// SaveCharacters ( Kamil , 03_Kamil ) ;
18575: LD_EXP 33
18579: PPUSH
18580: LD_STRING 03_Kamil
18582: PPUSH
18583: CALL_OW 38
// if Kaia then
18587: LD_EXP 35
18591: IFFALSE 18605
// SaveCharacters ( Kaia , 03_Kaia ) ;
18593: LD_EXP 35
18597: PPUSH
18598: LD_STRING 03_Kaia
18600: PPUSH
18601: CALL_OW 38
// if Sophia then
18605: LD_EXP 36
18609: IFFALSE 18623
// SaveCharacters ( Sophia , 03_Sophia ) ;
18611: LD_EXP 36
18615: PPUSH
18616: LD_STRING 03_Sophia
18618: PPUSH
18619: CALL_OW 38
// if Markov then
18623: LD_EXP 37
18627: IFFALSE 18641
// SaveCharacters ( Markov , 03_Markov ) ;
18629: LD_EXP 37
18633: PPUSH
18634: LD_STRING 03_Markov
18636: PPUSH
18637: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18641: LD_EXP 40
18645: PUSH
18646: LD_EXP 40
18650: PPUSH
18651: CALL_OW 255
18655: PUSH
18656: LD_INT 2
18658: EQUAL
18659: AND
18660: IFFALSE 18681
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18662: LD_STRING enableBioCharacter(BIO_IBRA)
18664: PPUSH
18665: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18669: LD_EXP 40
18673: PPUSH
18674: LD_STRING 03_Ibrahim
18676: PPUSH
18677: CALL_OW 38
// end ; if heikeSecondSquad then
18681: LD_EXP 44
18685: IFFALSE 18699
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18687: LD_EXP 44
18691: PPUSH
18692: LD_STRING 03_others
18694: PPUSH
18695: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18699: LD_EXP 10
18703: PPUSH
18704: LD_STRING 03_DeadCounter
18706: PPUSH
18707: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18711: LD_STRING enableBioCharacter(BIO_OMAR)
18713: PPUSH
18714: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18718: LD_STRING enableBioCharacter(BIO_FARM)
18720: PPUSH
18721: CALL_OW 559
// YouWin ;
18725: CALL_OW 103
// DialogueOff ;
18729: CALL_OW 7
// end ; end_of_file
18733: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18734: LD_VAR 0 1
18738: PPUSH
18739: CALL 35791 0 1
// if un = Heike then
18743: LD_VAR 0 1
18747: PUSH
18748: LD_EXP 30
18752: EQUAL
18753: IFFALSE 18762
// YouLost ( Heike ) ;
18755: LD_STRING Heike
18757: PPUSH
18758: CALL_OW 104
// if un = Aviradze then
18762: LD_VAR 0 1
18766: PUSH
18767: LD_EXP 34
18771: EQUAL
18772: IFFALSE 18781
// YouLost ( Aviradze ) ;
18774: LD_STRING Aviradze
18776: PPUSH
18777: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18781: LD_VAR 0 1
18785: PUSH
18786: LD_INT 11
18788: EQUAL
18789: PUSH
18790: LD_EXP 12
18794: NOT
18795: AND
18796: IFFALSE 18805
// YouLost ( Depot ) ;
18798: LD_STRING Depot
18800: PPUSH
18801: CALL_OW 104
// if un = arDepot then
18805: LD_VAR 0 1
18809: PUSH
18810: LD_INT 5
18812: EQUAL
18813: IFFALSE 18822
// YouLost ( FarmerDepot ) ;
18815: LD_STRING FarmerDepot
18817: PPUSH
18818: CALL_OW 104
// if un = Farmer then
18822: LD_VAR 0 1
18826: PUSH
18827: LD_EXP 38
18831: EQUAL
18832: IFFALSE 18841
// YouLost ( Farmer ) ;
18834: LD_STRING Farmer
18836: PPUSH
18837: CALL_OW 104
// if un in usForces then
18841: LD_VAR 0 1
18845: PUSH
18846: LD_EXP 46
18850: IN
18851: IFFALSE 18869
// usForces := usForces diff un ;
18853: LD_ADDR_EXP 46
18857: PUSH
18858: LD_EXP 46
18862: PUSH
18863: LD_VAR 0 1
18867: DIFF
18868: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18869: LD_VAR 0 1
18873: PUSH
18874: LD_INT 22
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 23
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: IN
18914: IFFALSE 18930
// deadCounter := deadCounter + 1 ;
18916: LD_ADDR_EXP 10
18920: PUSH
18921: LD_EXP 10
18925: PUSH
18926: LD_INT 1
18928: PLUS
18929: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18930: LD_VAR 0 1
18934: PUSH
18935: LD_INT 22
18937: PUSH
18938: LD_INT 4
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 34
18947: PUSH
18948: LD_INT 12
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PPUSH
18959: CALL_OW 69
18963: IN
18964: PUSH
18965: LD_EXP 19
18969: NOT
18970: AND
18971: IFFALSE 18981
// firstConvoyDestroyed := true ;
18973: LD_ADDR_EXP 19
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if un in usAttackers then
18981: LD_VAR 0 1
18985: PUSH
18986: LD_EXP 49
18990: IN
18991: IFFALSE 19009
// usAttackers := usAttackers diff un ;
18993: LD_ADDR_EXP 49
18997: PUSH
18998: LD_EXP 49
19002: PUSH
19003: LD_VAR 0 1
19007: DIFF
19008: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_INT 5
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: IN
19043: IFFALSE 19059
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19045: LD_ADDR_EXP 21
19049: PUSH
19050: LD_EXP 21
19054: PUSH
19055: LD_INT 1
19057: PLUS
19058: ST_TO_ADDR
// end ;
19059: PPOPN 1
19061: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19062: LD_VAR 0 2
19066: PUSH
19067: LD_EXP 40
19071: EQUAL
19072: PUSH
19073: LD_EXP 26
19077: AND
19078: IFFALSE 19263
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19080: LD_INT 22
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 30
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 50
19102: PUSH
19103: EMPTY
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: PPUSH
19111: CALL_OW 69
19115: IFFALSE 19169
// begin InGameOn ;
19117: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19121: LD_EXP 40
19125: PPUSH
19126: LD_INT 11
19128: PPUSH
19129: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19133: LD_INT 35
19135: PPUSH
19136: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19140: LD_EXP 40
19144: PPUSH
19145: LD_INT 11
19147: PPUSH
19148: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19152: LD_EXP 40
19156: PPUSH
19157: CALL_OW 310
19161: IFFALSE 19133
// InGameOff ;
19163: CALL_OW 9
// end else
19167: GO 19263
// begin SetSide ( Ibrahim , 6 ) ;
19169: LD_EXP 40
19173: PPUSH
19174: LD_INT 6
19176: PPUSH
19177: CALL_OW 235
// ibrahimInDepot := false ;
19181: LD_ADDR_EXP 26
19185: PUSH
19186: LD_INT 0
19188: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19189: LD_EXP 40
19193: PPUSH
19194: LD_INT 30
19196: PPUSH
19197: LD_INT 1
19199: PPUSH
19200: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19204: LD_INT 35
19206: PPUSH
19207: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19211: LD_EXP 40
19215: PPUSH
19216: LD_INT 30
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19226: LD_EXP 40
19230: PPUSH
19231: LD_INT 30
19233: PPUSH
19234: LD_INT 1
19236: PPUSH
19237: CALL_OW 307
19241: PUSH
19242: LD_EXP 40
19246: PPUSH
19247: CALL_OW 301
19251: OR
19252: IFFALSE 19204
// RemoveUnit ( Ibrahim ) ;
19254: LD_EXP 40
19258: PPUSH
19259: CALL_OW 64
// end ; end ; end ;
19263: PPOPN 2
19265: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19266: LD_VAR 0 2
19270: PUSH
19271: LD_EXP 30
19275: EQUAL
19276: PUSH
19277: LD_VAR 0 1
19281: PUSH
19282: LD_INT 11
19284: EQUAL
19285: AND
19286: PUSH
19287: LD_EXP 26
19291: AND
19292: IFFALSE 19298
// IbrahimQuery ;
19294: CALL 16791 0 0
// end ;
19298: PPOPN 2
19300: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL_OW 141
// if oldId in usAttackers then
19310: LD_VAR 0 2
19314: PUSH
19315: LD_EXP 49
19319: IN
19320: IFFALSE 19338
// usAttackers := usAttackers diff oldId ;
19322: LD_ADDR_EXP 49
19326: PUSH
19327: LD_EXP 49
19331: PUSH
19332: LD_VAR 0 2
19336: DIFF
19337: ST_TO_ADDR
// if newId in usAttackers then
19338: LD_VAR 0 1
19342: PUSH
19343: LD_EXP 49
19347: IN
19348: IFFALSE 19366
// usAttackers := usAttackers diff newId ;
19350: LD_ADDR_EXP 49
19354: PUSH
19355: LD_EXP 49
19359: PUSH
19360: LD_VAR 0 1
19364: DIFF
19365: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19366: LD_VAR 0 3
19370: PUSH
19371: LD_INT 4
19373: EQUAL
19374: PUSH
19375: LD_EXP 19
19379: NOT
19380: AND
19381: IFFALSE 19391
// firstConvoyDestroyed := true ;
19383: LD_ADDR_EXP 19
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL_OW 264
19400: PUSH
19401: LD_INT 12
19403: EQUAL
19404: IFFALSE 19442
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19406: LD_ADDR_EXP 14
19410: PUSH
19411: LD_EXP 14
19415: PUSH
19416: LD_INT 1
19418: PLUS
19419: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19420: LD_VAR 0 1
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: CALL_OW 289
19432: PUSH
19433: LD_INT 0
19435: EQUAL
19436: IFFALSE 19442
// EmptyCargoDialog ;
19438: CALL 15409 0 0
// end ; end ;
19442: PPOPN 4
19444: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19445: LD_VAR 0 1
19449: PUSH
19450: LD_INT 2
19452: EQUAL
19453: PUSH
19454: LD_VAR 0 2
19458: PUSH
19459: LD_INT 5
19461: EQUAL
19462: AND
19463: IFFALSE 19472
// YouLost ( Attack ) ;
19465: LD_STRING Attack
19467: PPUSH
19468: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19472: LD_VAR 0 1
19476: PUSH
19477: LD_INT 2
19479: EQUAL
19480: PUSH
19481: LD_VAR 0 2
19485: PUSH
19486: LD_INT 1
19488: EQUAL
19489: AND
19490: IFFALSE 19500
// americanContact := true ;
19492: LD_ADDR_EXP 5
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// end ;
19500: PPOPN 2
19502: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19503: LD_VAR 0 1
19507: PPUSH
19508: CALL_OW 255
19512: PUSH
19513: LD_INT 1
19515: EQUAL
19516: PUSH
19517: LD_EXP 7
19521: NOT
19522: AND
19523: IFFALSE 19657
// begin if GetBType ( b ) = b_lab then
19525: LD_VAR 0 1
19529: PPUSH
19530: CALL_OW 266
19534: PUSH
19535: LD_INT 6
19537: EQUAL
19538: IFFALSE 19578
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19540: LD_EXP 46
19544: PPUSH
19545: LD_INT 25
19547: PUSH
19548: LD_INT 4
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 72
19559: PPUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 120
// AmLabResearch ( b ) ;
19569: LD_VAR 0 1
19573: PPUSH
19574: CALL 5134 0 1
// end ; if GetBType ( b ) = b_armoury then
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 266
19587: PUSH
19588: LD_INT 4
19590: EQUAL
19591: IFFALSE 19639
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19593: LD_EXP 46
19597: PPUSH
19598: LD_INT 25
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 3
19610: PUSH
19611: LD_INT 54
19613: PUSH
19614: EMPTY
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PPUSH
19625: CALL_OW 72
19629: PPUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19639: LD_ADDR_EXP 48
19643: PUSH
19644: LD_EXP 48
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 3
19656: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 255
19666: PUSH
19667: LD_INT 5
19669: EQUAL
19670: IFFALSE 19684
// SetBLevel ( b , 5 ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_INT 5
19679: PPUSH
19680: CALL_OW 241
// end ;
19684: PPOPN 1
19686: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19687: LD_VAR 0 1
19691: PPUSH
19692: CALL_OW 255
19696: PUSH
19697: LD_INT 2
19699: EQUAL
19700: IFFALSE 19716
// vehCounter := vehCounter + 1 ;
19702: LD_ADDR_EXP 23
19706: PUSH
19707: LD_EXP 23
19711: PUSH
19712: LD_INT 1
19714: PLUS
19715: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19716: LD_VAR 0 1
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL 35911 0 2
// end ;
19730: PPOPN 2
19732: END
// on SailEvent ( event ) do begin if event = eventAttack then
19733: LD_VAR 0 1
19737: PUSH
19738: LD_EXP 25
19742: EQUAL
19743: IFFALSE 19749
// AmericanAttack ;
19745: CALL 6778 0 0
// end ; end_of_file
19749: PPOPN 1
19751: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19752: LD_OWVAR 1
19756: PUSH
19757: LD_INT 10500
19759: PUSH
19760: LD_INT 9800
19762: PUSH
19763: LD_INT 9450
19765: PUSH
19766: LD_INT 9100
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: PUSH
19775: LD_OWVAR 67
19779: ARRAY
19780: LESSEQUAL
19781: IFFALSE 19808
19783: GO 19785
19785: DISABLE
// begin enable ;
19786: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19787: LD_INT 1
19789: PPUSH
19790: LD_INT 5
19792: PPUSH
19793: CALL_OW 12
19797: PPUSH
19798: LD_INT 9
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 55
// end ;
19808: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19809: LD_EXP 7
19813: PUSH
19814: LD_OWVAR 1
19818: PUSH
19819: LD_INT 94500
19821: LESSEQUAL
19822: AND
19823: IFFALSE 19850
19825: GO 19827
19827: DISABLE
// begin enable ;
19828: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19829: LD_INT 3
19831: PPUSH
19832: LD_INT 5
19834: PPUSH
19835: CALL_OW 12
19839: PPUSH
19840: LD_INT 9
19842: PPUSH
19843: LD_INT 1
19845: PPUSH
19846: CALL_OW 55
// end ; end_of_file
19850: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19851: LD_EXP 12
19855: NOT
19856: PUSH
19857: LD_EXP 17
19861: AND
19862: PUSH
19863: LD_EXP 4
19867: AND
19868: PUSH
19869: LD_EXP 16
19873: PUSH
19874: LD_EXP 17
19878: LESSEQUAL
19879: AND
19880: IFFALSE 19991
19882: GO 19884
19884: DISABLE
// begin enable ;
19885: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19886: LD_ADDR_OWVAR 47
19890: PUSH
19891: LD_STRING #X103-1
19893: PUSH
19894: LD_EXP 17
19898: PUSH
19899: LD_EXP 16
19903: MINUS
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19909: LD_ADDR_EXP 16
19913: PUSH
19914: LD_INT 5
19916: PPUSH
19917: CALL_OW 274
19921: PPUSH
19922: LD_INT 1
19924: PPUSH
19925: CALL_OW 275
19929: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19930: LD_INT 10
19932: PPUSH
19933: LD_INT 1
19935: PPUSH
19936: CALL_OW 287
19940: PUSH
19941: LD_INT 0
19943: EQUAL
19944: IFFALSE 19962
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19946: LD_ADDR_EXP 18
19950: PUSH
19951: LD_EXP 18
19955: PUSH
19956: LD_INT 35
19958: MINUS
19959: ST_TO_ADDR
19960: GO 19991
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19962: LD_ADDR_EXP 18
19966: PUSH
19967: LD_INT 42000
19969: PUSH
19970: LD_INT 31500
19972: PUSH
19973: LD_INT 25200
19975: PUSH
19976: LD_INT 21000
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: PUSH
19985: LD_OWVAR 67
19989: ARRAY
19990: ST_TO_ADDR
// end ; end_of_file
19991: END
// every 0 0$1 do
19992: GO 19994
19994: DISABLE
// begin enable ;
19995: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19996: LD_STRING updateTimer(
19998: PUSH
19999: LD_OWVAR 1
20003: STR
20004: PUSH
20005: LD_STRING );
20007: STR
20008: PPUSH
20009: CALL_OW 559
// end ;
20013: END
// export function SOS_MapStart ( ) ; begin
20014: LD_INT 0
20016: PPUSH
// if streamModeActive then
20017: LD_EXP 51
20021: IFFALSE 20030
// DefineStreamItems ( true ) ;
20023: LD_INT 1
20025: PPUSH
20026: CALL 21834 0 1
// UpdateLuaVariables ( ) ;
20030: CALL 20047 0 0
// UpdateFactoryWaypoints ( ) ;
20034: CALL 34695 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20038: CALL 34952 0 0
// end ;
20042: LD_VAR 0 1
20046: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
20047: LD_INT 0
20049: PPUSH
// if not globalGameSaveCounter then
20050: LD_EXP 50
20054: NOT
20055: IFFALSE 20066
// ToLua ( setGameSaveCounter(0) ) else
20057: LD_STRING setGameSaveCounter(0)
20059: PPUSH
20060: CALL_OW 559
20064: GO 20098
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20066: LD_ADDR_EXP 50
20070: PUSH
20071: LD_EXP 50
20075: PPUSH
20076: CALL 78909 0 1
20080: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20081: LD_STRING setGameSaveCounter(
20083: PUSH
20084: LD_EXP 50
20088: STR
20089: PUSH
20090: LD_STRING )
20092: STR
20093: PPUSH
20094: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20098: LD_STRING setGameDifficulty(
20100: PUSH
20101: LD_OWVAR 67
20105: STR
20106: PUSH
20107: LD_STRING )
20109: STR
20110: PPUSH
20111: CALL_OW 559
// end ;
20115: LD_VAR 0 1
20119: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20120: LD_INT 0
20122: PPUSH
// if p2 = stream_mode then
20123: LD_VAR 0 2
20127: PUSH
20128: LD_INT 100
20130: EQUAL
20131: IFFALSE 21134
// begin if not StreamModeActive then
20133: LD_EXP 51
20137: NOT
20138: IFFALSE 20148
// StreamModeActive := true ;
20140: LD_ADDR_EXP 51
20144: PUSH
20145: LD_INT 1
20147: ST_TO_ADDR
// if p3 = 0 then
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 0
20155: EQUAL
20156: IFFALSE 20162
// InitStreamMode ;
20158: CALL 21370 0 0
// if p3 = 1 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 1
20169: EQUAL
20170: IFFALSE 20180
// sRocket := true ;
20172: LD_ADDR_EXP 56
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// if p3 = 2 then
20180: LD_VAR 0 3
20184: PUSH
20185: LD_INT 2
20187: EQUAL
20188: IFFALSE 20198
// sSpeed := true ;
20190: LD_ADDR_EXP 55
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// if p3 = 3 then
20198: LD_VAR 0 3
20202: PUSH
20203: LD_INT 3
20205: EQUAL
20206: IFFALSE 20216
// sEngine := true ;
20208: LD_ADDR_EXP 57
20212: PUSH
20213: LD_INT 1
20215: ST_TO_ADDR
// if p3 = 4 then
20216: LD_VAR 0 3
20220: PUSH
20221: LD_INT 4
20223: EQUAL
20224: IFFALSE 20234
// sSpec := true ;
20226: LD_ADDR_EXP 54
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// if p3 = 5 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_INT 5
20241: EQUAL
20242: IFFALSE 20252
// sLevel := true ;
20244: LD_ADDR_EXP 58
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 6 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 6
20259: EQUAL
20260: IFFALSE 20270
// sArmoury := true ;
20262: LD_ADDR_EXP 59
20266: PUSH
20267: LD_INT 1
20269: ST_TO_ADDR
// if p3 = 7 then
20270: LD_VAR 0 3
20274: PUSH
20275: LD_INT 7
20277: EQUAL
20278: IFFALSE 20288
// sRadar := true ;
20280: LD_ADDR_EXP 60
20284: PUSH
20285: LD_INT 1
20287: ST_TO_ADDR
// if p3 = 8 then
20288: LD_VAR 0 3
20292: PUSH
20293: LD_INT 8
20295: EQUAL
20296: IFFALSE 20306
// sBunker := true ;
20298: LD_ADDR_EXP 61
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// if p3 = 9 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 9
20313: EQUAL
20314: IFFALSE 20324
// sHack := true ;
20316: LD_ADDR_EXP 62
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if p3 = 10 then
20324: LD_VAR 0 3
20328: PUSH
20329: LD_INT 10
20331: EQUAL
20332: IFFALSE 20342
// sFire := true ;
20334: LD_ADDR_EXP 63
20338: PUSH
20339: LD_INT 1
20341: ST_TO_ADDR
// if p3 = 11 then
20342: LD_VAR 0 3
20346: PUSH
20347: LD_INT 11
20349: EQUAL
20350: IFFALSE 20360
// sRefresh := true ;
20352: LD_ADDR_EXP 64
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// if p3 = 12 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 12
20367: EQUAL
20368: IFFALSE 20378
// sExp := true ;
20370: LD_ADDR_EXP 65
20374: PUSH
20375: LD_INT 1
20377: ST_TO_ADDR
// if p3 = 13 then
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 13
20385: EQUAL
20386: IFFALSE 20396
// sDepot := true ;
20388: LD_ADDR_EXP 66
20392: PUSH
20393: LD_INT 1
20395: ST_TO_ADDR
// if p3 = 14 then
20396: LD_VAR 0 3
20400: PUSH
20401: LD_INT 14
20403: EQUAL
20404: IFFALSE 20414
// sFlag := true ;
20406: LD_ADDR_EXP 67
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if p3 = 15 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 15
20421: EQUAL
20422: IFFALSE 20432
// sKamikadze := true ;
20424: LD_ADDR_EXP 75
20428: PUSH
20429: LD_INT 1
20431: ST_TO_ADDR
// if p3 = 16 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 16
20439: EQUAL
20440: IFFALSE 20450
// sTroll := true ;
20442: LD_ADDR_EXP 76
20446: PUSH
20447: LD_INT 1
20449: ST_TO_ADDR
// if p3 = 17 then
20450: LD_VAR 0 3
20454: PUSH
20455: LD_INT 17
20457: EQUAL
20458: IFFALSE 20468
// sSlow := true ;
20460: LD_ADDR_EXP 77
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
// if p3 = 18 then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 18
20475: EQUAL
20476: IFFALSE 20486
// sLack := true ;
20478: LD_ADDR_EXP 78
20482: PUSH
20483: LD_INT 1
20485: ST_TO_ADDR
// if p3 = 19 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 19
20493: EQUAL
20494: IFFALSE 20504
// sTank := true ;
20496: LD_ADDR_EXP 80
20500: PUSH
20501: LD_INT 1
20503: ST_TO_ADDR
// if p3 = 20 then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 20
20511: EQUAL
20512: IFFALSE 20522
// sRemote := true ;
20514: LD_ADDR_EXP 81
20518: PUSH
20519: LD_INT 1
20521: ST_TO_ADDR
// if p3 = 21 then
20522: LD_VAR 0 3
20526: PUSH
20527: LD_INT 21
20529: EQUAL
20530: IFFALSE 20540
// sPowell := true ;
20532: LD_ADDR_EXP 82
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// if p3 = 22 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 22
20547: EQUAL
20548: IFFALSE 20558
// sTeleport := true ;
20550: LD_ADDR_EXP 85
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// if p3 = 23 then
20558: LD_VAR 0 3
20562: PUSH
20563: LD_INT 23
20565: EQUAL
20566: IFFALSE 20576
// sOilTower := true ;
20568: LD_ADDR_EXP 87
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// if p3 = 24 then
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 24
20583: EQUAL
20584: IFFALSE 20594
// sShovel := true ;
20586: LD_ADDR_EXP 88
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// if p3 = 25 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 25
20601: EQUAL
20602: IFFALSE 20612
// sSheik := true ;
20604: LD_ADDR_EXP 89
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// if p3 = 26 then
20612: LD_VAR 0 3
20616: PUSH
20617: LD_INT 26
20619: EQUAL
20620: IFFALSE 20630
// sEarthquake := true ;
20622: LD_ADDR_EXP 91
20626: PUSH
20627: LD_INT 1
20629: ST_TO_ADDR
// if p3 = 27 then
20630: LD_VAR 0 3
20634: PUSH
20635: LD_INT 27
20637: EQUAL
20638: IFFALSE 20648
// sAI := true ;
20640: LD_ADDR_EXP 92
20644: PUSH
20645: LD_INT 1
20647: ST_TO_ADDR
// if p3 = 28 then
20648: LD_VAR 0 3
20652: PUSH
20653: LD_INT 28
20655: EQUAL
20656: IFFALSE 20666
// sCargo := true ;
20658: LD_ADDR_EXP 95
20662: PUSH
20663: LD_INT 1
20665: ST_TO_ADDR
// if p3 = 29 then
20666: LD_VAR 0 3
20670: PUSH
20671: LD_INT 29
20673: EQUAL
20674: IFFALSE 20684
// sDLaser := true ;
20676: LD_ADDR_EXP 96
20680: PUSH
20681: LD_INT 1
20683: ST_TO_ADDR
// if p3 = 30 then
20684: LD_VAR 0 3
20688: PUSH
20689: LD_INT 30
20691: EQUAL
20692: IFFALSE 20702
// sExchange := true ;
20694: LD_ADDR_EXP 97
20698: PUSH
20699: LD_INT 1
20701: ST_TO_ADDR
// if p3 = 31 then
20702: LD_VAR 0 3
20706: PUSH
20707: LD_INT 31
20709: EQUAL
20710: IFFALSE 20720
// sFac := true ;
20712: LD_ADDR_EXP 98
20716: PUSH
20717: LD_INT 1
20719: ST_TO_ADDR
// if p3 = 32 then
20720: LD_VAR 0 3
20724: PUSH
20725: LD_INT 32
20727: EQUAL
20728: IFFALSE 20738
// sPower := true ;
20730: LD_ADDR_EXP 99
20734: PUSH
20735: LD_INT 1
20737: ST_TO_ADDR
// if p3 = 33 then
20738: LD_VAR 0 3
20742: PUSH
20743: LD_INT 33
20745: EQUAL
20746: IFFALSE 20756
// sRandom := true ;
20748: LD_ADDR_EXP 100
20752: PUSH
20753: LD_INT 1
20755: ST_TO_ADDR
// if p3 = 34 then
20756: LD_VAR 0 3
20760: PUSH
20761: LD_INT 34
20763: EQUAL
20764: IFFALSE 20774
// sShield := true ;
20766: LD_ADDR_EXP 101
20770: PUSH
20771: LD_INT 1
20773: ST_TO_ADDR
// if p3 = 35 then
20774: LD_VAR 0 3
20778: PUSH
20779: LD_INT 35
20781: EQUAL
20782: IFFALSE 20792
// sTime := true ;
20784: LD_ADDR_EXP 102
20788: PUSH
20789: LD_INT 1
20791: ST_TO_ADDR
// if p3 = 36 then
20792: LD_VAR 0 3
20796: PUSH
20797: LD_INT 36
20799: EQUAL
20800: IFFALSE 20810
// sTools := true ;
20802: LD_ADDR_EXP 103
20806: PUSH
20807: LD_INT 1
20809: ST_TO_ADDR
// if p3 = 101 then
20810: LD_VAR 0 3
20814: PUSH
20815: LD_INT 101
20817: EQUAL
20818: IFFALSE 20828
// sSold := true ;
20820: LD_ADDR_EXP 68
20824: PUSH
20825: LD_INT 1
20827: ST_TO_ADDR
// if p3 = 102 then
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 102
20835: EQUAL
20836: IFFALSE 20846
// sDiff := true ;
20838: LD_ADDR_EXP 69
20842: PUSH
20843: LD_INT 1
20845: ST_TO_ADDR
// if p3 = 103 then
20846: LD_VAR 0 3
20850: PUSH
20851: LD_INT 103
20853: EQUAL
20854: IFFALSE 20864
// sFog := true ;
20856: LD_ADDR_EXP 72
20860: PUSH
20861: LD_INT 1
20863: ST_TO_ADDR
// if p3 = 104 then
20864: LD_VAR 0 3
20868: PUSH
20869: LD_INT 104
20871: EQUAL
20872: IFFALSE 20882
// sReset := true ;
20874: LD_ADDR_EXP 73
20878: PUSH
20879: LD_INT 1
20881: ST_TO_ADDR
// if p3 = 105 then
20882: LD_VAR 0 3
20886: PUSH
20887: LD_INT 105
20889: EQUAL
20890: IFFALSE 20900
// sSun := true ;
20892: LD_ADDR_EXP 74
20896: PUSH
20897: LD_INT 1
20899: ST_TO_ADDR
// if p3 = 106 then
20900: LD_VAR 0 3
20904: PUSH
20905: LD_INT 106
20907: EQUAL
20908: IFFALSE 20918
// sTiger := true ;
20910: LD_ADDR_EXP 70
20914: PUSH
20915: LD_INT 1
20917: ST_TO_ADDR
// if p3 = 107 then
20918: LD_VAR 0 3
20922: PUSH
20923: LD_INT 107
20925: EQUAL
20926: IFFALSE 20936
// sBomb := true ;
20928: LD_ADDR_EXP 71
20932: PUSH
20933: LD_INT 1
20935: ST_TO_ADDR
// if p3 = 108 then
20936: LD_VAR 0 3
20940: PUSH
20941: LD_INT 108
20943: EQUAL
20944: IFFALSE 20954
// sWound := true ;
20946: LD_ADDR_EXP 79
20950: PUSH
20951: LD_INT 1
20953: ST_TO_ADDR
// if p3 = 109 then
20954: LD_VAR 0 3
20958: PUSH
20959: LD_INT 109
20961: EQUAL
20962: IFFALSE 20972
// sBetray := true ;
20964: LD_ADDR_EXP 83
20968: PUSH
20969: LD_INT 1
20971: ST_TO_ADDR
// if p3 = 110 then
20972: LD_VAR 0 3
20976: PUSH
20977: LD_INT 110
20979: EQUAL
20980: IFFALSE 20990
// sContamin := true ;
20982: LD_ADDR_EXP 84
20986: PUSH
20987: LD_INT 1
20989: ST_TO_ADDR
// if p3 = 111 then
20990: LD_VAR 0 3
20994: PUSH
20995: LD_INT 111
20997: EQUAL
20998: IFFALSE 21008
// sOil := true ;
21000: LD_ADDR_EXP 86
21004: PUSH
21005: LD_INT 1
21007: ST_TO_ADDR
// if p3 = 112 then
21008: LD_VAR 0 3
21012: PUSH
21013: LD_INT 112
21015: EQUAL
21016: IFFALSE 21026
// sStu := true ;
21018: LD_ADDR_EXP 90
21022: PUSH
21023: LD_INT 1
21025: ST_TO_ADDR
// if p3 = 113 then
21026: LD_VAR 0 3
21030: PUSH
21031: LD_INT 113
21033: EQUAL
21034: IFFALSE 21044
// sBazooka := true ;
21036: LD_ADDR_EXP 93
21040: PUSH
21041: LD_INT 1
21043: ST_TO_ADDR
// if p3 = 114 then
21044: LD_VAR 0 3
21048: PUSH
21049: LD_INT 114
21051: EQUAL
21052: IFFALSE 21062
// sMortar := true ;
21054: LD_ADDR_EXP 94
21058: PUSH
21059: LD_INT 1
21061: ST_TO_ADDR
// if p3 = 115 then
21062: LD_VAR 0 3
21066: PUSH
21067: LD_INT 115
21069: EQUAL
21070: IFFALSE 21080
// sRanger := true ;
21072: LD_ADDR_EXP 104
21076: PUSH
21077: LD_INT 1
21079: ST_TO_ADDR
// if p3 = 116 then
21080: LD_VAR 0 3
21084: PUSH
21085: LD_INT 116
21087: EQUAL
21088: IFFALSE 21098
// sComputer := true ;
21090: LD_ADDR_EXP 105
21094: PUSH
21095: LD_INT 1
21097: ST_TO_ADDR
// if p3 = 117 then
21098: LD_VAR 0 3
21102: PUSH
21103: LD_INT 117
21105: EQUAL
21106: IFFALSE 21116
// s30 := true ;
21108: LD_ADDR_EXP 106
21112: PUSH
21113: LD_INT 1
21115: ST_TO_ADDR
// if p3 = 118 then
21116: LD_VAR 0 3
21120: PUSH
21121: LD_INT 118
21123: EQUAL
21124: IFFALSE 21134
// s60 := true ;
21126: LD_ADDR_EXP 107
21130: PUSH
21131: LD_INT 1
21133: ST_TO_ADDR
// end ; if p2 = hack_mode then
21134: LD_VAR 0 2
21138: PUSH
21139: LD_INT 101
21141: EQUAL
21142: IFFALSE 21270
// begin case p3 of 1 :
21144: LD_VAR 0 3
21148: PUSH
21149: LD_INT 1
21151: DOUBLE
21152: EQUAL
21153: IFTRUE 21157
21155: GO 21164
21157: POP
// hHackUnlimitedResources ; 2 :
21158: CALL 33441 0 0
21162: GO 21270
21164: LD_INT 2
21166: DOUBLE
21167: EQUAL
21168: IFTRUE 21172
21170: GO 21179
21172: POP
// hHackSetLevel10 ; 3 :
21173: CALL 33574 0 0
21177: GO 21270
21179: LD_INT 3
21181: DOUBLE
21182: EQUAL
21183: IFTRUE 21187
21185: GO 21194
21187: POP
// hHackSetLevel10YourUnits ; 4 :
21188: CALL 33659 0 0
21192: GO 21270
21194: LD_INT 4
21196: DOUBLE
21197: EQUAL
21198: IFTRUE 21202
21200: GO 21209
21202: POP
// hHackInvincible ; 5 :
21203: CALL 34107 0 0
21207: GO 21270
21209: LD_INT 5
21211: DOUBLE
21212: EQUAL
21213: IFTRUE 21217
21215: GO 21224
21217: POP
// hHackInvisible ; 6 :
21218: CALL 34218 0 0
21222: GO 21270
21224: LD_INT 6
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21239
21232: POP
// hHackChangeYourSide ; 7 :
21233: CALL 34275 0 0
21237: GO 21270
21239: LD_INT 7
21241: DOUBLE
21242: EQUAL
21243: IFTRUE 21247
21245: GO 21254
21247: POP
// hHackChangeUnitSide ; 8 :
21248: CALL 34317 0 0
21252: GO 21270
21254: LD_INT 8
21256: DOUBLE
21257: EQUAL
21258: IFTRUE 21262
21260: GO 21269
21262: POP
// hHackFog ; end ;
21263: CALL 34418 0 0
21267: GO 21270
21269: POP
// end ; if p2 = game_save_mode then
21270: LD_VAR 0 2
21274: PUSH
21275: LD_INT 102
21277: EQUAL
21278: IFFALSE 21343
// begin if p3 = 1 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 1
21287: EQUAL
21288: IFFALSE 21300
// globalGameSaveCounter := p4 ;
21290: LD_ADDR_EXP 50
21294: PUSH
21295: LD_VAR 0 4
21299: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21300: LD_VAR 0 3
21304: PUSH
21305: LD_INT 2
21307: EQUAL
21308: PUSH
21309: LD_EXP 50
21313: AND
21314: IFFALSE 21333
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21316: LD_STRING setGameSaveCounter(
21318: PUSH
21319: LD_EXP 50
21323: STR
21324: PUSH
21325: LD_STRING )
21327: STR
21328: PPUSH
21329: CALL_OW 559
// display_strings := globalGameSaveCounter ;
21333: LD_ADDR_OWVAR 47
21337: PUSH
21338: LD_EXP 50
21342: ST_TO_ADDR
// end ; end ;
21343: LD_VAR 0 7
21347: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21348: GO 21350
21350: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21351: LD_STRING initStreamRollete();
21353: PPUSH
21354: CALL_OW 559
// InitStreamMode ;
21358: CALL 21370 0 0
// DefineStreamItems ( false ) ;
21362: LD_INT 0
21364: PPUSH
21365: CALL 21834 0 1
// end ;
21369: END
// function InitStreamMode ; begin
21370: LD_INT 0
21372: PPUSH
// streamModeActive := false ;
21373: LD_ADDR_EXP 51
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// normalCounter := 36 ;
21381: LD_ADDR_EXP 52
21385: PUSH
21386: LD_INT 36
21388: ST_TO_ADDR
// hardcoreCounter := 18 ;
21389: LD_ADDR_EXP 53
21393: PUSH
21394: LD_INT 18
21396: ST_TO_ADDR
// sRocket := false ;
21397: LD_ADDR_EXP 56
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sSpeed := false ;
21405: LD_ADDR_EXP 55
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sEngine := false ;
21413: LD_ADDR_EXP 57
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sSpec := false ;
21421: LD_ADDR_EXP 54
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sLevel := false ;
21429: LD_ADDR_EXP 58
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sArmoury := false ;
21437: LD_ADDR_EXP 59
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sRadar := false ;
21445: LD_ADDR_EXP 60
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sBunker := false ;
21453: LD_ADDR_EXP 61
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sHack := false ;
21461: LD_ADDR_EXP 62
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sFire := false ;
21469: LD_ADDR_EXP 63
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sRefresh := false ;
21477: LD_ADDR_EXP 64
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sExp := false ;
21485: LD_ADDR_EXP 65
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sDepot := false ;
21493: LD_ADDR_EXP 66
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sFlag := false ;
21501: LD_ADDR_EXP 67
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sKamikadze := false ;
21509: LD_ADDR_EXP 75
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sTroll := false ;
21517: LD_ADDR_EXP 76
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sSlow := false ;
21525: LD_ADDR_EXP 77
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sLack := false ;
21533: LD_ADDR_EXP 78
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sTank := false ;
21541: LD_ADDR_EXP 80
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sRemote := false ;
21549: LD_ADDR_EXP 81
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sPowell := false ;
21557: LD_ADDR_EXP 82
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sTeleport := false ;
21565: LD_ADDR_EXP 85
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sOilTower := false ;
21573: LD_ADDR_EXP 87
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sShovel := false ;
21581: LD_ADDR_EXP 88
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sSheik := false ;
21589: LD_ADDR_EXP 89
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// sEarthquake := false ;
21597: LD_ADDR_EXP 91
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// sAI := false ;
21605: LD_ADDR_EXP 92
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// sCargo := false ;
21613: LD_ADDR_EXP 95
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
// sDLaser := false ;
21621: LD_ADDR_EXP 96
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// sExchange := false ;
21629: LD_ADDR_EXP 97
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// sFac := false ;
21637: LD_ADDR_EXP 98
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// sPower := false ;
21645: LD_ADDR_EXP 99
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// sRandom := false ;
21653: LD_ADDR_EXP 100
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
// sShield := false ;
21661: LD_ADDR_EXP 101
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// sTime := false ;
21669: LD_ADDR_EXP 102
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// sTools := false ;
21677: LD_ADDR_EXP 103
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// sSold := false ;
21685: LD_ADDR_EXP 68
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// sDiff := false ;
21693: LD_ADDR_EXP 69
21697: PUSH
21698: LD_INT 0
21700: ST_TO_ADDR
// sFog := false ;
21701: LD_ADDR_EXP 72
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// sReset := false ;
21709: LD_ADDR_EXP 73
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// sSun := false ;
21717: LD_ADDR_EXP 74
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// sTiger := false ;
21725: LD_ADDR_EXP 70
21729: PUSH
21730: LD_INT 0
21732: ST_TO_ADDR
// sBomb := false ;
21733: LD_ADDR_EXP 71
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
// sWound := false ;
21741: LD_ADDR_EXP 79
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// sBetray := false ;
21749: LD_ADDR_EXP 83
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// sContamin := false ;
21757: LD_ADDR_EXP 84
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// sOil := false ;
21765: LD_ADDR_EXP 86
21769: PUSH
21770: LD_INT 0
21772: ST_TO_ADDR
// sStu := false ;
21773: LD_ADDR_EXP 90
21777: PUSH
21778: LD_INT 0
21780: ST_TO_ADDR
// sBazooka := false ;
21781: LD_ADDR_EXP 93
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// sMortar := false ;
21789: LD_ADDR_EXP 94
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// sRanger := false ;
21797: LD_ADDR_EXP 104
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// sComputer := false ;
21805: LD_ADDR_EXP 105
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// s30 := false ;
21813: LD_ADDR_EXP 106
21817: PUSH
21818: LD_INT 0
21820: ST_TO_ADDR
// s60 := false ;
21821: LD_ADDR_EXP 107
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// end ;
21829: LD_VAR 0 1
21833: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21834: LD_INT 0
21836: PPUSH
21837: PPUSH
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
21842: PPUSH
// result := [ ] ;
21843: LD_ADDR_VAR 0 2
21847: PUSH
21848: EMPTY
21849: ST_TO_ADDR
// if campaign_id = 1 then
21850: LD_OWVAR 69
21854: PUSH
21855: LD_INT 1
21857: EQUAL
21858: IFFALSE 25024
// begin case mission_number of 1 :
21860: LD_OWVAR 70
21864: PUSH
21865: LD_INT 1
21867: DOUBLE
21868: EQUAL
21869: IFTRUE 21873
21871: GO 21949
21873: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21874: LD_ADDR_VAR 0 2
21878: PUSH
21879: LD_INT 2
21881: PUSH
21882: LD_INT 4
21884: PUSH
21885: LD_INT 11
21887: PUSH
21888: LD_INT 12
21890: PUSH
21891: LD_INT 15
21893: PUSH
21894: LD_INT 16
21896: PUSH
21897: LD_INT 22
21899: PUSH
21900: LD_INT 23
21902: PUSH
21903: LD_INT 26
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 101
21919: PUSH
21920: LD_INT 102
21922: PUSH
21923: LD_INT 106
21925: PUSH
21926: LD_INT 116
21928: PUSH
21929: LD_INT 117
21931: PUSH
21932: LD_INT 118
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: ST_TO_ADDR
21947: GO 25022
21949: LD_INT 2
21951: DOUBLE
21952: EQUAL
21953: IFTRUE 21957
21955: GO 22041
21957: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: LD_INT 2
21965: PUSH
21966: LD_INT 4
21968: PUSH
21969: LD_INT 11
21971: PUSH
21972: LD_INT 12
21974: PUSH
21975: LD_INT 15
21977: PUSH
21978: LD_INT 16
21980: PUSH
21981: LD_INT 22
21983: PUSH
21984: LD_INT 23
21986: PUSH
21987: LD_INT 26
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 101
22003: PUSH
22004: LD_INT 102
22006: PUSH
22007: LD_INT 105
22009: PUSH
22010: LD_INT 106
22012: PUSH
22013: LD_INT 108
22015: PUSH
22016: LD_INT 116
22018: PUSH
22019: LD_INT 117
22021: PUSH
22022: LD_INT 118
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: ST_TO_ADDR
22039: GO 25022
22041: LD_INT 3
22043: DOUBLE
22044: EQUAL
22045: IFTRUE 22049
22047: GO 22137
22049: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22050: LD_ADDR_VAR 0 2
22054: PUSH
22055: LD_INT 2
22057: PUSH
22058: LD_INT 4
22060: PUSH
22061: LD_INT 5
22063: PUSH
22064: LD_INT 11
22066: PUSH
22067: LD_INT 12
22069: PUSH
22070: LD_INT 15
22072: PUSH
22073: LD_INT 16
22075: PUSH
22076: LD_INT 22
22078: PUSH
22079: LD_INT 26
22081: PUSH
22082: LD_INT 36
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 101
22099: PUSH
22100: LD_INT 102
22102: PUSH
22103: LD_INT 105
22105: PUSH
22106: LD_INT 106
22108: PUSH
22109: LD_INT 108
22111: PUSH
22112: LD_INT 116
22114: PUSH
22115: LD_INT 117
22117: PUSH
22118: LD_INT 118
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: ST_TO_ADDR
22135: GO 25022
22137: LD_INT 4
22139: DOUBLE
22140: EQUAL
22141: IFTRUE 22145
22143: GO 22241
22145: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22146: LD_ADDR_VAR 0 2
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 4
22156: PUSH
22157: LD_INT 5
22159: PUSH
22160: LD_INT 8
22162: PUSH
22163: LD_INT 11
22165: PUSH
22166: LD_INT 12
22168: PUSH
22169: LD_INT 15
22171: PUSH
22172: LD_INT 16
22174: PUSH
22175: LD_INT 22
22177: PUSH
22178: LD_INT 23
22180: PUSH
22181: LD_INT 26
22183: PUSH
22184: LD_INT 36
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 101
22203: PUSH
22204: LD_INT 102
22206: PUSH
22207: LD_INT 105
22209: PUSH
22210: LD_INT 106
22212: PUSH
22213: LD_INT 108
22215: PUSH
22216: LD_INT 116
22218: PUSH
22219: LD_INT 117
22221: PUSH
22222: LD_INT 118
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: ST_TO_ADDR
22239: GO 25022
22241: LD_INT 5
22243: DOUBLE
22244: EQUAL
22245: IFTRUE 22249
22247: GO 22361
22249: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22250: LD_ADDR_VAR 0 2
22254: PUSH
22255: LD_INT 2
22257: PUSH
22258: LD_INT 4
22260: PUSH
22261: LD_INT 5
22263: PUSH
22264: LD_INT 6
22266: PUSH
22267: LD_INT 8
22269: PUSH
22270: LD_INT 11
22272: PUSH
22273: LD_INT 12
22275: PUSH
22276: LD_INT 15
22278: PUSH
22279: LD_INT 16
22281: PUSH
22282: LD_INT 22
22284: PUSH
22285: LD_INT 23
22287: PUSH
22288: LD_INT 25
22290: PUSH
22291: LD_INT 26
22293: PUSH
22294: LD_INT 36
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 101
22315: PUSH
22316: LD_INT 102
22318: PUSH
22319: LD_INT 105
22321: PUSH
22322: LD_INT 106
22324: PUSH
22325: LD_INT 108
22327: PUSH
22328: LD_INT 109
22330: PUSH
22331: LD_INT 112
22333: PUSH
22334: LD_INT 116
22336: PUSH
22337: LD_INT 117
22339: PUSH
22340: LD_INT 118
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: ST_TO_ADDR
22359: GO 25022
22361: LD_INT 6
22363: DOUBLE
22364: EQUAL
22365: IFTRUE 22369
22367: GO 22501
22369: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22370: LD_ADDR_VAR 0 2
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 4
22380: PUSH
22381: LD_INT 5
22383: PUSH
22384: LD_INT 6
22386: PUSH
22387: LD_INT 8
22389: PUSH
22390: LD_INT 11
22392: PUSH
22393: LD_INT 12
22395: PUSH
22396: LD_INT 15
22398: PUSH
22399: LD_INT 16
22401: PUSH
22402: LD_INT 20
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 22
22410: PUSH
22411: LD_INT 23
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 26
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: LD_INT 31
22425: PUSH
22426: LD_INT 32
22428: PUSH
22429: LD_INT 36
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 101
22455: PUSH
22456: LD_INT 102
22458: PUSH
22459: LD_INT 105
22461: PUSH
22462: LD_INT 106
22464: PUSH
22465: LD_INT 108
22467: PUSH
22468: LD_INT 109
22470: PUSH
22471: LD_INT 112
22473: PUSH
22474: LD_INT 116
22476: PUSH
22477: LD_INT 117
22479: PUSH
22480: LD_INT 118
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: ST_TO_ADDR
22499: GO 25022
22501: LD_INT 7
22503: DOUBLE
22504: EQUAL
22505: IFTRUE 22509
22507: GO 22621
22509: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22510: LD_ADDR_VAR 0 2
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 4
22520: PUSH
22521: LD_INT 5
22523: PUSH
22524: LD_INT 7
22526: PUSH
22527: LD_INT 11
22529: PUSH
22530: LD_INT 12
22532: PUSH
22533: LD_INT 15
22535: PUSH
22536: LD_INT 16
22538: PUSH
22539: LD_INT 20
22541: PUSH
22542: LD_INT 21
22544: PUSH
22545: LD_INT 22
22547: PUSH
22548: LD_INT 23
22550: PUSH
22551: LD_INT 25
22553: PUSH
22554: LD_INT 26
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 101
22575: PUSH
22576: LD_INT 102
22578: PUSH
22579: LD_INT 103
22581: PUSH
22582: LD_INT 105
22584: PUSH
22585: LD_INT 106
22587: PUSH
22588: LD_INT 108
22590: PUSH
22591: LD_INT 112
22593: PUSH
22594: LD_INT 116
22596: PUSH
22597: LD_INT 117
22599: PUSH
22600: LD_INT 118
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: ST_TO_ADDR
22619: GO 25022
22621: LD_INT 8
22623: DOUBLE
22624: EQUAL
22625: IFTRUE 22629
22627: GO 22769
22629: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22630: LD_ADDR_VAR 0 2
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: LD_INT 4
22640: PUSH
22641: LD_INT 5
22643: PUSH
22644: LD_INT 6
22646: PUSH
22647: LD_INT 7
22649: PUSH
22650: LD_INT 8
22652: PUSH
22653: LD_INT 11
22655: PUSH
22656: LD_INT 12
22658: PUSH
22659: LD_INT 15
22661: PUSH
22662: LD_INT 16
22664: PUSH
22665: LD_INT 20
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 22
22673: PUSH
22674: LD_INT 23
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 26
22682: PUSH
22683: LD_INT 30
22685: PUSH
22686: LD_INT 31
22688: PUSH
22689: LD_INT 32
22691: PUSH
22692: LD_INT 36
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 101
22719: PUSH
22720: LD_INT 102
22722: PUSH
22723: LD_INT 103
22725: PUSH
22726: LD_INT 105
22728: PUSH
22729: LD_INT 106
22731: PUSH
22732: LD_INT 108
22734: PUSH
22735: LD_INT 109
22737: PUSH
22738: LD_INT 112
22740: PUSH
22741: LD_INT 116
22743: PUSH
22744: LD_INT 117
22746: PUSH
22747: LD_INT 118
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: ST_TO_ADDR
22767: GO 25022
22769: LD_INT 9
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 22925
22777: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22778: LD_ADDR_VAR 0 2
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: LD_INT 4
22788: PUSH
22789: LD_INT 5
22791: PUSH
22792: LD_INT 6
22794: PUSH
22795: LD_INT 7
22797: PUSH
22798: LD_INT 8
22800: PUSH
22801: LD_INT 11
22803: PUSH
22804: LD_INT 12
22806: PUSH
22807: LD_INT 15
22809: PUSH
22810: LD_INT 16
22812: PUSH
22813: LD_INT 20
22815: PUSH
22816: LD_INT 21
22818: PUSH
22819: LD_INT 22
22821: PUSH
22822: LD_INT 23
22824: PUSH
22825: LD_INT 25
22827: PUSH
22828: LD_INT 26
22830: PUSH
22831: LD_INT 28
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 31
22839: PUSH
22840: LD_INT 32
22842: PUSH
22843: LD_INT 36
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 101
22871: PUSH
22872: LD_INT 102
22874: PUSH
22875: LD_INT 103
22877: PUSH
22878: LD_INT 105
22880: PUSH
22881: LD_INT 106
22883: PUSH
22884: LD_INT 108
22886: PUSH
22887: LD_INT 109
22889: PUSH
22890: LD_INT 112
22892: PUSH
22893: LD_INT 114
22895: PUSH
22896: LD_INT 116
22898: PUSH
22899: LD_INT 117
22901: PUSH
22902: LD_INT 118
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: ST_TO_ADDR
22923: GO 25022
22925: LD_INT 10
22927: DOUBLE
22928: EQUAL
22929: IFTRUE 22933
22931: GO 23129
22933: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22934: LD_ADDR_VAR 0 2
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: LD_INT 4
22944: PUSH
22945: LD_INT 5
22947: PUSH
22948: LD_INT 6
22950: PUSH
22951: LD_INT 7
22953: PUSH
22954: LD_INT 8
22956: PUSH
22957: LD_INT 9
22959: PUSH
22960: LD_INT 10
22962: PUSH
22963: LD_INT 11
22965: PUSH
22966: LD_INT 12
22968: PUSH
22969: LD_INT 13
22971: PUSH
22972: LD_INT 14
22974: PUSH
22975: LD_INT 15
22977: PUSH
22978: LD_INT 16
22980: PUSH
22981: LD_INT 17
22983: PUSH
22984: LD_INT 18
22986: PUSH
22987: LD_INT 19
22989: PUSH
22990: LD_INT 20
22992: PUSH
22993: LD_INT 21
22995: PUSH
22996: LD_INT 22
22998: PUSH
22999: LD_INT 23
23001: PUSH
23002: LD_INT 24
23004: PUSH
23005: LD_INT 25
23007: PUSH
23008: LD_INT 26
23010: PUSH
23011: LD_INT 28
23013: PUSH
23014: LD_INT 30
23016: PUSH
23017: LD_INT 31
23019: PUSH
23020: LD_INT 32
23022: PUSH
23023: LD_INT 36
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 101
23059: PUSH
23060: LD_INT 102
23062: PUSH
23063: LD_INT 103
23065: PUSH
23066: LD_INT 104
23068: PUSH
23069: LD_INT 105
23071: PUSH
23072: LD_INT 106
23074: PUSH
23075: LD_INT 107
23077: PUSH
23078: LD_INT 108
23080: PUSH
23081: LD_INT 109
23083: PUSH
23084: LD_INT 110
23086: PUSH
23087: LD_INT 111
23089: PUSH
23090: LD_INT 112
23092: PUSH
23093: LD_INT 114
23095: PUSH
23096: LD_INT 116
23098: PUSH
23099: LD_INT 117
23101: PUSH
23102: LD_INT 118
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: ST_TO_ADDR
23127: GO 25022
23129: LD_INT 11
23131: DOUBLE
23132: EQUAL
23133: IFTRUE 23137
23135: GO 23341
23137: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23138: LD_ADDR_VAR 0 2
23142: PUSH
23143: LD_INT 2
23145: PUSH
23146: LD_INT 3
23148: PUSH
23149: LD_INT 4
23151: PUSH
23152: LD_INT 5
23154: PUSH
23155: LD_INT 6
23157: PUSH
23158: LD_INT 7
23160: PUSH
23161: LD_INT 8
23163: PUSH
23164: LD_INT 9
23166: PUSH
23167: LD_INT 10
23169: PUSH
23170: LD_INT 11
23172: PUSH
23173: LD_INT 12
23175: PUSH
23176: LD_INT 13
23178: PUSH
23179: LD_INT 14
23181: PUSH
23182: LD_INT 15
23184: PUSH
23185: LD_INT 16
23187: PUSH
23188: LD_INT 17
23190: PUSH
23191: LD_INT 18
23193: PUSH
23194: LD_INT 19
23196: PUSH
23197: LD_INT 20
23199: PUSH
23200: LD_INT 21
23202: PUSH
23203: LD_INT 22
23205: PUSH
23206: LD_INT 23
23208: PUSH
23209: LD_INT 24
23211: PUSH
23212: LD_INT 25
23214: PUSH
23215: LD_INT 26
23217: PUSH
23218: LD_INT 28
23220: PUSH
23221: LD_INT 30
23223: PUSH
23224: LD_INT 31
23226: PUSH
23227: LD_INT 32
23229: PUSH
23230: LD_INT 34
23232: PUSH
23233: LD_INT 36
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 101
23271: PUSH
23272: LD_INT 102
23274: PUSH
23275: LD_INT 103
23277: PUSH
23278: LD_INT 104
23280: PUSH
23281: LD_INT 105
23283: PUSH
23284: LD_INT 106
23286: PUSH
23287: LD_INT 107
23289: PUSH
23290: LD_INT 108
23292: PUSH
23293: LD_INT 109
23295: PUSH
23296: LD_INT 110
23298: PUSH
23299: LD_INT 111
23301: PUSH
23302: LD_INT 112
23304: PUSH
23305: LD_INT 114
23307: PUSH
23308: LD_INT 116
23310: PUSH
23311: LD_INT 117
23313: PUSH
23314: LD_INT 118
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: ST_TO_ADDR
23339: GO 25022
23341: LD_INT 12
23343: DOUBLE
23344: EQUAL
23345: IFTRUE 23349
23347: GO 23569
23349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23350: LD_ADDR_VAR 0 2
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 3
23363: PUSH
23364: LD_INT 4
23366: PUSH
23367: LD_INT 5
23369: PUSH
23370: LD_INT 6
23372: PUSH
23373: LD_INT 7
23375: PUSH
23376: LD_INT 8
23378: PUSH
23379: LD_INT 9
23381: PUSH
23382: LD_INT 10
23384: PUSH
23385: LD_INT 11
23387: PUSH
23388: LD_INT 12
23390: PUSH
23391: LD_INT 13
23393: PUSH
23394: LD_INT 14
23396: PUSH
23397: LD_INT 15
23399: PUSH
23400: LD_INT 16
23402: PUSH
23403: LD_INT 17
23405: PUSH
23406: LD_INT 18
23408: PUSH
23409: LD_INT 19
23411: PUSH
23412: LD_INT 20
23414: PUSH
23415: LD_INT 21
23417: PUSH
23418: LD_INT 22
23420: PUSH
23421: LD_INT 23
23423: PUSH
23424: LD_INT 24
23426: PUSH
23427: LD_INT 25
23429: PUSH
23430: LD_INT 26
23432: PUSH
23433: LD_INT 27
23435: PUSH
23436: LD_INT 28
23438: PUSH
23439: LD_INT 30
23441: PUSH
23442: LD_INT 31
23444: PUSH
23445: LD_INT 32
23447: PUSH
23448: LD_INT 33
23450: PUSH
23451: LD_INT 34
23453: PUSH
23454: LD_INT 36
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 101
23495: PUSH
23496: LD_INT 102
23498: PUSH
23499: LD_INT 103
23501: PUSH
23502: LD_INT 104
23504: PUSH
23505: LD_INT 105
23507: PUSH
23508: LD_INT 106
23510: PUSH
23511: LD_INT 107
23513: PUSH
23514: LD_INT 108
23516: PUSH
23517: LD_INT 109
23519: PUSH
23520: LD_INT 110
23522: PUSH
23523: LD_INT 111
23525: PUSH
23526: LD_INT 112
23528: PUSH
23529: LD_INT 113
23531: PUSH
23532: LD_INT 114
23534: PUSH
23535: LD_INT 116
23537: PUSH
23538: LD_INT 117
23540: PUSH
23541: LD_INT 118
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: ST_TO_ADDR
23567: GO 25022
23569: LD_INT 13
23571: DOUBLE
23572: EQUAL
23573: IFTRUE 23577
23575: GO 23785
23577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23578: LD_ADDR_VAR 0 2
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: LD_INT 4
23594: PUSH
23595: LD_INT 5
23597: PUSH
23598: LD_INT 8
23600: PUSH
23601: LD_INT 9
23603: PUSH
23604: LD_INT 10
23606: PUSH
23607: LD_INT 11
23609: PUSH
23610: LD_INT 12
23612: PUSH
23613: LD_INT 14
23615: PUSH
23616: LD_INT 15
23618: PUSH
23619: LD_INT 16
23621: PUSH
23622: LD_INT 17
23624: PUSH
23625: LD_INT 18
23627: PUSH
23628: LD_INT 19
23630: PUSH
23631: LD_INT 20
23633: PUSH
23634: LD_INT 21
23636: PUSH
23637: LD_INT 22
23639: PUSH
23640: LD_INT 23
23642: PUSH
23643: LD_INT 24
23645: PUSH
23646: LD_INT 25
23648: PUSH
23649: LD_INT 26
23651: PUSH
23652: LD_INT 27
23654: PUSH
23655: LD_INT 28
23657: PUSH
23658: LD_INT 30
23660: PUSH
23661: LD_INT 31
23663: PUSH
23664: LD_INT 32
23666: PUSH
23667: LD_INT 33
23669: PUSH
23670: LD_INT 34
23672: PUSH
23673: LD_INT 36
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 101
23711: PUSH
23712: LD_INT 102
23714: PUSH
23715: LD_INT 103
23717: PUSH
23718: LD_INT 104
23720: PUSH
23721: LD_INT 105
23723: PUSH
23724: LD_INT 106
23726: PUSH
23727: LD_INT 107
23729: PUSH
23730: LD_INT 108
23732: PUSH
23733: LD_INT 109
23735: PUSH
23736: LD_INT 110
23738: PUSH
23739: LD_INT 111
23741: PUSH
23742: LD_INT 112
23744: PUSH
23745: LD_INT 113
23747: PUSH
23748: LD_INT 114
23750: PUSH
23751: LD_INT 116
23753: PUSH
23754: LD_INT 117
23756: PUSH
23757: LD_INT 118
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: ST_TO_ADDR
23783: GO 25022
23785: LD_INT 14
23787: DOUBLE
23788: EQUAL
23789: IFTRUE 23793
23791: GO 24017
23793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: LD_INT 3
23807: PUSH
23808: LD_INT 4
23810: PUSH
23811: LD_INT 5
23813: PUSH
23814: LD_INT 6
23816: PUSH
23817: LD_INT 7
23819: PUSH
23820: LD_INT 8
23822: PUSH
23823: LD_INT 9
23825: PUSH
23826: LD_INT 10
23828: PUSH
23829: LD_INT 11
23831: PUSH
23832: LD_INT 12
23834: PUSH
23835: LD_INT 13
23837: PUSH
23838: LD_INT 14
23840: PUSH
23841: LD_INT 15
23843: PUSH
23844: LD_INT 16
23846: PUSH
23847: LD_INT 17
23849: PUSH
23850: LD_INT 18
23852: PUSH
23853: LD_INT 19
23855: PUSH
23856: LD_INT 20
23858: PUSH
23859: LD_INT 21
23861: PUSH
23862: LD_INT 22
23864: PUSH
23865: LD_INT 23
23867: PUSH
23868: LD_INT 24
23870: PUSH
23871: LD_INT 25
23873: PUSH
23874: LD_INT 26
23876: PUSH
23877: LD_INT 27
23879: PUSH
23880: LD_INT 28
23882: PUSH
23883: LD_INT 29
23885: PUSH
23886: LD_INT 30
23888: PUSH
23889: LD_INT 31
23891: PUSH
23892: LD_INT 32
23894: PUSH
23895: LD_INT 33
23897: PUSH
23898: LD_INT 34
23900: PUSH
23901: LD_INT 36
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 101
23943: PUSH
23944: LD_INT 102
23946: PUSH
23947: LD_INT 103
23949: PUSH
23950: LD_INT 104
23952: PUSH
23953: LD_INT 105
23955: PUSH
23956: LD_INT 106
23958: PUSH
23959: LD_INT 107
23961: PUSH
23962: LD_INT 108
23964: PUSH
23965: LD_INT 109
23967: PUSH
23968: LD_INT 110
23970: PUSH
23971: LD_INT 111
23973: PUSH
23974: LD_INT 112
23976: PUSH
23977: LD_INT 113
23979: PUSH
23980: LD_INT 114
23982: PUSH
23983: LD_INT 116
23985: PUSH
23986: LD_INT 117
23988: PUSH
23989: LD_INT 118
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: ST_TO_ADDR
24015: GO 25022
24017: LD_INT 15
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24249
24025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24026: LD_ADDR_VAR 0 2
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: LD_INT 4
24042: PUSH
24043: LD_INT 5
24045: PUSH
24046: LD_INT 6
24048: PUSH
24049: LD_INT 7
24051: PUSH
24052: LD_INT 8
24054: PUSH
24055: LD_INT 9
24057: PUSH
24058: LD_INT 10
24060: PUSH
24061: LD_INT 11
24063: PUSH
24064: LD_INT 12
24066: PUSH
24067: LD_INT 13
24069: PUSH
24070: LD_INT 14
24072: PUSH
24073: LD_INT 15
24075: PUSH
24076: LD_INT 16
24078: PUSH
24079: LD_INT 17
24081: PUSH
24082: LD_INT 18
24084: PUSH
24085: LD_INT 19
24087: PUSH
24088: LD_INT 20
24090: PUSH
24091: LD_INT 21
24093: PUSH
24094: LD_INT 22
24096: PUSH
24097: LD_INT 23
24099: PUSH
24100: LD_INT 24
24102: PUSH
24103: LD_INT 25
24105: PUSH
24106: LD_INT 26
24108: PUSH
24109: LD_INT 27
24111: PUSH
24112: LD_INT 28
24114: PUSH
24115: LD_INT 29
24117: PUSH
24118: LD_INT 30
24120: PUSH
24121: LD_INT 31
24123: PUSH
24124: LD_INT 32
24126: PUSH
24127: LD_INT 33
24129: PUSH
24130: LD_INT 34
24132: PUSH
24133: LD_INT 36
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 101
24175: PUSH
24176: LD_INT 102
24178: PUSH
24179: LD_INT 103
24181: PUSH
24182: LD_INT 104
24184: PUSH
24185: LD_INT 105
24187: PUSH
24188: LD_INT 106
24190: PUSH
24191: LD_INT 107
24193: PUSH
24194: LD_INT 108
24196: PUSH
24197: LD_INT 109
24199: PUSH
24200: LD_INT 110
24202: PUSH
24203: LD_INT 111
24205: PUSH
24206: LD_INT 112
24208: PUSH
24209: LD_INT 113
24211: PUSH
24212: LD_INT 114
24214: PUSH
24215: LD_INT 116
24217: PUSH
24218: LD_INT 117
24220: PUSH
24221: LD_INT 118
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: ST_TO_ADDR
24247: GO 25022
24249: LD_INT 16
24251: DOUBLE
24252: EQUAL
24253: IFTRUE 24257
24255: GO 24393
24257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24258: LD_ADDR_VAR 0 2
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: LD_INT 7
24274: PUSH
24275: LD_INT 11
24277: PUSH
24278: LD_INT 12
24280: PUSH
24281: LD_INT 15
24283: PUSH
24284: LD_INT 16
24286: PUSH
24287: LD_INT 20
24289: PUSH
24290: LD_INT 21
24292: PUSH
24293: LD_INT 22
24295: PUSH
24296: LD_INT 23
24298: PUSH
24299: LD_INT 25
24301: PUSH
24302: LD_INT 26
24304: PUSH
24305: LD_INT 30
24307: PUSH
24308: LD_INT 31
24310: PUSH
24311: LD_INT 32
24313: PUSH
24314: LD_INT 33
24316: PUSH
24317: LD_INT 34
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 101
24343: PUSH
24344: LD_INT 102
24346: PUSH
24347: LD_INT 103
24349: PUSH
24350: LD_INT 106
24352: PUSH
24353: LD_INT 108
24355: PUSH
24356: LD_INT 112
24358: PUSH
24359: LD_INT 113
24361: PUSH
24362: LD_INT 114
24364: PUSH
24365: LD_INT 116
24367: PUSH
24368: LD_INT 117
24370: PUSH
24371: LD_INT 118
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: ST_TO_ADDR
24391: GO 25022
24393: LD_INT 17
24395: DOUBLE
24396: EQUAL
24397: IFTRUE 24401
24399: GO 24625
24401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24402: LD_ADDR_VAR 0 2
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: LD_INT 2
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: LD_INT 4
24418: PUSH
24419: LD_INT 5
24421: PUSH
24422: LD_INT 6
24424: PUSH
24425: LD_INT 7
24427: PUSH
24428: LD_INT 8
24430: PUSH
24431: LD_INT 9
24433: PUSH
24434: LD_INT 10
24436: PUSH
24437: LD_INT 11
24439: PUSH
24440: LD_INT 12
24442: PUSH
24443: LD_INT 13
24445: PUSH
24446: LD_INT 14
24448: PUSH
24449: LD_INT 15
24451: PUSH
24452: LD_INT 16
24454: PUSH
24455: LD_INT 17
24457: PUSH
24458: LD_INT 18
24460: PUSH
24461: LD_INT 19
24463: PUSH
24464: LD_INT 20
24466: PUSH
24467: LD_INT 21
24469: PUSH
24470: LD_INT 22
24472: PUSH
24473: LD_INT 23
24475: PUSH
24476: LD_INT 24
24478: PUSH
24479: LD_INT 25
24481: PUSH
24482: LD_INT 26
24484: PUSH
24485: LD_INT 27
24487: PUSH
24488: LD_INT 28
24490: PUSH
24491: LD_INT 29
24493: PUSH
24494: LD_INT 30
24496: PUSH
24497: LD_INT 31
24499: PUSH
24500: LD_INT 32
24502: PUSH
24503: LD_INT 33
24505: PUSH
24506: LD_INT 34
24508: PUSH
24509: LD_INT 36
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 101
24551: PUSH
24552: LD_INT 102
24554: PUSH
24555: LD_INT 103
24557: PUSH
24558: LD_INT 104
24560: PUSH
24561: LD_INT 105
24563: PUSH
24564: LD_INT 106
24566: PUSH
24567: LD_INT 107
24569: PUSH
24570: LD_INT 108
24572: PUSH
24573: LD_INT 109
24575: PUSH
24576: LD_INT 110
24578: PUSH
24579: LD_INT 111
24581: PUSH
24582: LD_INT 112
24584: PUSH
24585: LD_INT 113
24587: PUSH
24588: LD_INT 114
24590: PUSH
24591: LD_INT 116
24593: PUSH
24594: LD_INT 117
24596: PUSH
24597: LD_INT 118
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: ST_TO_ADDR
24623: GO 25022
24625: LD_INT 18
24627: DOUBLE
24628: EQUAL
24629: IFTRUE 24633
24631: GO 24781
24633: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24634: LD_ADDR_VAR 0 2
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: LD_INT 4
24644: PUSH
24645: LD_INT 5
24647: PUSH
24648: LD_INT 7
24650: PUSH
24651: LD_INT 11
24653: PUSH
24654: LD_INT 12
24656: PUSH
24657: LD_INT 15
24659: PUSH
24660: LD_INT 16
24662: PUSH
24663: LD_INT 20
24665: PUSH
24666: LD_INT 21
24668: PUSH
24669: LD_INT 22
24671: PUSH
24672: LD_INT 23
24674: PUSH
24675: LD_INT 25
24677: PUSH
24678: LD_INT 26
24680: PUSH
24681: LD_INT 30
24683: PUSH
24684: LD_INT 31
24686: PUSH
24687: LD_INT 32
24689: PUSH
24690: LD_INT 33
24692: PUSH
24693: LD_INT 34
24695: PUSH
24696: LD_INT 35
24698: PUSH
24699: LD_INT 36
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 101
24727: PUSH
24728: LD_INT 102
24730: PUSH
24731: LD_INT 103
24733: PUSH
24734: LD_INT 106
24736: PUSH
24737: LD_INT 108
24739: PUSH
24740: LD_INT 112
24742: PUSH
24743: LD_INT 113
24745: PUSH
24746: LD_INT 114
24748: PUSH
24749: LD_INT 115
24751: PUSH
24752: LD_INT 116
24754: PUSH
24755: LD_INT 117
24757: PUSH
24758: LD_INT 118
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: ST_TO_ADDR
24779: GO 25022
24781: LD_INT 19
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 25021
24789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: LD_INT 3
24803: PUSH
24804: LD_INT 4
24806: PUSH
24807: LD_INT 5
24809: PUSH
24810: LD_INT 6
24812: PUSH
24813: LD_INT 7
24815: PUSH
24816: LD_INT 8
24818: PUSH
24819: LD_INT 9
24821: PUSH
24822: LD_INT 10
24824: PUSH
24825: LD_INT 11
24827: PUSH
24828: LD_INT 12
24830: PUSH
24831: LD_INT 13
24833: PUSH
24834: LD_INT 14
24836: PUSH
24837: LD_INT 15
24839: PUSH
24840: LD_INT 16
24842: PUSH
24843: LD_INT 17
24845: PUSH
24846: LD_INT 18
24848: PUSH
24849: LD_INT 19
24851: PUSH
24852: LD_INT 20
24854: PUSH
24855: LD_INT 21
24857: PUSH
24858: LD_INT 22
24860: PUSH
24861: LD_INT 23
24863: PUSH
24864: LD_INT 24
24866: PUSH
24867: LD_INT 25
24869: PUSH
24870: LD_INT 26
24872: PUSH
24873: LD_INT 27
24875: PUSH
24876: LD_INT 28
24878: PUSH
24879: LD_INT 29
24881: PUSH
24882: LD_INT 30
24884: PUSH
24885: LD_INT 31
24887: PUSH
24888: LD_INT 32
24890: PUSH
24891: LD_INT 33
24893: PUSH
24894: LD_INT 34
24896: PUSH
24897: LD_INT 35
24899: PUSH
24900: LD_INT 36
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 101
24943: PUSH
24944: LD_INT 102
24946: PUSH
24947: LD_INT 103
24949: PUSH
24950: LD_INT 104
24952: PUSH
24953: LD_INT 105
24955: PUSH
24956: LD_INT 106
24958: PUSH
24959: LD_INT 107
24961: PUSH
24962: LD_INT 108
24964: PUSH
24965: LD_INT 109
24967: PUSH
24968: LD_INT 110
24970: PUSH
24971: LD_INT 111
24973: PUSH
24974: LD_INT 112
24976: PUSH
24977: LD_INT 113
24979: PUSH
24980: LD_INT 114
24982: PUSH
24983: LD_INT 115
24985: PUSH
24986: LD_INT 116
24988: PUSH
24989: LD_INT 117
24991: PUSH
24992: LD_INT 118
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: ST_TO_ADDR
25019: GO 25022
25021: POP
// end else
25022: GO 25253
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25024: LD_ADDR_VAR 0 2
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: LD_INT 3
25037: PUSH
25038: LD_INT 4
25040: PUSH
25041: LD_INT 5
25043: PUSH
25044: LD_INT 6
25046: PUSH
25047: LD_INT 7
25049: PUSH
25050: LD_INT 8
25052: PUSH
25053: LD_INT 9
25055: PUSH
25056: LD_INT 10
25058: PUSH
25059: LD_INT 11
25061: PUSH
25062: LD_INT 12
25064: PUSH
25065: LD_INT 13
25067: PUSH
25068: LD_INT 14
25070: PUSH
25071: LD_INT 15
25073: PUSH
25074: LD_INT 16
25076: PUSH
25077: LD_INT 17
25079: PUSH
25080: LD_INT 18
25082: PUSH
25083: LD_INT 19
25085: PUSH
25086: LD_INT 20
25088: PUSH
25089: LD_INT 21
25091: PUSH
25092: LD_INT 22
25094: PUSH
25095: LD_INT 23
25097: PUSH
25098: LD_INT 24
25100: PUSH
25101: LD_INT 25
25103: PUSH
25104: LD_INT 26
25106: PUSH
25107: LD_INT 27
25109: PUSH
25110: LD_INT 28
25112: PUSH
25113: LD_INT 29
25115: PUSH
25116: LD_INT 30
25118: PUSH
25119: LD_INT 31
25121: PUSH
25122: LD_INT 32
25124: PUSH
25125: LD_INT 33
25127: PUSH
25128: LD_INT 34
25130: PUSH
25131: LD_INT 35
25133: PUSH
25134: LD_INT 36
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 101
25177: PUSH
25178: LD_INT 102
25180: PUSH
25181: LD_INT 103
25183: PUSH
25184: LD_INT 104
25186: PUSH
25187: LD_INT 105
25189: PUSH
25190: LD_INT 106
25192: PUSH
25193: LD_INT 107
25195: PUSH
25196: LD_INT 108
25198: PUSH
25199: LD_INT 109
25201: PUSH
25202: LD_INT 110
25204: PUSH
25205: LD_INT 111
25207: PUSH
25208: LD_INT 112
25210: PUSH
25211: LD_INT 113
25213: PUSH
25214: LD_INT 114
25216: PUSH
25217: LD_INT 115
25219: PUSH
25220: LD_INT 116
25222: PUSH
25223: LD_INT 117
25225: PUSH
25226: LD_INT 118
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: ST_TO_ADDR
// if result then
25253: LD_VAR 0 2
25257: IFFALSE 26043
// begin normal :=  ;
25259: LD_ADDR_VAR 0 5
25263: PUSH
25264: LD_STRING 
25266: ST_TO_ADDR
// hardcore :=  ;
25267: LD_ADDR_VAR 0 6
25271: PUSH
25272: LD_STRING 
25274: ST_TO_ADDR
// active :=  ;
25275: LD_ADDR_VAR 0 7
25279: PUSH
25280: LD_STRING 
25282: ST_TO_ADDR
// for i = 1 to normalCounter do
25283: LD_ADDR_VAR 0 8
25287: PUSH
25288: DOUBLE
25289: LD_INT 1
25291: DEC
25292: ST_TO_ADDR
25293: LD_EXP 52
25297: PUSH
25298: FOR_TO
25299: IFFALSE 25400
// begin tmp := 0 ;
25301: LD_ADDR_VAR 0 3
25305: PUSH
25306: LD_STRING 0
25308: ST_TO_ADDR
// if result [ 1 ] then
25309: LD_VAR 0 2
25313: PUSH
25314: LD_INT 1
25316: ARRAY
25317: IFFALSE 25382
// if result [ 1 ] [ 1 ] = i then
25319: LD_VAR 0 2
25323: PUSH
25324: LD_INT 1
25326: ARRAY
25327: PUSH
25328: LD_INT 1
25330: ARRAY
25331: PUSH
25332: LD_VAR 0 8
25336: EQUAL
25337: IFFALSE 25382
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25339: LD_ADDR_VAR 0 2
25343: PUSH
25344: LD_VAR 0 2
25348: PPUSH
25349: LD_INT 1
25351: PPUSH
25352: LD_VAR 0 2
25356: PUSH
25357: LD_INT 1
25359: ARRAY
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 3
25368: PPUSH
25369: CALL_OW 1
25373: ST_TO_ADDR
// tmp := 1 ;
25374: LD_ADDR_VAR 0 3
25378: PUSH
25379: LD_STRING 1
25381: ST_TO_ADDR
// end ; normal := normal & tmp ;
25382: LD_ADDR_VAR 0 5
25386: PUSH
25387: LD_VAR 0 5
25391: PUSH
25392: LD_VAR 0 3
25396: STR
25397: ST_TO_ADDR
// end ;
25398: GO 25298
25400: POP
25401: POP
// for i = 1 to hardcoreCounter do
25402: LD_ADDR_VAR 0 8
25406: PUSH
25407: DOUBLE
25408: LD_INT 1
25410: DEC
25411: ST_TO_ADDR
25412: LD_EXP 53
25416: PUSH
25417: FOR_TO
25418: IFFALSE 25523
// begin tmp := 0 ;
25420: LD_ADDR_VAR 0 3
25424: PUSH
25425: LD_STRING 0
25427: ST_TO_ADDR
// if result [ 2 ] then
25428: LD_VAR 0 2
25432: PUSH
25433: LD_INT 2
25435: ARRAY
25436: IFFALSE 25505
// if result [ 2 ] [ 1 ] = 100 + i then
25438: LD_VAR 0 2
25442: PUSH
25443: LD_INT 2
25445: ARRAY
25446: PUSH
25447: LD_INT 1
25449: ARRAY
25450: PUSH
25451: LD_INT 100
25453: PUSH
25454: LD_VAR 0 8
25458: PLUS
25459: EQUAL
25460: IFFALSE 25505
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25462: LD_ADDR_VAR 0 2
25466: PUSH
25467: LD_VAR 0 2
25471: PPUSH
25472: LD_INT 2
25474: PPUSH
25475: LD_VAR 0 2
25479: PUSH
25480: LD_INT 2
25482: ARRAY
25483: PPUSH
25484: LD_INT 1
25486: PPUSH
25487: CALL_OW 3
25491: PPUSH
25492: CALL_OW 1
25496: ST_TO_ADDR
// tmp := 1 ;
25497: LD_ADDR_VAR 0 3
25501: PUSH
25502: LD_STRING 1
25504: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25505: LD_ADDR_VAR 0 6
25509: PUSH
25510: LD_VAR 0 6
25514: PUSH
25515: LD_VAR 0 3
25519: STR
25520: ST_TO_ADDR
// end ;
25521: GO 25417
25523: POP
25524: POP
// if isGameLoad then
25525: LD_VAR 0 1
25529: IFFALSE 26004
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25531: LD_ADDR_VAR 0 4
25535: PUSH
25536: LD_EXP 56
25540: PUSH
25541: LD_EXP 55
25545: PUSH
25546: LD_EXP 57
25550: PUSH
25551: LD_EXP 54
25555: PUSH
25556: LD_EXP 58
25560: PUSH
25561: LD_EXP 59
25565: PUSH
25566: LD_EXP 60
25570: PUSH
25571: LD_EXP 61
25575: PUSH
25576: LD_EXP 62
25580: PUSH
25581: LD_EXP 63
25585: PUSH
25586: LD_EXP 64
25590: PUSH
25591: LD_EXP 65
25595: PUSH
25596: LD_EXP 66
25600: PUSH
25601: LD_EXP 67
25605: PUSH
25606: LD_EXP 75
25610: PUSH
25611: LD_EXP 76
25615: PUSH
25616: LD_EXP 77
25620: PUSH
25621: LD_EXP 78
25625: PUSH
25626: LD_EXP 80
25630: PUSH
25631: LD_EXP 81
25635: PUSH
25636: LD_EXP 82
25640: PUSH
25641: LD_EXP 85
25645: PUSH
25646: LD_EXP 87
25650: PUSH
25651: LD_EXP 88
25655: PUSH
25656: LD_EXP 89
25660: PUSH
25661: LD_EXP 91
25665: PUSH
25666: LD_EXP 92
25670: PUSH
25671: LD_EXP 95
25675: PUSH
25676: LD_EXP 96
25680: PUSH
25681: LD_EXP 97
25685: PUSH
25686: LD_EXP 98
25690: PUSH
25691: LD_EXP 99
25695: PUSH
25696: LD_EXP 100
25700: PUSH
25701: LD_EXP 101
25705: PUSH
25706: LD_EXP 102
25710: PUSH
25711: LD_EXP 103
25715: PUSH
25716: LD_EXP 68
25720: PUSH
25721: LD_EXP 69
25725: PUSH
25726: LD_EXP 72
25730: PUSH
25731: LD_EXP 73
25735: PUSH
25736: LD_EXP 74
25740: PUSH
25741: LD_EXP 70
25745: PUSH
25746: LD_EXP 71
25750: PUSH
25751: LD_EXP 79
25755: PUSH
25756: LD_EXP 83
25760: PUSH
25761: LD_EXP 84
25765: PUSH
25766: LD_EXP 86
25770: PUSH
25771: LD_EXP 90
25775: PUSH
25776: LD_EXP 93
25780: PUSH
25781: LD_EXP 94
25785: PUSH
25786: LD_EXP 104
25790: PUSH
25791: LD_EXP 105
25795: PUSH
25796: LD_EXP 106
25800: PUSH
25801: LD_EXP 107
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
// tmp :=  ;
25862: LD_ADDR_VAR 0 3
25866: PUSH
25867: LD_STRING 
25869: ST_TO_ADDR
// for i = 1 to normalCounter do
25870: LD_ADDR_VAR 0 8
25874: PUSH
25875: DOUBLE
25876: LD_INT 1
25878: DEC
25879: ST_TO_ADDR
25880: LD_EXP 52
25884: PUSH
25885: FOR_TO
25886: IFFALSE 25922
// begin if flags [ i ] then
25888: LD_VAR 0 4
25892: PUSH
25893: LD_VAR 0 8
25897: ARRAY
25898: IFFALSE 25920
// tmp := tmp & i & ; ;
25900: LD_ADDR_VAR 0 3
25904: PUSH
25905: LD_VAR 0 3
25909: PUSH
25910: LD_VAR 0 8
25914: STR
25915: PUSH
25916: LD_STRING ;
25918: STR
25919: ST_TO_ADDR
// end ;
25920: GO 25885
25922: POP
25923: POP
// for i = 1 to hardcoreCounter do
25924: LD_ADDR_VAR 0 8
25928: PUSH
25929: DOUBLE
25930: LD_INT 1
25932: DEC
25933: ST_TO_ADDR
25934: LD_EXP 53
25938: PUSH
25939: FOR_TO
25940: IFFALSE 25986
// begin if flags [ normalCounter + i ] then
25942: LD_VAR 0 4
25946: PUSH
25947: LD_EXP 52
25951: PUSH
25952: LD_VAR 0 8
25956: PLUS
25957: ARRAY
25958: IFFALSE 25984
// tmp := tmp & ( 100 + i ) & ; ;
25960: LD_ADDR_VAR 0 3
25964: PUSH
25965: LD_VAR 0 3
25969: PUSH
25970: LD_INT 100
25972: PUSH
25973: LD_VAR 0 8
25977: PLUS
25978: STR
25979: PUSH
25980: LD_STRING ;
25982: STR
25983: ST_TO_ADDR
// end ;
25984: GO 25939
25986: POP
25987: POP
// if tmp then
25988: LD_VAR 0 3
25992: IFFALSE 26004
// active := tmp ;
25994: LD_ADDR_VAR 0 7
25998: PUSH
25999: LD_VAR 0 3
26003: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26004: LD_STRING getStreamItemsFromMission("
26006: PUSH
26007: LD_VAR 0 5
26011: STR
26012: PUSH
26013: LD_STRING ","
26015: STR
26016: PUSH
26017: LD_VAR 0 6
26021: STR
26022: PUSH
26023: LD_STRING ","
26025: STR
26026: PUSH
26027: LD_VAR 0 7
26031: STR
26032: PUSH
26033: LD_STRING ")
26035: STR
26036: PPUSH
26037: CALL_OW 559
// end else
26041: GO 26050
// ToLua ( getStreamItemsFromMission("","","") ) ;
26043: LD_STRING getStreamItemsFromMission("","","")
26045: PPUSH
26046: CALL_OW 559
// end ;
26050: LD_VAR 0 2
26054: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26055: LD_EXP 51
26059: PUSH
26060: LD_EXP 56
26064: AND
26065: IFFALSE 26189
26067: GO 26069
26069: DISABLE
26070: LD_INT 0
26072: PPUSH
26073: PPUSH
// begin enable ;
26074: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26075: LD_ADDR_VAR 0 2
26079: PUSH
26080: LD_INT 22
26082: PUSH
26083: LD_OWVAR 2
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: LD_INT 34
26097: PUSH
26098: LD_INT 7
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 34
26107: PUSH
26108: LD_INT 45
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 34
26117: PUSH
26118: LD_INT 28
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 34
26127: PUSH
26128: LD_INT 47
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PPUSH
26146: CALL_OW 69
26150: ST_TO_ADDR
// if not tmp then
26151: LD_VAR 0 2
26155: NOT
26156: IFFALSE 26160
// exit ;
26158: GO 26189
// for i in tmp do
26160: LD_ADDR_VAR 0 1
26164: PUSH
26165: LD_VAR 0 2
26169: PUSH
26170: FOR_IN
26171: IFFALSE 26187
// begin SetLives ( i , 0 ) ;
26173: LD_VAR 0 1
26177: PPUSH
26178: LD_INT 0
26180: PPUSH
26181: CALL_OW 234
// end ;
26185: GO 26170
26187: POP
26188: POP
// end ;
26189: PPOPN 2
26191: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26192: LD_EXP 51
26196: PUSH
26197: LD_EXP 57
26201: AND
26202: IFFALSE 26286
26204: GO 26206
26206: DISABLE
26207: LD_INT 0
26209: PPUSH
26210: PPUSH
// begin enable ;
26211: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26212: LD_ADDR_VAR 0 2
26216: PUSH
26217: LD_INT 22
26219: PUSH
26220: LD_OWVAR 2
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 32
26231: PUSH
26232: LD_INT 3
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL_OW 69
26247: ST_TO_ADDR
// if not tmp then
26248: LD_VAR 0 2
26252: NOT
26253: IFFALSE 26257
// exit ;
26255: GO 26286
// for i in tmp do
26257: LD_ADDR_VAR 0 1
26261: PUSH
26262: LD_VAR 0 2
26266: PUSH
26267: FOR_IN
26268: IFFALSE 26284
// begin SetLives ( i , 0 ) ;
26270: LD_VAR 0 1
26274: PPUSH
26275: LD_INT 0
26277: PPUSH
26278: CALL_OW 234
// end ;
26282: GO 26267
26284: POP
26285: POP
// end ;
26286: PPOPN 2
26288: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26289: LD_EXP 51
26293: PUSH
26294: LD_EXP 54
26298: AND
26299: IFFALSE 26392
26301: GO 26303
26303: DISABLE
26304: LD_INT 0
26306: PPUSH
// begin enable ;
26307: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26308: LD_ADDR_VAR 0 1
26312: PUSH
26313: LD_INT 22
26315: PUSH
26316: LD_OWVAR 2
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: PUSH
26328: LD_INT 25
26330: PUSH
26331: LD_INT 5
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 25
26340: PUSH
26341: LD_INT 9
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 25
26350: PUSH
26351: LD_INT 8
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PPUSH
26368: CALL_OW 69
26372: PUSH
26373: FOR_IN
26374: IFFALSE 26390
// begin SetClass ( i , 1 ) ;
26376: LD_VAR 0 1
26380: PPUSH
26381: LD_INT 1
26383: PPUSH
26384: CALL_OW 336
// end ;
26388: GO 26373
26390: POP
26391: POP
// end ;
26392: PPOPN 1
26394: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26395: LD_EXP 51
26399: PUSH
26400: LD_EXP 55
26404: AND
26405: PUSH
26406: LD_OWVAR 65
26410: PUSH
26411: LD_INT 7
26413: LESS
26414: AND
26415: IFFALSE 26429
26417: GO 26419
26419: DISABLE
// begin enable ;
26420: ENABLE
// game_speed := 7 ;
26421: LD_ADDR_OWVAR 65
26425: PUSH
26426: LD_INT 7
26428: ST_TO_ADDR
// end ;
26429: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26430: LD_EXP 51
26434: PUSH
26435: LD_EXP 58
26439: AND
26440: IFFALSE 26642
26442: GO 26444
26444: DISABLE
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
26449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26450: LD_ADDR_VAR 0 3
26454: PUSH
26455: LD_INT 81
26457: PUSH
26458: LD_OWVAR 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 21
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PPUSH
26481: CALL_OW 69
26485: ST_TO_ADDR
// if not tmp then
26486: LD_VAR 0 3
26490: NOT
26491: IFFALSE 26495
// exit ;
26493: GO 26642
// if tmp > 5 then
26495: LD_VAR 0 3
26499: PUSH
26500: LD_INT 5
26502: GREATER
26503: IFFALSE 26515
// k := 5 else
26505: LD_ADDR_VAR 0 2
26509: PUSH
26510: LD_INT 5
26512: ST_TO_ADDR
26513: GO 26525
// k := tmp ;
26515: LD_ADDR_VAR 0 2
26519: PUSH
26520: LD_VAR 0 3
26524: ST_TO_ADDR
// for i := 1 to k do
26525: LD_ADDR_VAR 0 1
26529: PUSH
26530: DOUBLE
26531: LD_INT 1
26533: DEC
26534: ST_TO_ADDR
26535: LD_VAR 0 2
26539: PUSH
26540: FOR_TO
26541: IFFALSE 26640
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26543: LD_VAR 0 3
26547: PUSH
26548: LD_VAR 0 1
26552: ARRAY
26553: PPUSH
26554: LD_VAR 0 1
26558: PUSH
26559: LD_INT 4
26561: MOD
26562: PUSH
26563: LD_INT 1
26565: PLUS
26566: PPUSH
26567: CALL_OW 259
26571: PUSH
26572: LD_INT 10
26574: LESS
26575: IFFALSE 26638
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26577: LD_VAR 0 3
26581: PUSH
26582: LD_VAR 0 1
26586: ARRAY
26587: PPUSH
26588: LD_VAR 0 1
26592: PUSH
26593: LD_INT 4
26595: MOD
26596: PUSH
26597: LD_INT 1
26599: PLUS
26600: PPUSH
26601: LD_VAR 0 3
26605: PUSH
26606: LD_VAR 0 1
26610: ARRAY
26611: PPUSH
26612: LD_VAR 0 1
26616: PUSH
26617: LD_INT 4
26619: MOD
26620: PUSH
26621: LD_INT 1
26623: PLUS
26624: PPUSH
26625: CALL_OW 259
26629: PUSH
26630: LD_INT 1
26632: PLUS
26633: PPUSH
26634: CALL_OW 237
26638: GO 26540
26640: POP
26641: POP
// end ;
26642: PPOPN 3
26644: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26645: LD_EXP 51
26649: PUSH
26650: LD_EXP 59
26654: AND
26655: IFFALSE 26675
26657: GO 26659
26659: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26660: LD_INT 4
26662: PPUSH
26663: LD_OWVAR 2
26667: PPUSH
26668: LD_INT 0
26670: PPUSH
26671: CALL_OW 324
26675: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26676: LD_EXP 51
26680: PUSH
26681: LD_EXP 88
26685: AND
26686: IFFALSE 26706
26688: GO 26690
26690: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26691: LD_INT 19
26693: PPUSH
26694: LD_OWVAR 2
26698: PPUSH
26699: LD_INT 0
26701: PPUSH
26702: CALL_OW 324
26706: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26707: LD_EXP 51
26711: PUSH
26712: LD_EXP 60
26716: AND
26717: IFFALSE 26819
26719: GO 26721
26721: DISABLE
26722: LD_INT 0
26724: PPUSH
26725: PPUSH
// begin enable ;
26726: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26727: LD_ADDR_VAR 0 2
26731: PUSH
26732: LD_INT 22
26734: PUSH
26735: LD_OWVAR 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: LD_INT 34
26749: PUSH
26750: LD_INT 11
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 34
26759: PUSH
26760: LD_INT 30
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PPUSH
26776: CALL_OW 69
26780: ST_TO_ADDR
// if not tmp then
26781: LD_VAR 0 2
26785: NOT
26786: IFFALSE 26790
// exit ;
26788: GO 26819
// for i in tmp do
26790: LD_ADDR_VAR 0 1
26794: PUSH
26795: LD_VAR 0 2
26799: PUSH
26800: FOR_IN
26801: IFFALSE 26817
// begin SetLives ( i , 0 ) ;
26803: LD_VAR 0 1
26807: PPUSH
26808: LD_INT 0
26810: PPUSH
26811: CALL_OW 234
// end ;
26815: GO 26800
26817: POP
26818: POP
// end ;
26819: PPOPN 2
26821: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26822: LD_EXP 51
26826: PUSH
26827: LD_EXP 61
26831: AND
26832: IFFALSE 26852
26834: GO 26836
26836: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26837: LD_INT 32
26839: PPUSH
26840: LD_OWVAR 2
26844: PPUSH
26845: LD_INT 0
26847: PPUSH
26848: CALL_OW 324
26852: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26853: LD_EXP 51
26857: PUSH
26858: LD_EXP 62
26862: AND
26863: IFFALSE 27044
26865: GO 26867
26867: DISABLE
26868: LD_INT 0
26870: PPUSH
26871: PPUSH
26872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26873: LD_ADDR_VAR 0 2
26877: PUSH
26878: LD_INT 22
26880: PUSH
26881: LD_OWVAR 2
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 33
26892: PUSH
26893: LD_INT 3
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PPUSH
26904: CALL_OW 69
26908: ST_TO_ADDR
// if not tmp then
26909: LD_VAR 0 2
26913: NOT
26914: IFFALSE 26918
// exit ;
26916: GO 27044
// side := 0 ;
26918: LD_ADDR_VAR 0 3
26922: PUSH
26923: LD_INT 0
26925: ST_TO_ADDR
// for i := 1 to 8 do
26926: LD_ADDR_VAR 0 1
26930: PUSH
26931: DOUBLE
26932: LD_INT 1
26934: DEC
26935: ST_TO_ADDR
26936: LD_INT 8
26938: PUSH
26939: FOR_TO
26940: IFFALSE 26988
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26942: LD_OWVAR 2
26946: PUSH
26947: LD_VAR 0 1
26951: NONEQUAL
26952: PUSH
26953: LD_OWVAR 2
26957: PPUSH
26958: LD_VAR 0 1
26962: PPUSH
26963: CALL_OW 81
26967: PUSH
26968: LD_INT 2
26970: EQUAL
26971: AND
26972: IFFALSE 26986
// begin side := i ;
26974: LD_ADDR_VAR 0 3
26978: PUSH
26979: LD_VAR 0 1
26983: ST_TO_ADDR
// break ;
26984: GO 26988
// end ;
26986: GO 26939
26988: POP
26989: POP
// if not side then
26990: LD_VAR 0 3
26994: NOT
26995: IFFALSE 26999
// exit ;
26997: GO 27044
// for i := 1 to tmp do
26999: LD_ADDR_VAR 0 1
27003: PUSH
27004: DOUBLE
27005: LD_INT 1
27007: DEC
27008: ST_TO_ADDR
27009: LD_VAR 0 2
27013: PUSH
27014: FOR_TO
27015: IFFALSE 27042
// if Prob ( 60 ) then
27017: LD_INT 60
27019: PPUSH
27020: CALL_OW 13
27024: IFFALSE 27040
// SetSide ( i , side ) ;
27026: LD_VAR 0 1
27030: PPUSH
27031: LD_VAR 0 3
27035: PPUSH
27036: CALL_OW 235
27040: GO 27014
27042: POP
27043: POP
// end ;
27044: PPOPN 3
27046: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27047: LD_EXP 51
27051: PUSH
27052: LD_EXP 64
27056: AND
27057: IFFALSE 27176
27059: GO 27061
27061: DISABLE
27062: LD_INT 0
27064: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27065: LD_ADDR_VAR 0 1
27069: PUSH
27070: LD_INT 22
27072: PUSH
27073: LD_OWVAR 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 3
27094: PUSH
27095: LD_INT 23
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: LIST
27113: PPUSH
27114: CALL_OW 69
27118: PUSH
27119: FOR_IN
27120: IFFALSE 27174
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27122: LD_VAR 0 1
27126: PPUSH
27127: CALL_OW 257
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 3
27140: PUSH
27141: LD_INT 4
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: IN
27150: IFFALSE 27172
// SetClass ( un , rand ( 1 , 4 ) ) ;
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_INT 1
27159: PPUSH
27160: LD_INT 4
27162: PPUSH
27163: CALL_OW 12
27167: PPUSH
27168: CALL_OW 336
27172: GO 27119
27174: POP
27175: POP
// end ;
27176: PPOPN 1
27178: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27179: LD_EXP 51
27183: PUSH
27184: LD_EXP 63
27188: AND
27189: IFFALSE 27268
27191: GO 27193
27193: DISABLE
27194: LD_INT 0
27196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27197: LD_ADDR_VAR 0 1
27201: PUSH
27202: LD_INT 22
27204: PUSH
27205: LD_OWVAR 2
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 21
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PPUSH
27228: CALL_OW 69
27232: ST_TO_ADDR
// if not tmp then
27233: LD_VAR 0 1
27237: NOT
27238: IFFALSE 27242
// exit ;
27240: GO 27268
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27242: LD_VAR 0 1
27246: PUSH
27247: LD_INT 1
27249: PPUSH
27250: LD_VAR 0 1
27254: PPUSH
27255: CALL_OW 12
27259: ARRAY
27260: PPUSH
27261: LD_INT 100
27263: PPUSH
27264: CALL_OW 234
// end ;
27268: PPOPN 1
27270: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27271: LD_EXP 51
27275: PUSH
27276: LD_EXP 65
27280: AND
27281: IFFALSE 27379
27283: GO 27285
27285: DISABLE
27286: LD_INT 0
27288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27289: LD_ADDR_VAR 0 1
27293: PUSH
27294: LD_INT 22
27296: PUSH
27297: LD_OWVAR 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 21
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PPUSH
27320: CALL_OW 69
27324: ST_TO_ADDR
// if not tmp then
27325: LD_VAR 0 1
27329: NOT
27330: IFFALSE 27334
// exit ;
27332: GO 27379
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27334: LD_VAR 0 1
27338: PUSH
27339: LD_INT 1
27341: PPUSH
27342: LD_VAR 0 1
27346: PPUSH
27347: CALL_OW 12
27351: ARRAY
27352: PPUSH
27353: LD_INT 1
27355: PPUSH
27356: LD_INT 4
27358: PPUSH
27359: CALL_OW 12
27363: PPUSH
27364: LD_INT 3000
27366: PPUSH
27367: LD_INT 9000
27369: PPUSH
27370: CALL_OW 12
27374: PPUSH
27375: CALL_OW 492
// end ;
27379: PPOPN 1
27381: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27382: LD_EXP 51
27386: PUSH
27387: LD_EXP 66
27391: AND
27392: IFFALSE 27412
27394: GO 27396
27396: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27397: LD_INT 1
27399: PPUSH
27400: LD_OWVAR 2
27404: PPUSH
27405: LD_INT 0
27407: PPUSH
27408: CALL_OW 324
27412: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27413: LD_EXP 51
27417: PUSH
27418: LD_EXP 67
27422: AND
27423: IFFALSE 27506
27425: GO 27427
27427: DISABLE
27428: LD_INT 0
27430: PPUSH
27431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27432: LD_ADDR_VAR 0 2
27436: PUSH
27437: LD_INT 22
27439: PUSH
27440: LD_OWVAR 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 21
27451: PUSH
27452: LD_INT 3
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PPUSH
27463: CALL_OW 69
27467: ST_TO_ADDR
// if not tmp then
27468: LD_VAR 0 2
27472: NOT
27473: IFFALSE 27477
// exit ;
27475: GO 27506
// for i in tmp do
27477: LD_ADDR_VAR 0 1
27481: PUSH
27482: LD_VAR 0 2
27486: PUSH
27487: FOR_IN
27488: IFFALSE 27504
// SetBLevel ( i , 10 ) ;
27490: LD_VAR 0 1
27494: PPUSH
27495: LD_INT 10
27497: PPUSH
27498: CALL_OW 241
27502: GO 27487
27504: POP
27505: POP
// end ;
27506: PPOPN 2
27508: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27509: LD_EXP 51
27513: PUSH
27514: LD_EXP 68
27518: AND
27519: IFFALSE 27630
27521: GO 27523
27523: DISABLE
27524: LD_INT 0
27526: PPUSH
27527: PPUSH
27528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27529: LD_ADDR_VAR 0 3
27533: PUSH
27534: LD_INT 22
27536: PUSH
27537: LD_OWVAR 2
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 25
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PPUSH
27560: CALL_OW 69
27564: ST_TO_ADDR
// if not tmp then
27565: LD_VAR 0 3
27569: NOT
27570: IFFALSE 27574
// exit ;
27572: GO 27630
// un := tmp [ rand ( 1 , tmp ) ] ;
27574: LD_ADDR_VAR 0 2
27578: PUSH
27579: LD_VAR 0 3
27583: PUSH
27584: LD_INT 1
27586: PPUSH
27587: LD_VAR 0 3
27591: PPUSH
27592: CALL_OW 12
27596: ARRAY
27597: ST_TO_ADDR
// if Crawls ( un ) then
27598: LD_VAR 0 2
27602: PPUSH
27603: CALL_OW 318
27607: IFFALSE 27618
// ComWalk ( un ) ;
27609: LD_VAR 0 2
27613: PPUSH
27614: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27618: LD_VAR 0 2
27622: PPUSH
27623: LD_INT 5
27625: PPUSH
27626: CALL_OW 336
// end ;
27630: PPOPN 3
27632: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27633: LD_EXP 51
27637: PUSH
27638: LD_EXP 69
27642: AND
27643: PUSH
27644: LD_OWVAR 67
27648: PUSH
27649: LD_INT 4
27651: LESS
27652: AND
27653: IFFALSE 27672
27655: GO 27657
27657: DISABLE
// begin Difficulty := Difficulty + 1 ;
27658: LD_ADDR_OWVAR 67
27662: PUSH
27663: LD_OWVAR 67
27667: PUSH
27668: LD_INT 1
27670: PLUS
27671: ST_TO_ADDR
// end ;
27672: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27673: LD_EXP 51
27677: PUSH
27678: LD_EXP 70
27682: AND
27683: IFFALSE 27786
27685: GO 27687
27687: DISABLE
27688: LD_INT 0
27690: PPUSH
// begin for i := 1 to 5 do
27691: LD_ADDR_VAR 0 1
27695: PUSH
27696: DOUBLE
27697: LD_INT 1
27699: DEC
27700: ST_TO_ADDR
27701: LD_INT 5
27703: PUSH
27704: FOR_TO
27705: IFFALSE 27784
// begin uc_nation := nation_nature ;
27707: LD_ADDR_OWVAR 21
27711: PUSH
27712: LD_INT 0
27714: ST_TO_ADDR
// uc_side := 0 ;
27715: LD_ADDR_OWVAR 20
27719: PUSH
27720: LD_INT 0
27722: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27723: LD_ADDR_OWVAR 29
27727: PUSH
27728: LD_INT 12
27730: PUSH
27731: LD_INT 12
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// hc_agressivity := 20 ;
27738: LD_ADDR_OWVAR 35
27742: PUSH
27743: LD_INT 20
27745: ST_TO_ADDR
// hc_class := class_tiger ;
27746: LD_ADDR_OWVAR 28
27750: PUSH
27751: LD_INT 14
27753: ST_TO_ADDR
// hc_gallery :=  ;
27754: LD_ADDR_OWVAR 33
27758: PUSH
27759: LD_STRING 
27761: ST_TO_ADDR
// hc_name :=  ;
27762: LD_ADDR_OWVAR 26
27766: PUSH
27767: LD_STRING 
27769: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27770: CALL_OW 44
27774: PPUSH
27775: LD_INT 0
27777: PPUSH
27778: CALL_OW 51
// end ;
27782: GO 27704
27784: POP
27785: POP
// end ;
27786: PPOPN 1
27788: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27789: LD_EXP 51
27793: PUSH
27794: LD_EXP 71
27798: AND
27799: IFFALSE 27808
27801: GO 27803
27803: DISABLE
// StreamSibBomb ;
27804: CALL 27809 0 0
27808: END
// export function StreamSibBomb ; var i , x , y ; begin
27809: LD_INT 0
27811: PPUSH
27812: PPUSH
27813: PPUSH
27814: PPUSH
// result := false ;
27815: LD_ADDR_VAR 0 1
27819: PUSH
27820: LD_INT 0
27822: ST_TO_ADDR
// for i := 1 to 16 do
27823: LD_ADDR_VAR 0 2
27827: PUSH
27828: DOUBLE
27829: LD_INT 1
27831: DEC
27832: ST_TO_ADDR
27833: LD_INT 16
27835: PUSH
27836: FOR_TO
27837: IFFALSE 28036
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27839: LD_ADDR_VAR 0 3
27843: PUSH
27844: LD_INT 10
27846: PUSH
27847: LD_INT 20
27849: PUSH
27850: LD_INT 30
27852: PUSH
27853: LD_INT 40
27855: PUSH
27856: LD_INT 50
27858: PUSH
27859: LD_INT 60
27861: PUSH
27862: LD_INT 70
27864: PUSH
27865: LD_INT 80
27867: PUSH
27868: LD_INT 90
27870: PUSH
27871: LD_INT 100
27873: PUSH
27874: LD_INT 110
27876: PUSH
27877: LD_INT 120
27879: PUSH
27880: LD_INT 130
27882: PUSH
27883: LD_INT 140
27885: PUSH
27886: LD_INT 150
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 1
27908: PPUSH
27909: LD_INT 15
27911: PPUSH
27912: CALL_OW 12
27916: ARRAY
27917: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27918: LD_ADDR_VAR 0 4
27922: PUSH
27923: LD_INT 10
27925: PUSH
27926: LD_INT 20
27928: PUSH
27929: LD_INT 30
27931: PUSH
27932: LD_INT 40
27934: PUSH
27935: LD_INT 50
27937: PUSH
27938: LD_INT 60
27940: PUSH
27941: LD_INT 70
27943: PUSH
27944: LD_INT 80
27946: PUSH
27947: LD_INT 90
27949: PUSH
27950: LD_INT 100
27952: PUSH
27953: LD_INT 110
27955: PUSH
27956: LD_INT 120
27958: PUSH
27959: LD_INT 130
27961: PUSH
27962: LD_INT 140
27964: PUSH
27965: LD_INT 150
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PPUSH
27988: LD_INT 15
27990: PPUSH
27991: CALL_OW 12
27995: ARRAY
27996: ST_TO_ADDR
// if ValidHex ( x , y ) then
27997: LD_VAR 0 3
28001: PPUSH
28002: LD_VAR 0 4
28006: PPUSH
28007: CALL_OW 488
28011: IFFALSE 28034
// begin result := [ x , y ] ;
28013: LD_ADDR_VAR 0 1
28017: PUSH
28018: LD_VAR 0 3
28022: PUSH
28023: LD_VAR 0 4
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: ST_TO_ADDR
// break ;
28032: GO 28036
// end ; end ;
28034: GO 27836
28036: POP
28037: POP
// if result then
28038: LD_VAR 0 1
28042: IFFALSE 28102
// begin ToLua ( playSibBomb() ) ;
28044: LD_STRING playSibBomb()
28046: PPUSH
28047: CALL_OW 559
// wait ( 0 0$14 ) ;
28051: LD_INT 490
28053: PPUSH
28054: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28058: LD_VAR 0 1
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: PPUSH
28067: LD_VAR 0 1
28071: PUSH
28072: LD_INT 2
28074: ARRAY
28075: PPUSH
28076: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28080: LD_VAR 0 1
28084: PUSH
28085: LD_INT 1
28087: ARRAY
28088: PPUSH
28089: LD_VAR 0 1
28093: PUSH
28094: LD_INT 2
28096: ARRAY
28097: PPUSH
28098: CALL_OW 429
// end ; end ;
28102: LD_VAR 0 1
28106: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28107: LD_EXP 51
28111: PUSH
28112: LD_EXP 73
28116: AND
28117: IFFALSE 28129
28119: GO 28121
28121: DISABLE
// YouLost (  ) ;
28122: LD_STRING 
28124: PPUSH
28125: CALL_OW 104
28129: END
// every 0 0$1 trigger StreamModeActive and sFog do
28130: LD_EXP 51
28134: PUSH
28135: LD_EXP 72
28139: AND
28140: IFFALSE 28154
28142: GO 28144
28144: DISABLE
// FogOff ( your_side ) ;
28145: LD_OWVAR 2
28149: PPUSH
28150: CALL_OW 344
28154: END
// every 0 0$1 trigger StreamModeActive and sSun do
28155: LD_EXP 51
28159: PUSH
28160: LD_EXP 74
28164: AND
28165: IFFALSE 28193
28167: GO 28169
28169: DISABLE
// begin solar_recharge_percent := 0 ;
28170: LD_ADDR_OWVAR 79
28174: PUSH
28175: LD_INT 0
28177: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28178: LD_INT 10500
28180: PPUSH
28181: CALL_OW 67
// solar_recharge_percent := 100 ;
28185: LD_ADDR_OWVAR 79
28189: PUSH
28190: LD_INT 100
28192: ST_TO_ADDR
// end ;
28193: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28194: LD_EXP 51
28198: PUSH
28199: LD_EXP 75
28203: AND
28204: IFFALSE 28443
28206: GO 28208
28208: DISABLE
28209: LD_INT 0
28211: PPUSH
28212: PPUSH
28213: PPUSH
// begin tmp := [ ] ;
28214: LD_ADDR_VAR 0 3
28218: PUSH
28219: EMPTY
28220: ST_TO_ADDR
// for i := 1 to 6 do
28221: LD_ADDR_VAR 0 1
28225: PUSH
28226: DOUBLE
28227: LD_INT 1
28229: DEC
28230: ST_TO_ADDR
28231: LD_INT 6
28233: PUSH
28234: FOR_TO
28235: IFFALSE 28340
// begin uc_nation := nation_nature ;
28237: LD_ADDR_OWVAR 21
28241: PUSH
28242: LD_INT 0
28244: ST_TO_ADDR
// uc_side := 0 ;
28245: LD_ADDR_OWVAR 20
28249: PUSH
28250: LD_INT 0
28252: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28253: LD_ADDR_OWVAR 29
28257: PUSH
28258: LD_INT 12
28260: PUSH
28261: LD_INT 12
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: ST_TO_ADDR
// hc_agressivity := 20 ;
28268: LD_ADDR_OWVAR 35
28272: PUSH
28273: LD_INT 20
28275: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28276: LD_ADDR_OWVAR 28
28280: PUSH
28281: LD_INT 17
28283: ST_TO_ADDR
// hc_gallery :=  ;
28284: LD_ADDR_OWVAR 33
28288: PUSH
28289: LD_STRING 
28291: ST_TO_ADDR
// hc_name :=  ;
28292: LD_ADDR_OWVAR 26
28296: PUSH
28297: LD_STRING 
28299: ST_TO_ADDR
// un := CreateHuman ;
28300: LD_ADDR_VAR 0 2
28304: PUSH
28305: CALL_OW 44
28309: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28310: LD_VAR 0 2
28314: PPUSH
28315: LD_INT 1
28317: PPUSH
28318: CALL_OW 51
// tmp := tmp ^ un ;
28322: LD_ADDR_VAR 0 3
28326: PUSH
28327: LD_VAR 0 3
28331: PUSH
28332: LD_VAR 0 2
28336: ADD
28337: ST_TO_ADDR
// end ;
28338: GO 28234
28340: POP
28341: POP
// repeat wait ( 0 0$1 ) ;
28342: LD_INT 35
28344: PPUSH
28345: CALL_OW 67
// for un in tmp do
28349: LD_ADDR_VAR 0 2
28353: PUSH
28354: LD_VAR 0 3
28358: PUSH
28359: FOR_IN
28360: IFFALSE 28434
// begin if IsDead ( un ) then
28362: LD_VAR 0 2
28366: PPUSH
28367: CALL_OW 301
28371: IFFALSE 28391
// begin tmp := tmp diff un ;
28373: LD_ADDR_VAR 0 3
28377: PUSH
28378: LD_VAR 0 3
28382: PUSH
28383: LD_VAR 0 2
28387: DIFF
28388: ST_TO_ADDR
// continue ;
28389: GO 28359
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28391: LD_VAR 0 2
28395: PPUSH
28396: LD_INT 3
28398: PUSH
28399: LD_INT 22
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PPUSH
28413: CALL_OW 69
28417: PPUSH
28418: LD_VAR 0 2
28422: PPUSH
28423: CALL_OW 74
28427: PPUSH
28428: CALL_OW 115
// end ;
28432: GO 28359
28434: POP
28435: POP
// until not tmp ;
28436: LD_VAR 0 3
28440: NOT
28441: IFFALSE 28342
// end ;
28443: PPOPN 3
28445: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28446: LD_EXP 51
28450: PUSH
28451: LD_EXP 76
28455: AND
28456: IFFALSE 28510
28458: GO 28460
28460: DISABLE
// begin ToLua ( displayTroll(); ) ;
28461: LD_STRING displayTroll();
28463: PPUSH
28464: CALL_OW 559
// wait ( 3 3$00 ) ;
28468: LD_INT 6300
28470: PPUSH
28471: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28475: LD_STRING hideTroll();
28477: PPUSH
28478: CALL_OW 559
// wait ( 1 1$00 ) ;
28482: LD_INT 2100
28484: PPUSH
28485: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28489: LD_STRING displayTroll();
28491: PPUSH
28492: CALL_OW 559
// wait ( 1 1$00 ) ;
28496: LD_INT 2100
28498: PPUSH
28499: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28503: LD_STRING hideTroll();
28505: PPUSH
28506: CALL_OW 559
// end ;
28510: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28511: LD_EXP 51
28515: PUSH
28516: LD_EXP 77
28520: AND
28521: IFFALSE 28584
28523: GO 28525
28525: DISABLE
28526: LD_INT 0
28528: PPUSH
// begin p := 0 ;
28529: LD_ADDR_VAR 0 1
28533: PUSH
28534: LD_INT 0
28536: ST_TO_ADDR
// repeat game_speed := 1 ;
28537: LD_ADDR_OWVAR 65
28541: PUSH
28542: LD_INT 1
28544: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28545: LD_INT 35
28547: PPUSH
28548: CALL_OW 67
// p := p + 1 ;
28552: LD_ADDR_VAR 0 1
28556: PUSH
28557: LD_VAR 0 1
28561: PUSH
28562: LD_INT 1
28564: PLUS
28565: ST_TO_ADDR
// until p >= 60 ;
28566: LD_VAR 0 1
28570: PUSH
28571: LD_INT 60
28573: GREATEREQUAL
28574: IFFALSE 28537
// game_speed := 4 ;
28576: LD_ADDR_OWVAR 65
28580: PUSH
28581: LD_INT 4
28583: ST_TO_ADDR
// end ;
28584: PPOPN 1
28586: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28587: LD_EXP 51
28591: PUSH
28592: LD_EXP 78
28596: AND
28597: IFFALSE 28743
28599: GO 28601
28601: DISABLE
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28606: LD_ADDR_VAR 0 1
28610: PUSH
28611: LD_INT 22
28613: PUSH
28614: LD_OWVAR 2
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: LD_INT 30
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 30
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PPUSH
28655: CALL_OW 69
28659: ST_TO_ADDR
// if not depot then
28660: LD_VAR 0 1
28664: NOT
28665: IFFALSE 28669
// exit ;
28667: GO 28743
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28669: LD_ADDR_VAR 0 2
28673: PUSH
28674: LD_VAR 0 1
28678: PUSH
28679: LD_INT 1
28681: PPUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 12
28691: ARRAY
28692: PPUSH
28693: CALL_OW 274
28697: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28698: LD_VAR 0 2
28702: PPUSH
28703: LD_INT 1
28705: PPUSH
28706: LD_INT 0
28708: PPUSH
28709: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28713: LD_VAR 0 2
28717: PPUSH
28718: LD_INT 2
28720: PPUSH
28721: LD_INT 0
28723: PPUSH
28724: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28728: LD_VAR 0 2
28732: PPUSH
28733: LD_INT 3
28735: PPUSH
28736: LD_INT 0
28738: PPUSH
28739: CALL_OW 277
// end ;
28743: PPOPN 2
28745: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28746: LD_EXP 51
28750: PUSH
28751: LD_EXP 79
28755: AND
28756: IFFALSE 28853
28758: GO 28760
28760: DISABLE
28761: LD_INT 0
28763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28764: LD_ADDR_VAR 0 1
28768: PUSH
28769: LD_INT 22
28771: PUSH
28772: LD_OWVAR 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 21
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 23
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: LIST
28812: PPUSH
28813: CALL_OW 69
28817: ST_TO_ADDR
// if not tmp then
28818: LD_VAR 0 1
28822: NOT
28823: IFFALSE 28827
// exit ;
28825: GO 28853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28827: LD_VAR 0 1
28831: PUSH
28832: LD_INT 1
28834: PPUSH
28835: LD_VAR 0 1
28839: PPUSH
28840: CALL_OW 12
28844: ARRAY
28845: PPUSH
28846: LD_INT 200
28848: PPUSH
28849: CALL_OW 234
// end ;
28853: PPOPN 1
28855: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28856: LD_EXP 51
28860: PUSH
28861: LD_EXP 80
28865: AND
28866: IFFALSE 28945
28868: GO 28870
28870: DISABLE
28871: LD_INT 0
28873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28874: LD_ADDR_VAR 0 1
28878: PUSH
28879: LD_INT 22
28881: PUSH
28882: LD_OWVAR 2
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 21
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PPUSH
28905: CALL_OW 69
28909: ST_TO_ADDR
// if not tmp then
28910: LD_VAR 0 1
28914: NOT
28915: IFFALSE 28919
// exit ;
28917: GO 28945
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28919: LD_VAR 0 1
28923: PUSH
28924: LD_INT 1
28926: PPUSH
28927: LD_VAR 0 1
28931: PPUSH
28932: CALL_OW 12
28936: ARRAY
28937: PPUSH
28938: LD_INT 60
28940: PPUSH
28941: CALL_OW 234
// end ;
28945: PPOPN 1
28947: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28948: LD_EXP 51
28952: PUSH
28953: LD_EXP 81
28957: AND
28958: IFFALSE 29057
28960: GO 28962
28962: DISABLE
28963: LD_INT 0
28965: PPUSH
28966: PPUSH
// begin enable ;
28967: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28968: LD_ADDR_VAR 0 1
28972: PUSH
28973: LD_INT 22
28975: PUSH
28976: LD_OWVAR 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 61
28987: PUSH
28988: EMPTY
28989: LIST
28990: PUSH
28991: LD_INT 33
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: PPUSH
29006: CALL_OW 69
29010: ST_TO_ADDR
// if not tmp then
29011: LD_VAR 0 1
29015: NOT
29016: IFFALSE 29020
// exit ;
29018: GO 29057
// for i in tmp do
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 1
29029: PUSH
29030: FOR_IN
29031: IFFALSE 29055
// if IsControledBy ( i ) then
29033: LD_VAR 0 2
29037: PPUSH
29038: CALL_OW 312
29042: IFFALSE 29053
// ComUnlink ( i ) ;
29044: LD_VAR 0 2
29048: PPUSH
29049: CALL_OW 136
29053: GO 29030
29055: POP
29056: POP
// end ;
29057: PPOPN 2
29059: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29060: LD_EXP 51
29064: PUSH
29065: LD_EXP 82
29069: AND
29070: IFFALSE 29210
29072: GO 29074
29074: DISABLE
29075: LD_INT 0
29077: PPUSH
29078: PPUSH
// begin ToLua ( displayPowell(); ) ;
29079: LD_STRING displayPowell();
29081: PPUSH
29082: CALL_OW 559
// uc_side := 0 ;
29086: LD_ADDR_OWVAR 20
29090: PUSH
29091: LD_INT 0
29093: ST_TO_ADDR
// uc_nation := 2 ;
29094: LD_ADDR_OWVAR 21
29098: PUSH
29099: LD_INT 2
29101: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29102: LD_ADDR_OWVAR 37
29106: PUSH
29107: LD_INT 14
29109: ST_TO_ADDR
// vc_engine := engine_siberite ;
29110: LD_ADDR_OWVAR 39
29114: PUSH
29115: LD_INT 3
29117: ST_TO_ADDR
// vc_control := control_apeman ;
29118: LD_ADDR_OWVAR 38
29122: PUSH
29123: LD_INT 5
29125: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29126: LD_ADDR_OWVAR 40
29130: PUSH
29131: LD_INT 29
29133: ST_TO_ADDR
// un := CreateVehicle ;
29134: LD_ADDR_VAR 0 2
29138: PUSH
29139: CALL_OW 45
29143: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29144: LD_VAR 0 2
29148: PPUSH
29149: LD_INT 1
29151: PPUSH
29152: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29156: LD_INT 35
29158: PPUSH
29159: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29163: LD_VAR 0 2
29167: PPUSH
29168: LD_INT 22
29170: PUSH
29171: LD_OWVAR 2
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PPUSH
29180: CALL_OW 69
29184: PPUSH
29185: LD_VAR 0 2
29189: PPUSH
29190: CALL_OW 74
29194: PPUSH
29195: CALL_OW 115
// until IsDead ( un ) ;
29199: LD_VAR 0 2
29203: PPUSH
29204: CALL_OW 301
29208: IFFALSE 29156
// end ;
29210: PPOPN 2
29212: END
// every 0 0$1 trigger StreamModeActive and sStu do
29213: LD_EXP 51
29217: PUSH
29218: LD_EXP 90
29222: AND
29223: IFFALSE 29239
29225: GO 29227
29227: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29228: LD_STRING displayStucuk();
29230: PPUSH
29231: CALL_OW 559
// ResetFog ;
29235: CALL_OW 335
// end ;
29239: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29240: LD_EXP 51
29244: PUSH
29245: LD_EXP 83
29249: AND
29250: IFFALSE 29391
29252: GO 29254
29254: DISABLE
29255: LD_INT 0
29257: PPUSH
29258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29259: LD_ADDR_VAR 0 2
29263: PUSH
29264: LD_INT 22
29266: PUSH
29267: LD_OWVAR 2
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 21
29278: PUSH
29279: LD_INT 1
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PPUSH
29290: CALL_OW 69
29294: ST_TO_ADDR
// if not tmp then
29295: LD_VAR 0 2
29299: NOT
29300: IFFALSE 29304
// exit ;
29302: GO 29391
// un := tmp [ rand ( 1 , tmp ) ] ;
29304: LD_ADDR_VAR 0 1
29308: PUSH
29309: LD_VAR 0 2
29313: PUSH
29314: LD_INT 1
29316: PPUSH
29317: LD_VAR 0 2
29321: PPUSH
29322: CALL_OW 12
29326: ARRAY
29327: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29328: LD_VAR 0 1
29332: PPUSH
29333: LD_INT 0
29335: PPUSH
29336: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29340: LD_VAR 0 1
29344: PPUSH
29345: LD_OWVAR 3
29349: PUSH
29350: LD_VAR 0 1
29354: DIFF
29355: PPUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 74
29365: PPUSH
29366: CALL_OW 115
// wait ( 0 0$20 ) ;
29370: LD_INT 700
29372: PPUSH
29373: CALL_OW 67
// SetSide ( un , your_side ) ;
29377: LD_VAR 0 1
29381: PPUSH
29382: LD_OWVAR 2
29386: PPUSH
29387: CALL_OW 235
// end ;
29391: PPOPN 2
29393: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29394: LD_EXP 51
29398: PUSH
29399: LD_EXP 84
29403: AND
29404: IFFALSE 29510
29406: GO 29408
29408: DISABLE
29409: LD_INT 0
29411: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29412: LD_ADDR_VAR 0 1
29416: PUSH
29417: LD_INT 22
29419: PUSH
29420: LD_OWVAR 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: LD_INT 30
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 30
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PPUSH
29461: CALL_OW 69
29465: ST_TO_ADDR
// if not depot then
29466: LD_VAR 0 1
29470: NOT
29471: IFFALSE 29475
// exit ;
29473: GO 29510
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29475: LD_VAR 0 1
29479: PUSH
29480: LD_INT 1
29482: ARRAY
29483: PPUSH
29484: CALL_OW 250
29488: PPUSH
29489: LD_VAR 0 1
29493: PUSH
29494: LD_INT 1
29496: ARRAY
29497: PPUSH
29498: CALL_OW 251
29502: PPUSH
29503: LD_INT 70
29505: PPUSH
29506: CALL_OW 495
// end ;
29510: PPOPN 1
29512: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29513: LD_EXP 51
29517: PUSH
29518: LD_EXP 85
29522: AND
29523: IFFALSE 29734
29525: GO 29527
29527: DISABLE
29528: LD_INT 0
29530: PPUSH
29531: PPUSH
29532: PPUSH
29533: PPUSH
29534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29535: LD_ADDR_VAR 0 5
29539: PUSH
29540: LD_INT 22
29542: PUSH
29543: LD_OWVAR 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 21
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PPUSH
29566: CALL_OW 69
29570: ST_TO_ADDR
// if not tmp then
29571: LD_VAR 0 5
29575: NOT
29576: IFFALSE 29580
// exit ;
29578: GO 29734
// for i in tmp do
29580: LD_ADDR_VAR 0 1
29584: PUSH
29585: LD_VAR 0 5
29589: PUSH
29590: FOR_IN
29591: IFFALSE 29732
// begin d := rand ( 0 , 5 ) ;
29593: LD_ADDR_VAR 0 4
29597: PUSH
29598: LD_INT 0
29600: PPUSH
29601: LD_INT 5
29603: PPUSH
29604: CALL_OW 12
29608: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29609: LD_ADDR_VAR 0 2
29613: PUSH
29614: LD_VAR 0 1
29618: PPUSH
29619: CALL_OW 250
29623: PPUSH
29624: LD_VAR 0 4
29628: PPUSH
29629: LD_INT 3
29631: PPUSH
29632: LD_INT 12
29634: PPUSH
29635: CALL_OW 12
29639: PPUSH
29640: CALL_OW 272
29644: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29645: LD_ADDR_VAR 0 3
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: CALL_OW 251
29659: PPUSH
29660: LD_VAR 0 4
29664: PPUSH
29665: LD_INT 3
29667: PPUSH
29668: LD_INT 12
29670: PPUSH
29671: CALL_OW 12
29675: PPUSH
29676: CALL_OW 273
29680: ST_TO_ADDR
// if ValidHex ( x , y ) then
29681: LD_VAR 0 2
29685: PPUSH
29686: LD_VAR 0 3
29690: PPUSH
29691: CALL_OW 488
29695: IFFALSE 29730
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29697: LD_VAR 0 1
29701: PPUSH
29702: LD_VAR 0 2
29706: PPUSH
29707: LD_VAR 0 3
29711: PPUSH
29712: LD_INT 3
29714: PPUSH
29715: LD_INT 6
29717: PPUSH
29718: CALL_OW 12
29722: PPUSH
29723: LD_INT 1
29725: PPUSH
29726: CALL_OW 483
// end ;
29730: GO 29590
29732: POP
29733: POP
// end ;
29734: PPOPN 5
29736: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29737: LD_EXP 51
29741: PUSH
29742: LD_EXP 86
29746: AND
29747: IFFALSE 29841
29749: GO 29751
29751: DISABLE
29752: LD_INT 0
29754: PPUSH
29755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29756: LD_ADDR_VAR 0 2
29760: PUSH
29761: LD_INT 22
29763: PUSH
29764: LD_OWVAR 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 32
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 21
29785: PUSH
29786: LD_INT 2
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: PPUSH
29798: CALL_OW 69
29802: ST_TO_ADDR
// if not tmp then
29803: LD_VAR 0 2
29807: NOT
29808: IFFALSE 29812
// exit ;
29810: GO 29841
// for i in tmp do
29812: LD_ADDR_VAR 0 1
29816: PUSH
29817: LD_VAR 0 2
29821: PUSH
29822: FOR_IN
29823: IFFALSE 29839
// SetFuel ( i , 0 ) ;
29825: LD_VAR 0 1
29829: PPUSH
29830: LD_INT 0
29832: PPUSH
29833: CALL_OW 240
29837: GO 29822
29839: POP
29840: POP
// end ;
29841: PPOPN 2
29843: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29844: LD_EXP 51
29848: PUSH
29849: LD_EXP 87
29853: AND
29854: IFFALSE 29920
29856: GO 29858
29858: DISABLE
29859: LD_INT 0
29861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29862: LD_ADDR_VAR 0 1
29866: PUSH
29867: LD_INT 22
29869: PUSH
29870: LD_OWVAR 2
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 30
29881: PUSH
29882: LD_INT 29
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PPUSH
29893: CALL_OW 69
29897: ST_TO_ADDR
// if not tmp then
29898: LD_VAR 0 1
29902: NOT
29903: IFFALSE 29907
// exit ;
29905: GO 29920
// DestroyUnit ( tmp [ 1 ] ) ;
29907: LD_VAR 0 1
29911: PUSH
29912: LD_INT 1
29914: ARRAY
29915: PPUSH
29916: CALL_OW 65
// end ;
29920: PPOPN 1
29922: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29923: LD_EXP 51
29927: PUSH
29928: LD_EXP 89
29932: AND
29933: IFFALSE 30062
29935: GO 29937
29937: DISABLE
29938: LD_INT 0
29940: PPUSH
// begin uc_side := 0 ;
29941: LD_ADDR_OWVAR 20
29945: PUSH
29946: LD_INT 0
29948: ST_TO_ADDR
// uc_nation := nation_arabian ;
29949: LD_ADDR_OWVAR 21
29953: PUSH
29954: LD_INT 2
29956: ST_TO_ADDR
// hc_gallery :=  ;
29957: LD_ADDR_OWVAR 33
29961: PUSH
29962: LD_STRING 
29964: ST_TO_ADDR
// hc_name :=  ;
29965: LD_ADDR_OWVAR 26
29969: PUSH
29970: LD_STRING 
29972: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29973: LD_INT 1
29975: PPUSH
29976: LD_INT 11
29978: PPUSH
29979: LD_INT 10
29981: PPUSH
29982: CALL_OW 380
// un := CreateHuman ;
29986: LD_ADDR_VAR 0 1
29990: PUSH
29991: CALL_OW 44
29995: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29996: LD_VAR 0 1
30000: PPUSH
30001: LD_INT 1
30003: PPUSH
30004: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30008: LD_INT 35
30010: PPUSH
30011: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30015: LD_VAR 0 1
30019: PPUSH
30020: LD_INT 22
30022: PUSH
30023: LD_OWVAR 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PPUSH
30032: CALL_OW 69
30036: PPUSH
30037: LD_VAR 0 1
30041: PPUSH
30042: CALL_OW 74
30046: PPUSH
30047: CALL_OW 115
// until IsDead ( un ) ;
30051: LD_VAR 0 1
30055: PPUSH
30056: CALL_OW 301
30060: IFFALSE 30008
// end ;
30062: PPOPN 1
30064: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30065: LD_EXP 51
30069: PUSH
30070: LD_EXP 91
30074: AND
30075: IFFALSE 30087
30077: GO 30079
30079: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30080: LD_STRING earthquake(getX(game), 0, 32)
30082: PPUSH
30083: CALL_OW 559
30087: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30088: LD_EXP 51
30092: PUSH
30093: LD_EXP 92
30097: AND
30098: IFFALSE 30189
30100: GO 30102
30102: DISABLE
30103: LD_INT 0
30105: PPUSH
// begin enable ;
30106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30107: LD_ADDR_VAR 0 1
30111: PUSH
30112: LD_INT 22
30114: PUSH
30115: LD_OWVAR 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 21
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 33
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: PPUSH
30149: CALL_OW 69
30153: ST_TO_ADDR
// if not tmp then
30154: LD_VAR 0 1
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30189
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30163: LD_VAR 0 1
30167: PUSH
30168: LD_INT 1
30170: PPUSH
30171: LD_VAR 0 1
30175: PPUSH
30176: CALL_OW 12
30180: ARRAY
30181: PPUSH
30182: LD_INT 1
30184: PPUSH
30185: CALL_OW 234
// end ;
30189: PPOPN 1
30191: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30192: LD_EXP 51
30196: PUSH
30197: LD_EXP 93
30201: AND
30202: IFFALSE 30343
30204: GO 30206
30206: DISABLE
30207: LD_INT 0
30209: PPUSH
30210: PPUSH
30211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30212: LD_ADDR_VAR 0 3
30216: PUSH
30217: LD_INT 22
30219: PUSH
30220: LD_OWVAR 2
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 25
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PPUSH
30243: CALL_OW 69
30247: ST_TO_ADDR
// if not tmp then
30248: LD_VAR 0 3
30252: NOT
30253: IFFALSE 30257
// exit ;
30255: GO 30343
// un := tmp [ rand ( 1 , tmp ) ] ;
30257: LD_ADDR_VAR 0 2
30261: PUSH
30262: LD_VAR 0 3
30266: PUSH
30267: LD_INT 1
30269: PPUSH
30270: LD_VAR 0 3
30274: PPUSH
30275: CALL_OW 12
30279: ARRAY
30280: ST_TO_ADDR
// if Crawls ( un ) then
30281: LD_VAR 0 2
30285: PPUSH
30286: CALL_OW 318
30290: IFFALSE 30301
// ComWalk ( un ) ;
30292: LD_VAR 0 2
30296: PPUSH
30297: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30301: LD_VAR 0 2
30305: PPUSH
30306: LD_INT 9
30308: PPUSH
30309: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30313: LD_INT 28
30315: PPUSH
30316: LD_OWVAR 2
30320: PPUSH
30321: LD_INT 2
30323: PPUSH
30324: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30328: LD_INT 29
30330: PPUSH
30331: LD_OWVAR 2
30335: PPUSH
30336: LD_INT 2
30338: PPUSH
30339: CALL_OW 322
// end ;
30343: PPOPN 3
30345: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30346: LD_EXP 51
30350: PUSH
30351: LD_EXP 94
30355: AND
30356: IFFALSE 30467
30358: GO 30360
30360: DISABLE
30361: LD_INT 0
30363: PPUSH
30364: PPUSH
30365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30366: LD_ADDR_VAR 0 3
30370: PUSH
30371: LD_INT 22
30373: PUSH
30374: LD_OWVAR 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 25
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PPUSH
30397: CALL_OW 69
30401: ST_TO_ADDR
// if not tmp then
30402: LD_VAR 0 3
30406: NOT
30407: IFFALSE 30411
// exit ;
30409: GO 30467
// un := tmp [ rand ( 1 , tmp ) ] ;
30411: LD_ADDR_VAR 0 2
30415: PUSH
30416: LD_VAR 0 3
30420: PUSH
30421: LD_INT 1
30423: PPUSH
30424: LD_VAR 0 3
30428: PPUSH
30429: CALL_OW 12
30433: ARRAY
30434: ST_TO_ADDR
// if Crawls ( un ) then
30435: LD_VAR 0 2
30439: PPUSH
30440: CALL_OW 318
30444: IFFALSE 30455
// ComWalk ( un ) ;
30446: LD_VAR 0 2
30450: PPUSH
30451: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30455: LD_VAR 0 2
30459: PPUSH
30460: LD_INT 8
30462: PPUSH
30463: CALL_OW 336
// end ;
30467: PPOPN 3
30469: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30470: LD_EXP 51
30474: PUSH
30475: LD_EXP 95
30479: AND
30480: IFFALSE 30624
30482: GO 30484
30484: DISABLE
30485: LD_INT 0
30487: PPUSH
30488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30489: LD_ADDR_VAR 0 2
30493: PUSH
30494: LD_INT 22
30496: PUSH
30497: LD_OWVAR 2
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 21
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: LD_INT 34
30521: PUSH
30522: LD_INT 12
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 34
30531: PUSH
30532: LD_INT 51
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 34
30541: PUSH
30542: LD_INT 32
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: PPUSH
30560: CALL_OW 69
30564: ST_TO_ADDR
// if not tmp then
30565: LD_VAR 0 2
30569: NOT
30570: IFFALSE 30574
// exit ;
30572: GO 30624
// for i in tmp do
30574: LD_ADDR_VAR 0 1
30578: PUSH
30579: LD_VAR 0 2
30583: PUSH
30584: FOR_IN
30585: IFFALSE 30622
// if GetCargo ( i , mat_artifact ) = 0 then
30587: LD_VAR 0 1
30591: PPUSH
30592: LD_INT 4
30594: PPUSH
30595: CALL_OW 289
30599: PUSH
30600: LD_INT 0
30602: EQUAL
30603: IFFALSE 30620
// SetCargo ( i , mat_siberit , 100 ) ;
30605: LD_VAR 0 1
30609: PPUSH
30610: LD_INT 3
30612: PPUSH
30613: LD_INT 100
30615: PPUSH
30616: CALL_OW 290
30620: GO 30584
30622: POP
30623: POP
// end ;
30624: PPOPN 2
30626: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30627: LD_EXP 51
30631: PUSH
30632: LD_EXP 96
30636: AND
30637: IFFALSE 30820
30639: GO 30641
30641: DISABLE
30642: LD_INT 0
30644: PPUSH
30645: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30646: LD_ADDR_VAR 0 2
30650: PUSH
30651: LD_INT 22
30653: PUSH
30654: LD_OWVAR 2
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 69
30667: ST_TO_ADDR
// if not tmp then
30668: LD_VAR 0 2
30672: NOT
30673: IFFALSE 30677
// exit ;
30675: GO 30820
// for i := 1 to 2 do
30677: LD_ADDR_VAR 0 1
30681: PUSH
30682: DOUBLE
30683: LD_INT 1
30685: DEC
30686: ST_TO_ADDR
30687: LD_INT 2
30689: PUSH
30690: FOR_TO
30691: IFFALSE 30818
// begin uc_side := your_side ;
30693: LD_ADDR_OWVAR 20
30697: PUSH
30698: LD_OWVAR 2
30702: ST_TO_ADDR
// uc_nation := nation_american ;
30703: LD_ADDR_OWVAR 21
30707: PUSH
30708: LD_INT 1
30710: ST_TO_ADDR
// vc_chassis := us_morphling ;
30711: LD_ADDR_OWVAR 37
30715: PUSH
30716: LD_INT 5
30718: ST_TO_ADDR
// vc_engine := engine_siberite ;
30719: LD_ADDR_OWVAR 39
30723: PUSH
30724: LD_INT 3
30726: ST_TO_ADDR
// vc_control := control_computer ;
30727: LD_ADDR_OWVAR 38
30731: PUSH
30732: LD_INT 3
30734: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30735: LD_ADDR_OWVAR 40
30739: PUSH
30740: LD_INT 10
30742: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30743: LD_VAR 0 2
30747: PUSH
30748: LD_INT 1
30750: ARRAY
30751: PPUSH
30752: CALL_OW 310
30756: NOT
30757: IFFALSE 30804
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30759: CALL_OW 45
30763: PPUSH
30764: LD_VAR 0 2
30768: PUSH
30769: LD_INT 1
30771: ARRAY
30772: PPUSH
30773: CALL_OW 250
30777: PPUSH
30778: LD_VAR 0 2
30782: PUSH
30783: LD_INT 1
30785: ARRAY
30786: PPUSH
30787: CALL_OW 251
30791: PPUSH
30792: LD_INT 12
30794: PPUSH
30795: LD_INT 1
30797: PPUSH
30798: CALL_OW 50
30802: GO 30816
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30804: CALL_OW 45
30808: PPUSH
30809: LD_INT 1
30811: PPUSH
30812: CALL_OW 51
// end ;
30816: GO 30690
30818: POP
30819: POP
// end ;
30820: PPOPN 2
30822: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30823: LD_EXP 51
30827: PUSH
30828: LD_EXP 97
30832: AND
30833: IFFALSE 31055
30835: GO 30837
30837: DISABLE
30838: LD_INT 0
30840: PPUSH
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30846: LD_ADDR_VAR 0 6
30850: PUSH
30851: LD_INT 22
30853: PUSH
30854: LD_OWVAR 2
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 21
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 3
30875: PUSH
30876: LD_INT 23
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: PPUSH
30895: CALL_OW 69
30899: ST_TO_ADDR
// if not tmp then
30900: LD_VAR 0 6
30904: NOT
30905: IFFALSE 30909
// exit ;
30907: GO 31055
// s1 := rand ( 1 , 4 ) ;
30909: LD_ADDR_VAR 0 2
30913: PUSH
30914: LD_INT 1
30916: PPUSH
30917: LD_INT 4
30919: PPUSH
30920: CALL_OW 12
30924: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30925: LD_ADDR_VAR 0 4
30929: PUSH
30930: LD_VAR 0 6
30934: PUSH
30935: LD_INT 1
30937: ARRAY
30938: PPUSH
30939: LD_VAR 0 2
30943: PPUSH
30944: CALL_OW 259
30948: ST_TO_ADDR
// if s1 = 1 then
30949: LD_VAR 0 2
30953: PUSH
30954: LD_INT 1
30956: EQUAL
30957: IFFALSE 30977
// s2 := rand ( 2 , 4 ) else
30959: LD_ADDR_VAR 0 3
30963: PUSH
30964: LD_INT 2
30966: PPUSH
30967: LD_INT 4
30969: PPUSH
30970: CALL_OW 12
30974: ST_TO_ADDR
30975: GO 30985
// s2 := 1 ;
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_INT 1
30984: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30985: LD_ADDR_VAR 0 5
30989: PUSH
30990: LD_VAR 0 6
30994: PUSH
30995: LD_INT 1
30997: ARRAY
30998: PPUSH
30999: LD_VAR 0 3
31003: PPUSH
31004: CALL_OW 259
31008: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31009: LD_VAR 0 6
31013: PUSH
31014: LD_INT 1
31016: ARRAY
31017: PPUSH
31018: LD_VAR 0 2
31022: PPUSH
31023: LD_VAR 0 5
31027: PPUSH
31028: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31032: LD_VAR 0 6
31036: PUSH
31037: LD_INT 1
31039: ARRAY
31040: PPUSH
31041: LD_VAR 0 3
31045: PPUSH
31046: LD_VAR 0 4
31050: PPUSH
31051: CALL_OW 237
// end ;
31055: PPOPN 6
31057: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31058: LD_EXP 51
31062: PUSH
31063: LD_EXP 98
31067: AND
31068: IFFALSE 31147
31070: GO 31072
31072: DISABLE
31073: LD_INT 0
31075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31076: LD_ADDR_VAR 0 1
31080: PUSH
31081: LD_INT 22
31083: PUSH
31084: LD_OWVAR 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 30
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PPUSH
31107: CALL_OW 69
31111: ST_TO_ADDR
// if not tmp then
31112: LD_VAR 0 1
31116: NOT
31117: IFFALSE 31121
// exit ;
31119: GO 31147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31121: LD_VAR 0 1
31125: PUSH
31126: LD_INT 1
31128: PPUSH
31129: LD_VAR 0 1
31133: PPUSH
31134: CALL_OW 12
31138: ARRAY
31139: PPUSH
31140: LD_INT 1
31142: PPUSH
31143: CALL_OW 234
// end ;
31147: PPOPN 1
31149: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31150: LD_EXP 51
31154: PUSH
31155: LD_EXP 99
31159: AND
31160: IFFALSE 31272
31162: GO 31164
31164: DISABLE
31165: LD_INT 0
31167: PPUSH
31168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31169: LD_ADDR_VAR 0 2
31173: PUSH
31174: LD_INT 22
31176: PUSH
31177: LD_OWVAR 2
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 30
31191: PUSH
31192: LD_INT 27
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 30
31201: PUSH
31202: LD_INT 26
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 30
31211: PUSH
31212: LD_INT 28
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PPUSH
31229: CALL_OW 69
31233: ST_TO_ADDR
// if not tmp then
31234: LD_VAR 0 2
31238: NOT
31239: IFFALSE 31243
// exit ;
31241: GO 31272
// for i in tmp do
31243: LD_ADDR_VAR 0 1
31247: PUSH
31248: LD_VAR 0 2
31252: PUSH
31253: FOR_IN
31254: IFFALSE 31270
// SetLives ( i , 1 ) ;
31256: LD_VAR 0 1
31260: PPUSH
31261: LD_INT 1
31263: PPUSH
31264: CALL_OW 234
31268: GO 31253
31270: POP
31271: POP
// end ;
31272: PPOPN 2
31274: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31275: LD_EXP 51
31279: PUSH
31280: LD_EXP 100
31284: AND
31285: IFFALSE 31572
31287: GO 31289
31289: DISABLE
31290: LD_INT 0
31292: PPUSH
31293: PPUSH
31294: PPUSH
// begin i := rand ( 1 , 7 ) ;
31295: LD_ADDR_VAR 0 1
31299: PUSH
31300: LD_INT 1
31302: PPUSH
31303: LD_INT 7
31305: PPUSH
31306: CALL_OW 12
31310: ST_TO_ADDR
// case i of 1 :
31311: LD_VAR 0 1
31315: PUSH
31316: LD_INT 1
31318: DOUBLE
31319: EQUAL
31320: IFTRUE 31324
31322: GO 31334
31324: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31325: LD_STRING earthquake(getX(game), 0, 32)
31327: PPUSH
31328: CALL_OW 559
31332: GO 31572
31334: LD_INT 2
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31356
31342: POP
// begin ToLua ( displayStucuk(); ) ;
31343: LD_STRING displayStucuk();
31345: PPUSH
31346: CALL_OW 559
// ResetFog ;
31350: CALL_OW 335
// end ; 3 :
31354: GO 31572
31356: LD_INT 3
31358: DOUBLE
31359: EQUAL
31360: IFTRUE 31364
31362: GO 31468
31364: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31365: LD_ADDR_VAR 0 2
31369: PUSH
31370: LD_INT 22
31372: PUSH
31373: LD_OWVAR 2
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 25
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PPUSH
31396: CALL_OW 69
31400: ST_TO_ADDR
// if not tmp then
31401: LD_VAR 0 2
31405: NOT
31406: IFFALSE 31410
// exit ;
31408: GO 31572
// un := tmp [ rand ( 1 , tmp ) ] ;
31410: LD_ADDR_VAR 0 3
31414: PUSH
31415: LD_VAR 0 2
31419: PUSH
31420: LD_INT 1
31422: PPUSH
31423: LD_VAR 0 2
31427: PPUSH
31428: CALL_OW 12
31432: ARRAY
31433: ST_TO_ADDR
// if Crawls ( un ) then
31434: LD_VAR 0 3
31438: PPUSH
31439: CALL_OW 318
31443: IFFALSE 31454
// ComWalk ( un ) ;
31445: LD_VAR 0 3
31449: PPUSH
31450: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31454: LD_VAR 0 3
31458: PPUSH
31459: LD_INT 8
31461: PPUSH
31462: CALL_OW 336
// end ; 4 :
31466: GO 31572
31468: LD_INT 4
31470: DOUBLE
31471: EQUAL
31472: IFTRUE 31476
31474: GO 31550
31476: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31477: LD_ADDR_VAR 0 2
31481: PUSH
31482: LD_INT 22
31484: PUSH
31485: LD_OWVAR 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 30
31496: PUSH
31497: LD_INT 29
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PPUSH
31508: CALL_OW 69
31512: ST_TO_ADDR
// if not tmp then
31513: LD_VAR 0 2
31517: NOT
31518: IFFALSE 31522
// exit ;
31520: GO 31572
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31522: LD_VAR 0 2
31526: PUSH
31527: LD_INT 1
31529: ARRAY
31530: PPUSH
31531: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31535: LD_VAR 0 2
31539: PUSH
31540: LD_INT 1
31542: ARRAY
31543: PPUSH
31544: CALL_OW 65
// end ; 5 .. 7 :
31548: GO 31572
31550: LD_INT 5
31552: DOUBLE
31553: GREATEREQUAL
31554: IFFALSE 31562
31556: LD_INT 7
31558: DOUBLE
31559: LESSEQUAL
31560: IFTRUE 31564
31562: GO 31571
31564: POP
// StreamSibBomb ; end ;
31565: CALL 27809 0 0
31569: GO 31572
31571: POP
// end ;
31572: PPOPN 3
31574: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31575: LD_EXP 51
31579: PUSH
31580: LD_EXP 101
31584: AND
31585: IFFALSE 31741
31587: GO 31589
31589: DISABLE
31590: LD_INT 0
31592: PPUSH
31593: PPUSH
31594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31595: LD_ADDR_VAR 0 2
31599: PUSH
31600: LD_INT 81
31602: PUSH
31603: LD_OWVAR 2
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: LD_INT 21
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 21
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PPUSH
31644: CALL_OW 69
31648: ST_TO_ADDR
// if not tmp then
31649: LD_VAR 0 2
31653: NOT
31654: IFFALSE 31658
// exit ;
31656: GO 31741
// p := 0 ;
31658: LD_ADDR_VAR 0 3
31662: PUSH
31663: LD_INT 0
31665: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31666: LD_INT 35
31668: PPUSH
31669: CALL_OW 67
// p := p + 1 ;
31673: LD_ADDR_VAR 0 3
31677: PUSH
31678: LD_VAR 0 3
31682: PUSH
31683: LD_INT 1
31685: PLUS
31686: ST_TO_ADDR
// for i in tmp do
31687: LD_ADDR_VAR 0 1
31691: PUSH
31692: LD_VAR 0 2
31696: PUSH
31697: FOR_IN
31698: IFFALSE 31729
// if GetLives ( i ) < 1000 then
31700: LD_VAR 0 1
31704: PPUSH
31705: CALL_OW 256
31709: PUSH
31710: LD_INT 1000
31712: LESS
31713: IFFALSE 31727
// SetLives ( i , 1000 ) ;
31715: LD_VAR 0 1
31719: PPUSH
31720: LD_INT 1000
31722: PPUSH
31723: CALL_OW 234
31727: GO 31697
31729: POP
31730: POP
// until p > 20 ;
31731: LD_VAR 0 3
31735: PUSH
31736: LD_INT 20
31738: GREATER
31739: IFFALSE 31666
// end ;
31741: PPOPN 3
31743: END
// every 0 0$1 trigger StreamModeActive and sTime do
31744: LD_EXP 51
31748: PUSH
31749: LD_EXP 102
31753: AND
31754: IFFALSE 31789
31756: GO 31758
31758: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31759: LD_INT 28
31761: PPUSH
31762: LD_OWVAR 2
31766: PPUSH
31767: LD_INT 2
31769: PPUSH
31770: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31774: LD_INT 30
31776: PPUSH
31777: LD_OWVAR 2
31781: PPUSH
31782: LD_INT 2
31784: PPUSH
31785: CALL_OW 322
// end ;
31789: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31790: LD_EXP 51
31794: PUSH
31795: LD_EXP 103
31799: AND
31800: IFFALSE 31921
31802: GO 31804
31804: DISABLE
31805: LD_INT 0
31807: PPUSH
31808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31809: LD_ADDR_VAR 0 2
31813: PUSH
31814: LD_INT 22
31816: PUSH
31817: LD_OWVAR 2
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 21
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 3
31838: PUSH
31839: LD_INT 23
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: PPUSH
31858: CALL_OW 69
31862: ST_TO_ADDR
// if not tmp then
31863: LD_VAR 0 2
31867: NOT
31868: IFFALSE 31872
// exit ;
31870: GO 31921
// for i in tmp do
31872: LD_ADDR_VAR 0 1
31876: PUSH
31877: LD_VAR 0 2
31881: PUSH
31882: FOR_IN
31883: IFFALSE 31919
// begin if Crawls ( i ) then
31885: LD_VAR 0 1
31889: PPUSH
31890: CALL_OW 318
31894: IFFALSE 31905
// ComWalk ( i ) ;
31896: LD_VAR 0 1
31900: PPUSH
31901: CALL_OW 138
// SetClass ( i , 2 ) ;
31905: LD_VAR 0 1
31909: PPUSH
31910: LD_INT 2
31912: PPUSH
31913: CALL_OW 336
// end ;
31917: GO 31882
31919: POP
31920: POP
// end ;
31921: PPOPN 2
31923: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31924: LD_EXP 51
31928: PUSH
31929: LD_EXP 104
31933: AND
31934: IFFALSE 32222
31936: GO 31938
31938: DISABLE
31939: LD_INT 0
31941: PPUSH
31942: PPUSH
31943: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31944: LD_OWVAR 2
31948: PPUSH
31949: LD_INT 9
31951: PPUSH
31952: LD_INT 1
31954: PPUSH
31955: LD_INT 1
31957: PPUSH
31958: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31962: LD_INT 9
31964: PPUSH
31965: LD_OWVAR 2
31969: PPUSH
31970: CALL_OW 343
// uc_side := 9 ;
31974: LD_ADDR_OWVAR 20
31978: PUSH
31979: LD_INT 9
31981: ST_TO_ADDR
// uc_nation := 2 ;
31982: LD_ADDR_OWVAR 21
31986: PUSH
31987: LD_INT 2
31989: ST_TO_ADDR
// hc_name := Dark Warrior ;
31990: LD_ADDR_OWVAR 26
31994: PUSH
31995: LD_STRING Dark Warrior
31997: ST_TO_ADDR
// hc_gallery :=  ;
31998: LD_ADDR_OWVAR 33
32002: PUSH
32003: LD_STRING 
32005: ST_TO_ADDR
// hc_noskilllimit := true ;
32006: LD_ADDR_OWVAR 76
32010: PUSH
32011: LD_INT 1
32013: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32014: LD_ADDR_OWVAR 31
32018: PUSH
32019: LD_INT 30
32021: PUSH
32022: LD_INT 30
32024: PUSH
32025: LD_INT 30
32027: PUSH
32028: LD_INT 30
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: ST_TO_ADDR
// un := CreateHuman ;
32037: LD_ADDR_VAR 0 3
32041: PUSH
32042: CALL_OW 44
32046: ST_TO_ADDR
// hc_noskilllimit := false ;
32047: LD_ADDR_OWVAR 76
32051: PUSH
32052: LD_INT 0
32054: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32055: LD_VAR 0 3
32059: PPUSH
32060: LD_INT 1
32062: PPUSH
32063: CALL_OW 51
// ToLua ( playRanger() ) ;
32067: LD_STRING playRanger()
32069: PPUSH
32070: CALL_OW 559
// p := 0 ;
32074: LD_ADDR_VAR 0 2
32078: PUSH
32079: LD_INT 0
32081: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32082: LD_INT 35
32084: PPUSH
32085: CALL_OW 67
// p := p + 1 ;
32089: LD_ADDR_VAR 0 2
32093: PUSH
32094: LD_VAR 0 2
32098: PUSH
32099: LD_INT 1
32101: PLUS
32102: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32103: LD_VAR 0 3
32107: PPUSH
32108: CALL_OW 256
32112: PUSH
32113: LD_INT 1000
32115: LESS
32116: IFFALSE 32130
// SetLives ( un , 1000 ) ;
32118: LD_VAR 0 3
32122: PPUSH
32123: LD_INT 1000
32125: PPUSH
32126: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32130: LD_VAR 0 3
32134: PPUSH
32135: LD_INT 81
32137: PUSH
32138: LD_OWVAR 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 91
32149: PUSH
32150: LD_VAR 0 3
32154: PUSH
32155: LD_INT 30
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL_OW 69
32171: PPUSH
32172: LD_VAR 0 3
32176: PPUSH
32177: CALL_OW 74
32181: PPUSH
32182: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32186: LD_VAR 0 2
32190: PUSH
32191: LD_INT 80
32193: GREATER
32194: PUSH
32195: LD_VAR 0 3
32199: PPUSH
32200: CALL_OW 301
32204: OR
32205: IFFALSE 32082
// if un then
32207: LD_VAR 0 3
32211: IFFALSE 32222
// RemoveUnit ( un ) ;
32213: LD_VAR 0 3
32217: PPUSH
32218: CALL_OW 64
// end ;
32222: PPOPN 3
32224: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32225: LD_EXP 105
32229: IFFALSE 32345
32231: GO 32233
32233: DISABLE
32234: LD_INT 0
32236: PPUSH
32237: PPUSH
32238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32239: LD_ADDR_VAR 0 2
32243: PUSH
32244: LD_INT 81
32246: PUSH
32247: LD_OWVAR 2
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 21
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PPUSH
32270: CALL_OW 69
32274: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32275: LD_STRING playComputer()
32277: PPUSH
32278: CALL_OW 559
// if not tmp then
32282: LD_VAR 0 2
32286: NOT
32287: IFFALSE 32291
// exit ;
32289: GO 32345
// for i in tmp do
32291: LD_ADDR_VAR 0 1
32295: PUSH
32296: LD_VAR 0 2
32300: PUSH
32301: FOR_IN
32302: IFFALSE 32343
// for j := 1 to 4 do
32304: LD_ADDR_VAR 0 3
32308: PUSH
32309: DOUBLE
32310: LD_INT 1
32312: DEC
32313: ST_TO_ADDR
32314: LD_INT 4
32316: PUSH
32317: FOR_TO
32318: IFFALSE 32339
// SetSkill ( i , j , 10 ) ;
32320: LD_VAR 0 1
32324: PPUSH
32325: LD_VAR 0 3
32329: PPUSH
32330: LD_INT 10
32332: PPUSH
32333: CALL_OW 237
32337: GO 32317
32339: POP
32340: POP
32341: GO 32301
32343: POP
32344: POP
// end ;
32345: PPOPN 3
32347: END
// every 0 0$1 trigger s30 do var i , tmp ;
32348: LD_EXP 106
32352: IFFALSE 32421
32354: GO 32356
32356: DISABLE
32357: LD_INT 0
32359: PPUSH
32360: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32361: LD_ADDR_VAR 0 2
32365: PUSH
32366: LD_INT 22
32368: PUSH
32369: LD_OWVAR 2
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PPUSH
32378: CALL_OW 69
32382: ST_TO_ADDR
// if not tmp then
32383: LD_VAR 0 2
32387: NOT
32388: IFFALSE 32392
// exit ;
32390: GO 32421
// for i in tmp do
32392: LD_ADDR_VAR 0 1
32396: PUSH
32397: LD_VAR 0 2
32401: PUSH
32402: FOR_IN
32403: IFFALSE 32419
// SetLives ( i , 300 ) ;
32405: LD_VAR 0 1
32409: PPUSH
32410: LD_INT 300
32412: PPUSH
32413: CALL_OW 234
32417: GO 32402
32419: POP
32420: POP
// end ;
32421: PPOPN 2
32423: END
// every 0 0$1 trigger s60 do var i , tmp ;
32424: LD_EXP 107
32428: IFFALSE 32497
32430: GO 32432
32432: DISABLE
32433: LD_INT 0
32435: PPUSH
32436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32437: LD_ADDR_VAR 0 2
32441: PUSH
32442: LD_INT 22
32444: PUSH
32445: LD_OWVAR 2
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PPUSH
32454: CALL_OW 69
32458: ST_TO_ADDR
// if not tmp then
32459: LD_VAR 0 2
32463: NOT
32464: IFFALSE 32468
// exit ;
32466: GO 32497
// for i in tmp do
32468: LD_ADDR_VAR 0 1
32472: PUSH
32473: LD_VAR 0 2
32477: PUSH
32478: FOR_IN
32479: IFFALSE 32495
// SetLives ( i , 600 ) ;
32481: LD_VAR 0 1
32485: PPUSH
32486: LD_INT 600
32488: PPUSH
32489: CALL_OW 234
32493: GO 32478
32495: POP
32496: POP
// end ;
32497: PPOPN 2
32499: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32500: LD_INT 0
32502: PPUSH
// case cmd of 301 :
32503: LD_VAR 0 1
32507: PUSH
32508: LD_INT 301
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32516
32514: GO 32548
32516: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32517: LD_VAR 0 6
32521: PPUSH
32522: LD_VAR 0 7
32526: PPUSH
32527: LD_VAR 0 8
32531: PPUSH
32532: LD_VAR 0 4
32536: PPUSH
32537: LD_VAR 0 5
32541: PPUSH
32542: CALL 33749 0 5
32546: GO 32669
32548: LD_INT 302
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32593
32556: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32557: LD_VAR 0 6
32561: PPUSH
32562: LD_VAR 0 7
32566: PPUSH
32567: LD_VAR 0 8
32571: PPUSH
32572: LD_VAR 0 9
32576: PPUSH
32577: LD_VAR 0 4
32581: PPUSH
32582: LD_VAR 0 5
32586: PPUSH
32587: CALL 33840 0 6
32591: GO 32669
32593: LD_INT 303
32595: DOUBLE
32596: EQUAL
32597: IFTRUE 32601
32599: GO 32638
32601: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32602: LD_VAR 0 6
32606: PPUSH
32607: LD_VAR 0 7
32611: PPUSH
32612: LD_VAR 0 8
32616: PPUSH
32617: LD_VAR 0 9
32621: PPUSH
32622: LD_VAR 0 4
32626: PPUSH
32627: LD_VAR 0 5
32631: PPUSH
32632: CALL 32674 0 6
32636: GO 32669
32638: LD_INT 304
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32646
32644: GO 32668
32646: POP
// hHackTeleport ( unit , x , y ) ; end ;
32647: LD_VAR 0 2
32651: PPUSH
32652: LD_VAR 0 4
32656: PPUSH
32657: LD_VAR 0 5
32661: PPUSH
32662: CALL 34433 0 3
32666: GO 32669
32668: POP
// end ;
32669: LD_VAR 0 12
32673: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32674: LD_INT 0
32676: PPUSH
32677: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32678: LD_VAR 0 1
32682: PUSH
32683: LD_INT 1
32685: LESS
32686: PUSH
32687: LD_VAR 0 1
32691: PUSH
32692: LD_INT 3
32694: GREATER
32695: OR
32696: PUSH
32697: LD_VAR 0 5
32701: PPUSH
32702: LD_VAR 0 6
32706: PPUSH
32707: CALL_OW 428
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33436
// uc_side := your_side ;
32716: LD_ADDR_OWVAR 20
32720: PUSH
32721: LD_OWVAR 2
32725: ST_TO_ADDR
// uc_nation := nation ;
32726: LD_ADDR_OWVAR 21
32730: PUSH
32731: LD_VAR 0 1
32735: ST_TO_ADDR
// bc_level = 1 ;
32736: LD_ADDR_OWVAR 43
32740: PUSH
32741: LD_INT 1
32743: ST_TO_ADDR
// case btype of 1 :
32744: LD_VAR 0 2
32748: PUSH
32749: LD_INT 1
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32757
32755: GO 32768
32757: POP
// bc_type := b_depot ; 2 :
32758: LD_ADDR_OWVAR 42
32762: PUSH
32763: LD_INT 0
32765: ST_TO_ADDR
32766: GO 33380
32768: LD_INT 2
32770: DOUBLE
32771: EQUAL
32772: IFTRUE 32776
32774: GO 32787
32776: POP
// bc_type := b_warehouse ; 3 :
32777: LD_ADDR_OWVAR 42
32781: PUSH
32782: LD_INT 1
32784: ST_TO_ADDR
32785: GO 33380
32787: LD_INT 3
32789: DOUBLE
32790: EQUAL
32791: IFTRUE 32795
32793: GO 32806
32795: POP
// bc_type := b_lab ; 4 .. 9 :
32796: LD_ADDR_OWVAR 42
32800: PUSH
32801: LD_INT 6
32803: ST_TO_ADDR
32804: GO 33380
32806: LD_INT 4
32808: DOUBLE
32809: GREATEREQUAL
32810: IFFALSE 32818
32812: LD_INT 9
32814: DOUBLE
32815: LESSEQUAL
32816: IFTRUE 32820
32818: GO 32872
32820: POP
// begin bc_type := b_lab_half ;
32821: LD_ADDR_OWVAR 42
32825: PUSH
32826: LD_INT 7
32828: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32829: LD_ADDR_OWVAR 44
32833: PUSH
32834: LD_INT 10
32836: PUSH
32837: LD_INT 11
32839: PUSH
32840: LD_INT 12
32842: PUSH
32843: LD_INT 15
32845: PUSH
32846: LD_INT 14
32848: PUSH
32849: LD_INT 13
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: PUSH
32860: LD_VAR 0 2
32864: PUSH
32865: LD_INT 3
32867: MINUS
32868: ARRAY
32869: ST_TO_ADDR
// end ; 10 .. 13 :
32870: GO 33380
32872: LD_INT 10
32874: DOUBLE
32875: GREATEREQUAL
32876: IFFALSE 32884
32878: LD_INT 13
32880: DOUBLE
32881: LESSEQUAL
32882: IFTRUE 32886
32884: GO 32963
32886: POP
// begin bc_type := b_lab_full ;
32887: LD_ADDR_OWVAR 42
32891: PUSH
32892: LD_INT 8
32894: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32895: LD_ADDR_OWVAR 44
32899: PUSH
32900: LD_INT 10
32902: PUSH
32903: LD_INT 12
32905: PUSH
32906: LD_INT 14
32908: PUSH
32909: LD_INT 13
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: PUSH
32918: LD_VAR 0 2
32922: PUSH
32923: LD_INT 9
32925: MINUS
32926: ARRAY
32927: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32928: LD_ADDR_OWVAR 45
32932: PUSH
32933: LD_INT 11
32935: PUSH
32936: LD_INT 15
32938: PUSH
32939: LD_INT 12
32941: PUSH
32942: LD_INT 15
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: PUSH
32951: LD_VAR 0 2
32955: PUSH
32956: LD_INT 9
32958: MINUS
32959: ARRAY
32960: ST_TO_ADDR
// end ; 14 :
32961: GO 33380
32963: LD_INT 14
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32982
32971: POP
// bc_type := b_workshop ; 15 :
32972: LD_ADDR_OWVAR 42
32976: PUSH
32977: LD_INT 2
32979: ST_TO_ADDR
32980: GO 33380
32982: LD_INT 15
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33001
32990: POP
// bc_type := b_factory ; 16 :
32991: LD_ADDR_OWVAR 42
32995: PUSH
32996: LD_INT 3
32998: ST_TO_ADDR
32999: GO 33380
33001: LD_INT 16
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33020
33009: POP
// bc_type := b_ext_gun ; 17 :
33010: LD_ADDR_OWVAR 42
33014: PUSH
33015: LD_INT 17
33017: ST_TO_ADDR
33018: GO 33380
33020: LD_INT 17
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33028
33026: GO 33056
33028: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33029: LD_ADDR_OWVAR 42
33033: PUSH
33034: LD_INT 19
33036: PUSH
33037: LD_INT 23
33039: PUSH
33040: LD_INT 19
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: PUSH
33048: LD_VAR 0 1
33052: ARRAY
33053: ST_TO_ADDR
33054: GO 33380
33056: LD_INT 18
33058: DOUBLE
33059: EQUAL
33060: IFTRUE 33064
33062: GO 33075
33064: POP
// bc_type := b_ext_radar ; 19 :
33065: LD_ADDR_OWVAR 42
33069: PUSH
33070: LD_INT 20
33072: ST_TO_ADDR
33073: GO 33380
33075: LD_INT 19
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33094
33083: POP
// bc_type := b_ext_radio ; 20 :
33084: LD_ADDR_OWVAR 42
33088: PUSH
33089: LD_INT 22
33091: ST_TO_ADDR
33092: GO 33380
33094: LD_INT 20
33096: DOUBLE
33097: EQUAL
33098: IFTRUE 33102
33100: GO 33113
33102: POP
// bc_type := b_ext_siberium ; 21 :
33103: LD_ADDR_OWVAR 42
33107: PUSH
33108: LD_INT 21
33110: ST_TO_ADDR
33111: GO 33380
33113: LD_INT 21
33115: DOUBLE
33116: EQUAL
33117: IFTRUE 33121
33119: GO 33132
33121: POP
// bc_type := b_ext_computer ; 22 :
33122: LD_ADDR_OWVAR 42
33126: PUSH
33127: LD_INT 24
33129: ST_TO_ADDR
33130: GO 33380
33132: LD_INT 22
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33151
33140: POP
// bc_type := b_ext_track ; 23 :
33141: LD_ADDR_OWVAR 42
33145: PUSH
33146: LD_INT 16
33148: ST_TO_ADDR
33149: GO 33380
33151: LD_INT 23
33153: DOUBLE
33154: EQUAL
33155: IFTRUE 33159
33157: GO 33170
33159: POP
// bc_type := b_ext_laser ; 24 :
33160: LD_ADDR_OWVAR 42
33164: PUSH
33165: LD_INT 25
33167: ST_TO_ADDR
33168: GO 33380
33170: LD_INT 24
33172: DOUBLE
33173: EQUAL
33174: IFTRUE 33178
33176: GO 33189
33178: POP
// bc_type := b_control_tower ; 25 :
33179: LD_ADDR_OWVAR 42
33183: PUSH
33184: LD_INT 36
33186: ST_TO_ADDR
33187: GO 33380
33189: LD_INT 25
33191: DOUBLE
33192: EQUAL
33193: IFTRUE 33197
33195: GO 33208
33197: POP
// bc_type := b_breastwork ; 26 :
33198: LD_ADDR_OWVAR 42
33202: PUSH
33203: LD_INT 31
33205: ST_TO_ADDR
33206: GO 33380
33208: LD_INT 26
33210: DOUBLE
33211: EQUAL
33212: IFTRUE 33216
33214: GO 33227
33216: POP
// bc_type := b_bunker ; 27 :
33217: LD_ADDR_OWVAR 42
33221: PUSH
33222: LD_INT 32
33224: ST_TO_ADDR
33225: GO 33380
33227: LD_INT 27
33229: DOUBLE
33230: EQUAL
33231: IFTRUE 33235
33233: GO 33246
33235: POP
// bc_type := b_turret ; 28 :
33236: LD_ADDR_OWVAR 42
33240: PUSH
33241: LD_INT 33
33243: ST_TO_ADDR
33244: GO 33380
33246: LD_INT 28
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33254
33252: GO 33265
33254: POP
// bc_type := b_armoury ; 29 :
33255: LD_ADDR_OWVAR 42
33259: PUSH
33260: LD_INT 4
33262: ST_TO_ADDR
33263: GO 33380
33265: LD_INT 29
33267: DOUBLE
33268: EQUAL
33269: IFTRUE 33273
33271: GO 33284
33273: POP
// bc_type := b_barracks ; 30 :
33274: LD_ADDR_OWVAR 42
33278: PUSH
33279: LD_INT 5
33281: ST_TO_ADDR
33282: GO 33380
33284: LD_INT 30
33286: DOUBLE
33287: EQUAL
33288: IFTRUE 33292
33290: GO 33303
33292: POP
// bc_type := b_solar_power ; 31 :
33293: LD_ADDR_OWVAR 42
33297: PUSH
33298: LD_INT 27
33300: ST_TO_ADDR
33301: GO 33380
33303: LD_INT 31
33305: DOUBLE
33306: EQUAL
33307: IFTRUE 33311
33309: GO 33322
33311: POP
// bc_type := b_oil_power ; 32 :
33312: LD_ADDR_OWVAR 42
33316: PUSH
33317: LD_INT 26
33319: ST_TO_ADDR
33320: GO 33380
33322: LD_INT 32
33324: DOUBLE
33325: EQUAL
33326: IFTRUE 33330
33328: GO 33341
33330: POP
// bc_type := b_siberite_power ; 33 :
33331: LD_ADDR_OWVAR 42
33335: PUSH
33336: LD_INT 28
33338: ST_TO_ADDR
33339: GO 33380
33341: LD_INT 33
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33349
33347: GO 33360
33349: POP
// bc_type := b_oil_mine ; 34 :
33350: LD_ADDR_OWVAR 42
33354: PUSH
33355: LD_INT 29
33357: ST_TO_ADDR
33358: GO 33380
33360: LD_INT 34
33362: DOUBLE
33363: EQUAL
33364: IFTRUE 33368
33366: GO 33379
33368: POP
// bc_type := b_siberite_mine ; end ;
33369: LD_ADDR_OWVAR 42
33373: PUSH
33374: LD_INT 30
33376: ST_TO_ADDR
33377: GO 33380
33379: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33380: LD_ADDR_VAR 0 8
33384: PUSH
33385: LD_VAR 0 5
33389: PPUSH
33390: LD_VAR 0 6
33394: PPUSH
33395: LD_VAR 0 3
33399: PPUSH
33400: CALL_OW 47
33404: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33405: LD_OWVAR 42
33409: PUSH
33410: LD_INT 32
33412: PUSH
33413: LD_INT 33
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: IN
33420: IFFALSE 33436
// PlaceWeaponTurret ( b , weapon ) ;
33422: LD_VAR 0 8
33426: PPUSH
33427: LD_VAR 0 4
33431: PPUSH
33432: CALL_OW 431
// end ;
33436: LD_VAR 0 7
33440: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33441: LD_INT 0
33443: PPUSH
33444: PPUSH
33445: PPUSH
33446: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33447: LD_ADDR_VAR 0 4
33451: PUSH
33452: LD_INT 22
33454: PUSH
33455: LD_OWVAR 2
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: LD_INT 30
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 30
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PPUSH
33496: CALL_OW 69
33500: ST_TO_ADDR
// if not tmp then
33501: LD_VAR 0 4
33505: NOT
33506: IFFALSE 33510
// exit ;
33508: GO 33569
// for i in tmp do
33510: LD_ADDR_VAR 0 2
33514: PUSH
33515: LD_VAR 0 4
33519: PUSH
33520: FOR_IN
33521: IFFALSE 33567
// for j = 1 to 3 do
33523: LD_ADDR_VAR 0 3
33527: PUSH
33528: DOUBLE
33529: LD_INT 1
33531: DEC
33532: ST_TO_ADDR
33533: LD_INT 3
33535: PUSH
33536: FOR_TO
33537: IFFALSE 33563
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33539: LD_VAR 0 2
33543: PPUSH
33544: CALL_OW 274
33548: PPUSH
33549: LD_VAR 0 3
33553: PPUSH
33554: LD_INT 99999
33556: PPUSH
33557: CALL_OW 277
33561: GO 33536
33563: POP
33564: POP
33565: GO 33520
33567: POP
33568: POP
// end ;
33569: LD_VAR 0 1
33573: RET
// export function hHackSetLevel10 ; var i , j ; begin
33574: LD_INT 0
33576: PPUSH
33577: PPUSH
33578: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33579: LD_ADDR_VAR 0 2
33583: PUSH
33584: LD_INT 21
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PPUSH
33594: CALL_OW 69
33598: PUSH
33599: FOR_IN
33600: IFFALSE 33652
// if IsSelected ( i ) then
33602: LD_VAR 0 2
33606: PPUSH
33607: CALL_OW 306
33611: IFFALSE 33650
// begin for j := 1 to 4 do
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: DOUBLE
33619: LD_INT 1
33621: DEC
33622: ST_TO_ADDR
33623: LD_INT 4
33625: PUSH
33626: FOR_TO
33627: IFFALSE 33648
// SetSkill ( i , j , 10 ) ;
33629: LD_VAR 0 2
33633: PPUSH
33634: LD_VAR 0 3
33638: PPUSH
33639: LD_INT 10
33641: PPUSH
33642: CALL_OW 237
33646: GO 33626
33648: POP
33649: POP
// end ;
33650: GO 33599
33652: POP
33653: POP
// end ;
33654: LD_VAR 0 1
33658: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33659: LD_INT 0
33661: PPUSH
33662: PPUSH
33663: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33664: LD_ADDR_VAR 0 2
33668: PUSH
33669: LD_INT 22
33671: PUSH
33672: LD_OWVAR 2
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 21
33683: PUSH
33684: LD_INT 1
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PPUSH
33695: CALL_OW 69
33699: PUSH
33700: FOR_IN
33701: IFFALSE 33742
// begin for j := 1 to 4 do
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: DOUBLE
33709: LD_INT 1
33711: DEC
33712: ST_TO_ADDR
33713: LD_INT 4
33715: PUSH
33716: FOR_TO
33717: IFFALSE 33738
// SetSkill ( i , j , 10 ) ;
33719: LD_VAR 0 2
33723: PPUSH
33724: LD_VAR 0 3
33728: PPUSH
33729: LD_INT 10
33731: PPUSH
33732: CALL_OW 237
33736: GO 33716
33738: POP
33739: POP
// end ;
33740: GO 33700
33742: POP
33743: POP
// end ;
33744: LD_VAR 0 1
33748: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33749: LD_INT 0
33751: PPUSH
// uc_side := your_side ;
33752: LD_ADDR_OWVAR 20
33756: PUSH
33757: LD_OWVAR 2
33761: ST_TO_ADDR
// uc_nation := nation ;
33762: LD_ADDR_OWVAR 21
33766: PUSH
33767: LD_VAR 0 1
33771: ST_TO_ADDR
// InitHc ;
33772: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33776: LD_INT 0
33778: PPUSH
33779: LD_VAR 0 2
33783: PPUSH
33784: LD_VAR 0 3
33788: PPUSH
33789: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33793: LD_VAR 0 4
33797: PPUSH
33798: LD_VAR 0 5
33802: PPUSH
33803: CALL_OW 428
33807: PUSH
33808: LD_INT 0
33810: EQUAL
33811: IFFALSE 33835
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33813: CALL_OW 44
33817: PPUSH
33818: LD_VAR 0 4
33822: PPUSH
33823: LD_VAR 0 5
33827: PPUSH
33828: LD_INT 1
33830: PPUSH
33831: CALL_OW 48
// end ;
33835: LD_VAR 0 6
33839: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33840: LD_INT 0
33842: PPUSH
33843: PPUSH
// uc_side := your_side ;
33844: LD_ADDR_OWVAR 20
33848: PUSH
33849: LD_OWVAR 2
33853: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33854: LD_VAR 0 1
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 3
33867: PUSH
33868: LD_INT 4
33870: PUSH
33871: LD_INT 5
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: IN
33881: IFFALSE 33893
// uc_nation := nation_american else
33883: LD_ADDR_OWVAR 21
33887: PUSH
33888: LD_INT 1
33890: ST_TO_ADDR
33891: GO 33936
// if chassis in [ 11 , 12 , 13 , 14 ] then
33893: LD_VAR 0 1
33897: PUSH
33898: LD_INT 11
33900: PUSH
33901: LD_INT 12
33903: PUSH
33904: LD_INT 13
33906: PUSH
33907: LD_INT 14
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: IN
33916: IFFALSE 33928
// uc_nation := nation_arabian else
33918: LD_ADDR_OWVAR 21
33922: PUSH
33923: LD_INT 2
33925: ST_TO_ADDR
33926: GO 33936
// uc_nation := nation_russian ;
33928: LD_ADDR_OWVAR 21
33932: PUSH
33933: LD_INT 3
33935: ST_TO_ADDR
// vc_chassis := chassis ;
33936: LD_ADDR_OWVAR 37
33940: PUSH
33941: LD_VAR 0 1
33945: ST_TO_ADDR
// vc_engine := engine ;
33946: LD_ADDR_OWVAR 39
33950: PUSH
33951: LD_VAR 0 2
33955: ST_TO_ADDR
// vc_control := control ;
33956: LD_ADDR_OWVAR 38
33960: PUSH
33961: LD_VAR 0 3
33965: ST_TO_ADDR
// vc_weapon := weapon ;
33966: LD_ADDR_OWVAR 40
33970: PUSH
33971: LD_VAR 0 4
33975: ST_TO_ADDR
// un := CreateVehicle ;
33976: LD_ADDR_VAR 0 8
33980: PUSH
33981: CALL_OW 45
33985: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33986: LD_VAR 0 8
33990: PPUSH
33991: LD_INT 0
33993: PPUSH
33994: LD_INT 5
33996: PPUSH
33997: CALL_OW 12
34001: PPUSH
34002: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34006: LD_VAR 0 8
34010: PPUSH
34011: LD_VAR 0 5
34015: PPUSH
34016: LD_VAR 0 6
34020: PPUSH
34021: LD_INT 1
34023: PPUSH
34024: CALL_OW 48
// end ;
34028: LD_VAR 0 7
34032: RET
// export hInvincible ; every 1 do
34033: GO 34035
34035: DISABLE
// hInvincible := [ ] ;
34036: LD_ADDR_EXP 108
34040: PUSH
34041: EMPTY
34042: ST_TO_ADDR
34043: END
// every 10 do var i ;
34044: GO 34046
34046: DISABLE
34047: LD_INT 0
34049: PPUSH
// begin enable ;
34050: ENABLE
// if not hInvincible then
34051: LD_EXP 108
34055: NOT
34056: IFFALSE 34060
// exit ;
34058: GO 34104
// for i in hInvincible do
34060: LD_ADDR_VAR 0 1
34064: PUSH
34065: LD_EXP 108
34069: PUSH
34070: FOR_IN
34071: IFFALSE 34102
// if GetLives ( i ) < 1000 then
34073: LD_VAR 0 1
34077: PPUSH
34078: CALL_OW 256
34082: PUSH
34083: LD_INT 1000
34085: LESS
34086: IFFALSE 34100
// SetLives ( i , 1000 ) ;
34088: LD_VAR 0 1
34092: PPUSH
34093: LD_INT 1000
34095: PPUSH
34096: CALL_OW 234
34100: GO 34070
34102: POP
34103: POP
// end ;
34104: PPOPN 1
34106: END
// export function hHackInvincible ; var i ; begin
34107: LD_INT 0
34109: PPUSH
34110: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34111: LD_ADDR_VAR 0 2
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 21
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 21
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: PPUSH
34144: CALL_OW 69
34148: PUSH
34149: FOR_IN
34150: IFFALSE 34211
// if IsSelected ( i ) then
34152: LD_VAR 0 2
34156: PPUSH
34157: CALL_OW 306
34161: IFFALSE 34209
// begin if i in hInvincible then
34163: LD_VAR 0 2
34167: PUSH
34168: LD_EXP 108
34172: IN
34173: IFFALSE 34193
// hInvincible := hInvincible diff i else
34175: LD_ADDR_EXP 108
34179: PUSH
34180: LD_EXP 108
34184: PUSH
34185: LD_VAR 0 2
34189: DIFF
34190: ST_TO_ADDR
34191: GO 34209
// hInvincible := hInvincible union i ;
34193: LD_ADDR_EXP 108
34197: PUSH
34198: LD_EXP 108
34202: PUSH
34203: LD_VAR 0 2
34207: UNION
34208: ST_TO_ADDR
// end ;
34209: GO 34149
34211: POP
34212: POP
// end ;
34213: LD_VAR 0 1
34217: RET
// export function hHackInvisible ; var i , j ; begin
34218: LD_INT 0
34220: PPUSH
34221: PPUSH
34222: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34223: LD_ADDR_VAR 0 2
34227: PUSH
34228: LD_INT 21
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PPUSH
34238: CALL_OW 69
34242: PUSH
34243: FOR_IN
34244: IFFALSE 34268
// if IsSelected ( i ) then
34246: LD_VAR 0 2
34250: PPUSH
34251: CALL_OW 306
34255: IFFALSE 34266
// ComForceInvisible ( i ) ;
34257: LD_VAR 0 2
34261: PPUSH
34262: CALL_OW 496
34266: GO 34243
34268: POP
34269: POP
// end ;
34270: LD_VAR 0 1
34274: RET
// export function hHackChangeYourSide ; begin
34275: LD_INT 0
34277: PPUSH
// if your_side = 8 then
34278: LD_OWVAR 2
34282: PUSH
34283: LD_INT 8
34285: EQUAL
34286: IFFALSE 34298
// your_side := 0 else
34288: LD_ADDR_OWVAR 2
34292: PUSH
34293: LD_INT 0
34295: ST_TO_ADDR
34296: GO 34312
// your_side := your_side + 1 ;
34298: LD_ADDR_OWVAR 2
34302: PUSH
34303: LD_OWVAR 2
34307: PUSH
34308: LD_INT 1
34310: PLUS
34311: ST_TO_ADDR
// end ;
34312: LD_VAR 0 1
34316: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34317: LD_INT 0
34319: PPUSH
34320: PPUSH
34321: PPUSH
// for i in all_units do
34322: LD_ADDR_VAR 0 2
34326: PUSH
34327: LD_OWVAR 3
34331: PUSH
34332: FOR_IN
34333: IFFALSE 34411
// if IsSelected ( i ) then
34335: LD_VAR 0 2
34339: PPUSH
34340: CALL_OW 306
34344: IFFALSE 34409
// begin j := GetSide ( i ) ;
34346: LD_ADDR_VAR 0 3
34350: PUSH
34351: LD_VAR 0 2
34355: PPUSH
34356: CALL_OW 255
34360: ST_TO_ADDR
// if j = 8 then
34361: LD_VAR 0 3
34365: PUSH
34366: LD_INT 8
34368: EQUAL
34369: IFFALSE 34381
// j := 0 else
34371: LD_ADDR_VAR 0 3
34375: PUSH
34376: LD_INT 0
34378: ST_TO_ADDR
34379: GO 34395
// j := j + 1 ;
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_VAR 0 3
34390: PUSH
34391: LD_INT 1
34393: PLUS
34394: ST_TO_ADDR
// SetSide ( i , j ) ;
34395: LD_VAR 0 2
34399: PPUSH
34400: LD_VAR 0 3
34404: PPUSH
34405: CALL_OW 235
// end ;
34409: GO 34332
34411: POP
34412: POP
// end ;
34413: LD_VAR 0 1
34417: RET
// export function hHackFog ; begin
34418: LD_INT 0
34420: PPUSH
// FogOff ( true ) ;
34421: LD_INT 1
34423: PPUSH
34424: CALL_OW 344
// end ;
34428: LD_VAR 0 1
34432: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34433: LD_INT 0
34435: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34436: LD_VAR 0 1
34440: PPUSH
34441: LD_VAR 0 2
34445: PPUSH
34446: LD_VAR 0 3
34450: PPUSH
34451: LD_INT 1
34453: PPUSH
34454: LD_INT 1
34456: PPUSH
34457: CALL_OW 483
// CenterOnXY ( x , y ) ;
34461: LD_VAR 0 2
34465: PPUSH
34466: LD_VAR 0 3
34470: PPUSH
34471: CALL_OW 84
// end ;
34475: LD_VAR 0 4
34479: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34480: LD_INT 0
34482: PPUSH
34483: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34484: LD_VAR 0 1
34488: NOT
34489: PUSH
34490: LD_VAR 0 2
34494: PPUSH
34495: LD_VAR 0 3
34499: PPUSH
34500: CALL_OW 488
34504: NOT
34505: OR
34506: PUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 266
34516: PUSH
34517: LD_INT 3
34519: NONEQUAL
34520: PUSH
34521: LD_VAR 0 1
34525: PPUSH
34526: CALL_OW 247
34530: PUSH
34531: LD_INT 1
34533: EQUAL
34534: NOT
34535: AND
34536: OR
34537: IFFALSE 34541
// exit ;
34539: GO 34690
// if GetType ( factory ) = unit_human then
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 247
34550: PUSH
34551: LD_INT 1
34553: EQUAL
34554: IFFALSE 34571
// factory := IsInUnit ( factory ) ;
34556: LD_ADDR_VAR 0 1
34560: PUSH
34561: LD_VAR 0 1
34565: PPUSH
34566: CALL_OW 310
34570: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 266
34580: PUSH
34581: LD_INT 3
34583: NONEQUAL
34584: IFFALSE 34588
// exit ;
34586: GO 34690
// if HexInfo ( x , y ) = factory then
34588: LD_VAR 0 2
34592: PPUSH
34593: LD_VAR 0 3
34597: PPUSH
34598: CALL_OW 428
34602: PUSH
34603: LD_VAR 0 1
34607: EQUAL
34608: IFFALSE 34635
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34610: LD_ADDR_EXP 109
34614: PUSH
34615: LD_EXP 109
34619: PPUSH
34620: LD_VAR 0 1
34624: PPUSH
34625: LD_INT 0
34627: PPUSH
34628: CALL_OW 1
34632: ST_TO_ADDR
34633: GO 34686
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34635: LD_ADDR_EXP 109
34639: PUSH
34640: LD_EXP 109
34644: PPUSH
34645: LD_VAR 0 1
34649: PPUSH
34650: LD_VAR 0 1
34654: PPUSH
34655: CALL_OW 255
34659: PUSH
34660: LD_VAR 0 1
34664: PUSH
34665: LD_VAR 0 2
34669: PUSH
34670: LD_VAR 0 3
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: PPUSH
34681: CALL_OW 1
34685: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34686: CALL 34695 0 0
// end ;
34690: LD_VAR 0 4
34694: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34695: LD_INT 0
34697: PPUSH
34698: PPUSH
34699: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34700: LD_STRING resetFactoryWaypoint();
34702: PPUSH
34703: CALL_OW 559
// if factoryWaypoints then
34707: LD_EXP 109
34711: IFFALSE 34837
// begin list := PrepareArray ( factoryWaypoints ) ;
34713: LD_ADDR_VAR 0 3
34717: PUSH
34718: LD_EXP 109
34722: PPUSH
34723: CALL 81306 0 1
34727: ST_TO_ADDR
// for i := 1 to list do
34728: LD_ADDR_VAR 0 2
34732: PUSH
34733: DOUBLE
34734: LD_INT 1
34736: DEC
34737: ST_TO_ADDR
34738: LD_VAR 0 3
34742: PUSH
34743: FOR_TO
34744: IFFALSE 34835
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34746: LD_STRING setFactoryWaypointXY(
34748: PUSH
34749: LD_VAR 0 3
34753: PUSH
34754: LD_VAR 0 2
34758: ARRAY
34759: PUSH
34760: LD_INT 1
34762: ARRAY
34763: STR
34764: PUSH
34765: LD_STRING ,
34767: STR
34768: PUSH
34769: LD_VAR 0 3
34773: PUSH
34774: LD_VAR 0 2
34778: ARRAY
34779: PUSH
34780: LD_INT 2
34782: ARRAY
34783: STR
34784: PUSH
34785: LD_STRING ,
34787: STR
34788: PUSH
34789: LD_VAR 0 3
34793: PUSH
34794: LD_VAR 0 2
34798: ARRAY
34799: PUSH
34800: LD_INT 3
34802: ARRAY
34803: STR
34804: PUSH
34805: LD_STRING ,
34807: STR
34808: PUSH
34809: LD_VAR 0 3
34813: PUSH
34814: LD_VAR 0 2
34818: ARRAY
34819: PUSH
34820: LD_INT 4
34822: ARRAY
34823: STR
34824: PUSH
34825: LD_STRING )
34827: STR
34828: PPUSH
34829: CALL_OW 559
34833: GO 34743
34835: POP
34836: POP
// end ; end ;
34837: LD_VAR 0 1
34841: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34842: LD_INT 0
34844: PPUSH
// if HexInfo ( x , y ) = warehouse then
34845: LD_VAR 0 2
34849: PPUSH
34850: LD_VAR 0 3
34854: PPUSH
34855: CALL_OW 428
34859: PUSH
34860: LD_VAR 0 1
34864: EQUAL
34865: IFFALSE 34892
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34867: LD_ADDR_EXP 110
34871: PUSH
34872: LD_EXP 110
34876: PPUSH
34877: LD_VAR 0 1
34881: PPUSH
34882: LD_INT 0
34884: PPUSH
34885: CALL_OW 1
34889: ST_TO_ADDR
34890: GO 34943
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34892: LD_ADDR_EXP 110
34896: PUSH
34897: LD_EXP 110
34901: PPUSH
34902: LD_VAR 0 1
34906: PPUSH
34907: LD_VAR 0 1
34911: PPUSH
34912: CALL_OW 255
34916: PUSH
34917: LD_VAR 0 1
34921: PUSH
34922: LD_VAR 0 2
34926: PUSH
34927: LD_VAR 0 3
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: PPUSH
34938: CALL_OW 1
34942: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34943: CALL 34952 0 0
// end ;
34947: LD_VAR 0 4
34951: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34952: LD_INT 0
34954: PPUSH
34955: PPUSH
34956: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34957: LD_STRING resetWarehouseGatheringPoints();
34959: PPUSH
34960: CALL_OW 559
// if warehouseGatheringPoints then
34964: LD_EXP 110
34968: IFFALSE 35094
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_EXP 110
34979: PPUSH
34980: CALL 81306 0 1
34984: ST_TO_ADDR
// for i := 1 to list do
34985: LD_ADDR_VAR 0 2
34989: PUSH
34990: DOUBLE
34991: LD_INT 1
34993: DEC
34994: ST_TO_ADDR
34995: LD_VAR 0 3
34999: PUSH
35000: FOR_TO
35001: IFFALSE 35092
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35003: LD_STRING setWarehouseGatheringPointXY(
35005: PUSH
35006: LD_VAR 0 3
35010: PUSH
35011: LD_VAR 0 2
35015: ARRAY
35016: PUSH
35017: LD_INT 1
35019: ARRAY
35020: STR
35021: PUSH
35022: LD_STRING ,
35024: STR
35025: PUSH
35026: LD_VAR 0 3
35030: PUSH
35031: LD_VAR 0 2
35035: ARRAY
35036: PUSH
35037: LD_INT 2
35039: ARRAY
35040: STR
35041: PUSH
35042: LD_STRING ,
35044: STR
35045: PUSH
35046: LD_VAR 0 3
35050: PUSH
35051: LD_VAR 0 2
35055: ARRAY
35056: PUSH
35057: LD_INT 3
35059: ARRAY
35060: STR
35061: PUSH
35062: LD_STRING ,
35064: STR
35065: PUSH
35066: LD_VAR 0 3
35070: PUSH
35071: LD_VAR 0 2
35075: ARRAY
35076: PUSH
35077: LD_INT 4
35079: ARRAY
35080: STR
35081: PUSH
35082: LD_STRING )
35084: STR
35085: PPUSH
35086: CALL_OW 559
35090: GO 35000
35092: POP
35093: POP
// end ; end ;
35094: LD_VAR 0 1
35098: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35099: LD_EXP 110
35103: IFFALSE 35788
35105: GO 35107
35107: DISABLE
35108: LD_INT 0
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
35116: PPUSH
35117: PPUSH
35118: PPUSH
// begin enable ;
35119: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35120: LD_ADDR_VAR 0 3
35124: PUSH
35125: LD_EXP 110
35129: PPUSH
35130: CALL 81306 0 1
35134: ST_TO_ADDR
// if not list then
35135: LD_VAR 0 3
35139: NOT
35140: IFFALSE 35144
// exit ;
35142: GO 35788
// for i := 1 to list do
35144: LD_ADDR_VAR 0 1
35148: PUSH
35149: DOUBLE
35150: LD_INT 1
35152: DEC
35153: ST_TO_ADDR
35154: LD_VAR 0 3
35158: PUSH
35159: FOR_TO
35160: IFFALSE 35786
// begin depot := list [ i ] [ 2 ] ;
35162: LD_ADDR_VAR 0 8
35166: PUSH
35167: LD_VAR 0 3
35171: PUSH
35172: LD_VAR 0 1
35176: ARRAY
35177: PUSH
35178: LD_INT 2
35180: ARRAY
35181: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35182: LD_ADDR_VAR 0 5
35186: PUSH
35187: LD_VAR 0 3
35191: PUSH
35192: LD_VAR 0 1
35196: ARRAY
35197: PUSH
35198: LD_INT 1
35200: ARRAY
35201: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35202: LD_VAR 0 8
35206: PPUSH
35207: CALL_OW 301
35211: PUSH
35212: LD_VAR 0 5
35216: PUSH
35217: LD_VAR 0 8
35221: PPUSH
35222: CALL_OW 255
35226: NONEQUAL
35227: OR
35228: IFFALSE 35257
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35230: LD_ADDR_EXP 110
35234: PUSH
35235: LD_EXP 110
35239: PPUSH
35240: LD_VAR 0 8
35244: PPUSH
35245: LD_INT 0
35247: PPUSH
35248: CALL_OW 1
35252: ST_TO_ADDR
// exit ;
35253: POP
35254: POP
35255: GO 35788
// end ; x := list [ i ] [ 3 ] ;
35257: LD_ADDR_VAR 0 6
35261: PUSH
35262: LD_VAR 0 3
35266: PUSH
35267: LD_VAR 0 1
35271: ARRAY
35272: PUSH
35273: LD_INT 3
35275: ARRAY
35276: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35277: LD_ADDR_VAR 0 7
35281: PUSH
35282: LD_VAR 0 3
35286: PUSH
35287: LD_VAR 0 1
35291: ARRAY
35292: PUSH
35293: LD_INT 4
35295: ARRAY
35296: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35297: LD_ADDR_VAR 0 9
35301: PUSH
35302: LD_VAR 0 6
35306: PPUSH
35307: LD_VAR 0 7
35311: PPUSH
35312: LD_INT 16
35314: PPUSH
35315: CALL 79894 0 3
35319: ST_TO_ADDR
// if not cratesNearbyPoint then
35320: LD_VAR 0 9
35324: NOT
35325: IFFALSE 35331
// exit ;
35327: POP
35328: POP
35329: GO 35788
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35331: LD_ADDR_VAR 0 4
35335: PUSH
35336: LD_INT 22
35338: PUSH
35339: LD_VAR 0 5
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 3
35350: PUSH
35351: LD_INT 60
35353: PUSH
35354: EMPTY
35355: LIST
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 91
35363: PUSH
35364: LD_VAR 0 8
35368: PUSH
35369: LD_INT 6
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: LD_INT 25
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 25
35392: PUSH
35393: LD_INT 16
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: PPUSH
35411: CALL_OW 69
35415: PUSH
35416: LD_VAR 0 8
35420: PPUSH
35421: CALL_OW 313
35425: PPUSH
35426: LD_INT 3
35428: PUSH
35429: LD_INT 60
35431: PUSH
35432: EMPTY
35433: LIST
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: LD_INT 25
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 25
35454: PUSH
35455: LD_INT 16
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PPUSH
35471: CALL_OW 72
35475: UNION
35476: ST_TO_ADDR
// if tmp then
35477: LD_VAR 0 4
35481: IFFALSE 35561
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35483: LD_ADDR_VAR 0 4
35487: PUSH
35488: LD_VAR 0 4
35492: PPUSH
35493: LD_INT 3
35495: PPUSH
35496: CALL 77863 0 2
35500: ST_TO_ADDR
// for j in tmp do
35501: LD_ADDR_VAR 0 2
35505: PUSH
35506: LD_VAR 0 4
35510: PUSH
35511: FOR_IN
35512: IFFALSE 35555
// begin if IsInUnit ( j ) then
35514: LD_VAR 0 2
35518: PPUSH
35519: CALL_OW 310
35523: IFFALSE 35534
// ComExit ( j ) ;
35525: LD_VAR 0 2
35529: PPUSH
35530: CALL 77946 0 1
// AddComCollect ( j , x , y ) ;
35534: LD_VAR 0 2
35538: PPUSH
35539: LD_VAR 0 6
35543: PPUSH
35544: LD_VAR 0 7
35548: PPUSH
35549: CALL_OW 177
// end ;
35553: GO 35511
35555: POP
35556: POP
// exit ;
35557: POP
35558: POP
35559: GO 35788
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35561: LD_ADDR_VAR 0 4
35565: PUSH
35566: LD_INT 22
35568: PUSH
35569: LD_VAR 0 5
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 91
35580: PUSH
35581: LD_VAR 0 8
35585: PUSH
35586: LD_INT 8
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: PUSH
35597: LD_INT 34
35599: PUSH
35600: LD_INT 12
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 34
35609: PUSH
35610: LD_INT 51
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 34
35619: PUSH
35620: LD_INT 32
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 34
35629: PUSH
35630: LD_INT 89
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: PPUSH
35649: CALL_OW 69
35653: ST_TO_ADDR
// if tmp then
35654: LD_VAR 0 4
35658: IFFALSE 35784
// begin for j in tmp do
35660: LD_ADDR_VAR 0 2
35664: PUSH
35665: LD_VAR 0 4
35669: PUSH
35670: FOR_IN
35671: IFFALSE 35782
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35673: LD_VAR 0 2
35677: PPUSH
35678: CALL_OW 262
35682: PUSH
35683: LD_INT 3
35685: EQUAL
35686: PUSH
35687: LD_VAR 0 2
35691: PPUSH
35692: CALL_OW 261
35696: PUSH
35697: LD_INT 20
35699: GREATER
35700: OR
35701: PUSH
35702: LD_VAR 0 2
35706: PPUSH
35707: CALL_OW 314
35711: NOT
35712: AND
35713: PUSH
35714: LD_VAR 0 2
35718: PPUSH
35719: CALL_OW 263
35723: PUSH
35724: LD_INT 1
35726: NONEQUAL
35727: PUSH
35728: LD_VAR 0 2
35732: PPUSH
35733: CALL_OW 311
35737: OR
35738: AND
35739: IFFALSE 35780
// begin ComCollect ( j , x , y ) ;
35741: LD_VAR 0 2
35745: PPUSH
35746: LD_VAR 0 6
35750: PPUSH
35751: LD_VAR 0 7
35755: PPUSH
35756: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35760: LD_VAR 0 2
35764: PPUSH
35765: LD_VAR 0 8
35769: PPUSH
35770: CALL_OW 172
// exit ;
35774: POP
35775: POP
35776: POP
35777: POP
35778: GO 35788
// end ;
35780: GO 35670
35782: POP
35783: POP
// end ; end ;
35784: GO 35159
35786: POP
35787: POP
// end ; end_of_file
35788: PPOPN 9
35790: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35791: LD_INT 0
35793: PPUSH
35794: PPUSH
35795: PPUSH
35796: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35797: LD_VAR 0 1
35801: PPUSH
35802: CALL_OW 264
35806: PUSH
35807: LD_INT 91
35809: EQUAL
35810: IFFALSE 35882
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35812: LD_INT 68
35814: PPUSH
35815: LD_VAR 0 1
35819: PPUSH
35820: CALL_OW 255
35824: PPUSH
35825: CALL_OW 321
35829: PUSH
35830: LD_INT 2
35832: EQUAL
35833: IFFALSE 35845
// eff := 70 else
35835: LD_ADDR_VAR 0 4
35839: PUSH
35840: LD_INT 70
35842: ST_TO_ADDR
35843: GO 35853
// eff := 30 ;
35845: LD_ADDR_VAR 0 4
35849: PUSH
35850: LD_INT 30
35852: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35853: LD_VAR 0 1
35857: PPUSH
35858: CALL_OW 250
35862: PPUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 251
35872: PPUSH
35873: LD_VAR 0 4
35877: PPUSH
35878: CALL_OW 495
// end ; end ;
35882: LD_VAR 0 2
35886: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35887: LD_INT 0
35889: PPUSH
// end ;
35890: LD_VAR 0 4
35894: RET
// export function SOS_Command ( cmd ) ; begin
35895: LD_INT 0
35897: PPUSH
// end ;
35898: LD_VAR 0 2
35902: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35903: LD_INT 0
35905: PPUSH
// end ;
35906: LD_VAR 0 6
35910: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35911: LD_INT 0
35913: PPUSH
35914: PPUSH
// if not vehicle or not factory then
35915: LD_VAR 0 1
35919: NOT
35920: PUSH
35921: LD_VAR 0 2
35925: NOT
35926: OR
35927: IFFALSE 35931
// exit ;
35929: GO 36162
// if factoryWaypoints >= factory then
35931: LD_EXP 109
35935: PUSH
35936: LD_VAR 0 2
35940: GREATEREQUAL
35941: IFFALSE 36162
// if factoryWaypoints [ factory ] then
35943: LD_EXP 109
35947: PUSH
35948: LD_VAR 0 2
35952: ARRAY
35953: IFFALSE 36162
// begin if GetControl ( vehicle ) = control_manual then
35955: LD_VAR 0 1
35959: PPUSH
35960: CALL_OW 263
35964: PUSH
35965: LD_INT 1
35967: EQUAL
35968: IFFALSE 36049
// begin driver := IsDrivenBy ( vehicle ) ;
35970: LD_ADDR_VAR 0 4
35974: PUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 311
35984: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35985: LD_VAR 0 4
35989: PPUSH
35990: LD_EXP 109
35994: PUSH
35995: LD_VAR 0 2
35999: ARRAY
36000: PUSH
36001: LD_INT 3
36003: ARRAY
36004: PPUSH
36005: LD_EXP 109
36009: PUSH
36010: LD_VAR 0 2
36014: ARRAY
36015: PUSH
36016: LD_INT 4
36018: ARRAY
36019: PPUSH
36020: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36024: LD_VAR 0 4
36028: PPUSH
36029: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36033: LD_VAR 0 4
36037: PPUSH
36038: LD_VAR 0 2
36042: PPUSH
36043: CALL_OW 180
// end else
36047: GO 36162
// if GetControl ( vehicle ) = control_remote then
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 263
36058: PUSH
36059: LD_INT 2
36061: EQUAL
36062: IFFALSE 36123
// begin wait ( 0 0$2 ) ;
36064: LD_INT 70
36066: PPUSH
36067: CALL_OW 67
// if Connect ( vehicle ) then
36071: LD_VAR 0 1
36075: PPUSH
36076: CALL 48186 0 1
36080: IFFALSE 36121
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36082: LD_VAR 0 1
36086: PPUSH
36087: LD_EXP 109
36091: PUSH
36092: LD_VAR 0 2
36096: ARRAY
36097: PUSH
36098: LD_INT 3
36100: ARRAY
36101: PPUSH
36102: LD_EXP 109
36106: PUSH
36107: LD_VAR 0 2
36111: ARRAY
36112: PUSH
36113: LD_INT 4
36115: ARRAY
36116: PPUSH
36117: CALL_OW 171
// end else
36121: GO 36162
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36123: LD_VAR 0 1
36127: PPUSH
36128: LD_EXP 109
36132: PUSH
36133: LD_VAR 0 2
36137: ARRAY
36138: PUSH
36139: LD_INT 3
36141: ARRAY
36142: PPUSH
36143: LD_EXP 109
36147: PUSH
36148: LD_VAR 0 2
36152: ARRAY
36153: PUSH
36154: LD_INT 4
36156: ARRAY
36157: PPUSH
36158: CALL_OW 171
// end ; end ;
36162: LD_VAR 0 3
36166: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36167: LD_INT 0
36169: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36170: LD_VAR 0 1
36174: PUSH
36175: LD_INT 250
36177: EQUAL
36178: PUSH
36179: LD_VAR 0 2
36183: PPUSH
36184: CALL_OW 264
36188: PUSH
36189: LD_INT 81
36191: EQUAL
36192: AND
36193: IFFALSE 36214
// MinerPlaceMine ( unit , x , y ) ;
36195: LD_VAR 0 2
36199: PPUSH
36200: LD_VAR 0 4
36204: PPUSH
36205: LD_VAR 0 5
36209: PPUSH
36210: CALL 38599 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36214: LD_VAR 0 1
36218: PUSH
36219: LD_INT 251
36221: EQUAL
36222: PUSH
36223: LD_VAR 0 2
36227: PPUSH
36228: CALL_OW 264
36232: PUSH
36233: LD_INT 81
36235: EQUAL
36236: AND
36237: IFFALSE 36258
// MinerDetonateMine ( unit , x , y ) ;
36239: LD_VAR 0 2
36243: PPUSH
36244: LD_VAR 0 4
36248: PPUSH
36249: LD_VAR 0 5
36253: PPUSH
36254: CALL 38874 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36258: LD_VAR 0 1
36262: PUSH
36263: LD_INT 252
36265: EQUAL
36266: PUSH
36267: LD_VAR 0 2
36271: PPUSH
36272: CALL_OW 264
36276: PUSH
36277: LD_INT 81
36279: EQUAL
36280: AND
36281: IFFALSE 36302
// MinerCreateMinefield ( unit , x , y ) ;
36283: LD_VAR 0 2
36287: PPUSH
36288: LD_VAR 0 4
36292: PPUSH
36293: LD_VAR 0 5
36297: PPUSH
36298: CALL 39291 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36302: LD_VAR 0 1
36306: PUSH
36307: LD_INT 253
36309: EQUAL
36310: PUSH
36311: LD_VAR 0 2
36315: PPUSH
36316: CALL_OW 257
36320: PUSH
36321: LD_INT 5
36323: EQUAL
36324: AND
36325: IFFALSE 36346
// ComBinocular ( unit , x , y ) ;
36327: LD_VAR 0 2
36331: PPUSH
36332: LD_VAR 0 4
36336: PPUSH
36337: LD_VAR 0 5
36341: PPUSH
36342: CALL 39660 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36346: LD_VAR 0 1
36350: PUSH
36351: LD_INT 254
36353: EQUAL
36354: PUSH
36355: LD_VAR 0 2
36359: PPUSH
36360: CALL_OW 264
36364: PUSH
36365: LD_INT 99
36367: EQUAL
36368: AND
36369: PUSH
36370: LD_VAR 0 3
36374: PPUSH
36375: CALL_OW 263
36379: PUSH
36380: LD_INT 3
36382: EQUAL
36383: AND
36384: IFFALSE 36400
// HackDestroyVehicle ( unit , selectedUnit ) ;
36386: LD_VAR 0 2
36390: PPUSH
36391: LD_VAR 0 3
36395: PPUSH
36396: CALL 37963 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36400: LD_VAR 0 1
36404: PUSH
36405: LD_INT 255
36407: EQUAL
36408: PUSH
36409: LD_VAR 0 2
36413: PPUSH
36414: CALL_OW 264
36418: PUSH
36419: LD_INT 14
36421: PUSH
36422: LD_INT 53
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: IN
36429: AND
36430: PUSH
36431: LD_VAR 0 4
36435: PPUSH
36436: LD_VAR 0 5
36440: PPUSH
36441: CALL_OW 488
36445: AND
36446: IFFALSE 36470
// CutTreeXYR ( unit , x , y , 12 ) ;
36448: LD_VAR 0 2
36452: PPUSH
36453: LD_VAR 0 4
36457: PPUSH
36458: LD_VAR 0 5
36462: PPUSH
36463: LD_INT 12
36465: PPUSH
36466: CALL 36533 0 4
// if cmd = 256 then
36470: LD_VAR 0 1
36474: PUSH
36475: LD_INT 256
36477: EQUAL
36478: IFFALSE 36499
// SetFactoryWaypoint ( unit , x , y ) ;
36480: LD_VAR 0 2
36484: PPUSH
36485: LD_VAR 0 4
36489: PPUSH
36490: LD_VAR 0 5
36494: PPUSH
36495: CALL 34480 0 3
// if cmd = 257 then
36499: LD_VAR 0 1
36503: PUSH
36504: LD_INT 257
36506: EQUAL
36507: IFFALSE 36528
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36509: LD_VAR 0 2
36513: PPUSH
36514: LD_VAR 0 4
36518: PPUSH
36519: LD_VAR 0 5
36523: PPUSH
36524: CALL 34842 0 3
// end ;
36528: LD_VAR 0 6
36532: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36533: LD_INT 0
36535: PPUSH
36536: PPUSH
36537: PPUSH
36538: PPUSH
36539: PPUSH
36540: PPUSH
36541: PPUSH
36542: PPUSH
36543: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36544: LD_VAR 0 1
36548: NOT
36549: PUSH
36550: LD_VAR 0 2
36554: PPUSH
36555: LD_VAR 0 3
36559: PPUSH
36560: CALL_OW 488
36564: NOT
36565: OR
36566: PUSH
36567: LD_VAR 0 4
36571: NOT
36572: OR
36573: IFFALSE 36577
// exit ;
36575: GO 36917
// list := [ ] ;
36577: LD_ADDR_VAR 0 13
36581: PUSH
36582: EMPTY
36583: ST_TO_ADDR
// if x - r < 0 then
36584: LD_VAR 0 2
36588: PUSH
36589: LD_VAR 0 4
36593: MINUS
36594: PUSH
36595: LD_INT 0
36597: LESS
36598: IFFALSE 36610
// min_x := 0 else
36600: LD_ADDR_VAR 0 7
36604: PUSH
36605: LD_INT 0
36607: ST_TO_ADDR
36608: GO 36626
// min_x := x - r ;
36610: LD_ADDR_VAR 0 7
36614: PUSH
36615: LD_VAR 0 2
36619: PUSH
36620: LD_VAR 0 4
36624: MINUS
36625: ST_TO_ADDR
// if y - r < 0 then
36626: LD_VAR 0 3
36630: PUSH
36631: LD_VAR 0 4
36635: MINUS
36636: PUSH
36637: LD_INT 0
36639: LESS
36640: IFFALSE 36652
// min_y := 0 else
36642: LD_ADDR_VAR 0 8
36646: PUSH
36647: LD_INT 0
36649: ST_TO_ADDR
36650: GO 36668
// min_y := y - r ;
36652: LD_ADDR_VAR 0 8
36656: PUSH
36657: LD_VAR 0 3
36661: PUSH
36662: LD_VAR 0 4
36666: MINUS
36667: ST_TO_ADDR
// max_x := x + r ;
36668: LD_ADDR_VAR 0 9
36672: PUSH
36673: LD_VAR 0 2
36677: PUSH
36678: LD_VAR 0 4
36682: PLUS
36683: ST_TO_ADDR
// max_y := y + r ;
36684: LD_ADDR_VAR 0 10
36688: PUSH
36689: LD_VAR 0 3
36693: PUSH
36694: LD_VAR 0 4
36698: PLUS
36699: ST_TO_ADDR
// for _x = min_x to max_x do
36700: LD_ADDR_VAR 0 11
36704: PUSH
36705: DOUBLE
36706: LD_VAR 0 7
36710: DEC
36711: ST_TO_ADDR
36712: LD_VAR 0 9
36716: PUSH
36717: FOR_TO
36718: IFFALSE 36835
// for _y = min_y to max_y do
36720: LD_ADDR_VAR 0 12
36724: PUSH
36725: DOUBLE
36726: LD_VAR 0 8
36730: DEC
36731: ST_TO_ADDR
36732: LD_VAR 0 10
36736: PUSH
36737: FOR_TO
36738: IFFALSE 36831
// begin if not ValidHex ( _x , _y ) then
36740: LD_VAR 0 11
36744: PPUSH
36745: LD_VAR 0 12
36749: PPUSH
36750: CALL_OW 488
36754: NOT
36755: IFFALSE 36759
// continue ;
36757: GO 36737
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36759: LD_VAR 0 11
36763: PPUSH
36764: LD_VAR 0 12
36768: PPUSH
36769: CALL_OW 351
36773: PUSH
36774: LD_VAR 0 11
36778: PPUSH
36779: LD_VAR 0 12
36783: PPUSH
36784: CALL_OW 554
36788: AND
36789: IFFALSE 36829
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36791: LD_ADDR_VAR 0 13
36795: PUSH
36796: LD_VAR 0 13
36800: PPUSH
36801: LD_VAR 0 13
36805: PUSH
36806: LD_INT 1
36808: PLUS
36809: PPUSH
36810: LD_VAR 0 11
36814: PUSH
36815: LD_VAR 0 12
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PPUSH
36824: CALL_OW 2
36828: ST_TO_ADDR
// end ;
36829: GO 36737
36831: POP
36832: POP
36833: GO 36717
36835: POP
36836: POP
// if not list then
36837: LD_VAR 0 13
36841: NOT
36842: IFFALSE 36846
// exit ;
36844: GO 36917
// for i in list do
36846: LD_ADDR_VAR 0 6
36850: PUSH
36851: LD_VAR 0 13
36855: PUSH
36856: FOR_IN
36857: IFFALSE 36915
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36859: LD_VAR 0 1
36863: PPUSH
36864: LD_STRING M
36866: PUSH
36867: LD_VAR 0 6
36871: PUSH
36872: LD_INT 1
36874: ARRAY
36875: PUSH
36876: LD_VAR 0 6
36880: PUSH
36881: LD_INT 2
36883: ARRAY
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: PPUSH
36909: CALL_OW 447
36913: GO 36856
36915: POP
36916: POP
// end ;
36917: LD_VAR 0 5
36921: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36922: LD_EXP 112
36926: NOT
36927: IFFALSE 36977
36929: GO 36931
36931: DISABLE
// begin initHack := true ;
36932: LD_ADDR_EXP 112
36936: PUSH
36937: LD_INT 1
36939: ST_TO_ADDR
// hackTanks := [ ] ;
36940: LD_ADDR_EXP 113
36944: PUSH
36945: EMPTY
36946: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36947: LD_ADDR_EXP 114
36951: PUSH
36952: EMPTY
36953: ST_TO_ADDR
// hackLimit := 3 ;
36954: LD_ADDR_EXP 115
36958: PUSH
36959: LD_INT 3
36961: ST_TO_ADDR
// hackDist := 12 ;
36962: LD_ADDR_EXP 116
36966: PUSH
36967: LD_INT 12
36969: ST_TO_ADDR
// hackCounter := [ ] ;
36970: LD_ADDR_EXP 117
36974: PUSH
36975: EMPTY
36976: ST_TO_ADDR
// end ;
36977: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36978: LD_EXP 112
36982: PUSH
36983: LD_INT 34
36985: PUSH
36986: LD_INT 99
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PPUSH
36993: CALL_OW 69
36997: AND
36998: IFFALSE 37251
37000: GO 37002
37002: DISABLE
37003: LD_INT 0
37005: PPUSH
37006: PPUSH
// begin enable ;
37007: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37008: LD_ADDR_VAR 0 1
37012: PUSH
37013: LD_INT 34
37015: PUSH
37016: LD_INT 99
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PPUSH
37023: CALL_OW 69
37027: PUSH
37028: FOR_IN
37029: IFFALSE 37249
// begin if not i in hackTanks then
37031: LD_VAR 0 1
37035: PUSH
37036: LD_EXP 113
37040: IN
37041: NOT
37042: IFFALSE 37125
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37044: LD_ADDR_EXP 113
37048: PUSH
37049: LD_EXP 113
37053: PPUSH
37054: LD_EXP 113
37058: PUSH
37059: LD_INT 1
37061: PLUS
37062: PPUSH
37063: LD_VAR 0 1
37067: PPUSH
37068: CALL_OW 1
37072: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37073: LD_ADDR_EXP 114
37077: PUSH
37078: LD_EXP 114
37082: PPUSH
37083: LD_EXP 114
37087: PUSH
37088: LD_INT 1
37090: PLUS
37091: PPUSH
37092: EMPTY
37093: PPUSH
37094: CALL_OW 1
37098: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37099: LD_ADDR_EXP 117
37103: PUSH
37104: LD_EXP 117
37108: PPUSH
37109: LD_EXP 117
37113: PUSH
37114: LD_INT 1
37116: PLUS
37117: PPUSH
37118: EMPTY
37119: PPUSH
37120: CALL_OW 1
37124: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37125: LD_VAR 0 1
37129: PPUSH
37130: CALL_OW 302
37134: NOT
37135: IFFALSE 37148
// begin HackUnlinkAll ( i ) ;
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL 37254 0 1
// continue ;
37146: GO 37028
// end ; HackCheckCapturedStatus ( i ) ;
37148: LD_VAR 0 1
37152: PPUSH
37153: CALL 37697 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37157: LD_ADDR_VAR 0 2
37161: PUSH
37162: LD_INT 81
37164: PUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: CALL_OW 255
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 33
37181: PUSH
37182: LD_INT 3
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 91
37191: PUSH
37192: LD_VAR 0 1
37196: PUSH
37197: LD_EXP 116
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 50
37209: PUSH
37210: EMPTY
37211: LIST
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: PPUSH
37219: CALL_OW 69
37223: ST_TO_ADDR
// if not tmp then
37224: LD_VAR 0 2
37228: NOT
37229: IFFALSE 37233
// continue ;
37231: GO 37028
// HackLink ( i , tmp ) ;
37233: LD_VAR 0 1
37237: PPUSH
37238: LD_VAR 0 2
37242: PPUSH
37243: CALL 37390 0 2
// end ;
37247: GO 37028
37249: POP
37250: POP
// end ;
37251: PPOPN 2
37253: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37254: LD_INT 0
37256: PPUSH
37257: PPUSH
37258: PPUSH
// if not hack in hackTanks then
37259: LD_VAR 0 1
37263: PUSH
37264: LD_EXP 113
37268: IN
37269: NOT
37270: IFFALSE 37274
// exit ;
37272: GO 37385
// index := GetElementIndex ( hackTanks , hack ) ;
37274: LD_ADDR_VAR 0 4
37278: PUSH
37279: LD_EXP 113
37283: PPUSH
37284: LD_VAR 0 1
37288: PPUSH
37289: CALL 45002 0 2
37293: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37294: LD_EXP 114
37298: PUSH
37299: LD_VAR 0 4
37303: ARRAY
37304: IFFALSE 37385
// begin for i in hackTanksCaptured [ index ] do
37306: LD_ADDR_VAR 0 3
37310: PUSH
37311: LD_EXP 114
37315: PUSH
37316: LD_VAR 0 4
37320: ARRAY
37321: PUSH
37322: FOR_IN
37323: IFFALSE 37349
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37325: LD_VAR 0 3
37329: PUSH
37330: LD_INT 1
37332: ARRAY
37333: PPUSH
37334: LD_VAR 0 3
37338: PUSH
37339: LD_INT 2
37341: ARRAY
37342: PPUSH
37343: CALL_OW 235
37347: GO 37322
37349: POP
37350: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37351: LD_ADDR_EXP 114
37355: PUSH
37356: LD_EXP 114
37360: PPUSH
37361: LD_VAR 0 4
37365: PPUSH
37366: EMPTY
37367: PPUSH
37368: CALL_OW 1
37372: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37373: LD_VAR 0 1
37377: PPUSH
37378: LD_INT 0
37380: PPUSH
37381: CALL_OW 505
// end ; end ;
37385: LD_VAR 0 2
37389: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37390: LD_INT 0
37392: PPUSH
37393: PPUSH
37394: PPUSH
// if not hack in hackTanks or not vehicles then
37395: LD_VAR 0 1
37399: PUSH
37400: LD_EXP 113
37404: IN
37405: NOT
37406: PUSH
37407: LD_VAR 0 2
37411: NOT
37412: OR
37413: IFFALSE 37417
// exit ;
37415: GO 37692
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37417: LD_ADDR_VAR 0 2
37421: PUSH
37422: LD_VAR 0 1
37426: PPUSH
37427: LD_VAR 0 2
37431: PPUSH
37432: LD_INT 1
37434: PPUSH
37435: LD_INT 1
37437: PPUSH
37438: CALL 45652 0 4
37442: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37443: LD_ADDR_VAR 0 5
37447: PUSH
37448: LD_EXP 113
37452: PPUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL 45002 0 2
37462: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37463: LD_EXP 114
37467: PUSH
37468: LD_VAR 0 5
37472: ARRAY
37473: PUSH
37474: LD_EXP 115
37478: LESS
37479: IFFALSE 37668
// begin for i := 1 to vehicles do
37481: LD_ADDR_VAR 0 4
37485: PUSH
37486: DOUBLE
37487: LD_INT 1
37489: DEC
37490: ST_TO_ADDR
37491: LD_VAR 0 2
37495: PUSH
37496: FOR_TO
37497: IFFALSE 37666
// begin if hackTanksCaptured [ index ] = hackLimit then
37499: LD_EXP 114
37503: PUSH
37504: LD_VAR 0 5
37508: ARRAY
37509: PUSH
37510: LD_EXP 115
37514: EQUAL
37515: IFFALSE 37519
// break ;
37517: GO 37666
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37519: LD_ADDR_EXP 117
37523: PUSH
37524: LD_EXP 117
37528: PPUSH
37529: LD_VAR 0 5
37533: PPUSH
37534: LD_EXP 117
37538: PUSH
37539: LD_VAR 0 5
37543: ARRAY
37544: PUSH
37545: LD_INT 1
37547: PLUS
37548: PPUSH
37549: CALL_OW 1
37553: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37554: LD_ADDR_EXP 114
37558: PUSH
37559: LD_EXP 114
37563: PPUSH
37564: LD_VAR 0 5
37568: PUSH
37569: LD_EXP 114
37573: PUSH
37574: LD_VAR 0 5
37578: ARRAY
37579: PUSH
37580: LD_INT 1
37582: PLUS
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PPUSH
37588: LD_VAR 0 2
37592: PUSH
37593: LD_VAR 0 4
37597: ARRAY
37598: PUSH
37599: LD_VAR 0 2
37603: PUSH
37604: LD_VAR 0 4
37608: ARRAY
37609: PPUSH
37610: CALL_OW 255
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PPUSH
37619: CALL 45217 0 3
37623: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37624: LD_VAR 0 2
37628: PUSH
37629: LD_VAR 0 4
37633: ARRAY
37634: PPUSH
37635: LD_VAR 0 1
37639: PPUSH
37640: CALL_OW 255
37644: PPUSH
37645: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37649: LD_VAR 0 2
37653: PUSH
37654: LD_VAR 0 4
37658: ARRAY
37659: PPUSH
37660: CALL_OW 141
// end ;
37664: GO 37496
37666: POP
37667: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37668: LD_VAR 0 1
37672: PPUSH
37673: LD_EXP 114
37677: PUSH
37678: LD_VAR 0 5
37682: ARRAY
37683: PUSH
37684: LD_INT 0
37686: PLUS
37687: PPUSH
37688: CALL_OW 505
// end ;
37692: LD_VAR 0 3
37696: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
// if not hack in hackTanks then
37703: LD_VAR 0 1
37707: PUSH
37708: LD_EXP 113
37712: IN
37713: NOT
37714: IFFALSE 37718
// exit ;
37716: GO 37958
// index := GetElementIndex ( hackTanks , hack ) ;
37718: LD_ADDR_VAR 0 4
37722: PUSH
37723: LD_EXP 113
37727: PPUSH
37728: LD_VAR 0 1
37732: PPUSH
37733: CALL 45002 0 2
37737: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37738: LD_ADDR_VAR 0 3
37742: PUSH
37743: DOUBLE
37744: LD_EXP 114
37748: PUSH
37749: LD_VAR 0 4
37753: ARRAY
37754: INC
37755: ST_TO_ADDR
37756: LD_INT 1
37758: PUSH
37759: FOR_DOWNTO
37760: IFFALSE 37932
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37762: LD_ADDR_VAR 0 5
37766: PUSH
37767: LD_EXP 114
37771: PUSH
37772: LD_VAR 0 4
37776: ARRAY
37777: PUSH
37778: LD_VAR 0 3
37782: ARRAY
37783: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37784: LD_VAR 0 5
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: PPUSH
37793: CALL_OW 302
37797: NOT
37798: PUSH
37799: LD_VAR 0 5
37803: PUSH
37804: LD_INT 1
37806: ARRAY
37807: PPUSH
37808: CALL_OW 255
37812: PUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL_OW 255
37822: NONEQUAL
37823: OR
37824: IFFALSE 37930
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37826: LD_VAR 0 5
37830: PUSH
37831: LD_INT 1
37833: ARRAY
37834: PPUSH
37835: CALL_OW 305
37839: PUSH
37840: LD_VAR 0 5
37844: PUSH
37845: LD_INT 1
37847: ARRAY
37848: PPUSH
37849: CALL_OW 255
37853: PUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 255
37863: EQUAL
37864: AND
37865: IFFALSE 37889
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37867: LD_VAR 0 5
37871: PUSH
37872: LD_INT 1
37874: ARRAY
37875: PPUSH
37876: LD_VAR 0 5
37880: PUSH
37881: LD_INT 2
37883: ARRAY
37884: PPUSH
37885: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37889: LD_ADDR_EXP 114
37893: PUSH
37894: LD_EXP 114
37898: PPUSH
37899: LD_VAR 0 4
37903: PPUSH
37904: LD_EXP 114
37908: PUSH
37909: LD_VAR 0 4
37913: ARRAY
37914: PPUSH
37915: LD_VAR 0 3
37919: PPUSH
37920: CALL_OW 3
37924: PPUSH
37925: CALL_OW 1
37929: ST_TO_ADDR
// end ; end ;
37930: GO 37759
37932: POP
37933: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37934: LD_VAR 0 1
37938: PPUSH
37939: LD_EXP 114
37943: PUSH
37944: LD_VAR 0 4
37948: ARRAY
37949: PUSH
37950: LD_INT 0
37952: PLUS
37953: PPUSH
37954: CALL_OW 505
// end ;
37958: LD_VAR 0 2
37962: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37963: LD_INT 0
37965: PPUSH
37966: PPUSH
37967: PPUSH
37968: PPUSH
// if not hack in hackTanks then
37969: LD_VAR 0 1
37973: PUSH
37974: LD_EXP 113
37978: IN
37979: NOT
37980: IFFALSE 37984
// exit ;
37982: GO 38069
// index := GetElementIndex ( hackTanks , hack ) ;
37984: LD_ADDR_VAR 0 5
37988: PUSH
37989: LD_EXP 113
37993: PPUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL 45002 0 2
38003: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38004: LD_ADDR_VAR 0 4
38008: PUSH
38009: DOUBLE
38010: LD_INT 1
38012: DEC
38013: ST_TO_ADDR
38014: LD_EXP 114
38018: PUSH
38019: LD_VAR 0 5
38023: ARRAY
38024: PUSH
38025: FOR_TO
38026: IFFALSE 38067
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38028: LD_EXP 114
38032: PUSH
38033: LD_VAR 0 5
38037: ARRAY
38038: PUSH
38039: LD_VAR 0 4
38043: ARRAY
38044: PUSH
38045: LD_INT 1
38047: ARRAY
38048: PUSH
38049: LD_VAR 0 2
38053: EQUAL
38054: IFFALSE 38065
// KillUnit ( vehicle ) ;
38056: LD_VAR 0 2
38060: PPUSH
38061: CALL_OW 66
38065: GO 38025
38067: POP
38068: POP
// end ;
38069: LD_VAR 0 3
38073: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38074: LD_EXP 118
38078: NOT
38079: IFFALSE 38114
38081: GO 38083
38083: DISABLE
// begin initMiner := true ;
38084: LD_ADDR_EXP 118
38088: PUSH
38089: LD_INT 1
38091: ST_TO_ADDR
// minersList := [ ] ;
38092: LD_ADDR_EXP 119
38096: PUSH
38097: EMPTY
38098: ST_TO_ADDR
// minerMinesList := [ ] ;
38099: LD_ADDR_EXP 120
38103: PUSH
38104: EMPTY
38105: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38106: LD_ADDR_EXP 121
38110: PUSH
38111: LD_INT 5
38113: ST_TO_ADDR
// end ;
38114: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38115: LD_EXP 118
38119: PUSH
38120: LD_INT 34
38122: PUSH
38123: LD_INT 81
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PPUSH
38130: CALL_OW 69
38134: AND
38135: IFFALSE 38596
38137: GO 38139
38139: DISABLE
38140: LD_INT 0
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
// begin enable ;
38146: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38147: LD_ADDR_VAR 0 1
38151: PUSH
38152: LD_INT 34
38154: PUSH
38155: LD_INT 81
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PPUSH
38162: CALL_OW 69
38166: PUSH
38167: FOR_IN
38168: IFFALSE 38240
// begin if not i in minersList then
38170: LD_VAR 0 1
38174: PUSH
38175: LD_EXP 119
38179: IN
38180: NOT
38181: IFFALSE 38238
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38183: LD_ADDR_EXP 119
38187: PUSH
38188: LD_EXP 119
38192: PPUSH
38193: LD_EXP 119
38197: PUSH
38198: LD_INT 1
38200: PLUS
38201: PPUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 1
38211: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38212: LD_ADDR_EXP 120
38216: PUSH
38217: LD_EXP 120
38221: PPUSH
38222: LD_EXP 120
38226: PUSH
38227: LD_INT 1
38229: PLUS
38230: PPUSH
38231: EMPTY
38232: PPUSH
38233: CALL_OW 1
38237: ST_TO_ADDR
// end end ;
38238: GO 38167
38240: POP
38241: POP
// for i := minerMinesList downto 1 do
38242: LD_ADDR_VAR 0 1
38246: PUSH
38247: DOUBLE
38248: LD_EXP 120
38252: INC
38253: ST_TO_ADDR
38254: LD_INT 1
38256: PUSH
38257: FOR_DOWNTO
38258: IFFALSE 38594
// begin if IsLive ( minersList [ i ] ) then
38260: LD_EXP 119
38264: PUSH
38265: LD_VAR 0 1
38269: ARRAY
38270: PPUSH
38271: CALL_OW 300
38275: IFFALSE 38303
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38277: LD_EXP 119
38281: PUSH
38282: LD_VAR 0 1
38286: ARRAY
38287: PPUSH
38288: LD_EXP 120
38292: PUSH
38293: LD_VAR 0 1
38297: ARRAY
38298: PPUSH
38299: CALL_OW 505
// if not minerMinesList [ i ] then
38303: LD_EXP 120
38307: PUSH
38308: LD_VAR 0 1
38312: ARRAY
38313: NOT
38314: IFFALSE 38318
// continue ;
38316: GO 38257
// for j := minerMinesList [ i ] downto 1 do
38318: LD_ADDR_VAR 0 2
38322: PUSH
38323: DOUBLE
38324: LD_EXP 120
38328: PUSH
38329: LD_VAR 0 1
38333: ARRAY
38334: INC
38335: ST_TO_ADDR
38336: LD_INT 1
38338: PUSH
38339: FOR_DOWNTO
38340: IFFALSE 38590
// begin side := GetSide ( minersList [ i ] ) ;
38342: LD_ADDR_VAR 0 3
38346: PUSH
38347: LD_EXP 119
38351: PUSH
38352: LD_VAR 0 1
38356: ARRAY
38357: PPUSH
38358: CALL_OW 255
38362: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38363: LD_ADDR_VAR 0 4
38367: PUSH
38368: LD_EXP 120
38372: PUSH
38373: LD_VAR 0 1
38377: ARRAY
38378: PUSH
38379: LD_VAR 0 2
38383: ARRAY
38384: PUSH
38385: LD_INT 1
38387: ARRAY
38388: PPUSH
38389: LD_EXP 120
38393: PUSH
38394: LD_VAR 0 1
38398: ARRAY
38399: PUSH
38400: LD_VAR 0 2
38404: ARRAY
38405: PUSH
38406: LD_INT 2
38408: ARRAY
38409: PPUSH
38410: CALL_OW 428
38414: ST_TO_ADDR
// if not tmp then
38415: LD_VAR 0 4
38419: NOT
38420: IFFALSE 38424
// continue ;
38422: GO 38339
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38424: LD_VAR 0 4
38428: PUSH
38429: LD_INT 81
38431: PUSH
38432: LD_VAR 0 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PPUSH
38441: CALL_OW 69
38445: IN
38446: PUSH
38447: LD_EXP 120
38451: PUSH
38452: LD_VAR 0 1
38456: ARRAY
38457: PUSH
38458: LD_VAR 0 2
38462: ARRAY
38463: PUSH
38464: LD_INT 1
38466: ARRAY
38467: PPUSH
38468: LD_EXP 120
38472: PUSH
38473: LD_VAR 0 1
38477: ARRAY
38478: PUSH
38479: LD_VAR 0 2
38483: ARRAY
38484: PUSH
38485: LD_INT 2
38487: ARRAY
38488: PPUSH
38489: CALL_OW 458
38493: AND
38494: IFFALSE 38588
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38496: LD_EXP 120
38500: PUSH
38501: LD_VAR 0 1
38505: ARRAY
38506: PUSH
38507: LD_VAR 0 2
38511: ARRAY
38512: PUSH
38513: LD_INT 1
38515: ARRAY
38516: PPUSH
38517: LD_EXP 120
38521: PUSH
38522: LD_VAR 0 1
38526: ARRAY
38527: PUSH
38528: LD_VAR 0 2
38532: ARRAY
38533: PUSH
38534: LD_INT 2
38536: ARRAY
38537: PPUSH
38538: LD_VAR 0 3
38542: PPUSH
38543: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38547: LD_ADDR_EXP 120
38551: PUSH
38552: LD_EXP 120
38556: PPUSH
38557: LD_VAR 0 1
38561: PPUSH
38562: LD_EXP 120
38566: PUSH
38567: LD_VAR 0 1
38571: ARRAY
38572: PPUSH
38573: LD_VAR 0 2
38577: PPUSH
38578: CALL_OW 3
38582: PPUSH
38583: CALL_OW 1
38587: ST_TO_ADDR
// end ; end ;
38588: GO 38339
38590: POP
38591: POP
// end ;
38592: GO 38257
38594: POP
38595: POP
// end ;
38596: PPOPN 4
38598: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38599: LD_INT 0
38601: PPUSH
38602: PPUSH
// result := false ;
38603: LD_ADDR_VAR 0 4
38607: PUSH
38608: LD_INT 0
38610: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL_OW 264
38620: PUSH
38621: LD_INT 81
38623: EQUAL
38624: NOT
38625: IFFALSE 38629
// exit ;
38627: GO 38869
// index := GetElementIndex ( minersList , unit ) ;
38629: LD_ADDR_VAR 0 5
38633: PUSH
38634: LD_EXP 119
38638: PPUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL 45002 0 2
38648: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38649: LD_EXP 120
38653: PUSH
38654: LD_VAR 0 5
38658: ARRAY
38659: PUSH
38660: LD_EXP 121
38664: GREATEREQUAL
38665: IFFALSE 38669
// exit ;
38667: GO 38869
// ComMoveXY ( unit , x , y ) ;
38669: LD_VAR 0 1
38673: PPUSH
38674: LD_VAR 0 2
38678: PPUSH
38679: LD_VAR 0 3
38683: PPUSH
38684: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38688: LD_INT 35
38690: PPUSH
38691: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38695: LD_VAR 0 1
38699: PPUSH
38700: LD_VAR 0 2
38704: PPUSH
38705: LD_VAR 0 3
38709: PPUSH
38710: CALL 76357 0 3
38714: NOT
38715: PUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: CALL_OW 314
38725: AND
38726: IFFALSE 38730
// exit ;
38728: GO 38869
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38730: LD_VAR 0 2
38734: PPUSH
38735: LD_VAR 0 3
38739: PPUSH
38740: CALL_OW 428
38744: PUSH
38745: LD_VAR 0 1
38749: EQUAL
38750: PUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 314
38760: NOT
38761: AND
38762: IFFALSE 38688
// PlaySoundXY ( x , y , PlantMine ) ;
38764: LD_VAR 0 2
38768: PPUSH
38769: LD_VAR 0 3
38773: PPUSH
38774: LD_STRING PlantMine
38776: PPUSH
38777: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38781: LD_VAR 0 2
38785: PPUSH
38786: LD_VAR 0 3
38790: PPUSH
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL_OW 255
38800: PPUSH
38801: LD_INT 0
38803: PPUSH
38804: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38808: LD_ADDR_EXP 120
38812: PUSH
38813: LD_EXP 120
38817: PPUSH
38818: LD_VAR 0 5
38822: PUSH
38823: LD_EXP 120
38827: PUSH
38828: LD_VAR 0 5
38832: ARRAY
38833: PUSH
38834: LD_INT 1
38836: PLUS
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PPUSH
38842: LD_VAR 0 2
38846: PUSH
38847: LD_VAR 0 3
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PPUSH
38856: CALL 45217 0 3
38860: ST_TO_ADDR
// result := true ;
38861: LD_ADDR_VAR 0 4
38865: PUSH
38866: LD_INT 1
38868: ST_TO_ADDR
// end ;
38869: LD_VAR 0 4
38873: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38874: LD_INT 0
38876: PPUSH
38877: PPUSH
38878: PPUSH
// if not unit in minersList then
38879: LD_VAR 0 1
38883: PUSH
38884: LD_EXP 119
38888: IN
38889: NOT
38890: IFFALSE 38894
// exit ;
38892: GO 39286
// index := GetElementIndex ( minersList , unit ) ;
38894: LD_ADDR_VAR 0 6
38898: PUSH
38899: LD_EXP 119
38903: PPUSH
38904: LD_VAR 0 1
38908: PPUSH
38909: CALL 45002 0 2
38913: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38914: LD_ADDR_VAR 0 5
38918: PUSH
38919: DOUBLE
38920: LD_EXP 120
38924: PUSH
38925: LD_VAR 0 6
38929: ARRAY
38930: INC
38931: ST_TO_ADDR
38932: LD_INT 1
38934: PUSH
38935: FOR_DOWNTO
38936: IFFALSE 39097
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38938: LD_EXP 120
38942: PUSH
38943: LD_VAR 0 6
38947: ARRAY
38948: PUSH
38949: LD_VAR 0 5
38953: ARRAY
38954: PUSH
38955: LD_INT 1
38957: ARRAY
38958: PUSH
38959: LD_VAR 0 2
38963: EQUAL
38964: PUSH
38965: LD_EXP 120
38969: PUSH
38970: LD_VAR 0 6
38974: ARRAY
38975: PUSH
38976: LD_VAR 0 5
38980: ARRAY
38981: PUSH
38982: LD_INT 2
38984: ARRAY
38985: PUSH
38986: LD_VAR 0 3
38990: EQUAL
38991: AND
38992: IFFALSE 39095
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38994: LD_EXP 120
38998: PUSH
38999: LD_VAR 0 6
39003: ARRAY
39004: PUSH
39005: LD_VAR 0 5
39009: ARRAY
39010: PUSH
39011: LD_INT 1
39013: ARRAY
39014: PPUSH
39015: LD_EXP 120
39019: PUSH
39020: LD_VAR 0 6
39024: ARRAY
39025: PUSH
39026: LD_VAR 0 5
39030: ARRAY
39031: PUSH
39032: LD_INT 2
39034: ARRAY
39035: PPUSH
39036: LD_VAR 0 1
39040: PPUSH
39041: CALL_OW 255
39045: PPUSH
39046: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39050: LD_ADDR_EXP 120
39054: PUSH
39055: LD_EXP 120
39059: PPUSH
39060: LD_VAR 0 6
39064: PPUSH
39065: LD_EXP 120
39069: PUSH
39070: LD_VAR 0 6
39074: ARRAY
39075: PPUSH
39076: LD_VAR 0 5
39080: PPUSH
39081: CALL_OW 3
39085: PPUSH
39086: CALL_OW 1
39090: ST_TO_ADDR
// exit ;
39091: POP
39092: POP
39093: GO 39286
// end ; end ;
39095: GO 38935
39097: POP
39098: POP
// for i := minerMinesList [ index ] downto 1 do
39099: LD_ADDR_VAR 0 5
39103: PUSH
39104: DOUBLE
39105: LD_EXP 120
39109: PUSH
39110: LD_VAR 0 6
39114: ARRAY
39115: INC
39116: ST_TO_ADDR
39117: LD_INT 1
39119: PUSH
39120: FOR_DOWNTO
39121: IFFALSE 39284
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39123: LD_EXP 120
39127: PUSH
39128: LD_VAR 0 6
39132: ARRAY
39133: PUSH
39134: LD_VAR 0 5
39138: ARRAY
39139: PUSH
39140: LD_INT 1
39142: ARRAY
39143: PPUSH
39144: LD_EXP 120
39148: PUSH
39149: LD_VAR 0 6
39153: ARRAY
39154: PUSH
39155: LD_VAR 0 5
39159: ARRAY
39160: PUSH
39161: LD_INT 2
39163: ARRAY
39164: PPUSH
39165: LD_VAR 0 2
39169: PPUSH
39170: LD_VAR 0 3
39174: PPUSH
39175: CALL_OW 298
39179: PUSH
39180: LD_INT 6
39182: LESS
39183: IFFALSE 39282
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39185: LD_EXP 120
39189: PUSH
39190: LD_VAR 0 6
39194: ARRAY
39195: PUSH
39196: LD_VAR 0 5
39200: ARRAY
39201: PUSH
39202: LD_INT 1
39204: ARRAY
39205: PPUSH
39206: LD_EXP 120
39210: PUSH
39211: LD_VAR 0 6
39215: ARRAY
39216: PUSH
39217: LD_VAR 0 5
39221: ARRAY
39222: PUSH
39223: LD_INT 2
39225: ARRAY
39226: PPUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: CALL_OW 255
39236: PPUSH
39237: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39241: LD_ADDR_EXP 120
39245: PUSH
39246: LD_EXP 120
39250: PPUSH
39251: LD_VAR 0 6
39255: PPUSH
39256: LD_EXP 120
39260: PUSH
39261: LD_VAR 0 6
39265: ARRAY
39266: PPUSH
39267: LD_VAR 0 5
39271: PPUSH
39272: CALL_OW 3
39276: PPUSH
39277: CALL_OW 1
39281: ST_TO_ADDR
// end ; end ;
39282: GO 39120
39284: POP
39285: POP
// end ;
39286: LD_VAR 0 4
39290: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39291: LD_INT 0
39293: PPUSH
39294: PPUSH
39295: PPUSH
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
39301: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 264
39311: PUSH
39312: LD_INT 81
39314: EQUAL
39315: NOT
39316: PUSH
39317: LD_VAR 0 1
39321: PUSH
39322: LD_EXP 119
39326: IN
39327: NOT
39328: OR
39329: IFFALSE 39333
// exit ;
39331: GO 39655
// index := GetElementIndex ( minersList , unit ) ;
39333: LD_ADDR_VAR 0 6
39337: PUSH
39338: LD_EXP 119
39342: PPUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL 45002 0 2
39352: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39353: LD_ADDR_VAR 0 8
39357: PUSH
39358: LD_EXP 121
39362: PUSH
39363: LD_EXP 120
39367: PUSH
39368: LD_VAR 0 6
39372: ARRAY
39373: MINUS
39374: ST_TO_ADDR
// if not minesFreeAmount then
39375: LD_VAR 0 8
39379: NOT
39380: IFFALSE 39384
// exit ;
39382: GO 39655
// tmp := [ ] ;
39384: LD_ADDR_VAR 0 7
39388: PUSH
39389: EMPTY
39390: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39391: LD_ADDR_VAR 0 5
39395: PUSH
39396: DOUBLE
39397: LD_INT 1
39399: DEC
39400: ST_TO_ADDR
39401: LD_VAR 0 8
39405: PUSH
39406: FOR_TO
39407: IFFALSE 39602
// begin _d := rand ( 0 , 5 ) ;
39409: LD_ADDR_VAR 0 11
39413: PUSH
39414: LD_INT 0
39416: PPUSH
39417: LD_INT 5
39419: PPUSH
39420: CALL_OW 12
39424: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39425: LD_ADDR_VAR 0 12
39429: PUSH
39430: LD_INT 2
39432: PPUSH
39433: LD_INT 6
39435: PPUSH
39436: CALL_OW 12
39440: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39441: LD_ADDR_VAR 0 9
39445: PUSH
39446: LD_VAR 0 2
39450: PPUSH
39451: LD_VAR 0 11
39455: PPUSH
39456: LD_VAR 0 12
39460: PPUSH
39461: CALL_OW 272
39465: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39466: LD_ADDR_VAR 0 10
39470: PUSH
39471: LD_VAR 0 3
39475: PPUSH
39476: LD_VAR 0 11
39480: PPUSH
39481: LD_VAR 0 12
39485: PPUSH
39486: CALL_OW 273
39490: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39491: LD_VAR 0 9
39495: PPUSH
39496: LD_VAR 0 10
39500: PPUSH
39501: CALL_OW 488
39505: PUSH
39506: LD_VAR 0 9
39510: PUSH
39511: LD_VAR 0 10
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_VAR 0 7
39524: IN
39525: NOT
39526: AND
39527: PUSH
39528: LD_VAR 0 9
39532: PPUSH
39533: LD_VAR 0 10
39537: PPUSH
39538: CALL_OW 458
39542: NOT
39543: AND
39544: IFFALSE 39586
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39546: LD_ADDR_VAR 0 7
39550: PUSH
39551: LD_VAR 0 7
39555: PPUSH
39556: LD_VAR 0 7
39560: PUSH
39561: LD_INT 1
39563: PLUS
39564: PPUSH
39565: LD_VAR 0 9
39569: PUSH
39570: LD_VAR 0 10
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PPUSH
39579: CALL_OW 1
39583: ST_TO_ADDR
39584: GO 39600
// i := i - 1 ;
39586: LD_ADDR_VAR 0 5
39590: PUSH
39591: LD_VAR 0 5
39595: PUSH
39596: LD_INT 1
39598: MINUS
39599: ST_TO_ADDR
// end ;
39600: GO 39406
39602: POP
39603: POP
// for i in tmp do
39604: LD_ADDR_VAR 0 5
39608: PUSH
39609: LD_VAR 0 7
39613: PUSH
39614: FOR_IN
39615: IFFALSE 39653
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39617: LD_VAR 0 1
39621: PPUSH
39622: LD_VAR 0 5
39626: PUSH
39627: LD_INT 1
39629: ARRAY
39630: PPUSH
39631: LD_VAR 0 5
39635: PUSH
39636: LD_INT 2
39638: ARRAY
39639: PPUSH
39640: CALL 38599 0 3
39644: NOT
39645: IFFALSE 39651
// exit ;
39647: POP
39648: POP
39649: GO 39655
39651: GO 39614
39653: POP
39654: POP
// end ;
39655: LD_VAR 0 4
39659: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39660: LD_INT 0
39662: PPUSH
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
39667: PPUSH
39668: PPUSH
// if not GetClass ( unit ) = class_sniper then
39669: LD_VAR 0 1
39673: PPUSH
39674: CALL_OW 257
39678: PUSH
39679: LD_INT 5
39681: EQUAL
39682: NOT
39683: IFFALSE 39687
// exit ;
39685: GO 40075
// dist := 8 ;
39687: LD_ADDR_VAR 0 5
39691: PUSH
39692: LD_INT 8
39694: ST_TO_ADDR
// viewRange := 12 ;
39695: LD_ADDR_VAR 0 7
39699: PUSH
39700: LD_INT 12
39702: ST_TO_ADDR
// side := GetSide ( unit ) ;
39703: LD_ADDR_VAR 0 6
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 255
39717: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39718: LD_INT 61
39720: PPUSH
39721: LD_VAR 0 6
39725: PPUSH
39726: CALL_OW 321
39730: PUSH
39731: LD_INT 2
39733: EQUAL
39734: IFFALSE 39744
// viewRange := 16 ;
39736: LD_ADDR_VAR 0 7
39740: PUSH
39741: LD_INT 16
39743: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39744: LD_VAR 0 1
39748: PPUSH
39749: LD_VAR 0 2
39753: PPUSH
39754: LD_VAR 0 3
39758: PPUSH
39759: CALL_OW 297
39763: PUSH
39764: LD_VAR 0 5
39768: GREATER
39769: IFFALSE 39848
// begin ComMoveXY ( unit , x , y ) ;
39771: LD_VAR 0 1
39775: PPUSH
39776: LD_VAR 0 2
39780: PPUSH
39781: LD_VAR 0 3
39785: PPUSH
39786: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39790: LD_INT 35
39792: PPUSH
39793: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39797: LD_VAR 0 1
39801: PPUSH
39802: LD_VAR 0 2
39806: PPUSH
39807: LD_VAR 0 3
39811: PPUSH
39812: CALL 76357 0 3
39816: NOT
39817: IFFALSE 39821
// exit ;
39819: GO 40075
// until GetDistUnitXY ( unit , x , y ) < dist ;
39821: LD_VAR 0 1
39825: PPUSH
39826: LD_VAR 0 2
39830: PPUSH
39831: LD_VAR 0 3
39835: PPUSH
39836: CALL_OW 297
39840: PUSH
39841: LD_VAR 0 5
39845: LESS
39846: IFFALSE 39790
// end ; ComTurnXY ( unit , x , y ) ;
39848: LD_VAR 0 1
39852: PPUSH
39853: LD_VAR 0 2
39857: PPUSH
39858: LD_VAR 0 3
39862: PPUSH
39863: CALL_OW 118
// wait ( 5 ) ;
39867: LD_INT 5
39869: PPUSH
39870: CALL_OW 67
// _d := GetDir ( unit ) ;
39874: LD_ADDR_VAR 0 10
39878: PUSH
39879: LD_VAR 0 1
39883: PPUSH
39884: CALL_OW 254
39888: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39889: LD_ADDR_VAR 0 8
39893: PUSH
39894: LD_VAR 0 1
39898: PPUSH
39899: CALL_OW 250
39903: PPUSH
39904: LD_VAR 0 10
39908: PPUSH
39909: LD_VAR 0 5
39913: PPUSH
39914: CALL_OW 272
39918: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39919: LD_ADDR_VAR 0 9
39923: PUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 251
39933: PPUSH
39934: LD_VAR 0 10
39938: PPUSH
39939: LD_VAR 0 5
39943: PPUSH
39944: CALL_OW 273
39948: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39949: LD_VAR 0 8
39953: PPUSH
39954: LD_VAR 0 9
39958: PPUSH
39959: CALL_OW 488
39963: NOT
39964: IFFALSE 39968
// exit ;
39966: GO 40075
// ComAnimCustom ( unit , 1 ) ;
39968: LD_VAR 0 1
39972: PPUSH
39973: LD_INT 1
39975: PPUSH
39976: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39980: LD_VAR 0 8
39984: PPUSH
39985: LD_VAR 0 9
39989: PPUSH
39990: LD_VAR 0 6
39994: PPUSH
39995: LD_VAR 0 7
39999: PPUSH
40000: CALL_OW 330
// repeat wait ( 1 ) ;
40004: LD_INT 1
40006: PPUSH
40007: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40011: LD_VAR 0 1
40015: PPUSH
40016: CALL_OW 316
40020: PUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: CALL_OW 314
40030: OR
40031: PUSH
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL_OW 302
40041: NOT
40042: OR
40043: PUSH
40044: LD_VAR 0 1
40048: PPUSH
40049: CALL_OW 301
40053: OR
40054: IFFALSE 40004
// RemoveSeeing ( _x , _y , side ) ;
40056: LD_VAR 0 8
40060: PPUSH
40061: LD_VAR 0 9
40065: PPUSH
40066: LD_VAR 0 6
40070: PPUSH
40071: CALL_OW 331
// end ; end_of_file
40075: LD_VAR 0 4
40079: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40080: LD_INT 0
40082: PPUSH
40083: PPUSH
// if exist_mode then
40084: LD_VAR 0 2
40088: IFFALSE 40113
// unit := CreateCharacter ( prefix & ident ) else
40090: LD_ADDR_VAR 0 5
40094: PUSH
40095: LD_VAR 0 3
40099: PUSH
40100: LD_VAR 0 1
40104: STR
40105: PPUSH
40106: CALL_OW 34
40110: ST_TO_ADDR
40111: GO 40128
// unit := NewCharacter ( ident ) ;
40113: LD_ADDR_VAR 0 5
40117: PUSH
40118: LD_VAR 0 1
40122: PPUSH
40123: CALL_OW 25
40127: ST_TO_ADDR
// result := unit ;
40128: LD_ADDR_VAR 0 4
40132: PUSH
40133: LD_VAR 0 5
40137: ST_TO_ADDR
// end ;
40138: LD_VAR 0 4
40142: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40143: LD_INT 0
40145: PPUSH
40146: PPUSH
// if not side or not nation then
40147: LD_VAR 0 1
40151: NOT
40152: PUSH
40153: LD_VAR 0 2
40157: NOT
40158: OR
40159: IFFALSE 40163
// exit ;
40161: GO 40931
// case nation of nation_american :
40163: LD_VAR 0 2
40167: PUSH
40168: LD_INT 1
40170: DOUBLE
40171: EQUAL
40172: IFTRUE 40176
40174: GO 40390
40176: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40177: LD_ADDR_VAR 0 4
40181: PUSH
40182: LD_INT 35
40184: PUSH
40185: LD_INT 45
40187: PUSH
40188: LD_INT 46
40190: PUSH
40191: LD_INT 47
40193: PUSH
40194: LD_INT 82
40196: PUSH
40197: LD_INT 83
40199: PUSH
40200: LD_INT 84
40202: PUSH
40203: LD_INT 85
40205: PUSH
40206: LD_INT 86
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 6
40217: PUSH
40218: LD_INT 15
40220: PUSH
40221: LD_INT 16
40223: PUSH
40224: LD_INT 7
40226: PUSH
40227: LD_INT 12
40229: PUSH
40230: LD_INT 13
40232: PUSH
40233: LD_INT 10
40235: PUSH
40236: LD_INT 14
40238: PUSH
40239: LD_INT 20
40241: PUSH
40242: LD_INT 21
40244: PUSH
40245: LD_INT 22
40247: PUSH
40248: LD_INT 25
40250: PUSH
40251: LD_INT 32
40253: PUSH
40254: LD_INT 27
40256: PUSH
40257: LD_INT 36
40259: PUSH
40260: LD_INT 69
40262: PUSH
40263: LD_INT 39
40265: PUSH
40266: LD_INT 34
40268: PUSH
40269: LD_INT 40
40271: PUSH
40272: LD_INT 48
40274: PUSH
40275: LD_INT 49
40277: PUSH
40278: LD_INT 50
40280: PUSH
40281: LD_INT 51
40283: PUSH
40284: LD_INT 52
40286: PUSH
40287: LD_INT 53
40289: PUSH
40290: LD_INT 54
40292: PUSH
40293: LD_INT 55
40295: PUSH
40296: LD_INT 56
40298: PUSH
40299: LD_INT 57
40301: PUSH
40302: LD_INT 58
40304: PUSH
40305: LD_INT 59
40307: PUSH
40308: LD_INT 60
40310: PUSH
40311: LD_INT 61
40313: PUSH
40314: LD_INT 62
40316: PUSH
40317: LD_INT 80
40319: PUSH
40320: LD_INT 82
40322: PUSH
40323: LD_INT 83
40325: PUSH
40326: LD_INT 84
40328: PUSH
40329: LD_INT 85
40331: PUSH
40332: LD_INT 86
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: ST_TO_ADDR
40388: GO 40855
40390: LD_INT 2
40392: DOUBLE
40393: EQUAL
40394: IFTRUE 40398
40396: GO 40624
40398: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40399: LD_ADDR_VAR 0 4
40403: PUSH
40404: LD_INT 35
40406: PUSH
40407: LD_INT 45
40409: PUSH
40410: LD_INT 46
40412: PUSH
40413: LD_INT 47
40415: PUSH
40416: LD_INT 82
40418: PUSH
40419: LD_INT 83
40421: PUSH
40422: LD_INT 84
40424: PUSH
40425: LD_INT 85
40427: PUSH
40428: LD_INT 87
40430: PUSH
40431: LD_INT 70
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 11
40439: PUSH
40440: LD_INT 3
40442: PUSH
40443: LD_INT 4
40445: PUSH
40446: LD_INT 5
40448: PUSH
40449: LD_INT 6
40451: PUSH
40452: LD_INT 15
40454: PUSH
40455: LD_INT 18
40457: PUSH
40458: LD_INT 7
40460: PUSH
40461: LD_INT 17
40463: PUSH
40464: LD_INT 8
40466: PUSH
40467: LD_INT 20
40469: PUSH
40470: LD_INT 21
40472: PUSH
40473: LD_INT 22
40475: PUSH
40476: LD_INT 72
40478: PUSH
40479: LD_INT 26
40481: PUSH
40482: LD_INT 69
40484: PUSH
40485: LD_INT 39
40487: PUSH
40488: LD_INT 40
40490: PUSH
40491: LD_INT 41
40493: PUSH
40494: LD_INT 42
40496: PUSH
40497: LD_INT 43
40499: PUSH
40500: LD_INT 48
40502: PUSH
40503: LD_INT 49
40505: PUSH
40506: LD_INT 50
40508: PUSH
40509: LD_INT 51
40511: PUSH
40512: LD_INT 52
40514: PUSH
40515: LD_INT 53
40517: PUSH
40518: LD_INT 54
40520: PUSH
40521: LD_INT 55
40523: PUSH
40524: LD_INT 56
40526: PUSH
40527: LD_INT 60
40529: PUSH
40530: LD_INT 61
40532: PUSH
40533: LD_INT 62
40535: PUSH
40536: LD_INT 66
40538: PUSH
40539: LD_INT 67
40541: PUSH
40542: LD_INT 68
40544: PUSH
40545: LD_INT 81
40547: PUSH
40548: LD_INT 82
40550: PUSH
40551: LD_INT 83
40553: PUSH
40554: LD_INT 84
40556: PUSH
40557: LD_INT 85
40559: PUSH
40560: LD_INT 87
40562: PUSH
40563: LD_INT 88
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: ST_TO_ADDR
40622: GO 40855
40624: LD_INT 3
40626: DOUBLE
40627: EQUAL
40628: IFTRUE 40632
40630: GO 40854
40632: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40633: LD_ADDR_VAR 0 4
40637: PUSH
40638: LD_INT 46
40640: PUSH
40641: LD_INT 47
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 82
40652: PUSH
40653: LD_INT 83
40655: PUSH
40656: LD_INT 84
40658: PUSH
40659: LD_INT 85
40661: PUSH
40662: LD_INT 86
40664: PUSH
40665: LD_INT 11
40667: PUSH
40668: LD_INT 9
40670: PUSH
40671: LD_INT 20
40673: PUSH
40674: LD_INT 19
40676: PUSH
40677: LD_INT 21
40679: PUSH
40680: LD_INT 24
40682: PUSH
40683: LD_INT 22
40685: PUSH
40686: LD_INT 25
40688: PUSH
40689: LD_INT 28
40691: PUSH
40692: LD_INT 29
40694: PUSH
40695: LD_INT 30
40697: PUSH
40698: LD_INT 31
40700: PUSH
40701: LD_INT 37
40703: PUSH
40704: LD_INT 38
40706: PUSH
40707: LD_INT 32
40709: PUSH
40710: LD_INT 27
40712: PUSH
40713: LD_INT 33
40715: PUSH
40716: LD_INT 69
40718: PUSH
40719: LD_INT 39
40721: PUSH
40722: LD_INT 34
40724: PUSH
40725: LD_INT 40
40727: PUSH
40728: LD_INT 71
40730: PUSH
40731: LD_INT 23
40733: PUSH
40734: LD_INT 44
40736: PUSH
40737: LD_INT 48
40739: PUSH
40740: LD_INT 49
40742: PUSH
40743: LD_INT 50
40745: PUSH
40746: LD_INT 51
40748: PUSH
40749: LD_INT 52
40751: PUSH
40752: LD_INT 53
40754: PUSH
40755: LD_INT 54
40757: PUSH
40758: LD_INT 55
40760: PUSH
40761: LD_INT 56
40763: PUSH
40764: LD_INT 57
40766: PUSH
40767: LD_INT 58
40769: PUSH
40770: LD_INT 59
40772: PUSH
40773: LD_INT 63
40775: PUSH
40776: LD_INT 64
40778: PUSH
40779: LD_INT 65
40781: PUSH
40782: LD_INT 82
40784: PUSH
40785: LD_INT 83
40787: PUSH
40788: LD_INT 84
40790: PUSH
40791: LD_INT 85
40793: PUSH
40794: LD_INT 86
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: ST_TO_ADDR
40852: GO 40855
40854: POP
// if state > - 1 and state < 3 then
40855: LD_VAR 0 3
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: GREATER
40864: PUSH
40865: LD_VAR 0 3
40869: PUSH
40870: LD_INT 3
40872: LESS
40873: AND
40874: IFFALSE 40931
// for i in result do
40876: LD_ADDR_VAR 0 5
40880: PUSH
40881: LD_VAR 0 4
40885: PUSH
40886: FOR_IN
40887: IFFALSE 40929
// if GetTech ( i , side ) <> state then
40889: LD_VAR 0 5
40893: PPUSH
40894: LD_VAR 0 1
40898: PPUSH
40899: CALL_OW 321
40903: PUSH
40904: LD_VAR 0 3
40908: NONEQUAL
40909: IFFALSE 40927
// result := result diff i ;
40911: LD_ADDR_VAR 0 4
40915: PUSH
40916: LD_VAR 0 4
40920: PUSH
40921: LD_VAR 0 5
40925: DIFF
40926: ST_TO_ADDR
40927: GO 40886
40929: POP
40930: POP
// end ;
40931: LD_VAR 0 4
40935: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40936: LD_INT 0
40938: PPUSH
40939: PPUSH
40940: PPUSH
// result := true ;
40941: LD_ADDR_VAR 0 3
40945: PUSH
40946: LD_INT 1
40948: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40949: LD_ADDR_VAR 0 5
40953: PUSH
40954: LD_VAR 0 2
40958: PPUSH
40959: CALL_OW 480
40963: ST_TO_ADDR
// if not tmp then
40964: LD_VAR 0 5
40968: NOT
40969: IFFALSE 40973
// exit ;
40971: GO 41022
// for i in tmp do
40973: LD_ADDR_VAR 0 4
40977: PUSH
40978: LD_VAR 0 5
40982: PUSH
40983: FOR_IN
40984: IFFALSE 41020
// if GetTech ( i , side ) <> state_researched then
40986: LD_VAR 0 4
40990: PPUSH
40991: LD_VAR 0 1
40995: PPUSH
40996: CALL_OW 321
41000: PUSH
41001: LD_INT 2
41003: NONEQUAL
41004: IFFALSE 41018
// begin result := false ;
41006: LD_ADDR_VAR 0 3
41010: PUSH
41011: LD_INT 0
41013: ST_TO_ADDR
// exit ;
41014: POP
41015: POP
41016: GO 41022
// end ;
41018: GO 40983
41020: POP
41021: POP
// end ;
41022: LD_VAR 0 3
41026: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41027: LD_INT 0
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
41036: PPUSH
41037: PPUSH
41038: PPUSH
41039: PPUSH
41040: PPUSH
41041: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41042: LD_VAR 0 1
41046: NOT
41047: PUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 257
41057: PUSH
41058: LD_INT 9
41060: NONEQUAL
41061: OR
41062: IFFALSE 41066
// exit ;
41064: GO 41639
// side := GetSide ( unit ) ;
41066: LD_ADDR_VAR 0 9
41070: PUSH
41071: LD_VAR 0 1
41075: PPUSH
41076: CALL_OW 255
41080: ST_TO_ADDR
// tech_space := tech_spacanom ;
41081: LD_ADDR_VAR 0 12
41085: PUSH
41086: LD_INT 29
41088: ST_TO_ADDR
// tech_time := tech_taurad ;
41089: LD_ADDR_VAR 0 13
41093: PUSH
41094: LD_INT 28
41096: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41097: LD_ADDR_VAR 0 11
41101: PUSH
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 310
41111: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41112: LD_VAR 0 11
41116: PPUSH
41117: CALL_OW 247
41121: PUSH
41122: LD_INT 2
41124: EQUAL
41125: IFFALSE 41129
// exit ;
41127: GO 41639
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41129: LD_ADDR_VAR 0 8
41133: PUSH
41134: LD_INT 81
41136: PUSH
41137: LD_VAR 0 9
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: LD_INT 21
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PPUSH
41167: CALL_OW 69
41171: ST_TO_ADDR
// if not tmp then
41172: LD_VAR 0 8
41176: NOT
41177: IFFALSE 41181
// exit ;
41179: GO 41639
// if in_unit then
41181: LD_VAR 0 11
41185: IFFALSE 41209
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41187: LD_ADDR_VAR 0 10
41191: PUSH
41192: LD_VAR 0 8
41196: PPUSH
41197: LD_VAR 0 11
41201: PPUSH
41202: CALL_OW 74
41206: ST_TO_ADDR
41207: GO 41229
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41209: LD_ADDR_VAR 0 10
41213: PUSH
41214: LD_VAR 0 8
41218: PPUSH
41219: LD_VAR 0 1
41223: PPUSH
41224: CALL_OW 74
41228: ST_TO_ADDR
// if not enemy then
41229: LD_VAR 0 10
41233: NOT
41234: IFFALSE 41238
// exit ;
41236: GO 41639
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41238: LD_VAR 0 11
41242: PUSH
41243: LD_VAR 0 11
41247: PPUSH
41248: LD_VAR 0 10
41252: PPUSH
41253: CALL_OW 296
41257: PUSH
41258: LD_INT 13
41260: GREATER
41261: AND
41262: PUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: LD_VAR 0 10
41272: PPUSH
41273: CALL_OW 296
41277: PUSH
41278: LD_INT 12
41280: GREATER
41281: OR
41282: IFFALSE 41286
// exit ;
41284: GO 41639
// missile := [ 1 ] ;
41286: LD_ADDR_VAR 0 14
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41297: LD_VAR 0 9
41301: PPUSH
41302: LD_VAR 0 12
41306: PPUSH
41307: CALL_OW 325
41311: IFFALSE 41340
// missile := Replace ( missile , missile + 1 , 2 ) ;
41313: LD_ADDR_VAR 0 14
41317: PUSH
41318: LD_VAR 0 14
41322: PPUSH
41323: LD_VAR 0 14
41327: PUSH
41328: LD_INT 1
41330: PLUS
41331: PPUSH
41332: LD_INT 2
41334: PPUSH
41335: CALL_OW 1
41339: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41340: LD_VAR 0 9
41344: PPUSH
41345: LD_VAR 0 13
41349: PPUSH
41350: CALL_OW 325
41354: PUSH
41355: LD_VAR 0 10
41359: PPUSH
41360: CALL_OW 255
41364: PPUSH
41365: LD_VAR 0 13
41369: PPUSH
41370: CALL_OW 325
41374: NOT
41375: AND
41376: IFFALSE 41405
// missile := Replace ( missile , missile + 1 , 3 ) ;
41378: LD_ADDR_VAR 0 14
41382: PUSH
41383: LD_VAR 0 14
41387: PPUSH
41388: LD_VAR 0 14
41392: PUSH
41393: LD_INT 1
41395: PLUS
41396: PPUSH
41397: LD_INT 3
41399: PPUSH
41400: CALL_OW 1
41404: ST_TO_ADDR
// if missile < 2 then
41405: LD_VAR 0 14
41409: PUSH
41410: LD_INT 2
41412: LESS
41413: IFFALSE 41417
// exit ;
41415: GO 41639
// x := GetX ( enemy ) ;
41417: LD_ADDR_VAR 0 4
41421: PUSH
41422: LD_VAR 0 10
41426: PPUSH
41427: CALL_OW 250
41431: ST_TO_ADDR
// y := GetY ( enemy ) ;
41432: LD_ADDR_VAR 0 5
41436: PUSH
41437: LD_VAR 0 10
41441: PPUSH
41442: CALL_OW 251
41446: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41447: LD_ADDR_VAR 0 6
41451: PUSH
41452: LD_VAR 0 4
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PPUSH
41461: LD_INT 1
41463: PPUSH
41464: CALL_OW 12
41468: PLUS
41469: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41470: LD_ADDR_VAR 0 7
41474: PUSH
41475: LD_VAR 0 5
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PPUSH
41484: LD_INT 1
41486: PPUSH
41487: CALL_OW 12
41491: PLUS
41492: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41493: LD_VAR 0 6
41497: PPUSH
41498: LD_VAR 0 7
41502: PPUSH
41503: CALL_OW 488
41507: NOT
41508: IFFALSE 41530
// begin _x := x ;
41510: LD_ADDR_VAR 0 6
41514: PUSH
41515: LD_VAR 0 4
41519: ST_TO_ADDR
// _y := y ;
41520: LD_ADDR_VAR 0 7
41524: PUSH
41525: LD_VAR 0 5
41529: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41530: LD_ADDR_VAR 0 3
41534: PUSH
41535: LD_INT 1
41537: PPUSH
41538: LD_VAR 0 14
41542: PPUSH
41543: CALL_OW 12
41547: ST_TO_ADDR
// case i of 1 :
41548: LD_VAR 0 3
41552: PUSH
41553: LD_INT 1
41555: DOUBLE
41556: EQUAL
41557: IFTRUE 41561
41559: GO 41578
41561: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41562: LD_VAR 0 1
41566: PPUSH
41567: LD_VAR 0 10
41571: PPUSH
41572: CALL_OW 115
41576: GO 41639
41578: LD_INT 2
41580: DOUBLE
41581: EQUAL
41582: IFTRUE 41586
41584: GO 41608
41586: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41587: LD_VAR 0 1
41591: PPUSH
41592: LD_VAR 0 6
41596: PPUSH
41597: LD_VAR 0 7
41601: PPUSH
41602: CALL_OW 153
41606: GO 41639
41608: LD_INT 3
41610: DOUBLE
41611: EQUAL
41612: IFTRUE 41616
41614: GO 41638
41616: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41617: LD_VAR 0 1
41621: PPUSH
41622: LD_VAR 0 6
41626: PPUSH
41627: LD_VAR 0 7
41631: PPUSH
41632: CALL_OW 154
41636: GO 41639
41638: POP
// end ;
41639: LD_VAR 0 2
41643: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41644: LD_INT 0
41646: PPUSH
41647: PPUSH
41648: PPUSH
41649: PPUSH
41650: PPUSH
41651: PPUSH
// if not unit or not building then
41652: LD_VAR 0 1
41656: NOT
41657: PUSH
41658: LD_VAR 0 2
41662: NOT
41663: OR
41664: IFFALSE 41668
// exit ;
41666: GO 41826
// x := GetX ( building ) ;
41668: LD_ADDR_VAR 0 5
41672: PUSH
41673: LD_VAR 0 2
41677: PPUSH
41678: CALL_OW 250
41682: ST_TO_ADDR
// y := GetY ( building ) ;
41683: LD_ADDR_VAR 0 6
41687: PUSH
41688: LD_VAR 0 2
41692: PPUSH
41693: CALL_OW 251
41697: ST_TO_ADDR
// for i = 0 to 5 do
41698: LD_ADDR_VAR 0 4
41702: PUSH
41703: DOUBLE
41704: LD_INT 0
41706: DEC
41707: ST_TO_ADDR
41708: LD_INT 5
41710: PUSH
41711: FOR_TO
41712: IFFALSE 41824
// begin _x := ShiftX ( x , i , 3 ) ;
41714: LD_ADDR_VAR 0 7
41718: PUSH
41719: LD_VAR 0 5
41723: PPUSH
41724: LD_VAR 0 4
41728: PPUSH
41729: LD_INT 3
41731: PPUSH
41732: CALL_OW 272
41736: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41737: LD_ADDR_VAR 0 8
41741: PUSH
41742: LD_VAR 0 6
41746: PPUSH
41747: LD_VAR 0 4
41751: PPUSH
41752: LD_INT 3
41754: PPUSH
41755: CALL_OW 273
41759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41760: LD_VAR 0 7
41764: PPUSH
41765: LD_VAR 0 8
41769: PPUSH
41770: CALL_OW 488
41774: NOT
41775: IFFALSE 41779
// continue ;
41777: GO 41711
// if HexInfo ( _x , _y ) = 0 then
41779: LD_VAR 0 7
41783: PPUSH
41784: LD_VAR 0 8
41788: PPUSH
41789: CALL_OW 428
41793: PUSH
41794: LD_INT 0
41796: EQUAL
41797: IFFALSE 41822
// begin ComMoveXY ( unit , _x , _y ) ;
41799: LD_VAR 0 1
41803: PPUSH
41804: LD_VAR 0 7
41808: PPUSH
41809: LD_VAR 0 8
41813: PPUSH
41814: CALL_OW 111
// exit ;
41818: POP
41819: POP
41820: GO 41826
// end ; end ;
41822: GO 41711
41824: POP
41825: POP
// end ;
41826: LD_VAR 0 3
41830: RET
// export function ScanBase ( side , base_area ) ; begin
41831: LD_INT 0
41833: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41834: LD_ADDR_VAR 0 3
41838: PUSH
41839: LD_VAR 0 2
41843: PPUSH
41844: LD_INT 81
41846: PUSH
41847: LD_VAR 0 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PPUSH
41856: CALL_OW 70
41860: ST_TO_ADDR
// end ;
41861: LD_VAR 0 3
41865: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41866: LD_INT 0
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
// result := false ;
41872: LD_ADDR_VAR 0 2
41876: PUSH
41877: LD_INT 0
41879: ST_TO_ADDR
// side := GetSide ( unit ) ;
41880: LD_ADDR_VAR 0 3
41884: PUSH
41885: LD_VAR 0 1
41889: PPUSH
41890: CALL_OW 255
41894: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41895: LD_ADDR_VAR 0 4
41899: PUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: CALL_OW 248
41909: ST_TO_ADDR
// case nat of 1 :
41910: LD_VAR 0 4
41914: PUSH
41915: LD_INT 1
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41923
41921: GO 41934
41923: POP
// tech := tech_lassight ; 2 :
41924: LD_ADDR_VAR 0 5
41928: PUSH
41929: LD_INT 12
41931: ST_TO_ADDR
41932: GO 41973
41934: LD_INT 2
41936: DOUBLE
41937: EQUAL
41938: IFTRUE 41942
41940: GO 41953
41942: POP
// tech := tech_mortar ; 3 :
41943: LD_ADDR_VAR 0 5
41947: PUSH
41948: LD_INT 41
41950: ST_TO_ADDR
41951: GO 41973
41953: LD_INT 3
41955: DOUBLE
41956: EQUAL
41957: IFTRUE 41961
41959: GO 41972
41961: POP
// tech := tech_bazooka ; end ;
41962: LD_ADDR_VAR 0 5
41966: PUSH
41967: LD_INT 44
41969: ST_TO_ADDR
41970: GO 41973
41972: POP
// if Researched ( side , tech ) then
41973: LD_VAR 0 3
41977: PPUSH
41978: LD_VAR 0 5
41982: PPUSH
41983: CALL_OW 325
41987: IFFALSE 42014
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41989: LD_ADDR_VAR 0 2
41993: PUSH
41994: LD_INT 5
41996: PUSH
41997: LD_INT 8
41999: PUSH
42000: LD_INT 9
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: PUSH
42008: LD_VAR 0 4
42012: ARRAY
42013: ST_TO_ADDR
// end ;
42014: LD_VAR 0 2
42018: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42019: LD_INT 0
42021: PPUSH
42022: PPUSH
42023: PPUSH
// if not mines then
42024: LD_VAR 0 2
42028: NOT
42029: IFFALSE 42033
// exit ;
42031: GO 42177
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42033: LD_ADDR_VAR 0 5
42037: PUSH
42038: LD_INT 81
42040: PUSH
42041: LD_VAR 0 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: PUSH
42053: LD_INT 21
42055: PUSH
42056: LD_INT 3
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PPUSH
42071: CALL_OW 69
42075: ST_TO_ADDR
// for i in mines do
42076: LD_ADDR_VAR 0 4
42080: PUSH
42081: LD_VAR 0 2
42085: PUSH
42086: FOR_IN
42087: IFFALSE 42175
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42089: LD_VAR 0 4
42093: PUSH
42094: LD_INT 1
42096: ARRAY
42097: PPUSH
42098: LD_VAR 0 4
42102: PUSH
42103: LD_INT 2
42105: ARRAY
42106: PPUSH
42107: CALL_OW 458
42111: NOT
42112: IFFALSE 42116
// continue ;
42114: GO 42086
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42116: LD_VAR 0 4
42120: PUSH
42121: LD_INT 1
42123: ARRAY
42124: PPUSH
42125: LD_VAR 0 4
42129: PUSH
42130: LD_INT 2
42132: ARRAY
42133: PPUSH
42134: CALL_OW 428
42138: PUSH
42139: LD_VAR 0 5
42143: IN
42144: IFFALSE 42173
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42146: LD_VAR 0 4
42150: PUSH
42151: LD_INT 1
42153: ARRAY
42154: PPUSH
42155: LD_VAR 0 4
42159: PUSH
42160: LD_INT 2
42162: ARRAY
42163: PPUSH
42164: LD_VAR 0 1
42168: PPUSH
42169: CALL_OW 456
// end ;
42173: GO 42086
42175: POP
42176: POP
// end ;
42177: LD_VAR 0 3
42181: RET
// export function Count ( array ) ; var i ; begin
42182: LD_INT 0
42184: PPUSH
42185: PPUSH
// result := 0 ;
42186: LD_ADDR_VAR 0 2
42190: PUSH
42191: LD_INT 0
42193: ST_TO_ADDR
// for i in array do
42194: LD_ADDR_VAR 0 3
42198: PUSH
42199: LD_VAR 0 1
42203: PUSH
42204: FOR_IN
42205: IFFALSE 42229
// if i then
42207: LD_VAR 0 3
42211: IFFALSE 42227
// result := result + 1 ;
42213: LD_ADDR_VAR 0 2
42217: PUSH
42218: LD_VAR 0 2
42222: PUSH
42223: LD_INT 1
42225: PLUS
42226: ST_TO_ADDR
42227: GO 42204
42229: POP
42230: POP
// end ;
42231: LD_VAR 0 2
42235: RET
// export function IsEmpty ( building ) ; begin
42236: LD_INT 0
42238: PPUSH
// if not building then
42239: LD_VAR 0 1
42243: NOT
42244: IFFALSE 42248
// exit ;
42246: GO 42291
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42248: LD_ADDR_VAR 0 2
42252: PUSH
42253: LD_VAR 0 1
42257: PUSH
42258: LD_INT 22
42260: PUSH
42261: LD_VAR 0 1
42265: PPUSH
42266: CALL_OW 255
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 58
42277: PUSH
42278: EMPTY
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PPUSH
42285: CALL_OW 69
42289: IN
42290: ST_TO_ADDR
// end ;
42291: LD_VAR 0 2
42295: RET
// export function IsNotFull ( building ) ; var places ; begin
42296: LD_INT 0
42298: PPUSH
42299: PPUSH
// if not building then
42300: LD_VAR 0 1
42304: NOT
42305: IFFALSE 42309
// exit ;
42307: GO 42480
// result := false ;
42309: LD_ADDR_VAR 0 2
42313: PUSH
42314: LD_INT 0
42316: ST_TO_ADDR
// places := 0 ;
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_INT 0
42324: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42325: LD_VAR 0 1
42329: PPUSH
42330: CALL_OW 266
42334: PUSH
42335: LD_INT 0
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42397
42341: LD_INT 1
42343: DOUBLE
42344: EQUAL
42345: IFTRUE 42397
42347: LD_INT 6
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42397
42353: LD_INT 7
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42397
42359: LD_INT 8
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42397
42365: LD_INT 4
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42397
42371: LD_INT 5
42373: DOUBLE
42374: EQUAL
42375: IFTRUE 42397
42377: LD_INT 2
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42397
42383: LD_INT 3
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42397
42389: LD_INT 35
42391: DOUBLE
42392: EQUAL
42393: IFTRUE 42397
42395: GO 42408
42397: POP
// places := 6 ; b_bunker , b_breastwork :
42398: LD_ADDR_VAR 0 3
42402: PUSH
42403: LD_INT 6
42405: ST_TO_ADDR
42406: GO 42453
42408: LD_INT 32
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42422
42414: LD_INT 31
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42422
42420: GO 42433
42422: POP
// places := 1 ; b_control_tower :
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
42431: GO 42453
42433: LD_INT 36
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42441
42439: GO 42452
42441: POP
// places := 3 ; end ;
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 3
42449: ST_TO_ADDR
42450: GO 42453
42452: POP
// if places then
42453: LD_VAR 0 3
42457: IFFALSE 42480
// result := UnitsInside ( building ) < places ;
42459: LD_ADDR_VAR 0 2
42463: PUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: CALL_OW 313
42473: PUSH
42474: LD_VAR 0 3
42478: LESS
42479: ST_TO_ADDR
// end ;
42480: LD_VAR 0 2
42484: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42485: LD_INT 0
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
// tmp := [ ] ;
42491: LD_ADDR_VAR 0 3
42495: PUSH
42496: EMPTY
42497: ST_TO_ADDR
// list := [ ] ;
42498: LD_ADDR_VAR 0 5
42502: PUSH
42503: EMPTY
42504: ST_TO_ADDR
// for i = 16 to 25 do
42505: LD_ADDR_VAR 0 4
42509: PUSH
42510: DOUBLE
42511: LD_INT 16
42513: DEC
42514: ST_TO_ADDR
42515: LD_INT 25
42517: PUSH
42518: FOR_TO
42519: IFFALSE 42592
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_VAR 0 3
42530: PUSH
42531: LD_INT 22
42533: PUSH
42534: LD_VAR 0 1
42538: PPUSH
42539: CALL_OW 255
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 91
42550: PUSH
42551: LD_VAR 0 1
42555: PUSH
42556: LD_INT 6
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 30
42566: PUSH
42567: LD_VAR 0 4
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: PUSH
42581: EMPTY
42582: LIST
42583: PPUSH
42584: CALL_OW 69
42588: ADD
42589: ST_TO_ADDR
42590: GO 42518
42592: POP
42593: POP
// for i = 1 to tmp do
42594: LD_ADDR_VAR 0 4
42598: PUSH
42599: DOUBLE
42600: LD_INT 1
42602: DEC
42603: ST_TO_ADDR
42604: LD_VAR 0 3
42608: PUSH
42609: FOR_TO
42610: IFFALSE 42698
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42612: LD_ADDR_VAR 0 5
42616: PUSH
42617: LD_VAR 0 5
42621: PUSH
42622: LD_VAR 0 3
42626: PUSH
42627: LD_VAR 0 4
42631: ARRAY
42632: PPUSH
42633: CALL_OW 266
42637: PUSH
42638: LD_VAR 0 3
42642: PUSH
42643: LD_VAR 0 4
42647: ARRAY
42648: PPUSH
42649: CALL_OW 250
42653: PUSH
42654: LD_VAR 0 3
42658: PUSH
42659: LD_VAR 0 4
42663: ARRAY
42664: PPUSH
42665: CALL_OW 251
42669: PUSH
42670: LD_VAR 0 3
42674: PUSH
42675: LD_VAR 0 4
42679: ARRAY
42680: PPUSH
42681: CALL_OW 254
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: PUSH
42692: EMPTY
42693: LIST
42694: ADD
42695: ST_TO_ADDR
42696: GO 42609
42698: POP
42699: POP
// result := list ;
42700: LD_ADDR_VAR 0 2
42704: PUSH
42705: LD_VAR 0 5
42709: ST_TO_ADDR
// end ;
42710: LD_VAR 0 2
42714: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42715: LD_INT 0
42717: PPUSH
42718: PPUSH
42719: PPUSH
42720: PPUSH
42721: PPUSH
42722: PPUSH
42723: PPUSH
// if not factory then
42724: LD_VAR 0 1
42728: NOT
42729: IFFALSE 42733
// exit ;
42731: GO 43326
// if control = control_apeman then
42733: LD_VAR 0 4
42737: PUSH
42738: LD_INT 5
42740: EQUAL
42741: IFFALSE 42850
// begin tmp := UnitsInside ( factory ) ;
42743: LD_ADDR_VAR 0 8
42747: PUSH
42748: LD_VAR 0 1
42752: PPUSH
42753: CALL_OW 313
42757: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42758: LD_VAR 0 8
42762: PPUSH
42763: LD_INT 25
42765: PUSH
42766: LD_INT 12
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PPUSH
42773: CALL_OW 72
42777: NOT
42778: IFFALSE 42788
// control := control_manual ;
42780: LD_ADDR_VAR 0 4
42784: PUSH
42785: LD_INT 1
42787: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42788: LD_ADDR_VAR 0 8
42792: PUSH
42793: LD_VAR 0 1
42797: PPUSH
42798: CALL 42485 0 1
42802: ST_TO_ADDR
// if tmp then
42803: LD_VAR 0 8
42807: IFFALSE 42850
// begin for i in tmp do
42809: LD_ADDR_VAR 0 7
42813: PUSH
42814: LD_VAR 0 8
42818: PUSH
42819: FOR_IN
42820: IFFALSE 42848
// if i [ 1 ] = b_ext_radio then
42822: LD_VAR 0 7
42826: PUSH
42827: LD_INT 1
42829: ARRAY
42830: PUSH
42831: LD_INT 22
42833: EQUAL
42834: IFFALSE 42846
// begin control := control_remote ;
42836: LD_ADDR_VAR 0 4
42840: PUSH
42841: LD_INT 2
42843: ST_TO_ADDR
// break ;
42844: GO 42848
// end ;
42846: GO 42819
42848: POP
42849: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42850: LD_VAR 0 1
42854: PPUSH
42855: LD_VAR 0 2
42859: PPUSH
42860: LD_VAR 0 3
42864: PPUSH
42865: LD_VAR 0 4
42869: PPUSH
42870: LD_VAR 0 5
42874: PPUSH
42875: CALL_OW 448
42879: IFFALSE 42914
// begin result := [ chassis , engine , control , weapon ] ;
42881: LD_ADDR_VAR 0 6
42885: PUSH
42886: LD_VAR 0 2
42890: PUSH
42891: LD_VAR 0 3
42895: PUSH
42896: LD_VAR 0 4
42900: PUSH
42901: LD_VAR 0 5
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
// exit ;
42912: GO 43326
// end ; _chassis := AvailableChassisList ( factory ) ;
42914: LD_ADDR_VAR 0 9
42918: PUSH
42919: LD_VAR 0 1
42923: PPUSH
42924: CALL_OW 475
42928: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42929: LD_ADDR_VAR 0 11
42933: PUSH
42934: LD_VAR 0 1
42938: PPUSH
42939: CALL_OW 476
42943: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42944: LD_ADDR_VAR 0 12
42948: PUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 477
42958: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42959: LD_ADDR_VAR 0 10
42963: PUSH
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 478
42973: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42974: LD_VAR 0 9
42978: NOT
42979: PUSH
42980: LD_VAR 0 11
42984: NOT
42985: OR
42986: PUSH
42987: LD_VAR 0 12
42991: NOT
42992: OR
42993: PUSH
42994: LD_VAR 0 10
42998: NOT
42999: OR
43000: IFFALSE 43035
// begin result := [ chassis , engine , control , weapon ] ;
43002: LD_ADDR_VAR 0 6
43006: PUSH
43007: LD_VAR 0 2
43011: PUSH
43012: LD_VAR 0 3
43016: PUSH
43017: LD_VAR 0 4
43021: PUSH
43022: LD_VAR 0 5
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
// exit ;
43033: GO 43326
// end ; if not chassis in _chassis then
43035: LD_VAR 0 2
43039: PUSH
43040: LD_VAR 0 9
43044: IN
43045: NOT
43046: IFFALSE 43072
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43048: LD_ADDR_VAR 0 2
43052: PUSH
43053: LD_VAR 0 9
43057: PUSH
43058: LD_INT 1
43060: PPUSH
43061: LD_VAR 0 9
43065: PPUSH
43066: CALL_OW 12
43070: ARRAY
43071: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43072: LD_VAR 0 2
43076: PPUSH
43077: LD_VAR 0 3
43081: PPUSH
43082: CALL 43331 0 2
43086: NOT
43087: IFFALSE 43146
// repeat engine := _engine [ 1 ] ;
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_VAR 0 11
43098: PUSH
43099: LD_INT 1
43101: ARRAY
43102: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43103: LD_ADDR_VAR 0 11
43107: PUSH
43108: LD_VAR 0 11
43112: PPUSH
43113: LD_INT 1
43115: PPUSH
43116: CALL_OW 3
43120: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43121: LD_VAR 0 2
43125: PPUSH
43126: LD_VAR 0 3
43130: PPUSH
43131: CALL 43331 0 2
43135: PUSH
43136: LD_VAR 0 11
43140: PUSH
43141: EMPTY
43142: EQUAL
43143: OR
43144: IFFALSE 43089
// if not control in _control then
43146: LD_VAR 0 4
43150: PUSH
43151: LD_VAR 0 12
43155: IN
43156: NOT
43157: IFFALSE 43183
// control := _control [ rand ( 1 , _control ) ] ;
43159: LD_ADDR_VAR 0 4
43163: PUSH
43164: LD_VAR 0 12
43168: PUSH
43169: LD_INT 1
43171: PPUSH
43172: LD_VAR 0 12
43176: PPUSH
43177: CALL_OW 12
43181: ARRAY
43182: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43183: LD_VAR 0 2
43187: PPUSH
43188: LD_VAR 0 5
43192: PPUSH
43193: CALL 43551 0 2
43197: NOT
43198: IFFALSE 43257
// repeat weapon := _weapon [ 1 ] ;
43200: LD_ADDR_VAR 0 5
43204: PUSH
43205: LD_VAR 0 10
43209: PUSH
43210: LD_INT 1
43212: ARRAY
43213: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43214: LD_ADDR_VAR 0 10
43218: PUSH
43219: LD_VAR 0 10
43223: PPUSH
43224: LD_INT 1
43226: PPUSH
43227: CALL_OW 3
43231: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43232: LD_VAR 0 2
43236: PPUSH
43237: LD_VAR 0 5
43241: PPUSH
43242: CALL 43551 0 2
43246: PUSH
43247: LD_VAR 0 10
43251: PUSH
43252: EMPTY
43253: EQUAL
43254: OR
43255: IFFALSE 43200
// result := [ ] ;
43257: LD_ADDR_VAR 0 6
43261: PUSH
43262: EMPTY
43263: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43264: LD_VAR 0 1
43268: PPUSH
43269: LD_VAR 0 2
43273: PPUSH
43274: LD_VAR 0 3
43278: PPUSH
43279: LD_VAR 0 4
43283: PPUSH
43284: LD_VAR 0 5
43288: PPUSH
43289: CALL_OW 448
43293: IFFALSE 43326
// result := [ chassis , engine , control , weapon ] ;
43295: LD_ADDR_VAR 0 6
43299: PUSH
43300: LD_VAR 0 2
43304: PUSH
43305: LD_VAR 0 3
43309: PUSH
43310: LD_VAR 0 4
43314: PUSH
43315: LD_VAR 0 5
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: ST_TO_ADDR
// end ;
43326: LD_VAR 0 6
43330: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43331: LD_INT 0
43333: PPUSH
// if not chassis or not engine then
43334: LD_VAR 0 1
43338: NOT
43339: PUSH
43340: LD_VAR 0 2
43344: NOT
43345: OR
43346: IFFALSE 43350
// exit ;
43348: GO 43546
// case engine of engine_solar :
43350: LD_VAR 0 2
43354: PUSH
43355: LD_INT 2
43357: DOUBLE
43358: EQUAL
43359: IFTRUE 43363
43361: GO 43401
43363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43364: LD_ADDR_VAR 0 3
43368: PUSH
43369: LD_INT 11
43371: PUSH
43372: LD_INT 12
43374: PUSH
43375: LD_INT 13
43377: PUSH
43378: LD_INT 14
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 3
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
43399: GO 43530
43401: LD_INT 1
43403: DOUBLE
43404: EQUAL
43405: IFTRUE 43409
43407: GO 43471
43409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_INT 11
43417: PUSH
43418: LD_INT 12
43420: PUSH
43421: LD_INT 13
43423: PUSH
43424: LD_INT 14
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: LD_INT 3
43435: PUSH
43436: LD_INT 4
43438: PUSH
43439: LD_INT 5
43441: PUSH
43442: LD_INT 21
43444: PUSH
43445: LD_INT 23
43447: PUSH
43448: LD_INT 22
43450: PUSH
43451: LD_INT 24
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: ST_TO_ADDR
43469: GO 43530
43471: LD_INT 3
43473: DOUBLE
43474: EQUAL
43475: IFTRUE 43479
43477: GO 43529
43479: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43480: LD_ADDR_VAR 0 3
43484: PUSH
43485: LD_INT 13
43487: PUSH
43488: LD_INT 14
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 3
43496: PUSH
43497: LD_INT 4
43499: PUSH
43500: LD_INT 5
43502: PUSH
43503: LD_INT 21
43505: PUSH
43506: LD_INT 22
43508: PUSH
43509: LD_INT 23
43511: PUSH
43512: LD_INT 24
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: ST_TO_ADDR
43527: GO 43530
43529: POP
// result := ( chassis in result ) ;
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_VAR 0 1
43539: PUSH
43540: LD_VAR 0 3
43544: IN
43545: ST_TO_ADDR
// end ;
43546: LD_VAR 0 3
43550: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43551: LD_INT 0
43553: PPUSH
// if not chassis or not weapon then
43554: LD_VAR 0 1
43558: NOT
43559: PUSH
43560: LD_VAR 0 2
43564: NOT
43565: OR
43566: IFFALSE 43570
// exit ;
43568: GO 44630
// case weapon of us_machine_gun :
43570: LD_VAR 0 2
43574: PUSH
43575: LD_INT 2
43577: DOUBLE
43578: EQUAL
43579: IFTRUE 43583
43581: GO 43613
43583: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: LD_INT 5
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: ST_TO_ADDR
43611: GO 44614
43613: LD_INT 3
43615: DOUBLE
43616: EQUAL
43617: IFTRUE 43621
43619: GO 43651
43621: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43622: LD_ADDR_VAR 0 3
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 3
43635: PUSH
43636: LD_INT 4
43638: PUSH
43639: LD_INT 5
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: ST_TO_ADDR
43649: GO 44614
43651: LD_INT 11
43653: DOUBLE
43654: EQUAL
43655: IFTRUE 43659
43657: GO 43689
43659: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43660: LD_ADDR_VAR 0 3
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: LD_INT 4
43676: PUSH
43677: LD_INT 5
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: ST_TO_ADDR
43687: GO 44614
43689: LD_INT 4
43691: DOUBLE
43692: EQUAL
43693: IFTRUE 43697
43695: GO 43723
43697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43698: LD_ADDR_VAR 0 3
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: LD_INT 3
43708: PUSH
43709: LD_INT 4
43711: PUSH
43712: LD_INT 5
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: ST_TO_ADDR
43721: GO 44614
43723: LD_INT 5
43725: DOUBLE
43726: EQUAL
43727: IFTRUE 43731
43729: GO 43757
43731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43732: LD_ADDR_VAR 0 3
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: LD_INT 3
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: LD_INT 5
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: ST_TO_ADDR
43755: GO 44614
43757: LD_INT 9
43759: DOUBLE
43760: EQUAL
43761: IFTRUE 43765
43763: GO 43791
43765: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43766: LD_ADDR_VAR 0 3
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: LD_INT 3
43776: PUSH
43777: LD_INT 4
43779: PUSH
43780: LD_INT 5
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: ST_TO_ADDR
43789: GO 44614
43791: LD_INT 7
43793: DOUBLE
43794: EQUAL
43795: IFTRUE 43799
43797: GO 43825
43799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43800: LD_ADDR_VAR 0 3
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: LD_INT 4
43813: PUSH
43814: LD_INT 5
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: ST_TO_ADDR
43823: GO 44614
43825: LD_INT 12
43827: DOUBLE
43828: EQUAL
43829: IFTRUE 43833
43831: GO 43859
43833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43834: LD_ADDR_VAR 0 3
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 3
43844: PUSH
43845: LD_INT 4
43847: PUSH
43848: LD_INT 5
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
43857: GO 44614
43859: LD_INT 13
43861: DOUBLE
43862: EQUAL
43863: IFTRUE 43867
43865: GO 43893
43867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43868: LD_ADDR_VAR 0 3
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 3
43878: PUSH
43879: LD_INT 4
43881: PUSH
43882: LD_INT 5
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
43891: GO 44614
43893: LD_INT 14
43895: DOUBLE
43896: EQUAL
43897: IFTRUE 43901
43899: GO 43919
43901: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43902: LD_ADDR_VAR 0 3
43906: PUSH
43907: LD_INT 4
43909: PUSH
43910: LD_INT 5
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: ST_TO_ADDR
43917: GO 44614
43919: LD_INT 6
43921: DOUBLE
43922: EQUAL
43923: IFTRUE 43927
43925: GO 43945
43927: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43928: LD_ADDR_VAR 0 3
43932: PUSH
43933: LD_INT 4
43935: PUSH
43936: LD_INT 5
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: ST_TO_ADDR
43943: GO 44614
43945: LD_INT 10
43947: DOUBLE
43948: EQUAL
43949: IFTRUE 43953
43951: GO 43971
43953: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43954: LD_ADDR_VAR 0 3
43958: PUSH
43959: LD_INT 4
43961: PUSH
43962: LD_INT 5
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: ST_TO_ADDR
43969: GO 44614
43971: LD_INT 22
43973: DOUBLE
43974: EQUAL
43975: IFTRUE 43979
43977: GO 44005
43979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43980: LD_ADDR_VAR 0 3
43984: PUSH
43985: LD_INT 11
43987: PUSH
43988: LD_INT 12
43990: PUSH
43991: LD_INT 13
43993: PUSH
43994: LD_INT 14
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: ST_TO_ADDR
44003: GO 44614
44005: LD_INT 23
44007: DOUBLE
44008: EQUAL
44009: IFTRUE 44013
44011: GO 44039
44013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44014: LD_ADDR_VAR 0 3
44018: PUSH
44019: LD_INT 11
44021: PUSH
44022: LD_INT 12
44024: PUSH
44025: LD_INT 13
44027: PUSH
44028: LD_INT 14
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: ST_TO_ADDR
44037: GO 44614
44039: LD_INT 24
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44073
44047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44048: LD_ADDR_VAR 0 3
44052: PUSH
44053: LD_INT 11
44055: PUSH
44056: LD_INT 12
44058: PUSH
44059: LD_INT 13
44061: PUSH
44062: LD_INT 14
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: ST_TO_ADDR
44071: GO 44614
44073: LD_INT 30
44075: DOUBLE
44076: EQUAL
44077: IFTRUE 44081
44079: GO 44107
44081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44082: LD_ADDR_VAR 0 3
44086: PUSH
44087: LD_INT 11
44089: PUSH
44090: LD_INT 12
44092: PUSH
44093: LD_INT 13
44095: PUSH
44096: LD_INT 14
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: ST_TO_ADDR
44105: GO 44614
44107: LD_INT 25
44109: DOUBLE
44110: EQUAL
44111: IFTRUE 44115
44113: GO 44133
44115: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44116: LD_ADDR_VAR 0 3
44120: PUSH
44121: LD_INT 13
44123: PUSH
44124: LD_INT 14
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: ST_TO_ADDR
44131: GO 44614
44133: LD_INT 27
44135: DOUBLE
44136: EQUAL
44137: IFTRUE 44141
44139: GO 44159
44141: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44142: LD_ADDR_VAR 0 3
44146: PUSH
44147: LD_INT 13
44149: PUSH
44150: LD_INT 14
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: ST_TO_ADDR
44157: GO 44614
44159: LD_INT 92
44161: DOUBLE
44162: EQUAL
44163: IFTRUE 44167
44165: GO 44193
44167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44168: LD_ADDR_VAR 0 3
44172: PUSH
44173: LD_INT 11
44175: PUSH
44176: LD_INT 12
44178: PUSH
44179: LD_INT 13
44181: PUSH
44182: LD_INT 14
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: ST_TO_ADDR
44191: GO 44614
44193: LD_INT 28
44195: DOUBLE
44196: EQUAL
44197: IFTRUE 44201
44199: GO 44219
44201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44202: LD_ADDR_VAR 0 3
44206: PUSH
44207: LD_INT 13
44209: PUSH
44210: LD_INT 14
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: ST_TO_ADDR
44217: GO 44614
44219: LD_INT 29
44221: DOUBLE
44222: EQUAL
44223: IFTRUE 44227
44225: GO 44245
44227: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44228: LD_ADDR_VAR 0 3
44232: PUSH
44233: LD_INT 13
44235: PUSH
44236: LD_INT 14
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: ST_TO_ADDR
44243: GO 44614
44245: LD_INT 31
44247: DOUBLE
44248: EQUAL
44249: IFTRUE 44253
44251: GO 44271
44253: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44254: LD_ADDR_VAR 0 3
44258: PUSH
44259: LD_INT 13
44261: PUSH
44262: LD_INT 14
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: ST_TO_ADDR
44269: GO 44614
44271: LD_INT 26
44273: DOUBLE
44274: EQUAL
44275: IFTRUE 44279
44277: GO 44297
44279: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44280: LD_ADDR_VAR 0 3
44284: PUSH
44285: LD_INT 13
44287: PUSH
44288: LD_INT 14
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: ST_TO_ADDR
44295: GO 44614
44297: LD_INT 42
44299: DOUBLE
44300: EQUAL
44301: IFTRUE 44305
44303: GO 44331
44305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44306: LD_ADDR_VAR 0 3
44310: PUSH
44311: LD_INT 21
44313: PUSH
44314: LD_INT 22
44316: PUSH
44317: LD_INT 23
44319: PUSH
44320: LD_INT 24
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
44329: GO 44614
44331: LD_INT 43
44333: DOUBLE
44334: EQUAL
44335: IFTRUE 44339
44337: GO 44365
44339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44340: LD_ADDR_VAR 0 3
44344: PUSH
44345: LD_INT 21
44347: PUSH
44348: LD_INT 22
44350: PUSH
44351: LD_INT 23
44353: PUSH
44354: LD_INT 24
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: ST_TO_ADDR
44363: GO 44614
44365: LD_INT 44
44367: DOUBLE
44368: EQUAL
44369: IFTRUE 44373
44371: GO 44399
44373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44374: LD_ADDR_VAR 0 3
44378: PUSH
44379: LD_INT 21
44381: PUSH
44382: LD_INT 22
44384: PUSH
44385: LD_INT 23
44387: PUSH
44388: LD_INT 24
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
44397: GO 44614
44399: LD_INT 45
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44407
44405: GO 44433
44407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44408: LD_ADDR_VAR 0 3
44412: PUSH
44413: LD_INT 21
44415: PUSH
44416: LD_INT 22
44418: PUSH
44419: LD_INT 23
44421: PUSH
44422: LD_INT 24
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: ST_TO_ADDR
44431: GO 44614
44433: LD_INT 49
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44441
44439: GO 44467
44441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44442: LD_ADDR_VAR 0 3
44446: PUSH
44447: LD_INT 21
44449: PUSH
44450: LD_INT 22
44452: PUSH
44453: LD_INT 23
44455: PUSH
44456: LD_INT 24
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: ST_TO_ADDR
44465: GO 44614
44467: LD_INT 51
44469: DOUBLE
44470: EQUAL
44471: IFTRUE 44475
44473: GO 44501
44475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44476: LD_ADDR_VAR 0 3
44480: PUSH
44481: LD_INT 21
44483: PUSH
44484: LD_INT 22
44486: PUSH
44487: LD_INT 23
44489: PUSH
44490: LD_INT 24
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
44499: GO 44614
44501: LD_INT 52
44503: DOUBLE
44504: EQUAL
44505: IFTRUE 44509
44507: GO 44535
44509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44510: LD_ADDR_VAR 0 3
44514: PUSH
44515: LD_INT 21
44517: PUSH
44518: LD_INT 22
44520: PUSH
44521: LD_INT 23
44523: PUSH
44524: LD_INT 24
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: ST_TO_ADDR
44533: GO 44614
44535: LD_INT 53
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44543
44541: GO 44561
44543: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44544: LD_ADDR_VAR 0 3
44548: PUSH
44549: LD_INT 23
44551: PUSH
44552: LD_INT 24
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: ST_TO_ADDR
44559: GO 44614
44561: LD_INT 46
44563: DOUBLE
44564: EQUAL
44565: IFTRUE 44569
44567: GO 44587
44569: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44570: LD_ADDR_VAR 0 3
44574: PUSH
44575: LD_INT 23
44577: PUSH
44578: LD_INT 24
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: ST_TO_ADDR
44585: GO 44614
44587: LD_INT 47
44589: DOUBLE
44590: EQUAL
44591: IFTRUE 44595
44593: GO 44613
44595: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44596: LD_ADDR_VAR 0 3
44600: PUSH
44601: LD_INT 23
44603: PUSH
44604: LD_INT 24
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: ST_TO_ADDR
44611: GO 44614
44613: POP
// result := ( chassis in result ) ;
44614: LD_ADDR_VAR 0 3
44618: PUSH
44619: LD_VAR 0 1
44623: PUSH
44624: LD_VAR 0 3
44628: IN
44629: ST_TO_ADDR
// end ;
44630: LD_VAR 0 3
44634: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44635: LD_INT 0
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
// result := array ;
44644: LD_ADDR_VAR 0 5
44648: PUSH
44649: LD_VAR 0 1
44653: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44654: LD_VAR 0 1
44658: NOT
44659: PUSH
44660: LD_VAR 0 2
44664: NOT
44665: OR
44666: PUSH
44667: LD_VAR 0 3
44671: NOT
44672: OR
44673: PUSH
44674: LD_VAR 0 2
44678: PUSH
44679: LD_VAR 0 1
44683: GREATER
44684: OR
44685: PUSH
44686: LD_VAR 0 3
44690: PUSH
44691: LD_VAR 0 1
44695: GREATER
44696: OR
44697: IFFALSE 44701
// exit ;
44699: GO 44997
// if direction then
44701: LD_VAR 0 4
44705: IFFALSE 44769
// begin d := 1 ;
44707: LD_ADDR_VAR 0 9
44711: PUSH
44712: LD_INT 1
44714: ST_TO_ADDR
// if i_from > i_to then
44715: LD_VAR 0 2
44719: PUSH
44720: LD_VAR 0 3
44724: GREATER
44725: IFFALSE 44751
// length := ( array - i_from ) + i_to else
44727: LD_ADDR_VAR 0 11
44731: PUSH
44732: LD_VAR 0 1
44736: PUSH
44737: LD_VAR 0 2
44741: MINUS
44742: PUSH
44743: LD_VAR 0 3
44747: PLUS
44748: ST_TO_ADDR
44749: GO 44767
// length := i_to - i_from ;
44751: LD_ADDR_VAR 0 11
44755: PUSH
44756: LD_VAR 0 3
44760: PUSH
44761: LD_VAR 0 2
44765: MINUS
44766: ST_TO_ADDR
// end else
44767: GO 44830
// begin d := - 1 ;
44769: LD_ADDR_VAR 0 9
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: ST_TO_ADDR
// if i_from > i_to then
44778: LD_VAR 0 2
44782: PUSH
44783: LD_VAR 0 3
44787: GREATER
44788: IFFALSE 44808
// length := i_from - i_to else
44790: LD_ADDR_VAR 0 11
44794: PUSH
44795: LD_VAR 0 2
44799: PUSH
44800: LD_VAR 0 3
44804: MINUS
44805: ST_TO_ADDR
44806: GO 44830
// length := ( array - i_to ) + i_from ;
44808: LD_ADDR_VAR 0 11
44812: PUSH
44813: LD_VAR 0 1
44817: PUSH
44818: LD_VAR 0 3
44822: MINUS
44823: PUSH
44824: LD_VAR 0 2
44828: PLUS
44829: ST_TO_ADDR
// end ; if not length then
44830: LD_VAR 0 11
44834: NOT
44835: IFFALSE 44839
// exit ;
44837: GO 44997
// tmp := array ;
44839: LD_ADDR_VAR 0 10
44843: PUSH
44844: LD_VAR 0 1
44848: ST_TO_ADDR
// for i = 1 to length do
44849: LD_ADDR_VAR 0 6
44853: PUSH
44854: DOUBLE
44855: LD_INT 1
44857: DEC
44858: ST_TO_ADDR
44859: LD_VAR 0 11
44863: PUSH
44864: FOR_TO
44865: IFFALSE 44985
// begin for j = 1 to array do
44867: LD_ADDR_VAR 0 7
44871: PUSH
44872: DOUBLE
44873: LD_INT 1
44875: DEC
44876: ST_TO_ADDR
44877: LD_VAR 0 1
44881: PUSH
44882: FOR_TO
44883: IFFALSE 44971
// begin k := j + d ;
44885: LD_ADDR_VAR 0 8
44889: PUSH
44890: LD_VAR 0 7
44894: PUSH
44895: LD_VAR 0 9
44899: PLUS
44900: ST_TO_ADDR
// if k > array then
44901: LD_VAR 0 8
44905: PUSH
44906: LD_VAR 0 1
44910: GREATER
44911: IFFALSE 44921
// k := 1 ;
44913: LD_ADDR_VAR 0 8
44917: PUSH
44918: LD_INT 1
44920: ST_TO_ADDR
// if not k then
44921: LD_VAR 0 8
44925: NOT
44926: IFFALSE 44938
// k := array ;
44928: LD_ADDR_VAR 0 8
44932: PUSH
44933: LD_VAR 0 1
44937: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44938: LD_ADDR_VAR 0 10
44942: PUSH
44943: LD_VAR 0 10
44947: PPUSH
44948: LD_VAR 0 8
44952: PPUSH
44953: LD_VAR 0 1
44957: PUSH
44958: LD_VAR 0 7
44962: ARRAY
44963: PPUSH
44964: CALL_OW 1
44968: ST_TO_ADDR
// end ;
44969: GO 44882
44971: POP
44972: POP
// array := tmp ;
44973: LD_ADDR_VAR 0 1
44977: PUSH
44978: LD_VAR 0 10
44982: ST_TO_ADDR
// end ;
44983: GO 44864
44985: POP
44986: POP
// result := array ;
44987: LD_ADDR_VAR 0 5
44991: PUSH
44992: LD_VAR 0 1
44996: ST_TO_ADDR
// end ;
44997: LD_VAR 0 5
45001: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45002: LD_INT 0
45004: PPUSH
45005: PPUSH
// result := 0 ;
45006: LD_ADDR_VAR 0 3
45010: PUSH
45011: LD_INT 0
45013: ST_TO_ADDR
// if not array or not value in array then
45014: LD_VAR 0 1
45018: NOT
45019: PUSH
45020: LD_VAR 0 2
45024: PUSH
45025: LD_VAR 0 1
45029: IN
45030: NOT
45031: OR
45032: IFFALSE 45036
// exit ;
45034: GO 45090
// for i = 1 to array do
45036: LD_ADDR_VAR 0 4
45040: PUSH
45041: DOUBLE
45042: LD_INT 1
45044: DEC
45045: ST_TO_ADDR
45046: LD_VAR 0 1
45050: PUSH
45051: FOR_TO
45052: IFFALSE 45088
// if value = array [ i ] then
45054: LD_VAR 0 2
45058: PUSH
45059: LD_VAR 0 1
45063: PUSH
45064: LD_VAR 0 4
45068: ARRAY
45069: EQUAL
45070: IFFALSE 45086
// begin result := i ;
45072: LD_ADDR_VAR 0 3
45076: PUSH
45077: LD_VAR 0 4
45081: ST_TO_ADDR
// exit ;
45082: POP
45083: POP
45084: GO 45090
// end ;
45086: GO 45051
45088: POP
45089: POP
// end ;
45090: LD_VAR 0 3
45094: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45095: LD_INT 0
45097: PPUSH
// vc_chassis := chassis ;
45098: LD_ADDR_OWVAR 37
45102: PUSH
45103: LD_VAR 0 1
45107: ST_TO_ADDR
// vc_engine := engine ;
45108: LD_ADDR_OWVAR 39
45112: PUSH
45113: LD_VAR 0 2
45117: ST_TO_ADDR
// vc_control := control ;
45118: LD_ADDR_OWVAR 38
45122: PUSH
45123: LD_VAR 0 3
45127: ST_TO_ADDR
// vc_weapon := weapon ;
45128: LD_ADDR_OWVAR 40
45132: PUSH
45133: LD_VAR 0 4
45137: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45138: LD_ADDR_OWVAR 41
45142: PUSH
45143: LD_VAR 0 5
45147: ST_TO_ADDR
// end ;
45148: LD_VAR 0 6
45152: RET
// export function WantPlant ( unit ) ; var task ; begin
45153: LD_INT 0
45155: PPUSH
45156: PPUSH
// result := false ;
45157: LD_ADDR_VAR 0 2
45161: PUSH
45162: LD_INT 0
45164: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45165: LD_ADDR_VAR 0 3
45169: PUSH
45170: LD_VAR 0 1
45174: PPUSH
45175: CALL_OW 437
45179: ST_TO_ADDR
// if task then
45180: LD_VAR 0 3
45184: IFFALSE 45212
// if task [ 1 ] [ 1 ] = p then
45186: LD_VAR 0 3
45190: PUSH
45191: LD_INT 1
45193: ARRAY
45194: PUSH
45195: LD_INT 1
45197: ARRAY
45198: PUSH
45199: LD_STRING p
45201: EQUAL
45202: IFFALSE 45212
// result := true ;
45204: LD_ADDR_VAR 0 2
45208: PUSH
45209: LD_INT 1
45211: ST_TO_ADDR
// end ;
45212: LD_VAR 0 2
45216: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45217: LD_INT 0
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
// if pos < 1 then
45223: LD_VAR 0 2
45227: PUSH
45228: LD_INT 1
45230: LESS
45231: IFFALSE 45235
// exit ;
45233: GO 45538
// if pos = 1 then
45235: LD_VAR 0 2
45239: PUSH
45240: LD_INT 1
45242: EQUAL
45243: IFFALSE 45276
// result := Replace ( arr , pos [ 1 ] , value ) else
45245: LD_ADDR_VAR 0 4
45249: PUSH
45250: LD_VAR 0 1
45254: PPUSH
45255: LD_VAR 0 2
45259: PUSH
45260: LD_INT 1
45262: ARRAY
45263: PPUSH
45264: LD_VAR 0 3
45268: PPUSH
45269: CALL_OW 1
45273: ST_TO_ADDR
45274: GO 45538
// begin tmp := arr ;
45276: LD_ADDR_VAR 0 6
45280: PUSH
45281: LD_VAR 0 1
45285: ST_TO_ADDR
// s_arr := [ tmp ] ;
45286: LD_ADDR_VAR 0 7
45290: PUSH
45291: LD_VAR 0 6
45295: PUSH
45296: EMPTY
45297: LIST
45298: ST_TO_ADDR
// for i = 1 to pos - 1 do
45299: LD_ADDR_VAR 0 5
45303: PUSH
45304: DOUBLE
45305: LD_INT 1
45307: DEC
45308: ST_TO_ADDR
45309: LD_VAR 0 2
45313: PUSH
45314: LD_INT 1
45316: MINUS
45317: PUSH
45318: FOR_TO
45319: IFFALSE 45364
// begin tmp := tmp [ pos [ i ] ] ;
45321: LD_ADDR_VAR 0 6
45325: PUSH
45326: LD_VAR 0 6
45330: PUSH
45331: LD_VAR 0 2
45335: PUSH
45336: LD_VAR 0 5
45340: ARRAY
45341: ARRAY
45342: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45343: LD_ADDR_VAR 0 7
45347: PUSH
45348: LD_VAR 0 7
45352: PUSH
45353: LD_VAR 0 6
45357: PUSH
45358: EMPTY
45359: LIST
45360: ADD
45361: ST_TO_ADDR
// end ;
45362: GO 45318
45364: POP
45365: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45366: LD_ADDR_VAR 0 6
45370: PUSH
45371: LD_VAR 0 6
45375: PPUSH
45376: LD_VAR 0 2
45380: PUSH
45381: LD_VAR 0 2
45385: ARRAY
45386: PPUSH
45387: LD_VAR 0 3
45391: PPUSH
45392: CALL_OW 1
45396: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45397: LD_ADDR_VAR 0 7
45401: PUSH
45402: LD_VAR 0 7
45406: PPUSH
45407: LD_VAR 0 7
45411: PPUSH
45412: LD_VAR 0 6
45416: PPUSH
45417: CALL_OW 1
45421: ST_TO_ADDR
// for i = s_arr downto 2 do
45422: LD_ADDR_VAR 0 5
45426: PUSH
45427: DOUBLE
45428: LD_VAR 0 7
45432: INC
45433: ST_TO_ADDR
45434: LD_INT 2
45436: PUSH
45437: FOR_DOWNTO
45438: IFFALSE 45522
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45440: LD_ADDR_VAR 0 6
45444: PUSH
45445: LD_VAR 0 7
45449: PUSH
45450: LD_VAR 0 5
45454: PUSH
45455: LD_INT 1
45457: MINUS
45458: ARRAY
45459: PPUSH
45460: LD_VAR 0 2
45464: PUSH
45465: LD_VAR 0 5
45469: PUSH
45470: LD_INT 1
45472: MINUS
45473: ARRAY
45474: PPUSH
45475: LD_VAR 0 7
45479: PUSH
45480: LD_VAR 0 5
45484: ARRAY
45485: PPUSH
45486: CALL_OW 1
45490: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45491: LD_ADDR_VAR 0 7
45495: PUSH
45496: LD_VAR 0 7
45500: PPUSH
45501: LD_VAR 0 5
45505: PUSH
45506: LD_INT 1
45508: MINUS
45509: PPUSH
45510: LD_VAR 0 6
45514: PPUSH
45515: CALL_OW 1
45519: ST_TO_ADDR
// end ;
45520: GO 45437
45522: POP
45523: POP
// result := s_arr [ 1 ] ;
45524: LD_ADDR_VAR 0 4
45528: PUSH
45529: LD_VAR 0 7
45533: PUSH
45534: LD_INT 1
45536: ARRAY
45537: ST_TO_ADDR
// end ; end ;
45538: LD_VAR 0 4
45542: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45543: LD_INT 0
45545: PPUSH
45546: PPUSH
// if not list then
45547: LD_VAR 0 1
45551: NOT
45552: IFFALSE 45556
// exit ;
45554: GO 45647
// i := list [ pos1 ] ;
45556: LD_ADDR_VAR 0 5
45560: PUSH
45561: LD_VAR 0 1
45565: PUSH
45566: LD_VAR 0 2
45570: ARRAY
45571: ST_TO_ADDR
// if not i then
45572: LD_VAR 0 5
45576: NOT
45577: IFFALSE 45581
// exit ;
45579: GO 45647
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45581: LD_ADDR_VAR 0 1
45585: PUSH
45586: LD_VAR 0 1
45590: PPUSH
45591: LD_VAR 0 2
45595: PPUSH
45596: LD_VAR 0 1
45600: PUSH
45601: LD_VAR 0 3
45605: ARRAY
45606: PPUSH
45607: CALL_OW 1
45611: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45612: LD_ADDR_VAR 0 1
45616: PUSH
45617: LD_VAR 0 1
45621: PPUSH
45622: LD_VAR 0 3
45626: PPUSH
45627: LD_VAR 0 5
45631: PPUSH
45632: CALL_OW 1
45636: ST_TO_ADDR
// result := list ;
45637: LD_ADDR_VAR 0 4
45641: PUSH
45642: LD_VAR 0 1
45646: ST_TO_ADDR
// end ;
45647: LD_VAR 0 4
45651: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45652: LD_INT 0
45654: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45655: LD_ADDR_VAR 0 5
45659: PUSH
45660: LD_VAR 0 1
45664: PPUSH
45665: CALL_OW 250
45669: PPUSH
45670: LD_VAR 0 1
45674: PPUSH
45675: CALL_OW 251
45679: PPUSH
45680: LD_VAR 0 2
45684: PPUSH
45685: LD_VAR 0 3
45689: PPUSH
45690: LD_VAR 0 4
45694: PPUSH
45695: CALL 45705 0 5
45699: ST_TO_ADDR
// end ;
45700: LD_VAR 0 5
45704: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45705: LD_INT 0
45707: PPUSH
45708: PPUSH
45709: PPUSH
45710: PPUSH
// if not list then
45711: LD_VAR 0 3
45715: NOT
45716: IFFALSE 45720
// exit ;
45718: GO 46108
// result := [ ] ;
45720: LD_ADDR_VAR 0 6
45724: PUSH
45725: EMPTY
45726: ST_TO_ADDR
// for i in list do
45727: LD_ADDR_VAR 0 7
45731: PUSH
45732: LD_VAR 0 3
45736: PUSH
45737: FOR_IN
45738: IFFALSE 45940
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45740: LD_ADDR_VAR 0 9
45744: PUSH
45745: LD_VAR 0 7
45749: PPUSH
45750: LD_VAR 0 1
45754: PPUSH
45755: LD_VAR 0 2
45759: PPUSH
45760: CALL_OW 297
45764: ST_TO_ADDR
// if not result then
45765: LD_VAR 0 6
45769: NOT
45770: IFFALSE 45796
// result := [ [ i , tmp ] ] else
45772: LD_ADDR_VAR 0 6
45776: PUSH
45777: LD_VAR 0 7
45781: PUSH
45782: LD_VAR 0 9
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: ST_TO_ADDR
45794: GO 45938
// begin if result [ result ] [ 2 ] < tmp then
45796: LD_VAR 0 6
45800: PUSH
45801: LD_VAR 0 6
45805: ARRAY
45806: PUSH
45807: LD_INT 2
45809: ARRAY
45810: PUSH
45811: LD_VAR 0 9
45815: LESS
45816: IFFALSE 45858
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45818: LD_ADDR_VAR 0 6
45822: PUSH
45823: LD_VAR 0 6
45827: PPUSH
45828: LD_VAR 0 6
45832: PUSH
45833: LD_INT 1
45835: PLUS
45836: PPUSH
45837: LD_VAR 0 7
45841: PUSH
45842: LD_VAR 0 9
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PPUSH
45851: CALL_OW 2
45855: ST_TO_ADDR
45856: GO 45938
// for j = 1 to result do
45858: LD_ADDR_VAR 0 8
45862: PUSH
45863: DOUBLE
45864: LD_INT 1
45866: DEC
45867: ST_TO_ADDR
45868: LD_VAR 0 6
45872: PUSH
45873: FOR_TO
45874: IFFALSE 45936
// begin if tmp < result [ j ] [ 2 ] then
45876: LD_VAR 0 9
45880: PUSH
45881: LD_VAR 0 6
45885: PUSH
45886: LD_VAR 0 8
45890: ARRAY
45891: PUSH
45892: LD_INT 2
45894: ARRAY
45895: LESS
45896: IFFALSE 45934
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45898: LD_ADDR_VAR 0 6
45902: PUSH
45903: LD_VAR 0 6
45907: PPUSH
45908: LD_VAR 0 8
45912: PPUSH
45913: LD_VAR 0 7
45917: PUSH
45918: LD_VAR 0 9
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PPUSH
45927: CALL_OW 2
45931: ST_TO_ADDR
// break ;
45932: GO 45936
// end ; end ;
45934: GO 45873
45936: POP
45937: POP
// end ; end ;
45938: GO 45737
45940: POP
45941: POP
// if result and not asc then
45942: LD_VAR 0 6
45946: PUSH
45947: LD_VAR 0 4
45951: NOT
45952: AND
45953: IFFALSE 46028
// begin tmp := result ;
45955: LD_ADDR_VAR 0 9
45959: PUSH
45960: LD_VAR 0 6
45964: ST_TO_ADDR
// for i = tmp downto 1 do
45965: LD_ADDR_VAR 0 7
45969: PUSH
45970: DOUBLE
45971: LD_VAR 0 9
45975: INC
45976: ST_TO_ADDR
45977: LD_INT 1
45979: PUSH
45980: FOR_DOWNTO
45981: IFFALSE 46026
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45983: LD_ADDR_VAR 0 6
45987: PUSH
45988: LD_VAR 0 6
45992: PPUSH
45993: LD_VAR 0 9
45997: PUSH
45998: LD_VAR 0 7
46002: MINUS
46003: PUSH
46004: LD_INT 1
46006: PLUS
46007: PPUSH
46008: LD_VAR 0 9
46012: PUSH
46013: LD_VAR 0 7
46017: ARRAY
46018: PPUSH
46019: CALL_OW 1
46023: ST_TO_ADDR
46024: GO 45980
46026: POP
46027: POP
// end ; tmp := [ ] ;
46028: LD_ADDR_VAR 0 9
46032: PUSH
46033: EMPTY
46034: ST_TO_ADDR
// if mode then
46035: LD_VAR 0 5
46039: IFFALSE 46108
// begin for i = 1 to result do
46041: LD_ADDR_VAR 0 7
46045: PUSH
46046: DOUBLE
46047: LD_INT 1
46049: DEC
46050: ST_TO_ADDR
46051: LD_VAR 0 6
46055: PUSH
46056: FOR_TO
46057: IFFALSE 46096
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46059: LD_ADDR_VAR 0 9
46063: PUSH
46064: LD_VAR 0 9
46068: PPUSH
46069: LD_VAR 0 7
46073: PPUSH
46074: LD_VAR 0 6
46078: PUSH
46079: LD_VAR 0 7
46083: ARRAY
46084: PUSH
46085: LD_INT 1
46087: ARRAY
46088: PPUSH
46089: CALL_OW 1
46093: ST_TO_ADDR
46094: GO 46056
46096: POP
46097: POP
// result := tmp ;
46098: LD_ADDR_VAR 0 6
46102: PUSH
46103: LD_VAR 0 9
46107: ST_TO_ADDR
// end ; end ;
46108: LD_VAR 0 6
46112: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46113: LD_INT 0
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46121: LD_ADDR_VAR 0 5
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: ST_TO_ADDR
// if not x or not y then
46143: LD_VAR 0 2
46147: NOT
46148: PUSH
46149: LD_VAR 0 3
46153: NOT
46154: OR
46155: IFFALSE 46159
// exit ;
46157: GO 47809
// if not range then
46159: LD_VAR 0 4
46163: NOT
46164: IFFALSE 46174
// range := 10 ;
46166: LD_ADDR_VAR 0 4
46170: PUSH
46171: LD_INT 10
46173: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46174: LD_ADDR_VAR 0 8
46178: PUSH
46179: LD_INT 81
46181: PUSH
46182: LD_VAR 0 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 92
46193: PUSH
46194: LD_VAR 0 2
46198: PUSH
46199: LD_VAR 0 3
46203: PUSH
46204: LD_VAR 0 4
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: LD_INT 21
46220: PUSH
46221: LD_INT 3
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: PPUSH
46237: CALL_OW 69
46241: ST_TO_ADDR
// if not tmp then
46242: LD_VAR 0 8
46246: NOT
46247: IFFALSE 46251
// exit ;
46249: GO 47809
// for i in tmp do
46251: LD_ADDR_VAR 0 6
46255: PUSH
46256: LD_VAR 0 8
46260: PUSH
46261: FOR_IN
46262: IFFALSE 47784
// begin points := [ 0 , 0 , 0 ] ;
46264: LD_ADDR_VAR 0 9
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// bpoints := 1 ;
46283: LD_ADDR_VAR 0 10
46287: PUSH
46288: LD_INT 1
46290: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46291: LD_VAR 0 6
46295: PPUSH
46296: CALL_OW 247
46300: PUSH
46301: LD_INT 1
46303: DOUBLE
46304: EQUAL
46305: IFTRUE 46309
46307: GO 46887
46309: POP
// begin if GetClass ( i ) = 1 then
46310: LD_VAR 0 6
46314: PPUSH
46315: CALL_OW 257
46319: PUSH
46320: LD_INT 1
46322: EQUAL
46323: IFFALSE 46344
// points := [ 10 , 5 , 3 ] ;
46325: LD_ADDR_VAR 0 9
46329: PUSH
46330: LD_INT 10
46332: PUSH
46333: LD_INT 5
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46344: LD_VAR 0 6
46348: PPUSH
46349: CALL_OW 257
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 3
46359: PUSH
46360: LD_INT 4
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: IN
46368: IFFALSE 46389
// points := [ 3 , 2 , 1 ] ;
46370: LD_ADDR_VAR 0 9
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46389: LD_VAR 0 6
46393: PPUSH
46394: CALL_OW 257
46398: PUSH
46399: LD_INT 5
46401: EQUAL
46402: IFFALSE 46423
// points := [ 130 , 5 , 2 ] ;
46404: LD_ADDR_VAR 0 9
46408: PUSH
46409: LD_INT 130
46411: PUSH
46412: LD_INT 5
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46423: LD_VAR 0 6
46427: PPUSH
46428: CALL_OW 257
46432: PUSH
46433: LD_INT 8
46435: EQUAL
46436: IFFALSE 46457
// points := [ 35 , 35 , 30 ] ;
46438: LD_ADDR_VAR 0 9
46442: PUSH
46443: LD_INT 35
46445: PUSH
46446: LD_INT 35
46448: PUSH
46449: LD_INT 30
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46457: LD_VAR 0 6
46461: PPUSH
46462: CALL_OW 257
46466: PUSH
46467: LD_INT 9
46469: EQUAL
46470: IFFALSE 46491
// points := [ 20 , 55 , 40 ] ;
46472: LD_ADDR_VAR 0 9
46476: PUSH
46477: LD_INT 20
46479: PUSH
46480: LD_INT 55
46482: PUSH
46483: LD_INT 40
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46491: LD_VAR 0 6
46495: PPUSH
46496: CALL_OW 257
46500: PUSH
46501: LD_INT 12
46503: PUSH
46504: LD_INT 16
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: IN
46511: IFFALSE 46532
// points := [ 5 , 3 , 2 ] ;
46513: LD_ADDR_VAR 0 9
46517: PUSH
46518: LD_INT 5
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46532: LD_VAR 0 6
46536: PPUSH
46537: CALL_OW 257
46541: PUSH
46542: LD_INT 17
46544: EQUAL
46545: IFFALSE 46566
// points := [ 100 , 50 , 75 ] ;
46547: LD_ADDR_VAR 0 9
46551: PUSH
46552: LD_INT 100
46554: PUSH
46555: LD_INT 50
46557: PUSH
46558: LD_INT 75
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46566: LD_VAR 0 6
46570: PPUSH
46571: CALL_OW 257
46575: PUSH
46576: LD_INT 15
46578: EQUAL
46579: IFFALSE 46600
// points := [ 10 , 5 , 3 ] ;
46581: LD_ADDR_VAR 0 9
46585: PUSH
46586: LD_INT 10
46588: PUSH
46589: LD_INT 5
46591: PUSH
46592: LD_INT 3
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46600: LD_VAR 0 6
46604: PPUSH
46605: CALL_OW 257
46609: PUSH
46610: LD_INT 14
46612: EQUAL
46613: IFFALSE 46634
// points := [ 10 , 0 , 0 ] ;
46615: LD_ADDR_VAR 0 9
46619: PUSH
46620: LD_INT 10
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46634: LD_VAR 0 6
46638: PPUSH
46639: CALL_OW 257
46643: PUSH
46644: LD_INT 11
46646: EQUAL
46647: IFFALSE 46668
// points := [ 30 , 10 , 5 ] ;
46649: LD_ADDR_VAR 0 9
46653: PUSH
46654: LD_INT 30
46656: PUSH
46657: LD_INT 10
46659: PUSH
46660: LD_INT 5
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: LIST
46667: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46668: LD_VAR 0 1
46672: PPUSH
46673: LD_INT 5
46675: PPUSH
46676: CALL_OW 321
46680: PUSH
46681: LD_INT 2
46683: EQUAL
46684: IFFALSE 46701
// bpoints := bpoints * 1.8 ;
46686: LD_ADDR_VAR 0 10
46690: PUSH
46691: LD_VAR 0 10
46695: PUSH
46696: LD_REAL  1.80000000000000E+0000
46699: MUL
46700: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46701: LD_VAR 0 6
46705: PPUSH
46706: CALL_OW 257
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: LD_INT 4
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: IN
46729: PUSH
46730: LD_VAR 0 1
46734: PPUSH
46735: LD_INT 51
46737: PPUSH
46738: CALL_OW 321
46742: PUSH
46743: LD_INT 2
46745: EQUAL
46746: AND
46747: IFFALSE 46764
// bpoints := bpoints * 1.2 ;
46749: LD_ADDR_VAR 0 10
46753: PUSH
46754: LD_VAR 0 10
46758: PUSH
46759: LD_REAL  1.20000000000000E+0000
46762: MUL
46763: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46764: LD_VAR 0 6
46768: PPUSH
46769: CALL_OW 257
46773: PUSH
46774: LD_INT 5
46776: PUSH
46777: LD_INT 7
46779: PUSH
46780: LD_INT 9
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: IN
46788: PUSH
46789: LD_VAR 0 1
46793: PPUSH
46794: LD_INT 52
46796: PPUSH
46797: CALL_OW 321
46801: PUSH
46802: LD_INT 2
46804: EQUAL
46805: AND
46806: IFFALSE 46823
// bpoints := bpoints * 1.5 ;
46808: LD_ADDR_VAR 0 10
46812: PUSH
46813: LD_VAR 0 10
46817: PUSH
46818: LD_REAL  1.50000000000000E+0000
46821: MUL
46822: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46823: LD_VAR 0 1
46827: PPUSH
46828: LD_INT 66
46830: PPUSH
46831: CALL_OW 321
46835: PUSH
46836: LD_INT 2
46838: EQUAL
46839: IFFALSE 46856
// bpoints := bpoints * 1.1 ;
46841: LD_ADDR_VAR 0 10
46845: PUSH
46846: LD_VAR 0 10
46850: PUSH
46851: LD_REAL  1.10000000000000E+0000
46854: MUL
46855: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46856: LD_ADDR_VAR 0 10
46860: PUSH
46861: LD_VAR 0 10
46865: PUSH
46866: LD_VAR 0 6
46870: PPUSH
46871: LD_INT 1
46873: PPUSH
46874: CALL_OW 259
46878: PUSH
46879: LD_REAL  1.15000000000000E+0000
46882: MUL
46883: MUL
46884: ST_TO_ADDR
// end ; unit_vehicle :
46885: GO 47713
46887: LD_INT 2
46889: DOUBLE
46890: EQUAL
46891: IFTRUE 46895
46893: GO 47701
46895: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46896: LD_VAR 0 6
46900: PPUSH
46901: CALL_OW 264
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 42
46911: PUSH
46912: LD_INT 24
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: IN
46920: IFFALSE 46941
// points := [ 25 , 5 , 3 ] ;
46922: LD_ADDR_VAR 0 9
46926: PUSH
46927: LD_INT 25
46929: PUSH
46930: LD_INT 5
46932: PUSH
46933: LD_INT 3
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46941: LD_VAR 0 6
46945: PPUSH
46946: CALL_OW 264
46950: PUSH
46951: LD_INT 4
46953: PUSH
46954: LD_INT 43
46956: PUSH
46957: LD_INT 25
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: IN
46965: IFFALSE 46986
// points := [ 40 , 15 , 5 ] ;
46967: LD_ADDR_VAR 0 9
46971: PUSH
46972: LD_INT 40
46974: PUSH
46975: LD_INT 15
46977: PUSH
46978: LD_INT 5
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: LIST
46985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46986: LD_VAR 0 6
46990: PPUSH
46991: CALL_OW 264
46995: PUSH
46996: LD_INT 3
46998: PUSH
46999: LD_INT 23
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: IN
47006: IFFALSE 47027
// points := [ 7 , 25 , 8 ] ;
47008: LD_ADDR_VAR 0 9
47012: PUSH
47013: LD_INT 7
47015: PUSH
47016: LD_INT 25
47018: PUSH
47019: LD_INT 8
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47027: LD_VAR 0 6
47031: PPUSH
47032: CALL_OW 264
47036: PUSH
47037: LD_INT 5
47039: PUSH
47040: LD_INT 27
47042: PUSH
47043: LD_INT 44
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: IN
47051: IFFALSE 47072
// points := [ 14 , 50 , 16 ] ;
47053: LD_ADDR_VAR 0 9
47057: PUSH
47058: LD_INT 14
47060: PUSH
47061: LD_INT 50
47063: PUSH
47064: LD_INT 16
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47072: LD_VAR 0 6
47076: PPUSH
47077: CALL_OW 264
47081: PUSH
47082: LD_INT 6
47084: PUSH
47085: LD_INT 46
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: IN
47092: IFFALSE 47113
// points := [ 32 , 120 , 70 ] ;
47094: LD_ADDR_VAR 0 9
47098: PUSH
47099: LD_INT 32
47101: PUSH
47102: LD_INT 120
47104: PUSH
47105: LD_INT 70
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47113: LD_VAR 0 6
47117: PPUSH
47118: CALL_OW 264
47122: PUSH
47123: LD_INT 7
47125: PUSH
47126: LD_INT 28
47128: PUSH
47129: LD_INT 45
47131: PUSH
47132: LD_INT 92
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: IN
47141: IFFALSE 47162
// points := [ 35 , 20 , 45 ] ;
47143: LD_ADDR_VAR 0 9
47147: PUSH
47148: LD_INT 35
47150: PUSH
47151: LD_INT 20
47153: PUSH
47154: LD_INT 45
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47162: LD_VAR 0 6
47166: PPUSH
47167: CALL_OW 264
47171: PUSH
47172: LD_INT 47
47174: PUSH
47175: EMPTY
47176: LIST
47177: IN
47178: IFFALSE 47199
// points := [ 67 , 45 , 75 ] ;
47180: LD_ADDR_VAR 0 9
47184: PUSH
47185: LD_INT 67
47187: PUSH
47188: LD_INT 45
47190: PUSH
47191: LD_INT 75
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47199: LD_VAR 0 6
47203: PPUSH
47204: CALL_OW 264
47208: PUSH
47209: LD_INT 26
47211: PUSH
47212: EMPTY
47213: LIST
47214: IN
47215: IFFALSE 47236
// points := [ 120 , 30 , 80 ] ;
47217: LD_ADDR_VAR 0 9
47221: PUSH
47222: LD_INT 120
47224: PUSH
47225: LD_INT 30
47227: PUSH
47228: LD_INT 80
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47236: LD_VAR 0 6
47240: PPUSH
47241: CALL_OW 264
47245: PUSH
47246: LD_INT 22
47248: PUSH
47249: EMPTY
47250: LIST
47251: IN
47252: IFFALSE 47273
// points := [ 40 , 1 , 1 ] ;
47254: LD_ADDR_VAR 0 9
47258: PUSH
47259: LD_INT 40
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47273: LD_VAR 0 6
47277: PPUSH
47278: CALL_OW 264
47282: PUSH
47283: LD_INT 29
47285: PUSH
47286: EMPTY
47287: LIST
47288: IN
47289: IFFALSE 47310
// points := [ 70 , 200 , 400 ] ;
47291: LD_ADDR_VAR 0 9
47295: PUSH
47296: LD_INT 70
47298: PUSH
47299: LD_INT 200
47301: PUSH
47302: LD_INT 400
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47310: LD_VAR 0 6
47314: PPUSH
47315: CALL_OW 264
47319: PUSH
47320: LD_INT 14
47322: PUSH
47323: LD_INT 53
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: IN
47330: IFFALSE 47351
// points := [ 40 , 10 , 20 ] ;
47332: LD_ADDR_VAR 0 9
47336: PUSH
47337: LD_INT 40
47339: PUSH
47340: LD_INT 10
47342: PUSH
47343: LD_INT 20
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47351: LD_VAR 0 6
47355: PPUSH
47356: CALL_OW 264
47360: PUSH
47361: LD_INT 9
47363: PUSH
47364: EMPTY
47365: LIST
47366: IN
47367: IFFALSE 47388
// points := [ 5 , 70 , 20 ] ;
47369: LD_ADDR_VAR 0 9
47373: PUSH
47374: LD_INT 5
47376: PUSH
47377: LD_INT 70
47379: PUSH
47380: LD_INT 20
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: LIST
47387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47388: LD_VAR 0 6
47392: PPUSH
47393: CALL_OW 264
47397: PUSH
47398: LD_INT 10
47400: PUSH
47401: EMPTY
47402: LIST
47403: IN
47404: IFFALSE 47425
// points := [ 35 , 110 , 70 ] ;
47406: LD_ADDR_VAR 0 9
47410: PUSH
47411: LD_INT 35
47413: PUSH
47414: LD_INT 110
47416: PUSH
47417: LD_INT 70
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47425: LD_VAR 0 6
47429: PPUSH
47430: CALL_OW 265
47434: PUSH
47435: LD_INT 25
47437: EQUAL
47438: IFFALSE 47459
// points := [ 80 , 65 , 100 ] ;
47440: LD_ADDR_VAR 0 9
47444: PUSH
47445: LD_INT 80
47447: PUSH
47448: LD_INT 65
47450: PUSH
47451: LD_INT 100
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: LIST
47458: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47459: LD_VAR 0 6
47463: PPUSH
47464: CALL_OW 263
47468: PUSH
47469: LD_INT 1
47471: EQUAL
47472: IFFALSE 47507
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47474: LD_ADDR_VAR 0 10
47478: PUSH
47479: LD_VAR 0 10
47483: PUSH
47484: LD_VAR 0 6
47488: PPUSH
47489: CALL_OW 311
47493: PPUSH
47494: LD_INT 3
47496: PPUSH
47497: CALL_OW 259
47501: PUSH
47502: LD_INT 4
47504: MUL
47505: MUL
47506: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47507: LD_VAR 0 6
47511: PPUSH
47512: CALL_OW 263
47516: PUSH
47517: LD_INT 2
47519: EQUAL
47520: IFFALSE 47571
// begin j := IsControledBy ( i ) ;
47522: LD_ADDR_VAR 0 7
47526: PUSH
47527: LD_VAR 0 6
47531: PPUSH
47532: CALL_OW 312
47536: ST_TO_ADDR
// if j then
47537: LD_VAR 0 7
47541: IFFALSE 47571
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47543: LD_ADDR_VAR 0 10
47547: PUSH
47548: LD_VAR 0 10
47552: PUSH
47553: LD_VAR 0 7
47557: PPUSH
47558: LD_INT 3
47560: PPUSH
47561: CALL_OW 259
47565: PUSH
47566: LD_INT 3
47568: MUL
47569: MUL
47570: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47571: LD_VAR 0 6
47575: PPUSH
47576: CALL_OW 264
47580: PUSH
47581: LD_INT 5
47583: PUSH
47584: LD_INT 6
47586: PUSH
47587: LD_INT 46
47589: PUSH
47590: LD_INT 44
47592: PUSH
47593: LD_INT 47
47595: PUSH
47596: LD_INT 45
47598: PUSH
47599: LD_INT 28
47601: PUSH
47602: LD_INT 7
47604: PUSH
47605: LD_INT 27
47607: PUSH
47608: LD_INT 29
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: IN
47623: PUSH
47624: LD_VAR 0 1
47628: PPUSH
47629: LD_INT 52
47631: PPUSH
47632: CALL_OW 321
47636: PUSH
47637: LD_INT 2
47639: EQUAL
47640: AND
47641: IFFALSE 47658
// bpoints := bpoints * 1.2 ;
47643: LD_ADDR_VAR 0 10
47647: PUSH
47648: LD_VAR 0 10
47652: PUSH
47653: LD_REAL  1.20000000000000E+0000
47656: MUL
47657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47658: LD_VAR 0 6
47662: PPUSH
47663: CALL_OW 264
47667: PUSH
47668: LD_INT 6
47670: PUSH
47671: LD_INT 46
47673: PUSH
47674: LD_INT 47
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: IN
47682: IFFALSE 47699
// bpoints := bpoints * 1.2 ;
47684: LD_ADDR_VAR 0 10
47688: PUSH
47689: LD_VAR 0 10
47693: PUSH
47694: LD_REAL  1.20000000000000E+0000
47697: MUL
47698: ST_TO_ADDR
// end ; unit_building :
47699: GO 47713
47701: LD_INT 3
47703: DOUBLE
47704: EQUAL
47705: IFTRUE 47709
47707: GO 47712
47709: POP
// ; end ;
47710: GO 47713
47712: POP
// for j = 1 to 3 do
47713: LD_ADDR_VAR 0 7
47717: PUSH
47718: DOUBLE
47719: LD_INT 1
47721: DEC
47722: ST_TO_ADDR
47723: LD_INT 3
47725: PUSH
47726: FOR_TO
47727: IFFALSE 47780
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47729: LD_ADDR_VAR 0 5
47733: PUSH
47734: LD_VAR 0 5
47738: PPUSH
47739: LD_VAR 0 7
47743: PPUSH
47744: LD_VAR 0 5
47748: PUSH
47749: LD_VAR 0 7
47753: ARRAY
47754: PUSH
47755: LD_VAR 0 9
47759: PUSH
47760: LD_VAR 0 7
47764: ARRAY
47765: PUSH
47766: LD_VAR 0 10
47770: MUL
47771: PLUS
47772: PPUSH
47773: CALL_OW 1
47777: ST_TO_ADDR
47778: GO 47726
47780: POP
47781: POP
// end ;
47782: GO 46261
47784: POP
47785: POP
// result := Replace ( result , 4 , tmp ) ;
47786: LD_ADDR_VAR 0 5
47790: PUSH
47791: LD_VAR 0 5
47795: PPUSH
47796: LD_INT 4
47798: PPUSH
47799: LD_VAR 0 8
47803: PPUSH
47804: CALL_OW 1
47808: ST_TO_ADDR
// end ;
47809: LD_VAR 0 5
47813: RET
// export function DangerAtRange ( unit , range ) ; begin
47814: LD_INT 0
47816: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47817: LD_ADDR_VAR 0 3
47821: PUSH
47822: LD_VAR 0 1
47826: PPUSH
47827: CALL_OW 255
47831: PPUSH
47832: LD_VAR 0 1
47836: PPUSH
47837: CALL_OW 250
47841: PPUSH
47842: LD_VAR 0 1
47846: PPUSH
47847: CALL_OW 251
47851: PPUSH
47852: LD_VAR 0 2
47856: PPUSH
47857: CALL 46113 0 4
47861: ST_TO_ADDR
// end ;
47862: LD_VAR 0 3
47866: RET
// export function DangerInArea ( side , area ) ; begin
47867: LD_INT 0
47869: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47870: LD_ADDR_VAR 0 3
47874: PUSH
47875: LD_VAR 0 2
47879: PPUSH
47880: LD_INT 81
47882: PUSH
47883: LD_VAR 0 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PPUSH
47892: CALL_OW 70
47896: ST_TO_ADDR
// end ;
47897: LD_VAR 0 3
47901: RET
// export function IsExtension ( b ) ; begin
47902: LD_INT 0
47904: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47905: LD_ADDR_VAR 0 2
47909: PUSH
47910: LD_VAR 0 1
47914: PUSH
47915: LD_INT 23
47917: PUSH
47918: LD_INT 20
47920: PUSH
47921: LD_INT 22
47923: PUSH
47924: LD_INT 17
47926: PUSH
47927: LD_INT 24
47929: PUSH
47930: LD_INT 21
47932: PUSH
47933: LD_INT 19
47935: PUSH
47936: LD_INT 16
47938: PUSH
47939: LD_INT 25
47941: PUSH
47942: LD_INT 18
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: IN
47957: ST_TO_ADDR
// end ;
47958: LD_VAR 0 2
47962: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47963: LD_INT 0
47965: PPUSH
47966: PPUSH
47967: PPUSH
// result := [ ] ;
47968: LD_ADDR_VAR 0 4
47972: PUSH
47973: EMPTY
47974: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47975: LD_ADDR_VAR 0 5
47979: PUSH
47980: LD_VAR 0 2
47984: PPUSH
47985: LD_INT 21
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PPUSH
47995: CALL_OW 70
47999: ST_TO_ADDR
// if not tmp then
48000: LD_VAR 0 5
48004: NOT
48005: IFFALSE 48009
// exit ;
48007: GO 48073
// if checkLink then
48009: LD_VAR 0 3
48013: IFFALSE 48063
// begin for i in tmp do
48015: LD_ADDR_VAR 0 6
48019: PUSH
48020: LD_VAR 0 5
48024: PUSH
48025: FOR_IN
48026: IFFALSE 48061
// if GetBase ( i ) <> base then
48028: LD_VAR 0 6
48032: PPUSH
48033: CALL_OW 274
48037: PUSH
48038: LD_VAR 0 1
48042: NONEQUAL
48043: IFFALSE 48059
// ComLinkToBase ( base , i ) ;
48045: LD_VAR 0 1
48049: PPUSH
48050: LD_VAR 0 6
48054: PPUSH
48055: CALL_OW 169
48059: GO 48025
48061: POP
48062: POP
// end ; result := tmp ;
48063: LD_ADDR_VAR 0 4
48067: PUSH
48068: LD_VAR 0 5
48072: ST_TO_ADDR
// end ;
48073: LD_VAR 0 4
48077: RET
// export function ComComplete ( units , b ) ; var i ; begin
48078: LD_INT 0
48080: PPUSH
48081: PPUSH
// if not units then
48082: LD_VAR 0 1
48086: NOT
48087: IFFALSE 48091
// exit ;
48089: GO 48181
// for i in units do
48091: LD_ADDR_VAR 0 4
48095: PUSH
48096: LD_VAR 0 1
48100: PUSH
48101: FOR_IN
48102: IFFALSE 48179
// if BuildingStatus ( b ) = bs_build then
48104: LD_VAR 0 2
48108: PPUSH
48109: CALL_OW 461
48113: PUSH
48114: LD_INT 1
48116: EQUAL
48117: IFFALSE 48177
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48119: LD_VAR 0 4
48123: PPUSH
48124: LD_STRING h
48126: PUSH
48127: LD_VAR 0 2
48131: PPUSH
48132: CALL_OW 250
48136: PUSH
48137: LD_VAR 0 2
48141: PPUSH
48142: CALL_OW 251
48146: PUSH
48147: LD_VAR 0 2
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: PUSH
48170: EMPTY
48171: LIST
48172: PPUSH
48173: CALL_OW 446
48177: GO 48101
48179: POP
48180: POP
// end ;
48181: LD_VAR 0 3
48185: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48186: LD_INT 0
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48194: LD_VAR 0 1
48198: NOT
48199: PUSH
48200: LD_VAR 0 1
48204: PPUSH
48205: CALL_OW 263
48209: PUSH
48210: LD_INT 2
48212: NONEQUAL
48213: OR
48214: IFFALSE 48218
// exit ;
48216: GO 48534
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48218: LD_ADDR_VAR 0 6
48222: PUSH
48223: LD_INT 22
48225: PUSH
48226: LD_VAR 0 1
48230: PPUSH
48231: CALL_OW 255
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 30
48245: PUSH
48246: LD_INT 36
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 34
48255: PUSH
48256: LD_INT 31
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PPUSH
48272: CALL_OW 69
48276: ST_TO_ADDR
// if not tmp then
48277: LD_VAR 0 6
48281: NOT
48282: IFFALSE 48286
// exit ;
48284: GO 48534
// result := [ ] ;
48286: LD_ADDR_VAR 0 2
48290: PUSH
48291: EMPTY
48292: ST_TO_ADDR
// for i in tmp do
48293: LD_ADDR_VAR 0 3
48297: PUSH
48298: LD_VAR 0 6
48302: PUSH
48303: FOR_IN
48304: IFFALSE 48375
// begin t := UnitsInside ( i ) ;
48306: LD_ADDR_VAR 0 4
48310: PUSH
48311: LD_VAR 0 3
48315: PPUSH
48316: CALL_OW 313
48320: ST_TO_ADDR
// if t then
48321: LD_VAR 0 4
48325: IFFALSE 48373
// for j in t do
48327: LD_ADDR_VAR 0 7
48331: PUSH
48332: LD_VAR 0 4
48336: PUSH
48337: FOR_IN
48338: IFFALSE 48371
// result := Replace ( result , result + 1 , j ) ;
48340: LD_ADDR_VAR 0 2
48344: PUSH
48345: LD_VAR 0 2
48349: PPUSH
48350: LD_VAR 0 2
48354: PUSH
48355: LD_INT 1
48357: PLUS
48358: PPUSH
48359: LD_VAR 0 7
48363: PPUSH
48364: CALL_OW 1
48368: ST_TO_ADDR
48369: GO 48337
48371: POP
48372: POP
// end ;
48373: GO 48303
48375: POP
48376: POP
// if not result then
48377: LD_VAR 0 2
48381: NOT
48382: IFFALSE 48386
// exit ;
48384: GO 48534
// mech := result [ 1 ] ;
48386: LD_ADDR_VAR 0 5
48390: PUSH
48391: LD_VAR 0 2
48395: PUSH
48396: LD_INT 1
48398: ARRAY
48399: ST_TO_ADDR
// if result > 1 then
48400: LD_VAR 0 2
48404: PUSH
48405: LD_INT 1
48407: GREATER
48408: IFFALSE 48520
// begin for i = 2 to result do
48410: LD_ADDR_VAR 0 3
48414: PUSH
48415: DOUBLE
48416: LD_INT 2
48418: DEC
48419: ST_TO_ADDR
48420: LD_VAR 0 2
48424: PUSH
48425: FOR_TO
48426: IFFALSE 48518
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48428: LD_ADDR_VAR 0 4
48432: PUSH
48433: LD_VAR 0 2
48437: PUSH
48438: LD_VAR 0 3
48442: ARRAY
48443: PPUSH
48444: LD_INT 3
48446: PPUSH
48447: CALL_OW 259
48451: PUSH
48452: LD_VAR 0 2
48456: PUSH
48457: LD_VAR 0 3
48461: ARRAY
48462: PPUSH
48463: CALL_OW 432
48467: MINUS
48468: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48469: LD_VAR 0 4
48473: PUSH
48474: LD_VAR 0 5
48478: PPUSH
48479: LD_INT 3
48481: PPUSH
48482: CALL_OW 259
48486: PUSH
48487: LD_VAR 0 5
48491: PPUSH
48492: CALL_OW 432
48496: MINUS
48497: GREATEREQUAL
48498: IFFALSE 48516
// mech := result [ i ] ;
48500: LD_ADDR_VAR 0 5
48504: PUSH
48505: LD_VAR 0 2
48509: PUSH
48510: LD_VAR 0 3
48514: ARRAY
48515: ST_TO_ADDR
// end ;
48516: GO 48425
48518: POP
48519: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48520: LD_VAR 0 1
48524: PPUSH
48525: LD_VAR 0 5
48529: PPUSH
48530: CALL_OW 135
// end ;
48534: LD_VAR 0 2
48538: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48539: LD_INT 0
48541: PPUSH
48542: PPUSH
48543: PPUSH
48544: PPUSH
48545: PPUSH
48546: PPUSH
48547: PPUSH
48548: PPUSH
48549: PPUSH
48550: PPUSH
48551: PPUSH
48552: PPUSH
48553: PPUSH
// result := [ ] ;
48554: LD_ADDR_VAR 0 7
48558: PUSH
48559: EMPTY
48560: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48561: LD_VAR 0 1
48565: PPUSH
48566: CALL_OW 266
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: IN
48581: NOT
48582: IFFALSE 48586
// exit ;
48584: GO 50220
// if name then
48586: LD_VAR 0 3
48590: IFFALSE 48606
// SetBName ( base_dep , name ) ;
48592: LD_VAR 0 1
48596: PPUSH
48597: LD_VAR 0 3
48601: PPUSH
48602: CALL_OW 500
// base := GetBase ( base_dep ) ;
48606: LD_ADDR_VAR 0 15
48610: PUSH
48611: LD_VAR 0 1
48615: PPUSH
48616: CALL_OW 274
48620: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48621: LD_ADDR_VAR 0 16
48625: PUSH
48626: LD_VAR 0 1
48630: PPUSH
48631: CALL_OW 255
48635: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48636: LD_ADDR_VAR 0 17
48640: PUSH
48641: LD_VAR 0 1
48645: PPUSH
48646: CALL_OW 248
48650: ST_TO_ADDR
// if sources then
48651: LD_VAR 0 5
48655: IFFALSE 48702
// for i = 1 to 3 do
48657: LD_ADDR_VAR 0 8
48661: PUSH
48662: DOUBLE
48663: LD_INT 1
48665: DEC
48666: ST_TO_ADDR
48667: LD_INT 3
48669: PUSH
48670: FOR_TO
48671: IFFALSE 48700
// AddResourceType ( base , i , sources [ i ] ) ;
48673: LD_VAR 0 15
48677: PPUSH
48678: LD_VAR 0 8
48682: PPUSH
48683: LD_VAR 0 5
48687: PUSH
48688: LD_VAR 0 8
48692: ARRAY
48693: PPUSH
48694: CALL_OW 276
48698: GO 48670
48700: POP
48701: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48702: LD_ADDR_VAR 0 18
48706: PUSH
48707: LD_VAR 0 15
48711: PPUSH
48712: LD_VAR 0 2
48716: PPUSH
48717: LD_INT 1
48719: PPUSH
48720: CALL 47963 0 3
48724: ST_TO_ADDR
// InitHc ;
48725: CALL_OW 19
// InitUc ;
48729: CALL_OW 18
// uc_side := side ;
48733: LD_ADDR_OWVAR 20
48737: PUSH
48738: LD_VAR 0 16
48742: ST_TO_ADDR
// uc_nation := nation ;
48743: LD_ADDR_OWVAR 21
48747: PUSH
48748: LD_VAR 0 17
48752: ST_TO_ADDR
// if buildings then
48753: LD_VAR 0 18
48757: IFFALSE 50079
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48759: LD_ADDR_VAR 0 19
48763: PUSH
48764: LD_VAR 0 18
48768: PPUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 30
48774: PUSH
48775: LD_INT 29
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 30
48784: PUSH
48785: LD_INT 30
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: PPUSH
48797: CALL_OW 72
48801: ST_TO_ADDR
// if tmp then
48802: LD_VAR 0 19
48806: IFFALSE 48854
// for i in tmp do
48808: LD_ADDR_VAR 0 8
48812: PUSH
48813: LD_VAR 0 19
48817: PUSH
48818: FOR_IN
48819: IFFALSE 48852
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48821: LD_VAR 0 8
48825: PPUSH
48826: CALL_OW 250
48830: PPUSH
48831: LD_VAR 0 8
48835: PPUSH
48836: CALL_OW 251
48840: PPUSH
48841: LD_VAR 0 16
48845: PPUSH
48846: CALL_OW 441
48850: GO 48818
48852: POP
48853: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48854: LD_VAR 0 18
48858: PPUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 30
48864: PUSH
48865: LD_INT 32
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 30
48874: PUSH
48875: LD_INT 33
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: PPUSH
48887: CALL_OW 72
48891: IFFALSE 48979
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48893: LD_ADDR_VAR 0 8
48897: PUSH
48898: LD_VAR 0 18
48902: PPUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 30
48908: PUSH
48909: LD_INT 32
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 30
48918: PUSH
48919: LD_INT 33
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: PPUSH
48931: CALL_OW 72
48935: PUSH
48936: FOR_IN
48937: IFFALSE 48977
// begin if not GetBWeapon ( i ) then
48939: LD_VAR 0 8
48943: PPUSH
48944: CALL_OW 269
48948: NOT
48949: IFFALSE 48975
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48951: LD_VAR 0 8
48955: PPUSH
48956: LD_VAR 0 8
48960: PPUSH
48961: LD_VAR 0 2
48965: PPUSH
48966: CALL 50225 0 2
48970: PPUSH
48971: CALL_OW 431
// end ;
48975: GO 48936
48977: POP
48978: POP
// end ; for i = 1 to personel do
48979: LD_ADDR_VAR 0 8
48983: PUSH
48984: DOUBLE
48985: LD_INT 1
48987: DEC
48988: ST_TO_ADDR
48989: LD_VAR 0 6
48993: PUSH
48994: FOR_TO
48995: IFFALSE 50059
// begin if i > 4 then
48997: LD_VAR 0 8
49001: PUSH
49002: LD_INT 4
49004: GREATER
49005: IFFALSE 49009
// break ;
49007: GO 50059
// case i of 1 :
49009: LD_VAR 0 8
49013: PUSH
49014: LD_INT 1
49016: DOUBLE
49017: EQUAL
49018: IFTRUE 49022
49020: GO 49102
49022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49023: LD_ADDR_VAR 0 12
49027: PUSH
49028: LD_VAR 0 18
49032: PPUSH
49033: LD_INT 22
49035: PUSH
49036: LD_VAR 0 16
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 58
49047: PUSH
49048: EMPTY
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: LD_INT 30
49056: PUSH
49057: LD_INT 32
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 30
49066: PUSH
49067: LD_INT 4
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 30
49076: PUSH
49077: LD_INT 5
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: LIST
49094: PPUSH
49095: CALL_OW 72
49099: ST_TO_ADDR
49100: GO 49324
49102: LD_INT 2
49104: DOUBLE
49105: EQUAL
49106: IFTRUE 49110
49108: GO 49172
49110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49111: LD_ADDR_VAR 0 12
49115: PUSH
49116: LD_VAR 0 18
49120: PPUSH
49121: LD_INT 22
49123: PUSH
49124: LD_VAR 0 16
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 30
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 30
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PPUSH
49165: CALL_OW 72
49169: ST_TO_ADDR
49170: GO 49324
49172: LD_INT 3
49174: DOUBLE
49175: EQUAL
49176: IFTRUE 49180
49178: GO 49242
49180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49181: LD_ADDR_VAR 0 12
49185: PUSH
49186: LD_VAR 0 18
49190: PPUSH
49191: LD_INT 22
49193: PUSH
49194: LD_VAR 0 16
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 30
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 30
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PPUSH
49235: CALL_OW 72
49239: ST_TO_ADDR
49240: GO 49324
49242: LD_INT 4
49244: DOUBLE
49245: EQUAL
49246: IFTRUE 49250
49248: GO 49323
49250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49251: LD_ADDR_VAR 0 12
49255: PUSH
49256: LD_VAR 0 18
49260: PPUSH
49261: LD_INT 22
49263: PUSH
49264: LD_VAR 0 16
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 30
49278: PUSH
49279: LD_INT 6
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 30
49288: PUSH
49289: LD_INT 7
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 30
49298: PUSH
49299: LD_INT 8
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PPUSH
49316: CALL_OW 72
49320: ST_TO_ADDR
49321: GO 49324
49323: POP
// if i = 1 then
49324: LD_VAR 0 8
49328: PUSH
49329: LD_INT 1
49331: EQUAL
49332: IFFALSE 49443
// begin tmp := [ ] ;
49334: LD_ADDR_VAR 0 19
49338: PUSH
49339: EMPTY
49340: ST_TO_ADDR
// for j in f do
49341: LD_ADDR_VAR 0 9
49345: PUSH
49346: LD_VAR 0 12
49350: PUSH
49351: FOR_IN
49352: IFFALSE 49425
// if GetBType ( j ) = b_bunker then
49354: LD_VAR 0 9
49358: PPUSH
49359: CALL_OW 266
49363: PUSH
49364: LD_INT 32
49366: EQUAL
49367: IFFALSE 49394
// tmp := Insert ( tmp , 1 , j ) else
49369: LD_ADDR_VAR 0 19
49373: PUSH
49374: LD_VAR 0 19
49378: PPUSH
49379: LD_INT 1
49381: PPUSH
49382: LD_VAR 0 9
49386: PPUSH
49387: CALL_OW 2
49391: ST_TO_ADDR
49392: GO 49423
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49394: LD_ADDR_VAR 0 19
49398: PUSH
49399: LD_VAR 0 19
49403: PPUSH
49404: LD_VAR 0 19
49408: PUSH
49409: LD_INT 1
49411: PLUS
49412: PPUSH
49413: LD_VAR 0 9
49417: PPUSH
49418: CALL_OW 2
49422: ST_TO_ADDR
49423: GO 49351
49425: POP
49426: POP
// if tmp then
49427: LD_VAR 0 19
49431: IFFALSE 49443
// f := tmp ;
49433: LD_ADDR_VAR 0 12
49437: PUSH
49438: LD_VAR 0 19
49442: ST_TO_ADDR
// end ; x := personel [ i ] ;
49443: LD_ADDR_VAR 0 13
49447: PUSH
49448: LD_VAR 0 6
49452: PUSH
49453: LD_VAR 0 8
49457: ARRAY
49458: ST_TO_ADDR
// if x = - 1 then
49459: LD_VAR 0 13
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: EQUAL
49468: IFFALSE 49677
// begin for j in f do
49470: LD_ADDR_VAR 0 9
49474: PUSH
49475: LD_VAR 0 12
49479: PUSH
49480: FOR_IN
49481: IFFALSE 49673
// repeat InitHc ;
49483: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49487: LD_VAR 0 9
49491: PPUSH
49492: CALL_OW 266
49496: PUSH
49497: LD_INT 5
49499: EQUAL
49500: IFFALSE 49570
// begin if UnitsInside ( j ) < 3 then
49502: LD_VAR 0 9
49506: PPUSH
49507: CALL_OW 313
49511: PUSH
49512: LD_INT 3
49514: LESS
49515: IFFALSE 49551
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49517: LD_INT 0
49519: PPUSH
49520: LD_INT 5
49522: PUSH
49523: LD_INT 8
49525: PUSH
49526: LD_INT 9
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: PUSH
49534: LD_VAR 0 17
49538: ARRAY
49539: PPUSH
49540: LD_VAR 0 4
49544: PPUSH
49545: CALL_OW 380
49549: GO 49568
// PrepareHuman ( false , i , skill ) ;
49551: LD_INT 0
49553: PPUSH
49554: LD_VAR 0 8
49558: PPUSH
49559: LD_VAR 0 4
49563: PPUSH
49564: CALL_OW 380
// end else
49568: GO 49587
// PrepareHuman ( false , i , skill ) ;
49570: LD_INT 0
49572: PPUSH
49573: LD_VAR 0 8
49577: PPUSH
49578: LD_VAR 0 4
49582: PPUSH
49583: CALL_OW 380
// un := CreateHuman ;
49587: LD_ADDR_VAR 0 14
49591: PUSH
49592: CALL_OW 44
49596: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49597: LD_ADDR_VAR 0 7
49601: PUSH
49602: LD_VAR 0 7
49606: PPUSH
49607: LD_INT 1
49609: PPUSH
49610: LD_VAR 0 14
49614: PPUSH
49615: CALL_OW 2
49619: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49620: LD_VAR 0 14
49624: PPUSH
49625: LD_VAR 0 9
49629: PPUSH
49630: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49634: LD_VAR 0 9
49638: PPUSH
49639: CALL_OW 313
49643: PUSH
49644: LD_INT 6
49646: EQUAL
49647: PUSH
49648: LD_VAR 0 9
49652: PPUSH
49653: CALL_OW 266
49657: PUSH
49658: LD_INT 32
49660: PUSH
49661: LD_INT 31
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: IN
49668: OR
49669: IFFALSE 49483
49671: GO 49480
49673: POP
49674: POP
// end else
49675: GO 50057
// for j = 1 to x do
49677: LD_ADDR_VAR 0 9
49681: PUSH
49682: DOUBLE
49683: LD_INT 1
49685: DEC
49686: ST_TO_ADDR
49687: LD_VAR 0 13
49691: PUSH
49692: FOR_TO
49693: IFFALSE 50055
// begin InitHc ;
49695: CALL_OW 19
// if not f then
49699: LD_VAR 0 12
49703: NOT
49704: IFFALSE 49793
// begin PrepareHuman ( false , i , skill ) ;
49706: LD_INT 0
49708: PPUSH
49709: LD_VAR 0 8
49713: PPUSH
49714: LD_VAR 0 4
49718: PPUSH
49719: CALL_OW 380
// un := CreateHuman ;
49723: LD_ADDR_VAR 0 14
49727: PUSH
49728: CALL_OW 44
49732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49733: LD_ADDR_VAR 0 7
49737: PUSH
49738: LD_VAR 0 7
49742: PPUSH
49743: LD_INT 1
49745: PPUSH
49746: LD_VAR 0 14
49750: PPUSH
49751: CALL_OW 2
49755: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49756: LD_VAR 0 14
49760: PPUSH
49761: LD_VAR 0 1
49765: PPUSH
49766: CALL_OW 250
49770: PPUSH
49771: LD_VAR 0 1
49775: PPUSH
49776: CALL_OW 251
49780: PPUSH
49781: LD_INT 10
49783: PPUSH
49784: LD_INT 0
49786: PPUSH
49787: CALL_OW 50
// continue ;
49791: GO 49692
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49793: LD_VAR 0 12
49797: PUSH
49798: LD_INT 1
49800: ARRAY
49801: PPUSH
49802: CALL_OW 313
49806: PUSH
49807: LD_VAR 0 12
49811: PUSH
49812: LD_INT 1
49814: ARRAY
49815: PPUSH
49816: CALL_OW 266
49820: PUSH
49821: LD_INT 32
49823: PUSH
49824: LD_INT 31
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: IN
49831: AND
49832: PUSH
49833: LD_VAR 0 12
49837: PUSH
49838: LD_INT 1
49840: ARRAY
49841: PPUSH
49842: CALL_OW 313
49846: PUSH
49847: LD_INT 6
49849: EQUAL
49850: OR
49851: IFFALSE 49871
// f := Delete ( f , 1 ) ;
49853: LD_ADDR_VAR 0 12
49857: PUSH
49858: LD_VAR 0 12
49862: PPUSH
49863: LD_INT 1
49865: PPUSH
49866: CALL_OW 3
49870: ST_TO_ADDR
// if not f then
49871: LD_VAR 0 12
49875: NOT
49876: IFFALSE 49894
// begin x := x + 2 ;
49878: LD_ADDR_VAR 0 13
49882: PUSH
49883: LD_VAR 0 13
49887: PUSH
49888: LD_INT 2
49890: PLUS
49891: ST_TO_ADDR
// continue ;
49892: GO 49692
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49894: LD_VAR 0 12
49898: PUSH
49899: LD_INT 1
49901: ARRAY
49902: PPUSH
49903: CALL_OW 266
49907: PUSH
49908: LD_INT 5
49910: EQUAL
49911: IFFALSE 49985
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49913: LD_VAR 0 12
49917: PUSH
49918: LD_INT 1
49920: ARRAY
49921: PPUSH
49922: CALL_OW 313
49926: PUSH
49927: LD_INT 3
49929: LESS
49930: IFFALSE 49966
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49932: LD_INT 0
49934: PPUSH
49935: LD_INT 5
49937: PUSH
49938: LD_INT 8
49940: PUSH
49941: LD_INT 9
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: PUSH
49949: LD_VAR 0 17
49953: ARRAY
49954: PPUSH
49955: LD_VAR 0 4
49959: PPUSH
49960: CALL_OW 380
49964: GO 49983
// PrepareHuman ( false , i , skill ) ;
49966: LD_INT 0
49968: PPUSH
49969: LD_VAR 0 8
49973: PPUSH
49974: LD_VAR 0 4
49978: PPUSH
49979: CALL_OW 380
// end else
49983: GO 50002
// PrepareHuman ( false , i , skill ) ;
49985: LD_INT 0
49987: PPUSH
49988: LD_VAR 0 8
49992: PPUSH
49993: LD_VAR 0 4
49997: PPUSH
49998: CALL_OW 380
// un := CreateHuman ;
50002: LD_ADDR_VAR 0 14
50006: PUSH
50007: CALL_OW 44
50011: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50012: LD_ADDR_VAR 0 7
50016: PUSH
50017: LD_VAR 0 7
50021: PPUSH
50022: LD_INT 1
50024: PPUSH
50025: LD_VAR 0 14
50029: PPUSH
50030: CALL_OW 2
50034: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50035: LD_VAR 0 14
50039: PPUSH
50040: LD_VAR 0 12
50044: PUSH
50045: LD_INT 1
50047: ARRAY
50048: PPUSH
50049: CALL_OW 52
// end ;
50053: GO 49692
50055: POP
50056: POP
// end ;
50057: GO 48994
50059: POP
50060: POP
// result := result ^ buildings ;
50061: LD_ADDR_VAR 0 7
50065: PUSH
50066: LD_VAR 0 7
50070: PUSH
50071: LD_VAR 0 18
50075: ADD
50076: ST_TO_ADDR
// end else
50077: GO 50220
// begin for i = 1 to personel do
50079: LD_ADDR_VAR 0 8
50083: PUSH
50084: DOUBLE
50085: LD_INT 1
50087: DEC
50088: ST_TO_ADDR
50089: LD_VAR 0 6
50093: PUSH
50094: FOR_TO
50095: IFFALSE 50218
// begin if i > 4 then
50097: LD_VAR 0 8
50101: PUSH
50102: LD_INT 4
50104: GREATER
50105: IFFALSE 50109
// break ;
50107: GO 50218
// x := personel [ i ] ;
50109: LD_ADDR_VAR 0 13
50113: PUSH
50114: LD_VAR 0 6
50118: PUSH
50119: LD_VAR 0 8
50123: ARRAY
50124: ST_TO_ADDR
// if x = - 1 then
50125: LD_VAR 0 13
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: EQUAL
50134: IFFALSE 50138
// continue ;
50136: GO 50094
// PrepareHuman ( false , i , skill ) ;
50138: LD_INT 0
50140: PPUSH
50141: LD_VAR 0 8
50145: PPUSH
50146: LD_VAR 0 4
50150: PPUSH
50151: CALL_OW 380
// un := CreateHuman ;
50155: LD_ADDR_VAR 0 14
50159: PUSH
50160: CALL_OW 44
50164: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50165: LD_VAR 0 14
50169: PPUSH
50170: LD_VAR 0 1
50174: PPUSH
50175: CALL_OW 250
50179: PPUSH
50180: LD_VAR 0 1
50184: PPUSH
50185: CALL_OW 251
50189: PPUSH
50190: LD_INT 10
50192: PPUSH
50193: LD_INT 0
50195: PPUSH
50196: CALL_OW 50
// result := result ^ un ;
50200: LD_ADDR_VAR 0 7
50204: PUSH
50205: LD_VAR 0 7
50209: PUSH
50210: LD_VAR 0 14
50214: ADD
50215: ST_TO_ADDR
// end ;
50216: GO 50094
50218: POP
50219: POP
// end ; end ;
50220: LD_VAR 0 7
50224: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50225: LD_INT 0
50227: PPUSH
50228: PPUSH
50229: PPUSH
50230: PPUSH
50231: PPUSH
50232: PPUSH
50233: PPUSH
50234: PPUSH
50235: PPUSH
50236: PPUSH
50237: PPUSH
50238: PPUSH
50239: PPUSH
50240: PPUSH
50241: PPUSH
50242: PPUSH
// result := false ;
50243: LD_ADDR_VAR 0 3
50247: PUSH
50248: LD_INT 0
50250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50251: LD_VAR 0 1
50255: NOT
50256: PUSH
50257: LD_VAR 0 1
50261: PPUSH
50262: CALL_OW 266
50266: PUSH
50267: LD_INT 32
50269: PUSH
50270: LD_INT 33
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: IN
50277: NOT
50278: OR
50279: IFFALSE 50283
// exit ;
50281: GO 51392
// nat := GetNation ( tower ) ;
50283: LD_ADDR_VAR 0 12
50287: PUSH
50288: LD_VAR 0 1
50292: PPUSH
50293: CALL_OW 248
50297: ST_TO_ADDR
// side := GetSide ( tower ) ;
50298: LD_ADDR_VAR 0 16
50302: PUSH
50303: LD_VAR 0 1
50307: PPUSH
50308: CALL_OW 255
50312: ST_TO_ADDR
// x := GetX ( tower ) ;
50313: LD_ADDR_VAR 0 10
50317: PUSH
50318: LD_VAR 0 1
50322: PPUSH
50323: CALL_OW 250
50327: ST_TO_ADDR
// y := GetY ( tower ) ;
50328: LD_ADDR_VAR 0 11
50332: PUSH
50333: LD_VAR 0 1
50337: PPUSH
50338: CALL_OW 251
50342: ST_TO_ADDR
// if not x or not y then
50343: LD_VAR 0 10
50347: NOT
50348: PUSH
50349: LD_VAR 0 11
50353: NOT
50354: OR
50355: IFFALSE 50359
// exit ;
50357: GO 51392
// weapon := 0 ;
50359: LD_ADDR_VAR 0 18
50363: PUSH
50364: LD_INT 0
50366: ST_TO_ADDR
// fac_list := [ ] ;
50367: LD_ADDR_VAR 0 17
50371: PUSH
50372: EMPTY
50373: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50374: LD_ADDR_VAR 0 6
50378: PUSH
50379: LD_VAR 0 1
50383: PPUSH
50384: CALL_OW 274
50388: PPUSH
50389: LD_VAR 0 2
50393: PPUSH
50394: LD_INT 0
50396: PPUSH
50397: CALL 47963 0 3
50401: PPUSH
50402: LD_INT 30
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PPUSH
50412: CALL_OW 72
50416: ST_TO_ADDR
// if not factories then
50417: LD_VAR 0 6
50421: NOT
50422: IFFALSE 50426
// exit ;
50424: GO 51392
// for i in factories do
50426: LD_ADDR_VAR 0 8
50430: PUSH
50431: LD_VAR 0 6
50435: PUSH
50436: FOR_IN
50437: IFFALSE 50462
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50439: LD_ADDR_VAR 0 17
50443: PUSH
50444: LD_VAR 0 17
50448: PUSH
50449: LD_VAR 0 8
50453: PPUSH
50454: CALL_OW 478
50458: UNION
50459: ST_TO_ADDR
50460: GO 50436
50462: POP
50463: POP
// if not fac_list then
50464: LD_VAR 0 17
50468: NOT
50469: IFFALSE 50473
// exit ;
50471: GO 51392
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50473: LD_ADDR_VAR 0 5
50477: PUSH
50478: LD_INT 4
50480: PUSH
50481: LD_INT 5
50483: PUSH
50484: LD_INT 9
50486: PUSH
50487: LD_INT 10
50489: PUSH
50490: LD_INT 6
50492: PUSH
50493: LD_INT 7
50495: PUSH
50496: LD_INT 11
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 27
50510: PUSH
50511: LD_INT 28
50513: PUSH
50514: LD_INT 26
50516: PUSH
50517: LD_INT 30
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 43
50528: PUSH
50529: LD_INT 44
50531: PUSH
50532: LD_INT 46
50534: PUSH
50535: LD_INT 45
50537: PUSH
50538: LD_INT 47
50540: PUSH
50541: LD_INT 49
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: PUSH
50557: LD_VAR 0 12
50561: ARRAY
50562: ST_TO_ADDR
// list := list isect fac_list ;
50563: LD_ADDR_VAR 0 5
50567: PUSH
50568: LD_VAR 0 5
50572: PUSH
50573: LD_VAR 0 17
50577: ISECT
50578: ST_TO_ADDR
// if not list then
50579: LD_VAR 0 5
50583: NOT
50584: IFFALSE 50588
// exit ;
50586: GO 51392
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50588: LD_VAR 0 12
50592: PUSH
50593: LD_INT 3
50595: EQUAL
50596: PUSH
50597: LD_INT 49
50599: PUSH
50600: LD_VAR 0 5
50604: IN
50605: AND
50606: PUSH
50607: LD_INT 31
50609: PPUSH
50610: LD_VAR 0 16
50614: PPUSH
50615: CALL_OW 321
50619: PUSH
50620: LD_INT 2
50622: EQUAL
50623: AND
50624: IFFALSE 50684
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50626: LD_INT 22
50628: PUSH
50629: LD_VAR 0 16
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 35
50640: PUSH
50641: LD_INT 49
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 91
50650: PUSH
50651: LD_VAR 0 1
50655: PUSH
50656: LD_INT 10
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: PPUSH
50669: CALL_OW 69
50673: NOT
50674: IFFALSE 50684
// weapon := ru_time_lapser ;
50676: LD_ADDR_VAR 0 18
50680: PUSH
50681: LD_INT 49
50683: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50684: LD_VAR 0 12
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: IN
50699: PUSH
50700: LD_INT 11
50702: PUSH
50703: LD_VAR 0 5
50707: IN
50708: PUSH
50709: LD_INT 30
50711: PUSH
50712: LD_VAR 0 5
50716: IN
50717: OR
50718: AND
50719: PUSH
50720: LD_INT 6
50722: PPUSH
50723: LD_VAR 0 16
50727: PPUSH
50728: CALL_OW 321
50732: PUSH
50733: LD_INT 2
50735: EQUAL
50736: AND
50737: IFFALSE 50902
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50739: LD_INT 22
50741: PUSH
50742: LD_VAR 0 16
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 35
50756: PUSH
50757: LD_INT 11
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 35
50766: PUSH
50767: LD_INT 30
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 91
50781: PUSH
50782: LD_VAR 0 1
50786: PUSH
50787: LD_INT 18
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: PPUSH
50800: CALL_OW 69
50804: NOT
50805: PUSH
50806: LD_INT 22
50808: PUSH
50809: LD_VAR 0 16
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 30
50823: PUSH
50824: LD_INT 32
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 30
50833: PUSH
50834: LD_INT 33
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 91
50848: PUSH
50849: LD_VAR 0 1
50853: PUSH
50854: LD_INT 12
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: PUSH
50867: EMPTY
50868: LIST
50869: PPUSH
50870: CALL_OW 69
50874: PUSH
50875: LD_INT 2
50877: GREATER
50878: AND
50879: IFFALSE 50902
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50881: LD_ADDR_VAR 0 18
50885: PUSH
50886: LD_INT 11
50888: PUSH
50889: LD_INT 30
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_VAR 0 12
50900: ARRAY
50901: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50902: LD_VAR 0 18
50906: NOT
50907: PUSH
50908: LD_INT 40
50910: PPUSH
50911: LD_VAR 0 16
50915: PPUSH
50916: CALL_OW 321
50920: PUSH
50921: LD_INT 2
50923: EQUAL
50924: AND
50925: PUSH
50926: LD_INT 7
50928: PUSH
50929: LD_VAR 0 5
50933: IN
50934: PUSH
50935: LD_INT 28
50937: PUSH
50938: LD_VAR 0 5
50942: IN
50943: OR
50944: PUSH
50945: LD_INT 45
50947: PUSH
50948: LD_VAR 0 5
50952: IN
50953: OR
50954: AND
50955: IFFALSE 51209
// begin hex := GetHexInfo ( x , y ) ;
50957: LD_ADDR_VAR 0 4
50961: PUSH
50962: LD_VAR 0 10
50966: PPUSH
50967: LD_VAR 0 11
50971: PPUSH
50972: CALL_OW 546
50976: ST_TO_ADDR
// if hex [ 1 ] then
50977: LD_VAR 0 4
50981: PUSH
50982: LD_INT 1
50984: ARRAY
50985: IFFALSE 50989
// exit ;
50987: GO 51392
// height := hex [ 2 ] ;
50989: LD_ADDR_VAR 0 15
50993: PUSH
50994: LD_VAR 0 4
50998: PUSH
50999: LD_INT 2
51001: ARRAY
51002: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51003: LD_ADDR_VAR 0 14
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: LD_INT 5
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: ST_TO_ADDR
// for i in tmp do
51026: LD_ADDR_VAR 0 8
51030: PUSH
51031: LD_VAR 0 14
51035: PUSH
51036: FOR_IN
51037: IFFALSE 51207
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51039: LD_ADDR_VAR 0 9
51043: PUSH
51044: LD_VAR 0 10
51048: PPUSH
51049: LD_VAR 0 8
51053: PPUSH
51054: LD_INT 5
51056: PPUSH
51057: CALL_OW 272
51061: PUSH
51062: LD_VAR 0 11
51066: PPUSH
51067: LD_VAR 0 8
51071: PPUSH
51072: LD_INT 5
51074: PPUSH
51075: CALL_OW 273
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51084: LD_VAR 0 9
51088: PUSH
51089: LD_INT 1
51091: ARRAY
51092: PPUSH
51093: LD_VAR 0 9
51097: PUSH
51098: LD_INT 2
51100: ARRAY
51101: PPUSH
51102: CALL_OW 488
51106: IFFALSE 51205
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51108: LD_ADDR_VAR 0 4
51112: PUSH
51113: LD_VAR 0 9
51117: PUSH
51118: LD_INT 1
51120: ARRAY
51121: PPUSH
51122: LD_VAR 0 9
51126: PUSH
51127: LD_INT 2
51129: ARRAY
51130: PPUSH
51131: CALL_OW 546
51135: ST_TO_ADDR
// if hex [ 1 ] then
51136: LD_VAR 0 4
51140: PUSH
51141: LD_INT 1
51143: ARRAY
51144: IFFALSE 51148
// continue ;
51146: GO 51036
// h := hex [ 2 ] ;
51148: LD_ADDR_VAR 0 13
51152: PUSH
51153: LD_VAR 0 4
51157: PUSH
51158: LD_INT 2
51160: ARRAY
51161: ST_TO_ADDR
// if h + 7 < height then
51162: LD_VAR 0 13
51166: PUSH
51167: LD_INT 7
51169: PLUS
51170: PUSH
51171: LD_VAR 0 15
51175: LESS
51176: IFFALSE 51205
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51178: LD_ADDR_VAR 0 18
51182: PUSH
51183: LD_INT 7
51185: PUSH
51186: LD_INT 28
51188: PUSH
51189: LD_INT 45
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: PUSH
51197: LD_VAR 0 12
51201: ARRAY
51202: ST_TO_ADDR
// break ;
51203: GO 51207
// end ; end ; end ;
51205: GO 51036
51207: POP
51208: POP
// end ; if not weapon then
51209: LD_VAR 0 18
51213: NOT
51214: IFFALSE 51274
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51216: LD_ADDR_VAR 0 5
51220: PUSH
51221: LD_VAR 0 5
51225: PUSH
51226: LD_INT 11
51228: PUSH
51229: LD_INT 30
51231: PUSH
51232: LD_INT 49
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: DIFF
51240: ST_TO_ADDR
// if not list then
51241: LD_VAR 0 5
51245: NOT
51246: IFFALSE 51250
// exit ;
51248: GO 51392
// weapon := list [ rand ( 1 , list ) ] ;
51250: LD_ADDR_VAR 0 18
51254: PUSH
51255: LD_VAR 0 5
51259: PUSH
51260: LD_INT 1
51262: PPUSH
51263: LD_VAR 0 5
51267: PPUSH
51268: CALL_OW 12
51272: ARRAY
51273: ST_TO_ADDR
// end ; if weapon then
51274: LD_VAR 0 18
51278: IFFALSE 51392
// begin tmp := CostOfWeapon ( weapon ) ;
51280: LD_ADDR_VAR 0 14
51284: PUSH
51285: LD_VAR 0 18
51289: PPUSH
51290: CALL_OW 451
51294: ST_TO_ADDR
// j := GetBase ( tower ) ;
51295: LD_ADDR_VAR 0 9
51299: PUSH
51300: LD_VAR 0 1
51304: PPUSH
51305: CALL_OW 274
51309: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51310: LD_VAR 0 9
51314: PPUSH
51315: LD_INT 1
51317: PPUSH
51318: CALL_OW 275
51322: PUSH
51323: LD_VAR 0 14
51327: PUSH
51328: LD_INT 1
51330: ARRAY
51331: GREATEREQUAL
51332: PUSH
51333: LD_VAR 0 9
51337: PPUSH
51338: LD_INT 2
51340: PPUSH
51341: CALL_OW 275
51345: PUSH
51346: LD_VAR 0 14
51350: PUSH
51351: LD_INT 2
51353: ARRAY
51354: GREATEREQUAL
51355: AND
51356: PUSH
51357: LD_VAR 0 9
51361: PPUSH
51362: LD_INT 3
51364: PPUSH
51365: CALL_OW 275
51369: PUSH
51370: LD_VAR 0 14
51374: PUSH
51375: LD_INT 3
51377: ARRAY
51378: GREATEREQUAL
51379: AND
51380: IFFALSE 51392
// result := weapon ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_VAR 0 18
51391: ST_TO_ADDR
// end ; end ;
51392: LD_VAR 0 3
51396: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51397: LD_INT 0
51399: PPUSH
51400: PPUSH
// result := true ;
51401: LD_ADDR_VAR 0 3
51405: PUSH
51406: LD_INT 1
51408: ST_TO_ADDR
// if array1 = array2 then
51409: LD_VAR 0 1
51413: PUSH
51414: LD_VAR 0 2
51418: EQUAL
51419: IFFALSE 51479
// begin for i = 1 to array1 do
51421: LD_ADDR_VAR 0 4
51425: PUSH
51426: DOUBLE
51427: LD_INT 1
51429: DEC
51430: ST_TO_ADDR
51431: LD_VAR 0 1
51435: PUSH
51436: FOR_TO
51437: IFFALSE 51475
// if array1 [ i ] <> array2 [ i ] then
51439: LD_VAR 0 1
51443: PUSH
51444: LD_VAR 0 4
51448: ARRAY
51449: PUSH
51450: LD_VAR 0 2
51454: PUSH
51455: LD_VAR 0 4
51459: ARRAY
51460: NONEQUAL
51461: IFFALSE 51473
// begin result := false ;
51463: LD_ADDR_VAR 0 3
51467: PUSH
51468: LD_INT 0
51470: ST_TO_ADDR
// break ;
51471: GO 51475
// end ;
51473: GO 51436
51475: POP
51476: POP
// end else
51477: GO 51487
// result := false ;
51479: LD_ADDR_VAR 0 3
51483: PUSH
51484: LD_INT 0
51486: ST_TO_ADDR
// end ;
51487: LD_VAR 0 3
51491: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51492: LD_INT 0
51494: PPUSH
51495: PPUSH
// if not array1 or not array2 then
51496: LD_VAR 0 1
51500: NOT
51501: PUSH
51502: LD_VAR 0 2
51506: NOT
51507: OR
51508: IFFALSE 51512
// exit ;
51510: GO 51576
// result := true ;
51512: LD_ADDR_VAR 0 3
51516: PUSH
51517: LD_INT 1
51519: ST_TO_ADDR
// for i = 1 to array1 do
51520: LD_ADDR_VAR 0 4
51524: PUSH
51525: DOUBLE
51526: LD_INT 1
51528: DEC
51529: ST_TO_ADDR
51530: LD_VAR 0 1
51534: PUSH
51535: FOR_TO
51536: IFFALSE 51574
// if array1 [ i ] <> array2 [ i ] then
51538: LD_VAR 0 1
51542: PUSH
51543: LD_VAR 0 4
51547: ARRAY
51548: PUSH
51549: LD_VAR 0 2
51553: PUSH
51554: LD_VAR 0 4
51558: ARRAY
51559: NONEQUAL
51560: IFFALSE 51572
// begin result := false ;
51562: LD_ADDR_VAR 0 3
51566: PUSH
51567: LD_INT 0
51569: ST_TO_ADDR
// break ;
51570: GO 51574
// end ;
51572: GO 51535
51574: POP
51575: POP
// end ;
51576: LD_VAR 0 3
51580: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51581: LD_INT 0
51583: PPUSH
51584: PPUSH
51585: PPUSH
// pom := GetBase ( fac ) ;
51586: LD_ADDR_VAR 0 5
51590: PUSH
51591: LD_VAR 0 1
51595: PPUSH
51596: CALL_OW 274
51600: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51601: LD_ADDR_VAR 0 4
51605: PUSH
51606: LD_VAR 0 2
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: PPUSH
51615: LD_VAR 0 2
51619: PUSH
51620: LD_INT 2
51622: ARRAY
51623: PPUSH
51624: LD_VAR 0 2
51628: PUSH
51629: LD_INT 3
51631: ARRAY
51632: PPUSH
51633: LD_VAR 0 2
51637: PUSH
51638: LD_INT 4
51640: ARRAY
51641: PPUSH
51642: CALL_OW 449
51646: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51647: LD_ADDR_VAR 0 3
51651: PUSH
51652: LD_VAR 0 5
51656: PPUSH
51657: LD_INT 1
51659: PPUSH
51660: CALL_OW 275
51664: PUSH
51665: LD_VAR 0 4
51669: PUSH
51670: LD_INT 1
51672: ARRAY
51673: GREATEREQUAL
51674: PUSH
51675: LD_VAR 0 5
51679: PPUSH
51680: LD_INT 2
51682: PPUSH
51683: CALL_OW 275
51687: PUSH
51688: LD_VAR 0 4
51692: PUSH
51693: LD_INT 2
51695: ARRAY
51696: GREATEREQUAL
51697: AND
51698: PUSH
51699: LD_VAR 0 5
51703: PPUSH
51704: LD_INT 3
51706: PPUSH
51707: CALL_OW 275
51711: PUSH
51712: LD_VAR 0 4
51716: PUSH
51717: LD_INT 3
51719: ARRAY
51720: GREATEREQUAL
51721: AND
51722: ST_TO_ADDR
// end ;
51723: LD_VAR 0 3
51727: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51728: LD_INT 0
51730: PPUSH
51731: PPUSH
51732: PPUSH
51733: PPUSH
// pom := GetBase ( building ) ;
51734: LD_ADDR_VAR 0 3
51738: PUSH
51739: LD_VAR 0 1
51743: PPUSH
51744: CALL_OW 274
51748: ST_TO_ADDR
// if not pom then
51749: LD_VAR 0 3
51753: NOT
51754: IFFALSE 51758
// exit ;
51756: GO 51928
// btype := GetBType ( building ) ;
51758: LD_ADDR_VAR 0 5
51762: PUSH
51763: LD_VAR 0 1
51767: PPUSH
51768: CALL_OW 266
51772: ST_TO_ADDR
// if btype = b_armoury then
51773: LD_VAR 0 5
51777: PUSH
51778: LD_INT 4
51780: EQUAL
51781: IFFALSE 51791
// btype := b_barracks ;
51783: LD_ADDR_VAR 0 5
51787: PUSH
51788: LD_INT 5
51790: ST_TO_ADDR
// if btype = b_depot then
51791: LD_VAR 0 5
51795: PUSH
51796: LD_INT 0
51798: EQUAL
51799: IFFALSE 51809
// btype := b_warehouse ;
51801: LD_ADDR_VAR 0 5
51805: PUSH
51806: LD_INT 1
51808: ST_TO_ADDR
// if btype = b_workshop then
51809: LD_VAR 0 5
51813: PUSH
51814: LD_INT 2
51816: EQUAL
51817: IFFALSE 51827
// btype := b_factory ;
51819: LD_ADDR_VAR 0 5
51823: PUSH
51824: LD_INT 3
51826: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51827: LD_ADDR_VAR 0 4
51831: PUSH
51832: LD_VAR 0 5
51836: PPUSH
51837: LD_VAR 0 1
51841: PPUSH
51842: CALL_OW 248
51846: PPUSH
51847: CALL_OW 450
51851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51852: LD_ADDR_VAR 0 2
51856: PUSH
51857: LD_VAR 0 3
51861: PPUSH
51862: LD_INT 1
51864: PPUSH
51865: CALL_OW 275
51869: PUSH
51870: LD_VAR 0 4
51874: PUSH
51875: LD_INT 1
51877: ARRAY
51878: GREATEREQUAL
51879: PUSH
51880: LD_VAR 0 3
51884: PPUSH
51885: LD_INT 2
51887: PPUSH
51888: CALL_OW 275
51892: PUSH
51893: LD_VAR 0 4
51897: PUSH
51898: LD_INT 2
51900: ARRAY
51901: GREATEREQUAL
51902: AND
51903: PUSH
51904: LD_VAR 0 3
51908: PPUSH
51909: LD_INT 3
51911: PPUSH
51912: CALL_OW 275
51916: PUSH
51917: LD_VAR 0 4
51921: PUSH
51922: LD_INT 3
51924: ARRAY
51925: GREATEREQUAL
51926: AND
51927: ST_TO_ADDR
// end ;
51928: LD_VAR 0 2
51932: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51933: LD_INT 0
51935: PPUSH
51936: PPUSH
51937: PPUSH
// pom := GetBase ( building ) ;
51938: LD_ADDR_VAR 0 4
51942: PUSH
51943: LD_VAR 0 1
51947: PPUSH
51948: CALL_OW 274
51952: ST_TO_ADDR
// if not pom then
51953: LD_VAR 0 4
51957: NOT
51958: IFFALSE 51962
// exit ;
51960: GO 52063
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51962: LD_ADDR_VAR 0 5
51966: PUSH
51967: LD_VAR 0 2
51971: PPUSH
51972: LD_VAR 0 1
51976: PPUSH
51977: CALL_OW 248
51981: PPUSH
51982: CALL_OW 450
51986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51987: LD_ADDR_VAR 0 3
51991: PUSH
51992: LD_VAR 0 4
51996: PPUSH
51997: LD_INT 1
51999: PPUSH
52000: CALL_OW 275
52004: PUSH
52005: LD_VAR 0 5
52009: PUSH
52010: LD_INT 1
52012: ARRAY
52013: GREATEREQUAL
52014: PUSH
52015: LD_VAR 0 4
52019: PPUSH
52020: LD_INT 2
52022: PPUSH
52023: CALL_OW 275
52027: PUSH
52028: LD_VAR 0 5
52032: PUSH
52033: LD_INT 2
52035: ARRAY
52036: GREATEREQUAL
52037: AND
52038: PUSH
52039: LD_VAR 0 4
52043: PPUSH
52044: LD_INT 3
52046: PPUSH
52047: CALL_OW 275
52051: PUSH
52052: LD_VAR 0 5
52056: PUSH
52057: LD_INT 3
52059: ARRAY
52060: GREATEREQUAL
52061: AND
52062: ST_TO_ADDR
// end ;
52063: LD_VAR 0 3
52067: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52068: LD_INT 0
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
52078: PPUSH
52079: PPUSH
52080: PPUSH
// result := false ;
52081: LD_ADDR_VAR 0 8
52085: PUSH
52086: LD_INT 0
52088: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52089: LD_VAR 0 5
52093: NOT
52094: PUSH
52095: LD_VAR 0 1
52099: NOT
52100: OR
52101: PUSH
52102: LD_VAR 0 2
52106: NOT
52107: OR
52108: PUSH
52109: LD_VAR 0 3
52113: NOT
52114: OR
52115: IFFALSE 52119
// exit ;
52117: GO 52933
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52119: LD_ADDR_VAR 0 14
52123: PUSH
52124: LD_VAR 0 1
52128: PPUSH
52129: LD_VAR 0 2
52133: PPUSH
52134: LD_VAR 0 3
52138: PPUSH
52139: LD_VAR 0 4
52143: PPUSH
52144: LD_VAR 0 5
52148: PUSH
52149: LD_INT 1
52151: ARRAY
52152: PPUSH
52153: CALL_OW 248
52157: PPUSH
52158: LD_INT 0
52160: PPUSH
52161: CALL 54166 0 6
52165: ST_TO_ADDR
// if not hexes then
52166: LD_VAR 0 14
52170: NOT
52171: IFFALSE 52175
// exit ;
52173: GO 52933
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52175: LD_ADDR_VAR 0 17
52179: PUSH
52180: LD_VAR 0 5
52184: PPUSH
52185: LD_INT 22
52187: PUSH
52188: LD_VAR 0 13
52192: PPUSH
52193: CALL_OW 255
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 30
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 30
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: LIST
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PPUSH
52234: CALL_OW 72
52238: ST_TO_ADDR
// for i = 1 to hexes do
52239: LD_ADDR_VAR 0 9
52243: PUSH
52244: DOUBLE
52245: LD_INT 1
52247: DEC
52248: ST_TO_ADDR
52249: LD_VAR 0 14
52253: PUSH
52254: FOR_TO
52255: IFFALSE 52931
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52257: LD_ADDR_VAR 0 13
52261: PUSH
52262: LD_VAR 0 14
52266: PUSH
52267: LD_VAR 0 9
52271: ARRAY
52272: PUSH
52273: LD_INT 1
52275: ARRAY
52276: PPUSH
52277: LD_VAR 0 14
52281: PUSH
52282: LD_VAR 0 9
52286: ARRAY
52287: PUSH
52288: LD_INT 2
52290: ARRAY
52291: PPUSH
52292: CALL_OW 428
52296: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52297: LD_VAR 0 14
52301: PUSH
52302: LD_VAR 0 9
52306: ARRAY
52307: PUSH
52308: LD_INT 1
52310: ARRAY
52311: PPUSH
52312: LD_VAR 0 14
52316: PUSH
52317: LD_VAR 0 9
52321: ARRAY
52322: PUSH
52323: LD_INT 2
52325: ARRAY
52326: PPUSH
52327: CALL_OW 351
52331: PUSH
52332: LD_VAR 0 14
52336: PUSH
52337: LD_VAR 0 9
52341: ARRAY
52342: PUSH
52343: LD_INT 1
52345: ARRAY
52346: PPUSH
52347: LD_VAR 0 14
52351: PUSH
52352: LD_VAR 0 9
52356: ARRAY
52357: PUSH
52358: LD_INT 2
52360: ARRAY
52361: PPUSH
52362: CALL_OW 488
52366: NOT
52367: OR
52368: PUSH
52369: LD_VAR 0 13
52373: PPUSH
52374: CALL_OW 247
52378: PUSH
52379: LD_INT 3
52381: EQUAL
52382: OR
52383: IFFALSE 52389
// exit ;
52385: POP
52386: POP
52387: GO 52933
// if not tmp then
52389: LD_VAR 0 13
52393: NOT
52394: IFFALSE 52398
// continue ;
52396: GO 52254
// result := true ;
52398: LD_ADDR_VAR 0 8
52402: PUSH
52403: LD_INT 1
52405: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52406: LD_VAR 0 6
52410: PUSH
52411: LD_VAR 0 13
52415: PPUSH
52416: CALL_OW 247
52420: PUSH
52421: LD_INT 2
52423: EQUAL
52424: AND
52425: PUSH
52426: LD_VAR 0 13
52430: PPUSH
52431: CALL_OW 263
52435: PUSH
52436: LD_INT 1
52438: EQUAL
52439: AND
52440: IFFALSE 52604
// begin if IsDrivenBy ( tmp ) then
52442: LD_VAR 0 13
52446: PPUSH
52447: CALL_OW 311
52451: IFFALSE 52455
// continue ;
52453: GO 52254
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52455: LD_VAR 0 6
52459: PPUSH
52460: LD_INT 3
52462: PUSH
52463: LD_INT 60
52465: PUSH
52466: EMPTY
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: LD_INT 55
52478: PUSH
52479: EMPTY
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PPUSH
52490: CALL_OW 72
52494: IFFALSE 52602
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52496: LD_ADDR_VAR 0 18
52500: PUSH
52501: LD_VAR 0 6
52505: PPUSH
52506: LD_INT 3
52508: PUSH
52509: LD_INT 60
52511: PUSH
52512: EMPTY
52513: LIST
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 55
52524: PUSH
52525: EMPTY
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PPUSH
52536: CALL_OW 72
52540: PUSH
52541: LD_INT 1
52543: ARRAY
52544: ST_TO_ADDR
// if IsInUnit ( driver ) then
52545: LD_VAR 0 18
52549: PPUSH
52550: CALL_OW 310
52554: IFFALSE 52565
// ComExit ( driver ) ;
52556: LD_VAR 0 18
52560: PPUSH
52561: CALL 77946 0 1
// AddComEnterUnit ( driver , tmp ) ;
52565: LD_VAR 0 18
52569: PPUSH
52570: LD_VAR 0 13
52574: PPUSH
52575: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52579: LD_VAR 0 18
52583: PPUSH
52584: LD_VAR 0 7
52588: PPUSH
52589: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52593: LD_VAR 0 18
52597: PPUSH
52598: CALL_OW 181
// end ; continue ;
52602: GO 52254
// end ; if not cleaners or not tmp in cleaners then
52604: LD_VAR 0 6
52608: NOT
52609: PUSH
52610: LD_VAR 0 13
52614: PUSH
52615: LD_VAR 0 6
52619: IN
52620: NOT
52621: OR
52622: IFFALSE 52929
// begin if dep then
52624: LD_VAR 0 17
52628: IFFALSE 52764
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52630: LD_ADDR_VAR 0 16
52634: PUSH
52635: LD_VAR 0 17
52639: PUSH
52640: LD_INT 1
52642: ARRAY
52643: PPUSH
52644: CALL_OW 250
52648: PPUSH
52649: LD_VAR 0 17
52653: PUSH
52654: LD_INT 1
52656: ARRAY
52657: PPUSH
52658: CALL_OW 254
52662: PPUSH
52663: LD_INT 5
52665: PPUSH
52666: CALL_OW 272
52670: PUSH
52671: LD_VAR 0 17
52675: PUSH
52676: LD_INT 1
52678: ARRAY
52679: PPUSH
52680: CALL_OW 251
52684: PPUSH
52685: LD_VAR 0 17
52689: PUSH
52690: LD_INT 1
52692: ARRAY
52693: PPUSH
52694: CALL_OW 254
52698: PPUSH
52699: LD_INT 5
52701: PPUSH
52702: CALL_OW 273
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52711: LD_VAR 0 16
52715: PUSH
52716: LD_INT 1
52718: ARRAY
52719: PPUSH
52720: LD_VAR 0 16
52724: PUSH
52725: LD_INT 2
52727: ARRAY
52728: PPUSH
52729: CALL_OW 488
52733: IFFALSE 52764
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52735: LD_VAR 0 13
52739: PPUSH
52740: LD_VAR 0 16
52744: PUSH
52745: LD_INT 1
52747: ARRAY
52748: PPUSH
52749: LD_VAR 0 16
52753: PUSH
52754: LD_INT 2
52756: ARRAY
52757: PPUSH
52758: CALL_OW 111
// continue ;
52762: GO 52254
// end ; end ; r := GetDir ( tmp ) ;
52764: LD_ADDR_VAR 0 15
52768: PUSH
52769: LD_VAR 0 13
52773: PPUSH
52774: CALL_OW 254
52778: ST_TO_ADDR
// if r = 5 then
52779: LD_VAR 0 15
52783: PUSH
52784: LD_INT 5
52786: EQUAL
52787: IFFALSE 52797
// r := 0 ;
52789: LD_ADDR_VAR 0 15
52793: PUSH
52794: LD_INT 0
52796: ST_TO_ADDR
// for j = r to 5 do
52797: LD_ADDR_VAR 0 10
52801: PUSH
52802: DOUBLE
52803: LD_VAR 0 15
52807: DEC
52808: ST_TO_ADDR
52809: LD_INT 5
52811: PUSH
52812: FOR_TO
52813: IFFALSE 52927
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52815: LD_ADDR_VAR 0 11
52819: PUSH
52820: LD_VAR 0 13
52824: PPUSH
52825: CALL_OW 250
52829: PPUSH
52830: LD_VAR 0 10
52834: PPUSH
52835: LD_INT 2
52837: PPUSH
52838: CALL_OW 272
52842: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52843: LD_ADDR_VAR 0 12
52847: PUSH
52848: LD_VAR 0 13
52852: PPUSH
52853: CALL_OW 251
52857: PPUSH
52858: LD_VAR 0 10
52862: PPUSH
52863: LD_INT 2
52865: PPUSH
52866: CALL_OW 273
52870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52871: LD_VAR 0 11
52875: PPUSH
52876: LD_VAR 0 12
52880: PPUSH
52881: CALL_OW 488
52885: PUSH
52886: LD_VAR 0 11
52890: PPUSH
52891: LD_VAR 0 12
52895: PPUSH
52896: CALL_OW 428
52900: NOT
52901: AND
52902: IFFALSE 52925
// begin ComMoveXY ( tmp , _x , _y ) ;
52904: LD_VAR 0 13
52908: PPUSH
52909: LD_VAR 0 11
52913: PPUSH
52914: LD_VAR 0 12
52918: PPUSH
52919: CALL_OW 111
// break ;
52923: GO 52927
// end ; end ;
52925: GO 52812
52927: POP
52928: POP
// end ; end ;
52929: GO 52254
52931: POP
52932: POP
// end ;
52933: LD_VAR 0 8
52937: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52938: LD_INT 0
52940: PPUSH
// result := true ;
52941: LD_ADDR_VAR 0 3
52945: PUSH
52946: LD_INT 1
52948: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52949: LD_VAR 0 2
52953: PUSH
52954: LD_INT 24
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52968
52960: LD_INT 33
52962: DOUBLE
52963: EQUAL
52964: IFTRUE 52968
52966: GO 52993
52968: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52969: LD_ADDR_VAR 0 3
52973: PUSH
52974: LD_INT 32
52976: PPUSH
52977: LD_VAR 0 1
52981: PPUSH
52982: CALL_OW 321
52986: PUSH
52987: LD_INT 2
52989: EQUAL
52990: ST_TO_ADDR
52991: GO 53309
52993: LD_INT 20
52995: DOUBLE
52996: EQUAL
52997: IFTRUE 53001
52999: GO 53026
53001: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53002: LD_ADDR_VAR 0 3
53006: PUSH
53007: LD_INT 6
53009: PPUSH
53010: LD_VAR 0 1
53014: PPUSH
53015: CALL_OW 321
53019: PUSH
53020: LD_INT 2
53022: EQUAL
53023: ST_TO_ADDR
53024: GO 53309
53026: LD_INT 22
53028: DOUBLE
53029: EQUAL
53030: IFTRUE 53040
53032: LD_INT 36
53034: DOUBLE
53035: EQUAL
53036: IFTRUE 53040
53038: GO 53065
53040: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53041: LD_ADDR_VAR 0 3
53045: PUSH
53046: LD_INT 15
53048: PPUSH
53049: LD_VAR 0 1
53053: PPUSH
53054: CALL_OW 321
53058: PUSH
53059: LD_INT 2
53061: EQUAL
53062: ST_TO_ADDR
53063: GO 53309
53065: LD_INT 30
53067: DOUBLE
53068: EQUAL
53069: IFTRUE 53073
53071: GO 53098
53073: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53074: LD_ADDR_VAR 0 3
53078: PUSH
53079: LD_INT 20
53081: PPUSH
53082: LD_VAR 0 1
53086: PPUSH
53087: CALL_OW 321
53091: PUSH
53092: LD_INT 2
53094: EQUAL
53095: ST_TO_ADDR
53096: GO 53309
53098: LD_INT 28
53100: DOUBLE
53101: EQUAL
53102: IFTRUE 53112
53104: LD_INT 21
53106: DOUBLE
53107: EQUAL
53108: IFTRUE 53112
53110: GO 53137
53112: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53113: LD_ADDR_VAR 0 3
53117: PUSH
53118: LD_INT 21
53120: PPUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 321
53130: PUSH
53131: LD_INT 2
53133: EQUAL
53134: ST_TO_ADDR
53135: GO 53309
53137: LD_INT 16
53139: DOUBLE
53140: EQUAL
53141: IFTRUE 53145
53143: GO 53170
53145: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53146: LD_ADDR_VAR 0 3
53150: PUSH
53151: LD_INT 84
53153: PPUSH
53154: LD_VAR 0 1
53158: PPUSH
53159: CALL_OW 321
53163: PUSH
53164: LD_INT 2
53166: EQUAL
53167: ST_TO_ADDR
53168: GO 53309
53170: LD_INT 19
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53184
53176: LD_INT 23
53178: DOUBLE
53179: EQUAL
53180: IFTRUE 53184
53182: GO 53209
53184: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53185: LD_ADDR_VAR 0 3
53189: PUSH
53190: LD_INT 83
53192: PPUSH
53193: LD_VAR 0 1
53197: PPUSH
53198: CALL_OW 321
53202: PUSH
53203: LD_INT 2
53205: EQUAL
53206: ST_TO_ADDR
53207: GO 53309
53209: LD_INT 17
53211: DOUBLE
53212: EQUAL
53213: IFTRUE 53217
53215: GO 53242
53217: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53218: LD_ADDR_VAR 0 3
53222: PUSH
53223: LD_INT 39
53225: PPUSH
53226: LD_VAR 0 1
53230: PPUSH
53231: CALL_OW 321
53235: PUSH
53236: LD_INT 2
53238: EQUAL
53239: ST_TO_ADDR
53240: GO 53309
53242: LD_INT 18
53244: DOUBLE
53245: EQUAL
53246: IFTRUE 53250
53248: GO 53275
53250: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53251: LD_ADDR_VAR 0 3
53255: PUSH
53256: LD_INT 40
53258: PPUSH
53259: LD_VAR 0 1
53263: PPUSH
53264: CALL_OW 321
53268: PUSH
53269: LD_INT 2
53271: EQUAL
53272: ST_TO_ADDR
53273: GO 53309
53275: LD_INT 27
53277: DOUBLE
53278: EQUAL
53279: IFTRUE 53283
53281: GO 53308
53283: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53284: LD_ADDR_VAR 0 3
53288: PUSH
53289: LD_INT 35
53291: PPUSH
53292: LD_VAR 0 1
53296: PPUSH
53297: CALL_OW 321
53301: PUSH
53302: LD_INT 2
53304: EQUAL
53305: ST_TO_ADDR
53306: GO 53309
53308: POP
// end ;
53309: LD_VAR 0 3
53313: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53314: LD_INT 0
53316: PPUSH
53317: PPUSH
53318: PPUSH
53319: PPUSH
53320: PPUSH
53321: PPUSH
53322: PPUSH
53323: PPUSH
53324: PPUSH
53325: PPUSH
53326: PPUSH
// result := false ;
53327: LD_ADDR_VAR 0 6
53331: PUSH
53332: LD_INT 0
53334: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53335: LD_VAR 0 1
53339: NOT
53340: PUSH
53341: LD_VAR 0 1
53345: PPUSH
53346: CALL_OW 266
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: IN
53361: NOT
53362: OR
53363: PUSH
53364: LD_VAR 0 2
53368: NOT
53369: OR
53370: PUSH
53371: LD_VAR 0 5
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: LD_INT 4
53390: PUSH
53391: LD_INT 5
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: IN
53402: NOT
53403: OR
53404: PUSH
53405: LD_VAR 0 3
53409: PPUSH
53410: LD_VAR 0 4
53414: PPUSH
53415: CALL_OW 488
53419: NOT
53420: OR
53421: IFFALSE 53425
// exit ;
53423: GO 54161
// side := GetSide ( depot ) ;
53425: LD_ADDR_VAR 0 9
53429: PUSH
53430: LD_VAR 0 1
53434: PPUSH
53435: CALL_OW 255
53439: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53440: LD_VAR 0 9
53444: PPUSH
53445: LD_VAR 0 2
53449: PPUSH
53450: CALL 52938 0 2
53454: NOT
53455: IFFALSE 53459
// exit ;
53457: GO 54161
// pom := GetBase ( depot ) ;
53459: LD_ADDR_VAR 0 10
53463: PUSH
53464: LD_VAR 0 1
53468: PPUSH
53469: CALL_OW 274
53473: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53474: LD_ADDR_VAR 0 11
53478: PUSH
53479: LD_VAR 0 2
53483: PPUSH
53484: LD_VAR 0 1
53488: PPUSH
53489: CALL_OW 248
53493: PPUSH
53494: CALL_OW 450
53498: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53499: LD_VAR 0 10
53503: PPUSH
53504: LD_INT 1
53506: PPUSH
53507: CALL_OW 275
53511: PUSH
53512: LD_VAR 0 11
53516: PUSH
53517: LD_INT 1
53519: ARRAY
53520: GREATEREQUAL
53521: PUSH
53522: LD_VAR 0 10
53526: PPUSH
53527: LD_INT 2
53529: PPUSH
53530: CALL_OW 275
53534: PUSH
53535: LD_VAR 0 11
53539: PUSH
53540: LD_INT 2
53542: ARRAY
53543: GREATEREQUAL
53544: AND
53545: PUSH
53546: LD_VAR 0 10
53550: PPUSH
53551: LD_INT 3
53553: PPUSH
53554: CALL_OW 275
53558: PUSH
53559: LD_VAR 0 11
53563: PUSH
53564: LD_INT 3
53566: ARRAY
53567: GREATEREQUAL
53568: AND
53569: NOT
53570: IFFALSE 53574
// exit ;
53572: GO 54161
// if GetBType ( depot ) = b_depot then
53574: LD_VAR 0 1
53578: PPUSH
53579: CALL_OW 266
53583: PUSH
53584: LD_INT 0
53586: EQUAL
53587: IFFALSE 53599
// dist := 28 else
53589: LD_ADDR_VAR 0 14
53593: PUSH
53594: LD_INT 28
53596: ST_TO_ADDR
53597: GO 53607
// dist := 36 ;
53599: LD_ADDR_VAR 0 14
53603: PUSH
53604: LD_INT 36
53606: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53607: LD_VAR 0 1
53611: PPUSH
53612: LD_VAR 0 3
53616: PPUSH
53617: LD_VAR 0 4
53621: PPUSH
53622: CALL_OW 297
53626: PUSH
53627: LD_VAR 0 14
53631: GREATER
53632: IFFALSE 53636
// exit ;
53634: GO 54161
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53636: LD_ADDR_VAR 0 12
53640: PUSH
53641: LD_VAR 0 2
53645: PPUSH
53646: LD_VAR 0 3
53650: PPUSH
53651: LD_VAR 0 4
53655: PPUSH
53656: LD_VAR 0 5
53660: PPUSH
53661: LD_VAR 0 1
53665: PPUSH
53666: CALL_OW 248
53670: PPUSH
53671: LD_INT 0
53673: PPUSH
53674: CALL 54166 0 6
53678: ST_TO_ADDR
// if not hexes then
53679: LD_VAR 0 12
53683: NOT
53684: IFFALSE 53688
// exit ;
53686: GO 54161
// hex := GetHexInfo ( x , y ) ;
53688: LD_ADDR_VAR 0 15
53692: PUSH
53693: LD_VAR 0 3
53697: PPUSH
53698: LD_VAR 0 4
53702: PPUSH
53703: CALL_OW 546
53707: ST_TO_ADDR
// if hex [ 1 ] then
53708: LD_VAR 0 15
53712: PUSH
53713: LD_INT 1
53715: ARRAY
53716: IFFALSE 53720
// exit ;
53718: GO 54161
// height := hex [ 2 ] ;
53720: LD_ADDR_VAR 0 13
53724: PUSH
53725: LD_VAR 0 15
53729: PUSH
53730: LD_INT 2
53732: ARRAY
53733: ST_TO_ADDR
// for i = 1 to hexes do
53734: LD_ADDR_VAR 0 7
53738: PUSH
53739: DOUBLE
53740: LD_INT 1
53742: DEC
53743: ST_TO_ADDR
53744: LD_VAR 0 12
53748: PUSH
53749: FOR_TO
53750: IFFALSE 54080
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53752: LD_VAR 0 12
53756: PUSH
53757: LD_VAR 0 7
53761: ARRAY
53762: PUSH
53763: LD_INT 1
53765: ARRAY
53766: PPUSH
53767: LD_VAR 0 12
53771: PUSH
53772: LD_VAR 0 7
53776: ARRAY
53777: PUSH
53778: LD_INT 2
53780: ARRAY
53781: PPUSH
53782: CALL_OW 488
53786: NOT
53787: PUSH
53788: LD_VAR 0 12
53792: PUSH
53793: LD_VAR 0 7
53797: ARRAY
53798: PUSH
53799: LD_INT 1
53801: ARRAY
53802: PPUSH
53803: LD_VAR 0 12
53807: PUSH
53808: LD_VAR 0 7
53812: ARRAY
53813: PUSH
53814: LD_INT 2
53816: ARRAY
53817: PPUSH
53818: CALL_OW 428
53822: PUSH
53823: LD_INT 0
53825: GREATER
53826: OR
53827: PUSH
53828: LD_VAR 0 12
53832: PUSH
53833: LD_VAR 0 7
53837: ARRAY
53838: PUSH
53839: LD_INT 1
53841: ARRAY
53842: PPUSH
53843: LD_VAR 0 12
53847: PUSH
53848: LD_VAR 0 7
53852: ARRAY
53853: PUSH
53854: LD_INT 2
53856: ARRAY
53857: PPUSH
53858: CALL_OW 351
53862: OR
53863: IFFALSE 53869
// exit ;
53865: POP
53866: POP
53867: GO 54161
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53869: LD_ADDR_VAR 0 8
53873: PUSH
53874: LD_VAR 0 12
53878: PUSH
53879: LD_VAR 0 7
53883: ARRAY
53884: PUSH
53885: LD_INT 1
53887: ARRAY
53888: PPUSH
53889: LD_VAR 0 12
53893: PUSH
53894: LD_VAR 0 7
53898: ARRAY
53899: PUSH
53900: LD_INT 2
53902: ARRAY
53903: PPUSH
53904: CALL_OW 546
53908: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53909: LD_VAR 0 8
53913: PUSH
53914: LD_INT 1
53916: ARRAY
53917: PUSH
53918: LD_VAR 0 8
53922: PUSH
53923: LD_INT 2
53925: ARRAY
53926: PUSH
53927: LD_VAR 0 13
53931: PUSH
53932: LD_INT 2
53934: PLUS
53935: GREATER
53936: OR
53937: PUSH
53938: LD_VAR 0 8
53942: PUSH
53943: LD_INT 2
53945: ARRAY
53946: PUSH
53947: LD_VAR 0 13
53951: PUSH
53952: LD_INT 2
53954: MINUS
53955: LESS
53956: OR
53957: PUSH
53958: LD_VAR 0 8
53962: PUSH
53963: LD_INT 3
53965: ARRAY
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 8
53972: PUSH
53973: LD_INT 9
53975: PUSH
53976: LD_INT 10
53978: PUSH
53979: LD_INT 11
53981: PUSH
53982: LD_INT 12
53984: PUSH
53985: LD_INT 13
53987: PUSH
53988: LD_INT 16
53990: PUSH
53991: LD_INT 17
53993: PUSH
53994: LD_INT 18
53996: PUSH
53997: LD_INT 19
53999: PUSH
54000: LD_INT 20
54002: PUSH
54003: LD_INT 21
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: IN
54021: NOT
54022: OR
54023: PUSH
54024: LD_VAR 0 8
54028: PUSH
54029: LD_INT 5
54031: ARRAY
54032: NOT
54033: OR
54034: PUSH
54035: LD_VAR 0 8
54039: PUSH
54040: LD_INT 6
54042: ARRAY
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 7
54052: PUSH
54053: LD_INT 9
54055: PUSH
54056: LD_INT 10
54058: PUSH
54059: LD_INT 11
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: IN
54070: NOT
54071: OR
54072: IFFALSE 54078
// exit ;
54074: POP
54075: POP
54076: GO 54161
// end ;
54078: GO 53749
54080: POP
54081: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54082: LD_VAR 0 9
54086: PPUSH
54087: LD_VAR 0 3
54091: PPUSH
54092: LD_VAR 0 4
54096: PPUSH
54097: LD_INT 20
54099: PPUSH
54100: CALL 46113 0 4
54104: PUSH
54105: LD_INT 4
54107: ARRAY
54108: IFFALSE 54112
// exit ;
54110: GO 54161
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54112: LD_VAR 0 2
54116: PUSH
54117: LD_INT 29
54119: PUSH
54120: LD_INT 30
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: IN
54127: PUSH
54128: LD_VAR 0 3
54132: PPUSH
54133: LD_VAR 0 4
54137: PPUSH
54138: LD_VAR 0 9
54142: PPUSH
54143: CALL_OW 440
54147: NOT
54148: AND
54149: IFFALSE 54153
// exit ;
54151: GO 54161
// result := true ;
54153: LD_ADDR_VAR 0 6
54157: PUSH
54158: LD_INT 1
54160: ST_TO_ADDR
// end ;
54161: LD_VAR 0 6
54165: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54166: LD_INT 0
54168: PPUSH
54169: PPUSH
54170: PPUSH
54171: PPUSH
54172: PPUSH
54173: PPUSH
54174: PPUSH
54175: PPUSH
54176: PPUSH
54177: PPUSH
54178: PPUSH
54179: PPUSH
54180: PPUSH
54181: PPUSH
54182: PPUSH
54183: PPUSH
54184: PPUSH
54185: PPUSH
54186: PPUSH
54187: PPUSH
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
54192: PPUSH
54193: PPUSH
54194: PPUSH
54195: PPUSH
54196: PPUSH
54197: PPUSH
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
54205: PPUSH
54206: PPUSH
54207: PPUSH
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
54221: PPUSH
54222: PPUSH
54223: PPUSH
54224: PPUSH
54225: PPUSH
// result = [ ] ;
54226: LD_ADDR_VAR 0 7
54230: PUSH
54231: EMPTY
54232: ST_TO_ADDR
// temp_list = [ ] ;
54233: LD_ADDR_VAR 0 9
54237: PUSH
54238: EMPTY
54239: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54240: LD_VAR 0 4
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: LD_INT 4
54259: PUSH
54260: LD_INT 5
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: IN
54271: NOT
54272: PUSH
54273: LD_VAR 0 1
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: IN
54288: PUSH
54289: LD_VAR 0 5
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: IN
54308: NOT
54309: AND
54310: OR
54311: IFFALSE 54315
// exit ;
54313: GO 72706
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54315: LD_VAR 0 1
54319: PUSH
54320: LD_INT 6
54322: PUSH
54323: LD_INT 7
54325: PUSH
54326: LD_INT 8
54328: PUSH
54329: LD_INT 13
54331: PUSH
54332: LD_INT 12
54334: PUSH
54335: LD_INT 15
54337: PUSH
54338: LD_INT 11
54340: PUSH
54341: LD_INT 14
54343: PUSH
54344: LD_INT 10
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: IN
54358: IFFALSE 54368
// btype = b_lab ;
54360: LD_ADDR_VAR 0 1
54364: PUSH
54365: LD_INT 6
54367: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54368: LD_VAR 0 6
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: IN
54387: NOT
54388: PUSH
54389: LD_VAR 0 1
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: LD_INT 6
54408: PUSH
54409: LD_INT 36
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: LD_INT 5
54417: PUSH
54418: LD_INT 31
54420: PUSH
54421: LD_INT 32
54423: PUSH
54424: LD_INT 33
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: IN
54440: NOT
54441: PUSH
54442: LD_VAR 0 6
54446: PUSH
54447: LD_INT 1
54449: EQUAL
54450: AND
54451: OR
54452: PUSH
54453: LD_VAR 0 1
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: IN
54468: NOT
54469: PUSH
54470: LD_VAR 0 6
54474: PUSH
54475: LD_INT 2
54477: EQUAL
54478: AND
54479: OR
54480: IFFALSE 54490
// mode = 0 ;
54482: LD_ADDR_VAR 0 6
54486: PUSH
54487: LD_INT 0
54489: ST_TO_ADDR
// case mode of 0 :
54490: LD_VAR 0 6
54494: PUSH
54495: LD_INT 0
54497: DOUBLE
54498: EQUAL
54499: IFTRUE 54503
54501: GO 65956
54503: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54504: LD_ADDR_VAR 0 11
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54697: LD_ADDR_VAR 0 12
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54893: LD_ADDR_VAR 0 13
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 3
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 3
55064: NEG
55065: PUSH
55066: LD_INT 3
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55092: LD_ADDR_VAR 0 14
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55288: LD_ADDR_VAR 0 15
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55481: LD_ADDR_VAR 0 16
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55674: LD_ADDR_VAR 0 17
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55904: LD_ADDR_VAR 0 18
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56134: LD_ADDR_VAR 0 19
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56364: LD_ADDR_VAR 0 20
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56594: LD_ADDR_VAR 0 21
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56824: LD_ADDR_VAR 0 22
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57054: LD_ADDR_VAR 0 23
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 3
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57334: LD_ADDR_VAR 0 24
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 2
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 2
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57610: LD_ADDR_VAR 0 25
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: LD_INT 2
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57884: LD_ADDR_VAR 0 26
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 3
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58160: LD_ADDR_VAR 0 27
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 3
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58440: LD_ADDR_VAR 0 28
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58722: LD_ADDR_VAR 0 29
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 3
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: NEG
58967: PUSH
58968: LD_INT 2
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59001: LD_ADDR_VAR 0 30
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59279: LD_ADDR_VAR 0 31
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59557: LD_ADDR_VAR 0 32
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59835: LD_ADDR_VAR 0 33
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 3
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60114: LD_ADDR_VAR 0 34
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: LD_INT 2
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: LD_INT 3
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60394: LD_ADDR_VAR 0 35
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60506: LD_ADDR_VAR 0 36
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60618: LD_ADDR_VAR 0 37
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: LD_INT 1
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60730: LD_ADDR_VAR 0 38
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60842: LD_ADDR_VAR 0 39
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60954: LD_ADDR_VAR 0 40
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: LD_INT 1
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61066: LD_ADDR_VAR 0 41
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 3
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 3
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: NEG
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 3
61351: NEG
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 3
61363: NEG
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 3
61375: NEG
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61416: LD_ADDR_VAR 0 42
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 3
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 3
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 3
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 3
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 3
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61766: LD_ADDR_VAR 0 43
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 2
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 2
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: NEG
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 3
62062: NEG
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62114: LD_ADDR_VAR 0 44
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 2
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 2
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 2
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 2
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: NEG
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 3
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 2
62377: NEG
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 3
62388: NEG
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: LD_INT 3
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62464: LD_ADDR_VAR 0 45
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: LD_INT 3
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: LD_INT 3
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 2
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 3
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 3
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: LD_INT 3
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: LD_INT 3
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 3
62761: NEG
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: NEG
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62814: LD_ADDR_VAR 0 46
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: NEG
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 3
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: LD_INT 3
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: LD_INT 2
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 3
63110: NEG
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63162: LD_ADDR_VAR 0 47
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: LD_INT 2
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: NEG
63290: PUSH
63291: LD_INT 2
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63313: LD_ADDR_VAR 0 48
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 2
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63460: LD_ADDR_VAR 0 49
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: NEG
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63604: LD_ADDR_VAR 0 50
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: NEG
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 2
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 2
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63748: LD_ADDR_VAR 0 51
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63895: LD_ADDR_VAR 0 52
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: NEG
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: LD_INT 2
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64046: LD_ADDR_VAR 0 53
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 2
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: LD_INT 2
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 2
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64276: LD_ADDR_VAR 0 54
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: LD_INT 2
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 2
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: NEG
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64506: LD_ADDR_VAR 0 55
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: LD_INT 2
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 2
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: LD_INT 2
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: LD_INT 2
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64736: LD_ADDR_VAR 0 56
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: LD_INT 2
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 2
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: NEG
64936: PUSH
64937: LD_INT 2
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64966: LD_ADDR_VAR 0 57
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: LD_INT 2
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 2
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: NEG
65166: PUSH
65167: LD_INT 2
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65196: LD_ADDR_VAR 0 58
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: NEG
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 1
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: LD_INT 1
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: LD_INT 2
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: LD_INT 2
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: LD_INT 2
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: NEG
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 2
65395: NEG
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65426: LD_ADDR_VAR 0 59
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 1
65484: NEG
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65514: LD_ADDR_VAR 0 60
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65602: LD_ADDR_VAR 0 61
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65690: LD_ADDR_VAR 0 62
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65778: LD_ADDR_VAR 0 63
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: LD_INT 1
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65866: LD_ADDR_VAR 0 64
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 1
65924: NEG
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: ST_TO_ADDR
// end ; 1 :
65954: GO 71851
65956: LD_INT 1
65958: DOUBLE
65959: EQUAL
65960: IFTRUE 65964
65962: GO 68587
65964: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65965: LD_ADDR_VAR 0 11
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66009: LD_ADDR_VAR 0 12
66013: PUSH
66014: LD_INT 2
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66050: LD_ADDR_VAR 0 13
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: LD_INT 2
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 3
66067: PUSH
66068: LD_INT 3
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: LD_INT 3
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66090: LD_ADDR_VAR 0 14
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: LD_INT 3
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: LD_INT 3
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66131: LD_ADDR_VAR 0 15
66135: PUSH
66136: LD_INT 2
66138: NEG
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 3
66149: NEG
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66175: LD_ADDR_VAR 0 16
66179: PUSH
66180: LD_INT 2
66182: NEG
66183: PUSH
66184: LD_INT 3
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 3
66194: NEG
66195: PUSH
66196: LD_INT 2
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: LD_INT 3
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66221: LD_ADDR_VAR 0 17
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: PUSH
66230: LD_INT 3
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: LD_INT 3
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66265: LD_ADDR_VAR 0 18
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 3
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: LIST
66305: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66306: LD_ADDR_VAR 0 19
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: LD_INT 2
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: LD_INT 3
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66346: LD_ADDR_VAR 0 20
66350: PUSH
66351: LD_INT 1
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: LD_INT 3
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 1
66373: NEG
66374: PUSH
66375: LD_INT 2
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66387: LD_ADDR_VAR 0 21
66391: PUSH
66392: LD_INT 2
66394: NEG
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: NEG
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: LIST
66430: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66431: LD_ADDR_VAR 0 22
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: LD_INT 3
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 3
66450: NEG
66451: PUSH
66452: LD_INT 2
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 3
66462: NEG
66463: PUSH
66464: LD_INT 3
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: LIST
66476: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66477: LD_ADDR_VAR 0 23
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: LD_INT 3
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: LD_INT 4
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66521: LD_ADDR_VAR 0 24
66525: PUSH
66526: LD_INT 3
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 3
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 4
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66562: LD_ADDR_VAR 0 25
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 4
66579: PUSH
66580: LD_INT 3
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: LD_INT 4
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: LIST
66601: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66602: LD_ADDR_VAR 0 26
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: LD_INT 3
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: LD_INT 4
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: LD_INT 3
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66643: LD_ADDR_VAR 0 27
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 4
66672: NEG
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: LIST
66686: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66687: LD_ADDR_VAR 0 28
66691: PUSH
66692: LD_INT 3
66694: NEG
66695: PUSH
66696: LD_INT 3
66698: NEG
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 3
66706: NEG
66707: PUSH
66708: LD_INT 4
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 4
66718: NEG
66719: PUSH
66720: LD_INT 3
66722: NEG
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: LIST
66732: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66733: LD_ADDR_VAR 0 29
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: LD_INT 3
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: LD_INT 3
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 1
66763: PUSH
66764: LD_INT 2
66766: NEG
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 1
66774: NEG
66775: PUSH
66776: LD_INT 4
66778: NEG
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: LD_INT 4
66789: NEG
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: LD_INT 3
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 1
66808: NEG
66809: PUSH
66810: LD_INT 5
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 0
66820: PUSH
66821: LD_INT 5
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: PUSH
66832: LD_INT 4
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: LD_INT 6
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 6
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: LD_INT 5
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66888: LD_ADDR_VAR 0 30
66892: PUSH
66893: LD_INT 2
66895: PUSH
66896: LD_INT 1
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 3
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 3
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 3
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 4
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 4
66947: PUSH
66948: LD_INT 1
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 4
66957: PUSH
66958: LD_INT 1
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 5
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 5
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 5
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 6
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 6
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67031: LD_ADDR_VAR 0 31
67035: PUSH
67036: LD_INT 3
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 3
67048: PUSH
67049: LD_INT 3
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 2
67058: PUSH
67059: LD_INT 3
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 4
67068: PUSH
67069: LD_INT 3
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 4
67078: PUSH
67079: LD_INT 4
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 3
67088: PUSH
67089: LD_INT 4
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 5
67098: PUSH
67099: LD_INT 4
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 5
67108: PUSH
67109: LD_INT 5
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 4
67118: PUSH
67119: LD_INT 5
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 6
67128: PUSH
67129: LD_INT 5
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 6
67138: PUSH
67139: LD_INT 6
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 5
67148: PUSH
67149: LD_INT 6
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67170: LD_ADDR_VAR 0 32
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: LD_INT 3
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_INT 3
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: LD_INT 2
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: LD_INT 4
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: LD_INT 4
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: LD_INT 3
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: PUSH
67240: LD_INT 5
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: LD_INT 5
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: LD_INT 4
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: LD_INT 6
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: LD_INT 6
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: LD_INT 5
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67313: LD_ADDR_VAR 0 33
67317: PUSH
67318: LD_INT 2
67320: NEG
67321: PUSH
67322: LD_INT 1
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 3
67331: NEG
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 3
67342: NEG
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 3
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 4
67365: NEG
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 4
67376: NEG
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 4
67388: NEG
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 5
67399: NEG
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 5
67410: NEG
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 5
67422: NEG
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 6
67433: NEG
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 6
67444: NEG
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67468: LD_ADDR_VAR 0 34
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: LD_INT 3
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 3
67487: NEG
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 3
67499: NEG
67500: PUSH
67501: LD_INT 3
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 3
67511: NEG
67512: PUSH
67513: LD_INT 4
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 4
67523: NEG
67524: PUSH
67525: LD_INT 3
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 4
67535: NEG
67536: PUSH
67537: LD_INT 4
67539: NEG
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 4
67547: NEG
67548: PUSH
67549: LD_INT 5
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 5
67559: NEG
67560: PUSH
67561: LD_INT 4
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 5
67571: NEG
67572: PUSH
67573: LD_INT 5
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 5
67583: NEG
67584: PUSH
67585: LD_INT 6
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 6
67595: NEG
67596: PUSH
67597: LD_INT 5
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 6
67607: NEG
67608: PUSH
67609: LD_INT 6
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67631: LD_ADDR_VAR 0 41
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: LD_INT 2
67641: NEG
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 1
67649: NEG
67650: PUSH
67651: LD_INT 3
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: LD_INT 2
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: LIST
67674: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67675: LD_ADDR_VAR 0 42
67679: PUSH
67680: LD_INT 2
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 2
67692: PUSH
67693: LD_INT 1
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: LD_INT 1
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67716: LD_ADDR_VAR 0 43
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 2
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 3
67733: PUSH
67734: LD_INT 2
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 2
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: LIST
67755: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67756: LD_ADDR_VAR 0 44
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: LD_INT 2
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: LIST
67796: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67797: LD_ADDR_VAR 0 45
67801: PUSH
67802: LD_INT 2
67804: NEG
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 2
67815: NEG
67816: PUSH
67817: LD_INT 1
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 3
67826: NEG
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67841: LD_ADDR_VAR 0 46
67845: PUSH
67846: LD_INT 2
67848: NEG
67849: PUSH
67850: LD_INT 2
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 2
67860: NEG
67861: PUSH
67862: LD_INT 3
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 3
67872: NEG
67873: PUSH
67874: LD_INT 2
67876: NEG
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67887: LD_ADDR_VAR 0 47
67891: PUSH
67892: LD_INT 2
67894: NEG
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 1
67906: NEG
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67920: LD_ADDR_VAR 0 48
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: LD_INT 2
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: LD_INT 1
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67951: LD_ADDR_VAR 0 49
67955: PUSH
67956: LD_INT 3
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67980: LD_ADDR_VAR 0 50
67984: PUSH
67985: LD_INT 2
67987: PUSH
67988: LD_INT 3
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: LD_INT 3
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68009: LD_ADDR_VAR 0 51
68013: PUSH
68014: LD_INT 1
68016: NEG
68017: PUSH
68018: LD_INT 2
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 2
68027: NEG
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68040: LD_ADDR_VAR 0 52
68044: PUSH
68045: LD_INT 3
68047: NEG
68048: PUSH
68049: LD_INT 1
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 3
68059: NEG
68060: PUSH
68061: LD_INT 2
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68073: LD_ADDR_VAR 0 53
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: LD_INT 3
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: LD_INT 2
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: LIST
68116: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68117: LD_ADDR_VAR 0 54
68121: PUSH
68122: LD_INT 2
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 3
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 3
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68158: LD_ADDR_VAR 0 55
68162: PUSH
68163: LD_INT 3
68165: PUSH
68166: LD_INT 2
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: LD_INT 3
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 2
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68198: LD_ADDR_VAR 0 56
68202: PUSH
68203: LD_INT 1
68205: PUSH
68206: LD_INT 3
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: LD_INT 3
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 1
68225: NEG
68226: PUSH
68227: LD_INT 2
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: LIST
68238: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68239: LD_ADDR_VAR 0 57
68243: PUSH
68244: LD_INT 2
68246: NEG
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: NEG
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 3
68268: NEG
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68283: LD_ADDR_VAR 0 58
68287: PUSH
68288: LD_INT 2
68290: NEG
68291: PUSH
68292: LD_INT 3
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 3
68302: NEG
68303: PUSH
68304: LD_INT 2
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 3
68314: NEG
68315: PUSH
68316: LD_INT 3
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: LIST
68328: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68329: LD_ADDR_VAR 0 59
68333: PUSH
68334: LD_INT 1
68336: NEG
68337: PUSH
68338: LD_INT 2
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: LD_INT 2
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 1
68359: PUSH
68360: LD_INT 1
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68373: LD_ADDR_VAR 0 60
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: LD_INT 1
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 2
68401: PUSH
68402: LD_INT 1
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68414: LD_ADDR_VAR 0 61
68418: PUSH
68419: LD_INT 2
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: LD_INT 2
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 1
68441: PUSH
68442: LD_INT 2
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68454: LD_ADDR_VAR 0 62
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: LD_INT 2
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: NEG
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: LIST
68494: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68495: LD_ADDR_VAR 0 63
68499: PUSH
68500: LD_INT 1
68502: NEG
68503: PUSH
68504: LD_INT 1
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 2
68513: NEG
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 2
68524: NEG
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68539: LD_ADDR_VAR 0 64
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: LD_INT 2
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 2
68570: NEG
68571: PUSH
68572: LD_INT 2
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: ST_TO_ADDR
// end ; 2 :
68585: GO 71851
68587: LD_INT 2
68589: DOUBLE
68590: EQUAL
68591: IFTRUE 68595
68593: GO 71850
68595: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68596: LD_ADDR_VAR 0 29
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: LD_INT 0
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 4
68613: PUSH
68614: LD_INT 1
68616: NEG
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 5
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 5
68634: PUSH
68635: LD_INT 1
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 4
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 3
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 3
68664: PUSH
68665: LD_INT 1
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 3
68675: PUSH
68676: LD_INT 2
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 5
68686: PUSH
68687: LD_INT 2
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: PUSH
68697: LD_INT 3
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 3
68706: PUSH
68707: LD_INT 2
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 4
68716: PUSH
68717: LD_INT 3
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 4
68726: PUSH
68727: LD_INT 4
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 3
68736: PUSH
68737: LD_INT 4
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 2
68746: PUSH
68747: LD_INT 3
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 2
68756: PUSH
68757: LD_INT 2
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 4
68766: PUSH
68767: LD_INT 2
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: LD_INT 4
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 0
68796: PUSH
68797: LD_INT 3
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 1
68806: PUSH
68807: LD_INT 4
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: LD_INT 5
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: LD_INT 5
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: LD_INT 4
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: NEG
68848: PUSH
68849: LD_INT 3
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 2
68858: PUSH
68859: LD_INT 5
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 2
68868: NEG
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 3
68879: NEG
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 3
68890: NEG
68891: PUSH
68892: LD_INT 1
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 2
68902: NEG
68903: PUSH
68904: LD_INT 0
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 2
68913: NEG
68914: PUSH
68915: LD_INT 1
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 3
68924: NEG
68925: PUSH
68926: LD_INT 1
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 4
68935: NEG
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 4
68946: NEG
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 4
68958: NEG
68959: PUSH
68960: LD_INT 2
68962: NEG
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 2
68970: NEG
68971: PUSH
68972: LD_INT 2
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 4
68981: NEG
68982: PUSH
68983: LD_INT 4
68985: NEG
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 4
68993: NEG
68994: PUSH
68995: LD_INT 5
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 3
69005: NEG
69006: PUSH
69007: LD_INT 4
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 3
69017: NEG
69018: PUSH
69019: LD_INT 3
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 4
69029: NEG
69030: PUSH
69031: LD_INT 3
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 5
69041: NEG
69042: PUSH
69043: LD_INT 4
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 5
69053: NEG
69054: PUSH
69055: LD_INT 5
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: LD_INT 5
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 5
69077: NEG
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69134: LD_ADDR_VAR 0 30
69138: PUSH
69139: LD_INT 4
69141: PUSH
69142: LD_INT 4
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 4
69151: PUSH
69152: LD_INT 3
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 5
69161: PUSH
69162: LD_INT 4
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 5
69171: PUSH
69172: LD_INT 5
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 4
69181: PUSH
69182: LD_INT 5
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: LD_INT 4
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 3
69201: PUSH
69202: LD_INT 3
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 5
69211: PUSH
69212: LD_INT 3
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 3
69221: PUSH
69222: LD_INT 5
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: LD_INT 3
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 0
69241: PUSH
69242: LD_INT 2
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 1
69251: PUSH
69252: LD_INT 3
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 1
69261: PUSH
69262: LD_INT 4
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: LD_INT 4
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 1
69281: NEG
69282: PUSH
69283: LD_INT 3
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: LD_INT 2
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 2
69303: PUSH
69304: LD_INT 4
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 2
69313: NEG
69314: PUSH
69315: LD_INT 2
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 4
69324: NEG
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 4
69335: NEG
69336: PUSH
69337: LD_INT 1
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 3
69347: NEG
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: NEG
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 4
69369: NEG
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 5
69380: NEG
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 5
69391: NEG
69392: PUSH
69393: LD_INT 1
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 5
69403: NEG
69404: PUSH
69405: LD_INT 2
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: NEG
69416: PUSH
69417: LD_INT 2
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: NEG
69427: PUSH
69428: LD_INT 3
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 3
69438: NEG
69439: PUSH
69440: LD_INT 4
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 2
69450: NEG
69451: PUSH
69452: LD_INT 3
69454: NEG
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 2
69462: NEG
69463: PUSH
69464: LD_INT 2
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 3
69474: NEG
69475: PUSH
69476: LD_INT 2
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 4
69486: NEG
69487: PUSH
69488: LD_INT 3
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 4
69498: NEG
69499: PUSH
69500: LD_INT 4
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 2
69510: NEG
69511: PUSH
69512: LD_INT 4
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 4
69522: NEG
69523: PUSH
69524: LD_INT 2
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: LD_INT 4
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: LD_INT 5
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: LD_INT 4
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: LD_INT 3
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: LD_INT 3
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: LD_INT 4
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: LD_INT 5
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 2
69613: PUSH
69614: LD_INT 3
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 2
69624: NEG
69625: PUSH
69626: LD_INT 5
69628: NEG
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69681: LD_ADDR_VAR 0 31
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: LD_INT 4
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: PUSH
69709: LD_INT 4
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 1
69718: PUSH
69719: LD_INT 5
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 0
69728: PUSH
69729: LD_INT 5
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 1
69738: NEG
69739: PUSH
69740: LD_INT 4
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 2
69760: PUSH
69761: LD_INT 5
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 2
69770: NEG
69771: PUSH
69772: LD_INT 3
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 3
69781: NEG
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 3
69792: NEG
69793: PUSH
69794: LD_INT 1
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 2
69804: NEG
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: NEG
69816: PUSH
69817: LD_INT 1
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 3
69826: NEG
69827: PUSH
69828: LD_INT 1
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 4
69837: NEG
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 4
69848: NEG
69849: PUSH
69850: LD_INT 1
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 4
69860: NEG
69861: PUSH
69862: LD_INT 2
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 2
69872: NEG
69873: PUSH
69874: LD_INT 2
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 4
69883: NEG
69884: PUSH
69885: LD_INT 4
69887: NEG
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 4
69895: NEG
69896: PUSH
69897: LD_INT 5
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: NEG
69908: PUSH
69909: LD_INT 4
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: NEG
69920: PUSH
69921: LD_INT 3
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 4
69931: NEG
69932: PUSH
69933: LD_INT 3
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 5
69943: NEG
69944: PUSH
69945: LD_INT 4
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 5
69955: NEG
69956: PUSH
69957: LD_INT 5
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 3
69967: NEG
69968: PUSH
69969: LD_INT 5
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 5
69979: NEG
69980: PUSH
69981: LD_INT 3
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 0
70002: PUSH
70003: LD_INT 4
70005: NEG
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 1
70013: PUSH
70014: LD_INT 3
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: LD_INT 2
70027: NEG
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 0
70035: PUSH
70036: LD_INT 2
70038: NEG
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 1
70046: NEG
70047: PUSH
70048: LD_INT 3
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 1
70058: NEG
70059: PUSH
70060: LD_INT 4
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 2
70070: PUSH
70071: LD_INT 2
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 2
70081: NEG
70082: PUSH
70083: LD_INT 4
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 4
70093: PUSH
70094: LD_INT 0
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 4
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 5
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 5
70124: PUSH
70125: LD_INT 1
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 4
70134: PUSH
70135: LD_INT 1
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 3
70154: PUSH
70155: LD_INT 1
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 3
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 5
70176: PUSH
70177: LD_INT 2
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70231: LD_ADDR_VAR 0 32
70235: PUSH
70236: LD_INT 4
70238: NEG
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 4
70249: NEG
70250: PUSH
70251: LD_INT 1
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 3
70261: NEG
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 3
70272: NEG
70273: PUSH
70274: LD_INT 1
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 4
70283: NEG
70284: PUSH
70285: LD_INT 1
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 5
70294: NEG
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 5
70305: NEG
70306: PUSH
70307: LD_INT 1
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 5
70317: NEG
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 3
70329: NEG
70330: PUSH
70331: LD_INT 2
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 3
70340: NEG
70341: PUSH
70342: LD_INT 3
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 3
70352: NEG
70353: PUSH
70354: LD_INT 4
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 2
70364: NEG
70365: PUSH
70366: LD_INT 3
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 2
70376: NEG
70377: PUSH
70378: LD_INT 2
70380: NEG
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 3
70388: NEG
70389: PUSH
70390: LD_INT 2
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 4
70400: NEG
70401: PUSH
70402: LD_INT 3
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 4
70412: NEG
70413: PUSH
70414: LD_INT 4
70416: NEG
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 2
70424: NEG
70425: PUSH
70426: LD_INT 4
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 4
70436: NEG
70437: PUSH
70438: LD_INT 2
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: LD_INT 4
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: LD_INT 5
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 1
70470: PUSH
70471: LD_INT 4
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: LD_INT 3
70484: NEG
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 0
70492: PUSH
70493: LD_INT 3
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 1
70503: NEG
70504: PUSH
70505: LD_INT 4
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 1
70515: NEG
70516: PUSH
70517: LD_INT 5
70519: NEG
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 2
70527: PUSH
70528: LD_INT 3
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 2
70538: NEG
70539: PUSH
70540: LD_INT 5
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 3
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 3
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 4
70571: PUSH
70572: LD_INT 0
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 4
70581: PUSH
70582: LD_INT 1
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 3
70591: PUSH
70592: LD_INT 1
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 2
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 2
70611: PUSH
70612: LD_INT 1
70614: NEG
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 2
70622: PUSH
70623: LD_INT 2
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 4
70633: PUSH
70634: LD_INT 2
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 4
70643: PUSH
70644: LD_INT 4
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 4
70653: PUSH
70654: LD_INT 3
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 5
70663: PUSH
70664: LD_INT 4
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 5
70673: PUSH
70674: LD_INT 5
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 4
70683: PUSH
70684: LD_INT 5
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 3
70693: PUSH
70694: LD_INT 4
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 3
70703: PUSH
70704: LD_INT 3
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 5
70713: PUSH
70714: LD_INT 3
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 3
70723: PUSH
70724: LD_INT 5
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70778: LD_ADDR_VAR 0 33
70782: PUSH
70783: LD_INT 4
70785: NEG
70786: PUSH
70787: LD_INT 4
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 4
70797: NEG
70798: PUSH
70799: LD_INT 5
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 3
70809: NEG
70810: PUSH
70811: LD_INT 4
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 3
70821: NEG
70822: PUSH
70823: LD_INT 3
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 4
70833: NEG
70834: PUSH
70835: LD_INT 3
70837: NEG
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 5
70845: NEG
70846: PUSH
70847: LD_INT 4
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 5
70857: NEG
70858: PUSH
70859: LD_INT 5
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: LD_INT 5
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 5
70881: NEG
70882: PUSH
70883: LD_INT 3
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: LD_INT 3
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: LD_INT 4
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 1
70915: PUSH
70916: LD_INT 3
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: LD_INT 2
70929: NEG
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: LD_INT 2
70940: NEG
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: LD_INT 3
70952: NEG
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: LD_INT 4
70964: NEG
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 2
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 2
70983: NEG
70984: PUSH
70985: LD_INT 4
70987: NEG
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 4
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 4
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 5
71016: PUSH
71017: LD_INT 0
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 5
71026: PUSH
71027: LD_INT 1
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 4
71036: PUSH
71037: LD_INT 1
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 3
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 3
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 3
71067: PUSH
71068: LD_INT 2
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 5
71078: PUSH
71079: LD_INT 2
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 3
71088: PUSH
71089: LD_INT 3
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 3
71098: PUSH
71099: LD_INT 2
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 4
71108: PUSH
71109: LD_INT 3
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 4
71118: PUSH
71119: LD_INT 4
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 3
71128: PUSH
71129: LD_INT 4
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: LD_INT 3
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: LD_INT 2
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 4
71158: PUSH
71159: LD_INT 2
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: LD_INT 4
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 0
71178: PUSH
71179: LD_INT 4
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 0
71188: PUSH
71189: LD_INT 3
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 1
71198: PUSH
71199: LD_INT 4
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 1
71208: PUSH
71209: LD_INT 5
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: LD_INT 5
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 1
71228: NEG
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 1
71239: NEG
71240: PUSH
71241: LD_INT 3
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 2
71250: PUSH
71251: LD_INT 5
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 2
71260: NEG
71261: PUSH
71262: LD_INT 3
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71316: LD_ADDR_VAR 0 34
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: LD_INT 4
71326: NEG
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: LD_INT 5
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 1
71345: PUSH
71346: LD_INT 4
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 1
71356: PUSH
71357: LD_INT 3
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 0
71367: PUSH
71368: LD_INT 3
71370: NEG
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 1
71378: NEG
71379: PUSH
71380: LD_INT 4
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 1
71390: NEG
71391: PUSH
71392: LD_INT 5
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 2
71402: PUSH
71403: LD_INT 3
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 2
71413: NEG
71414: PUSH
71415: LD_INT 5
71417: NEG
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 3
71425: PUSH
71426: LD_INT 0
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 3
71435: PUSH
71436: LD_INT 1
71438: NEG
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 4
71446: PUSH
71447: LD_INT 0
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 4
71456: PUSH
71457: LD_INT 1
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 3
71466: PUSH
71467: LD_INT 1
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 2
71476: PUSH
71477: LD_INT 0
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 2
71486: PUSH
71487: LD_INT 1
71489: NEG
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 2
71497: PUSH
71498: LD_INT 2
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 4
71508: PUSH
71509: LD_INT 2
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 4
71518: PUSH
71519: LD_INT 4
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 4
71528: PUSH
71529: LD_INT 3
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 5
71538: PUSH
71539: LD_INT 4
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 5
71548: PUSH
71549: LD_INT 5
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 4
71558: PUSH
71559: LD_INT 5
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 3
71568: PUSH
71569: LD_INT 4
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 3
71578: PUSH
71579: LD_INT 3
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 5
71588: PUSH
71589: LD_INT 3
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 3
71598: PUSH
71599: LD_INT 5
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 0
71608: PUSH
71609: LD_INT 3
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 0
71618: PUSH
71619: LD_INT 2
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 1
71628: PUSH
71629: LD_INT 3
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 1
71638: PUSH
71639: LD_INT 4
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: LD_INT 4
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 1
71658: NEG
71659: PUSH
71660: LD_INT 3
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: LD_INT 2
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 2
71680: PUSH
71681: LD_INT 4
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 2
71690: NEG
71691: PUSH
71692: LD_INT 2
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 4
71701: NEG
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 4
71712: NEG
71713: PUSH
71714: LD_INT 1
71716: NEG
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 3
71724: NEG
71725: PUSH
71726: LD_INT 0
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 3
71735: NEG
71736: PUSH
71737: LD_INT 1
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 4
71746: NEG
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 5
71757: NEG
71758: PUSH
71759: LD_INT 0
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 5
71768: NEG
71769: PUSH
71770: LD_INT 1
71772: NEG
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 5
71780: NEG
71781: PUSH
71782: LD_INT 2
71784: NEG
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 3
71792: NEG
71793: PUSH
71794: LD_INT 2
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: ST_TO_ADDR
// end ; end ;
71848: GO 71851
71850: POP
// case btype of b_depot , b_warehouse :
71851: LD_VAR 0 1
71855: PUSH
71856: LD_INT 0
71858: DOUBLE
71859: EQUAL
71860: IFTRUE 71870
71862: LD_INT 1
71864: DOUBLE
71865: EQUAL
71866: IFTRUE 71870
71868: GO 72071
71870: POP
// case nation of nation_american :
71871: LD_VAR 0 5
71875: PUSH
71876: LD_INT 1
71878: DOUBLE
71879: EQUAL
71880: IFTRUE 71884
71882: GO 71940
71884: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71885: LD_ADDR_VAR 0 9
71889: PUSH
71890: LD_VAR 0 11
71894: PUSH
71895: LD_VAR 0 12
71899: PUSH
71900: LD_VAR 0 13
71904: PUSH
71905: LD_VAR 0 14
71909: PUSH
71910: LD_VAR 0 15
71914: PUSH
71915: LD_VAR 0 16
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: PUSH
71928: LD_VAR 0 4
71932: PUSH
71933: LD_INT 1
71935: PLUS
71936: ARRAY
71937: ST_TO_ADDR
71938: GO 72069
71940: LD_INT 2
71942: DOUBLE
71943: EQUAL
71944: IFTRUE 71948
71946: GO 72004
71948: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71949: LD_ADDR_VAR 0 9
71953: PUSH
71954: LD_VAR 0 17
71958: PUSH
71959: LD_VAR 0 18
71963: PUSH
71964: LD_VAR 0 19
71968: PUSH
71969: LD_VAR 0 20
71973: PUSH
71974: LD_VAR 0 21
71978: PUSH
71979: LD_VAR 0 22
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: PUSH
71992: LD_VAR 0 4
71996: PUSH
71997: LD_INT 1
71999: PLUS
72000: ARRAY
72001: ST_TO_ADDR
72002: GO 72069
72004: LD_INT 3
72006: DOUBLE
72007: EQUAL
72008: IFTRUE 72012
72010: GO 72068
72012: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72013: LD_ADDR_VAR 0 9
72017: PUSH
72018: LD_VAR 0 23
72022: PUSH
72023: LD_VAR 0 24
72027: PUSH
72028: LD_VAR 0 25
72032: PUSH
72033: LD_VAR 0 26
72037: PUSH
72038: LD_VAR 0 27
72042: PUSH
72043: LD_VAR 0 28
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: PUSH
72056: LD_VAR 0 4
72060: PUSH
72061: LD_INT 1
72063: PLUS
72064: ARRAY
72065: ST_TO_ADDR
72066: GO 72069
72068: POP
72069: GO 72624
72071: LD_INT 2
72073: DOUBLE
72074: EQUAL
72075: IFTRUE 72085
72077: LD_INT 3
72079: DOUBLE
72080: EQUAL
72081: IFTRUE 72085
72083: GO 72141
72085: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72086: LD_ADDR_VAR 0 9
72090: PUSH
72091: LD_VAR 0 29
72095: PUSH
72096: LD_VAR 0 30
72100: PUSH
72101: LD_VAR 0 31
72105: PUSH
72106: LD_VAR 0 32
72110: PUSH
72111: LD_VAR 0 33
72115: PUSH
72116: LD_VAR 0 34
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: PUSH
72129: LD_VAR 0 4
72133: PUSH
72134: LD_INT 1
72136: PLUS
72137: ARRAY
72138: ST_TO_ADDR
72139: GO 72624
72141: LD_INT 16
72143: DOUBLE
72144: EQUAL
72145: IFTRUE 72203
72147: LD_INT 17
72149: DOUBLE
72150: EQUAL
72151: IFTRUE 72203
72153: LD_INT 18
72155: DOUBLE
72156: EQUAL
72157: IFTRUE 72203
72159: LD_INT 19
72161: DOUBLE
72162: EQUAL
72163: IFTRUE 72203
72165: LD_INT 22
72167: DOUBLE
72168: EQUAL
72169: IFTRUE 72203
72171: LD_INT 20
72173: DOUBLE
72174: EQUAL
72175: IFTRUE 72203
72177: LD_INT 21
72179: DOUBLE
72180: EQUAL
72181: IFTRUE 72203
72183: LD_INT 23
72185: DOUBLE
72186: EQUAL
72187: IFTRUE 72203
72189: LD_INT 24
72191: DOUBLE
72192: EQUAL
72193: IFTRUE 72203
72195: LD_INT 25
72197: DOUBLE
72198: EQUAL
72199: IFTRUE 72203
72201: GO 72259
72203: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72204: LD_ADDR_VAR 0 9
72208: PUSH
72209: LD_VAR 0 35
72213: PUSH
72214: LD_VAR 0 36
72218: PUSH
72219: LD_VAR 0 37
72223: PUSH
72224: LD_VAR 0 38
72228: PUSH
72229: LD_VAR 0 39
72233: PUSH
72234: LD_VAR 0 40
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: PUSH
72247: LD_VAR 0 4
72251: PUSH
72252: LD_INT 1
72254: PLUS
72255: ARRAY
72256: ST_TO_ADDR
72257: GO 72624
72259: LD_INT 6
72261: DOUBLE
72262: EQUAL
72263: IFTRUE 72315
72265: LD_INT 7
72267: DOUBLE
72268: EQUAL
72269: IFTRUE 72315
72271: LD_INT 8
72273: DOUBLE
72274: EQUAL
72275: IFTRUE 72315
72277: LD_INT 13
72279: DOUBLE
72280: EQUAL
72281: IFTRUE 72315
72283: LD_INT 12
72285: DOUBLE
72286: EQUAL
72287: IFTRUE 72315
72289: LD_INT 15
72291: DOUBLE
72292: EQUAL
72293: IFTRUE 72315
72295: LD_INT 11
72297: DOUBLE
72298: EQUAL
72299: IFTRUE 72315
72301: LD_INT 14
72303: DOUBLE
72304: EQUAL
72305: IFTRUE 72315
72307: LD_INT 10
72309: DOUBLE
72310: EQUAL
72311: IFTRUE 72315
72313: GO 72371
72315: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72316: LD_ADDR_VAR 0 9
72320: PUSH
72321: LD_VAR 0 41
72325: PUSH
72326: LD_VAR 0 42
72330: PUSH
72331: LD_VAR 0 43
72335: PUSH
72336: LD_VAR 0 44
72340: PUSH
72341: LD_VAR 0 45
72345: PUSH
72346: LD_VAR 0 46
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: PUSH
72359: LD_VAR 0 4
72363: PUSH
72364: LD_INT 1
72366: PLUS
72367: ARRAY
72368: ST_TO_ADDR
72369: GO 72624
72371: LD_INT 36
72373: DOUBLE
72374: EQUAL
72375: IFTRUE 72379
72377: GO 72435
72379: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72380: LD_ADDR_VAR 0 9
72384: PUSH
72385: LD_VAR 0 47
72389: PUSH
72390: LD_VAR 0 48
72394: PUSH
72395: LD_VAR 0 49
72399: PUSH
72400: LD_VAR 0 50
72404: PUSH
72405: LD_VAR 0 51
72409: PUSH
72410: LD_VAR 0 52
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: PUSH
72423: LD_VAR 0 4
72427: PUSH
72428: LD_INT 1
72430: PLUS
72431: ARRAY
72432: ST_TO_ADDR
72433: GO 72624
72435: LD_INT 4
72437: DOUBLE
72438: EQUAL
72439: IFTRUE 72461
72441: LD_INT 5
72443: DOUBLE
72444: EQUAL
72445: IFTRUE 72461
72447: LD_INT 34
72449: DOUBLE
72450: EQUAL
72451: IFTRUE 72461
72453: LD_INT 37
72455: DOUBLE
72456: EQUAL
72457: IFTRUE 72461
72459: GO 72517
72461: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72462: LD_ADDR_VAR 0 9
72466: PUSH
72467: LD_VAR 0 53
72471: PUSH
72472: LD_VAR 0 54
72476: PUSH
72477: LD_VAR 0 55
72481: PUSH
72482: LD_VAR 0 56
72486: PUSH
72487: LD_VAR 0 57
72491: PUSH
72492: LD_VAR 0 58
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: PUSH
72505: LD_VAR 0 4
72509: PUSH
72510: LD_INT 1
72512: PLUS
72513: ARRAY
72514: ST_TO_ADDR
72515: GO 72624
72517: LD_INT 31
72519: DOUBLE
72520: EQUAL
72521: IFTRUE 72567
72523: LD_INT 32
72525: DOUBLE
72526: EQUAL
72527: IFTRUE 72567
72529: LD_INT 33
72531: DOUBLE
72532: EQUAL
72533: IFTRUE 72567
72535: LD_INT 27
72537: DOUBLE
72538: EQUAL
72539: IFTRUE 72567
72541: LD_INT 26
72543: DOUBLE
72544: EQUAL
72545: IFTRUE 72567
72547: LD_INT 28
72549: DOUBLE
72550: EQUAL
72551: IFTRUE 72567
72553: LD_INT 29
72555: DOUBLE
72556: EQUAL
72557: IFTRUE 72567
72559: LD_INT 30
72561: DOUBLE
72562: EQUAL
72563: IFTRUE 72567
72565: GO 72623
72567: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72568: LD_ADDR_VAR 0 9
72572: PUSH
72573: LD_VAR 0 59
72577: PUSH
72578: LD_VAR 0 60
72582: PUSH
72583: LD_VAR 0 61
72587: PUSH
72588: LD_VAR 0 62
72592: PUSH
72593: LD_VAR 0 63
72597: PUSH
72598: LD_VAR 0 64
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: PUSH
72611: LD_VAR 0 4
72615: PUSH
72616: LD_INT 1
72618: PLUS
72619: ARRAY
72620: ST_TO_ADDR
72621: GO 72624
72623: POP
// temp_list2 = [ ] ;
72624: LD_ADDR_VAR 0 10
72628: PUSH
72629: EMPTY
72630: ST_TO_ADDR
// for i in temp_list do
72631: LD_ADDR_VAR 0 8
72635: PUSH
72636: LD_VAR 0 9
72640: PUSH
72641: FOR_IN
72642: IFFALSE 72694
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72644: LD_ADDR_VAR 0 10
72648: PUSH
72649: LD_VAR 0 10
72653: PUSH
72654: LD_VAR 0 8
72658: PUSH
72659: LD_INT 1
72661: ARRAY
72662: PUSH
72663: LD_VAR 0 2
72667: PLUS
72668: PUSH
72669: LD_VAR 0 8
72673: PUSH
72674: LD_INT 2
72676: ARRAY
72677: PUSH
72678: LD_VAR 0 3
72682: PLUS
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: EMPTY
72689: LIST
72690: ADD
72691: ST_TO_ADDR
72692: GO 72641
72694: POP
72695: POP
// result = temp_list2 ;
72696: LD_ADDR_VAR 0 7
72700: PUSH
72701: LD_VAR 0 10
72705: ST_TO_ADDR
// end ;
72706: LD_VAR 0 7
72710: RET
// export function EnemyInRange ( unit , dist ) ; begin
72711: LD_INT 0
72713: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72714: LD_ADDR_VAR 0 3
72718: PUSH
72719: LD_VAR 0 1
72723: PPUSH
72724: CALL_OW 255
72728: PPUSH
72729: LD_VAR 0 1
72733: PPUSH
72734: CALL_OW 250
72738: PPUSH
72739: LD_VAR 0 1
72743: PPUSH
72744: CALL_OW 251
72748: PPUSH
72749: LD_VAR 0 2
72753: PPUSH
72754: CALL 46113 0 4
72758: PUSH
72759: LD_INT 4
72761: ARRAY
72762: ST_TO_ADDR
// end ;
72763: LD_VAR 0 3
72767: RET
// export function PlayerSeeMe ( unit ) ; begin
72768: LD_INT 0
72770: PPUSH
// result := See ( your_side , unit ) ;
72771: LD_ADDR_VAR 0 2
72775: PUSH
72776: LD_OWVAR 2
72780: PPUSH
72781: LD_VAR 0 1
72785: PPUSH
72786: CALL_OW 292
72790: ST_TO_ADDR
// end ;
72791: LD_VAR 0 2
72795: RET
// export function ReverseDir ( unit ) ; begin
72796: LD_INT 0
72798: PPUSH
// if not unit then
72799: LD_VAR 0 1
72803: NOT
72804: IFFALSE 72808
// exit ;
72806: GO 72831
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72808: LD_ADDR_VAR 0 2
72812: PUSH
72813: LD_VAR 0 1
72817: PPUSH
72818: CALL_OW 254
72822: PUSH
72823: LD_INT 3
72825: PLUS
72826: PUSH
72827: LD_INT 6
72829: MOD
72830: ST_TO_ADDR
// end ;
72831: LD_VAR 0 2
72835: RET
// export function ReverseArray ( array ) ; var i ; begin
72836: LD_INT 0
72838: PPUSH
72839: PPUSH
// if not array then
72840: LD_VAR 0 1
72844: NOT
72845: IFFALSE 72849
// exit ;
72847: GO 72904
// result := [ ] ;
72849: LD_ADDR_VAR 0 2
72853: PUSH
72854: EMPTY
72855: ST_TO_ADDR
// for i := array downto 1 do
72856: LD_ADDR_VAR 0 3
72860: PUSH
72861: DOUBLE
72862: LD_VAR 0 1
72866: INC
72867: ST_TO_ADDR
72868: LD_INT 1
72870: PUSH
72871: FOR_DOWNTO
72872: IFFALSE 72902
// result := Join ( result , array [ i ] ) ;
72874: LD_ADDR_VAR 0 2
72878: PUSH
72879: LD_VAR 0 2
72883: PPUSH
72884: LD_VAR 0 1
72888: PUSH
72889: LD_VAR 0 3
72893: ARRAY
72894: PPUSH
72895: CALL 77548 0 2
72899: ST_TO_ADDR
72900: GO 72871
72902: POP
72903: POP
// end ;
72904: LD_VAR 0 2
72908: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72909: LD_INT 0
72911: PPUSH
72912: PPUSH
72913: PPUSH
72914: PPUSH
72915: PPUSH
72916: PPUSH
// if not unit or not hexes then
72917: LD_VAR 0 1
72921: NOT
72922: PUSH
72923: LD_VAR 0 2
72927: NOT
72928: OR
72929: IFFALSE 72933
// exit ;
72931: GO 73056
// dist := 9999 ;
72933: LD_ADDR_VAR 0 5
72937: PUSH
72938: LD_INT 9999
72940: ST_TO_ADDR
// for i = 1 to hexes do
72941: LD_ADDR_VAR 0 4
72945: PUSH
72946: DOUBLE
72947: LD_INT 1
72949: DEC
72950: ST_TO_ADDR
72951: LD_VAR 0 2
72955: PUSH
72956: FOR_TO
72957: IFFALSE 73044
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72959: LD_ADDR_VAR 0 6
72963: PUSH
72964: LD_VAR 0 1
72968: PPUSH
72969: LD_VAR 0 2
72973: PUSH
72974: LD_VAR 0 4
72978: ARRAY
72979: PUSH
72980: LD_INT 1
72982: ARRAY
72983: PPUSH
72984: LD_VAR 0 2
72988: PUSH
72989: LD_VAR 0 4
72993: ARRAY
72994: PUSH
72995: LD_INT 2
72997: ARRAY
72998: PPUSH
72999: CALL_OW 297
73003: ST_TO_ADDR
// if tdist < dist then
73004: LD_VAR 0 6
73008: PUSH
73009: LD_VAR 0 5
73013: LESS
73014: IFFALSE 73042
// begin hex := hexes [ i ] ;
73016: LD_ADDR_VAR 0 8
73020: PUSH
73021: LD_VAR 0 2
73025: PUSH
73026: LD_VAR 0 4
73030: ARRAY
73031: ST_TO_ADDR
// dist := tdist ;
73032: LD_ADDR_VAR 0 5
73036: PUSH
73037: LD_VAR 0 6
73041: ST_TO_ADDR
// end ; end ;
73042: GO 72956
73044: POP
73045: POP
// result := hex ;
73046: LD_ADDR_VAR 0 3
73050: PUSH
73051: LD_VAR 0 8
73055: ST_TO_ADDR
// end ;
73056: LD_VAR 0 3
73060: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73061: LD_INT 0
73063: PPUSH
73064: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73065: LD_VAR 0 1
73069: NOT
73070: PUSH
73071: LD_VAR 0 1
73075: PUSH
73076: LD_INT 21
73078: PUSH
73079: LD_INT 2
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 23
73088: PUSH
73089: LD_INT 2
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PPUSH
73100: CALL_OW 69
73104: IN
73105: NOT
73106: OR
73107: IFFALSE 73111
// exit ;
73109: GO 73158
// for i = 1 to 3 do
73111: LD_ADDR_VAR 0 3
73115: PUSH
73116: DOUBLE
73117: LD_INT 1
73119: DEC
73120: ST_TO_ADDR
73121: LD_INT 3
73123: PUSH
73124: FOR_TO
73125: IFFALSE 73156
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73127: LD_VAR 0 1
73131: PPUSH
73132: CALL_OW 250
73136: PPUSH
73137: LD_VAR 0 1
73141: PPUSH
73142: CALL_OW 251
73146: PPUSH
73147: LD_INT 1
73149: PPUSH
73150: CALL_OW 453
73154: GO 73124
73156: POP
73157: POP
// end ;
73158: LD_VAR 0 2
73162: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73163: LD_INT 0
73165: PPUSH
73166: PPUSH
73167: PPUSH
73168: PPUSH
73169: PPUSH
73170: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73171: LD_VAR 0 1
73175: NOT
73176: PUSH
73177: LD_VAR 0 2
73181: NOT
73182: OR
73183: PUSH
73184: LD_VAR 0 1
73188: PPUSH
73189: CALL_OW 314
73193: OR
73194: IFFALSE 73198
// exit ;
73196: GO 73665
// if GetLives ( i ) < 250 then
73198: LD_VAR 0 4
73202: PPUSH
73203: CALL_OW 256
73207: PUSH
73208: LD_INT 250
73210: LESS
73211: IFFALSE 73224
// begin ComAutodestruct ( i ) ;
73213: LD_VAR 0 4
73217: PPUSH
73218: CALL 73061 0 1
// exit ;
73222: GO 73665
// end ; x := GetX ( enemy_unit ) ;
73224: LD_ADDR_VAR 0 7
73228: PUSH
73229: LD_VAR 0 2
73233: PPUSH
73234: CALL_OW 250
73238: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73239: LD_ADDR_VAR 0 8
73243: PUSH
73244: LD_VAR 0 2
73248: PPUSH
73249: CALL_OW 251
73253: ST_TO_ADDR
// if not x or not y then
73254: LD_VAR 0 7
73258: NOT
73259: PUSH
73260: LD_VAR 0 8
73264: NOT
73265: OR
73266: IFFALSE 73270
// exit ;
73268: GO 73665
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73270: LD_ADDR_VAR 0 6
73274: PUSH
73275: LD_VAR 0 7
73279: PPUSH
73280: LD_INT 0
73282: PPUSH
73283: LD_INT 4
73285: PPUSH
73286: CALL_OW 272
73290: PUSH
73291: LD_VAR 0 8
73295: PPUSH
73296: LD_INT 0
73298: PPUSH
73299: LD_INT 4
73301: PPUSH
73302: CALL_OW 273
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_VAR 0 7
73315: PPUSH
73316: LD_INT 1
73318: PPUSH
73319: LD_INT 4
73321: PPUSH
73322: CALL_OW 272
73326: PUSH
73327: LD_VAR 0 8
73331: PPUSH
73332: LD_INT 1
73334: PPUSH
73335: LD_INT 4
73337: PPUSH
73338: CALL_OW 273
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_VAR 0 7
73351: PPUSH
73352: LD_INT 2
73354: PPUSH
73355: LD_INT 4
73357: PPUSH
73358: CALL_OW 272
73362: PUSH
73363: LD_VAR 0 8
73367: PPUSH
73368: LD_INT 2
73370: PPUSH
73371: LD_INT 4
73373: PPUSH
73374: CALL_OW 273
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_VAR 0 7
73387: PPUSH
73388: LD_INT 3
73390: PPUSH
73391: LD_INT 4
73393: PPUSH
73394: CALL_OW 272
73398: PUSH
73399: LD_VAR 0 8
73403: PPUSH
73404: LD_INT 3
73406: PPUSH
73407: LD_INT 4
73409: PPUSH
73410: CALL_OW 273
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_VAR 0 7
73423: PPUSH
73424: LD_INT 4
73426: PPUSH
73427: LD_INT 4
73429: PPUSH
73430: CALL_OW 272
73434: PUSH
73435: LD_VAR 0 8
73439: PPUSH
73440: LD_INT 4
73442: PPUSH
73443: LD_INT 4
73445: PPUSH
73446: CALL_OW 273
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: LD_VAR 0 7
73459: PPUSH
73460: LD_INT 5
73462: PPUSH
73463: LD_INT 4
73465: PPUSH
73466: CALL_OW 272
73470: PUSH
73471: LD_VAR 0 8
73475: PPUSH
73476: LD_INT 5
73478: PPUSH
73479: LD_INT 4
73481: PPUSH
73482: CALL_OW 273
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: ST_TO_ADDR
// for i = tmp downto 1 do
73499: LD_ADDR_VAR 0 4
73503: PUSH
73504: DOUBLE
73505: LD_VAR 0 6
73509: INC
73510: ST_TO_ADDR
73511: LD_INT 1
73513: PUSH
73514: FOR_DOWNTO
73515: IFFALSE 73616
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73517: LD_VAR 0 6
73521: PUSH
73522: LD_VAR 0 4
73526: ARRAY
73527: PUSH
73528: LD_INT 1
73530: ARRAY
73531: PPUSH
73532: LD_VAR 0 6
73536: PUSH
73537: LD_VAR 0 4
73541: ARRAY
73542: PUSH
73543: LD_INT 2
73545: ARRAY
73546: PPUSH
73547: CALL_OW 488
73551: NOT
73552: PUSH
73553: LD_VAR 0 6
73557: PUSH
73558: LD_VAR 0 4
73562: ARRAY
73563: PUSH
73564: LD_INT 1
73566: ARRAY
73567: PPUSH
73568: LD_VAR 0 6
73572: PUSH
73573: LD_VAR 0 4
73577: ARRAY
73578: PUSH
73579: LD_INT 2
73581: ARRAY
73582: PPUSH
73583: CALL_OW 428
73587: PUSH
73588: LD_INT 0
73590: NONEQUAL
73591: OR
73592: IFFALSE 73614
// tmp := Delete ( tmp , i ) ;
73594: LD_ADDR_VAR 0 6
73598: PUSH
73599: LD_VAR 0 6
73603: PPUSH
73604: LD_VAR 0 4
73608: PPUSH
73609: CALL_OW 3
73613: ST_TO_ADDR
73614: GO 73514
73616: POP
73617: POP
// j := GetClosestHex ( unit , tmp ) ;
73618: LD_ADDR_VAR 0 5
73622: PUSH
73623: LD_VAR 0 1
73627: PPUSH
73628: LD_VAR 0 6
73632: PPUSH
73633: CALL 72909 0 2
73637: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73638: LD_VAR 0 1
73642: PPUSH
73643: LD_VAR 0 5
73647: PUSH
73648: LD_INT 1
73650: ARRAY
73651: PPUSH
73652: LD_VAR 0 5
73656: PUSH
73657: LD_INT 2
73659: ARRAY
73660: PPUSH
73661: CALL_OW 111
// end ;
73665: LD_VAR 0 3
73669: RET
// export function PrepareApemanSoldier ( ) ; begin
73670: LD_INT 0
73672: PPUSH
// uc_nation := 0 ;
73673: LD_ADDR_OWVAR 21
73677: PUSH
73678: LD_INT 0
73680: ST_TO_ADDR
// hc_sex := sex_male ;
73681: LD_ADDR_OWVAR 27
73685: PUSH
73686: LD_INT 1
73688: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73689: LD_ADDR_OWVAR 28
73693: PUSH
73694: LD_INT 15
73696: ST_TO_ADDR
// hc_gallery :=  ;
73697: LD_ADDR_OWVAR 33
73701: PUSH
73702: LD_STRING 
73704: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73705: LD_ADDR_OWVAR 31
73709: PUSH
73710: LD_INT 0
73712: PPUSH
73713: LD_INT 3
73715: PPUSH
73716: CALL_OW 12
73720: PUSH
73721: LD_INT 0
73723: PPUSH
73724: LD_INT 3
73726: PPUSH
73727: CALL_OW 12
73731: PUSH
73732: LD_INT 0
73734: PUSH
73735: LD_INT 0
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: ST_TO_ADDR
// end ;
73744: LD_VAR 0 1
73748: RET
// export function PrepareApemanEngineer ( ) ; begin
73749: LD_INT 0
73751: PPUSH
// uc_nation := 0 ;
73752: LD_ADDR_OWVAR 21
73756: PUSH
73757: LD_INT 0
73759: ST_TO_ADDR
// hc_sex := sex_male ;
73760: LD_ADDR_OWVAR 27
73764: PUSH
73765: LD_INT 1
73767: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73768: LD_ADDR_OWVAR 28
73772: PUSH
73773: LD_INT 16
73775: ST_TO_ADDR
// hc_gallery :=  ;
73776: LD_ADDR_OWVAR 33
73780: PUSH
73781: LD_STRING 
73783: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73784: LD_ADDR_OWVAR 31
73788: PUSH
73789: LD_INT 0
73791: PPUSH
73792: LD_INT 3
73794: PPUSH
73795: CALL_OW 12
73799: PUSH
73800: LD_INT 0
73802: PPUSH
73803: LD_INT 3
73805: PPUSH
73806: CALL_OW 12
73810: PUSH
73811: LD_INT 0
73813: PUSH
73814: LD_INT 0
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: ST_TO_ADDR
// end ;
73823: LD_VAR 0 1
73827: RET
// export function PrepareApeman ( agressivity ) ; begin
73828: LD_INT 0
73830: PPUSH
// uc_side := 0 ;
73831: LD_ADDR_OWVAR 20
73835: PUSH
73836: LD_INT 0
73838: ST_TO_ADDR
// uc_nation := 0 ;
73839: LD_ADDR_OWVAR 21
73843: PUSH
73844: LD_INT 0
73846: ST_TO_ADDR
// hc_sex := sex_male ;
73847: LD_ADDR_OWVAR 27
73851: PUSH
73852: LD_INT 1
73854: ST_TO_ADDR
// hc_class := class_apeman ;
73855: LD_ADDR_OWVAR 28
73859: PUSH
73860: LD_INT 12
73862: ST_TO_ADDR
// hc_gallery :=  ;
73863: LD_ADDR_OWVAR 33
73867: PUSH
73868: LD_STRING 
73870: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73871: LD_ADDR_OWVAR 35
73875: PUSH
73876: LD_VAR 0 1
73880: NEG
73881: PPUSH
73882: LD_VAR 0 1
73886: PPUSH
73887: CALL_OW 12
73891: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73892: LD_ADDR_OWVAR 31
73896: PUSH
73897: LD_INT 0
73899: PPUSH
73900: LD_INT 3
73902: PPUSH
73903: CALL_OW 12
73907: PUSH
73908: LD_INT 0
73910: PPUSH
73911: LD_INT 3
73913: PPUSH
73914: CALL_OW 12
73918: PUSH
73919: LD_INT 0
73921: PUSH
73922: LD_INT 0
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: ST_TO_ADDR
// end ;
73931: LD_VAR 0 2
73935: RET
// export function PrepareTiger ( agressivity ) ; begin
73936: LD_INT 0
73938: PPUSH
// uc_side := 0 ;
73939: LD_ADDR_OWVAR 20
73943: PUSH
73944: LD_INT 0
73946: ST_TO_ADDR
// uc_nation := 0 ;
73947: LD_ADDR_OWVAR 21
73951: PUSH
73952: LD_INT 0
73954: ST_TO_ADDR
// hc_class := class_tiger ;
73955: LD_ADDR_OWVAR 28
73959: PUSH
73960: LD_INT 14
73962: ST_TO_ADDR
// hc_gallery :=  ;
73963: LD_ADDR_OWVAR 33
73967: PUSH
73968: LD_STRING 
73970: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73971: LD_ADDR_OWVAR 35
73975: PUSH
73976: LD_VAR 0 1
73980: NEG
73981: PPUSH
73982: LD_VAR 0 1
73986: PPUSH
73987: CALL_OW 12
73991: ST_TO_ADDR
// end ;
73992: LD_VAR 0 2
73996: RET
// export function PrepareEnchidna ( ) ; begin
73997: LD_INT 0
73999: PPUSH
// uc_side := 0 ;
74000: LD_ADDR_OWVAR 20
74004: PUSH
74005: LD_INT 0
74007: ST_TO_ADDR
// uc_nation := 0 ;
74008: LD_ADDR_OWVAR 21
74012: PUSH
74013: LD_INT 0
74015: ST_TO_ADDR
// hc_class := class_baggie ;
74016: LD_ADDR_OWVAR 28
74020: PUSH
74021: LD_INT 13
74023: ST_TO_ADDR
// hc_gallery :=  ;
74024: LD_ADDR_OWVAR 33
74028: PUSH
74029: LD_STRING 
74031: ST_TO_ADDR
// end ;
74032: LD_VAR 0 1
74036: RET
// export function PrepareFrog ( ) ; begin
74037: LD_INT 0
74039: PPUSH
// uc_side := 0 ;
74040: LD_ADDR_OWVAR 20
74044: PUSH
74045: LD_INT 0
74047: ST_TO_ADDR
// uc_nation := 0 ;
74048: LD_ADDR_OWVAR 21
74052: PUSH
74053: LD_INT 0
74055: ST_TO_ADDR
// hc_class := class_frog ;
74056: LD_ADDR_OWVAR 28
74060: PUSH
74061: LD_INT 19
74063: ST_TO_ADDR
// hc_gallery :=  ;
74064: LD_ADDR_OWVAR 33
74068: PUSH
74069: LD_STRING 
74071: ST_TO_ADDR
// end ;
74072: LD_VAR 0 1
74076: RET
// export function PrepareFish ( ) ; begin
74077: LD_INT 0
74079: PPUSH
// uc_side := 0 ;
74080: LD_ADDR_OWVAR 20
74084: PUSH
74085: LD_INT 0
74087: ST_TO_ADDR
// uc_nation := 0 ;
74088: LD_ADDR_OWVAR 21
74092: PUSH
74093: LD_INT 0
74095: ST_TO_ADDR
// hc_class := class_fish ;
74096: LD_ADDR_OWVAR 28
74100: PUSH
74101: LD_INT 20
74103: ST_TO_ADDR
// hc_gallery :=  ;
74104: LD_ADDR_OWVAR 33
74108: PUSH
74109: LD_STRING 
74111: ST_TO_ADDR
// end ;
74112: LD_VAR 0 1
74116: RET
// export function PrepareBird ( ) ; begin
74117: LD_INT 0
74119: PPUSH
// uc_side := 0 ;
74120: LD_ADDR_OWVAR 20
74124: PUSH
74125: LD_INT 0
74127: ST_TO_ADDR
// uc_nation := 0 ;
74128: LD_ADDR_OWVAR 21
74132: PUSH
74133: LD_INT 0
74135: ST_TO_ADDR
// hc_class := class_phororhacos ;
74136: LD_ADDR_OWVAR 28
74140: PUSH
74141: LD_INT 18
74143: ST_TO_ADDR
// hc_gallery :=  ;
74144: LD_ADDR_OWVAR 33
74148: PUSH
74149: LD_STRING 
74151: ST_TO_ADDR
// end ;
74152: LD_VAR 0 1
74156: RET
// export function PrepareHorse ( ) ; begin
74157: LD_INT 0
74159: PPUSH
// uc_side := 0 ;
74160: LD_ADDR_OWVAR 20
74164: PUSH
74165: LD_INT 0
74167: ST_TO_ADDR
// uc_nation := 0 ;
74168: LD_ADDR_OWVAR 21
74172: PUSH
74173: LD_INT 0
74175: ST_TO_ADDR
// hc_class := class_horse ;
74176: LD_ADDR_OWVAR 28
74180: PUSH
74181: LD_INT 21
74183: ST_TO_ADDR
// hc_gallery :=  ;
74184: LD_ADDR_OWVAR 33
74188: PUSH
74189: LD_STRING 
74191: ST_TO_ADDR
// end ;
74192: LD_VAR 0 1
74196: RET
// export function PrepareMastodont ( ) ; begin
74197: LD_INT 0
74199: PPUSH
// uc_side := 0 ;
74200: LD_ADDR_OWVAR 20
74204: PUSH
74205: LD_INT 0
74207: ST_TO_ADDR
// uc_nation := 0 ;
74208: LD_ADDR_OWVAR 21
74212: PUSH
74213: LD_INT 0
74215: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74216: LD_ADDR_OWVAR 37
74220: PUSH
74221: LD_INT 31
74223: ST_TO_ADDR
// vc_control := control_rider ;
74224: LD_ADDR_OWVAR 38
74228: PUSH
74229: LD_INT 4
74231: ST_TO_ADDR
// end ;
74232: LD_VAR 0 1
74236: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74237: LD_INT 0
74239: PPUSH
74240: PPUSH
74241: PPUSH
// uc_side = 0 ;
74242: LD_ADDR_OWVAR 20
74246: PUSH
74247: LD_INT 0
74249: ST_TO_ADDR
// uc_nation = 0 ;
74250: LD_ADDR_OWVAR 21
74254: PUSH
74255: LD_INT 0
74257: ST_TO_ADDR
// InitHc_All ( ) ;
74258: CALL_OW 584
// InitVc ;
74262: CALL_OW 20
// if mastodonts then
74266: LD_VAR 0 6
74270: IFFALSE 74337
// for i = 1 to mastodonts do
74272: LD_ADDR_VAR 0 11
74276: PUSH
74277: DOUBLE
74278: LD_INT 1
74280: DEC
74281: ST_TO_ADDR
74282: LD_VAR 0 6
74286: PUSH
74287: FOR_TO
74288: IFFALSE 74335
// begin vc_chassis := 31 ;
74290: LD_ADDR_OWVAR 37
74294: PUSH
74295: LD_INT 31
74297: ST_TO_ADDR
// vc_control := control_rider ;
74298: LD_ADDR_OWVAR 38
74302: PUSH
74303: LD_INT 4
74305: ST_TO_ADDR
// animal := CreateVehicle ;
74306: LD_ADDR_VAR 0 12
74310: PUSH
74311: CALL_OW 45
74315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74316: LD_VAR 0 12
74320: PPUSH
74321: LD_VAR 0 8
74325: PPUSH
74326: LD_INT 0
74328: PPUSH
74329: CALL 76465 0 3
// end ;
74333: GO 74287
74335: POP
74336: POP
// if horses then
74337: LD_VAR 0 5
74341: IFFALSE 74408
// for i = 1 to horses do
74343: LD_ADDR_VAR 0 11
74347: PUSH
74348: DOUBLE
74349: LD_INT 1
74351: DEC
74352: ST_TO_ADDR
74353: LD_VAR 0 5
74357: PUSH
74358: FOR_TO
74359: IFFALSE 74406
// begin hc_class := 21 ;
74361: LD_ADDR_OWVAR 28
74365: PUSH
74366: LD_INT 21
74368: ST_TO_ADDR
// hc_gallery :=  ;
74369: LD_ADDR_OWVAR 33
74373: PUSH
74374: LD_STRING 
74376: ST_TO_ADDR
// animal := CreateHuman ;
74377: LD_ADDR_VAR 0 12
74381: PUSH
74382: CALL_OW 44
74386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74387: LD_VAR 0 12
74391: PPUSH
74392: LD_VAR 0 8
74396: PPUSH
74397: LD_INT 0
74399: PPUSH
74400: CALL 76465 0 3
// end ;
74404: GO 74358
74406: POP
74407: POP
// if birds then
74408: LD_VAR 0 1
74412: IFFALSE 74479
// for i = 1 to birds do
74414: LD_ADDR_VAR 0 11
74418: PUSH
74419: DOUBLE
74420: LD_INT 1
74422: DEC
74423: ST_TO_ADDR
74424: LD_VAR 0 1
74428: PUSH
74429: FOR_TO
74430: IFFALSE 74477
// begin hc_class = 18 ;
74432: LD_ADDR_OWVAR 28
74436: PUSH
74437: LD_INT 18
74439: ST_TO_ADDR
// hc_gallery =  ;
74440: LD_ADDR_OWVAR 33
74444: PUSH
74445: LD_STRING 
74447: ST_TO_ADDR
// animal := CreateHuman ;
74448: LD_ADDR_VAR 0 12
74452: PUSH
74453: CALL_OW 44
74457: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74458: LD_VAR 0 12
74462: PPUSH
74463: LD_VAR 0 8
74467: PPUSH
74468: LD_INT 0
74470: PPUSH
74471: CALL 76465 0 3
// end ;
74475: GO 74429
74477: POP
74478: POP
// if tigers then
74479: LD_VAR 0 2
74483: IFFALSE 74567
// for i = 1 to tigers do
74485: LD_ADDR_VAR 0 11
74489: PUSH
74490: DOUBLE
74491: LD_INT 1
74493: DEC
74494: ST_TO_ADDR
74495: LD_VAR 0 2
74499: PUSH
74500: FOR_TO
74501: IFFALSE 74565
// begin hc_class = class_tiger ;
74503: LD_ADDR_OWVAR 28
74507: PUSH
74508: LD_INT 14
74510: ST_TO_ADDR
// hc_gallery =  ;
74511: LD_ADDR_OWVAR 33
74515: PUSH
74516: LD_STRING 
74518: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74519: LD_ADDR_OWVAR 35
74523: PUSH
74524: LD_INT 7
74526: NEG
74527: PPUSH
74528: LD_INT 7
74530: PPUSH
74531: CALL_OW 12
74535: ST_TO_ADDR
// animal := CreateHuman ;
74536: LD_ADDR_VAR 0 12
74540: PUSH
74541: CALL_OW 44
74545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74546: LD_VAR 0 12
74550: PPUSH
74551: LD_VAR 0 8
74555: PPUSH
74556: LD_INT 0
74558: PPUSH
74559: CALL 76465 0 3
// end ;
74563: GO 74500
74565: POP
74566: POP
// if apemans then
74567: LD_VAR 0 3
74571: IFFALSE 74694
// for i = 1 to apemans do
74573: LD_ADDR_VAR 0 11
74577: PUSH
74578: DOUBLE
74579: LD_INT 1
74581: DEC
74582: ST_TO_ADDR
74583: LD_VAR 0 3
74587: PUSH
74588: FOR_TO
74589: IFFALSE 74692
// begin hc_class = class_apeman ;
74591: LD_ADDR_OWVAR 28
74595: PUSH
74596: LD_INT 12
74598: ST_TO_ADDR
// hc_gallery =  ;
74599: LD_ADDR_OWVAR 33
74603: PUSH
74604: LD_STRING 
74606: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74607: LD_ADDR_OWVAR 35
74611: PUSH
74612: LD_INT 2
74614: NEG
74615: PPUSH
74616: LD_INT 2
74618: PPUSH
74619: CALL_OW 12
74623: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74624: LD_ADDR_OWVAR 31
74628: PUSH
74629: LD_INT 1
74631: PPUSH
74632: LD_INT 3
74634: PPUSH
74635: CALL_OW 12
74639: PUSH
74640: LD_INT 1
74642: PPUSH
74643: LD_INT 3
74645: PPUSH
74646: CALL_OW 12
74650: PUSH
74651: LD_INT 0
74653: PUSH
74654: LD_INT 0
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: ST_TO_ADDR
// animal := CreateHuman ;
74663: LD_ADDR_VAR 0 12
74667: PUSH
74668: CALL_OW 44
74672: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74673: LD_VAR 0 12
74677: PPUSH
74678: LD_VAR 0 8
74682: PPUSH
74683: LD_INT 0
74685: PPUSH
74686: CALL 76465 0 3
// end ;
74690: GO 74588
74692: POP
74693: POP
// if enchidnas then
74694: LD_VAR 0 4
74698: IFFALSE 74765
// for i = 1 to enchidnas do
74700: LD_ADDR_VAR 0 11
74704: PUSH
74705: DOUBLE
74706: LD_INT 1
74708: DEC
74709: ST_TO_ADDR
74710: LD_VAR 0 4
74714: PUSH
74715: FOR_TO
74716: IFFALSE 74763
// begin hc_class = 13 ;
74718: LD_ADDR_OWVAR 28
74722: PUSH
74723: LD_INT 13
74725: ST_TO_ADDR
// hc_gallery =  ;
74726: LD_ADDR_OWVAR 33
74730: PUSH
74731: LD_STRING 
74733: ST_TO_ADDR
// animal := CreateHuman ;
74734: LD_ADDR_VAR 0 12
74738: PUSH
74739: CALL_OW 44
74743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74744: LD_VAR 0 12
74748: PPUSH
74749: LD_VAR 0 8
74753: PPUSH
74754: LD_INT 0
74756: PPUSH
74757: CALL 76465 0 3
// end ;
74761: GO 74715
74763: POP
74764: POP
// if fishes then
74765: LD_VAR 0 7
74769: IFFALSE 74836
// for i = 1 to fishes do
74771: LD_ADDR_VAR 0 11
74775: PUSH
74776: DOUBLE
74777: LD_INT 1
74779: DEC
74780: ST_TO_ADDR
74781: LD_VAR 0 7
74785: PUSH
74786: FOR_TO
74787: IFFALSE 74834
// begin hc_class = 20 ;
74789: LD_ADDR_OWVAR 28
74793: PUSH
74794: LD_INT 20
74796: ST_TO_ADDR
// hc_gallery =  ;
74797: LD_ADDR_OWVAR 33
74801: PUSH
74802: LD_STRING 
74804: ST_TO_ADDR
// animal := CreateHuman ;
74805: LD_ADDR_VAR 0 12
74809: PUSH
74810: CALL_OW 44
74814: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74815: LD_VAR 0 12
74819: PPUSH
74820: LD_VAR 0 9
74824: PPUSH
74825: LD_INT 0
74827: PPUSH
74828: CALL 76465 0 3
// end ;
74832: GO 74786
74834: POP
74835: POP
// end ;
74836: LD_VAR 0 10
74840: RET
// export function WantHeal ( sci , unit ) ; begin
74841: LD_INT 0
74843: PPUSH
// if GetTaskList ( sci ) > 0 then
74844: LD_VAR 0 1
74848: PPUSH
74849: CALL_OW 437
74853: PUSH
74854: LD_INT 0
74856: GREATER
74857: IFFALSE 74927
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74859: LD_VAR 0 1
74863: PPUSH
74864: CALL_OW 437
74868: PUSH
74869: LD_INT 1
74871: ARRAY
74872: PUSH
74873: LD_INT 1
74875: ARRAY
74876: PUSH
74877: LD_STRING l
74879: EQUAL
74880: PUSH
74881: LD_VAR 0 1
74885: PPUSH
74886: CALL_OW 437
74890: PUSH
74891: LD_INT 1
74893: ARRAY
74894: PUSH
74895: LD_INT 4
74897: ARRAY
74898: PUSH
74899: LD_VAR 0 2
74903: EQUAL
74904: AND
74905: IFFALSE 74917
// result := true else
74907: LD_ADDR_VAR 0 3
74911: PUSH
74912: LD_INT 1
74914: ST_TO_ADDR
74915: GO 74925
// result := false ;
74917: LD_ADDR_VAR 0 3
74921: PUSH
74922: LD_INT 0
74924: ST_TO_ADDR
// end else
74925: GO 74935
// result := false ;
74927: LD_ADDR_VAR 0 3
74931: PUSH
74932: LD_INT 0
74934: ST_TO_ADDR
// end ;
74935: LD_VAR 0 3
74939: RET
// export function HealTarget ( sci ) ; begin
74940: LD_INT 0
74942: PPUSH
// if not sci then
74943: LD_VAR 0 1
74947: NOT
74948: IFFALSE 74952
// exit ;
74950: GO 75017
// result := 0 ;
74952: LD_ADDR_VAR 0 2
74956: PUSH
74957: LD_INT 0
74959: ST_TO_ADDR
// if GetTaskList ( sci ) then
74960: LD_VAR 0 1
74964: PPUSH
74965: CALL_OW 437
74969: IFFALSE 75017
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74971: LD_VAR 0 1
74975: PPUSH
74976: CALL_OW 437
74980: PUSH
74981: LD_INT 1
74983: ARRAY
74984: PUSH
74985: LD_INT 1
74987: ARRAY
74988: PUSH
74989: LD_STRING l
74991: EQUAL
74992: IFFALSE 75017
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74994: LD_ADDR_VAR 0 2
74998: PUSH
74999: LD_VAR 0 1
75003: PPUSH
75004: CALL_OW 437
75008: PUSH
75009: LD_INT 1
75011: ARRAY
75012: PUSH
75013: LD_INT 4
75015: ARRAY
75016: ST_TO_ADDR
// end ;
75017: LD_VAR 0 2
75021: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75022: LD_INT 0
75024: PPUSH
75025: PPUSH
75026: PPUSH
75027: PPUSH
// if not base_units then
75028: LD_VAR 0 1
75032: NOT
75033: IFFALSE 75037
// exit ;
75035: GO 75124
// result := false ;
75037: LD_ADDR_VAR 0 2
75041: PUSH
75042: LD_INT 0
75044: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75045: LD_ADDR_VAR 0 5
75049: PUSH
75050: LD_VAR 0 1
75054: PPUSH
75055: LD_INT 21
75057: PUSH
75058: LD_INT 3
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: PPUSH
75065: CALL_OW 72
75069: ST_TO_ADDR
// if not tmp then
75070: LD_VAR 0 5
75074: NOT
75075: IFFALSE 75079
// exit ;
75077: GO 75124
// for i in tmp do
75079: LD_ADDR_VAR 0 3
75083: PUSH
75084: LD_VAR 0 5
75088: PUSH
75089: FOR_IN
75090: IFFALSE 75122
// begin result := EnemyInRange ( i , 22 ) ;
75092: LD_ADDR_VAR 0 2
75096: PUSH
75097: LD_VAR 0 3
75101: PPUSH
75102: LD_INT 22
75104: PPUSH
75105: CALL 72711 0 2
75109: ST_TO_ADDR
// if result then
75110: LD_VAR 0 2
75114: IFFALSE 75120
// exit ;
75116: POP
75117: POP
75118: GO 75124
// end ;
75120: GO 75089
75122: POP
75123: POP
// end ;
75124: LD_VAR 0 2
75128: RET
// export function FilterByTag ( units , tag ) ; begin
75129: LD_INT 0
75131: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75132: LD_ADDR_VAR 0 3
75136: PUSH
75137: LD_VAR 0 1
75141: PPUSH
75142: LD_INT 120
75144: PUSH
75145: LD_VAR 0 2
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PPUSH
75154: CALL_OW 72
75158: ST_TO_ADDR
// end ;
75159: LD_VAR 0 3
75163: RET
// export function IsDriver ( un ) ; begin
75164: LD_INT 0
75166: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75167: LD_ADDR_VAR 0 2
75171: PUSH
75172: LD_VAR 0 1
75176: PUSH
75177: LD_INT 55
75179: PUSH
75180: EMPTY
75181: LIST
75182: PPUSH
75183: CALL_OW 69
75187: IN
75188: ST_TO_ADDR
// end ;
75189: LD_VAR 0 2
75193: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75194: LD_INT 0
75196: PPUSH
75197: PPUSH
// list := [ ] ;
75198: LD_ADDR_VAR 0 5
75202: PUSH
75203: EMPTY
75204: ST_TO_ADDR
// case d of 0 :
75205: LD_VAR 0 3
75209: PUSH
75210: LD_INT 0
75212: DOUBLE
75213: EQUAL
75214: IFTRUE 75218
75216: GO 75351
75218: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75219: LD_ADDR_VAR 0 5
75223: PUSH
75224: LD_VAR 0 1
75228: PUSH
75229: LD_INT 4
75231: MINUS
75232: PUSH
75233: LD_VAR 0 2
75237: PUSH
75238: LD_INT 4
75240: MINUS
75241: PUSH
75242: LD_INT 2
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: LIST
75249: PUSH
75250: LD_VAR 0 1
75254: PUSH
75255: LD_INT 3
75257: MINUS
75258: PUSH
75259: LD_VAR 0 2
75263: PUSH
75264: LD_INT 1
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: LIST
75271: PUSH
75272: LD_VAR 0 1
75276: PUSH
75277: LD_INT 4
75279: PLUS
75280: PUSH
75281: LD_VAR 0 2
75285: PUSH
75286: LD_INT 4
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: LIST
75293: PUSH
75294: LD_VAR 0 1
75298: PUSH
75299: LD_INT 3
75301: PLUS
75302: PUSH
75303: LD_VAR 0 2
75307: PUSH
75308: LD_INT 3
75310: PLUS
75311: PUSH
75312: LD_INT 5
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: LIST
75319: PUSH
75320: LD_VAR 0 1
75324: PUSH
75325: LD_VAR 0 2
75329: PUSH
75330: LD_INT 4
75332: PLUS
75333: PUSH
75334: LD_INT 0
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: LIST
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: ST_TO_ADDR
// end ; 1 :
75349: GO 76049
75351: LD_INT 1
75353: DOUBLE
75354: EQUAL
75355: IFTRUE 75359
75357: GO 75492
75359: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75360: LD_ADDR_VAR 0 5
75364: PUSH
75365: LD_VAR 0 1
75369: PUSH
75370: LD_VAR 0 2
75374: PUSH
75375: LD_INT 4
75377: MINUS
75378: PUSH
75379: LD_INT 3
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: LIST
75386: PUSH
75387: LD_VAR 0 1
75391: PUSH
75392: LD_INT 3
75394: MINUS
75395: PUSH
75396: LD_VAR 0 2
75400: PUSH
75401: LD_INT 3
75403: MINUS
75404: PUSH
75405: LD_INT 2
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: LIST
75412: PUSH
75413: LD_VAR 0 1
75417: PUSH
75418: LD_INT 4
75420: MINUS
75421: PUSH
75422: LD_VAR 0 2
75426: PUSH
75427: LD_INT 1
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: LIST
75434: PUSH
75435: LD_VAR 0 1
75439: PUSH
75440: LD_VAR 0 2
75444: PUSH
75445: LD_INT 3
75447: PLUS
75448: PUSH
75449: LD_INT 0
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: LIST
75456: PUSH
75457: LD_VAR 0 1
75461: PUSH
75462: LD_INT 4
75464: PLUS
75465: PUSH
75466: LD_VAR 0 2
75470: PUSH
75471: LD_INT 4
75473: PLUS
75474: PUSH
75475: LD_INT 5
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: LIST
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: ST_TO_ADDR
// end ; 2 :
75490: GO 76049
75492: LD_INT 2
75494: DOUBLE
75495: EQUAL
75496: IFTRUE 75500
75498: GO 75629
75500: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75501: LD_ADDR_VAR 0 5
75505: PUSH
75506: LD_VAR 0 1
75510: PUSH
75511: LD_VAR 0 2
75515: PUSH
75516: LD_INT 3
75518: MINUS
75519: PUSH
75520: LD_INT 3
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: LIST
75527: PUSH
75528: LD_VAR 0 1
75532: PUSH
75533: LD_INT 4
75535: PLUS
75536: PUSH
75537: LD_VAR 0 2
75541: PUSH
75542: LD_INT 4
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: LIST
75549: PUSH
75550: LD_VAR 0 1
75554: PUSH
75555: LD_VAR 0 2
75559: PUSH
75560: LD_INT 4
75562: PLUS
75563: PUSH
75564: LD_INT 0
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: LIST
75571: PUSH
75572: LD_VAR 0 1
75576: PUSH
75577: LD_INT 3
75579: MINUS
75580: PUSH
75581: LD_VAR 0 2
75585: PUSH
75586: LD_INT 1
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: LIST
75593: PUSH
75594: LD_VAR 0 1
75598: PUSH
75599: LD_INT 4
75601: MINUS
75602: PUSH
75603: LD_VAR 0 2
75607: PUSH
75608: LD_INT 4
75610: MINUS
75611: PUSH
75612: LD_INT 2
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: LIST
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: ST_TO_ADDR
// end ; 3 :
75627: GO 76049
75629: LD_INT 3
75631: DOUBLE
75632: EQUAL
75633: IFTRUE 75637
75635: GO 75770
75637: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75638: LD_ADDR_VAR 0 5
75642: PUSH
75643: LD_VAR 0 1
75647: PUSH
75648: LD_INT 3
75650: PLUS
75651: PUSH
75652: LD_VAR 0 2
75656: PUSH
75657: LD_INT 4
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: LIST
75664: PUSH
75665: LD_VAR 0 1
75669: PUSH
75670: LD_INT 4
75672: PLUS
75673: PUSH
75674: LD_VAR 0 2
75678: PUSH
75679: LD_INT 4
75681: PLUS
75682: PUSH
75683: LD_INT 5
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: LIST
75690: PUSH
75691: LD_VAR 0 1
75695: PUSH
75696: LD_INT 4
75698: MINUS
75699: PUSH
75700: LD_VAR 0 2
75704: PUSH
75705: LD_INT 1
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: LIST
75712: PUSH
75713: LD_VAR 0 1
75717: PUSH
75718: LD_VAR 0 2
75722: PUSH
75723: LD_INT 4
75725: MINUS
75726: PUSH
75727: LD_INT 3
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: LIST
75734: PUSH
75735: LD_VAR 0 1
75739: PUSH
75740: LD_INT 3
75742: MINUS
75743: PUSH
75744: LD_VAR 0 2
75748: PUSH
75749: LD_INT 3
75751: MINUS
75752: PUSH
75753: LD_INT 2
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: LIST
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: ST_TO_ADDR
// end ; 4 :
75768: GO 76049
75770: LD_INT 4
75772: DOUBLE
75773: EQUAL
75774: IFTRUE 75778
75776: GO 75911
75778: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75779: LD_ADDR_VAR 0 5
75783: PUSH
75784: LD_VAR 0 1
75788: PUSH
75789: LD_VAR 0 2
75793: PUSH
75794: LD_INT 4
75796: PLUS
75797: PUSH
75798: LD_INT 0
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: LIST
75805: PUSH
75806: LD_VAR 0 1
75810: PUSH
75811: LD_INT 3
75813: PLUS
75814: PUSH
75815: LD_VAR 0 2
75819: PUSH
75820: LD_INT 3
75822: PLUS
75823: PUSH
75824: LD_INT 5
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: LIST
75831: PUSH
75832: LD_VAR 0 1
75836: PUSH
75837: LD_INT 4
75839: PLUS
75840: PUSH
75841: LD_VAR 0 2
75845: PUSH
75846: LD_INT 4
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: LIST
75853: PUSH
75854: LD_VAR 0 1
75858: PUSH
75859: LD_VAR 0 2
75863: PUSH
75864: LD_INT 3
75866: MINUS
75867: PUSH
75868: LD_INT 3
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: LIST
75875: PUSH
75876: LD_VAR 0 1
75880: PUSH
75881: LD_INT 4
75883: MINUS
75884: PUSH
75885: LD_VAR 0 2
75889: PUSH
75890: LD_INT 4
75892: MINUS
75893: PUSH
75894: LD_INT 2
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: ST_TO_ADDR
// end ; 5 :
75909: GO 76049
75911: LD_INT 5
75913: DOUBLE
75914: EQUAL
75915: IFTRUE 75919
75917: GO 76048
75919: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75920: LD_ADDR_VAR 0 5
75924: PUSH
75925: LD_VAR 0 1
75929: PUSH
75930: LD_INT 4
75932: MINUS
75933: PUSH
75934: LD_VAR 0 2
75938: PUSH
75939: LD_INT 1
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: LIST
75946: PUSH
75947: LD_VAR 0 1
75951: PUSH
75952: LD_VAR 0 2
75956: PUSH
75957: LD_INT 4
75959: MINUS
75960: PUSH
75961: LD_INT 3
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: LIST
75968: PUSH
75969: LD_VAR 0 1
75973: PUSH
75974: LD_INT 4
75976: PLUS
75977: PUSH
75978: LD_VAR 0 2
75982: PUSH
75983: LD_INT 4
75985: PLUS
75986: PUSH
75987: LD_INT 5
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: LIST
75994: PUSH
75995: LD_VAR 0 1
75999: PUSH
76000: LD_INT 3
76002: PLUS
76003: PUSH
76004: LD_VAR 0 2
76008: PUSH
76009: LD_INT 4
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: LIST
76016: PUSH
76017: LD_VAR 0 1
76021: PUSH
76022: LD_VAR 0 2
76026: PUSH
76027: LD_INT 3
76029: PLUS
76030: PUSH
76031: LD_INT 0
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: LIST
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: ST_TO_ADDR
// end ; end ;
76046: GO 76049
76048: POP
// result := list ;
76049: LD_ADDR_VAR 0 4
76053: PUSH
76054: LD_VAR 0 5
76058: ST_TO_ADDR
// end ;
76059: LD_VAR 0 4
76063: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76064: LD_INT 0
76066: PPUSH
76067: PPUSH
76068: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76069: LD_VAR 0 1
76073: NOT
76074: PUSH
76075: LD_VAR 0 2
76079: PUSH
76080: LD_INT 1
76082: PUSH
76083: LD_INT 2
76085: PUSH
76086: LD_INT 3
76088: PUSH
76089: LD_INT 4
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: IN
76098: NOT
76099: OR
76100: IFFALSE 76104
// exit ;
76102: GO 76187
// tmp := [ ] ;
76104: LD_ADDR_VAR 0 5
76108: PUSH
76109: EMPTY
76110: ST_TO_ADDR
// for i in units do
76111: LD_ADDR_VAR 0 4
76115: PUSH
76116: LD_VAR 0 1
76120: PUSH
76121: FOR_IN
76122: IFFALSE 76156
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76124: LD_ADDR_VAR 0 5
76128: PUSH
76129: LD_VAR 0 5
76133: PPUSH
76134: LD_VAR 0 4
76138: PPUSH
76139: LD_VAR 0 2
76143: PPUSH
76144: CALL_OW 259
76148: PPUSH
76149: CALL 77548 0 2
76153: ST_TO_ADDR
76154: GO 76121
76156: POP
76157: POP
// if not tmp then
76158: LD_VAR 0 5
76162: NOT
76163: IFFALSE 76167
// exit ;
76165: GO 76187
// result := SortListByListDesc ( units , tmp ) ;
76167: LD_ADDR_VAR 0 3
76171: PUSH
76172: LD_VAR 0 1
76176: PPUSH
76177: LD_VAR 0 5
76181: PPUSH
76182: CALL_OW 77
76186: ST_TO_ADDR
// end ;
76187: LD_VAR 0 3
76191: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76192: LD_INT 0
76194: PPUSH
76195: PPUSH
76196: PPUSH
// result := false ;
76197: LD_ADDR_VAR 0 3
76201: PUSH
76202: LD_INT 0
76204: ST_TO_ADDR
// if not building then
76205: LD_VAR 0 2
76209: NOT
76210: IFFALSE 76214
// exit ;
76212: GO 76352
// x := GetX ( building ) ;
76214: LD_ADDR_VAR 0 4
76218: PUSH
76219: LD_VAR 0 2
76223: PPUSH
76224: CALL_OW 250
76228: ST_TO_ADDR
// y := GetY ( building ) ;
76229: LD_ADDR_VAR 0 5
76233: PUSH
76234: LD_VAR 0 2
76238: PPUSH
76239: CALL_OW 251
76243: ST_TO_ADDR
// if not x or not y then
76244: LD_VAR 0 4
76248: NOT
76249: PUSH
76250: LD_VAR 0 5
76254: NOT
76255: OR
76256: IFFALSE 76260
// exit ;
76258: GO 76352
// if GetTaskList ( unit ) then
76260: LD_VAR 0 1
76264: PPUSH
76265: CALL_OW 437
76269: IFFALSE 76352
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76271: LD_STRING e
76273: PUSH
76274: LD_VAR 0 1
76278: PPUSH
76279: CALL_OW 437
76283: PUSH
76284: LD_INT 1
76286: ARRAY
76287: PUSH
76288: LD_INT 1
76290: ARRAY
76291: EQUAL
76292: PUSH
76293: LD_VAR 0 4
76297: PUSH
76298: LD_VAR 0 1
76302: PPUSH
76303: CALL_OW 437
76307: PUSH
76308: LD_INT 1
76310: ARRAY
76311: PUSH
76312: LD_INT 2
76314: ARRAY
76315: EQUAL
76316: AND
76317: PUSH
76318: LD_VAR 0 5
76322: PUSH
76323: LD_VAR 0 1
76327: PPUSH
76328: CALL_OW 437
76332: PUSH
76333: LD_INT 1
76335: ARRAY
76336: PUSH
76337: LD_INT 3
76339: ARRAY
76340: EQUAL
76341: AND
76342: IFFALSE 76352
// result := true end ;
76344: LD_ADDR_VAR 0 3
76348: PUSH
76349: LD_INT 1
76351: ST_TO_ADDR
// end ;
76352: LD_VAR 0 3
76356: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76357: LD_INT 0
76359: PPUSH
// result := false ;
76360: LD_ADDR_VAR 0 4
76364: PUSH
76365: LD_INT 0
76367: ST_TO_ADDR
// if GetTaskList ( unit ) then
76368: LD_VAR 0 1
76372: PPUSH
76373: CALL_OW 437
76377: IFFALSE 76460
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76379: LD_STRING M
76381: PUSH
76382: LD_VAR 0 1
76386: PPUSH
76387: CALL_OW 437
76391: PUSH
76392: LD_INT 1
76394: ARRAY
76395: PUSH
76396: LD_INT 1
76398: ARRAY
76399: EQUAL
76400: PUSH
76401: LD_VAR 0 2
76405: PUSH
76406: LD_VAR 0 1
76410: PPUSH
76411: CALL_OW 437
76415: PUSH
76416: LD_INT 1
76418: ARRAY
76419: PUSH
76420: LD_INT 2
76422: ARRAY
76423: EQUAL
76424: AND
76425: PUSH
76426: LD_VAR 0 3
76430: PUSH
76431: LD_VAR 0 1
76435: PPUSH
76436: CALL_OW 437
76440: PUSH
76441: LD_INT 1
76443: ARRAY
76444: PUSH
76445: LD_INT 3
76447: ARRAY
76448: EQUAL
76449: AND
76450: IFFALSE 76460
// result := true ;
76452: LD_ADDR_VAR 0 4
76456: PUSH
76457: LD_INT 1
76459: ST_TO_ADDR
// end ; end ;
76460: LD_VAR 0 4
76464: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76465: LD_INT 0
76467: PPUSH
76468: PPUSH
76469: PPUSH
76470: PPUSH
// if not unit or not area then
76471: LD_VAR 0 1
76475: NOT
76476: PUSH
76477: LD_VAR 0 2
76481: NOT
76482: OR
76483: IFFALSE 76487
// exit ;
76485: GO 76651
// tmp := AreaToList ( area , i ) ;
76487: LD_ADDR_VAR 0 6
76491: PUSH
76492: LD_VAR 0 2
76496: PPUSH
76497: LD_VAR 0 5
76501: PPUSH
76502: CALL_OW 517
76506: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76507: LD_ADDR_VAR 0 5
76511: PUSH
76512: DOUBLE
76513: LD_INT 1
76515: DEC
76516: ST_TO_ADDR
76517: LD_VAR 0 6
76521: PUSH
76522: LD_INT 1
76524: ARRAY
76525: PUSH
76526: FOR_TO
76527: IFFALSE 76649
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76529: LD_ADDR_VAR 0 7
76533: PUSH
76534: LD_VAR 0 6
76538: PUSH
76539: LD_INT 1
76541: ARRAY
76542: PUSH
76543: LD_VAR 0 5
76547: ARRAY
76548: PUSH
76549: LD_VAR 0 6
76553: PUSH
76554: LD_INT 2
76556: ARRAY
76557: PUSH
76558: LD_VAR 0 5
76562: ARRAY
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76568: LD_VAR 0 7
76572: PUSH
76573: LD_INT 1
76575: ARRAY
76576: PPUSH
76577: LD_VAR 0 7
76581: PUSH
76582: LD_INT 2
76584: ARRAY
76585: PPUSH
76586: CALL_OW 428
76590: PUSH
76591: LD_INT 0
76593: EQUAL
76594: IFFALSE 76647
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76596: LD_VAR 0 1
76600: PPUSH
76601: LD_VAR 0 7
76605: PUSH
76606: LD_INT 1
76608: ARRAY
76609: PPUSH
76610: LD_VAR 0 7
76614: PUSH
76615: LD_INT 2
76617: ARRAY
76618: PPUSH
76619: LD_VAR 0 3
76623: PPUSH
76624: CALL_OW 48
// result := IsPlaced ( unit ) ;
76628: LD_ADDR_VAR 0 4
76632: PUSH
76633: LD_VAR 0 1
76637: PPUSH
76638: CALL_OW 305
76642: ST_TO_ADDR
// exit ;
76643: POP
76644: POP
76645: GO 76651
// end ; end ;
76647: GO 76526
76649: POP
76650: POP
// end ;
76651: LD_VAR 0 4
76655: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76656: LD_INT 0
76658: PPUSH
76659: PPUSH
76660: PPUSH
// if not side or side > 8 then
76661: LD_VAR 0 1
76665: NOT
76666: PUSH
76667: LD_VAR 0 1
76671: PUSH
76672: LD_INT 8
76674: GREATER
76675: OR
76676: IFFALSE 76680
// exit ;
76678: GO 76867
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76680: LD_ADDR_VAR 0 4
76684: PUSH
76685: LD_INT 22
76687: PUSH
76688: LD_VAR 0 1
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: LD_INT 21
76699: PUSH
76700: LD_INT 3
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: PPUSH
76711: CALL_OW 69
76715: ST_TO_ADDR
// if not tmp then
76716: LD_VAR 0 4
76720: NOT
76721: IFFALSE 76725
// exit ;
76723: GO 76867
// enable_addtolog := true ;
76725: LD_ADDR_OWVAR 81
76729: PUSH
76730: LD_INT 1
76732: ST_TO_ADDR
// AddToLog ( [ ) ;
76733: LD_STRING [
76735: PPUSH
76736: CALL_OW 561
// for i in tmp do
76740: LD_ADDR_VAR 0 3
76744: PUSH
76745: LD_VAR 0 4
76749: PUSH
76750: FOR_IN
76751: IFFALSE 76858
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76753: LD_STRING [
76755: PUSH
76756: LD_VAR 0 3
76760: PPUSH
76761: CALL_OW 266
76765: STR
76766: PUSH
76767: LD_STRING , 
76769: STR
76770: PUSH
76771: LD_VAR 0 3
76775: PPUSH
76776: CALL_OW 250
76780: STR
76781: PUSH
76782: LD_STRING , 
76784: STR
76785: PUSH
76786: LD_VAR 0 3
76790: PPUSH
76791: CALL_OW 251
76795: STR
76796: PUSH
76797: LD_STRING , 
76799: STR
76800: PUSH
76801: LD_VAR 0 3
76805: PPUSH
76806: CALL_OW 254
76810: STR
76811: PUSH
76812: LD_STRING , 
76814: STR
76815: PUSH
76816: LD_VAR 0 3
76820: PPUSH
76821: LD_INT 1
76823: PPUSH
76824: CALL_OW 268
76828: STR
76829: PUSH
76830: LD_STRING , 
76832: STR
76833: PUSH
76834: LD_VAR 0 3
76838: PPUSH
76839: LD_INT 2
76841: PPUSH
76842: CALL_OW 268
76846: STR
76847: PUSH
76848: LD_STRING ],
76850: STR
76851: PPUSH
76852: CALL_OW 561
// end ;
76856: GO 76750
76858: POP
76859: POP
// AddToLog ( ]; ) ;
76860: LD_STRING ];
76862: PPUSH
76863: CALL_OW 561
// end ;
76867: LD_VAR 0 2
76871: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76872: LD_INT 0
76874: PPUSH
76875: PPUSH
76876: PPUSH
76877: PPUSH
76878: PPUSH
// if not area or not rate or not max then
76879: LD_VAR 0 1
76883: NOT
76884: PUSH
76885: LD_VAR 0 2
76889: NOT
76890: OR
76891: PUSH
76892: LD_VAR 0 4
76896: NOT
76897: OR
76898: IFFALSE 76902
// exit ;
76900: GO 77091
// while 1 do
76902: LD_INT 1
76904: IFFALSE 77091
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76906: LD_ADDR_VAR 0 9
76910: PUSH
76911: LD_VAR 0 1
76915: PPUSH
76916: LD_INT 1
76918: PPUSH
76919: CALL_OW 287
76923: PUSH
76924: LD_INT 10
76926: MUL
76927: ST_TO_ADDR
// r := rate / 10 ;
76928: LD_ADDR_VAR 0 7
76932: PUSH
76933: LD_VAR 0 2
76937: PUSH
76938: LD_INT 10
76940: DIVREAL
76941: ST_TO_ADDR
// time := 1 1$00 ;
76942: LD_ADDR_VAR 0 8
76946: PUSH
76947: LD_INT 2100
76949: ST_TO_ADDR
// if amount < min then
76950: LD_VAR 0 9
76954: PUSH
76955: LD_VAR 0 3
76959: LESS
76960: IFFALSE 76978
// r := r * 2 else
76962: LD_ADDR_VAR 0 7
76966: PUSH
76967: LD_VAR 0 7
76971: PUSH
76972: LD_INT 2
76974: MUL
76975: ST_TO_ADDR
76976: GO 77004
// if amount > max then
76978: LD_VAR 0 9
76982: PUSH
76983: LD_VAR 0 4
76987: GREATER
76988: IFFALSE 77004
// r := r / 2 ;
76990: LD_ADDR_VAR 0 7
76994: PUSH
76995: LD_VAR 0 7
76999: PUSH
77000: LD_INT 2
77002: DIVREAL
77003: ST_TO_ADDR
// time := time / r ;
77004: LD_ADDR_VAR 0 8
77008: PUSH
77009: LD_VAR 0 8
77013: PUSH
77014: LD_VAR 0 7
77018: DIVREAL
77019: ST_TO_ADDR
// if time < 0 then
77020: LD_VAR 0 8
77024: PUSH
77025: LD_INT 0
77027: LESS
77028: IFFALSE 77045
// time := time * - 1 ;
77030: LD_ADDR_VAR 0 8
77034: PUSH
77035: LD_VAR 0 8
77039: PUSH
77040: LD_INT 1
77042: NEG
77043: MUL
77044: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77045: LD_VAR 0 8
77049: PUSH
77050: LD_INT 35
77052: PPUSH
77053: LD_INT 875
77055: PPUSH
77056: CALL_OW 12
77060: PLUS
77061: PPUSH
77062: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77066: LD_INT 1
77068: PPUSH
77069: LD_INT 5
77071: PPUSH
77072: CALL_OW 12
77076: PPUSH
77077: LD_VAR 0 1
77081: PPUSH
77082: LD_INT 1
77084: PPUSH
77085: CALL_OW 55
// end ;
77089: GO 76902
// end ;
77091: LD_VAR 0 5
77095: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77096: LD_INT 0
77098: PPUSH
77099: PPUSH
77100: PPUSH
77101: PPUSH
77102: PPUSH
77103: PPUSH
77104: PPUSH
77105: PPUSH
// if not turrets or not factories then
77106: LD_VAR 0 1
77110: NOT
77111: PUSH
77112: LD_VAR 0 2
77116: NOT
77117: OR
77118: IFFALSE 77122
// exit ;
77120: GO 77429
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77122: LD_ADDR_VAR 0 10
77126: PUSH
77127: LD_INT 5
77129: PUSH
77130: LD_INT 6
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: PUSH
77137: LD_INT 2
77139: PUSH
77140: LD_INT 4
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: PUSH
77147: LD_INT 3
77149: PUSH
77150: LD_INT 5
77152: PUSH
77153: EMPTY
77154: LIST
77155: LIST
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: LIST
77161: PUSH
77162: LD_INT 24
77164: PUSH
77165: LD_INT 25
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: PUSH
77172: LD_INT 23
77174: PUSH
77175: LD_INT 27
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PUSH
77186: LD_INT 42
77188: PUSH
77189: LD_INT 43
77191: PUSH
77192: EMPTY
77193: LIST
77194: LIST
77195: PUSH
77196: LD_INT 44
77198: PUSH
77199: LD_INT 46
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 45
77208: PUSH
77209: LD_INT 47
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: LIST
77220: PUSH
77221: EMPTY
77222: LIST
77223: LIST
77224: LIST
77225: ST_TO_ADDR
// result := [ ] ;
77226: LD_ADDR_VAR 0 3
77230: PUSH
77231: EMPTY
77232: ST_TO_ADDR
// for i in turrets do
77233: LD_ADDR_VAR 0 4
77237: PUSH
77238: LD_VAR 0 1
77242: PUSH
77243: FOR_IN
77244: IFFALSE 77427
// begin nat := GetNation ( i ) ;
77246: LD_ADDR_VAR 0 7
77250: PUSH
77251: LD_VAR 0 4
77255: PPUSH
77256: CALL_OW 248
77260: ST_TO_ADDR
// weapon := 0 ;
77261: LD_ADDR_VAR 0 8
77265: PUSH
77266: LD_INT 0
77268: ST_TO_ADDR
// if not nat then
77269: LD_VAR 0 7
77273: NOT
77274: IFFALSE 77278
// continue ;
77276: GO 77243
// for j in list [ nat ] do
77278: LD_ADDR_VAR 0 5
77282: PUSH
77283: LD_VAR 0 10
77287: PUSH
77288: LD_VAR 0 7
77292: ARRAY
77293: PUSH
77294: FOR_IN
77295: IFFALSE 77336
// if GetBWeapon ( i ) = j [ 1 ] then
77297: LD_VAR 0 4
77301: PPUSH
77302: CALL_OW 269
77306: PUSH
77307: LD_VAR 0 5
77311: PUSH
77312: LD_INT 1
77314: ARRAY
77315: EQUAL
77316: IFFALSE 77334
// begin weapon := j [ 2 ] ;
77318: LD_ADDR_VAR 0 8
77322: PUSH
77323: LD_VAR 0 5
77327: PUSH
77328: LD_INT 2
77330: ARRAY
77331: ST_TO_ADDR
// break ;
77332: GO 77336
// end ;
77334: GO 77294
77336: POP
77337: POP
// if not weapon then
77338: LD_VAR 0 8
77342: NOT
77343: IFFALSE 77347
// continue ;
77345: GO 77243
// for k in factories do
77347: LD_ADDR_VAR 0 6
77351: PUSH
77352: LD_VAR 0 2
77356: PUSH
77357: FOR_IN
77358: IFFALSE 77423
// begin weapons := AvailableWeaponList ( k ) ;
77360: LD_ADDR_VAR 0 9
77364: PUSH
77365: LD_VAR 0 6
77369: PPUSH
77370: CALL_OW 478
77374: ST_TO_ADDR
// if not weapons then
77375: LD_VAR 0 9
77379: NOT
77380: IFFALSE 77384
// continue ;
77382: GO 77357
// if weapon in weapons then
77384: LD_VAR 0 8
77388: PUSH
77389: LD_VAR 0 9
77393: IN
77394: IFFALSE 77421
// begin result := [ i , weapon ] ;
77396: LD_ADDR_VAR 0 3
77400: PUSH
77401: LD_VAR 0 4
77405: PUSH
77406: LD_VAR 0 8
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: ST_TO_ADDR
// exit ;
77415: POP
77416: POP
77417: POP
77418: POP
77419: GO 77429
// end ; end ;
77421: GO 77357
77423: POP
77424: POP
// end ;
77425: GO 77243
77427: POP
77428: POP
// end ;
77429: LD_VAR 0 3
77433: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77434: LD_INT 0
77436: PPUSH
// if not side or side > 8 then
77437: LD_VAR 0 3
77441: NOT
77442: PUSH
77443: LD_VAR 0 3
77447: PUSH
77448: LD_INT 8
77450: GREATER
77451: OR
77452: IFFALSE 77456
// exit ;
77454: GO 77515
// if not range then
77456: LD_VAR 0 4
77460: NOT
77461: IFFALSE 77472
// range := - 12 ;
77463: LD_ADDR_VAR 0 4
77467: PUSH
77468: LD_INT 12
77470: NEG
77471: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77472: LD_VAR 0 1
77476: PPUSH
77477: LD_VAR 0 2
77481: PPUSH
77482: LD_VAR 0 3
77486: PPUSH
77487: LD_VAR 0 4
77491: PPUSH
77492: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77496: LD_VAR 0 1
77500: PPUSH
77501: LD_VAR 0 2
77505: PPUSH
77506: LD_VAR 0 3
77510: PPUSH
77511: CALL_OW 331
// end ;
77515: LD_VAR 0 5
77519: RET
// export function Video ( mode ) ; begin
77520: LD_INT 0
77522: PPUSH
// ingame_video = mode ;
77523: LD_ADDR_OWVAR 52
77527: PUSH
77528: LD_VAR 0 1
77532: ST_TO_ADDR
// interface_hidden = mode ;
77533: LD_ADDR_OWVAR 54
77537: PUSH
77538: LD_VAR 0 1
77542: ST_TO_ADDR
// end ;
77543: LD_VAR 0 2
77547: RET
// export function Join ( array , element ) ; begin
77548: LD_INT 0
77550: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77551: LD_ADDR_VAR 0 3
77555: PUSH
77556: LD_VAR 0 1
77560: PPUSH
77561: LD_VAR 0 1
77565: PUSH
77566: LD_INT 1
77568: PLUS
77569: PPUSH
77570: LD_VAR 0 2
77574: PPUSH
77575: CALL_OW 1
77579: ST_TO_ADDR
// end ;
77580: LD_VAR 0 3
77584: RET
// export function JoinUnion ( array , element ) ; begin
77585: LD_INT 0
77587: PPUSH
// result := array union element ;
77588: LD_ADDR_VAR 0 3
77592: PUSH
77593: LD_VAR 0 1
77597: PUSH
77598: LD_VAR 0 2
77602: UNION
77603: ST_TO_ADDR
// end ;
77604: LD_VAR 0 3
77608: RET
// export function GetBehemoths ( side ) ; begin
77609: LD_INT 0
77611: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77612: LD_ADDR_VAR 0 2
77616: PUSH
77617: LD_INT 22
77619: PUSH
77620: LD_VAR 0 1
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: PUSH
77629: LD_INT 31
77631: PUSH
77632: LD_INT 25
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PPUSH
77643: CALL_OW 69
77647: ST_TO_ADDR
// end ;
77648: LD_VAR 0 2
77652: RET
// export function Shuffle ( array ) ; var i , index ; begin
77653: LD_INT 0
77655: PPUSH
77656: PPUSH
77657: PPUSH
// result := [ ] ;
77658: LD_ADDR_VAR 0 2
77662: PUSH
77663: EMPTY
77664: ST_TO_ADDR
// if not array then
77665: LD_VAR 0 1
77669: NOT
77670: IFFALSE 77674
// exit ;
77672: GO 77773
// Randomize ;
77674: CALL_OW 10
// for i = array downto 1 do
77678: LD_ADDR_VAR 0 3
77682: PUSH
77683: DOUBLE
77684: LD_VAR 0 1
77688: INC
77689: ST_TO_ADDR
77690: LD_INT 1
77692: PUSH
77693: FOR_DOWNTO
77694: IFFALSE 77771
// begin index := rand ( 1 , array ) ;
77696: LD_ADDR_VAR 0 4
77700: PUSH
77701: LD_INT 1
77703: PPUSH
77704: LD_VAR 0 1
77708: PPUSH
77709: CALL_OW 12
77713: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77714: LD_ADDR_VAR 0 2
77718: PUSH
77719: LD_VAR 0 2
77723: PPUSH
77724: LD_VAR 0 2
77728: PUSH
77729: LD_INT 1
77731: PLUS
77732: PPUSH
77733: LD_VAR 0 1
77737: PUSH
77738: LD_VAR 0 4
77742: ARRAY
77743: PPUSH
77744: CALL_OW 2
77748: ST_TO_ADDR
// array := Delete ( array , index ) ;
77749: LD_ADDR_VAR 0 1
77753: PUSH
77754: LD_VAR 0 1
77758: PPUSH
77759: LD_VAR 0 4
77763: PPUSH
77764: CALL_OW 3
77768: ST_TO_ADDR
// end ;
77769: GO 77693
77771: POP
77772: POP
// end ;
77773: LD_VAR 0 2
77777: RET
// export function GetBaseMaterials ( base ) ; begin
77778: LD_INT 0
77780: PPUSH
// result := [ 0 , 0 , 0 ] ;
77781: LD_ADDR_VAR 0 2
77785: PUSH
77786: LD_INT 0
77788: PUSH
77789: LD_INT 0
77791: PUSH
77792: LD_INT 0
77794: PUSH
77795: EMPTY
77796: LIST
77797: LIST
77798: LIST
77799: ST_TO_ADDR
// if not base then
77800: LD_VAR 0 1
77804: NOT
77805: IFFALSE 77809
// exit ;
77807: GO 77858
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77809: LD_ADDR_VAR 0 2
77813: PUSH
77814: LD_VAR 0 1
77818: PPUSH
77819: LD_INT 1
77821: PPUSH
77822: CALL_OW 275
77826: PUSH
77827: LD_VAR 0 1
77831: PPUSH
77832: LD_INT 2
77834: PPUSH
77835: CALL_OW 275
77839: PUSH
77840: LD_VAR 0 1
77844: PPUSH
77845: LD_INT 3
77847: PPUSH
77848: CALL_OW 275
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: LIST
77857: ST_TO_ADDR
// end ;
77858: LD_VAR 0 2
77862: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77863: LD_INT 0
77865: PPUSH
77866: PPUSH
// result := array ;
77867: LD_ADDR_VAR 0 3
77871: PUSH
77872: LD_VAR 0 1
77876: ST_TO_ADDR
// if size >= result then
77877: LD_VAR 0 2
77881: PUSH
77882: LD_VAR 0 3
77886: GREATEREQUAL
77887: IFFALSE 77891
// exit ;
77889: GO 77941
// if size then
77891: LD_VAR 0 2
77895: IFFALSE 77941
// for i := array downto size do
77897: LD_ADDR_VAR 0 4
77901: PUSH
77902: DOUBLE
77903: LD_VAR 0 1
77907: INC
77908: ST_TO_ADDR
77909: LD_VAR 0 2
77913: PUSH
77914: FOR_DOWNTO
77915: IFFALSE 77939
// result := Delete ( result , result ) ;
77917: LD_ADDR_VAR 0 3
77921: PUSH
77922: LD_VAR 0 3
77926: PPUSH
77927: LD_VAR 0 3
77931: PPUSH
77932: CALL_OW 3
77936: ST_TO_ADDR
77937: GO 77914
77939: POP
77940: POP
// end ;
77941: LD_VAR 0 3
77945: RET
// export function ComExit ( unit ) ; var tmp ; begin
77946: LD_INT 0
77948: PPUSH
77949: PPUSH
// if not IsInUnit ( unit ) then
77950: LD_VAR 0 1
77954: PPUSH
77955: CALL_OW 310
77959: NOT
77960: IFFALSE 77964
// exit ;
77962: GO 78024
// tmp := IsInUnit ( unit ) ;
77964: LD_ADDR_VAR 0 3
77968: PUSH
77969: LD_VAR 0 1
77973: PPUSH
77974: CALL_OW 310
77978: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77979: LD_VAR 0 3
77983: PPUSH
77984: CALL_OW 247
77988: PUSH
77989: LD_INT 2
77991: EQUAL
77992: IFFALSE 78005
// ComExitVehicle ( unit ) else
77994: LD_VAR 0 1
77998: PPUSH
77999: CALL_OW 121
78003: GO 78014
// ComExitBuilding ( unit ) ;
78005: LD_VAR 0 1
78009: PPUSH
78010: CALL_OW 122
// result := tmp ;
78014: LD_ADDR_VAR 0 2
78018: PUSH
78019: LD_VAR 0 3
78023: ST_TO_ADDR
// end ;
78024: LD_VAR 0 2
78028: RET
// export function ComExitAll ( units ) ; var i ; begin
78029: LD_INT 0
78031: PPUSH
78032: PPUSH
// if not units then
78033: LD_VAR 0 1
78037: NOT
78038: IFFALSE 78042
// exit ;
78040: GO 78068
// for i in units do
78042: LD_ADDR_VAR 0 3
78046: PUSH
78047: LD_VAR 0 1
78051: PUSH
78052: FOR_IN
78053: IFFALSE 78066
// ComExit ( i ) ;
78055: LD_VAR 0 3
78059: PPUSH
78060: CALL 77946 0 1
78064: GO 78052
78066: POP
78067: POP
// end ;
78068: LD_VAR 0 2
78072: RET
// export function ResetHc ; begin
78073: LD_INT 0
78075: PPUSH
// InitHc ;
78076: CALL_OW 19
// hc_importance := 0 ;
78080: LD_ADDR_OWVAR 32
78084: PUSH
78085: LD_INT 0
78087: ST_TO_ADDR
// end ;
78088: LD_VAR 0 1
78092: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78093: LD_INT 0
78095: PPUSH
78096: PPUSH
78097: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78098: LD_ADDR_VAR 0 6
78102: PUSH
78103: LD_VAR 0 1
78107: PUSH
78108: LD_VAR 0 3
78112: PLUS
78113: PUSH
78114: LD_INT 2
78116: DIV
78117: ST_TO_ADDR
// if _x < 0 then
78118: LD_VAR 0 6
78122: PUSH
78123: LD_INT 0
78125: LESS
78126: IFFALSE 78143
// _x := _x * - 1 ;
78128: LD_ADDR_VAR 0 6
78132: PUSH
78133: LD_VAR 0 6
78137: PUSH
78138: LD_INT 1
78140: NEG
78141: MUL
78142: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78143: LD_ADDR_VAR 0 7
78147: PUSH
78148: LD_VAR 0 2
78152: PUSH
78153: LD_VAR 0 4
78157: PLUS
78158: PUSH
78159: LD_INT 2
78161: DIV
78162: ST_TO_ADDR
// if _y < 0 then
78163: LD_VAR 0 7
78167: PUSH
78168: LD_INT 0
78170: LESS
78171: IFFALSE 78188
// _y := _y * - 1 ;
78173: LD_ADDR_VAR 0 7
78177: PUSH
78178: LD_VAR 0 7
78182: PUSH
78183: LD_INT 1
78185: NEG
78186: MUL
78187: ST_TO_ADDR
// result := [ _x , _y ] ;
78188: LD_ADDR_VAR 0 5
78192: PUSH
78193: LD_VAR 0 6
78197: PUSH
78198: LD_VAR 0 7
78202: PUSH
78203: EMPTY
78204: LIST
78205: LIST
78206: ST_TO_ADDR
// end ;
78207: LD_VAR 0 5
78211: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78212: LD_INT 0
78214: PPUSH
78215: PPUSH
78216: PPUSH
78217: PPUSH
// task := GetTaskList ( unit ) ;
78218: LD_ADDR_VAR 0 7
78222: PUSH
78223: LD_VAR 0 1
78227: PPUSH
78228: CALL_OW 437
78232: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78233: LD_VAR 0 7
78237: NOT
78238: PUSH
78239: LD_VAR 0 1
78243: PPUSH
78244: LD_VAR 0 2
78248: PPUSH
78249: CALL_OW 308
78253: NOT
78254: AND
78255: IFFALSE 78259
// exit ;
78257: GO 78377
// if IsInArea ( unit , area ) then
78259: LD_VAR 0 1
78263: PPUSH
78264: LD_VAR 0 2
78268: PPUSH
78269: CALL_OW 308
78273: IFFALSE 78291
// begin ComMoveToArea ( unit , goAway ) ;
78275: LD_VAR 0 1
78279: PPUSH
78280: LD_VAR 0 3
78284: PPUSH
78285: CALL_OW 113
// exit ;
78289: GO 78377
// end ; if task [ 1 ] [ 1 ] <> M then
78291: LD_VAR 0 7
78295: PUSH
78296: LD_INT 1
78298: ARRAY
78299: PUSH
78300: LD_INT 1
78302: ARRAY
78303: PUSH
78304: LD_STRING M
78306: NONEQUAL
78307: IFFALSE 78311
// exit ;
78309: GO 78377
// x := task [ 1 ] [ 2 ] ;
78311: LD_ADDR_VAR 0 5
78315: PUSH
78316: LD_VAR 0 7
78320: PUSH
78321: LD_INT 1
78323: ARRAY
78324: PUSH
78325: LD_INT 2
78327: ARRAY
78328: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78329: LD_ADDR_VAR 0 6
78333: PUSH
78334: LD_VAR 0 7
78338: PUSH
78339: LD_INT 1
78341: ARRAY
78342: PUSH
78343: LD_INT 3
78345: ARRAY
78346: ST_TO_ADDR
// if InArea ( x , y , area ) then
78347: LD_VAR 0 5
78351: PPUSH
78352: LD_VAR 0 6
78356: PPUSH
78357: LD_VAR 0 2
78361: PPUSH
78362: CALL_OW 309
78366: IFFALSE 78377
// ComStop ( unit ) ;
78368: LD_VAR 0 1
78372: PPUSH
78373: CALL_OW 141
// end ;
78377: LD_VAR 0 4
78381: RET
// export function Abs ( value ) ; begin
78382: LD_INT 0
78384: PPUSH
// result := value ;
78385: LD_ADDR_VAR 0 2
78389: PUSH
78390: LD_VAR 0 1
78394: ST_TO_ADDR
// if value < 0 then
78395: LD_VAR 0 1
78399: PUSH
78400: LD_INT 0
78402: LESS
78403: IFFALSE 78420
// result := value * - 1 ;
78405: LD_ADDR_VAR 0 2
78409: PUSH
78410: LD_VAR 0 1
78414: PUSH
78415: LD_INT 1
78417: NEG
78418: MUL
78419: ST_TO_ADDR
// end ;
78420: LD_VAR 0 2
78424: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78425: LD_INT 0
78427: PPUSH
78428: PPUSH
78429: PPUSH
78430: PPUSH
78431: PPUSH
78432: PPUSH
78433: PPUSH
78434: PPUSH
// if not unit or not building then
78435: LD_VAR 0 1
78439: NOT
78440: PUSH
78441: LD_VAR 0 2
78445: NOT
78446: OR
78447: IFFALSE 78451
// exit ;
78449: GO 78677
// x := GetX ( building ) ;
78451: LD_ADDR_VAR 0 4
78455: PUSH
78456: LD_VAR 0 2
78460: PPUSH
78461: CALL_OW 250
78465: ST_TO_ADDR
// y := GetY ( building ) ;
78466: LD_ADDR_VAR 0 6
78470: PUSH
78471: LD_VAR 0 2
78475: PPUSH
78476: CALL_OW 251
78480: ST_TO_ADDR
// d := GetDir ( building ) ;
78481: LD_ADDR_VAR 0 8
78485: PUSH
78486: LD_VAR 0 2
78490: PPUSH
78491: CALL_OW 254
78495: ST_TO_ADDR
// r := 4 ;
78496: LD_ADDR_VAR 0 9
78500: PUSH
78501: LD_INT 4
78503: ST_TO_ADDR
// for i := 1 to 5 do
78504: LD_ADDR_VAR 0 10
78508: PUSH
78509: DOUBLE
78510: LD_INT 1
78512: DEC
78513: ST_TO_ADDR
78514: LD_INT 5
78516: PUSH
78517: FOR_TO
78518: IFFALSE 78675
// begin _x := ShiftX ( x , d , r + i ) ;
78520: LD_ADDR_VAR 0 5
78524: PUSH
78525: LD_VAR 0 4
78529: PPUSH
78530: LD_VAR 0 8
78534: PPUSH
78535: LD_VAR 0 9
78539: PUSH
78540: LD_VAR 0 10
78544: PLUS
78545: PPUSH
78546: CALL_OW 272
78550: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78551: LD_ADDR_VAR 0 7
78555: PUSH
78556: LD_VAR 0 6
78560: PPUSH
78561: LD_VAR 0 8
78565: PPUSH
78566: LD_VAR 0 9
78570: PUSH
78571: LD_VAR 0 10
78575: PLUS
78576: PPUSH
78577: CALL_OW 273
78581: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78582: LD_VAR 0 5
78586: PPUSH
78587: LD_VAR 0 7
78591: PPUSH
78592: CALL_OW 488
78596: PUSH
78597: LD_VAR 0 5
78601: PPUSH
78602: LD_VAR 0 7
78606: PPUSH
78607: CALL_OW 428
78611: PPUSH
78612: CALL_OW 247
78616: PUSH
78617: LD_INT 3
78619: PUSH
78620: LD_INT 2
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: IN
78627: NOT
78628: AND
78629: IFFALSE 78673
// begin ComMoveXY ( unit , _x , _y ) ;
78631: LD_VAR 0 1
78635: PPUSH
78636: LD_VAR 0 5
78640: PPUSH
78641: LD_VAR 0 7
78645: PPUSH
78646: CALL_OW 111
// result := [ _x , _y ] ;
78650: LD_ADDR_VAR 0 3
78654: PUSH
78655: LD_VAR 0 5
78659: PUSH
78660: LD_VAR 0 7
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: ST_TO_ADDR
// exit ;
78669: POP
78670: POP
78671: GO 78677
// end ; end ;
78673: GO 78517
78675: POP
78676: POP
// end ;
78677: LD_VAR 0 3
78681: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78682: LD_INT 0
78684: PPUSH
78685: PPUSH
78686: PPUSH
// result := 0 ;
78687: LD_ADDR_VAR 0 3
78691: PUSH
78692: LD_INT 0
78694: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78695: LD_VAR 0 1
78699: PUSH
78700: LD_INT 0
78702: LESS
78703: PUSH
78704: LD_VAR 0 1
78708: PUSH
78709: LD_INT 8
78711: GREATER
78712: OR
78713: PUSH
78714: LD_VAR 0 2
78718: PUSH
78719: LD_INT 0
78721: LESS
78722: OR
78723: PUSH
78724: LD_VAR 0 2
78728: PUSH
78729: LD_INT 8
78731: GREATER
78732: OR
78733: IFFALSE 78737
// exit ;
78735: GO 78812
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78737: LD_ADDR_VAR 0 4
78741: PUSH
78742: LD_INT 22
78744: PUSH
78745: LD_VAR 0 2
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: PPUSH
78754: CALL_OW 69
78758: PUSH
78759: FOR_IN
78760: IFFALSE 78810
// begin un := UnitShoot ( i ) ;
78762: LD_ADDR_VAR 0 5
78766: PUSH
78767: LD_VAR 0 4
78771: PPUSH
78772: CALL_OW 504
78776: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78777: LD_VAR 0 5
78781: PPUSH
78782: CALL_OW 255
78786: PUSH
78787: LD_VAR 0 1
78791: EQUAL
78792: IFFALSE 78808
// begin result := un ;
78794: LD_ADDR_VAR 0 3
78798: PUSH
78799: LD_VAR 0 5
78803: ST_TO_ADDR
// exit ;
78804: POP
78805: POP
78806: GO 78812
// end ; end ;
78808: GO 78759
78810: POP
78811: POP
// end ;
78812: LD_VAR 0 3
78816: RET
// export function GetCargoBay ( units ) ; begin
78817: LD_INT 0
78819: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78820: LD_ADDR_VAR 0 2
78824: PUSH
78825: LD_VAR 0 1
78829: PPUSH
78830: LD_INT 2
78832: PUSH
78833: LD_INT 34
78835: PUSH
78836: LD_INT 12
78838: PUSH
78839: EMPTY
78840: LIST
78841: LIST
78842: PUSH
78843: LD_INT 34
78845: PUSH
78846: LD_INT 51
78848: PUSH
78849: EMPTY
78850: LIST
78851: LIST
78852: PUSH
78853: LD_INT 34
78855: PUSH
78856: LD_INT 32
78858: PUSH
78859: EMPTY
78860: LIST
78861: LIST
78862: PUSH
78863: LD_INT 34
78865: PUSH
78866: LD_INT 89
78868: PUSH
78869: EMPTY
78870: LIST
78871: LIST
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: PPUSH
78880: CALL_OW 72
78884: ST_TO_ADDR
// end ;
78885: LD_VAR 0 2
78889: RET
// export function Negate ( value ) ; begin
78890: LD_INT 0
78892: PPUSH
// result := not value ;
78893: LD_ADDR_VAR 0 2
78897: PUSH
78898: LD_VAR 0 1
78902: NOT
78903: ST_TO_ADDR
// end ;
78904: LD_VAR 0 2
78908: RET
// export function Inc ( value ) ; begin
78909: LD_INT 0
78911: PPUSH
// result := value + 1 ;
78912: LD_ADDR_VAR 0 2
78916: PUSH
78917: LD_VAR 0 1
78921: PUSH
78922: LD_INT 1
78924: PLUS
78925: ST_TO_ADDR
// end ;
78926: LD_VAR 0 2
78930: RET
// export function Dec ( value ) ; begin
78931: LD_INT 0
78933: PPUSH
// result := value - 1 ;
78934: LD_ADDR_VAR 0 2
78938: PUSH
78939: LD_VAR 0 1
78943: PUSH
78944: LD_INT 1
78946: MINUS
78947: ST_TO_ADDR
// end ;
78948: LD_VAR 0 2
78952: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78953: LD_INT 0
78955: PPUSH
78956: PPUSH
78957: PPUSH
78958: PPUSH
78959: PPUSH
78960: PPUSH
78961: PPUSH
78962: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78963: LD_VAR 0 1
78967: PPUSH
78968: LD_VAR 0 2
78972: PPUSH
78973: CALL_OW 488
78977: NOT
78978: PUSH
78979: LD_VAR 0 3
78983: PPUSH
78984: LD_VAR 0 4
78988: PPUSH
78989: CALL_OW 488
78993: NOT
78994: OR
78995: IFFALSE 79008
// begin result := - 1 ;
78997: LD_ADDR_VAR 0 5
79001: PUSH
79002: LD_INT 1
79004: NEG
79005: ST_TO_ADDR
// exit ;
79006: GO 79243
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79008: LD_ADDR_VAR 0 12
79012: PUSH
79013: LD_VAR 0 1
79017: PPUSH
79018: LD_VAR 0 2
79022: PPUSH
79023: LD_VAR 0 3
79027: PPUSH
79028: LD_VAR 0 4
79032: PPUSH
79033: CALL 78093 0 4
79037: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79038: LD_ADDR_VAR 0 11
79042: PUSH
79043: LD_VAR 0 1
79047: PPUSH
79048: LD_VAR 0 2
79052: PPUSH
79053: LD_VAR 0 12
79057: PUSH
79058: LD_INT 1
79060: ARRAY
79061: PPUSH
79062: LD_VAR 0 12
79066: PUSH
79067: LD_INT 2
79069: ARRAY
79070: PPUSH
79071: CALL_OW 298
79075: ST_TO_ADDR
// distance := 9999 ;
79076: LD_ADDR_VAR 0 10
79080: PUSH
79081: LD_INT 9999
79083: ST_TO_ADDR
// for i := 0 to 5 do
79084: LD_ADDR_VAR 0 6
79088: PUSH
79089: DOUBLE
79090: LD_INT 0
79092: DEC
79093: ST_TO_ADDR
79094: LD_INT 5
79096: PUSH
79097: FOR_TO
79098: IFFALSE 79241
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79100: LD_ADDR_VAR 0 7
79104: PUSH
79105: LD_VAR 0 1
79109: PPUSH
79110: LD_VAR 0 6
79114: PPUSH
79115: LD_VAR 0 11
79119: PPUSH
79120: CALL_OW 272
79124: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79125: LD_ADDR_VAR 0 8
79129: PUSH
79130: LD_VAR 0 2
79134: PPUSH
79135: LD_VAR 0 6
79139: PPUSH
79140: LD_VAR 0 11
79144: PPUSH
79145: CALL_OW 273
79149: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79150: LD_VAR 0 7
79154: PPUSH
79155: LD_VAR 0 8
79159: PPUSH
79160: CALL_OW 488
79164: NOT
79165: IFFALSE 79169
// continue ;
79167: GO 79097
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79169: LD_ADDR_VAR 0 9
79173: PUSH
79174: LD_VAR 0 12
79178: PUSH
79179: LD_INT 1
79181: ARRAY
79182: PPUSH
79183: LD_VAR 0 12
79187: PUSH
79188: LD_INT 2
79190: ARRAY
79191: PPUSH
79192: LD_VAR 0 7
79196: PPUSH
79197: LD_VAR 0 8
79201: PPUSH
79202: CALL_OW 298
79206: ST_TO_ADDR
// if tmp < distance then
79207: LD_VAR 0 9
79211: PUSH
79212: LD_VAR 0 10
79216: LESS
79217: IFFALSE 79239
// begin result := i ;
79219: LD_ADDR_VAR 0 5
79223: PUSH
79224: LD_VAR 0 6
79228: ST_TO_ADDR
// distance := tmp ;
79229: LD_ADDR_VAR 0 10
79233: PUSH
79234: LD_VAR 0 9
79238: ST_TO_ADDR
// end ; end ;
79239: GO 79097
79241: POP
79242: POP
// end ;
79243: LD_VAR 0 5
79247: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79248: LD_INT 0
79250: PPUSH
79251: PPUSH
// if not driver or not IsInUnit ( driver ) then
79252: LD_VAR 0 1
79256: NOT
79257: PUSH
79258: LD_VAR 0 1
79262: PPUSH
79263: CALL_OW 310
79267: NOT
79268: OR
79269: IFFALSE 79273
// exit ;
79271: GO 79363
// vehicle := IsInUnit ( driver ) ;
79273: LD_ADDR_VAR 0 3
79277: PUSH
79278: LD_VAR 0 1
79282: PPUSH
79283: CALL_OW 310
79287: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79288: LD_VAR 0 1
79292: PPUSH
79293: LD_STRING \
79295: PUSH
79296: LD_INT 0
79298: PUSH
79299: LD_INT 0
79301: PUSH
79302: LD_INT 0
79304: PUSH
79305: LD_INT 0
79307: PUSH
79308: LD_INT 0
79310: PUSH
79311: LD_INT 0
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: PUSH
79323: LD_STRING E
79325: PUSH
79326: LD_INT 0
79328: PUSH
79329: LD_INT 0
79331: PUSH
79332: LD_VAR 0 3
79336: PUSH
79337: LD_INT 0
79339: PUSH
79340: LD_INT 0
79342: PUSH
79343: LD_INT 0
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: LIST
79352: LIST
79353: LIST
79354: PUSH
79355: EMPTY
79356: LIST
79357: LIST
79358: PPUSH
79359: CALL_OW 446
// end ;
79363: LD_VAR 0 2
79367: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79368: LD_INT 0
79370: PPUSH
79371: PPUSH
// if not driver or not IsInUnit ( driver ) then
79372: LD_VAR 0 1
79376: NOT
79377: PUSH
79378: LD_VAR 0 1
79382: PPUSH
79383: CALL_OW 310
79387: NOT
79388: OR
79389: IFFALSE 79393
// exit ;
79391: GO 79483
// vehicle := IsInUnit ( driver ) ;
79393: LD_ADDR_VAR 0 3
79397: PUSH
79398: LD_VAR 0 1
79402: PPUSH
79403: CALL_OW 310
79407: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79408: LD_VAR 0 1
79412: PPUSH
79413: LD_STRING \
79415: PUSH
79416: LD_INT 0
79418: PUSH
79419: LD_INT 0
79421: PUSH
79422: LD_INT 0
79424: PUSH
79425: LD_INT 0
79427: PUSH
79428: LD_INT 0
79430: PUSH
79431: LD_INT 0
79433: PUSH
79434: EMPTY
79435: LIST
79436: LIST
79437: LIST
79438: LIST
79439: LIST
79440: LIST
79441: LIST
79442: PUSH
79443: LD_STRING E
79445: PUSH
79446: LD_INT 0
79448: PUSH
79449: LD_INT 0
79451: PUSH
79452: LD_VAR 0 3
79456: PUSH
79457: LD_INT 0
79459: PUSH
79460: LD_INT 0
79462: PUSH
79463: LD_INT 0
79465: PUSH
79466: EMPTY
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: LIST
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PPUSH
79479: CALL_OW 447
// end ;
79483: LD_VAR 0 2
79487: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79488: LD_INT 0
79490: PPUSH
79491: PPUSH
79492: PPUSH
// tmp := [ ] ;
79493: LD_ADDR_VAR 0 5
79497: PUSH
79498: EMPTY
79499: ST_TO_ADDR
// for i in units do
79500: LD_ADDR_VAR 0 4
79504: PUSH
79505: LD_VAR 0 1
79509: PUSH
79510: FOR_IN
79511: IFFALSE 79549
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79513: LD_ADDR_VAR 0 5
79517: PUSH
79518: LD_VAR 0 5
79522: PPUSH
79523: LD_VAR 0 5
79527: PUSH
79528: LD_INT 1
79530: PLUS
79531: PPUSH
79532: LD_VAR 0 4
79536: PPUSH
79537: CALL_OW 256
79541: PPUSH
79542: CALL_OW 2
79546: ST_TO_ADDR
79547: GO 79510
79549: POP
79550: POP
// if not tmp then
79551: LD_VAR 0 5
79555: NOT
79556: IFFALSE 79560
// exit ;
79558: GO 79608
// if asc then
79560: LD_VAR 0 2
79564: IFFALSE 79588
// result := SortListByListAsc ( units , tmp ) else
79566: LD_ADDR_VAR 0 3
79570: PUSH
79571: LD_VAR 0 1
79575: PPUSH
79576: LD_VAR 0 5
79580: PPUSH
79581: CALL_OW 76
79585: ST_TO_ADDR
79586: GO 79608
// result := SortListByListDesc ( units , tmp ) ;
79588: LD_ADDR_VAR 0 3
79592: PUSH
79593: LD_VAR 0 1
79597: PPUSH
79598: LD_VAR 0 5
79602: PPUSH
79603: CALL_OW 77
79607: ST_TO_ADDR
// end ;
79608: LD_VAR 0 3
79612: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79613: LD_INT 0
79615: PPUSH
79616: PPUSH
// task := GetTaskList ( mech ) ;
79617: LD_ADDR_VAR 0 4
79621: PUSH
79622: LD_VAR 0 1
79626: PPUSH
79627: CALL_OW 437
79631: ST_TO_ADDR
// if not task then
79632: LD_VAR 0 4
79636: NOT
79637: IFFALSE 79641
// exit ;
79639: GO 79683
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79641: LD_ADDR_VAR 0 3
79645: PUSH
79646: LD_VAR 0 4
79650: PUSH
79651: LD_INT 1
79653: ARRAY
79654: PUSH
79655: LD_INT 1
79657: ARRAY
79658: PUSH
79659: LD_STRING r
79661: EQUAL
79662: PUSH
79663: LD_VAR 0 4
79667: PUSH
79668: LD_INT 1
79670: ARRAY
79671: PUSH
79672: LD_INT 4
79674: ARRAY
79675: PUSH
79676: LD_VAR 0 2
79680: EQUAL
79681: AND
79682: ST_TO_ADDR
// end ;
79683: LD_VAR 0 3
79687: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79688: LD_INT 0
79690: PPUSH
// SetDir ( unit , d ) ;
79691: LD_VAR 0 1
79695: PPUSH
79696: LD_VAR 0 4
79700: PPUSH
79701: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79705: LD_VAR 0 1
79709: PPUSH
79710: LD_VAR 0 2
79714: PPUSH
79715: LD_VAR 0 3
79719: PPUSH
79720: LD_VAR 0 5
79724: PPUSH
79725: CALL_OW 48
// end ;
79729: LD_VAR 0 6
79733: RET
// export function ToNaturalNumber ( number ) ; begin
79734: LD_INT 0
79736: PPUSH
// result := number div 1 ;
79737: LD_ADDR_VAR 0 2
79741: PUSH
79742: LD_VAR 0 1
79746: PUSH
79747: LD_INT 1
79749: DIV
79750: ST_TO_ADDR
// if number < 0 then
79751: LD_VAR 0 1
79755: PUSH
79756: LD_INT 0
79758: LESS
79759: IFFALSE 79769
// result := 0 ;
79761: LD_ADDR_VAR 0 2
79765: PUSH
79766: LD_INT 0
79768: ST_TO_ADDR
// end ;
79769: LD_VAR 0 2
79773: RET
// export function SortByClass ( units , class ) ; var un ; begin
79774: LD_INT 0
79776: PPUSH
79777: PPUSH
// if not units or not class then
79778: LD_VAR 0 1
79782: NOT
79783: PUSH
79784: LD_VAR 0 2
79788: NOT
79789: OR
79790: IFFALSE 79794
// exit ;
79792: GO 79889
// result := [ ] ;
79794: LD_ADDR_VAR 0 3
79798: PUSH
79799: EMPTY
79800: ST_TO_ADDR
// for un in units do
79801: LD_ADDR_VAR 0 4
79805: PUSH
79806: LD_VAR 0 1
79810: PUSH
79811: FOR_IN
79812: IFFALSE 79887
// if GetClass ( un ) = class then
79814: LD_VAR 0 4
79818: PPUSH
79819: CALL_OW 257
79823: PUSH
79824: LD_VAR 0 2
79828: EQUAL
79829: IFFALSE 79856
// result := Insert ( result , 1 , un ) else
79831: LD_ADDR_VAR 0 3
79835: PUSH
79836: LD_VAR 0 3
79840: PPUSH
79841: LD_INT 1
79843: PPUSH
79844: LD_VAR 0 4
79848: PPUSH
79849: CALL_OW 2
79853: ST_TO_ADDR
79854: GO 79885
// result := Replace ( result , result + 1 , un ) ;
79856: LD_ADDR_VAR 0 3
79860: PUSH
79861: LD_VAR 0 3
79865: PPUSH
79866: LD_VAR 0 3
79870: PUSH
79871: LD_INT 1
79873: PLUS
79874: PPUSH
79875: LD_VAR 0 4
79879: PPUSH
79880: CALL_OW 1
79884: ST_TO_ADDR
79885: GO 79811
79887: POP
79888: POP
// end ;
79889: LD_VAR 0 3
79893: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79894: LD_INT 0
79896: PPUSH
79897: PPUSH
79898: PPUSH
79899: PPUSH
79900: PPUSH
79901: PPUSH
79902: PPUSH
// result := [ ] ;
79903: LD_ADDR_VAR 0 4
79907: PUSH
79908: EMPTY
79909: ST_TO_ADDR
// if x - r < 0 then
79910: LD_VAR 0 1
79914: PUSH
79915: LD_VAR 0 3
79919: MINUS
79920: PUSH
79921: LD_INT 0
79923: LESS
79924: IFFALSE 79936
// min_x := 0 else
79926: LD_ADDR_VAR 0 8
79930: PUSH
79931: LD_INT 0
79933: ST_TO_ADDR
79934: GO 79952
// min_x := x - r ;
79936: LD_ADDR_VAR 0 8
79940: PUSH
79941: LD_VAR 0 1
79945: PUSH
79946: LD_VAR 0 3
79950: MINUS
79951: ST_TO_ADDR
// if y - r < 0 then
79952: LD_VAR 0 2
79956: PUSH
79957: LD_VAR 0 3
79961: MINUS
79962: PUSH
79963: LD_INT 0
79965: LESS
79966: IFFALSE 79978
// min_y := 0 else
79968: LD_ADDR_VAR 0 7
79972: PUSH
79973: LD_INT 0
79975: ST_TO_ADDR
79976: GO 79994
// min_y := y - r ;
79978: LD_ADDR_VAR 0 7
79982: PUSH
79983: LD_VAR 0 2
79987: PUSH
79988: LD_VAR 0 3
79992: MINUS
79993: ST_TO_ADDR
// max_x := x + r ;
79994: LD_ADDR_VAR 0 9
79998: PUSH
79999: LD_VAR 0 1
80003: PUSH
80004: LD_VAR 0 3
80008: PLUS
80009: ST_TO_ADDR
// max_y := y + r ;
80010: LD_ADDR_VAR 0 10
80014: PUSH
80015: LD_VAR 0 2
80019: PUSH
80020: LD_VAR 0 3
80024: PLUS
80025: ST_TO_ADDR
// for _x = min_x to max_x do
80026: LD_ADDR_VAR 0 5
80030: PUSH
80031: DOUBLE
80032: LD_VAR 0 8
80036: DEC
80037: ST_TO_ADDR
80038: LD_VAR 0 9
80042: PUSH
80043: FOR_TO
80044: IFFALSE 80145
// for _y = min_y to max_y do
80046: LD_ADDR_VAR 0 6
80050: PUSH
80051: DOUBLE
80052: LD_VAR 0 7
80056: DEC
80057: ST_TO_ADDR
80058: LD_VAR 0 10
80062: PUSH
80063: FOR_TO
80064: IFFALSE 80141
// begin if not ValidHex ( _x , _y ) then
80066: LD_VAR 0 5
80070: PPUSH
80071: LD_VAR 0 6
80075: PPUSH
80076: CALL_OW 488
80080: NOT
80081: IFFALSE 80085
// continue ;
80083: GO 80063
// if GetResourceTypeXY ( _x , _y ) then
80085: LD_VAR 0 5
80089: PPUSH
80090: LD_VAR 0 6
80094: PPUSH
80095: CALL_OW 283
80099: IFFALSE 80139
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80101: LD_ADDR_VAR 0 4
80105: PUSH
80106: LD_VAR 0 4
80110: PPUSH
80111: LD_VAR 0 4
80115: PUSH
80116: LD_INT 1
80118: PLUS
80119: PPUSH
80120: LD_VAR 0 5
80124: PUSH
80125: LD_VAR 0 6
80129: PUSH
80130: EMPTY
80131: LIST
80132: LIST
80133: PPUSH
80134: CALL_OW 1
80138: ST_TO_ADDR
// end ;
80139: GO 80063
80141: POP
80142: POP
80143: GO 80043
80145: POP
80146: POP
// end ;
80147: LD_VAR 0 4
80151: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80152: LD_INT 0
80154: PPUSH
80155: PPUSH
80156: PPUSH
80157: PPUSH
80158: PPUSH
80159: PPUSH
80160: PPUSH
80161: PPUSH
// if not units then
80162: LD_VAR 0 1
80166: NOT
80167: IFFALSE 80171
// exit ;
80169: GO 80695
// result := UnitFilter ( units , [ f_ok ] ) ;
80171: LD_ADDR_VAR 0 3
80175: PUSH
80176: LD_VAR 0 1
80180: PPUSH
80181: LD_INT 50
80183: PUSH
80184: EMPTY
80185: LIST
80186: PPUSH
80187: CALL_OW 72
80191: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80192: LD_ADDR_VAR 0 8
80196: PUSH
80197: LD_VAR 0 1
80201: PUSH
80202: LD_INT 1
80204: ARRAY
80205: PPUSH
80206: CALL_OW 255
80210: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80211: LD_ADDR_VAR 0 10
80215: PUSH
80216: LD_INT 29
80218: PUSH
80219: LD_INT 91
80221: PUSH
80222: LD_INT 49
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: LIST
80229: ST_TO_ADDR
// if not result then
80230: LD_VAR 0 3
80234: NOT
80235: IFFALSE 80239
// exit ;
80237: GO 80695
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80239: LD_ADDR_VAR 0 5
80243: PUSH
80244: LD_INT 81
80246: PUSH
80247: LD_VAR 0 8
80251: PUSH
80252: EMPTY
80253: LIST
80254: LIST
80255: PPUSH
80256: CALL_OW 69
80260: ST_TO_ADDR
// for i in result do
80261: LD_ADDR_VAR 0 4
80265: PUSH
80266: LD_VAR 0 3
80270: PUSH
80271: FOR_IN
80272: IFFALSE 80693
// begin tag := GetTag ( i ) + 1 ;
80274: LD_ADDR_VAR 0 9
80278: PUSH
80279: LD_VAR 0 4
80283: PPUSH
80284: CALL_OW 110
80288: PUSH
80289: LD_INT 1
80291: PLUS
80292: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80293: LD_ADDR_VAR 0 7
80297: PUSH
80298: LD_VAR 0 4
80302: PPUSH
80303: CALL_OW 250
80307: PPUSH
80308: LD_VAR 0 4
80312: PPUSH
80313: CALL_OW 251
80317: PPUSH
80318: LD_INT 6
80320: PPUSH
80321: CALL 79894 0 3
80325: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80326: LD_VAR 0 4
80330: PPUSH
80331: CALL_OW 247
80335: PUSH
80336: LD_INT 2
80338: EQUAL
80339: PUSH
80340: LD_VAR 0 7
80344: AND
80345: PUSH
80346: LD_VAR 0 4
80350: PPUSH
80351: CALL_OW 264
80355: PUSH
80356: LD_VAR 0 10
80360: IN
80361: NOT
80362: AND
80363: IFFALSE 80402
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80365: LD_VAR 0 4
80369: PPUSH
80370: LD_VAR 0 7
80374: PUSH
80375: LD_INT 1
80377: ARRAY
80378: PUSH
80379: LD_INT 1
80381: ARRAY
80382: PPUSH
80383: LD_VAR 0 7
80387: PUSH
80388: LD_INT 1
80390: ARRAY
80391: PUSH
80392: LD_INT 2
80394: ARRAY
80395: PPUSH
80396: CALL_OW 116
80400: GO 80691
// if path > tag then
80402: LD_VAR 0 2
80406: PUSH
80407: LD_VAR 0 9
80411: GREATER
80412: IFFALSE 80620
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80414: LD_ADDR_VAR 0 6
80418: PUSH
80419: LD_VAR 0 5
80423: PPUSH
80424: LD_INT 91
80426: PUSH
80427: LD_VAR 0 4
80431: PUSH
80432: LD_INT 8
80434: PUSH
80435: EMPTY
80436: LIST
80437: LIST
80438: LIST
80439: PPUSH
80440: CALL_OW 72
80444: ST_TO_ADDR
// if nearEnemy then
80445: LD_VAR 0 6
80449: IFFALSE 80518
// begin if GetWeapon ( i ) = ru_time_lapser then
80451: LD_VAR 0 4
80455: PPUSH
80456: CALL_OW 264
80460: PUSH
80461: LD_INT 49
80463: EQUAL
80464: IFFALSE 80492
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80466: LD_VAR 0 4
80470: PPUSH
80471: LD_VAR 0 6
80475: PPUSH
80476: LD_VAR 0 4
80480: PPUSH
80481: CALL_OW 74
80485: PPUSH
80486: CALL_OW 112
80490: GO 80516
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80492: LD_VAR 0 4
80496: PPUSH
80497: LD_VAR 0 6
80501: PPUSH
80502: LD_VAR 0 4
80506: PPUSH
80507: CALL_OW 74
80511: PPUSH
80512: CALL_OW 115
// end else
80516: GO 80618
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80518: LD_VAR 0 4
80522: PPUSH
80523: LD_VAR 0 2
80527: PUSH
80528: LD_VAR 0 9
80532: ARRAY
80533: PUSH
80534: LD_INT 1
80536: ARRAY
80537: PPUSH
80538: LD_VAR 0 2
80542: PUSH
80543: LD_VAR 0 9
80547: ARRAY
80548: PUSH
80549: LD_INT 2
80551: ARRAY
80552: PPUSH
80553: CALL_OW 297
80557: PUSH
80558: LD_INT 6
80560: GREATER
80561: IFFALSE 80604
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80563: LD_VAR 0 4
80567: PPUSH
80568: LD_VAR 0 2
80572: PUSH
80573: LD_VAR 0 9
80577: ARRAY
80578: PUSH
80579: LD_INT 1
80581: ARRAY
80582: PPUSH
80583: LD_VAR 0 2
80587: PUSH
80588: LD_VAR 0 9
80592: ARRAY
80593: PUSH
80594: LD_INT 2
80596: ARRAY
80597: PPUSH
80598: CALL_OW 114
80602: GO 80618
// SetTag ( i , tag ) ;
80604: LD_VAR 0 4
80608: PPUSH
80609: LD_VAR 0 9
80613: PPUSH
80614: CALL_OW 109
// end else
80618: GO 80691
// if enemy then
80620: LD_VAR 0 5
80624: IFFALSE 80691
// begin if GetWeapon ( i ) = ru_time_lapser then
80626: LD_VAR 0 4
80630: PPUSH
80631: CALL_OW 264
80635: PUSH
80636: LD_INT 49
80638: EQUAL
80639: IFFALSE 80667
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80641: LD_VAR 0 4
80645: PPUSH
80646: LD_VAR 0 5
80650: PPUSH
80651: LD_VAR 0 4
80655: PPUSH
80656: CALL_OW 74
80660: PPUSH
80661: CALL_OW 112
80665: GO 80691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80667: LD_VAR 0 4
80671: PPUSH
80672: LD_VAR 0 5
80676: PPUSH
80677: LD_VAR 0 4
80681: PPUSH
80682: CALL_OW 74
80686: PPUSH
80687: CALL_OW 115
// end ; end ;
80691: GO 80271
80693: POP
80694: POP
// end ;
80695: LD_VAR 0 3
80699: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80700: LD_INT 0
80702: PPUSH
80703: PPUSH
80704: PPUSH
// if not unit or IsInUnit ( unit ) then
80705: LD_VAR 0 1
80709: NOT
80710: PUSH
80711: LD_VAR 0 1
80715: PPUSH
80716: CALL_OW 310
80720: OR
80721: IFFALSE 80725
// exit ;
80723: GO 80816
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80725: LD_ADDR_VAR 0 4
80729: PUSH
80730: LD_VAR 0 1
80734: PPUSH
80735: CALL_OW 250
80739: PPUSH
80740: LD_VAR 0 2
80744: PPUSH
80745: LD_INT 1
80747: PPUSH
80748: CALL_OW 272
80752: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80753: LD_ADDR_VAR 0 5
80757: PUSH
80758: LD_VAR 0 1
80762: PPUSH
80763: CALL_OW 251
80767: PPUSH
80768: LD_VAR 0 2
80772: PPUSH
80773: LD_INT 1
80775: PPUSH
80776: CALL_OW 273
80780: ST_TO_ADDR
// if ValidHex ( x , y ) then
80781: LD_VAR 0 4
80785: PPUSH
80786: LD_VAR 0 5
80790: PPUSH
80791: CALL_OW 488
80795: IFFALSE 80816
// ComTurnXY ( unit , x , y ) ;
80797: LD_VAR 0 1
80801: PPUSH
80802: LD_VAR 0 4
80806: PPUSH
80807: LD_VAR 0 5
80811: PPUSH
80812: CALL_OW 118
// end ;
80816: LD_VAR 0 3
80820: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80821: LD_INT 0
80823: PPUSH
80824: PPUSH
// result := false ;
80825: LD_ADDR_VAR 0 3
80829: PUSH
80830: LD_INT 0
80832: ST_TO_ADDR
// if not units then
80833: LD_VAR 0 2
80837: NOT
80838: IFFALSE 80842
// exit ;
80840: GO 80887
// for i in units do
80842: LD_ADDR_VAR 0 4
80846: PUSH
80847: LD_VAR 0 2
80851: PUSH
80852: FOR_IN
80853: IFFALSE 80885
// if See ( side , i ) then
80855: LD_VAR 0 1
80859: PPUSH
80860: LD_VAR 0 4
80864: PPUSH
80865: CALL_OW 292
80869: IFFALSE 80883
// begin result := true ;
80871: LD_ADDR_VAR 0 3
80875: PUSH
80876: LD_INT 1
80878: ST_TO_ADDR
// exit ;
80879: POP
80880: POP
80881: GO 80887
// end ;
80883: GO 80852
80885: POP
80886: POP
// end ;
80887: LD_VAR 0 3
80891: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80892: LD_INT 0
80894: PPUSH
80895: PPUSH
80896: PPUSH
80897: PPUSH
// if not unit or not points then
80898: LD_VAR 0 1
80902: NOT
80903: PUSH
80904: LD_VAR 0 2
80908: NOT
80909: OR
80910: IFFALSE 80914
// exit ;
80912: GO 81004
// dist := 99999 ;
80914: LD_ADDR_VAR 0 5
80918: PUSH
80919: LD_INT 99999
80921: ST_TO_ADDR
// for i in points do
80922: LD_ADDR_VAR 0 4
80926: PUSH
80927: LD_VAR 0 2
80931: PUSH
80932: FOR_IN
80933: IFFALSE 81002
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80935: LD_ADDR_VAR 0 6
80939: PUSH
80940: LD_VAR 0 1
80944: PPUSH
80945: LD_VAR 0 4
80949: PUSH
80950: LD_INT 1
80952: ARRAY
80953: PPUSH
80954: LD_VAR 0 4
80958: PUSH
80959: LD_INT 2
80961: ARRAY
80962: PPUSH
80963: CALL_OW 297
80967: ST_TO_ADDR
// if tmpDist < dist then
80968: LD_VAR 0 6
80972: PUSH
80973: LD_VAR 0 5
80977: LESS
80978: IFFALSE 81000
// begin result := i ;
80980: LD_ADDR_VAR 0 3
80984: PUSH
80985: LD_VAR 0 4
80989: ST_TO_ADDR
// dist := tmpDist ;
80990: LD_ADDR_VAR 0 5
80994: PUSH
80995: LD_VAR 0 6
80999: ST_TO_ADDR
// end ; end ;
81000: GO 80932
81002: POP
81003: POP
// end ;
81004: LD_VAR 0 3
81008: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81009: LD_INT 0
81011: PPUSH
// uc_side := side ;
81012: LD_ADDR_OWVAR 20
81016: PUSH
81017: LD_VAR 0 1
81021: ST_TO_ADDR
// uc_nation := 3 ;
81022: LD_ADDR_OWVAR 21
81026: PUSH
81027: LD_INT 3
81029: ST_TO_ADDR
// vc_chassis := 25 ;
81030: LD_ADDR_OWVAR 37
81034: PUSH
81035: LD_INT 25
81037: ST_TO_ADDR
// vc_engine := engine_siberite ;
81038: LD_ADDR_OWVAR 39
81042: PUSH
81043: LD_INT 3
81045: ST_TO_ADDR
// vc_control := control_computer ;
81046: LD_ADDR_OWVAR 38
81050: PUSH
81051: LD_INT 3
81053: ST_TO_ADDR
// vc_weapon := 59 ;
81054: LD_ADDR_OWVAR 40
81058: PUSH
81059: LD_INT 59
81061: ST_TO_ADDR
// result := CreateVehicle ;
81062: LD_ADDR_VAR 0 5
81066: PUSH
81067: CALL_OW 45
81071: ST_TO_ADDR
// SetDir ( result , d ) ;
81072: LD_VAR 0 5
81076: PPUSH
81077: LD_VAR 0 4
81081: PPUSH
81082: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81086: LD_VAR 0 5
81090: PPUSH
81091: LD_VAR 0 2
81095: PPUSH
81096: LD_VAR 0 3
81100: PPUSH
81101: LD_INT 0
81103: PPUSH
81104: CALL_OW 48
// end ;
81108: LD_VAR 0 5
81112: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81113: LD_INT 0
81115: PPUSH
81116: PPUSH
81117: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81118: LD_ADDR_VAR 0 2
81122: PUSH
81123: LD_INT 0
81125: PUSH
81126: LD_INT 0
81128: PUSH
81129: LD_INT 0
81131: PUSH
81132: LD_INT 0
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: LIST
81139: LIST
81140: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81141: LD_VAR 0 1
81145: NOT
81146: PUSH
81147: LD_VAR 0 1
81151: PPUSH
81152: CALL_OW 264
81156: PUSH
81157: LD_INT 12
81159: PUSH
81160: LD_INT 51
81162: PUSH
81163: LD_INT 32
81165: PUSH
81166: LD_INT 89
81168: PUSH
81169: EMPTY
81170: LIST
81171: LIST
81172: LIST
81173: LIST
81174: IN
81175: NOT
81176: OR
81177: IFFALSE 81181
// exit ;
81179: GO 81279
// for i := 1 to 3 do
81181: LD_ADDR_VAR 0 3
81185: PUSH
81186: DOUBLE
81187: LD_INT 1
81189: DEC
81190: ST_TO_ADDR
81191: LD_INT 3
81193: PUSH
81194: FOR_TO
81195: IFFALSE 81277
// begin tmp := GetCargo ( cargo , i ) ;
81197: LD_ADDR_VAR 0 4
81201: PUSH
81202: LD_VAR 0 1
81206: PPUSH
81207: LD_VAR 0 3
81211: PPUSH
81212: CALL_OW 289
81216: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81217: LD_ADDR_VAR 0 2
81221: PUSH
81222: LD_VAR 0 2
81226: PPUSH
81227: LD_VAR 0 3
81231: PPUSH
81232: LD_VAR 0 4
81236: PPUSH
81237: CALL_OW 1
81241: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81242: LD_ADDR_VAR 0 2
81246: PUSH
81247: LD_VAR 0 2
81251: PPUSH
81252: LD_INT 4
81254: PPUSH
81255: LD_VAR 0 2
81259: PUSH
81260: LD_INT 4
81262: ARRAY
81263: PUSH
81264: LD_VAR 0 4
81268: PLUS
81269: PPUSH
81270: CALL_OW 1
81274: ST_TO_ADDR
// end ;
81275: GO 81194
81277: POP
81278: POP
// end ;
81279: LD_VAR 0 2
81283: RET
// export function Length ( array ) ; begin
81284: LD_INT 0
81286: PPUSH
// result := array + 0 ;
81287: LD_ADDR_VAR 0 2
81291: PUSH
81292: LD_VAR 0 1
81296: PUSH
81297: LD_INT 0
81299: PLUS
81300: ST_TO_ADDR
// end ;
81301: LD_VAR 0 2
81305: RET
// export function PrepareArray ( array ) ; begin
81306: LD_INT 0
81308: PPUSH
// result := array diff 0 ;
81309: LD_ADDR_VAR 0 2
81313: PUSH
81314: LD_VAR 0 1
81318: PUSH
81319: LD_INT 0
81321: DIFF
81322: ST_TO_ADDR
// if not result [ 1 ] then
81323: LD_VAR 0 2
81327: PUSH
81328: LD_INT 1
81330: ARRAY
81331: NOT
81332: IFFALSE 81352
// result := Delete ( result , 1 ) ;
81334: LD_ADDR_VAR 0 2
81338: PUSH
81339: LD_VAR 0 2
81343: PPUSH
81344: LD_INT 1
81346: PPUSH
81347: CALL_OW 3
81351: ST_TO_ADDR
// end ;
81352: LD_VAR 0 2
81356: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81357: LD_INT 0
81359: PPUSH
81360: PPUSH
81361: PPUSH
81362: PPUSH
// sibRocketRange := 25 ;
81363: LD_ADDR_VAR 0 6
81367: PUSH
81368: LD_INT 25
81370: ST_TO_ADDR
// result := false ;
81371: LD_ADDR_VAR 0 4
81375: PUSH
81376: LD_INT 0
81378: ST_TO_ADDR
// for i := 0 to 5 do
81379: LD_ADDR_VAR 0 5
81383: PUSH
81384: DOUBLE
81385: LD_INT 0
81387: DEC
81388: ST_TO_ADDR
81389: LD_INT 5
81391: PUSH
81392: FOR_TO
81393: IFFALSE 81460
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81395: LD_VAR 0 1
81399: PPUSH
81400: LD_VAR 0 5
81404: PPUSH
81405: LD_VAR 0 6
81409: PPUSH
81410: CALL_OW 272
81414: PPUSH
81415: LD_VAR 0 2
81419: PPUSH
81420: LD_VAR 0 5
81424: PPUSH
81425: LD_VAR 0 6
81429: PPUSH
81430: CALL_OW 273
81434: PPUSH
81435: LD_VAR 0 3
81439: PPUSH
81440: CALL_OW 309
81444: IFFALSE 81458
// begin result := true ;
81446: LD_ADDR_VAR 0 4
81450: PUSH
81451: LD_INT 1
81453: ST_TO_ADDR
// exit ;
81454: POP
81455: POP
81456: GO 81462
// end ;
81458: GO 81392
81460: POP
81461: POP
// end ;
81462: LD_VAR 0 4
81466: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81467: LD_INT 0
81469: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81470: LD_VAR 0 1
81474: PPUSH
81475: LD_VAR 0 2
81479: PPUSH
81480: LD_INT 0
81482: PPUSH
81483: LD_INT 0
81485: PPUSH
81486: LD_INT 1
81488: PPUSH
81489: LD_INT 0
81491: PPUSH
81492: CALL_OW 587
// end ; end_of_file
81496: LD_VAR 0 3
81500: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81501: LD_VAR 0 1
81505: PUSH
81506: LD_INT 200
81508: DOUBLE
81509: GREATEREQUAL
81510: IFFALSE 81518
81512: LD_INT 299
81514: DOUBLE
81515: LESSEQUAL
81516: IFTRUE 81520
81518: GO 81552
81520: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81521: LD_VAR 0 1
81525: PPUSH
81526: LD_VAR 0 2
81530: PPUSH
81531: LD_VAR 0 3
81535: PPUSH
81536: LD_VAR 0 4
81540: PPUSH
81541: LD_VAR 0 5
81545: PPUSH
81546: CALL 36167 0 5
81550: GO 81629
81552: LD_INT 300
81554: DOUBLE
81555: GREATEREQUAL
81556: IFFALSE 81564
81558: LD_INT 399
81560: DOUBLE
81561: LESSEQUAL
81562: IFTRUE 81566
81564: GO 81628
81566: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81567: LD_VAR 0 1
81571: PPUSH
81572: LD_VAR 0 2
81576: PPUSH
81577: LD_VAR 0 3
81581: PPUSH
81582: LD_VAR 0 4
81586: PPUSH
81587: LD_VAR 0 5
81591: PPUSH
81592: LD_VAR 0 6
81596: PPUSH
81597: LD_VAR 0 7
81601: PPUSH
81602: LD_VAR 0 8
81606: PPUSH
81607: LD_VAR 0 9
81611: PPUSH
81612: LD_VAR 0 10
81616: PPUSH
81617: LD_VAR 0 11
81621: PPUSH
81622: CALL 32500 0 11
81626: GO 81629
81628: POP
// end ;
81629: PPOPN 11
81631: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81632: LD_VAR 0 1
81636: PPUSH
81637: LD_VAR 0 2
81641: PPUSH
81642: LD_VAR 0 3
81646: PPUSH
81647: LD_VAR 0 4
81651: PPUSH
81652: LD_VAR 0 5
81656: PPUSH
81657: CALL 35903 0 5
// end ; end_of_file
81661: PPOPN 5
81663: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81664: LD_VAR 0 1
81668: PPUSH
81669: LD_VAR 0 2
81673: PPUSH
81674: LD_VAR 0 3
81678: PPUSH
81679: LD_VAR 0 4
81683: PPUSH
81684: LD_VAR 0 5
81688: PPUSH
81689: LD_VAR 0 6
81693: PPUSH
81694: CALL 20120 0 6
// end ;
81698: PPOPN 6
81700: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81701: LD_INT 0
81703: PPUSH
// begin if not units then
81704: LD_VAR 0 1
81708: NOT
81709: IFFALSE 81713
// exit ;
81711: GO 81713
// end ;
81713: PPOPN 7
81715: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81716: CALL 20014 0 0
// end ;
81720: PPOPN 1
81722: END
