// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 630 0 0
// PrepareArabian ;
  12: CALL 1065 0 0
// PrepareAmerican ;
  16: CALL 4126 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9119 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 42000
 166: PUSH
 167: LD_INT 31500
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 9 , 10 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 8
 216: PUSH
 217: LD_INT 9
 219: PUSH
 220: LD_INT 10
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 619
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 1
 577: NEG
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL_OW 12
 586: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 587: LD_INT 0
 589: PPUSH
 590: LD_INT 12
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
// end ;
 617: GO 536
 619: POP
 620: POP
// InitHc ;
 621: CALL_OW 19
// end ;
 625: LD_VAR 0 3
 629: RET
// export function CreateNature ; var i ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 634: LD_INT 2
 636: PPUSH
 637: LD_INT 5
 639: PUSH
 640: LD_INT 4
 642: PUSH
 643: LD_INT 4
 645: PUSH
 646: LD_INT 3
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: LD_OWVAR 67
 659: ARRAY
 660: PPUSH
 661: CALL 493 0 2
// for i := 1 to 2 do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_INT 2
 677: PUSH
 678: FOR_TO
 679: IFFALSE 714
// begin hc_class := 21 ;
 681: LD_ADDR_OWVAR 28
 685: PUSH
 686: LD_INT 21
 688: ST_TO_ADDR
// hc_gallery :=  ;
 689: LD_ADDR_OWVAR 33
 693: PUSH
 694: LD_STRING 
 696: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 697: CALL_OW 44
 701: PPUSH
 702: LD_INT 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// end ;
 712: GO 678
 714: POP
 715: POP
// for i := 1 to 2 do
 716: LD_ADDR_VAR 0 2
 720: PUSH
 721: DOUBLE
 722: LD_INT 1
 724: DEC
 725: ST_TO_ADDR
 726: LD_INT 2
 728: PUSH
 729: FOR_TO
 730: IFFALSE 765
// begin hc_class := 18 ;
 732: LD_ADDR_OWVAR 28
 736: PUSH
 737: LD_INT 18
 739: ST_TO_ADDR
// hc_gallery :=  ;
 740: LD_ADDR_OWVAR 33
 744: PUSH
 745: LD_STRING 
 747: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 748: CALL_OW 44
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 49
// end ;
 763: GO 729
 765: POP
 766: POP
// for i := 1 to 2 do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_INT 2
 779: PUSH
 780: FOR_TO
 781: IFFALSE 816
// begin hc_class := 13 ;
 783: LD_ADDR_OWVAR 28
 787: PUSH
 788: LD_INT 13
 790: ST_TO_ADDR
// hc_gallery :=  ;
 791: LD_ADDR_OWVAR 33
 795: PUSH
 796: LD_STRING 
 798: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 799: CALL_OW 44
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end ;
 814: GO 780
 816: POP
 817: POP
// end ;
 818: LD_VAR 0 1
 822: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 823: LD_INT 0
 825: PPUSH
 826: PPUSH
 827: PPUSH
// if not observer or not unit then
 828: LD_VAR 0 1
 832: NOT
 833: PUSH
 834: LD_VAR 0 2
 838: NOT
 839: OR
 840: IFFALSE 844
// exit ;
 842: GO 892
// if not See ( GetSide ( observer ) , unit ) then
 844: LD_VAR 0 1
 848: PPUSH
 849: CALL_OW 255
 853: PPUSH
 854: LD_VAR 0 2
 858: PPUSH
 859: CALL_OW 292
 863: NOT
 864: IFFALSE 868
// exit ;
 866: GO 892
// result := GetDistUnits ( observer , unit ) < 12 ;
 868: LD_ADDR_VAR 0 3
 872: PUSH
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PPUSH
 883: CALL_OW 296
 887: PUSH
 888: LD_INT 12
 890: LESS
 891: ST_TO_ADDR
// end ;
 892: LD_VAR 0 3
 896: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 897: LD_INT 0
 899: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: PPUSH
 909: LD_VAR 0 2
 913: PUSH
 914: LD_INT 2
 916: ARRAY
 917: PPUSH
 918: CALL_OW 488
 922: PUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PPUSH
 932: LD_VAR 0 2
 936: PUSH
 937: LD_INT 2
 939: ARRAY
 940: PPUSH
 941: CALL_OW 428
 945: PUSH
 946: LD_INT 0
 948: EQUAL
 949: AND
 950: IFFALSE 984
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 952: LD_VAR 0 1
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 2
 970: PUSH
 971: LD_INT 2
 973: ARRAY
 974: PPUSH
 975: LD_VAR 0 3
 979: PPUSH
 980: CALL_OW 48
// end ;
 984: LD_VAR 0 4
 988: RET
// export function ReverseArray ( array ) ; var i ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
// if not array then
 993: LD_VAR 0 1
 997: NOT
 998: IFFALSE 1002
// exit ;
1000: GO 1060
// result := [ ] ;
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: EMPTY
1008: ST_TO_ADDR
// for i := 1 to array do
1009: LD_ADDR_VAR 0 3
1013: PUSH
1014: DOUBLE
1015: LD_INT 1
1017: DEC
1018: ST_TO_ADDR
1019: LD_VAR 0 1
1023: PUSH
1024: FOR_TO
1025: IFFALSE 1058
// result := Insert ( result , 1 , array [ i ] ) ;
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 1
1044: PUSH
1045: LD_VAR 0 3
1049: ARRAY
1050: PPUSH
1051: CALL_OW 2
1055: ST_TO_ADDR
1056: GO 1024
1058: POP
1059: POP
// end ; end_of_file
1060: LD_VAR 0 2
1064: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
1069: PPUSH
1070: PPUSH
// uc_side := 5 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 5
1078: ST_TO_ADDR
// uc_nation := 2 ;
1079: LD_ADDR_OWVAR 21
1083: PUSH
1084: LD_INT 2
1086: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1087: LD_INT 5
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 65
1100: PPUSH
1101: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1105: LD_ADDR_EXP 36
1109: PUSH
1110: LD_STRING Farmer
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 38747 0 3
1123: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1124: LD_ADDR_EXP 37
1128: PUSH
1129: LD_STRING Omar
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: LD_STRING 
1137: PPUSH
1138: CALL 38747 0 3
1142: ST_TO_ADDR
// omarSquad := [ ] ;
1143: LD_ADDR_EXP 40
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// heikeSquad := [ ] ;
1150: LD_ADDR_EXP 41
1154: PUSH
1155: EMPTY
1156: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1157: LD_ADDR_EXP 42
1161: PUSH
1162: EMPTY
1163: ST_TO_ADDR
// omarCargo := [ ] ;
1164: LD_ADDR_EXP 43
1168: PUSH
1169: EMPTY
1170: ST_TO_ADDR
// for i := 1 to 5 do
1171: LD_ADDR_VAR 0 2
1175: PUSH
1176: DOUBLE
1177: LD_INT 1
1179: DEC
1180: ST_TO_ADDR
1181: LD_INT 5
1183: PUSH
1184: FOR_TO
1185: IFFALSE 1343
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1187: LD_INT 0
1189: PPUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_VAR 0 2
1216: ARRAY
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 380
// un := CreateHuman ;
1225: LD_ADDR_VAR 0 3
1229: PUSH
1230: CALL_OW 44
1234: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1235: LD_ADDR_EXP 40
1239: PUSH
1240: LD_EXP 40
1244: PUSH
1245: LD_VAR 0 3
1249: UNION
1250: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1251: LD_VAR 0 3
1255: PPUSH
1256: LD_INT 87
1258: PUSH
1259: LD_INT 30
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 91
1268: PUSH
1269: LD_INT 32
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 82
1278: PUSH
1279: LD_INT 15
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 79
1288: PUSH
1289: LD_INT 14
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 82
1298: PUSH
1299: LD_INT 13
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL 897 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1326: LD_VAR 0 3
1330: PPUSH
1331: LD_INT 93
1333: PPUSH
1334: LD_INT 21
1336: PPUSH
1337: CALL_OW 118
// end ;
1341: GO 1184
1343: POP
1344: POP
// uc_side := 2 ;
1345: LD_ADDR_OWVAR 20
1349: PUSH
1350: LD_INT 2
1352: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1353: LD_ADDR_EXP 28
1357: PUSH
1358: LD_STRING Heike
1360: PPUSH
1361: LD_EXP 1
1365: NOT
1366: PPUSH
1367: LD_EXP 2
1371: PPUSH
1372: CALL 38747 0 3
1376: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1377: LD_ADDR_EXP 32
1381: PUSH
1382: LD_STRING Aviradze
1384: PPUSH
1385: LD_EXP 1
1389: NOT
1390: PPUSH
1391: LD_EXP 2
1395: PPUSH
1396: CALL 38747 0 3
1400: ST_TO_ADDR
// tmp := [ ] ;
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: EMPTY
1407: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1408: LD_ADDR_EXP 29
1412: PUSH
1413: LD_STRING Givi
1415: PPUSH
1416: LD_EXP 1
1420: NOT
1421: PPUSH
1422: LD_EXP 2
1426: PPUSH
1427: CALL 38747 0 3
1431: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1432: LD_ADDR_EXP 30
1436: PUSH
1437: LD_STRING Mike
1439: PPUSH
1440: LD_EXP 1
1444: NOT
1445: PPUSH
1446: LD_EXP 2
1450: PPUSH
1451: CALL 38747 0 3
1455: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1456: LD_ADDR_EXP 31
1460: PUSH
1461: LD_STRING Kamil
1463: PPUSH
1464: LD_EXP 1
1468: NOT
1469: PPUSH
1470: LD_EXP 2
1474: PPUSH
1475: CALL 38747 0 3
1479: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1480: LD_ADDR_EXP 33
1484: PUSH
1485: LD_STRING Kaia
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 2
1498: PPUSH
1499: CALL 38747 0 3
1503: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1504: LD_ADDR_EXP 34
1508: PUSH
1509: LD_STRING Sophia
1511: PPUSH
1512: LD_EXP 1
1516: NOT
1517: PPUSH
1518: LD_EXP 2
1522: PPUSH
1523: CALL 38747 0 3
1527: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1528: LD_ADDR_EXP 35
1532: PUSH
1533: LD_STRING Markov
1535: PPUSH
1536: LD_EXP 1
1540: NOT
1541: PPUSH
1542: LD_EXP 2
1546: PPUSH
1547: CALL 38747 0 3
1551: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1552: LD_ADDR_EXP 42
1556: PUSH
1557: LD_STRING 02_others
1559: PPUSH
1560: CALL_OW 31
1564: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_EXP 30
1574: PUSH
1575: LD_EXP 31
1579: PUSH
1580: LD_EXP 33
1584: PUSH
1585: LD_EXP 34
1589: PUSH
1590: LD_EXP 35
1594: PUSH
1595: LD_EXP 29
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_EXP 42
1612: ADD
1613: PUSH
1614: LD_INT 0
1616: DIFF
1617: ST_TO_ADDR
// heikeSquad := tmp ;
1618: LD_ADDR_EXP 41
1622: PUSH
1623: LD_VAR 0 4
1627: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1628: LD_EXP 41
1632: PPUSH
1633: LD_INT 25
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 72
1647: PUSH
1648: LD_INT 3
1650: LESS
1651: IFFALSE 1701
// begin SetClass ( Kaia , 1 ) ;
1653: LD_EXP 33
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1665: LD_EXP 30
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1677: LD_EXP 29
1681: PPUSH
1682: LD_INT 1
1684: PPUSH
1685: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1689: LD_EXP 28
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1701: LD_ADDR_VAR 0 4
1705: PUSH
1706: LD_VAR 0 4
1710: PUSH
1711: LD_STRING 02_ape
1713: PPUSH
1714: CALL_OW 31
1718: UNION
1719: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1720: LD_EXP 28
1724: PPUSH
1725: LD_INT 92
1727: PPUSH
1728: LD_INT 17
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1738: LD_EXP 36
1742: PPUSH
1743: LD_INT 95
1745: PPUSH
1746: LD_INT 19
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1756: LD_EXP 37
1760: PPUSH
1761: LD_INT 89
1763: PPUSH
1764: LD_INT 25
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1774: LD_EXP 32
1778: PPUSH
1779: LD_INT 92
1781: PPUSH
1782: LD_INT 27
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1792: LD_EXP 37
1796: PPUSH
1797: LD_EXP 32
1801: PPUSH
1802: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1806: LD_EXP 32
1810: PPUSH
1811: LD_EXP 37
1815: PPUSH
1816: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1820: LD_EXP 28
1824: PUSH
1825: LD_EXP 36
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: LD_EXP 37
1838: PPUSH
1839: CALL_OW 119
// if tmp then
1843: LD_VAR 0 4
1847: IFFALSE 1901
// for i in tmp do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: LD_VAR 0 4
1858: PUSH
1859: FOR_IN
1860: IFFALSE 1899
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 94
1869: PPUSH
1870: LD_INT 14
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_EXP 28
1892: PPUSH
1893: CALL_OW 119
// end ;
1897: GO 1859
1899: POP
1900: POP
// farmerSquad := [ ] ;
1901: LD_ADDR_EXP 39
1905: PUSH
1906: EMPTY
1907: ST_TO_ADDR
// uc_side := 5 ;
1908: LD_ADDR_OWVAR 20
1912: PUSH
1913: LD_INT 5
1915: ST_TO_ADDR
// uc_nation := 2 ;
1916: LD_ADDR_OWVAR 21
1920: PUSH
1921: LD_INT 2
1923: ST_TO_ADDR
// for i := 1 to 4 do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 4
1936: PUSH
1937: FOR_TO
1938: IFFALSE 2016
// begin PrepareHuman ( false , 1 , 2 ) ;
1940: LD_INT 0
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: CALL_OW 380
// un := CreateHuman ;
1953: LD_ADDR_VAR 0 3
1957: PUSH
1958: CALL_OW 44
1962: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1963: LD_VAR 0 3
1967: PPUSH
1968: LD_INT 102
1970: PPUSH
1971: LD_INT 27
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1984: LD_ADDR_EXP 39
1988: PUSH
1989: LD_EXP 39
1993: PUSH
1994: LD_VAR 0 3
1998: UNION
1999: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_EXP 37
2009: PPUSH
2010: CALL_OW 119
// end ;
2014: GO 1937
2016: POP
2017: POP
// for i := 1 to 2 do
2018: LD_ADDR_VAR 0 2
2022: PUSH
2023: DOUBLE
2024: LD_INT 1
2026: DEC
2027: ST_TO_ADDR
2028: LD_INT 2
2030: PUSH
2031: FOR_TO
2032: IFFALSE 2110
// begin PrepareHuman ( false , 2 , 2 ) ;
2034: LD_INT 0
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 380
// un := CreateHuman ;
2047: LD_ADDR_VAR 0 3
2051: PUSH
2052: CALL_OW 44
2056: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_INT 108
2064: PPUSH
2065: LD_INT 62
2067: PPUSH
2068: LD_INT 2
2070: PPUSH
2071: LD_INT 0
2073: PPUSH
2074: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2078: LD_ADDR_EXP 39
2082: PUSH
2083: LD_EXP 39
2087: PUSH
2088: LD_VAR 0 3
2092: UNION
2093: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2094: LD_VAR 0 3
2098: PPUSH
2099: LD_EXP 37
2103: PPUSH
2104: CALL_OW 119
// end ;
2108: GO 2031
2110: POP
2111: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2112: LD_INT 109
2114: PPUSH
2115: LD_INT 63
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: LD_INT 15
2123: NEG
2124: PPUSH
2125: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2129: LD_INT 109
2131: PPUSH
2132: LD_INT 63
2134: PPUSH
2135: LD_INT 2
2137: PPUSH
2138: CALL_OW 331
// end ;
2142: LD_VAR 0 1
2146: RET
// export function PrepareIbrahim ( x , y ) ; begin
2147: LD_INT 0
2149: PPUSH
// uc_side := 6 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 6
2157: ST_TO_ADDR
// uc_nation := 3 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2166: LD_ADDR_EXP 38
2170: PUSH
2171: LD_STRING IbrahimRu
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 38747 0 3
2184: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2185: LD_EXP 38
2189: PPUSH
2190: LD_VAR 0 1
2194: PPUSH
2195: LD_VAR 0 2
2199: PPUSH
2200: LD_INT 8
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 50
// end ;
2210: LD_VAR 0 3
2214: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2215: LD_EXP 37
2219: PUSH
2220: LD_EXP 40
2224: ADD
2225: PPUSH
2226: LD_INT 95
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: IFFALSE 2296
2242: GO 2244
2244: DISABLE
2245: LD_INT 0
2247: PPUSH
// begin enable ;
2248: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2249: LD_ADDR_VAR 0 1
2253: PUSH
2254: LD_EXP 37
2258: PUSH
2259: LD_EXP 40
2263: ADD
2264: PPUSH
2265: LD_INT 95
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 72
2279: PUSH
2280: FOR_IN
2281: IFFALSE 2294
// RemoveUnit ( i ) ;
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 64
2292: GO 2280
2294: POP
2295: POP
// end ;
2296: PPOPN 1
2298: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2299: LD_EXP 3
2303: PUSH
2304: LD_EXP 36
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL_OW 308
2316: AND
2317: IFFALSE 3121
2319: GO 2321
2321: DISABLE
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2328: LD_EXP 36
2332: PPUSH
2333: LD_INT 110
2335: PPUSH
2336: LD_INT 60
2338: PPUSH
2339: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2343: LD_EXP 36
2347: PPUSH
2348: LD_INT 110
2350: PPUSH
2351: LD_INT 61
2353: PPUSH
2354: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2358: LD_ADDR_VAR 0 2
2362: PUSH
2363: LD_EXP 39
2367: PPUSH
2368: LD_INT 25
2370: PUSH
2371: LD_INT 1
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PPUSH
2378: CALL_OW 72
2382: ST_TO_ADDR
// if tmp then
2383: LD_VAR 0 2
2387: IFFALSE 2481
// begin for i := 1 to 2 do
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: DOUBLE
2395: LD_INT 1
2397: DEC
2398: ST_TO_ADDR
2399: LD_INT 2
2401: PUSH
2402: FOR_TO
2403: IFFALSE 2479
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2405: LD_VAR 0 2
2409: PUSH
2410: LD_VAR 0 1
2414: ARRAY
2415: PPUSH
2416: LD_INT 5
2418: PPUSH
2419: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 1
2432: ARRAY
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2456: LD_VAR 0 2
2460: PUSH
2461: LD_VAR 0 1
2465: ARRAY
2466: PPUSH
2467: LD_INT 107
2469: PPUSH
2470: LD_INT 66
2472: PPUSH
2473: CALL_OW 171
// end ;
2477: GO 2402
2479: POP
2480: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_EXP 39
2490: PPUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 2
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 72
2505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2506: LD_INT 35
2508: PPUSH
2509: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_EXP 39
2522: PPUSH
2523: LD_INT 25
2525: PUSH
2526: LD_INT 2
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// until tmp ;
2538: LD_VAR 0 2
2542: IFFALSE 2506
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2544: LD_VAR 0 2
2548: PPUSH
2549: LD_INT 31
2551: PPUSH
2552: LD_INT 102
2554: PPUSH
2555: LD_INT 69
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2572: LD_EXP 39
2576: PPUSH
2577: LD_INT 3
2579: PUSH
2580: LD_INT 60
2582: PUSH
2583: EMPTY
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 25
2592: PUSH
2593: LD_INT 2
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 72
2608: IFFALSE 2565
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2610: LD_ADDR_VAR 0 2
2614: PUSH
2615: LD_EXP 39
2619: PPUSH
2620: LD_INT 25
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 72
2634: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2635: LD_VAR 0 2
2639: PPUSH
2640: LD_INT 6
2642: PPUSH
2643: LD_INT 116
2645: PPUSH
2646: LD_INT 55
2648: PPUSH
2649: LD_INT 4
2651: PPUSH
2652: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: LD_INT 116
2666: PPUSH
2667: LD_INT 70
2669: PPUSH
2670: LD_INT 5
2672: PPUSH
2673: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2677: LD_VAR 0 2
2681: PPUSH
2682: LD_INT 31
2684: PPUSH
2685: LD_INT 109
2687: PPUSH
2688: LD_INT 50
2690: PPUSH
2691: LD_INT 2
2693: PPUSH
2694: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2698: LD_INT 35
2700: PPUSH
2701: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2705: LD_INT 22
2707: PUSH
2708: LD_INT 5
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 30
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 57
2730: PUSH
2731: EMPTY
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: IFFALSE 2698
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_INT 22
2756: PUSH
2757: LD_INT 5
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 30
2766: PUSH
2767: LD_INT 4
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 57
2779: PUSH
2780: EMPTY
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2801: LD_ADDR_VAR 0 2
2805: PUSH
2806: LD_EXP 39
2810: PPUSH
2811: LD_INT 25
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PPUSH
2821: CALL_OW 72
2825: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2840: LD_INT 35
2842: PPUSH
2843: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2847: LD_INT 22
2849: PUSH
2850: LD_INT 5
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 30
2859: PUSH
2860: LD_INT 31
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 57
2872: PUSH
2873: EMPTY
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: LD_INT 2
2892: GREATEREQUAL
2893: IFFALSE 2840
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: LD_EXP 39
2904: PPUSH
2905: LD_INT 25
2907: PUSH
2908: LD_INT 2
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: CALL_OW 72
2919: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 1
2927: ARRAY
2928: PPUSH
2929: LD_INT 5
2931: PPUSH
2932: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: ARRAY
2944: PUSH
2945: LD_VAR 0 2
2949: PUSH
2950: LD_INT 3
2952: ARRAY
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: LD_VAR 0 3
2962: PPUSH
2963: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 3
2983: ARRAY
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 2
3003: ARRAY
3004: PUSH
3005: LD_VAR 0 2
3009: PUSH
3010: LD_INT 3
3012: ARRAY
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3022: LD_ADDR_VAR 0 4
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 5
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 30
3039: PUSH
3040: LD_INT 31
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i := 1 to 2 do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_INT 2
3068: PUSH
3069: FOR_TO
3070: IFFALSE 3104
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3072: LD_VAR 0 2
3076: PUSH
3077: LD_VAR 0 1
3081: PUSH
3082: LD_INT 1
3084: PLUS
3085: ARRAY
3086: PPUSH
3087: LD_VAR 0 4
3091: PUSH
3092: LD_VAR 0 1
3096: ARRAY
3097: PPUSH
3098: CALL_OW 180
3102: GO 3069
3104: POP
3105: POP
// wait ( 1 1$00 ) ;
3106: LD_INT 2100
3108: PPUSH
3109: CALL_OW 67
// farmerBaseReady := true ;
3113: LD_ADDR_EXP 4
3117: PUSH
3118: LD_INT 1
3120: ST_TO_ADDR
// end ;
3121: PPOPN 4
3123: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3124: LD_EXP 4
3128: PUSH
3129: LD_EXP 11
3133: NOT
3134: AND
3135: IFFALSE 3657
3137: GO 3139
3139: DISABLE
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
// begin enable ;
3147: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3148: LD_ADDR_VAR 0 3
3152: PUSH
3153: LD_EXP 39
3157: PPUSH
3158: LD_INT 25
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 72
3172: PUSH
3173: LD_EXP 36
3177: ADD
3178: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_EXP 39
3188: PPUSH
3189: LD_INT 25
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 72
3203: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_INT 22
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 24
3234: PUSH
3235: LD_INT 1000
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3256: LD_ADDR_VAR 0 4
3260: PUSH
3261: LD_INT 22
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 4
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 69
3289: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3290: LD_VAR 0 4
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: CALL_OW 302
3303: IFFALSE 3367
// for i in sol do
3305: LD_ADDR_VAR 0 1
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: FOR_IN
3316: IFFALSE 3365
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3318: LD_VAR 0 1
3322: PPUSH
3323: CALL_OW 256
3327: PUSH
3328: LD_INT 999
3330: LESS
3331: PUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 310
3341: NOT
3342: AND
3343: IFFALSE 3363
// ComEnterUnit ( i , arm [ 1 ] ) ;
3345: LD_VAR 0 1
3349: PPUSH
3350: LD_VAR 0 4
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: CALL_OW 120
3363: GO 3315
3365: POP
3366: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3367: LD_VAR 0 2
3371: NOT
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 1
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: NOT
3402: AND
3403: IFFALSE 3495
// begin uc_side := 5 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 5
3412: ST_TO_ADDR
// uc_nation := 2 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 2
3420: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3421: LD_INT 0
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 380
// eng := CreateHuman ;
3434: LD_ADDR_VAR 0 2
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 102
3451: PPUSH
3452: LD_INT 8
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3462: LD_VAR 0 2
3466: PPUSH
3467: LD_INT 110
3469: PPUSH
3470: LD_INT 60
3472: PPUSH
3473: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3477: LD_ADDR_EXP 39
3481: PUSH
3482: LD_EXP 39
3486: PUSH
3487: LD_VAR 0 2
3491: UNION
3492: ST_TO_ADDR
// end else
3493: GO 3657
// begin for i in eng do
3495: LD_ADDR_VAR 0 1
3499: PUSH
3500: LD_VAR 0 2
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3655
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3508: LD_INT 10
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 287
3518: IFFALSE 3569
// begin if IsInUnit ( i ) then
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 310
3529: IFFALSE 3540
// ComExitBuilding ( i ) ;
3531: LD_VAR 0 1
3535: PPUSH
3536: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 10
3547: PPUSH
3548: CALL_OW 308
3552: NOT
3553: IFFALSE 3567
// AddComMoveToArea ( i , collectFarmerArea ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 10
3562: PPUSH
3563: CALL_OW 173
// end else
3567: GO 3653
// begin if damagedBuilding then
3569: LD_VAR 0 5
3573: IFFALSE 3617
// begin if IsInUnit ( i ) then
3575: LD_VAR 0 1
3579: PPUSH
3580: CALL_OW 310
3584: IFFALSE 3597
// ComExitBuilding ( i ) else
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 122
3595: GO 3615
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3597: LD_VAR 0 1
3601: PPUSH
3602: LD_VAR 0 5
3606: PUSH
3607: LD_INT 1
3609: ARRAY
3610: PPUSH
3611: CALL_OW 130
// end else
3615: GO 3653
// if not IsInUnit ( i ) and not HasTask ( i ) then
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 310
3626: NOT
3627: PUSH
3628: LD_VAR 0 1
3632: PPUSH
3633: CALL_OW 314
3637: NOT
3638: AND
3639: IFFALSE 3653
// ComEnterUnit ( i , arDepot ) ;
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 5
3648: PPUSH
3649: CALL_OW 120
// end ; end ;
3653: GO 3505
3655: POP
3656: POP
// end ; end ;
3657: PPOPN 5
3659: END
// export function CargoEvacuation ; begin
3660: LD_INT 0
3662: PPUSH
// wait ( 0 0$20 ) ;
3663: LD_INT 700
3665: PPUSH
3666: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3670: LD_ADDR_EXP 21
3674: PUSH
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 1
3682: MINUS
3683: ST_TO_ADDR
// if omarCargoCounter = 0 then
3684: LD_EXP 21
3688: PUSH
3689: LD_INT 0
3691: EQUAL
3692: IFFALSE 3696
// exit ;
3694: GO 4003
// if omarCargo then
3696: LD_EXP 43
3700: IFFALSE 3711
// RemoveUnit ( omarCargo ) ;
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 64
// omarCargo := PrepareCargo ;
3711: LD_ADDR_EXP 43
3715: PUSH
3716: CALL 4008 0 0
3720: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3721: LD_EXP 43
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3733: LD_EXP 43
3737: PPUSH
3738: LD_INT 107
3740: PPUSH
3741: LD_INT 59
3743: PPUSH
3744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3748: LD_INT 35
3750: PPUSH
3751: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3755: LD_EXP 43
3759: PPUSH
3760: LD_INT 107
3762: PPUSH
3763: LD_INT 59
3765: PPUSH
3766: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3770: LD_EXP 43
3774: PPUSH
3775: CALL_OW 302
3779: NOT
3780: PUSH
3781: LD_EXP 43
3785: PPUSH
3786: CALL_OW 301
3790: OR
3791: IFFALSE 3795
// exit ;
3793: GO 4003
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 107
3802: PPUSH
3803: LD_INT 59
3805: PPUSH
3806: CALL_OW 307
3810: PUSH
3811: LD_EXP 43
3815: PPUSH
3816: LD_INT 5
3818: PPUSH
3819: CALL_OW 296
3823: PUSH
3824: LD_INT 6
3826: LESS
3827: OR
3828: IFFALSE 3748
// SetTag ( omarCargo , 1 ) ;
3830: LD_EXP 43
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 109
// wait ( 0 0$05 ) ;
3842: LD_INT 175
3844: PPUSH
3845: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3849: LD_EXP 43
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3864: LD_EXP 43
3868: PPUSH
3869: LD_INT 103
3871: PPUSH
3872: LD_INT 9
3874: PPUSH
3875: CALL_OW 171
// wait ( 0 0$1 ) ;
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3886: LD_EXP 43
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 100
3896: PPUSH
3897: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3908: LD_EXP 43
3912: PPUSH
3913: LD_INT 103
3915: PPUSH
3916: LD_INT 9
3918: PPUSH
3919: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3923: LD_EXP 43
3927: PPUSH
3928: CALL_OW 302
3932: NOT
3933: PUSH
3934: LD_EXP 43
3938: PPUSH
3939: CALL_OW 301
3943: OR
3944: IFFALSE 3948
// exit ;
3946: GO 4003
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 103
3955: PPUSH
3956: LD_INT 9
3958: PPUSH
3959: CALL_OW 307
3963: PUSH
3964: LD_EXP 43
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: CALL_OW 308
3976: OR
3977: PUSH
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 110
3987: PUSH
3988: LD_INT 0
3990: GREATER
3991: AND
3992: IFFALSE 3901
// RemoveUnit ( omarCargo ) ;
3994: LD_EXP 43
3998: PPUSH
3999: CALL_OW 64
// end ;
4003: LD_VAR 0 1
4007: RET
// export function PrepareCargo ; var un , veh ; begin
4008: LD_INT 0
4010: PPUSH
4011: PPUSH
4012: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 2
4023: PPUSH
4024: LD_INT 14
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: LD_INT 32
4035: PPUSH
4036: LD_INT 80
4038: PPUSH
4039: CALL 325 0 7
4043: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4044: LD_VAR 0 3
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_INT 101
4063: PPUSH
4064: LD_INT 8
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4074: LD_INT 0
4076: PPUSH
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 2
4082: PPUSH
4083: CALL_OW 380
// un := CreateHuman ;
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_VAR 0 3
4106: PPUSH
4107: CALL_OW 52
// result := veh ;
4111: LD_ADDR_VAR 0 1
4115: PUSH
4116: LD_VAR 0 3
4120: ST_TO_ADDR
// end ; end_of_file
4121: LD_VAR 0 1
4125: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
// usForces := [ ] ;
4131: LD_ADDR_EXP 44
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4138: LD_ADDR_EXP 46
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 32
4148: PUSH
4149: LD_INT 27
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 43
4166: PUSH
4167: LD_INT 24
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 27
4181: PUSH
4182: LD_INT 29
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4202: LD_INT 11
4204: PPUSH
4205: CALL_OW 274
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 150
4215: PUSH
4216: LD_INT 120
4218: PUSH
4219: LD_INT 100
4221: PUSH
4222: LD_INT 80
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_OWVAR 67
4235: ARRAY
4236: PPUSH
4237: CALL_OW 277
// if Difficulty = 1 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 1
4248: EQUAL
4249: IFFALSE 4258
// RemoveUnit ( hillBun ) ;
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 64
// uc_side := 1 ;
4258: LD_ADDR_OWVAR 20
4262: PUSH
4263: LD_INT 1
4265: ST_TO_ADDR
// uc_nation := 1 ;
4266: LD_ADDR_OWVAR 21
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// hc_gallery :=  ;
4274: LD_ADDR_OWVAR 33
4278: PUSH
4279: LD_STRING 
4281: ST_TO_ADDR
// hc_name :=  ;
4282: LD_ADDR_OWVAR 26
4286: PUSH
4287: LD_STRING 
4289: ST_TO_ADDR
// hc_importance := 0 ;
4290: LD_ADDR_OWVAR 32
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4298: LD_INT 1
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 380
// usCommander := CreateHuman ;
4311: LD_ADDR_EXP 45
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4321: LD_EXP 45
4325: PPUSH
4326: LD_INT 11
4328: PPUSH
4329: CALL_OW 52
// if Difficulty > 1 then
4333: LD_OWVAR 67
4337: PUSH
4338: LD_INT 1
4340: GREATER
4341: IFFALSE 4423
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4343: LD_INT 0
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: LD_INT 1
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: PUSH
4363: LD_OWVAR 67
4367: ARRAY
4368: PPUSH
4369: CALL_OW 380
// un := CreateHuman ;
4373: LD_ADDR_VAR 0 3
4377: PUSH
4378: CALL_OW 44
4382: ST_TO_ADDR
// usForces := usForces union un ;
4383: LD_ADDR_EXP 44
4387: PUSH
4388: LD_EXP 44
4392: PUSH
4393: LD_VAR 0 3
4397: UNION
4398: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_INT 1
4406: PPUSH
4407: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 14
4418: PPUSH
4419: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 2
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: LD_INT 4
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_OWVAR 67
4455: ARRAY
4456: PUSH
4457: FOR_TO
4458: IFFALSE 4604
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PUSH
4484: LD_OWVAR 67
4488: ARRAY
4489: PPUSH
4490: CALL_OW 380
// un := CreateHuman ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: CALL_OW 44
4503: ST_TO_ADDR
// usForces := usForces union un ;
4504: LD_ADDR_EXP 44
4508: PUSH
4509: LD_EXP 44
4513: PUSH
4514: LD_VAR 0 3
4518: UNION
4519: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_INT 39
4527: PPUSH
4528: LD_INT 24
4530: PPUSH
4531: LD_INT 4
4533: PPUSH
4534: LD_INT 0
4536: PPUSH
4537: CALL_OW 50
// if i < 3 then
4541: LD_VAR 0 2
4545: PUSH
4546: LD_INT 3
4548: LESS
4549: IFFALSE 4602
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 22
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 58
4568: PUSH
4569: EMPTY
4570: LIST
4571: PUSH
4572: LD_INT 30
4574: PUSH
4575: LD_INT 31
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: LD_VAR 0 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 120
// end ;
4602: GO 4457
4604: POP
4605: POP
// for i := 1 to 2 do
4606: LD_ADDR_VAR 0 2
4610: PUSH
4611: DOUBLE
4612: LD_INT 1
4614: DEC
4615: ST_TO_ADDR
4616: LD_INT 2
4618: PUSH
4619: FOR_TO
4620: IFFALSE 4684
// begin PrepareHuman ( false , 2 , 2 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 2
4627: PPUSH
4628: LD_INT 2
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: GO 4619
4684: POP
4685: POP
// PrepareHuman ( false , 4 , 1 ) ;
4686: LD_INT 0
4688: PPUSH
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 380
// un := CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// usForces := usForces union un ;
4709: LD_ADDR_EXP 44
4713: PUSH
4714: LD_EXP 44
4718: PUSH
4719: LD_VAR 0 3
4723: UNION
4724: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4725: LD_VAR 0 3
4729: PPUSH
4730: LD_INT 39
4732: PPUSH
4733: LD_INT 24
4735: PPUSH
4736: LD_INT 4
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 50
// end ;
4746: LD_VAR 0 1
4750: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4751: LD_EXP 44
4755: PUSH
4756: LD_EXP 6
4760: NOT
4761: AND
4762: PUSH
4763: LD_EXP 14
4767: NOT
4768: AND
4769: IFFALSE 5200
4771: GO 4773
4773: DISABLE
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// begin enable ;
4781: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_EXP 44
4791: PPUSH
4792: LD_INT 25
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 72
4806: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4807: LD_ADDR_VAR 0 4
4811: PUSH
4812: LD_EXP 44
4816: PPUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 72
4831: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4832: LD_ADDR_VAR 0 5
4836: PUSH
4837: LD_EXP 44
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 4
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4857: LD_INT 7
4859: PPUSH
4860: LD_INT 22
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 70
4874: PUSH
4875: LD_INT 1
4877: EQUAL
4878: IFFALSE 4954
// for i in sol do
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_VAR 0 4
4889: PUSH
4890: FOR_IN
4891: IFFALSE 4952
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4893: LD_VAR 0 1
4897: PPUSH
4898: CALL_OW 310
4902: NOT
4903: PUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 310
4913: PPUSH
4914: CALL_OW 266
4918: PUSH
4919: LD_INT 4
4921: EQUAL
4922: NOT
4923: OR
4924: IFFALSE 4950
// begin ComExitBuilding ( i ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_INT 37
4942: PPUSH
4943: LD_INT 23
4945: PPUSH
4946: CALL_OW 174
// end ;
4950: GO 4890
4952: POP
4953: POP
// if eng then
4954: LD_VAR 0 3
4958: IFFALSE 5200
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 1
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 95
4977: PUSH
4978: LD_INT 7
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 24
5000: PUSH
5001: LD_INT 1000
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// if b then
5023: LD_VAR 0 2
5027: IFFALSE 5058
// begin ComExitBuilding ( eng ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5038: LD_VAR 0 3
5042: PPUSH
5043: LD_VAR 0 2
5047: PUSH
5048: LD_INT 1
5050: ARRAY
5051: PPUSH
5052: CALL_OW 190
// end else
5056: GO 5200
// begin for i in eng do
5058: LD_ADDR_VAR 0 1
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: FOR_IN
5069: IFFALSE 5198
// if not HasTask ( i ) then
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 314
5080: NOT
5081: IFFALSE 5196
// begin if americanBuildList then
5083: LD_EXP 46
5087: IFFALSE 5172
// begin if IsInUnit ( i ) then
5089: LD_VAR 0 1
5093: PPUSH
5094: CALL_OW 310
5098: IFFALSE 5109
// ComExitBuilding ( i ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5109: LD_VAR 0 1
5113: PPUSH
5114: LD_EXP 46
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 46
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PUSH
5136: LD_INT 2
5138: ARRAY
5139: PPUSH
5140: LD_EXP 46
5144: PUSH
5145: LD_INT 1
5147: ARRAY
5148: PUSH
5149: LD_INT 3
5151: ARRAY
5152: PPUSH
5153: LD_EXP 46
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PUSH
5162: LD_INT 4
5164: ARRAY
5165: PPUSH
5166: CALL_OW 205
// end else
5170: GO 5196
// if not IsInUnit ( i ) then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 310
5181: NOT
5182: IFFALSE 5196
// ComEnterUnit ( i , usDepot ) ;
5184: LD_VAR 0 1
5188: PPUSH
5189: LD_INT 11
5191: PPUSH
5192: CALL_OW 120
// end ;
5196: GO 5068
5198: POP
5199: POP
// end ; end ; end ;
5200: PPOPN 5
5202: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5203: LD_INT 0
5205: PPUSH
5206: PPUSH
5207: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 35
5215: PUSH
5216: LD_INT 45
5218: PUSH
5219: LD_INT 48
5221: PUSH
5222: LD_EXP 59
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: ST_TO_ADDR
// for i in tech do
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: LD_VAR 0 3
5242: PUSH
5243: FOR_IN
5244: IFFALSE 5262
// AddComResearch ( lab , i ) ;
5246: LD_VAR 0 1
5250: PPUSH
5251: LD_VAR 0 4
5255: PPUSH
5256: CALL_OW 184
5260: GO 5243
5262: POP
5263: POP
// end ;
5264: LD_VAR 0 2
5268: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5269: LD_EXP 12
5273: PUSH
5274: LD_EXP 23
5278: PUSH
5279: LD_EXP 27
5283: LESSEQUAL
5284: AND
5285: IFFALSE 5310
5287: GO 5289
5289: DISABLE
// begin enable ;
5290: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5291: LD_INT 35
5293: PPUSH
5294: LD_INT 2065
5296: PPUSH
5297: CALL_OW 12
5301: PPUSH
5302: CALL_OW 67
// SendConvoy ;
5306: CALL 5416 0 0
// end ;
5310: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5311: LD_EXP 6
5315: PUSH
5316: LD_EXP 18
5320: AND
5321: IFFALSE 5415
5323: GO 5325
5325: DISABLE
// begin if americanHasEscaped then
5326: LD_EXP 8
5330: IFFALSE 5341
// wait ( 3 3$20 ) else
5332: LD_INT 7000
5334: PPUSH
5335: CALL_OW 67
5339: GO 5348
// wait ( 6 6$40 ) ;
5341: LD_INT 14000
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6163 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 , 4 4$00 ] [ Difficulty ] ) ;
5352: LD_INT 14000
5354: PUSH
5355: LD_INT 11900
5357: PUSH
5358: LD_INT 9800
5360: PUSH
5361: LD_INT 8400
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: LD_OWVAR 67
5374: ARRAY
5375: PPUSH
5376: CALL_OW 67
// SendAttack ;
5380: CALL 6163 0 0
// until attackWave < [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5384: LD_EXP 19
5388: PUSH
5389: LD_INT 6
5391: PUSH
5392: LD_INT 7
5394: PUSH
5395: LD_INT 8
5397: PUSH
5398: LD_INT 9
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_OWVAR 67
5411: ARRAY
5412: LESS
5413: IFFALSE 5352
// end ;
5415: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
// road := rand ( 1 , 2 ) ;
5426: LD_ADDR_VAR 0 4
5430: PUSH
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 2
5436: PPUSH
5437: CALL_OW 12
5441: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5442: LD_ADDR_VAR 0 8
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 8
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_VAR 0 4
5461: ARRAY
5462: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 35
5470: PUSH
5471: LD_INT 66
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 101
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_INT 34
5507: PUSH
5508: LD_INT 67
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 38
5517: PUSH
5518: LD_INT 62
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 43
5527: PUSH
5528: LD_INT 54
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 57
5537: PUSH
5538: LD_INT 57
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 77
5547: PUSH
5548: LD_INT 71
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 86
5557: PUSH
5558: LD_INT 60
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 89
5567: PUSH
5568: LD_INT 35
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 93
5577: PUSH
5578: LD_INT 17
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 97
5587: PUSH
5588: LD_INT 10
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 103
5597: PUSH
5598: LD_INT 9
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: ST_TO_ADDR
// if road = 2 then
5617: LD_VAR 0 4
5621: PUSH
5622: LD_INT 2
5624: EQUAL
5625: IFFALSE 5642
// points := ReverseArray ( points ) ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 6
5636: PPUSH
5637: CALL 989 0 1
5641: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5642: LD_INT 4
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 2
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 12
5659: PPUSH
5660: LD_INT 80
5662: PPUSH
5663: CALL 325 0 7
// veh := CreateVehicle ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 45
5676: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_VAR 0 5
5686: PUSH
5687: LD_VAR 0 4
5691: ARRAY
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PPUSH
5697: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5701: LD_VAR 0 3
5705: PPUSH
5706: LD_VAR 0 5
5710: PUSH
5711: LD_VAR 0 4
5715: ARRAY
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 5
5725: PUSH
5726: LD_VAR 0 4
5730: ARRAY
5731: PUSH
5732: LD_INT 2
5734: ARRAY
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5743: LD_INT 0
5745: PPUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_OWVAR 67
5753: PPUSH
5754: CALL_OW 380
// un := CreateHuman ;
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: CALL_OW 44
5767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PPUSH
5778: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 , 48 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5782: LD_INT 60
5784: PUSH
5785: LD_INT 56
5787: PUSH
5788: LD_INT 52
5790: PUSH
5791: LD_INT 48
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_OWVAR 67
5804: ARRAY
5805: PPUSH
5806: CALL_OW 13
5810: PUSH
5811: LD_OWVAR 1
5815: PUSH
5816: LD_INT 30
5818: MOD
5819: PLUS
5820: PUSH
5821: LD_EXP 23
5825: PUSH
5826: LD_INT 4
5828: LESS
5829: OR
5830: IFFALSE 5847
// SetCargo ( veh , mat_cans , 100 ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 100
5842: PPUSH
5843: CALL_OW 290
// for i := 2 to points do
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: DOUBLE
5853: LD_INT 2
5855: DEC
5856: ST_TO_ADDR
5857: LD_VAR 0 6
5861: PUSH
5862: FOR_TO
5863: IFFALSE 5906
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_VAR 0 6
5874: PUSH
5875: LD_VAR 0 7
5879: ARRAY
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: LD_VAR 0 6
5889: PUSH
5890: LD_VAR 0 7
5894: ARRAY
5895: PUSH
5896: LD_INT 2
5898: ARRAY
5899: PPUSH
5900: CALL_OW 171
5904: GO 5862
5906: POP
5907: POP
// convoyCounter := convoyCounter + 1 ;
5908: LD_ADDR_EXP 23
5912: PUSH
5913: LD_EXP 23
5917: PUSH
5918: LD_INT 1
5920: PLUS
5921: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5922: LD_INT 35
5924: PPUSH
5925: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 314
5938: NOT
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: CALL_OW 302
5949: AND
5950: IFFALSE 5991
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5952: LD_VAR 0 3
5956: PPUSH
5957: LD_VAR 0 6
5961: PUSH
5962: LD_VAR 0 6
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_VAR 0 6
5976: PUSH
5977: LD_VAR 0 6
5981: ARRAY
5982: PUSH
5983: LD_INT 2
5985: ARRAY
5986: PPUSH
5987: CALL_OW 111
// if not IsInUnit ( un ) then
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL_OW 310
6000: NOT
6001: IFFALSE 6042
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 6
6012: PUSH
6013: LD_VAR 0 6
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: LD_VAR 0 6
6027: PUSH
6028: LD_VAR 0 6
6032: ARRAY
6033: PUSH
6034: LD_INT 2
6036: ARRAY
6037: PPUSH
6038: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6042: LD_VAR 0 3
6046: PPUSH
6047: LD_VAR 0 8
6051: PPUSH
6052: CALL_OW 308
6056: PUSH
6057: LD_VAR 0 2
6061: PPUSH
6062: LD_VAR 0 8
6066: PPUSH
6067: CALL_OW 308
6071: OR
6072: IFFALSE 5922
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 302
6083: PUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: CALL_OW 302
6093: NOT
6094: AND
6095: PUSH
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_VAR 0 8
6105: PPUSH
6106: CALL_OW 308
6110: AND
6111: IFFALSE 6122
// RemoveUnit ( un ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_VAR 0 8
6131: PPUSH
6132: CALL_OW 308
6136: PUSH
6137: LD_VAR 0 3
6141: PPUSH
6142: CALL_OW 302
6146: AND
6147: IFFALSE 6158
// RemoveUnit ( veh ) ;
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 64
// end ;
6158: LD_VAR 0 1
6162: RET
// export function SendAttack ; var un , veh , i ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// if ingame_video then
6169: LD_OWVAR 52
6173: IFFALSE 6196
// begin repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// until not ingame_video ;
6182: LD_OWVAR 52
6186: NOT
6187: IFFALSE 6175
// wait ( 0 0$5 ) ;
6189: LD_INT 175
6191: PPUSH
6192: CALL_OW 67
// end ; IncomingAttack ;
6196: CALL 15200 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6200: LD_INT 2100
6202: PPUSH
6203: LD_INT 3500
6205: PPUSH
6206: CALL_OW 12
6210: PPUSH
6211: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: DOUBLE
6221: LD_INT 1
6223: DEC
6224: ST_TO_ADDR
6225: LD_INT 3
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: LD_OWVAR 67
6247: ARRAY
6248: PUSH
6249: LD_EXP 19
6253: PUSH
6254: LD_INT 3
6256: DIV
6257: PLUS
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6376
// begin uc_side := 1 ;
6262: LD_ADDR_OWVAR 20
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// uc_nation := 1 ;
6270: LD_ADDR_OWVAR 21
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6278: LD_INT 0
6280: PPUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_INT 2
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_OWVAR 67
6306: ARRAY
6307: PPUSH
6308: CALL_OW 380
// un := CreateHuman ;
6312: LD_ADDR_VAR 0 2
6316: PUSH
6317: CALL_OW 44
6321: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6322: LD_VAR 0 2
6326: PPUSH
6327: LD_INT 37
6329: PPUSH
6330: LD_INT 70
6332: PPUSH
6333: LD_INT 3
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 50
// usAttackers := usAttackers union un ;
6343: LD_ADDR_EXP 47
6347: PUSH
6348: LD_EXP 47
6352: PUSH
6353: LD_VAR 0 2
6357: UNION
6358: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6359: LD_VAR 0 2
6363: PPUSH
6364: LD_INT 40
6366: PPUSH
6367: LD_INT 65
6369: PPUSH
6370: CALL_OW 111
// end ;
6374: GO 6259
6376: POP
6377: POP
// uc_side := 1 ;
6378: LD_ADDR_OWVAR 20
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// uc_nation := 1 ;
6386: LD_ADDR_OWVAR 21
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6394: LD_INT 0
6396: PPUSH
6397: LD_INT 4
6399: PPUSH
6400: LD_INT 2
6402: PPUSH
6403: CALL_OW 380
// un := CreateHuman ;
6407: LD_ADDR_VAR 0 2
6411: PUSH
6412: CALL_OW 44
6416: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 37
6424: PPUSH
6425: LD_INT 70
6427: PPUSH
6428: LD_INT 3
6430: PPUSH
6431: LD_INT 0
6433: PPUSH
6434: CALL_OW 50
// usAttackers := usAttackers union un ;
6438: LD_ADDR_EXP 47
6442: PUSH
6443: LD_EXP 47
6447: PUSH
6448: LD_VAR 0 2
6452: UNION
6453: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 40
6461: PPUSH
6462: LD_INT 65
6464: PPUSH
6465: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6469: LD_ADDR_VAR 0 4
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_OWVAR 67
6483: PUSH
6484: LD_EXP 19
6488: PUSH
6489: LD_INT 4
6491: DIV
6492: PLUS
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6691
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: LD_INT 2
6510: PUSH
6511: LD_INT 2
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: LD_INT 1
6524: PPUSH
6525: LD_INT 3
6527: PPUSH
6528: CALL_OW 12
6532: ARRAY
6533: PPUSH
6534: LD_INT 1
6536: PPUSH
6537: LD_INT 1
6539: PPUSH
6540: LD_INT 4
6542: PUSH
6543: LD_INT 3
6545: PUSH
6546: LD_INT 2
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: LIST
6553: PUSH
6554: LD_INT 1
6556: PPUSH
6557: LD_INT 3
6559: PPUSH
6560: CALL_OW 12
6564: ARRAY
6565: PPUSH
6566: LD_INT 90
6568: PPUSH
6569: CALL 325 0 7
6573: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6574: LD_VAR 0 3
6578: PPUSH
6579: LD_INT 35
6581: PPUSH
6582: LD_INT 65
6584: PPUSH
6585: LD_INT 0
6587: PPUSH
6588: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6592: LD_INT 0
6594: PPUSH
6595: LD_INT 3
6597: PPUSH
6598: LD_OWVAR 67
6602: PUSH
6603: LD_INT 1
6605: PLUS
6606: PPUSH
6607: CALL_OW 380
// un := CreateHuman ;
6611: LD_ADDR_VAR 0 2
6615: PUSH
6616: CALL_OW 44
6620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6621: LD_VAR 0 2
6625: PPUSH
6626: LD_VAR 0 3
6630: PPUSH
6631: CALL_OW 52
// usAttackers := usAttackers union un ;
6635: LD_ADDR_EXP 47
6639: PUSH
6640: LD_EXP 47
6644: PUSH
6645: LD_VAR 0 2
6649: UNION
6650: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6651: LD_VAR 0 3
6655: PPUSH
6656: LD_INT 39
6658: PPUSH
6659: LD_INT 60
6661: PPUSH
6662: CALL_OW 111
// wait ( 0 0$3 ) ;
6666: LD_INT 105
6668: PPUSH
6669: CALL_OW 67
// usAttackers := usAttackers union veh ;
6673: LD_ADDR_EXP 47
6677: PUSH
6678: LD_EXP 47
6682: PUSH
6683: LD_VAR 0 3
6687: UNION
6688: ST_TO_ADDR
// end ;
6689: GO 6494
6691: POP
6692: POP
// attackWave := attackWave + 1 ;
6693: LD_ADDR_EXP 19
6697: PUSH
6698: LD_EXP 19
6702: PUSH
6703: LD_INT 1
6705: PLUS
6706: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6707: LD_EXP 24
6711: PPUSH
6712: CALL_OW 427
// end ;
6716: LD_VAR 0 1
6720: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6721: LD_INT 0
6723: PPUSH
6724: PPUSH
6725: PPUSH
6726: PPUSH
6727: PPUSH
6728: PPUSH
6729: PPUSH
6730: PPUSH
6731: PPUSH
6732: PPUSH
6733: PPUSH
// if retreatAllowed then
6734: LD_EXP 11
6738: IFFALSE 6750
// strategy := 2 else
6740: LD_ADDR_VAR 0 5
6744: PUSH
6745: LD_INT 2
6747: ST_TO_ADDR
6748: GO 6766
// strategy := rand ( 0 , 2 ) ;
6750: LD_ADDR_VAR 0 5
6754: PUSH
6755: LD_INT 0
6757: PPUSH
6758: LD_INT 2
6760: PPUSH
6761: CALL_OW 12
6765: ST_TO_ADDR
// attackFormula := [ ] ;
6766: LD_ADDR_VAR 0 6
6770: PUSH
6771: EMPTY
6772: ST_TO_ADDR
// case strategy of 0 :
6773: LD_VAR 0 5
6777: PUSH
6778: LD_INT 0
6780: DOUBLE
6781: EQUAL
6782: IFTRUE 6786
6784: GO 7116
6786: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6787: LD_INT 11
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 2
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 30
6802: PUSH
6803: LD_INT 4
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PPUSH
6814: CALL_OW 70
6818: NOT
6819: IFFALSE 6891
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6821: LD_ADDR_VAR 0 6
6825: PUSH
6826: LD_INT 41
6828: PUSH
6829: LD_INT 34
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: PUSH
6839: LD_INT 53
6841: PUSH
6842: LD_INT 62
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 37
6851: PUSH
6852: LD_INT 63
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 44
6861: PUSH
6862: LD_INT 45
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 37
6871: PUSH
6872: LD_INT 28
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: ST_TO_ADDR
6889: GO 7114
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6891: LD_INT 12
6893: PPUSH
6894: LD_INT 22
6896: PUSH
6897: LD_INT 2
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 2
6906: PUSH
6907: LD_INT 30
6909: PUSH
6910: LD_INT 4
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 30
6919: PUSH
6920: LD_INT 31
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 30
6929: PUSH
6930: LD_INT 32
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 70
6951: NOT
6952: IFFALSE 7035
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6954: LD_ADDR_VAR 0 6
6958: PUSH
6959: LD_INT 27
6961: PUSH
6962: LD_INT 42
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 27
6971: PUSH
6972: LD_INT 32
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 53
6985: PUSH
6986: LD_INT 62
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 37
6995: PUSH
6996: LD_INT 63
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 44
7005: PUSH
7006: LD_INT 45
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 37
7015: PUSH
7016: LD_INT 28
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: ST_TO_ADDR
7033: GO 7114
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7035: LD_ADDR_VAR 0 6
7039: PUSH
7040: LD_INT 71
7042: PUSH
7043: LD_INT 67
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 54
7052: PUSH
7053: LD_INT 35
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 63
7066: PUSH
7067: LD_INT 40
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 37
7076: PUSH
7077: LD_INT 63
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 44
7086: PUSH
7087: LD_INT 45
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 37
7096: PUSH
7097: LD_INT 28
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: ST_TO_ADDR
// end ; 1 :
7114: GO 7319
7116: LD_INT 1
7118: DOUBLE
7119: EQUAL
7120: IFTRUE 7124
7122: GO 7228
7124: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7125: LD_ADDR_VAR 0 6
7129: PUSH
7130: LD_INT 71
7132: PUSH
7133: LD_INT 67
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 82
7142: PUSH
7143: LD_INT 23
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 53
7152: PUSH
7153: LD_INT 7
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 43
7162: PUSH
7163: LD_INT 10
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 53
7178: PUSH
7179: LD_INT 62
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 37
7188: PUSH
7189: LD_INT 63
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 44
7198: PUSH
7199: LD_INT 45
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 37
7208: PUSH
7209: LD_INT 28
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: ST_TO_ADDR
7226: GO 7319
7228: LD_INT 2
7230: DOUBLE
7231: EQUAL
7232: IFTRUE 7236
7234: GO 7318
7236: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7237: LD_ADDR_VAR 0 6
7241: PUSH
7242: LD_INT 90
7244: PUSH
7245: LD_INT 59
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 108
7254: PUSH
7255: LD_INT 64
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 82
7268: PUSH
7269: LD_INT 75
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 73
7278: PUSH
7279: LD_INT 67
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: LD_INT 101
7288: PUSH
7289: LD_INT 65
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 108
7298: PUSH
7299: LD_INT 62
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: ST_TO_ADDR
7316: GO 7319
7318: POP
// if not attackFormula then
7319: LD_VAR 0 6
7323: NOT
7324: IFFALSE 7328
// exit ;
7326: GO 9006
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7328: LD_ADDR_VAR 0 7
7332: PUSH
7333: LD_EXP 47
7337: PPUSH
7338: LD_INT 25
7340: PUSH
7341: LD_INT 1
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 72
7352: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7353: LD_ADDR_VAR 0 8
7357: PUSH
7358: LD_EXP 47
7362: PPUSH
7363: LD_INT 25
7365: PUSH
7366: LD_INT 4
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PPUSH
7373: CALL_OW 72
7377: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7378: LD_ADDR_VAR 0 9
7382: PUSH
7383: LD_EXP 47
7387: PPUSH
7388: LD_INT 25
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 72
7402: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7403: LD_ADDR_VAR 0 10
7407: PUSH
7408: LD_EXP 47
7412: PPUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 2
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 72
7427: ST_TO_ADDR
// if sci then
7428: LD_VAR 0 8
7432: IFFALSE 7469
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7434: LD_VAR 0 8
7438: PPUSH
7439: LD_VAR 0 6
7443: PUSH
7444: LD_INT 2
7446: ARRAY
7447: PUSH
7448: LD_INT 1
7450: ARRAY
7451: PPUSH
7452: LD_VAR 0 6
7456: PUSH
7457: LD_INT 2
7459: ARRAY
7460: PUSH
7461: LD_INT 2
7463: ARRAY
7464: PPUSH
7465: CALL_OW 111
// repeat wait ( 10 ) ;
7469: LD_INT 10
7471: PPUSH
7472: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7476: LD_ADDR_VAR 0 7
7480: PUSH
7481: LD_EXP 47
7485: PPUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PPUSH
7496: CALL_OW 72
7500: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7501: LD_ADDR_VAR 0 8
7505: PUSH
7506: LD_EXP 47
7510: PPUSH
7511: LD_INT 25
7513: PUSH
7514: LD_INT 4
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PPUSH
7521: CALL_OW 72
7525: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7526: LD_ADDR_VAR 0 9
7530: PUSH
7531: LD_EXP 47
7535: PPUSH
7536: LD_INT 25
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PPUSH
7546: CALL_OW 72
7550: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7551: LD_ADDR_VAR 0 10
7555: PUSH
7556: LD_EXP 47
7560: PPUSH
7561: LD_INT 21
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 72
7575: ST_TO_ADDR
// if sol then
7576: LD_VAR 0 7
7580: IFFALSE 8001
// begin for i in sol do
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_VAR 0 7
7591: PUSH
7592: FOR_IN
7593: IFFALSE 7999
// begin tag := GetTag ( i ) ;
7595: LD_ADDR_VAR 0 4
7599: PUSH
7600: LD_VAR 0 2
7604: PPUSH
7605: CALL_OW 110
7609: ST_TO_ADDR
// if not tag then
7610: LD_VAR 0 4
7614: NOT
7615: IFFALSE 7724
// begin if GetLives ( i ) = 1000 then
7617: LD_VAR 0 2
7621: PPUSH
7622: CALL_OW 256
7626: PUSH
7627: LD_INT 1000
7629: EQUAL
7630: IFFALSE 7646
// SetTag ( i , 1 ) else
7632: LD_VAR 0 2
7636: PPUSH
7637: LD_INT 1
7639: PPUSH
7640: CALL_OW 109
7644: GO 7722
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7646: LD_VAR 0 2
7650: PPUSH
7651: LD_VAR 0 6
7655: PUSH
7656: LD_INT 2
7658: ARRAY
7659: PUSH
7660: LD_INT 1
7662: ARRAY
7663: PPUSH
7664: LD_VAR 0 6
7668: PUSH
7669: LD_INT 2
7671: ARRAY
7672: PUSH
7673: LD_INT 2
7675: ARRAY
7676: PPUSH
7677: CALL_OW 297
7681: PUSH
7682: LD_INT 10
7684: GREATER
7685: IFFALSE 7722
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7687: LD_VAR 0 2
7691: PPUSH
7692: LD_VAR 0 6
7696: PUSH
7697: LD_INT 2
7699: ARRAY
7700: PUSH
7701: LD_INT 1
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 6
7709: PUSH
7710: LD_INT 2
7712: ARRAY
7713: PUSH
7714: LD_INT 2
7716: ARRAY
7717: PPUSH
7718: CALL_OW 111
// end else
7722: GO 7997
// begin if GetLives ( i ) < 760 then
7724: LD_VAR 0 2
7728: PPUSH
7729: CALL_OW 256
7733: PUSH
7734: LD_INT 760
7736: LESS
7737: IFFALSE 7788
// begin SetTag ( i , 0 ) ;
7739: LD_VAR 0 2
7743: PPUSH
7744: LD_INT 0
7746: PPUSH
7747: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7751: LD_VAR 0 2
7755: PPUSH
7756: LD_VAR 0 6
7760: PUSH
7761: LD_INT 2
7763: ARRAY
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PPUSH
7769: LD_VAR 0 6
7773: PUSH
7774: LD_INT 2
7776: ARRAY
7777: PUSH
7778: LD_INT 2
7780: ARRAY
7781: PPUSH
7782: CALL_OW 111
// end else
7786: GO 7997
// if tag <= attackFormula [ 1 ] then
7788: LD_VAR 0 4
7792: PUSH
7793: LD_VAR 0 6
7797: PUSH
7798: LD_INT 1
7800: ARRAY
7801: LESSEQUAL
7802: IFFALSE 7963
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7804: LD_VAR 0 2
7808: PPUSH
7809: LD_VAR 0 6
7813: PUSH
7814: LD_INT 1
7816: ARRAY
7817: PUSH
7818: LD_VAR 0 4
7822: ARRAY
7823: PUSH
7824: LD_INT 1
7826: ARRAY
7827: PPUSH
7828: LD_VAR 0 6
7832: PUSH
7833: LD_INT 1
7835: ARRAY
7836: PUSH
7837: LD_VAR 0 4
7841: ARRAY
7842: PUSH
7843: LD_INT 2
7845: ARRAY
7846: PPUSH
7847: CALL_OW 297
7851: PUSH
7852: LD_INT 6
7854: GREATER
7855: IFFALSE 7906
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7857: LD_VAR 0 2
7861: PPUSH
7862: LD_VAR 0 6
7866: PUSH
7867: LD_INT 1
7869: ARRAY
7870: PUSH
7871: LD_VAR 0 4
7875: ARRAY
7876: PUSH
7877: LD_INT 1
7879: ARRAY
7880: PPUSH
7881: LD_VAR 0 6
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: PUSH
7890: LD_VAR 0 4
7894: ARRAY
7895: PUSH
7896: LD_INT 2
7898: ARRAY
7899: PPUSH
7900: CALL_OW 114
7904: GO 7961
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7906: LD_INT 81
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 91
7918: PUSH
7919: LD_VAR 0 2
7923: PUSH
7924: LD_INT 10
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PPUSH
7936: CALL_OW 69
7940: NOT
7941: IFFALSE 7961
// SetTag ( i , tag + 1 ) ;
7943: LD_VAR 0 2
7947: PPUSH
7948: LD_VAR 0 4
7952: PUSH
7953: LD_INT 1
7955: PLUS
7956: PPUSH
7957: CALL_OW 109
// end else
7961: GO 7997
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 81
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PPUSH
7978: CALL_OW 69
7982: PPUSH
7983: LD_VAR 0 2
7987: PPUSH
7988: CALL_OW 74
7992: PPUSH
7993: CALL_OW 115
// end ; end ;
7997: GO 7592
7999: POP
8000: POP
// end ; if sci then
8001: LD_VAR 0 8
8005: IFFALSE 8274
// begin if not sol and not mech then
8007: LD_VAR 0 7
8011: NOT
8012: PUSH
8013: LD_VAR 0 9
8017: NOT
8018: AND
8019: IFFALSE 8071
// begin for i in sci do
8021: LD_ADDR_VAR 0 2
8025: PUSH
8026: LD_VAR 0 8
8030: PUSH
8031: FOR_IN
8032: IFFALSE 8067
// begin usForces := usForces union i ;
8034: LD_ADDR_EXP 44
8038: PUSH
8039: LD_EXP 44
8043: PUSH
8044: LD_VAR 0 2
8048: UNION
8049: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8050: LD_VAR 0 2
8054: PPUSH
8055: LD_INT 34
8057: PPUSH
8058: LD_INT 68
8060: PPUSH
8061: CALL_OW 111
// end ;
8065: GO 8031
8067: POP
8068: POP
// end else
8069: GO 8274
// for i in sci do
8071: LD_ADDR_VAR 0 2
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: FOR_IN
8082: IFFALSE 8272
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8084: LD_VAR 0 2
8088: PPUSH
8089: LD_VAR 0 6
8093: PUSH
8094: LD_INT 2
8096: ARRAY
8097: PUSH
8098: LD_INT 1
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 6
8106: PUSH
8107: LD_INT 2
8109: ARRAY
8110: PUSH
8111: LD_INT 2
8113: ARRAY
8114: PPUSH
8115: CALL_OW 297
8119: PUSH
8120: LD_INT 10
8122: GREATER
8123: IFFALSE 8162
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8125: LD_VAR 0 2
8129: PPUSH
8130: LD_VAR 0 6
8134: PUSH
8135: LD_INT 2
8137: ARRAY
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PPUSH
8143: LD_VAR 0 6
8147: PUSH
8148: LD_INT 2
8150: ARRAY
8151: PUSH
8152: LD_INT 2
8154: ARRAY
8155: PPUSH
8156: CALL_OW 111
8160: GO 8270
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8162: LD_VAR 0 7
8166: PPUSH
8167: LD_INT 3
8169: PUSH
8170: LD_INT 24
8172: PUSH
8173: LD_INT 1000
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 91
8186: PUSH
8187: LD_VAR 0 2
8191: PUSH
8192: LD_INT 10
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PPUSH
8204: CALL_OW 72
8208: IFFALSE 8270
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8210: LD_VAR 0 2
8214: PPUSH
8215: LD_VAR 0 7
8219: PPUSH
8220: LD_INT 3
8222: PUSH
8223: LD_INT 24
8225: PUSH
8226: LD_INT 1000
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 91
8239: PUSH
8240: LD_VAR 0 2
8244: PUSH
8245: LD_INT 10
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PPUSH
8257: CALL_OW 72
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: PPUSH
8266: CALL_OW 128
8270: GO 8081
8272: POP
8273: POP
// end ; if mech then
8274: LD_VAR 0 9
8278: IFFALSE 8988
// begin for i in mech do
8280: LD_ADDR_VAR 0 2
8284: PUSH
8285: LD_VAR 0 9
8289: PUSH
8290: FOR_IN
8291: IFFALSE 8986
// begin tag := GetTag ( i ) ;
8293: LD_ADDR_VAR 0 4
8297: PUSH
8298: LD_VAR 0 2
8302: PPUSH
8303: CALL_OW 110
8307: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8308: LD_ADDR_VAR 0 11
8312: PUSH
8313: LD_VAR 0 2
8317: PPUSH
8318: CALL_OW 310
8322: ST_TO_ADDR
// if not tag then
8323: LD_VAR 0 4
8327: NOT
8328: IFFALSE 8699
// begin if veh then
8330: LD_VAR 0 11
8334: IFFALSE 8505
// begin if GetLives ( veh ) = 1000 then
8336: LD_VAR 0 11
8340: PPUSH
8341: CALL_OW 256
8345: PUSH
8346: LD_INT 1000
8348: EQUAL
8349: IFFALSE 8365
// SetTag ( i , 1 ) else
8351: LD_VAR 0 2
8355: PPUSH
8356: LD_INT 1
8358: PPUSH
8359: CALL_OW 109
8363: GO 8503
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8365: LD_VAR 0 11
8369: PPUSH
8370: LD_VAR 0 6
8374: PUSH
8375: LD_INT 3
8377: ARRAY
8378: PUSH
8379: LD_INT 1
8381: ARRAY
8382: PPUSH
8383: LD_VAR 0 6
8387: PUSH
8388: LD_INT 3
8390: ARRAY
8391: PUSH
8392: LD_INT 2
8394: ARRAY
8395: PPUSH
8396: CALL_OW 297
8400: PUSH
8401: LD_INT 8
8403: GREATER
8404: IFFALSE 8443
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8406: LD_VAR 0 11
8410: PPUSH
8411: LD_VAR 0 6
8415: PUSH
8416: LD_INT 3
8418: ARRAY
8419: PUSH
8420: LD_INT 1
8422: ARRAY
8423: PPUSH
8424: LD_VAR 0 6
8428: PUSH
8429: LD_INT 3
8431: ARRAY
8432: PUSH
8433: LD_INT 2
8435: ARRAY
8436: PPUSH
8437: CALL_OW 111
8441: GO 8503
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8443: LD_INT 81
8445: PUSH
8446: LD_INT 1
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: LD_INT 91
8455: PUSH
8456: LD_VAR 0 2
8460: PUSH
8461: LD_INT 10
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PPUSH
8473: CALL_OW 69
8477: NOT
8478: IFFALSE 8503
// begin ComExitVehicle ( i ) ;
8480: LD_VAR 0 2
8484: PPUSH
8485: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8489: LD_VAR 0 2
8493: PPUSH
8494: LD_VAR 0 11
8498: PPUSH
8499: CALL_OW 189
// end ; end else
8503: GO 8697
// if GetLives ( i ) < 400 then
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 256
8514: PUSH
8515: LD_INT 400
8517: LESS
8518: IFFALSE 8569
// begin usAttackers := usAttackers diff i ;
8520: LD_ADDR_EXP 47
8524: PUSH
8525: LD_EXP 47
8529: PUSH
8530: LD_VAR 0 2
8534: DIFF
8535: ST_TO_ADDR
// usForces := usForces union i ;
8536: LD_ADDR_EXP 44
8540: PUSH
8541: LD_EXP 44
8545: PUSH
8546: LD_VAR 0 2
8550: UNION
8551: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8552: LD_VAR 0 2
8556: PPUSH
8557: LD_INT 34
8559: PPUSH
8560: LD_INT 68
8562: PPUSH
8563: CALL_OW 111
// end else
8567: GO 8697
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8569: LD_VAR 0 10
8573: PPUSH
8574: LD_INT 58
8576: PUSH
8577: EMPTY
8578: LIST
8579: PUSH
8580: LD_INT 24
8582: PUSH
8583: LD_INT 1000
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PPUSH
8594: CALL_OW 72
8598: PUSH
8599: LD_VAR 0 2
8603: PPUSH
8604: CALL_OW 314
8608: NOT
8609: AND
8610: PUSH
8611: LD_INT 81
8613: PUSH
8614: LD_INT 1
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 91
8623: PUSH
8624: LD_VAR 0 2
8628: PUSH
8629: LD_INT 9
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PPUSH
8641: CALL_OW 69
8645: OR
8646: IFFALSE 8697
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8648: LD_VAR 0 2
8652: PPUSH
8653: LD_VAR 0 10
8657: PPUSH
8658: LD_INT 58
8660: PUSH
8661: EMPTY
8662: LIST
8663: PUSH
8664: LD_INT 24
8666: PUSH
8667: LD_INT 250
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PPUSH
8678: CALL_OW 72
8682: PPUSH
8683: LD_VAR 0 2
8687: PPUSH
8688: CALL_OW 74
8692: PPUSH
8693: CALL_OW 120
// end else
8697: GO 8984
// begin if veh and GetLives ( veh ) < 760 then
8699: LD_VAR 0 11
8703: PUSH
8704: LD_VAR 0 11
8708: PPUSH
8709: CALL_OW 256
8713: PUSH
8714: LD_INT 760
8716: LESS
8717: AND
8718: IFFALSE 8769
// begin SetTag ( i , 0 ) ;
8720: LD_VAR 0 2
8724: PPUSH
8725: LD_INT 0
8727: PPUSH
8728: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8732: LD_VAR 0 11
8736: PPUSH
8737: LD_VAR 0 6
8741: PUSH
8742: LD_INT 3
8744: ARRAY
8745: PUSH
8746: LD_INT 1
8748: ARRAY
8749: PPUSH
8750: LD_VAR 0 6
8754: PUSH
8755: LD_INT 3
8757: ARRAY
8758: PUSH
8759: LD_INT 2
8761: ARRAY
8762: PPUSH
8763: CALL_OW 111
// end else
8767: GO 8984
// if veh then
8769: LD_VAR 0 11
8773: IFFALSE 8984
// if tag <= attackFormula [ 4 ] then
8775: LD_VAR 0 4
8779: PUSH
8780: LD_VAR 0 6
8784: PUSH
8785: LD_INT 4
8787: ARRAY
8788: LESSEQUAL
8789: IFFALSE 8950
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8791: LD_VAR 0 11
8795: PPUSH
8796: LD_VAR 0 6
8800: PUSH
8801: LD_INT 4
8803: ARRAY
8804: PUSH
8805: LD_VAR 0 4
8809: ARRAY
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 4
8822: ARRAY
8823: PUSH
8824: LD_VAR 0 4
8828: ARRAY
8829: PUSH
8830: LD_INT 2
8832: ARRAY
8833: PPUSH
8834: CALL_OW 297
8838: PUSH
8839: LD_INT 6
8841: GREATER
8842: IFFALSE 8893
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8844: LD_VAR 0 11
8848: PPUSH
8849: LD_VAR 0 6
8853: PUSH
8854: LD_INT 4
8856: ARRAY
8857: PUSH
8858: LD_VAR 0 4
8862: ARRAY
8863: PUSH
8864: LD_INT 1
8866: ARRAY
8867: PPUSH
8868: LD_VAR 0 6
8872: PUSH
8873: LD_INT 4
8875: ARRAY
8876: PUSH
8877: LD_VAR 0 4
8881: ARRAY
8882: PUSH
8883: LD_INT 2
8885: ARRAY
8886: PPUSH
8887: CALL_OW 114
8891: GO 8948
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8893: LD_INT 81
8895: PUSH
8896: LD_INT 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: LD_INT 91
8905: PUSH
8906: LD_VAR 0 11
8910: PUSH
8911: LD_INT 10
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 69
8927: NOT
8928: IFFALSE 8948
// SetTag ( i , tag + 1 ) ;
8930: LD_VAR 0 2
8934: PPUSH
8935: LD_VAR 0 4
8939: PUSH
8940: LD_INT 1
8942: PLUS
8943: PPUSH
8944: CALL_OW 109
// end else
8948: GO 8984
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8950: LD_VAR 0 11
8954: PPUSH
8955: LD_INT 81
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 69
8969: PPUSH
8970: LD_VAR 0 2
8974: PPUSH
8975: CALL_OW 74
8979: PPUSH
8980: CALL_OW 115
// end ; end ;
8984: GO 8290
8986: POP
8987: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8988: LD_EXP 47
8992: PPUSH
8993: LD_INT 52
8995: PUSH
8996: EMPTY
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: NOT
9004: IFFALSE 7469
// end ;
9006: LD_VAR 0 1
9010: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9011: LD_INT 22
9013: PUSH
9014: LD_INT 1
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: LD_INT 32
9023: PUSH
9024: LD_INT 1
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PPUSH
9035: CALL_OW 69
9039: IFFALSE 9116
9041: GO 9043
9043: DISABLE
9044: LD_INT 0
9046: PPUSH
// begin enable ;
9047: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9048: LD_ADDR_VAR 0 1
9052: PUSH
9053: LD_INT 22
9055: PUSH
9056: LD_INT 1
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 32
9065: PUSH
9066: LD_INT 1
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 69
9081: PUSH
9082: FOR_IN
9083: IFFALSE 9114
// if GetFuel ( i ) < 10 then
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 261
9094: PUSH
9095: LD_INT 10
9097: LESS
9098: IFFALSE 9112
// SetFuel ( i , 10 ) ;
9100: LD_VAR 0 1
9104: PPUSH
9105: LD_INT 10
9107: PPUSH
9108: CALL_OW 240
9112: GO 9082
9114: POP
9115: POP
// end ; end_of_file
9116: PPOPN 1
9118: END
// export function Action ; var hasAll , i , tmp ; begin
9119: LD_INT 0
9121: PPUSH
9122: PPUSH
9123: PPUSH
9124: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9125: LD_ADDR_VAR 0 2
9129: PUSH
9130: LD_INT 22
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: LD_INT 21
9142: PUSH
9143: LD_INT 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 23
9152: PUSH
9153: LD_INT 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 69
9169: PUSH
9170: LD_INT 7
9172: GREATEREQUAL
9173: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9174: LD_VAR 0 2
9178: PPUSH
9179: LD_STRING 03_HasAll
9181: PPUSH
9182: CALL_OW 39
// Video ( true ) ;
9186: LD_INT 1
9188: PPUSH
9189: CALL 75400 0 1
// CenterNowOnUnits ( Heike ) ;
9193: LD_EXP 28
9197: PPUSH
9198: CALL_OW 87
// wait ( 0 0$2 ) ;
9202: LD_INT 70
9204: PPUSH
9205: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9209: LD_EXP 36
9213: PPUSH
9214: LD_STRING DF-1-start
9216: PPUSH
9217: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9221: LD_EXP 28
9225: PPUSH
9226: LD_EXP 36
9230: PPUSH
9231: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9235: LD_EXP 28
9239: PPUSH
9240: LD_STRING DH-1-start
9242: PPUSH
9243: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9247: LD_EXP 37
9251: PPUSH
9252: LD_INT 92
9254: PPUSH
9255: LD_INT 21
9257: PPUSH
9258: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9262: LD_EXP 32
9266: PPUSH
9267: LD_INT 94
9269: PPUSH
9270: LD_INT 23
9272: PPUSH
9273: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9277: LD_EXP 40
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: LD_INT 90
9288: PPUSH
9289: LD_INT 23
9291: PPUSH
9292: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9296: LD_EXP 40
9300: PUSH
9301: LD_INT 2
9303: ARRAY
9304: PPUSH
9305: LD_INT 93
9307: PPUSH
9308: LD_INT 25
9310: PPUSH
9311: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9315: LD_EXP 40
9319: PPUSH
9320: LD_EXP 37
9324: PPUSH
9325: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9329: LD_EXP 37
9333: PUSH
9334: LD_EXP 32
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PPUSH
9343: LD_EXP 28
9347: PPUSH
9348: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9352: LD_EXP 28
9356: PPUSH
9357: LD_EXP 37
9361: PPUSH
9362: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9366: LD_INT 35
9368: PPUSH
9369: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9373: LD_EXP 37
9377: PPUSH
9378: LD_INT 92
9380: PPUSH
9381: LD_INT 21
9383: PPUSH
9384: CALL_OW 307
9388: IFFALSE 9366
// Say ( Omar , DO-1-start ) ;
9390: LD_EXP 37
9394: PPUSH
9395: LD_STRING DO-1-start
9397: PPUSH
9398: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9402: LD_EXP 28
9406: PPUSH
9407: LD_STRING DH-2-start
9409: PPUSH
9410: CALL_OW 88
// if hasAll then
9414: LD_VAR 0 2
9418: IFFALSE 9546
// begin Say ( Omar , DO-2-start ) ;
9420: LD_EXP 37
9424: PPUSH
9425: LD_STRING DO-2-start
9427: PPUSH
9428: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9432: LD_EXP 37
9436: PPUSH
9437: LD_STRING DO-3-start
9439: PPUSH
9440: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9444: LD_EXP 28
9448: PPUSH
9449: LD_STRING DH-3-start
9451: PPUSH
9452: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9456: LD_EXP 36
9460: PPUSH
9461: LD_STRING DF-2-start
9463: PPUSH
9464: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9468: LD_EXP 37
9472: PPUSH
9473: LD_EXP 36
9477: PPUSH
9478: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9482: LD_EXP 37
9486: PPUSH
9487: LD_STRING DO-4-start
9489: PPUSH
9490: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9494: LD_EXP 36
9498: PPUSH
9499: LD_STRING DF-3-start
9501: PPUSH
9502: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9506: LD_EXP 37
9510: PPUSH
9511: LD_STRING DO-5-start
9513: PPUSH
9514: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9518: LD_EXP 36
9522: PPUSH
9523: LD_STRING DF-4-start
9525: PPUSH
9526: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9530: LD_EXP 37
9534: PPUSH
9535: LD_EXP 28
9539: PPUSH
9540: CALL_OW 119
// end else
9544: GO 9646
// begin Say ( Omar , DO-2-start-a ) ;
9546: LD_EXP 37
9550: PPUSH
9551: LD_STRING DO-2-start-a
9553: PPUSH
9554: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9558: LD_EXP 37
9562: PPUSH
9563: LD_STRING DO-3-start-a
9565: PPUSH
9566: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9570: LD_EXP 28
9574: PPUSH
9575: LD_STRING DH-3-start-a
9577: PPUSH
9578: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9582: LD_EXP 36
9586: PPUSH
9587: LD_STRING DF-2-start-a
9589: PPUSH
9590: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9594: LD_EXP 37
9598: PPUSH
9599: LD_EXP 36
9603: PPUSH
9604: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9608: LD_EXP 37
9612: PPUSH
9613: LD_STRING DO-4-start-a
9615: PPUSH
9616: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9620: LD_EXP 36
9624: PPUSH
9625: LD_STRING DF-3-start-a
9627: PPUSH
9628: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9632: LD_EXP 37
9636: PPUSH
9637: LD_EXP 28
9641: PPUSH
9642: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9646: LD_INT 10
9648: PPUSH
9649: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9653: LD_EXP 37
9657: PPUSH
9658: LD_STRING DO-1-mission
9660: PPUSH
9661: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9665: LD_EXP 37
9669: PPUSH
9670: LD_STRING DO-2-mission
9672: PPUSH
9673: CALL_OW 88
// if not hasAll then
9677: LD_VAR 0 2
9681: NOT
9682: IFFALSE 9696
// Say ( Omar , DO-3-mission ) ;
9684: LD_EXP 37
9688: PPUSH
9689: LD_STRING DO-3-mission
9691: PPUSH
9692: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9696: LD_EXP 37
9700: PPUSH
9701: LD_STRING DO-4-mission
9703: PPUSH
9704: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9708: LD_EXP 28
9712: PPUSH
9713: LD_STRING DH-1-mission
9715: PPUSH
9716: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9720: LD_EXP 36
9724: PPUSH
9725: LD_STRING DF-1-mission
9727: PPUSH
9728: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9732: LD_EXP 37
9736: PPUSH
9737: LD_STRING DO-5-mission
9739: PPUSH
9740: CALL_OW 88
// if not hasAll then
9744: LD_VAR 0 2
9748: NOT
9749: IFFALSE 9884
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9751: LD_ADDR_VAR 0 4
9755: PUSH
9756: LD_INT 22
9758: PUSH
9759: LD_INT 2
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 21
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 23
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 69
9795: ST_TO_ADDR
// for i := 7 downto tmp do
9796: LD_ADDR_VAR 0 3
9800: PUSH
9801: DOUBLE
9802: LD_INT 7
9804: INC
9805: ST_TO_ADDR
9806: LD_VAR 0 4
9810: PUSH
9811: FOR_DOWNTO
9812: IFFALSE 9882
// begin if omarSquad < 3 then
9814: LD_EXP 40
9818: PUSH
9819: LD_INT 3
9821: LESS
9822: IFFALSE 9826
// break ;
9824: GO 9882
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9826: LD_EXP 40
9830: PUSH
9831: LD_INT 3
9833: ARRAY
9834: PPUSH
9835: LD_INT 2
9837: PPUSH
9838: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9842: LD_ADDR_EXP 42
9846: PUSH
9847: LD_EXP 42
9851: PUSH
9852: LD_EXP 40
9856: PUSH
9857: LD_INT 3
9859: ARRAY
9860: UNION
9861: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9862: LD_ADDR_EXP 40
9866: PUSH
9867: LD_EXP 40
9871: PPUSH
9872: LD_INT 3
9874: PPUSH
9875: CALL_OW 3
9879: ST_TO_ADDR
// end ;
9880: GO 9811
9882: POP
9883: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9884: LD_EXP 37
9888: PUSH
9889: LD_EXP 40
9893: ADD
9894: PPUSH
9895: LD_INT 103
9897: PPUSH
9898: LD_INT 9
9900: PPUSH
9901: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9905: LD_VAR 0 2
9909: PUSH
9910: LD_EXP 33
9914: PPUSH
9915: CALL_OW 302
9919: AND
9920: IFFALSE 9981
// begin wait ( 0 0$3 ) ;
9922: LD_INT 105
9924: PPUSH
9925: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9929: LD_EXP 33
9933: PPUSH
9934: LD_EXP 36
9938: PPUSH
9939: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9943: LD_EXP 33
9947: PPUSH
9948: LD_STRING DK-1-side
9950: PPUSH
9951: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9955: LD_EXP 36
9959: PPUSH
9960: LD_EXP 33
9964: PPUSH
9965: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9969: LD_EXP 36
9973: PPUSH
9974: LD_STRING DF-1-side
9976: PPUSH
9977: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9981: LD_INT 22
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 69
9995: PPUSH
9996: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10000: LD_EXP 36
10004: PUSH
10005: LD_EXP 39
10009: ADD
10010: PPUSH
10011: LD_INT 108
10013: PPUSH
10014: LD_INT 62
10016: PPUSH
10017: CALL_OW 111
// gameStarted := true ;
10021: LD_ADDR_EXP 3
10025: PUSH
10026: LD_INT 1
10028: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10029: LD_INT 105
10031: PPUSH
10032: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10036: LD_EXP 28
10040: PPUSH
10041: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10045: LD_EXP 28
10049: PPUSH
10050: LD_EXP 32
10054: PPUSH
10055: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10059: LD_INT 22
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 69
10073: PUSH
10074: LD_EXP 28
10078: DIFF
10079: PPUSH
10080: LD_EXP 28
10084: PPUSH
10085: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10089: LD_EXP 28
10093: PPUSH
10094: LD_STRING DH-1-explore
10096: PPUSH
10097: CALL_OW 88
// if Givi then
10101: LD_EXP 29
10105: IFFALSE 10121
// Say ( Givi , DG-1-explore ) else
10107: LD_EXP 29
10111: PPUSH
10112: LD_STRING DG-1-explore
10114: PPUSH
10115: CALL_OW 88
10119: GO 10158
// if heikeSecondSquad then
10121: LD_EXP 42
10125: IFFALSE 10158
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10127: LD_EXP 42
10131: PPUSH
10132: LD_INT 26
10134: PUSH
10135: LD_INT 1
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 72
10146: PUSH
10147: LD_INT 1
10149: ARRAY
10150: PPUSH
10151: LD_STRING DArm-1-explore
10153: PPUSH
10154: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10158: LD_EXP 32
10162: PPUSH
10163: LD_STRING DA-1-explore
10165: PPUSH
10166: CALL_OW 88
// if Sophia then
10170: LD_EXP 34
10174: IFFALSE 10252
// begin Say ( Sophia , DS-2-explore ) ;
10176: LD_EXP 34
10180: PPUSH
10181: LD_STRING DS-2-explore
10183: PPUSH
10184: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10188: LD_EXP 32
10192: PPUSH
10193: LD_STRING DA-2-explore
10195: PPUSH
10196: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10200: LD_EXP 34
10204: PPUSH
10205: LD_EXP 32
10209: PPUSH
10210: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10214: LD_EXP 32
10218: PPUSH
10219: LD_EXP 34
10223: PPUSH
10224: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10228: LD_EXP 34
10232: PPUSH
10233: LD_STRING DS-3-explore
10235: PPUSH
10236: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10240: LD_EXP 32
10244: PPUSH
10245: LD_STRING DA-3-explore
10247: PPUSH
10248: CALL_OW 88
// end ; if Mike then
10252: LD_EXP 30
10256: IFFALSE 10312
// begin Say ( Mike , DM-1-explore ) ;
10258: LD_EXP 30
10262: PPUSH
10263: LD_STRING DM-1-explore
10265: PPUSH
10266: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10270: LD_EXP 28
10274: PPUSH
10275: LD_STRING DH-2-explore
10277: PPUSH
10278: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10282: LD_EXP 30
10286: PPUSH
10287: LD_STRING DM-2-explore
10289: PPUSH
10290: CALL_OW 88
// if Kaia then
10294: LD_EXP 33
10298: IFFALSE 10312
// Say ( Kaia , DK-1-explore ) ;
10300: LD_EXP 33
10304: PPUSH
10305: LD_STRING DK-1-explore
10307: PPUSH
10308: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10312: LD_INT 22
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PPUSH
10322: CALL_OW 69
10326: PPUSH
10327: CALL_OW 139
// Video ( false ) ;
10331: LD_INT 0
10333: PPUSH
10334: CALL 75400 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10338: LD_STRING BuildBase
10340: PPUSH
10341: CALL_OW 337
// SaveForQuickRestart ;
10345: CALL_OW 22
// end ;
10349: LD_VAR 0 1
10353: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10354: LD_EXP 5
10358: NOT
10359: PUSH
10360: LD_EXP 6
10364: NOT
10365: AND
10366: PUSH
10367: LD_INT 5
10369: PPUSH
10370: LD_INT 22
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 70
10384: AND
10385: PUSH
10386: LD_EXP 6
10390: NOT
10391: AND
10392: IFFALSE 10477
10394: GO 10396
10396: DISABLE
// begin if Mike then
10397: LD_EXP 30
10401: IFFALSE 10417
// Say ( Mike , DM-1-scout ) else
10403: LD_EXP 30
10407: PPUSH
10408: LD_STRING DM-1-scout
10410: PPUSH
10411: CALL_OW 88
10415: GO 10448
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10417: LD_EXP 42
10421: PPUSH
10422: LD_INT 26
10424: PUSH
10425: LD_INT 1
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PPUSH
10432: CALL_OW 72
10436: PUSH
10437: LD_INT 1
10439: ARRAY
10440: PPUSH
10441: LD_STRING DArm-1-explore
10443: PPUSH
10444: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10448: LD_INT 54
10450: PPUSH
10451: LD_INT 35
10453: PPUSH
10454: LD_INT 2
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10464: LD_INT 54
10466: PPUSH
10467: LD_INT 35
10469: PPUSH
10470: LD_INT 2
10472: PPUSH
10473: CALL_OW 331
// end ;
10477: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10478: LD_INT 6
10480: PPUSH
10481: LD_INT 22
10483: PUSH
10484: LD_INT 2
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PPUSH
10491: CALL_OW 70
10495: PUSH
10496: LD_EXP 6
10500: NOT
10501: AND
10502: IFFALSE 10756
10504: GO 10506
10506: DISABLE
10507: LD_INT 0
10509: PPUSH
10510: PPUSH
10511: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10512: LD_ADDR_VAR 0 1
10516: PUSH
10517: LD_EXP 42
10521: PPUSH
10522: LD_INT 26
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 72
10536: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10537: LD_ADDR_VAR 0 2
10541: PUSH
10542: LD_EXP 42
10546: PPUSH
10547: LD_INT 26
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 72
10561: ST_TO_ADDR
// DialogueOn ;
10562: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10566: LD_INT 36
10568: PPUSH
10569: LD_INT 22
10571: PPUSH
10572: LD_INT 2
10574: PPUSH
10575: LD_INT 8
10577: PPUSH
10578: CALL_OW 330
// dwait ( 0 0$1 ) ;
10582: LD_INT 35
10584: PPUSH
10585: CALL_OW 68
// speakerOk := false ;
10589: LD_ADDR_VAR 0 3
10593: PUSH
10594: LD_INT 0
10596: ST_TO_ADDR
// if Mike then
10597: LD_EXP 30
10601: IFFALSE 10623
// speakerOk := Say ( Mike , DM-1-spot ) else
10603: LD_ADDR_VAR 0 3
10607: PUSH
10608: LD_EXP 30
10612: PPUSH
10613: LD_STRING DM-1-spot
10615: PPUSH
10616: CALL_OW 88
10620: ST_TO_ADDR
10621: GO 10651
// if randomMen then
10623: LD_VAR 0 1
10627: IFFALSE 10651
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10629: LD_ADDR_VAR 0 3
10633: PUSH
10634: LD_VAR 0 1
10638: PUSH
10639: LD_INT 1
10641: ARRAY
10642: PPUSH
10643: LD_STRING DArm-1-spot-a
10645: PPUSH
10646: CALL_OW 88
10650: ST_TO_ADDR
// if speakerOk then
10651: LD_VAR 0 3
10655: IFFALSE 10699
// begin if Givi then
10657: LD_EXP 29
10661: IFFALSE 10677
// Say ( Givi , DG-1-spot ) else
10663: LD_EXP 29
10667: PPUSH
10668: LD_STRING DG-1-spot
10670: PPUSH
10671: CALL_OW 88
10675: GO 10699
// if randomWomen then
10677: LD_VAR 0 2
10681: IFFALSE 10699
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10683: LD_VAR 0 2
10687: PUSH
10688: LD_INT 1
10690: ARRAY
10691: PPUSH
10692: LD_STRING DArf-1-spot-a
10694: PPUSH
10695: CALL_OW 88
// end ; if Mike then
10699: LD_EXP 30
10703: IFFALSE 10719
// Say ( Heike , DH-1-spot ) else
10705: LD_EXP 28
10709: PPUSH
10710: LD_STRING DH-1-spot
10712: PPUSH
10713: CALL_OW 88
10717: GO 10731
// Say ( Heike , DH-1-spot-a ) ;
10719: LD_EXP 28
10723: PPUSH
10724: LD_STRING DH-1-spot-a
10726: PPUSH
10727: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10731: LD_INT 36
10733: PPUSH
10734: LD_INT 22
10736: PPUSH
10737: LD_INT 2
10739: PPUSH
10740: CALL_OW 331
// DialogueOff ;
10744: CALL_OW 7
// americanBaseSpoted := true ;
10748: LD_ADDR_EXP 5
10752: PUSH
10753: LD_INT 1
10755: ST_TO_ADDR
// end ;
10756: PPOPN 3
10758: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10759: LD_EXP 5
10763: NOT
10764: PUSH
10765: LD_INT 22
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 101
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 69
10793: AND
10794: PUSH
10795: LD_EXP 6
10799: NOT
10800: AND
10801: IFFALSE 10887
10803: GO 10805
10805: DISABLE
10806: LD_INT 0
10808: PPUSH
// begin americanBaseSpoted := true ;
10809: LD_ADDR_EXP 5
10813: PUSH
10814: LD_INT 1
10816: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10817: LD_ADDR_VAR 0 1
10821: PUSH
10822: LD_EXP 42
10826: PPUSH
10827: LD_INT 26
10829: PUSH
10830: LD_INT 1
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PPUSH
10837: CALL_OW 72
10841: ST_TO_ADDR
// if not randomMen then
10842: LD_VAR 0 1
10846: NOT
10847: IFFALSE 10851
// exit ;
10849: GO 10887
// DialogueOn ;
10851: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10855: LD_VAR 0 1
10859: PUSH
10860: LD_INT 1
10862: ARRAY
10863: PPUSH
10864: LD_STRING DArm-1-spot-a
10866: PPUSH
10867: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10871: LD_EXP 28
10875: PPUSH
10876: LD_STRING DH-1-spot-a
10878: PPUSH
10879: CALL_OW 88
// DialogueOff ;
10883: CALL_OW 7
// end ;
10887: PPOPN 1
10889: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10890: LD_INT 11
10892: PPUSH
10893: CALL_OW 255
10897: PUSH
10898: LD_INT 2
10900: EQUAL
10901: PUSH
10902: LD_INT 7
10904: PPUSH
10905: LD_INT 22
10907: PUSH
10908: LD_INT 1
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: LD_INT 50
10920: PUSH
10921: EMPTY
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 30
10930: PUSH
10931: LD_INT 31
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: PPUSH
10943: CALL_OW 70
10947: OR
10948: PUSH
10949: LD_INT 7
10951: PPUSH
10952: LD_INT 22
10954: PUSH
10955: LD_INT 2
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 70
10966: PUSH
10967: LD_INT 1
10969: GREATER
10970: OR
10971: PUSH
10972: LD_EXP 44
10976: PUSH
10977: LD_INT 4
10979: LESSEQUAL
10980: OR
10981: IFFALSE 11560
10983: GO 10985
10985: DISABLE
10986: LD_INT 0
10988: PPUSH
10989: PPUSH
// begin wait ( 0 0$3 ) ;
10990: LD_INT 105
10992: PPUSH
10993: CALL_OW 67
// americanStartRun := true ;
10997: LD_ADDR_EXP 14
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// if IsOk ( usCommander ) then
11005: LD_EXP 45
11009: PPUSH
11010: CALL_OW 302
11014: IFFALSE 11044
// begin usForces := usForces union usCommander ;
11016: LD_ADDR_EXP 44
11020: PUSH
11021: LD_EXP 44
11025: PUSH
11026: LD_EXP 45
11030: UNION
11031: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11032: LD_EXP 45
11036: PPUSH
11037: LD_STRING DUsm-1-assault
11039: PPUSH
11040: CALL_OW 88
// end ; for i in usForces do
11044: LD_ADDR_VAR 0 1
11048: PUSH
11049: LD_EXP 44
11053: PUSH
11054: FOR_IN
11055: IFFALSE 11101
// begin if IsInUnit ( i ) then
11057: LD_VAR 0 1
11061: PPUSH
11062: CALL_OW 310
11066: IFFALSE 11077
// ComExitBuilding ( i ) ;
11068: LD_VAR 0 1
11072: PPUSH
11073: CALL_OW 122
// wait ( 3 ) ;
11077: LD_INT 3
11079: PPUSH
11080: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11084: LD_VAR 0 1
11088: PPUSH
11089: LD_INT 34
11091: PPUSH
11092: LD_INT 67
11094: PPUSH
11095: CALL_OW 111
// end ;
11099: GO 11054
11101: POP
11102: POP
// Say ( Heike , DH-1-assault ) ;
11103: LD_EXP 28
11107: PPUSH
11108: LD_STRING DH-1-assault
11110: PPUSH
11111: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11115: LD_INT 35
11117: PPUSH
11118: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11122: LD_VAR 0 1
11126: PPUSH
11127: LD_INT 34
11129: PPUSH
11130: LD_INT 67
11132: PPUSH
11133: CALL_OW 111
// until not usForces ;
11137: LD_EXP 44
11141: NOT
11142: IFFALSE 11115
// music_nat := 2 ;
11144: LD_ADDR_OWVAR 71
11148: PUSH
11149: LD_INT 2
11151: ST_TO_ADDR
// music_class := music_victory ;
11152: LD_ADDR_OWVAR 72
11156: PUSH
11157: LD_INT 4
11159: ST_TO_ADDR
// if not americanHasEscaped then
11160: LD_EXP 8
11164: NOT
11165: IFFALSE 11186
// begin Say ( Heike , DH-2-assault ) ;
11167: LD_EXP 28
11171: PPUSH
11172: LD_STRING DH-2-assault
11174: PPUSH
11175: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11179: LD_STRING ACH_CLEAN
11181: PPUSH
11182: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11186: LD_INT 70
11188: PPUSH
11189: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11193: LD_INT 35
11195: PPUSH
11196: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11200: LD_INT 22
11202: PUSH
11203: LD_INT 2
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 1
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 50
11225: PUSH
11226: EMPTY
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: NOT
11243: IFFALSE 11193
// InGameOn ;
11245: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11249: LD_INT 11
11251: PPUSH
11252: CALL_OW 255
11256: PUSH
11257: LD_INT 2
11259: EQUAL
11260: NOT
11261: IFFALSE 11273
// SetSide ( usDepot , 2 ) ;
11263: LD_INT 11
11265: PPUSH
11266: LD_INT 2
11268: PPUSH
11269: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11273: LD_INT 35
11275: PPUSH
11276: LD_INT 22
11278: PPUSH
11279: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11283: LD_EXP 28
11287: PPUSH
11288: LD_INT 35
11290: PPUSH
11291: LD_INT 22
11293: PPUSH
11294: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11298: LD_EXP 28
11302: PPUSH
11303: LD_INT 38
11305: PPUSH
11306: LD_INT 25
11308: PPUSH
11309: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11313: LD_EXP 41
11317: PUSH
11318: LD_EXP 42
11322: UNION
11323: PPUSH
11324: LD_INT 39
11326: PPUSH
11327: LD_INT 26
11329: PPUSH
11330: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11334: LD_EXP 41
11338: PUSH
11339: LD_EXP 42
11343: UNION
11344: PPUSH
11345: LD_EXP 28
11349: PPUSH
11350: CALL_OW 179
// p := 0 ;
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: LD_INT 0
11361: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11362: LD_INT 35
11364: PPUSH
11365: CALL_OW 67
// p := p + 1 ;
11369: LD_ADDR_VAR 0 2
11373: PUSH
11374: LD_VAR 0 2
11378: PUSH
11379: LD_INT 1
11381: PLUS
11382: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11383: LD_EXP 28
11387: PPUSH
11388: CALL_OW 314
11392: NOT
11393: PUSH
11394: LD_VAR 0 2
11398: PUSH
11399: LD_INT 10
11401: GREATER
11402: OR
11403: IFFALSE 11362
// Say ( Heike , DH-1-capture ) ;
11405: LD_EXP 28
11409: PPUSH
11410: LD_STRING DH-1-capture
11412: PPUSH
11413: CALL_OW 88
// if Markov then
11417: LD_EXP 35
11421: IFFALSE 11435
// Say ( Markov , DMar-1-capture ) ;
11423: LD_EXP 35
11427: PPUSH
11428: LD_STRING DMar-1-capture
11430: PPUSH
11431: CALL_OW 88
// if Sophia then
11435: LD_EXP 34
11439: IFFALSE 11465
// begin Say ( Heike , DH-2-capture ) ;
11441: LD_EXP 28
11445: PPUSH
11446: LD_STRING DH-2-capture
11448: PPUSH
11449: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11453: LD_EXP 34
11457: PPUSH
11458: LD_STRING DS-1-capture
11460: PPUSH
11461: CALL_OW 88
// end ; InGameOff ;
11465: CALL_OW 9
// music_nat := music_auto ;
11469: LD_ADDR_OWVAR 71
11473: PUSH
11474: LD_INT 0
11476: ST_TO_ADDR
// music_class := music_auto ;
11477: LD_ADDR_OWVAR 72
11481: PUSH
11482: LD_INT 0
11484: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11485: LD_STRING ConstructBase
11487: PPUSH
11488: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11492: LD_ADDR_VAR 0 1
11496: PUSH
11497: LD_INT 22
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 21
11509: PUSH
11510: LD_INT 3
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PPUSH
11521: CALL_OW 69
11525: PUSH
11526: FOR_IN
11527: IFFALSE 11543
// SetSide ( i , 2 ) ;
11529: LD_VAR 0 1
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: CALL_OW 235
11541: GO 11526
11543: POP
11544: POP
// wait ( 0 0$3 ) ;
11545: LD_INT 105
11547: PPUSH
11548: CALL_OW 67
// americanBaseCaptured := true ;
11552: LD_ADDR_EXP 6
11556: PUSH
11557: LD_INT 1
11559: ST_TO_ADDR
// end ;
11560: PPOPN 2
11562: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11563: LD_EXP 13
11567: PUSH
11568: LD_INT 3
11570: GREATEREQUAL
11571: IFFALSE 11583
11573: GO 11575
11575: DISABLE
// SetAchievement ( ACH_ENG ) ;
11576: LD_STRING ACH_ENG
11578: PPUSH
11579: CALL_OW 543
11583: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11584: LD_INT 22
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 25
11596: PUSH
11597: LD_INT 15
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PPUSH
11608: CALL_OW 69
11612: PUSH
11613: LD_INT 4
11615: GREATEREQUAL
11616: IFFALSE 11628
11618: GO 11620
11620: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11621: LD_STRING ACH_APEGEN
11623: PPUSH
11624: CALL_OW 543
11628: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11629: LD_INT 22
11631: PUSH
11632: LD_INT 2
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 30
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 3
11651: PUSH
11652: LD_INT 57
11654: PUSH
11655: EMPTY
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 69
11671: IFFALSE 11936
11673: GO 11675
11675: DISABLE
// begin workshopBuilded := true ;
11676: LD_ADDR_EXP 10
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if IsOk ( Markov ) then
11684: LD_EXP 35
11688: PPUSH
11689: CALL_OW 302
11693: IFFALSE 11752
// begin Say ( Heike , DH-1-shop-a ) ;
11695: LD_EXP 28
11699: PPUSH
11700: LD_STRING DH-1-shop-a
11702: PPUSH
11703: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11707: LD_INT 47
11709: PPUSH
11710: LD_INT 2
11712: PPUSH
11713: CALL_OW 321
11717: PUSH
11718: LD_INT 2
11720: EQUAL
11721: PUSH
11722: LD_INT 45
11724: PPUSH
11725: LD_INT 2
11727: PPUSH
11728: CALL_OW 321
11732: PUSH
11733: LD_INT 2
11735: EQUAL
11736: AND
11737: NOT
11738: IFFALSE 11752
// Say ( Markov , DMar-1-shop-a ) ;
11740: LD_EXP 35
11744: PPUSH
11745: LD_STRING DMar-1-shop-a
11747: PPUSH
11748: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11752: LD_INT 35
11754: PPUSH
11755: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11759: LD_INT 47
11761: PPUSH
11762: LD_INT 2
11764: PPUSH
11765: CALL_OW 321
11769: PUSH
11770: LD_INT 2
11772: EQUAL
11773: PUSH
11774: LD_INT 45
11776: PPUSH
11777: LD_INT 2
11779: PPUSH
11780: CALL_OW 321
11784: PUSH
11785: LD_INT 2
11787: EQUAL
11788: OR
11789: IFFALSE 11752
// if IsOk ( Markov ) and IsOk ( Heike ) then
11791: LD_EXP 35
11795: PPUSH
11796: CALL_OW 302
11800: PUSH
11801: LD_EXP 28
11805: PPUSH
11806: CALL_OW 302
11810: AND
11811: IFFALSE 11929
// begin DialogueOn ;
11813: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11817: LD_EXP 35
11821: PPUSH
11822: LD_STRING DMar-1-shop
11824: PPUSH
11825: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11829: LD_EXP 28
11833: PPUSH
11834: LD_STRING DH-1-shop
11836: PPUSH
11837: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11841: LD_EXP 35
11845: PPUSH
11846: LD_STRING DMar-2-shop
11848: PPUSH
11849: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11853: LD_EXP 35
11857: PPUSH
11858: LD_STRING DMar-3-shop
11860: PPUSH
11861: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11865: LD_EXP 28
11869: PPUSH
11870: LD_STRING DH-2-shop
11872: PPUSH
11873: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11877: LD_EXP 35
11881: PPUSH
11882: LD_STRING DMar-4-shop
11884: PPUSH
11885: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11889: LD_EXP 28
11893: PPUSH
11894: LD_STRING DH-3-shop
11896: PPUSH
11897: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11901: LD_EXP 35
11905: PPUSH
11906: LD_STRING DMar-5-shop
11908: PPUSH
11909: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11913: LD_EXP 28
11917: PPUSH
11918: LD_STRING DH-4-shop
11920: PPUSH
11921: CALL_OW 88
// DialogueOff ;
11925: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
11929: LD_STRING ConstructVeh
11931: PPUSH
11932: CALL_OW 337
// end ;
11936: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11937: LD_INT 2
11939: PPUSH
11940: LD_INT 2
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: CALL 38810 0 3
11950: PUSH
11951: LD_INT 0
11953: EQUAL
11954: IFFALSE 11966
11956: GO 11958
11958: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11959: LD_STRING Techs
11961: PPUSH
11962: CALL_OW 337
11966: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11967: LD_EXP 35
11971: PPUSH
11972: CALL_OW 302
11976: PUSH
11977: LD_INT 22
11979: PUSH
11980: LD_INT 2
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 2
11989: PUSH
11990: LD_INT 34
11992: PUSH
11993: LD_INT 22
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 35
12002: PUSH
12003: LD_INT 22
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 69
12023: AND
12024: IFFALSE 12131
12026: GO 12028
12028: DISABLE
// begin DialogueOn ;
12029: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12033: LD_INT 22
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 2
12045: PUSH
12046: LD_INT 34
12048: PUSH
12049: LD_INT 22
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 35
12058: PUSH
12059: LD_INT 22
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 69
12079: PPUSH
12080: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12084: LD_INT 10
12086: PPUSH
12087: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12091: LD_EXP 28
12095: PPUSH
12096: LD_STRING DH-1-bal
12098: PPUSH
12099: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12103: LD_EXP 35
12107: PPUSH
12108: LD_STRING DMar-1-bal
12110: PPUSH
12111: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12115: LD_EXP 28
12119: PPUSH
12120: LD_STRING DH-2-bal
12122: PPUSH
12123: CALL_OW 88
// DialogueOff ;
12127: CALL_OW 7
// end ;
12131: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12132: LD_EXP 32
12136: PPUSH
12137: CALL_OW 302
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 30
12154: PUSH
12155: LD_INT 6
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 69
12170: AND
12171: IFFALSE 12232
12173: GO 12175
12175: DISABLE
// begin DialogueOn ;
12176: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12180: LD_EXP 32
12184: PPUSH
12185: LD_STRING DA-1-lab
12187: PPUSH
12188: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12192: LD_EXP 28
12196: PPUSH
12197: LD_STRING DH-1-lab
12199: PPUSH
12200: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12204: LD_EXP 32
12208: PPUSH
12209: LD_STRING DA-2-lab
12211: PPUSH
12212: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12216: LD_EXP 28
12220: PPUSH
12221: LD_STRING DH-2-lab
12223: PPUSH
12224: CALL_OW 88
// DialogueOff ;
12228: CALL_OW 7
// end ;
12232: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12233: LD_EXP 33
12237: PPUSH
12238: CALL_OW 302
12242: PUSH
12243: LD_INT 22
12245: PUSH
12246: LD_INT 2
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 25
12255: PUSH
12256: LD_INT 15
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 69
12271: AND
12272: PUSH
12273: LD_INT 81
12275: PUSH
12276: LD_INT 2
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 69
12287: NOT
12288: AND
12289: IFFALSE 12471
12291: GO 12293
12293: DISABLE
12294: LD_INT 0
12296: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12297: LD_ADDR_VAR 0 1
12301: PUSH
12302: LD_INT 22
12304: PUSH
12305: LD_INT 2
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 25
12314: PUSH
12315: LD_INT 15
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: ST_TO_ADDR
// InGameOn ;
12331: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12335: LD_VAR 0 1
12339: PUSH
12340: LD_INT 1
12342: ARRAY
12343: PPUSH
12344: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12348: LD_VAR 0 1
12352: PUSH
12353: LD_INT 1
12355: ARRAY
12356: PPUSH
12357: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12361: LD_EXP 33
12365: PPUSH
12366: LD_STRING DK-1-apesol
12368: PPUSH
12369: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12373: LD_VAR 0 1
12377: PUSH
12378: LD_INT 1
12380: ARRAY
12381: PPUSH
12382: LD_INT 35
12384: PPUSH
12385: LD_INT 28
12387: PPUSH
12388: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12392: LD_VAR 0 1
12396: PUSH
12397: LD_INT 1
12399: ARRAY
12400: PPUSH
12401: LD_INT 36
12403: PPUSH
12404: LD_INT 17
12406: PPUSH
12407: CALL_OW 171
// DialogueOn ;
12411: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12415: LD_EXP 32
12419: PPUSH
12420: LD_STRING DA-1-apesol
12422: PPUSH
12423: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12427: LD_EXP 33
12431: PPUSH
12432: LD_STRING DK-2-apesol
12434: PPUSH
12435: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12439: LD_EXP 32
12443: PPUSH
12444: LD_STRING DA-2-apesol
12446: PPUSH
12447: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12451: LD_EXP 33
12455: PPUSH
12456: LD_STRING DK-3-apesol
12458: PPUSH
12459: CALL_OW 88
// DialogueOff ;
12463: CALL_OW 7
// InGameOff ;
12467: CALL_OW 9
// end ;
12471: PPOPN 1
12473: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12474: LD_EXP 34
12478: PPUSH
12479: CALL_OW 302
12483: PUSH
12484: LD_INT 22
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 25
12496: PUSH
12497: LD_INT 16
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: CALL_OW 69
12512: AND
12513: PUSH
12514: LD_INT 81
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PPUSH
12524: CALL_OW 69
12528: NOT
12529: AND
12530: IFFALSE 12815
12532: GO 12534
12534: DISABLE
12535: LD_INT 0
12537: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12538: LD_ADDR_VAR 0 1
12542: PUSH
12543: LD_INT 22
12545: PUSH
12546: LD_INT 2
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 25
12555: PUSH
12556: LD_INT 16
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: ST_TO_ADDR
// InGameOn ;
12572: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12576: LD_INT 35
12578: PPUSH
12579: LD_INT 22
12581: PPUSH
12582: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12586: LD_INT 5
12588: PPUSH
12589: LD_INT 35
12591: PPUSH
12592: LD_INT 22
12594: PPUSH
12595: LD_INT 1
12597: PPUSH
12598: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12602: LD_EXP 34
12606: PPUSH
12607: LD_VAR 0 1
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PPUSH
12616: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12620: LD_VAR 0 1
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PPUSH
12629: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12633: LD_VAR 0 1
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PPUSH
12642: CALL_OW 122
// wait ( 0 0$2 ) ;
12646: LD_INT 70
12648: PPUSH
12649: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12653: LD_EXP 34
12657: PPUSH
12658: LD_STRING DS-1-apeeng
12660: PPUSH
12661: CALL_OW 88
// if IsOk ( Kamil ) then
12665: LD_EXP 31
12669: PPUSH
12670: CALL_OW 302
12674: IFFALSE 12811
// begin Say ( Kamil , DKam-1-apeeng ) ;
12676: LD_EXP 31
12680: PPUSH
12681: LD_STRING DKam-1-apeeng
12683: PPUSH
12684: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12688: LD_EXP 34
12692: PPUSH
12693: LD_STRING DS-2-apeeng
12695: PPUSH
12696: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12700: LD_EXP 31
12704: PPUSH
12705: LD_STRING DKam-2-apeeng
12707: PPUSH
12708: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12712: LD_EXP 34
12716: PPUSH
12717: LD_STRING DS-3-apeeng
12719: PPUSH
12720: CALL_OW 88
// if not IsOK ( Kaia ) then
12724: LD_EXP 33
12728: PPUSH
12729: CALL_OW 302
12733: NOT
12734: IFFALSE 12742
// begin InGameOff ;
12736: CALL_OW 9
// exit ;
12740: GO 12815
// end ; Say ( Kaia , DK-1-apeeng ) ;
12742: LD_EXP 33
12746: PPUSH
12747: LD_STRING DK-1-apeeng
12749: PPUSH
12750: CALL_OW 88
// if not IsOk ( Givi ) then
12754: LD_EXP 29
12758: PPUSH
12759: CALL_OW 302
12763: NOT
12764: IFFALSE 12775
// begin Video ( false ) ;
12766: LD_INT 0
12768: PPUSH
12769: CALL 75400 0 1
// exit ;
12773: GO 12815
// end ; Say ( Givi , DG-1-apeeng ) ;
12775: LD_EXP 29
12779: PPUSH
12780: LD_STRING DG-1-apeeng
12782: PPUSH
12783: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12787: LD_EXP 33
12791: PPUSH
12792: LD_STRING DK-2-apeeng
12794: PPUSH
12795: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12799: LD_EXP 33
12803: PPUSH
12804: LD_STRING DK-3-apeeng
12806: PPUSH
12807: CALL_OW 88
// end ; InGameOff ;
12811: CALL_OW 9
// end ;
12815: PPOPN 1
12817: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12818: LD_EXP 4
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 2
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 30
12835: PUSH
12836: LD_INT 0
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PPUSH
12847: CALL_OW 69
12851: AND
12852: IFFALSE 13017
12854: GO 12856
12856: DISABLE
// begin wait ( 0 0$10 ) ;
12857: LD_INT 350
12859: PPUSH
12860: CALL_OW 67
// DialogueOn ;
12864: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12868: LD_EXP 36
12872: PPUSH
12873: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12877: LD_EXP 36
12881: PPUSH
12882: LD_STRING DF-1-distribution
12884: PPUSH
12885: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12889: LD_EXP 28
12893: PPUSH
12894: LD_STRING DH-2-distribution
12896: PPUSH
12897: CALL_OW 88
// if IsOk ( Kaia ) then
12901: LD_EXP 33
12905: PPUSH
12906: CALL_OW 302
12910: IFFALSE 12971
// begin Say ( Kaia , DK-1-distribution ) ;
12912: LD_EXP 33
12916: PPUSH
12917: LD_STRING DK-1-distribution
12919: PPUSH
12920: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12924: LD_EXP 28
12928: PPUSH
12929: LD_STRING DH-1-distribution
12931: PPUSH
12932: CALL_OW 88
// if IsOk ( Givi ) then
12936: LD_EXP 29
12940: PPUSH
12941: CALL_OW 302
12945: IFFALSE 12971
// begin Say ( Givi , DG-1-distribution ) ;
12947: LD_EXP 29
12951: PPUSH
12952: LD_STRING DG-1-distribution
12954: PPUSH
12955: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12959: LD_EXP 28
12963: PPUSH
12964: LD_STRING DH-3-distribution
12966: PPUSH
12967: CALL_OW 88
// end ; end ; DialogueOff ;
12971: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12975: LD_STRING Crates1
12977: PPUSH
12978: CALL_OW 337
// farmerRequestedCrates := 300 ;
12982: LD_ADDR_EXP 16
12986: PUSH
12987: LD_INT 300
12989: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12990: LD_STRING FarmerCrates
12992: PPUSH
12993: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12997: LD_INT 10
12999: PPUSH
13000: LD_INT 1
13002: PPUSH
13003: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13007: LD_INT 108
13009: PPUSH
13010: LD_INT 61
13012: PPUSH
13013: CALL_OW 86
// end ;
13017: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13018: LD_EXP 6
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: LD_INT 2
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 3
13035: PUSH
13036: LD_INT 57
13038: PUSH
13039: EMPTY
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 2
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 6
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 30
13061: PUSH
13062: LD_INT 7
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: AND
13084: PUSH
13085: LD_INT 22
13087: PUSH
13088: LD_INT 2
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 3
13097: PUSH
13098: LD_INT 57
13100: PUSH
13101: EMPTY
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 30
13110: PUSH
13111: LD_INT 4
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: AND
13128: IFFALSE 13292
13130: GO 13132
13132: DISABLE
13133: LD_INT 0
13135: PPUSH
// begin wait ( 0 0$10 ) ;
13136: LD_INT 350
13138: PPUSH
13139: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13143: LD_ADDR_VAR 0 1
13147: PUSH
13148: LD_EXP 42
13152: PPUSH
13153: LD_INT 26
13155: PUSH
13156: LD_INT 1
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 25
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PPUSH
13177: CALL_OW 72
13181: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13182: LD_EXP 28
13186: PPUSH
13187: LD_STRING DH-1-task
13189: PPUSH
13190: CALL_OW 88
// if IsOk ( Sophia ) then
13194: LD_EXP 34
13198: PPUSH
13199: CALL_OW 302
13203: IFFALSE 13243
// begin Say ( Sophia , DS-1-task ) ;
13205: LD_EXP 34
13209: PPUSH
13210: LD_STRING DS-1-task
13212: PPUSH
13213: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13217: LD_EXP 34
13221: PPUSH
13222: LD_STRING DS-2-task
13224: PPUSH
13225: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13229: LD_EXP 28
13233: PPUSH
13234: LD_STRING DH-2-task
13236: PPUSH
13237: CALL_OW 88
// end else
13241: GO 13277
// if eng then
13243: LD_VAR 0 1
13247: IFFALSE 13277
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13249: LD_VAR 0 1
13253: PUSH
13254: LD_INT 1
13256: ARRAY
13257: PPUSH
13258: LD_STRING DArm-1-task
13260: PPUSH
13261: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13265: LD_EXP 28
13269: PPUSH
13270: LD_STRING DH-2-task
13272: PPUSH
13273: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13277: LD_STRING BaseConstructed
13279: PPUSH
13280: CALL_OW 337
// allowConvoys := true ;
13284: LD_ADDR_EXP 12
13288: PUSH
13289: LD_INT 1
13291: ST_TO_ADDR
// end ;
13292: PPOPN 1
13294: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13295: LD_INT 22
13297: PUSH
13298: LD_INT 4
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 34
13307: PUSH
13308: LD_INT 12
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PPUSH
13319: CALL_OW 69
13323: IFFALSE 13491
13325: GO 13327
13327: DISABLE
13328: LD_INT 0
13330: PPUSH
13331: PPUSH
13332: PPUSH
// begin wait ( 0 0$2 ) ;
13333: LD_INT 70
13335: PPUSH
13336: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_INT 4
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 34
13357: PUSH
13358: LD_INT 12
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PPUSH
13369: CALL_OW 69
13373: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13374: LD_ADDR_VAR 0 2
13378: PUSH
13379: LD_VAR 0 1
13383: PUSH
13384: LD_INT 1
13386: ARRAY
13387: PPUSH
13388: CALL_OW 250
13392: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13393: LD_ADDR_VAR 0 3
13397: PUSH
13398: LD_VAR 0 1
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: CALL_OW 251
13411: ST_TO_ADDR
// DialogueOn ;
13412: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13416: LD_VAR 0 2
13420: PPUSH
13421: LD_VAR 0 3
13425: PPUSH
13426: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13430: LD_VAR 0 2
13434: PPUSH
13435: LD_VAR 0 3
13439: PPUSH
13440: LD_INT 2
13442: PPUSH
13443: LD_INT 6
13445: NEG
13446: PPUSH
13447: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13451: LD_INT 10
13453: PPUSH
13454: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13458: LD_EXP 28
13462: PPUSH
13463: LD_STRING DH-1-seecargo
13465: PPUSH
13466: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13470: LD_VAR 0 2
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 2
13482: PPUSH
13483: CALL_OW 331
// DialogueOff ;
13487: CALL_OW 7
// end ;
13491: PPOPN 3
13493: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13494: LD_EXP 4
13498: PUSH
13499: LD_EXP 15
13503: PUSH
13504: LD_INT 300
13506: GREATEREQUAL
13507: AND
13508: IFFALSE 13580
13510: GO 13512
13512: DISABLE
// begin DialogueOn ;
13513: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13517: LD_EXP 36
13521: PPUSH
13522: LD_STRING DF-1-delivery-2
13524: PPUSH
13525: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13529: LD_EXP 28
13533: PPUSH
13534: LD_STRING DH-1-delivery-2
13536: PPUSH
13537: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13541: LD_EXP 36
13545: PPUSH
13546: LD_STRING DF-2-delivery-2
13548: PPUSH
13549: CALL_OW 94
// DialogueOff ;
13553: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13557: LD_STRING Crates2
13559: PPUSH
13560: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13564: LD_ADDR_EXP 17
13568: PUSH
13569: LD_INT 63000
13571: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13572: LD_ADDR_EXP 16
13576: PUSH
13577: LD_INT 600
13579: ST_TO_ADDR
// end ;
13580: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13581: LD_EXP 4
13585: PUSH
13586: LD_EXP 15
13590: PUSH
13591: LD_INT 600
13593: GREATEREQUAL
13594: AND
13595: PUSH
13596: LD_OWVAR 67
13600: PUSH
13601: LD_INT 1
13603: GREATER
13604: AND
13605: IFFALSE 13805
13607: GO 13609
13609: DISABLE
// begin DialogueOn ;
13610: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13614: LD_EXP 36
13618: PPUSH
13619: LD_STRING DF-1-delivery-3
13621: PPUSH
13622: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13626: LD_EXP 28
13630: PPUSH
13631: LD_STRING DH-1-delivery-3
13633: PPUSH
13634: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13638: LD_EXP 36
13642: PPUSH
13643: LD_STRING DF-2-delivery-3
13645: PPUSH
13646: CALL_OW 94
// if IsOk ( Kaia ) then
13650: LD_EXP 33
13654: PPUSH
13655: CALL_OW 302
13659: IFFALSE 13709
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13661: LD_EXP 33
13665: PPUSH
13666: LD_STRING DK-1-delivery-3
13668: PPUSH
13669: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13673: LD_EXP 28
13677: PPUSH
13678: LD_STRING DH-2-delivery-3
13680: PPUSH
13681: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13685: LD_EXP 29
13689: PPUSH
13690: LD_STRING DG-1-delivery-3
13692: PPUSH
13693: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13697: LD_EXP 30
13701: PPUSH
13702: LD_STRING DM-1-delivery-3
13704: PPUSH
13705: CALL_OW 88
// end ; DialogueOff ;
13709: CALL_OW 7
// case Difficulty of 2 :
13713: LD_OWVAR 67
13717: PUSH
13718: LD_INT 2
13720: DOUBLE
13721: EQUAL
13722: IFTRUE 13726
13724: GO 13744
13726: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
13727: LD_STRING Crates3
13729: PPUSH
13730: CALL_OW 337
// farmerRequestedCrates := 900 ;
13734: LD_ADDR_EXP 16
13738: PUSH
13739: LD_INT 900
13741: ST_TO_ADDR
// end ; 3 :
13742: GO 13797
13744: LD_INT 3
13746: DOUBLE
13747: EQUAL
13748: IFTRUE 13752
13750: GO 13770
13752: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
13753: LD_STRING Crates4
13755: PPUSH
13756: CALL_OW 337
// farmerRequestedCrates := 1200 ;
13760: LD_ADDR_EXP 16
13764: PUSH
13765: LD_INT 1200
13767: ST_TO_ADDR
// end ; 4 :
13768: GO 13797
13770: LD_INT 4
13772: DOUBLE
13773: EQUAL
13774: IFTRUE 13778
13776: GO 13796
13778: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
13779: LD_STRING Crates5
13781: PPUSH
13782: CALL_OW 337
// farmerRequestedCrates := 1400 ;
13786: LD_ADDR_EXP 16
13790: PUSH
13791: LD_INT 1400
13793: ST_TO_ADDR
// end ; end ;
13794: GO 13797
13796: POP
// farmerCratesCounter := 30 30$00 ;
13797: LD_ADDR_EXP 17
13801: PUSH
13802: LD_INT 63000
13804: ST_TO_ADDR
// end ;
13805: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
13806: LD_EXP 4
13810: PUSH
13811: LD_EXP 15
13815: PUSH
13816: LD_INT 600
13818: PUSH
13819: LD_INT 900
13821: PUSH
13822: LD_INT 1200
13824: PUSH
13825: LD_INT 1400
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: PUSH
13834: LD_OWVAR 67
13838: ARRAY
13839: GREATEREQUAL
13840: AND
13841: IFFALSE 13927
13843: GO 13845
13845: DISABLE
// begin retreatAllowed := true ;
13846: LD_ADDR_EXP 11
13850: PUSH
13851: LD_INT 1
13853: ST_TO_ADDR
// display_strings := [ ] ;
13854: LD_ADDR_OWVAR 47
13858: PUSH
13859: EMPTY
13860: ST_TO_ADDR
// DialogueOn ;
13861: CALL_OW 6
// InGameOn ;
13865: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13869: LD_EXP 37
13873: PPUSH
13874: LD_STRING DO-radio-end
13876: PPUSH
13877: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13881: LD_EXP 28
13885: PPUSH
13886: LD_STRING DH-1-radio-end
13888: PPUSH
13889: CALL_OW 88
// InGameOff ;
13893: CALL_OW 9
// DialogueOff ;
13897: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13901: LD_STRING Retreat
13903: PPUSH
13904: CALL_OW 337
// wait ( 0 0$2 ) ;
13908: LD_INT 70
13910: PPUSH
13911: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13915: LD_EXP 28
13919: PPUSH
13920: LD_STRING DH-2-radio-end
13922: PPUSH
13923: CALL_OW 88
// end ;
13927: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13928: LD_EXP 11
13932: IFFALSE 14063
13934: GO 13936
13936: DISABLE
13937: LD_INT 0
13939: PPUSH
13940: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13941: LD_INT 10
13943: PPUSH
13944: LD_INT 0
13946: PPUSH
13947: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: LD_EXP 39
13960: PPUSH
13961: LD_INT 25
13963: PUSH
13964: LD_INT 2
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PPUSH
13971: CALL_OW 72
13975: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13976: LD_VAR 0 1
13980: PUSH
13981: LD_INT 102
13983: PPUSH
13984: LD_INT 69
13986: PPUSH
13987: CALL_OW 428
13991: PUSH
13992: LD_INT 0
13994: EQUAL
13995: AND
13996: IFFALSE 14063
// begin for i in tmp do
13998: LD_ADDR_VAR 0 2
14002: PUSH
14003: LD_VAR 0 1
14007: PUSH
14008: FOR_IN
14009: IFFALSE 14033
// if IsInUnit ( i ) then
14011: LD_VAR 0 2
14015: PPUSH
14016: CALL_OW 310
14020: IFFALSE 14031
// ComExitBuilding ( i ) ;
14022: LD_VAR 0 2
14026: PPUSH
14027: CALL_OW 122
14031: GO 14008
14033: POP
14034: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14035: LD_VAR 0 1
14039: PPUSH
14040: LD_INT 31
14042: PPUSH
14043: LD_INT 102
14045: PPUSH
14046: LD_INT 69
14048: PPUSH
14049: LD_INT 2
14051: PPUSH
14052: CALL_OW 205
// wait ( 0 0$3 ) ;
14056: LD_INT 105
14058: PPUSH
14059: CALL_OW 67
// end ; end ;
14063: PPOPN 2
14065: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14066: LD_EXP 11
14070: NOT
14071: PUSH
14072: LD_INT 5
14074: PPUSH
14075: CALL_OW 301
14079: AND
14080: IFFALSE 14112
14082: GO 14084
14084: DISABLE
// begin DialogueOn ;
14085: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14089: LD_EXP 36
14093: PPUSH
14094: LD_STRING DF-1-failure
14096: PPUSH
14097: CALL_OW 94
// DialogueOff ;
14101: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14105: LD_STRING FarmerDepot
14107: PPUSH
14108: CALL_OW 104
// end ;
14112: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14113: LD_EXP 11
14117: PUSH
14118: LD_EXP 28
14122: PPUSH
14123: LD_EXP 36
14127: PPUSH
14128: CALL_OW 296
14132: PUSH
14133: LD_INT 12
14135: LESS
14136: AND
14137: PUSH
14138: LD_INT 81
14140: PUSH
14141: LD_INT 2
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 21
14150: PUSH
14151: LD_INT 1
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PPUSH
14162: CALL_OW 69
14166: NOT
14167: AND
14168: IFFALSE 14832
14170: GO 14172
14172: DISABLE
14173: LD_INT 0
14175: PPUSH
14176: PPUSH
14177: PPUSH
// begin allowConvoys := false ;
14178: LD_ADDR_EXP 12
14182: PUSH
14183: LD_INT 0
14185: ST_TO_ADDR
// InGameOn ;
14186: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14190: LD_EXP 28
14194: PPUSH
14195: LD_EXP 36
14199: PPUSH
14200: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14204: LD_EXP 36
14208: PPUSH
14209: LD_EXP 28
14213: PPUSH
14214: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14218: LD_EXP 36
14222: PPUSH
14223: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14227: LD_EXP 28
14231: PPUSH
14232: LD_STRING DH-1-end
14234: PPUSH
14235: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14239: LD_EXP 36
14243: PPUSH
14244: LD_STRING DF-1-end
14246: PPUSH
14247: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14251: LD_EXP 36
14255: PPUSH
14256: LD_STRING DF-2-end
14258: PPUSH
14259: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14263: LD_EXP 28
14267: PPUSH
14268: LD_STRING DH-2-end
14270: PPUSH
14271: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14275: LD_EXP 36
14279: PPUSH
14280: LD_STRING DF-3-end
14282: PPUSH
14283: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14287: LD_EXP 28
14291: PPUSH
14292: LD_STRING DH-3-end
14294: PPUSH
14295: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14299: LD_EXP 29
14303: PPUSH
14304: LD_STRING DG-1-end
14306: PPUSH
14307: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14311: LD_EXP 28
14315: PPUSH
14316: LD_STRING DH-4-end
14318: PPUSH
14319: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14323: LD_EXP 36
14327: PPUSH
14328: LD_STRING DF-4-end
14330: PPUSH
14331: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14335: LD_EXP 28
14339: PPUSH
14340: LD_STRING DH-5-end
14342: PPUSH
14343: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14347: LD_EXP 36
14351: PPUSH
14352: LD_STRING DF-5-end
14354: PPUSH
14355: CALL_OW 88
// InGameOff ;
14359: CALL_OW 9
// allowCargoEvacuation := true ;
14363: LD_ADDR_EXP 7
14367: PUSH
14368: LD_INT 1
14370: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14371: LD_ADDR_VAR 0 2
14375: PUSH
14376: LD_INT 4
14378: PUSH
14379: LD_INT 3
14381: PUSH
14382: LD_INT 2
14384: PUSH
14385: LD_INT 1
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: PUSH
14394: LD_OWVAR 67
14398: ARRAY
14399: ST_TO_ADDR
// if farmerSquad < max then
14400: LD_EXP 39
14404: PUSH
14405: LD_VAR 0 2
14409: LESS
14410: IFFALSE 14422
// max := farmerSquad ;
14412: LD_ADDR_VAR 0 2
14416: PUSH
14417: LD_EXP 39
14421: ST_TO_ADDR
// for i := 1 to max do
14422: LD_ADDR_VAR 0 1
14426: PUSH
14427: DOUBLE
14428: LD_INT 1
14430: DEC
14431: ST_TO_ADDR
14432: LD_VAR 0 2
14436: PUSH
14437: FOR_TO
14438: IFFALSE 14476
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14440: LD_EXP 39
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PPUSH
14449: LD_INT 2
14451: PPUSH
14452: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14456: LD_ADDR_EXP 39
14460: PUSH
14461: LD_EXP 39
14465: PPUSH
14466: LD_INT 1
14468: PPUSH
14469: CALL_OW 3
14473: ST_TO_ADDR
// end ;
14474: GO 14437
14476: POP
14477: POP
// for i in Farmer ^ farmerSquad do
14478: LD_ADDR_VAR 0 1
14482: PUSH
14483: LD_EXP 36
14487: PUSH
14488: LD_EXP 39
14492: ADD
14493: PUSH
14494: FOR_IN
14495: IFFALSE 14534
// begin if IsInUnit ( i ) then
14497: LD_VAR 0 1
14501: PPUSH
14502: CALL_OW 310
14506: IFFALSE 14517
// ComExitBuilding ( i ) ;
14508: LD_VAR 0 1
14512: PPUSH
14513: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14517: LD_VAR 0 1
14521: PPUSH
14522: LD_INT 102
14524: PPUSH
14525: LD_INT 7
14527: PPUSH
14528: CALL_OW 171
// end ;
14532: GO 14494
14534: POP
14535: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14536: LD_ADDR_VAR 0 1
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: LD_INT 5
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 21
14553: PUSH
14554: LD_INT 3
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 69
14569: PUSH
14570: LD_INT 5
14572: DIFF
14573: PUSH
14574: FOR_IN
14575: IFFALSE 14591
// SetSide ( i , 2 ) ;
14577: LD_VAR 0 1
14581: PPUSH
14582: LD_INT 2
14584: PPUSH
14585: CALL_OW 235
14589: GO 14574
14591: POP
14592: POP
// wait ( 0 0$2 ) ;
14593: LD_INT 70
14595: PPUSH
14596: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14600: LD_EXP 28
14604: PPUSH
14605: LD_STRING DH-6-end
14607: PPUSH
14608: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14612: LD_INT 35
14614: PPUSH
14615: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14619: LD_ADDR_VAR 0 3
14623: PUSH
14624: LD_EXP 36
14628: PUSH
14629: LD_EXP 39
14633: ADD
14634: PPUSH
14635: LD_INT 95
14637: PUSH
14638: LD_INT 3
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PPUSH
14645: CALL_OW 72
14649: ST_TO_ADDR
// if tmp then
14650: LD_VAR 0 3
14654: IFFALSE 14698
// for i in tmp do
14656: LD_ADDR_VAR 0 1
14660: PUSH
14661: LD_VAR 0 3
14665: PUSH
14666: FOR_IN
14667: IFFALSE 14696
// begin farmerSquad := farmerSquad diff i ;
14669: LD_ADDR_EXP 39
14673: PUSH
14674: LD_EXP 39
14678: PUSH
14679: LD_VAR 0 1
14683: DIFF
14684: ST_TO_ADDR
// RemoveUnit ( i ) ;
14685: LD_VAR 0 1
14689: PPUSH
14690: CALL_OW 64
// end ;
14694: GO 14666
14696: POP
14697: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14698: LD_EXP 39
14702: PUSH
14703: EMPTY
14704: EQUAL
14705: PUSH
14706: LD_EXP 36
14710: PPUSH
14711: CALL_OW 305
14715: NOT
14716: AND
14717: IFFALSE 14612
// if farmerHumanLoseCounter = 0 then
14719: LD_EXP 20
14723: PUSH
14724: LD_INT 0
14726: EQUAL
14727: IFFALSE 14736
// SetAchievement ( ACH_BABY ) ;
14729: LD_STRING ACH_BABY
14731: PPUSH
14732: CALL_OW 543
// wait ( 1 1$00 ) ;
14736: LD_INT 2100
14738: PPUSH
14739: CALL_OW 67
// SendAttack ;
14743: CALL 6163 0 0
// Say ( Heike , DH-7-end ) ;
14747: LD_EXP 28
14751: PPUSH
14752: LD_STRING DH-7-end
14754: PPUSH
14755: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
14759: LD_ADDR_VAR 0 1
14763: PUSH
14764: DOUBLE
14765: LD_INT 1
14767: DEC
14768: ST_TO_ADDR
14769: LD_INT 2
14771: PUSH
14772: LD_INT 3
14774: PUSH
14775: LD_INT 4
14777: PUSH
14778: LD_INT 4
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: PUSH
14787: LD_OWVAR 67
14791: ARRAY
14792: PUSH
14793: FOR_TO
14794: IFFALSE 14830
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14796: LD_INT 4200
14798: PUSH
14799: LD_INT 3500
14801: PUSH
14802: LD_INT 3150
14804: PUSH
14805: LD_INT 2800
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: LD_OWVAR 67
14818: ARRAY
14819: PPUSH
14820: CALL_OW 67
// SendAttack ;
14824: CALL 6163 0 0
// end ;
14828: GO 14793
14830: POP
14831: POP
// end ;
14832: PPOPN 3
14834: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14835: LD_EXP 7
14839: PUSH
14840: LD_EXP 21
14844: PUSH
14845: LD_INT 0
14847: GREATER
14848: AND
14849: IFFALSE 14859
14851: GO 14853
14853: DISABLE
// begin enable ;
14854: ENABLE
// CargoEvacuation ;
14855: CALL 3660 0 0
// end ;
14859: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14860: LD_EXP 17
14864: PUSH
14865: LD_INT 18900
14867: LESSEQUAL
14868: IFFALSE 14917
14870: GO 14872
14872: DISABLE
// begin DialogueOn ;
14873: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14877: LD_EXP 36
14881: PPUSH
14882: LD_STRING DF-1-distribution-a
14884: PPUSH
14885: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14889: LD_EXP 28
14893: PPUSH
14894: LD_STRING DH-1-distribution-a
14896: PPUSH
14897: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14901: LD_EXP 36
14905: PPUSH
14906: LD_STRING DF-2-distribution-a
14908: PPUSH
14909: CALL_OW 94
// DialogueOff ;
14913: CALL_OW 7
// end ;
14917: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14918: LD_EXP 17
14922: PUSH
14923: LD_INT 0
14925: LESSEQUAL
14926: IFFALSE 14958
14928: GO 14930
14930: DISABLE
// begin DialogueOn ;
14931: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14935: LD_EXP 36
14939: PPUSH
14940: LD_STRING DF-3-distribution-a
14942: PPUSH
14943: CALL_OW 94
// YouLost ( Distribution ) ;
14947: LD_STRING Distribution
14949: PPUSH
14950: CALL_OW 104
// DialogueOff ;
14954: CALL_OW 7
// end ;
14958: END
// every 0 0$1 trigger vehCounter >= 2 do
14959: LD_EXP 22
14963: PUSH
14964: LD_INT 2
14966: GREATEREQUAL
14967: IFFALSE 14979
14969: GO 14971
14971: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14972: LD_STRING VehConstructed
14974: PPUSH
14975: CALL_OW 337
14979: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14980: LD_INT 22
14982: PUSH
14983: LD_INT 2
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 34
14992: PUSH
14993: LD_INT 12
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 69
15008: IFFALSE 15068
15010: GO 15012
15012: DISABLE
// begin DialogueOn ;
15013: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15017: LD_EXP 28
15021: PPUSH
15022: LD_STRING DH-1-truck
15024: PPUSH
15025: CALL_OW 88
// if IsOk ( Markov ) then
15029: LD_EXP 35
15033: PPUSH
15034: CALL_OW 302
15038: IFFALSE 15064
// begin Say ( Markov , DMar-1-truck ) ;
15040: LD_EXP 35
15044: PPUSH
15045: LD_STRING DMar-1-truck
15047: PPUSH
15048: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15052: LD_EXP 28
15056: PPUSH
15057: LD_STRING DH-2-truck
15059: PPUSH
15060: CALL_OW 88
// end ; DialogueOff ;
15064: CALL_OW 7
// end ;
15068: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
15073: PPUSH
// if IsOk ( Givi ) then
15074: LD_EXP 29
15078: PPUSH
15079: CALL_OW 302
15083: IFFALSE 15099
// begin Say ( Givi , DG-1-nocargo ) ;
15085: LD_EXP 29
15089: PPUSH
15090: LD_STRING DG-1-nocargo
15092: PPUSH
15093: CALL_OW 88
// exit ;
15097: GO 15195
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15099: LD_ADDR_VAR 0 2
15103: PUSH
15104: LD_EXP 42
15108: PPUSH
15109: LD_INT 26
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 72
15123: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15124: LD_ADDR_VAR 0 3
15128: PUSH
15129: LD_EXP 42
15133: PPUSH
15134: LD_INT 26
15136: PUSH
15137: LD_INT 2
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 72
15148: ST_TO_ADDR
// if randomMen then
15149: LD_VAR 0 2
15153: IFFALSE 15173
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15155: LD_VAR 0 2
15159: PUSH
15160: LD_INT 1
15162: ARRAY
15163: PPUSH
15164: LD_STRING DArm-1-nocargo
15166: PPUSH
15167: CALL_OW 88
15171: GO 15195
// if randomWomen then
15173: LD_VAR 0 3
15177: IFFALSE 15195
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15179: LD_VAR 0 3
15183: PUSH
15184: LD_INT 1
15186: ARRAY
15187: PPUSH
15188: LD_STRING DArf-1-nocargo
15190: PPUSH
15191: CALL_OW 88
// end ;
15195: LD_VAR 0 1
15199: RET
// export function IncomingAttack ; begin
15200: LD_INT 0
15202: PPUSH
// if attackWave = 1 then
15203: LD_EXP 19
15207: PUSH
15208: LD_INT 1
15210: EQUAL
15211: IFFALSE 15282
// begin DialogueOn ;
15213: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15217: LD_EXP 37
15221: PPUSH
15222: LD_STRING DO-1-radio-1
15224: PPUSH
15225: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15229: LD_EXP 28
15233: PPUSH
15234: LD_STRING DH-1-radio-1-
15236: PPUSH
15237: CALL_OW 88
// if IsOk ( Markov ) then
15241: LD_EXP 35
15245: PPUSH
15246: CALL_OW 302
15250: IFFALSE 15276
// begin Say ( Markov , DMar-1-radio-1 ) ;
15252: LD_EXP 35
15256: PPUSH
15257: LD_STRING DMar-1-radio-1
15259: PPUSH
15260: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15264: LD_EXP 28
15268: PPUSH
15269: LD_STRING DH-2-radio-1
15271: PPUSH
15272: CALL_OW 88
// end ; DialogueOff ;
15276: CALL_OW 7
// end else
15280: GO 15306
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15282: LD_EXP 37
15286: PPUSH
15287: LD_STRING DO-1-radio-u
15289: PPUSH
15290: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15294: LD_EXP 28
15298: PPUSH
15299: LD_STRING DH-1-radio-u
15301: PPUSH
15302: CALL_OW 88
// end ; end ;
15306: LD_VAR 0 1
15310: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15311: LD_EXP 44
15315: PPUSH
15316: LD_INT 95
15318: PUSH
15319: LD_INT 8
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 72
15330: IFFALSE 15433
15332: GO 15334
15334: DISABLE
15335: LD_INT 0
15337: PPUSH
// begin enable ;
15338: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15339: LD_ADDR_VAR 0 1
15343: PUSH
15344: LD_EXP 44
15348: PPUSH
15349: LD_INT 95
15351: PUSH
15352: LD_INT 8
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL_OW 72
15363: PUSH
15364: FOR_IN
15365: IFFALSE 15394
// begin usForces := usForces diff i ;
15367: LD_ADDR_EXP 44
15371: PUSH
15372: LD_EXP 44
15376: PUSH
15377: LD_VAR 0 1
15381: DIFF
15382: ST_TO_ADDR
// RemoveUnit ( i ) ;
15383: LD_VAR 0 1
15387: PPUSH
15388: CALL_OW 64
// end ;
15392: GO 15364
15394: POP
15395: POP
// if not americanHasEscaped and attackWave = 1 then
15396: LD_EXP 8
15400: NOT
15401: PUSH
15402: LD_EXP 19
15406: PUSH
15407: LD_INT 1
15409: EQUAL
15410: AND
15411: IFFALSE 15433
// begin americanHasEscaped := true ;
15413: LD_ADDR_EXP 8
15417: PUSH
15418: LD_INT 1
15420: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15421: LD_EXP 28
15425: PPUSH
15426: LD_STRING DH-2-assault-a
15428: PPUSH
15429: CALL_OW 88
// end ; end ;
15433: PPOPN 1
15435: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15436: LD_INT 4
15438: PPUSH
15439: LD_INT 22
15441: PUSH
15442: LD_INT 1
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PPUSH
15449: CALL_OW 70
15453: PUSH
15454: LD_EXP 11
15458: NOT
15459: AND
15460: IFFALSE 15477
15462: GO 15464
15464: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15465: LD_EXP 36
15469: PPUSH
15470: LD_STRING DF-1-attack
15472: PPUSH
15473: CALL_OW 94
15477: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15478: LD_INT 5
15480: PPUSH
15481: CALL_OW 255
15485: PUSH
15486: LD_INT 2
15488: EQUAL
15489: IFFALSE 15505
15491: GO 15493
15493: DISABLE
// begin enable ;
15494: ENABLE
// SetSide ( arDepot , 5 ) ;
15495: LD_INT 5
15497: PPUSH
15498: LD_INT 5
15500: PPUSH
15501: CALL_OW 235
// end ;
15505: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15506: LD_INT 22
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 21
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PPUSH
15530: CALL_OW 69
15534: NOT
15535: PUSH
15536: LD_INT 22
15538: PUSH
15539: LD_INT 4
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PPUSH
15546: CALL_OW 69
15550: NOT
15551: AND
15552: PUSH
15553: LD_EXP 11
15557: NOT
15558: AND
15559: PUSH
15560: LD_EXP 15
15564: PUSH
15565: LD_INT 90
15567: GREATER
15568: AND
15569: PUSH
15570: LD_INT 7
15572: PPUSH
15573: LD_INT 22
15575: PUSH
15576: LD_INT 2
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 21
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PPUSH
15597: CALL_OW 70
15601: AND
15602: PUSH
15603: LD_INT 22
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 50
15615: PUSH
15616: EMPTY
15617: LIST
15618: PUSH
15619: LD_INT 30
15621: PUSH
15622: LD_INT 0
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: PPUSH
15634: CALL_OW 69
15638: AND
15639: IFFALSE 16432
15641: GO 15643
15643: DISABLE
15644: LD_INT 0
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
// begin depot := usDepot ;
15651: LD_ADDR_VAR 0 5
15655: PUSH
15656: LD_INT 11
15658: ST_TO_ADDR
// if not depot then
15659: LD_VAR 0 5
15663: NOT
15664: IFFALSE 15704
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15666: LD_ADDR_VAR 0 5
15670: PUSH
15671: LD_INT 22
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 30
15683: PUSH
15684: LD_INT 0
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 69
15699: PUSH
15700: LD_INT 1
15702: ARRAY
15703: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15704: LD_ADDR_VAR 0 1
15708: PUSH
15709: LD_EXP 42
15713: PPUSH
15714: LD_INT 26
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 72
15728: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15729: LD_ADDR_VAR 0 2
15733: PUSH
15734: LD_EXP 42
15738: PPUSH
15739: LD_INT 26
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PPUSH
15749: CALL_OW 72
15753: ST_TO_ADDR
// if IsOk ( Kaia ) then
15754: LD_EXP 33
15758: PPUSH
15759: CALL_OW 302
15763: IFFALSE 15784
// speaker := [ Kaia , DK ] else
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: LD_EXP 33
15774: PUSH
15775: LD_STRING DK
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: ST_TO_ADDR
15782: GO 15864
// if randomMen then
15784: LD_VAR 0 1
15788: IFFALSE 15823
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_VAR 0 1
15799: PUSH
15800: LD_INT 1
15802: PPUSH
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 12
15812: ARRAY
15813: PUSH
15814: LD_STRING DArm
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: ST_TO_ADDR
15821: GO 15864
// if randomWomen then
15823: LD_VAR 0 2
15827: IFFALSE 15862
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15829: LD_ADDR_VAR 0 3
15833: PUSH
15834: LD_VAR 0 2
15838: PUSH
15839: LD_INT 1
15841: PPUSH
15842: LD_VAR 0 2
15846: PPUSH
15847: CALL_OW 12
15851: ARRAY
15852: PUSH
15853: LD_STRING DArf
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: ST_TO_ADDR
15860: GO 15864
// exit ;
15862: GO 16432
// if IsInUnit ( speaker [ 1 ] ) then
15864: LD_VAR 0 3
15868: PUSH
15869: LD_INT 1
15871: ARRAY
15872: PPUSH
15873: CALL_OW 310
15877: IFFALSE 15900
// place := IsInUnit ( speaker [ 1 ] ) else
15879: LD_ADDR_VAR 0 4
15883: PUSH
15884: LD_VAR 0 3
15888: PUSH
15889: LD_INT 1
15891: ARRAY
15892: PPUSH
15893: CALL_OW 310
15897: ST_TO_ADDR
15898: GO 15914
// place := speaker [ 1 ] ;
15900: LD_ADDR_VAR 0 4
15904: PUSH
15905: LD_VAR 0 3
15909: PUSH
15910: LD_INT 1
15912: ARRAY
15913: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15914: LD_VAR 0 4
15918: PPUSH
15919: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15923: LD_VAR 0 4
15927: PPUSH
15928: CALL_OW 250
15932: PPUSH
15933: LD_VAR 0 4
15937: PPUSH
15938: CALL_OW 251
15942: PPUSH
15943: CALL 2147 0 2
// wait ( 0 0$2 ) ;
15947: LD_INT 70
15949: PPUSH
15950: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15954: LD_EXP 38
15958: PPUSH
15959: CALL_OW 305
15963: NOT
15964: IFFALSE 15968
// exit ;
15966: GO 16432
// allowConvoys := false ;
15968: LD_ADDR_EXP 12
15972: PUSH
15973: LD_INT 0
15975: ST_TO_ADDR
// InGameOn ;
15976: CALL_OW 8
// wait ( 0 0$1 ) ;
15980: LD_INT 35
15982: PPUSH
15983: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15987: LD_EXP 38
15991: PPUSH
15992: LD_STRING DI-1-land
15994: PPUSH
15995: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15999: LD_VAR 0 3
16003: PUSH
16004: LD_INT 1
16006: ARRAY
16007: PPUSH
16008: CALL_OW 310
16012: IFFALSE 16027
// ComExit ( speaker [ 1 ] ) ;
16014: LD_VAR 0 3
16018: PUSH
16019: LD_INT 1
16021: ARRAY
16022: PPUSH
16023: CALL 75816 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16027: LD_VAR 0 3
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: PPUSH
16036: LD_EXP 38
16040: PPUSH
16041: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16045: LD_VAR 0 3
16049: PUSH
16050: LD_INT 1
16052: ARRAY
16053: PPUSH
16054: LD_EXP 38
16058: PPUSH
16059: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16063: LD_EXP 38
16067: PPUSH
16068: LD_VAR 0 3
16072: PUSH
16073: LD_INT 1
16075: ARRAY
16076: PPUSH
16077: CALL_OW 119
// wait ( 0 0$1 ) ;
16081: LD_INT 35
16083: PPUSH
16084: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16088: LD_VAR 0 3
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 2
16104: ARRAY
16105: PUSH
16106: LD_STRING -1-land
16108: STR
16109: PPUSH
16110: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16114: LD_EXP 38
16118: PPUSH
16119: LD_STRING DI-2-land
16121: PPUSH
16122: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16126: LD_VAR 0 3
16130: PUSH
16131: LD_INT 1
16133: ARRAY
16134: PPUSH
16135: LD_VAR 0 3
16139: PUSH
16140: LD_INT 2
16142: ARRAY
16143: PUSH
16144: LD_STRING -2-land
16146: STR
16147: PPUSH
16148: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16152: LD_VAR 0 3
16156: PUSH
16157: LD_INT 1
16159: ARRAY
16160: PPUSH
16161: LD_VAR 0 3
16165: PUSH
16166: LD_INT 2
16168: ARRAY
16169: PUSH
16170: LD_STRING -3-land
16172: STR
16173: PPUSH
16174: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16178: LD_EXP 28
16182: PPUSH
16183: LD_STRING DH-1-land
16185: PPUSH
16186: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16190: LD_VAR 0 5
16194: PPUSH
16195: CALL_OW 313
16199: PUSH
16200: LD_INT 6
16202: EQUAL
16203: IFFALSE 16223
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16205: LD_VAR 0 5
16209: PPUSH
16210: CALL_OW 313
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: PPUSH
16219: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16223: LD_EXP 38
16227: PPUSH
16228: LD_INT 2
16230: PPUSH
16231: CALL_OW 235
// CenterOnUnits ( depot ) ;
16235: LD_VAR 0 5
16239: PPUSH
16240: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16244: LD_EXP 38
16248: PPUSH
16249: LD_VAR 0 5
16253: PPUSH
16254: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16258: LD_VAR 0 3
16262: PUSH
16263: LD_INT 1
16265: ARRAY
16266: PPUSH
16267: LD_VAR 0 5
16271: PPUSH
16272: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16276: LD_INT 35
16278: PPUSH
16279: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16283: LD_EXP 38
16287: PPUSH
16288: CALL_OW 310
16292: PUSH
16293: LD_EXP 38
16297: PPUSH
16298: CALL_OW 302
16302: NOT
16303: OR
16304: PUSH
16305: LD_VAR 0 5
16309: PPUSH
16310: CALL_OW 302
16314: NOT
16315: OR
16316: IFFALSE 16276
// InGameOff ;
16318: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16322: LD_EXP 38
16326: PPUSH
16327: CALL_OW 302
16331: NOT
16332: IFFALSE 16336
// exit ;
16334: GO 16432
// if not IsOk ( depot ) then
16336: LD_VAR 0 5
16340: PPUSH
16341: CALL_OW 302
16345: NOT
16346: IFFALSE 16409
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16348: LD_EXP 38
16352: PPUSH
16353: LD_INT 30
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16363: LD_INT 35
16365: PPUSH
16366: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16370: LD_EXP 38
16374: PPUSH
16375: LD_INT 30
16377: PPUSH
16378: LD_INT 1
16380: PPUSH
16381: CALL_OW 307
16385: PUSH
16386: LD_EXP 38
16390: PPUSH
16391: CALL_OW 301
16395: OR
16396: IFFALSE 16363
// RemoveUnit ( Ibrahim ) ;
16398: LD_EXP 38
16402: PPUSH
16403: CALL_OW 64
// exit ;
16407: GO 16432
// end ; ibrahimInDepot := true ;
16409: LD_ADDR_EXP 25
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// allowConvoys := true ;
16417: LD_ADDR_EXP 12
16421: PUSH
16422: LD_INT 1
16424: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16425: LD_STRING IbrahimInDepot
16427: PPUSH
16428: CALL_OW 97
// end ;
16432: PPOPN 5
16434: END
// export function IbrahimQuery ; begin
16435: LD_INT 0
16437: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16438: LD_STRING IbrahimQuery
16440: PPUSH
16441: CALL_OW 97
16445: PUSH
16446: LD_INT 1
16448: DOUBLE
16449: EQUAL
16450: IFTRUE 16454
16452: GO 16816
16454: POP
// begin allowConvoys := false ;
16455: LD_ADDR_EXP 12
16459: PUSH
16460: LD_INT 0
16462: ST_TO_ADDR
// ibrahimInDepot := false ;
16463: LD_ADDR_EXP 25
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// InGameOn ;
16471: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16475: LD_EXP 28
16479: PPUSH
16480: CALL_OW 87
// wait ( 0 0$1 ) ;
16484: LD_INT 35
16486: PPUSH
16487: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16491: LD_EXP 28
16495: PPUSH
16496: LD_STRING DH-1-interrogation
16498: PPUSH
16499: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16503: LD_EXP 38
16507: PPUSH
16508: LD_STRING DI-1-interrogation
16510: PPUSH
16511: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16515: LD_EXP 28
16519: PPUSH
16520: LD_STRING DH-2-interrogation
16522: PPUSH
16523: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16527: LD_EXP 38
16531: PPUSH
16532: LD_STRING DI-2-interrogation
16534: PPUSH
16535: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16539: LD_EXP 28
16543: PPUSH
16544: LD_STRING DH-3-interrogation
16546: PPUSH
16547: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16551: LD_EXP 38
16555: PPUSH
16556: LD_STRING DI-3-interrogation
16558: PPUSH
16559: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16563: LD_EXP 28
16567: PPUSH
16568: LD_STRING DH-4-interrogation
16570: PPUSH
16571: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16575: LD_EXP 38
16579: PPUSH
16580: LD_STRING DI-4-interrogation
16582: PPUSH
16583: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16587: LD_EXP 28
16591: PPUSH
16592: LD_STRING DH-5-interrogation
16594: PPUSH
16595: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16599: LD_EXP 38
16603: PPUSH
16604: LD_STRING DI-5-interrogation
16606: PPUSH
16607: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16611: LD_INT 10
16613: PPUSH
16614: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16618: LD_EXP 28
16622: PPUSH
16623: LD_STRING DH-6-interrogation
16625: PPUSH
16626: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16630: LD_EXP 38
16634: PPUSH
16635: LD_STRING DI-6-interrogation
16637: PPUSH
16638: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16642: LD_EXP 38
16646: PPUSH
16647: LD_STRING DI-7-interrogation
16649: PPUSH
16650: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
16654: LD_EXP 28
16658: PPUSH
16659: LD_STRING DH-7-interrogation
16661: PPUSH
16662: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16666: LD_INT 10
16668: PPUSH
16669: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
16673: LD_EXP 28
16677: PPUSH
16678: LD_STRING DH-8-interrogation
16680: PPUSH
16681: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
16685: LD_EXP 38
16689: PPUSH
16690: LD_STRING DI-8-interrogation
16692: PPUSH
16693: CALL_OW 88
// wait ( 0 0$1 ) ;
16697: LD_INT 35
16699: PPUSH
16700: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16704: LD_STRING IbrahimDecisionQuery
16706: PPUSH
16707: CALL_OW 97
16711: PUSH
16712: LD_INT 1
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16744
16720: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16721: LD_EXP 38
16725: PPUSH
16726: LD_STRING DI-1-kill
16728: PPUSH
16729: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16733: LD_EXP 38
16737: PPUSH
16738: CALL_OW 66
// end ; 2 :
16742: GO 16810
16744: LD_INT 2
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16809
16752: POP
// begin SetSide ( Ibrahim , 6 ) ;
16753: LD_EXP 38
16757: PPUSH
16758: LD_INT 6
16760: PPUSH
16761: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16765: LD_EXP 38
16769: PPUSH
16770: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16774: LD_EXP 38
16778: PPUSH
16779: LD_INT 66
16781: PPUSH
16782: LD_INT 2
16784: PPUSH
16785: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16789: LD_EXP 38
16793: PPUSH
16794: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16798: LD_EXP 28
16802: PPUSH
16803: CALL_OW 122
// end ; end ;
16807: GO 16810
16809: POP
// InGameOff ;
16810: CALL_OW 9
// end ; 2 :
16814: GO 16830
16816: LD_INT 2
16818: DOUBLE
16819: EQUAL
16820: IFTRUE 16824
16822: GO 16829
16824: POP
// exit ; end ;
16825: GO 16906
16827: GO 16830
16829: POP
// allowConvoys := true ;
16830: LD_ADDR_EXP 12
16834: PUSH
16835: LD_INT 1
16837: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16838: LD_INT 5250
16840: PPUSH
16841: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16845: LD_INT 35
16847: PPUSH
16848: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16852: LD_INT 81
16854: PUSH
16855: LD_INT 2
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 21
16864: PUSH
16865: LD_INT 1
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 69
16880: NOT
16881: IFFALSE 16845
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16883: LD_EXP 38
16887: PPUSH
16888: LD_INT 34
16890: PPUSH
16891: LD_INT 21
16893: PPUSH
16894: CALL_OW 111
// ibrahimIsFree := true ;
16898: LD_ADDR_EXP 26
16902: PUSH
16903: LD_INT 1
16905: ST_TO_ADDR
// end ;
16906: LD_VAR 0 1
16910: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16911: LD_EXP 26
16915: PUSH
16916: LD_EXP 38
16920: PPUSH
16921: CALL_OW 302
16925: AND
16926: PUSH
16927: LD_INT 2
16929: PPUSH
16930: LD_EXP 38
16934: PPUSH
16935: CALL_OW 292
16939: AND
16940: IFFALSE 17707
16942: GO 16944
16944: DISABLE
16945: LD_INT 0
16947: PPUSH
16948: PPUSH
16949: PPUSH
16950: PPUSH
16951: PPUSH
16952: PPUSH
// begin wait ( 0 0$10 ) ;
16953: LD_INT 350
16955: PPUSH
16956: CALL_OW 67
// allowConvoys := false ;
16960: LD_ADDR_EXP 12
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// depot := usDepot ;
16968: LD_ADDR_VAR 0 4
16972: PUSH
16973: LD_INT 11
16975: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16976: LD_INT 11
16978: NOT
16979: PUSH
16980: LD_INT 22
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 50
16992: PUSH
16993: EMPTY
16994: LIST
16995: PUSH
16996: LD_INT 30
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: PPUSH
17011: CALL_OW 69
17015: AND
17016: IFFALSE 17063
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17018: LD_ADDR_VAR 0 4
17022: PUSH
17023: LD_INT 22
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 50
17035: PUSH
17036: EMPTY
17037: LIST
17038: PUSH
17039: LD_INT 30
17041: PUSH
17042: LD_INT 0
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: PPUSH
17054: CALL_OW 69
17058: PUSH
17059: LD_INT 1
17061: ARRAY
17062: ST_TO_ADDR
// InGameOn ;
17063: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17067: LD_EXP 38
17071: PPUSH
17072: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17076: LD_EXP 38
17080: PPUSH
17081: LD_STRING DI-1-free
17083: PPUSH
17084: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17088: LD_EXP 28
17092: PPUSH
17093: LD_EXP 38
17097: PPUSH
17098: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17102: LD_EXP 28
17106: PPUSH
17107: LD_STRING DH-1-free
17109: PPUSH
17110: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17114: LD_EXP 38
17118: PPUSH
17119: LD_EXP 28
17123: PPUSH
17124: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17128: LD_EXP 38
17132: PPUSH
17133: LD_STRING DI-2-free
17135: PPUSH
17136: CALL_OW 88
// changeClass := 0 ;
17140: LD_ADDR_VAR 0 1
17144: PUSH
17145: LD_INT 0
17147: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17148: LD_STRING IbrahimJoinQuery
17150: PPUSH
17151: CALL_OW 97
17155: PUSH
17156: LD_INT 1
17158: DOUBLE
17159: EQUAL
17160: IFTRUE 17164
17162: GO 17175
17164: POP
// begin changeClass := 1 ;
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_INT 1
17172: ST_TO_ADDR
// end ; 2 :
17173: GO 17415
17175: LD_INT 2
17177: DOUBLE
17178: EQUAL
17179: IFTRUE 17183
17181: GO 17335
17183: POP
// begin Say ( Heike , DH-1-decline ) ;
17184: LD_EXP 28
17188: PPUSH
17189: LD_STRING DH-1-decline
17191: PPUSH
17192: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17196: LD_EXP 38
17200: PPUSH
17201: LD_STRING DI-1-decline
17203: PPUSH
17204: CALL_OW 88
// InGameOff ;
17208: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17212: LD_EXP 38
17216: PPUSH
17217: LD_INT 30
17219: PPUSH
17220: LD_INT 1
17222: PPUSH
17223: CALL_OW 111
// p := 0 ;
17227: LD_ADDR_VAR 0 3
17231: PUSH
17232: LD_INT 0
17234: ST_TO_ADDR
// repeat p := p + 1 ;
17235: LD_ADDR_VAR 0 3
17239: PUSH
17240: LD_VAR 0 3
17244: PUSH
17245: LD_INT 1
17247: PLUS
17248: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17249: LD_INT 35
17251: PPUSH
17252: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17256: LD_EXP 38
17260: PPUSH
17261: LD_INT 30
17263: PPUSH
17264: LD_INT 1
17266: PPUSH
17267: CALL_OW 307
17271: PUSH
17272: LD_INT 22
17274: PUSH
17275: LD_INT 2
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 101
17284: PUSH
17285: LD_INT 6
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PPUSH
17296: CALL_OW 69
17300: NOT
17301: OR
17302: PUSH
17303: LD_VAR 0 3
17307: PUSH
17308: LD_INT 10
17310: GREATER
17311: OR
17312: IFFALSE 17235
// RemoveUnit ( Ibrahim ) ;
17314: LD_EXP 38
17318: PPUSH
17319: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17323: LD_INT 1
17325: PPUSH
17326: LD_STRING 03_IbrahimHasEscaped
17328: PPUSH
17329: CALL_OW 39
// end ; 3 :
17333: GO 17415
17335: LD_INT 3
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17414
17343: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17344: LD_EXP 28
17348: PPUSH
17349: LD_STRING DH-1-radio-hq
17351: PPUSH
17352: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17356: LD_EXP 37
17360: PPUSH
17361: LD_STRING DO-1-radio-hq
17363: PPUSH
17364: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17368: LD_EXP 28
17372: PPUSH
17373: LD_STRING DH-2-radio-hq
17375: PPUSH
17376: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17380: LD_EXP 37
17384: PPUSH
17385: LD_STRING DO-2-radio-hq
17387: PPUSH
17388: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17392: LD_EXP 28
17396: PPUSH
17397: LD_STRING DH-3-radio-hq
17399: PPUSH
17400: CALL_OW 88
// changeClass := 1 ;
17404: LD_ADDR_VAR 0 1
17408: PUSH
17409: LD_INT 1
17411: ST_TO_ADDR
// end ; end ;
17412: GO 17415
17414: POP
// if changeClass then
17415: LD_VAR 0 1
17419: IFFALSE 17707
// begin Say ( Heike , DH-1-agree ) ;
17421: LD_EXP 28
17425: PPUSH
17426: LD_STRING DH-1-agree
17428: PPUSH
17429: CALL_OW 88
// if IsOk ( Givi ) then
17433: LD_EXP 29
17437: PPUSH
17438: CALL_OW 302
17442: IFFALSE 17480
// begin Say ( Givi , DG-1-agree ) ;
17444: LD_EXP 29
17448: PPUSH
17449: LD_STRING DG-1-agree
17451: PPUSH
17452: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17456: LD_EXP 28
17460: PPUSH
17461: LD_STRING DH-2-agree
17463: PPUSH
17464: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17468: LD_EXP 29
17472: PPUSH
17473: LD_STRING DG-2-agree
17475: PPUSH
17476: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17480: LD_VAR 0 4
17484: PPUSH
17485: CALL_OW 313
17489: PUSH
17490: LD_INT 6
17492: EQUAL
17493: IFFALSE 17513
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17495: LD_VAR 0 4
17499: PPUSH
17500: CALL_OW 313
17504: PUSH
17505: LD_INT 1
17507: ARRAY
17508: PPUSH
17509: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17513: LD_EXP 38
17517: PPUSH
17518: LD_INT 2
17520: PPUSH
17521: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17525: LD_ADDR_VAR 0 5
17529: PUSH
17530: LD_EXP 38
17534: PPUSH
17535: CALL_OW 250
17539: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17540: LD_ADDR_VAR 0 6
17544: PUSH
17545: LD_EXP 38
17549: PPUSH
17550: CALL_OW 251
17554: ST_TO_ADDR
// if depot then
17555: LD_VAR 0 4
17559: IFFALSE 17608
// begin ComEnterUnit ( Ibrahim , depot ) ;
17561: LD_EXP 38
17565: PPUSH
17566: LD_VAR 0 4
17570: PPUSH
17571: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17575: LD_INT 35
17577: PPUSH
17578: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17582: LD_EXP 38
17586: PPUSH
17587: CALL_OW 310
17591: IFFALSE 17575
// b := IsInUnit ( Ibrahim ) ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_EXP 38
17602: PPUSH
17603: CALL_OW 310
17607: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17608: LD_EXP 38
17612: PPUSH
17613: CALL_OW 64
// uc_side := 2 ;
17617: LD_ADDR_OWVAR 20
17621: PUSH
17622: LD_INT 2
17624: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17625: LD_ADDR_EXP 38
17629: PUSH
17630: LD_STRING Ibrahim
17632: PPUSH
17633: LD_INT 0
17635: PPUSH
17636: LD_STRING 
17638: PPUSH
17639: CALL 38747 0 3
17643: ST_TO_ADDR
// if depot then
17644: LD_VAR 0 4
17648: IFFALSE 17666
// PlaceHumanInUnit ( Ibrahim , b ) else
17650: LD_EXP 38
17654: PPUSH
17655: LD_VAR 0 2
17659: PPUSH
17660: CALL_OW 52
17664: GO 17688
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17666: LD_EXP 38
17670: PPUSH
17671: LD_VAR 0 5
17675: PPUSH
17676: LD_VAR 0 6
17680: PPUSH
17681: LD_INT 0
17683: PPUSH
17684: CALL_OW 48
// InGameOff ;
17688: CALL_OW 9
// allowConvoys := true ;
17692: LD_ADDR_EXP 12
17696: PUSH
17697: LD_INT 1
17699: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17700: LD_STRING ACH_IBRAHIM
17702: PPUSH
17703: CALL_OW 543
// end ; end ;
17707: PPOPN 6
17709: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17710: LD_EXP 33
17714: PPUSH
17715: CALL_OW 256
17719: PUSH
17720: LD_INT 3
17722: LESS
17723: IFFALSE 17790
17725: GO 17727
17727: DISABLE
// begin DialogueOn ;
17728: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17732: LD_EXP 33
17736: PPUSH
17737: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17741: LD_EXP 33
17745: PPUSH
17746: LD_STRING DK-keydeath-1
17748: PPUSH
17749: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17753: LD_EXP 28
17757: PPUSH
17758: LD_STRING DH-keydeath-2
17760: PPUSH
17761: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17765: LD_EXP 28
17769: PPUSH
17770: LD_STRING DH-keydeath-3
17772: PPUSH
17773: CALL_OW 88
// DialogueOff ;
17777: CALL_OW 7
// KillUnit ( Kaia ) ;
17781: LD_EXP 33
17785: PPUSH
17786: CALL_OW 66
// end ;
17790: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17791: LD_EXP 11
17795: PUSH
17796: LD_EXP 21
17800: PUSH
17801: LD_INT 1
17803: LESS
17804: AND
17805: IFFALSE 18345
17807: GO 17809
17809: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17810: LD_INT 22
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 2
17822: PUSH
17823: LD_INT 25
17825: PUSH
17826: LD_INT 1
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 25
17835: PUSH
17836: LD_INT 3
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL_OW 69
17856: IFFALSE 17934
// begin ChangeSideFog ( 1 , 2 ) ;
17858: LD_INT 1
17860: PPUSH
17861: LD_INT 2
17863: PPUSH
17864: CALL_OW 343
// Query ( DestroyEnemy ) ;
17868: LD_STRING DestroyEnemy
17870: PPUSH
17871: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17875: LD_INT 35
17877: PPUSH
17878: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17882: LD_INT 22
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: LD_INT 25
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 25
17907: PUSH
17908: LD_INT 3
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PPUSH
17924: CALL_OW 69
17928: PUSH
17929: LD_INT 0
17931: EQUAL
17932: IFFALSE 17875
// end ; DialogueOn ;
17934: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17938: LD_EXP 28
17942: PPUSH
17943: LD_STRING DH-1-final
17945: PPUSH
17946: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
17950: LD_OWVAR 1
17954: PUSH
17955: LD_INT 126000
17957: PUSH
17958: LD_INT 115500
17960: PUSH
17961: LD_INT 105000
17963: PUSH
17964: LD_INT 94500
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: PUSH
17973: LD_OWVAR 67
17977: ARRAY
17978: LESSEQUAL
17979: IFFALSE 17993
// AddMedal ( med1 , 1 ) else
17981: LD_STRING med1
17983: PPUSH
17984: LD_INT 1
17986: PPUSH
17987: CALL_OW 101
17991: GO 18004
// AddMedal ( med1 , - 1 ) ;
17993: LD_STRING med1
17995: PPUSH
17996: LD_INT 1
17998: NEG
17999: PPUSH
18000: CALL_OW 101
// if vehCounter >= 2 then
18004: LD_EXP 22
18008: PUSH
18009: LD_INT 2
18011: GREATEREQUAL
18012: IFFALSE 18026
// AddMedal ( med2 , 1 ) else
18014: LD_STRING med2
18016: PPUSH
18017: LD_INT 1
18019: PPUSH
18020: CALL_OW 101
18024: GO 18037
// AddMedal ( med2 , - 1 ) ;
18026: LD_STRING med2
18028: PPUSH
18029: LD_INT 1
18031: NEG
18032: PPUSH
18033: CALL_OW 101
// if deadCounter = 0 then
18037: LD_EXP 9
18041: PUSH
18042: LD_INT 0
18044: EQUAL
18045: IFFALSE 18059
// AddMedal ( med3 , 1 ) else
18047: LD_STRING med3
18049: PPUSH
18050: LD_INT 1
18052: PPUSH
18053: CALL_OW 101
18057: GO 18070
// AddMedal ( med3 , - 1 ) ;
18059: LD_STRING med3
18061: PPUSH
18062: LD_INT 1
18064: NEG
18065: PPUSH
18066: CALL_OW 101
// GiveMedals ( MAIN ) ;
18070: LD_STRING MAIN
18072: PPUSH
18073: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18077: LD_INT 22
18079: PUSH
18080: LD_INT 2
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 23
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 21
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: LIST
18111: PPUSH
18112: CALL_OW 69
18116: PPUSH
18117: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18121: LD_EXP 28
18125: PPUSH
18126: LD_STRING 03_Heike
18128: PPUSH
18129: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18133: LD_EXP 32
18137: PPUSH
18138: LD_STRING 03_Aviradze
18140: PPUSH
18141: CALL_OW 38
// if Givi then
18145: LD_EXP 29
18149: IFFALSE 18163
// SaveCharacters ( Givi , 03_Givi ) ;
18151: LD_EXP 29
18155: PPUSH
18156: LD_STRING 03_Givi
18158: PPUSH
18159: CALL_OW 38
// if Mike then
18163: LD_EXP 30
18167: IFFALSE 18181
// SaveCharacters ( Mike , 03_Mike ) ;
18169: LD_EXP 30
18173: PPUSH
18174: LD_STRING 03_Mike
18176: PPUSH
18177: CALL_OW 38
// if Kamil then
18181: LD_EXP 31
18185: IFFALSE 18199
// SaveCharacters ( Kamil , 03_Kamil ) ;
18187: LD_EXP 31
18191: PPUSH
18192: LD_STRING 03_Kamil
18194: PPUSH
18195: CALL_OW 38
// if Kaia then
18199: LD_EXP 33
18203: IFFALSE 18217
// SaveCharacters ( Kaia , 03_Kaia ) ;
18205: LD_EXP 33
18209: PPUSH
18210: LD_STRING 03_Kaia
18212: PPUSH
18213: CALL_OW 38
// if Sophia then
18217: LD_EXP 34
18221: IFFALSE 18235
// SaveCharacters ( Sophia , 03_Sophia ) ;
18223: LD_EXP 34
18227: PPUSH
18228: LD_STRING 03_Sophia
18230: PPUSH
18231: CALL_OW 38
// if Markov then
18235: LD_EXP 35
18239: IFFALSE 18253
// SaveCharacters ( Markov , 03_Markov ) ;
18241: LD_EXP 35
18245: PPUSH
18246: LD_STRING 03_Markov
18248: PPUSH
18249: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18253: LD_EXP 38
18257: PUSH
18258: LD_EXP 38
18262: PPUSH
18263: CALL_OW 255
18267: PUSH
18268: LD_INT 2
18270: EQUAL
18271: AND
18272: IFFALSE 18293
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18274: LD_STRING enableBioCharacter(BIO_IBRA)
18276: PPUSH
18277: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18281: LD_EXP 38
18285: PPUSH
18286: LD_STRING 03_Ibrahim
18288: PPUSH
18289: CALL_OW 38
// end ; if heikeSecondSquad then
18293: LD_EXP 42
18297: IFFALSE 18311
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18299: LD_EXP 42
18303: PPUSH
18304: LD_STRING 03_others
18306: PPUSH
18307: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18311: LD_EXP 9
18315: PPUSH
18316: LD_STRING 03_DeadCounter
18318: PPUSH
18319: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18323: LD_STRING enableBioCharacter(BIO_OMAR)
18325: PPUSH
18326: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18330: LD_STRING enableBioCharacter(BIO_FARM)
18332: PPUSH
18333: CALL_OW 559
// YouWin ;
18337: CALL_OW 103
// DialogueOff ;
18341: CALL_OW 7
// end ; end_of_file
18345: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: CALL 34107 0 1
// if un = Heike then
18355: LD_VAR 0 1
18359: PUSH
18360: LD_EXP 28
18364: EQUAL
18365: IFFALSE 18374
// YouLost ( Heike ) ;
18367: LD_STRING Heike
18369: PPUSH
18370: CALL_OW 104
// if un = Aviradze then
18374: LD_VAR 0 1
18378: PUSH
18379: LD_EXP 32
18383: EQUAL
18384: IFFALSE 18393
// YouLost ( Aviradze ) ;
18386: LD_STRING Aviradze
18388: PPUSH
18389: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18393: LD_VAR 0 1
18397: PUSH
18398: LD_INT 11
18400: EQUAL
18401: PUSH
18402: LD_EXP 11
18406: NOT
18407: AND
18408: IFFALSE 18417
// YouLost ( Depot ) ;
18410: LD_STRING Depot
18412: PPUSH
18413: CALL_OW 104
// if un = arDepot then
18417: LD_VAR 0 1
18421: PUSH
18422: LD_INT 5
18424: EQUAL
18425: IFFALSE 18434
// YouLost ( FarmerDepot ) ;
18427: LD_STRING FarmerDepot
18429: PPUSH
18430: CALL_OW 104
// if un = Farmer then
18434: LD_VAR 0 1
18438: PUSH
18439: LD_EXP 36
18443: EQUAL
18444: IFFALSE 18453
// YouLost ( Farmer ) ;
18446: LD_STRING Farmer
18448: PPUSH
18449: CALL_OW 104
// if un in usForces then
18453: LD_VAR 0 1
18457: PUSH
18458: LD_EXP 44
18462: IN
18463: IFFALSE 18481
// usForces := usForces diff un ;
18465: LD_ADDR_EXP 44
18469: PUSH
18470: LD_EXP 44
18474: PUSH
18475: LD_VAR 0 1
18479: DIFF
18480: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18481: LD_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 2
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 23
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 21
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL_OW 69
18525: IN
18526: IFFALSE 18542
// deadCounter := deadCounter + 1 ;
18528: LD_ADDR_EXP 9
18532: PUSH
18533: LD_EXP 9
18537: PUSH
18538: LD_INT 1
18540: PLUS
18541: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18542: LD_VAR 0 1
18546: PUSH
18547: LD_INT 22
18549: PUSH
18550: LD_INT 4
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 34
18559: PUSH
18560: LD_INT 12
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: IN
18576: PUSH
18577: LD_EXP 18
18581: NOT
18582: AND
18583: IFFALSE 18593
// firstConvoyDestroyed := true ;
18585: LD_ADDR_EXP 18
18589: PUSH
18590: LD_INT 1
18592: ST_TO_ADDR
// if un in usAttackers then
18593: LD_VAR 0 1
18597: PUSH
18598: LD_EXP 47
18602: IN
18603: IFFALSE 18621
// usAttackers := usAttackers diff un ;
18605: LD_ADDR_EXP 47
18609: PUSH
18610: LD_EXP 47
18614: PUSH
18615: LD_VAR 0 1
18619: DIFF
18620: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18621: LD_VAR 0 1
18625: PUSH
18626: LD_INT 22
18628: PUSH
18629: LD_INT 5
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: IN
18655: IFFALSE 18671
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18657: LD_ADDR_EXP 20
18661: PUSH
18662: LD_EXP 20
18666: PUSH
18667: LD_INT 1
18669: PLUS
18670: ST_TO_ADDR
// end ;
18671: PPOPN 1
18673: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18674: LD_VAR 0 2
18678: PUSH
18679: LD_EXP 38
18683: EQUAL
18684: PUSH
18685: LD_EXP 25
18689: AND
18690: IFFALSE 18875
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18692: LD_INT 22
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 30
18704: PUSH
18705: LD_INT 0
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 50
18714: PUSH
18715: EMPTY
18716: LIST
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: IFFALSE 18781
// begin InGameOn ;
18729: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18733: LD_EXP 38
18737: PPUSH
18738: LD_INT 11
18740: PPUSH
18741: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18745: LD_INT 35
18747: PPUSH
18748: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18752: LD_EXP 38
18756: PPUSH
18757: LD_INT 11
18759: PPUSH
18760: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18764: LD_EXP 38
18768: PPUSH
18769: CALL_OW 310
18773: IFFALSE 18745
// InGameOff ;
18775: CALL_OW 9
// end else
18779: GO 18875
// begin SetSide ( Ibrahim , 6 ) ;
18781: LD_EXP 38
18785: PPUSH
18786: LD_INT 6
18788: PPUSH
18789: CALL_OW 235
// ibrahimInDepot := false ;
18793: LD_ADDR_EXP 25
18797: PUSH
18798: LD_INT 0
18800: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18801: LD_EXP 38
18805: PPUSH
18806: LD_INT 30
18808: PPUSH
18809: LD_INT 1
18811: PPUSH
18812: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18816: LD_INT 35
18818: PPUSH
18819: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18823: LD_EXP 38
18827: PPUSH
18828: LD_INT 30
18830: PPUSH
18831: LD_INT 1
18833: PPUSH
18834: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18838: LD_EXP 38
18842: PPUSH
18843: LD_INT 30
18845: PPUSH
18846: LD_INT 1
18848: PPUSH
18849: CALL_OW 307
18853: PUSH
18854: LD_EXP 38
18858: PPUSH
18859: CALL_OW 301
18863: OR
18864: IFFALSE 18816
// RemoveUnit ( Ibrahim ) ;
18866: LD_EXP 38
18870: PPUSH
18871: CALL_OW 64
// end ; end ; end ;
18875: PPOPN 2
18877: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18878: LD_VAR 0 2
18882: PUSH
18883: LD_EXP 28
18887: EQUAL
18888: PUSH
18889: LD_VAR 0 1
18893: PUSH
18894: LD_INT 11
18896: EQUAL
18897: AND
18898: PUSH
18899: LD_EXP 25
18903: AND
18904: IFFALSE 18910
// IbrahimQuery ;
18906: CALL 16435 0 0
// end ;
18910: PPOPN 2
18912: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18913: LD_VAR 0 1
18917: PPUSH
18918: CALL_OW 141
// if oldId in usAttackers then
18922: LD_VAR 0 2
18926: PUSH
18927: LD_EXP 47
18931: IN
18932: IFFALSE 18950
// usAttackers := usAttackers diff oldId ;
18934: LD_ADDR_EXP 47
18938: PUSH
18939: LD_EXP 47
18943: PUSH
18944: LD_VAR 0 2
18948: DIFF
18949: ST_TO_ADDR
// if newId in usAttackers then
18950: LD_VAR 0 1
18954: PUSH
18955: LD_EXP 47
18959: IN
18960: IFFALSE 18978
// usAttackers := usAttackers diff newId ;
18962: LD_ADDR_EXP 47
18966: PUSH
18967: LD_EXP 47
18971: PUSH
18972: LD_VAR 0 1
18976: DIFF
18977: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 4
18985: EQUAL
18986: PUSH
18987: LD_EXP 18
18991: NOT
18992: AND
18993: IFFALSE 19003
// firstConvoyDestroyed := true ;
18995: LD_ADDR_EXP 18
18999: PUSH
19000: LD_INT 1
19002: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19003: LD_VAR 0 1
19007: PPUSH
19008: CALL_OW 264
19012: PUSH
19013: LD_INT 12
19015: EQUAL
19016: IFFALSE 19054
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19018: LD_ADDR_EXP 13
19022: PUSH
19023: LD_EXP 13
19027: PUSH
19028: LD_INT 1
19030: PLUS
19031: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19032: LD_VAR 0 1
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL_OW 289
19044: PUSH
19045: LD_INT 0
19047: EQUAL
19048: IFFALSE 19054
// EmptyCargoDialog ;
19050: CALL 15069 0 0
// end ; end ;
19054: PPOPN 4
19056: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19057: LD_VAR 0 1
19061: PUSH
19062: LD_INT 2
19064: EQUAL
19065: PUSH
19066: LD_VAR 0 2
19070: PUSH
19071: LD_INT 5
19073: EQUAL
19074: AND
19075: IFFALSE 19084
// YouLost ( Attack ) ;
19077: LD_STRING Attack
19079: PPUSH
19080: CALL_OW 104
// end ;
19084: PPOPN 2
19086: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19087: LD_VAR 0 1
19091: PPUSH
19092: CALL_OW 255
19096: PUSH
19097: LD_INT 1
19099: EQUAL
19100: PUSH
19101: LD_EXP 6
19105: NOT
19106: AND
19107: IFFALSE 19241
// begin if GetBType ( b ) = b_lab then
19109: LD_VAR 0 1
19113: PPUSH
19114: CALL_OW 266
19118: PUSH
19119: LD_INT 6
19121: EQUAL
19122: IFFALSE 19162
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19124: LD_EXP 44
19128: PPUSH
19129: LD_INT 25
19131: PUSH
19132: LD_INT 4
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 72
19143: PPUSH
19144: LD_VAR 0 1
19148: PPUSH
19149: CALL_OW 120
// AmLabResearch ( b ) ;
19153: LD_VAR 0 1
19157: PPUSH
19158: CALL 5203 0 1
// end ; if GetBType ( b ) = b_armoury then
19162: LD_VAR 0 1
19166: PPUSH
19167: CALL_OW 266
19171: PUSH
19172: LD_INT 4
19174: EQUAL
19175: IFFALSE 19223
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19177: LD_EXP 44
19181: PPUSH
19182: LD_INT 25
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: LD_INT 54
19197: PUSH
19198: EMPTY
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 72
19213: PPUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19223: LD_ADDR_EXP 46
19227: PUSH
19228: LD_EXP 46
19232: PPUSH
19233: LD_INT 1
19235: PPUSH
19236: CALL_OW 3
19240: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 255
19250: PUSH
19251: LD_INT 5
19253: EQUAL
19254: IFFALSE 19268
// SetBLevel ( b , 5 ) ;
19256: LD_VAR 0 1
19260: PPUSH
19261: LD_INT 5
19263: PPUSH
19264: CALL_OW 241
// end ;
19268: PPOPN 1
19270: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19271: LD_VAR 0 1
19275: PPUSH
19276: CALL_OW 255
19280: PUSH
19281: LD_INT 2
19283: EQUAL
19284: IFFALSE 19300
// vehCounter := vehCounter + 1 ;
19286: LD_ADDR_EXP 22
19290: PUSH
19291: LD_EXP 22
19295: PUSH
19296: LD_INT 1
19298: PLUS
19299: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19300: LD_VAR 0 1
19304: PPUSH
19305: LD_VAR 0 2
19309: PPUSH
19310: CALL 34229 0 2
// end ;
19314: PPOPN 2
19316: END
// on SailEvent ( event ) do begin if event = eventAttack then
19317: LD_VAR 0 1
19321: PUSH
19322: LD_EXP 24
19326: EQUAL
19327: IFFALSE 19333
// AmericanAttack ;
19329: CALL 6721 0 0
// end ; end_of_file
19333: PPOPN 1
19335: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19336: LD_OWVAR 1
19340: PUSH
19341: LD_INT 10500
19343: PUSH
19344: LD_INT 9800
19346: PUSH
19347: LD_INT 9450
19349: PUSH
19350: LD_INT 9100
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: PUSH
19359: LD_OWVAR 67
19363: ARRAY
19364: LESSEQUAL
19365: IFFALSE 19392
19367: GO 19369
19369: DISABLE
// begin enable ;
19370: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19371: LD_INT 1
19373: PPUSH
19374: LD_INT 5
19376: PPUSH
19377: CALL_OW 12
19381: PPUSH
19382: LD_INT 9
19384: PPUSH
19385: LD_INT 1
19387: PPUSH
19388: CALL_OW 55
// end ;
19392: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 31 31$00 , 29 29$30 , 29 29$00 , 28 28$00 ] [ Difficulty ] do
19393: LD_EXP 6
19397: PUSH
19398: LD_OWVAR 1
19402: PUSH
19403: LD_INT 65100
19405: PUSH
19406: LD_INT 61950
19408: PUSH
19409: LD_INT 60900
19411: PUSH
19412: LD_INT 58800
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: PUSH
19421: LD_OWVAR 67
19425: ARRAY
19426: LESSEQUAL
19427: AND
19428: IFFALSE 19455
19430: GO 19432
19432: DISABLE
// begin enable ;
19433: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19434: LD_INT 3
19436: PPUSH
19437: LD_INT 5
19439: PPUSH
19440: CALL_OW 12
19444: PPUSH
19445: LD_INT 9
19447: PPUSH
19448: LD_INT 1
19450: PPUSH
19451: CALL_OW 55
// end ; end_of_file
19455: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19456: LD_EXP 11
19460: NOT
19461: PUSH
19462: LD_EXP 16
19466: AND
19467: PUSH
19468: LD_EXP 4
19472: AND
19473: PUSH
19474: LD_EXP 15
19478: PUSH
19479: LD_EXP 16
19483: LESSEQUAL
19484: AND
19485: IFFALSE 19596
19487: GO 19489
19489: DISABLE
// begin enable ;
19490: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19491: LD_ADDR_OWVAR 47
19495: PUSH
19496: LD_STRING #X103-1
19498: PUSH
19499: LD_EXP 16
19503: PUSH
19504: LD_EXP 15
19508: MINUS
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19514: LD_ADDR_EXP 15
19518: PUSH
19519: LD_INT 5
19521: PPUSH
19522: CALL_OW 274
19526: PPUSH
19527: LD_INT 1
19529: PPUSH
19530: CALL_OW 275
19534: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19535: LD_INT 10
19537: PPUSH
19538: LD_INT 1
19540: PPUSH
19541: CALL_OW 287
19545: PUSH
19546: LD_INT 0
19548: EQUAL
19549: IFFALSE 19567
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19551: LD_ADDR_EXP 17
19555: PUSH
19556: LD_EXP 17
19560: PUSH
19561: LD_INT 35
19563: MINUS
19564: ST_TO_ADDR
19565: GO 19596
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19567: LD_ADDR_EXP 17
19571: PUSH
19572: LD_INT 42000
19574: PUSH
19575: LD_INT 31500
19577: PUSH
19578: LD_INT 25200
19580: PUSH
19581: LD_INT 21000
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: PUSH
19590: LD_OWVAR 67
19594: ARRAY
19595: ST_TO_ADDR
// end ; end_of_file
19596: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19597: LD_INT 0
19599: PPUSH
// ar_miner := 81 ;
19600: LD_ADDR_EXP 55
19604: PUSH
19605: LD_INT 81
19607: ST_TO_ADDR
// ar_crane := 88 ;
19608: LD_ADDR_EXP 54
19612: PUSH
19613: LD_INT 88
19615: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19616: LD_ADDR_EXP 49
19620: PUSH
19621: LD_INT 89
19623: ST_TO_ADDR
// us_hack := 99 ;
19624: LD_ADDR_EXP 50
19628: PUSH
19629: LD_INT 99
19631: ST_TO_ADDR
// us_artillery := 97 ;
19632: LD_ADDR_EXP 51
19636: PUSH
19637: LD_INT 97
19639: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19640: LD_ADDR_EXP 52
19644: PUSH
19645: LD_INT 91
19647: ST_TO_ADDR
// ar_mortar := 92 ;
19648: LD_ADDR_EXP 53
19652: PUSH
19653: LD_INT 92
19655: ST_TO_ADDR
// ru_flamethrower := 93 ;
19656: LD_ADDR_EXP 56
19660: PUSH
19661: LD_INT 93
19663: ST_TO_ADDR
// ru_radar := 98 ;
19664: LD_ADDR_EXP 48
19668: PUSH
19669: LD_INT 98
19671: ST_TO_ADDR
// tech_Artillery := 80 ;
19672: LD_ADDR_EXP 57
19676: PUSH
19677: LD_INT 80
19679: ST_TO_ADDR
// tech_RadMat := 81 ;
19680: LD_ADDR_EXP 58
19684: PUSH
19685: LD_INT 81
19687: ST_TO_ADDR
// tech_BasicTools := 82 ;
19688: LD_ADDR_EXP 59
19692: PUSH
19693: LD_INT 82
19695: ST_TO_ADDR
// tech_Cargo := 83 ;
19696: LD_ADDR_EXP 60
19700: PUSH
19701: LD_INT 83
19703: ST_TO_ADDR
// tech_Track := 84 ;
19704: LD_ADDR_EXP 61
19708: PUSH
19709: LD_INT 84
19711: ST_TO_ADDR
// tech_Crane := 85 ;
19712: LD_ADDR_EXP 62
19716: PUSH
19717: LD_INT 85
19719: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19720: LD_ADDR_EXP 63
19724: PUSH
19725: LD_INT 86
19727: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19728: LD_ADDR_EXP 64
19732: PUSH
19733: LD_INT 87
19735: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19736: LD_ADDR_EXP 65
19740: PUSH
19741: LD_INT 88
19743: ST_TO_ADDR
// class_mastodont := 31 ;
19744: LD_ADDR_EXP 66
19748: PUSH
19749: LD_INT 31
19751: ST_TO_ADDR
// class_horse := 21 ;
19752: LD_ADDR_EXP 67
19756: PUSH
19757: LD_INT 21
19759: ST_TO_ADDR
// end ;
19760: LD_VAR 0 1
19764: RET
// every 1 do
19765: GO 19767
19767: DISABLE
// InitGlobalVariables ; end_of_file
19768: CALL 19597 0 0
19772: END
// every 0 0$1 do
19773: GO 19775
19775: DISABLE
// begin enable ;
19776: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19777: LD_STRING updateTimer(
19779: PUSH
19780: LD_OWVAR 1
19784: STR
19785: PUSH
19786: LD_STRING );
19788: STR
19789: PPUSH
19790: CALL_OW 559
// end ;
19794: END
// export function SOS_MapStart ( ) ; begin
19795: LD_INT 0
19797: PPUSH
// if streamModeActive then
19798: LD_EXP 68
19802: IFFALSE 19811
// DefineStreamItems ( true ) ;
19804: LD_INT 1
19806: PPUSH
19807: CALL 21461 0 1
// UpdateFactoryWaypoints ( ) ;
19811: CALL 35045 0 0
// end ;
19815: LD_VAR 0 1
19819: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19820: LD_INT 0
19822: PPUSH
// if p2 = 100 then
19823: LD_VAR 0 2
19827: PUSH
19828: LD_INT 100
19830: EQUAL
19831: IFFALSE 20834
// begin if not StreamModeActive then
19833: LD_EXP 68
19837: NOT
19838: IFFALSE 19848
// StreamModeActive := true ;
19840: LD_ADDR_EXP 68
19844: PUSH
19845: LD_INT 1
19847: ST_TO_ADDR
// if p3 = 0 then
19848: LD_VAR 0 3
19852: PUSH
19853: LD_INT 0
19855: EQUAL
19856: IFFALSE 19862
// InitStreamMode ;
19858: CALL 20997 0 0
// if p3 = 1 then
19862: LD_VAR 0 3
19866: PUSH
19867: LD_INT 1
19869: EQUAL
19870: IFFALSE 19880
// sRocket := true ;
19872: LD_ADDR_EXP 73
19876: PUSH
19877: LD_INT 1
19879: ST_TO_ADDR
// if p3 = 2 then
19880: LD_VAR 0 3
19884: PUSH
19885: LD_INT 2
19887: EQUAL
19888: IFFALSE 19898
// sSpeed := true ;
19890: LD_ADDR_EXP 72
19894: PUSH
19895: LD_INT 1
19897: ST_TO_ADDR
// if p3 = 3 then
19898: LD_VAR 0 3
19902: PUSH
19903: LD_INT 3
19905: EQUAL
19906: IFFALSE 19916
// sEngine := true ;
19908: LD_ADDR_EXP 74
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// if p3 = 4 then
19916: LD_VAR 0 3
19920: PUSH
19921: LD_INT 4
19923: EQUAL
19924: IFFALSE 19934
// sSpec := true ;
19926: LD_ADDR_EXP 71
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// if p3 = 5 then
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 5
19941: EQUAL
19942: IFFALSE 19952
// sLevel := true ;
19944: LD_ADDR_EXP 75
19948: PUSH
19949: LD_INT 1
19951: ST_TO_ADDR
// if p3 = 6 then
19952: LD_VAR 0 3
19956: PUSH
19957: LD_INT 6
19959: EQUAL
19960: IFFALSE 19970
// sArmoury := true ;
19962: LD_ADDR_EXP 76
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// if p3 = 7 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_INT 7
19977: EQUAL
19978: IFFALSE 19988
// sRadar := true ;
19980: LD_ADDR_EXP 77
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// if p3 = 8 then
19988: LD_VAR 0 3
19992: PUSH
19993: LD_INT 8
19995: EQUAL
19996: IFFALSE 20006
// sBunker := true ;
19998: LD_ADDR_EXP 78
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// if p3 = 9 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 9
20013: EQUAL
20014: IFFALSE 20024
// sHack := true ;
20016: LD_ADDR_EXP 79
20020: PUSH
20021: LD_INT 1
20023: ST_TO_ADDR
// if p3 = 10 then
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 10
20031: EQUAL
20032: IFFALSE 20042
// sFire := true ;
20034: LD_ADDR_EXP 80
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// if p3 = 11 then
20042: LD_VAR 0 3
20046: PUSH
20047: LD_INT 11
20049: EQUAL
20050: IFFALSE 20060
// sRefresh := true ;
20052: LD_ADDR_EXP 81
20056: PUSH
20057: LD_INT 1
20059: ST_TO_ADDR
// if p3 = 12 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 12
20067: EQUAL
20068: IFFALSE 20078
// sExp := true ;
20070: LD_ADDR_EXP 82
20074: PUSH
20075: LD_INT 1
20077: ST_TO_ADDR
// if p3 = 13 then
20078: LD_VAR 0 3
20082: PUSH
20083: LD_INT 13
20085: EQUAL
20086: IFFALSE 20096
// sDepot := true ;
20088: LD_ADDR_EXP 83
20092: PUSH
20093: LD_INT 1
20095: ST_TO_ADDR
// if p3 = 14 then
20096: LD_VAR 0 3
20100: PUSH
20101: LD_INT 14
20103: EQUAL
20104: IFFALSE 20114
// sFlag := true ;
20106: LD_ADDR_EXP 84
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if p3 = 15 then
20114: LD_VAR 0 3
20118: PUSH
20119: LD_INT 15
20121: EQUAL
20122: IFFALSE 20132
// sKamikadze := true ;
20124: LD_ADDR_EXP 92
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// if p3 = 16 then
20132: LD_VAR 0 3
20136: PUSH
20137: LD_INT 16
20139: EQUAL
20140: IFFALSE 20150
// sTroll := true ;
20142: LD_ADDR_EXP 93
20146: PUSH
20147: LD_INT 1
20149: ST_TO_ADDR
// if p3 = 17 then
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 17
20157: EQUAL
20158: IFFALSE 20168
// sSlow := true ;
20160: LD_ADDR_EXP 94
20164: PUSH
20165: LD_INT 1
20167: ST_TO_ADDR
// if p3 = 18 then
20168: LD_VAR 0 3
20172: PUSH
20173: LD_INT 18
20175: EQUAL
20176: IFFALSE 20186
// sLack := true ;
20178: LD_ADDR_EXP 95
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// if p3 = 19 then
20186: LD_VAR 0 3
20190: PUSH
20191: LD_INT 19
20193: EQUAL
20194: IFFALSE 20204
// sTank := true ;
20196: LD_ADDR_EXP 97
20200: PUSH
20201: LD_INT 1
20203: ST_TO_ADDR
// if p3 = 20 then
20204: LD_VAR 0 3
20208: PUSH
20209: LD_INT 20
20211: EQUAL
20212: IFFALSE 20222
// sRemote := true ;
20214: LD_ADDR_EXP 98
20218: PUSH
20219: LD_INT 1
20221: ST_TO_ADDR
// if p3 = 21 then
20222: LD_VAR 0 3
20226: PUSH
20227: LD_INT 21
20229: EQUAL
20230: IFFALSE 20240
// sPowell := true ;
20232: LD_ADDR_EXP 99
20236: PUSH
20237: LD_INT 1
20239: ST_TO_ADDR
// if p3 = 22 then
20240: LD_VAR 0 3
20244: PUSH
20245: LD_INT 22
20247: EQUAL
20248: IFFALSE 20258
// sTeleport := true ;
20250: LD_ADDR_EXP 102
20254: PUSH
20255: LD_INT 1
20257: ST_TO_ADDR
// if p3 = 23 then
20258: LD_VAR 0 3
20262: PUSH
20263: LD_INT 23
20265: EQUAL
20266: IFFALSE 20276
// sOilTower := true ;
20268: LD_ADDR_EXP 104
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// if p3 = 24 then
20276: LD_VAR 0 3
20280: PUSH
20281: LD_INT 24
20283: EQUAL
20284: IFFALSE 20294
// sShovel := true ;
20286: LD_ADDR_EXP 105
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if p3 = 25 then
20294: LD_VAR 0 3
20298: PUSH
20299: LD_INT 25
20301: EQUAL
20302: IFFALSE 20312
// sSheik := true ;
20304: LD_ADDR_EXP 106
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// if p3 = 26 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 26
20319: EQUAL
20320: IFFALSE 20330
// sEarthquake := true ;
20322: LD_ADDR_EXP 108
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// if p3 = 27 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 27
20337: EQUAL
20338: IFFALSE 20348
// sAI := true ;
20340: LD_ADDR_EXP 109
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// if p3 = 28 then
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 28
20355: EQUAL
20356: IFFALSE 20366
// sCargo := true ;
20358: LD_ADDR_EXP 112
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 29 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 29
20373: EQUAL
20374: IFFALSE 20384
// sDLaser := true ;
20376: LD_ADDR_EXP 113
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 30 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 30
20391: EQUAL
20392: IFFALSE 20402
// sExchange := true ;
20394: LD_ADDR_EXP 114
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 31 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 31
20409: EQUAL
20410: IFFALSE 20420
// sFac := true ;
20412: LD_ADDR_EXP 115
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 32 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 32
20427: EQUAL
20428: IFFALSE 20438
// sPower := true ;
20430: LD_ADDR_EXP 116
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 33 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 33
20445: EQUAL
20446: IFFALSE 20456
// sRandom := true ;
20448: LD_ADDR_EXP 117
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 34 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 34
20463: EQUAL
20464: IFFALSE 20474
// sShield := true ;
20466: LD_ADDR_EXP 118
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 35 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 35
20481: EQUAL
20482: IFFALSE 20492
// sTime := true ;
20484: LD_ADDR_EXP 119
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 36 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 36
20499: EQUAL
20500: IFFALSE 20510
// sTools := true ;
20502: LD_ADDR_EXP 120
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 101 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 101
20517: EQUAL
20518: IFFALSE 20528
// sSold := true ;
20520: LD_ADDR_EXP 85
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 102 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 102
20535: EQUAL
20536: IFFALSE 20546
// sDiff := true ;
20538: LD_ADDR_EXP 86
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// if p3 = 103 then
20546: LD_VAR 0 3
20550: PUSH
20551: LD_INT 103
20553: EQUAL
20554: IFFALSE 20564
// sFog := true ;
20556: LD_ADDR_EXP 89
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if p3 = 104 then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_INT 104
20571: EQUAL
20572: IFFALSE 20582
// sReset := true ;
20574: LD_ADDR_EXP 90
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// if p3 = 105 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 105
20589: EQUAL
20590: IFFALSE 20600
// sSun := true ;
20592: LD_ADDR_EXP 91
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// if p3 = 106 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_INT 106
20607: EQUAL
20608: IFFALSE 20618
// sTiger := true ;
20610: LD_ADDR_EXP 87
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// if p3 = 107 then
20618: LD_VAR 0 3
20622: PUSH
20623: LD_INT 107
20625: EQUAL
20626: IFFALSE 20636
// sBomb := true ;
20628: LD_ADDR_EXP 88
20632: PUSH
20633: LD_INT 1
20635: ST_TO_ADDR
// if p3 = 108 then
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 108
20643: EQUAL
20644: IFFALSE 20654
// sWound := true ;
20646: LD_ADDR_EXP 96
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// if p3 = 109 then
20654: LD_VAR 0 3
20658: PUSH
20659: LD_INT 109
20661: EQUAL
20662: IFFALSE 20672
// sBetray := true ;
20664: LD_ADDR_EXP 100
20668: PUSH
20669: LD_INT 1
20671: ST_TO_ADDR
// if p3 = 110 then
20672: LD_VAR 0 3
20676: PUSH
20677: LD_INT 110
20679: EQUAL
20680: IFFALSE 20690
// sContamin := true ;
20682: LD_ADDR_EXP 101
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// if p3 = 111 then
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 111
20697: EQUAL
20698: IFFALSE 20708
// sOil := true ;
20700: LD_ADDR_EXP 103
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// if p3 = 112 then
20708: LD_VAR 0 3
20712: PUSH
20713: LD_INT 112
20715: EQUAL
20716: IFFALSE 20726
// sStu := true ;
20718: LD_ADDR_EXP 107
20722: PUSH
20723: LD_INT 1
20725: ST_TO_ADDR
// if p3 = 113 then
20726: LD_VAR 0 3
20730: PUSH
20731: LD_INT 113
20733: EQUAL
20734: IFFALSE 20744
// sBazooka := true ;
20736: LD_ADDR_EXP 110
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// if p3 = 114 then
20744: LD_VAR 0 3
20748: PUSH
20749: LD_INT 114
20751: EQUAL
20752: IFFALSE 20762
// sMortar := true ;
20754: LD_ADDR_EXP 111
20758: PUSH
20759: LD_INT 1
20761: ST_TO_ADDR
// if p3 = 115 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 115
20769: EQUAL
20770: IFFALSE 20780
// sRanger := true ;
20772: LD_ADDR_EXP 121
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// if p3 = 116 then
20780: LD_VAR 0 3
20784: PUSH
20785: LD_INT 116
20787: EQUAL
20788: IFFALSE 20798
// sComputer := true ;
20790: LD_ADDR_EXP 122
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// if p3 = 117 then
20798: LD_VAR 0 3
20802: PUSH
20803: LD_INT 117
20805: EQUAL
20806: IFFALSE 20816
// s30 := true ;
20808: LD_ADDR_EXP 123
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// if p3 = 118 then
20816: LD_VAR 0 3
20820: PUSH
20821: LD_INT 118
20823: EQUAL
20824: IFFALSE 20834
// s60 := true ;
20826: LD_ADDR_EXP 124
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// end ; if p2 = 101 then
20834: LD_VAR 0 2
20838: PUSH
20839: LD_INT 101
20841: EQUAL
20842: IFFALSE 20970
// begin case p3 of 1 :
20844: LD_VAR 0 3
20848: PUSH
20849: LD_INT 1
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20864
20857: POP
// hHackUnlimitedResources ; 2 :
20858: CALL 33068 0 0
20862: GO 20970
20864: LD_INT 2
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 20879
20872: POP
// hHackSetLevel10 ; 3 :
20873: CALL 33201 0 0
20877: GO 20970
20879: LD_INT 3
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20894
20887: POP
// hHackSetLevel10YourUnits ; 4 :
20888: CALL 33286 0 0
20892: GO 20970
20894: LD_INT 4
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20909
20902: POP
// hHackInvincible ; 5 :
20903: CALL 33734 0 0
20907: GO 20970
20909: LD_INT 5
20911: DOUBLE
20912: EQUAL
20913: IFTRUE 20917
20915: GO 20924
20917: POP
// hHackInvisible ; 6 :
20918: CALL 33845 0 0
20922: GO 20970
20924: LD_INT 6
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 20939
20932: POP
// hHackChangeYourSide ; 7 :
20933: CALL 33902 0 0
20937: GO 20970
20939: LD_INT 7
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 20954
20947: POP
// hHackChangeUnitSide ; 8 :
20948: CALL 33944 0 0
20952: GO 20970
20954: LD_INT 8
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20962
20960: GO 20969
20962: POP
// hHackFog ; end ;
20963: CALL 34045 0 0
20967: GO 20970
20969: POP
// end ; end ;
20970: LD_VAR 0 7
20974: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20975: GO 20977
20977: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20978: LD_STRING initStreamRollete();
20980: PPUSH
20981: CALL_OW 559
// InitStreamMode ;
20985: CALL 20997 0 0
// DefineStreamItems ( false ) ;
20989: LD_INT 0
20991: PPUSH
20992: CALL 21461 0 1
// end ;
20996: END
// function InitStreamMode ; begin
20997: LD_INT 0
20999: PPUSH
// streamModeActive := false ;
21000: LD_ADDR_EXP 68
21004: PUSH
21005: LD_INT 0
21007: ST_TO_ADDR
// normalCounter := 36 ;
21008: LD_ADDR_EXP 69
21012: PUSH
21013: LD_INT 36
21015: ST_TO_ADDR
// hardcoreCounter := 18 ;
21016: LD_ADDR_EXP 70
21020: PUSH
21021: LD_INT 18
21023: ST_TO_ADDR
// sRocket := false ;
21024: LD_ADDR_EXP 73
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// sSpeed := false ;
21032: LD_ADDR_EXP 72
21036: PUSH
21037: LD_INT 0
21039: ST_TO_ADDR
// sEngine := false ;
21040: LD_ADDR_EXP 74
21044: PUSH
21045: LD_INT 0
21047: ST_TO_ADDR
// sSpec := false ;
21048: LD_ADDR_EXP 71
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// sLevel := false ;
21056: LD_ADDR_EXP 75
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// sArmoury := false ;
21064: LD_ADDR_EXP 76
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// sRadar := false ;
21072: LD_ADDR_EXP 77
21076: PUSH
21077: LD_INT 0
21079: ST_TO_ADDR
// sBunker := false ;
21080: LD_ADDR_EXP 78
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// sHack := false ;
21088: LD_ADDR_EXP 79
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// sFire := false ;
21096: LD_ADDR_EXP 80
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// sRefresh := false ;
21104: LD_ADDR_EXP 81
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// sExp := false ;
21112: LD_ADDR_EXP 82
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sDepot := false ;
21120: LD_ADDR_EXP 83
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sFlag := false ;
21128: LD_ADDR_EXP 84
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sKamikadze := false ;
21136: LD_ADDR_EXP 92
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sTroll := false ;
21144: LD_ADDR_EXP 93
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sSlow := false ;
21152: LD_ADDR_EXP 94
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sLack := false ;
21160: LD_ADDR_EXP 95
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sTank := false ;
21168: LD_ADDR_EXP 97
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sRemote := false ;
21176: LD_ADDR_EXP 98
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sPowell := false ;
21184: LD_ADDR_EXP 99
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sTeleport := false ;
21192: LD_ADDR_EXP 102
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sOilTower := false ;
21200: LD_ADDR_EXP 104
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sShovel := false ;
21208: LD_ADDR_EXP 105
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sSheik := false ;
21216: LD_ADDR_EXP 106
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sEarthquake := false ;
21224: LD_ADDR_EXP 108
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sAI := false ;
21232: LD_ADDR_EXP 109
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// sCargo := false ;
21240: LD_ADDR_EXP 112
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// sDLaser := false ;
21248: LD_ADDR_EXP 113
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sExchange := false ;
21256: LD_ADDR_EXP 114
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sFac := false ;
21264: LD_ADDR_EXP 115
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sPower := false ;
21272: LD_ADDR_EXP 116
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sRandom := false ;
21280: LD_ADDR_EXP 117
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sShield := false ;
21288: LD_ADDR_EXP 118
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sTime := false ;
21296: LD_ADDR_EXP 119
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sTools := false ;
21304: LD_ADDR_EXP 120
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// sSold := false ;
21312: LD_ADDR_EXP 85
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// sDiff := false ;
21320: LD_ADDR_EXP 86
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// sFog := false ;
21328: LD_ADDR_EXP 89
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// sReset := false ;
21336: LD_ADDR_EXP 90
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// sSun := false ;
21344: LD_ADDR_EXP 91
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
// sTiger := false ;
21352: LD_ADDR_EXP 87
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
// sBomb := false ;
21360: LD_ADDR_EXP 88
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// sWound := false ;
21368: LD_ADDR_EXP 96
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// sBetray := false ;
21376: LD_ADDR_EXP 100
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// sContamin := false ;
21384: LD_ADDR_EXP 101
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// sOil := false ;
21392: LD_ADDR_EXP 103
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sStu := false ;
21400: LD_ADDR_EXP 107
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sBazooka := false ;
21408: LD_ADDR_EXP 110
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sMortar := false ;
21416: LD_ADDR_EXP 111
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sRanger := false ;
21424: LD_ADDR_EXP 121
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sComputer := false ;
21432: LD_ADDR_EXP 122
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// s30 := false ;
21440: LD_ADDR_EXP 123
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// s60 := false ;
21448: LD_ADDR_EXP 124
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// end ;
21456: LD_VAR 0 1
21460: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21461: LD_INT 0
21463: PPUSH
21464: PPUSH
21465: PPUSH
21466: PPUSH
21467: PPUSH
21468: PPUSH
21469: PPUSH
// result := [ ] ;
21470: LD_ADDR_VAR 0 2
21474: PUSH
21475: EMPTY
21476: ST_TO_ADDR
// if campaign_id = 1 then
21477: LD_OWVAR 69
21481: PUSH
21482: LD_INT 1
21484: EQUAL
21485: IFFALSE 24651
// begin case mission_number of 1 :
21487: LD_OWVAR 70
21491: PUSH
21492: LD_INT 1
21494: DOUBLE
21495: EQUAL
21496: IFTRUE 21500
21498: GO 21576
21500: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21501: LD_ADDR_VAR 0 2
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: LD_INT 4
21511: PUSH
21512: LD_INT 11
21514: PUSH
21515: LD_INT 12
21517: PUSH
21518: LD_INT 15
21520: PUSH
21521: LD_INT 16
21523: PUSH
21524: LD_INT 22
21526: PUSH
21527: LD_INT 23
21529: PUSH
21530: LD_INT 26
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 101
21546: PUSH
21547: LD_INT 102
21549: PUSH
21550: LD_INT 106
21552: PUSH
21553: LD_INT 116
21555: PUSH
21556: LD_INT 117
21558: PUSH
21559: LD_INT 118
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: ST_TO_ADDR
21574: GO 24649
21576: LD_INT 2
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21668
21584: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21585: LD_ADDR_VAR 0 2
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: LD_INT 4
21595: PUSH
21596: LD_INT 11
21598: PUSH
21599: LD_INT 12
21601: PUSH
21602: LD_INT 15
21604: PUSH
21605: LD_INT 16
21607: PUSH
21608: LD_INT 22
21610: PUSH
21611: LD_INT 23
21613: PUSH
21614: LD_INT 26
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 101
21630: PUSH
21631: LD_INT 102
21633: PUSH
21634: LD_INT 105
21636: PUSH
21637: LD_INT 106
21639: PUSH
21640: LD_INT 108
21642: PUSH
21643: LD_INT 116
21645: PUSH
21646: LD_INT 117
21648: PUSH
21649: LD_INT 118
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: ST_TO_ADDR
21666: GO 24649
21668: LD_INT 3
21670: DOUBLE
21671: EQUAL
21672: IFTRUE 21676
21674: GO 21764
21676: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21677: LD_ADDR_VAR 0 2
21681: PUSH
21682: LD_INT 2
21684: PUSH
21685: LD_INT 4
21687: PUSH
21688: LD_INT 5
21690: PUSH
21691: LD_INT 11
21693: PUSH
21694: LD_INT 12
21696: PUSH
21697: LD_INT 15
21699: PUSH
21700: LD_INT 16
21702: PUSH
21703: LD_INT 22
21705: PUSH
21706: LD_INT 26
21708: PUSH
21709: LD_INT 36
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 101
21726: PUSH
21727: LD_INT 102
21729: PUSH
21730: LD_INT 105
21732: PUSH
21733: LD_INT 106
21735: PUSH
21736: LD_INT 108
21738: PUSH
21739: LD_INT 116
21741: PUSH
21742: LD_INT 117
21744: PUSH
21745: LD_INT 118
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: ST_TO_ADDR
21762: GO 24649
21764: LD_INT 4
21766: DOUBLE
21767: EQUAL
21768: IFTRUE 21772
21770: GO 21868
21772: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21773: LD_ADDR_VAR 0 2
21777: PUSH
21778: LD_INT 2
21780: PUSH
21781: LD_INT 4
21783: PUSH
21784: LD_INT 5
21786: PUSH
21787: LD_INT 8
21789: PUSH
21790: LD_INT 11
21792: PUSH
21793: LD_INT 12
21795: PUSH
21796: LD_INT 15
21798: PUSH
21799: LD_INT 16
21801: PUSH
21802: LD_INT 22
21804: PUSH
21805: LD_INT 23
21807: PUSH
21808: LD_INT 26
21810: PUSH
21811: LD_INT 36
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 101
21830: PUSH
21831: LD_INT 102
21833: PUSH
21834: LD_INT 105
21836: PUSH
21837: LD_INT 106
21839: PUSH
21840: LD_INT 108
21842: PUSH
21843: LD_INT 116
21845: PUSH
21846: LD_INT 117
21848: PUSH
21849: LD_INT 118
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: ST_TO_ADDR
21866: GO 24649
21868: LD_INT 5
21870: DOUBLE
21871: EQUAL
21872: IFTRUE 21876
21874: GO 21988
21876: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21877: LD_ADDR_VAR 0 2
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: LD_INT 4
21887: PUSH
21888: LD_INT 5
21890: PUSH
21891: LD_INT 6
21893: PUSH
21894: LD_INT 8
21896: PUSH
21897: LD_INT 11
21899: PUSH
21900: LD_INT 12
21902: PUSH
21903: LD_INT 15
21905: PUSH
21906: LD_INT 16
21908: PUSH
21909: LD_INT 22
21911: PUSH
21912: LD_INT 23
21914: PUSH
21915: LD_INT 25
21917: PUSH
21918: LD_INT 26
21920: PUSH
21921: LD_INT 36
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 101
21942: PUSH
21943: LD_INT 102
21945: PUSH
21946: LD_INT 105
21948: PUSH
21949: LD_INT 106
21951: PUSH
21952: LD_INT 108
21954: PUSH
21955: LD_INT 109
21957: PUSH
21958: LD_INT 112
21960: PUSH
21961: LD_INT 116
21963: PUSH
21964: LD_INT 117
21966: PUSH
21967: LD_INT 118
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: ST_TO_ADDR
21986: GO 24649
21988: LD_INT 6
21990: DOUBLE
21991: EQUAL
21992: IFTRUE 21996
21994: GO 22128
21996: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21997: LD_ADDR_VAR 0 2
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: LD_INT 4
22007: PUSH
22008: LD_INT 5
22010: PUSH
22011: LD_INT 6
22013: PUSH
22014: LD_INT 8
22016: PUSH
22017: LD_INT 11
22019: PUSH
22020: LD_INT 12
22022: PUSH
22023: LD_INT 15
22025: PUSH
22026: LD_INT 16
22028: PUSH
22029: LD_INT 20
22031: PUSH
22032: LD_INT 21
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_INT 23
22040: PUSH
22041: LD_INT 25
22043: PUSH
22044: LD_INT 26
22046: PUSH
22047: LD_INT 30
22049: PUSH
22050: LD_INT 31
22052: PUSH
22053: LD_INT 32
22055: PUSH
22056: LD_INT 36
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 101
22082: PUSH
22083: LD_INT 102
22085: PUSH
22086: LD_INT 105
22088: PUSH
22089: LD_INT 106
22091: PUSH
22092: LD_INT 108
22094: PUSH
22095: LD_INT 109
22097: PUSH
22098: LD_INT 112
22100: PUSH
22101: LD_INT 116
22103: PUSH
22104: LD_INT 117
22106: PUSH
22107: LD_INT 118
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: ST_TO_ADDR
22126: GO 24649
22128: LD_INT 7
22130: DOUBLE
22131: EQUAL
22132: IFTRUE 22136
22134: GO 22248
22136: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22137: LD_ADDR_VAR 0 2
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 4
22147: PUSH
22148: LD_INT 5
22150: PUSH
22151: LD_INT 7
22153: PUSH
22154: LD_INT 11
22156: PUSH
22157: LD_INT 12
22159: PUSH
22160: LD_INT 15
22162: PUSH
22163: LD_INT 16
22165: PUSH
22166: LD_INT 20
22168: PUSH
22169: LD_INT 21
22171: PUSH
22172: LD_INT 22
22174: PUSH
22175: LD_INT 23
22177: PUSH
22178: LD_INT 25
22180: PUSH
22181: LD_INT 26
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 101
22202: PUSH
22203: LD_INT 102
22205: PUSH
22206: LD_INT 103
22208: PUSH
22209: LD_INT 105
22211: PUSH
22212: LD_INT 106
22214: PUSH
22215: LD_INT 108
22217: PUSH
22218: LD_INT 112
22220: PUSH
22221: LD_INT 116
22223: PUSH
22224: LD_INT 117
22226: PUSH
22227: LD_INT 118
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: ST_TO_ADDR
22246: GO 24649
22248: LD_INT 8
22250: DOUBLE
22251: EQUAL
22252: IFTRUE 22256
22254: GO 22396
22256: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22257: LD_ADDR_VAR 0 2
22261: PUSH
22262: LD_INT 2
22264: PUSH
22265: LD_INT 4
22267: PUSH
22268: LD_INT 5
22270: PUSH
22271: LD_INT 6
22273: PUSH
22274: LD_INT 7
22276: PUSH
22277: LD_INT 8
22279: PUSH
22280: LD_INT 11
22282: PUSH
22283: LD_INT 12
22285: PUSH
22286: LD_INT 15
22288: PUSH
22289: LD_INT 16
22291: PUSH
22292: LD_INT 20
22294: PUSH
22295: LD_INT 21
22297: PUSH
22298: LD_INT 22
22300: PUSH
22301: LD_INT 23
22303: PUSH
22304: LD_INT 25
22306: PUSH
22307: LD_INT 26
22309: PUSH
22310: LD_INT 30
22312: PUSH
22313: LD_INT 31
22315: PUSH
22316: LD_INT 32
22318: PUSH
22319: LD_INT 36
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 101
22346: PUSH
22347: LD_INT 102
22349: PUSH
22350: LD_INT 103
22352: PUSH
22353: LD_INT 105
22355: PUSH
22356: LD_INT 106
22358: PUSH
22359: LD_INT 108
22361: PUSH
22362: LD_INT 109
22364: PUSH
22365: LD_INT 112
22367: PUSH
22368: LD_INT 116
22370: PUSH
22371: LD_INT 117
22373: PUSH
22374: LD_INT 118
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: ST_TO_ADDR
22394: GO 24649
22396: LD_INT 9
22398: DOUBLE
22399: EQUAL
22400: IFTRUE 22404
22402: GO 22552
22404: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22405: LD_ADDR_VAR 0 2
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: LD_INT 4
22415: PUSH
22416: LD_INT 5
22418: PUSH
22419: LD_INT 6
22421: PUSH
22422: LD_INT 7
22424: PUSH
22425: LD_INT 8
22427: PUSH
22428: LD_INT 11
22430: PUSH
22431: LD_INT 12
22433: PUSH
22434: LD_INT 15
22436: PUSH
22437: LD_INT 16
22439: PUSH
22440: LD_INT 20
22442: PUSH
22443: LD_INT 21
22445: PUSH
22446: LD_INT 22
22448: PUSH
22449: LD_INT 23
22451: PUSH
22452: LD_INT 25
22454: PUSH
22455: LD_INT 26
22457: PUSH
22458: LD_INT 28
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 31
22466: PUSH
22467: LD_INT 32
22469: PUSH
22470: LD_INT 36
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 101
22498: PUSH
22499: LD_INT 102
22501: PUSH
22502: LD_INT 103
22504: PUSH
22505: LD_INT 105
22507: PUSH
22508: LD_INT 106
22510: PUSH
22511: LD_INT 108
22513: PUSH
22514: LD_INT 109
22516: PUSH
22517: LD_INT 112
22519: PUSH
22520: LD_INT 114
22522: PUSH
22523: LD_INT 116
22525: PUSH
22526: LD_INT 117
22528: PUSH
22529: LD_INT 118
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: ST_TO_ADDR
22550: GO 24649
22552: LD_INT 10
22554: DOUBLE
22555: EQUAL
22556: IFTRUE 22560
22558: GO 22756
22560: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22561: LD_ADDR_VAR 0 2
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: LD_INT 4
22571: PUSH
22572: LD_INT 5
22574: PUSH
22575: LD_INT 6
22577: PUSH
22578: LD_INT 7
22580: PUSH
22581: LD_INT 8
22583: PUSH
22584: LD_INT 9
22586: PUSH
22587: LD_INT 10
22589: PUSH
22590: LD_INT 11
22592: PUSH
22593: LD_INT 12
22595: PUSH
22596: LD_INT 13
22598: PUSH
22599: LD_INT 14
22601: PUSH
22602: LD_INT 15
22604: PUSH
22605: LD_INT 16
22607: PUSH
22608: LD_INT 17
22610: PUSH
22611: LD_INT 18
22613: PUSH
22614: LD_INT 19
22616: PUSH
22617: LD_INT 20
22619: PUSH
22620: LD_INT 21
22622: PUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 23
22628: PUSH
22629: LD_INT 24
22631: PUSH
22632: LD_INT 25
22634: PUSH
22635: LD_INT 26
22637: PUSH
22638: LD_INT 28
22640: PUSH
22641: LD_INT 30
22643: PUSH
22644: LD_INT 31
22646: PUSH
22647: LD_INT 32
22649: PUSH
22650: LD_INT 36
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 101
22686: PUSH
22687: LD_INT 102
22689: PUSH
22690: LD_INT 103
22692: PUSH
22693: LD_INT 104
22695: PUSH
22696: LD_INT 105
22698: PUSH
22699: LD_INT 106
22701: PUSH
22702: LD_INT 107
22704: PUSH
22705: LD_INT 108
22707: PUSH
22708: LD_INT 109
22710: PUSH
22711: LD_INT 110
22713: PUSH
22714: LD_INT 111
22716: PUSH
22717: LD_INT 112
22719: PUSH
22720: LD_INT 114
22722: PUSH
22723: LD_INT 116
22725: PUSH
22726: LD_INT 117
22728: PUSH
22729: LD_INT 118
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: ST_TO_ADDR
22754: GO 24649
22756: LD_INT 11
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22968
22764: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22765: LD_ADDR_VAR 0 2
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: LD_INT 3
22775: PUSH
22776: LD_INT 4
22778: PUSH
22779: LD_INT 5
22781: PUSH
22782: LD_INT 6
22784: PUSH
22785: LD_INT 7
22787: PUSH
22788: LD_INT 8
22790: PUSH
22791: LD_INT 9
22793: PUSH
22794: LD_INT 10
22796: PUSH
22797: LD_INT 11
22799: PUSH
22800: LD_INT 12
22802: PUSH
22803: LD_INT 13
22805: PUSH
22806: LD_INT 14
22808: PUSH
22809: LD_INT 15
22811: PUSH
22812: LD_INT 16
22814: PUSH
22815: LD_INT 17
22817: PUSH
22818: LD_INT 18
22820: PUSH
22821: LD_INT 19
22823: PUSH
22824: LD_INT 20
22826: PUSH
22827: LD_INT 21
22829: PUSH
22830: LD_INT 22
22832: PUSH
22833: LD_INT 23
22835: PUSH
22836: LD_INT 24
22838: PUSH
22839: LD_INT 25
22841: PUSH
22842: LD_INT 26
22844: PUSH
22845: LD_INT 28
22847: PUSH
22848: LD_INT 30
22850: PUSH
22851: LD_INT 31
22853: PUSH
22854: LD_INT 32
22856: PUSH
22857: LD_INT 34
22859: PUSH
22860: LD_INT 36
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 101
22898: PUSH
22899: LD_INT 102
22901: PUSH
22902: LD_INT 103
22904: PUSH
22905: LD_INT 104
22907: PUSH
22908: LD_INT 105
22910: PUSH
22911: LD_INT 106
22913: PUSH
22914: LD_INT 107
22916: PUSH
22917: LD_INT 108
22919: PUSH
22920: LD_INT 109
22922: PUSH
22923: LD_INT 110
22925: PUSH
22926: LD_INT 111
22928: PUSH
22929: LD_INT 112
22931: PUSH
22932: LD_INT 114
22934: PUSH
22935: LD_INT 116
22937: PUSH
22938: LD_INT 117
22940: PUSH
22941: LD_INT 118
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: ST_TO_ADDR
22966: GO 24649
22968: LD_INT 12
22970: DOUBLE
22971: EQUAL
22972: IFTRUE 22976
22974: GO 23196
22976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22977: LD_ADDR_VAR 0 2
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: LD_INT 2
22987: PUSH
22988: LD_INT 3
22990: PUSH
22991: LD_INT 4
22993: PUSH
22994: LD_INT 5
22996: PUSH
22997: LD_INT 6
22999: PUSH
23000: LD_INT 7
23002: PUSH
23003: LD_INT 8
23005: PUSH
23006: LD_INT 9
23008: PUSH
23009: LD_INT 10
23011: PUSH
23012: LD_INT 11
23014: PUSH
23015: LD_INT 12
23017: PUSH
23018: LD_INT 13
23020: PUSH
23021: LD_INT 14
23023: PUSH
23024: LD_INT 15
23026: PUSH
23027: LD_INT 16
23029: PUSH
23030: LD_INT 17
23032: PUSH
23033: LD_INT 18
23035: PUSH
23036: LD_INT 19
23038: PUSH
23039: LD_INT 20
23041: PUSH
23042: LD_INT 21
23044: PUSH
23045: LD_INT 22
23047: PUSH
23048: LD_INT 23
23050: PUSH
23051: LD_INT 24
23053: PUSH
23054: LD_INT 25
23056: PUSH
23057: LD_INT 26
23059: PUSH
23060: LD_INT 27
23062: PUSH
23063: LD_INT 28
23065: PUSH
23066: LD_INT 30
23068: PUSH
23069: LD_INT 31
23071: PUSH
23072: LD_INT 32
23074: PUSH
23075: LD_INT 33
23077: PUSH
23078: LD_INT 34
23080: PUSH
23081: LD_INT 36
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 101
23122: PUSH
23123: LD_INT 102
23125: PUSH
23126: LD_INT 103
23128: PUSH
23129: LD_INT 104
23131: PUSH
23132: LD_INT 105
23134: PUSH
23135: LD_INT 106
23137: PUSH
23138: LD_INT 107
23140: PUSH
23141: LD_INT 108
23143: PUSH
23144: LD_INT 109
23146: PUSH
23147: LD_INT 110
23149: PUSH
23150: LD_INT 111
23152: PUSH
23153: LD_INT 112
23155: PUSH
23156: LD_INT 113
23158: PUSH
23159: LD_INT 114
23161: PUSH
23162: LD_INT 116
23164: PUSH
23165: LD_INT 117
23167: PUSH
23168: LD_INT 118
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: ST_TO_ADDR
23194: GO 24649
23196: LD_INT 13
23198: DOUBLE
23199: EQUAL
23200: IFTRUE 23204
23202: GO 23412
23204: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23205: LD_ADDR_VAR 0 2
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: LD_INT 4
23221: PUSH
23222: LD_INT 5
23224: PUSH
23225: LD_INT 8
23227: PUSH
23228: LD_INT 9
23230: PUSH
23231: LD_INT 10
23233: PUSH
23234: LD_INT 11
23236: PUSH
23237: LD_INT 12
23239: PUSH
23240: LD_INT 14
23242: PUSH
23243: LD_INT 15
23245: PUSH
23246: LD_INT 16
23248: PUSH
23249: LD_INT 17
23251: PUSH
23252: LD_INT 18
23254: PUSH
23255: LD_INT 19
23257: PUSH
23258: LD_INT 20
23260: PUSH
23261: LD_INT 21
23263: PUSH
23264: LD_INT 22
23266: PUSH
23267: LD_INT 23
23269: PUSH
23270: LD_INT 24
23272: PUSH
23273: LD_INT 25
23275: PUSH
23276: LD_INT 26
23278: PUSH
23279: LD_INT 27
23281: PUSH
23282: LD_INT 28
23284: PUSH
23285: LD_INT 30
23287: PUSH
23288: LD_INT 31
23290: PUSH
23291: LD_INT 32
23293: PUSH
23294: LD_INT 33
23296: PUSH
23297: LD_INT 34
23299: PUSH
23300: LD_INT 36
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 101
23338: PUSH
23339: LD_INT 102
23341: PUSH
23342: LD_INT 103
23344: PUSH
23345: LD_INT 104
23347: PUSH
23348: LD_INT 105
23350: PUSH
23351: LD_INT 106
23353: PUSH
23354: LD_INT 107
23356: PUSH
23357: LD_INT 108
23359: PUSH
23360: LD_INT 109
23362: PUSH
23363: LD_INT 110
23365: PUSH
23366: LD_INT 111
23368: PUSH
23369: LD_INT 112
23371: PUSH
23372: LD_INT 113
23374: PUSH
23375: LD_INT 114
23377: PUSH
23378: LD_INT 116
23380: PUSH
23381: LD_INT 117
23383: PUSH
23384: LD_INT 118
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: ST_TO_ADDR
23410: GO 24649
23412: LD_INT 14
23414: DOUBLE
23415: EQUAL
23416: IFTRUE 23420
23418: GO 23644
23420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23421: LD_ADDR_VAR 0 2
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: LD_INT 3
23434: PUSH
23435: LD_INT 4
23437: PUSH
23438: LD_INT 5
23440: PUSH
23441: LD_INT 6
23443: PUSH
23444: LD_INT 7
23446: PUSH
23447: LD_INT 8
23449: PUSH
23450: LD_INT 9
23452: PUSH
23453: LD_INT 10
23455: PUSH
23456: LD_INT 11
23458: PUSH
23459: LD_INT 12
23461: PUSH
23462: LD_INT 13
23464: PUSH
23465: LD_INT 14
23467: PUSH
23468: LD_INT 15
23470: PUSH
23471: LD_INT 16
23473: PUSH
23474: LD_INT 17
23476: PUSH
23477: LD_INT 18
23479: PUSH
23480: LD_INT 19
23482: PUSH
23483: LD_INT 20
23485: PUSH
23486: LD_INT 21
23488: PUSH
23489: LD_INT 22
23491: PUSH
23492: LD_INT 23
23494: PUSH
23495: LD_INT 24
23497: PUSH
23498: LD_INT 25
23500: PUSH
23501: LD_INT 26
23503: PUSH
23504: LD_INT 27
23506: PUSH
23507: LD_INT 28
23509: PUSH
23510: LD_INT 29
23512: PUSH
23513: LD_INT 30
23515: PUSH
23516: LD_INT 31
23518: PUSH
23519: LD_INT 32
23521: PUSH
23522: LD_INT 33
23524: PUSH
23525: LD_INT 34
23527: PUSH
23528: LD_INT 36
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 101
23570: PUSH
23571: LD_INT 102
23573: PUSH
23574: LD_INT 103
23576: PUSH
23577: LD_INT 104
23579: PUSH
23580: LD_INT 105
23582: PUSH
23583: LD_INT 106
23585: PUSH
23586: LD_INT 107
23588: PUSH
23589: LD_INT 108
23591: PUSH
23592: LD_INT 109
23594: PUSH
23595: LD_INT 110
23597: PUSH
23598: LD_INT 111
23600: PUSH
23601: LD_INT 112
23603: PUSH
23604: LD_INT 113
23606: PUSH
23607: LD_INT 114
23609: PUSH
23610: LD_INT 116
23612: PUSH
23613: LD_INT 117
23615: PUSH
23616: LD_INT 118
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: ST_TO_ADDR
23642: GO 24649
23644: LD_INT 15
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23876
23652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23653: LD_ADDR_VAR 0 2
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: LD_INT 3
23666: PUSH
23667: LD_INT 4
23669: PUSH
23670: LD_INT 5
23672: PUSH
23673: LD_INT 6
23675: PUSH
23676: LD_INT 7
23678: PUSH
23679: LD_INT 8
23681: PUSH
23682: LD_INT 9
23684: PUSH
23685: LD_INT 10
23687: PUSH
23688: LD_INT 11
23690: PUSH
23691: LD_INT 12
23693: PUSH
23694: LD_INT 13
23696: PUSH
23697: LD_INT 14
23699: PUSH
23700: LD_INT 15
23702: PUSH
23703: LD_INT 16
23705: PUSH
23706: LD_INT 17
23708: PUSH
23709: LD_INT 18
23711: PUSH
23712: LD_INT 19
23714: PUSH
23715: LD_INT 20
23717: PUSH
23718: LD_INT 21
23720: PUSH
23721: LD_INT 22
23723: PUSH
23724: LD_INT 23
23726: PUSH
23727: LD_INT 24
23729: PUSH
23730: LD_INT 25
23732: PUSH
23733: LD_INT 26
23735: PUSH
23736: LD_INT 27
23738: PUSH
23739: LD_INT 28
23741: PUSH
23742: LD_INT 29
23744: PUSH
23745: LD_INT 30
23747: PUSH
23748: LD_INT 31
23750: PUSH
23751: LD_INT 32
23753: PUSH
23754: LD_INT 33
23756: PUSH
23757: LD_INT 34
23759: PUSH
23760: LD_INT 36
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 101
23802: PUSH
23803: LD_INT 102
23805: PUSH
23806: LD_INT 103
23808: PUSH
23809: LD_INT 104
23811: PUSH
23812: LD_INT 105
23814: PUSH
23815: LD_INT 106
23817: PUSH
23818: LD_INT 107
23820: PUSH
23821: LD_INT 108
23823: PUSH
23824: LD_INT 109
23826: PUSH
23827: LD_INT 110
23829: PUSH
23830: LD_INT 111
23832: PUSH
23833: LD_INT 112
23835: PUSH
23836: LD_INT 113
23838: PUSH
23839: LD_INT 114
23841: PUSH
23842: LD_INT 116
23844: PUSH
23845: LD_INT 117
23847: PUSH
23848: LD_INT 118
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: ST_TO_ADDR
23874: GO 24649
23876: LD_INT 16
23878: DOUBLE
23879: EQUAL
23880: IFTRUE 23884
23882: GO 24020
23884: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23885: LD_ADDR_VAR 0 2
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: LD_INT 4
23895: PUSH
23896: LD_INT 5
23898: PUSH
23899: LD_INT 7
23901: PUSH
23902: LD_INT 11
23904: PUSH
23905: LD_INT 12
23907: PUSH
23908: LD_INT 15
23910: PUSH
23911: LD_INT 16
23913: PUSH
23914: LD_INT 20
23916: PUSH
23917: LD_INT 21
23919: PUSH
23920: LD_INT 22
23922: PUSH
23923: LD_INT 23
23925: PUSH
23926: LD_INT 25
23928: PUSH
23929: LD_INT 26
23931: PUSH
23932: LD_INT 30
23934: PUSH
23935: LD_INT 31
23937: PUSH
23938: LD_INT 32
23940: PUSH
23941: LD_INT 33
23943: PUSH
23944: LD_INT 34
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 101
23970: PUSH
23971: LD_INT 102
23973: PUSH
23974: LD_INT 103
23976: PUSH
23977: LD_INT 106
23979: PUSH
23980: LD_INT 108
23982: PUSH
23983: LD_INT 112
23985: PUSH
23986: LD_INT 113
23988: PUSH
23989: LD_INT 114
23991: PUSH
23992: LD_INT 116
23994: PUSH
23995: LD_INT 117
23997: PUSH
23998: LD_INT 118
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: ST_TO_ADDR
24018: GO 24649
24020: LD_INT 17
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24252
24028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24029: LD_ADDR_VAR 0 2
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 3
24042: PUSH
24043: LD_INT 4
24045: PUSH
24046: LD_INT 5
24048: PUSH
24049: LD_INT 6
24051: PUSH
24052: LD_INT 7
24054: PUSH
24055: LD_INT 8
24057: PUSH
24058: LD_INT 9
24060: PUSH
24061: LD_INT 10
24063: PUSH
24064: LD_INT 11
24066: PUSH
24067: LD_INT 12
24069: PUSH
24070: LD_INT 13
24072: PUSH
24073: LD_INT 14
24075: PUSH
24076: LD_INT 15
24078: PUSH
24079: LD_INT 16
24081: PUSH
24082: LD_INT 17
24084: PUSH
24085: LD_INT 18
24087: PUSH
24088: LD_INT 19
24090: PUSH
24091: LD_INT 20
24093: PUSH
24094: LD_INT 21
24096: PUSH
24097: LD_INT 22
24099: PUSH
24100: LD_INT 23
24102: PUSH
24103: LD_INT 24
24105: PUSH
24106: LD_INT 25
24108: PUSH
24109: LD_INT 26
24111: PUSH
24112: LD_INT 27
24114: PUSH
24115: LD_INT 28
24117: PUSH
24118: LD_INT 29
24120: PUSH
24121: LD_INT 30
24123: PUSH
24124: LD_INT 31
24126: PUSH
24127: LD_INT 32
24129: PUSH
24130: LD_INT 33
24132: PUSH
24133: LD_INT 34
24135: PUSH
24136: LD_INT 36
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 101
24178: PUSH
24179: LD_INT 102
24181: PUSH
24182: LD_INT 103
24184: PUSH
24185: LD_INT 104
24187: PUSH
24188: LD_INT 105
24190: PUSH
24191: LD_INT 106
24193: PUSH
24194: LD_INT 107
24196: PUSH
24197: LD_INT 108
24199: PUSH
24200: LD_INT 109
24202: PUSH
24203: LD_INT 110
24205: PUSH
24206: LD_INT 111
24208: PUSH
24209: LD_INT 112
24211: PUSH
24212: LD_INT 113
24214: PUSH
24215: LD_INT 114
24217: PUSH
24218: LD_INT 116
24220: PUSH
24221: LD_INT 117
24223: PUSH
24224: LD_INT 118
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: ST_TO_ADDR
24250: GO 24649
24252: LD_INT 18
24254: DOUBLE
24255: EQUAL
24256: IFTRUE 24260
24258: GO 24408
24260: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24261: LD_ADDR_VAR 0 2
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: LD_INT 4
24271: PUSH
24272: LD_INT 5
24274: PUSH
24275: LD_INT 7
24277: PUSH
24278: LD_INT 11
24280: PUSH
24281: LD_INT 12
24283: PUSH
24284: LD_INT 15
24286: PUSH
24287: LD_INT 16
24289: PUSH
24290: LD_INT 20
24292: PUSH
24293: LD_INT 21
24295: PUSH
24296: LD_INT 22
24298: PUSH
24299: LD_INT 23
24301: PUSH
24302: LD_INT 25
24304: PUSH
24305: LD_INT 26
24307: PUSH
24308: LD_INT 30
24310: PUSH
24311: LD_INT 31
24313: PUSH
24314: LD_INT 32
24316: PUSH
24317: LD_INT 33
24319: PUSH
24320: LD_INT 34
24322: PUSH
24323: LD_INT 35
24325: PUSH
24326: LD_INT 36
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 101
24354: PUSH
24355: LD_INT 102
24357: PUSH
24358: LD_INT 103
24360: PUSH
24361: LD_INT 106
24363: PUSH
24364: LD_INT 108
24366: PUSH
24367: LD_INT 112
24369: PUSH
24370: LD_INT 113
24372: PUSH
24373: LD_INT 114
24375: PUSH
24376: LD_INT 115
24378: PUSH
24379: LD_INT 116
24381: PUSH
24382: LD_INT 117
24384: PUSH
24385: LD_INT 118
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: ST_TO_ADDR
24406: GO 24649
24408: LD_INT 19
24410: DOUBLE
24411: EQUAL
24412: IFTRUE 24416
24414: GO 24648
24416: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24417: LD_ADDR_VAR 0 2
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 3
24430: PUSH
24431: LD_INT 4
24433: PUSH
24434: LD_INT 5
24436: PUSH
24437: LD_INT 6
24439: PUSH
24440: LD_INT 7
24442: PUSH
24443: LD_INT 8
24445: PUSH
24446: LD_INT 9
24448: PUSH
24449: LD_INT 10
24451: PUSH
24452: LD_INT 11
24454: PUSH
24455: LD_INT 12
24457: PUSH
24458: LD_INT 13
24460: PUSH
24461: LD_INT 14
24463: PUSH
24464: LD_INT 15
24466: PUSH
24467: LD_INT 16
24469: PUSH
24470: LD_INT 17
24472: PUSH
24473: LD_INT 18
24475: PUSH
24476: LD_INT 19
24478: PUSH
24479: LD_INT 20
24481: PUSH
24482: LD_INT 21
24484: PUSH
24485: LD_INT 22
24487: PUSH
24488: LD_INT 23
24490: PUSH
24491: LD_INT 24
24493: PUSH
24494: LD_INT 25
24496: PUSH
24497: LD_INT 26
24499: PUSH
24500: LD_INT 27
24502: PUSH
24503: LD_INT 28
24505: PUSH
24506: LD_INT 29
24508: PUSH
24509: LD_INT 30
24511: PUSH
24512: LD_INT 31
24514: PUSH
24515: LD_INT 32
24517: PUSH
24518: LD_INT 33
24520: PUSH
24521: LD_INT 34
24523: PUSH
24524: LD_INT 35
24526: PUSH
24527: LD_INT 36
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 101
24570: PUSH
24571: LD_INT 102
24573: PUSH
24574: LD_INT 103
24576: PUSH
24577: LD_INT 104
24579: PUSH
24580: LD_INT 105
24582: PUSH
24583: LD_INT 106
24585: PUSH
24586: LD_INT 107
24588: PUSH
24589: LD_INT 108
24591: PUSH
24592: LD_INT 109
24594: PUSH
24595: LD_INT 110
24597: PUSH
24598: LD_INT 111
24600: PUSH
24601: LD_INT 112
24603: PUSH
24604: LD_INT 113
24606: PUSH
24607: LD_INT 114
24609: PUSH
24610: LD_INT 115
24612: PUSH
24613: LD_INT 116
24615: PUSH
24616: LD_INT 117
24618: PUSH
24619: LD_INT 118
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: ST_TO_ADDR
24646: GO 24649
24648: POP
// end else
24649: GO 24880
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24651: LD_ADDR_VAR 0 2
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 3
24664: PUSH
24665: LD_INT 4
24667: PUSH
24668: LD_INT 5
24670: PUSH
24671: LD_INT 6
24673: PUSH
24674: LD_INT 7
24676: PUSH
24677: LD_INT 8
24679: PUSH
24680: LD_INT 9
24682: PUSH
24683: LD_INT 10
24685: PUSH
24686: LD_INT 11
24688: PUSH
24689: LD_INT 12
24691: PUSH
24692: LD_INT 13
24694: PUSH
24695: LD_INT 14
24697: PUSH
24698: LD_INT 15
24700: PUSH
24701: LD_INT 16
24703: PUSH
24704: LD_INT 17
24706: PUSH
24707: LD_INT 18
24709: PUSH
24710: LD_INT 19
24712: PUSH
24713: LD_INT 20
24715: PUSH
24716: LD_INT 21
24718: PUSH
24719: LD_INT 22
24721: PUSH
24722: LD_INT 23
24724: PUSH
24725: LD_INT 24
24727: PUSH
24728: LD_INT 25
24730: PUSH
24731: LD_INT 26
24733: PUSH
24734: LD_INT 27
24736: PUSH
24737: LD_INT 28
24739: PUSH
24740: LD_INT 29
24742: PUSH
24743: LD_INT 30
24745: PUSH
24746: LD_INT 31
24748: PUSH
24749: LD_INT 32
24751: PUSH
24752: LD_INT 33
24754: PUSH
24755: LD_INT 34
24757: PUSH
24758: LD_INT 35
24760: PUSH
24761: LD_INT 36
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 101
24804: PUSH
24805: LD_INT 102
24807: PUSH
24808: LD_INT 103
24810: PUSH
24811: LD_INT 104
24813: PUSH
24814: LD_INT 105
24816: PUSH
24817: LD_INT 106
24819: PUSH
24820: LD_INT 107
24822: PUSH
24823: LD_INT 108
24825: PUSH
24826: LD_INT 109
24828: PUSH
24829: LD_INT 110
24831: PUSH
24832: LD_INT 111
24834: PUSH
24835: LD_INT 112
24837: PUSH
24838: LD_INT 113
24840: PUSH
24841: LD_INT 114
24843: PUSH
24844: LD_INT 115
24846: PUSH
24847: LD_INT 116
24849: PUSH
24850: LD_INT 117
24852: PUSH
24853: LD_INT 118
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: ST_TO_ADDR
// if result then
24880: LD_VAR 0 2
24884: IFFALSE 25670
// begin normal :=  ;
24886: LD_ADDR_VAR 0 5
24890: PUSH
24891: LD_STRING 
24893: ST_TO_ADDR
// hardcore :=  ;
24894: LD_ADDR_VAR 0 6
24898: PUSH
24899: LD_STRING 
24901: ST_TO_ADDR
// active :=  ;
24902: LD_ADDR_VAR 0 7
24906: PUSH
24907: LD_STRING 
24909: ST_TO_ADDR
// for i = 1 to normalCounter do
24910: LD_ADDR_VAR 0 8
24914: PUSH
24915: DOUBLE
24916: LD_INT 1
24918: DEC
24919: ST_TO_ADDR
24920: LD_EXP 69
24924: PUSH
24925: FOR_TO
24926: IFFALSE 25027
// begin tmp := 0 ;
24928: LD_ADDR_VAR 0 3
24932: PUSH
24933: LD_STRING 0
24935: ST_TO_ADDR
// if result [ 1 ] then
24936: LD_VAR 0 2
24940: PUSH
24941: LD_INT 1
24943: ARRAY
24944: IFFALSE 25009
// if result [ 1 ] [ 1 ] = i then
24946: LD_VAR 0 2
24950: PUSH
24951: LD_INT 1
24953: ARRAY
24954: PUSH
24955: LD_INT 1
24957: ARRAY
24958: PUSH
24959: LD_VAR 0 8
24963: EQUAL
24964: IFFALSE 25009
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24966: LD_ADDR_VAR 0 2
24970: PUSH
24971: LD_VAR 0 2
24975: PPUSH
24976: LD_INT 1
24978: PPUSH
24979: LD_VAR 0 2
24983: PUSH
24984: LD_INT 1
24986: ARRAY
24987: PPUSH
24988: LD_INT 1
24990: PPUSH
24991: CALL_OW 3
24995: PPUSH
24996: CALL_OW 1
25000: ST_TO_ADDR
// tmp := 1 ;
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_STRING 1
25008: ST_TO_ADDR
// end ; normal := normal & tmp ;
25009: LD_ADDR_VAR 0 5
25013: PUSH
25014: LD_VAR 0 5
25018: PUSH
25019: LD_VAR 0 3
25023: STR
25024: ST_TO_ADDR
// end ;
25025: GO 24925
25027: POP
25028: POP
// for i = 1 to hardcoreCounter do
25029: LD_ADDR_VAR 0 8
25033: PUSH
25034: DOUBLE
25035: LD_INT 1
25037: DEC
25038: ST_TO_ADDR
25039: LD_EXP 70
25043: PUSH
25044: FOR_TO
25045: IFFALSE 25150
// begin tmp := 0 ;
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_STRING 0
25054: ST_TO_ADDR
// if result [ 2 ] then
25055: LD_VAR 0 2
25059: PUSH
25060: LD_INT 2
25062: ARRAY
25063: IFFALSE 25132
// if result [ 2 ] [ 1 ] = 100 + i then
25065: LD_VAR 0 2
25069: PUSH
25070: LD_INT 2
25072: ARRAY
25073: PUSH
25074: LD_INT 1
25076: ARRAY
25077: PUSH
25078: LD_INT 100
25080: PUSH
25081: LD_VAR 0 8
25085: PLUS
25086: EQUAL
25087: IFFALSE 25132
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25089: LD_ADDR_VAR 0 2
25093: PUSH
25094: LD_VAR 0 2
25098: PPUSH
25099: LD_INT 2
25101: PPUSH
25102: LD_VAR 0 2
25106: PUSH
25107: LD_INT 2
25109: ARRAY
25110: PPUSH
25111: LD_INT 1
25113: PPUSH
25114: CALL_OW 3
25118: PPUSH
25119: CALL_OW 1
25123: ST_TO_ADDR
// tmp := 1 ;
25124: LD_ADDR_VAR 0 3
25128: PUSH
25129: LD_STRING 1
25131: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25132: LD_ADDR_VAR 0 6
25136: PUSH
25137: LD_VAR 0 6
25141: PUSH
25142: LD_VAR 0 3
25146: STR
25147: ST_TO_ADDR
// end ;
25148: GO 25044
25150: POP
25151: POP
// if isGameLoad then
25152: LD_VAR 0 1
25156: IFFALSE 25631
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25158: LD_ADDR_VAR 0 4
25162: PUSH
25163: LD_EXP 73
25167: PUSH
25168: LD_EXP 72
25172: PUSH
25173: LD_EXP 74
25177: PUSH
25178: LD_EXP 71
25182: PUSH
25183: LD_EXP 75
25187: PUSH
25188: LD_EXP 76
25192: PUSH
25193: LD_EXP 77
25197: PUSH
25198: LD_EXP 78
25202: PUSH
25203: LD_EXP 79
25207: PUSH
25208: LD_EXP 80
25212: PUSH
25213: LD_EXP 81
25217: PUSH
25218: LD_EXP 82
25222: PUSH
25223: LD_EXP 83
25227: PUSH
25228: LD_EXP 84
25232: PUSH
25233: LD_EXP 92
25237: PUSH
25238: LD_EXP 93
25242: PUSH
25243: LD_EXP 94
25247: PUSH
25248: LD_EXP 95
25252: PUSH
25253: LD_EXP 97
25257: PUSH
25258: LD_EXP 98
25262: PUSH
25263: LD_EXP 99
25267: PUSH
25268: LD_EXP 102
25272: PUSH
25273: LD_EXP 104
25277: PUSH
25278: LD_EXP 105
25282: PUSH
25283: LD_EXP 106
25287: PUSH
25288: LD_EXP 108
25292: PUSH
25293: LD_EXP 109
25297: PUSH
25298: LD_EXP 112
25302: PUSH
25303: LD_EXP 113
25307: PUSH
25308: LD_EXP 114
25312: PUSH
25313: LD_EXP 115
25317: PUSH
25318: LD_EXP 116
25322: PUSH
25323: LD_EXP 117
25327: PUSH
25328: LD_EXP 118
25332: PUSH
25333: LD_EXP 119
25337: PUSH
25338: LD_EXP 120
25342: PUSH
25343: LD_EXP 85
25347: PUSH
25348: LD_EXP 86
25352: PUSH
25353: LD_EXP 89
25357: PUSH
25358: LD_EXP 90
25362: PUSH
25363: LD_EXP 91
25367: PUSH
25368: LD_EXP 87
25372: PUSH
25373: LD_EXP 88
25377: PUSH
25378: LD_EXP 96
25382: PUSH
25383: LD_EXP 100
25387: PUSH
25388: LD_EXP 101
25392: PUSH
25393: LD_EXP 103
25397: PUSH
25398: LD_EXP 107
25402: PUSH
25403: LD_EXP 110
25407: PUSH
25408: LD_EXP 111
25412: PUSH
25413: LD_EXP 121
25417: PUSH
25418: LD_EXP 122
25422: PUSH
25423: LD_EXP 123
25427: PUSH
25428: LD_EXP 124
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: ST_TO_ADDR
// tmp :=  ;
25489: LD_ADDR_VAR 0 3
25493: PUSH
25494: LD_STRING 
25496: ST_TO_ADDR
// for i = 1 to normalCounter do
25497: LD_ADDR_VAR 0 8
25501: PUSH
25502: DOUBLE
25503: LD_INT 1
25505: DEC
25506: ST_TO_ADDR
25507: LD_EXP 69
25511: PUSH
25512: FOR_TO
25513: IFFALSE 25549
// begin if flags [ i ] then
25515: LD_VAR 0 4
25519: PUSH
25520: LD_VAR 0 8
25524: ARRAY
25525: IFFALSE 25547
// tmp := tmp & i & ; ;
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_VAR 0 3
25536: PUSH
25537: LD_VAR 0 8
25541: STR
25542: PUSH
25543: LD_STRING ;
25545: STR
25546: ST_TO_ADDR
// end ;
25547: GO 25512
25549: POP
25550: POP
// for i = 1 to hardcoreCounter do
25551: LD_ADDR_VAR 0 8
25555: PUSH
25556: DOUBLE
25557: LD_INT 1
25559: DEC
25560: ST_TO_ADDR
25561: LD_EXP 70
25565: PUSH
25566: FOR_TO
25567: IFFALSE 25613
// begin if flags [ normalCounter + i ] then
25569: LD_VAR 0 4
25573: PUSH
25574: LD_EXP 69
25578: PUSH
25579: LD_VAR 0 8
25583: PLUS
25584: ARRAY
25585: IFFALSE 25611
// tmp := tmp & ( 100 + i ) & ; ;
25587: LD_ADDR_VAR 0 3
25591: PUSH
25592: LD_VAR 0 3
25596: PUSH
25597: LD_INT 100
25599: PUSH
25600: LD_VAR 0 8
25604: PLUS
25605: STR
25606: PUSH
25607: LD_STRING ;
25609: STR
25610: ST_TO_ADDR
// end ;
25611: GO 25566
25613: POP
25614: POP
// if tmp then
25615: LD_VAR 0 3
25619: IFFALSE 25631
// active := tmp ;
25621: LD_ADDR_VAR 0 7
25625: PUSH
25626: LD_VAR 0 3
25630: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25631: LD_STRING getStreamItemsFromMission("
25633: PUSH
25634: LD_VAR 0 5
25638: STR
25639: PUSH
25640: LD_STRING ","
25642: STR
25643: PUSH
25644: LD_VAR 0 6
25648: STR
25649: PUSH
25650: LD_STRING ","
25652: STR
25653: PUSH
25654: LD_VAR 0 7
25658: STR
25659: PUSH
25660: LD_STRING ")
25662: STR
25663: PPUSH
25664: CALL_OW 559
// end else
25668: GO 25677
// ToLua ( getStreamItemsFromMission("","","") ) ;
25670: LD_STRING getStreamItemsFromMission("","","")
25672: PPUSH
25673: CALL_OW 559
// end ;
25677: LD_VAR 0 2
25681: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25682: LD_EXP 68
25686: PUSH
25687: LD_EXP 73
25691: AND
25692: IFFALSE 25816
25694: GO 25696
25696: DISABLE
25697: LD_INT 0
25699: PPUSH
25700: PPUSH
// begin enable ;
25701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25702: LD_ADDR_VAR 0 2
25706: PUSH
25707: LD_INT 22
25709: PUSH
25710: LD_OWVAR 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 2
25721: PUSH
25722: LD_INT 34
25724: PUSH
25725: LD_INT 7
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 34
25734: PUSH
25735: LD_INT 45
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 34
25744: PUSH
25745: LD_INT 28
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 34
25754: PUSH
25755: LD_INT 47
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PPUSH
25773: CALL_OW 69
25777: ST_TO_ADDR
// if not tmp then
25778: LD_VAR 0 2
25782: NOT
25783: IFFALSE 25787
// exit ;
25785: GO 25816
// for i in tmp do
25787: LD_ADDR_VAR 0 1
25791: PUSH
25792: LD_VAR 0 2
25796: PUSH
25797: FOR_IN
25798: IFFALSE 25814
// begin SetLives ( i , 0 ) ;
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_INT 0
25807: PPUSH
25808: CALL_OW 234
// end ;
25812: GO 25797
25814: POP
25815: POP
// end ;
25816: PPOPN 2
25818: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25819: LD_EXP 68
25823: PUSH
25824: LD_EXP 74
25828: AND
25829: IFFALSE 25913
25831: GO 25833
25833: DISABLE
25834: LD_INT 0
25836: PPUSH
25837: PPUSH
// begin enable ;
25838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25839: LD_ADDR_VAR 0 2
25843: PUSH
25844: LD_INT 22
25846: PUSH
25847: LD_OWVAR 2
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 32
25858: PUSH
25859: LD_INT 3
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PPUSH
25870: CALL_OW 69
25874: ST_TO_ADDR
// if not tmp then
25875: LD_VAR 0 2
25879: NOT
25880: IFFALSE 25884
// exit ;
25882: GO 25913
// for i in tmp do
25884: LD_ADDR_VAR 0 1
25888: PUSH
25889: LD_VAR 0 2
25893: PUSH
25894: FOR_IN
25895: IFFALSE 25911
// begin SetLives ( i , 0 ) ;
25897: LD_VAR 0 1
25901: PPUSH
25902: LD_INT 0
25904: PPUSH
25905: CALL_OW 234
// end ;
25909: GO 25894
25911: POP
25912: POP
// end ;
25913: PPOPN 2
25915: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25916: LD_EXP 68
25920: PUSH
25921: LD_EXP 71
25925: AND
25926: IFFALSE 26019
25928: GO 25930
25930: DISABLE
25931: LD_INT 0
25933: PPUSH
// begin enable ;
25934: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25935: LD_ADDR_VAR 0 1
25939: PUSH
25940: LD_INT 22
25942: PUSH
25943: LD_OWVAR 2
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: LD_INT 25
25957: PUSH
25958: LD_INT 5
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 25
25967: PUSH
25968: LD_INT 9
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 25
25977: PUSH
25978: LD_INT 8
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PPUSH
25995: CALL_OW 69
25999: PUSH
26000: FOR_IN
26001: IFFALSE 26017
// begin SetClass ( i , 1 ) ;
26003: LD_VAR 0 1
26007: PPUSH
26008: LD_INT 1
26010: PPUSH
26011: CALL_OW 336
// end ;
26015: GO 26000
26017: POP
26018: POP
// end ;
26019: PPOPN 1
26021: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26022: LD_EXP 68
26026: PUSH
26027: LD_EXP 72
26031: AND
26032: PUSH
26033: LD_OWVAR 65
26037: PUSH
26038: LD_INT 7
26040: LESS
26041: AND
26042: IFFALSE 26056
26044: GO 26046
26046: DISABLE
// begin enable ;
26047: ENABLE
// game_speed := 7 ;
26048: LD_ADDR_OWVAR 65
26052: PUSH
26053: LD_INT 7
26055: ST_TO_ADDR
// end ;
26056: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26057: LD_EXP 68
26061: PUSH
26062: LD_EXP 75
26066: AND
26067: IFFALSE 26269
26069: GO 26071
26071: DISABLE
26072: LD_INT 0
26074: PPUSH
26075: PPUSH
26076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26077: LD_ADDR_VAR 0 3
26081: PUSH
26082: LD_INT 81
26084: PUSH
26085: LD_OWVAR 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 21
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PPUSH
26108: CALL_OW 69
26112: ST_TO_ADDR
// if not tmp then
26113: LD_VAR 0 3
26117: NOT
26118: IFFALSE 26122
// exit ;
26120: GO 26269
// if tmp > 5 then
26122: LD_VAR 0 3
26126: PUSH
26127: LD_INT 5
26129: GREATER
26130: IFFALSE 26142
// k := 5 else
26132: LD_ADDR_VAR 0 2
26136: PUSH
26137: LD_INT 5
26139: ST_TO_ADDR
26140: GO 26152
// k := tmp ;
26142: LD_ADDR_VAR 0 2
26146: PUSH
26147: LD_VAR 0 3
26151: ST_TO_ADDR
// for i := 1 to k do
26152: LD_ADDR_VAR 0 1
26156: PUSH
26157: DOUBLE
26158: LD_INT 1
26160: DEC
26161: ST_TO_ADDR
26162: LD_VAR 0 2
26166: PUSH
26167: FOR_TO
26168: IFFALSE 26267
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26170: LD_VAR 0 3
26174: PUSH
26175: LD_VAR 0 1
26179: ARRAY
26180: PPUSH
26181: LD_VAR 0 1
26185: PUSH
26186: LD_INT 4
26188: MOD
26189: PUSH
26190: LD_INT 1
26192: PLUS
26193: PPUSH
26194: CALL_OW 259
26198: PUSH
26199: LD_INT 10
26201: LESS
26202: IFFALSE 26265
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26204: LD_VAR 0 3
26208: PUSH
26209: LD_VAR 0 1
26213: ARRAY
26214: PPUSH
26215: LD_VAR 0 1
26219: PUSH
26220: LD_INT 4
26222: MOD
26223: PUSH
26224: LD_INT 1
26226: PLUS
26227: PPUSH
26228: LD_VAR 0 3
26232: PUSH
26233: LD_VAR 0 1
26237: ARRAY
26238: PPUSH
26239: LD_VAR 0 1
26243: PUSH
26244: LD_INT 4
26246: MOD
26247: PUSH
26248: LD_INT 1
26250: PLUS
26251: PPUSH
26252: CALL_OW 259
26256: PUSH
26257: LD_INT 1
26259: PLUS
26260: PPUSH
26261: CALL_OW 237
26265: GO 26167
26267: POP
26268: POP
// end ;
26269: PPOPN 3
26271: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26272: LD_EXP 68
26276: PUSH
26277: LD_EXP 76
26281: AND
26282: IFFALSE 26302
26284: GO 26286
26286: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26287: LD_INT 4
26289: PPUSH
26290: LD_OWVAR 2
26294: PPUSH
26295: LD_INT 0
26297: PPUSH
26298: CALL_OW 324
26302: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26303: LD_EXP 68
26307: PUSH
26308: LD_EXP 105
26312: AND
26313: IFFALSE 26333
26315: GO 26317
26317: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26318: LD_INT 19
26320: PPUSH
26321: LD_OWVAR 2
26325: PPUSH
26326: LD_INT 0
26328: PPUSH
26329: CALL_OW 324
26333: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26334: LD_EXP 68
26338: PUSH
26339: LD_EXP 77
26343: AND
26344: IFFALSE 26446
26346: GO 26348
26348: DISABLE
26349: LD_INT 0
26351: PPUSH
26352: PPUSH
// begin enable ;
26353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26354: LD_ADDR_VAR 0 2
26358: PUSH
26359: LD_INT 22
26361: PUSH
26362: LD_OWVAR 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 34
26376: PUSH
26377: LD_INT 11
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 34
26386: PUSH
26387: LD_INT 30
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PPUSH
26403: CALL_OW 69
26407: ST_TO_ADDR
// if not tmp then
26408: LD_VAR 0 2
26412: NOT
26413: IFFALSE 26417
// exit ;
26415: GO 26446
// for i in tmp do
26417: LD_ADDR_VAR 0 1
26421: PUSH
26422: LD_VAR 0 2
26426: PUSH
26427: FOR_IN
26428: IFFALSE 26444
// begin SetLives ( i , 0 ) ;
26430: LD_VAR 0 1
26434: PPUSH
26435: LD_INT 0
26437: PPUSH
26438: CALL_OW 234
// end ;
26442: GO 26427
26444: POP
26445: POP
// end ;
26446: PPOPN 2
26448: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26449: LD_EXP 68
26453: PUSH
26454: LD_EXP 78
26458: AND
26459: IFFALSE 26479
26461: GO 26463
26463: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26464: LD_INT 32
26466: PPUSH
26467: LD_OWVAR 2
26471: PPUSH
26472: LD_INT 0
26474: PPUSH
26475: CALL_OW 324
26479: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26480: LD_EXP 68
26484: PUSH
26485: LD_EXP 79
26489: AND
26490: IFFALSE 26671
26492: GO 26494
26494: DISABLE
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
26499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26500: LD_ADDR_VAR 0 2
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_OWVAR 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 33
26519: PUSH
26520: LD_INT 3
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 69
26535: ST_TO_ADDR
// if not tmp then
26536: LD_VAR 0 2
26540: NOT
26541: IFFALSE 26545
// exit ;
26543: GO 26671
// side := 0 ;
26545: LD_ADDR_VAR 0 3
26549: PUSH
26550: LD_INT 0
26552: ST_TO_ADDR
// for i := 1 to 8 do
26553: LD_ADDR_VAR 0 1
26557: PUSH
26558: DOUBLE
26559: LD_INT 1
26561: DEC
26562: ST_TO_ADDR
26563: LD_INT 8
26565: PUSH
26566: FOR_TO
26567: IFFALSE 26615
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26569: LD_OWVAR 2
26573: PUSH
26574: LD_VAR 0 1
26578: NONEQUAL
26579: PUSH
26580: LD_OWVAR 2
26584: PPUSH
26585: LD_VAR 0 1
26589: PPUSH
26590: CALL_OW 81
26594: PUSH
26595: LD_INT 2
26597: EQUAL
26598: AND
26599: IFFALSE 26613
// begin side := i ;
26601: LD_ADDR_VAR 0 3
26605: PUSH
26606: LD_VAR 0 1
26610: ST_TO_ADDR
// break ;
26611: GO 26615
// end ;
26613: GO 26566
26615: POP
26616: POP
// if not side then
26617: LD_VAR 0 3
26621: NOT
26622: IFFALSE 26626
// exit ;
26624: GO 26671
// for i := 1 to tmp do
26626: LD_ADDR_VAR 0 1
26630: PUSH
26631: DOUBLE
26632: LD_INT 1
26634: DEC
26635: ST_TO_ADDR
26636: LD_VAR 0 2
26640: PUSH
26641: FOR_TO
26642: IFFALSE 26669
// if Prob ( 60 ) then
26644: LD_INT 60
26646: PPUSH
26647: CALL_OW 13
26651: IFFALSE 26667
// SetSide ( i , side ) ;
26653: LD_VAR 0 1
26657: PPUSH
26658: LD_VAR 0 3
26662: PPUSH
26663: CALL_OW 235
26667: GO 26641
26669: POP
26670: POP
// end ;
26671: PPOPN 3
26673: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26674: LD_EXP 68
26678: PUSH
26679: LD_EXP 81
26683: AND
26684: IFFALSE 26803
26686: GO 26688
26688: DISABLE
26689: LD_INT 0
26691: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26692: LD_ADDR_VAR 0 1
26696: PUSH
26697: LD_INT 22
26699: PUSH
26700: LD_OWVAR 2
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 21
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: LD_INT 23
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: PPUSH
26741: CALL_OW 69
26745: PUSH
26746: FOR_IN
26747: IFFALSE 26801
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 257
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 2
26764: PUSH
26765: LD_INT 3
26767: PUSH
26768: LD_INT 4
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: IN
26777: IFFALSE 26799
// SetClass ( un , rand ( 1 , 4 ) ) ;
26779: LD_VAR 0 1
26783: PPUSH
26784: LD_INT 1
26786: PPUSH
26787: LD_INT 4
26789: PPUSH
26790: CALL_OW 12
26794: PPUSH
26795: CALL_OW 336
26799: GO 26746
26801: POP
26802: POP
// end ;
26803: PPOPN 1
26805: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26806: LD_EXP 68
26810: PUSH
26811: LD_EXP 80
26815: AND
26816: IFFALSE 26895
26818: GO 26820
26820: DISABLE
26821: LD_INT 0
26823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26824: LD_ADDR_VAR 0 1
26828: PUSH
26829: LD_INT 22
26831: PUSH
26832: LD_OWVAR 2
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 21
26843: PUSH
26844: LD_INT 3
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 69
26859: ST_TO_ADDR
// if not tmp then
26860: LD_VAR 0 1
26864: NOT
26865: IFFALSE 26869
// exit ;
26867: GO 26895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26869: LD_VAR 0 1
26873: PUSH
26874: LD_INT 1
26876: PPUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 12
26886: ARRAY
26887: PPUSH
26888: LD_INT 100
26890: PPUSH
26891: CALL_OW 234
// end ;
26895: PPOPN 1
26897: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26898: LD_EXP 68
26902: PUSH
26903: LD_EXP 82
26907: AND
26908: IFFALSE 27006
26910: GO 26912
26912: DISABLE
26913: LD_INT 0
26915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26916: LD_ADDR_VAR 0 1
26920: PUSH
26921: LD_INT 22
26923: PUSH
26924: LD_OWVAR 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 21
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PPUSH
26947: CALL_OW 69
26951: ST_TO_ADDR
// if not tmp then
26952: LD_VAR 0 1
26956: NOT
26957: IFFALSE 26961
// exit ;
26959: GO 27006
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26961: LD_VAR 0 1
26965: PUSH
26966: LD_INT 1
26968: PPUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 12
26978: ARRAY
26979: PPUSH
26980: LD_INT 1
26982: PPUSH
26983: LD_INT 4
26985: PPUSH
26986: CALL_OW 12
26990: PPUSH
26991: LD_INT 3000
26993: PPUSH
26994: LD_INT 9000
26996: PPUSH
26997: CALL_OW 12
27001: PPUSH
27002: CALL_OW 492
// end ;
27006: PPOPN 1
27008: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27009: LD_EXP 68
27013: PUSH
27014: LD_EXP 83
27018: AND
27019: IFFALSE 27039
27021: GO 27023
27023: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27024: LD_INT 1
27026: PPUSH
27027: LD_OWVAR 2
27031: PPUSH
27032: LD_INT 0
27034: PPUSH
27035: CALL_OW 324
27039: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27040: LD_EXP 68
27044: PUSH
27045: LD_EXP 84
27049: AND
27050: IFFALSE 27133
27052: GO 27054
27054: DISABLE
27055: LD_INT 0
27057: PPUSH
27058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27059: LD_ADDR_VAR 0 2
27063: PUSH
27064: LD_INT 22
27066: PUSH
27067: LD_OWVAR 2
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 21
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 69
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 2
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 27133
// for i in tmp do
27104: LD_ADDR_VAR 0 1
27108: PUSH
27109: LD_VAR 0 2
27113: PUSH
27114: FOR_IN
27115: IFFALSE 27131
// SetBLevel ( i , 10 ) ;
27117: LD_VAR 0 1
27121: PPUSH
27122: LD_INT 10
27124: PPUSH
27125: CALL_OW 241
27129: GO 27114
27131: POP
27132: POP
// end ;
27133: PPOPN 2
27135: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27136: LD_EXP 68
27140: PUSH
27141: LD_EXP 85
27145: AND
27146: IFFALSE 27257
27148: GO 27150
27150: DISABLE
27151: LD_INT 0
27153: PPUSH
27154: PPUSH
27155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27156: LD_ADDR_VAR 0 3
27160: PUSH
27161: LD_INT 22
27163: PUSH
27164: LD_OWVAR 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 25
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PPUSH
27187: CALL_OW 69
27191: ST_TO_ADDR
// if not tmp then
27192: LD_VAR 0 3
27196: NOT
27197: IFFALSE 27201
// exit ;
27199: GO 27257
// un := tmp [ rand ( 1 , tmp ) ] ;
27201: LD_ADDR_VAR 0 2
27205: PUSH
27206: LD_VAR 0 3
27210: PUSH
27211: LD_INT 1
27213: PPUSH
27214: LD_VAR 0 3
27218: PPUSH
27219: CALL_OW 12
27223: ARRAY
27224: ST_TO_ADDR
// if Crawls ( un ) then
27225: LD_VAR 0 2
27229: PPUSH
27230: CALL_OW 318
27234: IFFALSE 27245
// ComWalk ( un ) ;
27236: LD_VAR 0 2
27240: PPUSH
27241: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27245: LD_VAR 0 2
27249: PPUSH
27250: LD_INT 5
27252: PPUSH
27253: CALL_OW 336
// end ;
27257: PPOPN 3
27259: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27260: LD_EXP 68
27264: PUSH
27265: LD_EXP 86
27269: AND
27270: PUSH
27271: LD_OWVAR 67
27275: PUSH
27276: LD_INT 4
27278: LESS
27279: AND
27280: IFFALSE 27299
27282: GO 27284
27284: DISABLE
// begin Difficulty := Difficulty + 1 ;
27285: LD_ADDR_OWVAR 67
27289: PUSH
27290: LD_OWVAR 67
27294: PUSH
27295: LD_INT 1
27297: PLUS
27298: ST_TO_ADDR
// end ;
27299: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27300: LD_EXP 68
27304: PUSH
27305: LD_EXP 87
27309: AND
27310: IFFALSE 27413
27312: GO 27314
27314: DISABLE
27315: LD_INT 0
27317: PPUSH
// begin for i := 1 to 5 do
27318: LD_ADDR_VAR 0 1
27322: PUSH
27323: DOUBLE
27324: LD_INT 1
27326: DEC
27327: ST_TO_ADDR
27328: LD_INT 5
27330: PUSH
27331: FOR_TO
27332: IFFALSE 27411
// begin uc_nation := nation_nature ;
27334: LD_ADDR_OWVAR 21
27338: PUSH
27339: LD_INT 0
27341: ST_TO_ADDR
// uc_side := 0 ;
27342: LD_ADDR_OWVAR 20
27346: PUSH
27347: LD_INT 0
27349: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27350: LD_ADDR_OWVAR 29
27354: PUSH
27355: LD_INT 12
27357: PUSH
27358: LD_INT 12
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: ST_TO_ADDR
// hc_agressivity := 20 ;
27365: LD_ADDR_OWVAR 35
27369: PUSH
27370: LD_INT 20
27372: ST_TO_ADDR
// hc_class := class_tiger ;
27373: LD_ADDR_OWVAR 28
27377: PUSH
27378: LD_INT 14
27380: ST_TO_ADDR
// hc_gallery :=  ;
27381: LD_ADDR_OWVAR 33
27385: PUSH
27386: LD_STRING 
27388: ST_TO_ADDR
// hc_name :=  ;
27389: LD_ADDR_OWVAR 26
27393: PUSH
27394: LD_STRING 
27396: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27397: CALL_OW 44
27401: PPUSH
27402: LD_INT 0
27404: PPUSH
27405: CALL_OW 51
// end ;
27409: GO 27331
27411: POP
27412: POP
// end ;
27413: PPOPN 1
27415: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27416: LD_EXP 68
27420: PUSH
27421: LD_EXP 88
27425: AND
27426: IFFALSE 27435
27428: GO 27430
27430: DISABLE
// StreamSibBomb ;
27431: CALL 27436 0 0
27435: END
// export function StreamSibBomb ; var i , x , y ; begin
27436: LD_INT 0
27438: PPUSH
27439: PPUSH
27440: PPUSH
27441: PPUSH
// result := false ;
27442: LD_ADDR_VAR 0 1
27446: PUSH
27447: LD_INT 0
27449: ST_TO_ADDR
// for i := 1 to 16 do
27450: LD_ADDR_VAR 0 2
27454: PUSH
27455: DOUBLE
27456: LD_INT 1
27458: DEC
27459: ST_TO_ADDR
27460: LD_INT 16
27462: PUSH
27463: FOR_TO
27464: IFFALSE 27663
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27466: LD_ADDR_VAR 0 3
27470: PUSH
27471: LD_INT 10
27473: PUSH
27474: LD_INT 20
27476: PUSH
27477: LD_INT 30
27479: PUSH
27480: LD_INT 40
27482: PUSH
27483: LD_INT 50
27485: PUSH
27486: LD_INT 60
27488: PUSH
27489: LD_INT 70
27491: PUSH
27492: LD_INT 80
27494: PUSH
27495: LD_INT 90
27497: PUSH
27498: LD_INT 100
27500: PUSH
27501: LD_INT 110
27503: PUSH
27504: LD_INT 120
27506: PUSH
27507: LD_INT 130
27509: PUSH
27510: LD_INT 140
27512: PUSH
27513: LD_INT 150
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: PPUSH
27536: LD_INT 15
27538: PPUSH
27539: CALL_OW 12
27543: ARRAY
27544: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27545: LD_ADDR_VAR 0 4
27549: PUSH
27550: LD_INT 10
27552: PUSH
27553: LD_INT 20
27555: PUSH
27556: LD_INT 30
27558: PUSH
27559: LD_INT 40
27561: PUSH
27562: LD_INT 50
27564: PUSH
27565: LD_INT 60
27567: PUSH
27568: LD_INT 70
27570: PUSH
27571: LD_INT 80
27573: PUSH
27574: LD_INT 90
27576: PUSH
27577: LD_INT 100
27579: PUSH
27580: LD_INT 110
27582: PUSH
27583: LD_INT 120
27585: PUSH
27586: LD_INT 130
27588: PUSH
27589: LD_INT 140
27591: PUSH
27592: LD_INT 150
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: PPUSH
27615: LD_INT 15
27617: PPUSH
27618: CALL_OW 12
27622: ARRAY
27623: ST_TO_ADDR
// if ValidHex ( x , y ) then
27624: LD_VAR 0 3
27628: PPUSH
27629: LD_VAR 0 4
27633: PPUSH
27634: CALL_OW 488
27638: IFFALSE 27661
// begin result := [ x , y ] ;
27640: LD_ADDR_VAR 0 1
27644: PUSH
27645: LD_VAR 0 3
27649: PUSH
27650: LD_VAR 0 4
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// break ;
27659: GO 27663
// end ; end ;
27661: GO 27463
27663: POP
27664: POP
// if result then
27665: LD_VAR 0 1
27669: IFFALSE 27729
// begin ToLua ( playSibBomb() ) ;
27671: LD_STRING playSibBomb()
27673: PPUSH
27674: CALL_OW 559
// wait ( 0 0$14 ) ;
27678: LD_INT 490
27680: PPUSH
27681: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27685: LD_VAR 0 1
27689: PUSH
27690: LD_INT 1
27692: ARRAY
27693: PPUSH
27694: LD_VAR 0 1
27698: PUSH
27699: LD_INT 2
27701: ARRAY
27702: PPUSH
27703: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27707: LD_VAR 0 1
27711: PUSH
27712: LD_INT 1
27714: ARRAY
27715: PPUSH
27716: LD_VAR 0 1
27720: PUSH
27721: LD_INT 2
27723: ARRAY
27724: PPUSH
27725: CALL_OW 429
// end ; end ;
27729: LD_VAR 0 1
27733: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27734: LD_EXP 68
27738: PUSH
27739: LD_EXP 90
27743: AND
27744: IFFALSE 27756
27746: GO 27748
27748: DISABLE
// YouLost (  ) ;
27749: LD_STRING 
27751: PPUSH
27752: CALL_OW 104
27756: END
// every 0 0$1 trigger StreamModeActive and sFog do
27757: LD_EXP 68
27761: PUSH
27762: LD_EXP 89
27766: AND
27767: IFFALSE 27781
27769: GO 27771
27771: DISABLE
// FogOff ( your_side ) ;
27772: LD_OWVAR 2
27776: PPUSH
27777: CALL_OW 344
27781: END
// every 0 0$1 trigger StreamModeActive and sSun do
27782: LD_EXP 68
27786: PUSH
27787: LD_EXP 91
27791: AND
27792: IFFALSE 27820
27794: GO 27796
27796: DISABLE
// begin solar_recharge_percent := 0 ;
27797: LD_ADDR_OWVAR 79
27801: PUSH
27802: LD_INT 0
27804: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27805: LD_INT 10500
27807: PPUSH
27808: CALL_OW 67
// solar_recharge_percent := 100 ;
27812: LD_ADDR_OWVAR 79
27816: PUSH
27817: LD_INT 100
27819: ST_TO_ADDR
// end ;
27820: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27821: LD_EXP 68
27825: PUSH
27826: LD_EXP 92
27830: AND
27831: IFFALSE 28070
27833: GO 27835
27835: DISABLE
27836: LD_INT 0
27838: PPUSH
27839: PPUSH
27840: PPUSH
// begin tmp := [ ] ;
27841: LD_ADDR_VAR 0 3
27845: PUSH
27846: EMPTY
27847: ST_TO_ADDR
// for i := 1 to 6 do
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: DOUBLE
27854: LD_INT 1
27856: DEC
27857: ST_TO_ADDR
27858: LD_INT 6
27860: PUSH
27861: FOR_TO
27862: IFFALSE 27967
// begin uc_nation := nation_nature ;
27864: LD_ADDR_OWVAR 21
27868: PUSH
27869: LD_INT 0
27871: ST_TO_ADDR
// uc_side := 0 ;
27872: LD_ADDR_OWVAR 20
27876: PUSH
27877: LD_INT 0
27879: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27880: LD_ADDR_OWVAR 29
27884: PUSH
27885: LD_INT 12
27887: PUSH
27888: LD_INT 12
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: ST_TO_ADDR
// hc_agressivity := 20 ;
27895: LD_ADDR_OWVAR 35
27899: PUSH
27900: LD_INT 20
27902: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27903: LD_ADDR_OWVAR 28
27907: PUSH
27908: LD_INT 17
27910: ST_TO_ADDR
// hc_gallery :=  ;
27911: LD_ADDR_OWVAR 33
27915: PUSH
27916: LD_STRING 
27918: ST_TO_ADDR
// hc_name :=  ;
27919: LD_ADDR_OWVAR 26
27923: PUSH
27924: LD_STRING 
27926: ST_TO_ADDR
// un := CreateHuman ;
27927: LD_ADDR_VAR 0 2
27931: PUSH
27932: CALL_OW 44
27936: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27937: LD_VAR 0 2
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: CALL_OW 51
// tmp := tmp ^ un ;
27949: LD_ADDR_VAR 0 3
27953: PUSH
27954: LD_VAR 0 3
27958: PUSH
27959: LD_VAR 0 2
27963: ADD
27964: ST_TO_ADDR
// end ;
27965: GO 27861
27967: POP
27968: POP
// repeat wait ( 0 0$1 ) ;
27969: LD_INT 35
27971: PPUSH
27972: CALL_OW 67
// for un in tmp do
27976: LD_ADDR_VAR 0 2
27980: PUSH
27981: LD_VAR 0 3
27985: PUSH
27986: FOR_IN
27987: IFFALSE 28061
// begin if IsDead ( un ) then
27989: LD_VAR 0 2
27993: PPUSH
27994: CALL_OW 301
27998: IFFALSE 28018
// begin tmp := tmp diff un ;
28000: LD_ADDR_VAR 0 3
28004: PUSH
28005: LD_VAR 0 3
28009: PUSH
28010: LD_VAR 0 2
28014: DIFF
28015: ST_TO_ADDR
// continue ;
28016: GO 27986
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28018: LD_VAR 0 2
28022: PPUSH
28023: LD_INT 3
28025: PUSH
28026: LD_INT 22
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PPUSH
28040: CALL_OW 69
28044: PPUSH
28045: LD_VAR 0 2
28049: PPUSH
28050: CALL_OW 74
28054: PPUSH
28055: CALL_OW 115
// end ;
28059: GO 27986
28061: POP
28062: POP
// until not tmp ;
28063: LD_VAR 0 3
28067: NOT
28068: IFFALSE 27969
// end ;
28070: PPOPN 3
28072: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28073: LD_EXP 68
28077: PUSH
28078: LD_EXP 93
28082: AND
28083: IFFALSE 28137
28085: GO 28087
28087: DISABLE
// begin ToLua ( displayTroll(); ) ;
28088: LD_STRING displayTroll();
28090: PPUSH
28091: CALL_OW 559
// wait ( 3 3$00 ) ;
28095: LD_INT 6300
28097: PPUSH
28098: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28102: LD_STRING hideTroll();
28104: PPUSH
28105: CALL_OW 559
// wait ( 1 1$00 ) ;
28109: LD_INT 2100
28111: PPUSH
28112: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28116: LD_STRING displayTroll();
28118: PPUSH
28119: CALL_OW 559
// wait ( 1 1$00 ) ;
28123: LD_INT 2100
28125: PPUSH
28126: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28130: LD_STRING hideTroll();
28132: PPUSH
28133: CALL_OW 559
// end ;
28137: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28138: LD_EXP 68
28142: PUSH
28143: LD_EXP 94
28147: AND
28148: IFFALSE 28211
28150: GO 28152
28152: DISABLE
28153: LD_INT 0
28155: PPUSH
// begin p := 0 ;
28156: LD_ADDR_VAR 0 1
28160: PUSH
28161: LD_INT 0
28163: ST_TO_ADDR
// repeat game_speed := 1 ;
28164: LD_ADDR_OWVAR 65
28168: PUSH
28169: LD_INT 1
28171: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28172: LD_INT 35
28174: PPUSH
28175: CALL_OW 67
// p := p + 1 ;
28179: LD_ADDR_VAR 0 1
28183: PUSH
28184: LD_VAR 0 1
28188: PUSH
28189: LD_INT 1
28191: PLUS
28192: ST_TO_ADDR
// until p >= 60 ;
28193: LD_VAR 0 1
28197: PUSH
28198: LD_INT 60
28200: GREATEREQUAL
28201: IFFALSE 28164
// game_speed := 4 ;
28203: LD_ADDR_OWVAR 65
28207: PUSH
28208: LD_INT 4
28210: ST_TO_ADDR
// end ;
28211: PPOPN 1
28213: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28214: LD_EXP 68
28218: PUSH
28219: LD_EXP 95
28223: AND
28224: IFFALSE 28370
28226: GO 28228
28228: DISABLE
28229: LD_INT 0
28231: PPUSH
28232: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28233: LD_ADDR_VAR 0 1
28237: PUSH
28238: LD_INT 22
28240: PUSH
28241: LD_OWVAR 2
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: LD_INT 30
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 30
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PPUSH
28282: CALL_OW 69
28286: ST_TO_ADDR
// if not depot then
28287: LD_VAR 0 1
28291: NOT
28292: IFFALSE 28296
// exit ;
28294: GO 28370
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28296: LD_ADDR_VAR 0 2
28300: PUSH
28301: LD_VAR 0 1
28305: PUSH
28306: LD_INT 1
28308: PPUSH
28309: LD_VAR 0 1
28313: PPUSH
28314: CALL_OW 12
28318: ARRAY
28319: PPUSH
28320: CALL_OW 274
28324: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28325: LD_VAR 0 2
28329: PPUSH
28330: LD_INT 1
28332: PPUSH
28333: LD_INT 0
28335: PPUSH
28336: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28340: LD_VAR 0 2
28344: PPUSH
28345: LD_INT 2
28347: PPUSH
28348: LD_INT 0
28350: PPUSH
28351: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28355: LD_VAR 0 2
28359: PPUSH
28360: LD_INT 3
28362: PPUSH
28363: LD_INT 0
28365: PPUSH
28366: CALL_OW 277
// end ;
28370: PPOPN 2
28372: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28373: LD_EXP 68
28377: PUSH
28378: LD_EXP 96
28382: AND
28383: IFFALSE 28480
28385: GO 28387
28387: DISABLE
28388: LD_INT 0
28390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28391: LD_ADDR_VAR 0 1
28395: PUSH
28396: LD_INT 22
28398: PUSH
28399: LD_OWVAR 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 21
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 3
28420: PUSH
28421: LD_INT 23
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 69
28444: ST_TO_ADDR
// if not tmp then
28445: LD_VAR 0 1
28449: NOT
28450: IFFALSE 28454
// exit ;
28452: GO 28480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28454: LD_VAR 0 1
28458: PUSH
28459: LD_INT 1
28461: PPUSH
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 12
28471: ARRAY
28472: PPUSH
28473: LD_INT 200
28475: PPUSH
28476: CALL_OW 234
// end ;
28480: PPOPN 1
28482: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28483: LD_EXP 68
28487: PUSH
28488: LD_EXP 97
28492: AND
28493: IFFALSE 28572
28495: GO 28497
28497: DISABLE
28498: LD_INT 0
28500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28501: LD_ADDR_VAR 0 1
28505: PUSH
28506: LD_INT 22
28508: PUSH
28509: LD_OWVAR 2
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 21
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PPUSH
28532: CALL_OW 69
28536: ST_TO_ADDR
// if not tmp then
28537: LD_VAR 0 1
28541: NOT
28542: IFFALSE 28546
// exit ;
28544: GO 28572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28546: LD_VAR 0 1
28550: PUSH
28551: LD_INT 1
28553: PPUSH
28554: LD_VAR 0 1
28558: PPUSH
28559: CALL_OW 12
28563: ARRAY
28564: PPUSH
28565: LD_INT 60
28567: PPUSH
28568: CALL_OW 234
// end ;
28572: PPOPN 1
28574: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28575: LD_EXP 68
28579: PUSH
28580: LD_EXP 98
28584: AND
28585: IFFALSE 28684
28587: GO 28589
28589: DISABLE
28590: LD_INT 0
28592: PPUSH
28593: PPUSH
// begin enable ;
28594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28595: LD_ADDR_VAR 0 1
28599: PUSH
28600: LD_INT 22
28602: PUSH
28603: LD_OWVAR 2
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 61
28614: PUSH
28615: EMPTY
28616: LIST
28617: PUSH
28618: LD_INT 33
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: PPUSH
28633: CALL_OW 69
28637: ST_TO_ADDR
// if not tmp then
28638: LD_VAR 0 1
28642: NOT
28643: IFFALSE 28647
// exit ;
28645: GO 28684
// for i in tmp do
28647: LD_ADDR_VAR 0 2
28651: PUSH
28652: LD_VAR 0 1
28656: PUSH
28657: FOR_IN
28658: IFFALSE 28682
// if IsControledBy ( i ) then
28660: LD_VAR 0 2
28664: PPUSH
28665: CALL_OW 312
28669: IFFALSE 28680
// ComUnlink ( i ) ;
28671: LD_VAR 0 2
28675: PPUSH
28676: CALL_OW 136
28680: GO 28657
28682: POP
28683: POP
// end ;
28684: PPOPN 2
28686: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28687: LD_EXP 68
28691: PUSH
28692: LD_EXP 99
28696: AND
28697: IFFALSE 28837
28699: GO 28701
28701: DISABLE
28702: LD_INT 0
28704: PPUSH
28705: PPUSH
// begin ToLua ( displayPowell(); ) ;
28706: LD_STRING displayPowell();
28708: PPUSH
28709: CALL_OW 559
// uc_side := 0 ;
28713: LD_ADDR_OWVAR 20
28717: PUSH
28718: LD_INT 0
28720: ST_TO_ADDR
// uc_nation := 2 ;
28721: LD_ADDR_OWVAR 21
28725: PUSH
28726: LD_INT 2
28728: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28729: LD_ADDR_OWVAR 37
28733: PUSH
28734: LD_INT 14
28736: ST_TO_ADDR
// vc_engine := engine_siberite ;
28737: LD_ADDR_OWVAR 39
28741: PUSH
28742: LD_INT 3
28744: ST_TO_ADDR
// vc_control := control_apeman ;
28745: LD_ADDR_OWVAR 38
28749: PUSH
28750: LD_INT 5
28752: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28753: LD_ADDR_OWVAR 40
28757: PUSH
28758: LD_INT 29
28760: ST_TO_ADDR
// un := CreateVehicle ;
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: CALL_OW 45
28770: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28771: LD_VAR 0 2
28775: PPUSH
28776: LD_INT 1
28778: PPUSH
28779: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28783: LD_INT 35
28785: PPUSH
28786: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28790: LD_VAR 0 2
28794: PPUSH
28795: LD_INT 22
28797: PUSH
28798: LD_OWVAR 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PPUSH
28807: CALL_OW 69
28811: PPUSH
28812: LD_VAR 0 2
28816: PPUSH
28817: CALL_OW 74
28821: PPUSH
28822: CALL_OW 115
// until IsDead ( un ) ;
28826: LD_VAR 0 2
28830: PPUSH
28831: CALL_OW 301
28835: IFFALSE 28783
// end ;
28837: PPOPN 2
28839: END
// every 0 0$1 trigger StreamModeActive and sStu do
28840: LD_EXP 68
28844: PUSH
28845: LD_EXP 107
28849: AND
28850: IFFALSE 28866
28852: GO 28854
28854: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28855: LD_STRING displayStucuk();
28857: PPUSH
28858: CALL_OW 559
// ResetFog ;
28862: CALL_OW 335
// end ;
28866: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28867: LD_EXP 68
28871: PUSH
28872: LD_EXP 100
28876: AND
28877: IFFALSE 29018
28879: GO 28881
28881: DISABLE
28882: LD_INT 0
28884: PPUSH
28885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28886: LD_ADDR_VAR 0 2
28890: PUSH
28891: LD_INT 22
28893: PUSH
28894: LD_OWVAR 2
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 21
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PPUSH
28917: CALL_OW 69
28921: ST_TO_ADDR
// if not tmp then
28922: LD_VAR 0 2
28926: NOT
28927: IFFALSE 28931
// exit ;
28929: GO 29018
// un := tmp [ rand ( 1 , tmp ) ] ;
28931: LD_ADDR_VAR 0 1
28935: PUSH
28936: LD_VAR 0 2
28940: PUSH
28941: LD_INT 1
28943: PPUSH
28944: LD_VAR 0 2
28948: PPUSH
28949: CALL_OW 12
28953: ARRAY
28954: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28955: LD_VAR 0 1
28959: PPUSH
28960: LD_INT 0
28962: PPUSH
28963: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28967: LD_VAR 0 1
28971: PPUSH
28972: LD_OWVAR 3
28976: PUSH
28977: LD_VAR 0 1
28981: DIFF
28982: PPUSH
28983: LD_VAR 0 1
28987: PPUSH
28988: CALL_OW 74
28992: PPUSH
28993: CALL_OW 115
// wait ( 0 0$20 ) ;
28997: LD_INT 700
28999: PPUSH
29000: CALL_OW 67
// SetSide ( un , your_side ) ;
29004: LD_VAR 0 1
29008: PPUSH
29009: LD_OWVAR 2
29013: PPUSH
29014: CALL_OW 235
// end ;
29018: PPOPN 2
29020: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29021: LD_EXP 68
29025: PUSH
29026: LD_EXP 101
29030: AND
29031: IFFALSE 29137
29033: GO 29035
29035: DISABLE
29036: LD_INT 0
29038: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29039: LD_ADDR_VAR 0 1
29043: PUSH
29044: LD_INT 22
29046: PUSH
29047: LD_OWVAR 2
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 30
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 30
29071: PUSH
29072: LD_INT 1
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PPUSH
29088: CALL_OW 69
29092: ST_TO_ADDR
// if not depot then
29093: LD_VAR 0 1
29097: NOT
29098: IFFALSE 29102
// exit ;
29100: GO 29137
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29102: LD_VAR 0 1
29106: PUSH
29107: LD_INT 1
29109: ARRAY
29110: PPUSH
29111: CALL_OW 250
29115: PPUSH
29116: LD_VAR 0 1
29120: PUSH
29121: LD_INT 1
29123: ARRAY
29124: PPUSH
29125: CALL_OW 251
29129: PPUSH
29130: LD_INT 70
29132: PPUSH
29133: CALL_OW 495
// end ;
29137: PPOPN 1
29139: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29140: LD_EXP 68
29144: PUSH
29145: LD_EXP 102
29149: AND
29150: IFFALSE 29361
29152: GO 29154
29154: DISABLE
29155: LD_INT 0
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29162: LD_ADDR_VAR 0 5
29166: PUSH
29167: LD_INT 22
29169: PUSH
29170: LD_OWVAR 2
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 21
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PPUSH
29193: CALL_OW 69
29197: ST_TO_ADDR
// if not tmp then
29198: LD_VAR 0 5
29202: NOT
29203: IFFALSE 29207
// exit ;
29205: GO 29361
// for i in tmp do
29207: LD_ADDR_VAR 0 1
29211: PUSH
29212: LD_VAR 0 5
29216: PUSH
29217: FOR_IN
29218: IFFALSE 29359
// begin d := rand ( 0 , 5 ) ;
29220: LD_ADDR_VAR 0 4
29224: PUSH
29225: LD_INT 0
29227: PPUSH
29228: LD_INT 5
29230: PPUSH
29231: CALL_OW 12
29235: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29236: LD_ADDR_VAR 0 2
29240: PUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL_OW 250
29250: PPUSH
29251: LD_VAR 0 4
29255: PPUSH
29256: LD_INT 3
29258: PPUSH
29259: LD_INT 12
29261: PPUSH
29262: CALL_OW 12
29266: PPUSH
29267: CALL_OW 272
29271: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29272: LD_ADDR_VAR 0 3
29276: PUSH
29277: LD_VAR 0 1
29281: PPUSH
29282: CALL_OW 251
29286: PPUSH
29287: LD_VAR 0 4
29291: PPUSH
29292: LD_INT 3
29294: PPUSH
29295: LD_INT 12
29297: PPUSH
29298: CALL_OW 12
29302: PPUSH
29303: CALL_OW 273
29307: ST_TO_ADDR
// if ValidHex ( x , y ) then
29308: LD_VAR 0 2
29312: PPUSH
29313: LD_VAR 0 3
29317: PPUSH
29318: CALL_OW 488
29322: IFFALSE 29357
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29324: LD_VAR 0 1
29328: PPUSH
29329: LD_VAR 0 2
29333: PPUSH
29334: LD_VAR 0 3
29338: PPUSH
29339: LD_INT 3
29341: PPUSH
29342: LD_INT 6
29344: PPUSH
29345: CALL_OW 12
29349: PPUSH
29350: LD_INT 1
29352: PPUSH
29353: CALL_OW 483
// end ;
29357: GO 29217
29359: POP
29360: POP
// end ;
29361: PPOPN 5
29363: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29364: LD_EXP 68
29368: PUSH
29369: LD_EXP 103
29373: AND
29374: IFFALSE 29468
29376: GO 29378
29378: DISABLE
29379: LD_INT 0
29381: PPUSH
29382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29383: LD_ADDR_VAR 0 2
29387: PUSH
29388: LD_INT 22
29390: PUSH
29391: LD_OWVAR 2
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 32
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 21
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: PPUSH
29425: CALL_OW 69
29429: ST_TO_ADDR
// if not tmp then
29430: LD_VAR 0 2
29434: NOT
29435: IFFALSE 29439
// exit ;
29437: GO 29468
// for i in tmp do
29439: LD_ADDR_VAR 0 1
29443: PUSH
29444: LD_VAR 0 2
29448: PUSH
29449: FOR_IN
29450: IFFALSE 29466
// SetFuel ( i , 0 ) ;
29452: LD_VAR 0 1
29456: PPUSH
29457: LD_INT 0
29459: PPUSH
29460: CALL_OW 240
29464: GO 29449
29466: POP
29467: POP
// end ;
29468: PPOPN 2
29470: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29471: LD_EXP 68
29475: PUSH
29476: LD_EXP 104
29480: AND
29481: IFFALSE 29547
29483: GO 29485
29485: DISABLE
29486: LD_INT 0
29488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29489: LD_ADDR_VAR 0 1
29493: PUSH
29494: LD_INT 22
29496: PUSH
29497: LD_OWVAR 2
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 30
29508: PUSH
29509: LD_INT 29
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 69
29524: ST_TO_ADDR
// if not tmp then
29525: LD_VAR 0 1
29529: NOT
29530: IFFALSE 29534
// exit ;
29532: GO 29547
// DestroyUnit ( tmp [ 1 ] ) ;
29534: LD_VAR 0 1
29538: PUSH
29539: LD_INT 1
29541: ARRAY
29542: PPUSH
29543: CALL_OW 65
// end ;
29547: PPOPN 1
29549: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29550: LD_EXP 68
29554: PUSH
29555: LD_EXP 106
29559: AND
29560: IFFALSE 29689
29562: GO 29564
29564: DISABLE
29565: LD_INT 0
29567: PPUSH
// begin uc_side := 0 ;
29568: LD_ADDR_OWVAR 20
29572: PUSH
29573: LD_INT 0
29575: ST_TO_ADDR
// uc_nation := nation_arabian ;
29576: LD_ADDR_OWVAR 21
29580: PUSH
29581: LD_INT 2
29583: ST_TO_ADDR
// hc_gallery :=  ;
29584: LD_ADDR_OWVAR 33
29588: PUSH
29589: LD_STRING 
29591: ST_TO_ADDR
// hc_name :=  ;
29592: LD_ADDR_OWVAR 26
29596: PUSH
29597: LD_STRING 
29599: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29600: LD_INT 1
29602: PPUSH
29603: LD_INT 11
29605: PPUSH
29606: LD_INT 10
29608: PPUSH
29609: CALL_OW 380
// un := CreateHuman ;
29613: LD_ADDR_VAR 0 1
29617: PUSH
29618: CALL_OW 44
29622: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29623: LD_VAR 0 1
29627: PPUSH
29628: LD_INT 1
29630: PPUSH
29631: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29635: LD_INT 35
29637: PPUSH
29638: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29642: LD_VAR 0 1
29646: PPUSH
29647: LD_INT 22
29649: PUSH
29650: LD_OWVAR 2
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PPUSH
29659: CALL_OW 69
29663: PPUSH
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 74
29673: PPUSH
29674: CALL_OW 115
// until IsDead ( un ) ;
29678: LD_VAR 0 1
29682: PPUSH
29683: CALL_OW 301
29687: IFFALSE 29635
// end ;
29689: PPOPN 1
29691: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29692: LD_EXP 68
29696: PUSH
29697: LD_EXP 108
29701: AND
29702: IFFALSE 29714
29704: GO 29706
29706: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29707: LD_STRING earthquake(getX(game), 0, 32)
29709: PPUSH
29710: CALL_OW 559
29714: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29715: LD_EXP 68
29719: PUSH
29720: LD_EXP 109
29724: AND
29725: IFFALSE 29816
29727: GO 29729
29729: DISABLE
29730: LD_INT 0
29732: PPUSH
// begin enable ;
29733: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29734: LD_ADDR_VAR 0 1
29738: PUSH
29739: LD_INT 22
29741: PUSH
29742: LD_OWVAR 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 21
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 33
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: PPUSH
29776: CALL_OW 69
29780: ST_TO_ADDR
// if not tmp then
29781: LD_VAR 0 1
29785: NOT
29786: IFFALSE 29790
// exit ;
29788: GO 29816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29790: LD_VAR 0 1
29794: PUSH
29795: LD_INT 1
29797: PPUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 12
29807: ARRAY
29808: PPUSH
29809: LD_INT 1
29811: PPUSH
29812: CALL_OW 234
// end ;
29816: PPOPN 1
29818: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29819: LD_EXP 68
29823: PUSH
29824: LD_EXP 110
29828: AND
29829: IFFALSE 29970
29831: GO 29833
29833: DISABLE
29834: LD_INT 0
29836: PPUSH
29837: PPUSH
29838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29839: LD_ADDR_VAR 0 3
29843: PUSH
29844: LD_INT 22
29846: PUSH
29847: LD_OWVAR 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 25
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PPUSH
29870: CALL_OW 69
29874: ST_TO_ADDR
// if not tmp then
29875: LD_VAR 0 3
29879: NOT
29880: IFFALSE 29884
// exit ;
29882: GO 29970
// un := tmp [ rand ( 1 , tmp ) ] ;
29884: LD_ADDR_VAR 0 2
29888: PUSH
29889: LD_VAR 0 3
29893: PUSH
29894: LD_INT 1
29896: PPUSH
29897: LD_VAR 0 3
29901: PPUSH
29902: CALL_OW 12
29906: ARRAY
29907: ST_TO_ADDR
// if Crawls ( un ) then
29908: LD_VAR 0 2
29912: PPUSH
29913: CALL_OW 318
29917: IFFALSE 29928
// ComWalk ( un ) ;
29919: LD_VAR 0 2
29923: PPUSH
29924: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29928: LD_VAR 0 2
29932: PPUSH
29933: LD_INT 9
29935: PPUSH
29936: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29940: LD_INT 28
29942: PPUSH
29943: LD_OWVAR 2
29947: PPUSH
29948: LD_INT 2
29950: PPUSH
29951: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29955: LD_INT 29
29957: PPUSH
29958: LD_OWVAR 2
29962: PPUSH
29963: LD_INT 2
29965: PPUSH
29966: CALL_OW 322
// end ;
29970: PPOPN 3
29972: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29973: LD_EXP 68
29977: PUSH
29978: LD_EXP 111
29982: AND
29983: IFFALSE 30094
29985: GO 29987
29987: DISABLE
29988: LD_INT 0
29990: PPUSH
29991: PPUSH
29992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29993: LD_ADDR_VAR 0 3
29997: PUSH
29998: LD_INT 22
30000: PUSH
30001: LD_OWVAR 2
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 25
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PPUSH
30024: CALL_OW 69
30028: ST_TO_ADDR
// if not tmp then
30029: LD_VAR 0 3
30033: NOT
30034: IFFALSE 30038
// exit ;
30036: GO 30094
// un := tmp [ rand ( 1 , tmp ) ] ;
30038: LD_ADDR_VAR 0 2
30042: PUSH
30043: LD_VAR 0 3
30047: PUSH
30048: LD_INT 1
30050: PPUSH
30051: LD_VAR 0 3
30055: PPUSH
30056: CALL_OW 12
30060: ARRAY
30061: ST_TO_ADDR
// if Crawls ( un ) then
30062: LD_VAR 0 2
30066: PPUSH
30067: CALL_OW 318
30071: IFFALSE 30082
// ComWalk ( un ) ;
30073: LD_VAR 0 2
30077: PPUSH
30078: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30082: LD_VAR 0 2
30086: PPUSH
30087: LD_INT 8
30089: PPUSH
30090: CALL_OW 336
// end ;
30094: PPOPN 3
30096: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30097: LD_EXP 68
30101: PUSH
30102: LD_EXP 112
30106: AND
30107: IFFALSE 30251
30109: GO 30111
30111: DISABLE
30112: LD_INT 0
30114: PPUSH
30115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30116: LD_ADDR_VAR 0 2
30120: PUSH
30121: LD_INT 22
30123: PUSH
30124: LD_OWVAR 2
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 21
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: LD_INT 34
30148: PUSH
30149: LD_INT 12
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 34
30158: PUSH
30159: LD_INT 51
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 34
30168: PUSH
30169: LD_INT 32
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: PPUSH
30187: CALL_OW 69
30191: ST_TO_ADDR
// if not tmp then
30192: LD_VAR 0 2
30196: NOT
30197: IFFALSE 30201
// exit ;
30199: GO 30251
// for i in tmp do
30201: LD_ADDR_VAR 0 1
30205: PUSH
30206: LD_VAR 0 2
30210: PUSH
30211: FOR_IN
30212: IFFALSE 30249
// if GetCargo ( i , mat_artifact ) = 0 then
30214: LD_VAR 0 1
30218: PPUSH
30219: LD_INT 4
30221: PPUSH
30222: CALL_OW 289
30226: PUSH
30227: LD_INT 0
30229: EQUAL
30230: IFFALSE 30247
// SetCargo ( i , mat_siberit , 100 ) ;
30232: LD_VAR 0 1
30236: PPUSH
30237: LD_INT 3
30239: PPUSH
30240: LD_INT 100
30242: PPUSH
30243: CALL_OW 290
30247: GO 30211
30249: POP
30250: POP
// end ;
30251: PPOPN 2
30253: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30254: LD_EXP 68
30258: PUSH
30259: LD_EXP 113
30263: AND
30264: IFFALSE 30447
30266: GO 30268
30268: DISABLE
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30273: LD_ADDR_VAR 0 2
30277: PUSH
30278: LD_INT 22
30280: PUSH
30281: LD_OWVAR 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PPUSH
30290: CALL_OW 69
30294: ST_TO_ADDR
// if not tmp then
30295: LD_VAR 0 2
30299: NOT
30300: IFFALSE 30304
// exit ;
30302: GO 30447
// for i := 1 to 2 do
30304: LD_ADDR_VAR 0 1
30308: PUSH
30309: DOUBLE
30310: LD_INT 1
30312: DEC
30313: ST_TO_ADDR
30314: LD_INT 2
30316: PUSH
30317: FOR_TO
30318: IFFALSE 30445
// begin uc_side := your_side ;
30320: LD_ADDR_OWVAR 20
30324: PUSH
30325: LD_OWVAR 2
30329: ST_TO_ADDR
// uc_nation := nation_american ;
30330: LD_ADDR_OWVAR 21
30334: PUSH
30335: LD_INT 1
30337: ST_TO_ADDR
// vc_chassis := us_morphling ;
30338: LD_ADDR_OWVAR 37
30342: PUSH
30343: LD_INT 5
30345: ST_TO_ADDR
// vc_engine := engine_siberite ;
30346: LD_ADDR_OWVAR 39
30350: PUSH
30351: LD_INT 3
30353: ST_TO_ADDR
// vc_control := control_computer ;
30354: LD_ADDR_OWVAR 38
30358: PUSH
30359: LD_INT 3
30361: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30362: LD_ADDR_OWVAR 40
30366: PUSH
30367: LD_INT 10
30369: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30370: LD_VAR 0 2
30374: PUSH
30375: LD_INT 1
30377: ARRAY
30378: PPUSH
30379: CALL_OW 310
30383: NOT
30384: IFFALSE 30431
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30386: CALL_OW 45
30390: PPUSH
30391: LD_VAR 0 2
30395: PUSH
30396: LD_INT 1
30398: ARRAY
30399: PPUSH
30400: CALL_OW 250
30404: PPUSH
30405: LD_VAR 0 2
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: CALL_OW 251
30418: PPUSH
30419: LD_INT 12
30421: PPUSH
30422: LD_INT 1
30424: PPUSH
30425: CALL_OW 50
30429: GO 30443
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30431: CALL_OW 45
30435: PPUSH
30436: LD_INT 1
30438: PPUSH
30439: CALL_OW 51
// end ;
30443: GO 30317
30445: POP
30446: POP
// end ;
30447: PPOPN 2
30449: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30450: LD_EXP 68
30454: PUSH
30455: LD_EXP 114
30459: AND
30460: IFFALSE 30682
30462: GO 30464
30464: DISABLE
30465: LD_INT 0
30467: PPUSH
30468: PPUSH
30469: PPUSH
30470: PPUSH
30471: PPUSH
30472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30473: LD_ADDR_VAR 0 6
30477: PUSH
30478: LD_INT 22
30480: PUSH
30481: LD_OWVAR 2
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 21
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 23
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: PPUSH
30522: CALL_OW 69
30526: ST_TO_ADDR
// if not tmp then
30527: LD_VAR 0 6
30531: NOT
30532: IFFALSE 30536
// exit ;
30534: GO 30682
// s1 := rand ( 1 , 4 ) ;
30536: LD_ADDR_VAR 0 2
30540: PUSH
30541: LD_INT 1
30543: PPUSH
30544: LD_INT 4
30546: PPUSH
30547: CALL_OW 12
30551: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30552: LD_ADDR_VAR 0 4
30556: PUSH
30557: LD_VAR 0 6
30561: PUSH
30562: LD_INT 1
30564: ARRAY
30565: PPUSH
30566: LD_VAR 0 2
30570: PPUSH
30571: CALL_OW 259
30575: ST_TO_ADDR
// if s1 = 1 then
30576: LD_VAR 0 2
30580: PUSH
30581: LD_INT 1
30583: EQUAL
30584: IFFALSE 30604
// s2 := rand ( 2 , 4 ) else
30586: LD_ADDR_VAR 0 3
30590: PUSH
30591: LD_INT 2
30593: PPUSH
30594: LD_INT 4
30596: PPUSH
30597: CALL_OW 12
30601: ST_TO_ADDR
30602: GO 30612
// s2 := 1 ;
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_INT 1
30611: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30612: LD_ADDR_VAR 0 5
30616: PUSH
30617: LD_VAR 0 6
30621: PUSH
30622: LD_INT 1
30624: ARRAY
30625: PPUSH
30626: LD_VAR 0 3
30630: PPUSH
30631: CALL_OW 259
30635: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30636: LD_VAR 0 6
30640: PUSH
30641: LD_INT 1
30643: ARRAY
30644: PPUSH
30645: LD_VAR 0 2
30649: PPUSH
30650: LD_VAR 0 5
30654: PPUSH
30655: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30659: LD_VAR 0 6
30663: PUSH
30664: LD_INT 1
30666: ARRAY
30667: PPUSH
30668: LD_VAR 0 3
30672: PPUSH
30673: LD_VAR 0 4
30677: PPUSH
30678: CALL_OW 237
// end ;
30682: PPOPN 6
30684: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30685: LD_EXP 68
30689: PUSH
30690: LD_EXP 115
30694: AND
30695: IFFALSE 30774
30697: GO 30699
30699: DISABLE
30700: LD_INT 0
30702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30703: LD_ADDR_VAR 0 1
30707: PUSH
30708: LD_INT 22
30710: PUSH
30711: LD_OWVAR 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 30
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PPUSH
30734: CALL_OW 69
30738: ST_TO_ADDR
// if not tmp then
30739: LD_VAR 0 1
30743: NOT
30744: IFFALSE 30748
// exit ;
30746: GO 30774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30748: LD_VAR 0 1
30752: PUSH
30753: LD_INT 1
30755: PPUSH
30756: LD_VAR 0 1
30760: PPUSH
30761: CALL_OW 12
30765: ARRAY
30766: PPUSH
30767: LD_INT 1
30769: PPUSH
30770: CALL_OW 234
// end ;
30774: PPOPN 1
30776: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30777: LD_EXP 68
30781: PUSH
30782: LD_EXP 116
30786: AND
30787: IFFALSE 30899
30789: GO 30791
30791: DISABLE
30792: LD_INT 0
30794: PPUSH
30795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30796: LD_ADDR_VAR 0 2
30800: PUSH
30801: LD_INT 22
30803: PUSH
30804: LD_OWVAR 2
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: LD_INT 30
30818: PUSH
30819: LD_INT 27
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 30
30828: PUSH
30829: LD_INT 26
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 30
30838: PUSH
30839: LD_INT 28
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PPUSH
30856: CALL_OW 69
30860: ST_TO_ADDR
// if not tmp then
30861: LD_VAR 0 2
30865: NOT
30866: IFFALSE 30870
// exit ;
30868: GO 30899
// for i in tmp do
30870: LD_ADDR_VAR 0 1
30874: PUSH
30875: LD_VAR 0 2
30879: PUSH
30880: FOR_IN
30881: IFFALSE 30897
// SetLives ( i , 1 ) ;
30883: LD_VAR 0 1
30887: PPUSH
30888: LD_INT 1
30890: PPUSH
30891: CALL_OW 234
30895: GO 30880
30897: POP
30898: POP
// end ;
30899: PPOPN 2
30901: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30902: LD_EXP 68
30906: PUSH
30907: LD_EXP 117
30911: AND
30912: IFFALSE 31199
30914: GO 30916
30916: DISABLE
30917: LD_INT 0
30919: PPUSH
30920: PPUSH
30921: PPUSH
// begin i := rand ( 1 , 7 ) ;
30922: LD_ADDR_VAR 0 1
30926: PUSH
30927: LD_INT 1
30929: PPUSH
30930: LD_INT 7
30932: PPUSH
30933: CALL_OW 12
30937: ST_TO_ADDR
// case i of 1 :
30938: LD_VAR 0 1
30942: PUSH
30943: LD_INT 1
30945: DOUBLE
30946: EQUAL
30947: IFTRUE 30951
30949: GO 30961
30951: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30952: LD_STRING earthquake(getX(game), 0, 32)
30954: PPUSH
30955: CALL_OW 559
30959: GO 31199
30961: LD_INT 2
30963: DOUBLE
30964: EQUAL
30965: IFTRUE 30969
30967: GO 30983
30969: POP
// begin ToLua ( displayStucuk(); ) ;
30970: LD_STRING displayStucuk();
30972: PPUSH
30973: CALL_OW 559
// ResetFog ;
30977: CALL_OW 335
// end ; 3 :
30981: GO 31199
30983: LD_INT 3
30985: DOUBLE
30986: EQUAL
30987: IFTRUE 30991
30989: GO 31095
30991: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30992: LD_ADDR_VAR 0 2
30996: PUSH
30997: LD_INT 22
30999: PUSH
31000: LD_OWVAR 2
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 25
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PPUSH
31023: CALL_OW 69
31027: ST_TO_ADDR
// if not tmp then
31028: LD_VAR 0 2
31032: NOT
31033: IFFALSE 31037
// exit ;
31035: GO 31199
// un := tmp [ rand ( 1 , tmp ) ] ;
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_VAR 0 2
31046: PUSH
31047: LD_INT 1
31049: PPUSH
31050: LD_VAR 0 2
31054: PPUSH
31055: CALL_OW 12
31059: ARRAY
31060: ST_TO_ADDR
// if Crawls ( un ) then
31061: LD_VAR 0 3
31065: PPUSH
31066: CALL_OW 318
31070: IFFALSE 31081
// ComWalk ( un ) ;
31072: LD_VAR 0 3
31076: PPUSH
31077: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31081: LD_VAR 0 3
31085: PPUSH
31086: LD_INT 8
31088: PPUSH
31089: CALL_OW 336
// end ; 4 :
31093: GO 31199
31095: LD_INT 4
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31103
31101: GO 31177
31103: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31104: LD_ADDR_VAR 0 2
31108: PUSH
31109: LD_INT 22
31111: PUSH
31112: LD_OWVAR 2
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 30
31123: PUSH
31124: LD_INT 29
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PPUSH
31135: CALL_OW 69
31139: ST_TO_ADDR
// if not tmp then
31140: LD_VAR 0 2
31144: NOT
31145: IFFALSE 31149
// exit ;
31147: GO 31199
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31149: LD_VAR 0 2
31153: PUSH
31154: LD_INT 1
31156: ARRAY
31157: PPUSH
31158: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31162: LD_VAR 0 2
31166: PUSH
31167: LD_INT 1
31169: ARRAY
31170: PPUSH
31171: CALL_OW 65
// end ; 5 .. 7 :
31175: GO 31199
31177: LD_INT 5
31179: DOUBLE
31180: GREATEREQUAL
31181: IFFALSE 31189
31183: LD_INT 7
31185: DOUBLE
31186: LESSEQUAL
31187: IFTRUE 31191
31189: GO 31198
31191: POP
// StreamSibBomb ; end ;
31192: CALL 27436 0 0
31196: GO 31199
31198: POP
// end ;
31199: PPOPN 3
31201: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31202: LD_EXP 68
31206: PUSH
31207: LD_EXP 118
31211: AND
31212: IFFALSE 31368
31214: GO 31216
31216: DISABLE
31217: LD_INT 0
31219: PPUSH
31220: PPUSH
31221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31222: LD_ADDR_VAR 0 2
31226: PUSH
31227: LD_INT 81
31229: PUSH
31230: LD_OWVAR 2
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 2
31241: PUSH
31242: LD_INT 21
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 21
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PPUSH
31271: CALL_OW 69
31275: ST_TO_ADDR
// if not tmp then
31276: LD_VAR 0 2
31280: NOT
31281: IFFALSE 31285
// exit ;
31283: GO 31368
// p := 0 ;
31285: LD_ADDR_VAR 0 3
31289: PUSH
31290: LD_INT 0
31292: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31293: LD_INT 35
31295: PPUSH
31296: CALL_OW 67
// p := p + 1 ;
31300: LD_ADDR_VAR 0 3
31304: PUSH
31305: LD_VAR 0 3
31309: PUSH
31310: LD_INT 1
31312: PLUS
31313: ST_TO_ADDR
// for i in tmp do
31314: LD_ADDR_VAR 0 1
31318: PUSH
31319: LD_VAR 0 2
31323: PUSH
31324: FOR_IN
31325: IFFALSE 31356
// if GetLives ( i ) < 1000 then
31327: LD_VAR 0 1
31331: PPUSH
31332: CALL_OW 256
31336: PUSH
31337: LD_INT 1000
31339: LESS
31340: IFFALSE 31354
// SetLives ( i , 1000 ) ;
31342: LD_VAR 0 1
31346: PPUSH
31347: LD_INT 1000
31349: PPUSH
31350: CALL_OW 234
31354: GO 31324
31356: POP
31357: POP
// until p > 20 ;
31358: LD_VAR 0 3
31362: PUSH
31363: LD_INT 20
31365: GREATER
31366: IFFALSE 31293
// end ;
31368: PPOPN 3
31370: END
// every 0 0$1 trigger StreamModeActive and sTime do
31371: LD_EXP 68
31375: PUSH
31376: LD_EXP 119
31380: AND
31381: IFFALSE 31416
31383: GO 31385
31385: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31386: LD_INT 28
31388: PPUSH
31389: LD_OWVAR 2
31393: PPUSH
31394: LD_INT 2
31396: PPUSH
31397: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31401: LD_INT 30
31403: PPUSH
31404: LD_OWVAR 2
31408: PPUSH
31409: LD_INT 2
31411: PPUSH
31412: CALL_OW 322
// end ;
31416: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31417: LD_EXP 68
31421: PUSH
31422: LD_EXP 120
31426: AND
31427: IFFALSE 31548
31429: GO 31431
31431: DISABLE
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31436: LD_ADDR_VAR 0 2
31440: PUSH
31441: LD_INT 22
31443: PUSH
31444: LD_OWVAR 2
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 21
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 3
31465: PUSH
31466: LD_INT 23
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: LIST
31484: PPUSH
31485: CALL_OW 69
31489: ST_TO_ADDR
// if not tmp then
31490: LD_VAR 0 2
31494: NOT
31495: IFFALSE 31499
// exit ;
31497: GO 31548
// for i in tmp do
31499: LD_ADDR_VAR 0 1
31503: PUSH
31504: LD_VAR 0 2
31508: PUSH
31509: FOR_IN
31510: IFFALSE 31546
// begin if Crawls ( i ) then
31512: LD_VAR 0 1
31516: PPUSH
31517: CALL_OW 318
31521: IFFALSE 31532
// ComWalk ( i ) ;
31523: LD_VAR 0 1
31527: PPUSH
31528: CALL_OW 138
// SetClass ( i , 2 ) ;
31532: LD_VAR 0 1
31536: PPUSH
31537: LD_INT 2
31539: PPUSH
31540: CALL_OW 336
// end ;
31544: GO 31509
31546: POP
31547: POP
// end ;
31548: PPOPN 2
31550: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31551: LD_EXP 68
31555: PUSH
31556: LD_EXP 121
31560: AND
31561: IFFALSE 31849
31563: GO 31565
31565: DISABLE
31566: LD_INT 0
31568: PPUSH
31569: PPUSH
31570: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31571: LD_OWVAR 2
31575: PPUSH
31576: LD_INT 9
31578: PPUSH
31579: LD_INT 1
31581: PPUSH
31582: LD_INT 1
31584: PPUSH
31585: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31589: LD_INT 9
31591: PPUSH
31592: LD_OWVAR 2
31596: PPUSH
31597: CALL_OW 343
// uc_side := 9 ;
31601: LD_ADDR_OWVAR 20
31605: PUSH
31606: LD_INT 9
31608: ST_TO_ADDR
// uc_nation := 2 ;
31609: LD_ADDR_OWVAR 21
31613: PUSH
31614: LD_INT 2
31616: ST_TO_ADDR
// hc_name := Dark Warrior ;
31617: LD_ADDR_OWVAR 26
31621: PUSH
31622: LD_STRING Dark Warrior
31624: ST_TO_ADDR
// hc_gallery :=  ;
31625: LD_ADDR_OWVAR 33
31629: PUSH
31630: LD_STRING 
31632: ST_TO_ADDR
// hc_noskilllimit := true ;
31633: LD_ADDR_OWVAR 76
31637: PUSH
31638: LD_INT 1
31640: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31641: LD_ADDR_OWVAR 31
31645: PUSH
31646: LD_INT 30
31648: PUSH
31649: LD_INT 30
31651: PUSH
31652: LD_INT 30
31654: PUSH
31655: LD_INT 30
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: ST_TO_ADDR
// un := CreateHuman ;
31664: LD_ADDR_VAR 0 3
31668: PUSH
31669: CALL_OW 44
31673: ST_TO_ADDR
// hc_noskilllimit := false ;
31674: LD_ADDR_OWVAR 76
31678: PUSH
31679: LD_INT 0
31681: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31682: LD_VAR 0 3
31686: PPUSH
31687: LD_INT 1
31689: PPUSH
31690: CALL_OW 51
// ToLua ( playRanger() ) ;
31694: LD_STRING playRanger()
31696: PPUSH
31697: CALL_OW 559
// p := 0 ;
31701: LD_ADDR_VAR 0 2
31705: PUSH
31706: LD_INT 0
31708: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31709: LD_INT 35
31711: PPUSH
31712: CALL_OW 67
// p := p + 1 ;
31716: LD_ADDR_VAR 0 2
31720: PUSH
31721: LD_VAR 0 2
31725: PUSH
31726: LD_INT 1
31728: PLUS
31729: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31730: LD_VAR 0 3
31734: PPUSH
31735: CALL_OW 256
31739: PUSH
31740: LD_INT 1000
31742: LESS
31743: IFFALSE 31757
// SetLives ( un , 1000 ) ;
31745: LD_VAR 0 3
31749: PPUSH
31750: LD_INT 1000
31752: PPUSH
31753: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31757: LD_VAR 0 3
31761: PPUSH
31762: LD_INT 81
31764: PUSH
31765: LD_OWVAR 2
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 91
31776: PUSH
31777: LD_VAR 0 3
31781: PUSH
31782: LD_INT 30
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PPUSH
31794: CALL_OW 69
31798: PPUSH
31799: LD_VAR 0 3
31803: PPUSH
31804: CALL_OW 74
31808: PPUSH
31809: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31813: LD_VAR 0 2
31817: PUSH
31818: LD_INT 80
31820: GREATER
31821: PUSH
31822: LD_VAR 0 3
31826: PPUSH
31827: CALL_OW 301
31831: OR
31832: IFFALSE 31709
// if un then
31834: LD_VAR 0 3
31838: IFFALSE 31849
// RemoveUnit ( un ) ;
31840: LD_VAR 0 3
31844: PPUSH
31845: CALL_OW 64
// end ;
31849: PPOPN 3
31851: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31852: LD_EXP 122
31856: IFFALSE 31972
31858: GO 31860
31860: DISABLE
31861: LD_INT 0
31863: PPUSH
31864: PPUSH
31865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31866: LD_ADDR_VAR 0 2
31870: PUSH
31871: LD_INT 81
31873: PUSH
31874: LD_OWVAR 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 21
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PPUSH
31897: CALL_OW 69
31901: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31902: LD_STRING playComputer()
31904: PPUSH
31905: CALL_OW 559
// if not tmp then
31909: LD_VAR 0 2
31913: NOT
31914: IFFALSE 31918
// exit ;
31916: GO 31972
// for i in tmp do
31918: LD_ADDR_VAR 0 1
31922: PUSH
31923: LD_VAR 0 2
31927: PUSH
31928: FOR_IN
31929: IFFALSE 31970
// for j := 1 to 4 do
31931: LD_ADDR_VAR 0 3
31935: PUSH
31936: DOUBLE
31937: LD_INT 1
31939: DEC
31940: ST_TO_ADDR
31941: LD_INT 4
31943: PUSH
31944: FOR_TO
31945: IFFALSE 31966
// SetSkill ( i , j , 10 ) ;
31947: LD_VAR 0 1
31951: PPUSH
31952: LD_VAR 0 3
31956: PPUSH
31957: LD_INT 10
31959: PPUSH
31960: CALL_OW 237
31964: GO 31944
31966: POP
31967: POP
31968: GO 31928
31970: POP
31971: POP
// end ;
31972: PPOPN 3
31974: END
// every 0 0$1 trigger s30 do var i , tmp ;
31975: LD_EXP 123
31979: IFFALSE 32048
31981: GO 31983
31983: DISABLE
31984: LD_INT 0
31986: PPUSH
31987: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31988: LD_ADDR_VAR 0 2
31992: PUSH
31993: LD_INT 22
31995: PUSH
31996: LD_OWVAR 2
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PPUSH
32005: CALL_OW 69
32009: ST_TO_ADDR
// if not tmp then
32010: LD_VAR 0 2
32014: NOT
32015: IFFALSE 32019
// exit ;
32017: GO 32048
// for i in tmp do
32019: LD_ADDR_VAR 0 1
32023: PUSH
32024: LD_VAR 0 2
32028: PUSH
32029: FOR_IN
32030: IFFALSE 32046
// SetLives ( i , 300 ) ;
32032: LD_VAR 0 1
32036: PPUSH
32037: LD_INT 300
32039: PPUSH
32040: CALL_OW 234
32044: GO 32029
32046: POP
32047: POP
// end ;
32048: PPOPN 2
32050: END
// every 0 0$1 trigger s60 do var i , tmp ;
32051: LD_EXP 124
32055: IFFALSE 32124
32057: GO 32059
32059: DISABLE
32060: LD_INT 0
32062: PPUSH
32063: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_INT 22
32071: PUSH
32072: LD_OWVAR 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PPUSH
32081: CALL_OW 69
32085: ST_TO_ADDR
// if not tmp then
32086: LD_VAR 0 2
32090: NOT
32091: IFFALSE 32095
// exit ;
32093: GO 32124
// for i in tmp do
32095: LD_ADDR_VAR 0 1
32099: PUSH
32100: LD_VAR 0 2
32104: PUSH
32105: FOR_IN
32106: IFFALSE 32122
// SetLives ( i , 600 ) ;
32108: LD_VAR 0 1
32112: PPUSH
32113: LD_INT 600
32115: PPUSH
32116: CALL_OW 234
32120: GO 32105
32122: POP
32123: POP
// end ;
32124: PPOPN 2
32126: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32127: LD_INT 0
32129: PPUSH
// case cmd of 301 :
32130: LD_VAR 0 1
32134: PUSH
32135: LD_INT 301
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32175
32143: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32144: LD_VAR 0 6
32148: PPUSH
32149: LD_VAR 0 7
32153: PPUSH
32154: LD_VAR 0 8
32158: PPUSH
32159: LD_VAR 0 4
32163: PPUSH
32164: LD_VAR 0 5
32168: PPUSH
32169: CALL 33376 0 5
32173: GO 32296
32175: LD_INT 302
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32183
32181: GO 32220
32183: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32184: LD_VAR 0 6
32188: PPUSH
32189: LD_VAR 0 7
32193: PPUSH
32194: LD_VAR 0 8
32198: PPUSH
32199: LD_VAR 0 9
32203: PPUSH
32204: LD_VAR 0 4
32208: PPUSH
32209: LD_VAR 0 5
32213: PPUSH
32214: CALL 33467 0 6
32218: GO 32296
32220: LD_INT 303
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32265
32228: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32229: LD_VAR 0 6
32233: PPUSH
32234: LD_VAR 0 7
32238: PPUSH
32239: LD_VAR 0 8
32243: PPUSH
32244: LD_VAR 0 9
32248: PPUSH
32249: LD_VAR 0 4
32253: PPUSH
32254: LD_VAR 0 5
32258: PPUSH
32259: CALL 32301 0 6
32263: GO 32296
32265: LD_INT 304
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32295
32273: POP
// hHackTeleport ( unit , x , y ) ; end ;
32274: LD_VAR 0 2
32278: PPUSH
32279: LD_VAR 0 4
32283: PPUSH
32284: LD_VAR 0 5
32288: PPUSH
32289: CALL 34060 0 3
32293: GO 32296
32295: POP
// end ;
32296: LD_VAR 0 12
32300: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32301: LD_INT 0
32303: PPUSH
32304: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32305: LD_VAR 0 1
32309: PUSH
32310: LD_INT 1
32312: LESS
32313: PUSH
32314: LD_VAR 0 1
32318: PUSH
32319: LD_INT 3
32321: GREATER
32322: OR
32323: PUSH
32324: LD_VAR 0 5
32328: PPUSH
32329: LD_VAR 0 6
32333: PPUSH
32334: CALL_OW 428
32338: OR
32339: IFFALSE 32343
// exit ;
32341: GO 33063
// uc_side := your_side ;
32343: LD_ADDR_OWVAR 20
32347: PUSH
32348: LD_OWVAR 2
32352: ST_TO_ADDR
// uc_nation := nation ;
32353: LD_ADDR_OWVAR 21
32357: PUSH
32358: LD_VAR 0 1
32362: ST_TO_ADDR
// bc_level = 1 ;
32363: LD_ADDR_OWVAR 43
32367: PUSH
32368: LD_INT 1
32370: ST_TO_ADDR
// case btype of 1 :
32371: LD_VAR 0 2
32375: PUSH
32376: LD_INT 1
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32395
32384: POP
// bc_type := b_depot ; 2 :
32385: LD_ADDR_OWVAR 42
32389: PUSH
32390: LD_INT 0
32392: ST_TO_ADDR
32393: GO 33007
32395: LD_INT 2
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32414
32403: POP
// bc_type := b_warehouse ; 3 :
32404: LD_ADDR_OWVAR 42
32408: PUSH
32409: LD_INT 1
32411: ST_TO_ADDR
32412: GO 33007
32414: LD_INT 3
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32433
32422: POP
// bc_type := b_lab ; 4 .. 9 :
32423: LD_ADDR_OWVAR 42
32427: PUSH
32428: LD_INT 6
32430: ST_TO_ADDR
32431: GO 33007
32433: LD_INT 4
32435: DOUBLE
32436: GREATEREQUAL
32437: IFFALSE 32445
32439: LD_INT 9
32441: DOUBLE
32442: LESSEQUAL
32443: IFTRUE 32447
32445: GO 32499
32447: POP
// begin bc_type := b_lab_half ;
32448: LD_ADDR_OWVAR 42
32452: PUSH
32453: LD_INT 7
32455: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32456: LD_ADDR_OWVAR 44
32460: PUSH
32461: LD_INT 10
32463: PUSH
32464: LD_INT 11
32466: PUSH
32467: LD_INT 12
32469: PUSH
32470: LD_INT 15
32472: PUSH
32473: LD_INT 14
32475: PUSH
32476: LD_INT 13
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: PUSH
32487: LD_VAR 0 2
32491: PUSH
32492: LD_INT 3
32494: MINUS
32495: ARRAY
32496: ST_TO_ADDR
// end ; 10 .. 13 :
32497: GO 33007
32499: LD_INT 10
32501: DOUBLE
32502: GREATEREQUAL
32503: IFFALSE 32511
32505: LD_INT 13
32507: DOUBLE
32508: LESSEQUAL
32509: IFTRUE 32513
32511: GO 32590
32513: POP
// begin bc_type := b_lab_full ;
32514: LD_ADDR_OWVAR 42
32518: PUSH
32519: LD_INT 8
32521: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32522: LD_ADDR_OWVAR 44
32526: PUSH
32527: LD_INT 10
32529: PUSH
32530: LD_INT 12
32532: PUSH
32533: LD_INT 14
32535: PUSH
32536: LD_INT 13
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: PUSH
32545: LD_VAR 0 2
32549: PUSH
32550: LD_INT 9
32552: MINUS
32553: ARRAY
32554: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32555: LD_ADDR_OWVAR 45
32559: PUSH
32560: LD_INT 11
32562: PUSH
32563: LD_INT 15
32565: PUSH
32566: LD_INT 12
32568: PUSH
32569: LD_INT 15
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: PUSH
32578: LD_VAR 0 2
32582: PUSH
32583: LD_INT 9
32585: MINUS
32586: ARRAY
32587: ST_TO_ADDR
// end ; 14 :
32588: GO 33007
32590: LD_INT 14
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32609
32598: POP
// bc_type := b_workshop ; 15 :
32599: LD_ADDR_OWVAR 42
32603: PUSH
32604: LD_INT 2
32606: ST_TO_ADDR
32607: GO 33007
32609: LD_INT 15
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32628
32617: POP
// bc_type := b_factory ; 16 :
32618: LD_ADDR_OWVAR 42
32622: PUSH
32623: LD_INT 3
32625: ST_TO_ADDR
32626: GO 33007
32628: LD_INT 16
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32647
32636: POP
// bc_type := b_ext_gun ; 17 :
32637: LD_ADDR_OWVAR 42
32641: PUSH
32642: LD_INT 17
32644: ST_TO_ADDR
32645: GO 33007
32647: LD_INT 17
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32683
32655: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32656: LD_ADDR_OWVAR 42
32660: PUSH
32661: LD_INT 19
32663: PUSH
32664: LD_INT 23
32666: PUSH
32667: LD_INT 19
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: PUSH
32675: LD_VAR 0 1
32679: ARRAY
32680: ST_TO_ADDR
32681: GO 33007
32683: LD_INT 18
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32691
32689: GO 32702
32691: POP
// bc_type := b_ext_radar ; 19 :
32692: LD_ADDR_OWVAR 42
32696: PUSH
32697: LD_INT 20
32699: ST_TO_ADDR
32700: GO 33007
32702: LD_INT 19
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32710
32708: GO 32721
32710: POP
// bc_type := b_ext_radio ; 20 :
32711: LD_ADDR_OWVAR 42
32715: PUSH
32716: LD_INT 22
32718: ST_TO_ADDR
32719: GO 33007
32721: LD_INT 20
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 32740
32729: POP
// bc_type := b_ext_siberium ; 21 :
32730: LD_ADDR_OWVAR 42
32734: PUSH
32735: LD_INT 21
32737: ST_TO_ADDR
32738: GO 33007
32740: LD_INT 21
32742: DOUBLE
32743: EQUAL
32744: IFTRUE 32748
32746: GO 32759
32748: POP
// bc_type := b_ext_computer ; 22 :
32749: LD_ADDR_OWVAR 42
32753: PUSH
32754: LD_INT 24
32756: ST_TO_ADDR
32757: GO 33007
32759: LD_INT 22
32761: DOUBLE
32762: EQUAL
32763: IFTRUE 32767
32765: GO 32778
32767: POP
// bc_type := b_ext_track ; 23 :
32768: LD_ADDR_OWVAR 42
32772: PUSH
32773: LD_INT 16
32775: ST_TO_ADDR
32776: GO 33007
32778: LD_INT 23
32780: DOUBLE
32781: EQUAL
32782: IFTRUE 32786
32784: GO 32797
32786: POP
// bc_type := b_ext_laser ; 24 :
32787: LD_ADDR_OWVAR 42
32791: PUSH
32792: LD_INT 25
32794: ST_TO_ADDR
32795: GO 33007
32797: LD_INT 24
32799: DOUBLE
32800: EQUAL
32801: IFTRUE 32805
32803: GO 32816
32805: POP
// bc_type := b_control_tower ; 25 :
32806: LD_ADDR_OWVAR 42
32810: PUSH
32811: LD_INT 36
32813: ST_TO_ADDR
32814: GO 33007
32816: LD_INT 25
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32835
32824: POP
// bc_type := b_breastwork ; 26 :
32825: LD_ADDR_OWVAR 42
32829: PUSH
32830: LD_INT 31
32832: ST_TO_ADDR
32833: GO 33007
32835: LD_INT 26
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32854
32843: POP
// bc_type := b_bunker ; 27 :
32844: LD_ADDR_OWVAR 42
32848: PUSH
32849: LD_INT 32
32851: ST_TO_ADDR
32852: GO 33007
32854: LD_INT 27
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32873
32862: POP
// bc_type := b_turret ; 28 :
32863: LD_ADDR_OWVAR 42
32867: PUSH
32868: LD_INT 33
32870: ST_TO_ADDR
32871: GO 33007
32873: LD_INT 28
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32881
32879: GO 32892
32881: POP
// bc_type := b_armoury ; 29 :
32882: LD_ADDR_OWVAR 42
32886: PUSH
32887: LD_INT 4
32889: ST_TO_ADDR
32890: GO 33007
32892: LD_INT 29
32894: DOUBLE
32895: EQUAL
32896: IFTRUE 32900
32898: GO 32911
32900: POP
// bc_type := b_barracks ; 30 :
32901: LD_ADDR_OWVAR 42
32905: PUSH
32906: LD_INT 5
32908: ST_TO_ADDR
32909: GO 33007
32911: LD_INT 30
32913: DOUBLE
32914: EQUAL
32915: IFTRUE 32919
32917: GO 32930
32919: POP
// bc_type := b_solar_power ; 31 :
32920: LD_ADDR_OWVAR 42
32924: PUSH
32925: LD_INT 27
32927: ST_TO_ADDR
32928: GO 33007
32930: LD_INT 31
32932: DOUBLE
32933: EQUAL
32934: IFTRUE 32938
32936: GO 32949
32938: POP
// bc_type := b_oil_power ; 32 :
32939: LD_ADDR_OWVAR 42
32943: PUSH
32944: LD_INT 26
32946: ST_TO_ADDR
32947: GO 33007
32949: LD_INT 32
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32968
32957: POP
// bc_type := b_siberite_power ; 33 :
32958: LD_ADDR_OWVAR 42
32962: PUSH
32963: LD_INT 28
32965: ST_TO_ADDR
32966: GO 33007
32968: LD_INT 33
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 32987
32976: POP
// bc_type := b_oil_mine ; 34 :
32977: LD_ADDR_OWVAR 42
32981: PUSH
32982: LD_INT 29
32984: ST_TO_ADDR
32985: GO 33007
32987: LD_INT 34
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33006
32995: POP
// bc_type := b_siberite_mine ; end ;
32996: LD_ADDR_OWVAR 42
33000: PUSH
33001: LD_INT 30
33003: ST_TO_ADDR
33004: GO 33007
33006: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33007: LD_ADDR_VAR 0 8
33011: PUSH
33012: LD_VAR 0 5
33016: PPUSH
33017: LD_VAR 0 6
33021: PPUSH
33022: LD_VAR 0 3
33026: PPUSH
33027: CALL_OW 47
33031: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33032: LD_OWVAR 42
33036: PUSH
33037: LD_INT 32
33039: PUSH
33040: LD_INT 33
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: IN
33047: IFFALSE 33063
// PlaceWeaponTurret ( b , weapon ) ;
33049: LD_VAR 0 8
33053: PPUSH
33054: LD_VAR 0 4
33058: PPUSH
33059: CALL_OW 431
// end ;
33063: LD_VAR 0 7
33067: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33068: LD_INT 0
33070: PPUSH
33071: PPUSH
33072: PPUSH
33073: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33074: LD_ADDR_VAR 0 4
33078: PUSH
33079: LD_INT 22
33081: PUSH
33082: LD_OWVAR 2
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: LD_INT 30
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 30
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PPUSH
33123: CALL_OW 69
33127: ST_TO_ADDR
// if not tmp then
33128: LD_VAR 0 4
33132: NOT
33133: IFFALSE 33137
// exit ;
33135: GO 33196
// for i in tmp do
33137: LD_ADDR_VAR 0 2
33141: PUSH
33142: LD_VAR 0 4
33146: PUSH
33147: FOR_IN
33148: IFFALSE 33194
// for j = 1 to 3 do
33150: LD_ADDR_VAR 0 3
33154: PUSH
33155: DOUBLE
33156: LD_INT 1
33158: DEC
33159: ST_TO_ADDR
33160: LD_INT 3
33162: PUSH
33163: FOR_TO
33164: IFFALSE 33190
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33166: LD_VAR 0 2
33170: PPUSH
33171: CALL_OW 274
33175: PPUSH
33176: LD_VAR 0 3
33180: PPUSH
33181: LD_INT 99999
33183: PPUSH
33184: CALL_OW 277
33188: GO 33163
33190: POP
33191: POP
33192: GO 33147
33194: POP
33195: POP
// end ;
33196: LD_VAR 0 1
33200: RET
// export function hHackSetLevel10 ; var i , j ; begin
33201: LD_INT 0
33203: PPUSH
33204: PPUSH
33205: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33206: LD_ADDR_VAR 0 2
33210: PUSH
33211: LD_INT 21
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PPUSH
33221: CALL_OW 69
33225: PUSH
33226: FOR_IN
33227: IFFALSE 33279
// if IsSelected ( i ) then
33229: LD_VAR 0 2
33233: PPUSH
33234: CALL_OW 306
33238: IFFALSE 33277
// begin for j := 1 to 4 do
33240: LD_ADDR_VAR 0 3
33244: PUSH
33245: DOUBLE
33246: LD_INT 1
33248: DEC
33249: ST_TO_ADDR
33250: LD_INT 4
33252: PUSH
33253: FOR_TO
33254: IFFALSE 33275
// SetSkill ( i , j , 10 ) ;
33256: LD_VAR 0 2
33260: PPUSH
33261: LD_VAR 0 3
33265: PPUSH
33266: LD_INT 10
33268: PPUSH
33269: CALL_OW 237
33273: GO 33253
33275: POP
33276: POP
// end ;
33277: GO 33226
33279: POP
33280: POP
// end ;
33281: LD_VAR 0 1
33285: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33286: LD_INT 0
33288: PPUSH
33289: PPUSH
33290: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33291: LD_ADDR_VAR 0 2
33295: PUSH
33296: LD_INT 22
33298: PUSH
33299: LD_OWVAR 2
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 21
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PPUSH
33322: CALL_OW 69
33326: PUSH
33327: FOR_IN
33328: IFFALSE 33369
// begin for j := 1 to 4 do
33330: LD_ADDR_VAR 0 3
33334: PUSH
33335: DOUBLE
33336: LD_INT 1
33338: DEC
33339: ST_TO_ADDR
33340: LD_INT 4
33342: PUSH
33343: FOR_TO
33344: IFFALSE 33365
// SetSkill ( i , j , 10 ) ;
33346: LD_VAR 0 2
33350: PPUSH
33351: LD_VAR 0 3
33355: PPUSH
33356: LD_INT 10
33358: PPUSH
33359: CALL_OW 237
33363: GO 33343
33365: POP
33366: POP
// end ;
33367: GO 33327
33369: POP
33370: POP
// end ;
33371: LD_VAR 0 1
33375: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33376: LD_INT 0
33378: PPUSH
// uc_side := your_side ;
33379: LD_ADDR_OWVAR 20
33383: PUSH
33384: LD_OWVAR 2
33388: ST_TO_ADDR
// uc_nation := nation ;
33389: LD_ADDR_OWVAR 21
33393: PUSH
33394: LD_VAR 0 1
33398: ST_TO_ADDR
// InitHc ;
33399: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33403: LD_INT 0
33405: PPUSH
33406: LD_VAR 0 2
33410: PPUSH
33411: LD_VAR 0 3
33415: PPUSH
33416: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33420: LD_VAR 0 4
33424: PPUSH
33425: LD_VAR 0 5
33429: PPUSH
33430: CALL_OW 428
33434: PUSH
33435: LD_INT 0
33437: EQUAL
33438: IFFALSE 33462
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33440: CALL_OW 44
33444: PPUSH
33445: LD_VAR 0 4
33449: PPUSH
33450: LD_VAR 0 5
33454: PPUSH
33455: LD_INT 1
33457: PPUSH
33458: CALL_OW 48
// end ;
33462: LD_VAR 0 6
33466: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33467: LD_INT 0
33469: PPUSH
33470: PPUSH
// uc_side := your_side ;
33471: LD_ADDR_OWVAR 20
33475: PUSH
33476: LD_OWVAR 2
33480: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33481: LD_VAR 0 1
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 4
33497: PUSH
33498: LD_INT 5
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: IN
33508: IFFALSE 33520
// uc_nation := nation_american else
33510: LD_ADDR_OWVAR 21
33514: PUSH
33515: LD_INT 1
33517: ST_TO_ADDR
33518: GO 33563
// if chassis in [ 11 , 12 , 13 , 14 ] then
33520: LD_VAR 0 1
33524: PUSH
33525: LD_INT 11
33527: PUSH
33528: LD_INT 12
33530: PUSH
33531: LD_INT 13
33533: PUSH
33534: LD_INT 14
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: IN
33543: IFFALSE 33555
// uc_nation := nation_arabian else
33545: LD_ADDR_OWVAR 21
33549: PUSH
33550: LD_INT 2
33552: ST_TO_ADDR
33553: GO 33563
// uc_nation := nation_russian ;
33555: LD_ADDR_OWVAR 21
33559: PUSH
33560: LD_INT 3
33562: ST_TO_ADDR
// vc_chassis := chassis ;
33563: LD_ADDR_OWVAR 37
33567: PUSH
33568: LD_VAR 0 1
33572: ST_TO_ADDR
// vc_engine := engine ;
33573: LD_ADDR_OWVAR 39
33577: PUSH
33578: LD_VAR 0 2
33582: ST_TO_ADDR
// vc_control := control ;
33583: LD_ADDR_OWVAR 38
33587: PUSH
33588: LD_VAR 0 3
33592: ST_TO_ADDR
// vc_weapon := weapon ;
33593: LD_ADDR_OWVAR 40
33597: PUSH
33598: LD_VAR 0 4
33602: ST_TO_ADDR
// un := CreateVehicle ;
33603: LD_ADDR_VAR 0 8
33607: PUSH
33608: CALL_OW 45
33612: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33613: LD_VAR 0 8
33617: PPUSH
33618: LD_INT 0
33620: PPUSH
33621: LD_INT 5
33623: PPUSH
33624: CALL_OW 12
33628: PPUSH
33629: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33633: LD_VAR 0 8
33637: PPUSH
33638: LD_VAR 0 5
33642: PPUSH
33643: LD_VAR 0 6
33647: PPUSH
33648: LD_INT 1
33650: PPUSH
33651: CALL_OW 48
// end ;
33655: LD_VAR 0 7
33659: RET
// export hInvincible ; every 1 do
33660: GO 33662
33662: DISABLE
// hInvincible := [ ] ;
33663: LD_ADDR_EXP 125
33667: PUSH
33668: EMPTY
33669: ST_TO_ADDR
33670: END
// every 10 do var i ;
33671: GO 33673
33673: DISABLE
33674: LD_INT 0
33676: PPUSH
// begin enable ;
33677: ENABLE
// if not hInvincible then
33678: LD_EXP 125
33682: NOT
33683: IFFALSE 33687
// exit ;
33685: GO 33731
// for i in hInvincible do
33687: LD_ADDR_VAR 0 1
33691: PUSH
33692: LD_EXP 125
33696: PUSH
33697: FOR_IN
33698: IFFALSE 33729
// if GetLives ( i ) < 1000 then
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 256
33709: PUSH
33710: LD_INT 1000
33712: LESS
33713: IFFALSE 33727
// SetLives ( i , 1000 ) ;
33715: LD_VAR 0 1
33719: PPUSH
33720: LD_INT 1000
33722: PPUSH
33723: CALL_OW 234
33727: GO 33697
33729: POP
33730: POP
// end ;
33731: PPOPN 1
33733: END
// export function hHackInvincible ; var i ; begin
33734: LD_INT 0
33736: PPUSH
33737: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33738: LD_ADDR_VAR 0 2
33742: PUSH
33743: LD_INT 2
33745: PUSH
33746: LD_INT 21
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 21
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: LIST
33770: PPUSH
33771: CALL_OW 69
33775: PUSH
33776: FOR_IN
33777: IFFALSE 33838
// if IsSelected ( i ) then
33779: LD_VAR 0 2
33783: PPUSH
33784: CALL_OW 306
33788: IFFALSE 33836
// begin if i in hInvincible then
33790: LD_VAR 0 2
33794: PUSH
33795: LD_EXP 125
33799: IN
33800: IFFALSE 33820
// hInvincible := hInvincible diff i else
33802: LD_ADDR_EXP 125
33806: PUSH
33807: LD_EXP 125
33811: PUSH
33812: LD_VAR 0 2
33816: DIFF
33817: ST_TO_ADDR
33818: GO 33836
// hInvincible := hInvincible union i ;
33820: LD_ADDR_EXP 125
33824: PUSH
33825: LD_EXP 125
33829: PUSH
33830: LD_VAR 0 2
33834: UNION
33835: ST_TO_ADDR
// end ;
33836: GO 33776
33838: POP
33839: POP
// end ;
33840: LD_VAR 0 1
33844: RET
// export function hHackInvisible ; var i , j ; begin
33845: LD_INT 0
33847: PPUSH
33848: PPUSH
33849: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33850: LD_ADDR_VAR 0 2
33854: PUSH
33855: LD_INT 21
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PPUSH
33865: CALL_OW 69
33869: PUSH
33870: FOR_IN
33871: IFFALSE 33895
// if IsSelected ( i ) then
33873: LD_VAR 0 2
33877: PPUSH
33878: CALL_OW 306
33882: IFFALSE 33893
// ComForceInvisible ( i ) ;
33884: LD_VAR 0 2
33888: PPUSH
33889: CALL_OW 496
33893: GO 33870
33895: POP
33896: POP
// end ;
33897: LD_VAR 0 1
33901: RET
// export function hHackChangeYourSide ; begin
33902: LD_INT 0
33904: PPUSH
// if your_side = 8 then
33905: LD_OWVAR 2
33909: PUSH
33910: LD_INT 8
33912: EQUAL
33913: IFFALSE 33925
// your_side := 0 else
33915: LD_ADDR_OWVAR 2
33919: PUSH
33920: LD_INT 0
33922: ST_TO_ADDR
33923: GO 33939
// your_side := your_side + 1 ;
33925: LD_ADDR_OWVAR 2
33929: PUSH
33930: LD_OWVAR 2
33934: PUSH
33935: LD_INT 1
33937: PLUS
33938: ST_TO_ADDR
// end ;
33939: LD_VAR 0 1
33943: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33944: LD_INT 0
33946: PPUSH
33947: PPUSH
33948: PPUSH
// for i in all_units do
33949: LD_ADDR_VAR 0 2
33953: PUSH
33954: LD_OWVAR 3
33958: PUSH
33959: FOR_IN
33960: IFFALSE 34038
// if IsSelected ( i ) then
33962: LD_VAR 0 2
33966: PPUSH
33967: CALL_OW 306
33971: IFFALSE 34036
// begin j := GetSide ( i ) ;
33973: LD_ADDR_VAR 0 3
33977: PUSH
33978: LD_VAR 0 2
33982: PPUSH
33983: CALL_OW 255
33987: ST_TO_ADDR
// if j = 8 then
33988: LD_VAR 0 3
33992: PUSH
33993: LD_INT 8
33995: EQUAL
33996: IFFALSE 34008
// j := 0 else
33998: LD_ADDR_VAR 0 3
34002: PUSH
34003: LD_INT 0
34005: ST_TO_ADDR
34006: GO 34022
// j := j + 1 ;
34008: LD_ADDR_VAR 0 3
34012: PUSH
34013: LD_VAR 0 3
34017: PUSH
34018: LD_INT 1
34020: PLUS
34021: ST_TO_ADDR
// SetSide ( i , j ) ;
34022: LD_VAR 0 2
34026: PPUSH
34027: LD_VAR 0 3
34031: PPUSH
34032: CALL_OW 235
// end ;
34036: GO 33959
34038: POP
34039: POP
// end ;
34040: LD_VAR 0 1
34044: RET
// export function hHackFog ; begin
34045: LD_INT 0
34047: PPUSH
// FogOff ( true ) ;
34048: LD_INT 1
34050: PPUSH
34051: CALL_OW 344
// end ;
34055: LD_VAR 0 1
34059: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34060: LD_INT 0
34062: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34063: LD_VAR 0 1
34067: PPUSH
34068: LD_VAR 0 2
34072: PPUSH
34073: LD_VAR 0 3
34077: PPUSH
34078: LD_INT 1
34080: PPUSH
34081: LD_INT 1
34083: PPUSH
34084: CALL_OW 483
// CenterOnXY ( x , y ) ;
34088: LD_VAR 0 2
34092: PPUSH
34093: LD_VAR 0 3
34097: PPUSH
34098: CALL_OW 84
// end ; end_of_file
34102: LD_VAR 0 4
34106: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34107: LD_INT 0
34109: PPUSH
34110: PPUSH
34111: PPUSH
34112: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34113: LD_VAR 0 1
34117: PPUSH
34118: CALL_OW 264
34122: PUSH
34123: LD_EXP 52
34127: EQUAL
34128: IFFALSE 34200
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34130: LD_INT 68
34132: PPUSH
34133: LD_VAR 0 1
34137: PPUSH
34138: CALL_OW 255
34142: PPUSH
34143: CALL_OW 321
34147: PUSH
34148: LD_INT 2
34150: EQUAL
34151: IFFALSE 34163
// eff := 70 else
34153: LD_ADDR_VAR 0 4
34157: PUSH
34158: LD_INT 70
34160: ST_TO_ADDR
34161: GO 34171
// eff := 30 ;
34163: LD_ADDR_VAR 0 4
34167: PUSH
34168: LD_INT 30
34170: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34171: LD_VAR 0 1
34175: PPUSH
34176: CALL_OW 250
34180: PPUSH
34181: LD_VAR 0 1
34185: PPUSH
34186: CALL_OW 251
34190: PPUSH
34191: LD_VAR 0 4
34195: PPUSH
34196: CALL_OW 495
// end ; end ;
34200: LD_VAR 0 2
34204: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34205: LD_INT 0
34207: PPUSH
// end ;
34208: LD_VAR 0 4
34212: RET
// export function SOS_Command ( cmd ) ; begin
34213: LD_INT 0
34215: PPUSH
// end ;
34216: LD_VAR 0 2
34220: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34221: LD_INT 0
34223: PPUSH
// end ;
34224: LD_VAR 0 6
34228: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34229: LD_INT 0
34231: PPUSH
34232: PPUSH
// if not vehicle or not factory then
34233: LD_VAR 0 1
34237: NOT
34238: PUSH
34239: LD_VAR 0 2
34243: NOT
34244: OR
34245: IFFALSE 34249
// exit ;
34247: GO 34480
// if factoryWaypoints >= factory then
34249: LD_EXP 126
34253: PUSH
34254: LD_VAR 0 2
34258: GREATEREQUAL
34259: IFFALSE 34480
// if factoryWaypoints [ factory ] then
34261: LD_EXP 126
34265: PUSH
34266: LD_VAR 0 2
34270: ARRAY
34271: IFFALSE 34480
// begin if GetControl ( vehicle ) = control_manual then
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL_OW 263
34282: PUSH
34283: LD_INT 1
34285: EQUAL
34286: IFFALSE 34367
// begin driver := IsDrivenBy ( vehicle ) ;
34288: LD_ADDR_VAR 0 4
34292: PUSH
34293: LD_VAR 0 1
34297: PPUSH
34298: CALL_OW 311
34302: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34303: LD_VAR 0 4
34307: PPUSH
34308: LD_EXP 126
34312: PUSH
34313: LD_VAR 0 2
34317: ARRAY
34318: PUSH
34319: LD_INT 3
34321: ARRAY
34322: PPUSH
34323: LD_EXP 126
34327: PUSH
34328: LD_VAR 0 2
34332: ARRAY
34333: PUSH
34334: LD_INT 4
34336: ARRAY
34337: PPUSH
34338: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34342: LD_VAR 0 4
34346: PPUSH
34347: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34351: LD_VAR 0 4
34355: PPUSH
34356: LD_VAR 0 2
34360: PPUSH
34361: CALL_OW 180
// end else
34365: GO 34480
// if GetControl ( vehicle ) = control_remote then
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 263
34376: PUSH
34377: LD_INT 2
34379: EQUAL
34380: IFFALSE 34441
// begin wait ( 0 0$2 ) ;
34382: LD_INT 70
34384: PPUSH
34385: CALL_OW 67
// if Connect ( vehicle ) then
34389: LD_VAR 0 1
34393: PPUSH
34394: CALL 46704 0 1
34398: IFFALSE 34439
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34400: LD_VAR 0 1
34404: PPUSH
34405: LD_EXP 126
34409: PUSH
34410: LD_VAR 0 2
34414: ARRAY
34415: PUSH
34416: LD_INT 3
34418: ARRAY
34419: PPUSH
34420: LD_EXP 126
34424: PUSH
34425: LD_VAR 0 2
34429: ARRAY
34430: PUSH
34431: LD_INT 4
34433: ARRAY
34434: PPUSH
34435: CALL_OW 171
// end else
34439: GO 34480
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34441: LD_VAR 0 1
34445: PPUSH
34446: LD_EXP 126
34450: PUSH
34451: LD_VAR 0 2
34455: ARRAY
34456: PUSH
34457: LD_INT 3
34459: ARRAY
34460: PPUSH
34461: LD_EXP 126
34465: PUSH
34466: LD_VAR 0 2
34470: ARRAY
34471: PUSH
34472: LD_INT 4
34474: ARRAY
34475: PPUSH
34476: CALL_OW 171
// end ; end ;
34480: LD_VAR 0 3
34484: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34485: LD_INT 0
34487: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34488: LD_VAR 0 1
34492: PUSH
34493: LD_INT 250
34495: EQUAL
34496: PUSH
34497: LD_VAR 0 2
34501: PPUSH
34502: CALL_OW 264
34506: PUSH
34507: LD_EXP 55
34511: EQUAL
34512: AND
34513: IFFALSE 34534
// MinerPlaceMine ( unit , x , y ) ;
34515: LD_VAR 0 2
34519: PPUSH
34520: LD_VAR 0 4
34524: PPUSH
34525: LD_VAR 0 5
34529: PPUSH
34530: CALL 37262 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34534: LD_VAR 0 1
34538: PUSH
34539: LD_INT 251
34541: EQUAL
34542: PUSH
34543: LD_VAR 0 2
34547: PPUSH
34548: CALL_OW 264
34552: PUSH
34553: LD_EXP 55
34557: EQUAL
34558: AND
34559: IFFALSE 34580
// MinerDetonateMine ( unit , x , y ) ;
34561: LD_VAR 0 2
34565: PPUSH
34566: LD_VAR 0 4
34570: PPUSH
34571: LD_VAR 0 5
34575: PPUSH
34576: CALL 37539 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34580: LD_VAR 0 1
34584: PUSH
34585: LD_INT 252
34587: EQUAL
34588: PUSH
34589: LD_VAR 0 2
34593: PPUSH
34594: CALL_OW 264
34598: PUSH
34599: LD_EXP 55
34603: EQUAL
34604: AND
34605: IFFALSE 34626
// MinerCreateMinefield ( unit , x , y ) ;
34607: LD_VAR 0 2
34611: PPUSH
34612: LD_VAR 0 4
34616: PPUSH
34617: LD_VAR 0 5
34621: PPUSH
34622: CALL 37956 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34626: LD_VAR 0 1
34630: PUSH
34631: LD_INT 253
34633: EQUAL
34634: PUSH
34635: LD_VAR 0 2
34639: PPUSH
34640: CALL_OW 257
34644: PUSH
34645: LD_INT 5
34647: EQUAL
34648: AND
34649: IFFALSE 34670
// ComBinocular ( unit , x , y ) ;
34651: LD_VAR 0 2
34655: PPUSH
34656: LD_VAR 0 4
34660: PPUSH
34661: LD_VAR 0 5
34665: PPUSH
34666: CALL 38327 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34670: LD_VAR 0 1
34674: PUSH
34675: LD_INT 254
34677: EQUAL
34678: PUSH
34679: LD_VAR 0 2
34683: PPUSH
34684: CALL_OW 264
34688: PUSH
34689: LD_EXP 50
34693: EQUAL
34694: AND
34695: PUSH
34696: LD_VAR 0 3
34700: PPUSH
34701: CALL_OW 263
34705: PUSH
34706: LD_INT 3
34708: EQUAL
34709: AND
34710: IFFALSE 34726
// HackDestroyVehicle ( unit , selectedUnit ) ;
34712: LD_VAR 0 2
34716: PPUSH
34717: LD_VAR 0 3
34721: PPUSH
34722: CALL 36622 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34726: LD_VAR 0 1
34730: PUSH
34731: LD_INT 255
34733: EQUAL
34734: PUSH
34735: LD_VAR 0 2
34739: PPUSH
34740: CALL_OW 264
34744: PUSH
34745: LD_INT 14
34747: PUSH
34748: LD_INT 53
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: IN
34755: AND
34756: PUSH
34757: LD_VAR 0 4
34761: PPUSH
34762: LD_VAR 0 5
34766: PPUSH
34767: CALL_OW 488
34771: AND
34772: IFFALSE 34796
// CutTreeXYR ( unit , x , y , 12 ) ;
34774: LD_VAR 0 2
34778: PPUSH
34779: LD_VAR 0 4
34783: PPUSH
34784: LD_VAR 0 5
34788: PPUSH
34789: LD_INT 12
34791: PPUSH
34792: CALL 35188 0 4
// if cmd = 256 then
34796: LD_VAR 0 1
34800: PUSH
34801: LD_INT 256
34803: EQUAL
34804: IFFALSE 34825
// SetFactoryWaypoint ( unit , x , y ) ;
34806: LD_VAR 0 2
34810: PPUSH
34811: LD_VAR 0 4
34815: PPUSH
34816: LD_VAR 0 5
34820: PPUSH
34821: CALL 34830 0 3
// end ;
34825: LD_VAR 0 6
34829: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34834: LD_VAR 0 1
34838: NOT
34839: PUSH
34840: LD_VAR 0 2
34844: PPUSH
34845: LD_VAR 0 3
34849: PPUSH
34850: CALL_OW 488
34854: NOT
34855: OR
34856: PUSH
34857: LD_VAR 0 1
34861: PPUSH
34862: CALL_OW 266
34866: PUSH
34867: LD_INT 3
34869: NONEQUAL
34870: PUSH
34871: LD_VAR 0 1
34875: PPUSH
34876: CALL_OW 247
34880: PUSH
34881: LD_INT 1
34883: EQUAL
34884: NOT
34885: AND
34886: OR
34887: IFFALSE 34891
// exit ;
34889: GO 35040
// if GetType ( factory ) = unit_human then
34891: LD_VAR 0 1
34895: PPUSH
34896: CALL_OW 247
34900: PUSH
34901: LD_INT 1
34903: EQUAL
34904: IFFALSE 34921
// factory := IsInUnit ( factory ) ;
34906: LD_ADDR_VAR 0 1
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 310
34920: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34921: LD_VAR 0 1
34925: PPUSH
34926: CALL_OW 266
34930: PUSH
34931: LD_INT 3
34933: NONEQUAL
34934: IFFALSE 34938
// exit ;
34936: GO 35040
// if HexInfo ( x , y ) = factory then
34938: LD_VAR 0 2
34942: PPUSH
34943: LD_VAR 0 3
34947: PPUSH
34948: CALL_OW 428
34952: PUSH
34953: LD_VAR 0 1
34957: EQUAL
34958: IFFALSE 34985
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34960: LD_ADDR_EXP 126
34964: PUSH
34965: LD_EXP 126
34969: PPUSH
34970: LD_VAR 0 1
34974: PPUSH
34975: LD_INT 0
34977: PPUSH
34978: CALL_OW 1
34982: ST_TO_ADDR
34983: GO 35036
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34985: LD_ADDR_EXP 126
34989: PUSH
34990: LD_EXP 126
34994: PPUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: LD_VAR 0 1
35004: PPUSH
35005: CALL_OW 255
35009: PUSH
35010: LD_VAR 0 1
35014: PUSH
35015: LD_VAR 0 2
35019: PUSH
35020: LD_VAR 0 3
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: PPUSH
35031: CALL_OW 1
35035: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35036: CALL 35045 0 0
// end ;
35040: LD_VAR 0 4
35044: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35045: LD_INT 0
35047: PPUSH
35048: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35049: LD_STRING resetFactoryWaypoint();
35051: PPUSH
35052: CALL_OW 559
// if factoryWaypoints then
35056: LD_EXP 126
35060: IFFALSE 35183
// begin for i := 1 to factoryWaypoints do
35062: LD_ADDR_VAR 0 2
35066: PUSH
35067: DOUBLE
35068: LD_INT 1
35070: DEC
35071: ST_TO_ADDR
35072: LD_EXP 126
35076: PUSH
35077: FOR_TO
35078: IFFALSE 35181
// if factoryWaypoints [ i ] then
35080: LD_EXP 126
35084: PUSH
35085: LD_VAR 0 2
35089: ARRAY
35090: IFFALSE 35179
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35092: LD_STRING setFactoryWaypointXY(
35094: PUSH
35095: LD_EXP 126
35099: PUSH
35100: LD_VAR 0 2
35104: ARRAY
35105: PUSH
35106: LD_INT 1
35108: ARRAY
35109: STR
35110: PUSH
35111: LD_STRING ,
35113: STR
35114: PUSH
35115: LD_EXP 126
35119: PUSH
35120: LD_VAR 0 2
35124: ARRAY
35125: PUSH
35126: LD_INT 2
35128: ARRAY
35129: STR
35130: PUSH
35131: LD_STRING ,
35133: STR
35134: PUSH
35135: LD_EXP 126
35139: PUSH
35140: LD_VAR 0 2
35144: ARRAY
35145: PUSH
35146: LD_INT 3
35148: ARRAY
35149: STR
35150: PUSH
35151: LD_STRING ,
35153: STR
35154: PUSH
35155: LD_EXP 126
35159: PUSH
35160: LD_VAR 0 2
35164: ARRAY
35165: PUSH
35166: LD_INT 4
35168: ARRAY
35169: STR
35170: PUSH
35171: LD_STRING )
35173: STR
35174: PPUSH
35175: CALL_OW 559
35179: GO 35077
35181: POP
35182: POP
// end ; end ;
35183: LD_VAR 0 1
35187: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35188: LD_INT 0
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35199: LD_VAR 0 1
35203: NOT
35204: PUSH
35205: LD_VAR 0 2
35209: PPUSH
35210: LD_VAR 0 3
35214: PPUSH
35215: CALL_OW 488
35219: NOT
35220: OR
35221: PUSH
35222: LD_VAR 0 4
35226: NOT
35227: OR
35228: IFFALSE 35232
// exit ;
35230: GO 35572
// list := [ ] ;
35232: LD_ADDR_VAR 0 13
35236: PUSH
35237: EMPTY
35238: ST_TO_ADDR
// if x - r < 0 then
35239: LD_VAR 0 2
35243: PUSH
35244: LD_VAR 0 4
35248: MINUS
35249: PUSH
35250: LD_INT 0
35252: LESS
35253: IFFALSE 35265
// min_x := 0 else
35255: LD_ADDR_VAR 0 7
35259: PUSH
35260: LD_INT 0
35262: ST_TO_ADDR
35263: GO 35281
// min_x := x - r ;
35265: LD_ADDR_VAR 0 7
35269: PUSH
35270: LD_VAR 0 2
35274: PUSH
35275: LD_VAR 0 4
35279: MINUS
35280: ST_TO_ADDR
// if y - r < 0 then
35281: LD_VAR 0 3
35285: PUSH
35286: LD_VAR 0 4
35290: MINUS
35291: PUSH
35292: LD_INT 0
35294: LESS
35295: IFFALSE 35307
// min_y := 0 else
35297: LD_ADDR_VAR 0 8
35301: PUSH
35302: LD_INT 0
35304: ST_TO_ADDR
35305: GO 35323
// min_y := y - r ;
35307: LD_ADDR_VAR 0 8
35311: PUSH
35312: LD_VAR 0 3
35316: PUSH
35317: LD_VAR 0 4
35321: MINUS
35322: ST_TO_ADDR
// max_x := x + r ;
35323: LD_ADDR_VAR 0 9
35327: PUSH
35328: LD_VAR 0 2
35332: PUSH
35333: LD_VAR 0 4
35337: PLUS
35338: ST_TO_ADDR
// max_y := y + r ;
35339: LD_ADDR_VAR 0 10
35343: PUSH
35344: LD_VAR 0 3
35348: PUSH
35349: LD_VAR 0 4
35353: PLUS
35354: ST_TO_ADDR
// for _x = min_x to max_x do
35355: LD_ADDR_VAR 0 11
35359: PUSH
35360: DOUBLE
35361: LD_VAR 0 7
35365: DEC
35366: ST_TO_ADDR
35367: LD_VAR 0 9
35371: PUSH
35372: FOR_TO
35373: IFFALSE 35490
// for _y = min_y to max_y do
35375: LD_ADDR_VAR 0 12
35379: PUSH
35380: DOUBLE
35381: LD_VAR 0 8
35385: DEC
35386: ST_TO_ADDR
35387: LD_VAR 0 10
35391: PUSH
35392: FOR_TO
35393: IFFALSE 35486
// begin if not ValidHex ( _x , _y ) then
35395: LD_VAR 0 11
35399: PPUSH
35400: LD_VAR 0 12
35404: PPUSH
35405: CALL_OW 488
35409: NOT
35410: IFFALSE 35414
// continue ;
35412: GO 35392
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35414: LD_VAR 0 11
35418: PPUSH
35419: LD_VAR 0 12
35423: PPUSH
35424: CALL_OW 351
35428: PUSH
35429: LD_VAR 0 11
35433: PPUSH
35434: LD_VAR 0 12
35438: PPUSH
35439: CALL_OW 554
35443: AND
35444: IFFALSE 35484
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35446: LD_ADDR_VAR 0 13
35450: PUSH
35451: LD_VAR 0 13
35455: PPUSH
35456: LD_VAR 0 13
35460: PUSH
35461: LD_INT 1
35463: PLUS
35464: PPUSH
35465: LD_VAR 0 11
35469: PUSH
35470: LD_VAR 0 12
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PPUSH
35479: CALL_OW 2
35483: ST_TO_ADDR
// end ;
35484: GO 35392
35486: POP
35487: POP
35488: GO 35372
35490: POP
35491: POP
// if not list then
35492: LD_VAR 0 13
35496: NOT
35497: IFFALSE 35501
// exit ;
35499: GO 35572
// for i in list do
35501: LD_ADDR_VAR 0 6
35505: PUSH
35506: LD_VAR 0 13
35510: PUSH
35511: FOR_IN
35512: IFFALSE 35570
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35514: LD_VAR 0 1
35518: PPUSH
35519: LD_STRING M
35521: PUSH
35522: LD_VAR 0 6
35526: PUSH
35527: LD_INT 1
35529: ARRAY
35530: PUSH
35531: LD_VAR 0 6
35535: PUSH
35536: LD_INT 2
35538: ARRAY
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: PUSH
35561: EMPTY
35562: LIST
35563: PPUSH
35564: CALL_OW 447
35568: GO 35511
35570: POP
35571: POP
// end ;
35572: LD_VAR 0 5
35576: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35577: LD_EXP 127
35581: NOT
35582: IFFALSE 35632
35584: GO 35586
35586: DISABLE
// begin initHack := true ;
35587: LD_ADDR_EXP 127
35591: PUSH
35592: LD_INT 1
35594: ST_TO_ADDR
// hackTanks := [ ] ;
35595: LD_ADDR_EXP 128
35599: PUSH
35600: EMPTY
35601: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35602: LD_ADDR_EXP 129
35606: PUSH
35607: EMPTY
35608: ST_TO_ADDR
// hackLimit := 3 ;
35609: LD_ADDR_EXP 130
35613: PUSH
35614: LD_INT 3
35616: ST_TO_ADDR
// hackDist := 12 ;
35617: LD_ADDR_EXP 131
35621: PUSH
35622: LD_INT 12
35624: ST_TO_ADDR
// hackCounter := [ ] ;
35625: LD_ADDR_EXP 132
35629: PUSH
35630: EMPTY
35631: ST_TO_ADDR
// end ;
35632: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35633: LD_EXP 127
35637: PUSH
35638: LD_INT 34
35640: PUSH
35641: LD_EXP 50
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PPUSH
35650: CALL_OW 69
35654: AND
35655: IFFALSE 35910
35657: GO 35659
35659: DISABLE
35660: LD_INT 0
35662: PPUSH
35663: PPUSH
// begin enable ;
35664: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35665: LD_ADDR_VAR 0 1
35669: PUSH
35670: LD_INT 34
35672: PUSH
35673: LD_EXP 50
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PPUSH
35682: CALL_OW 69
35686: PUSH
35687: FOR_IN
35688: IFFALSE 35908
// begin if not i in hackTanks then
35690: LD_VAR 0 1
35694: PUSH
35695: LD_EXP 128
35699: IN
35700: NOT
35701: IFFALSE 35784
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35703: LD_ADDR_EXP 128
35707: PUSH
35708: LD_EXP 128
35712: PPUSH
35713: LD_EXP 128
35717: PUSH
35718: LD_INT 1
35720: PLUS
35721: PPUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 1
35731: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35732: LD_ADDR_EXP 129
35736: PUSH
35737: LD_EXP 129
35741: PPUSH
35742: LD_EXP 129
35746: PUSH
35747: LD_INT 1
35749: PLUS
35750: PPUSH
35751: EMPTY
35752: PPUSH
35753: CALL_OW 1
35757: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35758: LD_ADDR_EXP 132
35762: PUSH
35763: LD_EXP 132
35767: PPUSH
35768: LD_EXP 132
35772: PUSH
35773: LD_INT 1
35775: PLUS
35776: PPUSH
35777: EMPTY
35778: PPUSH
35779: CALL_OW 1
35783: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35784: LD_VAR 0 1
35788: PPUSH
35789: CALL_OW 302
35793: NOT
35794: IFFALSE 35807
// begin HackUnlinkAll ( i ) ;
35796: LD_VAR 0 1
35800: PPUSH
35801: CALL 35913 0 1
// continue ;
35805: GO 35687
// end ; HackCheckCapturedStatus ( i ) ;
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL 36356 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35816: LD_ADDR_VAR 0 2
35820: PUSH
35821: LD_INT 81
35823: PUSH
35824: LD_VAR 0 1
35828: PPUSH
35829: CALL_OW 255
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 33
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 91
35850: PUSH
35851: LD_VAR 0 1
35855: PUSH
35856: LD_EXP 131
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 50
35868: PUSH
35869: EMPTY
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL_OW 69
35882: ST_TO_ADDR
// if not tmp then
35883: LD_VAR 0 2
35887: NOT
35888: IFFALSE 35892
// continue ;
35890: GO 35687
// HackLink ( i , tmp ) ;
35892: LD_VAR 0 1
35896: PPUSH
35897: LD_VAR 0 2
35901: PPUSH
35902: CALL 36049 0 2
// end ;
35906: GO 35687
35908: POP
35909: POP
// end ;
35910: PPOPN 2
35912: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35913: LD_INT 0
35915: PPUSH
35916: PPUSH
35917: PPUSH
// if not hack in hackTanks then
35918: LD_VAR 0 1
35922: PUSH
35923: LD_EXP 128
35927: IN
35928: NOT
35929: IFFALSE 35933
// exit ;
35931: GO 36044
// index := GetElementIndex ( hackTanks , hack ) ;
35933: LD_ADDR_VAR 0 4
35937: PUSH
35938: LD_EXP 128
35942: PPUSH
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL 43518 0 2
35952: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35953: LD_EXP 129
35957: PUSH
35958: LD_VAR 0 4
35962: ARRAY
35963: IFFALSE 36044
// begin for i in hackTanksCaptured [ index ] do
35965: LD_ADDR_VAR 0 3
35969: PUSH
35970: LD_EXP 129
35974: PUSH
35975: LD_VAR 0 4
35979: ARRAY
35980: PUSH
35981: FOR_IN
35982: IFFALSE 36008
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35984: LD_VAR 0 3
35988: PUSH
35989: LD_INT 1
35991: ARRAY
35992: PPUSH
35993: LD_VAR 0 3
35997: PUSH
35998: LD_INT 2
36000: ARRAY
36001: PPUSH
36002: CALL_OW 235
36006: GO 35981
36008: POP
36009: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36010: LD_ADDR_EXP 129
36014: PUSH
36015: LD_EXP 129
36019: PPUSH
36020: LD_VAR 0 4
36024: PPUSH
36025: EMPTY
36026: PPUSH
36027: CALL_OW 1
36031: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36032: LD_VAR 0 1
36036: PPUSH
36037: LD_INT 0
36039: PPUSH
36040: CALL_OW 505
// end ; end ;
36044: LD_VAR 0 2
36048: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36049: LD_INT 0
36051: PPUSH
36052: PPUSH
36053: PPUSH
// if not hack in hackTanks or not vehicles then
36054: LD_VAR 0 1
36058: PUSH
36059: LD_EXP 128
36063: IN
36064: NOT
36065: PUSH
36066: LD_VAR 0 2
36070: NOT
36071: OR
36072: IFFALSE 36076
// exit ;
36074: GO 36351
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36076: LD_ADDR_VAR 0 2
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: LD_VAR 0 2
36090: PPUSH
36091: LD_INT 1
36093: PPUSH
36094: LD_INT 1
36096: PPUSH
36097: CALL 44168 0 4
36101: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36102: LD_ADDR_VAR 0 5
36106: PUSH
36107: LD_EXP 128
36111: PPUSH
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL 43518 0 2
36121: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36122: LD_EXP 129
36126: PUSH
36127: LD_VAR 0 5
36131: ARRAY
36132: PUSH
36133: LD_EXP 130
36137: LESS
36138: IFFALSE 36327
// begin for i := 1 to vehicles do
36140: LD_ADDR_VAR 0 4
36144: PUSH
36145: DOUBLE
36146: LD_INT 1
36148: DEC
36149: ST_TO_ADDR
36150: LD_VAR 0 2
36154: PUSH
36155: FOR_TO
36156: IFFALSE 36325
// begin if hackTanksCaptured [ index ] = hackLimit then
36158: LD_EXP 129
36162: PUSH
36163: LD_VAR 0 5
36167: ARRAY
36168: PUSH
36169: LD_EXP 130
36173: EQUAL
36174: IFFALSE 36178
// break ;
36176: GO 36325
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36178: LD_ADDR_EXP 132
36182: PUSH
36183: LD_EXP 132
36187: PPUSH
36188: LD_VAR 0 5
36192: PPUSH
36193: LD_EXP 132
36197: PUSH
36198: LD_VAR 0 5
36202: ARRAY
36203: PUSH
36204: LD_INT 1
36206: PLUS
36207: PPUSH
36208: CALL_OW 1
36212: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36213: LD_ADDR_EXP 129
36217: PUSH
36218: LD_EXP 129
36222: PPUSH
36223: LD_VAR 0 5
36227: PUSH
36228: LD_EXP 129
36232: PUSH
36233: LD_VAR 0 5
36237: ARRAY
36238: PUSH
36239: LD_INT 1
36241: PLUS
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PPUSH
36247: LD_VAR 0 2
36251: PUSH
36252: LD_VAR 0 4
36256: ARRAY
36257: PUSH
36258: LD_VAR 0 2
36262: PUSH
36263: LD_VAR 0 4
36267: ARRAY
36268: PPUSH
36269: CALL_OW 255
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PPUSH
36278: CALL 43733 0 3
36282: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36283: LD_VAR 0 2
36287: PUSH
36288: LD_VAR 0 4
36292: ARRAY
36293: PPUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: CALL_OW 255
36303: PPUSH
36304: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36308: LD_VAR 0 2
36312: PUSH
36313: LD_VAR 0 4
36317: ARRAY
36318: PPUSH
36319: CALL_OW 141
// end ;
36323: GO 36155
36325: POP
36326: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36327: LD_VAR 0 1
36331: PPUSH
36332: LD_EXP 129
36336: PUSH
36337: LD_VAR 0 5
36341: ARRAY
36342: PUSH
36343: LD_INT 0
36345: PLUS
36346: PPUSH
36347: CALL_OW 505
// end ;
36351: LD_VAR 0 3
36355: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36356: LD_INT 0
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
// if not hack in hackTanks then
36362: LD_VAR 0 1
36366: PUSH
36367: LD_EXP 128
36371: IN
36372: NOT
36373: IFFALSE 36377
// exit ;
36375: GO 36617
// index := GetElementIndex ( hackTanks , hack ) ;
36377: LD_ADDR_VAR 0 4
36381: PUSH
36382: LD_EXP 128
36386: PPUSH
36387: LD_VAR 0 1
36391: PPUSH
36392: CALL 43518 0 2
36396: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: DOUBLE
36403: LD_EXP 129
36407: PUSH
36408: LD_VAR 0 4
36412: ARRAY
36413: INC
36414: ST_TO_ADDR
36415: LD_INT 1
36417: PUSH
36418: FOR_DOWNTO
36419: IFFALSE 36591
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36421: LD_ADDR_VAR 0 5
36425: PUSH
36426: LD_EXP 129
36430: PUSH
36431: LD_VAR 0 4
36435: ARRAY
36436: PUSH
36437: LD_VAR 0 3
36441: ARRAY
36442: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36443: LD_VAR 0 5
36447: PUSH
36448: LD_INT 1
36450: ARRAY
36451: PPUSH
36452: CALL_OW 302
36456: NOT
36457: PUSH
36458: LD_VAR 0 5
36462: PUSH
36463: LD_INT 1
36465: ARRAY
36466: PPUSH
36467: CALL_OW 255
36471: PUSH
36472: LD_VAR 0 1
36476: PPUSH
36477: CALL_OW 255
36481: NONEQUAL
36482: OR
36483: IFFALSE 36589
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36485: LD_VAR 0 5
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: PPUSH
36494: CALL_OW 305
36498: PUSH
36499: LD_VAR 0 5
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: PPUSH
36508: CALL_OW 255
36512: PUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: CALL_OW 255
36522: EQUAL
36523: AND
36524: IFFALSE 36548
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36526: LD_VAR 0 5
36530: PUSH
36531: LD_INT 1
36533: ARRAY
36534: PPUSH
36535: LD_VAR 0 5
36539: PUSH
36540: LD_INT 2
36542: ARRAY
36543: PPUSH
36544: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36548: LD_ADDR_EXP 129
36552: PUSH
36553: LD_EXP 129
36557: PPUSH
36558: LD_VAR 0 4
36562: PPUSH
36563: LD_EXP 129
36567: PUSH
36568: LD_VAR 0 4
36572: ARRAY
36573: PPUSH
36574: LD_VAR 0 3
36578: PPUSH
36579: CALL_OW 3
36583: PPUSH
36584: CALL_OW 1
36588: ST_TO_ADDR
// end ; end ;
36589: GO 36418
36591: POP
36592: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36593: LD_VAR 0 1
36597: PPUSH
36598: LD_EXP 129
36602: PUSH
36603: LD_VAR 0 4
36607: ARRAY
36608: PUSH
36609: LD_INT 0
36611: PLUS
36612: PPUSH
36613: CALL_OW 505
// end ;
36617: LD_VAR 0 2
36621: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36622: LD_INT 0
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
// if not hack in hackTanks then
36628: LD_VAR 0 1
36632: PUSH
36633: LD_EXP 128
36637: IN
36638: NOT
36639: IFFALSE 36643
// exit ;
36641: GO 36728
// index := GetElementIndex ( hackTanks , hack ) ;
36643: LD_ADDR_VAR 0 5
36647: PUSH
36648: LD_EXP 128
36652: PPUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: CALL 43518 0 2
36662: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36663: LD_ADDR_VAR 0 4
36667: PUSH
36668: DOUBLE
36669: LD_INT 1
36671: DEC
36672: ST_TO_ADDR
36673: LD_EXP 129
36677: PUSH
36678: LD_VAR 0 5
36682: ARRAY
36683: PUSH
36684: FOR_TO
36685: IFFALSE 36726
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36687: LD_EXP 129
36691: PUSH
36692: LD_VAR 0 5
36696: ARRAY
36697: PUSH
36698: LD_VAR 0 4
36702: ARRAY
36703: PUSH
36704: LD_INT 1
36706: ARRAY
36707: PUSH
36708: LD_VAR 0 2
36712: EQUAL
36713: IFFALSE 36724
// KillUnit ( vehicle ) ;
36715: LD_VAR 0 2
36719: PPUSH
36720: CALL_OW 66
36724: GO 36684
36726: POP
36727: POP
// end ;
36728: LD_VAR 0 3
36732: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36733: LD_EXP 133
36737: NOT
36738: IFFALSE 36773
36740: GO 36742
36742: DISABLE
// begin initMiner := true ;
36743: LD_ADDR_EXP 133
36747: PUSH
36748: LD_INT 1
36750: ST_TO_ADDR
// minersList := [ ] ;
36751: LD_ADDR_EXP 134
36755: PUSH
36756: EMPTY
36757: ST_TO_ADDR
// minerMinesList := [ ] ;
36758: LD_ADDR_EXP 135
36762: PUSH
36763: EMPTY
36764: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36765: LD_ADDR_EXP 136
36769: PUSH
36770: LD_INT 5
36772: ST_TO_ADDR
// end ;
36773: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36774: LD_EXP 133
36778: PUSH
36779: LD_INT 34
36781: PUSH
36782: LD_EXP 55
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PPUSH
36791: CALL_OW 69
36795: AND
36796: IFFALSE 37259
36798: GO 36800
36800: DISABLE
36801: LD_INT 0
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
// begin enable ;
36807: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36808: LD_ADDR_VAR 0 1
36812: PUSH
36813: LD_INT 34
36815: PUSH
36816: LD_EXP 55
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PPUSH
36825: CALL_OW 69
36829: PUSH
36830: FOR_IN
36831: IFFALSE 36903
// begin if not i in minersList then
36833: LD_VAR 0 1
36837: PUSH
36838: LD_EXP 134
36842: IN
36843: NOT
36844: IFFALSE 36901
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36846: LD_ADDR_EXP 134
36850: PUSH
36851: LD_EXP 134
36855: PPUSH
36856: LD_EXP 134
36860: PUSH
36861: LD_INT 1
36863: PLUS
36864: PPUSH
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 1
36874: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36875: LD_ADDR_EXP 135
36879: PUSH
36880: LD_EXP 135
36884: PPUSH
36885: LD_EXP 135
36889: PUSH
36890: LD_INT 1
36892: PLUS
36893: PPUSH
36894: EMPTY
36895: PPUSH
36896: CALL_OW 1
36900: ST_TO_ADDR
// end end ;
36901: GO 36830
36903: POP
36904: POP
// for i := minerMinesList downto 1 do
36905: LD_ADDR_VAR 0 1
36909: PUSH
36910: DOUBLE
36911: LD_EXP 135
36915: INC
36916: ST_TO_ADDR
36917: LD_INT 1
36919: PUSH
36920: FOR_DOWNTO
36921: IFFALSE 37257
// begin if IsLive ( minersList [ i ] ) then
36923: LD_EXP 134
36927: PUSH
36928: LD_VAR 0 1
36932: ARRAY
36933: PPUSH
36934: CALL_OW 300
36938: IFFALSE 36966
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36940: LD_EXP 134
36944: PUSH
36945: LD_VAR 0 1
36949: ARRAY
36950: PPUSH
36951: LD_EXP 135
36955: PUSH
36956: LD_VAR 0 1
36960: ARRAY
36961: PPUSH
36962: CALL_OW 505
// if not minerMinesList [ i ] then
36966: LD_EXP 135
36970: PUSH
36971: LD_VAR 0 1
36975: ARRAY
36976: NOT
36977: IFFALSE 36981
// continue ;
36979: GO 36920
// for j := minerMinesList [ i ] downto 1 do
36981: LD_ADDR_VAR 0 2
36985: PUSH
36986: DOUBLE
36987: LD_EXP 135
36991: PUSH
36992: LD_VAR 0 1
36996: ARRAY
36997: INC
36998: ST_TO_ADDR
36999: LD_INT 1
37001: PUSH
37002: FOR_DOWNTO
37003: IFFALSE 37253
// begin side := GetSide ( minersList [ i ] ) ;
37005: LD_ADDR_VAR 0 3
37009: PUSH
37010: LD_EXP 134
37014: PUSH
37015: LD_VAR 0 1
37019: ARRAY
37020: PPUSH
37021: CALL_OW 255
37025: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37026: LD_ADDR_VAR 0 4
37030: PUSH
37031: LD_EXP 135
37035: PUSH
37036: LD_VAR 0 1
37040: ARRAY
37041: PUSH
37042: LD_VAR 0 2
37046: ARRAY
37047: PUSH
37048: LD_INT 1
37050: ARRAY
37051: PPUSH
37052: LD_EXP 135
37056: PUSH
37057: LD_VAR 0 1
37061: ARRAY
37062: PUSH
37063: LD_VAR 0 2
37067: ARRAY
37068: PUSH
37069: LD_INT 2
37071: ARRAY
37072: PPUSH
37073: CALL_OW 428
37077: ST_TO_ADDR
// if not tmp then
37078: LD_VAR 0 4
37082: NOT
37083: IFFALSE 37087
// continue ;
37085: GO 37002
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37087: LD_VAR 0 4
37091: PUSH
37092: LD_INT 81
37094: PUSH
37095: LD_VAR 0 3
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PPUSH
37104: CALL_OW 69
37108: IN
37109: PUSH
37110: LD_EXP 135
37114: PUSH
37115: LD_VAR 0 1
37119: ARRAY
37120: PUSH
37121: LD_VAR 0 2
37125: ARRAY
37126: PUSH
37127: LD_INT 1
37129: ARRAY
37130: PPUSH
37131: LD_EXP 135
37135: PUSH
37136: LD_VAR 0 1
37140: ARRAY
37141: PUSH
37142: LD_VAR 0 2
37146: ARRAY
37147: PUSH
37148: LD_INT 2
37150: ARRAY
37151: PPUSH
37152: CALL_OW 458
37156: AND
37157: IFFALSE 37251
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37159: LD_EXP 135
37163: PUSH
37164: LD_VAR 0 1
37168: ARRAY
37169: PUSH
37170: LD_VAR 0 2
37174: ARRAY
37175: PUSH
37176: LD_INT 1
37178: ARRAY
37179: PPUSH
37180: LD_EXP 135
37184: PUSH
37185: LD_VAR 0 1
37189: ARRAY
37190: PUSH
37191: LD_VAR 0 2
37195: ARRAY
37196: PUSH
37197: LD_INT 2
37199: ARRAY
37200: PPUSH
37201: LD_VAR 0 3
37205: PPUSH
37206: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37210: LD_ADDR_EXP 135
37214: PUSH
37215: LD_EXP 135
37219: PPUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: LD_EXP 135
37229: PUSH
37230: LD_VAR 0 1
37234: ARRAY
37235: PPUSH
37236: LD_VAR 0 2
37240: PPUSH
37241: CALL_OW 3
37245: PPUSH
37246: CALL_OW 1
37250: ST_TO_ADDR
// end ; end ;
37251: GO 37002
37253: POP
37254: POP
// end ;
37255: GO 36920
37257: POP
37258: POP
// end ;
37259: PPOPN 4
37261: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37262: LD_INT 0
37264: PPUSH
37265: PPUSH
// result := false ;
37266: LD_ADDR_VAR 0 4
37270: PUSH
37271: LD_INT 0
37273: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37274: LD_VAR 0 1
37278: PPUSH
37279: CALL_OW 264
37283: PUSH
37284: LD_EXP 55
37288: EQUAL
37289: NOT
37290: IFFALSE 37294
// exit ;
37292: GO 37534
// index := GetElementIndex ( minersList , unit ) ;
37294: LD_ADDR_VAR 0 5
37298: PUSH
37299: LD_EXP 134
37303: PPUSH
37304: LD_VAR 0 1
37308: PPUSH
37309: CALL 43518 0 2
37313: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37314: LD_EXP 135
37318: PUSH
37319: LD_VAR 0 5
37323: ARRAY
37324: PUSH
37325: LD_EXP 136
37329: GREATEREQUAL
37330: IFFALSE 37334
// exit ;
37332: GO 37534
// ComMoveXY ( unit , x , y ) ;
37334: LD_VAR 0 1
37338: PPUSH
37339: LD_VAR 0 2
37343: PPUSH
37344: LD_VAR 0 3
37348: PPUSH
37349: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37353: LD_INT 35
37355: PPUSH
37356: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37360: LD_VAR 0 1
37364: PPUSH
37365: LD_VAR 0 2
37369: PPUSH
37370: LD_VAR 0 3
37374: PPUSH
37375: CALL 74237 0 3
37379: NOT
37380: PUSH
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 314
37390: AND
37391: IFFALSE 37395
// exit ;
37393: GO 37534
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37395: LD_VAR 0 2
37399: PPUSH
37400: LD_VAR 0 3
37404: PPUSH
37405: CALL_OW 428
37409: PUSH
37410: LD_VAR 0 1
37414: EQUAL
37415: PUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: CALL_OW 314
37425: NOT
37426: AND
37427: IFFALSE 37353
// PlaySoundXY ( x , y , PlantMine ) ;
37429: LD_VAR 0 2
37433: PPUSH
37434: LD_VAR 0 3
37438: PPUSH
37439: LD_STRING PlantMine
37441: PPUSH
37442: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37446: LD_VAR 0 2
37450: PPUSH
37451: LD_VAR 0 3
37455: PPUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL_OW 255
37465: PPUSH
37466: LD_INT 0
37468: PPUSH
37469: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37473: LD_ADDR_EXP 135
37477: PUSH
37478: LD_EXP 135
37482: PPUSH
37483: LD_VAR 0 5
37487: PUSH
37488: LD_EXP 135
37492: PUSH
37493: LD_VAR 0 5
37497: ARRAY
37498: PUSH
37499: LD_INT 1
37501: PLUS
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PPUSH
37507: LD_VAR 0 2
37511: PUSH
37512: LD_VAR 0 3
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PPUSH
37521: CALL 43733 0 3
37525: ST_TO_ADDR
// result := true ;
37526: LD_ADDR_VAR 0 4
37530: PUSH
37531: LD_INT 1
37533: ST_TO_ADDR
// end ;
37534: LD_VAR 0 4
37538: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37539: LD_INT 0
37541: PPUSH
37542: PPUSH
37543: PPUSH
// if not unit in minersList then
37544: LD_VAR 0 1
37548: PUSH
37549: LD_EXP 134
37553: IN
37554: NOT
37555: IFFALSE 37559
// exit ;
37557: GO 37951
// index := GetElementIndex ( minersList , unit ) ;
37559: LD_ADDR_VAR 0 6
37563: PUSH
37564: LD_EXP 134
37568: PPUSH
37569: LD_VAR 0 1
37573: PPUSH
37574: CALL 43518 0 2
37578: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37579: LD_ADDR_VAR 0 5
37583: PUSH
37584: DOUBLE
37585: LD_EXP 135
37589: PUSH
37590: LD_VAR 0 6
37594: ARRAY
37595: INC
37596: ST_TO_ADDR
37597: LD_INT 1
37599: PUSH
37600: FOR_DOWNTO
37601: IFFALSE 37762
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37603: LD_EXP 135
37607: PUSH
37608: LD_VAR 0 6
37612: ARRAY
37613: PUSH
37614: LD_VAR 0 5
37618: ARRAY
37619: PUSH
37620: LD_INT 1
37622: ARRAY
37623: PUSH
37624: LD_VAR 0 2
37628: EQUAL
37629: PUSH
37630: LD_EXP 135
37634: PUSH
37635: LD_VAR 0 6
37639: ARRAY
37640: PUSH
37641: LD_VAR 0 5
37645: ARRAY
37646: PUSH
37647: LD_INT 2
37649: ARRAY
37650: PUSH
37651: LD_VAR 0 3
37655: EQUAL
37656: AND
37657: IFFALSE 37760
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37659: LD_EXP 135
37663: PUSH
37664: LD_VAR 0 6
37668: ARRAY
37669: PUSH
37670: LD_VAR 0 5
37674: ARRAY
37675: PUSH
37676: LD_INT 1
37678: ARRAY
37679: PPUSH
37680: LD_EXP 135
37684: PUSH
37685: LD_VAR 0 6
37689: ARRAY
37690: PUSH
37691: LD_VAR 0 5
37695: ARRAY
37696: PUSH
37697: LD_INT 2
37699: ARRAY
37700: PPUSH
37701: LD_VAR 0 1
37705: PPUSH
37706: CALL_OW 255
37710: PPUSH
37711: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37715: LD_ADDR_EXP 135
37719: PUSH
37720: LD_EXP 135
37724: PPUSH
37725: LD_VAR 0 6
37729: PPUSH
37730: LD_EXP 135
37734: PUSH
37735: LD_VAR 0 6
37739: ARRAY
37740: PPUSH
37741: LD_VAR 0 5
37745: PPUSH
37746: CALL_OW 3
37750: PPUSH
37751: CALL_OW 1
37755: ST_TO_ADDR
// exit ;
37756: POP
37757: POP
37758: GO 37951
// end ; end ;
37760: GO 37600
37762: POP
37763: POP
// for i := minerMinesList [ index ] downto 1 do
37764: LD_ADDR_VAR 0 5
37768: PUSH
37769: DOUBLE
37770: LD_EXP 135
37774: PUSH
37775: LD_VAR 0 6
37779: ARRAY
37780: INC
37781: ST_TO_ADDR
37782: LD_INT 1
37784: PUSH
37785: FOR_DOWNTO
37786: IFFALSE 37949
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37788: LD_EXP 135
37792: PUSH
37793: LD_VAR 0 6
37797: ARRAY
37798: PUSH
37799: LD_VAR 0 5
37803: ARRAY
37804: PUSH
37805: LD_INT 1
37807: ARRAY
37808: PPUSH
37809: LD_EXP 135
37813: PUSH
37814: LD_VAR 0 6
37818: ARRAY
37819: PUSH
37820: LD_VAR 0 5
37824: ARRAY
37825: PUSH
37826: LD_INT 2
37828: ARRAY
37829: PPUSH
37830: LD_VAR 0 2
37834: PPUSH
37835: LD_VAR 0 3
37839: PPUSH
37840: CALL_OW 298
37844: PUSH
37845: LD_INT 6
37847: LESS
37848: IFFALSE 37947
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37850: LD_EXP 135
37854: PUSH
37855: LD_VAR 0 6
37859: ARRAY
37860: PUSH
37861: LD_VAR 0 5
37865: ARRAY
37866: PUSH
37867: LD_INT 1
37869: ARRAY
37870: PPUSH
37871: LD_EXP 135
37875: PUSH
37876: LD_VAR 0 6
37880: ARRAY
37881: PUSH
37882: LD_VAR 0 5
37886: ARRAY
37887: PUSH
37888: LD_INT 2
37890: ARRAY
37891: PPUSH
37892: LD_VAR 0 1
37896: PPUSH
37897: CALL_OW 255
37901: PPUSH
37902: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37906: LD_ADDR_EXP 135
37910: PUSH
37911: LD_EXP 135
37915: PPUSH
37916: LD_VAR 0 6
37920: PPUSH
37921: LD_EXP 135
37925: PUSH
37926: LD_VAR 0 6
37930: ARRAY
37931: PPUSH
37932: LD_VAR 0 5
37936: PPUSH
37937: CALL_OW 3
37941: PPUSH
37942: CALL_OW 1
37946: ST_TO_ADDR
// end ; end ;
37947: GO 37785
37949: POP
37950: POP
// end ;
37951: LD_VAR 0 4
37955: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37956: LD_INT 0
37958: PPUSH
37959: PPUSH
37960: PPUSH
37961: PPUSH
37962: PPUSH
37963: PPUSH
37964: PPUSH
37965: PPUSH
37966: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37967: LD_VAR 0 1
37971: PPUSH
37972: CALL_OW 264
37976: PUSH
37977: LD_EXP 55
37981: EQUAL
37982: NOT
37983: PUSH
37984: LD_VAR 0 1
37988: PUSH
37989: LD_EXP 134
37993: IN
37994: NOT
37995: OR
37996: IFFALSE 38000
// exit ;
37998: GO 38322
// index := GetElementIndex ( minersList , unit ) ;
38000: LD_ADDR_VAR 0 6
38004: PUSH
38005: LD_EXP 134
38009: PPUSH
38010: LD_VAR 0 1
38014: PPUSH
38015: CALL 43518 0 2
38019: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38020: LD_ADDR_VAR 0 8
38024: PUSH
38025: LD_EXP 136
38029: PUSH
38030: LD_EXP 135
38034: PUSH
38035: LD_VAR 0 6
38039: ARRAY
38040: MINUS
38041: ST_TO_ADDR
// if not minesFreeAmount then
38042: LD_VAR 0 8
38046: NOT
38047: IFFALSE 38051
// exit ;
38049: GO 38322
// tmp := [ ] ;
38051: LD_ADDR_VAR 0 7
38055: PUSH
38056: EMPTY
38057: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38058: LD_ADDR_VAR 0 5
38062: PUSH
38063: DOUBLE
38064: LD_INT 1
38066: DEC
38067: ST_TO_ADDR
38068: LD_VAR 0 8
38072: PUSH
38073: FOR_TO
38074: IFFALSE 38269
// begin _d := rand ( 0 , 5 ) ;
38076: LD_ADDR_VAR 0 11
38080: PUSH
38081: LD_INT 0
38083: PPUSH
38084: LD_INT 5
38086: PPUSH
38087: CALL_OW 12
38091: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38092: LD_ADDR_VAR 0 12
38096: PUSH
38097: LD_INT 2
38099: PPUSH
38100: LD_INT 6
38102: PPUSH
38103: CALL_OW 12
38107: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38108: LD_ADDR_VAR 0 9
38112: PUSH
38113: LD_VAR 0 2
38117: PPUSH
38118: LD_VAR 0 11
38122: PPUSH
38123: LD_VAR 0 12
38127: PPUSH
38128: CALL_OW 272
38132: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38133: LD_ADDR_VAR 0 10
38137: PUSH
38138: LD_VAR 0 3
38142: PPUSH
38143: LD_VAR 0 11
38147: PPUSH
38148: LD_VAR 0 12
38152: PPUSH
38153: CALL_OW 273
38157: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38158: LD_VAR 0 9
38162: PPUSH
38163: LD_VAR 0 10
38167: PPUSH
38168: CALL_OW 488
38172: PUSH
38173: LD_VAR 0 9
38177: PUSH
38178: LD_VAR 0 10
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_VAR 0 7
38191: IN
38192: NOT
38193: AND
38194: PUSH
38195: LD_VAR 0 9
38199: PPUSH
38200: LD_VAR 0 10
38204: PPUSH
38205: CALL_OW 458
38209: NOT
38210: AND
38211: IFFALSE 38253
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38213: LD_ADDR_VAR 0 7
38217: PUSH
38218: LD_VAR 0 7
38222: PPUSH
38223: LD_VAR 0 7
38227: PUSH
38228: LD_INT 1
38230: PLUS
38231: PPUSH
38232: LD_VAR 0 9
38236: PUSH
38237: LD_VAR 0 10
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PPUSH
38246: CALL_OW 1
38250: ST_TO_ADDR
38251: GO 38267
// i := i - 1 ;
38253: LD_ADDR_VAR 0 5
38257: PUSH
38258: LD_VAR 0 5
38262: PUSH
38263: LD_INT 1
38265: MINUS
38266: ST_TO_ADDR
// end ;
38267: GO 38073
38269: POP
38270: POP
// for i in tmp do
38271: LD_ADDR_VAR 0 5
38275: PUSH
38276: LD_VAR 0 7
38280: PUSH
38281: FOR_IN
38282: IFFALSE 38320
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38284: LD_VAR 0 1
38288: PPUSH
38289: LD_VAR 0 5
38293: PUSH
38294: LD_INT 1
38296: ARRAY
38297: PPUSH
38298: LD_VAR 0 5
38302: PUSH
38303: LD_INT 2
38305: ARRAY
38306: PPUSH
38307: CALL 37262 0 3
38311: NOT
38312: IFFALSE 38318
// exit ;
38314: POP
38315: POP
38316: GO 38322
38318: GO 38281
38320: POP
38321: POP
// end ;
38322: LD_VAR 0 4
38326: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38327: LD_INT 0
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
// if not GetClass ( unit ) = class_sniper then
38336: LD_VAR 0 1
38340: PPUSH
38341: CALL_OW 257
38345: PUSH
38346: LD_INT 5
38348: EQUAL
38349: NOT
38350: IFFALSE 38354
// exit ;
38352: GO 38742
// dist := 8 ;
38354: LD_ADDR_VAR 0 5
38358: PUSH
38359: LD_INT 8
38361: ST_TO_ADDR
// viewRange := 12 ;
38362: LD_ADDR_VAR 0 7
38366: PUSH
38367: LD_INT 12
38369: ST_TO_ADDR
// side := GetSide ( unit ) ;
38370: LD_ADDR_VAR 0 6
38374: PUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 255
38384: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38385: LD_INT 61
38387: PPUSH
38388: LD_VAR 0 6
38392: PPUSH
38393: CALL_OW 321
38397: PUSH
38398: LD_INT 2
38400: EQUAL
38401: IFFALSE 38411
// viewRange := 16 ;
38403: LD_ADDR_VAR 0 7
38407: PUSH
38408: LD_INT 16
38410: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38411: LD_VAR 0 1
38415: PPUSH
38416: LD_VAR 0 2
38420: PPUSH
38421: LD_VAR 0 3
38425: PPUSH
38426: CALL_OW 297
38430: PUSH
38431: LD_VAR 0 5
38435: GREATER
38436: IFFALSE 38515
// begin ComMoveXY ( unit , x , y ) ;
38438: LD_VAR 0 1
38442: PPUSH
38443: LD_VAR 0 2
38447: PPUSH
38448: LD_VAR 0 3
38452: PPUSH
38453: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38457: LD_INT 35
38459: PPUSH
38460: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38464: LD_VAR 0 1
38468: PPUSH
38469: LD_VAR 0 2
38473: PPUSH
38474: LD_VAR 0 3
38478: PPUSH
38479: CALL 74237 0 3
38483: NOT
38484: IFFALSE 38488
// exit ;
38486: GO 38742
// until GetDistUnitXY ( unit , x , y ) < dist ;
38488: LD_VAR 0 1
38492: PPUSH
38493: LD_VAR 0 2
38497: PPUSH
38498: LD_VAR 0 3
38502: PPUSH
38503: CALL_OW 297
38507: PUSH
38508: LD_VAR 0 5
38512: LESS
38513: IFFALSE 38457
// end ; ComTurnXY ( unit , x , y ) ;
38515: LD_VAR 0 1
38519: PPUSH
38520: LD_VAR 0 2
38524: PPUSH
38525: LD_VAR 0 3
38529: PPUSH
38530: CALL_OW 118
// wait ( 5 ) ;
38534: LD_INT 5
38536: PPUSH
38537: CALL_OW 67
// _d := GetDir ( unit ) ;
38541: LD_ADDR_VAR 0 10
38545: PUSH
38546: LD_VAR 0 1
38550: PPUSH
38551: CALL_OW 254
38555: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38556: LD_ADDR_VAR 0 8
38560: PUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: CALL_OW 250
38570: PPUSH
38571: LD_VAR 0 10
38575: PPUSH
38576: LD_VAR 0 5
38580: PPUSH
38581: CALL_OW 272
38585: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38586: LD_ADDR_VAR 0 9
38590: PUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 251
38600: PPUSH
38601: LD_VAR 0 10
38605: PPUSH
38606: LD_VAR 0 5
38610: PPUSH
38611: CALL_OW 273
38615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38616: LD_VAR 0 8
38620: PPUSH
38621: LD_VAR 0 9
38625: PPUSH
38626: CALL_OW 488
38630: NOT
38631: IFFALSE 38635
// exit ;
38633: GO 38742
// ComAnimCustom ( unit , 1 ) ;
38635: LD_VAR 0 1
38639: PPUSH
38640: LD_INT 1
38642: PPUSH
38643: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38647: LD_VAR 0 8
38651: PPUSH
38652: LD_VAR 0 9
38656: PPUSH
38657: LD_VAR 0 6
38661: PPUSH
38662: LD_VAR 0 7
38666: PPUSH
38667: CALL_OW 330
// repeat wait ( 1 ) ;
38671: LD_INT 1
38673: PPUSH
38674: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 316
38687: PUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL_OW 314
38697: OR
38698: PUSH
38699: LD_VAR 0 1
38703: PPUSH
38704: CALL_OW 302
38708: NOT
38709: OR
38710: PUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL_OW 301
38720: OR
38721: IFFALSE 38671
// RemoveSeeing ( _x , _y , side ) ;
38723: LD_VAR 0 8
38727: PPUSH
38728: LD_VAR 0 9
38732: PPUSH
38733: LD_VAR 0 6
38737: PPUSH
38738: CALL_OW 331
// end ; end_of_file
38742: LD_VAR 0 4
38746: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38747: LD_INT 0
38749: PPUSH
38750: PPUSH
// if exist_mode then
38751: LD_VAR 0 2
38755: IFFALSE 38780
// unit := CreateCharacter ( prefix & ident ) else
38757: LD_ADDR_VAR 0 5
38761: PUSH
38762: LD_VAR 0 3
38766: PUSH
38767: LD_VAR 0 1
38771: STR
38772: PPUSH
38773: CALL_OW 34
38777: ST_TO_ADDR
38778: GO 38795
// unit := NewCharacter ( ident ) ;
38780: LD_ADDR_VAR 0 5
38784: PUSH
38785: LD_VAR 0 1
38789: PPUSH
38790: CALL_OW 25
38794: ST_TO_ADDR
// result := unit ;
38795: LD_ADDR_VAR 0 4
38799: PUSH
38800: LD_VAR 0 5
38804: ST_TO_ADDR
// end ;
38805: LD_VAR 0 4
38809: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38810: LD_INT 0
38812: PPUSH
38813: PPUSH
// if not side or not nation then
38814: LD_VAR 0 1
38818: NOT
38819: PUSH
38820: LD_VAR 0 2
38824: NOT
38825: OR
38826: IFFALSE 38830
// exit ;
38828: GO 39598
// case nation of nation_american :
38830: LD_VAR 0 2
38834: PUSH
38835: LD_INT 1
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 39057
38843: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38844: LD_ADDR_VAR 0 4
38848: PUSH
38849: LD_INT 35
38851: PUSH
38852: LD_INT 45
38854: PUSH
38855: LD_INT 46
38857: PUSH
38858: LD_INT 47
38860: PUSH
38861: LD_INT 82
38863: PUSH
38864: LD_INT 83
38866: PUSH
38867: LD_INT 84
38869: PUSH
38870: LD_INT 85
38872: PUSH
38873: LD_INT 86
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: LD_INT 6
38884: PUSH
38885: LD_INT 15
38887: PUSH
38888: LD_INT 16
38890: PUSH
38891: LD_INT 7
38893: PUSH
38894: LD_INT 12
38896: PUSH
38897: LD_INT 13
38899: PUSH
38900: LD_INT 10
38902: PUSH
38903: LD_INT 14
38905: PUSH
38906: LD_INT 20
38908: PUSH
38909: LD_INT 21
38911: PUSH
38912: LD_INT 22
38914: PUSH
38915: LD_INT 25
38917: PUSH
38918: LD_INT 32
38920: PUSH
38921: LD_INT 27
38923: PUSH
38924: LD_INT 36
38926: PUSH
38927: LD_INT 69
38929: PUSH
38930: LD_INT 39
38932: PUSH
38933: LD_INT 34
38935: PUSH
38936: LD_INT 40
38938: PUSH
38939: LD_INT 48
38941: PUSH
38942: LD_INT 49
38944: PUSH
38945: LD_INT 50
38947: PUSH
38948: LD_INT 51
38950: PUSH
38951: LD_INT 52
38953: PUSH
38954: LD_INT 53
38956: PUSH
38957: LD_INT 54
38959: PUSH
38960: LD_INT 55
38962: PUSH
38963: LD_INT 56
38965: PUSH
38966: LD_INT 57
38968: PUSH
38969: LD_INT 58
38971: PUSH
38972: LD_INT 59
38974: PUSH
38975: LD_INT 60
38977: PUSH
38978: LD_INT 61
38980: PUSH
38981: LD_INT 62
38983: PUSH
38984: LD_INT 80
38986: PUSH
38987: LD_INT 82
38989: PUSH
38990: LD_INT 83
38992: PUSH
38993: LD_INT 84
38995: PUSH
38996: LD_INT 85
38998: PUSH
38999: LD_INT 86
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: ST_TO_ADDR
39055: GO 39522
39057: LD_INT 2
39059: DOUBLE
39060: EQUAL
39061: IFTRUE 39065
39063: GO 39291
39065: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39066: LD_ADDR_VAR 0 4
39070: PUSH
39071: LD_INT 35
39073: PUSH
39074: LD_INT 45
39076: PUSH
39077: LD_INT 46
39079: PUSH
39080: LD_INT 47
39082: PUSH
39083: LD_INT 82
39085: PUSH
39086: LD_INT 83
39088: PUSH
39089: LD_INT 84
39091: PUSH
39092: LD_INT 85
39094: PUSH
39095: LD_INT 87
39097: PUSH
39098: LD_INT 70
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 11
39106: PUSH
39107: LD_INT 3
39109: PUSH
39110: LD_INT 4
39112: PUSH
39113: LD_INT 5
39115: PUSH
39116: LD_INT 6
39118: PUSH
39119: LD_INT 15
39121: PUSH
39122: LD_INT 18
39124: PUSH
39125: LD_INT 7
39127: PUSH
39128: LD_INT 17
39130: PUSH
39131: LD_INT 8
39133: PUSH
39134: LD_INT 20
39136: PUSH
39137: LD_INT 21
39139: PUSH
39140: LD_INT 22
39142: PUSH
39143: LD_INT 72
39145: PUSH
39146: LD_INT 26
39148: PUSH
39149: LD_INT 69
39151: PUSH
39152: LD_INT 39
39154: PUSH
39155: LD_INT 40
39157: PUSH
39158: LD_INT 41
39160: PUSH
39161: LD_INT 42
39163: PUSH
39164: LD_INT 43
39166: PUSH
39167: LD_INT 48
39169: PUSH
39170: LD_INT 49
39172: PUSH
39173: LD_INT 50
39175: PUSH
39176: LD_INT 51
39178: PUSH
39179: LD_INT 52
39181: PUSH
39182: LD_INT 53
39184: PUSH
39185: LD_INT 54
39187: PUSH
39188: LD_INT 55
39190: PUSH
39191: LD_INT 56
39193: PUSH
39194: LD_INT 60
39196: PUSH
39197: LD_INT 61
39199: PUSH
39200: LD_INT 62
39202: PUSH
39203: LD_INT 66
39205: PUSH
39206: LD_INT 67
39208: PUSH
39209: LD_INT 68
39211: PUSH
39212: LD_INT 81
39214: PUSH
39215: LD_INT 82
39217: PUSH
39218: LD_INT 83
39220: PUSH
39221: LD_INT 84
39223: PUSH
39224: LD_INT 85
39226: PUSH
39227: LD_INT 87
39229: PUSH
39230: LD_INT 88
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
39289: GO 39522
39291: LD_INT 3
39293: DOUBLE
39294: EQUAL
39295: IFTRUE 39299
39297: GO 39521
39299: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39300: LD_ADDR_VAR 0 4
39304: PUSH
39305: LD_INT 46
39307: PUSH
39308: LD_INT 47
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: LD_INT 82
39319: PUSH
39320: LD_INT 83
39322: PUSH
39323: LD_INT 84
39325: PUSH
39326: LD_INT 85
39328: PUSH
39329: LD_INT 86
39331: PUSH
39332: LD_INT 11
39334: PUSH
39335: LD_INT 9
39337: PUSH
39338: LD_INT 20
39340: PUSH
39341: LD_INT 19
39343: PUSH
39344: LD_INT 21
39346: PUSH
39347: LD_INT 24
39349: PUSH
39350: LD_INT 22
39352: PUSH
39353: LD_INT 25
39355: PUSH
39356: LD_INT 28
39358: PUSH
39359: LD_INT 29
39361: PUSH
39362: LD_INT 30
39364: PUSH
39365: LD_INT 31
39367: PUSH
39368: LD_INT 37
39370: PUSH
39371: LD_INT 38
39373: PUSH
39374: LD_INT 32
39376: PUSH
39377: LD_INT 27
39379: PUSH
39380: LD_INT 33
39382: PUSH
39383: LD_INT 69
39385: PUSH
39386: LD_INT 39
39388: PUSH
39389: LD_INT 34
39391: PUSH
39392: LD_INT 40
39394: PUSH
39395: LD_INT 71
39397: PUSH
39398: LD_INT 23
39400: PUSH
39401: LD_INT 44
39403: PUSH
39404: LD_INT 48
39406: PUSH
39407: LD_INT 49
39409: PUSH
39410: LD_INT 50
39412: PUSH
39413: LD_INT 51
39415: PUSH
39416: LD_INT 52
39418: PUSH
39419: LD_INT 53
39421: PUSH
39422: LD_INT 54
39424: PUSH
39425: LD_INT 55
39427: PUSH
39428: LD_INT 56
39430: PUSH
39431: LD_INT 57
39433: PUSH
39434: LD_INT 58
39436: PUSH
39437: LD_INT 59
39439: PUSH
39440: LD_INT 63
39442: PUSH
39443: LD_INT 64
39445: PUSH
39446: LD_INT 65
39448: PUSH
39449: LD_INT 82
39451: PUSH
39452: LD_INT 83
39454: PUSH
39455: LD_INT 84
39457: PUSH
39458: LD_INT 85
39460: PUSH
39461: LD_INT 86
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: ST_TO_ADDR
39519: GO 39522
39521: POP
// if state > - 1 and state < 3 then
39522: LD_VAR 0 3
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: GREATER
39531: PUSH
39532: LD_VAR 0 3
39536: PUSH
39537: LD_INT 3
39539: LESS
39540: AND
39541: IFFALSE 39598
// for i in result do
39543: LD_ADDR_VAR 0 5
39547: PUSH
39548: LD_VAR 0 4
39552: PUSH
39553: FOR_IN
39554: IFFALSE 39596
// if GetTech ( i , side ) <> state then
39556: LD_VAR 0 5
39560: PPUSH
39561: LD_VAR 0 1
39565: PPUSH
39566: CALL_OW 321
39570: PUSH
39571: LD_VAR 0 3
39575: NONEQUAL
39576: IFFALSE 39594
// result := result diff i ;
39578: LD_ADDR_VAR 0 4
39582: PUSH
39583: LD_VAR 0 4
39587: PUSH
39588: LD_VAR 0 5
39592: DIFF
39593: ST_TO_ADDR
39594: GO 39553
39596: POP
39597: POP
// end ;
39598: LD_VAR 0 4
39602: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39603: LD_INT 0
39605: PPUSH
39606: PPUSH
39607: PPUSH
// result := true ;
39608: LD_ADDR_VAR 0 3
39612: PUSH
39613: LD_INT 1
39615: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39616: LD_ADDR_VAR 0 5
39620: PUSH
39621: LD_VAR 0 2
39625: PPUSH
39626: CALL_OW 480
39630: ST_TO_ADDR
// if not tmp then
39631: LD_VAR 0 5
39635: NOT
39636: IFFALSE 39640
// exit ;
39638: GO 39689
// for i in tmp do
39640: LD_ADDR_VAR 0 4
39644: PUSH
39645: LD_VAR 0 5
39649: PUSH
39650: FOR_IN
39651: IFFALSE 39687
// if GetTech ( i , side ) <> state_researched then
39653: LD_VAR 0 4
39657: PPUSH
39658: LD_VAR 0 1
39662: PPUSH
39663: CALL_OW 321
39667: PUSH
39668: LD_INT 2
39670: NONEQUAL
39671: IFFALSE 39685
// begin result := false ;
39673: LD_ADDR_VAR 0 3
39677: PUSH
39678: LD_INT 0
39680: ST_TO_ADDR
// exit ;
39681: POP
39682: POP
39683: GO 39689
// end ;
39685: GO 39650
39687: POP
39688: POP
// end ;
39689: LD_VAR 0 3
39693: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39694: LD_INT 0
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39709: LD_VAR 0 1
39713: NOT
39714: PUSH
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL_OW 257
39724: PUSH
39725: LD_INT 9
39727: NONEQUAL
39728: OR
39729: IFFALSE 39733
// exit ;
39731: GO 40306
// side := GetSide ( unit ) ;
39733: LD_ADDR_VAR 0 9
39737: PUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 255
39747: ST_TO_ADDR
// tech_space := tech_spacanom ;
39748: LD_ADDR_VAR 0 12
39752: PUSH
39753: LD_INT 29
39755: ST_TO_ADDR
// tech_time := tech_taurad ;
39756: LD_ADDR_VAR 0 13
39760: PUSH
39761: LD_INT 28
39763: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39764: LD_ADDR_VAR 0 11
39768: PUSH
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 310
39778: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39779: LD_VAR 0 11
39783: PPUSH
39784: CALL_OW 247
39788: PUSH
39789: LD_INT 2
39791: EQUAL
39792: IFFALSE 39796
// exit ;
39794: GO 40306
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39796: LD_ADDR_VAR 0 8
39800: PUSH
39801: LD_INT 81
39803: PUSH
39804: LD_VAR 0 9
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 3
39815: PUSH
39816: LD_INT 21
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PPUSH
39834: CALL_OW 69
39838: ST_TO_ADDR
// if not tmp then
39839: LD_VAR 0 8
39843: NOT
39844: IFFALSE 39848
// exit ;
39846: GO 40306
// if in_unit then
39848: LD_VAR 0 11
39852: IFFALSE 39876
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39854: LD_ADDR_VAR 0 10
39858: PUSH
39859: LD_VAR 0 8
39863: PPUSH
39864: LD_VAR 0 11
39868: PPUSH
39869: CALL_OW 74
39873: ST_TO_ADDR
39874: GO 39896
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39876: LD_ADDR_VAR 0 10
39880: PUSH
39881: LD_VAR 0 8
39885: PPUSH
39886: LD_VAR 0 1
39890: PPUSH
39891: CALL_OW 74
39895: ST_TO_ADDR
// if not enemy then
39896: LD_VAR 0 10
39900: NOT
39901: IFFALSE 39905
// exit ;
39903: GO 40306
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39905: LD_VAR 0 11
39909: PUSH
39910: LD_VAR 0 11
39914: PPUSH
39915: LD_VAR 0 10
39919: PPUSH
39920: CALL_OW 296
39924: PUSH
39925: LD_INT 13
39927: GREATER
39928: AND
39929: PUSH
39930: LD_VAR 0 1
39934: PPUSH
39935: LD_VAR 0 10
39939: PPUSH
39940: CALL_OW 296
39944: PUSH
39945: LD_INT 12
39947: GREATER
39948: OR
39949: IFFALSE 39953
// exit ;
39951: GO 40306
// missile := [ 1 ] ;
39953: LD_ADDR_VAR 0 14
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39964: LD_VAR 0 9
39968: PPUSH
39969: LD_VAR 0 12
39973: PPUSH
39974: CALL_OW 325
39978: IFFALSE 40007
// missile := Replace ( missile , missile + 1 , 2 ) ;
39980: LD_ADDR_VAR 0 14
39984: PUSH
39985: LD_VAR 0 14
39989: PPUSH
39990: LD_VAR 0 14
39994: PUSH
39995: LD_INT 1
39997: PLUS
39998: PPUSH
39999: LD_INT 2
40001: PPUSH
40002: CALL_OW 1
40006: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40007: LD_VAR 0 9
40011: PPUSH
40012: LD_VAR 0 13
40016: PPUSH
40017: CALL_OW 325
40021: PUSH
40022: LD_VAR 0 10
40026: PPUSH
40027: CALL_OW 255
40031: PPUSH
40032: LD_VAR 0 13
40036: PPUSH
40037: CALL_OW 325
40041: NOT
40042: AND
40043: IFFALSE 40072
// missile := Replace ( missile , missile + 1 , 3 ) ;
40045: LD_ADDR_VAR 0 14
40049: PUSH
40050: LD_VAR 0 14
40054: PPUSH
40055: LD_VAR 0 14
40059: PUSH
40060: LD_INT 1
40062: PLUS
40063: PPUSH
40064: LD_INT 3
40066: PPUSH
40067: CALL_OW 1
40071: ST_TO_ADDR
// if missile < 2 then
40072: LD_VAR 0 14
40076: PUSH
40077: LD_INT 2
40079: LESS
40080: IFFALSE 40084
// exit ;
40082: GO 40306
// x := GetX ( enemy ) ;
40084: LD_ADDR_VAR 0 4
40088: PUSH
40089: LD_VAR 0 10
40093: PPUSH
40094: CALL_OW 250
40098: ST_TO_ADDR
// y := GetY ( enemy ) ;
40099: LD_ADDR_VAR 0 5
40103: PUSH
40104: LD_VAR 0 10
40108: PPUSH
40109: CALL_OW 251
40113: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40114: LD_ADDR_VAR 0 6
40118: PUSH
40119: LD_VAR 0 4
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PPUSH
40128: LD_INT 1
40130: PPUSH
40131: CALL_OW 12
40135: PLUS
40136: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40137: LD_ADDR_VAR 0 7
40141: PUSH
40142: LD_VAR 0 5
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PPUSH
40151: LD_INT 1
40153: PPUSH
40154: CALL_OW 12
40158: PLUS
40159: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40160: LD_VAR 0 6
40164: PPUSH
40165: LD_VAR 0 7
40169: PPUSH
40170: CALL_OW 488
40174: NOT
40175: IFFALSE 40197
// begin _x := x ;
40177: LD_ADDR_VAR 0 6
40181: PUSH
40182: LD_VAR 0 4
40186: ST_TO_ADDR
// _y := y ;
40187: LD_ADDR_VAR 0 7
40191: PUSH
40192: LD_VAR 0 5
40196: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40197: LD_ADDR_VAR 0 3
40201: PUSH
40202: LD_INT 1
40204: PPUSH
40205: LD_VAR 0 14
40209: PPUSH
40210: CALL_OW 12
40214: ST_TO_ADDR
// case i of 1 :
40215: LD_VAR 0 3
40219: PUSH
40220: LD_INT 1
40222: DOUBLE
40223: EQUAL
40224: IFTRUE 40228
40226: GO 40245
40228: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40229: LD_VAR 0 1
40233: PPUSH
40234: LD_VAR 0 10
40238: PPUSH
40239: CALL_OW 115
40243: GO 40306
40245: LD_INT 2
40247: DOUBLE
40248: EQUAL
40249: IFTRUE 40253
40251: GO 40275
40253: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40254: LD_VAR 0 1
40258: PPUSH
40259: LD_VAR 0 6
40263: PPUSH
40264: LD_VAR 0 7
40268: PPUSH
40269: CALL_OW 153
40273: GO 40306
40275: LD_INT 3
40277: DOUBLE
40278: EQUAL
40279: IFTRUE 40283
40281: GO 40305
40283: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40284: LD_VAR 0 1
40288: PPUSH
40289: LD_VAR 0 6
40293: PPUSH
40294: LD_VAR 0 7
40298: PPUSH
40299: CALL_OW 154
40303: GO 40306
40305: POP
// end ;
40306: LD_VAR 0 2
40310: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40311: LD_INT 0
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
// if not unit or not building then
40319: LD_VAR 0 1
40323: NOT
40324: PUSH
40325: LD_VAR 0 2
40329: NOT
40330: OR
40331: IFFALSE 40335
// exit ;
40333: GO 40493
// x := GetX ( building ) ;
40335: LD_ADDR_VAR 0 5
40339: PUSH
40340: LD_VAR 0 2
40344: PPUSH
40345: CALL_OW 250
40349: ST_TO_ADDR
// y := GetY ( building ) ;
40350: LD_ADDR_VAR 0 6
40354: PUSH
40355: LD_VAR 0 2
40359: PPUSH
40360: CALL_OW 251
40364: ST_TO_ADDR
// for i = 0 to 5 do
40365: LD_ADDR_VAR 0 4
40369: PUSH
40370: DOUBLE
40371: LD_INT 0
40373: DEC
40374: ST_TO_ADDR
40375: LD_INT 5
40377: PUSH
40378: FOR_TO
40379: IFFALSE 40491
// begin _x := ShiftX ( x , i , 3 ) ;
40381: LD_ADDR_VAR 0 7
40385: PUSH
40386: LD_VAR 0 5
40390: PPUSH
40391: LD_VAR 0 4
40395: PPUSH
40396: LD_INT 3
40398: PPUSH
40399: CALL_OW 272
40403: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40404: LD_ADDR_VAR 0 8
40408: PUSH
40409: LD_VAR 0 6
40413: PPUSH
40414: LD_VAR 0 4
40418: PPUSH
40419: LD_INT 3
40421: PPUSH
40422: CALL_OW 273
40426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40427: LD_VAR 0 7
40431: PPUSH
40432: LD_VAR 0 8
40436: PPUSH
40437: CALL_OW 488
40441: NOT
40442: IFFALSE 40446
// continue ;
40444: GO 40378
// if HexInfo ( _x , _y ) = 0 then
40446: LD_VAR 0 7
40450: PPUSH
40451: LD_VAR 0 8
40455: PPUSH
40456: CALL_OW 428
40460: PUSH
40461: LD_INT 0
40463: EQUAL
40464: IFFALSE 40489
// begin ComMoveXY ( unit , _x , _y ) ;
40466: LD_VAR 0 1
40470: PPUSH
40471: LD_VAR 0 7
40475: PPUSH
40476: LD_VAR 0 8
40480: PPUSH
40481: CALL_OW 111
// exit ;
40485: POP
40486: POP
40487: GO 40493
// end ; end ;
40489: GO 40378
40491: POP
40492: POP
// end ;
40493: LD_VAR 0 3
40497: RET
// export function ScanBase ( side , base_area ) ; begin
40498: LD_INT 0
40500: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_VAR 0 2
40510: PPUSH
40511: LD_INT 81
40513: PUSH
40514: LD_VAR 0 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PPUSH
40523: CALL_OW 70
40527: ST_TO_ADDR
// end ;
40528: LD_VAR 0 3
40532: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40533: LD_INT 0
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
// result := false ;
40539: LD_ADDR_VAR 0 2
40543: PUSH
40544: LD_INT 0
40546: ST_TO_ADDR
// side := GetSide ( unit ) ;
40547: LD_ADDR_VAR 0 3
40551: PUSH
40552: LD_VAR 0 1
40556: PPUSH
40557: CALL_OW 255
40561: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40562: LD_ADDR_VAR 0 4
40566: PUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 248
40576: ST_TO_ADDR
// case nat of 1 :
40577: LD_VAR 0 4
40581: PUSH
40582: LD_INT 1
40584: DOUBLE
40585: EQUAL
40586: IFTRUE 40590
40588: GO 40601
40590: POP
// tech := tech_lassight ; 2 :
40591: LD_ADDR_VAR 0 5
40595: PUSH
40596: LD_INT 12
40598: ST_TO_ADDR
40599: GO 40640
40601: LD_INT 2
40603: DOUBLE
40604: EQUAL
40605: IFTRUE 40609
40607: GO 40620
40609: POP
// tech := tech_mortar ; 3 :
40610: LD_ADDR_VAR 0 5
40614: PUSH
40615: LD_INT 41
40617: ST_TO_ADDR
40618: GO 40640
40620: LD_INT 3
40622: DOUBLE
40623: EQUAL
40624: IFTRUE 40628
40626: GO 40639
40628: POP
// tech := tech_bazooka ; end ;
40629: LD_ADDR_VAR 0 5
40633: PUSH
40634: LD_INT 44
40636: ST_TO_ADDR
40637: GO 40640
40639: POP
// if Researched ( side , tech ) then
40640: LD_VAR 0 3
40644: PPUSH
40645: LD_VAR 0 5
40649: PPUSH
40650: CALL_OW 325
40654: IFFALSE 40681
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40656: LD_ADDR_VAR 0 2
40660: PUSH
40661: LD_INT 5
40663: PUSH
40664: LD_INT 8
40666: PUSH
40667: LD_INT 9
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: PUSH
40675: LD_VAR 0 4
40679: ARRAY
40680: ST_TO_ADDR
// end ;
40681: LD_VAR 0 2
40685: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40686: LD_INT 0
40688: PPUSH
40689: PPUSH
40690: PPUSH
// if not mines then
40691: LD_VAR 0 2
40695: NOT
40696: IFFALSE 40700
// exit ;
40698: GO 40844
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40700: LD_ADDR_VAR 0 5
40704: PUSH
40705: LD_INT 81
40707: PUSH
40708: LD_VAR 0 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 3
40719: PUSH
40720: LD_INT 21
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PPUSH
40738: CALL_OW 69
40742: ST_TO_ADDR
// for i in mines do
40743: LD_ADDR_VAR 0 4
40747: PUSH
40748: LD_VAR 0 2
40752: PUSH
40753: FOR_IN
40754: IFFALSE 40842
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40756: LD_VAR 0 4
40760: PUSH
40761: LD_INT 1
40763: ARRAY
40764: PPUSH
40765: LD_VAR 0 4
40769: PUSH
40770: LD_INT 2
40772: ARRAY
40773: PPUSH
40774: CALL_OW 458
40778: NOT
40779: IFFALSE 40783
// continue ;
40781: GO 40753
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40783: LD_VAR 0 4
40787: PUSH
40788: LD_INT 1
40790: ARRAY
40791: PPUSH
40792: LD_VAR 0 4
40796: PUSH
40797: LD_INT 2
40799: ARRAY
40800: PPUSH
40801: CALL_OW 428
40805: PUSH
40806: LD_VAR 0 5
40810: IN
40811: IFFALSE 40840
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40813: LD_VAR 0 4
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: PPUSH
40822: LD_VAR 0 4
40826: PUSH
40827: LD_INT 2
40829: ARRAY
40830: PPUSH
40831: LD_VAR 0 1
40835: PPUSH
40836: CALL_OW 456
// end ;
40840: GO 40753
40842: POP
40843: POP
// end ;
40844: LD_VAR 0 3
40848: RET
// export function Count ( array ) ; var i ; begin
40849: LD_INT 0
40851: PPUSH
40852: PPUSH
// result := 0 ;
40853: LD_ADDR_VAR 0 2
40857: PUSH
40858: LD_INT 0
40860: ST_TO_ADDR
// for i in array do
40861: LD_ADDR_VAR 0 3
40865: PUSH
40866: LD_VAR 0 1
40870: PUSH
40871: FOR_IN
40872: IFFALSE 40896
// if i then
40874: LD_VAR 0 3
40878: IFFALSE 40894
// result := result + 1 ;
40880: LD_ADDR_VAR 0 2
40884: PUSH
40885: LD_VAR 0 2
40889: PUSH
40890: LD_INT 1
40892: PLUS
40893: ST_TO_ADDR
40894: GO 40871
40896: POP
40897: POP
// end ;
40898: LD_VAR 0 2
40902: RET
// export function IsEmpty ( building ) ; begin
40903: LD_INT 0
40905: PPUSH
// if not building then
40906: LD_VAR 0 1
40910: NOT
40911: IFFALSE 40915
// exit ;
40913: GO 40958
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40915: LD_ADDR_VAR 0 2
40919: PUSH
40920: LD_VAR 0 1
40924: PUSH
40925: LD_INT 22
40927: PUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 255
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 58
40944: PUSH
40945: EMPTY
40946: LIST
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PPUSH
40952: CALL_OW 69
40956: IN
40957: ST_TO_ADDR
// end ;
40958: LD_VAR 0 2
40962: RET
// export function IsNotFull ( building ) ; begin
40963: LD_INT 0
40965: PPUSH
// if not building then
40966: LD_VAR 0 1
40970: NOT
40971: IFFALSE 40975
// exit ;
40973: GO 40994
// result := UnitsInside ( building ) < 6 ;
40975: LD_ADDR_VAR 0 2
40979: PUSH
40980: LD_VAR 0 1
40984: PPUSH
40985: CALL_OW 313
40989: PUSH
40990: LD_INT 6
40992: LESS
40993: ST_TO_ADDR
// end ;
40994: LD_VAR 0 2
40998: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40999: LD_INT 0
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
// tmp := [ ] ;
41005: LD_ADDR_VAR 0 3
41009: PUSH
41010: EMPTY
41011: ST_TO_ADDR
// list := [ ] ;
41012: LD_ADDR_VAR 0 5
41016: PUSH
41017: EMPTY
41018: ST_TO_ADDR
// for i = 16 to 25 do
41019: LD_ADDR_VAR 0 4
41023: PUSH
41024: DOUBLE
41025: LD_INT 16
41027: DEC
41028: ST_TO_ADDR
41029: LD_INT 25
41031: PUSH
41032: FOR_TO
41033: IFFALSE 41106
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41035: LD_ADDR_VAR 0 3
41039: PUSH
41040: LD_VAR 0 3
41044: PUSH
41045: LD_INT 22
41047: PUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 255
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 91
41064: PUSH
41065: LD_VAR 0 1
41069: PUSH
41070: LD_INT 6
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 30
41080: PUSH
41081: LD_VAR 0 4
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: PUSH
41095: EMPTY
41096: LIST
41097: PPUSH
41098: CALL_OW 69
41102: ADD
41103: ST_TO_ADDR
41104: GO 41032
41106: POP
41107: POP
// for i = 1 to tmp do
41108: LD_ADDR_VAR 0 4
41112: PUSH
41113: DOUBLE
41114: LD_INT 1
41116: DEC
41117: ST_TO_ADDR
41118: LD_VAR 0 3
41122: PUSH
41123: FOR_TO
41124: IFFALSE 41212
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41126: LD_ADDR_VAR 0 5
41130: PUSH
41131: LD_VAR 0 5
41135: PUSH
41136: LD_VAR 0 3
41140: PUSH
41141: LD_VAR 0 4
41145: ARRAY
41146: PPUSH
41147: CALL_OW 266
41151: PUSH
41152: LD_VAR 0 3
41156: PUSH
41157: LD_VAR 0 4
41161: ARRAY
41162: PPUSH
41163: CALL_OW 250
41167: PUSH
41168: LD_VAR 0 3
41172: PUSH
41173: LD_VAR 0 4
41177: ARRAY
41178: PPUSH
41179: CALL_OW 251
41183: PUSH
41184: LD_VAR 0 3
41188: PUSH
41189: LD_VAR 0 4
41193: ARRAY
41194: PPUSH
41195: CALL_OW 254
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: PUSH
41206: EMPTY
41207: LIST
41208: ADD
41209: ST_TO_ADDR
41210: GO 41123
41212: POP
41213: POP
// result := list ;
41214: LD_ADDR_VAR 0 2
41218: PUSH
41219: LD_VAR 0 5
41223: ST_TO_ADDR
// end ;
41224: LD_VAR 0 2
41228: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41229: LD_INT 0
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
// if not factory then
41238: LD_VAR 0 1
41242: NOT
41243: IFFALSE 41247
// exit ;
41245: GO 41840
// if control = control_apeman then
41247: LD_VAR 0 4
41251: PUSH
41252: LD_INT 5
41254: EQUAL
41255: IFFALSE 41364
// begin tmp := UnitsInside ( factory ) ;
41257: LD_ADDR_VAR 0 8
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 313
41271: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41272: LD_VAR 0 8
41276: PPUSH
41277: LD_INT 25
41279: PUSH
41280: LD_INT 12
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PPUSH
41287: CALL_OW 72
41291: NOT
41292: IFFALSE 41302
// control := control_manual ;
41294: LD_ADDR_VAR 0 4
41298: PUSH
41299: LD_INT 1
41301: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41302: LD_ADDR_VAR 0 8
41306: PUSH
41307: LD_VAR 0 1
41311: PPUSH
41312: CALL 40999 0 1
41316: ST_TO_ADDR
// if tmp then
41317: LD_VAR 0 8
41321: IFFALSE 41364
// begin for i in tmp do
41323: LD_ADDR_VAR 0 7
41327: PUSH
41328: LD_VAR 0 8
41332: PUSH
41333: FOR_IN
41334: IFFALSE 41362
// if i [ 1 ] = b_ext_radio then
41336: LD_VAR 0 7
41340: PUSH
41341: LD_INT 1
41343: ARRAY
41344: PUSH
41345: LD_INT 22
41347: EQUAL
41348: IFFALSE 41360
// begin control := control_remote ;
41350: LD_ADDR_VAR 0 4
41354: PUSH
41355: LD_INT 2
41357: ST_TO_ADDR
// break ;
41358: GO 41362
// end ;
41360: GO 41333
41362: POP
41363: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41364: LD_VAR 0 1
41368: PPUSH
41369: LD_VAR 0 2
41373: PPUSH
41374: LD_VAR 0 3
41378: PPUSH
41379: LD_VAR 0 4
41383: PPUSH
41384: LD_VAR 0 5
41388: PPUSH
41389: CALL_OW 448
41393: IFFALSE 41428
// begin result := [ chassis , engine , control , weapon ] ;
41395: LD_ADDR_VAR 0 6
41399: PUSH
41400: LD_VAR 0 2
41404: PUSH
41405: LD_VAR 0 3
41409: PUSH
41410: LD_VAR 0 4
41414: PUSH
41415: LD_VAR 0 5
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: ST_TO_ADDR
// exit ;
41426: GO 41840
// end ; _chassis := AvailableChassisList ( factory ) ;
41428: LD_ADDR_VAR 0 9
41432: PUSH
41433: LD_VAR 0 1
41437: PPUSH
41438: CALL_OW 475
41442: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41443: LD_ADDR_VAR 0 11
41447: PUSH
41448: LD_VAR 0 1
41452: PPUSH
41453: CALL_OW 476
41457: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41458: LD_ADDR_VAR 0 12
41462: PUSH
41463: LD_VAR 0 1
41467: PPUSH
41468: CALL_OW 477
41472: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41473: LD_ADDR_VAR 0 10
41477: PUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 478
41487: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41488: LD_VAR 0 9
41492: NOT
41493: PUSH
41494: LD_VAR 0 11
41498: NOT
41499: OR
41500: PUSH
41501: LD_VAR 0 12
41505: NOT
41506: OR
41507: PUSH
41508: LD_VAR 0 10
41512: NOT
41513: OR
41514: IFFALSE 41549
// begin result := [ chassis , engine , control , weapon ] ;
41516: LD_ADDR_VAR 0 6
41520: PUSH
41521: LD_VAR 0 2
41525: PUSH
41526: LD_VAR 0 3
41530: PUSH
41531: LD_VAR 0 4
41535: PUSH
41536: LD_VAR 0 5
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: ST_TO_ADDR
// exit ;
41547: GO 41840
// end ; if not chassis in _chassis then
41549: LD_VAR 0 2
41553: PUSH
41554: LD_VAR 0 9
41558: IN
41559: NOT
41560: IFFALSE 41586
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41562: LD_ADDR_VAR 0 2
41566: PUSH
41567: LD_VAR 0 9
41571: PUSH
41572: LD_INT 1
41574: PPUSH
41575: LD_VAR 0 9
41579: PPUSH
41580: CALL_OW 12
41584: ARRAY
41585: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41586: LD_VAR 0 2
41590: PPUSH
41591: LD_VAR 0 3
41595: PPUSH
41596: CALL 41845 0 2
41600: NOT
41601: IFFALSE 41660
// repeat engine := _engine [ 1 ] ;
41603: LD_ADDR_VAR 0 3
41607: PUSH
41608: LD_VAR 0 11
41612: PUSH
41613: LD_INT 1
41615: ARRAY
41616: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41617: LD_ADDR_VAR 0 11
41621: PUSH
41622: LD_VAR 0 11
41626: PPUSH
41627: LD_INT 1
41629: PPUSH
41630: CALL_OW 3
41634: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41635: LD_VAR 0 2
41639: PPUSH
41640: LD_VAR 0 3
41644: PPUSH
41645: CALL 41845 0 2
41649: PUSH
41650: LD_VAR 0 11
41654: PUSH
41655: EMPTY
41656: EQUAL
41657: OR
41658: IFFALSE 41603
// if not control in _control then
41660: LD_VAR 0 4
41664: PUSH
41665: LD_VAR 0 12
41669: IN
41670: NOT
41671: IFFALSE 41697
// control := _control [ rand ( 1 , _control ) ] ;
41673: LD_ADDR_VAR 0 4
41677: PUSH
41678: LD_VAR 0 12
41682: PUSH
41683: LD_INT 1
41685: PPUSH
41686: LD_VAR 0 12
41690: PPUSH
41691: CALL_OW 12
41695: ARRAY
41696: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41697: LD_VAR 0 2
41701: PPUSH
41702: LD_VAR 0 5
41706: PPUSH
41707: CALL 42065 0 2
41711: NOT
41712: IFFALSE 41771
// repeat weapon := _weapon [ 1 ] ;
41714: LD_ADDR_VAR 0 5
41718: PUSH
41719: LD_VAR 0 10
41723: PUSH
41724: LD_INT 1
41726: ARRAY
41727: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41728: LD_ADDR_VAR 0 10
41732: PUSH
41733: LD_VAR 0 10
41737: PPUSH
41738: LD_INT 1
41740: PPUSH
41741: CALL_OW 3
41745: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41746: LD_VAR 0 2
41750: PPUSH
41751: LD_VAR 0 5
41755: PPUSH
41756: CALL 42065 0 2
41760: PUSH
41761: LD_VAR 0 10
41765: PUSH
41766: EMPTY
41767: EQUAL
41768: OR
41769: IFFALSE 41714
// result := [ ] ;
41771: LD_ADDR_VAR 0 6
41775: PUSH
41776: EMPTY
41777: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41778: LD_VAR 0 1
41782: PPUSH
41783: LD_VAR 0 2
41787: PPUSH
41788: LD_VAR 0 3
41792: PPUSH
41793: LD_VAR 0 4
41797: PPUSH
41798: LD_VAR 0 5
41802: PPUSH
41803: CALL_OW 448
41807: IFFALSE 41840
// result := [ chassis , engine , control , weapon ] ;
41809: LD_ADDR_VAR 0 6
41813: PUSH
41814: LD_VAR 0 2
41818: PUSH
41819: LD_VAR 0 3
41823: PUSH
41824: LD_VAR 0 4
41828: PUSH
41829: LD_VAR 0 5
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: ST_TO_ADDR
// end ;
41840: LD_VAR 0 6
41844: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41845: LD_INT 0
41847: PPUSH
// if not chassis or not engine then
41848: LD_VAR 0 1
41852: NOT
41853: PUSH
41854: LD_VAR 0 2
41858: NOT
41859: OR
41860: IFFALSE 41864
// exit ;
41862: GO 42060
// case engine of engine_solar :
41864: LD_VAR 0 2
41868: PUSH
41869: LD_INT 2
41871: DOUBLE
41872: EQUAL
41873: IFTRUE 41877
41875: GO 41915
41877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41878: LD_ADDR_VAR 0 3
41882: PUSH
41883: LD_INT 11
41885: PUSH
41886: LD_INT 12
41888: PUSH
41889: LD_INT 13
41891: PUSH
41892: LD_INT 14
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: ST_TO_ADDR
41913: GO 42044
41915: LD_INT 1
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41923
41921: GO 41985
41923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_INT 11
41931: PUSH
41932: LD_INT 12
41934: PUSH
41935: LD_INT 13
41937: PUSH
41938: LD_INT 14
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 3
41949: PUSH
41950: LD_INT 4
41952: PUSH
41953: LD_INT 5
41955: PUSH
41956: LD_INT 21
41958: PUSH
41959: LD_INT 23
41961: PUSH
41962: LD_INT 22
41964: PUSH
41965: LD_INT 24
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: ST_TO_ADDR
41983: GO 42044
41985: LD_INT 3
41987: DOUBLE
41988: EQUAL
41989: IFTRUE 41993
41991: GO 42043
41993: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41994: LD_ADDR_VAR 0 3
41998: PUSH
41999: LD_INT 13
42001: PUSH
42002: LD_INT 14
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 3
42010: PUSH
42011: LD_INT 4
42013: PUSH
42014: LD_INT 5
42016: PUSH
42017: LD_INT 21
42019: PUSH
42020: LD_INT 22
42022: PUSH
42023: LD_INT 23
42025: PUSH
42026: LD_INT 24
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: ST_TO_ADDR
42041: GO 42044
42043: POP
// result := ( chassis in result ) ;
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_VAR 0 1
42053: PUSH
42054: LD_VAR 0 3
42058: IN
42059: ST_TO_ADDR
// end ;
42060: LD_VAR 0 3
42064: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42065: LD_INT 0
42067: PPUSH
// if not chassis or not weapon then
42068: LD_VAR 0 1
42072: NOT
42073: PUSH
42074: LD_VAR 0 2
42078: NOT
42079: OR
42080: IFFALSE 42084
// exit ;
42082: GO 43146
// case weapon of us_machine_gun :
42084: LD_VAR 0 2
42088: PUSH
42089: LD_INT 2
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42097
42095: GO 42127
42097: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42098: LD_ADDR_VAR 0 3
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: LD_INT 3
42111: PUSH
42112: LD_INT 4
42114: PUSH
42115: LD_INT 5
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: ST_TO_ADDR
42125: GO 43130
42127: LD_INT 3
42129: DOUBLE
42130: EQUAL
42131: IFTRUE 42135
42133: GO 42165
42135: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 4
42152: PUSH
42153: LD_INT 5
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: ST_TO_ADDR
42163: GO 43130
42165: LD_INT 11
42167: DOUBLE
42168: EQUAL
42169: IFTRUE 42173
42171: GO 42203
42173: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42174: LD_ADDR_VAR 0 3
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: LD_INT 4
42190: PUSH
42191: LD_INT 5
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
42201: GO 43130
42203: LD_INT 4
42205: DOUBLE
42206: EQUAL
42207: IFTRUE 42211
42209: GO 42237
42211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 3
42222: PUSH
42223: LD_INT 4
42225: PUSH
42226: LD_INT 5
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
42235: GO 43130
42237: LD_INT 5
42239: DOUBLE
42240: EQUAL
42241: IFTRUE 42245
42243: GO 42271
42245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: LD_INT 4
42259: PUSH
42260: LD_INT 5
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: ST_TO_ADDR
42269: GO 43130
42271: LD_INT 9
42273: DOUBLE
42274: EQUAL
42275: IFTRUE 42279
42277: GO 42305
42279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42280: LD_ADDR_VAR 0 3
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: LD_INT 4
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: ST_TO_ADDR
42303: GO 43130
42305: LD_INT 7
42307: DOUBLE
42308: EQUAL
42309: IFTRUE 42313
42311: GO 42339
42313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 3
42324: PUSH
42325: LD_INT 4
42327: PUSH
42328: LD_INT 5
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
42337: GO 43130
42339: LD_INT 12
42341: DOUBLE
42342: EQUAL
42343: IFTRUE 42347
42345: GO 42373
42347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42348: LD_ADDR_VAR 0 3
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 3
42358: PUSH
42359: LD_INT 4
42361: PUSH
42362: LD_INT 5
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: ST_TO_ADDR
42371: GO 43130
42373: LD_INT 13
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42407
42381: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: LD_INT 4
42395: PUSH
42396: LD_INT 5
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: ST_TO_ADDR
42405: GO 43130
42407: LD_INT 14
42409: DOUBLE
42410: EQUAL
42411: IFTRUE 42415
42413: GO 42433
42415: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42416: LD_ADDR_VAR 0 3
42420: PUSH
42421: LD_INT 4
42423: PUSH
42424: LD_INT 5
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: ST_TO_ADDR
42431: GO 43130
42433: LD_INT 6
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42441
42439: GO 42459
42441: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 4
42449: PUSH
42450: LD_INT 5
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: ST_TO_ADDR
42457: GO 43130
42459: LD_INT 10
42461: DOUBLE
42462: EQUAL
42463: IFTRUE 42467
42465: GO 42485
42467: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42468: LD_ADDR_VAR 0 3
42472: PUSH
42473: LD_INT 4
42475: PUSH
42476: LD_INT 5
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: ST_TO_ADDR
42483: GO 43130
42485: LD_INT 22
42487: DOUBLE
42488: EQUAL
42489: IFTRUE 42493
42491: GO 42519
42493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42494: LD_ADDR_VAR 0 3
42498: PUSH
42499: LD_INT 11
42501: PUSH
42502: LD_INT 12
42504: PUSH
42505: LD_INT 13
42507: PUSH
42508: LD_INT 14
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: ST_TO_ADDR
42517: GO 43130
42519: LD_INT 23
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42527
42525: GO 42553
42527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42528: LD_ADDR_VAR 0 3
42532: PUSH
42533: LD_INT 11
42535: PUSH
42536: LD_INT 12
42538: PUSH
42539: LD_INT 13
42541: PUSH
42542: LD_INT 14
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: ST_TO_ADDR
42551: GO 43130
42553: LD_INT 24
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42561
42559: GO 42587
42561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42562: LD_ADDR_VAR 0 3
42566: PUSH
42567: LD_INT 11
42569: PUSH
42570: LD_INT 12
42572: PUSH
42573: LD_INT 13
42575: PUSH
42576: LD_INT 14
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
42585: GO 43130
42587: LD_INT 30
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42595
42593: GO 42621
42595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42596: LD_ADDR_VAR 0 3
42600: PUSH
42601: LD_INT 11
42603: PUSH
42604: LD_INT 12
42606: PUSH
42607: LD_INT 13
42609: PUSH
42610: LD_INT 14
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: ST_TO_ADDR
42619: GO 43130
42621: LD_INT 25
42623: DOUBLE
42624: EQUAL
42625: IFTRUE 42629
42627: GO 42647
42629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42630: LD_ADDR_VAR 0 3
42634: PUSH
42635: LD_INT 13
42637: PUSH
42638: LD_INT 14
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: ST_TO_ADDR
42645: GO 43130
42647: LD_INT 27
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42655
42653: GO 42673
42655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42656: LD_ADDR_VAR 0 3
42660: PUSH
42661: LD_INT 13
42663: PUSH
42664: LD_INT 14
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: ST_TO_ADDR
42671: GO 43130
42673: LD_EXP 53
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42683
42681: GO 42709
42683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_INT 11
42691: PUSH
42692: LD_INT 12
42694: PUSH
42695: LD_INT 13
42697: PUSH
42698: LD_INT 14
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
42707: GO 43130
42709: LD_INT 28
42711: DOUBLE
42712: EQUAL
42713: IFTRUE 42717
42715: GO 42735
42717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42718: LD_ADDR_VAR 0 3
42722: PUSH
42723: LD_INT 13
42725: PUSH
42726: LD_INT 14
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: ST_TO_ADDR
42733: GO 43130
42735: LD_INT 29
42737: DOUBLE
42738: EQUAL
42739: IFTRUE 42743
42741: GO 42761
42743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42744: LD_ADDR_VAR 0 3
42748: PUSH
42749: LD_INT 13
42751: PUSH
42752: LD_INT 14
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: ST_TO_ADDR
42759: GO 43130
42761: LD_INT 31
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42769
42767: GO 42787
42769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_INT 13
42777: PUSH
42778: LD_INT 14
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: ST_TO_ADDR
42785: GO 43130
42787: LD_INT 26
42789: DOUBLE
42790: EQUAL
42791: IFTRUE 42795
42793: GO 42813
42795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42796: LD_ADDR_VAR 0 3
42800: PUSH
42801: LD_INT 13
42803: PUSH
42804: LD_INT 14
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: ST_TO_ADDR
42811: GO 43130
42813: LD_INT 42
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 42847
42821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_INT 21
42829: PUSH
42830: LD_INT 22
42832: PUSH
42833: LD_INT 23
42835: PUSH
42836: LD_INT 24
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: ST_TO_ADDR
42845: GO 43130
42847: LD_INT 43
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42855
42853: GO 42881
42855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42856: LD_ADDR_VAR 0 3
42860: PUSH
42861: LD_INT 21
42863: PUSH
42864: LD_INT 22
42866: PUSH
42867: LD_INT 23
42869: PUSH
42870: LD_INT 24
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: ST_TO_ADDR
42879: GO 43130
42881: LD_INT 44
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42889
42887: GO 42915
42889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42890: LD_ADDR_VAR 0 3
42894: PUSH
42895: LD_INT 21
42897: PUSH
42898: LD_INT 22
42900: PUSH
42901: LD_INT 23
42903: PUSH
42904: LD_INT 24
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
42913: GO 43130
42915: LD_INT 45
42917: DOUBLE
42918: EQUAL
42919: IFTRUE 42923
42921: GO 42949
42923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42924: LD_ADDR_VAR 0 3
42928: PUSH
42929: LD_INT 21
42931: PUSH
42932: LD_INT 22
42934: PUSH
42935: LD_INT 23
42937: PUSH
42938: LD_INT 24
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
42947: GO 43130
42949: LD_INT 49
42951: DOUBLE
42952: EQUAL
42953: IFTRUE 42957
42955: GO 42983
42957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42958: LD_ADDR_VAR 0 3
42962: PUSH
42963: LD_INT 21
42965: PUSH
42966: LD_INT 22
42968: PUSH
42969: LD_INT 23
42971: PUSH
42972: LD_INT 24
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
42981: GO 43130
42983: LD_INT 51
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 42991
42989: GO 43017
42991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: LD_INT 21
42999: PUSH
43000: LD_INT 22
43002: PUSH
43003: LD_INT 23
43005: PUSH
43006: LD_INT 24
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: ST_TO_ADDR
43015: GO 43130
43017: LD_INT 52
43019: DOUBLE
43020: EQUAL
43021: IFTRUE 43025
43023: GO 43051
43025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43026: LD_ADDR_VAR 0 3
43030: PUSH
43031: LD_INT 21
43033: PUSH
43034: LD_INT 22
43036: PUSH
43037: LD_INT 23
43039: PUSH
43040: LD_INT 24
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: ST_TO_ADDR
43049: GO 43130
43051: LD_INT 53
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43059
43057: GO 43077
43059: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43060: LD_ADDR_VAR 0 3
43064: PUSH
43065: LD_INT 23
43067: PUSH
43068: LD_INT 24
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: ST_TO_ADDR
43075: GO 43130
43077: LD_INT 46
43079: DOUBLE
43080: EQUAL
43081: IFTRUE 43085
43083: GO 43103
43085: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_INT 23
43093: PUSH
43094: LD_INT 24
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: ST_TO_ADDR
43101: GO 43130
43103: LD_INT 47
43105: DOUBLE
43106: EQUAL
43107: IFTRUE 43111
43109: GO 43129
43111: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43112: LD_ADDR_VAR 0 3
43116: PUSH
43117: LD_INT 23
43119: PUSH
43120: LD_INT 24
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: ST_TO_ADDR
43127: GO 43130
43129: POP
// result := ( chassis in result ) ;
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: LD_VAR 0 1
43139: PUSH
43140: LD_VAR 0 3
43144: IN
43145: ST_TO_ADDR
// end ;
43146: LD_VAR 0 3
43150: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43151: LD_INT 0
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
// result := array ;
43160: LD_ADDR_VAR 0 5
43164: PUSH
43165: LD_VAR 0 1
43169: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43170: LD_VAR 0 1
43174: NOT
43175: PUSH
43176: LD_VAR 0 2
43180: NOT
43181: OR
43182: PUSH
43183: LD_VAR 0 3
43187: NOT
43188: OR
43189: PUSH
43190: LD_VAR 0 2
43194: PUSH
43195: LD_VAR 0 1
43199: GREATER
43200: OR
43201: PUSH
43202: LD_VAR 0 3
43206: PUSH
43207: LD_VAR 0 1
43211: GREATER
43212: OR
43213: IFFALSE 43217
// exit ;
43215: GO 43513
// if direction then
43217: LD_VAR 0 4
43221: IFFALSE 43285
// begin d := 1 ;
43223: LD_ADDR_VAR 0 9
43227: PUSH
43228: LD_INT 1
43230: ST_TO_ADDR
// if i_from > i_to then
43231: LD_VAR 0 2
43235: PUSH
43236: LD_VAR 0 3
43240: GREATER
43241: IFFALSE 43267
// length := ( array - i_from ) + i_to else
43243: LD_ADDR_VAR 0 11
43247: PUSH
43248: LD_VAR 0 1
43252: PUSH
43253: LD_VAR 0 2
43257: MINUS
43258: PUSH
43259: LD_VAR 0 3
43263: PLUS
43264: ST_TO_ADDR
43265: GO 43283
// length := i_to - i_from ;
43267: LD_ADDR_VAR 0 11
43271: PUSH
43272: LD_VAR 0 3
43276: PUSH
43277: LD_VAR 0 2
43281: MINUS
43282: ST_TO_ADDR
// end else
43283: GO 43346
// begin d := - 1 ;
43285: LD_ADDR_VAR 0 9
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: ST_TO_ADDR
// if i_from > i_to then
43294: LD_VAR 0 2
43298: PUSH
43299: LD_VAR 0 3
43303: GREATER
43304: IFFALSE 43324
// length := i_from - i_to else
43306: LD_ADDR_VAR 0 11
43310: PUSH
43311: LD_VAR 0 2
43315: PUSH
43316: LD_VAR 0 3
43320: MINUS
43321: ST_TO_ADDR
43322: GO 43346
// length := ( array - i_to ) + i_from ;
43324: LD_ADDR_VAR 0 11
43328: PUSH
43329: LD_VAR 0 1
43333: PUSH
43334: LD_VAR 0 3
43338: MINUS
43339: PUSH
43340: LD_VAR 0 2
43344: PLUS
43345: ST_TO_ADDR
// end ; if not length then
43346: LD_VAR 0 11
43350: NOT
43351: IFFALSE 43355
// exit ;
43353: GO 43513
// tmp := array ;
43355: LD_ADDR_VAR 0 10
43359: PUSH
43360: LD_VAR 0 1
43364: ST_TO_ADDR
// for i = 1 to length do
43365: LD_ADDR_VAR 0 6
43369: PUSH
43370: DOUBLE
43371: LD_INT 1
43373: DEC
43374: ST_TO_ADDR
43375: LD_VAR 0 11
43379: PUSH
43380: FOR_TO
43381: IFFALSE 43501
// begin for j = 1 to array do
43383: LD_ADDR_VAR 0 7
43387: PUSH
43388: DOUBLE
43389: LD_INT 1
43391: DEC
43392: ST_TO_ADDR
43393: LD_VAR 0 1
43397: PUSH
43398: FOR_TO
43399: IFFALSE 43487
// begin k := j + d ;
43401: LD_ADDR_VAR 0 8
43405: PUSH
43406: LD_VAR 0 7
43410: PUSH
43411: LD_VAR 0 9
43415: PLUS
43416: ST_TO_ADDR
// if k > array then
43417: LD_VAR 0 8
43421: PUSH
43422: LD_VAR 0 1
43426: GREATER
43427: IFFALSE 43437
// k := 1 ;
43429: LD_ADDR_VAR 0 8
43433: PUSH
43434: LD_INT 1
43436: ST_TO_ADDR
// if not k then
43437: LD_VAR 0 8
43441: NOT
43442: IFFALSE 43454
// k := array ;
43444: LD_ADDR_VAR 0 8
43448: PUSH
43449: LD_VAR 0 1
43453: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43454: LD_ADDR_VAR 0 10
43458: PUSH
43459: LD_VAR 0 10
43463: PPUSH
43464: LD_VAR 0 8
43468: PPUSH
43469: LD_VAR 0 1
43473: PUSH
43474: LD_VAR 0 7
43478: ARRAY
43479: PPUSH
43480: CALL_OW 1
43484: ST_TO_ADDR
// end ;
43485: GO 43398
43487: POP
43488: POP
// array := tmp ;
43489: LD_ADDR_VAR 0 1
43493: PUSH
43494: LD_VAR 0 10
43498: ST_TO_ADDR
// end ;
43499: GO 43380
43501: POP
43502: POP
// result := array ;
43503: LD_ADDR_VAR 0 5
43507: PUSH
43508: LD_VAR 0 1
43512: ST_TO_ADDR
// end ;
43513: LD_VAR 0 5
43517: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43518: LD_INT 0
43520: PPUSH
43521: PPUSH
// result := 0 ;
43522: LD_ADDR_VAR 0 3
43526: PUSH
43527: LD_INT 0
43529: ST_TO_ADDR
// if not array or not value in array then
43530: LD_VAR 0 1
43534: NOT
43535: PUSH
43536: LD_VAR 0 2
43540: PUSH
43541: LD_VAR 0 1
43545: IN
43546: NOT
43547: OR
43548: IFFALSE 43552
// exit ;
43550: GO 43606
// for i = 1 to array do
43552: LD_ADDR_VAR 0 4
43556: PUSH
43557: DOUBLE
43558: LD_INT 1
43560: DEC
43561: ST_TO_ADDR
43562: LD_VAR 0 1
43566: PUSH
43567: FOR_TO
43568: IFFALSE 43604
// if value = array [ i ] then
43570: LD_VAR 0 2
43574: PUSH
43575: LD_VAR 0 1
43579: PUSH
43580: LD_VAR 0 4
43584: ARRAY
43585: EQUAL
43586: IFFALSE 43602
// begin result := i ;
43588: LD_ADDR_VAR 0 3
43592: PUSH
43593: LD_VAR 0 4
43597: ST_TO_ADDR
// exit ;
43598: POP
43599: POP
43600: GO 43606
// end ;
43602: GO 43567
43604: POP
43605: POP
// end ;
43606: LD_VAR 0 3
43610: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43611: LD_INT 0
43613: PPUSH
// vc_chassis := chassis ;
43614: LD_ADDR_OWVAR 37
43618: PUSH
43619: LD_VAR 0 1
43623: ST_TO_ADDR
// vc_engine := engine ;
43624: LD_ADDR_OWVAR 39
43628: PUSH
43629: LD_VAR 0 2
43633: ST_TO_ADDR
// vc_control := control ;
43634: LD_ADDR_OWVAR 38
43638: PUSH
43639: LD_VAR 0 3
43643: ST_TO_ADDR
// vc_weapon := weapon ;
43644: LD_ADDR_OWVAR 40
43648: PUSH
43649: LD_VAR 0 4
43653: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43654: LD_ADDR_OWVAR 41
43658: PUSH
43659: LD_VAR 0 5
43663: ST_TO_ADDR
// end ;
43664: LD_VAR 0 6
43668: RET
// export function WantPlant ( unit ) ; var task ; begin
43669: LD_INT 0
43671: PPUSH
43672: PPUSH
// result := false ;
43673: LD_ADDR_VAR 0 2
43677: PUSH
43678: LD_INT 0
43680: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43681: LD_ADDR_VAR 0 3
43685: PUSH
43686: LD_VAR 0 1
43690: PPUSH
43691: CALL_OW 437
43695: ST_TO_ADDR
// if task then
43696: LD_VAR 0 3
43700: IFFALSE 43728
// if task [ 1 ] [ 1 ] = p then
43702: LD_VAR 0 3
43706: PUSH
43707: LD_INT 1
43709: ARRAY
43710: PUSH
43711: LD_INT 1
43713: ARRAY
43714: PUSH
43715: LD_STRING p
43717: EQUAL
43718: IFFALSE 43728
// result := true ;
43720: LD_ADDR_VAR 0 2
43724: PUSH
43725: LD_INT 1
43727: ST_TO_ADDR
// end ;
43728: LD_VAR 0 2
43732: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43733: LD_INT 0
43735: PPUSH
43736: PPUSH
43737: PPUSH
43738: PPUSH
// if pos < 1 then
43739: LD_VAR 0 2
43743: PUSH
43744: LD_INT 1
43746: LESS
43747: IFFALSE 43751
// exit ;
43749: GO 44054
// if pos = 1 then
43751: LD_VAR 0 2
43755: PUSH
43756: LD_INT 1
43758: EQUAL
43759: IFFALSE 43792
// result := Replace ( arr , pos [ 1 ] , value ) else
43761: LD_ADDR_VAR 0 4
43765: PUSH
43766: LD_VAR 0 1
43770: PPUSH
43771: LD_VAR 0 2
43775: PUSH
43776: LD_INT 1
43778: ARRAY
43779: PPUSH
43780: LD_VAR 0 3
43784: PPUSH
43785: CALL_OW 1
43789: ST_TO_ADDR
43790: GO 44054
// begin tmp := arr ;
43792: LD_ADDR_VAR 0 6
43796: PUSH
43797: LD_VAR 0 1
43801: ST_TO_ADDR
// s_arr := [ tmp ] ;
43802: LD_ADDR_VAR 0 7
43806: PUSH
43807: LD_VAR 0 6
43811: PUSH
43812: EMPTY
43813: LIST
43814: ST_TO_ADDR
// for i = 1 to pos - 1 do
43815: LD_ADDR_VAR 0 5
43819: PUSH
43820: DOUBLE
43821: LD_INT 1
43823: DEC
43824: ST_TO_ADDR
43825: LD_VAR 0 2
43829: PUSH
43830: LD_INT 1
43832: MINUS
43833: PUSH
43834: FOR_TO
43835: IFFALSE 43880
// begin tmp := tmp [ pos [ i ] ] ;
43837: LD_ADDR_VAR 0 6
43841: PUSH
43842: LD_VAR 0 6
43846: PUSH
43847: LD_VAR 0 2
43851: PUSH
43852: LD_VAR 0 5
43856: ARRAY
43857: ARRAY
43858: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43859: LD_ADDR_VAR 0 7
43863: PUSH
43864: LD_VAR 0 7
43868: PUSH
43869: LD_VAR 0 6
43873: PUSH
43874: EMPTY
43875: LIST
43876: ADD
43877: ST_TO_ADDR
// end ;
43878: GO 43834
43880: POP
43881: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43882: LD_ADDR_VAR 0 6
43886: PUSH
43887: LD_VAR 0 6
43891: PPUSH
43892: LD_VAR 0 2
43896: PUSH
43897: LD_VAR 0 2
43901: ARRAY
43902: PPUSH
43903: LD_VAR 0 3
43907: PPUSH
43908: CALL_OW 1
43912: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43913: LD_ADDR_VAR 0 7
43917: PUSH
43918: LD_VAR 0 7
43922: PPUSH
43923: LD_VAR 0 7
43927: PPUSH
43928: LD_VAR 0 6
43932: PPUSH
43933: CALL_OW 1
43937: ST_TO_ADDR
// for i = s_arr downto 2 do
43938: LD_ADDR_VAR 0 5
43942: PUSH
43943: DOUBLE
43944: LD_VAR 0 7
43948: INC
43949: ST_TO_ADDR
43950: LD_INT 2
43952: PUSH
43953: FOR_DOWNTO
43954: IFFALSE 44038
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43956: LD_ADDR_VAR 0 6
43960: PUSH
43961: LD_VAR 0 7
43965: PUSH
43966: LD_VAR 0 5
43970: PUSH
43971: LD_INT 1
43973: MINUS
43974: ARRAY
43975: PPUSH
43976: LD_VAR 0 2
43980: PUSH
43981: LD_VAR 0 5
43985: PUSH
43986: LD_INT 1
43988: MINUS
43989: ARRAY
43990: PPUSH
43991: LD_VAR 0 7
43995: PUSH
43996: LD_VAR 0 5
44000: ARRAY
44001: PPUSH
44002: CALL_OW 1
44006: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44007: LD_ADDR_VAR 0 7
44011: PUSH
44012: LD_VAR 0 7
44016: PPUSH
44017: LD_VAR 0 5
44021: PUSH
44022: LD_INT 1
44024: MINUS
44025: PPUSH
44026: LD_VAR 0 6
44030: PPUSH
44031: CALL_OW 1
44035: ST_TO_ADDR
// end ;
44036: GO 43953
44038: POP
44039: POP
// result := s_arr [ 1 ] ;
44040: LD_ADDR_VAR 0 4
44044: PUSH
44045: LD_VAR 0 7
44049: PUSH
44050: LD_INT 1
44052: ARRAY
44053: ST_TO_ADDR
// end ; end ;
44054: LD_VAR 0 4
44058: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44059: LD_INT 0
44061: PPUSH
44062: PPUSH
// if not list then
44063: LD_VAR 0 1
44067: NOT
44068: IFFALSE 44072
// exit ;
44070: GO 44163
// i := list [ pos1 ] ;
44072: LD_ADDR_VAR 0 5
44076: PUSH
44077: LD_VAR 0 1
44081: PUSH
44082: LD_VAR 0 2
44086: ARRAY
44087: ST_TO_ADDR
// if not i then
44088: LD_VAR 0 5
44092: NOT
44093: IFFALSE 44097
// exit ;
44095: GO 44163
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44097: LD_ADDR_VAR 0 1
44101: PUSH
44102: LD_VAR 0 1
44106: PPUSH
44107: LD_VAR 0 2
44111: PPUSH
44112: LD_VAR 0 1
44116: PUSH
44117: LD_VAR 0 3
44121: ARRAY
44122: PPUSH
44123: CALL_OW 1
44127: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44128: LD_ADDR_VAR 0 1
44132: PUSH
44133: LD_VAR 0 1
44137: PPUSH
44138: LD_VAR 0 3
44142: PPUSH
44143: LD_VAR 0 5
44147: PPUSH
44148: CALL_OW 1
44152: ST_TO_ADDR
// result := list ;
44153: LD_ADDR_VAR 0 4
44157: PUSH
44158: LD_VAR 0 1
44162: ST_TO_ADDR
// end ;
44163: LD_VAR 0 4
44167: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44168: LD_INT 0
44170: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44171: LD_ADDR_VAR 0 5
44175: PUSH
44176: LD_VAR 0 1
44180: PPUSH
44181: CALL_OW 250
44185: PPUSH
44186: LD_VAR 0 1
44190: PPUSH
44191: CALL_OW 251
44195: PPUSH
44196: LD_VAR 0 2
44200: PPUSH
44201: LD_VAR 0 3
44205: PPUSH
44206: LD_VAR 0 4
44210: PPUSH
44211: CALL 44221 0 5
44215: ST_TO_ADDR
// end ;
44216: LD_VAR 0 5
44220: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44221: LD_INT 0
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
// if not list then
44227: LD_VAR 0 3
44231: NOT
44232: IFFALSE 44236
// exit ;
44234: GO 44624
// result := [ ] ;
44236: LD_ADDR_VAR 0 6
44240: PUSH
44241: EMPTY
44242: ST_TO_ADDR
// for i in list do
44243: LD_ADDR_VAR 0 7
44247: PUSH
44248: LD_VAR 0 3
44252: PUSH
44253: FOR_IN
44254: IFFALSE 44456
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44256: LD_ADDR_VAR 0 9
44260: PUSH
44261: LD_VAR 0 7
44265: PPUSH
44266: LD_VAR 0 1
44270: PPUSH
44271: LD_VAR 0 2
44275: PPUSH
44276: CALL_OW 297
44280: ST_TO_ADDR
// if not result then
44281: LD_VAR 0 6
44285: NOT
44286: IFFALSE 44312
// result := [ [ i , tmp ] ] else
44288: LD_ADDR_VAR 0 6
44292: PUSH
44293: LD_VAR 0 7
44297: PUSH
44298: LD_VAR 0 9
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: EMPTY
44308: LIST
44309: ST_TO_ADDR
44310: GO 44454
// begin if result [ result ] [ 2 ] < tmp then
44312: LD_VAR 0 6
44316: PUSH
44317: LD_VAR 0 6
44321: ARRAY
44322: PUSH
44323: LD_INT 2
44325: ARRAY
44326: PUSH
44327: LD_VAR 0 9
44331: LESS
44332: IFFALSE 44374
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44334: LD_ADDR_VAR 0 6
44338: PUSH
44339: LD_VAR 0 6
44343: PPUSH
44344: LD_VAR 0 6
44348: PUSH
44349: LD_INT 1
44351: PLUS
44352: PPUSH
44353: LD_VAR 0 7
44357: PUSH
44358: LD_VAR 0 9
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PPUSH
44367: CALL_OW 2
44371: ST_TO_ADDR
44372: GO 44454
// for j = 1 to result do
44374: LD_ADDR_VAR 0 8
44378: PUSH
44379: DOUBLE
44380: LD_INT 1
44382: DEC
44383: ST_TO_ADDR
44384: LD_VAR 0 6
44388: PUSH
44389: FOR_TO
44390: IFFALSE 44452
// begin if tmp < result [ j ] [ 2 ] then
44392: LD_VAR 0 9
44396: PUSH
44397: LD_VAR 0 6
44401: PUSH
44402: LD_VAR 0 8
44406: ARRAY
44407: PUSH
44408: LD_INT 2
44410: ARRAY
44411: LESS
44412: IFFALSE 44450
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44414: LD_ADDR_VAR 0 6
44418: PUSH
44419: LD_VAR 0 6
44423: PPUSH
44424: LD_VAR 0 8
44428: PPUSH
44429: LD_VAR 0 7
44433: PUSH
44434: LD_VAR 0 9
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PPUSH
44443: CALL_OW 2
44447: ST_TO_ADDR
// break ;
44448: GO 44452
// end ; end ;
44450: GO 44389
44452: POP
44453: POP
// end ; end ;
44454: GO 44253
44456: POP
44457: POP
// if result and not asc then
44458: LD_VAR 0 6
44462: PUSH
44463: LD_VAR 0 4
44467: NOT
44468: AND
44469: IFFALSE 44544
// begin tmp := result ;
44471: LD_ADDR_VAR 0 9
44475: PUSH
44476: LD_VAR 0 6
44480: ST_TO_ADDR
// for i = tmp downto 1 do
44481: LD_ADDR_VAR 0 7
44485: PUSH
44486: DOUBLE
44487: LD_VAR 0 9
44491: INC
44492: ST_TO_ADDR
44493: LD_INT 1
44495: PUSH
44496: FOR_DOWNTO
44497: IFFALSE 44542
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44499: LD_ADDR_VAR 0 6
44503: PUSH
44504: LD_VAR 0 6
44508: PPUSH
44509: LD_VAR 0 9
44513: PUSH
44514: LD_VAR 0 7
44518: MINUS
44519: PUSH
44520: LD_INT 1
44522: PLUS
44523: PPUSH
44524: LD_VAR 0 9
44528: PUSH
44529: LD_VAR 0 7
44533: ARRAY
44534: PPUSH
44535: CALL_OW 1
44539: ST_TO_ADDR
44540: GO 44496
44542: POP
44543: POP
// end ; tmp := [ ] ;
44544: LD_ADDR_VAR 0 9
44548: PUSH
44549: EMPTY
44550: ST_TO_ADDR
// if mode then
44551: LD_VAR 0 5
44555: IFFALSE 44624
// begin for i = 1 to result do
44557: LD_ADDR_VAR 0 7
44561: PUSH
44562: DOUBLE
44563: LD_INT 1
44565: DEC
44566: ST_TO_ADDR
44567: LD_VAR 0 6
44571: PUSH
44572: FOR_TO
44573: IFFALSE 44612
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44575: LD_ADDR_VAR 0 9
44579: PUSH
44580: LD_VAR 0 9
44584: PPUSH
44585: LD_VAR 0 7
44589: PPUSH
44590: LD_VAR 0 6
44594: PUSH
44595: LD_VAR 0 7
44599: ARRAY
44600: PUSH
44601: LD_INT 1
44603: ARRAY
44604: PPUSH
44605: CALL_OW 1
44609: ST_TO_ADDR
44610: GO 44572
44612: POP
44613: POP
// result := tmp ;
44614: LD_ADDR_VAR 0 6
44618: PUSH
44619: LD_VAR 0 9
44623: ST_TO_ADDR
// end ; end ;
44624: LD_VAR 0 6
44628: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44629: LD_INT 0
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44637: LD_ADDR_VAR 0 5
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: ST_TO_ADDR
// if not x or not y then
44659: LD_VAR 0 2
44663: NOT
44664: PUSH
44665: LD_VAR 0 3
44669: NOT
44670: OR
44671: IFFALSE 44675
// exit ;
44673: GO 46327
// if not range then
44675: LD_VAR 0 4
44679: NOT
44680: IFFALSE 44690
// range := 10 ;
44682: LD_ADDR_VAR 0 4
44686: PUSH
44687: LD_INT 10
44689: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44690: LD_ADDR_VAR 0 8
44694: PUSH
44695: LD_INT 81
44697: PUSH
44698: LD_VAR 0 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 92
44709: PUSH
44710: LD_VAR 0 2
44714: PUSH
44715: LD_VAR 0 3
44719: PUSH
44720: LD_VAR 0 4
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 3
44733: PUSH
44734: LD_INT 21
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: LIST
44752: PPUSH
44753: CALL_OW 69
44757: ST_TO_ADDR
// if not tmp then
44758: LD_VAR 0 8
44762: NOT
44763: IFFALSE 44767
// exit ;
44765: GO 46327
// for i in tmp do
44767: LD_ADDR_VAR 0 6
44771: PUSH
44772: LD_VAR 0 8
44776: PUSH
44777: FOR_IN
44778: IFFALSE 46302
// begin points := [ 0 , 0 , 0 ] ;
44780: LD_ADDR_VAR 0 9
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// bpoints := 1 ;
44799: LD_ADDR_VAR 0 10
44803: PUSH
44804: LD_INT 1
44806: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44807: LD_VAR 0 6
44811: PPUSH
44812: CALL_OW 247
44816: PUSH
44817: LD_INT 1
44819: DOUBLE
44820: EQUAL
44821: IFTRUE 44825
44823: GO 45403
44825: POP
// begin if GetClass ( i ) = 1 then
44826: LD_VAR 0 6
44830: PPUSH
44831: CALL_OW 257
44835: PUSH
44836: LD_INT 1
44838: EQUAL
44839: IFFALSE 44860
// points := [ 10 , 5 , 3 ] ;
44841: LD_ADDR_VAR 0 9
44845: PUSH
44846: LD_INT 10
44848: PUSH
44849: LD_INT 5
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44860: LD_VAR 0 6
44864: PPUSH
44865: CALL_OW 257
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 3
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: IN
44884: IFFALSE 44905
// points := [ 3 , 2 , 1 ] ;
44886: LD_ADDR_VAR 0 9
44890: PUSH
44891: LD_INT 3
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44905: LD_VAR 0 6
44909: PPUSH
44910: CALL_OW 257
44914: PUSH
44915: LD_INT 5
44917: EQUAL
44918: IFFALSE 44939
// points := [ 130 , 5 , 2 ] ;
44920: LD_ADDR_VAR 0 9
44924: PUSH
44925: LD_INT 130
44927: PUSH
44928: LD_INT 5
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44939: LD_VAR 0 6
44943: PPUSH
44944: CALL_OW 257
44948: PUSH
44949: LD_INT 8
44951: EQUAL
44952: IFFALSE 44973
// points := [ 35 , 35 , 30 ] ;
44954: LD_ADDR_VAR 0 9
44958: PUSH
44959: LD_INT 35
44961: PUSH
44962: LD_INT 35
44964: PUSH
44965: LD_INT 30
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44973: LD_VAR 0 6
44977: PPUSH
44978: CALL_OW 257
44982: PUSH
44983: LD_INT 9
44985: EQUAL
44986: IFFALSE 45007
// points := [ 20 , 55 , 40 ] ;
44988: LD_ADDR_VAR 0 9
44992: PUSH
44993: LD_INT 20
44995: PUSH
44996: LD_INT 55
44998: PUSH
44999: LD_INT 40
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45007: LD_VAR 0 6
45011: PPUSH
45012: CALL_OW 257
45016: PUSH
45017: LD_INT 12
45019: PUSH
45020: LD_INT 16
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: IN
45027: IFFALSE 45048
// points := [ 5 , 3 , 2 ] ;
45029: LD_ADDR_VAR 0 9
45033: PUSH
45034: LD_INT 5
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45048: LD_VAR 0 6
45052: PPUSH
45053: CALL_OW 257
45057: PUSH
45058: LD_INT 17
45060: EQUAL
45061: IFFALSE 45082
// points := [ 100 , 50 , 75 ] ;
45063: LD_ADDR_VAR 0 9
45067: PUSH
45068: LD_INT 100
45070: PUSH
45071: LD_INT 50
45073: PUSH
45074: LD_INT 75
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45082: LD_VAR 0 6
45086: PPUSH
45087: CALL_OW 257
45091: PUSH
45092: LD_INT 15
45094: EQUAL
45095: IFFALSE 45116
// points := [ 10 , 5 , 3 ] ;
45097: LD_ADDR_VAR 0 9
45101: PUSH
45102: LD_INT 10
45104: PUSH
45105: LD_INT 5
45107: PUSH
45108: LD_INT 3
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45116: LD_VAR 0 6
45120: PPUSH
45121: CALL_OW 257
45125: PUSH
45126: LD_INT 14
45128: EQUAL
45129: IFFALSE 45150
// points := [ 10 , 0 , 0 ] ;
45131: LD_ADDR_VAR 0 9
45135: PUSH
45136: LD_INT 10
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45150: LD_VAR 0 6
45154: PPUSH
45155: CALL_OW 257
45159: PUSH
45160: LD_INT 11
45162: EQUAL
45163: IFFALSE 45184
// points := [ 30 , 10 , 5 ] ;
45165: LD_ADDR_VAR 0 9
45169: PUSH
45170: LD_INT 30
45172: PUSH
45173: LD_INT 10
45175: PUSH
45176: LD_INT 5
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45184: LD_VAR 0 1
45188: PPUSH
45189: LD_INT 5
45191: PPUSH
45192: CALL_OW 321
45196: PUSH
45197: LD_INT 2
45199: EQUAL
45200: IFFALSE 45217
// bpoints := bpoints * 1.8 ;
45202: LD_ADDR_VAR 0 10
45206: PUSH
45207: LD_VAR 0 10
45211: PUSH
45212: LD_REAL  1.80000000000000E+0000
45215: MUL
45216: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45217: LD_VAR 0 6
45221: PPUSH
45222: CALL_OW 257
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: LD_INT 3
45235: PUSH
45236: LD_INT 4
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: IN
45245: PUSH
45246: LD_VAR 0 1
45250: PPUSH
45251: LD_INT 51
45253: PPUSH
45254: CALL_OW 321
45258: PUSH
45259: LD_INT 2
45261: EQUAL
45262: AND
45263: IFFALSE 45280
// bpoints := bpoints * 1.2 ;
45265: LD_ADDR_VAR 0 10
45269: PUSH
45270: LD_VAR 0 10
45274: PUSH
45275: LD_REAL  1.20000000000000E+0000
45278: MUL
45279: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45280: LD_VAR 0 6
45284: PPUSH
45285: CALL_OW 257
45289: PUSH
45290: LD_INT 5
45292: PUSH
45293: LD_INT 7
45295: PUSH
45296: LD_INT 9
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: IN
45304: PUSH
45305: LD_VAR 0 1
45309: PPUSH
45310: LD_INT 52
45312: PPUSH
45313: CALL_OW 321
45317: PUSH
45318: LD_INT 2
45320: EQUAL
45321: AND
45322: IFFALSE 45339
// bpoints := bpoints * 1.5 ;
45324: LD_ADDR_VAR 0 10
45328: PUSH
45329: LD_VAR 0 10
45333: PUSH
45334: LD_REAL  1.50000000000000E+0000
45337: MUL
45338: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45339: LD_VAR 0 1
45343: PPUSH
45344: LD_INT 66
45346: PPUSH
45347: CALL_OW 321
45351: PUSH
45352: LD_INT 2
45354: EQUAL
45355: IFFALSE 45372
// bpoints := bpoints * 1.1 ;
45357: LD_ADDR_VAR 0 10
45361: PUSH
45362: LD_VAR 0 10
45366: PUSH
45367: LD_REAL  1.10000000000000E+0000
45370: MUL
45371: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45372: LD_ADDR_VAR 0 10
45376: PUSH
45377: LD_VAR 0 10
45381: PUSH
45382: LD_VAR 0 6
45386: PPUSH
45387: LD_INT 1
45389: PPUSH
45390: CALL_OW 259
45394: PUSH
45395: LD_REAL  1.15000000000000E+0000
45398: MUL
45399: MUL
45400: ST_TO_ADDR
// end ; unit_vehicle :
45401: GO 46231
45403: LD_INT 2
45405: DOUBLE
45406: EQUAL
45407: IFTRUE 45411
45409: GO 46219
45411: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45412: LD_VAR 0 6
45416: PPUSH
45417: CALL_OW 264
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 42
45427: PUSH
45428: LD_INT 24
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: IN
45436: IFFALSE 45457
// points := [ 25 , 5 , 3 ] ;
45438: LD_ADDR_VAR 0 9
45442: PUSH
45443: LD_INT 25
45445: PUSH
45446: LD_INT 5
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45457: LD_VAR 0 6
45461: PPUSH
45462: CALL_OW 264
45466: PUSH
45467: LD_INT 4
45469: PUSH
45470: LD_INT 43
45472: PUSH
45473: LD_INT 25
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: IN
45481: IFFALSE 45502
// points := [ 40 , 15 , 5 ] ;
45483: LD_ADDR_VAR 0 9
45487: PUSH
45488: LD_INT 40
45490: PUSH
45491: LD_INT 15
45493: PUSH
45494: LD_INT 5
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45502: LD_VAR 0 6
45506: PPUSH
45507: CALL_OW 264
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: LD_INT 23
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: IN
45522: IFFALSE 45543
// points := [ 7 , 25 , 8 ] ;
45524: LD_ADDR_VAR 0 9
45528: PUSH
45529: LD_INT 7
45531: PUSH
45532: LD_INT 25
45534: PUSH
45535: LD_INT 8
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45543: LD_VAR 0 6
45547: PPUSH
45548: CALL_OW 264
45552: PUSH
45553: LD_INT 5
45555: PUSH
45556: LD_INT 27
45558: PUSH
45559: LD_INT 44
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: IN
45567: IFFALSE 45588
// points := [ 14 , 50 , 16 ] ;
45569: LD_ADDR_VAR 0 9
45573: PUSH
45574: LD_INT 14
45576: PUSH
45577: LD_INT 50
45579: PUSH
45580: LD_INT 16
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: LIST
45587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45588: LD_VAR 0 6
45592: PPUSH
45593: CALL_OW 264
45597: PUSH
45598: LD_INT 6
45600: PUSH
45601: LD_INT 46
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: IN
45608: IFFALSE 45629
// points := [ 32 , 120 , 70 ] ;
45610: LD_ADDR_VAR 0 9
45614: PUSH
45615: LD_INT 32
45617: PUSH
45618: LD_INT 120
45620: PUSH
45621: LD_INT 70
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45629: LD_VAR 0 6
45633: PPUSH
45634: CALL_OW 264
45638: PUSH
45639: LD_INT 7
45641: PUSH
45642: LD_INT 28
45644: PUSH
45645: LD_INT 45
45647: PUSH
45648: LD_EXP 53
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: IN
45659: IFFALSE 45680
// points := [ 35 , 20 , 45 ] ;
45661: LD_ADDR_VAR 0 9
45665: PUSH
45666: LD_INT 35
45668: PUSH
45669: LD_INT 20
45671: PUSH
45672: LD_INT 45
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45680: LD_VAR 0 6
45684: PPUSH
45685: CALL_OW 264
45689: PUSH
45690: LD_INT 47
45692: PUSH
45693: EMPTY
45694: LIST
45695: IN
45696: IFFALSE 45717
// points := [ 67 , 45 , 75 ] ;
45698: LD_ADDR_VAR 0 9
45702: PUSH
45703: LD_INT 67
45705: PUSH
45706: LD_INT 45
45708: PUSH
45709: LD_INT 75
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45717: LD_VAR 0 6
45721: PPUSH
45722: CALL_OW 264
45726: PUSH
45727: LD_INT 26
45729: PUSH
45730: EMPTY
45731: LIST
45732: IN
45733: IFFALSE 45754
// points := [ 120 , 30 , 80 ] ;
45735: LD_ADDR_VAR 0 9
45739: PUSH
45740: LD_INT 120
45742: PUSH
45743: LD_INT 30
45745: PUSH
45746: LD_INT 80
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45754: LD_VAR 0 6
45758: PPUSH
45759: CALL_OW 264
45763: PUSH
45764: LD_INT 22
45766: PUSH
45767: EMPTY
45768: LIST
45769: IN
45770: IFFALSE 45791
// points := [ 40 , 1 , 1 ] ;
45772: LD_ADDR_VAR 0 9
45776: PUSH
45777: LD_INT 40
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45791: LD_VAR 0 6
45795: PPUSH
45796: CALL_OW 264
45800: PUSH
45801: LD_INT 29
45803: PUSH
45804: EMPTY
45805: LIST
45806: IN
45807: IFFALSE 45828
// points := [ 70 , 200 , 400 ] ;
45809: LD_ADDR_VAR 0 9
45813: PUSH
45814: LD_INT 70
45816: PUSH
45817: LD_INT 200
45819: PUSH
45820: LD_INT 400
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: LIST
45827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45828: LD_VAR 0 6
45832: PPUSH
45833: CALL_OW 264
45837: PUSH
45838: LD_INT 14
45840: PUSH
45841: LD_INT 53
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: IN
45848: IFFALSE 45869
// points := [ 40 , 10 , 20 ] ;
45850: LD_ADDR_VAR 0 9
45854: PUSH
45855: LD_INT 40
45857: PUSH
45858: LD_INT 10
45860: PUSH
45861: LD_INT 20
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: LIST
45868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45869: LD_VAR 0 6
45873: PPUSH
45874: CALL_OW 264
45878: PUSH
45879: LD_INT 9
45881: PUSH
45882: EMPTY
45883: LIST
45884: IN
45885: IFFALSE 45906
// points := [ 5 , 70 , 20 ] ;
45887: LD_ADDR_VAR 0 9
45891: PUSH
45892: LD_INT 5
45894: PUSH
45895: LD_INT 70
45897: PUSH
45898: LD_INT 20
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45906: LD_VAR 0 6
45910: PPUSH
45911: CALL_OW 264
45915: PUSH
45916: LD_INT 10
45918: PUSH
45919: EMPTY
45920: LIST
45921: IN
45922: IFFALSE 45943
// points := [ 35 , 110 , 70 ] ;
45924: LD_ADDR_VAR 0 9
45928: PUSH
45929: LD_INT 35
45931: PUSH
45932: LD_INT 110
45934: PUSH
45935: LD_INT 70
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45943: LD_VAR 0 6
45947: PPUSH
45948: CALL_OW 265
45952: PUSH
45953: LD_INT 25
45955: EQUAL
45956: IFFALSE 45977
// points := [ 80 , 65 , 100 ] ;
45958: LD_ADDR_VAR 0 9
45962: PUSH
45963: LD_INT 80
45965: PUSH
45966: LD_INT 65
45968: PUSH
45969: LD_INT 100
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 263
45986: PUSH
45987: LD_INT 1
45989: EQUAL
45990: IFFALSE 46025
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45992: LD_ADDR_VAR 0 10
45996: PUSH
45997: LD_VAR 0 10
46001: PUSH
46002: LD_VAR 0 6
46006: PPUSH
46007: CALL_OW 311
46011: PPUSH
46012: LD_INT 3
46014: PPUSH
46015: CALL_OW 259
46019: PUSH
46020: LD_INT 4
46022: MUL
46023: MUL
46024: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46025: LD_VAR 0 6
46029: PPUSH
46030: CALL_OW 263
46034: PUSH
46035: LD_INT 2
46037: EQUAL
46038: IFFALSE 46089
// begin j := IsControledBy ( i ) ;
46040: LD_ADDR_VAR 0 7
46044: PUSH
46045: LD_VAR 0 6
46049: PPUSH
46050: CALL_OW 312
46054: ST_TO_ADDR
// if j then
46055: LD_VAR 0 7
46059: IFFALSE 46089
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46061: LD_ADDR_VAR 0 10
46065: PUSH
46066: LD_VAR 0 10
46070: PUSH
46071: LD_VAR 0 7
46075: PPUSH
46076: LD_INT 3
46078: PPUSH
46079: CALL_OW 259
46083: PUSH
46084: LD_INT 3
46086: MUL
46087: MUL
46088: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46089: LD_VAR 0 6
46093: PPUSH
46094: CALL_OW 264
46098: PUSH
46099: LD_INT 5
46101: PUSH
46102: LD_INT 6
46104: PUSH
46105: LD_INT 46
46107: PUSH
46108: LD_INT 44
46110: PUSH
46111: LD_INT 47
46113: PUSH
46114: LD_INT 45
46116: PUSH
46117: LD_INT 28
46119: PUSH
46120: LD_INT 7
46122: PUSH
46123: LD_INT 27
46125: PUSH
46126: LD_INT 29
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: IN
46141: PUSH
46142: LD_VAR 0 1
46146: PPUSH
46147: LD_INT 52
46149: PPUSH
46150: CALL_OW 321
46154: PUSH
46155: LD_INT 2
46157: EQUAL
46158: AND
46159: IFFALSE 46176
// bpoints := bpoints * 1.2 ;
46161: LD_ADDR_VAR 0 10
46165: PUSH
46166: LD_VAR 0 10
46170: PUSH
46171: LD_REAL  1.20000000000000E+0000
46174: MUL
46175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46176: LD_VAR 0 6
46180: PPUSH
46181: CALL_OW 264
46185: PUSH
46186: LD_INT 6
46188: PUSH
46189: LD_INT 46
46191: PUSH
46192: LD_INT 47
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: IN
46200: IFFALSE 46217
// bpoints := bpoints * 1.2 ;
46202: LD_ADDR_VAR 0 10
46206: PUSH
46207: LD_VAR 0 10
46211: PUSH
46212: LD_REAL  1.20000000000000E+0000
46215: MUL
46216: ST_TO_ADDR
// end ; unit_building :
46217: GO 46231
46219: LD_INT 3
46221: DOUBLE
46222: EQUAL
46223: IFTRUE 46227
46225: GO 46230
46227: POP
// ; end ;
46228: GO 46231
46230: POP
// for j = 1 to 3 do
46231: LD_ADDR_VAR 0 7
46235: PUSH
46236: DOUBLE
46237: LD_INT 1
46239: DEC
46240: ST_TO_ADDR
46241: LD_INT 3
46243: PUSH
46244: FOR_TO
46245: IFFALSE 46298
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46247: LD_ADDR_VAR 0 5
46251: PUSH
46252: LD_VAR 0 5
46256: PPUSH
46257: LD_VAR 0 7
46261: PPUSH
46262: LD_VAR 0 5
46266: PUSH
46267: LD_VAR 0 7
46271: ARRAY
46272: PUSH
46273: LD_VAR 0 9
46277: PUSH
46278: LD_VAR 0 7
46282: ARRAY
46283: PUSH
46284: LD_VAR 0 10
46288: MUL
46289: PLUS
46290: PPUSH
46291: CALL_OW 1
46295: ST_TO_ADDR
46296: GO 46244
46298: POP
46299: POP
// end ;
46300: GO 44777
46302: POP
46303: POP
// result := Replace ( result , 4 , tmp ) ;
46304: LD_ADDR_VAR 0 5
46308: PUSH
46309: LD_VAR 0 5
46313: PPUSH
46314: LD_INT 4
46316: PPUSH
46317: LD_VAR 0 8
46321: PPUSH
46322: CALL_OW 1
46326: ST_TO_ADDR
// end ;
46327: LD_VAR 0 5
46331: RET
// export function DangerAtRange ( unit , range ) ; begin
46332: LD_INT 0
46334: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46335: LD_ADDR_VAR 0 3
46339: PUSH
46340: LD_VAR 0 1
46344: PPUSH
46345: CALL_OW 255
46349: PPUSH
46350: LD_VAR 0 1
46354: PPUSH
46355: CALL_OW 250
46359: PPUSH
46360: LD_VAR 0 1
46364: PPUSH
46365: CALL_OW 251
46369: PPUSH
46370: LD_VAR 0 2
46374: PPUSH
46375: CALL 44629 0 4
46379: ST_TO_ADDR
// end ;
46380: LD_VAR 0 3
46384: RET
// export function DangerInArea ( side , area ) ; begin
46385: LD_INT 0
46387: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46388: LD_ADDR_VAR 0 3
46392: PUSH
46393: LD_VAR 0 2
46397: PPUSH
46398: LD_INT 81
46400: PUSH
46401: LD_VAR 0 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PPUSH
46410: CALL_OW 70
46414: ST_TO_ADDR
// end ;
46415: LD_VAR 0 3
46419: RET
// export function IsExtension ( b ) ; begin
46420: LD_INT 0
46422: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46423: LD_ADDR_VAR 0 2
46427: PUSH
46428: LD_VAR 0 1
46432: PUSH
46433: LD_INT 23
46435: PUSH
46436: LD_INT 20
46438: PUSH
46439: LD_INT 22
46441: PUSH
46442: LD_INT 17
46444: PUSH
46445: LD_INT 24
46447: PUSH
46448: LD_INT 21
46450: PUSH
46451: LD_INT 19
46453: PUSH
46454: LD_INT 16
46456: PUSH
46457: LD_INT 25
46459: PUSH
46460: LD_INT 18
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: IN
46475: ST_TO_ADDR
// end ;
46476: LD_VAR 0 2
46480: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46481: LD_INT 0
46483: PPUSH
46484: PPUSH
46485: PPUSH
// result := [ ] ;
46486: LD_ADDR_VAR 0 4
46490: PUSH
46491: EMPTY
46492: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46493: LD_ADDR_VAR 0 5
46497: PUSH
46498: LD_VAR 0 2
46502: PPUSH
46503: LD_INT 21
46505: PUSH
46506: LD_INT 3
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PPUSH
46513: CALL_OW 70
46517: ST_TO_ADDR
// if not tmp then
46518: LD_VAR 0 5
46522: NOT
46523: IFFALSE 46527
// exit ;
46525: GO 46591
// if checkLink then
46527: LD_VAR 0 3
46531: IFFALSE 46581
// begin for i in tmp do
46533: LD_ADDR_VAR 0 6
46537: PUSH
46538: LD_VAR 0 5
46542: PUSH
46543: FOR_IN
46544: IFFALSE 46579
// if GetBase ( i ) <> base then
46546: LD_VAR 0 6
46550: PPUSH
46551: CALL_OW 274
46555: PUSH
46556: LD_VAR 0 1
46560: NONEQUAL
46561: IFFALSE 46577
// ComLinkToBase ( base , i ) ;
46563: LD_VAR 0 1
46567: PPUSH
46568: LD_VAR 0 6
46572: PPUSH
46573: CALL_OW 169
46577: GO 46543
46579: POP
46580: POP
// end ; result := tmp ;
46581: LD_ADDR_VAR 0 4
46585: PUSH
46586: LD_VAR 0 5
46590: ST_TO_ADDR
// end ;
46591: LD_VAR 0 4
46595: RET
// export function ComComplete ( units , b ) ; var i ; begin
46596: LD_INT 0
46598: PPUSH
46599: PPUSH
// if not units then
46600: LD_VAR 0 1
46604: NOT
46605: IFFALSE 46609
// exit ;
46607: GO 46699
// for i in units do
46609: LD_ADDR_VAR 0 4
46613: PUSH
46614: LD_VAR 0 1
46618: PUSH
46619: FOR_IN
46620: IFFALSE 46697
// if BuildingStatus ( b ) = bs_build then
46622: LD_VAR 0 2
46626: PPUSH
46627: CALL_OW 461
46631: PUSH
46632: LD_INT 1
46634: EQUAL
46635: IFFALSE 46695
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46637: LD_VAR 0 4
46641: PPUSH
46642: LD_STRING h
46644: PUSH
46645: LD_VAR 0 2
46649: PPUSH
46650: CALL_OW 250
46654: PUSH
46655: LD_VAR 0 2
46659: PPUSH
46660: CALL_OW 251
46664: PUSH
46665: LD_VAR 0 2
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: PUSH
46688: EMPTY
46689: LIST
46690: PPUSH
46691: CALL_OW 446
46695: GO 46619
46697: POP
46698: POP
// end ;
46699: LD_VAR 0 3
46703: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46704: LD_INT 0
46706: PPUSH
46707: PPUSH
46708: PPUSH
46709: PPUSH
46710: PPUSH
46711: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46712: LD_VAR 0 1
46716: NOT
46717: PUSH
46718: LD_VAR 0 1
46722: PPUSH
46723: CALL_OW 263
46727: PUSH
46728: LD_INT 2
46730: NONEQUAL
46731: OR
46732: IFFALSE 46736
// exit ;
46734: GO 47052
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46736: LD_ADDR_VAR 0 6
46740: PUSH
46741: LD_INT 22
46743: PUSH
46744: LD_VAR 0 1
46748: PPUSH
46749: CALL_OW 255
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: LD_INT 30
46763: PUSH
46764: LD_INT 36
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 34
46773: PUSH
46774: LD_INT 31
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PPUSH
46790: CALL_OW 69
46794: ST_TO_ADDR
// if not tmp then
46795: LD_VAR 0 6
46799: NOT
46800: IFFALSE 46804
// exit ;
46802: GO 47052
// result := [ ] ;
46804: LD_ADDR_VAR 0 2
46808: PUSH
46809: EMPTY
46810: ST_TO_ADDR
// for i in tmp do
46811: LD_ADDR_VAR 0 3
46815: PUSH
46816: LD_VAR 0 6
46820: PUSH
46821: FOR_IN
46822: IFFALSE 46893
// begin t := UnitsInside ( i ) ;
46824: LD_ADDR_VAR 0 4
46828: PUSH
46829: LD_VAR 0 3
46833: PPUSH
46834: CALL_OW 313
46838: ST_TO_ADDR
// if t then
46839: LD_VAR 0 4
46843: IFFALSE 46891
// for j in t do
46845: LD_ADDR_VAR 0 7
46849: PUSH
46850: LD_VAR 0 4
46854: PUSH
46855: FOR_IN
46856: IFFALSE 46889
// result := Replace ( result , result + 1 , j ) ;
46858: LD_ADDR_VAR 0 2
46862: PUSH
46863: LD_VAR 0 2
46867: PPUSH
46868: LD_VAR 0 2
46872: PUSH
46873: LD_INT 1
46875: PLUS
46876: PPUSH
46877: LD_VAR 0 7
46881: PPUSH
46882: CALL_OW 1
46886: ST_TO_ADDR
46887: GO 46855
46889: POP
46890: POP
// end ;
46891: GO 46821
46893: POP
46894: POP
// if not result then
46895: LD_VAR 0 2
46899: NOT
46900: IFFALSE 46904
// exit ;
46902: GO 47052
// mech := result [ 1 ] ;
46904: LD_ADDR_VAR 0 5
46908: PUSH
46909: LD_VAR 0 2
46913: PUSH
46914: LD_INT 1
46916: ARRAY
46917: ST_TO_ADDR
// if result > 1 then
46918: LD_VAR 0 2
46922: PUSH
46923: LD_INT 1
46925: GREATER
46926: IFFALSE 47038
// begin for i = 2 to result do
46928: LD_ADDR_VAR 0 3
46932: PUSH
46933: DOUBLE
46934: LD_INT 2
46936: DEC
46937: ST_TO_ADDR
46938: LD_VAR 0 2
46942: PUSH
46943: FOR_TO
46944: IFFALSE 47036
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46946: LD_ADDR_VAR 0 4
46950: PUSH
46951: LD_VAR 0 2
46955: PUSH
46956: LD_VAR 0 3
46960: ARRAY
46961: PPUSH
46962: LD_INT 3
46964: PPUSH
46965: CALL_OW 259
46969: PUSH
46970: LD_VAR 0 2
46974: PUSH
46975: LD_VAR 0 3
46979: ARRAY
46980: PPUSH
46981: CALL_OW 432
46985: MINUS
46986: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46987: LD_VAR 0 4
46991: PUSH
46992: LD_VAR 0 5
46996: PPUSH
46997: LD_INT 3
46999: PPUSH
47000: CALL_OW 259
47004: PUSH
47005: LD_VAR 0 5
47009: PPUSH
47010: CALL_OW 432
47014: MINUS
47015: GREATEREQUAL
47016: IFFALSE 47034
// mech := result [ i ] ;
47018: LD_ADDR_VAR 0 5
47022: PUSH
47023: LD_VAR 0 2
47027: PUSH
47028: LD_VAR 0 3
47032: ARRAY
47033: ST_TO_ADDR
// end ;
47034: GO 46943
47036: POP
47037: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47038: LD_VAR 0 1
47042: PPUSH
47043: LD_VAR 0 5
47047: PPUSH
47048: CALL_OW 135
// end ;
47052: LD_VAR 0 2
47056: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47057: LD_INT 0
47059: PPUSH
47060: PPUSH
47061: PPUSH
47062: PPUSH
47063: PPUSH
47064: PPUSH
47065: PPUSH
47066: PPUSH
47067: PPUSH
47068: PPUSH
47069: PPUSH
47070: PPUSH
47071: PPUSH
// result := [ ] ;
47072: LD_ADDR_VAR 0 7
47076: PUSH
47077: EMPTY
47078: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47079: LD_VAR 0 1
47083: PPUSH
47084: CALL_OW 266
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: IN
47099: NOT
47100: IFFALSE 47104
// exit ;
47102: GO 48738
// if name then
47104: LD_VAR 0 3
47108: IFFALSE 47124
// SetBName ( base_dep , name ) ;
47110: LD_VAR 0 1
47114: PPUSH
47115: LD_VAR 0 3
47119: PPUSH
47120: CALL_OW 500
// base := GetBase ( base_dep ) ;
47124: LD_ADDR_VAR 0 15
47128: PUSH
47129: LD_VAR 0 1
47133: PPUSH
47134: CALL_OW 274
47138: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47139: LD_ADDR_VAR 0 16
47143: PUSH
47144: LD_VAR 0 1
47148: PPUSH
47149: CALL_OW 255
47153: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47154: LD_ADDR_VAR 0 17
47158: PUSH
47159: LD_VAR 0 1
47163: PPUSH
47164: CALL_OW 248
47168: ST_TO_ADDR
// if sources then
47169: LD_VAR 0 5
47173: IFFALSE 47220
// for i = 1 to 3 do
47175: LD_ADDR_VAR 0 8
47179: PUSH
47180: DOUBLE
47181: LD_INT 1
47183: DEC
47184: ST_TO_ADDR
47185: LD_INT 3
47187: PUSH
47188: FOR_TO
47189: IFFALSE 47218
// AddResourceType ( base , i , sources [ i ] ) ;
47191: LD_VAR 0 15
47195: PPUSH
47196: LD_VAR 0 8
47200: PPUSH
47201: LD_VAR 0 5
47205: PUSH
47206: LD_VAR 0 8
47210: ARRAY
47211: PPUSH
47212: CALL_OW 276
47216: GO 47188
47218: POP
47219: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47220: LD_ADDR_VAR 0 18
47224: PUSH
47225: LD_VAR 0 15
47229: PPUSH
47230: LD_VAR 0 2
47234: PPUSH
47235: LD_INT 1
47237: PPUSH
47238: CALL 46481 0 3
47242: ST_TO_ADDR
// InitHc ;
47243: CALL_OW 19
// InitUc ;
47247: CALL_OW 18
// uc_side := side ;
47251: LD_ADDR_OWVAR 20
47255: PUSH
47256: LD_VAR 0 16
47260: ST_TO_ADDR
// uc_nation := nation ;
47261: LD_ADDR_OWVAR 21
47265: PUSH
47266: LD_VAR 0 17
47270: ST_TO_ADDR
// if buildings then
47271: LD_VAR 0 18
47275: IFFALSE 48597
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47277: LD_ADDR_VAR 0 19
47281: PUSH
47282: LD_VAR 0 18
47286: PPUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 30
47292: PUSH
47293: LD_INT 29
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 30
47302: PUSH
47303: LD_INT 30
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: PPUSH
47315: CALL_OW 72
47319: ST_TO_ADDR
// if tmp then
47320: LD_VAR 0 19
47324: IFFALSE 47372
// for i in tmp do
47326: LD_ADDR_VAR 0 8
47330: PUSH
47331: LD_VAR 0 19
47335: PUSH
47336: FOR_IN
47337: IFFALSE 47370
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47339: LD_VAR 0 8
47343: PPUSH
47344: CALL_OW 250
47348: PPUSH
47349: LD_VAR 0 8
47353: PPUSH
47354: CALL_OW 251
47358: PPUSH
47359: LD_VAR 0 16
47363: PPUSH
47364: CALL_OW 441
47368: GO 47336
47370: POP
47371: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47372: LD_VAR 0 18
47376: PPUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 30
47382: PUSH
47383: LD_INT 32
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 30
47392: PUSH
47393: LD_INT 33
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: PPUSH
47405: CALL_OW 72
47409: IFFALSE 47497
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47411: LD_ADDR_VAR 0 8
47415: PUSH
47416: LD_VAR 0 18
47420: PPUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 30
47426: PUSH
47427: LD_INT 32
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 30
47436: PUSH
47437: LD_INT 33
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: PPUSH
47449: CALL_OW 72
47453: PUSH
47454: FOR_IN
47455: IFFALSE 47495
// begin if not GetBWeapon ( i ) then
47457: LD_VAR 0 8
47461: PPUSH
47462: CALL_OW 269
47466: NOT
47467: IFFALSE 47493
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47469: LD_VAR 0 8
47473: PPUSH
47474: LD_VAR 0 8
47478: PPUSH
47479: LD_VAR 0 2
47483: PPUSH
47484: CALL 48743 0 2
47488: PPUSH
47489: CALL_OW 431
// end ;
47493: GO 47454
47495: POP
47496: POP
// end ; for i = 1 to personel do
47497: LD_ADDR_VAR 0 8
47501: PUSH
47502: DOUBLE
47503: LD_INT 1
47505: DEC
47506: ST_TO_ADDR
47507: LD_VAR 0 6
47511: PUSH
47512: FOR_TO
47513: IFFALSE 48577
// begin if i > 4 then
47515: LD_VAR 0 8
47519: PUSH
47520: LD_INT 4
47522: GREATER
47523: IFFALSE 47527
// break ;
47525: GO 48577
// case i of 1 :
47527: LD_VAR 0 8
47531: PUSH
47532: LD_INT 1
47534: DOUBLE
47535: EQUAL
47536: IFTRUE 47540
47538: GO 47620
47540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47541: LD_ADDR_VAR 0 12
47545: PUSH
47546: LD_VAR 0 18
47550: PPUSH
47551: LD_INT 22
47553: PUSH
47554: LD_VAR 0 16
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 58
47565: PUSH
47566: EMPTY
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: LD_INT 30
47574: PUSH
47575: LD_INT 32
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 30
47584: PUSH
47585: LD_INT 4
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 30
47594: PUSH
47595: LD_INT 5
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: PPUSH
47613: CALL_OW 72
47617: ST_TO_ADDR
47618: GO 47842
47620: LD_INT 2
47622: DOUBLE
47623: EQUAL
47624: IFTRUE 47628
47626: GO 47690
47628: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47629: LD_ADDR_VAR 0 12
47633: PUSH
47634: LD_VAR 0 18
47638: PPUSH
47639: LD_INT 22
47641: PUSH
47642: LD_VAR 0 16
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 30
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 30
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PPUSH
47683: CALL_OW 72
47687: ST_TO_ADDR
47688: GO 47842
47690: LD_INT 3
47692: DOUBLE
47693: EQUAL
47694: IFTRUE 47698
47696: GO 47760
47698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47699: LD_ADDR_VAR 0 12
47703: PUSH
47704: LD_VAR 0 18
47708: PPUSH
47709: LD_INT 22
47711: PUSH
47712: LD_VAR 0 16
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 30
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 30
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PPUSH
47753: CALL_OW 72
47757: ST_TO_ADDR
47758: GO 47842
47760: LD_INT 4
47762: DOUBLE
47763: EQUAL
47764: IFTRUE 47768
47766: GO 47841
47768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47769: LD_ADDR_VAR 0 12
47773: PUSH
47774: LD_VAR 0 18
47778: PPUSH
47779: LD_INT 22
47781: PUSH
47782: LD_VAR 0 16
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 30
47796: PUSH
47797: LD_INT 6
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 30
47806: PUSH
47807: LD_INT 7
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 30
47816: PUSH
47817: LD_INT 8
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PPUSH
47834: CALL_OW 72
47838: ST_TO_ADDR
47839: GO 47842
47841: POP
// if i = 1 then
47842: LD_VAR 0 8
47846: PUSH
47847: LD_INT 1
47849: EQUAL
47850: IFFALSE 47961
// begin tmp := [ ] ;
47852: LD_ADDR_VAR 0 19
47856: PUSH
47857: EMPTY
47858: ST_TO_ADDR
// for j in f do
47859: LD_ADDR_VAR 0 9
47863: PUSH
47864: LD_VAR 0 12
47868: PUSH
47869: FOR_IN
47870: IFFALSE 47943
// if GetBType ( j ) = b_bunker then
47872: LD_VAR 0 9
47876: PPUSH
47877: CALL_OW 266
47881: PUSH
47882: LD_INT 32
47884: EQUAL
47885: IFFALSE 47912
// tmp := Insert ( tmp , 1 , j ) else
47887: LD_ADDR_VAR 0 19
47891: PUSH
47892: LD_VAR 0 19
47896: PPUSH
47897: LD_INT 1
47899: PPUSH
47900: LD_VAR 0 9
47904: PPUSH
47905: CALL_OW 2
47909: ST_TO_ADDR
47910: GO 47941
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47912: LD_ADDR_VAR 0 19
47916: PUSH
47917: LD_VAR 0 19
47921: PPUSH
47922: LD_VAR 0 19
47926: PUSH
47927: LD_INT 1
47929: PLUS
47930: PPUSH
47931: LD_VAR 0 9
47935: PPUSH
47936: CALL_OW 2
47940: ST_TO_ADDR
47941: GO 47869
47943: POP
47944: POP
// if tmp then
47945: LD_VAR 0 19
47949: IFFALSE 47961
// f := tmp ;
47951: LD_ADDR_VAR 0 12
47955: PUSH
47956: LD_VAR 0 19
47960: ST_TO_ADDR
// end ; x := personel [ i ] ;
47961: LD_ADDR_VAR 0 13
47965: PUSH
47966: LD_VAR 0 6
47970: PUSH
47971: LD_VAR 0 8
47975: ARRAY
47976: ST_TO_ADDR
// if x = - 1 then
47977: LD_VAR 0 13
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: EQUAL
47986: IFFALSE 48195
// begin for j in f do
47988: LD_ADDR_VAR 0 9
47992: PUSH
47993: LD_VAR 0 12
47997: PUSH
47998: FOR_IN
47999: IFFALSE 48191
// repeat InitHc ;
48001: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48005: LD_VAR 0 9
48009: PPUSH
48010: CALL_OW 266
48014: PUSH
48015: LD_INT 5
48017: EQUAL
48018: IFFALSE 48088
// begin if UnitsInside ( j ) < 3 then
48020: LD_VAR 0 9
48024: PPUSH
48025: CALL_OW 313
48029: PUSH
48030: LD_INT 3
48032: LESS
48033: IFFALSE 48069
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48035: LD_INT 0
48037: PPUSH
48038: LD_INT 5
48040: PUSH
48041: LD_INT 8
48043: PUSH
48044: LD_INT 9
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: LIST
48051: PUSH
48052: LD_VAR 0 17
48056: ARRAY
48057: PPUSH
48058: LD_VAR 0 4
48062: PPUSH
48063: CALL_OW 380
48067: GO 48086
// PrepareHuman ( false , i , skill ) ;
48069: LD_INT 0
48071: PPUSH
48072: LD_VAR 0 8
48076: PPUSH
48077: LD_VAR 0 4
48081: PPUSH
48082: CALL_OW 380
// end else
48086: GO 48105
// PrepareHuman ( false , i , skill ) ;
48088: LD_INT 0
48090: PPUSH
48091: LD_VAR 0 8
48095: PPUSH
48096: LD_VAR 0 4
48100: PPUSH
48101: CALL_OW 380
// un := CreateHuman ;
48105: LD_ADDR_VAR 0 14
48109: PUSH
48110: CALL_OW 44
48114: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48115: LD_ADDR_VAR 0 7
48119: PUSH
48120: LD_VAR 0 7
48124: PPUSH
48125: LD_INT 1
48127: PPUSH
48128: LD_VAR 0 14
48132: PPUSH
48133: CALL_OW 2
48137: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48138: LD_VAR 0 14
48142: PPUSH
48143: LD_VAR 0 9
48147: PPUSH
48148: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48152: LD_VAR 0 9
48156: PPUSH
48157: CALL_OW 313
48161: PUSH
48162: LD_INT 6
48164: EQUAL
48165: PUSH
48166: LD_VAR 0 9
48170: PPUSH
48171: CALL_OW 266
48175: PUSH
48176: LD_INT 32
48178: PUSH
48179: LD_INT 31
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: IN
48186: OR
48187: IFFALSE 48001
48189: GO 47998
48191: POP
48192: POP
// end else
48193: GO 48575
// for j = 1 to x do
48195: LD_ADDR_VAR 0 9
48199: PUSH
48200: DOUBLE
48201: LD_INT 1
48203: DEC
48204: ST_TO_ADDR
48205: LD_VAR 0 13
48209: PUSH
48210: FOR_TO
48211: IFFALSE 48573
// begin InitHc ;
48213: CALL_OW 19
// if not f then
48217: LD_VAR 0 12
48221: NOT
48222: IFFALSE 48311
// begin PrepareHuman ( false , i , skill ) ;
48224: LD_INT 0
48226: PPUSH
48227: LD_VAR 0 8
48231: PPUSH
48232: LD_VAR 0 4
48236: PPUSH
48237: CALL_OW 380
// un := CreateHuman ;
48241: LD_ADDR_VAR 0 14
48245: PUSH
48246: CALL_OW 44
48250: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48251: LD_ADDR_VAR 0 7
48255: PUSH
48256: LD_VAR 0 7
48260: PPUSH
48261: LD_INT 1
48263: PPUSH
48264: LD_VAR 0 14
48268: PPUSH
48269: CALL_OW 2
48273: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48274: LD_VAR 0 14
48278: PPUSH
48279: LD_VAR 0 1
48283: PPUSH
48284: CALL_OW 250
48288: PPUSH
48289: LD_VAR 0 1
48293: PPUSH
48294: CALL_OW 251
48298: PPUSH
48299: LD_INT 10
48301: PPUSH
48302: LD_INT 0
48304: PPUSH
48305: CALL_OW 50
// continue ;
48309: GO 48210
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48311: LD_VAR 0 12
48315: PUSH
48316: LD_INT 1
48318: ARRAY
48319: PPUSH
48320: CALL_OW 313
48324: PUSH
48325: LD_VAR 0 12
48329: PUSH
48330: LD_INT 1
48332: ARRAY
48333: PPUSH
48334: CALL_OW 266
48338: PUSH
48339: LD_INT 32
48341: PUSH
48342: LD_INT 31
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: IN
48349: AND
48350: PUSH
48351: LD_VAR 0 12
48355: PUSH
48356: LD_INT 1
48358: ARRAY
48359: PPUSH
48360: CALL_OW 313
48364: PUSH
48365: LD_INT 6
48367: EQUAL
48368: OR
48369: IFFALSE 48389
// f := Delete ( f , 1 ) ;
48371: LD_ADDR_VAR 0 12
48375: PUSH
48376: LD_VAR 0 12
48380: PPUSH
48381: LD_INT 1
48383: PPUSH
48384: CALL_OW 3
48388: ST_TO_ADDR
// if not f then
48389: LD_VAR 0 12
48393: NOT
48394: IFFALSE 48412
// begin x := x + 2 ;
48396: LD_ADDR_VAR 0 13
48400: PUSH
48401: LD_VAR 0 13
48405: PUSH
48406: LD_INT 2
48408: PLUS
48409: ST_TO_ADDR
// continue ;
48410: GO 48210
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48412: LD_VAR 0 12
48416: PUSH
48417: LD_INT 1
48419: ARRAY
48420: PPUSH
48421: CALL_OW 266
48425: PUSH
48426: LD_INT 5
48428: EQUAL
48429: IFFALSE 48503
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48431: LD_VAR 0 12
48435: PUSH
48436: LD_INT 1
48438: ARRAY
48439: PPUSH
48440: CALL_OW 313
48444: PUSH
48445: LD_INT 3
48447: LESS
48448: IFFALSE 48484
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48450: LD_INT 0
48452: PPUSH
48453: LD_INT 5
48455: PUSH
48456: LD_INT 8
48458: PUSH
48459: LD_INT 9
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: PUSH
48467: LD_VAR 0 17
48471: ARRAY
48472: PPUSH
48473: LD_VAR 0 4
48477: PPUSH
48478: CALL_OW 380
48482: GO 48501
// PrepareHuman ( false , i , skill ) ;
48484: LD_INT 0
48486: PPUSH
48487: LD_VAR 0 8
48491: PPUSH
48492: LD_VAR 0 4
48496: PPUSH
48497: CALL_OW 380
// end else
48501: GO 48520
// PrepareHuman ( false , i , skill ) ;
48503: LD_INT 0
48505: PPUSH
48506: LD_VAR 0 8
48510: PPUSH
48511: LD_VAR 0 4
48515: PPUSH
48516: CALL_OW 380
// un := CreateHuman ;
48520: LD_ADDR_VAR 0 14
48524: PUSH
48525: CALL_OW 44
48529: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48530: LD_ADDR_VAR 0 7
48534: PUSH
48535: LD_VAR 0 7
48539: PPUSH
48540: LD_INT 1
48542: PPUSH
48543: LD_VAR 0 14
48547: PPUSH
48548: CALL_OW 2
48552: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48553: LD_VAR 0 14
48557: PPUSH
48558: LD_VAR 0 12
48562: PUSH
48563: LD_INT 1
48565: ARRAY
48566: PPUSH
48567: CALL_OW 52
// end ;
48571: GO 48210
48573: POP
48574: POP
// end ;
48575: GO 47512
48577: POP
48578: POP
// result := result ^ buildings ;
48579: LD_ADDR_VAR 0 7
48583: PUSH
48584: LD_VAR 0 7
48588: PUSH
48589: LD_VAR 0 18
48593: ADD
48594: ST_TO_ADDR
// end else
48595: GO 48738
// begin for i = 1 to personel do
48597: LD_ADDR_VAR 0 8
48601: PUSH
48602: DOUBLE
48603: LD_INT 1
48605: DEC
48606: ST_TO_ADDR
48607: LD_VAR 0 6
48611: PUSH
48612: FOR_TO
48613: IFFALSE 48736
// begin if i > 4 then
48615: LD_VAR 0 8
48619: PUSH
48620: LD_INT 4
48622: GREATER
48623: IFFALSE 48627
// break ;
48625: GO 48736
// x := personel [ i ] ;
48627: LD_ADDR_VAR 0 13
48631: PUSH
48632: LD_VAR 0 6
48636: PUSH
48637: LD_VAR 0 8
48641: ARRAY
48642: ST_TO_ADDR
// if x = - 1 then
48643: LD_VAR 0 13
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: EQUAL
48652: IFFALSE 48656
// continue ;
48654: GO 48612
// PrepareHuman ( false , i , skill ) ;
48656: LD_INT 0
48658: PPUSH
48659: LD_VAR 0 8
48663: PPUSH
48664: LD_VAR 0 4
48668: PPUSH
48669: CALL_OW 380
// un := CreateHuman ;
48673: LD_ADDR_VAR 0 14
48677: PUSH
48678: CALL_OW 44
48682: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48683: LD_VAR 0 14
48687: PPUSH
48688: LD_VAR 0 1
48692: PPUSH
48693: CALL_OW 250
48697: PPUSH
48698: LD_VAR 0 1
48702: PPUSH
48703: CALL_OW 251
48707: PPUSH
48708: LD_INT 10
48710: PPUSH
48711: LD_INT 0
48713: PPUSH
48714: CALL_OW 50
// result := result ^ un ;
48718: LD_ADDR_VAR 0 7
48722: PUSH
48723: LD_VAR 0 7
48727: PUSH
48728: LD_VAR 0 14
48732: ADD
48733: ST_TO_ADDR
// end ;
48734: GO 48612
48736: POP
48737: POP
// end ; end ;
48738: LD_VAR 0 7
48742: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48743: LD_INT 0
48745: PPUSH
48746: PPUSH
48747: PPUSH
48748: PPUSH
48749: PPUSH
48750: PPUSH
48751: PPUSH
48752: PPUSH
48753: PPUSH
48754: PPUSH
48755: PPUSH
48756: PPUSH
48757: PPUSH
48758: PPUSH
48759: PPUSH
48760: PPUSH
// result := false ;
48761: LD_ADDR_VAR 0 3
48765: PUSH
48766: LD_INT 0
48768: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48769: LD_VAR 0 1
48773: NOT
48774: PUSH
48775: LD_VAR 0 1
48779: PPUSH
48780: CALL_OW 266
48784: PUSH
48785: LD_INT 32
48787: PUSH
48788: LD_INT 33
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: IN
48795: NOT
48796: OR
48797: IFFALSE 48801
// exit ;
48799: GO 49910
// nat := GetNation ( tower ) ;
48801: LD_ADDR_VAR 0 12
48805: PUSH
48806: LD_VAR 0 1
48810: PPUSH
48811: CALL_OW 248
48815: ST_TO_ADDR
// side := GetSide ( tower ) ;
48816: LD_ADDR_VAR 0 16
48820: PUSH
48821: LD_VAR 0 1
48825: PPUSH
48826: CALL_OW 255
48830: ST_TO_ADDR
// x := GetX ( tower ) ;
48831: LD_ADDR_VAR 0 10
48835: PUSH
48836: LD_VAR 0 1
48840: PPUSH
48841: CALL_OW 250
48845: ST_TO_ADDR
// y := GetY ( tower ) ;
48846: LD_ADDR_VAR 0 11
48850: PUSH
48851: LD_VAR 0 1
48855: PPUSH
48856: CALL_OW 251
48860: ST_TO_ADDR
// if not x or not y then
48861: LD_VAR 0 10
48865: NOT
48866: PUSH
48867: LD_VAR 0 11
48871: NOT
48872: OR
48873: IFFALSE 48877
// exit ;
48875: GO 49910
// weapon := 0 ;
48877: LD_ADDR_VAR 0 18
48881: PUSH
48882: LD_INT 0
48884: ST_TO_ADDR
// fac_list := [ ] ;
48885: LD_ADDR_VAR 0 17
48889: PUSH
48890: EMPTY
48891: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48892: LD_ADDR_VAR 0 6
48896: PUSH
48897: LD_VAR 0 1
48901: PPUSH
48902: CALL_OW 274
48906: PPUSH
48907: LD_VAR 0 2
48911: PPUSH
48912: LD_INT 0
48914: PPUSH
48915: CALL 46481 0 3
48919: PPUSH
48920: LD_INT 30
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PPUSH
48930: CALL_OW 72
48934: ST_TO_ADDR
// if not factories then
48935: LD_VAR 0 6
48939: NOT
48940: IFFALSE 48944
// exit ;
48942: GO 49910
// for i in factories do
48944: LD_ADDR_VAR 0 8
48948: PUSH
48949: LD_VAR 0 6
48953: PUSH
48954: FOR_IN
48955: IFFALSE 48980
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48957: LD_ADDR_VAR 0 17
48961: PUSH
48962: LD_VAR 0 17
48966: PUSH
48967: LD_VAR 0 8
48971: PPUSH
48972: CALL_OW 478
48976: UNION
48977: ST_TO_ADDR
48978: GO 48954
48980: POP
48981: POP
// if not fac_list then
48982: LD_VAR 0 17
48986: NOT
48987: IFFALSE 48991
// exit ;
48989: GO 49910
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48991: LD_ADDR_VAR 0 5
48995: PUSH
48996: LD_INT 4
48998: PUSH
48999: LD_INT 5
49001: PUSH
49002: LD_INT 9
49004: PUSH
49005: LD_INT 10
49007: PUSH
49008: LD_INT 6
49010: PUSH
49011: LD_INT 7
49013: PUSH
49014: LD_INT 11
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 27
49028: PUSH
49029: LD_INT 28
49031: PUSH
49032: LD_INT 26
49034: PUSH
49035: LD_INT 30
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 43
49046: PUSH
49047: LD_INT 44
49049: PUSH
49050: LD_INT 46
49052: PUSH
49053: LD_INT 45
49055: PUSH
49056: LD_INT 47
49058: PUSH
49059: LD_INT 49
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: LIST
49074: PUSH
49075: LD_VAR 0 12
49079: ARRAY
49080: ST_TO_ADDR
// list := list isect fac_list ;
49081: LD_ADDR_VAR 0 5
49085: PUSH
49086: LD_VAR 0 5
49090: PUSH
49091: LD_VAR 0 17
49095: ISECT
49096: ST_TO_ADDR
// if not list then
49097: LD_VAR 0 5
49101: NOT
49102: IFFALSE 49106
// exit ;
49104: GO 49910
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49106: LD_VAR 0 12
49110: PUSH
49111: LD_INT 3
49113: EQUAL
49114: PUSH
49115: LD_INT 49
49117: PUSH
49118: LD_VAR 0 5
49122: IN
49123: AND
49124: PUSH
49125: LD_INT 31
49127: PPUSH
49128: LD_VAR 0 16
49132: PPUSH
49133: CALL_OW 321
49137: PUSH
49138: LD_INT 2
49140: EQUAL
49141: AND
49142: IFFALSE 49202
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49144: LD_INT 22
49146: PUSH
49147: LD_VAR 0 16
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 35
49158: PUSH
49159: LD_INT 49
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 91
49168: PUSH
49169: LD_VAR 0 1
49173: PUSH
49174: LD_INT 10
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: PPUSH
49187: CALL_OW 69
49191: NOT
49192: IFFALSE 49202
// weapon := ru_time_lapser ;
49194: LD_ADDR_VAR 0 18
49198: PUSH
49199: LD_INT 49
49201: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49202: LD_VAR 0 12
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: IN
49217: PUSH
49218: LD_INT 11
49220: PUSH
49221: LD_VAR 0 5
49225: IN
49226: PUSH
49227: LD_INT 30
49229: PUSH
49230: LD_VAR 0 5
49234: IN
49235: OR
49236: AND
49237: PUSH
49238: LD_INT 6
49240: PPUSH
49241: LD_VAR 0 16
49245: PPUSH
49246: CALL_OW 321
49250: PUSH
49251: LD_INT 2
49253: EQUAL
49254: AND
49255: IFFALSE 49420
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49257: LD_INT 22
49259: PUSH
49260: LD_VAR 0 16
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 35
49274: PUSH
49275: LD_INT 11
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 35
49284: PUSH
49285: LD_INT 30
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 91
49299: PUSH
49300: LD_VAR 0 1
49304: PUSH
49305: LD_INT 18
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: PPUSH
49318: CALL_OW 69
49322: NOT
49323: PUSH
49324: LD_INT 22
49326: PUSH
49327: LD_VAR 0 16
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: LD_INT 30
49341: PUSH
49342: LD_INT 32
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 30
49351: PUSH
49352: LD_INT 33
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 91
49366: PUSH
49367: LD_VAR 0 1
49371: PUSH
49372: LD_INT 12
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: PUSH
49385: EMPTY
49386: LIST
49387: PPUSH
49388: CALL_OW 69
49392: PUSH
49393: LD_INT 2
49395: GREATER
49396: AND
49397: IFFALSE 49420
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49399: LD_ADDR_VAR 0 18
49403: PUSH
49404: LD_INT 11
49406: PUSH
49407: LD_INT 30
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_VAR 0 12
49418: ARRAY
49419: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49420: LD_VAR 0 18
49424: NOT
49425: PUSH
49426: LD_INT 40
49428: PPUSH
49429: LD_VAR 0 16
49433: PPUSH
49434: CALL_OW 321
49438: PUSH
49439: LD_INT 2
49441: EQUAL
49442: AND
49443: PUSH
49444: LD_INT 7
49446: PUSH
49447: LD_VAR 0 5
49451: IN
49452: PUSH
49453: LD_INT 28
49455: PUSH
49456: LD_VAR 0 5
49460: IN
49461: OR
49462: PUSH
49463: LD_INT 45
49465: PUSH
49466: LD_VAR 0 5
49470: IN
49471: OR
49472: AND
49473: IFFALSE 49727
// begin hex := GetHexInfo ( x , y ) ;
49475: LD_ADDR_VAR 0 4
49479: PUSH
49480: LD_VAR 0 10
49484: PPUSH
49485: LD_VAR 0 11
49489: PPUSH
49490: CALL_OW 546
49494: ST_TO_ADDR
// if hex [ 1 ] then
49495: LD_VAR 0 4
49499: PUSH
49500: LD_INT 1
49502: ARRAY
49503: IFFALSE 49507
// exit ;
49505: GO 49910
// height := hex [ 2 ] ;
49507: LD_ADDR_VAR 0 15
49511: PUSH
49512: LD_VAR 0 4
49516: PUSH
49517: LD_INT 2
49519: ARRAY
49520: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49521: LD_ADDR_VAR 0 14
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: LD_INT 5
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: ST_TO_ADDR
// for i in tmp do
49544: LD_ADDR_VAR 0 8
49548: PUSH
49549: LD_VAR 0 14
49553: PUSH
49554: FOR_IN
49555: IFFALSE 49725
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49557: LD_ADDR_VAR 0 9
49561: PUSH
49562: LD_VAR 0 10
49566: PPUSH
49567: LD_VAR 0 8
49571: PPUSH
49572: LD_INT 5
49574: PPUSH
49575: CALL_OW 272
49579: PUSH
49580: LD_VAR 0 11
49584: PPUSH
49585: LD_VAR 0 8
49589: PPUSH
49590: LD_INT 5
49592: PPUSH
49593: CALL_OW 273
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49602: LD_VAR 0 9
49606: PUSH
49607: LD_INT 1
49609: ARRAY
49610: PPUSH
49611: LD_VAR 0 9
49615: PUSH
49616: LD_INT 2
49618: ARRAY
49619: PPUSH
49620: CALL_OW 488
49624: IFFALSE 49723
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49626: LD_ADDR_VAR 0 4
49630: PUSH
49631: LD_VAR 0 9
49635: PUSH
49636: LD_INT 1
49638: ARRAY
49639: PPUSH
49640: LD_VAR 0 9
49644: PUSH
49645: LD_INT 2
49647: ARRAY
49648: PPUSH
49649: CALL_OW 546
49653: ST_TO_ADDR
// if hex [ 1 ] then
49654: LD_VAR 0 4
49658: PUSH
49659: LD_INT 1
49661: ARRAY
49662: IFFALSE 49666
// continue ;
49664: GO 49554
// h := hex [ 2 ] ;
49666: LD_ADDR_VAR 0 13
49670: PUSH
49671: LD_VAR 0 4
49675: PUSH
49676: LD_INT 2
49678: ARRAY
49679: ST_TO_ADDR
// if h + 7 < height then
49680: LD_VAR 0 13
49684: PUSH
49685: LD_INT 7
49687: PLUS
49688: PUSH
49689: LD_VAR 0 15
49693: LESS
49694: IFFALSE 49723
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49696: LD_ADDR_VAR 0 18
49700: PUSH
49701: LD_INT 7
49703: PUSH
49704: LD_INT 28
49706: PUSH
49707: LD_INT 45
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: PUSH
49715: LD_VAR 0 12
49719: ARRAY
49720: ST_TO_ADDR
// break ;
49721: GO 49725
// end ; end ; end ;
49723: GO 49554
49725: POP
49726: POP
// end ; if not weapon then
49727: LD_VAR 0 18
49731: NOT
49732: IFFALSE 49792
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49734: LD_ADDR_VAR 0 5
49738: PUSH
49739: LD_VAR 0 5
49743: PUSH
49744: LD_INT 11
49746: PUSH
49747: LD_INT 30
49749: PUSH
49750: LD_INT 49
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: LIST
49757: DIFF
49758: ST_TO_ADDR
// if not list then
49759: LD_VAR 0 5
49763: NOT
49764: IFFALSE 49768
// exit ;
49766: GO 49910
// weapon := list [ rand ( 1 , list ) ] ;
49768: LD_ADDR_VAR 0 18
49772: PUSH
49773: LD_VAR 0 5
49777: PUSH
49778: LD_INT 1
49780: PPUSH
49781: LD_VAR 0 5
49785: PPUSH
49786: CALL_OW 12
49790: ARRAY
49791: ST_TO_ADDR
// end ; if weapon then
49792: LD_VAR 0 18
49796: IFFALSE 49910
// begin tmp := CostOfWeapon ( weapon ) ;
49798: LD_ADDR_VAR 0 14
49802: PUSH
49803: LD_VAR 0 18
49807: PPUSH
49808: CALL_OW 451
49812: ST_TO_ADDR
// j := GetBase ( tower ) ;
49813: LD_ADDR_VAR 0 9
49817: PUSH
49818: LD_VAR 0 1
49822: PPUSH
49823: CALL_OW 274
49827: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49828: LD_VAR 0 9
49832: PPUSH
49833: LD_INT 1
49835: PPUSH
49836: CALL_OW 275
49840: PUSH
49841: LD_VAR 0 14
49845: PUSH
49846: LD_INT 1
49848: ARRAY
49849: GREATEREQUAL
49850: PUSH
49851: LD_VAR 0 9
49855: PPUSH
49856: LD_INT 2
49858: PPUSH
49859: CALL_OW 275
49863: PUSH
49864: LD_VAR 0 14
49868: PUSH
49869: LD_INT 2
49871: ARRAY
49872: GREATEREQUAL
49873: AND
49874: PUSH
49875: LD_VAR 0 9
49879: PPUSH
49880: LD_INT 3
49882: PPUSH
49883: CALL_OW 275
49887: PUSH
49888: LD_VAR 0 14
49892: PUSH
49893: LD_INT 3
49895: ARRAY
49896: GREATEREQUAL
49897: AND
49898: IFFALSE 49910
// result := weapon ;
49900: LD_ADDR_VAR 0 3
49904: PUSH
49905: LD_VAR 0 18
49909: ST_TO_ADDR
// end ; end ;
49910: LD_VAR 0 3
49914: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49915: LD_INT 0
49917: PPUSH
49918: PPUSH
// result := true ;
49919: LD_ADDR_VAR 0 3
49923: PUSH
49924: LD_INT 1
49926: ST_TO_ADDR
// if array1 = array2 then
49927: LD_VAR 0 1
49931: PUSH
49932: LD_VAR 0 2
49936: EQUAL
49937: IFFALSE 49997
// begin for i = 1 to array1 do
49939: LD_ADDR_VAR 0 4
49943: PUSH
49944: DOUBLE
49945: LD_INT 1
49947: DEC
49948: ST_TO_ADDR
49949: LD_VAR 0 1
49953: PUSH
49954: FOR_TO
49955: IFFALSE 49993
// if array1 [ i ] <> array2 [ i ] then
49957: LD_VAR 0 1
49961: PUSH
49962: LD_VAR 0 4
49966: ARRAY
49967: PUSH
49968: LD_VAR 0 2
49972: PUSH
49973: LD_VAR 0 4
49977: ARRAY
49978: NONEQUAL
49979: IFFALSE 49991
// begin result := false ;
49981: LD_ADDR_VAR 0 3
49985: PUSH
49986: LD_INT 0
49988: ST_TO_ADDR
// break ;
49989: GO 49993
// end ;
49991: GO 49954
49993: POP
49994: POP
// end else
49995: GO 50005
// result := false ;
49997: LD_ADDR_VAR 0 3
50001: PUSH
50002: LD_INT 0
50004: ST_TO_ADDR
// end ;
50005: LD_VAR 0 3
50009: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50010: LD_INT 0
50012: PPUSH
50013: PPUSH
// if not array1 or not array2 then
50014: LD_VAR 0 1
50018: NOT
50019: PUSH
50020: LD_VAR 0 2
50024: NOT
50025: OR
50026: IFFALSE 50030
// exit ;
50028: GO 50094
// result := true ;
50030: LD_ADDR_VAR 0 3
50034: PUSH
50035: LD_INT 1
50037: ST_TO_ADDR
// for i = 1 to array1 do
50038: LD_ADDR_VAR 0 4
50042: PUSH
50043: DOUBLE
50044: LD_INT 1
50046: DEC
50047: ST_TO_ADDR
50048: LD_VAR 0 1
50052: PUSH
50053: FOR_TO
50054: IFFALSE 50092
// if array1 [ i ] <> array2 [ i ] then
50056: LD_VAR 0 1
50060: PUSH
50061: LD_VAR 0 4
50065: ARRAY
50066: PUSH
50067: LD_VAR 0 2
50071: PUSH
50072: LD_VAR 0 4
50076: ARRAY
50077: NONEQUAL
50078: IFFALSE 50090
// begin result := false ;
50080: LD_ADDR_VAR 0 3
50084: PUSH
50085: LD_INT 0
50087: ST_TO_ADDR
// break ;
50088: GO 50092
// end ;
50090: GO 50053
50092: POP
50093: POP
// end ;
50094: LD_VAR 0 3
50098: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50099: LD_INT 0
50101: PPUSH
50102: PPUSH
50103: PPUSH
// pom := GetBase ( fac ) ;
50104: LD_ADDR_VAR 0 5
50108: PUSH
50109: LD_VAR 0 1
50113: PPUSH
50114: CALL_OW 274
50118: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50119: LD_ADDR_VAR 0 4
50123: PUSH
50124: LD_VAR 0 2
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: PPUSH
50133: LD_VAR 0 2
50137: PUSH
50138: LD_INT 2
50140: ARRAY
50141: PPUSH
50142: LD_VAR 0 2
50146: PUSH
50147: LD_INT 3
50149: ARRAY
50150: PPUSH
50151: LD_VAR 0 2
50155: PUSH
50156: LD_INT 4
50158: ARRAY
50159: PPUSH
50160: CALL_OW 449
50164: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50165: LD_ADDR_VAR 0 3
50169: PUSH
50170: LD_VAR 0 5
50174: PPUSH
50175: LD_INT 1
50177: PPUSH
50178: CALL_OW 275
50182: PUSH
50183: LD_VAR 0 4
50187: PUSH
50188: LD_INT 1
50190: ARRAY
50191: GREATEREQUAL
50192: PUSH
50193: LD_VAR 0 5
50197: PPUSH
50198: LD_INT 2
50200: PPUSH
50201: CALL_OW 275
50205: PUSH
50206: LD_VAR 0 4
50210: PUSH
50211: LD_INT 2
50213: ARRAY
50214: GREATEREQUAL
50215: AND
50216: PUSH
50217: LD_VAR 0 5
50221: PPUSH
50222: LD_INT 3
50224: PPUSH
50225: CALL_OW 275
50229: PUSH
50230: LD_VAR 0 4
50234: PUSH
50235: LD_INT 3
50237: ARRAY
50238: GREATEREQUAL
50239: AND
50240: ST_TO_ADDR
// end ;
50241: LD_VAR 0 3
50245: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50246: LD_INT 0
50248: PPUSH
50249: PPUSH
50250: PPUSH
50251: PPUSH
// pom := GetBase ( building ) ;
50252: LD_ADDR_VAR 0 3
50256: PUSH
50257: LD_VAR 0 1
50261: PPUSH
50262: CALL_OW 274
50266: ST_TO_ADDR
// if not pom then
50267: LD_VAR 0 3
50271: NOT
50272: IFFALSE 50276
// exit ;
50274: GO 50446
// btype := GetBType ( building ) ;
50276: LD_ADDR_VAR 0 5
50280: PUSH
50281: LD_VAR 0 1
50285: PPUSH
50286: CALL_OW 266
50290: ST_TO_ADDR
// if btype = b_armoury then
50291: LD_VAR 0 5
50295: PUSH
50296: LD_INT 4
50298: EQUAL
50299: IFFALSE 50309
// btype := b_barracks ;
50301: LD_ADDR_VAR 0 5
50305: PUSH
50306: LD_INT 5
50308: ST_TO_ADDR
// if btype = b_depot then
50309: LD_VAR 0 5
50313: PUSH
50314: LD_INT 0
50316: EQUAL
50317: IFFALSE 50327
// btype := b_warehouse ;
50319: LD_ADDR_VAR 0 5
50323: PUSH
50324: LD_INT 1
50326: ST_TO_ADDR
// if btype = b_workshop then
50327: LD_VAR 0 5
50331: PUSH
50332: LD_INT 2
50334: EQUAL
50335: IFFALSE 50345
// btype := b_factory ;
50337: LD_ADDR_VAR 0 5
50341: PUSH
50342: LD_INT 3
50344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50345: LD_ADDR_VAR 0 4
50349: PUSH
50350: LD_VAR 0 5
50354: PPUSH
50355: LD_VAR 0 1
50359: PPUSH
50360: CALL_OW 248
50364: PPUSH
50365: CALL_OW 450
50369: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50370: LD_ADDR_VAR 0 2
50374: PUSH
50375: LD_VAR 0 3
50379: PPUSH
50380: LD_INT 1
50382: PPUSH
50383: CALL_OW 275
50387: PUSH
50388: LD_VAR 0 4
50392: PUSH
50393: LD_INT 1
50395: ARRAY
50396: GREATEREQUAL
50397: PUSH
50398: LD_VAR 0 3
50402: PPUSH
50403: LD_INT 2
50405: PPUSH
50406: CALL_OW 275
50410: PUSH
50411: LD_VAR 0 4
50415: PUSH
50416: LD_INT 2
50418: ARRAY
50419: GREATEREQUAL
50420: AND
50421: PUSH
50422: LD_VAR 0 3
50426: PPUSH
50427: LD_INT 3
50429: PPUSH
50430: CALL_OW 275
50434: PUSH
50435: LD_VAR 0 4
50439: PUSH
50440: LD_INT 3
50442: ARRAY
50443: GREATEREQUAL
50444: AND
50445: ST_TO_ADDR
// end ;
50446: LD_VAR 0 2
50450: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50451: LD_INT 0
50453: PPUSH
50454: PPUSH
50455: PPUSH
// pom := GetBase ( building ) ;
50456: LD_ADDR_VAR 0 4
50460: PUSH
50461: LD_VAR 0 1
50465: PPUSH
50466: CALL_OW 274
50470: ST_TO_ADDR
// if not pom then
50471: LD_VAR 0 4
50475: NOT
50476: IFFALSE 50480
// exit ;
50478: GO 50581
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50480: LD_ADDR_VAR 0 5
50484: PUSH
50485: LD_VAR 0 2
50489: PPUSH
50490: LD_VAR 0 1
50494: PPUSH
50495: CALL_OW 248
50499: PPUSH
50500: CALL_OW 450
50504: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50505: LD_ADDR_VAR 0 3
50509: PUSH
50510: LD_VAR 0 4
50514: PPUSH
50515: LD_INT 1
50517: PPUSH
50518: CALL_OW 275
50522: PUSH
50523: LD_VAR 0 5
50527: PUSH
50528: LD_INT 1
50530: ARRAY
50531: GREATEREQUAL
50532: PUSH
50533: LD_VAR 0 4
50537: PPUSH
50538: LD_INT 2
50540: PPUSH
50541: CALL_OW 275
50545: PUSH
50546: LD_VAR 0 5
50550: PUSH
50551: LD_INT 2
50553: ARRAY
50554: GREATEREQUAL
50555: AND
50556: PUSH
50557: LD_VAR 0 4
50561: PPUSH
50562: LD_INT 3
50564: PPUSH
50565: CALL_OW 275
50569: PUSH
50570: LD_VAR 0 5
50574: PUSH
50575: LD_INT 3
50577: ARRAY
50578: GREATEREQUAL
50579: AND
50580: ST_TO_ADDR
// end ;
50581: LD_VAR 0 3
50585: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50586: LD_INT 0
50588: PPUSH
50589: PPUSH
50590: PPUSH
50591: PPUSH
50592: PPUSH
50593: PPUSH
50594: PPUSH
50595: PPUSH
50596: PPUSH
50597: PPUSH
50598: PPUSH
// result := false ;
50599: LD_ADDR_VAR 0 8
50603: PUSH
50604: LD_INT 0
50606: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50607: LD_VAR 0 5
50611: NOT
50612: PUSH
50613: LD_VAR 0 1
50617: NOT
50618: OR
50619: PUSH
50620: LD_VAR 0 2
50624: NOT
50625: OR
50626: PUSH
50627: LD_VAR 0 3
50631: NOT
50632: OR
50633: IFFALSE 50637
// exit ;
50635: GO 51451
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50637: LD_ADDR_VAR 0 14
50641: PUSH
50642: LD_VAR 0 1
50646: PPUSH
50647: LD_VAR 0 2
50651: PPUSH
50652: LD_VAR 0 3
50656: PPUSH
50657: LD_VAR 0 4
50661: PPUSH
50662: LD_VAR 0 5
50666: PUSH
50667: LD_INT 1
50669: ARRAY
50670: PPUSH
50671: CALL_OW 248
50675: PPUSH
50676: LD_INT 0
50678: PPUSH
50679: CALL 52688 0 6
50683: ST_TO_ADDR
// if not hexes then
50684: LD_VAR 0 14
50688: NOT
50689: IFFALSE 50693
// exit ;
50691: GO 51451
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50693: LD_ADDR_VAR 0 17
50697: PUSH
50698: LD_VAR 0 5
50702: PPUSH
50703: LD_INT 22
50705: PUSH
50706: LD_VAR 0 13
50710: PPUSH
50711: CALL_OW 255
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: LD_INT 30
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 30
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PPUSH
50752: CALL_OW 72
50756: ST_TO_ADDR
// for i = 1 to hexes do
50757: LD_ADDR_VAR 0 9
50761: PUSH
50762: DOUBLE
50763: LD_INT 1
50765: DEC
50766: ST_TO_ADDR
50767: LD_VAR 0 14
50771: PUSH
50772: FOR_TO
50773: IFFALSE 51449
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50775: LD_ADDR_VAR 0 13
50779: PUSH
50780: LD_VAR 0 14
50784: PUSH
50785: LD_VAR 0 9
50789: ARRAY
50790: PUSH
50791: LD_INT 1
50793: ARRAY
50794: PPUSH
50795: LD_VAR 0 14
50799: PUSH
50800: LD_VAR 0 9
50804: ARRAY
50805: PUSH
50806: LD_INT 2
50808: ARRAY
50809: PPUSH
50810: CALL_OW 428
50814: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50815: LD_VAR 0 14
50819: PUSH
50820: LD_VAR 0 9
50824: ARRAY
50825: PUSH
50826: LD_INT 1
50828: ARRAY
50829: PPUSH
50830: LD_VAR 0 14
50834: PUSH
50835: LD_VAR 0 9
50839: ARRAY
50840: PUSH
50841: LD_INT 2
50843: ARRAY
50844: PPUSH
50845: CALL_OW 351
50849: PUSH
50850: LD_VAR 0 14
50854: PUSH
50855: LD_VAR 0 9
50859: ARRAY
50860: PUSH
50861: LD_INT 1
50863: ARRAY
50864: PPUSH
50865: LD_VAR 0 14
50869: PUSH
50870: LD_VAR 0 9
50874: ARRAY
50875: PUSH
50876: LD_INT 2
50878: ARRAY
50879: PPUSH
50880: CALL_OW 488
50884: NOT
50885: OR
50886: PUSH
50887: LD_VAR 0 13
50891: PPUSH
50892: CALL_OW 247
50896: PUSH
50897: LD_INT 3
50899: EQUAL
50900: OR
50901: IFFALSE 50907
// exit ;
50903: POP
50904: POP
50905: GO 51451
// if not tmp then
50907: LD_VAR 0 13
50911: NOT
50912: IFFALSE 50916
// continue ;
50914: GO 50772
// result := true ;
50916: LD_ADDR_VAR 0 8
50920: PUSH
50921: LD_INT 1
50923: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50924: LD_VAR 0 6
50928: PUSH
50929: LD_VAR 0 13
50933: PPUSH
50934: CALL_OW 247
50938: PUSH
50939: LD_INT 2
50941: EQUAL
50942: AND
50943: PUSH
50944: LD_VAR 0 13
50948: PPUSH
50949: CALL_OW 263
50953: PUSH
50954: LD_INT 1
50956: EQUAL
50957: AND
50958: IFFALSE 51122
// begin if IsDrivenBy ( tmp ) then
50960: LD_VAR 0 13
50964: PPUSH
50965: CALL_OW 311
50969: IFFALSE 50973
// continue ;
50971: GO 50772
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50973: LD_VAR 0 6
50977: PPUSH
50978: LD_INT 3
50980: PUSH
50981: LD_INT 60
50983: PUSH
50984: EMPTY
50985: LIST
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: LD_INT 55
50996: PUSH
50997: EMPTY
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PPUSH
51008: CALL_OW 72
51012: IFFALSE 51120
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51014: LD_ADDR_VAR 0 18
51018: PUSH
51019: LD_VAR 0 6
51023: PPUSH
51024: LD_INT 3
51026: PUSH
51027: LD_INT 60
51029: PUSH
51030: EMPTY
51031: LIST
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: LD_INT 55
51042: PUSH
51043: EMPTY
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PPUSH
51054: CALL_OW 72
51058: PUSH
51059: LD_INT 1
51061: ARRAY
51062: ST_TO_ADDR
// if IsInUnit ( driver ) then
51063: LD_VAR 0 18
51067: PPUSH
51068: CALL_OW 310
51072: IFFALSE 51083
// ComExit ( driver ) ;
51074: LD_VAR 0 18
51078: PPUSH
51079: CALL 75816 0 1
// AddComEnterUnit ( driver , tmp ) ;
51083: LD_VAR 0 18
51087: PPUSH
51088: LD_VAR 0 13
51092: PPUSH
51093: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51097: LD_VAR 0 18
51101: PPUSH
51102: LD_VAR 0 7
51106: PPUSH
51107: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51111: LD_VAR 0 18
51115: PPUSH
51116: CALL_OW 181
// end ; continue ;
51120: GO 50772
// end ; if not cleaners or not tmp in cleaners then
51122: LD_VAR 0 6
51126: NOT
51127: PUSH
51128: LD_VAR 0 13
51132: PUSH
51133: LD_VAR 0 6
51137: IN
51138: NOT
51139: OR
51140: IFFALSE 51447
// begin if dep then
51142: LD_VAR 0 17
51146: IFFALSE 51282
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51148: LD_ADDR_VAR 0 16
51152: PUSH
51153: LD_VAR 0 17
51157: PUSH
51158: LD_INT 1
51160: ARRAY
51161: PPUSH
51162: CALL_OW 250
51166: PPUSH
51167: LD_VAR 0 17
51171: PUSH
51172: LD_INT 1
51174: ARRAY
51175: PPUSH
51176: CALL_OW 254
51180: PPUSH
51181: LD_INT 5
51183: PPUSH
51184: CALL_OW 272
51188: PUSH
51189: LD_VAR 0 17
51193: PUSH
51194: LD_INT 1
51196: ARRAY
51197: PPUSH
51198: CALL_OW 251
51202: PPUSH
51203: LD_VAR 0 17
51207: PUSH
51208: LD_INT 1
51210: ARRAY
51211: PPUSH
51212: CALL_OW 254
51216: PPUSH
51217: LD_INT 5
51219: PPUSH
51220: CALL_OW 273
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51229: LD_VAR 0 16
51233: PUSH
51234: LD_INT 1
51236: ARRAY
51237: PPUSH
51238: LD_VAR 0 16
51242: PUSH
51243: LD_INT 2
51245: ARRAY
51246: PPUSH
51247: CALL_OW 488
51251: IFFALSE 51282
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51253: LD_VAR 0 13
51257: PPUSH
51258: LD_VAR 0 16
51262: PUSH
51263: LD_INT 1
51265: ARRAY
51266: PPUSH
51267: LD_VAR 0 16
51271: PUSH
51272: LD_INT 2
51274: ARRAY
51275: PPUSH
51276: CALL_OW 111
// continue ;
51280: GO 50772
// end ; end ; r := GetDir ( tmp ) ;
51282: LD_ADDR_VAR 0 15
51286: PUSH
51287: LD_VAR 0 13
51291: PPUSH
51292: CALL_OW 254
51296: ST_TO_ADDR
// if r = 5 then
51297: LD_VAR 0 15
51301: PUSH
51302: LD_INT 5
51304: EQUAL
51305: IFFALSE 51315
// r := 0 ;
51307: LD_ADDR_VAR 0 15
51311: PUSH
51312: LD_INT 0
51314: ST_TO_ADDR
// for j = r to 5 do
51315: LD_ADDR_VAR 0 10
51319: PUSH
51320: DOUBLE
51321: LD_VAR 0 15
51325: DEC
51326: ST_TO_ADDR
51327: LD_INT 5
51329: PUSH
51330: FOR_TO
51331: IFFALSE 51445
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51333: LD_ADDR_VAR 0 11
51337: PUSH
51338: LD_VAR 0 13
51342: PPUSH
51343: CALL_OW 250
51347: PPUSH
51348: LD_VAR 0 10
51352: PPUSH
51353: LD_INT 2
51355: PPUSH
51356: CALL_OW 272
51360: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51361: LD_ADDR_VAR 0 12
51365: PUSH
51366: LD_VAR 0 13
51370: PPUSH
51371: CALL_OW 251
51375: PPUSH
51376: LD_VAR 0 10
51380: PPUSH
51381: LD_INT 2
51383: PPUSH
51384: CALL_OW 273
51388: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51389: LD_VAR 0 11
51393: PPUSH
51394: LD_VAR 0 12
51398: PPUSH
51399: CALL_OW 488
51403: PUSH
51404: LD_VAR 0 11
51408: PPUSH
51409: LD_VAR 0 12
51413: PPUSH
51414: CALL_OW 428
51418: NOT
51419: AND
51420: IFFALSE 51443
// begin ComMoveXY ( tmp , _x , _y ) ;
51422: LD_VAR 0 13
51426: PPUSH
51427: LD_VAR 0 11
51431: PPUSH
51432: LD_VAR 0 12
51436: PPUSH
51437: CALL_OW 111
// break ;
51441: GO 51445
// end ; end ;
51443: GO 51330
51445: POP
51446: POP
// end ; end ;
51447: GO 50772
51449: POP
51450: POP
// end ;
51451: LD_VAR 0 8
51455: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51456: LD_INT 0
51458: PPUSH
// result := true ;
51459: LD_ADDR_VAR 0 3
51463: PUSH
51464: LD_INT 1
51466: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51467: LD_VAR 0 2
51471: PUSH
51472: LD_INT 24
51474: DOUBLE
51475: EQUAL
51476: IFTRUE 51486
51478: LD_INT 33
51480: DOUBLE
51481: EQUAL
51482: IFTRUE 51486
51484: GO 51511
51486: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51487: LD_ADDR_VAR 0 3
51491: PUSH
51492: LD_INT 32
51494: PPUSH
51495: LD_VAR 0 1
51499: PPUSH
51500: CALL_OW 321
51504: PUSH
51505: LD_INT 2
51507: EQUAL
51508: ST_TO_ADDR
51509: GO 51831
51511: LD_INT 20
51513: DOUBLE
51514: EQUAL
51515: IFTRUE 51519
51517: GO 51544
51519: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51520: LD_ADDR_VAR 0 3
51524: PUSH
51525: LD_INT 6
51527: PPUSH
51528: LD_VAR 0 1
51532: PPUSH
51533: CALL_OW 321
51537: PUSH
51538: LD_INT 2
51540: EQUAL
51541: ST_TO_ADDR
51542: GO 51831
51544: LD_INT 22
51546: DOUBLE
51547: EQUAL
51548: IFTRUE 51558
51550: LD_INT 36
51552: DOUBLE
51553: EQUAL
51554: IFTRUE 51558
51556: GO 51583
51558: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51559: LD_ADDR_VAR 0 3
51563: PUSH
51564: LD_INT 15
51566: PPUSH
51567: LD_VAR 0 1
51571: PPUSH
51572: CALL_OW 321
51576: PUSH
51577: LD_INT 2
51579: EQUAL
51580: ST_TO_ADDR
51581: GO 51831
51583: LD_INT 30
51585: DOUBLE
51586: EQUAL
51587: IFTRUE 51591
51589: GO 51616
51591: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51592: LD_ADDR_VAR 0 3
51596: PUSH
51597: LD_INT 20
51599: PPUSH
51600: LD_VAR 0 1
51604: PPUSH
51605: CALL_OW 321
51609: PUSH
51610: LD_INT 2
51612: EQUAL
51613: ST_TO_ADDR
51614: GO 51831
51616: LD_INT 28
51618: DOUBLE
51619: EQUAL
51620: IFTRUE 51630
51622: LD_INT 21
51624: DOUBLE
51625: EQUAL
51626: IFTRUE 51630
51628: GO 51655
51630: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51631: LD_ADDR_VAR 0 3
51635: PUSH
51636: LD_INT 21
51638: PPUSH
51639: LD_VAR 0 1
51643: PPUSH
51644: CALL_OW 321
51648: PUSH
51649: LD_INT 2
51651: EQUAL
51652: ST_TO_ADDR
51653: GO 51831
51655: LD_INT 16
51657: DOUBLE
51658: EQUAL
51659: IFTRUE 51663
51661: GO 51690
51663: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: LD_EXP 61
51673: PPUSH
51674: LD_VAR 0 1
51678: PPUSH
51679: CALL_OW 321
51683: PUSH
51684: LD_INT 2
51686: EQUAL
51687: ST_TO_ADDR
51688: GO 51831
51690: LD_INT 19
51692: DOUBLE
51693: EQUAL
51694: IFTRUE 51704
51696: LD_INT 23
51698: DOUBLE
51699: EQUAL
51700: IFTRUE 51704
51702: GO 51731
51704: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51705: LD_ADDR_VAR 0 3
51709: PUSH
51710: LD_EXP 60
51714: PPUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: CALL_OW 321
51724: PUSH
51725: LD_INT 2
51727: EQUAL
51728: ST_TO_ADDR
51729: GO 51831
51731: LD_INT 17
51733: DOUBLE
51734: EQUAL
51735: IFTRUE 51739
51737: GO 51764
51739: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51740: LD_ADDR_VAR 0 3
51744: PUSH
51745: LD_INT 39
51747: PPUSH
51748: LD_VAR 0 1
51752: PPUSH
51753: CALL_OW 321
51757: PUSH
51758: LD_INT 2
51760: EQUAL
51761: ST_TO_ADDR
51762: GO 51831
51764: LD_INT 18
51766: DOUBLE
51767: EQUAL
51768: IFTRUE 51772
51770: GO 51797
51772: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51773: LD_ADDR_VAR 0 3
51777: PUSH
51778: LD_INT 40
51780: PPUSH
51781: LD_VAR 0 1
51785: PPUSH
51786: CALL_OW 321
51790: PUSH
51791: LD_INT 2
51793: EQUAL
51794: ST_TO_ADDR
51795: GO 51831
51797: LD_INT 27
51799: DOUBLE
51800: EQUAL
51801: IFTRUE 51805
51803: GO 51830
51805: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51806: LD_ADDR_VAR 0 3
51810: PUSH
51811: LD_INT 35
51813: PPUSH
51814: LD_VAR 0 1
51818: PPUSH
51819: CALL_OW 321
51823: PUSH
51824: LD_INT 2
51826: EQUAL
51827: ST_TO_ADDR
51828: GO 51831
51830: POP
// end ;
51831: LD_VAR 0 3
51835: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51836: LD_INT 0
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
51848: PPUSH
// result := false ;
51849: LD_ADDR_VAR 0 6
51853: PUSH
51854: LD_INT 0
51856: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51857: LD_VAR 0 1
51861: NOT
51862: PUSH
51863: LD_VAR 0 1
51867: PPUSH
51868: CALL_OW 266
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: IN
51883: NOT
51884: OR
51885: PUSH
51886: LD_VAR 0 2
51890: NOT
51891: OR
51892: PUSH
51893: LD_VAR 0 5
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: LD_INT 5
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: IN
51924: NOT
51925: OR
51926: PUSH
51927: LD_VAR 0 3
51931: PPUSH
51932: LD_VAR 0 4
51936: PPUSH
51937: CALL_OW 488
51941: NOT
51942: OR
51943: IFFALSE 51947
// exit ;
51945: GO 52683
// side := GetSide ( depot ) ;
51947: LD_ADDR_VAR 0 9
51951: PUSH
51952: LD_VAR 0 1
51956: PPUSH
51957: CALL_OW 255
51961: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51962: LD_VAR 0 9
51966: PPUSH
51967: LD_VAR 0 2
51971: PPUSH
51972: CALL 51456 0 2
51976: NOT
51977: IFFALSE 51981
// exit ;
51979: GO 52683
// pom := GetBase ( depot ) ;
51981: LD_ADDR_VAR 0 10
51985: PUSH
51986: LD_VAR 0 1
51990: PPUSH
51991: CALL_OW 274
51995: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51996: LD_ADDR_VAR 0 11
52000: PUSH
52001: LD_VAR 0 2
52005: PPUSH
52006: LD_VAR 0 1
52010: PPUSH
52011: CALL_OW 248
52015: PPUSH
52016: CALL_OW 450
52020: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52021: LD_VAR 0 10
52025: PPUSH
52026: LD_INT 1
52028: PPUSH
52029: CALL_OW 275
52033: PUSH
52034: LD_VAR 0 11
52038: PUSH
52039: LD_INT 1
52041: ARRAY
52042: GREATEREQUAL
52043: PUSH
52044: LD_VAR 0 10
52048: PPUSH
52049: LD_INT 2
52051: PPUSH
52052: CALL_OW 275
52056: PUSH
52057: LD_VAR 0 11
52061: PUSH
52062: LD_INT 2
52064: ARRAY
52065: GREATEREQUAL
52066: AND
52067: PUSH
52068: LD_VAR 0 10
52072: PPUSH
52073: LD_INT 3
52075: PPUSH
52076: CALL_OW 275
52080: PUSH
52081: LD_VAR 0 11
52085: PUSH
52086: LD_INT 3
52088: ARRAY
52089: GREATEREQUAL
52090: AND
52091: NOT
52092: IFFALSE 52096
// exit ;
52094: GO 52683
// if GetBType ( depot ) = b_depot then
52096: LD_VAR 0 1
52100: PPUSH
52101: CALL_OW 266
52105: PUSH
52106: LD_INT 0
52108: EQUAL
52109: IFFALSE 52121
// dist := 28 else
52111: LD_ADDR_VAR 0 14
52115: PUSH
52116: LD_INT 28
52118: ST_TO_ADDR
52119: GO 52129
// dist := 36 ;
52121: LD_ADDR_VAR 0 14
52125: PUSH
52126: LD_INT 36
52128: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52129: LD_VAR 0 1
52133: PPUSH
52134: LD_VAR 0 3
52138: PPUSH
52139: LD_VAR 0 4
52143: PPUSH
52144: CALL_OW 297
52148: PUSH
52149: LD_VAR 0 14
52153: GREATER
52154: IFFALSE 52158
// exit ;
52156: GO 52683
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52158: LD_ADDR_VAR 0 12
52162: PUSH
52163: LD_VAR 0 2
52167: PPUSH
52168: LD_VAR 0 3
52172: PPUSH
52173: LD_VAR 0 4
52177: PPUSH
52178: LD_VAR 0 5
52182: PPUSH
52183: LD_VAR 0 1
52187: PPUSH
52188: CALL_OW 248
52192: PPUSH
52193: LD_INT 0
52195: PPUSH
52196: CALL 52688 0 6
52200: ST_TO_ADDR
// if not hexes then
52201: LD_VAR 0 12
52205: NOT
52206: IFFALSE 52210
// exit ;
52208: GO 52683
// hex := GetHexInfo ( x , y ) ;
52210: LD_ADDR_VAR 0 15
52214: PUSH
52215: LD_VAR 0 3
52219: PPUSH
52220: LD_VAR 0 4
52224: PPUSH
52225: CALL_OW 546
52229: ST_TO_ADDR
// if hex [ 1 ] then
52230: LD_VAR 0 15
52234: PUSH
52235: LD_INT 1
52237: ARRAY
52238: IFFALSE 52242
// exit ;
52240: GO 52683
// height := hex [ 2 ] ;
52242: LD_ADDR_VAR 0 13
52246: PUSH
52247: LD_VAR 0 15
52251: PUSH
52252: LD_INT 2
52254: ARRAY
52255: ST_TO_ADDR
// for i = 1 to hexes do
52256: LD_ADDR_VAR 0 7
52260: PUSH
52261: DOUBLE
52262: LD_INT 1
52264: DEC
52265: ST_TO_ADDR
52266: LD_VAR 0 12
52270: PUSH
52271: FOR_TO
52272: IFFALSE 52602
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52274: LD_VAR 0 12
52278: PUSH
52279: LD_VAR 0 7
52283: ARRAY
52284: PUSH
52285: LD_INT 1
52287: ARRAY
52288: PPUSH
52289: LD_VAR 0 12
52293: PUSH
52294: LD_VAR 0 7
52298: ARRAY
52299: PUSH
52300: LD_INT 2
52302: ARRAY
52303: PPUSH
52304: CALL_OW 488
52308: NOT
52309: PUSH
52310: LD_VAR 0 12
52314: PUSH
52315: LD_VAR 0 7
52319: ARRAY
52320: PUSH
52321: LD_INT 1
52323: ARRAY
52324: PPUSH
52325: LD_VAR 0 12
52329: PUSH
52330: LD_VAR 0 7
52334: ARRAY
52335: PUSH
52336: LD_INT 2
52338: ARRAY
52339: PPUSH
52340: CALL_OW 428
52344: PUSH
52345: LD_INT 0
52347: GREATER
52348: OR
52349: PUSH
52350: LD_VAR 0 12
52354: PUSH
52355: LD_VAR 0 7
52359: ARRAY
52360: PUSH
52361: LD_INT 1
52363: ARRAY
52364: PPUSH
52365: LD_VAR 0 12
52369: PUSH
52370: LD_VAR 0 7
52374: ARRAY
52375: PUSH
52376: LD_INT 2
52378: ARRAY
52379: PPUSH
52380: CALL_OW 351
52384: OR
52385: IFFALSE 52391
// exit ;
52387: POP
52388: POP
52389: GO 52683
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52391: LD_ADDR_VAR 0 8
52395: PUSH
52396: LD_VAR 0 12
52400: PUSH
52401: LD_VAR 0 7
52405: ARRAY
52406: PUSH
52407: LD_INT 1
52409: ARRAY
52410: PPUSH
52411: LD_VAR 0 12
52415: PUSH
52416: LD_VAR 0 7
52420: ARRAY
52421: PUSH
52422: LD_INT 2
52424: ARRAY
52425: PPUSH
52426: CALL_OW 546
52430: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52431: LD_VAR 0 8
52435: PUSH
52436: LD_INT 1
52438: ARRAY
52439: PUSH
52440: LD_VAR 0 8
52444: PUSH
52445: LD_INT 2
52447: ARRAY
52448: PUSH
52449: LD_VAR 0 13
52453: PUSH
52454: LD_INT 2
52456: PLUS
52457: GREATER
52458: OR
52459: PUSH
52460: LD_VAR 0 8
52464: PUSH
52465: LD_INT 2
52467: ARRAY
52468: PUSH
52469: LD_VAR 0 13
52473: PUSH
52474: LD_INT 2
52476: MINUS
52477: LESS
52478: OR
52479: PUSH
52480: LD_VAR 0 8
52484: PUSH
52485: LD_INT 3
52487: ARRAY
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 8
52494: PUSH
52495: LD_INT 9
52497: PUSH
52498: LD_INT 10
52500: PUSH
52501: LD_INT 11
52503: PUSH
52504: LD_INT 12
52506: PUSH
52507: LD_INT 13
52509: PUSH
52510: LD_INT 16
52512: PUSH
52513: LD_INT 17
52515: PUSH
52516: LD_INT 18
52518: PUSH
52519: LD_INT 19
52521: PUSH
52522: LD_INT 20
52524: PUSH
52525: LD_INT 21
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: IN
52543: NOT
52544: OR
52545: PUSH
52546: LD_VAR 0 8
52550: PUSH
52551: LD_INT 5
52553: ARRAY
52554: NOT
52555: OR
52556: PUSH
52557: LD_VAR 0 8
52561: PUSH
52562: LD_INT 6
52564: ARRAY
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 7
52574: PUSH
52575: LD_INT 9
52577: PUSH
52578: LD_INT 10
52580: PUSH
52581: LD_INT 11
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: IN
52592: NOT
52593: OR
52594: IFFALSE 52600
// exit ;
52596: POP
52597: POP
52598: GO 52683
// end ;
52600: GO 52271
52602: POP
52603: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52604: LD_VAR 0 9
52608: PPUSH
52609: LD_VAR 0 3
52613: PPUSH
52614: LD_VAR 0 4
52618: PPUSH
52619: LD_INT 20
52621: PPUSH
52622: CALL 44629 0 4
52626: PUSH
52627: LD_INT 4
52629: ARRAY
52630: IFFALSE 52634
// exit ;
52632: GO 52683
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52634: LD_VAR 0 2
52638: PUSH
52639: LD_INT 29
52641: PUSH
52642: LD_INT 30
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: IN
52649: PUSH
52650: LD_VAR 0 3
52654: PPUSH
52655: LD_VAR 0 4
52659: PPUSH
52660: LD_VAR 0 9
52664: PPUSH
52665: CALL_OW 440
52669: NOT
52670: AND
52671: IFFALSE 52675
// exit ;
52673: GO 52683
// result := true ;
52675: LD_ADDR_VAR 0 6
52679: PUSH
52680: LD_INT 1
52682: ST_TO_ADDR
// end ;
52683: LD_VAR 0 6
52687: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52688: LD_INT 0
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
52697: PPUSH
52698: PPUSH
52699: PPUSH
52700: PPUSH
52701: PPUSH
52702: PPUSH
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
52709: PPUSH
52710: PPUSH
52711: PPUSH
52712: PPUSH
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
52725: PPUSH
52726: PPUSH
52727: PPUSH
52728: PPUSH
52729: PPUSH
52730: PPUSH
52731: PPUSH
52732: PPUSH
52733: PPUSH
52734: PPUSH
52735: PPUSH
52736: PPUSH
52737: PPUSH
52738: PPUSH
52739: PPUSH
52740: PPUSH
52741: PPUSH
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
// result = [ ] ;
52748: LD_ADDR_VAR 0 7
52752: PUSH
52753: EMPTY
52754: ST_TO_ADDR
// temp_list = [ ] ;
52755: LD_ADDR_VAR 0 9
52759: PUSH
52760: EMPTY
52761: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52762: LD_VAR 0 4
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: LD_INT 4
52781: PUSH
52782: LD_INT 5
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: IN
52793: NOT
52794: PUSH
52795: LD_VAR 0 1
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: IN
52810: PUSH
52811: LD_VAR 0 5
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: IN
52830: NOT
52831: AND
52832: OR
52833: IFFALSE 52837
// exit ;
52835: GO 71228
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52837: LD_VAR 0 1
52841: PUSH
52842: LD_INT 6
52844: PUSH
52845: LD_INT 7
52847: PUSH
52848: LD_INT 8
52850: PUSH
52851: LD_INT 13
52853: PUSH
52854: LD_INT 12
52856: PUSH
52857: LD_INT 15
52859: PUSH
52860: LD_INT 11
52862: PUSH
52863: LD_INT 14
52865: PUSH
52866: LD_INT 10
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: IN
52880: IFFALSE 52890
// btype = b_lab ;
52882: LD_ADDR_VAR 0 1
52886: PUSH
52887: LD_INT 6
52889: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52890: LD_VAR 0 6
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: IN
52909: NOT
52910: PUSH
52911: LD_VAR 0 1
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: LD_INT 6
52930: PUSH
52931: LD_INT 36
52933: PUSH
52934: LD_INT 4
52936: PUSH
52937: LD_INT 5
52939: PUSH
52940: LD_INT 31
52942: PUSH
52943: LD_INT 32
52945: PUSH
52946: LD_INT 33
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: IN
52962: NOT
52963: PUSH
52964: LD_VAR 0 6
52968: PUSH
52969: LD_INT 1
52971: EQUAL
52972: AND
52973: OR
52974: PUSH
52975: LD_VAR 0 1
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: IN
52990: NOT
52991: PUSH
52992: LD_VAR 0 6
52996: PUSH
52997: LD_INT 2
52999: EQUAL
53000: AND
53001: OR
53002: IFFALSE 53012
// mode = 0 ;
53004: LD_ADDR_VAR 0 6
53008: PUSH
53009: LD_INT 0
53011: ST_TO_ADDR
// case mode of 0 :
53012: LD_VAR 0 6
53016: PUSH
53017: LD_INT 0
53019: DOUBLE
53020: EQUAL
53021: IFTRUE 53025
53023: GO 64478
53025: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53026: LD_ADDR_VAR 0 11
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 3
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53219: LD_ADDR_VAR 0 12
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 3
53376: NEG
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 3
53387: NEG
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53415: LD_ADDR_VAR 0 13
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: LD_INT 3
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53614: LD_ADDR_VAR 0 14
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53810: LD_ADDR_VAR 0 15
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54003: LD_ADDR_VAR 0 16
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 2
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 3
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54196: LD_ADDR_VAR 0 17
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54426: LD_ADDR_VAR 0 18
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54656: LD_ADDR_VAR 0 19
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54886: LD_ADDR_VAR 0 20
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55116: LD_ADDR_VAR 0 21
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55346: LD_ADDR_VAR 0 22
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 2
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55576: LD_ADDR_VAR 0 23
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: NEG
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55856: LD_ADDR_VAR 0 24
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56132: LD_ADDR_VAR 0 25
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56406: LD_ADDR_VAR 0 26
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56682: LD_ADDR_VAR 0 27
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56962: LD_ADDR_VAR 0 28
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 3
57209: NEG
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57244: LD_ADDR_VAR 0 29
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57523: LD_ADDR_VAR 0 30
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 3
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 3
57766: NEG
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57801: LD_ADDR_VAR 0 31
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58079: LD_ADDR_VAR 0 32
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: LD_INT 3
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58357: LD_ADDR_VAR 0 33
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 3
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 3
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 3
58601: NEG
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58636: LD_ADDR_VAR 0 34
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58916: LD_ADDR_VAR 0 35
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59028: LD_ADDR_VAR 0 36
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: LD_INT 2
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59140: LD_ADDR_VAR 0 37
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59252: LD_ADDR_VAR 0 38
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59364: LD_ADDR_VAR 0 39
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59476: LD_ADDR_VAR 0 40
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59588: LD_ADDR_VAR 0 41
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: LD_INT 3
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 3
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 3
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59938: LD_ADDR_VAR 0 42
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 2
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: NEG
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: LD_INT 3
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60288: LD_ADDR_VAR 0 43
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60636: LD_ADDR_VAR 0 44
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 2
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: LD_INT 2
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 3
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 3
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 3
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 3
60910: NEG
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: NEG
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: LD_INT 3
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60986: LD_ADDR_VAR 0 45
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 2
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 2
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 3
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 3
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 2
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 3
61295: NEG
61296: PUSH
61297: LD_INT 3
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61336: LD_ADDR_VAR 0 46
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: LD_INT 1
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: LD_INT 2
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 2
61502: NEG
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: LD_INT 3
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 3
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 2
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 3
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: NEG
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: NEG
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61684: LD_ADDR_VAR 0 47
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: LD_INT 2
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: NEG
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61835: LD_ADDR_VAR 0 48
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 0
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61982: LD_ADDR_VAR 0 49
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 2
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62126: LD_ADDR_VAR 0 50
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62270: LD_ADDR_VAR 0 51
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: NEG
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62417: LD_ADDR_VAR 0 52
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62568: LD_ADDR_VAR 0 53
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: LD_INT 2
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62798: LD_ADDR_VAR 0 54
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 1
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 2
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 2
62985: NEG
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: LD_INT 2
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63028: LD_ADDR_VAR 0 55
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: NEG
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: NEG
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: LD_INT 2
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63258: LD_ADDR_VAR 0 56
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: LD_INT 1
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: NEG
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: NEG
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63488: LD_ADDR_VAR 0 57
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: LD_INT 2
63573: NEG
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_INT 2
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 2
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: NEG
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 2
63675: NEG
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63718: LD_ADDR_VAR 0 58
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: LD_INT 2
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: LD_INT 2
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: NEG
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63948: LD_ADDR_VAR 0 59
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 0
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64036: LD_ADDR_VAR 0 60
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64124: LD_ADDR_VAR 0 61
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 1
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64212: LD_ADDR_VAR 0 62
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64300: LD_ADDR_VAR 0 63
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64388: LD_ADDR_VAR 0 64
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: ST_TO_ADDR
// end ; 1 :
64476: GO 70373
64478: LD_INT 1
64480: DOUBLE
64481: EQUAL
64482: IFTRUE 64486
64484: GO 67109
64486: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64487: LD_ADDR_VAR 0 11
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: LD_INT 3
64498: NEG
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 3
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 2
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64531: LD_ADDR_VAR 0 12
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 3
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: LIST
64571: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64572: LD_ADDR_VAR 0 13
64576: PUSH
64577: LD_INT 3
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 3
64589: PUSH
64590: LD_INT 3
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: LD_INT 3
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: LIST
64611: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64612: LD_ADDR_VAR 0 14
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: LD_INT 2
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: LIST
64652: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64653: LD_ADDR_VAR 0 15
64657: PUSH
64658: LD_INT 2
64660: NEG
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 3
64671: NEG
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64697: LD_ADDR_VAR 0 16
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: LD_INT 3
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 3
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: LD_INT 3
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64743: LD_ADDR_VAR 0 17
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: LD_INT 3
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 3
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64787: LD_ADDR_VAR 0 18
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 3
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 3
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64828: LD_ADDR_VAR 0 19
64832: PUSH
64833: LD_INT 3
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: PUSH
64846: LD_INT 3
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64868: LD_ADDR_VAR 0 20
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: NEG
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64909: LD_ADDR_VAR 0 21
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: NEG
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: NEG
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64953: LD_ADDR_VAR 0 22
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: LD_INT 3
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 3
64972: NEG
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 3
64984: NEG
64985: PUSH
64986: LD_INT 3
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: LIST
64998: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64999: LD_ADDR_VAR 0 23
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: LD_INT 4
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: PUSH
65030: LD_INT 3
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65043: LD_ADDR_VAR 0 24
65047: PUSH
65048: LD_INT 3
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 4
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: LIST
65083: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65084: LD_ADDR_VAR 0 25
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: LD_INT 3
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 4
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 3
65111: PUSH
65112: LD_INT 4
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65124: LD_ADDR_VAR 0 26
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: LD_INT 3
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: LD_INT 4
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: LIST
65164: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65165: LD_ADDR_VAR 0 27
65169: PUSH
65170: LD_INT 3
65172: NEG
65173: PUSH
65174: LD_INT 0
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 3
65183: NEG
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 4
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65209: LD_ADDR_VAR 0 28
65213: PUSH
65214: LD_INT 3
65216: NEG
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: LD_INT 4
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 4
65240: NEG
65241: PUSH
65242: LD_INT 3
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: LIST
65254: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65255: LD_ADDR_VAR 0 29
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: LD_INT 3
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 2
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 4
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 4
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: LD_INT 5
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: LD_INT 5
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: LD_INT 4
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: LD_INT 6
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 6
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: LD_INT 5
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65410: LD_ADDR_VAR 0 30
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 3
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 4
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 4
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 4
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 5
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 5
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 5
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 6
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 6
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65553: LD_ADDR_VAR 0 31
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 3
65570: PUSH
65571: LD_INT 3
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: LD_INT 3
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 4
65600: PUSH
65601: LD_INT 4
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 3
65610: PUSH
65611: LD_INT 4
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 5
65620: PUSH
65621: LD_INT 4
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 5
65630: PUSH
65631: LD_INT 5
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 4
65640: PUSH
65641: LD_INT 5
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 6
65650: PUSH
65651: LD_INT 5
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 6
65660: PUSH
65661: LD_INT 6
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 5
65670: PUSH
65671: LD_INT 6
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65692: LD_ADDR_VAR 0 32
65696: PUSH
65697: LD_INT 1
65699: PUSH
65700: LD_INT 3
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: LD_INT 3
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: LD_INT 4
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 4
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 3
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: PUSH
65762: LD_INT 5
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 5
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: LD_INT 4
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: LD_INT 6
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: LD_INT 6
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 1
65812: NEG
65813: PUSH
65814: LD_INT 5
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65835: LD_ADDR_VAR 0 33
65839: PUSH
65840: LD_INT 2
65842: NEG
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 3
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 3
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 3
65876: NEG
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 4
65887: NEG
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 4
65898: NEG
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 4
65910: NEG
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 5
65921: NEG
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 5
65932: NEG
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 5
65944: NEG
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 6
65955: NEG
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 6
65966: NEG
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65990: LD_ADDR_VAR 0 34
65994: PUSH
65995: LD_INT 2
65997: NEG
65998: PUSH
65999: LD_INT 3
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 3
66009: NEG
66010: PUSH
66011: LD_INT 2
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 3
66021: NEG
66022: PUSH
66023: LD_INT 3
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 3
66033: NEG
66034: PUSH
66035: LD_INT 4
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 4
66045: NEG
66046: PUSH
66047: LD_INT 3
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 4
66057: NEG
66058: PUSH
66059: LD_INT 4
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 4
66069: NEG
66070: PUSH
66071: LD_INT 5
66073: NEG
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 5
66081: NEG
66082: PUSH
66083: LD_INT 4
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 5
66093: NEG
66094: PUSH
66095: LD_INT 5
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 5
66105: NEG
66106: PUSH
66107: LD_INT 6
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 6
66117: NEG
66118: PUSH
66119: LD_INT 5
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 6
66129: NEG
66130: PUSH
66131: LD_INT 6
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66153: LD_ADDR_VAR 0 41
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: LD_INT 2
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: LD_INT 3
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: LIST
66196: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66197: LD_ADDR_VAR 0 42
66201: PUSH
66202: LD_INT 2
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 2
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 3
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: LIST
66237: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66238: LD_ADDR_VAR 0 43
66242: PUSH
66243: LD_INT 2
66245: PUSH
66246: LD_INT 2
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 3
66255: PUSH
66256: LD_INT 2
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: LD_INT 3
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: LIST
66277: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66278: LD_ADDR_VAR 0 44
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: LIST
66318: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66319: LD_ADDR_VAR 0 45
66323: PUSH
66324: LD_INT 2
66326: NEG
66327: PUSH
66328: LD_INT 0
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 2
66337: NEG
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 3
66348: NEG
66349: PUSH
66350: LD_INT 1
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66363: LD_ADDR_VAR 0 46
66367: PUSH
66368: LD_INT 2
66370: NEG
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 2
66382: NEG
66383: PUSH
66384: LD_INT 3
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 3
66394: NEG
66395: PUSH
66396: LD_INT 2
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: LIST
66408: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66409: LD_ADDR_VAR 0 47
66413: PUSH
66414: LD_INT 2
66416: NEG
66417: PUSH
66418: LD_INT 3
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: LD_INT 3
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66442: LD_ADDR_VAR 0 48
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 2
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66473: LD_ADDR_VAR 0 49
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 3
66490: PUSH
66491: LD_INT 2
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66502: LD_ADDR_VAR 0 50
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: LD_INT 3
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66531: LD_ADDR_VAR 0 51
66535: PUSH
66536: LD_INT 1
66538: NEG
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 2
66549: NEG
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66562: LD_ADDR_VAR 0 52
66566: PUSH
66567: LD_INT 3
66569: NEG
66570: PUSH
66571: LD_INT 1
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 3
66581: NEG
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66595: LD_ADDR_VAR 0 53
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: LD_INT 3
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 3
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 2
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: LIST
66638: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66639: LD_ADDR_VAR 0 54
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 3
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: LD_INT 1
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: LIST
66679: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66680: LD_ADDR_VAR 0 55
66684: PUSH
66685: LD_INT 3
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: PUSH
66698: LD_INT 3
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: LD_INT 3
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: LIST
66719: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66720: LD_ADDR_VAR 0 56
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: LD_INT 3
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66761: LD_ADDR_VAR 0 57
66765: PUSH
66766: LD_INT 2
66768: NEG
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 3
66779: NEG
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: NEG
66791: PUSH
66792: LD_INT 1
66794: NEG
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66805: LD_ADDR_VAR 0 58
66809: PUSH
66810: LD_INT 2
66812: NEG
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 3
66824: NEG
66825: PUSH
66826: LD_INT 2
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 3
66836: NEG
66837: PUSH
66838: LD_INT 3
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: LIST
66850: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66851: LD_ADDR_VAR 0 59
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: LD_INT 2
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 1
66881: PUSH
66882: LD_INT 1
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66895: LD_ADDR_VAR 0 60
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 2
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: LIST
66935: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66936: LD_ADDR_VAR 0 61
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 2
66953: PUSH
66954: LD_INT 2
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: LD_INT 2
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: LIST
66975: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66976: LD_ADDR_VAR 0 62
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 2
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 2
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: LIST
67016: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67017: LD_ADDR_VAR 0 63
67021: PUSH
67022: LD_INT 1
67024: NEG
67025: PUSH
67026: LD_INT 1
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 2
67035: NEG
67036: PUSH
67037: LD_INT 0
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 2
67046: NEG
67047: PUSH
67048: LD_INT 1
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: LIST
67060: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67061: LD_ADDR_VAR 0 64
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: LD_INT 2
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 2
67080: NEG
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: LD_INT 2
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// end ; 2 :
67107: GO 70373
67109: LD_INT 2
67111: DOUBLE
67112: EQUAL
67113: IFTRUE 67117
67115: GO 70372
67117: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67118: LD_ADDR_VAR 0 29
67122: PUSH
67123: LD_INT 4
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 4
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 5
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 5
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 4
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 3
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: LD_INT 2
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: LD_INT 2
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 3
67218: PUSH
67219: LD_INT 3
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: LD_INT 2
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: PUSH
67239: LD_INT 3
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 4
67248: PUSH
67249: LD_INT 4
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 3
67258: PUSH
67259: LD_INT 4
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 2
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 2
67278: PUSH
67279: LD_INT 2
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 4
67288: PUSH
67289: LD_INT 2
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 2
67298: PUSH
67299: LD_INT 4
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 4
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 0
67318: PUSH
67319: LD_INT 3
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: LD_INT 4
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: PUSH
67339: LD_INT 5
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 5
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: LD_INT 4
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: LD_INT 3
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 2
67380: PUSH
67381: LD_INT 5
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 2
67390: NEG
67391: PUSH
67392: LD_INT 3
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 3
67401: NEG
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: NEG
67413: PUSH
67414: LD_INT 1
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: NEG
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: LD_INT 1
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 3
67446: NEG
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 4
67457: NEG
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 4
67468: NEG
67469: PUSH
67470: LD_INT 1
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 4
67480: NEG
67481: PUSH
67482: LD_INT 2
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 2
67492: NEG
67493: PUSH
67494: LD_INT 2
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 4
67503: NEG
67504: PUSH
67505: LD_INT 4
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 4
67515: NEG
67516: PUSH
67517: LD_INT 5
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 3
67527: NEG
67528: PUSH
67529: LD_INT 4
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 3
67539: NEG
67540: PUSH
67541: LD_INT 3
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 4
67551: NEG
67552: PUSH
67553: LD_INT 3
67555: NEG
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 5
67563: NEG
67564: PUSH
67565: LD_INT 4
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 5
67575: NEG
67576: PUSH
67577: LD_INT 5
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: LD_INT 5
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 5
67599: NEG
67600: PUSH
67601: LD_INT 3
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67656: LD_ADDR_VAR 0 30
67660: PUSH
67661: LD_INT 4
67663: PUSH
67664: LD_INT 4
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 4
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 5
67683: PUSH
67684: LD_INT 4
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 5
67693: PUSH
67694: LD_INT 5
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 4
67703: PUSH
67704: LD_INT 5
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: LD_INT 4
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 3
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 5
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: LD_INT 5
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: LD_INT 3
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: LD_INT 4
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: NEG
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: LD_INT 2
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 2
67825: PUSH
67826: LD_INT 4
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: LD_INT 2
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 4
67846: NEG
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 4
67857: NEG
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 3
67880: NEG
67881: PUSH
67882: LD_INT 1
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 4
67891: NEG
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 5
67902: NEG
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 5
67913: NEG
67914: PUSH
67915: LD_INT 1
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 5
67925: NEG
67926: PUSH
67927: LD_INT 2
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: NEG
67938: PUSH
67939: LD_INT 2
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 3
67960: NEG
67961: PUSH
67962: LD_INT 4
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 2
67972: NEG
67973: PUSH
67974: LD_INT 3
67976: NEG
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 2
67984: NEG
67985: PUSH
67986: LD_INT 2
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 3
67996: NEG
67997: PUSH
67998: LD_INT 2
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 4
68008: NEG
68009: PUSH
68010: LD_INT 3
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 4
68020: NEG
68021: PUSH
68022: LD_INT 4
68024: NEG
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 2
68032: NEG
68033: PUSH
68034: LD_INT 4
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 4
68044: NEG
68045: PUSH
68046: LD_INT 2
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: LD_INT 4
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 0
68067: PUSH
68068: LD_INT 5
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 1
68078: PUSH
68079: LD_INT 4
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: PUSH
68090: LD_INT 3
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: LD_INT 3
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 1
68111: NEG
68112: PUSH
68113: LD_INT 4
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 1
68123: NEG
68124: PUSH
68125: LD_INT 5
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: LD_INT 3
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 2
68146: NEG
68147: PUSH
68148: LD_INT 5
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68203: LD_ADDR_VAR 0 31
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: LD_INT 4
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: LD_INT 3
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: LD_INT 4
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: LD_INT 5
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: LD_INT 5
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: LD_INT 4
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 1
68271: NEG
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 2
68282: PUSH
68283: LD_INT 5
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 2
68292: NEG
68293: PUSH
68294: LD_INT 3
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 3
68303: NEG
68304: PUSH
68305: LD_INT 0
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 3
68314: NEG
68315: PUSH
68316: LD_INT 1
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 2
68337: NEG
68338: PUSH
68339: LD_INT 1
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 3
68348: NEG
68349: PUSH
68350: LD_INT 1
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 4
68359: NEG
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 4
68370: NEG
68371: PUSH
68372: LD_INT 1
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 4
68382: NEG
68383: PUSH
68384: LD_INT 2
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 2
68394: NEG
68395: PUSH
68396: LD_INT 2
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 4
68405: NEG
68406: PUSH
68407: LD_INT 4
68409: NEG
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 4
68417: NEG
68418: PUSH
68419: LD_INT 5
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 3
68429: NEG
68430: PUSH
68431: LD_INT 4
68433: NEG
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 3
68441: NEG
68442: PUSH
68443: LD_INT 3
68445: NEG
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 4
68453: NEG
68454: PUSH
68455: LD_INT 3
68457: NEG
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 5
68465: NEG
68466: PUSH
68467: LD_INT 4
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 5
68477: NEG
68478: PUSH
68479: LD_INT 5
68481: NEG
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 3
68489: NEG
68490: PUSH
68491: LD_INT 5
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 5
68501: NEG
68502: PUSH
68503: LD_INT 3
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: LD_INT 3
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 0
68524: PUSH
68525: LD_INT 4
68527: NEG
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 1
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: PUSH
68547: LD_INT 2
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: LD_INT 2
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: LD_INT 3
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: PUSH
68582: LD_INT 4
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 2
68592: PUSH
68593: LD_INT 2
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 2
68603: NEG
68604: PUSH
68605: LD_INT 4
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 4
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 4
68625: PUSH
68626: LD_INT 1
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 5
68636: PUSH
68637: LD_INT 0
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 5
68646: PUSH
68647: LD_INT 1
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 4
68656: PUSH
68657: LD_INT 1
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 3
68676: PUSH
68677: LD_INT 1
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 3
68687: PUSH
68688: LD_INT 2
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 5
68698: PUSH
68699: LD_INT 2
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68753: LD_ADDR_VAR 0 32
68757: PUSH
68758: LD_INT 4
68760: NEG
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 4
68771: NEG
68772: PUSH
68773: LD_INT 1
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 3
68783: NEG
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 3
68794: NEG
68795: PUSH
68796: LD_INT 1
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 4
68805: NEG
68806: PUSH
68807: LD_INT 1
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 5
68816: NEG
68817: PUSH
68818: LD_INT 0
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 5
68827: NEG
68828: PUSH
68829: LD_INT 1
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 5
68839: NEG
68840: PUSH
68841: LD_INT 2
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 3
68851: NEG
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 3
68862: NEG
68863: PUSH
68864: LD_INT 3
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 3
68874: NEG
68875: PUSH
68876: LD_INT 4
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 2
68886: NEG
68887: PUSH
68888: LD_INT 3
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 2
68898: NEG
68899: PUSH
68900: LD_INT 2
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 3
68910: NEG
68911: PUSH
68912: LD_INT 2
68914: NEG
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 4
68922: NEG
68923: PUSH
68924: LD_INT 3
68926: NEG
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 4
68934: NEG
68935: PUSH
68936: LD_INT 4
68938: NEG
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: LD_INT 4
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 4
68958: NEG
68959: PUSH
68960: LD_INT 2
68962: NEG
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: LD_INT 4
68973: NEG
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 0
68981: PUSH
68982: LD_INT 5
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 1
68992: PUSH
68993: LD_INT 4
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 1
69003: PUSH
69004: LD_INT 3
69006: NEG
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: LD_INT 3
69017: NEG
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 1
69025: NEG
69026: PUSH
69027: LD_INT 4
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 1
69037: NEG
69038: PUSH
69039: LD_INT 5
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 2
69049: PUSH
69050: LD_INT 3
69052: NEG
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 2
69060: NEG
69061: PUSH
69062: LD_INT 5
69064: NEG
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 3
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 3
69082: PUSH
69083: LD_INT 1
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 4
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 4
69103: PUSH
69104: LD_INT 1
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 3
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 2
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 2
69133: PUSH
69134: LD_INT 1
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 2
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 4
69155: PUSH
69156: LD_INT 2
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 4
69165: PUSH
69166: LD_INT 4
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 4
69175: PUSH
69176: LD_INT 3
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 5
69185: PUSH
69186: LD_INT 4
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 5
69195: PUSH
69196: LD_INT 5
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 4
69205: PUSH
69206: LD_INT 5
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 3
69215: PUSH
69216: LD_INT 4
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 3
69225: PUSH
69226: LD_INT 3
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 5
69235: PUSH
69236: LD_INT 3
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 3
69245: PUSH
69246: LD_INT 5
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69300: LD_ADDR_VAR 0 33
69304: PUSH
69305: LD_INT 4
69307: NEG
69308: PUSH
69309: LD_INT 4
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 4
69319: NEG
69320: PUSH
69321: LD_INT 5
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 3
69331: NEG
69332: PUSH
69333: LD_INT 4
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: LD_INT 3
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 4
69355: NEG
69356: PUSH
69357: LD_INT 3
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 5
69367: NEG
69368: PUSH
69369: LD_INT 4
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 5
69379: NEG
69380: PUSH
69381: LD_INT 5
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 3
69391: NEG
69392: PUSH
69393: LD_INT 5
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 5
69403: NEG
69404: PUSH
69405: LD_INT 3
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: LD_INT 3
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: LD_INT 4
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 1
69437: PUSH
69438: LD_INT 3
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: LD_INT 2
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 0
69459: PUSH
69460: LD_INT 2
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: NEG
69471: PUSH
69472: LD_INT 3
69474: NEG
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 1
69482: NEG
69483: PUSH
69484: LD_INT 4
69486: NEG
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 2
69494: PUSH
69495: LD_INT 2
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 2
69505: NEG
69506: PUSH
69507: LD_INT 4
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 4
69517: PUSH
69518: LD_INT 0
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 4
69527: PUSH
69528: LD_INT 1
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 5
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 5
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 4
69558: PUSH
69559: LD_INT 1
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: LD_INT 1
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 3
69589: PUSH
69590: LD_INT 2
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 5
69600: PUSH
69601: LD_INT 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 3
69610: PUSH
69611: LD_INT 3
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 4
69630: PUSH
69631: LD_INT 3
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 4
69640: PUSH
69641: LD_INT 4
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 3
69650: PUSH
69651: LD_INT 4
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 2
69660: PUSH
69661: LD_INT 3
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: LD_INT 2
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 4
69680: PUSH
69681: LD_INT 2
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 2
69690: PUSH
69691: LD_INT 4
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: LD_INT 4
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 0
69710: PUSH
69711: LD_INT 3
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 1
69720: PUSH
69721: LD_INT 4
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 1
69730: PUSH
69731: LD_INT 5
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: LD_INT 5
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 1
69750: NEG
69751: PUSH
69752: LD_INT 4
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: NEG
69762: PUSH
69763: LD_INT 3
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 2
69772: PUSH
69773: LD_INT 5
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 2
69782: NEG
69783: PUSH
69784: LD_INT 3
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69838: LD_ADDR_VAR 0 34
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: LD_INT 4
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: LD_INT 5
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 1
69867: PUSH
69868: LD_INT 4
69870: NEG
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: LD_INT 3
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: LD_INT 4
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 1
69912: NEG
69913: PUSH
69914: LD_INT 5
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 2
69924: PUSH
69925: LD_INT 3
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 2
69935: NEG
69936: PUSH
69937: LD_INT 5
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 3
69947: PUSH
69948: LD_INT 0
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: LD_INT 1
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 4
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 4
69978: PUSH
69979: LD_INT 1
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 3
69988: PUSH
69989: LD_INT 1
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 2
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 2
70019: PUSH
70020: LD_INT 2
70022: NEG
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 4
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 4
70040: PUSH
70041: LD_INT 4
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 4
70050: PUSH
70051: LD_INT 3
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 5
70060: PUSH
70061: LD_INT 4
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 5
70070: PUSH
70071: LD_INT 5
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 4
70080: PUSH
70081: LD_INT 5
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 3
70090: PUSH
70091: LD_INT 4
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: LD_INT 3
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 5
70110: PUSH
70111: LD_INT 3
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 3
70120: PUSH
70121: LD_INT 5
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: LD_INT 2
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 1
70150: PUSH
70151: LD_INT 3
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 1
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: LD_INT 4
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: NEG
70181: PUSH
70182: LD_INT 3
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: LD_INT 2
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 2
70202: PUSH
70203: LD_INT 4
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 2
70212: NEG
70213: PUSH
70214: LD_INT 2
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 4
70223: NEG
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 4
70234: NEG
70235: PUSH
70236: LD_INT 1
70238: NEG
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 3
70246: NEG
70247: PUSH
70248: LD_INT 0
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 3
70257: NEG
70258: PUSH
70259: LD_INT 1
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 4
70268: NEG
70269: PUSH
70270: LD_INT 1
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 5
70279: NEG
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 5
70290: NEG
70291: PUSH
70292: LD_INT 1
70294: NEG
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 5
70302: NEG
70303: PUSH
70304: LD_INT 2
70306: NEG
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 3
70314: NEG
70315: PUSH
70316: LD_INT 2
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: ST_TO_ADDR
// end ; end ;
70370: GO 70373
70372: POP
// case btype of b_depot , b_warehouse :
70373: LD_VAR 0 1
70377: PUSH
70378: LD_INT 0
70380: DOUBLE
70381: EQUAL
70382: IFTRUE 70392
70384: LD_INT 1
70386: DOUBLE
70387: EQUAL
70388: IFTRUE 70392
70390: GO 70593
70392: POP
// case nation of nation_american :
70393: LD_VAR 0 5
70397: PUSH
70398: LD_INT 1
70400: DOUBLE
70401: EQUAL
70402: IFTRUE 70406
70404: GO 70462
70406: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70407: LD_ADDR_VAR 0 9
70411: PUSH
70412: LD_VAR 0 11
70416: PUSH
70417: LD_VAR 0 12
70421: PUSH
70422: LD_VAR 0 13
70426: PUSH
70427: LD_VAR 0 14
70431: PUSH
70432: LD_VAR 0 15
70436: PUSH
70437: LD_VAR 0 16
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: PUSH
70450: LD_VAR 0 4
70454: PUSH
70455: LD_INT 1
70457: PLUS
70458: ARRAY
70459: ST_TO_ADDR
70460: GO 70591
70462: LD_INT 2
70464: DOUBLE
70465: EQUAL
70466: IFTRUE 70470
70468: GO 70526
70470: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70471: LD_ADDR_VAR 0 9
70475: PUSH
70476: LD_VAR 0 17
70480: PUSH
70481: LD_VAR 0 18
70485: PUSH
70486: LD_VAR 0 19
70490: PUSH
70491: LD_VAR 0 20
70495: PUSH
70496: LD_VAR 0 21
70500: PUSH
70501: LD_VAR 0 22
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: PUSH
70514: LD_VAR 0 4
70518: PUSH
70519: LD_INT 1
70521: PLUS
70522: ARRAY
70523: ST_TO_ADDR
70524: GO 70591
70526: LD_INT 3
70528: DOUBLE
70529: EQUAL
70530: IFTRUE 70534
70532: GO 70590
70534: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70535: LD_ADDR_VAR 0 9
70539: PUSH
70540: LD_VAR 0 23
70544: PUSH
70545: LD_VAR 0 24
70549: PUSH
70550: LD_VAR 0 25
70554: PUSH
70555: LD_VAR 0 26
70559: PUSH
70560: LD_VAR 0 27
70564: PUSH
70565: LD_VAR 0 28
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: PUSH
70578: LD_VAR 0 4
70582: PUSH
70583: LD_INT 1
70585: PLUS
70586: ARRAY
70587: ST_TO_ADDR
70588: GO 70591
70590: POP
70591: GO 71146
70593: LD_INT 2
70595: DOUBLE
70596: EQUAL
70597: IFTRUE 70607
70599: LD_INT 3
70601: DOUBLE
70602: EQUAL
70603: IFTRUE 70607
70605: GO 70663
70607: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70608: LD_ADDR_VAR 0 9
70612: PUSH
70613: LD_VAR 0 29
70617: PUSH
70618: LD_VAR 0 30
70622: PUSH
70623: LD_VAR 0 31
70627: PUSH
70628: LD_VAR 0 32
70632: PUSH
70633: LD_VAR 0 33
70637: PUSH
70638: LD_VAR 0 34
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: PUSH
70651: LD_VAR 0 4
70655: PUSH
70656: LD_INT 1
70658: PLUS
70659: ARRAY
70660: ST_TO_ADDR
70661: GO 71146
70663: LD_INT 16
70665: DOUBLE
70666: EQUAL
70667: IFTRUE 70725
70669: LD_INT 17
70671: DOUBLE
70672: EQUAL
70673: IFTRUE 70725
70675: LD_INT 18
70677: DOUBLE
70678: EQUAL
70679: IFTRUE 70725
70681: LD_INT 19
70683: DOUBLE
70684: EQUAL
70685: IFTRUE 70725
70687: LD_INT 22
70689: DOUBLE
70690: EQUAL
70691: IFTRUE 70725
70693: LD_INT 20
70695: DOUBLE
70696: EQUAL
70697: IFTRUE 70725
70699: LD_INT 21
70701: DOUBLE
70702: EQUAL
70703: IFTRUE 70725
70705: LD_INT 23
70707: DOUBLE
70708: EQUAL
70709: IFTRUE 70725
70711: LD_INT 24
70713: DOUBLE
70714: EQUAL
70715: IFTRUE 70725
70717: LD_INT 25
70719: DOUBLE
70720: EQUAL
70721: IFTRUE 70725
70723: GO 70781
70725: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70726: LD_ADDR_VAR 0 9
70730: PUSH
70731: LD_VAR 0 35
70735: PUSH
70736: LD_VAR 0 36
70740: PUSH
70741: LD_VAR 0 37
70745: PUSH
70746: LD_VAR 0 38
70750: PUSH
70751: LD_VAR 0 39
70755: PUSH
70756: LD_VAR 0 40
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: PUSH
70769: LD_VAR 0 4
70773: PUSH
70774: LD_INT 1
70776: PLUS
70777: ARRAY
70778: ST_TO_ADDR
70779: GO 71146
70781: LD_INT 6
70783: DOUBLE
70784: EQUAL
70785: IFTRUE 70837
70787: LD_INT 7
70789: DOUBLE
70790: EQUAL
70791: IFTRUE 70837
70793: LD_INT 8
70795: DOUBLE
70796: EQUAL
70797: IFTRUE 70837
70799: LD_INT 13
70801: DOUBLE
70802: EQUAL
70803: IFTRUE 70837
70805: LD_INT 12
70807: DOUBLE
70808: EQUAL
70809: IFTRUE 70837
70811: LD_INT 15
70813: DOUBLE
70814: EQUAL
70815: IFTRUE 70837
70817: LD_INT 11
70819: DOUBLE
70820: EQUAL
70821: IFTRUE 70837
70823: LD_INT 14
70825: DOUBLE
70826: EQUAL
70827: IFTRUE 70837
70829: LD_INT 10
70831: DOUBLE
70832: EQUAL
70833: IFTRUE 70837
70835: GO 70893
70837: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70838: LD_ADDR_VAR 0 9
70842: PUSH
70843: LD_VAR 0 41
70847: PUSH
70848: LD_VAR 0 42
70852: PUSH
70853: LD_VAR 0 43
70857: PUSH
70858: LD_VAR 0 44
70862: PUSH
70863: LD_VAR 0 45
70867: PUSH
70868: LD_VAR 0 46
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: PUSH
70881: LD_VAR 0 4
70885: PUSH
70886: LD_INT 1
70888: PLUS
70889: ARRAY
70890: ST_TO_ADDR
70891: GO 71146
70893: LD_INT 36
70895: DOUBLE
70896: EQUAL
70897: IFTRUE 70901
70899: GO 70957
70901: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70902: LD_ADDR_VAR 0 9
70906: PUSH
70907: LD_VAR 0 47
70911: PUSH
70912: LD_VAR 0 48
70916: PUSH
70917: LD_VAR 0 49
70921: PUSH
70922: LD_VAR 0 50
70926: PUSH
70927: LD_VAR 0 51
70931: PUSH
70932: LD_VAR 0 52
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: PUSH
70945: LD_VAR 0 4
70949: PUSH
70950: LD_INT 1
70952: PLUS
70953: ARRAY
70954: ST_TO_ADDR
70955: GO 71146
70957: LD_INT 4
70959: DOUBLE
70960: EQUAL
70961: IFTRUE 70983
70963: LD_INT 5
70965: DOUBLE
70966: EQUAL
70967: IFTRUE 70983
70969: LD_INT 34
70971: DOUBLE
70972: EQUAL
70973: IFTRUE 70983
70975: LD_INT 37
70977: DOUBLE
70978: EQUAL
70979: IFTRUE 70983
70981: GO 71039
70983: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70984: LD_ADDR_VAR 0 9
70988: PUSH
70989: LD_VAR 0 53
70993: PUSH
70994: LD_VAR 0 54
70998: PUSH
70999: LD_VAR 0 55
71003: PUSH
71004: LD_VAR 0 56
71008: PUSH
71009: LD_VAR 0 57
71013: PUSH
71014: LD_VAR 0 58
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: PUSH
71027: LD_VAR 0 4
71031: PUSH
71032: LD_INT 1
71034: PLUS
71035: ARRAY
71036: ST_TO_ADDR
71037: GO 71146
71039: LD_INT 31
71041: DOUBLE
71042: EQUAL
71043: IFTRUE 71089
71045: LD_INT 32
71047: DOUBLE
71048: EQUAL
71049: IFTRUE 71089
71051: LD_INT 33
71053: DOUBLE
71054: EQUAL
71055: IFTRUE 71089
71057: LD_INT 27
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71089
71063: LD_INT 26
71065: DOUBLE
71066: EQUAL
71067: IFTRUE 71089
71069: LD_INT 28
71071: DOUBLE
71072: EQUAL
71073: IFTRUE 71089
71075: LD_INT 29
71077: DOUBLE
71078: EQUAL
71079: IFTRUE 71089
71081: LD_INT 30
71083: DOUBLE
71084: EQUAL
71085: IFTRUE 71089
71087: GO 71145
71089: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71090: LD_ADDR_VAR 0 9
71094: PUSH
71095: LD_VAR 0 59
71099: PUSH
71100: LD_VAR 0 60
71104: PUSH
71105: LD_VAR 0 61
71109: PUSH
71110: LD_VAR 0 62
71114: PUSH
71115: LD_VAR 0 63
71119: PUSH
71120: LD_VAR 0 64
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: PUSH
71133: LD_VAR 0 4
71137: PUSH
71138: LD_INT 1
71140: PLUS
71141: ARRAY
71142: ST_TO_ADDR
71143: GO 71146
71145: POP
// temp_list2 = [ ] ;
71146: LD_ADDR_VAR 0 10
71150: PUSH
71151: EMPTY
71152: ST_TO_ADDR
// for i in temp_list do
71153: LD_ADDR_VAR 0 8
71157: PUSH
71158: LD_VAR 0 9
71162: PUSH
71163: FOR_IN
71164: IFFALSE 71216
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71166: LD_ADDR_VAR 0 10
71170: PUSH
71171: LD_VAR 0 10
71175: PUSH
71176: LD_VAR 0 8
71180: PUSH
71181: LD_INT 1
71183: ARRAY
71184: PUSH
71185: LD_VAR 0 2
71189: PLUS
71190: PUSH
71191: LD_VAR 0 8
71195: PUSH
71196: LD_INT 2
71198: ARRAY
71199: PUSH
71200: LD_VAR 0 3
71204: PLUS
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: EMPTY
71211: LIST
71212: ADD
71213: ST_TO_ADDR
71214: GO 71163
71216: POP
71217: POP
// result = temp_list2 ;
71218: LD_ADDR_VAR 0 7
71222: PUSH
71223: LD_VAR 0 10
71227: ST_TO_ADDR
// end ;
71228: LD_VAR 0 7
71232: RET
// export function EnemyInRange ( unit , dist ) ; begin
71233: LD_INT 0
71235: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71236: LD_ADDR_VAR 0 3
71240: PUSH
71241: LD_VAR 0 1
71245: PPUSH
71246: CALL_OW 255
71250: PPUSH
71251: LD_VAR 0 1
71255: PPUSH
71256: CALL_OW 250
71260: PPUSH
71261: LD_VAR 0 1
71265: PPUSH
71266: CALL_OW 251
71270: PPUSH
71271: LD_VAR 0 2
71275: PPUSH
71276: CALL 44629 0 4
71280: PUSH
71281: LD_INT 4
71283: ARRAY
71284: ST_TO_ADDR
// end ;
71285: LD_VAR 0 3
71289: RET
// export function PlayerSeeMe ( unit ) ; begin
71290: LD_INT 0
71292: PPUSH
// result := See ( your_side , unit ) ;
71293: LD_ADDR_VAR 0 2
71297: PUSH
71298: LD_OWVAR 2
71302: PPUSH
71303: LD_VAR 0 1
71307: PPUSH
71308: CALL_OW 292
71312: ST_TO_ADDR
// end ;
71313: LD_VAR 0 2
71317: RET
// export function ReverseDir ( unit ) ; begin
71318: LD_INT 0
71320: PPUSH
// if not unit then
71321: LD_VAR 0 1
71325: NOT
71326: IFFALSE 71330
// exit ;
71328: GO 71353
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71330: LD_ADDR_VAR 0 2
71334: PUSH
71335: LD_VAR 0 1
71339: PPUSH
71340: CALL_OW 254
71344: PUSH
71345: LD_INT 3
71347: PLUS
71348: PUSH
71349: LD_INT 6
71351: MOD
71352: ST_TO_ADDR
// end ;
71353: LD_VAR 0 2
71357: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71358: LD_INT 0
71360: PPUSH
71361: PPUSH
71362: PPUSH
71363: PPUSH
71364: PPUSH
// if not hexes then
71365: LD_VAR 0 2
71369: NOT
71370: IFFALSE 71374
// exit ;
71372: GO 71522
// dist := 9999 ;
71374: LD_ADDR_VAR 0 5
71378: PUSH
71379: LD_INT 9999
71381: ST_TO_ADDR
// for i = 1 to hexes do
71382: LD_ADDR_VAR 0 4
71386: PUSH
71387: DOUBLE
71388: LD_INT 1
71390: DEC
71391: ST_TO_ADDR
71392: LD_VAR 0 2
71396: PUSH
71397: FOR_TO
71398: IFFALSE 71510
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71400: LD_VAR 0 1
71404: PPUSH
71405: LD_VAR 0 2
71409: PUSH
71410: LD_VAR 0 4
71414: ARRAY
71415: PUSH
71416: LD_INT 1
71418: ARRAY
71419: PPUSH
71420: LD_VAR 0 2
71424: PUSH
71425: LD_VAR 0 4
71429: ARRAY
71430: PUSH
71431: LD_INT 2
71433: ARRAY
71434: PPUSH
71435: CALL_OW 297
71439: PUSH
71440: LD_VAR 0 5
71444: LESS
71445: IFFALSE 71508
// begin hex := hexes [ i ] ;
71447: LD_ADDR_VAR 0 7
71451: PUSH
71452: LD_VAR 0 2
71456: PUSH
71457: LD_VAR 0 4
71461: ARRAY
71462: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71463: LD_ADDR_VAR 0 5
71467: PUSH
71468: LD_VAR 0 1
71472: PPUSH
71473: LD_VAR 0 2
71477: PUSH
71478: LD_VAR 0 4
71482: ARRAY
71483: PUSH
71484: LD_INT 1
71486: ARRAY
71487: PPUSH
71488: LD_VAR 0 2
71492: PUSH
71493: LD_VAR 0 4
71497: ARRAY
71498: PUSH
71499: LD_INT 2
71501: ARRAY
71502: PPUSH
71503: CALL_OW 297
71507: ST_TO_ADDR
// end ; end ;
71508: GO 71397
71510: POP
71511: POP
// result := hex ;
71512: LD_ADDR_VAR 0 3
71516: PUSH
71517: LD_VAR 0 7
71521: ST_TO_ADDR
// end ;
71522: LD_VAR 0 3
71526: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71527: LD_INT 0
71529: PPUSH
71530: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71531: LD_VAR 0 1
71535: NOT
71536: PUSH
71537: LD_VAR 0 1
71541: PUSH
71542: LD_INT 21
71544: PUSH
71545: LD_INT 2
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 23
71554: PUSH
71555: LD_INT 2
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PPUSH
71566: CALL_OW 69
71570: IN
71571: NOT
71572: OR
71573: IFFALSE 71577
// exit ;
71575: GO 71624
// for i = 1 to 3 do
71577: LD_ADDR_VAR 0 3
71581: PUSH
71582: DOUBLE
71583: LD_INT 1
71585: DEC
71586: ST_TO_ADDR
71587: LD_INT 3
71589: PUSH
71590: FOR_TO
71591: IFFALSE 71622
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71593: LD_VAR 0 1
71597: PPUSH
71598: CALL_OW 250
71602: PPUSH
71603: LD_VAR 0 1
71607: PPUSH
71608: CALL_OW 251
71612: PPUSH
71613: LD_INT 1
71615: PPUSH
71616: CALL_OW 453
71620: GO 71590
71622: POP
71623: POP
// end ;
71624: LD_VAR 0 2
71628: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71629: LD_INT 0
71631: PPUSH
71632: PPUSH
71633: PPUSH
71634: PPUSH
71635: PPUSH
71636: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71637: LD_VAR 0 1
71641: NOT
71642: PUSH
71643: LD_VAR 0 2
71647: NOT
71648: OR
71649: PUSH
71650: LD_VAR 0 1
71654: PPUSH
71655: CALL_OW 314
71659: OR
71660: IFFALSE 71664
// exit ;
71662: GO 72105
// x := GetX ( enemy_unit ) ;
71664: LD_ADDR_VAR 0 7
71668: PUSH
71669: LD_VAR 0 2
71673: PPUSH
71674: CALL_OW 250
71678: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71679: LD_ADDR_VAR 0 8
71683: PUSH
71684: LD_VAR 0 2
71688: PPUSH
71689: CALL_OW 251
71693: ST_TO_ADDR
// if not x or not y then
71694: LD_VAR 0 7
71698: NOT
71699: PUSH
71700: LD_VAR 0 8
71704: NOT
71705: OR
71706: IFFALSE 71710
// exit ;
71708: GO 72105
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71710: LD_ADDR_VAR 0 6
71714: PUSH
71715: LD_VAR 0 7
71719: PPUSH
71720: LD_INT 0
71722: PPUSH
71723: LD_INT 4
71725: PPUSH
71726: CALL_OW 272
71730: PUSH
71731: LD_VAR 0 8
71735: PPUSH
71736: LD_INT 0
71738: PPUSH
71739: LD_INT 4
71741: PPUSH
71742: CALL_OW 273
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_VAR 0 7
71755: PPUSH
71756: LD_INT 1
71758: PPUSH
71759: LD_INT 4
71761: PPUSH
71762: CALL_OW 272
71766: PUSH
71767: LD_VAR 0 8
71771: PPUSH
71772: LD_INT 1
71774: PPUSH
71775: LD_INT 4
71777: PPUSH
71778: CALL_OW 273
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_VAR 0 7
71791: PPUSH
71792: LD_INT 2
71794: PPUSH
71795: LD_INT 4
71797: PPUSH
71798: CALL_OW 272
71802: PUSH
71803: LD_VAR 0 8
71807: PPUSH
71808: LD_INT 2
71810: PPUSH
71811: LD_INT 4
71813: PPUSH
71814: CALL_OW 273
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_VAR 0 7
71827: PPUSH
71828: LD_INT 3
71830: PPUSH
71831: LD_INT 4
71833: PPUSH
71834: CALL_OW 272
71838: PUSH
71839: LD_VAR 0 8
71843: PPUSH
71844: LD_INT 3
71846: PPUSH
71847: LD_INT 4
71849: PPUSH
71850: CALL_OW 273
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_VAR 0 7
71863: PPUSH
71864: LD_INT 4
71866: PPUSH
71867: LD_INT 4
71869: PPUSH
71870: CALL_OW 272
71874: PUSH
71875: LD_VAR 0 8
71879: PPUSH
71880: LD_INT 4
71882: PPUSH
71883: LD_INT 4
71885: PPUSH
71886: CALL_OW 273
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_VAR 0 7
71899: PPUSH
71900: LD_INT 5
71902: PPUSH
71903: LD_INT 4
71905: PPUSH
71906: CALL_OW 272
71910: PUSH
71911: LD_VAR 0 8
71915: PPUSH
71916: LD_INT 5
71918: PPUSH
71919: LD_INT 4
71921: PPUSH
71922: CALL_OW 273
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: ST_TO_ADDR
// for i = tmp downto 1 do
71939: LD_ADDR_VAR 0 4
71943: PUSH
71944: DOUBLE
71945: LD_VAR 0 6
71949: INC
71950: ST_TO_ADDR
71951: LD_INT 1
71953: PUSH
71954: FOR_DOWNTO
71955: IFFALSE 72056
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71957: LD_VAR 0 6
71961: PUSH
71962: LD_VAR 0 4
71966: ARRAY
71967: PUSH
71968: LD_INT 1
71970: ARRAY
71971: PPUSH
71972: LD_VAR 0 6
71976: PUSH
71977: LD_VAR 0 4
71981: ARRAY
71982: PUSH
71983: LD_INT 2
71985: ARRAY
71986: PPUSH
71987: CALL_OW 488
71991: NOT
71992: PUSH
71993: LD_VAR 0 6
71997: PUSH
71998: LD_VAR 0 4
72002: ARRAY
72003: PUSH
72004: LD_INT 1
72006: ARRAY
72007: PPUSH
72008: LD_VAR 0 6
72012: PUSH
72013: LD_VAR 0 4
72017: ARRAY
72018: PUSH
72019: LD_INT 2
72021: ARRAY
72022: PPUSH
72023: CALL_OW 428
72027: PUSH
72028: LD_INT 0
72030: NONEQUAL
72031: OR
72032: IFFALSE 72054
// tmp := Delete ( tmp , i ) ;
72034: LD_ADDR_VAR 0 6
72038: PUSH
72039: LD_VAR 0 6
72043: PPUSH
72044: LD_VAR 0 4
72048: PPUSH
72049: CALL_OW 3
72053: ST_TO_ADDR
72054: GO 71954
72056: POP
72057: POP
// j := GetClosestHex ( unit , tmp ) ;
72058: LD_ADDR_VAR 0 5
72062: PUSH
72063: LD_VAR 0 1
72067: PPUSH
72068: LD_VAR 0 6
72072: PPUSH
72073: CALL 71358 0 2
72077: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72078: LD_VAR 0 1
72082: PPUSH
72083: LD_VAR 0 5
72087: PUSH
72088: LD_INT 1
72090: ARRAY
72091: PPUSH
72092: LD_VAR 0 5
72096: PUSH
72097: LD_INT 2
72099: ARRAY
72100: PPUSH
72101: CALL_OW 111
// end ;
72105: LD_VAR 0 3
72109: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72110: LD_INT 0
72112: PPUSH
72113: PPUSH
72114: PPUSH
// uc_side = 0 ;
72115: LD_ADDR_OWVAR 20
72119: PUSH
72120: LD_INT 0
72122: ST_TO_ADDR
// uc_nation = 0 ;
72123: LD_ADDR_OWVAR 21
72127: PUSH
72128: LD_INT 0
72130: ST_TO_ADDR
// InitHc_All ( ) ;
72131: CALL_OW 584
// InitVc ;
72135: CALL_OW 20
// if mastodonts then
72139: LD_VAR 0 6
72143: IFFALSE 72210
// for i = 1 to mastodonts do
72145: LD_ADDR_VAR 0 11
72149: PUSH
72150: DOUBLE
72151: LD_INT 1
72153: DEC
72154: ST_TO_ADDR
72155: LD_VAR 0 6
72159: PUSH
72160: FOR_TO
72161: IFFALSE 72208
// begin vc_chassis := 31 ;
72163: LD_ADDR_OWVAR 37
72167: PUSH
72168: LD_INT 31
72170: ST_TO_ADDR
// vc_control := control_rider ;
72171: LD_ADDR_OWVAR 38
72175: PUSH
72176: LD_INT 4
72178: ST_TO_ADDR
// animal := CreateVehicle ;
72179: LD_ADDR_VAR 0 12
72183: PUSH
72184: CALL_OW 45
72188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72189: LD_VAR 0 12
72193: PPUSH
72194: LD_VAR 0 8
72198: PPUSH
72199: LD_INT 0
72201: PPUSH
72202: CALL 74345 0 3
// end ;
72206: GO 72160
72208: POP
72209: POP
// if horses then
72210: LD_VAR 0 5
72214: IFFALSE 72281
// for i = 1 to horses do
72216: LD_ADDR_VAR 0 11
72220: PUSH
72221: DOUBLE
72222: LD_INT 1
72224: DEC
72225: ST_TO_ADDR
72226: LD_VAR 0 5
72230: PUSH
72231: FOR_TO
72232: IFFALSE 72279
// begin hc_class := 21 ;
72234: LD_ADDR_OWVAR 28
72238: PUSH
72239: LD_INT 21
72241: ST_TO_ADDR
// hc_gallery :=  ;
72242: LD_ADDR_OWVAR 33
72246: PUSH
72247: LD_STRING 
72249: ST_TO_ADDR
// animal := CreateHuman ;
72250: LD_ADDR_VAR 0 12
72254: PUSH
72255: CALL_OW 44
72259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72260: LD_VAR 0 12
72264: PPUSH
72265: LD_VAR 0 8
72269: PPUSH
72270: LD_INT 0
72272: PPUSH
72273: CALL 74345 0 3
// end ;
72277: GO 72231
72279: POP
72280: POP
// if birds then
72281: LD_VAR 0 1
72285: IFFALSE 72352
// for i = 1 to birds do
72287: LD_ADDR_VAR 0 11
72291: PUSH
72292: DOUBLE
72293: LD_INT 1
72295: DEC
72296: ST_TO_ADDR
72297: LD_VAR 0 1
72301: PUSH
72302: FOR_TO
72303: IFFALSE 72350
// begin hc_class = 18 ;
72305: LD_ADDR_OWVAR 28
72309: PUSH
72310: LD_INT 18
72312: ST_TO_ADDR
// hc_gallery =  ;
72313: LD_ADDR_OWVAR 33
72317: PUSH
72318: LD_STRING 
72320: ST_TO_ADDR
// animal := CreateHuman ;
72321: LD_ADDR_VAR 0 12
72325: PUSH
72326: CALL_OW 44
72330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72331: LD_VAR 0 12
72335: PPUSH
72336: LD_VAR 0 8
72340: PPUSH
72341: LD_INT 0
72343: PPUSH
72344: CALL 74345 0 3
// end ;
72348: GO 72302
72350: POP
72351: POP
// if tigers then
72352: LD_VAR 0 2
72356: IFFALSE 72440
// for i = 1 to tigers do
72358: LD_ADDR_VAR 0 11
72362: PUSH
72363: DOUBLE
72364: LD_INT 1
72366: DEC
72367: ST_TO_ADDR
72368: LD_VAR 0 2
72372: PUSH
72373: FOR_TO
72374: IFFALSE 72438
// begin hc_class = class_tiger ;
72376: LD_ADDR_OWVAR 28
72380: PUSH
72381: LD_INT 14
72383: ST_TO_ADDR
// hc_gallery =  ;
72384: LD_ADDR_OWVAR 33
72388: PUSH
72389: LD_STRING 
72391: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72392: LD_ADDR_OWVAR 35
72396: PUSH
72397: LD_INT 7
72399: NEG
72400: PPUSH
72401: LD_INT 7
72403: PPUSH
72404: CALL_OW 12
72408: ST_TO_ADDR
// animal := CreateHuman ;
72409: LD_ADDR_VAR 0 12
72413: PUSH
72414: CALL_OW 44
72418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72419: LD_VAR 0 12
72423: PPUSH
72424: LD_VAR 0 8
72428: PPUSH
72429: LD_INT 0
72431: PPUSH
72432: CALL 74345 0 3
// end ;
72436: GO 72373
72438: POP
72439: POP
// if apemans then
72440: LD_VAR 0 3
72444: IFFALSE 72567
// for i = 1 to apemans do
72446: LD_ADDR_VAR 0 11
72450: PUSH
72451: DOUBLE
72452: LD_INT 1
72454: DEC
72455: ST_TO_ADDR
72456: LD_VAR 0 3
72460: PUSH
72461: FOR_TO
72462: IFFALSE 72565
// begin hc_class = class_apeman ;
72464: LD_ADDR_OWVAR 28
72468: PUSH
72469: LD_INT 12
72471: ST_TO_ADDR
// hc_gallery =  ;
72472: LD_ADDR_OWVAR 33
72476: PUSH
72477: LD_STRING 
72479: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72480: LD_ADDR_OWVAR 35
72484: PUSH
72485: LD_INT 2
72487: NEG
72488: PPUSH
72489: LD_INT 2
72491: PPUSH
72492: CALL_OW 12
72496: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72497: LD_ADDR_OWVAR 31
72501: PUSH
72502: LD_INT 1
72504: PPUSH
72505: LD_INT 3
72507: PPUSH
72508: CALL_OW 12
72512: PUSH
72513: LD_INT 1
72515: PPUSH
72516: LD_INT 3
72518: PPUSH
72519: CALL_OW 12
72523: PUSH
72524: LD_INT 0
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: ST_TO_ADDR
// animal := CreateHuman ;
72536: LD_ADDR_VAR 0 12
72540: PUSH
72541: CALL_OW 44
72545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72546: LD_VAR 0 12
72550: PPUSH
72551: LD_VAR 0 8
72555: PPUSH
72556: LD_INT 0
72558: PPUSH
72559: CALL 74345 0 3
// end ;
72563: GO 72461
72565: POP
72566: POP
// if enchidnas then
72567: LD_VAR 0 4
72571: IFFALSE 72638
// for i = 1 to enchidnas do
72573: LD_ADDR_VAR 0 11
72577: PUSH
72578: DOUBLE
72579: LD_INT 1
72581: DEC
72582: ST_TO_ADDR
72583: LD_VAR 0 4
72587: PUSH
72588: FOR_TO
72589: IFFALSE 72636
// begin hc_class = 13 ;
72591: LD_ADDR_OWVAR 28
72595: PUSH
72596: LD_INT 13
72598: ST_TO_ADDR
// hc_gallery =  ;
72599: LD_ADDR_OWVAR 33
72603: PUSH
72604: LD_STRING 
72606: ST_TO_ADDR
// animal := CreateHuman ;
72607: LD_ADDR_VAR 0 12
72611: PUSH
72612: CALL_OW 44
72616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72617: LD_VAR 0 12
72621: PPUSH
72622: LD_VAR 0 8
72626: PPUSH
72627: LD_INT 0
72629: PPUSH
72630: CALL 74345 0 3
// end ;
72634: GO 72588
72636: POP
72637: POP
// if fishes then
72638: LD_VAR 0 7
72642: IFFALSE 72709
// for i = 1 to fishes do
72644: LD_ADDR_VAR 0 11
72648: PUSH
72649: DOUBLE
72650: LD_INT 1
72652: DEC
72653: ST_TO_ADDR
72654: LD_VAR 0 7
72658: PUSH
72659: FOR_TO
72660: IFFALSE 72707
// begin hc_class = 20 ;
72662: LD_ADDR_OWVAR 28
72666: PUSH
72667: LD_INT 20
72669: ST_TO_ADDR
// hc_gallery =  ;
72670: LD_ADDR_OWVAR 33
72674: PUSH
72675: LD_STRING 
72677: ST_TO_ADDR
// animal := CreateHuman ;
72678: LD_ADDR_VAR 0 12
72682: PUSH
72683: CALL_OW 44
72687: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72688: LD_VAR 0 12
72692: PPUSH
72693: LD_VAR 0 9
72697: PPUSH
72698: LD_INT 0
72700: PPUSH
72701: CALL 74345 0 3
// end ;
72705: GO 72659
72707: POP
72708: POP
// end ;
72709: LD_VAR 0 10
72713: RET
// export function WantHeal ( sci , unit ) ; begin
72714: LD_INT 0
72716: PPUSH
// if GetTaskList ( sci ) > 0 then
72717: LD_VAR 0 1
72721: PPUSH
72722: CALL_OW 437
72726: PUSH
72727: LD_INT 0
72729: GREATER
72730: IFFALSE 72800
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72732: LD_VAR 0 1
72736: PPUSH
72737: CALL_OW 437
72741: PUSH
72742: LD_INT 1
72744: ARRAY
72745: PUSH
72746: LD_INT 1
72748: ARRAY
72749: PUSH
72750: LD_STRING l
72752: EQUAL
72753: PUSH
72754: LD_VAR 0 1
72758: PPUSH
72759: CALL_OW 437
72763: PUSH
72764: LD_INT 1
72766: ARRAY
72767: PUSH
72768: LD_INT 4
72770: ARRAY
72771: PUSH
72772: LD_VAR 0 2
72776: EQUAL
72777: AND
72778: IFFALSE 72790
// result := true else
72780: LD_ADDR_VAR 0 3
72784: PUSH
72785: LD_INT 1
72787: ST_TO_ADDR
72788: GO 72798
// result := false ;
72790: LD_ADDR_VAR 0 3
72794: PUSH
72795: LD_INT 0
72797: ST_TO_ADDR
// end else
72798: GO 72808
// result := false ;
72800: LD_ADDR_VAR 0 3
72804: PUSH
72805: LD_INT 0
72807: ST_TO_ADDR
// end ;
72808: LD_VAR 0 3
72812: RET
// export function HealTarget ( sci ) ; begin
72813: LD_INT 0
72815: PPUSH
// if not sci then
72816: LD_VAR 0 1
72820: NOT
72821: IFFALSE 72825
// exit ;
72823: GO 72890
// result := 0 ;
72825: LD_ADDR_VAR 0 2
72829: PUSH
72830: LD_INT 0
72832: ST_TO_ADDR
// if GetTaskList ( sci ) then
72833: LD_VAR 0 1
72837: PPUSH
72838: CALL_OW 437
72842: IFFALSE 72890
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72844: LD_VAR 0 1
72848: PPUSH
72849: CALL_OW 437
72853: PUSH
72854: LD_INT 1
72856: ARRAY
72857: PUSH
72858: LD_INT 1
72860: ARRAY
72861: PUSH
72862: LD_STRING l
72864: EQUAL
72865: IFFALSE 72890
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72867: LD_ADDR_VAR 0 2
72871: PUSH
72872: LD_VAR 0 1
72876: PPUSH
72877: CALL_OW 437
72881: PUSH
72882: LD_INT 1
72884: ARRAY
72885: PUSH
72886: LD_INT 4
72888: ARRAY
72889: ST_TO_ADDR
// end ;
72890: LD_VAR 0 2
72894: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72895: LD_INT 0
72897: PPUSH
72898: PPUSH
72899: PPUSH
72900: PPUSH
// if not base_units then
72901: LD_VAR 0 1
72905: NOT
72906: IFFALSE 72910
// exit ;
72908: GO 72997
// result := false ;
72910: LD_ADDR_VAR 0 2
72914: PUSH
72915: LD_INT 0
72917: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72918: LD_ADDR_VAR 0 5
72922: PUSH
72923: LD_VAR 0 1
72927: PPUSH
72928: LD_INT 21
72930: PUSH
72931: LD_INT 3
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PPUSH
72938: CALL_OW 72
72942: ST_TO_ADDR
// if not tmp then
72943: LD_VAR 0 5
72947: NOT
72948: IFFALSE 72952
// exit ;
72950: GO 72997
// for i in tmp do
72952: LD_ADDR_VAR 0 3
72956: PUSH
72957: LD_VAR 0 5
72961: PUSH
72962: FOR_IN
72963: IFFALSE 72995
// begin result := EnemyInRange ( i , 22 ) ;
72965: LD_ADDR_VAR 0 2
72969: PUSH
72970: LD_VAR 0 3
72974: PPUSH
72975: LD_INT 22
72977: PPUSH
72978: CALL 71233 0 2
72982: ST_TO_ADDR
// if result then
72983: LD_VAR 0 2
72987: IFFALSE 72993
// exit ;
72989: POP
72990: POP
72991: GO 72997
// end ;
72993: GO 72962
72995: POP
72996: POP
// end ;
72997: LD_VAR 0 2
73001: RET
// export function FilterByTag ( units , tag ) ; begin
73002: LD_INT 0
73004: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73005: LD_ADDR_VAR 0 3
73009: PUSH
73010: LD_VAR 0 1
73014: PPUSH
73015: LD_INT 120
73017: PUSH
73018: LD_VAR 0 2
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PPUSH
73027: CALL_OW 72
73031: ST_TO_ADDR
// end ;
73032: LD_VAR 0 3
73036: RET
// export function IsDriver ( un ) ; begin
73037: LD_INT 0
73039: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73040: LD_ADDR_VAR 0 2
73044: PUSH
73045: LD_VAR 0 1
73049: PUSH
73050: LD_INT 55
73052: PUSH
73053: EMPTY
73054: LIST
73055: PPUSH
73056: CALL_OW 69
73060: IN
73061: ST_TO_ADDR
// end ;
73062: LD_VAR 0 2
73066: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73067: LD_INT 0
73069: PPUSH
73070: PPUSH
// list := [ ] ;
73071: LD_ADDR_VAR 0 5
73075: PUSH
73076: EMPTY
73077: ST_TO_ADDR
// case d of 0 :
73078: LD_VAR 0 3
73082: PUSH
73083: LD_INT 0
73085: DOUBLE
73086: EQUAL
73087: IFTRUE 73091
73089: GO 73224
73091: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73092: LD_ADDR_VAR 0 5
73096: PUSH
73097: LD_VAR 0 1
73101: PUSH
73102: LD_INT 4
73104: MINUS
73105: PUSH
73106: LD_VAR 0 2
73110: PUSH
73111: LD_INT 4
73113: MINUS
73114: PUSH
73115: LD_INT 2
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: LIST
73122: PUSH
73123: LD_VAR 0 1
73127: PUSH
73128: LD_INT 3
73130: MINUS
73131: PUSH
73132: LD_VAR 0 2
73136: PUSH
73137: LD_INT 1
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: LIST
73144: PUSH
73145: LD_VAR 0 1
73149: PUSH
73150: LD_INT 4
73152: PLUS
73153: PUSH
73154: LD_VAR 0 2
73158: PUSH
73159: LD_INT 4
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: LIST
73166: PUSH
73167: LD_VAR 0 1
73171: PUSH
73172: LD_INT 3
73174: PLUS
73175: PUSH
73176: LD_VAR 0 2
73180: PUSH
73181: LD_INT 3
73183: PLUS
73184: PUSH
73185: LD_INT 5
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: LIST
73192: PUSH
73193: LD_VAR 0 1
73197: PUSH
73198: LD_VAR 0 2
73202: PUSH
73203: LD_INT 4
73205: PLUS
73206: PUSH
73207: LD_INT 0
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: LIST
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: ST_TO_ADDR
// end ; 1 :
73222: GO 73922
73224: LD_INT 1
73226: DOUBLE
73227: EQUAL
73228: IFTRUE 73232
73230: GO 73365
73232: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73233: LD_ADDR_VAR 0 5
73237: PUSH
73238: LD_VAR 0 1
73242: PUSH
73243: LD_VAR 0 2
73247: PUSH
73248: LD_INT 4
73250: MINUS
73251: PUSH
73252: LD_INT 3
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: LIST
73259: PUSH
73260: LD_VAR 0 1
73264: PUSH
73265: LD_INT 3
73267: MINUS
73268: PUSH
73269: LD_VAR 0 2
73273: PUSH
73274: LD_INT 3
73276: MINUS
73277: PUSH
73278: LD_INT 2
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: LIST
73285: PUSH
73286: LD_VAR 0 1
73290: PUSH
73291: LD_INT 4
73293: MINUS
73294: PUSH
73295: LD_VAR 0 2
73299: PUSH
73300: LD_INT 1
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: LIST
73307: PUSH
73308: LD_VAR 0 1
73312: PUSH
73313: LD_VAR 0 2
73317: PUSH
73318: LD_INT 3
73320: PLUS
73321: PUSH
73322: LD_INT 0
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: LIST
73329: PUSH
73330: LD_VAR 0 1
73334: PUSH
73335: LD_INT 4
73337: PLUS
73338: PUSH
73339: LD_VAR 0 2
73343: PUSH
73344: LD_INT 4
73346: PLUS
73347: PUSH
73348: LD_INT 5
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: LIST
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: ST_TO_ADDR
// end ; 2 :
73363: GO 73922
73365: LD_INT 2
73367: DOUBLE
73368: EQUAL
73369: IFTRUE 73373
73371: GO 73502
73373: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73374: LD_ADDR_VAR 0 5
73378: PUSH
73379: LD_VAR 0 1
73383: PUSH
73384: LD_VAR 0 2
73388: PUSH
73389: LD_INT 3
73391: MINUS
73392: PUSH
73393: LD_INT 3
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: LIST
73400: PUSH
73401: LD_VAR 0 1
73405: PUSH
73406: LD_INT 4
73408: PLUS
73409: PUSH
73410: LD_VAR 0 2
73414: PUSH
73415: LD_INT 4
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: LIST
73422: PUSH
73423: LD_VAR 0 1
73427: PUSH
73428: LD_VAR 0 2
73432: PUSH
73433: LD_INT 4
73435: PLUS
73436: PUSH
73437: LD_INT 0
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: LIST
73444: PUSH
73445: LD_VAR 0 1
73449: PUSH
73450: LD_INT 3
73452: MINUS
73453: PUSH
73454: LD_VAR 0 2
73458: PUSH
73459: LD_INT 1
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: LIST
73466: PUSH
73467: LD_VAR 0 1
73471: PUSH
73472: LD_INT 4
73474: MINUS
73475: PUSH
73476: LD_VAR 0 2
73480: PUSH
73481: LD_INT 4
73483: MINUS
73484: PUSH
73485: LD_INT 2
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: LIST
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: ST_TO_ADDR
// end ; 3 :
73500: GO 73922
73502: LD_INT 3
73504: DOUBLE
73505: EQUAL
73506: IFTRUE 73510
73508: GO 73643
73510: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73511: LD_ADDR_VAR 0 5
73515: PUSH
73516: LD_VAR 0 1
73520: PUSH
73521: LD_INT 3
73523: PLUS
73524: PUSH
73525: LD_VAR 0 2
73529: PUSH
73530: LD_INT 4
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: LIST
73537: PUSH
73538: LD_VAR 0 1
73542: PUSH
73543: LD_INT 4
73545: PLUS
73546: PUSH
73547: LD_VAR 0 2
73551: PUSH
73552: LD_INT 4
73554: PLUS
73555: PUSH
73556: LD_INT 5
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: LIST
73563: PUSH
73564: LD_VAR 0 1
73568: PUSH
73569: LD_INT 4
73571: MINUS
73572: PUSH
73573: LD_VAR 0 2
73577: PUSH
73578: LD_INT 1
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: LIST
73585: PUSH
73586: LD_VAR 0 1
73590: PUSH
73591: LD_VAR 0 2
73595: PUSH
73596: LD_INT 4
73598: MINUS
73599: PUSH
73600: LD_INT 3
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: LIST
73607: PUSH
73608: LD_VAR 0 1
73612: PUSH
73613: LD_INT 3
73615: MINUS
73616: PUSH
73617: LD_VAR 0 2
73621: PUSH
73622: LD_INT 3
73624: MINUS
73625: PUSH
73626: LD_INT 2
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: LIST
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: ST_TO_ADDR
// end ; 4 :
73641: GO 73922
73643: LD_INT 4
73645: DOUBLE
73646: EQUAL
73647: IFTRUE 73651
73649: GO 73784
73651: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73652: LD_ADDR_VAR 0 5
73656: PUSH
73657: LD_VAR 0 1
73661: PUSH
73662: LD_VAR 0 2
73666: PUSH
73667: LD_INT 4
73669: PLUS
73670: PUSH
73671: LD_INT 0
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: LIST
73678: PUSH
73679: LD_VAR 0 1
73683: PUSH
73684: LD_INT 3
73686: PLUS
73687: PUSH
73688: LD_VAR 0 2
73692: PUSH
73693: LD_INT 3
73695: PLUS
73696: PUSH
73697: LD_INT 5
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: LIST
73704: PUSH
73705: LD_VAR 0 1
73709: PUSH
73710: LD_INT 4
73712: PLUS
73713: PUSH
73714: LD_VAR 0 2
73718: PUSH
73719: LD_INT 4
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: LIST
73726: PUSH
73727: LD_VAR 0 1
73731: PUSH
73732: LD_VAR 0 2
73736: PUSH
73737: LD_INT 3
73739: MINUS
73740: PUSH
73741: LD_INT 3
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: LIST
73748: PUSH
73749: LD_VAR 0 1
73753: PUSH
73754: LD_INT 4
73756: MINUS
73757: PUSH
73758: LD_VAR 0 2
73762: PUSH
73763: LD_INT 4
73765: MINUS
73766: PUSH
73767: LD_INT 2
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: LIST
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: ST_TO_ADDR
// end ; 5 :
73782: GO 73922
73784: LD_INT 5
73786: DOUBLE
73787: EQUAL
73788: IFTRUE 73792
73790: GO 73921
73792: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73793: LD_ADDR_VAR 0 5
73797: PUSH
73798: LD_VAR 0 1
73802: PUSH
73803: LD_INT 4
73805: MINUS
73806: PUSH
73807: LD_VAR 0 2
73811: PUSH
73812: LD_INT 1
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: LIST
73819: PUSH
73820: LD_VAR 0 1
73824: PUSH
73825: LD_VAR 0 2
73829: PUSH
73830: LD_INT 4
73832: MINUS
73833: PUSH
73834: LD_INT 3
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: LIST
73841: PUSH
73842: LD_VAR 0 1
73846: PUSH
73847: LD_INT 4
73849: PLUS
73850: PUSH
73851: LD_VAR 0 2
73855: PUSH
73856: LD_INT 4
73858: PLUS
73859: PUSH
73860: LD_INT 5
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: LIST
73867: PUSH
73868: LD_VAR 0 1
73872: PUSH
73873: LD_INT 3
73875: PLUS
73876: PUSH
73877: LD_VAR 0 2
73881: PUSH
73882: LD_INT 4
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: LIST
73889: PUSH
73890: LD_VAR 0 1
73894: PUSH
73895: LD_VAR 0 2
73899: PUSH
73900: LD_INT 3
73902: PLUS
73903: PUSH
73904: LD_INT 0
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: LIST
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: ST_TO_ADDR
// end ; end ;
73919: GO 73922
73921: POP
// result := list ;
73922: LD_ADDR_VAR 0 4
73926: PUSH
73927: LD_VAR 0 5
73931: ST_TO_ADDR
// end ;
73932: LD_VAR 0 4
73936: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73937: LD_INT 0
73939: PPUSH
73940: PPUSH
73941: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73942: LD_VAR 0 1
73946: NOT
73947: PUSH
73948: LD_VAR 0 2
73952: PUSH
73953: LD_INT 1
73955: PUSH
73956: LD_INT 2
73958: PUSH
73959: LD_INT 3
73961: PUSH
73962: LD_INT 4
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: IN
73971: NOT
73972: OR
73973: IFFALSE 73977
// exit ;
73975: GO 74069
// tmp := [ ] ;
73977: LD_ADDR_VAR 0 5
73981: PUSH
73982: EMPTY
73983: ST_TO_ADDR
// for i in units do
73984: LD_ADDR_VAR 0 4
73988: PUSH
73989: LD_VAR 0 1
73993: PUSH
73994: FOR_IN
73995: IFFALSE 74038
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73997: LD_ADDR_VAR 0 5
74001: PUSH
74002: LD_VAR 0 5
74006: PPUSH
74007: LD_VAR 0 5
74011: PUSH
74012: LD_INT 1
74014: PLUS
74015: PPUSH
74016: LD_VAR 0 4
74020: PPUSH
74021: LD_VAR 0 2
74025: PPUSH
74026: CALL_OW 259
74030: PPUSH
74031: CALL_OW 2
74035: ST_TO_ADDR
74036: GO 73994
74038: POP
74039: POP
// if not tmp then
74040: LD_VAR 0 5
74044: NOT
74045: IFFALSE 74049
// exit ;
74047: GO 74069
// result := SortListByListDesc ( units , tmp ) ;
74049: LD_ADDR_VAR 0 3
74053: PUSH
74054: LD_VAR 0 1
74058: PPUSH
74059: LD_VAR 0 5
74063: PPUSH
74064: CALL_OW 77
74068: ST_TO_ADDR
// end ;
74069: LD_VAR 0 3
74073: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74074: LD_INT 0
74076: PPUSH
74077: PPUSH
74078: PPUSH
// result := false ;
74079: LD_ADDR_VAR 0 3
74083: PUSH
74084: LD_INT 0
74086: ST_TO_ADDR
// x := GetX ( building ) ;
74087: LD_ADDR_VAR 0 4
74091: PUSH
74092: LD_VAR 0 2
74096: PPUSH
74097: CALL_OW 250
74101: ST_TO_ADDR
// y := GetY ( building ) ;
74102: LD_ADDR_VAR 0 5
74106: PUSH
74107: LD_VAR 0 2
74111: PPUSH
74112: CALL_OW 251
74116: ST_TO_ADDR
// if not building or not x or not y then
74117: LD_VAR 0 2
74121: NOT
74122: PUSH
74123: LD_VAR 0 4
74127: NOT
74128: OR
74129: PUSH
74130: LD_VAR 0 5
74134: NOT
74135: OR
74136: IFFALSE 74140
// exit ;
74138: GO 74232
// if GetTaskList ( unit ) then
74140: LD_VAR 0 1
74144: PPUSH
74145: CALL_OW 437
74149: IFFALSE 74232
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74151: LD_STRING e
74153: PUSH
74154: LD_VAR 0 1
74158: PPUSH
74159: CALL_OW 437
74163: PUSH
74164: LD_INT 1
74166: ARRAY
74167: PUSH
74168: LD_INT 1
74170: ARRAY
74171: EQUAL
74172: PUSH
74173: LD_VAR 0 4
74177: PUSH
74178: LD_VAR 0 1
74182: PPUSH
74183: CALL_OW 437
74187: PUSH
74188: LD_INT 1
74190: ARRAY
74191: PUSH
74192: LD_INT 2
74194: ARRAY
74195: EQUAL
74196: AND
74197: PUSH
74198: LD_VAR 0 5
74202: PUSH
74203: LD_VAR 0 1
74207: PPUSH
74208: CALL_OW 437
74212: PUSH
74213: LD_INT 1
74215: ARRAY
74216: PUSH
74217: LD_INT 3
74219: ARRAY
74220: EQUAL
74221: AND
74222: IFFALSE 74232
// result := true end ;
74224: LD_ADDR_VAR 0 3
74228: PUSH
74229: LD_INT 1
74231: ST_TO_ADDR
// end ;
74232: LD_VAR 0 3
74236: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74237: LD_INT 0
74239: PPUSH
// result := false ;
74240: LD_ADDR_VAR 0 4
74244: PUSH
74245: LD_INT 0
74247: ST_TO_ADDR
// if GetTaskList ( unit ) then
74248: LD_VAR 0 1
74252: PPUSH
74253: CALL_OW 437
74257: IFFALSE 74340
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74259: LD_STRING M
74261: PUSH
74262: LD_VAR 0 1
74266: PPUSH
74267: CALL_OW 437
74271: PUSH
74272: LD_INT 1
74274: ARRAY
74275: PUSH
74276: LD_INT 1
74278: ARRAY
74279: EQUAL
74280: PUSH
74281: LD_VAR 0 2
74285: PUSH
74286: LD_VAR 0 1
74290: PPUSH
74291: CALL_OW 437
74295: PUSH
74296: LD_INT 1
74298: ARRAY
74299: PUSH
74300: LD_INT 2
74302: ARRAY
74303: EQUAL
74304: AND
74305: PUSH
74306: LD_VAR 0 3
74310: PUSH
74311: LD_VAR 0 1
74315: PPUSH
74316: CALL_OW 437
74320: PUSH
74321: LD_INT 1
74323: ARRAY
74324: PUSH
74325: LD_INT 3
74327: ARRAY
74328: EQUAL
74329: AND
74330: IFFALSE 74340
// result := true ;
74332: LD_ADDR_VAR 0 4
74336: PUSH
74337: LD_INT 1
74339: ST_TO_ADDR
// end ; end ;
74340: LD_VAR 0 4
74344: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74345: LD_INT 0
74347: PPUSH
74348: PPUSH
74349: PPUSH
74350: PPUSH
// if not unit or not area then
74351: LD_VAR 0 1
74355: NOT
74356: PUSH
74357: LD_VAR 0 2
74361: NOT
74362: OR
74363: IFFALSE 74367
// exit ;
74365: GO 74531
// tmp := AreaToList ( area , i ) ;
74367: LD_ADDR_VAR 0 6
74371: PUSH
74372: LD_VAR 0 2
74376: PPUSH
74377: LD_VAR 0 5
74381: PPUSH
74382: CALL_OW 517
74386: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74387: LD_ADDR_VAR 0 5
74391: PUSH
74392: DOUBLE
74393: LD_INT 1
74395: DEC
74396: ST_TO_ADDR
74397: LD_VAR 0 6
74401: PUSH
74402: LD_INT 1
74404: ARRAY
74405: PUSH
74406: FOR_TO
74407: IFFALSE 74529
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74409: LD_ADDR_VAR 0 7
74413: PUSH
74414: LD_VAR 0 6
74418: PUSH
74419: LD_INT 1
74421: ARRAY
74422: PUSH
74423: LD_VAR 0 5
74427: ARRAY
74428: PUSH
74429: LD_VAR 0 6
74433: PUSH
74434: LD_INT 2
74436: ARRAY
74437: PUSH
74438: LD_VAR 0 5
74442: ARRAY
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74448: LD_VAR 0 7
74452: PUSH
74453: LD_INT 1
74455: ARRAY
74456: PPUSH
74457: LD_VAR 0 7
74461: PUSH
74462: LD_INT 2
74464: ARRAY
74465: PPUSH
74466: CALL_OW 428
74470: PUSH
74471: LD_INT 0
74473: EQUAL
74474: IFFALSE 74527
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74476: LD_VAR 0 1
74480: PPUSH
74481: LD_VAR 0 7
74485: PUSH
74486: LD_INT 1
74488: ARRAY
74489: PPUSH
74490: LD_VAR 0 7
74494: PUSH
74495: LD_INT 2
74497: ARRAY
74498: PPUSH
74499: LD_VAR 0 3
74503: PPUSH
74504: CALL_OW 48
// result := IsPlaced ( unit ) ;
74508: LD_ADDR_VAR 0 4
74512: PUSH
74513: LD_VAR 0 1
74517: PPUSH
74518: CALL_OW 305
74522: ST_TO_ADDR
// exit ;
74523: POP
74524: POP
74525: GO 74531
// end ; end ;
74527: GO 74406
74529: POP
74530: POP
// end ;
74531: LD_VAR 0 4
74535: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74536: LD_INT 0
74538: PPUSH
74539: PPUSH
74540: PPUSH
// if not side or side > 8 then
74541: LD_VAR 0 1
74545: NOT
74546: PUSH
74547: LD_VAR 0 1
74551: PUSH
74552: LD_INT 8
74554: GREATER
74555: OR
74556: IFFALSE 74560
// exit ;
74558: GO 74747
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74560: LD_ADDR_VAR 0 4
74564: PUSH
74565: LD_INT 22
74567: PUSH
74568: LD_VAR 0 1
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 21
74579: PUSH
74580: LD_INT 3
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PPUSH
74591: CALL_OW 69
74595: ST_TO_ADDR
// if not tmp then
74596: LD_VAR 0 4
74600: NOT
74601: IFFALSE 74605
// exit ;
74603: GO 74747
// enable_addtolog := true ;
74605: LD_ADDR_OWVAR 81
74609: PUSH
74610: LD_INT 1
74612: ST_TO_ADDR
// AddToLog ( [ ) ;
74613: LD_STRING [
74615: PPUSH
74616: CALL_OW 561
// for i in tmp do
74620: LD_ADDR_VAR 0 3
74624: PUSH
74625: LD_VAR 0 4
74629: PUSH
74630: FOR_IN
74631: IFFALSE 74738
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74633: LD_STRING [
74635: PUSH
74636: LD_VAR 0 3
74640: PPUSH
74641: CALL_OW 266
74645: STR
74646: PUSH
74647: LD_STRING , 
74649: STR
74650: PUSH
74651: LD_VAR 0 3
74655: PPUSH
74656: CALL_OW 250
74660: STR
74661: PUSH
74662: LD_STRING , 
74664: STR
74665: PUSH
74666: LD_VAR 0 3
74670: PPUSH
74671: CALL_OW 251
74675: STR
74676: PUSH
74677: LD_STRING , 
74679: STR
74680: PUSH
74681: LD_VAR 0 3
74685: PPUSH
74686: CALL_OW 254
74690: STR
74691: PUSH
74692: LD_STRING , 
74694: STR
74695: PUSH
74696: LD_VAR 0 3
74700: PPUSH
74701: LD_INT 1
74703: PPUSH
74704: CALL_OW 268
74708: STR
74709: PUSH
74710: LD_STRING , 
74712: STR
74713: PUSH
74714: LD_VAR 0 3
74718: PPUSH
74719: LD_INT 2
74721: PPUSH
74722: CALL_OW 268
74726: STR
74727: PUSH
74728: LD_STRING ],
74730: STR
74731: PPUSH
74732: CALL_OW 561
// end ;
74736: GO 74630
74738: POP
74739: POP
// AddToLog ( ]; ) ;
74740: LD_STRING ];
74742: PPUSH
74743: CALL_OW 561
// end ;
74747: LD_VAR 0 2
74751: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74752: LD_INT 0
74754: PPUSH
74755: PPUSH
74756: PPUSH
74757: PPUSH
74758: PPUSH
// if not area or not rate or not max then
74759: LD_VAR 0 1
74763: NOT
74764: PUSH
74765: LD_VAR 0 2
74769: NOT
74770: OR
74771: PUSH
74772: LD_VAR 0 4
74776: NOT
74777: OR
74778: IFFALSE 74782
// exit ;
74780: GO 74971
// while 1 do
74782: LD_INT 1
74784: IFFALSE 74971
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74786: LD_ADDR_VAR 0 9
74790: PUSH
74791: LD_VAR 0 1
74795: PPUSH
74796: LD_INT 1
74798: PPUSH
74799: CALL_OW 287
74803: PUSH
74804: LD_INT 10
74806: MUL
74807: ST_TO_ADDR
// r := rate / 10 ;
74808: LD_ADDR_VAR 0 7
74812: PUSH
74813: LD_VAR 0 2
74817: PUSH
74818: LD_INT 10
74820: DIVREAL
74821: ST_TO_ADDR
// time := 1 1$00 ;
74822: LD_ADDR_VAR 0 8
74826: PUSH
74827: LD_INT 2100
74829: ST_TO_ADDR
// if amount < min then
74830: LD_VAR 0 9
74834: PUSH
74835: LD_VAR 0 3
74839: LESS
74840: IFFALSE 74858
// r := r * 2 else
74842: LD_ADDR_VAR 0 7
74846: PUSH
74847: LD_VAR 0 7
74851: PUSH
74852: LD_INT 2
74854: MUL
74855: ST_TO_ADDR
74856: GO 74884
// if amount > max then
74858: LD_VAR 0 9
74862: PUSH
74863: LD_VAR 0 4
74867: GREATER
74868: IFFALSE 74884
// r := r / 2 ;
74870: LD_ADDR_VAR 0 7
74874: PUSH
74875: LD_VAR 0 7
74879: PUSH
74880: LD_INT 2
74882: DIVREAL
74883: ST_TO_ADDR
// time := time / r ;
74884: LD_ADDR_VAR 0 8
74888: PUSH
74889: LD_VAR 0 8
74893: PUSH
74894: LD_VAR 0 7
74898: DIVREAL
74899: ST_TO_ADDR
// if time < 0 then
74900: LD_VAR 0 8
74904: PUSH
74905: LD_INT 0
74907: LESS
74908: IFFALSE 74925
// time := time * - 1 ;
74910: LD_ADDR_VAR 0 8
74914: PUSH
74915: LD_VAR 0 8
74919: PUSH
74920: LD_INT 1
74922: NEG
74923: MUL
74924: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74925: LD_VAR 0 8
74929: PUSH
74930: LD_INT 35
74932: PPUSH
74933: LD_INT 875
74935: PPUSH
74936: CALL_OW 12
74940: PLUS
74941: PPUSH
74942: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74946: LD_INT 1
74948: PPUSH
74949: LD_INT 5
74951: PPUSH
74952: CALL_OW 12
74956: PPUSH
74957: LD_VAR 0 1
74961: PPUSH
74962: LD_INT 1
74964: PPUSH
74965: CALL_OW 55
// end ;
74969: GO 74782
// end ;
74971: LD_VAR 0 5
74975: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74976: LD_INT 0
74978: PPUSH
74979: PPUSH
74980: PPUSH
74981: PPUSH
74982: PPUSH
74983: PPUSH
74984: PPUSH
74985: PPUSH
// if not turrets or not factories then
74986: LD_VAR 0 1
74990: NOT
74991: PUSH
74992: LD_VAR 0 2
74996: NOT
74997: OR
74998: IFFALSE 75002
// exit ;
75000: GO 75309
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75002: LD_ADDR_VAR 0 10
75006: PUSH
75007: LD_INT 5
75009: PUSH
75010: LD_INT 6
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 2
75019: PUSH
75020: LD_INT 4
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: PUSH
75027: LD_INT 3
75029: PUSH
75030: LD_INT 5
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: LIST
75041: PUSH
75042: LD_INT 24
75044: PUSH
75045: LD_INT 25
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 23
75054: PUSH
75055: LD_INT 27
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: LD_INT 42
75068: PUSH
75069: LD_INT 43
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PUSH
75076: LD_INT 44
75078: PUSH
75079: LD_INT 46
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 45
75088: PUSH
75089: LD_INT 47
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: LIST
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: LIST
75105: ST_TO_ADDR
// result := [ ] ;
75106: LD_ADDR_VAR 0 3
75110: PUSH
75111: EMPTY
75112: ST_TO_ADDR
// for i in turrets do
75113: LD_ADDR_VAR 0 4
75117: PUSH
75118: LD_VAR 0 1
75122: PUSH
75123: FOR_IN
75124: IFFALSE 75307
// begin nat := GetNation ( i ) ;
75126: LD_ADDR_VAR 0 7
75130: PUSH
75131: LD_VAR 0 4
75135: PPUSH
75136: CALL_OW 248
75140: ST_TO_ADDR
// weapon := 0 ;
75141: LD_ADDR_VAR 0 8
75145: PUSH
75146: LD_INT 0
75148: ST_TO_ADDR
// if not nat then
75149: LD_VAR 0 7
75153: NOT
75154: IFFALSE 75158
// continue ;
75156: GO 75123
// for j in list [ nat ] do
75158: LD_ADDR_VAR 0 5
75162: PUSH
75163: LD_VAR 0 10
75167: PUSH
75168: LD_VAR 0 7
75172: ARRAY
75173: PUSH
75174: FOR_IN
75175: IFFALSE 75216
// if GetBWeapon ( i ) = j [ 1 ] then
75177: LD_VAR 0 4
75181: PPUSH
75182: CALL_OW 269
75186: PUSH
75187: LD_VAR 0 5
75191: PUSH
75192: LD_INT 1
75194: ARRAY
75195: EQUAL
75196: IFFALSE 75214
// begin weapon := j [ 2 ] ;
75198: LD_ADDR_VAR 0 8
75202: PUSH
75203: LD_VAR 0 5
75207: PUSH
75208: LD_INT 2
75210: ARRAY
75211: ST_TO_ADDR
// break ;
75212: GO 75216
// end ;
75214: GO 75174
75216: POP
75217: POP
// if not weapon then
75218: LD_VAR 0 8
75222: NOT
75223: IFFALSE 75227
// continue ;
75225: GO 75123
// for k in factories do
75227: LD_ADDR_VAR 0 6
75231: PUSH
75232: LD_VAR 0 2
75236: PUSH
75237: FOR_IN
75238: IFFALSE 75303
// begin weapons := AvailableWeaponList ( k ) ;
75240: LD_ADDR_VAR 0 9
75244: PUSH
75245: LD_VAR 0 6
75249: PPUSH
75250: CALL_OW 478
75254: ST_TO_ADDR
// if not weapons then
75255: LD_VAR 0 9
75259: NOT
75260: IFFALSE 75264
// continue ;
75262: GO 75237
// if weapon in weapons then
75264: LD_VAR 0 8
75268: PUSH
75269: LD_VAR 0 9
75273: IN
75274: IFFALSE 75301
// begin result := [ i , weapon ] ;
75276: LD_ADDR_VAR 0 3
75280: PUSH
75281: LD_VAR 0 4
75285: PUSH
75286: LD_VAR 0 8
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: ST_TO_ADDR
// exit ;
75295: POP
75296: POP
75297: POP
75298: POP
75299: GO 75309
// end ; end ;
75301: GO 75237
75303: POP
75304: POP
// end ;
75305: GO 75123
75307: POP
75308: POP
// end ;
75309: LD_VAR 0 3
75313: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75314: LD_INT 0
75316: PPUSH
// if not side or side > 8 then
75317: LD_VAR 0 3
75321: NOT
75322: PUSH
75323: LD_VAR 0 3
75327: PUSH
75328: LD_INT 8
75330: GREATER
75331: OR
75332: IFFALSE 75336
// exit ;
75334: GO 75395
// if not range then
75336: LD_VAR 0 4
75340: NOT
75341: IFFALSE 75352
// range := - 12 ;
75343: LD_ADDR_VAR 0 4
75347: PUSH
75348: LD_INT 12
75350: NEG
75351: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75352: LD_VAR 0 1
75356: PPUSH
75357: LD_VAR 0 2
75361: PPUSH
75362: LD_VAR 0 3
75366: PPUSH
75367: LD_VAR 0 4
75371: PPUSH
75372: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75376: LD_VAR 0 1
75380: PPUSH
75381: LD_VAR 0 2
75385: PPUSH
75386: LD_VAR 0 3
75390: PPUSH
75391: CALL_OW 331
// end ;
75395: LD_VAR 0 5
75399: RET
// export function Video ( mode ) ; begin
75400: LD_INT 0
75402: PPUSH
// ingame_video = mode ;
75403: LD_ADDR_OWVAR 52
75407: PUSH
75408: LD_VAR 0 1
75412: ST_TO_ADDR
// interface_hidden = mode ;
75413: LD_ADDR_OWVAR 54
75417: PUSH
75418: LD_VAR 0 1
75422: ST_TO_ADDR
// end ;
75423: LD_VAR 0 2
75427: RET
// export function Join ( array , element ) ; begin
75428: LD_INT 0
75430: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75431: LD_ADDR_VAR 0 3
75435: PUSH
75436: LD_VAR 0 1
75440: PPUSH
75441: LD_VAR 0 1
75445: PUSH
75446: LD_INT 1
75448: PLUS
75449: PPUSH
75450: LD_VAR 0 2
75454: PPUSH
75455: CALL_OW 1
75459: ST_TO_ADDR
// end ;
75460: LD_VAR 0 3
75464: RET
// export function JoinUnion ( array , element ) ; begin
75465: LD_INT 0
75467: PPUSH
// result := array union element ;
75468: LD_ADDR_VAR 0 3
75472: PUSH
75473: LD_VAR 0 1
75477: PUSH
75478: LD_VAR 0 2
75482: UNION
75483: ST_TO_ADDR
// end ;
75484: LD_VAR 0 3
75488: RET
// export function GetBehemoths ( side ) ; begin
75489: LD_INT 0
75491: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75492: LD_ADDR_VAR 0 2
75496: PUSH
75497: LD_INT 22
75499: PUSH
75500: LD_VAR 0 1
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PUSH
75509: LD_INT 31
75511: PUSH
75512: LD_INT 25
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PPUSH
75523: CALL_OW 69
75527: ST_TO_ADDR
// end ;
75528: LD_VAR 0 2
75532: RET
// export function Shuffle ( array ) ; var i , index ; begin
75533: LD_INT 0
75535: PPUSH
75536: PPUSH
75537: PPUSH
// result := [ ] ;
75538: LD_ADDR_VAR 0 2
75542: PUSH
75543: EMPTY
75544: ST_TO_ADDR
// if not array then
75545: LD_VAR 0 1
75549: NOT
75550: IFFALSE 75554
// exit ;
75552: GO 75653
// Randomize ;
75554: CALL_OW 10
// for i = array downto 1 do
75558: LD_ADDR_VAR 0 3
75562: PUSH
75563: DOUBLE
75564: LD_VAR 0 1
75568: INC
75569: ST_TO_ADDR
75570: LD_INT 1
75572: PUSH
75573: FOR_DOWNTO
75574: IFFALSE 75651
// begin index := rand ( 1 , array ) ;
75576: LD_ADDR_VAR 0 4
75580: PUSH
75581: LD_INT 1
75583: PPUSH
75584: LD_VAR 0 1
75588: PPUSH
75589: CALL_OW 12
75593: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75594: LD_ADDR_VAR 0 2
75598: PUSH
75599: LD_VAR 0 2
75603: PPUSH
75604: LD_VAR 0 2
75608: PUSH
75609: LD_INT 1
75611: PLUS
75612: PPUSH
75613: LD_VAR 0 1
75617: PUSH
75618: LD_VAR 0 4
75622: ARRAY
75623: PPUSH
75624: CALL_OW 2
75628: ST_TO_ADDR
// array := Delete ( array , index ) ;
75629: LD_ADDR_VAR 0 1
75633: PUSH
75634: LD_VAR 0 1
75638: PPUSH
75639: LD_VAR 0 4
75643: PPUSH
75644: CALL_OW 3
75648: ST_TO_ADDR
// end ;
75649: GO 75573
75651: POP
75652: POP
// end ;
75653: LD_VAR 0 2
75657: RET
// export function GetBaseMaterials ( base ) ; begin
75658: LD_INT 0
75660: PPUSH
// result := [ 0 , 0 , 0 ] ;
75661: LD_ADDR_VAR 0 2
75665: PUSH
75666: LD_INT 0
75668: PUSH
75669: LD_INT 0
75671: PUSH
75672: LD_INT 0
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: LIST
75679: ST_TO_ADDR
// if not base then
75680: LD_VAR 0 1
75684: NOT
75685: IFFALSE 75689
// exit ;
75687: GO 75738
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75689: LD_ADDR_VAR 0 2
75693: PUSH
75694: LD_VAR 0 1
75698: PPUSH
75699: LD_INT 1
75701: PPUSH
75702: CALL_OW 275
75706: PUSH
75707: LD_VAR 0 1
75711: PPUSH
75712: LD_INT 2
75714: PPUSH
75715: CALL_OW 275
75719: PUSH
75720: LD_VAR 0 1
75724: PPUSH
75725: LD_INT 3
75727: PPUSH
75728: CALL_OW 275
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: LIST
75737: ST_TO_ADDR
// end ;
75738: LD_VAR 0 2
75742: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75743: LD_INT 0
75745: PPUSH
75746: PPUSH
// result := array ;
75747: LD_ADDR_VAR 0 3
75751: PUSH
75752: LD_VAR 0 1
75756: ST_TO_ADDR
// if size > 0 then
75757: LD_VAR 0 2
75761: PUSH
75762: LD_INT 0
75764: GREATER
75765: IFFALSE 75811
// for i := array downto size do
75767: LD_ADDR_VAR 0 4
75771: PUSH
75772: DOUBLE
75773: LD_VAR 0 1
75777: INC
75778: ST_TO_ADDR
75779: LD_VAR 0 2
75783: PUSH
75784: FOR_DOWNTO
75785: IFFALSE 75809
// result := Delete ( result , result ) ;
75787: LD_ADDR_VAR 0 3
75791: PUSH
75792: LD_VAR 0 3
75796: PPUSH
75797: LD_VAR 0 3
75801: PPUSH
75802: CALL_OW 3
75806: ST_TO_ADDR
75807: GO 75784
75809: POP
75810: POP
// end ;
75811: LD_VAR 0 3
75815: RET
// export function ComExit ( unit ) ; var tmp ; begin
75816: LD_INT 0
75818: PPUSH
75819: PPUSH
// if not IsInUnit ( unit ) then
75820: LD_VAR 0 1
75824: PPUSH
75825: CALL_OW 310
75829: NOT
75830: IFFALSE 75834
// exit ;
75832: GO 75894
// tmp := IsInUnit ( unit ) ;
75834: LD_ADDR_VAR 0 3
75838: PUSH
75839: LD_VAR 0 1
75843: PPUSH
75844: CALL_OW 310
75848: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75849: LD_VAR 0 3
75853: PPUSH
75854: CALL_OW 247
75858: PUSH
75859: LD_INT 2
75861: EQUAL
75862: IFFALSE 75875
// ComExitVehicle ( unit ) else
75864: LD_VAR 0 1
75868: PPUSH
75869: CALL_OW 121
75873: GO 75884
// ComExitBuilding ( unit ) ;
75875: LD_VAR 0 1
75879: PPUSH
75880: CALL_OW 122
// result := tmp ;
75884: LD_ADDR_VAR 0 2
75888: PUSH
75889: LD_VAR 0 3
75893: ST_TO_ADDR
// end ;
75894: LD_VAR 0 2
75898: RET
// export function ComExitAll ( units ) ; var i ; begin
75899: LD_INT 0
75901: PPUSH
75902: PPUSH
// if not units then
75903: LD_VAR 0 1
75907: NOT
75908: IFFALSE 75912
// exit ;
75910: GO 75938
// for i in units do
75912: LD_ADDR_VAR 0 3
75916: PUSH
75917: LD_VAR 0 1
75921: PUSH
75922: FOR_IN
75923: IFFALSE 75936
// ComExit ( i ) ;
75925: LD_VAR 0 3
75929: PPUSH
75930: CALL 75816 0 1
75934: GO 75922
75936: POP
75937: POP
// end ;
75938: LD_VAR 0 2
75942: RET
// export function ResetHc ; begin
75943: LD_INT 0
75945: PPUSH
// InitHc ;
75946: CALL_OW 19
// hc_importance := 0 ;
75950: LD_ADDR_OWVAR 32
75954: PUSH
75955: LD_INT 0
75957: ST_TO_ADDR
// end ;
75958: LD_VAR 0 1
75962: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75963: LD_INT 0
75965: PPUSH
75966: PPUSH
75967: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75968: LD_ADDR_VAR 0 6
75972: PUSH
75973: LD_VAR 0 1
75977: PUSH
75978: LD_VAR 0 3
75982: PLUS
75983: PUSH
75984: LD_INT 2
75986: DIV
75987: ST_TO_ADDR
// if _x < 0 then
75988: LD_VAR 0 6
75992: PUSH
75993: LD_INT 0
75995: LESS
75996: IFFALSE 76013
// _x := _x * - 1 ;
75998: LD_ADDR_VAR 0 6
76002: PUSH
76003: LD_VAR 0 6
76007: PUSH
76008: LD_INT 1
76010: NEG
76011: MUL
76012: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76013: LD_ADDR_VAR 0 7
76017: PUSH
76018: LD_VAR 0 2
76022: PUSH
76023: LD_VAR 0 4
76027: PLUS
76028: PUSH
76029: LD_INT 2
76031: DIV
76032: ST_TO_ADDR
// if _y < 0 then
76033: LD_VAR 0 7
76037: PUSH
76038: LD_INT 0
76040: LESS
76041: IFFALSE 76058
// _y := _y * - 1 ;
76043: LD_ADDR_VAR 0 7
76047: PUSH
76048: LD_VAR 0 7
76052: PUSH
76053: LD_INT 1
76055: NEG
76056: MUL
76057: ST_TO_ADDR
// result := [ _x , _y ] ;
76058: LD_ADDR_VAR 0 5
76062: PUSH
76063: LD_VAR 0 6
76067: PUSH
76068: LD_VAR 0 7
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: ST_TO_ADDR
// end ;
76077: LD_VAR 0 5
76081: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76082: LD_INT 0
76084: PPUSH
76085: PPUSH
76086: PPUSH
76087: PPUSH
// task := GetTaskList ( unit ) ;
76088: LD_ADDR_VAR 0 7
76092: PUSH
76093: LD_VAR 0 1
76097: PPUSH
76098: CALL_OW 437
76102: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76103: LD_VAR 0 7
76107: NOT
76108: PUSH
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_VAR 0 2
76118: PPUSH
76119: CALL_OW 308
76123: NOT
76124: AND
76125: IFFALSE 76129
// exit ;
76127: GO 76247
// if IsInArea ( unit , area ) then
76129: LD_VAR 0 1
76133: PPUSH
76134: LD_VAR 0 2
76138: PPUSH
76139: CALL_OW 308
76143: IFFALSE 76161
// begin ComMoveToArea ( unit , goAway ) ;
76145: LD_VAR 0 1
76149: PPUSH
76150: LD_VAR 0 3
76154: PPUSH
76155: CALL_OW 113
// exit ;
76159: GO 76247
// end ; if task [ 1 ] [ 1 ] <> M then
76161: LD_VAR 0 7
76165: PUSH
76166: LD_INT 1
76168: ARRAY
76169: PUSH
76170: LD_INT 1
76172: ARRAY
76173: PUSH
76174: LD_STRING M
76176: NONEQUAL
76177: IFFALSE 76181
// exit ;
76179: GO 76247
// x := task [ 1 ] [ 2 ] ;
76181: LD_ADDR_VAR 0 5
76185: PUSH
76186: LD_VAR 0 7
76190: PUSH
76191: LD_INT 1
76193: ARRAY
76194: PUSH
76195: LD_INT 2
76197: ARRAY
76198: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76199: LD_ADDR_VAR 0 6
76203: PUSH
76204: LD_VAR 0 7
76208: PUSH
76209: LD_INT 1
76211: ARRAY
76212: PUSH
76213: LD_INT 3
76215: ARRAY
76216: ST_TO_ADDR
// if InArea ( x , y , area ) then
76217: LD_VAR 0 5
76221: PPUSH
76222: LD_VAR 0 6
76226: PPUSH
76227: LD_VAR 0 2
76231: PPUSH
76232: CALL_OW 309
76236: IFFALSE 76247
// ComStop ( unit ) ;
76238: LD_VAR 0 1
76242: PPUSH
76243: CALL_OW 141
// end ;
76247: LD_VAR 0 4
76251: RET
// export function Abs ( value ) ; begin
76252: LD_INT 0
76254: PPUSH
// result := value ;
76255: LD_ADDR_VAR 0 2
76259: PUSH
76260: LD_VAR 0 1
76264: ST_TO_ADDR
// if value < 0 then
76265: LD_VAR 0 1
76269: PUSH
76270: LD_INT 0
76272: LESS
76273: IFFALSE 76290
// result := value * - 1 ;
76275: LD_ADDR_VAR 0 2
76279: PUSH
76280: LD_VAR 0 1
76284: PUSH
76285: LD_INT 1
76287: NEG
76288: MUL
76289: ST_TO_ADDR
// end ;
76290: LD_VAR 0 2
76294: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76295: LD_INT 0
76297: PPUSH
76298: PPUSH
76299: PPUSH
76300: PPUSH
76301: PPUSH
76302: PPUSH
76303: PPUSH
76304: PPUSH
// if not unit or not building then
76305: LD_VAR 0 1
76309: NOT
76310: PUSH
76311: LD_VAR 0 2
76315: NOT
76316: OR
76317: IFFALSE 76321
// exit ;
76319: GO 76547
// x := GetX ( building ) ;
76321: LD_ADDR_VAR 0 4
76325: PUSH
76326: LD_VAR 0 2
76330: PPUSH
76331: CALL_OW 250
76335: ST_TO_ADDR
// y := GetY ( building ) ;
76336: LD_ADDR_VAR 0 6
76340: PUSH
76341: LD_VAR 0 2
76345: PPUSH
76346: CALL_OW 251
76350: ST_TO_ADDR
// d := GetDir ( building ) ;
76351: LD_ADDR_VAR 0 8
76355: PUSH
76356: LD_VAR 0 2
76360: PPUSH
76361: CALL_OW 254
76365: ST_TO_ADDR
// r := 4 ;
76366: LD_ADDR_VAR 0 9
76370: PUSH
76371: LD_INT 4
76373: ST_TO_ADDR
// for i := 1 to 5 do
76374: LD_ADDR_VAR 0 10
76378: PUSH
76379: DOUBLE
76380: LD_INT 1
76382: DEC
76383: ST_TO_ADDR
76384: LD_INT 5
76386: PUSH
76387: FOR_TO
76388: IFFALSE 76545
// begin _x := ShiftX ( x , d , r + i ) ;
76390: LD_ADDR_VAR 0 5
76394: PUSH
76395: LD_VAR 0 4
76399: PPUSH
76400: LD_VAR 0 8
76404: PPUSH
76405: LD_VAR 0 9
76409: PUSH
76410: LD_VAR 0 10
76414: PLUS
76415: PPUSH
76416: CALL_OW 272
76420: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76421: LD_ADDR_VAR 0 7
76425: PUSH
76426: LD_VAR 0 6
76430: PPUSH
76431: LD_VAR 0 8
76435: PPUSH
76436: LD_VAR 0 9
76440: PUSH
76441: LD_VAR 0 10
76445: PLUS
76446: PPUSH
76447: CALL_OW 273
76451: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76452: LD_VAR 0 5
76456: PPUSH
76457: LD_VAR 0 7
76461: PPUSH
76462: CALL_OW 488
76466: PUSH
76467: LD_VAR 0 5
76471: PPUSH
76472: LD_VAR 0 7
76476: PPUSH
76477: CALL_OW 428
76481: PPUSH
76482: CALL_OW 247
76486: PUSH
76487: LD_INT 3
76489: PUSH
76490: LD_INT 2
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: IN
76497: NOT
76498: AND
76499: IFFALSE 76543
// begin ComMoveXY ( unit , _x , _y ) ;
76501: LD_VAR 0 1
76505: PPUSH
76506: LD_VAR 0 5
76510: PPUSH
76511: LD_VAR 0 7
76515: PPUSH
76516: CALL_OW 111
// result := [ _x , _y ] ;
76520: LD_ADDR_VAR 0 3
76524: PUSH
76525: LD_VAR 0 5
76529: PUSH
76530: LD_VAR 0 7
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: ST_TO_ADDR
// exit ;
76539: POP
76540: POP
76541: GO 76547
// end ; end ;
76543: GO 76387
76545: POP
76546: POP
// end ;
76547: LD_VAR 0 3
76551: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76552: LD_INT 0
76554: PPUSH
76555: PPUSH
76556: PPUSH
// result := 0 ;
76557: LD_ADDR_VAR 0 3
76561: PUSH
76562: LD_INT 0
76564: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76565: LD_VAR 0 1
76569: PUSH
76570: LD_INT 0
76572: LESS
76573: PUSH
76574: LD_VAR 0 1
76578: PUSH
76579: LD_INT 8
76581: GREATER
76582: OR
76583: PUSH
76584: LD_VAR 0 2
76588: PUSH
76589: LD_INT 0
76591: LESS
76592: OR
76593: PUSH
76594: LD_VAR 0 2
76598: PUSH
76599: LD_INT 8
76601: GREATER
76602: OR
76603: IFFALSE 76607
// exit ;
76605: GO 76682
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76607: LD_ADDR_VAR 0 4
76611: PUSH
76612: LD_INT 22
76614: PUSH
76615: LD_VAR 0 2
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PPUSH
76624: CALL_OW 69
76628: PUSH
76629: FOR_IN
76630: IFFALSE 76680
// begin un := UnitShoot ( i ) ;
76632: LD_ADDR_VAR 0 5
76636: PUSH
76637: LD_VAR 0 4
76641: PPUSH
76642: CALL_OW 504
76646: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76647: LD_VAR 0 5
76651: PPUSH
76652: CALL_OW 255
76656: PUSH
76657: LD_VAR 0 1
76661: EQUAL
76662: IFFALSE 76678
// begin result := un ;
76664: LD_ADDR_VAR 0 3
76668: PUSH
76669: LD_VAR 0 5
76673: ST_TO_ADDR
// exit ;
76674: POP
76675: POP
76676: GO 76682
// end ; end ;
76678: GO 76629
76680: POP
76681: POP
// end ;
76682: LD_VAR 0 3
76686: RET
// export function GetCargoBay ( units ) ; begin
76687: LD_INT 0
76689: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76690: LD_ADDR_VAR 0 2
76694: PUSH
76695: LD_VAR 0 1
76699: PPUSH
76700: LD_INT 2
76702: PUSH
76703: LD_INT 34
76705: PUSH
76706: LD_INT 12
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: PUSH
76713: LD_INT 34
76715: PUSH
76716: LD_INT 51
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: PUSH
76723: LD_INT 34
76725: PUSH
76726: LD_INT 32
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: PUSH
76733: LD_INT 34
76735: PUSH
76736: LD_EXP 49
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: PPUSH
76752: CALL_OW 72
76756: ST_TO_ADDR
// end ;
76757: LD_VAR 0 2
76761: RET
// export function Negate ( value ) ; begin
76762: LD_INT 0
76764: PPUSH
// result := not value ;
76765: LD_ADDR_VAR 0 2
76769: PUSH
76770: LD_VAR 0 1
76774: NOT
76775: ST_TO_ADDR
// end ;
76776: LD_VAR 0 2
76780: RET
// export function Inc ( value ) ; begin
76781: LD_INT 0
76783: PPUSH
// result := value + 1 ;
76784: LD_ADDR_VAR 0 2
76788: PUSH
76789: LD_VAR 0 1
76793: PUSH
76794: LD_INT 1
76796: PLUS
76797: ST_TO_ADDR
// end ;
76798: LD_VAR 0 2
76802: RET
// export function Dec ( value ) ; begin
76803: LD_INT 0
76805: PPUSH
// result := value - 1 ;
76806: LD_ADDR_VAR 0 2
76810: PUSH
76811: LD_VAR 0 1
76815: PUSH
76816: LD_INT 1
76818: MINUS
76819: ST_TO_ADDR
// end ;
76820: LD_VAR 0 2
76824: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76825: LD_INT 0
76827: PPUSH
76828: PPUSH
76829: PPUSH
76830: PPUSH
76831: PPUSH
76832: PPUSH
76833: PPUSH
76834: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76835: LD_VAR 0 1
76839: PPUSH
76840: LD_VAR 0 2
76844: PPUSH
76845: CALL_OW 488
76849: NOT
76850: PUSH
76851: LD_VAR 0 3
76855: PPUSH
76856: LD_VAR 0 4
76860: PPUSH
76861: CALL_OW 488
76865: NOT
76866: OR
76867: IFFALSE 76880
// begin result := - 1 ;
76869: LD_ADDR_VAR 0 5
76873: PUSH
76874: LD_INT 1
76876: NEG
76877: ST_TO_ADDR
// exit ;
76878: GO 77115
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76880: LD_ADDR_VAR 0 12
76884: PUSH
76885: LD_VAR 0 1
76889: PPUSH
76890: LD_VAR 0 2
76894: PPUSH
76895: LD_VAR 0 3
76899: PPUSH
76900: LD_VAR 0 4
76904: PPUSH
76905: CALL 75963 0 4
76909: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76910: LD_ADDR_VAR 0 11
76914: PUSH
76915: LD_VAR 0 1
76919: PPUSH
76920: LD_VAR 0 2
76924: PPUSH
76925: LD_VAR 0 12
76929: PUSH
76930: LD_INT 1
76932: ARRAY
76933: PPUSH
76934: LD_VAR 0 12
76938: PUSH
76939: LD_INT 2
76941: ARRAY
76942: PPUSH
76943: CALL_OW 298
76947: ST_TO_ADDR
// distance := 9999 ;
76948: LD_ADDR_VAR 0 10
76952: PUSH
76953: LD_INT 9999
76955: ST_TO_ADDR
// for i := 0 to 5 do
76956: LD_ADDR_VAR 0 6
76960: PUSH
76961: DOUBLE
76962: LD_INT 0
76964: DEC
76965: ST_TO_ADDR
76966: LD_INT 5
76968: PUSH
76969: FOR_TO
76970: IFFALSE 77113
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76972: LD_ADDR_VAR 0 7
76976: PUSH
76977: LD_VAR 0 1
76981: PPUSH
76982: LD_VAR 0 6
76986: PPUSH
76987: LD_VAR 0 11
76991: PPUSH
76992: CALL_OW 272
76996: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76997: LD_ADDR_VAR 0 8
77001: PUSH
77002: LD_VAR 0 2
77006: PPUSH
77007: LD_VAR 0 6
77011: PPUSH
77012: LD_VAR 0 11
77016: PPUSH
77017: CALL_OW 273
77021: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77022: LD_VAR 0 7
77026: PPUSH
77027: LD_VAR 0 8
77031: PPUSH
77032: CALL_OW 488
77036: NOT
77037: IFFALSE 77041
// continue ;
77039: GO 76969
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77041: LD_ADDR_VAR 0 9
77045: PUSH
77046: LD_VAR 0 12
77050: PUSH
77051: LD_INT 1
77053: ARRAY
77054: PPUSH
77055: LD_VAR 0 12
77059: PUSH
77060: LD_INT 2
77062: ARRAY
77063: PPUSH
77064: LD_VAR 0 7
77068: PPUSH
77069: LD_VAR 0 8
77073: PPUSH
77074: CALL_OW 298
77078: ST_TO_ADDR
// if tmp < distance then
77079: LD_VAR 0 9
77083: PUSH
77084: LD_VAR 0 10
77088: LESS
77089: IFFALSE 77111
// begin result := i ;
77091: LD_ADDR_VAR 0 5
77095: PUSH
77096: LD_VAR 0 6
77100: ST_TO_ADDR
// distance := tmp ;
77101: LD_ADDR_VAR 0 10
77105: PUSH
77106: LD_VAR 0 9
77110: ST_TO_ADDR
// end ; end ;
77111: GO 76969
77113: POP
77114: POP
// end ;
77115: LD_VAR 0 5
77119: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77120: LD_INT 0
77122: PPUSH
77123: PPUSH
// if not driver or not IsInUnit ( driver ) then
77124: LD_VAR 0 1
77128: NOT
77129: PUSH
77130: LD_VAR 0 1
77134: PPUSH
77135: CALL_OW 310
77139: NOT
77140: OR
77141: IFFALSE 77145
// exit ;
77143: GO 77235
// vehicle := IsInUnit ( driver ) ;
77145: LD_ADDR_VAR 0 3
77149: PUSH
77150: LD_VAR 0 1
77154: PPUSH
77155: CALL_OW 310
77159: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77160: LD_VAR 0 1
77164: PPUSH
77165: LD_STRING \
77167: PUSH
77168: LD_INT 0
77170: PUSH
77171: LD_INT 0
77173: PUSH
77174: LD_INT 0
77176: PUSH
77177: LD_INT 0
77179: PUSH
77180: LD_INT 0
77182: PUSH
77183: LD_INT 0
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: PUSH
77195: LD_STRING E
77197: PUSH
77198: LD_INT 0
77200: PUSH
77201: LD_INT 0
77203: PUSH
77204: LD_VAR 0 3
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: LD_INT 0
77214: PUSH
77215: LD_INT 0
77217: PUSH
77218: EMPTY
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: PUSH
77227: EMPTY
77228: LIST
77229: LIST
77230: PPUSH
77231: CALL_OW 446
// end ;
77235: LD_VAR 0 2
77239: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77240: LD_INT 0
77242: PPUSH
77243: PPUSH
// if not driver or not IsInUnit ( driver ) then
77244: LD_VAR 0 1
77248: NOT
77249: PUSH
77250: LD_VAR 0 1
77254: PPUSH
77255: CALL_OW 310
77259: NOT
77260: OR
77261: IFFALSE 77265
// exit ;
77263: GO 77355
// vehicle := IsInUnit ( driver ) ;
77265: LD_ADDR_VAR 0 3
77269: PUSH
77270: LD_VAR 0 1
77274: PPUSH
77275: CALL_OW 310
77279: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77280: LD_VAR 0 1
77284: PPUSH
77285: LD_STRING \
77287: PUSH
77288: LD_INT 0
77290: PUSH
77291: LD_INT 0
77293: PUSH
77294: LD_INT 0
77296: PUSH
77297: LD_INT 0
77299: PUSH
77300: LD_INT 0
77302: PUSH
77303: LD_INT 0
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: PUSH
77315: LD_STRING E
77317: PUSH
77318: LD_INT 0
77320: PUSH
77321: LD_INT 0
77323: PUSH
77324: LD_VAR 0 3
77328: PUSH
77329: LD_INT 0
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: LD_INT 0
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PPUSH
77351: CALL_OW 447
// end ;
77355: LD_VAR 0 2
77359: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77360: LD_INT 0
77362: PPUSH
77363: PPUSH
77364: PPUSH
// tmp := [ ] ;
77365: LD_ADDR_VAR 0 5
77369: PUSH
77370: EMPTY
77371: ST_TO_ADDR
// for i in units do
77372: LD_ADDR_VAR 0 4
77376: PUSH
77377: LD_VAR 0 1
77381: PUSH
77382: FOR_IN
77383: IFFALSE 77421
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77385: LD_ADDR_VAR 0 5
77389: PUSH
77390: LD_VAR 0 5
77394: PPUSH
77395: LD_VAR 0 5
77399: PUSH
77400: LD_INT 1
77402: PLUS
77403: PPUSH
77404: LD_VAR 0 4
77408: PPUSH
77409: CALL_OW 256
77413: PPUSH
77414: CALL_OW 2
77418: ST_TO_ADDR
77419: GO 77382
77421: POP
77422: POP
// if not tmp then
77423: LD_VAR 0 5
77427: NOT
77428: IFFALSE 77432
// exit ;
77430: GO 77480
// if asc then
77432: LD_VAR 0 2
77436: IFFALSE 77460
// result := SortListByListAsc ( units , tmp ) else
77438: LD_ADDR_VAR 0 3
77442: PUSH
77443: LD_VAR 0 1
77447: PPUSH
77448: LD_VAR 0 5
77452: PPUSH
77453: CALL_OW 76
77457: ST_TO_ADDR
77458: GO 77480
// result := SortListByListDesc ( units , tmp ) ;
77460: LD_ADDR_VAR 0 3
77464: PUSH
77465: LD_VAR 0 1
77469: PPUSH
77470: LD_VAR 0 5
77474: PPUSH
77475: CALL_OW 77
77479: ST_TO_ADDR
// end ;
77480: LD_VAR 0 3
77484: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77485: LD_INT 0
77487: PPUSH
77488: PPUSH
// task := GetTaskList ( mech ) ;
77489: LD_ADDR_VAR 0 4
77493: PUSH
77494: LD_VAR 0 1
77498: PPUSH
77499: CALL_OW 437
77503: ST_TO_ADDR
// if not task then
77504: LD_VAR 0 4
77508: NOT
77509: IFFALSE 77513
// exit ;
77511: GO 77555
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77513: LD_ADDR_VAR 0 3
77517: PUSH
77518: LD_VAR 0 4
77522: PUSH
77523: LD_INT 1
77525: ARRAY
77526: PUSH
77527: LD_INT 1
77529: ARRAY
77530: PUSH
77531: LD_STRING r
77533: EQUAL
77534: PUSH
77535: LD_VAR 0 4
77539: PUSH
77540: LD_INT 1
77542: ARRAY
77543: PUSH
77544: LD_INT 4
77546: ARRAY
77547: PUSH
77548: LD_VAR 0 2
77552: EQUAL
77553: AND
77554: ST_TO_ADDR
// end ;
77555: LD_VAR 0 3
77559: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77560: LD_INT 0
77562: PPUSH
// SetDir ( unit , d ) ;
77563: LD_VAR 0 1
77567: PPUSH
77568: LD_VAR 0 4
77572: PPUSH
77573: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77577: LD_VAR 0 1
77581: PPUSH
77582: LD_VAR 0 2
77586: PPUSH
77587: LD_VAR 0 3
77591: PPUSH
77592: LD_VAR 0 5
77596: PPUSH
77597: CALL_OW 48
// end ;
77601: LD_VAR 0 6
77605: RET
// export function ToNaturalNumber ( number ) ; begin
77606: LD_INT 0
77608: PPUSH
// result := number div 1 ;
77609: LD_ADDR_VAR 0 2
77613: PUSH
77614: LD_VAR 0 1
77618: PUSH
77619: LD_INT 1
77621: DIV
77622: ST_TO_ADDR
// if number < 0 then
77623: LD_VAR 0 1
77627: PUSH
77628: LD_INT 0
77630: LESS
77631: IFFALSE 77641
// result := 0 ;
77633: LD_ADDR_VAR 0 2
77637: PUSH
77638: LD_INT 0
77640: ST_TO_ADDR
// end ;
77641: LD_VAR 0 2
77645: RET
// export function SortByClass ( units , class ) ; var un ; begin
77646: LD_INT 0
77648: PPUSH
77649: PPUSH
// if not units or not class then
77650: LD_VAR 0 1
77654: NOT
77655: PUSH
77656: LD_VAR 0 2
77660: NOT
77661: OR
77662: IFFALSE 77666
// exit ;
77664: GO 77761
// result := [ ] ;
77666: LD_ADDR_VAR 0 3
77670: PUSH
77671: EMPTY
77672: ST_TO_ADDR
// for un in units do
77673: LD_ADDR_VAR 0 4
77677: PUSH
77678: LD_VAR 0 1
77682: PUSH
77683: FOR_IN
77684: IFFALSE 77759
// if GetClass ( un ) = class then
77686: LD_VAR 0 4
77690: PPUSH
77691: CALL_OW 257
77695: PUSH
77696: LD_VAR 0 2
77700: EQUAL
77701: IFFALSE 77728
// result := Insert ( result , 1 , un ) else
77703: LD_ADDR_VAR 0 3
77707: PUSH
77708: LD_VAR 0 3
77712: PPUSH
77713: LD_INT 1
77715: PPUSH
77716: LD_VAR 0 4
77720: PPUSH
77721: CALL_OW 2
77725: ST_TO_ADDR
77726: GO 77757
// result := Replace ( result , result + 1 , un ) ;
77728: LD_ADDR_VAR 0 3
77732: PUSH
77733: LD_VAR 0 3
77737: PPUSH
77738: LD_VAR 0 3
77742: PUSH
77743: LD_INT 1
77745: PLUS
77746: PPUSH
77747: LD_VAR 0 4
77751: PPUSH
77752: CALL_OW 1
77756: ST_TO_ADDR
77757: GO 77683
77759: POP
77760: POP
// end ;
77761: LD_VAR 0 3
77765: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77766: LD_INT 0
77768: PPUSH
77769: PPUSH
77770: PPUSH
77771: PPUSH
77772: PPUSH
77773: PPUSH
77774: PPUSH
// result := [ ] ;
77775: LD_ADDR_VAR 0 4
77779: PUSH
77780: EMPTY
77781: ST_TO_ADDR
// if x - r < 0 then
77782: LD_VAR 0 1
77786: PUSH
77787: LD_VAR 0 3
77791: MINUS
77792: PUSH
77793: LD_INT 0
77795: LESS
77796: IFFALSE 77808
// min_x := 0 else
77798: LD_ADDR_VAR 0 8
77802: PUSH
77803: LD_INT 0
77805: ST_TO_ADDR
77806: GO 77824
// min_x := x - r ;
77808: LD_ADDR_VAR 0 8
77812: PUSH
77813: LD_VAR 0 1
77817: PUSH
77818: LD_VAR 0 3
77822: MINUS
77823: ST_TO_ADDR
// if y - r < 0 then
77824: LD_VAR 0 2
77828: PUSH
77829: LD_VAR 0 3
77833: MINUS
77834: PUSH
77835: LD_INT 0
77837: LESS
77838: IFFALSE 77850
// min_y := 0 else
77840: LD_ADDR_VAR 0 7
77844: PUSH
77845: LD_INT 0
77847: ST_TO_ADDR
77848: GO 77866
// min_y := y - r ;
77850: LD_ADDR_VAR 0 7
77854: PUSH
77855: LD_VAR 0 2
77859: PUSH
77860: LD_VAR 0 3
77864: MINUS
77865: ST_TO_ADDR
// max_x := x + r ;
77866: LD_ADDR_VAR 0 9
77870: PUSH
77871: LD_VAR 0 1
77875: PUSH
77876: LD_VAR 0 3
77880: PLUS
77881: ST_TO_ADDR
// max_y := y + r ;
77882: LD_ADDR_VAR 0 10
77886: PUSH
77887: LD_VAR 0 2
77891: PUSH
77892: LD_VAR 0 3
77896: PLUS
77897: ST_TO_ADDR
// for _x = min_x to max_x do
77898: LD_ADDR_VAR 0 5
77902: PUSH
77903: DOUBLE
77904: LD_VAR 0 8
77908: DEC
77909: ST_TO_ADDR
77910: LD_VAR 0 9
77914: PUSH
77915: FOR_TO
77916: IFFALSE 78017
// for _y = min_y to max_y do
77918: LD_ADDR_VAR 0 6
77922: PUSH
77923: DOUBLE
77924: LD_VAR 0 7
77928: DEC
77929: ST_TO_ADDR
77930: LD_VAR 0 10
77934: PUSH
77935: FOR_TO
77936: IFFALSE 78013
// begin if not ValidHex ( _x , _y ) then
77938: LD_VAR 0 5
77942: PPUSH
77943: LD_VAR 0 6
77947: PPUSH
77948: CALL_OW 488
77952: NOT
77953: IFFALSE 77957
// continue ;
77955: GO 77935
// if GetResourceTypeXY ( _x , _y ) then
77957: LD_VAR 0 5
77961: PPUSH
77962: LD_VAR 0 6
77966: PPUSH
77967: CALL_OW 283
77971: IFFALSE 78011
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77973: LD_ADDR_VAR 0 4
77977: PUSH
77978: LD_VAR 0 4
77982: PPUSH
77983: LD_VAR 0 4
77987: PUSH
77988: LD_INT 1
77990: PLUS
77991: PPUSH
77992: LD_VAR 0 5
77996: PUSH
77997: LD_VAR 0 6
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: PPUSH
78006: CALL_OW 1
78010: ST_TO_ADDR
// end ;
78011: GO 77935
78013: POP
78014: POP
78015: GO 77915
78017: POP
78018: POP
// end ;
78019: LD_VAR 0 4
78023: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78024: LD_INT 0
78026: PPUSH
78027: PPUSH
78028: PPUSH
78029: PPUSH
78030: PPUSH
78031: PPUSH
78032: PPUSH
78033: PPUSH
// if not units then
78034: LD_VAR 0 1
78038: NOT
78039: IFFALSE 78043
// exit ;
78041: GO 78468
// result := UnitFilter ( units , [ f_ok ] ) ;
78043: LD_ADDR_VAR 0 3
78047: PUSH
78048: LD_VAR 0 1
78052: PPUSH
78053: LD_INT 50
78055: PUSH
78056: EMPTY
78057: LIST
78058: PPUSH
78059: CALL_OW 72
78063: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78064: LD_ADDR_VAR 0 8
78068: PUSH
78069: LD_VAR 0 1
78073: PUSH
78074: LD_INT 1
78076: ARRAY
78077: PPUSH
78078: CALL_OW 255
78082: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
78083: LD_ADDR_VAR 0 10
78087: PUSH
78088: LD_INT 29
78090: PUSH
78091: LD_EXP 52
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: ST_TO_ADDR
// if not result then
78100: LD_VAR 0 3
78104: NOT
78105: IFFALSE 78109
// exit ;
78107: GO 78468
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78109: LD_ADDR_VAR 0 5
78113: PUSH
78114: LD_INT 81
78116: PUSH
78117: LD_VAR 0 8
78121: PUSH
78122: EMPTY
78123: LIST
78124: LIST
78125: PPUSH
78126: CALL_OW 69
78130: ST_TO_ADDR
// for i in result do
78131: LD_ADDR_VAR 0 4
78135: PUSH
78136: LD_VAR 0 3
78140: PUSH
78141: FOR_IN
78142: IFFALSE 78466
// begin tag := GetTag ( i ) + 1 ;
78144: LD_ADDR_VAR 0 9
78148: PUSH
78149: LD_VAR 0 4
78153: PPUSH
78154: CALL_OW 110
78158: PUSH
78159: LD_INT 1
78161: PLUS
78162: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78163: LD_ADDR_VAR 0 7
78167: PUSH
78168: LD_VAR 0 4
78172: PPUSH
78173: CALL_OW 250
78177: PPUSH
78178: LD_VAR 0 4
78182: PPUSH
78183: CALL_OW 251
78187: PPUSH
78188: LD_INT 6
78190: PPUSH
78191: CALL 77766 0 3
78195: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78196: LD_VAR 0 7
78200: PUSH
78201: LD_VAR 0 4
78205: PPUSH
78206: CALL_OW 264
78210: PUSH
78211: LD_VAR 0 10
78215: IN
78216: NOT
78217: AND
78218: IFFALSE 78257
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78220: LD_VAR 0 4
78224: PPUSH
78225: LD_VAR 0 7
78229: PUSH
78230: LD_INT 1
78232: ARRAY
78233: PUSH
78234: LD_INT 1
78236: ARRAY
78237: PPUSH
78238: LD_VAR 0 7
78242: PUSH
78243: LD_INT 1
78245: ARRAY
78246: PUSH
78247: LD_INT 2
78249: ARRAY
78250: PPUSH
78251: CALL_OW 116
78255: GO 78464
// if path > tag then
78257: LD_VAR 0 2
78261: PUSH
78262: LD_VAR 0 9
78266: GREATER
78267: IFFALSE 78434
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78269: LD_ADDR_VAR 0 6
78273: PUSH
78274: LD_VAR 0 5
78278: PPUSH
78279: LD_INT 91
78281: PUSH
78282: LD_VAR 0 4
78286: PUSH
78287: LD_INT 12
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: LIST
78294: PPUSH
78295: CALL_OW 72
78299: ST_TO_ADDR
// if nearEnemy then
78300: LD_VAR 0 6
78304: IFFALSE 78332
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78306: LD_VAR 0 4
78310: PPUSH
78311: LD_VAR 0 6
78315: PPUSH
78316: LD_VAR 0 4
78320: PPUSH
78321: CALL_OW 74
78325: PPUSH
78326: CALL_OW 115
78330: GO 78432
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78332: LD_VAR 0 4
78336: PPUSH
78337: LD_VAR 0 2
78341: PUSH
78342: LD_VAR 0 9
78346: ARRAY
78347: PUSH
78348: LD_INT 1
78350: ARRAY
78351: PPUSH
78352: LD_VAR 0 2
78356: PUSH
78357: LD_VAR 0 9
78361: ARRAY
78362: PUSH
78363: LD_INT 2
78365: ARRAY
78366: PPUSH
78367: CALL_OW 297
78371: PUSH
78372: LD_INT 6
78374: GREATER
78375: IFFALSE 78418
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78377: LD_VAR 0 4
78381: PPUSH
78382: LD_VAR 0 2
78386: PUSH
78387: LD_VAR 0 9
78391: ARRAY
78392: PUSH
78393: LD_INT 1
78395: ARRAY
78396: PPUSH
78397: LD_VAR 0 2
78401: PUSH
78402: LD_VAR 0 9
78406: ARRAY
78407: PUSH
78408: LD_INT 2
78410: ARRAY
78411: PPUSH
78412: CALL_OW 114
78416: GO 78432
// SetTag ( i , tag ) ;
78418: LD_VAR 0 4
78422: PPUSH
78423: LD_VAR 0 9
78427: PPUSH
78428: CALL_OW 109
// end else
78432: GO 78464
// if enemy then
78434: LD_VAR 0 5
78438: IFFALSE 78464
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78440: LD_VAR 0 4
78444: PPUSH
78445: LD_VAR 0 5
78449: PPUSH
78450: LD_VAR 0 4
78454: PPUSH
78455: CALL_OW 74
78459: PPUSH
78460: CALL_OW 115
// end ;
78464: GO 78141
78466: POP
78467: POP
// end ;
78468: LD_VAR 0 3
78472: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78473: LD_INT 0
78475: PPUSH
78476: PPUSH
78477: PPUSH
// if not unit or IsInUnit ( unit ) then
78478: LD_VAR 0 1
78482: NOT
78483: PUSH
78484: LD_VAR 0 1
78488: PPUSH
78489: CALL_OW 310
78493: OR
78494: IFFALSE 78498
// exit ;
78496: GO 78589
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78498: LD_ADDR_VAR 0 4
78502: PUSH
78503: LD_VAR 0 1
78507: PPUSH
78508: CALL_OW 250
78512: PPUSH
78513: LD_VAR 0 2
78517: PPUSH
78518: LD_INT 1
78520: PPUSH
78521: CALL_OW 272
78525: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78526: LD_ADDR_VAR 0 5
78530: PUSH
78531: LD_VAR 0 1
78535: PPUSH
78536: CALL_OW 251
78540: PPUSH
78541: LD_VAR 0 2
78545: PPUSH
78546: LD_INT 1
78548: PPUSH
78549: CALL_OW 273
78553: ST_TO_ADDR
// if ValidHex ( x , y ) then
78554: LD_VAR 0 4
78558: PPUSH
78559: LD_VAR 0 5
78563: PPUSH
78564: CALL_OW 488
78568: IFFALSE 78589
// ComTurnXY ( unit , x , y ) ;
78570: LD_VAR 0 1
78574: PPUSH
78575: LD_VAR 0 4
78579: PPUSH
78580: LD_VAR 0 5
78584: PPUSH
78585: CALL_OW 118
// end ;
78589: LD_VAR 0 3
78593: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78594: LD_INT 0
78596: PPUSH
78597: PPUSH
// result := false ;
78598: LD_ADDR_VAR 0 3
78602: PUSH
78603: LD_INT 0
78605: ST_TO_ADDR
// if not units then
78606: LD_VAR 0 2
78610: NOT
78611: IFFALSE 78615
// exit ;
78613: GO 78660
// for i in units do
78615: LD_ADDR_VAR 0 4
78619: PUSH
78620: LD_VAR 0 2
78624: PUSH
78625: FOR_IN
78626: IFFALSE 78658
// if See ( side , i ) then
78628: LD_VAR 0 1
78632: PPUSH
78633: LD_VAR 0 4
78637: PPUSH
78638: CALL_OW 292
78642: IFFALSE 78656
// begin result := true ;
78644: LD_ADDR_VAR 0 3
78648: PUSH
78649: LD_INT 1
78651: ST_TO_ADDR
// exit ;
78652: POP
78653: POP
78654: GO 78660
// end ;
78656: GO 78625
78658: POP
78659: POP
// end ;
78660: LD_VAR 0 3
78664: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78665: LD_INT 0
78667: PPUSH
78668: PPUSH
78669: PPUSH
78670: PPUSH
// if not unit or not points then
78671: LD_VAR 0 1
78675: NOT
78676: PUSH
78677: LD_VAR 0 2
78681: NOT
78682: OR
78683: IFFALSE 78687
// exit ;
78685: GO 78777
// dist := 99999 ;
78687: LD_ADDR_VAR 0 5
78691: PUSH
78692: LD_INT 99999
78694: ST_TO_ADDR
// for i in points do
78695: LD_ADDR_VAR 0 4
78699: PUSH
78700: LD_VAR 0 2
78704: PUSH
78705: FOR_IN
78706: IFFALSE 78775
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78708: LD_ADDR_VAR 0 6
78712: PUSH
78713: LD_VAR 0 1
78717: PPUSH
78718: LD_VAR 0 4
78722: PUSH
78723: LD_INT 1
78725: ARRAY
78726: PPUSH
78727: LD_VAR 0 4
78731: PUSH
78732: LD_INT 2
78734: ARRAY
78735: PPUSH
78736: CALL_OW 297
78740: ST_TO_ADDR
// if tmpDist < dist then
78741: LD_VAR 0 6
78745: PUSH
78746: LD_VAR 0 5
78750: LESS
78751: IFFALSE 78773
// begin result := i ;
78753: LD_ADDR_VAR 0 3
78757: PUSH
78758: LD_VAR 0 4
78762: ST_TO_ADDR
// dist := tmpDist ;
78763: LD_ADDR_VAR 0 5
78767: PUSH
78768: LD_VAR 0 6
78772: ST_TO_ADDR
// end ; end ;
78773: GO 78705
78775: POP
78776: POP
// end ;
78777: LD_VAR 0 3
78781: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78782: LD_INT 0
78784: PPUSH
// uc_side := side ;
78785: LD_ADDR_OWVAR 20
78789: PUSH
78790: LD_VAR 0 1
78794: ST_TO_ADDR
// uc_nation := 3 ;
78795: LD_ADDR_OWVAR 21
78799: PUSH
78800: LD_INT 3
78802: ST_TO_ADDR
// vc_chassis := 25 ;
78803: LD_ADDR_OWVAR 37
78807: PUSH
78808: LD_INT 25
78810: ST_TO_ADDR
// vc_engine := engine_siberite ;
78811: LD_ADDR_OWVAR 39
78815: PUSH
78816: LD_INT 3
78818: ST_TO_ADDR
// vc_control := control_computer ;
78819: LD_ADDR_OWVAR 38
78823: PUSH
78824: LD_INT 3
78826: ST_TO_ADDR
// vc_weapon := 59 ;
78827: LD_ADDR_OWVAR 40
78831: PUSH
78832: LD_INT 59
78834: ST_TO_ADDR
// result := CreateVehicle ;
78835: LD_ADDR_VAR 0 5
78839: PUSH
78840: CALL_OW 45
78844: ST_TO_ADDR
// SetDir ( result , d ) ;
78845: LD_VAR 0 5
78849: PPUSH
78850: LD_VAR 0 4
78854: PPUSH
78855: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78859: LD_VAR 0 5
78863: PPUSH
78864: LD_VAR 0 2
78868: PPUSH
78869: LD_VAR 0 3
78873: PPUSH
78874: LD_INT 0
78876: PPUSH
78877: CALL_OW 48
// end ; end_of_file
78881: LD_VAR 0 5
78885: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78886: LD_VAR 0 1
78890: PUSH
78891: LD_INT 200
78893: DOUBLE
78894: GREATEREQUAL
78895: IFFALSE 78903
78897: LD_INT 299
78899: DOUBLE
78900: LESSEQUAL
78901: IFTRUE 78905
78903: GO 78937
78905: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78906: LD_VAR 0 1
78910: PPUSH
78911: LD_VAR 0 2
78915: PPUSH
78916: LD_VAR 0 3
78920: PPUSH
78921: LD_VAR 0 4
78925: PPUSH
78926: LD_VAR 0 5
78930: PPUSH
78931: CALL 34485 0 5
78935: GO 79014
78937: LD_INT 300
78939: DOUBLE
78940: GREATEREQUAL
78941: IFFALSE 78949
78943: LD_INT 399
78945: DOUBLE
78946: LESSEQUAL
78947: IFTRUE 78951
78949: GO 79013
78951: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78952: LD_VAR 0 1
78956: PPUSH
78957: LD_VAR 0 2
78961: PPUSH
78962: LD_VAR 0 3
78966: PPUSH
78967: LD_VAR 0 4
78971: PPUSH
78972: LD_VAR 0 5
78976: PPUSH
78977: LD_VAR 0 6
78981: PPUSH
78982: LD_VAR 0 7
78986: PPUSH
78987: LD_VAR 0 8
78991: PPUSH
78992: LD_VAR 0 9
78996: PPUSH
78997: LD_VAR 0 10
79001: PPUSH
79002: LD_VAR 0 11
79006: PPUSH
79007: CALL 32127 0 11
79011: GO 79014
79013: POP
// end ;
79014: PPOPN 11
79016: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79017: LD_VAR 0 1
79021: PPUSH
79022: LD_VAR 0 2
79026: PPUSH
79027: LD_VAR 0 3
79031: PPUSH
79032: LD_VAR 0 4
79036: PPUSH
79037: LD_VAR 0 5
79041: PPUSH
79042: CALL 34221 0 5
// end ; end_of_file
79046: PPOPN 5
79048: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79049: LD_VAR 0 1
79053: PPUSH
79054: LD_VAR 0 2
79058: PPUSH
79059: LD_VAR 0 3
79063: PPUSH
79064: LD_VAR 0 4
79068: PPUSH
79069: LD_VAR 0 5
79073: PPUSH
79074: LD_VAR 0 6
79078: PPUSH
79079: CALL 19820 0 6
// end ;
79083: PPOPN 6
79085: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79086: CALL 19795 0 0
// end ;
79090: PPOPN 1
79092: END
