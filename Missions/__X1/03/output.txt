// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareNature ;
   8: CALL 665 0 0
// PrepareArabian ;
  12: CALL 1980 0 0
// PrepareAmerican ;
  16: CALL 5005 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9677 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 22
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 8
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 14
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 15
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 19
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 20
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 21
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 15 , 14 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 25
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 15
 269: PUSH
 270: LD_INT 14
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 12
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// end ; end_of_file
 292: LD_VAR 0 1
 296: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 297: LD_INT 0
 299: PPUSH
 300: PPUSH
// if exist_mode then
 301: LD_VAR 0 2
 305: IFFALSE 330
// unit := CreateCharacter ( prefix & ident ) else
 307: LD_ADDR_VAR 0 5
 311: PUSH
 312: LD_VAR 0 3
 316: PUSH
 317: LD_VAR 0 1
 321: STR
 322: PPUSH
 323: CALL_OW 34
 327: ST_TO_ADDR
 328: GO 345
// unit := NewCharacter ( ident ) ;
 330: LD_ADDR_VAR 0 5
 334: PUSH
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 25
 344: ST_TO_ADDR
// result := unit ;
 345: LD_ADDR_VAR 0 4
 349: PUSH
 350: LD_VAR 0 5
 354: ST_TO_ADDR
// end ;
 355: LD_VAR 0 4
 359: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 360: LD_INT 0
 362: PPUSH
// uc_side := side ;
 363: LD_ADDR_OWVAR 20
 367: PUSH
 368: LD_VAR 0 1
 372: ST_TO_ADDR
// uc_nation := nation ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_VAR 0 2
 382: ST_TO_ADDR
// vc_chassis := chassis ;
 383: LD_ADDR_OWVAR 37
 387: PUSH
 388: LD_VAR 0 3
 392: ST_TO_ADDR
// vc_engine := engine ;
 393: LD_ADDR_OWVAR 39
 397: PUSH
 398: LD_VAR 0 4
 402: ST_TO_ADDR
// vc_control := control ;
 403: LD_ADDR_OWVAR 38
 407: PUSH
 408: LD_VAR 0 5
 412: ST_TO_ADDR
// vc_weapon := weapon ;
 413: LD_ADDR_OWVAR 40
 417: PUSH
 418: LD_VAR 0 6
 422: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 423: LD_ADDR_OWVAR 41
 427: PUSH
 428: LD_VAR 0 7
 432: ST_TO_ADDR
// result := CreateVehicle ;
 433: LD_ADDR_VAR 0 8
 437: PUSH
 438: CALL_OW 45
 442: ST_TO_ADDR
// end ;
 443: LD_VAR 0 8
 447: RET
// export function SayX ( units , ident ) ; var i ; begin
 448: LD_INT 0
 450: PPUSH
 451: PPUSH
// result := false ;
 452: LD_ADDR_VAR 0 3
 456: PUSH
 457: LD_INT 0
 459: ST_TO_ADDR
// if not units then
 460: LD_VAR 0 1
 464: NOT
 465: IFFALSE 469
// exit ;
 467: GO 523
// for i in units do
 469: LD_ADDR_VAR 0 4
 473: PUSH
 474: LD_VAR 0 1
 478: PUSH
 479: FOR_IN
 480: IFFALSE 521
// if IsOk ( i ) then
 482: LD_VAR 0 4
 486: PPUSH
 487: CALL_OW 302
 491: IFFALSE 519
// begin Say ( i , ident ) ;
 493: LD_VAR 0 4
 497: PPUSH
 498: LD_VAR 0 2
 502: PPUSH
 503: CALL_OW 88
// result := i ;
 507: LD_ADDR_VAR 0 3
 511: PUSH
 512: LD_VAR 0 4
 516: ST_TO_ADDR
// break ;
 517: GO 521
// end ;
 519: GO 479
 521: POP
 522: POP
// end ;
 523: LD_VAR 0 3
 527: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 528: LD_INT 0
 530: PPUSH
 531: PPUSH
// InitUc ;
 532: CALL_OW 18
// InitHc ;
 536: CALL_OW 19
// uc_side := 0 ;
 540: LD_ADDR_OWVAR 20
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// uc_nation := 0 ;
 548: LD_ADDR_OWVAR 21
 552: PUSH
 553: LD_INT 0
 555: ST_TO_ADDR
// for i = 1 to amount do
 556: LD_ADDR_VAR 0 4
 560: PUSH
 561: DOUBLE
 562: LD_INT 1
 564: DEC
 565: ST_TO_ADDR
 566: LD_VAR 0 2
 570: PUSH
 571: FOR_TO
 572: IFFALSE 654
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 574: LD_ADDR_OWVAR 29
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: LD_INT 9
 592: PPUSH
 593: LD_INT 12
 595: PPUSH
 596: CALL_OW 12
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 605: LD_ADDR_OWVAR 35
 609: PUSH
 610: LD_INT 1
 612: NEG
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL_OW 12
 621: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 622: LD_INT 0
 624: PPUSH
 625: LD_INT 12
 627: PPUSH
 628: LD_INT 1
 630: PPUSH
 631: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 635: CALL_OW 44
 639: PPUSH
 640: LD_VAR 0 1
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 49
// end ;
 652: GO 571
 654: POP
 655: POP
// InitHc ;
 656: CALL_OW 19
// end ;
 660: LD_VAR 0 3
 664: RET
// export function PrepareNature ; var i ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 669: LD_INT 2
 671: PPUSH
 672: LD_INT 5
 674: PUSH
 675: LD_INT 4
 677: PUSH
 678: LD_INT 4
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: LD_OWVAR 67
 690: ARRAY
 691: PPUSH
 692: CALL 528 0 2
// for i := 1 to 2 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 2
 708: PUSH
 709: FOR_TO
 710: IFFALSE 745
// begin hc_class := 21 ;
 712: LD_ADDR_OWVAR 28
 716: PUSH
 717: LD_INT 21
 719: ST_TO_ADDR
// hc_gallery :=  ;
 720: LD_ADDR_OWVAR 33
 724: PUSH
 725: LD_STRING 
 727: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_INT 2
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ;
 743: GO 709
 745: POP
 746: POP
// for i := 1 to 2 do
 747: LD_ADDR_VAR 0 2
 751: PUSH
 752: DOUBLE
 753: LD_INT 1
 755: DEC
 756: ST_TO_ADDR
 757: LD_INT 2
 759: PUSH
 760: FOR_TO
 761: IFFALSE 796
// begin hc_class := 18 ;
 763: LD_ADDR_OWVAR 28
 767: PUSH
 768: LD_INT 18
 770: ST_TO_ADDR
// hc_gallery :=  ;
 771: LD_ADDR_OWVAR 33
 775: PUSH
 776: LD_STRING 
 778: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_INT 2
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 49
// end ;
 794: GO 760
 796: POP
 797: POP
// for i := 1 to 2 do
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: DOUBLE
 804: LD_INT 1
 806: DEC
 807: ST_TO_ADDR
 808: LD_INT 2
 810: PUSH
 811: FOR_TO
 812: IFFALSE 847
// begin hc_class := 13 ;
 814: LD_ADDR_OWVAR 28
 818: PUSH
 819: LD_INT 13
 821: ST_TO_ADDR
// hc_gallery :=  ;
 822: LD_ADDR_OWVAR 33
 826: PUSH
 827: LD_STRING 
 829: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 830: CALL_OW 44
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: CALL_OW 49
// end ;
 845: GO 811
 847: POP
 848: POP
// end ;
 849: LD_VAR 0 1
 853: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 854: LD_INT 0
 856: PPUSH
 857: PPUSH
 858: PPUSH
// if not observer or not unit then
 859: LD_VAR 0 1
 863: NOT
 864: PUSH
 865: LD_VAR 0 2
 869: NOT
 870: OR
 871: IFFALSE 875
// exit ;
 873: GO 923
// if not See ( GetSide ( observer ) , unit ) then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 255
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 292
 894: NOT
 895: IFFALSE 899
// exit ;
 897: GO 923
// result := GetDistUnits ( observer , unit ) < 12 ;
 899: LD_ADDR_VAR 0 3
 903: PUSH
 904: LD_VAR 0 1
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 296
 918: PUSH
 919: LD_INT 12
 921: LESS
 922: ST_TO_ADDR
// end ;
 923: LD_VAR 0 3
 927: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 928: LD_INT 0
 930: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 931: LD_VAR 0 2
 935: PUSH
 936: LD_INT 1
 938: ARRAY
 939: PPUSH
 940: LD_VAR 0 2
 944: PUSH
 945: LD_INT 2
 947: ARRAY
 948: PPUSH
 949: CALL_OW 488
 953: PUSH
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: ARRAY
 971: PPUSH
 972: CALL_OW 428
 976: PUSH
 977: LD_INT 0
 979: EQUAL
 980: AND
 981: IFFALSE 1015
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 983: LD_VAR 0 1
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PPUSH
1006: LD_VAR 0 3
1010: PPUSH
1011: CALL_OW 48
// end ;
1015: LD_VAR 0 4
1019: RET
// export function Video ( mode ) ; begin
1020: LD_INT 0
1022: PPUSH
// ingame_video = mode ;
1023: LD_ADDR_OWVAR 52
1027: PUSH
1028: LD_VAR 0 1
1032: ST_TO_ADDR
// interface_hidden = mode ;
1033: LD_ADDR_OWVAR 54
1037: PUSH
1038: LD_VAR 0 1
1042: ST_TO_ADDR
// end ;
1043: LD_VAR 0 2
1047: RET
// export function ReverseArray ( array ) ; var i ; begin
1048: LD_INT 0
1050: PPUSH
1051: PPUSH
// if not array then
1052: LD_VAR 0 1
1056: NOT
1057: IFFALSE 1061
// exit ;
1059: GO 1119
// result := [ ] ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: EMPTY
1067: ST_TO_ADDR
// for i := 1 to array do
1068: LD_ADDR_VAR 0 3
1072: PUSH
1073: DOUBLE
1074: LD_INT 1
1076: DEC
1077: ST_TO_ADDR
1078: LD_VAR 0 1
1082: PUSH
1083: FOR_TO
1084: IFFALSE 1117
// result := Insert ( result , 1 , array [ i ] ) ;
1086: LD_ADDR_VAR 0 2
1090: PUSH
1091: LD_VAR 0 2
1095: PPUSH
1096: LD_INT 1
1098: PPUSH
1099: LD_VAR 0 1
1103: PUSH
1104: LD_VAR 0 3
1108: ARRAY
1109: PPUSH
1110: CALL_OW 2
1114: ST_TO_ADDR
1115: GO 1083
1117: POP
1118: POP
// end ;
1119: LD_VAR 0 2
1123: RET
// export function ComExit ( unit ) ; begin
1124: LD_INT 0
1126: PPUSH
// result := IsInUnit ( unit ) ;
1127: LD_ADDR_VAR 0 2
1131: PUSH
1132: LD_VAR 0 1
1136: PPUSH
1137: CALL_OW 310
1141: ST_TO_ADDR
// if not result then
1142: LD_VAR 0 2
1146: NOT
1147: IFFALSE 1151
// exit ;
1149: GO 1186
// if GetType ( result ) = unit_vehicle then
1151: LD_VAR 0 2
1155: PPUSH
1156: CALL_OW 247
1160: PUSH
1161: LD_INT 2
1163: EQUAL
1164: IFFALSE 1177
// ComExitVehicle ( unit ) else
1166: LD_VAR 0 1
1170: PPUSH
1171: CALL_OW 121
1175: GO 1186
// ComExitBuilding ( unit ) ;
1177: LD_VAR 0 1
1181: PPUSH
1182: CALL_OW 122
// end ;
1186: LD_VAR 0 2
1190: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1191: LD_INT 0
1193: PPUSH
1194: PPUSH
// if not side or not nation then
1195: LD_VAR 0 1
1199: NOT
1200: PUSH
1201: LD_VAR 0 2
1205: NOT
1206: OR
1207: IFFALSE 1211
// exit ;
1209: GO 1975
// case nation of nation_american :
1211: LD_VAR 0 2
1215: PUSH
1216: LD_INT 1
1218: DOUBLE
1219: EQUAL
1220: IFTRUE 1224
1222: GO 1438
1224: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1225: LD_ADDR_VAR 0 4
1229: PUSH
1230: LD_INT 35
1232: PUSH
1233: LD_INT 45
1235: PUSH
1236: LD_INT 46
1238: PUSH
1239: LD_INT 47
1241: PUSH
1242: LD_INT 82
1244: PUSH
1245: LD_INT 83
1247: PUSH
1248: LD_INT 84
1250: PUSH
1251: LD_INT 85
1253: PUSH
1254: LD_INT 86
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 2
1262: PUSH
1263: LD_INT 6
1265: PUSH
1266: LD_INT 15
1268: PUSH
1269: LD_INT 16
1271: PUSH
1272: LD_INT 7
1274: PUSH
1275: LD_INT 12
1277: PUSH
1278: LD_INT 13
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 14
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: LD_INT 21
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 25
1298: PUSH
1299: LD_INT 32
1301: PUSH
1302: LD_INT 27
1304: PUSH
1305: LD_INT 36
1307: PUSH
1308: LD_INT 69
1310: PUSH
1311: LD_INT 39
1313: PUSH
1314: LD_INT 34
1316: PUSH
1317: LD_INT 40
1319: PUSH
1320: LD_INT 48
1322: PUSH
1323: LD_INT 49
1325: PUSH
1326: LD_INT 50
1328: PUSH
1329: LD_INT 51
1331: PUSH
1332: LD_INT 52
1334: PUSH
1335: LD_INT 53
1337: PUSH
1338: LD_INT 54
1340: PUSH
1341: LD_INT 55
1343: PUSH
1344: LD_INT 56
1346: PUSH
1347: LD_INT 57
1349: PUSH
1350: LD_INT 58
1352: PUSH
1353: LD_INT 59
1355: PUSH
1356: LD_INT 60
1358: PUSH
1359: LD_INT 61
1361: PUSH
1362: LD_INT 62
1364: PUSH
1365: LD_INT 80
1367: PUSH
1368: LD_INT 82
1370: PUSH
1371: LD_INT 83
1373: PUSH
1374: LD_INT 84
1376: PUSH
1377: LD_INT 85
1379: PUSH
1380: LD_INT 86
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: ST_TO_ADDR
1436: GO 1899
1438: LD_INT 2
1440: DOUBLE
1441: EQUAL
1442: IFTRUE 1446
1444: GO 1668
1446: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1447: LD_ADDR_VAR 0 4
1451: PUSH
1452: LD_INT 35
1454: PUSH
1455: LD_INT 45
1457: PUSH
1458: LD_INT 46
1460: PUSH
1461: LD_INT 47
1463: PUSH
1464: LD_INT 82
1466: PUSH
1467: LD_INT 83
1469: PUSH
1470: LD_INT 84
1472: PUSH
1473: LD_INT 85
1475: PUSH
1476: LD_INT 87
1478: PUSH
1479: LD_INT 70
1481: PUSH
1482: LD_INT 1
1484: PUSH
1485: LD_INT 11
1487: PUSH
1488: LD_INT 3
1490: PUSH
1491: LD_INT 4
1493: PUSH
1494: LD_INT 5
1496: PUSH
1497: LD_INT 6
1499: PUSH
1500: LD_INT 15
1502: PUSH
1503: LD_INT 18
1505: PUSH
1506: LD_INT 7
1508: PUSH
1509: LD_INT 17
1511: PUSH
1512: LD_INT 8
1514: PUSH
1515: LD_INT 20
1517: PUSH
1518: LD_INT 21
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 72
1526: PUSH
1527: LD_INT 26
1529: PUSH
1530: LD_INT 69
1532: PUSH
1533: LD_INT 39
1535: PUSH
1536: LD_INT 40
1538: PUSH
1539: LD_INT 41
1541: PUSH
1542: LD_INT 42
1544: PUSH
1545: LD_INT 43
1547: PUSH
1548: LD_INT 48
1550: PUSH
1551: LD_INT 49
1553: PUSH
1554: LD_INT 50
1556: PUSH
1557: LD_INT 51
1559: PUSH
1560: LD_INT 52
1562: PUSH
1563: LD_INT 53
1565: PUSH
1566: LD_INT 54
1568: PUSH
1569: LD_INT 55
1571: PUSH
1572: LD_INT 56
1574: PUSH
1575: LD_INT 60
1577: PUSH
1578: LD_INT 61
1580: PUSH
1581: LD_INT 62
1583: PUSH
1584: LD_INT 66
1586: PUSH
1587: LD_INT 67
1589: PUSH
1590: LD_INT 68
1592: PUSH
1593: LD_INT 81
1595: PUSH
1596: LD_INT 82
1598: PUSH
1599: LD_INT 83
1601: PUSH
1602: LD_INT 84
1604: PUSH
1605: LD_INT 85
1607: PUSH
1608: LD_INT 87
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: ST_TO_ADDR
1666: GO 1899
1668: LD_INT 3
1670: DOUBLE
1671: EQUAL
1672: IFTRUE 1676
1674: GO 1898
1676: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_INT 46
1684: PUSH
1685: LD_INT 47
1687: PUSH
1688: LD_INT 1
1690: PUSH
1691: LD_INT 2
1693: PUSH
1694: LD_INT 82
1696: PUSH
1697: LD_INT 83
1699: PUSH
1700: LD_INT 84
1702: PUSH
1703: LD_INT 85
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 11
1711: PUSH
1712: LD_INT 9
1714: PUSH
1715: LD_INT 20
1717: PUSH
1718: LD_INT 19
1720: PUSH
1721: LD_INT 21
1723: PUSH
1724: LD_INT 24
1726: PUSH
1727: LD_INT 22
1729: PUSH
1730: LD_INT 25
1732: PUSH
1733: LD_INT 28
1735: PUSH
1736: LD_INT 29
1738: PUSH
1739: LD_INT 30
1741: PUSH
1742: LD_INT 31
1744: PUSH
1745: LD_INT 37
1747: PUSH
1748: LD_INT 38
1750: PUSH
1751: LD_INT 32
1753: PUSH
1754: LD_INT 27
1756: PUSH
1757: LD_INT 33
1759: PUSH
1760: LD_INT 69
1762: PUSH
1763: LD_INT 39
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 40
1771: PUSH
1772: LD_INT 71
1774: PUSH
1775: LD_INT 23
1777: PUSH
1778: LD_INT 44
1780: PUSH
1781: LD_INT 48
1783: PUSH
1784: LD_INT 49
1786: PUSH
1787: LD_INT 50
1789: PUSH
1790: LD_INT 51
1792: PUSH
1793: LD_INT 52
1795: PUSH
1796: LD_INT 53
1798: PUSH
1799: LD_INT 54
1801: PUSH
1802: LD_INT 55
1804: PUSH
1805: LD_INT 56
1807: PUSH
1808: LD_INT 57
1810: PUSH
1811: LD_INT 58
1813: PUSH
1814: LD_INT 59
1816: PUSH
1817: LD_INT 63
1819: PUSH
1820: LD_INT 64
1822: PUSH
1823: LD_INT 65
1825: PUSH
1826: LD_INT 82
1828: PUSH
1829: LD_INT 83
1831: PUSH
1832: LD_INT 84
1834: PUSH
1835: LD_INT 85
1837: PUSH
1838: LD_INT 86
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: ST_TO_ADDR
1896: GO 1899
1898: POP
// if state > - 1 and state < 3 then
1899: LD_VAR 0 3
1903: PUSH
1904: LD_INT 1
1906: NEG
1907: GREATER
1908: PUSH
1909: LD_VAR 0 3
1913: PUSH
1914: LD_INT 3
1916: LESS
1917: AND
1918: IFFALSE 1975
// for i in result do
1920: LD_ADDR_VAR 0 5
1924: PUSH
1925: LD_VAR 0 4
1929: PUSH
1930: FOR_IN
1931: IFFALSE 1973
// if GetTech ( i , side ) <> state then
1933: LD_VAR 0 5
1937: PPUSH
1938: LD_VAR 0 1
1942: PPUSH
1943: CALL_OW 321
1947: PUSH
1948: LD_VAR 0 3
1952: NONEQUAL
1953: IFFALSE 1971
// result := result diff i ;
1955: LD_ADDR_VAR 0 4
1959: PUSH
1960: LD_VAR 0 4
1964: PUSH
1965: LD_VAR 0 5
1969: DIFF
1970: ST_TO_ADDR
1971: GO 1930
1973: POP
1974: POP
// end ; end_of_file
1975: LD_VAR 0 4
1979: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1980: LD_INT 0
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 5 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 5
1993: ST_TO_ADDR
// uc_nation := 2 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 2
2001: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
2002: LD_INT 5
2004: PPUSH
2005: CALL_OW 274
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: LD_INT 45
2015: PPUSH
2016: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
2020: LD_ADDR_EXP 34
2024: PUSH
2025: LD_STRING Farmer
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: LD_STRING 
2033: PPUSH
2034: CALL 297 0 3
2038: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2039: LD_ADDR_EXP 35
2043: PUSH
2044: LD_STRING Omar
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: LD_STRING 
2052: PPUSH
2053: CALL 297 0 3
2057: ST_TO_ADDR
// omarSquad := [ ] ;
2058: LD_ADDR_EXP 38
2062: PUSH
2063: EMPTY
2064: ST_TO_ADDR
// heikeSquad := [ ] ;
2065: LD_ADDR_EXP 39
2069: PUSH
2070: EMPTY
2071: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
2072: LD_ADDR_EXP 40
2076: PUSH
2077: EMPTY
2078: ST_TO_ADDR
// omarCargo := [ ] ;
2079: LD_ADDR_EXP 41
2083: PUSH
2084: EMPTY
2085: ST_TO_ADDR
// for i := 1 to 5 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_INT 5
2098: PUSH
2099: FOR_TO
2100: IFFALSE 2258
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: LD_INT 2
2113: PUSH
2114: LD_INT 1
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: PUSH
2127: LD_VAR 0 2
2131: ARRAY
2132: PPUSH
2133: LD_INT 3
2135: PPUSH
2136: CALL_OW 380
// un := CreateHuman ;
2140: LD_ADDR_VAR 0 3
2144: PUSH
2145: CALL_OW 44
2149: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_EXP 38
2159: PUSH
2160: LD_VAR 0 3
2164: UNION
2165: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
2166: LD_VAR 0 3
2170: PPUSH
2171: LD_INT 87
2173: PUSH
2174: LD_INT 30
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 91
2183: PUSH
2184: LD_INT 32
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 82
2193: PUSH
2194: LD_INT 15
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 79
2203: PUSH
2204: LD_INT 14
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 82
2213: PUSH
2214: LD_INT 13
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: PUSH
2228: LD_VAR 0 2
2232: ARRAY
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: CALL 928 0 3
// ComTurnXY ( un , 93 , 21 ) ;
2241: LD_VAR 0 3
2245: PPUSH
2246: LD_INT 93
2248: PPUSH
2249: LD_INT 21
2251: PPUSH
2252: CALL_OW 118
// end ;
2256: GO 2099
2258: POP
2259: POP
// uc_side := 2 ;
2260: LD_ADDR_OWVAR 20
2264: PUSH
2265: LD_INT 2
2267: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2268: LD_ADDR_EXP 26
2272: PUSH
2273: LD_STRING Heike
2275: PPUSH
2276: LD_EXP 1
2280: NOT
2281: PPUSH
2282: LD_EXP 2
2286: PPUSH
2287: CALL 297 0 3
2291: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2292: LD_ADDR_EXP 30
2296: PUSH
2297: LD_STRING Aviradze
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_EXP 2
2310: PPUSH
2311: CALL 297 0 3
2315: ST_TO_ADDR
// tmp := [ ] ;
2316: LD_ADDR_VAR 0 4
2320: PUSH
2321: EMPTY
2322: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2323: LD_ADDR_EXP 27
2327: PUSH
2328: LD_STRING Givi
2330: PPUSH
2331: LD_EXP 1
2335: NOT
2336: PPUSH
2337: LD_EXP 2
2341: PPUSH
2342: CALL 297 0 3
2346: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2347: LD_ADDR_EXP 28
2351: PUSH
2352: LD_STRING Mike
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_EXP 2
2365: PPUSH
2366: CALL 297 0 3
2370: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2371: LD_ADDR_EXP 29
2375: PUSH
2376: LD_STRING Kamil
2378: PPUSH
2379: LD_EXP 1
2383: NOT
2384: PPUSH
2385: LD_EXP 2
2389: PPUSH
2390: CALL 297 0 3
2394: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2395: LD_ADDR_EXP 31
2399: PUSH
2400: LD_STRING Kaia
2402: PPUSH
2403: LD_EXP 1
2407: NOT
2408: PPUSH
2409: LD_EXP 2
2413: PPUSH
2414: CALL 297 0 3
2418: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2419: LD_ADDR_EXP 32
2423: PUSH
2424: LD_STRING Sophia
2426: PPUSH
2427: LD_EXP 1
2431: NOT
2432: PPUSH
2433: LD_EXP 2
2437: PPUSH
2438: CALL 297 0 3
2442: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2443: LD_ADDR_EXP 33
2447: PUSH
2448: LD_STRING Markov
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_EXP 2
2461: PPUSH
2462: CALL 297 0 3
2466: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
2467: LD_ADDR_EXP 40
2471: PUSH
2472: LD_STRING 02_others
2474: PPUSH
2475: CALL_OW 31
2479: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_EXP 28
2489: PUSH
2490: LD_EXP 29
2494: PUSH
2495: LD_EXP 31
2499: PUSH
2500: LD_EXP 32
2504: PUSH
2505: LD_EXP 33
2509: PUSH
2510: LD_EXP 27
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: PUSH
2523: LD_EXP 40
2527: ADD
2528: PUSH
2529: LD_INT 0
2531: DIFF
2532: ST_TO_ADDR
// heikeSquad := tmp ;
2533: LD_ADDR_EXP 39
2537: PUSH
2538: LD_VAR 0 4
2542: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
2543: LD_EXP 39
2547: PPUSH
2548: LD_INT 25
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PPUSH
2558: CALL_OW 72
2562: PUSH
2563: LD_INT 3
2565: LESS
2566: IFFALSE 2616
// begin SetClass ( Kaia , 1 ) ;
2568: LD_EXP 31
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: CALL_OW 336
// SetClass ( Mike , 1 ) ;
2580: LD_EXP 28
2584: PPUSH
2585: LD_INT 1
2587: PPUSH
2588: CALL_OW 336
// SetClass ( Givi , 1 ) ;
2592: LD_EXP 27
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: CALL_OW 336
// SetClass ( Heike , 1 ) ;
2604: LD_EXP 26
2608: PPUSH
2609: LD_INT 1
2611: PPUSH
2612: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_STRING 02_ape
2628: PPUSH
2629: CALL_OW 31
2633: UNION
2634: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
2635: LD_EXP 26
2639: PPUSH
2640: LD_INT 92
2642: PPUSH
2643: LD_INT 17
2645: PPUSH
2646: LD_INT 0
2648: PPUSH
2649: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
2653: LD_EXP 34
2657: PPUSH
2658: LD_INT 95
2660: PPUSH
2661: LD_INT 19
2663: PPUSH
2664: LD_INT 0
2666: PPUSH
2667: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
2671: LD_EXP 35
2675: PPUSH
2676: LD_INT 89
2678: PPUSH
2679: LD_INT 25
2681: PPUSH
2682: LD_INT 0
2684: PPUSH
2685: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
2689: LD_EXP 30
2693: PPUSH
2694: LD_INT 92
2696: PPUSH
2697: LD_INT 27
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
2707: LD_EXP 35
2711: PPUSH
2712: LD_EXP 30
2716: PPUSH
2717: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
2721: LD_EXP 30
2725: PPUSH
2726: LD_EXP 35
2730: PPUSH
2731: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
2735: LD_EXP 26
2739: PUSH
2740: LD_EXP 34
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: LD_EXP 35
2753: PPUSH
2754: CALL_OW 119
// if tmp then
2758: LD_VAR 0 4
2762: IFFALSE 2816
// for i in tmp do
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_VAR 0 4
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2814
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
2777: LD_VAR 0 2
2781: PPUSH
2782: LD_INT 94
2784: PPUSH
2785: LD_INT 14
2787: PPUSH
2788: LD_INT 4
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
2798: LD_VAR 0 2
2802: PPUSH
2803: LD_EXP 26
2807: PPUSH
2808: CALL_OW 119
// end ;
2812: GO 2774
2814: POP
2815: POP
// farmerSquad := [ ] ;
2816: LD_ADDR_EXP 37
2820: PUSH
2821: EMPTY
2822: ST_TO_ADDR
// uc_side := 5 ;
2823: LD_ADDR_OWVAR 20
2827: PUSH
2828: LD_INT 5
2830: ST_TO_ADDR
// uc_nation := 2 ;
2831: LD_ADDR_OWVAR 21
2835: PUSH
2836: LD_INT 2
2838: ST_TO_ADDR
// for i := 1 to 4 do
2839: LD_ADDR_VAR 0 2
2843: PUSH
2844: DOUBLE
2845: LD_INT 1
2847: DEC
2848: ST_TO_ADDR
2849: LD_INT 4
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2931
// begin PrepareHuman ( false , 1 , 2 ) ;
2855: LD_INT 0
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: LD_INT 2
2863: PPUSH
2864: CALL_OW 380
// un := CreateHuman ;
2868: LD_ADDR_VAR 0 3
2872: PUSH
2873: CALL_OW 44
2877: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
2878: LD_VAR 0 3
2882: PPUSH
2883: LD_INT 102
2885: PPUSH
2886: LD_INT 27
2888: PPUSH
2889: LD_INT 4
2891: PPUSH
2892: LD_INT 0
2894: PPUSH
2895: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2899: LD_ADDR_EXP 37
2903: PUSH
2904: LD_EXP 37
2908: PUSH
2909: LD_VAR 0 3
2913: UNION
2914: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2915: LD_VAR 0 3
2919: PPUSH
2920: LD_EXP 35
2924: PPUSH
2925: CALL_OW 119
// end ;
2929: GO 2852
2931: POP
2932: POP
// for i := 1 to 2 do
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: DOUBLE
2939: LD_INT 1
2941: DEC
2942: ST_TO_ADDR
2943: LD_INT 2
2945: PUSH
2946: FOR_TO
2947: IFFALSE 3025
// begin PrepareHuman ( false , 2 , 2 ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 2
2954: PPUSH
2955: LD_INT 2
2957: PPUSH
2958: CALL_OW 380
// un := CreateHuman ;
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: CALL_OW 44
2971: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2972: LD_VAR 0 3
2976: PPUSH
2977: LD_INT 108
2979: PPUSH
2980: LD_INT 62
2982: PPUSH
2983: LD_INT 2
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2993: LD_ADDR_EXP 37
2997: PUSH
2998: LD_EXP 37
3002: PUSH
3003: LD_VAR 0 3
3007: UNION
3008: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
3009: LD_VAR 0 3
3013: PPUSH
3014: LD_EXP 35
3018: PPUSH
3019: CALL_OW 119
// end ;
3023: GO 2946
3025: POP
3026: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
3027: LD_INT 109
3029: PPUSH
3030: LD_INT 63
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: LD_INT 15
3038: NEG
3039: PPUSH
3040: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
3044: LD_INT 109
3046: PPUSH
3047: LD_INT 63
3049: PPUSH
3050: LD_INT 2
3052: PPUSH
3053: CALL_OW 331
// end ;
3057: LD_VAR 0 1
3061: RET
// export function PrepareIbrahim ( x , y ) ; begin
3062: LD_INT 0
3064: PPUSH
// uc_side := 6 ;
3065: LD_ADDR_OWVAR 20
3069: PUSH
3070: LD_INT 6
3072: ST_TO_ADDR
// uc_nation := 3 ;
3073: LD_ADDR_OWVAR 21
3077: PUSH
3078: LD_INT 3
3080: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3081: LD_ADDR_EXP 36
3085: PUSH
3086: LD_STRING IbrahimRu
3088: PPUSH
3089: LD_INT 0
3091: PPUSH
3092: LD_STRING 
3094: PPUSH
3095: CALL 297 0 3
3099: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
3100: LD_EXP 36
3104: PPUSH
3105: LD_VAR 0 1
3109: PPUSH
3110: LD_VAR 0 2
3114: PPUSH
3115: LD_INT 8
3117: PPUSH
3118: LD_INT 1
3120: PPUSH
3121: CALL_OW 50
// end ;
3125: LD_VAR 0 3
3129: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
3130: LD_EXP 35
3134: PUSH
3135: LD_EXP 38
3139: ADD
3140: PPUSH
3141: LD_INT 95
3143: PUSH
3144: LD_INT 3
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 72
3155: IFFALSE 3211
3157: GO 3159
3159: DISABLE
3160: LD_INT 0
3162: PPUSH
// begin enable ;
3163: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
3164: LD_ADDR_VAR 0 1
3168: PUSH
3169: LD_EXP 35
3173: PUSH
3174: LD_EXP 38
3178: ADD
3179: PPUSH
3180: LD_INT 95
3182: PUSH
3183: LD_INT 3
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 72
3194: PUSH
3195: FOR_IN
3196: IFFALSE 3209
// RemoveUnit ( i ) ;
3198: LD_VAR 0 1
3202: PPUSH
3203: CALL_OW 64
3207: GO 3195
3209: POP
3210: POP
// end ;
3211: PPOPN 1
3213: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
3214: LD_EXP 3
3218: PUSH
3219: LD_EXP 34
3223: PPUSH
3224: LD_INT 4
3226: PPUSH
3227: CALL_OW 308
3231: AND
3232: IFFALSE 4015
3234: GO 3236
3236: DISABLE
3237: LD_INT 0
3239: PPUSH
3240: PPUSH
3241: PPUSH
3242: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
3243: LD_EXP 34
3247: PPUSH
3248: LD_INT 110
3250: PPUSH
3251: LD_INT 60
3253: PPUSH
3254: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
3258: LD_EXP 34
3262: PPUSH
3263: LD_INT 110
3265: PPUSH
3266: LD_INT 61
3268: PPUSH
3269: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3273: LD_ADDR_VAR 0 2
3277: PUSH
3278: LD_EXP 37
3282: PPUSH
3283: LD_INT 25
3285: PUSH
3286: LD_INT 1
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: PPUSH
3293: CALL_OW 72
3297: ST_TO_ADDR
// if tmp then
3298: LD_VAR 0 2
3302: IFFALSE 3396
// begin for i := 1 to 2 do
3304: LD_ADDR_VAR 0 1
3308: PUSH
3309: DOUBLE
3310: LD_INT 1
3312: DEC
3313: ST_TO_ADDR
3314: LD_INT 2
3316: PUSH
3317: FOR_TO
3318: IFFALSE 3394
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
3320: LD_VAR 0 2
3324: PUSH
3325: LD_VAR 0 1
3329: ARRAY
3330: PPUSH
3331: LD_INT 5
3333: PPUSH
3334: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
3338: LD_VAR 0 2
3342: PUSH
3343: LD_VAR 0 1
3347: ARRAY
3348: PPUSH
3349: LD_INT 2
3351: PPUSH
3352: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
3356: LD_VAR 0 2
3360: PUSH
3361: LD_VAR 0 1
3365: ARRAY
3366: PPUSH
3367: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
3371: LD_VAR 0 2
3375: PUSH
3376: LD_VAR 0 1
3380: ARRAY
3381: PPUSH
3382: LD_INT 107
3384: PPUSH
3385: LD_INT 66
3387: PPUSH
3388: CALL_OW 171
// end ;
3392: GO 3317
3394: POP
3395: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3396: LD_ADDR_VAR 0 2
3400: PUSH
3401: LD_EXP 37
3405: PPUSH
3406: LD_INT 25
3408: PUSH
3409: LD_INT 2
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 72
3420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3421: LD_INT 35
3423: PPUSH
3424: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3428: LD_ADDR_VAR 0 2
3432: PUSH
3433: LD_EXP 37
3437: PPUSH
3438: LD_INT 25
3440: PUSH
3441: LD_INT 2
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PPUSH
3448: CALL_OW 72
3452: ST_TO_ADDR
// until tmp ;
3453: LD_VAR 0 2
3457: IFFALSE 3421
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
3459: LD_VAR 0 2
3463: PPUSH
3464: LD_INT 31
3466: PPUSH
3467: LD_INT 102
3469: PPUSH
3470: LD_INT 69
3472: PPUSH
3473: LD_INT 2
3475: PPUSH
3476: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
3480: LD_INT 35
3482: PPUSH
3483: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3487: LD_EXP 37
3491: PPUSH
3492: LD_INT 3
3494: PUSH
3495: LD_INT 60
3497: PUSH
3498: EMPTY
3499: LIST
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 25
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 72
3523: IFFALSE 3480
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_EXP 37
3534: PPUSH
3535: LD_INT 25
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 72
3549: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
3550: LD_VAR 0 2
3554: PPUSH
3555: LD_INT 4
3557: PPUSH
3558: LD_INT 116
3560: PPUSH
3561: LD_INT 70
3563: PPUSH
3564: LD_INT 5
3566: PPUSH
3567: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
3571: LD_VAR 0 2
3575: PPUSH
3576: LD_INT 31
3578: PPUSH
3579: LD_INT 108
3581: PPUSH
3582: LD_INT 50
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
3592: LD_INT 35
3594: PPUSH
3595: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
3599: LD_INT 22
3601: PUSH
3602: LD_INT 5
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 30
3611: PUSH
3612: LD_INT 4
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 3
3621: PUSH
3622: LD_INT 57
3624: PUSH
3625: EMPTY
3626: LIST
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: IFFALSE 3592
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: LD_INT 22
3650: PUSH
3651: LD_INT 5
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PUSH
3658: LD_INT 30
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 3
3670: PUSH
3671: LD_INT 57
3673: PUSH
3674: EMPTY
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_INT 1
3693: ARRAY
3694: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3695: LD_ADDR_VAR 0 2
3699: PUSH
3700: LD_EXP 37
3704: PPUSH
3705: LD_INT 25
3707: PUSH
3708: LD_INT 1
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 72
3719: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 3
3729: PPUSH
3730: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3734: LD_INT 35
3736: PPUSH
3737: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
3741: LD_INT 22
3743: PUSH
3744: LD_INT 5
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 30
3753: PUSH
3754: LD_INT 31
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: LD_INT 57
3766: PUSH
3767: EMPTY
3768: LIST
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: LIST
3778: PPUSH
3779: CALL_OW 69
3783: PUSH
3784: LD_INT 2
3786: GREATEREQUAL
3787: IFFALSE 3734
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3789: LD_ADDR_VAR 0 2
3793: PUSH
3794: LD_EXP 37
3798: PPUSH
3799: LD_INT 25
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 72
3813: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 1
3821: ARRAY
3822: PPUSH
3823: LD_INT 5
3825: PPUSH
3826: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
3830: LD_VAR 0 2
3834: PUSH
3835: LD_INT 2
3837: ARRAY
3838: PUSH
3839: LD_VAR 0 2
3843: PUSH
3844: LD_INT 3
3846: ARRAY
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PPUSH
3852: LD_VAR 0 3
3856: PPUSH
3857: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
3861: LD_VAR 0 2
3865: PUSH
3866: LD_INT 2
3868: ARRAY
3869: PUSH
3870: LD_VAR 0 2
3874: PUSH
3875: LD_INT 3
3877: ARRAY
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
3890: LD_VAR 0 2
3894: PUSH
3895: LD_INT 2
3897: ARRAY
3898: PUSH
3899: LD_VAR 0 2
3903: PUSH
3904: LD_INT 3
3906: ARRAY
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PPUSH
3912: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3916: LD_ADDR_VAR 0 4
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 5
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 30
3933: PUSH
3934: LD_INT 31
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 69
3949: ST_TO_ADDR
// for i := 1 to 2 do
3950: LD_ADDR_VAR 0 1
3954: PUSH
3955: DOUBLE
3956: LD_INT 1
3958: DEC
3959: ST_TO_ADDR
3960: LD_INT 2
3962: PUSH
3963: FOR_TO
3964: IFFALSE 3998
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3966: LD_VAR 0 2
3970: PUSH
3971: LD_VAR 0 1
3975: PUSH
3976: LD_INT 1
3978: PLUS
3979: ARRAY
3980: PPUSH
3981: LD_VAR 0 4
3985: PUSH
3986: LD_VAR 0 1
3990: ARRAY
3991: PPUSH
3992: CALL_OW 180
3996: GO 3963
3998: POP
3999: POP
// wait ( 1 1$00 ) ;
4000: LD_INT 2100
4002: PPUSH
4003: CALL_OW 67
// farmerBaseReady := true ;
4007: LD_ADDR_EXP 4
4011: PUSH
4012: LD_INT 1
4014: ST_TO_ADDR
// end ;
4015: PPOPN 4
4017: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
4018: LD_EXP 4
4022: PUSH
4023: LD_EXP 10
4027: NOT
4028: AND
4029: IFFALSE 4551
4031: GO 4033
4033: DISABLE
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
4040: PPUSH
// begin enable ;
4041: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
4042: LD_ADDR_VAR 0 3
4046: PUSH
4047: LD_EXP 37
4051: PPUSH
4052: LD_INT 25
4054: PUSH
4055: LD_INT 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PPUSH
4062: CALL_OW 72
4066: PUSH
4067: LD_EXP 34
4071: ADD
4072: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
4073: LD_ADDR_VAR 0 2
4077: PUSH
4078: LD_EXP 37
4082: PPUSH
4083: LD_INT 25
4085: PUSH
4086: LD_INT 2
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 72
4097: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4098: LD_ADDR_VAR 0 5
4102: PUSH
4103: LD_INT 22
4105: PUSH
4106: LD_INT 5
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 21
4115: PUSH
4116: LD_INT 3
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 24
4128: PUSH
4129: LD_INT 1000
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: PPUSH
4145: CALL_OW 69
4149: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
4150: LD_ADDR_VAR 0 4
4154: PUSH
4155: LD_INT 22
4157: PUSH
4158: LD_INT 5
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 30
4167: PUSH
4168: LD_INT 4
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 69
4183: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
4184: LD_VAR 0 4
4188: PUSH
4189: LD_INT 1
4191: ARRAY
4192: PPUSH
4193: CALL_OW 302
4197: IFFALSE 4261
// for i in sol do
4199: LD_ADDR_VAR 0 1
4203: PUSH
4204: LD_VAR 0 3
4208: PUSH
4209: FOR_IN
4210: IFFALSE 4259
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 256
4221: PUSH
4222: LD_INT 999
4224: LESS
4225: PUSH
4226: LD_VAR 0 1
4230: PPUSH
4231: CALL_OW 310
4235: NOT
4236: AND
4237: IFFALSE 4257
// ComEnterUnit ( i , arm [ 1 ] ) ;
4239: LD_VAR 0 1
4243: PPUSH
4244: LD_VAR 0 4
4248: PUSH
4249: LD_INT 1
4251: ARRAY
4252: PPUSH
4253: CALL_OW 120
4257: GO 4209
4259: POP
4260: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
4261: LD_VAR 0 2
4265: NOT
4266: PUSH
4267: LD_INT 22
4269: PUSH
4270: LD_INT 1
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: LD_INT 21
4279: PUSH
4280: LD_INT 1
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PPUSH
4291: CALL_OW 69
4295: NOT
4296: AND
4297: IFFALSE 4389
// begin uc_side := 5 ;
4299: LD_ADDR_OWVAR 20
4303: PUSH
4304: LD_INT 5
4306: ST_TO_ADDR
// uc_nation := 2 ;
4307: LD_ADDR_OWVAR 21
4311: PUSH
4312: LD_INT 2
4314: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
4315: LD_INT 0
4317: PPUSH
4318: LD_INT 2
4320: PPUSH
4321: LD_INT 2
4323: PPUSH
4324: CALL_OW 380
// eng := CreateHuman ;
4328: LD_ADDR_VAR 0 2
4332: PUSH
4333: CALL_OW 44
4337: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
4338: LD_VAR 0 2
4342: PPUSH
4343: LD_INT 102
4345: PPUSH
4346: LD_INT 8
4348: PPUSH
4349: LD_INT 0
4351: PPUSH
4352: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
4356: LD_VAR 0 2
4360: PPUSH
4361: LD_INT 110
4363: PPUSH
4364: LD_INT 60
4366: PPUSH
4367: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
4371: LD_ADDR_EXP 37
4375: PUSH
4376: LD_EXP 37
4380: PUSH
4381: LD_VAR 0 2
4385: UNION
4386: ST_TO_ADDR
// end else
4387: GO 4551
// begin for i in eng do
4389: LD_ADDR_VAR 0 1
4393: PUSH
4394: LD_VAR 0 2
4398: PUSH
4399: FOR_IN
4400: IFFALSE 4549
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
4402: LD_INT 10
4404: PPUSH
4405: LD_INT 1
4407: PPUSH
4408: CALL_OW 287
4412: IFFALSE 4463
// begin if IsInUnit ( i ) then
4414: LD_VAR 0 1
4418: PPUSH
4419: CALL_OW 310
4423: IFFALSE 4434
// ComExitBuilding ( i ) ;
4425: LD_VAR 0 1
4429: PPUSH
4430: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 10
4441: PPUSH
4442: CALL_OW 308
4446: NOT
4447: IFFALSE 4461
// AddComMoveToArea ( i , collectFarmerArea ) ;
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 10
4456: PPUSH
4457: CALL_OW 173
// end else
4461: GO 4547
// begin if damagedBuilding then
4463: LD_VAR 0 5
4467: IFFALSE 4511
// begin if IsInUnit ( i ) then
4469: LD_VAR 0 1
4473: PPUSH
4474: CALL_OW 310
4478: IFFALSE 4491
// ComExitBuilding ( i ) else
4480: LD_VAR 0 1
4484: PPUSH
4485: CALL_OW 122
4489: GO 4509
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_VAR 0 5
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: CALL_OW 130
// end else
4509: GO 4547
// if not IsInUnit ( i ) and not HasTask ( i ) then
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 310
4520: NOT
4521: PUSH
4522: LD_VAR 0 1
4526: PPUSH
4527: CALL_OW 314
4531: NOT
4532: AND
4533: IFFALSE 4547
// ComEnterUnit ( i , arDepot ) ;
4535: LD_VAR 0 1
4539: PPUSH
4540: LD_INT 5
4542: PPUSH
4543: CALL_OW 120
// end ; end ;
4547: GO 4399
4549: POP
4550: POP
// end ; end ;
4551: PPOPN 5
4553: END
// export function StartCargoEvacuation ; begin
4554: LD_INT 0
4556: PPUSH
// while omarCargoCounter > 0 do
4557: LD_EXP 19
4561: PUSH
4562: LD_INT 0
4564: GREATER
4565: IFFALSE 4882
// begin wait ( 0 0$40 ) ;
4567: LD_INT 1400
4569: PPUSH
4570: CALL_OW 67
// omarCargo := PrepareCargo ;
4574: LD_ADDR_EXP 41
4578: PUSH
4579: CALL 4887 0 0
4583: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
4584: LD_EXP 41
4588: PPUSH
4589: LD_INT 0
4591: PPUSH
4592: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4596: LD_EXP 41
4600: PPUSH
4601: LD_INT 107
4603: PPUSH
4604: LD_INT 59
4606: PPUSH
4607: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4611: LD_INT 35
4613: PPUSH
4614: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4618: LD_EXP 41
4622: PPUSH
4623: LD_INT 107
4625: PPUSH
4626: LD_INT 59
4628: PPUSH
4629: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4633: LD_EXP 41
4637: PPUSH
4638: CALL_OW 302
4642: NOT
4643: PUSH
4644: LD_EXP 41
4648: PPUSH
4649: CALL_OW 301
4653: OR
4654: IFFALSE 4658
// continue ;
4656: GO 4611
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
4658: LD_EXP 41
4662: PPUSH
4663: LD_INT 107
4665: PPUSH
4666: LD_INT 59
4668: PPUSH
4669: CALL_OW 307
4673: PUSH
4674: LD_EXP 41
4678: PPUSH
4679: LD_INT 5
4681: PPUSH
4682: CALL_OW 296
4686: PUSH
4687: LD_INT 6
4689: LESS
4690: OR
4691: IFFALSE 4611
// SetTag ( omarCargo , 1 ) ;
4693: LD_EXP 41
4697: PPUSH
4698: LD_INT 1
4700: PPUSH
4701: CALL_OW 109
// wait ( 0 0$05 ) ;
4705: LD_INT 175
4707: PPUSH
4708: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
4712: LD_EXP 41
4716: PPUSH
4717: LD_INT 5
4719: PPUSH
4720: LD_INT 1
4722: PPUSH
4723: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
4727: LD_EXP 41
4731: PPUSH
4732: LD_INT 103
4734: PPUSH
4735: LD_INT 9
4737: PPUSH
4738: CALL_OW 171
// wait ( 0 0$1 ) ;
4742: LD_INT 35
4744: PPUSH
4745: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
4749: LD_EXP 41
4753: PPUSH
4754: LD_INT 1
4756: PPUSH
4757: LD_INT 100
4759: PPUSH
4760: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
4764: LD_INT 35
4766: PPUSH
4767: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
4771: LD_EXP 41
4775: PPUSH
4776: LD_INT 103
4778: PPUSH
4779: LD_INT 9
4781: PPUSH
4782: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4786: LD_EXP 41
4790: PPUSH
4791: CALL_OW 302
4795: NOT
4796: PUSH
4797: LD_EXP 41
4801: PPUSH
4802: CALL_OW 301
4806: OR
4807: IFFALSE 4811
// continue ;
4809: GO 4764
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
4811: LD_EXP 41
4815: PPUSH
4816: LD_INT 103
4818: PPUSH
4819: LD_INT 9
4821: PPUSH
4822: CALL_OW 307
4826: PUSH
4827: LD_EXP 41
4831: PPUSH
4832: LD_INT 3
4834: PPUSH
4835: CALL_OW 308
4839: OR
4840: PUSH
4841: LD_EXP 41
4845: PPUSH
4846: CALL_OW 110
4850: PUSH
4851: LD_INT 0
4853: GREATER
4854: AND
4855: IFFALSE 4764
// RemoveUnit ( omarCargo ) ;
4857: LD_EXP 41
4861: PPUSH
4862: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
4866: LD_ADDR_EXP 19
4870: PUSH
4871: LD_EXP 19
4875: PUSH
4876: LD_INT 1
4878: MINUS
4879: ST_TO_ADDR
// end ;
4880: GO 4557
// end ;
4882: LD_VAR 0 1
4886: RET
// export function PrepareCargo ; var un , veh ; begin
4887: LD_INT 0
4889: PPUSH
4890: PPUSH
4891: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4892: LD_ADDR_VAR 0 3
4896: PUSH
4897: LD_INT 5
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: LD_INT 13
4905: PPUSH
4906: LD_INT 1
4908: PPUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 32
4914: PPUSH
4915: LD_INT 80
4917: PPUSH
4918: CALL 360 0 7
4922: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4923: LD_VAR 0 3
4927: PPUSH
4928: LD_INT 4
4930: PPUSH
4931: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 101
4942: PPUSH
4943: LD_INT 8
4945: PPUSH
4946: LD_INT 0
4948: PPUSH
4949: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4953: LD_INT 0
4955: PPUSH
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 2
4961: PPUSH
4962: CALL_OW 380
// un := CreateHuman ;
4966: LD_ADDR_VAR 0 2
4970: PUSH
4971: CALL_OW 44
4975: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4976: LD_VAR 0 2
4980: PPUSH
4981: LD_VAR 0 3
4985: PPUSH
4986: CALL_OW 52
// result := veh ;
4990: LD_ADDR_VAR 0 1
4994: PUSH
4995: LD_VAR 0 3
4999: ST_TO_ADDR
// end ; end_of_file
5000: LD_VAR 0 1
5004: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
5005: LD_INT 0
5007: PPUSH
5008: PPUSH
5009: PPUSH
// usForces := [ ] ;
5010: LD_ADDR_EXP 42
5014: PUSH
5015: EMPTY
5016: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
5017: LD_ADDR_EXP 44
5021: PUSH
5022: LD_INT 6
5024: PUSH
5025: LD_INT 32
5027: PUSH
5028: LD_INT 27
5030: PUSH
5031: LD_INT 1
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 4
5042: PUSH
5043: LD_INT 43
5045: PUSH
5046: LD_INT 24
5048: PUSH
5049: LD_INT 5
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PUSH
5058: LD_INT 27
5060: PUSH
5061: LD_INT 29
5063: PUSH
5064: LD_INT 21
5066: PUSH
5067: LD_INT 0
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: LIST
5080: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
5081: LD_INT 11
5083: PPUSH
5084: CALL_OW 274
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: LD_INT 150
5094: PUSH
5095: LD_INT 120
5097: PUSH
5098: LD_INT 100
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: PUSH
5106: LD_OWVAR 67
5110: ARRAY
5111: PPUSH
5112: CALL_OW 277
// if Difficulty = 1 then
5116: LD_OWVAR 67
5120: PUSH
5121: LD_INT 1
5123: EQUAL
5124: IFFALSE 5133
// RemoveUnit ( hillBun ) ;
5126: LD_INT 14
5128: PPUSH
5129: CALL_OW 64
// uc_side := 1 ;
5133: LD_ADDR_OWVAR 20
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// uc_nation := 1 ;
5141: LD_ADDR_OWVAR 21
5145: PUSH
5146: LD_INT 1
5148: ST_TO_ADDR
// hc_gallery :=  ;
5149: LD_ADDR_OWVAR 33
5153: PUSH
5154: LD_STRING 
5156: ST_TO_ADDR
// hc_name :=  ;
5157: LD_ADDR_OWVAR 26
5161: PUSH
5162: LD_STRING 
5164: ST_TO_ADDR
// hc_importance := 0 ;
5165: LD_ADDR_OWVAR 32
5169: PUSH
5170: LD_INT 0
5172: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
5173: LD_INT 1
5175: PPUSH
5176: LD_INT 1
5178: PPUSH
5179: LD_INT 3
5181: PPUSH
5182: CALL_OW 380
// usCommander := CreateHuman ;
5186: LD_ADDR_EXP 43
5190: PUSH
5191: CALL_OW 44
5195: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
5196: LD_EXP 43
5200: PPUSH
5201: LD_INT 11
5203: PPUSH
5204: CALL_OW 52
// if Difficulty > 1 then
5208: LD_OWVAR 67
5212: PUSH
5213: LD_INT 1
5215: GREATER
5216: IFFALSE 5298
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 1
5226: PUSH
5227: LD_INT 2
5229: PUSH
5230: LD_INT 3
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: PUSH
5238: LD_OWVAR 67
5242: ARRAY
5243: PPUSH
5244: CALL_OW 380
// un := CreateHuman ;
5248: LD_ADDR_VAR 0 3
5252: PUSH
5253: CALL_OW 44
5257: ST_TO_ADDR
// usForces := usForces union un ;
5258: LD_ADDR_EXP 42
5262: PUSH
5263: LD_EXP 42
5267: PUSH
5268: LD_VAR 0 3
5272: UNION
5273: ST_TO_ADDR
// SetDir ( un , 1 ) ;
5274: LD_VAR 0 3
5278: PPUSH
5279: LD_INT 1
5281: PPUSH
5282: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
5286: LD_VAR 0 3
5290: PPUSH
5291: LD_INT 14
5293: PPUSH
5294: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5298: LD_ADDR_VAR 0 2
5302: PUSH
5303: DOUBLE
5304: LD_INT 1
5306: DEC
5307: ST_TO_ADDR
5308: LD_INT 2
5310: PUSH
5311: LD_INT 3
5313: PUSH
5314: LD_INT 4
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: LD_OWVAR 67
5326: ARRAY
5327: PUSH
5328: FOR_TO
5329: IFFALSE 5471
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5331: LD_INT 0
5333: PPUSH
5334: LD_INT 1
5336: PPUSH
5337: LD_INT 1
5339: PUSH
5340: LD_INT 2
5342: PUSH
5343: LD_INT 3
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: PUSH
5351: LD_OWVAR 67
5355: ARRAY
5356: PPUSH
5357: CALL_OW 380
// un := CreateHuman ;
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: CALL_OW 44
5370: ST_TO_ADDR
// usForces := usForces union un ;
5371: LD_ADDR_EXP 42
5375: PUSH
5376: LD_EXP 42
5380: PUSH
5381: LD_VAR 0 3
5385: UNION
5386: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_INT 39
5394: PPUSH
5395: LD_INT 24
5397: PPUSH
5398: LD_INT 4
5400: PPUSH
5401: LD_INT 0
5403: PPUSH
5404: CALL_OW 50
// if i < 3 then
5408: LD_VAR 0 2
5412: PUSH
5413: LD_INT 3
5415: LESS
5416: IFFALSE 5469
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
5418: LD_VAR 0 3
5422: PPUSH
5423: LD_INT 22
5425: PUSH
5426: LD_INT 1
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 58
5435: PUSH
5436: EMPTY
5437: LIST
5438: PUSH
5439: LD_INT 30
5441: PUSH
5442: LD_INT 31
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: PPUSH
5454: CALL_OW 69
5458: PUSH
5459: LD_VAR 0 2
5463: ARRAY
5464: PPUSH
5465: CALL_OW 120
// end ;
5469: GO 5328
5471: POP
5472: POP
// for i := 1 to 2 do
5473: LD_ADDR_VAR 0 2
5477: PUSH
5478: DOUBLE
5479: LD_INT 1
5481: DEC
5482: ST_TO_ADDR
5483: LD_INT 2
5485: PUSH
5486: FOR_TO
5487: IFFALSE 5551
// begin PrepareHuman ( false , 2 , 2 ) ;
5489: LD_INT 0
5491: PPUSH
5492: LD_INT 2
5494: PPUSH
5495: LD_INT 2
5497: PPUSH
5498: CALL_OW 380
// un := CreateHuman ;
5502: LD_ADDR_VAR 0 3
5506: PUSH
5507: CALL_OW 44
5511: ST_TO_ADDR
// usForces := usForces union un ;
5512: LD_ADDR_EXP 42
5516: PUSH
5517: LD_EXP 42
5521: PUSH
5522: LD_VAR 0 3
5526: UNION
5527: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5528: LD_VAR 0 3
5532: PPUSH
5533: LD_INT 39
5535: PPUSH
5536: LD_INT 24
5538: PPUSH
5539: LD_INT 4
5541: PPUSH
5542: LD_INT 0
5544: PPUSH
5545: CALL_OW 50
// end ;
5549: GO 5486
5551: POP
5552: POP
// PrepareHuman ( false , 4 , 1 ) ;
5553: LD_INT 0
5555: PPUSH
5556: LD_INT 4
5558: PPUSH
5559: LD_INT 1
5561: PPUSH
5562: CALL_OW 380
// un := CreateHuman ;
5566: LD_ADDR_VAR 0 3
5570: PUSH
5571: CALL_OW 44
5575: ST_TO_ADDR
// usForces := usForces union un ;
5576: LD_ADDR_EXP 42
5580: PUSH
5581: LD_EXP 42
5585: PUSH
5586: LD_VAR 0 3
5590: UNION
5591: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5592: LD_VAR 0 3
5596: PPUSH
5597: LD_INT 39
5599: PPUSH
5600: LD_INT 24
5602: PPUSH
5603: LD_INT 4
5605: PPUSH
5606: LD_INT 0
5608: PPUSH
5609: CALL_OW 50
// end ;
5613: LD_VAR 0 1
5617: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
5618: LD_EXP 42
5622: PUSH
5623: LD_EXP 6
5627: NOT
5628: AND
5629: IFFALSE 6060
5631: GO 5633
5633: DISABLE
5634: LD_INT 0
5636: PPUSH
5637: PPUSH
5638: PPUSH
5639: PPUSH
5640: PPUSH
// begin enable ;
5641: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
5642: LD_ADDR_VAR 0 3
5646: PUSH
5647: LD_EXP 42
5651: PPUSH
5652: LD_INT 25
5654: PUSH
5655: LD_INT 2
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PPUSH
5662: CALL_OW 72
5666: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
5667: LD_ADDR_VAR 0 4
5671: PUSH
5672: LD_EXP 42
5676: PPUSH
5677: LD_INT 25
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PPUSH
5687: CALL_OW 72
5691: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
5692: LD_ADDR_VAR 0 5
5696: PUSH
5697: LD_EXP 42
5701: PPUSH
5702: LD_INT 25
5704: PUSH
5705: LD_INT 4
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 72
5716: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
5717: LD_INT 7
5719: PPUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 2
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 70
5734: PUSH
5735: LD_INT 1
5737: EQUAL
5738: IFFALSE 5814
// for i in sol do
5740: LD_ADDR_VAR 0 1
5744: PUSH
5745: LD_VAR 0 4
5749: PUSH
5750: FOR_IN
5751: IFFALSE 5812
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 310
5762: NOT
5763: PUSH
5764: LD_VAR 0 1
5768: PPUSH
5769: CALL_OW 310
5773: PPUSH
5774: CALL_OW 266
5778: PUSH
5779: LD_INT 4
5781: EQUAL
5782: NOT
5783: OR
5784: IFFALSE 5810
// begin ComExitBuilding ( i ) ;
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
5795: LD_VAR 0 1
5799: PPUSH
5800: LD_INT 37
5802: PPUSH
5803: LD_INT 23
5805: PPUSH
5806: CALL_OW 174
// end ;
5810: GO 5750
5812: POP
5813: POP
// if eng then
5814: LD_VAR 0 3
5818: IFFALSE 6060
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5820: LD_ADDR_VAR 0 2
5824: PUSH
5825: LD_INT 22
5827: PUSH
5828: LD_INT 1
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 95
5837: PUSH
5838: LD_INT 7
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 21
5847: PUSH
5848: LD_INT 3
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: LD_INT 3
5857: PUSH
5858: LD_INT 24
5860: PUSH
5861: LD_INT 1000
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 69
5882: ST_TO_ADDR
// if b then
5883: LD_VAR 0 2
5887: IFFALSE 5918
// begin ComExitBuilding ( eng ) ;
5889: LD_VAR 0 3
5893: PPUSH
5894: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5898: LD_VAR 0 3
5902: PPUSH
5903: LD_VAR 0 2
5907: PUSH
5908: LD_INT 1
5910: ARRAY
5911: PPUSH
5912: CALL_OW 190
// end else
5916: GO 6060
// begin for i in eng do
5918: LD_ADDR_VAR 0 1
5922: PUSH
5923: LD_VAR 0 3
5927: PUSH
5928: FOR_IN
5929: IFFALSE 6058
// if not HasTask ( i ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 314
5940: NOT
5941: IFFALSE 6056
// begin if americanBuildList then
5943: LD_EXP 44
5947: IFFALSE 6032
// begin if IsInUnit ( i ) then
5949: LD_VAR 0 1
5953: PPUSH
5954: CALL_OW 310
5958: IFFALSE 5969
// ComExitBuilding ( i ) ;
5960: LD_VAR 0 1
5964: PPUSH
5965: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5969: LD_VAR 0 1
5973: PPUSH
5974: LD_EXP 44
5978: PUSH
5979: LD_INT 1
5981: ARRAY
5982: PUSH
5983: LD_INT 1
5985: ARRAY
5986: PPUSH
5987: LD_EXP 44
5991: PUSH
5992: LD_INT 1
5994: ARRAY
5995: PUSH
5996: LD_INT 2
5998: ARRAY
5999: PPUSH
6000: LD_EXP 44
6004: PUSH
6005: LD_INT 1
6007: ARRAY
6008: PUSH
6009: LD_INT 3
6011: ARRAY
6012: PPUSH
6013: LD_EXP 44
6017: PUSH
6018: LD_INT 1
6020: ARRAY
6021: PUSH
6022: LD_INT 4
6024: ARRAY
6025: PPUSH
6026: CALL_OW 205
// end else
6030: GO 6056
// if not IsInUnit ( i ) then
6032: LD_VAR 0 1
6036: PPUSH
6037: CALL_OW 310
6041: NOT
6042: IFFALSE 6056
// ComEnterUnit ( i , usDepot ) ;
6044: LD_VAR 0 1
6048: PPUSH
6049: LD_INT 11
6051: PPUSH
6052: CALL_OW 120
// end ;
6056: GO 5928
6058: POP
6059: POP
// end ; end ; end ;
6060: PPOPN 5
6062: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
6063: LD_INT 0
6065: PPUSH
6066: PPUSH
6067: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
6068: LD_ADDR_VAR 0 3
6072: PUSH
6073: LD_INT 35
6075: PUSH
6076: LD_INT 45
6078: PUSH
6079: LD_INT 48
6081: PUSH
6082: LD_EXP 54
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: ST_TO_ADDR
// for i in tech do
6093: LD_ADDR_VAR 0 4
6097: PUSH
6098: LD_VAR 0 3
6102: PUSH
6103: FOR_IN
6104: IFFALSE 6122
// AddComResearch ( lab , i ) ;
6106: LD_VAR 0 1
6110: PPUSH
6111: LD_VAR 0 4
6115: PPUSH
6116: CALL_OW 184
6120: GO 6103
6122: POP
6123: POP
// end ;
6124: LD_VAR 0 2
6128: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
6129: LD_EXP 11
6133: PUSH
6134: LD_EXP 21
6138: PUSH
6139: LD_EXP 25
6143: LESSEQUAL
6144: AND
6145: IFFALSE 6170
6147: GO 6149
6149: DISABLE
// begin enable ;
6150: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
6151: LD_INT 35
6153: PPUSH
6154: LD_INT 2065
6156: PPUSH
6157: CALL_OW 12
6161: PPUSH
6162: CALL_OW 67
// SendConvoy ;
6166: CALL 6268 0 0
// end ;
6170: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
6171: LD_EXP 6
6175: PUSH
6176: LD_EXP 16
6180: AND
6181: IFFALSE 6267
6183: GO 6185
6185: DISABLE
// begin if americanHasEscaped then
6186: LD_EXP 7
6190: IFFALSE 6201
// wait ( 3 3$20 ) else
6192: LD_INT 7000
6194: PPUSH
6195: CALL_OW 67
6199: GO 6208
// wait ( 6 6$40 ) ;
6201: LD_INT 14000
6203: PPUSH
6204: CALL_OW 67
// SendAttack ;
6208: CALL 7011 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
6212: LD_INT 14000
6214: PUSH
6215: LD_INT 11900
6217: PUSH
6218: LD_INT 9800
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: PUSH
6226: LD_OWVAR 67
6230: ARRAY
6231: PPUSH
6232: CALL_OW 67
// SendAttack ;
6236: CALL 7011 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
6240: LD_EXP 17
6244: PUSH
6245: LD_INT 6
6247: PUSH
6248: LD_INT 7
6250: PUSH
6251: LD_INT 8
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 67
6263: ARRAY
6264: LESS
6265: IFFALSE 6212
// end ;
6267: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
6268: LD_INT 0
6270: PPUSH
6271: PPUSH
6272: PPUSH
6273: PPUSH
6274: PPUSH
6275: PPUSH
6276: PPUSH
6277: PPUSH
// road := rand ( 1 , 2 ) ;
6278: LD_ADDR_VAR 0 4
6282: PUSH
6283: LD_INT 1
6285: PPUSH
6286: LD_INT 2
6288: PPUSH
6289: CALL_OW 12
6293: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
6294: LD_ADDR_VAR 0 8
6298: PUSH
6299: LD_INT 3
6301: PUSH
6302: LD_INT 8
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 4
6313: ARRAY
6314: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
6315: LD_ADDR_VAR 0 5
6319: PUSH
6320: LD_INT 35
6322: PUSH
6323: LD_INT 66
6325: PUSH
6326: LD_INT 1
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 101
6336: PUSH
6337: LD_INT 8
6339: PUSH
6340: LD_INT 4
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
6352: LD_ADDR_VAR 0 6
6356: PUSH
6357: LD_INT 34
6359: PUSH
6360: LD_INT 67
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 38
6369: PUSH
6370: LD_INT 62
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 43
6379: PUSH
6380: LD_INT 54
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 57
6389: PUSH
6390: LD_INT 57
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 77
6399: PUSH
6400: LD_INT 71
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 86
6409: PUSH
6410: LD_INT 60
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 89
6419: PUSH
6420: LD_INT 35
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 93
6429: PUSH
6430: LD_INT 17
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 97
6439: PUSH
6440: LD_INT 10
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 103
6449: PUSH
6450: LD_INT 9
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: ST_TO_ADDR
// if road = 2 then
6469: LD_VAR 0 4
6473: PUSH
6474: LD_INT 2
6476: EQUAL
6477: IFFALSE 6494
// points := ReverseArray ( points ) ;
6479: LD_ADDR_VAR 0 6
6483: PUSH
6484: LD_VAR 0 6
6488: PPUSH
6489: CALL 1048 0 1
6493: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
6494: LD_INT 4
6496: PPUSH
6497: LD_INT 1
6499: PPUSH
6500: LD_INT 2
6502: PPUSH
6503: LD_INT 1
6505: PPUSH
6506: LD_INT 1
6508: PPUSH
6509: LD_INT 12
6511: PPUSH
6512: LD_INT 80
6514: PPUSH
6515: CALL 360 0 7
// veh := CreateVehicle ;
6519: LD_ADDR_VAR 0 3
6523: PUSH
6524: CALL_OW 45
6528: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
6529: LD_VAR 0 3
6533: PPUSH
6534: LD_VAR 0 5
6538: PUSH
6539: LD_VAR 0 4
6543: ARRAY
6544: PUSH
6545: LD_INT 3
6547: ARRAY
6548: PPUSH
6549: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_VAR 0 5
6562: PUSH
6563: LD_VAR 0 4
6567: ARRAY
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: LD_VAR 0 5
6577: PUSH
6578: LD_VAR 0 4
6582: ARRAY
6583: PUSH
6584: LD_INT 2
6586: ARRAY
6587: PPUSH
6588: LD_INT 0
6590: PPUSH
6591: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
6595: LD_INT 0
6597: PPUSH
6598: LD_INT 1
6600: PPUSH
6601: LD_OWVAR 67
6605: PPUSH
6606: CALL_OW 380
// un := CreateHuman ;
6610: LD_ADDR_VAR 0 2
6614: PUSH
6615: CALL_OW 44
6619: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6620: LD_VAR 0 2
6624: PPUSH
6625: LD_VAR 0 3
6629: PPUSH
6630: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
6634: LD_INT 60
6636: PUSH
6637: LD_INT 56
6639: PUSH
6640: LD_INT 52
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: LD_OWVAR 67
6652: ARRAY
6653: PPUSH
6654: CALL_OW 13
6658: PUSH
6659: LD_OWVAR 1
6663: PUSH
6664: LD_INT 30
6666: MOD
6667: PLUS
6668: PUSH
6669: LD_EXP 21
6673: PUSH
6674: LD_INT 4
6676: LESS
6677: OR
6678: IFFALSE 6695
// SetCargo ( veh , mat_cans , 100 ) ;
6680: LD_VAR 0 3
6684: PPUSH
6685: LD_INT 1
6687: PPUSH
6688: LD_INT 100
6690: PPUSH
6691: CALL_OW 290
// for i := 2 to points do
6695: LD_ADDR_VAR 0 7
6699: PUSH
6700: DOUBLE
6701: LD_INT 2
6703: DEC
6704: ST_TO_ADDR
6705: LD_VAR 0 6
6709: PUSH
6710: FOR_TO
6711: IFFALSE 6754
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
6713: LD_VAR 0 3
6717: PPUSH
6718: LD_VAR 0 6
6722: PUSH
6723: LD_VAR 0 7
6727: ARRAY
6728: PUSH
6729: LD_INT 1
6731: ARRAY
6732: PPUSH
6733: LD_VAR 0 6
6737: PUSH
6738: LD_VAR 0 7
6742: ARRAY
6743: PUSH
6744: LD_INT 2
6746: ARRAY
6747: PPUSH
6748: CALL_OW 171
6752: GO 6710
6754: POP
6755: POP
// convoyCounter := convoyCounter + 1 ;
6756: LD_ADDR_EXP 21
6760: PUSH
6761: LD_EXP 21
6765: PUSH
6766: LD_INT 1
6768: PLUS
6769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6770: LD_INT 35
6772: PPUSH
6773: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
6777: LD_VAR 0 3
6781: PPUSH
6782: CALL_OW 314
6786: NOT
6787: PUSH
6788: LD_VAR 0 3
6792: PPUSH
6793: CALL_OW 302
6797: AND
6798: IFFALSE 6839
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6800: LD_VAR 0 3
6804: PPUSH
6805: LD_VAR 0 6
6809: PUSH
6810: LD_VAR 0 6
6814: ARRAY
6815: PUSH
6816: LD_INT 1
6818: ARRAY
6819: PPUSH
6820: LD_VAR 0 6
6824: PUSH
6825: LD_VAR 0 6
6829: ARRAY
6830: PUSH
6831: LD_INT 2
6833: ARRAY
6834: PPUSH
6835: CALL_OW 111
// if not IsInUnit ( un ) then
6839: LD_VAR 0 2
6843: PPUSH
6844: CALL_OW 310
6848: NOT
6849: IFFALSE 6890
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6851: LD_VAR 0 2
6855: PPUSH
6856: LD_VAR 0 6
6860: PUSH
6861: LD_VAR 0 6
6865: ARRAY
6866: PUSH
6867: LD_INT 1
6869: ARRAY
6870: PPUSH
6871: LD_VAR 0 6
6875: PUSH
6876: LD_VAR 0 6
6880: ARRAY
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6890: LD_VAR 0 3
6894: PPUSH
6895: LD_VAR 0 8
6899: PPUSH
6900: CALL_OW 308
6904: PUSH
6905: LD_VAR 0 2
6909: PPUSH
6910: LD_VAR 0 8
6914: PPUSH
6915: CALL_OW 308
6919: OR
6920: IFFALSE 6770
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6922: LD_VAR 0 2
6926: PPUSH
6927: CALL_OW 302
6931: PUSH
6932: LD_VAR 0 3
6936: PPUSH
6937: CALL_OW 302
6941: NOT
6942: AND
6943: PUSH
6944: LD_VAR 0 2
6948: PPUSH
6949: LD_VAR 0 8
6953: PPUSH
6954: CALL_OW 308
6958: AND
6959: IFFALSE 6970
// RemoveUnit ( un ) ;
6961: LD_VAR 0 2
6965: PPUSH
6966: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6970: LD_VAR 0 3
6974: PPUSH
6975: LD_VAR 0 8
6979: PPUSH
6980: CALL_OW 308
6984: PUSH
6985: LD_VAR 0 3
6989: PPUSH
6990: CALL_OW 302
6994: AND
6995: IFFALSE 7006
// RemoveUnit ( veh ) ;
6997: LD_VAR 0 3
7001: PPUSH
7002: CALL_OW 64
// end ;
7006: LD_VAR 0 1
7010: RET
// export function SendAttack ; var un , veh , i ; begin
7011: LD_INT 0
7013: PPUSH
7014: PPUSH
7015: PPUSH
7016: PPUSH
// IncomingAttack ;
7017: CALL 15480 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
7021: LD_INT 2100
7023: PPUSH
7024: LD_INT 3500
7026: PPUSH
7027: CALL_OW 12
7031: PPUSH
7032: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
7036: LD_ADDR_VAR 0 4
7040: PUSH
7041: DOUBLE
7042: LD_INT 1
7044: DEC
7045: ST_TO_ADDR
7046: LD_INT 3
7048: PUSH
7049: LD_INT 4
7051: PUSH
7052: LD_INT 4
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: LD_OWVAR 67
7064: ARRAY
7065: PUSH
7066: LD_EXP 17
7070: PUSH
7071: LD_INT 3
7073: DIV
7074: PLUS
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7189
// begin uc_side := 1 ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_INT 1
7086: ST_TO_ADDR
// uc_nation := 1 ;
7087: LD_ADDR_OWVAR 21
7091: PUSH
7092: LD_INT 1
7094: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_INT 1
7100: PPUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 3
7106: PUSH
7107: LD_INT 4
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: ARRAY
7120: PPUSH
7121: CALL_OW 380
// un := CreateHuman ;
7125: LD_ADDR_VAR 0 2
7129: PUSH
7130: CALL_OW 44
7134: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7135: LD_VAR 0 2
7139: PPUSH
7140: LD_INT 37
7142: PPUSH
7143: LD_INT 70
7145: PPUSH
7146: LD_INT 3
7148: PPUSH
7149: LD_INT 0
7151: PPUSH
7152: CALL_OW 50
// usAttackers := usAttackers union un ;
7156: LD_ADDR_EXP 45
7160: PUSH
7161: LD_EXP 45
7165: PUSH
7166: LD_VAR 0 2
7170: UNION
7171: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7172: LD_VAR 0 2
7176: PPUSH
7177: LD_INT 40
7179: PPUSH
7180: LD_INT 65
7182: PPUSH
7183: CALL_OW 111
// end ;
7187: GO 7076
7189: POP
7190: POP
// uc_side := 1 ;
7191: LD_ADDR_OWVAR 20
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// uc_nation := 1 ;
7199: LD_ADDR_OWVAR 21
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
7207: LD_INT 0
7209: PPUSH
7210: LD_INT 4
7212: PPUSH
7213: LD_INT 2
7215: PPUSH
7216: CALL_OW 380
// un := CreateHuman ;
7220: LD_ADDR_VAR 0 2
7224: PUSH
7225: CALL_OW 44
7229: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7230: LD_VAR 0 2
7234: PPUSH
7235: LD_INT 37
7237: PPUSH
7238: LD_INT 70
7240: PPUSH
7241: LD_INT 3
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 50
// usAttackers := usAttackers union un ;
7251: LD_ADDR_EXP 45
7255: PUSH
7256: LD_EXP 45
7260: PUSH
7261: LD_VAR 0 2
7265: UNION
7266: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7267: LD_VAR 0 2
7271: PPUSH
7272: LD_INT 40
7274: PPUSH
7275: LD_INT 65
7277: PPUSH
7278: CALL_OW 111
// if attackWave > 1 or Difficulty > 1 then
7282: LD_EXP 17
7286: PUSH
7287: LD_INT 1
7289: GREATER
7290: PUSH
7291: LD_OWVAR 67
7295: PUSH
7296: LD_INT 1
7298: GREATER
7299: OR
7300: IFFALSE 7503
// begin for i := 1 to Difficulty + attackWave div 4 do
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: DOUBLE
7308: LD_INT 1
7310: DEC
7311: ST_TO_ADDR
7312: LD_OWVAR 67
7316: PUSH
7317: LD_EXP 17
7321: PUSH
7322: LD_INT 4
7324: DIV
7325: PLUS
7326: PUSH
7327: FOR_TO
7328: IFFALSE 7501
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 1
7340: PPUSH
7341: LD_INT 2
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: LD_INT 1
7349: PPUSH
7350: LD_INT 4
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 2
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_INT 3
7369: PPUSH
7370: CALL_OW 12
7374: ARRAY
7375: PPUSH
7376: LD_INT 90
7378: PPUSH
7379: CALL 360 0 7
7383: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
7384: LD_VAR 0 3
7388: PPUSH
7389: LD_INT 35
7391: PPUSH
7392: LD_INT 65
7394: PPUSH
7395: LD_INT 0
7397: PPUSH
7398: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
7402: LD_INT 0
7404: PPUSH
7405: LD_INT 3
7407: PPUSH
7408: LD_OWVAR 67
7412: PUSH
7413: LD_INT 1
7415: PLUS
7416: PPUSH
7417: CALL_OW 380
// un := CreateHuman ;
7421: LD_ADDR_VAR 0 2
7425: PUSH
7426: CALL_OW 44
7430: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7431: LD_VAR 0 2
7435: PPUSH
7436: LD_VAR 0 3
7440: PPUSH
7441: CALL_OW 52
// usAttackers := usAttackers union un ;
7445: LD_ADDR_EXP 45
7449: PUSH
7450: LD_EXP 45
7454: PUSH
7455: LD_VAR 0 2
7459: UNION
7460: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
7461: LD_VAR 0 3
7465: PPUSH
7466: LD_INT 39
7468: PPUSH
7469: LD_INT 60
7471: PPUSH
7472: CALL_OW 111
// wait ( 0 0$2 ) ;
7476: LD_INT 70
7478: PPUSH
7479: CALL_OW 67
// usAttackers := usAttackers union veh ;
7483: LD_ADDR_EXP 45
7487: PUSH
7488: LD_EXP 45
7492: PUSH
7493: LD_VAR 0 3
7497: UNION
7498: ST_TO_ADDR
// end ;
7499: GO 7327
7501: POP
7502: POP
// end ; attackWave := attackWave + 1 ;
7503: LD_ADDR_EXP 17
7507: PUSH
7508: LD_EXP 17
7512: PUSH
7513: LD_INT 1
7515: PLUS
7516: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
7517: LD_EXP 22
7521: PPUSH
7522: CALL_OW 427
// end ;
7526: LD_VAR 0 1
7530: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
7531: LD_INT 0
7533: PPUSH
7534: PPUSH
7535: PPUSH
7536: PPUSH
7537: PPUSH
7538: PPUSH
7539: PPUSH
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
// if retreatAllowed then
7544: LD_EXP 10
7548: IFFALSE 7560
// strategy := 2 else
7550: LD_ADDR_VAR 0 5
7554: PUSH
7555: LD_INT 2
7557: ST_TO_ADDR
7558: GO 7576
// strategy := rand ( 0 , 2 ) ;
7560: LD_ADDR_VAR 0 5
7564: PUSH
7565: LD_INT 0
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 12
7575: ST_TO_ADDR
// attackFormula := [ ] ;
7576: LD_ADDR_VAR 0 6
7580: PUSH
7581: EMPTY
7582: ST_TO_ADDR
// case strategy of 0 :
7583: LD_VAR 0 5
7587: PUSH
7588: LD_INT 0
7590: DOUBLE
7591: EQUAL
7592: IFTRUE 7596
7594: GO 7926
7596: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
7597: LD_INT 11
7599: PPUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 30
7612: PUSH
7613: LD_INT 4
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PPUSH
7624: CALL_OW 70
7628: NOT
7629: IFFALSE 7701
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7631: LD_ADDR_VAR 0 6
7635: PUSH
7636: LD_INT 41
7638: PUSH
7639: LD_INT 34
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: PUSH
7649: LD_INT 53
7651: PUSH
7652: LD_INT 62
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 37
7661: PUSH
7662: LD_INT 63
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 44
7671: PUSH
7672: LD_INT 45
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 37
7681: PUSH
7682: LD_INT 28
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: ST_TO_ADDR
7699: GO 7924
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7701: LD_INT 12
7703: PPUSH
7704: LD_INT 22
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 30
7719: PUSH
7720: LD_INT 4
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 30
7729: PUSH
7730: LD_INT 31
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 30
7739: PUSH
7740: LD_INT 32
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PPUSH
7757: CALL_OW 70
7761: NOT
7762: IFFALSE 7845
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7764: LD_ADDR_VAR 0 6
7768: PUSH
7769: LD_INT 27
7771: PUSH
7772: LD_INT 42
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 27
7781: PUSH
7782: LD_INT 32
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 53
7795: PUSH
7796: LD_INT 62
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 37
7805: PUSH
7806: LD_INT 63
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 44
7815: PUSH
7816: LD_INT 45
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 37
7825: PUSH
7826: LD_INT 28
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: ST_TO_ADDR
7843: GO 7924
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7845: LD_ADDR_VAR 0 6
7849: PUSH
7850: LD_INT 71
7852: PUSH
7853: LD_INT 67
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 54
7862: PUSH
7863: LD_INT 35
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 63
7876: PUSH
7877: LD_INT 40
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 37
7886: PUSH
7887: LD_INT 63
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 44
7896: PUSH
7897: LD_INT 45
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 37
7906: PUSH
7907: LD_INT 28
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// end ; 1 :
7924: GO 8129
7926: LD_INT 1
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 8038
7934: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 71
7942: PUSH
7943: LD_INT 67
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 82
7952: PUSH
7953: LD_INT 23
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 53
7962: PUSH
7963: LD_INT 7
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 43
7972: PUSH
7973: LD_INT 10
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 53
7988: PUSH
7989: LD_INT 62
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 37
7998: PUSH
7999: LD_INT 63
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 44
8008: PUSH
8009: LD_INT 45
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 37
8018: PUSH
8019: LD_INT 28
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: ST_TO_ADDR
8036: GO 8129
8038: LD_INT 2
8040: DOUBLE
8041: EQUAL
8042: IFTRUE 8046
8044: GO 8128
8046: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
8047: LD_ADDR_VAR 0 6
8051: PUSH
8052: LD_INT 90
8054: PUSH
8055: LD_INT 59
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 108
8064: PUSH
8065: LD_INT 64
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 82
8078: PUSH
8079: LD_INT 75
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 73
8088: PUSH
8089: LD_INT 67
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 101
8098: PUSH
8099: LD_INT 65
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: LD_INT 108
8108: PUSH
8109: LD_INT 62
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: ST_TO_ADDR
8126: GO 8129
8128: POP
// if not attackFormula then
8129: LD_VAR 0 6
8133: NOT
8134: IFFALSE 8138
// exit ;
8136: GO 9564
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8138: LD_ADDR_VAR 0 7
8142: PUSH
8143: LD_EXP 45
8147: PPUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PPUSH
8158: CALL_OW 72
8162: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8163: LD_ADDR_VAR 0 8
8167: PUSH
8168: LD_EXP 45
8172: PPUSH
8173: LD_INT 25
8175: PUSH
8176: LD_INT 4
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PPUSH
8183: CALL_OW 72
8187: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8188: LD_ADDR_VAR 0 9
8192: PUSH
8193: LD_EXP 45
8197: PPUSH
8198: LD_INT 25
8200: PUSH
8201: LD_INT 3
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PPUSH
8208: CALL_OW 72
8212: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8213: LD_ADDR_VAR 0 10
8217: PUSH
8218: LD_EXP 45
8222: PPUSH
8223: LD_INT 21
8225: PUSH
8226: LD_INT 2
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PPUSH
8233: CALL_OW 72
8237: ST_TO_ADDR
// if sci then
8238: LD_VAR 0 8
8242: IFFALSE 8279
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8244: LD_VAR 0 8
8248: PPUSH
8249: LD_VAR 0 6
8253: PUSH
8254: LD_INT 2
8256: ARRAY
8257: PUSH
8258: LD_INT 1
8260: ARRAY
8261: PPUSH
8262: LD_VAR 0 6
8266: PUSH
8267: LD_INT 2
8269: ARRAY
8270: PUSH
8271: LD_INT 2
8273: ARRAY
8274: PPUSH
8275: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8286: LD_ADDR_VAR 0 7
8290: PUSH
8291: LD_EXP 45
8295: PPUSH
8296: LD_INT 25
8298: PUSH
8299: LD_INT 1
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PPUSH
8306: CALL_OW 72
8310: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8311: LD_ADDR_VAR 0 8
8315: PUSH
8316: LD_EXP 45
8320: PPUSH
8321: LD_INT 25
8323: PUSH
8324: LD_INT 4
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PPUSH
8331: CALL_OW 72
8335: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8336: LD_ADDR_VAR 0 9
8340: PUSH
8341: LD_EXP 45
8345: PPUSH
8346: LD_INT 25
8348: PUSH
8349: LD_INT 3
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PPUSH
8356: CALL_OW 72
8360: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8361: LD_ADDR_VAR 0 10
8365: PUSH
8366: LD_EXP 45
8370: PPUSH
8371: LD_INT 21
8373: PUSH
8374: LD_INT 2
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PPUSH
8381: CALL_OW 72
8385: ST_TO_ADDR
// if sol then
8386: LD_VAR 0 7
8390: IFFALSE 8785
// begin for i in sol do
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: LD_VAR 0 7
8401: PUSH
8402: FOR_IN
8403: IFFALSE 8783
// begin tag := GetTag ( i ) ;
8405: LD_ADDR_VAR 0 4
8409: PUSH
8410: LD_VAR 0 2
8414: PPUSH
8415: CALL_OW 110
8419: ST_TO_ADDR
// if not tag then
8420: LD_VAR 0 4
8424: NOT
8425: IFFALSE 8543
// begin if GetLives ( i ) = 1000 then
8427: LD_VAR 0 2
8431: PPUSH
8432: CALL_OW 256
8436: PUSH
8437: LD_INT 1000
8439: EQUAL
8440: IFFALSE 8456
// SetTag ( i , 1 ) else
8442: LD_VAR 0 2
8446: PPUSH
8447: LD_INT 1
8449: PPUSH
8450: CALL_OW 109
8454: GO 8541
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 6 then
8456: LD_VAR 0 2
8460: PPUSH
8461: LD_VAR 0 6
8465: PUSH
8466: LD_INT 2
8468: ARRAY
8469: PUSH
8470: LD_INT 1
8472: ARRAY
8473: PPUSH
8474: LD_VAR 0 6
8478: PUSH
8479: LD_INT 2
8481: ARRAY
8482: PUSH
8483: LD_INT 2
8485: ARRAY
8486: PPUSH
8487: CALL_OW 297
8491: PUSH
8492: LD_INT 6
8494: GREATER
8495: IFFALSE 8541
// begin ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8497: LD_VAR 0 2
8501: PPUSH
8502: LD_VAR 0 6
8506: PUSH
8507: LD_INT 2
8509: ARRAY
8510: PUSH
8511: LD_INT 1
8513: ARRAY
8514: PPUSH
8515: LD_VAR 0 6
8519: PUSH
8520: LD_INT 2
8522: ARRAY
8523: PUSH
8524: LD_INT 2
8526: ARRAY
8527: PPUSH
8528: CALL_OW 111
// AddComHold ( i ) ;
8532: LD_VAR 0 2
8536: PPUSH
8537: CALL_OW 200
// end ; end else
8541: GO 8781
// begin if GetLives ( i ) < 720 then
8543: LD_VAR 0 2
8547: PPUSH
8548: CALL_OW 256
8552: PUSH
8553: LD_INT 720
8555: LESS
8556: IFFALSE 8572
// SetTag ( i , 0 ) else
8558: LD_VAR 0 2
8562: PPUSH
8563: LD_INT 0
8565: PPUSH
8566: CALL_OW 109
8570: GO 8781
// if tag <= attackFormula [ 1 ] then
8572: LD_VAR 0 4
8576: PUSH
8577: LD_VAR 0 6
8581: PUSH
8582: LD_INT 1
8584: ARRAY
8585: LESSEQUAL
8586: IFFALSE 8747
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
8588: LD_VAR 0 2
8592: PPUSH
8593: LD_VAR 0 6
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PUSH
8602: LD_VAR 0 4
8606: ARRAY
8607: PUSH
8608: LD_INT 1
8610: ARRAY
8611: PPUSH
8612: LD_VAR 0 6
8616: PUSH
8617: LD_INT 1
8619: ARRAY
8620: PUSH
8621: LD_VAR 0 4
8625: ARRAY
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: CALL_OW 297
8635: PUSH
8636: LD_INT 6
8638: GREATER
8639: IFFALSE 8690
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8641: LD_VAR 0 2
8645: PPUSH
8646: LD_VAR 0 6
8650: PUSH
8651: LD_INT 1
8653: ARRAY
8654: PUSH
8655: LD_VAR 0 4
8659: ARRAY
8660: PUSH
8661: LD_INT 1
8663: ARRAY
8664: PPUSH
8665: LD_VAR 0 6
8669: PUSH
8670: LD_INT 1
8672: ARRAY
8673: PUSH
8674: LD_VAR 0 4
8678: ARRAY
8679: PUSH
8680: LD_INT 2
8682: ARRAY
8683: PPUSH
8684: CALL_OW 114
8688: GO 8745
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8690: LD_INT 81
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 91
8702: PUSH
8703: LD_VAR 0 2
8707: PUSH
8708: LD_INT 10
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: NOT
8725: IFFALSE 8745
// SetTag ( i , tag + 1 ) ;
8727: LD_VAR 0 2
8731: PPUSH
8732: LD_VAR 0 4
8736: PUSH
8737: LD_INT 1
8739: PLUS
8740: PPUSH
8741: CALL_OW 109
// end else
8745: GO 8781
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8747: LD_VAR 0 2
8751: PPUSH
8752: LD_INT 81
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PPUSH
8762: CALL_OW 69
8766: PPUSH
8767: LD_VAR 0 2
8771: PPUSH
8772: CALL_OW 74
8776: PPUSH
8777: CALL_OW 115
// end ; end ;
8781: GO 8402
8783: POP
8784: POP
// end ; if sci then
8785: LD_VAR 0 8
8789: IFFALSE 8948
// begin if not sol and not mech then
8791: LD_VAR 0 7
8795: NOT
8796: PUSH
8797: LD_VAR 0 9
8801: NOT
8802: AND
8803: IFFALSE 8855
// begin for i in sci do
8805: LD_ADDR_VAR 0 2
8809: PUSH
8810: LD_VAR 0 8
8814: PUSH
8815: FOR_IN
8816: IFFALSE 8851
// begin usForces := usForces union i ;
8818: LD_ADDR_EXP 42
8822: PUSH
8823: LD_EXP 42
8827: PUSH
8828: LD_VAR 0 2
8832: UNION
8833: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8834: LD_VAR 0 2
8838: PPUSH
8839: LD_INT 34
8841: PPUSH
8842: LD_INT 68
8844: PPUSH
8845: CALL_OW 111
// end ;
8849: GO 8815
8851: POP
8852: POP
// end else
8853: GO 8948
// for i in sci do
8855: LD_ADDR_VAR 0 2
8859: PUSH
8860: LD_VAR 0 8
8864: PUSH
8865: FOR_IN
8866: IFFALSE 8946
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 8 then
8868: LD_VAR 0 2
8872: PPUSH
8873: LD_VAR 0 6
8877: PUSH
8878: LD_INT 2
8880: ARRAY
8881: PUSH
8882: LD_INT 1
8884: ARRAY
8885: PPUSH
8886: LD_VAR 0 6
8890: PUSH
8891: LD_INT 2
8893: ARRAY
8894: PUSH
8895: LD_INT 2
8897: ARRAY
8898: PPUSH
8899: CALL_OW 297
8903: PUSH
8904: LD_INT 8
8906: GREATER
8907: IFFALSE 8944
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8909: LD_VAR 0 2
8913: PPUSH
8914: LD_VAR 0 6
8918: PUSH
8919: LD_INT 2
8921: ARRAY
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: PPUSH
8927: LD_VAR 0 6
8931: PUSH
8932: LD_INT 2
8934: ARRAY
8935: PUSH
8936: LD_INT 2
8938: ARRAY
8939: PPUSH
8940: CALL_OW 111
8944: GO 8865
8946: POP
8947: POP
// end ; if mech then
8948: LD_VAR 0 9
8952: IFFALSE 9557
// begin for i in mech do
8954: LD_ADDR_VAR 0 2
8958: PUSH
8959: LD_VAR 0 9
8963: PUSH
8964: FOR_IN
8965: IFFALSE 9555
// begin tag := GetTag ( i ) ;
8967: LD_ADDR_VAR 0 4
8971: PUSH
8972: LD_VAR 0 2
8976: PPUSH
8977: CALL_OW 110
8981: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8982: LD_ADDR_VAR 0 11
8986: PUSH
8987: LD_VAR 0 2
8991: PPUSH
8992: CALL_OW 310
8996: ST_TO_ADDR
// if not tag then
8997: LD_VAR 0 4
9001: NOT
9002: IFFALSE 9315
// begin if veh then
9004: LD_VAR 0 11
9008: IFFALSE 9157
// begin if GetLives ( veh ) = 1000 and GetFuel ( veh ) > 60 then
9010: LD_VAR 0 11
9014: PPUSH
9015: CALL_OW 256
9019: PUSH
9020: LD_INT 1000
9022: EQUAL
9023: PUSH
9024: LD_VAR 0 11
9028: PPUSH
9029: CALL_OW 261
9033: PUSH
9034: LD_INT 60
9036: GREATER
9037: AND
9038: IFFALSE 9054
// SetTag ( i , 1 ) else
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_INT 1
9047: PPUSH
9048: CALL_OW 109
9052: GO 9155
// if GetDistUnitXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
9054: LD_VAR 0 2
9058: PPUSH
9059: LD_VAR 0 6
9063: PUSH
9064: LD_INT 3
9066: ARRAY
9067: PUSH
9068: LD_INT 1
9070: ARRAY
9071: PPUSH
9072: LD_VAR 0 6
9076: PUSH
9077: LD_INT 3
9079: ARRAY
9080: PUSH
9081: LD_INT 2
9083: ARRAY
9084: PPUSH
9085: CALL_OW 297
9089: PUSH
9090: LD_INT 7
9092: GREATER
9093: IFFALSE 9132
// ComMoveXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
9095: LD_VAR 0 2
9099: PPUSH
9100: LD_VAR 0 6
9104: PUSH
9105: LD_INT 3
9107: ARRAY
9108: PUSH
9109: LD_INT 1
9111: ARRAY
9112: PPUSH
9113: LD_VAR 0 6
9117: PUSH
9118: LD_INT 3
9120: ARRAY
9121: PUSH
9122: LD_INT 2
9124: ARRAY
9125: PPUSH
9126: CALL_OW 111
9130: GO 9155
// begin ComExitVehicle ( i ) ;
9132: LD_VAR 0 2
9136: PPUSH
9137: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
9141: LD_VAR 0 2
9145: PPUSH
9146: LD_VAR 0 11
9150: PPUSH
9151: CALL_OW 189
// end ; end else
9155: GO 9313
// if GetLives ( i ) < 700 then
9157: LD_VAR 0 2
9161: PPUSH
9162: CALL_OW 256
9166: PUSH
9167: LD_INT 700
9169: LESS
9170: IFFALSE 9221
// begin usAttackers := usAttackers diff i ;
9172: LD_ADDR_EXP 45
9176: PUSH
9177: LD_EXP 45
9181: PUSH
9182: LD_VAR 0 2
9186: DIFF
9187: ST_TO_ADDR
// usForces := usForces union i ;
9188: LD_ADDR_EXP 42
9192: PUSH
9193: LD_EXP 42
9197: PUSH
9198: LD_VAR 0 2
9202: UNION
9203: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
9204: LD_VAR 0 2
9208: PPUSH
9209: LD_INT 34
9211: PPUSH
9212: LD_INT 68
9214: PPUSH
9215: CALL_OW 111
// end else
9219: GO 9313
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
9221: LD_VAR 0 10
9225: PPUSH
9226: LD_INT 58
9228: PUSH
9229: EMPTY
9230: LIST
9231: PUSH
9232: LD_INT 24
9234: PUSH
9235: LD_INT 1000
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PPUSH
9246: CALL_OW 72
9250: PUSH
9251: LD_VAR 0 2
9255: PPUSH
9256: CALL_OW 314
9260: NOT
9261: AND
9262: IFFALSE 9313
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) ;
9264: LD_VAR 0 2
9268: PPUSH
9269: LD_VAR 0 10
9273: PPUSH
9274: LD_INT 58
9276: PUSH
9277: EMPTY
9278: LIST
9279: PUSH
9280: LD_INT 24
9282: PUSH
9283: LD_INT 1000
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PPUSH
9294: CALL_OW 72
9298: PPUSH
9299: LD_VAR 0 2
9303: PPUSH
9304: CALL_OW 74
9308: PPUSH
9309: CALL_OW 120
// end else
9313: GO 9553
// begin if GetLives ( veh ) < 720 then
9315: LD_VAR 0 11
9319: PPUSH
9320: CALL_OW 256
9324: PUSH
9325: LD_INT 720
9327: LESS
9328: IFFALSE 9344
// SetTag ( i , 0 ) else
9330: LD_VAR 0 2
9334: PPUSH
9335: LD_INT 0
9337: PPUSH
9338: CALL_OW 109
9342: GO 9553
// if tag <= attackFormula [ 4 ] then
9344: LD_VAR 0 4
9348: PUSH
9349: LD_VAR 0 6
9353: PUSH
9354: LD_INT 4
9356: ARRAY
9357: LESSEQUAL
9358: IFFALSE 9519
// begin if GetDistUnitXY ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
9360: LD_VAR 0 2
9364: PPUSH
9365: LD_VAR 0 6
9369: PUSH
9370: LD_INT 4
9372: ARRAY
9373: PUSH
9374: LD_VAR 0 4
9378: ARRAY
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: PPUSH
9384: LD_VAR 0 6
9388: PUSH
9389: LD_INT 4
9391: ARRAY
9392: PUSH
9393: LD_VAR 0 4
9397: ARRAY
9398: PUSH
9399: LD_INT 2
9401: ARRAY
9402: PPUSH
9403: CALL_OW 297
9407: PUSH
9408: LD_INT 6
9410: GREATER
9411: IFFALSE 9462
// ComAgressiveMove ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9413: LD_VAR 0 2
9417: PPUSH
9418: LD_VAR 0 6
9422: PUSH
9423: LD_INT 4
9425: ARRAY
9426: PUSH
9427: LD_VAR 0 4
9431: ARRAY
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PPUSH
9437: LD_VAR 0 6
9441: PUSH
9442: LD_INT 4
9444: ARRAY
9445: PUSH
9446: LD_VAR 0 4
9450: ARRAY
9451: PUSH
9452: LD_INT 2
9454: ARRAY
9455: PPUSH
9456: CALL_OW 114
9460: GO 9517
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
9462: LD_INT 81
9464: PUSH
9465: LD_INT 1
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 91
9474: PUSH
9475: LD_VAR 0 2
9479: PUSH
9480: LD_INT 10
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PPUSH
9492: CALL_OW 69
9496: NOT
9497: IFFALSE 9517
// SetTag ( i , tag + 1 ) ;
9499: LD_VAR 0 2
9503: PPUSH
9504: LD_VAR 0 4
9508: PUSH
9509: LD_INT 1
9511: PLUS
9512: PPUSH
9513: CALL_OW 109
// end else
9517: GO 9553
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9519: LD_VAR 0 2
9523: PPUSH
9524: LD_INT 81
9526: PUSH
9527: LD_INT 1
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: PPUSH
9539: LD_VAR 0 2
9543: PPUSH
9544: CALL_OW 74
9548: PPUSH
9549: CALL_OW 115
// end ; end ;
9553: GO 8964
9555: POP
9556: POP
// end ; until not usAttackers ;
9557: LD_EXP 45
9561: NOT
9562: IFFALSE 8279
// end ;
9564: LD_VAR 0 1
9568: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9569: LD_INT 22
9571: PUSH
9572: LD_INT 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 32
9581: PUSH
9582: LD_INT 1
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: IFFALSE 9674
9599: GO 9601
9601: DISABLE
9602: LD_INT 0
9604: PPUSH
// begin enable ;
9605: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9606: LD_ADDR_VAR 0 1
9610: PUSH
9611: LD_INT 22
9613: PUSH
9614: LD_INT 1
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 32
9623: PUSH
9624: LD_INT 1
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PPUSH
9635: CALL_OW 69
9639: PUSH
9640: FOR_IN
9641: IFFALSE 9672
// if GetFuel ( i ) < 10 then
9643: LD_VAR 0 1
9647: PPUSH
9648: CALL_OW 261
9652: PUSH
9653: LD_INT 10
9655: LESS
9656: IFFALSE 9670
// SetFuel ( i , 10 ) ;
9658: LD_VAR 0 1
9662: PPUSH
9663: LD_INT 10
9665: PPUSH
9666: CALL_OW 240
9670: GO 9640
9672: POP
9673: POP
// end ; end_of_file
9674: PPOPN 1
9676: END
// export function Action ; var hasAll , i , tmp ; begin
9677: LD_INT 0
9679: PPUSH
9680: PPUSH
9681: PPUSH
9682: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9683: LD_ADDR_VAR 0 2
9687: PUSH
9688: LD_INT 22
9690: PUSH
9691: LD_INT 2
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 23
9710: PUSH
9711: LD_INT 2
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: PPUSH
9723: CALL_OW 69
9727: PUSH
9728: LD_INT 7
9730: GREATEREQUAL
9731: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9732: LD_VAR 0 2
9736: PPUSH
9737: LD_STRING 03_HasAll
9739: PPUSH
9740: CALL_OW 39
// Video ( true ) ;
9744: LD_INT 1
9746: PPUSH
9747: CALL 1020 0 1
// CenterNowOnUnits ( Heike ) ;
9751: LD_EXP 26
9755: PPUSH
9756: CALL_OW 87
// wait ( 0 0$2 ) ;
9760: LD_INT 70
9762: PPUSH
9763: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9767: LD_EXP 34
9771: PPUSH
9772: LD_STRING DF-1-start
9774: PPUSH
9775: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9779: LD_EXP 26
9783: PPUSH
9784: LD_EXP 34
9788: PPUSH
9789: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9793: LD_EXP 26
9797: PPUSH
9798: LD_STRING DH-1-start
9800: PPUSH
9801: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9805: LD_EXP 35
9809: PPUSH
9810: LD_INT 92
9812: PPUSH
9813: LD_INT 21
9815: PPUSH
9816: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9820: LD_EXP 30
9824: PPUSH
9825: LD_INT 94
9827: PPUSH
9828: LD_INT 23
9830: PPUSH
9831: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9835: LD_EXP 38
9839: PUSH
9840: LD_INT 1
9842: ARRAY
9843: PPUSH
9844: LD_INT 90
9846: PPUSH
9847: LD_INT 23
9849: PPUSH
9850: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9854: LD_EXP 38
9858: PUSH
9859: LD_INT 2
9861: ARRAY
9862: PPUSH
9863: LD_INT 93
9865: PPUSH
9866: LD_INT 25
9868: PPUSH
9869: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9873: LD_EXP 38
9877: PPUSH
9878: LD_EXP 35
9882: PPUSH
9883: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9887: LD_EXP 35
9891: PUSH
9892: LD_EXP 30
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PPUSH
9901: LD_EXP 26
9905: PPUSH
9906: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9910: LD_EXP 26
9914: PPUSH
9915: LD_EXP 35
9919: PPUSH
9920: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9924: LD_INT 35
9926: PPUSH
9927: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9931: LD_EXP 35
9935: PPUSH
9936: LD_INT 92
9938: PPUSH
9939: LD_INT 21
9941: PPUSH
9942: CALL_OW 307
9946: IFFALSE 9924
// Say ( Omar , DO-1-start ) ;
9948: LD_EXP 35
9952: PPUSH
9953: LD_STRING DO-1-start
9955: PPUSH
9956: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9960: LD_EXP 26
9964: PPUSH
9965: LD_STRING DH-2-start
9967: PPUSH
9968: CALL_OW 88
// if hasAll then
9972: LD_VAR 0 2
9976: IFFALSE 10104
// begin Say ( Omar , DO-2-start ) ;
9978: LD_EXP 35
9982: PPUSH
9983: LD_STRING DO-2-start
9985: PPUSH
9986: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9990: LD_EXP 35
9994: PPUSH
9995: LD_STRING DO-3-start
9997: PPUSH
9998: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
10002: LD_EXP 26
10006: PPUSH
10007: LD_STRING DH-3-start
10009: PPUSH
10010: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
10014: LD_EXP 34
10018: PPUSH
10019: LD_STRING DF-2-start
10021: PPUSH
10022: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
10026: LD_EXP 35
10030: PPUSH
10031: LD_EXP 34
10035: PPUSH
10036: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
10040: LD_EXP 35
10044: PPUSH
10045: LD_STRING DO-4-start
10047: PPUSH
10048: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
10052: LD_EXP 34
10056: PPUSH
10057: LD_STRING DF-3-start
10059: PPUSH
10060: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
10064: LD_EXP 35
10068: PPUSH
10069: LD_STRING DO-5-start
10071: PPUSH
10072: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
10076: LD_EXP 34
10080: PPUSH
10081: LD_STRING DF-4-start
10083: PPUSH
10084: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
10088: LD_EXP 35
10092: PPUSH
10093: LD_EXP 26
10097: PPUSH
10098: CALL_OW 119
// end else
10102: GO 10204
// begin Say ( Omar , DO-2-start-a ) ;
10104: LD_EXP 35
10108: PPUSH
10109: LD_STRING DO-2-start-a
10111: PPUSH
10112: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
10116: LD_EXP 35
10120: PPUSH
10121: LD_STRING DO-3-start-a
10123: PPUSH
10124: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
10128: LD_EXP 26
10132: PPUSH
10133: LD_STRING DH-3-start-a
10135: PPUSH
10136: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
10140: LD_EXP 34
10144: PPUSH
10145: LD_STRING DF-2-start-a
10147: PPUSH
10148: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
10152: LD_EXP 35
10156: PPUSH
10157: LD_EXP 34
10161: PPUSH
10162: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
10166: LD_EXP 35
10170: PPUSH
10171: LD_STRING DO-4-start-a
10173: PPUSH
10174: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
10178: LD_EXP 34
10182: PPUSH
10183: LD_STRING DF-3-start-a
10185: PPUSH
10186: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
10190: LD_EXP 35
10194: PPUSH
10195: LD_EXP 26
10199: PPUSH
10200: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
10204: LD_INT 10
10206: PPUSH
10207: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
10211: LD_EXP 35
10215: PPUSH
10216: LD_STRING DO-1-mission
10218: PPUSH
10219: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
10223: LD_EXP 35
10227: PPUSH
10228: LD_STRING DO-2-mission
10230: PPUSH
10231: CALL_OW 88
// if not hasAll then
10235: LD_VAR 0 2
10239: NOT
10240: IFFALSE 10254
// Say ( Omar , DO-3-mission ) ;
10242: LD_EXP 35
10246: PPUSH
10247: LD_STRING DO-3-mission
10249: PPUSH
10250: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
10254: LD_EXP 35
10258: PPUSH
10259: LD_STRING DO-4-mission
10261: PPUSH
10262: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
10266: LD_EXP 26
10270: PPUSH
10271: LD_STRING DH-1-mission
10273: PPUSH
10274: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
10278: LD_EXP 34
10282: PPUSH
10283: LD_STRING DF-1-mission
10285: PPUSH
10286: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
10290: LD_EXP 35
10294: PPUSH
10295: LD_STRING DO-5-mission
10297: PPUSH
10298: CALL_OW 88
// if not hasAll then
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10442
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
10309: LD_ADDR_VAR 0 4
10313: PUSH
10314: LD_INT 22
10316: PUSH
10317: LD_INT 2
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 21
10326: PUSH
10327: LD_INT 1
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 23
10336: PUSH
10337: LD_INT 2
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: ST_TO_ADDR
// for i := 7 downto tmp do
10354: LD_ADDR_VAR 0 3
10358: PUSH
10359: DOUBLE
10360: LD_INT 7
10362: INC
10363: ST_TO_ADDR
10364: LD_VAR 0 4
10368: PUSH
10369: FOR_DOWNTO
10370: IFFALSE 10440
// begin if omarSquad < 3 then
10372: LD_EXP 38
10376: PUSH
10377: LD_INT 3
10379: LESS
10380: IFFALSE 10384
// break ;
10382: GO 10440
// SetSide ( omarSquad [ 3 ] , 2 ) ;
10384: LD_EXP 38
10388: PUSH
10389: LD_INT 3
10391: ARRAY
10392: PPUSH
10393: LD_INT 2
10395: PPUSH
10396: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
10400: LD_ADDR_EXP 40
10404: PUSH
10405: LD_EXP 40
10409: PUSH
10410: LD_EXP 38
10414: PUSH
10415: LD_INT 3
10417: ARRAY
10418: UNION
10419: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
10420: LD_ADDR_EXP 38
10424: PUSH
10425: LD_EXP 38
10429: PPUSH
10430: LD_INT 3
10432: PPUSH
10433: CALL_OW 3
10437: ST_TO_ADDR
// end ;
10438: GO 10369
10440: POP
10441: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10442: LD_EXP 35
10446: PUSH
10447: LD_EXP 38
10451: ADD
10452: PPUSH
10453: LD_INT 103
10455: PPUSH
10456: LD_INT 9
10458: PPUSH
10459: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10463: LD_VAR 0 2
10467: PUSH
10468: LD_EXP 31
10472: PPUSH
10473: CALL_OW 302
10477: AND
10478: IFFALSE 10539
// begin wait ( 0 0$3 ) ;
10480: LD_INT 105
10482: PPUSH
10483: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10487: LD_EXP 31
10491: PPUSH
10492: LD_EXP 34
10496: PPUSH
10497: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10501: LD_EXP 31
10505: PPUSH
10506: LD_STRING DK-1-side
10508: PPUSH
10509: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10513: LD_EXP 34
10517: PPUSH
10518: LD_EXP 31
10522: PPUSH
10523: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10527: LD_EXP 34
10531: PPUSH
10532: LD_STRING DF-1-side
10534: PPUSH
10535: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10539: LD_INT 22
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PPUSH
10549: CALL_OW 69
10553: PPUSH
10554: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10558: LD_EXP 34
10562: PUSH
10563: LD_EXP 37
10567: ADD
10568: PPUSH
10569: LD_INT 108
10571: PPUSH
10572: LD_INT 62
10574: PPUSH
10575: CALL_OW 111
// gameStarted := true ;
10579: LD_ADDR_EXP 3
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10587: LD_INT 105
10589: PPUSH
10590: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10594: LD_EXP 26
10598: PPUSH
10599: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10603: LD_EXP 26
10607: PPUSH
10608: LD_EXP 30
10612: PPUSH
10613: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10617: LD_INT 22
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PPUSH
10627: CALL_OW 69
10631: PUSH
10632: LD_EXP 26
10636: DIFF
10637: PPUSH
10638: LD_EXP 26
10642: PPUSH
10643: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10647: LD_EXP 26
10651: PPUSH
10652: LD_STRING DH-1-explore
10654: PPUSH
10655: CALL_OW 88
// if Givi then
10659: LD_EXP 27
10663: IFFALSE 10679
// Say ( Givi , DG-1-explore ) else
10665: LD_EXP 27
10669: PPUSH
10670: LD_STRING DG-1-explore
10672: PPUSH
10673: CALL_OW 88
10677: GO 10716
// if heikeSecondSquad then
10679: LD_EXP 40
10683: IFFALSE 10716
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10685: LD_EXP 40
10689: PPUSH
10690: LD_INT 26
10692: PUSH
10693: LD_INT 1
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 72
10704: PUSH
10705: LD_INT 1
10707: ARRAY
10708: PPUSH
10709: LD_STRING DArm-1-explore
10711: PPUSH
10712: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10716: LD_EXP 30
10720: PPUSH
10721: LD_STRING DA-1-explore
10723: PPUSH
10724: CALL_OW 88
// if Sophia then
10728: LD_EXP 32
10732: IFFALSE 10810
// begin Say ( Sophia , DS-2-explore ) ;
10734: LD_EXP 32
10738: PPUSH
10739: LD_STRING DS-2-explore
10741: PPUSH
10742: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10746: LD_EXP 30
10750: PPUSH
10751: LD_STRING DA-2-explore
10753: PPUSH
10754: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10758: LD_EXP 32
10762: PPUSH
10763: LD_EXP 30
10767: PPUSH
10768: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10772: LD_EXP 30
10776: PPUSH
10777: LD_EXP 32
10781: PPUSH
10782: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10786: LD_EXP 32
10790: PPUSH
10791: LD_STRING DS-3-explore
10793: PPUSH
10794: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10798: LD_EXP 30
10802: PPUSH
10803: LD_STRING DA-3-explore
10805: PPUSH
10806: CALL_OW 88
// end ; if Mike then
10810: LD_EXP 28
10814: IFFALSE 10870
// begin Say ( Mike , DM-1-explore ) ;
10816: LD_EXP 28
10820: PPUSH
10821: LD_STRING DM-1-explore
10823: PPUSH
10824: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10828: LD_EXP 26
10832: PPUSH
10833: LD_STRING DH-2-explore
10835: PPUSH
10836: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10840: LD_EXP 28
10844: PPUSH
10845: LD_STRING DM-2-explore
10847: PPUSH
10848: CALL_OW 88
// if Kaia then
10852: LD_EXP 31
10856: IFFALSE 10870
// Say ( Kaia , DK-1-explore ) ;
10858: LD_EXP 31
10862: PPUSH
10863: LD_STRING DK-1-explore
10865: PPUSH
10866: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10870: LD_INT 22
10872: PUSH
10873: LD_INT 2
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PPUSH
10880: CALL_OW 69
10884: PPUSH
10885: CALL_OW 139
// Video ( false ) ;
10889: LD_INT 0
10891: PPUSH
10892: CALL 1020 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10896: LD_STRING BuildBase
10898: PPUSH
10899: CALL_OW 337
// SaveForQuickRestart ;
10903: CALL_OW 22
// end ;
10907: LD_VAR 0 1
10911: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10912: LD_EXP 5
10916: NOT
10917: PUSH
10918: LD_EXP 6
10922: NOT
10923: AND
10924: PUSH
10925: LD_INT 5
10927: PPUSH
10928: LD_INT 22
10930: PUSH
10931: LD_INT 2
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PPUSH
10938: CALL_OW 70
10942: AND
10943: PUSH
10944: LD_EXP 6
10948: NOT
10949: AND
10950: IFFALSE 11035
10952: GO 10954
10954: DISABLE
// begin if Mike then
10955: LD_EXP 28
10959: IFFALSE 10975
// Say ( Mike , DM-1-scout ) else
10961: LD_EXP 28
10965: PPUSH
10966: LD_STRING DM-1-scout
10968: PPUSH
10969: CALL_OW 88
10973: GO 11006
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10975: LD_EXP 40
10979: PPUSH
10980: LD_INT 26
10982: PUSH
10983: LD_INT 1
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PPUSH
10990: CALL_OW 72
10994: PUSH
10995: LD_INT 1
10997: ARRAY
10998: PPUSH
10999: LD_STRING DArm-1-explore
11001: PPUSH
11002: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
11006: LD_INT 54
11008: PPUSH
11009: LD_INT 35
11011: PPUSH
11012: LD_INT 2
11014: PPUSH
11015: LD_INT 1
11017: PPUSH
11018: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
11022: LD_INT 54
11024: PPUSH
11025: LD_INT 35
11027: PPUSH
11028: LD_INT 2
11030: PPUSH
11031: CALL_OW 331
// end ;
11035: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
11036: LD_INT 6
11038: PPUSH
11039: LD_INT 22
11041: PUSH
11042: LD_INT 2
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PPUSH
11049: CALL_OW 70
11053: PUSH
11054: LD_EXP 6
11058: NOT
11059: AND
11060: IFFALSE 11314
11062: GO 11064
11064: DISABLE
11065: LD_INT 0
11067: PPUSH
11068: PPUSH
11069: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11070: LD_ADDR_VAR 0 1
11074: PUSH
11075: LD_EXP 40
11079: PPUSH
11080: LD_INT 26
11082: PUSH
11083: LD_INT 1
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PPUSH
11090: CALL_OW 72
11094: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
11095: LD_ADDR_VAR 0 2
11099: PUSH
11100: LD_EXP 40
11104: PPUSH
11105: LD_INT 26
11107: PUSH
11108: LD_INT 2
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PPUSH
11115: CALL_OW 72
11119: ST_TO_ADDR
// DialogueOn ;
11120: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
11124: LD_INT 36
11126: PPUSH
11127: LD_INT 22
11129: PPUSH
11130: LD_INT 2
11132: PPUSH
11133: LD_INT 8
11135: PPUSH
11136: CALL_OW 330
// dwait ( 0 0$1 ) ;
11140: LD_INT 35
11142: PPUSH
11143: CALL_OW 68
// speakerOk := false ;
11147: LD_ADDR_VAR 0 3
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// if Mike then
11155: LD_EXP 28
11159: IFFALSE 11181
// speakerOk := Say ( Mike , DM-1-spot ) else
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: LD_EXP 28
11170: PPUSH
11171: LD_STRING DM-1-spot
11173: PPUSH
11174: CALL_OW 88
11178: ST_TO_ADDR
11179: GO 11209
// if randomMen then
11181: LD_VAR 0 1
11185: IFFALSE 11209
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11187: LD_ADDR_VAR 0 3
11191: PUSH
11192: LD_VAR 0 1
11196: PUSH
11197: LD_INT 1
11199: ARRAY
11200: PPUSH
11201: LD_STRING DArm-1-spot-a
11203: PPUSH
11204: CALL_OW 88
11208: ST_TO_ADDR
// if speakerOk then
11209: LD_VAR 0 3
11213: IFFALSE 11257
// begin if Givi then
11215: LD_EXP 27
11219: IFFALSE 11235
// Say ( Givi , DG-1-spot ) else
11221: LD_EXP 27
11225: PPUSH
11226: LD_STRING DG-1-spot
11228: PPUSH
11229: CALL_OW 88
11233: GO 11257
// if randomWomen then
11235: LD_VAR 0 2
11239: IFFALSE 11257
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
11241: LD_VAR 0 2
11245: PUSH
11246: LD_INT 1
11248: ARRAY
11249: PPUSH
11250: LD_STRING DArf-1-spot-a
11252: PPUSH
11253: CALL_OW 88
// end ; if Mike then
11257: LD_EXP 28
11261: IFFALSE 11277
// Say ( Heike , DH-1-spot ) else
11263: LD_EXP 26
11267: PPUSH
11268: LD_STRING DH-1-spot
11270: PPUSH
11271: CALL_OW 88
11275: GO 11289
// Say ( Heike , DH-1-spot-a ) ;
11277: LD_EXP 26
11281: PPUSH
11282: LD_STRING DH-1-spot-a
11284: PPUSH
11285: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11289: LD_INT 36
11291: PPUSH
11292: LD_INT 22
11294: PPUSH
11295: LD_INT 2
11297: PPUSH
11298: CALL_OW 331
// DialogueOff ;
11302: CALL_OW 7
// americanBaseSpoted := true ;
11306: LD_ADDR_EXP 5
11310: PUSH
11311: LD_INT 1
11313: ST_TO_ADDR
// end ;
11314: PPOPN 3
11316: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11317: LD_EXP 5
11321: NOT
11322: PUSH
11323: LD_INT 22
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 101
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: AND
11352: PUSH
11353: LD_EXP 6
11357: NOT
11358: AND
11359: IFFALSE 11445
11361: GO 11363
11363: DISABLE
11364: LD_INT 0
11366: PPUSH
// begin americanBaseSpoted := true ;
11367: LD_ADDR_EXP 5
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11375: LD_ADDR_VAR 0 1
11379: PUSH
11380: LD_EXP 40
11384: PPUSH
11385: LD_INT 26
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PPUSH
11395: CALL_OW 72
11399: ST_TO_ADDR
// if not randomMen then
11400: LD_VAR 0 1
11404: NOT
11405: IFFALSE 11409
// exit ;
11407: GO 11445
// DialogueOn ;
11409: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11413: LD_VAR 0 1
11417: PUSH
11418: LD_INT 1
11420: ARRAY
11421: PPUSH
11422: LD_STRING DArm-1-spot-a
11424: PPUSH
11425: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11429: LD_EXP 26
11433: PPUSH
11434: LD_STRING DH-1-spot-a
11436: PPUSH
11437: CALL_OW 88
// DialogueOff ;
11441: CALL_OW 7
// end ;
11445: PPOPN 1
11447: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
11448: LD_INT 11
11450: PPUSH
11451: CALL_OW 255
11455: PUSH
11456: LD_INT 2
11458: EQUAL
11459: PUSH
11460: LD_INT 7
11462: PPUSH
11463: LD_INT 22
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 3
11475: PUSH
11476: LD_INT 50
11478: PUSH
11479: EMPTY
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 30
11488: PUSH
11489: LD_INT 31
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 70
11505: OR
11506: PUSH
11507: LD_INT 7
11509: PPUSH
11510: LD_INT 22
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 70
11524: PUSH
11525: LD_INT 1
11527: GREATER
11528: OR
11529: PUSH
11530: LD_EXP 42
11534: PUSH
11535: LD_INT 4
11537: LESSEQUAL
11538: OR
11539: IFFALSE 12057
11541: GO 11543
11543: DISABLE
11544: LD_INT 0
11546: PPUSH
11547: PPUSH
// begin wait ( 0 0$3 ) ;
11548: LD_INT 105
11550: PPUSH
11551: CALL_OW 67
// if IsOk ( usCommander ) then
11555: LD_EXP 43
11559: PPUSH
11560: CALL_OW 302
11564: IFFALSE 11594
// begin usForces := usForces union usCommander ;
11566: LD_ADDR_EXP 42
11570: PUSH
11571: LD_EXP 42
11575: PUSH
11576: LD_EXP 43
11580: UNION
11581: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11582: LD_EXP 43
11586: PPUSH
11587: LD_STRING DUsm-1-assault
11589: PPUSH
11590: CALL_OW 88
// end ; for i in usForces do
11594: LD_ADDR_VAR 0 1
11598: PUSH
11599: LD_EXP 42
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11651
// begin if IsInUnit ( i ) then
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 310
11616: IFFALSE 11627
// ComExitBuilding ( i ) ;
11618: LD_VAR 0 1
11622: PPUSH
11623: CALL_OW 122
// wait ( 3 ) ;
11627: LD_INT 3
11629: PPUSH
11630: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11634: LD_VAR 0 1
11638: PPUSH
11639: LD_INT 34
11641: PPUSH
11642: LD_INT 67
11644: PPUSH
11645: CALL_OW 111
// end ;
11649: GO 11604
11651: POP
11652: POP
// Say ( Heike , DH-1-assault ) ;
11653: LD_EXP 26
11657: PPUSH
11658: LD_STRING DH-1-assault
11660: PPUSH
11661: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11665: LD_INT 35
11667: PPUSH
11668: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11672: LD_VAR 0 1
11676: PPUSH
11677: LD_INT 34
11679: PPUSH
11680: LD_INT 67
11682: PPUSH
11683: CALL_OW 111
// until not usForces ;
11687: LD_EXP 42
11691: NOT
11692: IFFALSE 11665
// music_nat := 2 ;
11694: LD_ADDR_OWVAR 71
11698: PUSH
11699: LD_INT 2
11701: ST_TO_ADDR
// music_class := music_victory ;
11702: LD_ADDR_OWVAR 72
11706: PUSH
11707: LD_INT 4
11709: ST_TO_ADDR
// if not americanHasEscaped then
11710: LD_EXP 7
11714: NOT
11715: IFFALSE 11736
// begin Say ( Heike , DH-2-assault ) ;
11717: LD_EXP 26
11721: PPUSH
11722: LD_STRING DH-2-assault
11724: PPUSH
11725: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11729: LD_STRING ACH_CLEAN
11731: PPUSH
11732: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11736: LD_INT 70
11738: PPUSH
11739: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11743: LD_INT 35
11745: PPUSH
11746: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11750: LD_INT 22
11752: PUSH
11753: LD_INT 2
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 21
11762: PUSH
11763: LD_INT 1
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 3
11772: PUSH
11773: LD_INT 50
11775: PUSH
11776: EMPTY
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: NOT
11793: IFFALSE 11743
// InGameOn ;
11795: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11799: LD_INT 11
11801: PPUSH
11802: CALL_OW 255
11806: PUSH
11807: LD_INT 2
11809: EQUAL
11810: NOT
11811: IFFALSE 11823
// SetSide ( usDepot , 2 ) ;
11813: LD_INT 11
11815: PPUSH
11816: LD_INT 2
11818: PPUSH
11819: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11823: LD_INT 35
11825: PPUSH
11826: LD_INT 22
11828: PPUSH
11829: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11833: LD_EXP 26
11837: PPUSH
11838: LD_INT 35
11840: PPUSH
11841: LD_INT 22
11843: PPUSH
11844: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11848: LD_EXP 26
11852: PPUSH
11853: LD_INT 38
11855: PPUSH
11856: LD_INT 25
11858: PPUSH
11859: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11863: LD_EXP 39
11867: PUSH
11868: LD_EXP 40
11872: UNION
11873: PPUSH
11874: LD_INT 39
11876: PPUSH
11877: LD_INT 26
11879: PPUSH
11880: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11884: LD_EXP 39
11888: PUSH
11889: LD_EXP 40
11893: UNION
11894: PPUSH
11895: LD_EXP 26
11899: PPUSH
11900: CALL_OW 179
// p := 0 ;
11904: LD_ADDR_VAR 0 2
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11912: LD_INT 35
11914: PPUSH
11915: CALL_OW 67
// p := p + 1 ;
11919: LD_ADDR_VAR 0 2
11923: PUSH
11924: LD_VAR 0 2
11928: PUSH
11929: LD_INT 1
11931: PLUS
11932: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11933: LD_EXP 26
11937: PPUSH
11938: CALL_OW 314
11942: NOT
11943: PUSH
11944: LD_VAR 0 2
11948: PUSH
11949: LD_INT 10
11951: GREATER
11952: OR
11953: IFFALSE 11912
// Say ( Heike , DH-1-capture ) ;
11955: LD_EXP 26
11959: PPUSH
11960: LD_STRING DH-1-capture
11962: PPUSH
11963: CALL_OW 88
// if Markov then
11967: LD_EXP 33
11971: IFFALSE 11985
// Say ( Markov , DMar-1-capture ) ;
11973: LD_EXP 33
11977: PPUSH
11978: LD_STRING DMar-1-capture
11980: PPUSH
11981: CALL_OW 88
// if Sophia then
11985: LD_EXP 32
11989: IFFALSE 12015
// begin Say ( Heike , DH-2-capture ) ;
11991: LD_EXP 26
11995: PPUSH
11996: LD_STRING DH-2-capture
11998: PPUSH
11999: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
12003: LD_EXP 32
12007: PPUSH
12008: LD_STRING DS-1-capture
12010: PPUSH
12011: CALL_OW 88
// end ; InGameOff ;
12015: CALL_OW 9
// music_nat := music_auto ;
12019: LD_ADDR_OWVAR 71
12023: PUSH
12024: LD_INT 0
12026: ST_TO_ADDR
// music_class := music_auto ;
12027: LD_ADDR_OWVAR 72
12031: PUSH
12032: LD_INT 0
12034: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
12035: LD_STRING ConstructBase
12037: PPUSH
12038: CALL_OW 337
// wait ( 0 0$3 ) ;
12042: LD_INT 105
12044: PPUSH
12045: CALL_OW 67
// americanBaseCaptured := true ;
12049: LD_ADDR_EXP 6
12053: PUSH
12054: LD_INT 1
12056: ST_TO_ADDR
// end ;
12057: PPOPN 2
12059: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
12060: LD_EXP 12
12064: PUSH
12065: LD_INT 3
12067: GREATEREQUAL
12068: IFFALSE 12080
12070: GO 12072
12072: DISABLE
// SetAchievement ( ACH_ENG ) ;
12073: LD_STRING ACH_ENG
12075: PPUSH
12076: CALL_OW 543
12080: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
12081: LD_INT 22
12083: PUSH
12084: LD_INT 2
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 15
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 69
12109: PUSH
12110: LD_INT 4
12112: GREATEREQUAL
12113: IFFALSE 12125
12115: GO 12117
12117: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
12118: LD_STRING ACH_APEGEN
12120: PPUSH
12121: CALL_OW 543
12125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
12126: LD_INT 22
12128: PUSH
12129: LD_INT 2
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 30
12138: PUSH
12139: LD_INT 2
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 3
12148: PUSH
12149: LD_INT 57
12151: PUSH
12152: EMPTY
12153: LIST
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 69
12168: IFFALSE 12411
12170: GO 12172
12172: DISABLE
// begin workshopBuilded := true ;
12173: LD_ADDR_EXP 9
12177: PUSH
12178: LD_INT 1
12180: ST_TO_ADDR
// if IsOk ( Markov ) then
12181: LD_EXP 33
12185: PPUSH
12186: CALL_OW 302
12190: IFFALSE 12249
// begin Say ( Heike , DH-1-shop-a ) ;
12192: LD_EXP 26
12196: PPUSH
12197: LD_STRING DH-1-shop-a
12199: PPUSH
12200: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12204: LD_INT 47
12206: PPUSH
12207: LD_INT 2
12209: PPUSH
12210: CALL_OW 321
12214: PUSH
12215: LD_INT 2
12217: EQUAL
12218: PUSH
12219: LD_INT 45
12221: PPUSH
12222: LD_INT 2
12224: PPUSH
12225: CALL_OW 321
12229: PUSH
12230: LD_INT 2
12232: EQUAL
12233: AND
12234: NOT
12235: IFFALSE 12249
// Say ( Markov , DMar-1-shop-a ) ;
12237: LD_EXP 33
12241: PPUSH
12242: LD_STRING DMar-1-shop-a
12244: PPUSH
12245: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12249: LD_INT 35
12251: PPUSH
12252: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12256: LD_INT 47
12258: PPUSH
12259: LD_INT 2
12261: PPUSH
12262: CALL_OW 321
12266: PUSH
12267: LD_INT 2
12269: EQUAL
12270: PUSH
12271: LD_INT 45
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 321
12281: PUSH
12282: LD_INT 2
12284: EQUAL
12285: OR
12286: IFFALSE 12249
// DialogueOn ;
12288: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12292: LD_EXP 33
12296: PPUSH
12297: LD_STRING DMar-1-shop
12299: PPUSH
12300: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12304: LD_EXP 26
12308: PPUSH
12309: LD_STRING DH-1-shop
12311: PPUSH
12312: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12316: LD_EXP 33
12320: PPUSH
12321: LD_STRING DMar-2-shop
12323: PPUSH
12324: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12328: LD_EXP 33
12332: PPUSH
12333: LD_STRING DMar-3-shop
12335: PPUSH
12336: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12340: LD_EXP 26
12344: PPUSH
12345: LD_STRING DH-2-shop
12347: PPUSH
12348: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12352: LD_EXP 33
12356: PPUSH
12357: LD_STRING DMar-4-shop
12359: PPUSH
12360: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12364: LD_EXP 26
12368: PPUSH
12369: LD_STRING DH-3-shop
12371: PPUSH
12372: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12376: LD_EXP 33
12380: PPUSH
12381: LD_STRING DMar-5-shop
12383: PPUSH
12384: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12388: LD_EXP 26
12392: PPUSH
12393: LD_STRING DH-4-shop
12395: PPUSH
12396: CALL_OW 88
// DialogueOff ;
12400: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
12404: LD_STRING ConstructVeh
12406: PPUSH
12407: CALL_OW 337
// end ;
12411: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12412: LD_INT 2
12414: PPUSH
12415: LD_INT 2
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: CALL 1191 0 3
12425: PUSH
12426: LD_INT 0
12428: EQUAL
12429: IFFALSE 12441
12431: GO 12433
12433: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12434: LD_STRING Techs
12436: PPUSH
12437: CALL_OW 337
12441: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12442: LD_EXP 33
12446: PPUSH
12447: CALL_OW 302
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_INT 2
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: LD_INT 34
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 35
12477: PUSH
12478: LD_INT 22
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: AND
12499: IFFALSE 12606
12501: GO 12503
12503: DISABLE
// begin DialogueOn ;
12504: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12508: LD_INT 22
12510: PUSH
12511: LD_INT 2
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 2
12520: PUSH
12521: LD_INT 34
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: LD_INT 35
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PPUSH
12550: CALL_OW 69
12554: PPUSH
12555: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12559: LD_INT 10
12561: PPUSH
12562: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12566: LD_EXP 26
12570: PPUSH
12571: LD_STRING DH-1-bal
12573: PPUSH
12574: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12578: LD_EXP 33
12582: PPUSH
12583: LD_STRING DMar-1-bal
12585: PPUSH
12586: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12590: LD_EXP 26
12594: PPUSH
12595: LD_STRING DH-2-bal
12597: PPUSH
12598: CALL_OW 88
// DialogueOff ;
12602: CALL_OW 7
// end ;
12606: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12607: LD_EXP 30
12611: PPUSH
12612: CALL_OW 302
12616: PUSH
12617: LD_INT 22
12619: PUSH
12620: LD_INT 2
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 30
12629: PUSH
12630: LD_INT 6
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PPUSH
12641: CALL_OW 69
12645: AND
12646: IFFALSE 12707
12648: GO 12650
12650: DISABLE
// begin DialogueOn ;
12651: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12655: LD_EXP 30
12659: PPUSH
12660: LD_STRING DA-1-lab
12662: PPUSH
12663: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12667: LD_EXP 26
12671: PPUSH
12672: LD_STRING DH-1-lab
12674: PPUSH
12675: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12679: LD_EXP 30
12683: PPUSH
12684: LD_STRING DA-2-lab
12686: PPUSH
12687: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12691: LD_EXP 26
12695: PPUSH
12696: LD_STRING DH-2-lab
12698: PPUSH
12699: CALL_OW 88
// DialogueOff ;
12703: CALL_OW 7
// end ;
12707: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12708: LD_EXP 31
12712: PPUSH
12713: CALL_OW 302
12717: PUSH
12718: LD_INT 22
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 25
12730: PUSH
12731: LD_INT 15
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PPUSH
12742: CALL_OW 69
12746: AND
12747: PUSH
12748: LD_INT 81
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: NOT
12763: AND
12764: IFFALSE 12938
12766: GO 12768
12768: DISABLE
12769: LD_INT 0
12771: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12772: LD_ADDR_VAR 0 1
12776: PUSH
12777: LD_INT 22
12779: PUSH
12780: LD_INT 2
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: LD_INT 25
12789: PUSH
12790: LD_INT 15
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 69
12805: ST_TO_ADDR
// InGameOn ;
12806: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12810: LD_VAR 0 1
12814: PUSH
12815: LD_INT 1
12817: ARRAY
12818: PPUSH
12819: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12823: LD_VAR 0 1
12827: PUSH
12828: LD_INT 1
12830: ARRAY
12831: PPUSH
12832: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 1
12843: ARRAY
12844: PPUSH
12845: LD_INT 35
12847: PPUSH
12848: LD_INT 28
12850: PPUSH
12851: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12855: LD_VAR 0 1
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: LD_INT 36
12866: PPUSH
12867: LD_INT 17
12869: PPUSH
12870: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
12874: LD_EXP 31
12878: PPUSH
12879: LD_STRING DK-1-apesol
12881: PPUSH
12882: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
12886: LD_EXP 30
12890: PPUSH
12891: LD_STRING DA-1-apesol
12893: PPUSH
12894: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12898: LD_EXP 31
12902: PPUSH
12903: LD_STRING DK-2-apesol
12905: PPUSH
12906: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12910: LD_EXP 30
12914: PPUSH
12915: LD_STRING DA-2-apesol
12917: PPUSH
12918: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12922: LD_EXP 31
12926: PPUSH
12927: LD_STRING DK-3-apesol
12929: PPUSH
12930: CALL_OW 88
// InGameOff ;
12934: CALL_OW 9
// end ;
12938: PPOPN 1
12940: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12941: LD_EXP 32
12945: PPUSH
12946: CALL_OW 302
12950: PUSH
12951: LD_INT 22
12953: PUSH
12954: LD_INT 2
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 25
12963: PUSH
12964: LD_INT 16
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: AND
12980: PUSH
12981: LD_INT 81
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: NOT
12996: AND
12997: IFFALSE 13260
12999: GO 13001
13001: DISABLE
13002: LD_INT 0
13004: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
13005: LD_ADDR_VAR 0 1
13009: PUSH
13010: LD_INT 22
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 25
13022: PUSH
13023: LD_INT 16
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PPUSH
13034: CALL_OW 69
13038: ST_TO_ADDR
// InGameOn ;
13039: CALL_OW 8
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
13043: LD_INT 5
13045: PPUSH
13046: LD_INT 35
13048: PPUSH
13049: LD_INT 22
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
13059: LD_EXP 32
13063: PPUSH
13064: LD_VAR 0 1
13068: PUSH
13069: LD_INT 1
13071: ARRAY
13072: PPUSH
13073: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
13077: LD_VAR 0 1
13081: PUSH
13082: LD_INT 1
13084: ARRAY
13085: PPUSH
13086: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
13090: LD_VAR 0 1
13094: PUSH
13095: LD_INT 1
13097: ARRAY
13098: PPUSH
13099: CALL_OW 122
// wait ( 0 0$2 ) ;
13103: LD_INT 70
13105: PPUSH
13106: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
13110: LD_EXP 32
13114: PPUSH
13115: LD_STRING DS-1-apeeng
13117: PPUSH
13118: CALL_OW 88
// if IsOk ( Kamil ) then
13122: LD_EXP 29
13126: PPUSH
13127: CALL_OW 302
13131: IFFALSE 13256
// begin Say ( Kamil , DKam-1-apeeng ) ;
13133: LD_EXP 29
13137: PPUSH
13138: LD_STRING DKam-1-apeeng
13140: PPUSH
13141: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13145: LD_EXP 32
13149: PPUSH
13150: LD_STRING DS-2-apeeng
13152: PPUSH
13153: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13157: LD_EXP 29
13161: PPUSH
13162: LD_STRING DKam-2-apeeng
13164: PPUSH
13165: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13169: LD_EXP 32
13173: PPUSH
13174: LD_STRING DS-3-apeeng
13176: PPUSH
13177: CALL_OW 88
// if not IsOK ( Kaia ) then
13181: LD_EXP 31
13185: PPUSH
13186: CALL_OW 302
13190: NOT
13191: IFFALSE 13199
// begin InGameOff ;
13193: CALL_OW 9
// exit ;
13197: GO 13260
// end ; Say ( Kaia , DK-1-apeeng ) ;
13199: LD_EXP 31
13203: PPUSH
13204: LD_STRING DK-1-apeeng
13206: PPUSH
13207: CALL_OW 88
// if not IsOk ( Givi ) then
13211: LD_EXP 27
13215: PPUSH
13216: CALL_OW 302
13220: NOT
13221: IFFALSE 13232
// begin Video ( false ) ;
13223: LD_INT 0
13225: PPUSH
13226: CALL 1020 0 1
// exit ;
13230: GO 13260
// end ; Say ( Givi , DG-1-apeeng ) ;
13232: LD_EXP 27
13236: PPUSH
13237: LD_STRING DG-1-apeeng
13239: PPUSH
13240: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13244: LD_EXP 31
13248: PPUSH
13249: LD_STRING DK-2-apeeng
13251: PPUSH
13252: CALL_OW 88
// end ; InGameOff ;
13256: CALL_OW 9
// end ;
13260: PPOPN 1
13262: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13263: LD_EXP 4
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 30
13280: PUSH
13281: LD_INT 0
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PPUSH
13292: CALL_OW 69
13296: AND
13297: IFFALSE 13462
13299: GO 13301
13301: DISABLE
// begin wait ( 0 0$10 ) ;
13302: LD_INT 350
13304: PPUSH
13305: CALL_OW 67
// DialogueOn ;
13309: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13313: LD_EXP 34
13317: PPUSH
13318: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13322: LD_EXP 34
13326: PPUSH
13327: LD_STRING DF-1-distribution
13329: PPUSH
13330: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13334: LD_EXP 26
13338: PPUSH
13339: LD_STRING DH-2-distribution
13341: PPUSH
13342: CALL_OW 88
// if IsOk ( Kaia ) then
13346: LD_EXP 31
13350: PPUSH
13351: CALL_OW 302
13355: IFFALSE 13416
// begin Say ( Kaia , DK-1-distribution ) ;
13357: LD_EXP 31
13361: PPUSH
13362: LD_STRING DK-1-distribution
13364: PPUSH
13365: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13369: LD_EXP 26
13373: PPUSH
13374: LD_STRING DH-1-distribution
13376: PPUSH
13377: CALL_OW 88
// if IsOk ( Givi ) then
13381: LD_EXP 27
13385: PPUSH
13386: CALL_OW 302
13390: IFFALSE 13416
// begin Say ( Givi , DG-1-distribution ) ;
13392: LD_EXP 27
13396: PPUSH
13397: LD_STRING DG-1-distribution
13399: PPUSH
13400: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13404: LD_EXP 26
13408: PPUSH
13409: LD_STRING DH-3-distribution
13411: PPUSH
13412: CALL_OW 88
// end ; end ; DialogueOff ;
13416: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13420: LD_STRING Crates1
13422: PPUSH
13423: CALL_OW 337
// farmerRequestedCrates := 300 ;
13427: LD_ADDR_EXP 14
13431: PUSH
13432: LD_INT 300
13434: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13435: LD_STRING FarmerCrates
13437: PPUSH
13438: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13442: LD_INT 10
13444: PPUSH
13445: LD_INT 1
13447: PPUSH
13448: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13452: LD_INT 108
13454: PPUSH
13455: LD_INT 61
13457: PPUSH
13458: CALL_OW 86
// end ;
13462: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13463: LD_EXP 6
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 3
13480: PUSH
13481: LD_INT 57
13483: PUSH
13484: EMPTY
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: LD_INT 30
13496: PUSH
13497: LD_INT 6
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 30
13506: PUSH
13507: LD_INT 7
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: PPUSH
13524: CALL_OW 69
13528: AND
13529: PUSH
13530: LD_INT 22
13532: PUSH
13533: LD_INT 2
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: LD_INT 57
13545: PUSH
13546: EMPTY
13547: LIST
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 30
13555: PUSH
13556: LD_INT 4
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: PPUSH
13568: CALL_OW 69
13572: AND
13573: IFFALSE 13737
13575: GO 13577
13577: DISABLE
13578: LD_INT 0
13580: PPUSH
// begin wait ( 0 0$10 ) ;
13581: LD_INT 350
13583: PPUSH
13584: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13588: LD_ADDR_VAR 0 1
13592: PUSH
13593: LD_EXP 40
13597: PPUSH
13598: LD_INT 26
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 25
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 72
13626: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13627: LD_EXP 26
13631: PPUSH
13632: LD_STRING DH-1-task
13634: PPUSH
13635: CALL_OW 88
// if IsOk ( Sophia ) then
13639: LD_EXP 32
13643: PPUSH
13644: CALL_OW 302
13648: IFFALSE 13688
// begin Say ( Sophia , DS-1-task ) ;
13650: LD_EXP 32
13654: PPUSH
13655: LD_STRING DS-1-task
13657: PPUSH
13658: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13662: LD_EXP 32
13666: PPUSH
13667: LD_STRING DS-2-task
13669: PPUSH
13670: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13674: LD_EXP 26
13678: PPUSH
13679: LD_STRING DH-2-task
13681: PPUSH
13682: CALL_OW 88
// end else
13686: GO 13722
// if eng then
13688: LD_VAR 0 1
13692: IFFALSE 13722
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13694: LD_VAR 0 1
13698: PUSH
13699: LD_INT 1
13701: ARRAY
13702: PPUSH
13703: LD_STRING DArm-1-task
13705: PPUSH
13706: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13710: LD_EXP 26
13714: PPUSH
13715: LD_STRING DH-2-task
13717: PPUSH
13718: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13722: LD_STRING BaseConstructed
13724: PPUSH
13725: CALL_OW 337
// allowConvoys := true ;
13729: LD_ADDR_EXP 11
13733: PUSH
13734: LD_INT 1
13736: ST_TO_ADDR
// end ;
13737: PPOPN 1
13739: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13740: LD_INT 22
13742: PUSH
13743: LD_INT 4
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 34
13752: PUSH
13753: LD_INT 12
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PPUSH
13764: CALL_OW 69
13768: IFFALSE 13936
13770: GO 13772
13772: DISABLE
13773: LD_INT 0
13775: PPUSH
13776: PPUSH
13777: PPUSH
// begin wait ( 0 0$2 ) ;
13778: LD_INT 70
13780: PPUSH
13781: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13785: LD_ADDR_VAR 0 1
13789: PUSH
13790: LD_INT 22
13792: PUSH
13793: LD_INT 4
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 34
13802: PUSH
13803: LD_INT 12
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13819: LD_ADDR_VAR 0 2
13823: PUSH
13824: LD_VAR 0 1
13828: PUSH
13829: LD_INT 1
13831: ARRAY
13832: PPUSH
13833: CALL_OW 250
13837: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13838: LD_ADDR_VAR 0 3
13842: PUSH
13843: LD_VAR 0 1
13847: PUSH
13848: LD_INT 1
13850: ARRAY
13851: PPUSH
13852: CALL_OW 251
13856: ST_TO_ADDR
// DialogueOn ;
13857: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13861: LD_VAR 0 2
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13875: LD_VAR 0 2
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 2
13887: PPUSH
13888: LD_INT 6
13890: NEG
13891: PPUSH
13892: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13896: LD_INT 10
13898: PPUSH
13899: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13903: LD_EXP 26
13907: PPUSH
13908: LD_STRING DH-1-seecargo
13910: PPUSH
13911: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13915: LD_VAR 0 2
13919: PPUSH
13920: LD_VAR 0 3
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: CALL_OW 331
// DialogueOff ;
13932: CALL_OW 7
// end ;
13936: PPOPN 3
13938: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13939: LD_EXP 4
13943: PUSH
13944: LD_EXP 13
13948: PUSH
13949: LD_INT 300
13951: GREATEREQUAL
13952: AND
13953: IFFALSE 14025
13955: GO 13957
13957: DISABLE
// begin DialogueOn ;
13958: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13962: LD_EXP 34
13966: PPUSH
13967: LD_STRING DF-1-delivery-2
13969: PPUSH
13970: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13974: LD_EXP 26
13978: PPUSH
13979: LD_STRING DH-1-delivery-2
13981: PPUSH
13982: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13986: LD_EXP 34
13990: PPUSH
13991: LD_STRING DF-2-delivery-2
13993: PPUSH
13994: CALL_OW 94
// DialogueOff ;
13998: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
14002: LD_STRING Crates2
14004: PPUSH
14005: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14009: LD_ADDR_EXP 15
14013: PUSH
14014: LD_INT 63000
14016: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
14017: LD_ADDR_EXP 14
14021: PUSH
14022: LD_INT 600
14024: ST_TO_ADDR
// end ;
14025: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 do
14026: LD_EXP 4
14030: PUSH
14031: LD_EXP 13
14035: PUSH
14036: LD_INT 600
14038: GREATEREQUAL
14039: AND
14040: IFFALSE 14206
14042: GO 14044
14044: DISABLE
// begin DialogueOn ;
14045: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
14049: LD_EXP 34
14053: PPUSH
14054: LD_STRING DF-1-delivery-3
14056: PPUSH
14057: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
14061: LD_EXP 26
14065: PPUSH
14066: LD_STRING DH-1-delivery-3
14068: PPUSH
14069: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
14073: LD_EXP 34
14077: PPUSH
14078: LD_STRING DF-2-delivery-3
14080: PPUSH
14081: CALL_OW 94
// if IsOk ( Kaia ) then
14085: LD_EXP 31
14089: PPUSH
14090: CALL_OW 302
14094: IFFALSE 14144
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14096: LD_EXP 31
14100: PPUSH
14101: LD_STRING DK-1-delivery-3
14103: PPUSH
14104: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14108: LD_EXP 26
14112: PPUSH
14113: LD_STRING DH-2-delivery-3
14115: PPUSH
14116: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14120: LD_EXP 27
14124: PPUSH
14125: LD_STRING DG-1-delivery-3
14127: PPUSH
14128: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14132: LD_EXP 28
14136: PPUSH
14137: LD_STRING DM-1-delivery-3
14139: PPUSH
14140: CALL_OW 88
// end ; DialogueOff ;
14144: CALL_OW 7
// if Difficulty = 2 then
14148: LD_OWVAR 67
14152: PUSH
14153: LD_INT 2
14155: EQUAL
14156: IFFALSE 14183
// begin ChangeMissionObjectives ( Crates3 ) ;
14158: LD_STRING Crates3
14160: PPUSH
14161: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14165: LD_ADDR_EXP 15
14169: PUSH
14170: LD_INT 63000
14172: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
14173: LD_ADDR_EXP 14
14177: PUSH
14178: LD_INT 900
14180: ST_TO_ADDR
// end else
14181: GO 14206
// begin ChangeMissionObjectives ( Crates4 ) ;
14183: LD_STRING Crates4
14185: PPUSH
14186: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14190: LD_ADDR_EXP 15
14194: PUSH
14195: LD_INT 63000
14197: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
14198: LD_ADDR_EXP 14
14202: PUSH
14203: LD_INT 1200
14205: ST_TO_ADDR
// end ; end ;
14206: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
14207: LD_EXP 4
14211: PUSH
14212: LD_EXP 13
14216: PUSH
14217: LD_INT 600
14219: PUSH
14220: LD_INT 900
14222: PUSH
14223: LD_INT 1200
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: PUSH
14231: LD_OWVAR 67
14235: ARRAY
14236: GREATEREQUAL
14237: AND
14238: PUSH
14239: LD_EXP 14
14243: PUSH
14244: LD_EXP 15
14248: LESSEQUAL
14249: AND
14250: IFFALSE 14317
14252: GO 14254
14254: DISABLE
// begin retreatAllowed := true ;
14255: LD_ADDR_EXP 10
14259: PUSH
14260: LD_INT 1
14262: ST_TO_ADDR
// display_strings := [ ] ;
14263: LD_ADDR_OWVAR 47
14267: PUSH
14268: EMPTY
14269: ST_TO_ADDR
// DialogueOn ;
14270: CALL_OW 6
// InGameOn ;
14274: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14278: LD_EXP 35
14282: PPUSH
14283: LD_STRING DO-radio-end
14285: PPUSH
14286: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14290: LD_EXP 26
14294: PPUSH
14295: LD_STRING DH-1-radio-end
14297: PPUSH
14298: CALL_OW 88
// InGameOff ;
14302: CALL_OW 9
// DialogueOff ;
14306: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14310: LD_STRING Retreat
14312: PPUSH
14313: CALL_OW 337
// end ;
14317: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14318: LD_EXP 10
14322: IFFALSE 14457
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14331: LD_INT 10
14333: PPUSH
14334: LD_INT 0
14336: PPUSH
14337: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14341: LD_ADDR_VAR 0 1
14345: PUSH
14346: LD_EXP 37
14350: PPUSH
14351: LD_INT 25
14353: PUSH
14354: LD_INT 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 72
14365: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14366: LD_VAR 0 1
14370: PUSH
14371: LD_INT 102
14373: PPUSH
14374: LD_INT 69
14376: PPUSH
14377: CALL_OW 428
14381: PUSH
14382: LD_INT 0
14384: EQUAL
14385: AND
14386: IFFALSE 14453
// begin for i in tmp do
14388: LD_ADDR_VAR 0 2
14392: PUSH
14393: LD_VAR 0 1
14397: PUSH
14398: FOR_IN
14399: IFFALSE 14423
// if IsInUnit ( i ) then
14401: LD_VAR 0 2
14405: PPUSH
14406: CALL_OW 310
14410: IFFALSE 14421
// ComExitBuilding ( i ) ;
14412: LD_VAR 0 2
14416: PPUSH
14417: CALL_OW 122
14421: GO 14398
14423: POP
14424: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14425: LD_VAR 0 1
14429: PPUSH
14430: LD_INT 31
14432: PPUSH
14433: LD_INT 102
14435: PPUSH
14436: LD_INT 69
14438: PPUSH
14439: LD_INT 2
14441: PPUSH
14442: CALL_OW 205
// wait ( 0 0$3 ) ;
14446: LD_INT 105
14448: PPUSH
14449: CALL_OW 67
// end ; StartCargoEvacuation ;
14453: CALL 4554 0 0
// end ;
14457: PPOPN 2
14459: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14460: LD_EXP 10
14464: NOT
14465: PUSH
14466: LD_INT 5
14468: PPUSH
14469: CALL_OW 301
14473: AND
14474: IFFALSE 14498
14476: GO 14478
14478: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
14479: LD_EXP 34
14483: PPUSH
14484: LD_STRING DF-1-failure
14486: PPUSH
14487: CALL_OW 94
// YouLost ( FarmerDepot ) ;
14491: LD_STRING FarmerDepot
14493: PPUSH
14494: CALL_OW 104
// end ;
14498: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 and not FilterAllUnits ( [ f_enemy , 2 ] ) do var i , max , tmp ;
14499: LD_EXP 10
14503: PUSH
14504: LD_EXP 26
14508: PPUSH
14509: LD_EXP 34
14513: PPUSH
14514: CALL_OW 296
14518: PUSH
14519: LD_INT 6
14521: LESS
14522: AND
14523: PUSH
14524: LD_INT 81
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: NOT
14539: AND
14540: IFFALSE 15137
14542: GO 14544
14544: DISABLE
14545: LD_INT 0
14547: PPUSH
14548: PPUSH
14549: PPUSH
// begin allowConvoys := false ;
14550: LD_ADDR_EXP 11
14554: PUSH
14555: LD_INT 0
14557: ST_TO_ADDR
// InGameOn ;
14558: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14562: LD_EXP 26
14566: PPUSH
14567: LD_EXP 34
14571: PPUSH
14572: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14576: LD_EXP 34
14580: PPUSH
14581: LD_EXP 26
14585: PPUSH
14586: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14590: LD_EXP 34
14594: PPUSH
14595: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14599: LD_EXP 26
14603: PPUSH
14604: LD_STRING DH-1-end
14606: PPUSH
14607: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14611: LD_EXP 34
14615: PPUSH
14616: LD_STRING DF-1-end
14618: PPUSH
14619: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14623: LD_EXP 34
14627: PPUSH
14628: LD_STRING DF-2-end
14630: PPUSH
14631: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14635: LD_EXP 26
14639: PPUSH
14640: LD_STRING DH-2-end
14642: PPUSH
14643: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14647: LD_EXP 34
14651: PPUSH
14652: LD_STRING DF-3-end
14654: PPUSH
14655: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14659: LD_EXP 26
14663: PPUSH
14664: LD_STRING DH-3-end
14666: PPUSH
14667: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14671: LD_EXP 27
14675: PPUSH
14676: LD_STRING DG-1-end
14678: PPUSH
14679: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14683: LD_EXP 26
14687: PPUSH
14688: LD_STRING DH-4-end
14690: PPUSH
14691: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14695: LD_EXP 34
14699: PPUSH
14700: LD_STRING DF-4-end
14702: PPUSH
14703: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14707: LD_EXP 26
14711: PPUSH
14712: LD_STRING DH-5-end
14714: PPUSH
14715: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14719: LD_EXP 34
14723: PPUSH
14724: LD_STRING DF-5-end
14726: PPUSH
14727: CALL_OW 88
// InGameOff ;
14731: CALL_OW 9
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14735: LD_ADDR_VAR 0 2
14739: PUSH
14740: LD_INT 4
14742: PUSH
14743: LD_INT 3
14745: PUSH
14746: LD_INT 2
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: PUSH
14754: LD_OWVAR 67
14758: ARRAY
14759: ST_TO_ADDR
// if farmerSquad < max then
14760: LD_EXP 37
14764: PUSH
14765: LD_VAR 0 2
14769: LESS
14770: IFFALSE 14782
// max := farmerSquad ;
14772: LD_ADDR_VAR 0 2
14776: PUSH
14777: LD_EXP 37
14781: ST_TO_ADDR
// for i := 1 to max do
14782: LD_ADDR_VAR 0 1
14786: PUSH
14787: DOUBLE
14788: LD_INT 1
14790: DEC
14791: ST_TO_ADDR
14792: LD_VAR 0 2
14796: PUSH
14797: FOR_TO
14798: IFFALSE 14836
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14800: LD_EXP 37
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: PPUSH
14809: LD_INT 2
14811: PPUSH
14812: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14816: LD_ADDR_EXP 37
14820: PUSH
14821: LD_EXP 37
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 3
14833: ST_TO_ADDR
// end ;
14834: GO 14797
14836: POP
14837: POP
// for i in Farmer ^ farmerSquad do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: LD_EXP 34
14847: PUSH
14848: LD_EXP 37
14852: ADD
14853: PUSH
14854: FOR_IN
14855: IFFALSE 14894
// begin if IsInUnit ( i ) then
14857: LD_VAR 0 1
14861: PPUSH
14862: CALL_OW 310
14866: IFFALSE 14877
// ComExitBuilding ( i ) ;
14868: LD_VAR 0 1
14872: PPUSH
14873: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14877: LD_VAR 0 1
14881: PPUSH
14882: LD_INT 102
14884: PPUSH
14885: LD_INT 7
14887: PPUSH
14888: CALL_OW 171
// end ;
14892: GO 14854
14894: POP
14895: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14896: LD_ADDR_VAR 0 1
14900: PUSH
14901: LD_INT 22
14903: PUSH
14904: LD_INT 5
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 21
14913: PUSH
14914: LD_INT 3
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: PUSH
14930: LD_INT 5
14932: DIFF
14933: PUSH
14934: FOR_IN
14935: IFFALSE 14951
// SetSide ( i , 2 ) ;
14937: LD_VAR 0 1
14941: PPUSH
14942: LD_INT 2
14944: PPUSH
14945: CALL_OW 235
14949: GO 14934
14951: POP
14952: POP
// repeat wait ( 0 0$1 ) ;
14953: LD_INT 35
14955: PPUSH
14956: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_EXP 34
14969: PUSH
14970: LD_EXP 37
14974: ADD
14975: PPUSH
14976: LD_INT 95
14978: PUSH
14979: LD_INT 3
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PPUSH
14986: CALL_OW 72
14990: ST_TO_ADDR
// if tmp then
14991: LD_VAR 0 3
14995: IFFALSE 15039
// for i in tmp do
14997: LD_ADDR_VAR 0 1
15001: PUSH
15002: LD_VAR 0 3
15006: PUSH
15007: FOR_IN
15008: IFFALSE 15037
// begin farmerSquad := farmerSquad diff i ;
15010: LD_ADDR_EXP 37
15014: PUSH
15015: LD_EXP 37
15019: PUSH
15020: LD_VAR 0 1
15024: DIFF
15025: ST_TO_ADDR
// RemoveUnit ( i ) ;
15026: LD_VAR 0 1
15030: PPUSH
15031: CALL_OW 64
// end ;
15035: GO 15007
15037: POP
15038: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15039: LD_EXP 37
15043: PUSH
15044: EMPTY
15045: EQUAL
15046: PUSH
15047: LD_EXP 34
15051: PPUSH
15052: CALL_OW 305
15056: NOT
15057: AND
15058: IFFALSE 14953
// if farmerHumanLoseCounter = 0 then
15060: LD_EXP 18
15064: PUSH
15065: LD_INT 0
15067: EQUAL
15068: IFFALSE 15077
// SetAchievement ( ACH_BABY ) ;
15070: LD_STRING ACH_BABY
15072: PPUSH
15073: CALL_OW 543
// wait ( 1 1$00 ) ;
15077: LD_INT 2100
15079: PPUSH
15080: CALL_OW 67
// SendAttack ;
15084: CALL 7011 0 0
// wait ( [ 2 2$00 , 1 1$30 , 1 1$00 ] [ Difficulty ] ) ;
15088: LD_INT 4200
15090: PUSH
15091: LD_INT 3150
15093: PUSH
15094: LD_INT 2100
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: PUSH
15102: LD_OWVAR 67
15106: ARRAY
15107: PPUSH
15108: CALL_OW 67
// SendAttack ;
15112: CALL 7011 0 0
// if Difficulty > 2 then
15116: LD_OWVAR 67
15120: PUSH
15121: LD_INT 2
15123: GREATER
15124: IFFALSE 15137
// begin wait ( 2 2$30 ) ;
15126: LD_INT 5250
15128: PPUSH
15129: CALL_OW 67
// SendAttack ;
15133: CALL 7011 0 0
// end ; end ;
15137: PPOPN 3
15139: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15140: LD_EXP 15
15144: PUSH
15145: LD_INT 18900
15147: LESSEQUAL
15148: IFFALSE 15197
15150: GO 15152
15152: DISABLE
// begin DialogueOn ;
15153: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15157: LD_EXP 34
15161: PPUSH
15162: LD_STRING DF-1-distribution-a
15164: PPUSH
15165: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15169: LD_EXP 26
15173: PPUSH
15174: LD_STRING DH-1-distribution-a
15176: PPUSH
15177: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15181: LD_EXP 34
15185: PPUSH
15186: LD_STRING DF-2-distribution-a
15188: PPUSH
15189: CALL_OW 94
// DialogueOff ;
15193: CALL_OW 7
// end ;
15197: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15198: LD_EXP 15
15202: PUSH
15203: LD_INT 0
15205: LESSEQUAL
15206: IFFALSE 15238
15208: GO 15210
15210: DISABLE
// begin DialogueOn ;
15211: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15215: LD_EXP 34
15219: PPUSH
15220: LD_STRING DF-3-distribution-a
15222: PPUSH
15223: CALL_OW 94
// YouLost ( Distribution ) ;
15227: LD_STRING Distribution
15229: PPUSH
15230: CALL_OW 104
// DialogueOff ;
15234: CALL_OW 7
// end ;
15238: END
// every 0 0$1 trigger vehCounter >= 2 do
15239: LD_EXP 20
15243: PUSH
15244: LD_INT 2
15246: GREATEREQUAL
15247: IFFALSE 15259
15249: GO 15251
15251: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15252: LD_STRING VehConstructed
15254: PPUSH
15255: CALL_OW 337
15259: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15260: LD_INT 22
15262: PUSH
15263: LD_INT 2
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 34
15272: PUSH
15273: LD_INT 12
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 69
15288: IFFALSE 15348
15290: GO 15292
15292: DISABLE
// begin DialogueOn ;
15293: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15297: LD_EXP 26
15301: PPUSH
15302: LD_STRING DH-1-truck
15304: PPUSH
15305: CALL_OW 88
// if IsOk ( Markov ) then
15309: LD_EXP 33
15313: PPUSH
15314: CALL_OW 302
15318: IFFALSE 15344
// begin Say ( Markov , DMar-1-truck ) ;
15320: LD_EXP 33
15324: PPUSH
15325: LD_STRING DMar-1-truck
15327: PPUSH
15328: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15332: LD_EXP 26
15336: PPUSH
15337: LD_STRING DH-2-truck
15339: PPUSH
15340: CALL_OW 88
// end ; DialogueOff ;
15344: CALL_OW 7
// end ;
15348: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15349: LD_INT 0
15351: PPUSH
15352: PPUSH
15353: PPUSH
// if IsOk ( Givi ) then
15354: LD_EXP 27
15358: PPUSH
15359: CALL_OW 302
15363: IFFALSE 15379
// begin Say ( Givi , DG-1-nocargo ) ;
15365: LD_EXP 27
15369: PPUSH
15370: LD_STRING DG-1-nocargo
15372: PPUSH
15373: CALL_OW 88
// exit ;
15377: GO 15475
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: LD_EXP 40
15388: PPUSH
15389: LD_INT 26
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 72
15403: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15404: LD_ADDR_VAR 0 3
15408: PUSH
15409: LD_EXP 40
15413: PPUSH
15414: LD_INT 26
15416: PUSH
15417: LD_INT 2
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 72
15428: ST_TO_ADDR
// if randomMen then
15429: LD_VAR 0 2
15433: IFFALSE 15453
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15435: LD_VAR 0 2
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: PPUSH
15444: LD_STRING DArm-1-nocargo
15446: PPUSH
15447: CALL_OW 88
15451: GO 15475
// if randomWomen then
15453: LD_VAR 0 3
15457: IFFALSE 15475
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15459: LD_VAR 0 3
15463: PUSH
15464: LD_INT 1
15466: ARRAY
15467: PPUSH
15468: LD_STRING DArf-1-nocargo
15470: PPUSH
15471: CALL_OW 88
// end ;
15475: LD_VAR 0 1
15479: RET
// export function IncomingAttack ; begin
15480: LD_INT 0
15482: PPUSH
// if attackWave = 1 then
15483: LD_EXP 17
15487: PUSH
15488: LD_INT 1
15490: EQUAL
15491: IFFALSE 15562
// begin DialogueOn ;
15493: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15497: LD_EXP 35
15501: PPUSH
15502: LD_STRING DO-1-radio-1
15504: PPUSH
15505: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15509: LD_EXP 26
15513: PPUSH
15514: LD_STRING DH-1-radio-1-
15516: PPUSH
15517: CALL_OW 88
// if IsOk ( Markov ) then
15521: LD_EXP 33
15525: PPUSH
15526: CALL_OW 302
15530: IFFALSE 15556
// begin Say ( Markov , DMar-1-radio-1 ) ;
15532: LD_EXP 33
15536: PPUSH
15537: LD_STRING DMar-1-radio-1
15539: PPUSH
15540: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15544: LD_EXP 26
15548: PPUSH
15549: LD_STRING DH-2-radio-1
15551: PPUSH
15552: CALL_OW 88
// end ; DialogueOff ;
15556: CALL_OW 7
// end else
15560: GO 15586
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15562: LD_EXP 35
15566: PPUSH
15567: LD_STRING DO-1-radio-u
15569: PPUSH
15570: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15574: LD_EXP 26
15578: PPUSH
15579: LD_STRING DH-1-radio-u
15581: PPUSH
15582: CALL_OW 88
// end ; end ;
15586: LD_VAR 0 1
15590: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15591: LD_EXP 42
15595: PPUSH
15596: LD_INT 95
15598: PUSH
15599: LD_INT 8
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PPUSH
15606: CALL_OW 72
15610: IFFALSE 15713
15612: GO 15614
15614: DISABLE
15615: LD_INT 0
15617: PPUSH
// begin enable ;
15618: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_EXP 42
15628: PPUSH
15629: LD_INT 95
15631: PUSH
15632: LD_INT 8
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 72
15643: PUSH
15644: FOR_IN
15645: IFFALSE 15674
// begin usForces := usForces diff i ;
15647: LD_ADDR_EXP 42
15651: PUSH
15652: LD_EXP 42
15656: PUSH
15657: LD_VAR 0 1
15661: DIFF
15662: ST_TO_ADDR
// RemoveUnit ( i ) ;
15663: LD_VAR 0 1
15667: PPUSH
15668: CALL_OW 64
// end ;
15672: GO 15644
15674: POP
15675: POP
// if not americanHasEscaped and attackWave = 1 then
15676: LD_EXP 7
15680: NOT
15681: PUSH
15682: LD_EXP 17
15686: PUSH
15687: LD_INT 1
15689: EQUAL
15690: AND
15691: IFFALSE 15713
// begin americanHasEscaped := true ;
15693: LD_ADDR_EXP 7
15697: PUSH
15698: LD_INT 1
15700: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15701: LD_EXP 26
15705: PPUSH
15706: LD_STRING DH-2-assault-a
15708: PPUSH
15709: CALL_OW 88
// end ; end ;
15713: PPOPN 1
15715: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) do
15716: LD_INT 4
15718: PPUSH
15719: LD_INT 22
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PPUSH
15729: CALL_OW 70
15733: IFFALSE 15750
15735: GO 15737
15737: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15738: LD_EXP 34
15742: PPUSH
15743: LD_STRING DF-1-attack
15745: PPUSH
15746: CALL_OW 94
15750: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15751: LD_INT 5
15753: PPUSH
15754: CALL_OW 255
15758: PUSH
15759: LD_INT 2
15761: EQUAL
15762: IFFALSE 15774
15764: GO 15766
15766: DISABLE
// YouLost ( Attack ) ;
15767: LD_STRING Attack
15769: PPUSH
15770: CALL_OW 104
15774: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15775: LD_INT 22
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 21
15787: PUSH
15788: LD_INT 1
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PPUSH
15799: CALL_OW 69
15803: NOT
15804: PUSH
15805: LD_INT 22
15807: PUSH
15808: LD_INT 4
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: NOT
15820: AND
15821: PUSH
15822: LD_EXP 10
15826: NOT
15827: AND
15828: PUSH
15829: LD_EXP 13
15833: PUSH
15834: LD_INT 90
15836: GREATER
15837: AND
15838: PUSH
15839: LD_INT 7
15841: PPUSH
15842: LD_INT 22
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 21
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PPUSH
15866: CALL_OW 70
15870: AND
15871: PUSH
15872: LD_INT 22
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 50
15884: PUSH
15885: EMPTY
15886: LIST
15887: PUSH
15888: LD_INT 30
15890: PUSH
15891: LD_INT 0
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: PPUSH
15903: CALL_OW 69
15907: AND
15908: IFFALSE 16609
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
15916: PPUSH
15917: PPUSH
15918: PPUSH
15919: PPUSH
// begin depot := usDepot ;
15920: LD_ADDR_VAR 0 5
15924: PUSH
15925: LD_INT 11
15927: ST_TO_ADDR
// if not depot then
15928: LD_VAR 0 5
15932: NOT
15933: IFFALSE 15973
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_INT 22
15942: PUSH
15943: LD_INT 2
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 30
15952: PUSH
15953: LD_INT 0
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 69
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15973: LD_ADDR_VAR 0 1
15977: PUSH
15978: LD_EXP 40
15982: PPUSH
15983: LD_INT 26
15985: PUSH
15986: LD_INT 1
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 72
15997: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15998: LD_ADDR_VAR 0 2
16002: PUSH
16003: LD_EXP 40
16007: PPUSH
16008: LD_INT 26
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PPUSH
16018: CALL_OW 72
16022: ST_TO_ADDR
// if IsOk ( Kaia ) then
16023: LD_EXP 31
16027: PPUSH
16028: CALL_OW 302
16032: IFFALSE 16053
// speaker := [ Kaia , DK ] else
16034: LD_ADDR_VAR 0 3
16038: PUSH
16039: LD_EXP 31
16043: PUSH
16044: LD_STRING DK
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: ST_TO_ADDR
16051: GO 16133
// if randomMen then
16053: LD_VAR 0 1
16057: IFFALSE 16092
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16059: LD_ADDR_VAR 0 3
16063: PUSH
16064: LD_VAR 0 1
16068: PUSH
16069: LD_INT 1
16071: PPUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 12
16081: ARRAY
16082: PUSH
16083: LD_STRING DArm
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: ST_TO_ADDR
16090: GO 16133
// if randomWomen then
16092: LD_VAR 0 2
16096: IFFALSE 16131
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16098: LD_ADDR_VAR 0 3
16102: PUSH
16103: LD_VAR 0 2
16107: PUSH
16108: LD_INT 1
16110: PPUSH
16111: LD_VAR 0 2
16115: PPUSH
16116: CALL_OW 12
16120: ARRAY
16121: PUSH
16122: LD_STRING DArf
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: ST_TO_ADDR
16129: GO 16133
// exit ;
16131: GO 16609
// if IsInUnit ( speaker [ 1 ] ) then
16133: LD_VAR 0 3
16137: PUSH
16138: LD_INT 1
16140: ARRAY
16141: PPUSH
16142: CALL_OW 310
16146: IFFALSE 16169
// place := IsInUnit ( speaker [ 1 ] ) else
16148: LD_ADDR_VAR 0 4
16152: PUSH
16153: LD_VAR 0 3
16157: PUSH
16158: LD_INT 1
16160: ARRAY
16161: PPUSH
16162: CALL_OW 310
16166: ST_TO_ADDR
16167: GO 16183
// place := speaker [ 1 ] ;
16169: LD_ADDR_VAR 0 4
16173: PUSH
16174: LD_VAR 0 3
16178: PUSH
16179: LD_INT 1
16181: ARRAY
16182: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16183: LD_VAR 0 4
16187: PPUSH
16188: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16192: LD_VAR 0 4
16196: PPUSH
16197: CALL_OW 250
16201: PPUSH
16202: LD_VAR 0 4
16206: PPUSH
16207: CALL_OW 251
16211: PPUSH
16212: CALL 3062 0 2
// wait ( 0 0$2 ) ;
16216: LD_INT 70
16218: PPUSH
16219: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16223: LD_EXP 36
16227: PPUSH
16228: CALL_OW 305
16232: NOT
16233: IFFALSE 16237
// exit ;
16235: GO 16609
// allowConvoys := false ;
16237: LD_ADDR_EXP 11
16241: PUSH
16242: LD_INT 0
16244: ST_TO_ADDR
// InGameOn ;
16245: CALL_OW 8
// wait ( 0 0$1 ) ;
16249: LD_INT 35
16251: PPUSH
16252: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16256: LD_EXP 36
16260: PPUSH
16261: LD_STRING DI-1-land
16263: PPUSH
16264: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16268: LD_VAR 0 3
16272: PUSH
16273: LD_INT 1
16275: ARRAY
16276: PPUSH
16277: CALL_OW 310
16281: IFFALSE 16296
// ComExit ( speaker [ 1 ] ) ;
16283: LD_VAR 0 3
16287: PUSH
16288: LD_INT 1
16290: ARRAY
16291: PPUSH
16292: CALL 1124 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16296: LD_VAR 0 3
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PPUSH
16305: LD_EXP 36
16309: PPUSH
16310: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16314: LD_VAR 0 3
16318: PUSH
16319: LD_INT 1
16321: ARRAY
16322: PPUSH
16323: LD_EXP 36
16327: PPUSH
16328: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16332: LD_EXP 36
16336: PPUSH
16337: LD_VAR 0 3
16341: PUSH
16342: LD_INT 1
16344: ARRAY
16345: PPUSH
16346: CALL_OW 119
// wait ( 0 0$1 ) ;
16350: LD_INT 35
16352: PPUSH
16353: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16357: LD_VAR 0 3
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: LD_VAR 0 3
16370: PUSH
16371: LD_INT 2
16373: ARRAY
16374: PUSH
16375: LD_STRING -1-land
16377: STR
16378: PPUSH
16379: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16383: LD_EXP 36
16387: PPUSH
16388: LD_STRING DI-2-land
16390: PPUSH
16391: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16395: LD_VAR 0 3
16399: PUSH
16400: LD_INT 1
16402: ARRAY
16403: PPUSH
16404: LD_VAR 0 3
16408: PUSH
16409: LD_INT 2
16411: ARRAY
16412: PUSH
16413: LD_STRING -2-land
16415: STR
16416: PPUSH
16417: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16421: LD_VAR 0 3
16425: PUSH
16426: LD_INT 1
16428: ARRAY
16429: PPUSH
16430: LD_VAR 0 3
16434: PUSH
16435: LD_INT 2
16437: ARRAY
16438: PUSH
16439: LD_STRING -3-land
16441: STR
16442: PPUSH
16443: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16447: LD_EXP 26
16451: PPUSH
16452: LD_STRING DH-1-land
16454: PPUSH
16455: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16459: LD_VAR 0 5
16463: PPUSH
16464: CALL_OW 313
16468: PUSH
16469: LD_INT 6
16471: EQUAL
16472: IFFALSE 16492
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16474: LD_VAR 0 5
16478: PPUSH
16479: CALL_OW 313
16483: PUSH
16484: LD_INT 1
16486: ARRAY
16487: PPUSH
16488: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16492: LD_EXP 36
16496: PPUSH
16497: LD_INT 2
16499: PPUSH
16500: CALL_OW 235
// CenterOnUnits ( depot ) ;
16504: LD_VAR 0 5
16508: PPUSH
16509: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16513: LD_EXP 36
16517: PPUSH
16518: LD_VAR 0 5
16522: PPUSH
16523: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16527: LD_VAR 0 3
16531: PUSH
16532: LD_INT 1
16534: ARRAY
16535: PPUSH
16536: LD_VAR 0 5
16540: PPUSH
16541: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16545: LD_INT 35
16547: PPUSH
16548: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) ;
16552: LD_EXP 36
16556: PPUSH
16557: CALL_OW 310
16561: PUSH
16562: LD_EXP 36
16566: PPUSH
16567: CALL_OW 302
16571: NOT
16572: OR
16573: IFFALSE 16545
// InGameOff ;
16575: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16579: LD_EXP 36
16583: PPUSH
16584: CALL_OW 302
16588: NOT
16589: IFFALSE 16593
// exit ;
16591: GO 16609
// ibrahimInDepot := true ;
16593: LD_ADDR_EXP 23
16597: PUSH
16598: LD_INT 1
16600: ST_TO_ADDR
// allowConvoys := true ;
16601: LD_ADDR_EXP 11
16605: PUSH
16606: LD_INT 1
16608: ST_TO_ADDR
// end ;
16609: PPOPN 5
16611: END
// export function IbrahimQuery ; begin
16612: LD_INT 0
16614: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16615: LD_STRING IbrahimQuery
16617: PPUSH
16618: CALL_OW 97
16622: PUSH
16623: LD_INT 1
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 16913
16631: POP
// begin allowConvoys := false ;
16632: LD_ADDR_EXP 11
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// ibrahimInDepot := false ;
16640: LD_ADDR_EXP 23
16644: PUSH
16645: LD_INT 0
16647: ST_TO_ADDR
// InGameOn ;
16648: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16652: LD_EXP 26
16656: PPUSH
16657: CALL_OW 87
// wait ( 0 0$1 ) ;
16661: LD_INT 35
16663: PPUSH
16664: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16668: LD_EXP 26
16672: PPUSH
16673: LD_STRING DH-1-interrogation
16675: PPUSH
16676: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16680: LD_EXP 36
16684: PPUSH
16685: LD_STRING DI-1-interrogation
16687: PPUSH
16688: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16692: LD_EXP 26
16696: PPUSH
16697: LD_STRING DH-2-interrogation
16699: PPUSH
16700: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16704: LD_EXP 36
16708: PPUSH
16709: LD_STRING DI-2-interrogation
16711: PPUSH
16712: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16716: LD_EXP 26
16720: PPUSH
16721: LD_STRING DH-3-interrogation
16723: PPUSH
16724: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16728: LD_EXP 36
16732: PPUSH
16733: LD_STRING DI-3-interrogation
16735: PPUSH
16736: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16740: LD_EXP 26
16744: PPUSH
16745: LD_STRING DH-4-interrogation
16747: PPUSH
16748: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16752: LD_EXP 36
16756: PPUSH
16757: LD_STRING DI-4-interrogation
16759: PPUSH
16760: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16764: LD_EXP 26
16768: PPUSH
16769: LD_STRING DH-5-interrogation
16771: PPUSH
16772: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16776: LD_EXP 36
16780: PPUSH
16781: LD_STRING DI-5-interrogation
16783: PPUSH
16784: CALL_OW 88
// wait ( 0 0$1 ) ;
16788: LD_INT 35
16790: PPUSH
16791: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16795: LD_STRING IbrahimDecisionQuery
16797: PPUSH
16798: CALL_OW 97
16802: PUSH
16803: LD_INT 1
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 16835
16811: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16812: LD_EXP 36
16816: PPUSH
16817: LD_STRING DI-1-kill
16819: PPUSH
16820: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16824: LD_EXP 36
16828: PPUSH
16829: CALL_OW 66
// end ; 2 :
16833: GO 16907
16835: LD_INT 2
16837: DOUBLE
16838: EQUAL
16839: IFTRUE 16843
16841: GO 16906
16843: POP
// begin SetSide ( Ibrahim , 6 ) ;
16844: LD_EXP 36
16848: PPUSH
16849: LD_INT 6
16851: PPUSH
16852: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16856: LD_EXP 36
16860: PPUSH
16861: CALL_OW 122
// AddComMoveXY ( Ibrahim , 32 , 5 ) ;
16865: LD_EXP 36
16869: PPUSH
16870: LD_INT 32
16872: PPUSH
16873: LD_INT 5
16875: PPUSH
16876: CALL_OW 171
// ComExitBuilding ( Heike ) ;
16880: LD_EXP 26
16884: PPUSH
16885: CALL_OW 122
// AddComMoveXY ( Heike , 36 , 21 ) ;
16889: LD_EXP 26
16893: PPUSH
16894: LD_INT 36
16896: PPUSH
16897: LD_INT 21
16899: PPUSH
16900: CALL_OW 171
// end ; end ;
16904: GO 16907
16906: POP
// InGameOff ;
16907: CALL_OW 9
// end ; 2 :
16911: GO 16927
16913: LD_INT 2
16915: DOUBLE
16916: EQUAL
16917: IFTRUE 16921
16919: GO 16926
16921: POP
// exit ; end ;
16922: GO 16965
16924: GO 16927
16926: POP
// allowConvoys := true ;
16927: LD_ADDR_EXP 11
16931: PUSH
16932: LD_INT 1
16934: ST_TO_ADDR
// wait ( 2 2$40 ) ;
16935: LD_INT 5600
16937: PPUSH
16938: CALL_OW 67
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16942: LD_EXP 36
16946: PPUSH
16947: LD_INT 38
16949: PPUSH
16950: LD_INT 28
16952: PPUSH
16953: CALL_OW 111
// ibrahimIsFree := true ;
16957: LD_ADDR_EXP 24
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// end ;
16965: LD_VAR 0 1
16969: RET
// every 0 0$1 trigger ibrahimIsFree and IsOk ( Ibrahim ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) and IsInArea ( Ibrahim , americanBaseArea ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot ;
16970: LD_EXP 24
16974: PUSH
16975: LD_EXP 36
16979: PPUSH
16980: CALL_OW 302
16984: AND
16985: PUSH
16986: LD_INT 22
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 50
16998: PUSH
16999: EMPTY
17000: LIST
17001: PUSH
17002: LD_INT 30
17004: PUSH
17005: LD_INT 0
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: AND
17022: PUSH
17023: LD_EXP 36
17027: PPUSH
17028: LD_INT 7
17030: PPUSH
17031: CALL_OW 308
17035: AND
17036: PUSH
17037: LD_INT 6
17039: PPUSH
17040: LD_EXP 26
17044: PPUSH
17045: CALL_OW 292
17049: AND
17050: PUSH
17051: LD_INT 22
17053: PUSH
17054: LD_INT 4
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PPUSH
17061: CALL_OW 69
17065: NOT
17066: AND
17067: PUSH
17068: LD_INT 22
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 21
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PPUSH
17092: CALL_OW 69
17096: NOT
17097: AND
17098: IFFALSE 17753
17100: GO 17102
17102: DISABLE
17103: LD_INT 0
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
// begin allowConvoys := false ;
17109: LD_ADDR_EXP 11
17113: PUSH
17114: LD_INT 0
17116: ST_TO_ADDR
// depot := usDepot ;
17117: LD_ADDR_VAR 0 4
17121: PUSH
17122: LD_INT 11
17124: ST_TO_ADDR
// if not usDepot then
17125: LD_INT 11
17127: NOT
17128: IFFALSE 17175
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17130: LD_ADDR_VAR 0 4
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_INT 2
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 50
17147: PUSH
17148: EMPTY
17149: LIST
17150: PUSH
17151: LD_INT 30
17153: PUSH
17154: LD_INT 0
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: LIST
17165: PPUSH
17166: CALL_OW 69
17170: PUSH
17171: LD_INT 1
17173: ARRAY
17174: ST_TO_ADDR
// InGameOn ;
17175: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17179: LD_EXP 36
17183: PPUSH
17184: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17188: LD_EXP 26
17192: PPUSH
17193: LD_EXP 36
17197: PPUSH
17198: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17202: LD_EXP 36
17206: PPUSH
17207: LD_EXP 26
17211: PPUSH
17212: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
17216: LD_EXP 36
17220: PPUSH
17221: LD_STRING DI-1-free
17223: PPUSH
17224: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17228: LD_EXP 26
17232: PPUSH
17233: LD_STRING DH-1-free
17235: PPUSH
17236: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17240: LD_EXP 36
17244: PPUSH
17245: LD_STRING DI-2-free
17247: PPUSH
17248: CALL_OW 88
// changeClass := 0 ;
17252: LD_ADDR_VAR 0 1
17256: PUSH
17257: LD_INT 0
17259: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17260: LD_STRING IbrahimJoinQuery
17262: PPUSH
17263: CALL_OW 97
17267: PUSH
17268: LD_INT 1
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17287
17276: POP
// begin changeClass := 1 ;
17277: LD_ADDR_VAR 0 1
17281: PUSH
17282: LD_INT 1
17284: ST_TO_ADDR
// end ; 2 :
17285: GO 17527
17287: LD_INT 2
17289: DOUBLE
17290: EQUAL
17291: IFTRUE 17295
17293: GO 17447
17295: POP
// begin Say ( Heike , DH-1-decline ) ;
17296: LD_EXP 26
17300: PPUSH
17301: LD_STRING DH-1-decline
17303: PPUSH
17304: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17308: LD_EXP 36
17312: PPUSH
17313: LD_STRING DI-1-decline
17315: PPUSH
17316: CALL_OW 88
// InGameOff ;
17320: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17324: LD_EXP 36
17328: PPUSH
17329: LD_INT 30
17331: PPUSH
17332: LD_INT 1
17334: PPUSH
17335: CALL_OW 111
// p := 0 ;
17339: LD_ADDR_VAR 0 3
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// repeat p := p + 1 ;
17347: LD_ADDR_VAR 0 3
17351: PUSH
17352: LD_VAR 0 3
17356: PUSH
17357: LD_INT 1
17359: PLUS
17360: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17361: LD_INT 35
17363: PPUSH
17364: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17368: LD_EXP 36
17372: PPUSH
17373: LD_INT 30
17375: PPUSH
17376: LD_INT 1
17378: PPUSH
17379: CALL_OW 307
17383: PUSH
17384: LD_INT 22
17386: PUSH
17387: LD_INT 2
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 101
17396: PUSH
17397: LD_INT 6
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PPUSH
17408: CALL_OW 69
17412: NOT
17413: OR
17414: PUSH
17415: LD_VAR 0 3
17419: PUSH
17420: LD_INT 10
17422: GREATER
17423: OR
17424: IFFALSE 17347
// RemoveUnit ( Ibrahim ) ;
17426: LD_EXP 36
17430: PPUSH
17431: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17435: LD_INT 1
17437: PPUSH
17438: LD_STRING 03_IbrahimHasEscaped
17440: PPUSH
17441: CALL_OW 39
// end ; 3 :
17445: GO 17527
17447: LD_INT 3
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17526
17455: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17456: LD_EXP 26
17460: PPUSH
17461: LD_STRING DH-1-radio-hq
17463: PPUSH
17464: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17468: LD_EXP 35
17472: PPUSH
17473: LD_STRING DO-1-radio-hq
17475: PPUSH
17476: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17480: LD_EXP 26
17484: PPUSH
17485: LD_STRING DH-2-radio-hq
17487: PPUSH
17488: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17492: LD_EXP 35
17496: PPUSH
17497: LD_STRING DO-2-radio-hq
17499: PPUSH
17500: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17504: LD_EXP 26
17508: PPUSH
17509: LD_STRING DH-3-radio-hq
17511: PPUSH
17512: CALL_OW 88
// changeClass := 1 ;
17516: LD_ADDR_VAR 0 1
17520: PUSH
17521: LD_INT 1
17523: ST_TO_ADDR
// end ; end ;
17524: GO 17527
17526: POP
// if changeClass then
17527: LD_VAR 0 1
17531: IFFALSE 17753
// begin Say ( Heike , DH-1-agree ) ;
17533: LD_EXP 26
17537: PPUSH
17538: LD_STRING DH-1-agree
17540: PPUSH
17541: CALL_OW 88
// if IsOk ( Givi ) then
17545: LD_EXP 27
17549: PPUSH
17550: CALL_OW 302
17554: IFFALSE 17592
// begin Say ( Givi , DG-1-agree ) ;
17556: LD_EXP 27
17560: PPUSH
17561: LD_STRING DG-1-agree
17563: PPUSH
17564: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17568: LD_EXP 26
17572: PPUSH
17573: LD_STRING DH-2-agree
17575: PPUSH
17576: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17580: LD_EXP 27
17584: PPUSH
17585: LD_STRING DG-2-agree
17587: PPUSH
17588: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17592: LD_VAR 0 4
17596: PPUSH
17597: CALL_OW 313
17601: PUSH
17602: LD_INT 6
17604: EQUAL
17605: IFFALSE 17625
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17607: LD_VAR 0 4
17611: PPUSH
17612: CALL_OW 313
17616: PUSH
17617: LD_INT 1
17619: ARRAY
17620: PPUSH
17621: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17625: LD_EXP 36
17629: PPUSH
17630: LD_INT 2
17632: PPUSH
17633: CALL_OW 235
// ComEnterUnit ( Ibrahim , depot ) ;
17637: LD_EXP 36
17641: PPUSH
17642: LD_VAR 0 4
17646: PPUSH
17647: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17651: LD_INT 35
17653: PPUSH
17654: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17658: LD_EXP 36
17662: PPUSH
17663: CALL_OW 310
17667: IFFALSE 17651
// b := IsInUnit ( Ibrahim ) ;
17669: LD_ADDR_VAR 0 2
17673: PUSH
17674: LD_EXP 36
17678: PPUSH
17679: CALL_OW 310
17683: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
17684: LD_EXP 36
17688: PPUSH
17689: CALL_OW 64
// uc_side := 2 ;
17693: LD_ADDR_OWVAR 20
17697: PUSH
17698: LD_INT 2
17700: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17701: LD_ADDR_EXP 36
17705: PUSH
17706: LD_STRING Ibrahim
17708: PPUSH
17709: LD_INT 0
17711: PPUSH
17712: LD_STRING 
17714: PPUSH
17715: CALL 297 0 3
17719: ST_TO_ADDR
// PlaceHumanInUnit ( Ibrahim , b ) ;
17720: LD_EXP 36
17724: PPUSH
17725: LD_VAR 0 2
17729: PPUSH
17730: CALL_OW 52
// InGameOff ;
17734: CALL_OW 9
// allowConvoys := true ;
17738: LD_ADDR_EXP 11
17742: PUSH
17743: LD_INT 1
17745: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17746: LD_STRING ACH_IBRAHIM
17748: PPUSH
17749: CALL_OW 543
// end ; end ;
17753: PPOPN 4
17755: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17756: LD_EXP 31
17760: PPUSH
17761: CALL_OW 256
17765: PUSH
17766: LD_INT 3
17768: LESS
17769: IFFALSE 17836
17771: GO 17773
17773: DISABLE
// begin DialogueOn ;
17774: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17778: LD_EXP 31
17782: PPUSH
17783: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17787: LD_EXP 31
17791: PPUSH
17792: LD_STRING DK-keydeath-1
17794: PPUSH
17795: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17799: LD_EXP 26
17803: PPUSH
17804: LD_STRING DH-keydeath-2
17806: PPUSH
17807: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17811: LD_EXP 26
17815: PPUSH
17816: LD_STRING DH-keydeath-3
17818: PPUSH
17819: CALL_OW 88
// DialogueOff ;
17823: CALL_OW 7
// KillUnit ( Kaia ) ;
17827: LD_EXP 31
17831: PPUSH
17832: CALL_OW 66
// end ;
17836: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do
17837: LD_EXP 10
17841: PUSH
17842: LD_EXP 19
17846: PUSH
17847: LD_INT 1
17849: LESS
17850: AND
17851: PUSH
17852: LD_INT 22
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 21
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PPUSH
17876: CALL_OW 69
17880: PUSH
17881: LD_INT 0
17883: EQUAL
17884: AND
17885: IFFALSE 18276
17887: GO 17889
17889: DISABLE
// begin DialogueOn ;
17890: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17894: LD_EXP 26
17898: PPUSH
17899: LD_STRING DH-1-final
17901: PPUSH
17902: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17906: LD_OWVAR 1
17910: PUSH
17911: LD_INT 126000
17913: PUSH
17914: LD_INT 115500
17916: PUSH
17917: LD_INT 105000
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: LD_OWVAR 67
17929: ARRAY
17930: LESSEQUAL
17931: IFFALSE 17945
// AddMedal ( med1 , 1 ) else
17933: LD_STRING med1
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: CALL_OW 101
17943: GO 17956
// AddMedal ( med1 , - 1 ) ;
17945: LD_STRING med1
17947: PPUSH
17948: LD_INT 1
17950: NEG
17951: PPUSH
17952: CALL_OW 101
// if vehCounter >= 2 then
17956: LD_EXP 20
17960: PUSH
17961: LD_INT 2
17963: GREATEREQUAL
17964: IFFALSE 17978
// AddMedal ( med2 , 1 ) else
17966: LD_STRING med2
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 101
17976: GO 17989
// AddMedal ( med2 , - 1 ) ;
17978: LD_STRING med2
17980: PPUSH
17981: LD_INT 1
17983: NEG
17984: PPUSH
17985: CALL_OW 101
// if deadCounter = 0 then
17989: LD_EXP 8
17993: PUSH
17994: LD_INT 0
17996: EQUAL
17997: IFFALSE 18011
// AddMedal ( med3 , 1 ) else
17999: LD_STRING med3
18001: PPUSH
18002: LD_INT 1
18004: PPUSH
18005: CALL_OW 101
18009: GO 18022
// AddMedal ( med3 , - 1 ) ;
18011: LD_STRING med3
18013: PPUSH
18014: LD_INT 1
18016: NEG
18017: PPUSH
18018: CALL_OW 101
// GiveMedals ( MAIN ) ;
18022: LD_STRING MAIN
18024: PPUSH
18025: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18029: LD_INT 22
18031: PUSH
18032: LD_INT 2
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 23
18041: PUSH
18042: LD_INT 2
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 21
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: PPUSH
18064: CALL_OW 69
18068: PPUSH
18069: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18073: LD_EXP 26
18077: PPUSH
18078: LD_STRING 03_Heike
18080: PPUSH
18081: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18085: LD_EXP 30
18089: PPUSH
18090: LD_STRING 03_Aviradze
18092: PPUSH
18093: CALL_OW 38
// if Givi then
18097: LD_EXP 27
18101: IFFALSE 18115
// SaveCharacters ( Givi , 03_Givi ) ;
18103: LD_EXP 27
18107: PPUSH
18108: LD_STRING 03_Givi
18110: PPUSH
18111: CALL_OW 38
// if Mike then
18115: LD_EXP 28
18119: IFFALSE 18133
// SaveCharacters ( Mike , 03_Mike ) ;
18121: LD_EXP 28
18125: PPUSH
18126: LD_STRING 03_Mike
18128: PPUSH
18129: CALL_OW 38
// if Kamil then
18133: LD_EXP 29
18137: IFFALSE 18151
// SaveCharacters ( Kamil , 03_Kamil ) ;
18139: LD_EXP 29
18143: PPUSH
18144: LD_STRING 03_Kamil
18146: PPUSH
18147: CALL_OW 38
// if Kaia then
18151: LD_EXP 31
18155: IFFALSE 18169
// SaveCharacters ( Kaia , 03_Kaia ) ;
18157: LD_EXP 31
18161: PPUSH
18162: LD_STRING 03_Kaia
18164: PPUSH
18165: CALL_OW 38
// if Sophia then
18169: LD_EXP 32
18173: IFFALSE 18187
// SaveCharacters ( Sophia , 03_Sophia ) ;
18175: LD_EXP 32
18179: PPUSH
18180: LD_STRING 03_Sophia
18182: PPUSH
18183: CALL_OW 38
// if Markov then
18187: LD_EXP 33
18191: IFFALSE 18205
// SaveCharacters ( Markov , 03_Markov ) ;
18193: LD_EXP 33
18197: PPUSH
18198: LD_STRING 03_Markov
18200: PPUSH
18201: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18205: LD_EXP 36
18209: PUSH
18210: LD_EXP 36
18214: PPUSH
18215: CALL_OW 255
18219: PUSH
18220: LD_INT 2
18222: EQUAL
18223: AND
18224: IFFALSE 18238
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18226: LD_EXP 36
18230: PPUSH
18231: LD_STRING 03_Ibrahim
18233: PPUSH
18234: CALL_OW 38
// if heikeSecondSquad then
18238: LD_EXP 40
18242: IFFALSE 18256
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18244: LD_EXP 40
18248: PPUSH
18249: LD_STRING 03_others
18251: PPUSH
18252: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18256: LD_EXP 8
18260: PPUSH
18261: LD_STRING 03_DeadCounter
18263: PPUSH
18264: CALL_OW 39
// YouWin ;
18268: CALL_OW 103
// DialogueOff ;
18272: CALL_OW 7
// end ; end_of_file
18276: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18277: LD_VAR 0 1
18281: PUSH
18282: LD_EXP 26
18286: EQUAL
18287: IFFALSE 18296
// YouLost ( Heike ) ;
18289: LD_STRING Heike
18291: PPUSH
18292: CALL_OW 104
// if un = Aviradze then
18296: LD_VAR 0 1
18300: PUSH
18301: LD_EXP 30
18305: EQUAL
18306: IFFALSE 18315
// YouLost ( Aviradze ) ;
18308: LD_STRING Aviradze
18310: PPUSH
18311: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18315: LD_VAR 0 1
18319: PUSH
18320: LD_INT 11
18322: EQUAL
18323: PUSH
18324: LD_EXP 10
18328: NOT
18329: AND
18330: IFFALSE 18339
// YouLost ( Depot ) ;
18332: LD_STRING Depot
18334: PPUSH
18335: CALL_OW 104
// if un = arDepot then
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 5
18346: EQUAL
18347: IFFALSE 18356
// YouLost ( FarmerDepot ) ;
18349: LD_STRING FarmerDepot
18351: PPUSH
18352: CALL_OW 104
// if un = Farmer then
18356: LD_VAR 0 1
18360: PUSH
18361: LD_EXP 34
18365: EQUAL
18366: IFFALSE 18375
// YouLost ( Farmer ) ;
18368: LD_STRING Farmer
18370: PPUSH
18371: CALL_OW 104
// if un in usForces then
18375: LD_VAR 0 1
18379: PUSH
18380: LD_EXP 42
18384: IN
18385: IFFALSE 18403
// usForces := usForces diff un ;
18387: LD_ADDR_EXP 42
18391: PUSH
18392: LD_EXP 42
18396: PUSH
18397: LD_VAR 0 1
18401: DIFF
18402: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18403: LD_VAR 0 1
18407: PUSH
18408: LD_INT 22
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 23
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 21
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: LIST
18442: PPUSH
18443: CALL_OW 69
18447: IN
18448: IFFALSE 18464
// deadCounter := deadCounter + 1 ;
18450: LD_ADDR_EXP 8
18454: PUSH
18455: LD_EXP 8
18459: PUSH
18460: LD_INT 1
18462: PLUS
18463: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18464: LD_VAR 0 1
18468: PUSH
18469: LD_INT 22
18471: PUSH
18472: LD_INT 4
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 34
18481: PUSH
18482: LD_INT 12
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PPUSH
18493: CALL_OW 69
18497: IN
18498: PUSH
18499: LD_EXP 16
18503: NOT
18504: AND
18505: IFFALSE 18515
// firstConvoyDestroyed := true ;
18507: LD_ADDR_EXP 16
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if un in usAttackers then
18515: LD_VAR 0 1
18519: PUSH
18520: LD_EXP 45
18524: IN
18525: IFFALSE 18543
// usAttackers := usAttackers diff un ;
18527: LD_ADDR_EXP 45
18531: PUSH
18532: LD_EXP 45
18536: PUSH
18537: LD_VAR 0 1
18541: DIFF
18542: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18543: LD_VAR 0 1
18547: PUSH
18548: LD_INT 22
18550: PUSH
18551: LD_INT 5
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 21
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PPUSH
18572: CALL_OW 69
18576: IN
18577: IFFALSE 18593
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18579: LD_ADDR_EXP 18
18583: PUSH
18584: LD_EXP 18
18588: PUSH
18589: LD_INT 1
18591: PLUS
18592: ST_TO_ADDR
// end ;
18593: PPOPN 1
18595: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18596: LD_VAR 0 2
18600: PUSH
18601: LD_EXP 36
18605: EQUAL
18606: PUSH
18607: LD_EXP 23
18611: AND
18612: IFFALSE 18658
// begin Video ( true ) ;
18614: LD_INT 1
18616: PPUSH
18617: CALL 1020 0 1
// ComEnterUnit ( Ibrahim , usDepot ) ;
18621: LD_EXP 36
18625: PPUSH
18626: LD_INT 11
18628: PPUSH
18629: CALL_OW 120
// repeat wait ( 3 ) ;
18633: LD_INT 3
18635: PPUSH
18636: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18640: LD_EXP 36
18644: PPUSH
18645: CALL_OW 310
18649: IFFALSE 18633
// Video ( false ) ;
18651: LD_INT 0
18653: PPUSH
18654: CALL 1020 0 1
// end ; end ;
18658: PPOPN 2
18660: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18661: LD_VAR 0 2
18665: PUSH
18666: LD_EXP 26
18670: EQUAL
18671: PUSH
18672: LD_VAR 0 1
18676: PUSH
18677: LD_INT 11
18679: EQUAL
18680: AND
18681: PUSH
18682: LD_EXP 23
18686: AND
18687: IFFALSE 18693
// IbrahimQuery ;
18689: CALL 16612 0 0
// end ;
18693: PPOPN 2
18695: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18696: LD_VAR 0 1
18700: PPUSH
18701: CALL_OW 141
// if oldId in usAttackers then
18705: LD_VAR 0 2
18709: PUSH
18710: LD_EXP 45
18714: IN
18715: IFFALSE 18733
// usAttackers := usAttackers diff oldId ;
18717: LD_ADDR_EXP 45
18721: PUSH
18722: LD_EXP 45
18726: PUSH
18727: LD_VAR 0 2
18731: DIFF
18732: ST_TO_ADDR
// if newId in usAttackers then
18733: LD_VAR 0 1
18737: PUSH
18738: LD_EXP 45
18742: IN
18743: IFFALSE 18761
// usAttackers := usAttackers diff newId ;
18745: LD_ADDR_EXP 45
18749: PUSH
18750: LD_EXP 45
18754: PUSH
18755: LD_VAR 0 1
18759: DIFF
18760: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18761: LD_VAR 0 3
18765: PUSH
18766: LD_INT 4
18768: EQUAL
18769: PUSH
18770: LD_EXP 16
18774: NOT
18775: AND
18776: IFFALSE 18786
// firstConvoyDestroyed := true ;
18778: LD_ADDR_EXP 16
18782: PUSH
18783: LD_INT 1
18785: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18786: LD_VAR 0 1
18790: PPUSH
18791: CALL_OW 264
18795: PUSH
18796: LD_INT 12
18798: EQUAL
18799: IFFALSE 18837
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18801: LD_ADDR_EXP 12
18805: PUSH
18806: LD_EXP 12
18810: PUSH
18811: LD_INT 1
18813: PLUS
18814: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18815: LD_VAR 0 1
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: CALL_OW 289
18827: PUSH
18828: LD_INT 0
18830: EQUAL
18831: IFFALSE 18837
// EmptyCargoDialog ;
18833: CALL 15349 0 0
// end ; end ;
18837: PPOPN 4
18839: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18840: LD_VAR 0 1
18844: PUSH
18845: LD_INT 2
18847: EQUAL
18848: PUSH
18849: LD_VAR 0 2
18853: PUSH
18854: LD_INT 5
18856: EQUAL
18857: AND
18858: IFFALSE 18867
// YouLost ( Attack ) ;
18860: LD_STRING Attack
18862: PPUSH
18863: CALL_OW 104
// end ;
18867: PPOPN 2
18869: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL_OW 255
18879: PUSH
18880: LD_INT 1
18882: EQUAL
18883: PUSH
18884: LD_EXP 6
18888: NOT
18889: AND
18890: IFFALSE 19024
// begin if GetBType ( b ) = b_lab then
18892: LD_VAR 0 1
18896: PPUSH
18897: CALL_OW 266
18901: PUSH
18902: LD_INT 6
18904: EQUAL
18905: IFFALSE 18945
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18907: LD_EXP 42
18911: PPUSH
18912: LD_INT 25
18914: PUSH
18915: LD_INT 4
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PPUSH
18922: CALL_OW 72
18926: PPUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 120
// AmLabResearch ( b ) ;
18936: LD_VAR 0 1
18940: PPUSH
18941: CALL 6063 0 1
// end ; if GetBType ( b ) = b_armoury then
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL_OW 266
18954: PUSH
18955: LD_INT 4
18957: EQUAL
18958: IFFALSE 19006
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18960: LD_EXP 42
18964: PPUSH
18965: LD_INT 25
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: LD_INT 54
18980: PUSH
18981: EMPTY
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PPUSH
18992: CALL_OW 72
18996: PPUSH
18997: LD_VAR 0 1
19001: PPUSH
19002: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19006: LD_ADDR_EXP 44
19010: PUSH
19011: LD_EXP 44
19015: PPUSH
19016: LD_INT 1
19018: PPUSH
19019: CALL_OW 3
19023: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19024: LD_VAR 0 1
19028: PPUSH
19029: CALL_OW 255
19033: PUSH
19034: LD_INT 5
19036: EQUAL
19037: IFFALSE 19051
// SetBLevel ( b , 5 ) ;
19039: LD_VAR 0 1
19043: PPUSH
19044: LD_INT 5
19046: PPUSH
19047: CALL_OW 241
// end ;
19051: PPOPN 1
19053: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19054: LD_VAR 0 1
19058: PPUSH
19059: CALL_OW 255
19063: PUSH
19064: LD_INT 2
19066: EQUAL
19067: IFFALSE 19083
// vehCounter := vehCounter + 1 ;
19069: LD_ADDR_EXP 20
19073: PUSH
19074: LD_EXP 20
19078: PUSH
19079: LD_INT 1
19081: PLUS
19082: ST_TO_ADDR
// end ;
19083: PPOPN 2
19085: END
// on SailEvent ( event ) do begin if event = eventAttack then
19086: LD_VAR 0 1
19090: PUSH
19091: LD_EXP 22
19095: EQUAL
19096: IFFALSE 19102
// AmericanAttack ;
19098: CALL 7531 0 0
// end ; end_of_file
19102: PPOPN 1
19104: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] do
19105: LD_OWVAR 1
19109: PUSH
19110: LD_INT 10500
19112: PUSH
19113: LD_INT 8400
19115: PUSH
19116: LD_INT 7350
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: PUSH
19124: LD_OWVAR 67
19128: ARRAY
19129: LESSEQUAL
19130: IFFALSE 19157
19132: GO 19134
19134: DISABLE
// begin enable ;
19135: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19136: LD_INT 1
19138: PPUSH
19139: LD_INT 5
19141: PPUSH
19142: CALL_OW 12
19146: PPUSH
19147: LD_INT 9
19149: PPUSH
19150: LD_INT 1
19152: PPUSH
19153: CALL_OW 55
// end ;
19157: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 26 26$00 , 25 25$00 , 24 24$00 ] [ Difficulty ] do
19158: LD_EXP 6
19162: PUSH
19163: LD_OWVAR 1
19167: PUSH
19168: LD_INT 54600
19170: PUSH
19171: LD_INT 52500
19173: PUSH
19174: LD_INT 50400
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: PUSH
19182: LD_OWVAR 67
19186: ARRAY
19187: LESSEQUAL
19188: AND
19189: IFFALSE 19216
19191: GO 19193
19193: DISABLE
// begin enable ;
19194: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19195: LD_INT 1
19197: PPUSH
19198: LD_INT 5
19200: PPUSH
19201: CALL_OW 12
19205: PPUSH
19206: LD_INT 9
19208: PPUSH
19209: LD_INT 1
19211: PPUSH
19212: CALL_OW 55
// end ; end_of_file
19216: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19217: LD_EXP 10
19221: NOT
19222: PUSH
19223: LD_EXP 14
19227: AND
19228: PUSH
19229: LD_EXP 4
19233: AND
19234: PUSH
19235: LD_EXP 13
19239: PUSH
19240: LD_EXP 14
19244: LESSEQUAL
19245: AND
19246: IFFALSE 19336
19248: GO 19250
19250: DISABLE
// begin enable ;
19251: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
19252: LD_ADDR_OWVAR 47
19256: PUSH
19257: LD_STRING #X103-1
19259: PUSH
19260: LD_EXP 13
19264: PUSH
19265: LD_EXP 14
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19275: LD_ADDR_EXP 13
19279: PUSH
19280: LD_INT 5
19282: PPUSH
19283: CALL_OW 274
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: CALL_OW 275
19295: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19296: LD_INT 10
19298: PPUSH
19299: LD_INT 1
19301: PPUSH
19302: CALL_OW 287
19306: PUSH
19307: LD_INT 0
19309: EQUAL
19310: IFFALSE 19328
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19312: LD_ADDR_EXP 15
19316: PUSH
19317: LD_EXP 15
19321: PUSH
19322: LD_INT 35
19324: MINUS
19325: ST_TO_ADDR
19326: GO 19336
// farmerCratesCounter := 30 30$00 ;
19328: LD_ADDR_EXP 15
19332: PUSH
19333: LD_INT 63000
19335: ST_TO_ADDR
// end ; end_of_file
19336: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
19337: GO 19339
19339: DISABLE
// begin ru_radar := 98 ;
19340: LD_ADDR_EXP 46
19344: PUSH
19345: LD_INT 98
19347: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19348: LD_ADDR_EXP 47
19352: PUSH
19353: LD_INT 89
19355: ST_TO_ADDR
// us_hack := 99 ;
19356: LD_ADDR_EXP 48
19360: PUSH
19361: LD_INT 99
19363: ST_TO_ADDR
// us_artillery := 97 ;
19364: LD_ADDR_EXP 49
19368: PUSH
19369: LD_INT 97
19371: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19372: LD_ADDR_EXP 50
19376: PUSH
19377: LD_INT 91
19379: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19380: LD_ADDR_EXP 51
19384: PUSH
19385: LD_INT 92
19387: ST_TO_ADDR
// tech_Artillery := 80 ;
19388: LD_ADDR_EXP 52
19392: PUSH
19393: LD_INT 80
19395: ST_TO_ADDR
// tech_RadMat := 81 ;
19396: LD_ADDR_EXP 53
19400: PUSH
19401: LD_INT 81
19403: ST_TO_ADDR
// tech_BasicTools := 82 ;
19404: LD_ADDR_EXP 54
19408: PUSH
19409: LD_INT 82
19411: ST_TO_ADDR
// tech_Cargo := 83 ;
19412: LD_ADDR_EXP 55
19416: PUSH
19417: LD_INT 83
19419: ST_TO_ADDR
// tech_Track := 84 ;
19420: LD_ADDR_EXP 56
19424: PUSH
19425: LD_INT 84
19427: ST_TO_ADDR
// tech_Crane := 85 ;
19428: LD_ADDR_EXP 57
19432: PUSH
19433: LD_INT 85
19435: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19436: LD_ADDR_EXP 58
19440: PUSH
19441: LD_INT 86
19443: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19444: LD_ADDR_EXP 59
19448: PUSH
19449: LD_INT 87
19451: ST_TO_ADDR
// end ;
19452: END
