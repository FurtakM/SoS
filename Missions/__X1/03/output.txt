// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 630 0 0
// PrepareArabian ;
  12: CALL 1065 0 0
// PrepareAmerican ;
  16: CALL 4126 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9096 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: LD_INT 42000
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 9 , 10 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 8
 216: PUSH
 217: LD_INT 9
 219: PUSH
 220: LD_INT 10
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 619
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 1
 577: NEG
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL_OW 12
 586: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 587: LD_INT 0
 589: PPUSH
 590: LD_INT 12
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
// end ;
 617: GO 536
 619: POP
 620: POP
// InitHc ;
 621: CALL_OW 19
// end ;
 625: LD_VAR 0 3
 629: RET
// export function CreateNature ; var i ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 634: LD_INT 2
 636: PPUSH
 637: LD_INT 5
 639: PUSH
 640: LD_INT 4
 642: PUSH
 643: LD_INT 4
 645: PUSH
 646: LD_INT 3
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: LD_OWVAR 67
 659: ARRAY
 660: PPUSH
 661: CALL 493 0 2
// for i := 1 to 2 do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_INT 2
 677: PUSH
 678: FOR_TO
 679: IFFALSE 714
// begin hc_class := 21 ;
 681: LD_ADDR_OWVAR 28
 685: PUSH
 686: LD_INT 21
 688: ST_TO_ADDR
// hc_gallery :=  ;
 689: LD_ADDR_OWVAR 33
 693: PUSH
 694: LD_STRING 
 696: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 697: CALL_OW 44
 701: PPUSH
 702: LD_INT 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// end ;
 712: GO 678
 714: POP
 715: POP
// for i := 1 to 2 do
 716: LD_ADDR_VAR 0 2
 720: PUSH
 721: DOUBLE
 722: LD_INT 1
 724: DEC
 725: ST_TO_ADDR
 726: LD_INT 2
 728: PUSH
 729: FOR_TO
 730: IFFALSE 765
// begin hc_class := 18 ;
 732: LD_ADDR_OWVAR 28
 736: PUSH
 737: LD_INT 18
 739: ST_TO_ADDR
// hc_gallery :=  ;
 740: LD_ADDR_OWVAR 33
 744: PUSH
 745: LD_STRING 
 747: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 748: CALL_OW 44
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 49
// end ;
 763: GO 729
 765: POP
 766: POP
// for i := 1 to 2 do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_INT 2
 779: PUSH
 780: FOR_TO
 781: IFFALSE 816
// begin hc_class := 13 ;
 783: LD_ADDR_OWVAR 28
 787: PUSH
 788: LD_INT 13
 790: ST_TO_ADDR
// hc_gallery :=  ;
 791: LD_ADDR_OWVAR 33
 795: PUSH
 796: LD_STRING 
 798: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 799: CALL_OW 44
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end ;
 814: GO 780
 816: POP
 817: POP
// end ;
 818: LD_VAR 0 1
 822: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 823: LD_INT 0
 825: PPUSH
 826: PPUSH
 827: PPUSH
// if not observer or not unit then
 828: LD_VAR 0 1
 832: NOT
 833: PUSH
 834: LD_VAR 0 2
 838: NOT
 839: OR
 840: IFFALSE 844
// exit ;
 842: GO 892
// if not See ( GetSide ( observer ) , unit ) then
 844: LD_VAR 0 1
 848: PPUSH
 849: CALL_OW 255
 853: PPUSH
 854: LD_VAR 0 2
 858: PPUSH
 859: CALL_OW 292
 863: NOT
 864: IFFALSE 868
// exit ;
 866: GO 892
// result := GetDistUnits ( observer , unit ) < 12 ;
 868: LD_ADDR_VAR 0 3
 872: PUSH
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PPUSH
 883: CALL_OW 296
 887: PUSH
 888: LD_INT 12
 890: LESS
 891: ST_TO_ADDR
// end ;
 892: LD_VAR 0 3
 896: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 897: LD_INT 0
 899: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: PPUSH
 909: LD_VAR 0 2
 913: PUSH
 914: LD_INT 2
 916: ARRAY
 917: PPUSH
 918: CALL_OW 488
 922: PUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PPUSH
 932: LD_VAR 0 2
 936: PUSH
 937: LD_INT 2
 939: ARRAY
 940: PPUSH
 941: CALL_OW 428
 945: PUSH
 946: LD_INT 0
 948: EQUAL
 949: AND
 950: IFFALSE 984
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 952: LD_VAR 0 1
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 2
 970: PUSH
 971: LD_INT 2
 973: ARRAY
 974: PPUSH
 975: LD_VAR 0 3
 979: PPUSH
 980: CALL_OW 48
// end ;
 984: LD_VAR 0 4
 988: RET
// export function ReverseArray ( array ) ; var i ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
// if not array then
 993: LD_VAR 0 1
 997: NOT
 998: IFFALSE 1002
// exit ;
1000: GO 1060
// result := [ ] ;
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: EMPTY
1008: ST_TO_ADDR
// for i := 1 to array do
1009: LD_ADDR_VAR 0 3
1013: PUSH
1014: DOUBLE
1015: LD_INT 1
1017: DEC
1018: ST_TO_ADDR
1019: LD_VAR 0 1
1023: PUSH
1024: FOR_TO
1025: IFFALSE 1058
// result := Insert ( result , 1 , array [ i ] ) ;
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 1
1044: PUSH
1045: LD_VAR 0 3
1049: ARRAY
1050: PPUSH
1051: CALL_OW 2
1055: ST_TO_ADDR
1056: GO 1024
1058: POP
1059: POP
// end ; end_of_file
1060: LD_VAR 0 2
1064: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
1069: PPUSH
1070: PPUSH
// uc_side := 5 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 5
1078: ST_TO_ADDR
// uc_nation := 2 ;
1079: LD_ADDR_OWVAR 21
1083: PUSH
1084: LD_INT 2
1086: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1087: LD_INT 5
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 65
1100: PPUSH
1101: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1105: LD_ADDR_EXP 36
1109: PUSH
1110: LD_STRING Farmer
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 38559 0 3
1123: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1124: LD_ADDR_EXP 37
1128: PUSH
1129: LD_STRING Omar
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: LD_STRING 
1137: PPUSH
1138: CALL 38559 0 3
1142: ST_TO_ADDR
// omarSquad := [ ] ;
1143: LD_ADDR_EXP 40
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// heikeSquad := [ ] ;
1150: LD_ADDR_EXP 41
1154: PUSH
1155: EMPTY
1156: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1157: LD_ADDR_EXP 42
1161: PUSH
1162: EMPTY
1163: ST_TO_ADDR
// omarCargo := [ ] ;
1164: LD_ADDR_EXP 43
1168: PUSH
1169: EMPTY
1170: ST_TO_ADDR
// for i := 1 to 5 do
1171: LD_ADDR_VAR 0 2
1175: PUSH
1176: DOUBLE
1177: LD_INT 1
1179: DEC
1180: ST_TO_ADDR
1181: LD_INT 5
1183: PUSH
1184: FOR_TO
1185: IFFALSE 1343
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1187: LD_INT 0
1189: PPUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_VAR 0 2
1216: ARRAY
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 380
// un := CreateHuman ;
1225: LD_ADDR_VAR 0 3
1229: PUSH
1230: CALL_OW 44
1234: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1235: LD_ADDR_EXP 40
1239: PUSH
1240: LD_EXP 40
1244: PUSH
1245: LD_VAR 0 3
1249: UNION
1250: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1251: LD_VAR 0 3
1255: PPUSH
1256: LD_INT 87
1258: PUSH
1259: LD_INT 30
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 91
1268: PUSH
1269: LD_INT 32
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 82
1278: PUSH
1279: LD_INT 15
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 79
1288: PUSH
1289: LD_INT 14
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 82
1298: PUSH
1299: LD_INT 13
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL 897 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1326: LD_VAR 0 3
1330: PPUSH
1331: LD_INT 93
1333: PPUSH
1334: LD_INT 21
1336: PPUSH
1337: CALL_OW 118
// end ;
1341: GO 1184
1343: POP
1344: POP
// uc_side := 2 ;
1345: LD_ADDR_OWVAR 20
1349: PUSH
1350: LD_INT 2
1352: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1353: LD_ADDR_EXP 28
1357: PUSH
1358: LD_STRING Heike
1360: PPUSH
1361: LD_EXP 1
1365: NOT
1366: PPUSH
1367: LD_EXP 2
1371: PPUSH
1372: CALL 38559 0 3
1376: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1377: LD_ADDR_EXP 32
1381: PUSH
1382: LD_STRING Aviradze
1384: PPUSH
1385: LD_EXP 1
1389: NOT
1390: PPUSH
1391: LD_EXP 2
1395: PPUSH
1396: CALL 38559 0 3
1400: ST_TO_ADDR
// tmp := [ ] ;
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: EMPTY
1407: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1408: LD_ADDR_EXP 29
1412: PUSH
1413: LD_STRING Givi
1415: PPUSH
1416: LD_EXP 1
1420: NOT
1421: PPUSH
1422: LD_EXP 2
1426: PPUSH
1427: CALL 38559 0 3
1431: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1432: LD_ADDR_EXP 30
1436: PUSH
1437: LD_STRING Mike
1439: PPUSH
1440: LD_EXP 1
1444: NOT
1445: PPUSH
1446: LD_EXP 2
1450: PPUSH
1451: CALL 38559 0 3
1455: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1456: LD_ADDR_EXP 31
1460: PUSH
1461: LD_STRING Kamil
1463: PPUSH
1464: LD_EXP 1
1468: NOT
1469: PPUSH
1470: LD_EXP 2
1474: PPUSH
1475: CALL 38559 0 3
1479: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1480: LD_ADDR_EXP 33
1484: PUSH
1485: LD_STRING Kaia
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 2
1498: PPUSH
1499: CALL 38559 0 3
1503: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1504: LD_ADDR_EXP 34
1508: PUSH
1509: LD_STRING Sophia
1511: PPUSH
1512: LD_EXP 1
1516: NOT
1517: PPUSH
1518: LD_EXP 2
1522: PPUSH
1523: CALL 38559 0 3
1527: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1528: LD_ADDR_EXP 35
1532: PUSH
1533: LD_STRING Markov
1535: PPUSH
1536: LD_EXP 1
1540: NOT
1541: PPUSH
1542: LD_EXP 2
1546: PPUSH
1547: CALL 38559 0 3
1551: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1552: LD_ADDR_EXP 42
1556: PUSH
1557: LD_STRING 02_others
1559: PPUSH
1560: CALL_OW 31
1564: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_EXP 30
1574: PUSH
1575: LD_EXP 31
1579: PUSH
1580: LD_EXP 33
1584: PUSH
1585: LD_EXP 34
1589: PUSH
1590: LD_EXP 35
1594: PUSH
1595: LD_EXP 29
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_EXP 42
1612: ADD
1613: PUSH
1614: LD_INT 0
1616: DIFF
1617: ST_TO_ADDR
// heikeSquad := tmp ;
1618: LD_ADDR_EXP 41
1622: PUSH
1623: LD_VAR 0 4
1627: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1628: LD_EXP 41
1632: PPUSH
1633: LD_INT 25
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 72
1647: PUSH
1648: LD_INT 3
1650: LESS
1651: IFFALSE 1701
// begin SetClass ( Kaia , 1 ) ;
1653: LD_EXP 33
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1665: LD_EXP 30
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1677: LD_EXP 29
1681: PPUSH
1682: LD_INT 1
1684: PPUSH
1685: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1689: LD_EXP 28
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1701: LD_ADDR_VAR 0 4
1705: PUSH
1706: LD_VAR 0 4
1710: PUSH
1711: LD_STRING 02_ape
1713: PPUSH
1714: CALL_OW 31
1718: UNION
1719: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1720: LD_EXP 28
1724: PPUSH
1725: LD_INT 92
1727: PPUSH
1728: LD_INT 17
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1738: LD_EXP 36
1742: PPUSH
1743: LD_INT 95
1745: PPUSH
1746: LD_INT 19
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1756: LD_EXP 37
1760: PPUSH
1761: LD_INT 89
1763: PPUSH
1764: LD_INT 25
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1774: LD_EXP 32
1778: PPUSH
1779: LD_INT 92
1781: PPUSH
1782: LD_INT 27
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1792: LD_EXP 37
1796: PPUSH
1797: LD_EXP 32
1801: PPUSH
1802: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1806: LD_EXP 32
1810: PPUSH
1811: LD_EXP 37
1815: PPUSH
1816: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1820: LD_EXP 28
1824: PUSH
1825: LD_EXP 36
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: LD_EXP 37
1838: PPUSH
1839: CALL_OW 119
// if tmp then
1843: LD_VAR 0 4
1847: IFFALSE 1901
// for i in tmp do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: LD_VAR 0 4
1858: PUSH
1859: FOR_IN
1860: IFFALSE 1899
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 94
1869: PPUSH
1870: LD_INT 14
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_EXP 28
1892: PPUSH
1893: CALL_OW 119
// end ;
1897: GO 1859
1899: POP
1900: POP
// farmerSquad := [ ] ;
1901: LD_ADDR_EXP 39
1905: PUSH
1906: EMPTY
1907: ST_TO_ADDR
// uc_side := 5 ;
1908: LD_ADDR_OWVAR 20
1912: PUSH
1913: LD_INT 5
1915: ST_TO_ADDR
// uc_nation := 2 ;
1916: LD_ADDR_OWVAR 21
1920: PUSH
1921: LD_INT 2
1923: ST_TO_ADDR
// for i := 1 to 4 do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 4
1936: PUSH
1937: FOR_TO
1938: IFFALSE 2016
// begin PrepareHuman ( false , 1 , 2 ) ;
1940: LD_INT 0
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: CALL_OW 380
// un := CreateHuman ;
1953: LD_ADDR_VAR 0 3
1957: PUSH
1958: CALL_OW 44
1962: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1963: LD_VAR 0 3
1967: PPUSH
1968: LD_INT 102
1970: PPUSH
1971: LD_INT 27
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1984: LD_ADDR_EXP 39
1988: PUSH
1989: LD_EXP 39
1993: PUSH
1994: LD_VAR 0 3
1998: UNION
1999: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_EXP 37
2009: PPUSH
2010: CALL_OW 119
// end ;
2014: GO 1937
2016: POP
2017: POP
// for i := 1 to 2 do
2018: LD_ADDR_VAR 0 2
2022: PUSH
2023: DOUBLE
2024: LD_INT 1
2026: DEC
2027: ST_TO_ADDR
2028: LD_INT 2
2030: PUSH
2031: FOR_TO
2032: IFFALSE 2110
// begin PrepareHuman ( false , 2 , 2 ) ;
2034: LD_INT 0
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 380
// un := CreateHuman ;
2047: LD_ADDR_VAR 0 3
2051: PUSH
2052: CALL_OW 44
2056: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_INT 108
2064: PPUSH
2065: LD_INT 62
2067: PPUSH
2068: LD_INT 2
2070: PPUSH
2071: LD_INT 0
2073: PPUSH
2074: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2078: LD_ADDR_EXP 39
2082: PUSH
2083: LD_EXP 39
2087: PUSH
2088: LD_VAR 0 3
2092: UNION
2093: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2094: LD_VAR 0 3
2098: PPUSH
2099: LD_EXP 37
2103: PPUSH
2104: CALL_OW 119
// end ;
2108: GO 2031
2110: POP
2111: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2112: LD_INT 109
2114: PPUSH
2115: LD_INT 63
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: LD_INT 15
2123: NEG
2124: PPUSH
2125: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2129: LD_INT 109
2131: PPUSH
2132: LD_INT 63
2134: PPUSH
2135: LD_INT 2
2137: PPUSH
2138: CALL_OW 331
// end ;
2142: LD_VAR 0 1
2146: RET
// export function PrepareIbrahim ( x , y ) ; begin
2147: LD_INT 0
2149: PPUSH
// uc_side := 6 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 6
2157: ST_TO_ADDR
// uc_nation := 3 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2166: LD_ADDR_EXP 38
2170: PUSH
2171: LD_STRING IbrahimRu
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 38559 0 3
2184: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2185: LD_EXP 38
2189: PPUSH
2190: LD_VAR 0 1
2194: PPUSH
2195: LD_VAR 0 2
2199: PPUSH
2200: LD_INT 8
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 50
// end ;
2210: LD_VAR 0 3
2214: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2215: LD_EXP 37
2219: PUSH
2220: LD_EXP 40
2224: ADD
2225: PPUSH
2226: LD_INT 95
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: IFFALSE 2296
2242: GO 2244
2244: DISABLE
2245: LD_INT 0
2247: PPUSH
// begin enable ;
2248: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2249: LD_ADDR_VAR 0 1
2253: PUSH
2254: LD_EXP 37
2258: PUSH
2259: LD_EXP 40
2263: ADD
2264: PPUSH
2265: LD_INT 95
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 72
2279: PUSH
2280: FOR_IN
2281: IFFALSE 2294
// RemoveUnit ( i ) ;
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 64
2292: GO 2280
2294: POP
2295: POP
// end ;
2296: PPOPN 1
2298: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2299: LD_EXP 3
2303: PUSH
2304: LD_EXP 36
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL_OW 308
2316: AND
2317: IFFALSE 3121
2319: GO 2321
2321: DISABLE
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2328: LD_EXP 36
2332: PPUSH
2333: LD_INT 110
2335: PPUSH
2336: LD_INT 60
2338: PPUSH
2339: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2343: LD_EXP 36
2347: PPUSH
2348: LD_INT 110
2350: PPUSH
2351: LD_INT 61
2353: PPUSH
2354: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2358: LD_ADDR_VAR 0 2
2362: PUSH
2363: LD_EXP 39
2367: PPUSH
2368: LD_INT 25
2370: PUSH
2371: LD_INT 1
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PPUSH
2378: CALL_OW 72
2382: ST_TO_ADDR
// if tmp then
2383: LD_VAR 0 2
2387: IFFALSE 2481
// begin for i := 1 to 2 do
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: DOUBLE
2395: LD_INT 1
2397: DEC
2398: ST_TO_ADDR
2399: LD_INT 2
2401: PUSH
2402: FOR_TO
2403: IFFALSE 2479
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2405: LD_VAR 0 2
2409: PUSH
2410: LD_VAR 0 1
2414: ARRAY
2415: PPUSH
2416: LD_INT 5
2418: PPUSH
2419: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 1
2432: ARRAY
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2456: LD_VAR 0 2
2460: PUSH
2461: LD_VAR 0 1
2465: ARRAY
2466: PPUSH
2467: LD_INT 107
2469: PPUSH
2470: LD_INT 66
2472: PPUSH
2473: CALL_OW 171
// end ;
2477: GO 2402
2479: POP
2480: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_EXP 39
2490: PPUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 2
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 72
2505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2506: LD_INT 35
2508: PPUSH
2509: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_EXP 39
2522: PPUSH
2523: LD_INT 25
2525: PUSH
2526: LD_INT 2
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// until tmp ;
2538: LD_VAR 0 2
2542: IFFALSE 2506
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2544: LD_VAR 0 2
2548: PPUSH
2549: LD_INT 31
2551: PPUSH
2552: LD_INT 102
2554: PPUSH
2555: LD_INT 69
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2572: LD_EXP 39
2576: PPUSH
2577: LD_INT 3
2579: PUSH
2580: LD_INT 60
2582: PUSH
2583: EMPTY
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 25
2592: PUSH
2593: LD_INT 2
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 72
2608: IFFALSE 2565
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2610: LD_ADDR_VAR 0 2
2614: PUSH
2615: LD_EXP 39
2619: PPUSH
2620: LD_INT 25
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 72
2634: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2635: LD_VAR 0 2
2639: PPUSH
2640: LD_INT 6
2642: PPUSH
2643: LD_INT 116
2645: PPUSH
2646: LD_INT 55
2648: PPUSH
2649: LD_INT 4
2651: PPUSH
2652: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: LD_INT 116
2666: PPUSH
2667: LD_INT 70
2669: PPUSH
2670: LD_INT 5
2672: PPUSH
2673: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2677: LD_VAR 0 2
2681: PPUSH
2682: LD_INT 31
2684: PPUSH
2685: LD_INT 109
2687: PPUSH
2688: LD_INT 50
2690: PPUSH
2691: LD_INT 2
2693: PPUSH
2694: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2698: LD_INT 35
2700: PPUSH
2701: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2705: LD_INT 22
2707: PUSH
2708: LD_INT 5
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 30
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 57
2730: PUSH
2731: EMPTY
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: IFFALSE 2698
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_INT 22
2756: PUSH
2757: LD_INT 5
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 30
2766: PUSH
2767: LD_INT 4
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 57
2779: PUSH
2780: EMPTY
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2801: LD_ADDR_VAR 0 2
2805: PUSH
2806: LD_EXP 39
2810: PPUSH
2811: LD_INT 25
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PPUSH
2821: CALL_OW 72
2825: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2840: LD_INT 35
2842: PPUSH
2843: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2847: LD_INT 22
2849: PUSH
2850: LD_INT 5
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 30
2859: PUSH
2860: LD_INT 31
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 57
2872: PUSH
2873: EMPTY
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: LD_INT 2
2892: GREATEREQUAL
2893: IFFALSE 2840
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: LD_EXP 39
2904: PPUSH
2905: LD_INT 25
2907: PUSH
2908: LD_INT 2
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: CALL_OW 72
2919: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 1
2927: ARRAY
2928: PPUSH
2929: LD_INT 5
2931: PPUSH
2932: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: ARRAY
2944: PUSH
2945: LD_VAR 0 2
2949: PUSH
2950: LD_INT 3
2952: ARRAY
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: LD_VAR 0 3
2962: PPUSH
2963: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 3
2983: ARRAY
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 2
3003: ARRAY
3004: PUSH
3005: LD_VAR 0 2
3009: PUSH
3010: LD_INT 3
3012: ARRAY
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3022: LD_ADDR_VAR 0 4
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 5
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 30
3039: PUSH
3040: LD_INT 31
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i := 1 to 2 do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_INT 2
3068: PUSH
3069: FOR_TO
3070: IFFALSE 3104
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3072: LD_VAR 0 2
3076: PUSH
3077: LD_VAR 0 1
3081: PUSH
3082: LD_INT 1
3084: PLUS
3085: ARRAY
3086: PPUSH
3087: LD_VAR 0 4
3091: PUSH
3092: LD_VAR 0 1
3096: ARRAY
3097: PPUSH
3098: CALL_OW 180
3102: GO 3069
3104: POP
3105: POP
// wait ( 1 1$00 ) ;
3106: LD_INT 2100
3108: PPUSH
3109: CALL_OW 67
// farmerBaseReady := true ;
3113: LD_ADDR_EXP 4
3117: PUSH
3118: LD_INT 1
3120: ST_TO_ADDR
// end ;
3121: PPOPN 4
3123: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3124: LD_EXP 4
3128: PUSH
3129: LD_EXP 11
3133: NOT
3134: AND
3135: IFFALSE 3657
3137: GO 3139
3139: DISABLE
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
// begin enable ;
3147: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3148: LD_ADDR_VAR 0 3
3152: PUSH
3153: LD_EXP 39
3157: PPUSH
3158: LD_INT 25
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 72
3172: PUSH
3173: LD_EXP 36
3177: ADD
3178: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_EXP 39
3188: PPUSH
3189: LD_INT 25
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 72
3203: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_INT 22
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 24
3234: PUSH
3235: LD_INT 1000
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3256: LD_ADDR_VAR 0 4
3260: PUSH
3261: LD_INT 22
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 4
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 69
3289: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3290: LD_VAR 0 4
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: CALL_OW 302
3303: IFFALSE 3367
// for i in sol do
3305: LD_ADDR_VAR 0 1
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: FOR_IN
3316: IFFALSE 3365
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3318: LD_VAR 0 1
3322: PPUSH
3323: CALL_OW 256
3327: PUSH
3328: LD_INT 999
3330: LESS
3331: PUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 310
3341: NOT
3342: AND
3343: IFFALSE 3363
// ComEnterUnit ( i , arm [ 1 ] ) ;
3345: LD_VAR 0 1
3349: PPUSH
3350: LD_VAR 0 4
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: CALL_OW 120
3363: GO 3315
3365: POP
3366: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3367: LD_VAR 0 2
3371: NOT
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 1
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: NOT
3402: AND
3403: IFFALSE 3495
// begin uc_side := 5 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 5
3412: ST_TO_ADDR
// uc_nation := 2 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 2
3420: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3421: LD_INT 0
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 380
// eng := CreateHuman ;
3434: LD_ADDR_VAR 0 2
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 102
3451: PPUSH
3452: LD_INT 8
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3462: LD_VAR 0 2
3466: PPUSH
3467: LD_INT 110
3469: PPUSH
3470: LD_INT 60
3472: PPUSH
3473: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3477: LD_ADDR_EXP 39
3481: PUSH
3482: LD_EXP 39
3486: PUSH
3487: LD_VAR 0 2
3491: UNION
3492: ST_TO_ADDR
// end else
3493: GO 3657
// begin for i in eng do
3495: LD_ADDR_VAR 0 1
3499: PUSH
3500: LD_VAR 0 2
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3655
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3508: LD_INT 10
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 287
3518: IFFALSE 3569
// begin if IsInUnit ( i ) then
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 310
3529: IFFALSE 3540
// ComExitBuilding ( i ) ;
3531: LD_VAR 0 1
3535: PPUSH
3536: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 10
3547: PPUSH
3548: CALL_OW 308
3552: NOT
3553: IFFALSE 3567
// AddComMoveToArea ( i , collectFarmerArea ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 10
3562: PPUSH
3563: CALL_OW 173
// end else
3567: GO 3653
// begin if damagedBuilding then
3569: LD_VAR 0 5
3573: IFFALSE 3617
// begin if IsInUnit ( i ) then
3575: LD_VAR 0 1
3579: PPUSH
3580: CALL_OW 310
3584: IFFALSE 3597
// ComExitBuilding ( i ) else
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 122
3595: GO 3615
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3597: LD_VAR 0 1
3601: PPUSH
3602: LD_VAR 0 5
3606: PUSH
3607: LD_INT 1
3609: ARRAY
3610: PPUSH
3611: CALL_OW 130
// end else
3615: GO 3653
// if not IsInUnit ( i ) and not HasTask ( i ) then
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 310
3626: NOT
3627: PUSH
3628: LD_VAR 0 1
3632: PPUSH
3633: CALL_OW 314
3637: NOT
3638: AND
3639: IFFALSE 3653
// ComEnterUnit ( i , arDepot ) ;
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 5
3648: PPUSH
3649: CALL_OW 120
// end ; end ;
3653: GO 3505
3655: POP
3656: POP
// end ; end ;
3657: PPOPN 5
3659: END
// export function CargoEvacuation ; begin
3660: LD_INT 0
3662: PPUSH
// wait ( 0 0$20 ) ;
3663: LD_INT 700
3665: PPUSH
3666: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3670: LD_ADDR_EXP 21
3674: PUSH
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 1
3682: MINUS
3683: ST_TO_ADDR
// if omarCargoCounter = 0 then
3684: LD_EXP 21
3688: PUSH
3689: LD_INT 0
3691: EQUAL
3692: IFFALSE 3696
// exit ;
3694: GO 4003
// if omarCargo then
3696: LD_EXP 43
3700: IFFALSE 3711
// RemoveUnit ( omarCargo ) ;
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 64
// omarCargo := PrepareCargo ;
3711: LD_ADDR_EXP 43
3715: PUSH
3716: CALL 4008 0 0
3720: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3721: LD_EXP 43
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3733: LD_EXP 43
3737: PPUSH
3738: LD_INT 107
3740: PPUSH
3741: LD_INT 59
3743: PPUSH
3744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3748: LD_INT 35
3750: PPUSH
3751: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3755: LD_EXP 43
3759: PPUSH
3760: LD_INT 107
3762: PPUSH
3763: LD_INT 59
3765: PPUSH
3766: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3770: LD_EXP 43
3774: PPUSH
3775: CALL_OW 302
3779: NOT
3780: PUSH
3781: LD_EXP 43
3785: PPUSH
3786: CALL_OW 301
3790: OR
3791: IFFALSE 3795
// exit ;
3793: GO 4003
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 107
3802: PPUSH
3803: LD_INT 59
3805: PPUSH
3806: CALL_OW 307
3810: PUSH
3811: LD_EXP 43
3815: PPUSH
3816: LD_INT 5
3818: PPUSH
3819: CALL_OW 296
3823: PUSH
3824: LD_INT 6
3826: LESS
3827: OR
3828: IFFALSE 3748
// SetTag ( omarCargo , 1 ) ;
3830: LD_EXP 43
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 109
// wait ( 0 0$05 ) ;
3842: LD_INT 175
3844: PPUSH
3845: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3849: LD_EXP 43
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3864: LD_EXP 43
3868: PPUSH
3869: LD_INT 103
3871: PPUSH
3872: LD_INT 9
3874: PPUSH
3875: CALL_OW 171
// wait ( 0 0$1 ) ;
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3886: LD_EXP 43
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 100
3896: PPUSH
3897: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3908: LD_EXP 43
3912: PPUSH
3913: LD_INT 103
3915: PPUSH
3916: LD_INT 9
3918: PPUSH
3919: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3923: LD_EXP 43
3927: PPUSH
3928: CALL_OW 302
3932: NOT
3933: PUSH
3934: LD_EXP 43
3938: PPUSH
3939: CALL_OW 301
3943: OR
3944: IFFALSE 3948
// exit ;
3946: GO 4003
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 103
3955: PPUSH
3956: LD_INT 9
3958: PPUSH
3959: CALL_OW 307
3963: PUSH
3964: LD_EXP 43
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: CALL_OW 308
3976: OR
3977: PUSH
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 110
3987: PUSH
3988: LD_INT 0
3990: GREATER
3991: AND
3992: IFFALSE 3901
// RemoveUnit ( omarCargo ) ;
3994: LD_EXP 43
3998: PPUSH
3999: CALL_OW 64
// end ;
4003: LD_VAR 0 1
4007: RET
// export function PrepareCargo ; var un , veh ; begin
4008: LD_INT 0
4010: PPUSH
4011: PPUSH
4012: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 2
4023: PPUSH
4024: LD_INT 14
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: LD_INT 32
4035: PPUSH
4036: LD_INT 80
4038: PPUSH
4039: CALL 325 0 7
4043: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4044: LD_VAR 0 3
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_INT 101
4063: PPUSH
4064: LD_INT 8
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4074: LD_INT 0
4076: PPUSH
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 2
4082: PPUSH
4083: CALL_OW 380
// un := CreateHuman ;
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_VAR 0 3
4106: PPUSH
4107: CALL_OW 52
// result := veh ;
4111: LD_ADDR_VAR 0 1
4115: PUSH
4116: LD_VAR 0 3
4120: ST_TO_ADDR
// end ; end_of_file
4121: LD_VAR 0 1
4125: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
// usForces := [ ] ;
4131: LD_ADDR_EXP 44
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4138: LD_ADDR_EXP 46
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 32
4148: PUSH
4149: LD_INT 27
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 43
4166: PUSH
4167: LD_INT 24
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 27
4181: PUSH
4182: LD_INT 29
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4202: LD_INT 11
4204: PPUSH
4205: CALL_OW 274
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 150
4215: PUSH
4216: LD_INT 120
4218: PUSH
4219: LD_INT 100
4221: PUSH
4222: LD_INT 80
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_OWVAR 67
4235: ARRAY
4236: PPUSH
4237: CALL_OW 277
// if Difficulty = 1 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 1
4248: EQUAL
4249: IFFALSE 4258
// RemoveUnit ( hillBun ) ;
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 64
// uc_side := 1 ;
4258: LD_ADDR_OWVAR 20
4262: PUSH
4263: LD_INT 1
4265: ST_TO_ADDR
// uc_nation := 1 ;
4266: LD_ADDR_OWVAR 21
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// hc_gallery :=  ;
4274: LD_ADDR_OWVAR 33
4278: PUSH
4279: LD_STRING 
4281: ST_TO_ADDR
// hc_name :=  ;
4282: LD_ADDR_OWVAR 26
4286: PUSH
4287: LD_STRING 
4289: ST_TO_ADDR
// hc_importance := 0 ;
4290: LD_ADDR_OWVAR 32
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4298: LD_INT 1
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 380
// usCommander := CreateHuman ;
4311: LD_ADDR_EXP 45
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4321: LD_EXP 45
4325: PPUSH
4326: LD_INT 11
4328: PPUSH
4329: CALL_OW 52
// if Difficulty > 1 then
4333: LD_OWVAR 67
4337: PUSH
4338: LD_INT 1
4340: GREATER
4341: IFFALSE 4423
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4343: LD_INT 0
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: LD_INT 1
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: PUSH
4363: LD_OWVAR 67
4367: ARRAY
4368: PPUSH
4369: CALL_OW 380
// un := CreateHuman ;
4373: LD_ADDR_VAR 0 3
4377: PUSH
4378: CALL_OW 44
4382: ST_TO_ADDR
// usForces := usForces union un ;
4383: LD_ADDR_EXP 44
4387: PUSH
4388: LD_EXP 44
4392: PUSH
4393: LD_VAR 0 3
4397: UNION
4398: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_INT 1
4406: PPUSH
4407: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 14
4418: PPUSH
4419: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 2
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: LD_INT 4
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_OWVAR 67
4455: ARRAY
4456: PUSH
4457: FOR_TO
4458: IFFALSE 4604
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PUSH
4484: LD_OWVAR 67
4488: ARRAY
4489: PPUSH
4490: CALL_OW 380
// un := CreateHuman ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: CALL_OW 44
4503: ST_TO_ADDR
// usForces := usForces union un ;
4504: LD_ADDR_EXP 44
4508: PUSH
4509: LD_EXP 44
4513: PUSH
4514: LD_VAR 0 3
4518: UNION
4519: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_INT 39
4527: PPUSH
4528: LD_INT 24
4530: PPUSH
4531: LD_INT 4
4533: PPUSH
4534: LD_INT 0
4536: PPUSH
4537: CALL_OW 50
// if i < 3 then
4541: LD_VAR 0 2
4545: PUSH
4546: LD_INT 3
4548: LESS
4549: IFFALSE 4602
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 22
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 58
4568: PUSH
4569: EMPTY
4570: LIST
4571: PUSH
4572: LD_INT 30
4574: PUSH
4575: LD_INT 31
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: LD_VAR 0 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 120
// end ;
4602: GO 4457
4604: POP
4605: POP
// for i := 1 to 2 do
4606: LD_ADDR_VAR 0 2
4610: PUSH
4611: DOUBLE
4612: LD_INT 1
4614: DEC
4615: ST_TO_ADDR
4616: LD_INT 2
4618: PUSH
4619: FOR_TO
4620: IFFALSE 4684
// begin PrepareHuman ( false , 2 , 2 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 2
4627: PPUSH
4628: LD_INT 2
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: GO 4619
4684: POP
4685: POP
// PrepareHuman ( false , 4 , 1 ) ;
4686: LD_INT 0
4688: PPUSH
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 380
// un := CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// usForces := usForces union un ;
4709: LD_ADDR_EXP 44
4713: PUSH
4714: LD_EXP 44
4718: PUSH
4719: LD_VAR 0 3
4723: UNION
4724: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4725: LD_VAR 0 3
4729: PPUSH
4730: LD_INT 39
4732: PPUSH
4733: LD_INT 24
4735: PPUSH
4736: LD_INT 4
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 50
// end ;
4746: LD_VAR 0 1
4750: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4751: LD_EXP 44
4755: PUSH
4756: LD_EXP 6
4760: NOT
4761: AND
4762: PUSH
4763: LD_EXP 14
4767: NOT
4768: AND
4769: IFFALSE 5200
4771: GO 4773
4773: DISABLE
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// begin enable ;
4781: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_EXP 44
4791: PPUSH
4792: LD_INT 25
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 72
4806: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4807: LD_ADDR_VAR 0 4
4811: PUSH
4812: LD_EXP 44
4816: PPUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 72
4831: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4832: LD_ADDR_VAR 0 5
4836: PUSH
4837: LD_EXP 44
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 4
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4857: LD_INT 7
4859: PPUSH
4860: LD_INT 22
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 70
4874: PUSH
4875: LD_INT 1
4877: EQUAL
4878: IFFALSE 4954
// for i in sol do
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_VAR 0 4
4889: PUSH
4890: FOR_IN
4891: IFFALSE 4952
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4893: LD_VAR 0 1
4897: PPUSH
4898: CALL_OW 310
4902: NOT
4903: PUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 310
4913: PPUSH
4914: CALL_OW 266
4918: PUSH
4919: LD_INT 4
4921: EQUAL
4922: NOT
4923: OR
4924: IFFALSE 4950
// begin ComExitBuilding ( i ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_INT 37
4942: PPUSH
4943: LD_INT 23
4945: PPUSH
4946: CALL_OW 174
// end ;
4950: GO 4890
4952: POP
4953: POP
// if eng then
4954: LD_VAR 0 3
4958: IFFALSE 5200
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 1
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 95
4977: PUSH
4978: LD_INT 7
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 24
5000: PUSH
5001: LD_INT 1000
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// if b then
5023: LD_VAR 0 2
5027: IFFALSE 5058
// begin ComExitBuilding ( eng ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5038: LD_VAR 0 3
5042: PPUSH
5043: LD_VAR 0 2
5047: PUSH
5048: LD_INT 1
5050: ARRAY
5051: PPUSH
5052: CALL_OW 190
// end else
5056: GO 5200
// begin for i in eng do
5058: LD_ADDR_VAR 0 1
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: FOR_IN
5069: IFFALSE 5198
// if not HasTask ( i ) then
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 314
5080: NOT
5081: IFFALSE 5196
// begin if americanBuildList then
5083: LD_EXP 46
5087: IFFALSE 5172
// begin if IsInUnit ( i ) then
5089: LD_VAR 0 1
5093: PPUSH
5094: CALL_OW 310
5098: IFFALSE 5109
// ComExitBuilding ( i ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5109: LD_VAR 0 1
5113: PPUSH
5114: LD_EXP 46
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 46
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PUSH
5136: LD_INT 2
5138: ARRAY
5139: PPUSH
5140: LD_EXP 46
5144: PUSH
5145: LD_INT 1
5147: ARRAY
5148: PUSH
5149: LD_INT 3
5151: ARRAY
5152: PPUSH
5153: LD_EXP 46
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PUSH
5162: LD_INT 4
5164: ARRAY
5165: PPUSH
5166: CALL_OW 205
// end else
5170: GO 5196
// if not IsInUnit ( i ) then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 310
5181: NOT
5182: IFFALSE 5196
// ComEnterUnit ( i , usDepot ) ;
5184: LD_VAR 0 1
5188: PPUSH
5189: LD_INT 11
5191: PPUSH
5192: CALL_OW 120
// end ;
5196: GO 5068
5198: POP
5199: POP
// end ; end ; end ;
5200: PPOPN 5
5202: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5203: LD_INT 0
5205: PPUSH
5206: PPUSH
5207: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 35
5215: PUSH
5216: LD_INT 45
5218: PUSH
5219: LD_INT 48
5221: PUSH
5222: LD_EXP 58
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: ST_TO_ADDR
// for i in tech do
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: LD_VAR 0 3
5242: PUSH
5243: FOR_IN
5244: IFFALSE 5262
// AddComResearch ( lab , i ) ;
5246: LD_VAR 0 1
5250: PPUSH
5251: LD_VAR 0 4
5255: PPUSH
5256: CALL_OW 184
5260: GO 5243
5262: POP
5263: POP
// end ;
5264: LD_VAR 0 2
5268: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5269: LD_EXP 12
5273: PUSH
5274: LD_EXP 23
5278: PUSH
5279: LD_EXP 27
5283: LESSEQUAL
5284: AND
5285: IFFALSE 5310
5287: GO 5289
5289: DISABLE
// begin enable ;
5290: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5291: LD_INT 35
5293: PPUSH
5294: LD_INT 2065
5296: PPUSH
5297: CALL_OW 12
5301: PPUSH
5302: CALL_OW 67
// SendConvoy ;
5306: CALL 5416 0 0
// end ;
5310: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5311: LD_EXP 6
5315: PUSH
5316: LD_EXP 18
5320: AND
5321: IFFALSE 5415
5323: GO 5325
5325: DISABLE
// begin if americanHasEscaped then
5326: LD_EXP 8
5330: IFFALSE 5341
// wait ( 3 3$20 ) else
5332: LD_INT 7000
5334: PPUSH
5335: CALL_OW 67
5339: GO 5348
// wait ( 6 6$40 ) ;
5341: LD_INT 14000
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6163 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 , 4 4$00 ] [ Difficulty ] ) ;
5352: LD_INT 14000
5354: PUSH
5355: LD_INT 11900
5357: PUSH
5358: LD_INT 9800
5360: PUSH
5361: LD_INT 8400
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: LD_OWVAR 67
5374: ARRAY
5375: PPUSH
5376: CALL_OW 67
// SendAttack ;
5380: CALL 6163 0 0
// until attackWave < [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5384: LD_EXP 19
5388: PUSH
5389: LD_INT 6
5391: PUSH
5392: LD_INT 7
5394: PUSH
5395: LD_INT 8
5397: PUSH
5398: LD_INT 9
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_OWVAR 67
5411: ARRAY
5412: LESS
5413: IFFALSE 5352
// end ;
5415: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
// road := rand ( 1 , 2 ) ;
5426: LD_ADDR_VAR 0 4
5430: PUSH
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 2
5436: PPUSH
5437: CALL_OW 12
5441: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5442: LD_ADDR_VAR 0 8
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 8
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_VAR 0 4
5461: ARRAY
5462: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 35
5470: PUSH
5471: LD_INT 66
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 101
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_INT 34
5507: PUSH
5508: LD_INT 67
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 38
5517: PUSH
5518: LD_INT 62
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 43
5527: PUSH
5528: LD_INT 54
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 57
5537: PUSH
5538: LD_INT 57
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 77
5547: PUSH
5548: LD_INT 71
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 86
5557: PUSH
5558: LD_INT 60
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 89
5567: PUSH
5568: LD_INT 35
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 93
5577: PUSH
5578: LD_INT 17
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 97
5587: PUSH
5588: LD_INT 10
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 103
5597: PUSH
5598: LD_INT 9
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: ST_TO_ADDR
// if road = 2 then
5617: LD_VAR 0 4
5621: PUSH
5622: LD_INT 2
5624: EQUAL
5625: IFFALSE 5642
// points := ReverseArray ( points ) ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 6
5636: PPUSH
5637: CALL 989 0 1
5641: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5642: LD_INT 4
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 2
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 12
5659: PPUSH
5660: LD_INT 80
5662: PPUSH
5663: CALL 325 0 7
// veh := CreateVehicle ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 45
5676: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_VAR 0 5
5686: PUSH
5687: LD_VAR 0 4
5691: ARRAY
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PPUSH
5697: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5701: LD_VAR 0 3
5705: PPUSH
5706: LD_VAR 0 5
5710: PUSH
5711: LD_VAR 0 4
5715: ARRAY
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 5
5725: PUSH
5726: LD_VAR 0 4
5730: ARRAY
5731: PUSH
5732: LD_INT 2
5734: ARRAY
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5743: LD_INT 0
5745: PPUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_OWVAR 67
5753: PPUSH
5754: CALL_OW 380
// un := CreateHuman ;
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: CALL_OW 44
5767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PPUSH
5778: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 , 48 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5782: LD_INT 60
5784: PUSH
5785: LD_INT 56
5787: PUSH
5788: LD_INT 52
5790: PUSH
5791: LD_INT 48
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_OWVAR 67
5804: ARRAY
5805: PPUSH
5806: CALL_OW 13
5810: PUSH
5811: LD_OWVAR 1
5815: PUSH
5816: LD_INT 30
5818: MOD
5819: PLUS
5820: PUSH
5821: LD_EXP 23
5825: PUSH
5826: LD_INT 4
5828: LESS
5829: OR
5830: IFFALSE 5847
// SetCargo ( veh , mat_cans , 100 ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 100
5842: PPUSH
5843: CALL_OW 290
// for i := 2 to points do
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: DOUBLE
5853: LD_INT 2
5855: DEC
5856: ST_TO_ADDR
5857: LD_VAR 0 6
5861: PUSH
5862: FOR_TO
5863: IFFALSE 5906
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_VAR 0 6
5874: PUSH
5875: LD_VAR 0 7
5879: ARRAY
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: LD_VAR 0 6
5889: PUSH
5890: LD_VAR 0 7
5894: ARRAY
5895: PUSH
5896: LD_INT 2
5898: ARRAY
5899: PPUSH
5900: CALL_OW 171
5904: GO 5862
5906: POP
5907: POP
// convoyCounter := convoyCounter + 1 ;
5908: LD_ADDR_EXP 23
5912: PUSH
5913: LD_EXP 23
5917: PUSH
5918: LD_INT 1
5920: PLUS
5921: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5922: LD_INT 35
5924: PPUSH
5925: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 314
5938: NOT
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: CALL_OW 302
5949: AND
5950: IFFALSE 5991
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5952: LD_VAR 0 3
5956: PPUSH
5957: LD_VAR 0 6
5961: PUSH
5962: LD_VAR 0 6
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_VAR 0 6
5976: PUSH
5977: LD_VAR 0 6
5981: ARRAY
5982: PUSH
5983: LD_INT 2
5985: ARRAY
5986: PPUSH
5987: CALL_OW 111
// if not IsInUnit ( un ) then
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL_OW 310
6000: NOT
6001: IFFALSE 6042
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 6
6012: PUSH
6013: LD_VAR 0 6
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: LD_VAR 0 6
6027: PUSH
6028: LD_VAR 0 6
6032: ARRAY
6033: PUSH
6034: LD_INT 2
6036: ARRAY
6037: PPUSH
6038: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6042: LD_VAR 0 3
6046: PPUSH
6047: LD_VAR 0 8
6051: PPUSH
6052: CALL_OW 308
6056: PUSH
6057: LD_VAR 0 2
6061: PPUSH
6062: LD_VAR 0 8
6066: PPUSH
6067: CALL_OW 308
6071: OR
6072: IFFALSE 5922
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 302
6083: PUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: CALL_OW 302
6093: NOT
6094: AND
6095: PUSH
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_VAR 0 8
6105: PPUSH
6106: CALL_OW 308
6110: AND
6111: IFFALSE 6122
// RemoveUnit ( un ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_VAR 0 8
6131: PPUSH
6132: CALL_OW 308
6136: PUSH
6137: LD_VAR 0 3
6141: PPUSH
6142: CALL_OW 302
6146: AND
6147: IFFALSE 6158
// RemoveUnit ( veh ) ;
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 64
// end ;
6158: LD_VAR 0 1
6162: RET
// export function SendAttack ; var un , veh , i ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// if ingame_video then
6169: LD_OWVAR 52
6173: IFFALSE 6196
// begin repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// until not ingame_video ;
6182: LD_OWVAR 52
6186: NOT
6187: IFFALSE 6175
// wait ( 0 0$5 ) ;
6189: LD_INT 175
6191: PPUSH
6192: CALL_OW 67
// end ; IncomingAttack ;
6196: CALL 15155 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6200: LD_INT 2100
6202: PPUSH
6203: LD_INT 3500
6205: PPUSH
6206: CALL_OW 12
6210: PPUSH
6211: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: DOUBLE
6221: LD_INT 1
6223: DEC
6224: ST_TO_ADDR
6225: LD_INT 3
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: LD_OWVAR 67
6247: ARRAY
6248: PUSH
6249: LD_EXP 19
6253: PUSH
6254: LD_INT 3
6256: DIV
6257: PLUS
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6376
// begin uc_side := 1 ;
6262: LD_ADDR_OWVAR 20
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// uc_nation := 1 ;
6270: LD_ADDR_OWVAR 21
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6278: LD_INT 0
6280: PPUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_INT 2
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_OWVAR 67
6306: ARRAY
6307: PPUSH
6308: CALL_OW 380
// un := CreateHuman ;
6312: LD_ADDR_VAR 0 2
6316: PUSH
6317: CALL_OW 44
6321: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6322: LD_VAR 0 2
6326: PPUSH
6327: LD_INT 37
6329: PPUSH
6330: LD_INT 70
6332: PPUSH
6333: LD_INT 3
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 50
// usAttackers := usAttackers union un ;
6343: LD_ADDR_EXP 47
6347: PUSH
6348: LD_EXP 47
6352: PUSH
6353: LD_VAR 0 2
6357: UNION
6358: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6359: LD_VAR 0 2
6363: PPUSH
6364: LD_INT 40
6366: PPUSH
6367: LD_INT 65
6369: PPUSH
6370: CALL_OW 111
// end ;
6374: GO 6259
6376: POP
6377: POP
// uc_side := 1 ;
6378: LD_ADDR_OWVAR 20
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// uc_nation := 1 ;
6386: LD_ADDR_OWVAR 21
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6394: LD_INT 0
6396: PPUSH
6397: LD_INT 4
6399: PPUSH
6400: LD_INT 2
6402: PPUSH
6403: CALL_OW 380
// un := CreateHuman ;
6407: LD_ADDR_VAR 0 2
6411: PUSH
6412: CALL_OW 44
6416: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 37
6424: PPUSH
6425: LD_INT 70
6427: PPUSH
6428: LD_INT 3
6430: PPUSH
6431: LD_INT 0
6433: PPUSH
6434: CALL_OW 50
// usAttackers := usAttackers union un ;
6438: LD_ADDR_EXP 47
6442: PUSH
6443: LD_EXP 47
6447: PUSH
6448: LD_VAR 0 2
6452: UNION
6453: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 40
6461: PPUSH
6462: LD_INT 65
6464: PPUSH
6465: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6469: LD_ADDR_VAR 0 4
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_OWVAR 67
6483: PUSH
6484: LD_EXP 19
6488: PUSH
6489: LD_INT 4
6491: DIV
6492: PLUS
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6668
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: LD_INT 2
6510: PPUSH
6511: LD_INT 1
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: LD_INT 4
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 12
6541: ARRAY
6542: PPUSH
6543: LD_INT 90
6545: PPUSH
6546: CALL 325 0 7
6550: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_INT 35
6558: PPUSH
6559: LD_INT 65
6561: PPUSH
6562: LD_INT 0
6564: PPUSH
6565: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6569: LD_INT 0
6571: PPUSH
6572: LD_INT 3
6574: PPUSH
6575: LD_OWVAR 67
6579: PUSH
6580: LD_INT 1
6582: PLUS
6583: PPUSH
6584: CALL_OW 380
// un := CreateHuman ;
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: CALL_OW 44
6597: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6598: LD_VAR 0 2
6602: PPUSH
6603: LD_VAR 0 3
6607: PPUSH
6608: CALL_OW 52
// usAttackers := usAttackers union un ;
6612: LD_ADDR_EXP 47
6616: PUSH
6617: LD_EXP 47
6621: PUSH
6622: LD_VAR 0 2
6626: UNION
6627: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6628: LD_VAR 0 3
6632: PPUSH
6633: LD_INT 39
6635: PPUSH
6636: LD_INT 60
6638: PPUSH
6639: CALL_OW 111
// wait ( 0 0$3 ) ;
6643: LD_INT 105
6645: PPUSH
6646: CALL_OW 67
// usAttackers := usAttackers union veh ;
6650: LD_ADDR_EXP 47
6654: PUSH
6655: LD_EXP 47
6659: PUSH
6660: LD_VAR 0 3
6664: UNION
6665: ST_TO_ADDR
// end ;
6666: GO 6494
6668: POP
6669: POP
// attackWave := attackWave + 1 ;
6670: LD_ADDR_EXP 19
6674: PUSH
6675: LD_EXP 19
6679: PUSH
6680: LD_INT 1
6682: PLUS
6683: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6684: LD_EXP 24
6688: PPUSH
6689: CALL_OW 427
// end ;
6693: LD_VAR 0 1
6697: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
6702: PPUSH
6703: PPUSH
6704: PPUSH
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
// if retreatAllowed then
6711: LD_EXP 11
6715: IFFALSE 6727
// strategy := 2 else
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: LD_INT 2
6724: ST_TO_ADDR
6725: GO 6743
// strategy := rand ( 0 , 2 ) ;
6727: LD_ADDR_VAR 0 5
6731: PUSH
6732: LD_INT 0
6734: PPUSH
6735: LD_INT 2
6737: PPUSH
6738: CALL_OW 12
6742: ST_TO_ADDR
// attackFormula := [ ] ;
6743: LD_ADDR_VAR 0 6
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// case strategy of 0 :
6750: LD_VAR 0 5
6754: PUSH
6755: LD_INT 0
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6763
6761: GO 7093
6763: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6764: LD_INT 11
6766: PPUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 70
6795: NOT
6796: IFFALSE 6868
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6798: LD_ADDR_VAR 0 6
6802: PUSH
6803: LD_INT 41
6805: PUSH
6806: LD_INT 34
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: PUSH
6816: LD_INT 53
6818: PUSH
6819: LD_INT 62
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 37
6828: PUSH
6829: LD_INT 63
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 44
6838: PUSH
6839: LD_INT 45
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 37
6848: PUSH
6849: LD_INT 28
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: ST_TO_ADDR
6866: GO 7091
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6868: LD_INT 12
6870: PPUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: LD_INT 30
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 30
6896: PUSH
6897: LD_INT 31
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: LD_INT 32
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 70
6928: NOT
6929: IFFALSE 7012
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6931: LD_ADDR_VAR 0 6
6935: PUSH
6936: LD_INT 27
6938: PUSH
6939: LD_INT 42
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 27
6948: PUSH
6949: LD_INT 32
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 53
6962: PUSH
6963: LD_INT 62
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 37
6972: PUSH
6973: LD_INT 63
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 44
6982: PUSH
6983: LD_INT 45
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 37
6992: PUSH
6993: LD_INT 28
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: ST_TO_ADDR
7010: GO 7091
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_INT 71
7019: PUSH
7020: LD_INT 67
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 54
7029: PUSH
7030: LD_INT 35
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 63
7043: PUSH
7044: LD_INT 40
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 37
7053: PUSH
7054: LD_INT 63
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 44
7063: PUSH
7064: LD_INT 45
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 37
7073: PUSH
7074: LD_INT 28
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
// end ; 1 :
7091: GO 7296
7093: LD_INT 1
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7205
7101: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7102: LD_ADDR_VAR 0 6
7106: PUSH
7107: LD_INT 71
7109: PUSH
7110: LD_INT 67
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 82
7119: PUSH
7120: LD_INT 23
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 53
7129: PUSH
7130: LD_INT 7
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 43
7139: PUSH
7140: LD_INT 10
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 53
7155: PUSH
7156: LD_INT 62
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 37
7165: PUSH
7166: LD_INT 63
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 44
7175: PUSH
7176: LD_INT 45
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 37
7185: PUSH
7186: LD_INT 28
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
7203: GO 7296
7205: LD_INT 2
7207: DOUBLE
7208: EQUAL
7209: IFTRUE 7213
7211: GO 7295
7213: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7214: LD_ADDR_VAR 0 6
7218: PUSH
7219: LD_INT 90
7221: PUSH
7222: LD_INT 59
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 108
7231: PUSH
7232: LD_INT 64
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 82
7245: PUSH
7246: LD_INT 75
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 73
7255: PUSH
7256: LD_INT 67
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 65
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 108
7275: PUSH
7276: LD_INT 62
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: ST_TO_ADDR
7293: GO 7296
7295: POP
// if not attackFormula then
7296: LD_VAR 0 6
7300: NOT
7301: IFFALSE 7305
// exit ;
7303: GO 8983
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7305: LD_ADDR_VAR 0 7
7309: PUSH
7310: LD_EXP 47
7314: PPUSH
7315: LD_INT 25
7317: PUSH
7318: LD_INT 1
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 72
7329: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7330: LD_ADDR_VAR 0 8
7334: PUSH
7335: LD_EXP 47
7339: PPUSH
7340: LD_INT 25
7342: PUSH
7343: LD_INT 4
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 72
7354: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7355: LD_ADDR_VAR 0 9
7359: PUSH
7360: LD_EXP 47
7364: PPUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 72
7379: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7380: LD_ADDR_VAR 0 10
7384: PUSH
7385: LD_EXP 47
7389: PPUSH
7390: LD_INT 21
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 72
7404: ST_TO_ADDR
// if sci then
7405: LD_VAR 0 8
7409: IFFALSE 7446
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7411: LD_VAR 0 8
7415: PPUSH
7416: LD_VAR 0 6
7420: PUSH
7421: LD_INT 2
7423: ARRAY
7424: PUSH
7425: LD_INT 1
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 6
7433: PUSH
7434: LD_INT 2
7436: ARRAY
7437: PUSH
7438: LD_INT 2
7440: ARRAY
7441: PPUSH
7442: CALL_OW 111
// repeat wait ( 10 ) ;
7446: LD_INT 10
7448: PPUSH
7449: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7453: LD_ADDR_VAR 0 7
7457: PUSH
7458: LD_EXP 47
7462: PPUSH
7463: LD_INT 25
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 72
7477: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7478: LD_ADDR_VAR 0 8
7482: PUSH
7483: LD_EXP 47
7487: PPUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 4
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PPUSH
7498: CALL_OW 72
7502: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7503: LD_ADDR_VAR 0 9
7507: PUSH
7508: LD_EXP 47
7512: PPUSH
7513: LD_INT 25
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 72
7527: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7528: LD_ADDR_VAR 0 10
7532: PUSH
7533: LD_EXP 47
7537: PPUSH
7538: LD_INT 21
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 72
7552: ST_TO_ADDR
// if sol then
7553: LD_VAR 0 7
7557: IFFALSE 7978
// begin for i in sol do
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_VAR 0 7
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7976
// begin tag := GetTag ( i ) ;
7572: LD_ADDR_VAR 0 4
7576: PUSH
7577: LD_VAR 0 2
7581: PPUSH
7582: CALL_OW 110
7586: ST_TO_ADDR
// if not tag then
7587: LD_VAR 0 4
7591: NOT
7592: IFFALSE 7701
// begin if GetLives ( i ) = 1000 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 256
7603: PUSH
7604: LD_INT 1000
7606: EQUAL
7607: IFFALSE 7623
// SetTag ( i , 1 ) else
7609: LD_VAR 0 2
7613: PPUSH
7614: LD_INT 1
7616: PPUSH
7617: CALL_OW 109
7621: GO 7699
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7623: LD_VAR 0 2
7627: PPUSH
7628: LD_VAR 0 6
7632: PUSH
7633: LD_INT 2
7635: ARRAY
7636: PUSH
7637: LD_INT 1
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 6
7645: PUSH
7646: LD_INT 2
7648: ARRAY
7649: PUSH
7650: LD_INT 2
7652: ARRAY
7653: PPUSH
7654: CALL_OW 297
7658: PUSH
7659: LD_INT 10
7661: GREATER
7662: IFFALSE 7699
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7664: LD_VAR 0 2
7668: PPUSH
7669: LD_VAR 0 6
7673: PUSH
7674: LD_INT 2
7676: ARRAY
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_INT 2
7689: ARRAY
7690: PUSH
7691: LD_INT 2
7693: ARRAY
7694: PPUSH
7695: CALL_OW 111
// end else
7699: GO 7974
// begin if GetLives ( i ) < 760 then
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL_OW 256
7710: PUSH
7711: LD_INT 760
7713: LESS
7714: IFFALSE 7765
// begin SetTag ( i , 0 ) ;
7716: LD_VAR 0 2
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7728: LD_VAR 0 2
7732: PPUSH
7733: LD_VAR 0 6
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PUSH
7742: LD_INT 1
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 6
7750: PUSH
7751: LD_INT 2
7753: ARRAY
7754: PUSH
7755: LD_INT 2
7757: ARRAY
7758: PPUSH
7759: CALL_OW 111
// end else
7763: GO 7974
// if tag <= attackFormula [ 1 ] then
7765: LD_VAR 0 4
7769: PUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: LESSEQUAL
7779: IFFALSE 7940
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_VAR 0 6
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PUSH
7795: LD_VAR 0 4
7799: ARRAY
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 6
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PUSH
7814: LD_VAR 0 4
7818: ARRAY
7819: PUSH
7820: LD_INT 2
7822: ARRAY
7823: PPUSH
7824: CALL_OW 297
7828: PUSH
7829: LD_INT 6
7831: GREATER
7832: IFFALSE 7883
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7834: LD_VAR 0 2
7838: PPUSH
7839: LD_VAR 0 6
7843: PUSH
7844: LD_INT 1
7846: ARRAY
7847: PUSH
7848: LD_VAR 0 4
7852: ARRAY
7853: PUSH
7854: LD_INT 1
7856: ARRAY
7857: PPUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: PUSH
7867: LD_VAR 0 4
7871: ARRAY
7872: PUSH
7873: LD_INT 2
7875: ARRAY
7876: PPUSH
7877: CALL_OW 114
7881: GO 7938
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7883: LD_INT 81
7885: PUSH
7886: LD_INT 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 91
7895: PUSH
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PPUSH
7913: CALL_OW 69
7917: NOT
7918: IFFALSE 7938
// SetTag ( i , tag + 1 ) ;
7920: LD_VAR 0 2
7924: PPUSH
7925: LD_VAR 0 4
7929: PUSH
7930: LD_INT 1
7932: PLUS
7933: PPUSH
7934: CALL_OW 109
// end else
7938: GO 7974
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7940: LD_VAR 0 2
7944: PPUSH
7945: LD_INT 81
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: PPUSH
7960: LD_VAR 0 2
7964: PPUSH
7965: CALL_OW 74
7969: PPUSH
7970: CALL_OW 115
// end ; end ;
7974: GO 7569
7976: POP
7977: POP
// end ; if sci then
7978: LD_VAR 0 8
7982: IFFALSE 8251
// begin if not sol and not mech then
7984: LD_VAR 0 7
7988: NOT
7989: PUSH
7990: LD_VAR 0 9
7994: NOT
7995: AND
7996: IFFALSE 8048
// begin for i in sci do
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_VAR 0 8
8007: PUSH
8008: FOR_IN
8009: IFFALSE 8044
// begin usForces := usForces union i ;
8011: LD_ADDR_EXP 44
8015: PUSH
8016: LD_EXP 44
8020: PUSH
8021: LD_VAR 0 2
8025: UNION
8026: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8027: LD_VAR 0 2
8031: PPUSH
8032: LD_INT 34
8034: PPUSH
8035: LD_INT 68
8037: PPUSH
8038: CALL_OW 111
// end ;
8042: GO 8008
8044: POP
8045: POP
// end else
8046: GO 8251
// for i in sci do
8048: LD_ADDR_VAR 0 2
8052: PUSH
8053: LD_VAR 0 8
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8249
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_VAR 0 6
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PUSH
8075: LD_INT 1
8077: ARRAY
8078: PPUSH
8079: LD_VAR 0 6
8083: PUSH
8084: LD_INT 2
8086: ARRAY
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PPUSH
8092: CALL_OW 297
8096: PUSH
8097: LD_INT 10
8099: GREATER
8100: IFFALSE 8139
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_VAR 0 6
8111: PUSH
8112: LD_INT 2
8114: ARRAY
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_VAR 0 6
8124: PUSH
8125: LD_INT 2
8127: ARRAY
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: CALL_OW 111
8137: GO 8247
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8139: LD_VAR 0 7
8143: PPUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 24
8149: PUSH
8150: LD_INT 1000
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 91
8163: PUSH
8164: LD_VAR 0 2
8168: PUSH
8169: LD_INT 10
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 72
8185: IFFALSE 8247
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_VAR 0 7
8196: PPUSH
8197: LD_INT 3
8199: PUSH
8200: LD_INT 24
8202: PUSH
8203: LD_INT 1000
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 91
8216: PUSH
8217: LD_VAR 0 2
8221: PUSH
8222: LD_INT 10
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 72
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: CALL_OW 128
8247: GO 8058
8249: POP
8250: POP
// end ; if mech then
8251: LD_VAR 0 9
8255: IFFALSE 8965
// begin for i in mech do
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_VAR 0 9
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8963
// begin tag := GetTag ( i ) ;
8270: LD_ADDR_VAR 0 4
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 110
8284: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8285: LD_ADDR_VAR 0 11
8289: PUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: CALL_OW 310
8299: ST_TO_ADDR
// if not tag then
8300: LD_VAR 0 4
8304: NOT
8305: IFFALSE 8676
// begin if veh then
8307: LD_VAR 0 11
8311: IFFALSE 8482
// begin if GetLives ( veh ) = 1000 then
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 256
8322: PUSH
8323: LD_INT 1000
8325: EQUAL
8326: IFFALSE 8342
// SetTag ( i , 1 ) else
8328: LD_VAR 0 2
8332: PPUSH
8333: LD_INT 1
8335: PPUSH
8336: CALL_OW 109
8340: GO 8480
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8342: LD_VAR 0 11
8346: PPUSH
8347: LD_VAR 0 6
8351: PUSH
8352: LD_INT 3
8354: ARRAY
8355: PUSH
8356: LD_INT 1
8358: ARRAY
8359: PPUSH
8360: LD_VAR 0 6
8364: PUSH
8365: LD_INT 3
8367: ARRAY
8368: PUSH
8369: LD_INT 2
8371: ARRAY
8372: PPUSH
8373: CALL_OW 297
8377: PUSH
8378: LD_INT 8
8380: GREATER
8381: IFFALSE 8420
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8383: LD_VAR 0 11
8387: PPUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_INT 3
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: LD_VAR 0 6
8405: PUSH
8406: LD_INT 3
8408: ARRAY
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 111
8418: GO 8480
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8420: LD_INT 81
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_VAR 0 2
8437: PUSH
8438: LD_INT 10
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: NOT
8455: IFFALSE 8480
// begin ComExitVehicle ( i ) ;
8457: LD_VAR 0 2
8461: PPUSH
8462: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8466: LD_VAR 0 2
8470: PPUSH
8471: LD_VAR 0 11
8475: PPUSH
8476: CALL_OW 189
// end ; end else
8480: GO 8674
// if GetLives ( i ) < 400 then
8482: LD_VAR 0 2
8486: PPUSH
8487: CALL_OW 256
8491: PUSH
8492: LD_INT 400
8494: LESS
8495: IFFALSE 8546
// begin usAttackers := usAttackers diff i ;
8497: LD_ADDR_EXP 47
8501: PUSH
8502: LD_EXP 47
8506: PUSH
8507: LD_VAR 0 2
8511: DIFF
8512: ST_TO_ADDR
// usForces := usForces union i ;
8513: LD_ADDR_EXP 44
8517: PUSH
8518: LD_EXP 44
8522: PUSH
8523: LD_VAR 0 2
8527: UNION
8528: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_INT 34
8536: PPUSH
8537: LD_INT 68
8539: PPUSH
8540: CALL_OW 111
// end else
8544: GO 8674
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8546: LD_VAR 0 10
8550: PPUSH
8551: LD_INT 58
8553: PUSH
8554: EMPTY
8555: LIST
8556: PUSH
8557: LD_INT 24
8559: PUSH
8560: LD_INT 1000
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 72
8575: PUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 314
8585: NOT
8586: AND
8587: PUSH
8588: LD_INT 81
8590: PUSH
8591: LD_INT 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 91
8600: PUSH
8601: LD_VAR 0 2
8605: PUSH
8606: LD_INT 9
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 69
8622: OR
8623: IFFALSE 8674
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_VAR 0 10
8634: PPUSH
8635: LD_INT 58
8637: PUSH
8638: EMPTY
8639: LIST
8640: PUSH
8641: LD_INT 24
8643: PUSH
8644: LD_INT 250
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: PPUSH
8660: LD_VAR 0 2
8664: PPUSH
8665: CALL_OW 74
8669: PPUSH
8670: CALL_OW 120
// end else
8674: GO 8961
// begin if veh and GetLives ( veh ) < 760 then
8676: LD_VAR 0 11
8680: PUSH
8681: LD_VAR 0 11
8685: PPUSH
8686: CALL_OW 256
8690: PUSH
8691: LD_INT 760
8693: LESS
8694: AND
8695: IFFALSE 8746
// begin SetTag ( i , 0 ) ;
8697: LD_VAR 0 2
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8709: LD_VAR 0 11
8713: PPUSH
8714: LD_VAR 0 6
8718: PUSH
8719: LD_INT 3
8721: ARRAY
8722: PUSH
8723: LD_INT 1
8725: ARRAY
8726: PPUSH
8727: LD_VAR 0 6
8731: PUSH
8732: LD_INT 3
8734: ARRAY
8735: PUSH
8736: LD_INT 2
8738: ARRAY
8739: PPUSH
8740: CALL_OW 111
// end else
8744: GO 8961
// if veh then
8746: LD_VAR 0 11
8750: IFFALSE 8961
// if tag <= attackFormula [ 4 ] then
8752: LD_VAR 0 4
8756: PUSH
8757: LD_VAR 0 6
8761: PUSH
8762: LD_INT 4
8764: ARRAY
8765: LESSEQUAL
8766: IFFALSE 8927
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8768: LD_VAR 0 11
8772: PPUSH
8773: LD_VAR 0 6
8777: PUSH
8778: LD_INT 4
8780: ARRAY
8781: PUSH
8782: LD_VAR 0 4
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PPUSH
8792: LD_VAR 0 6
8796: PUSH
8797: LD_INT 4
8799: ARRAY
8800: PUSH
8801: LD_VAR 0 4
8805: ARRAY
8806: PUSH
8807: LD_INT 2
8809: ARRAY
8810: PPUSH
8811: CALL_OW 297
8815: PUSH
8816: LD_INT 6
8818: GREATER
8819: IFFALSE 8870
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8821: LD_VAR 0 11
8825: PPUSH
8826: LD_VAR 0 6
8830: PUSH
8831: LD_INT 4
8833: ARRAY
8834: PUSH
8835: LD_VAR 0 4
8839: ARRAY
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: PUSH
8854: LD_VAR 0 4
8858: ARRAY
8859: PUSH
8860: LD_INT 2
8862: ARRAY
8863: PPUSH
8864: CALL_OW 114
8868: GO 8925
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8870: LD_INT 81
8872: PUSH
8873: LD_INT 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 91
8882: PUSH
8883: LD_VAR 0 11
8887: PUSH
8888: LD_INT 10
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 69
8904: NOT
8905: IFFALSE 8925
// SetTag ( i , tag + 1 ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_VAR 0 4
8916: PUSH
8917: LD_INT 1
8919: PLUS
8920: PPUSH
8921: CALL_OW 109
// end else
8925: GO 8961
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8927: LD_VAR 0 11
8931: PPUSH
8932: LD_INT 81
8934: PUSH
8935: LD_INT 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PPUSH
8942: CALL_OW 69
8946: PPUSH
8947: LD_VAR 0 2
8951: PPUSH
8952: CALL_OW 74
8956: PPUSH
8957: CALL_OW 115
// end ; end ;
8961: GO 8267
8963: POP
8964: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8965: LD_EXP 47
8969: PPUSH
8970: LD_INT 52
8972: PUSH
8973: EMPTY
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: NOT
8981: IFFALSE 7446
// end ;
8983: LD_VAR 0 1
8987: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8988: LD_INT 22
8990: PUSH
8991: LD_INT 1
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 32
9000: PUSH
9001: LD_INT 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: IFFALSE 9093
9018: GO 9020
9020: DISABLE
9021: LD_INT 0
9023: PPUSH
// begin enable ;
9024: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9025: LD_ADDR_VAR 0 1
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_INT 1
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 32
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: PUSH
9059: FOR_IN
9060: IFFALSE 9091
// if GetFuel ( i ) < 10 then
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL_OW 261
9071: PUSH
9072: LD_INT 10
9074: LESS
9075: IFFALSE 9089
// SetFuel ( i , 10 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 10
9084: PPUSH
9085: CALL_OW 240
9089: GO 9059
9091: POP
9092: POP
// end ; end_of_file
9093: PPOPN 1
9095: END
// export function Action ; var hasAll , i , tmp ; begin
9096: LD_INT 0
9098: PPUSH
9099: PPUSH
9100: PPUSH
9101: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 22
9109: PUSH
9110: LD_INT 2
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 21
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 23
9129: PUSH
9130: LD_INT 2
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: LD_INT 7
9149: GREATEREQUAL
9150: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9151: LD_VAR 0 2
9155: PPUSH
9156: LD_STRING 03_HasAll
9158: PPUSH
9159: CALL_OW 39
// Video ( true ) ;
9163: LD_INT 1
9165: PPUSH
9166: CALL 75268 0 1
// CenterNowOnUnits ( Heike ) ;
9170: LD_EXP 28
9174: PPUSH
9175: CALL_OW 87
// wait ( 0 0$2 ) ;
9179: LD_INT 70
9181: PPUSH
9182: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_STRING DF-1-start
9193: PPUSH
9194: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9198: LD_EXP 28
9202: PPUSH
9203: LD_EXP 36
9207: PPUSH
9208: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9212: LD_EXP 28
9216: PPUSH
9217: LD_STRING DH-1-start
9219: PPUSH
9220: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9224: LD_EXP 37
9228: PPUSH
9229: LD_INT 92
9231: PPUSH
9232: LD_INT 21
9234: PPUSH
9235: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9239: LD_EXP 32
9243: PPUSH
9244: LD_INT 94
9246: PPUSH
9247: LD_INT 23
9249: PPUSH
9250: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9254: LD_EXP 40
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: LD_INT 90
9265: PPUSH
9266: LD_INT 23
9268: PPUSH
9269: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9273: LD_EXP 40
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: LD_INT 93
9284: PPUSH
9285: LD_INT 25
9287: PPUSH
9288: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9292: LD_EXP 40
9296: PPUSH
9297: LD_EXP 37
9301: PPUSH
9302: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9306: LD_EXP 37
9310: PUSH
9311: LD_EXP 32
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PPUSH
9320: LD_EXP 28
9324: PPUSH
9325: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9329: LD_EXP 28
9333: PPUSH
9334: LD_EXP 37
9338: PPUSH
9339: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9343: LD_INT 35
9345: PPUSH
9346: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9350: LD_EXP 37
9354: PPUSH
9355: LD_INT 92
9357: PPUSH
9358: LD_INT 21
9360: PPUSH
9361: CALL_OW 307
9365: IFFALSE 9343
// Say ( Omar , DO-1-start ) ;
9367: LD_EXP 37
9371: PPUSH
9372: LD_STRING DO-1-start
9374: PPUSH
9375: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9379: LD_EXP 28
9383: PPUSH
9384: LD_STRING DH-2-start
9386: PPUSH
9387: CALL_OW 88
// if hasAll then
9391: LD_VAR 0 2
9395: IFFALSE 9523
// begin Say ( Omar , DO-2-start ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_STRING DO-2-start
9404: PPUSH
9405: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9409: LD_EXP 37
9413: PPUSH
9414: LD_STRING DO-3-start
9416: PPUSH
9417: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9421: LD_EXP 28
9425: PPUSH
9426: LD_STRING DH-3-start
9428: PPUSH
9429: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9433: LD_EXP 36
9437: PPUSH
9438: LD_STRING DF-2-start
9440: PPUSH
9441: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9445: LD_EXP 37
9449: PPUSH
9450: LD_EXP 36
9454: PPUSH
9455: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_STRING DO-4-start
9466: PPUSH
9467: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9471: LD_EXP 36
9475: PPUSH
9476: LD_STRING DF-3-start
9478: PPUSH
9479: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9483: LD_EXP 37
9487: PPUSH
9488: LD_STRING DO-5-start
9490: PPUSH
9491: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9495: LD_EXP 36
9499: PPUSH
9500: LD_STRING DF-4-start
9502: PPUSH
9503: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9507: LD_EXP 37
9511: PPUSH
9512: LD_EXP 28
9516: PPUSH
9517: CALL_OW 119
// end else
9521: GO 9623
// begin Say ( Omar , DO-2-start-a ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_STRING DO-2-start-a
9530: PPUSH
9531: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9535: LD_EXP 37
9539: PPUSH
9540: LD_STRING DO-3-start-a
9542: PPUSH
9543: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9547: LD_EXP 28
9551: PPUSH
9552: LD_STRING DH-3-start-a
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9559: LD_EXP 36
9563: PPUSH
9564: LD_STRING DF-2-start-a
9566: PPUSH
9567: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9571: LD_EXP 37
9575: PPUSH
9576: LD_EXP 36
9580: PPUSH
9581: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9585: LD_EXP 37
9589: PPUSH
9590: LD_STRING DO-4-start-a
9592: PPUSH
9593: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9597: LD_EXP 36
9601: PPUSH
9602: LD_STRING DF-3-start-a
9604: PPUSH
9605: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9609: LD_EXP 37
9613: PPUSH
9614: LD_EXP 28
9618: PPUSH
9619: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9623: LD_INT 10
9625: PPUSH
9626: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_STRING DO-1-mission
9637: PPUSH
9638: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING DO-2-mission
9649: PPUSH
9650: CALL_OW 88
// if not hasAll then
9654: LD_VAR 0 2
9658: NOT
9659: IFFALSE 9673
// Say ( Omar , DO-3-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-3-mission
9668: PPUSH
9669: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9673: LD_EXP 37
9677: PPUSH
9678: LD_STRING DO-4-mission
9680: PPUSH
9681: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9685: LD_EXP 28
9689: PPUSH
9690: LD_STRING DH-1-mission
9692: PPUSH
9693: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9697: LD_EXP 36
9701: PPUSH
9702: LD_STRING DF-1-mission
9704: PPUSH
9705: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9709: LD_EXP 37
9713: PPUSH
9714: LD_STRING DO-5-mission
9716: PPUSH
9717: CALL_OW 88
// if not hasAll then
9721: LD_VAR 0 2
9725: NOT
9726: IFFALSE 9861
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9728: LD_ADDR_VAR 0 4
9732: PUSH
9733: LD_INT 22
9735: PUSH
9736: LD_INT 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 21
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 23
9755: PUSH
9756: LD_INT 2
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 69
9772: ST_TO_ADDR
// for i := 7 downto tmp do
9773: LD_ADDR_VAR 0 3
9777: PUSH
9778: DOUBLE
9779: LD_INT 7
9781: INC
9782: ST_TO_ADDR
9783: LD_VAR 0 4
9787: PUSH
9788: FOR_DOWNTO
9789: IFFALSE 9859
// begin if omarSquad < 3 then
9791: LD_EXP 40
9795: PUSH
9796: LD_INT 3
9798: LESS
9799: IFFALSE 9803
// break ;
9801: GO 9859
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9803: LD_EXP 40
9807: PUSH
9808: LD_INT 3
9810: ARRAY
9811: PPUSH
9812: LD_INT 2
9814: PPUSH
9815: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9819: LD_ADDR_EXP 42
9823: PUSH
9824: LD_EXP 42
9828: PUSH
9829: LD_EXP 40
9833: PUSH
9834: LD_INT 3
9836: ARRAY
9837: UNION
9838: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9839: LD_ADDR_EXP 40
9843: PUSH
9844: LD_EXP 40
9848: PPUSH
9849: LD_INT 3
9851: PPUSH
9852: CALL_OW 3
9856: ST_TO_ADDR
// end ;
9857: GO 9788
9859: POP
9860: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9861: LD_EXP 37
9865: PUSH
9866: LD_EXP 40
9870: ADD
9871: PPUSH
9872: LD_INT 103
9874: PPUSH
9875: LD_INT 9
9877: PPUSH
9878: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9882: LD_VAR 0 2
9886: PUSH
9887: LD_EXP 33
9891: PPUSH
9892: CALL_OW 302
9896: AND
9897: IFFALSE 9958
// begin wait ( 0 0$3 ) ;
9899: LD_INT 105
9901: PPUSH
9902: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9906: LD_EXP 33
9910: PPUSH
9911: LD_EXP 36
9915: PPUSH
9916: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9920: LD_EXP 33
9924: PPUSH
9925: LD_STRING DK-1-side
9927: PPUSH
9928: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9932: LD_EXP 36
9936: PPUSH
9937: LD_EXP 33
9941: PPUSH
9942: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9946: LD_EXP 36
9950: PPUSH
9951: LD_STRING DF-1-side
9953: PPUSH
9954: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9958: LD_INT 22
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: PPUSH
9973: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 39
9986: ADD
9987: PPUSH
9988: LD_INT 108
9990: PPUSH
9991: LD_INT 62
9993: PPUSH
9994: CALL_OW 111
// gameStarted := true ;
9998: LD_ADDR_EXP 3
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10006: LD_INT 105
10008: PPUSH
10009: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10013: LD_EXP 28
10017: PPUSH
10018: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10022: LD_EXP 28
10026: PPUSH
10027: LD_EXP 32
10031: PPUSH
10032: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PPUSH
10046: CALL_OW 69
10050: PUSH
10051: LD_EXP 28
10055: DIFF
10056: PPUSH
10057: LD_EXP 28
10061: PPUSH
10062: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10066: LD_EXP 28
10070: PPUSH
10071: LD_STRING DH-1-explore
10073: PPUSH
10074: CALL_OW 88
// if Givi then
10078: LD_EXP 29
10082: IFFALSE 10098
// Say ( Givi , DG-1-explore ) else
10084: LD_EXP 29
10088: PPUSH
10089: LD_STRING DG-1-explore
10091: PPUSH
10092: CALL_OW 88
10096: GO 10135
// if heikeSecondSquad then
10098: LD_EXP 42
10102: IFFALSE 10135
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10104: LD_EXP 42
10108: PPUSH
10109: LD_INT 26
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 72
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING DArm-1-explore
10130: PPUSH
10131: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10135: LD_EXP 32
10139: PPUSH
10140: LD_STRING DA-1-explore
10142: PPUSH
10143: CALL_OW 88
// if Sophia then
10147: LD_EXP 34
10151: IFFALSE 10229
// begin Say ( Sophia , DS-2-explore ) ;
10153: LD_EXP 34
10157: PPUSH
10158: LD_STRING DS-2-explore
10160: PPUSH
10161: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10165: LD_EXP 32
10169: PPUSH
10170: LD_STRING DA-2-explore
10172: PPUSH
10173: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10177: LD_EXP 34
10181: PPUSH
10182: LD_EXP 32
10186: PPUSH
10187: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10191: LD_EXP 32
10195: PPUSH
10196: LD_EXP 34
10200: PPUSH
10201: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10205: LD_EXP 34
10209: PPUSH
10210: LD_STRING DS-3-explore
10212: PPUSH
10213: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10217: LD_EXP 32
10221: PPUSH
10222: LD_STRING DA-3-explore
10224: PPUSH
10225: CALL_OW 88
// end ; if Mike then
10229: LD_EXP 30
10233: IFFALSE 10289
// begin Say ( Mike , DM-1-explore ) ;
10235: LD_EXP 30
10239: PPUSH
10240: LD_STRING DM-1-explore
10242: PPUSH
10243: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10247: LD_EXP 28
10251: PPUSH
10252: LD_STRING DH-2-explore
10254: PPUSH
10255: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10259: LD_EXP 30
10263: PPUSH
10264: LD_STRING DM-2-explore
10266: PPUSH
10267: CALL_OW 88
// if Kaia then
10271: LD_EXP 33
10275: IFFALSE 10289
// Say ( Kaia , DK-1-explore ) ;
10277: LD_EXP 33
10281: PPUSH
10282: LD_STRING DK-1-explore
10284: PPUSH
10285: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10289: LD_INT 22
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PPUSH
10304: CALL_OW 139
// Video ( false ) ;
10308: LD_INT 0
10310: PPUSH
10311: CALL 75268 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10315: LD_STRING BuildBase
10317: PPUSH
10318: CALL_OW 337
// SaveForQuickRestart ;
10322: CALL_OW 22
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10331: LD_EXP 5
10335: NOT
10336: PUSH
10337: LD_EXP 6
10341: NOT
10342: AND
10343: PUSH
10344: LD_INT 5
10346: PPUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 70
10361: AND
10362: PUSH
10363: LD_EXP 6
10367: NOT
10368: AND
10369: IFFALSE 10454
10371: GO 10373
10373: DISABLE
// begin if Mike then
10374: LD_EXP 30
10378: IFFALSE 10394
// Say ( Mike , DM-1-scout ) else
10380: LD_EXP 30
10384: PPUSH
10385: LD_STRING DM-1-scout
10387: PPUSH
10388: CALL_OW 88
10392: GO 10425
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10394: LD_EXP 42
10398: PPUSH
10399: LD_INT 26
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PPUSH
10409: CALL_OW 72
10413: PUSH
10414: LD_INT 1
10416: ARRAY
10417: PPUSH
10418: LD_STRING DArm-1-explore
10420: PPUSH
10421: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10425: LD_INT 54
10427: PPUSH
10428: LD_INT 35
10430: PPUSH
10431: LD_INT 2
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10441: LD_INT 54
10443: PPUSH
10444: LD_INT 35
10446: PPUSH
10447: LD_INT 2
10449: PPUSH
10450: CALL_OW 331
// end ;
10454: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10455: LD_INT 6
10457: PPUSH
10458: LD_INT 22
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 70
10472: PUSH
10473: LD_EXP 6
10477: NOT
10478: AND
10479: IFFALSE 10733
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10489: LD_ADDR_VAR 0 1
10493: PUSH
10494: LD_EXP 42
10498: PPUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 72
10513: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10514: LD_ADDR_VAR 0 2
10518: PUSH
10519: LD_EXP 42
10523: PPUSH
10524: LD_INT 26
10526: PUSH
10527: LD_INT 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 72
10538: ST_TO_ADDR
// DialogueOn ;
10539: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10543: LD_INT 36
10545: PPUSH
10546: LD_INT 22
10548: PPUSH
10549: LD_INT 2
10551: PPUSH
10552: LD_INT 8
10554: PPUSH
10555: CALL_OW 330
// dwait ( 0 0$1 ) ;
10559: LD_INT 35
10561: PPUSH
10562: CALL_OW 68
// speakerOk := false ;
10566: LD_ADDR_VAR 0 3
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// if Mike then
10574: LD_EXP 30
10578: IFFALSE 10600
// speakerOk := Say ( Mike , DM-1-spot ) else
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_EXP 30
10589: PPUSH
10590: LD_STRING DM-1-spot
10592: PPUSH
10593: CALL_OW 88
10597: ST_TO_ADDR
10598: GO 10628
// if randomMen then
10600: LD_VAR 0 1
10604: IFFALSE 10628
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10606: LD_ADDR_VAR 0 3
10610: PUSH
10611: LD_VAR 0 1
10615: PUSH
10616: LD_INT 1
10618: ARRAY
10619: PPUSH
10620: LD_STRING DArm-1-spot-a
10622: PPUSH
10623: CALL_OW 88
10627: ST_TO_ADDR
// if speakerOk then
10628: LD_VAR 0 3
10632: IFFALSE 10676
// begin if Givi then
10634: LD_EXP 29
10638: IFFALSE 10654
// Say ( Givi , DG-1-spot ) else
10640: LD_EXP 29
10644: PPUSH
10645: LD_STRING DG-1-spot
10647: PPUSH
10648: CALL_OW 88
10652: GO 10676
// if randomWomen then
10654: LD_VAR 0 2
10658: IFFALSE 10676
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10660: LD_VAR 0 2
10664: PUSH
10665: LD_INT 1
10667: ARRAY
10668: PPUSH
10669: LD_STRING DArf-1-spot-a
10671: PPUSH
10672: CALL_OW 88
// end ; if Mike then
10676: LD_EXP 30
10680: IFFALSE 10696
// Say ( Heike , DH-1-spot ) else
10682: LD_EXP 28
10686: PPUSH
10687: LD_STRING DH-1-spot
10689: PPUSH
10690: CALL_OW 88
10694: GO 10708
// Say ( Heike , DH-1-spot-a ) ;
10696: LD_EXP 28
10700: PPUSH
10701: LD_STRING DH-1-spot-a
10703: PPUSH
10704: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10708: LD_INT 36
10710: PPUSH
10711: LD_INT 22
10713: PPUSH
10714: LD_INT 2
10716: PPUSH
10717: CALL_OW 331
// DialogueOff ;
10721: CALL_OW 7
// americanBaseSpoted := true ;
10725: LD_ADDR_EXP 5
10729: PUSH
10730: LD_INT 1
10732: ST_TO_ADDR
// end ;
10733: PPOPN 3
10735: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10736: LD_EXP 5
10740: NOT
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 101
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: AND
10771: PUSH
10772: LD_EXP 6
10776: NOT
10777: AND
10778: IFFALSE 10864
10780: GO 10782
10782: DISABLE
10783: LD_INT 0
10785: PPUSH
// begin americanBaseSpoted := true ;
10786: LD_ADDR_EXP 5
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_EXP 42
10803: PPUSH
10804: LD_INT 26
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 72
10818: ST_TO_ADDR
// if not randomMen then
10819: LD_VAR 0 1
10823: NOT
10824: IFFALSE 10828
// exit ;
10826: GO 10864
// DialogueOn ;
10828: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10832: LD_VAR 0 1
10836: PUSH
10837: LD_INT 1
10839: ARRAY
10840: PPUSH
10841: LD_STRING DArm-1-spot-a
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10848: LD_EXP 28
10852: PPUSH
10853: LD_STRING DH-1-spot-a
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: PPOPN 1
10866: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10867: LD_INT 11
10869: PPUSH
10870: CALL_OW 255
10874: PUSH
10875: LD_INT 2
10877: EQUAL
10878: PUSH
10879: LD_INT 7
10881: PPUSH
10882: LD_INT 22
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: LD_INT 50
10897: PUSH
10898: EMPTY
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 30
10907: PUSH
10908: LD_INT 31
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 70
10924: OR
10925: PUSH
10926: LD_INT 7
10928: PPUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 70
10943: PUSH
10944: LD_INT 1
10946: GREATER
10947: OR
10948: PUSH
10949: LD_EXP 44
10953: PUSH
10954: LD_INT 4
10956: LESSEQUAL
10957: OR
10958: IFFALSE 11537
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
// begin wait ( 0 0$3 ) ;
10967: LD_INT 105
10969: PPUSH
10970: CALL_OW 67
// americanStartRun := true ;
10974: LD_ADDR_EXP 14
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// if IsOk ( usCommander ) then
10982: LD_EXP 45
10986: PPUSH
10987: CALL_OW 302
10991: IFFALSE 11021
// begin usForces := usForces union usCommander ;
10993: LD_ADDR_EXP 44
10997: PUSH
10998: LD_EXP 44
11002: PUSH
11003: LD_EXP 45
11007: UNION
11008: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11009: LD_EXP 45
11013: PPUSH
11014: LD_STRING DUsm-1-assault
11016: PPUSH
11017: CALL_OW 88
// end ; for i in usForces do
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_EXP 44
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11078
// begin if IsInUnit ( i ) then
11034: LD_VAR 0 1
11038: PPUSH
11039: CALL_OW 310
11043: IFFALSE 11054
// ComExitBuilding ( i ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 122
// wait ( 3 ) ;
11054: LD_INT 3
11056: PPUSH
11057: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11061: LD_VAR 0 1
11065: PPUSH
11066: LD_INT 34
11068: PPUSH
11069: LD_INT 67
11071: PPUSH
11072: CALL_OW 111
// end ;
11076: GO 11031
11078: POP
11079: POP
// Say ( Heike , DH-1-assault ) ;
11080: LD_EXP 28
11084: PPUSH
11085: LD_STRING DH-1-assault
11087: PPUSH
11088: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11092: LD_INT 35
11094: PPUSH
11095: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11099: LD_VAR 0 1
11103: PPUSH
11104: LD_INT 34
11106: PPUSH
11107: LD_INT 67
11109: PPUSH
11110: CALL_OW 111
// until not usForces ;
11114: LD_EXP 44
11118: NOT
11119: IFFALSE 11092
// music_nat := 2 ;
11121: LD_ADDR_OWVAR 71
11125: PUSH
11126: LD_INT 2
11128: ST_TO_ADDR
// music_class := music_victory ;
11129: LD_ADDR_OWVAR 72
11133: PUSH
11134: LD_INT 4
11136: ST_TO_ADDR
// if not americanHasEscaped then
11137: LD_EXP 8
11141: NOT
11142: IFFALSE 11163
// begin Say ( Heike , DH-2-assault ) ;
11144: LD_EXP 28
11148: PPUSH
11149: LD_STRING DH-2-assault
11151: PPUSH
11152: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11156: LD_STRING ACH_CLEAN
11158: PPUSH
11159: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11163: LD_INT 70
11165: PPUSH
11166: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11170: LD_INT 35
11172: PPUSH
11173: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11177: LD_INT 22
11179: PUSH
11180: LD_INT 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 21
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 3
11199: PUSH
11200: LD_INT 50
11202: PUSH
11203: EMPTY
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: PPUSH
11215: CALL_OW 69
11219: NOT
11220: IFFALSE 11170
// InGameOn ;
11222: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11226: LD_INT 11
11228: PPUSH
11229: CALL_OW 255
11233: PUSH
11234: LD_INT 2
11236: EQUAL
11237: NOT
11238: IFFALSE 11250
// SetSide ( usDepot , 2 ) ;
11240: LD_INT 11
11242: PPUSH
11243: LD_INT 2
11245: PPUSH
11246: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11250: LD_INT 35
11252: PPUSH
11253: LD_INT 22
11255: PPUSH
11256: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11260: LD_EXP 28
11264: PPUSH
11265: LD_INT 35
11267: PPUSH
11268: LD_INT 22
11270: PPUSH
11271: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11275: LD_EXP 28
11279: PPUSH
11280: LD_INT 38
11282: PPUSH
11283: LD_INT 25
11285: PPUSH
11286: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11290: LD_EXP 41
11294: PUSH
11295: LD_EXP 42
11299: UNION
11300: PPUSH
11301: LD_INT 39
11303: PPUSH
11304: LD_INT 26
11306: PPUSH
11307: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11311: LD_EXP 41
11315: PUSH
11316: LD_EXP 42
11320: UNION
11321: PPUSH
11322: LD_EXP 28
11326: PPUSH
11327: CALL_OW 179
// p := 0 ;
11331: LD_ADDR_VAR 0 2
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11339: LD_INT 35
11341: PPUSH
11342: CALL_OW 67
// p := p + 1 ;
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_VAR 0 2
11355: PUSH
11356: LD_INT 1
11358: PLUS
11359: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11360: LD_EXP 28
11364: PPUSH
11365: CALL_OW 314
11369: NOT
11370: PUSH
11371: LD_VAR 0 2
11375: PUSH
11376: LD_INT 10
11378: GREATER
11379: OR
11380: IFFALSE 11339
// Say ( Heike , DH-1-capture ) ;
11382: LD_EXP 28
11386: PPUSH
11387: LD_STRING DH-1-capture
11389: PPUSH
11390: CALL_OW 88
// if Markov then
11394: LD_EXP 35
11398: IFFALSE 11412
// Say ( Markov , DMar-1-capture ) ;
11400: LD_EXP 35
11404: PPUSH
11405: LD_STRING DMar-1-capture
11407: PPUSH
11408: CALL_OW 88
// if Sophia then
11412: LD_EXP 34
11416: IFFALSE 11442
// begin Say ( Heike , DH-2-capture ) ;
11418: LD_EXP 28
11422: PPUSH
11423: LD_STRING DH-2-capture
11425: PPUSH
11426: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11430: LD_EXP 34
11434: PPUSH
11435: LD_STRING DS-1-capture
11437: PPUSH
11438: CALL_OW 88
// end ; InGameOff ;
11442: CALL_OW 9
// music_nat := music_auto ;
11446: LD_ADDR_OWVAR 71
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// music_class := music_auto ;
11454: LD_ADDR_OWVAR 72
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11462: LD_STRING ConstructBase
11464: PPUSH
11465: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 21
11486: PUSH
11487: LD_INT 3
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 69
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11520
// SetSide ( i , 2 ) ;
11506: LD_VAR 0 1
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: CALL_OW 235
11518: GO 11503
11520: POP
11521: POP
// wait ( 0 0$3 ) ;
11522: LD_INT 105
11524: PPUSH
11525: CALL_OW 67
// americanBaseCaptured := true ;
11529: LD_ADDR_EXP 6
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// end ;
11537: PPOPN 2
11539: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11540: LD_EXP 13
11544: PUSH
11545: LD_INT 3
11547: GREATEREQUAL
11548: IFFALSE 11560
11550: GO 11552
11552: DISABLE
// SetAchievement ( ACH_ENG ) ;
11553: LD_STRING ACH_ENG
11555: PPUSH
11556: CALL_OW 543
11560: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11561: LD_INT 22
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 25
11573: PUSH
11574: LD_INT 15
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PPUSH
11585: CALL_OW 69
11589: PUSH
11590: LD_INT 4
11592: GREATEREQUAL
11593: IFFALSE 11605
11595: GO 11597
11597: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11598: LD_STRING ACH_APEGEN
11600: PPUSH
11601: CALL_OW 543
11605: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11606: LD_INT 22
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 30
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 3
11628: PUSH
11629: LD_INT 57
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 69
11648: IFFALSE 11913
11650: GO 11652
11652: DISABLE
// begin workshopBuilded := true ;
11653: LD_ADDR_EXP 10
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if IsOk ( Markov ) then
11661: LD_EXP 35
11665: PPUSH
11666: CALL_OW 302
11670: IFFALSE 11729
// begin Say ( Heike , DH-1-shop-a ) ;
11672: LD_EXP 28
11676: PPUSH
11677: LD_STRING DH-1-shop-a
11679: PPUSH
11680: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11684: LD_INT 47
11686: PPUSH
11687: LD_INT 2
11689: PPUSH
11690: CALL_OW 321
11694: PUSH
11695: LD_INT 2
11697: EQUAL
11698: PUSH
11699: LD_INT 45
11701: PPUSH
11702: LD_INT 2
11704: PPUSH
11705: CALL_OW 321
11709: PUSH
11710: LD_INT 2
11712: EQUAL
11713: AND
11714: NOT
11715: IFFALSE 11729
// Say ( Markov , DMar-1-shop-a ) ;
11717: LD_EXP 35
11721: PPUSH
11722: LD_STRING DMar-1-shop-a
11724: PPUSH
11725: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11729: LD_INT 35
11731: PPUSH
11732: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11736: LD_INT 47
11738: PPUSH
11739: LD_INT 2
11741: PPUSH
11742: CALL_OW 321
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: PUSH
11751: LD_INT 45
11753: PPUSH
11754: LD_INT 2
11756: PPUSH
11757: CALL_OW 321
11761: PUSH
11762: LD_INT 2
11764: EQUAL
11765: OR
11766: IFFALSE 11729
// if IsOk ( Markov ) and IsOk ( Heike ) then
11768: LD_EXP 35
11772: PPUSH
11773: CALL_OW 302
11777: PUSH
11778: LD_EXP 28
11782: PPUSH
11783: CALL_OW 302
11787: AND
11788: IFFALSE 11906
// begin DialogueOn ;
11790: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11794: LD_EXP 35
11798: PPUSH
11799: LD_STRING DMar-1-shop
11801: PPUSH
11802: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11806: LD_EXP 28
11810: PPUSH
11811: LD_STRING DH-1-shop
11813: PPUSH
11814: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11818: LD_EXP 35
11822: PPUSH
11823: LD_STRING DMar-2-shop
11825: PPUSH
11826: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11830: LD_EXP 35
11834: PPUSH
11835: LD_STRING DMar-3-shop
11837: PPUSH
11838: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11842: LD_EXP 28
11846: PPUSH
11847: LD_STRING DH-2-shop
11849: PPUSH
11850: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11854: LD_EXP 35
11858: PPUSH
11859: LD_STRING DMar-4-shop
11861: PPUSH
11862: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11866: LD_EXP 28
11870: PPUSH
11871: LD_STRING DH-3-shop
11873: PPUSH
11874: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11878: LD_EXP 35
11882: PPUSH
11883: LD_STRING DMar-5-shop
11885: PPUSH
11886: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11890: LD_EXP 28
11894: PPUSH
11895: LD_STRING DH-4-shop
11897: PPUSH
11898: CALL_OW 88
// DialogueOff ;
11902: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
11906: LD_STRING ConstructVeh
11908: PPUSH
11909: CALL_OW 337
// end ;
11913: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11914: LD_INT 2
11916: PPUSH
11917: LD_INT 2
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL 38622 0 3
11927: PUSH
11928: LD_INT 0
11930: EQUAL
11931: IFFALSE 11943
11933: GO 11935
11935: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11936: LD_STRING Techs
11938: PPUSH
11939: CALL_OW 337
11943: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11944: LD_EXP 35
11948: PPUSH
11949: CALL_OW 302
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: LD_INT 34
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 35
11979: PUSH
11980: LD_INT 22
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PPUSH
11996: CALL_OW 69
12000: AND
12001: IFFALSE 12108
12003: GO 12005
12005: DISABLE
// begin DialogueOn ;
12006: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12010: LD_INT 22
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 34
12025: PUSH
12026: LD_INT 22
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 35
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: PPUSH
12057: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12061: LD_INT 10
12063: PPUSH
12064: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12068: LD_EXP 28
12072: PPUSH
12073: LD_STRING DH-1-bal
12075: PPUSH
12076: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12080: LD_EXP 35
12084: PPUSH
12085: LD_STRING DMar-1-bal
12087: PPUSH
12088: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12092: LD_EXP 28
12096: PPUSH
12097: LD_STRING DH-2-bal
12099: PPUSH
12100: CALL_OW 88
// DialogueOff ;
12104: CALL_OW 7
// end ;
12108: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12109: LD_EXP 32
12113: PPUSH
12114: CALL_OW 302
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 30
12131: PUSH
12132: LD_INT 6
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: AND
12148: IFFALSE 12209
12150: GO 12152
12152: DISABLE
// begin DialogueOn ;
12153: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12157: LD_EXP 32
12161: PPUSH
12162: LD_STRING DA-1-lab
12164: PPUSH
12165: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12169: LD_EXP 28
12173: PPUSH
12174: LD_STRING DH-1-lab
12176: PPUSH
12177: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12181: LD_EXP 32
12185: PPUSH
12186: LD_STRING DA-2-lab
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12193: LD_EXP 28
12197: PPUSH
12198: LD_STRING DH-2-lab
12200: PPUSH
12201: CALL_OW 88
// DialogueOff ;
12205: CALL_OW 7
// end ;
12209: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12210: LD_EXP 33
12214: PPUSH
12215: CALL_OW 302
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 25
12232: PUSH
12233: LD_INT 15
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: AND
12249: PUSH
12250: LD_INT 81
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: NOT
12265: AND
12266: IFFALSE 12448
12268: GO 12270
12270: DISABLE
12271: LD_INT 0
12273: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 25
12291: PUSH
12292: LD_INT 15
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 69
12307: ST_TO_ADDR
// InGameOn ;
12308: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12312: LD_VAR 0 1
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: PPUSH
12321: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12325: LD_VAR 0 1
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: PPUSH
12334: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12338: LD_EXP 33
12342: PPUSH
12343: LD_STRING DK-1-apesol
12345: PPUSH
12346: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12350: LD_VAR 0 1
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: LD_INT 35
12361: PPUSH
12362: LD_INT 28
12364: PPUSH
12365: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12369: LD_VAR 0 1
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: LD_INT 36
12380: PPUSH
12381: LD_INT 17
12383: PPUSH
12384: CALL_OW 171
// DialogueOn ;
12388: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12392: LD_EXP 32
12396: PPUSH
12397: LD_STRING DA-1-apesol
12399: PPUSH
12400: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12404: LD_EXP 33
12408: PPUSH
12409: LD_STRING DK-2-apesol
12411: PPUSH
12412: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12416: LD_EXP 32
12420: PPUSH
12421: LD_STRING DA-2-apesol
12423: PPUSH
12424: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12428: LD_EXP 33
12432: PPUSH
12433: LD_STRING DK-3-apesol
12435: PPUSH
12436: CALL_OW 88
// DialogueOff ;
12440: CALL_OW 7
// InGameOff ;
12444: CALL_OW 9
// end ;
12448: PPOPN 1
12450: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12451: LD_EXP 34
12455: PPUSH
12456: CALL_OW 302
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 25
12473: PUSH
12474: LD_INT 16
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 69
12489: AND
12490: PUSH
12491: LD_INT 81
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: NOT
12506: AND
12507: IFFALSE 12792
12509: GO 12511
12511: DISABLE
12512: LD_INT 0
12514: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_INT 22
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 25
12532: PUSH
12533: LD_INT 16
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL_OW 69
12548: ST_TO_ADDR
// InGameOn ;
12549: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12553: LD_INT 35
12555: PPUSH
12556: LD_INT 22
12558: PPUSH
12559: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12563: LD_INT 5
12565: PPUSH
12566: LD_INT 35
12568: PPUSH
12569: LD_INT 22
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12579: LD_EXP 34
12583: PPUSH
12584: LD_VAR 0 1
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12597: LD_VAR 0 1
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12610: LD_VAR 0 1
12614: PUSH
12615: LD_INT 1
12617: ARRAY
12618: PPUSH
12619: CALL_OW 122
// wait ( 0 0$2 ) ;
12623: LD_INT 70
12625: PPUSH
12626: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12630: LD_EXP 34
12634: PPUSH
12635: LD_STRING DS-1-apeeng
12637: PPUSH
12638: CALL_OW 88
// if IsOk ( Kamil ) then
12642: LD_EXP 31
12646: PPUSH
12647: CALL_OW 302
12651: IFFALSE 12788
// begin Say ( Kamil , DKam-1-apeeng ) ;
12653: LD_EXP 31
12657: PPUSH
12658: LD_STRING DKam-1-apeeng
12660: PPUSH
12661: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12665: LD_EXP 34
12669: PPUSH
12670: LD_STRING DS-2-apeeng
12672: PPUSH
12673: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12677: LD_EXP 31
12681: PPUSH
12682: LD_STRING DKam-2-apeeng
12684: PPUSH
12685: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12689: LD_EXP 34
12693: PPUSH
12694: LD_STRING DS-3-apeeng
12696: PPUSH
12697: CALL_OW 88
// if not IsOK ( Kaia ) then
12701: LD_EXP 33
12705: PPUSH
12706: CALL_OW 302
12710: NOT
12711: IFFALSE 12719
// begin InGameOff ;
12713: CALL_OW 9
// exit ;
12717: GO 12792
// end ; Say ( Kaia , DK-1-apeeng ) ;
12719: LD_EXP 33
12723: PPUSH
12724: LD_STRING DK-1-apeeng
12726: PPUSH
12727: CALL_OW 88
// if not IsOk ( Givi ) then
12731: LD_EXP 29
12735: PPUSH
12736: CALL_OW 302
12740: NOT
12741: IFFALSE 12752
// begin Video ( false ) ;
12743: LD_INT 0
12745: PPUSH
12746: CALL 75268 0 1
// exit ;
12750: GO 12792
// end ; Say ( Givi , DG-1-apeeng ) ;
12752: LD_EXP 29
12756: PPUSH
12757: LD_STRING DG-1-apeeng
12759: PPUSH
12760: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12764: LD_EXP 33
12768: PPUSH
12769: LD_STRING DK-2-apeeng
12771: PPUSH
12772: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12776: LD_EXP 33
12780: PPUSH
12781: LD_STRING DK-3-apeeng
12783: PPUSH
12784: CALL_OW 88
// end ; InGameOff ;
12788: CALL_OW 9
// end ;
12792: PPOPN 1
12794: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12795: LD_EXP 4
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 30
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PPUSH
12824: CALL_OW 69
12828: AND
12829: IFFALSE 12994
12831: GO 12833
12833: DISABLE
// begin wait ( 0 0$10 ) ;
12834: LD_INT 350
12836: PPUSH
12837: CALL_OW 67
// DialogueOn ;
12841: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12845: LD_EXP 36
12849: PPUSH
12850: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12854: LD_EXP 36
12858: PPUSH
12859: LD_STRING DF-1-distribution
12861: PPUSH
12862: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12866: LD_EXP 28
12870: PPUSH
12871: LD_STRING DH-2-distribution
12873: PPUSH
12874: CALL_OW 88
// if IsOk ( Kaia ) then
12878: LD_EXP 33
12882: PPUSH
12883: CALL_OW 302
12887: IFFALSE 12948
// begin Say ( Kaia , DK-1-distribution ) ;
12889: LD_EXP 33
12893: PPUSH
12894: LD_STRING DK-1-distribution
12896: PPUSH
12897: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12901: LD_EXP 28
12905: PPUSH
12906: LD_STRING DH-1-distribution
12908: PPUSH
12909: CALL_OW 88
// if IsOk ( Givi ) then
12913: LD_EXP 29
12917: PPUSH
12918: CALL_OW 302
12922: IFFALSE 12948
// begin Say ( Givi , DG-1-distribution ) ;
12924: LD_EXP 29
12928: PPUSH
12929: LD_STRING DG-1-distribution
12931: PPUSH
12932: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12936: LD_EXP 28
12940: PPUSH
12941: LD_STRING DH-3-distribution
12943: PPUSH
12944: CALL_OW 88
// end ; end ; DialogueOff ;
12948: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12952: LD_STRING Crates1
12954: PPUSH
12955: CALL_OW 337
// farmerRequestedCrates := 300 ;
12959: LD_ADDR_EXP 16
12963: PUSH
12964: LD_INT 300
12966: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12967: LD_STRING FarmerCrates
12969: PPUSH
12970: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12974: LD_INT 10
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12984: LD_INT 108
12986: PPUSH
12987: LD_INT 61
12989: PPUSH
12990: CALL_OW 86
// end ;
12994: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12995: LD_EXP 6
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 3
13012: PUSH
13013: LD_INT 57
13015: PUSH
13016: EMPTY
13017: LIST
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 30
13028: PUSH
13029: LD_INT 6
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 30
13038: PUSH
13039: LD_INT 7
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: PPUSH
13056: CALL_OW 69
13060: AND
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: LD_INT 57
13077: PUSH
13078: EMPTY
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 30
13087: PUSH
13088: LD_INT 4
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: AND
13105: IFFALSE 13269
13107: GO 13109
13109: DISABLE
13110: LD_INT 0
13112: PPUSH
// begin wait ( 0 0$10 ) ;
13113: LD_INT 350
13115: PPUSH
13116: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13120: LD_ADDR_VAR 0 1
13124: PUSH
13125: LD_EXP 42
13129: PPUSH
13130: LD_INT 26
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 72
13158: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13159: LD_EXP 28
13163: PPUSH
13164: LD_STRING DH-1-task
13166: PPUSH
13167: CALL_OW 88
// if IsOk ( Sophia ) then
13171: LD_EXP 34
13175: PPUSH
13176: CALL_OW 302
13180: IFFALSE 13220
// begin Say ( Sophia , DS-1-task ) ;
13182: LD_EXP 34
13186: PPUSH
13187: LD_STRING DS-1-task
13189: PPUSH
13190: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13194: LD_EXP 34
13198: PPUSH
13199: LD_STRING DS-2-task
13201: PPUSH
13202: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13206: LD_EXP 28
13210: PPUSH
13211: LD_STRING DH-2-task
13213: PPUSH
13214: CALL_OW 88
// end else
13218: GO 13254
// if eng then
13220: LD_VAR 0 1
13224: IFFALSE 13254
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13226: LD_VAR 0 1
13230: PUSH
13231: LD_INT 1
13233: ARRAY
13234: PPUSH
13235: LD_STRING DArm-1-task
13237: PPUSH
13238: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13242: LD_EXP 28
13246: PPUSH
13247: LD_STRING DH-2-task
13249: PPUSH
13250: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13254: LD_STRING BaseConstructed
13256: PPUSH
13257: CALL_OW 337
// allowConvoys := true ;
13261: LD_ADDR_EXP 12
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// end ;
13269: PPOPN 1
13271: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 4
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 34
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 69
13300: IFFALSE 13468
13302: GO 13304
13304: DISABLE
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
13309: PPUSH
// begin wait ( 0 0$2 ) ;
13310: LD_INT 70
13312: PPUSH
13313: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13317: LD_ADDR_VAR 0 1
13321: PUSH
13322: LD_INT 22
13324: PUSH
13325: LD_INT 4
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 34
13334: PUSH
13335: LD_INT 12
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: LD_VAR 0 1
13360: PUSH
13361: LD_INT 1
13363: ARRAY
13364: PPUSH
13365: CALL_OW 250
13369: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13370: LD_ADDR_VAR 0 3
13374: PUSH
13375: LD_VAR 0 1
13379: PUSH
13380: LD_INT 1
13382: ARRAY
13383: PPUSH
13384: CALL_OW 251
13388: ST_TO_ADDR
// DialogueOn ;
13389: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13393: LD_VAR 0 2
13397: PPUSH
13398: LD_VAR 0 3
13402: PPUSH
13403: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13407: LD_VAR 0 2
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 2
13419: PPUSH
13420: LD_INT 6
13422: NEG
13423: PPUSH
13424: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13428: LD_INT 10
13430: PPUSH
13431: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13435: LD_EXP 28
13439: PPUSH
13440: LD_STRING DH-1-seecargo
13442: PPUSH
13443: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13447: LD_VAR 0 2
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 2
13459: PPUSH
13460: CALL_OW 331
// DialogueOff ;
13464: CALL_OW 7
// end ;
13468: PPOPN 3
13470: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13471: LD_EXP 4
13475: PUSH
13476: LD_EXP 15
13480: PUSH
13481: LD_INT 300
13483: GREATEREQUAL
13484: AND
13485: IFFALSE 13557
13487: GO 13489
13489: DISABLE
// begin DialogueOn ;
13490: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13494: LD_EXP 36
13498: PPUSH
13499: LD_STRING DF-1-delivery-2
13501: PPUSH
13502: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13506: LD_EXP 28
13510: PPUSH
13511: LD_STRING DH-1-delivery-2
13513: PPUSH
13514: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13518: LD_EXP 36
13522: PPUSH
13523: LD_STRING DF-2-delivery-2
13525: PPUSH
13526: CALL_OW 94
// DialogueOff ;
13530: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13534: LD_STRING Crates2
13536: PPUSH
13537: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13541: LD_ADDR_EXP 17
13545: PUSH
13546: LD_INT 63000
13548: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13549: LD_ADDR_EXP 16
13553: PUSH
13554: LD_INT 600
13556: ST_TO_ADDR
// end ;
13557: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13558: LD_EXP 4
13562: PUSH
13563: LD_EXP 15
13567: PUSH
13568: LD_INT 600
13570: GREATEREQUAL
13571: AND
13572: PUSH
13573: LD_OWVAR 67
13577: PUSH
13578: LD_INT 1
13580: GREATER
13581: AND
13582: IFFALSE 13748
13584: GO 13586
13586: DISABLE
// begin DialogueOn ;
13587: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13591: LD_EXP 36
13595: PPUSH
13596: LD_STRING DF-1-delivery-3
13598: PPUSH
13599: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13603: LD_EXP 28
13607: PPUSH
13608: LD_STRING DH-1-delivery-3
13610: PPUSH
13611: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13615: LD_EXP 36
13619: PPUSH
13620: LD_STRING DF-2-delivery-3
13622: PPUSH
13623: CALL_OW 94
// if IsOk ( Kaia ) then
13627: LD_EXP 33
13631: PPUSH
13632: CALL_OW 302
13636: IFFALSE 13686
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13638: LD_EXP 33
13642: PPUSH
13643: LD_STRING DK-1-delivery-3
13645: PPUSH
13646: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13650: LD_EXP 28
13654: PPUSH
13655: LD_STRING DH-2-delivery-3
13657: PPUSH
13658: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13662: LD_EXP 29
13666: PPUSH
13667: LD_STRING DG-1-delivery-3
13669: PPUSH
13670: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13674: LD_EXP 30
13678: PPUSH
13679: LD_STRING DM-1-delivery-3
13681: PPUSH
13682: CALL_OW 88
// end ; DialogueOff ;
13686: CALL_OW 7
// if Difficulty = 2 then
13690: LD_OWVAR 67
13694: PUSH
13695: LD_INT 2
13697: EQUAL
13698: IFFALSE 13725
// begin ChangeMissionObjectives ( Crates3 ) ;
13700: LD_STRING Crates3
13702: PPUSH
13703: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13707: LD_ADDR_EXP 17
13711: PUSH
13712: LD_INT 63000
13714: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13715: LD_ADDR_EXP 16
13719: PUSH
13720: LD_INT 900
13722: ST_TO_ADDR
// end else
13723: GO 13748
// begin ChangeMissionObjectives ( Crates4 ) ;
13725: LD_STRING Crates4
13727: PPUSH
13728: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13732: LD_ADDR_EXP 17
13736: PUSH
13737: LD_INT 63000
13739: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13740: LD_ADDR_EXP 16
13744: PUSH
13745: LD_INT 1200
13747: ST_TO_ADDR
// end ; end ;
13748: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13749: LD_EXP 4
13753: PUSH
13754: LD_EXP 15
13758: PUSH
13759: LD_INT 600
13761: PUSH
13762: LD_INT 900
13764: PUSH
13765: LD_INT 1200
13767: PUSH
13768: LD_INT 1400
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_OWVAR 67
13781: ARRAY
13782: GREATEREQUAL
13783: AND
13784: PUSH
13785: LD_EXP 16
13789: PUSH
13790: LD_EXP 17
13794: LESSEQUAL
13795: AND
13796: IFFALSE 13882
13798: GO 13800
13800: DISABLE
// begin retreatAllowed := true ;
13801: LD_ADDR_EXP 11
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// display_strings := [ ] ;
13809: LD_ADDR_OWVAR 47
13813: PUSH
13814: EMPTY
13815: ST_TO_ADDR
// DialogueOn ;
13816: CALL_OW 6
// InGameOn ;
13820: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13824: LD_EXP 37
13828: PPUSH
13829: LD_STRING DO-radio-end
13831: PPUSH
13832: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13836: LD_EXP 28
13840: PPUSH
13841: LD_STRING DH-1-radio-end
13843: PPUSH
13844: CALL_OW 88
// InGameOff ;
13848: CALL_OW 9
// DialogueOff ;
13852: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13856: LD_STRING Retreat
13858: PPUSH
13859: CALL_OW 337
// wait ( 0 0$2 ) ;
13863: LD_INT 70
13865: PPUSH
13866: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13870: LD_EXP 28
13874: PPUSH
13875: LD_STRING DH-2-radio-end
13877: PPUSH
13878: CALL_OW 88
// end ;
13882: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13883: LD_EXP 11
13887: IFFALSE 14018
13889: GO 13891
13891: DISABLE
13892: LD_INT 0
13894: PPUSH
13895: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13896: LD_INT 10
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_EXP 39
13915: PPUSH
13916: LD_INT 25
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PPUSH
13926: CALL_OW 72
13930: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13931: LD_VAR 0 1
13935: PUSH
13936: LD_INT 102
13938: PPUSH
13939: LD_INT 69
13941: PPUSH
13942: CALL_OW 428
13946: PUSH
13947: LD_INT 0
13949: EQUAL
13950: AND
13951: IFFALSE 14018
// begin for i in tmp do
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: LD_VAR 0 1
13962: PUSH
13963: FOR_IN
13964: IFFALSE 13988
// if IsInUnit ( i ) then
13966: LD_VAR 0 2
13970: PPUSH
13971: CALL_OW 310
13975: IFFALSE 13986
// ComExitBuilding ( i ) ;
13977: LD_VAR 0 2
13981: PPUSH
13982: CALL_OW 122
13986: GO 13963
13988: POP
13989: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 31
13997: PPUSH
13998: LD_INT 102
14000: PPUSH
14001: LD_INT 69
14003: PPUSH
14004: LD_INT 2
14006: PPUSH
14007: CALL_OW 205
// wait ( 0 0$3 ) ;
14011: LD_INT 105
14013: PPUSH
14014: CALL_OW 67
// end ; end ;
14018: PPOPN 2
14020: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14021: LD_EXP 11
14025: NOT
14026: PUSH
14027: LD_INT 5
14029: PPUSH
14030: CALL_OW 301
14034: AND
14035: IFFALSE 14067
14037: GO 14039
14039: DISABLE
// begin DialogueOn ;
14040: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14044: LD_EXP 36
14048: PPUSH
14049: LD_STRING DF-1-failure
14051: PPUSH
14052: CALL_OW 94
// DialogueOff ;
14056: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14060: LD_STRING FarmerDepot
14062: PPUSH
14063: CALL_OW 104
// end ;
14067: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14068: LD_EXP 11
14072: PUSH
14073: LD_EXP 28
14077: PPUSH
14078: LD_EXP 36
14082: PPUSH
14083: CALL_OW 296
14087: PUSH
14088: LD_INT 12
14090: LESS
14091: AND
14092: PUSH
14093: LD_INT 81
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: NOT
14122: AND
14123: IFFALSE 14787
14125: GO 14127
14127: DISABLE
14128: LD_INT 0
14130: PPUSH
14131: PPUSH
14132: PPUSH
// begin allowConvoys := false ;
14133: LD_ADDR_EXP 12
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// InGameOn ;
14141: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14145: LD_EXP 28
14149: PPUSH
14150: LD_EXP 36
14154: PPUSH
14155: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14159: LD_EXP 36
14163: PPUSH
14164: LD_EXP 28
14168: PPUSH
14169: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14173: LD_EXP 36
14177: PPUSH
14178: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14182: LD_EXP 28
14186: PPUSH
14187: LD_STRING DH-1-end
14189: PPUSH
14190: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14194: LD_EXP 36
14198: PPUSH
14199: LD_STRING DF-1-end
14201: PPUSH
14202: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14206: LD_EXP 36
14210: PPUSH
14211: LD_STRING DF-2-end
14213: PPUSH
14214: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14218: LD_EXP 28
14222: PPUSH
14223: LD_STRING DH-2-end
14225: PPUSH
14226: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14230: LD_EXP 36
14234: PPUSH
14235: LD_STRING DF-3-end
14237: PPUSH
14238: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14242: LD_EXP 28
14246: PPUSH
14247: LD_STRING DH-3-end
14249: PPUSH
14250: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14254: LD_EXP 29
14258: PPUSH
14259: LD_STRING DG-1-end
14261: PPUSH
14262: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14266: LD_EXP 28
14270: PPUSH
14271: LD_STRING DH-4-end
14273: PPUSH
14274: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14278: LD_EXP 36
14282: PPUSH
14283: LD_STRING DF-4-end
14285: PPUSH
14286: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14290: LD_EXP 28
14294: PPUSH
14295: LD_STRING DH-5-end
14297: PPUSH
14298: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14302: LD_EXP 36
14306: PPUSH
14307: LD_STRING DF-5-end
14309: PPUSH
14310: CALL_OW 88
// InGameOff ;
14314: CALL_OW 9
// allowCargoEvacuation := true ;
14318: LD_ADDR_EXP 7
14322: PUSH
14323: LD_INT 1
14325: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: LD_INT 3
14336: PUSH
14337: LD_INT 2
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: PUSH
14349: LD_OWVAR 67
14353: ARRAY
14354: ST_TO_ADDR
// if farmerSquad < max then
14355: LD_EXP 39
14359: PUSH
14360: LD_VAR 0 2
14364: LESS
14365: IFFALSE 14377
// max := farmerSquad ;
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: LD_EXP 39
14376: ST_TO_ADDR
// for i := 1 to max do
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: DOUBLE
14383: LD_INT 1
14385: DEC
14386: ST_TO_ADDR
14387: LD_VAR 0 2
14391: PUSH
14392: FOR_TO
14393: IFFALSE 14431
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14395: LD_EXP 39
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_INT 2
14406: PPUSH
14407: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14411: LD_ADDR_EXP 39
14415: PUSH
14416: LD_EXP 39
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 3
14428: ST_TO_ADDR
// end ;
14429: GO 14392
14431: POP
14432: POP
// for i in Farmer ^ farmerSquad do
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_EXP 36
14442: PUSH
14443: LD_EXP 39
14447: ADD
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14489
// begin if IsInUnit ( i ) then
14452: LD_VAR 0 1
14456: PPUSH
14457: CALL_OW 310
14461: IFFALSE 14472
// ComExitBuilding ( i ) ;
14463: LD_VAR 0 1
14467: PPUSH
14468: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 102
14479: PPUSH
14480: LD_INT 7
14482: PPUSH
14483: CALL_OW 171
// end ;
14487: GO 14449
14489: POP
14490: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_INT 5
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 21
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: PUSH
14525: LD_INT 5
14527: DIFF
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14546
// SetSide ( i , 2 ) ;
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 2
14539: PPUSH
14540: CALL_OW 235
14544: GO 14529
14546: POP
14547: POP
// wait ( 0 0$2 ) ;
14548: LD_INT 70
14550: PPUSH
14551: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14555: LD_EXP 28
14559: PPUSH
14560: LD_STRING DH-6-end
14562: PPUSH
14563: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14567: LD_INT 35
14569: PPUSH
14570: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_EXP 36
14583: PUSH
14584: LD_EXP 39
14588: ADD
14589: PPUSH
14590: LD_INT 95
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 72
14604: ST_TO_ADDR
// if tmp then
14605: LD_VAR 0 3
14609: IFFALSE 14653
// for i in tmp do
14611: LD_ADDR_VAR 0 1
14615: PUSH
14616: LD_VAR 0 3
14620: PUSH
14621: FOR_IN
14622: IFFALSE 14651
// begin farmerSquad := farmerSquad diff i ;
14624: LD_ADDR_EXP 39
14628: PUSH
14629: LD_EXP 39
14633: PUSH
14634: LD_VAR 0 1
14638: DIFF
14639: ST_TO_ADDR
// RemoveUnit ( i ) ;
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 64
// end ;
14649: GO 14621
14651: POP
14652: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14653: LD_EXP 39
14657: PUSH
14658: EMPTY
14659: EQUAL
14660: PUSH
14661: LD_EXP 36
14665: PPUSH
14666: CALL_OW 305
14670: NOT
14671: AND
14672: IFFALSE 14567
// if farmerHumanLoseCounter = 0 then
14674: LD_EXP 20
14678: PUSH
14679: LD_INT 0
14681: EQUAL
14682: IFFALSE 14691
// SetAchievement ( ACH_BABY ) ;
14684: LD_STRING ACH_BABY
14686: PPUSH
14687: CALL_OW 543
// wait ( 1 1$00 ) ;
14691: LD_INT 2100
14693: PPUSH
14694: CALL_OW 67
// SendAttack ;
14698: CALL 6163 0 0
// Say ( Heike , DH-7-end ) ;
14702: LD_EXP 28
14706: PPUSH
14707: LD_STRING DH-7-end
14709: PPUSH
14710: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_INT 2
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 4
14732: PUSH
14733: LD_INT 4
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: LD_OWVAR 67
14746: ARRAY
14747: PUSH
14748: FOR_TO
14749: IFFALSE 14785
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14751: LD_INT 4200
14753: PUSH
14754: LD_INT 3500
14756: PUSH
14757: LD_INT 3150
14759: PUSH
14760: LD_INT 2800
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: LD_OWVAR 67
14773: ARRAY
14774: PPUSH
14775: CALL_OW 67
// SendAttack ;
14779: CALL 6163 0 0
// end ;
14783: GO 14748
14785: POP
14786: POP
// end ;
14787: PPOPN 3
14789: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14790: LD_EXP 7
14794: PUSH
14795: LD_EXP 21
14799: PUSH
14800: LD_INT 0
14802: GREATER
14803: AND
14804: IFFALSE 14814
14806: GO 14808
14808: DISABLE
// begin enable ;
14809: ENABLE
// CargoEvacuation ;
14810: CALL 3660 0 0
// end ;
14814: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14815: LD_EXP 17
14819: PUSH
14820: LD_INT 18900
14822: LESSEQUAL
14823: IFFALSE 14872
14825: GO 14827
14827: DISABLE
// begin DialogueOn ;
14828: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14832: LD_EXP 36
14836: PPUSH
14837: LD_STRING DF-1-distribution-a
14839: PPUSH
14840: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14844: LD_EXP 28
14848: PPUSH
14849: LD_STRING DH-1-distribution-a
14851: PPUSH
14852: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14856: LD_EXP 36
14860: PPUSH
14861: LD_STRING DF-2-distribution-a
14863: PPUSH
14864: CALL_OW 94
// DialogueOff ;
14868: CALL_OW 7
// end ;
14872: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14873: LD_EXP 17
14877: PUSH
14878: LD_INT 0
14880: LESSEQUAL
14881: IFFALSE 14913
14883: GO 14885
14885: DISABLE
// begin DialogueOn ;
14886: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14890: LD_EXP 36
14894: PPUSH
14895: LD_STRING DF-3-distribution-a
14897: PPUSH
14898: CALL_OW 94
// YouLost ( Distribution ) ;
14902: LD_STRING Distribution
14904: PPUSH
14905: CALL_OW 104
// DialogueOff ;
14909: CALL_OW 7
// end ;
14913: END
// every 0 0$1 trigger vehCounter >= 2 do
14914: LD_EXP 22
14918: PUSH
14919: LD_INT 2
14921: GREATEREQUAL
14922: IFFALSE 14934
14924: GO 14926
14926: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14927: LD_STRING VehConstructed
14929: PPUSH
14930: CALL_OW 337
14934: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14935: LD_INT 22
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 34
14947: PUSH
14948: LD_INT 12
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: IFFALSE 15023
14965: GO 14967
14967: DISABLE
// begin DialogueOn ;
14968: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14972: LD_EXP 28
14976: PPUSH
14977: LD_STRING DH-1-truck
14979: PPUSH
14980: CALL_OW 88
// if IsOk ( Markov ) then
14984: LD_EXP 35
14988: PPUSH
14989: CALL_OW 302
14993: IFFALSE 15019
// begin Say ( Markov , DMar-1-truck ) ;
14995: LD_EXP 35
14999: PPUSH
15000: LD_STRING DMar-1-truck
15002: PPUSH
15003: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15007: LD_EXP 28
15011: PPUSH
15012: LD_STRING DH-2-truck
15014: PPUSH
15015: CALL_OW 88
// end ; DialogueOff ;
15019: CALL_OW 7
// end ;
15023: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
15028: PPUSH
// if IsOk ( Givi ) then
15029: LD_EXP 29
15033: PPUSH
15034: CALL_OW 302
15038: IFFALSE 15054
// begin Say ( Givi , DG-1-nocargo ) ;
15040: LD_EXP 29
15044: PPUSH
15045: LD_STRING DG-1-nocargo
15047: PPUSH
15048: CALL_OW 88
// exit ;
15052: GO 15150
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15054: LD_ADDR_VAR 0 2
15058: PUSH
15059: LD_EXP 42
15063: PPUSH
15064: LD_INT 26
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 72
15078: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_EXP 42
15088: PPUSH
15089: LD_INT 26
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 72
15103: ST_TO_ADDR
// if randomMen then
15104: LD_VAR 0 2
15108: IFFALSE 15128
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15110: LD_VAR 0 2
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: LD_STRING DArm-1-nocargo
15121: PPUSH
15122: CALL_OW 88
15126: GO 15150
// if randomWomen then
15128: LD_VAR 0 3
15132: IFFALSE 15150
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 1
15141: ARRAY
15142: PPUSH
15143: LD_STRING DArf-1-nocargo
15145: PPUSH
15146: CALL_OW 88
// end ;
15150: LD_VAR 0 1
15154: RET
// export function IncomingAttack ; begin
15155: LD_INT 0
15157: PPUSH
// if attackWave = 1 then
15158: LD_EXP 19
15162: PUSH
15163: LD_INT 1
15165: EQUAL
15166: IFFALSE 15237
// begin DialogueOn ;
15168: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15172: LD_EXP 37
15176: PPUSH
15177: LD_STRING DO-1-radio-1
15179: PPUSH
15180: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15184: LD_EXP 28
15188: PPUSH
15189: LD_STRING DH-1-radio-1-
15191: PPUSH
15192: CALL_OW 88
// if IsOk ( Markov ) then
15196: LD_EXP 35
15200: PPUSH
15201: CALL_OW 302
15205: IFFALSE 15231
// begin Say ( Markov , DMar-1-radio-1 ) ;
15207: LD_EXP 35
15211: PPUSH
15212: LD_STRING DMar-1-radio-1
15214: PPUSH
15215: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15219: LD_EXP 28
15223: PPUSH
15224: LD_STRING DH-2-radio-1
15226: PPUSH
15227: CALL_OW 88
// end ; DialogueOff ;
15231: CALL_OW 7
// end else
15235: GO 15261
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15237: LD_EXP 37
15241: PPUSH
15242: LD_STRING DO-1-radio-u
15244: PPUSH
15245: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15249: LD_EXP 28
15253: PPUSH
15254: LD_STRING DH-1-radio-u
15256: PPUSH
15257: CALL_OW 88
// end ; end ;
15261: LD_VAR 0 1
15265: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15266: LD_EXP 44
15270: PPUSH
15271: LD_INT 95
15273: PUSH
15274: LD_INT 8
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 72
15285: IFFALSE 15388
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
// begin enable ;
15293: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_EXP 44
15303: PPUSH
15304: LD_INT 95
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 72
15318: PUSH
15319: FOR_IN
15320: IFFALSE 15349
// begin usForces := usForces diff i ;
15322: LD_ADDR_EXP 44
15326: PUSH
15327: LD_EXP 44
15331: PUSH
15332: LD_VAR 0 1
15336: DIFF
15337: ST_TO_ADDR
// RemoveUnit ( i ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 64
// end ;
15347: GO 15319
15349: POP
15350: POP
// if not americanHasEscaped and attackWave = 1 then
15351: LD_EXP 8
15355: NOT
15356: PUSH
15357: LD_EXP 19
15361: PUSH
15362: LD_INT 1
15364: EQUAL
15365: AND
15366: IFFALSE 15388
// begin americanHasEscaped := true ;
15368: LD_ADDR_EXP 8
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15376: LD_EXP 28
15380: PPUSH
15381: LD_STRING DH-2-assault-a
15383: PPUSH
15384: CALL_OW 88
// end ; end ;
15388: PPOPN 1
15390: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15391: LD_INT 4
15393: PPUSH
15394: LD_INT 22
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 70
15408: PUSH
15409: LD_EXP 11
15413: NOT
15414: AND
15415: IFFALSE 15432
15417: GO 15419
15419: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15420: LD_EXP 36
15424: PPUSH
15425: LD_STRING DF-1-attack
15427: PPUSH
15428: CALL_OW 94
15432: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15433: LD_INT 5
15435: PPUSH
15436: CALL_OW 255
15440: PUSH
15441: LD_INT 2
15443: EQUAL
15444: IFFALSE 15460
15446: GO 15448
15448: DISABLE
// begin enable ;
15449: ENABLE
// SetSide ( arDepot , 5 ) ;
15450: LD_INT 5
15452: PPUSH
15453: LD_INT 5
15455: PPUSH
15456: CALL_OW 235
// end ;
15460: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15461: LD_INT 22
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: NOT
15490: PUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: NOT
15506: AND
15507: PUSH
15508: LD_EXP 11
15512: NOT
15513: AND
15514: PUSH
15515: LD_EXP 15
15519: PUSH
15520: LD_INT 90
15522: GREATER
15523: AND
15524: PUSH
15525: LD_INT 7
15527: PPUSH
15528: LD_INT 22
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 21
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 70
15556: AND
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 50
15570: PUSH
15571: EMPTY
15572: LIST
15573: PUSH
15574: LD_INT 30
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: AND
15594: IFFALSE 16387
15596: GO 15598
15598: DISABLE
15599: LD_INT 0
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
// begin depot := usDepot ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 11
15613: ST_TO_ADDR
// if not depot then
15614: LD_VAR 0 5
15618: NOT
15619: IFFALSE 15659
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15621: LD_ADDR_VAR 0 5
15625: PUSH
15626: LD_INT 22
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 30
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PPUSH
15650: CALL_OW 69
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15659: LD_ADDR_VAR 0 1
15663: PUSH
15664: LD_EXP 42
15668: PPUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_EXP 42
15693: PPUSH
15694: LD_INT 26
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 72
15708: ST_TO_ADDR
// if IsOk ( Kaia ) then
15709: LD_EXP 33
15713: PPUSH
15714: CALL_OW 302
15718: IFFALSE 15739
// speaker := [ Kaia , DK ] else
15720: LD_ADDR_VAR 0 3
15724: PUSH
15725: LD_EXP 33
15729: PUSH
15730: LD_STRING DK
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: ST_TO_ADDR
15737: GO 15819
// if randomMen then
15739: LD_VAR 0 1
15743: IFFALSE 15778
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15745: LD_ADDR_VAR 0 3
15749: PUSH
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 1
15757: PPUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 12
15767: ARRAY
15768: PUSH
15769: LD_STRING DArm
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
15776: GO 15819
// if randomWomen then
15778: LD_VAR 0 2
15782: IFFALSE 15817
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_VAR 0 2
15793: PUSH
15794: LD_INT 1
15796: PPUSH
15797: LD_VAR 0 2
15801: PPUSH
15802: CALL_OW 12
15806: ARRAY
15807: PUSH
15808: LD_STRING DArf
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: ST_TO_ADDR
15815: GO 15819
// exit ;
15817: GO 16387
// if IsInUnit ( speaker [ 1 ] ) then
15819: LD_VAR 0 3
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 310
15832: IFFALSE 15855
// place := IsInUnit ( speaker [ 1 ] ) else
15834: LD_ADDR_VAR 0 4
15838: PUSH
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 1
15846: ARRAY
15847: PPUSH
15848: CALL_OW 310
15852: ST_TO_ADDR
15853: GO 15869
// place := speaker [ 1 ] ;
15855: LD_ADDR_VAR 0 4
15859: PUSH
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15869: LD_VAR 0 4
15873: PPUSH
15874: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15878: LD_VAR 0 4
15882: PPUSH
15883: CALL_OW 250
15887: PPUSH
15888: LD_VAR 0 4
15892: PPUSH
15893: CALL_OW 251
15897: PPUSH
15898: CALL 2147 0 2
// wait ( 0 0$2 ) ;
15902: LD_INT 70
15904: PPUSH
15905: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15909: LD_EXP 38
15913: PPUSH
15914: CALL_OW 305
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 16387
// allowConvoys := false ;
15923: LD_ADDR_EXP 12
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// InGameOn ;
15931: CALL_OW 8
// wait ( 0 0$1 ) ;
15935: LD_INT 35
15937: PPUSH
15938: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15942: LD_EXP 38
15946: PPUSH
15947: LD_STRING DI-1-land
15949: PPUSH
15950: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15954: LD_VAR 0 3
15958: PUSH
15959: LD_INT 1
15961: ARRAY
15962: PPUSH
15963: CALL_OW 310
15967: IFFALSE 15982
// ComExit ( speaker [ 1 ] ) ;
15969: LD_VAR 0 3
15973: PUSH
15974: LD_INT 1
15976: ARRAY
15977: PPUSH
15978: CALL 75684 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 1
15989: ARRAY
15990: PPUSH
15991: LD_EXP 38
15995: PPUSH
15996: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16000: LD_VAR 0 3
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PPUSH
16009: LD_EXP 38
16013: PPUSH
16014: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16018: LD_EXP 38
16022: PPUSH
16023: LD_VAR 0 3
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: PPUSH
16032: CALL_OW 119
// wait ( 0 0$1 ) ;
16036: LD_INT 35
16038: PPUSH
16039: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16043: LD_VAR 0 3
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: PPUSH
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 2
16059: ARRAY
16060: PUSH
16061: LD_STRING -1-land
16063: STR
16064: PPUSH
16065: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16069: LD_EXP 38
16073: PPUSH
16074: LD_STRING DI-2-land
16076: PPUSH
16077: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16081: LD_VAR 0 3
16085: PUSH
16086: LD_INT 1
16088: ARRAY
16089: PPUSH
16090: LD_VAR 0 3
16094: PUSH
16095: LD_INT 2
16097: ARRAY
16098: PUSH
16099: LD_STRING -2-land
16101: STR
16102: PPUSH
16103: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16107: LD_VAR 0 3
16111: PUSH
16112: LD_INT 1
16114: ARRAY
16115: PPUSH
16116: LD_VAR 0 3
16120: PUSH
16121: LD_INT 2
16123: ARRAY
16124: PUSH
16125: LD_STRING -3-land
16127: STR
16128: PPUSH
16129: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16133: LD_EXP 28
16137: PPUSH
16138: LD_STRING DH-1-land
16140: PPUSH
16141: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16145: LD_VAR 0 5
16149: PPUSH
16150: CALL_OW 313
16154: PUSH
16155: LD_INT 6
16157: EQUAL
16158: IFFALSE 16178
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16160: LD_VAR 0 5
16164: PPUSH
16165: CALL_OW 313
16169: PUSH
16170: LD_INT 1
16172: ARRAY
16173: PPUSH
16174: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16178: LD_EXP 38
16182: PPUSH
16183: LD_INT 2
16185: PPUSH
16186: CALL_OW 235
// CenterOnUnits ( depot ) ;
16190: LD_VAR 0 5
16194: PPUSH
16195: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16199: LD_EXP 38
16203: PPUSH
16204: LD_VAR 0 5
16208: PPUSH
16209: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16213: LD_VAR 0 3
16217: PUSH
16218: LD_INT 1
16220: ARRAY
16221: PPUSH
16222: LD_VAR 0 5
16226: PPUSH
16227: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16231: LD_INT 35
16233: PPUSH
16234: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16238: LD_EXP 38
16242: PPUSH
16243: CALL_OW 310
16247: PUSH
16248: LD_EXP 38
16252: PPUSH
16253: CALL_OW 302
16257: NOT
16258: OR
16259: PUSH
16260: LD_VAR 0 5
16264: PPUSH
16265: CALL_OW 302
16269: NOT
16270: OR
16271: IFFALSE 16231
// InGameOff ;
16273: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16277: LD_EXP 38
16281: PPUSH
16282: CALL_OW 302
16286: NOT
16287: IFFALSE 16291
// exit ;
16289: GO 16387
// if not IsOk ( depot ) then
16291: LD_VAR 0 5
16295: PPUSH
16296: CALL_OW 302
16300: NOT
16301: IFFALSE 16364
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16303: LD_EXP 38
16307: PPUSH
16308: LD_INT 30
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16318: LD_INT 35
16320: PPUSH
16321: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16325: LD_EXP 38
16329: PPUSH
16330: LD_INT 30
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 307
16340: PUSH
16341: LD_EXP 38
16345: PPUSH
16346: CALL_OW 301
16350: OR
16351: IFFALSE 16318
// RemoveUnit ( Ibrahim ) ;
16353: LD_EXP 38
16357: PPUSH
16358: CALL_OW 64
// exit ;
16362: GO 16387
// end ; ibrahimInDepot := true ;
16364: LD_ADDR_EXP 25
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// allowConvoys := true ;
16372: LD_ADDR_EXP 12
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16380: LD_STRING IbrahimInDepot
16382: PPUSH
16383: CALL_OW 97
// end ;
16387: PPOPN 5
16389: END
// export function IbrahimQuery ; begin
16390: LD_INT 0
16392: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16393: LD_STRING IbrahimQuery
16395: PPUSH
16396: CALL_OW 97
16400: PUSH
16401: LD_INT 1
16403: DOUBLE
16404: EQUAL
16405: IFTRUE 16409
16407: GO 16685
16409: POP
// begin allowConvoys := false ;
16410: LD_ADDR_EXP 12
16414: PUSH
16415: LD_INT 0
16417: ST_TO_ADDR
// ibrahimInDepot := false ;
16418: LD_ADDR_EXP 25
16422: PUSH
16423: LD_INT 0
16425: ST_TO_ADDR
// InGameOn ;
16426: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16430: LD_EXP 28
16434: PPUSH
16435: CALL_OW 87
// wait ( 0 0$1 ) ;
16439: LD_INT 35
16441: PPUSH
16442: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16446: LD_EXP 28
16450: PPUSH
16451: LD_STRING DH-1-interrogation
16453: PPUSH
16454: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16458: LD_EXP 38
16462: PPUSH
16463: LD_STRING DI-1-interrogation
16465: PPUSH
16466: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16470: LD_EXP 28
16474: PPUSH
16475: LD_STRING DH-2-interrogation
16477: PPUSH
16478: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16482: LD_EXP 38
16486: PPUSH
16487: LD_STRING DI-2-interrogation
16489: PPUSH
16490: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16494: LD_EXP 28
16498: PPUSH
16499: LD_STRING DH-3-interrogation
16501: PPUSH
16502: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16506: LD_EXP 38
16510: PPUSH
16511: LD_STRING DI-3-interrogation
16513: PPUSH
16514: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16518: LD_EXP 28
16522: PPUSH
16523: LD_STRING DH-4-interrogation
16525: PPUSH
16526: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16530: LD_EXP 38
16534: PPUSH
16535: LD_STRING DI-4-interrogation
16537: PPUSH
16538: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16542: LD_EXP 28
16546: PPUSH
16547: LD_STRING DH-5-interrogation
16549: PPUSH
16550: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16554: LD_EXP 38
16558: PPUSH
16559: LD_STRING DI-5-interrogation
16561: PPUSH
16562: CALL_OW 88
// wait ( 0 0$1 ) ;
16566: LD_INT 35
16568: PPUSH
16569: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16573: LD_STRING IbrahimDecisionQuery
16575: PPUSH
16576: CALL_OW 97
16580: PUSH
16581: LD_INT 1
16583: DOUBLE
16584: EQUAL
16585: IFTRUE 16589
16587: GO 16613
16589: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16590: LD_EXP 38
16594: PPUSH
16595: LD_STRING DI-1-kill
16597: PPUSH
16598: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16602: LD_EXP 38
16606: PPUSH
16607: CALL_OW 66
// end ; 2 :
16611: GO 16679
16613: LD_INT 2
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16678
16621: POP
// begin SetSide ( Ibrahim , 6 ) ;
16622: LD_EXP 38
16626: PPUSH
16627: LD_INT 6
16629: PPUSH
16630: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16634: LD_EXP 38
16638: PPUSH
16639: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16643: LD_EXP 38
16647: PPUSH
16648: LD_INT 66
16650: PPUSH
16651: LD_INT 2
16653: PPUSH
16654: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16658: LD_EXP 38
16662: PPUSH
16663: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16667: LD_EXP 28
16671: PPUSH
16672: CALL_OW 122
// end ; end ;
16676: GO 16679
16678: POP
// InGameOff ;
16679: CALL_OW 9
// end ; 2 :
16683: GO 16699
16685: LD_INT 2
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16698
16693: POP
// exit ; end ;
16694: GO 16775
16696: GO 16699
16698: POP
// allowConvoys := true ;
16699: LD_ADDR_EXP 12
16703: PUSH
16704: LD_INT 1
16706: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16707: LD_INT 5250
16709: PPUSH
16710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16714: LD_INT 35
16716: PPUSH
16717: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16721: LD_INT 81
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: NOT
16750: IFFALSE 16714
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16752: LD_EXP 38
16756: PPUSH
16757: LD_INT 34
16759: PPUSH
16760: LD_INT 21
16762: PPUSH
16763: CALL_OW 111
// ibrahimIsFree := true ;
16767: LD_ADDR_EXP 26
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// end ;
16775: LD_VAR 0 1
16779: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16780: LD_EXP 26
16784: PUSH
16785: LD_EXP 38
16789: PPUSH
16790: CALL_OW 302
16794: AND
16795: PUSH
16796: LD_INT 2
16798: PPUSH
16799: LD_EXP 38
16803: PPUSH
16804: CALL_OW 292
16808: AND
16809: IFFALSE 17576
16811: GO 16813
16813: DISABLE
16814: LD_INT 0
16816: PPUSH
16817: PPUSH
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
// begin wait ( 0 0$10 ) ;
16822: LD_INT 350
16824: PPUSH
16825: CALL_OW 67
// allowConvoys := false ;
16829: LD_ADDR_EXP 12
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// depot := usDepot ;
16837: LD_ADDR_VAR 0 4
16841: PUSH
16842: LD_INT 11
16844: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16845: LD_INT 11
16847: NOT
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_INT 2
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 50
16861: PUSH
16862: EMPTY
16863: LIST
16864: PUSH
16865: LD_INT 30
16867: PUSH
16868: LD_INT 0
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: PPUSH
16880: CALL_OW 69
16884: AND
16885: IFFALSE 16932
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16887: LD_ADDR_VAR 0 4
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 50
16904: PUSH
16905: EMPTY
16906: LIST
16907: PUSH
16908: LD_INT 30
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL_OW 69
16927: PUSH
16928: LD_INT 1
16930: ARRAY
16931: ST_TO_ADDR
// InGameOn ;
16932: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16936: LD_EXP 38
16940: PPUSH
16941: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
16945: LD_EXP 38
16949: PPUSH
16950: LD_STRING DI-1-free
16952: PPUSH
16953: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
16957: LD_EXP 28
16961: PPUSH
16962: LD_EXP 38
16966: PPUSH
16967: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
16971: LD_EXP 28
16975: PPUSH
16976: LD_STRING DH-1-free
16978: PPUSH
16979: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
16983: LD_EXP 38
16987: PPUSH
16988: LD_EXP 28
16992: PPUSH
16993: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
16997: LD_EXP 38
17001: PPUSH
17002: LD_STRING DI-2-free
17004: PPUSH
17005: CALL_OW 88
// changeClass := 0 ;
17009: LD_ADDR_VAR 0 1
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17017: LD_STRING IbrahimJoinQuery
17019: PPUSH
17020: CALL_OW 97
17024: PUSH
17025: LD_INT 1
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17044
17033: POP
// begin changeClass := 1 ;
17034: LD_ADDR_VAR 0 1
17038: PUSH
17039: LD_INT 1
17041: ST_TO_ADDR
// end ; 2 :
17042: GO 17284
17044: LD_INT 2
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17204
17052: POP
// begin Say ( Heike , DH-1-decline ) ;
17053: LD_EXP 28
17057: PPUSH
17058: LD_STRING DH-1-decline
17060: PPUSH
17061: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17065: LD_EXP 38
17069: PPUSH
17070: LD_STRING DI-1-decline
17072: PPUSH
17073: CALL_OW 88
// InGameOff ;
17077: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17081: LD_EXP 38
17085: PPUSH
17086: LD_INT 30
17088: PPUSH
17089: LD_INT 1
17091: PPUSH
17092: CALL_OW 111
// p := 0 ;
17096: LD_ADDR_VAR 0 3
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// repeat p := p + 1 ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_VAR 0 3
17113: PUSH
17114: LD_INT 1
17116: PLUS
17117: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17118: LD_INT 35
17120: PPUSH
17121: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17125: LD_EXP 38
17129: PPUSH
17130: LD_INT 30
17132: PPUSH
17133: LD_INT 1
17135: PPUSH
17136: CALL_OW 307
17140: PUSH
17141: LD_INT 22
17143: PUSH
17144: LD_INT 2
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 101
17153: PUSH
17154: LD_INT 6
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: NOT
17170: OR
17171: PUSH
17172: LD_VAR 0 3
17176: PUSH
17177: LD_INT 10
17179: GREATER
17180: OR
17181: IFFALSE 17104
// RemoveUnit ( Ibrahim ) ;
17183: LD_EXP 38
17187: PPUSH
17188: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17192: LD_INT 1
17194: PPUSH
17195: LD_STRING 03_IbrahimHasEscaped
17197: PPUSH
17198: CALL_OW 39
// end ; 3 :
17202: GO 17284
17204: LD_INT 3
17206: DOUBLE
17207: EQUAL
17208: IFTRUE 17212
17210: GO 17283
17212: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17213: LD_EXP 28
17217: PPUSH
17218: LD_STRING DH-1-radio-hq
17220: PPUSH
17221: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17225: LD_EXP 37
17229: PPUSH
17230: LD_STRING DO-1-radio-hq
17232: PPUSH
17233: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17237: LD_EXP 28
17241: PPUSH
17242: LD_STRING DH-2-radio-hq
17244: PPUSH
17245: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17249: LD_EXP 37
17253: PPUSH
17254: LD_STRING DO-2-radio-hq
17256: PPUSH
17257: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17261: LD_EXP 28
17265: PPUSH
17266: LD_STRING DH-3-radio-hq
17268: PPUSH
17269: CALL_OW 88
// changeClass := 1 ;
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// end ; end ;
17281: GO 17284
17283: POP
// if changeClass then
17284: LD_VAR 0 1
17288: IFFALSE 17576
// begin Say ( Heike , DH-1-agree ) ;
17290: LD_EXP 28
17294: PPUSH
17295: LD_STRING DH-1-agree
17297: PPUSH
17298: CALL_OW 88
// if IsOk ( Givi ) then
17302: LD_EXP 29
17306: PPUSH
17307: CALL_OW 302
17311: IFFALSE 17349
// begin Say ( Givi , DG-1-agree ) ;
17313: LD_EXP 29
17317: PPUSH
17318: LD_STRING DG-1-agree
17320: PPUSH
17321: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17325: LD_EXP 28
17329: PPUSH
17330: LD_STRING DH-2-agree
17332: PPUSH
17333: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17337: LD_EXP 29
17341: PPUSH
17342: LD_STRING DG-2-agree
17344: PPUSH
17345: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17349: LD_VAR 0 4
17353: PPUSH
17354: CALL_OW 313
17358: PUSH
17359: LD_INT 6
17361: EQUAL
17362: IFFALSE 17382
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17364: LD_VAR 0 4
17368: PPUSH
17369: CALL_OW 313
17373: PUSH
17374: LD_INT 1
17376: ARRAY
17377: PPUSH
17378: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17382: LD_EXP 38
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17394: LD_ADDR_VAR 0 5
17398: PUSH
17399: LD_EXP 38
17403: PPUSH
17404: CALL_OW 250
17408: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17409: LD_ADDR_VAR 0 6
17413: PUSH
17414: LD_EXP 38
17418: PPUSH
17419: CALL_OW 251
17423: ST_TO_ADDR
// if depot then
17424: LD_VAR 0 4
17428: IFFALSE 17477
// begin ComEnterUnit ( Ibrahim , depot ) ;
17430: LD_EXP 38
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17444: LD_INT 35
17446: PPUSH
17447: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17451: LD_EXP 38
17455: PPUSH
17456: CALL_OW 310
17460: IFFALSE 17444
// b := IsInUnit ( Ibrahim ) ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_EXP 38
17471: PPUSH
17472: CALL_OW 310
17476: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17477: LD_EXP 38
17481: PPUSH
17482: CALL_OW 64
// uc_side := 2 ;
17486: LD_ADDR_OWVAR 20
17490: PUSH
17491: LD_INT 2
17493: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17494: LD_ADDR_EXP 38
17498: PUSH
17499: LD_STRING Ibrahim
17501: PPUSH
17502: LD_INT 0
17504: PPUSH
17505: LD_STRING 
17507: PPUSH
17508: CALL 38559 0 3
17512: ST_TO_ADDR
// if depot then
17513: LD_VAR 0 4
17517: IFFALSE 17535
// PlaceHumanInUnit ( Ibrahim , b ) else
17519: LD_EXP 38
17523: PPUSH
17524: LD_VAR 0 2
17528: PPUSH
17529: CALL_OW 52
17533: GO 17557
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17535: LD_EXP 38
17539: PPUSH
17540: LD_VAR 0 5
17544: PPUSH
17545: LD_VAR 0 6
17549: PPUSH
17550: LD_INT 0
17552: PPUSH
17553: CALL_OW 48
// InGameOff ;
17557: CALL_OW 9
// allowConvoys := true ;
17561: LD_ADDR_EXP 12
17565: PUSH
17566: LD_INT 1
17568: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17569: LD_STRING ACH_IBRAHIM
17571: PPUSH
17572: CALL_OW 543
// end ; end ;
17576: PPOPN 6
17578: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17579: LD_EXP 33
17583: PPUSH
17584: CALL_OW 256
17588: PUSH
17589: LD_INT 3
17591: LESS
17592: IFFALSE 17659
17594: GO 17596
17596: DISABLE
// begin DialogueOn ;
17597: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17601: LD_EXP 33
17605: PPUSH
17606: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17610: LD_EXP 33
17614: PPUSH
17615: LD_STRING DK-keydeath-1
17617: PPUSH
17618: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17622: LD_EXP 28
17626: PPUSH
17627: LD_STRING DH-keydeath-2
17629: PPUSH
17630: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17634: LD_EXP 28
17638: PPUSH
17639: LD_STRING DH-keydeath-3
17641: PPUSH
17642: CALL_OW 88
// DialogueOff ;
17646: CALL_OW 7
// KillUnit ( Kaia ) ;
17650: LD_EXP 33
17654: PPUSH
17655: CALL_OW 66
// end ;
17659: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17660: LD_EXP 11
17664: PUSH
17665: LD_EXP 21
17669: PUSH
17670: LD_INT 1
17672: LESS
17673: AND
17674: IFFALSE 18214
17676: GO 17678
17678: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17679: LD_INT 22
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 25
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 25
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: IFFALSE 17803
// begin ChangeSideFog ( 1 , 2 ) ;
17727: LD_INT 1
17729: PPUSH
17730: LD_INT 2
17732: PPUSH
17733: CALL_OW 343
// Query ( DestroyEnemy ) ;
17737: LD_STRING DestroyEnemy
17739: PPUSH
17740: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17744: LD_INT 35
17746: PPUSH
17747: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17751: LD_INT 22
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: LD_INT 25
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 25
17776: PUSH
17777: LD_INT 3
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: PUSH
17798: LD_INT 0
17800: EQUAL
17801: IFFALSE 17744
// end ; DialogueOn ;
17803: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17807: LD_EXP 28
17811: PPUSH
17812: LD_STRING DH-1-final
17814: PPUSH
17815: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
17819: LD_OWVAR 1
17823: PUSH
17824: LD_INT 126000
17826: PUSH
17827: LD_INT 115500
17829: PUSH
17830: LD_INT 105000
17832: PUSH
17833: LD_INT 94500
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: PUSH
17842: LD_OWVAR 67
17846: ARRAY
17847: LESSEQUAL
17848: IFFALSE 17862
// AddMedal ( med1 , 1 ) else
17850: LD_STRING med1
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 101
17860: GO 17873
// AddMedal ( med1 , - 1 ) ;
17862: LD_STRING med1
17864: PPUSH
17865: LD_INT 1
17867: NEG
17868: PPUSH
17869: CALL_OW 101
// if vehCounter >= 2 then
17873: LD_EXP 22
17877: PUSH
17878: LD_INT 2
17880: GREATEREQUAL
17881: IFFALSE 17895
// AddMedal ( med2 , 1 ) else
17883: LD_STRING med2
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 101
17893: GO 17906
// AddMedal ( med2 , - 1 ) ;
17895: LD_STRING med2
17897: PPUSH
17898: LD_INT 1
17900: NEG
17901: PPUSH
17902: CALL_OW 101
// if deadCounter = 0 then
17906: LD_EXP 9
17910: PUSH
17911: LD_INT 0
17913: EQUAL
17914: IFFALSE 17928
// AddMedal ( med3 , 1 ) else
17916: LD_STRING med3
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL_OW 101
17926: GO 17939
// AddMedal ( med3 , - 1 ) ;
17928: LD_STRING med3
17930: PPUSH
17931: LD_INT 1
17933: NEG
17934: PPUSH
17935: CALL_OW 101
// GiveMedals ( MAIN ) ;
17939: LD_STRING MAIN
17941: PPUSH
17942: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17946: LD_INT 22
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 23
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 21
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: PPUSH
17986: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17990: LD_EXP 28
17994: PPUSH
17995: LD_STRING 03_Heike
17997: PPUSH
17998: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18002: LD_EXP 32
18006: PPUSH
18007: LD_STRING 03_Aviradze
18009: PPUSH
18010: CALL_OW 38
// if Givi then
18014: LD_EXP 29
18018: IFFALSE 18032
// SaveCharacters ( Givi , 03_Givi ) ;
18020: LD_EXP 29
18024: PPUSH
18025: LD_STRING 03_Givi
18027: PPUSH
18028: CALL_OW 38
// if Mike then
18032: LD_EXP 30
18036: IFFALSE 18050
// SaveCharacters ( Mike , 03_Mike ) ;
18038: LD_EXP 30
18042: PPUSH
18043: LD_STRING 03_Mike
18045: PPUSH
18046: CALL_OW 38
// if Kamil then
18050: LD_EXP 31
18054: IFFALSE 18068
// SaveCharacters ( Kamil , 03_Kamil ) ;
18056: LD_EXP 31
18060: PPUSH
18061: LD_STRING 03_Kamil
18063: PPUSH
18064: CALL_OW 38
// if Kaia then
18068: LD_EXP 33
18072: IFFALSE 18086
// SaveCharacters ( Kaia , 03_Kaia ) ;
18074: LD_EXP 33
18078: PPUSH
18079: LD_STRING 03_Kaia
18081: PPUSH
18082: CALL_OW 38
// if Sophia then
18086: LD_EXP 34
18090: IFFALSE 18104
// SaveCharacters ( Sophia , 03_Sophia ) ;
18092: LD_EXP 34
18096: PPUSH
18097: LD_STRING 03_Sophia
18099: PPUSH
18100: CALL_OW 38
// if Markov then
18104: LD_EXP 35
18108: IFFALSE 18122
// SaveCharacters ( Markov , 03_Markov ) ;
18110: LD_EXP 35
18114: PPUSH
18115: LD_STRING 03_Markov
18117: PPUSH
18118: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18122: LD_EXP 38
18126: PUSH
18127: LD_EXP 38
18131: PPUSH
18132: CALL_OW 255
18136: PUSH
18137: LD_INT 2
18139: EQUAL
18140: AND
18141: IFFALSE 18162
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18143: LD_STRING enableBioCharacter(BIO_IBRA)
18145: PPUSH
18146: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18150: LD_EXP 38
18154: PPUSH
18155: LD_STRING 03_Ibrahim
18157: PPUSH
18158: CALL_OW 38
// end ; if heikeSecondSquad then
18162: LD_EXP 42
18166: IFFALSE 18180
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18168: LD_EXP 42
18172: PPUSH
18173: LD_STRING 03_others
18175: PPUSH
18176: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18180: LD_EXP 9
18184: PPUSH
18185: LD_STRING 03_DeadCounter
18187: PPUSH
18188: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18192: LD_STRING enableBioCharacter(BIO_OMAR)
18194: PPUSH
18195: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18199: LD_STRING enableBioCharacter(BIO_FARM)
18201: PPUSH
18202: CALL_OW 559
// YouWin ;
18206: CALL_OW 103
// DialogueOff ;
18210: CALL_OW 7
// end ; end_of_file
18214: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18215: LD_VAR 0 1
18219: PUSH
18220: LD_EXP 28
18224: EQUAL
18225: IFFALSE 18234
// YouLost ( Heike ) ;
18227: LD_STRING Heike
18229: PPUSH
18230: CALL_OW 104
// if un = Aviradze then
18234: LD_VAR 0 1
18238: PUSH
18239: LD_EXP 32
18243: EQUAL
18244: IFFALSE 18253
// YouLost ( Aviradze ) ;
18246: LD_STRING Aviradze
18248: PPUSH
18249: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18253: LD_VAR 0 1
18257: PUSH
18258: LD_INT 11
18260: EQUAL
18261: PUSH
18262: LD_EXP 11
18266: NOT
18267: AND
18268: IFFALSE 18277
// YouLost ( Depot ) ;
18270: LD_STRING Depot
18272: PPUSH
18273: CALL_OW 104
// if un = arDepot then
18277: LD_VAR 0 1
18281: PUSH
18282: LD_INT 5
18284: EQUAL
18285: IFFALSE 18294
// YouLost ( FarmerDepot ) ;
18287: LD_STRING FarmerDepot
18289: PPUSH
18290: CALL_OW 104
// if un = Farmer then
18294: LD_VAR 0 1
18298: PUSH
18299: LD_EXP 36
18303: EQUAL
18304: IFFALSE 18313
// YouLost ( Farmer ) ;
18306: LD_STRING Farmer
18308: PPUSH
18309: CALL_OW 104
// if un in usForces then
18313: LD_VAR 0 1
18317: PUSH
18318: LD_EXP 44
18322: IN
18323: IFFALSE 18341
// usForces := usForces diff un ;
18325: LD_ADDR_EXP 44
18329: PUSH
18330: LD_EXP 44
18334: PUSH
18335: LD_VAR 0 1
18339: DIFF
18340: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18341: LD_VAR 0 1
18345: PUSH
18346: LD_INT 22
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 23
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 21
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: IN
18386: IFFALSE 18402
// deadCounter := deadCounter + 1 ;
18388: LD_ADDR_EXP 9
18392: PUSH
18393: LD_EXP 9
18397: PUSH
18398: LD_INT 1
18400: PLUS
18401: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18402: LD_VAR 0 1
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_INT 4
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 34
18419: PUSH
18420: LD_INT 12
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: IN
18436: PUSH
18437: LD_EXP 18
18441: NOT
18442: AND
18443: IFFALSE 18453
// firstConvoyDestroyed := true ;
18445: LD_ADDR_EXP 18
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if un in usAttackers then
18453: LD_VAR 0 1
18457: PUSH
18458: LD_EXP 47
18462: IN
18463: IFFALSE 18481
// usAttackers := usAttackers diff un ;
18465: LD_ADDR_EXP 47
18469: PUSH
18470: LD_EXP 47
18474: PUSH
18475: LD_VAR 0 1
18479: DIFF
18480: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18481: LD_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 5
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: IN
18515: IFFALSE 18531
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18517: LD_ADDR_EXP 20
18521: PUSH
18522: LD_EXP 20
18526: PUSH
18527: LD_INT 1
18529: PLUS
18530: ST_TO_ADDR
// end ;
18531: PPOPN 1
18533: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18534: LD_VAR 0 2
18538: PUSH
18539: LD_EXP 38
18543: EQUAL
18544: PUSH
18545: LD_EXP 25
18549: AND
18550: IFFALSE 18735
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18552: LD_INT 22
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 50
18574: PUSH
18575: EMPTY
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 69
18587: IFFALSE 18641
// begin InGameOn ;
18589: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18593: LD_EXP 38
18597: PPUSH
18598: LD_INT 11
18600: PPUSH
18601: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18605: LD_INT 35
18607: PPUSH
18608: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18612: LD_EXP 38
18616: PPUSH
18617: LD_INT 11
18619: PPUSH
18620: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18624: LD_EXP 38
18628: PPUSH
18629: CALL_OW 310
18633: IFFALSE 18605
// InGameOff ;
18635: CALL_OW 9
// end else
18639: GO 18735
// begin SetSide ( Ibrahim , 6 ) ;
18641: LD_EXP 38
18645: PPUSH
18646: LD_INT 6
18648: PPUSH
18649: CALL_OW 235
// ibrahimInDepot := false ;
18653: LD_ADDR_EXP 25
18657: PUSH
18658: LD_INT 0
18660: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18661: LD_EXP 38
18665: PPUSH
18666: LD_INT 30
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18676: LD_INT 35
18678: PPUSH
18679: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18683: LD_EXP 38
18687: PPUSH
18688: LD_INT 30
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18698: LD_EXP 38
18702: PPUSH
18703: LD_INT 30
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 307
18713: PUSH
18714: LD_EXP 38
18718: PPUSH
18719: CALL_OW 301
18723: OR
18724: IFFALSE 18676
// RemoveUnit ( Ibrahim ) ;
18726: LD_EXP 38
18730: PPUSH
18731: CALL_OW 64
// end ; end ; end ;
18735: PPOPN 2
18737: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18738: LD_VAR 0 2
18742: PUSH
18743: LD_EXP 28
18747: EQUAL
18748: PUSH
18749: LD_VAR 0 1
18753: PUSH
18754: LD_INT 11
18756: EQUAL
18757: AND
18758: PUSH
18759: LD_EXP 25
18763: AND
18764: IFFALSE 18770
// IbrahimQuery ;
18766: CALL 16390 0 0
// end ;
18770: PPOPN 2
18772: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 141
// if oldId in usAttackers then
18782: LD_VAR 0 2
18786: PUSH
18787: LD_EXP 47
18791: IN
18792: IFFALSE 18810
// usAttackers := usAttackers diff oldId ;
18794: LD_ADDR_EXP 47
18798: PUSH
18799: LD_EXP 47
18803: PUSH
18804: LD_VAR 0 2
18808: DIFF
18809: ST_TO_ADDR
// if newId in usAttackers then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_EXP 47
18819: IN
18820: IFFALSE 18838
// usAttackers := usAttackers diff newId ;
18822: LD_ADDR_EXP 47
18826: PUSH
18827: LD_EXP 47
18831: PUSH
18832: LD_VAR 0 1
18836: DIFF
18837: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 4
18845: EQUAL
18846: PUSH
18847: LD_EXP 18
18851: NOT
18852: AND
18853: IFFALSE 18863
// firstConvoyDestroyed := true ;
18855: LD_ADDR_EXP 18
18859: PUSH
18860: LD_INT 1
18862: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18863: LD_VAR 0 1
18867: PPUSH
18868: CALL_OW 264
18872: PUSH
18873: LD_INT 12
18875: EQUAL
18876: IFFALSE 18914
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18878: LD_ADDR_EXP 13
18882: PUSH
18883: LD_EXP 13
18887: PUSH
18888: LD_INT 1
18890: PLUS
18891: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18892: LD_VAR 0 1
18896: PPUSH
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 289
18904: PUSH
18905: LD_INT 0
18907: EQUAL
18908: IFFALSE 18914
// EmptyCargoDialog ;
18910: CALL 15024 0 0
// end ; end ;
18914: PPOPN 4
18916: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18917: LD_VAR 0 1
18921: PUSH
18922: LD_INT 2
18924: EQUAL
18925: PUSH
18926: LD_VAR 0 2
18930: PUSH
18931: LD_INT 5
18933: EQUAL
18934: AND
18935: IFFALSE 18944
// YouLost ( Attack ) ;
18937: LD_STRING Attack
18939: PPUSH
18940: CALL_OW 104
// end ;
18944: PPOPN 2
18946: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 255
18956: PUSH
18957: LD_INT 1
18959: EQUAL
18960: PUSH
18961: LD_EXP 6
18965: NOT
18966: AND
18967: IFFALSE 19101
// begin if GetBType ( b ) = b_lab then
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL_OW 266
18978: PUSH
18979: LD_INT 6
18981: EQUAL
18982: IFFALSE 19022
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18984: LD_EXP 44
18988: PPUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 4
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PPUSH
18999: CALL_OW 72
19003: PPUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: CALL_OW 120
// AmLabResearch ( b ) ;
19013: LD_VAR 0 1
19017: PPUSH
19018: CALL 5203 0 1
// end ; if GetBType ( b ) = b_armoury then
19022: LD_VAR 0 1
19026: PPUSH
19027: CALL_OW 266
19031: PUSH
19032: LD_INT 4
19034: EQUAL
19035: IFFALSE 19083
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19037: LD_EXP 44
19041: PPUSH
19042: LD_INT 25
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 54
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PPUSH
19069: CALL_OW 72
19073: PPUSH
19074: LD_VAR 0 1
19078: PPUSH
19079: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19083: LD_ADDR_EXP 46
19087: PUSH
19088: LD_EXP 46
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 3
19100: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 255
19110: PUSH
19111: LD_INT 5
19113: EQUAL
19114: IFFALSE 19128
// SetBLevel ( b , 5 ) ;
19116: LD_VAR 0 1
19120: PPUSH
19121: LD_INT 5
19123: PPUSH
19124: CALL_OW 241
// end ;
19128: PPOPN 1
19130: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 255
19140: PUSH
19141: LD_INT 2
19143: EQUAL
19144: IFFALSE 19160
// vehCounter := vehCounter + 1 ;
19146: LD_ADDR_EXP 22
19150: PUSH
19151: LD_EXP 22
19155: PUSH
19156: LD_INT 1
19158: PLUS
19159: ST_TO_ADDR
// end ;
19160: PPOPN 2
19162: END
// on SailEvent ( event ) do begin if event = eventAttack then
19163: LD_VAR 0 1
19167: PUSH
19168: LD_EXP 24
19172: EQUAL
19173: IFFALSE 19179
// AmericanAttack ;
19175: CALL 6698 0 0
// end ; end_of_file
19179: PPOPN 1
19181: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19182: LD_OWVAR 1
19186: PUSH
19187: LD_INT 10500
19189: PUSH
19190: LD_INT 9800
19192: PUSH
19193: LD_INT 9450
19195: PUSH
19196: LD_INT 9100
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: PUSH
19205: LD_OWVAR 67
19209: ARRAY
19210: LESSEQUAL
19211: IFFALSE 19238
19213: GO 19215
19215: DISABLE
// begin enable ;
19216: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19217: LD_INT 1
19219: PPUSH
19220: LD_INT 5
19222: PPUSH
19223: CALL_OW 12
19227: PPUSH
19228: LD_INT 9
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: CALL_OW 55
// end ;
19238: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
19239: LD_EXP 6
19243: PUSH
19244: LD_OWVAR 1
19248: PUSH
19249: LD_INT 56700
19251: PUSH
19252: LD_INT 55650
19254: PUSH
19255: LD_INT 54600
19257: PUSH
19258: LD_INT 52500
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: LD_OWVAR 67
19271: ARRAY
19272: LESSEQUAL
19273: AND
19274: IFFALSE 19301
19276: GO 19278
19278: DISABLE
// begin enable ;
19279: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19280: LD_INT 3
19282: PPUSH
19283: LD_INT 5
19285: PPUSH
19286: CALL_OW 12
19290: PPUSH
19291: LD_INT 9
19293: PPUSH
19294: LD_INT 1
19296: PPUSH
19297: CALL_OW 55
// end ; end_of_file
19301: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19302: LD_EXP 11
19306: NOT
19307: PUSH
19308: LD_EXP 16
19312: AND
19313: PUSH
19314: LD_EXP 4
19318: AND
19319: PUSH
19320: LD_EXP 15
19324: PUSH
19325: LD_EXP 16
19329: LESSEQUAL
19330: AND
19331: IFFALSE 19421
19333: GO 19335
19335: DISABLE
// begin enable ;
19336: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19337: LD_ADDR_OWVAR 47
19341: PUSH
19342: LD_STRING #X103-1
19344: PUSH
19345: LD_EXP 16
19349: PUSH
19350: LD_EXP 15
19354: MINUS
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19360: LD_ADDR_EXP 15
19364: PUSH
19365: LD_INT 5
19367: PPUSH
19368: CALL_OW 274
19372: PPUSH
19373: LD_INT 1
19375: PPUSH
19376: CALL_OW 275
19380: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19381: LD_INT 10
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: CALL_OW 287
19391: PUSH
19392: LD_INT 0
19394: EQUAL
19395: IFFALSE 19413
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19397: LD_ADDR_EXP 17
19401: PUSH
19402: LD_EXP 17
19406: PUSH
19407: LD_INT 35
19409: MINUS
19410: ST_TO_ADDR
19411: GO 19421
// farmerCratesCounter := 30 30$00 ;
19413: LD_ADDR_EXP 17
19417: PUSH
19418: LD_INT 63000
19420: ST_TO_ADDR
// end ; end_of_file
19421: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19422: LD_INT 0
19424: PPUSH
// ar_miner := 81 ;
19425: LD_ADDR_EXP 55
19429: PUSH
19430: LD_INT 81
19432: ST_TO_ADDR
// ar_crane := 88 ;
19433: LD_ADDR_EXP 54
19437: PUSH
19438: LD_INT 88
19440: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19441: LD_ADDR_EXP 49
19445: PUSH
19446: LD_INT 89
19448: ST_TO_ADDR
// us_hack := 99 ;
19449: LD_ADDR_EXP 50
19453: PUSH
19454: LD_INT 99
19456: ST_TO_ADDR
// us_artillery := 97 ;
19457: LD_ADDR_EXP 51
19461: PUSH
19462: LD_INT 97
19464: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19465: LD_ADDR_EXP 52
19469: PUSH
19470: LD_INT 91
19472: ST_TO_ADDR
// ar_mortar := 92 ;
19473: LD_ADDR_EXP 53
19477: PUSH
19478: LD_INT 92
19480: ST_TO_ADDR
// ru_radar := 98 ;
19481: LD_ADDR_EXP 48
19485: PUSH
19486: LD_INT 98
19488: ST_TO_ADDR
// tech_Artillery := 80 ;
19489: LD_ADDR_EXP 56
19493: PUSH
19494: LD_INT 80
19496: ST_TO_ADDR
// tech_RadMat := 81 ;
19497: LD_ADDR_EXP 57
19501: PUSH
19502: LD_INT 81
19504: ST_TO_ADDR
// tech_BasicTools := 82 ;
19505: LD_ADDR_EXP 58
19509: PUSH
19510: LD_INT 82
19512: ST_TO_ADDR
// tech_Cargo := 83 ;
19513: LD_ADDR_EXP 59
19517: PUSH
19518: LD_INT 83
19520: ST_TO_ADDR
// tech_Track := 84 ;
19521: LD_ADDR_EXP 60
19525: PUSH
19526: LD_INT 84
19528: ST_TO_ADDR
// tech_Crane := 85 ;
19529: LD_ADDR_EXP 61
19533: PUSH
19534: LD_INT 85
19536: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19537: LD_ADDR_EXP 62
19541: PUSH
19542: LD_INT 86
19544: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19545: LD_ADDR_EXP 63
19549: PUSH
19550: LD_INT 87
19552: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19553: LD_ADDR_EXP 64
19557: PUSH
19558: LD_INT 88
19560: ST_TO_ADDR
// class_mastodont := 31 ;
19561: LD_ADDR_EXP 65
19565: PUSH
19566: LD_INT 31
19568: ST_TO_ADDR
// class_horse := 21 ;
19569: LD_ADDR_EXP 66
19573: PUSH
19574: LD_INT 21
19576: ST_TO_ADDR
// end ;
19577: LD_VAR 0 1
19581: RET
// every 1 do
19582: GO 19584
19584: DISABLE
// InitGlobalVariables ; end_of_file
19585: CALL 19422 0 0
19589: END
// every 0 0$1 do
19590: GO 19592
19592: DISABLE
// begin enable ;
19593: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19594: LD_STRING updateTimer(
19596: PUSH
19597: LD_OWVAR 1
19601: STR
19602: PUSH
19603: LD_STRING );
19605: STR
19606: PPUSH
19607: CALL_OW 559
// end ;
19611: END
// on MapStart ( p ) do begin if streamModeActive then
19612: LD_EXP 67
19616: IFFALSE 19625
// DefineStreamItems ( true ) ;
19618: LD_INT 1
19620: PPUSH
19621: CALL 21273 0 1
// UpdateFactoryWaypoints ( ) ;
19625: CALL 34857 0 0
// end ;
19629: PPOPN 1
19631: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19632: LD_INT 0
19634: PPUSH
// if p2 = 100 then
19635: LD_VAR 0 2
19639: PUSH
19640: LD_INT 100
19642: EQUAL
19643: IFFALSE 20646
// begin if not StreamModeActive then
19645: LD_EXP 67
19649: NOT
19650: IFFALSE 19660
// StreamModeActive := true ;
19652: LD_ADDR_EXP 67
19656: PUSH
19657: LD_INT 1
19659: ST_TO_ADDR
// if p3 = 0 then
19660: LD_VAR 0 3
19664: PUSH
19665: LD_INT 0
19667: EQUAL
19668: IFFALSE 19674
// InitStreamMode ;
19670: CALL 20809 0 0
// if p3 = 1 then
19674: LD_VAR 0 3
19678: PUSH
19679: LD_INT 1
19681: EQUAL
19682: IFFALSE 19692
// sRocket := true ;
19684: LD_ADDR_EXP 72
19688: PUSH
19689: LD_INT 1
19691: ST_TO_ADDR
// if p3 = 2 then
19692: LD_VAR 0 3
19696: PUSH
19697: LD_INT 2
19699: EQUAL
19700: IFFALSE 19710
// sSpeed := true ;
19702: LD_ADDR_EXP 71
19706: PUSH
19707: LD_INT 1
19709: ST_TO_ADDR
// if p3 = 3 then
19710: LD_VAR 0 3
19714: PUSH
19715: LD_INT 3
19717: EQUAL
19718: IFFALSE 19728
// sEngine := true ;
19720: LD_ADDR_EXP 73
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// if p3 = 4 then
19728: LD_VAR 0 3
19732: PUSH
19733: LD_INT 4
19735: EQUAL
19736: IFFALSE 19746
// sSpec := true ;
19738: LD_ADDR_EXP 70
19742: PUSH
19743: LD_INT 1
19745: ST_TO_ADDR
// if p3 = 5 then
19746: LD_VAR 0 3
19750: PUSH
19751: LD_INT 5
19753: EQUAL
19754: IFFALSE 19764
// sLevel := true ;
19756: LD_ADDR_EXP 74
19760: PUSH
19761: LD_INT 1
19763: ST_TO_ADDR
// if p3 = 6 then
19764: LD_VAR 0 3
19768: PUSH
19769: LD_INT 6
19771: EQUAL
19772: IFFALSE 19782
// sArmoury := true ;
19774: LD_ADDR_EXP 75
19778: PUSH
19779: LD_INT 1
19781: ST_TO_ADDR
// if p3 = 7 then
19782: LD_VAR 0 3
19786: PUSH
19787: LD_INT 7
19789: EQUAL
19790: IFFALSE 19800
// sRadar := true ;
19792: LD_ADDR_EXP 76
19796: PUSH
19797: LD_INT 1
19799: ST_TO_ADDR
// if p3 = 8 then
19800: LD_VAR 0 3
19804: PUSH
19805: LD_INT 8
19807: EQUAL
19808: IFFALSE 19818
// sBunker := true ;
19810: LD_ADDR_EXP 77
19814: PUSH
19815: LD_INT 1
19817: ST_TO_ADDR
// if p3 = 9 then
19818: LD_VAR 0 3
19822: PUSH
19823: LD_INT 9
19825: EQUAL
19826: IFFALSE 19836
// sHack := true ;
19828: LD_ADDR_EXP 78
19832: PUSH
19833: LD_INT 1
19835: ST_TO_ADDR
// if p3 = 10 then
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 10
19843: EQUAL
19844: IFFALSE 19854
// sFire := true ;
19846: LD_ADDR_EXP 79
19850: PUSH
19851: LD_INT 1
19853: ST_TO_ADDR
// if p3 = 11 then
19854: LD_VAR 0 3
19858: PUSH
19859: LD_INT 11
19861: EQUAL
19862: IFFALSE 19872
// sRefresh := true ;
19864: LD_ADDR_EXP 80
19868: PUSH
19869: LD_INT 1
19871: ST_TO_ADDR
// if p3 = 12 then
19872: LD_VAR 0 3
19876: PUSH
19877: LD_INT 12
19879: EQUAL
19880: IFFALSE 19890
// sExp := true ;
19882: LD_ADDR_EXP 81
19886: PUSH
19887: LD_INT 1
19889: ST_TO_ADDR
// if p3 = 13 then
19890: LD_VAR 0 3
19894: PUSH
19895: LD_INT 13
19897: EQUAL
19898: IFFALSE 19908
// sDepot := true ;
19900: LD_ADDR_EXP 82
19904: PUSH
19905: LD_INT 1
19907: ST_TO_ADDR
// if p3 = 14 then
19908: LD_VAR 0 3
19912: PUSH
19913: LD_INT 14
19915: EQUAL
19916: IFFALSE 19926
// sFlag := true ;
19918: LD_ADDR_EXP 83
19922: PUSH
19923: LD_INT 1
19925: ST_TO_ADDR
// if p3 = 15 then
19926: LD_VAR 0 3
19930: PUSH
19931: LD_INT 15
19933: EQUAL
19934: IFFALSE 19944
// sKamikadze := true ;
19936: LD_ADDR_EXP 91
19940: PUSH
19941: LD_INT 1
19943: ST_TO_ADDR
// if p3 = 16 then
19944: LD_VAR 0 3
19948: PUSH
19949: LD_INT 16
19951: EQUAL
19952: IFFALSE 19962
// sTroll := true ;
19954: LD_ADDR_EXP 92
19958: PUSH
19959: LD_INT 1
19961: ST_TO_ADDR
// if p3 = 17 then
19962: LD_VAR 0 3
19966: PUSH
19967: LD_INT 17
19969: EQUAL
19970: IFFALSE 19980
// sSlow := true ;
19972: LD_ADDR_EXP 93
19976: PUSH
19977: LD_INT 1
19979: ST_TO_ADDR
// if p3 = 18 then
19980: LD_VAR 0 3
19984: PUSH
19985: LD_INT 18
19987: EQUAL
19988: IFFALSE 19998
// sLack := true ;
19990: LD_ADDR_EXP 94
19994: PUSH
19995: LD_INT 1
19997: ST_TO_ADDR
// if p3 = 19 then
19998: LD_VAR 0 3
20002: PUSH
20003: LD_INT 19
20005: EQUAL
20006: IFFALSE 20016
// sTank := true ;
20008: LD_ADDR_EXP 96
20012: PUSH
20013: LD_INT 1
20015: ST_TO_ADDR
// if p3 = 20 then
20016: LD_VAR 0 3
20020: PUSH
20021: LD_INT 20
20023: EQUAL
20024: IFFALSE 20034
// sRemote := true ;
20026: LD_ADDR_EXP 97
20030: PUSH
20031: LD_INT 1
20033: ST_TO_ADDR
// if p3 = 21 then
20034: LD_VAR 0 3
20038: PUSH
20039: LD_INT 21
20041: EQUAL
20042: IFFALSE 20052
// sPowell := true ;
20044: LD_ADDR_EXP 98
20048: PUSH
20049: LD_INT 1
20051: ST_TO_ADDR
// if p3 = 22 then
20052: LD_VAR 0 3
20056: PUSH
20057: LD_INT 22
20059: EQUAL
20060: IFFALSE 20070
// sTeleport := true ;
20062: LD_ADDR_EXP 101
20066: PUSH
20067: LD_INT 1
20069: ST_TO_ADDR
// if p3 = 23 then
20070: LD_VAR 0 3
20074: PUSH
20075: LD_INT 23
20077: EQUAL
20078: IFFALSE 20088
// sOilTower := true ;
20080: LD_ADDR_EXP 103
20084: PUSH
20085: LD_INT 1
20087: ST_TO_ADDR
// if p3 = 24 then
20088: LD_VAR 0 3
20092: PUSH
20093: LD_INT 24
20095: EQUAL
20096: IFFALSE 20106
// sShovel := true ;
20098: LD_ADDR_EXP 104
20102: PUSH
20103: LD_INT 1
20105: ST_TO_ADDR
// if p3 = 25 then
20106: LD_VAR 0 3
20110: PUSH
20111: LD_INT 25
20113: EQUAL
20114: IFFALSE 20124
// sSheik := true ;
20116: LD_ADDR_EXP 105
20120: PUSH
20121: LD_INT 1
20123: ST_TO_ADDR
// if p3 = 26 then
20124: LD_VAR 0 3
20128: PUSH
20129: LD_INT 26
20131: EQUAL
20132: IFFALSE 20142
// sEarthquake := true ;
20134: LD_ADDR_EXP 107
20138: PUSH
20139: LD_INT 1
20141: ST_TO_ADDR
// if p3 = 27 then
20142: LD_VAR 0 3
20146: PUSH
20147: LD_INT 27
20149: EQUAL
20150: IFFALSE 20160
// sAI := true ;
20152: LD_ADDR_EXP 108
20156: PUSH
20157: LD_INT 1
20159: ST_TO_ADDR
// if p3 = 28 then
20160: LD_VAR 0 3
20164: PUSH
20165: LD_INT 28
20167: EQUAL
20168: IFFALSE 20178
// sCargo := true ;
20170: LD_ADDR_EXP 111
20174: PUSH
20175: LD_INT 1
20177: ST_TO_ADDR
// if p3 = 29 then
20178: LD_VAR 0 3
20182: PUSH
20183: LD_INT 29
20185: EQUAL
20186: IFFALSE 20196
// sDLaser := true ;
20188: LD_ADDR_EXP 112
20192: PUSH
20193: LD_INT 1
20195: ST_TO_ADDR
// if p3 = 30 then
20196: LD_VAR 0 3
20200: PUSH
20201: LD_INT 30
20203: EQUAL
20204: IFFALSE 20214
// sExchange := true ;
20206: LD_ADDR_EXP 113
20210: PUSH
20211: LD_INT 1
20213: ST_TO_ADDR
// if p3 = 31 then
20214: LD_VAR 0 3
20218: PUSH
20219: LD_INT 31
20221: EQUAL
20222: IFFALSE 20232
// sFac := true ;
20224: LD_ADDR_EXP 114
20228: PUSH
20229: LD_INT 1
20231: ST_TO_ADDR
// if p3 = 32 then
20232: LD_VAR 0 3
20236: PUSH
20237: LD_INT 32
20239: EQUAL
20240: IFFALSE 20250
// sPower := true ;
20242: LD_ADDR_EXP 115
20246: PUSH
20247: LD_INT 1
20249: ST_TO_ADDR
// if p3 = 33 then
20250: LD_VAR 0 3
20254: PUSH
20255: LD_INT 33
20257: EQUAL
20258: IFFALSE 20268
// sRandom := true ;
20260: LD_ADDR_EXP 116
20264: PUSH
20265: LD_INT 1
20267: ST_TO_ADDR
// if p3 = 34 then
20268: LD_VAR 0 3
20272: PUSH
20273: LD_INT 34
20275: EQUAL
20276: IFFALSE 20286
// sShield := true ;
20278: LD_ADDR_EXP 117
20282: PUSH
20283: LD_INT 1
20285: ST_TO_ADDR
// if p3 = 35 then
20286: LD_VAR 0 3
20290: PUSH
20291: LD_INT 35
20293: EQUAL
20294: IFFALSE 20304
// sTime := true ;
20296: LD_ADDR_EXP 118
20300: PUSH
20301: LD_INT 1
20303: ST_TO_ADDR
// if p3 = 36 then
20304: LD_VAR 0 3
20308: PUSH
20309: LD_INT 36
20311: EQUAL
20312: IFFALSE 20322
// sTools := true ;
20314: LD_ADDR_EXP 119
20318: PUSH
20319: LD_INT 1
20321: ST_TO_ADDR
// if p3 = 101 then
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 101
20329: EQUAL
20330: IFFALSE 20340
// sSold := true ;
20332: LD_ADDR_EXP 84
20336: PUSH
20337: LD_INT 1
20339: ST_TO_ADDR
// if p3 = 102 then
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 102
20347: EQUAL
20348: IFFALSE 20358
// sDiff := true ;
20350: LD_ADDR_EXP 85
20354: PUSH
20355: LD_INT 1
20357: ST_TO_ADDR
// if p3 = 103 then
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 103
20365: EQUAL
20366: IFFALSE 20376
// sFog := true ;
20368: LD_ADDR_EXP 88
20372: PUSH
20373: LD_INT 1
20375: ST_TO_ADDR
// if p3 = 104 then
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 104
20383: EQUAL
20384: IFFALSE 20394
// sReset := true ;
20386: LD_ADDR_EXP 89
20390: PUSH
20391: LD_INT 1
20393: ST_TO_ADDR
// if p3 = 105 then
20394: LD_VAR 0 3
20398: PUSH
20399: LD_INT 105
20401: EQUAL
20402: IFFALSE 20412
// sSun := true ;
20404: LD_ADDR_EXP 90
20408: PUSH
20409: LD_INT 1
20411: ST_TO_ADDR
// if p3 = 106 then
20412: LD_VAR 0 3
20416: PUSH
20417: LD_INT 106
20419: EQUAL
20420: IFFALSE 20430
// sTiger := true ;
20422: LD_ADDR_EXP 86
20426: PUSH
20427: LD_INT 1
20429: ST_TO_ADDR
// if p3 = 107 then
20430: LD_VAR 0 3
20434: PUSH
20435: LD_INT 107
20437: EQUAL
20438: IFFALSE 20448
// sBomb := true ;
20440: LD_ADDR_EXP 87
20444: PUSH
20445: LD_INT 1
20447: ST_TO_ADDR
// if p3 = 108 then
20448: LD_VAR 0 3
20452: PUSH
20453: LD_INT 108
20455: EQUAL
20456: IFFALSE 20466
// sWound := true ;
20458: LD_ADDR_EXP 95
20462: PUSH
20463: LD_INT 1
20465: ST_TO_ADDR
// if p3 = 109 then
20466: LD_VAR 0 3
20470: PUSH
20471: LD_INT 109
20473: EQUAL
20474: IFFALSE 20484
// sBetray := true ;
20476: LD_ADDR_EXP 99
20480: PUSH
20481: LD_INT 1
20483: ST_TO_ADDR
// if p3 = 110 then
20484: LD_VAR 0 3
20488: PUSH
20489: LD_INT 110
20491: EQUAL
20492: IFFALSE 20502
// sContamin := true ;
20494: LD_ADDR_EXP 100
20498: PUSH
20499: LD_INT 1
20501: ST_TO_ADDR
// if p3 = 111 then
20502: LD_VAR 0 3
20506: PUSH
20507: LD_INT 111
20509: EQUAL
20510: IFFALSE 20520
// sOil := true ;
20512: LD_ADDR_EXP 102
20516: PUSH
20517: LD_INT 1
20519: ST_TO_ADDR
// if p3 = 112 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 112
20527: EQUAL
20528: IFFALSE 20538
// sStu := true ;
20530: LD_ADDR_EXP 106
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// if p3 = 113 then
20538: LD_VAR 0 3
20542: PUSH
20543: LD_INT 113
20545: EQUAL
20546: IFFALSE 20556
// sBazooka := true ;
20548: LD_ADDR_EXP 109
20552: PUSH
20553: LD_INT 1
20555: ST_TO_ADDR
// if p3 = 114 then
20556: LD_VAR 0 3
20560: PUSH
20561: LD_INT 114
20563: EQUAL
20564: IFFALSE 20574
// sMortar := true ;
20566: LD_ADDR_EXP 110
20570: PUSH
20571: LD_INT 1
20573: ST_TO_ADDR
// if p3 = 115 then
20574: LD_VAR 0 3
20578: PUSH
20579: LD_INT 115
20581: EQUAL
20582: IFFALSE 20592
// sRanger := true ;
20584: LD_ADDR_EXP 120
20588: PUSH
20589: LD_INT 1
20591: ST_TO_ADDR
// if p3 = 116 then
20592: LD_VAR 0 3
20596: PUSH
20597: LD_INT 116
20599: EQUAL
20600: IFFALSE 20610
// sComputer := true ;
20602: LD_ADDR_EXP 121
20606: PUSH
20607: LD_INT 1
20609: ST_TO_ADDR
// if p3 = 117 then
20610: LD_VAR 0 3
20614: PUSH
20615: LD_INT 117
20617: EQUAL
20618: IFFALSE 20628
// s30 := true ;
20620: LD_ADDR_EXP 122
20624: PUSH
20625: LD_INT 1
20627: ST_TO_ADDR
// if p3 = 118 then
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 118
20635: EQUAL
20636: IFFALSE 20646
// s60 := true ;
20638: LD_ADDR_EXP 123
20642: PUSH
20643: LD_INT 1
20645: ST_TO_ADDR
// end ; if p2 = 101 then
20646: LD_VAR 0 2
20650: PUSH
20651: LD_INT 101
20653: EQUAL
20654: IFFALSE 20782
// begin case p3 of 1 :
20656: LD_VAR 0 3
20660: PUSH
20661: LD_INT 1
20663: DOUBLE
20664: EQUAL
20665: IFTRUE 20669
20667: GO 20676
20669: POP
// hHackUnlimitedResources ; 2 :
20670: CALL 32880 0 0
20674: GO 20782
20676: LD_INT 2
20678: DOUBLE
20679: EQUAL
20680: IFTRUE 20684
20682: GO 20691
20684: POP
// hHackSetLevel10 ; 3 :
20685: CALL 33013 0 0
20689: GO 20782
20691: LD_INT 3
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20706
20699: POP
// hHackSetLevel10YourUnits ; 4 :
20700: CALL 33098 0 0
20704: GO 20782
20706: LD_INT 4
20708: DOUBLE
20709: EQUAL
20710: IFTRUE 20714
20712: GO 20721
20714: POP
// hHackInvincible ; 5 :
20715: CALL 33546 0 0
20719: GO 20782
20721: LD_INT 5
20723: DOUBLE
20724: EQUAL
20725: IFTRUE 20729
20727: GO 20736
20729: POP
// hHackInvisible ; 6 :
20730: CALL 33657 0 0
20734: GO 20782
20736: LD_INT 6
20738: DOUBLE
20739: EQUAL
20740: IFTRUE 20744
20742: GO 20751
20744: POP
// hHackChangeYourSide ; 7 :
20745: CALL 33714 0 0
20749: GO 20782
20751: LD_INT 7
20753: DOUBLE
20754: EQUAL
20755: IFTRUE 20759
20757: GO 20766
20759: POP
// hHackChangeUnitSide ; 8 :
20760: CALL 33756 0 0
20764: GO 20782
20766: LD_INT 8
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20781
20774: POP
// hHackFog ; end ;
20775: CALL 33857 0 0
20779: GO 20782
20781: POP
// end ; end ;
20782: LD_VAR 0 7
20786: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20787: GO 20789
20789: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20790: LD_STRING initStreamRollete();
20792: PPUSH
20793: CALL_OW 559
// InitStreamMode ;
20797: CALL 20809 0 0
// DefineStreamItems ( false ) ;
20801: LD_INT 0
20803: PPUSH
20804: CALL 21273 0 1
// end ;
20808: END
// function InitStreamMode ; begin
20809: LD_INT 0
20811: PPUSH
// streamModeActive := false ;
20812: LD_ADDR_EXP 67
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// normalCounter := 36 ;
20820: LD_ADDR_EXP 68
20824: PUSH
20825: LD_INT 36
20827: ST_TO_ADDR
// hardcoreCounter := 18 ;
20828: LD_ADDR_EXP 69
20832: PUSH
20833: LD_INT 18
20835: ST_TO_ADDR
// sRocket := false ;
20836: LD_ADDR_EXP 72
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sSpeed := false ;
20844: LD_ADDR_EXP 71
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sEngine := false ;
20852: LD_ADDR_EXP 73
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sSpec := false ;
20860: LD_ADDR_EXP 70
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sLevel := false ;
20868: LD_ADDR_EXP 74
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sArmoury := false ;
20876: LD_ADDR_EXP 75
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sRadar := false ;
20884: LD_ADDR_EXP 76
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sBunker := false ;
20892: LD_ADDR_EXP 77
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sHack := false ;
20900: LD_ADDR_EXP 78
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sFire := false ;
20908: LD_ADDR_EXP 79
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sRefresh := false ;
20916: LD_ADDR_EXP 80
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sExp := false ;
20924: LD_ADDR_EXP 81
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sDepot := false ;
20932: LD_ADDR_EXP 82
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sFlag := false ;
20940: LD_ADDR_EXP 83
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sKamikadze := false ;
20948: LD_ADDR_EXP 91
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTroll := false ;
20956: LD_ADDR_EXP 92
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sSlow := false ;
20964: LD_ADDR_EXP 93
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sLack := false ;
20972: LD_ADDR_EXP 94
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sTank := false ;
20980: LD_ADDR_EXP 96
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sRemote := false ;
20988: LD_ADDR_EXP 97
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sPowell := false ;
20996: LD_ADDR_EXP 98
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sTeleport := false ;
21004: LD_ADDR_EXP 101
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sOilTower := false ;
21012: LD_ADDR_EXP 103
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sShovel := false ;
21020: LD_ADDR_EXP 104
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sSheik := false ;
21028: LD_ADDR_EXP 105
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// sEarthquake := false ;
21036: LD_ADDR_EXP 107
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// sAI := false ;
21044: LD_ADDR_EXP 108
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// sCargo := false ;
21052: LD_ADDR_EXP 111
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// sDLaser := false ;
21060: LD_ADDR_EXP 112
21064: PUSH
21065: LD_INT 0
21067: ST_TO_ADDR
// sExchange := false ;
21068: LD_ADDR_EXP 113
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// sFac := false ;
21076: LD_ADDR_EXP 114
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
// sPower := false ;
21084: LD_ADDR_EXP 115
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// sRandom := false ;
21092: LD_ADDR_EXP 116
21096: PUSH
21097: LD_INT 0
21099: ST_TO_ADDR
// sShield := false ;
21100: LD_ADDR_EXP 117
21104: PUSH
21105: LD_INT 0
21107: ST_TO_ADDR
// sTime := false ;
21108: LD_ADDR_EXP 118
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// sTools := false ;
21116: LD_ADDR_EXP 119
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
// sSold := false ;
21124: LD_ADDR_EXP 84
21128: PUSH
21129: LD_INT 0
21131: ST_TO_ADDR
// sDiff := false ;
21132: LD_ADDR_EXP 85
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// sFog := false ;
21140: LD_ADDR_EXP 88
21144: PUSH
21145: LD_INT 0
21147: ST_TO_ADDR
// sReset := false ;
21148: LD_ADDR_EXP 89
21152: PUSH
21153: LD_INT 0
21155: ST_TO_ADDR
// sSun := false ;
21156: LD_ADDR_EXP 90
21160: PUSH
21161: LD_INT 0
21163: ST_TO_ADDR
// sTiger := false ;
21164: LD_ADDR_EXP 86
21168: PUSH
21169: LD_INT 0
21171: ST_TO_ADDR
// sBomb := false ;
21172: LD_ADDR_EXP 87
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
// sWound := false ;
21180: LD_ADDR_EXP 95
21184: PUSH
21185: LD_INT 0
21187: ST_TO_ADDR
// sBetray := false ;
21188: LD_ADDR_EXP 99
21192: PUSH
21193: LD_INT 0
21195: ST_TO_ADDR
// sContamin := false ;
21196: LD_ADDR_EXP 100
21200: PUSH
21201: LD_INT 0
21203: ST_TO_ADDR
// sOil := false ;
21204: LD_ADDR_EXP 102
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
// sStu := false ;
21212: LD_ADDR_EXP 106
21216: PUSH
21217: LD_INT 0
21219: ST_TO_ADDR
// sBazooka := false ;
21220: LD_ADDR_EXP 109
21224: PUSH
21225: LD_INT 0
21227: ST_TO_ADDR
// sMortar := false ;
21228: LD_ADDR_EXP 110
21232: PUSH
21233: LD_INT 0
21235: ST_TO_ADDR
// sRanger := false ;
21236: LD_ADDR_EXP 120
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
// sComputer := false ;
21244: LD_ADDR_EXP 121
21248: PUSH
21249: LD_INT 0
21251: ST_TO_ADDR
// s30 := false ;
21252: LD_ADDR_EXP 122
21256: PUSH
21257: LD_INT 0
21259: ST_TO_ADDR
// s60 := false ;
21260: LD_ADDR_EXP 123
21264: PUSH
21265: LD_INT 0
21267: ST_TO_ADDR
// end ;
21268: LD_VAR 0 1
21272: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21273: LD_INT 0
21275: PPUSH
21276: PPUSH
21277: PPUSH
21278: PPUSH
21279: PPUSH
21280: PPUSH
21281: PPUSH
// result := [ ] ;
21282: LD_ADDR_VAR 0 2
21286: PUSH
21287: EMPTY
21288: ST_TO_ADDR
// if campaign_id = 1 then
21289: LD_OWVAR 69
21293: PUSH
21294: LD_INT 1
21296: EQUAL
21297: IFFALSE 24463
// begin case mission_number of 1 :
21299: LD_OWVAR 70
21303: PUSH
21304: LD_INT 1
21306: DOUBLE
21307: EQUAL
21308: IFTRUE 21312
21310: GO 21388
21312: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21313: LD_ADDR_VAR 0 2
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 4
21323: PUSH
21324: LD_INT 11
21326: PUSH
21327: LD_INT 12
21329: PUSH
21330: LD_INT 15
21332: PUSH
21333: LD_INT 16
21335: PUSH
21336: LD_INT 22
21338: PUSH
21339: LD_INT 23
21341: PUSH
21342: LD_INT 26
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 101
21358: PUSH
21359: LD_INT 102
21361: PUSH
21362: LD_INT 106
21364: PUSH
21365: LD_INT 116
21367: PUSH
21368: LD_INT 117
21370: PUSH
21371: LD_INT 118
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: ST_TO_ADDR
21386: GO 24461
21388: LD_INT 2
21390: DOUBLE
21391: EQUAL
21392: IFTRUE 21396
21394: GO 21480
21396: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21397: LD_ADDR_VAR 0 2
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 4
21407: PUSH
21408: LD_INT 11
21410: PUSH
21411: LD_INT 12
21413: PUSH
21414: LD_INT 15
21416: PUSH
21417: LD_INT 16
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_INT 23
21425: PUSH
21426: LD_INT 26
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 101
21442: PUSH
21443: LD_INT 102
21445: PUSH
21446: LD_INT 105
21448: PUSH
21449: LD_INT 106
21451: PUSH
21452: LD_INT 108
21454: PUSH
21455: LD_INT 116
21457: PUSH
21458: LD_INT 117
21460: PUSH
21461: LD_INT 118
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: ST_TO_ADDR
21478: GO 24461
21480: LD_INT 3
21482: DOUBLE
21483: EQUAL
21484: IFTRUE 21488
21486: GO 21576
21488: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21489: LD_ADDR_VAR 0 2
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: LD_INT 4
21499: PUSH
21500: LD_INT 5
21502: PUSH
21503: LD_INT 11
21505: PUSH
21506: LD_INT 12
21508: PUSH
21509: LD_INT 15
21511: PUSH
21512: LD_INT 16
21514: PUSH
21515: LD_INT 22
21517: PUSH
21518: LD_INT 26
21520: PUSH
21521: LD_INT 36
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 101
21538: PUSH
21539: LD_INT 102
21541: PUSH
21542: LD_INT 105
21544: PUSH
21545: LD_INT 106
21547: PUSH
21548: LD_INT 108
21550: PUSH
21551: LD_INT 116
21553: PUSH
21554: LD_INT 117
21556: PUSH
21557: LD_INT 118
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: ST_TO_ADDR
21574: GO 24461
21576: LD_INT 4
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21680
21584: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21585: LD_ADDR_VAR 0 2
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: LD_INT 4
21595: PUSH
21596: LD_INT 5
21598: PUSH
21599: LD_INT 8
21601: PUSH
21602: LD_INT 11
21604: PUSH
21605: LD_INT 12
21607: PUSH
21608: LD_INT 15
21610: PUSH
21611: LD_INT 16
21613: PUSH
21614: LD_INT 22
21616: PUSH
21617: LD_INT 23
21619: PUSH
21620: LD_INT 26
21622: PUSH
21623: LD_INT 36
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 101
21642: PUSH
21643: LD_INT 102
21645: PUSH
21646: LD_INT 105
21648: PUSH
21649: LD_INT 106
21651: PUSH
21652: LD_INT 108
21654: PUSH
21655: LD_INT 116
21657: PUSH
21658: LD_INT 117
21660: PUSH
21661: LD_INT 118
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: ST_TO_ADDR
21678: GO 24461
21680: LD_INT 5
21682: DOUBLE
21683: EQUAL
21684: IFTRUE 21688
21686: GO 21800
21688: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21689: LD_ADDR_VAR 0 2
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: LD_INT 4
21699: PUSH
21700: LD_INT 5
21702: PUSH
21703: LD_INT 6
21705: PUSH
21706: LD_INT 8
21708: PUSH
21709: LD_INT 11
21711: PUSH
21712: LD_INT 12
21714: PUSH
21715: LD_INT 15
21717: PUSH
21718: LD_INT 16
21720: PUSH
21721: LD_INT 22
21723: PUSH
21724: LD_INT 23
21726: PUSH
21727: LD_INT 25
21729: PUSH
21730: LD_INT 26
21732: PUSH
21733: LD_INT 36
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 101
21754: PUSH
21755: LD_INT 102
21757: PUSH
21758: LD_INT 105
21760: PUSH
21761: LD_INT 106
21763: PUSH
21764: LD_INT 108
21766: PUSH
21767: LD_INT 109
21769: PUSH
21770: LD_INT 112
21772: PUSH
21773: LD_INT 116
21775: PUSH
21776: LD_INT 117
21778: PUSH
21779: LD_INT 118
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: ST_TO_ADDR
21798: GO 24461
21800: LD_INT 6
21802: DOUBLE
21803: EQUAL
21804: IFTRUE 21808
21806: GO 21940
21808: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21809: LD_ADDR_VAR 0 2
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 4
21819: PUSH
21820: LD_INT 5
21822: PUSH
21823: LD_INT 6
21825: PUSH
21826: LD_INT 8
21828: PUSH
21829: LD_INT 11
21831: PUSH
21832: LD_INT 12
21834: PUSH
21835: LD_INT 15
21837: PUSH
21838: LD_INT 16
21840: PUSH
21841: LD_INT 20
21843: PUSH
21844: LD_INT 21
21846: PUSH
21847: LD_INT 22
21849: PUSH
21850: LD_INT 23
21852: PUSH
21853: LD_INT 25
21855: PUSH
21856: LD_INT 26
21858: PUSH
21859: LD_INT 30
21861: PUSH
21862: LD_INT 31
21864: PUSH
21865: LD_INT 32
21867: PUSH
21868: LD_INT 36
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 101
21894: PUSH
21895: LD_INT 102
21897: PUSH
21898: LD_INT 105
21900: PUSH
21901: LD_INT 106
21903: PUSH
21904: LD_INT 108
21906: PUSH
21907: LD_INT 109
21909: PUSH
21910: LD_INT 112
21912: PUSH
21913: LD_INT 116
21915: PUSH
21916: LD_INT 117
21918: PUSH
21919: LD_INT 118
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: ST_TO_ADDR
21938: GO 24461
21940: LD_INT 7
21942: DOUBLE
21943: EQUAL
21944: IFTRUE 21948
21946: GO 22060
21948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21949: LD_ADDR_VAR 0 2
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 4
21959: PUSH
21960: LD_INT 5
21962: PUSH
21963: LD_INT 7
21965: PUSH
21966: LD_INT 11
21968: PUSH
21969: LD_INT 12
21971: PUSH
21972: LD_INT 15
21974: PUSH
21975: LD_INT 16
21977: PUSH
21978: LD_INT 20
21980: PUSH
21981: LD_INT 21
21983: PUSH
21984: LD_INT 22
21986: PUSH
21987: LD_INT 23
21989: PUSH
21990: LD_INT 25
21992: PUSH
21993: LD_INT 26
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 101
22014: PUSH
22015: LD_INT 102
22017: PUSH
22018: LD_INT 103
22020: PUSH
22021: LD_INT 105
22023: PUSH
22024: LD_INT 106
22026: PUSH
22027: LD_INT 108
22029: PUSH
22030: LD_INT 112
22032: PUSH
22033: LD_INT 116
22035: PUSH
22036: LD_INT 117
22038: PUSH
22039: LD_INT 118
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: ST_TO_ADDR
22058: GO 24461
22060: LD_INT 8
22062: DOUBLE
22063: EQUAL
22064: IFTRUE 22068
22066: GO 22208
22068: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22069: LD_ADDR_VAR 0 2
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: LD_INT 4
22079: PUSH
22080: LD_INT 5
22082: PUSH
22083: LD_INT 6
22085: PUSH
22086: LD_INT 7
22088: PUSH
22089: LD_INT 8
22091: PUSH
22092: LD_INT 11
22094: PUSH
22095: LD_INT 12
22097: PUSH
22098: LD_INT 15
22100: PUSH
22101: LD_INT 16
22103: PUSH
22104: LD_INT 20
22106: PUSH
22107: LD_INT 21
22109: PUSH
22110: LD_INT 22
22112: PUSH
22113: LD_INT 23
22115: PUSH
22116: LD_INT 25
22118: PUSH
22119: LD_INT 26
22121: PUSH
22122: LD_INT 30
22124: PUSH
22125: LD_INT 31
22127: PUSH
22128: LD_INT 32
22130: PUSH
22131: LD_INT 36
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 101
22158: PUSH
22159: LD_INT 102
22161: PUSH
22162: LD_INT 103
22164: PUSH
22165: LD_INT 105
22167: PUSH
22168: LD_INT 106
22170: PUSH
22171: LD_INT 108
22173: PUSH
22174: LD_INT 109
22176: PUSH
22177: LD_INT 112
22179: PUSH
22180: LD_INT 116
22182: PUSH
22183: LD_INT 117
22185: PUSH
22186: LD_INT 118
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: ST_TO_ADDR
22206: GO 24461
22208: LD_INT 9
22210: DOUBLE
22211: EQUAL
22212: IFTRUE 22216
22214: GO 22364
22216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22217: LD_ADDR_VAR 0 2
22221: PUSH
22222: LD_INT 2
22224: PUSH
22225: LD_INT 4
22227: PUSH
22228: LD_INT 5
22230: PUSH
22231: LD_INT 6
22233: PUSH
22234: LD_INT 7
22236: PUSH
22237: LD_INT 8
22239: PUSH
22240: LD_INT 11
22242: PUSH
22243: LD_INT 12
22245: PUSH
22246: LD_INT 15
22248: PUSH
22249: LD_INT 16
22251: PUSH
22252: LD_INT 20
22254: PUSH
22255: LD_INT 21
22257: PUSH
22258: LD_INT 22
22260: PUSH
22261: LD_INT 23
22263: PUSH
22264: LD_INT 25
22266: PUSH
22267: LD_INT 26
22269: PUSH
22270: LD_INT 28
22272: PUSH
22273: LD_INT 30
22275: PUSH
22276: LD_INT 31
22278: PUSH
22279: LD_INT 32
22281: PUSH
22282: LD_INT 36
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 101
22310: PUSH
22311: LD_INT 102
22313: PUSH
22314: LD_INT 103
22316: PUSH
22317: LD_INT 105
22319: PUSH
22320: LD_INT 106
22322: PUSH
22323: LD_INT 108
22325: PUSH
22326: LD_INT 109
22328: PUSH
22329: LD_INT 112
22331: PUSH
22332: LD_INT 114
22334: PUSH
22335: LD_INT 116
22337: PUSH
22338: LD_INT 117
22340: PUSH
22341: LD_INT 118
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: ST_TO_ADDR
22362: GO 24461
22364: LD_INT 10
22366: DOUBLE
22367: EQUAL
22368: IFTRUE 22372
22370: GO 22568
22372: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22373: LD_ADDR_VAR 0 2
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 4
22383: PUSH
22384: LD_INT 5
22386: PUSH
22387: LD_INT 6
22389: PUSH
22390: LD_INT 7
22392: PUSH
22393: LD_INT 8
22395: PUSH
22396: LD_INT 9
22398: PUSH
22399: LD_INT 10
22401: PUSH
22402: LD_INT 11
22404: PUSH
22405: LD_INT 12
22407: PUSH
22408: LD_INT 13
22410: PUSH
22411: LD_INT 14
22413: PUSH
22414: LD_INT 15
22416: PUSH
22417: LD_INT 16
22419: PUSH
22420: LD_INT 17
22422: PUSH
22423: LD_INT 18
22425: PUSH
22426: LD_INT 19
22428: PUSH
22429: LD_INT 20
22431: PUSH
22432: LD_INT 21
22434: PUSH
22435: LD_INT 22
22437: PUSH
22438: LD_INT 23
22440: PUSH
22441: LD_INT 24
22443: PUSH
22444: LD_INT 25
22446: PUSH
22447: LD_INT 26
22449: PUSH
22450: LD_INT 28
22452: PUSH
22453: LD_INT 30
22455: PUSH
22456: LD_INT 31
22458: PUSH
22459: LD_INT 32
22461: PUSH
22462: LD_INT 36
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 101
22498: PUSH
22499: LD_INT 102
22501: PUSH
22502: LD_INT 103
22504: PUSH
22505: LD_INT 104
22507: PUSH
22508: LD_INT 105
22510: PUSH
22511: LD_INT 106
22513: PUSH
22514: LD_INT 107
22516: PUSH
22517: LD_INT 108
22519: PUSH
22520: LD_INT 109
22522: PUSH
22523: LD_INT 110
22525: PUSH
22526: LD_INT 111
22528: PUSH
22529: LD_INT 112
22531: PUSH
22532: LD_INT 114
22534: PUSH
22535: LD_INT 116
22537: PUSH
22538: LD_INT 117
22540: PUSH
22541: LD_INT 118
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: ST_TO_ADDR
22566: GO 24461
22568: LD_INT 11
22570: DOUBLE
22571: EQUAL
22572: IFTRUE 22576
22574: GO 22780
22576: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22577: LD_ADDR_VAR 0 2
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 3
22587: PUSH
22588: LD_INT 4
22590: PUSH
22591: LD_INT 5
22593: PUSH
22594: LD_INT 6
22596: PUSH
22597: LD_INT 7
22599: PUSH
22600: LD_INT 8
22602: PUSH
22603: LD_INT 9
22605: PUSH
22606: LD_INT 10
22608: PUSH
22609: LD_INT 11
22611: PUSH
22612: LD_INT 12
22614: PUSH
22615: LD_INT 13
22617: PUSH
22618: LD_INT 14
22620: PUSH
22621: LD_INT 15
22623: PUSH
22624: LD_INT 16
22626: PUSH
22627: LD_INT 17
22629: PUSH
22630: LD_INT 18
22632: PUSH
22633: LD_INT 19
22635: PUSH
22636: LD_INT 20
22638: PUSH
22639: LD_INT 21
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_INT 23
22647: PUSH
22648: LD_INT 24
22650: PUSH
22651: LD_INT 25
22653: PUSH
22654: LD_INT 26
22656: PUSH
22657: LD_INT 28
22659: PUSH
22660: LD_INT 30
22662: PUSH
22663: LD_INT 31
22665: PUSH
22666: LD_INT 32
22668: PUSH
22669: LD_INT 34
22671: PUSH
22672: LD_INT 36
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 101
22710: PUSH
22711: LD_INT 102
22713: PUSH
22714: LD_INT 103
22716: PUSH
22717: LD_INT 104
22719: PUSH
22720: LD_INT 105
22722: PUSH
22723: LD_INT 106
22725: PUSH
22726: LD_INT 107
22728: PUSH
22729: LD_INT 108
22731: PUSH
22732: LD_INT 109
22734: PUSH
22735: LD_INT 110
22737: PUSH
22738: LD_INT 111
22740: PUSH
22741: LD_INT 112
22743: PUSH
22744: LD_INT 114
22746: PUSH
22747: LD_INT 116
22749: PUSH
22750: LD_INT 117
22752: PUSH
22753: LD_INT 118
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: ST_TO_ADDR
22778: GO 24461
22780: LD_INT 12
22782: DOUBLE
22783: EQUAL
22784: IFTRUE 22788
22786: GO 23008
22788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22789: LD_ADDR_VAR 0 2
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: LD_INT 4
22805: PUSH
22806: LD_INT 5
22808: PUSH
22809: LD_INT 6
22811: PUSH
22812: LD_INT 7
22814: PUSH
22815: LD_INT 8
22817: PUSH
22818: LD_INT 9
22820: PUSH
22821: LD_INT 10
22823: PUSH
22824: LD_INT 11
22826: PUSH
22827: LD_INT 12
22829: PUSH
22830: LD_INT 13
22832: PUSH
22833: LD_INT 14
22835: PUSH
22836: LD_INT 15
22838: PUSH
22839: LD_INT 16
22841: PUSH
22842: LD_INT 17
22844: PUSH
22845: LD_INT 18
22847: PUSH
22848: LD_INT 19
22850: PUSH
22851: LD_INT 20
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_INT 23
22862: PUSH
22863: LD_INT 24
22865: PUSH
22866: LD_INT 25
22868: PUSH
22869: LD_INT 26
22871: PUSH
22872: LD_INT 27
22874: PUSH
22875: LD_INT 28
22877: PUSH
22878: LD_INT 30
22880: PUSH
22881: LD_INT 31
22883: PUSH
22884: LD_INT 32
22886: PUSH
22887: LD_INT 33
22889: PUSH
22890: LD_INT 34
22892: PUSH
22893: LD_INT 36
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 101
22934: PUSH
22935: LD_INT 102
22937: PUSH
22938: LD_INT 103
22940: PUSH
22941: LD_INT 104
22943: PUSH
22944: LD_INT 105
22946: PUSH
22947: LD_INT 106
22949: PUSH
22950: LD_INT 107
22952: PUSH
22953: LD_INT 108
22955: PUSH
22956: LD_INT 109
22958: PUSH
22959: LD_INT 110
22961: PUSH
22962: LD_INT 111
22964: PUSH
22965: LD_INT 112
22967: PUSH
22968: LD_INT 113
22970: PUSH
22971: LD_INT 114
22973: PUSH
22974: LD_INT 116
22976: PUSH
22977: LD_INT 117
22979: PUSH
22980: LD_INT 118
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: ST_TO_ADDR
23006: GO 24461
23008: LD_INT 13
23010: DOUBLE
23011: EQUAL
23012: IFTRUE 23016
23014: GO 23224
23016: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: LD_INT 1
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: LD_INT 4
23033: PUSH
23034: LD_INT 5
23036: PUSH
23037: LD_INT 8
23039: PUSH
23040: LD_INT 9
23042: PUSH
23043: LD_INT 10
23045: PUSH
23046: LD_INT 11
23048: PUSH
23049: LD_INT 12
23051: PUSH
23052: LD_INT 14
23054: PUSH
23055: LD_INT 15
23057: PUSH
23058: LD_INT 16
23060: PUSH
23061: LD_INT 17
23063: PUSH
23064: LD_INT 18
23066: PUSH
23067: LD_INT 19
23069: PUSH
23070: LD_INT 20
23072: PUSH
23073: LD_INT 21
23075: PUSH
23076: LD_INT 22
23078: PUSH
23079: LD_INT 23
23081: PUSH
23082: LD_INT 24
23084: PUSH
23085: LD_INT 25
23087: PUSH
23088: LD_INT 26
23090: PUSH
23091: LD_INT 27
23093: PUSH
23094: LD_INT 28
23096: PUSH
23097: LD_INT 30
23099: PUSH
23100: LD_INT 31
23102: PUSH
23103: LD_INT 32
23105: PUSH
23106: LD_INT 33
23108: PUSH
23109: LD_INT 34
23111: PUSH
23112: LD_INT 36
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 101
23150: PUSH
23151: LD_INT 102
23153: PUSH
23154: LD_INT 103
23156: PUSH
23157: LD_INT 104
23159: PUSH
23160: LD_INT 105
23162: PUSH
23163: LD_INT 106
23165: PUSH
23166: LD_INT 107
23168: PUSH
23169: LD_INT 108
23171: PUSH
23172: LD_INT 109
23174: PUSH
23175: LD_INT 110
23177: PUSH
23178: LD_INT 111
23180: PUSH
23181: LD_INT 112
23183: PUSH
23184: LD_INT 113
23186: PUSH
23187: LD_INT 114
23189: PUSH
23190: LD_INT 116
23192: PUSH
23193: LD_INT 117
23195: PUSH
23196: LD_INT 118
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: ST_TO_ADDR
23222: GO 24461
23224: LD_INT 14
23226: DOUBLE
23227: EQUAL
23228: IFTRUE 23232
23230: GO 23456
23232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23233: LD_ADDR_VAR 0 2
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: LD_INT 4
23249: PUSH
23250: LD_INT 5
23252: PUSH
23253: LD_INT 6
23255: PUSH
23256: LD_INT 7
23258: PUSH
23259: LD_INT 8
23261: PUSH
23262: LD_INT 9
23264: PUSH
23265: LD_INT 10
23267: PUSH
23268: LD_INT 11
23270: PUSH
23271: LD_INT 12
23273: PUSH
23274: LD_INT 13
23276: PUSH
23277: LD_INT 14
23279: PUSH
23280: LD_INT 15
23282: PUSH
23283: LD_INT 16
23285: PUSH
23286: LD_INT 17
23288: PUSH
23289: LD_INT 18
23291: PUSH
23292: LD_INT 19
23294: PUSH
23295: LD_INT 20
23297: PUSH
23298: LD_INT 21
23300: PUSH
23301: LD_INT 22
23303: PUSH
23304: LD_INT 23
23306: PUSH
23307: LD_INT 24
23309: PUSH
23310: LD_INT 25
23312: PUSH
23313: LD_INT 26
23315: PUSH
23316: LD_INT 27
23318: PUSH
23319: LD_INT 28
23321: PUSH
23322: LD_INT 29
23324: PUSH
23325: LD_INT 30
23327: PUSH
23328: LD_INT 31
23330: PUSH
23331: LD_INT 32
23333: PUSH
23334: LD_INT 33
23336: PUSH
23337: LD_INT 34
23339: PUSH
23340: LD_INT 36
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 101
23382: PUSH
23383: LD_INT 102
23385: PUSH
23386: LD_INT 103
23388: PUSH
23389: LD_INT 104
23391: PUSH
23392: LD_INT 105
23394: PUSH
23395: LD_INT 106
23397: PUSH
23398: LD_INT 107
23400: PUSH
23401: LD_INT 108
23403: PUSH
23404: LD_INT 109
23406: PUSH
23407: LD_INT 110
23409: PUSH
23410: LD_INT 111
23412: PUSH
23413: LD_INT 112
23415: PUSH
23416: LD_INT 113
23418: PUSH
23419: LD_INT 114
23421: PUSH
23422: LD_INT 116
23424: PUSH
23425: LD_INT 117
23427: PUSH
23428: LD_INT 118
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: ST_TO_ADDR
23454: GO 24461
23456: LD_INT 15
23458: DOUBLE
23459: EQUAL
23460: IFTRUE 23464
23462: GO 23688
23464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 4
23481: PUSH
23482: LD_INT 5
23484: PUSH
23485: LD_INT 6
23487: PUSH
23488: LD_INT 7
23490: PUSH
23491: LD_INT 8
23493: PUSH
23494: LD_INT 9
23496: PUSH
23497: LD_INT 10
23499: PUSH
23500: LD_INT 11
23502: PUSH
23503: LD_INT 12
23505: PUSH
23506: LD_INT 13
23508: PUSH
23509: LD_INT 14
23511: PUSH
23512: LD_INT 15
23514: PUSH
23515: LD_INT 16
23517: PUSH
23518: LD_INT 17
23520: PUSH
23521: LD_INT 18
23523: PUSH
23524: LD_INT 19
23526: PUSH
23527: LD_INT 20
23529: PUSH
23530: LD_INT 21
23532: PUSH
23533: LD_INT 22
23535: PUSH
23536: LD_INT 23
23538: PUSH
23539: LD_INT 24
23541: PUSH
23542: LD_INT 25
23544: PUSH
23545: LD_INT 26
23547: PUSH
23548: LD_INT 27
23550: PUSH
23551: LD_INT 28
23553: PUSH
23554: LD_INT 29
23556: PUSH
23557: LD_INT 30
23559: PUSH
23560: LD_INT 31
23562: PUSH
23563: LD_INT 32
23565: PUSH
23566: LD_INT 33
23568: PUSH
23569: LD_INT 34
23571: PUSH
23572: LD_INT 36
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 101
23614: PUSH
23615: LD_INT 102
23617: PUSH
23618: LD_INT 103
23620: PUSH
23621: LD_INT 104
23623: PUSH
23624: LD_INT 105
23626: PUSH
23627: LD_INT 106
23629: PUSH
23630: LD_INT 107
23632: PUSH
23633: LD_INT 108
23635: PUSH
23636: LD_INT 109
23638: PUSH
23639: LD_INT 110
23641: PUSH
23642: LD_INT 111
23644: PUSH
23645: LD_INT 112
23647: PUSH
23648: LD_INT 113
23650: PUSH
23651: LD_INT 114
23653: PUSH
23654: LD_INT 116
23656: PUSH
23657: LD_INT 117
23659: PUSH
23660: LD_INT 118
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: ST_TO_ADDR
23686: GO 24461
23688: LD_INT 16
23690: DOUBLE
23691: EQUAL
23692: IFTRUE 23696
23694: GO 23832
23696: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23697: LD_ADDR_VAR 0 2
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: LD_INT 4
23707: PUSH
23708: LD_INT 5
23710: PUSH
23711: LD_INT 7
23713: PUSH
23714: LD_INT 11
23716: PUSH
23717: LD_INT 12
23719: PUSH
23720: LD_INT 15
23722: PUSH
23723: LD_INT 16
23725: PUSH
23726: LD_INT 20
23728: PUSH
23729: LD_INT 21
23731: PUSH
23732: LD_INT 22
23734: PUSH
23735: LD_INT 23
23737: PUSH
23738: LD_INT 25
23740: PUSH
23741: LD_INT 26
23743: PUSH
23744: LD_INT 30
23746: PUSH
23747: LD_INT 31
23749: PUSH
23750: LD_INT 32
23752: PUSH
23753: LD_INT 33
23755: PUSH
23756: LD_INT 34
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 101
23782: PUSH
23783: LD_INT 102
23785: PUSH
23786: LD_INT 103
23788: PUSH
23789: LD_INT 106
23791: PUSH
23792: LD_INT 108
23794: PUSH
23795: LD_INT 112
23797: PUSH
23798: LD_INT 113
23800: PUSH
23801: LD_INT 114
23803: PUSH
23804: LD_INT 116
23806: PUSH
23807: LD_INT 117
23809: PUSH
23810: LD_INT 118
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: ST_TO_ADDR
23830: GO 24461
23832: LD_INT 17
23834: DOUBLE
23835: EQUAL
23836: IFTRUE 23840
23838: GO 24064
23840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: LD_INT 4
23857: PUSH
23858: LD_INT 5
23860: PUSH
23861: LD_INT 6
23863: PUSH
23864: LD_INT 7
23866: PUSH
23867: LD_INT 8
23869: PUSH
23870: LD_INT 9
23872: PUSH
23873: LD_INT 10
23875: PUSH
23876: LD_INT 11
23878: PUSH
23879: LD_INT 12
23881: PUSH
23882: LD_INT 13
23884: PUSH
23885: LD_INT 14
23887: PUSH
23888: LD_INT 15
23890: PUSH
23891: LD_INT 16
23893: PUSH
23894: LD_INT 17
23896: PUSH
23897: LD_INT 18
23899: PUSH
23900: LD_INT 19
23902: PUSH
23903: LD_INT 20
23905: PUSH
23906: LD_INT 21
23908: PUSH
23909: LD_INT 22
23911: PUSH
23912: LD_INT 23
23914: PUSH
23915: LD_INT 24
23917: PUSH
23918: LD_INT 25
23920: PUSH
23921: LD_INT 26
23923: PUSH
23924: LD_INT 27
23926: PUSH
23927: LD_INT 28
23929: PUSH
23930: LD_INT 29
23932: PUSH
23933: LD_INT 30
23935: PUSH
23936: LD_INT 31
23938: PUSH
23939: LD_INT 32
23941: PUSH
23942: LD_INT 33
23944: PUSH
23945: LD_INT 34
23947: PUSH
23948: LD_INT 36
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 101
23990: PUSH
23991: LD_INT 102
23993: PUSH
23994: LD_INT 103
23996: PUSH
23997: LD_INT 104
23999: PUSH
24000: LD_INT 105
24002: PUSH
24003: LD_INT 106
24005: PUSH
24006: LD_INT 107
24008: PUSH
24009: LD_INT 108
24011: PUSH
24012: LD_INT 109
24014: PUSH
24015: LD_INT 110
24017: PUSH
24018: LD_INT 111
24020: PUSH
24021: LD_INT 112
24023: PUSH
24024: LD_INT 113
24026: PUSH
24027: LD_INT 114
24029: PUSH
24030: LD_INT 116
24032: PUSH
24033: LD_INT 117
24035: PUSH
24036: LD_INT 118
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: ST_TO_ADDR
24062: GO 24461
24064: LD_INT 18
24066: DOUBLE
24067: EQUAL
24068: IFTRUE 24072
24070: GO 24220
24072: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24073: LD_ADDR_VAR 0 2
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: LD_INT 4
24083: PUSH
24084: LD_INT 5
24086: PUSH
24087: LD_INT 7
24089: PUSH
24090: LD_INT 11
24092: PUSH
24093: LD_INT 12
24095: PUSH
24096: LD_INT 15
24098: PUSH
24099: LD_INT 16
24101: PUSH
24102: LD_INT 20
24104: PUSH
24105: LD_INT 21
24107: PUSH
24108: LD_INT 22
24110: PUSH
24111: LD_INT 23
24113: PUSH
24114: LD_INT 25
24116: PUSH
24117: LD_INT 26
24119: PUSH
24120: LD_INT 30
24122: PUSH
24123: LD_INT 31
24125: PUSH
24126: LD_INT 32
24128: PUSH
24129: LD_INT 33
24131: PUSH
24132: LD_INT 34
24134: PUSH
24135: LD_INT 35
24137: PUSH
24138: LD_INT 36
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 101
24166: PUSH
24167: LD_INT 102
24169: PUSH
24170: LD_INT 103
24172: PUSH
24173: LD_INT 106
24175: PUSH
24176: LD_INT 108
24178: PUSH
24179: LD_INT 112
24181: PUSH
24182: LD_INT 113
24184: PUSH
24185: LD_INT 114
24187: PUSH
24188: LD_INT 115
24190: PUSH
24191: LD_INT 116
24193: PUSH
24194: LD_INT 117
24196: PUSH
24197: LD_INT 118
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: ST_TO_ADDR
24218: GO 24461
24220: LD_INT 19
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24460
24228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24229: LD_ADDR_VAR 0 2
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: LD_INT 2
24239: PUSH
24240: LD_INT 3
24242: PUSH
24243: LD_INT 4
24245: PUSH
24246: LD_INT 5
24248: PUSH
24249: LD_INT 6
24251: PUSH
24252: LD_INT 7
24254: PUSH
24255: LD_INT 8
24257: PUSH
24258: LD_INT 9
24260: PUSH
24261: LD_INT 10
24263: PUSH
24264: LD_INT 11
24266: PUSH
24267: LD_INT 12
24269: PUSH
24270: LD_INT 13
24272: PUSH
24273: LD_INT 14
24275: PUSH
24276: LD_INT 15
24278: PUSH
24279: LD_INT 16
24281: PUSH
24282: LD_INT 17
24284: PUSH
24285: LD_INT 18
24287: PUSH
24288: LD_INT 19
24290: PUSH
24291: LD_INT 20
24293: PUSH
24294: LD_INT 21
24296: PUSH
24297: LD_INT 22
24299: PUSH
24300: LD_INT 23
24302: PUSH
24303: LD_INT 24
24305: PUSH
24306: LD_INT 25
24308: PUSH
24309: LD_INT 26
24311: PUSH
24312: LD_INT 27
24314: PUSH
24315: LD_INT 28
24317: PUSH
24318: LD_INT 29
24320: PUSH
24321: LD_INT 30
24323: PUSH
24324: LD_INT 31
24326: PUSH
24327: LD_INT 32
24329: PUSH
24330: LD_INT 33
24332: PUSH
24333: LD_INT 34
24335: PUSH
24336: LD_INT 35
24338: PUSH
24339: LD_INT 36
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 101
24382: PUSH
24383: LD_INT 102
24385: PUSH
24386: LD_INT 103
24388: PUSH
24389: LD_INT 104
24391: PUSH
24392: LD_INT 105
24394: PUSH
24395: LD_INT 106
24397: PUSH
24398: LD_INT 107
24400: PUSH
24401: LD_INT 108
24403: PUSH
24404: LD_INT 109
24406: PUSH
24407: LD_INT 110
24409: PUSH
24410: LD_INT 111
24412: PUSH
24413: LD_INT 112
24415: PUSH
24416: LD_INT 113
24418: PUSH
24419: LD_INT 114
24421: PUSH
24422: LD_INT 115
24424: PUSH
24425: LD_INT 116
24427: PUSH
24428: LD_INT 117
24430: PUSH
24431: LD_INT 118
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: ST_TO_ADDR
24458: GO 24461
24460: POP
// end else
24461: GO 24692
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24463: LD_ADDR_VAR 0 2
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: LD_INT 3
24476: PUSH
24477: LD_INT 4
24479: PUSH
24480: LD_INT 5
24482: PUSH
24483: LD_INT 6
24485: PUSH
24486: LD_INT 7
24488: PUSH
24489: LD_INT 8
24491: PUSH
24492: LD_INT 9
24494: PUSH
24495: LD_INT 10
24497: PUSH
24498: LD_INT 11
24500: PUSH
24501: LD_INT 12
24503: PUSH
24504: LD_INT 13
24506: PUSH
24507: LD_INT 14
24509: PUSH
24510: LD_INT 15
24512: PUSH
24513: LD_INT 16
24515: PUSH
24516: LD_INT 17
24518: PUSH
24519: LD_INT 18
24521: PUSH
24522: LD_INT 19
24524: PUSH
24525: LD_INT 20
24527: PUSH
24528: LD_INT 21
24530: PUSH
24531: LD_INT 22
24533: PUSH
24534: LD_INT 23
24536: PUSH
24537: LD_INT 24
24539: PUSH
24540: LD_INT 25
24542: PUSH
24543: LD_INT 26
24545: PUSH
24546: LD_INT 27
24548: PUSH
24549: LD_INT 28
24551: PUSH
24552: LD_INT 29
24554: PUSH
24555: LD_INT 30
24557: PUSH
24558: LD_INT 31
24560: PUSH
24561: LD_INT 32
24563: PUSH
24564: LD_INT 33
24566: PUSH
24567: LD_INT 34
24569: PUSH
24570: LD_INT 35
24572: PUSH
24573: LD_INT 36
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 101
24616: PUSH
24617: LD_INT 102
24619: PUSH
24620: LD_INT 103
24622: PUSH
24623: LD_INT 104
24625: PUSH
24626: LD_INT 105
24628: PUSH
24629: LD_INT 106
24631: PUSH
24632: LD_INT 107
24634: PUSH
24635: LD_INT 108
24637: PUSH
24638: LD_INT 109
24640: PUSH
24641: LD_INT 110
24643: PUSH
24644: LD_INT 111
24646: PUSH
24647: LD_INT 112
24649: PUSH
24650: LD_INT 113
24652: PUSH
24653: LD_INT 114
24655: PUSH
24656: LD_INT 115
24658: PUSH
24659: LD_INT 116
24661: PUSH
24662: LD_INT 117
24664: PUSH
24665: LD_INT 118
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: ST_TO_ADDR
// if result then
24692: LD_VAR 0 2
24696: IFFALSE 25482
// begin normal :=  ;
24698: LD_ADDR_VAR 0 5
24702: PUSH
24703: LD_STRING 
24705: ST_TO_ADDR
// hardcore :=  ;
24706: LD_ADDR_VAR 0 6
24710: PUSH
24711: LD_STRING 
24713: ST_TO_ADDR
// active :=  ;
24714: LD_ADDR_VAR 0 7
24718: PUSH
24719: LD_STRING 
24721: ST_TO_ADDR
// for i = 1 to normalCounter do
24722: LD_ADDR_VAR 0 8
24726: PUSH
24727: DOUBLE
24728: LD_INT 1
24730: DEC
24731: ST_TO_ADDR
24732: LD_EXP 68
24736: PUSH
24737: FOR_TO
24738: IFFALSE 24839
// begin tmp := 0 ;
24740: LD_ADDR_VAR 0 3
24744: PUSH
24745: LD_STRING 0
24747: ST_TO_ADDR
// if result [ 1 ] then
24748: LD_VAR 0 2
24752: PUSH
24753: LD_INT 1
24755: ARRAY
24756: IFFALSE 24821
// if result [ 1 ] [ 1 ] = i then
24758: LD_VAR 0 2
24762: PUSH
24763: LD_INT 1
24765: ARRAY
24766: PUSH
24767: LD_INT 1
24769: ARRAY
24770: PUSH
24771: LD_VAR 0 8
24775: EQUAL
24776: IFFALSE 24821
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24778: LD_ADDR_VAR 0 2
24782: PUSH
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_INT 1
24790: PPUSH
24791: LD_VAR 0 2
24795: PUSH
24796: LD_INT 1
24798: ARRAY
24799: PPUSH
24800: LD_INT 1
24802: PPUSH
24803: CALL_OW 3
24807: PPUSH
24808: CALL_OW 1
24812: ST_TO_ADDR
// tmp := 1 ;
24813: LD_ADDR_VAR 0 3
24817: PUSH
24818: LD_STRING 1
24820: ST_TO_ADDR
// end ; normal := normal & tmp ;
24821: LD_ADDR_VAR 0 5
24825: PUSH
24826: LD_VAR 0 5
24830: PUSH
24831: LD_VAR 0 3
24835: STR
24836: ST_TO_ADDR
// end ;
24837: GO 24737
24839: POP
24840: POP
// for i = 1 to hardcoreCounter do
24841: LD_ADDR_VAR 0 8
24845: PUSH
24846: DOUBLE
24847: LD_INT 1
24849: DEC
24850: ST_TO_ADDR
24851: LD_EXP 69
24855: PUSH
24856: FOR_TO
24857: IFFALSE 24962
// begin tmp := 0 ;
24859: LD_ADDR_VAR 0 3
24863: PUSH
24864: LD_STRING 0
24866: ST_TO_ADDR
// if result [ 2 ] then
24867: LD_VAR 0 2
24871: PUSH
24872: LD_INT 2
24874: ARRAY
24875: IFFALSE 24944
// if result [ 2 ] [ 1 ] = 100 + i then
24877: LD_VAR 0 2
24881: PUSH
24882: LD_INT 2
24884: ARRAY
24885: PUSH
24886: LD_INT 1
24888: ARRAY
24889: PUSH
24890: LD_INT 100
24892: PUSH
24893: LD_VAR 0 8
24897: PLUS
24898: EQUAL
24899: IFFALSE 24944
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24901: LD_ADDR_VAR 0 2
24905: PUSH
24906: LD_VAR 0 2
24910: PPUSH
24911: LD_INT 2
24913: PPUSH
24914: LD_VAR 0 2
24918: PUSH
24919: LD_INT 2
24921: ARRAY
24922: PPUSH
24923: LD_INT 1
24925: PPUSH
24926: CALL_OW 3
24930: PPUSH
24931: CALL_OW 1
24935: ST_TO_ADDR
// tmp := 1 ;
24936: LD_ADDR_VAR 0 3
24940: PUSH
24941: LD_STRING 1
24943: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24944: LD_ADDR_VAR 0 6
24948: PUSH
24949: LD_VAR 0 6
24953: PUSH
24954: LD_VAR 0 3
24958: STR
24959: ST_TO_ADDR
// end ;
24960: GO 24856
24962: POP
24963: POP
// if isGameLoad then
24964: LD_VAR 0 1
24968: IFFALSE 25443
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24970: LD_ADDR_VAR 0 4
24974: PUSH
24975: LD_EXP 72
24979: PUSH
24980: LD_EXP 71
24984: PUSH
24985: LD_EXP 73
24989: PUSH
24990: LD_EXP 70
24994: PUSH
24995: LD_EXP 74
24999: PUSH
25000: LD_EXP 75
25004: PUSH
25005: LD_EXP 76
25009: PUSH
25010: LD_EXP 77
25014: PUSH
25015: LD_EXP 78
25019: PUSH
25020: LD_EXP 79
25024: PUSH
25025: LD_EXP 80
25029: PUSH
25030: LD_EXP 81
25034: PUSH
25035: LD_EXP 82
25039: PUSH
25040: LD_EXP 83
25044: PUSH
25045: LD_EXP 91
25049: PUSH
25050: LD_EXP 92
25054: PUSH
25055: LD_EXP 93
25059: PUSH
25060: LD_EXP 94
25064: PUSH
25065: LD_EXP 96
25069: PUSH
25070: LD_EXP 97
25074: PUSH
25075: LD_EXP 98
25079: PUSH
25080: LD_EXP 101
25084: PUSH
25085: LD_EXP 103
25089: PUSH
25090: LD_EXP 104
25094: PUSH
25095: LD_EXP 105
25099: PUSH
25100: LD_EXP 107
25104: PUSH
25105: LD_EXP 108
25109: PUSH
25110: LD_EXP 111
25114: PUSH
25115: LD_EXP 112
25119: PUSH
25120: LD_EXP 113
25124: PUSH
25125: LD_EXP 114
25129: PUSH
25130: LD_EXP 115
25134: PUSH
25135: LD_EXP 116
25139: PUSH
25140: LD_EXP 117
25144: PUSH
25145: LD_EXP 118
25149: PUSH
25150: LD_EXP 119
25154: PUSH
25155: LD_EXP 84
25159: PUSH
25160: LD_EXP 85
25164: PUSH
25165: LD_EXP 88
25169: PUSH
25170: LD_EXP 89
25174: PUSH
25175: LD_EXP 90
25179: PUSH
25180: LD_EXP 86
25184: PUSH
25185: LD_EXP 87
25189: PUSH
25190: LD_EXP 95
25194: PUSH
25195: LD_EXP 99
25199: PUSH
25200: LD_EXP 100
25204: PUSH
25205: LD_EXP 102
25209: PUSH
25210: LD_EXP 106
25214: PUSH
25215: LD_EXP 109
25219: PUSH
25220: LD_EXP 110
25224: PUSH
25225: LD_EXP 120
25229: PUSH
25230: LD_EXP 121
25234: PUSH
25235: LD_EXP 122
25239: PUSH
25240: LD_EXP 123
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: ST_TO_ADDR
// tmp :=  ;
25301: LD_ADDR_VAR 0 3
25305: PUSH
25306: LD_STRING 
25308: ST_TO_ADDR
// for i = 1 to normalCounter do
25309: LD_ADDR_VAR 0 8
25313: PUSH
25314: DOUBLE
25315: LD_INT 1
25317: DEC
25318: ST_TO_ADDR
25319: LD_EXP 68
25323: PUSH
25324: FOR_TO
25325: IFFALSE 25361
// begin if flags [ i ] then
25327: LD_VAR 0 4
25331: PUSH
25332: LD_VAR 0 8
25336: ARRAY
25337: IFFALSE 25359
// tmp := tmp & i & ; ;
25339: LD_ADDR_VAR 0 3
25343: PUSH
25344: LD_VAR 0 3
25348: PUSH
25349: LD_VAR 0 8
25353: STR
25354: PUSH
25355: LD_STRING ;
25357: STR
25358: ST_TO_ADDR
// end ;
25359: GO 25324
25361: POP
25362: POP
// for i = 1 to hardcoreCounter do
25363: LD_ADDR_VAR 0 8
25367: PUSH
25368: DOUBLE
25369: LD_INT 1
25371: DEC
25372: ST_TO_ADDR
25373: LD_EXP 69
25377: PUSH
25378: FOR_TO
25379: IFFALSE 25425
// begin if flags [ normalCounter + i ] then
25381: LD_VAR 0 4
25385: PUSH
25386: LD_EXP 68
25390: PUSH
25391: LD_VAR 0 8
25395: PLUS
25396: ARRAY
25397: IFFALSE 25423
// tmp := tmp & ( 100 + i ) & ; ;
25399: LD_ADDR_VAR 0 3
25403: PUSH
25404: LD_VAR 0 3
25408: PUSH
25409: LD_INT 100
25411: PUSH
25412: LD_VAR 0 8
25416: PLUS
25417: STR
25418: PUSH
25419: LD_STRING ;
25421: STR
25422: ST_TO_ADDR
// end ;
25423: GO 25378
25425: POP
25426: POP
// if tmp then
25427: LD_VAR 0 3
25431: IFFALSE 25443
// active := tmp ;
25433: LD_ADDR_VAR 0 7
25437: PUSH
25438: LD_VAR 0 3
25442: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25443: LD_STRING getStreamItemsFromMission("
25445: PUSH
25446: LD_VAR 0 5
25450: STR
25451: PUSH
25452: LD_STRING ","
25454: STR
25455: PUSH
25456: LD_VAR 0 6
25460: STR
25461: PUSH
25462: LD_STRING ","
25464: STR
25465: PUSH
25466: LD_VAR 0 7
25470: STR
25471: PUSH
25472: LD_STRING ")
25474: STR
25475: PPUSH
25476: CALL_OW 559
// end else
25480: GO 25489
// ToLua ( getStreamItemsFromMission("","","") ) ;
25482: LD_STRING getStreamItemsFromMission("","","")
25484: PPUSH
25485: CALL_OW 559
// end ;
25489: LD_VAR 0 2
25493: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25494: LD_EXP 67
25498: PUSH
25499: LD_EXP 72
25503: AND
25504: IFFALSE 25628
25506: GO 25508
25508: DISABLE
25509: LD_INT 0
25511: PPUSH
25512: PPUSH
// begin enable ;
25513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25514: LD_ADDR_VAR 0 2
25518: PUSH
25519: LD_INT 22
25521: PUSH
25522: LD_OWVAR 2
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: LD_INT 34
25536: PUSH
25537: LD_INT 7
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 34
25546: PUSH
25547: LD_INT 45
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 34
25556: PUSH
25557: LD_INT 28
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 34
25566: PUSH
25567: LD_INT 47
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PPUSH
25585: CALL_OW 69
25589: ST_TO_ADDR
// if not tmp then
25590: LD_VAR 0 2
25594: NOT
25595: IFFALSE 25599
// exit ;
25597: GO 25628
// for i in tmp do
25599: LD_ADDR_VAR 0 1
25603: PUSH
25604: LD_VAR 0 2
25608: PUSH
25609: FOR_IN
25610: IFFALSE 25626
// begin SetLives ( i , 0 ) ;
25612: LD_VAR 0 1
25616: PPUSH
25617: LD_INT 0
25619: PPUSH
25620: CALL_OW 234
// end ;
25624: GO 25609
25626: POP
25627: POP
// end ;
25628: PPOPN 2
25630: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25631: LD_EXP 67
25635: PUSH
25636: LD_EXP 73
25640: AND
25641: IFFALSE 25725
25643: GO 25645
25645: DISABLE
25646: LD_INT 0
25648: PPUSH
25649: PPUSH
// begin enable ;
25650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25651: LD_ADDR_VAR 0 2
25655: PUSH
25656: LD_INT 22
25658: PUSH
25659: LD_OWVAR 2
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 32
25670: PUSH
25671: LD_INT 3
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PPUSH
25682: CALL_OW 69
25686: ST_TO_ADDR
// if not tmp then
25687: LD_VAR 0 2
25691: NOT
25692: IFFALSE 25696
// exit ;
25694: GO 25725
// for i in tmp do
25696: LD_ADDR_VAR 0 1
25700: PUSH
25701: LD_VAR 0 2
25705: PUSH
25706: FOR_IN
25707: IFFALSE 25723
// begin SetLives ( i , 0 ) ;
25709: LD_VAR 0 1
25713: PPUSH
25714: LD_INT 0
25716: PPUSH
25717: CALL_OW 234
// end ;
25721: GO 25706
25723: POP
25724: POP
// end ;
25725: PPOPN 2
25727: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25728: LD_EXP 67
25732: PUSH
25733: LD_EXP 70
25737: AND
25738: IFFALSE 25831
25740: GO 25742
25742: DISABLE
25743: LD_INT 0
25745: PPUSH
// begin enable ;
25746: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: LD_INT 22
25754: PUSH
25755: LD_OWVAR 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: LD_INT 25
25769: PUSH
25770: LD_INT 5
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 25
25779: PUSH
25780: LD_INT 9
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 25
25789: PUSH
25790: LD_INT 8
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: CALL_OW 69
25811: PUSH
25812: FOR_IN
25813: IFFALSE 25829
// begin SetClass ( i , 1 ) ;
25815: LD_VAR 0 1
25819: PPUSH
25820: LD_INT 1
25822: PPUSH
25823: CALL_OW 336
// end ;
25827: GO 25812
25829: POP
25830: POP
// end ;
25831: PPOPN 1
25833: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25834: LD_EXP 67
25838: PUSH
25839: LD_EXP 71
25843: AND
25844: PUSH
25845: LD_OWVAR 65
25849: PUSH
25850: LD_INT 7
25852: LESS
25853: AND
25854: IFFALSE 25868
25856: GO 25858
25858: DISABLE
// begin enable ;
25859: ENABLE
// game_speed := 7 ;
25860: LD_ADDR_OWVAR 65
25864: PUSH
25865: LD_INT 7
25867: ST_TO_ADDR
// end ;
25868: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25869: LD_EXP 67
25873: PUSH
25874: LD_EXP 74
25878: AND
25879: IFFALSE 26081
25881: GO 25883
25883: DISABLE
25884: LD_INT 0
25886: PPUSH
25887: PPUSH
25888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25889: LD_ADDR_VAR 0 3
25893: PUSH
25894: LD_INT 81
25896: PUSH
25897: LD_OWVAR 2
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 21
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PPUSH
25920: CALL_OW 69
25924: ST_TO_ADDR
// if not tmp then
25925: LD_VAR 0 3
25929: NOT
25930: IFFALSE 25934
// exit ;
25932: GO 26081
// if tmp > 5 then
25934: LD_VAR 0 3
25938: PUSH
25939: LD_INT 5
25941: GREATER
25942: IFFALSE 25954
// k := 5 else
25944: LD_ADDR_VAR 0 2
25948: PUSH
25949: LD_INT 5
25951: ST_TO_ADDR
25952: GO 25964
// k := tmp ;
25954: LD_ADDR_VAR 0 2
25958: PUSH
25959: LD_VAR 0 3
25963: ST_TO_ADDR
// for i := 1 to k do
25964: LD_ADDR_VAR 0 1
25968: PUSH
25969: DOUBLE
25970: LD_INT 1
25972: DEC
25973: ST_TO_ADDR
25974: LD_VAR 0 2
25978: PUSH
25979: FOR_TO
25980: IFFALSE 26079
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25982: LD_VAR 0 3
25986: PUSH
25987: LD_VAR 0 1
25991: ARRAY
25992: PPUSH
25993: LD_VAR 0 1
25997: PUSH
25998: LD_INT 4
26000: MOD
26001: PUSH
26002: LD_INT 1
26004: PLUS
26005: PPUSH
26006: CALL_OW 259
26010: PUSH
26011: LD_INT 10
26013: LESS
26014: IFFALSE 26077
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26016: LD_VAR 0 3
26020: PUSH
26021: LD_VAR 0 1
26025: ARRAY
26026: PPUSH
26027: LD_VAR 0 1
26031: PUSH
26032: LD_INT 4
26034: MOD
26035: PUSH
26036: LD_INT 1
26038: PLUS
26039: PPUSH
26040: LD_VAR 0 3
26044: PUSH
26045: LD_VAR 0 1
26049: ARRAY
26050: PPUSH
26051: LD_VAR 0 1
26055: PUSH
26056: LD_INT 4
26058: MOD
26059: PUSH
26060: LD_INT 1
26062: PLUS
26063: PPUSH
26064: CALL_OW 259
26068: PUSH
26069: LD_INT 1
26071: PLUS
26072: PPUSH
26073: CALL_OW 237
26077: GO 25979
26079: POP
26080: POP
// end ;
26081: PPOPN 3
26083: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26084: LD_EXP 67
26088: PUSH
26089: LD_EXP 75
26093: AND
26094: IFFALSE 26114
26096: GO 26098
26098: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26099: LD_INT 4
26101: PPUSH
26102: LD_OWVAR 2
26106: PPUSH
26107: LD_INT 0
26109: PPUSH
26110: CALL_OW 324
26114: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26115: LD_EXP 67
26119: PUSH
26120: LD_EXP 104
26124: AND
26125: IFFALSE 26145
26127: GO 26129
26129: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26130: LD_INT 19
26132: PPUSH
26133: LD_OWVAR 2
26137: PPUSH
26138: LD_INT 0
26140: PPUSH
26141: CALL_OW 324
26145: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26146: LD_EXP 67
26150: PUSH
26151: LD_EXP 76
26155: AND
26156: IFFALSE 26258
26158: GO 26160
26160: DISABLE
26161: LD_INT 0
26163: PPUSH
26164: PPUSH
// begin enable ;
26165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26166: LD_ADDR_VAR 0 2
26170: PUSH
26171: LD_INT 22
26173: PUSH
26174: LD_OWVAR 2
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: PUSH
26186: LD_INT 34
26188: PUSH
26189: LD_INT 11
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 34
26198: PUSH
26199: LD_INT 30
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PPUSH
26215: CALL_OW 69
26219: ST_TO_ADDR
// if not tmp then
26220: LD_VAR 0 2
26224: NOT
26225: IFFALSE 26229
// exit ;
26227: GO 26258
// for i in tmp do
26229: LD_ADDR_VAR 0 1
26233: PUSH
26234: LD_VAR 0 2
26238: PUSH
26239: FOR_IN
26240: IFFALSE 26256
// begin SetLives ( i , 0 ) ;
26242: LD_VAR 0 1
26246: PPUSH
26247: LD_INT 0
26249: PPUSH
26250: CALL_OW 234
// end ;
26254: GO 26239
26256: POP
26257: POP
// end ;
26258: PPOPN 2
26260: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26261: LD_EXP 67
26265: PUSH
26266: LD_EXP 77
26270: AND
26271: IFFALSE 26291
26273: GO 26275
26275: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26276: LD_INT 32
26278: PPUSH
26279: LD_OWVAR 2
26283: PPUSH
26284: LD_INT 0
26286: PPUSH
26287: CALL_OW 324
26291: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26292: LD_EXP 67
26296: PUSH
26297: LD_EXP 78
26301: AND
26302: IFFALSE 26483
26304: GO 26306
26306: DISABLE
26307: LD_INT 0
26309: PPUSH
26310: PPUSH
26311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26312: LD_ADDR_VAR 0 2
26316: PUSH
26317: LD_INT 22
26319: PUSH
26320: LD_OWVAR 2
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 33
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PPUSH
26343: CALL_OW 69
26347: ST_TO_ADDR
// if not tmp then
26348: LD_VAR 0 2
26352: NOT
26353: IFFALSE 26357
// exit ;
26355: GO 26483
// side := 0 ;
26357: LD_ADDR_VAR 0 3
26361: PUSH
26362: LD_INT 0
26364: ST_TO_ADDR
// for i := 1 to 8 do
26365: LD_ADDR_VAR 0 1
26369: PUSH
26370: DOUBLE
26371: LD_INT 1
26373: DEC
26374: ST_TO_ADDR
26375: LD_INT 8
26377: PUSH
26378: FOR_TO
26379: IFFALSE 26427
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26381: LD_OWVAR 2
26385: PUSH
26386: LD_VAR 0 1
26390: NONEQUAL
26391: PUSH
26392: LD_OWVAR 2
26396: PPUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL_OW 81
26406: PUSH
26407: LD_INT 2
26409: EQUAL
26410: AND
26411: IFFALSE 26425
// begin side := i ;
26413: LD_ADDR_VAR 0 3
26417: PUSH
26418: LD_VAR 0 1
26422: ST_TO_ADDR
// break ;
26423: GO 26427
// end ;
26425: GO 26378
26427: POP
26428: POP
// if not side then
26429: LD_VAR 0 3
26433: NOT
26434: IFFALSE 26438
// exit ;
26436: GO 26483
// for i := 1 to tmp do
26438: LD_ADDR_VAR 0 1
26442: PUSH
26443: DOUBLE
26444: LD_INT 1
26446: DEC
26447: ST_TO_ADDR
26448: LD_VAR 0 2
26452: PUSH
26453: FOR_TO
26454: IFFALSE 26481
// if Prob ( 60 ) then
26456: LD_INT 60
26458: PPUSH
26459: CALL_OW 13
26463: IFFALSE 26479
// SetSide ( i , side ) ;
26465: LD_VAR 0 1
26469: PPUSH
26470: LD_VAR 0 3
26474: PPUSH
26475: CALL_OW 235
26479: GO 26453
26481: POP
26482: POP
// end ;
26483: PPOPN 3
26485: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26486: LD_EXP 67
26490: PUSH
26491: LD_EXP 80
26495: AND
26496: IFFALSE 26615
26498: GO 26500
26500: DISABLE
26501: LD_INT 0
26503: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26504: LD_ADDR_VAR 0 1
26508: PUSH
26509: LD_INT 22
26511: PUSH
26512: LD_OWVAR 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 21
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: LD_INT 23
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: PPUSH
26553: CALL_OW 69
26557: PUSH
26558: FOR_IN
26559: IFFALSE 26613
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26561: LD_VAR 0 1
26565: PPUSH
26566: CALL_OW 257
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 3
26579: PUSH
26580: LD_INT 4
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: IN
26589: IFFALSE 26611
// SetClass ( un , rand ( 1 , 4 ) ) ;
26591: LD_VAR 0 1
26595: PPUSH
26596: LD_INT 1
26598: PPUSH
26599: LD_INT 4
26601: PPUSH
26602: CALL_OW 12
26606: PPUSH
26607: CALL_OW 336
26611: GO 26558
26613: POP
26614: POP
// end ;
26615: PPOPN 1
26617: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26618: LD_EXP 67
26622: PUSH
26623: LD_EXP 79
26627: AND
26628: IFFALSE 26707
26630: GO 26632
26632: DISABLE
26633: LD_INT 0
26635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26636: LD_ADDR_VAR 0 1
26640: PUSH
26641: LD_INT 22
26643: PUSH
26644: LD_OWVAR 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 21
26655: PUSH
26656: LD_INT 3
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: ST_TO_ADDR
// if not tmp then
26672: LD_VAR 0 1
26676: NOT
26677: IFFALSE 26681
// exit ;
26679: GO 26707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26681: LD_VAR 0 1
26685: PUSH
26686: LD_INT 1
26688: PPUSH
26689: LD_VAR 0 1
26693: PPUSH
26694: CALL_OW 12
26698: ARRAY
26699: PPUSH
26700: LD_INT 100
26702: PPUSH
26703: CALL_OW 234
// end ;
26707: PPOPN 1
26709: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26710: LD_EXP 67
26714: PUSH
26715: LD_EXP 81
26719: AND
26720: IFFALSE 26818
26722: GO 26724
26724: DISABLE
26725: LD_INT 0
26727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26728: LD_ADDR_VAR 0 1
26732: PUSH
26733: LD_INT 22
26735: PUSH
26736: LD_OWVAR 2
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 21
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PPUSH
26759: CALL_OW 69
26763: ST_TO_ADDR
// if not tmp then
26764: LD_VAR 0 1
26768: NOT
26769: IFFALSE 26773
// exit ;
26771: GO 26818
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26773: LD_VAR 0 1
26777: PUSH
26778: LD_INT 1
26780: PPUSH
26781: LD_VAR 0 1
26785: PPUSH
26786: CALL_OW 12
26790: ARRAY
26791: PPUSH
26792: LD_INT 1
26794: PPUSH
26795: LD_INT 4
26797: PPUSH
26798: CALL_OW 12
26802: PPUSH
26803: LD_INT 3000
26805: PPUSH
26806: LD_INT 9000
26808: PPUSH
26809: CALL_OW 12
26813: PPUSH
26814: CALL_OW 492
// end ;
26818: PPOPN 1
26820: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26821: LD_EXP 67
26825: PUSH
26826: LD_EXP 82
26830: AND
26831: IFFALSE 26851
26833: GO 26835
26835: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26836: LD_INT 1
26838: PPUSH
26839: LD_OWVAR 2
26843: PPUSH
26844: LD_INT 0
26846: PPUSH
26847: CALL_OW 324
26851: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26852: LD_EXP 67
26856: PUSH
26857: LD_EXP 83
26861: AND
26862: IFFALSE 26945
26864: GO 26866
26866: DISABLE
26867: LD_INT 0
26869: PPUSH
26870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26871: LD_ADDR_VAR 0 2
26875: PUSH
26876: LD_INT 22
26878: PUSH
26879: LD_OWVAR 2
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 21
26890: PUSH
26891: LD_INT 3
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PPUSH
26902: CALL_OW 69
26906: ST_TO_ADDR
// if not tmp then
26907: LD_VAR 0 2
26911: NOT
26912: IFFALSE 26916
// exit ;
26914: GO 26945
// for i in tmp do
26916: LD_ADDR_VAR 0 1
26920: PUSH
26921: LD_VAR 0 2
26925: PUSH
26926: FOR_IN
26927: IFFALSE 26943
// SetBLevel ( i , 10 ) ;
26929: LD_VAR 0 1
26933: PPUSH
26934: LD_INT 10
26936: PPUSH
26937: CALL_OW 241
26941: GO 26926
26943: POP
26944: POP
// end ;
26945: PPOPN 2
26947: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26948: LD_EXP 67
26952: PUSH
26953: LD_EXP 84
26957: AND
26958: IFFALSE 27069
26960: GO 26962
26962: DISABLE
26963: LD_INT 0
26965: PPUSH
26966: PPUSH
26967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26968: LD_ADDR_VAR 0 3
26972: PUSH
26973: LD_INT 22
26975: PUSH
26976: LD_OWVAR 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 25
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PPUSH
26999: CALL_OW 69
27003: ST_TO_ADDR
// if not tmp then
27004: LD_VAR 0 3
27008: NOT
27009: IFFALSE 27013
// exit ;
27011: GO 27069
// un := tmp [ rand ( 1 , tmp ) ] ;
27013: LD_ADDR_VAR 0 2
27017: PUSH
27018: LD_VAR 0 3
27022: PUSH
27023: LD_INT 1
27025: PPUSH
27026: LD_VAR 0 3
27030: PPUSH
27031: CALL_OW 12
27035: ARRAY
27036: ST_TO_ADDR
// if Crawls ( un ) then
27037: LD_VAR 0 2
27041: PPUSH
27042: CALL_OW 318
27046: IFFALSE 27057
// ComWalk ( un ) ;
27048: LD_VAR 0 2
27052: PPUSH
27053: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27057: LD_VAR 0 2
27061: PPUSH
27062: LD_INT 5
27064: PPUSH
27065: CALL_OW 336
// end ;
27069: PPOPN 3
27071: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27072: LD_EXP 67
27076: PUSH
27077: LD_EXP 85
27081: AND
27082: PUSH
27083: LD_OWVAR 67
27087: PUSH
27088: LD_INT 4
27090: LESS
27091: AND
27092: IFFALSE 27111
27094: GO 27096
27096: DISABLE
// begin Difficulty := Difficulty + 1 ;
27097: LD_ADDR_OWVAR 67
27101: PUSH
27102: LD_OWVAR 67
27106: PUSH
27107: LD_INT 1
27109: PLUS
27110: ST_TO_ADDR
// end ;
27111: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27112: LD_EXP 67
27116: PUSH
27117: LD_EXP 86
27121: AND
27122: IFFALSE 27225
27124: GO 27126
27126: DISABLE
27127: LD_INT 0
27129: PPUSH
// begin for i := 1 to 5 do
27130: LD_ADDR_VAR 0 1
27134: PUSH
27135: DOUBLE
27136: LD_INT 1
27138: DEC
27139: ST_TO_ADDR
27140: LD_INT 5
27142: PUSH
27143: FOR_TO
27144: IFFALSE 27223
// begin uc_nation := nation_nature ;
27146: LD_ADDR_OWVAR 21
27150: PUSH
27151: LD_INT 0
27153: ST_TO_ADDR
// uc_side := 0 ;
27154: LD_ADDR_OWVAR 20
27158: PUSH
27159: LD_INT 0
27161: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27162: LD_ADDR_OWVAR 29
27166: PUSH
27167: LD_INT 12
27169: PUSH
27170: LD_INT 12
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: ST_TO_ADDR
// hc_agressivity := 20 ;
27177: LD_ADDR_OWVAR 35
27181: PUSH
27182: LD_INT 20
27184: ST_TO_ADDR
// hc_class := class_tiger ;
27185: LD_ADDR_OWVAR 28
27189: PUSH
27190: LD_INT 14
27192: ST_TO_ADDR
// hc_gallery :=  ;
27193: LD_ADDR_OWVAR 33
27197: PUSH
27198: LD_STRING 
27200: ST_TO_ADDR
// hc_name :=  ;
27201: LD_ADDR_OWVAR 26
27205: PUSH
27206: LD_STRING 
27208: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27209: CALL_OW 44
27213: PPUSH
27214: LD_INT 0
27216: PPUSH
27217: CALL_OW 51
// end ;
27221: GO 27143
27223: POP
27224: POP
// end ;
27225: PPOPN 1
27227: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27228: LD_EXP 67
27232: PUSH
27233: LD_EXP 87
27237: AND
27238: IFFALSE 27247
27240: GO 27242
27242: DISABLE
// StreamSibBomb ;
27243: CALL 27248 0 0
27247: END
// export function StreamSibBomb ; var i , x , y ; begin
27248: LD_INT 0
27250: PPUSH
27251: PPUSH
27252: PPUSH
27253: PPUSH
// result := false ;
27254: LD_ADDR_VAR 0 1
27258: PUSH
27259: LD_INT 0
27261: ST_TO_ADDR
// for i := 1 to 16 do
27262: LD_ADDR_VAR 0 2
27266: PUSH
27267: DOUBLE
27268: LD_INT 1
27270: DEC
27271: ST_TO_ADDR
27272: LD_INT 16
27274: PUSH
27275: FOR_TO
27276: IFFALSE 27475
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27278: LD_ADDR_VAR 0 3
27282: PUSH
27283: LD_INT 10
27285: PUSH
27286: LD_INT 20
27288: PUSH
27289: LD_INT 30
27291: PUSH
27292: LD_INT 40
27294: PUSH
27295: LD_INT 50
27297: PUSH
27298: LD_INT 60
27300: PUSH
27301: LD_INT 70
27303: PUSH
27304: LD_INT 80
27306: PUSH
27307: LD_INT 90
27309: PUSH
27310: LD_INT 100
27312: PUSH
27313: LD_INT 110
27315: PUSH
27316: LD_INT 120
27318: PUSH
27319: LD_INT 130
27321: PUSH
27322: LD_INT 140
27324: PUSH
27325: LD_INT 150
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: PPUSH
27348: LD_INT 15
27350: PPUSH
27351: CALL_OW 12
27355: ARRAY
27356: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27357: LD_ADDR_VAR 0 4
27361: PUSH
27362: LD_INT 10
27364: PUSH
27365: LD_INT 20
27367: PUSH
27368: LD_INT 30
27370: PUSH
27371: LD_INT 40
27373: PUSH
27374: LD_INT 50
27376: PUSH
27377: LD_INT 60
27379: PUSH
27380: LD_INT 70
27382: PUSH
27383: LD_INT 80
27385: PUSH
27386: LD_INT 90
27388: PUSH
27389: LD_INT 100
27391: PUSH
27392: LD_INT 110
27394: PUSH
27395: LD_INT 120
27397: PUSH
27398: LD_INT 130
27400: PUSH
27401: LD_INT 140
27403: PUSH
27404: LD_INT 150
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: PPUSH
27427: LD_INT 15
27429: PPUSH
27430: CALL_OW 12
27434: ARRAY
27435: ST_TO_ADDR
// if ValidHex ( x , y ) then
27436: LD_VAR 0 3
27440: PPUSH
27441: LD_VAR 0 4
27445: PPUSH
27446: CALL_OW 488
27450: IFFALSE 27473
// begin result := [ x , y ] ;
27452: LD_ADDR_VAR 0 1
27456: PUSH
27457: LD_VAR 0 3
27461: PUSH
27462: LD_VAR 0 4
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: ST_TO_ADDR
// break ;
27471: GO 27475
// end ; end ;
27473: GO 27275
27475: POP
27476: POP
// if result then
27477: LD_VAR 0 1
27481: IFFALSE 27541
// begin ToLua ( playSibBomb() ) ;
27483: LD_STRING playSibBomb()
27485: PPUSH
27486: CALL_OW 559
// wait ( 0 0$14 ) ;
27490: LD_INT 490
27492: PPUSH
27493: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27497: LD_VAR 0 1
27501: PUSH
27502: LD_INT 1
27504: ARRAY
27505: PPUSH
27506: LD_VAR 0 1
27510: PUSH
27511: LD_INT 2
27513: ARRAY
27514: PPUSH
27515: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27519: LD_VAR 0 1
27523: PUSH
27524: LD_INT 1
27526: ARRAY
27527: PPUSH
27528: LD_VAR 0 1
27532: PUSH
27533: LD_INT 2
27535: ARRAY
27536: PPUSH
27537: CALL_OW 429
// end ; end ;
27541: LD_VAR 0 1
27545: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27546: LD_EXP 67
27550: PUSH
27551: LD_EXP 89
27555: AND
27556: IFFALSE 27568
27558: GO 27560
27560: DISABLE
// YouLost (  ) ;
27561: LD_STRING 
27563: PPUSH
27564: CALL_OW 104
27568: END
// every 0 0$1 trigger StreamModeActive and sFog do
27569: LD_EXP 67
27573: PUSH
27574: LD_EXP 88
27578: AND
27579: IFFALSE 27593
27581: GO 27583
27583: DISABLE
// FogOff ( your_side ) ;
27584: LD_OWVAR 2
27588: PPUSH
27589: CALL_OW 344
27593: END
// every 0 0$1 trigger StreamModeActive and sSun do
27594: LD_EXP 67
27598: PUSH
27599: LD_EXP 90
27603: AND
27604: IFFALSE 27632
27606: GO 27608
27608: DISABLE
// begin solar_recharge_percent := 0 ;
27609: LD_ADDR_OWVAR 79
27613: PUSH
27614: LD_INT 0
27616: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27617: LD_INT 10500
27619: PPUSH
27620: CALL_OW 67
// solar_recharge_percent := 100 ;
27624: LD_ADDR_OWVAR 79
27628: PUSH
27629: LD_INT 100
27631: ST_TO_ADDR
// end ;
27632: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27633: LD_EXP 67
27637: PUSH
27638: LD_EXP 91
27642: AND
27643: IFFALSE 27882
27645: GO 27647
27647: DISABLE
27648: LD_INT 0
27650: PPUSH
27651: PPUSH
27652: PPUSH
// begin tmp := [ ] ;
27653: LD_ADDR_VAR 0 3
27657: PUSH
27658: EMPTY
27659: ST_TO_ADDR
// for i := 1 to 6 do
27660: LD_ADDR_VAR 0 1
27664: PUSH
27665: DOUBLE
27666: LD_INT 1
27668: DEC
27669: ST_TO_ADDR
27670: LD_INT 6
27672: PUSH
27673: FOR_TO
27674: IFFALSE 27779
// begin uc_nation := nation_nature ;
27676: LD_ADDR_OWVAR 21
27680: PUSH
27681: LD_INT 0
27683: ST_TO_ADDR
// uc_side := 0 ;
27684: LD_ADDR_OWVAR 20
27688: PUSH
27689: LD_INT 0
27691: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27692: LD_ADDR_OWVAR 29
27696: PUSH
27697: LD_INT 12
27699: PUSH
27700: LD_INT 12
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: ST_TO_ADDR
// hc_agressivity := 20 ;
27707: LD_ADDR_OWVAR 35
27711: PUSH
27712: LD_INT 20
27714: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27715: LD_ADDR_OWVAR 28
27719: PUSH
27720: LD_INT 17
27722: ST_TO_ADDR
// hc_gallery :=  ;
27723: LD_ADDR_OWVAR 33
27727: PUSH
27728: LD_STRING 
27730: ST_TO_ADDR
// hc_name :=  ;
27731: LD_ADDR_OWVAR 26
27735: PUSH
27736: LD_STRING 
27738: ST_TO_ADDR
// un := CreateHuman ;
27739: LD_ADDR_VAR 0 2
27743: PUSH
27744: CALL_OW 44
27748: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27749: LD_VAR 0 2
27753: PPUSH
27754: LD_INT 1
27756: PPUSH
27757: CALL_OW 51
// tmp := tmp ^ un ;
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: LD_VAR 0 3
27770: PUSH
27771: LD_VAR 0 2
27775: ADD
27776: ST_TO_ADDR
// end ;
27777: GO 27673
27779: POP
27780: POP
// repeat wait ( 0 0$1 ) ;
27781: LD_INT 35
27783: PPUSH
27784: CALL_OW 67
// for un in tmp do
27788: LD_ADDR_VAR 0 2
27792: PUSH
27793: LD_VAR 0 3
27797: PUSH
27798: FOR_IN
27799: IFFALSE 27873
// begin if IsDead ( un ) then
27801: LD_VAR 0 2
27805: PPUSH
27806: CALL_OW 301
27810: IFFALSE 27830
// begin tmp := tmp diff un ;
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_VAR 0 3
27821: PUSH
27822: LD_VAR 0 2
27826: DIFF
27827: ST_TO_ADDR
// continue ;
27828: GO 27798
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27830: LD_VAR 0 2
27834: PPUSH
27835: LD_INT 3
27837: PUSH
27838: LD_INT 22
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL_OW 69
27856: PPUSH
27857: LD_VAR 0 2
27861: PPUSH
27862: CALL_OW 74
27866: PPUSH
27867: CALL_OW 115
// end ;
27871: GO 27798
27873: POP
27874: POP
// until not tmp ;
27875: LD_VAR 0 3
27879: NOT
27880: IFFALSE 27781
// end ;
27882: PPOPN 3
27884: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27885: LD_EXP 67
27889: PUSH
27890: LD_EXP 92
27894: AND
27895: IFFALSE 27949
27897: GO 27899
27899: DISABLE
// begin ToLua ( displayTroll(); ) ;
27900: LD_STRING displayTroll();
27902: PPUSH
27903: CALL_OW 559
// wait ( 3 3$00 ) ;
27907: LD_INT 6300
27909: PPUSH
27910: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27914: LD_STRING hideTroll();
27916: PPUSH
27917: CALL_OW 559
// wait ( 1 1$00 ) ;
27921: LD_INT 2100
27923: PPUSH
27924: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27928: LD_STRING displayTroll();
27930: PPUSH
27931: CALL_OW 559
// wait ( 1 1$00 ) ;
27935: LD_INT 2100
27937: PPUSH
27938: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27942: LD_STRING hideTroll();
27944: PPUSH
27945: CALL_OW 559
// end ;
27949: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27950: LD_EXP 67
27954: PUSH
27955: LD_EXP 93
27959: AND
27960: IFFALSE 28023
27962: GO 27964
27964: DISABLE
27965: LD_INT 0
27967: PPUSH
// begin p := 0 ;
27968: LD_ADDR_VAR 0 1
27972: PUSH
27973: LD_INT 0
27975: ST_TO_ADDR
// repeat game_speed := 1 ;
27976: LD_ADDR_OWVAR 65
27980: PUSH
27981: LD_INT 1
27983: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27984: LD_INT 35
27986: PPUSH
27987: CALL_OW 67
// p := p + 1 ;
27991: LD_ADDR_VAR 0 1
27995: PUSH
27996: LD_VAR 0 1
28000: PUSH
28001: LD_INT 1
28003: PLUS
28004: ST_TO_ADDR
// until p >= 60 ;
28005: LD_VAR 0 1
28009: PUSH
28010: LD_INT 60
28012: GREATEREQUAL
28013: IFFALSE 27976
// game_speed := 4 ;
28015: LD_ADDR_OWVAR 65
28019: PUSH
28020: LD_INT 4
28022: ST_TO_ADDR
// end ;
28023: PPOPN 1
28025: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28026: LD_EXP 67
28030: PUSH
28031: LD_EXP 94
28035: AND
28036: IFFALSE 28182
28038: GO 28040
28040: DISABLE
28041: LD_INT 0
28043: PPUSH
28044: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28045: LD_ADDR_VAR 0 1
28049: PUSH
28050: LD_INT 22
28052: PUSH
28053: LD_OWVAR 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: LD_INT 30
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 30
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL_OW 69
28098: ST_TO_ADDR
// if not depot then
28099: LD_VAR 0 1
28103: NOT
28104: IFFALSE 28108
// exit ;
28106: GO 28182
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28108: LD_ADDR_VAR 0 2
28112: PUSH
28113: LD_VAR 0 1
28117: PUSH
28118: LD_INT 1
28120: PPUSH
28121: LD_VAR 0 1
28125: PPUSH
28126: CALL_OW 12
28130: ARRAY
28131: PPUSH
28132: CALL_OW 274
28136: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28137: LD_VAR 0 2
28141: PPUSH
28142: LD_INT 1
28144: PPUSH
28145: LD_INT 0
28147: PPUSH
28148: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_INT 2
28159: PPUSH
28160: LD_INT 0
28162: PPUSH
28163: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28167: LD_VAR 0 2
28171: PPUSH
28172: LD_INT 3
28174: PPUSH
28175: LD_INT 0
28177: PPUSH
28178: CALL_OW 277
// end ;
28182: PPOPN 2
28184: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28185: LD_EXP 67
28189: PUSH
28190: LD_EXP 95
28194: AND
28195: IFFALSE 28292
28197: GO 28199
28199: DISABLE
28200: LD_INT 0
28202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28203: LD_ADDR_VAR 0 1
28207: PUSH
28208: LD_INT 22
28210: PUSH
28211: LD_OWVAR 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 21
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 3
28232: PUSH
28233: LD_INT 23
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: PPUSH
28252: CALL_OW 69
28256: ST_TO_ADDR
// if not tmp then
28257: LD_VAR 0 1
28261: NOT
28262: IFFALSE 28266
// exit ;
28264: GO 28292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 1
28273: PPUSH
28274: LD_VAR 0 1
28278: PPUSH
28279: CALL_OW 12
28283: ARRAY
28284: PPUSH
28285: LD_INT 200
28287: PPUSH
28288: CALL_OW 234
// end ;
28292: PPOPN 1
28294: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28295: LD_EXP 67
28299: PUSH
28300: LD_EXP 96
28304: AND
28305: IFFALSE 28384
28307: GO 28309
28309: DISABLE
28310: LD_INT 0
28312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28313: LD_ADDR_VAR 0 1
28317: PUSH
28318: LD_INT 22
28320: PUSH
28321: LD_OWVAR 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 21
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PPUSH
28344: CALL_OW 69
28348: ST_TO_ADDR
// if not tmp then
28349: LD_VAR 0 1
28353: NOT
28354: IFFALSE 28358
// exit ;
28356: GO 28384
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28358: LD_VAR 0 1
28362: PUSH
28363: LD_INT 1
28365: PPUSH
28366: LD_VAR 0 1
28370: PPUSH
28371: CALL_OW 12
28375: ARRAY
28376: PPUSH
28377: LD_INT 60
28379: PPUSH
28380: CALL_OW 234
// end ;
28384: PPOPN 1
28386: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28387: LD_EXP 67
28391: PUSH
28392: LD_EXP 97
28396: AND
28397: IFFALSE 28496
28399: GO 28401
28401: DISABLE
28402: LD_INT 0
28404: PPUSH
28405: PPUSH
// begin enable ;
28406: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28407: LD_ADDR_VAR 0 1
28411: PUSH
28412: LD_INT 22
28414: PUSH
28415: LD_OWVAR 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 61
28426: PUSH
28427: EMPTY
28428: LIST
28429: PUSH
28430: LD_INT 33
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL_OW 69
28449: ST_TO_ADDR
// if not tmp then
28450: LD_VAR 0 1
28454: NOT
28455: IFFALSE 28459
// exit ;
28457: GO 28496
// for i in tmp do
28459: LD_ADDR_VAR 0 2
28463: PUSH
28464: LD_VAR 0 1
28468: PUSH
28469: FOR_IN
28470: IFFALSE 28494
// if IsControledBy ( i ) then
28472: LD_VAR 0 2
28476: PPUSH
28477: CALL_OW 312
28481: IFFALSE 28492
// ComUnlink ( i ) ;
28483: LD_VAR 0 2
28487: PPUSH
28488: CALL_OW 136
28492: GO 28469
28494: POP
28495: POP
// end ;
28496: PPOPN 2
28498: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28499: LD_EXP 67
28503: PUSH
28504: LD_EXP 98
28508: AND
28509: IFFALSE 28649
28511: GO 28513
28513: DISABLE
28514: LD_INT 0
28516: PPUSH
28517: PPUSH
// begin ToLua ( displayPowell(); ) ;
28518: LD_STRING displayPowell();
28520: PPUSH
28521: CALL_OW 559
// uc_side := 0 ;
28525: LD_ADDR_OWVAR 20
28529: PUSH
28530: LD_INT 0
28532: ST_TO_ADDR
// uc_nation := 2 ;
28533: LD_ADDR_OWVAR 21
28537: PUSH
28538: LD_INT 2
28540: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28541: LD_ADDR_OWVAR 37
28545: PUSH
28546: LD_INT 14
28548: ST_TO_ADDR
// vc_engine := engine_siberite ;
28549: LD_ADDR_OWVAR 39
28553: PUSH
28554: LD_INT 3
28556: ST_TO_ADDR
// vc_control := control_apeman ;
28557: LD_ADDR_OWVAR 38
28561: PUSH
28562: LD_INT 5
28564: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28565: LD_ADDR_OWVAR 40
28569: PUSH
28570: LD_INT 29
28572: ST_TO_ADDR
// un := CreateVehicle ;
28573: LD_ADDR_VAR 0 2
28577: PUSH
28578: CALL_OW 45
28582: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28583: LD_VAR 0 2
28587: PPUSH
28588: LD_INT 1
28590: PPUSH
28591: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28595: LD_INT 35
28597: PPUSH
28598: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28602: LD_VAR 0 2
28606: PPUSH
28607: LD_INT 22
28609: PUSH
28610: LD_OWVAR 2
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PPUSH
28619: CALL_OW 69
28623: PPUSH
28624: LD_VAR 0 2
28628: PPUSH
28629: CALL_OW 74
28633: PPUSH
28634: CALL_OW 115
// until IsDead ( un ) ;
28638: LD_VAR 0 2
28642: PPUSH
28643: CALL_OW 301
28647: IFFALSE 28595
// end ;
28649: PPOPN 2
28651: END
// every 0 0$1 trigger StreamModeActive and sStu do
28652: LD_EXP 67
28656: PUSH
28657: LD_EXP 106
28661: AND
28662: IFFALSE 28678
28664: GO 28666
28666: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28667: LD_STRING displayStucuk();
28669: PPUSH
28670: CALL_OW 559
// ResetFog ;
28674: CALL_OW 335
// end ;
28678: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28679: LD_EXP 67
28683: PUSH
28684: LD_EXP 99
28688: AND
28689: IFFALSE 28830
28691: GO 28693
28693: DISABLE
28694: LD_INT 0
28696: PPUSH
28697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28698: LD_ADDR_VAR 0 2
28702: PUSH
28703: LD_INT 22
28705: PUSH
28706: LD_OWVAR 2
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 21
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PPUSH
28729: CALL_OW 69
28733: ST_TO_ADDR
// if not tmp then
28734: LD_VAR 0 2
28738: NOT
28739: IFFALSE 28743
// exit ;
28741: GO 28830
// un := tmp [ rand ( 1 , tmp ) ] ;
28743: LD_ADDR_VAR 0 1
28747: PUSH
28748: LD_VAR 0 2
28752: PUSH
28753: LD_INT 1
28755: PPUSH
28756: LD_VAR 0 2
28760: PPUSH
28761: CALL_OW 12
28765: ARRAY
28766: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28767: LD_VAR 0 1
28771: PPUSH
28772: LD_INT 0
28774: PPUSH
28775: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28779: LD_VAR 0 1
28783: PPUSH
28784: LD_OWVAR 3
28788: PUSH
28789: LD_VAR 0 1
28793: DIFF
28794: PPUSH
28795: LD_VAR 0 1
28799: PPUSH
28800: CALL_OW 74
28804: PPUSH
28805: CALL_OW 115
// wait ( 0 0$20 ) ;
28809: LD_INT 700
28811: PPUSH
28812: CALL_OW 67
// SetSide ( un , your_side ) ;
28816: LD_VAR 0 1
28820: PPUSH
28821: LD_OWVAR 2
28825: PPUSH
28826: CALL_OW 235
// end ;
28830: PPOPN 2
28832: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28833: LD_EXP 67
28837: PUSH
28838: LD_EXP 100
28842: AND
28843: IFFALSE 28949
28845: GO 28847
28847: DISABLE
28848: LD_INT 0
28850: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28851: LD_ADDR_VAR 0 1
28855: PUSH
28856: LD_INT 22
28858: PUSH
28859: LD_OWVAR 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 2
28870: PUSH
28871: LD_INT 30
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 30
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not depot then
28905: LD_VAR 0 1
28909: NOT
28910: IFFALSE 28914
// exit ;
28912: GO 28949
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28914: LD_VAR 0 1
28918: PUSH
28919: LD_INT 1
28921: ARRAY
28922: PPUSH
28923: CALL_OW 250
28927: PPUSH
28928: LD_VAR 0 1
28932: PUSH
28933: LD_INT 1
28935: ARRAY
28936: PPUSH
28937: CALL_OW 251
28941: PPUSH
28942: LD_INT 70
28944: PPUSH
28945: CALL_OW 495
// end ;
28949: PPOPN 1
28951: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28952: LD_EXP 67
28956: PUSH
28957: LD_EXP 101
28961: AND
28962: IFFALSE 29173
28964: GO 28966
28966: DISABLE
28967: LD_INT 0
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28974: LD_ADDR_VAR 0 5
28978: PUSH
28979: LD_INT 22
28981: PUSH
28982: LD_OWVAR 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 21
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PPUSH
29005: CALL_OW 69
29009: ST_TO_ADDR
// if not tmp then
29010: LD_VAR 0 5
29014: NOT
29015: IFFALSE 29019
// exit ;
29017: GO 29173
// for i in tmp do
29019: LD_ADDR_VAR 0 1
29023: PUSH
29024: LD_VAR 0 5
29028: PUSH
29029: FOR_IN
29030: IFFALSE 29171
// begin d := rand ( 0 , 5 ) ;
29032: LD_ADDR_VAR 0 4
29036: PUSH
29037: LD_INT 0
29039: PPUSH
29040: LD_INT 5
29042: PPUSH
29043: CALL_OW 12
29047: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29048: LD_ADDR_VAR 0 2
29052: PUSH
29053: LD_VAR 0 1
29057: PPUSH
29058: CALL_OW 250
29062: PPUSH
29063: LD_VAR 0 4
29067: PPUSH
29068: LD_INT 3
29070: PPUSH
29071: LD_INT 12
29073: PPUSH
29074: CALL_OW 12
29078: PPUSH
29079: CALL_OW 272
29083: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: LD_VAR 0 1
29093: PPUSH
29094: CALL_OW 251
29098: PPUSH
29099: LD_VAR 0 4
29103: PPUSH
29104: LD_INT 3
29106: PPUSH
29107: LD_INT 12
29109: PPUSH
29110: CALL_OW 12
29114: PPUSH
29115: CALL_OW 273
29119: ST_TO_ADDR
// if ValidHex ( x , y ) then
29120: LD_VAR 0 2
29124: PPUSH
29125: LD_VAR 0 3
29129: PPUSH
29130: CALL_OW 488
29134: IFFALSE 29169
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29136: LD_VAR 0 1
29140: PPUSH
29141: LD_VAR 0 2
29145: PPUSH
29146: LD_VAR 0 3
29150: PPUSH
29151: LD_INT 3
29153: PPUSH
29154: LD_INT 6
29156: PPUSH
29157: CALL_OW 12
29161: PPUSH
29162: LD_INT 1
29164: PPUSH
29165: CALL_OW 483
// end ;
29169: GO 29029
29171: POP
29172: POP
// end ;
29173: PPOPN 5
29175: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29176: LD_EXP 67
29180: PUSH
29181: LD_EXP 102
29185: AND
29186: IFFALSE 29280
29188: GO 29190
29190: DISABLE
29191: LD_INT 0
29193: PPUSH
29194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29195: LD_ADDR_VAR 0 2
29199: PUSH
29200: LD_INT 22
29202: PUSH
29203: LD_OWVAR 2
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 32
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 21
29224: PUSH
29225: LD_INT 2
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 69
29241: ST_TO_ADDR
// if not tmp then
29242: LD_VAR 0 2
29246: NOT
29247: IFFALSE 29251
// exit ;
29249: GO 29280
// for i in tmp do
29251: LD_ADDR_VAR 0 1
29255: PUSH
29256: LD_VAR 0 2
29260: PUSH
29261: FOR_IN
29262: IFFALSE 29278
// SetFuel ( i , 0 ) ;
29264: LD_VAR 0 1
29268: PPUSH
29269: LD_INT 0
29271: PPUSH
29272: CALL_OW 240
29276: GO 29261
29278: POP
29279: POP
// end ;
29280: PPOPN 2
29282: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29283: LD_EXP 67
29287: PUSH
29288: LD_EXP 103
29292: AND
29293: IFFALSE 29359
29295: GO 29297
29297: DISABLE
29298: LD_INT 0
29300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29301: LD_ADDR_VAR 0 1
29305: PUSH
29306: LD_INT 22
29308: PUSH
29309: LD_OWVAR 2
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 30
29320: PUSH
29321: LD_INT 29
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PPUSH
29332: CALL_OW 69
29336: ST_TO_ADDR
// if not tmp then
29337: LD_VAR 0 1
29341: NOT
29342: IFFALSE 29346
// exit ;
29344: GO 29359
// DestroyUnit ( tmp [ 1 ] ) ;
29346: LD_VAR 0 1
29350: PUSH
29351: LD_INT 1
29353: ARRAY
29354: PPUSH
29355: CALL_OW 65
// end ;
29359: PPOPN 1
29361: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29362: LD_EXP 67
29366: PUSH
29367: LD_EXP 105
29371: AND
29372: IFFALSE 29501
29374: GO 29376
29376: DISABLE
29377: LD_INT 0
29379: PPUSH
// begin uc_side := 0 ;
29380: LD_ADDR_OWVAR 20
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// uc_nation := nation_arabian ;
29388: LD_ADDR_OWVAR 21
29392: PUSH
29393: LD_INT 2
29395: ST_TO_ADDR
// hc_gallery :=  ;
29396: LD_ADDR_OWVAR 33
29400: PUSH
29401: LD_STRING 
29403: ST_TO_ADDR
// hc_name :=  ;
29404: LD_ADDR_OWVAR 26
29408: PUSH
29409: LD_STRING 
29411: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29412: LD_INT 1
29414: PPUSH
29415: LD_INT 11
29417: PPUSH
29418: LD_INT 10
29420: PPUSH
29421: CALL_OW 380
// un := CreateHuman ;
29425: LD_ADDR_VAR 0 1
29429: PUSH
29430: CALL_OW 44
29434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29435: LD_VAR 0 1
29439: PPUSH
29440: LD_INT 1
29442: PPUSH
29443: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29447: LD_INT 35
29449: PPUSH
29450: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29454: LD_VAR 0 1
29458: PPUSH
29459: LD_INT 22
29461: PUSH
29462: LD_OWVAR 2
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PPUSH
29471: CALL_OW 69
29475: PPUSH
29476: LD_VAR 0 1
29480: PPUSH
29481: CALL_OW 74
29485: PPUSH
29486: CALL_OW 115
// until IsDead ( un ) ;
29490: LD_VAR 0 1
29494: PPUSH
29495: CALL_OW 301
29499: IFFALSE 29447
// end ;
29501: PPOPN 1
29503: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29504: LD_EXP 67
29508: PUSH
29509: LD_EXP 107
29513: AND
29514: IFFALSE 29526
29516: GO 29518
29518: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29519: LD_STRING earthquake(getX(game), 0, 32)
29521: PPUSH
29522: CALL_OW 559
29526: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29527: LD_EXP 67
29531: PUSH
29532: LD_EXP 108
29536: AND
29537: IFFALSE 29628
29539: GO 29541
29541: DISABLE
29542: LD_INT 0
29544: PPUSH
// begin enable ;
29545: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29546: LD_ADDR_VAR 0 1
29550: PUSH
29551: LD_INT 22
29553: PUSH
29554: LD_OWVAR 2
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 21
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 33
29575: PUSH
29576: LD_INT 3
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: PPUSH
29588: CALL_OW 69
29592: ST_TO_ADDR
// if not tmp then
29593: LD_VAR 0 1
29597: NOT
29598: IFFALSE 29602
// exit ;
29600: GO 29628
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29602: LD_VAR 0 1
29606: PUSH
29607: LD_INT 1
29609: PPUSH
29610: LD_VAR 0 1
29614: PPUSH
29615: CALL_OW 12
29619: ARRAY
29620: PPUSH
29621: LD_INT 1
29623: PPUSH
29624: CALL_OW 234
// end ;
29628: PPOPN 1
29630: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29631: LD_EXP 67
29635: PUSH
29636: LD_EXP 109
29640: AND
29641: IFFALSE 29782
29643: GO 29645
29645: DISABLE
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
29650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29651: LD_ADDR_VAR 0 3
29655: PUSH
29656: LD_INT 22
29658: PUSH
29659: LD_OWVAR 2
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 25
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PPUSH
29682: CALL_OW 69
29686: ST_TO_ADDR
// if not tmp then
29687: LD_VAR 0 3
29691: NOT
29692: IFFALSE 29696
// exit ;
29694: GO 29782
// un := tmp [ rand ( 1 , tmp ) ] ;
29696: LD_ADDR_VAR 0 2
29700: PUSH
29701: LD_VAR 0 3
29705: PUSH
29706: LD_INT 1
29708: PPUSH
29709: LD_VAR 0 3
29713: PPUSH
29714: CALL_OW 12
29718: ARRAY
29719: ST_TO_ADDR
// if Crawls ( un ) then
29720: LD_VAR 0 2
29724: PPUSH
29725: CALL_OW 318
29729: IFFALSE 29740
// ComWalk ( un ) ;
29731: LD_VAR 0 2
29735: PPUSH
29736: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29740: LD_VAR 0 2
29744: PPUSH
29745: LD_INT 9
29747: PPUSH
29748: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29752: LD_INT 28
29754: PPUSH
29755: LD_OWVAR 2
29759: PPUSH
29760: LD_INT 2
29762: PPUSH
29763: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29767: LD_INT 29
29769: PPUSH
29770: LD_OWVAR 2
29774: PPUSH
29775: LD_INT 2
29777: PPUSH
29778: CALL_OW 322
// end ;
29782: PPOPN 3
29784: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29785: LD_EXP 67
29789: PUSH
29790: LD_EXP 110
29794: AND
29795: IFFALSE 29906
29797: GO 29799
29799: DISABLE
29800: LD_INT 0
29802: PPUSH
29803: PPUSH
29804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29805: LD_ADDR_VAR 0 3
29809: PUSH
29810: LD_INT 22
29812: PUSH
29813: LD_OWVAR 2
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 25
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PPUSH
29836: CALL_OW 69
29840: ST_TO_ADDR
// if not tmp then
29841: LD_VAR 0 3
29845: NOT
29846: IFFALSE 29850
// exit ;
29848: GO 29906
// un := tmp [ rand ( 1 , tmp ) ] ;
29850: LD_ADDR_VAR 0 2
29854: PUSH
29855: LD_VAR 0 3
29859: PUSH
29860: LD_INT 1
29862: PPUSH
29863: LD_VAR 0 3
29867: PPUSH
29868: CALL_OW 12
29872: ARRAY
29873: ST_TO_ADDR
// if Crawls ( un ) then
29874: LD_VAR 0 2
29878: PPUSH
29879: CALL_OW 318
29883: IFFALSE 29894
// ComWalk ( un ) ;
29885: LD_VAR 0 2
29889: PPUSH
29890: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29894: LD_VAR 0 2
29898: PPUSH
29899: LD_INT 8
29901: PPUSH
29902: CALL_OW 336
// end ;
29906: PPOPN 3
29908: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29909: LD_EXP 67
29913: PUSH
29914: LD_EXP 111
29918: AND
29919: IFFALSE 30063
29921: GO 29923
29923: DISABLE
29924: LD_INT 0
29926: PPUSH
29927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29928: LD_ADDR_VAR 0 2
29932: PUSH
29933: LD_INT 22
29935: PUSH
29936: LD_OWVAR 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 21
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 34
29960: PUSH
29961: LD_INT 12
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 34
29970: PUSH
29971: LD_INT 51
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 34
29980: PUSH
29981: LD_INT 32
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: PPUSH
29999: CALL_OW 69
30003: ST_TO_ADDR
// if not tmp then
30004: LD_VAR 0 2
30008: NOT
30009: IFFALSE 30013
// exit ;
30011: GO 30063
// for i in tmp do
30013: LD_ADDR_VAR 0 1
30017: PUSH
30018: LD_VAR 0 2
30022: PUSH
30023: FOR_IN
30024: IFFALSE 30061
// if GetCargo ( i , mat_artifact ) = 0 then
30026: LD_VAR 0 1
30030: PPUSH
30031: LD_INT 4
30033: PPUSH
30034: CALL_OW 289
30038: PUSH
30039: LD_INT 0
30041: EQUAL
30042: IFFALSE 30059
// SetCargo ( i , mat_siberit , 100 ) ;
30044: LD_VAR 0 1
30048: PPUSH
30049: LD_INT 3
30051: PPUSH
30052: LD_INT 100
30054: PPUSH
30055: CALL_OW 290
30059: GO 30023
30061: POP
30062: POP
// end ;
30063: PPOPN 2
30065: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30066: LD_EXP 67
30070: PUSH
30071: LD_EXP 112
30075: AND
30076: IFFALSE 30259
30078: GO 30080
30080: DISABLE
30081: LD_INT 0
30083: PPUSH
30084: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30085: LD_ADDR_VAR 0 2
30089: PUSH
30090: LD_INT 22
30092: PUSH
30093: LD_OWVAR 2
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PPUSH
30102: CALL_OW 69
30106: ST_TO_ADDR
// if not tmp then
30107: LD_VAR 0 2
30111: NOT
30112: IFFALSE 30116
// exit ;
30114: GO 30259
// for i := 1 to 2 do
30116: LD_ADDR_VAR 0 1
30120: PUSH
30121: DOUBLE
30122: LD_INT 1
30124: DEC
30125: ST_TO_ADDR
30126: LD_INT 2
30128: PUSH
30129: FOR_TO
30130: IFFALSE 30257
// begin uc_side := your_side ;
30132: LD_ADDR_OWVAR 20
30136: PUSH
30137: LD_OWVAR 2
30141: ST_TO_ADDR
// uc_nation := nation_american ;
30142: LD_ADDR_OWVAR 21
30146: PUSH
30147: LD_INT 1
30149: ST_TO_ADDR
// vc_chassis := us_morphling ;
30150: LD_ADDR_OWVAR 37
30154: PUSH
30155: LD_INT 5
30157: ST_TO_ADDR
// vc_engine := engine_siberite ;
30158: LD_ADDR_OWVAR 39
30162: PUSH
30163: LD_INT 3
30165: ST_TO_ADDR
// vc_control := control_computer ;
30166: LD_ADDR_OWVAR 38
30170: PUSH
30171: LD_INT 3
30173: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30174: LD_ADDR_OWVAR 40
30178: PUSH
30179: LD_INT 10
30181: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30182: LD_VAR 0 2
30186: PUSH
30187: LD_INT 1
30189: ARRAY
30190: PPUSH
30191: CALL_OW 310
30195: NOT
30196: IFFALSE 30243
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30198: CALL_OW 45
30202: PPUSH
30203: LD_VAR 0 2
30207: PUSH
30208: LD_INT 1
30210: ARRAY
30211: PPUSH
30212: CALL_OW 250
30216: PPUSH
30217: LD_VAR 0 2
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: CALL_OW 251
30230: PPUSH
30231: LD_INT 12
30233: PPUSH
30234: LD_INT 1
30236: PPUSH
30237: CALL_OW 50
30241: GO 30255
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30243: CALL_OW 45
30247: PPUSH
30248: LD_INT 1
30250: PPUSH
30251: CALL_OW 51
// end ;
30255: GO 30129
30257: POP
30258: POP
// end ;
30259: PPOPN 2
30261: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30262: LD_EXP 67
30266: PUSH
30267: LD_EXP 113
30271: AND
30272: IFFALSE 30494
30274: GO 30276
30276: DISABLE
30277: LD_INT 0
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30285: LD_ADDR_VAR 0 6
30289: PUSH
30290: LD_INT 22
30292: PUSH
30293: LD_OWVAR 2
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 21
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: LD_INT 23
30317: PUSH
30318: LD_INT 0
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: PPUSH
30334: CALL_OW 69
30338: ST_TO_ADDR
// if not tmp then
30339: LD_VAR 0 6
30343: NOT
30344: IFFALSE 30348
// exit ;
30346: GO 30494
// s1 := rand ( 1 , 4 ) ;
30348: LD_ADDR_VAR 0 2
30352: PUSH
30353: LD_INT 1
30355: PPUSH
30356: LD_INT 4
30358: PPUSH
30359: CALL_OW 12
30363: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30364: LD_ADDR_VAR 0 4
30368: PUSH
30369: LD_VAR 0 6
30373: PUSH
30374: LD_INT 1
30376: ARRAY
30377: PPUSH
30378: LD_VAR 0 2
30382: PPUSH
30383: CALL_OW 259
30387: ST_TO_ADDR
// if s1 = 1 then
30388: LD_VAR 0 2
30392: PUSH
30393: LD_INT 1
30395: EQUAL
30396: IFFALSE 30416
// s2 := rand ( 2 , 4 ) else
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: LD_INT 2
30405: PPUSH
30406: LD_INT 4
30408: PPUSH
30409: CALL_OW 12
30413: ST_TO_ADDR
30414: GO 30424
// s2 := 1 ;
30416: LD_ADDR_VAR 0 3
30420: PUSH
30421: LD_INT 1
30423: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30424: LD_ADDR_VAR 0 5
30428: PUSH
30429: LD_VAR 0 6
30433: PUSH
30434: LD_INT 1
30436: ARRAY
30437: PPUSH
30438: LD_VAR 0 3
30442: PPUSH
30443: CALL_OW 259
30447: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30448: LD_VAR 0 6
30452: PUSH
30453: LD_INT 1
30455: ARRAY
30456: PPUSH
30457: LD_VAR 0 2
30461: PPUSH
30462: LD_VAR 0 5
30466: PPUSH
30467: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30471: LD_VAR 0 6
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: PPUSH
30480: LD_VAR 0 3
30484: PPUSH
30485: LD_VAR 0 4
30489: PPUSH
30490: CALL_OW 237
// end ;
30494: PPOPN 6
30496: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30497: LD_EXP 67
30501: PUSH
30502: LD_EXP 114
30506: AND
30507: IFFALSE 30586
30509: GO 30511
30511: DISABLE
30512: LD_INT 0
30514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30515: LD_ADDR_VAR 0 1
30519: PUSH
30520: LD_INT 22
30522: PUSH
30523: LD_OWVAR 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 30
30534: PUSH
30535: LD_INT 3
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PPUSH
30546: CALL_OW 69
30550: ST_TO_ADDR
// if not tmp then
30551: LD_VAR 0 1
30555: NOT
30556: IFFALSE 30560
// exit ;
30558: GO 30586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30560: LD_VAR 0 1
30564: PUSH
30565: LD_INT 1
30567: PPUSH
30568: LD_VAR 0 1
30572: PPUSH
30573: CALL_OW 12
30577: ARRAY
30578: PPUSH
30579: LD_INT 1
30581: PPUSH
30582: CALL_OW 234
// end ;
30586: PPOPN 1
30588: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30589: LD_EXP 67
30593: PUSH
30594: LD_EXP 115
30598: AND
30599: IFFALSE 30711
30601: GO 30603
30603: DISABLE
30604: LD_INT 0
30606: PPUSH
30607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30608: LD_ADDR_VAR 0 2
30612: PUSH
30613: LD_INT 22
30615: PUSH
30616: LD_OWVAR 2
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 30
30630: PUSH
30631: LD_INT 27
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 30
30640: PUSH
30641: LD_INT 26
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 30
30650: PUSH
30651: LD_INT 28
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PPUSH
30668: CALL_OW 69
30672: ST_TO_ADDR
// if not tmp then
30673: LD_VAR 0 2
30677: NOT
30678: IFFALSE 30682
// exit ;
30680: GO 30711
// for i in tmp do
30682: LD_ADDR_VAR 0 1
30686: PUSH
30687: LD_VAR 0 2
30691: PUSH
30692: FOR_IN
30693: IFFALSE 30709
// SetLives ( i , 1 ) ;
30695: LD_VAR 0 1
30699: PPUSH
30700: LD_INT 1
30702: PPUSH
30703: CALL_OW 234
30707: GO 30692
30709: POP
30710: POP
// end ;
30711: PPOPN 2
30713: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30714: LD_EXP 67
30718: PUSH
30719: LD_EXP 116
30723: AND
30724: IFFALSE 31011
30726: GO 30728
30728: DISABLE
30729: LD_INT 0
30731: PPUSH
30732: PPUSH
30733: PPUSH
// begin i := rand ( 1 , 7 ) ;
30734: LD_ADDR_VAR 0 1
30738: PUSH
30739: LD_INT 1
30741: PPUSH
30742: LD_INT 7
30744: PPUSH
30745: CALL_OW 12
30749: ST_TO_ADDR
// case i of 1 :
30750: LD_VAR 0 1
30754: PUSH
30755: LD_INT 1
30757: DOUBLE
30758: EQUAL
30759: IFTRUE 30763
30761: GO 30773
30763: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30764: LD_STRING earthquake(getX(game), 0, 32)
30766: PPUSH
30767: CALL_OW 559
30771: GO 31011
30773: LD_INT 2
30775: DOUBLE
30776: EQUAL
30777: IFTRUE 30781
30779: GO 30795
30781: POP
// begin ToLua ( displayStucuk(); ) ;
30782: LD_STRING displayStucuk();
30784: PPUSH
30785: CALL_OW 559
// ResetFog ;
30789: CALL_OW 335
// end ; 3 :
30793: GO 31011
30795: LD_INT 3
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30907
30803: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30804: LD_ADDR_VAR 0 2
30808: PUSH
30809: LD_INT 22
30811: PUSH
30812: LD_OWVAR 2
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 25
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PPUSH
30835: CALL_OW 69
30839: ST_TO_ADDR
// if not tmp then
30840: LD_VAR 0 2
30844: NOT
30845: IFFALSE 30849
// exit ;
30847: GO 31011
// un := tmp [ rand ( 1 , tmp ) ] ;
30849: LD_ADDR_VAR 0 3
30853: PUSH
30854: LD_VAR 0 2
30858: PUSH
30859: LD_INT 1
30861: PPUSH
30862: LD_VAR 0 2
30866: PPUSH
30867: CALL_OW 12
30871: ARRAY
30872: ST_TO_ADDR
// if Crawls ( un ) then
30873: LD_VAR 0 3
30877: PPUSH
30878: CALL_OW 318
30882: IFFALSE 30893
// ComWalk ( un ) ;
30884: LD_VAR 0 3
30888: PPUSH
30889: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30893: LD_VAR 0 3
30897: PPUSH
30898: LD_INT 8
30900: PPUSH
30901: CALL_OW 336
// end ; 4 :
30905: GO 31011
30907: LD_INT 4
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30989
30915: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30916: LD_ADDR_VAR 0 2
30920: PUSH
30921: LD_INT 22
30923: PUSH
30924: LD_OWVAR 2
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 30
30935: PUSH
30936: LD_INT 29
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PPUSH
30947: CALL_OW 69
30951: ST_TO_ADDR
// if not tmp then
30952: LD_VAR 0 2
30956: NOT
30957: IFFALSE 30961
// exit ;
30959: GO 31011
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30961: LD_VAR 0 2
30965: PUSH
30966: LD_INT 1
30968: ARRAY
30969: PPUSH
30970: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30974: LD_VAR 0 2
30978: PUSH
30979: LD_INT 1
30981: ARRAY
30982: PPUSH
30983: CALL_OW 65
// end ; 5 .. 7 :
30987: GO 31011
30989: LD_INT 5
30991: DOUBLE
30992: GREATEREQUAL
30993: IFFALSE 31001
30995: LD_INT 7
30997: DOUBLE
30998: LESSEQUAL
30999: IFTRUE 31003
31001: GO 31010
31003: POP
// StreamSibBomb ; end ;
31004: CALL 27248 0 0
31008: GO 31011
31010: POP
// end ;
31011: PPOPN 3
31013: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31014: LD_EXP 67
31018: PUSH
31019: LD_EXP 117
31023: AND
31024: IFFALSE 31180
31026: GO 31028
31028: DISABLE
31029: LD_INT 0
31031: PPUSH
31032: PPUSH
31033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31034: LD_ADDR_VAR 0 2
31038: PUSH
31039: LD_INT 81
31041: PUSH
31042: LD_OWVAR 2
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 21
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 21
31066: PUSH
31067: LD_INT 2
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PPUSH
31083: CALL_OW 69
31087: ST_TO_ADDR
// if not tmp then
31088: LD_VAR 0 2
31092: NOT
31093: IFFALSE 31097
// exit ;
31095: GO 31180
// p := 0 ;
31097: LD_ADDR_VAR 0 3
31101: PUSH
31102: LD_INT 0
31104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31105: LD_INT 35
31107: PPUSH
31108: CALL_OW 67
// p := p + 1 ;
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_VAR 0 3
31121: PUSH
31122: LD_INT 1
31124: PLUS
31125: ST_TO_ADDR
// for i in tmp do
31126: LD_ADDR_VAR 0 1
31130: PUSH
31131: LD_VAR 0 2
31135: PUSH
31136: FOR_IN
31137: IFFALSE 31168
// if GetLives ( i ) < 1000 then
31139: LD_VAR 0 1
31143: PPUSH
31144: CALL_OW 256
31148: PUSH
31149: LD_INT 1000
31151: LESS
31152: IFFALSE 31166
// SetLives ( i , 1000 ) ;
31154: LD_VAR 0 1
31158: PPUSH
31159: LD_INT 1000
31161: PPUSH
31162: CALL_OW 234
31166: GO 31136
31168: POP
31169: POP
// until p > 20 ;
31170: LD_VAR 0 3
31174: PUSH
31175: LD_INT 20
31177: GREATER
31178: IFFALSE 31105
// end ;
31180: PPOPN 3
31182: END
// every 0 0$1 trigger StreamModeActive and sTime do
31183: LD_EXP 67
31187: PUSH
31188: LD_EXP 118
31192: AND
31193: IFFALSE 31228
31195: GO 31197
31197: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31198: LD_INT 28
31200: PPUSH
31201: LD_OWVAR 2
31205: PPUSH
31206: LD_INT 2
31208: PPUSH
31209: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31213: LD_INT 30
31215: PPUSH
31216: LD_OWVAR 2
31220: PPUSH
31221: LD_INT 2
31223: PPUSH
31224: CALL_OW 322
// end ;
31228: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31229: LD_EXP 67
31233: PUSH
31234: LD_EXP 119
31238: AND
31239: IFFALSE 31360
31241: GO 31243
31243: DISABLE
31244: LD_INT 0
31246: PPUSH
31247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31248: LD_ADDR_VAR 0 2
31252: PUSH
31253: LD_INT 22
31255: PUSH
31256: LD_OWVAR 2
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 21
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 3
31277: PUSH
31278: LD_INT 23
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: PPUSH
31297: CALL_OW 69
31301: ST_TO_ADDR
// if not tmp then
31302: LD_VAR 0 2
31306: NOT
31307: IFFALSE 31311
// exit ;
31309: GO 31360
// for i in tmp do
31311: LD_ADDR_VAR 0 1
31315: PUSH
31316: LD_VAR 0 2
31320: PUSH
31321: FOR_IN
31322: IFFALSE 31358
// begin if Crawls ( i ) then
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 318
31333: IFFALSE 31344
// ComWalk ( i ) ;
31335: LD_VAR 0 1
31339: PPUSH
31340: CALL_OW 138
// SetClass ( i , 2 ) ;
31344: LD_VAR 0 1
31348: PPUSH
31349: LD_INT 2
31351: PPUSH
31352: CALL_OW 336
// end ;
31356: GO 31321
31358: POP
31359: POP
// end ;
31360: PPOPN 2
31362: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31363: LD_EXP 67
31367: PUSH
31368: LD_EXP 120
31372: AND
31373: IFFALSE 31661
31375: GO 31377
31377: DISABLE
31378: LD_INT 0
31380: PPUSH
31381: PPUSH
31382: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31383: LD_OWVAR 2
31387: PPUSH
31388: LD_INT 9
31390: PPUSH
31391: LD_INT 1
31393: PPUSH
31394: LD_INT 1
31396: PPUSH
31397: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31401: LD_INT 9
31403: PPUSH
31404: LD_OWVAR 2
31408: PPUSH
31409: CALL_OW 343
// uc_side := 9 ;
31413: LD_ADDR_OWVAR 20
31417: PUSH
31418: LD_INT 9
31420: ST_TO_ADDR
// uc_nation := 2 ;
31421: LD_ADDR_OWVAR 21
31425: PUSH
31426: LD_INT 2
31428: ST_TO_ADDR
// hc_name := Dark Warrior ;
31429: LD_ADDR_OWVAR 26
31433: PUSH
31434: LD_STRING Dark Warrior
31436: ST_TO_ADDR
// hc_gallery :=  ;
31437: LD_ADDR_OWVAR 33
31441: PUSH
31442: LD_STRING 
31444: ST_TO_ADDR
// hc_noskilllimit := true ;
31445: LD_ADDR_OWVAR 76
31449: PUSH
31450: LD_INT 1
31452: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31453: LD_ADDR_OWVAR 31
31457: PUSH
31458: LD_INT 30
31460: PUSH
31461: LD_INT 30
31463: PUSH
31464: LD_INT 30
31466: PUSH
31467: LD_INT 30
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// un := CreateHuman ;
31476: LD_ADDR_VAR 0 3
31480: PUSH
31481: CALL_OW 44
31485: ST_TO_ADDR
// hc_noskilllimit := false ;
31486: LD_ADDR_OWVAR 76
31490: PUSH
31491: LD_INT 0
31493: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31494: LD_VAR 0 3
31498: PPUSH
31499: LD_INT 1
31501: PPUSH
31502: CALL_OW 51
// ToLua ( playRanger() ) ;
31506: LD_STRING playRanger()
31508: PPUSH
31509: CALL_OW 559
// p := 0 ;
31513: LD_ADDR_VAR 0 2
31517: PUSH
31518: LD_INT 0
31520: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31521: LD_INT 35
31523: PPUSH
31524: CALL_OW 67
// p := p + 1 ;
31528: LD_ADDR_VAR 0 2
31532: PUSH
31533: LD_VAR 0 2
31537: PUSH
31538: LD_INT 1
31540: PLUS
31541: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31542: LD_VAR 0 3
31546: PPUSH
31547: CALL_OW 256
31551: PUSH
31552: LD_INT 1000
31554: LESS
31555: IFFALSE 31569
// SetLives ( un , 1000 ) ;
31557: LD_VAR 0 3
31561: PPUSH
31562: LD_INT 1000
31564: PPUSH
31565: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31569: LD_VAR 0 3
31573: PPUSH
31574: LD_INT 81
31576: PUSH
31577: LD_OWVAR 2
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 91
31588: PUSH
31589: LD_VAR 0 3
31593: PUSH
31594: LD_INT 30
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PPUSH
31606: CALL_OW 69
31610: PPUSH
31611: LD_VAR 0 3
31615: PPUSH
31616: CALL_OW 74
31620: PPUSH
31621: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31625: LD_VAR 0 2
31629: PUSH
31630: LD_INT 80
31632: GREATER
31633: PUSH
31634: LD_VAR 0 3
31638: PPUSH
31639: CALL_OW 301
31643: OR
31644: IFFALSE 31521
// if un then
31646: LD_VAR 0 3
31650: IFFALSE 31661
// RemoveUnit ( un ) ;
31652: LD_VAR 0 3
31656: PPUSH
31657: CALL_OW 64
// end ;
31661: PPOPN 3
31663: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31664: LD_EXP 121
31668: IFFALSE 31784
31670: GO 31672
31672: DISABLE
31673: LD_INT 0
31675: PPUSH
31676: PPUSH
31677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31678: LD_ADDR_VAR 0 2
31682: PUSH
31683: LD_INT 81
31685: PUSH
31686: LD_OWVAR 2
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 21
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PPUSH
31709: CALL_OW 69
31713: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31714: LD_STRING playComputer()
31716: PPUSH
31717: CALL_OW 559
// if not tmp then
31721: LD_VAR 0 2
31725: NOT
31726: IFFALSE 31730
// exit ;
31728: GO 31784
// for i in tmp do
31730: LD_ADDR_VAR 0 1
31734: PUSH
31735: LD_VAR 0 2
31739: PUSH
31740: FOR_IN
31741: IFFALSE 31782
// for j := 1 to 4 do
31743: LD_ADDR_VAR 0 3
31747: PUSH
31748: DOUBLE
31749: LD_INT 1
31751: DEC
31752: ST_TO_ADDR
31753: LD_INT 4
31755: PUSH
31756: FOR_TO
31757: IFFALSE 31778
// SetSkill ( i , j , 10 ) ;
31759: LD_VAR 0 1
31763: PPUSH
31764: LD_VAR 0 3
31768: PPUSH
31769: LD_INT 10
31771: PPUSH
31772: CALL_OW 237
31776: GO 31756
31778: POP
31779: POP
31780: GO 31740
31782: POP
31783: POP
// end ;
31784: PPOPN 3
31786: END
// every 0 0$1 trigger s30 do var i , tmp ;
31787: LD_EXP 122
31791: IFFALSE 31860
31793: GO 31795
31795: DISABLE
31796: LD_INT 0
31798: PPUSH
31799: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31800: LD_ADDR_VAR 0 2
31804: PUSH
31805: LD_INT 22
31807: PUSH
31808: LD_OWVAR 2
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PPUSH
31817: CALL_OW 69
31821: ST_TO_ADDR
// if not tmp then
31822: LD_VAR 0 2
31826: NOT
31827: IFFALSE 31831
// exit ;
31829: GO 31860
// for i in tmp do
31831: LD_ADDR_VAR 0 1
31835: PUSH
31836: LD_VAR 0 2
31840: PUSH
31841: FOR_IN
31842: IFFALSE 31858
// SetLives ( i , 300 ) ;
31844: LD_VAR 0 1
31848: PPUSH
31849: LD_INT 300
31851: PPUSH
31852: CALL_OW 234
31856: GO 31841
31858: POP
31859: POP
// end ;
31860: PPOPN 2
31862: END
// every 0 0$1 trigger s60 do var i , tmp ;
31863: LD_EXP 123
31867: IFFALSE 31936
31869: GO 31871
31871: DISABLE
31872: LD_INT 0
31874: PPUSH
31875: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31876: LD_ADDR_VAR 0 2
31880: PUSH
31881: LD_INT 22
31883: PUSH
31884: LD_OWVAR 2
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PPUSH
31893: CALL_OW 69
31897: ST_TO_ADDR
// if not tmp then
31898: LD_VAR 0 2
31902: NOT
31903: IFFALSE 31907
// exit ;
31905: GO 31936
// for i in tmp do
31907: LD_ADDR_VAR 0 1
31911: PUSH
31912: LD_VAR 0 2
31916: PUSH
31917: FOR_IN
31918: IFFALSE 31934
// SetLives ( i , 600 ) ;
31920: LD_VAR 0 1
31924: PPUSH
31925: LD_INT 600
31927: PPUSH
31928: CALL_OW 234
31932: GO 31917
31934: POP
31935: POP
// end ;
31936: PPOPN 2
31938: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31939: LD_INT 0
31941: PPUSH
// case cmd of 301 :
31942: LD_VAR 0 1
31946: PUSH
31947: LD_INT 301
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31987
31955: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31956: LD_VAR 0 6
31960: PPUSH
31961: LD_VAR 0 7
31965: PPUSH
31966: LD_VAR 0 8
31970: PPUSH
31971: LD_VAR 0 4
31975: PPUSH
31976: LD_VAR 0 5
31980: PPUSH
31981: CALL 33188 0 5
31985: GO 32108
31987: LD_INT 302
31989: DOUBLE
31990: EQUAL
31991: IFTRUE 31995
31993: GO 32032
31995: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31996: LD_VAR 0 6
32000: PPUSH
32001: LD_VAR 0 7
32005: PPUSH
32006: LD_VAR 0 8
32010: PPUSH
32011: LD_VAR 0 9
32015: PPUSH
32016: LD_VAR 0 4
32020: PPUSH
32021: LD_VAR 0 5
32025: PPUSH
32026: CALL 33279 0 6
32030: GO 32108
32032: LD_INT 303
32034: DOUBLE
32035: EQUAL
32036: IFTRUE 32040
32038: GO 32077
32040: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32041: LD_VAR 0 6
32045: PPUSH
32046: LD_VAR 0 7
32050: PPUSH
32051: LD_VAR 0 8
32055: PPUSH
32056: LD_VAR 0 9
32060: PPUSH
32061: LD_VAR 0 4
32065: PPUSH
32066: LD_VAR 0 5
32070: PPUSH
32071: CALL 32113 0 6
32075: GO 32108
32077: LD_INT 304
32079: DOUBLE
32080: EQUAL
32081: IFTRUE 32085
32083: GO 32107
32085: POP
// hHackTeleport ( unit , x , y ) ; end ;
32086: LD_VAR 0 2
32090: PPUSH
32091: LD_VAR 0 4
32095: PPUSH
32096: LD_VAR 0 5
32100: PPUSH
32101: CALL 33872 0 3
32105: GO 32108
32107: POP
// end ;
32108: LD_VAR 0 12
32112: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32113: LD_INT 0
32115: PPUSH
32116: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32117: LD_VAR 0 1
32121: PUSH
32122: LD_INT 1
32124: LESS
32125: PUSH
32126: LD_VAR 0 1
32130: PUSH
32131: LD_INT 3
32133: GREATER
32134: OR
32135: PUSH
32136: LD_VAR 0 5
32140: PPUSH
32141: LD_VAR 0 6
32145: PPUSH
32146: CALL_OW 428
32150: OR
32151: IFFALSE 32155
// exit ;
32153: GO 32875
// uc_side := your_side ;
32155: LD_ADDR_OWVAR 20
32159: PUSH
32160: LD_OWVAR 2
32164: ST_TO_ADDR
// uc_nation := nation ;
32165: LD_ADDR_OWVAR 21
32169: PUSH
32170: LD_VAR 0 1
32174: ST_TO_ADDR
// bc_level = 1 ;
32175: LD_ADDR_OWVAR 43
32179: PUSH
32180: LD_INT 1
32182: ST_TO_ADDR
// case btype of 1 :
32183: LD_VAR 0 2
32187: PUSH
32188: LD_INT 1
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32207
32196: POP
// bc_type := b_depot ; 2 :
32197: LD_ADDR_OWVAR 42
32201: PUSH
32202: LD_INT 0
32204: ST_TO_ADDR
32205: GO 32819
32207: LD_INT 2
32209: DOUBLE
32210: EQUAL
32211: IFTRUE 32215
32213: GO 32226
32215: POP
// bc_type := b_warehouse ; 3 :
32216: LD_ADDR_OWVAR 42
32220: PUSH
32221: LD_INT 1
32223: ST_TO_ADDR
32224: GO 32819
32226: LD_INT 3
32228: DOUBLE
32229: EQUAL
32230: IFTRUE 32234
32232: GO 32245
32234: POP
// bc_type := b_lab ; 4 .. 9 :
32235: LD_ADDR_OWVAR 42
32239: PUSH
32240: LD_INT 6
32242: ST_TO_ADDR
32243: GO 32819
32245: LD_INT 4
32247: DOUBLE
32248: GREATEREQUAL
32249: IFFALSE 32257
32251: LD_INT 9
32253: DOUBLE
32254: LESSEQUAL
32255: IFTRUE 32259
32257: GO 32311
32259: POP
// begin bc_type := b_lab_half ;
32260: LD_ADDR_OWVAR 42
32264: PUSH
32265: LD_INT 7
32267: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32268: LD_ADDR_OWVAR 44
32272: PUSH
32273: LD_INT 10
32275: PUSH
32276: LD_INT 11
32278: PUSH
32279: LD_INT 12
32281: PUSH
32282: LD_INT 15
32284: PUSH
32285: LD_INT 14
32287: PUSH
32288: LD_INT 13
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: PUSH
32299: LD_VAR 0 2
32303: PUSH
32304: LD_INT 3
32306: MINUS
32307: ARRAY
32308: ST_TO_ADDR
// end ; 10 .. 13 :
32309: GO 32819
32311: LD_INT 10
32313: DOUBLE
32314: GREATEREQUAL
32315: IFFALSE 32323
32317: LD_INT 13
32319: DOUBLE
32320: LESSEQUAL
32321: IFTRUE 32325
32323: GO 32402
32325: POP
// begin bc_type := b_lab_full ;
32326: LD_ADDR_OWVAR 42
32330: PUSH
32331: LD_INT 8
32333: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32334: LD_ADDR_OWVAR 44
32338: PUSH
32339: LD_INT 10
32341: PUSH
32342: LD_INT 12
32344: PUSH
32345: LD_INT 14
32347: PUSH
32348: LD_INT 13
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: PUSH
32357: LD_VAR 0 2
32361: PUSH
32362: LD_INT 9
32364: MINUS
32365: ARRAY
32366: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32367: LD_ADDR_OWVAR 45
32371: PUSH
32372: LD_INT 11
32374: PUSH
32375: LD_INT 15
32377: PUSH
32378: LD_INT 12
32380: PUSH
32381: LD_INT 15
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: PUSH
32390: LD_VAR 0 2
32394: PUSH
32395: LD_INT 9
32397: MINUS
32398: ARRAY
32399: ST_TO_ADDR
// end ; 14 :
32400: GO 32819
32402: LD_INT 14
32404: DOUBLE
32405: EQUAL
32406: IFTRUE 32410
32408: GO 32421
32410: POP
// bc_type := b_workshop ; 15 :
32411: LD_ADDR_OWVAR 42
32415: PUSH
32416: LD_INT 2
32418: ST_TO_ADDR
32419: GO 32819
32421: LD_INT 15
32423: DOUBLE
32424: EQUAL
32425: IFTRUE 32429
32427: GO 32440
32429: POP
// bc_type := b_factory ; 16 :
32430: LD_ADDR_OWVAR 42
32434: PUSH
32435: LD_INT 3
32437: ST_TO_ADDR
32438: GO 32819
32440: LD_INT 16
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32448
32446: GO 32459
32448: POP
// bc_type := b_ext_gun ; 17 :
32449: LD_ADDR_OWVAR 42
32453: PUSH
32454: LD_INT 17
32456: ST_TO_ADDR
32457: GO 32819
32459: LD_INT 17
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32495
32467: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32468: LD_ADDR_OWVAR 42
32472: PUSH
32473: LD_INT 19
32475: PUSH
32476: LD_INT 23
32478: PUSH
32479: LD_INT 19
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: PUSH
32487: LD_VAR 0 1
32491: ARRAY
32492: ST_TO_ADDR
32493: GO 32819
32495: LD_INT 18
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32514
32503: POP
// bc_type := b_ext_radar ; 19 :
32504: LD_ADDR_OWVAR 42
32508: PUSH
32509: LD_INT 20
32511: ST_TO_ADDR
32512: GO 32819
32514: LD_INT 19
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32533
32522: POP
// bc_type := b_ext_radio ; 20 :
32523: LD_ADDR_OWVAR 42
32527: PUSH
32528: LD_INT 22
32530: ST_TO_ADDR
32531: GO 32819
32533: LD_INT 20
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32552
32541: POP
// bc_type := b_ext_siberium ; 21 :
32542: LD_ADDR_OWVAR 42
32546: PUSH
32547: LD_INT 21
32549: ST_TO_ADDR
32550: GO 32819
32552: LD_INT 21
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32571
32560: POP
// bc_type := b_ext_computer ; 22 :
32561: LD_ADDR_OWVAR 42
32565: PUSH
32566: LD_INT 24
32568: ST_TO_ADDR
32569: GO 32819
32571: LD_INT 22
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32579
32577: GO 32590
32579: POP
// bc_type := b_ext_track ; 23 :
32580: LD_ADDR_OWVAR 42
32584: PUSH
32585: LD_INT 16
32587: ST_TO_ADDR
32588: GO 32819
32590: LD_INT 23
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32609
32598: POP
// bc_type := b_ext_laser ; 24 :
32599: LD_ADDR_OWVAR 42
32603: PUSH
32604: LD_INT 25
32606: ST_TO_ADDR
32607: GO 32819
32609: LD_INT 24
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32628
32617: POP
// bc_type := b_control_tower ; 25 :
32618: LD_ADDR_OWVAR 42
32622: PUSH
32623: LD_INT 36
32625: ST_TO_ADDR
32626: GO 32819
32628: LD_INT 25
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32647
32636: POP
// bc_type := b_breastwork ; 26 :
32637: LD_ADDR_OWVAR 42
32641: PUSH
32642: LD_INT 31
32644: ST_TO_ADDR
32645: GO 32819
32647: LD_INT 26
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32666
32655: POP
// bc_type := b_bunker ; 27 :
32656: LD_ADDR_OWVAR 42
32660: PUSH
32661: LD_INT 32
32663: ST_TO_ADDR
32664: GO 32819
32666: LD_INT 27
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32685
32674: POP
// bc_type := b_turret ; 28 :
32675: LD_ADDR_OWVAR 42
32679: PUSH
32680: LD_INT 33
32682: ST_TO_ADDR
32683: GO 32819
32685: LD_INT 28
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32704
32693: POP
// bc_type := b_armoury ; 29 :
32694: LD_ADDR_OWVAR 42
32698: PUSH
32699: LD_INT 4
32701: ST_TO_ADDR
32702: GO 32819
32704: LD_INT 29
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32723
32712: POP
// bc_type := b_barracks ; 30 :
32713: LD_ADDR_OWVAR 42
32717: PUSH
32718: LD_INT 5
32720: ST_TO_ADDR
32721: GO 32819
32723: LD_INT 30
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32742
32731: POP
// bc_type := b_solar_power ; 31 :
32732: LD_ADDR_OWVAR 42
32736: PUSH
32737: LD_INT 27
32739: ST_TO_ADDR
32740: GO 32819
32742: LD_INT 31
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32761
32750: POP
// bc_type := b_oil_power ; 32 :
32751: LD_ADDR_OWVAR 42
32755: PUSH
32756: LD_INT 26
32758: ST_TO_ADDR
32759: GO 32819
32761: LD_INT 32
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32780
32769: POP
// bc_type := b_siberite_power ; 33 :
32770: LD_ADDR_OWVAR 42
32774: PUSH
32775: LD_INT 28
32777: ST_TO_ADDR
32778: GO 32819
32780: LD_INT 33
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32799
32788: POP
// bc_type := b_oil_mine ; 34 :
32789: LD_ADDR_OWVAR 42
32793: PUSH
32794: LD_INT 29
32796: ST_TO_ADDR
32797: GO 32819
32799: LD_INT 34
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32818
32807: POP
// bc_type := b_siberite_mine ; end ;
32808: LD_ADDR_OWVAR 42
32812: PUSH
32813: LD_INT 30
32815: ST_TO_ADDR
32816: GO 32819
32818: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32819: LD_ADDR_VAR 0 8
32823: PUSH
32824: LD_VAR 0 5
32828: PPUSH
32829: LD_VAR 0 6
32833: PPUSH
32834: LD_VAR 0 3
32838: PPUSH
32839: CALL_OW 47
32843: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32844: LD_OWVAR 42
32848: PUSH
32849: LD_INT 32
32851: PUSH
32852: LD_INT 33
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: IN
32859: IFFALSE 32875
// PlaceWeaponTurret ( b , weapon ) ;
32861: LD_VAR 0 8
32865: PPUSH
32866: LD_VAR 0 4
32870: PPUSH
32871: CALL_OW 431
// end ;
32875: LD_VAR 0 7
32879: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32880: LD_INT 0
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32886: LD_ADDR_VAR 0 4
32890: PUSH
32891: LD_INT 22
32893: PUSH
32894: LD_OWVAR 2
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: LD_INT 30
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 30
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PPUSH
32935: CALL_OW 69
32939: ST_TO_ADDR
// if not tmp then
32940: LD_VAR 0 4
32944: NOT
32945: IFFALSE 32949
// exit ;
32947: GO 33008
// for i in tmp do
32949: LD_ADDR_VAR 0 2
32953: PUSH
32954: LD_VAR 0 4
32958: PUSH
32959: FOR_IN
32960: IFFALSE 33006
// for j = 1 to 3 do
32962: LD_ADDR_VAR 0 3
32966: PUSH
32967: DOUBLE
32968: LD_INT 1
32970: DEC
32971: ST_TO_ADDR
32972: LD_INT 3
32974: PUSH
32975: FOR_TO
32976: IFFALSE 33002
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32978: LD_VAR 0 2
32982: PPUSH
32983: CALL_OW 274
32987: PPUSH
32988: LD_VAR 0 3
32992: PPUSH
32993: LD_INT 99999
32995: PPUSH
32996: CALL_OW 277
33000: GO 32975
33002: POP
33003: POP
33004: GO 32959
33006: POP
33007: POP
// end ;
33008: LD_VAR 0 1
33012: RET
// export function hHackSetLevel10 ; var i , j ; begin
33013: LD_INT 0
33015: PPUSH
33016: PPUSH
33017: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33018: LD_ADDR_VAR 0 2
33022: PUSH
33023: LD_INT 21
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PPUSH
33033: CALL_OW 69
33037: PUSH
33038: FOR_IN
33039: IFFALSE 33091
// if IsSelected ( i ) then
33041: LD_VAR 0 2
33045: PPUSH
33046: CALL_OW 306
33050: IFFALSE 33089
// begin for j := 1 to 4 do
33052: LD_ADDR_VAR 0 3
33056: PUSH
33057: DOUBLE
33058: LD_INT 1
33060: DEC
33061: ST_TO_ADDR
33062: LD_INT 4
33064: PUSH
33065: FOR_TO
33066: IFFALSE 33087
// SetSkill ( i , j , 10 ) ;
33068: LD_VAR 0 2
33072: PPUSH
33073: LD_VAR 0 3
33077: PPUSH
33078: LD_INT 10
33080: PPUSH
33081: CALL_OW 237
33085: GO 33065
33087: POP
33088: POP
// end ;
33089: GO 33038
33091: POP
33092: POP
// end ;
33093: LD_VAR 0 1
33097: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33098: LD_INT 0
33100: PPUSH
33101: PPUSH
33102: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33103: LD_ADDR_VAR 0 2
33107: PUSH
33108: LD_INT 22
33110: PUSH
33111: LD_OWVAR 2
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 21
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PPUSH
33134: CALL_OW 69
33138: PUSH
33139: FOR_IN
33140: IFFALSE 33181
// begin for j := 1 to 4 do
33142: LD_ADDR_VAR 0 3
33146: PUSH
33147: DOUBLE
33148: LD_INT 1
33150: DEC
33151: ST_TO_ADDR
33152: LD_INT 4
33154: PUSH
33155: FOR_TO
33156: IFFALSE 33177
// SetSkill ( i , j , 10 ) ;
33158: LD_VAR 0 2
33162: PPUSH
33163: LD_VAR 0 3
33167: PPUSH
33168: LD_INT 10
33170: PPUSH
33171: CALL_OW 237
33175: GO 33155
33177: POP
33178: POP
// end ;
33179: GO 33139
33181: POP
33182: POP
// end ;
33183: LD_VAR 0 1
33187: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33188: LD_INT 0
33190: PPUSH
// uc_side := your_side ;
33191: LD_ADDR_OWVAR 20
33195: PUSH
33196: LD_OWVAR 2
33200: ST_TO_ADDR
// uc_nation := nation ;
33201: LD_ADDR_OWVAR 21
33205: PUSH
33206: LD_VAR 0 1
33210: ST_TO_ADDR
// InitHc ;
33211: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33215: LD_INT 0
33217: PPUSH
33218: LD_VAR 0 2
33222: PPUSH
33223: LD_VAR 0 3
33227: PPUSH
33228: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33232: LD_VAR 0 4
33236: PPUSH
33237: LD_VAR 0 5
33241: PPUSH
33242: CALL_OW 428
33246: PUSH
33247: LD_INT 0
33249: EQUAL
33250: IFFALSE 33274
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33252: CALL_OW 44
33256: PPUSH
33257: LD_VAR 0 4
33261: PPUSH
33262: LD_VAR 0 5
33266: PPUSH
33267: LD_INT 1
33269: PPUSH
33270: CALL_OW 48
// end ;
33274: LD_VAR 0 6
33278: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33279: LD_INT 0
33281: PPUSH
33282: PPUSH
// uc_side := your_side ;
33283: LD_ADDR_OWVAR 20
33287: PUSH
33288: LD_OWVAR 2
33292: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33293: LD_VAR 0 1
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 2
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: LD_INT 5
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: IN
33320: IFFALSE 33332
// uc_nation := nation_american else
33322: LD_ADDR_OWVAR 21
33326: PUSH
33327: LD_INT 1
33329: ST_TO_ADDR
33330: GO 33375
// if chassis in [ 11 , 12 , 13 , 14 ] then
33332: LD_VAR 0 1
33336: PUSH
33337: LD_INT 11
33339: PUSH
33340: LD_INT 12
33342: PUSH
33343: LD_INT 13
33345: PUSH
33346: LD_INT 14
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: IN
33355: IFFALSE 33367
// uc_nation := nation_arabian else
33357: LD_ADDR_OWVAR 21
33361: PUSH
33362: LD_INT 2
33364: ST_TO_ADDR
33365: GO 33375
// uc_nation := nation_russian ;
33367: LD_ADDR_OWVAR 21
33371: PUSH
33372: LD_INT 3
33374: ST_TO_ADDR
// vc_chassis := chassis ;
33375: LD_ADDR_OWVAR 37
33379: PUSH
33380: LD_VAR 0 1
33384: ST_TO_ADDR
// vc_engine := engine ;
33385: LD_ADDR_OWVAR 39
33389: PUSH
33390: LD_VAR 0 2
33394: ST_TO_ADDR
// vc_control := control ;
33395: LD_ADDR_OWVAR 38
33399: PUSH
33400: LD_VAR 0 3
33404: ST_TO_ADDR
// vc_weapon := weapon ;
33405: LD_ADDR_OWVAR 40
33409: PUSH
33410: LD_VAR 0 4
33414: ST_TO_ADDR
// un := CreateVehicle ;
33415: LD_ADDR_VAR 0 8
33419: PUSH
33420: CALL_OW 45
33424: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33425: LD_VAR 0 8
33429: PPUSH
33430: LD_INT 0
33432: PPUSH
33433: LD_INT 5
33435: PPUSH
33436: CALL_OW 12
33440: PPUSH
33441: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33445: LD_VAR 0 8
33449: PPUSH
33450: LD_VAR 0 5
33454: PPUSH
33455: LD_VAR 0 6
33459: PPUSH
33460: LD_INT 1
33462: PPUSH
33463: CALL_OW 48
// end ;
33467: LD_VAR 0 7
33471: RET
// export hInvincible ; every 1 do
33472: GO 33474
33474: DISABLE
// hInvincible := [ ] ;
33475: LD_ADDR_EXP 124
33479: PUSH
33480: EMPTY
33481: ST_TO_ADDR
33482: END
// every 10 do var i ;
33483: GO 33485
33485: DISABLE
33486: LD_INT 0
33488: PPUSH
// begin enable ;
33489: ENABLE
// if not hInvincible then
33490: LD_EXP 124
33494: NOT
33495: IFFALSE 33499
// exit ;
33497: GO 33543
// for i in hInvincible do
33499: LD_ADDR_VAR 0 1
33503: PUSH
33504: LD_EXP 124
33508: PUSH
33509: FOR_IN
33510: IFFALSE 33541
// if GetLives ( i ) < 1000 then
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL_OW 256
33521: PUSH
33522: LD_INT 1000
33524: LESS
33525: IFFALSE 33539
// SetLives ( i , 1000 ) ;
33527: LD_VAR 0 1
33531: PPUSH
33532: LD_INT 1000
33534: PPUSH
33535: CALL_OW 234
33539: GO 33509
33541: POP
33542: POP
// end ;
33543: PPOPN 1
33545: END
// export function hHackInvincible ; var i ; begin
33546: LD_INT 0
33548: PPUSH
33549: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33550: LD_ADDR_VAR 0 2
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: LD_INT 21
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 21
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: LIST
33582: PPUSH
33583: CALL_OW 69
33587: PUSH
33588: FOR_IN
33589: IFFALSE 33650
// if IsSelected ( i ) then
33591: LD_VAR 0 2
33595: PPUSH
33596: CALL_OW 306
33600: IFFALSE 33648
// begin if i in hInvincible then
33602: LD_VAR 0 2
33606: PUSH
33607: LD_EXP 124
33611: IN
33612: IFFALSE 33632
// hInvincible := hInvincible diff i else
33614: LD_ADDR_EXP 124
33618: PUSH
33619: LD_EXP 124
33623: PUSH
33624: LD_VAR 0 2
33628: DIFF
33629: ST_TO_ADDR
33630: GO 33648
// hInvincible := hInvincible union i ;
33632: LD_ADDR_EXP 124
33636: PUSH
33637: LD_EXP 124
33641: PUSH
33642: LD_VAR 0 2
33646: UNION
33647: ST_TO_ADDR
// end ;
33648: GO 33588
33650: POP
33651: POP
// end ;
33652: LD_VAR 0 1
33656: RET
// export function hHackInvisible ; var i , j ; begin
33657: LD_INT 0
33659: PPUSH
33660: PPUSH
33661: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33662: LD_ADDR_VAR 0 2
33666: PUSH
33667: LD_INT 21
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PPUSH
33677: CALL_OW 69
33681: PUSH
33682: FOR_IN
33683: IFFALSE 33707
// if IsSelected ( i ) then
33685: LD_VAR 0 2
33689: PPUSH
33690: CALL_OW 306
33694: IFFALSE 33705
// ComForceInvisible ( i ) ;
33696: LD_VAR 0 2
33700: PPUSH
33701: CALL_OW 496
33705: GO 33682
33707: POP
33708: POP
// end ;
33709: LD_VAR 0 1
33713: RET
// export function hHackChangeYourSide ; begin
33714: LD_INT 0
33716: PPUSH
// if your_side = 8 then
33717: LD_OWVAR 2
33721: PUSH
33722: LD_INT 8
33724: EQUAL
33725: IFFALSE 33737
// your_side := 0 else
33727: LD_ADDR_OWVAR 2
33731: PUSH
33732: LD_INT 0
33734: ST_TO_ADDR
33735: GO 33751
// your_side := your_side + 1 ;
33737: LD_ADDR_OWVAR 2
33741: PUSH
33742: LD_OWVAR 2
33746: PUSH
33747: LD_INT 1
33749: PLUS
33750: ST_TO_ADDR
// end ;
33751: LD_VAR 0 1
33755: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33756: LD_INT 0
33758: PPUSH
33759: PPUSH
33760: PPUSH
// for i in all_units do
33761: LD_ADDR_VAR 0 2
33765: PUSH
33766: LD_OWVAR 3
33770: PUSH
33771: FOR_IN
33772: IFFALSE 33850
// if IsSelected ( i ) then
33774: LD_VAR 0 2
33778: PPUSH
33779: CALL_OW 306
33783: IFFALSE 33848
// begin j := GetSide ( i ) ;
33785: LD_ADDR_VAR 0 3
33789: PUSH
33790: LD_VAR 0 2
33794: PPUSH
33795: CALL_OW 255
33799: ST_TO_ADDR
// if j = 8 then
33800: LD_VAR 0 3
33804: PUSH
33805: LD_INT 8
33807: EQUAL
33808: IFFALSE 33820
// j := 0 else
33810: LD_ADDR_VAR 0 3
33814: PUSH
33815: LD_INT 0
33817: ST_TO_ADDR
33818: GO 33834
// j := j + 1 ;
33820: LD_ADDR_VAR 0 3
33824: PUSH
33825: LD_VAR 0 3
33829: PUSH
33830: LD_INT 1
33832: PLUS
33833: ST_TO_ADDR
// SetSide ( i , j ) ;
33834: LD_VAR 0 2
33838: PPUSH
33839: LD_VAR 0 3
33843: PPUSH
33844: CALL_OW 235
// end ;
33848: GO 33771
33850: POP
33851: POP
// end ;
33852: LD_VAR 0 1
33856: RET
// export function hHackFog ; begin
33857: LD_INT 0
33859: PPUSH
// FogOff ( true ) ;
33860: LD_INT 1
33862: PPUSH
33863: CALL_OW 344
// end ;
33867: LD_VAR 0 1
33871: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33872: LD_INT 0
33874: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33875: LD_VAR 0 1
33879: PPUSH
33880: LD_VAR 0 2
33884: PPUSH
33885: LD_VAR 0 3
33889: PPUSH
33890: LD_INT 1
33892: PPUSH
33893: LD_INT 1
33895: PPUSH
33896: CALL_OW 483
// CenterOnXY ( x , y ) ;
33900: LD_VAR 0 2
33904: PPUSH
33905: LD_VAR 0 3
33909: PPUSH
33910: CALL_OW 84
// end ; end_of_file
33914: LD_VAR 0 4
33918: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33919: LD_INT 0
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33925: LD_VAR 0 1
33929: PPUSH
33930: CALL_OW 264
33934: PUSH
33935: LD_EXP 52
33939: EQUAL
33940: IFFALSE 34012
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33942: LD_INT 68
33944: PPUSH
33945: LD_VAR 0 1
33949: PPUSH
33950: CALL_OW 255
33954: PPUSH
33955: CALL_OW 321
33959: PUSH
33960: LD_INT 2
33962: EQUAL
33963: IFFALSE 33975
// eff := 70 else
33965: LD_ADDR_VAR 0 4
33969: PUSH
33970: LD_INT 70
33972: ST_TO_ADDR
33973: GO 33983
// eff := 30 ;
33975: LD_ADDR_VAR 0 4
33979: PUSH
33980: LD_INT 30
33982: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33983: LD_VAR 0 1
33987: PPUSH
33988: CALL_OW 250
33992: PPUSH
33993: LD_VAR 0 1
33997: PPUSH
33998: CALL_OW 251
34002: PPUSH
34003: LD_VAR 0 4
34007: PPUSH
34008: CALL_OW 495
// end ; end ;
34012: LD_VAR 0 2
34016: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34017: LD_INT 0
34019: PPUSH
// end ;
34020: LD_VAR 0 4
34024: RET
// export function SOS_Command ( cmd ) ; begin
34025: LD_INT 0
34027: PPUSH
// end ;
34028: LD_VAR 0 2
34032: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34033: LD_INT 0
34035: PPUSH
// end ;
34036: LD_VAR 0 6
34040: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34041: LD_INT 0
34043: PPUSH
34044: PPUSH
// if not vehicle or not factory then
34045: LD_VAR 0 1
34049: NOT
34050: PUSH
34051: LD_VAR 0 2
34055: NOT
34056: OR
34057: IFFALSE 34061
// exit ;
34059: GO 34292
// if factoryWaypoints >= factory then
34061: LD_EXP 125
34065: PUSH
34066: LD_VAR 0 2
34070: GREATEREQUAL
34071: IFFALSE 34292
// if factoryWaypoints [ factory ] then
34073: LD_EXP 125
34077: PUSH
34078: LD_VAR 0 2
34082: ARRAY
34083: IFFALSE 34292
// begin if GetControl ( vehicle ) = control_manual then
34085: LD_VAR 0 1
34089: PPUSH
34090: CALL_OW 263
34094: PUSH
34095: LD_INT 1
34097: EQUAL
34098: IFFALSE 34179
// begin driver := IsDrivenBy ( vehicle ) ;
34100: LD_ADDR_VAR 0 4
34104: PUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: CALL_OW 311
34114: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34115: LD_VAR 0 4
34119: PPUSH
34120: LD_EXP 125
34124: PUSH
34125: LD_VAR 0 2
34129: ARRAY
34130: PUSH
34131: LD_INT 1
34133: ARRAY
34134: PPUSH
34135: LD_EXP 125
34139: PUSH
34140: LD_VAR 0 2
34144: ARRAY
34145: PUSH
34146: LD_INT 2
34148: ARRAY
34149: PPUSH
34150: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34154: LD_VAR 0 4
34158: PPUSH
34159: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34163: LD_VAR 0 4
34167: PPUSH
34168: LD_VAR 0 2
34172: PPUSH
34173: CALL_OW 180
// end else
34177: GO 34292
// if GetControl ( vehicle ) = control_remote then
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 263
34188: PUSH
34189: LD_INT 2
34191: EQUAL
34192: IFFALSE 34253
// begin wait ( 0 0$2 ) ;
34194: LD_INT 70
34196: PPUSH
34197: CALL_OW 67
// if Connect ( vehicle ) then
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL 46516 0 1
34210: IFFALSE 34251
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34212: LD_VAR 0 1
34216: PPUSH
34217: LD_EXP 125
34221: PUSH
34222: LD_VAR 0 2
34226: ARRAY
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: LD_EXP 125
34236: PUSH
34237: LD_VAR 0 2
34241: ARRAY
34242: PUSH
34243: LD_INT 2
34245: ARRAY
34246: PPUSH
34247: CALL_OW 171
// end else
34251: GO 34292
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
34253: LD_VAR 0 1
34257: PPUSH
34258: LD_EXP 125
34262: PUSH
34263: LD_VAR 0 2
34267: ARRAY
34268: PUSH
34269: LD_INT 1
34271: ARRAY
34272: PPUSH
34273: LD_EXP 125
34277: PUSH
34278: LD_VAR 0 2
34282: ARRAY
34283: PUSH
34284: LD_INT 2
34286: ARRAY
34287: PPUSH
34288: CALL_OW 171
// end ; end ;
34292: LD_VAR 0 3
34296: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34297: LD_INT 0
34299: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34300: LD_VAR 0 1
34304: PUSH
34305: LD_INT 250
34307: EQUAL
34308: PUSH
34309: LD_VAR 0 2
34313: PPUSH
34314: CALL_OW 264
34318: PUSH
34319: LD_EXP 55
34323: EQUAL
34324: AND
34325: IFFALSE 34346
// MinerPlaceMine ( unit , x , y ) ;
34327: LD_VAR 0 2
34331: PPUSH
34332: LD_VAR 0 4
34336: PPUSH
34337: LD_VAR 0 5
34341: PPUSH
34342: CALL 37074 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34346: LD_VAR 0 1
34350: PUSH
34351: LD_INT 251
34353: EQUAL
34354: PUSH
34355: LD_VAR 0 2
34359: PPUSH
34360: CALL_OW 264
34364: PUSH
34365: LD_EXP 55
34369: EQUAL
34370: AND
34371: IFFALSE 34392
// MinerDetonateMine ( unit , x , y ) ;
34373: LD_VAR 0 2
34377: PPUSH
34378: LD_VAR 0 4
34382: PPUSH
34383: LD_VAR 0 5
34387: PPUSH
34388: CALL 37351 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34392: LD_VAR 0 1
34396: PUSH
34397: LD_INT 252
34399: EQUAL
34400: PUSH
34401: LD_VAR 0 2
34405: PPUSH
34406: CALL_OW 264
34410: PUSH
34411: LD_EXP 55
34415: EQUAL
34416: AND
34417: IFFALSE 34438
// MinerCreateMinefield ( unit , x , y ) ;
34419: LD_VAR 0 2
34423: PPUSH
34424: LD_VAR 0 4
34428: PPUSH
34429: LD_VAR 0 5
34433: PPUSH
34434: CALL 37768 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34438: LD_VAR 0 1
34442: PUSH
34443: LD_INT 253
34445: EQUAL
34446: PUSH
34447: LD_VAR 0 2
34451: PPUSH
34452: CALL_OW 257
34456: PUSH
34457: LD_INT 5
34459: EQUAL
34460: AND
34461: IFFALSE 34482
// ComBinocular ( unit , x , y ) ;
34463: LD_VAR 0 2
34467: PPUSH
34468: LD_VAR 0 4
34472: PPUSH
34473: LD_VAR 0 5
34477: PPUSH
34478: CALL 38139 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34482: LD_VAR 0 1
34486: PUSH
34487: LD_INT 254
34489: EQUAL
34490: PUSH
34491: LD_VAR 0 2
34495: PPUSH
34496: CALL_OW 264
34500: PUSH
34501: LD_EXP 50
34505: EQUAL
34506: AND
34507: PUSH
34508: LD_VAR 0 3
34512: PPUSH
34513: CALL_OW 263
34517: PUSH
34518: LD_INT 3
34520: EQUAL
34521: AND
34522: IFFALSE 34538
// HackDestroyVehicle ( unit , selectedUnit ) ;
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_VAR 0 3
34533: PPUSH
34534: CALL 36434 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34538: LD_VAR 0 1
34542: PUSH
34543: LD_INT 255
34545: EQUAL
34546: PUSH
34547: LD_VAR 0 2
34551: PPUSH
34552: CALL_OW 264
34556: PUSH
34557: LD_INT 14
34559: PUSH
34560: LD_INT 53
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: IN
34567: AND
34568: PUSH
34569: LD_VAR 0 4
34573: PPUSH
34574: LD_VAR 0 5
34578: PPUSH
34579: CALL_OW 488
34583: AND
34584: IFFALSE 34608
// CutTreeXYR ( unit , x , y , 12 ) ;
34586: LD_VAR 0 2
34590: PPUSH
34591: LD_VAR 0 4
34595: PPUSH
34596: LD_VAR 0 5
34600: PPUSH
34601: LD_INT 12
34603: PPUSH
34604: CALL 35000 0 4
// if cmd = 256 then
34608: LD_VAR 0 1
34612: PUSH
34613: LD_INT 256
34615: EQUAL
34616: IFFALSE 34637
// SetFactoryWaypoint ( unit , x , y ) ;
34618: LD_VAR 0 2
34622: PPUSH
34623: LD_VAR 0 4
34627: PPUSH
34628: LD_VAR 0 5
34632: PPUSH
34633: CALL 34642 0 3
// end ;
34637: LD_VAR 0 6
34641: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34642: LD_INT 0
34644: PPUSH
34645: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34646: LD_VAR 0 1
34650: NOT
34651: PUSH
34652: LD_VAR 0 2
34656: PPUSH
34657: LD_VAR 0 3
34661: PPUSH
34662: CALL_OW 488
34666: NOT
34667: OR
34668: PUSH
34669: LD_VAR 0 1
34673: PPUSH
34674: CALL_OW 266
34678: PUSH
34679: LD_INT 3
34681: NONEQUAL
34682: PUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 247
34692: PUSH
34693: LD_INT 1
34695: EQUAL
34696: NOT
34697: AND
34698: OR
34699: IFFALSE 34703
// exit ;
34701: GO 34852
// if GetType ( factory ) = unit_human then
34703: LD_VAR 0 1
34707: PPUSH
34708: CALL_OW 247
34712: PUSH
34713: LD_INT 1
34715: EQUAL
34716: IFFALSE 34733
// factory := IsInUnit ( factory ) ;
34718: LD_ADDR_VAR 0 1
34722: PUSH
34723: LD_VAR 0 1
34727: PPUSH
34728: CALL_OW 310
34732: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 266
34742: PUSH
34743: LD_INT 3
34745: NONEQUAL
34746: IFFALSE 34750
// exit ;
34748: GO 34852
// if HexInfo ( x , y ) = factory then
34750: LD_VAR 0 2
34754: PPUSH
34755: LD_VAR 0 3
34759: PPUSH
34760: CALL_OW 428
34764: PUSH
34765: LD_VAR 0 1
34769: EQUAL
34770: IFFALSE 34797
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34772: LD_ADDR_EXP 125
34776: PUSH
34777: LD_EXP 125
34781: PPUSH
34782: LD_VAR 0 1
34786: PPUSH
34787: LD_INT 0
34789: PPUSH
34790: CALL_OW 1
34794: ST_TO_ADDR
34795: GO 34848
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34797: LD_ADDR_EXP 125
34801: PUSH
34802: LD_EXP 125
34806: PPUSH
34807: LD_VAR 0 1
34811: PPUSH
34812: LD_VAR 0 1
34816: PPUSH
34817: CALL_OW 255
34821: PUSH
34822: LD_VAR 0 1
34826: PUSH
34827: LD_VAR 0 2
34831: PUSH
34832: LD_VAR 0 3
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: PPUSH
34843: CALL_OW 1
34847: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34848: CALL 34857 0 0
// end ;
34852: LD_VAR 0 4
34856: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34857: LD_INT 0
34859: PPUSH
34860: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34861: LD_STRING resetFactoryWaypoint();
34863: PPUSH
34864: CALL_OW 559
// if factoryWaypoints then
34868: LD_EXP 125
34872: IFFALSE 34995
// begin for i := 1 to factoryWaypoints do
34874: LD_ADDR_VAR 0 2
34878: PUSH
34879: DOUBLE
34880: LD_INT 1
34882: DEC
34883: ST_TO_ADDR
34884: LD_EXP 125
34888: PUSH
34889: FOR_TO
34890: IFFALSE 34993
// if factoryWaypoints [ i ] then
34892: LD_EXP 125
34896: PUSH
34897: LD_VAR 0 2
34901: ARRAY
34902: IFFALSE 34991
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34904: LD_STRING setFactoryWaypointXY(
34906: PUSH
34907: LD_EXP 125
34911: PUSH
34912: LD_VAR 0 2
34916: ARRAY
34917: PUSH
34918: LD_INT 1
34920: ARRAY
34921: STR
34922: PUSH
34923: LD_STRING ,
34925: STR
34926: PUSH
34927: LD_EXP 125
34931: PUSH
34932: LD_VAR 0 2
34936: ARRAY
34937: PUSH
34938: LD_INT 2
34940: ARRAY
34941: STR
34942: PUSH
34943: LD_STRING ,
34945: STR
34946: PUSH
34947: LD_EXP 125
34951: PUSH
34952: LD_VAR 0 2
34956: ARRAY
34957: PUSH
34958: LD_INT 3
34960: ARRAY
34961: STR
34962: PUSH
34963: LD_STRING ,
34965: STR
34966: PUSH
34967: LD_EXP 125
34971: PUSH
34972: LD_VAR 0 2
34976: ARRAY
34977: PUSH
34978: LD_INT 4
34980: ARRAY
34981: STR
34982: PUSH
34983: LD_STRING )
34985: STR
34986: PPUSH
34987: CALL_OW 559
34991: GO 34889
34993: POP
34994: POP
// end ; end ;
34995: LD_VAR 0 1
34999: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35000: LD_INT 0
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
35009: PPUSH
35010: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35011: LD_VAR 0 1
35015: NOT
35016: PUSH
35017: LD_VAR 0 2
35021: PPUSH
35022: LD_VAR 0 3
35026: PPUSH
35027: CALL_OW 488
35031: NOT
35032: OR
35033: PUSH
35034: LD_VAR 0 4
35038: NOT
35039: OR
35040: IFFALSE 35044
// exit ;
35042: GO 35384
// list := [ ] ;
35044: LD_ADDR_VAR 0 13
35048: PUSH
35049: EMPTY
35050: ST_TO_ADDR
// if x - r < 0 then
35051: LD_VAR 0 2
35055: PUSH
35056: LD_VAR 0 4
35060: MINUS
35061: PUSH
35062: LD_INT 0
35064: LESS
35065: IFFALSE 35077
// min_x := 0 else
35067: LD_ADDR_VAR 0 7
35071: PUSH
35072: LD_INT 0
35074: ST_TO_ADDR
35075: GO 35093
// min_x := x - r ;
35077: LD_ADDR_VAR 0 7
35081: PUSH
35082: LD_VAR 0 2
35086: PUSH
35087: LD_VAR 0 4
35091: MINUS
35092: ST_TO_ADDR
// if y - r < 0 then
35093: LD_VAR 0 3
35097: PUSH
35098: LD_VAR 0 4
35102: MINUS
35103: PUSH
35104: LD_INT 0
35106: LESS
35107: IFFALSE 35119
// min_y := 0 else
35109: LD_ADDR_VAR 0 8
35113: PUSH
35114: LD_INT 0
35116: ST_TO_ADDR
35117: GO 35135
// min_y := y - r ;
35119: LD_ADDR_VAR 0 8
35123: PUSH
35124: LD_VAR 0 3
35128: PUSH
35129: LD_VAR 0 4
35133: MINUS
35134: ST_TO_ADDR
// max_x := x + r ;
35135: LD_ADDR_VAR 0 9
35139: PUSH
35140: LD_VAR 0 2
35144: PUSH
35145: LD_VAR 0 4
35149: PLUS
35150: ST_TO_ADDR
// max_y := y + r ;
35151: LD_ADDR_VAR 0 10
35155: PUSH
35156: LD_VAR 0 3
35160: PUSH
35161: LD_VAR 0 4
35165: PLUS
35166: ST_TO_ADDR
// for _x = min_x to max_x do
35167: LD_ADDR_VAR 0 11
35171: PUSH
35172: DOUBLE
35173: LD_VAR 0 7
35177: DEC
35178: ST_TO_ADDR
35179: LD_VAR 0 9
35183: PUSH
35184: FOR_TO
35185: IFFALSE 35302
// for _y = min_y to max_y do
35187: LD_ADDR_VAR 0 12
35191: PUSH
35192: DOUBLE
35193: LD_VAR 0 8
35197: DEC
35198: ST_TO_ADDR
35199: LD_VAR 0 10
35203: PUSH
35204: FOR_TO
35205: IFFALSE 35298
// begin if not ValidHex ( _x , _y ) then
35207: LD_VAR 0 11
35211: PPUSH
35212: LD_VAR 0 12
35216: PPUSH
35217: CALL_OW 488
35221: NOT
35222: IFFALSE 35226
// continue ;
35224: GO 35204
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35226: LD_VAR 0 11
35230: PPUSH
35231: LD_VAR 0 12
35235: PPUSH
35236: CALL_OW 351
35240: PUSH
35241: LD_VAR 0 11
35245: PPUSH
35246: LD_VAR 0 12
35250: PPUSH
35251: CALL_OW 554
35255: AND
35256: IFFALSE 35296
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35258: LD_ADDR_VAR 0 13
35262: PUSH
35263: LD_VAR 0 13
35267: PPUSH
35268: LD_VAR 0 13
35272: PUSH
35273: LD_INT 1
35275: PLUS
35276: PPUSH
35277: LD_VAR 0 11
35281: PUSH
35282: LD_VAR 0 12
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PPUSH
35291: CALL_OW 2
35295: ST_TO_ADDR
// end ;
35296: GO 35204
35298: POP
35299: POP
35300: GO 35184
35302: POP
35303: POP
// if not list then
35304: LD_VAR 0 13
35308: NOT
35309: IFFALSE 35313
// exit ;
35311: GO 35384
// for i in list do
35313: LD_ADDR_VAR 0 6
35317: PUSH
35318: LD_VAR 0 13
35322: PUSH
35323: FOR_IN
35324: IFFALSE 35382
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35326: LD_VAR 0 1
35330: PPUSH
35331: LD_STRING M
35333: PUSH
35334: LD_VAR 0 6
35338: PUSH
35339: LD_INT 1
35341: ARRAY
35342: PUSH
35343: LD_VAR 0 6
35347: PUSH
35348: LD_INT 2
35350: ARRAY
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: PUSH
35373: EMPTY
35374: LIST
35375: PPUSH
35376: CALL_OW 447
35380: GO 35323
35382: POP
35383: POP
// end ;
35384: LD_VAR 0 5
35388: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35389: LD_EXP 126
35393: NOT
35394: IFFALSE 35444
35396: GO 35398
35398: DISABLE
// begin initHack := true ;
35399: LD_ADDR_EXP 126
35403: PUSH
35404: LD_INT 1
35406: ST_TO_ADDR
// hackTanks := [ ] ;
35407: LD_ADDR_EXP 127
35411: PUSH
35412: EMPTY
35413: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35414: LD_ADDR_EXP 128
35418: PUSH
35419: EMPTY
35420: ST_TO_ADDR
// hackLimit := 3 ;
35421: LD_ADDR_EXP 129
35425: PUSH
35426: LD_INT 3
35428: ST_TO_ADDR
// hackDist := 12 ;
35429: LD_ADDR_EXP 130
35433: PUSH
35434: LD_INT 12
35436: ST_TO_ADDR
// hackCounter := [ ] ;
35437: LD_ADDR_EXP 131
35441: PUSH
35442: EMPTY
35443: ST_TO_ADDR
// end ;
35444: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35445: LD_EXP 126
35449: PUSH
35450: LD_INT 34
35452: PUSH
35453: LD_EXP 50
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PPUSH
35462: CALL_OW 69
35466: AND
35467: IFFALSE 35722
35469: GO 35471
35471: DISABLE
35472: LD_INT 0
35474: PPUSH
35475: PPUSH
// begin enable ;
35476: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35477: LD_ADDR_VAR 0 1
35481: PUSH
35482: LD_INT 34
35484: PUSH
35485: LD_EXP 50
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PPUSH
35494: CALL_OW 69
35498: PUSH
35499: FOR_IN
35500: IFFALSE 35720
// begin if not i in hackTanks then
35502: LD_VAR 0 1
35506: PUSH
35507: LD_EXP 127
35511: IN
35512: NOT
35513: IFFALSE 35596
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35515: LD_ADDR_EXP 127
35519: PUSH
35520: LD_EXP 127
35524: PPUSH
35525: LD_EXP 127
35529: PUSH
35530: LD_INT 1
35532: PLUS
35533: PPUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL_OW 1
35543: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35544: LD_ADDR_EXP 128
35548: PUSH
35549: LD_EXP 128
35553: PPUSH
35554: LD_EXP 128
35558: PUSH
35559: LD_INT 1
35561: PLUS
35562: PPUSH
35563: EMPTY
35564: PPUSH
35565: CALL_OW 1
35569: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35570: LD_ADDR_EXP 131
35574: PUSH
35575: LD_EXP 131
35579: PPUSH
35580: LD_EXP 131
35584: PUSH
35585: LD_INT 1
35587: PLUS
35588: PPUSH
35589: EMPTY
35590: PPUSH
35591: CALL_OW 1
35595: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35596: LD_VAR 0 1
35600: PPUSH
35601: CALL_OW 302
35605: NOT
35606: IFFALSE 35619
// begin HackUnlinkAll ( i ) ;
35608: LD_VAR 0 1
35612: PPUSH
35613: CALL 35725 0 1
// continue ;
35617: GO 35499
// end ; HackCheckCapturedStatus ( i ) ;
35619: LD_VAR 0 1
35623: PPUSH
35624: CALL 36168 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35628: LD_ADDR_VAR 0 2
35632: PUSH
35633: LD_INT 81
35635: PUSH
35636: LD_VAR 0 1
35640: PPUSH
35641: CALL_OW 255
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 33
35652: PUSH
35653: LD_INT 3
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 91
35662: PUSH
35663: LD_VAR 0 1
35667: PUSH
35668: LD_EXP 130
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 50
35680: PUSH
35681: EMPTY
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: PPUSH
35690: CALL_OW 69
35694: ST_TO_ADDR
// if not tmp then
35695: LD_VAR 0 2
35699: NOT
35700: IFFALSE 35704
// continue ;
35702: GO 35499
// HackLink ( i , tmp ) ;
35704: LD_VAR 0 1
35708: PPUSH
35709: LD_VAR 0 2
35713: PPUSH
35714: CALL 35861 0 2
// end ;
35718: GO 35499
35720: POP
35721: POP
// end ;
35722: PPOPN 2
35724: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35725: LD_INT 0
35727: PPUSH
35728: PPUSH
35729: PPUSH
// if not hack in hackTanks then
35730: LD_VAR 0 1
35734: PUSH
35735: LD_EXP 127
35739: IN
35740: NOT
35741: IFFALSE 35745
// exit ;
35743: GO 35856
// index := GetElementIndex ( hackTanks , hack ) ;
35745: LD_ADDR_VAR 0 4
35749: PUSH
35750: LD_EXP 127
35754: PPUSH
35755: LD_VAR 0 1
35759: PPUSH
35760: CALL 43330 0 2
35764: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35765: LD_EXP 128
35769: PUSH
35770: LD_VAR 0 4
35774: ARRAY
35775: IFFALSE 35856
// begin for i in hackTanksCaptured [ index ] do
35777: LD_ADDR_VAR 0 3
35781: PUSH
35782: LD_EXP 128
35786: PUSH
35787: LD_VAR 0 4
35791: ARRAY
35792: PUSH
35793: FOR_IN
35794: IFFALSE 35820
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35796: LD_VAR 0 3
35800: PUSH
35801: LD_INT 1
35803: ARRAY
35804: PPUSH
35805: LD_VAR 0 3
35809: PUSH
35810: LD_INT 2
35812: ARRAY
35813: PPUSH
35814: CALL_OW 235
35818: GO 35793
35820: POP
35821: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35822: LD_ADDR_EXP 128
35826: PUSH
35827: LD_EXP 128
35831: PPUSH
35832: LD_VAR 0 4
35836: PPUSH
35837: EMPTY
35838: PPUSH
35839: CALL_OW 1
35843: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35844: LD_VAR 0 1
35848: PPUSH
35849: LD_INT 0
35851: PPUSH
35852: CALL_OW 505
// end ; end ;
35856: LD_VAR 0 2
35860: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35861: LD_INT 0
35863: PPUSH
35864: PPUSH
35865: PPUSH
// if not hack in hackTanks or not vehicles then
35866: LD_VAR 0 1
35870: PUSH
35871: LD_EXP 127
35875: IN
35876: NOT
35877: PUSH
35878: LD_VAR 0 2
35882: NOT
35883: OR
35884: IFFALSE 35888
// exit ;
35886: GO 36163
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35888: LD_ADDR_VAR 0 2
35892: PUSH
35893: LD_VAR 0 1
35897: PPUSH
35898: LD_VAR 0 2
35902: PPUSH
35903: LD_INT 1
35905: PPUSH
35906: LD_INT 1
35908: PPUSH
35909: CALL 43980 0 4
35913: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35914: LD_ADDR_VAR 0 5
35918: PUSH
35919: LD_EXP 127
35923: PPUSH
35924: LD_VAR 0 1
35928: PPUSH
35929: CALL 43330 0 2
35933: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35934: LD_EXP 128
35938: PUSH
35939: LD_VAR 0 5
35943: ARRAY
35944: PUSH
35945: LD_EXP 129
35949: LESS
35950: IFFALSE 36139
// begin for i := 1 to vehicles do
35952: LD_ADDR_VAR 0 4
35956: PUSH
35957: DOUBLE
35958: LD_INT 1
35960: DEC
35961: ST_TO_ADDR
35962: LD_VAR 0 2
35966: PUSH
35967: FOR_TO
35968: IFFALSE 36137
// begin if hackTanksCaptured [ index ] = hackLimit then
35970: LD_EXP 128
35974: PUSH
35975: LD_VAR 0 5
35979: ARRAY
35980: PUSH
35981: LD_EXP 129
35985: EQUAL
35986: IFFALSE 35990
// break ;
35988: GO 36137
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35990: LD_ADDR_EXP 131
35994: PUSH
35995: LD_EXP 131
35999: PPUSH
36000: LD_VAR 0 5
36004: PPUSH
36005: LD_EXP 131
36009: PUSH
36010: LD_VAR 0 5
36014: ARRAY
36015: PUSH
36016: LD_INT 1
36018: PLUS
36019: PPUSH
36020: CALL_OW 1
36024: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36025: LD_ADDR_EXP 128
36029: PUSH
36030: LD_EXP 128
36034: PPUSH
36035: LD_VAR 0 5
36039: PUSH
36040: LD_EXP 128
36044: PUSH
36045: LD_VAR 0 5
36049: ARRAY
36050: PUSH
36051: LD_INT 1
36053: PLUS
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PPUSH
36059: LD_VAR 0 2
36063: PUSH
36064: LD_VAR 0 4
36068: ARRAY
36069: PUSH
36070: LD_VAR 0 2
36074: PUSH
36075: LD_VAR 0 4
36079: ARRAY
36080: PPUSH
36081: CALL_OW 255
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PPUSH
36090: CALL 43545 0 3
36094: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36095: LD_VAR 0 2
36099: PUSH
36100: LD_VAR 0 4
36104: ARRAY
36105: PPUSH
36106: LD_VAR 0 1
36110: PPUSH
36111: CALL_OW 255
36115: PPUSH
36116: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36120: LD_VAR 0 2
36124: PUSH
36125: LD_VAR 0 4
36129: ARRAY
36130: PPUSH
36131: CALL_OW 141
// end ;
36135: GO 35967
36137: POP
36138: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36139: LD_VAR 0 1
36143: PPUSH
36144: LD_EXP 128
36148: PUSH
36149: LD_VAR 0 5
36153: ARRAY
36154: PUSH
36155: LD_INT 0
36157: PLUS
36158: PPUSH
36159: CALL_OW 505
// end ;
36163: LD_VAR 0 3
36167: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36168: LD_INT 0
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
// if not hack in hackTanks then
36174: LD_VAR 0 1
36178: PUSH
36179: LD_EXP 127
36183: IN
36184: NOT
36185: IFFALSE 36189
// exit ;
36187: GO 36429
// index := GetElementIndex ( hackTanks , hack ) ;
36189: LD_ADDR_VAR 0 4
36193: PUSH
36194: LD_EXP 127
36198: PPUSH
36199: LD_VAR 0 1
36203: PPUSH
36204: CALL 43330 0 2
36208: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36209: LD_ADDR_VAR 0 3
36213: PUSH
36214: DOUBLE
36215: LD_EXP 128
36219: PUSH
36220: LD_VAR 0 4
36224: ARRAY
36225: INC
36226: ST_TO_ADDR
36227: LD_INT 1
36229: PUSH
36230: FOR_DOWNTO
36231: IFFALSE 36403
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36233: LD_ADDR_VAR 0 5
36237: PUSH
36238: LD_EXP 128
36242: PUSH
36243: LD_VAR 0 4
36247: ARRAY
36248: PUSH
36249: LD_VAR 0 3
36253: ARRAY
36254: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36255: LD_VAR 0 5
36259: PUSH
36260: LD_INT 1
36262: ARRAY
36263: PPUSH
36264: CALL_OW 302
36268: NOT
36269: PUSH
36270: LD_VAR 0 5
36274: PUSH
36275: LD_INT 1
36277: ARRAY
36278: PPUSH
36279: CALL_OW 255
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 255
36293: NONEQUAL
36294: OR
36295: IFFALSE 36401
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36297: LD_VAR 0 5
36301: PUSH
36302: LD_INT 1
36304: ARRAY
36305: PPUSH
36306: CALL_OW 305
36310: PUSH
36311: LD_VAR 0 5
36315: PUSH
36316: LD_INT 1
36318: ARRAY
36319: PPUSH
36320: CALL_OW 255
36324: PUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 255
36334: EQUAL
36335: AND
36336: IFFALSE 36360
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36338: LD_VAR 0 5
36342: PUSH
36343: LD_INT 1
36345: ARRAY
36346: PPUSH
36347: LD_VAR 0 5
36351: PUSH
36352: LD_INT 2
36354: ARRAY
36355: PPUSH
36356: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36360: LD_ADDR_EXP 128
36364: PUSH
36365: LD_EXP 128
36369: PPUSH
36370: LD_VAR 0 4
36374: PPUSH
36375: LD_EXP 128
36379: PUSH
36380: LD_VAR 0 4
36384: ARRAY
36385: PPUSH
36386: LD_VAR 0 3
36390: PPUSH
36391: CALL_OW 3
36395: PPUSH
36396: CALL_OW 1
36400: ST_TO_ADDR
// end ; end ;
36401: GO 36230
36403: POP
36404: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36405: LD_VAR 0 1
36409: PPUSH
36410: LD_EXP 128
36414: PUSH
36415: LD_VAR 0 4
36419: ARRAY
36420: PUSH
36421: LD_INT 0
36423: PLUS
36424: PPUSH
36425: CALL_OW 505
// end ;
36429: LD_VAR 0 2
36433: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36434: LD_INT 0
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
// if not hack in hackTanks then
36440: LD_VAR 0 1
36444: PUSH
36445: LD_EXP 127
36449: IN
36450: NOT
36451: IFFALSE 36455
// exit ;
36453: GO 36540
// index := GetElementIndex ( hackTanks , hack ) ;
36455: LD_ADDR_VAR 0 5
36459: PUSH
36460: LD_EXP 127
36464: PPUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: CALL 43330 0 2
36474: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36475: LD_ADDR_VAR 0 4
36479: PUSH
36480: DOUBLE
36481: LD_INT 1
36483: DEC
36484: ST_TO_ADDR
36485: LD_EXP 128
36489: PUSH
36490: LD_VAR 0 5
36494: ARRAY
36495: PUSH
36496: FOR_TO
36497: IFFALSE 36538
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36499: LD_EXP 128
36503: PUSH
36504: LD_VAR 0 5
36508: ARRAY
36509: PUSH
36510: LD_VAR 0 4
36514: ARRAY
36515: PUSH
36516: LD_INT 1
36518: ARRAY
36519: PUSH
36520: LD_VAR 0 2
36524: EQUAL
36525: IFFALSE 36536
// KillUnit ( vehicle ) ;
36527: LD_VAR 0 2
36531: PPUSH
36532: CALL_OW 66
36536: GO 36496
36538: POP
36539: POP
// end ;
36540: LD_VAR 0 3
36544: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36545: LD_EXP 132
36549: NOT
36550: IFFALSE 36585
36552: GO 36554
36554: DISABLE
// begin initMiner := true ;
36555: LD_ADDR_EXP 132
36559: PUSH
36560: LD_INT 1
36562: ST_TO_ADDR
// minersList := [ ] ;
36563: LD_ADDR_EXP 133
36567: PUSH
36568: EMPTY
36569: ST_TO_ADDR
// minerMinesList := [ ] ;
36570: LD_ADDR_EXP 134
36574: PUSH
36575: EMPTY
36576: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36577: LD_ADDR_EXP 135
36581: PUSH
36582: LD_INT 5
36584: ST_TO_ADDR
// end ;
36585: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36586: LD_EXP 132
36590: PUSH
36591: LD_INT 34
36593: PUSH
36594: LD_EXP 55
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PPUSH
36603: CALL_OW 69
36607: AND
36608: IFFALSE 37071
36610: GO 36612
36612: DISABLE
36613: LD_INT 0
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
// begin enable ;
36619: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36620: LD_ADDR_VAR 0 1
36624: PUSH
36625: LD_INT 34
36627: PUSH
36628: LD_EXP 55
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PPUSH
36637: CALL_OW 69
36641: PUSH
36642: FOR_IN
36643: IFFALSE 36715
// begin if not i in minersList then
36645: LD_VAR 0 1
36649: PUSH
36650: LD_EXP 133
36654: IN
36655: NOT
36656: IFFALSE 36713
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36658: LD_ADDR_EXP 133
36662: PUSH
36663: LD_EXP 133
36667: PPUSH
36668: LD_EXP 133
36672: PUSH
36673: LD_INT 1
36675: PLUS
36676: PPUSH
36677: LD_VAR 0 1
36681: PPUSH
36682: CALL_OW 1
36686: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36687: LD_ADDR_EXP 134
36691: PUSH
36692: LD_EXP 134
36696: PPUSH
36697: LD_EXP 134
36701: PUSH
36702: LD_INT 1
36704: PLUS
36705: PPUSH
36706: EMPTY
36707: PPUSH
36708: CALL_OW 1
36712: ST_TO_ADDR
// end end ;
36713: GO 36642
36715: POP
36716: POP
// for i := minerMinesList downto 1 do
36717: LD_ADDR_VAR 0 1
36721: PUSH
36722: DOUBLE
36723: LD_EXP 134
36727: INC
36728: ST_TO_ADDR
36729: LD_INT 1
36731: PUSH
36732: FOR_DOWNTO
36733: IFFALSE 37069
// begin if IsLive ( minersList [ i ] ) then
36735: LD_EXP 133
36739: PUSH
36740: LD_VAR 0 1
36744: ARRAY
36745: PPUSH
36746: CALL_OW 300
36750: IFFALSE 36778
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36752: LD_EXP 133
36756: PUSH
36757: LD_VAR 0 1
36761: ARRAY
36762: PPUSH
36763: LD_EXP 134
36767: PUSH
36768: LD_VAR 0 1
36772: ARRAY
36773: PPUSH
36774: CALL_OW 505
// if not minerMinesList [ i ] then
36778: LD_EXP 134
36782: PUSH
36783: LD_VAR 0 1
36787: ARRAY
36788: NOT
36789: IFFALSE 36793
// continue ;
36791: GO 36732
// for j := minerMinesList [ i ] downto 1 do
36793: LD_ADDR_VAR 0 2
36797: PUSH
36798: DOUBLE
36799: LD_EXP 134
36803: PUSH
36804: LD_VAR 0 1
36808: ARRAY
36809: INC
36810: ST_TO_ADDR
36811: LD_INT 1
36813: PUSH
36814: FOR_DOWNTO
36815: IFFALSE 37065
// begin side := GetSide ( minersList [ i ] ) ;
36817: LD_ADDR_VAR 0 3
36821: PUSH
36822: LD_EXP 133
36826: PUSH
36827: LD_VAR 0 1
36831: ARRAY
36832: PPUSH
36833: CALL_OW 255
36837: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36838: LD_ADDR_VAR 0 4
36842: PUSH
36843: LD_EXP 134
36847: PUSH
36848: LD_VAR 0 1
36852: ARRAY
36853: PUSH
36854: LD_VAR 0 2
36858: ARRAY
36859: PUSH
36860: LD_INT 1
36862: ARRAY
36863: PPUSH
36864: LD_EXP 134
36868: PUSH
36869: LD_VAR 0 1
36873: ARRAY
36874: PUSH
36875: LD_VAR 0 2
36879: ARRAY
36880: PUSH
36881: LD_INT 2
36883: ARRAY
36884: PPUSH
36885: CALL_OW 428
36889: ST_TO_ADDR
// if not tmp then
36890: LD_VAR 0 4
36894: NOT
36895: IFFALSE 36899
// continue ;
36897: GO 36814
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36899: LD_VAR 0 4
36903: PUSH
36904: LD_INT 81
36906: PUSH
36907: LD_VAR 0 3
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PPUSH
36916: CALL_OW 69
36920: IN
36921: PUSH
36922: LD_EXP 134
36926: PUSH
36927: LD_VAR 0 1
36931: ARRAY
36932: PUSH
36933: LD_VAR 0 2
36937: ARRAY
36938: PUSH
36939: LD_INT 1
36941: ARRAY
36942: PPUSH
36943: LD_EXP 134
36947: PUSH
36948: LD_VAR 0 1
36952: ARRAY
36953: PUSH
36954: LD_VAR 0 2
36958: ARRAY
36959: PUSH
36960: LD_INT 2
36962: ARRAY
36963: PPUSH
36964: CALL_OW 458
36968: AND
36969: IFFALSE 37063
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36971: LD_EXP 134
36975: PUSH
36976: LD_VAR 0 1
36980: ARRAY
36981: PUSH
36982: LD_VAR 0 2
36986: ARRAY
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PPUSH
36992: LD_EXP 134
36996: PUSH
36997: LD_VAR 0 1
37001: ARRAY
37002: PUSH
37003: LD_VAR 0 2
37007: ARRAY
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: PPUSH
37013: LD_VAR 0 3
37017: PPUSH
37018: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37022: LD_ADDR_EXP 134
37026: PUSH
37027: LD_EXP 134
37031: PPUSH
37032: LD_VAR 0 1
37036: PPUSH
37037: LD_EXP 134
37041: PUSH
37042: LD_VAR 0 1
37046: ARRAY
37047: PPUSH
37048: LD_VAR 0 2
37052: PPUSH
37053: CALL_OW 3
37057: PPUSH
37058: CALL_OW 1
37062: ST_TO_ADDR
// end ; end ;
37063: GO 36814
37065: POP
37066: POP
// end ;
37067: GO 36732
37069: POP
37070: POP
// end ;
37071: PPOPN 4
37073: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37074: LD_INT 0
37076: PPUSH
37077: PPUSH
// result := false ;
37078: LD_ADDR_VAR 0 4
37082: PUSH
37083: LD_INT 0
37085: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37086: LD_VAR 0 1
37090: PPUSH
37091: CALL_OW 264
37095: PUSH
37096: LD_EXP 55
37100: EQUAL
37101: NOT
37102: IFFALSE 37106
// exit ;
37104: GO 37346
// index := GetElementIndex ( minersList , unit ) ;
37106: LD_ADDR_VAR 0 5
37110: PUSH
37111: LD_EXP 133
37115: PPUSH
37116: LD_VAR 0 1
37120: PPUSH
37121: CALL 43330 0 2
37125: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37126: LD_EXP 134
37130: PUSH
37131: LD_VAR 0 5
37135: ARRAY
37136: PUSH
37137: LD_EXP 135
37141: GREATEREQUAL
37142: IFFALSE 37146
// exit ;
37144: GO 37346
// ComMoveXY ( unit , x , y ) ;
37146: LD_VAR 0 1
37150: PPUSH
37151: LD_VAR 0 2
37155: PPUSH
37156: LD_VAR 0 3
37160: PPUSH
37161: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37165: LD_INT 35
37167: PPUSH
37168: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37172: LD_VAR 0 1
37176: PPUSH
37177: LD_VAR 0 2
37181: PPUSH
37182: LD_VAR 0 3
37186: PPUSH
37187: CALL 74102 0 3
37191: NOT
37192: PUSH
37193: LD_VAR 0 1
37197: PPUSH
37198: CALL_OW 314
37202: AND
37203: IFFALSE 37207
// exit ;
37205: GO 37346
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37207: LD_VAR 0 2
37211: PPUSH
37212: LD_VAR 0 3
37216: PPUSH
37217: CALL_OW 428
37221: PUSH
37222: LD_VAR 0 1
37226: EQUAL
37227: PUSH
37228: LD_VAR 0 1
37232: PPUSH
37233: CALL_OW 314
37237: NOT
37238: AND
37239: IFFALSE 37165
// PlaySoundXY ( x , y , PlantMine ) ;
37241: LD_VAR 0 2
37245: PPUSH
37246: LD_VAR 0 3
37250: PPUSH
37251: LD_STRING PlantMine
37253: PPUSH
37254: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37258: LD_VAR 0 2
37262: PPUSH
37263: LD_VAR 0 3
37267: PPUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 255
37277: PPUSH
37278: LD_INT 0
37280: PPUSH
37281: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37285: LD_ADDR_EXP 134
37289: PUSH
37290: LD_EXP 134
37294: PPUSH
37295: LD_VAR 0 5
37299: PUSH
37300: LD_EXP 134
37304: PUSH
37305: LD_VAR 0 5
37309: ARRAY
37310: PUSH
37311: LD_INT 1
37313: PLUS
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PPUSH
37319: LD_VAR 0 2
37323: PUSH
37324: LD_VAR 0 3
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PPUSH
37333: CALL 43545 0 3
37337: ST_TO_ADDR
// result := true ;
37338: LD_ADDR_VAR 0 4
37342: PUSH
37343: LD_INT 1
37345: ST_TO_ADDR
// end ;
37346: LD_VAR 0 4
37350: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37351: LD_INT 0
37353: PPUSH
37354: PPUSH
37355: PPUSH
// if not unit in minersList then
37356: LD_VAR 0 1
37360: PUSH
37361: LD_EXP 133
37365: IN
37366: NOT
37367: IFFALSE 37371
// exit ;
37369: GO 37763
// index := GetElementIndex ( minersList , unit ) ;
37371: LD_ADDR_VAR 0 6
37375: PUSH
37376: LD_EXP 133
37380: PPUSH
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL 43330 0 2
37390: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37391: LD_ADDR_VAR 0 5
37395: PUSH
37396: DOUBLE
37397: LD_EXP 134
37401: PUSH
37402: LD_VAR 0 6
37406: ARRAY
37407: INC
37408: ST_TO_ADDR
37409: LD_INT 1
37411: PUSH
37412: FOR_DOWNTO
37413: IFFALSE 37574
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37415: LD_EXP 134
37419: PUSH
37420: LD_VAR 0 6
37424: ARRAY
37425: PUSH
37426: LD_VAR 0 5
37430: ARRAY
37431: PUSH
37432: LD_INT 1
37434: ARRAY
37435: PUSH
37436: LD_VAR 0 2
37440: EQUAL
37441: PUSH
37442: LD_EXP 134
37446: PUSH
37447: LD_VAR 0 6
37451: ARRAY
37452: PUSH
37453: LD_VAR 0 5
37457: ARRAY
37458: PUSH
37459: LD_INT 2
37461: ARRAY
37462: PUSH
37463: LD_VAR 0 3
37467: EQUAL
37468: AND
37469: IFFALSE 37572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37471: LD_EXP 134
37475: PUSH
37476: LD_VAR 0 6
37480: ARRAY
37481: PUSH
37482: LD_VAR 0 5
37486: ARRAY
37487: PUSH
37488: LD_INT 1
37490: ARRAY
37491: PPUSH
37492: LD_EXP 134
37496: PUSH
37497: LD_VAR 0 6
37501: ARRAY
37502: PUSH
37503: LD_VAR 0 5
37507: ARRAY
37508: PUSH
37509: LD_INT 2
37511: ARRAY
37512: PPUSH
37513: LD_VAR 0 1
37517: PPUSH
37518: CALL_OW 255
37522: PPUSH
37523: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37527: LD_ADDR_EXP 134
37531: PUSH
37532: LD_EXP 134
37536: PPUSH
37537: LD_VAR 0 6
37541: PPUSH
37542: LD_EXP 134
37546: PUSH
37547: LD_VAR 0 6
37551: ARRAY
37552: PPUSH
37553: LD_VAR 0 5
37557: PPUSH
37558: CALL_OW 3
37562: PPUSH
37563: CALL_OW 1
37567: ST_TO_ADDR
// exit ;
37568: POP
37569: POP
37570: GO 37763
// end ; end ;
37572: GO 37412
37574: POP
37575: POP
// for i := minerMinesList [ index ] downto 1 do
37576: LD_ADDR_VAR 0 5
37580: PUSH
37581: DOUBLE
37582: LD_EXP 134
37586: PUSH
37587: LD_VAR 0 6
37591: ARRAY
37592: INC
37593: ST_TO_ADDR
37594: LD_INT 1
37596: PUSH
37597: FOR_DOWNTO
37598: IFFALSE 37761
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37600: LD_EXP 134
37604: PUSH
37605: LD_VAR 0 6
37609: ARRAY
37610: PUSH
37611: LD_VAR 0 5
37615: ARRAY
37616: PUSH
37617: LD_INT 1
37619: ARRAY
37620: PPUSH
37621: LD_EXP 134
37625: PUSH
37626: LD_VAR 0 6
37630: ARRAY
37631: PUSH
37632: LD_VAR 0 5
37636: ARRAY
37637: PUSH
37638: LD_INT 2
37640: ARRAY
37641: PPUSH
37642: LD_VAR 0 2
37646: PPUSH
37647: LD_VAR 0 3
37651: PPUSH
37652: CALL_OW 298
37656: PUSH
37657: LD_INT 6
37659: LESS
37660: IFFALSE 37759
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37662: LD_EXP 134
37666: PUSH
37667: LD_VAR 0 6
37671: ARRAY
37672: PUSH
37673: LD_VAR 0 5
37677: ARRAY
37678: PUSH
37679: LD_INT 1
37681: ARRAY
37682: PPUSH
37683: LD_EXP 134
37687: PUSH
37688: LD_VAR 0 6
37692: ARRAY
37693: PUSH
37694: LD_VAR 0 5
37698: ARRAY
37699: PUSH
37700: LD_INT 2
37702: ARRAY
37703: PPUSH
37704: LD_VAR 0 1
37708: PPUSH
37709: CALL_OW 255
37713: PPUSH
37714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37718: LD_ADDR_EXP 134
37722: PUSH
37723: LD_EXP 134
37727: PPUSH
37728: LD_VAR 0 6
37732: PPUSH
37733: LD_EXP 134
37737: PUSH
37738: LD_VAR 0 6
37742: ARRAY
37743: PPUSH
37744: LD_VAR 0 5
37748: PPUSH
37749: CALL_OW 3
37753: PPUSH
37754: CALL_OW 1
37758: ST_TO_ADDR
// end ; end ;
37759: GO 37597
37761: POP
37762: POP
// end ;
37763: LD_VAR 0 4
37767: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37768: LD_INT 0
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37779: LD_VAR 0 1
37783: PPUSH
37784: CALL_OW 264
37788: PUSH
37789: LD_EXP 55
37793: EQUAL
37794: NOT
37795: PUSH
37796: LD_VAR 0 1
37800: PUSH
37801: LD_EXP 133
37805: IN
37806: NOT
37807: OR
37808: IFFALSE 37812
// exit ;
37810: GO 38134
// index := GetElementIndex ( minersList , unit ) ;
37812: LD_ADDR_VAR 0 6
37816: PUSH
37817: LD_EXP 133
37821: PPUSH
37822: LD_VAR 0 1
37826: PPUSH
37827: CALL 43330 0 2
37831: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37832: LD_ADDR_VAR 0 8
37836: PUSH
37837: LD_EXP 135
37841: PUSH
37842: LD_EXP 134
37846: PUSH
37847: LD_VAR 0 6
37851: ARRAY
37852: MINUS
37853: ST_TO_ADDR
// if not minesFreeAmount then
37854: LD_VAR 0 8
37858: NOT
37859: IFFALSE 37863
// exit ;
37861: GO 38134
// tmp := [ ] ;
37863: LD_ADDR_VAR 0 7
37867: PUSH
37868: EMPTY
37869: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37870: LD_ADDR_VAR 0 5
37874: PUSH
37875: DOUBLE
37876: LD_INT 1
37878: DEC
37879: ST_TO_ADDR
37880: LD_VAR 0 8
37884: PUSH
37885: FOR_TO
37886: IFFALSE 38081
// begin _d := rand ( 0 , 5 ) ;
37888: LD_ADDR_VAR 0 11
37892: PUSH
37893: LD_INT 0
37895: PPUSH
37896: LD_INT 5
37898: PPUSH
37899: CALL_OW 12
37903: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37904: LD_ADDR_VAR 0 12
37908: PUSH
37909: LD_INT 2
37911: PPUSH
37912: LD_INT 6
37914: PPUSH
37915: CALL_OW 12
37919: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37920: LD_ADDR_VAR 0 9
37924: PUSH
37925: LD_VAR 0 2
37929: PPUSH
37930: LD_VAR 0 11
37934: PPUSH
37935: LD_VAR 0 12
37939: PPUSH
37940: CALL_OW 272
37944: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37945: LD_ADDR_VAR 0 10
37949: PUSH
37950: LD_VAR 0 3
37954: PPUSH
37955: LD_VAR 0 11
37959: PPUSH
37960: LD_VAR 0 12
37964: PPUSH
37965: CALL_OW 273
37969: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37970: LD_VAR 0 9
37974: PPUSH
37975: LD_VAR 0 10
37979: PPUSH
37980: CALL_OW 488
37984: PUSH
37985: LD_VAR 0 9
37989: PUSH
37990: LD_VAR 0 10
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_VAR 0 7
38003: IN
38004: NOT
38005: AND
38006: PUSH
38007: LD_VAR 0 9
38011: PPUSH
38012: LD_VAR 0 10
38016: PPUSH
38017: CALL_OW 458
38021: NOT
38022: AND
38023: IFFALSE 38065
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38025: LD_ADDR_VAR 0 7
38029: PUSH
38030: LD_VAR 0 7
38034: PPUSH
38035: LD_VAR 0 7
38039: PUSH
38040: LD_INT 1
38042: PLUS
38043: PPUSH
38044: LD_VAR 0 9
38048: PUSH
38049: LD_VAR 0 10
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PPUSH
38058: CALL_OW 1
38062: ST_TO_ADDR
38063: GO 38079
// i := i - 1 ;
38065: LD_ADDR_VAR 0 5
38069: PUSH
38070: LD_VAR 0 5
38074: PUSH
38075: LD_INT 1
38077: MINUS
38078: ST_TO_ADDR
// end ;
38079: GO 37885
38081: POP
38082: POP
// for i in tmp do
38083: LD_ADDR_VAR 0 5
38087: PUSH
38088: LD_VAR 0 7
38092: PUSH
38093: FOR_IN
38094: IFFALSE 38132
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38096: LD_VAR 0 1
38100: PPUSH
38101: LD_VAR 0 5
38105: PUSH
38106: LD_INT 1
38108: ARRAY
38109: PPUSH
38110: LD_VAR 0 5
38114: PUSH
38115: LD_INT 2
38117: ARRAY
38118: PPUSH
38119: CALL 37074 0 3
38123: NOT
38124: IFFALSE 38130
// exit ;
38126: POP
38127: POP
38128: GO 38134
38130: GO 38093
38132: POP
38133: POP
// end ;
38134: LD_VAR 0 4
38138: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38139: LD_INT 0
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
38147: PPUSH
// if not GetClass ( unit ) = class_sniper then
38148: LD_VAR 0 1
38152: PPUSH
38153: CALL_OW 257
38157: PUSH
38158: LD_INT 5
38160: EQUAL
38161: NOT
38162: IFFALSE 38166
// exit ;
38164: GO 38554
// dist := 8 ;
38166: LD_ADDR_VAR 0 5
38170: PUSH
38171: LD_INT 8
38173: ST_TO_ADDR
// viewRange := 12 ;
38174: LD_ADDR_VAR 0 7
38178: PUSH
38179: LD_INT 12
38181: ST_TO_ADDR
// side := GetSide ( unit ) ;
38182: LD_ADDR_VAR 0 6
38186: PUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 255
38196: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38197: LD_INT 61
38199: PPUSH
38200: LD_VAR 0 6
38204: PPUSH
38205: CALL_OW 321
38209: PUSH
38210: LD_INT 2
38212: EQUAL
38213: IFFALSE 38223
// viewRange := 16 ;
38215: LD_ADDR_VAR 0 7
38219: PUSH
38220: LD_INT 16
38222: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38223: LD_VAR 0 1
38227: PPUSH
38228: LD_VAR 0 2
38232: PPUSH
38233: LD_VAR 0 3
38237: PPUSH
38238: CALL_OW 297
38242: PUSH
38243: LD_VAR 0 5
38247: GREATER
38248: IFFALSE 38327
// begin ComMoveXY ( unit , x , y ) ;
38250: LD_VAR 0 1
38254: PPUSH
38255: LD_VAR 0 2
38259: PPUSH
38260: LD_VAR 0 3
38264: PPUSH
38265: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38269: LD_INT 35
38271: PPUSH
38272: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38276: LD_VAR 0 1
38280: PPUSH
38281: LD_VAR 0 2
38285: PPUSH
38286: LD_VAR 0 3
38290: PPUSH
38291: CALL 74102 0 3
38295: NOT
38296: IFFALSE 38300
// exit ;
38298: GO 38554
// until GetDistUnitXY ( unit , x , y ) < dist ;
38300: LD_VAR 0 1
38304: PPUSH
38305: LD_VAR 0 2
38309: PPUSH
38310: LD_VAR 0 3
38314: PPUSH
38315: CALL_OW 297
38319: PUSH
38320: LD_VAR 0 5
38324: LESS
38325: IFFALSE 38269
// end ; ComTurnXY ( unit , x , y ) ;
38327: LD_VAR 0 1
38331: PPUSH
38332: LD_VAR 0 2
38336: PPUSH
38337: LD_VAR 0 3
38341: PPUSH
38342: CALL_OW 118
// wait ( 5 ) ;
38346: LD_INT 5
38348: PPUSH
38349: CALL_OW 67
// _d := GetDir ( unit ) ;
38353: LD_ADDR_VAR 0 10
38357: PUSH
38358: LD_VAR 0 1
38362: PPUSH
38363: CALL_OW 254
38367: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38368: LD_ADDR_VAR 0 8
38372: PUSH
38373: LD_VAR 0 1
38377: PPUSH
38378: CALL_OW 250
38382: PPUSH
38383: LD_VAR 0 10
38387: PPUSH
38388: LD_VAR 0 5
38392: PPUSH
38393: CALL_OW 272
38397: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38398: LD_ADDR_VAR 0 9
38402: PUSH
38403: LD_VAR 0 1
38407: PPUSH
38408: CALL_OW 251
38412: PPUSH
38413: LD_VAR 0 10
38417: PPUSH
38418: LD_VAR 0 5
38422: PPUSH
38423: CALL_OW 273
38427: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38428: LD_VAR 0 8
38432: PPUSH
38433: LD_VAR 0 9
38437: PPUSH
38438: CALL_OW 488
38442: NOT
38443: IFFALSE 38447
// exit ;
38445: GO 38554
// ComAnimCustom ( unit , 1 ) ;
38447: LD_VAR 0 1
38451: PPUSH
38452: LD_INT 1
38454: PPUSH
38455: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38459: LD_VAR 0 8
38463: PPUSH
38464: LD_VAR 0 9
38468: PPUSH
38469: LD_VAR 0 6
38473: PPUSH
38474: LD_VAR 0 7
38478: PPUSH
38479: CALL_OW 330
// repeat wait ( 1 ) ;
38483: LD_INT 1
38485: PPUSH
38486: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL_OW 316
38499: PUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL_OW 314
38509: OR
38510: PUSH
38511: LD_VAR 0 1
38515: PPUSH
38516: CALL_OW 302
38520: NOT
38521: OR
38522: PUSH
38523: LD_VAR 0 1
38527: PPUSH
38528: CALL_OW 301
38532: OR
38533: IFFALSE 38483
// RemoveSeeing ( _x , _y , side ) ;
38535: LD_VAR 0 8
38539: PPUSH
38540: LD_VAR 0 9
38544: PPUSH
38545: LD_VAR 0 6
38549: PPUSH
38550: CALL_OW 331
// end ; end_of_file
38554: LD_VAR 0 4
38558: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38559: LD_INT 0
38561: PPUSH
38562: PPUSH
// if exist_mode then
38563: LD_VAR 0 2
38567: IFFALSE 38592
// unit := CreateCharacter ( prefix & ident ) else
38569: LD_ADDR_VAR 0 5
38573: PUSH
38574: LD_VAR 0 3
38578: PUSH
38579: LD_VAR 0 1
38583: STR
38584: PPUSH
38585: CALL_OW 34
38589: ST_TO_ADDR
38590: GO 38607
// unit := NewCharacter ( ident ) ;
38592: LD_ADDR_VAR 0 5
38596: PUSH
38597: LD_VAR 0 1
38601: PPUSH
38602: CALL_OW 25
38606: ST_TO_ADDR
// result := unit ;
38607: LD_ADDR_VAR 0 4
38611: PUSH
38612: LD_VAR 0 5
38616: ST_TO_ADDR
// end ;
38617: LD_VAR 0 4
38621: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38622: LD_INT 0
38624: PPUSH
38625: PPUSH
// if not side or not nation then
38626: LD_VAR 0 1
38630: NOT
38631: PUSH
38632: LD_VAR 0 2
38636: NOT
38637: OR
38638: IFFALSE 38642
// exit ;
38640: GO 39410
// case nation of nation_american :
38642: LD_VAR 0 2
38646: PUSH
38647: LD_INT 1
38649: DOUBLE
38650: EQUAL
38651: IFTRUE 38655
38653: GO 38869
38655: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38656: LD_ADDR_VAR 0 4
38660: PUSH
38661: LD_INT 35
38663: PUSH
38664: LD_INT 45
38666: PUSH
38667: LD_INT 46
38669: PUSH
38670: LD_INT 47
38672: PUSH
38673: LD_INT 82
38675: PUSH
38676: LD_INT 83
38678: PUSH
38679: LD_INT 84
38681: PUSH
38682: LD_INT 85
38684: PUSH
38685: LD_INT 86
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 6
38696: PUSH
38697: LD_INT 15
38699: PUSH
38700: LD_INT 16
38702: PUSH
38703: LD_INT 7
38705: PUSH
38706: LD_INT 12
38708: PUSH
38709: LD_INT 13
38711: PUSH
38712: LD_INT 10
38714: PUSH
38715: LD_INT 14
38717: PUSH
38718: LD_INT 20
38720: PUSH
38721: LD_INT 21
38723: PUSH
38724: LD_INT 22
38726: PUSH
38727: LD_INT 25
38729: PUSH
38730: LD_INT 32
38732: PUSH
38733: LD_INT 27
38735: PUSH
38736: LD_INT 36
38738: PUSH
38739: LD_INT 69
38741: PUSH
38742: LD_INT 39
38744: PUSH
38745: LD_INT 34
38747: PUSH
38748: LD_INT 40
38750: PUSH
38751: LD_INT 48
38753: PUSH
38754: LD_INT 49
38756: PUSH
38757: LD_INT 50
38759: PUSH
38760: LD_INT 51
38762: PUSH
38763: LD_INT 52
38765: PUSH
38766: LD_INT 53
38768: PUSH
38769: LD_INT 54
38771: PUSH
38772: LD_INT 55
38774: PUSH
38775: LD_INT 56
38777: PUSH
38778: LD_INT 57
38780: PUSH
38781: LD_INT 58
38783: PUSH
38784: LD_INT 59
38786: PUSH
38787: LD_INT 60
38789: PUSH
38790: LD_INT 61
38792: PUSH
38793: LD_INT 62
38795: PUSH
38796: LD_INT 80
38798: PUSH
38799: LD_INT 82
38801: PUSH
38802: LD_INT 83
38804: PUSH
38805: LD_INT 84
38807: PUSH
38808: LD_INT 85
38810: PUSH
38811: LD_INT 86
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
38867: GO 39334
38869: LD_INT 2
38871: DOUBLE
38872: EQUAL
38873: IFTRUE 38877
38875: GO 39103
38877: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38878: LD_ADDR_VAR 0 4
38882: PUSH
38883: LD_INT 35
38885: PUSH
38886: LD_INT 45
38888: PUSH
38889: LD_INT 46
38891: PUSH
38892: LD_INT 47
38894: PUSH
38895: LD_INT 82
38897: PUSH
38898: LD_INT 83
38900: PUSH
38901: LD_INT 84
38903: PUSH
38904: LD_INT 85
38906: PUSH
38907: LD_INT 87
38909: PUSH
38910: LD_INT 70
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 11
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: LD_INT 4
38924: PUSH
38925: LD_INT 5
38927: PUSH
38928: LD_INT 6
38930: PUSH
38931: LD_INT 15
38933: PUSH
38934: LD_INT 18
38936: PUSH
38937: LD_INT 7
38939: PUSH
38940: LD_INT 17
38942: PUSH
38943: LD_INT 8
38945: PUSH
38946: LD_INT 20
38948: PUSH
38949: LD_INT 21
38951: PUSH
38952: LD_INT 22
38954: PUSH
38955: LD_INT 72
38957: PUSH
38958: LD_INT 26
38960: PUSH
38961: LD_INT 69
38963: PUSH
38964: LD_INT 39
38966: PUSH
38967: LD_INT 40
38969: PUSH
38970: LD_INT 41
38972: PUSH
38973: LD_INT 42
38975: PUSH
38976: LD_INT 43
38978: PUSH
38979: LD_INT 48
38981: PUSH
38982: LD_INT 49
38984: PUSH
38985: LD_INT 50
38987: PUSH
38988: LD_INT 51
38990: PUSH
38991: LD_INT 52
38993: PUSH
38994: LD_INT 53
38996: PUSH
38997: LD_INT 54
38999: PUSH
39000: LD_INT 55
39002: PUSH
39003: LD_INT 56
39005: PUSH
39006: LD_INT 60
39008: PUSH
39009: LD_INT 61
39011: PUSH
39012: LD_INT 62
39014: PUSH
39015: LD_INT 66
39017: PUSH
39018: LD_INT 67
39020: PUSH
39021: LD_INT 68
39023: PUSH
39024: LD_INT 81
39026: PUSH
39027: LD_INT 82
39029: PUSH
39030: LD_INT 83
39032: PUSH
39033: LD_INT 84
39035: PUSH
39036: LD_INT 85
39038: PUSH
39039: LD_INT 87
39041: PUSH
39042: LD_INT 88
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: ST_TO_ADDR
39101: GO 39334
39103: LD_INT 3
39105: DOUBLE
39106: EQUAL
39107: IFTRUE 39111
39109: GO 39333
39111: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39112: LD_ADDR_VAR 0 4
39116: PUSH
39117: LD_INT 46
39119: PUSH
39120: LD_INT 47
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 82
39131: PUSH
39132: LD_INT 83
39134: PUSH
39135: LD_INT 84
39137: PUSH
39138: LD_INT 85
39140: PUSH
39141: LD_INT 86
39143: PUSH
39144: LD_INT 11
39146: PUSH
39147: LD_INT 9
39149: PUSH
39150: LD_INT 20
39152: PUSH
39153: LD_INT 19
39155: PUSH
39156: LD_INT 21
39158: PUSH
39159: LD_INT 24
39161: PUSH
39162: LD_INT 22
39164: PUSH
39165: LD_INT 25
39167: PUSH
39168: LD_INT 28
39170: PUSH
39171: LD_INT 29
39173: PUSH
39174: LD_INT 30
39176: PUSH
39177: LD_INT 31
39179: PUSH
39180: LD_INT 37
39182: PUSH
39183: LD_INT 38
39185: PUSH
39186: LD_INT 32
39188: PUSH
39189: LD_INT 27
39191: PUSH
39192: LD_INT 33
39194: PUSH
39195: LD_INT 69
39197: PUSH
39198: LD_INT 39
39200: PUSH
39201: LD_INT 34
39203: PUSH
39204: LD_INT 40
39206: PUSH
39207: LD_INT 71
39209: PUSH
39210: LD_INT 23
39212: PUSH
39213: LD_INT 44
39215: PUSH
39216: LD_INT 48
39218: PUSH
39219: LD_INT 49
39221: PUSH
39222: LD_INT 50
39224: PUSH
39225: LD_INT 51
39227: PUSH
39228: LD_INT 52
39230: PUSH
39231: LD_INT 53
39233: PUSH
39234: LD_INT 54
39236: PUSH
39237: LD_INT 55
39239: PUSH
39240: LD_INT 56
39242: PUSH
39243: LD_INT 57
39245: PUSH
39246: LD_INT 58
39248: PUSH
39249: LD_INT 59
39251: PUSH
39252: LD_INT 63
39254: PUSH
39255: LD_INT 64
39257: PUSH
39258: LD_INT 65
39260: PUSH
39261: LD_INT 82
39263: PUSH
39264: LD_INT 83
39266: PUSH
39267: LD_INT 84
39269: PUSH
39270: LD_INT 85
39272: PUSH
39273: LD_INT 86
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: ST_TO_ADDR
39331: GO 39334
39333: POP
// if state > - 1 and state < 3 then
39334: LD_VAR 0 3
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: GREATER
39343: PUSH
39344: LD_VAR 0 3
39348: PUSH
39349: LD_INT 3
39351: LESS
39352: AND
39353: IFFALSE 39410
// for i in result do
39355: LD_ADDR_VAR 0 5
39359: PUSH
39360: LD_VAR 0 4
39364: PUSH
39365: FOR_IN
39366: IFFALSE 39408
// if GetTech ( i , side ) <> state then
39368: LD_VAR 0 5
39372: PPUSH
39373: LD_VAR 0 1
39377: PPUSH
39378: CALL_OW 321
39382: PUSH
39383: LD_VAR 0 3
39387: NONEQUAL
39388: IFFALSE 39406
// result := result diff i ;
39390: LD_ADDR_VAR 0 4
39394: PUSH
39395: LD_VAR 0 4
39399: PUSH
39400: LD_VAR 0 5
39404: DIFF
39405: ST_TO_ADDR
39406: GO 39365
39408: POP
39409: POP
// end ;
39410: LD_VAR 0 4
39414: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39415: LD_INT 0
39417: PPUSH
39418: PPUSH
39419: PPUSH
// result := true ;
39420: LD_ADDR_VAR 0 3
39424: PUSH
39425: LD_INT 1
39427: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39428: LD_ADDR_VAR 0 5
39432: PUSH
39433: LD_VAR 0 2
39437: PPUSH
39438: CALL_OW 480
39442: ST_TO_ADDR
// if not tmp then
39443: LD_VAR 0 5
39447: NOT
39448: IFFALSE 39452
// exit ;
39450: GO 39501
// for i in tmp do
39452: LD_ADDR_VAR 0 4
39456: PUSH
39457: LD_VAR 0 5
39461: PUSH
39462: FOR_IN
39463: IFFALSE 39499
// if GetTech ( i , side ) <> state_researched then
39465: LD_VAR 0 4
39469: PPUSH
39470: LD_VAR 0 1
39474: PPUSH
39475: CALL_OW 321
39479: PUSH
39480: LD_INT 2
39482: NONEQUAL
39483: IFFALSE 39497
// begin result := false ;
39485: LD_ADDR_VAR 0 3
39489: PUSH
39490: LD_INT 0
39492: ST_TO_ADDR
// exit ;
39493: POP
39494: POP
39495: GO 39501
// end ;
39497: GO 39462
39499: POP
39500: POP
// end ;
39501: LD_VAR 0 3
39505: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39506: LD_INT 0
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
39519: PPUSH
39520: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39521: LD_VAR 0 1
39525: NOT
39526: PUSH
39527: LD_VAR 0 1
39531: PPUSH
39532: CALL_OW 257
39536: PUSH
39537: LD_INT 9
39539: NONEQUAL
39540: OR
39541: IFFALSE 39545
// exit ;
39543: GO 40118
// side := GetSide ( unit ) ;
39545: LD_ADDR_VAR 0 9
39549: PUSH
39550: LD_VAR 0 1
39554: PPUSH
39555: CALL_OW 255
39559: ST_TO_ADDR
// tech_space := tech_spacanom ;
39560: LD_ADDR_VAR 0 12
39564: PUSH
39565: LD_INT 29
39567: ST_TO_ADDR
// tech_time := tech_taurad ;
39568: LD_ADDR_VAR 0 13
39572: PUSH
39573: LD_INT 28
39575: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39576: LD_ADDR_VAR 0 11
39580: PUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: CALL_OW 310
39590: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39591: LD_VAR 0 11
39595: PPUSH
39596: CALL_OW 247
39600: PUSH
39601: LD_INT 2
39603: EQUAL
39604: IFFALSE 39608
// exit ;
39606: GO 40118
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39608: LD_ADDR_VAR 0 8
39612: PUSH
39613: LD_INT 81
39615: PUSH
39616: LD_VAR 0 9
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 3
39627: PUSH
39628: LD_INT 21
39630: PUSH
39631: LD_INT 3
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PPUSH
39646: CALL_OW 69
39650: ST_TO_ADDR
// if not tmp then
39651: LD_VAR 0 8
39655: NOT
39656: IFFALSE 39660
// exit ;
39658: GO 40118
// if in_unit then
39660: LD_VAR 0 11
39664: IFFALSE 39688
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39666: LD_ADDR_VAR 0 10
39670: PUSH
39671: LD_VAR 0 8
39675: PPUSH
39676: LD_VAR 0 11
39680: PPUSH
39681: CALL_OW 74
39685: ST_TO_ADDR
39686: GO 39708
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39688: LD_ADDR_VAR 0 10
39692: PUSH
39693: LD_VAR 0 8
39697: PPUSH
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL_OW 74
39707: ST_TO_ADDR
// if not enemy then
39708: LD_VAR 0 10
39712: NOT
39713: IFFALSE 39717
// exit ;
39715: GO 40118
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39717: LD_VAR 0 11
39721: PUSH
39722: LD_VAR 0 11
39726: PPUSH
39727: LD_VAR 0 10
39731: PPUSH
39732: CALL_OW 296
39736: PUSH
39737: LD_INT 13
39739: GREATER
39740: AND
39741: PUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: LD_VAR 0 10
39751: PPUSH
39752: CALL_OW 296
39756: PUSH
39757: LD_INT 12
39759: GREATER
39760: OR
39761: IFFALSE 39765
// exit ;
39763: GO 40118
// missile := [ 1 ] ;
39765: LD_ADDR_VAR 0 14
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39776: LD_VAR 0 9
39780: PPUSH
39781: LD_VAR 0 12
39785: PPUSH
39786: CALL_OW 325
39790: IFFALSE 39819
// missile := Insert ( missile , missile + 1 , 2 ) ;
39792: LD_ADDR_VAR 0 14
39796: PUSH
39797: LD_VAR 0 14
39801: PPUSH
39802: LD_VAR 0 14
39806: PUSH
39807: LD_INT 1
39809: PLUS
39810: PPUSH
39811: LD_INT 2
39813: PPUSH
39814: CALL_OW 2
39818: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39819: LD_VAR 0 9
39823: PPUSH
39824: LD_VAR 0 13
39828: PPUSH
39829: CALL_OW 325
39833: PUSH
39834: LD_VAR 0 10
39838: PPUSH
39839: CALL_OW 255
39843: PPUSH
39844: LD_VAR 0 13
39848: PPUSH
39849: CALL_OW 325
39853: NOT
39854: AND
39855: IFFALSE 39884
// missile := Insert ( missile , missile + 1 , 3 ) ;
39857: LD_ADDR_VAR 0 14
39861: PUSH
39862: LD_VAR 0 14
39866: PPUSH
39867: LD_VAR 0 14
39871: PUSH
39872: LD_INT 1
39874: PLUS
39875: PPUSH
39876: LD_INT 3
39878: PPUSH
39879: CALL_OW 2
39883: ST_TO_ADDR
// if missile < 2 then
39884: LD_VAR 0 14
39888: PUSH
39889: LD_INT 2
39891: LESS
39892: IFFALSE 39896
// exit ;
39894: GO 40118
// x := GetX ( enemy ) ;
39896: LD_ADDR_VAR 0 4
39900: PUSH
39901: LD_VAR 0 10
39905: PPUSH
39906: CALL_OW 250
39910: ST_TO_ADDR
// y := GetY ( enemy ) ;
39911: LD_ADDR_VAR 0 5
39915: PUSH
39916: LD_VAR 0 10
39920: PPUSH
39921: CALL_OW 251
39925: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39926: LD_ADDR_VAR 0 6
39930: PUSH
39931: LD_VAR 0 4
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PPUSH
39940: LD_INT 1
39942: PPUSH
39943: CALL_OW 12
39947: PLUS
39948: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39949: LD_ADDR_VAR 0 7
39953: PUSH
39954: LD_VAR 0 5
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PPUSH
39963: LD_INT 1
39965: PPUSH
39966: CALL_OW 12
39970: PLUS
39971: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39972: LD_VAR 0 6
39976: PPUSH
39977: LD_VAR 0 7
39981: PPUSH
39982: CALL_OW 488
39986: NOT
39987: IFFALSE 40009
// begin _x := x ;
39989: LD_ADDR_VAR 0 6
39993: PUSH
39994: LD_VAR 0 4
39998: ST_TO_ADDR
// _y := y ;
39999: LD_ADDR_VAR 0 7
40003: PUSH
40004: LD_VAR 0 5
40008: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40009: LD_ADDR_VAR 0 3
40013: PUSH
40014: LD_INT 1
40016: PPUSH
40017: LD_VAR 0 14
40021: PPUSH
40022: CALL_OW 12
40026: ST_TO_ADDR
// case i of 1 :
40027: LD_VAR 0 3
40031: PUSH
40032: LD_INT 1
40034: DOUBLE
40035: EQUAL
40036: IFTRUE 40040
40038: GO 40057
40040: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40041: LD_VAR 0 1
40045: PPUSH
40046: LD_VAR 0 10
40050: PPUSH
40051: CALL_OW 115
40055: GO 40118
40057: LD_INT 2
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40065
40063: GO 40087
40065: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40066: LD_VAR 0 1
40070: PPUSH
40071: LD_VAR 0 6
40075: PPUSH
40076: LD_VAR 0 7
40080: PPUSH
40081: CALL_OW 153
40085: GO 40118
40087: LD_INT 3
40089: DOUBLE
40090: EQUAL
40091: IFTRUE 40095
40093: GO 40117
40095: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40096: LD_VAR 0 1
40100: PPUSH
40101: LD_VAR 0 6
40105: PPUSH
40106: LD_VAR 0 7
40110: PPUSH
40111: CALL_OW 154
40115: GO 40118
40117: POP
// end ;
40118: LD_VAR 0 2
40122: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40123: LD_INT 0
40125: PPUSH
40126: PPUSH
40127: PPUSH
40128: PPUSH
40129: PPUSH
40130: PPUSH
// if not unit or not building then
40131: LD_VAR 0 1
40135: NOT
40136: PUSH
40137: LD_VAR 0 2
40141: NOT
40142: OR
40143: IFFALSE 40147
// exit ;
40145: GO 40305
// x := GetX ( building ) ;
40147: LD_ADDR_VAR 0 5
40151: PUSH
40152: LD_VAR 0 2
40156: PPUSH
40157: CALL_OW 250
40161: ST_TO_ADDR
// y := GetY ( building ) ;
40162: LD_ADDR_VAR 0 6
40166: PUSH
40167: LD_VAR 0 2
40171: PPUSH
40172: CALL_OW 251
40176: ST_TO_ADDR
// for i = 0 to 5 do
40177: LD_ADDR_VAR 0 4
40181: PUSH
40182: DOUBLE
40183: LD_INT 0
40185: DEC
40186: ST_TO_ADDR
40187: LD_INT 5
40189: PUSH
40190: FOR_TO
40191: IFFALSE 40303
// begin _x := ShiftX ( x , i , 3 ) ;
40193: LD_ADDR_VAR 0 7
40197: PUSH
40198: LD_VAR 0 5
40202: PPUSH
40203: LD_VAR 0 4
40207: PPUSH
40208: LD_INT 3
40210: PPUSH
40211: CALL_OW 272
40215: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40216: LD_ADDR_VAR 0 8
40220: PUSH
40221: LD_VAR 0 6
40225: PPUSH
40226: LD_VAR 0 4
40230: PPUSH
40231: LD_INT 3
40233: PPUSH
40234: CALL_OW 273
40238: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40239: LD_VAR 0 7
40243: PPUSH
40244: LD_VAR 0 8
40248: PPUSH
40249: CALL_OW 488
40253: NOT
40254: IFFALSE 40258
// continue ;
40256: GO 40190
// if HexInfo ( _x , _y ) = 0 then
40258: LD_VAR 0 7
40262: PPUSH
40263: LD_VAR 0 8
40267: PPUSH
40268: CALL_OW 428
40272: PUSH
40273: LD_INT 0
40275: EQUAL
40276: IFFALSE 40301
// begin ComMoveXY ( unit , _x , _y ) ;
40278: LD_VAR 0 1
40282: PPUSH
40283: LD_VAR 0 7
40287: PPUSH
40288: LD_VAR 0 8
40292: PPUSH
40293: CALL_OW 111
// exit ;
40297: POP
40298: POP
40299: GO 40305
// end ; end ;
40301: GO 40190
40303: POP
40304: POP
// end ;
40305: LD_VAR 0 3
40309: RET
// export function ScanBase ( side , base_area ) ; begin
40310: LD_INT 0
40312: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40313: LD_ADDR_VAR 0 3
40317: PUSH
40318: LD_VAR 0 2
40322: PPUSH
40323: LD_INT 81
40325: PUSH
40326: LD_VAR 0 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PPUSH
40335: CALL_OW 70
40339: ST_TO_ADDR
// end ;
40340: LD_VAR 0 3
40344: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40345: LD_INT 0
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
// result := false ;
40351: LD_ADDR_VAR 0 2
40355: PUSH
40356: LD_INT 0
40358: ST_TO_ADDR
// side := GetSide ( unit ) ;
40359: LD_ADDR_VAR 0 3
40363: PUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: CALL_OW 255
40373: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40374: LD_ADDR_VAR 0 4
40378: PUSH
40379: LD_VAR 0 1
40383: PPUSH
40384: CALL_OW 248
40388: ST_TO_ADDR
// case nat of 1 :
40389: LD_VAR 0 4
40393: PUSH
40394: LD_INT 1
40396: DOUBLE
40397: EQUAL
40398: IFTRUE 40402
40400: GO 40413
40402: POP
// tech := tech_lassight ; 2 :
40403: LD_ADDR_VAR 0 5
40407: PUSH
40408: LD_INT 12
40410: ST_TO_ADDR
40411: GO 40452
40413: LD_INT 2
40415: DOUBLE
40416: EQUAL
40417: IFTRUE 40421
40419: GO 40432
40421: POP
// tech := tech_mortar ; 3 :
40422: LD_ADDR_VAR 0 5
40426: PUSH
40427: LD_INT 41
40429: ST_TO_ADDR
40430: GO 40452
40432: LD_INT 3
40434: DOUBLE
40435: EQUAL
40436: IFTRUE 40440
40438: GO 40451
40440: POP
// tech := tech_bazooka ; end ;
40441: LD_ADDR_VAR 0 5
40445: PUSH
40446: LD_INT 44
40448: ST_TO_ADDR
40449: GO 40452
40451: POP
// if Researched ( side , tech ) then
40452: LD_VAR 0 3
40456: PPUSH
40457: LD_VAR 0 5
40461: PPUSH
40462: CALL_OW 325
40466: IFFALSE 40493
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40468: LD_ADDR_VAR 0 2
40472: PUSH
40473: LD_INT 5
40475: PUSH
40476: LD_INT 8
40478: PUSH
40479: LD_INT 9
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: PUSH
40487: LD_VAR 0 4
40491: ARRAY
40492: ST_TO_ADDR
// end ;
40493: LD_VAR 0 2
40497: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40498: LD_INT 0
40500: PPUSH
40501: PPUSH
40502: PPUSH
// if not mines then
40503: LD_VAR 0 2
40507: NOT
40508: IFFALSE 40512
// exit ;
40510: GO 40656
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40512: LD_ADDR_VAR 0 5
40516: PUSH
40517: LD_INT 81
40519: PUSH
40520: LD_VAR 0 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: LD_INT 21
40534: PUSH
40535: LD_INT 3
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PPUSH
40550: CALL_OW 69
40554: ST_TO_ADDR
// for i in mines do
40555: LD_ADDR_VAR 0 4
40559: PUSH
40560: LD_VAR 0 2
40564: PUSH
40565: FOR_IN
40566: IFFALSE 40654
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40568: LD_VAR 0 4
40572: PUSH
40573: LD_INT 1
40575: ARRAY
40576: PPUSH
40577: LD_VAR 0 4
40581: PUSH
40582: LD_INT 2
40584: ARRAY
40585: PPUSH
40586: CALL_OW 458
40590: NOT
40591: IFFALSE 40595
// continue ;
40593: GO 40565
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40595: LD_VAR 0 4
40599: PUSH
40600: LD_INT 1
40602: ARRAY
40603: PPUSH
40604: LD_VAR 0 4
40608: PUSH
40609: LD_INT 2
40611: ARRAY
40612: PPUSH
40613: CALL_OW 428
40617: PUSH
40618: LD_VAR 0 5
40622: IN
40623: IFFALSE 40652
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40625: LD_VAR 0 4
40629: PUSH
40630: LD_INT 1
40632: ARRAY
40633: PPUSH
40634: LD_VAR 0 4
40638: PUSH
40639: LD_INT 2
40641: ARRAY
40642: PPUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 456
// end ;
40652: GO 40565
40654: POP
40655: POP
// end ;
40656: LD_VAR 0 3
40660: RET
// export function Count ( array ) ; var i ; begin
40661: LD_INT 0
40663: PPUSH
40664: PPUSH
// result := 0 ;
40665: LD_ADDR_VAR 0 2
40669: PUSH
40670: LD_INT 0
40672: ST_TO_ADDR
// for i in array do
40673: LD_ADDR_VAR 0 3
40677: PUSH
40678: LD_VAR 0 1
40682: PUSH
40683: FOR_IN
40684: IFFALSE 40708
// if i then
40686: LD_VAR 0 3
40690: IFFALSE 40706
// result := result + 1 ;
40692: LD_ADDR_VAR 0 2
40696: PUSH
40697: LD_VAR 0 2
40701: PUSH
40702: LD_INT 1
40704: PLUS
40705: ST_TO_ADDR
40706: GO 40683
40708: POP
40709: POP
// end ;
40710: LD_VAR 0 2
40714: RET
// export function IsEmpty ( building ) ; begin
40715: LD_INT 0
40717: PPUSH
// if not building then
40718: LD_VAR 0 1
40722: NOT
40723: IFFALSE 40727
// exit ;
40725: GO 40770
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40727: LD_ADDR_VAR 0 2
40731: PUSH
40732: LD_VAR 0 1
40736: PUSH
40737: LD_INT 22
40739: PUSH
40740: LD_VAR 0 1
40744: PPUSH
40745: CALL_OW 255
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 58
40756: PUSH
40757: EMPTY
40758: LIST
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PPUSH
40764: CALL_OW 69
40768: IN
40769: ST_TO_ADDR
// end ;
40770: LD_VAR 0 2
40774: RET
// export function IsNotFull ( building ) ; begin
40775: LD_INT 0
40777: PPUSH
// if not building then
40778: LD_VAR 0 1
40782: NOT
40783: IFFALSE 40787
// exit ;
40785: GO 40806
// result := UnitsInside ( building ) < 6 ;
40787: LD_ADDR_VAR 0 2
40791: PUSH
40792: LD_VAR 0 1
40796: PPUSH
40797: CALL_OW 313
40801: PUSH
40802: LD_INT 6
40804: LESS
40805: ST_TO_ADDR
// end ;
40806: LD_VAR 0 2
40810: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40811: LD_INT 0
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
// tmp := [ ] ;
40817: LD_ADDR_VAR 0 3
40821: PUSH
40822: EMPTY
40823: ST_TO_ADDR
// list := [ ] ;
40824: LD_ADDR_VAR 0 5
40828: PUSH
40829: EMPTY
40830: ST_TO_ADDR
// for i = 16 to 25 do
40831: LD_ADDR_VAR 0 4
40835: PUSH
40836: DOUBLE
40837: LD_INT 16
40839: DEC
40840: ST_TO_ADDR
40841: LD_INT 25
40843: PUSH
40844: FOR_TO
40845: IFFALSE 40918
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40847: LD_ADDR_VAR 0 3
40851: PUSH
40852: LD_VAR 0 3
40856: PUSH
40857: LD_INT 22
40859: PUSH
40860: LD_VAR 0 1
40864: PPUSH
40865: CALL_OW 255
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 91
40876: PUSH
40877: LD_VAR 0 1
40881: PUSH
40882: LD_INT 6
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 30
40892: PUSH
40893: LD_VAR 0 4
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: PUSH
40907: EMPTY
40908: LIST
40909: PPUSH
40910: CALL_OW 69
40914: ADD
40915: ST_TO_ADDR
40916: GO 40844
40918: POP
40919: POP
// for i = 1 to tmp do
40920: LD_ADDR_VAR 0 4
40924: PUSH
40925: DOUBLE
40926: LD_INT 1
40928: DEC
40929: ST_TO_ADDR
40930: LD_VAR 0 3
40934: PUSH
40935: FOR_TO
40936: IFFALSE 41024
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40938: LD_ADDR_VAR 0 5
40942: PUSH
40943: LD_VAR 0 5
40947: PUSH
40948: LD_VAR 0 3
40952: PUSH
40953: LD_VAR 0 4
40957: ARRAY
40958: PPUSH
40959: CALL_OW 266
40963: PUSH
40964: LD_VAR 0 3
40968: PUSH
40969: LD_VAR 0 4
40973: ARRAY
40974: PPUSH
40975: CALL_OW 250
40979: PUSH
40980: LD_VAR 0 3
40984: PUSH
40985: LD_VAR 0 4
40989: ARRAY
40990: PPUSH
40991: CALL_OW 251
40995: PUSH
40996: LD_VAR 0 3
41000: PUSH
41001: LD_VAR 0 4
41005: ARRAY
41006: PPUSH
41007: CALL_OW 254
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: PUSH
41018: EMPTY
41019: LIST
41020: ADD
41021: ST_TO_ADDR
41022: GO 40935
41024: POP
41025: POP
// result := list ;
41026: LD_ADDR_VAR 0 2
41030: PUSH
41031: LD_VAR 0 5
41035: ST_TO_ADDR
// end ;
41036: LD_VAR 0 2
41040: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41041: LD_INT 0
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
41047: PPUSH
41048: PPUSH
41049: PPUSH
// if not factory then
41050: LD_VAR 0 1
41054: NOT
41055: IFFALSE 41059
// exit ;
41057: GO 41652
// if control = control_apeman then
41059: LD_VAR 0 4
41063: PUSH
41064: LD_INT 5
41066: EQUAL
41067: IFFALSE 41176
// begin tmp := UnitsInside ( factory ) ;
41069: LD_ADDR_VAR 0 8
41073: PUSH
41074: LD_VAR 0 1
41078: PPUSH
41079: CALL_OW 313
41083: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41084: LD_VAR 0 8
41088: PPUSH
41089: LD_INT 25
41091: PUSH
41092: LD_INT 12
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PPUSH
41099: CALL_OW 72
41103: NOT
41104: IFFALSE 41114
// control := control_manual ;
41106: LD_ADDR_VAR 0 4
41110: PUSH
41111: LD_INT 1
41113: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41114: LD_ADDR_VAR 0 8
41118: PUSH
41119: LD_VAR 0 1
41123: PPUSH
41124: CALL 40811 0 1
41128: ST_TO_ADDR
// if tmp then
41129: LD_VAR 0 8
41133: IFFALSE 41176
// begin for i in tmp do
41135: LD_ADDR_VAR 0 7
41139: PUSH
41140: LD_VAR 0 8
41144: PUSH
41145: FOR_IN
41146: IFFALSE 41174
// if i [ 1 ] = b_ext_radio then
41148: LD_VAR 0 7
41152: PUSH
41153: LD_INT 1
41155: ARRAY
41156: PUSH
41157: LD_INT 22
41159: EQUAL
41160: IFFALSE 41172
// begin control := control_remote ;
41162: LD_ADDR_VAR 0 4
41166: PUSH
41167: LD_INT 2
41169: ST_TO_ADDR
// break ;
41170: GO 41174
// end ;
41172: GO 41145
41174: POP
41175: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41176: LD_VAR 0 1
41180: PPUSH
41181: LD_VAR 0 2
41185: PPUSH
41186: LD_VAR 0 3
41190: PPUSH
41191: LD_VAR 0 4
41195: PPUSH
41196: LD_VAR 0 5
41200: PPUSH
41201: CALL_OW 448
41205: IFFALSE 41240
// begin result := [ chassis , engine , control , weapon ] ;
41207: LD_ADDR_VAR 0 6
41211: PUSH
41212: LD_VAR 0 2
41216: PUSH
41217: LD_VAR 0 3
41221: PUSH
41222: LD_VAR 0 4
41226: PUSH
41227: LD_VAR 0 5
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: ST_TO_ADDR
// exit ;
41238: GO 41652
// end ; _chassis := AvailableChassisList ( factory ) ;
41240: LD_ADDR_VAR 0 9
41244: PUSH
41245: LD_VAR 0 1
41249: PPUSH
41250: CALL_OW 475
41254: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41255: LD_ADDR_VAR 0 11
41259: PUSH
41260: LD_VAR 0 1
41264: PPUSH
41265: CALL_OW 476
41269: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41270: LD_ADDR_VAR 0 12
41274: PUSH
41275: LD_VAR 0 1
41279: PPUSH
41280: CALL_OW 477
41284: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41285: LD_ADDR_VAR 0 10
41289: PUSH
41290: LD_VAR 0 1
41294: PPUSH
41295: CALL_OW 478
41299: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41300: LD_VAR 0 9
41304: NOT
41305: PUSH
41306: LD_VAR 0 11
41310: NOT
41311: OR
41312: PUSH
41313: LD_VAR 0 12
41317: NOT
41318: OR
41319: PUSH
41320: LD_VAR 0 10
41324: NOT
41325: OR
41326: IFFALSE 41361
// begin result := [ chassis , engine , control , weapon ] ;
41328: LD_ADDR_VAR 0 6
41332: PUSH
41333: LD_VAR 0 2
41337: PUSH
41338: LD_VAR 0 3
41342: PUSH
41343: LD_VAR 0 4
41347: PUSH
41348: LD_VAR 0 5
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: ST_TO_ADDR
// exit ;
41359: GO 41652
// end ; if not chassis in _chassis then
41361: LD_VAR 0 2
41365: PUSH
41366: LD_VAR 0 9
41370: IN
41371: NOT
41372: IFFALSE 41398
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41374: LD_ADDR_VAR 0 2
41378: PUSH
41379: LD_VAR 0 9
41383: PUSH
41384: LD_INT 1
41386: PPUSH
41387: LD_VAR 0 9
41391: PPUSH
41392: CALL_OW 12
41396: ARRAY
41397: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41398: LD_VAR 0 2
41402: PPUSH
41403: LD_VAR 0 3
41407: PPUSH
41408: CALL 41657 0 2
41412: NOT
41413: IFFALSE 41472
// repeat engine := _engine [ 1 ] ;
41415: LD_ADDR_VAR 0 3
41419: PUSH
41420: LD_VAR 0 11
41424: PUSH
41425: LD_INT 1
41427: ARRAY
41428: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41429: LD_ADDR_VAR 0 11
41433: PUSH
41434: LD_VAR 0 11
41438: PPUSH
41439: LD_INT 1
41441: PPUSH
41442: CALL_OW 3
41446: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41447: LD_VAR 0 2
41451: PPUSH
41452: LD_VAR 0 3
41456: PPUSH
41457: CALL 41657 0 2
41461: PUSH
41462: LD_VAR 0 11
41466: PUSH
41467: EMPTY
41468: EQUAL
41469: OR
41470: IFFALSE 41415
// if not control in _control then
41472: LD_VAR 0 4
41476: PUSH
41477: LD_VAR 0 12
41481: IN
41482: NOT
41483: IFFALSE 41509
// control := _control [ rand ( 1 , _control ) ] ;
41485: LD_ADDR_VAR 0 4
41489: PUSH
41490: LD_VAR 0 12
41494: PUSH
41495: LD_INT 1
41497: PPUSH
41498: LD_VAR 0 12
41502: PPUSH
41503: CALL_OW 12
41507: ARRAY
41508: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41509: LD_VAR 0 2
41513: PPUSH
41514: LD_VAR 0 5
41518: PPUSH
41519: CALL 41877 0 2
41523: NOT
41524: IFFALSE 41583
// repeat weapon := _weapon [ 1 ] ;
41526: LD_ADDR_VAR 0 5
41530: PUSH
41531: LD_VAR 0 10
41535: PUSH
41536: LD_INT 1
41538: ARRAY
41539: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41540: LD_ADDR_VAR 0 10
41544: PUSH
41545: LD_VAR 0 10
41549: PPUSH
41550: LD_INT 1
41552: PPUSH
41553: CALL_OW 3
41557: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41558: LD_VAR 0 2
41562: PPUSH
41563: LD_VAR 0 5
41567: PPUSH
41568: CALL 41877 0 2
41572: PUSH
41573: LD_VAR 0 10
41577: PUSH
41578: EMPTY
41579: EQUAL
41580: OR
41581: IFFALSE 41526
// result := [ ] ;
41583: LD_ADDR_VAR 0 6
41587: PUSH
41588: EMPTY
41589: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41590: LD_VAR 0 1
41594: PPUSH
41595: LD_VAR 0 2
41599: PPUSH
41600: LD_VAR 0 3
41604: PPUSH
41605: LD_VAR 0 4
41609: PPUSH
41610: LD_VAR 0 5
41614: PPUSH
41615: CALL_OW 448
41619: IFFALSE 41652
// result := [ chassis , engine , control , weapon ] ;
41621: LD_ADDR_VAR 0 6
41625: PUSH
41626: LD_VAR 0 2
41630: PUSH
41631: LD_VAR 0 3
41635: PUSH
41636: LD_VAR 0 4
41640: PUSH
41641: LD_VAR 0 5
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: ST_TO_ADDR
// end ;
41652: LD_VAR 0 6
41656: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41657: LD_INT 0
41659: PPUSH
// if not chassis or not engine then
41660: LD_VAR 0 1
41664: NOT
41665: PUSH
41666: LD_VAR 0 2
41670: NOT
41671: OR
41672: IFFALSE 41676
// exit ;
41674: GO 41872
// case engine of engine_solar :
41676: LD_VAR 0 2
41680: PUSH
41681: LD_INT 2
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41689
41687: GO 41727
41689: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41690: LD_ADDR_VAR 0 3
41694: PUSH
41695: LD_INT 11
41697: PUSH
41698: LD_INT 12
41700: PUSH
41701: LD_INT 13
41703: PUSH
41704: LD_INT 14
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 3
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: ST_TO_ADDR
41725: GO 41856
41727: LD_INT 1
41729: DOUBLE
41730: EQUAL
41731: IFTRUE 41735
41733: GO 41797
41735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_INT 11
41743: PUSH
41744: LD_INT 12
41746: PUSH
41747: LD_INT 13
41749: PUSH
41750: LD_INT 14
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: LD_INT 3
41761: PUSH
41762: LD_INT 4
41764: PUSH
41765: LD_INT 5
41767: PUSH
41768: LD_INT 21
41770: PUSH
41771: LD_INT 23
41773: PUSH
41774: LD_INT 22
41776: PUSH
41777: LD_INT 24
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: ST_TO_ADDR
41795: GO 41856
41797: LD_INT 3
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41805
41803: GO 41855
41805: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41806: LD_ADDR_VAR 0 3
41810: PUSH
41811: LD_INT 13
41813: PUSH
41814: LD_INT 14
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: LD_INT 3
41822: PUSH
41823: LD_INT 4
41825: PUSH
41826: LD_INT 5
41828: PUSH
41829: LD_INT 21
41831: PUSH
41832: LD_INT 22
41834: PUSH
41835: LD_INT 23
41837: PUSH
41838: LD_INT 24
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: ST_TO_ADDR
41853: GO 41856
41855: POP
// result := ( chassis in result ) ;
41856: LD_ADDR_VAR 0 3
41860: PUSH
41861: LD_VAR 0 1
41865: PUSH
41866: LD_VAR 0 3
41870: IN
41871: ST_TO_ADDR
// end ;
41872: LD_VAR 0 3
41876: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41877: LD_INT 0
41879: PPUSH
// if not chassis or not weapon then
41880: LD_VAR 0 1
41884: NOT
41885: PUSH
41886: LD_VAR 0 2
41890: NOT
41891: OR
41892: IFFALSE 41896
// exit ;
41894: GO 42958
// case weapon of us_machine_gun :
41896: LD_VAR 0 2
41900: PUSH
41901: LD_INT 2
41903: DOUBLE
41904: EQUAL
41905: IFTRUE 41909
41907: GO 41939
41909: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41910: LD_ADDR_VAR 0 3
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 3
41923: PUSH
41924: LD_INT 4
41926: PUSH
41927: LD_INT 5
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: ST_TO_ADDR
41937: GO 42942
41939: LD_INT 3
41941: DOUBLE
41942: EQUAL
41943: IFTRUE 41947
41945: GO 41977
41947: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41948: LD_ADDR_VAR 0 3
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 3
41961: PUSH
41962: LD_INT 4
41964: PUSH
41965: LD_INT 5
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: ST_TO_ADDR
41975: GO 42942
41977: LD_INT 11
41979: DOUBLE
41980: EQUAL
41981: IFTRUE 41985
41983: GO 42015
41985: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: LD_INT 4
42002: PUSH
42003: LD_INT 5
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
42013: GO 42942
42015: LD_INT 4
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42023
42021: GO 42049
42023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42024: LD_ADDR_VAR 0 3
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 3
42034: PUSH
42035: LD_INT 4
42037: PUSH
42038: LD_INT 5
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: ST_TO_ADDR
42047: GO 42942
42049: LD_INT 5
42051: DOUBLE
42052: EQUAL
42053: IFTRUE 42057
42055: GO 42083
42057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42058: LD_ADDR_VAR 0 3
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: LD_INT 3
42068: PUSH
42069: LD_INT 4
42071: PUSH
42072: LD_INT 5
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
42081: GO 42942
42083: LD_INT 9
42085: DOUBLE
42086: EQUAL
42087: IFTRUE 42091
42089: GO 42117
42091: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42092: LD_ADDR_VAR 0 3
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: LD_INT 3
42102: PUSH
42103: LD_INT 4
42105: PUSH
42106: LD_INT 5
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: ST_TO_ADDR
42115: GO 42942
42117: LD_INT 7
42119: DOUBLE
42120: EQUAL
42121: IFTRUE 42125
42123: GO 42151
42125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42126: LD_ADDR_VAR 0 3
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: LD_INT 4
42139: PUSH
42140: LD_INT 5
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: ST_TO_ADDR
42149: GO 42942
42151: LD_INT 12
42153: DOUBLE
42154: EQUAL
42155: IFTRUE 42159
42157: GO 42185
42159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42160: LD_ADDR_VAR 0 3
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: LD_INT 3
42170: PUSH
42171: LD_INT 4
42173: PUSH
42174: LD_INT 5
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
42183: GO 42942
42185: LD_INT 13
42187: DOUBLE
42188: EQUAL
42189: IFTRUE 42193
42191: GO 42219
42193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42194: LD_ADDR_VAR 0 3
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: LD_INT 3
42204: PUSH
42205: LD_INT 4
42207: PUSH
42208: LD_INT 5
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
42217: GO 42942
42219: LD_INT 14
42221: DOUBLE
42222: EQUAL
42223: IFTRUE 42227
42225: GO 42245
42227: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_INT 4
42235: PUSH
42236: LD_INT 5
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: ST_TO_ADDR
42243: GO 42942
42245: LD_INT 6
42247: DOUBLE
42248: EQUAL
42249: IFTRUE 42253
42251: GO 42271
42253: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42254: LD_ADDR_VAR 0 3
42258: PUSH
42259: LD_INT 4
42261: PUSH
42262: LD_INT 5
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: ST_TO_ADDR
42269: GO 42942
42271: LD_INT 10
42273: DOUBLE
42274: EQUAL
42275: IFTRUE 42279
42277: GO 42297
42279: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42280: LD_ADDR_VAR 0 3
42284: PUSH
42285: LD_INT 4
42287: PUSH
42288: LD_INT 5
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: ST_TO_ADDR
42295: GO 42942
42297: LD_INT 22
42299: DOUBLE
42300: EQUAL
42301: IFTRUE 42305
42303: GO 42331
42305: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_INT 11
42313: PUSH
42314: LD_INT 12
42316: PUSH
42317: LD_INT 13
42319: PUSH
42320: LD_INT 14
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
42329: GO 42942
42331: LD_INT 23
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42339
42337: GO 42365
42339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42340: LD_ADDR_VAR 0 3
42344: PUSH
42345: LD_INT 11
42347: PUSH
42348: LD_INT 12
42350: PUSH
42351: LD_INT 13
42353: PUSH
42354: LD_INT 14
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
42363: GO 42942
42365: LD_INT 24
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42399
42373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_INT 11
42381: PUSH
42382: LD_INT 12
42384: PUSH
42385: LD_INT 13
42387: PUSH
42388: LD_INT 14
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 42942
42399: LD_INT 30
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42433
42407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 11
42415: PUSH
42416: LD_INT 12
42418: PUSH
42419: LD_INT 13
42421: PUSH
42422: LD_INT 14
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: ST_TO_ADDR
42431: GO 42942
42433: LD_INT 25
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42441
42439: GO 42459
42441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 13
42449: PUSH
42450: LD_INT 14
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: ST_TO_ADDR
42457: GO 42942
42459: LD_INT 27
42461: DOUBLE
42462: EQUAL
42463: IFTRUE 42467
42465: GO 42485
42467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42468: LD_ADDR_VAR 0 3
42472: PUSH
42473: LD_INT 13
42475: PUSH
42476: LD_INT 14
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: ST_TO_ADDR
42483: GO 42942
42485: LD_EXP 53
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42495
42493: GO 42521
42495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42496: LD_ADDR_VAR 0 3
42500: PUSH
42501: LD_INT 11
42503: PUSH
42504: LD_INT 12
42506: PUSH
42507: LD_INT 13
42509: PUSH
42510: LD_INT 14
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
42519: GO 42942
42521: LD_INT 28
42523: DOUBLE
42524: EQUAL
42525: IFTRUE 42529
42527: GO 42547
42529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42530: LD_ADDR_VAR 0 3
42534: PUSH
42535: LD_INT 13
42537: PUSH
42538: LD_INT 14
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: ST_TO_ADDR
42545: GO 42942
42547: LD_INT 29
42549: DOUBLE
42550: EQUAL
42551: IFTRUE 42555
42553: GO 42573
42555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42556: LD_ADDR_VAR 0 3
42560: PUSH
42561: LD_INT 13
42563: PUSH
42564: LD_INT 14
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: ST_TO_ADDR
42571: GO 42942
42573: LD_INT 31
42575: DOUBLE
42576: EQUAL
42577: IFTRUE 42581
42579: GO 42599
42581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42582: LD_ADDR_VAR 0 3
42586: PUSH
42587: LD_INT 13
42589: PUSH
42590: LD_INT 14
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: ST_TO_ADDR
42597: GO 42942
42599: LD_INT 26
42601: DOUBLE
42602: EQUAL
42603: IFTRUE 42607
42605: GO 42625
42607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42608: LD_ADDR_VAR 0 3
42612: PUSH
42613: LD_INT 13
42615: PUSH
42616: LD_INT 14
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: ST_TO_ADDR
42623: GO 42942
42625: LD_INT 42
42627: DOUBLE
42628: EQUAL
42629: IFTRUE 42633
42631: GO 42659
42633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42634: LD_ADDR_VAR 0 3
42638: PUSH
42639: LD_INT 21
42641: PUSH
42642: LD_INT 22
42644: PUSH
42645: LD_INT 23
42647: PUSH
42648: LD_INT 24
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
42657: GO 42942
42659: LD_INT 43
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42667
42665: GO 42693
42667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42668: LD_ADDR_VAR 0 3
42672: PUSH
42673: LD_INT 21
42675: PUSH
42676: LD_INT 22
42678: PUSH
42679: LD_INT 23
42681: PUSH
42682: LD_INT 24
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
42691: GO 42942
42693: LD_INT 44
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42727
42701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_INT 21
42709: PUSH
42710: LD_INT 22
42712: PUSH
42713: LD_INT 23
42715: PUSH
42716: LD_INT 24
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: ST_TO_ADDR
42725: GO 42942
42727: LD_INT 45
42729: DOUBLE
42730: EQUAL
42731: IFTRUE 42735
42733: GO 42761
42735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42736: LD_ADDR_VAR 0 3
42740: PUSH
42741: LD_INT 21
42743: PUSH
42744: LD_INT 22
42746: PUSH
42747: LD_INT 23
42749: PUSH
42750: LD_INT 24
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: ST_TO_ADDR
42759: GO 42942
42761: LD_INT 49
42763: DOUBLE
42764: EQUAL
42765: IFTRUE 42769
42767: GO 42795
42769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42770: LD_ADDR_VAR 0 3
42774: PUSH
42775: LD_INT 21
42777: PUSH
42778: LD_INT 22
42780: PUSH
42781: LD_INT 23
42783: PUSH
42784: LD_INT 24
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: ST_TO_ADDR
42793: GO 42942
42795: LD_INT 51
42797: DOUBLE
42798: EQUAL
42799: IFTRUE 42803
42801: GO 42829
42803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42804: LD_ADDR_VAR 0 3
42808: PUSH
42809: LD_INT 21
42811: PUSH
42812: LD_INT 22
42814: PUSH
42815: LD_INT 23
42817: PUSH
42818: LD_INT 24
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
42827: GO 42942
42829: LD_INT 52
42831: DOUBLE
42832: EQUAL
42833: IFTRUE 42837
42835: GO 42863
42837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42838: LD_ADDR_VAR 0 3
42842: PUSH
42843: LD_INT 21
42845: PUSH
42846: LD_INT 22
42848: PUSH
42849: LD_INT 23
42851: PUSH
42852: LD_INT 24
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: ST_TO_ADDR
42861: GO 42942
42863: LD_INT 53
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42871
42869: GO 42889
42871: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_INT 23
42879: PUSH
42880: LD_INT 24
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: ST_TO_ADDR
42887: GO 42942
42889: LD_INT 46
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42897
42895: GO 42915
42897: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42898: LD_ADDR_VAR 0 3
42902: PUSH
42903: LD_INT 23
42905: PUSH
42906: LD_INT 24
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: ST_TO_ADDR
42913: GO 42942
42915: LD_INT 47
42917: DOUBLE
42918: EQUAL
42919: IFTRUE 42923
42921: GO 42941
42923: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42924: LD_ADDR_VAR 0 3
42928: PUSH
42929: LD_INT 23
42931: PUSH
42932: LD_INT 24
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: ST_TO_ADDR
42939: GO 42942
42941: POP
// result := ( chassis in result ) ;
42942: LD_ADDR_VAR 0 3
42946: PUSH
42947: LD_VAR 0 1
42951: PUSH
42952: LD_VAR 0 3
42956: IN
42957: ST_TO_ADDR
// end ;
42958: LD_VAR 0 3
42962: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42963: LD_INT 0
42965: PPUSH
42966: PPUSH
42967: PPUSH
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
// result := array ;
42972: LD_ADDR_VAR 0 5
42976: PUSH
42977: LD_VAR 0 1
42981: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42982: LD_VAR 0 1
42986: NOT
42987: PUSH
42988: LD_VAR 0 2
42992: NOT
42993: OR
42994: PUSH
42995: LD_VAR 0 3
42999: NOT
43000: OR
43001: PUSH
43002: LD_VAR 0 2
43006: PUSH
43007: LD_VAR 0 1
43011: GREATER
43012: OR
43013: PUSH
43014: LD_VAR 0 3
43018: PUSH
43019: LD_VAR 0 1
43023: GREATER
43024: OR
43025: IFFALSE 43029
// exit ;
43027: GO 43325
// if direction then
43029: LD_VAR 0 4
43033: IFFALSE 43097
// begin d := 1 ;
43035: LD_ADDR_VAR 0 9
43039: PUSH
43040: LD_INT 1
43042: ST_TO_ADDR
// if i_from > i_to then
43043: LD_VAR 0 2
43047: PUSH
43048: LD_VAR 0 3
43052: GREATER
43053: IFFALSE 43079
// length := ( array - i_from ) + i_to else
43055: LD_ADDR_VAR 0 11
43059: PUSH
43060: LD_VAR 0 1
43064: PUSH
43065: LD_VAR 0 2
43069: MINUS
43070: PUSH
43071: LD_VAR 0 3
43075: PLUS
43076: ST_TO_ADDR
43077: GO 43095
// length := i_to - i_from ;
43079: LD_ADDR_VAR 0 11
43083: PUSH
43084: LD_VAR 0 3
43088: PUSH
43089: LD_VAR 0 2
43093: MINUS
43094: ST_TO_ADDR
// end else
43095: GO 43158
// begin d := - 1 ;
43097: LD_ADDR_VAR 0 9
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: ST_TO_ADDR
// if i_from > i_to then
43106: LD_VAR 0 2
43110: PUSH
43111: LD_VAR 0 3
43115: GREATER
43116: IFFALSE 43136
// length := i_from - i_to else
43118: LD_ADDR_VAR 0 11
43122: PUSH
43123: LD_VAR 0 2
43127: PUSH
43128: LD_VAR 0 3
43132: MINUS
43133: ST_TO_ADDR
43134: GO 43158
// length := ( array - i_to ) + i_from ;
43136: LD_ADDR_VAR 0 11
43140: PUSH
43141: LD_VAR 0 1
43145: PUSH
43146: LD_VAR 0 3
43150: MINUS
43151: PUSH
43152: LD_VAR 0 2
43156: PLUS
43157: ST_TO_ADDR
// end ; if not length then
43158: LD_VAR 0 11
43162: NOT
43163: IFFALSE 43167
// exit ;
43165: GO 43325
// tmp := array ;
43167: LD_ADDR_VAR 0 10
43171: PUSH
43172: LD_VAR 0 1
43176: ST_TO_ADDR
// for i = 1 to length do
43177: LD_ADDR_VAR 0 6
43181: PUSH
43182: DOUBLE
43183: LD_INT 1
43185: DEC
43186: ST_TO_ADDR
43187: LD_VAR 0 11
43191: PUSH
43192: FOR_TO
43193: IFFALSE 43313
// begin for j = 1 to array do
43195: LD_ADDR_VAR 0 7
43199: PUSH
43200: DOUBLE
43201: LD_INT 1
43203: DEC
43204: ST_TO_ADDR
43205: LD_VAR 0 1
43209: PUSH
43210: FOR_TO
43211: IFFALSE 43299
// begin k := j + d ;
43213: LD_ADDR_VAR 0 8
43217: PUSH
43218: LD_VAR 0 7
43222: PUSH
43223: LD_VAR 0 9
43227: PLUS
43228: ST_TO_ADDR
// if k > array then
43229: LD_VAR 0 8
43233: PUSH
43234: LD_VAR 0 1
43238: GREATER
43239: IFFALSE 43249
// k := 1 ;
43241: LD_ADDR_VAR 0 8
43245: PUSH
43246: LD_INT 1
43248: ST_TO_ADDR
// if not k then
43249: LD_VAR 0 8
43253: NOT
43254: IFFALSE 43266
// k := array ;
43256: LD_ADDR_VAR 0 8
43260: PUSH
43261: LD_VAR 0 1
43265: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43266: LD_ADDR_VAR 0 10
43270: PUSH
43271: LD_VAR 0 10
43275: PPUSH
43276: LD_VAR 0 8
43280: PPUSH
43281: LD_VAR 0 1
43285: PUSH
43286: LD_VAR 0 7
43290: ARRAY
43291: PPUSH
43292: CALL_OW 1
43296: ST_TO_ADDR
// end ;
43297: GO 43210
43299: POP
43300: POP
// array := tmp ;
43301: LD_ADDR_VAR 0 1
43305: PUSH
43306: LD_VAR 0 10
43310: ST_TO_ADDR
// end ;
43311: GO 43192
43313: POP
43314: POP
// result := array ;
43315: LD_ADDR_VAR 0 5
43319: PUSH
43320: LD_VAR 0 1
43324: ST_TO_ADDR
// end ;
43325: LD_VAR 0 5
43329: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43330: LD_INT 0
43332: PPUSH
43333: PPUSH
// result := 0 ;
43334: LD_ADDR_VAR 0 3
43338: PUSH
43339: LD_INT 0
43341: ST_TO_ADDR
// if not array or not value in array then
43342: LD_VAR 0 1
43346: NOT
43347: PUSH
43348: LD_VAR 0 2
43352: PUSH
43353: LD_VAR 0 1
43357: IN
43358: NOT
43359: OR
43360: IFFALSE 43364
// exit ;
43362: GO 43418
// for i = 1 to array do
43364: LD_ADDR_VAR 0 4
43368: PUSH
43369: DOUBLE
43370: LD_INT 1
43372: DEC
43373: ST_TO_ADDR
43374: LD_VAR 0 1
43378: PUSH
43379: FOR_TO
43380: IFFALSE 43416
// if value = array [ i ] then
43382: LD_VAR 0 2
43386: PUSH
43387: LD_VAR 0 1
43391: PUSH
43392: LD_VAR 0 4
43396: ARRAY
43397: EQUAL
43398: IFFALSE 43414
// begin result := i ;
43400: LD_ADDR_VAR 0 3
43404: PUSH
43405: LD_VAR 0 4
43409: ST_TO_ADDR
// exit ;
43410: POP
43411: POP
43412: GO 43418
// end ;
43414: GO 43379
43416: POP
43417: POP
// end ;
43418: LD_VAR 0 3
43422: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43423: LD_INT 0
43425: PPUSH
// vc_chassis := chassis ;
43426: LD_ADDR_OWVAR 37
43430: PUSH
43431: LD_VAR 0 1
43435: ST_TO_ADDR
// vc_engine := engine ;
43436: LD_ADDR_OWVAR 39
43440: PUSH
43441: LD_VAR 0 2
43445: ST_TO_ADDR
// vc_control := control ;
43446: LD_ADDR_OWVAR 38
43450: PUSH
43451: LD_VAR 0 3
43455: ST_TO_ADDR
// vc_weapon := weapon ;
43456: LD_ADDR_OWVAR 40
43460: PUSH
43461: LD_VAR 0 4
43465: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43466: LD_ADDR_OWVAR 41
43470: PUSH
43471: LD_VAR 0 5
43475: ST_TO_ADDR
// end ;
43476: LD_VAR 0 6
43480: RET
// export function WantPlant ( unit ) ; var task ; begin
43481: LD_INT 0
43483: PPUSH
43484: PPUSH
// result := false ;
43485: LD_ADDR_VAR 0 2
43489: PUSH
43490: LD_INT 0
43492: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43493: LD_ADDR_VAR 0 3
43497: PUSH
43498: LD_VAR 0 1
43502: PPUSH
43503: CALL_OW 437
43507: ST_TO_ADDR
// if task then
43508: LD_VAR 0 3
43512: IFFALSE 43540
// if task [ 1 ] [ 1 ] = p then
43514: LD_VAR 0 3
43518: PUSH
43519: LD_INT 1
43521: ARRAY
43522: PUSH
43523: LD_INT 1
43525: ARRAY
43526: PUSH
43527: LD_STRING p
43529: EQUAL
43530: IFFALSE 43540
// result := true ;
43532: LD_ADDR_VAR 0 2
43536: PUSH
43537: LD_INT 1
43539: ST_TO_ADDR
// end ;
43540: LD_VAR 0 2
43544: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43545: LD_INT 0
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
// if pos < 1 then
43551: LD_VAR 0 2
43555: PUSH
43556: LD_INT 1
43558: LESS
43559: IFFALSE 43563
// exit ;
43561: GO 43866
// if pos = 1 then
43563: LD_VAR 0 2
43567: PUSH
43568: LD_INT 1
43570: EQUAL
43571: IFFALSE 43604
// result := Replace ( arr , pos [ 1 ] , value ) else
43573: LD_ADDR_VAR 0 4
43577: PUSH
43578: LD_VAR 0 1
43582: PPUSH
43583: LD_VAR 0 2
43587: PUSH
43588: LD_INT 1
43590: ARRAY
43591: PPUSH
43592: LD_VAR 0 3
43596: PPUSH
43597: CALL_OW 1
43601: ST_TO_ADDR
43602: GO 43866
// begin tmp := arr ;
43604: LD_ADDR_VAR 0 6
43608: PUSH
43609: LD_VAR 0 1
43613: ST_TO_ADDR
// s_arr := [ tmp ] ;
43614: LD_ADDR_VAR 0 7
43618: PUSH
43619: LD_VAR 0 6
43623: PUSH
43624: EMPTY
43625: LIST
43626: ST_TO_ADDR
// for i = 1 to pos - 1 do
43627: LD_ADDR_VAR 0 5
43631: PUSH
43632: DOUBLE
43633: LD_INT 1
43635: DEC
43636: ST_TO_ADDR
43637: LD_VAR 0 2
43641: PUSH
43642: LD_INT 1
43644: MINUS
43645: PUSH
43646: FOR_TO
43647: IFFALSE 43692
// begin tmp := tmp [ pos [ i ] ] ;
43649: LD_ADDR_VAR 0 6
43653: PUSH
43654: LD_VAR 0 6
43658: PUSH
43659: LD_VAR 0 2
43663: PUSH
43664: LD_VAR 0 5
43668: ARRAY
43669: ARRAY
43670: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43671: LD_ADDR_VAR 0 7
43675: PUSH
43676: LD_VAR 0 7
43680: PUSH
43681: LD_VAR 0 6
43685: PUSH
43686: EMPTY
43687: LIST
43688: ADD
43689: ST_TO_ADDR
// end ;
43690: GO 43646
43692: POP
43693: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43694: LD_ADDR_VAR 0 6
43698: PUSH
43699: LD_VAR 0 6
43703: PPUSH
43704: LD_VAR 0 2
43708: PUSH
43709: LD_VAR 0 2
43713: ARRAY
43714: PPUSH
43715: LD_VAR 0 3
43719: PPUSH
43720: CALL_OW 1
43724: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43725: LD_ADDR_VAR 0 7
43729: PUSH
43730: LD_VAR 0 7
43734: PPUSH
43735: LD_VAR 0 7
43739: PPUSH
43740: LD_VAR 0 6
43744: PPUSH
43745: CALL_OW 1
43749: ST_TO_ADDR
// for i = s_arr downto 2 do
43750: LD_ADDR_VAR 0 5
43754: PUSH
43755: DOUBLE
43756: LD_VAR 0 7
43760: INC
43761: ST_TO_ADDR
43762: LD_INT 2
43764: PUSH
43765: FOR_DOWNTO
43766: IFFALSE 43850
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43768: LD_ADDR_VAR 0 6
43772: PUSH
43773: LD_VAR 0 7
43777: PUSH
43778: LD_VAR 0 5
43782: PUSH
43783: LD_INT 1
43785: MINUS
43786: ARRAY
43787: PPUSH
43788: LD_VAR 0 2
43792: PUSH
43793: LD_VAR 0 5
43797: PUSH
43798: LD_INT 1
43800: MINUS
43801: ARRAY
43802: PPUSH
43803: LD_VAR 0 7
43807: PUSH
43808: LD_VAR 0 5
43812: ARRAY
43813: PPUSH
43814: CALL_OW 1
43818: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43819: LD_ADDR_VAR 0 7
43823: PUSH
43824: LD_VAR 0 7
43828: PPUSH
43829: LD_VAR 0 5
43833: PUSH
43834: LD_INT 1
43836: MINUS
43837: PPUSH
43838: LD_VAR 0 6
43842: PPUSH
43843: CALL_OW 1
43847: ST_TO_ADDR
// end ;
43848: GO 43765
43850: POP
43851: POP
// result := s_arr [ 1 ] ;
43852: LD_ADDR_VAR 0 4
43856: PUSH
43857: LD_VAR 0 7
43861: PUSH
43862: LD_INT 1
43864: ARRAY
43865: ST_TO_ADDR
// end ; end ;
43866: LD_VAR 0 4
43870: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43871: LD_INT 0
43873: PPUSH
43874: PPUSH
// if not list then
43875: LD_VAR 0 1
43879: NOT
43880: IFFALSE 43884
// exit ;
43882: GO 43975
// i := list [ pos1 ] ;
43884: LD_ADDR_VAR 0 5
43888: PUSH
43889: LD_VAR 0 1
43893: PUSH
43894: LD_VAR 0 2
43898: ARRAY
43899: ST_TO_ADDR
// if not i then
43900: LD_VAR 0 5
43904: NOT
43905: IFFALSE 43909
// exit ;
43907: GO 43975
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43909: LD_ADDR_VAR 0 1
43913: PUSH
43914: LD_VAR 0 1
43918: PPUSH
43919: LD_VAR 0 2
43923: PPUSH
43924: LD_VAR 0 1
43928: PUSH
43929: LD_VAR 0 3
43933: ARRAY
43934: PPUSH
43935: CALL_OW 1
43939: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43940: LD_ADDR_VAR 0 1
43944: PUSH
43945: LD_VAR 0 1
43949: PPUSH
43950: LD_VAR 0 3
43954: PPUSH
43955: LD_VAR 0 5
43959: PPUSH
43960: CALL_OW 1
43964: ST_TO_ADDR
// result := list ;
43965: LD_ADDR_VAR 0 4
43969: PUSH
43970: LD_VAR 0 1
43974: ST_TO_ADDR
// end ;
43975: LD_VAR 0 4
43979: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43980: LD_INT 0
43982: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43983: LD_ADDR_VAR 0 5
43987: PUSH
43988: LD_VAR 0 1
43992: PPUSH
43993: CALL_OW 250
43997: PPUSH
43998: LD_VAR 0 1
44002: PPUSH
44003: CALL_OW 251
44007: PPUSH
44008: LD_VAR 0 2
44012: PPUSH
44013: LD_VAR 0 3
44017: PPUSH
44018: LD_VAR 0 4
44022: PPUSH
44023: CALL 44033 0 5
44027: ST_TO_ADDR
// end ;
44028: LD_VAR 0 5
44032: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44033: LD_INT 0
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
// if not list then
44039: LD_VAR 0 3
44043: NOT
44044: IFFALSE 44048
// exit ;
44046: GO 44436
// result := [ ] ;
44048: LD_ADDR_VAR 0 6
44052: PUSH
44053: EMPTY
44054: ST_TO_ADDR
// for i in list do
44055: LD_ADDR_VAR 0 7
44059: PUSH
44060: LD_VAR 0 3
44064: PUSH
44065: FOR_IN
44066: IFFALSE 44268
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44068: LD_ADDR_VAR 0 9
44072: PUSH
44073: LD_VAR 0 7
44077: PPUSH
44078: LD_VAR 0 1
44082: PPUSH
44083: LD_VAR 0 2
44087: PPUSH
44088: CALL_OW 297
44092: ST_TO_ADDR
// if not result then
44093: LD_VAR 0 6
44097: NOT
44098: IFFALSE 44124
// result := [ [ i , tmp ] ] else
44100: LD_ADDR_VAR 0 6
44104: PUSH
44105: LD_VAR 0 7
44109: PUSH
44110: LD_VAR 0 9
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: EMPTY
44120: LIST
44121: ST_TO_ADDR
44122: GO 44266
// begin if result [ result ] [ 2 ] < tmp then
44124: LD_VAR 0 6
44128: PUSH
44129: LD_VAR 0 6
44133: ARRAY
44134: PUSH
44135: LD_INT 2
44137: ARRAY
44138: PUSH
44139: LD_VAR 0 9
44143: LESS
44144: IFFALSE 44186
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44146: LD_ADDR_VAR 0 6
44150: PUSH
44151: LD_VAR 0 6
44155: PPUSH
44156: LD_VAR 0 6
44160: PUSH
44161: LD_INT 1
44163: PLUS
44164: PPUSH
44165: LD_VAR 0 7
44169: PUSH
44170: LD_VAR 0 9
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PPUSH
44179: CALL_OW 2
44183: ST_TO_ADDR
44184: GO 44266
// for j = 1 to result do
44186: LD_ADDR_VAR 0 8
44190: PUSH
44191: DOUBLE
44192: LD_INT 1
44194: DEC
44195: ST_TO_ADDR
44196: LD_VAR 0 6
44200: PUSH
44201: FOR_TO
44202: IFFALSE 44264
// begin if tmp < result [ j ] [ 2 ] then
44204: LD_VAR 0 9
44208: PUSH
44209: LD_VAR 0 6
44213: PUSH
44214: LD_VAR 0 8
44218: ARRAY
44219: PUSH
44220: LD_INT 2
44222: ARRAY
44223: LESS
44224: IFFALSE 44262
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44226: LD_ADDR_VAR 0 6
44230: PUSH
44231: LD_VAR 0 6
44235: PPUSH
44236: LD_VAR 0 8
44240: PPUSH
44241: LD_VAR 0 7
44245: PUSH
44246: LD_VAR 0 9
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PPUSH
44255: CALL_OW 2
44259: ST_TO_ADDR
// break ;
44260: GO 44264
// end ; end ;
44262: GO 44201
44264: POP
44265: POP
// end ; end ;
44266: GO 44065
44268: POP
44269: POP
// if result and not asc then
44270: LD_VAR 0 6
44274: PUSH
44275: LD_VAR 0 4
44279: NOT
44280: AND
44281: IFFALSE 44356
// begin tmp := result ;
44283: LD_ADDR_VAR 0 9
44287: PUSH
44288: LD_VAR 0 6
44292: ST_TO_ADDR
// for i = tmp downto 1 do
44293: LD_ADDR_VAR 0 7
44297: PUSH
44298: DOUBLE
44299: LD_VAR 0 9
44303: INC
44304: ST_TO_ADDR
44305: LD_INT 1
44307: PUSH
44308: FOR_DOWNTO
44309: IFFALSE 44354
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44311: LD_ADDR_VAR 0 6
44315: PUSH
44316: LD_VAR 0 6
44320: PPUSH
44321: LD_VAR 0 9
44325: PUSH
44326: LD_VAR 0 7
44330: MINUS
44331: PUSH
44332: LD_INT 1
44334: PLUS
44335: PPUSH
44336: LD_VAR 0 9
44340: PUSH
44341: LD_VAR 0 7
44345: ARRAY
44346: PPUSH
44347: CALL_OW 1
44351: ST_TO_ADDR
44352: GO 44308
44354: POP
44355: POP
// end ; tmp := [ ] ;
44356: LD_ADDR_VAR 0 9
44360: PUSH
44361: EMPTY
44362: ST_TO_ADDR
// if mode then
44363: LD_VAR 0 5
44367: IFFALSE 44436
// begin for i = 1 to result do
44369: LD_ADDR_VAR 0 7
44373: PUSH
44374: DOUBLE
44375: LD_INT 1
44377: DEC
44378: ST_TO_ADDR
44379: LD_VAR 0 6
44383: PUSH
44384: FOR_TO
44385: IFFALSE 44424
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44387: LD_ADDR_VAR 0 9
44391: PUSH
44392: LD_VAR 0 9
44396: PPUSH
44397: LD_VAR 0 7
44401: PPUSH
44402: LD_VAR 0 6
44406: PUSH
44407: LD_VAR 0 7
44411: ARRAY
44412: PUSH
44413: LD_INT 1
44415: ARRAY
44416: PPUSH
44417: CALL_OW 1
44421: ST_TO_ADDR
44422: GO 44384
44424: POP
44425: POP
// result := tmp ;
44426: LD_ADDR_VAR 0 6
44430: PUSH
44431: LD_VAR 0 9
44435: ST_TO_ADDR
// end ; end ;
44436: LD_VAR 0 6
44440: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44441: LD_INT 0
44443: PPUSH
44444: PPUSH
44445: PPUSH
44446: PPUSH
44447: PPUSH
44448: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44449: LD_ADDR_VAR 0 5
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// if not x or not y then
44471: LD_VAR 0 2
44475: NOT
44476: PUSH
44477: LD_VAR 0 3
44481: NOT
44482: OR
44483: IFFALSE 44487
// exit ;
44485: GO 46139
// if not range then
44487: LD_VAR 0 4
44491: NOT
44492: IFFALSE 44502
// range := 10 ;
44494: LD_ADDR_VAR 0 4
44498: PUSH
44499: LD_INT 10
44501: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44502: LD_ADDR_VAR 0 8
44506: PUSH
44507: LD_INT 81
44509: PUSH
44510: LD_VAR 0 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 92
44521: PUSH
44522: LD_VAR 0 2
44526: PUSH
44527: LD_VAR 0 3
44531: PUSH
44532: LD_VAR 0 4
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 3
44545: PUSH
44546: LD_INT 21
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: PPUSH
44565: CALL_OW 69
44569: ST_TO_ADDR
// if not tmp then
44570: LD_VAR 0 8
44574: NOT
44575: IFFALSE 44579
// exit ;
44577: GO 46139
// for i in tmp do
44579: LD_ADDR_VAR 0 6
44583: PUSH
44584: LD_VAR 0 8
44588: PUSH
44589: FOR_IN
44590: IFFALSE 46114
// begin points := [ 0 , 0 , 0 ] ;
44592: LD_ADDR_VAR 0 9
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: ST_TO_ADDR
// bpoints := 1 ;
44611: LD_ADDR_VAR 0 10
44615: PUSH
44616: LD_INT 1
44618: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44619: LD_VAR 0 6
44623: PPUSH
44624: CALL_OW 247
44628: PUSH
44629: LD_INT 1
44631: DOUBLE
44632: EQUAL
44633: IFTRUE 44637
44635: GO 45215
44637: POP
// begin if GetClass ( i ) = 1 then
44638: LD_VAR 0 6
44642: PPUSH
44643: CALL_OW 257
44647: PUSH
44648: LD_INT 1
44650: EQUAL
44651: IFFALSE 44672
// points := [ 10 , 5 , 3 ] ;
44653: LD_ADDR_VAR 0 9
44657: PUSH
44658: LD_INT 10
44660: PUSH
44661: LD_INT 5
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44672: LD_VAR 0 6
44676: PPUSH
44677: CALL_OW 257
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 3
44687: PUSH
44688: LD_INT 4
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: IN
44696: IFFALSE 44717
// points := [ 3 , 2 , 1 ] ;
44698: LD_ADDR_VAR 0 9
44702: PUSH
44703: LD_INT 3
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44717: LD_VAR 0 6
44721: PPUSH
44722: CALL_OW 257
44726: PUSH
44727: LD_INT 5
44729: EQUAL
44730: IFFALSE 44751
// points := [ 130 , 5 , 2 ] ;
44732: LD_ADDR_VAR 0 9
44736: PUSH
44737: LD_INT 130
44739: PUSH
44740: LD_INT 5
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44751: LD_VAR 0 6
44755: PPUSH
44756: CALL_OW 257
44760: PUSH
44761: LD_INT 8
44763: EQUAL
44764: IFFALSE 44785
// points := [ 35 , 35 , 30 ] ;
44766: LD_ADDR_VAR 0 9
44770: PUSH
44771: LD_INT 35
44773: PUSH
44774: LD_INT 35
44776: PUSH
44777: LD_INT 30
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44785: LD_VAR 0 6
44789: PPUSH
44790: CALL_OW 257
44794: PUSH
44795: LD_INT 9
44797: EQUAL
44798: IFFALSE 44819
// points := [ 20 , 55 , 40 ] ;
44800: LD_ADDR_VAR 0 9
44804: PUSH
44805: LD_INT 20
44807: PUSH
44808: LD_INT 55
44810: PUSH
44811: LD_INT 40
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44819: LD_VAR 0 6
44823: PPUSH
44824: CALL_OW 257
44828: PUSH
44829: LD_INT 12
44831: PUSH
44832: LD_INT 16
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: IN
44839: IFFALSE 44860
// points := [ 5 , 3 , 2 ] ;
44841: LD_ADDR_VAR 0 9
44845: PUSH
44846: LD_INT 5
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44860: LD_VAR 0 6
44864: PPUSH
44865: CALL_OW 257
44869: PUSH
44870: LD_INT 17
44872: EQUAL
44873: IFFALSE 44894
// points := [ 100 , 50 , 75 ] ;
44875: LD_ADDR_VAR 0 9
44879: PUSH
44880: LD_INT 100
44882: PUSH
44883: LD_INT 50
44885: PUSH
44886: LD_INT 75
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44894: LD_VAR 0 6
44898: PPUSH
44899: CALL_OW 257
44903: PUSH
44904: LD_INT 15
44906: EQUAL
44907: IFFALSE 44928
// points := [ 10 , 5 , 3 ] ;
44909: LD_ADDR_VAR 0 9
44913: PUSH
44914: LD_INT 10
44916: PUSH
44917: LD_INT 5
44919: PUSH
44920: LD_INT 3
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44928: LD_VAR 0 6
44932: PPUSH
44933: CALL_OW 257
44937: PUSH
44938: LD_INT 14
44940: EQUAL
44941: IFFALSE 44962
// points := [ 10 , 0 , 0 ] ;
44943: LD_ADDR_VAR 0 9
44947: PUSH
44948: LD_INT 10
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44962: LD_VAR 0 6
44966: PPUSH
44967: CALL_OW 257
44971: PUSH
44972: LD_INT 11
44974: EQUAL
44975: IFFALSE 44996
// points := [ 30 , 10 , 5 ] ;
44977: LD_ADDR_VAR 0 9
44981: PUSH
44982: LD_INT 30
44984: PUSH
44985: LD_INT 10
44987: PUSH
44988: LD_INT 5
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44996: LD_VAR 0 1
45000: PPUSH
45001: LD_INT 5
45003: PPUSH
45004: CALL_OW 321
45008: PUSH
45009: LD_INT 2
45011: EQUAL
45012: IFFALSE 45029
// bpoints := bpoints * 1.8 ;
45014: LD_ADDR_VAR 0 10
45018: PUSH
45019: LD_VAR 0 10
45023: PUSH
45024: LD_REAL  1.80000000000000E+0000
45027: MUL
45028: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45029: LD_VAR 0 6
45033: PPUSH
45034: CALL_OW 257
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: LD_INT 4
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: IN
45057: PUSH
45058: LD_VAR 0 1
45062: PPUSH
45063: LD_INT 51
45065: PPUSH
45066: CALL_OW 321
45070: PUSH
45071: LD_INT 2
45073: EQUAL
45074: AND
45075: IFFALSE 45092
// bpoints := bpoints * 1.2 ;
45077: LD_ADDR_VAR 0 10
45081: PUSH
45082: LD_VAR 0 10
45086: PUSH
45087: LD_REAL  1.20000000000000E+0000
45090: MUL
45091: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45092: LD_VAR 0 6
45096: PPUSH
45097: CALL_OW 257
45101: PUSH
45102: LD_INT 5
45104: PUSH
45105: LD_INT 7
45107: PUSH
45108: LD_INT 9
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: IN
45116: PUSH
45117: LD_VAR 0 1
45121: PPUSH
45122: LD_INT 52
45124: PPUSH
45125: CALL_OW 321
45129: PUSH
45130: LD_INT 2
45132: EQUAL
45133: AND
45134: IFFALSE 45151
// bpoints := bpoints * 1.5 ;
45136: LD_ADDR_VAR 0 10
45140: PUSH
45141: LD_VAR 0 10
45145: PUSH
45146: LD_REAL  1.50000000000000E+0000
45149: MUL
45150: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45151: LD_VAR 0 1
45155: PPUSH
45156: LD_INT 66
45158: PPUSH
45159: CALL_OW 321
45163: PUSH
45164: LD_INT 2
45166: EQUAL
45167: IFFALSE 45184
// bpoints := bpoints * 1.1 ;
45169: LD_ADDR_VAR 0 10
45173: PUSH
45174: LD_VAR 0 10
45178: PUSH
45179: LD_REAL  1.10000000000000E+0000
45182: MUL
45183: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45184: LD_ADDR_VAR 0 10
45188: PUSH
45189: LD_VAR 0 10
45193: PUSH
45194: LD_VAR 0 6
45198: PPUSH
45199: LD_INT 1
45201: PPUSH
45202: CALL_OW 259
45206: PUSH
45207: LD_REAL  1.15000000000000E+0000
45210: MUL
45211: MUL
45212: ST_TO_ADDR
// end ; unit_vehicle :
45213: GO 46043
45215: LD_INT 2
45217: DOUBLE
45218: EQUAL
45219: IFTRUE 45223
45221: GO 46031
45223: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45224: LD_VAR 0 6
45228: PPUSH
45229: CALL_OW 264
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: LD_INT 42
45239: PUSH
45240: LD_INT 24
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: IN
45248: IFFALSE 45269
// points := [ 25 , 5 , 3 ] ;
45250: LD_ADDR_VAR 0 9
45254: PUSH
45255: LD_INT 25
45257: PUSH
45258: LD_INT 5
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45269: LD_VAR 0 6
45273: PPUSH
45274: CALL_OW 264
45278: PUSH
45279: LD_INT 4
45281: PUSH
45282: LD_INT 43
45284: PUSH
45285: LD_INT 25
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: IN
45293: IFFALSE 45314
// points := [ 40 , 15 , 5 ] ;
45295: LD_ADDR_VAR 0 9
45299: PUSH
45300: LD_INT 40
45302: PUSH
45303: LD_INT 15
45305: PUSH
45306: LD_INT 5
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45314: LD_VAR 0 6
45318: PPUSH
45319: CALL_OW 264
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: LD_INT 23
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: IN
45334: IFFALSE 45355
// points := [ 7 , 25 , 8 ] ;
45336: LD_ADDR_VAR 0 9
45340: PUSH
45341: LD_INT 7
45343: PUSH
45344: LD_INT 25
45346: PUSH
45347: LD_INT 8
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45355: LD_VAR 0 6
45359: PPUSH
45360: CALL_OW 264
45364: PUSH
45365: LD_INT 5
45367: PUSH
45368: LD_INT 27
45370: PUSH
45371: LD_INT 44
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: IN
45379: IFFALSE 45400
// points := [ 14 , 50 , 16 ] ;
45381: LD_ADDR_VAR 0 9
45385: PUSH
45386: LD_INT 14
45388: PUSH
45389: LD_INT 50
45391: PUSH
45392: LD_INT 16
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: LIST
45399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45400: LD_VAR 0 6
45404: PPUSH
45405: CALL_OW 264
45409: PUSH
45410: LD_INT 6
45412: PUSH
45413: LD_INT 46
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: IN
45420: IFFALSE 45441
// points := [ 32 , 120 , 70 ] ;
45422: LD_ADDR_VAR 0 9
45426: PUSH
45427: LD_INT 32
45429: PUSH
45430: LD_INT 120
45432: PUSH
45433: LD_INT 70
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45441: LD_VAR 0 6
45445: PPUSH
45446: CALL_OW 264
45450: PUSH
45451: LD_INT 7
45453: PUSH
45454: LD_INT 28
45456: PUSH
45457: LD_INT 45
45459: PUSH
45460: LD_EXP 53
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: IN
45471: IFFALSE 45492
// points := [ 35 , 20 , 45 ] ;
45473: LD_ADDR_VAR 0 9
45477: PUSH
45478: LD_INT 35
45480: PUSH
45481: LD_INT 20
45483: PUSH
45484: LD_INT 45
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: LIST
45491: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45492: LD_VAR 0 6
45496: PPUSH
45497: CALL_OW 264
45501: PUSH
45502: LD_INT 47
45504: PUSH
45505: EMPTY
45506: LIST
45507: IN
45508: IFFALSE 45529
// points := [ 67 , 45 , 75 ] ;
45510: LD_ADDR_VAR 0 9
45514: PUSH
45515: LD_INT 67
45517: PUSH
45518: LD_INT 45
45520: PUSH
45521: LD_INT 75
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45529: LD_VAR 0 6
45533: PPUSH
45534: CALL_OW 264
45538: PUSH
45539: LD_INT 26
45541: PUSH
45542: EMPTY
45543: LIST
45544: IN
45545: IFFALSE 45566
// points := [ 120 , 30 , 80 ] ;
45547: LD_ADDR_VAR 0 9
45551: PUSH
45552: LD_INT 120
45554: PUSH
45555: LD_INT 30
45557: PUSH
45558: LD_INT 80
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45566: LD_VAR 0 6
45570: PPUSH
45571: CALL_OW 264
45575: PUSH
45576: LD_INT 22
45578: PUSH
45579: EMPTY
45580: LIST
45581: IN
45582: IFFALSE 45603
// points := [ 40 , 1 , 1 ] ;
45584: LD_ADDR_VAR 0 9
45588: PUSH
45589: LD_INT 40
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45603: LD_VAR 0 6
45607: PPUSH
45608: CALL_OW 264
45612: PUSH
45613: LD_INT 29
45615: PUSH
45616: EMPTY
45617: LIST
45618: IN
45619: IFFALSE 45640
// points := [ 70 , 200 , 400 ] ;
45621: LD_ADDR_VAR 0 9
45625: PUSH
45626: LD_INT 70
45628: PUSH
45629: LD_INT 200
45631: PUSH
45632: LD_INT 400
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45640: LD_VAR 0 6
45644: PPUSH
45645: CALL_OW 264
45649: PUSH
45650: LD_INT 14
45652: PUSH
45653: LD_INT 53
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: IN
45660: IFFALSE 45681
// points := [ 40 , 10 , 20 ] ;
45662: LD_ADDR_VAR 0 9
45666: PUSH
45667: LD_INT 40
45669: PUSH
45670: LD_INT 10
45672: PUSH
45673: LD_INT 20
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: LIST
45680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45681: LD_VAR 0 6
45685: PPUSH
45686: CALL_OW 264
45690: PUSH
45691: LD_INT 9
45693: PUSH
45694: EMPTY
45695: LIST
45696: IN
45697: IFFALSE 45718
// points := [ 5 , 70 , 20 ] ;
45699: LD_ADDR_VAR 0 9
45703: PUSH
45704: LD_INT 5
45706: PUSH
45707: LD_INT 70
45709: PUSH
45710: LD_INT 20
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45718: LD_VAR 0 6
45722: PPUSH
45723: CALL_OW 264
45727: PUSH
45728: LD_INT 10
45730: PUSH
45731: EMPTY
45732: LIST
45733: IN
45734: IFFALSE 45755
// points := [ 35 , 110 , 70 ] ;
45736: LD_ADDR_VAR 0 9
45740: PUSH
45741: LD_INT 35
45743: PUSH
45744: LD_INT 110
45746: PUSH
45747: LD_INT 70
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45755: LD_VAR 0 6
45759: PPUSH
45760: CALL_OW 265
45764: PUSH
45765: LD_INT 25
45767: EQUAL
45768: IFFALSE 45789
// points := [ 80 , 65 , 100 ] ;
45770: LD_ADDR_VAR 0 9
45774: PUSH
45775: LD_INT 80
45777: PUSH
45778: LD_INT 65
45780: PUSH
45781: LD_INT 100
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: LIST
45788: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45789: LD_VAR 0 6
45793: PPUSH
45794: CALL_OW 263
45798: PUSH
45799: LD_INT 1
45801: EQUAL
45802: IFFALSE 45837
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45804: LD_ADDR_VAR 0 10
45808: PUSH
45809: LD_VAR 0 10
45813: PUSH
45814: LD_VAR 0 6
45818: PPUSH
45819: CALL_OW 311
45823: PPUSH
45824: LD_INT 3
45826: PPUSH
45827: CALL_OW 259
45831: PUSH
45832: LD_INT 4
45834: MUL
45835: MUL
45836: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45837: LD_VAR 0 6
45841: PPUSH
45842: CALL_OW 263
45846: PUSH
45847: LD_INT 2
45849: EQUAL
45850: IFFALSE 45901
// begin j := IsControledBy ( i ) ;
45852: LD_ADDR_VAR 0 7
45856: PUSH
45857: LD_VAR 0 6
45861: PPUSH
45862: CALL_OW 312
45866: ST_TO_ADDR
// if j then
45867: LD_VAR 0 7
45871: IFFALSE 45901
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45873: LD_ADDR_VAR 0 10
45877: PUSH
45878: LD_VAR 0 10
45882: PUSH
45883: LD_VAR 0 7
45887: PPUSH
45888: LD_INT 3
45890: PPUSH
45891: CALL_OW 259
45895: PUSH
45896: LD_INT 3
45898: MUL
45899: MUL
45900: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45901: LD_VAR 0 6
45905: PPUSH
45906: CALL_OW 264
45910: PUSH
45911: LD_INT 5
45913: PUSH
45914: LD_INT 6
45916: PUSH
45917: LD_INT 46
45919: PUSH
45920: LD_INT 44
45922: PUSH
45923: LD_INT 47
45925: PUSH
45926: LD_INT 45
45928: PUSH
45929: LD_INT 28
45931: PUSH
45932: LD_INT 7
45934: PUSH
45935: LD_INT 27
45937: PUSH
45938: LD_INT 29
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: IN
45953: PUSH
45954: LD_VAR 0 1
45958: PPUSH
45959: LD_INT 52
45961: PPUSH
45962: CALL_OW 321
45966: PUSH
45967: LD_INT 2
45969: EQUAL
45970: AND
45971: IFFALSE 45988
// bpoints := bpoints * 1.2 ;
45973: LD_ADDR_VAR 0 10
45977: PUSH
45978: LD_VAR 0 10
45982: PUSH
45983: LD_REAL  1.20000000000000E+0000
45986: MUL
45987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45988: LD_VAR 0 6
45992: PPUSH
45993: CALL_OW 264
45997: PUSH
45998: LD_INT 6
46000: PUSH
46001: LD_INT 46
46003: PUSH
46004: LD_INT 47
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: IN
46012: IFFALSE 46029
// bpoints := bpoints * 1.2 ;
46014: LD_ADDR_VAR 0 10
46018: PUSH
46019: LD_VAR 0 10
46023: PUSH
46024: LD_REAL  1.20000000000000E+0000
46027: MUL
46028: ST_TO_ADDR
// end ; unit_building :
46029: GO 46043
46031: LD_INT 3
46033: DOUBLE
46034: EQUAL
46035: IFTRUE 46039
46037: GO 46042
46039: POP
// ; end ;
46040: GO 46043
46042: POP
// for j = 1 to 3 do
46043: LD_ADDR_VAR 0 7
46047: PUSH
46048: DOUBLE
46049: LD_INT 1
46051: DEC
46052: ST_TO_ADDR
46053: LD_INT 3
46055: PUSH
46056: FOR_TO
46057: IFFALSE 46110
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46059: LD_ADDR_VAR 0 5
46063: PUSH
46064: LD_VAR 0 5
46068: PPUSH
46069: LD_VAR 0 7
46073: PPUSH
46074: LD_VAR 0 5
46078: PUSH
46079: LD_VAR 0 7
46083: ARRAY
46084: PUSH
46085: LD_VAR 0 9
46089: PUSH
46090: LD_VAR 0 7
46094: ARRAY
46095: PUSH
46096: LD_VAR 0 10
46100: MUL
46101: PLUS
46102: PPUSH
46103: CALL_OW 1
46107: ST_TO_ADDR
46108: GO 46056
46110: POP
46111: POP
// end ;
46112: GO 44589
46114: POP
46115: POP
// result := Replace ( result , 4 , tmp ) ;
46116: LD_ADDR_VAR 0 5
46120: PUSH
46121: LD_VAR 0 5
46125: PPUSH
46126: LD_INT 4
46128: PPUSH
46129: LD_VAR 0 8
46133: PPUSH
46134: CALL_OW 1
46138: ST_TO_ADDR
// end ;
46139: LD_VAR 0 5
46143: RET
// export function DangerAtRange ( unit , range ) ; begin
46144: LD_INT 0
46146: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46147: LD_ADDR_VAR 0 3
46151: PUSH
46152: LD_VAR 0 1
46156: PPUSH
46157: CALL_OW 255
46161: PPUSH
46162: LD_VAR 0 1
46166: PPUSH
46167: CALL_OW 250
46171: PPUSH
46172: LD_VAR 0 1
46176: PPUSH
46177: CALL_OW 251
46181: PPUSH
46182: LD_VAR 0 2
46186: PPUSH
46187: CALL 44441 0 4
46191: ST_TO_ADDR
// end ;
46192: LD_VAR 0 3
46196: RET
// export function DangerInArea ( side , area ) ; begin
46197: LD_INT 0
46199: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46200: LD_ADDR_VAR 0 3
46204: PUSH
46205: LD_VAR 0 2
46209: PPUSH
46210: LD_INT 81
46212: PUSH
46213: LD_VAR 0 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PPUSH
46222: CALL_OW 70
46226: ST_TO_ADDR
// end ;
46227: LD_VAR 0 3
46231: RET
// export function IsExtension ( b ) ; begin
46232: LD_INT 0
46234: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46235: LD_ADDR_VAR 0 2
46239: PUSH
46240: LD_VAR 0 1
46244: PUSH
46245: LD_INT 23
46247: PUSH
46248: LD_INT 20
46250: PUSH
46251: LD_INT 22
46253: PUSH
46254: LD_INT 17
46256: PUSH
46257: LD_INT 24
46259: PUSH
46260: LD_INT 21
46262: PUSH
46263: LD_INT 19
46265: PUSH
46266: LD_INT 16
46268: PUSH
46269: LD_INT 25
46271: PUSH
46272: LD_INT 18
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: IN
46287: ST_TO_ADDR
// end ;
46288: LD_VAR 0 2
46292: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46293: LD_INT 0
46295: PPUSH
46296: PPUSH
46297: PPUSH
// result := [ ] ;
46298: LD_ADDR_VAR 0 4
46302: PUSH
46303: EMPTY
46304: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46305: LD_ADDR_VAR 0 5
46309: PUSH
46310: LD_VAR 0 2
46314: PPUSH
46315: LD_INT 21
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PPUSH
46325: CALL_OW 70
46329: ST_TO_ADDR
// if not tmp then
46330: LD_VAR 0 5
46334: NOT
46335: IFFALSE 46339
// exit ;
46337: GO 46403
// if checkLink then
46339: LD_VAR 0 3
46343: IFFALSE 46393
// begin for i in tmp do
46345: LD_ADDR_VAR 0 6
46349: PUSH
46350: LD_VAR 0 5
46354: PUSH
46355: FOR_IN
46356: IFFALSE 46391
// if GetBase ( i ) <> base then
46358: LD_VAR 0 6
46362: PPUSH
46363: CALL_OW 274
46367: PUSH
46368: LD_VAR 0 1
46372: NONEQUAL
46373: IFFALSE 46389
// ComLinkToBase ( base , i ) ;
46375: LD_VAR 0 1
46379: PPUSH
46380: LD_VAR 0 6
46384: PPUSH
46385: CALL_OW 169
46389: GO 46355
46391: POP
46392: POP
// end ; result := tmp ;
46393: LD_ADDR_VAR 0 4
46397: PUSH
46398: LD_VAR 0 5
46402: ST_TO_ADDR
// end ;
46403: LD_VAR 0 4
46407: RET
// export function ComComplete ( units , b ) ; var i ; begin
46408: LD_INT 0
46410: PPUSH
46411: PPUSH
// if not units then
46412: LD_VAR 0 1
46416: NOT
46417: IFFALSE 46421
// exit ;
46419: GO 46511
// for i in units do
46421: LD_ADDR_VAR 0 4
46425: PUSH
46426: LD_VAR 0 1
46430: PUSH
46431: FOR_IN
46432: IFFALSE 46509
// if BuildingStatus ( b ) = bs_build then
46434: LD_VAR 0 2
46438: PPUSH
46439: CALL_OW 461
46443: PUSH
46444: LD_INT 1
46446: EQUAL
46447: IFFALSE 46507
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46449: LD_VAR 0 4
46453: PPUSH
46454: LD_STRING h
46456: PUSH
46457: LD_VAR 0 2
46461: PPUSH
46462: CALL_OW 250
46466: PUSH
46467: LD_VAR 0 2
46471: PPUSH
46472: CALL_OW 251
46476: PUSH
46477: LD_VAR 0 2
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: PPUSH
46503: CALL_OW 446
46507: GO 46431
46509: POP
46510: POP
// end ;
46511: LD_VAR 0 3
46515: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46516: LD_INT 0
46518: PPUSH
46519: PPUSH
46520: PPUSH
46521: PPUSH
46522: PPUSH
46523: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46524: LD_VAR 0 1
46528: NOT
46529: PUSH
46530: LD_VAR 0 1
46534: PPUSH
46535: CALL_OW 263
46539: PUSH
46540: LD_INT 2
46542: NONEQUAL
46543: OR
46544: IFFALSE 46548
// exit ;
46546: GO 46864
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46548: LD_ADDR_VAR 0 6
46552: PUSH
46553: LD_INT 22
46555: PUSH
46556: LD_VAR 0 1
46560: PPUSH
46561: CALL_OW 255
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 30
46575: PUSH
46576: LD_INT 36
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 34
46585: PUSH
46586: LD_INT 31
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PPUSH
46602: CALL_OW 69
46606: ST_TO_ADDR
// if not tmp then
46607: LD_VAR 0 6
46611: NOT
46612: IFFALSE 46616
// exit ;
46614: GO 46864
// result := [ ] ;
46616: LD_ADDR_VAR 0 2
46620: PUSH
46621: EMPTY
46622: ST_TO_ADDR
// for i in tmp do
46623: LD_ADDR_VAR 0 3
46627: PUSH
46628: LD_VAR 0 6
46632: PUSH
46633: FOR_IN
46634: IFFALSE 46705
// begin t := UnitsInside ( i ) ;
46636: LD_ADDR_VAR 0 4
46640: PUSH
46641: LD_VAR 0 3
46645: PPUSH
46646: CALL_OW 313
46650: ST_TO_ADDR
// if t then
46651: LD_VAR 0 4
46655: IFFALSE 46703
// for j in t do
46657: LD_ADDR_VAR 0 7
46661: PUSH
46662: LD_VAR 0 4
46666: PUSH
46667: FOR_IN
46668: IFFALSE 46701
// result := Replace ( result , result + 1 , j ) ;
46670: LD_ADDR_VAR 0 2
46674: PUSH
46675: LD_VAR 0 2
46679: PPUSH
46680: LD_VAR 0 2
46684: PUSH
46685: LD_INT 1
46687: PLUS
46688: PPUSH
46689: LD_VAR 0 7
46693: PPUSH
46694: CALL_OW 1
46698: ST_TO_ADDR
46699: GO 46667
46701: POP
46702: POP
// end ;
46703: GO 46633
46705: POP
46706: POP
// if not result then
46707: LD_VAR 0 2
46711: NOT
46712: IFFALSE 46716
// exit ;
46714: GO 46864
// mech := result [ 1 ] ;
46716: LD_ADDR_VAR 0 5
46720: PUSH
46721: LD_VAR 0 2
46725: PUSH
46726: LD_INT 1
46728: ARRAY
46729: ST_TO_ADDR
// if result > 1 then
46730: LD_VAR 0 2
46734: PUSH
46735: LD_INT 1
46737: GREATER
46738: IFFALSE 46850
// begin for i = 2 to result do
46740: LD_ADDR_VAR 0 3
46744: PUSH
46745: DOUBLE
46746: LD_INT 2
46748: DEC
46749: ST_TO_ADDR
46750: LD_VAR 0 2
46754: PUSH
46755: FOR_TO
46756: IFFALSE 46848
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46758: LD_ADDR_VAR 0 4
46762: PUSH
46763: LD_VAR 0 2
46767: PUSH
46768: LD_VAR 0 3
46772: ARRAY
46773: PPUSH
46774: LD_INT 3
46776: PPUSH
46777: CALL_OW 259
46781: PUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_VAR 0 3
46791: ARRAY
46792: PPUSH
46793: CALL_OW 432
46797: MINUS
46798: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46799: LD_VAR 0 4
46803: PUSH
46804: LD_VAR 0 5
46808: PPUSH
46809: LD_INT 3
46811: PPUSH
46812: CALL_OW 259
46816: PUSH
46817: LD_VAR 0 5
46821: PPUSH
46822: CALL_OW 432
46826: MINUS
46827: GREATEREQUAL
46828: IFFALSE 46846
// mech := result [ i ] ;
46830: LD_ADDR_VAR 0 5
46834: PUSH
46835: LD_VAR 0 2
46839: PUSH
46840: LD_VAR 0 3
46844: ARRAY
46845: ST_TO_ADDR
// end ;
46846: GO 46755
46848: POP
46849: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46850: LD_VAR 0 1
46854: PPUSH
46855: LD_VAR 0 5
46859: PPUSH
46860: CALL_OW 135
// end ;
46864: LD_VAR 0 2
46868: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46869: LD_INT 0
46871: PPUSH
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
46876: PPUSH
46877: PPUSH
46878: PPUSH
46879: PPUSH
46880: PPUSH
46881: PPUSH
46882: PPUSH
46883: PPUSH
// result := [ ] ;
46884: LD_ADDR_VAR 0 7
46888: PUSH
46889: EMPTY
46890: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46891: LD_VAR 0 1
46895: PPUSH
46896: CALL_OW 266
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: IN
46911: NOT
46912: IFFALSE 46916
// exit ;
46914: GO 48550
// if name then
46916: LD_VAR 0 3
46920: IFFALSE 46936
// SetBName ( base_dep , name ) ;
46922: LD_VAR 0 1
46926: PPUSH
46927: LD_VAR 0 3
46931: PPUSH
46932: CALL_OW 500
// base := GetBase ( base_dep ) ;
46936: LD_ADDR_VAR 0 15
46940: PUSH
46941: LD_VAR 0 1
46945: PPUSH
46946: CALL_OW 274
46950: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46951: LD_ADDR_VAR 0 16
46955: PUSH
46956: LD_VAR 0 1
46960: PPUSH
46961: CALL_OW 255
46965: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46966: LD_ADDR_VAR 0 17
46970: PUSH
46971: LD_VAR 0 1
46975: PPUSH
46976: CALL_OW 248
46980: ST_TO_ADDR
// if sources then
46981: LD_VAR 0 5
46985: IFFALSE 47032
// for i = 1 to 3 do
46987: LD_ADDR_VAR 0 8
46991: PUSH
46992: DOUBLE
46993: LD_INT 1
46995: DEC
46996: ST_TO_ADDR
46997: LD_INT 3
46999: PUSH
47000: FOR_TO
47001: IFFALSE 47030
// AddResourceType ( base , i , sources [ i ] ) ;
47003: LD_VAR 0 15
47007: PPUSH
47008: LD_VAR 0 8
47012: PPUSH
47013: LD_VAR 0 5
47017: PUSH
47018: LD_VAR 0 8
47022: ARRAY
47023: PPUSH
47024: CALL_OW 276
47028: GO 47000
47030: POP
47031: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47032: LD_ADDR_VAR 0 18
47036: PUSH
47037: LD_VAR 0 15
47041: PPUSH
47042: LD_VAR 0 2
47046: PPUSH
47047: LD_INT 1
47049: PPUSH
47050: CALL 46293 0 3
47054: ST_TO_ADDR
// InitHc ;
47055: CALL_OW 19
// InitUc ;
47059: CALL_OW 18
// uc_side := side ;
47063: LD_ADDR_OWVAR 20
47067: PUSH
47068: LD_VAR 0 16
47072: ST_TO_ADDR
// uc_nation := nation ;
47073: LD_ADDR_OWVAR 21
47077: PUSH
47078: LD_VAR 0 17
47082: ST_TO_ADDR
// if buildings then
47083: LD_VAR 0 18
47087: IFFALSE 48409
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47089: LD_ADDR_VAR 0 19
47093: PUSH
47094: LD_VAR 0 18
47098: PPUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 30
47104: PUSH
47105: LD_INT 29
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 30
47114: PUSH
47115: LD_INT 30
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: PPUSH
47127: CALL_OW 72
47131: ST_TO_ADDR
// if tmp then
47132: LD_VAR 0 19
47136: IFFALSE 47184
// for i in tmp do
47138: LD_ADDR_VAR 0 8
47142: PUSH
47143: LD_VAR 0 19
47147: PUSH
47148: FOR_IN
47149: IFFALSE 47182
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47151: LD_VAR 0 8
47155: PPUSH
47156: CALL_OW 250
47160: PPUSH
47161: LD_VAR 0 8
47165: PPUSH
47166: CALL_OW 251
47170: PPUSH
47171: LD_VAR 0 16
47175: PPUSH
47176: CALL_OW 441
47180: GO 47148
47182: POP
47183: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47184: LD_VAR 0 18
47188: PPUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 30
47194: PUSH
47195: LD_INT 32
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 30
47204: PUSH
47205: LD_INT 33
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: PPUSH
47217: CALL_OW 72
47221: IFFALSE 47309
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47223: LD_ADDR_VAR 0 8
47227: PUSH
47228: LD_VAR 0 18
47232: PPUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 30
47238: PUSH
47239: LD_INT 32
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 30
47248: PUSH
47249: LD_INT 33
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: PPUSH
47261: CALL_OW 72
47265: PUSH
47266: FOR_IN
47267: IFFALSE 47307
// begin if not GetBWeapon ( i ) then
47269: LD_VAR 0 8
47273: PPUSH
47274: CALL_OW 269
47278: NOT
47279: IFFALSE 47305
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47281: LD_VAR 0 8
47285: PPUSH
47286: LD_VAR 0 8
47290: PPUSH
47291: LD_VAR 0 2
47295: PPUSH
47296: CALL 48555 0 2
47300: PPUSH
47301: CALL_OW 431
// end ;
47305: GO 47266
47307: POP
47308: POP
// end ; for i = 1 to personel do
47309: LD_ADDR_VAR 0 8
47313: PUSH
47314: DOUBLE
47315: LD_INT 1
47317: DEC
47318: ST_TO_ADDR
47319: LD_VAR 0 6
47323: PUSH
47324: FOR_TO
47325: IFFALSE 48389
// begin if i > 4 then
47327: LD_VAR 0 8
47331: PUSH
47332: LD_INT 4
47334: GREATER
47335: IFFALSE 47339
// break ;
47337: GO 48389
// case i of 1 :
47339: LD_VAR 0 8
47343: PUSH
47344: LD_INT 1
47346: DOUBLE
47347: EQUAL
47348: IFTRUE 47352
47350: GO 47432
47352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47353: LD_ADDR_VAR 0 12
47357: PUSH
47358: LD_VAR 0 18
47362: PPUSH
47363: LD_INT 22
47365: PUSH
47366: LD_VAR 0 16
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 58
47377: PUSH
47378: EMPTY
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 30
47386: PUSH
47387: LD_INT 32
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 30
47396: PUSH
47397: LD_INT 4
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 30
47406: PUSH
47407: LD_INT 5
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: PPUSH
47425: CALL_OW 72
47429: ST_TO_ADDR
47430: GO 47654
47432: LD_INT 2
47434: DOUBLE
47435: EQUAL
47436: IFTRUE 47440
47438: GO 47502
47440: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47441: LD_ADDR_VAR 0 12
47445: PUSH
47446: LD_VAR 0 18
47450: PPUSH
47451: LD_INT 22
47453: PUSH
47454: LD_VAR 0 16
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: LD_INT 30
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 30
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PPUSH
47495: CALL_OW 72
47499: ST_TO_ADDR
47500: GO 47654
47502: LD_INT 3
47504: DOUBLE
47505: EQUAL
47506: IFTRUE 47510
47508: GO 47572
47510: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47511: LD_ADDR_VAR 0 12
47515: PUSH
47516: LD_VAR 0 18
47520: PPUSH
47521: LD_INT 22
47523: PUSH
47524: LD_VAR 0 16
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 30
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 30
47548: PUSH
47549: LD_INT 3
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PPUSH
47565: CALL_OW 72
47569: ST_TO_ADDR
47570: GO 47654
47572: LD_INT 4
47574: DOUBLE
47575: EQUAL
47576: IFTRUE 47580
47578: GO 47653
47580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47581: LD_ADDR_VAR 0 12
47585: PUSH
47586: LD_VAR 0 18
47590: PPUSH
47591: LD_INT 22
47593: PUSH
47594: LD_VAR 0 16
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 30
47608: PUSH
47609: LD_INT 6
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 30
47618: PUSH
47619: LD_INT 7
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 30
47628: PUSH
47629: LD_INT 8
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PPUSH
47646: CALL_OW 72
47650: ST_TO_ADDR
47651: GO 47654
47653: POP
// if i = 1 then
47654: LD_VAR 0 8
47658: PUSH
47659: LD_INT 1
47661: EQUAL
47662: IFFALSE 47773
// begin tmp := [ ] ;
47664: LD_ADDR_VAR 0 19
47668: PUSH
47669: EMPTY
47670: ST_TO_ADDR
// for j in f do
47671: LD_ADDR_VAR 0 9
47675: PUSH
47676: LD_VAR 0 12
47680: PUSH
47681: FOR_IN
47682: IFFALSE 47755
// if GetBType ( j ) = b_bunker then
47684: LD_VAR 0 9
47688: PPUSH
47689: CALL_OW 266
47693: PUSH
47694: LD_INT 32
47696: EQUAL
47697: IFFALSE 47724
// tmp := Insert ( tmp , 1 , j ) else
47699: LD_ADDR_VAR 0 19
47703: PUSH
47704: LD_VAR 0 19
47708: PPUSH
47709: LD_INT 1
47711: PPUSH
47712: LD_VAR 0 9
47716: PPUSH
47717: CALL_OW 2
47721: ST_TO_ADDR
47722: GO 47753
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47724: LD_ADDR_VAR 0 19
47728: PUSH
47729: LD_VAR 0 19
47733: PPUSH
47734: LD_VAR 0 19
47738: PUSH
47739: LD_INT 1
47741: PLUS
47742: PPUSH
47743: LD_VAR 0 9
47747: PPUSH
47748: CALL_OW 2
47752: ST_TO_ADDR
47753: GO 47681
47755: POP
47756: POP
// if tmp then
47757: LD_VAR 0 19
47761: IFFALSE 47773
// f := tmp ;
47763: LD_ADDR_VAR 0 12
47767: PUSH
47768: LD_VAR 0 19
47772: ST_TO_ADDR
// end ; x := personel [ i ] ;
47773: LD_ADDR_VAR 0 13
47777: PUSH
47778: LD_VAR 0 6
47782: PUSH
47783: LD_VAR 0 8
47787: ARRAY
47788: ST_TO_ADDR
// if x = - 1 then
47789: LD_VAR 0 13
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: EQUAL
47798: IFFALSE 48007
// begin for j in f do
47800: LD_ADDR_VAR 0 9
47804: PUSH
47805: LD_VAR 0 12
47809: PUSH
47810: FOR_IN
47811: IFFALSE 48003
// repeat InitHc ;
47813: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47817: LD_VAR 0 9
47821: PPUSH
47822: CALL_OW 266
47826: PUSH
47827: LD_INT 5
47829: EQUAL
47830: IFFALSE 47900
// begin if UnitsInside ( j ) < 3 then
47832: LD_VAR 0 9
47836: PPUSH
47837: CALL_OW 313
47841: PUSH
47842: LD_INT 3
47844: LESS
47845: IFFALSE 47881
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47847: LD_INT 0
47849: PPUSH
47850: LD_INT 5
47852: PUSH
47853: LD_INT 8
47855: PUSH
47856: LD_INT 9
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: PUSH
47864: LD_VAR 0 17
47868: ARRAY
47869: PPUSH
47870: LD_VAR 0 4
47874: PPUSH
47875: CALL_OW 380
47879: GO 47898
// PrepareHuman ( false , i , skill ) ;
47881: LD_INT 0
47883: PPUSH
47884: LD_VAR 0 8
47888: PPUSH
47889: LD_VAR 0 4
47893: PPUSH
47894: CALL_OW 380
// end else
47898: GO 47917
// PrepareHuman ( false , i , skill ) ;
47900: LD_INT 0
47902: PPUSH
47903: LD_VAR 0 8
47907: PPUSH
47908: LD_VAR 0 4
47912: PPUSH
47913: CALL_OW 380
// un := CreateHuman ;
47917: LD_ADDR_VAR 0 14
47921: PUSH
47922: CALL_OW 44
47926: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47927: LD_ADDR_VAR 0 7
47931: PUSH
47932: LD_VAR 0 7
47936: PPUSH
47937: LD_INT 1
47939: PPUSH
47940: LD_VAR 0 14
47944: PPUSH
47945: CALL_OW 2
47949: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47950: LD_VAR 0 14
47954: PPUSH
47955: LD_VAR 0 9
47959: PPUSH
47960: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47964: LD_VAR 0 9
47968: PPUSH
47969: CALL_OW 313
47973: PUSH
47974: LD_INT 6
47976: EQUAL
47977: PUSH
47978: LD_VAR 0 9
47982: PPUSH
47983: CALL_OW 266
47987: PUSH
47988: LD_INT 32
47990: PUSH
47991: LD_INT 31
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: IN
47998: OR
47999: IFFALSE 47813
48001: GO 47810
48003: POP
48004: POP
// end else
48005: GO 48387
// for j = 1 to x do
48007: LD_ADDR_VAR 0 9
48011: PUSH
48012: DOUBLE
48013: LD_INT 1
48015: DEC
48016: ST_TO_ADDR
48017: LD_VAR 0 13
48021: PUSH
48022: FOR_TO
48023: IFFALSE 48385
// begin InitHc ;
48025: CALL_OW 19
// if not f then
48029: LD_VAR 0 12
48033: NOT
48034: IFFALSE 48123
// begin PrepareHuman ( false , i , skill ) ;
48036: LD_INT 0
48038: PPUSH
48039: LD_VAR 0 8
48043: PPUSH
48044: LD_VAR 0 4
48048: PPUSH
48049: CALL_OW 380
// un := CreateHuman ;
48053: LD_ADDR_VAR 0 14
48057: PUSH
48058: CALL_OW 44
48062: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48063: LD_ADDR_VAR 0 7
48067: PUSH
48068: LD_VAR 0 7
48072: PPUSH
48073: LD_INT 1
48075: PPUSH
48076: LD_VAR 0 14
48080: PPUSH
48081: CALL_OW 2
48085: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48086: LD_VAR 0 14
48090: PPUSH
48091: LD_VAR 0 1
48095: PPUSH
48096: CALL_OW 250
48100: PPUSH
48101: LD_VAR 0 1
48105: PPUSH
48106: CALL_OW 251
48110: PPUSH
48111: LD_INT 10
48113: PPUSH
48114: LD_INT 0
48116: PPUSH
48117: CALL_OW 50
// continue ;
48121: GO 48022
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48123: LD_VAR 0 12
48127: PUSH
48128: LD_INT 1
48130: ARRAY
48131: PPUSH
48132: CALL_OW 313
48136: PUSH
48137: LD_VAR 0 12
48141: PUSH
48142: LD_INT 1
48144: ARRAY
48145: PPUSH
48146: CALL_OW 266
48150: PUSH
48151: LD_INT 32
48153: PUSH
48154: LD_INT 31
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: IN
48161: AND
48162: PUSH
48163: LD_VAR 0 12
48167: PUSH
48168: LD_INT 1
48170: ARRAY
48171: PPUSH
48172: CALL_OW 313
48176: PUSH
48177: LD_INT 6
48179: EQUAL
48180: OR
48181: IFFALSE 48201
// f := Delete ( f , 1 ) ;
48183: LD_ADDR_VAR 0 12
48187: PUSH
48188: LD_VAR 0 12
48192: PPUSH
48193: LD_INT 1
48195: PPUSH
48196: CALL_OW 3
48200: ST_TO_ADDR
// if not f then
48201: LD_VAR 0 12
48205: NOT
48206: IFFALSE 48224
// begin x := x + 2 ;
48208: LD_ADDR_VAR 0 13
48212: PUSH
48213: LD_VAR 0 13
48217: PUSH
48218: LD_INT 2
48220: PLUS
48221: ST_TO_ADDR
// continue ;
48222: GO 48022
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48224: LD_VAR 0 12
48228: PUSH
48229: LD_INT 1
48231: ARRAY
48232: PPUSH
48233: CALL_OW 266
48237: PUSH
48238: LD_INT 5
48240: EQUAL
48241: IFFALSE 48315
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48243: LD_VAR 0 12
48247: PUSH
48248: LD_INT 1
48250: ARRAY
48251: PPUSH
48252: CALL_OW 313
48256: PUSH
48257: LD_INT 3
48259: LESS
48260: IFFALSE 48296
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48262: LD_INT 0
48264: PPUSH
48265: LD_INT 5
48267: PUSH
48268: LD_INT 8
48270: PUSH
48271: LD_INT 9
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: PUSH
48279: LD_VAR 0 17
48283: ARRAY
48284: PPUSH
48285: LD_VAR 0 4
48289: PPUSH
48290: CALL_OW 380
48294: GO 48313
// PrepareHuman ( false , i , skill ) ;
48296: LD_INT 0
48298: PPUSH
48299: LD_VAR 0 8
48303: PPUSH
48304: LD_VAR 0 4
48308: PPUSH
48309: CALL_OW 380
// end else
48313: GO 48332
// PrepareHuman ( false , i , skill ) ;
48315: LD_INT 0
48317: PPUSH
48318: LD_VAR 0 8
48322: PPUSH
48323: LD_VAR 0 4
48327: PPUSH
48328: CALL_OW 380
// un := CreateHuman ;
48332: LD_ADDR_VAR 0 14
48336: PUSH
48337: CALL_OW 44
48341: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48342: LD_ADDR_VAR 0 7
48346: PUSH
48347: LD_VAR 0 7
48351: PPUSH
48352: LD_INT 1
48354: PPUSH
48355: LD_VAR 0 14
48359: PPUSH
48360: CALL_OW 2
48364: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48365: LD_VAR 0 14
48369: PPUSH
48370: LD_VAR 0 12
48374: PUSH
48375: LD_INT 1
48377: ARRAY
48378: PPUSH
48379: CALL_OW 52
// end ;
48383: GO 48022
48385: POP
48386: POP
// end ;
48387: GO 47324
48389: POP
48390: POP
// result := result ^ buildings ;
48391: LD_ADDR_VAR 0 7
48395: PUSH
48396: LD_VAR 0 7
48400: PUSH
48401: LD_VAR 0 18
48405: ADD
48406: ST_TO_ADDR
// end else
48407: GO 48550
// begin for i = 1 to personel do
48409: LD_ADDR_VAR 0 8
48413: PUSH
48414: DOUBLE
48415: LD_INT 1
48417: DEC
48418: ST_TO_ADDR
48419: LD_VAR 0 6
48423: PUSH
48424: FOR_TO
48425: IFFALSE 48548
// begin if i > 4 then
48427: LD_VAR 0 8
48431: PUSH
48432: LD_INT 4
48434: GREATER
48435: IFFALSE 48439
// break ;
48437: GO 48548
// x := personel [ i ] ;
48439: LD_ADDR_VAR 0 13
48443: PUSH
48444: LD_VAR 0 6
48448: PUSH
48449: LD_VAR 0 8
48453: ARRAY
48454: ST_TO_ADDR
// if x = - 1 then
48455: LD_VAR 0 13
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: EQUAL
48464: IFFALSE 48468
// continue ;
48466: GO 48424
// PrepareHuman ( false , i , skill ) ;
48468: LD_INT 0
48470: PPUSH
48471: LD_VAR 0 8
48475: PPUSH
48476: LD_VAR 0 4
48480: PPUSH
48481: CALL_OW 380
// un := CreateHuman ;
48485: LD_ADDR_VAR 0 14
48489: PUSH
48490: CALL_OW 44
48494: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48495: LD_VAR 0 14
48499: PPUSH
48500: LD_VAR 0 1
48504: PPUSH
48505: CALL_OW 250
48509: PPUSH
48510: LD_VAR 0 1
48514: PPUSH
48515: CALL_OW 251
48519: PPUSH
48520: LD_INT 10
48522: PPUSH
48523: LD_INT 0
48525: PPUSH
48526: CALL_OW 50
// result := result ^ un ;
48530: LD_ADDR_VAR 0 7
48534: PUSH
48535: LD_VAR 0 7
48539: PUSH
48540: LD_VAR 0 14
48544: ADD
48545: ST_TO_ADDR
// end ;
48546: GO 48424
48548: POP
48549: POP
// end ; end ;
48550: LD_VAR 0 7
48554: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48555: LD_INT 0
48557: PPUSH
48558: PPUSH
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
48568: PPUSH
48569: PPUSH
48570: PPUSH
48571: PPUSH
48572: PPUSH
// result := false ;
48573: LD_ADDR_VAR 0 3
48577: PUSH
48578: LD_INT 0
48580: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48581: LD_VAR 0 1
48585: NOT
48586: PUSH
48587: LD_VAR 0 1
48591: PPUSH
48592: CALL_OW 266
48596: PUSH
48597: LD_INT 32
48599: PUSH
48600: LD_INT 33
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: IN
48607: NOT
48608: OR
48609: IFFALSE 48613
// exit ;
48611: GO 49722
// nat := GetNation ( tower ) ;
48613: LD_ADDR_VAR 0 12
48617: PUSH
48618: LD_VAR 0 1
48622: PPUSH
48623: CALL_OW 248
48627: ST_TO_ADDR
// side := GetSide ( tower ) ;
48628: LD_ADDR_VAR 0 16
48632: PUSH
48633: LD_VAR 0 1
48637: PPUSH
48638: CALL_OW 255
48642: ST_TO_ADDR
// x := GetX ( tower ) ;
48643: LD_ADDR_VAR 0 10
48647: PUSH
48648: LD_VAR 0 1
48652: PPUSH
48653: CALL_OW 250
48657: ST_TO_ADDR
// y := GetY ( tower ) ;
48658: LD_ADDR_VAR 0 11
48662: PUSH
48663: LD_VAR 0 1
48667: PPUSH
48668: CALL_OW 251
48672: ST_TO_ADDR
// if not x or not y then
48673: LD_VAR 0 10
48677: NOT
48678: PUSH
48679: LD_VAR 0 11
48683: NOT
48684: OR
48685: IFFALSE 48689
// exit ;
48687: GO 49722
// weapon := 0 ;
48689: LD_ADDR_VAR 0 18
48693: PUSH
48694: LD_INT 0
48696: ST_TO_ADDR
// fac_list := [ ] ;
48697: LD_ADDR_VAR 0 17
48701: PUSH
48702: EMPTY
48703: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48704: LD_ADDR_VAR 0 6
48708: PUSH
48709: LD_VAR 0 1
48713: PPUSH
48714: CALL_OW 274
48718: PPUSH
48719: LD_VAR 0 2
48723: PPUSH
48724: LD_INT 0
48726: PPUSH
48727: CALL 46293 0 3
48731: PPUSH
48732: LD_INT 30
48734: PUSH
48735: LD_INT 3
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PPUSH
48742: CALL_OW 72
48746: ST_TO_ADDR
// if not factories then
48747: LD_VAR 0 6
48751: NOT
48752: IFFALSE 48756
// exit ;
48754: GO 49722
// for i in factories do
48756: LD_ADDR_VAR 0 8
48760: PUSH
48761: LD_VAR 0 6
48765: PUSH
48766: FOR_IN
48767: IFFALSE 48792
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48769: LD_ADDR_VAR 0 17
48773: PUSH
48774: LD_VAR 0 17
48778: PUSH
48779: LD_VAR 0 8
48783: PPUSH
48784: CALL_OW 478
48788: UNION
48789: ST_TO_ADDR
48790: GO 48766
48792: POP
48793: POP
// if not fac_list then
48794: LD_VAR 0 17
48798: NOT
48799: IFFALSE 48803
// exit ;
48801: GO 49722
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48803: LD_ADDR_VAR 0 5
48807: PUSH
48808: LD_INT 4
48810: PUSH
48811: LD_INT 5
48813: PUSH
48814: LD_INT 9
48816: PUSH
48817: LD_INT 10
48819: PUSH
48820: LD_INT 6
48822: PUSH
48823: LD_INT 7
48825: PUSH
48826: LD_INT 11
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 27
48840: PUSH
48841: LD_INT 28
48843: PUSH
48844: LD_INT 26
48846: PUSH
48847: LD_INT 30
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 43
48858: PUSH
48859: LD_INT 44
48861: PUSH
48862: LD_INT 46
48864: PUSH
48865: LD_INT 45
48867: PUSH
48868: LD_INT 47
48870: PUSH
48871: LD_INT 49
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: PUSH
48887: LD_VAR 0 12
48891: ARRAY
48892: ST_TO_ADDR
// list := list isect fac_list ;
48893: LD_ADDR_VAR 0 5
48897: PUSH
48898: LD_VAR 0 5
48902: PUSH
48903: LD_VAR 0 17
48907: ISECT
48908: ST_TO_ADDR
// if not list then
48909: LD_VAR 0 5
48913: NOT
48914: IFFALSE 48918
// exit ;
48916: GO 49722
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48918: LD_VAR 0 12
48922: PUSH
48923: LD_INT 3
48925: EQUAL
48926: PUSH
48927: LD_INT 49
48929: PUSH
48930: LD_VAR 0 5
48934: IN
48935: AND
48936: PUSH
48937: LD_INT 31
48939: PPUSH
48940: LD_VAR 0 16
48944: PPUSH
48945: CALL_OW 321
48949: PUSH
48950: LD_INT 2
48952: EQUAL
48953: AND
48954: IFFALSE 49014
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48956: LD_INT 22
48958: PUSH
48959: LD_VAR 0 16
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 35
48970: PUSH
48971: LD_INT 49
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 91
48980: PUSH
48981: LD_VAR 0 1
48985: PUSH
48986: LD_INT 10
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: PPUSH
48999: CALL_OW 69
49003: NOT
49004: IFFALSE 49014
// weapon := ru_time_lapser ;
49006: LD_ADDR_VAR 0 18
49010: PUSH
49011: LD_INT 49
49013: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49014: LD_VAR 0 12
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: IN
49029: PUSH
49030: LD_INT 11
49032: PUSH
49033: LD_VAR 0 5
49037: IN
49038: PUSH
49039: LD_INT 30
49041: PUSH
49042: LD_VAR 0 5
49046: IN
49047: OR
49048: AND
49049: PUSH
49050: LD_INT 6
49052: PPUSH
49053: LD_VAR 0 16
49057: PPUSH
49058: CALL_OW 321
49062: PUSH
49063: LD_INT 2
49065: EQUAL
49066: AND
49067: IFFALSE 49232
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49069: LD_INT 22
49071: PUSH
49072: LD_VAR 0 16
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 35
49086: PUSH
49087: LD_INT 11
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 35
49096: PUSH
49097: LD_INT 30
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 91
49111: PUSH
49112: LD_VAR 0 1
49116: PUSH
49117: LD_INT 18
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: PPUSH
49130: CALL_OW 69
49134: NOT
49135: PUSH
49136: LD_INT 22
49138: PUSH
49139: LD_VAR 0 16
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: LD_INT 30
49153: PUSH
49154: LD_INT 32
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 30
49163: PUSH
49164: LD_INT 33
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 91
49178: PUSH
49179: LD_VAR 0 1
49183: PUSH
49184: LD_INT 12
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: PPUSH
49200: CALL_OW 69
49204: PUSH
49205: LD_INT 2
49207: GREATER
49208: AND
49209: IFFALSE 49232
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49211: LD_ADDR_VAR 0 18
49215: PUSH
49216: LD_INT 11
49218: PUSH
49219: LD_INT 30
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_VAR 0 12
49230: ARRAY
49231: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49232: LD_VAR 0 18
49236: NOT
49237: PUSH
49238: LD_INT 40
49240: PPUSH
49241: LD_VAR 0 16
49245: PPUSH
49246: CALL_OW 321
49250: PUSH
49251: LD_INT 2
49253: EQUAL
49254: AND
49255: PUSH
49256: LD_INT 7
49258: PUSH
49259: LD_VAR 0 5
49263: IN
49264: PUSH
49265: LD_INT 28
49267: PUSH
49268: LD_VAR 0 5
49272: IN
49273: OR
49274: PUSH
49275: LD_INT 45
49277: PUSH
49278: LD_VAR 0 5
49282: IN
49283: OR
49284: AND
49285: IFFALSE 49539
// begin hex := GetHexInfo ( x , y ) ;
49287: LD_ADDR_VAR 0 4
49291: PUSH
49292: LD_VAR 0 10
49296: PPUSH
49297: LD_VAR 0 11
49301: PPUSH
49302: CALL_OW 546
49306: ST_TO_ADDR
// if hex [ 1 ] then
49307: LD_VAR 0 4
49311: PUSH
49312: LD_INT 1
49314: ARRAY
49315: IFFALSE 49319
// exit ;
49317: GO 49722
// height := hex [ 2 ] ;
49319: LD_ADDR_VAR 0 15
49323: PUSH
49324: LD_VAR 0 4
49328: PUSH
49329: LD_INT 2
49331: ARRAY
49332: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49333: LD_ADDR_VAR 0 14
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: LD_INT 3
49346: PUSH
49347: LD_INT 5
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: ST_TO_ADDR
// for i in tmp do
49356: LD_ADDR_VAR 0 8
49360: PUSH
49361: LD_VAR 0 14
49365: PUSH
49366: FOR_IN
49367: IFFALSE 49537
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49369: LD_ADDR_VAR 0 9
49373: PUSH
49374: LD_VAR 0 10
49378: PPUSH
49379: LD_VAR 0 8
49383: PPUSH
49384: LD_INT 5
49386: PPUSH
49387: CALL_OW 272
49391: PUSH
49392: LD_VAR 0 11
49396: PPUSH
49397: LD_VAR 0 8
49401: PPUSH
49402: LD_INT 5
49404: PPUSH
49405: CALL_OW 273
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49414: LD_VAR 0 9
49418: PUSH
49419: LD_INT 1
49421: ARRAY
49422: PPUSH
49423: LD_VAR 0 9
49427: PUSH
49428: LD_INT 2
49430: ARRAY
49431: PPUSH
49432: CALL_OW 488
49436: IFFALSE 49535
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49438: LD_ADDR_VAR 0 4
49442: PUSH
49443: LD_VAR 0 9
49447: PUSH
49448: LD_INT 1
49450: ARRAY
49451: PPUSH
49452: LD_VAR 0 9
49456: PUSH
49457: LD_INT 2
49459: ARRAY
49460: PPUSH
49461: CALL_OW 546
49465: ST_TO_ADDR
// if hex [ 1 ] then
49466: LD_VAR 0 4
49470: PUSH
49471: LD_INT 1
49473: ARRAY
49474: IFFALSE 49478
// continue ;
49476: GO 49366
// h := hex [ 2 ] ;
49478: LD_ADDR_VAR 0 13
49482: PUSH
49483: LD_VAR 0 4
49487: PUSH
49488: LD_INT 2
49490: ARRAY
49491: ST_TO_ADDR
// if h + 7 < height then
49492: LD_VAR 0 13
49496: PUSH
49497: LD_INT 7
49499: PLUS
49500: PUSH
49501: LD_VAR 0 15
49505: LESS
49506: IFFALSE 49535
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49508: LD_ADDR_VAR 0 18
49512: PUSH
49513: LD_INT 7
49515: PUSH
49516: LD_INT 28
49518: PUSH
49519: LD_INT 45
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: PUSH
49527: LD_VAR 0 12
49531: ARRAY
49532: ST_TO_ADDR
// break ;
49533: GO 49537
// end ; end ; end ;
49535: GO 49366
49537: POP
49538: POP
// end ; if not weapon then
49539: LD_VAR 0 18
49543: NOT
49544: IFFALSE 49604
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49546: LD_ADDR_VAR 0 5
49550: PUSH
49551: LD_VAR 0 5
49555: PUSH
49556: LD_INT 11
49558: PUSH
49559: LD_INT 30
49561: PUSH
49562: LD_INT 49
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: DIFF
49570: ST_TO_ADDR
// if not list then
49571: LD_VAR 0 5
49575: NOT
49576: IFFALSE 49580
// exit ;
49578: GO 49722
// weapon := list [ rand ( 1 , list ) ] ;
49580: LD_ADDR_VAR 0 18
49584: PUSH
49585: LD_VAR 0 5
49589: PUSH
49590: LD_INT 1
49592: PPUSH
49593: LD_VAR 0 5
49597: PPUSH
49598: CALL_OW 12
49602: ARRAY
49603: ST_TO_ADDR
// end ; if weapon then
49604: LD_VAR 0 18
49608: IFFALSE 49722
// begin tmp := CostOfWeapon ( weapon ) ;
49610: LD_ADDR_VAR 0 14
49614: PUSH
49615: LD_VAR 0 18
49619: PPUSH
49620: CALL_OW 451
49624: ST_TO_ADDR
// j := GetBase ( tower ) ;
49625: LD_ADDR_VAR 0 9
49629: PUSH
49630: LD_VAR 0 1
49634: PPUSH
49635: CALL_OW 274
49639: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49640: LD_VAR 0 9
49644: PPUSH
49645: LD_INT 1
49647: PPUSH
49648: CALL_OW 275
49652: PUSH
49653: LD_VAR 0 14
49657: PUSH
49658: LD_INT 1
49660: ARRAY
49661: GREATEREQUAL
49662: PUSH
49663: LD_VAR 0 9
49667: PPUSH
49668: LD_INT 2
49670: PPUSH
49671: CALL_OW 275
49675: PUSH
49676: LD_VAR 0 14
49680: PUSH
49681: LD_INT 2
49683: ARRAY
49684: GREATEREQUAL
49685: AND
49686: PUSH
49687: LD_VAR 0 9
49691: PPUSH
49692: LD_INT 3
49694: PPUSH
49695: CALL_OW 275
49699: PUSH
49700: LD_VAR 0 14
49704: PUSH
49705: LD_INT 3
49707: ARRAY
49708: GREATEREQUAL
49709: AND
49710: IFFALSE 49722
// result := weapon ;
49712: LD_ADDR_VAR 0 3
49716: PUSH
49717: LD_VAR 0 18
49721: ST_TO_ADDR
// end ; end ;
49722: LD_VAR 0 3
49726: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49727: LD_INT 0
49729: PPUSH
49730: PPUSH
// result := true ;
49731: LD_ADDR_VAR 0 3
49735: PUSH
49736: LD_INT 1
49738: ST_TO_ADDR
// if array1 = array2 then
49739: LD_VAR 0 1
49743: PUSH
49744: LD_VAR 0 2
49748: EQUAL
49749: IFFALSE 49809
// begin for i = 1 to array1 do
49751: LD_ADDR_VAR 0 4
49755: PUSH
49756: DOUBLE
49757: LD_INT 1
49759: DEC
49760: ST_TO_ADDR
49761: LD_VAR 0 1
49765: PUSH
49766: FOR_TO
49767: IFFALSE 49805
// if array1 [ i ] <> array2 [ i ] then
49769: LD_VAR 0 1
49773: PUSH
49774: LD_VAR 0 4
49778: ARRAY
49779: PUSH
49780: LD_VAR 0 2
49784: PUSH
49785: LD_VAR 0 4
49789: ARRAY
49790: NONEQUAL
49791: IFFALSE 49803
// begin result := false ;
49793: LD_ADDR_VAR 0 3
49797: PUSH
49798: LD_INT 0
49800: ST_TO_ADDR
// break ;
49801: GO 49805
// end ;
49803: GO 49766
49805: POP
49806: POP
// end else
49807: GO 49817
// result := false ;
49809: LD_ADDR_VAR 0 3
49813: PUSH
49814: LD_INT 0
49816: ST_TO_ADDR
// end ;
49817: LD_VAR 0 3
49821: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49822: LD_INT 0
49824: PPUSH
49825: PPUSH
// if not array1 or not array2 then
49826: LD_VAR 0 1
49830: NOT
49831: PUSH
49832: LD_VAR 0 2
49836: NOT
49837: OR
49838: IFFALSE 49842
// exit ;
49840: GO 49906
// result := true ;
49842: LD_ADDR_VAR 0 3
49846: PUSH
49847: LD_INT 1
49849: ST_TO_ADDR
// for i = 1 to array1 do
49850: LD_ADDR_VAR 0 4
49854: PUSH
49855: DOUBLE
49856: LD_INT 1
49858: DEC
49859: ST_TO_ADDR
49860: LD_VAR 0 1
49864: PUSH
49865: FOR_TO
49866: IFFALSE 49904
// if array1 [ i ] <> array2 [ i ] then
49868: LD_VAR 0 1
49872: PUSH
49873: LD_VAR 0 4
49877: ARRAY
49878: PUSH
49879: LD_VAR 0 2
49883: PUSH
49884: LD_VAR 0 4
49888: ARRAY
49889: NONEQUAL
49890: IFFALSE 49902
// begin result := false ;
49892: LD_ADDR_VAR 0 3
49896: PUSH
49897: LD_INT 0
49899: ST_TO_ADDR
// break ;
49900: GO 49904
// end ;
49902: GO 49865
49904: POP
49905: POP
// end ;
49906: LD_VAR 0 3
49910: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49911: LD_INT 0
49913: PPUSH
49914: PPUSH
49915: PPUSH
// pom := GetBase ( fac ) ;
49916: LD_ADDR_VAR 0 5
49920: PUSH
49921: LD_VAR 0 1
49925: PPUSH
49926: CALL_OW 274
49930: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49931: LD_ADDR_VAR 0 4
49935: PUSH
49936: LD_VAR 0 2
49940: PUSH
49941: LD_INT 1
49943: ARRAY
49944: PPUSH
49945: LD_VAR 0 2
49949: PUSH
49950: LD_INT 2
49952: ARRAY
49953: PPUSH
49954: LD_VAR 0 2
49958: PUSH
49959: LD_INT 3
49961: ARRAY
49962: PPUSH
49963: LD_VAR 0 2
49967: PUSH
49968: LD_INT 4
49970: ARRAY
49971: PPUSH
49972: CALL_OW 449
49976: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49977: LD_ADDR_VAR 0 3
49981: PUSH
49982: LD_VAR 0 5
49986: PPUSH
49987: LD_INT 1
49989: PPUSH
49990: CALL_OW 275
49994: PUSH
49995: LD_VAR 0 4
49999: PUSH
50000: LD_INT 1
50002: ARRAY
50003: GREATEREQUAL
50004: PUSH
50005: LD_VAR 0 5
50009: PPUSH
50010: LD_INT 2
50012: PPUSH
50013: CALL_OW 275
50017: PUSH
50018: LD_VAR 0 4
50022: PUSH
50023: LD_INT 2
50025: ARRAY
50026: GREATEREQUAL
50027: AND
50028: PUSH
50029: LD_VAR 0 5
50033: PPUSH
50034: LD_INT 3
50036: PPUSH
50037: CALL_OW 275
50041: PUSH
50042: LD_VAR 0 4
50046: PUSH
50047: LD_INT 3
50049: ARRAY
50050: GREATEREQUAL
50051: AND
50052: ST_TO_ADDR
// end ;
50053: LD_VAR 0 3
50057: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50058: LD_INT 0
50060: PPUSH
50061: PPUSH
50062: PPUSH
50063: PPUSH
// pom := GetBase ( building ) ;
50064: LD_ADDR_VAR 0 3
50068: PUSH
50069: LD_VAR 0 1
50073: PPUSH
50074: CALL_OW 274
50078: ST_TO_ADDR
// if not pom then
50079: LD_VAR 0 3
50083: NOT
50084: IFFALSE 50088
// exit ;
50086: GO 50258
// btype := GetBType ( building ) ;
50088: LD_ADDR_VAR 0 5
50092: PUSH
50093: LD_VAR 0 1
50097: PPUSH
50098: CALL_OW 266
50102: ST_TO_ADDR
// if btype = b_armoury then
50103: LD_VAR 0 5
50107: PUSH
50108: LD_INT 4
50110: EQUAL
50111: IFFALSE 50121
// btype := b_barracks ;
50113: LD_ADDR_VAR 0 5
50117: PUSH
50118: LD_INT 5
50120: ST_TO_ADDR
// if btype = b_depot then
50121: LD_VAR 0 5
50125: PUSH
50126: LD_INT 0
50128: EQUAL
50129: IFFALSE 50139
// btype := b_warehouse ;
50131: LD_ADDR_VAR 0 5
50135: PUSH
50136: LD_INT 1
50138: ST_TO_ADDR
// if btype = b_workshop then
50139: LD_VAR 0 5
50143: PUSH
50144: LD_INT 2
50146: EQUAL
50147: IFFALSE 50157
// btype := b_factory ;
50149: LD_ADDR_VAR 0 5
50153: PUSH
50154: LD_INT 3
50156: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50157: LD_ADDR_VAR 0 4
50161: PUSH
50162: LD_VAR 0 5
50166: PPUSH
50167: LD_VAR 0 1
50171: PPUSH
50172: CALL_OW 248
50176: PPUSH
50177: CALL_OW 450
50181: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50182: LD_ADDR_VAR 0 2
50186: PUSH
50187: LD_VAR 0 3
50191: PPUSH
50192: LD_INT 1
50194: PPUSH
50195: CALL_OW 275
50199: PUSH
50200: LD_VAR 0 4
50204: PUSH
50205: LD_INT 1
50207: ARRAY
50208: GREATEREQUAL
50209: PUSH
50210: LD_VAR 0 3
50214: PPUSH
50215: LD_INT 2
50217: PPUSH
50218: CALL_OW 275
50222: PUSH
50223: LD_VAR 0 4
50227: PUSH
50228: LD_INT 2
50230: ARRAY
50231: GREATEREQUAL
50232: AND
50233: PUSH
50234: LD_VAR 0 3
50238: PPUSH
50239: LD_INT 3
50241: PPUSH
50242: CALL_OW 275
50246: PUSH
50247: LD_VAR 0 4
50251: PUSH
50252: LD_INT 3
50254: ARRAY
50255: GREATEREQUAL
50256: AND
50257: ST_TO_ADDR
// end ;
50258: LD_VAR 0 2
50262: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50263: LD_INT 0
50265: PPUSH
50266: PPUSH
50267: PPUSH
// pom := GetBase ( building ) ;
50268: LD_ADDR_VAR 0 4
50272: PUSH
50273: LD_VAR 0 1
50277: PPUSH
50278: CALL_OW 274
50282: ST_TO_ADDR
// if not pom then
50283: LD_VAR 0 4
50287: NOT
50288: IFFALSE 50292
// exit ;
50290: GO 50393
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50292: LD_ADDR_VAR 0 5
50296: PUSH
50297: LD_VAR 0 2
50301: PPUSH
50302: LD_VAR 0 1
50306: PPUSH
50307: CALL_OW 248
50311: PPUSH
50312: CALL_OW 450
50316: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50317: LD_ADDR_VAR 0 3
50321: PUSH
50322: LD_VAR 0 4
50326: PPUSH
50327: LD_INT 1
50329: PPUSH
50330: CALL_OW 275
50334: PUSH
50335: LD_VAR 0 5
50339: PUSH
50340: LD_INT 1
50342: ARRAY
50343: GREATEREQUAL
50344: PUSH
50345: LD_VAR 0 4
50349: PPUSH
50350: LD_INT 2
50352: PPUSH
50353: CALL_OW 275
50357: PUSH
50358: LD_VAR 0 5
50362: PUSH
50363: LD_INT 2
50365: ARRAY
50366: GREATEREQUAL
50367: AND
50368: PUSH
50369: LD_VAR 0 4
50373: PPUSH
50374: LD_INT 3
50376: PPUSH
50377: CALL_OW 275
50381: PUSH
50382: LD_VAR 0 5
50386: PUSH
50387: LD_INT 3
50389: ARRAY
50390: GREATEREQUAL
50391: AND
50392: ST_TO_ADDR
// end ;
50393: LD_VAR 0 3
50397: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50398: LD_INT 0
50400: PPUSH
50401: PPUSH
50402: PPUSH
50403: PPUSH
50404: PPUSH
50405: PPUSH
50406: PPUSH
50407: PPUSH
50408: PPUSH
50409: PPUSH
50410: PPUSH
// result := false ;
50411: LD_ADDR_VAR 0 8
50415: PUSH
50416: LD_INT 0
50418: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50419: LD_VAR 0 5
50423: NOT
50424: PUSH
50425: LD_VAR 0 1
50429: NOT
50430: OR
50431: PUSH
50432: LD_VAR 0 2
50436: NOT
50437: OR
50438: PUSH
50439: LD_VAR 0 3
50443: NOT
50444: OR
50445: IFFALSE 50449
// exit ;
50447: GO 51263
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50449: LD_ADDR_VAR 0 14
50453: PUSH
50454: LD_VAR 0 1
50458: PPUSH
50459: LD_VAR 0 2
50463: PPUSH
50464: LD_VAR 0 3
50468: PPUSH
50469: LD_VAR 0 4
50473: PPUSH
50474: LD_VAR 0 5
50478: PUSH
50479: LD_INT 1
50481: ARRAY
50482: PPUSH
50483: CALL_OW 248
50487: PPUSH
50488: LD_INT 0
50490: PPUSH
50491: CALL 52500 0 6
50495: ST_TO_ADDR
// if not hexes then
50496: LD_VAR 0 14
50500: NOT
50501: IFFALSE 50505
// exit ;
50503: GO 51263
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50505: LD_ADDR_VAR 0 17
50509: PUSH
50510: LD_VAR 0 5
50514: PPUSH
50515: LD_INT 22
50517: PUSH
50518: LD_VAR 0 13
50522: PPUSH
50523: CALL_OW 255
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 30
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 30
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PPUSH
50564: CALL_OW 72
50568: ST_TO_ADDR
// for i = 1 to hexes do
50569: LD_ADDR_VAR 0 9
50573: PUSH
50574: DOUBLE
50575: LD_INT 1
50577: DEC
50578: ST_TO_ADDR
50579: LD_VAR 0 14
50583: PUSH
50584: FOR_TO
50585: IFFALSE 51261
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50587: LD_ADDR_VAR 0 13
50591: PUSH
50592: LD_VAR 0 14
50596: PUSH
50597: LD_VAR 0 9
50601: ARRAY
50602: PUSH
50603: LD_INT 1
50605: ARRAY
50606: PPUSH
50607: LD_VAR 0 14
50611: PUSH
50612: LD_VAR 0 9
50616: ARRAY
50617: PUSH
50618: LD_INT 2
50620: ARRAY
50621: PPUSH
50622: CALL_OW 428
50626: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50627: LD_VAR 0 14
50631: PUSH
50632: LD_VAR 0 9
50636: ARRAY
50637: PUSH
50638: LD_INT 1
50640: ARRAY
50641: PPUSH
50642: LD_VAR 0 14
50646: PUSH
50647: LD_VAR 0 9
50651: ARRAY
50652: PUSH
50653: LD_INT 2
50655: ARRAY
50656: PPUSH
50657: CALL_OW 351
50661: PUSH
50662: LD_VAR 0 14
50666: PUSH
50667: LD_VAR 0 9
50671: ARRAY
50672: PUSH
50673: LD_INT 1
50675: ARRAY
50676: PPUSH
50677: LD_VAR 0 14
50681: PUSH
50682: LD_VAR 0 9
50686: ARRAY
50687: PUSH
50688: LD_INT 2
50690: ARRAY
50691: PPUSH
50692: CALL_OW 488
50696: NOT
50697: OR
50698: PUSH
50699: LD_VAR 0 13
50703: PPUSH
50704: CALL_OW 247
50708: PUSH
50709: LD_INT 3
50711: EQUAL
50712: OR
50713: IFFALSE 50719
// exit ;
50715: POP
50716: POP
50717: GO 51263
// if not tmp then
50719: LD_VAR 0 13
50723: NOT
50724: IFFALSE 50728
// continue ;
50726: GO 50584
// result := true ;
50728: LD_ADDR_VAR 0 8
50732: PUSH
50733: LD_INT 1
50735: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50736: LD_VAR 0 6
50740: PUSH
50741: LD_VAR 0 13
50745: PPUSH
50746: CALL_OW 247
50750: PUSH
50751: LD_INT 2
50753: EQUAL
50754: AND
50755: PUSH
50756: LD_VAR 0 13
50760: PPUSH
50761: CALL_OW 263
50765: PUSH
50766: LD_INT 1
50768: EQUAL
50769: AND
50770: IFFALSE 50934
// begin if IsDrivenBy ( tmp ) then
50772: LD_VAR 0 13
50776: PPUSH
50777: CALL_OW 311
50781: IFFALSE 50785
// continue ;
50783: GO 50584
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50785: LD_VAR 0 6
50789: PPUSH
50790: LD_INT 3
50792: PUSH
50793: LD_INT 60
50795: PUSH
50796: EMPTY
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 3
50805: PUSH
50806: LD_INT 55
50808: PUSH
50809: EMPTY
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PPUSH
50820: CALL_OW 72
50824: IFFALSE 50932
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50826: LD_ADDR_VAR 0 18
50830: PUSH
50831: LD_VAR 0 6
50835: PPUSH
50836: LD_INT 3
50838: PUSH
50839: LD_INT 60
50841: PUSH
50842: EMPTY
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: LD_INT 55
50854: PUSH
50855: EMPTY
50856: LIST
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PPUSH
50866: CALL_OW 72
50870: PUSH
50871: LD_INT 1
50873: ARRAY
50874: ST_TO_ADDR
// if IsInUnit ( driver ) then
50875: LD_VAR 0 18
50879: PPUSH
50880: CALL_OW 310
50884: IFFALSE 50895
// ComExit ( driver ) ;
50886: LD_VAR 0 18
50890: PPUSH
50891: CALL 75684 0 1
// AddComEnterUnit ( driver , tmp ) ;
50895: LD_VAR 0 18
50899: PPUSH
50900: LD_VAR 0 13
50904: PPUSH
50905: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50909: LD_VAR 0 18
50913: PPUSH
50914: LD_VAR 0 7
50918: PPUSH
50919: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50923: LD_VAR 0 18
50927: PPUSH
50928: CALL_OW 181
// end ; continue ;
50932: GO 50584
// end ; if not cleaners or not tmp in cleaners then
50934: LD_VAR 0 6
50938: NOT
50939: PUSH
50940: LD_VAR 0 13
50944: PUSH
50945: LD_VAR 0 6
50949: IN
50950: NOT
50951: OR
50952: IFFALSE 51259
// begin if dep then
50954: LD_VAR 0 17
50958: IFFALSE 51094
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50960: LD_ADDR_VAR 0 16
50964: PUSH
50965: LD_VAR 0 17
50969: PUSH
50970: LD_INT 1
50972: ARRAY
50973: PPUSH
50974: CALL_OW 250
50978: PPUSH
50979: LD_VAR 0 17
50983: PUSH
50984: LD_INT 1
50986: ARRAY
50987: PPUSH
50988: CALL_OW 254
50992: PPUSH
50993: LD_INT 5
50995: PPUSH
50996: CALL_OW 272
51000: PUSH
51001: LD_VAR 0 17
51005: PUSH
51006: LD_INT 1
51008: ARRAY
51009: PPUSH
51010: CALL_OW 251
51014: PPUSH
51015: LD_VAR 0 17
51019: PUSH
51020: LD_INT 1
51022: ARRAY
51023: PPUSH
51024: CALL_OW 254
51028: PPUSH
51029: LD_INT 5
51031: PPUSH
51032: CALL_OW 273
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51041: LD_VAR 0 16
51045: PUSH
51046: LD_INT 1
51048: ARRAY
51049: PPUSH
51050: LD_VAR 0 16
51054: PUSH
51055: LD_INT 2
51057: ARRAY
51058: PPUSH
51059: CALL_OW 488
51063: IFFALSE 51094
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51065: LD_VAR 0 13
51069: PPUSH
51070: LD_VAR 0 16
51074: PUSH
51075: LD_INT 1
51077: ARRAY
51078: PPUSH
51079: LD_VAR 0 16
51083: PUSH
51084: LD_INT 2
51086: ARRAY
51087: PPUSH
51088: CALL_OW 111
// continue ;
51092: GO 50584
// end ; end ; r := GetDir ( tmp ) ;
51094: LD_ADDR_VAR 0 15
51098: PUSH
51099: LD_VAR 0 13
51103: PPUSH
51104: CALL_OW 254
51108: ST_TO_ADDR
// if r = 5 then
51109: LD_VAR 0 15
51113: PUSH
51114: LD_INT 5
51116: EQUAL
51117: IFFALSE 51127
// r := 0 ;
51119: LD_ADDR_VAR 0 15
51123: PUSH
51124: LD_INT 0
51126: ST_TO_ADDR
// for j = r to 5 do
51127: LD_ADDR_VAR 0 10
51131: PUSH
51132: DOUBLE
51133: LD_VAR 0 15
51137: DEC
51138: ST_TO_ADDR
51139: LD_INT 5
51141: PUSH
51142: FOR_TO
51143: IFFALSE 51257
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51145: LD_ADDR_VAR 0 11
51149: PUSH
51150: LD_VAR 0 13
51154: PPUSH
51155: CALL_OW 250
51159: PPUSH
51160: LD_VAR 0 10
51164: PPUSH
51165: LD_INT 2
51167: PPUSH
51168: CALL_OW 272
51172: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51173: LD_ADDR_VAR 0 12
51177: PUSH
51178: LD_VAR 0 13
51182: PPUSH
51183: CALL_OW 251
51187: PPUSH
51188: LD_VAR 0 10
51192: PPUSH
51193: LD_INT 2
51195: PPUSH
51196: CALL_OW 273
51200: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51201: LD_VAR 0 11
51205: PPUSH
51206: LD_VAR 0 12
51210: PPUSH
51211: CALL_OW 488
51215: PUSH
51216: LD_VAR 0 11
51220: PPUSH
51221: LD_VAR 0 12
51225: PPUSH
51226: CALL_OW 428
51230: NOT
51231: AND
51232: IFFALSE 51255
// begin ComMoveXY ( tmp , _x , _y ) ;
51234: LD_VAR 0 13
51238: PPUSH
51239: LD_VAR 0 11
51243: PPUSH
51244: LD_VAR 0 12
51248: PPUSH
51249: CALL_OW 111
// break ;
51253: GO 51257
// end ; end ;
51255: GO 51142
51257: POP
51258: POP
// end ; end ;
51259: GO 50584
51261: POP
51262: POP
// end ;
51263: LD_VAR 0 8
51267: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51268: LD_INT 0
51270: PPUSH
// result := true ;
51271: LD_ADDR_VAR 0 3
51275: PUSH
51276: LD_INT 1
51278: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51279: LD_VAR 0 2
51283: PUSH
51284: LD_INT 24
51286: DOUBLE
51287: EQUAL
51288: IFTRUE 51298
51290: LD_INT 33
51292: DOUBLE
51293: EQUAL
51294: IFTRUE 51298
51296: GO 51323
51298: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51299: LD_ADDR_VAR 0 3
51303: PUSH
51304: LD_INT 32
51306: PPUSH
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 321
51316: PUSH
51317: LD_INT 2
51319: EQUAL
51320: ST_TO_ADDR
51321: GO 51643
51323: LD_INT 20
51325: DOUBLE
51326: EQUAL
51327: IFTRUE 51331
51329: GO 51356
51331: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51332: LD_ADDR_VAR 0 3
51336: PUSH
51337: LD_INT 6
51339: PPUSH
51340: LD_VAR 0 1
51344: PPUSH
51345: CALL_OW 321
51349: PUSH
51350: LD_INT 2
51352: EQUAL
51353: ST_TO_ADDR
51354: GO 51643
51356: LD_INT 22
51358: DOUBLE
51359: EQUAL
51360: IFTRUE 51370
51362: LD_INT 36
51364: DOUBLE
51365: EQUAL
51366: IFTRUE 51370
51368: GO 51395
51370: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51371: LD_ADDR_VAR 0 3
51375: PUSH
51376: LD_INT 15
51378: PPUSH
51379: LD_VAR 0 1
51383: PPUSH
51384: CALL_OW 321
51388: PUSH
51389: LD_INT 2
51391: EQUAL
51392: ST_TO_ADDR
51393: GO 51643
51395: LD_INT 30
51397: DOUBLE
51398: EQUAL
51399: IFTRUE 51403
51401: GO 51428
51403: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51404: LD_ADDR_VAR 0 3
51408: PUSH
51409: LD_INT 20
51411: PPUSH
51412: LD_VAR 0 1
51416: PPUSH
51417: CALL_OW 321
51421: PUSH
51422: LD_INT 2
51424: EQUAL
51425: ST_TO_ADDR
51426: GO 51643
51428: LD_INT 28
51430: DOUBLE
51431: EQUAL
51432: IFTRUE 51442
51434: LD_INT 21
51436: DOUBLE
51437: EQUAL
51438: IFTRUE 51442
51440: GO 51467
51442: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51443: LD_ADDR_VAR 0 3
51447: PUSH
51448: LD_INT 21
51450: PPUSH
51451: LD_VAR 0 1
51455: PPUSH
51456: CALL_OW 321
51460: PUSH
51461: LD_INT 2
51463: EQUAL
51464: ST_TO_ADDR
51465: GO 51643
51467: LD_INT 16
51469: DOUBLE
51470: EQUAL
51471: IFTRUE 51475
51473: GO 51502
51475: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51476: LD_ADDR_VAR 0 3
51480: PUSH
51481: LD_EXP 60
51485: PPUSH
51486: LD_VAR 0 1
51490: PPUSH
51491: CALL_OW 321
51495: PUSH
51496: LD_INT 2
51498: EQUAL
51499: ST_TO_ADDR
51500: GO 51643
51502: LD_INT 19
51504: DOUBLE
51505: EQUAL
51506: IFTRUE 51516
51508: LD_INT 23
51510: DOUBLE
51511: EQUAL
51512: IFTRUE 51516
51514: GO 51543
51516: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51517: LD_ADDR_VAR 0 3
51521: PUSH
51522: LD_EXP 59
51526: PPUSH
51527: LD_VAR 0 1
51531: PPUSH
51532: CALL_OW 321
51536: PUSH
51537: LD_INT 2
51539: EQUAL
51540: ST_TO_ADDR
51541: GO 51643
51543: LD_INT 17
51545: DOUBLE
51546: EQUAL
51547: IFTRUE 51551
51549: GO 51576
51551: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51552: LD_ADDR_VAR 0 3
51556: PUSH
51557: LD_INT 39
51559: PPUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: CALL_OW 321
51569: PUSH
51570: LD_INT 2
51572: EQUAL
51573: ST_TO_ADDR
51574: GO 51643
51576: LD_INT 18
51578: DOUBLE
51579: EQUAL
51580: IFTRUE 51584
51582: GO 51609
51584: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51585: LD_ADDR_VAR 0 3
51589: PUSH
51590: LD_INT 40
51592: PPUSH
51593: LD_VAR 0 1
51597: PPUSH
51598: CALL_OW 321
51602: PUSH
51603: LD_INT 2
51605: EQUAL
51606: ST_TO_ADDR
51607: GO 51643
51609: LD_INT 27
51611: DOUBLE
51612: EQUAL
51613: IFTRUE 51617
51615: GO 51642
51617: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51618: LD_ADDR_VAR 0 3
51622: PUSH
51623: LD_INT 35
51625: PPUSH
51626: LD_VAR 0 1
51630: PPUSH
51631: CALL_OW 321
51635: PUSH
51636: LD_INT 2
51638: EQUAL
51639: ST_TO_ADDR
51640: GO 51643
51642: POP
// end ;
51643: LD_VAR 0 3
51647: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51648: LD_INT 0
51650: PPUSH
51651: PPUSH
51652: PPUSH
51653: PPUSH
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
51658: PPUSH
51659: PPUSH
51660: PPUSH
// result := false ;
51661: LD_ADDR_VAR 0 6
51665: PUSH
51666: LD_INT 0
51668: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51669: LD_VAR 0 1
51673: NOT
51674: PUSH
51675: LD_VAR 0 1
51679: PPUSH
51680: CALL_OW 266
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: IN
51695: NOT
51696: OR
51697: PUSH
51698: LD_VAR 0 2
51702: NOT
51703: OR
51704: PUSH
51705: LD_VAR 0 5
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 4
51724: PUSH
51725: LD_INT 5
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: IN
51736: NOT
51737: OR
51738: PUSH
51739: LD_VAR 0 3
51743: PPUSH
51744: LD_VAR 0 4
51748: PPUSH
51749: CALL_OW 488
51753: NOT
51754: OR
51755: IFFALSE 51759
// exit ;
51757: GO 52495
// side := GetSide ( depot ) ;
51759: LD_ADDR_VAR 0 9
51763: PUSH
51764: LD_VAR 0 1
51768: PPUSH
51769: CALL_OW 255
51773: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51774: LD_VAR 0 9
51778: PPUSH
51779: LD_VAR 0 2
51783: PPUSH
51784: CALL 51268 0 2
51788: NOT
51789: IFFALSE 51793
// exit ;
51791: GO 52495
// pom := GetBase ( depot ) ;
51793: LD_ADDR_VAR 0 10
51797: PUSH
51798: LD_VAR 0 1
51802: PPUSH
51803: CALL_OW 274
51807: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51808: LD_ADDR_VAR 0 11
51812: PUSH
51813: LD_VAR 0 2
51817: PPUSH
51818: LD_VAR 0 1
51822: PPUSH
51823: CALL_OW 248
51827: PPUSH
51828: CALL_OW 450
51832: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51833: LD_VAR 0 10
51837: PPUSH
51838: LD_INT 1
51840: PPUSH
51841: CALL_OW 275
51845: PUSH
51846: LD_VAR 0 11
51850: PUSH
51851: LD_INT 1
51853: ARRAY
51854: GREATEREQUAL
51855: PUSH
51856: LD_VAR 0 10
51860: PPUSH
51861: LD_INT 2
51863: PPUSH
51864: CALL_OW 275
51868: PUSH
51869: LD_VAR 0 11
51873: PUSH
51874: LD_INT 2
51876: ARRAY
51877: GREATEREQUAL
51878: AND
51879: PUSH
51880: LD_VAR 0 10
51884: PPUSH
51885: LD_INT 3
51887: PPUSH
51888: CALL_OW 275
51892: PUSH
51893: LD_VAR 0 11
51897: PUSH
51898: LD_INT 3
51900: ARRAY
51901: GREATEREQUAL
51902: AND
51903: NOT
51904: IFFALSE 51908
// exit ;
51906: GO 52495
// if GetBType ( depot ) = b_depot then
51908: LD_VAR 0 1
51912: PPUSH
51913: CALL_OW 266
51917: PUSH
51918: LD_INT 0
51920: EQUAL
51921: IFFALSE 51933
// dist := 28 else
51923: LD_ADDR_VAR 0 14
51927: PUSH
51928: LD_INT 28
51930: ST_TO_ADDR
51931: GO 51941
// dist := 36 ;
51933: LD_ADDR_VAR 0 14
51937: PUSH
51938: LD_INT 36
51940: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51941: LD_VAR 0 1
51945: PPUSH
51946: LD_VAR 0 3
51950: PPUSH
51951: LD_VAR 0 4
51955: PPUSH
51956: CALL_OW 297
51960: PUSH
51961: LD_VAR 0 14
51965: GREATER
51966: IFFALSE 51970
// exit ;
51968: GO 52495
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51970: LD_ADDR_VAR 0 12
51974: PUSH
51975: LD_VAR 0 2
51979: PPUSH
51980: LD_VAR 0 3
51984: PPUSH
51985: LD_VAR 0 4
51989: PPUSH
51990: LD_VAR 0 5
51994: PPUSH
51995: LD_VAR 0 1
51999: PPUSH
52000: CALL_OW 248
52004: PPUSH
52005: LD_INT 0
52007: PPUSH
52008: CALL 52500 0 6
52012: ST_TO_ADDR
// if not hexes then
52013: LD_VAR 0 12
52017: NOT
52018: IFFALSE 52022
// exit ;
52020: GO 52495
// hex := GetHexInfo ( x , y ) ;
52022: LD_ADDR_VAR 0 15
52026: PUSH
52027: LD_VAR 0 3
52031: PPUSH
52032: LD_VAR 0 4
52036: PPUSH
52037: CALL_OW 546
52041: ST_TO_ADDR
// if hex [ 1 ] then
52042: LD_VAR 0 15
52046: PUSH
52047: LD_INT 1
52049: ARRAY
52050: IFFALSE 52054
// exit ;
52052: GO 52495
// height := hex [ 2 ] ;
52054: LD_ADDR_VAR 0 13
52058: PUSH
52059: LD_VAR 0 15
52063: PUSH
52064: LD_INT 2
52066: ARRAY
52067: ST_TO_ADDR
// for i = 1 to hexes do
52068: LD_ADDR_VAR 0 7
52072: PUSH
52073: DOUBLE
52074: LD_INT 1
52076: DEC
52077: ST_TO_ADDR
52078: LD_VAR 0 12
52082: PUSH
52083: FOR_TO
52084: IFFALSE 52414
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52086: LD_VAR 0 12
52090: PUSH
52091: LD_VAR 0 7
52095: ARRAY
52096: PUSH
52097: LD_INT 1
52099: ARRAY
52100: PPUSH
52101: LD_VAR 0 12
52105: PUSH
52106: LD_VAR 0 7
52110: ARRAY
52111: PUSH
52112: LD_INT 2
52114: ARRAY
52115: PPUSH
52116: CALL_OW 488
52120: NOT
52121: PUSH
52122: LD_VAR 0 12
52126: PUSH
52127: LD_VAR 0 7
52131: ARRAY
52132: PUSH
52133: LD_INT 1
52135: ARRAY
52136: PPUSH
52137: LD_VAR 0 12
52141: PUSH
52142: LD_VAR 0 7
52146: ARRAY
52147: PUSH
52148: LD_INT 2
52150: ARRAY
52151: PPUSH
52152: CALL_OW 428
52156: PUSH
52157: LD_INT 0
52159: GREATER
52160: OR
52161: PUSH
52162: LD_VAR 0 12
52166: PUSH
52167: LD_VAR 0 7
52171: ARRAY
52172: PUSH
52173: LD_INT 1
52175: ARRAY
52176: PPUSH
52177: LD_VAR 0 12
52181: PUSH
52182: LD_VAR 0 7
52186: ARRAY
52187: PUSH
52188: LD_INT 2
52190: ARRAY
52191: PPUSH
52192: CALL_OW 351
52196: OR
52197: IFFALSE 52203
// exit ;
52199: POP
52200: POP
52201: GO 52495
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52203: LD_ADDR_VAR 0 8
52207: PUSH
52208: LD_VAR 0 12
52212: PUSH
52213: LD_VAR 0 7
52217: ARRAY
52218: PUSH
52219: LD_INT 1
52221: ARRAY
52222: PPUSH
52223: LD_VAR 0 12
52227: PUSH
52228: LD_VAR 0 7
52232: ARRAY
52233: PUSH
52234: LD_INT 2
52236: ARRAY
52237: PPUSH
52238: CALL_OW 546
52242: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52243: LD_VAR 0 8
52247: PUSH
52248: LD_INT 1
52250: ARRAY
52251: PUSH
52252: LD_VAR 0 8
52256: PUSH
52257: LD_INT 2
52259: ARRAY
52260: PUSH
52261: LD_VAR 0 13
52265: PUSH
52266: LD_INT 2
52268: PLUS
52269: GREATER
52270: OR
52271: PUSH
52272: LD_VAR 0 8
52276: PUSH
52277: LD_INT 2
52279: ARRAY
52280: PUSH
52281: LD_VAR 0 13
52285: PUSH
52286: LD_INT 2
52288: MINUS
52289: LESS
52290: OR
52291: PUSH
52292: LD_VAR 0 8
52296: PUSH
52297: LD_INT 3
52299: ARRAY
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 8
52306: PUSH
52307: LD_INT 9
52309: PUSH
52310: LD_INT 10
52312: PUSH
52313: LD_INT 11
52315: PUSH
52316: LD_INT 12
52318: PUSH
52319: LD_INT 13
52321: PUSH
52322: LD_INT 16
52324: PUSH
52325: LD_INT 17
52327: PUSH
52328: LD_INT 18
52330: PUSH
52331: LD_INT 19
52333: PUSH
52334: LD_INT 20
52336: PUSH
52337: LD_INT 21
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: IN
52355: NOT
52356: OR
52357: PUSH
52358: LD_VAR 0 8
52362: PUSH
52363: LD_INT 5
52365: ARRAY
52366: NOT
52367: OR
52368: PUSH
52369: LD_VAR 0 8
52373: PUSH
52374: LD_INT 6
52376: ARRAY
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 7
52386: PUSH
52387: LD_INT 9
52389: PUSH
52390: LD_INT 10
52392: PUSH
52393: LD_INT 11
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: IN
52404: NOT
52405: OR
52406: IFFALSE 52412
// exit ;
52408: POP
52409: POP
52410: GO 52495
// end ;
52412: GO 52083
52414: POP
52415: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52416: LD_VAR 0 9
52420: PPUSH
52421: LD_VAR 0 3
52425: PPUSH
52426: LD_VAR 0 4
52430: PPUSH
52431: LD_INT 20
52433: PPUSH
52434: CALL 44441 0 4
52438: PUSH
52439: LD_INT 4
52441: ARRAY
52442: IFFALSE 52446
// exit ;
52444: GO 52495
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52446: LD_VAR 0 2
52450: PUSH
52451: LD_INT 29
52453: PUSH
52454: LD_INT 30
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: IN
52461: PUSH
52462: LD_VAR 0 3
52466: PPUSH
52467: LD_VAR 0 4
52471: PPUSH
52472: LD_VAR 0 9
52476: PPUSH
52477: CALL_OW 440
52481: NOT
52482: AND
52483: IFFALSE 52487
// exit ;
52485: GO 52495
// result := true ;
52487: LD_ADDR_VAR 0 6
52491: PUSH
52492: LD_INT 1
52494: ST_TO_ADDR
// end ;
52495: LD_VAR 0 6
52499: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52500: LD_INT 0
52502: PPUSH
52503: PPUSH
52504: PPUSH
52505: PPUSH
52506: PPUSH
52507: PPUSH
52508: PPUSH
52509: PPUSH
52510: PPUSH
52511: PPUSH
52512: PPUSH
52513: PPUSH
52514: PPUSH
52515: PPUSH
52516: PPUSH
52517: PPUSH
52518: PPUSH
52519: PPUSH
52520: PPUSH
52521: PPUSH
52522: PPUSH
52523: PPUSH
52524: PPUSH
52525: PPUSH
52526: PPUSH
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
52533: PPUSH
52534: PPUSH
52535: PPUSH
52536: PPUSH
52537: PPUSH
52538: PPUSH
52539: PPUSH
52540: PPUSH
52541: PPUSH
52542: PPUSH
52543: PPUSH
52544: PPUSH
52545: PPUSH
52546: PPUSH
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
52551: PPUSH
52552: PPUSH
52553: PPUSH
52554: PPUSH
52555: PPUSH
52556: PPUSH
52557: PPUSH
52558: PPUSH
52559: PPUSH
// result = [ ] ;
52560: LD_ADDR_VAR 0 7
52564: PUSH
52565: EMPTY
52566: ST_TO_ADDR
// temp_list = [ ] ;
52567: LD_ADDR_VAR 0 9
52571: PUSH
52572: EMPTY
52573: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52574: LD_VAR 0 4
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: LD_INT 4
52593: PUSH
52594: LD_INT 5
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: IN
52605: NOT
52606: PUSH
52607: LD_VAR 0 1
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: IN
52622: PUSH
52623: LD_VAR 0 5
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 3
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: IN
52642: NOT
52643: AND
52644: OR
52645: IFFALSE 52649
// exit ;
52647: GO 71040
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52649: LD_VAR 0 1
52653: PUSH
52654: LD_INT 6
52656: PUSH
52657: LD_INT 7
52659: PUSH
52660: LD_INT 8
52662: PUSH
52663: LD_INT 13
52665: PUSH
52666: LD_INT 12
52668: PUSH
52669: LD_INT 15
52671: PUSH
52672: LD_INT 11
52674: PUSH
52675: LD_INT 14
52677: PUSH
52678: LD_INT 10
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: IN
52692: IFFALSE 52702
// btype = b_lab ;
52694: LD_ADDR_VAR 0 1
52698: PUSH
52699: LD_INT 6
52701: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52702: LD_VAR 0 6
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: IN
52721: NOT
52722: PUSH
52723: LD_VAR 0 1
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: LD_INT 3
52739: PUSH
52740: LD_INT 6
52742: PUSH
52743: LD_INT 36
52745: PUSH
52746: LD_INT 4
52748: PUSH
52749: LD_INT 5
52751: PUSH
52752: LD_INT 31
52754: PUSH
52755: LD_INT 32
52757: PUSH
52758: LD_INT 33
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: IN
52774: NOT
52775: PUSH
52776: LD_VAR 0 6
52780: PUSH
52781: LD_INT 1
52783: EQUAL
52784: AND
52785: OR
52786: PUSH
52787: LD_VAR 0 1
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: IN
52802: NOT
52803: PUSH
52804: LD_VAR 0 6
52808: PUSH
52809: LD_INT 2
52811: EQUAL
52812: AND
52813: OR
52814: IFFALSE 52824
// mode = 0 ;
52816: LD_ADDR_VAR 0 6
52820: PUSH
52821: LD_INT 0
52823: ST_TO_ADDR
// case mode of 0 :
52824: LD_VAR 0 6
52828: PUSH
52829: LD_INT 0
52831: DOUBLE
52832: EQUAL
52833: IFTRUE 52837
52835: GO 64290
52837: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52838: LD_ADDR_VAR 0 11
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53031: LD_ADDR_VAR 0 12
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: NEG
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53227: LD_ADDR_VAR 0 13
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: LD_INT 3
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53426: LD_ADDR_VAR 0 14
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 3
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 3
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53622: LD_ADDR_VAR 0 15
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 3
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53815: LD_ADDR_VAR 0 16
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54008: LD_ADDR_VAR 0 17
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54238: LD_ADDR_VAR 0 18
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54468: LD_ADDR_VAR 0 19
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54698: LD_ADDR_VAR 0 20
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54928: LD_ADDR_VAR 0 21
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55158: LD_ADDR_VAR 0 22
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55388: LD_ADDR_VAR 0 23
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 3
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 3
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55668: LD_ADDR_VAR 0 24
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55944: LD_ADDR_VAR 0 25
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56218: LD_ADDR_VAR 0 26
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56494: LD_ADDR_VAR 0 27
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 2
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56774: LD_ADDR_VAR 0 28
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 2
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: LD_INT 3
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 3
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 3
57009: NEG
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57056: LD_ADDR_VAR 0 29
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 3
57300: NEG
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57335: LD_ADDR_VAR 0 30
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57613: LD_ADDR_VAR 0 31
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: NEG
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57891: LD_ADDR_VAR 0 32
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58169: LD_ADDR_VAR 0 33
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 3
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58448: LD_ADDR_VAR 0 34
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 3
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 3
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 3
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58728: LD_ADDR_VAR 0 35
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58840: LD_ADDR_VAR 0 36
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58952: LD_ADDR_VAR 0 37
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59064: LD_ADDR_VAR 0 38
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59176: LD_ADDR_VAR 0 39
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59288: LD_ADDR_VAR 0 40
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59400: LD_ADDR_VAR 0 41
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: NEG
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59750: LD_ADDR_VAR 0 42
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 3
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: LD_INT 3
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 3
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: NEG
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60100: LD_ADDR_VAR 0 43
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 3
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 3
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 3
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60448: LD_ADDR_VAR 0 44
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: LD_INT 3
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 3
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: LD_INT 3
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60798: LD_ADDR_VAR 0 45
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 3
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 3
61095: NEG
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 3
61107: NEG
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61148: LD_ADDR_VAR 0 46
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: NEG
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 3
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 2
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 3
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 3
61455: NEG
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61496: LD_ADDR_VAR 0 47
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 2
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61647: LD_ADDR_VAR 0 48
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61794: LD_ADDR_VAR 0 49
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61938: LD_ADDR_VAR 0 50
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: LD_INT 2
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: NEG
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62082: LD_ADDR_VAR 0 51
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 2
62194: NEG
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62229: LD_ADDR_VAR 0 52
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 2
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62380: LD_ADDR_VAR 0 53
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 2
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: NEG
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62610: LD_ADDR_VAR 0 54
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: NEG
62810: PUSH
62811: LD_INT 2
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62840: LD_ADDR_VAR 0 55
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 2
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 2
63016: NEG
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63070: LD_ADDR_VAR 0 56
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 2
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: NEG
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: LD_INT 2
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63300: LD_ADDR_VAR 0 57
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 2
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 2
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 2
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 2
63476: NEG
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: NEG
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 2
63499: NEG
63500: PUSH
63501: LD_INT 2
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63530: LD_ADDR_VAR 0 58
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 2
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: LD_INT 2
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: LD_INT 2
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63760: LD_ADDR_VAR 0 59
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63848: LD_ADDR_VAR 0 60
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63936: LD_ADDR_VAR 0 61
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64024: LD_ADDR_VAR 0 62
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64112: LD_ADDR_VAR 0 63
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: NEG
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64200: LD_ADDR_VAR 0 64
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: ST_TO_ADDR
// end ; 1 :
64288: GO 70185
64290: LD_INT 1
64292: DOUBLE
64293: EQUAL
64294: IFTRUE 64298
64296: GO 66921
64298: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64299: LD_ADDR_VAR 0 11
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64343: LD_ADDR_VAR 0 12
64347: PUSH
64348: LD_INT 2
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 3
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 3
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: LIST
64383: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64384: LD_ADDR_VAR 0 13
64388: PUSH
64389: LD_INT 3
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 3
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64424: LD_ADDR_VAR 0 14
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: LD_INT 3
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 2
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64465: LD_ADDR_VAR 0 15
64469: PUSH
64470: LD_INT 2
64472: NEG
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 3
64483: NEG
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 3
64494: NEG
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: LIST
64508: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64509: LD_ADDR_VAR 0 16
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: LD_INT 3
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: LD_INT 2
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: NEG
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64555: LD_ADDR_VAR 0 17
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: LD_INT 3
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 3
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 2
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: LIST
64598: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64599: LD_ADDR_VAR 0 18
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 3
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64640: LD_ADDR_VAR 0 19
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 3
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 2
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: LIST
64679: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64680: LD_ADDR_VAR 0 20
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 3
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64721: LD_ADDR_VAR 0 21
64725: PUSH
64726: LD_INT 2
64728: NEG
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 3
64739: NEG
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 3
64750: NEG
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64765: LD_ADDR_VAR 0 22
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: LD_INT 3
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: LD_INT 2
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 3
64796: NEG
64797: PUSH
64798: LD_INT 3
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64811: LD_ADDR_VAR 0 23
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 3
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: PUSH
64831: LD_INT 4
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: PUSH
64842: LD_INT 3
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64855: LD_ADDR_VAR 0 24
64859: PUSH
64860: LD_INT 3
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 3
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 4
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64896: LD_ADDR_VAR 0 25
64900: PUSH
64901: LD_INT 3
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 4
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: LD_INT 4
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: LIST
64935: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64936: LD_ADDR_VAR 0 26
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: LD_INT 4
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: LD_INT 3
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64977: LD_ADDR_VAR 0 27
64981: PUSH
64982: LD_INT 3
64984: NEG
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 3
64995: NEG
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 4
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65021: LD_ADDR_VAR 0 28
65025: PUSH
65026: LD_INT 3
65028: NEG
65029: PUSH
65030: LD_INT 3
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 3
65040: NEG
65041: PUSH
65042: LD_INT 4
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 4
65052: NEG
65053: PUSH
65054: LD_INT 3
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65067: LD_ADDR_VAR 0 29
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 3
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: LD_INT 3
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: LD_INT 4
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 4
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: LD_INT 3
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: LD_INT 5
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: LD_INT 5
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: PUSH
65166: LD_INT 4
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 6
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 6
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: LD_INT 5
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65222: LD_ADDR_VAR 0 30
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 3
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 3
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 3
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 4
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 4
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 4
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 5
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 5
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 5
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 6
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 6
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65365: LD_ADDR_VAR 0 31
65369: PUSH
65370: LD_INT 3
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: LD_INT 3
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: LD_INT 3
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 4
65402: PUSH
65403: LD_INT 3
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 4
65412: PUSH
65413: LD_INT 4
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 3
65422: PUSH
65423: LD_INT 4
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 5
65432: PUSH
65433: LD_INT 4
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 5
65442: PUSH
65443: LD_INT 5
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 4
65452: PUSH
65453: LD_INT 5
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 6
65462: PUSH
65463: LD_INT 5
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 6
65472: PUSH
65473: LD_INT 6
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 5
65482: PUSH
65483: LD_INT 6
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65504: LD_ADDR_VAR 0 32
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 3
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 4
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: LD_INT 4
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: LD_INT 5
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: LD_INT 5
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: NEG
65594: PUSH
65595: LD_INT 4
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: LD_INT 6
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: LD_INT 6
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: LD_INT 5
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65647: LD_ADDR_VAR 0 33
65651: PUSH
65652: LD_INT 2
65654: NEG
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: NEG
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 3
65676: NEG
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 4
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 4
65722: NEG
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 5
65733: NEG
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 5
65744: NEG
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 5
65756: NEG
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 6
65767: NEG
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 6
65778: NEG
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65802: LD_ADDR_VAR 0 34
65806: PUSH
65807: LD_INT 2
65809: NEG
65810: PUSH
65811: LD_INT 3
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: LD_INT 2
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 3
65833: NEG
65834: PUSH
65835: LD_INT 3
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 3
65845: NEG
65846: PUSH
65847: LD_INT 4
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 4
65857: NEG
65858: PUSH
65859: LD_INT 3
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 4
65869: NEG
65870: PUSH
65871: LD_INT 4
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 4
65881: NEG
65882: PUSH
65883: LD_INT 5
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 5
65893: NEG
65894: PUSH
65895: LD_INT 4
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 5
65905: NEG
65906: PUSH
65907: LD_INT 5
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 5
65917: NEG
65918: PUSH
65919: LD_INT 6
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 6
65929: NEG
65930: PUSH
65931: LD_INT 5
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 6
65941: NEG
65942: PUSH
65943: LD_INT 6
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65965: LD_ADDR_VAR 0 41
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: LD_INT 2
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66009: LD_ADDR_VAR 0 42
66013: PUSH
66014: LD_INT 2
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66050: LD_ADDR_VAR 0 43
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 2
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 3
66067: PUSH
66068: LD_INT 2
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: LD_INT 3
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66090: LD_ADDR_VAR 0 44
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: LD_INT 2
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 1
66107: PUSH
66108: LD_INT 3
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66131: LD_ADDR_VAR 0 45
66135: PUSH
66136: LD_INT 2
66138: NEG
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 2
66149: NEG
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66175: LD_ADDR_VAR 0 46
66179: PUSH
66180: LD_INT 2
66182: NEG
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: LD_INT 3
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: LD_INT 2
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66221: LD_ADDR_VAR 0 47
66225: PUSH
66226: LD_INT 2
66228: NEG
66229: PUSH
66230: LD_INT 3
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: LD_INT 3
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66254: LD_ADDR_VAR 0 48
66258: PUSH
66259: LD_INT 1
66261: PUSH
66262: LD_INT 2
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66285: LD_ADDR_VAR 0 49
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: LD_INT 2
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66314: LD_ADDR_VAR 0 50
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: LD_INT 3
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66343: LD_ADDR_VAR 0 51
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: LD_INT 2
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 2
66361: NEG
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66374: LD_ADDR_VAR 0 52
66378: PUSH
66379: LD_INT 3
66381: NEG
66382: PUSH
66383: LD_INT 1
66385: NEG
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 3
66393: NEG
66394: PUSH
66395: LD_INT 2
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66407: LD_ADDR_VAR 0 53
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: LD_INT 3
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 3
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: LD_INT 2
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66451: LD_ADDR_VAR 0 54
66455: PUSH
66456: LD_INT 2
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 3
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66492: LD_ADDR_VAR 0 55
66496: PUSH
66497: LD_INT 3
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: LD_INT 3
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 2
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66532: LD_ADDR_VAR 0 56
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 3
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 1
66559: NEG
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: LIST
66572: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66573: LD_ADDR_VAR 0 57
66577: PUSH
66578: LD_INT 2
66580: NEG
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 3
66602: NEG
66603: PUSH
66604: LD_INT 1
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66617: LD_ADDR_VAR 0 58
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: LD_INT 3
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 3
66636: NEG
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 3
66648: NEG
66649: PUSH
66650: LD_INT 3
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66663: LD_ADDR_VAR 0 59
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: LD_INT 2
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66707: LD_ADDR_VAR 0 60
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66748: LD_ADDR_VAR 0 61
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66788: LD_ADDR_VAR 0 62
66792: PUSH
66793: LD_INT 1
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 0
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: NEG
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66829: LD_ADDR_VAR 0 63
66833: PUSH
66834: LD_INT 1
66836: NEG
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 2
66847: NEG
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 2
66858: NEG
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66873: LD_ADDR_VAR 0 64
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: LD_INT 2
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 2
66892: NEG
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 2
66904: NEG
66905: PUSH
66906: LD_INT 2
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: LIST
66918: ST_TO_ADDR
// end ; 2 :
66919: GO 70185
66921: LD_INT 2
66923: DOUBLE
66924: EQUAL
66925: IFTRUE 66929
66927: GO 70184
66929: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66930: LD_ADDR_VAR 0 29
66934: PUSH
66935: LD_INT 4
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 4
66947: PUSH
66948: LD_INT 1
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 5
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 5
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 4
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 3
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 3
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 3
67009: PUSH
67010: LD_INT 2
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 5
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 3
67040: PUSH
67041: LD_INT 2
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 4
67050: PUSH
67051: LD_INT 3
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 4
67060: PUSH
67061: LD_INT 4
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 3
67070: PUSH
67071: LD_INT 4
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: LD_INT 2
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 4
67100: PUSH
67101: LD_INT 2
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: PUSH
67111: LD_INT 4
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 4
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 3
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: LD_INT 5
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: LD_INT 5
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 1
67170: NEG
67171: PUSH
67172: LD_INT 4
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 1
67181: NEG
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 5
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 2
67202: NEG
67203: PUSH
67204: LD_INT 3
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 3
67213: NEG
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 3
67224: NEG
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 2
67236: NEG
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 2
67247: NEG
67248: PUSH
67249: LD_INT 1
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 3
67258: NEG
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 4
67269: NEG
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 4
67280: NEG
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 4
67292: NEG
67293: PUSH
67294: LD_INT 2
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 2
67304: NEG
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 4
67315: NEG
67316: PUSH
67317: LD_INT 4
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 4
67327: NEG
67328: PUSH
67329: LD_INT 5
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: LD_INT 4
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 3
67351: NEG
67352: PUSH
67353: LD_INT 3
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 4
67363: NEG
67364: PUSH
67365: LD_INT 3
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 5
67375: NEG
67376: PUSH
67377: LD_INT 4
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 5
67387: NEG
67388: PUSH
67389: LD_INT 5
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 3
67399: NEG
67400: PUSH
67401: LD_INT 5
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 5
67411: NEG
67412: PUSH
67413: LD_INT 3
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67468: LD_ADDR_VAR 0 30
67472: PUSH
67473: LD_INT 4
67475: PUSH
67476: LD_INT 4
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 4
67485: PUSH
67486: LD_INT 3
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 5
67495: PUSH
67496: LD_INT 4
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 5
67505: PUSH
67506: LD_INT 5
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 4
67515: PUSH
67516: LD_INT 5
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 3
67525: PUSH
67526: LD_INT 4
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 3
67535: PUSH
67536: LD_INT 3
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 5
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: LD_INT 5
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 0
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: LD_INT 2
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: LD_INT 3
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 1
67615: NEG
67616: PUSH
67617: LD_INT 3
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 2
67637: PUSH
67638: LD_INT 4
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 2
67647: NEG
67648: PUSH
67649: LD_INT 2
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 4
67658: NEG
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 4
67669: NEG
67670: PUSH
67671: LD_INT 1
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 3
67681: NEG
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 3
67692: NEG
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 4
67703: NEG
67704: PUSH
67705: LD_INT 1
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 5
67714: NEG
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 5
67725: NEG
67726: PUSH
67727: LD_INT 1
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 5
67737: NEG
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 3
67749: NEG
67750: PUSH
67751: LD_INT 2
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 3
67760: NEG
67761: PUSH
67762: LD_INT 3
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 3
67772: NEG
67773: PUSH
67774: LD_INT 4
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 2
67784: NEG
67785: PUSH
67786: LD_INT 3
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: LD_INT 2
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 3
67808: NEG
67809: PUSH
67810: LD_INT 2
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 4
67820: NEG
67821: PUSH
67822: LD_INT 3
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 4
67832: NEG
67833: PUSH
67834: LD_INT 4
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 2
67844: NEG
67845: PUSH
67846: LD_INT 4
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 4
67856: NEG
67857: PUSH
67858: LD_INT 2
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: LD_INT 4
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: LD_INT 5
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: LD_INT 4
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: LD_INT 3
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: LD_INT 4
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: LD_INT 5
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: PUSH
67948: LD_INT 3
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: LD_INT 5
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68015: LD_ADDR_VAR 0 31
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: LD_INT 4
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 1
68042: PUSH
68043: LD_INT 4
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: LD_INT 5
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 0
68062: PUSH
68063: LD_INT 5
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 1
68072: NEG
68073: PUSH
68074: LD_INT 4
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 1
68083: NEG
68084: PUSH
68085: LD_INT 3
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 2
68094: PUSH
68095: LD_INT 5
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 2
68104: NEG
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 3
68115: NEG
68116: PUSH
68117: LD_INT 0
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 3
68126: NEG
68127: PUSH
68128: LD_INT 1
68130: NEG
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 2
68138: NEG
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 2
68149: NEG
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 3
68160: NEG
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 4
68171: NEG
68172: PUSH
68173: LD_INT 0
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 4
68182: NEG
68183: PUSH
68184: LD_INT 1
68186: NEG
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 4
68194: NEG
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: LD_INT 2
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 4
68217: NEG
68218: PUSH
68219: LD_INT 4
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 4
68229: NEG
68230: PUSH
68231: LD_INT 5
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 3
68241: NEG
68242: PUSH
68243: LD_INT 4
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 3
68253: NEG
68254: PUSH
68255: LD_INT 3
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 4
68265: NEG
68266: PUSH
68267: LD_INT 3
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 5
68277: NEG
68278: PUSH
68279: LD_INT 4
68281: NEG
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 5
68289: NEG
68290: PUSH
68291: LD_INT 5
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 3
68301: NEG
68302: PUSH
68303: LD_INT 5
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 5
68313: NEG
68314: PUSH
68315: LD_INT 3
68317: NEG
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: LD_INT 3
68328: NEG
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: LD_INT 4
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: LD_INT 3
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 1
68358: PUSH
68359: LD_INT 2
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 0
68369: PUSH
68370: LD_INT 2
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 1
68380: NEG
68381: PUSH
68382: LD_INT 3
68384: NEG
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: LD_INT 4
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 2
68404: PUSH
68405: LD_INT 2
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: LD_INT 4
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: LD_INT 0
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 4
68437: PUSH
68438: LD_INT 1
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 5
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 5
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: PUSH
68469: LD_INT 1
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 3
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 3
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 5
68510: PUSH
68511: LD_INT 2
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68565: LD_ADDR_VAR 0 32
68569: PUSH
68570: LD_INT 4
68572: NEG
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 4
68583: NEG
68584: PUSH
68585: LD_INT 1
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 3
68595: NEG
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 3
68606: NEG
68607: PUSH
68608: LD_INT 1
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 4
68617: NEG
68618: PUSH
68619: LD_INT 1
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 5
68628: NEG
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 5
68639: NEG
68640: PUSH
68641: LD_INT 1
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 5
68651: NEG
68652: PUSH
68653: LD_INT 2
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 3
68663: NEG
68664: PUSH
68665: LD_INT 2
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 3
68674: NEG
68675: PUSH
68676: LD_INT 3
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 3
68686: NEG
68687: PUSH
68688: LD_INT 4
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 2
68698: NEG
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 2
68710: NEG
68711: PUSH
68712: LD_INT 2
68714: NEG
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 3
68722: NEG
68723: PUSH
68724: LD_INT 2
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 4
68734: NEG
68735: PUSH
68736: LD_INT 3
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 4
68746: NEG
68747: PUSH
68748: LD_INT 4
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 2
68758: NEG
68759: PUSH
68760: LD_INT 4
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 4
68770: NEG
68771: PUSH
68772: LD_INT 2
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 4
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: LD_INT 5
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 1
68804: PUSH
68805: LD_INT 4
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 1
68815: PUSH
68816: LD_INT 3
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: LD_INT 3
68829: NEG
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 1
68837: NEG
68838: PUSH
68839: LD_INT 4
68841: NEG
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: LD_INT 5
68853: NEG
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 2
68861: PUSH
68862: LD_INT 3
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 2
68872: NEG
68873: PUSH
68874: LD_INT 5
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 3
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 4
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 4
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 3
68925: PUSH
68926: LD_INT 1
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 2
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 4
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 4
68977: PUSH
68978: LD_INT 4
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 4
68987: PUSH
68988: LD_INT 3
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 5
68997: PUSH
68998: LD_INT 4
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 5
69007: PUSH
69008: LD_INT 5
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 4
69017: PUSH
69018: LD_INT 5
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 3
69027: PUSH
69028: LD_INT 4
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 3
69037: PUSH
69038: LD_INT 3
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 5
69047: PUSH
69048: LD_INT 3
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 3
69057: PUSH
69058: LD_INT 5
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69112: LD_ADDR_VAR 0 33
69116: PUSH
69117: LD_INT 4
69119: NEG
69120: PUSH
69121: LD_INT 4
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 4
69131: NEG
69132: PUSH
69133: LD_INT 5
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: LD_INT 4
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 3
69155: NEG
69156: PUSH
69157: LD_INT 3
69159: NEG
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 4
69167: NEG
69168: PUSH
69169: LD_INT 3
69171: NEG
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 5
69179: NEG
69180: PUSH
69181: LD_INT 4
69183: NEG
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 5
69191: NEG
69192: PUSH
69193: LD_INT 5
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 3
69203: NEG
69204: PUSH
69205: LD_INT 5
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 5
69215: NEG
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: LD_INT 3
69230: NEG
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: LD_INT 4
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 1
69249: PUSH
69250: LD_INT 3
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 1
69260: PUSH
69261: LD_INT 2
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: LD_INT 2
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 1
69282: NEG
69283: PUSH
69284: LD_INT 3
69286: NEG
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: PUSH
69296: LD_INT 4
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 2
69306: PUSH
69307: LD_INT 2
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 2
69317: NEG
69318: PUSH
69319: LD_INT 4
69321: NEG
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 4
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 4
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 5
69350: PUSH
69351: LD_INT 0
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 5
69360: PUSH
69361: LD_INT 1
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 4
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 3
69380: PUSH
69381: LD_INT 0
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: LD_INT 1
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 3
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 5
69412: PUSH
69413: LD_INT 2
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 3
69422: PUSH
69423: LD_INT 3
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 3
69432: PUSH
69433: LD_INT 2
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 4
69442: PUSH
69443: LD_INT 3
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 4
69452: PUSH
69453: LD_INT 4
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 3
69462: PUSH
69463: LD_INT 4
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 2
69472: PUSH
69473: LD_INT 3
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 2
69482: PUSH
69483: LD_INT 2
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 4
69492: PUSH
69493: LD_INT 2
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 2
69502: PUSH
69503: LD_INT 4
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: LD_INT 4
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 3
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 1
69532: PUSH
69533: LD_INT 4
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 1
69542: PUSH
69543: LD_INT 5
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: LD_INT 5
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 1
69562: NEG
69563: PUSH
69564: LD_INT 4
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 3
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 2
69584: PUSH
69585: LD_INT 5
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 2
69594: NEG
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69650: LD_ADDR_VAR 0 34
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: LD_INT 4
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: LD_INT 5
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: LD_INT 4
69682: NEG
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 1
69690: PUSH
69691: LD_INT 3
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 0
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: NEG
69713: PUSH
69714: LD_INT 4
69716: NEG
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: PUSH
69726: LD_INT 5
69728: NEG
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 2
69736: PUSH
69737: LD_INT 3
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: LD_INT 5
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 3
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 3
69769: PUSH
69770: LD_INT 1
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 4
69780: PUSH
69781: LD_INT 0
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 3
69800: PUSH
69801: LD_INT 1
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 2
69810: PUSH
69811: LD_INT 0
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 2
69820: PUSH
69821: LD_INT 1
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 2
69831: PUSH
69832: LD_INT 2
69834: NEG
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 4
69842: PUSH
69843: LD_INT 2
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 4
69852: PUSH
69853: LD_INT 4
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 4
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 5
69872: PUSH
69873: LD_INT 4
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 5
69882: PUSH
69883: LD_INT 5
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 4
69892: PUSH
69893: LD_INT 5
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: LD_INT 4
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: LD_INT 3
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 5
69922: PUSH
69923: LD_INT 3
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 3
69932: PUSH
69933: LD_INT 5
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: LD_INT 3
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: LD_INT 2
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 1
69962: PUSH
69963: LD_INT 3
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 1
69972: PUSH
69973: LD_INT 4
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 0
69982: PUSH
69983: LD_INT 4
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: LD_INT 3
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 1
70003: NEG
70004: PUSH
70005: LD_INT 2
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 2
70014: PUSH
70015: LD_INT 4
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 2
70024: NEG
70025: PUSH
70026: LD_INT 2
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 4
70035: NEG
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 4
70046: NEG
70047: PUSH
70048: LD_INT 1
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 3
70058: NEG
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 3
70069: NEG
70070: PUSH
70071: LD_INT 1
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 4
70080: NEG
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 5
70091: NEG
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 5
70102: NEG
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 5
70114: NEG
70115: PUSH
70116: LD_INT 2
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 3
70126: NEG
70127: PUSH
70128: LD_INT 2
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: ST_TO_ADDR
// end ; end ;
70182: GO 70185
70184: POP
// case btype of b_depot , b_warehouse :
70185: LD_VAR 0 1
70189: PUSH
70190: LD_INT 0
70192: DOUBLE
70193: EQUAL
70194: IFTRUE 70204
70196: LD_INT 1
70198: DOUBLE
70199: EQUAL
70200: IFTRUE 70204
70202: GO 70405
70204: POP
// case nation of nation_american :
70205: LD_VAR 0 5
70209: PUSH
70210: LD_INT 1
70212: DOUBLE
70213: EQUAL
70214: IFTRUE 70218
70216: GO 70274
70218: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70219: LD_ADDR_VAR 0 9
70223: PUSH
70224: LD_VAR 0 11
70228: PUSH
70229: LD_VAR 0 12
70233: PUSH
70234: LD_VAR 0 13
70238: PUSH
70239: LD_VAR 0 14
70243: PUSH
70244: LD_VAR 0 15
70248: PUSH
70249: LD_VAR 0 16
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: PUSH
70262: LD_VAR 0 4
70266: PUSH
70267: LD_INT 1
70269: PLUS
70270: ARRAY
70271: ST_TO_ADDR
70272: GO 70403
70274: LD_INT 2
70276: DOUBLE
70277: EQUAL
70278: IFTRUE 70282
70280: GO 70338
70282: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70283: LD_ADDR_VAR 0 9
70287: PUSH
70288: LD_VAR 0 17
70292: PUSH
70293: LD_VAR 0 18
70297: PUSH
70298: LD_VAR 0 19
70302: PUSH
70303: LD_VAR 0 20
70307: PUSH
70308: LD_VAR 0 21
70312: PUSH
70313: LD_VAR 0 22
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: PUSH
70326: LD_VAR 0 4
70330: PUSH
70331: LD_INT 1
70333: PLUS
70334: ARRAY
70335: ST_TO_ADDR
70336: GO 70403
70338: LD_INT 3
70340: DOUBLE
70341: EQUAL
70342: IFTRUE 70346
70344: GO 70402
70346: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70347: LD_ADDR_VAR 0 9
70351: PUSH
70352: LD_VAR 0 23
70356: PUSH
70357: LD_VAR 0 24
70361: PUSH
70362: LD_VAR 0 25
70366: PUSH
70367: LD_VAR 0 26
70371: PUSH
70372: LD_VAR 0 27
70376: PUSH
70377: LD_VAR 0 28
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: PUSH
70390: LD_VAR 0 4
70394: PUSH
70395: LD_INT 1
70397: PLUS
70398: ARRAY
70399: ST_TO_ADDR
70400: GO 70403
70402: POP
70403: GO 70958
70405: LD_INT 2
70407: DOUBLE
70408: EQUAL
70409: IFTRUE 70419
70411: LD_INT 3
70413: DOUBLE
70414: EQUAL
70415: IFTRUE 70419
70417: GO 70475
70419: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70420: LD_ADDR_VAR 0 9
70424: PUSH
70425: LD_VAR 0 29
70429: PUSH
70430: LD_VAR 0 30
70434: PUSH
70435: LD_VAR 0 31
70439: PUSH
70440: LD_VAR 0 32
70444: PUSH
70445: LD_VAR 0 33
70449: PUSH
70450: LD_VAR 0 34
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: PUSH
70463: LD_VAR 0 4
70467: PUSH
70468: LD_INT 1
70470: PLUS
70471: ARRAY
70472: ST_TO_ADDR
70473: GO 70958
70475: LD_INT 16
70477: DOUBLE
70478: EQUAL
70479: IFTRUE 70537
70481: LD_INT 17
70483: DOUBLE
70484: EQUAL
70485: IFTRUE 70537
70487: LD_INT 18
70489: DOUBLE
70490: EQUAL
70491: IFTRUE 70537
70493: LD_INT 19
70495: DOUBLE
70496: EQUAL
70497: IFTRUE 70537
70499: LD_INT 22
70501: DOUBLE
70502: EQUAL
70503: IFTRUE 70537
70505: LD_INT 20
70507: DOUBLE
70508: EQUAL
70509: IFTRUE 70537
70511: LD_INT 21
70513: DOUBLE
70514: EQUAL
70515: IFTRUE 70537
70517: LD_INT 23
70519: DOUBLE
70520: EQUAL
70521: IFTRUE 70537
70523: LD_INT 24
70525: DOUBLE
70526: EQUAL
70527: IFTRUE 70537
70529: LD_INT 25
70531: DOUBLE
70532: EQUAL
70533: IFTRUE 70537
70535: GO 70593
70537: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70538: LD_ADDR_VAR 0 9
70542: PUSH
70543: LD_VAR 0 35
70547: PUSH
70548: LD_VAR 0 36
70552: PUSH
70553: LD_VAR 0 37
70557: PUSH
70558: LD_VAR 0 38
70562: PUSH
70563: LD_VAR 0 39
70567: PUSH
70568: LD_VAR 0 40
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: PUSH
70581: LD_VAR 0 4
70585: PUSH
70586: LD_INT 1
70588: PLUS
70589: ARRAY
70590: ST_TO_ADDR
70591: GO 70958
70593: LD_INT 6
70595: DOUBLE
70596: EQUAL
70597: IFTRUE 70649
70599: LD_INT 7
70601: DOUBLE
70602: EQUAL
70603: IFTRUE 70649
70605: LD_INT 8
70607: DOUBLE
70608: EQUAL
70609: IFTRUE 70649
70611: LD_INT 13
70613: DOUBLE
70614: EQUAL
70615: IFTRUE 70649
70617: LD_INT 12
70619: DOUBLE
70620: EQUAL
70621: IFTRUE 70649
70623: LD_INT 15
70625: DOUBLE
70626: EQUAL
70627: IFTRUE 70649
70629: LD_INT 11
70631: DOUBLE
70632: EQUAL
70633: IFTRUE 70649
70635: LD_INT 14
70637: DOUBLE
70638: EQUAL
70639: IFTRUE 70649
70641: LD_INT 10
70643: DOUBLE
70644: EQUAL
70645: IFTRUE 70649
70647: GO 70705
70649: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70650: LD_ADDR_VAR 0 9
70654: PUSH
70655: LD_VAR 0 41
70659: PUSH
70660: LD_VAR 0 42
70664: PUSH
70665: LD_VAR 0 43
70669: PUSH
70670: LD_VAR 0 44
70674: PUSH
70675: LD_VAR 0 45
70679: PUSH
70680: LD_VAR 0 46
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: PUSH
70693: LD_VAR 0 4
70697: PUSH
70698: LD_INT 1
70700: PLUS
70701: ARRAY
70702: ST_TO_ADDR
70703: GO 70958
70705: LD_INT 36
70707: DOUBLE
70708: EQUAL
70709: IFTRUE 70713
70711: GO 70769
70713: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70714: LD_ADDR_VAR 0 9
70718: PUSH
70719: LD_VAR 0 47
70723: PUSH
70724: LD_VAR 0 48
70728: PUSH
70729: LD_VAR 0 49
70733: PUSH
70734: LD_VAR 0 50
70738: PUSH
70739: LD_VAR 0 51
70743: PUSH
70744: LD_VAR 0 52
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: PUSH
70757: LD_VAR 0 4
70761: PUSH
70762: LD_INT 1
70764: PLUS
70765: ARRAY
70766: ST_TO_ADDR
70767: GO 70958
70769: LD_INT 4
70771: DOUBLE
70772: EQUAL
70773: IFTRUE 70795
70775: LD_INT 5
70777: DOUBLE
70778: EQUAL
70779: IFTRUE 70795
70781: LD_INT 34
70783: DOUBLE
70784: EQUAL
70785: IFTRUE 70795
70787: LD_INT 37
70789: DOUBLE
70790: EQUAL
70791: IFTRUE 70795
70793: GO 70851
70795: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70796: LD_ADDR_VAR 0 9
70800: PUSH
70801: LD_VAR 0 53
70805: PUSH
70806: LD_VAR 0 54
70810: PUSH
70811: LD_VAR 0 55
70815: PUSH
70816: LD_VAR 0 56
70820: PUSH
70821: LD_VAR 0 57
70825: PUSH
70826: LD_VAR 0 58
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: PUSH
70839: LD_VAR 0 4
70843: PUSH
70844: LD_INT 1
70846: PLUS
70847: ARRAY
70848: ST_TO_ADDR
70849: GO 70958
70851: LD_INT 31
70853: DOUBLE
70854: EQUAL
70855: IFTRUE 70901
70857: LD_INT 32
70859: DOUBLE
70860: EQUAL
70861: IFTRUE 70901
70863: LD_INT 33
70865: DOUBLE
70866: EQUAL
70867: IFTRUE 70901
70869: LD_INT 27
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70901
70875: LD_INT 26
70877: DOUBLE
70878: EQUAL
70879: IFTRUE 70901
70881: LD_INT 28
70883: DOUBLE
70884: EQUAL
70885: IFTRUE 70901
70887: LD_INT 29
70889: DOUBLE
70890: EQUAL
70891: IFTRUE 70901
70893: LD_INT 30
70895: DOUBLE
70896: EQUAL
70897: IFTRUE 70901
70899: GO 70957
70901: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70902: LD_ADDR_VAR 0 9
70906: PUSH
70907: LD_VAR 0 59
70911: PUSH
70912: LD_VAR 0 60
70916: PUSH
70917: LD_VAR 0 61
70921: PUSH
70922: LD_VAR 0 62
70926: PUSH
70927: LD_VAR 0 63
70931: PUSH
70932: LD_VAR 0 64
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: PUSH
70945: LD_VAR 0 4
70949: PUSH
70950: LD_INT 1
70952: PLUS
70953: ARRAY
70954: ST_TO_ADDR
70955: GO 70958
70957: POP
// temp_list2 = [ ] ;
70958: LD_ADDR_VAR 0 10
70962: PUSH
70963: EMPTY
70964: ST_TO_ADDR
// for i in temp_list do
70965: LD_ADDR_VAR 0 8
70969: PUSH
70970: LD_VAR 0 9
70974: PUSH
70975: FOR_IN
70976: IFFALSE 71028
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70978: LD_ADDR_VAR 0 10
70982: PUSH
70983: LD_VAR 0 10
70987: PUSH
70988: LD_VAR 0 8
70992: PUSH
70993: LD_INT 1
70995: ARRAY
70996: PUSH
70997: LD_VAR 0 2
71001: PLUS
71002: PUSH
71003: LD_VAR 0 8
71007: PUSH
71008: LD_INT 2
71010: ARRAY
71011: PUSH
71012: LD_VAR 0 3
71016: PLUS
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: EMPTY
71023: LIST
71024: ADD
71025: ST_TO_ADDR
71026: GO 70975
71028: POP
71029: POP
// result = temp_list2 ;
71030: LD_ADDR_VAR 0 7
71034: PUSH
71035: LD_VAR 0 10
71039: ST_TO_ADDR
// end ;
71040: LD_VAR 0 7
71044: RET
// export function EnemyInRange ( unit , dist ) ; begin
71045: LD_INT 0
71047: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71048: LD_ADDR_VAR 0 3
71052: PUSH
71053: LD_VAR 0 1
71057: PPUSH
71058: CALL_OW 255
71062: PPUSH
71063: LD_VAR 0 1
71067: PPUSH
71068: CALL_OW 250
71072: PPUSH
71073: LD_VAR 0 1
71077: PPUSH
71078: CALL_OW 251
71082: PPUSH
71083: LD_VAR 0 2
71087: PPUSH
71088: CALL 44441 0 4
71092: PUSH
71093: LD_INT 4
71095: ARRAY
71096: ST_TO_ADDR
// end ;
71097: LD_VAR 0 3
71101: RET
// export function PlayerSeeMe ( unit ) ; begin
71102: LD_INT 0
71104: PPUSH
// result := See ( your_side , unit ) ;
71105: LD_ADDR_VAR 0 2
71109: PUSH
71110: LD_OWVAR 2
71114: PPUSH
71115: LD_VAR 0 1
71119: PPUSH
71120: CALL_OW 292
71124: ST_TO_ADDR
// end ;
71125: LD_VAR 0 2
71129: RET
// export function ReverseDir ( unit ) ; begin
71130: LD_INT 0
71132: PPUSH
// if not unit then
71133: LD_VAR 0 1
71137: NOT
71138: IFFALSE 71142
// exit ;
71140: GO 71165
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71142: LD_ADDR_VAR 0 2
71146: PUSH
71147: LD_VAR 0 1
71151: PPUSH
71152: CALL_OW 254
71156: PUSH
71157: LD_INT 3
71159: PLUS
71160: PUSH
71161: LD_INT 6
71163: MOD
71164: ST_TO_ADDR
// end ;
71165: LD_VAR 0 2
71169: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71170: LD_INT 0
71172: PPUSH
71173: PPUSH
71174: PPUSH
71175: PPUSH
71176: PPUSH
// if not hexes then
71177: LD_VAR 0 2
71181: NOT
71182: IFFALSE 71186
// exit ;
71184: GO 71334
// dist := 9999 ;
71186: LD_ADDR_VAR 0 5
71190: PUSH
71191: LD_INT 9999
71193: ST_TO_ADDR
// for i = 1 to hexes do
71194: LD_ADDR_VAR 0 4
71198: PUSH
71199: DOUBLE
71200: LD_INT 1
71202: DEC
71203: ST_TO_ADDR
71204: LD_VAR 0 2
71208: PUSH
71209: FOR_TO
71210: IFFALSE 71322
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71212: LD_VAR 0 1
71216: PPUSH
71217: LD_VAR 0 2
71221: PUSH
71222: LD_VAR 0 4
71226: ARRAY
71227: PUSH
71228: LD_INT 1
71230: ARRAY
71231: PPUSH
71232: LD_VAR 0 2
71236: PUSH
71237: LD_VAR 0 4
71241: ARRAY
71242: PUSH
71243: LD_INT 2
71245: ARRAY
71246: PPUSH
71247: CALL_OW 297
71251: PUSH
71252: LD_VAR 0 5
71256: LESS
71257: IFFALSE 71320
// begin hex := hexes [ i ] ;
71259: LD_ADDR_VAR 0 7
71263: PUSH
71264: LD_VAR 0 2
71268: PUSH
71269: LD_VAR 0 4
71273: ARRAY
71274: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71275: LD_ADDR_VAR 0 5
71279: PUSH
71280: LD_VAR 0 1
71284: PPUSH
71285: LD_VAR 0 2
71289: PUSH
71290: LD_VAR 0 4
71294: ARRAY
71295: PUSH
71296: LD_INT 1
71298: ARRAY
71299: PPUSH
71300: LD_VAR 0 2
71304: PUSH
71305: LD_VAR 0 4
71309: ARRAY
71310: PUSH
71311: LD_INT 2
71313: ARRAY
71314: PPUSH
71315: CALL_OW 297
71319: ST_TO_ADDR
// end ; end ;
71320: GO 71209
71322: POP
71323: POP
// result := hex ;
71324: LD_ADDR_VAR 0 3
71328: PUSH
71329: LD_VAR 0 7
71333: ST_TO_ADDR
// end ;
71334: LD_VAR 0 3
71338: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71339: LD_INT 0
71341: PPUSH
71342: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71343: LD_VAR 0 1
71347: NOT
71348: PUSH
71349: LD_VAR 0 1
71353: PUSH
71354: LD_INT 21
71356: PUSH
71357: LD_INT 2
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 23
71366: PUSH
71367: LD_INT 2
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PPUSH
71378: CALL_OW 69
71382: IN
71383: NOT
71384: OR
71385: IFFALSE 71389
// exit ;
71387: GO 71436
// for i = 1 to 3 do
71389: LD_ADDR_VAR 0 3
71393: PUSH
71394: DOUBLE
71395: LD_INT 1
71397: DEC
71398: ST_TO_ADDR
71399: LD_INT 3
71401: PUSH
71402: FOR_TO
71403: IFFALSE 71434
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71405: LD_VAR 0 1
71409: PPUSH
71410: CALL_OW 250
71414: PPUSH
71415: LD_VAR 0 1
71419: PPUSH
71420: CALL_OW 251
71424: PPUSH
71425: LD_INT 1
71427: PPUSH
71428: CALL_OW 453
71432: GO 71402
71434: POP
71435: POP
// end ;
71436: LD_VAR 0 2
71440: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71441: LD_INT 0
71443: PPUSH
71444: PPUSH
71445: PPUSH
71446: PPUSH
71447: PPUSH
71448: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71449: LD_VAR 0 1
71453: NOT
71454: PUSH
71455: LD_VAR 0 2
71459: NOT
71460: OR
71461: PUSH
71462: LD_VAR 0 1
71466: PPUSH
71467: CALL_OW 314
71471: OR
71472: IFFALSE 71476
// exit ;
71474: GO 71917
// x := GetX ( enemy_unit ) ;
71476: LD_ADDR_VAR 0 7
71480: PUSH
71481: LD_VAR 0 2
71485: PPUSH
71486: CALL_OW 250
71490: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71491: LD_ADDR_VAR 0 8
71495: PUSH
71496: LD_VAR 0 2
71500: PPUSH
71501: CALL_OW 251
71505: ST_TO_ADDR
// if not x or not y then
71506: LD_VAR 0 7
71510: NOT
71511: PUSH
71512: LD_VAR 0 8
71516: NOT
71517: OR
71518: IFFALSE 71522
// exit ;
71520: GO 71917
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71522: LD_ADDR_VAR 0 6
71526: PUSH
71527: LD_VAR 0 7
71531: PPUSH
71532: LD_INT 0
71534: PPUSH
71535: LD_INT 4
71537: PPUSH
71538: CALL_OW 272
71542: PUSH
71543: LD_VAR 0 8
71547: PPUSH
71548: LD_INT 0
71550: PPUSH
71551: LD_INT 4
71553: PPUSH
71554: CALL_OW 273
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_VAR 0 7
71567: PPUSH
71568: LD_INT 1
71570: PPUSH
71571: LD_INT 4
71573: PPUSH
71574: CALL_OW 272
71578: PUSH
71579: LD_VAR 0 8
71583: PPUSH
71584: LD_INT 1
71586: PPUSH
71587: LD_INT 4
71589: PPUSH
71590: CALL_OW 273
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_VAR 0 7
71603: PPUSH
71604: LD_INT 2
71606: PPUSH
71607: LD_INT 4
71609: PPUSH
71610: CALL_OW 272
71614: PUSH
71615: LD_VAR 0 8
71619: PPUSH
71620: LD_INT 2
71622: PPUSH
71623: LD_INT 4
71625: PPUSH
71626: CALL_OW 273
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_VAR 0 7
71639: PPUSH
71640: LD_INT 3
71642: PPUSH
71643: LD_INT 4
71645: PPUSH
71646: CALL_OW 272
71650: PUSH
71651: LD_VAR 0 8
71655: PPUSH
71656: LD_INT 3
71658: PPUSH
71659: LD_INT 4
71661: PPUSH
71662: CALL_OW 273
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_VAR 0 7
71675: PPUSH
71676: LD_INT 4
71678: PPUSH
71679: LD_INT 4
71681: PPUSH
71682: CALL_OW 272
71686: PUSH
71687: LD_VAR 0 8
71691: PPUSH
71692: LD_INT 4
71694: PPUSH
71695: LD_INT 4
71697: PPUSH
71698: CALL_OW 273
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_VAR 0 7
71711: PPUSH
71712: LD_INT 5
71714: PPUSH
71715: LD_INT 4
71717: PPUSH
71718: CALL_OW 272
71722: PUSH
71723: LD_VAR 0 8
71727: PPUSH
71728: LD_INT 5
71730: PPUSH
71731: LD_INT 4
71733: PPUSH
71734: CALL_OW 273
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: ST_TO_ADDR
// for i = tmp downto 1 do
71751: LD_ADDR_VAR 0 4
71755: PUSH
71756: DOUBLE
71757: LD_VAR 0 6
71761: INC
71762: ST_TO_ADDR
71763: LD_INT 1
71765: PUSH
71766: FOR_DOWNTO
71767: IFFALSE 71868
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71769: LD_VAR 0 6
71773: PUSH
71774: LD_VAR 0 4
71778: ARRAY
71779: PUSH
71780: LD_INT 1
71782: ARRAY
71783: PPUSH
71784: LD_VAR 0 6
71788: PUSH
71789: LD_VAR 0 4
71793: ARRAY
71794: PUSH
71795: LD_INT 2
71797: ARRAY
71798: PPUSH
71799: CALL_OW 488
71803: NOT
71804: PUSH
71805: LD_VAR 0 6
71809: PUSH
71810: LD_VAR 0 4
71814: ARRAY
71815: PUSH
71816: LD_INT 1
71818: ARRAY
71819: PPUSH
71820: LD_VAR 0 6
71824: PUSH
71825: LD_VAR 0 4
71829: ARRAY
71830: PUSH
71831: LD_INT 2
71833: ARRAY
71834: PPUSH
71835: CALL_OW 428
71839: PUSH
71840: LD_INT 0
71842: NONEQUAL
71843: OR
71844: IFFALSE 71866
// tmp := Delete ( tmp , i ) ;
71846: LD_ADDR_VAR 0 6
71850: PUSH
71851: LD_VAR 0 6
71855: PPUSH
71856: LD_VAR 0 4
71860: PPUSH
71861: CALL_OW 3
71865: ST_TO_ADDR
71866: GO 71766
71868: POP
71869: POP
// j := GetClosestHex ( unit , tmp ) ;
71870: LD_ADDR_VAR 0 5
71874: PUSH
71875: LD_VAR 0 1
71879: PPUSH
71880: LD_VAR 0 6
71884: PPUSH
71885: CALL 71170 0 2
71889: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71890: LD_VAR 0 1
71894: PPUSH
71895: LD_VAR 0 5
71899: PUSH
71900: LD_INT 1
71902: ARRAY
71903: PPUSH
71904: LD_VAR 0 5
71908: PUSH
71909: LD_INT 2
71911: ARRAY
71912: PPUSH
71913: CALL_OW 111
// end ;
71917: LD_VAR 0 3
71921: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71922: LD_INT 0
71924: PPUSH
71925: PPUSH
71926: PPUSH
// uc_side = 0 ;
71927: LD_ADDR_OWVAR 20
71931: PUSH
71932: LD_INT 0
71934: ST_TO_ADDR
// uc_nation = 0 ;
71935: LD_ADDR_OWVAR 21
71939: PUSH
71940: LD_INT 0
71942: ST_TO_ADDR
// InitHc_All ( ) ;
71943: CALL_OW 584
// InitVc ;
71947: CALL_OW 20
// if mastodonts then
71951: LD_VAR 0 6
71955: IFFALSE 72022
// for i = 1 to mastodonts do
71957: LD_ADDR_VAR 0 11
71961: PUSH
71962: DOUBLE
71963: LD_INT 1
71965: DEC
71966: ST_TO_ADDR
71967: LD_VAR 0 6
71971: PUSH
71972: FOR_TO
71973: IFFALSE 72020
// begin vc_chassis := 31 ;
71975: LD_ADDR_OWVAR 37
71979: PUSH
71980: LD_INT 31
71982: ST_TO_ADDR
// vc_control := control_rider ;
71983: LD_ADDR_OWVAR 38
71987: PUSH
71988: LD_INT 4
71990: ST_TO_ADDR
// animal := CreateVehicle ;
71991: LD_ADDR_VAR 0 12
71995: PUSH
71996: CALL_OW 45
72000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72001: LD_VAR 0 12
72005: PPUSH
72006: LD_VAR 0 8
72010: PPUSH
72011: LD_INT 0
72013: PPUSH
72014: CALL 74210 0 3
// end ;
72018: GO 71972
72020: POP
72021: POP
// if horses then
72022: LD_VAR 0 5
72026: IFFALSE 72093
// for i = 1 to horses do
72028: LD_ADDR_VAR 0 11
72032: PUSH
72033: DOUBLE
72034: LD_INT 1
72036: DEC
72037: ST_TO_ADDR
72038: LD_VAR 0 5
72042: PUSH
72043: FOR_TO
72044: IFFALSE 72091
// begin hc_class := 21 ;
72046: LD_ADDR_OWVAR 28
72050: PUSH
72051: LD_INT 21
72053: ST_TO_ADDR
// hc_gallery :=  ;
72054: LD_ADDR_OWVAR 33
72058: PUSH
72059: LD_STRING 
72061: ST_TO_ADDR
// animal := CreateHuman ;
72062: LD_ADDR_VAR 0 12
72066: PUSH
72067: CALL_OW 44
72071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72072: LD_VAR 0 12
72076: PPUSH
72077: LD_VAR 0 8
72081: PPUSH
72082: LD_INT 0
72084: PPUSH
72085: CALL 74210 0 3
// end ;
72089: GO 72043
72091: POP
72092: POP
// if birds then
72093: LD_VAR 0 1
72097: IFFALSE 72164
// for i = 1 to birds do
72099: LD_ADDR_VAR 0 11
72103: PUSH
72104: DOUBLE
72105: LD_INT 1
72107: DEC
72108: ST_TO_ADDR
72109: LD_VAR 0 1
72113: PUSH
72114: FOR_TO
72115: IFFALSE 72162
// begin hc_class = 18 ;
72117: LD_ADDR_OWVAR 28
72121: PUSH
72122: LD_INT 18
72124: ST_TO_ADDR
// hc_gallery =  ;
72125: LD_ADDR_OWVAR 33
72129: PUSH
72130: LD_STRING 
72132: ST_TO_ADDR
// animal := CreateHuman ;
72133: LD_ADDR_VAR 0 12
72137: PUSH
72138: CALL_OW 44
72142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72143: LD_VAR 0 12
72147: PPUSH
72148: LD_VAR 0 8
72152: PPUSH
72153: LD_INT 0
72155: PPUSH
72156: CALL 74210 0 3
// end ;
72160: GO 72114
72162: POP
72163: POP
// if tigers then
72164: LD_VAR 0 2
72168: IFFALSE 72252
// for i = 1 to tigers do
72170: LD_ADDR_VAR 0 11
72174: PUSH
72175: DOUBLE
72176: LD_INT 1
72178: DEC
72179: ST_TO_ADDR
72180: LD_VAR 0 2
72184: PUSH
72185: FOR_TO
72186: IFFALSE 72250
// begin hc_class = class_tiger ;
72188: LD_ADDR_OWVAR 28
72192: PUSH
72193: LD_INT 14
72195: ST_TO_ADDR
// hc_gallery =  ;
72196: LD_ADDR_OWVAR 33
72200: PUSH
72201: LD_STRING 
72203: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72204: LD_ADDR_OWVAR 35
72208: PUSH
72209: LD_INT 7
72211: NEG
72212: PPUSH
72213: LD_INT 7
72215: PPUSH
72216: CALL_OW 12
72220: ST_TO_ADDR
// animal := CreateHuman ;
72221: LD_ADDR_VAR 0 12
72225: PUSH
72226: CALL_OW 44
72230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72231: LD_VAR 0 12
72235: PPUSH
72236: LD_VAR 0 8
72240: PPUSH
72241: LD_INT 0
72243: PPUSH
72244: CALL 74210 0 3
// end ;
72248: GO 72185
72250: POP
72251: POP
// if apemans then
72252: LD_VAR 0 3
72256: IFFALSE 72379
// for i = 1 to apemans do
72258: LD_ADDR_VAR 0 11
72262: PUSH
72263: DOUBLE
72264: LD_INT 1
72266: DEC
72267: ST_TO_ADDR
72268: LD_VAR 0 3
72272: PUSH
72273: FOR_TO
72274: IFFALSE 72377
// begin hc_class = class_apeman ;
72276: LD_ADDR_OWVAR 28
72280: PUSH
72281: LD_INT 12
72283: ST_TO_ADDR
// hc_gallery =  ;
72284: LD_ADDR_OWVAR 33
72288: PUSH
72289: LD_STRING 
72291: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72292: LD_ADDR_OWVAR 35
72296: PUSH
72297: LD_INT 2
72299: NEG
72300: PPUSH
72301: LD_INT 2
72303: PPUSH
72304: CALL_OW 12
72308: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72309: LD_ADDR_OWVAR 31
72313: PUSH
72314: LD_INT 1
72316: PPUSH
72317: LD_INT 3
72319: PPUSH
72320: CALL_OW 12
72324: PUSH
72325: LD_INT 1
72327: PPUSH
72328: LD_INT 3
72330: PPUSH
72331: CALL_OW 12
72335: PUSH
72336: LD_INT 0
72338: PUSH
72339: LD_INT 0
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: ST_TO_ADDR
// animal := CreateHuman ;
72348: LD_ADDR_VAR 0 12
72352: PUSH
72353: CALL_OW 44
72357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72358: LD_VAR 0 12
72362: PPUSH
72363: LD_VAR 0 8
72367: PPUSH
72368: LD_INT 0
72370: PPUSH
72371: CALL 74210 0 3
// end ;
72375: GO 72273
72377: POP
72378: POP
// if enchidnas then
72379: LD_VAR 0 4
72383: IFFALSE 72450
// for i = 1 to enchidnas do
72385: LD_ADDR_VAR 0 11
72389: PUSH
72390: DOUBLE
72391: LD_INT 1
72393: DEC
72394: ST_TO_ADDR
72395: LD_VAR 0 4
72399: PUSH
72400: FOR_TO
72401: IFFALSE 72448
// begin hc_class = 13 ;
72403: LD_ADDR_OWVAR 28
72407: PUSH
72408: LD_INT 13
72410: ST_TO_ADDR
// hc_gallery =  ;
72411: LD_ADDR_OWVAR 33
72415: PUSH
72416: LD_STRING 
72418: ST_TO_ADDR
// animal := CreateHuman ;
72419: LD_ADDR_VAR 0 12
72423: PUSH
72424: CALL_OW 44
72428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72429: LD_VAR 0 12
72433: PPUSH
72434: LD_VAR 0 8
72438: PPUSH
72439: LD_INT 0
72441: PPUSH
72442: CALL 74210 0 3
// end ;
72446: GO 72400
72448: POP
72449: POP
// if fishes then
72450: LD_VAR 0 7
72454: IFFALSE 72521
// for i = 1 to fishes do
72456: LD_ADDR_VAR 0 11
72460: PUSH
72461: DOUBLE
72462: LD_INT 1
72464: DEC
72465: ST_TO_ADDR
72466: LD_VAR 0 7
72470: PUSH
72471: FOR_TO
72472: IFFALSE 72519
// begin hc_class = 20 ;
72474: LD_ADDR_OWVAR 28
72478: PUSH
72479: LD_INT 20
72481: ST_TO_ADDR
// hc_gallery =  ;
72482: LD_ADDR_OWVAR 33
72486: PUSH
72487: LD_STRING 
72489: ST_TO_ADDR
// animal := CreateHuman ;
72490: LD_ADDR_VAR 0 12
72494: PUSH
72495: CALL_OW 44
72499: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72500: LD_VAR 0 12
72504: PPUSH
72505: LD_VAR 0 9
72509: PPUSH
72510: LD_INT 0
72512: PPUSH
72513: CALL 74210 0 3
// end ;
72517: GO 72471
72519: POP
72520: POP
// end ;
72521: LD_VAR 0 10
72525: RET
// export function WantHeal ( sci , unit ) ; begin
72526: LD_INT 0
72528: PPUSH
// if GetTaskList ( sci ) > 0 then
72529: LD_VAR 0 1
72533: PPUSH
72534: CALL_OW 437
72538: PUSH
72539: LD_INT 0
72541: GREATER
72542: IFFALSE 72612
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72544: LD_VAR 0 1
72548: PPUSH
72549: CALL_OW 437
72553: PUSH
72554: LD_INT 1
72556: ARRAY
72557: PUSH
72558: LD_INT 1
72560: ARRAY
72561: PUSH
72562: LD_STRING l
72564: EQUAL
72565: PUSH
72566: LD_VAR 0 1
72570: PPUSH
72571: CALL_OW 437
72575: PUSH
72576: LD_INT 1
72578: ARRAY
72579: PUSH
72580: LD_INT 4
72582: ARRAY
72583: PUSH
72584: LD_VAR 0 2
72588: EQUAL
72589: AND
72590: IFFALSE 72602
// result := true else
72592: LD_ADDR_VAR 0 3
72596: PUSH
72597: LD_INT 1
72599: ST_TO_ADDR
72600: GO 72610
// result := false ;
72602: LD_ADDR_VAR 0 3
72606: PUSH
72607: LD_INT 0
72609: ST_TO_ADDR
// end else
72610: GO 72620
// result := false ;
72612: LD_ADDR_VAR 0 3
72616: PUSH
72617: LD_INT 0
72619: ST_TO_ADDR
// end ;
72620: LD_VAR 0 3
72624: RET
// export function HealTarget ( sci ) ; begin
72625: LD_INT 0
72627: PPUSH
// if not sci then
72628: LD_VAR 0 1
72632: NOT
72633: IFFALSE 72637
// exit ;
72635: GO 72702
// result := 0 ;
72637: LD_ADDR_VAR 0 2
72641: PUSH
72642: LD_INT 0
72644: ST_TO_ADDR
// if GetTaskList ( sci ) then
72645: LD_VAR 0 1
72649: PPUSH
72650: CALL_OW 437
72654: IFFALSE 72702
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72656: LD_VAR 0 1
72660: PPUSH
72661: CALL_OW 437
72665: PUSH
72666: LD_INT 1
72668: ARRAY
72669: PUSH
72670: LD_INT 1
72672: ARRAY
72673: PUSH
72674: LD_STRING l
72676: EQUAL
72677: IFFALSE 72702
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72679: LD_ADDR_VAR 0 2
72683: PUSH
72684: LD_VAR 0 1
72688: PPUSH
72689: CALL_OW 437
72693: PUSH
72694: LD_INT 1
72696: ARRAY
72697: PUSH
72698: LD_INT 4
72700: ARRAY
72701: ST_TO_ADDR
// end ;
72702: LD_VAR 0 2
72706: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72707: LD_INT 0
72709: PPUSH
72710: PPUSH
72711: PPUSH
72712: PPUSH
// if not base_units then
72713: LD_VAR 0 1
72717: NOT
72718: IFFALSE 72722
// exit ;
72720: GO 72809
// result := false ;
72722: LD_ADDR_VAR 0 2
72726: PUSH
72727: LD_INT 0
72729: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72730: LD_ADDR_VAR 0 5
72734: PUSH
72735: LD_VAR 0 1
72739: PPUSH
72740: LD_INT 21
72742: PUSH
72743: LD_INT 3
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PPUSH
72750: CALL_OW 72
72754: ST_TO_ADDR
// if not tmp then
72755: LD_VAR 0 5
72759: NOT
72760: IFFALSE 72764
// exit ;
72762: GO 72809
// for i in tmp do
72764: LD_ADDR_VAR 0 3
72768: PUSH
72769: LD_VAR 0 5
72773: PUSH
72774: FOR_IN
72775: IFFALSE 72807
// begin result := EnemyInRange ( i , 22 ) ;
72777: LD_ADDR_VAR 0 2
72781: PUSH
72782: LD_VAR 0 3
72786: PPUSH
72787: LD_INT 22
72789: PPUSH
72790: CALL 71045 0 2
72794: ST_TO_ADDR
// if result then
72795: LD_VAR 0 2
72799: IFFALSE 72805
// exit ;
72801: POP
72802: POP
72803: GO 72809
// end ;
72805: GO 72774
72807: POP
72808: POP
// end ;
72809: LD_VAR 0 2
72813: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72814: LD_INT 0
72816: PPUSH
72817: PPUSH
// if not units then
72818: LD_VAR 0 1
72822: NOT
72823: IFFALSE 72827
// exit ;
72825: GO 72897
// result := [ ] ;
72827: LD_ADDR_VAR 0 3
72831: PUSH
72832: EMPTY
72833: ST_TO_ADDR
// for i in units do
72834: LD_ADDR_VAR 0 4
72838: PUSH
72839: LD_VAR 0 1
72843: PUSH
72844: FOR_IN
72845: IFFALSE 72895
// if GetTag ( i ) = tag then
72847: LD_VAR 0 4
72851: PPUSH
72852: CALL_OW 110
72856: PUSH
72857: LD_VAR 0 2
72861: EQUAL
72862: IFFALSE 72893
// result := Replace ( result , result + 1 , i ) ;
72864: LD_ADDR_VAR 0 3
72868: PUSH
72869: LD_VAR 0 3
72873: PPUSH
72874: LD_VAR 0 3
72878: PUSH
72879: LD_INT 1
72881: PLUS
72882: PPUSH
72883: LD_VAR 0 4
72887: PPUSH
72888: CALL_OW 1
72892: ST_TO_ADDR
72893: GO 72844
72895: POP
72896: POP
// end ;
72897: LD_VAR 0 3
72901: RET
// export function IsDriver ( un ) ; begin
72902: LD_INT 0
72904: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72905: LD_ADDR_VAR 0 2
72909: PUSH
72910: LD_VAR 0 1
72914: PUSH
72915: LD_INT 55
72917: PUSH
72918: EMPTY
72919: LIST
72920: PPUSH
72921: CALL_OW 69
72925: IN
72926: ST_TO_ADDR
// end ;
72927: LD_VAR 0 2
72931: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72932: LD_INT 0
72934: PPUSH
72935: PPUSH
// list := [ ] ;
72936: LD_ADDR_VAR 0 5
72940: PUSH
72941: EMPTY
72942: ST_TO_ADDR
// case d of 0 :
72943: LD_VAR 0 3
72947: PUSH
72948: LD_INT 0
72950: DOUBLE
72951: EQUAL
72952: IFTRUE 72956
72954: GO 73089
72956: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72957: LD_ADDR_VAR 0 5
72961: PUSH
72962: LD_VAR 0 1
72966: PUSH
72967: LD_INT 4
72969: MINUS
72970: PUSH
72971: LD_VAR 0 2
72975: PUSH
72976: LD_INT 4
72978: MINUS
72979: PUSH
72980: LD_INT 2
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: LIST
72987: PUSH
72988: LD_VAR 0 1
72992: PUSH
72993: LD_INT 3
72995: MINUS
72996: PUSH
72997: LD_VAR 0 2
73001: PUSH
73002: LD_INT 1
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: LIST
73009: PUSH
73010: LD_VAR 0 1
73014: PUSH
73015: LD_INT 4
73017: PLUS
73018: PUSH
73019: LD_VAR 0 2
73023: PUSH
73024: LD_INT 4
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: LIST
73031: PUSH
73032: LD_VAR 0 1
73036: PUSH
73037: LD_INT 3
73039: PLUS
73040: PUSH
73041: LD_VAR 0 2
73045: PUSH
73046: LD_INT 3
73048: PLUS
73049: PUSH
73050: LD_INT 5
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: LIST
73057: PUSH
73058: LD_VAR 0 1
73062: PUSH
73063: LD_VAR 0 2
73067: PUSH
73068: LD_INT 4
73070: PLUS
73071: PUSH
73072: LD_INT 0
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: LIST
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: ST_TO_ADDR
// end ; 1 :
73087: GO 73787
73089: LD_INT 1
73091: DOUBLE
73092: EQUAL
73093: IFTRUE 73097
73095: GO 73230
73097: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73098: LD_ADDR_VAR 0 5
73102: PUSH
73103: LD_VAR 0 1
73107: PUSH
73108: LD_VAR 0 2
73112: PUSH
73113: LD_INT 4
73115: MINUS
73116: PUSH
73117: LD_INT 3
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: LIST
73124: PUSH
73125: LD_VAR 0 1
73129: PUSH
73130: LD_INT 3
73132: MINUS
73133: PUSH
73134: LD_VAR 0 2
73138: PUSH
73139: LD_INT 3
73141: MINUS
73142: PUSH
73143: LD_INT 2
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: LIST
73150: PUSH
73151: LD_VAR 0 1
73155: PUSH
73156: LD_INT 4
73158: MINUS
73159: PUSH
73160: LD_VAR 0 2
73164: PUSH
73165: LD_INT 1
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: LIST
73172: PUSH
73173: LD_VAR 0 1
73177: PUSH
73178: LD_VAR 0 2
73182: PUSH
73183: LD_INT 3
73185: PLUS
73186: PUSH
73187: LD_INT 0
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: LIST
73194: PUSH
73195: LD_VAR 0 1
73199: PUSH
73200: LD_INT 4
73202: PLUS
73203: PUSH
73204: LD_VAR 0 2
73208: PUSH
73209: LD_INT 4
73211: PLUS
73212: PUSH
73213: LD_INT 5
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: ST_TO_ADDR
// end ; 2 :
73228: GO 73787
73230: LD_INT 2
73232: DOUBLE
73233: EQUAL
73234: IFTRUE 73238
73236: GO 73367
73238: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73239: LD_ADDR_VAR 0 5
73243: PUSH
73244: LD_VAR 0 1
73248: PUSH
73249: LD_VAR 0 2
73253: PUSH
73254: LD_INT 3
73256: MINUS
73257: PUSH
73258: LD_INT 3
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: LIST
73265: PUSH
73266: LD_VAR 0 1
73270: PUSH
73271: LD_INT 4
73273: PLUS
73274: PUSH
73275: LD_VAR 0 2
73279: PUSH
73280: LD_INT 4
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: LIST
73287: PUSH
73288: LD_VAR 0 1
73292: PUSH
73293: LD_VAR 0 2
73297: PUSH
73298: LD_INT 4
73300: PLUS
73301: PUSH
73302: LD_INT 0
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: LIST
73309: PUSH
73310: LD_VAR 0 1
73314: PUSH
73315: LD_INT 3
73317: MINUS
73318: PUSH
73319: LD_VAR 0 2
73323: PUSH
73324: LD_INT 1
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: LIST
73331: PUSH
73332: LD_VAR 0 1
73336: PUSH
73337: LD_INT 4
73339: MINUS
73340: PUSH
73341: LD_VAR 0 2
73345: PUSH
73346: LD_INT 4
73348: MINUS
73349: PUSH
73350: LD_INT 2
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: LIST
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: ST_TO_ADDR
// end ; 3 :
73365: GO 73787
73367: LD_INT 3
73369: DOUBLE
73370: EQUAL
73371: IFTRUE 73375
73373: GO 73508
73375: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73376: LD_ADDR_VAR 0 5
73380: PUSH
73381: LD_VAR 0 1
73385: PUSH
73386: LD_INT 3
73388: PLUS
73389: PUSH
73390: LD_VAR 0 2
73394: PUSH
73395: LD_INT 4
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: LIST
73402: PUSH
73403: LD_VAR 0 1
73407: PUSH
73408: LD_INT 4
73410: PLUS
73411: PUSH
73412: LD_VAR 0 2
73416: PUSH
73417: LD_INT 4
73419: PLUS
73420: PUSH
73421: LD_INT 5
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: LIST
73428: PUSH
73429: LD_VAR 0 1
73433: PUSH
73434: LD_INT 4
73436: MINUS
73437: PUSH
73438: LD_VAR 0 2
73442: PUSH
73443: LD_INT 1
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: LIST
73450: PUSH
73451: LD_VAR 0 1
73455: PUSH
73456: LD_VAR 0 2
73460: PUSH
73461: LD_INT 4
73463: MINUS
73464: PUSH
73465: LD_INT 3
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: LIST
73472: PUSH
73473: LD_VAR 0 1
73477: PUSH
73478: LD_INT 3
73480: MINUS
73481: PUSH
73482: LD_VAR 0 2
73486: PUSH
73487: LD_INT 3
73489: MINUS
73490: PUSH
73491: LD_INT 2
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: LIST
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: ST_TO_ADDR
// end ; 4 :
73506: GO 73787
73508: LD_INT 4
73510: DOUBLE
73511: EQUAL
73512: IFTRUE 73516
73514: GO 73649
73516: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73517: LD_ADDR_VAR 0 5
73521: PUSH
73522: LD_VAR 0 1
73526: PUSH
73527: LD_VAR 0 2
73531: PUSH
73532: LD_INT 4
73534: PLUS
73535: PUSH
73536: LD_INT 0
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: LIST
73543: PUSH
73544: LD_VAR 0 1
73548: PUSH
73549: LD_INT 3
73551: PLUS
73552: PUSH
73553: LD_VAR 0 2
73557: PUSH
73558: LD_INT 3
73560: PLUS
73561: PUSH
73562: LD_INT 5
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: LIST
73569: PUSH
73570: LD_VAR 0 1
73574: PUSH
73575: LD_INT 4
73577: PLUS
73578: PUSH
73579: LD_VAR 0 2
73583: PUSH
73584: LD_INT 4
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: LIST
73591: PUSH
73592: LD_VAR 0 1
73596: PUSH
73597: LD_VAR 0 2
73601: PUSH
73602: LD_INT 3
73604: MINUS
73605: PUSH
73606: LD_INT 3
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: LIST
73613: PUSH
73614: LD_VAR 0 1
73618: PUSH
73619: LD_INT 4
73621: MINUS
73622: PUSH
73623: LD_VAR 0 2
73627: PUSH
73628: LD_INT 4
73630: MINUS
73631: PUSH
73632: LD_INT 2
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: LIST
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: ST_TO_ADDR
// end ; 5 :
73647: GO 73787
73649: LD_INT 5
73651: DOUBLE
73652: EQUAL
73653: IFTRUE 73657
73655: GO 73786
73657: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73658: LD_ADDR_VAR 0 5
73662: PUSH
73663: LD_VAR 0 1
73667: PUSH
73668: LD_INT 4
73670: MINUS
73671: PUSH
73672: LD_VAR 0 2
73676: PUSH
73677: LD_INT 1
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: LIST
73684: PUSH
73685: LD_VAR 0 1
73689: PUSH
73690: LD_VAR 0 2
73694: PUSH
73695: LD_INT 4
73697: MINUS
73698: PUSH
73699: LD_INT 3
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: LIST
73706: PUSH
73707: LD_VAR 0 1
73711: PUSH
73712: LD_INT 4
73714: PLUS
73715: PUSH
73716: LD_VAR 0 2
73720: PUSH
73721: LD_INT 4
73723: PLUS
73724: PUSH
73725: LD_INT 5
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: LIST
73732: PUSH
73733: LD_VAR 0 1
73737: PUSH
73738: LD_INT 3
73740: PLUS
73741: PUSH
73742: LD_VAR 0 2
73746: PUSH
73747: LD_INT 4
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: LIST
73754: PUSH
73755: LD_VAR 0 1
73759: PUSH
73760: LD_VAR 0 2
73764: PUSH
73765: LD_INT 3
73767: PLUS
73768: PUSH
73769: LD_INT 0
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: LIST
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: ST_TO_ADDR
// end ; end ;
73784: GO 73787
73786: POP
// result := list ;
73787: LD_ADDR_VAR 0 4
73791: PUSH
73792: LD_VAR 0 5
73796: ST_TO_ADDR
// end ;
73797: LD_VAR 0 4
73801: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73802: LD_INT 0
73804: PPUSH
73805: PPUSH
73806: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73807: LD_VAR 0 1
73811: NOT
73812: PUSH
73813: LD_VAR 0 2
73817: PUSH
73818: LD_INT 1
73820: PUSH
73821: LD_INT 2
73823: PUSH
73824: LD_INT 3
73826: PUSH
73827: LD_INT 4
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: IN
73836: NOT
73837: OR
73838: IFFALSE 73842
// exit ;
73840: GO 73934
// tmp := [ ] ;
73842: LD_ADDR_VAR 0 5
73846: PUSH
73847: EMPTY
73848: ST_TO_ADDR
// for i in units do
73849: LD_ADDR_VAR 0 4
73853: PUSH
73854: LD_VAR 0 1
73858: PUSH
73859: FOR_IN
73860: IFFALSE 73903
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73862: LD_ADDR_VAR 0 5
73866: PUSH
73867: LD_VAR 0 5
73871: PPUSH
73872: LD_VAR 0 5
73876: PUSH
73877: LD_INT 1
73879: PLUS
73880: PPUSH
73881: LD_VAR 0 4
73885: PPUSH
73886: LD_VAR 0 2
73890: PPUSH
73891: CALL_OW 259
73895: PPUSH
73896: CALL_OW 2
73900: ST_TO_ADDR
73901: GO 73859
73903: POP
73904: POP
// if not tmp then
73905: LD_VAR 0 5
73909: NOT
73910: IFFALSE 73914
// exit ;
73912: GO 73934
// result := SortListByListDesc ( units , tmp ) ;
73914: LD_ADDR_VAR 0 3
73918: PUSH
73919: LD_VAR 0 1
73923: PPUSH
73924: LD_VAR 0 5
73928: PPUSH
73929: CALL_OW 77
73933: ST_TO_ADDR
// end ;
73934: LD_VAR 0 3
73938: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73939: LD_INT 0
73941: PPUSH
73942: PPUSH
73943: PPUSH
// result := false ;
73944: LD_ADDR_VAR 0 3
73948: PUSH
73949: LD_INT 0
73951: ST_TO_ADDR
// x := GetX ( building ) ;
73952: LD_ADDR_VAR 0 4
73956: PUSH
73957: LD_VAR 0 2
73961: PPUSH
73962: CALL_OW 250
73966: ST_TO_ADDR
// y := GetY ( building ) ;
73967: LD_ADDR_VAR 0 5
73971: PUSH
73972: LD_VAR 0 2
73976: PPUSH
73977: CALL_OW 251
73981: ST_TO_ADDR
// if not building or not x or not y then
73982: LD_VAR 0 2
73986: NOT
73987: PUSH
73988: LD_VAR 0 4
73992: NOT
73993: OR
73994: PUSH
73995: LD_VAR 0 5
73999: NOT
74000: OR
74001: IFFALSE 74005
// exit ;
74003: GO 74097
// if GetTaskList ( unit ) then
74005: LD_VAR 0 1
74009: PPUSH
74010: CALL_OW 437
74014: IFFALSE 74097
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74016: LD_STRING e
74018: PUSH
74019: LD_VAR 0 1
74023: PPUSH
74024: CALL_OW 437
74028: PUSH
74029: LD_INT 1
74031: ARRAY
74032: PUSH
74033: LD_INT 1
74035: ARRAY
74036: EQUAL
74037: PUSH
74038: LD_VAR 0 4
74042: PUSH
74043: LD_VAR 0 1
74047: PPUSH
74048: CALL_OW 437
74052: PUSH
74053: LD_INT 1
74055: ARRAY
74056: PUSH
74057: LD_INT 2
74059: ARRAY
74060: EQUAL
74061: AND
74062: PUSH
74063: LD_VAR 0 5
74067: PUSH
74068: LD_VAR 0 1
74072: PPUSH
74073: CALL_OW 437
74077: PUSH
74078: LD_INT 1
74080: ARRAY
74081: PUSH
74082: LD_INT 3
74084: ARRAY
74085: EQUAL
74086: AND
74087: IFFALSE 74097
// result := true end ;
74089: LD_ADDR_VAR 0 3
74093: PUSH
74094: LD_INT 1
74096: ST_TO_ADDR
// end ;
74097: LD_VAR 0 3
74101: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74102: LD_INT 0
74104: PPUSH
// result := false ;
74105: LD_ADDR_VAR 0 4
74109: PUSH
74110: LD_INT 0
74112: ST_TO_ADDR
// if GetTaskList ( unit ) then
74113: LD_VAR 0 1
74117: PPUSH
74118: CALL_OW 437
74122: IFFALSE 74205
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74124: LD_STRING M
74126: PUSH
74127: LD_VAR 0 1
74131: PPUSH
74132: CALL_OW 437
74136: PUSH
74137: LD_INT 1
74139: ARRAY
74140: PUSH
74141: LD_INT 1
74143: ARRAY
74144: EQUAL
74145: PUSH
74146: LD_VAR 0 2
74150: PUSH
74151: LD_VAR 0 1
74155: PPUSH
74156: CALL_OW 437
74160: PUSH
74161: LD_INT 1
74163: ARRAY
74164: PUSH
74165: LD_INT 2
74167: ARRAY
74168: EQUAL
74169: AND
74170: PUSH
74171: LD_VAR 0 3
74175: PUSH
74176: LD_VAR 0 1
74180: PPUSH
74181: CALL_OW 437
74185: PUSH
74186: LD_INT 1
74188: ARRAY
74189: PUSH
74190: LD_INT 3
74192: ARRAY
74193: EQUAL
74194: AND
74195: IFFALSE 74205
// result := true ;
74197: LD_ADDR_VAR 0 4
74201: PUSH
74202: LD_INT 1
74204: ST_TO_ADDR
// end ; end ;
74205: LD_VAR 0 4
74209: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74210: LD_INT 0
74212: PPUSH
74213: PPUSH
74214: PPUSH
74215: PPUSH
// if not unit or not area then
74216: LD_VAR 0 1
74220: NOT
74221: PUSH
74222: LD_VAR 0 2
74226: NOT
74227: OR
74228: IFFALSE 74232
// exit ;
74230: GO 74396
// tmp := AreaToList ( area , i ) ;
74232: LD_ADDR_VAR 0 6
74236: PUSH
74237: LD_VAR 0 2
74241: PPUSH
74242: LD_VAR 0 5
74246: PPUSH
74247: CALL_OW 517
74251: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74252: LD_ADDR_VAR 0 5
74256: PUSH
74257: DOUBLE
74258: LD_INT 1
74260: DEC
74261: ST_TO_ADDR
74262: LD_VAR 0 6
74266: PUSH
74267: LD_INT 1
74269: ARRAY
74270: PUSH
74271: FOR_TO
74272: IFFALSE 74394
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74274: LD_ADDR_VAR 0 7
74278: PUSH
74279: LD_VAR 0 6
74283: PUSH
74284: LD_INT 1
74286: ARRAY
74287: PUSH
74288: LD_VAR 0 5
74292: ARRAY
74293: PUSH
74294: LD_VAR 0 6
74298: PUSH
74299: LD_INT 2
74301: ARRAY
74302: PUSH
74303: LD_VAR 0 5
74307: ARRAY
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74313: LD_VAR 0 7
74317: PUSH
74318: LD_INT 1
74320: ARRAY
74321: PPUSH
74322: LD_VAR 0 7
74326: PUSH
74327: LD_INT 2
74329: ARRAY
74330: PPUSH
74331: CALL_OW 428
74335: PUSH
74336: LD_INT 0
74338: EQUAL
74339: IFFALSE 74392
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74341: LD_VAR 0 1
74345: PPUSH
74346: LD_VAR 0 7
74350: PUSH
74351: LD_INT 1
74353: ARRAY
74354: PPUSH
74355: LD_VAR 0 7
74359: PUSH
74360: LD_INT 2
74362: ARRAY
74363: PPUSH
74364: LD_VAR 0 3
74368: PPUSH
74369: CALL_OW 48
// result := IsPlaced ( unit ) ;
74373: LD_ADDR_VAR 0 4
74377: PUSH
74378: LD_VAR 0 1
74382: PPUSH
74383: CALL_OW 305
74387: ST_TO_ADDR
// exit ;
74388: POP
74389: POP
74390: GO 74396
// end ; end ;
74392: GO 74271
74394: POP
74395: POP
// end ;
74396: LD_VAR 0 4
74400: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74401: LD_INT 0
74403: PPUSH
74404: PPUSH
74405: PPUSH
// if not side or side > 8 then
74406: LD_VAR 0 1
74410: NOT
74411: PUSH
74412: LD_VAR 0 1
74416: PUSH
74417: LD_INT 8
74419: GREATER
74420: OR
74421: IFFALSE 74425
// exit ;
74423: GO 74612
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74425: LD_ADDR_VAR 0 4
74429: PUSH
74430: LD_INT 22
74432: PUSH
74433: LD_VAR 0 1
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 21
74444: PUSH
74445: LD_INT 3
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PPUSH
74456: CALL_OW 69
74460: ST_TO_ADDR
// if not tmp then
74461: LD_VAR 0 4
74465: NOT
74466: IFFALSE 74470
// exit ;
74468: GO 74612
// enable_addtolog := true ;
74470: LD_ADDR_OWVAR 81
74474: PUSH
74475: LD_INT 1
74477: ST_TO_ADDR
// AddToLog ( [ ) ;
74478: LD_STRING [
74480: PPUSH
74481: CALL_OW 561
// for i in tmp do
74485: LD_ADDR_VAR 0 3
74489: PUSH
74490: LD_VAR 0 4
74494: PUSH
74495: FOR_IN
74496: IFFALSE 74603
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74498: LD_STRING [
74500: PUSH
74501: LD_VAR 0 3
74505: PPUSH
74506: CALL_OW 266
74510: STR
74511: PUSH
74512: LD_STRING , 
74514: STR
74515: PUSH
74516: LD_VAR 0 3
74520: PPUSH
74521: CALL_OW 250
74525: STR
74526: PUSH
74527: LD_STRING , 
74529: STR
74530: PUSH
74531: LD_VAR 0 3
74535: PPUSH
74536: CALL_OW 251
74540: STR
74541: PUSH
74542: LD_STRING , 
74544: STR
74545: PUSH
74546: LD_VAR 0 3
74550: PPUSH
74551: CALL_OW 254
74555: STR
74556: PUSH
74557: LD_STRING , 
74559: STR
74560: PUSH
74561: LD_VAR 0 3
74565: PPUSH
74566: LD_INT 1
74568: PPUSH
74569: CALL_OW 268
74573: STR
74574: PUSH
74575: LD_STRING , 
74577: STR
74578: PUSH
74579: LD_VAR 0 3
74583: PPUSH
74584: LD_INT 2
74586: PPUSH
74587: CALL_OW 268
74591: STR
74592: PUSH
74593: LD_STRING ],
74595: STR
74596: PPUSH
74597: CALL_OW 561
// end ;
74601: GO 74495
74603: POP
74604: POP
// AddToLog ( ]; ) ;
74605: LD_STRING ];
74607: PPUSH
74608: CALL_OW 561
// end ;
74612: LD_VAR 0 2
74616: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74617: LD_INT 0
74619: PPUSH
74620: PPUSH
74621: PPUSH
74622: PPUSH
74623: PPUSH
// if not area or not rate or not max then
74624: LD_VAR 0 1
74628: NOT
74629: PUSH
74630: LD_VAR 0 2
74634: NOT
74635: OR
74636: PUSH
74637: LD_VAR 0 4
74641: NOT
74642: OR
74643: IFFALSE 74647
// exit ;
74645: GO 74839
// while 1 do
74647: LD_INT 1
74649: IFFALSE 74839
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74651: LD_ADDR_VAR 0 9
74655: PUSH
74656: LD_VAR 0 1
74660: PPUSH
74661: LD_INT 1
74663: PPUSH
74664: CALL_OW 287
74668: PUSH
74669: LD_INT 10
74671: MUL
74672: ST_TO_ADDR
// r := rate / 10 ;
74673: LD_ADDR_VAR 0 7
74677: PUSH
74678: LD_VAR 0 2
74682: PUSH
74683: LD_INT 10
74685: DIVREAL
74686: ST_TO_ADDR
// time := 1 1$00 ;
74687: LD_ADDR_VAR 0 8
74691: PUSH
74692: LD_INT 2100
74694: ST_TO_ADDR
// if amount < min then
74695: LD_VAR 0 9
74699: PUSH
74700: LD_VAR 0 3
74704: LESS
74705: IFFALSE 74723
// r := r * 2 else
74707: LD_ADDR_VAR 0 7
74711: PUSH
74712: LD_VAR 0 7
74716: PUSH
74717: LD_INT 2
74719: MUL
74720: ST_TO_ADDR
74721: GO 74749
// if amount > max then
74723: LD_VAR 0 9
74727: PUSH
74728: LD_VAR 0 4
74732: GREATER
74733: IFFALSE 74749
// r := r / 2 ;
74735: LD_ADDR_VAR 0 7
74739: PUSH
74740: LD_VAR 0 7
74744: PUSH
74745: LD_INT 2
74747: DIVREAL
74748: ST_TO_ADDR
// time := time / r ;
74749: LD_ADDR_VAR 0 8
74753: PUSH
74754: LD_VAR 0 8
74758: PUSH
74759: LD_VAR 0 7
74763: DIVREAL
74764: ST_TO_ADDR
// if time < 0 then
74765: LD_VAR 0 8
74769: PUSH
74770: LD_INT 0
74772: LESS
74773: IFFALSE 74790
// time := time * - 1 ;
74775: LD_ADDR_VAR 0 8
74779: PUSH
74780: LD_VAR 0 8
74784: PUSH
74785: LD_INT 1
74787: NEG
74788: MUL
74789: ST_TO_ADDR
// wait ( time ) ;
74790: LD_VAR 0 8
74794: PPUSH
74795: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74799: LD_INT 35
74801: PPUSH
74802: LD_INT 875
74804: PPUSH
74805: CALL_OW 12
74809: PPUSH
74810: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74814: LD_INT 1
74816: PPUSH
74817: LD_INT 5
74819: PPUSH
74820: CALL_OW 12
74824: PPUSH
74825: LD_VAR 0 1
74829: PPUSH
74830: LD_INT 1
74832: PPUSH
74833: CALL_OW 55
// end ;
74837: GO 74647
// end ;
74839: LD_VAR 0 5
74843: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74844: LD_INT 0
74846: PPUSH
74847: PPUSH
74848: PPUSH
74849: PPUSH
74850: PPUSH
74851: PPUSH
74852: PPUSH
74853: PPUSH
// if not turrets or not factories then
74854: LD_VAR 0 1
74858: NOT
74859: PUSH
74860: LD_VAR 0 2
74864: NOT
74865: OR
74866: IFFALSE 74870
// exit ;
74868: GO 75177
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74870: LD_ADDR_VAR 0 10
74874: PUSH
74875: LD_INT 5
74877: PUSH
74878: LD_INT 6
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: LD_INT 2
74887: PUSH
74888: LD_INT 4
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 3
74897: PUSH
74898: LD_INT 5
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: LIST
74909: PUSH
74910: LD_INT 24
74912: PUSH
74913: LD_INT 25
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: PUSH
74920: LD_INT 23
74922: PUSH
74923: LD_INT 27
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: LD_INT 42
74936: PUSH
74937: LD_INT 43
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: LD_INT 44
74946: PUSH
74947: LD_INT 46
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PUSH
74954: LD_INT 45
74956: PUSH
74957: LD_INT 47
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: LIST
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: LIST
74973: ST_TO_ADDR
// result := [ ] ;
74974: LD_ADDR_VAR 0 3
74978: PUSH
74979: EMPTY
74980: ST_TO_ADDR
// for i in turrets do
74981: LD_ADDR_VAR 0 4
74985: PUSH
74986: LD_VAR 0 1
74990: PUSH
74991: FOR_IN
74992: IFFALSE 75175
// begin nat := GetNation ( i ) ;
74994: LD_ADDR_VAR 0 7
74998: PUSH
74999: LD_VAR 0 4
75003: PPUSH
75004: CALL_OW 248
75008: ST_TO_ADDR
// weapon := 0 ;
75009: LD_ADDR_VAR 0 8
75013: PUSH
75014: LD_INT 0
75016: ST_TO_ADDR
// if not nat then
75017: LD_VAR 0 7
75021: NOT
75022: IFFALSE 75026
// continue ;
75024: GO 74991
// for j in list [ nat ] do
75026: LD_ADDR_VAR 0 5
75030: PUSH
75031: LD_VAR 0 10
75035: PUSH
75036: LD_VAR 0 7
75040: ARRAY
75041: PUSH
75042: FOR_IN
75043: IFFALSE 75084
// if GetBWeapon ( i ) = j [ 1 ] then
75045: LD_VAR 0 4
75049: PPUSH
75050: CALL_OW 269
75054: PUSH
75055: LD_VAR 0 5
75059: PUSH
75060: LD_INT 1
75062: ARRAY
75063: EQUAL
75064: IFFALSE 75082
// begin weapon := j [ 2 ] ;
75066: LD_ADDR_VAR 0 8
75070: PUSH
75071: LD_VAR 0 5
75075: PUSH
75076: LD_INT 2
75078: ARRAY
75079: ST_TO_ADDR
// break ;
75080: GO 75084
// end ;
75082: GO 75042
75084: POP
75085: POP
// if not weapon then
75086: LD_VAR 0 8
75090: NOT
75091: IFFALSE 75095
// continue ;
75093: GO 74991
// for k in factories do
75095: LD_ADDR_VAR 0 6
75099: PUSH
75100: LD_VAR 0 2
75104: PUSH
75105: FOR_IN
75106: IFFALSE 75171
// begin weapons := AvailableWeaponList ( k ) ;
75108: LD_ADDR_VAR 0 9
75112: PUSH
75113: LD_VAR 0 6
75117: PPUSH
75118: CALL_OW 478
75122: ST_TO_ADDR
// if not weapons then
75123: LD_VAR 0 9
75127: NOT
75128: IFFALSE 75132
// continue ;
75130: GO 75105
// if weapon in weapons then
75132: LD_VAR 0 8
75136: PUSH
75137: LD_VAR 0 9
75141: IN
75142: IFFALSE 75169
// begin result := [ i , weapon ] ;
75144: LD_ADDR_VAR 0 3
75148: PUSH
75149: LD_VAR 0 4
75153: PUSH
75154: LD_VAR 0 8
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: ST_TO_ADDR
// exit ;
75163: POP
75164: POP
75165: POP
75166: POP
75167: GO 75177
// end ; end ;
75169: GO 75105
75171: POP
75172: POP
// end ;
75173: GO 74991
75175: POP
75176: POP
// end ;
75177: LD_VAR 0 3
75181: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75182: LD_INT 0
75184: PPUSH
// if not side or side > 8 then
75185: LD_VAR 0 3
75189: NOT
75190: PUSH
75191: LD_VAR 0 3
75195: PUSH
75196: LD_INT 8
75198: GREATER
75199: OR
75200: IFFALSE 75204
// exit ;
75202: GO 75263
// if not range then
75204: LD_VAR 0 4
75208: NOT
75209: IFFALSE 75220
// range := - 12 ;
75211: LD_ADDR_VAR 0 4
75215: PUSH
75216: LD_INT 12
75218: NEG
75219: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75220: LD_VAR 0 1
75224: PPUSH
75225: LD_VAR 0 2
75229: PPUSH
75230: LD_VAR 0 3
75234: PPUSH
75235: LD_VAR 0 4
75239: PPUSH
75240: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75244: LD_VAR 0 1
75248: PPUSH
75249: LD_VAR 0 2
75253: PPUSH
75254: LD_VAR 0 3
75258: PPUSH
75259: CALL_OW 331
// end ;
75263: LD_VAR 0 5
75267: RET
// export function Video ( mode ) ; begin
75268: LD_INT 0
75270: PPUSH
// ingame_video = mode ;
75271: LD_ADDR_OWVAR 52
75275: PUSH
75276: LD_VAR 0 1
75280: ST_TO_ADDR
// interface_hidden = mode ;
75281: LD_ADDR_OWVAR 54
75285: PUSH
75286: LD_VAR 0 1
75290: ST_TO_ADDR
// end ;
75291: LD_VAR 0 2
75295: RET
// export function Join ( array , element ) ; begin
75296: LD_INT 0
75298: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75299: LD_ADDR_VAR 0 3
75303: PUSH
75304: LD_VAR 0 1
75308: PPUSH
75309: LD_VAR 0 1
75313: PUSH
75314: LD_INT 1
75316: PLUS
75317: PPUSH
75318: LD_VAR 0 2
75322: PPUSH
75323: CALL_OW 1
75327: ST_TO_ADDR
// end ;
75328: LD_VAR 0 3
75332: RET
// export function JoinUnion ( array , element ) ; begin
75333: LD_INT 0
75335: PPUSH
// result := array union element ;
75336: LD_ADDR_VAR 0 3
75340: PUSH
75341: LD_VAR 0 1
75345: PUSH
75346: LD_VAR 0 2
75350: UNION
75351: ST_TO_ADDR
// end ;
75352: LD_VAR 0 3
75356: RET
// export function GetBehemoths ( side ) ; begin
75357: LD_INT 0
75359: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75360: LD_ADDR_VAR 0 2
75364: PUSH
75365: LD_INT 22
75367: PUSH
75368: LD_VAR 0 1
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: LD_INT 31
75379: PUSH
75380: LD_INT 25
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: PPUSH
75391: CALL_OW 69
75395: ST_TO_ADDR
// end ;
75396: LD_VAR 0 2
75400: RET
// export function Shuffle ( array ) ; var i , index ; begin
75401: LD_INT 0
75403: PPUSH
75404: PPUSH
75405: PPUSH
// result := [ ] ;
75406: LD_ADDR_VAR 0 2
75410: PUSH
75411: EMPTY
75412: ST_TO_ADDR
// if not array then
75413: LD_VAR 0 1
75417: NOT
75418: IFFALSE 75422
// exit ;
75420: GO 75521
// Randomize ;
75422: CALL_OW 10
// for i = array downto 1 do
75426: LD_ADDR_VAR 0 3
75430: PUSH
75431: DOUBLE
75432: LD_VAR 0 1
75436: INC
75437: ST_TO_ADDR
75438: LD_INT 1
75440: PUSH
75441: FOR_DOWNTO
75442: IFFALSE 75519
// begin index := rand ( 1 , array ) ;
75444: LD_ADDR_VAR 0 4
75448: PUSH
75449: LD_INT 1
75451: PPUSH
75452: LD_VAR 0 1
75456: PPUSH
75457: CALL_OW 12
75461: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75462: LD_ADDR_VAR 0 2
75466: PUSH
75467: LD_VAR 0 2
75471: PPUSH
75472: LD_VAR 0 2
75476: PUSH
75477: LD_INT 1
75479: PLUS
75480: PPUSH
75481: LD_VAR 0 1
75485: PUSH
75486: LD_VAR 0 4
75490: ARRAY
75491: PPUSH
75492: CALL_OW 2
75496: ST_TO_ADDR
// array := Delete ( array , index ) ;
75497: LD_ADDR_VAR 0 1
75501: PUSH
75502: LD_VAR 0 1
75506: PPUSH
75507: LD_VAR 0 4
75511: PPUSH
75512: CALL_OW 3
75516: ST_TO_ADDR
// end ;
75517: GO 75441
75519: POP
75520: POP
// end ;
75521: LD_VAR 0 2
75525: RET
// export function GetBaseMaterials ( base ) ; begin
75526: LD_INT 0
75528: PPUSH
// result := [ 0 , 0 , 0 ] ;
75529: LD_ADDR_VAR 0 2
75533: PUSH
75534: LD_INT 0
75536: PUSH
75537: LD_INT 0
75539: PUSH
75540: LD_INT 0
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: LIST
75547: ST_TO_ADDR
// if not base then
75548: LD_VAR 0 1
75552: NOT
75553: IFFALSE 75557
// exit ;
75555: GO 75606
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75557: LD_ADDR_VAR 0 2
75561: PUSH
75562: LD_VAR 0 1
75566: PPUSH
75567: LD_INT 1
75569: PPUSH
75570: CALL_OW 275
75574: PUSH
75575: LD_VAR 0 1
75579: PPUSH
75580: LD_INT 2
75582: PPUSH
75583: CALL_OW 275
75587: PUSH
75588: LD_VAR 0 1
75592: PPUSH
75593: LD_INT 3
75595: PPUSH
75596: CALL_OW 275
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: LIST
75605: ST_TO_ADDR
// end ;
75606: LD_VAR 0 2
75610: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75611: LD_INT 0
75613: PPUSH
75614: PPUSH
// result := array ;
75615: LD_ADDR_VAR 0 3
75619: PUSH
75620: LD_VAR 0 1
75624: ST_TO_ADDR
// if size > 0 then
75625: LD_VAR 0 2
75629: PUSH
75630: LD_INT 0
75632: GREATER
75633: IFFALSE 75679
// for i := array downto size do
75635: LD_ADDR_VAR 0 4
75639: PUSH
75640: DOUBLE
75641: LD_VAR 0 1
75645: INC
75646: ST_TO_ADDR
75647: LD_VAR 0 2
75651: PUSH
75652: FOR_DOWNTO
75653: IFFALSE 75677
// result := Delete ( result , result ) ;
75655: LD_ADDR_VAR 0 3
75659: PUSH
75660: LD_VAR 0 3
75664: PPUSH
75665: LD_VAR 0 3
75669: PPUSH
75670: CALL_OW 3
75674: ST_TO_ADDR
75675: GO 75652
75677: POP
75678: POP
// end ;
75679: LD_VAR 0 3
75683: RET
// export function ComExit ( unit ) ; var tmp ; begin
75684: LD_INT 0
75686: PPUSH
75687: PPUSH
// if not IsInUnit ( unit ) then
75688: LD_VAR 0 1
75692: PPUSH
75693: CALL_OW 310
75697: NOT
75698: IFFALSE 75702
// exit ;
75700: GO 75762
// tmp := IsInUnit ( unit ) ;
75702: LD_ADDR_VAR 0 3
75706: PUSH
75707: LD_VAR 0 1
75711: PPUSH
75712: CALL_OW 310
75716: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75717: LD_VAR 0 3
75721: PPUSH
75722: CALL_OW 247
75726: PUSH
75727: LD_INT 2
75729: EQUAL
75730: IFFALSE 75743
// ComExitVehicle ( unit ) else
75732: LD_VAR 0 1
75736: PPUSH
75737: CALL_OW 121
75741: GO 75752
// ComExitBuilding ( unit ) ;
75743: LD_VAR 0 1
75747: PPUSH
75748: CALL_OW 122
// result := tmp ;
75752: LD_ADDR_VAR 0 2
75756: PUSH
75757: LD_VAR 0 3
75761: ST_TO_ADDR
// end ;
75762: LD_VAR 0 2
75766: RET
// export function ComExitAll ( units ) ; var i ; begin
75767: LD_INT 0
75769: PPUSH
75770: PPUSH
// if not units then
75771: LD_VAR 0 1
75775: NOT
75776: IFFALSE 75780
// exit ;
75778: GO 75806
// for i in units do
75780: LD_ADDR_VAR 0 3
75784: PUSH
75785: LD_VAR 0 1
75789: PUSH
75790: FOR_IN
75791: IFFALSE 75804
// ComExit ( i ) ;
75793: LD_VAR 0 3
75797: PPUSH
75798: CALL 75684 0 1
75802: GO 75790
75804: POP
75805: POP
// end ;
75806: LD_VAR 0 2
75810: RET
// export function ResetHc ; begin
75811: LD_INT 0
75813: PPUSH
// InitHc ;
75814: CALL_OW 19
// hc_importance := 0 ;
75818: LD_ADDR_OWVAR 32
75822: PUSH
75823: LD_INT 0
75825: ST_TO_ADDR
// end ;
75826: LD_VAR 0 1
75830: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75831: LD_INT 0
75833: PPUSH
75834: PPUSH
75835: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75836: LD_ADDR_VAR 0 6
75840: PUSH
75841: LD_VAR 0 1
75845: PUSH
75846: LD_VAR 0 3
75850: PLUS
75851: PUSH
75852: LD_INT 2
75854: DIV
75855: ST_TO_ADDR
// if _x < 0 then
75856: LD_VAR 0 6
75860: PUSH
75861: LD_INT 0
75863: LESS
75864: IFFALSE 75881
// _x := _x * - 1 ;
75866: LD_ADDR_VAR 0 6
75870: PUSH
75871: LD_VAR 0 6
75875: PUSH
75876: LD_INT 1
75878: NEG
75879: MUL
75880: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75881: LD_ADDR_VAR 0 7
75885: PUSH
75886: LD_VAR 0 2
75890: PUSH
75891: LD_VAR 0 4
75895: PLUS
75896: PUSH
75897: LD_INT 2
75899: DIV
75900: ST_TO_ADDR
// if _y < 0 then
75901: LD_VAR 0 7
75905: PUSH
75906: LD_INT 0
75908: LESS
75909: IFFALSE 75926
// _y := _y * - 1 ;
75911: LD_ADDR_VAR 0 7
75915: PUSH
75916: LD_VAR 0 7
75920: PUSH
75921: LD_INT 1
75923: NEG
75924: MUL
75925: ST_TO_ADDR
// result := [ _x , _y ] ;
75926: LD_ADDR_VAR 0 5
75930: PUSH
75931: LD_VAR 0 6
75935: PUSH
75936: LD_VAR 0 7
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: ST_TO_ADDR
// end ;
75945: LD_VAR 0 5
75949: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75950: LD_INT 0
75952: PPUSH
75953: PPUSH
75954: PPUSH
75955: PPUSH
// task := GetTaskList ( unit ) ;
75956: LD_ADDR_VAR 0 7
75960: PUSH
75961: LD_VAR 0 1
75965: PPUSH
75966: CALL_OW 437
75970: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75971: LD_VAR 0 7
75975: NOT
75976: PUSH
75977: LD_VAR 0 1
75981: PPUSH
75982: LD_VAR 0 2
75986: PPUSH
75987: CALL_OW 308
75991: NOT
75992: AND
75993: IFFALSE 75997
// exit ;
75995: GO 76115
// if IsInArea ( unit , area ) then
75997: LD_VAR 0 1
76001: PPUSH
76002: LD_VAR 0 2
76006: PPUSH
76007: CALL_OW 308
76011: IFFALSE 76029
// begin ComMoveToArea ( unit , goAway ) ;
76013: LD_VAR 0 1
76017: PPUSH
76018: LD_VAR 0 3
76022: PPUSH
76023: CALL_OW 113
// exit ;
76027: GO 76115
// end ; if task [ 1 ] [ 1 ] <> M then
76029: LD_VAR 0 7
76033: PUSH
76034: LD_INT 1
76036: ARRAY
76037: PUSH
76038: LD_INT 1
76040: ARRAY
76041: PUSH
76042: LD_STRING M
76044: NONEQUAL
76045: IFFALSE 76049
// exit ;
76047: GO 76115
// x := task [ 1 ] [ 2 ] ;
76049: LD_ADDR_VAR 0 5
76053: PUSH
76054: LD_VAR 0 7
76058: PUSH
76059: LD_INT 1
76061: ARRAY
76062: PUSH
76063: LD_INT 2
76065: ARRAY
76066: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76067: LD_ADDR_VAR 0 6
76071: PUSH
76072: LD_VAR 0 7
76076: PUSH
76077: LD_INT 1
76079: ARRAY
76080: PUSH
76081: LD_INT 3
76083: ARRAY
76084: ST_TO_ADDR
// if InArea ( x , y , area ) then
76085: LD_VAR 0 5
76089: PPUSH
76090: LD_VAR 0 6
76094: PPUSH
76095: LD_VAR 0 2
76099: PPUSH
76100: CALL_OW 309
76104: IFFALSE 76115
// ComStop ( unit ) ;
76106: LD_VAR 0 1
76110: PPUSH
76111: CALL_OW 141
// end ;
76115: LD_VAR 0 4
76119: RET
// export function Abs ( value ) ; begin
76120: LD_INT 0
76122: PPUSH
// result := value ;
76123: LD_ADDR_VAR 0 2
76127: PUSH
76128: LD_VAR 0 1
76132: ST_TO_ADDR
// if value < 0 then
76133: LD_VAR 0 1
76137: PUSH
76138: LD_INT 0
76140: LESS
76141: IFFALSE 76158
// result := value * - 1 ;
76143: LD_ADDR_VAR 0 2
76147: PUSH
76148: LD_VAR 0 1
76152: PUSH
76153: LD_INT 1
76155: NEG
76156: MUL
76157: ST_TO_ADDR
// end ;
76158: LD_VAR 0 2
76162: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76163: LD_INT 0
76165: PPUSH
76166: PPUSH
76167: PPUSH
76168: PPUSH
76169: PPUSH
76170: PPUSH
76171: PPUSH
76172: PPUSH
// if not unit or not building then
76173: LD_VAR 0 1
76177: NOT
76178: PUSH
76179: LD_VAR 0 2
76183: NOT
76184: OR
76185: IFFALSE 76189
// exit ;
76187: GO 76415
// x := GetX ( building ) ;
76189: LD_ADDR_VAR 0 4
76193: PUSH
76194: LD_VAR 0 2
76198: PPUSH
76199: CALL_OW 250
76203: ST_TO_ADDR
// y := GetY ( building ) ;
76204: LD_ADDR_VAR 0 6
76208: PUSH
76209: LD_VAR 0 2
76213: PPUSH
76214: CALL_OW 251
76218: ST_TO_ADDR
// d := GetDir ( building ) ;
76219: LD_ADDR_VAR 0 8
76223: PUSH
76224: LD_VAR 0 2
76228: PPUSH
76229: CALL_OW 254
76233: ST_TO_ADDR
// r := 4 ;
76234: LD_ADDR_VAR 0 9
76238: PUSH
76239: LD_INT 4
76241: ST_TO_ADDR
// for i := 1 to 5 do
76242: LD_ADDR_VAR 0 10
76246: PUSH
76247: DOUBLE
76248: LD_INT 1
76250: DEC
76251: ST_TO_ADDR
76252: LD_INT 5
76254: PUSH
76255: FOR_TO
76256: IFFALSE 76413
// begin _x := ShiftX ( x , d , r + i ) ;
76258: LD_ADDR_VAR 0 5
76262: PUSH
76263: LD_VAR 0 4
76267: PPUSH
76268: LD_VAR 0 8
76272: PPUSH
76273: LD_VAR 0 9
76277: PUSH
76278: LD_VAR 0 10
76282: PLUS
76283: PPUSH
76284: CALL_OW 272
76288: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76289: LD_ADDR_VAR 0 7
76293: PUSH
76294: LD_VAR 0 6
76298: PPUSH
76299: LD_VAR 0 8
76303: PPUSH
76304: LD_VAR 0 9
76308: PUSH
76309: LD_VAR 0 10
76313: PLUS
76314: PPUSH
76315: CALL_OW 273
76319: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76320: LD_VAR 0 5
76324: PPUSH
76325: LD_VAR 0 7
76329: PPUSH
76330: CALL_OW 488
76334: PUSH
76335: LD_VAR 0 5
76339: PPUSH
76340: LD_VAR 0 7
76344: PPUSH
76345: CALL_OW 428
76349: PPUSH
76350: CALL_OW 247
76354: PUSH
76355: LD_INT 3
76357: PUSH
76358: LD_INT 2
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: IN
76365: NOT
76366: AND
76367: IFFALSE 76411
// begin ComMoveXY ( unit , _x , _y ) ;
76369: LD_VAR 0 1
76373: PPUSH
76374: LD_VAR 0 5
76378: PPUSH
76379: LD_VAR 0 7
76383: PPUSH
76384: CALL_OW 111
// result := [ _x , _y ] ;
76388: LD_ADDR_VAR 0 3
76392: PUSH
76393: LD_VAR 0 5
76397: PUSH
76398: LD_VAR 0 7
76402: PUSH
76403: EMPTY
76404: LIST
76405: LIST
76406: ST_TO_ADDR
// exit ;
76407: POP
76408: POP
76409: GO 76415
// end ; end ;
76411: GO 76255
76413: POP
76414: POP
// end ;
76415: LD_VAR 0 3
76419: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76420: LD_INT 0
76422: PPUSH
76423: PPUSH
76424: PPUSH
// result := 0 ;
76425: LD_ADDR_VAR 0 3
76429: PUSH
76430: LD_INT 0
76432: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76433: LD_VAR 0 1
76437: PUSH
76438: LD_INT 0
76440: LESS
76441: PUSH
76442: LD_VAR 0 1
76446: PUSH
76447: LD_INT 8
76449: GREATER
76450: OR
76451: PUSH
76452: LD_VAR 0 2
76456: PUSH
76457: LD_INT 0
76459: LESS
76460: OR
76461: PUSH
76462: LD_VAR 0 2
76466: PUSH
76467: LD_INT 8
76469: GREATER
76470: OR
76471: IFFALSE 76475
// exit ;
76473: GO 76550
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76475: LD_ADDR_VAR 0 4
76479: PUSH
76480: LD_INT 22
76482: PUSH
76483: LD_VAR 0 2
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PPUSH
76492: CALL_OW 69
76496: PUSH
76497: FOR_IN
76498: IFFALSE 76548
// begin un := UnitShoot ( i ) ;
76500: LD_ADDR_VAR 0 5
76504: PUSH
76505: LD_VAR 0 4
76509: PPUSH
76510: CALL_OW 504
76514: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76515: LD_VAR 0 5
76519: PPUSH
76520: CALL_OW 255
76524: PUSH
76525: LD_VAR 0 1
76529: EQUAL
76530: IFFALSE 76546
// begin result := un ;
76532: LD_ADDR_VAR 0 3
76536: PUSH
76537: LD_VAR 0 5
76541: ST_TO_ADDR
// exit ;
76542: POP
76543: POP
76544: GO 76550
// end ; end ;
76546: GO 76497
76548: POP
76549: POP
// end ;
76550: LD_VAR 0 3
76554: RET
// export function GetCargoBay ( units ) ; begin
76555: LD_INT 0
76557: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76558: LD_ADDR_VAR 0 2
76562: PUSH
76563: LD_VAR 0 1
76567: PPUSH
76568: LD_INT 2
76570: PUSH
76571: LD_INT 34
76573: PUSH
76574: LD_INT 12
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 34
76583: PUSH
76584: LD_INT 51
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 34
76593: PUSH
76594: LD_INT 32
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 34
76603: PUSH
76604: LD_EXP 49
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: PPUSH
76620: CALL_OW 72
76624: ST_TO_ADDR
// end ;
76625: LD_VAR 0 2
76629: RET
// export function Negate ( value ) ; begin
76630: LD_INT 0
76632: PPUSH
// result := not value ;
76633: LD_ADDR_VAR 0 2
76637: PUSH
76638: LD_VAR 0 1
76642: NOT
76643: ST_TO_ADDR
// end ;
76644: LD_VAR 0 2
76648: RET
// export function Inc ( value ) ; begin
76649: LD_INT 0
76651: PPUSH
// result := value + 1 ;
76652: LD_ADDR_VAR 0 2
76656: PUSH
76657: LD_VAR 0 1
76661: PUSH
76662: LD_INT 1
76664: PLUS
76665: ST_TO_ADDR
// end ;
76666: LD_VAR 0 2
76670: RET
// export function Dec ( value ) ; begin
76671: LD_INT 0
76673: PPUSH
// result := value - 1 ;
76674: LD_ADDR_VAR 0 2
76678: PUSH
76679: LD_VAR 0 1
76683: PUSH
76684: LD_INT 1
76686: MINUS
76687: ST_TO_ADDR
// end ;
76688: LD_VAR 0 2
76692: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76693: LD_INT 0
76695: PPUSH
76696: PPUSH
76697: PPUSH
76698: PPUSH
76699: PPUSH
76700: PPUSH
76701: PPUSH
76702: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76703: LD_VAR 0 1
76707: PPUSH
76708: LD_VAR 0 2
76712: PPUSH
76713: CALL_OW 488
76717: NOT
76718: PUSH
76719: LD_VAR 0 3
76723: PPUSH
76724: LD_VAR 0 4
76728: PPUSH
76729: CALL_OW 488
76733: NOT
76734: OR
76735: IFFALSE 76748
// begin result := - 1 ;
76737: LD_ADDR_VAR 0 5
76741: PUSH
76742: LD_INT 1
76744: NEG
76745: ST_TO_ADDR
// exit ;
76746: GO 76983
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76748: LD_ADDR_VAR 0 12
76752: PUSH
76753: LD_VAR 0 1
76757: PPUSH
76758: LD_VAR 0 2
76762: PPUSH
76763: LD_VAR 0 3
76767: PPUSH
76768: LD_VAR 0 4
76772: PPUSH
76773: CALL 75831 0 4
76777: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76778: LD_ADDR_VAR 0 11
76782: PUSH
76783: LD_VAR 0 1
76787: PPUSH
76788: LD_VAR 0 2
76792: PPUSH
76793: LD_VAR 0 12
76797: PUSH
76798: LD_INT 1
76800: ARRAY
76801: PPUSH
76802: LD_VAR 0 12
76806: PUSH
76807: LD_INT 2
76809: ARRAY
76810: PPUSH
76811: CALL_OW 298
76815: ST_TO_ADDR
// distance := 9999 ;
76816: LD_ADDR_VAR 0 10
76820: PUSH
76821: LD_INT 9999
76823: ST_TO_ADDR
// for i := 0 to 5 do
76824: LD_ADDR_VAR 0 6
76828: PUSH
76829: DOUBLE
76830: LD_INT 0
76832: DEC
76833: ST_TO_ADDR
76834: LD_INT 5
76836: PUSH
76837: FOR_TO
76838: IFFALSE 76981
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76840: LD_ADDR_VAR 0 7
76844: PUSH
76845: LD_VAR 0 1
76849: PPUSH
76850: LD_VAR 0 6
76854: PPUSH
76855: LD_VAR 0 11
76859: PPUSH
76860: CALL_OW 272
76864: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76865: LD_ADDR_VAR 0 8
76869: PUSH
76870: LD_VAR 0 2
76874: PPUSH
76875: LD_VAR 0 6
76879: PPUSH
76880: LD_VAR 0 11
76884: PPUSH
76885: CALL_OW 273
76889: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76890: LD_VAR 0 7
76894: PPUSH
76895: LD_VAR 0 8
76899: PPUSH
76900: CALL_OW 488
76904: NOT
76905: IFFALSE 76909
// continue ;
76907: GO 76837
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76909: LD_ADDR_VAR 0 9
76913: PUSH
76914: LD_VAR 0 12
76918: PUSH
76919: LD_INT 1
76921: ARRAY
76922: PPUSH
76923: LD_VAR 0 12
76927: PUSH
76928: LD_INT 2
76930: ARRAY
76931: PPUSH
76932: LD_VAR 0 7
76936: PPUSH
76937: LD_VAR 0 8
76941: PPUSH
76942: CALL_OW 298
76946: ST_TO_ADDR
// if tmp < distance then
76947: LD_VAR 0 9
76951: PUSH
76952: LD_VAR 0 10
76956: LESS
76957: IFFALSE 76979
// begin result := i ;
76959: LD_ADDR_VAR 0 5
76963: PUSH
76964: LD_VAR 0 6
76968: ST_TO_ADDR
// distance := tmp ;
76969: LD_ADDR_VAR 0 10
76973: PUSH
76974: LD_VAR 0 9
76978: ST_TO_ADDR
// end ; end ;
76979: GO 76837
76981: POP
76982: POP
// end ;
76983: LD_VAR 0 5
76987: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76988: LD_INT 0
76990: PPUSH
76991: PPUSH
// if not driver or not IsInUnit ( driver ) then
76992: LD_VAR 0 1
76996: NOT
76997: PUSH
76998: LD_VAR 0 1
77002: PPUSH
77003: CALL_OW 310
77007: NOT
77008: OR
77009: IFFALSE 77013
// exit ;
77011: GO 77103
// vehicle := IsInUnit ( driver ) ;
77013: LD_ADDR_VAR 0 3
77017: PUSH
77018: LD_VAR 0 1
77022: PPUSH
77023: CALL_OW 310
77027: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77028: LD_VAR 0 1
77032: PPUSH
77033: LD_STRING \
77035: PUSH
77036: LD_INT 0
77038: PUSH
77039: LD_INT 0
77041: PUSH
77042: LD_INT 0
77044: PUSH
77045: LD_INT 0
77047: PUSH
77048: LD_INT 0
77050: PUSH
77051: LD_INT 0
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: PUSH
77063: LD_STRING E
77065: PUSH
77066: LD_INT 0
77068: PUSH
77069: LD_INT 0
77071: PUSH
77072: LD_VAR 0 3
77076: PUSH
77077: LD_INT 0
77079: PUSH
77080: LD_INT 0
77082: PUSH
77083: LD_INT 0
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: LIST
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PPUSH
77099: CALL_OW 446
// end ;
77103: LD_VAR 0 2
77107: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77108: LD_INT 0
77110: PPUSH
77111: PPUSH
// if not driver or not IsInUnit ( driver ) then
77112: LD_VAR 0 1
77116: NOT
77117: PUSH
77118: LD_VAR 0 1
77122: PPUSH
77123: CALL_OW 310
77127: NOT
77128: OR
77129: IFFALSE 77133
// exit ;
77131: GO 77223
// vehicle := IsInUnit ( driver ) ;
77133: LD_ADDR_VAR 0 3
77137: PUSH
77138: LD_VAR 0 1
77142: PPUSH
77143: CALL_OW 310
77147: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77148: LD_VAR 0 1
77152: PPUSH
77153: LD_STRING \
77155: PUSH
77156: LD_INT 0
77158: PUSH
77159: LD_INT 0
77161: PUSH
77162: LD_INT 0
77164: PUSH
77165: LD_INT 0
77167: PUSH
77168: LD_INT 0
77170: PUSH
77171: LD_INT 0
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: PUSH
77183: LD_STRING E
77185: PUSH
77186: LD_INT 0
77188: PUSH
77189: LD_INT 0
77191: PUSH
77192: LD_VAR 0 3
77196: PUSH
77197: LD_INT 0
77199: PUSH
77200: LD_INT 0
77202: PUSH
77203: LD_INT 0
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: PUSH
77215: EMPTY
77216: LIST
77217: LIST
77218: PPUSH
77219: CALL_OW 447
// end ;
77223: LD_VAR 0 2
77227: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77228: LD_INT 0
77230: PPUSH
77231: PPUSH
77232: PPUSH
// tmp := [ ] ;
77233: LD_ADDR_VAR 0 5
77237: PUSH
77238: EMPTY
77239: ST_TO_ADDR
// for i in units do
77240: LD_ADDR_VAR 0 4
77244: PUSH
77245: LD_VAR 0 1
77249: PUSH
77250: FOR_IN
77251: IFFALSE 77289
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77253: LD_ADDR_VAR 0 5
77257: PUSH
77258: LD_VAR 0 5
77262: PPUSH
77263: LD_VAR 0 5
77267: PUSH
77268: LD_INT 1
77270: PLUS
77271: PPUSH
77272: LD_VAR 0 4
77276: PPUSH
77277: CALL_OW 256
77281: PPUSH
77282: CALL_OW 2
77286: ST_TO_ADDR
77287: GO 77250
77289: POP
77290: POP
// if not tmp then
77291: LD_VAR 0 5
77295: NOT
77296: IFFALSE 77300
// exit ;
77298: GO 77348
// if asc then
77300: LD_VAR 0 2
77304: IFFALSE 77328
// result := SortListByListAsc ( units , tmp ) else
77306: LD_ADDR_VAR 0 3
77310: PUSH
77311: LD_VAR 0 1
77315: PPUSH
77316: LD_VAR 0 5
77320: PPUSH
77321: CALL_OW 76
77325: ST_TO_ADDR
77326: GO 77348
// result := SortListByListDesc ( units , tmp ) ;
77328: LD_ADDR_VAR 0 3
77332: PUSH
77333: LD_VAR 0 1
77337: PPUSH
77338: LD_VAR 0 5
77342: PPUSH
77343: CALL_OW 77
77347: ST_TO_ADDR
// end ;
77348: LD_VAR 0 3
77352: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77353: LD_INT 0
77355: PPUSH
77356: PPUSH
// task := GetTaskList ( mech ) ;
77357: LD_ADDR_VAR 0 4
77361: PUSH
77362: LD_VAR 0 1
77366: PPUSH
77367: CALL_OW 437
77371: ST_TO_ADDR
// if not task then
77372: LD_VAR 0 4
77376: NOT
77377: IFFALSE 77381
// exit ;
77379: GO 77423
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77381: LD_ADDR_VAR 0 3
77385: PUSH
77386: LD_VAR 0 4
77390: PUSH
77391: LD_INT 1
77393: ARRAY
77394: PUSH
77395: LD_INT 1
77397: ARRAY
77398: PUSH
77399: LD_STRING r
77401: EQUAL
77402: PUSH
77403: LD_VAR 0 4
77407: PUSH
77408: LD_INT 1
77410: ARRAY
77411: PUSH
77412: LD_INT 4
77414: ARRAY
77415: PUSH
77416: LD_VAR 0 2
77420: EQUAL
77421: AND
77422: ST_TO_ADDR
// end ;
77423: LD_VAR 0 3
77427: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77428: LD_INT 0
77430: PPUSH
// SetDir ( unit , d ) ;
77431: LD_VAR 0 1
77435: PPUSH
77436: LD_VAR 0 4
77440: PPUSH
77441: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77445: LD_VAR 0 1
77449: PPUSH
77450: LD_VAR 0 2
77454: PPUSH
77455: LD_VAR 0 3
77459: PPUSH
77460: LD_VAR 0 5
77464: PPUSH
77465: CALL_OW 48
// end ;
77469: LD_VAR 0 6
77473: RET
// export function ToNaturalNumber ( number ) ; begin
77474: LD_INT 0
77476: PPUSH
// result := number div 1 ;
77477: LD_ADDR_VAR 0 2
77481: PUSH
77482: LD_VAR 0 1
77486: PUSH
77487: LD_INT 1
77489: DIV
77490: ST_TO_ADDR
// if number < 0 then
77491: LD_VAR 0 1
77495: PUSH
77496: LD_INT 0
77498: LESS
77499: IFFALSE 77509
// result := 0 ;
77501: LD_ADDR_VAR 0 2
77505: PUSH
77506: LD_INT 0
77508: ST_TO_ADDR
// end ;
77509: LD_VAR 0 2
77513: RET
// export function SortByClass ( units , class ) ; var un ; begin
77514: LD_INT 0
77516: PPUSH
77517: PPUSH
// if not units or not class then
77518: LD_VAR 0 1
77522: NOT
77523: PUSH
77524: LD_VAR 0 2
77528: NOT
77529: OR
77530: IFFALSE 77534
// exit ;
77532: GO 77629
// result := [ ] ;
77534: LD_ADDR_VAR 0 3
77538: PUSH
77539: EMPTY
77540: ST_TO_ADDR
// for un in units do
77541: LD_ADDR_VAR 0 4
77545: PUSH
77546: LD_VAR 0 1
77550: PUSH
77551: FOR_IN
77552: IFFALSE 77627
// if GetClass ( un ) = class then
77554: LD_VAR 0 4
77558: PPUSH
77559: CALL_OW 257
77563: PUSH
77564: LD_VAR 0 2
77568: EQUAL
77569: IFFALSE 77596
// result := Insert ( result , 1 , un ) else
77571: LD_ADDR_VAR 0 3
77575: PUSH
77576: LD_VAR 0 3
77580: PPUSH
77581: LD_INT 1
77583: PPUSH
77584: LD_VAR 0 4
77588: PPUSH
77589: CALL_OW 2
77593: ST_TO_ADDR
77594: GO 77625
// result := Replace ( result , result + 1 , un ) ;
77596: LD_ADDR_VAR 0 3
77600: PUSH
77601: LD_VAR 0 3
77605: PPUSH
77606: LD_VAR 0 3
77610: PUSH
77611: LD_INT 1
77613: PLUS
77614: PPUSH
77615: LD_VAR 0 4
77619: PPUSH
77620: CALL_OW 1
77624: ST_TO_ADDR
77625: GO 77551
77627: POP
77628: POP
// end ;
77629: LD_VAR 0 3
77633: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77634: LD_INT 0
77636: PPUSH
77637: PPUSH
77638: PPUSH
77639: PPUSH
77640: PPUSH
77641: PPUSH
77642: PPUSH
// result := [ ] ;
77643: LD_ADDR_VAR 0 4
77647: PUSH
77648: EMPTY
77649: ST_TO_ADDR
// if x - r < 0 then
77650: LD_VAR 0 1
77654: PUSH
77655: LD_VAR 0 3
77659: MINUS
77660: PUSH
77661: LD_INT 0
77663: LESS
77664: IFFALSE 77676
// min_x := 0 else
77666: LD_ADDR_VAR 0 8
77670: PUSH
77671: LD_INT 0
77673: ST_TO_ADDR
77674: GO 77692
// min_x := x - r ;
77676: LD_ADDR_VAR 0 8
77680: PUSH
77681: LD_VAR 0 1
77685: PUSH
77686: LD_VAR 0 3
77690: MINUS
77691: ST_TO_ADDR
// if y - r < 0 then
77692: LD_VAR 0 2
77696: PUSH
77697: LD_VAR 0 3
77701: MINUS
77702: PUSH
77703: LD_INT 0
77705: LESS
77706: IFFALSE 77718
// min_y := 0 else
77708: LD_ADDR_VAR 0 7
77712: PUSH
77713: LD_INT 0
77715: ST_TO_ADDR
77716: GO 77734
// min_y := y - r ;
77718: LD_ADDR_VAR 0 7
77722: PUSH
77723: LD_VAR 0 2
77727: PUSH
77728: LD_VAR 0 3
77732: MINUS
77733: ST_TO_ADDR
// max_x := x + r ;
77734: LD_ADDR_VAR 0 9
77738: PUSH
77739: LD_VAR 0 1
77743: PUSH
77744: LD_VAR 0 3
77748: PLUS
77749: ST_TO_ADDR
// max_y := y + r ;
77750: LD_ADDR_VAR 0 10
77754: PUSH
77755: LD_VAR 0 2
77759: PUSH
77760: LD_VAR 0 3
77764: PLUS
77765: ST_TO_ADDR
// for _x = min_x to max_x do
77766: LD_ADDR_VAR 0 5
77770: PUSH
77771: DOUBLE
77772: LD_VAR 0 8
77776: DEC
77777: ST_TO_ADDR
77778: LD_VAR 0 9
77782: PUSH
77783: FOR_TO
77784: IFFALSE 77885
// for _y = min_y to max_y do
77786: LD_ADDR_VAR 0 6
77790: PUSH
77791: DOUBLE
77792: LD_VAR 0 7
77796: DEC
77797: ST_TO_ADDR
77798: LD_VAR 0 10
77802: PUSH
77803: FOR_TO
77804: IFFALSE 77881
// begin if not ValidHex ( _x , _y ) then
77806: LD_VAR 0 5
77810: PPUSH
77811: LD_VAR 0 6
77815: PPUSH
77816: CALL_OW 488
77820: NOT
77821: IFFALSE 77825
// continue ;
77823: GO 77803
// if GetResourceTypeXY ( _x , _y ) then
77825: LD_VAR 0 5
77829: PPUSH
77830: LD_VAR 0 6
77834: PPUSH
77835: CALL_OW 283
77839: IFFALSE 77879
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77841: LD_ADDR_VAR 0 4
77845: PUSH
77846: LD_VAR 0 4
77850: PPUSH
77851: LD_VAR 0 4
77855: PUSH
77856: LD_INT 1
77858: PLUS
77859: PPUSH
77860: LD_VAR 0 5
77864: PUSH
77865: LD_VAR 0 6
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PPUSH
77874: CALL_OW 1
77878: ST_TO_ADDR
// end ;
77879: GO 77803
77881: POP
77882: POP
77883: GO 77783
77885: POP
77886: POP
// end ;
77887: LD_VAR 0 4
77891: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77892: LD_INT 0
77894: PPUSH
77895: PPUSH
77896: PPUSH
77897: PPUSH
77898: PPUSH
77899: PPUSH
77900: PPUSH
77901: PPUSH
// if not units then
77902: LD_VAR 0 1
77906: NOT
77907: IFFALSE 77911
// exit ;
77909: GO 78336
// result := UnitFilter ( units , [ f_ok ] ) ;
77911: LD_ADDR_VAR 0 3
77915: PUSH
77916: LD_VAR 0 1
77920: PPUSH
77921: LD_INT 50
77923: PUSH
77924: EMPTY
77925: LIST
77926: PPUSH
77927: CALL_OW 72
77931: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77932: LD_ADDR_VAR 0 8
77936: PUSH
77937: LD_VAR 0 1
77941: PUSH
77942: LD_INT 1
77944: ARRAY
77945: PPUSH
77946: CALL_OW 255
77950: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77951: LD_ADDR_VAR 0 10
77955: PUSH
77956: LD_INT 29
77958: PUSH
77959: LD_EXP 52
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: ST_TO_ADDR
// if not result then
77968: LD_VAR 0 3
77972: NOT
77973: IFFALSE 77977
// exit ;
77975: GO 78336
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77977: LD_ADDR_VAR 0 5
77981: PUSH
77982: LD_INT 81
77984: PUSH
77985: LD_VAR 0 8
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PPUSH
77994: CALL_OW 69
77998: ST_TO_ADDR
// for i in result do
77999: LD_ADDR_VAR 0 4
78003: PUSH
78004: LD_VAR 0 3
78008: PUSH
78009: FOR_IN
78010: IFFALSE 78334
// begin tag := GetTag ( i ) + 1 ;
78012: LD_ADDR_VAR 0 9
78016: PUSH
78017: LD_VAR 0 4
78021: PPUSH
78022: CALL_OW 110
78026: PUSH
78027: LD_INT 1
78029: PLUS
78030: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78031: LD_ADDR_VAR 0 7
78035: PUSH
78036: LD_VAR 0 4
78040: PPUSH
78041: CALL_OW 250
78045: PPUSH
78046: LD_VAR 0 4
78050: PPUSH
78051: CALL_OW 251
78055: PPUSH
78056: LD_INT 6
78058: PPUSH
78059: CALL 77634 0 3
78063: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78064: LD_VAR 0 7
78068: PUSH
78069: LD_VAR 0 4
78073: PPUSH
78074: CALL_OW 264
78078: PUSH
78079: LD_VAR 0 10
78083: IN
78084: NOT
78085: AND
78086: IFFALSE 78125
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78088: LD_VAR 0 4
78092: PPUSH
78093: LD_VAR 0 7
78097: PUSH
78098: LD_INT 1
78100: ARRAY
78101: PUSH
78102: LD_INT 1
78104: ARRAY
78105: PPUSH
78106: LD_VAR 0 7
78110: PUSH
78111: LD_INT 1
78113: ARRAY
78114: PUSH
78115: LD_INT 2
78117: ARRAY
78118: PPUSH
78119: CALL_OW 116
78123: GO 78332
// if path > tag then
78125: LD_VAR 0 2
78129: PUSH
78130: LD_VAR 0 9
78134: GREATER
78135: IFFALSE 78302
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78137: LD_ADDR_VAR 0 6
78141: PUSH
78142: LD_VAR 0 5
78146: PPUSH
78147: LD_INT 91
78149: PUSH
78150: LD_VAR 0 4
78154: PUSH
78155: LD_INT 12
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: LIST
78162: PPUSH
78163: CALL_OW 72
78167: ST_TO_ADDR
// if nearEnemy then
78168: LD_VAR 0 6
78172: IFFALSE 78200
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78174: LD_VAR 0 4
78178: PPUSH
78179: LD_VAR 0 6
78183: PPUSH
78184: LD_VAR 0 4
78188: PPUSH
78189: CALL_OW 74
78193: PPUSH
78194: CALL_OW 115
78198: GO 78300
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78200: LD_VAR 0 4
78204: PPUSH
78205: LD_VAR 0 2
78209: PUSH
78210: LD_VAR 0 9
78214: ARRAY
78215: PUSH
78216: LD_INT 1
78218: ARRAY
78219: PPUSH
78220: LD_VAR 0 2
78224: PUSH
78225: LD_VAR 0 9
78229: ARRAY
78230: PUSH
78231: LD_INT 2
78233: ARRAY
78234: PPUSH
78235: CALL_OW 297
78239: PUSH
78240: LD_INT 6
78242: GREATER
78243: IFFALSE 78286
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78245: LD_VAR 0 4
78249: PPUSH
78250: LD_VAR 0 2
78254: PUSH
78255: LD_VAR 0 9
78259: ARRAY
78260: PUSH
78261: LD_INT 1
78263: ARRAY
78264: PPUSH
78265: LD_VAR 0 2
78269: PUSH
78270: LD_VAR 0 9
78274: ARRAY
78275: PUSH
78276: LD_INT 2
78278: ARRAY
78279: PPUSH
78280: CALL_OW 114
78284: GO 78300
// SetTag ( i , tag ) ;
78286: LD_VAR 0 4
78290: PPUSH
78291: LD_VAR 0 9
78295: PPUSH
78296: CALL_OW 109
// end else
78300: GO 78332
// if enemy then
78302: LD_VAR 0 5
78306: IFFALSE 78332
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78308: LD_VAR 0 4
78312: PPUSH
78313: LD_VAR 0 5
78317: PPUSH
78318: LD_VAR 0 4
78322: PPUSH
78323: CALL_OW 74
78327: PPUSH
78328: CALL_OW 115
// end ;
78332: GO 78009
78334: POP
78335: POP
// end ;
78336: LD_VAR 0 3
78340: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78341: LD_INT 0
78343: PPUSH
78344: PPUSH
78345: PPUSH
// if not unit or IsInUnit ( unit ) then
78346: LD_VAR 0 1
78350: NOT
78351: PUSH
78352: LD_VAR 0 1
78356: PPUSH
78357: CALL_OW 310
78361: OR
78362: IFFALSE 78366
// exit ;
78364: GO 78457
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78366: LD_ADDR_VAR 0 4
78370: PUSH
78371: LD_VAR 0 1
78375: PPUSH
78376: CALL_OW 250
78380: PPUSH
78381: LD_VAR 0 2
78385: PPUSH
78386: LD_INT 1
78388: PPUSH
78389: CALL_OW 272
78393: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78394: LD_ADDR_VAR 0 5
78398: PUSH
78399: LD_VAR 0 1
78403: PPUSH
78404: CALL_OW 251
78408: PPUSH
78409: LD_VAR 0 2
78413: PPUSH
78414: LD_INT 1
78416: PPUSH
78417: CALL_OW 273
78421: ST_TO_ADDR
// if ValidHex ( x , y ) then
78422: LD_VAR 0 4
78426: PPUSH
78427: LD_VAR 0 5
78431: PPUSH
78432: CALL_OW 488
78436: IFFALSE 78457
// ComTurnXY ( unit , x , y ) ;
78438: LD_VAR 0 1
78442: PPUSH
78443: LD_VAR 0 4
78447: PPUSH
78448: LD_VAR 0 5
78452: PPUSH
78453: CALL_OW 118
// end ;
78457: LD_VAR 0 3
78461: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78462: LD_INT 0
78464: PPUSH
78465: PPUSH
// result := false ;
78466: LD_ADDR_VAR 0 3
78470: PUSH
78471: LD_INT 0
78473: ST_TO_ADDR
// if not units then
78474: LD_VAR 0 2
78478: NOT
78479: IFFALSE 78483
// exit ;
78481: GO 78528
// for i in units do
78483: LD_ADDR_VAR 0 4
78487: PUSH
78488: LD_VAR 0 2
78492: PUSH
78493: FOR_IN
78494: IFFALSE 78526
// if See ( side , i ) then
78496: LD_VAR 0 1
78500: PPUSH
78501: LD_VAR 0 4
78505: PPUSH
78506: CALL_OW 292
78510: IFFALSE 78524
// begin result := true ;
78512: LD_ADDR_VAR 0 3
78516: PUSH
78517: LD_INT 1
78519: ST_TO_ADDR
// exit ;
78520: POP
78521: POP
78522: GO 78528
// end ;
78524: GO 78493
78526: POP
78527: POP
// end ;
78528: LD_VAR 0 3
78532: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78533: LD_INT 0
78535: PPUSH
78536: PPUSH
78537: PPUSH
78538: PPUSH
// if not unit or not points then
78539: LD_VAR 0 1
78543: NOT
78544: PUSH
78545: LD_VAR 0 2
78549: NOT
78550: OR
78551: IFFALSE 78555
// exit ;
78553: GO 78645
// dist := 99999 ;
78555: LD_ADDR_VAR 0 5
78559: PUSH
78560: LD_INT 99999
78562: ST_TO_ADDR
// for i in points do
78563: LD_ADDR_VAR 0 4
78567: PUSH
78568: LD_VAR 0 2
78572: PUSH
78573: FOR_IN
78574: IFFALSE 78643
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78576: LD_ADDR_VAR 0 6
78580: PUSH
78581: LD_VAR 0 1
78585: PPUSH
78586: LD_VAR 0 4
78590: PUSH
78591: LD_INT 1
78593: ARRAY
78594: PPUSH
78595: LD_VAR 0 4
78599: PUSH
78600: LD_INT 2
78602: ARRAY
78603: PPUSH
78604: CALL_OW 297
78608: ST_TO_ADDR
// if tmpDist < dist then
78609: LD_VAR 0 6
78613: PUSH
78614: LD_VAR 0 5
78618: LESS
78619: IFFALSE 78641
// begin result := i ;
78621: LD_ADDR_VAR 0 3
78625: PUSH
78626: LD_VAR 0 4
78630: ST_TO_ADDR
// dist := tmpDist ;
78631: LD_ADDR_VAR 0 5
78635: PUSH
78636: LD_VAR 0 6
78640: ST_TO_ADDR
// end ; end ;
78641: GO 78573
78643: POP
78644: POP
// end ; end_of_file
78645: LD_VAR 0 3
78649: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78650: LD_VAR 0 1
78654: PUSH
78655: LD_INT 200
78657: DOUBLE
78658: GREATEREQUAL
78659: IFFALSE 78667
78661: LD_INT 299
78663: DOUBLE
78664: LESSEQUAL
78665: IFTRUE 78669
78667: GO 78701
78669: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78670: LD_VAR 0 1
78674: PPUSH
78675: LD_VAR 0 2
78679: PPUSH
78680: LD_VAR 0 3
78684: PPUSH
78685: LD_VAR 0 4
78689: PPUSH
78690: LD_VAR 0 5
78694: PPUSH
78695: CALL 34297 0 5
78699: GO 78778
78701: LD_INT 300
78703: DOUBLE
78704: GREATEREQUAL
78705: IFFALSE 78713
78707: LD_INT 399
78709: DOUBLE
78710: LESSEQUAL
78711: IFTRUE 78715
78713: GO 78777
78715: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78716: LD_VAR 0 1
78720: PPUSH
78721: LD_VAR 0 2
78725: PPUSH
78726: LD_VAR 0 3
78730: PPUSH
78731: LD_VAR 0 4
78735: PPUSH
78736: LD_VAR 0 5
78740: PPUSH
78741: LD_VAR 0 6
78745: PPUSH
78746: LD_VAR 0 7
78750: PPUSH
78751: LD_VAR 0 8
78755: PPUSH
78756: LD_VAR 0 9
78760: PPUSH
78761: LD_VAR 0 10
78765: PPUSH
78766: LD_VAR 0 11
78770: PPUSH
78771: CALL 31939 0 11
78775: GO 78778
78777: POP
// end ;
78778: PPOPN 11
78780: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78781: LD_VAR 0 1
78785: PPUSH
78786: LD_VAR 0 2
78790: PPUSH
78791: LD_VAR 0 3
78795: PPUSH
78796: LD_VAR 0 4
78800: PPUSH
78801: LD_VAR 0 5
78805: PPUSH
78806: CALL 34033 0 5
// end ; end_of_file
78810: PPOPN 5
78812: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78813: LD_VAR 0 1
78817: PPUSH
78818: LD_VAR 0 2
78822: PPUSH
78823: LD_VAR 0 3
78827: PPUSH
78828: LD_VAR 0 4
78832: PPUSH
78833: LD_VAR 0 5
78837: PPUSH
78838: LD_VAR 0 6
78842: PPUSH
78843: CALL 19632 0 6
// end ;
78847: PPOPN 6
78849: END
