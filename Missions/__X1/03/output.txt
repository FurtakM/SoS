// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 637 0 0
// PrepareArabian ;
  12: CALL 996 0 0
// PrepareAmerican ;
  16: CALL 4057 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9176 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// end ; end_of_file
 336: LD_VAR 0 1
 340: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 341: LD_INT 0
 343: PPUSH
// uc_side := side ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_VAR 0 1
 353: ST_TO_ADDR
// uc_nation := nation ;
 354: LD_ADDR_OWVAR 21
 358: PUSH
 359: LD_VAR 0 2
 363: ST_TO_ADDR
// vc_chassis := chassis ;
 364: LD_ADDR_OWVAR 37
 368: PUSH
 369: LD_VAR 0 3
 373: ST_TO_ADDR
// vc_engine := engine ;
 374: LD_ADDR_OWVAR 39
 378: PUSH
 379: LD_VAR 0 4
 383: ST_TO_ADDR
// vc_control := control ;
 384: LD_ADDR_OWVAR 38
 388: PUSH
 389: LD_VAR 0 5
 393: ST_TO_ADDR
// vc_weapon := weapon ;
 394: LD_ADDR_OWVAR 40
 398: PUSH
 399: LD_VAR 0 6
 403: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 404: LD_ADDR_OWVAR 41
 408: PUSH
 409: LD_VAR 0 7
 413: ST_TO_ADDR
// result := CreateVehicle ;
 414: LD_ADDR_VAR 0 8
 418: PUSH
 419: CALL_OW 45
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 8
 428: RET
// export function SayX ( units , ident ) ; var i ; begin
 429: LD_INT 0
 431: PPUSH
 432: PPUSH
// result := false ;
 433: LD_ADDR_VAR 0 3
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// if not units then
 441: LD_VAR 0 1
 445: NOT
 446: IFFALSE 450
// exit ;
 448: GO 504
// for i in units do
 450: LD_ADDR_VAR 0 4
 454: PUSH
 455: LD_VAR 0 1
 459: PUSH
 460: FOR_IN
 461: IFFALSE 502
// if IsOk ( i ) then
 463: LD_VAR 0 4
 467: PPUSH
 468: CALL_OW 302
 472: IFFALSE 500
// begin Say ( i , ident ) ;
 474: LD_VAR 0 4
 478: PPUSH
 479: LD_VAR 0 2
 483: PPUSH
 484: CALL_OW 88
// result := i ;
 488: LD_ADDR_VAR 0 3
 492: PUSH
 493: LD_VAR 0 4
 497: ST_TO_ADDR
// break ;
 498: GO 502
// end ;
 500: GO 460
 502: POP
 503: POP
// end ;
 504: LD_VAR 0 3
 508: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 509: LD_INT 0
 511: PPUSH
 512: PPUSH
// InitUc ;
 513: CALL_OW 18
// InitHc ;
 517: CALL_OW 19
// uc_side := 0 ;
 521: LD_ADDR_OWVAR 20
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// uc_nation := 0 ;
 529: LD_ADDR_OWVAR 21
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// for i = 1 to amount do
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: DOUBLE
 543: LD_INT 1
 545: DEC
 546: ST_TO_ADDR
 547: LD_VAR 0 2
 551: PUSH
 552: FOR_TO
 553: IFFALSE 626
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 555: LD_ADDR_OWVAR 29
 559: PUSH
 560: LD_INT 9
 562: PPUSH
 563: LD_INT 12
 565: PPUSH
 566: CALL_OW 12
 570: PUSH
 571: LD_INT 9
 573: PPUSH
 574: LD_INT 12
 576: PPUSH
 577: CALL_OW 12
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: ST_TO_ADDR
// hc_agressivity := 0 ;
 586: LD_ADDR_OWVAR 35
 590: PUSH
 591: LD_INT 0
 593: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 12
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 607: CALL_OW 44
 611: PPUSH
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 552
 626: POP
 627: POP
// InitHc ;
 628: CALL_OW 19
// end ;
 632: LD_VAR 0 3
 636: RET
// export function CreateNature ; var i ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 641: LD_INT 2
 643: PPUSH
 644: LD_INT 5
 646: PUSH
 647: LD_INT 4
 649: PUSH
 650: LD_INT 4
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_OWVAR 67
 666: ARRAY
 667: PPUSH
 668: CALL 509 0 2
// for i := 1 to 2 do
 672: LD_ADDR_VAR 0 2
 676: PUSH
 677: DOUBLE
 678: LD_INT 1
 680: DEC
 681: ST_TO_ADDR
 682: LD_INT 2
 684: PUSH
 685: FOR_TO
 686: IFFALSE 721
// begin hc_class := 21 ;
 688: LD_ADDR_OWVAR 28
 692: PUSH
 693: LD_INT 21
 695: ST_TO_ADDR
// hc_gallery :=  ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING 
 703: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 704: CALL_OW 44
 708: PPUSH
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 685
 721: POP
 722: POP
// for i := 1 to 2 do
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 2
 735: PUSH
 736: FOR_TO
 737: IFFALSE 772
// begin hc_class := 18 ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 18
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 49
// end ;
 770: GO 736
 772: POP
 773: POP
// for i := 1 to 2 do
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: DOUBLE
 780: LD_INT 1
 782: DEC
 783: ST_TO_ADDR
 784: LD_INT 2
 786: PUSH
 787: FOR_TO
 788: IFFALSE 823
// begin hc_class := 13 ;
 790: LD_ADDR_OWVAR 28
 794: PUSH
 795: LD_INT 13
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 787
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 1
 829: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
// if not observer or not unit then
 835: LD_VAR 0 1
 839: NOT
 840: PUSH
 841: LD_VAR 0 2
 845: NOT
 846: OR
 847: IFFALSE 851
// exit ;
 849: GO 899
// if not See ( GetSide ( observer ) , unit ) then
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: PPUSH
 861: LD_VAR 0 2
 865: PPUSH
 866: CALL_OW 292
 870: NOT
 871: IFFALSE 875
// exit ;
 873: GO 899
// result := GetDistUnits ( observer , unit ) < 12 ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: LD_VAR 0 1
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 296
 894: PUSH
 895: LD_INT 12
 897: LESS
 898: ST_TO_ADDR
// end ;
 899: LD_VAR 0 3
 903: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 904: LD_INT 0
 906: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 488
 929: PUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 428
 952: PUSH
 953: LD_INT 0
 955: EQUAL
 956: AND
 957: IFFALSE 991
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 959: LD_VAR 0 1
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: LD_VAR 0 3
 986: PPUSH
 987: CALL_OW 48
// end ; end_of_file
 991: LD_VAR 0 4
 995: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
 996: LD_INT 0
 998: PPUSH
 999: PPUSH
1000: PPUSH
1001: PPUSH
// uc_side := 5 ;
1002: LD_ADDR_OWVAR 20
1006: PUSH
1007: LD_INT 5
1009: ST_TO_ADDR
// uc_nation := 2 ;
1010: LD_ADDR_OWVAR 21
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1018: LD_INT 5
1020: PPUSH
1021: CALL_OW 274
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 65
1031: PPUSH
1032: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1036: LD_ADDR_EXP 38
1040: PUSH
1041: LD_STRING Farmer
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_STRING 
1049: PPUSH
1050: CALL 39930 0 3
1054: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1055: LD_ADDR_EXP 39
1059: PUSH
1060: LD_STRING Omar
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: LD_STRING 
1068: PPUSH
1069: CALL 39930 0 3
1073: ST_TO_ADDR
// omarSquad := [ ] ;
1074: LD_ADDR_EXP 42
1078: PUSH
1079: EMPTY
1080: ST_TO_ADDR
// heikeSquad := [ ] ;
1081: LD_ADDR_EXP 43
1085: PUSH
1086: EMPTY
1087: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1088: LD_ADDR_EXP 44
1092: PUSH
1093: EMPTY
1094: ST_TO_ADDR
// omarCargo := [ ] ;
1095: LD_ADDR_EXP 45
1099: PUSH
1100: EMPTY
1101: ST_TO_ADDR
// for i := 1 to 5 do
1102: LD_ADDR_VAR 0 2
1106: PUSH
1107: DOUBLE
1108: LD_INT 1
1110: DEC
1111: ST_TO_ADDR
1112: LD_INT 5
1114: PUSH
1115: FOR_TO
1116: IFFALSE 1274
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1118: LD_INT 0
1120: PPUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 2
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_VAR 0 2
1147: ARRAY
1148: PPUSH
1149: LD_INT 3
1151: PPUSH
1152: CALL_OW 380
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1166: LD_ADDR_EXP 42
1170: PUSH
1171: LD_EXP 42
1175: PUSH
1176: LD_VAR 0 3
1180: UNION
1181: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 87
1189: PUSH
1190: LD_INT 30
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 91
1199: PUSH
1200: LD_INT 32
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 15
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: LD_INT 79
1219: PUSH
1220: LD_INT 14
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 82
1229: PUSH
1230: LD_INT 13
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL 904 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 93
1264: PPUSH
1265: LD_INT 21
1267: PPUSH
1268: CALL_OW 118
// end ;
1272: GO 1115
1274: POP
1275: POP
// uc_side := 2 ;
1276: LD_ADDR_OWVAR 20
1280: PUSH
1281: LD_INT 2
1283: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_STRING Heike
1291: PPUSH
1292: LD_EXP 1
1296: NOT
1297: PPUSH
1298: LD_EXP 2
1302: PPUSH
1303: CALL 39930 0 3
1307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1308: LD_ADDR_EXP 34
1312: PUSH
1313: LD_STRING Aviradze
1315: PPUSH
1316: LD_EXP 1
1320: NOT
1321: PPUSH
1322: LD_EXP 2
1326: PPUSH
1327: CALL 39930 0 3
1331: ST_TO_ADDR
// tmp := [ ] ;
1332: LD_ADDR_VAR 0 4
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1339: LD_ADDR_EXP 31
1343: PUSH
1344: LD_STRING Givi
1346: PPUSH
1347: LD_EXP 1
1351: NOT
1352: PPUSH
1353: LD_EXP 2
1357: PPUSH
1358: CALL 39930 0 3
1362: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1363: LD_ADDR_EXP 32
1367: PUSH
1368: LD_STRING Mike
1370: PPUSH
1371: LD_EXP 1
1375: NOT
1376: PPUSH
1377: LD_EXP 2
1381: PPUSH
1382: CALL 39930 0 3
1386: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1387: LD_ADDR_EXP 33
1391: PUSH
1392: LD_STRING Kamil
1394: PPUSH
1395: LD_EXP 1
1399: NOT
1400: PPUSH
1401: LD_EXP 2
1405: PPUSH
1406: CALL 39930 0 3
1410: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1411: LD_ADDR_EXP 35
1415: PUSH
1416: LD_STRING Kaia
1418: PPUSH
1419: LD_EXP 1
1423: NOT
1424: PPUSH
1425: LD_EXP 2
1429: PPUSH
1430: CALL 39930 0 3
1434: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1435: LD_ADDR_EXP 36
1439: PUSH
1440: LD_STRING Sophia
1442: PPUSH
1443: LD_EXP 1
1447: NOT
1448: PPUSH
1449: LD_EXP 2
1453: PPUSH
1454: CALL 39930 0 3
1458: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1459: LD_ADDR_EXP 37
1463: PUSH
1464: LD_STRING Markov
1466: PPUSH
1467: LD_EXP 1
1471: NOT
1472: PPUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 39930 0 3
1482: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1483: LD_ADDR_EXP 44
1487: PUSH
1488: LD_STRING 02_others
1490: PPUSH
1491: CALL_OW 31
1495: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_EXP 32
1505: PUSH
1506: LD_EXP 33
1510: PUSH
1511: LD_EXP 35
1515: PUSH
1516: LD_EXP 36
1520: PUSH
1521: LD_EXP 37
1525: PUSH
1526: LD_EXP 31
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_EXP 44
1543: ADD
1544: PUSH
1545: LD_INT 0
1547: DIFF
1548: ST_TO_ADDR
// heikeSquad := tmp ;
1549: LD_ADDR_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1559: LD_EXP 43
1563: PPUSH
1564: LD_INT 25
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 72
1578: PUSH
1579: LD_INT 3
1581: LESS
1582: IFFALSE 1632
// begin SetClass ( Kaia , 1 ) ;
1584: LD_EXP 35
1588: PPUSH
1589: LD_INT 1
1591: PPUSH
1592: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1596: LD_EXP 32
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1608: LD_EXP 31
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1620: LD_EXP 30
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_VAR 0 4
1641: PUSH
1642: LD_STRING 02_ape
1644: PPUSH
1645: CALL_OW 31
1649: UNION
1650: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1651: LD_EXP 30
1655: PPUSH
1656: LD_INT 92
1658: PPUSH
1659: LD_INT 17
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1669: LD_EXP 38
1673: PPUSH
1674: LD_INT 95
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1687: LD_EXP 39
1691: PPUSH
1692: LD_INT 89
1694: PPUSH
1695: LD_INT 25
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1705: LD_EXP 34
1709: PPUSH
1710: LD_INT 92
1712: PPUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1723: LD_EXP 39
1727: PPUSH
1728: LD_EXP 34
1732: PPUSH
1733: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1737: LD_EXP 34
1741: PPUSH
1742: LD_EXP 39
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1751: LD_EXP 30
1755: PUSH
1756: LD_EXP 38
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PPUSH
1765: LD_EXP 39
1769: PPUSH
1770: CALL_OW 119
// if tmp then
1774: LD_VAR 0 4
1778: IFFALSE 1832
// for i in tmp do
1780: LD_ADDR_VAR 0 2
1784: PUSH
1785: LD_VAR 0 4
1789: PUSH
1790: FOR_IN
1791: IFFALSE 1830
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1793: LD_VAR 0 2
1797: PPUSH
1798: LD_INT 94
1800: PPUSH
1801: LD_INT 14
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1814: LD_VAR 0 2
1818: PPUSH
1819: LD_EXP 30
1823: PPUSH
1824: CALL_OW 119
// end ;
1828: GO 1790
1830: POP
1831: POP
// farmerSquad := [ ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: EMPTY
1838: ST_TO_ADDR
// uc_side := 5 ;
1839: LD_ADDR_OWVAR 20
1843: PUSH
1844: LD_INT 5
1846: ST_TO_ADDR
// uc_nation := 2 ;
1847: LD_ADDR_OWVAR 21
1851: PUSH
1852: LD_INT 2
1854: ST_TO_ADDR
// for i := 1 to 4 do
1855: LD_ADDR_VAR 0 2
1859: PUSH
1860: DOUBLE
1861: LD_INT 1
1863: DEC
1864: ST_TO_ADDR
1865: LD_INT 4
1867: PUSH
1868: FOR_TO
1869: IFFALSE 1947
// begin PrepareHuman ( false , 1 , 2 ) ;
1871: LD_INT 0
1873: PPUSH
1874: LD_INT 1
1876: PPUSH
1877: LD_INT 2
1879: PPUSH
1880: CALL_OW 380
// un := CreateHuman ;
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: CALL_OW 44
1893: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1894: LD_VAR 0 3
1898: PPUSH
1899: LD_INT 102
1901: PPUSH
1902: LD_INT 27
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1915: LD_ADDR_EXP 41
1919: PUSH
1920: LD_EXP 41
1924: PUSH
1925: LD_VAR 0 3
1929: UNION
1930: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_EXP 39
1940: PPUSH
1941: CALL_OW 119
// end ;
1945: GO 1868
1947: POP
1948: POP
// for i := 1 to 2 do
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 2
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2041
// begin PrepareHuman ( false , 2 , 2 ) ;
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: LD_INT 2
1973: PPUSH
1974: CALL_OW 380
// un := CreateHuman ;
1978: LD_ADDR_VAR 0 3
1982: PUSH
1983: CALL_OW 44
1987: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1988: LD_VAR 0 3
1992: PPUSH
1993: LD_INT 108
1995: PPUSH
1996: LD_INT 62
1998: PPUSH
1999: LD_INT 2
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2009: LD_ADDR_EXP 41
2013: PUSH
2014: LD_EXP 41
2018: PUSH
2019: LD_VAR 0 3
2023: UNION
2024: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2025: LD_VAR 0 3
2029: PPUSH
2030: LD_EXP 39
2034: PPUSH
2035: CALL_OW 119
// end ;
2039: GO 1962
2041: POP
2042: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2043: LD_INT 109
2045: PPUSH
2046: LD_INT 63
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 15
2054: NEG
2055: PPUSH
2056: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2060: LD_INT 109
2062: PPUSH
2063: LD_INT 63
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: CALL_OW 331
// end ;
2073: LD_VAR 0 1
2077: RET
// export function PrepareIbrahim ( x , y ) ; begin
2078: LD_INT 0
2080: PPUSH
// uc_side := 6 ;
2081: LD_ADDR_OWVAR 20
2085: PUSH
2086: LD_INT 6
2088: ST_TO_ADDR
// uc_nation := 3 ;
2089: LD_ADDR_OWVAR 21
2093: PUSH
2094: LD_INT 3
2096: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2097: LD_ADDR_EXP 40
2101: PUSH
2102: LD_STRING IbrahimRu
2104: PPUSH
2105: LD_INT 0
2107: PPUSH
2108: LD_STRING 
2110: PPUSH
2111: CALL 39930 0 3
2115: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2116: LD_EXP 40
2120: PPUSH
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_INT 8
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 50
// end ;
2141: LD_VAR 0 3
2145: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2146: LD_EXP 39
2150: PUSH
2151: LD_EXP 42
2155: ADD
2156: PPUSH
2157: LD_INT 95
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 72
2171: IFFALSE 2227
2173: GO 2175
2175: DISABLE
2176: LD_INT 0
2178: PPUSH
// begin enable ;
2179: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_EXP 39
2189: PUSH
2190: LD_EXP 42
2194: ADD
2195: PPUSH
2196: LD_INT 95
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PPUSH
2206: CALL_OW 72
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2225
// RemoveUnit ( i ) ;
2214: LD_VAR 0 1
2218: PPUSH
2219: CALL_OW 64
2223: GO 2211
2225: POP
2226: POP
// end ;
2227: PPOPN 1
2229: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 38
2239: PPUSH
2240: LD_INT 4
2242: PPUSH
2243: CALL_OW 308
2247: AND
2248: IFFALSE 3052
2250: GO 2252
2252: DISABLE
2253: LD_INT 0
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2259: LD_EXP 38
2263: PPUSH
2264: LD_INT 110
2266: PPUSH
2267: LD_INT 60
2269: PPUSH
2270: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2274: LD_EXP 38
2278: PPUSH
2279: LD_INT 110
2281: PPUSH
2282: LD_INT 61
2284: PPUSH
2285: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 41
2298: PPUSH
2299: LD_INT 25
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 72
2313: ST_TO_ADDR
// if tmp then
2314: LD_VAR 0 2
2318: IFFALSE 2412
// begin for i := 1 to 2 do
2320: LD_ADDR_VAR 0 1
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 2
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2410
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2336: LD_VAR 0 2
2340: PUSH
2341: LD_VAR 0 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 5
2349: PPUSH
2350: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PPUSH
2365: LD_INT 2
2367: PPUSH
2368: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: PPUSH
2383: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2387: LD_VAR 0 2
2391: PUSH
2392: LD_VAR 0 1
2396: ARRAY
2397: PPUSH
2398: LD_INT 107
2400: PPUSH
2401: LD_INT 66
2403: PPUSH
2404: CALL_OW 171
// end ;
2408: GO 2333
2410: POP
2411: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: LD_EXP 41
2421: PPUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: PPUSH
2432: CALL_OW 72
2436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2437: LD_INT 35
2439: PPUSH
2440: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: LD_EXP 41
2453: PPUSH
2454: LD_INT 25
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PPUSH
2464: CALL_OW 72
2468: ST_TO_ADDR
// until tmp ;
2469: LD_VAR 0 2
2473: IFFALSE 2437
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 31
2482: PPUSH
2483: LD_INT 102
2485: PPUSH
2486: LD_INT 69
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2503: LD_EXP 41
2507: PPUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 60
2513: PUSH
2514: EMPTY
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 25
2523: PUSH
2524: LD_INT 2
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PPUSH
2535: CALL_OW 72
2539: IFFALSE 2496
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2541: LD_ADDR_VAR 0 2
2545: PUSH
2546: LD_EXP 41
2550: PPUSH
2551: LD_INT 25
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PPUSH
2561: CALL_OW 72
2565: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2566: LD_VAR 0 2
2570: PPUSH
2571: LD_INT 6
2573: PPUSH
2574: LD_INT 116
2576: PPUSH
2577: LD_INT 55
2579: PPUSH
2580: LD_INT 4
2582: PPUSH
2583: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2587: LD_VAR 0 2
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 116
2597: PPUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2608: LD_VAR 0 2
2612: PPUSH
2613: LD_INT 31
2615: PPUSH
2616: LD_INT 109
2618: PPUSH
2619: LD_INT 50
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2629: LD_INT 35
2631: PPUSH
2632: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2636: LD_INT 22
2638: PUSH
2639: LD_INT 5
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 30
2648: PUSH
2649: LD_INT 4
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: IFFALSE 2629
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2680: LD_ADDR_VAR 0 3
2684: PUSH
2685: LD_INT 22
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 3
2707: PUSH
2708: LD_INT 57
2710: PUSH
2711: EMPTY
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: LD_INT 1
2730: ARRAY
2731: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2732: LD_ADDR_VAR 0 2
2736: PUSH
2737: LD_EXP 41
2741: PPUSH
2742: LD_INT 25
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: CALL_OW 72
2756: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2771: LD_INT 35
2773: PPUSH
2774: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2778: LD_INT 22
2780: PUSH
2781: LD_INT 5
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 30
2790: PUSH
2791: LD_INT 31
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 3
2800: PUSH
2801: LD_INT 57
2803: PUSH
2804: EMPTY
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: PUSH
2821: LD_INT 2
2823: GREATEREQUAL
2824: IFFALSE 2771
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2826: LD_ADDR_VAR 0 2
2830: PUSH
2831: LD_EXP 41
2835: PPUSH
2836: LD_INT 25
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 72
2850: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2851: LD_VAR 0 2
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2867: LD_VAR 0 2
2871: PUSH
2872: LD_INT 2
2874: ARRAY
2875: PUSH
2876: LD_VAR 0 2
2880: PUSH
2881: LD_INT 3
2883: ARRAY
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_VAR 0 3
2893: PPUSH
2894: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2898: LD_VAR 0 2
2902: PUSH
2903: LD_INT 2
2905: ARRAY
2906: PUSH
2907: LD_VAR 0 2
2911: PUSH
2912: LD_INT 3
2914: ARRAY
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 5
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 30
2970: PUSH
2971: LD_INT 31
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 1
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3035
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3003: LD_VAR 0 2
3007: PUSH
3008: LD_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PLUS
3016: ARRAY
3017: PPUSH
3018: LD_VAR 0 4
3022: PUSH
3023: LD_VAR 0 1
3027: ARRAY
3028: PPUSH
3029: CALL_OW 180
3033: GO 3000
3035: POP
3036: POP
// wait ( 1 1$00 ) ;
3037: LD_INT 2100
3039: PPUSH
3040: CALL_OW 67
// farmerBaseReady := true ;
3044: LD_ADDR_EXP 4
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// end ;
3052: PPOPN 4
3054: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3055: LD_EXP 4
3059: PUSH
3060: LD_EXP 12
3064: NOT
3065: AND
3066: IFFALSE 3588
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
3077: PPUSH
// begin enable ;
3078: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: LD_EXP 41
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: PUSH
3104: LD_EXP 38
3108: ADD
3109: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3110: LD_ADDR_VAR 0 2
3114: PUSH
3115: LD_EXP 41
3119: PPUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: LD_INT 22
3142: PUSH
3143: LD_INT 5
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 24
3165: PUSH
3166: LD_INT 1000
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 5
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 30
3204: PUSH
3205: LD_INT 4
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PPUSH
3216: CALL_OW 69
3220: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3221: LD_VAR 0 4
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PPUSH
3230: CALL_OW 302
3234: IFFALSE 3298
// for i in sol do
3236: LD_ADDR_VAR 0 1
3240: PUSH
3241: LD_VAR 0 3
3245: PUSH
3246: FOR_IN
3247: IFFALSE 3296
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3249: LD_VAR 0 1
3253: PPUSH
3254: CALL_OW 256
3258: PUSH
3259: LD_INT 999
3261: LESS
3262: PUSH
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 310
3272: NOT
3273: AND
3274: IFFALSE 3294
// ComEnterUnit ( i , arm [ 1 ] ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 120
3294: GO 3246
3296: POP
3297: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3298: LD_VAR 0 2
3302: NOT
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 1
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 1
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: NOT
3333: AND
3334: IFFALSE 3426
// begin uc_side := 5 ;
3336: LD_ADDR_OWVAR 20
3340: PUSH
3341: LD_INT 5
3343: ST_TO_ADDR
// uc_nation := 2 ;
3344: LD_ADDR_OWVAR 21
3348: PUSH
3349: LD_INT 2
3351: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3352: LD_INT 0
3354: PPUSH
3355: LD_INT 2
3357: PPUSH
3358: LD_INT 2
3360: PPUSH
3361: CALL_OW 380
// eng := CreateHuman ;
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3375: LD_VAR 0 2
3379: PPUSH
3380: LD_INT 102
3382: PPUSH
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_INT 110
3400: PPUSH
3401: LD_INT 60
3403: PPUSH
3404: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3408: LD_ADDR_EXP 41
3412: PUSH
3413: LD_EXP 41
3417: PUSH
3418: LD_VAR 0 2
3422: UNION
3423: ST_TO_ADDR
// end else
3424: GO 3588
// begin for i in eng do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: FOR_IN
3437: IFFALSE 3586
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3439: LD_INT 10
3441: PPUSH
3442: LD_INT 1
3444: PPUSH
3445: CALL_OW 287
3449: IFFALSE 3500
// begin if IsInUnit ( i ) then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 310
3460: IFFALSE 3471
// ComExitBuilding ( i ) ;
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 10
3478: PPUSH
3479: CALL_OW 308
3483: NOT
3484: IFFALSE 3498
// AddComMoveToArea ( i , collectFarmerArea ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: LD_INT 10
3493: PPUSH
3494: CALL_OW 173
// end else
3498: GO 3584
// begin if damagedBuilding then
3500: LD_VAR 0 5
3504: IFFALSE 3548
// begin if IsInUnit ( i ) then
3506: LD_VAR 0 1
3510: PPUSH
3511: CALL_OW 310
3515: IFFALSE 3528
// ComExitBuilding ( i ) else
3517: LD_VAR 0 1
3521: PPUSH
3522: CALL_OW 122
3526: GO 3546
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_VAR 0 5
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: CALL_OW 130
// end else
3546: GO 3584
// if not IsInUnit ( i ) and not HasTask ( i ) then
3548: LD_VAR 0 1
3552: PPUSH
3553: CALL_OW 310
3557: NOT
3558: PUSH
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 314
3568: NOT
3569: AND
3570: IFFALSE 3584
// ComEnterUnit ( i , arDepot ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 5
3579: PPUSH
3580: CALL_OW 120
// end ; end ;
3584: GO 3436
3586: POP
3587: POP
// end ; end ;
3588: PPOPN 5
3590: END
// export function CargoEvacuation ; begin
3591: LD_INT 0
3593: PPUSH
// wait ( 0 0$3 ) ;
3594: LD_INT 105
3596: PPUSH
3597: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3601: LD_ADDR_EXP 22
3605: PUSH
3606: LD_EXP 22
3610: PUSH
3611: LD_INT 1
3613: MINUS
3614: ST_TO_ADDR
// if omarCargoCounter = 0 then
3615: LD_EXP 22
3619: PUSH
3620: LD_INT 0
3622: EQUAL
3623: IFFALSE 3627
// exit ;
3625: GO 3934
// if omarCargo then
3627: LD_EXP 45
3631: IFFALSE 3642
// RemoveUnit ( omarCargo ) ;
3633: LD_EXP 45
3637: PPUSH
3638: CALL_OW 64
// omarCargo := PrepareCargo ;
3642: LD_ADDR_EXP 45
3646: PUSH
3647: CALL 3939 0 0
3651: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3652: LD_EXP 45
3656: PPUSH
3657: LD_INT 0
3659: PPUSH
3660: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3664: LD_EXP 45
3668: PPUSH
3669: LD_INT 107
3671: PPUSH
3672: LD_INT 59
3674: PPUSH
3675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3679: LD_INT 35
3681: PPUSH
3682: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 45
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3701: LD_EXP 45
3705: PPUSH
3706: CALL_OW 302
3710: NOT
3711: PUSH
3712: LD_EXP 45
3716: PPUSH
3717: CALL_OW 301
3721: OR
3722: IFFALSE 3726
// exit ;
3724: GO 3934
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3726: LD_EXP 45
3730: PPUSH
3731: LD_INT 107
3733: PPUSH
3734: LD_INT 59
3736: PPUSH
3737: CALL_OW 307
3741: PUSH
3742: LD_EXP 45
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: CALL_OW 296
3754: PUSH
3755: LD_INT 6
3757: LESS
3758: OR
3759: IFFALSE 3679
// SetTag ( omarCargo , 1 ) ;
3761: LD_EXP 45
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 109
// wait ( 0 0$03 ) ;
3773: LD_INT 105
3775: PPUSH
3776: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3780: LD_EXP 45
3784: PPUSH
3785: LD_INT 5
3787: PPUSH
3788: LD_INT 1
3790: PPUSH
3791: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3795: LD_EXP 45
3799: PPUSH
3800: LD_INT 103
3802: PPUSH
3803: LD_INT 9
3805: PPUSH
3806: CALL_OW 171
// wait ( 0 0$1 ) ;
3810: LD_INT 35
3812: PPUSH
3813: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3817: LD_EXP 45
3821: PPUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 100
3827: PPUSH
3828: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3832: LD_INT 35
3834: PPUSH
3835: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3839: LD_EXP 45
3843: PPUSH
3844: LD_INT 103
3846: PPUSH
3847: LD_INT 9
3849: PPUSH
3850: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3854: LD_EXP 45
3858: PPUSH
3859: CALL_OW 302
3863: NOT
3864: PUSH
3865: LD_EXP 45
3869: PPUSH
3870: CALL_OW 301
3874: OR
3875: IFFALSE 3879
// exit ;
3877: GO 3934
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3879: LD_EXP 45
3883: PPUSH
3884: LD_INT 103
3886: PPUSH
3887: LD_INT 9
3889: PPUSH
3890: CALL_OW 307
3894: PUSH
3895: LD_EXP 45
3899: PPUSH
3900: LD_INT 3
3902: PPUSH
3903: CALL_OW 308
3907: OR
3908: PUSH
3909: LD_EXP 45
3913: PPUSH
3914: CALL_OW 110
3918: PUSH
3919: LD_INT 0
3921: GREATER
3922: AND
3923: IFFALSE 3832
// RemoveUnit ( omarCargo ) ;
3925: LD_EXP 45
3929: PPUSH
3930: CALL_OW 64
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PrepareCargo ; var un , veh ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3944: LD_ADDR_VAR 0 3
3948: PUSH
3949: LD_INT 5
3951: PPUSH
3952: LD_INT 2
3954: PPUSH
3955: LD_INT 14
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: LD_INT 32
3966: PPUSH
3967: LD_INT 80
3969: PPUSH
3970: CALL 341 0 7
3974: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 101
3994: PPUSH
3995: LD_INT 8
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4005: LD_INT 0
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 4
4013: PPUSH
4014: CALL_OW 380
// un := CreateHuman ;
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: CALL_OW 44
4027: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4028: LD_VAR 0 2
4032: PPUSH
4033: LD_VAR 0 3
4037: PPUSH
4038: CALL_OW 52
// result := veh ;
4042: LD_ADDR_VAR 0 1
4046: PUSH
4047: LD_VAR 0 3
4051: ST_TO_ADDR
// end ; end_of_file
4052: LD_VAR 0 1
4056: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
4061: PPUSH
// usForces := [ ] ;
4062: LD_ADDR_EXP 46
4066: PUSH
4067: EMPTY
4068: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4069: LD_ADDR_EXP 48
4073: PUSH
4074: LD_INT 6
4076: PUSH
4077: LD_INT 32
4079: PUSH
4080: LD_INT 27
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 43
4097: PUSH
4098: LD_INT 24
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 27
4112: PUSH
4113: LD_INT 29
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4133: LD_INT 11
4135: PPUSH
4136: CALL_OW 274
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_INT 150
4146: PUSH
4147: LD_INT 120
4149: PUSH
4150: LD_INT 100
4152: PUSH
4153: LD_INT 80
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: PUSH
4162: LD_OWVAR 67
4166: ARRAY
4167: PPUSH
4168: CALL_OW 277
// if Difficulty = 1 then
4172: LD_OWVAR 67
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: IFFALSE 4189
// RemoveUnit ( hillBun ) ;
4182: LD_INT 14
4184: PPUSH
4185: CALL_OW 64
// uc_side := 1 ;
4189: LD_ADDR_OWVAR 20
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// uc_nation := 1 ;
4197: LD_ADDR_OWVAR 21
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// hc_gallery :=  ;
4205: LD_ADDR_OWVAR 33
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// hc_name :=  ;
4213: LD_ADDR_OWVAR 26
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_importance := 0 ;
4221: LD_ADDR_OWVAR 32
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 380
// usCommander := CreateHuman ;
4242: LD_ADDR_EXP 47
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4252: LD_EXP 47
4256: PPUSH
4257: LD_INT 11
4259: PPUSH
4260: CALL_OW 52
// if Difficulty > 1 then
4264: LD_OWVAR 67
4268: PUSH
4269: LD_INT 1
4271: GREATER
4272: IFFALSE 4354
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: LD_INT 1
4282: PUSH
4283: LD_INT 2
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_OWVAR 67
4298: ARRAY
4299: PPUSH
4300: CALL_OW 380
// un := CreateHuman ;
4304: LD_ADDR_VAR 0 3
4308: PUSH
4309: CALL_OW 44
4313: ST_TO_ADDR
// usForces := usForces union un ;
4314: LD_ADDR_EXP 46
4318: PUSH
4319: LD_EXP 46
4323: PUSH
4324: LD_VAR 0 3
4328: UNION
4329: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4330: LD_VAR 0 3
4334: PPUSH
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_INT 14
4349: PPUSH
4350: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4354: LD_ADDR_VAR 0 2
4358: PUSH
4359: DOUBLE
4360: LD_INT 1
4362: DEC
4363: ST_TO_ADDR
4364: LD_INT 2
4366: PUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: LD_OWVAR 67
4386: ARRAY
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4535
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4391: LD_INT 0
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 1
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_OWVAR 67
4419: ARRAY
4420: PPUSH
4421: CALL_OW 380
// un := CreateHuman ;
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: CALL_OW 44
4434: ST_TO_ADDR
// usForces := usForces union un ;
4435: LD_ADDR_EXP 46
4439: PUSH
4440: LD_EXP 46
4444: PUSH
4445: LD_VAR 0 3
4449: UNION
4450: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_INT 39
4458: PPUSH
4459: LD_INT 24
4461: PPUSH
4462: LD_INT 4
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL_OW 50
// if i < 3 then
4472: LD_VAR 0 2
4476: PUSH
4477: LD_INT 3
4479: LESS
4480: IFFALSE 4533
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4482: LD_VAR 0 3
4486: PPUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 58
4499: PUSH
4500: EMPTY
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 31
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: PUSH
4523: LD_VAR 0 2
4527: ARRAY
4528: PPUSH
4529: CALL_OW 120
// end ;
4533: GO 4388
4535: POP
4536: POP
// for i := 1 to 2 do
4537: LD_ADDR_VAR 0 2
4541: PUSH
4542: DOUBLE
4543: LD_INT 1
4545: DEC
4546: ST_TO_ADDR
4547: LD_INT 2
4549: PUSH
4550: FOR_TO
4551: IFFALSE 4615
// begin PrepareHuman ( false , 2 , 2 ) ;
4553: LD_INT 0
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 380
// un := CreateHuman ;
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// usForces := usForces union un ;
4576: LD_ADDR_EXP 46
4580: PUSH
4581: LD_EXP 46
4585: PUSH
4586: LD_VAR 0 3
4590: UNION
4591: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4592: LD_VAR 0 3
4596: PPUSH
4597: LD_INT 39
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 4
4605: PPUSH
4606: LD_INT 0
4608: PPUSH
4609: CALL_OW 50
// end ;
4613: GO 4550
4615: POP
4616: POP
// PrepareHuman ( false , 4 , 1 ) ;
4617: LD_INT 0
4619: PPUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 380
// un := CreateHuman ;
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: CALL_OW 44
4639: ST_TO_ADDR
// usForces := usForces union un ;
4640: LD_ADDR_EXP 46
4644: PUSH
4645: LD_EXP 46
4649: PUSH
4650: LD_VAR 0 3
4654: UNION
4655: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4656: LD_VAR 0 3
4660: PPUSH
4661: LD_INT 39
4663: PPUSH
4664: LD_INT 24
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 50
// end ;
4677: LD_VAR 0 1
4681: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4682: LD_EXP 46
4686: PUSH
4687: LD_EXP 7
4691: NOT
4692: AND
4693: PUSH
4694: LD_EXP 15
4698: NOT
4699: AND
4700: IFFALSE 5131
4702: GO 4704
4704: DISABLE
4705: LD_INT 0
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
// begin enable ;
4712: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4713: LD_ADDR_VAR 0 3
4717: PUSH
4718: LD_EXP 46
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 72
4737: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4738: LD_ADDR_VAR 0 4
4742: PUSH
4743: LD_EXP 46
4747: PPUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 72
4762: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4763: LD_ADDR_VAR 0 5
4767: PUSH
4768: LD_EXP 46
4772: PPUSH
4773: LD_INT 25
4775: PUSH
4776: LD_INT 4
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PPUSH
4783: CALL_OW 72
4787: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4788: LD_INT 7
4790: PPUSH
4791: LD_INT 22
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 70
4805: PUSH
4806: LD_INT 1
4808: EQUAL
4809: IFFALSE 4885
// for i in sol do
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: FOR_IN
4822: IFFALSE 4883
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4824: LD_VAR 0 1
4828: PPUSH
4829: CALL_OW 310
4833: NOT
4834: PUSH
4835: LD_VAR 0 1
4839: PPUSH
4840: CALL_OW 310
4844: PPUSH
4845: CALL_OW 266
4849: PUSH
4850: LD_INT 4
4852: EQUAL
4853: NOT
4854: OR
4855: IFFALSE 4881
// begin ComExitBuilding ( i ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_INT 37
4873: PPUSH
4874: LD_INT 23
4876: PPUSH
4877: CALL_OW 174
// end ;
4881: GO 4821
4883: POP
4884: POP
// if eng then
4885: LD_VAR 0 3
4889: IFFALSE 5131
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 22
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 95
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 21
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 24
4931: PUSH
4932: LD_INT 1000
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: PPUSH
4949: CALL_OW 69
4953: ST_TO_ADDR
// if b then
4954: LD_VAR 0 2
4958: IFFALSE 4989
// begin ComExitBuilding ( eng ) ;
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4969: LD_VAR 0 3
4973: PPUSH
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 190
// end else
4987: GO 5131
// begin for i in eng do
4989: LD_ADDR_VAR 0 1
4993: PUSH
4994: LD_VAR 0 3
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5129
// if not HasTask ( i ) then
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 314
5011: NOT
5012: IFFALSE 5127
// begin if americanBuildList then
5014: LD_EXP 48
5018: IFFALSE 5103
// begin if IsInUnit ( i ) then
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 310
5029: IFFALSE 5040
// ComExitBuilding ( i ) ;
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_EXP 48
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_INT 1
5065: ARRAY
5066: PUSH
5067: LD_INT 2
5069: ARRAY
5070: PPUSH
5071: LD_EXP 48
5075: PUSH
5076: LD_INT 1
5078: ARRAY
5079: PUSH
5080: LD_INT 3
5082: ARRAY
5083: PPUSH
5084: LD_EXP 48
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: PUSH
5093: LD_INT 4
5095: ARRAY
5096: PPUSH
5097: CALL_OW 205
// end else
5101: GO 5127
// if not IsInUnit ( i ) then
5103: LD_VAR 0 1
5107: PPUSH
5108: CALL_OW 310
5112: NOT
5113: IFFALSE 5127
// ComEnterUnit ( i , usDepot ) ;
5115: LD_VAR 0 1
5119: PPUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 120
// end ;
5127: GO 4999
5129: POP
5130: POP
// end ; end ; end ;
5131: PPOPN 5
5133: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5134: LD_INT 0
5136: PPUSH
5137: PPUSH
5138: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 35
5146: PUSH
5147: LD_INT 45
5149: PUSH
5150: LD_INT 48
5152: PUSH
5153: LD_INT 82
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: ST_TO_ADDR
// for i in tech do
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 3
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5191
// AddComResearch ( lab , i ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 4
5184: PPUSH
5185: CALL_OW 184
5189: GO 5172
5191: POP
5192: POP
// end ;
5193: LD_VAR 0 2
5197: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5198: LD_EXP 13
5202: PUSH
5203: LD_EXP 24
5207: PUSH
5208: LD_EXP 28
5212: LESSEQUAL
5213: AND
5214: IFFALSE 5239
5216: GO 5218
5218: DISABLE
// begin enable ;
5219: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5220: LD_INT 35
5222: PPUSH
5223: LD_INT 2065
5225: PPUSH
5226: CALL_OW 12
5230: PPUSH
5231: CALL_OW 67
// SendConvoy ;
5235: CALL 5345 0 0
// end ;
5239: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5240: LD_EXP 7
5244: PUSH
5245: LD_EXP 19
5249: AND
5250: IFFALSE 5344
5252: GO 5254
5254: DISABLE
// begin if americanHasEscaped then
5255: LD_EXP 9
5259: IFFALSE 5270
// wait ( 3 3$20 ) else
5261: LD_INT 7000
5263: PPUSH
5264: CALL_OW 67
5268: GO 5277
// wait ( 6 6$40 ) ;
5270: LD_INT 14000
5272: PPUSH
5273: CALL_OW 67
// SendAttack ;
5277: CALL 6118 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5281: LD_INT 14000
5283: PUSH
5284: LD_INT 11900
5286: PUSH
5287: LD_INT 11200
5289: PUSH
5290: LD_INT 10150
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_OWVAR 67
5303: ARRAY
5304: PPUSH
5305: CALL_OW 67
// SendAttack ;
5309: CALL 6118 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5313: LD_EXP 20
5317: PUSH
5318: LD_INT 5
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_OWVAR 67
5340: ARRAY
5341: LESS
5342: IFFALSE 5281
// end ;
5344: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
5354: PPUSH
// road := rand ( 1 , 2 ) ;
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: CALL_OW 12
5370: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5371: LD_ADDR_VAR 0 8
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 8
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_VAR 0 4
5390: ARRAY
5391: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5392: LD_ADDR_VAR 0 5
5396: PUSH
5397: LD_INT 35
5399: PUSH
5400: LD_INT 66
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 101
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: LD_INT 4
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5429: LD_ADDR_VAR 0 6
5433: PUSH
5434: LD_INT 34
5436: PUSH
5437: LD_INT 67
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 38
5446: PUSH
5447: LD_INT 62
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 43
5456: PUSH
5457: LD_INT 54
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 57
5466: PUSH
5467: LD_INT 57
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 77
5476: PUSH
5477: LD_INT 71
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 86
5486: PUSH
5487: LD_INT 60
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 89
5496: PUSH
5497: LD_INT 35
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 93
5506: PUSH
5507: LD_INT 17
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 97
5516: PUSH
5517: LD_INT 10
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 103
5526: PUSH
5527: LD_INT 9
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// if road = 2 then
5546: LD_VAR 0 4
5550: PUSH
5551: LD_INT 2
5553: EQUAL
5554: IFFALSE 5571
// points := ReverseArray ( points ) ;
5556: LD_ADDR_VAR 0 6
5560: PUSH
5561: LD_VAR 0 6
5565: PPUSH
5566: CALL 72686 0 1
5570: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 12
5588: PPUSH
5589: LD_INT 80
5591: PPUSH
5592: CALL 341 0 7
// veh := CreateVehicle ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: CALL_OW 45
5605: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_VAR 0 5
5615: PUSH
5616: LD_VAR 0 4
5620: ARRAY
5621: PUSH
5622: LD_INT 3
5624: ARRAY
5625: PPUSH
5626: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5630: LD_VAR 0 3
5634: PPUSH
5635: LD_VAR 0 5
5639: PUSH
5640: LD_VAR 0 4
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: LD_VAR 0 5
5654: PUSH
5655: LD_VAR 0 4
5659: ARRAY
5660: PUSH
5661: LD_INT 2
5663: ARRAY
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5672: LD_INT 0
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_OWVAR 67
5682: PPUSH
5683: CALL_OW 380
// un := CreateHuman ;
5687: LD_ADDR_VAR 0 2
5691: PUSH
5692: CALL_OW 44
5696: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_VAR 0 3
5706: PPUSH
5707: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5711: LD_INT 70
5713: PUSH
5714: LD_INT 66
5716: PUSH
5717: LD_INT 62
5719: PUSH
5720: LD_INT 58
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_OWVAR 67
5733: ARRAY
5734: PPUSH
5735: CALL_OW 13
5739: PUSH
5740: LD_OWVAR 1
5744: PUSH
5745: LD_INT 30
5747: MOD
5748: PLUS
5749: PUSH
5750: LD_EXP 24
5754: PUSH
5755: LD_INT 4
5757: LESS
5758: OR
5759: IFFALSE 5776
// SetCargo ( veh , mat_cans , 100 ) ;
5761: LD_VAR 0 3
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 100
5771: PPUSH
5772: CALL_OW 290
// for i := 2 to points do
5776: LD_ADDR_VAR 0 7
5780: PUSH
5781: DOUBLE
5782: LD_INT 2
5784: DEC
5785: ST_TO_ADDR
5786: LD_VAR 0 6
5790: PUSH
5791: FOR_TO
5792: IFFALSE 5835
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5794: LD_VAR 0 3
5798: PPUSH
5799: LD_VAR 0 6
5803: PUSH
5804: LD_VAR 0 7
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: ARRAY
5813: PPUSH
5814: LD_VAR 0 6
5818: PUSH
5819: LD_VAR 0 7
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: CALL_OW 171
5833: GO 5791
5835: POP
5836: POP
// convoyCounter := convoyCounter + 1 ;
5837: LD_ADDR_EXP 24
5841: PUSH
5842: LD_EXP 24
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5851: LD_INT 35
5853: PPUSH
5854: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5858: LD_VAR 0 3
5862: PPUSH
5863: CALL_OW 255
5867: PUSH
5868: LD_INT 4
5870: NONEQUAL
5871: IFFALSE 5884
// begin ComStop ( veh ) ;
5873: LD_VAR 0 3
5877: PPUSH
5878: CALL_OW 141
// exit ;
5882: GO 6113
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5884: LD_VAR 0 3
5888: PPUSH
5889: CALL_OW 314
5893: NOT
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: CALL_OW 302
5904: AND
5905: IFFALSE 5946
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5907: LD_VAR 0 3
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_VAR 0 6
5921: ARRAY
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_VAR 0 6
5931: PUSH
5932: LD_VAR 0 6
5936: ARRAY
5937: PUSH
5938: LD_INT 2
5940: ARRAY
5941: PPUSH
5942: CALL_OW 111
// if not IsInUnit ( un ) then
5946: LD_VAR 0 2
5950: PPUSH
5951: CALL_OW 310
5955: NOT
5956: IFFALSE 5997
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_VAR 0 6
5967: PUSH
5968: LD_VAR 0 6
5972: ARRAY
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: LD_VAR 0 6
5982: PUSH
5983: LD_VAR 0 6
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_VAR 0 8
6006: PPUSH
6007: CALL_OW 308
6011: PUSH
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_VAR 0 8
6021: PPUSH
6022: CALL_OW 308
6026: OR
6027: IFFALSE 5851
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6029: LD_VAR 0 2
6033: PPUSH
6034: CALL_OW 302
6038: PUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 302
6048: NOT
6049: AND
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 8
6060: PPUSH
6061: CALL_OW 308
6065: AND
6066: IFFALSE 6077
// RemoveUnit ( un ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 8
6086: PPUSH
6087: CALL_OW 308
6091: PUSH
6092: LD_VAR 0 3
6096: PPUSH
6097: CALL_OW 302
6101: AND
6102: IFFALSE 6113
// RemoveUnit ( veh ) ;
6104: LD_VAR 0 3
6108: PPUSH
6109: CALL_OW 64
// end ;
6113: LD_VAR 0 1
6117: RET
// export function SendAttack ; var un , veh , i ; begin
6118: LD_INT 0
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
// if blockAttack then
6124: LD_EXP 29
6128: IFFALSE 6151
// begin repeat wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// until not blockAttack ;
6137: LD_EXP 29
6141: NOT
6142: IFFALSE 6130
// wait ( 0 0$5 ) ;
6144: LD_INT 175
6146: PPUSH
6147: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: PUSH
6180: LD_INT 10
6182: GREATER
6183: IFFALSE 6226
// begin repeat wait ( 0 0$1 ) ;
6185: LD_INT 35
6187: PPUSH
6188: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6192: LD_INT 22
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: PUSH
6221: LD_INT 10
6223: LESSEQUAL
6224: IFFALSE 6185
// end ; IncomingAttack ;
6226: CALL 15540 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6230: LD_INT 2100
6232: PPUSH
6233: LD_INT 3500
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: CALL_OW 67
// if blockAttack then
6245: LD_EXP 29
6249: IFFALSE 6272
// begin repeat wait ( 0 0$1 ) ;
6251: LD_INT 35
6253: PPUSH
6254: CALL_OW 67
// until not blockAttack ;
6258: LD_EXP 29
6262: NOT
6263: IFFALSE 6251
// wait ( 0 0$5 ) ;
6265: LD_INT 175
6267: PPUSH
6268: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PUSH
6306: LD_EXP 20
6310: PUSH
6311: LD_INT 3
6313: DIV
6314: PLUS
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6433
// begin uc_side := 1 ;
6319: LD_ADDR_OWVAR 20
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// uc_nation := 1 ;
6327: LD_ADDR_OWVAR 21
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6335: LD_INT 0
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 2
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: LD_INT 4
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_OWVAR 67
6363: ARRAY
6364: PPUSH
6365: CALL_OW 380
// un := CreateHuman ;
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: CALL_OW 44
6378: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_INT 37
6386: PPUSH
6387: LD_INT 70
6389: PPUSH
6390: LD_INT 3
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: CALL_OW 50
// usAttackers := usAttackers union un ;
6400: LD_ADDR_EXP 49
6404: PUSH
6405: LD_EXP 49
6409: PUSH
6410: LD_VAR 0 2
6414: UNION
6415: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6416: LD_VAR 0 2
6420: PPUSH
6421: LD_INT 40
6423: PPUSH
6424: LD_INT 65
6426: PPUSH
6427: CALL_OW 111
// end ;
6431: GO 6316
6433: POP
6434: POP
// uc_side := 1 ;
6435: LD_ADDR_OWVAR 20
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// uc_nation := 1 ;
6443: LD_ADDR_OWVAR 21
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6451: LD_INT 0
6453: PPUSH
6454: LD_INT 4
6456: PPUSH
6457: LD_INT 2
6459: PPUSH
6460: CALL_OW 380
// un := CreateHuman ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: CALL_OW 44
6473: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6474: LD_VAR 0 2
6478: PPUSH
6479: LD_INT 37
6481: PPUSH
6482: LD_INT 70
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: LD_INT 0
6490: PPUSH
6491: CALL_OW 50
// usAttackers := usAttackers union un ;
6495: LD_ADDR_EXP 49
6499: PUSH
6500: LD_EXP 49
6504: PUSH
6505: LD_VAR 0 2
6509: UNION
6510: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6511: LD_VAR 0 2
6515: PPUSH
6516: LD_INT 40
6518: PPUSH
6519: LD_INT 65
6521: PPUSH
6522: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6526: LD_ADDR_VAR 0 4
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_OWVAR 67
6540: PUSH
6541: LD_EXP 20
6545: PUSH
6546: LD_INT 4
6548: DIV
6549: PLUS
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6748
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL_OW 12
6589: ARRAY
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: LD_INT 1
6596: PPUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: ARRAY
6622: PPUSH
6623: LD_INT 90
6625: PPUSH
6626: CALL 341 0 7
6630: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6631: LD_VAR 0 3
6635: PPUSH
6636: LD_INT 35
6638: PPUSH
6639: LD_INT 65
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6649: LD_INT 0
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_OWVAR 67
6659: PUSH
6660: LD_INT 1
6662: PLUS
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6678: LD_VAR 0 2
6682: PPUSH
6683: LD_VAR 0 3
6687: PPUSH
6688: CALL_OW 52
// usAttackers := usAttackers union un ;
6692: LD_ADDR_EXP 49
6696: PUSH
6697: LD_EXP 49
6701: PUSH
6702: LD_VAR 0 2
6706: UNION
6707: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6708: LD_VAR 0 3
6712: PPUSH
6713: LD_INT 39
6715: PPUSH
6716: LD_INT 60
6718: PPUSH
6719: CALL_OW 111
// wait ( 0 0$3 ) ;
6723: LD_INT 105
6725: PPUSH
6726: CALL_OW 67
// usAttackers := usAttackers union veh ;
6730: LD_ADDR_EXP 49
6734: PUSH
6735: LD_EXP 49
6739: PUSH
6740: LD_VAR 0 3
6744: UNION
6745: ST_TO_ADDR
// end ;
6746: GO 6551
6748: POP
6749: POP
// attackWave := attackWave + 1 ;
6750: LD_ADDR_EXP 20
6754: PUSH
6755: LD_EXP 20
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6764: LD_EXP 25
6768: PPUSH
6769: CALL_OW 427
// end ;
6773: LD_VAR 0 1
6777: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6778: LD_INT 0
6780: PPUSH
6781: PPUSH
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
// if retreatAllowed then
6791: LD_EXP 12
6795: IFFALSE 6807
// strategy := 2 else
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: LD_INT 2
6804: ST_TO_ADDR
6805: GO 6823
// strategy := rand ( 0 , 2 ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 0
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: CALL_OW 12
6822: ST_TO_ADDR
// attackFormula := [ ] ;
6823: LD_ADDR_VAR 0 6
6827: PUSH
6828: EMPTY
6829: ST_TO_ADDR
// case strategy of 0 :
6830: LD_VAR 0 5
6834: PUSH
6835: LD_INT 0
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 7173
6843: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6844: LD_INT 11
6846: PPUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 30
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 70
6875: NOT
6876: IFFALSE 6948
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_INT 41
6885: PUSH
6886: LD_INT 34
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: PUSH
6896: LD_INT 53
6898: PUSH
6899: LD_INT 62
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 37
6908: PUSH
6909: LD_INT 63
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 44
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 37
6928: PUSH
6929: LD_INT 28
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7171
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6948: LD_INT 12
6950: PPUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 2
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 2
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: NOT
7009: IFFALSE 7092
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7011: LD_ADDR_VAR 0 6
7015: PUSH
7016: LD_INT 27
7018: PUSH
7019: LD_INT 42
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 27
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 53
7042: PUSH
7043: LD_INT 62
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 37
7052: PUSH
7053: LD_INT 63
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 44
7062: PUSH
7063: LD_INT 45
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 37
7072: PUSH
7073: LD_INT 28
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7171
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_INT 71
7099: PUSH
7100: LD_INT 67
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 54
7109: PUSH
7110: LD_INT 35
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 63
7123: PUSH
7124: LD_INT 40
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 37
7133: PUSH
7134: LD_INT 63
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 44
7143: PUSH
7144: LD_INT 45
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 37
7153: PUSH
7154: LD_INT 28
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: ST_TO_ADDR
// end ; 1 :
7171: GO 7376
7173: LD_INT 1
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7285
7181: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7182: LD_ADDR_VAR 0 6
7186: PUSH
7187: LD_INT 71
7189: PUSH
7190: LD_INT 67
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 82
7199: PUSH
7200: LD_INT 23
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 53
7209: PUSH
7210: LD_INT 7
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 43
7219: PUSH
7220: LD_INT 10
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 53
7235: PUSH
7236: LD_INT 62
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 37
7245: PUSH
7246: LD_INT 63
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 44
7255: PUSH
7256: LD_INT 45
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 37
7265: PUSH
7266: LD_INT 28
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: ST_TO_ADDR
7283: GO 7376
7285: LD_INT 2
7287: DOUBLE
7288: EQUAL
7289: IFTRUE 7293
7291: GO 7375
7293: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7294: LD_ADDR_VAR 0 6
7298: PUSH
7299: LD_INT 90
7301: PUSH
7302: LD_INT 59
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 108
7311: PUSH
7312: LD_INT 64
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 82
7325: PUSH
7326: LD_INT 75
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 73
7335: PUSH
7336: LD_INT 67
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 101
7345: PUSH
7346: LD_INT 65
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 108
7355: PUSH
7356: LD_INT 62
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
7373: GO 7376
7375: POP
// if not attackFormula then
7376: LD_VAR 0 6
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 9063
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7385: LD_ADDR_VAR 0 7
7389: PUSH
7390: LD_EXP 49
7394: PPUSH
7395: LD_INT 25
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 72
7409: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7410: LD_ADDR_VAR 0 8
7414: PUSH
7415: LD_EXP 49
7419: PPUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 4
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 72
7434: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7435: LD_ADDR_VAR 0 9
7439: PUSH
7440: LD_EXP 49
7444: PPUSH
7445: LD_INT 25
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 72
7459: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7460: LD_ADDR_VAR 0 10
7464: PUSH
7465: LD_EXP 49
7469: PPUSH
7470: LD_INT 21
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: ST_TO_ADDR
// if sci then
7485: LD_VAR 0 8
7489: IFFALSE 7526
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7491: LD_VAR 0 8
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: LD_VAR 0 6
7513: PUSH
7514: LD_INT 2
7516: ARRAY
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: PPUSH
7522: CALL_OW 111
// repeat wait ( 10 ) ;
7526: LD_INT 10
7528: PPUSH
7529: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7533: LD_ADDR_VAR 0 7
7537: PUSH
7538: LD_EXP 49
7542: PPUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 72
7557: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7558: LD_ADDR_VAR 0 8
7562: PUSH
7563: LD_EXP 49
7567: PPUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 72
7582: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7583: LD_ADDR_VAR 0 9
7587: PUSH
7588: LD_EXP 49
7592: PPUSH
7593: LD_INT 25
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 72
7607: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7608: LD_ADDR_VAR 0 10
7612: PUSH
7613: LD_EXP 49
7617: PPUSH
7618: LD_INT 21
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 72
7632: ST_TO_ADDR
// if sol then
7633: LD_VAR 0 7
7637: IFFALSE 8058
// begin for i in sol do
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_VAR 0 7
7648: PUSH
7649: FOR_IN
7650: IFFALSE 8056
// begin tag := GetTag ( i ) ;
7652: LD_ADDR_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: PPUSH
7662: CALL_OW 110
7666: ST_TO_ADDR
// if not tag then
7667: LD_VAR 0 4
7671: NOT
7672: IFFALSE 7781
// begin if GetLives ( i ) = 1000 then
7674: LD_VAR 0 2
7678: PPUSH
7679: CALL_OW 256
7683: PUSH
7684: LD_INT 1000
7686: EQUAL
7687: IFFALSE 7703
// SetTag ( i , 1 ) else
7689: LD_VAR 0 2
7693: PPUSH
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 109
7701: GO 7779
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7703: LD_VAR 0 2
7707: PPUSH
7708: LD_VAR 0 6
7712: PUSH
7713: LD_INT 2
7715: ARRAY
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: ARRAY
7729: PUSH
7730: LD_INT 2
7732: ARRAY
7733: PPUSH
7734: CALL_OW 297
7738: PUSH
7739: LD_INT 10
7741: GREATER
7742: IFFALSE 7779
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_VAR 0 6
7753: PUSH
7754: LD_INT 2
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PUSH
7771: LD_INT 2
7773: ARRAY
7774: PPUSH
7775: CALL_OW 111
// end else
7779: GO 8054
// begin if GetLives ( i ) < 760 then
7781: LD_VAR 0 2
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 760
7793: LESS
7794: IFFALSE 7845
// begin SetTag ( i , 0 ) ;
7796: LD_VAR 0 2
7800: PPUSH
7801: LD_INT 0
7803: PPUSH
7804: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7808: LD_VAR 0 2
7812: PPUSH
7813: LD_VAR 0 6
7817: PUSH
7818: LD_INT 2
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_VAR 0 6
7830: PUSH
7831: LD_INT 2
7833: ARRAY
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: PPUSH
7839: CALL_OW 111
// end else
7843: GO 8054
// if tag <= attackFormula [ 1 ] then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 6
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: LESSEQUAL
7859: IFFALSE 8020
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 6
7870: PUSH
7871: LD_INT 1
7873: ARRAY
7874: PUSH
7875: LD_VAR 0 4
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 6
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PUSH
7900: LD_INT 2
7902: ARRAY
7903: PPUSH
7904: CALL_OW 297
7908: PUSH
7909: LD_INT 6
7911: GREATER
7912: IFFALSE 7963
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7914: LD_VAR 0 2
7918: PPUSH
7919: LD_VAR 0 6
7923: PUSH
7924: LD_INT 1
7926: ARRAY
7927: PUSH
7928: LD_VAR 0 4
7932: ARRAY
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 6
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PUSH
7947: LD_VAR 0 4
7951: ARRAY
7952: PUSH
7953: LD_INT 2
7955: ARRAY
7956: PPUSH
7957: CALL_OW 114
7961: GO 8018
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7963: LD_INT 81
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 91
7975: PUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 10
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PPUSH
7993: CALL_OW 69
7997: NOT
7998: IFFALSE 8018
// SetTag ( i , tag + 1 ) ;
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: PLUS
8013: PPUSH
8014: CALL_OW 109
// end else
8018: GO 8054
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 81
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PPUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 74
8049: PPUSH
8050: CALL_OW 115
// end ; end ;
8054: GO 7649
8056: POP
8057: POP
// end ; if sci then
8058: LD_VAR 0 8
8062: IFFALSE 8331
// begin if not sol and not mech then
8064: LD_VAR 0 7
8068: NOT
8069: PUSH
8070: LD_VAR 0 9
8074: NOT
8075: AND
8076: IFFALSE 8128
// begin for i in sci do
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_VAR 0 8
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8124
// begin usForces := usForces union i ;
8091: LD_ADDR_EXP 46
8095: PUSH
8096: LD_EXP 46
8100: PUSH
8101: LD_VAR 0 2
8105: UNION
8106: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_INT 34
8114: PPUSH
8115: LD_INT 68
8117: PPUSH
8118: CALL_OW 111
// end ;
8122: GO 8088
8124: POP
8125: POP
// end else
8126: GO 8331
// for i in sci do
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 8
8137: PUSH
8138: FOR_IN
8139: IFFALSE 8329
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_VAR 0 6
8150: PUSH
8151: LD_INT 2
8153: ARRAY
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 6
8163: PUSH
8164: LD_INT 2
8166: ARRAY
8167: PUSH
8168: LD_INT 2
8170: ARRAY
8171: PPUSH
8172: CALL_OW 297
8176: PUSH
8177: LD_INT 10
8179: GREATER
8180: IFFALSE 8219
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_VAR 0 6
8191: PUSH
8192: LD_INT 2
8194: ARRAY
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 6
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PPUSH
8213: CALL_OW 111
8217: GO 8327
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8219: LD_VAR 0 7
8223: PPUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: LD_INT 1000
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 91
8243: PUSH
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 10
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: IFFALSE 8327
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_VAR 0 7
8276: PPUSH
8277: LD_INT 3
8279: PUSH
8280: LD_INT 24
8282: PUSH
8283: LD_INT 1000
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 91
8296: PUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 10
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 72
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: CALL_OW 128
8327: GO 8138
8329: POP
8330: POP
// end ; if mech then
8331: LD_VAR 0 9
8335: IFFALSE 9045
// begin for i in mech do
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: FOR_IN
8348: IFFALSE 9043
// begin tag := GetTag ( i ) ;
8350: LD_ADDR_VAR 0 4
8354: PUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 110
8364: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8365: LD_ADDR_VAR 0 11
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 310
8379: ST_TO_ADDR
// if not tag then
8380: LD_VAR 0 4
8384: NOT
8385: IFFALSE 8756
// begin if veh then
8387: LD_VAR 0 11
8391: IFFALSE 8562
// begin if GetLives ( veh ) = 1000 then
8393: LD_VAR 0 11
8397: PPUSH
8398: CALL_OW 256
8402: PUSH
8403: LD_INT 1000
8405: EQUAL
8406: IFFALSE 8422
// SetTag ( i , 1 ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 1
8415: PPUSH
8416: CALL_OW 109
8420: GO 8560
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8422: LD_VAR 0 11
8426: PPUSH
8427: LD_VAR 0 6
8431: PUSH
8432: LD_INT 3
8434: ARRAY
8435: PUSH
8436: LD_INT 1
8438: ARRAY
8439: PPUSH
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 3
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PPUSH
8453: CALL_OW 297
8457: PUSH
8458: LD_INT 8
8460: GREATER
8461: IFFALSE 8500
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8463: LD_VAR 0 11
8467: PPUSH
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 6
8485: PUSH
8486: LD_INT 3
8488: ARRAY
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 111
8498: GO 8560
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8500: LD_INT 81
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 91
8512: PUSH
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 12
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: NOT
8535: IFFALSE 8560
// begin ComExitVehicle ( i ) ;
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 11
8555: PPUSH
8556: CALL_OW 189
// end ; end else
8560: GO 8754
// if GetLives ( i ) < 400 then
8562: LD_VAR 0 2
8566: PPUSH
8567: CALL_OW 256
8571: PUSH
8572: LD_INT 400
8574: LESS
8575: IFFALSE 8626
// begin usAttackers := usAttackers diff i ;
8577: LD_ADDR_EXP 49
8581: PUSH
8582: LD_EXP 49
8586: PUSH
8587: LD_VAR 0 2
8591: DIFF
8592: ST_TO_ADDR
// usForces := usForces union i ;
8593: LD_ADDR_EXP 46
8597: PUSH
8598: LD_EXP 46
8602: PUSH
8603: LD_VAR 0 2
8607: UNION
8608: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 34
8616: PPUSH
8617: LD_INT 68
8619: PPUSH
8620: CALL_OW 111
// end else
8624: GO 8754
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8626: LD_VAR 0 10
8630: PPUSH
8631: LD_INT 58
8633: PUSH
8634: EMPTY
8635: LIST
8636: PUSH
8637: LD_INT 24
8639: PUSH
8640: LD_INT 1000
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 72
8655: PUSH
8656: LD_VAR 0 2
8660: PPUSH
8661: CALL_OW 314
8665: NOT
8666: AND
8667: PUSH
8668: LD_INT 81
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 91
8680: PUSH
8681: LD_VAR 0 2
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: OR
8703: IFFALSE 8754
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_VAR 0 10
8714: PPUSH
8715: LD_INT 58
8717: PUSH
8718: EMPTY
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 250
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 72
8739: PPUSH
8740: LD_VAR 0 2
8744: PPUSH
8745: CALL_OW 74
8749: PPUSH
8750: CALL_OW 120
// end else
8754: GO 9041
// begin if veh and GetLives ( veh ) < 760 then
8756: LD_VAR 0 11
8760: PUSH
8761: LD_VAR 0 11
8765: PPUSH
8766: CALL_OW 256
8770: PUSH
8771: LD_INT 760
8773: LESS
8774: AND
8775: IFFALSE 8826
// begin SetTag ( i , 0 ) ;
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 0
8784: PPUSH
8785: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8789: LD_VAR 0 11
8793: PPUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 3
8801: ARRAY
8802: PUSH
8803: LD_INT 1
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 6
8811: PUSH
8812: LD_INT 3
8814: ARRAY
8815: PUSH
8816: LD_INT 2
8818: ARRAY
8819: PPUSH
8820: CALL_OW 111
// end else
8824: GO 9041
// if veh then
8826: LD_VAR 0 11
8830: IFFALSE 9041
// if tag <= attackFormula [ 4 ] then
8832: LD_VAR 0 4
8836: PUSH
8837: LD_VAR 0 6
8841: PUSH
8842: LD_INT 4
8844: ARRAY
8845: LESSEQUAL
8846: IFFALSE 9007
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8848: LD_VAR 0 11
8852: PPUSH
8853: LD_VAR 0 6
8857: PUSH
8858: LD_INT 4
8860: ARRAY
8861: PUSH
8862: LD_VAR 0 4
8866: ARRAY
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_INT 4
8879: ARRAY
8880: PUSH
8881: LD_VAR 0 4
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: PPUSH
8891: CALL_OW 297
8895: PUSH
8896: LD_INT 6
8898: GREATER
8899: IFFALSE 8950
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8901: LD_VAR 0 11
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 4
8913: ARRAY
8914: PUSH
8915: LD_VAR 0 4
8919: ARRAY
8920: PUSH
8921: LD_INT 1
8923: ARRAY
8924: PPUSH
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 4
8932: ARRAY
8933: PUSH
8934: LD_VAR 0 4
8938: ARRAY
8939: PUSH
8940: LD_INT 2
8942: ARRAY
8943: PPUSH
8944: CALL_OW 114
8948: GO 9005
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8950: LD_INT 81
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 91
8962: PUSH
8963: LD_VAR 0 11
8967: PUSH
8968: LD_INT 10
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 69
8984: NOT
8985: IFFALSE 9005
// SetTag ( i , tag + 1 ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_VAR 0 4
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: PPUSH
9001: CALL_OW 109
// end else
9005: GO 9041
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9007: LD_VAR 0 11
9011: PPUSH
9012: LD_INT 81
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL_OW 74
9036: PPUSH
9037: CALL_OW 115
// end ; end ;
9041: GO 8347
9043: POP
9044: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9045: LD_EXP 49
9049: PPUSH
9050: LD_INT 52
9052: PUSH
9053: EMPTY
9054: LIST
9055: PPUSH
9056: CALL_OW 72
9060: NOT
9061: IFFALSE 7526
// end ;
9063: LD_VAR 0 1
9067: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9068: LD_INT 22
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 32
9080: PUSH
9081: LD_INT 1
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: IFFALSE 9173
9098: GO 9100
9100: DISABLE
9101: LD_INT 0
9103: PPUSH
// begin enable ;
9104: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 32
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9171
// if GetFuel ( i ) < 10 then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 261
9151: PUSH
9152: LD_INT 10
9154: LESS
9155: IFFALSE 9169
// SetFuel ( i , 10 ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_INT 10
9164: PPUSH
9165: CALL_OW 240
9169: GO 9139
9171: POP
9172: POP
// end ; end_of_file
9173: PPOPN 1
9175: END
// export function Action ; var hasAll , i , tmp ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9182: LD_ADDR_VAR 0 2
9186: PUSH
9187: LD_INT 22
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 21
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 23
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 69
9226: PUSH
9227: LD_INT 7
9229: GREATEREQUAL
9230: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_STRING 03_HasAll
9238: PPUSH
9239: CALL_OW 39
// Video ( true ) ;
9243: LD_INT 1
9245: PPUSH
9246: CALL 77351 0 1
// CenterNowOnUnits ( Heike ) ;
9250: LD_EXP 30
9254: PPUSH
9255: CALL_OW 87
// wait ( 0 0$2 ) ;
9259: LD_INT 70
9261: PPUSH
9262: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9266: LD_EXP 38
9270: PPUSH
9271: LD_STRING DF-1-start
9273: PPUSH
9274: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9278: LD_EXP 30
9282: PPUSH
9283: LD_EXP 38
9287: PPUSH
9288: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DH-1-start
9299: PPUSH
9300: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9304: LD_EXP 39
9308: PPUSH
9309: LD_INT 92
9311: PPUSH
9312: LD_INT 21
9314: PPUSH
9315: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9319: LD_EXP 34
9323: PPUSH
9324: LD_INT 94
9326: PPUSH
9327: LD_INT 23
9329: PPUSH
9330: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9334: LD_EXP 42
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_INT 90
9345: PPUSH
9346: LD_INT 23
9348: PPUSH
9349: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9353: LD_EXP 42
9357: PUSH
9358: LD_INT 2
9360: ARRAY
9361: PPUSH
9362: LD_INT 93
9364: PPUSH
9365: LD_INT 25
9367: PPUSH
9368: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9372: LD_EXP 42
9376: PPUSH
9377: LD_EXP 39
9381: PPUSH
9382: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9386: LD_EXP 39
9390: PUSH
9391: LD_EXP 34
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: LD_EXP 30
9404: PPUSH
9405: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9409: LD_EXP 30
9413: PPUSH
9414: LD_EXP 39
9418: PPUSH
9419: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9423: LD_INT 35
9425: PPUSH
9426: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9430: LD_EXP 39
9434: PPUSH
9435: LD_INT 92
9437: PPUSH
9438: LD_INT 21
9440: PPUSH
9441: CALL_OW 307
9445: IFFALSE 9423
// Say ( Omar , DO-1-start ) ;
9447: LD_EXP 39
9451: PPUSH
9452: LD_STRING DO-1-start
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9459: LD_EXP 30
9463: PPUSH
9464: LD_STRING DH-2-start
9466: PPUSH
9467: CALL_OW 88
// if hasAll then
9471: LD_VAR 0 2
9475: IFFALSE 9603
// begin Say ( Omar , DO-2-start ) ;
9477: LD_EXP 39
9481: PPUSH
9482: LD_STRING DO-2-start
9484: PPUSH
9485: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9489: LD_EXP 39
9493: PPUSH
9494: LD_STRING DO-3-start
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9501: LD_EXP 30
9505: PPUSH
9506: LD_STRING DH-3-start
9508: PPUSH
9509: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9513: LD_EXP 38
9517: PPUSH
9518: LD_STRING DF-2-start
9520: PPUSH
9521: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9525: LD_EXP 39
9529: PPUSH
9530: LD_EXP 38
9534: PPUSH
9535: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9539: LD_EXP 39
9543: PPUSH
9544: LD_STRING DO-4-start
9546: PPUSH
9547: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9551: LD_EXP 38
9555: PPUSH
9556: LD_STRING DF-3-start
9558: PPUSH
9559: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9563: LD_EXP 39
9567: PPUSH
9568: LD_STRING DO-5-start
9570: PPUSH
9571: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9575: LD_EXP 38
9579: PPUSH
9580: LD_STRING DF-4-start
9582: PPUSH
9583: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9587: LD_EXP 39
9591: PPUSH
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 119
// end else
9601: GO 9703
// begin Say ( Omar , DO-2-start-a ) ;
9603: LD_EXP 39
9607: PPUSH
9608: LD_STRING DO-2-start-a
9610: PPUSH
9611: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9615: LD_EXP 39
9619: PPUSH
9620: LD_STRING DO-3-start-a
9622: PPUSH
9623: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9627: LD_EXP 30
9631: PPUSH
9632: LD_STRING DH-3-start-a
9634: PPUSH
9635: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9639: LD_EXP 38
9643: PPUSH
9644: LD_STRING DF-2-start-a
9646: PPUSH
9647: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9651: LD_EXP 39
9655: PPUSH
9656: LD_EXP 38
9660: PPUSH
9661: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9665: LD_EXP 39
9669: PPUSH
9670: LD_STRING DO-4-start-a
9672: PPUSH
9673: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9677: LD_EXP 38
9681: PPUSH
9682: LD_STRING DF-3-start-a
9684: PPUSH
9685: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9689: LD_EXP 39
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9703: LD_INT 10
9705: PPUSH
9706: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9710: LD_EXP 39
9714: PPUSH
9715: LD_STRING DO-1-mission
9717: PPUSH
9718: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9722: LD_EXP 39
9726: PPUSH
9727: LD_STRING DO-2-mission
9729: PPUSH
9730: CALL_OW 88
// if not hasAll then
9734: LD_VAR 0 2
9738: NOT
9739: IFFALSE 9753
// Say ( Omar , DO-3-mission ) ;
9741: LD_EXP 39
9745: PPUSH
9746: LD_STRING DO-3-mission
9748: PPUSH
9749: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9753: LD_EXP 39
9757: PPUSH
9758: LD_STRING DO-4-mission
9760: PPUSH
9761: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9765: LD_EXP 30
9769: PPUSH
9770: LD_STRING DH-1-mission
9772: PPUSH
9773: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9777: LD_EXP 38
9781: PPUSH
9782: LD_STRING DF-1-mission
9784: PPUSH
9785: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9789: LD_EXP 39
9793: PPUSH
9794: LD_STRING DO-5-mission
9796: PPUSH
9797: CALL_OW 88
// if not hasAll then
9801: LD_VAR 0 2
9805: NOT
9806: IFFALSE 9941
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9808: LD_ADDR_VAR 0 4
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 1
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 69
9852: ST_TO_ADDR
// for i := 7 downto tmp do
9853: LD_ADDR_VAR 0 3
9857: PUSH
9858: DOUBLE
9859: LD_INT 7
9861: INC
9862: ST_TO_ADDR
9863: LD_VAR 0 4
9867: PUSH
9868: FOR_DOWNTO
9869: IFFALSE 9939
// begin if omarSquad < 3 then
9871: LD_EXP 42
9875: PUSH
9876: LD_INT 3
9878: LESS
9879: IFFALSE 9883
// break ;
9881: GO 9939
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9883: LD_EXP 42
9887: PUSH
9888: LD_INT 3
9890: ARRAY
9891: PPUSH
9892: LD_INT 2
9894: PPUSH
9895: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9899: LD_ADDR_EXP 44
9903: PUSH
9904: LD_EXP 44
9908: PUSH
9909: LD_EXP 42
9913: PUSH
9914: LD_INT 3
9916: ARRAY
9917: UNION
9918: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9919: LD_ADDR_EXP 42
9923: PUSH
9924: LD_EXP 42
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: CALL_OW 3
9936: ST_TO_ADDR
// end ;
9937: GO 9868
9939: POP
9940: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9941: LD_EXP 39
9945: PUSH
9946: LD_EXP 42
9950: ADD
9951: PPUSH
9952: LD_INT 103
9954: PPUSH
9955: LD_INT 9
9957: PPUSH
9958: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9962: LD_VAR 0 2
9966: PUSH
9967: LD_EXP 35
9971: PPUSH
9972: CALL_OW 302
9976: AND
9977: IFFALSE 10038
// begin wait ( 0 0$3 ) ;
9979: LD_INT 105
9981: PPUSH
9982: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9986: LD_EXP 35
9990: PPUSH
9991: LD_EXP 38
9995: PPUSH
9996: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10000: LD_EXP 35
10004: PPUSH
10005: LD_STRING DK-1-side
10007: PPUSH
10008: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10012: LD_EXP 38
10016: PPUSH
10017: LD_EXP 35
10021: PPUSH
10022: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10026: LD_EXP 38
10030: PPUSH
10031: LD_STRING DF-1-side
10033: PPUSH
10034: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PPUSH
10053: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10057: LD_EXP 38
10061: PUSH
10062: LD_EXP 41
10066: ADD
10067: PPUSH
10068: LD_INT 108
10070: PPUSH
10071: LD_INT 62
10073: PPUSH
10074: CALL_OW 111
// gameStarted := true ;
10078: LD_ADDR_EXP 3
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10086: LD_INT 105
10088: PPUSH
10089: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10093: LD_EXP 30
10097: PPUSH
10098: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10102: LD_EXP 30
10106: PPUSH
10107: LD_EXP 34
10111: PPUSH
10112: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10116: LD_INT 22
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 69
10130: PUSH
10131: LD_EXP 30
10135: DIFF
10136: PPUSH
10137: LD_EXP 30
10141: PPUSH
10142: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10146: LD_EXP 30
10150: PPUSH
10151: LD_STRING DH-1-explore
10153: PPUSH
10154: CALL_OW 88
// if Givi then
10158: LD_EXP 31
10162: IFFALSE 10178
// Say ( Givi , DG-1-explore ) else
10164: LD_EXP 31
10168: PPUSH
10169: LD_STRING DG-1-explore
10171: PPUSH
10172: CALL_OW 88
10176: GO 10215
// if heikeSecondSquad then
10178: LD_EXP 44
10182: IFFALSE 10215
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10184: LD_EXP 44
10188: PPUSH
10189: LD_INT 26
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 72
10203: PUSH
10204: LD_INT 1
10206: ARRAY
10207: PPUSH
10208: LD_STRING DArm-1-explore
10210: PPUSH
10211: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10215: LD_EXP 34
10219: PPUSH
10220: LD_STRING DA-1-explore
10222: PPUSH
10223: CALL_OW 88
// if Sophia then
10227: LD_EXP 36
10231: IFFALSE 10309
// begin Say ( Sophia , DS-2-explore ) ;
10233: LD_EXP 36
10237: PPUSH
10238: LD_STRING DS-2-explore
10240: PPUSH
10241: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10245: LD_EXP 34
10249: PPUSH
10250: LD_STRING DA-2-explore
10252: PPUSH
10253: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_EXP 34
10266: PPUSH
10267: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10271: LD_EXP 34
10275: PPUSH
10276: LD_EXP 36
10280: PPUSH
10281: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10285: LD_EXP 36
10289: PPUSH
10290: LD_STRING DS-3-explore
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10297: LD_EXP 34
10301: PPUSH
10302: LD_STRING DA-3-explore
10304: PPUSH
10305: CALL_OW 88
// end ; if Mike then
10309: LD_EXP 32
10313: IFFALSE 10369
// begin Say ( Mike , DM-1-explore ) ;
10315: LD_EXP 32
10319: PPUSH
10320: LD_STRING DM-1-explore
10322: PPUSH
10323: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10327: LD_EXP 30
10331: PPUSH
10332: LD_STRING DH-2-explore
10334: PPUSH
10335: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10339: LD_EXP 32
10343: PPUSH
10344: LD_STRING DM-2-explore
10346: PPUSH
10347: CALL_OW 88
// if Kaia then
10351: LD_EXP 35
10355: IFFALSE 10369
// Say ( Kaia , DK-1-explore ) ;
10357: LD_EXP 35
10361: PPUSH
10362: LD_STRING DK-1-explore
10364: PPUSH
10365: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: PPUSH
10384: CALL_OW 139
// Video ( false ) ;
10388: LD_INT 0
10390: PPUSH
10391: CALL 77351 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10395: LD_STRING BuildBase
10397: PPUSH
10398: CALL_OW 337
// SaveForQuickRestart ;
10402: CALL_OW 22
// end ;
10406: LD_VAR 0 1
10410: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10411: LD_EXP 5
10415: PUSH
10416: LD_EXP 7
10420: NOT
10421: AND
10422: IFFALSE 10609
10424: GO 10426
10426: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10427: LD_EXP 47
10431: PPUSH
10432: LD_STRING DUsm-4-assault
10434: PPUSH
10435: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10446: LD_INT 22
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 1
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 50
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: LD_INT 95
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: IFFALSE 10439
// if not IsOk ( usCommander ) or americanBaseCaptured then
10494: LD_EXP 47
10498: PPUSH
10499: CALL_OW 302
10503: NOT
10504: PUSH
10505: LD_EXP 7
10509: OR
10510: IFFALSE 10514
// exit ;
10512: GO 10609
// repeat wait ( 0 0$1 ) ;
10514: LD_INT 35
10516: PPUSH
10517: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10521: LD_INT 22
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 50
10543: PUSH
10544: EMPTY
10545: LIST
10546: PUSH
10547: LD_INT 95
10549: PUSH
10550: LD_INT 7
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: NOT
10568: IFFALSE 10514
// wait ( 0 0$3 ) ;
10570: LD_INT 105
10572: PPUSH
10573: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10577: LD_EXP 47
10581: PPUSH
10582: CALL_OW 302
10586: NOT
10587: PUSH
10588: LD_EXP 7
10592: OR
10593: IFFALSE 10597
// exit ;
10595: GO 10609
// Say ( usCommander , DUsm-3-assault ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_STRING DUsm-3-assault
10604: PPUSH
10605: CALL_OW 88
// end ;
10609: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10610: LD_EXP 6
10614: NOT
10615: PUSH
10616: LD_EXP 7
10620: NOT
10621: AND
10622: PUSH
10623: LD_INT 5
10625: PPUSH
10626: LD_INT 22
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 70
10640: AND
10641: PUSH
10642: LD_EXP 7
10646: NOT
10647: AND
10648: IFFALSE 10733
10650: GO 10652
10652: DISABLE
// begin if Mike then
10653: LD_EXP 32
10657: IFFALSE 10673
// Say ( Mike , DM-1-scout ) else
10659: LD_EXP 32
10663: PPUSH
10664: LD_STRING DM-1-scout
10666: PPUSH
10667: CALL_OW 88
10671: GO 10704
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10673: LD_EXP 44
10677: PPUSH
10678: LD_INT 26
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PPUSH
10688: CALL_OW 72
10692: PUSH
10693: LD_INT 1
10695: ARRAY
10696: PPUSH
10697: LD_STRING DArm-1-explore
10699: PPUSH
10700: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10704: LD_INT 54
10706: PPUSH
10707: LD_INT 35
10709: PPUSH
10710: LD_INT 2
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10720: LD_INT 54
10722: PPUSH
10723: LD_INT 35
10725: PPUSH
10726: LD_INT 2
10728: PPUSH
10729: CALL_OW 331
// end ;
10733: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10734: LD_INT 6
10736: PPUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 70
10751: PUSH
10752: LD_EXP 7
10756: NOT
10757: AND
10758: IFFALSE 11012
10760: GO 10762
10762: DISABLE
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_EXP 44
10777: PPUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 72
10792: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: LD_EXP 44
10802: PPUSH
10803: LD_INT 26
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 72
10817: ST_TO_ADDR
// DialogueOn ;
10818: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10822: LD_INT 36
10824: PPUSH
10825: LD_INT 22
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: LD_INT 8
10833: PPUSH
10834: CALL_OW 330
// dwait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 68
// speakerOk := false ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// if Mike then
10853: LD_EXP 32
10857: IFFALSE 10879
// speakerOk := Say ( Mike , DM-1-spot ) else
10859: LD_ADDR_VAR 0 3
10863: PUSH
10864: LD_EXP 32
10868: PPUSH
10869: LD_STRING DM-1-spot
10871: PPUSH
10872: CALL_OW 88
10876: ST_TO_ADDR
10877: GO 10907
// if randomMen then
10879: LD_VAR 0 1
10883: IFFALSE 10907
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_VAR 0 1
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: LD_STRING DArm-1-spot-a
10901: PPUSH
10902: CALL_OW 88
10906: ST_TO_ADDR
// if speakerOk then
10907: LD_VAR 0 3
10911: IFFALSE 10955
// begin if Givi then
10913: LD_EXP 31
10917: IFFALSE 10933
// Say ( Givi , DG-1-spot ) else
10919: LD_EXP 31
10923: PPUSH
10924: LD_STRING DG-1-spot
10926: PPUSH
10927: CALL_OW 88
10931: GO 10955
// if randomWomen then
10933: LD_VAR 0 2
10937: IFFALSE 10955
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: PPUSH
10948: LD_STRING DArf-1-spot-a
10950: PPUSH
10951: CALL_OW 88
// end ; if Mike then
10955: LD_EXP 32
10959: IFFALSE 10975
// Say ( Heike , DH-1-spot ) else
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING DH-1-spot
10968: PPUSH
10969: CALL_OW 88
10973: GO 10987
// Say ( Heike , DH-1-spot-a ) ;
10975: LD_EXP 30
10979: PPUSH
10980: LD_STRING DH-1-spot-a
10982: PPUSH
10983: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10987: LD_INT 36
10989: PPUSH
10990: LD_INT 22
10992: PPUSH
10993: LD_INT 2
10995: PPUSH
10996: CALL_OW 331
// DialogueOff ;
11000: CALL_OW 7
// americanBaseSpoted := true ;
11004: LD_ADDR_EXP 6
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// end ;
11012: PPOPN 3
11014: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11015: LD_EXP 6
11019: NOT
11020: PUSH
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 69
11049: AND
11050: PUSH
11051: LD_EXP 7
11055: NOT
11056: AND
11057: IFFALSE 11143
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
// begin americanBaseSpoted := true ;
11065: LD_ADDR_EXP 6
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11073: LD_ADDR_VAR 0 1
11077: PUSH
11078: LD_EXP 44
11082: PPUSH
11083: LD_INT 26
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 72
11097: ST_TO_ADDR
// if not randomMen then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11143
// DialogueOn ;
11107: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 1
11118: ARRAY
11119: PPUSH
11120: LD_STRING DArm-1-spot-a
11122: PPUSH
11123: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11127: LD_EXP 30
11131: PPUSH
11132: LD_STRING DH-1-spot-a
11134: PPUSH
11135: CALL_OW 88
// DialogueOff ;
11139: CALL_OW 7
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11146: LD_INT 11
11148: PPUSH
11149: CALL_OW 255
11153: PUSH
11154: LD_INT 2
11156: EQUAL
11157: PUSH
11158: LD_INT 7
11160: PPUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 1
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: LD_INT 50
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 30
11186: PUSH
11187: LD_INT 31
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: OR
11204: PUSH
11205: LD_INT 7
11207: PPUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 70
11222: PUSH
11223: LD_INT 2
11225: GREATER
11226: OR
11227: PUSH
11228: LD_EXP 46
11232: PUSH
11233: LD_INT 4
11235: LESSEQUAL
11236: OR
11237: IFFALSE 11828
11239: GO 11241
11241: DISABLE
11242: LD_INT 0
11244: PPUSH
11245: PPUSH
// begin wait ( 0 0$3 ) ;
11246: LD_INT 105
11248: PPUSH
11249: CALL_OW 67
// americanStartRun := true ;
11253: LD_ADDR_EXP 15
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if IsOk ( usCommander ) then
11261: LD_EXP 47
11265: PPUSH
11266: CALL_OW 302
11270: IFFALSE 11300
// begin usForces := usForces union usCommander ;
11272: LD_ADDR_EXP 46
11276: PUSH
11277: LD_EXP 46
11281: PUSH
11282: LD_EXP 47
11286: UNION
11287: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11288: LD_EXP 47
11292: PPUSH
11293: LD_STRING DUsm-1-assault
11295: PPUSH
11296: CALL_OW 88
// end ; for i in usForces do
11300: LD_ADDR_VAR 0 1
11304: PUSH
11305: LD_EXP 46
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11357
// begin if IsInUnit ( i ) then
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 310
11322: IFFALSE 11333
// ComExitBuilding ( i ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 122
// wait ( 3 ) ;
11333: LD_INT 3
11335: PPUSH
11336: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_INT 34
11347: PPUSH
11348: LD_INT 67
11350: PPUSH
11351: CALL_OW 111
// end ;
11355: GO 11310
11357: POP
11358: POP
// Say ( Heike , DH-1-assault ) ;
11359: LD_EXP 30
11363: PPUSH
11364: LD_STRING DH-1-assault
11366: PPUSH
11367: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11371: LD_INT 35
11373: PPUSH
11374: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 34
11385: PPUSH
11386: LD_INT 67
11388: PPUSH
11389: CALL_OW 111
// until not usForces ;
11393: LD_EXP 46
11397: NOT
11398: IFFALSE 11371
// music_nat := 2 ;
11400: LD_ADDR_OWVAR 71
11404: PUSH
11405: LD_INT 2
11407: ST_TO_ADDR
// music_class := music_victory ;
11408: LD_ADDR_OWVAR 72
11412: PUSH
11413: LD_INT 4
11415: ST_TO_ADDR
// if not americanHasEscaped then
11416: LD_EXP 9
11420: NOT
11421: IFFALSE 11442
// begin Say ( Heike , DH-2-assault ) ;
11423: LD_EXP 30
11427: PPUSH
11428: LD_STRING DH-2-assault
11430: PPUSH
11431: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11435: LD_STRING ACH_CLEAN
11437: PPUSH
11438: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11449: LD_INT 35
11451: PPUSH
11452: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11456: LD_INT 22
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 50
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: NOT
11499: IFFALSE 11449
// InGameOn ;
11501: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11505: LD_INT 11
11507: PPUSH
11508: CALL_OW 255
11512: PUSH
11513: LD_INT 2
11515: EQUAL
11516: NOT
11517: IFFALSE 11529
// SetSide ( usDepot , 2 ) ;
11519: LD_INT 11
11521: PPUSH
11522: LD_INT 2
11524: PPUSH
11525: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11529: LD_INT 35
11531: PPUSH
11532: LD_INT 22
11534: PPUSH
11535: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11539: LD_EXP 30
11543: PPUSH
11544: LD_INT 35
11546: PPUSH
11547: LD_INT 22
11549: PPUSH
11550: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11554: LD_EXP 30
11558: PPUSH
11559: LD_INT 38
11561: PPUSH
11562: LD_INT 25
11564: PPUSH
11565: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11569: LD_EXP 34
11573: PUSH
11574: LD_EXP 43
11578: UNION
11579: PUSH
11580: LD_EXP 44
11584: UNION
11585: PPUSH
11586: LD_INT 39
11588: PPUSH
11589: LD_INT 26
11591: PPUSH
11592: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11596: LD_EXP 34
11600: PUSH
11601: LD_EXP 43
11605: UNION
11606: PUSH
11607: LD_EXP 44
11611: UNION
11612: PPUSH
11613: LD_EXP 30
11617: PPUSH
11618: CALL_OW 179
// p := 0 ;
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// p := p + 1 ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11651: LD_EXP 30
11655: PPUSH
11656: CALL_OW 314
11660: NOT
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: LD_INT 10
11669: GREATER
11670: OR
11671: IFFALSE 11630
// Say ( Heike , DH-1-capture ) ;
11673: LD_EXP 30
11677: PPUSH
11678: LD_STRING DH-1-capture
11680: PPUSH
11681: CALL_OW 88
// if Markov then
11685: LD_EXP 37
11689: IFFALSE 11703
// Say ( Markov , DMar-1-capture ) ;
11691: LD_EXP 37
11695: PPUSH
11696: LD_STRING DMar-1-capture
11698: PPUSH
11699: CALL_OW 88
// if Sophia then
11703: LD_EXP 36
11707: IFFALSE 11733
// begin Say ( Heike , DH-2-capture ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_STRING DH-2-capture
11716: PPUSH
11717: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11721: LD_EXP 36
11725: PPUSH
11726: LD_STRING DS-1-capture
11728: PPUSH
11729: CALL_OW 88
// end ; InGameOff ;
11733: CALL_OW 9
// music_nat := music_auto ;
11737: LD_ADDR_OWVAR 71
11741: PUSH
11742: LD_INT 0
11744: ST_TO_ADDR
// music_class := music_auto ;
11745: LD_ADDR_OWVAR 72
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11753: LD_STRING ConstructBase
11755: PPUSH
11756: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11811
// SetSide ( i , 2 ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_INT 2
11804: PPUSH
11805: CALL_OW 235
11809: GO 11794
11811: POP
11812: POP
// wait ( 0 0$3 ) ;
11813: LD_INT 105
11815: PPUSH
11816: CALL_OW 67
// americanBaseCaptured := true ;
11820: LD_ADDR_EXP 7
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// end ;
11828: PPOPN 2
11830: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11831: LD_EXP 14
11835: PUSH
11836: LD_INT 3
11838: GREATEREQUAL
11839: IFFALSE 11851
11841: GO 11843
11843: DISABLE
// SetAchievement ( ACH_ENG ) ;
11844: LD_STRING ACH_ENG
11846: PPUSH
11847: CALL_OW 543
11851: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11852: LD_INT 22
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 25
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PUSH
11881: LD_INT 4
11883: GREATEREQUAL
11884: IFFALSE 11896
11886: GO 11888
11888: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11889: LD_STRING ACH_APEGEN
11891: PPUSH
11892: CALL_OW 543
11896: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11897: LD_INT 22
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 57
11922: PUSH
11923: EMPTY
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: IFFALSE 12204
11941: GO 11943
11943: DISABLE
// begin workshopBuilded := true ;
11944: LD_ADDR_EXP 11
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if IsOk ( Markov ) then
11952: LD_EXP 37
11956: PPUSH
11957: CALL_OW 302
11961: IFFALSE 12020
// begin Say ( Heike , DH-1-shop-a ) ;
11963: LD_EXP 30
11967: PPUSH
11968: LD_STRING DH-1-shop-a
11970: PPUSH
11971: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11975: LD_INT 47
11977: PPUSH
11978: LD_INT 2
11980: PPUSH
11981: CALL_OW 321
11985: PUSH
11986: LD_INT 2
11988: EQUAL
11989: PUSH
11990: LD_INT 45
11992: PPUSH
11993: LD_INT 2
11995: PPUSH
11996: CALL_OW 321
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: AND
12005: NOT
12006: IFFALSE 12020
// Say ( Markov , DMar-1-shop-a ) ;
12008: LD_EXP 37
12012: PPUSH
12013: LD_STRING DMar-1-shop-a
12015: PPUSH
12016: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12020: LD_INT 35
12022: PPUSH
12023: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12027: LD_INT 47
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 321
12037: PUSH
12038: LD_INT 2
12040: EQUAL
12041: PUSH
12042: LD_INT 45
12044: PPUSH
12045: LD_INT 2
12047: PPUSH
12048: CALL_OW 321
12052: PUSH
12053: LD_INT 2
12055: EQUAL
12056: OR
12057: IFFALSE 12020
// if IsOk ( Markov ) and IsOk ( Heike ) then
12059: LD_EXP 37
12063: PPUSH
12064: CALL_OW 302
12068: PUSH
12069: LD_EXP 30
12073: PPUSH
12074: CALL_OW 302
12078: AND
12079: IFFALSE 12197
// begin DialogueOn ;
12081: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12085: LD_EXP 37
12089: PPUSH
12090: LD_STRING DMar-1-shop
12092: PPUSH
12093: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12097: LD_EXP 30
12101: PPUSH
12102: LD_STRING DH-1-shop
12104: PPUSH
12105: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12109: LD_EXP 37
12113: PPUSH
12114: LD_STRING DMar-2-shop
12116: PPUSH
12117: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12121: LD_EXP 37
12125: PPUSH
12126: LD_STRING DMar-3-shop
12128: PPUSH
12129: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12133: LD_EXP 30
12137: PPUSH
12138: LD_STRING DH-2-shop
12140: PPUSH
12141: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12145: LD_EXP 37
12149: PPUSH
12150: LD_STRING DMar-4-shop
12152: PPUSH
12153: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12157: LD_EXP 30
12161: PPUSH
12162: LD_STRING DH-3-shop
12164: PPUSH
12165: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12169: LD_EXP 37
12173: PPUSH
12174: LD_STRING DMar-5-shop
12176: PPUSH
12177: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12181: LD_EXP 30
12185: PPUSH
12186: LD_STRING DH-4-shop
12188: PPUSH
12189: CALL_OW 88
// DialogueOff ;
12193: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12197: LD_STRING ConstructVeh
12199: PPUSH
12200: CALL_OW 337
// end ;
12204: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12205: LD_INT 2
12207: PPUSH
12208: LD_INT 2
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL 39993 0 3
12218: PUSH
12219: LD_INT 0
12221: EQUAL
12222: IFFALSE 12234
12224: GO 12226
12226: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12227: LD_STRING Techs
12229: PPUSH
12230: CALL_OW 337
12234: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12235: LD_EXP 37
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 34
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 35
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: AND
12292: IFFALSE 12399
12294: GO 12296
12296: DISABLE
// begin DialogueOn ;
12297: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12301: LD_INT 22
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 35
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 69
12347: PPUSH
12348: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12352: LD_INT 10
12354: PPUSH
12355: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12359: LD_EXP 30
12363: PPUSH
12364: LD_STRING DH-1-bal
12366: PPUSH
12367: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12371: LD_EXP 37
12375: PPUSH
12376: LD_STRING DMar-1-bal
12378: PPUSH
12379: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12383: LD_EXP 30
12387: PPUSH
12388: LD_STRING DH-2-bal
12390: PPUSH
12391: CALL_OW 88
// DialogueOff ;
12395: CALL_OW 7
// end ;
12399: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12400: LD_EXP 34
12404: PPUSH
12405: CALL_OW 302
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 69
12438: AND
12439: IFFALSE 12500
12441: GO 12443
12443: DISABLE
// begin DialogueOn ;
12444: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12448: LD_EXP 34
12452: PPUSH
12453: LD_STRING DA-1-lab
12455: PPUSH
12456: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12460: LD_EXP 30
12464: PPUSH
12465: LD_STRING DH-1-lab
12467: PPUSH
12468: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12472: LD_EXP 34
12476: PPUSH
12477: LD_STRING DA-2-lab
12479: PPUSH
12480: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12484: LD_EXP 30
12488: PPUSH
12489: LD_STRING DH-2-lab
12491: PPUSH
12492: CALL_OW 88
// DialogueOff ;
12496: CALL_OW 7
// end ;
12500: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12501: LD_EXP 35
12505: PPUSH
12506: CALL_OW 302
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 25
12523: PUSH
12524: LD_INT 15
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: AND
12540: PUSH
12541: LD_INT 81
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: NOT
12556: AND
12557: IFFALSE 12746
12559: GO 12561
12561: DISABLE
12562: LD_INT 0
12564: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 25
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 69
12598: ST_TO_ADDR
// InGameOn ;
12599: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12603: LD_VAR 0 1
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12629: LD_EXP 35
12633: PPUSH
12634: LD_STRING DK-1-apesol
12636: PPUSH
12637: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12641: LD_VAR 0 1
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PPUSH
12650: LD_INT 35
12652: PPUSH
12653: LD_INT 28
12655: PPUSH
12656: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 1
12667: ARRAY
12668: PPUSH
12669: LD_INT 36
12671: PPUSH
12672: LD_INT 17
12674: PPUSH
12675: CALL_OW 171
// wait ( 0 0$2 ) ;
12679: LD_INT 70
12681: PPUSH
12682: CALL_OW 67
// DialogueOn ;
12686: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12690: LD_EXP 34
12694: PPUSH
12695: LD_STRING DA-1-apesol
12697: PPUSH
12698: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12702: LD_EXP 35
12706: PPUSH
12707: LD_STRING DK-2-apesol
12709: PPUSH
12710: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12714: LD_EXP 34
12718: PPUSH
12719: LD_STRING DA-2-apesol
12721: PPUSH
12722: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DK-3-apesol
12733: PPUSH
12734: CALL_OW 88
// DialogueOff ;
12738: CALL_OW 7
// InGameOff ;
12742: CALL_OW 9
// end ;
12746: PPOPN 1
12748: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12749: LD_EXP 36
12753: PPUSH
12754: CALL_OW 302
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 16
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: AND
12788: PUSH
12789: LD_INT 81
12791: PUSH
12792: LD_INT 2
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: NOT
12804: AND
12805: IFFALSE 13119
12807: GO 12809
12809: DISABLE
12810: LD_INT 0
12812: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 16
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// blockAttack := true ;
12847: LD_ADDR_EXP 29
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// InGameOn ;
12855: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12859: LD_INT 35
12861: PPUSH
12862: LD_INT 22
12864: PPUSH
12865: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12869: LD_INT 5
12871: PPUSH
12872: LD_INT 35
12874: PPUSH
12875: LD_INT 22
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12885: LD_EXP 36
12889: PPUSH
12890: LD_VAR 0 1
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PPUSH
12912: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: CALL_OW 122
// wait ( 0 0$2 ) ;
12929: LD_INT 70
12931: PPUSH
12932: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12936: LD_EXP 36
12940: PPUSH
12941: LD_STRING DS-1-apeeng
12943: PPUSH
12944: CALL_OW 88
// if IsOk ( Kamil ) then
12948: LD_EXP 33
12952: PPUSH
12953: CALL_OW 302
12957: IFFALSE 13107
// begin Say ( Kamil , DKam-1-apeeng ) ;
12959: LD_EXP 33
12963: PPUSH
12964: LD_STRING DKam-1-apeeng
12966: PPUSH
12967: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12971: LD_EXP 36
12975: PPUSH
12976: LD_STRING DS-2-apeeng
12978: PPUSH
12979: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12983: LD_EXP 33
12987: PPUSH
12988: LD_STRING DKam-2-apeeng
12990: PPUSH
12991: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12995: LD_EXP 36
12999: PPUSH
13000: LD_STRING DS-3-apeeng
13002: PPUSH
13003: CALL_OW 88
// if not IsOK ( Kaia ) then
13007: LD_EXP 35
13011: PPUSH
13012: CALL_OW 302
13016: NOT
13017: IFFALSE 13033
// begin InGameOff ;
13019: CALL_OW 9
// blockAttack := false ;
13023: LD_ADDR_EXP 29
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// exit ;
13031: GO 13119
// end ; Say ( Kaia , DK-1-apeeng ) ;
13033: LD_EXP 35
13037: PPUSH
13038: LD_STRING DK-1-apeeng
13040: PPUSH
13041: CALL_OW 88
// if not IsOk ( Givi ) then
13045: LD_EXP 31
13049: PPUSH
13050: CALL_OW 302
13054: NOT
13055: IFFALSE 13071
// begin InGameOff ;
13057: CALL_OW 9
// blockAttack := false ;
13061: LD_ADDR_EXP 29
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// exit ;
13069: GO 13119
// end ; Say ( Givi , DG-1-apeeng ) ;
13071: LD_EXP 31
13075: PPUSH
13076: LD_STRING DG-1-apeeng
13078: PPUSH
13079: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13083: LD_EXP 35
13087: PPUSH
13088: LD_STRING DK-2-apeeng
13090: PPUSH
13091: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13095: LD_EXP 35
13099: PPUSH
13100: LD_STRING DK-3-apeeng
13102: PPUSH
13103: CALL_OW 88
// end ; InGameOff ;
13107: CALL_OW 9
// blockAttack := false ;
13111: LD_ADDR_EXP 29
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// end ;
13119: PPOPN 1
13121: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13122: LD_EXP 4
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 0
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: AND
13156: IFFALSE 13337
13158: GO 13160
13160: DISABLE
// begin blockAttack := true ;
13161: LD_ADDR_EXP 29
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13169: LD_INT 350
13171: PPUSH
13172: CALL_OW 67
// DialogueOn ;
13176: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13180: LD_EXP 38
13184: PPUSH
13185: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13189: LD_EXP 38
13193: PPUSH
13194: LD_STRING DF-1-distribution
13196: PPUSH
13197: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13201: LD_EXP 30
13205: PPUSH
13206: LD_STRING DH-2-distribution
13208: PPUSH
13209: CALL_OW 88
// if IsOk ( Kaia ) then
13213: LD_EXP 35
13217: PPUSH
13218: CALL_OW 302
13222: IFFALSE 13283
// begin Say ( Kaia , DK-1-distribution ) ;
13224: LD_EXP 35
13228: PPUSH
13229: LD_STRING DK-1-distribution
13231: PPUSH
13232: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13236: LD_EXP 30
13240: PPUSH
13241: LD_STRING DH-1-distribution
13243: PPUSH
13244: CALL_OW 88
// if IsOk ( Givi ) then
13248: LD_EXP 31
13252: PPUSH
13253: CALL_OW 302
13257: IFFALSE 13283
// begin Say ( Givi , DG-1-distribution ) ;
13259: LD_EXP 31
13263: PPUSH
13264: LD_STRING DG-1-distribution
13266: PPUSH
13267: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13271: LD_EXP 30
13275: PPUSH
13276: LD_STRING DH-3-distribution
13278: PPUSH
13279: CALL_OW 88
// end ; end ; DialogueOff ;
13283: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13287: LD_STRING Crates1
13289: PPUSH
13290: CALL_OW 337
// farmerRequestedCrates := 300 ;
13294: LD_ADDR_EXP 17
13298: PUSH
13299: LD_INT 300
13301: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13302: LD_STRING FarmerCrates
13304: PPUSH
13305: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13309: LD_INT 10
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 424
// blockAttack := false ;
13319: LD_ADDR_EXP 29
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13327: LD_INT 108
13329: PPUSH
13330: LD_INT 61
13332: PPUSH
13333: CALL_OW 86
// end ;
13337: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13338: LD_EXP 7
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 57
13358: PUSH
13359: EMPTY
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 6
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: LD_INT 7
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: AND
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 3
13417: PUSH
13418: LD_INT 57
13420: PUSH
13421: EMPTY
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: AND
13448: IFFALSE 13612
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
// begin wait ( 0 0$10 ) ;
13456: LD_INT 350
13458: PPUSH
13459: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_EXP 44
13472: PPUSH
13473: LD_INT 26
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 72
13501: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13502: LD_EXP 30
13506: PPUSH
13507: LD_STRING DH-1-task
13509: PPUSH
13510: CALL_OW 88
// if IsOk ( Sophia ) then
13514: LD_EXP 36
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13563
// begin Say ( Sophia , DS-1-task ) ;
13525: LD_EXP 36
13529: PPUSH
13530: LD_STRING DS-1-task
13532: PPUSH
13533: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13537: LD_EXP 36
13541: PPUSH
13542: LD_STRING DS-2-task
13544: PPUSH
13545: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13549: LD_EXP 30
13553: PPUSH
13554: LD_STRING DH-2-task
13556: PPUSH
13557: CALL_OW 88
// end else
13561: GO 13597
// if eng then
13563: LD_VAR 0 1
13567: IFFALSE 13597
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13569: LD_VAR 0 1
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: LD_STRING DArm-1-task
13580: PPUSH
13581: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13585: LD_EXP 30
13589: PPUSH
13590: LD_STRING DH-2-task
13592: PPUSH
13593: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13597: LD_STRING BaseConstructed
13599: PPUSH
13600: CALL_OW 337
// allowConvoys := true ;
13604: LD_ADDR_EXP 13
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// end ;
13612: PPOPN 1
13614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13615: LD_INT 22
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 34
13627: PUSH
13628: LD_INT 12
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: IFFALSE 13811
13645: GO 13647
13647: DISABLE
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
13652: PPUSH
// begin wait ( 0 0$2 ) ;
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 12
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 250
13712: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 251
13731: ST_TO_ADDR
// DialogueOn ;
13732: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13736: LD_VAR 0 2
13740: PPUSH
13741: LD_VAR 0 3
13745: PPUSH
13746: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13750: LD_VAR 0 2
13754: PPUSH
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: LD_INT 6
13765: NEG
13766: PPUSH
13767: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13771: LD_INT 10
13773: PPUSH
13774: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13778: LD_EXP 30
13782: PPUSH
13783: LD_STRING DH-1-seecargo
13785: PPUSH
13786: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 2
13802: PPUSH
13803: CALL_OW 331
// DialogueOff ;
13807: CALL_OW 7
// end ;
13811: PPOPN 3
13813: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13814: LD_EXP 4
13818: PUSH
13819: LD_EXP 16
13823: PUSH
13824: LD_INT 300
13826: GREATEREQUAL
13827: AND
13828: IFFALSE 13900
13830: GO 13832
13832: DISABLE
// begin DialogueOn ;
13833: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13837: LD_EXP 38
13841: PPUSH
13842: LD_STRING DF-1-delivery-2
13844: PPUSH
13845: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13849: LD_EXP 30
13853: PPUSH
13854: LD_STRING DH-1-delivery-2
13856: PPUSH
13857: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13861: LD_EXP 38
13865: PPUSH
13866: LD_STRING DF-2-delivery-2
13868: PPUSH
13869: CALL_OW 94
// DialogueOff ;
13873: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13877: LD_STRING Crates2
13879: PPUSH
13880: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13884: LD_ADDR_EXP 18
13888: PUSH
13889: LD_INT 63000
13891: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13892: LD_ADDR_EXP 17
13896: PUSH
13897: LD_INT 600
13899: ST_TO_ADDR
// end ;
13900: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13901: LD_EXP 4
13905: PUSH
13906: LD_EXP 16
13910: PUSH
13911: LD_INT 600
13913: GREATEREQUAL
13914: AND
13915: PUSH
13916: LD_OWVAR 67
13920: PUSH
13921: LD_INT 1
13923: GREATER
13924: AND
13925: IFFALSE 14125
13927: GO 13929
13929: DISABLE
// begin DialogueOn ;
13930: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13934: LD_EXP 38
13938: PPUSH
13939: LD_STRING DF-1-delivery-3
13941: PPUSH
13942: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13946: LD_EXP 30
13950: PPUSH
13951: LD_STRING DH-1-delivery-3
13953: PPUSH
13954: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13958: LD_EXP 38
13962: PPUSH
13963: LD_STRING DF-2-delivery-3
13965: PPUSH
13966: CALL_OW 94
// if IsOk ( Kaia ) then
13970: LD_EXP 35
13974: PPUSH
13975: CALL_OW 302
13979: IFFALSE 14029
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13981: LD_EXP 35
13985: PPUSH
13986: LD_STRING DK-1-delivery-3
13988: PPUSH
13989: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13993: LD_EXP 30
13997: PPUSH
13998: LD_STRING DH-2-delivery-3
14000: PPUSH
14001: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14005: LD_EXP 31
14009: PPUSH
14010: LD_STRING DG-1-delivery-3
14012: PPUSH
14013: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14017: LD_EXP 32
14021: PPUSH
14022: LD_STRING DM-1-delivery-3
14024: PPUSH
14025: CALL_OW 88
// end ; DialogueOff ;
14029: CALL_OW 7
// case Difficulty of 2 :
14033: LD_OWVAR 67
14037: PUSH
14038: LD_INT 2
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14064
14046: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14047: LD_STRING Crates3
14049: PPUSH
14050: CALL_OW 337
// farmerRequestedCrates := 900 ;
14054: LD_ADDR_EXP 17
14058: PUSH
14059: LD_INT 900
14061: ST_TO_ADDR
// end ; 3 :
14062: GO 14117
14064: LD_INT 3
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14090
14072: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14073: LD_STRING Crates4
14075: PPUSH
14076: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14080: LD_ADDR_EXP 17
14084: PUSH
14085: LD_INT 1200
14087: ST_TO_ADDR
// end ; 4 :
14088: GO 14117
14090: LD_INT 4
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14116
14098: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14099: LD_STRING Crates5
14101: PPUSH
14102: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14106: LD_ADDR_EXP 17
14110: PUSH
14111: LD_INT 1400
14113: ST_TO_ADDR
// end ; end ;
14114: GO 14117
14116: POP
// farmerCratesCounter := 30 30$00 ;
14117: LD_ADDR_EXP 18
14121: PUSH
14122: LD_INT 63000
14124: ST_TO_ADDR
// end ;
14125: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14126: LD_EXP 4
14130: PUSH
14131: LD_EXP 16
14135: PUSH
14136: LD_INT 600
14138: PUSH
14139: LD_INT 900
14141: PUSH
14142: LD_INT 1200
14144: PUSH
14145: LD_INT 1400
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_OWVAR 67
14158: ARRAY
14159: GREATEREQUAL
14160: AND
14161: IFFALSE 14247
14163: GO 14165
14165: DISABLE
// begin retreatAllowed := true ;
14166: LD_ADDR_EXP 12
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// display_strings := [ ] ;
14174: LD_ADDR_OWVAR 47
14178: PUSH
14179: EMPTY
14180: ST_TO_ADDR
// DialogueOn ;
14181: CALL_OW 6
// InGameOn ;
14185: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14189: LD_EXP 39
14193: PPUSH
14194: LD_STRING DO-radio-end
14196: PPUSH
14197: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14201: LD_EXP 30
14205: PPUSH
14206: LD_STRING DH-1-radio-end
14208: PPUSH
14209: CALL_OW 88
// InGameOff ;
14213: CALL_OW 9
// DialogueOff ;
14217: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14221: LD_STRING Retreat
14223: PPUSH
14224: CALL_OW 337
// wait ( 0 0$2 ) ;
14228: LD_INT 70
14230: PPUSH
14231: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14235: LD_EXP 30
14239: PPUSH
14240: LD_STRING DH-2-radio-end
14242: PPUSH
14243: CALL_OW 88
// end ;
14247: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14248: LD_EXP 12
14252: IFFALSE 14383
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14261: LD_INT 10
14263: PPUSH
14264: LD_INT 0
14266: PPUSH
14267: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: LD_EXP 41
14280: PPUSH
14281: LD_INT 25
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 102
14303: PPUSH
14304: LD_INT 69
14306: PPUSH
14307: CALL_OW 428
14311: PUSH
14312: LD_INT 0
14314: EQUAL
14315: AND
14316: IFFALSE 14383
// begin for i in tmp do
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_VAR 0 1
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14353
// if IsInUnit ( i ) then
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 310
14340: IFFALSE 14351
// ComExitBuilding ( i ) ;
14342: LD_VAR 0 2
14346: PPUSH
14347: CALL_OW 122
14351: GO 14328
14353: POP
14354: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_INT 31
14362: PPUSH
14363: LD_INT 102
14365: PPUSH
14366: LD_INT 69
14368: PPUSH
14369: LD_INT 2
14371: PPUSH
14372: CALL_OW 205
// wait ( 0 0$3 ) ;
14376: LD_INT 105
14378: PPUSH
14379: CALL_OW 67
// end ; end ;
14383: PPOPN 2
14385: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14386: LD_EXP 12
14390: NOT
14391: PUSH
14392: LD_INT 5
14394: PPUSH
14395: CALL_OW 301
14399: AND
14400: IFFALSE 14432
14402: GO 14404
14404: DISABLE
// begin DialogueOn ;
14405: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14409: LD_EXP 38
14413: PPUSH
14414: LD_STRING DF-1-failure
14416: PPUSH
14417: CALL_OW 94
// DialogueOff ;
14421: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14425: LD_STRING FarmerDepot
14427: PPUSH
14428: CALL_OW 104
// end ;
14432: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14433: LD_EXP 12
14437: PUSH
14438: LD_EXP 30
14442: PPUSH
14443: LD_EXP 38
14447: PPUSH
14448: CALL_OW 296
14452: PUSH
14453: LD_INT 12
14455: LESS
14456: AND
14457: PUSH
14458: LD_INT 81
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: NOT
14487: AND
14488: IFFALSE 15172
14490: GO 14492
14492: DISABLE
14493: LD_INT 0
14495: PPUSH
14496: PPUSH
14497: PPUSH
// begin allowConvoys := false ;
14498: LD_ADDR_EXP 13
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// InGameOn ;
14506: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14510: LD_EXP 30
14514: PPUSH
14515: LD_EXP 38
14519: PPUSH
14520: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14524: LD_EXP 38
14528: PPUSH
14529: LD_EXP 30
14533: PPUSH
14534: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14538: LD_EXP 38
14542: PPUSH
14543: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14547: LD_EXP 30
14551: PPUSH
14552: LD_STRING DH-1-end
14554: PPUSH
14555: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14559: LD_EXP 38
14563: PPUSH
14564: LD_STRING DF-1-end
14566: PPUSH
14567: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14571: LD_EXP 38
14575: PPUSH
14576: LD_STRING DF-2-end
14578: PPUSH
14579: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14583: LD_EXP 30
14587: PPUSH
14588: LD_STRING DH-2-end
14590: PPUSH
14591: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14595: LD_EXP 38
14599: PPUSH
14600: LD_STRING DF-3-end
14602: PPUSH
14603: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14607: LD_EXP 30
14611: PPUSH
14612: LD_STRING DH-3-end
14614: PPUSH
14615: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14619: LD_EXP 31
14623: PPUSH
14624: LD_STRING DG-1-end
14626: PPUSH
14627: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14631: LD_EXP 30
14635: PPUSH
14636: LD_STRING DH-4-end
14638: PPUSH
14639: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14643: LD_EXP 38
14647: PPUSH
14648: LD_STRING DF-4-end
14650: PPUSH
14651: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14655: LD_EXP 30
14659: PPUSH
14660: LD_STRING DH-5-end
14662: PPUSH
14663: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14667: LD_EXP 38
14671: PPUSH
14672: LD_STRING DF-5-end
14674: PPUSH
14675: CALL_OW 88
// InGameOff ;
14679: CALL_OW 9
// allowCargoEvacuation := true ;
14683: LD_ADDR_EXP 8
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_INT 4
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_OWVAR 67
14718: ARRAY
14719: ST_TO_ADDR
// if farmerSquad < max then
14720: LD_EXP 41
14724: PUSH
14725: LD_VAR 0 2
14729: LESS
14730: IFFALSE 14742
// max := farmerSquad ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_EXP 41
14741: ST_TO_ADDR
// for i := 1 to max do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14796
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14760: LD_EXP 41
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: LD_INT 2
14771: PPUSH
14772: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14776: LD_ADDR_EXP 41
14780: PUSH
14781: LD_EXP 41
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 3
14793: ST_TO_ADDR
// end ;
14794: GO 14757
14796: POP
14797: POP
// for i in Farmer ^ farmerSquad do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_EXP 38
14807: PUSH
14808: LD_EXP 41
14812: ADD
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14854
// begin if IsInUnit ( i ) then
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 310
14826: IFFALSE 14837
// ComExitBuilding ( i ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_INT 102
14844: PPUSH
14845: LD_INT 7
14847: PPUSH
14848: CALL_OW 171
// end ;
14852: GO 14814
14854: POP
14855: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: LD_INT 5
14892: DIFF
14893: PUSH
14894: FOR_IN
14895: IFFALSE 14911
// SetSide ( i , 2 ) ;
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 2
14904: PPUSH
14905: CALL_OW 235
14909: GO 14894
14911: POP
14912: POP
// wait ( 0 0$2 ) ;
14913: LD_INT 70
14915: PPUSH
14916: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14920: LD_EXP 30
14924: PPUSH
14925: LD_STRING DH-6-end
14927: PPUSH
14928: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14932: LD_INT 35
14934: PPUSH
14935: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_EXP 38
14948: PUSH
14949: LD_EXP 41
14953: ADD
14954: PPUSH
14955: LD_INT 95
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 72
14969: ST_TO_ADDR
// if tmp then
14970: LD_VAR 0 3
14974: IFFALSE 15018
// for i in tmp do
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_VAR 0 3
14985: PUSH
14986: FOR_IN
14987: IFFALSE 15016
// begin farmerSquad := farmerSquad diff i ;
14989: LD_ADDR_EXP 41
14993: PUSH
14994: LD_EXP 41
14998: PUSH
14999: LD_VAR 0 1
15003: DIFF
15004: ST_TO_ADDR
// RemoveUnit ( i ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 64
// end ;
15014: GO 14986
15016: POP
15017: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15018: LD_EXP 41
15022: PUSH
15023: EMPTY
15024: EQUAL
15025: PUSH
15026: LD_EXP 38
15030: PPUSH
15031: CALL_OW 305
15035: NOT
15036: AND
15037: IFFALSE 14932
// if farmerHumanLoseCounter = 0 then
15039: LD_EXP 21
15043: PUSH
15044: LD_INT 0
15046: EQUAL
15047: IFFALSE 15056
// SetAchievement ( ACH_BABY ) ;
15049: LD_STRING ACH_BABY
15051: PPUSH
15052: CALL_OW 543
// wait ( 1 1$00 ) ;
15056: LD_INT 2100
15058: PPUSH
15059: CALL_OW 67
// SendAttack ;
15063: CALL 6118 0 0
// Say ( Heike , DH-7-end ) ;
15067: LD_EXP 30
15071: PPUSH
15072: LD_STRING DH-7-end
15074: PPUSH
15075: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: DOUBLE
15085: LD_INT 1
15087: DEC
15088: ST_TO_ADDR
15089: LD_INT 2
15091: PUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: LD_OWVAR 67
15111: ARRAY
15112: PUSH
15113: FOR_TO
15114: IFFALSE 15170
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15116: LD_INT 4200
15118: PUSH
15119: LD_INT 3500
15121: PUSH
15122: LD_INT 3150
15124: PUSH
15125: LD_INT 2800
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: PUSH
15134: LD_OWVAR 67
15138: ARRAY
15139: PPUSH
15140: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15144: LD_EXP 12
15148: PUSH
15149: LD_EXP 22
15153: PUSH
15154: LD_INT 1
15156: LESS
15157: AND
15158: IFFALSE 15164
// exit ;
15160: POP
15161: POP
15162: GO 15172
// SendAttack ;
15164: CALL 6118 0 0
// end ;
15168: GO 15113
15170: POP
15171: POP
// end ;
15172: PPOPN 3
15174: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15175: LD_EXP 8
15179: PUSH
15180: LD_EXP 22
15184: PUSH
15185: LD_INT 0
15187: GREATER
15188: AND
15189: IFFALSE 15199
15191: GO 15193
15193: DISABLE
// begin enable ;
15194: ENABLE
// CargoEvacuation ;
15195: CALL 3591 0 0
// end ;
15199: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15200: LD_EXP 18
15204: PUSH
15205: LD_INT 18900
15207: LESSEQUAL
15208: IFFALSE 15257
15210: GO 15212
15212: DISABLE
// begin DialogueOn ;
15213: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15217: LD_EXP 38
15221: PPUSH
15222: LD_STRING DF-1-distribution-a
15224: PPUSH
15225: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15229: LD_EXP 30
15233: PPUSH
15234: LD_STRING DH-1-distribution-a
15236: PPUSH
15237: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15241: LD_EXP 38
15245: PPUSH
15246: LD_STRING DF-2-distribution-a
15248: PPUSH
15249: CALL_OW 94
// DialogueOff ;
15253: CALL_OW 7
// end ;
15257: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15258: LD_EXP 18
15262: PUSH
15263: LD_INT 0
15265: LESSEQUAL
15266: IFFALSE 15298
15268: GO 15270
15270: DISABLE
// begin DialogueOn ;
15271: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15275: LD_EXP 38
15279: PPUSH
15280: LD_STRING DF-3-distribution-a
15282: PPUSH
15283: CALL_OW 94
// YouLost ( Distribution ) ;
15287: LD_STRING Distribution
15289: PPUSH
15290: CALL_OW 104
// DialogueOff ;
15294: CALL_OW 7
// end ;
15298: END
// every 0 0$1 trigger vehCounter >= 2 do
15299: LD_EXP 23
15303: PUSH
15304: LD_INT 2
15306: GREATEREQUAL
15307: IFFALSE 15319
15309: GO 15311
15311: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15312: LD_STRING VehConstructed
15314: PPUSH
15315: CALL_OW 337
15319: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15320: LD_INT 22
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 12
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: IFFALSE 15408
15350: GO 15352
15352: DISABLE
// begin DialogueOn ;
15353: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15357: LD_EXP 30
15361: PPUSH
15362: LD_STRING DH-1-truck
15364: PPUSH
15365: CALL_OW 88
// if IsOk ( Markov ) then
15369: LD_EXP 37
15373: PPUSH
15374: CALL_OW 302
15378: IFFALSE 15404
// begin Say ( Markov , DMar-1-truck ) ;
15380: LD_EXP 37
15384: PPUSH
15385: LD_STRING DMar-1-truck
15387: PPUSH
15388: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15392: LD_EXP 30
15396: PPUSH
15397: LD_STRING DH-2-truck
15399: PPUSH
15400: CALL_OW 88
// end ; DialogueOff ;
15404: CALL_OW 7
// end ;
15408: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if IsOk ( Givi ) then
15414: LD_EXP 31
15418: PPUSH
15419: CALL_OW 302
15423: IFFALSE 15439
// begin Say ( Givi , DG-1-nocargo ) ;
15425: LD_EXP 31
15429: PPUSH
15430: LD_STRING DG-1-nocargo
15432: PPUSH
15433: CALL_OW 88
// exit ;
15437: GO 15535
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: LD_EXP 44
15448: PPUSH
15449: LD_INT 26
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 72
15463: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15464: LD_ADDR_VAR 0 3
15468: PUSH
15469: LD_EXP 44
15473: PPUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: ST_TO_ADDR
// if randomMen then
15489: LD_VAR 0 2
15493: IFFALSE 15513
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15495: LD_VAR 0 2
15499: PUSH
15500: LD_INT 1
15502: ARRAY
15503: PPUSH
15504: LD_STRING DArm-1-nocargo
15506: PPUSH
15507: CALL_OW 88
15511: GO 15535
// if randomWomen then
15513: LD_VAR 0 3
15517: IFFALSE 15535
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15519: LD_VAR 0 3
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: LD_STRING DArf-1-nocargo
15530: PPUSH
15531: CALL_OW 88
// end ;
15535: LD_VAR 0 1
15539: RET
// export function IncomingAttack ; begin
15540: LD_INT 0
15542: PPUSH
// if attackWave = 1 then
15543: LD_EXP 20
15547: PUSH
15548: LD_INT 1
15550: EQUAL
15551: IFFALSE 15622
// begin DialogueOn ;
15553: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15557: LD_EXP 39
15561: PPUSH
15562: LD_STRING DO-1-radio-1
15564: PPUSH
15565: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15569: LD_EXP 30
15573: PPUSH
15574: LD_STRING DH-1-radio-1-
15576: PPUSH
15577: CALL_OW 88
// if IsOk ( Markov ) then
15581: LD_EXP 37
15585: PPUSH
15586: CALL_OW 302
15590: IFFALSE 15616
// begin Say ( Markov , DMar-1-radio-1 ) ;
15592: LD_EXP 37
15596: PPUSH
15597: LD_STRING DMar-1-radio-1
15599: PPUSH
15600: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15604: LD_EXP 30
15608: PPUSH
15609: LD_STRING DH-2-radio-1
15611: PPUSH
15612: CALL_OW 88
// end ; DialogueOff ;
15616: CALL_OW 7
// end else
15620: GO 15646
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15622: LD_EXP 39
15626: PPUSH
15627: LD_STRING DO-1-radio-u
15629: PPUSH
15630: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15634: LD_EXP 30
15638: PPUSH
15639: LD_STRING DH-1-radio-u
15641: PPUSH
15642: CALL_OW 88
// end ; end ;
15646: LD_VAR 0 1
15650: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15651: LD_EXP 46
15655: PPUSH
15656: LD_INT 95
15658: PUSH
15659: LD_INT 8
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 72
15670: IFFALSE 15773
15672: GO 15674
15674: DISABLE
15675: LD_INT 0
15677: PPUSH
// begin enable ;
15678: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_EXP 46
15688: PPUSH
15689: LD_INT 95
15691: PUSH
15692: LD_INT 8
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 72
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15734
// begin usForces := usForces diff i ;
15707: LD_ADDR_EXP 46
15711: PUSH
15712: LD_EXP 46
15716: PUSH
15717: LD_VAR 0 1
15721: DIFF
15722: ST_TO_ADDR
// RemoveUnit ( i ) ;
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 64
// end ;
15732: GO 15704
15734: POP
15735: POP
// if not americanHasEscaped and attackWave = 1 then
15736: LD_EXP 9
15740: NOT
15741: PUSH
15742: LD_EXP 20
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: AND
15751: IFFALSE 15773
// begin americanHasEscaped := true ;
15753: LD_ADDR_EXP 9
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15761: LD_EXP 30
15765: PPUSH
15766: LD_STRING DH-2-assault-a
15768: PPUSH
15769: CALL_OW 88
// end ; end ;
15773: PPOPN 1
15775: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15776: LD_INT 4
15778: PPUSH
15779: LD_INT 22
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 70
15793: PUSH
15794: LD_EXP 12
15798: NOT
15799: AND
15800: IFFALSE 15817
15802: GO 15804
15804: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15805: LD_EXP 38
15809: PPUSH
15810: LD_STRING DF-1-attack
15812: PPUSH
15813: CALL_OW 94
15817: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15818: LD_INT 5
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 2
15828: EQUAL
15829: IFFALSE 15845
15831: GO 15833
15833: DISABLE
// begin enable ;
15834: ENABLE
// SetSide ( arDepot , 5 ) ;
15835: LD_INT 5
15837: PPUSH
15838: LD_INT 5
15840: PPUSH
15841: CALL_OW 235
// end ;
15845: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: NOT
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_INT 4
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: NOT
15891: AND
15892: PUSH
15893: LD_EXP 12
15897: NOT
15898: AND
15899: PUSH
15900: LD_EXP 16
15904: PUSH
15905: LD_INT 90
15907: GREATER
15908: AND
15909: PUSH
15910: LD_INT 7
15912: PPUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 70
15941: AND
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 50
15955: PUSH
15956: EMPTY
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 69
15978: AND
15979: IFFALSE 16788
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
// begin depot := usDepot ;
15991: LD_ADDR_VAR 0 5
15995: PUSH
15996: LD_INT 11
15998: ST_TO_ADDR
// if not depot then
15999: LD_VAR 0 5
16003: NOT
16004: IFFALSE 16044
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16006: LD_ADDR_VAR 0 5
16010: PUSH
16011: LD_INT 22
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16044: LD_ADDR_VAR 0 1
16048: PUSH
16049: LD_EXP 44
16053: PPUSH
16054: LD_INT 26
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 72
16068: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_EXP 44
16078: PPUSH
16079: LD_INT 26
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 72
16093: ST_TO_ADDR
// if IsOk ( Kaia ) then
16094: LD_EXP 35
16098: PPUSH
16099: CALL_OW 302
16103: IFFALSE 16124
// speaker := [ Kaia , DK ] else
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_EXP 35
16114: PUSH
16115: LD_STRING DK
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: ST_TO_ADDR
16122: GO 16204
// if randomMen then
16124: LD_VAR 0 1
16128: IFFALSE 16163
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: PUSH
16140: LD_INT 1
16142: PPUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PUSH
16154: LD_STRING DArm
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: ST_TO_ADDR
16161: GO 16204
// if randomWomen then
16163: LD_VAR 0 2
16167: IFFALSE 16202
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PPUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: CALL_OW 12
16191: ARRAY
16192: PUSH
16193: LD_STRING DArf
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: ST_TO_ADDR
16200: GO 16204
// exit ;
16202: GO 16788
// if IsInUnit ( speaker [ 1 ] ) then
16204: LD_VAR 0 3
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: PPUSH
16213: CALL_OW 310
16217: IFFALSE 16240
// place := IsInUnit ( speaker [ 1 ] ) else
16219: LD_ADDR_VAR 0 4
16223: PUSH
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: CALL_OW 310
16237: ST_TO_ADDR
16238: GO 16254
// place := speaker [ 1 ] ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 1
16252: ARRAY
16253: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16254: LD_VAR 0 4
16258: PPUSH
16259: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 250
16272: PPUSH
16273: LD_VAR 0 4
16277: PPUSH
16278: CALL_OW 251
16282: PPUSH
16283: CALL 2078 0 2
// wait ( 0 0$2 ) ;
16287: LD_INT 70
16289: PPUSH
16290: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16294: LD_EXP 40
16298: PPUSH
16299: CALL_OW 305
16303: NOT
16304: IFFALSE 16308
// exit ;
16306: GO 16788
// allowConvoys := false ;
16308: LD_ADDR_EXP 13
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// blockAttack := true ;
16316: LD_ADDR_EXP 29
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// InGameOn ;
16324: CALL_OW 8
// wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16335: LD_EXP 40
16339: PPUSH
16340: LD_STRING DI-1-land
16342: PPUSH
16343: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 310
16360: IFFALSE 16375
// ComExit ( speaker [ 1 ] ) ;
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: CALL 77777 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 1
16382: ARRAY
16383: PPUSH
16384: LD_EXP 40
16388: PPUSH
16389: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: LD_EXP 40
16406: PPUSH
16407: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16411: LD_EXP 40
16415: PPUSH
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 1
16423: ARRAY
16424: PPUSH
16425: CALL_OW 119
// wait ( 0 0$1 ) ;
16429: LD_INT 35
16431: PPUSH
16432: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16436: LD_VAR 0 3
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 2
16452: ARRAY
16453: PUSH
16454: LD_STRING -1-land
16456: STR
16457: PPUSH
16458: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16462: LD_EXP 40
16466: PPUSH
16467: LD_STRING DI-2-land
16469: PPUSH
16470: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16474: LD_VAR 0 3
16478: PUSH
16479: LD_INT 1
16481: ARRAY
16482: PPUSH
16483: LD_VAR 0 3
16487: PUSH
16488: LD_INT 2
16490: ARRAY
16491: PUSH
16492: LD_STRING -2-land
16494: STR
16495: PPUSH
16496: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16500: LD_VAR 0 3
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 2
16516: ARRAY
16517: PUSH
16518: LD_STRING -3-land
16520: STR
16521: PPUSH
16522: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16526: LD_EXP 30
16530: PPUSH
16531: LD_STRING DH-1-land
16533: PPUSH
16534: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16538: LD_VAR 0 5
16542: PPUSH
16543: CALL_OW 313
16547: PUSH
16548: LD_INT 6
16550: EQUAL
16551: IFFALSE 16571
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16553: LD_VAR 0 5
16557: PPUSH
16558: CALL_OW 313
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16571: LD_EXP 40
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 235
// CenterOnUnits ( depot ) ;
16583: LD_VAR 0 5
16587: PPUSH
16588: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16592: LD_EXP 40
16596: PPUSH
16597: LD_VAR 0 5
16601: PPUSH
16602: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: LD_VAR 0 5
16619: PPUSH
16620: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16631: LD_EXP 40
16635: PPUSH
16636: CALL_OW 310
16640: PUSH
16641: LD_EXP 40
16645: PPUSH
16646: CALL_OW 302
16650: NOT
16651: OR
16652: PUSH
16653: LD_VAR 0 5
16657: PPUSH
16658: CALL_OW 302
16662: NOT
16663: OR
16664: IFFALSE 16624
// InGameOff ;
16666: CALL_OW 9
// blockAttack := false ;
16670: LD_ADDR_EXP 29
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16678: LD_EXP 40
16682: PPUSH
16683: CALL_OW 302
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16788
// if not IsOk ( depot ) then
16692: LD_VAR 0 5
16696: PPUSH
16697: CALL_OW 302
16701: NOT
16702: IFFALSE 16765
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16704: LD_EXP 40
16708: PPUSH
16709: LD_INT 30
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16719: LD_INT 35
16721: PPUSH
16722: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16726: LD_EXP 40
16730: PPUSH
16731: LD_INT 30
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 307
16741: PUSH
16742: LD_EXP 40
16746: PPUSH
16747: CALL_OW 301
16751: OR
16752: IFFALSE 16719
// RemoveUnit ( Ibrahim ) ;
16754: LD_EXP 40
16758: PPUSH
16759: CALL_OW 64
// exit ;
16763: GO 16788
// end ; ibrahimInDepot := true ;
16765: LD_ADDR_EXP 26
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// allowConvoys := true ;
16773: LD_ADDR_EXP 13
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16781: LD_STRING IbrahimInDepot
16783: PPUSH
16784: CALL_OW 97
// end ;
16788: PPOPN 5
16790: END
// export function IbrahimQuery ; begin
16791: LD_INT 0
16793: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16794: LD_STRING IbrahimQuery
16796: PPUSH
16797: CALL_OW 97
16801: PUSH
16802: LD_INT 1
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 17172
16810: POP
// begin allowConvoys := false ;
16811: LD_ADDR_EXP 13
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// ibrahimInDepot := false ;
16819: LD_ADDR_EXP 26
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// InGameOn ;
16827: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16831: LD_EXP 30
16835: PPUSH
16836: CALL_OW 87
// wait ( 0 0$1 ) ;
16840: LD_INT 35
16842: PPUSH
16843: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16847: LD_EXP 30
16851: PPUSH
16852: LD_STRING DH-1-interrogation
16854: PPUSH
16855: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16859: LD_EXP 40
16863: PPUSH
16864: LD_STRING DI-1-interrogation
16866: PPUSH
16867: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16871: LD_EXP 30
16875: PPUSH
16876: LD_STRING DH-2-interrogation
16878: PPUSH
16879: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16883: LD_EXP 40
16887: PPUSH
16888: LD_STRING DI-2-interrogation
16890: PPUSH
16891: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16895: LD_EXP 30
16899: PPUSH
16900: LD_STRING DH-3-interrogation
16902: PPUSH
16903: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16907: LD_EXP 40
16911: PPUSH
16912: LD_STRING DI-3-interrogation
16914: PPUSH
16915: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16919: LD_EXP 30
16923: PPUSH
16924: LD_STRING DH-4-interrogation
16926: PPUSH
16927: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16931: LD_EXP 40
16935: PPUSH
16936: LD_STRING DI-4-interrogation
16938: PPUSH
16939: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16943: LD_EXP 30
16947: PPUSH
16948: LD_STRING DH-5-interrogation
16950: PPUSH
16951: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16955: LD_EXP 40
16959: PPUSH
16960: LD_STRING DI-5-interrogation
16962: PPUSH
16963: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16967: LD_INT 10
16969: PPUSH
16970: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16974: LD_EXP 30
16978: PPUSH
16979: LD_STRING DH-6-interrogation
16981: PPUSH
16982: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16986: LD_EXP 40
16990: PPUSH
16991: LD_STRING DI-6-interrogation
16993: PPUSH
16994: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
16998: LD_EXP 40
17002: PPUSH
17003: LD_STRING DI-7-interrogation
17005: PPUSH
17006: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17010: LD_EXP 30
17014: PPUSH
17015: LD_STRING DH-7-interrogation
17017: PPUSH
17018: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17022: LD_INT 10
17024: PPUSH
17025: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17029: LD_EXP 30
17033: PPUSH
17034: LD_STRING DH-8-interrogation
17036: PPUSH
17037: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17041: LD_EXP 40
17045: PPUSH
17046: LD_STRING DI-8-interrogation
17048: PPUSH
17049: CALL_OW 88
// wait ( 0 0$1 ) ;
17053: LD_INT 35
17055: PPUSH
17056: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
17060: LD_STRING IbrahimDecisionQuery
17062: PPUSH
17063: CALL_OW 97
17067: PUSH
17068: LD_INT 1
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17100
17076: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17077: LD_EXP 40
17081: PPUSH
17082: LD_STRING DI-1-kill
17084: PPUSH
17085: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17089: LD_EXP 40
17093: PPUSH
17094: CALL_OW 66
// end ; 2 :
17098: GO 17166
17100: LD_INT 2
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17165
17108: POP
// begin SetSide ( Ibrahim , 6 ) ;
17109: LD_EXP 40
17113: PPUSH
17114: LD_INT 6
17116: PPUSH
17117: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17121: LD_EXP 40
17125: PPUSH
17126: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17130: LD_EXP 40
17134: PPUSH
17135: LD_INT 66
17137: PPUSH
17138: LD_INT 2
17140: PPUSH
17141: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17145: LD_EXP 40
17149: PPUSH
17150: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17154: LD_EXP 30
17158: PPUSH
17159: CALL_OW 122
// end ; end ;
17163: GO 17166
17165: POP
// InGameOff ;
17166: CALL_OW 9
// end ; 2 :
17170: GO 17186
17172: LD_INT 2
17174: DOUBLE
17175: EQUAL
17176: IFTRUE 17180
17178: GO 17185
17180: POP
// exit ; end ;
17181: GO 17270
17183: GO 17186
17185: POP
// allowConvoys := true ;
17186: LD_ADDR_EXP 13
17190: PUSH
17191: LD_INT 1
17193: ST_TO_ADDR
// blockAttack := false ;
17194: LD_ADDR_EXP 29
17198: PUSH
17199: LD_INT 0
17201: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17202: LD_INT 5250
17204: PPUSH
17205: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17209: LD_INT 35
17211: PPUSH
17212: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17216: LD_INT 81
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 21
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: NOT
17245: IFFALSE 17209
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17247: LD_EXP 40
17251: PPUSH
17252: LD_INT 34
17254: PPUSH
17255: LD_INT 21
17257: PPUSH
17258: CALL_OW 111
// ibrahimIsFree := true ;
17262: LD_ADDR_EXP 27
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
// end ;
17270: LD_VAR 0 1
17274: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17275: LD_EXP 27
17279: PUSH
17280: LD_EXP 40
17284: PPUSH
17285: CALL_OW 302
17289: AND
17290: PUSH
17291: LD_INT 2
17293: PPUSH
17294: LD_EXP 40
17298: PPUSH
17299: CALL_OW 292
17303: AND
17304: IFFALSE 18095
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
17315: PPUSH
17316: PPUSH
// begin wait ( 0 0$10 ) ;
17317: LD_INT 350
17319: PPUSH
17320: CALL_OW 67
// allowConvoys := false ;
17324: LD_ADDR_EXP 13
17328: PUSH
17329: LD_INT 0
17331: ST_TO_ADDR
// blockAttack := true ;
17332: LD_ADDR_EXP 29
17336: PUSH
17337: LD_INT 1
17339: ST_TO_ADDR
// depot := usDepot ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: LD_INT 11
17347: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17348: LD_INT 11
17350: NOT
17351: PUSH
17352: LD_INT 22
17354: PUSH
17355: LD_INT 2
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 50
17364: PUSH
17365: EMPTY
17366: LIST
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 69
17387: AND
17388: IFFALSE 17435
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_INT 22
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 50
17407: PUSH
17408: EMPTY
17409: LIST
17410: PUSH
17411: LD_INT 30
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: PPUSH
17426: CALL_OW 69
17430: PUSH
17431: LD_INT 1
17433: ARRAY
17434: ST_TO_ADDR
// InGameOn ;
17435: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17439: LD_EXP 40
17443: PPUSH
17444: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
17448: LD_EXP 40
17452: PPUSH
17453: LD_STRING DI-1-free
17455: PPUSH
17456: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
17460: LD_EXP 30
17464: PPUSH
17465: LD_EXP 40
17469: PPUSH
17470: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
17474: LD_EXP 30
17478: PPUSH
17479: LD_STRING DH-1-free
17481: PPUSH
17482: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
17486: LD_EXP 40
17490: PPUSH
17491: LD_EXP 30
17495: PPUSH
17496: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
17500: LD_EXP 40
17504: PPUSH
17505: LD_STRING DI-2-free
17507: PPUSH
17508: CALL_OW 88
// changeClass := 0 ;
17512: LD_ADDR_VAR 0 1
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17520: LD_STRING IbrahimJoinQuery
17522: PPUSH
17523: CALL_OW 97
17527: PUSH
17528: LD_INT 1
17530: DOUBLE
17531: EQUAL
17532: IFTRUE 17536
17534: GO 17547
17536: POP
// begin changeClass := 1 ;
17537: LD_ADDR_VAR 0 1
17541: PUSH
17542: LD_INT 1
17544: ST_TO_ADDR
// end ; 2 :
17545: GO 17795
17547: LD_INT 2
17549: DOUBLE
17550: EQUAL
17551: IFTRUE 17555
17553: GO 17715
17555: POP
// begin Say ( Heike , DH-1-decline ) ;
17556: LD_EXP 30
17560: PPUSH
17561: LD_STRING DH-1-decline
17563: PPUSH
17564: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17568: LD_EXP 40
17572: PPUSH
17573: LD_STRING DI-1-decline
17575: PPUSH
17576: CALL_OW 88
// InGameOff ;
17580: CALL_OW 9
// blockAttack := false ;
17584: LD_ADDR_EXP 29
17588: PUSH
17589: LD_INT 0
17591: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17592: LD_EXP 40
17596: PPUSH
17597: LD_INT 30
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 111
// p := 0 ;
17607: LD_ADDR_VAR 0 3
17611: PUSH
17612: LD_INT 0
17614: ST_TO_ADDR
// repeat p := p + 1 ;
17615: LD_ADDR_VAR 0 3
17619: PUSH
17620: LD_VAR 0 3
17624: PUSH
17625: LD_INT 1
17627: PLUS
17628: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17629: LD_INT 35
17631: PPUSH
17632: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17636: LD_EXP 40
17640: PPUSH
17641: LD_INT 30
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: CALL_OW 307
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 101
17664: PUSH
17665: LD_INT 6
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 69
17680: NOT
17681: OR
17682: PUSH
17683: LD_VAR 0 3
17687: PUSH
17688: LD_INT 10
17690: GREATER
17691: OR
17692: IFFALSE 17615
// RemoveUnit ( Ibrahim ) ;
17694: LD_EXP 40
17698: PPUSH
17699: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17703: LD_INT 1
17705: PPUSH
17706: LD_STRING 03_IbrahimHasEscaped
17708: PPUSH
17709: CALL_OW 39
// end ; 3 :
17713: GO 17795
17715: LD_INT 3
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17794
17723: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17724: LD_EXP 30
17728: PPUSH
17729: LD_STRING DH-1-radio-hq
17731: PPUSH
17732: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17736: LD_EXP 39
17740: PPUSH
17741: LD_STRING DO-1-radio-hq
17743: PPUSH
17744: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17748: LD_EXP 30
17752: PPUSH
17753: LD_STRING DH-2-radio-hq
17755: PPUSH
17756: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17760: LD_EXP 39
17764: PPUSH
17765: LD_STRING DO-2-radio-hq
17767: PPUSH
17768: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17772: LD_EXP 30
17776: PPUSH
17777: LD_STRING DH-3-radio-hq
17779: PPUSH
17780: CALL_OW 88
// changeClass := 1 ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 1
17791: ST_TO_ADDR
// end ; end ;
17792: GO 17795
17794: POP
// if changeClass then
17795: LD_VAR 0 1
17799: IFFALSE 18095
// begin Say ( Heike , DH-1-agree ) ;
17801: LD_EXP 30
17805: PPUSH
17806: LD_STRING DH-1-agree
17808: PPUSH
17809: CALL_OW 88
// if IsOk ( Givi ) then
17813: LD_EXP 31
17817: PPUSH
17818: CALL_OW 302
17822: IFFALSE 17860
// begin Say ( Givi , DG-1-agree ) ;
17824: LD_EXP 31
17828: PPUSH
17829: LD_STRING DG-1-agree
17831: PPUSH
17832: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17836: LD_EXP 30
17840: PPUSH
17841: LD_STRING DH-2-agree
17843: PPUSH
17844: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17848: LD_EXP 31
17852: PPUSH
17853: LD_STRING DG-2-agree
17855: PPUSH
17856: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17860: LD_VAR 0 4
17864: PPUSH
17865: CALL_OW 313
17869: PUSH
17870: LD_INT 6
17872: EQUAL
17873: IFFALSE 17893
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17875: LD_VAR 0 4
17879: PPUSH
17880: CALL_OW 313
17884: PUSH
17885: LD_INT 1
17887: ARRAY
17888: PPUSH
17889: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17893: LD_EXP 40
17897: PPUSH
17898: LD_INT 2
17900: PPUSH
17901: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17905: LD_ADDR_VAR 0 5
17909: PUSH
17910: LD_EXP 40
17914: PPUSH
17915: CALL_OW 250
17919: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17920: LD_ADDR_VAR 0 6
17924: PUSH
17925: LD_EXP 40
17929: PPUSH
17930: CALL_OW 251
17934: ST_TO_ADDR
// if depot then
17935: LD_VAR 0 4
17939: IFFALSE 17988
// begin ComEnterUnit ( Ibrahim , depot ) ;
17941: LD_EXP 40
17945: PPUSH
17946: LD_VAR 0 4
17950: PPUSH
17951: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17955: LD_INT 35
17957: PPUSH
17958: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17962: LD_EXP 40
17966: PPUSH
17967: CALL_OW 310
17971: IFFALSE 17955
// b := IsInUnit ( Ibrahim ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_EXP 40
17982: PPUSH
17983: CALL_OW 310
17987: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17988: LD_EXP 40
17992: PPUSH
17993: CALL_OW 64
// uc_side := 2 ;
17997: LD_ADDR_OWVAR 20
18001: PUSH
18002: LD_INT 2
18004: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18005: LD_ADDR_EXP 40
18009: PUSH
18010: LD_STRING Ibrahim
18012: PPUSH
18013: LD_INT 0
18015: PPUSH
18016: LD_STRING 
18018: PPUSH
18019: CALL 39930 0 3
18023: ST_TO_ADDR
// if depot then
18024: LD_VAR 0 4
18028: IFFALSE 18046
// PlaceHumanInUnit ( Ibrahim , b ) else
18030: LD_EXP 40
18034: PPUSH
18035: LD_VAR 0 2
18039: PPUSH
18040: CALL_OW 52
18044: GO 18068
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18046: LD_EXP 40
18050: PPUSH
18051: LD_VAR 0 5
18055: PPUSH
18056: LD_VAR 0 6
18060: PPUSH
18061: LD_INT 0
18063: PPUSH
18064: CALL_OW 48
// InGameOff ;
18068: CALL_OW 9
// allowConvoys := true ;
18072: LD_ADDR_EXP 13
18076: PUSH
18077: LD_INT 1
18079: ST_TO_ADDR
// blockAttack := false ;
18080: LD_ADDR_EXP 29
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18088: LD_STRING ACH_IBRAHIM
18090: PPUSH
18091: CALL_OW 543
// end ; end ;
18095: PPOPN 6
18097: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18098: LD_EXP 35
18102: PPUSH
18103: CALL_OW 256
18107: PUSH
18108: LD_INT 3
18110: LESS
18111: IFFALSE 18178
18113: GO 18115
18115: DISABLE
// begin DialogueOn ;
18116: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18120: LD_EXP 35
18124: PPUSH
18125: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18129: LD_EXP 35
18133: PPUSH
18134: LD_STRING DK-keydeath-1
18136: PPUSH
18137: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18141: LD_EXP 30
18145: PPUSH
18146: LD_STRING DH-keydeath-2
18148: PPUSH
18149: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18153: LD_EXP 30
18157: PPUSH
18158: LD_STRING DH-keydeath-3
18160: PPUSH
18161: CALL_OW 88
// DialogueOff ;
18165: CALL_OW 7
// KillUnit ( Kaia ) ;
18169: LD_EXP 35
18173: PPUSH
18174: CALL_OW 66
// end ;
18178: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18179: LD_EXP 12
18183: PUSH
18184: LD_EXP 22
18188: PUSH
18189: LD_INT 1
18191: LESS
18192: AND
18193: IFFALSE 18733
18195: GO 18197
18197: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18198: LD_INT 22
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: LD_INT 25
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 25
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PPUSH
18240: CALL_OW 69
18244: IFFALSE 18322
// begin ChangeSideFog ( 1 , 2 ) ;
18246: LD_INT 1
18248: PPUSH
18249: LD_INT 2
18251: PPUSH
18252: CALL_OW 343
// Query ( DestroyEnemy ) ;
18256: LD_STRING DestroyEnemy
18258: PPUSH
18259: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18263: LD_INT 35
18265: PPUSH
18266: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18270: LD_INT 22
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 25
18285: PUSH
18286: LD_INT 1
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 25
18295: PUSH
18296: LD_INT 3
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: PUSH
18317: LD_INT 0
18319: EQUAL
18320: IFFALSE 18263
// end ; DialogueOn ;
18322: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18326: LD_EXP 30
18330: PPUSH
18331: LD_STRING DH-1-final
18333: PPUSH
18334: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18338: LD_OWVAR 1
18342: PUSH
18343: LD_INT 138600
18345: PUSH
18346: LD_INT 134400
18348: PUSH
18349: LD_INT 130200
18351: PUSH
18352: LD_INT 126000
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: PUSH
18361: LD_OWVAR 67
18365: ARRAY
18366: LESSEQUAL
18367: IFFALSE 18381
// AddMedal ( med1 , 1 ) else
18369: LD_STRING med1
18371: PPUSH
18372: LD_INT 1
18374: PPUSH
18375: CALL_OW 101
18379: GO 18392
// AddMedal ( med1 , - 1 ) ;
18381: LD_STRING med1
18383: PPUSH
18384: LD_INT 1
18386: NEG
18387: PPUSH
18388: CALL_OW 101
// if vehCounter >= 2 then
18392: LD_EXP 23
18396: PUSH
18397: LD_INT 2
18399: GREATEREQUAL
18400: IFFALSE 18414
// AddMedal ( med2 , 1 ) else
18402: LD_STRING med2
18404: PPUSH
18405: LD_INT 1
18407: PPUSH
18408: CALL_OW 101
18412: GO 18425
// AddMedal ( med2 , - 1 ) ;
18414: LD_STRING med2
18416: PPUSH
18417: LD_INT 1
18419: NEG
18420: PPUSH
18421: CALL_OW 101
// if deadCounter = 0 then
18425: LD_EXP 10
18429: PUSH
18430: LD_INT 0
18432: EQUAL
18433: IFFALSE 18447
// AddMedal ( med3 , 1 ) else
18435: LD_STRING med3
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: CALL_OW 101
18445: GO 18458
// AddMedal ( med3 , - 1 ) ;
18447: LD_STRING med3
18449: PPUSH
18450: LD_INT 1
18452: NEG
18453: PPUSH
18454: CALL_OW 101
// GiveMedals ( MAIN ) ;
18458: LD_STRING MAIN
18460: PPUSH
18461: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18465: LD_INT 22
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 23
18477: PUSH
18478: LD_INT 2
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 21
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: LIST
18499: PPUSH
18500: CALL_OW 69
18504: PPUSH
18505: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18509: LD_EXP 30
18513: PPUSH
18514: LD_STRING 03_Heike
18516: PPUSH
18517: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18521: LD_EXP 34
18525: PPUSH
18526: LD_STRING 03_Aviradze
18528: PPUSH
18529: CALL_OW 38
// if Givi then
18533: LD_EXP 31
18537: IFFALSE 18551
// SaveCharacters ( Givi , 03_Givi ) ;
18539: LD_EXP 31
18543: PPUSH
18544: LD_STRING 03_Givi
18546: PPUSH
18547: CALL_OW 38
// if Mike then
18551: LD_EXP 32
18555: IFFALSE 18569
// SaveCharacters ( Mike , 03_Mike ) ;
18557: LD_EXP 32
18561: PPUSH
18562: LD_STRING 03_Mike
18564: PPUSH
18565: CALL_OW 38
// if Kamil then
18569: LD_EXP 33
18573: IFFALSE 18587
// SaveCharacters ( Kamil , 03_Kamil ) ;
18575: LD_EXP 33
18579: PPUSH
18580: LD_STRING 03_Kamil
18582: PPUSH
18583: CALL_OW 38
// if Kaia then
18587: LD_EXP 35
18591: IFFALSE 18605
// SaveCharacters ( Kaia , 03_Kaia ) ;
18593: LD_EXP 35
18597: PPUSH
18598: LD_STRING 03_Kaia
18600: PPUSH
18601: CALL_OW 38
// if Sophia then
18605: LD_EXP 36
18609: IFFALSE 18623
// SaveCharacters ( Sophia , 03_Sophia ) ;
18611: LD_EXP 36
18615: PPUSH
18616: LD_STRING 03_Sophia
18618: PPUSH
18619: CALL_OW 38
// if Markov then
18623: LD_EXP 37
18627: IFFALSE 18641
// SaveCharacters ( Markov , 03_Markov ) ;
18629: LD_EXP 37
18633: PPUSH
18634: LD_STRING 03_Markov
18636: PPUSH
18637: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18641: LD_EXP 40
18645: PUSH
18646: LD_EXP 40
18650: PPUSH
18651: CALL_OW 255
18655: PUSH
18656: LD_INT 2
18658: EQUAL
18659: AND
18660: IFFALSE 18681
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18662: LD_STRING enableBioCharacter(BIO_IBRA)
18664: PPUSH
18665: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18669: LD_EXP 40
18673: PPUSH
18674: LD_STRING 03_Ibrahim
18676: PPUSH
18677: CALL_OW 38
// end ; if heikeSecondSquad then
18681: LD_EXP 44
18685: IFFALSE 18699
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18687: LD_EXP 44
18691: PPUSH
18692: LD_STRING 03_others
18694: PPUSH
18695: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18699: LD_EXP 10
18703: PPUSH
18704: LD_STRING 03_DeadCounter
18706: PPUSH
18707: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18711: LD_STRING enableBioCharacter(BIO_OMAR)
18713: PPUSH
18714: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18718: LD_STRING enableBioCharacter(BIO_FARM)
18720: PPUSH
18721: CALL_OW 559
// YouWin ;
18725: CALL_OW 103
// DialogueOff ;
18729: CALL_OW 7
// end ; end_of_file
18733: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18734: LD_VAR 0 1
18738: PPUSH
18739: CALL 35641 0 1
// if un = Heike then
18743: LD_VAR 0 1
18747: PUSH
18748: LD_EXP 30
18752: EQUAL
18753: IFFALSE 18762
// YouLost ( Heike ) ;
18755: LD_STRING Heike
18757: PPUSH
18758: CALL_OW 104
// if un = Aviradze then
18762: LD_VAR 0 1
18766: PUSH
18767: LD_EXP 34
18771: EQUAL
18772: IFFALSE 18781
// YouLost ( Aviradze ) ;
18774: LD_STRING Aviradze
18776: PPUSH
18777: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18781: LD_VAR 0 1
18785: PUSH
18786: LD_INT 11
18788: EQUAL
18789: PUSH
18790: LD_EXP 12
18794: NOT
18795: AND
18796: IFFALSE 18805
// YouLost ( Depot ) ;
18798: LD_STRING Depot
18800: PPUSH
18801: CALL_OW 104
// if un = arDepot then
18805: LD_VAR 0 1
18809: PUSH
18810: LD_INT 5
18812: EQUAL
18813: IFFALSE 18822
// YouLost ( FarmerDepot ) ;
18815: LD_STRING FarmerDepot
18817: PPUSH
18818: CALL_OW 104
// if un = Farmer then
18822: LD_VAR 0 1
18826: PUSH
18827: LD_EXP 38
18831: EQUAL
18832: IFFALSE 18841
// YouLost ( Farmer ) ;
18834: LD_STRING Farmer
18836: PPUSH
18837: CALL_OW 104
// if un in usForces then
18841: LD_VAR 0 1
18845: PUSH
18846: LD_EXP 46
18850: IN
18851: IFFALSE 18869
// usForces := usForces diff un ;
18853: LD_ADDR_EXP 46
18857: PUSH
18858: LD_EXP 46
18862: PUSH
18863: LD_VAR 0 1
18867: DIFF
18868: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18869: LD_VAR 0 1
18873: PUSH
18874: LD_INT 22
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 23
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 21
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: IN
18914: IFFALSE 18930
// deadCounter := deadCounter + 1 ;
18916: LD_ADDR_EXP 10
18920: PUSH
18921: LD_EXP 10
18925: PUSH
18926: LD_INT 1
18928: PLUS
18929: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18930: LD_VAR 0 1
18934: PUSH
18935: LD_INT 22
18937: PUSH
18938: LD_INT 4
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 34
18947: PUSH
18948: LD_INT 12
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PPUSH
18959: CALL_OW 69
18963: IN
18964: PUSH
18965: LD_EXP 19
18969: NOT
18970: AND
18971: IFFALSE 18981
// firstConvoyDestroyed := true ;
18973: LD_ADDR_EXP 19
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if un in usAttackers then
18981: LD_VAR 0 1
18985: PUSH
18986: LD_EXP 49
18990: IN
18991: IFFALSE 19009
// usAttackers := usAttackers diff un ;
18993: LD_ADDR_EXP 49
18997: PUSH
18998: LD_EXP 49
19002: PUSH
19003: LD_VAR 0 1
19007: DIFF
19008: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_INT 5
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: IN
19043: IFFALSE 19059
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19045: LD_ADDR_EXP 21
19049: PUSH
19050: LD_EXP 21
19054: PUSH
19055: LD_INT 1
19057: PLUS
19058: ST_TO_ADDR
// end ;
19059: PPOPN 1
19061: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19062: LD_VAR 0 2
19066: PUSH
19067: LD_EXP 40
19071: EQUAL
19072: PUSH
19073: LD_EXP 26
19077: AND
19078: IFFALSE 19263
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19080: LD_INT 22
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 30
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 50
19102: PUSH
19103: EMPTY
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: PPUSH
19111: CALL_OW 69
19115: IFFALSE 19169
// begin InGameOn ;
19117: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19121: LD_EXP 40
19125: PPUSH
19126: LD_INT 11
19128: PPUSH
19129: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19133: LD_INT 35
19135: PPUSH
19136: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19140: LD_EXP 40
19144: PPUSH
19145: LD_INT 11
19147: PPUSH
19148: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19152: LD_EXP 40
19156: PPUSH
19157: CALL_OW 310
19161: IFFALSE 19133
// InGameOff ;
19163: CALL_OW 9
// end else
19167: GO 19263
// begin SetSide ( Ibrahim , 6 ) ;
19169: LD_EXP 40
19173: PPUSH
19174: LD_INT 6
19176: PPUSH
19177: CALL_OW 235
// ibrahimInDepot := false ;
19181: LD_ADDR_EXP 26
19185: PUSH
19186: LD_INT 0
19188: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19189: LD_EXP 40
19193: PPUSH
19194: LD_INT 30
19196: PPUSH
19197: LD_INT 1
19199: PPUSH
19200: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19204: LD_INT 35
19206: PPUSH
19207: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19211: LD_EXP 40
19215: PPUSH
19216: LD_INT 30
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19226: LD_EXP 40
19230: PPUSH
19231: LD_INT 30
19233: PPUSH
19234: LD_INT 1
19236: PPUSH
19237: CALL_OW 307
19241: PUSH
19242: LD_EXP 40
19246: PPUSH
19247: CALL_OW 301
19251: OR
19252: IFFALSE 19204
// RemoveUnit ( Ibrahim ) ;
19254: LD_EXP 40
19258: PPUSH
19259: CALL_OW 64
// end ; end ; end ;
19263: PPOPN 2
19265: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19266: LD_VAR 0 2
19270: PUSH
19271: LD_EXP 30
19275: EQUAL
19276: PUSH
19277: LD_VAR 0 1
19281: PUSH
19282: LD_INT 11
19284: EQUAL
19285: AND
19286: PUSH
19287: LD_EXP 26
19291: AND
19292: IFFALSE 19298
// IbrahimQuery ;
19294: CALL 16791 0 0
// end ;
19298: PPOPN 2
19300: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL_OW 141
// if oldId in usAttackers then
19310: LD_VAR 0 2
19314: PUSH
19315: LD_EXP 49
19319: IN
19320: IFFALSE 19338
// usAttackers := usAttackers diff oldId ;
19322: LD_ADDR_EXP 49
19326: PUSH
19327: LD_EXP 49
19331: PUSH
19332: LD_VAR 0 2
19336: DIFF
19337: ST_TO_ADDR
// if newId in usAttackers then
19338: LD_VAR 0 1
19342: PUSH
19343: LD_EXP 49
19347: IN
19348: IFFALSE 19366
// usAttackers := usAttackers diff newId ;
19350: LD_ADDR_EXP 49
19354: PUSH
19355: LD_EXP 49
19359: PUSH
19360: LD_VAR 0 1
19364: DIFF
19365: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19366: LD_VAR 0 3
19370: PUSH
19371: LD_INT 4
19373: EQUAL
19374: PUSH
19375: LD_EXP 19
19379: NOT
19380: AND
19381: IFFALSE 19391
// firstConvoyDestroyed := true ;
19383: LD_ADDR_EXP 19
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL_OW 264
19400: PUSH
19401: LD_INT 12
19403: EQUAL
19404: IFFALSE 19442
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19406: LD_ADDR_EXP 14
19410: PUSH
19411: LD_EXP 14
19415: PUSH
19416: LD_INT 1
19418: PLUS
19419: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19420: LD_VAR 0 1
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: CALL_OW 289
19432: PUSH
19433: LD_INT 0
19435: EQUAL
19436: IFFALSE 19442
// EmptyCargoDialog ;
19438: CALL 15409 0 0
// end ; end ;
19442: PPOPN 4
19444: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19445: LD_VAR 0 1
19449: PUSH
19450: LD_INT 2
19452: EQUAL
19453: PUSH
19454: LD_VAR 0 2
19458: PUSH
19459: LD_INT 5
19461: EQUAL
19462: AND
19463: IFFALSE 19472
// YouLost ( Attack ) ;
19465: LD_STRING Attack
19467: PPUSH
19468: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19472: LD_VAR 0 1
19476: PUSH
19477: LD_INT 2
19479: EQUAL
19480: PUSH
19481: LD_VAR 0 2
19485: PUSH
19486: LD_INT 1
19488: EQUAL
19489: AND
19490: IFFALSE 19500
// americanContact := true ;
19492: LD_ADDR_EXP 5
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// end ;
19500: PPOPN 2
19502: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19503: LD_VAR 0 1
19507: PPUSH
19508: CALL_OW 255
19512: PUSH
19513: LD_INT 1
19515: EQUAL
19516: PUSH
19517: LD_EXP 7
19521: NOT
19522: AND
19523: IFFALSE 19657
// begin if GetBType ( b ) = b_lab then
19525: LD_VAR 0 1
19529: PPUSH
19530: CALL_OW 266
19534: PUSH
19535: LD_INT 6
19537: EQUAL
19538: IFFALSE 19578
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19540: LD_EXP 46
19544: PPUSH
19545: LD_INT 25
19547: PUSH
19548: LD_INT 4
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 72
19559: PPUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 120
// AmLabResearch ( b ) ;
19569: LD_VAR 0 1
19573: PPUSH
19574: CALL 5134 0 1
// end ; if GetBType ( b ) = b_armoury then
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 266
19587: PUSH
19588: LD_INT 4
19590: EQUAL
19591: IFFALSE 19639
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19593: LD_EXP 46
19597: PPUSH
19598: LD_INT 25
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 3
19610: PUSH
19611: LD_INT 54
19613: PUSH
19614: EMPTY
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PPUSH
19625: CALL_OW 72
19629: PPUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19639: LD_ADDR_EXP 48
19643: PUSH
19644: LD_EXP 48
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 3
19656: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 255
19666: PUSH
19667: LD_INT 5
19669: EQUAL
19670: IFFALSE 19684
// SetBLevel ( b , 5 ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_INT 5
19679: PPUSH
19680: CALL_OW 241
// end ;
19684: PPOPN 1
19686: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19687: LD_VAR 0 1
19691: PPUSH
19692: CALL_OW 255
19696: PUSH
19697: LD_INT 2
19699: EQUAL
19700: IFFALSE 19716
// vehCounter := vehCounter + 1 ;
19702: LD_ADDR_EXP 23
19706: PUSH
19707: LD_EXP 23
19711: PUSH
19712: LD_INT 1
19714: PLUS
19715: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19716: LD_VAR 0 1
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL 35761 0 2
// end ;
19730: PPOPN 2
19732: END
// on SailEvent ( event ) do begin if event = eventAttack then
19733: LD_VAR 0 1
19737: PUSH
19738: LD_EXP 25
19742: EQUAL
19743: IFFALSE 19749
// AmericanAttack ;
19745: CALL 6778 0 0
// end ; end_of_file
19749: PPOPN 1
19751: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19752: LD_OWVAR 1
19756: PUSH
19757: LD_INT 10500
19759: PUSH
19760: LD_INT 9800
19762: PUSH
19763: LD_INT 9450
19765: PUSH
19766: LD_INT 9100
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: PUSH
19775: LD_OWVAR 67
19779: ARRAY
19780: LESSEQUAL
19781: IFFALSE 19808
19783: GO 19785
19785: DISABLE
// begin enable ;
19786: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19787: LD_INT 1
19789: PPUSH
19790: LD_INT 5
19792: PPUSH
19793: CALL_OW 12
19797: PPUSH
19798: LD_INT 9
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 55
// end ;
19808: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19809: LD_EXP 7
19813: PUSH
19814: LD_OWVAR 1
19818: PUSH
19819: LD_INT 94500
19821: LESSEQUAL
19822: AND
19823: IFFALSE 19850
19825: GO 19827
19827: DISABLE
// begin enable ;
19828: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19829: LD_INT 3
19831: PPUSH
19832: LD_INT 5
19834: PPUSH
19835: CALL_OW 12
19839: PPUSH
19840: LD_INT 9
19842: PPUSH
19843: LD_INT 1
19845: PPUSH
19846: CALL_OW 55
// end ; end_of_file
19850: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19851: LD_EXP 12
19855: NOT
19856: PUSH
19857: LD_EXP 17
19861: AND
19862: PUSH
19863: LD_EXP 4
19867: AND
19868: PUSH
19869: LD_EXP 16
19873: PUSH
19874: LD_EXP 17
19878: LESSEQUAL
19879: AND
19880: IFFALSE 19991
19882: GO 19884
19884: DISABLE
// begin enable ;
19885: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19886: LD_ADDR_OWVAR 47
19890: PUSH
19891: LD_STRING #X103-1
19893: PUSH
19894: LD_EXP 17
19898: PUSH
19899: LD_EXP 16
19903: MINUS
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19909: LD_ADDR_EXP 16
19913: PUSH
19914: LD_INT 5
19916: PPUSH
19917: CALL_OW 274
19921: PPUSH
19922: LD_INT 1
19924: PPUSH
19925: CALL_OW 275
19929: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19930: LD_INT 10
19932: PPUSH
19933: LD_INT 1
19935: PPUSH
19936: CALL_OW 287
19940: PUSH
19941: LD_INT 0
19943: EQUAL
19944: IFFALSE 19962
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19946: LD_ADDR_EXP 18
19950: PUSH
19951: LD_EXP 18
19955: PUSH
19956: LD_INT 35
19958: MINUS
19959: ST_TO_ADDR
19960: GO 19991
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
19962: LD_ADDR_EXP 18
19966: PUSH
19967: LD_INT 42000
19969: PUSH
19970: LD_INT 31500
19972: PUSH
19973: LD_INT 25200
19975: PUSH
19976: LD_INT 21000
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: PUSH
19985: LD_OWVAR 67
19989: ARRAY
19990: ST_TO_ADDR
// end ; end_of_file
19991: END
// every 0 0$1 do
19992: GO 19994
19994: DISABLE
// begin enable ;
19995: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19996: LD_STRING updateTimer(
19998: PUSH
19999: LD_OWVAR 1
20003: STR
20004: PUSH
20005: LD_STRING );
20007: STR
20008: PPUSH
20009: CALL_OW 559
// end ;
20013: END
// export function SOS_MapStart ( ) ; begin
20014: LD_INT 0
20016: PPUSH
// if streamModeActive then
20017: LD_EXP 50
20021: IFFALSE 20030
// DefineStreamItems ( true ) ;
20023: LD_INT 1
20025: PPUSH
20026: CALL 21684 0 1
// UpdateFactoryWaypoints ( ) ;
20030: CALL 34545 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20034: CALL 34802 0 0
// end ;
20038: LD_VAR 0 1
20042: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20043: LD_INT 0
20045: PPUSH
// if p2 = hack_mode then
20046: LD_VAR 0 2
20050: PUSH
20051: LD_INT 100
20053: EQUAL
20054: IFFALSE 21057
// begin if not StreamModeActive then
20056: LD_EXP 50
20060: NOT
20061: IFFALSE 20071
// StreamModeActive := true ;
20063: LD_ADDR_EXP 50
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// if p3 = 0 then
20071: LD_VAR 0 3
20075: PUSH
20076: LD_INT 0
20078: EQUAL
20079: IFFALSE 20085
// InitStreamMode ;
20081: CALL 21220 0 0
// if p3 = 1 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 1
20092: EQUAL
20093: IFFALSE 20103
// sRocket := true ;
20095: LD_ADDR_EXP 55
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 2 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 2
20110: EQUAL
20111: IFFALSE 20121
// sSpeed := true ;
20113: LD_ADDR_EXP 54
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 3 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 3
20128: EQUAL
20129: IFFALSE 20139
// sEngine := true ;
20131: LD_ADDR_EXP 56
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 4 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 4
20146: EQUAL
20147: IFFALSE 20157
// sSpec := true ;
20149: LD_ADDR_EXP 53
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 5 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 5
20164: EQUAL
20165: IFFALSE 20175
// sLevel := true ;
20167: LD_ADDR_EXP 57
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 6 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 6
20182: EQUAL
20183: IFFALSE 20193
// sArmoury := true ;
20185: LD_ADDR_EXP 58
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 7 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 7
20200: EQUAL
20201: IFFALSE 20211
// sRadar := true ;
20203: LD_ADDR_EXP 59
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 8 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 8
20218: EQUAL
20219: IFFALSE 20229
// sBunker := true ;
20221: LD_ADDR_EXP 60
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 9 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 9
20236: EQUAL
20237: IFFALSE 20247
// sHack := true ;
20239: LD_ADDR_EXP 61
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 10 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 10
20254: EQUAL
20255: IFFALSE 20265
// sFire := true ;
20257: LD_ADDR_EXP 62
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 11 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 11
20272: EQUAL
20273: IFFALSE 20283
// sRefresh := true ;
20275: LD_ADDR_EXP 63
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 12 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 12
20290: EQUAL
20291: IFFALSE 20301
// sExp := true ;
20293: LD_ADDR_EXP 64
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 13 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 13
20308: EQUAL
20309: IFFALSE 20319
// sDepot := true ;
20311: LD_ADDR_EXP 65
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 14 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 14
20326: EQUAL
20327: IFFALSE 20337
// sFlag := true ;
20329: LD_ADDR_EXP 66
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// if p3 = 15 then
20337: LD_VAR 0 3
20341: PUSH
20342: LD_INT 15
20344: EQUAL
20345: IFFALSE 20355
// sKamikadze := true ;
20347: LD_ADDR_EXP 74
20351: PUSH
20352: LD_INT 1
20354: ST_TO_ADDR
// if p3 = 16 then
20355: LD_VAR 0 3
20359: PUSH
20360: LD_INT 16
20362: EQUAL
20363: IFFALSE 20373
// sTroll := true ;
20365: LD_ADDR_EXP 75
20369: PUSH
20370: LD_INT 1
20372: ST_TO_ADDR
// if p3 = 17 then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 17
20380: EQUAL
20381: IFFALSE 20391
// sSlow := true ;
20383: LD_ADDR_EXP 76
20387: PUSH
20388: LD_INT 1
20390: ST_TO_ADDR
// if p3 = 18 then
20391: LD_VAR 0 3
20395: PUSH
20396: LD_INT 18
20398: EQUAL
20399: IFFALSE 20409
// sLack := true ;
20401: LD_ADDR_EXP 77
20405: PUSH
20406: LD_INT 1
20408: ST_TO_ADDR
// if p3 = 19 then
20409: LD_VAR 0 3
20413: PUSH
20414: LD_INT 19
20416: EQUAL
20417: IFFALSE 20427
// sTank := true ;
20419: LD_ADDR_EXP 79
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// if p3 = 20 then
20427: LD_VAR 0 3
20431: PUSH
20432: LD_INT 20
20434: EQUAL
20435: IFFALSE 20445
// sRemote := true ;
20437: LD_ADDR_EXP 80
20441: PUSH
20442: LD_INT 1
20444: ST_TO_ADDR
// if p3 = 21 then
20445: LD_VAR 0 3
20449: PUSH
20450: LD_INT 21
20452: EQUAL
20453: IFFALSE 20463
// sPowell := true ;
20455: LD_ADDR_EXP 81
20459: PUSH
20460: LD_INT 1
20462: ST_TO_ADDR
// if p3 = 22 then
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 22
20470: EQUAL
20471: IFFALSE 20481
// sTeleport := true ;
20473: LD_ADDR_EXP 84
20477: PUSH
20478: LD_INT 1
20480: ST_TO_ADDR
// if p3 = 23 then
20481: LD_VAR 0 3
20485: PUSH
20486: LD_INT 23
20488: EQUAL
20489: IFFALSE 20499
// sOilTower := true ;
20491: LD_ADDR_EXP 86
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// if p3 = 24 then
20499: LD_VAR 0 3
20503: PUSH
20504: LD_INT 24
20506: EQUAL
20507: IFFALSE 20517
// sShovel := true ;
20509: LD_ADDR_EXP 87
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// if p3 = 25 then
20517: LD_VAR 0 3
20521: PUSH
20522: LD_INT 25
20524: EQUAL
20525: IFFALSE 20535
// sSheik := true ;
20527: LD_ADDR_EXP 88
20531: PUSH
20532: LD_INT 1
20534: ST_TO_ADDR
// if p3 = 26 then
20535: LD_VAR 0 3
20539: PUSH
20540: LD_INT 26
20542: EQUAL
20543: IFFALSE 20553
// sEarthquake := true ;
20545: LD_ADDR_EXP 90
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// if p3 = 27 then
20553: LD_VAR 0 3
20557: PUSH
20558: LD_INT 27
20560: EQUAL
20561: IFFALSE 20571
// sAI := true ;
20563: LD_ADDR_EXP 91
20567: PUSH
20568: LD_INT 1
20570: ST_TO_ADDR
// if p3 = 28 then
20571: LD_VAR 0 3
20575: PUSH
20576: LD_INT 28
20578: EQUAL
20579: IFFALSE 20589
// sCargo := true ;
20581: LD_ADDR_EXP 94
20585: PUSH
20586: LD_INT 1
20588: ST_TO_ADDR
// if p3 = 29 then
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 29
20596: EQUAL
20597: IFFALSE 20607
// sDLaser := true ;
20599: LD_ADDR_EXP 95
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// if p3 = 30 then
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 30
20614: EQUAL
20615: IFFALSE 20625
// sExchange := true ;
20617: LD_ADDR_EXP 96
20621: PUSH
20622: LD_INT 1
20624: ST_TO_ADDR
// if p3 = 31 then
20625: LD_VAR 0 3
20629: PUSH
20630: LD_INT 31
20632: EQUAL
20633: IFFALSE 20643
// sFac := true ;
20635: LD_ADDR_EXP 97
20639: PUSH
20640: LD_INT 1
20642: ST_TO_ADDR
// if p3 = 32 then
20643: LD_VAR 0 3
20647: PUSH
20648: LD_INT 32
20650: EQUAL
20651: IFFALSE 20661
// sPower := true ;
20653: LD_ADDR_EXP 98
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// if p3 = 33 then
20661: LD_VAR 0 3
20665: PUSH
20666: LD_INT 33
20668: EQUAL
20669: IFFALSE 20679
// sRandom := true ;
20671: LD_ADDR_EXP 99
20675: PUSH
20676: LD_INT 1
20678: ST_TO_ADDR
// if p3 = 34 then
20679: LD_VAR 0 3
20683: PUSH
20684: LD_INT 34
20686: EQUAL
20687: IFFALSE 20697
// sShield := true ;
20689: LD_ADDR_EXP 100
20693: PUSH
20694: LD_INT 1
20696: ST_TO_ADDR
// if p3 = 35 then
20697: LD_VAR 0 3
20701: PUSH
20702: LD_INT 35
20704: EQUAL
20705: IFFALSE 20715
// sTime := true ;
20707: LD_ADDR_EXP 101
20711: PUSH
20712: LD_INT 1
20714: ST_TO_ADDR
// if p3 = 36 then
20715: LD_VAR 0 3
20719: PUSH
20720: LD_INT 36
20722: EQUAL
20723: IFFALSE 20733
// sTools := true ;
20725: LD_ADDR_EXP 102
20729: PUSH
20730: LD_INT 1
20732: ST_TO_ADDR
// if p3 = 101 then
20733: LD_VAR 0 3
20737: PUSH
20738: LD_INT 101
20740: EQUAL
20741: IFFALSE 20751
// sSold := true ;
20743: LD_ADDR_EXP 67
20747: PUSH
20748: LD_INT 1
20750: ST_TO_ADDR
// if p3 = 102 then
20751: LD_VAR 0 3
20755: PUSH
20756: LD_INT 102
20758: EQUAL
20759: IFFALSE 20769
// sDiff := true ;
20761: LD_ADDR_EXP 68
20765: PUSH
20766: LD_INT 1
20768: ST_TO_ADDR
// if p3 = 103 then
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 103
20776: EQUAL
20777: IFFALSE 20787
// sFog := true ;
20779: LD_ADDR_EXP 71
20783: PUSH
20784: LD_INT 1
20786: ST_TO_ADDR
// if p3 = 104 then
20787: LD_VAR 0 3
20791: PUSH
20792: LD_INT 104
20794: EQUAL
20795: IFFALSE 20805
// sReset := true ;
20797: LD_ADDR_EXP 72
20801: PUSH
20802: LD_INT 1
20804: ST_TO_ADDR
// if p3 = 105 then
20805: LD_VAR 0 3
20809: PUSH
20810: LD_INT 105
20812: EQUAL
20813: IFFALSE 20823
// sSun := true ;
20815: LD_ADDR_EXP 73
20819: PUSH
20820: LD_INT 1
20822: ST_TO_ADDR
// if p3 = 106 then
20823: LD_VAR 0 3
20827: PUSH
20828: LD_INT 106
20830: EQUAL
20831: IFFALSE 20841
// sTiger := true ;
20833: LD_ADDR_EXP 69
20837: PUSH
20838: LD_INT 1
20840: ST_TO_ADDR
// if p3 = 107 then
20841: LD_VAR 0 3
20845: PUSH
20846: LD_INT 107
20848: EQUAL
20849: IFFALSE 20859
// sBomb := true ;
20851: LD_ADDR_EXP 70
20855: PUSH
20856: LD_INT 1
20858: ST_TO_ADDR
// if p3 = 108 then
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 108
20866: EQUAL
20867: IFFALSE 20877
// sWound := true ;
20869: LD_ADDR_EXP 78
20873: PUSH
20874: LD_INT 1
20876: ST_TO_ADDR
// if p3 = 109 then
20877: LD_VAR 0 3
20881: PUSH
20882: LD_INT 109
20884: EQUAL
20885: IFFALSE 20895
// sBetray := true ;
20887: LD_ADDR_EXP 82
20891: PUSH
20892: LD_INT 1
20894: ST_TO_ADDR
// if p3 = 110 then
20895: LD_VAR 0 3
20899: PUSH
20900: LD_INT 110
20902: EQUAL
20903: IFFALSE 20913
// sContamin := true ;
20905: LD_ADDR_EXP 83
20909: PUSH
20910: LD_INT 1
20912: ST_TO_ADDR
// if p3 = 111 then
20913: LD_VAR 0 3
20917: PUSH
20918: LD_INT 111
20920: EQUAL
20921: IFFALSE 20931
// sOil := true ;
20923: LD_ADDR_EXP 85
20927: PUSH
20928: LD_INT 1
20930: ST_TO_ADDR
// if p3 = 112 then
20931: LD_VAR 0 3
20935: PUSH
20936: LD_INT 112
20938: EQUAL
20939: IFFALSE 20949
// sStu := true ;
20941: LD_ADDR_EXP 89
20945: PUSH
20946: LD_INT 1
20948: ST_TO_ADDR
// if p3 = 113 then
20949: LD_VAR 0 3
20953: PUSH
20954: LD_INT 113
20956: EQUAL
20957: IFFALSE 20967
// sBazooka := true ;
20959: LD_ADDR_EXP 92
20963: PUSH
20964: LD_INT 1
20966: ST_TO_ADDR
// if p3 = 114 then
20967: LD_VAR 0 3
20971: PUSH
20972: LD_INT 114
20974: EQUAL
20975: IFFALSE 20985
// sMortar := true ;
20977: LD_ADDR_EXP 93
20981: PUSH
20982: LD_INT 1
20984: ST_TO_ADDR
// if p3 = 115 then
20985: LD_VAR 0 3
20989: PUSH
20990: LD_INT 115
20992: EQUAL
20993: IFFALSE 21003
// sRanger := true ;
20995: LD_ADDR_EXP 103
20999: PUSH
21000: LD_INT 1
21002: ST_TO_ADDR
// if p3 = 116 then
21003: LD_VAR 0 3
21007: PUSH
21008: LD_INT 116
21010: EQUAL
21011: IFFALSE 21021
// sComputer := true ;
21013: LD_ADDR_EXP 104
21017: PUSH
21018: LD_INT 1
21020: ST_TO_ADDR
// if p3 = 117 then
21021: LD_VAR 0 3
21025: PUSH
21026: LD_INT 117
21028: EQUAL
21029: IFFALSE 21039
// s30 := true ;
21031: LD_ADDR_EXP 105
21035: PUSH
21036: LD_INT 1
21038: ST_TO_ADDR
// if p3 = 118 then
21039: LD_VAR 0 3
21043: PUSH
21044: LD_INT 118
21046: EQUAL
21047: IFFALSE 21057
// s60 := true ;
21049: LD_ADDR_EXP 106
21053: PUSH
21054: LD_INT 1
21056: ST_TO_ADDR
// end ; if p2 = stream_mode then
21057: LD_VAR 0 2
21061: PUSH
21062: LD_INT 101
21064: EQUAL
21065: IFFALSE 21193
// begin case p3 of 1 :
21067: LD_VAR 0 3
21071: PUSH
21072: LD_INT 1
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21087
21080: POP
// hHackUnlimitedResources ; 2 :
21081: CALL 33291 0 0
21085: GO 21193
21087: LD_INT 2
21089: DOUBLE
21090: EQUAL
21091: IFTRUE 21095
21093: GO 21102
21095: POP
// hHackSetLevel10 ; 3 :
21096: CALL 33424 0 0
21100: GO 21193
21102: LD_INT 3
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21117
21110: POP
// hHackSetLevel10YourUnits ; 4 :
21111: CALL 33509 0 0
21115: GO 21193
21117: LD_INT 4
21119: DOUBLE
21120: EQUAL
21121: IFTRUE 21125
21123: GO 21132
21125: POP
// hHackInvincible ; 5 :
21126: CALL 33957 0 0
21130: GO 21193
21132: LD_INT 5
21134: DOUBLE
21135: EQUAL
21136: IFTRUE 21140
21138: GO 21147
21140: POP
// hHackInvisible ; 6 :
21141: CALL 34068 0 0
21145: GO 21193
21147: LD_INT 6
21149: DOUBLE
21150: EQUAL
21151: IFTRUE 21155
21153: GO 21162
21155: POP
// hHackChangeYourSide ; 7 :
21156: CALL 34125 0 0
21160: GO 21193
21162: LD_INT 7
21164: DOUBLE
21165: EQUAL
21166: IFTRUE 21170
21168: GO 21177
21170: POP
// hHackChangeUnitSide ; 8 :
21171: CALL 34167 0 0
21175: GO 21193
21177: LD_INT 8
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21192
21185: POP
// hHackFog ; end ;
21186: CALL 34268 0 0
21190: GO 21193
21192: POP
// end ; end ;
21193: LD_VAR 0 7
21197: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21198: GO 21200
21200: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21201: LD_STRING initStreamRollete();
21203: PPUSH
21204: CALL_OW 559
// InitStreamMode ;
21208: CALL 21220 0 0
// DefineStreamItems ( false ) ;
21212: LD_INT 0
21214: PPUSH
21215: CALL 21684 0 1
// end ;
21219: END
// function InitStreamMode ; begin
21220: LD_INT 0
21222: PPUSH
// streamModeActive := false ;
21223: LD_ADDR_EXP 50
21227: PUSH
21228: LD_INT 0
21230: ST_TO_ADDR
// normalCounter := 36 ;
21231: LD_ADDR_EXP 51
21235: PUSH
21236: LD_INT 36
21238: ST_TO_ADDR
// hardcoreCounter := 18 ;
21239: LD_ADDR_EXP 52
21243: PUSH
21244: LD_INT 18
21246: ST_TO_ADDR
// sRocket := false ;
21247: LD_ADDR_EXP 55
21251: PUSH
21252: LD_INT 0
21254: ST_TO_ADDR
// sSpeed := false ;
21255: LD_ADDR_EXP 54
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// sEngine := false ;
21263: LD_ADDR_EXP 56
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// sSpec := false ;
21271: LD_ADDR_EXP 53
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// sLevel := false ;
21279: LD_ADDR_EXP 57
21283: PUSH
21284: LD_INT 0
21286: ST_TO_ADDR
// sArmoury := false ;
21287: LD_ADDR_EXP 58
21291: PUSH
21292: LD_INT 0
21294: ST_TO_ADDR
// sRadar := false ;
21295: LD_ADDR_EXP 59
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// sBunker := false ;
21303: LD_ADDR_EXP 60
21307: PUSH
21308: LD_INT 0
21310: ST_TO_ADDR
// sHack := false ;
21311: LD_ADDR_EXP 61
21315: PUSH
21316: LD_INT 0
21318: ST_TO_ADDR
// sFire := false ;
21319: LD_ADDR_EXP 62
21323: PUSH
21324: LD_INT 0
21326: ST_TO_ADDR
// sRefresh := false ;
21327: LD_ADDR_EXP 63
21331: PUSH
21332: LD_INT 0
21334: ST_TO_ADDR
// sExp := false ;
21335: LD_ADDR_EXP 64
21339: PUSH
21340: LD_INT 0
21342: ST_TO_ADDR
// sDepot := false ;
21343: LD_ADDR_EXP 65
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// sFlag := false ;
21351: LD_ADDR_EXP 66
21355: PUSH
21356: LD_INT 0
21358: ST_TO_ADDR
// sKamikadze := false ;
21359: LD_ADDR_EXP 74
21363: PUSH
21364: LD_INT 0
21366: ST_TO_ADDR
// sTroll := false ;
21367: LD_ADDR_EXP 75
21371: PUSH
21372: LD_INT 0
21374: ST_TO_ADDR
// sSlow := false ;
21375: LD_ADDR_EXP 76
21379: PUSH
21380: LD_INT 0
21382: ST_TO_ADDR
// sLack := false ;
21383: LD_ADDR_EXP 77
21387: PUSH
21388: LD_INT 0
21390: ST_TO_ADDR
// sTank := false ;
21391: LD_ADDR_EXP 79
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// sRemote := false ;
21399: LD_ADDR_EXP 80
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
// sPowell := false ;
21407: LD_ADDR_EXP 81
21411: PUSH
21412: LD_INT 0
21414: ST_TO_ADDR
// sTeleport := false ;
21415: LD_ADDR_EXP 84
21419: PUSH
21420: LD_INT 0
21422: ST_TO_ADDR
// sOilTower := false ;
21423: LD_ADDR_EXP 86
21427: PUSH
21428: LD_INT 0
21430: ST_TO_ADDR
// sShovel := false ;
21431: LD_ADDR_EXP 87
21435: PUSH
21436: LD_INT 0
21438: ST_TO_ADDR
// sSheik := false ;
21439: LD_ADDR_EXP 88
21443: PUSH
21444: LD_INT 0
21446: ST_TO_ADDR
// sEarthquake := false ;
21447: LD_ADDR_EXP 90
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
// sAI := false ;
21455: LD_ADDR_EXP 91
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// sCargo := false ;
21463: LD_ADDR_EXP 94
21467: PUSH
21468: LD_INT 0
21470: ST_TO_ADDR
// sDLaser := false ;
21471: LD_ADDR_EXP 95
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// sExchange := false ;
21479: LD_ADDR_EXP 96
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sFac := false ;
21487: LD_ADDR_EXP 97
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sPower := false ;
21495: LD_ADDR_EXP 98
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sRandom := false ;
21503: LD_ADDR_EXP 99
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// sShield := false ;
21511: LD_ADDR_EXP 100
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// sTime := false ;
21519: LD_ADDR_EXP 101
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// sTools := false ;
21527: LD_ADDR_EXP 102
21531: PUSH
21532: LD_INT 0
21534: ST_TO_ADDR
// sSold := false ;
21535: LD_ADDR_EXP 67
21539: PUSH
21540: LD_INT 0
21542: ST_TO_ADDR
// sDiff := false ;
21543: LD_ADDR_EXP 68
21547: PUSH
21548: LD_INT 0
21550: ST_TO_ADDR
// sFog := false ;
21551: LD_ADDR_EXP 71
21555: PUSH
21556: LD_INT 0
21558: ST_TO_ADDR
// sReset := false ;
21559: LD_ADDR_EXP 72
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// sSun := false ;
21567: LD_ADDR_EXP 73
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// sTiger := false ;
21575: LD_ADDR_EXP 69
21579: PUSH
21580: LD_INT 0
21582: ST_TO_ADDR
// sBomb := false ;
21583: LD_ADDR_EXP 70
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sWound := false ;
21591: LD_ADDR_EXP 78
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sBetray := false ;
21599: LD_ADDR_EXP 82
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sContamin := false ;
21607: LD_ADDR_EXP 83
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sOil := false ;
21615: LD_ADDR_EXP 85
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sStu := false ;
21623: LD_ADDR_EXP 89
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sBazooka := false ;
21631: LD_ADDR_EXP 92
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sMortar := false ;
21639: LD_ADDR_EXP 93
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sRanger := false ;
21647: LD_ADDR_EXP 103
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sComputer := false ;
21655: LD_ADDR_EXP 104
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// s30 := false ;
21663: LD_ADDR_EXP 105
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// s60 := false ;
21671: LD_ADDR_EXP 106
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// end ;
21679: LD_VAR 0 1
21683: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21684: LD_INT 0
21686: PPUSH
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
// result := [ ] ;
21693: LD_ADDR_VAR 0 2
21697: PUSH
21698: EMPTY
21699: ST_TO_ADDR
// if campaign_id = 1 then
21700: LD_OWVAR 69
21704: PUSH
21705: LD_INT 1
21707: EQUAL
21708: IFFALSE 24874
// begin case mission_number of 1 :
21710: LD_OWVAR 70
21714: PUSH
21715: LD_INT 1
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21799
21723: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21724: LD_ADDR_VAR 0 2
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: LD_INT 4
21734: PUSH
21735: LD_INT 11
21737: PUSH
21738: LD_INT 12
21740: PUSH
21741: LD_INT 15
21743: PUSH
21744: LD_INT 16
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_INT 23
21752: PUSH
21753: LD_INT 26
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 101
21769: PUSH
21770: LD_INT 102
21772: PUSH
21773: LD_INT 106
21775: PUSH
21776: LD_INT 116
21778: PUSH
21779: LD_INT 117
21781: PUSH
21782: LD_INT 118
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: ST_TO_ADDR
21797: GO 24872
21799: LD_INT 2
21801: DOUBLE
21802: EQUAL
21803: IFTRUE 21807
21805: GO 21891
21807: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21808: LD_ADDR_VAR 0 2
21812: PUSH
21813: LD_INT 2
21815: PUSH
21816: LD_INT 4
21818: PUSH
21819: LD_INT 11
21821: PUSH
21822: LD_INT 12
21824: PUSH
21825: LD_INT 15
21827: PUSH
21828: LD_INT 16
21830: PUSH
21831: LD_INT 22
21833: PUSH
21834: LD_INT 23
21836: PUSH
21837: LD_INT 26
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 101
21853: PUSH
21854: LD_INT 102
21856: PUSH
21857: LD_INT 105
21859: PUSH
21860: LD_INT 106
21862: PUSH
21863: LD_INT 108
21865: PUSH
21866: LD_INT 116
21868: PUSH
21869: LD_INT 117
21871: PUSH
21872: LD_INT 118
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: ST_TO_ADDR
21889: GO 24872
21891: LD_INT 3
21893: DOUBLE
21894: EQUAL
21895: IFTRUE 21899
21897: GO 21987
21899: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21900: LD_ADDR_VAR 0 2
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: LD_INT 4
21910: PUSH
21911: LD_INT 5
21913: PUSH
21914: LD_INT 11
21916: PUSH
21917: LD_INT 12
21919: PUSH
21920: LD_INT 15
21922: PUSH
21923: LD_INT 16
21925: PUSH
21926: LD_INT 22
21928: PUSH
21929: LD_INT 26
21931: PUSH
21932: LD_INT 36
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 101
21949: PUSH
21950: LD_INT 102
21952: PUSH
21953: LD_INT 105
21955: PUSH
21956: LD_INT 106
21958: PUSH
21959: LD_INT 108
21961: PUSH
21962: LD_INT 116
21964: PUSH
21965: LD_INT 117
21967: PUSH
21968: LD_INT 118
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: ST_TO_ADDR
21985: GO 24872
21987: LD_INT 4
21989: DOUBLE
21990: EQUAL
21991: IFTRUE 21995
21993: GO 22091
21995: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21996: LD_ADDR_VAR 0 2
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: LD_INT 4
22006: PUSH
22007: LD_INT 5
22009: PUSH
22010: LD_INT 8
22012: PUSH
22013: LD_INT 11
22015: PUSH
22016: LD_INT 12
22018: PUSH
22019: LD_INT 15
22021: PUSH
22022: LD_INT 16
22024: PUSH
22025: LD_INT 22
22027: PUSH
22028: LD_INT 23
22030: PUSH
22031: LD_INT 26
22033: PUSH
22034: LD_INT 36
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 101
22053: PUSH
22054: LD_INT 102
22056: PUSH
22057: LD_INT 105
22059: PUSH
22060: LD_INT 106
22062: PUSH
22063: LD_INT 108
22065: PUSH
22066: LD_INT 116
22068: PUSH
22069: LD_INT 117
22071: PUSH
22072: LD_INT 118
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: ST_TO_ADDR
22089: GO 24872
22091: LD_INT 5
22093: DOUBLE
22094: EQUAL
22095: IFTRUE 22099
22097: GO 22211
22099: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22100: LD_ADDR_VAR 0 2
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: LD_INT 4
22110: PUSH
22111: LD_INT 5
22113: PUSH
22114: LD_INT 6
22116: PUSH
22117: LD_INT 8
22119: PUSH
22120: LD_INT 11
22122: PUSH
22123: LD_INT 12
22125: PUSH
22126: LD_INT 15
22128: PUSH
22129: LD_INT 16
22131: PUSH
22132: LD_INT 22
22134: PUSH
22135: LD_INT 23
22137: PUSH
22138: LD_INT 25
22140: PUSH
22141: LD_INT 26
22143: PUSH
22144: LD_INT 36
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 101
22165: PUSH
22166: LD_INT 102
22168: PUSH
22169: LD_INT 105
22171: PUSH
22172: LD_INT 106
22174: PUSH
22175: LD_INT 108
22177: PUSH
22178: LD_INT 109
22180: PUSH
22181: LD_INT 112
22183: PUSH
22184: LD_INT 116
22186: PUSH
22187: LD_INT 117
22189: PUSH
22190: LD_INT 118
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: ST_TO_ADDR
22209: GO 24872
22211: LD_INT 6
22213: DOUBLE
22214: EQUAL
22215: IFTRUE 22219
22217: GO 22351
22219: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22220: LD_ADDR_VAR 0 2
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: LD_INT 4
22230: PUSH
22231: LD_INT 5
22233: PUSH
22234: LD_INT 6
22236: PUSH
22237: LD_INT 8
22239: PUSH
22240: LD_INT 11
22242: PUSH
22243: LD_INT 12
22245: PUSH
22246: LD_INT 15
22248: PUSH
22249: LD_INT 16
22251: PUSH
22252: LD_INT 20
22254: PUSH
22255: LD_INT 21
22257: PUSH
22258: LD_INT 22
22260: PUSH
22261: LD_INT 23
22263: PUSH
22264: LD_INT 25
22266: PUSH
22267: LD_INT 26
22269: PUSH
22270: LD_INT 30
22272: PUSH
22273: LD_INT 31
22275: PUSH
22276: LD_INT 32
22278: PUSH
22279: LD_INT 36
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 101
22305: PUSH
22306: LD_INT 102
22308: PUSH
22309: LD_INT 105
22311: PUSH
22312: LD_INT 106
22314: PUSH
22315: LD_INT 108
22317: PUSH
22318: LD_INT 109
22320: PUSH
22321: LD_INT 112
22323: PUSH
22324: LD_INT 116
22326: PUSH
22327: LD_INT 117
22329: PUSH
22330: LD_INT 118
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: ST_TO_ADDR
22349: GO 24872
22351: LD_INT 7
22353: DOUBLE
22354: EQUAL
22355: IFTRUE 22359
22357: GO 22471
22359: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22360: LD_ADDR_VAR 0 2
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: LD_INT 4
22370: PUSH
22371: LD_INT 5
22373: PUSH
22374: LD_INT 7
22376: PUSH
22377: LD_INT 11
22379: PUSH
22380: LD_INT 12
22382: PUSH
22383: LD_INT 15
22385: PUSH
22386: LD_INT 16
22388: PUSH
22389: LD_INT 20
22391: PUSH
22392: LD_INT 21
22394: PUSH
22395: LD_INT 22
22397: PUSH
22398: LD_INT 23
22400: PUSH
22401: LD_INT 25
22403: PUSH
22404: LD_INT 26
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 101
22425: PUSH
22426: LD_INT 102
22428: PUSH
22429: LD_INT 103
22431: PUSH
22432: LD_INT 105
22434: PUSH
22435: LD_INT 106
22437: PUSH
22438: LD_INT 108
22440: PUSH
22441: LD_INT 112
22443: PUSH
22444: LD_INT 116
22446: PUSH
22447: LD_INT 117
22449: PUSH
22450: LD_INT 118
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: ST_TO_ADDR
22469: GO 24872
22471: LD_INT 8
22473: DOUBLE
22474: EQUAL
22475: IFTRUE 22479
22477: GO 22619
22479: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22480: LD_ADDR_VAR 0 2
22484: PUSH
22485: LD_INT 2
22487: PUSH
22488: LD_INT 4
22490: PUSH
22491: LD_INT 5
22493: PUSH
22494: LD_INT 6
22496: PUSH
22497: LD_INT 7
22499: PUSH
22500: LD_INT 8
22502: PUSH
22503: LD_INT 11
22505: PUSH
22506: LD_INT 12
22508: PUSH
22509: LD_INT 15
22511: PUSH
22512: LD_INT 16
22514: PUSH
22515: LD_INT 20
22517: PUSH
22518: LD_INT 21
22520: PUSH
22521: LD_INT 22
22523: PUSH
22524: LD_INT 23
22526: PUSH
22527: LD_INT 25
22529: PUSH
22530: LD_INT 26
22532: PUSH
22533: LD_INT 30
22535: PUSH
22536: LD_INT 31
22538: PUSH
22539: LD_INT 32
22541: PUSH
22542: LD_INT 36
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 101
22569: PUSH
22570: LD_INT 102
22572: PUSH
22573: LD_INT 103
22575: PUSH
22576: LD_INT 105
22578: PUSH
22579: LD_INT 106
22581: PUSH
22582: LD_INT 108
22584: PUSH
22585: LD_INT 109
22587: PUSH
22588: LD_INT 112
22590: PUSH
22591: LD_INT 116
22593: PUSH
22594: LD_INT 117
22596: PUSH
22597: LD_INT 118
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: ST_TO_ADDR
22617: GO 24872
22619: LD_INT 9
22621: DOUBLE
22622: EQUAL
22623: IFTRUE 22627
22625: GO 22775
22627: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22628: LD_ADDR_VAR 0 2
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: LD_INT 4
22638: PUSH
22639: LD_INT 5
22641: PUSH
22642: LD_INT 6
22644: PUSH
22645: LD_INT 7
22647: PUSH
22648: LD_INT 8
22650: PUSH
22651: LD_INT 11
22653: PUSH
22654: LD_INT 12
22656: PUSH
22657: LD_INT 15
22659: PUSH
22660: LD_INT 16
22662: PUSH
22663: LD_INT 20
22665: PUSH
22666: LD_INT 21
22668: PUSH
22669: LD_INT 22
22671: PUSH
22672: LD_INT 23
22674: PUSH
22675: LD_INT 25
22677: PUSH
22678: LD_INT 26
22680: PUSH
22681: LD_INT 28
22683: PUSH
22684: LD_INT 30
22686: PUSH
22687: LD_INT 31
22689: PUSH
22690: LD_INT 32
22692: PUSH
22693: LD_INT 36
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 101
22721: PUSH
22722: LD_INT 102
22724: PUSH
22725: LD_INT 103
22727: PUSH
22728: LD_INT 105
22730: PUSH
22731: LD_INT 106
22733: PUSH
22734: LD_INT 108
22736: PUSH
22737: LD_INT 109
22739: PUSH
22740: LD_INT 112
22742: PUSH
22743: LD_INT 114
22745: PUSH
22746: LD_INT 116
22748: PUSH
22749: LD_INT 117
22751: PUSH
22752: LD_INT 118
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: ST_TO_ADDR
22773: GO 24872
22775: LD_INT 10
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22979
22783: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: LD_INT 4
22794: PUSH
22795: LD_INT 5
22797: PUSH
22798: LD_INT 6
22800: PUSH
22801: LD_INT 7
22803: PUSH
22804: LD_INT 8
22806: PUSH
22807: LD_INT 9
22809: PUSH
22810: LD_INT 10
22812: PUSH
22813: LD_INT 11
22815: PUSH
22816: LD_INT 12
22818: PUSH
22819: LD_INT 13
22821: PUSH
22822: LD_INT 14
22824: PUSH
22825: LD_INT 15
22827: PUSH
22828: LD_INT 16
22830: PUSH
22831: LD_INT 17
22833: PUSH
22834: LD_INT 18
22836: PUSH
22837: LD_INT 19
22839: PUSH
22840: LD_INT 20
22842: PUSH
22843: LD_INT 21
22845: PUSH
22846: LD_INT 22
22848: PUSH
22849: LD_INT 23
22851: PUSH
22852: LD_INT 24
22854: PUSH
22855: LD_INT 25
22857: PUSH
22858: LD_INT 26
22860: PUSH
22861: LD_INT 28
22863: PUSH
22864: LD_INT 30
22866: PUSH
22867: LD_INT 31
22869: PUSH
22870: LD_INT 32
22872: PUSH
22873: LD_INT 36
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 101
22909: PUSH
22910: LD_INT 102
22912: PUSH
22913: LD_INT 103
22915: PUSH
22916: LD_INT 104
22918: PUSH
22919: LD_INT 105
22921: PUSH
22922: LD_INT 106
22924: PUSH
22925: LD_INT 107
22927: PUSH
22928: LD_INT 108
22930: PUSH
22931: LD_INT 109
22933: PUSH
22934: LD_INT 110
22936: PUSH
22937: LD_INT 111
22939: PUSH
22940: LD_INT 112
22942: PUSH
22943: LD_INT 114
22945: PUSH
22946: LD_INT 116
22948: PUSH
22949: LD_INT 117
22951: PUSH
22952: LD_INT 118
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: ST_TO_ADDR
22977: GO 24872
22979: LD_INT 11
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 23191
22987: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22988: LD_ADDR_VAR 0 2
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: LD_INT 3
22998: PUSH
22999: LD_INT 4
23001: PUSH
23002: LD_INT 5
23004: PUSH
23005: LD_INT 6
23007: PUSH
23008: LD_INT 7
23010: PUSH
23011: LD_INT 8
23013: PUSH
23014: LD_INT 9
23016: PUSH
23017: LD_INT 10
23019: PUSH
23020: LD_INT 11
23022: PUSH
23023: LD_INT 12
23025: PUSH
23026: LD_INT 13
23028: PUSH
23029: LD_INT 14
23031: PUSH
23032: LD_INT 15
23034: PUSH
23035: LD_INT 16
23037: PUSH
23038: LD_INT 17
23040: PUSH
23041: LD_INT 18
23043: PUSH
23044: LD_INT 19
23046: PUSH
23047: LD_INT 20
23049: PUSH
23050: LD_INT 21
23052: PUSH
23053: LD_INT 22
23055: PUSH
23056: LD_INT 23
23058: PUSH
23059: LD_INT 24
23061: PUSH
23062: LD_INT 25
23064: PUSH
23065: LD_INT 26
23067: PUSH
23068: LD_INT 28
23070: PUSH
23071: LD_INT 30
23073: PUSH
23074: LD_INT 31
23076: PUSH
23077: LD_INT 32
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: LD_INT 36
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 101
23121: PUSH
23122: LD_INT 102
23124: PUSH
23125: LD_INT 103
23127: PUSH
23128: LD_INT 104
23130: PUSH
23131: LD_INT 105
23133: PUSH
23134: LD_INT 106
23136: PUSH
23137: LD_INT 107
23139: PUSH
23140: LD_INT 108
23142: PUSH
23143: LD_INT 109
23145: PUSH
23146: LD_INT 110
23148: PUSH
23149: LD_INT 111
23151: PUSH
23152: LD_INT 112
23154: PUSH
23155: LD_INT 114
23157: PUSH
23158: LD_INT 116
23160: PUSH
23161: LD_INT 117
23163: PUSH
23164: LD_INT 118
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: ST_TO_ADDR
23189: GO 24872
23191: LD_INT 12
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23419
23199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23200: LD_ADDR_VAR 0 2
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: LD_INT 4
23216: PUSH
23217: LD_INT 5
23219: PUSH
23220: LD_INT 6
23222: PUSH
23223: LD_INT 7
23225: PUSH
23226: LD_INT 8
23228: PUSH
23229: LD_INT 9
23231: PUSH
23232: LD_INT 10
23234: PUSH
23235: LD_INT 11
23237: PUSH
23238: LD_INT 12
23240: PUSH
23241: LD_INT 13
23243: PUSH
23244: LD_INT 14
23246: PUSH
23247: LD_INT 15
23249: PUSH
23250: LD_INT 16
23252: PUSH
23253: LD_INT 17
23255: PUSH
23256: LD_INT 18
23258: PUSH
23259: LD_INT 19
23261: PUSH
23262: LD_INT 20
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 22
23270: PUSH
23271: LD_INT 23
23273: PUSH
23274: LD_INT 24
23276: PUSH
23277: LD_INT 25
23279: PUSH
23280: LD_INT 26
23282: PUSH
23283: LD_INT 27
23285: PUSH
23286: LD_INT 28
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: LD_INT 31
23294: PUSH
23295: LD_INT 32
23297: PUSH
23298: LD_INT 33
23300: PUSH
23301: LD_INT 34
23303: PUSH
23304: LD_INT 36
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 101
23345: PUSH
23346: LD_INT 102
23348: PUSH
23349: LD_INT 103
23351: PUSH
23352: LD_INT 104
23354: PUSH
23355: LD_INT 105
23357: PUSH
23358: LD_INT 106
23360: PUSH
23361: LD_INT 107
23363: PUSH
23364: LD_INT 108
23366: PUSH
23367: LD_INT 109
23369: PUSH
23370: LD_INT 110
23372: PUSH
23373: LD_INT 111
23375: PUSH
23376: LD_INT 112
23378: PUSH
23379: LD_INT 113
23381: PUSH
23382: LD_INT 114
23384: PUSH
23385: LD_INT 116
23387: PUSH
23388: LD_INT 117
23390: PUSH
23391: LD_INT 118
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: ST_TO_ADDR
23417: GO 24872
23419: LD_INT 13
23421: DOUBLE
23422: EQUAL
23423: IFTRUE 23427
23425: GO 23635
23427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23428: LD_ADDR_VAR 0 2
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: LD_INT 3
23441: PUSH
23442: LD_INT 4
23444: PUSH
23445: LD_INT 5
23447: PUSH
23448: LD_INT 8
23450: PUSH
23451: LD_INT 9
23453: PUSH
23454: LD_INT 10
23456: PUSH
23457: LD_INT 11
23459: PUSH
23460: LD_INT 12
23462: PUSH
23463: LD_INT 14
23465: PUSH
23466: LD_INT 15
23468: PUSH
23469: LD_INT 16
23471: PUSH
23472: LD_INT 17
23474: PUSH
23475: LD_INT 18
23477: PUSH
23478: LD_INT 19
23480: PUSH
23481: LD_INT 20
23483: PUSH
23484: LD_INT 21
23486: PUSH
23487: LD_INT 22
23489: PUSH
23490: LD_INT 23
23492: PUSH
23493: LD_INT 24
23495: PUSH
23496: LD_INT 25
23498: PUSH
23499: LD_INT 26
23501: PUSH
23502: LD_INT 27
23504: PUSH
23505: LD_INT 28
23507: PUSH
23508: LD_INT 30
23510: PUSH
23511: LD_INT 31
23513: PUSH
23514: LD_INT 32
23516: PUSH
23517: LD_INT 33
23519: PUSH
23520: LD_INT 34
23522: PUSH
23523: LD_INT 36
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 101
23561: PUSH
23562: LD_INT 102
23564: PUSH
23565: LD_INT 103
23567: PUSH
23568: LD_INT 104
23570: PUSH
23571: LD_INT 105
23573: PUSH
23574: LD_INT 106
23576: PUSH
23577: LD_INT 107
23579: PUSH
23580: LD_INT 108
23582: PUSH
23583: LD_INT 109
23585: PUSH
23586: LD_INT 110
23588: PUSH
23589: LD_INT 111
23591: PUSH
23592: LD_INT 112
23594: PUSH
23595: LD_INT 113
23597: PUSH
23598: LD_INT 114
23600: PUSH
23601: LD_INT 116
23603: PUSH
23604: LD_INT 117
23606: PUSH
23607: LD_INT 118
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: ST_TO_ADDR
23633: GO 24872
23635: LD_INT 14
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23867
23643: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23644: LD_ADDR_VAR 0 2
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: LD_INT 2
23654: PUSH
23655: LD_INT 3
23657: PUSH
23658: LD_INT 4
23660: PUSH
23661: LD_INT 5
23663: PUSH
23664: LD_INT 6
23666: PUSH
23667: LD_INT 7
23669: PUSH
23670: LD_INT 8
23672: PUSH
23673: LD_INT 9
23675: PUSH
23676: LD_INT 10
23678: PUSH
23679: LD_INT 11
23681: PUSH
23682: LD_INT 12
23684: PUSH
23685: LD_INT 13
23687: PUSH
23688: LD_INT 14
23690: PUSH
23691: LD_INT 15
23693: PUSH
23694: LD_INT 16
23696: PUSH
23697: LD_INT 17
23699: PUSH
23700: LD_INT 18
23702: PUSH
23703: LD_INT 19
23705: PUSH
23706: LD_INT 20
23708: PUSH
23709: LD_INT 21
23711: PUSH
23712: LD_INT 22
23714: PUSH
23715: LD_INT 23
23717: PUSH
23718: LD_INT 24
23720: PUSH
23721: LD_INT 25
23723: PUSH
23724: LD_INT 26
23726: PUSH
23727: LD_INT 27
23729: PUSH
23730: LD_INT 28
23732: PUSH
23733: LD_INT 29
23735: PUSH
23736: LD_INT 30
23738: PUSH
23739: LD_INT 31
23741: PUSH
23742: LD_INT 32
23744: PUSH
23745: LD_INT 33
23747: PUSH
23748: LD_INT 34
23750: PUSH
23751: LD_INT 36
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 101
23793: PUSH
23794: LD_INT 102
23796: PUSH
23797: LD_INT 103
23799: PUSH
23800: LD_INT 104
23802: PUSH
23803: LD_INT 105
23805: PUSH
23806: LD_INT 106
23808: PUSH
23809: LD_INT 107
23811: PUSH
23812: LD_INT 108
23814: PUSH
23815: LD_INT 109
23817: PUSH
23818: LD_INT 110
23820: PUSH
23821: LD_INT 111
23823: PUSH
23824: LD_INT 112
23826: PUSH
23827: LD_INT 113
23829: PUSH
23830: LD_INT 114
23832: PUSH
23833: LD_INT 116
23835: PUSH
23836: LD_INT 117
23838: PUSH
23839: LD_INT 118
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: ST_TO_ADDR
23865: GO 24872
23867: LD_INT 15
23869: DOUBLE
23870: EQUAL
23871: IFTRUE 23875
23873: GO 24099
23875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23876: LD_ADDR_VAR 0 2
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 3
23889: PUSH
23890: LD_INT 4
23892: PUSH
23893: LD_INT 5
23895: PUSH
23896: LD_INT 6
23898: PUSH
23899: LD_INT 7
23901: PUSH
23902: LD_INT 8
23904: PUSH
23905: LD_INT 9
23907: PUSH
23908: LD_INT 10
23910: PUSH
23911: LD_INT 11
23913: PUSH
23914: LD_INT 12
23916: PUSH
23917: LD_INT 13
23919: PUSH
23920: LD_INT 14
23922: PUSH
23923: LD_INT 15
23925: PUSH
23926: LD_INT 16
23928: PUSH
23929: LD_INT 17
23931: PUSH
23932: LD_INT 18
23934: PUSH
23935: LD_INT 19
23937: PUSH
23938: LD_INT 20
23940: PUSH
23941: LD_INT 21
23943: PUSH
23944: LD_INT 22
23946: PUSH
23947: LD_INT 23
23949: PUSH
23950: LD_INT 24
23952: PUSH
23953: LD_INT 25
23955: PUSH
23956: LD_INT 26
23958: PUSH
23959: LD_INT 27
23961: PUSH
23962: LD_INT 28
23964: PUSH
23965: LD_INT 29
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: LD_INT 32
23976: PUSH
23977: LD_INT 33
23979: PUSH
23980: LD_INT 34
23982: PUSH
23983: LD_INT 36
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 101
24025: PUSH
24026: LD_INT 102
24028: PUSH
24029: LD_INT 103
24031: PUSH
24032: LD_INT 104
24034: PUSH
24035: LD_INT 105
24037: PUSH
24038: LD_INT 106
24040: PUSH
24041: LD_INT 107
24043: PUSH
24044: LD_INT 108
24046: PUSH
24047: LD_INT 109
24049: PUSH
24050: LD_INT 110
24052: PUSH
24053: LD_INT 111
24055: PUSH
24056: LD_INT 112
24058: PUSH
24059: LD_INT 113
24061: PUSH
24062: LD_INT 114
24064: PUSH
24065: LD_INT 116
24067: PUSH
24068: LD_INT 117
24070: PUSH
24071: LD_INT 118
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: ST_TO_ADDR
24097: GO 24872
24099: LD_INT 16
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24243
24107: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 4
24118: PUSH
24119: LD_INT 5
24121: PUSH
24122: LD_INT 7
24124: PUSH
24125: LD_INT 11
24127: PUSH
24128: LD_INT 12
24130: PUSH
24131: LD_INT 15
24133: PUSH
24134: LD_INT 16
24136: PUSH
24137: LD_INT 20
24139: PUSH
24140: LD_INT 21
24142: PUSH
24143: LD_INT 22
24145: PUSH
24146: LD_INT 23
24148: PUSH
24149: LD_INT 25
24151: PUSH
24152: LD_INT 26
24154: PUSH
24155: LD_INT 30
24157: PUSH
24158: LD_INT 31
24160: PUSH
24161: LD_INT 32
24163: PUSH
24164: LD_INT 33
24166: PUSH
24167: LD_INT 34
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 101
24193: PUSH
24194: LD_INT 102
24196: PUSH
24197: LD_INT 103
24199: PUSH
24200: LD_INT 106
24202: PUSH
24203: LD_INT 108
24205: PUSH
24206: LD_INT 112
24208: PUSH
24209: LD_INT 113
24211: PUSH
24212: LD_INT 114
24214: PUSH
24215: LD_INT 116
24217: PUSH
24218: LD_INT 117
24220: PUSH
24221: LD_INT 118
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: ST_TO_ADDR
24241: GO 24872
24243: LD_INT 17
24245: DOUBLE
24246: EQUAL
24247: IFTRUE 24251
24249: GO 24475
24251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: LD_INT 6
24274: PUSH
24275: LD_INT 7
24277: PUSH
24278: LD_INT 8
24280: PUSH
24281: LD_INT 9
24283: PUSH
24284: LD_INT 10
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 12
24292: PUSH
24293: LD_INT 13
24295: PUSH
24296: LD_INT 14
24298: PUSH
24299: LD_INT 15
24301: PUSH
24302: LD_INT 16
24304: PUSH
24305: LD_INT 17
24307: PUSH
24308: LD_INT 18
24310: PUSH
24311: LD_INT 19
24313: PUSH
24314: LD_INT 20
24316: PUSH
24317: LD_INT 21
24319: PUSH
24320: LD_INT 22
24322: PUSH
24323: LD_INT 23
24325: PUSH
24326: LD_INT 24
24328: PUSH
24329: LD_INT 25
24331: PUSH
24332: LD_INT 26
24334: PUSH
24335: LD_INT 27
24337: PUSH
24338: LD_INT 28
24340: PUSH
24341: LD_INT 29
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 31
24349: PUSH
24350: LD_INT 32
24352: PUSH
24353: LD_INT 33
24355: PUSH
24356: LD_INT 34
24358: PUSH
24359: LD_INT 36
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 101
24401: PUSH
24402: LD_INT 102
24404: PUSH
24405: LD_INT 103
24407: PUSH
24408: LD_INT 104
24410: PUSH
24411: LD_INT 105
24413: PUSH
24414: LD_INT 106
24416: PUSH
24417: LD_INT 107
24419: PUSH
24420: LD_INT 108
24422: PUSH
24423: LD_INT 109
24425: PUSH
24426: LD_INT 110
24428: PUSH
24429: LD_INT 111
24431: PUSH
24432: LD_INT 112
24434: PUSH
24435: LD_INT 113
24437: PUSH
24438: LD_INT 114
24440: PUSH
24441: LD_INT 116
24443: PUSH
24444: LD_INT 117
24446: PUSH
24447: LD_INT 118
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 24872
24475: LD_INT 18
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24631
24483: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24484: LD_ADDR_VAR 0 2
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 4
24494: PUSH
24495: LD_INT 5
24497: PUSH
24498: LD_INT 7
24500: PUSH
24501: LD_INT 11
24503: PUSH
24504: LD_INT 12
24506: PUSH
24507: LD_INT 15
24509: PUSH
24510: LD_INT 16
24512: PUSH
24513: LD_INT 20
24515: PUSH
24516: LD_INT 21
24518: PUSH
24519: LD_INT 22
24521: PUSH
24522: LD_INT 23
24524: PUSH
24525: LD_INT 25
24527: PUSH
24528: LD_INT 26
24530: PUSH
24531: LD_INT 30
24533: PUSH
24534: LD_INT 31
24536: PUSH
24537: LD_INT 32
24539: PUSH
24540: LD_INT 33
24542: PUSH
24543: LD_INT 34
24545: PUSH
24546: LD_INT 35
24548: PUSH
24549: LD_INT 36
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 101
24577: PUSH
24578: LD_INT 102
24580: PUSH
24581: LD_INT 103
24583: PUSH
24584: LD_INT 106
24586: PUSH
24587: LD_INT 108
24589: PUSH
24590: LD_INT 112
24592: PUSH
24593: LD_INT 113
24595: PUSH
24596: LD_INT 114
24598: PUSH
24599: LD_INT 115
24601: PUSH
24602: LD_INT 116
24604: PUSH
24605: LD_INT 117
24607: PUSH
24608: LD_INT 118
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: ST_TO_ADDR
24629: GO 24872
24631: LD_INT 19
24633: DOUBLE
24634: EQUAL
24635: IFTRUE 24639
24637: GO 24871
24639: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24640: LD_ADDR_VAR 0 2
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: LD_INT 4
24656: PUSH
24657: LD_INT 5
24659: PUSH
24660: LD_INT 6
24662: PUSH
24663: LD_INT 7
24665: PUSH
24666: LD_INT 8
24668: PUSH
24669: LD_INT 9
24671: PUSH
24672: LD_INT 10
24674: PUSH
24675: LD_INT 11
24677: PUSH
24678: LD_INT 12
24680: PUSH
24681: LD_INT 13
24683: PUSH
24684: LD_INT 14
24686: PUSH
24687: LD_INT 15
24689: PUSH
24690: LD_INT 16
24692: PUSH
24693: LD_INT 17
24695: PUSH
24696: LD_INT 18
24698: PUSH
24699: LD_INT 19
24701: PUSH
24702: LD_INT 20
24704: PUSH
24705: LD_INT 21
24707: PUSH
24708: LD_INT 22
24710: PUSH
24711: LD_INT 23
24713: PUSH
24714: LD_INT 24
24716: PUSH
24717: LD_INT 25
24719: PUSH
24720: LD_INT 26
24722: PUSH
24723: LD_INT 27
24725: PUSH
24726: LD_INT 28
24728: PUSH
24729: LD_INT 29
24731: PUSH
24732: LD_INT 30
24734: PUSH
24735: LD_INT 31
24737: PUSH
24738: LD_INT 32
24740: PUSH
24741: LD_INT 33
24743: PUSH
24744: LD_INT 34
24746: PUSH
24747: LD_INT 35
24749: PUSH
24750: LD_INT 36
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 101
24793: PUSH
24794: LD_INT 102
24796: PUSH
24797: LD_INT 103
24799: PUSH
24800: LD_INT 104
24802: PUSH
24803: LD_INT 105
24805: PUSH
24806: LD_INT 106
24808: PUSH
24809: LD_INT 107
24811: PUSH
24812: LD_INT 108
24814: PUSH
24815: LD_INT 109
24817: PUSH
24818: LD_INT 110
24820: PUSH
24821: LD_INT 111
24823: PUSH
24824: LD_INT 112
24826: PUSH
24827: LD_INT 113
24829: PUSH
24830: LD_INT 114
24832: PUSH
24833: LD_INT 115
24835: PUSH
24836: LD_INT 116
24838: PUSH
24839: LD_INT 117
24841: PUSH
24842: LD_INT 118
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: ST_TO_ADDR
24869: GO 24872
24871: POP
// end else
24872: GO 25103
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24874: LD_ADDR_VAR 0 2
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: LD_INT 3
24887: PUSH
24888: LD_INT 4
24890: PUSH
24891: LD_INT 5
24893: PUSH
24894: LD_INT 6
24896: PUSH
24897: LD_INT 7
24899: PUSH
24900: LD_INT 8
24902: PUSH
24903: LD_INT 9
24905: PUSH
24906: LD_INT 10
24908: PUSH
24909: LD_INT 11
24911: PUSH
24912: LD_INT 12
24914: PUSH
24915: LD_INT 13
24917: PUSH
24918: LD_INT 14
24920: PUSH
24921: LD_INT 15
24923: PUSH
24924: LD_INT 16
24926: PUSH
24927: LD_INT 17
24929: PUSH
24930: LD_INT 18
24932: PUSH
24933: LD_INT 19
24935: PUSH
24936: LD_INT 20
24938: PUSH
24939: LD_INT 21
24941: PUSH
24942: LD_INT 22
24944: PUSH
24945: LD_INT 23
24947: PUSH
24948: LD_INT 24
24950: PUSH
24951: LD_INT 25
24953: PUSH
24954: LD_INT 26
24956: PUSH
24957: LD_INT 27
24959: PUSH
24960: LD_INT 28
24962: PUSH
24963: LD_INT 29
24965: PUSH
24966: LD_INT 30
24968: PUSH
24969: LD_INT 31
24971: PUSH
24972: LD_INT 32
24974: PUSH
24975: LD_INT 33
24977: PUSH
24978: LD_INT 34
24980: PUSH
24981: LD_INT 35
24983: PUSH
24984: LD_INT 36
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 101
25027: PUSH
25028: LD_INT 102
25030: PUSH
25031: LD_INT 103
25033: PUSH
25034: LD_INT 104
25036: PUSH
25037: LD_INT 105
25039: PUSH
25040: LD_INT 106
25042: PUSH
25043: LD_INT 107
25045: PUSH
25046: LD_INT 108
25048: PUSH
25049: LD_INT 109
25051: PUSH
25052: LD_INT 110
25054: PUSH
25055: LD_INT 111
25057: PUSH
25058: LD_INT 112
25060: PUSH
25061: LD_INT 113
25063: PUSH
25064: LD_INT 114
25066: PUSH
25067: LD_INT 115
25069: PUSH
25070: LD_INT 116
25072: PUSH
25073: LD_INT 117
25075: PUSH
25076: LD_INT 118
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: ST_TO_ADDR
// if result then
25103: LD_VAR 0 2
25107: IFFALSE 25893
// begin normal :=  ;
25109: LD_ADDR_VAR 0 5
25113: PUSH
25114: LD_STRING 
25116: ST_TO_ADDR
// hardcore :=  ;
25117: LD_ADDR_VAR 0 6
25121: PUSH
25122: LD_STRING 
25124: ST_TO_ADDR
// active :=  ;
25125: LD_ADDR_VAR 0 7
25129: PUSH
25130: LD_STRING 
25132: ST_TO_ADDR
// for i = 1 to normalCounter do
25133: LD_ADDR_VAR 0 8
25137: PUSH
25138: DOUBLE
25139: LD_INT 1
25141: DEC
25142: ST_TO_ADDR
25143: LD_EXP 51
25147: PUSH
25148: FOR_TO
25149: IFFALSE 25250
// begin tmp := 0 ;
25151: LD_ADDR_VAR 0 3
25155: PUSH
25156: LD_STRING 0
25158: ST_TO_ADDR
// if result [ 1 ] then
25159: LD_VAR 0 2
25163: PUSH
25164: LD_INT 1
25166: ARRAY
25167: IFFALSE 25232
// if result [ 1 ] [ 1 ] = i then
25169: LD_VAR 0 2
25173: PUSH
25174: LD_INT 1
25176: ARRAY
25177: PUSH
25178: LD_INT 1
25180: ARRAY
25181: PUSH
25182: LD_VAR 0 8
25186: EQUAL
25187: IFFALSE 25232
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25189: LD_ADDR_VAR 0 2
25193: PUSH
25194: LD_VAR 0 2
25198: PPUSH
25199: LD_INT 1
25201: PPUSH
25202: LD_VAR 0 2
25206: PUSH
25207: LD_INT 1
25209: ARRAY
25210: PPUSH
25211: LD_INT 1
25213: PPUSH
25214: CALL_OW 3
25218: PPUSH
25219: CALL_OW 1
25223: ST_TO_ADDR
// tmp := 1 ;
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_STRING 1
25231: ST_TO_ADDR
// end ; normal := normal & tmp ;
25232: LD_ADDR_VAR 0 5
25236: PUSH
25237: LD_VAR 0 5
25241: PUSH
25242: LD_VAR 0 3
25246: STR
25247: ST_TO_ADDR
// end ;
25248: GO 25148
25250: POP
25251: POP
// for i = 1 to hardcoreCounter do
25252: LD_ADDR_VAR 0 8
25256: PUSH
25257: DOUBLE
25258: LD_INT 1
25260: DEC
25261: ST_TO_ADDR
25262: LD_EXP 52
25266: PUSH
25267: FOR_TO
25268: IFFALSE 25373
// begin tmp := 0 ;
25270: LD_ADDR_VAR 0 3
25274: PUSH
25275: LD_STRING 0
25277: ST_TO_ADDR
// if result [ 2 ] then
25278: LD_VAR 0 2
25282: PUSH
25283: LD_INT 2
25285: ARRAY
25286: IFFALSE 25355
// if result [ 2 ] [ 1 ] = 100 + i then
25288: LD_VAR 0 2
25292: PUSH
25293: LD_INT 2
25295: ARRAY
25296: PUSH
25297: LD_INT 1
25299: ARRAY
25300: PUSH
25301: LD_INT 100
25303: PUSH
25304: LD_VAR 0 8
25308: PLUS
25309: EQUAL
25310: IFFALSE 25355
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25312: LD_ADDR_VAR 0 2
25316: PUSH
25317: LD_VAR 0 2
25321: PPUSH
25322: LD_INT 2
25324: PPUSH
25325: LD_VAR 0 2
25329: PUSH
25330: LD_INT 2
25332: ARRAY
25333: PPUSH
25334: LD_INT 1
25336: PPUSH
25337: CALL_OW 3
25341: PPUSH
25342: CALL_OW 1
25346: ST_TO_ADDR
// tmp := 1 ;
25347: LD_ADDR_VAR 0 3
25351: PUSH
25352: LD_STRING 1
25354: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25355: LD_ADDR_VAR 0 6
25359: PUSH
25360: LD_VAR 0 6
25364: PUSH
25365: LD_VAR 0 3
25369: STR
25370: ST_TO_ADDR
// end ;
25371: GO 25267
25373: POP
25374: POP
// if isGameLoad then
25375: LD_VAR 0 1
25379: IFFALSE 25854
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25381: LD_ADDR_VAR 0 4
25385: PUSH
25386: LD_EXP 55
25390: PUSH
25391: LD_EXP 54
25395: PUSH
25396: LD_EXP 56
25400: PUSH
25401: LD_EXP 53
25405: PUSH
25406: LD_EXP 57
25410: PUSH
25411: LD_EXP 58
25415: PUSH
25416: LD_EXP 59
25420: PUSH
25421: LD_EXP 60
25425: PUSH
25426: LD_EXP 61
25430: PUSH
25431: LD_EXP 62
25435: PUSH
25436: LD_EXP 63
25440: PUSH
25441: LD_EXP 64
25445: PUSH
25446: LD_EXP 65
25450: PUSH
25451: LD_EXP 66
25455: PUSH
25456: LD_EXP 74
25460: PUSH
25461: LD_EXP 75
25465: PUSH
25466: LD_EXP 76
25470: PUSH
25471: LD_EXP 77
25475: PUSH
25476: LD_EXP 79
25480: PUSH
25481: LD_EXP 80
25485: PUSH
25486: LD_EXP 81
25490: PUSH
25491: LD_EXP 84
25495: PUSH
25496: LD_EXP 86
25500: PUSH
25501: LD_EXP 87
25505: PUSH
25506: LD_EXP 88
25510: PUSH
25511: LD_EXP 90
25515: PUSH
25516: LD_EXP 91
25520: PUSH
25521: LD_EXP 94
25525: PUSH
25526: LD_EXP 95
25530: PUSH
25531: LD_EXP 96
25535: PUSH
25536: LD_EXP 97
25540: PUSH
25541: LD_EXP 98
25545: PUSH
25546: LD_EXP 99
25550: PUSH
25551: LD_EXP 100
25555: PUSH
25556: LD_EXP 101
25560: PUSH
25561: LD_EXP 102
25565: PUSH
25566: LD_EXP 67
25570: PUSH
25571: LD_EXP 68
25575: PUSH
25576: LD_EXP 71
25580: PUSH
25581: LD_EXP 72
25585: PUSH
25586: LD_EXP 73
25590: PUSH
25591: LD_EXP 69
25595: PUSH
25596: LD_EXP 70
25600: PUSH
25601: LD_EXP 78
25605: PUSH
25606: LD_EXP 82
25610: PUSH
25611: LD_EXP 83
25615: PUSH
25616: LD_EXP 85
25620: PUSH
25621: LD_EXP 89
25625: PUSH
25626: LD_EXP 92
25630: PUSH
25631: LD_EXP 93
25635: PUSH
25636: LD_EXP 103
25640: PUSH
25641: LD_EXP 104
25645: PUSH
25646: LD_EXP 105
25650: PUSH
25651: LD_EXP 106
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: ST_TO_ADDR
// tmp :=  ;
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_STRING 
25719: ST_TO_ADDR
// for i = 1 to normalCounter do
25720: LD_ADDR_VAR 0 8
25724: PUSH
25725: DOUBLE
25726: LD_INT 1
25728: DEC
25729: ST_TO_ADDR
25730: LD_EXP 51
25734: PUSH
25735: FOR_TO
25736: IFFALSE 25772
// begin if flags [ i ] then
25738: LD_VAR 0 4
25742: PUSH
25743: LD_VAR 0 8
25747: ARRAY
25748: IFFALSE 25770
// tmp := tmp & i & ; ;
25750: LD_ADDR_VAR 0 3
25754: PUSH
25755: LD_VAR 0 3
25759: PUSH
25760: LD_VAR 0 8
25764: STR
25765: PUSH
25766: LD_STRING ;
25768: STR
25769: ST_TO_ADDR
// end ;
25770: GO 25735
25772: POP
25773: POP
// for i = 1 to hardcoreCounter do
25774: LD_ADDR_VAR 0 8
25778: PUSH
25779: DOUBLE
25780: LD_INT 1
25782: DEC
25783: ST_TO_ADDR
25784: LD_EXP 52
25788: PUSH
25789: FOR_TO
25790: IFFALSE 25836
// begin if flags [ normalCounter + i ] then
25792: LD_VAR 0 4
25796: PUSH
25797: LD_EXP 51
25801: PUSH
25802: LD_VAR 0 8
25806: PLUS
25807: ARRAY
25808: IFFALSE 25834
// tmp := tmp & ( 100 + i ) & ; ;
25810: LD_ADDR_VAR 0 3
25814: PUSH
25815: LD_VAR 0 3
25819: PUSH
25820: LD_INT 100
25822: PUSH
25823: LD_VAR 0 8
25827: PLUS
25828: STR
25829: PUSH
25830: LD_STRING ;
25832: STR
25833: ST_TO_ADDR
// end ;
25834: GO 25789
25836: POP
25837: POP
// if tmp then
25838: LD_VAR 0 3
25842: IFFALSE 25854
// active := tmp ;
25844: LD_ADDR_VAR 0 7
25848: PUSH
25849: LD_VAR 0 3
25853: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25854: LD_STRING getStreamItemsFromMission("
25856: PUSH
25857: LD_VAR 0 5
25861: STR
25862: PUSH
25863: LD_STRING ","
25865: STR
25866: PUSH
25867: LD_VAR 0 6
25871: STR
25872: PUSH
25873: LD_STRING ","
25875: STR
25876: PUSH
25877: LD_VAR 0 7
25881: STR
25882: PUSH
25883: LD_STRING ")
25885: STR
25886: PPUSH
25887: CALL_OW 559
// end else
25891: GO 25900
// ToLua ( getStreamItemsFromMission("","","") ) ;
25893: LD_STRING getStreamItemsFromMission("","","")
25895: PPUSH
25896: CALL_OW 559
// end ;
25900: LD_VAR 0 2
25904: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25905: LD_EXP 50
25909: PUSH
25910: LD_EXP 55
25914: AND
25915: IFFALSE 26039
25917: GO 25919
25919: DISABLE
25920: LD_INT 0
25922: PPUSH
25923: PPUSH
// begin enable ;
25924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25925: LD_ADDR_VAR 0 2
25929: PUSH
25930: LD_INT 22
25932: PUSH
25933: LD_OWVAR 2
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: LD_INT 34
25947: PUSH
25948: LD_INT 7
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 34
25957: PUSH
25958: LD_INT 45
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 34
25967: PUSH
25968: LD_INT 28
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 34
25977: PUSH
25978: LD_INT 47
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PPUSH
25996: CALL_OW 69
26000: ST_TO_ADDR
// if not tmp then
26001: LD_VAR 0 2
26005: NOT
26006: IFFALSE 26010
// exit ;
26008: GO 26039
// for i in tmp do
26010: LD_ADDR_VAR 0 1
26014: PUSH
26015: LD_VAR 0 2
26019: PUSH
26020: FOR_IN
26021: IFFALSE 26037
// begin SetLives ( i , 0 ) ;
26023: LD_VAR 0 1
26027: PPUSH
26028: LD_INT 0
26030: PPUSH
26031: CALL_OW 234
// end ;
26035: GO 26020
26037: POP
26038: POP
// end ;
26039: PPOPN 2
26041: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26042: LD_EXP 50
26046: PUSH
26047: LD_EXP 56
26051: AND
26052: IFFALSE 26136
26054: GO 26056
26056: DISABLE
26057: LD_INT 0
26059: PPUSH
26060: PPUSH
// begin enable ;
26061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26062: LD_ADDR_VAR 0 2
26066: PUSH
26067: LD_INT 22
26069: PUSH
26070: LD_OWVAR 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 32
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PPUSH
26093: CALL_OW 69
26097: ST_TO_ADDR
// if not tmp then
26098: LD_VAR 0 2
26102: NOT
26103: IFFALSE 26107
// exit ;
26105: GO 26136
// for i in tmp do
26107: LD_ADDR_VAR 0 1
26111: PUSH
26112: LD_VAR 0 2
26116: PUSH
26117: FOR_IN
26118: IFFALSE 26134
// begin SetLives ( i , 0 ) ;
26120: LD_VAR 0 1
26124: PPUSH
26125: LD_INT 0
26127: PPUSH
26128: CALL_OW 234
// end ;
26132: GO 26117
26134: POP
26135: POP
// end ;
26136: PPOPN 2
26138: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26139: LD_EXP 50
26143: PUSH
26144: LD_EXP 53
26148: AND
26149: IFFALSE 26242
26151: GO 26153
26153: DISABLE
26154: LD_INT 0
26156: PPUSH
// begin enable ;
26157: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26158: LD_ADDR_VAR 0 1
26162: PUSH
26163: LD_INT 22
26165: PUSH
26166: LD_OWVAR 2
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 25
26180: PUSH
26181: LD_INT 5
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 25
26190: PUSH
26191: LD_INT 9
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 25
26200: PUSH
26201: LD_INT 8
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PPUSH
26218: CALL_OW 69
26222: PUSH
26223: FOR_IN
26224: IFFALSE 26240
// begin SetClass ( i , 1 ) ;
26226: LD_VAR 0 1
26230: PPUSH
26231: LD_INT 1
26233: PPUSH
26234: CALL_OW 336
// end ;
26238: GO 26223
26240: POP
26241: POP
// end ;
26242: PPOPN 1
26244: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26245: LD_EXP 50
26249: PUSH
26250: LD_EXP 54
26254: AND
26255: PUSH
26256: LD_OWVAR 65
26260: PUSH
26261: LD_INT 7
26263: LESS
26264: AND
26265: IFFALSE 26279
26267: GO 26269
26269: DISABLE
// begin enable ;
26270: ENABLE
// game_speed := 7 ;
26271: LD_ADDR_OWVAR 65
26275: PUSH
26276: LD_INT 7
26278: ST_TO_ADDR
// end ;
26279: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26280: LD_EXP 50
26284: PUSH
26285: LD_EXP 57
26289: AND
26290: IFFALSE 26492
26292: GO 26294
26294: DISABLE
26295: LD_INT 0
26297: PPUSH
26298: PPUSH
26299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26300: LD_ADDR_VAR 0 3
26304: PUSH
26305: LD_INT 81
26307: PUSH
26308: LD_OWVAR 2
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 21
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PPUSH
26331: CALL_OW 69
26335: ST_TO_ADDR
// if not tmp then
26336: LD_VAR 0 3
26340: NOT
26341: IFFALSE 26345
// exit ;
26343: GO 26492
// if tmp > 5 then
26345: LD_VAR 0 3
26349: PUSH
26350: LD_INT 5
26352: GREATER
26353: IFFALSE 26365
// k := 5 else
26355: LD_ADDR_VAR 0 2
26359: PUSH
26360: LD_INT 5
26362: ST_TO_ADDR
26363: GO 26375
// k := tmp ;
26365: LD_ADDR_VAR 0 2
26369: PUSH
26370: LD_VAR 0 3
26374: ST_TO_ADDR
// for i := 1 to k do
26375: LD_ADDR_VAR 0 1
26379: PUSH
26380: DOUBLE
26381: LD_INT 1
26383: DEC
26384: ST_TO_ADDR
26385: LD_VAR 0 2
26389: PUSH
26390: FOR_TO
26391: IFFALSE 26490
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26393: LD_VAR 0 3
26397: PUSH
26398: LD_VAR 0 1
26402: ARRAY
26403: PPUSH
26404: LD_VAR 0 1
26408: PUSH
26409: LD_INT 4
26411: MOD
26412: PUSH
26413: LD_INT 1
26415: PLUS
26416: PPUSH
26417: CALL_OW 259
26421: PUSH
26422: LD_INT 10
26424: LESS
26425: IFFALSE 26488
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26427: LD_VAR 0 3
26431: PUSH
26432: LD_VAR 0 1
26436: ARRAY
26437: PPUSH
26438: LD_VAR 0 1
26442: PUSH
26443: LD_INT 4
26445: MOD
26446: PUSH
26447: LD_INT 1
26449: PLUS
26450: PPUSH
26451: LD_VAR 0 3
26455: PUSH
26456: LD_VAR 0 1
26460: ARRAY
26461: PPUSH
26462: LD_VAR 0 1
26466: PUSH
26467: LD_INT 4
26469: MOD
26470: PUSH
26471: LD_INT 1
26473: PLUS
26474: PPUSH
26475: CALL_OW 259
26479: PUSH
26480: LD_INT 1
26482: PLUS
26483: PPUSH
26484: CALL_OW 237
26488: GO 26390
26490: POP
26491: POP
// end ;
26492: PPOPN 3
26494: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26495: LD_EXP 50
26499: PUSH
26500: LD_EXP 58
26504: AND
26505: IFFALSE 26525
26507: GO 26509
26509: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26510: LD_INT 4
26512: PPUSH
26513: LD_OWVAR 2
26517: PPUSH
26518: LD_INT 0
26520: PPUSH
26521: CALL_OW 324
26525: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26526: LD_EXP 50
26530: PUSH
26531: LD_EXP 87
26535: AND
26536: IFFALSE 26556
26538: GO 26540
26540: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26541: LD_INT 19
26543: PPUSH
26544: LD_OWVAR 2
26548: PPUSH
26549: LD_INT 0
26551: PPUSH
26552: CALL_OW 324
26556: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26557: LD_EXP 50
26561: PUSH
26562: LD_EXP 59
26566: AND
26567: IFFALSE 26669
26569: GO 26571
26571: DISABLE
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
// begin enable ;
26576: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26577: LD_ADDR_VAR 0 2
26581: PUSH
26582: LD_INT 22
26584: PUSH
26585: LD_OWVAR 2
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 34
26599: PUSH
26600: LD_INT 11
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 34
26609: PUSH
26610: LD_INT 30
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 69
26630: ST_TO_ADDR
// if not tmp then
26631: LD_VAR 0 2
26635: NOT
26636: IFFALSE 26640
// exit ;
26638: GO 26669
// for i in tmp do
26640: LD_ADDR_VAR 0 1
26644: PUSH
26645: LD_VAR 0 2
26649: PUSH
26650: FOR_IN
26651: IFFALSE 26667
// begin SetLives ( i , 0 ) ;
26653: LD_VAR 0 1
26657: PPUSH
26658: LD_INT 0
26660: PPUSH
26661: CALL_OW 234
// end ;
26665: GO 26650
26667: POP
26668: POP
// end ;
26669: PPOPN 2
26671: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26672: LD_EXP 50
26676: PUSH
26677: LD_EXP 60
26681: AND
26682: IFFALSE 26702
26684: GO 26686
26686: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26687: LD_INT 32
26689: PPUSH
26690: LD_OWVAR 2
26694: PPUSH
26695: LD_INT 0
26697: PPUSH
26698: CALL_OW 324
26702: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26703: LD_EXP 50
26707: PUSH
26708: LD_EXP 61
26712: AND
26713: IFFALSE 26894
26715: GO 26717
26717: DISABLE
26718: LD_INT 0
26720: PPUSH
26721: PPUSH
26722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26723: LD_ADDR_VAR 0 2
26727: PUSH
26728: LD_INT 22
26730: PUSH
26731: LD_OWVAR 2
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 33
26742: PUSH
26743: LD_INT 3
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PPUSH
26754: CALL_OW 69
26758: ST_TO_ADDR
// if not tmp then
26759: LD_VAR 0 2
26763: NOT
26764: IFFALSE 26768
// exit ;
26766: GO 26894
// side := 0 ;
26768: LD_ADDR_VAR 0 3
26772: PUSH
26773: LD_INT 0
26775: ST_TO_ADDR
// for i := 1 to 8 do
26776: LD_ADDR_VAR 0 1
26780: PUSH
26781: DOUBLE
26782: LD_INT 1
26784: DEC
26785: ST_TO_ADDR
26786: LD_INT 8
26788: PUSH
26789: FOR_TO
26790: IFFALSE 26838
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26792: LD_OWVAR 2
26796: PUSH
26797: LD_VAR 0 1
26801: NONEQUAL
26802: PUSH
26803: LD_OWVAR 2
26807: PPUSH
26808: LD_VAR 0 1
26812: PPUSH
26813: CALL_OW 81
26817: PUSH
26818: LD_INT 2
26820: EQUAL
26821: AND
26822: IFFALSE 26836
// begin side := i ;
26824: LD_ADDR_VAR 0 3
26828: PUSH
26829: LD_VAR 0 1
26833: ST_TO_ADDR
// break ;
26834: GO 26838
// end ;
26836: GO 26789
26838: POP
26839: POP
// if not side then
26840: LD_VAR 0 3
26844: NOT
26845: IFFALSE 26849
// exit ;
26847: GO 26894
// for i := 1 to tmp do
26849: LD_ADDR_VAR 0 1
26853: PUSH
26854: DOUBLE
26855: LD_INT 1
26857: DEC
26858: ST_TO_ADDR
26859: LD_VAR 0 2
26863: PUSH
26864: FOR_TO
26865: IFFALSE 26892
// if Prob ( 60 ) then
26867: LD_INT 60
26869: PPUSH
26870: CALL_OW 13
26874: IFFALSE 26890
// SetSide ( i , side ) ;
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_VAR 0 3
26885: PPUSH
26886: CALL_OW 235
26890: GO 26864
26892: POP
26893: POP
// end ;
26894: PPOPN 3
26896: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26897: LD_EXP 50
26901: PUSH
26902: LD_EXP 63
26906: AND
26907: IFFALSE 27026
26909: GO 26911
26911: DISABLE
26912: LD_INT 0
26914: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26915: LD_ADDR_VAR 0 1
26919: PUSH
26920: LD_INT 22
26922: PUSH
26923: LD_OWVAR 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 21
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 3
26944: PUSH
26945: LD_INT 23
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: PPUSH
26964: CALL_OW 69
26968: PUSH
26969: FOR_IN
26970: IFFALSE 27024
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26972: LD_VAR 0 1
26976: PPUSH
26977: CALL_OW 257
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: LD_INT 3
26990: PUSH
26991: LD_INT 4
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: IN
27000: IFFALSE 27022
// SetClass ( un , rand ( 1 , 4 ) ) ;
27002: LD_VAR 0 1
27006: PPUSH
27007: LD_INT 1
27009: PPUSH
27010: LD_INT 4
27012: PPUSH
27013: CALL_OW 12
27017: PPUSH
27018: CALL_OW 336
27022: GO 26969
27024: POP
27025: POP
// end ;
27026: PPOPN 1
27028: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27029: LD_EXP 50
27033: PUSH
27034: LD_EXP 62
27038: AND
27039: IFFALSE 27118
27041: GO 27043
27043: DISABLE
27044: LD_INT 0
27046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27047: LD_ADDR_VAR 0 1
27051: PUSH
27052: LD_INT 22
27054: PUSH
27055: LD_OWVAR 2
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 21
27066: PUSH
27067: LD_INT 3
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PPUSH
27078: CALL_OW 69
27082: ST_TO_ADDR
// if not tmp then
27083: LD_VAR 0 1
27087: NOT
27088: IFFALSE 27092
// exit ;
27090: GO 27118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27092: LD_VAR 0 1
27096: PUSH
27097: LD_INT 1
27099: PPUSH
27100: LD_VAR 0 1
27104: PPUSH
27105: CALL_OW 12
27109: ARRAY
27110: PPUSH
27111: LD_INT 100
27113: PPUSH
27114: CALL_OW 234
// end ;
27118: PPOPN 1
27120: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27121: LD_EXP 50
27125: PUSH
27126: LD_EXP 64
27130: AND
27131: IFFALSE 27229
27133: GO 27135
27135: DISABLE
27136: LD_INT 0
27138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27139: LD_ADDR_VAR 0 1
27143: PUSH
27144: LD_INT 22
27146: PUSH
27147: LD_OWVAR 2
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 21
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 69
27174: ST_TO_ADDR
// if not tmp then
27175: LD_VAR 0 1
27179: NOT
27180: IFFALSE 27184
// exit ;
27182: GO 27229
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27184: LD_VAR 0 1
27188: PUSH
27189: LD_INT 1
27191: PPUSH
27192: LD_VAR 0 1
27196: PPUSH
27197: CALL_OW 12
27201: ARRAY
27202: PPUSH
27203: LD_INT 1
27205: PPUSH
27206: LD_INT 4
27208: PPUSH
27209: CALL_OW 12
27213: PPUSH
27214: LD_INT 3000
27216: PPUSH
27217: LD_INT 9000
27219: PPUSH
27220: CALL_OW 12
27224: PPUSH
27225: CALL_OW 492
// end ;
27229: PPOPN 1
27231: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27232: LD_EXP 50
27236: PUSH
27237: LD_EXP 65
27241: AND
27242: IFFALSE 27262
27244: GO 27246
27246: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27247: LD_INT 1
27249: PPUSH
27250: LD_OWVAR 2
27254: PPUSH
27255: LD_INT 0
27257: PPUSH
27258: CALL_OW 324
27262: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27263: LD_EXP 50
27267: PUSH
27268: LD_EXP 66
27272: AND
27273: IFFALSE 27356
27275: GO 27277
27277: DISABLE
27278: LD_INT 0
27280: PPUSH
27281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27282: LD_ADDR_VAR 0 2
27286: PUSH
27287: LD_INT 22
27289: PUSH
27290: LD_OWVAR 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 21
27301: PUSH
27302: LD_INT 3
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PPUSH
27313: CALL_OW 69
27317: ST_TO_ADDR
// if not tmp then
27318: LD_VAR 0 2
27322: NOT
27323: IFFALSE 27327
// exit ;
27325: GO 27356
// for i in tmp do
27327: LD_ADDR_VAR 0 1
27331: PUSH
27332: LD_VAR 0 2
27336: PUSH
27337: FOR_IN
27338: IFFALSE 27354
// SetBLevel ( i , 10 ) ;
27340: LD_VAR 0 1
27344: PPUSH
27345: LD_INT 10
27347: PPUSH
27348: CALL_OW 241
27352: GO 27337
27354: POP
27355: POP
// end ;
27356: PPOPN 2
27358: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27359: LD_EXP 50
27363: PUSH
27364: LD_EXP 67
27368: AND
27369: IFFALSE 27480
27371: GO 27373
27373: DISABLE
27374: LD_INT 0
27376: PPUSH
27377: PPUSH
27378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: LD_INT 22
27386: PUSH
27387: LD_OWVAR 2
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 25
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PPUSH
27410: CALL_OW 69
27414: ST_TO_ADDR
// if not tmp then
27415: LD_VAR 0 3
27419: NOT
27420: IFFALSE 27424
// exit ;
27422: GO 27480
// un := tmp [ rand ( 1 , tmp ) ] ;
27424: LD_ADDR_VAR 0 2
27428: PUSH
27429: LD_VAR 0 3
27433: PUSH
27434: LD_INT 1
27436: PPUSH
27437: LD_VAR 0 3
27441: PPUSH
27442: CALL_OW 12
27446: ARRAY
27447: ST_TO_ADDR
// if Crawls ( un ) then
27448: LD_VAR 0 2
27452: PPUSH
27453: CALL_OW 318
27457: IFFALSE 27468
// ComWalk ( un ) ;
27459: LD_VAR 0 2
27463: PPUSH
27464: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27468: LD_VAR 0 2
27472: PPUSH
27473: LD_INT 5
27475: PPUSH
27476: CALL_OW 336
// end ;
27480: PPOPN 3
27482: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27483: LD_EXP 50
27487: PUSH
27488: LD_EXP 68
27492: AND
27493: PUSH
27494: LD_OWVAR 67
27498: PUSH
27499: LD_INT 4
27501: LESS
27502: AND
27503: IFFALSE 27522
27505: GO 27507
27507: DISABLE
// begin Difficulty := Difficulty + 1 ;
27508: LD_ADDR_OWVAR 67
27512: PUSH
27513: LD_OWVAR 67
27517: PUSH
27518: LD_INT 1
27520: PLUS
27521: ST_TO_ADDR
// end ;
27522: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27523: LD_EXP 50
27527: PUSH
27528: LD_EXP 69
27532: AND
27533: IFFALSE 27636
27535: GO 27537
27537: DISABLE
27538: LD_INT 0
27540: PPUSH
// begin for i := 1 to 5 do
27541: LD_ADDR_VAR 0 1
27545: PUSH
27546: DOUBLE
27547: LD_INT 1
27549: DEC
27550: ST_TO_ADDR
27551: LD_INT 5
27553: PUSH
27554: FOR_TO
27555: IFFALSE 27634
// begin uc_nation := nation_nature ;
27557: LD_ADDR_OWVAR 21
27561: PUSH
27562: LD_INT 0
27564: ST_TO_ADDR
// uc_side := 0 ;
27565: LD_ADDR_OWVAR 20
27569: PUSH
27570: LD_INT 0
27572: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27573: LD_ADDR_OWVAR 29
27577: PUSH
27578: LD_INT 12
27580: PUSH
27581: LD_INT 12
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: ST_TO_ADDR
// hc_agressivity := 20 ;
27588: LD_ADDR_OWVAR 35
27592: PUSH
27593: LD_INT 20
27595: ST_TO_ADDR
// hc_class := class_tiger ;
27596: LD_ADDR_OWVAR 28
27600: PUSH
27601: LD_INT 14
27603: ST_TO_ADDR
// hc_gallery :=  ;
27604: LD_ADDR_OWVAR 33
27608: PUSH
27609: LD_STRING 
27611: ST_TO_ADDR
// hc_name :=  ;
27612: LD_ADDR_OWVAR 26
27616: PUSH
27617: LD_STRING 
27619: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27620: CALL_OW 44
27624: PPUSH
27625: LD_INT 0
27627: PPUSH
27628: CALL_OW 51
// end ;
27632: GO 27554
27634: POP
27635: POP
// end ;
27636: PPOPN 1
27638: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27639: LD_EXP 50
27643: PUSH
27644: LD_EXP 70
27648: AND
27649: IFFALSE 27658
27651: GO 27653
27653: DISABLE
// StreamSibBomb ;
27654: CALL 27659 0 0
27658: END
// export function StreamSibBomb ; var i , x , y ; begin
27659: LD_INT 0
27661: PPUSH
27662: PPUSH
27663: PPUSH
27664: PPUSH
// result := false ;
27665: LD_ADDR_VAR 0 1
27669: PUSH
27670: LD_INT 0
27672: ST_TO_ADDR
// for i := 1 to 16 do
27673: LD_ADDR_VAR 0 2
27677: PUSH
27678: DOUBLE
27679: LD_INT 1
27681: DEC
27682: ST_TO_ADDR
27683: LD_INT 16
27685: PUSH
27686: FOR_TO
27687: IFFALSE 27886
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27689: LD_ADDR_VAR 0 3
27693: PUSH
27694: LD_INT 10
27696: PUSH
27697: LD_INT 20
27699: PUSH
27700: LD_INT 30
27702: PUSH
27703: LD_INT 40
27705: PUSH
27706: LD_INT 50
27708: PUSH
27709: LD_INT 60
27711: PUSH
27712: LD_INT 70
27714: PUSH
27715: LD_INT 80
27717: PUSH
27718: LD_INT 90
27720: PUSH
27721: LD_INT 100
27723: PUSH
27724: LD_INT 110
27726: PUSH
27727: LD_INT 120
27729: PUSH
27730: LD_INT 130
27732: PUSH
27733: LD_INT 140
27735: PUSH
27736: LD_INT 150
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PPUSH
27759: LD_INT 15
27761: PPUSH
27762: CALL_OW 12
27766: ARRAY
27767: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27768: LD_ADDR_VAR 0 4
27772: PUSH
27773: LD_INT 10
27775: PUSH
27776: LD_INT 20
27778: PUSH
27779: LD_INT 30
27781: PUSH
27782: LD_INT 40
27784: PUSH
27785: LD_INT 50
27787: PUSH
27788: LD_INT 60
27790: PUSH
27791: LD_INT 70
27793: PUSH
27794: LD_INT 80
27796: PUSH
27797: LD_INT 90
27799: PUSH
27800: LD_INT 100
27802: PUSH
27803: LD_INT 110
27805: PUSH
27806: LD_INT 120
27808: PUSH
27809: LD_INT 130
27811: PUSH
27812: LD_INT 140
27814: PUSH
27815: LD_INT 150
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: PPUSH
27838: LD_INT 15
27840: PPUSH
27841: CALL_OW 12
27845: ARRAY
27846: ST_TO_ADDR
// if ValidHex ( x , y ) then
27847: LD_VAR 0 3
27851: PPUSH
27852: LD_VAR 0 4
27856: PPUSH
27857: CALL_OW 488
27861: IFFALSE 27884
// begin result := [ x , y ] ;
27863: LD_ADDR_VAR 0 1
27867: PUSH
27868: LD_VAR 0 3
27872: PUSH
27873: LD_VAR 0 4
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: ST_TO_ADDR
// break ;
27882: GO 27886
// end ; end ;
27884: GO 27686
27886: POP
27887: POP
// if result then
27888: LD_VAR 0 1
27892: IFFALSE 27952
// begin ToLua ( playSibBomb() ) ;
27894: LD_STRING playSibBomb()
27896: PPUSH
27897: CALL_OW 559
// wait ( 0 0$14 ) ;
27901: LD_INT 490
27903: PPUSH
27904: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27908: LD_VAR 0 1
27912: PUSH
27913: LD_INT 1
27915: ARRAY
27916: PPUSH
27917: LD_VAR 0 1
27921: PUSH
27922: LD_INT 2
27924: ARRAY
27925: PPUSH
27926: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27930: LD_VAR 0 1
27934: PUSH
27935: LD_INT 1
27937: ARRAY
27938: PPUSH
27939: LD_VAR 0 1
27943: PUSH
27944: LD_INT 2
27946: ARRAY
27947: PPUSH
27948: CALL_OW 429
// end ; end ;
27952: LD_VAR 0 1
27956: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27957: LD_EXP 50
27961: PUSH
27962: LD_EXP 72
27966: AND
27967: IFFALSE 27979
27969: GO 27971
27971: DISABLE
// YouLost (  ) ;
27972: LD_STRING 
27974: PPUSH
27975: CALL_OW 104
27979: END
// every 0 0$1 trigger StreamModeActive and sFog do
27980: LD_EXP 50
27984: PUSH
27985: LD_EXP 71
27989: AND
27990: IFFALSE 28004
27992: GO 27994
27994: DISABLE
// FogOff ( your_side ) ;
27995: LD_OWVAR 2
27999: PPUSH
28000: CALL_OW 344
28004: END
// every 0 0$1 trigger StreamModeActive and sSun do
28005: LD_EXP 50
28009: PUSH
28010: LD_EXP 73
28014: AND
28015: IFFALSE 28043
28017: GO 28019
28019: DISABLE
// begin solar_recharge_percent := 0 ;
28020: LD_ADDR_OWVAR 79
28024: PUSH
28025: LD_INT 0
28027: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28028: LD_INT 10500
28030: PPUSH
28031: CALL_OW 67
// solar_recharge_percent := 100 ;
28035: LD_ADDR_OWVAR 79
28039: PUSH
28040: LD_INT 100
28042: ST_TO_ADDR
// end ;
28043: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28044: LD_EXP 50
28048: PUSH
28049: LD_EXP 74
28053: AND
28054: IFFALSE 28293
28056: GO 28058
28058: DISABLE
28059: LD_INT 0
28061: PPUSH
28062: PPUSH
28063: PPUSH
// begin tmp := [ ] ;
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: EMPTY
28070: ST_TO_ADDR
// for i := 1 to 6 do
28071: LD_ADDR_VAR 0 1
28075: PUSH
28076: DOUBLE
28077: LD_INT 1
28079: DEC
28080: ST_TO_ADDR
28081: LD_INT 6
28083: PUSH
28084: FOR_TO
28085: IFFALSE 28190
// begin uc_nation := nation_nature ;
28087: LD_ADDR_OWVAR 21
28091: PUSH
28092: LD_INT 0
28094: ST_TO_ADDR
// uc_side := 0 ;
28095: LD_ADDR_OWVAR 20
28099: PUSH
28100: LD_INT 0
28102: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28103: LD_ADDR_OWVAR 29
28107: PUSH
28108: LD_INT 12
28110: PUSH
28111: LD_INT 12
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: ST_TO_ADDR
// hc_agressivity := 20 ;
28118: LD_ADDR_OWVAR 35
28122: PUSH
28123: LD_INT 20
28125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28126: LD_ADDR_OWVAR 28
28130: PUSH
28131: LD_INT 17
28133: ST_TO_ADDR
// hc_gallery :=  ;
28134: LD_ADDR_OWVAR 33
28138: PUSH
28139: LD_STRING 
28141: ST_TO_ADDR
// hc_name :=  ;
28142: LD_ADDR_OWVAR 26
28146: PUSH
28147: LD_STRING 
28149: ST_TO_ADDR
// un := CreateHuman ;
28150: LD_ADDR_VAR 0 2
28154: PUSH
28155: CALL_OW 44
28159: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28160: LD_VAR 0 2
28164: PPUSH
28165: LD_INT 1
28167: PPUSH
28168: CALL_OW 51
// tmp := tmp ^ un ;
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: LD_VAR 0 3
28181: PUSH
28182: LD_VAR 0 2
28186: ADD
28187: ST_TO_ADDR
// end ;
28188: GO 28084
28190: POP
28191: POP
// repeat wait ( 0 0$1 ) ;
28192: LD_INT 35
28194: PPUSH
28195: CALL_OW 67
// for un in tmp do
28199: LD_ADDR_VAR 0 2
28203: PUSH
28204: LD_VAR 0 3
28208: PUSH
28209: FOR_IN
28210: IFFALSE 28284
// begin if IsDead ( un ) then
28212: LD_VAR 0 2
28216: PPUSH
28217: CALL_OW 301
28221: IFFALSE 28241
// begin tmp := tmp diff un ;
28223: LD_ADDR_VAR 0 3
28227: PUSH
28228: LD_VAR 0 3
28232: PUSH
28233: LD_VAR 0 2
28237: DIFF
28238: ST_TO_ADDR
// continue ;
28239: GO 28209
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28241: LD_VAR 0 2
28245: PPUSH
28246: LD_INT 3
28248: PUSH
28249: LD_INT 22
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PPUSH
28263: CALL_OW 69
28267: PPUSH
28268: LD_VAR 0 2
28272: PPUSH
28273: CALL_OW 74
28277: PPUSH
28278: CALL_OW 115
// end ;
28282: GO 28209
28284: POP
28285: POP
// until not tmp ;
28286: LD_VAR 0 3
28290: NOT
28291: IFFALSE 28192
// end ;
28293: PPOPN 3
28295: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28296: LD_EXP 50
28300: PUSH
28301: LD_EXP 75
28305: AND
28306: IFFALSE 28360
28308: GO 28310
28310: DISABLE
// begin ToLua ( displayTroll(); ) ;
28311: LD_STRING displayTroll();
28313: PPUSH
28314: CALL_OW 559
// wait ( 3 3$00 ) ;
28318: LD_INT 6300
28320: PPUSH
28321: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28325: LD_STRING hideTroll();
28327: PPUSH
28328: CALL_OW 559
// wait ( 1 1$00 ) ;
28332: LD_INT 2100
28334: PPUSH
28335: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28339: LD_STRING displayTroll();
28341: PPUSH
28342: CALL_OW 559
// wait ( 1 1$00 ) ;
28346: LD_INT 2100
28348: PPUSH
28349: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28353: LD_STRING hideTroll();
28355: PPUSH
28356: CALL_OW 559
// end ;
28360: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28361: LD_EXP 50
28365: PUSH
28366: LD_EXP 76
28370: AND
28371: IFFALSE 28434
28373: GO 28375
28375: DISABLE
28376: LD_INT 0
28378: PPUSH
// begin p := 0 ;
28379: LD_ADDR_VAR 0 1
28383: PUSH
28384: LD_INT 0
28386: ST_TO_ADDR
// repeat game_speed := 1 ;
28387: LD_ADDR_OWVAR 65
28391: PUSH
28392: LD_INT 1
28394: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28395: LD_INT 35
28397: PPUSH
28398: CALL_OW 67
// p := p + 1 ;
28402: LD_ADDR_VAR 0 1
28406: PUSH
28407: LD_VAR 0 1
28411: PUSH
28412: LD_INT 1
28414: PLUS
28415: ST_TO_ADDR
// until p >= 60 ;
28416: LD_VAR 0 1
28420: PUSH
28421: LD_INT 60
28423: GREATEREQUAL
28424: IFFALSE 28387
// game_speed := 4 ;
28426: LD_ADDR_OWVAR 65
28430: PUSH
28431: LD_INT 4
28433: ST_TO_ADDR
// end ;
28434: PPOPN 1
28436: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28437: LD_EXP 50
28441: PUSH
28442: LD_EXP 77
28446: AND
28447: IFFALSE 28593
28449: GO 28451
28451: DISABLE
28452: LD_INT 0
28454: PPUSH
28455: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28456: LD_ADDR_VAR 0 1
28460: PUSH
28461: LD_INT 22
28463: PUSH
28464: LD_OWVAR 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: LD_INT 30
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 30
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PPUSH
28505: CALL_OW 69
28509: ST_TO_ADDR
// if not depot then
28510: LD_VAR 0 1
28514: NOT
28515: IFFALSE 28519
// exit ;
28517: GO 28593
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28519: LD_ADDR_VAR 0 2
28523: PUSH
28524: LD_VAR 0 1
28528: PUSH
28529: LD_INT 1
28531: PPUSH
28532: LD_VAR 0 1
28536: PPUSH
28537: CALL_OW 12
28541: ARRAY
28542: PPUSH
28543: CALL_OW 274
28547: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28548: LD_VAR 0 2
28552: PPUSH
28553: LD_INT 1
28555: PPUSH
28556: LD_INT 0
28558: PPUSH
28559: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28563: LD_VAR 0 2
28567: PPUSH
28568: LD_INT 2
28570: PPUSH
28571: LD_INT 0
28573: PPUSH
28574: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28578: LD_VAR 0 2
28582: PPUSH
28583: LD_INT 3
28585: PPUSH
28586: LD_INT 0
28588: PPUSH
28589: CALL_OW 277
// end ;
28593: PPOPN 2
28595: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28596: LD_EXP 50
28600: PUSH
28601: LD_EXP 78
28605: AND
28606: IFFALSE 28703
28608: GO 28610
28610: DISABLE
28611: LD_INT 0
28613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28614: LD_ADDR_VAR 0 1
28618: PUSH
28619: LD_INT 22
28621: PUSH
28622: LD_OWVAR 2
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 21
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 3
28643: PUSH
28644: LD_INT 23
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: PPUSH
28663: CALL_OW 69
28667: ST_TO_ADDR
// if not tmp then
28668: LD_VAR 0 1
28672: NOT
28673: IFFALSE 28677
// exit ;
28675: GO 28703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28677: LD_VAR 0 1
28681: PUSH
28682: LD_INT 1
28684: PPUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 12
28694: ARRAY
28695: PPUSH
28696: LD_INT 200
28698: PPUSH
28699: CALL_OW 234
// end ;
28703: PPOPN 1
28705: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28706: LD_EXP 50
28710: PUSH
28711: LD_EXP 79
28715: AND
28716: IFFALSE 28795
28718: GO 28720
28720: DISABLE
28721: LD_INT 0
28723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28724: LD_ADDR_VAR 0 1
28728: PUSH
28729: LD_INT 22
28731: PUSH
28732: LD_OWVAR 2
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 21
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PPUSH
28755: CALL_OW 69
28759: ST_TO_ADDR
// if not tmp then
28760: LD_VAR 0 1
28764: NOT
28765: IFFALSE 28769
// exit ;
28767: GO 28795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28769: LD_VAR 0 1
28773: PUSH
28774: LD_INT 1
28776: PPUSH
28777: LD_VAR 0 1
28781: PPUSH
28782: CALL_OW 12
28786: ARRAY
28787: PPUSH
28788: LD_INT 60
28790: PPUSH
28791: CALL_OW 234
// end ;
28795: PPOPN 1
28797: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28798: LD_EXP 50
28802: PUSH
28803: LD_EXP 80
28807: AND
28808: IFFALSE 28907
28810: GO 28812
28812: DISABLE
28813: LD_INT 0
28815: PPUSH
28816: PPUSH
// begin enable ;
28817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28818: LD_ADDR_VAR 0 1
28822: PUSH
28823: LD_INT 22
28825: PUSH
28826: LD_OWVAR 2
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 61
28837: PUSH
28838: EMPTY
28839: LIST
28840: PUSH
28841: LD_INT 33
28843: PUSH
28844: LD_INT 2
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: PPUSH
28856: CALL_OW 69
28860: ST_TO_ADDR
// if not tmp then
28861: LD_VAR 0 1
28865: NOT
28866: IFFALSE 28870
// exit ;
28868: GO 28907
// for i in tmp do
28870: LD_ADDR_VAR 0 2
28874: PUSH
28875: LD_VAR 0 1
28879: PUSH
28880: FOR_IN
28881: IFFALSE 28905
// if IsControledBy ( i ) then
28883: LD_VAR 0 2
28887: PPUSH
28888: CALL_OW 312
28892: IFFALSE 28903
// ComUnlink ( i ) ;
28894: LD_VAR 0 2
28898: PPUSH
28899: CALL_OW 136
28903: GO 28880
28905: POP
28906: POP
// end ;
28907: PPOPN 2
28909: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28910: LD_EXP 50
28914: PUSH
28915: LD_EXP 81
28919: AND
28920: IFFALSE 29060
28922: GO 28924
28924: DISABLE
28925: LD_INT 0
28927: PPUSH
28928: PPUSH
// begin ToLua ( displayPowell(); ) ;
28929: LD_STRING displayPowell();
28931: PPUSH
28932: CALL_OW 559
// uc_side := 0 ;
28936: LD_ADDR_OWVAR 20
28940: PUSH
28941: LD_INT 0
28943: ST_TO_ADDR
// uc_nation := 2 ;
28944: LD_ADDR_OWVAR 21
28948: PUSH
28949: LD_INT 2
28951: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28952: LD_ADDR_OWVAR 37
28956: PUSH
28957: LD_INT 14
28959: ST_TO_ADDR
// vc_engine := engine_siberite ;
28960: LD_ADDR_OWVAR 39
28964: PUSH
28965: LD_INT 3
28967: ST_TO_ADDR
// vc_control := control_apeman ;
28968: LD_ADDR_OWVAR 38
28972: PUSH
28973: LD_INT 5
28975: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28976: LD_ADDR_OWVAR 40
28980: PUSH
28981: LD_INT 29
28983: ST_TO_ADDR
// un := CreateVehicle ;
28984: LD_ADDR_VAR 0 2
28988: PUSH
28989: CALL_OW 45
28993: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28994: LD_VAR 0 2
28998: PPUSH
28999: LD_INT 1
29001: PPUSH
29002: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29006: LD_INT 35
29008: PPUSH
29009: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29013: LD_VAR 0 2
29017: PPUSH
29018: LD_INT 22
29020: PUSH
29021: LD_OWVAR 2
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PPUSH
29030: CALL_OW 69
29034: PPUSH
29035: LD_VAR 0 2
29039: PPUSH
29040: CALL_OW 74
29044: PPUSH
29045: CALL_OW 115
// until IsDead ( un ) ;
29049: LD_VAR 0 2
29053: PPUSH
29054: CALL_OW 301
29058: IFFALSE 29006
// end ;
29060: PPOPN 2
29062: END
// every 0 0$1 trigger StreamModeActive and sStu do
29063: LD_EXP 50
29067: PUSH
29068: LD_EXP 89
29072: AND
29073: IFFALSE 29089
29075: GO 29077
29077: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29078: LD_STRING displayStucuk();
29080: PPUSH
29081: CALL_OW 559
// ResetFog ;
29085: CALL_OW 335
// end ;
29089: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29090: LD_EXP 50
29094: PUSH
29095: LD_EXP 82
29099: AND
29100: IFFALSE 29241
29102: GO 29104
29104: DISABLE
29105: LD_INT 0
29107: PPUSH
29108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29109: LD_ADDR_VAR 0 2
29113: PUSH
29114: LD_INT 22
29116: PUSH
29117: LD_OWVAR 2
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 21
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PPUSH
29140: CALL_OW 69
29144: ST_TO_ADDR
// if not tmp then
29145: LD_VAR 0 2
29149: NOT
29150: IFFALSE 29154
// exit ;
29152: GO 29241
// un := tmp [ rand ( 1 , tmp ) ] ;
29154: LD_ADDR_VAR 0 1
29158: PUSH
29159: LD_VAR 0 2
29163: PUSH
29164: LD_INT 1
29166: PPUSH
29167: LD_VAR 0 2
29171: PPUSH
29172: CALL_OW 12
29176: ARRAY
29177: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29178: LD_VAR 0 1
29182: PPUSH
29183: LD_INT 0
29185: PPUSH
29186: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29190: LD_VAR 0 1
29194: PPUSH
29195: LD_OWVAR 3
29199: PUSH
29200: LD_VAR 0 1
29204: DIFF
29205: PPUSH
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL_OW 74
29215: PPUSH
29216: CALL_OW 115
// wait ( 0 0$20 ) ;
29220: LD_INT 700
29222: PPUSH
29223: CALL_OW 67
// SetSide ( un , your_side ) ;
29227: LD_VAR 0 1
29231: PPUSH
29232: LD_OWVAR 2
29236: PPUSH
29237: CALL_OW 235
// end ;
29241: PPOPN 2
29243: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29244: LD_EXP 50
29248: PUSH
29249: LD_EXP 83
29253: AND
29254: IFFALSE 29360
29256: GO 29258
29258: DISABLE
29259: LD_INT 0
29261: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29262: LD_ADDR_VAR 0 1
29266: PUSH
29267: LD_INT 22
29269: PUSH
29270: LD_OWVAR 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 30
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 30
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PPUSH
29311: CALL_OW 69
29315: ST_TO_ADDR
// if not depot then
29316: LD_VAR 0 1
29320: NOT
29321: IFFALSE 29325
// exit ;
29323: GO 29360
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29325: LD_VAR 0 1
29329: PUSH
29330: LD_INT 1
29332: ARRAY
29333: PPUSH
29334: CALL_OW 250
29338: PPUSH
29339: LD_VAR 0 1
29343: PUSH
29344: LD_INT 1
29346: ARRAY
29347: PPUSH
29348: CALL_OW 251
29352: PPUSH
29353: LD_INT 70
29355: PPUSH
29356: CALL_OW 495
// end ;
29360: PPOPN 1
29362: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29363: LD_EXP 50
29367: PUSH
29368: LD_EXP 84
29372: AND
29373: IFFALSE 29584
29375: GO 29377
29377: DISABLE
29378: LD_INT 0
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29385: LD_ADDR_VAR 0 5
29389: PUSH
29390: LD_INT 22
29392: PUSH
29393: LD_OWVAR 2
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 21
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PPUSH
29416: CALL_OW 69
29420: ST_TO_ADDR
// if not tmp then
29421: LD_VAR 0 5
29425: NOT
29426: IFFALSE 29430
// exit ;
29428: GO 29584
// for i in tmp do
29430: LD_ADDR_VAR 0 1
29434: PUSH
29435: LD_VAR 0 5
29439: PUSH
29440: FOR_IN
29441: IFFALSE 29582
// begin d := rand ( 0 , 5 ) ;
29443: LD_ADDR_VAR 0 4
29447: PUSH
29448: LD_INT 0
29450: PPUSH
29451: LD_INT 5
29453: PPUSH
29454: CALL_OW 12
29458: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29459: LD_ADDR_VAR 0 2
29463: PUSH
29464: LD_VAR 0 1
29468: PPUSH
29469: CALL_OW 250
29473: PPUSH
29474: LD_VAR 0 4
29478: PPUSH
29479: LD_INT 3
29481: PPUSH
29482: LD_INT 12
29484: PPUSH
29485: CALL_OW 12
29489: PPUSH
29490: CALL_OW 272
29494: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29495: LD_ADDR_VAR 0 3
29499: PUSH
29500: LD_VAR 0 1
29504: PPUSH
29505: CALL_OW 251
29509: PPUSH
29510: LD_VAR 0 4
29514: PPUSH
29515: LD_INT 3
29517: PPUSH
29518: LD_INT 12
29520: PPUSH
29521: CALL_OW 12
29525: PPUSH
29526: CALL_OW 273
29530: ST_TO_ADDR
// if ValidHex ( x , y ) then
29531: LD_VAR 0 2
29535: PPUSH
29536: LD_VAR 0 3
29540: PPUSH
29541: CALL_OW 488
29545: IFFALSE 29580
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29547: LD_VAR 0 1
29551: PPUSH
29552: LD_VAR 0 2
29556: PPUSH
29557: LD_VAR 0 3
29561: PPUSH
29562: LD_INT 3
29564: PPUSH
29565: LD_INT 6
29567: PPUSH
29568: CALL_OW 12
29572: PPUSH
29573: LD_INT 1
29575: PPUSH
29576: CALL_OW 483
// end ;
29580: GO 29440
29582: POP
29583: POP
// end ;
29584: PPOPN 5
29586: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29587: LD_EXP 50
29591: PUSH
29592: LD_EXP 85
29596: AND
29597: IFFALSE 29691
29599: GO 29601
29601: DISABLE
29602: LD_INT 0
29604: PPUSH
29605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29606: LD_ADDR_VAR 0 2
29610: PUSH
29611: LD_INT 22
29613: PUSH
29614: LD_OWVAR 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 32
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 21
29635: PUSH
29636: LD_INT 2
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 69
29652: ST_TO_ADDR
// if not tmp then
29653: LD_VAR 0 2
29657: NOT
29658: IFFALSE 29662
// exit ;
29660: GO 29691
// for i in tmp do
29662: LD_ADDR_VAR 0 1
29666: PUSH
29667: LD_VAR 0 2
29671: PUSH
29672: FOR_IN
29673: IFFALSE 29689
// SetFuel ( i , 0 ) ;
29675: LD_VAR 0 1
29679: PPUSH
29680: LD_INT 0
29682: PPUSH
29683: CALL_OW 240
29687: GO 29672
29689: POP
29690: POP
// end ;
29691: PPOPN 2
29693: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29694: LD_EXP 50
29698: PUSH
29699: LD_EXP 86
29703: AND
29704: IFFALSE 29770
29706: GO 29708
29708: DISABLE
29709: LD_INT 0
29711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29712: LD_ADDR_VAR 0 1
29716: PUSH
29717: LD_INT 22
29719: PUSH
29720: LD_OWVAR 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 30
29731: PUSH
29732: LD_INT 29
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PPUSH
29743: CALL_OW 69
29747: ST_TO_ADDR
// if not tmp then
29748: LD_VAR 0 1
29752: NOT
29753: IFFALSE 29757
// exit ;
29755: GO 29770
// DestroyUnit ( tmp [ 1 ] ) ;
29757: LD_VAR 0 1
29761: PUSH
29762: LD_INT 1
29764: ARRAY
29765: PPUSH
29766: CALL_OW 65
// end ;
29770: PPOPN 1
29772: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29773: LD_EXP 50
29777: PUSH
29778: LD_EXP 88
29782: AND
29783: IFFALSE 29912
29785: GO 29787
29787: DISABLE
29788: LD_INT 0
29790: PPUSH
// begin uc_side := 0 ;
29791: LD_ADDR_OWVAR 20
29795: PUSH
29796: LD_INT 0
29798: ST_TO_ADDR
// uc_nation := nation_arabian ;
29799: LD_ADDR_OWVAR 21
29803: PUSH
29804: LD_INT 2
29806: ST_TO_ADDR
// hc_gallery :=  ;
29807: LD_ADDR_OWVAR 33
29811: PUSH
29812: LD_STRING 
29814: ST_TO_ADDR
// hc_name :=  ;
29815: LD_ADDR_OWVAR 26
29819: PUSH
29820: LD_STRING 
29822: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29823: LD_INT 1
29825: PPUSH
29826: LD_INT 11
29828: PPUSH
29829: LD_INT 10
29831: PPUSH
29832: CALL_OW 380
// un := CreateHuman ;
29836: LD_ADDR_VAR 0 1
29840: PUSH
29841: CALL_OW 44
29845: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29846: LD_VAR 0 1
29850: PPUSH
29851: LD_INT 1
29853: PPUSH
29854: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29858: LD_INT 35
29860: PPUSH
29861: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29865: LD_VAR 0 1
29869: PPUSH
29870: LD_INT 22
29872: PUSH
29873: LD_OWVAR 2
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PPUSH
29882: CALL_OW 69
29886: PPUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 74
29896: PPUSH
29897: CALL_OW 115
// until IsDead ( un ) ;
29901: LD_VAR 0 1
29905: PPUSH
29906: CALL_OW 301
29910: IFFALSE 29858
// end ;
29912: PPOPN 1
29914: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29915: LD_EXP 50
29919: PUSH
29920: LD_EXP 90
29924: AND
29925: IFFALSE 29937
29927: GO 29929
29929: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29930: LD_STRING earthquake(getX(game), 0, 32)
29932: PPUSH
29933: CALL_OW 559
29937: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29938: LD_EXP 50
29942: PUSH
29943: LD_EXP 91
29947: AND
29948: IFFALSE 30039
29950: GO 29952
29952: DISABLE
29953: LD_INT 0
29955: PPUSH
// begin enable ;
29956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29957: LD_ADDR_VAR 0 1
29961: PUSH
29962: LD_INT 22
29964: PUSH
29965: LD_OWVAR 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 21
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 33
29986: PUSH
29987: LD_INT 3
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: PPUSH
29999: CALL_OW 69
30003: ST_TO_ADDR
// if not tmp then
30004: LD_VAR 0 1
30008: NOT
30009: IFFALSE 30013
// exit ;
30011: GO 30039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30013: LD_VAR 0 1
30017: PUSH
30018: LD_INT 1
30020: PPUSH
30021: LD_VAR 0 1
30025: PPUSH
30026: CALL_OW 12
30030: ARRAY
30031: PPUSH
30032: LD_INT 1
30034: PPUSH
30035: CALL_OW 234
// end ;
30039: PPOPN 1
30041: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30042: LD_EXP 50
30046: PUSH
30047: LD_EXP 92
30051: AND
30052: IFFALSE 30193
30054: GO 30056
30056: DISABLE
30057: LD_INT 0
30059: PPUSH
30060: PPUSH
30061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30062: LD_ADDR_VAR 0 3
30066: PUSH
30067: LD_INT 22
30069: PUSH
30070: LD_OWVAR 2
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 25
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PPUSH
30093: CALL_OW 69
30097: ST_TO_ADDR
// if not tmp then
30098: LD_VAR 0 3
30102: NOT
30103: IFFALSE 30107
// exit ;
30105: GO 30193
// un := tmp [ rand ( 1 , tmp ) ] ;
30107: LD_ADDR_VAR 0 2
30111: PUSH
30112: LD_VAR 0 3
30116: PUSH
30117: LD_INT 1
30119: PPUSH
30120: LD_VAR 0 3
30124: PPUSH
30125: CALL_OW 12
30129: ARRAY
30130: ST_TO_ADDR
// if Crawls ( un ) then
30131: LD_VAR 0 2
30135: PPUSH
30136: CALL_OW 318
30140: IFFALSE 30151
// ComWalk ( un ) ;
30142: LD_VAR 0 2
30146: PPUSH
30147: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30151: LD_VAR 0 2
30155: PPUSH
30156: LD_INT 9
30158: PPUSH
30159: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30163: LD_INT 28
30165: PPUSH
30166: LD_OWVAR 2
30170: PPUSH
30171: LD_INT 2
30173: PPUSH
30174: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30178: LD_INT 29
30180: PPUSH
30181: LD_OWVAR 2
30185: PPUSH
30186: LD_INT 2
30188: PPUSH
30189: CALL_OW 322
// end ;
30193: PPOPN 3
30195: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30196: LD_EXP 50
30200: PUSH
30201: LD_EXP 93
30205: AND
30206: IFFALSE 30317
30208: GO 30210
30210: DISABLE
30211: LD_INT 0
30213: PPUSH
30214: PPUSH
30215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30216: LD_ADDR_VAR 0 3
30220: PUSH
30221: LD_INT 22
30223: PUSH
30224: LD_OWVAR 2
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 25
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 69
30251: ST_TO_ADDR
// if not tmp then
30252: LD_VAR 0 3
30256: NOT
30257: IFFALSE 30261
// exit ;
30259: GO 30317
// un := tmp [ rand ( 1 , tmp ) ] ;
30261: LD_ADDR_VAR 0 2
30265: PUSH
30266: LD_VAR 0 3
30270: PUSH
30271: LD_INT 1
30273: PPUSH
30274: LD_VAR 0 3
30278: PPUSH
30279: CALL_OW 12
30283: ARRAY
30284: ST_TO_ADDR
// if Crawls ( un ) then
30285: LD_VAR 0 2
30289: PPUSH
30290: CALL_OW 318
30294: IFFALSE 30305
// ComWalk ( un ) ;
30296: LD_VAR 0 2
30300: PPUSH
30301: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30305: LD_VAR 0 2
30309: PPUSH
30310: LD_INT 8
30312: PPUSH
30313: CALL_OW 336
// end ;
30317: PPOPN 3
30319: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30320: LD_EXP 50
30324: PUSH
30325: LD_EXP 94
30329: AND
30330: IFFALSE 30474
30332: GO 30334
30334: DISABLE
30335: LD_INT 0
30337: PPUSH
30338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30339: LD_ADDR_VAR 0 2
30343: PUSH
30344: LD_INT 22
30346: PUSH
30347: LD_OWVAR 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 21
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: LD_INT 34
30371: PUSH
30372: LD_INT 12
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 34
30381: PUSH
30382: LD_INT 51
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 34
30391: PUSH
30392: LD_INT 32
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: PPUSH
30410: CALL_OW 69
30414: ST_TO_ADDR
// if not tmp then
30415: LD_VAR 0 2
30419: NOT
30420: IFFALSE 30424
// exit ;
30422: GO 30474
// for i in tmp do
30424: LD_ADDR_VAR 0 1
30428: PUSH
30429: LD_VAR 0 2
30433: PUSH
30434: FOR_IN
30435: IFFALSE 30472
// if GetCargo ( i , mat_artifact ) = 0 then
30437: LD_VAR 0 1
30441: PPUSH
30442: LD_INT 4
30444: PPUSH
30445: CALL_OW 289
30449: PUSH
30450: LD_INT 0
30452: EQUAL
30453: IFFALSE 30470
// SetCargo ( i , mat_siberit , 100 ) ;
30455: LD_VAR 0 1
30459: PPUSH
30460: LD_INT 3
30462: PPUSH
30463: LD_INT 100
30465: PPUSH
30466: CALL_OW 290
30470: GO 30434
30472: POP
30473: POP
// end ;
30474: PPOPN 2
30476: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30477: LD_EXP 50
30481: PUSH
30482: LD_EXP 95
30486: AND
30487: IFFALSE 30670
30489: GO 30491
30491: DISABLE
30492: LD_INT 0
30494: PPUSH
30495: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: LD_INT 22
30503: PUSH
30504: LD_OWVAR 2
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PPUSH
30513: CALL_OW 69
30517: ST_TO_ADDR
// if not tmp then
30518: LD_VAR 0 2
30522: NOT
30523: IFFALSE 30527
// exit ;
30525: GO 30670
// for i := 1 to 2 do
30527: LD_ADDR_VAR 0 1
30531: PUSH
30532: DOUBLE
30533: LD_INT 1
30535: DEC
30536: ST_TO_ADDR
30537: LD_INT 2
30539: PUSH
30540: FOR_TO
30541: IFFALSE 30668
// begin uc_side := your_side ;
30543: LD_ADDR_OWVAR 20
30547: PUSH
30548: LD_OWVAR 2
30552: ST_TO_ADDR
// uc_nation := nation_american ;
30553: LD_ADDR_OWVAR 21
30557: PUSH
30558: LD_INT 1
30560: ST_TO_ADDR
// vc_chassis := us_morphling ;
30561: LD_ADDR_OWVAR 37
30565: PUSH
30566: LD_INT 5
30568: ST_TO_ADDR
// vc_engine := engine_siberite ;
30569: LD_ADDR_OWVAR 39
30573: PUSH
30574: LD_INT 3
30576: ST_TO_ADDR
// vc_control := control_computer ;
30577: LD_ADDR_OWVAR 38
30581: PUSH
30582: LD_INT 3
30584: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30585: LD_ADDR_OWVAR 40
30589: PUSH
30590: LD_INT 10
30592: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30593: LD_VAR 0 2
30597: PUSH
30598: LD_INT 1
30600: ARRAY
30601: PPUSH
30602: CALL_OW 310
30606: NOT
30607: IFFALSE 30654
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30609: CALL_OW 45
30613: PPUSH
30614: LD_VAR 0 2
30618: PUSH
30619: LD_INT 1
30621: ARRAY
30622: PPUSH
30623: CALL_OW 250
30627: PPUSH
30628: LD_VAR 0 2
30632: PUSH
30633: LD_INT 1
30635: ARRAY
30636: PPUSH
30637: CALL_OW 251
30641: PPUSH
30642: LD_INT 12
30644: PPUSH
30645: LD_INT 1
30647: PPUSH
30648: CALL_OW 50
30652: GO 30666
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30654: CALL_OW 45
30658: PPUSH
30659: LD_INT 1
30661: PPUSH
30662: CALL_OW 51
// end ;
30666: GO 30540
30668: POP
30669: POP
// end ;
30670: PPOPN 2
30672: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30673: LD_EXP 50
30677: PUSH
30678: LD_EXP 96
30682: AND
30683: IFFALSE 30905
30685: GO 30687
30687: DISABLE
30688: LD_INT 0
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30696: LD_ADDR_VAR 0 6
30700: PUSH
30701: LD_INT 22
30703: PUSH
30704: LD_OWVAR 2
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 21
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: LD_INT 23
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: PPUSH
30745: CALL_OW 69
30749: ST_TO_ADDR
// if not tmp then
30750: LD_VAR 0 6
30754: NOT
30755: IFFALSE 30759
// exit ;
30757: GO 30905
// s1 := rand ( 1 , 4 ) ;
30759: LD_ADDR_VAR 0 2
30763: PUSH
30764: LD_INT 1
30766: PPUSH
30767: LD_INT 4
30769: PPUSH
30770: CALL_OW 12
30774: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30775: LD_ADDR_VAR 0 4
30779: PUSH
30780: LD_VAR 0 6
30784: PUSH
30785: LD_INT 1
30787: ARRAY
30788: PPUSH
30789: LD_VAR 0 2
30793: PPUSH
30794: CALL_OW 259
30798: ST_TO_ADDR
// if s1 = 1 then
30799: LD_VAR 0 2
30803: PUSH
30804: LD_INT 1
30806: EQUAL
30807: IFFALSE 30827
// s2 := rand ( 2 , 4 ) else
30809: LD_ADDR_VAR 0 3
30813: PUSH
30814: LD_INT 2
30816: PPUSH
30817: LD_INT 4
30819: PPUSH
30820: CALL_OW 12
30824: ST_TO_ADDR
30825: GO 30835
// s2 := 1 ;
30827: LD_ADDR_VAR 0 3
30831: PUSH
30832: LD_INT 1
30834: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30835: LD_ADDR_VAR 0 5
30839: PUSH
30840: LD_VAR 0 6
30844: PUSH
30845: LD_INT 1
30847: ARRAY
30848: PPUSH
30849: LD_VAR 0 3
30853: PPUSH
30854: CALL_OW 259
30858: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30859: LD_VAR 0 6
30863: PUSH
30864: LD_INT 1
30866: ARRAY
30867: PPUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_VAR 0 5
30877: PPUSH
30878: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30882: LD_VAR 0 6
30886: PUSH
30887: LD_INT 1
30889: ARRAY
30890: PPUSH
30891: LD_VAR 0 3
30895: PPUSH
30896: LD_VAR 0 4
30900: PPUSH
30901: CALL_OW 237
// end ;
30905: PPOPN 6
30907: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30908: LD_EXP 50
30912: PUSH
30913: LD_EXP 97
30917: AND
30918: IFFALSE 30997
30920: GO 30922
30922: DISABLE
30923: LD_INT 0
30925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30926: LD_ADDR_VAR 0 1
30930: PUSH
30931: LD_INT 22
30933: PUSH
30934: LD_OWVAR 2
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 30
30945: PUSH
30946: LD_INT 3
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PPUSH
30957: CALL_OW 69
30961: ST_TO_ADDR
// if not tmp then
30962: LD_VAR 0 1
30966: NOT
30967: IFFALSE 30971
// exit ;
30969: GO 30997
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30971: LD_VAR 0 1
30975: PUSH
30976: LD_INT 1
30978: PPUSH
30979: LD_VAR 0 1
30983: PPUSH
30984: CALL_OW 12
30988: ARRAY
30989: PPUSH
30990: LD_INT 1
30992: PPUSH
30993: CALL_OW 234
// end ;
30997: PPOPN 1
30999: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31000: LD_EXP 50
31004: PUSH
31005: LD_EXP 98
31009: AND
31010: IFFALSE 31122
31012: GO 31014
31014: DISABLE
31015: LD_INT 0
31017: PPUSH
31018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31019: LD_ADDR_VAR 0 2
31023: PUSH
31024: LD_INT 22
31026: PUSH
31027: LD_OWVAR 2
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 2
31038: PUSH
31039: LD_INT 30
31041: PUSH
31042: LD_INT 27
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 30
31051: PUSH
31052: LD_INT 26
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 30
31061: PUSH
31062: LD_INT 28
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PPUSH
31079: CALL_OW 69
31083: ST_TO_ADDR
// if not tmp then
31084: LD_VAR 0 2
31088: NOT
31089: IFFALSE 31093
// exit ;
31091: GO 31122
// for i in tmp do
31093: LD_ADDR_VAR 0 1
31097: PUSH
31098: LD_VAR 0 2
31102: PUSH
31103: FOR_IN
31104: IFFALSE 31120
// SetLives ( i , 1 ) ;
31106: LD_VAR 0 1
31110: PPUSH
31111: LD_INT 1
31113: PPUSH
31114: CALL_OW 234
31118: GO 31103
31120: POP
31121: POP
// end ;
31122: PPOPN 2
31124: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31125: LD_EXP 50
31129: PUSH
31130: LD_EXP 99
31134: AND
31135: IFFALSE 31422
31137: GO 31139
31139: DISABLE
31140: LD_INT 0
31142: PPUSH
31143: PPUSH
31144: PPUSH
// begin i := rand ( 1 , 7 ) ;
31145: LD_ADDR_VAR 0 1
31149: PUSH
31150: LD_INT 1
31152: PPUSH
31153: LD_INT 7
31155: PPUSH
31156: CALL_OW 12
31160: ST_TO_ADDR
// case i of 1 :
31161: LD_VAR 0 1
31165: PUSH
31166: LD_INT 1
31168: DOUBLE
31169: EQUAL
31170: IFTRUE 31174
31172: GO 31184
31174: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31175: LD_STRING earthquake(getX(game), 0, 32)
31177: PPUSH
31178: CALL_OW 559
31182: GO 31422
31184: LD_INT 2
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31206
31192: POP
// begin ToLua ( displayStucuk(); ) ;
31193: LD_STRING displayStucuk();
31195: PPUSH
31196: CALL_OW 559
// ResetFog ;
31200: CALL_OW 335
// end ; 3 :
31204: GO 31422
31206: LD_INT 3
31208: DOUBLE
31209: EQUAL
31210: IFTRUE 31214
31212: GO 31318
31214: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31215: LD_ADDR_VAR 0 2
31219: PUSH
31220: LD_INT 22
31222: PUSH
31223: LD_OWVAR 2
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 25
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PPUSH
31246: CALL_OW 69
31250: ST_TO_ADDR
// if not tmp then
31251: LD_VAR 0 2
31255: NOT
31256: IFFALSE 31260
// exit ;
31258: GO 31422
// un := tmp [ rand ( 1 , tmp ) ] ;
31260: LD_ADDR_VAR 0 3
31264: PUSH
31265: LD_VAR 0 2
31269: PUSH
31270: LD_INT 1
31272: PPUSH
31273: LD_VAR 0 2
31277: PPUSH
31278: CALL_OW 12
31282: ARRAY
31283: ST_TO_ADDR
// if Crawls ( un ) then
31284: LD_VAR 0 3
31288: PPUSH
31289: CALL_OW 318
31293: IFFALSE 31304
// ComWalk ( un ) ;
31295: LD_VAR 0 3
31299: PPUSH
31300: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31304: LD_VAR 0 3
31308: PPUSH
31309: LD_INT 8
31311: PPUSH
31312: CALL_OW 336
// end ; 4 :
31316: GO 31422
31318: LD_INT 4
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31326
31324: GO 31400
31326: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31327: LD_ADDR_VAR 0 2
31331: PUSH
31332: LD_INT 22
31334: PUSH
31335: LD_OWVAR 2
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 30
31346: PUSH
31347: LD_INT 29
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PPUSH
31358: CALL_OW 69
31362: ST_TO_ADDR
// if not tmp then
31363: LD_VAR 0 2
31367: NOT
31368: IFFALSE 31372
// exit ;
31370: GO 31422
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31372: LD_VAR 0 2
31376: PUSH
31377: LD_INT 1
31379: ARRAY
31380: PPUSH
31381: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31385: LD_VAR 0 2
31389: PUSH
31390: LD_INT 1
31392: ARRAY
31393: PPUSH
31394: CALL_OW 65
// end ; 5 .. 7 :
31398: GO 31422
31400: LD_INT 5
31402: DOUBLE
31403: GREATEREQUAL
31404: IFFALSE 31412
31406: LD_INT 7
31408: DOUBLE
31409: LESSEQUAL
31410: IFTRUE 31414
31412: GO 31421
31414: POP
// StreamSibBomb ; end ;
31415: CALL 27659 0 0
31419: GO 31422
31421: POP
// end ;
31422: PPOPN 3
31424: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31425: LD_EXP 50
31429: PUSH
31430: LD_EXP 100
31434: AND
31435: IFFALSE 31591
31437: GO 31439
31439: DISABLE
31440: LD_INT 0
31442: PPUSH
31443: PPUSH
31444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31445: LD_ADDR_VAR 0 2
31449: PUSH
31450: LD_INT 81
31452: PUSH
31453: LD_OWVAR 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: LD_INT 21
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 21
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: LIST
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PPUSH
31494: CALL_OW 69
31498: ST_TO_ADDR
// if not tmp then
31499: LD_VAR 0 2
31503: NOT
31504: IFFALSE 31508
// exit ;
31506: GO 31591
// p := 0 ;
31508: LD_ADDR_VAR 0 3
31512: PUSH
31513: LD_INT 0
31515: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31516: LD_INT 35
31518: PPUSH
31519: CALL_OW 67
// p := p + 1 ;
31523: LD_ADDR_VAR 0 3
31527: PUSH
31528: LD_VAR 0 3
31532: PUSH
31533: LD_INT 1
31535: PLUS
31536: ST_TO_ADDR
// for i in tmp do
31537: LD_ADDR_VAR 0 1
31541: PUSH
31542: LD_VAR 0 2
31546: PUSH
31547: FOR_IN
31548: IFFALSE 31579
// if GetLives ( i ) < 1000 then
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL_OW 256
31559: PUSH
31560: LD_INT 1000
31562: LESS
31563: IFFALSE 31577
// SetLives ( i , 1000 ) ;
31565: LD_VAR 0 1
31569: PPUSH
31570: LD_INT 1000
31572: PPUSH
31573: CALL_OW 234
31577: GO 31547
31579: POP
31580: POP
// until p > 20 ;
31581: LD_VAR 0 3
31585: PUSH
31586: LD_INT 20
31588: GREATER
31589: IFFALSE 31516
// end ;
31591: PPOPN 3
31593: END
// every 0 0$1 trigger StreamModeActive and sTime do
31594: LD_EXP 50
31598: PUSH
31599: LD_EXP 101
31603: AND
31604: IFFALSE 31639
31606: GO 31608
31608: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31609: LD_INT 28
31611: PPUSH
31612: LD_OWVAR 2
31616: PPUSH
31617: LD_INT 2
31619: PPUSH
31620: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31624: LD_INT 30
31626: PPUSH
31627: LD_OWVAR 2
31631: PPUSH
31632: LD_INT 2
31634: PPUSH
31635: CALL_OW 322
// end ;
31639: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31640: LD_EXP 50
31644: PUSH
31645: LD_EXP 102
31649: AND
31650: IFFALSE 31771
31652: GO 31654
31654: DISABLE
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31659: LD_ADDR_VAR 0 2
31663: PUSH
31664: LD_INT 22
31666: PUSH
31667: LD_OWVAR 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 21
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: LD_INT 23
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: PPUSH
31708: CALL_OW 69
31712: ST_TO_ADDR
// if not tmp then
31713: LD_VAR 0 2
31717: NOT
31718: IFFALSE 31722
// exit ;
31720: GO 31771
// for i in tmp do
31722: LD_ADDR_VAR 0 1
31726: PUSH
31727: LD_VAR 0 2
31731: PUSH
31732: FOR_IN
31733: IFFALSE 31769
// begin if Crawls ( i ) then
31735: LD_VAR 0 1
31739: PPUSH
31740: CALL_OW 318
31744: IFFALSE 31755
// ComWalk ( i ) ;
31746: LD_VAR 0 1
31750: PPUSH
31751: CALL_OW 138
// SetClass ( i , 2 ) ;
31755: LD_VAR 0 1
31759: PPUSH
31760: LD_INT 2
31762: PPUSH
31763: CALL_OW 336
// end ;
31767: GO 31732
31769: POP
31770: POP
// end ;
31771: PPOPN 2
31773: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31774: LD_EXP 50
31778: PUSH
31779: LD_EXP 103
31783: AND
31784: IFFALSE 32072
31786: GO 31788
31788: DISABLE
31789: LD_INT 0
31791: PPUSH
31792: PPUSH
31793: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31794: LD_OWVAR 2
31798: PPUSH
31799: LD_INT 9
31801: PPUSH
31802: LD_INT 1
31804: PPUSH
31805: LD_INT 1
31807: PPUSH
31808: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31812: LD_INT 9
31814: PPUSH
31815: LD_OWVAR 2
31819: PPUSH
31820: CALL_OW 343
// uc_side := 9 ;
31824: LD_ADDR_OWVAR 20
31828: PUSH
31829: LD_INT 9
31831: ST_TO_ADDR
// uc_nation := 2 ;
31832: LD_ADDR_OWVAR 21
31836: PUSH
31837: LD_INT 2
31839: ST_TO_ADDR
// hc_name := Dark Warrior ;
31840: LD_ADDR_OWVAR 26
31844: PUSH
31845: LD_STRING Dark Warrior
31847: ST_TO_ADDR
// hc_gallery :=  ;
31848: LD_ADDR_OWVAR 33
31852: PUSH
31853: LD_STRING 
31855: ST_TO_ADDR
// hc_noskilllimit := true ;
31856: LD_ADDR_OWVAR 76
31860: PUSH
31861: LD_INT 1
31863: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31864: LD_ADDR_OWVAR 31
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_INT 30
31874: PUSH
31875: LD_INT 30
31877: PUSH
31878: LD_INT 30
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: ST_TO_ADDR
// un := CreateHuman ;
31887: LD_ADDR_VAR 0 3
31891: PUSH
31892: CALL_OW 44
31896: ST_TO_ADDR
// hc_noskilllimit := false ;
31897: LD_ADDR_OWVAR 76
31901: PUSH
31902: LD_INT 0
31904: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31905: LD_VAR 0 3
31909: PPUSH
31910: LD_INT 1
31912: PPUSH
31913: CALL_OW 51
// ToLua ( playRanger() ) ;
31917: LD_STRING playRanger()
31919: PPUSH
31920: CALL_OW 559
// p := 0 ;
31924: LD_ADDR_VAR 0 2
31928: PUSH
31929: LD_INT 0
31931: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31932: LD_INT 35
31934: PPUSH
31935: CALL_OW 67
// p := p + 1 ;
31939: LD_ADDR_VAR 0 2
31943: PUSH
31944: LD_VAR 0 2
31948: PUSH
31949: LD_INT 1
31951: PLUS
31952: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31953: LD_VAR 0 3
31957: PPUSH
31958: CALL_OW 256
31962: PUSH
31963: LD_INT 1000
31965: LESS
31966: IFFALSE 31980
// SetLives ( un , 1000 ) ;
31968: LD_VAR 0 3
31972: PPUSH
31973: LD_INT 1000
31975: PPUSH
31976: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31980: LD_VAR 0 3
31984: PPUSH
31985: LD_INT 81
31987: PUSH
31988: LD_OWVAR 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 91
31999: PUSH
32000: LD_VAR 0 3
32004: PUSH
32005: LD_INT 30
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PPUSH
32017: CALL_OW 69
32021: PPUSH
32022: LD_VAR 0 3
32026: PPUSH
32027: CALL_OW 74
32031: PPUSH
32032: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32036: LD_VAR 0 2
32040: PUSH
32041: LD_INT 80
32043: GREATER
32044: PUSH
32045: LD_VAR 0 3
32049: PPUSH
32050: CALL_OW 301
32054: OR
32055: IFFALSE 31932
// if un then
32057: LD_VAR 0 3
32061: IFFALSE 32072
// RemoveUnit ( un ) ;
32063: LD_VAR 0 3
32067: PPUSH
32068: CALL_OW 64
// end ;
32072: PPOPN 3
32074: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32075: LD_EXP 104
32079: IFFALSE 32195
32081: GO 32083
32083: DISABLE
32084: LD_INT 0
32086: PPUSH
32087: PPUSH
32088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32089: LD_ADDR_VAR 0 2
32093: PUSH
32094: LD_INT 81
32096: PUSH
32097: LD_OWVAR 2
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 21
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PPUSH
32120: CALL_OW 69
32124: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32125: LD_STRING playComputer()
32127: PPUSH
32128: CALL_OW 559
// if not tmp then
32132: LD_VAR 0 2
32136: NOT
32137: IFFALSE 32141
// exit ;
32139: GO 32195
// for i in tmp do
32141: LD_ADDR_VAR 0 1
32145: PUSH
32146: LD_VAR 0 2
32150: PUSH
32151: FOR_IN
32152: IFFALSE 32193
// for j := 1 to 4 do
32154: LD_ADDR_VAR 0 3
32158: PUSH
32159: DOUBLE
32160: LD_INT 1
32162: DEC
32163: ST_TO_ADDR
32164: LD_INT 4
32166: PUSH
32167: FOR_TO
32168: IFFALSE 32189
// SetSkill ( i , j , 10 ) ;
32170: LD_VAR 0 1
32174: PPUSH
32175: LD_VAR 0 3
32179: PPUSH
32180: LD_INT 10
32182: PPUSH
32183: CALL_OW 237
32187: GO 32167
32189: POP
32190: POP
32191: GO 32151
32193: POP
32194: POP
// end ;
32195: PPOPN 3
32197: END
// every 0 0$1 trigger s30 do var i , tmp ;
32198: LD_EXP 105
32202: IFFALSE 32271
32204: GO 32206
32206: DISABLE
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32211: LD_ADDR_VAR 0 2
32215: PUSH
32216: LD_INT 22
32218: PUSH
32219: LD_OWVAR 2
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PPUSH
32228: CALL_OW 69
32232: ST_TO_ADDR
// if not tmp then
32233: LD_VAR 0 2
32237: NOT
32238: IFFALSE 32242
// exit ;
32240: GO 32271
// for i in tmp do
32242: LD_ADDR_VAR 0 1
32246: PUSH
32247: LD_VAR 0 2
32251: PUSH
32252: FOR_IN
32253: IFFALSE 32269
// SetLives ( i , 300 ) ;
32255: LD_VAR 0 1
32259: PPUSH
32260: LD_INT 300
32262: PPUSH
32263: CALL_OW 234
32267: GO 32252
32269: POP
32270: POP
// end ;
32271: PPOPN 2
32273: END
// every 0 0$1 trigger s60 do var i , tmp ;
32274: LD_EXP 106
32278: IFFALSE 32347
32280: GO 32282
32282: DISABLE
32283: LD_INT 0
32285: PPUSH
32286: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32287: LD_ADDR_VAR 0 2
32291: PUSH
32292: LD_INT 22
32294: PUSH
32295: LD_OWVAR 2
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PPUSH
32304: CALL_OW 69
32308: ST_TO_ADDR
// if not tmp then
32309: LD_VAR 0 2
32313: NOT
32314: IFFALSE 32318
// exit ;
32316: GO 32347
// for i in tmp do
32318: LD_ADDR_VAR 0 1
32322: PUSH
32323: LD_VAR 0 2
32327: PUSH
32328: FOR_IN
32329: IFFALSE 32345
// SetLives ( i , 600 ) ;
32331: LD_VAR 0 1
32335: PPUSH
32336: LD_INT 600
32338: PPUSH
32339: CALL_OW 234
32343: GO 32328
32345: POP
32346: POP
// end ;
32347: PPOPN 2
32349: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32350: LD_INT 0
32352: PPUSH
// case cmd of 301 :
32353: LD_VAR 0 1
32357: PUSH
32358: LD_INT 301
32360: DOUBLE
32361: EQUAL
32362: IFTRUE 32366
32364: GO 32398
32366: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32367: LD_VAR 0 6
32371: PPUSH
32372: LD_VAR 0 7
32376: PPUSH
32377: LD_VAR 0 8
32381: PPUSH
32382: LD_VAR 0 4
32386: PPUSH
32387: LD_VAR 0 5
32391: PPUSH
32392: CALL 33599 0 5
32396: GO 32519
32398: LD_INT 302
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32443
32406: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32407: LD_VAR 0 6
32411: PPUSH
32412: LD_VAR 0 7
32416: PPUSH
32417: LD_VAR 0 8
32421: PPUSH
32422: LD_VAR 0 9
32426: PPUSH
32427: LD_VAR 0 4
32431: PPUSH
32432: LD_VAR 0 5
32436: PPUSH
32437: CALL 33690 0 6
32441: GO 32519
32443: LD_INT 303
32445: DOUBLE
32446: EQUAL
32447: IFTRUE 32451
32449: GO 32488
32451: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32452: LD_VAR 0 6
32456: PPUSH
32457: LD_VAR 0 7
32461: PPUSH
32462: LD_VAR 0 8
32466: PPUSH
32467: LD_VAR 0 9
32471: PPUSH
32472: LD_VAR 0 4
32476: PPUSH
32477: LD_VAR 0 5
32481: PPUSH
32482: CALL 32524 0 6
32486: GO 32519
32488: LD_INT 304
32490: DOUBLE
32491: EQUAL
32492: IFTRUE 32496
32494: GO 32518
32496: POP
// hHackTeleport ( unit , x , y ) ; end ;
32497: LD_VAR 0 2
32501: PPUSH
32502: LD_VAR 0 4
32506: PPUSH
32507: LD_VAR 0 5
32511: PPUSH
32512: CALL 34283 0 3
32516: GO 32519
32518: POP
// end ;
32519: LD_VAR 0 12
32523: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32524: LD_INT 0
32526: PPUSH
32527: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32528: LD_VAR 0 1
32532: PUSH
32533: LD_INT 1
32535: LESS
32536: PUSH
32537: LD_VAR 0 1
32541: PUSH
32542: LD_INT 3
32544: GREATER
32545: OR
32546: PUSH
32547: LD_VAR 0 5
32551: PPUSH
32552: LD_VAR 0 6
32556: PPUSH
32557: CALL_OW 428
32561: OR
32562: IFFALSE 32566
// exit ;
32564: GO 33286
// uc_side := your_side ;
32566: LD_ADDR_OWVAR 20
32570: PUSH
32571: LD_OWVAR 2
32575: ST_TO_ADDR
// uc_nation := nation ;
32576: LD_ADDR_OWVAR 21
32580: PUSH
32581: LD_VAR 0 1
32585: ST_TO_ADDR
// bc_level = 1 ;
32586: LD_ADDR_OWVAR 43
32590: PUSH
32591: LD_INT 1
32593: ST_TO_ADDR
// case btype of 1 :
32594: LD_VAR 0 2
32598: PUSH
32599: LD_INT 1
32601: DOUBLE
32602: EQUAL
32603: IFTRUE 32607
32605: GO 32618
32607: POP
// bc_type := b_depot ; 2 :
32608: LD_ADDR_OWVAR 42
32612: PUSH
32613: LD_INT 0
32615: ST_TO_ADDR
32616: GO 33230
32618: LD_INT 2
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32637
32626: POP
// bc_type := b_warehouse ; 3 :
32627: LD_ADDR_OWVAR 42
32631: PUSH
32632: LD_INT 1
32634: ST_TO_ADDR
32635: GO 33230
32637: LD_INT 3
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32645
32643: GO 32656
32645: POP
// bc_type := b_lab ; 4 .. 9 :
32646: LD_ADDR_OWVAR 42
32650: PUSH
32651: LD_INT 6
32653: ST_TO_ADDR
32654: GO 33230
32656: LD_INT 4
32658: DOUBLE
32659: GREATEREQUAL
32660: IFFALSE 32668
32662: LD_INT 9
32664: DOUBLE
32665: LESSEQUAL
32666: IFTRUE 32670
32668: GO 32722
32670: POP
// begin bc_type := b_lab_half ;
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 7
32678: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32679: LD_ADDR_OWVAR 44
32683: PUSH
32684: LD_INT 10
32686: PUSH
32687: LD_INT 11
32689: PUSH
32690: LD_INT 12
32692: PUSH
32693: LD_INT 15
32695: PUSH
32696: LD_INT 14
32698: PUSH
32699: LD_INT 13
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: PUSH
32710: LD_VAR 0 2
32714: PUSH
32715: LD_INT 3
32717: MINUS
32718: ARRAY
32719: ST_TO_ADDR
// end ; 10 .. 13 :
32720: GO 33230
32722: LD_INT 10
32724: DOUBLE
32725: GREATEREQUAL
32726: IFFALSE 32734
32728: LD_INT 13
32730: DOUBLE
32731: LESSEQUAL
32732: IFTRUE 32736
32734: GO 32813
32736: POP
// begin bc_type := b_lab_full ;
32737: LD_ADDR_OWVAR 42
32741: PUSH
32742: LD_INT 8
32744: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32745: LD_ADDR_OWVAR 44
32749: PUSH
32750: LD_INT 10
32752: PUSH
32753: LD_INT 12
32755: PUSH
32756: LD_INT 14
32758: PUSH
32759: LD_INT 13
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: PUSH
32768: LD_VAR 0 2
32772: PUSH
32773: LD_INT 9
32775: MINUS
32776: ARRAY
32777: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32778: LD_ADDR_OWVAR 45
32782: PUSH
32783: LD_INT 11
32785: PUSH
32786: LD_INT 15
32788: PUSH
32789: LD_INT 12
32791: PUSH
32792: LD_INT 15
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: PUSH
32801: LD_VAR 0 2
32805: PUSH
32806: LD_INT 9
32808: MINUS
32809: ARRAY
32810: ST_TO_ADDR
// end ; 14 :
32811: GO 33230
32813: LD_INT 14
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32832
32821: POP
// bc_type := b_workshop ; 15 :
32822: LD_ADDR_OWVAR 42
32826: PUSH
32827: LD_INT 2
32829: ST_TO_ADDR
32830: GO 33230
32832: LD_INT 15
32834: DOUBLE
32835: EQUAL
32836: IFTRUE 32840
32838: GO 32851
32840: POP
// bc_type := b_factory ; 16 :
32841: LD_ADDR_OWVAR 42
32845: PUSH
32846: LD_INT 3
32848: ST_TO_ADDR
32849: GO 33230
32851: LD_INT 16
32853: DOUBLE
32854: EQUAL
32855: IFTRUE 32859
32857: GO 32870
32859: POP
// bc_type := b_ext_gun ; 17 :
32860: LD_ADDR_OWVAR 42
32864: PUSH
32865: LD_INT 17
32867: ST_TO_ADDR
32868: GO 33230
32870: LD_INT 17
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32906
32878: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32879: LD_ADDR_OWVAR 42
32883: PUSH
32884: LD_INT 19
32886: PUSH
32887: LD_INT 23
32889: PUSH
32890: LD_INT 19
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: PUSH
32898: LD_VAR 0 1
32902: ARRAY
32903: ST_TO_ADDR
32904: GO 33230
32906: LD_INT 18
32908: DOUBLE
32909: EQUAL
32910: IFTRUE 32914
32912: GO 32925
32914: POP
// bc_type := b_ext_radar ; 19 :
32915: LD_ADDR_OWVAR 42
32919: PUSH
32920: LD_INT 20
32922: ST_TO_ADDR
32923: GO 33230
32925: LD_INT 19
32927: DOUBLE
32928: EQUAL
32929: IFTRUE 32933
32931: GO 32944
32933: POP
// bc_type := b_ext_radio ; 20 :
32934: LD_ADDR_OWVAR 42
32938: PUSH
32939: LD_INT 22
32941: ST_TO_ADDR
32942: GO 33230
32944: LD_INT 20
32946: DOUBLE
32947: EQUAL
32948: IFTRUE 32952
32950: GO 32963
32952: POP
// bc_type := b_ext_siberium ; 21 :
32953: LD_ADDR_OWVAR 42
32957: PUSH
32958: LD_INT 21
32960: ST_TO_ADDR
32961: GO 33230
32963: LD_INT 21
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32982
32971: POP
// bc_type := b_ext_computer ; 22 :
32972: LD_ADDR_OWVAR 42
32976: PUSH
32977: LD_INT 24
32979: ST_TO_ADDR
32980: GO 33230
32982: LD_INT 22
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33001
32990: POP
// bc_type := b_ext_track ; 23 :
32991: LD_ADDR_OWVAR 42
32995: PUSH
32996: LD_INT 16
32998: ST_TO_ADDR
32999: GO 33230
33001: LD_INT 23
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33020
33009: POP
// bc_type := b_ext_laser ; 24 :
33010: LD_ADDR_OWVAR 42
33014: PUSH
33015: LD_INT 25
33017: ST_TO_ADDR
33018: GO 33230
33020: LD_INT 24
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33028
33026: GO 33039
33028: POP
// bc_type := b_control_tower ; 25 :
33029: LD_ADDR_OWVAR 42
33033: PUSH
33034: LD_INT 36
33036: ST_TO_ADDR
33037: GO 33230
33039: LD_INT 25
33041: DOUBLE
33042: EQUAL
33043: IFTRUE 33047
33045: GO 33058
33047: POP
// bc_type := b_breastwork ; 26 :
33048: LD_ADDR_OWVAR 42
33052: PUSH
33053: LD_INT 31
33055: ST_TO_ADDR
33056: GO 33230
33058: LD_INT 26
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33077
33066: POP
// bc_type := b_bunker ; 27 :
33067: LD_ADDR_OWVAR 42
33071: PUSH
33072: LD_INT 32
33074: ST_TO_ADDR
33075: GO 33230
33077: LD_INT 27
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33085
33083: GO 33096
33085: POP
// bc_type := b_turret ; 28 :
33086: LD_ADDR_OWVAR 42
33090: PUSH
33091: LD_INT 33
33093: ST_TO_ADDR
33094: GO 33230
33096: LD_INT 28
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33104
33102: GO 33115
33104: POP
// bc_type := b_armoury ; 29 :
33105: LD_ADDR_OWVAR 42
33109: PUSH
33110: LD_INT 4
33112: ST_TO_ADDR
33113: GO 33230
33115: LD_INT 29
33117: DOUBLE
33118: EQUAL
33119: IFTRUE 33123
33121: GO 33134
33123: POP
// bc_type := b_barracks ; 30 :
33124: LD_ADDR_OWVAR 42
33128: PUSH
33129: LD_INT 5
33131: ST_TO_ADDR
33132: GO 33230
33134: LD_INT 30
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33142
33140: GO 33153
33142: POP
// bc_type := b_solar_power ; 31 :
33143: LD_ADDR_OWVAR 42
33147: PUSH
33148: LD_INT 27
33150: ST_TO_ADDR
33151: GO 33230
33153: LD_INT 31
33155: DOUBLE
33156: EQUAL
33157: IFTRUE 33161
33159: GO 33172
33161: POP
// bc_type := b_oil_power ; 32 :
33162: LD_ADDR_OWVAR 42
33166: PUSH
33167: LD_INT 26
33169: ST_TO_ADDR
33170: GO 33230
33172: LD_INT 32
33174: DOUBLE
33175: EQUAL
33176: IFTRUE 33180
33178: GO 33191
33180: POP
// bc_type := b_siberite_power ; 33 :
33181: LD_ADDR_OWVAR 42
33185: PUSH
33186: LD_INT 28
33188: ST_TO_ADDR
33189: GO 33230
33191: LD_INT 33
33193: DOUBLE
33194: EQUAL
33195: IFTRUE 33199
33197: GO 33210
33199: POP
// bc_type := b_oil_mine ; 34 :
33200: LD_ADDR_OWVAR 42
33204: PUSH
33205: LD_INT 29
33207: ST_TO_ADDR
33208: GO 33230
33210: LD_INT 34
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33218
33216: GO 33229
33218: POP
// bc_type := b_siberite_mine ; end ;
33219: LD_ADDR_OWVAR 42
33223: PUSH
33224: LD_INT 30
33226: ST_TO_ADDR
33227: GO 33230
33229: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33230: LD_ADDR_VAR 0 8
33234: PUSH
33235: LD_VAR 0 5
33239: PPUSH
33240: LD_VAR 0 6
33244: PPUSH
33245: LD_VAR 0 3
33249: PPUSH
33250: CALL_OW 47
33254: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33255: LD_OWVAR 42
33259: PUSH
33260: LD_INT 32
33262: PUSH
33263: LD_INT 33
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: IN
33270: IFFALSE 33286
// PlaceWeaponTurret ( b , weapon ) ;
33272: LD_VAR 0 8
33276: PPUSH
33277: LD_VAR 0 4
33281: PPUSH
33282: CALL_OW 431
// end ;
33286: LD_VAR 0 7
33290: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33291: LD_INT 0
33293: PPUSH
33294: PPUSH
33295: PPUSH
33296: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33297: LD_ADDR_VAR 0 4
33301: PUSH
33302: LD_INT 22
33304: PUSH
33305: LD_OWVAR 2
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: PUSH
33317: LD_INT 30
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 30
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PPUSH
33346: CALL_OW 69
33350: ST_TO_ADDR
// if not tmp then
33351: LD_VAR 0 4
33355: NOT
33356: IFFALSE 33360
// exit ;
33358: GO 33419
// for i in tmp do
33360: LD_ADDR_VAR 0 2
33364: PUSH
33365: LD_VAR 0 4
33369: PUSH
33370: FOR_IN
33371: IFFALSE 33417
// for j = 1 to 3 do
33373: LD_ADDR_VAR 0 3
33377: PUSH
33378: DOUBLE
33379: LD_INT 1
33381: DEC
33382: ST_TO_ADDR
33383: LD_INT 3
33385: PUSH
33386: FOR_TO
33387: IFFALSE 33413
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33389: LD_VAR 0 2
33393: PPUSH
33394: CALL_OW 274
33398: PPUSH
33399: LD_VAR 0 3
33403: PPUSH
33404: LD_INT 99999
33406: PPUSH
33407: CALL_OW 277
33411: GO 33386
33413: POP
33414: POP
33415: GO 33370
33417: POP
33418: POP
// end ;
33419: LD_VAR 0 1
33423: RET
// export function hHackSetLevel10 ; var i , j ; begin
33424: LD_INT 0
33426: PPUSH
33427: PPUSH
33428: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33429: LD_ADDR_VAR 0 2
33433: PUSH
33434: LD_INT 21
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PPUSH
33444: CALL_OW 69
33448: PUSH
33449: FOR_IN
33450: IFFALSE 33502
// if IsSelected ( i ) then
33452: LD_VAR 0 2
33456: PPUSH
33457: CALL_OW 306
33461: IFFALSE 33500
// begin for j := 1 to 4 do
33463: LD_ADDR_VAR 0 3
33467: PUSH
33468: DOUBLE
33469: LD_INT 1
33471: DEC
33472: ST_TO_ADDR
33473: LD_INT 4
33475: PUSH
33476: FOR_TO
33477: IFFALSE 33498
// SetSkill ( i , j , 10 ) ;
33479: LD_VAR 0 2
33483: PPUSH
33484: LD_VAR 0 3
33488: PPUSH
33489: LD_INT 10
33491: PPUSH
33492: CALL_OW 237
33496: GO 33476
33498: POP
33499: POP
// end ;
33500: GO 33449
33502: POP
33503: POP
// end ;
33504: LD_VAR 0 1
33508: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33509: LD_INT 0
33511: PPUSH
33512: PPUSH
33513: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33514: LD_ADDR_VAR 0 2
33518: PUSH
33519: LD_INT 22
33521: PUSH
33522: LD_OWVAR 2
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 21
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PPUSH
33545: CALL_OW 69
33549: PUSH
33550: FOR_IN
33551: IFFALSE 33592
// begin for j := 1 to 4 do
33553: LD_ADDR_VAR 0 3
33557: PUSH
33558: DOUBLE
33559: LD_INT 1
33561: DEC
33562: ST_TO_ADDR
33563: LD_INT 4
33565: PUSH
33566: FOR_TO
33567: IFFALSE 33588
// SetSkill ( i , j , 10 ) ;
33569: LD_VAR 0 2
33573: PPUSH
33574: LD_VAR 0 3
33578: PPUSH
33579: LD_INT 10
33581: PPUSH
33582: CALL_OW 237
33586: GO 33566
33588: POP
33589: POP
// end ;
33590: GO 33550
33592: POP
33593: POP
// end ;
33594: LD_VAR 0 1
33598: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33599: LD_INT 0
33601: PPUSH
// uc_side := your_side ;
33602: LD_ADDR_OWVAR 20
33606: PUSH
33607: LD_OWVAR 2
33611: ST_TO_ADDR
// uc_nation := nation ;
33612: LD_ADDR_OWVAR 21
33616: PUSH
33617: LD_VAR 0 1
33621: ST_TO_ADDR
// InitHc ;
33622: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33626: LD_INT 0
33628: PPUSH
33629: LD_VAR 0 2
33633: PPUSH
33634: LD_VAR 0 3
33638: PPUSH
33639: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33643: LD_VAR 0 4
33647: PPUSH
33648: LD_VAR 0 5
33652: PPUSH
33653: CALL_OW 428
33657: PUSH
33658: LD_INT 0
33660: EQUAL
33661: IFFALSE 33685
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33663: CALL_OW 44
33667: PPUSH
33668: LD_VAR 0 4
33672: PPUSH
33673: LD_VAR 0 5
33677: PPUSH
33678: LD_INT 1
33680: PPUSH
33681: CALL_OW 48
// end ;
33685: LD_VAR 0 6
33689: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33690: LD_INT 0
33692: PPUSH
33693: PPUSH
// uc_side := your_side ;
33694: LD_ADDR_OWVAR 20
33698: PUSH
33699: LD_OWVAR 2
33703: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33704: LD_VAR 0 1
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 4
33720: PUSH
33721: LD_INT 5
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: IN
33731: IFFALSE 33743
// uc_nation := nation_american else
33733: LD_ADDR_OWVAR 21
33737: PUSH
33738: LD_INT 1
33740: ST_TO_ADDR
33741: GO 33786
// if chassis in [ 11 , 12 , 13 , 14 ] then
33743: LD_VAR 0 1
33747: PUSH
33748: LD_INT 11
33750: PUSH
33751: LD_INT 12
33753: PUSH
33754: LD_INT 13
33756: PUSH
33757: LD_INT 14
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: IN
33766: IFFALSE 33778
// uc_nation := nation_arabian else
33768: LD_ADDR_OWVAR 21
33772: PUSH
33773: LD_INT 2
33775: ST_TO_ADDR
33776: GO 33786
// uc_nation := nation_russian ;
33778: LD_ADDR_OWVAR 21
33782: PUSH
33783: LD_INT 3
33785: ST_TO_ADDR
// vc_chassis := chassis ;
33786: LD_ADDR_OWVAR 37
33790: PUSH
33791: LD_VAR 0 1
33795: ST_TO_ADDR
// vc_engine := engine ;
33796: LD_ADDR_OWVAR 39
33800: PUSH
33801: LD_VAR 0 2
33805: ST_TO_ADDR
// vc_control := control ;
33806: LD_ADDR_OWVAR 38
33810: PUSH
33811: LD_VAR 0 3
33815: ST_TO_ADDR
// vc_weapon := weapon ;
33816: LD_ADDR_OWVAR 40
33820: PUSH
33821: LD_VAR 0 4
33825: ST_TO_ADDR
// un := CreateVehicle ;
33826: LD_ADDR_VAR 0 8
33830: PUSH
33831: CALL_OW 45
33835: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33836: LD_VAR 0 8
33840: PPUSH
33841: LD_INT 0
33843: PPUSH
33844: LD_INT 5
33846: PPUSH
33847: CALL_OW 12
33851: PPUSH
33852: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33856: LD_VAR 0 8
33860: PPUSH
33861: LD_VAR 0 5
33865: PPUSH
33866: LD_VAR 0 6
33870: PPUSH
33871: LD_INT 1
33873: PPUSH
33874: CALL_OW 48
// end ;
33878: LD_VAR 0 7
33882: RET
// export hInvincible ; every 1 do
33883: GO 33885
33885: DISABLE
// hInvincible := [ ] ;
33886: LD_ADDR_EXP 107
33890: PUSH
33891: EMPTY
33892: ST_TO_ADDR
33893: END
// every 10 do var i ;
33894: GO 33896
33896: DISABLE
33897: LD_INT 0
33899: PPUSH
// begin enable ;
33900: ENABLE
// if not hInvincible then
33901: LD_EXP 107
33905: NOT
33906: IFFALSE 33910
// exit ;
33908: GO 33954
// for i in hInvincible do
33910: LD_ADDR_VAR 0 1
33914: PUSH
33915: LD_EXP 107
33919: PUSH
33920: FOR_IN
33921: IFFALSE 33952
// if GetLives ( i ) < 1000 then
33923: LD_VAR 0 1
33927: PPUSH
33928: CALL_OW 256
33932: PUSH
33933: LD_INT 1000
33935: LESS
33936: IFFALSE 33950
// SetLives ( i , 1000 ) ;
33938: LD_VAR 0 1
33942: PPUSH
33943: LD_INT 1000
33945: PPUSH
33946: CALL_OW 234
33950: GO 33920
33952: POP
33953: POP
// end ;
33954: PPOPN 1
33956: END
// export function hHackInvincible ; var i ; begin
33957: LD_INT 0
33959: PPUSH
33960: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33961: LD_ADDR_VAR 0 2
33965: PUSH
33966: LD_INT 2
33968: PUSH
33969: LD_INT 21
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 21
33981: PUSH
33982: LD_INT 2
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: PPUSH
33994: CALL_OW 69
33998: PUSH
33999: FOR_IN
34000: IFFALSE 34061
// if IsSelected ( i ) then
34002: LD_VAR 0 2
34006: PPUSH
34007: CALL_OW 306
34011: IFFALSE 34059
// begin if i in hInvincible then
34013: LD_VAR 0 2
34017: PUSH
34018: LD_EXP 107
34022: IN
34023: IFFALSE 34043
// hInvincible := hInvincible diff i else
34025: LD_ADDR_EXP 107
34029: PUSH
34030: LD_EXP 107
34034: PUSH
34035: LD_VAR 0 2
34039: DIFF
34040: ST_TO_ADDR
34041: GO 34059
// hInvincible := hInvincible union i ;
34043: LD_ADDR_EXP 107
34047: PUSH
34048: LD_EXP 107
34052: PUSH
34053: LD_VAR 0 2
34057: UNION
34058: ST_TO_ADDR
// end ;
34059: GO 33999
34061: POP
34062: POP
// end ;
34063: LD_VAR 0 1
34067: RET
// export function hHackInvisible ; var i , j ; begin
34068: LD_INT 0
34070: PPUSH
34071: PPUSH
34072: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34073: LD_ADDR_VAR 0 2
34077: PUSH
34078: LD_INT 21
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PPUSH
34088: CALL_OW 69
34092: PUSH
34093: FOR_IN
34094: IFFALSE 34118
// if IsSelected ( i ) then
34096: LD_VAR 0 2
34100: PPUSH
34101: CALL_OW 306
34105: IFFALSE 34116
// ComForceInvisible ( i ) ;
34107: LD_VAR 0 2
34111: PPUSH
34112: CALL_OW 496
34116: GO 34093
34118: POP
34119: POP
// end ;
34120: LD_VAR 0 1
34124: RET
// export function hHackChangeYourSide ; begin
34125: LD_INT 0
34127: PPUSH
// if your_side = 8 then
34128: LD_OWVAR 2
34132: PUSH
34133: LD_INT 8
34135: EQUAL
34136: IFFALSE 34148
// your_side := 0 else
34138: LD_ADDR_OWVAR 2
34142: PUSH
34143: LD_INT 0
34145: ST_TO_ADDR
34146: GO 34162
// your_side := your_side + 1 ;
34148: LD_ADDR_OWVAR 2
34152: PUSH
34153: LD_OWVAR 2
34157: PUSH
34158: LD_INT 1
34160: PLUS
34161: ST_TO_ADDR
// end ;
34162: LD_VAR 0 1
34166: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34167: LD_INT 0
34169: PPUSH
34170: PPUSH
34171: PPUSH
// for i in all_units do
34172: LD_ADDR_VAR 0 2
34176: PUSH
34177: LD_OWVAR 3
34181: PUSH
34182: FOR_IN
34183: IFFALSE 34261
// if IsSelected ( i ) then
34185: LD_VAR 0 2
34189: PPUSH
34190: CALL_OW 306
34194: IFFALSE 34259
// begin j := GetSide ( i ) ;
34196: LD_ADDR_VAR 0 3
34200: PUSH
34201: LD_VAR 0 2
34205: PPUSH
34206: CALL_OW 255
34210: ST_TO_ADDR
// if j = 8 then
34211: LD_VAR 0 3
34215: PUSH
34216: LD_INT 8
34218: EQUAL
34219: IFFALSE 34231
// j := 0 else
34221: LD_ADDR_VAR 0 3
34225: PUSH
34226: LD_INT 0
34228: ST_TO_ADDR
34229: GO 34245
// j := j + 1 ;
34231: LD_ADDR_VAR 0 3
34235: PUSH
34236: LD_VAR 0 3
34240: PUSH
34241: LD_INT 1
34243: PLUS
34244: ST_TO_ADDR
// SetSide ( i , j ) ;
34245: LD_VAR 0 2
34249: PPUSH
34250: LD_VAR 0 3
34254: PPUSH
34255: CALL_OW 235
// end ;
34259: GO 34182
34261: POP
34262: POP
// end ;
34263: LD_VAR 0 1
34267: RET
// export function hHackFog ; begin
34268: LD_INT 0
34270: PPUSH
// FogOff ( true ) ;
34271: LD_INT 1
34273: PPUSH
34274: CALL_OW 344
// end ;
34278: LD_VAR 0 1
34282: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34283: LD_INT 0
34285: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34286: LD_VAR 0 1
34290: PPUSH
34291: LD_VAR 0 2
34295: PPUSH
34296: LD_VAR 0 3
34300: PPUSH
34301: LD_INT 1
34303: PPUSH
34304: LD_INT 1
34306: PPUSH
34307: CALL_OW 483
// CenterOnXY ( x , y ) ;
34311: LD_VAR 0 2
34315: PPUSH
34316: LD_VAR 0 3
34320: PPUSH
34321: CALL_OW 84
// end ;
34325: LD_VAR 0 4
34329: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34330: LD_INT 0
34332: PPUSH
34333: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34334: LD_VAR 0 1
34338: NOT
34339: PUSH
34340: LD_VAR 0 2
34344: PPUSH
34345: LD_VAR 0 3
34349: PPUSH
34350: CALL_OW 488
34354: NOT
34355: OR
34356: PUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 266
34366: PUSH
34367: LD_INT 3
34369: NONEQUAL
34370: PUSH
34371: LD_VAR 0 1
34375: PPUSH
34376: CALL_OW 247
34380: PUSH
34381: LD_INT 1
34383: EQUAL
34384: NOT
34385: AND
34386: OR
34387: IFFALSE 34391
// exit ;
34389: GO 34540
// if GetType ( factory ) = unit_human then
34391: LD_VAR 0 1
34395: PPUSH
34396: CALL_OW 247
34400: PUSH
34401: LD_INT 1
34403: EQUAL
34404: IFFALSE 34421
// factory := IsInUnit ( factory ) ;
34406: LD_ADDR_VAR 0 1
34410: PUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: CALL_OW 310
34420: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL_OW 266
34430: PUSH
34431: LD_INT 3
34433: NONEQUAL
34434: IFFALSE 34438
// exit ;
34436: GO 34540
// if HexInfo ( x , y ) = factory then
34438: LD_VAR 0 2
34442: PPUSH
34443: LD_VAR 0 3
34447: PPUSH
34448: CALL_OW 428
34452: PUSH
34453: LD_VAR 0 1
34457: EQUAL
34458: IFFALSE 34485
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34460: LD_ADDR_EXP 108
34464: PUSH
34465: LD_EXP 108
34469: PPUSH
34470: LD_VAR 0 1
34474: PPUSH
34475: LD_INT 0
34477: PPUSH
34478: CALL_OW 1
34482: ST_TO_ADDR
34483: GO 34536
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34485: LD_ADDR_EXP 108
34489: PUSH
34490: LD_EXP 108
34494: PPUSH
34495: LD_VAR 0 1
34499: PPUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 255
34509: PUSH
34510: LD_VAR 0 1
34514: PUSH
34515: LD_VAR 0 2
34519: PUSH
34520: LD_VAR 0 3
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: PPUSH
34531: CALL_OW 1
34535: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34536: CALL 34545 0 0
// end ;
34540: LD_VAR 0 4
34544: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34545: LD_INT 0
34547: PPUSH
34548: PPUSH
34549: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34550: LD_STRING resetFactoryWaypoint();
34552: PPUSH
34553: CALL_OW 559
// if factoryWaypoints then
34557: LD_EXP 108
34561: IFFALSE 34687
// begin list := PrepareArray ( factoryWaypoints ) ;
34563: LD_ADDR_VAR 0 3
34567: PUSH
34568: LD_EXP 108
34572: PPUSH
34573: CALL 81137 0 1
34577: ST_TO_ADDR
// for i := 1 to list do
34578: LD_ADDR_VAR 0 2
34582: PUSH
34583: DOUBLE
34584: LD_INT 1
34586: DEC
34587: ST_TO_ADDR
34588: LD_VAR 0 3
34592: PUSH
34593: FOR_TO
34594: IFFALSE 34685
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34596: LD_STRING setFactoryWaypointXY(
34598: PUSH
34599: LD_VAR 0 3
34603: PUSH
34604: LD_VAR 0 2
34608: ARRAY
34609: PUSH
34610: LD_INT 1
34612: ARRAY
34613: STR
34614: PUSH
34615: LD_STRING ,
34617: STR
34618: PUSH
34619: LD_VAR 0 3
34623: PUSH
34624: LD_VAR 0 2
34628: ARRAY
34629: PUSH
34630: LD_INT 2
34632: ARRAY
34633: STR
34634: PUSH
34635: LD_STRING ,
34637: STR
34638: PUSH
34639: LD_VAR 0 3
34643: PUSH
34644: LD_VAR 0 2
34648: ARRAY
34649: PUSH
34650: LD_INT 3
34652: ARRAY
34653: STR
34654: PUSH
34655: LD_STRING ,
34657: STR
34658: PUSH
34659: LD_VAR 0 3
34663: PUSH
34664: LD_VAR 0 2
34668: ARRAY
34669: PUSH
34670: LD_INT 4
34672: ARRAY
34673: STR
34674: PUSH
34675: LD_STRING )
34677: STR
34678: PPUSH
34679: CALL_OW 559
34683: GO 34593
34685: POP
34686: POP
// end ; end ;
34687: LD_VAR 0 1
34691: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34692: LD_INT 0
34694: PPUSH
// if HexInfo ( x , y ) = warehouse then
34695: LD_VAR 0 2
34699: PPUSH
34700: LD_VAR 0 3
34704: PPUSH
34705: CALL_OW 428
34709: PUSH
34710: LD_VAR 0 1
34714: EQUAL
34715: IFFALSE 34742
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34717: LD_ADDR_EXP 109
34721: PUSH
34722: LD_EXP 109
34726: PPUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: LD_INT 0
34734: PPUSH
34735: CALL_OW 1
34739: ST_TO_ADDR
34740: GO 34793
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34742: LD_ADDR_EXP 109
34746: PUSH
34747: LD_EXP 109
34751: PPUSH
34752: LD_VAR 0 1
34756: PPUSH
34757: LD_VAR 0 1
34761: PPUSH
34762: CALL_OW 255
34766: PUSH
34767: LD_VAR 0 1
34771: PUSH
34772: LD_VAR 0 2
34776: PUSH
34777: LD_VAR 0 3
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: PPUSH
34788: CALL_OW 1
34792: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34793: CALL 34802 0 0
// end ;
34797: LD_VAR 0 4
34801: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34802: LD_INT 0
34804: PPUSH
34805: PPUSH
34806: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34807: LD_STRING resetWarehouseGatheringPoints();
34809: PPUSH
34810: CALL_OW 559
// if warehouseGatheringPoints then
34814: LD_EXP 109
34818: IFFALSE 34944
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34820: LD_ADDR_VAR 0 3
34824: PUSH
34825: LD_EXP 109
34829: PPUSH
34830: CALL 81137 0 1
34834: ST_TO_ADDR
// for i := 1 to list do
34835: LD_ADDR_VAR 0 2
34839: PUSH
34840: DOUBLE
34841: LD_INT 1
34843: DEC
34844: ST_TO_ADDR
34845: LD_VAR 0 3
34849: PUSH
34850: FOR_TO
34851: IFFALSE 34942
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34853: LD_STRING setWarehouseGatheringPointXY(
34855: PUSH
34856: LD_VAR 0 3
34860: PUSH
34861: LD_VAR 0 2
34865: ARRAY
34866: PUSH
34867: LD_INT 1
34869: ARRAY
34870: STR
34871: PUSH
34872: LD_STRING ,
34874: STR
34875: PUSH
34876: LD_VAR 0 3
34880: PUSH
34881: LD_VAR 0 2
34885: ARRAY
34886: PUSH
34887: LD_INT 2
34889: ARRAY
34890: STR
34891: PUSH
34892: LD_STRING ,
34894: STR
34895: PUSH
34896: LD_VAR 0 3
34900: PUSH
34901: LD_VAR 0 2
34905: ARRAY
34906: PUSH
34907: LD_INT 3
34909: ARRAY
34910: STR
34911: PUSH
34912: LD_STRING ,
34914: STR
34915: PUSH
34916: LD_VAR 0 3
34920: PUSH
34921: LD_VAR 0 2
34925: ARRAY
34926: PUSH
34927: LD_INT 4
34929: ARRAY
34930: STR
34931: PUSH
34932: LD_STRING )
34934: STR
34935: PPUSH
34936: CALL_OW 559
34940: GO 34850
34942: POP
34943: POP
// end ; end ;
34944: LD_VAR 0 1
34948: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34949: LD_EXP 109
34953: IFFALSE 35638
34955: GO 34957
34957: DISABLE
34958: LD_INT 0
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
// begin enable ;
34969: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_EXP 109
34979: PPUSH
34980: CALL 81137 0 1
34984: ST_TO_ADDR
// if not list then
34985: LD_VAR 0 3
34989: NOT
34990: IFFALSE 34994
// exit ;
34992: GO 35638
// for i := 1 to list do
34994: LD_ADDR_VAR 0 1
34998: PUSH
34999: DOUBLE
35000: LD_INT 1
35002: DEC
35003: ST_TO_ADDR
35004: LD_VAR 0 3
35008: PUSH
35009: FOR_TO
35010: IFFALSE 35636
// begin depot := list [ i ] [ 2 ] ;
35012: LD_ADDR_VAR 0 8
35016: PUSH
35017: LD_VAR 0 3
35021: PUSH
35022: LD_VAR 0 1
35026: ARRAY
35027: PUSH
35028: LD_INT 2
35030: ARRAY
35031: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35032: LD_ADDR_VAR 0 5
35036: PUSH
35037: LD_VAR 0 3
35041: PUSH
35042: LD_VAR 0 1
35046: ARRAY
35047: PUSH
35048: LD_INT 1
35050: ARRAY
35051: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35052: LD_VAR 0 8
35056: PPUSH
35057: CALL_OW 301
35061: PUSH
35062: LD_VAR 0 5
35066: PUSH
35067: LD_VAR 0 8
35071: PPUSH
35072: CALL_OW 255
35076: NONEQUAL
35077: OR
35078: IFFALSE 35107
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35080: LD_ADDR_EXP 109
35084: PUSH
35085: LD_EXP 109
35089: PPUSH
35090: LD_VAR 0 8
35094: PPUSH
35095: LD_INT 0
35097: PPUSH
35098: CALL_OW 1
35102: ST_TO_ADDR
// exit ;
35103: POP
35104: POP
35105: GO 35638
// end ; x := list [ i ] [ 3 ] ;
35107: LD_ADDR_VAR 0 6
35111: PUSH
35112: LD_VAR 0 3
35116: PUSH
35117: LD_VAR 0 1
35121: ARRAY
35122: PUSH
35123: LD_INT 3
35125: ARRAY
35126: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35127: LD_ADDR_VAR 0 7
35131: PUSH
35132: LD_VAR 0 3
35136: PUSH
35137: LD_VAR 0 1
35141: ARRAY
35142: PUSH
35143: LD_INT 4
35145: ARRAY
35146: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35147: LD_ADDR_VAR 0 9
35151: PUSH
35152: LD_VAR 0 6
35156: PPUSH
35157: LD_VAR 0 7
35161: PPUSH
35162: LD_INT 16
35164: PPUSH
35165: CALL 79725 0 3
35169: ST_TO_ADDR
// if not cratesNearbyPoint then
35170: LD_VAR 0 9
35174: NOT
35175: IFFALSE 35181
// exit ;
35177: POP
35178: POP
35179: GO 35638
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35181: LD_ADDR_VAR 0 4
35185: PUSH
35186: LD_INT 22
35188: PUSH
35189: LD_VAR 0 5
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: LD_INT 60
35203: PUSH
35204: EMPTY
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 91
35213: PUSH
35214: LD_VAR 0 8
35218: PUSH
35219: LD_INT 6
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 25
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 25
35242: PUSH
35243: LD_INT 16
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: LIST
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: PPUSH
35261: CALL_OW 69
35265: PUSH
35266: LD_VAR 0 8
35270: PPUSH
35271: CALL_OW 313
35275: PPUSH
35276: LD_INT 3
35278: PUSH
35279: LD_INT 60
35281: PUSH
35282: EMPTY
35283: LIST
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: LD_INT 25
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 25
35304: PUSH
35305: LD_INT 16
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PPUSH
35321: CALL_OW 72
35325: UNION
35326: ST_TO_ADDR
// if tmp then
35327: LD_VAR 0 4
35331: IFFALSE 35411
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35333: LD_ADDR_VAR 0 4
35337: PUSH
35338: LD_VAR 0 4
35342: PPUSH
35343: LD_INT 3
35345: PPUSH
35346: CALL 77694 0 2
35350: ST_TO_ADDR
// for j in tmp do
35351: LD_ADDR_VAR 0 2
35355: PUSH
35356: LD_VAR 0 4
35360: PUSH
35361: FOR_IN
35362: IFFALSE 35405
// begin if IsInUnit ( j ) then
35364: LD_VAR 0 2
35368: PPUSH
35369: CALL_OW 310
35373: IFFALSE 35384
// ComExit ( j ) ;
35375: LD_VAR 0 2
35379: PPUSH
35380: CALL 77777 0 1
// AddComCollect ( j , x , y ) ;
35384: LD_VAR 0 2
35388: PPUSH
35389: LD_VAR 0 6
35393: PPUSH
35394: LD_VAR 0 7
35398: PPUSH
35399: CALL_OW 177
// end ;
35403: GO 35361
35405: POP
35406: POP
// exit ;
35407: POP
35408: POP
35409: GO 35638
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35411: LD_ADDR_VAR 0 4
35415: PUSH
35416: LD_INT 22
35418: PUSH
35419: LD_VAR 0 5
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 91
35430: PUSH
35431: LD_VAR 0 8
35435: PUSH
35436: LD_INT 8
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: LD_INT 34
35449: PUSH
35450: LD_INT 12
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 34
35459: PUSH
35460: LD_INT 51
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 34
35469: PUSH
35470: LD_INT 32
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 34
35479: PUSH
35480: LD_INT 89
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 69
35503: ST_TO_ADDR
// if tmp then
35504: LD_VAR 0 4
35508: IFFALSE 35634
// begin for j in tmp do
35510: LD_ADDR_VAR 0 2
35514: PUSH
35515: LD_VAR 0 4
35519: PUSH
35520: FOR_IN
35521: IFFALSE 35632
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35523: LD_VAR 0 2
35527: PPUSH
35528: CALL_OW 262
35532: PUSH
35533: LD_INT 3
35535: EQUAL
35536: PUSH
35537: LD_VAR 0 2
35541: PPUSH
35542: CALL_OW 261
35546: PUSH
35547: LD_INT 20
35549: GREATER
35550: OR
35551: PUSH
35552: LD_VAR 0 2
35556: PPUSH
35557: CALL_OW 314
35561: NOT
35562: AND
35563: PUSH
35564: LD_VAR 0 2
35568: PPUSH
35569: CALL_OW 263
35573: PUSH
35574: LD_INT 1
35576: NONEQUAL
35577: PUSH
35578: LD_VAR 0 2
35582: PPUSH
35583: CALL_OW 311
35587: OR
35588: AND
35589: IFFALSE 35630
// begin ComCollect ( j , x , y ) ;
35591: LD_VAR 0 2
35595: PPUSH
35596: LD_VAR 0 6
35600: PPUSH
35601: LD_VAR 0 7
35605: PPUSH
35606: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35610: LD_VAR 0 2
35614: PPUSH
35615: LD_VAR 0 8
35619: PPUSH
35620: CALL_OW 172
// exit ;
35624: POP
35625: POP
35626: POP
35627: POP
35628: GO 35638
// end ;
35630: GO 35520
35632: POP
35633: POP
// end ; end ;
35634: GO 35009
35636: POP
35637: POP
// end ; end_of_file
35638: PPOPN 9
35640: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35641: LD_INT 0
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 264
35656: PUSH
35657: LD_INT 91
35659: EQUAL
35660: IFFALSE 35732
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35662: LD_INT 68
35664: PPUSH
35665: LD_VAR 0 1
35669: PPUSH
35670: CALL_OW 255
35674: PPUSH
35675: CALL_OW 321
35679: PUSH
35680: LD_INT 2
35682: EQUAL
35683: IFFALSE 35695
// eff := 70 else
35685: LD_ADDR_VAR 0 4
35689: PUSH
35690: LD_INT 70
35692: ST_TO_ADDR
35693: GO 35703
// eff := 30 ;
35695: LD_ADDR_VAR 0 4
35699: PUSH
35700: LD_INT 30
35702: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35703: LD_VAR 0 1
35707: PPUSH
35708: CALL_OW 250
35712: PPUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 251
35722: PPUSH
35723: LD_VAR 0 4
35727: PPUSH
35728: CALL_OW 495
// end ; end ;
35732: LD_VAR 0 2
35736: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35737: LD_INT 0
35739: PPUSH
// end ;
35740: LD_VAR 0 4
35744: RET
// export function SOS_Command ( cmd ) ; begin
35745: LD_INT 0
35747: PPUSH
// end ;
35748: LD_VAR 0 2
35752: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35753: LD_INT 0
35755: PPUSH
// end ;
35756: LD_VAR 0 6
35760: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35761: LD_INT 0
35763: PPUSH
35764: PPUSH
// if not vehicle or not factory then
35765: LD_VAR 0 1
35769: NOT
35770: PUSH
35771: LD_VAR 0 2
35775: NOT
35776: OR
35777: IFFALSE 35781
// exit ;
35779: GO 36012
// if factoryWaypoints >= factory then
35781: LD_EXP 108
35785: PUSH
35786: LD_VAR 0 2
35790: GREATEREQUAL
35791: IFFALSE 36012
// if factoryWaypoints [ factory ] then
35793: LD_EXP 108
35797: PUSH
35798: LD_VAR 0 2
35802: ARRAY
35803: IFFALSE 36012
// begin if GetControl ( vehicle ) = control_manual then
35805: LD_VAR 0 1
35809: PPUSH
35810: CALL_OW 263
35814: PUSH
35815: LD_INT 1
35817: EQUAL
35818: IFFALSE 35899
// begin driver := IsDrivenBy ( vehicle ) ;
35820: LD_ADDR_VAR 0 4
35824: PUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: CALL_OW 311
35834: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35835: LD_VAR 0 4
35839: PPUSH
35840: LD_EXP 108
35844: PUSH
35845: LD_VAR 0 2
35849: ARRAY
35850: PUSH
35851: LD_INT 3
35853: ARRAY
35854: PPUSH
35855: LD_EXP 108
35859: PUSH
35860: LD_VAR 0 2
35864: ARRAY
35865: PUSH
35866: LD_INT 4
35868: ARRAY
35869: PPUSH
35870: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35874: LD_VAR 0 4
35878: PPUSH
35879: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35883: LD_VAR 0 4
35887: PPUSH
35888: LD_VAR 0 2
35892: PPUSH
35893: CALL_OW 180
// end else
35897: GO 36012
// if GetControl ( vehicle ) = control_remote then
35899: LD_VAR 0 1
35903: PPUSH
35904: CALL_OW 263
35908: PUSH
35909: LD_INT 2
35911: EQUAL
35912: IFFALSE 35973
// begin wait ( 0 0$2 ) ;
35914: LD_INT 70
35916: PPUSH
35917: CALL_OW 67
// if Connect ( vehicle ) then
35921: LD_VAR 0 1
35925: PPUSH
35926: CALL 48036 0 1
35930: IFFALSE 35971
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35932: LD_VAR 0 1
35936: PPUSH
35937: LD_EXP 108
35941: PUSH
35942: LD_VAR 0 2
35946: ARRAY
35947: PUSH
35948: LD_INT 3
35950: ARRAY
35951: PPUSH
35952: LD_EXP 108
35956: PUSH
35957: LD_VAR 0 2
35961: ARRAY
35962: PUSH
35963: LD_INT 4
35965: ARRAY
35966: PPUSH
35967: CALL_OW 171
// end else
35971: GO 36012
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35973: LD_VAR 0 1
35977: PPUSH
35978: LD_EXP 108
35982: PUSH
35983: LD_VAR 0 2
35987: ARRAY
35988: PUSH
35989: LD_INT 3
35991: ARRAY
35992: PPUSH
35993: LD_EXP 108
35997: PUSH
35998: LD_VAR 0 2
36002: ARRAY
36003: PUSH
36004: LD_INT 4
36006: ARRAY
36007: PPUSH
36008: CALL_OW 171
// end ; end ;
36012: LD_VAR 0 3
36016: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36017: LD_INT 0
36019: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36020: LD_VAR 0 1
36024: PUSH
36025: LD_INT 250
36027: EQUAL
36028: PUSH
36029: LD_VAR 0 2
36033: PPUSH
36034: CALL_OW 264
36038: PUSH
36039: LD_INT 81
36041: EQUAL
36042: AND
36043: IFFALSE 36064
// MinerPlaceMine ( unit , x , y ) ;
36045: LD_VAR 0 2
36049: PPUSH
36050: LD_VAR 0 4
36054: PPUSH
36055: LD_VAR 0 5
36059: PPUSH
36060: CALL 38449 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36064: LD_VAR 0 1
36068: PUSH
36069: LD_INT 251
36071: EQUAL
36072: PUSH
36073: LD_VAR 0 2
36077: PPUSH
36078: CALL_OW 264
36082: PUSH
36083: LD_INT 81
36085: EQUAL
36086: AND
36087: IFFALSE 36108
// MinerDetonateMine ( unit , x , y ) ;
36089: LD_VAR 0 2
36093: PPUSH
36094: LD_VAR 0 4
36098: PPUSH
36099: LD_VAR 0 5
36103: PPUSH
36104: CALL 38724 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36108: LD_VAR 0 1
36112: PUSH
36113: LD_INT 252
36115: EQUAL
36116: PUSH
36117: LD_VAR 0 2
36121: PPUSH
36122: CALL_OW 264
36126: PUSH
36127: LD_INT 81
36129: EQUAL
36130: AND
36131: IFFALSE 36152
// MinerCreateMinefield ( unit , x , y ) ;
36133: LD_VAR 0 2
36137: PPUSH
36138: LD_VAR 0 4
36142: PPUSH
36143: LD_VAR 0 5
36147: PPUSH
36148: CALL 39141 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36152: LD_VAR 0 1
36156: PUSH
36157: LD_INT 253
36159: EQUAL
36160: PUSH
36161: LD_VAR 0 2
36165: PPUSH
36166: CALL_OW 257
36170: PUSH
36171: LD_INT 5
36173: EQUAL
36174: AND
36175: IFFALSE 36196
// ComBinocular ( unit , x , y ) ;
36177: LD_VAR 0 2
36181: PPUSH
36182: LD_VAR 0 4
36186: PPUSH
36187: LD_VAR 0 5
36191: PPUSH
36192: CALL 39510 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36196: LD_VAR 0 1
36200: PUSH
36201: LD_INT 254
36203: EQUAL
36204: PUSH
36205: LD_VAR 0 2
36209: PPUSH
36210: CALL_OW 264
36214: PUSH
36215: LD_INT 99
36217: EQUAL
36218: AND
36219: PUSH
36220: LD_VAR 0 3
36224: PPUSH
36225: CALL_OW 263
36229: PUSH
36230: LD_INT 3
36232: EQUAL
36233: AND
36234: IFFALSE 36250
// HackDestroyVehicle ( unit , selectedUnit ) ;
36236: LD_VAR 0 2
36240: PPUSH
36241: LD_VAR 0 3
36245: PPUSH
36246: CALL 37813 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36250: LD_VAR 0 1
36254: PUSH
36255: LD_INT 255
36257: EQUAL
36258: PUSH
36259: LD_VAR 0 2
36263: PPUSH
36264: CALL_OW 264
36268: PUSH
36269: LD_INT 14
36271: PUSH
36272: LD_INT 53
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: IN
36279: AND
36280: PUSH
36281: LD_VAR 0 4
36285: PPUSH
36286: LD_VAR 0 5
36290: PPUSH
36291: CALL_OW 488
36295: AND
36296: IFFALSE 36320
// CutTreeXYR ( unit , x , y , 12 ) ;
36298: LD_VAR 0 2
36302: PPUSH
36303: LD_VAR 0 4
36307: PPUSH
36308: LD_VAR 0 5
36312: PPUSH
36313: LD_INT 12
36315: PPUSH
36316: CALL 36383 0 4
// if cmd = 256 then
36320: LD_VAR 0 1
36324: PUSH
36325: LD_INT 256
36327: EQUAL
36328: IFFALSE 36349
// SetFactoryWaypoint ( unit , x , y ) ;
36330: LD_VAR 0 2
36334: PPUSH
36335: LD_VAR 0 4
36339: PPUSH
36340: LD_VAR 0 5
36344: PPUSH
36345: CALL 34330 0 3
// if cmd = 257 then
36349: LD_VAR 0 1
36353: PUSH
36354: LD_INT 257
36356: EQUAL
36357: IFFALSE 36378
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36359: LD_VAR 0 2
36363: PPUSH
36364: LD_VAR 0 4
36368: PPUSH
36369: LD_VAR 0 5
36373: PPUSH
36374: CALL 34692 0 3
// end ;
36378: LD_VAR 0 6
36382: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36394: LD_VAR 0 1
36398: NOT
36399: PUSH
36400: LD_VAR 0 2
36404: PPUSH
36405: LD_VAR 0 3
36409: PPUSH
36410: CALL_OW 488
36414: NOT
36415: OR
36416: PUSH
36417: LD_VAR 0 4
36421: NOT
36422: OR
36423: IFFALSE 36427
// exit ;
36425: GO 36767
// list := [ ] ;
36427: LD_ADDR_VAR 0 13
36431: PUSH
36432: EMPTY
36433: ST_TO_ADDR
// if x - r < 0 then
36434: LD_VAR 0 2
36438: PUSH
36439: LD_VAR 0 4
36443: MINUS
36444: PUSH
36445: LD_INT 0
36447: LESS
36448: IFFALSE 36460
// min_x := 0 else
36450: LD_ADDR_VAR 0 7
36454: PUSH
36455: LD_INT 0
36457: ST_TO_ADDR
36458: GO 36476
// min_x := x - r ;
36460: LD_ADDR_VAR 0 7
36464: PUSH
36465: LD_VAR 0 2
36469: PUSH
36470: LD_VAR 0 4
36474: MINUS
36475: ST_TO_ADDR
// if y - r < 0 then
36476: LD_VAR 0 3
36480: PUSH
36481: LD_VAR 0 4
36485: MINUS
36486: PUSH
36487: LD_INT 0
36489: LESS
36490: IFFALSE 36502
// min_y := 0 else
36492: LD_ADDR_VAR 0 8
36496: PUSH
36497: LD_INT 0
36499: ST_TO_ADDR
36500: GO 36518
// min_y := y - r ;
36502: LD_ADDR_VAR 0 8
36506: PUSH
36507: LD_VAR 0 3
36511: PUSH
36512: LD_VAR 0 4
36516: MINUS
36517: ST_TO_ADDR
// max_x := x + r ;
36518: LD_ADDR_VAR 0 9
36522: PUSH
36523: LD_VAR 0 2
36527: PUSH
36528: LD_VAR 0 4
36532: PLUS
36533: ST_TO_ADDR
// max_y := y + r ;
36534: LD_ADDR_VAR 0 10
36538: PUSH
36539: LD_VAR 0 3
36543: PUSH
36544: LD_VAR 0 4
36548: PLUS
36549: ST_TO_ADDR
// for _x = min_x to max_x do
36550: LD_ADDR_VAR 0 11
36554: PUSH
36555: DOUBLE
36556: LD_VAR 0 7
36560: DEC
36561: ST_TO_ADDR
36562: LD_VAR 0 9
36566: PUSH
36567: FOR_TO
36568: IFFALSE 36685
// for _y = min_y to max_y do
36570: LD_ADDR_VAR 0 12
36574: PUSH
36575: DOUBLE
36576: LD_VAR 0 8
36580: DEC
36581: ST_TO_ADDR
36582: LD_VAR 0 10
36586: PUSH
36587: FOR_TO
36588: IFFALSE 36681
// begin if not ValidHex ( _x , _y ) then
36590: LD_VAR 0 11
36594: PPUSH
36595: LD_VAR 0 12
36599: PPUSH
36600: CALL_OW 488
36604: NOT
36605: IFFALSE 36609
// continue ;
36607: GO 36587
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36609: LD_VAR 0 11
36613: PPUSH
36614: LD_VAR 0 12
36618: PPUSH
36619: CALL_OW 351
36623: PUSH
36624: LD_VAR 0 11
36628: PPUSH
36629: LD_VAR 0 12
36633: PPUSH
36634: CALL_OW 554
36638: AND
36639: IFFALSE 36679
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36641: LD_ADDR_VAR 0 13
36645: PUSH
36646: LD_VAR 0 13
36650: PPUSH
36651: LD_VAR 0 13
36655: PUSH
36656: LD_INT 1
36658: PLUS
36659: PPUSH
36660: LD_VAR 0 11
36664: PUSH
36665: LD_VAR 0 12
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PPUSH
36674: CALL_OW 2
36678: ST_TO_ADDR
// end ;
36679: GO 36587
36681: POP
36682: POP
36683: GO 36567
36685: POP
36686: POP
// if not list then
36687: LD_VAR 0 13
36691: NOT
36692: IFFALSE 36696
// exit ;
36694: GO 36767
// for i in list do
36696: LD_ADDR_VAR 0 6
36700: PUSH
36701: LD_VAR 0 13
36705: PUSH
36706: FOR_IN
36707: IFFALSE 36765
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36709: LD_VAR 0 1
36713: PPUSH
36714: LD_STRING M
36716: PUSH
36717: LD_VAR 0 6
36721: PUSH
36722: LD_INT 1
36724: ARRAY
36725: PUSH
36726: LD_VAR 0 6
36730: PUSH
36731: LD_INT 2
36733: ARRAY
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: PPUSH
36759: CALL_OW 447
36763: GO 36706
36765: POP
36766: POP
// end ;
36767: LD_VAR 0 5
36771: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36772: LD_EXP 111
36776: NOT
36777: IFFALSE 36827
36779: GO 36781
36781: DISABLE
// begin initHack := true ;
36782: LD_ADDR_EXP 111
36786: PUSH
36787: LD_INT 1
36789: ST_TO_ADDR
// hackTanks := [ ] ;
36790: LD_ADDR_EXP 112
36794: PUSH
36795: EMPTY
36796: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36797: LD_ADDR_EXP 113
36801: PUSH
36802: EMPTY
36803: ST_TO_ADDR
// hackLimit := 3 ;
36804: LD_ADDR_EXP 114
36808: PUSH
36809: LD_INT 3
36811: ST_TO_ADDR
// hackDist := 12 ;
36812: LD_ADDR_EXP 115
36816: PUSH
36817: LD_INT 12
36819: ST_TO_ADDR
// hackCounter := [ ] ;
36820: LD_ADDR_EXP 116
36824: PUSH
36825: EMPTY
36826: ST_TO_ADDR
// end ;
36827: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36828: LD_EXP 111
36832: PUSH
36833: LD_INT 34
36835: PUSH
36836: LD_INT 99
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PPUSH
36843: CALL_OW 69
36847: AND
36848: IFFALSE 37101
36850: GO 36852
36852: DISABLE
36853: LD_INT 0
36855: PPUSH
36856: PPUSH
// begin enable ;
36857: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36858: LD_ADDR_VAR 0 1
36862: PUSH
36863: LD_INT 34
36865: PUSH
36866: LD_INT 99
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PPUSH
36873: CALL_OW 69
36877: PUSH
36878: FOR_IN
36879: IFFALSE 37099
// begin if not i in hackTanks then
36881: LD_VAR 0 1
36885: PUSH
36886: LD_EXP 112
36890: IN
36891: NOT
36892: IFFALSE 36975
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36894: LD_ADDR_EXP 112
36898: PUSH
36899: LD_EXP 112
36903: PPUSH
36904: LD_EXP 112
36908: PUSH
36909: LD_INT 1
36911: PLUS
36912: PPUSH
36913: LD_VAR 0 1
36917: PPUSH
36918: CALL_OW 1
36922: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36923: LD_ADDR_EXP 113
36927: PUSH
36928: LD_EXP 113
36932: PPUSH
36933: LD_EXP 113
36937: PUSH
36938: LD_INT 1
36940: PLUS
36941: PPUSH
36942: EMPTY
36943: PPUSH
36944: CALL_OW 1
36948: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36949: LD_ADDR_EXP 116
36953: PUSH
36954: LD_EXP 116
36958: PPUSH
36959: LD_EXP 116
36963: PUSH
36964: LD_INT 1
36966: PLUS
36967: PPUSH
36968: EMPTY
36969: PPUSH
36970: CALL_OW 1
36974: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36975: LD_VAR 0 1
36979: PPUSH
36980: CALL_OW 302
36984: NOT
36985: IFFALSE 36998
// begin HackUnlinkAll ( i ) ;
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL 37104 0 1
// continue ;
36996: GO 36878
// end ; HackCheckCapturedStatus ( i ) ;
36998: LD_VAR 0 1
37002: PPUSH
37003: CALL 37547 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37007: LD_ADDR_VAR 0 2
37011: PUSH
37012: LD_INT 81
37014: PUSH
37015: LD_VAR 0 1
37019: PPUSH
37020: CALL_OW 255
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 33
37031: PUSH
37032: LD_INT 3
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 91
37041: PUSH
37042: LD_VAR 0 1
37046: PUSH
37047: LD_EXP 115
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 50
37059: PUSH
37060: EMPTY
37061: LIST
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: PPUSH
37069: CALL_OW 69
37073: ST_TO_ADDR
// if not tmp then
37074: LD_VAR 0 2
37078: NOT
37079: IFFALSE 37083
// continue ;
37081: GO 36878
// HackLink ( i , tmp ) ;
37083: LD_VAR 0 1
37087: PPUSH
37088: LD_VAR 0 2
37092: PPUSH
37093: CALL 37240 0 2
// end ;
37097: GO 36878
37099: POP
37100: POP
// end ;
37101: PPOPN 2
37103: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37104: LD_INT 0
37106: PPUSH
37107: PPUSH
37108: PPUSH
// if not hack in hackTanks then
37109: LD_VAR 0 1
37113: PUSH
37114: LD_EXP 112
37118: IN
37119: NOT
37120: IFFALSE 37124
// exit ;
37122: GO 37235
// index := GetElementIndex ( hackTanks , hack ) ;
37124: LD_ADDR_VAR 0 4
37128: PUSH
37129: LD_EXP 112
37133: PPUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL 44852 0 2
37143: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37144: LD_EXP 113
37148: PUSH
37149: LD_VAR 0 4
37153: ARRAY
37154: IFFALSE 37235
// begin for i in hackTanksCaptured [ index ] do
37156: LD_ADDR_VAR 0 3
37160: PUSH
37161: LD_EXP 113
37165: PUSH
37166: LD_VAR 0 4
37170: ARRAY
37171: PUSH
37172: FOR_IN
37173: IFFALSE 37199
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37175: LD_VAR 0 3
37179: PUSH
37180: LD_INT 1
37182: ARRAY
37183: PPUSH
37184: LD_VAR 0 3
37188: PUSH
37189: LD_INT 2
37191: ARRAY
37192: PPUSH
37193: CALL_OW 235
37197: GO 37172
37199: POP
37200: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37201: LD_ADDR_EXP 113
37205: PUSH
37206: LD_EXP 113
37210: PPUSH
37211: LD_VAR 0 4
37215: PPUSH
37216: EMPTY
37217: PPUSH
37218: CALL_OW 1
37222: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37223: LD_VAR 0 1
37227: PPUSH
37228: LD_INT 0
37230: PPUSH
37231: CALL_OW 505
// end ; end ;
37235: LD_VAR 0 2
37239: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37240: LD_INT 0
37242: PPUSH
37243: PPUSH
37244: PPUSH
// if not hack in hackTanks or not vehicles then
37245: LD_VAR 0 1
37249: PUSH
37250: LD_EXP 112
37254: IN
37255: NOT
37256: PUSH
37257: LD_VAR 0 2
37261: NOT
37262: OR
37263: IFFALSE 37267
// exit ;
37265: GO 37542
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37267: LD_ADDR_VAR 0 2
37271: PUSH
37272: LD_VAR 0 1
37276: PPUSH
37277: LD_VAR 0 2
37281: PPUSH
37282: LD_INT 1
37284: PPUSH
37285: LD_INT 1
37287: PPUSH
37288: CALL 45502 0 4
37292: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37293: LD_ADDR_VAR 0 5
37297: PUSH
37298: LD_EXP 112
37302: PPUSH
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL 44852 0 2
37312: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37313: LD_EXP 113
37317: PUSH
37318: LD_VAR 0 5
37322: ARRAY
37323: PUSH
37324: LD_EXP 114
37328: LESS
37329: IFFALSE 37518
// begin for i := 1 to vehicles do
37331: LD_ADDR_VAR 0 4
37335: PUSH
37336: DOUBLE
37337: LD_INT 1
37339: DEC
37340: ST_TO_ADDR
37341: LD_VAR 0 2
37345: PUSH
37346: FOR_TO
37347: IFFALSE 37516
// begin if hackTanksCaptured [ index ] = hackLimit then
37349: LD_EXP 113
37353: PUSH
37354: LD_VAR 0 5
37358: ARRAY
37359: PUSH
37360: LD_EXP 114
37364: EQUAL
37365: IFFALSE 37369
// break ;
37367: GO 37516
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37369: LD_ADDR_EXP 116
37373: PUSH
37374: LD_EXP 116
37378: PPUSH
37379: LD_VAR 0 5
37383: PPUSH
37384: LD_EXP 116
37388: PUSH
37389: LD_VAR 0 5
37393: ARRAY
37394: PUSH
37395: LD_INT 1
37397: PLUS
37398: PPUSH
37399: CALL_OW 1
37403: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37404: LD_ADDR_EXP 113
37408: PUSH
37409: LD_EXP 113
37413: PPUSH
37414: LD_VAR 0 5
37418: PUSH
37419: LD_EXP 113
37423: PUSH
37424: LD_VAR 0 5
37428: ARRAY
37429: PUSH
37430: LD_INT 1
37432: PLUS
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PPUSH
37438: LD_VAR 0 2
37442: PUSH
37443: LD_VAR 0 4
37447: ARRAY
37448: PUSH
37449: LD_VAR 0 2
37453: PUSH
37454: LD_VAR 0 4
37458: ARRAY
37459: PPUSH
37460: CALL_OW 255
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PPUSH
37469: CALL 45067 0 3
37473: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37474: LD_VAR 0 2
37478: PUSH
37479: LD_VAR 0 4
37483: ARRAY
37484: PPUSH
37485: LD_VAR 0 1
37489: PPUSH
37490: CALL_OW 255
37494: PPUSH
37495: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37499: LD_VAR 0 2
37503: PUSH
37504: LD_VAR 0 4
37508: ARRAY
37509: PPUSH
37510: CALL_OW 141
// end ;
37514: GO 37346
37516: POP
37517: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37518: LD_VAR 0 1
37522: PPUSH
37523: LD_EXP 113
37527: PUSH
37528: LD_VAR 0 5
37532: ARRAY
37533: PUSH
37534: LD_INT 0
37536: PLUS
37537: PPUSH
37538: CALL_OW 505
// end ;
37542: LD_VAR 0 3
37546: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37547: LD_INT 0
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
// if not hack in hackTanks then
37553: LD_VAR 0 1
37557: PUSH
37558: LD_EXP 112
37562: IN
37563: NOT
37564: IFFALSE 37568
// exit ;
37566: GO 37808
// index := GetElementIndex ( hackTanks , hack ) ;
37568: LD_ADDR_VAR 0 4
37572: PUSH
37573: LD_EXP 112
37577: PPUSH
37578: LD_VAR 0 1
37582: PPUSH
37583: CALL 44852 0 2
37587: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37588: LD_ADDR_VAR 0 3
37592: PUSH
37593: DOUBLE
37594: LD_EXP 113
37598: PUSH
37599: LD_VAR 0 4
37603: ARRAY
37604: INC
37605: ST_TO_ADDR
37606: LD_INT 1
37608: PUSH
37609: FOR_DOWNTO
37610: IFFALSE 37782
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37612: LD_ADDR_VAR 0 5
37616: PUSH
37617: LD_EXP 113
37621: PUSH
37622: LD_VAR 0 4
37626: ARRAY
37627: PUSH
37628: LD_VAR 0 3
37632: ARRAY
37633: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37634: LD_VAR 0 5
37638: PUSH
37639: LD_INT 1
37641: ARRAY
37642: PPUSH
37643: CALL_OW 302
37647: NOT
37648: PUSH
37649: LD_VAR 0 5
37653: PUSH
37654: LD_INT 1
37656: ARRAY
37657: PPUSH
37658: CALL_OW 255
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 255
37672: NONEQUAL
37673: OR
37674: IFFALSE 37780
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37676: LD_VAR 0 5
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: PPUSH
37685: CALL_OW 305
37689: PUSH
37690: LD_VAR 0 5
37694: PUSH
37695: LD_INT 1
37697: ARRAY
37698: PPUSH
37699: CALL_OW 255
37703: PUSH
37704: LD_VAR 0 1
37708: PPUSH
37709: CALL_OW 255
37713: EQUAL
37714: AND
37715: IFFALSE 37739
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37717: LD_VAR 0 5
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PPUSH
37726: LD_VAR 0 5
37730: PUSH
37731: LD_INT 2
37733: ARRAY
37734: PPUSH
37735: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37739: LD_ADDR_EXP 113
37743: PUSH
37744: LD_EXP 113
37748: PPUSH
37749: LD_VAR 0 4
37753: PPUSH
37754: LD_EXP 113
37758: PUSH
37759: LD_VAR 0 4
37763: ARRAY
37764: PPUSH
37765: LD_VAR 0 3
37769: PPUSH
37770: CALL_OW 3
37774: PPUSH
37775: CALL_OW 1
37779: ST_TO_ADDR
// end ; end ;
37780: GO 37609
37782: POP
37783: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37784: LD_VAR 0 1
37788: PPUSH
37789: LD_EXP 113
37793: PUSH
37794: LD_VAR 0 4
37798: ARRAY
37799: PUSH
37800: LD_INT 0
37802: PLUS
37803: PPUSH
37804: CALL_OW 505
// end ;
37808: LD_VAR 0 2
37812: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37813: LD_INT 0
37815: PPUSH
37816: PPUSH
37817: PPUSH
37818: PPUSH
// if not hack in hackTanks then
37819: LD_VAR 0 1
37823: PUSH
37824: LD_EXP 112
37828: IN
37829: NOT
37830: IFFALSE 37834
// exit ;
37832: GO 37919
// index := GetElementIndex ( hackTanks , hack ) ;
37834: LD_ADDR_VAR 0 5
37838: PUSH
37839: LD_EXP 112
37843: PPUSH
37844: LD_VAR 0 1
37848: PPUSH
37849: CALL 44852 0 2
37853: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37854: LD_ADDR_VAR 0 4
37858: PUSH
37859: DOUBLE
37860: LD_INT 1
37862: DEC
37863: ST_TO_ADDR
37864: LD_EXP 113
37868: PUSH
37869: LD_VAR 0 5
37873: ARRAY
37874: PUSH
37875: FOR_TO
37876: IFFALSE 37917
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37878: LD_EXP 113
37882: PUSH
37883: LD_VAR 0 5
37887: ARRAY
37888: PUSH
37889: LD_VAR 0 4
37893: ARRAY
37894: PUSH
37895: LD_INT 1
37897: ARRAY
37898: PUSH
37899: LD_VAR 0 2
37903: EQUAL
37904: IFFALSE 37915
// KillUnit ( vehicle ) ;
37906: LD_VAR 0 2
37910: PPUSH
37911: CALL_OW 66
37915: GO 37875
37917: POP
37918: POP
// end ;
37919: LD_VAR 0 3
37923: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37924: LD_EXP 117
37928: NOT
37929: IFFALSE 37964
37931: GO 37933
37933: DISABLE
// begin initMiner := true ;
37934: LD_ADDR_EXP 117
37938: PUSH
37939: LD_INT 1
37941: ST_TO_ADDR
// minersList := [ ] ;
37942: LD_ADDR_EXP 118
37946: PUSH
37947: EMPTY
37948: ST_TO_ADDR
// minerMinesList := [ ] ;
37949: LD_ADDR_EXP 119
37953: PUSH
37954: EMPTY
37955: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37956: LD_ADDR_EXP 120
37960: PUSH
37961: LD_INT 5
37963: ST_TO_ADDR
// end ;
37964: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37965: LD_EXP 117
37969: PUSH
37970: LD_INT 34
37972: PUSH
37973: LD_INT 81
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PPUSH
37980: CALL_OW 69
37984: AND
37985: IFFALSE 38446
37987: GO 37989
37989: DISABLE
37990: LD_INT 0
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
// begin enable ;
37996: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37997: LD_ADDR_VAR 0 1
38001: PUSH
38002: LD_INT 34
38004: PUSH
38005: LD_INT 81
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PPUSH
38012: CALL_OW 69
38016: PUSH
38017: FOR_IN
38018: IFFALSE 38090
// begin if not i in minersList then
38020: LD_VAR 0 1
38024: PUSH
38025: LD_EXP 118
38029: IN
38030: NOT
38031: IFFALSE 38088
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38033: LD_ADDR_EXP 118
38037: PUSH
38038: LD_EXP 118
38042: PPUSH
38043: LD_EXP 118
38047: PUSH
38048: LD_INT 1
38050: PLUS
38051: PPUSH
38052: LD_VAR 0 1
38056: PPUSH
38057: CALL_OW 1
38061: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38062: LD_ADDR_EXP 119
38066: PUSH
38067: LD_EXP 119
38071: PPUSH
38072: LD_EXP 119
38076: PUSH
38077: LD_INT 1
38079: PLUS
38080: PPUSH
38081: EMPTY
38082: PPUSH
38083: CALL_OW 1
38087: ST_TO_ADDR
// end end ;
38088: GO 38017
38090: POP
38091: POP
// for i := minerMinesList downto 1 do
38092: LD_ADDR_VAR 0 1
38096: PUSH
38097: DOUBLE
38098: LD_EXP 119
38102: INC
38103: ST_TO_ADDR
38104: LD_INT 1
38106: PUSH
38107: FOR_DOWNTO
38108: IFFALSE 38444
// begin if IsLive ( minersList [ i ] ) then
38110: LD_EXP 118
38114: PUSH
38115: LD_VAR 0 1
38119: ARRAY
38120: PPUSH
38121: CALL_OW 300
38125: IFFALSE 38153
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38127: LD_EXP 118
38131: PUSH
38132: LD_VAR 0 1
38136: ARRAY
38137: PPUSH
38138: LD_EXP 119
38142: PUSH
38143: LD_VAR 0 1
38147: ARRAY
38148: PPUSH
38149: CALL_OW 505
// if not minerMinesList [ i ] then
38153: LD_EXP 119
38157: PUSH
38158: LD_VAR 0 1
38162: ARRAY
38163: NOT
38164: IFFALSE 38168
// continue ;
38166: GO 38107
// for j := minerMinesList [ i ] downto 1 do
38168: LD_ADDR_VAR 0 2
38172: PUSH
38173: DOUBLE
38174: LD_EXP 119
38178: PUSH
38179: LD_VAR 0 1
38183: ARRAY
38184: INC
38185: ST_TO_ADDR
38186: LD_INT 1
38188: PUSH
38189: FOR_DOWNTO
38190: IFFALSE 38440
// begin side := GetSide ( minersList [ i ] ) ;
38192: LD_ADDR_VAR 0 3
38196: PUSH
38197: LD_EXP 118
38201: PUSH
38202: LD_VAR 0 1
38206: ARRAY
38207: PPUSH
38208: CALL_OW 255
38212: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38213: LD_ADDR_VAR 0 4
38217: PUSH
38218: LD_EXP 119
38222: PUSH
38223: LD_VAR 0 1
38227: ARRAY
38228: PUSH
38229: LD_VAR 0 2
38233: ARRAY
38234: PUSH
38235: LD_INT 1
38237: ARRAY
38238: PPUSH
38239: LD_EXP 119
38243: PUSH
38244: LD_VAR 0 1
38248: ARRAY
38249: PUSH
38250: LD_VAR 0 2
38254: ARRAY
38255: PUSH
38256: LD_INT 2
38258: ARRAY
38259: PPUSH
38260: CALL_OW 428
38264: ST_TO_ADDR
// if not tmp then
38265: LD_VAR 0 4
38269: NOT
38270: IFFALSE 38274
// continue ;
38272: GO 38189
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38274: LD_VAR 0 4
38278: PUSH
38279: LD_INT 81
38281: PUSH
38282: LD_VAR 0 3
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PPUSH
38291: CALL_OW 69
38295: IN
38296: PUSH
38297: LD_EXP 119
38301: PUSH
38302: LD_VAR 0 1
38306: ARRAY
38307: PUSH
38308: LD_VAR 0 2
38312: ARRAY
38313: PUSH
38314: LD_INT 1
38316: ARRAY
38317: PPUSH
38318: LD_EXP 119
38322: PUSH
38323: LD_VAR 0 1
38327: ARRAY
38328: PUSH
38329: LD_VAR 0 2
38333: ARRAY
38334: PUSH
38335: LD_INT 2
38337: ARRAY
38338: PPUSH
38339: CALL_OW 458
38343: AND
38344: IFFALSE 38438
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38346: LD_EXP 119
38350: PUSH
38351: LD_VAR 0 1
38355: ARRAY
38356: PUSH
38357: LD_VAR 0 2
38361: ARRAY
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: LD_EXP 119
38371: PUSH
38372: LD_VAR 0 1
38376: ARRAY
38377: PUSH
38378: LD_VAR 0 2
38382: ARRAY
38383: PUSH
38384: LD_INT 2
38386: ARRAY
38387: PPUSH
38388: LD_VAR 0 3
38392: PPUSH
38393: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38397: LD_ADDR_EXP 119
38401: PUSH
38402: LD_EXP 119
38406: PPUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: LD_EXP 119
38416: PUSH
38417: LD_VAR 0 1
38421: ARRAY
38422: PPUSH
38423: LD_VAR 0 2
38427: PPUSH
38428: CALL_OW 3
38432: PPUSH
38433: CALL_OW 1
38437: ST_TO_ADDR
// end ; end ;
38438: GO 38189
38440: POP
38441: POP
// end ;
38442: GO 38107
38444: POP
38445: POP
// end ;
38446: PPOPN 4
38448: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38449: LD_INT 0
38451: PPUSH
38452: PPUSH
// result := false ;
38453: LD_ADDR_VAR 0 4
38457: PUSH
38458: LD_INT 0
38460: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38461: LD_VAR 0 1
38465: PPUSH
38466: CALL_OW 264
38470: PUSH
38471: LD_INT 81
38473: EQUAL
38474: NOT
38475: IFFALSE 38479
// exit ;
38477: GO 38719
// index := GetElementIndex ( minersList , unit ) ;
38479: LD_ADDR_VAR 0 5
38483: PUSH
38484: LD_EXP 118
38488: PPUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL 44852 0 2
38498: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38499: LD_EXP 119
38503: PUSH
38504: LD_VAR 0 5
38508: ARRAY
38509: PUSH
38510: LD_EXP 120
38514: GREATEREQUAL
38515: IFFALSE 38519
// exit ;
38517: GO 38719
// ComMoveXY ( unit , x , y ) ;
38519: LD_VAR 0 1
38523: PPUSH
38524: LD_VAR 0 2
38528: PPUSH
38529: LD_VAR 0 3
38533: PPUSH
38534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38538: LD_INT 35
38540: PPUSH
38541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38545: LD_VAR 0 1
38549: PPUSH
38550: LD_VAR 0 2
38554: PPUSH
38555: LD_VAR 0 3
38559: PPUSH
38560: CALL 76188 0 3
38564: NOT
38565: PUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 314
38575: AND
38576: IFFALSE 38580
// exit ;
38578: GO 38719
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38580: LD_VAR 0 2
38584: PPUSH
38585: LD_VAR 0 3
38589: PPUSH
38590: CALL_OW 428
38594: PUSH
38595: LD_VAR 0 1
38599: EQUAL
38600: PUSH
38601: LD_VAR 0 1
38605: PPUSH
38606: CALL_OW 314
38610: NOT
38611: AND
38612: IFFALSE 38538
// PlaySoundXY ( x , y , PlantMine ) ;
38614: LD_VAR 0 2
38618: PPUSH
38619: LD_VAR 0 3
38623: PPUSH
38624: LD_STRING PlantMine
38626: PPUSH
38627: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38631: LD_VAR 0 2
38635: PPUSH
38636: LD_VAR 0 3
38640: PPUSH
38641: LD_VAR 0 1
38645: PPUSH
38646: CALL_OW 255
38650: PPUSH
38651: LD_INT 0
38653: PPUSH
38654: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38658: LD_ADDR_EXP 119
38662: PUSH
38663: LD_EXP 119
38667: PPUSH
38668: LD_VAR 0 5
38672: PUSH
38673: LD_EXP 119
38677: PUSH
38678: LD_VAR 0 5
38682: ARRAY
38683: PUSH
38684: LD_INT 1
38686: PLUS
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PPUSH
38692: LD_VAR 0 2
38696: PUSH
38697: LD_VAR 0 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PPUSH
38706: CALL 45067 0 3
38710: ST_TO_ADDR
// result := true ;
38711: LD_ADDR_VAR 0 4
38715: PUSH
38716: LD_INT 1
38718: ST_TO_ADDR
// end ;
38719: LD_VAR 0 4
38723: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38724: LD_INT 0
38726: PPUSH
38727: PPUSH
38728: PPUSH
// if not unit in minersList then
38729: LD_VAR 0 1
38733: PUSH
38734: LD_EXP 118
38738: IN
38739: NOT
38740: IFFALSE 38744
// exit ;
38742: GO 39136
// index := GetElementIndex ( minersList , unit ) ;
38744: LD_ADDR_VAR 0 6
38748: PUSH
38749: LD_EXP 118
38753: PPUSH
38754: LD_VAR 0 1
38758: PPUSH
38759: CALL 44852 0 2
38763: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38764: LD_ADDR_VAR 0 5
38768: PUSH
38769: DOUBLE
38770: LD_EXP 119
38774: PUSH
38775: LD_VAR 0 6
38779: ARRAY
38780: INC
38781: ST_TO_ADDR
38782: LD_INT 1
38784: PUSH
38785: FOR_DOWNTO
38786: IFFALSE 38947
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38788: LD_EXP 119
38792: PUSH
38793: LD_VAR 0 6
38797: ARRAY
38798: PUSH
38799: LD_VAR 0 5
38803: ARRAY
38804: PUSH
38805: LD_INT 1
38807: ARRAY
38808: PUSH
38809: LD_VAR 0 2
38813: EQUAL
38814: PUSH
38815: LD_EXP 119
38819: PUSH
38820: LD_VAR 0 6
38824: ARRAY
38825: PUSH
38826: LD_VAR 0 5
38830: ARRAY
38831: PUSH
38832: LD_INT 2
38834: ARRAY
38835: PUSH
38836: LD_VAR 0 3
38840: EQUAL
38841: AND
38842: IFFALSE 38945
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38844: LD_EXP 119
38848: PUSH
38849: LD_VAR 0 6
38853: ARRAY
38854: PUSH
38855: LD_VAR 0 5
38859: ARRAY
38860: PUSH
38861: LD_INT 1
38863: ARRAY
38864: PPUSH
38865: LD_EXP 119
38869: PUSH
38870: LD_VAR 0 6
38874: ARRAY
38875: PUSH
38876: LD_VAR 0 5
38880: ARRAY
38881: PUSH
38882: LD_INT 2
38884: ARRAY
38885: PPUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: CALL_OW 255
38895: PPUSH
38896: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38900: LD_ADDR_EXP 119
38904: PUSH
38905: LD_EXP 119
38909: PPUSH
38910: LD_VAR 0 6
38914: PPUSH
38915: LD_EXP 119
38919: PUSH
38920: LD_VAR 0 6
38924: ARRAY
38925: PPUSH
38926: LD_VAR 0 5
38930: PPUSH
38931: CALL_OW 3
38935: PPUSH
38936: CALL_OW 1
38940: ST_TO_ADDR
// exit ;
38941: POP
38942: POP
38943: GO 39136
// end ; end ;
38945: GO 38785
38947: POP
38948: POP
// for i := minerMinesList [ index ] downto 1 do
38949: LD_ADDR_VAR 0 5
38953: PUSH
38954: DOUBLE
38955: LD_EXP 119
38959: PUSH
38960: LD_VAR 0 6
38964: ARRAY
38965: INC
38966: ST_TO_ADDR
38967: LD_INT 1
38969: PUSH
38970: FOR_DOWNTO
38971: IFFALSE 39134
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38973: LD_EXP 119
38977: PUSH
38978: LD_VAR 0 6
38982: ARRAY
38983: PUSH
38984: LD_VAR 0 5
38988: ARRAY
38989: PUSH
38990: LD_INT 1
38992: ARRAY
38993: PPUSH
38994: LD_EXP 119
38998: PUSH
38999: LD_VAR 0 6
39003: ARRAY
39004: PUSH
39005: LD_VAR 0 5
39009: ARRAY
39010: PUSH
39011: LD_INT 2
39013: ARRAY
39014: PPUSH
39015: LD_VAR 0 2
39019: PPUSH
39020: LD_VAR 0 3
39024: PPUSH
39025: CALL_OW 298
39029: PUSH
39030: LD_INT 6
39032: LESS
39033: IFFALSE 39132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39035: LD_EXP 119
39039: PUSH
39040: LD_VAR 0 6
39044: ARRAY
39045: PUSH
39046: LD_VAR 0 5
39050: ARRAY
39051: PUSH
39052: LD_INT 1
39054: ARRAY
39055: PPUSH
39056: LD_EXP 119
39060: PUSH
39061: LD_VAR 0 6
39065: ARRAY
39066: PUSH
39067: LD_VAR 0 5
39071: ARRAY
39072: PUSH
39073: LD_INT 2
39075: ARRAY
39076: PPUSH
39077: LD_VAR 0 1
39081: PPUSH
39082: CALL_OW 255
39086: PPUSH
39087: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39091: LD_ADDR_EXP 119
39095: PUSH
39096: LD_EXP 119
39100: PPUSH
39101: LD_VAR 0 6
39105: PPUSH
39106: LD_EXP 119
39110: PUSH
39111: LD_VAR 0 6
39115: ARRAY
39116: PPUSH
39117: LD_VAR 0 5
39121: PPUSH
39122: CALL_OW 3
39126: PPUSH
39127: CALL_OW 1
39131: ST_TO_ADDR
// end ; end ;
39132: GO 38970
39134: POP
39135: POP
// end ;
39136: LD_VAR 0 4
39140: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39141: LD_INT 0
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39152: LD_VAR 0 1
39156: PPUSH
39157: CALL_OW 264
39161: PUSH
39162: LD_INT 81
39164: EQUAL
39165: NOT
39166: PUSH
39167: LD_VAR 0 1
39171: PUSH
39172: LD_EXP 118
39176: IN
39177: NOT
39178: OR
39179: IFFALSE 39183
// exit ;
39181: GO 39505
// index := GetElementIndex ( minersList , unit ) ;
39183: LD_ADDR_VAR 0 6
39187: PUSH
39188: LD_EXP 118
39192: PPUSH
39193: LD_VAR 0 1
39197: PPUSH
39198: CALL 44852 0 2
39202: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39203: LD_ADDR_VAR 0 8
39207: PUSH
39208: LD_EXP 120
39212: PUSH
39213: LD_EXP 119
39217: PUSH
39218: LD_VAR 0 6
39222: ARRAY
39223: MINUS
39224: ST_TO_ADDR
// if not minesFreeAmount then
39225: LD_VAR 0 8
39229: NOT
39230: IFFALSE 39234
// exit ;
39232: GO 39505
// tmp := [ ] ;
39234: LD_ADDR_VAR 0 7
39238: PUSH
39239: EMPTY
39240: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39241: LD_ADDR_VAR 0 5
39245: PUSH
39246: DOUBLE
39247: LD_INT 1
39249: DEC
39250: ST_TO_ADDR
39251: LD_VAR 0 8
39255: PUSH
39256: FOR_TO
39257: IFFALSE 39452
// begin _d := rand ( 0 , 5 ) ;
39259: LD_ADDR_VAR 0 11
39263: PUSH
39264: LD_INT 0
39266: PPUSH
39267: LD_INT 5
39269: PPUSH
39270: CALL_OW 12
39274: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39275: LD_ADDR_VAR 0 12
39279: PUSH
39280: LD_INT 2
39282: PPUSH
39283: LD_INT 6
39285: PPUSH
39286: CALL_OW 12
39290: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39291: LD_ADDR_VAR 0 9
39295: PUSH
39296: LD_VAR 0 2
39300: PPUSH
39301: LD_VAR 0 11
39305: PPUSH
39306: LD_VAR 0 12
39310: PPUSH
39311: CALL_OW 272
39315: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39316: LD_ADDR_VAR 0 10
39320: PUSH
39321: LD_VAR 0 3
39325: PPUSH
39326: LD_VAR 0 11
39330: PPUSH
39331: LD_VAR 0 12
39335: PPUSH
39336: CALL_OW 273
39340: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39341: LD_VAR 0 9
39345: PPUSH
39346: LD_VAR 0 10
39350: PPUSH
39351: CALL_OW 488
39355: PUSH
39356: LD_VAR 0 9
39360: PUSH
39361: LD_VAR 0 10
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_VAR 0 7
39374: IN
39375: NOT
39376: AND
39377: PUSH
39378: LD_VAR 0 9
39382: PPUSH
39383: LD_VAR 0 10
39387: PPUSH
39388: CALL_OW 458
39392: NOT
39393: AND
39394: IFFALSE 39436
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39396: LD_ADDR_VAR 0 7
39400: PUSH
39401: LD_VAR 0 7
39405: PPUSH
39406: LD_VAR 0 7
39410: PUSH
39411: LD_INT 1
39413: PLUS
39414: PPUSH
39415: LD_VAR 0 9
39419: PUSH
39420: LD_VAR 0 10
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PPUSH
39429: CALL_OW 1
39433: ST_TO_ADDR
39434: GO 39450
// i := i - 1 ;
39436: LD_ADDR_VAR 0 5
39440: PUSH
39441: LD_VAR 0 5
39445: PUSH
39446: LD_INT 1
39448: MINUS
39449: ST_TO_ADDR
// end ;
39450: GO 39256
39452: POP
39453: POP
// for i in tmp do
39454: LD_ADDR_VAR 0 5
39458: PUSH
39459: LD_VAR 0 7
39463: PUSH
39464: FOR_IN
39465: IFFALSE 39503
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39467: LD_VAR 0 1
39471: PPUSH
39472: LD_VAR 0 5
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: LD_VAR 0 5
39485: PUSH
39486: LD_INT 2
39488: ARRAY
39489: PPUSH
39490: CALL 38449 0 3
39494: NOT
39495: IFFALSE 39501
// exit ;
39497: POP
39498: POP
39499: GO 39505
39501: GO 39464
39503: POP
39504: POP
// end ;
39505: LD_VAR 0 4
39509: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39510: LD_INT 0
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
// if not GetClass ( unit ) = class_sniper then
39519: LD_VAR 0 1
39523: PPUSH
39524: CALL_OW 257
39528: PUSH
39529: LD_INT 5
39531: EQUAL
39532: NOT
39533: IFFALSE 39537
// exit ;
39535: GO 39925
// dist := 8 ;
39537: LD_ADDR_VAR 0 5
39541: PUSH
39542: LD_INT 8
39544: ST_TO_ADDR
// viewRange := 12 ;
39545: LD_ADDR_VAR 0 7
39549: PUSH
39550: LD_INT 12
39552: ST_TO_ADDR
// side := GetSide ( unit ) ;
39553: LD_ADDR_VAR 0 6
39557: PUSH
39558: LD_VAR 0 1
39562: PPUSH
39563: CALL_OW 255
39567: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39568: LD_INT 61
39570: PPUSH
39571: LD_VAR 0 6
39575: PPUSH
39576: CALL_OW 321
39580: PUSH
39581: LD_INT 2
39583: EQUAL
39584: IFFALSE 39594
// viewRange := 16 ;
39586: LD_ADDR_VAR 0 7
39590: PUSH
39591: LD_INT 16
39593: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39594: LD_VAR 0 1
39598: PPUSH
39599: LD_VAR 0 2
39603: PPUSH
39604: LD_VAR 0 3
39608: PPUSH
39609: CALL_OW 297
39613: PUSH
39614: LD_VAR 0 5
39618: GREATER
39619: IFFALSE 39698
// begin ComMoveXY ( unit , x , y ) ;
39621: LD_VAR 0 1
39625: PPUSH
39626: LD_VAR 0 2
39630: PPUSH
39631: LD_VAR 0 3
39635: PPUSH
39636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39640: LD_INT 35
39642: PPUSH
39643: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39647: LD_VAR 0 1
39651: PPUSH
39652: LD_VAR 0 2
39656: PPUSH
39657: LD_VAR 0 3
39661: PPUSH
39662: CALL 76188 0 3
39666: NOT
39667: IFFALSE 39671
// exit ;
39669: GO 39925
// until GetDistUnitXY ( unit , x , y ) < dist ;
39671: LD_VAR 0 1
39675: PPUSH
39676: LD_VAR 0 2
39680: PPUSH
39681: LD_VAR 0 3
39685: PPUSH
39686: CALL_OW 297
39690: PUSH
39691: LD_VAR 0 5
39695: LESS
39696: IFFALSE 39640
// end ; ComTurnXY ( unit , x , y ) ;
39698: LD_VAR 0 1
39702: PPUSH
39703: LD_VAR 0 2
39707: PPUSH
39708: LD_VAR 0 3
39712: PPUSH
39713: CALL_OW 118
// wait ( 5 ) ;
39717: LD_INT 5
39719: PPUSH
39720: CALL_OW 67
// _d := GetDir ( unit ) ;
39724: LD_ADDR_VAR 0 10
39728: PUSH
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 254
39738: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39739: LD_ADDR_VAR 0 8
39743: PUSH
39744: LD_VAR 0 1
39748: PPUSH
39749: CALL_OW 250
39753: PPUSH
39754: LD_VAR 0 10
39758: PPUSH
39759: LD_VAR 0 5
39763: PPUSH
39764: CALL_OW 272
39768: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39769: LD_ADDR_VAR 0 9
39773: PUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 251
39783: PPUSH
39784: LD_VAR 0 10
39788: PPUSH
39789: LD_VAR 0 5
39793: PPUSH
39794: CALL_OW 273
39798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39799: LD_VAR 0 8
39803: PPUSH
39804: LD_VAR 0 9
39808: PPUSH
39809: CALL_OW 488
39813: NOT
39814: IFFALSE 39818
// exit ;
39816: GO 39925
// ComAnimCustom ( unit , 1 ) ;
39818: LD_VAR 0 1
39822: PPUSH
39823: LD_INT 1
39825: PPUSH
39826: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39830: LD_VAR 0 8
39834: PPUSH
39835: LD_VAR 0 9
39839: PPUSH
39840: LD_VAR 0 6
39844: PPUSH
39845: LD_VAR 0 7
39849: PPUSH
39850: CALL_OW 330
// repeat wait ( 1 ) ;
39854: LD_INT 1
39856: PPUSH
39857: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 316
39870: PUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 314
39880: OR
39881: PUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 302
39891: NOT
39892: OR
39893: PUSH
39894: LD_VAR 0 1
39898: PPUSH
39899: CALL_OW 301
39903: OR
39904: IFFALSE 39854
// RemoveSeeing ( _x , _y , side ) ;
39906: LD_VAR 0 8
39910: PPUSH
39911: LD_VAR 0 9
39915: PPUSH
39916: LD_VAR 0 6
39920: PPUSH
39921: CALL_OW 331
// end ; end_of_file
39925: LD_VAR 0 4
39929: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39930: LD_INT 0
39932: PPUSH
39933: PPUSH
// if exist_mode then
39934: LD_VAR 0 2
39938: IFFALSE 39963
// unit := CreateCharacter ( prefix & ident ) else
39940: LD_ADDR_VAR 0 5
39944: PUSH
39945: LD_VAR 0 3
39949: PUSH
39950: LD_VAR 0 1
39954: STR
39955: PPUSH
39956: CALL_OW 34
39960: ST_TO_ADDR
39961: GO 39978
// unit := NewCharacter ( ident ) ;
39963: LD_ADDR_VAR 0 5
39967: PUSH
39968: LD_VAR 0 1
39972: PPUSH
39973: CALL_OW 25
39977: ST_TO_ADDR
// result := unit ;
39978: LD_ADDR_VAR 0 4
39982: PUSH
39983: LD_VAR 0 5
39987: ST_TO_ADDR
// end ;
39988: LD_VAR 0 4
39992: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39993: LD_INT 0
39995: PPUSH
39996: PPUSH
// if not side or not nation then
39997: LD_VAR 0 1
40001: NOT
40002: PUSH
40003: LD_VAR 0 2
40007: NOT
40008: OR
40009: IFFALSE 40013
// exit ;
40011: GO 40781
// case nation of nation_american :
40013: LD_VAR 0 2
40017: PUSH
40018: LD_INT 1
40020: DOUBLE
40021: EQUAL
40022: IFTRUE 40026
40024: GO 40240
40026: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40027: LD_ADDR_VAR 0 4
40031: PUSH
40032: LD_INT 35
40034: PUSH
40035: LD_INT 45
40037: PUSH
40038: LD_INT 46
40040: PUSH
40041: LD_INT 47
40043: PUSH
40044: LD_INT 82
40046: PUSH
40047: LD_INT 83
40049: PUSH
40050: LD_INT 84
40052: PUSH
40053: LD_INT 85
40055: PUSH
40056: LD_INT 86
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: LD_INT 6
40067: PUSH
40068: LD_INT 15
40070: PUSH
40071: LD_INT 16
40073: PUSH
40074: LD_INT 7
40076: PUSH
40077: LD_INT 12
40079: PUSH
40080: LD_INT 13
40082: PUSH
40083: LD_INT 10
40085: PUSH
40086: LD_INT 14
40088: PUSH
40089: LD_INT 20
40091: PUSH
40092: LD_INT 21
40094: PUSH
40095: LD_INT 22
40097: PUSH
40098: LD_INT 25
40100: PUSH
40101: LD_INT 32
40103: PUSH
40104: LD_INT 27
40106: PUSH
40107: LD_INT 36
40109: PUSH
40110: LD_INT 69
40112: PUSH
40113: LD_INT 39
40115: PUSH
40116: LD_INT 34
40118: PUSH
40119: LD_INT 40
40121: PUSH
40122: LD_INT 48
40124: PUSH
40125: LD_INT 49
40127: PUSH
40128: LD_INT 50
40130: PUSH
40131: LD_INT 51
40133: PUSH
40134: LD_INT 52
40136: PUSH
40137: LD_INT 53
40139: PUSH
40140: LD_INT 54
40142: PUSH
40143: LD_INT 55
40145: PUSH
40146: LD_INT 56
40148: PUSH
40149: LD_INT 57
40151: PUSH
40152: LD_INT 58
40154: PUSH
40155: LD_INT 59
40157: PUSH
40158: LD_INT 60
40160: PUSH
40161: LD_INT 61
40163: PUSH
40164: LD_INT 62
40166: PUSH
40167: LD_INT 80
40169: PUSH
40170: LD_INT 82
40172: PUSH
40173: LD_INT 83
40175: PUSH
40176: LD_INT 84
40178: PUSH
40179: LD_INT 85
40181: PUSH
40182: LD_INT 86
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: ST_TO_ADDR
40238: GO 40705
40240: LD_INT 2
40242: DOUBLE
40243: EQUAL
40244: IFTRUE 40248
40246: GO 40474
40248: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40249: LD_ADDR_VAR 0 4
40253: PUSH
40254: LD_INT 35
40256: PUSH
40257: LD_INT 45
40259: PUSH
40260: LD_INT 46
40262: PUSH
40263: LD_INT 47
40265: PUSH
40266: LD_INT 82
40268: PUSH
40269: LD_INT 83
40271: PUSH
40272: LD_INT 84
40274: PUSH
40275: LD_INT 85
40277: PUSH
40278: LD_INT 87
40280: PUSH
40281: LD_INT 70
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 11
40289: PUSH
40290: LD_INT 3
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 5
40298: PUSH
40299: LD_INT 6
40301: PUSH
40302: LD_INT 15
40304: PUSH
40305: LD_INT 18
40307: PUSH
40308: LD_INT 7
40310: PUSH
40311: LD_INT 17
40313: PUSH
40314: LD_INT 8
40316: PUSH
40317: LD_INT 20
40319: PUSH
40320: LD_INT 21
40322: PUSH
40323: LD_INT 22
40325: PUSH
40326: LD_INT 72
40328: PUSH
40329: LD_INT 26
40331: PUSH
40332: LD_INT 69
40334: PUSH
40335: LD_INT 39
40337: PUSH
40338: LD_INT 40
40340: PUSH
40341: LD_INT 41
40343: PUSH
40344: LD_INT 42
40346: PUSH
40347: LD_INT 43
40349: PUSH
40350: LD_INT 48
40352: PUSH
40353: LD_INT 49
40355: PUSH
40356: LD_INT 50
40358: PUSH
40359: LD_INT 51
40361: PUSH
40362: LD_INT 52
40364: PUSH
40365: LD_INT 53
40367: PUSH
40368: LD_INT 54
40370: PUSH
40371: LD_INT 55
40373: PUSH
40374: LD_INT 56
40376: PUSH
40377: LD_INT 60
40379: PUSH
40380: LD_INT 61
40382: PUSH
40383: LD_INT 62
40385: PUSH
40386: LD_INT 66
40388: PUSH
40389: LD_INT 67
40391: PUSH
40392: LD_INT 68
40394: PUSH
40395: LD_INT 81
40397: PUSH
40398: LD_INT 82
40400: PUSH
40401: LD_INT 83
40403: PUSH
40404: LD_INT 84
40406: PUSH
40407: LD_INT 85
40409: PUSH
40410: LD_INT 87
40412: PUSH
40413: LD_INT 88
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: ST_TO_ADDR
40472: GO 40705
40474: LD_INT 3
40476: DOUBLE
40477: EQUAL
40478: IFTRUE 40482
40480: GO 40704
40482: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40483: LD_ADDR_VAR 0 4
40487: PUSH
40488: LD_INT 46
40490: PUSH
40491: LD_INT 47
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: LD_INT 82
40502: PUSH
40503: LD_INT 83
40505: PUSH
40506: LD_INT 84
40508: PUSH
40509: LD_INT 85
40511: PUSH
40512: LD_INT 86
40514: PUSH
40515: LD_INT 11
40517: PUSH
40518: LD_INT 9
40520: PUSH
40521: LD_INT 20
40523: PUSH
40524: LD_INT 19
40526: PUSH
40527: LD_INT 21
40529: PUSH
40530: LD_INT 24
40532: PUSH
40533: LD_INT 22
40535: PUSH
40536: LD_INT 25
40538: PUSH
40539: LD_INT 28
40541: PUSH
40542: LD_INT 29
40544: PUSH
40545: LD_INT 30
40547: PUSH
40548: LD_INT 31
40550: PUSH
40551: LD_INT 37
40553: PUSH
40554: LD_INT 38
40556: PUSH
40557: LD_INT 32
40559: PUSH
40560: LD_INT 27
40562: PUSH
40563: LD_INT 33
40565: PUSH
40566: LD_INT 69
40568: PUSH
40569: LD_INT 39
40571: PUSH
40572: LD_INT 34
40574: PUSH
40575: LD_INT 40
40577: PUSH
40578: LD_INT 71
40580: PUSH
40581: LD_INT 23
40583: PUSH
40584: LD_INT 44
40586: PUSH
40587: LD_INT 48
40589: PUSH
40590: LD_INT 49
40592: PUSH
40593: LD_INT 50
40595: PUSH
40596: LD_INT 51
40598: PUSH
40599: LD_INT 52
40601: PUSH
40602: LD_INT 53
40604: PUSH
40605: LD_INT 54
40607: PUSH
40608: LD_INT 55
40610: PUSH
40611: LD_INT 56
40613: PUSH
40614: LD_INT 57
40616: PUSH
40617: LD_INT 58
40619: PUSH
40620: LD_INT 59
40622: PUSH
40623: LD_INT 63
40625: PUSH
40626: LD_INT 64
40628: PUSH
40629: LD_INT 65
40631: PUSH
40632: LD_INT 82
40634: PUSH
40635: LD_INT 83
40637: PUSH
40638: LD_INT 84
40640: PUSH
40641: LD_INT 85
40643: PUSH
40644: LD_INT 86
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: ST_TO_ADDR
40702: GO 40705
40704: POP
// if state > - 1 and state < 3 then
40705: LD_VAR 0 3
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: GREATER
40714: PUSH
40715: LD_VAR 0 3
40719: PUSH
40720: LD_INT 3
40722: LESS
40723: AND
40724: IFFALSE 40781
// for i in result do
40726: LD_ADDR_VAR 0 5
40730: PUSH
40731: LD_VAR 0 4
40735: PUSH
40736: FOR_IN
40737: IFFALSE 40779
// if GetTech ( i , side ) <> state then
40739: LD_VAR 0 5
40743: PPUSH
40744: LD_VAR 0 1
40748: PPUSH
40749: CALL_OW 321
40753: PUSH
40754: LD_VAR 0 3
40758: NONEQUAL
40759: IFFALSE 40777
// result := result diff i ;
40761: LD_ADDR_VAR 0 4
40765: PUSH
40766: LD_VAR 0 4
40770: PUSH
40771: LD_VAR 0 5
40775: DIFF
40776: ST_TO_ADDR
40777: GO 40736
40779: POP
40780: POP
// end ;
40781: LD_VAR 0 4
40785: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40786: LD_INT 0
40788: PPUSH
40789: PPUSH
40790: PPUSH
// result := true ;
40791: LD_ADDR_VAR 0 3
40795: PUSH
40796: LD_INT 1
40798: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40799: LD_ADDR_VAR 0 5
40803: PUSH
40804: LD_VAR 0 2
40808: PPUSH
40809: CALL_OW 480
40813: ST_TO_ADDR
// if not tmp then
40814: LD_VAR 0 5
40818: NOT
40819: IFFALSE 40823
// exit ;
40821: GO 40872
// for i in tmp do
40823: LD_ADDR_VAR 0 4
40827: PUSH
40828: LD_VAR 0 5
40832: PUSH
40833: FOR_IN
40834: IFFALSE 40870
// if GetTech ( i , side ) <> state_researched then
40836: LD_VAR 0 4
40840: PPUSH
40841: LD_VAR 0 1
40845: PPUSH
40846: CALL_OW 321
40850: PUSH
40851: LD_INT 2
40853: NONEQUAL
40854: IFFALSE 40868
// begin result := false ;
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_INT 0
40863: ST_TO_ADDR
// exit ;
40864: POP
40865: POP
40866: GO 40872
// end ;
40868: GO 40833
40870: POP
40871: POP
// end ;
40872: LD_VAR 0 3
40876: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40877: LD_INT 0
40879: PPUSH
40880: PPUSH
40881: PPUSH
40882: PPUSH
40883: PPUSH
40884: PPUSH
40885: PPUSH
40886: PPUSH
40887: PPUSH
40888: PPUSH
40889: PPUSH
40890: PPUSH
40891: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40892: LD_VAR 0 1
40896: NOT
40897: PUSH
40898: LD_VAR 0 1
40902: PPUSH
40903: CALL_OW 257
40907: PUSH
40908: LD_INT 9
40910: NONEQUAL
40911: OR
40912: IFFALSE 40916
// exit ;
40914: GO 41489
// side := GetSide ( unit ) ;
40916: LD_ADDR_VAR 0 9
40920: PUSH
40921: LD_VAR 0 1
40925: PPUSH
40926: CALL_OW 255
40930: ST_TO_ADDR
// tech_space := tech_spacanom ;
40931: LD_ADDR_VAR 0 12
40935: PUSH
40936: LD_INT 29
40938: ST_TO_ADDR
// tech_time := tech_taurad ;
40939: LD_ADDR_VAR 0 13
40943: PUSH
40944: LD_INT 28
40946: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40947: LD_ADDR_VAR 0 11
40951: PUSH
40952: LD_VAR 0 1
40956: PPUSH
40957: CALL_OW 310
40961: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40962: LD_VAR 0 11
40966: PPUSH
40967: CALL_OW 247
40971: PUSH
40972: LD_INT 2
40974: EQUAL
40975: IFFALSE 40979
// exit ;
40977: GO 41489
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40979: LD_ADDR_VAR 0 8
40983: PUSH
40984: LD_INT 81
40986: PUSH
40987: LD_VAR 0 9
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 3
40998: PUSH
40999: LD_INT 21
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PPUSH
41017: CALL_OW 69
41021: ST_TO_ADDR
// if not tmp then
41022: LD_VAR 0 8
41026: NOT
41027: IFFALSE 41031
// exit ;
41029: GO 41489
// if in_unit then
41031: LD_VAR 0 11
41035: IFFALSE 41059
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41037: LD_ADDR_VAR 0 10
41041: PUSH
41042: LD_VAR 0 8
41046: PPUSH
41047: LD_VAR 0 11
41051: PPUSH
41052: CALL_OW 74
41056: ST_TO_ADDR
41057: GO 41079
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41059: LD_ADDR_VAR 0 10
41063: PUSH
41064: LD_VAR 0 8
41068: PPUSH
41069: LD_VAR 0 1
41073: PPUSH
41074: CALL_OW 74
41078: ST_TO_ADDR
// if not enemy then
41079: LD_VAR 0 10
41083: NOT
41084: IFFALSE 41088
// exit ;
41086: GO 41489
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41088: LD_VAR 0 11
41092: PUSH
41093: LD_VAR 0 11
41097: PPUSH
41098: LD_VAR 0 10
41102: PPUSH
41103: CALL_OW 296
41107: PUSH
41108: LD_INT 13
41110: GREATER
41111: AND
41112: PUSH
41113: LD_VAR 0 1
41117: PPUSH
41118: LD_VAR 0 10
41122: PPUSH
41123: CALL_OW 296
41127: PUSH
41128: LD_INT 12
41130: GREATER
41131: OR
41132: IFFALSE 41136
// exit ;
41134: GO 41489
// missile := [ 1 ] ;
41136: LD_ADDR_VAR 0 14
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41147: LD_VAR 0 9
41151: PPUSH
41152: LD_VAR 0 12
41156: PPUSH
41157: CALL_OW 325
41161: IFFALSE 41190
// missile := Replace ( missile , missile + 1 , 2 ) ;
41163: LD_ADDR_VAR 0 14
41167: PUSH
41168: LD_VAR 0 14
41172: PPUSH
41173: LD_VAR 0 14
41177: PUSH
41178: LD_INT 1
41180: PLUS
41181: PPUSH
41182: LD_INT 2
41184: PPUSH
41185: CALL_OW 1
41189: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41190: LD_VAR 0 9
41194: PPUSH
41195: LD_VAR 0 13
41199: PPUSH
41200: CALL_OW 325
41204: PUSH
41205: LD_VAR 0 10
41209: PPUSH
41210: CALL_OW 255
41214: PPUSH
41215: LD_VAR 0 13
41219: PPUSH
41220: CALL_OW 325
41224: NOT
41225: AND
41226: IFFALSE 41255
// missile := Replace ( missile , missile + 1 , 3 ) ;
41228: LD_ADDR_VAR 0 14
41232: PUSH
41233: LD_VAR 0 14
41237: PPUSH
41238: LD_VAR 0 14
41242: PUSH
41243: LD_INT 1
41245: PLUS
41246: PPUSH
41247: LD_INT 3
41249: PPUSH
41250: CALL_OW 1
41254: ST_TO_ADDR
// if missile < 2 then
41255: LD_VAR 0 14
41259: PUSH
41260: LD_INT 2
41262: LESS
41263: IFFALSE 41267
// exit ;
41265: GO 41489
// x := GetX ( enemy ) ;
41267: LD_ADDR_VAR 0 4
41271: PUSH
41272: LD_VAR 0 10
41276: PPUSH
41277: CALL_OW 250
41281: ST_TO_ADDR
// y := GetY ( enemy ) ;
41282: LD_ADDR_VAR 0 5
41286: PUSH
41287: LD_VAR 0 10
41291: PPUSH
41292: CALL_OW 251
41296: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41297: LD_ADDR_VAR 0 6
41301: PUSH
41302: LD_VAR 0 4
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PPUSH
41311: LD_INT 1
41313: PPUSH
41314: CALL_OW 12
41318: PLUS
41319: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41320: LD_ADDR_VAR 0 7
41324: PUSH
41325: LD_VAR 0 5
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PPUSH
41334: LD_INT 1
41336: PPUSH
41337: CALL_OW 12
41341: PLUS
41342: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41343: LD_VAR 0 6
41347: PPUSH
41348: LD_VAR 0 7
41352: PPUSH
41353: CALL_OW 488
41357: NOT
41358: IFFALSE 41380
// begin _x := x ;
41360: LD_ADDR_VAR 0 6
41364: PUSH
41365: LD_VAR 0 4
41369: ST_TO_ADDR
// _y := y ;
41370: LD_ADDR_VAR 0 7
41374: PUSH
41375: LD_VAR 0 5
41379: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_INT 1
41387: PPUSH
41388: LD_VAR 0 14
41392: PPUSH
41393: CALL_OW 12
41397: ST_TO_ADDR
// case i of 1 :
41398: LD_VAR 0 3
41402: PUSH
41403: LD_INT 1
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 41428
41411: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41412: LD_VAR 0 1
41416: PPUSH
41417: LD_VAR 0 10
41421: PPUSH
41422: CALL_OW 115
41426: GO 41489
41428: LD_INT 2
41430: DOUBLE
41431: EQUAL
41432: IFTRUE 41436
41434: GO 41458
41436: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41437: LD_VAR 0 1
41441: PPUSH
41442: LD_VAR 0 6
41446: PPUSH
41447: LD_VAR 0 7
41451: PPUSH
41452: CALL_OW 153
41456: GO 41489
41458: LD_INT 3
41460: DOUBLE
41461: EQUAL
41462: IFTRUE 41466
41464: GO 41488
41466: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41467: LD_VAR 0 1
41471: PPUSH
41472: LD_VAR 0 6
41476: PPUSH
41477: LD_VAR 0 7
41481: PPUSH
41482: CALL_OW 154
41486: GO 41489
41488: POP
// end ;
41489: LD_VAR 0 2
41493: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41494: LD_INT 0
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
// if not unit or not building then
41502: LD_VAR 0 1
41506: NOT
41507: PUSH
41508: LD_VAR 0 2
41512: NOT
41513: OR
41514: IFFALSE 41518
// exit ;
41516: GO 41676
// x := GetX ( building ) ;
41518: LD_ADDR_VAR 0 5
41522: PUSH
41523: LD_VAR 0 2
41527: PPUSH
41528: CALL_OW 250
41532: ST_TO_ADDR
// y := GetY ( building ) ;
41533: LD_ADDR_VAR 0 6
41537: PUSH
41538: LD_VAR 0 2
41542: PPUSH
41543: CALL_OW 251
41547: ST_TO_ADDR
// for i = 0 to 5 do
41548: LD_ADDR_VAR 0 4
41552: PUSH
41553: DOUBLE
41554: LD_INT 0
41556: DEC
41557: ST_TO_ADDR
41558: LD_INT 5
41560: PUSH
41561: FOR_TO
41562: IFFALSE 41674
// begin _x := ShiftX ( x , i , 3 ) ;
41564: LD_ADDR_VAR 0 7
41568: PUSH
41569: LD_VAR 0 5
41573: PPUSH
41574: LD_VAR 0 4
41578: PPUSH
41579: LD_INT 3
41581: PPUSH
41582: CALL_OW 272
41586: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41587: LD_ADDR_VAR 0 8
41591: PUSH
41592: LD_VAR 0 6
41596: PPUSH
41597: LD_VAR 0 4
41601: PPUSH
41602: LD_INT 3
41604: PPUSH
41605: CALL_OW 273
41609: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41610: LD_VAR 0 7
41614: PPUSH
41615: LD_VAR 0 8
41619: PPUSH
41620: CALL_OW 488
41624: NOT
41625: IFFALSE 41629
// continue ;
41627: GO 41561
// if HexInfo ( _x , _y ) = 0 then
41629: LD_VAR 0 7
41633: PPUSH
41634: LD_VAR 0 8
41638: PPUSH
41639: CALL_OW 428
41643: PUSH
41644: LD_INT 0
41646: EQUAL
41647: IFFALSE 41672
// begin ComMoveXY ( unit , _x , _y ) ;
41649: LD_VAR 0 1
41653: PPUSH
41654: LD_VAR 0 7
41658: PPUSH
41659: LD_VAR 0 8
41663: PPUSH
41664: CALL_OW 111
// exit ;
41668: POP
41669: POP
41670: GO 41676
// end ; end ;
41672: GO 41561
41674: POP
41675: POP
// end ;
41676: LD_VAR 0 3
41680: RET
// export function ScanBase ( side , base_area ) ; begin
41681: LD_INT 0
41683: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41684: LD_ADDR_VAR 0 3
41688: PUSH
41689: LD_VAR 0 2
41693: PPUSH
41694: LD_INT 81
41696: PUSH
41697: LD_VAR 0 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PPUSH
41706: CALL_OW 70
41710: ST_TO_ADDR
// end ;
41711: LD_VAR 0 3
41715: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41716: LD_INT 0
41718: PPUSH
41719: PPUSH
41720: PPUSH
41721: PPUSH
// result := false ;
41722: LD_ADDR_VAR 0 2
41726: PUSH
41727: LD_INT 0
41729: ST_TO_ADDR
// side := GetSide ( unit ) ;
41730: LD_ADDR_VAR 0 3
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: CALL_OW 255
41744: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41745: LD_ADDR_VAR 0 4
41749: PUSH
41750: LD_VAR 0 1
41754: PPUSH
41755: CALL_OW 248
41759: ST_TO_ADDR
// case nat of 1 :
41760: LD_VAR 0 4
41764: PUSH
41765: LD_INT 1
41767: DOUBLE
41768: EQUAL
41769: IFTRUE 41773
41771: GO 41784
41773: POP
// tech := tech_lassight ; 2 :
41774: LD_ADDR_VAR 0 5
41778: PUSH
41779: LD_INT 12
41781: ST_TO_ADDR
41782: GO 41823
41784: LD_INT 2
41786: DOUBLE
41787: EQUAL
41788: IFTRUE 41792
41790: GO 41803
41792: POP
// tech := tech_mortar ; 3 :
41793: LD_ADDR_VAR 0 5
41797: PUSH
41798: LD_INT 41
41800: ST_TO_ADDR
41801: GO 41823
41803: LD_INT 3
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41811
41809: GO 41822
41811: POP
// tech := tech_bazooka ; end ;
41812: LD_ADDR_VAR 0 5
41816: PUSH
41817: LD_INT 44
41819: ST_TO_ADDR
41820: GO 41823
41822: POP
// if Researched ( side , tech ) then
41823: LD_VAR 0 3
41827: PPUSH
41828: LD_VAR 0 5
41832: PPUSH
41833: CALL_OW 325
41837: IFFALSE 41864
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41839: LD_ADDR_VAR 0 2
41843: PUSH
41844: LD_INT 5
41846: PUSH
41847: LD_INT 8
41849: PUSH
41850: LD_INT 9
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: PUSH
41858: LD_VAR 0 4
41862: ARRAY
41863: ST_TO_ADDR
// end ;
41864: LD_VAR 0 2
41868: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41869: LD_INT 0
41871: PPUSH
41872: PPUSH
41873: PPUSH
// if not mines then
41874: LD_VAR 0 2
41878: NOT
41879: IFFALSE 41883
// exit ;
41881: GO 42027
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41883: LD_ADDR_VAR 0 5
41887: PUSH
41888: LD_INT 81
41890: PUSH
41891: LD_VAR 0 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 3
41902: PUSH
41903: LD_INT 21
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PPUSH
41921: CALL_OW 69
41925: ST_TO_ADDR
// for i in mines do
41926: LD_ADDR_VAR 0 4
41930: PUSH
41931: LD_VAR 0 2
41935: PUSH
41936: FOR_IN
41937: IFFALSE 42025
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41939: LD_VAR 0 4
41943: PUSH
41944: LD_INT 1
41946: ARRAY
41947: PPUSH
41948: LD_VAR 0 4
41952: PUSH
41953: LD_INT 2
41955: ARRAY
41956: PPUSH
41957: CALL_OW 458
41961: NOT
41962: IFFALSE 41966
// continue ;
41964: GO 41936
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41966: LD_VAR 0 4
41970: PUSH
41971: LD_INT 1
41973: ARRAY
41974: PPUSH
41975: LD_VAR 0 4
41979: PUSH
41980: LD_INT 2
41982: ARRAY
41983: PPUSH
41984: CALL_OW 428
41988: PUSH
41989: LD_VAR 0 5
41993: IN
41994: IFFALSE 42023
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41996: LD_VAR 0 4
42000: PUSH
42001: LD_INT 1
42003: ARRAY
42004: PPUSH
42005: LD_VAR 0 4
42009: PUSH
42010: LD_INT 2
42012: ARRAY
42013: PPUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: CALL_OW 456
// end ;
42023: GO 41936
42025: POP
42026: POP
// end ;
42027: LD_VAR 0 3
42031: RET
// export function Count ( array ) ; var i ; begin
42032: LD_INT 0
42034: PPUSH
42035: PPUSH
// result := 0 ;
42036: LD_ADDR_VAR 0 2
42040: PUSH
42041: LD_INT 0
42043: ST_TO_ADDR
// for i in array do
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_VAR 0 1
42053: PUSH
42054: FOR_IN
42055: IFFALSE 42079
// if i then
42057: LD_VAR 0 3
42061: IFFALSE 42077
// result := result + 1 ;
42063: LD_ADDR_VAR 0 2
42067: PUSH
42068: LD_VAR 0 2
42072: PUSH
42073: LD_INT 1
42075: PLUS
42076: ST_TO_ADDR
42077: GO 42054
42079: POP
42080: POP
// end ;
42081: LD_VAR 0 2
42085: RET
// export function IsEmpty ( building ) ; begin
42086: LD_INT 0
42088: PPUSH
// if not building then
42089: LD_VAR 0 1
42093: NOT
42094: IFFALSE 42098
// exit ;
42096: GO 42141
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42098: LD_ADDR_VAR 0 2
42102: PUSH
42103: LD_VAR 0 1
42107: PUSH
42108: LD_INT 22
42110: PUSH
42111: LD_VAR 0 1
42115: PPUSH
42116: CALL_OW 255
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 58
42127: PUSH
42128: EMPTY
42129: LIST
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PPUSH
42135: CALL_OW 69
42139: IN
42140: ST_TO_ADDR
// end ;
42141: LD_VAR 0 2
42145: RET
// export function IsNotFull ( building ) ; var places ; begin
42146: LD_INT 0
42148: PPUSH
42149: PPUSH
// if not building then
42150: LD_VAR 0 1
42154: NOT
42155: IFFALSE 42159
// exit ;
42157: GO 42330
// result := false ;
42159: LD_ADDR_VAR 0 2
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// places := 0 ;
42167: LD_ADDR_VAR 0 3
42171: PUSH
42172: LD_INT 0
42174: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42175: LD_VAR 0 1
42179: PPUSH
42180: CALL_OW 266
42184: PUSH
42185: LD_INT 0
42187: DOUBLE
42188: EQUAL
42189: IFTRUE 42247
42191: LD_INT 1
42193: DOUBLE
42194: EQUAL
42195: IFTRUE 42247
42197: LD_INT 6
42199: DOUBLE
42200: EQUAL
42201: IFTRUE 42247
42203: LD_INT 7
42205: DOUBLE
42206: EQUAL
42207: IFTRUE 42247
42209: LD_INT 8
42211: DOUBLE
42212: EQUAL
42213: IFTRUE 42247
42215: LD_INT 4
42217: DOUBLE
42218: EQUAL
42219: IFTRUE 42247
42221: LD_INT 5
42223: DOUBLE
42224: EQUAL
42225: IFTRUE 42247
42227: LD_INT 2
42229: DOUBLE
42230: EQUAL
42231: IFTRUE 42247
42233: LD_INT 3
42235: DOUBLE
42236: EQUAL
42237: IFTRUE 42247
42239: LD_INT 35
42241: DOUBLE
42242: EQUAL
42243: IFTRUE 42247
42245: GO 42258
42247: POP
// places := 6 ; b_bunker , b_breastwork :
42248: LD_ADDR_VAR 0 3
42252: PUSH
42253: LD_INT 6
42255: ST_TO_ADDR
42256: GO 42303
42258: LD_INT 32
42260: DOUBLE
42261: EQUAL
42262: IFTRUE 42272
42264: LD_INT 31
42266: DOUBLE
42267: EQUAL
42268: IFTRUE 42272
42270: GO 42283
42272: POP
// places := 1 ; b_control_tower :
42273: LD_ADDR_VAR 0 3
42277: PUSH
42278: LD_INT 1
42280: ST_TO_ADDR
42281: GO 42303
42283: LD_INT 36
42285: DOUBLE
42286: EQUAL
42287: IFTRUE 42291
42289: GO 42302
42291: POP
// places := 3 ; end ;
42292: LD_ADDR_VAR 0 3
42296: PUSH
42297: LD_INT 3
42299: ST_TO_ADDR
42300: GO 42303
42302: POP
// if places then
42303: LD_VAR 0 3
42307: IFFALSE 42330
// result := UnitsInside ( building ) < places ;
42309: LD_ADDR_VAR 0 2
42313: PUSH
42314: LD_VAR 0 1
42318: PPUSH
42319: CALL_OW 313
42323: PUSH
42324: LD_VAR 0 3
42328: LESS
42329: ST_TO_ADDR
// end ;
42330: LD_VAR 0 2
42334: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42335: LD_INT 0
42337: PPUSH
42338: PPUSH
42339: PPUSH
42340: PPUSH
// tmp := [ ] ;
42341: LD_ADDR_VAR 0 3
42345: PUSH
42346: EMPTY
42347: ST_TO_ADDR
// list := [ ] ;
42348: LD_ADDR_VAR 0 5
42352: PUSH
42353: EMPTY
42354: ST_TO_ADDR
// for i = 16 to 25 do
42355: LD_ADDR_VAR 0 4
42359: PUSH
42360: DOUBLE
42361: LD_INT 16
42363: DEC
42364: ST_TO_ADDR
42365: LD_INT 25
42367: PUSH
42368: FOR_TO
42369: IFFALSE 42442
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_VAR 0 3
42380: PUSH
42381: LD_INT 22
42383: PUSH
42384: LD_VAR 0 1
42388: PPUSH
42389: CALL_OW 255
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 91
42400: PUSH
42401: LD_VAR 0 1
42405: PUSH
42406: LD_INT 6
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 30
42416: PUSH
42417: LD_VAR 0 4
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: LIST
42430: PUSH
42431: EMPTY
42432: LIST
42433: PPUSH
42434: CALL_OW 69
42438: ADD
42439: ST_TO_ADDR
42440: GO 42368
42442: POP
42443: POP
// for i = 1 to tmp do
42444: LD_ADDR_VAR 0 4
42448: PUSH
42449: DOUBLE
42450: LD_INT 1
42452: DEC
42453: ST_TO_ADDR
42454: LD_VAR 0 3
42458: PUSH
42459: FOR_TO
42460: IFFALSE 42548
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42462: LD_ADDR_VAR 0 5
42466: PUSH
42467: LD_VAR 0 5
42471: PUSH
42472: LD_VAR 0 3
42476: PUSH
42477: LD_VAR 0 4
42481: ARRAY
42482: PPUSH
42483: CALL_OW 266
42487: PUSH
42488: LD_VAR 0 3
42492: PUSH
42493: LD_VAR 0 4
42497: ARRAY
42498: PPUSH
42499: CALL_OW 250
42503: PUSH
42504: LD_VAR 0 3
42508: PUSH
42509: LD_VAR 0 4
42513: ARRAY
42514: PPUSH
42515: CALL_OW 251
42519: PUSH
42520: LD_VAR 0 3
42524: PUSH
42525: LD_VAR 0 4
42529: ARRAY
42530: PPUSH
42531: CALL_OW 254
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: ADD
42545: ST_TO_ADDR
42546: GO 42459
42548: POP
42549: POP
// result := list ;
42550: LD_ADDR_VAR 0 2
42554: PUSH
42555: LD_VAR 0 5
42559: ST_TO_ADDR
// end ;
42560: LD_VAR 0 2
42564: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42565: LD_INT 0
42567: PPUSH
42568: PPUSH
42569: PPUSH
42570: PPUSH
42571: PPUSH
42572: PPUSH
42573: PPUSH
// if not factory then
42574: LD_VAR 0 1
42578: NOT
42579: IFFALSE 42583
// exit ;
42581: GO 43176
// if control = control_apeman then
42583: LD_VAR 0 4
42587: PUSH
42588: LD_INT 5
42590: EQUAL
42591: IFFALSE 42700
// begin tmp := UnitsInside ( factory ) ;
42593: LD_ADDR_VAR 0 8
42597: PUSH
42598: LD_VAR 0 1
42602: PPUSH
42603: CALL_OW 313
42607: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42608: LD_VAR 0 8
42612: PPUSH
42613: LD_INT 25
42615: PUSH
42616: LD_INT 12
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PPUSH
42623: CALL_OW 72
42627: NOT
42628: IFFALSE 42638
// control := control_manual ;
42630: LD_ADDR_VAR 0 4
42634: PUSH
42635: LD_INT 1
42637: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42638: LD_ADDR_VAR 0 8
42642: PUSH
42643: LD_VAR 0 1
42647: PPUSH
42648: CALL 42335 0 1
42652: ST_TO_ADDR
// if tmp then
42653: LD_VAR 0 8
42657: IFFALSE 42700
// begin for i in tmp do
42659: LD_ADDR_VAR 0 7
42663: PUSH
42664: LD_VAR 0 8
42668: PUSH
42669: FOR_IN
42670: IFFALSE 42698
// if i [ 1 ] = b_ext_radio then
42672: LD_VAR 0 7
42676: PUSH
42677: LD_INT 1
42679: ARRAY
42680: PUSH
42681: LD_INT 22
42683: EQUAL
42684: IFFALSE 42696
// begin control := control_remote ;
42686: LD_ADDR_VAR 0 4
42690: PUSH
42691: LD_INT 2
42693: ST_TO_ADDR
// break ;
42694: GO 42698
// end ;
42696: GO 42669
42698: POP
42699: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42700: LD_VAR 0 1
42704: PPUSH
42705: LD_VAR 0 2
42709: PPUSH
42710: LD_VAR 0 3
42714: PPUSH
42715: LD_VAR 0 4
42719: PPUSH
42720: LD_VAR 0 5
42724: PPUSH
42725: CALL_OW 448
42729: IFFALSE 42764
// begin result := [ chassis , engine , control , weapon ] ;
42731: LD_ADDR_VAR 0 6
42735: PUSH
42736: LD_VAR 0 2
42740: PUSH
42741: LD_VAR 0 3
42745: PUSH
42746: LD_VAR 0 4
42750: PUSH
42751: LD_VAR 0 5
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: ST_TO_ADDR
// exit ;
42762: GO 43176
// end ; _chassis := AvailableChassisList ( factory ) ;
42764: LD_ADDR_VAR 0 9
42768: PUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: CALL_OW 475
42778: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42779: LD_ADDR_VAR 0 11
42783: PUSH
42784: LD_VAR 0 1
42788: PPUSH
42789: CALL_OW 476
42793: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42794: LD_ADDR_VAR 0 12
42798: PUSH
42799: LD_VAR 0 1
42803: PPUSH
42804: CALL_OW 477
42808: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42809: LD_ADDR_VAR 0 10
42813: PUSH
42814: LD_VAR 0 1
42818: PPUSH
42819: CALL_OW 478
42823: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42824: LD_VAR 0 9
42828: NOT
42829: PUSH
42830: LD_VAR 0 11
42834: NOT
42835: OR
42836: PUSH
42837: LD_VAR 0 12
42841: NOT
42842: OR
42843: PUSH
42844: LD_VAR 0 10
42848: NOT
42849: OR
42850: IFFALSE 42885
// begin result := [ chassis , engine , control , weapon ] ;
42852: LD_ADDR_VAR 0 6
42856: PUSH
42857: LD_VAR 0 2
42861: PUSH
42862: LD_VAR 0 3
42866: PUSH
42867: LD_VAR 0 4
42871: PUSH
42872: LD_VAR 0 5
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: ST_TO_ADDR
// exit ;
42883: GO 43176
// end ; if not chassis in _chassis then
42885: LD_VAR 0 2
42889: PUSH
42890: LD_VAR 0 9
42894: IN
42895: NOT
42896: IFFALSE 42922
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42898: LD_ADDR_VAR 0 2
42902: PUSH
42903: LD_VAR 0 9
42907: PUSH
42908: LD_INT 1
42910: PPUSH
42911: LD_VAR 0 9
42915: PPUSH
42916: CALL_OW 12
42920: ARRAY
42921: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42922: LD_VAR 0 2
42926: PPUSH
42927: LD_VAR 0 3
42931: PPUSH
42932: CALL 43181 0 2
42936: NOT
42937: IFFALSE 42996
// repeat engine := _engine [ 1 ] ;
42939: LD_ADDR_VAR 0 3
42943: PUSH
42944: LD_VAR 0 11
42948: PUSH
42949: LD_INT 1
42951: ARRAY
42952: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42953: LD_ADDR_VAR 0 11
42957: PUSH
42958: LD_VAR 0 11
42962: PPUSH
42963: LD_INT 1
42965: PPUSH
42966: CALL_OW 3
42970: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42971: LD_VAR 0 2
42975: PPUSH
42976: LD_VAR 0 3
42980: PPUSH
42981: CALL 43181 0 2
42985: PUSH
42986: LD_VAR 0 11
42990: PUSH
42991: EMPTY
42992: EQUAL
42993: OR
42994: IFFALSE 42939
// if not control in _control then
42996: LD_VAR 0 4
43000: PUSH
43001: LD_VAR 0 12
43005: IN
43006: NOT
43007: IFFALSE 43033
// control := _control [ rand ( 1 , _control ) ] ;
43009: LD_ADDR_VAR 0 4
43013: PUSH
43014: LD_VAR 0 12
43018: PUSH
43019: LD_INT 1
43021: PPUSH
43022: LD_VAR 0 12
43026: PPUSH
43027: CALL_OW 12
43031: ARRAY
43032: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43033: LD_VAR 0 2
43037: PPUSH
43038: LD_VAR 0 5
43042: PPUSH
43043: CALL 43401 0 2
43047: NOT
43048: IFFALSE 43107
// repeat weapon := _weapon [ 1 ] ;
43050: LD_ADDR_VAR 0 5
43054: PUSH
43055: LD_VAR 0 10
43059: PUSH
43060: LD_INT 1
43062: ARRAY
43063: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43064: LD_ADDR_VAR 0 10
43068: PUSH
43069: LD_VAR 0 10
43073: PPUSH
43074: LD_INT 1
43076: PPUSH
43077: CALL_OW 3
43081: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43082: LD_VAR 0 2
43086: PPUSH
43087: LD_VAR 0 5
43091: PPUSH
43092: CALL 43401 0 2
43096: PUSH
43097: LD_VAR 0 10
43101: PUSH
43102: EMPTY
43103: EQUAL
43104: OR
43105: IFFALSE 43050
// result := [ ] ;
43107: LD_ADDR_VAR 0 6
43111: PUSH
43112: EMPTY
43113: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43114: LD_VAR 0 1
43118: PPUSH
43119: LD_VAR 0 2
43123: PPUSH
43124: LD_VAR 0 3
43128: PPUSH
43129: LD_VAR 0 4
43133: PPUSH
43134: LD_VAR 0 5
43138: PPUSH
43139: CALL_OW 448
43143: IFFALSE 43176
// result := [ chassis , engine , control , weapon ] ;
43145: LD_ADDR_VAR 0 6
43149: PUSH
43150: LD_VAR 0 2
43154: PUSH
43155: LD_VAR 0 3
43159: PUSH
43160: LD_VAR 0 4
43164: PUSH
43165: LD_VAR 0 5
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// end ;
43176: LD_VAR 0 6
43180: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43181: LD_INT 0
43183: PPUSH
// if not chassis or not engine then
43184: LD_VAR 0 1
43188: NOT
43189: PUSH
43190: LD_VAR 0 2
43194: NOT
43195: OR
43196: IFFALSE 43200
// exit ;
43198: GO 43396
// case engine of engine_solar :
43200: LD_VAR 0 2
43204: PUSH
43205: LD_INT 2
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43213
43211: GO 43251
43213: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43214: LD_ADDR_VAR 0 3
43218: PUSH
43219: LD_INT 11
43221: PUSH
43222: LD_INT 12
43224: PUSH
43225: LD_INT 13
43227: PUSH
43228: LD_INT 14
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: ST_TO_ADDR
43249: GO 43380
43251: LD_INT 1
43253: DOUBLE
43254: EQUAL
43255: IFTRUE 43259
43257: GO 43321
43259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43260: LD_ADDR_VAR 0 3
43264: PUSH
43265: LD_INT 11
43267: PUSH
43268: LD_INT 12
43270: PUSH
43271: LD_INT 13
43273: PUSH
43274: LD_INT 14
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: LD_INT 3
43285: PUSH
43286: LD_INT 4
43288: PUSH
43289: LD_INT 5
43291: PUSH
43292: LD_INT 21
43294: PUSH
43295: LD_INT 23
43297: PUSH
43298: LD_INT 22
43300: PUSH
43301: LD_INT 24
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: ST_TO_ADDR
43319: GO 43380
43321: LD_INT 3
43323: DOUBLE
43324: EQUAL
43325: IFTRUE 43329
43327: GO 43379
43329: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43330: LD_ADDR_VAR 0 3
43334: PUSH
43335: LD_INT 13
43337: PUSH
43338: LD_INT 14
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 3
43346: PUSH
43347: LD_INT 4
43349: PUSH
43350: LD_INT 5
43352: PUSH
43353: LD_INT 21
43355: PUSH
43356: LD_INT 22
43358: PUSH
43359: LD_INT 23
43361: PUSH
43362: LD_INT 24
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: ST_TO_ADDR
43377: GO 43380
43379: POP
// result := ( chassis in result ) ;
43380: LD_ADDR_VAR 0 3
43384: PUSH
43385: LD_VAR 0 1
43389: PUSH
43390: LD_VAR 0 3
43394: IN
43395: ST_TO_ADDR
// end ;
43396: LD_VAR 0 3
43400: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43401: LD_INT 0
43403: PPUSH
// if not chassis or not weapon then
43404: LD_VAR 0 1
43408: NOT
43409: PUSH
43410: LD_VAR 0 2
43414: NOT
43415: OR
43416: IFFALSE 43420
// exit ;
43418: GO 44480
// case weapon of us_machine_gun :
43420: LD_VAR 0 2
43424: PUSH
43425: LD_INT 2
43427: DOUBLE
43428: EQUAL
43429: IFTRUE 43433
43431: GO 43463
43433: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43434: LD_ADDR_VAR 0 3
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: LD_INT 3
43447: PUSH
43448: LD_INT 4
43450: PUSH
43451: LD_INT 5
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
43461: GO 44464
43463: LD_INT 3
43465: DOUBLE
43466: EQUAL
43467: IFTRUE 43471
43469: GO 43501
43471: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43472: LD_ADDR_VAR 0 3
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: LD_INT 4
43488: PUSH
43489: LD_INT 5
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: ST_TO_ADDR
43499: GO 44464
43501: LD_INT 11
43503: DOUBLE
43504: EQUAL
43505: IFTRUE 43509
43507: GO 43539
43509: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43510: LD_ADDR_VAR 0 3
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 3
43523: PUSH
43524: LD_INT 4
43526: PUSH
43527: LD_INT 5
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: ST_TO_ADDR
43537: GO 44464
43539: LD_INT 4
43541: DOUBLE
43542: EQUAL
43543: IFTRUE 43547
43545: GO 43573
43547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43548: LD_ADDR_VAR 0 3
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: LD_INT 4
43561: PUSH
43562: LD_INT 5
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
43571: GO 44464
43573: LD_INT 5
43575: DOUBLE
43576: EQUAL
43577: IFTRUE 43581
43579: GO 43607
43581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43582: LD_ADDR_VAR 0 3
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: LD_INT 4
43595: PUSH
43596: LD_INT 5
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: ST_TO_ADDR
43605: GO 44464
43607: LD_INT 9
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43615
43613: GO 43641
43615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43616: LD_ADDR_VAR 0 3
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 3
43626: PUSH
43627: LD_INT 4
43629: PUSH
43630: LD_INT 5
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: ST_TO_ADDR
43639: GO 44464
43641: LD_INT 7
43643: DOUBLE
43644: EQUAL
43645: IFTRUE 43649
43647: GO 43675
43649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43650: LD_ADDR_VAR 0 3
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: LD_INT 3
43660: PUSH
43661: LD_INT 4
43663: PUSH
43664: LD_INT 5
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
43673: GO 44464
43675: LD_INT 12
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43683
43681: GO 43709
43683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43684: LD_ADDR_VAR 0 3
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: LD_INT 4
43697: PUSH
43698: LD_INT 5
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: ST_TO_ADDR
43707: GO 44464
43709: LD_INT 13
43711: DOUBLE
43712: EQUAL
43713: IFTRUE 43717
43715: GO 43743
43717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43718: LD_ADDR_VAR 0 3
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: LD_INT 4
43731: PUSH
43732: LD_INT 5
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
43741: GO 44464
43743: LD_INT 14
43745: DOUBLE
43746: EQUAL
43747: IFTRUE 43751
43749: GO 43769
43751: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43752: LD_ADDR_VAR 0 3
43756: PUSH
43757: LD_INT 4
43759: PUSH
43760: LD_INT 5
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: ST_TO_ADDR
43767: GO 44464
43769: LD_INT 6
43771: DOUBLE
43772: EQUAL
43773: IFTRUE 43777
43775: GO 43795
43777: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43778: LD_ADDR_VAR 0 3
43782: PUSH
43783: LD_INT 4
43785: PUSH
43786: LD_INT 5
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: ST_TO_ADDR
43793: GO 44464
43795: LD_INT 10
43797: DOUBLE
43798: EQUAL
43799: IFTRUE 43803
43801: GO 43821
43803: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43804: LD_ADDR_VAR 0 3
43808: PUSH
43809: LD_INT 4
43811: PUSH
43812: LD_INT 5
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: ST_TO_ADDR
43819: GO 44464
43821: LD_INT 22
43823: DOUBLE
43824: EQUAL
43825: IFTRUE 43829
43827: GO 43855
43829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43830: LD_ADDR_VAR 0 3
43834: PUSH
43835: LD_INT 11
43837: PUSH
43838: LD_INT 12
43840: PUSH
43841: LD_INT 13
43843: PUSH
43844: LD_INT 14
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
43853: GO 44464
43855: LD_INT 23
43857: DOUBLE
43858: EQUAL
43859: IFTRUE 43863
43861: GO 43889
43863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43864: LD_ADDR_VAR 0 3
43868: PUSH
43869: LD_INT 11
43871: PUSH
43872: LD_INT 12
43874: PUSH
43875: LD_INT 13
43877: PUSH
43878: LD_INT 14
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
43887: GO 44464
43889: LD_INT 24
43891: DOUBLE
43892: EQUAL
43893: IFTRUE 43897
43895: GO 43923
43897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: LD_INT 11
43905: PUSH
43906: LD_INT 12
43908: PUSH
43909: LD_INT 13
43911: PUSH
43912: LD_INT 14
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: ST_TO_ADDR
43921: GO 44464
43923: LD_INT 30
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43931
43929: GO 43957
43931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43932: LD_ADDR_VAR 0 3
43936: PUSH
43937: LD_INT 11
43939: PUSH
43940: LD_INT 12
43942: PUSH
43943: LD_INT 13
43945: PUSH
43946: LD_INT 14
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
43955: GO 44464
43957: LD_INT 25
43959: DOUBLE
43960: EQUAL
43961: IFTRUE 43965
43963: GO 43983
43965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43966: LD_ADDR_VAR 0 3
43970: PUSH
43971: LD_INT 13
43973: PUSH
43974: LD_INT 14
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: ST_TO_ADDR
43981: GO 44464
43983: LD_INT 27
43985: DOUBLE
43986: EQUAL
43987: IFTRUE 43991
43989: GO 44009
43991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43992: LD_ADDR_VAR 0 3
43996: PUSH
43997: LD_INT 13
43999: PUSH
44000: LD_INT 14
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: ST_TO_ADDR
44007: GO 44464
44009: LD_INT 92
44011: DOUBLE
44012: EQUAL
44013: IFTRUE 44017
44015: GO 44043
44017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44018: LD_ADDR_VAR 0 3
44022: PUSH
44023: LD_INT 11
44025: PUSH
44026: LD_INT 12
44028: PUSH
44029: LD_INT 13
44031: PUSH
44032: LD_INT 14
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
44041: GO 44464
44043: LD_INT 28
44045: DOUBLE
44046: EQUAL
44047: IFTRUE 44051
44049: GO 44069
44051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44052: LD_ADDR_VAR 0 3
44056: PUSH
44057: LD_INT 13
44059: PUSH
44060: LD_INT 14
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: ST_TO_ADDR
44067: GO 44464
44069: LD_INT 29
44071: DOUBLE
44072: EQUAL
44073: IFTRUE 44077
44075: GO 44095
44077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44078: LD_ADDR_VAR 0 3
44082: PUSH
44083: LD_INT 13
44085: PUSH
44086: LD_INT 14
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: ST_TO_ADDR
44093: GO 44464
44095: LD_INT 31
44097: DOUBLE
44098: EQUAL
44099: IFTRUE 44103
44101: GO 44121
44103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44104: LD_ADDR_VAR 0 3
44108: PUSH
44109: LD_INT 13
44111: PUSH
44112: LD_INT 14
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: ST_TO_ADDR
44119: GO 44464
44121: LD_INT 26
44123: DOUBLE
44124: EQUAL
44125: IFTRUE 44129
44127: GO 44147
44129: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44130: LD_ADDR_VAR 0 3
44134: PUSH
44135: LD_INT 13
44137: PUSH
44138: LD_INT 14
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: ST_TO_ADDR
44145: GO 44464
44147: LD_INT 42
44149: DOUBLE
44150: EQUAL
44151: IFTRUE 44155
44153: GO 44181
44155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44156: LD_ADDR_VAR 0 3
44160: PUSH
44161: LD_INT 21
44163: PUSH
44164: LD_INT 22
44166: PUSH
44167: LD_INT 23
44169: PUSH
44170: LD_INT 24
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: ST_TO_ADDR
44179: GO 44464
44181: LD_INT 43
44183: DOUBLE
44184: EQUAL
44185: IFTRUE 44189
44187: GO 44215
44189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44190: LD_ADDR_VAR 0 3
44194: PUSH
44195: LD_INT 21
44197: PUSH
44198: LD_INT 22
44200: PUSH
44201: LD_INT 23
44203: PUSH
44204: LD_INT 24
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: ST_TO_ADDR
44213: GO 44464
44215: LD_INT 44
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44223
44221: GO 44249
44223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_INT 21
44231: PUSH
44232: LD_INT 22
44234: PUSH
44235: LD_INT 23
44237: PUSH
44238: LD_INT 24
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
44247: GO 44464
44249: LD_INT 45
44251: DOUBLE
44252: EQUAL
44253: IFTRUE 44257
44255: GO 44283
44257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44258: LD_ADDR_VAR 0 3
44262: PUSH
44263: LD_INT 21
44265: PUSH
44266: LD_INT 22
44268: PUSH
44269: LD_INT 23
44271: PUSH
44272: LD_INT 24
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: ST_TO_ADDR
44281: GO 44464
44283: LD_INT 49
44285: DOUBLE
44286: EQUAL
44287: IFTRUE 44291
44289: GO 44317
44291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 21
44299: PUSH
44300: LD_INT 22
44302: PUSH
44303: LD_INT 23
44305: PUSH
44306: LD_INT 24
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
44315: GO 44464
44317: LD_INT 51
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44325
44323: GO 44351
44325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44326: LD_ADDR_VAR 0 3
44330: PUSH
44331: LD_INT 21
44333: PUSH
44334: LD_INT 22
44336: PUSH
44337: LD_INT 23
44339: PUSH
44340: LD_INT 24
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
44349: GO 44464
44351: LD_INT 52
44353: DOUBLE
44354: EQUAL
44355: IFTRUE 44359
44357: GO 44385
44359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44360: LD_ADDR_VAR 0 3
44364: PUSH
44365: LD_INT 21
44367: PUSH
44368: LD_INT 22
44370: PUSH
44371: LD_INT 23
44373: PUSH
44374: LD_INT 24
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
44383: GO 44464
44385: LD_INT 53
44387: DOUBLE
44388: EQUAL
44389: IFTRUE 44393
44391: GO 44411
44393: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44394: LD_ADDR_VAR 0 3
44398: PUSH
44399: LD_INT 23
44401: PUSH
44402: LD_INT 24
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: ST_TO_ADDR
44409: GO 44464
44411: LD_INT 46
44413: DOUBLE
44414: EQUAL
44415: IFTRUE 44419
44417: GO 44437
44419: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44420: LD_ADDR_VAR 0 3
44424: PUSH
44425: LD_INT 23
44427: PUSH
44428: LD_INT 24
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: ST_TO_ADDR
44435: GO 44464
44437: LD_INT 47
44439: DOUBLE
44440: EQUAL
44441: IFTRUE 44445
44443: GO 44463
44445: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44446: LD_ADDR_VAR 0 3
44450: PUSH
44451: LD_INT 23
44453: PUSH
44454: LD_INT 24
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: ST_TO_ADDR
44461: GO 44464
44463: POP
// result := ( chassis in result ) ;
44464: LD_ADDR_VAR 0 3
44468: PUSH
44469: LD_VAR 0 1
44473: PUSH
44474: LD_VAR 0 3
44478: IN
44479: ST_TO_ADDR
// end ;
44480: LD_VAR 0 3
44484: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44485: LD_INT 0
44487: PPUSH
44488: PPUSH
44489: PPUSH
44490: PPUSH
44491: PPUSH
44492: PPUSH
44493: PPUSH
// result := array ;
44494: LD_ADDR_VAR 0 5
44498: PUSH
44499: LD_VAR 0 1
44503: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44504: LD_VAR 0 1
44508: NOT
44509: PUSH
44510: LD_VAR 0 2
44514: NOT
44515: OR
44516: PUSH
44517: LD_VAR 0 3
44521: NOT
44522: OR
44523: PUSH
44524: LD_VAR 0 2
44528: PUSH
44529: LD_VAR 0 1
44533: GREATER
44534: OR
44535: PUSH
44536: LD_VAR 0 3
44540: PUSH
44541: LD_VAR 0 1
44545: GREATER
44546: OR
44547: IFFALSE 44551
// exit ;
44549: GO 44847
// if direction then
44551: LD_VAR 0 4
44555: IFFALSE 44619
// begin d := 1 ;
44557: LD_ADDR_VAR 0 9
44561: PUSH
44562: LD_INT 1
44564: ST_TO_ADDR
// if i_from > i_to then
44565: LD_VAR 0 2
44569: PUSH
44570: LD_VAR 0 3
44574: GREATER
44575: IFFALSE 44601
// length := ( array - i_from ) + i_to else
44577: LD_ADDR_VAR 0 11
44581: PUSH
44582: LD_VAR 0 1
44586: PUSH
44587: LD_VAR 0 2
44591: MINUS
44592: PUSH
44593: LD_VAR 0 3
44597: PLUS
44598: ST_TO_ADDR
44599: GO 44617
// length := i_to - i_from ;
44601: LD_ADDR_VAR 0 11
44605: PUSH
44606: LD_VAR 0 3
44610: PUSH
44611: LD_VAR 0 2
44615: MINUS
44616: ST_TO_ADDR
// end else
44617: GO 44680
// begin d := - 1 ;
44619: LD_ADDR_VAR 0 9
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: ST_TO_ADDR
// if i_from > i_to then
44628: LD_VAR 0 2
44632: PUSH
44633: LD_VAR 0 3
44637: GREATER
44638: IFFALSE 44658
// length := i_from - i_to else
44640: LD_ADDR_VAR 0 11
44644: PUSH
44645: LD_VAR 0 2
44649: PUSH
44650: LD_VAR 0 3
44654: MINUS
44655: ST_TO_ADDR
44656: GO 44680
// length := ( array - i_to ) + i_from ;
44658: LD_ADDR_VAR 0 11
44662: PUSH
44663: LD_VAR 0 1
44667: PUSH
44668: LD_VAR 0 3
44672: MINUS
44673: PUSH
44674: LD_VAR 0 2
44678: PLUS
44679: ST_TO_ADDR
// end ; if not length then
44680: LD_VAR 0 11
44684: NOT
44685: IFFALSE 44689
// exit ;
44687: GO 44847
// tmp := array ;
44689: LD_ADDR_VAR 0 10
44693: PUSH
44694: LD_VAR 0 1
44698: ST_TO_ADDR
// for i = 1 to length do
44699: LD_ADDR_VAR 0 6
44703: PUSH
44704: DOUBLE
44705: LD_INT 1
44707: DEC
44708: ST_TO_ADDR
44709: LD_VAR 0 11
44713: PUSH
44714: FOR_TO
44715: IFFALSE 44835
// begin for j = 1 to array do
44717: LD_ADDR_VAR 0 7
44721: PUSH
44722: DOUBLE
44723: LD_INT 1
44725: DEC
44726: ST_TO_ADDR
44727: LD_VAR 0 1
44731: PUSH
44732: FOR_TO
44733: IFFALSE 44821
// begin k := j + d ;
44735: LD_ADDR_VAR 0 8
44739: PUSH
44740: LD_VAR 0 7
44744: PUSH
44745: LD_VAR 0 9
44749: PLUS
44750: ST_TO_ADDR
// if k > array then
44751: LD_VAR 0 8
44755: PUSH
44756: LD_VAR 0 1
44760: GREATER
44761: IFFALSE 44771
// k := 1 ;
44763: LD_ADDR_VAR 0 8
44767: PUSH
44768: LD_INT 1
44770: ST_TO_ADDR
// if not k then
44771: LD_VAR 0 8
44775: NOT
44776: IFFALSE 44788
// k := array ;
44778: LD_ADDR_VAR 0 8
44782: PUSH
44783: LD_VAR 0 1
44787: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44788: LD_ADDR_VAR 0 10
44792: PUSH
44793: LD_VAR 0 10
44797: PPUSH
44798: LD_VAR 0 8
44802: PPUSH
44803: LD_VAR 0 1
44807: PUSH
44808: LD_VAR 0 7
44812: ARRAY
44813: PPUSH
44814: CALL_OW 1
44818: ST_TO_ADDR
// end ;
44819: GO 44732
44821: POP
44822: POP
// array := tmp ;
44823: LD_ADDR_VAR 0 1
44827: PUSH
44828: LD_VAR 0 10
44832: ST_TO_ADDR
// end ;
44833: GO 44714
44835: POP
44836: POP
// result := array ;
44837: LD_ADDR_VAR 0 5
44841: PUSH
44842: LD_VAR 0 1
44846: ST_TO_ADDR
// end ;
44847: LD_VAR 0 5
44851: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44852: LD_INT 0
44854: PPUSH
44855: PPUSH
// result := 0 ;
44856: LD_ADDR_VAR 0 3
44860: PUSH
44861: LD_INT 0
44863: ST_TO_ADDR
// if not array or not value in array then
44864: LD_VAR 0 1
44868: NOT
44869: PUSH
44870: LD_VAR 0 2
44874: PUSH
44875: LD_VAR 0 1
44879: IN
44880: NOT
44881: OR
44882: IFFALSE 44886
// exit ;
44884: GO 44940
// for i = 1 to array do
44886: LD_ADDR_VAR 0 4
44890: PUSH
44891: DOUBLE
44892: LD_INT 1
44894: DEC
44895: ST_TO_ADDR
44896: LD_VAR 0 1
44900: PUSH
44901: FOR_TO
44902: IFFALSE 44938
// if value = array [ i ] then
44904: LD_VAR 0 2
44908: PUSH
44909: LD_VAR 0 1
44913: PUSH
44914: LD_VAR 0 4
44918: ARRAY
44919: EQUAL
44920: IFFALSE 44936
// begin result := i ;
44922: LD_ADDR_VAR 0 3
44926: PUSH
44927: LD_VAR 0 4
44931: ST_TO_ADDR
// exit ;
44932: POP
44933: POP
44934: GO 44940
// end ;
44936: GO 44901
44938: POP
44939: POP
// end ;
44940: LD_VAR 0 3
44944: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44945: LD_INT 0
44947: PPUSH
// vc_chassis := chassis ;
44948: LD_ADDR_OWVAR 37
44952: PUSH
44953: LD_VAR 0 1
44957: ST_TO_ADDR
// vc_engine := engine ;
44958: LD_ADDR_OWVAR 39
44962: PUSH
44963: LD_VAR 0 2
44967: ST_TO_ADDR
// vc_control := control ;
44968: LD_ADDR_OWVAR 38
44972: PUSH
44973: LD_VAR 0 3
44977: ST_TO_ADDR
// vc_weapon := weapon ;
44978: LD_ADDR_OWVAR 40
44982: PUSH
44983: LD_VAR 0 4
44987: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44988: LD_ADDR_OWVAR 41
44992: PUSH
44993: LD_VAR 0 5
44997: ST_TO_ADDR
// end ;
44998: LD_VAR 0 6
45002: RET
// export function WantPlant ( unit ) ; var task ; begin
45003: LD_INT 0
45005: PPUSH
45006: PPUSH
// result := false ;
45007: LD_ADDR_VAR 0 2
45011: PUSH
45012: LD_INT 0
45014: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45015: LD_ADDR_VAR 0 3
45019: PUSH
45020: LD_VAR 0 1
45024: PPUSH
45025: CALL_OW 437
45029: ST_TO_ADDR
// if task then
45030: LD_VAR 0 3
45034: IFFALSE 45062
// if task [ 1 ] [ 1 ] = p then
45036: LD_VAR 0 3
45040: PUSH
45041: LD_INT 1
45043: ARRAY
45044: PUSH
45045: LD_INT 1
45047: ARRAY
45048: PUSH
45049: LD_STRING p
45051: EQUAL
45052: IFFALSE 45062
// result := true ;
45054: LD_ADDR_VAR 0 2
45058: PUSH
45059: LD_INT 1
45061: ST_TO_ADDR
// end ;
45062: LD_VAR 0 2
45066: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45067: LD_INT 0
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
// if pos < 1 then
45073: LD_VAR 0 2
45077: PUSH
45078: LD_INT 1
45080: LESS
45081: IFFALSE 45085
// exit ;
45083: GO 45388
// if pos = 1 then
45085: LD_VAR 0 2
45089: PUSH
45090: LD_INT 1
45092: EQUAL
45093: IFFALSE 45126
// result := Replace ( arr , pos [ 1 ] , value ) else
45095: LD_ADDR_VAR 0 4
45099: PUSH
45100: LD_VAR 0 1
45104: PPUSH
45105: LD_VAR 0 2
45109: PUSH
45110: LD_INT 1
45112: ARRAY
45113: PPUSH
45114: LD_VAR 0 3
45118: PPUSH
45119: CALL_OW 1
45123: ST_TO_ADDR
45124: GO 45388
// begin tmp := arr ;
45126: LD_ADDR_VAR 0 6
45130: PUSH
45131: LD_VAR 0 1
45135: ST_TO_ADDR
// s_arr := [ tmp ] ;
45136: LD_ADDR_VAR 0 7
45140: PUSH
45141: LD_VAR 0 6
45145: PUSH
45146: EMPTY
45147: LIST
45148: ST_TO_ADDR
// for i = 1 to pos - 1 do
45149: LD_ADDR_VAR 0 5
45153: PUSH
45154: DOUBLE
45155: LD_INT 1
45157: DEC
45158: ST_TO_ADDR
45159: LD_VAR 0 2
45163: PUSH
45164: LD_INT 1
45166: MINUS
45167: PUSH
45168: FOR_TO
45169: IFFALSE 45214
// begin tmp := tmp [ pos [ i ] ] ;
45171: LD_ADDR_VAR 0 6
45175: PUSH
45176: LD_VAR 0 6
45180: PUSH
45181: LD_VAR 0 2
45185: PUSH
45186: LD_VAR 0 5
45190: ARRAY
45191: ARRAY
45192: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45193: LD_ADDR_VAR 0 7
45197: PUSH
45198: LD_VAR 0 7
45202: PUSH
45203: LD_VAR 0 6
45207: PUSH
45208: EMPTY
45209: LIST
45210: ADD
45211: ST_TO_ADDR
// end ;
45212: GO 45168
45214: POP
45215: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45216: LD_ADDR_VAR 0 6
45220: PUSH
45221: LD_VAR 0 6
45225: PPUSH
45226: LD_VAR 0 2
45230: PUSH
45231: LD_VAR 0 2
45235: ARRAY
45236: PPUSH
45237: LD_VAR 0 3
45241: PPUSH
45242: CALL_OW 1
45246: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45247: LD_ADDR_VAR 0 7
45251: PUSH
45252: LD_VAR 0 7
45256: PPUSH
45257: LD_VAR 0 7
45261: PPUSH
45262: LD_VAR 0 6
45266: PPUSH
45267: CALL_OW 1
45271: ST_TO_ADDR
// for i = s_arr downto 2 do
45272: LD_ADDR_VAR 0 5
45276: PUSH
45277: DOUBLE
45278: LD_VAR 0 7
45282: INC
45283: ST_TO_ADDR
45284: LD_INT 2
45286: PUSH
45287: FOR_DOWNTO
45288: IFFALSE 45372
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45290: LD_ADDR_VAR 0 6
45294: PUSH
45295: LD_VAR 0 7
45299: PUSH
45300: LD_VAR 0 5
45304: PUSH
45305: LD_INT 1
45307: MINUS
45308: ARRAY
45309: PPUSH
45310: LD_VAR 0 2
45314: PUSH
45315: LD_VAR 0 5
45319: PUSH
45320: LD_INT 1
45322: MINUS
45323: ARRAY
45324: PPUSH
45325: LD_VAR 0 7
45329: PUSH
45330: LD_VAR 0 5
45334: ARRAY
45335: PPUSH
45336: CALL_OW 1
45340: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45341: LD_ADDR_VAR 0 7
45345: PUSH
45346: LD_VAR 0 7
45350: PPUSH
45351: LD_VAR 0 5
45355: PUSH
45356: LD_INT 1
45358: MINUS
45359: PPUSH
45360: LD_VAR 0 6
45364: PPUSH
45365: CALL_OW 1
45369: ST_TO_ADDR
// end ;
45370: GO 45287
45372: POP
45373: POP
// result := s_arr [ 1 ] ;
45374: LD_ADDR_VAR 0 4
45378: PUSH
45379: LD_VAR 0 7
45383: PUSH
45384: LD_INT 1
45386: ARRAY
45387: ST_TO_ADDR
// end ; end ;
45388: LD_VAR 0 4
45392: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45393: LD_INT 0
45395: PPUSH
45396: PPUSH
// if not list then
45397: LD_VAR 0 1
45401: NOT
45402: IFFALSE 45406
// exit ;
45404: GO 45497
// i := list [ pos1 ] ;
45406: LD_ADDR_VAR 0 5
45410: PUSH
45411: LD_VAR 0 1
45415: PUSH
45416: LD_VAR 0 2
45420: ARRAY
45421: ST_TO_ADDR
// if not i then
45422: LD_VAR 0 5
45426: NOT
45427: IFFALSE 45431
// exit ;
45429: GO 45497
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45431: LD_ADDR_VAR 0 1
45435: PUSH
45436: LD_VAR 0 1
45440: PPUSH
45441: LD_VAR 0 2
45445: PPUSH
45446: LD_VAR 0 1
45450: PUSH
45451: LD_VAR 0 3
45455: ARRAY
45456: PPUSH
45457: CALL_OW 1
45461: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45462: LD_ADDR_VAR 0 1
45466: PUSH
45467: LD_VAR 0 1
45471: PPUSH
45472: LD_VAR 0 3
45476: PPUSH
45477: LD_VAR 0 5
45481: PPUSH
45482: CALL_OW 1
45486: ST_TO_ADDR
// result := list ;
45487: LD_ADDR_VAR 0 4
45491: PUSH
45492: LD_VAR 0 1
45496: ST_TO_ADDR
// end ;
45497: LD_VAR 0 4
45501: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45502: LD_INT 0
45504: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45505: LD_ADDR_VAR 0 5
45509: PUSH
45510: LD_VAR 0 1
45514: PPUSH
45515: CALL_OW 250
45519: PPUSH
45520: LD_VAR 0 1
45524: PPUSH
45525: CALL_OW 251
45529: PPUSH
45530: LD_VAR 0 2
45534: PPUSH
45535: LD_VAR 0 3
45539: PPUSH
45540: LD_VAR 0 4
45544: PPUSH
45545: CALL 45555 0 5
45549: ST_TO_ADDR
// end ;
45550: LD_VAR 0 5
45554: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45555: LD_INT 0
45557: PPUSH
45558: PPUSH
45559: PPUSH
45560: PPUSH
// if not list then
45561: LD_VAR 0 3
45565: NOT
45566: IFFALSE 45570
// exit ;
45568: GO 45958
// result := [ ] ;
45570: LD_ADDR_VAR 0 6
45574: PUSH
45575: EMPTY
45576: ST_TO_ADDR
// for i in list do
45577: LD_ADDR_VAR 0 7
45581: PUSH
45582: LD_VAR 0 3
45586: PUSH
45587: FOR_IN
45588: IFFALSE 45790
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45590: LD_ADDR_VAR 0 9
45594: PUSH
45595: LD_VAR 0 7
45599: PPUSH
45600: LD_VAR 0 1
45604: PPUSH
45605: LD_VAR 0 2
45609: PPUSH
45610: CALL_OW 297
45614: ST_TO_ADDR
// if not result then
45615: LD_VAR 0 6
45619: NOT
45620: IFFALSE 45646
// result := [ [ i , tmp ] ] else
45622: LD_ADDR_VAR 0 6
45626: PUSH
45627: LD_VAR 0 7
45631: PUSH
45632: LD_VAR 0 9
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: EMPTY
45642: LIST
45643: ST_TO_ADDR
45644: GO 45788
// begin if result [ result ] [ 2 ] < tmp then
45646: LD_VAR 0 6
45650: PUSH
45651: LD_VAR 0 6
45655: ARRAY
45656: PUSH
45657: LD_INT 2
45659: ARRAY
45660: PUSH
45661: LD_VAR 0 9
45665: LESS
45666: IFFALSE 45708
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45668: LD_ADDR_VAR 0 6
45672: PUSH
45673: LD_VAR 0 6
45677: PPUSH
45678: LD_VAR 0 6
45682: PUSH
45683: LD_INT 1
45685: PLUS
45686: PPUSH
45687: LD_VAR 0 7
45691: PUSH
45692: LD_VAR 0 9
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PPUSH
45701: CALL_OW 2
45705: ST_TO_ADDR
45706: GO 45788
// for j = 1 to result do
45708: LD_ADDR_VAR 0 8
45712: PUSH
45713: DOUBLE
45714: LD_INT 1
45716: DEC
45717: ST_TO_ADDR
45718: LD_VAR 0 6
45722: PUSH
45723: FOR_TO
45724: IFFALSE 45786
// begin if tmp < result [ j ] [ 2 ] then
45726: LD_VAR 0 9
45730: PUSH
45731: LD_VAR 0 6
45735: PUSH
45736: LD_VAR 0 8
45740: ARRAY
45741: PUSH
45742: LD_INT 2
45744: ARRAY
45745: LESS
45746: IFFALSE 45784
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45748: LD_ADDR_VAR 0 6
45752: PUSH
45753: LD_VAR 0 6
45757: PPUSH
45758: LD_VAR 0 8
45762: PPUSH
45763: LD_VAR 0 7
45767: PUSH
45768: LD_VAR 0 9
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PPUSH
45777: CALL_OW 2
45781: ST_TO_ADDR
// break ;
45782: GO 45786
// end ; end ;
45784: GO 45723
45786: POP
45787: POP
// end ; end ;
45788: GO 45587
45790: POP
45791: POP
// if result and not asc then
45792: LD_VAR 0 6
45796: PUSH
45797: LD_VAR 0 4
45801: NOT
45802: AND
45803: IFFALSE 45878
// begin tmp := result ;
45805: LD_ADDR_VAR 0 9
45809: PUSH
45810: LD_VAR 0 6
45814: ST_TO_ADDR
// for i = tmp downto 1 do
45815: LD_ADDR_VAR 0 7
45819: PUSH
45820: DOUBLE
45821: LD_VAR 0 9
45825: INC
45826: ST_TO_ADDR
45827: LD_INT 1
45829: PUSH
45830: FOR_DOWNTO
45831: IFFALSE 45876
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45833: LD_ADDR_VAR 0 6
45837: PUSH
45838: LD_VAR 0 6
45842: PPUSH
45843: LD_VAR 0 9
45847: PUSH
45848: LD_VAR 0 7
45852: MINUS
45853: PUSH
45854: LD_INT 1
45856: PLUS
45857: PPUSH
45858: LD_VAR 0 9
45862: PUSH
45863: LD_VAR 0 7
45867: ARRAY
45868: PPUSH
45869: CALL_OW 1
45873: ST_TO_ADDR
45874: GO 45830
45876: POP
45877: POP
// end ; tmp := [ ] ;
45878: LD_ADDR_VAR 0 9
45882: PUSH
45883: EMPTY
45884: ST_TO_ADDR
// if mode then
45885: LD_VAR 0 5
45889: IFFALSE 45958
// begin for i = 1 to result do
45891: LD_ADDR_VAR 0 7
45895: PUSH
45896: DOUBLE
45897: LD_INT 1
45899: DEC
45900: ST_TO_ADDR
45901: LD_VAR 0 6
45905: PUSH
45906: FOR_TO
45907: IFFALSE 45946
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45909: LD_ADDR_VAR 0 9
45913: PUSH
45914: LD_VAR 0 9
45918: PPUSH
45919: LD_VAR 0 7
45923: PPUSH
45924: LD_VAR 0 6
45928: PUSH
45929: LD_VAR 0 7
45933: ARRAY
45934: PUSH
45935: LD_INT 1
45937: ARRAY
45938: PPUSH
45939: CALL_OW 1
45943: ST_TO_ADDR
45944: GO 45906
45946: POP
45947: POP
// result := tmp ;
45948: LD_ADDR_VAR 0 6
45952: PUSH
45953: LD_VAR 0 9
45957: ST_TO_ADDR
// end ; end ;
45958: LD_VAR 0 6
45962: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45963: LD_INT 0
45965: PPUSH
45966: PPUSH
45967: PPUSH
45968: PPUSH
45969: PPUSH
45970: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45971: LD_ADDR_VAR 0 5
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// if not x or not y then
45993: LD_VAR 0 2
45997: NOT
45998: PUSH
45999: LD_VAR 0 3
46003: NOT
46004: OR
46005: IFFALSE 46009
// exit ;
46007: GO 47659
// if not range then
46009: LD_VAR 0 4
46013: NOT
46014: IFFALSE 46024
// range := 10 ;
46016: LD_ADDR_VAR 0 4
46020: PUSH
46021: LD_INT 10
46023: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46024: LD_ADDR_VAR 0 8
46028: PUSH
46029: LD_INT 81
46031: PUSH
46032: LD_VAR 0 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 92
46043: PUSH
46044: LD_VAR 0 2
46048: PUSH
46049: LD_VAR 0 3
46053: PUSH
46054: LD_VAR 0 4
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: PUSH
46068: LD_INT 21
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: PPUSH
46087: CALL_OW 69
46091: ST_TO_ADDR
// if not tmp then
46092: LD_VAR 0 8
46096: NOT
46097: IFFALSE 46101
// exit ;
46099: GO 47659
// for i in tmp do
46101: LD_ADDR_VAR 0 6
46105: PUSH
46106: LD_VAR 0 8
46110: PUSH
46111: FOR_IN
46112: IFFALSE 47634
// begin points := [ 0 , 0 , 0 ] ;
46114: LD_ADDR_VAR 0 9
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// bpoints := 1 ;
46133: LD_ADDR_VAR 0 10
46137: PUSH
46138: LD_INT 1
46140: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46141: LD_VAR 0 6
46145: PPUSH
46146: CALL_OW 247
46150: PUSH
46151: LD_INT 1
46153: DOUBLE
46154: EQUAL
46155: IFTRUE 46159
46157: GO 46737
46159: POP
// begin if GetClass ( i ) = 1 then
46160: LD_VAR 0 6
46164: PPUSH
46165: CALL_OW 257
46169: PUSH
46170: LD_INT 1
46172: EQUAL
46173: IFFALSE 46194
// points := [ 10 , 5 , 3 ] ;
46175: LD_ADDR_VAR 0 9
46179: PUSH
46180: LD_INT 10
46182: PUSH
46183: LD_INT 5
46185: PUSH
46186: LD_INT 3
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46194: LD_VAR 0 6
46198: PPUSH
46199: CALL_OW 257
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: LD_INT 4
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: IN
46218: IFFALSE 46239
// points := [ 3 , 2 , 1 ] ;
46220: LD_ADDR_VAR 0 9
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46239: LD_VAR 0 6
46243: PPUSH
46244: CALL_OW 257
46248: PUSH
46249: LD_INT 5
46251: EQUAL
46252: IFFALSE 46273
// points := [ 130 , 5 , 2 ] ;
46254: LD_ADDR_VAR 0 9
46258: PUSH
46259: LD_INT 130
46261: PUSH
46262: LD_INT 5
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46273: LD_VAR 0 6
46277: PPUSH
46278: CALL_OW 257
46282: PUSH
46283: LD_INT 8
46285: EQUAL
46286: IFFALSE 46307
// points := [ 35 , 35 , 30 ] ;
46288: LD_ADDR_VAR 0 9
46292: PUSH
46293: LD_INT 35
46295: PUSH
46296: LD_INT 35
46298: PUSH
46299: LD_INT 30
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46307: LD_VAR 0 6
46311: PPUSH
46312: CALL_OW 257
46316: PUSH
46317: LD_INT 9
46319: EQUAL
46320: IFFALSE 46341
// points := [ 20 , 55 , 40 ] ;
46322: LD_ADDR_VAR 0 9
46326: PUSH
46327: LD_INT 20
46329: PUSH
46330: LD_INT 55
46332: PUSH
46333: LD_INT 40
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46341: LD_VAR 0 6
46345: PPUSH
46346: CALL_OW 257
46350: PUSH
46351: LD_INT 12
46353: PUSH
46354: LD_INT 16
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: IN
46361: IFFALSE 46382
// points := [ 5 , 3 , 2 ] ;
46363: LD_ADDR_VAR 0 9
46367: PUSH
46368: LD_INT 5
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46382: LD_VAR 0 6
46386: PPUSH
46387: CALL_OW 257
46391: PUSH
46392: LD_INT 17
46394: EQUAL
46395: IFFALSE 46416
// points := [ 100 , 50 , 75 ] ;
46397: LD_ADDR_VAR 0 9
46401: PUSH
46402: LD_INT 100
46404: PUSH
46405: LD_INT 50
46407: PUSH
46408: LD_INT 75
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: LIST
46415: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46416: LD_VAR 0 6
46420: PPUSH
46421: CALL_OW 257
46425: PUSH
46426: LD_INT 15
46428: EQUAL
46429: IFFALSE 46450
// points := [ 10 , 5 , 3 ] ;
46431: LD_ADDR_VAR 0 9
46435: PUSH
46436: LD_INT 10
46438: PUSH
46439: LD_INT 5
46441: PUSH
46442: LD_INT 3
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46450: LD_VAR 0 6
46454: PPUSH
46455: CALL_OW 257
46459: PUSH
46460: LD_INT 14
46462: EQUAL
46463: IFFALSE 46484
// points := [ 10 , 0 , 0 ] ;
46465: LD_ADDR_VAR 0 9
46469: PUSH
46470: LD_INT 10
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46484: LD_VAR 0 6
46488: PPUSH
46489: CALL_OW 257
46493: PUSH
46494: LD_INT 11
46496: EQUAL
46497: IFFALSE 46518
// points := [ 30 , 10 , 5 ] ;
46499: LD_ADDR_VAR 0 9
46503: PUSH
46504: LD_INT 30
46506: PUSH
46507: LD_INT 10
46509: PUSH
46510: LD_INT 5
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46518: LD_VAR 0 1
46522: PPUSH
46523: LD_INT 5
46525: PPUSH
46526: CALL_OW 321
46530: PUSH
46531: LD_INT 2
46533: EQUAL
46534: IFFALSE 46551
// bpoints := bpoints * 1.8 ;
46536: LD_ADDR_VAR 0 10
46540: PUSH
46541: LD_VAR 0 10
46545: PUSH
46546: LD_REAL  1.80000000000000E+0000
46549: MUL
46550: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46551: LD_VAR 0 6
46555: PPUSH
46556: CALL_OW 257
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 3
46569: PUSH
46570: LD_INT 4
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: IN
46579: PUSH
46580: LD_VAR 0 1
46584: PPUSH
46585: LD_INT 51
46587: PPUSH
46588: CALL_OW 321
46592: PUSH
46593: LD_INT 2
46595: EQUAL
46596: AND
46597: IFFALSE 46614
// bpoints := bpoints * 1.2 ;
46599: LD_ADDR_VAR 0 10
46603: PUSH
46604: LD_VAR 0 10
46608: PUSH
46609: LD_REAL  1.20000000000000E+0000
46612: MUL
46613: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46614: LD_VAR 0 6
46618: PPUSH
46619: CALL_OW 257
46623: PUSH
46624: LD_INT 5
46626: PUSH
46627: LD_INT 7
46629: PUSH
46630: LD_INT 9
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: IN
46638: PUSH
46639: LD_VAR 0 1
46643: PPUSH
46644: LD_INT 52
46646: PPUSH
46647: CALL_OW 321
46651: PUSH
46652: LD_INT 2
46654: EQUAL
46655: AND
46656: IFFALSE 46673
// bpoints := bpoints * 1.5 ;
46658: LD_ADDR_VAR 0 10
46662: PUSH
46663: LD_VAR 0 10
46667: PUSH
46668: LD_REAL  1.50000000000000E+0000
46671: MUL
46672: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46673: LD_VAR 0 1
46677: PPUSH
46678: LD_INT 66
46680: PPUSH
46681: CALL_OW 321
46685: PUSH
46686: LD_INT 2
46688: EQUAL
46689: IFFALSE 46706
// bpoints := bpoints * 1.1 ;
46691: LD_ADDR_VAR 0 10
46695: PUSH
46696: LD_VAR 0 10
46700: PUSH
46701: LD_REAL  1.10000000000000E+0000
46704: MUL
46705: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46706: LD_ADDR_VAR 0 10
46710: PUSH
46711: LD_VAR 0 10
46715: PUSH
46716: LD_VAR 0 6
46720: PPUSH
46721: LD_INT 1
46723: PPUSH
46724: CALL_OW 259
46728: PUSH
46729: LD_REAL  1.15000000000000E+0000
46732: MUL
46733: MUL
46734: ST_TO_ADDR
// end ; unit_vehicle :
46735: GO 47563
46737: LD_INT 2
46739: DOUBLE
46740: EQUAL
46741: IFTRUE 46745
46743: GO 47551
46745: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46746: LD_VAR 0 6
46750: PPUSH
46751: CALL_OW 264
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 42
46761: PUSH
46762: LD_INT 24
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: IN
46770: IFFALSE 46791
// points := [ 25 , 5 , 3 ] ;
46772: LD_ADDR_VAR 0 9
46776: PUSH
46777: LD_INT 25
46779: PUSH
46780: LD_INT 5
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46791: LD_VAR 0 6
46795: PPUSH
46796: CALL_OW 264
46800: PUSH
46801: LD_INT 4
46803: PUSH
46804: LD_INT 43
46806: PUSH
46807: LD_INT 25
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: IN
46815: IFFALSE 46836
// points := [ 40 , 15 , 5 ] ;
46817: LD_ADDR_VAR 0 9
46821: PUSH
46822: LD_INT 40
46824: PUSH
46825: LD_INT 15
46827: PUSH
46828: LD_INT 5
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46836: LD_VAR 0 6
46840: PPUSH
46841: CALL_OW 264
46845: PUSH
46846: LD_INT 3
46848: PUSH
46849: LD_INT 23
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: IN
46856: IFFALSE 46877
// points := [ 7 , 25 , 8 ] ;
46858: LD_ADDR_VAR 0 9
46862: PUSH
46863: LD_INT 7
46865: PUSH
46866: LD_INT 25
46868: PUSH
46869: LD_INT 8
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46877: LD_VAR 0 6
46881: PPUSH
46882: CALL_OW 264
46886: PUSH
46887: LD_INT 5
46889: PUSH
46890: LD_INT 27
46892: PUSH
46893: LD_INT 44
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: IN
46901: IFFALSE 46922
// points := [ 14 , 50 , 16 ] ;
46903: LD_ADDR_VAR 0 9
46907: PUSH
46908: LD_INT 14
46910: PUSH
46911: LD_INT 50
46913: PUSH
46914: LD_INT 16
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46922: LD_VAR 0 6
46926: PPUSH
46927: CALL_OW 264
46931: PUSH
46932: LD_INT 6
46934: PUSH
46935: LD_INT 46
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: IN
46942: IFFALSE 46963
// points := [ 32 , 120 , 70 ] ;
46944: LD_ADDR_VAR 0 9
46948: PUSH
46949: LD_INT 32
46951: PUSH
46952: LD_INT 120
46954: PUSH
46955: LD_INT 70
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46963: LD_VAR 0 6
46967: PPUSH
46968: CALL_OW 264
46972: PUSH
46973: LD_INT 7
46975: PUSH
46976: LD_INT 28
46978: PUSH
46979: LD_INT 45
46981: PUSH
46982: LD_INT 92
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: IN
46991: IFFALSE 47012
// points := [ 35 , 20 , 45 ] ;
46993: LD_ADDR_VAR 0 9
46997: PUSH
46998: LD_INT 35
47000: PUSH
47001: LD_INT 20
47003: PUSH
47004: LD_INT 45
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47012: LD_VAR 0 6
47016: PPUSH
47017: CALL_OW 264
47021: PUSH
47022: LD_INT 47
47024: PUSH
47025: EMPTY
47026: LIST
47027: IN
47028: IFFALSE 47049
// points := [ 67 , 45 , 75 ] ;
47030: LD_ADDR_VAR 0 9
47034: PUSH
47035: LD_INT 67
47037: PUSH
47038: LD_INT 45
47040: PUSH
47041: LD_INT 75
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47049: LD_VAR 0 6
47053: PPUSH
47054: CALL_OW 264
47058: PUSH
47059: LD_INT 26
47061: PUSH
47062: EMPTY
47063: LIST
47064: IN
47065: IFFALSE 47086
// points := [ 120 , 30 , 80 ] ;
47067: LD_ADDR_VAR 0 9
47071: PUSH
47072: LD_INT 120
47074: PUSH
47075: LD_INT 30
47077: PUSH
47078: LD_INT 80
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47086: LD_VAR 0 6
47090: PPUSH
47091: CALL_OW 264
47095: PUSH
47096: LD_INT 22
47098: PUSH
47099: EMPTY
47100: LIST
47101: IN
47102: IFFALSE 47123
// points := [ 40 , 1 , 1 ] ;
47104: LD_ADDR_VAR 0 9
47108: PUSH
47109: LD_INT 40
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47123: LD_VAR 0 6
47127: PPUSH
47128: CALL_OW 264
47132: PUSH
47133: LD_INT 29
47135: PUSH
47136: EMPTY
47137: LIST
47138: IN
47139: IFFALSE 47160
// points := [ 70 , 200 , 400 ] ;
47141: LD_ADDR_VAR 0 9
47145: PUSH
47146: LD_INT 70
47148: PUSH
47149: LD_INT 200
47151: PUSH
47152: LD_INT 400
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47160: LD_VAR 0 6
47164: PPUSH
47165: CALL_OW 264
47169: PUSH
47170: LD_INT 14
47172: PUSH
47173: LD_INT 53
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: IN
47180: IFFALSE 47201
// points := [ 40 , 10 , 20 ] ;
47182: LD_ADDR_VAR 0 9
47186: PUSH
47187: LD_INT 40
47189: PUSH
47190: LD_INT 10
47192: PUSH
47193: LD_INT 20
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47201: LD_VAR 0 6
47205: PPUSH
47206: CALL_OW 264
47210: PUSH
47211: LD_INT 9
47213: PUSH
47214: EMPTY
47215: LIST
47216: IN
47217: IFFALSE 47238
// points := [ 5 , 70 , 20 ] ;
47219: LD_ADDR_VAR 0 9
47223: PUSH
47224: LD_INT 5
47226: PUSH
47227: LD_INT 70
47229: PUSH
47230: LD_INT 20
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47238: LD_VAR 0 6
47242: PPUSH
47243: CALL_OW 264
47247: PUSH
47248: LD_INT 10
47250: PUSH
47251: EMPTY
47252: LIST
47253: IN
47254: IFFALSE 47275
// points := [ 35 , 110 , 70 ] ;
47256: LD_ADDR_VAR 0 9
47260: PUSH
47261: LD_INT 35
47263: PUSH
47264: LD_INT 110
47266: PUSH
47267: LD_INT 70
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47275: LD_VAR 0 6
47279: PPUSH
47280: CALL_OW 265
47284: PUSH
47285: LD_INT 25
47287: EQUAL
47288: IFFALSE 47309
// points := [ 80 , 65 , 100 ] ;
47290: LD_ADDR_VAR 0 9
47294: PUSH
47295: LD_INT 80
47297: PUSH
47298: LD_INT 65
47300: PUSH
47301: LD_INT 100
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47309: LD_VAR 0 6
47313: PPUSH
47314: CALL_OW 263
47318: PUSH
47319: LD_INT 1
47321: EQUAL
47322: IFFALSE 47357
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47324: LD_ADDR_VAR 0 10
47328: PUSH
47329: LD_VAR 0 10
47333: PUSH
47334: LD_VAR 0 6
47338: PPUSH
47339: CALL_OW 311
47343: PPUSH
47344: LD_INT 3
47346: PPUSH
47347: CALL_OW 259
47351: PUSH
47352: LD_INT 4
47354: MUL
47355: MUL
47356: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47357: LD_VAR 0 6
47361: PPUSH
47362: CALL_OW 263
47366: PUSH
47367: LD_INT 2
47369: EQUAL
47370: IFFALSE 47421
// begin j := IsControledBy ( i ) ;
47372: LD_ADDR_VAR 0 7
47376: PUSH
47377: LD_VAR 0 6
47381: PPUSH
47382: CALL_OW 312
47386: ST_TO_ADDR
// if j then
47387: LD_VAR 0 7
47391: IFFALSE 47421
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47393: LD_ADDR_VAR 0 10
47397: PUSH
47398: LD_VAR 0 10
47402: PUSH
47403: LD_VAR 0 7
47407: PPUSH
47408: LD_INT 3
47410: PPUSH
47411: CALL_OW 259
47415: PUSH
47416: LD_INT 3
47418: MUL
47419: MUL
47420: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47421: LD_VAR 0 6
47425: PPUSH
47426: CALL_OW 264
47430: PUSH
47431: LD_INT 5
47433: PUSH
47434: LD_INT 6
47436: PUSH
47437: LD_INT 46
47439: PUSH
47440: LD_INT 44
47442: PUSH
47443: LD_INT 47
47445: PUSH
47446: LD_INT 45
47448: PUSH
47449: LD_INT 28
47451: PUSH
47452: LD_INT 7
47454: PUSH
47455: LD_INT 27
47457: PUSH
47458: LD_INT 29
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: IN
47473: PUSH
47474: LD_VAR 0 1
47478: PPUSH
47479: LD_INT 52
47481: PPUSH
47482: CALL_OW 321
47486: PUSH
47487: LD_INT 2
47489: EQUAL
47490: AND
47491: IFFALSE 47508
// bpoints := bpoints * 1.2 ;
47493: LD_ADDR_VAR 0 10
47497: PUSH
47498: LD_VAR 0 10
47502: PUSH
47503: LD_REAL  1.20000000000000E+0000
47506: MUL
47507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47508: LD_VAR 0 6
47512: PPUSH
47513: CALL_OW 264
47517: PUSH
47518: LD_INT 6
47520: PUSH
47521: LD_INT 46
47523: PUSH
47524: LD_INT 47
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: IN
47532: IFFALSE 47549
// bpoints := bpoints * 1.2 ;
47534: LD_ADDR_VAR 0 10
47538: PUSH
47539: LD_VAR 0 10
47543: PUSH
47544: LD_REAL  1.20000000000000E+0000
47547: MUL
47548: ST_TO_ADDR
// end ; unit_building :
47549: GO 47563
47551: LD_INT 3
47553: DOUBLE
47554: EQUAL
47555: IFTRUE 47559
47557: GO 47562
47559: POP
// ; end ;
47560: GO 47563
47562: POP
// for j = 1 to 3 do
47563: LD_ADDR_VAR 0 7
47567: PUSH
47568: DOUBLE
47569: LD_INT 1
47571: DEC
47572: ST_TO_ADDR
47573: LD_INT 3
47575: PUSH
47576: FOR_TO
47577: IFFALSE 47630
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47579: LD_ADDR_VAR 0 5
47583: PUSH
47584: LD_VAR 0 5
47588: PPUSH
47589: LD_VAR 0 7
47593: PPUSH
47594: LD_VAR 0 5
47598: PUSH
47599: LD_VAR 0 7
47603: ARRAY
47604: PUSH
47605: LD_VAR 0 9
47609: PUSH
47610: LD_VAR 0 7
47614: ARRAY
47615: PUSH
47616: LD_VAR 0 10
47620: MUL
47621: PLUS
47622: PPUSH
47623: CALL_OW 1
47627: ST_TO_ADDR
47628: GO 47576
47630: POP
47631: POP
// end ;
47632: GO 46111
47634: POP
47635: POP
// result := Replace ( result , 4 , tmp ) ;
47636: LD_ADDR_VAR 0 5
47640: PUSH
47641: LD_VAR 0 5
47645: PPUSH
47646: LD_INT 4
47648: PPUSH
47649: LD_VAR 0 8
47653: PPUSH
47654: CALL_OW 1
47658: ST_TO_ADDR
// end ;
47659: LD_VAR 0 5
47663: RET
// export function DangerAtRange ( unit , range ) ; begin
47664: LD_INT 0
47666: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47667: LD_ADDR_VAR 0 3
47671: PUSH
47672: LD_VAR 0 1
47676: PPUSH
47677: CALL_OW 255
47681: PPUSH
47682: LD_VAR 0 1
47686: PPUSH
47687: CALL_OW 250
47691: PPUSH
47692: LD_VAR 0 1
47696: PPUSH
47697: CALL_OW 251
47701: PPUSH
47702: LD_VAR 0 2
47706: PPUSH
47707: CALL 45963 0 4
47711: ST_TO_ADDR
// end ;
47712: LD_VAR 0 3
47716: RET
// export function DangerInArea ( side , area ) ; begin
47717: LD_INT 0
47719: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47720: LD_ADDR_VAR 0 3
47724: PUSH
47725: LD_VAR 0 2
47729: PPUSH
47730: LD_INT 81
47732: PUSH
47733: LD_VAR 0 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PPUSH
47742: CALL_OW 70
47746: ST_TO_ADDR
// end ;
47747: LD_VAR 0 3
47751: RET
// export function IsExtension ( b ) ; begin
47752: LD_INT 0
47754: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47755: LD_ADDR_VAR 0 2
47759: PUSH
47760: LD_VAR 0 1
47764: PUSH
47765: LD_INT 23
47767: PUSH
47768: LD_INT 20
47770: PUSH
47771: LD_INT 22
47773: PUSH
47774: LD_INT 17
47776: PUSH
47777: LD_INT 24
47779: PUSH
47780: LD_INT 21
47782: PUSH
47783: LD_INT 19
47785: PUSH
47786: LD_INT 16
47788: PUSH
47789: LD_INT 25
47791: PUSH
47792: LD_INT 18
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: IN
47807: ST_TO_ADDR
// end ;
47808: LD_VAR 0 2
47812: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47813: LD_INT 0
47815: PPUSH
47816: PPUSH
47817: PPUSH
// result := [ ] ;
47818: LD_ADDR_VAR 0 4
47822: PUSH
47823: EMPTY
47824: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47825: LD_ADDR_VAR 0 5
47829: PUSH
47830: LD_VAR 0 2
47834: PPUSH
47835: LD_INT 21
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PPUSH
47845: CALL_OW 70
47849: ST_TO_ADDR
// if not tmp then
47850: LD_VAR 0 5
47854: NOT
47855: IFFALSE 47859
// exit ;
47857: GO 47923
// if checkLink then
47859: LD_VAR 0 3
47863: IFFALSE 47913
// begin for i in tmp do
47865: LD_ADDR_VAR 0 6
47869: PUSH
47870: LD_VAR 0 5
47874: PUSH
47875: FOR_IN
47876: IFFALSE 47911
// if GetBase ( i ) <> base then
47878: LD_VAR 0 6
47882: PPUSH
47883: CALL_OW 274
47887: PUSH
47888: LD_VAR 0 1
47892: NONEQUAL
47893: IFFALSE 47909
// ComLinkToBase ( base , i ) ;
47895: LD_VAR 0 1
47899: PPUSH
47900: LD_VAR 0 6
47904: PPUSH
47905: CALL_OW 169
47909: GO 47875
47911: POP
47912: POP
// end ; result := tmp ;
47913: LD_ADDR_VAR 0 4
47917: PUSH
47918: LD_VAR 0 5
47922: ST_TO_ADDR
// end ;
47923: LD_VAR 0 4
47927: RET
// export function ComComplete ( units , b ) ; var i ; begin
47928: LD_INT 0
47930: PPUSH
47931: PPUSH
// if not units then
47932: LD_VAR 0 1
47936: NOT
47937: IFFALSE 47941
// exit ;
47939: GO 48031
// for i in units do
47941: LD_ADDR_VAR 0 4
47945: PUSH
47946: LD_VAR 0 1
47950: PUSH
47951: FOR_IN
47952: IFFALSE 48029
// if BuildingStatus ( b ) = bs_build then
47954: LD_VAR 0 2
47958: PPUSH
47959: CALL_OW 461
47963: PUSH
47964: LD_INT 1
47966: EQUAL
47967: IFFALSE 48027
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47969: LD_VAR 0 4
47973: PPUSH
47974: LD_STRING h
47976: PUSH
47977: LD_VAR 0 2
47981: PPUSH
47982: CALL_OW 250
47986: PUSH
47987: LD_VAR 0 2
47991: PPUSH
47992: CALL_OW 251
47996: PUSH
47997: LD_VAR 0 2
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: PPUSH
48023: CALL_OW 446
48027: GO 47951
48029: POP
48030: POP
// end ;
48031: LD_VAR 0 3
48035: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48036: LD_INT 0
48038: PPUSH
48039: PPUSH
48040: PPUSH
48041: PPUSH
48042: PPUSH
48043: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48044: LD_VAR 0 1
48048: NOT
48049: PUSH
48050: LD_VAR 0 1
48054: PPUSH
48055: CALL_OW 263
48059: PUSH
48060: LD_INT 2
48062: NONEQUAL
48063: OR
48064: IFFALSE 48068
// exit ;
48066: GO 48384
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48068: LD_ADDR_VAR 0 6
48072: PUSH
48073: LD_INT 22
48075: PUSH
48076: LD_VAR 0 1
48080: PPUSH
48081: CALL_OW 255
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 30
48095: PUSH
48096: LD_INT 36
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 34
48105: PUSH
48106: LD_INT 31
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PPUSH
48122: CALL_OW 69
48126: ST_TO_ADDR
// if not tmp then
48127: LD_VAR 0 6
48131: NOT
48132: IFFALSE 48136
// exit ;
48134: GO 48384
// result := [ ] ;
48136: LD_ADDR_VAR 0 2
48140: PUSH
48141: EMPTY
48142: ST_TO_ADDR
// for i in tmp do
48143: LD_ADDR_VAR 0 3
48147: PUSH
48148: LD_VAR 0 6
48152: PUSH
48153: FOR_IN
48154: IFFALSE 48225
// begin t := UnitsInside ( i ) ;
48156: LD_ADDR_VAR 0 4
48160: PUSH
48161: LD_VAR 0 3
48165: PPUSH
48166: CALL_OW 313
48170: ST_TO_ADDR
// if t then
48171: LD_VAR 0 4
48175: IFFALSE 48223
// for j in t do
48177: LD_ADDR_VAR 0 7
48181: PUSH
48182: LD_VAR 0 4
48186: PUSH
48187: FOR_IN
48188: IFFALSE 48221
// result := Replace ( result , result + 1 , j ) ;
48190: LD_ADDR_VAR 0 2
48194: PUSH
48195: LD_VAR 0 2
48199: PPUSH
48200: LD_VAR 0 2
48204: PUSH
48205: LD_INT 1
48207: PLUS
48208: PPUSH
48209: LD_VAR 0 7
48213: PPUSH
48214: CALL_OW 1
48218: ST_TO_ADDR
48219: GO 48187
48221: POP
48222: POP
// end ;
48223: GO 48153
48225: POP
48226: POP
// if not result then
48227: LD_VAR 0 2
48231: NOT
48232: IFFALSE 48236
// exit ;
48234: GO 48384
// mech := result [ 1 ] ;
48236: LD_ADDR_VAR 0 5
48240: PUSH
48241: LD_VAR 0 2
48245: PUSH
48246: LD_INT 1
48248: ARRAY
48249: ST_TO_ADDR
// if result > 1 then
48250: LD_VAR 0 2
48254: PUSH
48255: LD_INT 1
48257: GREATER
48258: IFFALSE 48370
// begin for i = 2 to result do
48260: LD_ADDR_VAR 0 3
48264: PUSH
48265: DOUBLE
48266: LD_INT 2
48268: DEC
48269: ST_TO_ADDR
48270: LD_VAR 0 2
48274: PUSH
48275: FOR_TO
48276: IFFALSE 48368
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48278: LD_ADDR_VAR 0 4
48282: PUSH
48283: LD_VAR 0 2
48287: PUSH
48288: LD_VAR 0 3
48292: ARRAY
48293: PPUSH
48294: LD_INT 3
48296: PPUSH
48297: CALL_OW 259
48301: PUSH
48302: LD_VAR 0 2
48306: PUSH
48307: LD_VAR 0 3
48311: ARRAY
48312: PPUSH
48313: CALL_OW 432
48317: MINUS
48318: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48319: LD_VAR 0 4
48323: PUSH
48324: LD_VAR 0 5
48328: PPUSH
48329: LD_INT 3
48331: PPUSH
48332: CALL_OW 259
48336: PUSH
48337: LD_VAR 0 5
48341: PPUSH
48342: CALL_OW 432
48346: MINUS
48347: GREATEREQUAL
48348: IFFALSE 48366
// mech := result [ i ] ;
48350: LD_ADDR_VAR 0 5
48354: PUSH
48355: LD_VAR 0 2
48359: PUSH
48360: LD_VAR 0 3
48364: ARRAY
48365: ST_TO_ADDR
// end ;
48366: GO 48275
48368: POP
48369: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48370: LD_VAR 0 1
48374: PPUSH
48375: LD_VAR 0 5
48379: PPUSH
48380: CALL_OW 135
// end ;
48384: LD_VAR 0 2
48388: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48389: LD_INT 0
48391: PPUSH
48392: PPUSH
48393: PPUSH
48394: PPUSH
48395: PPUSH
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
48402: PPUSH
48403: PPUSH
// result := [ ] ;
48404: LD_ADDR_VAR 0 7
48408: PUSH
48409: EMPTY
48410: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48411: LD_VAR 0 1
48415: PPUSH
48416: CALL_OW 266
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: IN
48431: NOT
48432: IFFALSE 48436
// exit ;
48434: GO 50070
// if name then
48436: LD_VAR 0 3
48440: IFFALSE 48456
// SetBName ( base_dep , name ) ;
48442: LD_VAR 0 1
48446: PPUSH
48447: LD_VAR 0 3
48451: PPUSH
48452: CALL_OW 500
// base := GetBase ( base_dep ) ;
48456: LD_ADDR_VAR 0 15
48460: PUSH
48461: LD_VAR 0 1
48465: PPUSH
48466: CALL_OW 274
48470: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48471: LD_ADDR_VAR 0 16
48475: PUSH
48476: LD_VAR 0 1
48480: PPUSH
48481: CALL_OW 255
48485: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48486: LD_ADDR_VAR 0 17
48490: PUSH
48491: LD_VAR 0 1
48495: PPUSH
48496: CALL_OW 248
48500: ST_TO_ADDR
// if sources then
48501: LD_VAR 0 5
48505: IFFALSE 48552
// for i = 1 to 3 do
48507: LD_ADDR_VAR 0 8
48511: PUSH
48512: DOUBLE
48513: LD_INT 1
48515: DEC
48516: ST_TO_ADDR
48517: LD_INT 3
48519: PUSH
48520: FOR_TO
48521: IFFALSE 48550
// AddResourceType ( base , i , sources [ i ] ) ;
48523: LD_VAR 0 15
48527: PPUSH
48528: LD_VAR 0 8
48532: PPUSH
48533: LD_VAR 0 5
48537: PUSH
48538: LD_VAR 0 8
48542: ARRAY
48543: PPUSH
48544: CALL_OW 276
48548: GO 48520
48550: POP
48551: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48552: LD_ADDR_VAR 0 18
48556: PUSH
48557: LD_VAR 0 15
48561: PPUSH
48562: LD_VAR 0 2
48566: PPUSH
48567: LD_INT 1
48569: PPUSH
48570: CALL 47813 0 3
48574: ST_TO_ADDR
// InitHc ;
48575: CALL_OW 19
// InitUc ;
48579: CALL_OW 18
// uc_side := side ;
48583: LD_ADDR_OWVAR 20
48587: PUSH
48588: LD_VAR 0 16
48592: ST_TO_ADDR
// uc_nation := nation ;
48593: LD_ADDR_OWVAR 21
48597: PUSH
48598: LD_VAR 0 17
48602: ST_TO_ADDR
// if buildings then
48603: LD_VAR 0 18
48607: IFFALSE 49929
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48609: LD_ADDR_VAR 0 19
48613: PUSH
48614: LD_VAR 0 18
48618: PPUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 30
48624: PUSH
48625: LD_INT 29
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 30
48634: PUSH
48635: LD_INT 30
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: PPUSH
48647: CALL_OW 72
48651: ST_TO_ADDR
// if tmp then
48652: LD_VAR 0 19
48656: IFFALSE 48704
// for i in tmp do
48658: LD_ADDR_VAR 0 8
48662: PUSH
48663: LD_VAR 0 19
48667: PUSH
48668: FOR_IN
48669: IFFALSE 48702
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48671: LD_VAR 0 8
48675: PPUSH
48676: CALL_OW 250
48680: PPUSH
48681: LD_VAR 0 8
48685: PPUSH
48686: CALL_OW 251
48690: PPUSH
48691: LD_VAR 0 16
48695: PPUSH
48696: CALL_OW 441
48700: GO 48668
48702: POP
48703: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48704: LD_VAR 0 18
48708: PPUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 30
48714: PUSH
48715: LD_INT 32
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 30
48724: PUSH
48725: LD_INT 33
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: PPUSH
48737: CALL_OW 72
48741: IFFALSE 48829
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48743: LD_ADDR_VAR 0 8
48747: PUSH
48748: LD_VAR 0 18
48752: PPUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 30
48758: PUSH
48759: LD_INT 32
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 30
48768: PUSH
48769: LD_INT 33
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: PPUSH
48781: CALL_OW 72
48785: PUSH
48786: FOR_IN
48787: IFFALSE 48827
// begin if not GetBWeapon ( i ) then
48789: LD_VAR 0 8
48793: PPUSH
48794: CALL_OW 269
48798: NOT
48799: IFFALSE 48825
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48801: LD_VAR 0 8
48805: PPUSH
48806: LD_VAR 0 8
48810: PPUSH
48811: LD_VAR 0 2
48815: PPUSH
48816: CALL 50075 0 2
48820: PPUSH
48821: CALL_OW 431
// end ;
48825: GO 48786
48827: POP
48828: POP
// end ; for i = 1 to personel do
48829: LD_ADDR_VAR 0 8
48833: PUSH
48834: DOUBLE
48835: LD_INT 1
48837: DEC
48838: ST_TO_ADDR
48839: LD_VAR 0 6
48843: PUSH
48844: FOR_TO
48845: IFFALSE 49909
// begin if i > 4 then
48847: LD_VAR 0 8
48851: PUSH
48852: LD_INT 4
48854: GREATER
48855: IFFALSE 48859
// break ;
48857: GO 49909
// case i of 1 :
48859: LD_VAR 0 8
48863: PUSH
48864: LD_INT 1
48866: DOUBLE
48867: EQUAL
48868: IFTRUE 48872
48870: GO 48952
48872: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48873: LD_ADDR_VAR 0 12
48877: PUSH
48878: LD_VAR 0 18
48882: PPUSH
48883: LD_INT 22
48885: PUSH
48886: LD_VAR 0 16
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 58
48897: PUSH
48898: EMPTY
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: LD_INT 30
48906: PUSH
48907: LD_INT 32
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 30
48916: PUSH
48917: LD_INT 4
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 30
48926: PUSH
48927: LD_INT 5
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: PPUSH
48945: CALL_OW 72
48949: ST_TO_ADDR
48950: GO 49174
48952: LD_INT 2
48954: DOUBLE
48955: EQUAL
48956: IFTRUE 48960
48958: GO 49022
48960: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48961: LD_ADDR_VAR 0 12
48965: PUSH
48966: LD_VAR 0 18
48970: PPUSH
48971: LD_INT 22
48973: PUSH
48974: LD_VAR 0 16
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 30
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 30
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PPUSH
49015: CALL_OW 72
49019: ST_TO_ADDR
49020: GO 49174
49022: LD_INT 3
49024: DOUBLE
49025: EQUAL
49026: IFTRUE 49030
49028: GO 49092
49030: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49031: LD_ADDR_VAR 0 12
49035: PUSH
49036: LD_VAR 0 18
49040: PPUSH
49041: LD_INT 22
49043: PUSH
49044: LD_VAR 0 16
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 30
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 30
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PPUSH
49085: CALL_OW 72
49089: ST_TO_ADDR
49090: GO 49174
49092: LD_INT 4
49094: DOUBLE
49095: EQUAL
49096: IFTRUE 49100
49098: GO 49173
49100: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49101: LD_ADDR_VAR 0 12
49105: PUSH
49106: LD_VAR 0 18
49110: PPUSH
49111: LD_INT 22
49113: PUSH
49114: LD_VAR 0 16
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 30
49128: PUSH
49129: LD_INT 6
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 30
49138: PUSH
49139: LD_INT 7
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 30
49148: PUSH
49149: LD_INT 8
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PPUSH
49166: CALL_OW 72
49170: ST_TO_ADDR
49171: GO 49174
49173: POP
// if i = 1 then
49174: LD_VAR 0 8
49178: PUSH
49179: LD_INT 1
49181: EQUAL
49182: IFFALSE 49293
// begin tmp := [ ] ;
49184: LD_ADDR_VAR 0 19
49188: PUSH
49189: EMPTY
49190: ST_TO_ADDR
// for j in f do
49191: LD_ADDR_VAR 0 9
49195: PUSH
49196: LD_VAR 0 12
49200: PUSH
49201: FOR_IN
49202: IFFALSE 49275
// if GetBType ( j ) = b_bunker then
49204: LD_VAR 0 9
49208: PPUSH
49209: CALL_OW 266
49213: PUSH
49214: LD_INT 32
49216: EQUAL
49217: IFFALSE 49244
// tmp := Insert ( tmp , 1 , j ) else
49219: LD_ADDR_VAR 0 19
49223: PUSH
49224: LD_VAR 0 19
49228: PPUSH
49229: LD_INT 1
49231: PPUSH
49232: LD_VAR 0 9
49236: PPUSH
49237: CALL_OW 2
49241: ST_TO_ADDR
49242: GO 49273
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49244: LD_ADDR_VAR 0 19
49248: PUSH
49249: LD_VAR 0 19
49253: PPUSH
49254: LD_VAR 0 19
49258: PUSH
49259: LD_INT 1
49261: PLUS
49262: PPUSH
49263: LD_VAR 0 9
49267: PPUSH
49268: CALL_OW 2
49272: ST_TO_ADDR
49273: GO 49201
49275: POP
49276: POP
// if tmp then
49277: LD_VAR 0 19
49281: IFFALSE 49293
// f := tmp ;
49283: LD_ADDR_VAR 0 12
49287: PUSH
49288: LD_VAR 0 19
49292: ST_TO_ADDR
// end ; x := personel [ i ] ;
49293: LD_ADDR_VAR 0 13
49297: PUSH
49298: LD_VAR 0 6
49302: PUSH
49303: LD_VAR 0 8
49307: ARRAY
49308: ST_TO_ADDR
// if x = - 1 then
49309: LD_VAR 0 13
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: EQUAL
49318: IFFALSE 49527
// begin for j in f do
49320: LD_ADDR_VAR 0 9
49324: PUSH
49325: LD_VAR 0 12
49329: PUSH
49330: FOR_IN
49331: IFFALSE 49523
// repeat InitHc ;
49333: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49337: LD_VAR 0 9
49341: PPUSH
49342: CALL_OW 266
49346: PUSH
49347: LD_INT 5
49349: EQUAL
49350: IFFALSE 49420
// begin if UnitsInside ( j ) < 3 then
49352: LD_VAR 0 9
49356: PPUSH
49357: CALL_OW 313
49361: PUSH
49362: LD_INT 3
49364: LESS
49365: IFFALSE 49401
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49367: LD_INT 0
49369: PPUSH
49370: LD_INT 5
49372: PUSH
49373: LD_INT 8
49375: PUSH
49376: LD_INT 9
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: LIST
49383: PUSH
49384: LD_VAR 0 17
49388: ARRAY
49389: PPUSH
49390: LD_VAR 0 4
49394: PPUSH
49395: CALL_OW 380
49399: GO 49418
// PrepareHuman ( false , i , skill ) ;
49401: LD_INT 0
49403: PPUSH
49404: LD_VAR 0 8
49408: PPUSH
49409: LD_VAR 0 4
49413: PPUSH
49414: CALL_OW 380
// end else
49418: GO 49437
// PrepareHuman ( false , i , skill ) ;
49420: LD_INT 0
49422: PPUSH
49423: LD_VAR 0 8
49427: PPUSH
49428: LD_VAR 0 4
49432: PPUSH
49433: CALL_OW 380
// un := CreateHuman ;
49437: LD_ADDR_VAR 0 14
49441: PUSH
49442: CALL_OW 44
49446: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49447: LD_ADDR_VAR 0 7
49451: PUSH
49452: LD_VAR 0 7
49456: PPUSH
49457: LD_INT 1
49459: PPUSH
49460: LD_VAR 0 14
49464: PPUSH
49465: CALL_OW 2
49469: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49470: LD_VAR 0 14
49474: PPUSH
49475: LD_VAR 0 9
49479: PPUSH
49480: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49484: LD_VAR 0 9
49488: PPUSH
49489: CALL_OW 313
49493: PUSH
49494: LD_INT 6
49496: EQUAL
49497: PUSH
49498: LD_VAR 0 9
49502: PPUSH
49503: CALL_OW 266
49507: PUSH
49508: LD_INT 32
49510: PUSH
49511: LD_INT 31
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: IN
49518: OR
49519: IFFALSE 49333
49521: GO 49330
49523: POP
49524: POP
// end else
49525: GO 49907
// for j = 1 to x do
49527: LD_ADDR_VAR 0 9
49531: PUSH
49532: DOUBLE
49533: LD_INT 1
49535: DEC
49536: ST_TO_ADDR
49537: LD_VAR 0 13
49541: PUSH
49542: FOR_TO
49543: IFFALSE 49905
// begin InitHc ;
49545: CALL_OW 19
// if not f then
49549: LD_VAR 0 12
49553: NOT
49554: IFFALSE 49643
// begin PrepareHuman ( false , i , skill ) ;
49556: LD_INT 0
49558: PPUSH
49559: LD_VAR 0 8
49563: PPUSH
49564: LD_VAR 0 4
49568: PPUSH
49569: CALL_OW 380
// un := CreateHuman ;
49573: LD_ADDR_VAR 0 14
49577: PUSH
49578: CALL_OW 44
49582: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49583: LD_ADDR_VAR 0 7
49587: PUSH
49588: LD_VAR 0 7
49592: PPUSH
49593: LD_INT 1
49595: PPUSH
49596: LD_VAR 0 14
49600: PPUSH
49601: CALL_OW 2
49605: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49606: LD_VAR 0 14
49610: PPUSH
49611: LD_VAR 0 1
49615: PPUSH
49616: CALL_OW 250
49620: PPUSH
49621: LD_VAR 0 1
49625: PPUSH
49626: CALL_OW 251
49630: PPUSH
49631: LD_INT 10
49633: PPUSH
49634: LD_INT 0
49636: PPUSH
49637: CALL_OW 50
// continue ;
49641: GO 49542
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49643: LD_VAR 0 12
49647: PUSH
49648: LD_INT 1
49650: ARRAY
49651: PPUSH
49652: CALL_OW 313
49656: PUSH
49657: LD_VAR 0 12
49661: PUSH
49662: LD_INT 1
49664: ARRAY
49665: PPUSH
49666: CALL_OW 266
49670: PUSH
49671: LD_INT 32
49673: PUSH
49674: LD_INT 31
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: IN
49681: AND
49682: PUSH
49683: LD_VAR 0 12
49687: PUSH
49688: LD_INT 1
49690: ARRAY
49691: PPUSH
49692: CALL_OW 313
49696: PUSH
49697: LD_INT 6
49699: EQUAL
49700: OR
49701: IFFALSE 49721
// f := Delete ( f , 1 ) ;
49703: LD_ADDR_VAR 0 12
49707: PUSH
49708: LD_VAR 0 12
49712: PPUSH
49713: LD_INT 1
49715: PPUSH
49716: CALL_OW 3
49720: ST_TO_ADDR
// if not f then
49721: LD_VAR 0 12
49725: NOT
49726: IFFALSE 49744
// begin x := x + 2 ;
49728: LD_ADDR_VAR 0 13
49732: PUSH
49733: LD_VAR 0 13
49737: PUSH
49738: LD_INT 2
49740: PLUS
49741: ST_TO_ADDR
// continue ;
49742: GO 49542
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49744: LD_VAR 0 12
49748: PUSH
49749: LD_INT 1
49751: ARRAY
49752: PPUSH
49753: CALL_OW 266
49757: PUSH
49758: LD_INT 5
49760: EQUAL
49761: IFFALSE 49835
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49763: LD_VAR 0 12
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: PPUSH
49772: CALL_OW 313
49776: PUSH
49777: LD_INT 3
49779: LESS
49780: IFFALSE 49816
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49782: LD_INT 0
49784: PPUSH
49785: LD_INT 5
49787: PUSH
49788: LD_INT 8
49790: PUSH
49791: LD_INT 9
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: PUSH
49799: LD_VAR 0 17
49803: ARRAY
49804: PPUSH
49805: LD_VAR 0 4
49809: PPUSH
49810: CALL_OW 380
49814: GO 49833
// PrepareHuman ( false , i , skill ) ;
49816: LD_INT 0
49818: PPUSH
49819: LD_VAR 0 8
49823: PPUSH
49824: LD_VAR 0 4
49828: PPUSH
49829: CALL_OW 380
// end else
49833: GO 49852
// PrepareHuman ( false , i , skill ) ;
49835: LD_INT 0
49837: PPUSH
49838: LD_VAR 0 8
49842: PPUSH
49843: LD_VAR 0 4
49847: PPUSH
49848: CALL_OW 380
// un := CreateHuman ;
49852: LD_ADDR_VAR 0 14
49856: PUSH
49857: CALL_OW 44
49861: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49862: LD_ADDR_VAR 0 7
49866: PUSH
49867: LD_VAR 0 7
49871: PPUSH
49872: LD_INT 1
49874: PPUSH
49875: LD_VAR 0 14
49879: PPUSH
49880: CALL_OW 2
49884: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49885: LD_VAR 0 14
49889: PPUSH
49890: LD_VAR 0 12
49894: PUSH
49895: LD_INT 1
49897: ARRAY
49898: PPUSH
49899: CALL_OW 52
// end ;
49903: GO 49542
49905: POP
49906: POP
// end ;
49907: GO 48844
49909: POP
49910: POP
// result := result ^ buildings ;
49911: LD_ADDR_VAR 0 7
49915: PUSH
49916: LD_VAR 0 7
49920: PUSH
49921: LD_VAR 0 18
49925: ADD
49926: ST_TO_ADDR
// end else
49927: GO 50070
// begin for i = 1 to personel do
49929: LD_ADDR_VAR 0 8
49933: PUSH
49934: DOUBLE
49935: LD_INT 1
49937: DEC
49938: ST_TO_ADDR
49939: LD_VAR 0 6
49943: PUSH
49944: FOR_TO
49945: IFFALSE 50068
// begin if i > 4 then
49947: LD_VAR 0 8
49951: PUSH
49952: LD_INT 4
49954: GREATER
49955: IFFALSE 49959
// break ;
49957: GO 50068
// x := personel [ i ] ;
49959: LD_ADDR_VAR 0 13
49963: PUSH
49964: LD_VAR 0 6
49968: PUSH
49969: LD_VAR 0 8
49973: ARRAY
49974: ST_TO_ADDR
// if x = - 1 then
49975: LD_VAR 0 13
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: EQUAL
49984: IFFALSE 49988
// continue ;
49986: GO 49944
// PrepareHuman ( false , i , skill ) ;
49988: LD_INT 0
49990: PPUSH
49991: LD_VAR 0 8
49995: PPUSH
49996: LD_VAR 0 4
50000: PPUSH
50001: CALL_OW 380
// un := CreateHuman ;
50005: LD_ADDR_VAR 0 14
50009: PUSH
50010: CALL_OW 44
50014: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50015: LD_VAR 0 14
50019: PPUSH
50020: LD_VAR 0 1
50024: PPUSH
50025: CALL_OW 250
50029: PPUSH
50030: LD_VAR 0 1
50034: PPUSH
50035: CALL_OW 251
50039: PPUSH
50040: LD_INT 10
50042: PPUSH
50043: LD_INT 0
50045: PPUSH
50046: CALL_OW 50
// result := result ^ un ;
50050: LD_ADDR_VAR 0 7
50054: PUSH
50055: LD_VAR 0 7
50059: PUSH
50060: LD_VAR 0 14
50064: ADD
50065: ST_TO_ADDR
// end ;
50066: GO 49944
50068: POP
50069: POP
// end ; end ;
50070: LD_VAR 0 7
50074: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50075: LD_INT 0
50077: PPUSH
50078: PPUSH
50079: PPUSH
50080: PPUSH
50081: PPUSH
50082: PPUSH
50083: PPUSH
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
50091: PPUSH
50092: PPUSH
// result := false ;
50093: LD_ADDR_VAR 0 3
50097: PUSH
50098: LD_INT 0
50100: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50101: LD_VAR 0 1
50105: NOT
50106: PUSH
50107: LD_VAR 0 1
50111: PPUSH
50112: CALL_OW 266
50116: PUSH
50117: LD_INT 32
50119: PUSH
50120: LD_INT 33
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: IN
50127: NOT
50128: OR
50129: IFFALSE 50133
// exit ;
50131: GO 51242
// nat := GetNation ( tower ) ;
50133: LD_ADDR_VAR 0 12
50137: PUSH
50138: LD_VAR 0 1
50142: PPUSH
50143: CALL_OW 248
50147: ST_TO_ADDR
// side := GetSide ( tower ) ;
50148: LD_ADDR_VAR 0 16
50152: PUSH
50153: LD_VAR 0 1
50157: PPUSH
50158: CALL_OW 255
50162: ST_TO_ADDR
// x := GetX ( tower ) ;
50163: LD_ADDR_VAR 0 10
50167: PUSH
50168: LD_VAR 0 1
50172: PPUSH
50173: CALL_OW 250
50177: ST_TO_ADDR
// y := GetY ( tower ) ;
50178: LD_ADDR_VAR 0 11
50182: PUSH
50183: LD_VAR 0 1
50187: PPUSH
50188: CALL_OW 251
50192: ST_TO_ADDR
// if not x or not y then
50193: LD_VAR 0 10
50197: NOT
50198: PUSH
50199: LD_VAR 0 11
50203: NOT
50204: OR
50205: IFFALSE 50209
// exit ;
50207: GO 51242
// weapon := 0 ;
50209: LD_ADDR_VAR 0 18
50213: PUSH
50214: LD_INT 0
50216: ST_TO_ADDR
// fac_list := [ ] ;
50217: LD_ADDR_VAR 0 17
50221: PUSH
50222: EMPTY
50223: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50224: LD_ADDR_VAR 0 6
50228: PUSH
50229: LD_VAR 0 1
50233: PPUSH
50234: CALL_OW 274
50238: PPUSH
50239: LD_VAR 0 2
50243: PPUSH
50244: LD_INT 0
50246: PPUSH
50247: CALL 47813 0 3
50251: PPUSH
50252: LD_INT 30
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PPUSH
50262: CALL_OW 72
50266: ST_TO_ADDR
// if not factories then
50267: LD_VAR 0 6
50271: NOT
50272: IFFALSE 50276
// exit ;
50274: GO 51242
// for i in factories do
50276: LD_ADDR_VAR 0 8
50280: PUSH
50281: LD_VAR 0 6
50285: PUSH
50286: FOR_IN
50287: IFFALSE 50312
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50289: LD_ADDR_VAR 0 17
50293: PUSH
50294: LD_VAR 0 17
50298: PUSH
50299: LD_VAR 0 8
50303: PPUSH
50304: CALL_OW 478
50308: UNION
50309: ST_TO_ADDR
50310: GO 50286
50312: POP
50313: POP
// if not fac_list then
50314: LD_VAR 0 17
50318: NOT
50319: IFFALSE 50323
// exit ;
50321: GO 51242
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50323: LD_ADDR_VAR 0 5
50327: PUSH
50328: LD_INT 4
50330: PUSH
50331: LD_INT 5
50333: PUSH
50334: LD_INT 9
50336: PUSH
50337: LD_INT 10
50339: PUSH
50340: LD_INT 6
50342: PUSH
50343: LD_INT 7
50345: PUSH
50346: LD_INT 11
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 27
50360: PUSH
50361: LD_INT 28
50363: PUSH
50364: LD_INT 26
50366: PUSH
50367: LD_INT 30
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 43
50378: PUSH
50379: LD_INT 44
50381: PUSH
50382: LD_INT 46
50384: PUSH
50385: LD_INT 45
50387: PUSH
50388: LD_INT 47
50390: PUSH
50391: LD_INT 49
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: LIST
50406: PUSH
50407: LD_VAR 0 12
50411: ARRAY
50412: ST_TO_ADDR
// list := list isect fac_list ;
50413: LD_ADDR_VAR 0 5
50417: PUSH
50418: LD_VAR 0 5
50422: PUSH
50423: LD_VAR 0 17
50427: ISECT
50428: ST_TO_ADDR
// if not list then
50429: LD_VAR 0 5
50433: NOT
50434: IFFALSE 50438
// exit ;
50436: GO 51242
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50438: LD_VAR 0 12
50442: PUSH
50443: LD_INT 3
50445: EQUAL
50446: PUSH
50447: LD_INT 49
50449: PUSH
50450: LD_VAR 0 5
50454: IN
50455: AND
50456: PUSH
50457: LD_INT 31
50459: PPUSH
50460: LD_VAR 0 16
50464: PPUSH
50465: CALL_OW 321
50469: PUSH
50470: LD_INT 2
50472: EQUAL
50473: AND
50474: IFFALSE 50534
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50476: LD_INT 22
50478: PUSH
50479: LD_VAR 0 16
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 35
50490: PUSH
50491: LD_INT 49
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 91
50500: PUSH
50501: LD_VAR 0 1
50505: PUSH
50506: LD_INT 10
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: LIST
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: PPUSH
50519: CALL_OW 69
50523: NOT
50524: IFFALSE 50534
// weapon := ru_time_lapser ;
50526: LD_ADDR_VAR 0 18
50530: PUSH
50531: LD_INT 49
50533: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50534: LD_VAR 0 12
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: IN
50549: PUSH
50550: LD_INT 11
50552: PUSH
50553: LD_VAR 0 5
50557: IN
50558: PUSH
50559: LD_INT 30
50561: PUSH
50562: LD_VAR 0 5
50566: IN
50567: OR
50568: AND
50569: PUSH
50570: LD_INT 6
50572: PPUSH
50573: LD_VAR 0 16
50577: PPUSH
50578: CALL_OW 321
50582: PUSH
50583: LD_INT 2
50585: EQUAL
50586: AND
50587: IFFALSE 50752
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50589: LD_INT 22
50591: PUSH
50592: LD_VAR 0 16
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: LD_INT 35
50606: PUSH
50607: LD_INT 11
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 35
50616: PUSH
50617: LD_INT 30
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 91
50631: PUSH
50632: LD_VAR 0 1
50636: PUSH
50637: LD_INT 18
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: PPUSH
50650: CALL_OW 69
50654: NOT
50655: PUSH
50656: LD_INT 22
50658: PUSH
50659: LD_VAR 0 16
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 30
50673: PUSH
50674: LD_INT 32
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 30
50683: PUSH
50684: LD_INT 33
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 91
50698: PUSH
50699: LD_VAR 0 1
50703: PUSH
50704: LD_INT 12
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: PPUSH
50720: CALL_OW 69
50724: PUSH
50725: LD_INT 2
50727: GREATER
50728: AND
50729: IFFALSE 50752
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50731: LD_ADDR_VAR 0 18
50735: PUSH
50736: LD_INT 11
50738: PUSH
50739: LD_INT 30
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_VAR 0 12
50750: ARRAY
50751: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50752: LD_VAR 0 18
50756: NOT
50757: PUSH
50758: LD_INT 40
50760: PPUSH
50761: LD_VAR 0 16
50765: PPUSH
50766: CALL_OW 321
50770: PUSH
50771: LD_INT 2
50773: EQUAL
50774: AND
50775: PUSH
50776: LD_INT 7
50778: PUSH
50779: LD_VAR 0 5
50783: IN
50784: PUSH
50785: LD_INT 28
50787: PUSH
50788: LD_VAR 0 5
50792: IN
50793: OR
50794: PUSH
50795: LD_INT 45
50797: PUSH
50798: LD_VAR 0 5
50802: IN
50803: OR
50804: AND
50805: IFFALSE 51059
// begin hex := GetHexInfo ( x , y ) ;
50807: LD_ADDR_VAR 0 4
50811: PUSH
50812: LD_VAR 0 10
50816: PPUSH
50817: LD_VAR 0 11
50821: PPUSH
50822: CALL_OW 546
50826: ST_TO_ADDR
// if hex [ 1 ] then
50827: LD_VAR 0 4
50831: PUSH
50832: LD_INT 1
50834: ARRAY
50835: IFFALSE 50839
// exit ;
50837: GO 51242
// height := hex [ 2 ] ;
50839: LD_ADDR_VAR 0 15
50843: PUSH
50844: LD_VAR 0 4
50848: PUSH
50849: LD_INT 2
50851: ARRAY
50852: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50853: LD_ADDR_VAR 0 14
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: LD_INT 5
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: ST_TO_ADDR
// for i in tmp do
50876: LD_ADDR_VAR 0 8
50880: PUSH
50881: LD_VAR 0 14
50885: PUSH
50886: FOR_IN
50887: IFFALSE 51057
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50889: LD_ADDR_VAR 0 9
50893: PUSH
50894: LD_VAR 0 10
50898: PPUSH
50899: LD_VAR 0 8
50903: PPUSH
50904: LD_INT 5
50906: PPUSH
50907: CALL_OW 272
50911: PUSH
50912: LD_VAR 0 11
50916: PPUSH
50917: LD_VAR 0 8
50921: PPUSH
50922: LD_INT 5
50924: PPUSH
50925: CALL_OW 273
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50934: LD_VAR 0 9
50938: PUSH
50939: LD_INT 1
50941: ARRAY
50942: PPUSH
50943: LD_VAR 0 9
50947: PUSH
50948: LD_INT 2
50950: ARRAY
50951: PPUSH
50952: CALL_OW 488
50956: IFFALSE 51055
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50958: LD_ADDR_VAR 0 4
50962: PUSH
50963: LD_VAR 0 9
50967: PUSH
50968: LD_INT 1
50970: ARRAY
50971: PPUSH
50972: LD_VAR 0 9
50976: PUSH
50977: LD_INT 2
50979: ARRAY
50980: PPUSH
50981: CALL_OW 546
50985: ST_TO_ADDR
// if hex [ 1 ] then
50986: LD_VAR 0 4
50990: PUSH
50991: LD_INT 1
50993: ARRAY
50994: IFFALSE 50998
// continue ;
50996: GO 50886
// h := hex [ 2 ] ;
50998: LD_ADDR_VAR 0 13
51002: PUSH
51003: LD_VAR 0 4
51007: PUSH
51008: LD_INT 2
51010: ARRAY
51011: ST_TO_ADDR
// if h + 7 < height then
51012: LD_VAR 0 13
51016: PUSH
51017: LD_INT 7
51019: PLUS
51020: PUSH
51021: LD_VAR 0 15
51025: LESS
51026: IFFALSE 51055
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51028: LD_ADDR_VAR 0 18
51032: PUSH
51033: LD_INT 7
51035: PUSH
51036: LD_INT 28
51038: PUSH
51039: LD_INT 45
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: PUSH
51047: LD_VAR 0 12
51051: ARRAY
51052: ST_TO_ADDR
// break ;
51053: GO 51057
// end ; end ; end ;
51055: GO 50886
51057: POP
51058: POP
// end ; if not weapon then
51059: LD_VAR 0 18
51063: NOT
51064: IFFALSE 51124
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51066: LD_ADDR_VAR 0 5
51070: PUSH
51071: LD_VAR 0 5
51075: PUSH
51076: LD_INT 11
51078: PUSH
51079: LD_INT 30
51081: PUSH
51082: LD_INT 49
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: LIST
51089: DIFF
51090: ST_TO_ADDR
// if not list then
51091: LD_VAR 0 5
51095: NOT
51096: IFFALSE 51100
// exit ;
51098: GO 51242
// weapon := list [ rand ( 1 , list ) ] ;
51100: LD_ADDR_VAR 0 18
51104: PUSH
51105: LD_VAR 0 5
51109: PUSH
51110: LD_INT 1
51112: PPUSH
51113: LD_VAR 0 5
51117: PPUSH
51118: CALL_OW 12
51122: ARRAY
51123: ST_TO_ADDR
// end ; if weapon then
51124: LD_VAR 0 18
51128: IFFALSE 51242
// begin tmp := CostOfWeapon ( weapon ) ;
51130: LD_ADDR_VAR 0 14
51134: PUSH
51135: LD_VAR 0 18
51139: PPUSH
51140: CALL_OW 451
51144: ST_TO_ADDR
// j := GetBase ( tower ) ;
51145: LD_ADDR_VAR 0 9
51149: PUSH
51150: LD_VAR 0 1
51154: PPUSH
51155: CALL_OW 274
51159: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51160: LD_VAR 0 9
51164: PPUSH
51165: LD_INT 1
51167: PPUSH
51168: CALL_OW 275
51172: PUSH
51173: LD_VAR 0 14
51177: PUSH
51178: LD_INT 1
51180: ARRAY
51181: GREATEREQUAL
51182: PUSH
51183: LD_VAR 0 9
51187: PPUSH
51188: LD_INT 2
51190: PPUSH
51191: CALL_OW 275
51195: PUSH
51196: LD_VAR 0 14
51200: PUSH
51201: LD_INT 2
51203: ARRAY
51204: GREATEREQUAL
51205: AND
51206: PUSH
51207: LD_VAR 0 9
51211: PPUSH
51212: LD_INT 3
51214: PPUSH
51215: CALL_OW 275
51219: PUSH
51220: LD_VAR 0 14
51224: PUSH
51225: LD_INT 3
51227: ARRAY
51228: GREATEREQUAL
51229: AND
51230: IFFALSE 51242
// result := weapon ;
51232: LD_ADDR_VAR 0 3
51236: PUSH
51237: LD_VAR 0 18
51241: ST_TO_ADDR
// end ; end ;
51242: LD_VAR 0 3
51246: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51247: LD_INT 0
51249: PPUSH
51250: PPUSH
// result := true ;
51251: LD_ADDR_VAR 0 3
51255: PUSH
51256: LD_INT 1
51258: ST_TO_ADDR
// if array1 = array2 then
51259: LD_VAR 0 1
51263: PUSH
51264: LD_VAR 0 2
51268: EQUAL
51269: IFFALSE 51329
// begin for i = 1 to array1 do
51271: LD_ADDR_VAR 0 4
51275: PUSH
51276: DOUBLE
51277: LD_INT 1
51279: DEC
51280: ST_TO_ADDR
51281: LD_VAR 0 1
51285: PUSH
51286: FOR_TO
51287: IFFALSE 51325
// if array1 [ i ] <> array2 [ i ] then
51289: LD_VAR 0 1
51293: PUSH
51294: LD_VAR 0 4
51298: ARRAY
51299: PUSH
51300: LD_VAR 0 2
51304: PUSH
51305: LD_VAR 0 4
51309: ARRAY
51310: NONEQUAL
51311: IFFALSE 51323
// begin result := false ;
51313: LD_ADDR_VAR 0 3
51317: PUSH
51318: LD_INT 0
51320: ST_TO_ADDR
// break ;
51321: GO 51325
// end ;
51323: GO 51286
51325: POP
51326: POP
// end else
51327: GO 51337
// result := false ;
51329: LD_ADDR_VAR 0 3
51333: PUSH
51334: LD_INT 0
51336: ST_TO_ADDR
// end ;
51337: LD_VAR 0 3
51341: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51342: LD_INT 0
51344: PPUSH
51345: PPUSH
// if not array1 or not array2 then
51346: LD_VAR 0 1
51350: NOT
51351: PUSH
51352: LD_VAR 0 2
51356: NOT
51357: OR
51358: IFFALSE 51362
// exit ;
51360: GO 51426
// result := true ;
51362: LD_ADDR_VAR 0 3
51366: PUSH
51367: LD_INT 1
51369: ST_TO_ADDR
// for i = 1 to array1 do
51370: LD_ADDR_VAR 0 4
51374: PUSH
51375: DOUBLE
51376: LD_INT 1
51378: DEC
51379: ST_TO_ADDR
51380: LD_VAR 0 1
51384: PUSH
51385: FOR_TO
51386: IFFALSE 51424
// if array1 [ i ] <> array2 [ i ] then
51388: LD_VAR 0 1
51392: PUSH
51393: LD_VAR 0 4
51397: ARRAY
51398: PUSH
51399: LD_VAR 0 2
51403: PUSH
51404: LD_VAR 0 4
51408: ARRAY
51409: NONEQUAL
51410: IFFALSE 51422
// begin result := false ;
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_INT 0
51419: ST_TO_ADDR
// break ;
51420: GO 51424
// end ;
51422: GO 51385
51424: POP
51425: POP
// end ;
51426: LD_VAR 0 3
51430: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51431: LD_INT 0
51433: PPUSH
51434: PPUSH
51435: PPUSH
// pom := GetBase ( fac ) ;
51436: LD_ADDR_VAR 0 5
51440: PUSH
51441: LD_VAR 0 1
51445: PPUSH
51446: CALL_OW 274
51450: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51451: LD_ADDR_VAR 0 4
51455: PUSH
51456: LD_VAR 0 2
51460: PUSH
51461: LD_INT 1
51463: ARRAY
51464: PPUSH
51465: LD_VAR 0 2
51469: PUSH
51470: LD_INT 2
51472: ARRAY
51473: PPUSH
51474: LD_VAR 0 2
51478: PUSH
51479: LD_INT 3
51481: ARRAY
51482: PPUSH
51483: LD_VAR 0 2
51487: PUSH
51488: LD_INT 4
51490: ARRAY
51491: PPUSH
51492: CALL_OW 449
51496: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51497: LD_ADDR_VAR 0 3
51501: PUSH
51502: LD_VAR 0 5
51506: PPUSH
51507: LD_INT 1
51509: PPUSH
51510: CALL_OW 275
51514: PUSH
51515: LD_VAR 0 4
51519: PUSH
51520: LD_INT 1
51522: ARRAY
51523: GREATEREQUAL
51524: PUSH
51525: LD_VAR 0 5
51529: PPUSH
51530: LD_INT 2
51532: PPUSH
51533: CALL_OW 275
51537: PUSH
51538: LD_VAR 0 4
51542: PUSH
51543: LD_INT 2
51545: ARRAY
51546: GREATEREQUAL
51547: AND
51548: PUSH
51549: LD_VAR 0 5
51553: PPUSH
51554: LD_INT 3
51556: PPUSH
51557: CALL_OW 275
51561: PUSH
51562: LD_VAR 0 4
51566: PUSH
51567: LD_INT 3
51569: ARRAY
51570: GREATEREQUAL
51571: AND
51572: ST_TO_ADDR
// end ;
51573: LD_VAR 0 3
51577: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51578: LD_INT 0
51580: PPUSH
51581: PPUSH
51582: PPUSH
51583: PPUSH
// pom := GetBase ( building ) ;
51584: LD_ADDR_VAR 0 3
51588: PUSH
51589: LD_VAR 0 1
51593: PPUSH
51594: CALL_OW 274
51598: ST_TO_ADDR
// if not pom then
51599: LD_VAR 0 3
51603: NOT
51604: IFFALSE 51608
// exit ;
51606: GO 51778
// btype := GetBType ( building ) ;
51608: LD_ADDR_VAR 0 5
51612: PUSH
51613: LD_VAR 0 1
51617: PPUSH
51618: CALL_OW 266
51622: ST_TO_ADDR
// if btype = b_armoury then
51623: LD_VAR 0 5
51627: PUSH
51628: LD_INT 4
51630: EQUAL
51631: IFFALSE 51641
// btype := b_barracks ;
51633: LD_ADDR_VAR 0 5
51637: PUSH
51638: LD_INT 5
51640: ST_TO_ADDR
// if btype = b_depot then
51641: LD_VAR 0 5
51645: PUSH
51646: LD_INT 0
51648: EQUAL
51649: IFFALSE 51659
// btype := b_warehouse ;
51651: LD_ADDR_VAR 0 5
51655: PUSH
51656: LD_INT 1
51658: ST_TO_ADDR
// if btype = b_workshop then
51659: LD_VAR 0 5
51663: PUSH
51664: LD_INT 2
51666: EQUAL
51667: IFFALSE 51677
// btype := b_factory ;
51669: LD_ADDR_VAR 0 5
51673: PUSH
51674: LD_INT 3
51676: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51677: LD_ADDR_VAR 0 4
51681: PUSH
51682: LD_VAR 0 5
51686: PPUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 248
51696: PPUSH
51697: CALL_OW 450
51701: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51702: LD_ADDR_VAR 0 2
51706: PUSH
51707: LD_VAR 0 3
51711: PPUSH
51712: LD_INT 1
51714: PPUSH
51715: CALL_OW 275
51719: PUSH
51720: LD_VAR 0 4
51724: PUSH
51725: LD_INT 1
51727: ARRAY
51728: GREATEREQUAL
51729: PUSH
51730: LD_VAR 0 3
51734: PPUSH
51735: LD_INT 2
51737: PPUSH
51738: CALL_OW 275
51742: PUSH
51743: LD_VAR 0 4
51747: PUSH
51748: LD_INT 2
51750: ARRAY
51751: GREATEREQUAL
51752: AND
51753: PUSH
51754: LD_VAR 0 3
51758: PPUSH
51759: LD_INT 3
51761: PPUSH
51762: CALL_OW 275
51766: PUSH
51767: LD_VAR 0 4
51771: PUSH
51772: LD_INT 3
51774: ARRAY
51775: GREATEREQUAL
51776: AND
51777: ST_TO_ADDR
// end ;
51778: LD_VAR 0 2
51782: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51783: LD_INT 0
51785: PPUSH
51786: PPUSH
51787: PPUSH
// pom := GetBase ( building ) ;
51788: LD_ADDR_VAR 0 4
51792: PUSH
51793: LD_VAR 0 1
51797: PPUSH
51798: CALL_OW 274
51802: ST_TO_ADDR
// if not pom then
51803: LD_VAR 0 4
51807: NOT
51808: IFFALSE 51812
// exit ;
51810: GO 51913
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51812: LD_ADDR_VAR 0 5
51816: PUSH
51817: LD_VAR 0 2
51821: PPUSH
51822: LD_VAR 0 1
51826: PPUSH
51827: CALL_OW 248
51831: PPUSH
51832: CALL_OW 450
51836: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51837: LD_ADDR_VAR 0 3
51841: PUSH
51842: LD_VAR 0 4
51846: PPUSH
51847: LD_INT 1
51849: PPUSH
51850: CALL_OW 275
51854: PUSH
51855: LD_VAR 0 5
51859: PUSH
51860: LD_INT 1
51862: ARRAY
51863: GREATEREQUAL
51864: PUSH
51865: LD_VAR 0 4
51869: PPUSH
51870: LD_INT 2
51872: PPUSH
51873: CALL_OW 275
51877: PUSH
51878: LD_VAR 0 5
51882: PUSH
51883: LD_INT 2
51885: ARRAY
51886: GREATEREQUAL
51887: AND
51888: PUSH
51889: LD_VAR 0 4
51893: PPUSH
51894: LD_INT 3
51896: PPUSH
51897: CALL_OW 275
51901: PUSH
51902: LD_VAR 0 5
51906: PUSH
51907: LD_INT 3
51909: ARRAY
51910: GREATEREQUAL
51911: AND
51912: ST_TO_ADDR
// end ;
51913: LD_VAR 0 3
51917: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51918: LD_INT 0
51920: PPUSH
51921: PPUSH
51922: PPUSH
51923: PPUSH
51924: PPUSH
51925: PPUSH
51926: PPUSH
51927: PPUSH
51928: PPUSH
51929: PPUSH
51930: PPUSH
// result := false ;
51931: LD_ADDR_VAR 0 8
51935: PUSH
51936: LD_INT 0
51938: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51939: LD_VAR 0 5
51943: NOT
51944: PUSH
51945: LD_VAR 0 1
51949: NOT
51950: OR
51951: PUSH
51952: LD_VAR 0 2
51956: NOT
51957: OR
51958: PUSH
51959: LD_VAR 0 3
51963: NOT
51964: OR
51965: IFFALSE 51969
// exit ;
51967: GO 52783
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51969: LD_ADDR_VAR 0 14
51973: PUSH
51974: LD_VAR 0 1
51978: PPUSH
51979: LD_VAR 0 2
51983: PPUSH
51984: LD_VAR 0 3
51988: PPUSH
51989: LD_VAR 0 4
51993: PPUSH
51994: LD_VAR 0 5
51998: PUSH
51999: LD_INT 1
52001: ARRAY
52002: PPUSH
52003: CALL_OW 248
52007: PPUSH
52008: LD_INT 0
52010: PPUSH
52011: CALL 54016 0 6
52015: ST_TO_ADDR
// if not hexes then
52016: LD_VAR 0 14
52020: NOT
52021: IFFALSE 52025
// exit ;
52023: GO 52783
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52025: LD_ADDR_VAR 0 17
52029: PUSH
52030: LD_VAR 0 5
52034: PPUSH
52035: LD_INT 22
52037: PUSH
52038: LD_VAR 0 13
52042: PPUSH
52043: CALL_OW 255
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: LD_INT 30
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 30
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PPUSH
52084: CALL_OW 72
52088: ST_TO_ADDR
// for i = 1 to hexes do
52089: LD_ADDR_VAR 0 9
52093: PUSH
52094: DOUBLE
52095: LD_INT 1
52097: DEC
52098: ST_TO_ADDR
52099: LD_VAR 0 14
52103: PUSH
52104: FOR_TO
52105: IFFALSE 52781
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52107: LD_ADDR_VAR 0 13
52111: PUSH
52112: LD_VAR 0 14
52116: PUSH
52117: LD_VAR 0 9
52121: ARRAY
52122: PUSH
52123: LD_INT 1
52125: ARRAY
52126: PPUSH
52127: LD_VAR 0 14
52131: PUSH
52132: LD_VAR 0 9
52136: ARRAY
52137: PUSH
52138: LD_INT 2
52140: ARRAY
52141: PPUSH
52142: CALL_OW 428
52146: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52147: LD_VAR 0 14
52151: PUSH
52152: LD_VAR 0 9
52156: ARRAY
52157: PUSH
52158: LD_INT 1
52160: ARRAY
52161: PPUSH
52162: LD_VAR 0 14
52166: PUSH
52167: LD_VAR 0 9
52171: ARRAY
52172: PUSH
52173: LD_INT 2
52175: ARRAY
52176: PPUSH
52177: CALL_OW 351
52181: PUSH
52182: LD_VAR 0 14
52186: PUSH
52187: LD_VAR 0 9
52191: ARRAY
52192: PUSH
52193: LD_INT 1
52195: ARRAY
52196: PPUSH
52197: LD_VAR 0 14
52201: PUSH
52202: LD_VAR 0 9
52206: ARRAY
52207: PUSH
52208: LD_INT 2
52210: ARRAY
52211: PPUSH
52212: CALL_OW 488
52216: NOT
52217: OR
52218: PUSH
52219: LD_VAR 0 13
52223: PPUSH
52224: CALL_OW 247
52228: PUSH
52229: LD_INT 3
52231: EQUAL
52232: OR
52233: IFFALSE 52239
// exit ;
52235: POP
52236: POP
52237: GO 52783
// if not tmp then
52239: LD_VAR 0 13
52243: NOT
52244: IFFALSE 52248
// continue ;
52246: GO 52104
// result := true ;
52248: LD_ADDR_VAR 0 8
52252: PUSH
52253: LD_INT 1
52255: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52256: LD_VAR 0 6
52260: PUSH
52261: LD_VAR 0 13
52265: PPUSH
52266: CALL_OW 247
52270: PUSH
52271: LD_INT 2
52273: EQUAL
52274: AND
52275: PUSH
52276: LD_VAR 0 13
52280: PPUSH
52281: CALL_OW 263
52285: PUSH
52286: LD_INT 1
52288: EQUAL
52289: AND
52290: IFFALSE 52454
// begin if IsDrivenBy ( tmp ) then
52292: LD_VAR 0 13
52296: PPUSH
52297: CALL_OW 311
52301: IFFALSE 52305
// continue ;
52303: GO 52104
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52305: LD_VAR 0 6
52309: PPUSH
52310: LD_INT 3
52312: PUSH
52313: LD_INT 60
52315: PUSH
52316: EMPTY
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 55
52328: PUSH
52329: EMPTY
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PPUSH
52340: CALL_OW 72
52344: IFFALSE 52452
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52346: LD_ADDR_VAR 0 18
52350: PUSH
52351: LD_VAR 0 6
52355: PPUSH
52356: LD_INT 3
52358: PUSH
52359: LD_INT 60
52361: PUSH
52362: EMPTY
52363: LIST
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: LD_INT 55
52374: PUSH
52375: EMPTY
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PPUSH
52386: CALL_OW 72
52390: PUSH
52391: LD_INT 1
52393: ARRAY
52394: ST_TO_ADDR
// if IsInUnit ( driver ) then
52395: LD_VAR 0 18
52399: PPUSH
52400: CALL_OW 310
52404: IFFALSE 52415
// ComExit ( driver ) ;
52406: LD_VAR 0 18
52410: PPUSH
52411: CALL 77777 0 1
// AddComEnterUnit ( driver , tmp ) ;
52415: LD_VAR 0 18
52419: PPUSH
52420: LD_VAR 0 13
52424: PPUSH
52425: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52429: LD_VAR 0 18
52433: PPUSH
52434: LD_VAR 0 7
52438: PPUSH
52439: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52443: LD_VAR 0 18
52447: PPUSH
52448: CALL_OW 181
// end ; continue ;
52452: GO 52104
// end ; if not cleaners or not tmp in cleaners then
52454: LD_VAR 0 6
52458: NOT
52459: PUSH
52460: LD_VAR 0 13
52464: PUSH
52465: LD_VAR 0 6
52469: IN
52470: NOT
52471: OR
52472: IFFALSE 52779
// begin if dep then
52474: LD_VAR 0 17
52478: IFFALSE 52614
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52480: LD_ADDR_VAR 0 16
52484: PUSH
52485: LD_VAR 0 17
52489: PUSH
52490: LD_INT 1
52492: ARRAY
52493: PPUSH
52494: CALL_OW 250
52498: PPUSH
52499: LD_VAR 0 17
52503: PUSH
52504: LD_INT 1
52506: ARRAY
52507: PPUSH
52508: CALL_OW 254
52512: PPUSH
52513: LD_INT 5
52515: PPUSH
52516: CALL_OW 272
52520: PUSH
52521: LD_VAR 0 17
52525: PUSH
52526: LD_INT 1
52528: ARRAY
52529: PPUSH
52530: CALL_OW 251
52534: PPUSH
52535: LD_VAR 0 17
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: PPUSH
52544: CALL_OW 254
52548: PPUSH
52549: LD_INT 5
52551: PPUSH
52552: CALL_OW 273
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52561: LD_VAR 0 16
52565: PUSH
52566: LD_INT 1
52568: ARRAY
52569: PPUSH
52570: LD_VAR 0 16
52574: PUSH
52575: LD_INT 2
52577: ARRAY
52578: PPUSH
52579: CALL_OW 488
52583: IFFALSE 52614
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52585: LD_VAR 0 13
52589: PPUSH
52590: LD_VAR 0 16
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PPUSH
52599: LD_VAR 0 16
52603: PUSH
52604: LD_INT 2
52606: ARRAY
52607: PPUSH
52608: CALL_OW 111
// continue ;
52612: GO 52104
// end ; end ; r := GetDir ( tmp ) ;
52614: LD_ADDR_VAR 0 15
52618: PUSH
52619: LD_VAR 0 13
52623: PPUSH
52624: CALL_OW 254
52628: ST_TO_ADDR
// if r = 5 then
52629: LD_VAR 0 15
52633: PUSH
52634: LD_INT 5
52636: EQUAL
52637: IFFALSE 52647
// r := 0 ;
52639: LD_ADDR_VAR 0 15
52643: PUSH
52644: LD_INT 0
52646: ST_TO_ADDR
// for j = r to 5 do
52647: LD_ADDR_VAR 0 10
52651: PUSH
52652: DOUBLE
52653: LD_VAR 0 15
52657: DEC
52658: ST_TO_ADDR
52659: LD_INT 5
52661: PUSH
52662: FOR_TO
52663: IFFALSE 52777
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52665: LD_ADDR_VAR 0 11
52669: PUSH
52670: LD_VAR 0 13
52674: PPUSH
52675: CALL_OW 250
52679: PPUSH
52680: LD_VAR 0 10
52684: PPUSH
52685: LD_INT 2
52687: PPUSH
52688: CALL_OW 272
52692: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52693: LD_ADDR_VAR 0 12
52697: PUSH
52698: LD_VAR 0 13
52702: PPUSH
52703: CALL_OW 251
52707: PPUSH
52708: LD_VAR 0 10
52712: PPUSH
52713: LD_INT 2
52715: PPUSH
52716: CALL_OW 273
52720: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52721: LD_VAR 0 11
52725: PPUSH
52726: LD_VAR 0 12
52730: PPUSH
52731: CALL_OW 488
52735: PUSH
52736: LD_VAR 0 11
52740: PPUSH
52741: LD_VAR 0 12
52745: PPUSH
52746: CALL_OW 428
52750: NOT
52751: AND
52752: IFFALSE 52775
// begin ComMoveXY ( tmp , _x , _y ) ;
52754: LD_VAR 0 13
52758: PPUSH
52759: LD_VAR 0 11
52763: PPUSH
52764: LD_VAR 0 12
52768: PPUSH
52769: CALL_OW 111
// break ;
52773: GO 52777
// end ; end ;
52775: GO 52662
52777: POP
52778: POP
// end ; end ;
52779: GO 52104
52781: POP
52782: POP
// end ;
52783: LD_VAR 0 8
52787: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52788: LD_INT 0
52790: PPUSH
// result := true ;
52791: LD_ADDR_VAR 0 3
52795: PUSH
52796: LD_INT 1
52798: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52799: LD_VAR 0 2
52803: PUSH
52804: LD_INT 24
52806: DOUBLE
52807: EQUAL
52808: IFTRUE 52818
52810: LD_INT 33
52812: DOUBLE
52813: EQUAL
52814: IFTRUE 52818
52816: GO 52843
52818: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52819: LD_ADDR_VAR 0 3
52823: PUSH
52824: LD_INT 32
52826: PPUSH
52827: LD_VAR 0 1
52831: PPUSH
52832: CALL_OW 321
52836: PUSH
52837: LD_INT 2
52839: EQUAL
52840: ST_TO_ADDR
52841: GO 53159
52843: LD_INT 20
52845: DOUBLE
52846: EQUAL
52847: IFTRUE 52851
52849: GO 52876
52851: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52852: LD_ADDR_VAR 0 3
52856: PUSH
52857: LD_INT 6
52859: PPUSH
52860: LD_VAR 0 1
52864: PPUSH
52865: CALL_OW 321
52869: PUSH
52870: LD_INT 2
52872: EQUAL
52873: ST_TO_ADDR
52874: GO 53159
52876: LD_INT 22
52878: DOUBLE
52879: EQUAL
52880: IFTRUE 52890
52882: LD_INT 36
52884: DOUBLE
52885: EQUAL
52886: IFTRUE 52890
52888: GO 52915
52890: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52891: LD_ADDR_VAR 0 3
52895: PUSH
52896: LD_INT 15
52898: PPUSH
52899: LD_VAR 0 1
52903: PPUSH
52904: CALL_OW 321
52908: PUSH
52909: LD_INT 2
52911: EQUAL
52912: ST_TO_ADDR
52913: GO 53159
52915: LD_INT 30
52917: DOUBLE
52918: EQUAL
52919: IFTRUE 52923
52921: GO 52948
52923: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52924: LD_ADDR_VAR 0 3
52928: PUSH
52929: LD_INT 20
52931: PPUSH
52932: LD_VAR 0 1
52936: PPUSH
52937: CALL_OW 321
52941: PUSH
52942: LD_INT 2
52944: EQUAL
52945: ST_TO_ADDR
52946: GO 53159
52948: LD_INT 28
52950: DOUBLE
52951: EQUAL
52952: IFTRUE 52962
52954: LD_INT 21
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52962
52960: GO 52987
52962: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52963: LD_ADDR_VAR 0 3
52967: PUSH
52968: LD_INT 21
52970: PPUSH
52971: LD_VAR 0 1
52975: PPUSH
52976: CALL_OW 321
52980: PUSH
52981: LD_INT 2
52983: EQUAL
52984: ST_TO_ADDR
52985: GO 53159
52987: LD_INT 16
52989: DOUBLE
52990: EQUAL
52991: IFTRUE 52995
52993: GO 53020
52995: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52996: LD_ADDR_VAR 0 3
53000: PUSH
53001: LD_INT 84
53003: PPUSH
53004: LD_VAR 0 1
53008: PPUSH
53009: CALL_OW 321
53013: PUSH
53014: LD_INT 2
53016: EQUAL
53017: ST_TO_ADDR
53018: GO 53159
53020: LD_INT 19
53022: DOUBLE
53023: EQUAL
53024: IFTRUE 53034
53026: LD_INT 23
53028: DOUBLE
53029: EQUAL
53030: IFTRUE 53034
53032: GO 53059
53034: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53035: LD_ADDR_VAR 0 3
53039: PUSH
53040: LD_INT 83
53042: PPUSH
53043: LD_VAR 0 1
53047: PPUSH
53048: CALL_OW 321
53052: PUSH
53053: LD_INT 2
53055: EQUAL
53056: ST_TO_ADDR
53057: GO 53159
53059: LD_INT 17
53061: DOUBLE
53062: EQUAL
53063: IFTRUE 53067
53065: GO 53092
53067: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53068: LD_ADDR_VAR 0 3
53072: PUSH
53073: LD_INT 39
53075: PPUSH
53076: LD_VAR 0 1
53080: PPUSH
53081: CALL_OW 321
53085: PUSH
53086: LD_INT 2
53088: EQUAL
53089: ST_TO_ADDR
53090: GO 53159
53092: LD_INT 18
53094: DOUBLE
53095: EQUAL
53096: IFTRUE 53100
53098: GO 53125
53100: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53101: LD_ADDR_VAR 0 3
53105: PUSH
53106: LD_INT 40
53108: PPUSH
53109: LD_VAR 0 1
53113: PPUSH
53114: CALL_OW 321
53118: PUSH
53119: LD_INT 2
53121: EQUAL
53122: ST_TO_ADDR
53123: GO 53159
53125: LD_INT 27
53127: DOUBLE
53128: EQUAL
53129: IFTRUE 53133
53131: GO 53158
53133: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53134: LD_ADDR_VAR 0 3
53138: PUSH
53139: LD_INT 35
53141: PPUSH
53142: LD_VAR 0 1
53146: PPUSH
53147: CALL_OW 321
53151: PUSH
53152: LD_INT 2
53154: EQUAL
53155: ST_TO_ADDR
53156: GO 53159
53158: POP
// end ;
53159: LD_VAR 0 3
53163: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53164: LD_INT 0
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
// result := false ;
53177: LD_ADDR_VAR 0 6
53181: PUSH
53182: LD_INT 0
53184: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53185: LD_VAR 0 1
53189: NOT
53190: PUSH
53191: LD_VAR 0 1
53195: PPUSH
53196: CALL_OW 266
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: IN
53211: NOT
53212: OR
53213: PUSH
53214: LD_VAR 0 2
53218: NOT
53219: OR
53220: PUSH
53221: LD_VAR 0 5
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: LD_INT 4
53240: PUSH
53241: LD_INT 5
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: IN
53252: NOT
53253: OR
53254: PUSH
53255: LD_VAR 0 3
53259: PPUSH
53260: LD_VAR 0 4
53264: PPUSH
53265: CALL_OW 488
53269: NOT
53270: OR
53271: IFFALSE 53275
// exit ;
53273: GO 54011
// side := GetSide ( depot ) ;
53275: LD_ADDR_VAR 0 9
53279: PUSH
53280: LD_VAR 0 1
53284: PPUSH
53285: CALL_OW 255
53289: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53290: LD_VAR 0 9
53294: PPUSH
53295: LD_VAR 0 2
53299: PPUSH
53300: CALL 52788 0 2
53304: NOT
53305: IFFALSE 53309
// exit ;
53307: GO 54011
// pom := GetBase ( depot ) ;
53309: LD_ADDR_VAR 0 10
53313: PUSH
53314: LD_VAR 0 1
53318: PPUSH
53319: CALL_OW 274
53323: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53324: LD_ADDR_VAR 0 11
53328: PUSH
53329: LD_VAR 0 2
53333: PPUSH
53334: LD_VAR 0 1
53338: PPUSH
53339: CALL_OW 248
53343: PPUSH
53344: CALL_OW 450
53348: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53349: LD_VAR 0 10
53353: PPUSH
53354: LD_INT 1
53356: PPUSH
53357: CALL_OW 275
53361: PUSH
53362: LD_VAR 0 11
53366: PUSH
53367: LD_INT 1
53369: ARRAY
53370: GREATEREQUAL
53371: PUSH
53372: LD_VAR 0 10
53376: PPUSH
53377: LD_INT 2
53379: PPUSH
53380: CALL_OW 275
53384: PUSH
53385: LD_VAR 0 11
53389: PUSH
53390: LD_INT 2
53392: ARRAY
53393: GREATEREQUAL
53394: AND
53395: PUSH
53396: LD_VAR 0 10
53400: PPUSH
53401: LD_INT 3
53403: PPUSH
53404: CALL_OW 275
53408: PUSH
53409: LD_VAR 0 11
53413: PUSH
53414: LD_INT 3
53416: ARRAY
53417: GREATEREQUAL
53418: AND
53419: NOT
53420: IFFALSE 53424
// exit ;
53422: GO 54011
// if GetBType ( depot ) = b_depot then
53424: LD_VAR 0 1
53428: PPUSH
53429: CALL_OW 266
53433: PUSH
53434: LD_INT 0
53436: EQUAL
53437: IFFALSE 53449
// dist := 28 else
53439: LD_ADDR_VAR 0 14
53443: PUSH
53444: LD_INT 28
53446: ST_TO_ADDR
53447: GO 53457
// dist := 36 ;
53449: LD_ADDR_VAR 0 14
53453: PUSH
53454: LD_INT 36
53456: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53457: LD_VAR 0 1
53461: PPUSH
53462: LD_VAR 0 3
53466: PPUSH
53467: LD_VAR 0 4
53471: PPUSH
53472: CALL_OW 297
53476: PUSH
53477: LD_VAR 0 14
53481: GREATER
53482: IFFALSE 53486
// exit ;
53484: GO 54011
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53486: LD_ADDR_VAR 0 12
53490: PUSH
53491: LD_VAR 0 2
53495: PPUSH
53496: LD_VAR 0 3
53500: PPUSH
53501: LD_VAR 0 4
53505: PPUSH
53506: LD_VAR 0 5
53510: PPUSH
53511: LD_VAR 0 1
53515: PPUSH
53516: CALL_OW 248
53520: PPUSH
53521: LD_INT 0
53523: PPUSH
53524: CALL 54016 0 6
53528: ST_TO_ADDR
// if not hexes then
53529: LD_VAR 0 12
53533: NOT
53534: IFFALSE 53538
// exit ;
53536: GO 54011
// hex := GetHexInfo ( x , y ) ;
53538: LD_ADDR_VAR 0 15
53542: PUSH
53543: LD_VAR 0 3
53547: PPUSH
53548: LD_VAR 0 4
53552: PPUSH
53553: CALL_OW 546
53557: ST_TO_ADDR
// if hex [ 1 ] then
53558: LD_VAR 0 15
53562: PUSH
53563: LD_INT 1
53565: ARRAY
53566: IFFALSE 53570
// exit ;
53568: GO 54011
// height := hex [ 2 ] ;
53570: LD_ADDR_VAR 0 13
53574: PUSH
53575: LD_VAR 0 15
53579: PUSH
53580: LD_INT 2
53582: ARRAY
53583: ST_TO_ADDR
// for i = 1 to hexes do
53584: LD_ADDR_VAR 0 7
53588: PUSH
53589: DOUBLE
53590: LD_INT 1
53592: DEC
53593: ST_TO_ADDR
53594: LD_VAR 0 12
53598: PUSH
53599: FOR_TO
53600: IFFALSE 53930
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53602: LD_VAR 0 12
53606: PUSH
53607: LD_VAR 0 7
53611: ARRAY
53612: PUSH
53613: LD_INT 1
53615: ARRAY
53616: PPUSH
53617: LD_VAR 0 12
53621: PUSH
53622: LD_VAR 0 7
53626: ARRAY
53627: PUSH
53628: LD_INT 2
53630: ARRAY
53631: PPUSH
53632: CALL_OW 488
53636: NOT
53637: PUSH
53638: LD_VAR 0 12
53642: PUSH
53643: LD_VAR 0 7
53647: ARRAY
53648: PUSH
53649: LD_INT 1
53651: ARRAY
53652: PPUSH
53653: LD_VAR 0 12
53657: PUSH
53658: LD_VAR 0 7
53662: ARRAY
53663: PUSH
53664: LD_INT 2
53666: ARRAY
53667: PPUSH
53668: CALL_OW 428
53672: PUSH
53673: LD_INT 0
53675: GREATER
53676: OR
53677: PUSH
53678: LD_VAR 0 12
53682: PUSH
53683: LD_VAR 0 7
53687: ARRAY
53688: PUSH
53689: LD_INT 1
53691: ARRAY
53692: PPUSH
53693: LD_VAR 0 12
53697: PUSH
53698: LD_VAR 0 7
53702: ARRAY
53703: PUSH
53704: LD_INT 2
53706: ARRAY
53707: PPUSH
53708: CALL_OW 351
53712: OR
53713: IFFALSE 53719
// exit ;
53715: POP
53716: POP
53717: GO 54011
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53719: LD_ADDR_VAR 0 8
53723: PUSH
53724: LD_VAR 0 12
53728: PUSH
53729: LD_VAR 0 7
53733: ARRAY
53734: PUSH
53735: LD_INT 1
53737: ARRAY
53738: PPUSH
53739: LD_VAR 0 12
53743: PUSH
53744: LD_VAR 0 7
53748: ARRAY
53749: PUSH
53750: LD_INT 2
53752: ARRAY
53753: PPUSH
53754: CALL_OW 546
53758: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53759: LD_VAR 0 8
53763: PUSH
53764: LD_INT 1
53766: ARRAY
53767: PUSH
53768: LD_VAR 0 8
53772: PUSH
53773: LD_INT 2
53775: ARRAY
53776: PUSH
53777: LD_VAR 0 13
53781: PUSH
53782: LD_INT 2
53784: PLUS
53785: GREATER
53786: OR
53787: PUSH
53788: LD_VAR 0 8
53792: PUSH
53793: LD_INT 2
53795: ARRAY
53796: PUSH
53797: LD_VAR 0 13
53801: PUSH
53802: LD_INT 2
53804: MINUS
53805: LESS
53806: OR
53807: PUSH
53808: LD_VAR 0 8
53812: PUSH
53813: LD_INT 3
53815: ARRAY
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 8
53822: PUSH
53823: LD_INT 9
53825: PUSH
53826: LD_INT 10
53828: PUSH
53829: LD_INT 11
53831: PUSH
53832: LD_INT 12
53834: PUSH
53835: LD_INT 13
53837: PUSH
53838: LD_INT 16
53840: PUSH
53841: LD_INT 17
53843: PUSH
53844: LD_INT 18
53846: PUSH
53847: LD_INT 19
53849: PUSH
53850: LD_INT 20
53852: PUSH
53853: LD_INT 21
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: IN
53871: NOT
53872: OR
53873: PUSH
53874: LD_VAR 0 8
53878: PUSH
53879: LD_INT 5
53881: ARRAY
53882: NOT
53883: OR
53884: PUSH
53885: LD_VAR 0 8
53889: PUSH
53890: LD_INT 6
53892: ARRAY
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: LD_INT 7
53902: PUSH
53903: LD_INT 9
53905: PUSH
53906: LD_INT 10
53908: PUSH
53909: LD_INT 11
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: IN
53920: NOT
53921: OR
53922: IFFALSE 53928
// exit ;
53924: POP
53925: POP
53926: GO 54011
// end ;
53928: GO 53599
53930: POP
53931: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53932: LD_VAR 0 9
53936: PPUSH
53937: LD_VAR 0 3
53941: PPUSH
53942: LD_VAR 0 4
53946: PPUSH
53947: LD_INT 20
53949: PPUSH
53950: CALL 45963 0 4
53954: PUSH
53955: LD_INT 4
53957: ARRAY
53958: IFFALSE 53962
// exit ;
53960: GO 54011
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53962: LD_VAR 0 2
53966: PUSH
53967: LD_INT 29
53969: PUSH
53970: LD_INT 30
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: IN
53977: PUSH
53978: LD_VAR 0 3
53982: PPUSH
53983: LD_VAR 0 4
53987: PPUSH
53988: LD_VAR 0 9
53992: PPUSH
53993: CALL_OW 440
53997: NOT
53998: AND
53999: IFFALSE 54003
// exit ;
54001: GO 54011
// result := true ;
54003: LD_ADDR_VAR 0 6
54007: PUSH
54008: LD_INT 1
54010: ST_TO_ADDR
// end ;
54011: LD_VAR 0 6
54015: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54016: LD_INT 0
54018: PPUSH
54019: PPUSH
54020: PPUSH
54021: PPUSH
54022: PPUSH
54023: PPUSH
54024: PPUSH
54025: PPUSH
54026: PPUSH
54027: PPUSH
54028: PPUSH
54029: PPUSH
54030: PPUSH
54031: PPUSH
54032: PPUSH
54033: PPUSH
54034: PPUSH
54035: PPUSH
54036: PPUSH
54037: PPUSH
54038: PPUSH
54039: PPUSH
54040: PPUSH
54041: PPUSH
54042: PPUSH
54043: PPUSH
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
54051: PPUSH
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
54056: PPUSH
54057: PPUSH
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
54064: PPUSH
54065: PPUSH
54066: PPUSH
54067: PPUSH
54068: PPUSH
54069: PPUSH
54070: PPUSH
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
// result = [ ] ;
54076: LD_ADDR_VAR 0 7
54080: PUSH
54081: EMPTY
54082: ST_TO_ADDR
// temp_list = [ ] ;
54083: LD_ADDR_VAR 0 9
54087: PUSH
54088: EMPTY
54089: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54090: LD_VAR 0 4
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 4
54109: PUSH
54110: LD_INT 5
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: IN
54121: NOT
54122: PUSH
54123: LD_VAR 0 1
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: IN
54138: PUSH
54139: LD_VAR 0 5
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: IN
54158: NOT
54159: AND
54160: OR
54161: IFFALSE 54165
// exit ;
54163: GO 72556
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54165: LD_VAR 0 1
54169: PUSH
54170: LD_INT 6
54172: PUSH
54173: LD_INT 7
54175: PUSH
54176: LD_INT 8
54178: PUSH
54179: LD_INT 13
54181: PUSH
54182: LD_INT 12
54184: PUSH
54185: LD_INT 15
54187: PUSH
54188: LD_INT 11
54190: PUSH
54191: LD_INT 14
54193: PUSH
54194: LD_INT 10
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: IN
54208: IFFALSE 54218
// btype = b_lab ;
54210: LD_ADDR_VAR 0 1
54214: PUSH
54215: LD_INT 6
54217: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54218: LD_VAR 0 6
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: IN
54237: NOT
54238: PUSH
54239: LD_VAR 0 1
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 3
54255: PUSH
54256: LD_INT 6
54258: PUSH
54259: LD_INT 36
54261: PUSH
54262: LD_INT 4
54264: PUSH
54265: LD_INT 5
54267: PUSH
54268: LD_INT 31
54270: PUSH
54271: LD_INT 32
54273: PUSH
54274: LD_INT 33
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: IN
54290: NOT
54291: PUSH
54292: LD_VAR 0 6
54296: PUSH
54297: LD_INT 1
54299: EQUAL
54300: AND
54301: OR
54302: PUSH
54303: LD_VAR 0 1
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: IN
54318: NOT
54319: PUSH
54320: LD_VAR 0 6
54324: PUSH
54325: LD_INT 2
54327: EQUAL
54328: AND
54329: OR
54330: IFFALSE 54340
// mode = 0 ;
54332: LD_ADDR_VAR 0 6
54336: PUSH
54337: LD_INT 0
54339: ST_TO_ADDR
// case mode of 0 :
54340: LD_VAR 0 6
54344: PUSH
54345: LD_INT 0
54347: DOUBLE
54348: EQUAL
54349: IFTRUE 54353
54351: GO 65806
54353: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54354: LD_ADDR_VAR 0 11
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 3
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54547: LD_ADDR_VAR 0 12
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54743: LD_ADDR_VAR 0 13
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 3
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: NEG
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54942: LD_ADDR_VAR 0 14
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55138: LD_ADDR_VAR 0 15
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55331: LD_ADDR_VAR 0 16
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55524: LD_ADDR_VAR 0 17
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55754: LD_ADDR_VAR 0 18
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55984: LD_ADDR_VAR 0 19
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56214: LD_ADDR_VAR 0 20
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56444: LD_ADDR_VAR 0 21
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56674: LD_ADDR_VAR 0 22
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56904: LD_ADDR_VAR 0 23
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57184: LD_ADDR_VAR 0 24
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: NEG
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57460: LD_ADDR_VAR 0 25
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 3
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 3
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57734: LD_ADDR_VAR 0 26
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58010: LD_ADDR_VAR 0 27
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58290: LD_ADDR_VAR 0 28
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58572: LD_ADDR_VAR 0 29
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58851: LD_ADDR_VAR 0 30
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 2
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 3
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59129: LD_ADDR_VAR 0 31
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: NEG
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: LD_INT 3
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 3
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59407: LD_ADDR_VAR 0 32
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: LD_INT 2
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59685: LD_ADDR_VAR 0 33
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 3
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59964: LD_ADDR_VAR 0 34
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 3
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60244: LD_ADDR_VAR 0 35
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60356: LD_ADDR_VAR 0 36
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 1
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60468: LD_ADDR_VAR 0 37
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60580: LD_ADDR_VAR 0 38
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 2
60671: NEG
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60692: LD_ADDR_VAR 0 39
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60804: LD_ADDR_VAR 0 40
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60916: LD_ADDR_VAR 0 41
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 2
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 3
61190: NEG
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 3
61201: NEG
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 3
61213: NEG
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: NEG
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61266: LD_ADDR_VAR 0 42
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: NEG
61445: PUSH
61446: LD_INT 2
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 2
61456: NEG
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 3
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 3
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: LD_INT 3
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 3
61563: NEG
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 3
61575: NEG
61576: PUSH
61577: LD_INT 3
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61616: LD_ADDR_VAR 0 43
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 3
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 3
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 3
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 2
61901: NEG
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 3
61912: NEG
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 3
61923: NEG
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61964: LD_ADDR_VAR 0 44
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 1
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 2
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 2
62119: NEG
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: NEG
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 3
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 3
62207: PUSH
62208: LD_INT 3
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 3
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 3
62238: NEG
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: NEG
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 3
62261: NEG
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 3
62273: NEG
62274: PUSH
62275: LD_INT 3
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62314: LD_ADDR_VAR 0 45
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 2
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: LD_INT 2
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: LD_INT 3
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: LD_INT 3
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 3
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 3
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 3
62611: NEG
62612: PUSH
62613: LD_INT 2
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 3
62623: NEG
62624: PUSH
62625: LD_INT 3
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62664: LD_ADDR_VAR 0 46
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 2
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 3
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 2
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: LD_INT 3
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 3
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 3
62960: NEG
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 3
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63012: LD_ADDR_VAR 0 47
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: LD_INT 1
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 2
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 2
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 2
63127: NEG
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 2
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63163: LD_ADDR_VAR 0 48
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: LD_INT 2
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: LD_INT 2
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63310: LD_ADDR_VAR 0 49
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63454: LD_ADDR_VAR 0 50
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63598: LD_ADDR_VAR 0 51
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 2
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: NEG
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63745: LD_ADDR_VAR 0 52
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: LD_INT 2
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: LD_INT 2
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63896: LD_ADDR_VAR 0 53
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: LD_INT 2
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: LD_INT 2
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 2
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 2
64072: NEG
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 2
64083: NEG
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 2
64095: NEG
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64126: LD_ADDR_VAR 0 54
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 2
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: LD_INT 1
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: LD_INT 2
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64356: LD_ADDR_VAR 0 55
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 1
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 2
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: PUSH
64492: LD_INT 2
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: NEG
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 2
64543: NEG
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 2
64555: NEG
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64586: LD_ADDR_VAR 0 56
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 2
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 2
64773: NEG
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 2
64785: NEG
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64816: LD_ADDR_VAR 0 57
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 2
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 2
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 2
64992: NEG
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: LD_INT 2
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65046: LD_ADDR_VAR 0 58
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: LD_INT 1
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 1
65115: NEG
65116: PUSH
65117: LD_INT 1
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: LD_INT 2
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: LD_INT 2
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: LD_INT 2
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: LD_INT 2
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 2
65222: NEG
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 2
65245: NEG
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65276: LD_ADDR_VAR 0 59
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65364: LD_ADDR_VAR 0 60
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65452: LD_ADDR_VAR 0 61
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: NEG
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65540: LD_ADDR_VAR 0 62
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 1
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65628: LD_ADDR_VAR 0 63
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65716: LD_ADDR_VAR 0 64
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 1
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 1
65774: NEG
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// end ; 1 :
65804: GO 71701
65806: LD_INT 1
65808: DOUBLE
65809: EQUAL
65810: IFTRUE 65814
65812: GO 68437
65814: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65815: LD_ADDR_VAR 0 11
65819: PUSH
65820: LD_INT 1
65822: NEG
65823: PUSH
65824: LD_INT 3
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: LD_INT 3
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: LD_INT 2
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: LIST
65858: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65859: LD_ADDR_VAR 0 12
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: LD_INT 1
65869: NEG
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: LD_INT 1
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65900: LD_ADDR_VAR 0 13
65904: PUSH
65905: LD_INT 3
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 3
65917: PUSH
65918: LD_INT 3
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 2
65927: PUSH
65928: LD_INT 3
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65940: LD_ADDR_VAR 0 14
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: LIST
65980: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65981: LD_ADDR_VAR 0 15
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 3
65999: NEG
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 3
66010: NEG
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66025: LD_ADDR_VAR 0 16
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: LD_INT 3
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 3
66044: NEG
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 3
66056: NEG
66057: PUSH
66058: LD_INT 3
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66071: LD_ADDR_VAR 0 17
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: LD_INT 3
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: LD_INT 3
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: LD_INT 2
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: LIST
66114: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66115: LD_ADDR_VAR 0 18
66119: PUSH
66120: LD_INT 2
66122: PUSH
66123: LD_INT 1
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 3
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 3
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: LIST
66155: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66156: LD_ADDR_VAR 0 19
66160: PUSH
66161: LD_INT 3
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 3
66173: PUSH
66174: LD_INT 3
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: LD_INT 3
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: LIST
66195: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66196: LD_ADDR_VAR 0 20
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: LD_INT 3
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: LD_INT 3
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: LD_INT 2
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: LIST
66236: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66237: LD_ADDR_VAR 0 21
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 3
66255: NEG
66256: PUSH
66257: LD_INT 0
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 3
66266: NEG
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66281: LD_ADDR_VAR 0 22
66285: PUSH
66286: LD_INT 2
66288: NEG
66289: PUSH
66290: LD_INT 3
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: LD_INT 2
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 3
66312: NEG
66313: PUSH
66314: LD_INT 3
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: LIST
66326: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66327: LD_ADDR_VAR 0 23
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: LD_INT 3
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: LD_INT 4
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: LD_INT 3
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66371: LD_ADDR_VAR 0 24
66375: PUSH
66376: LD_INT 3
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 3
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 4
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66412: LD_ADDR_VAR 0 25
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 4
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 3
66439: PUSH
66440: LD_INT 4
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66452: LD_ADDR_VAR 0 26
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: LD_INT 4
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: NEG
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66493: LD_ADDR_VAR 0 27
66497: PUSH
66498: LD_INT 3
66500: NEG
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 3
66511: NEG
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 4
66522: NEG
66523: PUSH
66524: LD_INT 1
66526: NEG
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: LIST
66536: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66537: LD_ADDR_VAR 0 28
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: LD_INT 3
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: LD_INT 4
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 4
66568: NEG
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: LIST
66582: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66583: LD_ADDR_VAR 0 29
66587: PUSH
66588: LD_INT 1
66590: NEG
66591: PUSH
66592: LD_INT 3
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: LD_INT 3
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: LD_INT 2
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 4
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 1
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: NEG
66659: PUSH
66660: LD_INT 5
66662: NEG
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 5
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 4
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: LD_INT 6
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: LD_INT 6
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: LD_INT 5
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66738: LD_ADDR_VAR 0 30
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 3
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 3
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 4
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 4
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 4
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 5
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 5
66828: PUSH
66829: LD_INT 1
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 5
66838: PUSH
66839: LD_INT 1
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 6
66849: PUSH
66850: LD_INT 0
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 6
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66881: LD_ADDR_VAR 0 31
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: LD_INT 2
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 3
66898: PUSH
66899: LD_INT 3
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 2
66908: PUSH
66909: LD_INT 3
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 4
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: LD_INT 4
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 3
66938: PUSH
66939: LD_INT 4
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 5
66948: PUSH
66949: LD_INT 4
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 5
66958: PUSH
66959: LD_INT 5
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 4
66968: PUSH
66969: LD_INT 5
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 6
66978: PUSH
66979: LD_INT 5
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 6
66988: PUSH
66989: LD_INT 6
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 5
66998: PUSH
66999: LD_INT 6
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67020: LD_ADDR_VAR 0 32
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: LD_INT 3
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 1
67047: NEG
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: LD_INT 4
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: LD_INT 4
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: LD_INT 3
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 1
67089: PUSH
67090: LD_INT 5
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 5
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: LD_INT 4
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 1
67120: PUSH
67121: LD_INT 6
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 6
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: PUSH
67142: LD_INT 5
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67163: LD_ADDR_VAR 0 33
67167: PUSH
67168: LD_INT 2
67170: NEG
67171: PUSH
67172: LD_INT 1
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 3
67181: NEG
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 3
67192: NEG
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 4
67215: NEG
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 4
67226: NEG
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: NEG
67239: PUSH
67240: LD_INT 1
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 5
67249: NEG
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 5
67260: NEG
67261: PUSH
67262: LD_INT 1
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 5
67272: NEG
67273: PUSH
67274: LD_INT 1
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 6
67283: NEG
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 6
67294: NEG
67295: PUSH
67296: LD_INT 1
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67318: LD_ADDR_VAR 0 34
67322: PUSH
67323: LD_INT 2
67325: NEG
67326: PUSH
67327: LD_INT 3
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 3
67337: NEG
67338: PUSH
67339: LD_INT 2
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: LD_INT 3
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 3
67361: NEG
67362: PUSH
67363: LD_INT 4
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 4
67373: NEG
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 4
67385: NEG
67386: PUSH
67387: LD_INT 4
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 4
67397: NEG
67398: PUSH
67399: LD_INT 5
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 5
67409: NEG
67410: PUSH
67411: LD_INT 4
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 5
67421: NEG
67422: PUSH
67423: LD_INT 5
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: LD_INT 6
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 6
67445: NEG
67446: PUSH
67447: LD_INT 5
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 6
67457: NEG
67458: PUSH
67459: LD_INT 6
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67481: LD_ADDR_VAR 0 41
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: NEG
67500: PUSH
67501: LD_INT 3
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67525: LD_ADDR_VAR 0 42
67529: PUSH
67530: LD_INT 2
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 2
67542: PUSH
67543: LD_INT 1
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 3
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: LIST
67565: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67566: LD_ADDR_VAR 0 43
67570: PUSH
67571: LD_INT 2
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 3
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 2
67593: PUSH
67594: LD_INT 3
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67606: LD_ADDR_VAR 0 44
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_INT 2
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 1
67623: PUSH
67624: LD_INT 3
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: LD_INT 2
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: LIST
67646: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67647: LD_ADDR_VAR 0 45
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 3
67676: NEG
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67691: LD_ADDR_VAR 0 46
67695: PUSH
67696: LD_INT 2
67698: NEG
67699: PUSH
67700: LD_INT 2
67702: NEG
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 2
67710: NEG
67711: PUSH
67712: LD_INT 3
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 3
67722: NEG
67723: PUSH
67724: LD_INT 2
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: LIST
67736: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67737: LD_ADDR_VAR 0 47
67741: PUSH
67742: LD_INT 2
67744: NEG
67745: PUSH
67746: LD_INT 3
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 1
67756: NEG
67757: PUSH
67758: LD_INT 3
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67770: LD_ADDR_VAR 0 48
67774: PUSH
67775: LD_INT 1
67777: PUSH
67778: LD_INT 2
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 2
67788: PUSH
67789: LD_INT 1
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67801: LD_ADDR_VAR 0 49
67805: PUSH
67806: LD_INT 3
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 3
67818: PUSH
67819: LD_INT 2
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67830: LD_ADDR_VAR 0 50
67834: PUSH
67835: LD_INT 2
67837: PUSH
67838: LD_INT 3
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: LD_INT 3
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67859: LD_ADDR_VAR 0 51
67863: PUSH
67864: LD_INT 1
67866: NEG
67867: PUSH
67868: LD_INT 2
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 2
67877: NEG
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67890: LD_ADDR_VAR 0 52
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: NEG
67910: PUSH
67911: LD_INT 2
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67923: LD_ADDR_VAR 0 53
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: LD_INT 3
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67967: LD_ADDR_VAR 0 54
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 3
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: LD_INT 1
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: LIST
68007: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68008: LD_ADDR_VAR 0 55
68012: PUSH
68013: LD_INT 3
68015: PUSH
68016: LD_INT 2
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: LD_INT 3
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 2
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: LIST
68047: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68048: LD_ADDR_VAR 0 56
68052: PUSH
68053: LD_INT 1
68055: PUSH
68056: LD_INT 3
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: LD_INT 3
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: LD_INT 2
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68089: LD_ADDR_VAR 0 57
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: LD_INT 1
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: LIST
68132: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68133: LD_ADDR_VAR 0 58
68137: PUSH
68138: LD_INT 2
68140: NEG
68141: PUSH
68142: LD_INT 3
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 3
68152: NEG
68153: PUSH
68154: LD_INT 2
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 3
68164: NEG
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68179: LD_ADDR_VAR 0 59
68183: PUSH
68184: LD_INT 1
68186: NEG
68187: PUSH
68188: LD_INT 2
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: LD_INT 2
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68223: LD_ADDR_VAR 0 60
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 2
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: LIST
68263: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68264: LD_ADDR_VAR 0 61
68268: PUSH
68269: LD_INT 2
68271: PUSH
68272: LD_INT 1
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 2
68281: PUSH
68282: LD_INT 2
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 1
68291: PUSH
68292: LD_INT 2
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: LIST
68303: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68304: LD_ADDR_VAR 0 62
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: LD_INT 2
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: PUSH
68333: LD_INT 1
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: LIST
68344: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68345: LD_ADDR_VAR 0 63
68349: PUSH
68350: LD_INT 1
68352: NEG
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 2
68363: NEG
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 2
68374: NEG
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: LIST
68388: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68389: LD_ADDR_VAR 0 64
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: LD_INT 2
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 2
68408: NEG
68409: PUSH
68410: LD_INT 1
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 2
68420: NEG
68421: PUSH
68422: LD_INT 2
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: LIST
68434: ST_TO_ADDR
// end ; 2 :
68435: GO 71701
68437: LD_INT 2
68439: DOUBLE
68440: EQUAL
68441: IFTRUE 68445
68443: GO 71700
68445: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68446: LD_ADDR_VAR 0 29
68450: PUSH
68451: LD_INT 4
68453: PUSH
68454: LD_INT 0
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 4
68463: PUSH
68464: LD_INT 1
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 5
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 5
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 4
68494: PUSH
68495: LD_INT 1
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 3
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 3
68514: PUSH
68515: LD_INT 1
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 3
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 5
68536: PUSH
68537: LD_INT 2
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: PUSH
68547: LD_INT 3
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 3
68556: PUSH
68557: LD_INT 2
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 4
68566: PUSH
68567: LD_INT 3
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 4
68576: PUSH
68577: LD_INT 4
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 3
68586: PUSH
68587: LD_INT 4
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 2
68596: PUSH
68597: LD_INT 3
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 2
68606: PUSH
68607: LD_INT 2
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: LD_INT 2
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: LD_INT 4
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: LD_INT 3
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: PUSH
68657: LD_INT 4
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: PUSH
68667: LD_INT 5
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: LD_INT 5
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 1
68686: NEG
68687: PUSH
68688: LD_INT 4
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 1
68697: NEG
68698: PUSH
68699: LD_INT 3
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 2
68708: PUSH
68709: LD_INT 5
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 2
68718: NEG
68719: PUSH
68720: LD_INT 3
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 3
68740: NEG
68741: PUSH
68742: LD_INT 1
68744: NEG
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 2
68752: NEG
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 2
68763: NEG
68764: PUSH
68765: LD_INT 1
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 3
68774: NEG
68775: PUSH
68776: LD_INT 1
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 4
68785: NEG
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 4
68796: NEG
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 4
68808: NEG
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 2
68820: NEG
68821: PUSH
68822: LD_INT 2
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 4
68831: NEG
68832: PUSH
68833: LD_INT 4
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 4
68843: NEG
68844: PUSH
68845: LD_INT 5
68847: NEG
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 3
68855: NEG
68856: PUSH
68857: LD_INT 4
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 3
68867: NEG
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 4
68879: NEG
68880: PUSH
68881: LD_INT 3
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 5
68891: NEG
68892: PUSH
68893: LD_INT 4
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 5
68903: NEG
68904: PUSH
68905: LD_INT 5
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: LD_INT 5
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 5
68927: NEG
68928: PUSH
68929: LD_INT 3
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68984: LD_ADDR_VAR 0 30
68988: PUSH
68989: LD_INT 4
68991: PUSH
68992: LD_INT 4
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 4
69001: PUSH
69002: LD_INT 3
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 5
69011: PUSH
69012: LD_INT 4
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 5
69021: PUSH
69022: LD_INT 5
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 4
69031: PUSH
69032: LD_INT 5
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 3
69041: PUSH
69042: LD_INT 4
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 3
69051: PUSH
69052: LD_INT 3
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 5
69061: PUSH
69062: LD_INT 3
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: PUSH
69072: LD_INT 5
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: LD_INT 3
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 0
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 1
69111: PUSH
69112: LD_INT 4
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 0
69121: PUSH
69122: LD_INT 4
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 1
69131: NEG
69132: PUSH
69133: LD_INT 3
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: LD_INT 2
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: PUSH
69154: LD_INT 4
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 2
69163: NEG
69164: PUSH
69165: LD_INT 2
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 4
69174: NEG
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 4
69185: NEG
69186: PUSH
69187: LD_INT 1
69189: NEG
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 3
69197: NEG
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 3
69208: NEG
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 4
69219: NEG
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 5
69230: NEG
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 5
69241: NEG
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 5
69253: NEG
69254: PUSH
69255: LD_INT 2
69257: NEG
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 3
69265: NEG
69266: PUSH
69267: LD_INT 2
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: LD_INT 3
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 3
69288: NEG
69289: PUSH
69290: LD_INT 4
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 2
69300: NEG
69301: PUSH
69302: LD_INT 3
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 2
69312: NEG
69313: PUSH
69314: LD_INT 2
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: NEG
69325: PUSH
69326: LD_INT 2
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 4
69336: NEG
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: NEG
69349: PUSH
69350: LD_INT 4
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: LD_INT 2
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 4
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: LD_INT 5
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: LD_INT 4
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 1
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 0
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 1
69439: NEG
69440: PUSH
69441: LD_INT 4
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 1
69451: NEG
69452: PUSH
69453: LD_INT 5
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 2
69463: PUSH
69464: LD_INT 3
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 2
69474: NEG
69475: PUSH
69476: LD_INT 5
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69531: LD_ADDR_VAR 0 31
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: LD_INT 4
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 0
69548: PUSH
69549: LD_INT 3
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: LD_INT 4
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 1
69568: PUSH
69569: LD_INT 5
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: LD_INT 5
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 1
69588: NEG
69589: PUSH
69590: LD_INT 4
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: LD_INT 3
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: PUSH
69611: LD_INT 5
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 2
69620: NEG
69621: PUSH
69622: LD_INT 3
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 3
69631: NEG
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 3
69642: NEG
69643: PUSH
69644: LD_INT 1
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 2
69654: NEG
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 2
69665: NEG
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 3
69676: NEG
69677: PUSH
69678: LD_INT 1
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 4
69687: NEG
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 4
69698: NEG
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 4
69710: NEG
69711: PUSH
69712: LD_INT 2
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 2
69722: NEG
69723: PUSH
69724: LD_INT 2
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 4
69733: NEG
69734: PUSH
69735: LD_INT 4
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 4
69745: NEG
69746: PUSH
69747: LD_INT 5
69749: NEG
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 3
69757: NEG
69758: PUSH
69759: LD_INT 4
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 3
69769: NEG
69770: PUSH
69771: LD_INT 3
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 4
69781: NEG
69782: PUSH
69783: LD_INT 3
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 5
69793: NEG
69794: PUSH
69795: LD_INT 4
69797: NEG
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 5
69805: NEG
69806: PUSH
69807: LD_INT 5
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 3
69817: NEG
69818: PUSH
69819: LD_INT 5
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 5
69829: NEG
69830: PUSH
69831: LD_INT 3
69833: NEG
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: LD_INT 3
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 0
69852: PUSH
69853: LD_INT 4
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 1
69863: PUSH
69864: LD_INT 3
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 1
69874: PUSH
69875: LD_INT 2
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: LD_INT 2
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 1
69896: NEG
69897: PUSH
69898: LD_INT 3
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 1
69908: NEG
69909: PUSH
69910: LD_INT 4
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 2
69920: PUSH
69921: LD_INT 2
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 2
69931: NEG
69932: PUSH
69933: LD_INT 4
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 4
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 4
69953: PUSH
69954: LD_INT 1
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 5
69964: PUSH
69965: LD_INT 0
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 5
69974: PUSH
69975: LD_INT 1
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 4
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: LD_INT 1
70007: NEG
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 3
70015: PUSH
70016: LD_INT 2
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 5
70026: PUSH
70027: LD_INT 2
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70081: LD_ADDR_VAR 0 32
70085: PUSH
70086: LD_INT 4
70088: NEG
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 4
70099: NEG
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 3
70111: NEG
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 3
70122: NEG
70123: PUSH
70124: LD_INT 1
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 4
70133: NEG
70134: PUSH
70135: LD_INT 1
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 5
70144: NEG
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 5
70155: NEG
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 5
70167: NEG
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 3
70179: NEG
70180: PUSH
70181: LD_INT 2
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 3
70190: NEG
70191: PUSH
70192: LD_INT 3
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: NEG
70203: PUSH
70204: LD_INT 4
70206: NEG
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 2
70214: NEG
70215: PUSH
70216: LD_INT 3
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 2
70226: NEG
70227: PUSH
70228: LD_INT 2
70230: NEG
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 3
70238: NEG
70239: PUSH
70240: LD_INT 2
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 4
70250: NEG
70251: PUSH
70252: LD_INT 3
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 4
70262: NEG
70263: PUSH
70264: LD_INT 4
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 2
70274: NEG
70275: PUSH
70276: LD_INT 4
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 4
70286: NEG
70287: PUSH
70288: LD_INT 2
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: LD_INT 4
70301: NEG
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: LD_INT 5
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 1
70320: PUSH
70321: LD_INT 4
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 1
70331: PUSH
70332: LD_INT 3
70334: NEG
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 0
70342: PUSH
70343: LD_INT 3
70345: NEG
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 1
70353: NEG
70354: PUSH
70355: LD_INT 4
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: NEG
70366: PUSH
70367: LD_INT 5
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: LD_INT 3
70380: NEG
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 2
70388: NEG
70389: PUSH
70390: LD_INT 5
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 3
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: LD_INT 1
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 4
70421: PUSH
70422: LD_INT 0
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 4
70431: PUSH
70432: LD_INT 1
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 3
70441: PUSH
70442: LD_INT 1
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 2
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 2
70461: PUSH
70462: LD_INT 1
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: LD_INT 2
70475: NEG
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 4
70483: PUSH
70484: LD_INT 2
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: LD_INT 4
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 4
70503: PUSH
70504: LD_INT 3
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 5
70513: PUSH
70514: LD_INT 4
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 5
70523: PUSH
70524: LD_INT 5
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 4
70533: PUSH
70534: LD_INT 5
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 3
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 3
70553: PUSH
70554: LD_INT 3
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 5
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: LD_INT 5
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70628: LD_ADDR_VAR 0 33
70632: PUSH
70633: LD_INT 4
70635: NEG
70636: PUSH
70637: LD_INT 4
70639: NEG
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 4
70647: NEG
70648: PUSH
70649: LD_INT 5
70651: NEG
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 3
70659: NEG
70660: PUSH
70661: LD_INT 4
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 3
70671: NEG
70672: PUSH
70673: LD_INT 3
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 4
70683: NEG
70684: PUSH
70685: LD_INT 3
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 5
70695: NEG
70696: PUSH
70697: LD_INT 4
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 5
70707: NEG
70708: PUSH
70709: LD_INT 5
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 3
70719: NEG
70720: PUSH
70721: LD_INT 5
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 5
70731: NEG
70732: PUSH
70733: LD_INT 3
70735: NEG
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: LD_INT 3
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: LD_INT 4
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 1
70765: PUSH
70766: LD_INT 3
70768: NEG
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 1
70776: PUSH
70777: LD_INT 2
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 0
70787: PUSH
70788: LD_INT 2
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 1
70798: NEG
70799: PUSH
70800: LD_INT 3
70802: NEG
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 1
70810: NEG
70811: PUSH
70812: LD_INT 4
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 2
70822: PUSH
70823: LD_INT 2
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 2
70833: NEG
70834: PUSH
70835: LD_INT 4
70837: NEG
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 4
70845: PUSH
70846: LD_INT 0
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 4
70855: PUSH
70856: LD_INT 1
70858: NEG
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 5
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 5
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 4
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 3
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 3
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 3
70917: PUSH
70918: LD_INT 2
70920: NEG
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 5
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 3
70938: PUSH
70939: LD_INT 3
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 3
70948: PUSH
70949: LD_INT 2
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 4
70958: PUSH
70959: LD_INT 3
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 4
70968: PUSH
70969: LD_INT 4
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 3
70978: PUSH
70979: LD_INT 4
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 2
70988: PUSH
70989: LD_INT 3
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 2
70998: PUSH
70999: LD_INT 2
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 4
71008: PUSH
71009: LD_INT 2
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 2
71018: PUSH
71019: LD_INT 4
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 0
71028: PUSH
71029: LD_INT 4
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 0
71038: PUSH
71039: LD_INT 3
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 1
71048: PUSH
71049: LD_INT 4
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 1
71058: PUSH
71059: LD_INT 5
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 0
71068: PUSH
71069: LD_INT 5
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 1
71078: NEG
71079: PUSH
71080: LD_INT 4
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 1
71089: NEG
71090: PUSH
71091: LD_INT 3
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 2
71100: PUSH
71101: LD_INT 5
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 2
71110: NEG
71111: PUSH
71112: LD_INT 3
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71166: LD_ADDR_VAR 0 34
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: LD_INT 4
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 0
71184: PUSH
71185: LD_INT 5
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: LD_INT 4
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 1
71206: PUSH
71207: LD_INT 3
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 0
71217: PUSH
71218: LD_INT 3
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 1
71228: NEG
71229: PUSH
71230: LD_INT 4
71232: NEG
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 1
71240: NEG
71241: PUSH
71242: LD_INT 5
71244: NEG
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 2
71252: PUSH
71253: LD_INT 3
71255: NEG
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 2
71263: NEG
71264: PUSH
71265: LD_INT 5
71267: NEG
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: LD_INT 3
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 3
71285: PUSH
71286: LD_INT 1
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 4
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 4
71306: PUSH
71307: LD_INT 1
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 3
71316: PUSH
71317: LD_INT 1
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 2
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 2
71347: PUSH
71348: LD_INT 2
71350: NEG
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 4
71358: PUSH
71359: LD_INT 2
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 4
71368: PUSH
71369: LD_INT 4
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 4
71378: PUSH
71379: LD_INT 3
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 5
71388: PUSH
71389: LD_INT 4
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 5
71398: PUSH
71399: LD_INT 5
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 4
71408: PUSH
71409: LD_INT 5
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 3
71418: PUSH
71419: LD_INT 4
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 3
71428: PUSH
71429: LD_INT 3
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 5
71438: PUSH
71439: LD_INT 3
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 3
71448: PUSH
71449: LD_INT 5
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: LD_INT 3
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 0
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: LD_INT 3
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 1
71488: PUSH
71489: LD_INT 4
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 4
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 1
71508: NEG
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 1
71519: NEG
71520: PUSH
71521: LD_INT 2
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 2
71530: PUSH
71531: LD_INT 4
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 2
71540: NEG
71541: PUSH
71542: LD_INT 2
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 4
71551: NEG
71552: PUSH
71553: LD_INT 0
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 4
71562: NEG
71563: PUSH
71564: LD_INT 1
71566: NEG
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 3
71574: NEG
71575: PUSH
71576: LD_INT 0
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 3
71585: NEG
71586: PUSH
71587: LD_INT 1
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 4
71596: NEG
71597: PUSH
71598: LD_INT 1
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 5
71607: NEG
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 5
71618: NEG
71619: PUSH
71620: LD_INT 1
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 5
71630: NEG
71631: PUSH
71632: LD_INT 2
71634: NEG
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 3
71642: NEG
71643: PUSH
71644: LD_INT 2
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: ST_TO_ADDR
// end ; end ;
71698: GO 71701
71700: POP
// case btype of b_depot , b_warehouse :
71701: LD_VAR 0 1
71705: PUSH
71706: LD_INT 0
71708: DOUBLE
71709: EQUAL
71710: IFTRUE 71720
71712: LD_INT 1
71714: DOUBLE
71715: EQUAL
71716: IFTRUE 71720
71718: GO 71921
71720: POP
// case nation of nation_american :
71721: LD_VAR 0 5
71725: PUSH
71726: LD_INT 1
71728: DOUBLE
71729: EQUAL
71730: IFTRUE 71734
71732: GO 71790
71734: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71735: LD_ADDR_VAR 0 9
71739: PUSH
71740: LD_VAR 0 11
71744: PUSH
71745: LD_VAR 0 12
71749: PUSH
71750: LD_VAR 0 13
71754: PUSH
71755: LD_VAR 0 14
71759: PUSH
71760: LD_VAR 0 15
71764: PUSH
71765: LD_VAR 0 16
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: PUSH
71778: LD_VAR 0 4
71782: PUSH
71783: LD_INT 1
71785: PLUS
71786: ARRAY
71787: ST_TO_ADDR
71788: GO 71919
71790: LD_INT 2
71792: DOUBLE
71793: EQUAL
71794: IFTRUE 71798
71796: GO 71854
71798: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71799: LD_ADDR_VAR 0 9
71803: PUSH
71804: LD_VAR 0 17
71808: PUSH
71809: LD_VAR 0 18
71813: PUSH
71814: LD_VAR 0 19
71818: PUSH
71819: LD_VAR 0 20
71823: PUSH
71824: LD_VAR 0 21
71828: PUSH
71829: LD_VAR 0 22
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: PUSH
71842: LD_VAR 0 4
71846: PUSH
71847: LD_INT 1
71849: PLUS
71850: ARRAY
71851: ST_TO_ADDR
71852: GO 71919
71854: LD_INT 3
71856: DOUBLE
71857: EQUAL
71858: IFTRUE 71862
71860: GO 71918
71862: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71863: LD_ADDR_VAR 0 9
71867: PUSH
71868: LD_VAR 0 23
71872: PUSH
71873: LD_VAR 0 24
71877: PUSH
71878: LD_VAR 0 25
71882: PUSH
71883: LD_VAR 0 26
71887: PUSH
71888: LD_VAR 0 27
71892: PUSH
71893: LD_VAR 0 28
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: PUSH
71906: LD_VAR 0 4
71910: PUSH
71911: LD_INT 1
71913: PLUS
71914: ARRAY
71915: ST_TO_ADDR
71916: GO 71919
71918: POP
71919: GO 72474
71921: LD_INT 2
71923: DOUBLE
71924: EQUAL
71925: IFTRUE 71935
71927: LD_INT 3
71929: DOUBLE
71930: EQUAL
71931: IFTRUE 71935
71933: GO 71991
71935: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71936: LD_ADDR_VAR 0 9
71940: PUSH
71941: LD_VAR 0 29
71945: PUSH
71946: LD_VAR 0 30
71950: PUSH
71951: LD_VAR 0 31
71955: PUSH
71956: LD_VAR 0 32
71960: PUSH
71961: LD_VAR 0 33
71965: PUSH
71966: LD_VAR 0 34
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: PUSH
71979: LD_VAR 0 4
71983: PUSH
71984: LD_INT 1
71986: PLUS
71987: ARRAY
71988: ST_TO_ADDR
71989: GO 72474
71991: LD_INT 16
71993: DOUBLE
71994: EQUAL
71995: IFTRUE 72053
71997: LD_INT 17
71999: DOUBLE
72000: EQUAL
72001: IFTRUE 72053
72003: LD_INT 18
72005: DOUBLE
72006: EQUAL
72007: IFTRUE 72053
72009: LD_INT 19
72011: DOUBLE
72012: EQUAL
72013: IFTRUE 72053
72015: LD_INT 22
72017: DOUBLE
72018: EQUAL
72019: IFTRUE 72053
72021: LD_INT 20
72023: DOUBLE
72024: EQUAL
72025: IFTRUE 72053
72027: LD_INT 21
72029: DOUBLE
72030: EQUAL
72031: IFTRUE 72053
72033: LD_INT 23
72035: DOUBLE
72036: EQUAL
72037: IFTRUE 72053
72039: LD_INT 24
72041: DOUBLE
72042: EQUAL
72043: IFTRUE 72053
72045: LD_INT 25
72047: DOUBLE
72048: EQUAL
72049: IFTRUE 72053
72051: GO 72109
72053: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72054: LD_ADDR_VAR 0 9
72058: PUSH
72059: LD_VAR 0 35
72063: PUSH
72064: LD_VAR 0 36
72068: PUSH
72069: LD_VAR 0 37
72073: PUSH
72074: LD_VAR 0 38
72078: PUSH
72079: LD_VAR 0 39
72083: PUSH
72084: LD_VAR 0 40
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: PUSH
72097: LD_VAR 0 4
72101: PUSH
72102: LD_INT 1
72104: PLUS
72105: ARRAY
72106: ST_TO_ADDR
72107: GO 72474
72109: LD_INT 6
72111: DOUBLE
72112: EQUAL
72113: IFTRUE 72165
72115: LD_INT 7
72117: DOUBLE
72118: EQUAL
72119: IFTRUE 72165
72121: LD_INT 8
72123: DOUBLE
72124: EQUAL
72125: IFTRUE 72165
72127: LD_INT 13
72129: DOUBLE
72130: EQUAL
72131: IFTRUE 72165
72133: LD_INT 12
72135: DOUBLE
72136: EQUAL
72137: IFTRUE 72165
72139: LD_INT 15
72141: DOUBLE
72142: EQUAL
72143: IFTRUE 72165
72145: LD_INT 11
72147: DOUBLE
72148: EQUAL
72149: IFTRUE 72165
72151: LD_INT 14
72153: DOUBLE
72154: EQUAL
72155: IFTRUE 72165
72157: LD_INT 10
72159: DOUBLE
72160: EQUAL
72161: IFTRUE 72165
72163: GO 72221
72165: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72166: LD_ADDR_VAR 0 9
72170: PUSH
72171: LD_VAR 0 41
72175: PUSH
72176: LD_VAR 0 42
72180: PUSH
72181: LD_VAR 0 43
72185: PUSH
72186: LD_VAR 0 44
72190: PUSH
72191: LD_VAR 0 45
72195: PUSH
72196: LD_VAR 0 46
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: PUSH
72209: LD_VAR 0 4
72213: PUSH
72214: LD_INT 1
72216: PLUS
72217: ARRAY
72218: ST_TO_ADDR
72219: GO 72474
72221: LD_INT 36
72223: DOUBLE
72224: EQUAL
72225: IFTRUE 72229
72227: GO 72285
72229: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72230: LD_ADDR_VAR 0 9
72234: PUSH
72235: LD_VAR 0 47
72239: PUSH
72240: LD_VAR 0 48
72244: PUSH
72245: LD_VAR 0 49
72249: PUSH
72250: LD_VAR 0 50
72254: PUSH
72255: LD_VAR 0 51
72259: PUSH
72260: LD_VAR 0 52
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: PUSH
72273: LD_VAR 0 4
72277: PUSH
72278: LD_INT 1
72280: PLUS
72281: ARRAY
72282: ST_TO_ADDR
72283: GO 72474
72285: LD_INT 4
72287: DOUBLE
72288: EQUAL
72289: IFTRUE 72311
72291: LD_INT 5
72293: DOUBLE
72294: EQUAL
72295: IFTRUE 72311
72297: LD_INT 34
72299: DOUBLE
72300: EQUAL
72301: IFTRUE 72311
72303: LD_INT 37
72305: DOUBLE
72306: EQUAL
72307: IFTRUE 72311
72309: GO 72367
72311: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72312: LD_ADDR_VAR 0 9
72316: PUSH
72317: LD_VAR 0 53
72321: PUSH
72322: LD_VAR 0 54
72326: PUSH
72327: LD_VAR 0 55
72331: PUSH
72332: LD_VAR 0 56
72336: PUSH
72337: LD_VAR 0 57
72341: PUSH
72342: LD_VAR 0 58
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: PUSH
72355: LD_VAR 0 4
72359: PUSH
72360: LD_INT 1
72362: PLUS
72363: ARRAY
72364: ST_TO_ADDR
72365: GO 72474
72367: LD_INT 31
72369: DOUBLE
72370: EQUAL
72371: IFTRUE 72417
72373: LD_INT 32
72375: DOUBLE
72376: EQUAL
72377: IFTRUE 72417
72379: LD_INT 33
72381: DOUBLE
72382: EQUAL
72383: IFTRUE 72417
72385: LD_INT 27
72387: DOUBLE
72388: EQUAL
72389: IFTRUE 72417
72391: LD_INT 26
72393: DOUBLE
72394: EQUAL
72395: IFTRUE 72417
72397: LD_INT 28
72399: DOUBLE
72400: EQUAL
72401: IFTRUE 72417
72403: LD_INT 29
72405: DOUBLE
72406: EQUAL
72407: IFTRUE 72417
72409: LD_INT 30
72411: DOUBLE
72412: EQUAL
72413: IFTRUE 72417
72415: GO 72473
72417: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72418: LD_ADDR_VAR 0 9
72422: PUSH
72423: LD_VAR 0 59
72427: PUSH
72428: LD_VAR 0 60
72432: PUSH
72433: LD_VAR 0 61
72437: PUSH
72438: LD_VAR 0 62
72442: PUSH
72443: LD_VAR 0 63
72447: PUSH
72448: LD_VAR 0 64
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: PUSH
72461: LD_VAR 0 4
72465: PUSH
72466: LD_INT 1
72468: PLUS
72469: ARRAY
72470: ST_TO_ADDR
72471: GO 72474
72473: POP
// temp_list2 = [ ] ;
72474: LD_ADDR_VAR 0 10
72478: PUSH
72479: EMPTY
72480: ST_TO_ADDR
// for i in temp_list do
72481: LD_ADDR_VAR 0 8
72485: PUSH
72486: LD_VAR 0 9
72490: PUSH
72491: FOR_IN
72492: IFFALSE 72544
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72494: LD_ADDR_VAR 0 10
72498: PUSH
72499: LD_VAR 0 10
72503: PUSH
72504: LD_VAR 0 8
72508: PUSH
72509: LD_INT 1
72511: ARRAY
72512: PUSH
72513: LD_VAR 0 2
72517: PLUS
72518: PUSH
72519: LD_VAR 0 8
72523: PUSH
72524: LD_INT 2
72526: ARRAY
72527: PUSH
72528: LD_VAR 0 3
72532: PLUS
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: EMPTY
72539: LIST
72540: ADD
72541: ST_TO_ADDR
72542: GO 72491
72544: POP
72545: POP
// result = temp_list2 ;
72546: LD_ADDR_VAR 0 7
72550: PUSH
72551: LD_VAR 0 10
72555: ST_TO_ADDR
// end ;
72556: LD_VAR 0 7
72560: RET
// export function EnemyInRange ( unit , dist ) ; begin
72561: LD_INT 0
72563: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72564: LD_ADDR_VAR 0 3
72568: PUSH
72569: LD_VAR 0 1
72573: PPUSH
72574: CALL_OW 255
72578: PPUSH
72579: LD_VAR 0 1
72583: PPUSH
72584: CALL_OW 250
72588: PPUSH
72589: LD_VAR 0 1
72593: PPUSH
72594: CALL_OW 251
72598: PPUSH
72599: LD_VAR 0 2
72603: PPUSH
72604: CALL 45963 0 4
72608: PUSH
72609: LD_INT 4
72611: ARRAY
72612: ST_TO_ADDR
// end ;
72613: LD_VAR 0 3
72617: RET
// export function PlayerSeeMe ( unit ) ; begin
72618: LD_INT 0
72620: PPUSH
// result := See ( your_side , unit ) ;
72621: LD_ADDR_VAR 0 2
72625: PUSH
72626: LD_OWVAR 2
72630: PPUSH
72631: LD_VAR 0 1
72635: PPUSH
72636: CALL_OW 292
72640: ST_TO_ADDR
// end ;
72641: LD_VAR 0 2
72645: RET
// export function ReverseDir ( unit ) ; begin
72646: LD_INT 0
72648: PPUSH
// if not unit then
72649: LD_VAR 0 1
72653: NOT
72654: IFFALSE 72658
// exit ;
72656: GO 72681
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72658: LD_ADDR_VAR 0 2
72662: PUSH
72663: LD_VAR 0 1
72667: PPUSH
72668: CALL_OW 254
72672: PUSH
72673: LD_INT 3
72675: PLUS
72676: PUSH
72677: LD_INT 6
72679: MOD
72680: ST_TO_ADDR
// end ;
72681: LD_VAR 0 2
72685: RET
// export function ReverseArray ( array ) ; var i ; begin
72686: LD_INT 0
72688: PPUSH
72689: PPUSH
// if not array then
72690: LD_VAR 0 1
72694: NOT
72695: IFFALSE 72699
// exit ;
72697: GO 72754
// result := [ ] ;
72699: LD_ADDR_VAR 0 2
72703: PUSH
72704: EMPTY
72705: ST_TO_ADDR
// for i := array downto 1 do
72706: LD_ADDR_VAR 0 3
72710: PUSH
72711: DOUBLE
72712: LD_VAR 0 1
72716: INC
72717: ST_TO_ADDR
72718: LD_INT 1
72720: PUSH
72721: FOR_DOWNTO
72722: IFFALSE 72752
// result := Join ( result , array [ i ] ) ;
72724: LD_ADDR_VAR 0 2
72728: PUSH
72729: LD_VAR 0 2
72733: PPUSH
72734: LD_VAR 0 1
72738: PUSH
72739: LD_VAR 0 3
72743: ARRAY
72744: PPUSH
72745: CALL 77379 0 2
72749: ST_TO_ADDR
72750: GO 72721
72752: POP
72753: POP
// end ;
72754: LD_VAR 0 2
72758: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72759: LD_INT 0
72761: PPUSH
72762: PPUSH
72763: PPUSH
72764: PPUSH
72765: PPUSH
72766: PPUSH
// if not unit or not hexes then
72767: LD_VAR 0 1
72771: NOT
72772: PUSH
72773: LD_VAR 0 2
72777: NOT
72778: OR
72779: IFFALSE 72783
// exit ;
72781: GO 72906
// dist := 9999 ;
72783: LD_ADDR_VAR 0 5
72787: PUSH
72788: LD_INT 9999
72790: ST_TO_ADDR
// for i = 1 to hexes do
72791: LD_ADDR_VAR 0 4
72795: PUSH
72796: DOUBLE
72797: LD_INT 1
72799: DEC
72800: ST_TO_ADDR
72801: LD_VAR 0 2
72805: PUSH
72806: FOR_TO
72807: IFFALSE 72894
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72809: LD_ADDR_VAR 0 6
72813: PUSH
72814: LD_VAR 0 1
72818: PPUSH
72819: LD_VAR 0 2
72823: PUSH
72824: LD_VAR 0 4
72828: ARRAY
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: PPUSH
72834: LD_VAR 0 2
72838: PUSH
72839: LD_VAR 0 4
72843: ARRAY
72844: PUSH
72845: LD_INT 2
72847: ARRAY
72848: PPUSH
72849: CALL_OW 297
72853: ST_TO_ADDR
// if tdist < dist then
72854: LD_VAR 0 6
72858: PUSH
72859: LD_VAR 0 5
72863: LESS
72864: IFFALSE 72892
// begin hex := hexes [ i ] ;
72866: LD_ADDR_VAR 0 8
72870: PUSH
72871: LD_VAR 0 2
72875: PUSH
72876: LD_VAR 0 4
72880: ARRAY
72881: ST_TO_ADDR
// dist := tdist ;
72882: LD_ADDR_VAR 0 5
72886: PUSH
72887: LD_VAR 0 6
72891: ST_TO_ADDR
// end ; end ;
72892: GO 72806
72894: POP
72895: POP
// result := hex ;
72896: LD_ADDR_VAR 0 3
72900: PUSH
72901: LD_VAR 0 8
72905: ST_TO_ADDR
// end ;
72906: LD_VAR 0 3
72910: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72911: LD_INT 0
72913: PPUSH
72914: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72915: LD_VAR 0 1
72919: NOT
72920: PUSH
72921: LD_VAR 0 1
72925: PUSH
72926: LD_INT 21
72928: PUSH
72929: LD_INT 2
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 23
72938: PUSH
72939: LD_INT 2
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PPUSH
72950: CALL_OW 69
72954: IN
72955: NOT
72956: OR
72957: IFFALSE 72961
// exit ;
72959: GO 73008
// for i = 1 to 3 do
72961: LD_ADDR_VAR 0 3
72965: PUSH
72966: DOUBLE
72967: LD_INT 1
72969: DEC
72970: ST_TO_ADDR
72971: LD_INT 3
72973: PUSH
72974: FOR_TO
72975: IFFALSE 73006
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72977: LD_VAR 0 1
72981: PPUSH
72982: CALL_OW 250
72986: PPUSH
72987: LD_VAR 0 1
72991: PPUSH
72992: CALL_OW 251
72996: PPUSH
72997: LD_INT 1
72999: PPUSH
73000: CALL_OW 453
73004: GO 72974
73006: POP
73007: POP
// end ;
73008: LD_VAR 0 2
73012: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73013: LD_INT 0
73015: PPUSH
73016: PPUSH
73017: PPUSH
73018: PPUSH
73019: PPUSH
73020: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73021: LD_VAR 0 1
73025: NOT
73026: PUSH
73027: LD_VAR 0 2
73031: NOT
73032: OR
73033: PUSH
73034: LD_VAR 0 1
73038: PPUSH
73039: CALL_OW 314
73043: OR
73044: IFFALSE 73048
// exit ;
73046: GO 73489
// x := GetX ( enemy_unit ) ;
73048: LD_ADDR_VAR 0 7
73052: PUSH
73053: LD_VAR 0 2
73057: PPUSH
73058: CALL_OW 250
73062: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73063: LD_ADDR_VAR 0 8
73067: PUSH
73068: LD_VAR 0 2
73072: PPUSH
73073: CALL_OW 251
73077: ST_TO_ADDR
// if not x or not y then
73078: LD_VAR 0 7
73082: NOT
73083: PUSH
73084: LD_VAR 0 8
73088: NOT
73089: OR
73090: IFFALSE 73094
// exit ;
73092: GO 73489
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73094: LD_ADDR_VAR 0 6
73098: PUSH
73099: LD_VAR 0 7
73103: PPUSH
73104: LD_INT 0
73106: PPUSH
73107: LD_INT 4
73109: PPUSH
73110: CALL_OW 272
73114: PUSH
73115: LD_VAR 0 8
73119: PPUSH
73120: LD_INT 0
73122: PPUSH
73123: LD_INT 4
73125: PPUSH
73126: CALL_OW 273
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_VAR 0 7
73139: PPUSH
73140: LD_INT 1
73142: PPUSH
73143: LD_INT 4
73145: PPUSH
73146: CALL_OW 272
73150: PUSH
73151: LD_VAR 0 8
73155: PPUSH
73156: LD_INT 1
73158: PPUSH
73159: LD_INT 4
73161: PPUSH
73162: CALL_OW 273
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_VAR 0 7
73175: PPUSH
73176: LD_INT 2
73178: PPUSH
73179: LD_INT 4
73181: PPUSH
73182: CALL_OW 272
73186: PUSH
73187: LD_VAR 0 8
73191: PPUSH
73192: LD_INT 2
73194: PPUSH
73195: LD_INT 4
73197: PPUSH
73198: CALL_OW 273
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_VAR 0 7
73211: PPUSH
73212: LD_INT 3
73214: PPUSH
73215: LD_INT 4
73217: PPUSH
73218: CALL_OW 272
73222: PUSH
73223: LD_VAR 0 8
73227: PPUSH
73228: LD_INT 3
73230: PPUSH
73231: LD_INT 4
73233: PPUSH
73234: CALL_OW 273
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_VAR 0 7
73247: PPUSH
73248: LD_INT 4
73250: PPUSH
73251: LD_INT 4
73253: PPUSH
73254: CALL_OW 272
73258: PUSH
73259: LD_VAR 0 8
73263: PPUSH
73264: LD_INT 4
73266: PPUSH
73267: LD_INT 4
73269: PPUSH
73270: CALL_OW 273
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_VAR 0 7
73283: PPUSH
73284: LD_INT 5
73286: PPUSH
73287: LD_INT 4
73289: PPUSH
73290: CALL_OW 272
73294: PUSH
73295: LD_VAR 0 8
73299: PPUSH
73300: LD_INT 5
73302: PPUSH
73303: LD_INT 4
73305: PPUSH
73306: CALL_OW 273
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: ST_TO_ADDR
// for i = tmp downto 1 do
73323: LD_ADDR_VAR 0 4
73327: PUSH
73328: DOUBLE
73329: LD_VAR 0 6
73333: INC
73334: ST_TO_ADDR
73335: LD_INT 1
73337: PUSH
73338: FOR_DOWNTO
73339: IFFALSE 73440
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73341: LD_VAR 0 6
73345: PUSH
73346: LD_VAR 0 4
73350: ARRAY
73351: PUSH
73352: LD_INT 1
73354: ARRAY
73355: PPUSH
73356: LD_VAR 0 6
73360: PUSH
73361: LD_VAR 0 4
73365: ARRAY
73366: PUSH
73367: LD_INT 2
73369: ARRAY
73370: PPUSH
73371: CALL_OW 488
73375: NOT
73376: PUSH
73377: LD_VAR 0 6
73381: PUSH
73382: LD_VAR 0 4
73386: ARRAY
73387: PUSH
73388: LD_INT 1
73390: ARRAY
73391: PPUSH
73392: LD_VAR 0 6
73396: PUSH
73397: LD_VAR 0 4
73401: ARRAY
73402: PUSH
73403: LD_INT 2
73405: ARRAY
73406: PPUSH
73407: CALL_OW 428
73411: PUSH
73412: LD_INT 0
73414: NONEQUAL
73415: OR
73416: IFFALSE 73438
// tmp := Delete ( tmp , i ) ;
73418: LD_ADDR_VAR 0 6
73422: PUSH
73423: LD_VAR 0 6
73427: PPUSH
73428: LD_VAR 0 4
73432: PPUSH
73433: CALL_OW 3
73437: ST_TO_ADDR
73438: GO 73338
73440: POP
73441: POP
// j := GetClosestHex ( unit , tmp ) ;
73442: LD_ADDR_VAR 0 5
73446: PUSH
73447: LD_VAR 0 1
73451: PPUSH
73452: LD_VAR 0 6
73456: PPUSH
73457: CALL 72759 0 2
73461: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73462: LD_VAR 0 1
73466: PPUSH
73467: LD_VAR 0 5
73471: PUSH
73472: LD_INT 1
73474: ARRAY
73475: PPUSH
73476: LD_VAR 0 5
73480: PUSH
73481: LD_INT 2
73483: ARRAY
73484: PPUSH
73485: CALL_OW 111
// end ;
73489: LD_VAR 0 3
73493: RET
// export function PrepareApemanSoldier ( ) ; begin
73494: LD_INT 0
73496: PPUSH
// uc_nation := 0 ;
73497: LD_ADDR_OWVAR 21
73501: PUSH
73502: LD_INT 0
73504: ST_TO_ADDR
// hc_sex := sex_male ;
73505: LD_ADDR_OWVAR 27
73509: PUSH
73510: LD_INT 1
73512: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73513: LD_ADDR_OWVAR 28
73517: PUSH
73518: LD_INT 15
73520: ST_TO_ADDR
// hc_gallery :=  ;
73521: LD_ADDR_OWVAR 33
73525: PUSH
73526: LD_STRING 
73528: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73529: LD_ADDR_OWVAR 31
73533: PUSH
73534: LD_INT 0
73536: PPUSH
73537: LD_INT 3
73539: PPUSH
73540: CALL_OW 12
73544: PUSH
73545: LD_INT 0
73547: PPUSH
73548: LD_INT 3
73550: PPUSH
73551: CALL_OW 12
73555: PUSH
73556: LD_INT 0
73558: PUSH
73559: LD_INT 0
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: ST_TO_ADDR
// end ;
73568: LD_VAR 0 1
73572: RET
// export function PrepareApemanEngineer ( ) ; begin
73573: LD_INT 0
73575: PPUSH
// uc_nation := 0 ;
73576: LD_ADDR_OWVAR 21
73580: PUSH
73581: LD_INT 0
73583: ST_TO_ADDR
// hc_sex := sex_male ;
73584: LD_ADDR_OWVAR 27
73588: PUSH
73589: LD_INT 1
73591: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73592: LD_ADDR_OWVAR 28
73596: PUSH
73597: LD_INT 16
73599: ST_TO_ADDR
// hc_gallery :=  ;
73600: LD_ADDR_OWVAR 33
73604: PUSH
73605: LD_STRING 
73607: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73608: LD_ADDR_OWVAR 31
73612: PUSH
73613: LD_INT 0
73615: PPUSH
73616: LD_INT 3
73618: PPUSH
73619: CALL_OW 12
73623: PUSH
73624: LD_INT 0
73626: PPUSH
73627: LD_INT 3
73629: PPUSH
73630: CALL_OW 12
73634: PUSH
73635: LD_INT 0
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: ST_TO_ADDR
// end ;
73647: LD_VAR 0 1
73651: RET
// export function PrepareApeman ( agressivity ) ; begin
73652: LD_INT 0
73654: PPUSH
// uc_side := 0 ;
73655: LD_ADDR_OWVAR 20
73659: PUSH
73660: LD_INT 0
73662: ST_TO_ADDR
// uc_nation := 0 ;
73663: LD_ADDR_OWVAR 21
73667: PUSH
73668: LD_INT 0
73670: ST_TO_ADDR
// hc_sex := sex_male ;
73671: LD_ADDR_OWVAR 27
73675: PUSH
73676: LD_INT 1
73678: ST_TO_ADDR
// hc_class := class_apeman ;
73679: LD_ADDR_OWVAR 28
73683: PUSH
73684: LD_INT 12
73686: ST_TO_ADDR
// hc_gallery :=  ;
73687: LD_ADDR_OWVAR 33
73691: PUSH
73692: LD_STRING 
73694: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73695: LD_ADDR_OWVAR 35
73699: PUSH
73700: LD_VAR 0 1
73704: NEG
73705: PPUSH
73706: LD_VAR 0 1
73710: PPUSH
73711: CALL_OW 12
73715: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73716: LD_ADDR_OWVAR 31
73720: PUSH
73721: LD_INT 0
73723: PPUSH
73724: LD_INT 3
73726: PPUSH
73727: CALL_OW 12
73731: PUSH
73732: LD_INT 0
73734: PPUSH
73735: LD_INT 3
73737: PPUSH
73738: CALL_OW 12
73742: PUSH
73743: LD_INT 0
73745: PUSH
73746: LD_INT 0
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: ST_TO_ADDR
// end ;
73755: LD_VAR 0 2
73759: RET
// export function PrepareTiger ( agressivity ) ; begin
73760: LD_INT 0
73762: PPUSH
// uc_side := 0 ;
73763: LD_ADDR_OWVAR 20
73767: PUSH
73768: LD_INT 0
73770: ST_TO_ADDR
// uc_nation := 0 ;
73771: LD_ADDR_OWVAR 21
73775: PUSH
73776: LD_INT 0
73778: ST_TO_ADDR
// hc_class := class_tiger ;
73779: LD_ADDR_OWVAR 28
73783: PUSH
73784: LD_INT 14
73786: ST_TO_ADDR
// hc_gallery :=  ;
73787: LD_ADDR_OWVAR 33
73791: PUSH
73792: LD_STRING 
73794: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73795: LD_ADDR_OWVAR 35
73799: PUSH
73800: LD_VAR 0 1
73804: NEG
73805: PPUSH
73806: LD_VAR 0 1
73810: PPUSH
73811: CALL_OW 12
73815: ST_TO_ADDR
// end ;
73816: LD_VAR 0 2
73820: RET
// export function PrepareEnchidna ( ) ; begin
73821: LD_INT 0
73823: PPUSH
// uc_side := 0 ;
73824: LD_ADDR_OWVAR 20
73828: PUSH
73829: LD_INT 0
73831: ST_TO_ADDR
// uc_nation := 0 ;
73832: LD_ADDR_OWVAR 21
73836: PUSH
73837: LD_INT 0
73839: ST_TO_ADDR
// hc_class := class_baggie ;
73840: LD_ADDR_OWVAR 28
73844: PUSH
73845: LD_INT 13
73847: ST_TO_ADDR
// hc_gallery :=  ;
73848: LD_ADDR_OWVAR 33
73852: PUSH
73853: LD_STRING 
73855: ST_TO_ADDR
// end ;
73856: LD_VAR 0 1
73860: RET
// export function PrepareFrog ( ) ; begin
73861: LD_INT 0
73863: PPUSH
// uc_side := 0 ;
73864: LD_ADDR_OWVAR 20
73868: PUSH
73869: LD_INT 0
73871: ST_TO_ADDR
// uc_nation := 0 ;
73872: LD_ADDR_OWVAR 21
73876: PUSH
73877: LD_INT 0
73879: ST_TO_ADDR
// hc_class := class_frog ;
73880: LD_ADDR_OWVAR 28
73884: PUSH
73885: LD_INT 19
73887: ST_TO_ADDR
// hc_gallery :=  ;
73888: LD_ADDR_OWVAR 33
73892: PUSH
73893: LD_STRING 
73895: ST_TO_ADDR
// end ;
73896: LD_VAR 0 1
73900: RET
// export function PrepareFish ( ) ; begin
73901: LD_INT 0
73903: PPUSH
// uc_side := 0 ;
73904: LD_ADDR_OWVAR 20
73908: PUSH
73909: LD_INT 0
73911: ST_TO_ADDR
// uc_nation := 0 ;
73912: LD_ADDR_OWVAR 21
73916: PUSH
73917: LD_INT 0
73919: ST_TO_ADDR
// hc_class := class_fish ;
73920: LD_ADDR_OWVAR 28
73924: PUSH
73925: LD_INT 20
73927: ST_TO_ADDR
// hc_gallery :=  ;
73928: LD_ADDR_OWVAR 33
73932: PUSH
73933: LD_STRING 
73935: ST_TO_ADDR
// end ;
73936: LD_VAR 0 1
73940: RET
// export function PrepareBird ( ) ; begin
73941: LD_INT 0
73943: PPUSH
// uc_side := 0 ;
73944: LD_ADDR_OWVAR 20
73948: PUSH
73949: LD_INT 0
73951: ST_TO_ADDR
// uc_nation := 0 ;
73952: LD_ADDR_OWVAR 21
73956: PUSH
73957: LD_INT 0
73959: ST_TO_ADDR
// hc_class := class_phororhacos ;
73960: LD_ADDR_OWVAR 28
73964: PUSH
73965: LD_INT 18
73967: ST_TO_ADDR
// hc_gallery :=  ;
73968: LD_ADDR_OWVAR 33
73972: PUSH
73973: LD_STRING 
73975: ST_TO_ADDR
// end ;
73976: LD_VAR 0 1
73980: RET
// export function PrepareHorse ( ) ; begin
73981: LD_INT 0
73983: PPUSH
// uc_side := 0 ;
73984: LD_ADDR_OWVAR 20
73988: PUSH
73989: LD_INT 0
73991: ST_TO_ADDR
// uc_nation := 0 ;
73992: LD_ADDR_OWVAR 21
73996: PUSH
73997: LD_INT 0
73999: ST_TO_ADDR
// hc_class := class_horse ;
74000: LD_ADDR_OWVAR 28
74004: PUSH
74005: LD_INT 21
74007: ST_TO_ADDR
// hc_gallery :=  ;
74008: LD_ADDR_OWVAR 33
74012: PUSH
74013: LD_STRING 
74015: ST_TO_ADDR
// end ;
74016: LD_VAR 0 1
74020: RET
// export function PrepareMastodont ( ) ; begin
74021: LD_INT 0
74023: PPUSH
// uc_side := 0 ;
74024: LD_ADDR_OWVAR 20
74028: PUSH
74029: LD_INT 0
74031: ST_TO_ADDR
// uc_nation := 0 ;
74032: LD_ADDR_OWVAR 21
74036: PUSH
74037: LD_INT 0
74039: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74040: LD_ADDR_OWVAR 37
74044: PUSH
74045: LD_INT 31
74047: ST_TO_ADDR
// vc_control := control_rider ;
74048: LD_ADDR_OWVAR 38
74052: PUSH
74053: LD_INT 4
74055: ST_TO_ADDR
// end ;
74056: LD_VAR 0 1
74060: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74061: LD_INT 0
74063: PPUSH
74064: PPUSH
74065: PPUSH
// uc_side = 0 ;
74066: LD_ADDR_OWVAR 20
74070: PUSH
74071: LD_INT 0
74073: ST_TO_ADDR
// uc_nation = 0 ;
74074: LD_ADDR_OWVAR 21
74078: PUSH
74079: LD_INT 0
74081: ST_TO_ADDR
// InitHc_All ( ) ;
74082: CALL_OW 584
// InitVc ;
74086: CALL_OW 20
// if mastodonts then
74090: LD_VAR 0 6
74094: IFFALSE 74161
// for i = 1 to mastodonts do
74096: LD_ADDR_VAR 0 11
74100: PUSH
74101: DOUBLE
74102: LD_INT 1
74104: DEC
74105: ST_TO_ADDR
74106: LD_VAR 0 6
74110: PUSH
74111: FOR_TO
74112: IFFALSE 74159
// begin vc_chassis := 31 ;
74114: LD_ADDR_OWVAR 37
74118: PUSH
74119: LD_INT 31
74121: ST_TO_ADDR
// vc_control := control_rider ;
74122: LD_ADDR_OWVAR 38
74126: PUSH
74127: LD_INT 4
74129: ST_TO_ADDR
// animal := CreateVehicle ;
74130: LD_ADDR_VAR 0 12
74134: PUSH
74135: CALL_OW 45
74139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74140: LD_VAR 0 12
74144: PPUSH
74145: LD_VAR 0 8
74149: PPUSH
74150: LD_INT 0
74152: PPUSH
74153: CALL 76296 0 3
// end ;
74157: GO 74111
74159: POP
74160: POP
// if horses then
74161: LD_VAR 0 5
74165: IFFALSE 74232
// for i = 1 to horses do
74167: LD_ADDR_VAR 0 11
74171: PUSH
74172: DOUBLE
74173: LD_INT 1
74175: DEC
74176: ST_TO_ADDR
74177: LD_VAR 0 5
74181: PUSH
74182: FOR_TO
74183: IFFALSE 74230
// begin hc_class := 21 ;
74185: LD_ADDR_OWVAR 28
74189: PUSH
74190: LD_INT 21
74192: ST_TO_ADDR
// hc_gallery :=  ;
74193: LD_ADDR_OWVAR 33
74197: PUSH
74198: LD_STRING 
74200: ST_TO_ADDR
// animal := CreateHuman ;
74201: LD_ADDR_VAR 0 12
74205: PUSH
74206: CALL_OW 44
74210: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74211: LD_VAR 0 12
74215: PPUSH
74216: LD_VAR 0 8
74220: PPUSH
74221: LD_INT 0
74223: PPUSH
74224: CALL 76296 0 3
// end ;
74228: GO 74182
74230: POP
74231: POP
// if birds then
74232: LD_VAR 0 1
74236: IFFALSE 74303
// for i = 1 to birds do
74238: LD_ADDR_VAR 0 11
74242: PUSH
74243: DOUBLE
74244: LD_INT 1
74246: DEC
74247: ST_TO_ADDR
74248: LD_VAR 0 1
74252: PUSH
74253: FOR_TO
74254: IFFALSE 74301
// begin hc_class = 18 ;
74256: LD_ADDR_OWVAR 28
74260: PUSH
74261: LD_INT 18
74263: ST_TO_ADDR
// hc_gallery =  ;
74264: LD_ADDR_OWVAR 33
74268: PUSH
74269: LD_STRING 
74271: ST_TO_ADDR
// animal := CreateHuman ;
74272: LD_ADDR_VAR 0 12
74276: PUSH
74277: CALL_OW 44
74281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74282: LD_VAR 0 12
74286: PPUSH
74287: LD_VAR 0 8
74291: PPUSH
74292: LD_INT 0
74294: PPUSH
74295: CALL 76296 0 3
// end ;
74299: GO 74253
74301: POP
74302: POP
// if tigers then
74303: LD_VAR 0 2
74307: IFFALSE 74391
// for i = 1 to tigers do
74309: LD_ADDR_VAR 0 11
74313: PUSH
74314: DOUBLE
74315: LD_INT 1
74317: DEC
74318: ST_TO_ADDR
74319: LD_VAR 0 2
74323: PUSH
74324: FOR_TO
74325: IFFALSE 74389
// begin hc_class = class_tiger ;
74327: LD_ADDR_OWVAR 28
74331: PUSH
74332: LD_INT 14
74334: ST_TO_ADDR
// hc_gallery =  ;
74335: LD_ADDR_OWVAR 33
74339: PUSH
74340: LD_STRING 
74342: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74343: LD_ADDR_OWVAR 35
74347: PUSH
74348: LD_INT 7
74350: NEG
74351: PPUSH
74352: LD_INT 7
74354: PPUSH
74355: CALL_OW 12
74359: ST_TO_ADDR
// animal := CreateHuman ;
74360: LD_ADDR_VAR 0 12
74364: PUSH
74365: CALL_OW 44
74369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74370: LD_VAR 0 12
74374: PPUSH
74375: LD_VAR 0 8
74379: PPUSH
74380: LD_INT 0
74382: PPUSH
74383: CALL 76296 0 3
// end ;
74387: GO 74324
74389: POP
74390: POP
// if apemans then
74391: LD_VAR 0 3
74395: IFFALSE 74518
// for i = 1 to apemans do
74397: LD_ADDR_VAR 0 11
74401: PUSH
74402: DOUBLE
74403: LD_INT 1
74405: DEC
74406: ST_TO_ADDR
74407: LD_VAR 0 3
74411: PUSH
74412: FOR_TO
74413: IFFALSE 74516
// begin hc_class = class_apeman ;
74415: LD_ADDR_OWVAR 28
74419: PUSH
74420: LD_INT 12
74422: ST_TO_ADDR
// hc_gallery =  ;
74423: LD_ADDR_OWVAR 33
74427: PUSH
74428: LD_STRING 
74430: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74431: LD_ADDR_OWVAR 35
74435: PUSH
74436: LD_INT 2
74438: NEG
74439: PPUSH
74440: LD_INT 2
74442: PPUSH
74443: CALL_OW 12
74447: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74448: LD_ADDR_OWVAR 31
74452: PUSH
74453: LD_INT 1
74455: PPUSH
74456: LD_INT 3
74458: PPUSH
74459: CALL_OW 12
74463: PUSH
74464: LD_INT 1
74466: PPUSH
74467: LD_INT 3
74469: PPUSH
74470: CALL_OW 12
74474: PUSH
74475: LD_INT 0
74477: PUSH
74478: LD_INT 0
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: ST_TO_ADDR
// animal := CreateHuman ;
74487: LD_ADDR_VAR 0 12
74491: PUSH
74492: CALL_OW 44
74496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74497: LD_VAR 0 12
74501: PPUSH
74502: LD_VAR 0 8
74506: PPUSH
74507: LD_INT 0
74509: PPUSH
74510: CALL 76296 0 3
// end ;
74514: GO 74412
74516: POP
74517: POP
// if enchidnas then
74518: LD_VAR 0 4
74522: IFFALSE 74589
// for i = 1 to enchidnas do
74524: LD_ADDR_VAR 0 11
74528: PUSH
74529: DOUBLE
74530: LD_INT 1
74532: DEC
74533: ST_TO_ADDR
74534: LD_VAR 0 4
74538: PUSH
74539: FOR_TO
74540: IFFALSE 74587
// begin hc_class = 13 ;
74542: LD_ADDR_OWVAR 28
74546: PUSH
74547: LD_INT 13
74549: ST_TO_ADDR
// hc_gallery =  ;
74550: LD_ADDR_OWVAR 33
74554: PUSH
74555: LD_STRING 
74557: ST_TO_ADDR
// animal := CreateHuman ;
74558: LD_ADDR_VAR 0 12
74562: PUSH
74563: CALL_OW 44
74567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74568: LD_VAR 0 12
74572: PPUSH
74573: LD_VAR 0 8
74577: PPUSH
74578: LD_INT 0
74580: PPUSH
74581: CALL 76296 0 3
// end ;
74585: GO 74539
74587: POP
74588: POP
// if fishes then
74589: LD_VAR 0 7
74593: IFFALSE 74660
// for i = 1 to fishes do
74595: LD_ADDR_VAR 0 11
74599: PUSH
74600: DOUBLE
74601: LD_INT 1
74603: DEC
74604: ST_TO_ADDR
74605: LD_VAR 0 7
74609: PUSH
74610: FOR_TO
74611: IFFALSE 74658
// begin hc_class = 20 ;
74613: LD_ADDR_OWVAR 28
74617: PUSH
74618: LD_INT 20
74620: ST_TO_ADDR
// hc_gallery =  ;
74621: LD_ADDR_OWVAR 33
74625: PUSH
74626: LD_STRING 
74628: ST_TO_ADDR
// animal := CreateHuman ;
74629: LD_ADDR_VAR 0 12
74633: PUSH
74634: CALL_OW 44
74638: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74639: LD_VAR 0 12
74643: PPUSH
74644: LD_VAR 0 9
74648: PPUSH
74649: LD_INT 0
74651: PPUSH
74652: CALL 76296 0 3
// end ;
74656: GO 74610
74658: POP
74659: POP
// end ;
74660: LD_VAR 0 10
74664: RET
// export function WantHeal ( sci , unit ) ; begin
74665: LD_INT 0
74667: PPUSH
// if GetTaskList ( sci ) > 0 then
74668: LD_VAR 0 1
74672: PPUSH
74673: CALL_OW 437
74677: PUSH
74678: LD_INT 0
74680: GREATER
74681: IFFALSE 74751
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74683: LD_VAR 0 1
74687: PPUSH
74688: CALL_OW 437
74692: PUSH
74693: LD_INT 1
74695: ARRAY
74696: PUSH
74697: LD_INT 1
74699: ARRAY
74700: PUSH
74701: LD_STRING l
74703: EQUAL
74704: PUSH
74705: LD_VAR 0 1
74709: PPUSH
74710: CALL_OW 437
74714: PUSH
74715: LD_INT 1
74717: ARRAY
74718: PUSH
74719: LD_INT 4
74721: ARRAY
74722: PUSH
74723: LD_VAR 0 2
74727: EQUAL
74728: AND
74729: IFFALSE 74741
// result := true else
74731: LD_ADDR_VAR 0 3
74735: PUSH
74736: LD_INT 1
74738: ST_TO_ADDR
74739: GO 74749
// result := false ;
74741: LD_ADDR_VAR 0 3
74745: PUSH
74746: LD_INT 0
74748: ST_TO_ADDR
// end else
74749: GO 74759
// result := false ;
74751: LD_ADDR_VAR 0 3
74755: PUSH
74756: LD_INT 0
74758: ST_TO_ADDR
// end ;
74759: LD_VAR 0 3
74763: RET
// export function HealTarget ( sci ) ; begin
74764: LD_INT 0
74766: PPUSH
// if not sci then
74767: LD_VAR 0 1
74771: NOT
74772: IFFALSE 74776
// exit ;
74774: GO 74841
// result := 0 ;
74776: LD_ADDR_VAR 0 2
74780: PUSH
74781: LD_INT 0
74783: ST_TO_ADDR
// if GetTaskList ( sci ) then
74784: LD_VAR 0 1
74788: PPUSH
74789: CALL_OW 437
74793: IFFALSE 74841
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74795: LD_VAR 0 1
74799: PPUSH
74800: CALL_OW 437
74804: PUSH
74805: LD_INT 1
74807: ARRAY
74808: PUSH
74809: LD_INT 1
74811: ARRAY
74812: PUSH
74813: LD_STRING l
74815: EQUAL
74816: IFFALSE 74841
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74818: LD_ADDR_VAR 0 2
74822: PUSH
74823: LD_VAR 0 1
74827: PPUSH
74828: CALL_OW 437
74832: PUSH
74833: LD_INT 1
74835: ARRAY
74836: PUSH
74837: LD_INT 4
74839: ARRAY
74840: ST_TO_ADDR
// end ;
74841: LD_VAR 0 2
74845: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74846: LD_INT 0
74848: PPUSH
74849: PPUSH
74850: PPUSH
74851: PPUSH
// if not base_units then
74852: LD_VAR 0 1
74856: NOT
74857: IFFALSE 74861
// exit ;
74859: GO 74948
// result := false ;
74861: LD_ADDR_VAR 0 2
74865: PUSH
74866: LD_INT 0
74868: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74869: LD_ADDR_VAR 0 5
74873: PUSH
74874: LD_VAR 0 1
74878: PPUSH
74879: LD_INT 21
74881: PUSH
74882: LD_INT 3
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PPUSH
74889: CALL_OW 72
74893: ST_TO_ADDR
// if not tmp then
74894: LD_VAR 0 5
74898: NOT
74899: IFFALSE 74903
// exit ;
74901: GO 74948
// for i in tmp do
74903: LD_ADDR_VAR 0 3
74907: PUSH
74908: LD_VAR 0 5
74912: PUSH
74913: FOR_IN
74914: IFFALSE 74946
// begin result := EnemyInRange ( i , 22 ) ;
74916: LD_ADDR_VAR 0 2
74920: PUSH
74921: LD_VAR 0 3
74925: PPUSH
74926: LD_INT 22
74928: PPUSH
74929: CALL 72561 0 2
74933: ST_TO_ADDR
// if result then
74934: LD_VAR 0 2
74938: IFFALSE 74944
// exit ;
74940: POP
74941: POP
74942: GO 74948
// end ;
74944: GO 74913
74946: POP
74947: POP
// end ;
74948: LD_VAR 0 2
74952: RET
// export function FilterByTag ( units , tag ) ; begin
74953: LD_INT 0
74955: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74956: LD_ADDR_VAR 0 3
74960: PUSH
74961: LD_VAR 0 1
74965: PPUSH
74966: LD_INT 120
74968: PUSH
74969: LD_VAR 0 2
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PPUSH
74978: CALL_OW 72
74982: ST_TO_ADDR
// end ;
74983: LD_VAR 0 3
74987: RET
// export function IsDriver ( un ) ; begin
74988: LD_INT 0
74990: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74991: LD_ADDR_VAR 0 2
74995: PUSH
74996: LD_VAR 0 1
75000: PUSH
75001: LD_INT 55
75003: PUSH
75004: EMPTY
75005: LIST
75006: PPUSH
75007: CALL_OW 69
75011: IN
75012: ST_TO_ADDR
// end ;
75013: LD_VAR 0 2
75017: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75018: LD_INT 0
75020: PPUSH
75021: PPUSH
// list := [ ] ;
75022: LD_ADDR_VAR 0 5
75026: PUSH
75027: EMPTY
75028: ST_TO_ADDR
// case d of 0 :
75029: LD_VAR 0 3
75033: PUSH
75034: LD_INT 0
75036: DOUBLE
75037: EQUAL
75038: IFTRUE 75042
75040: GO 75175
75042: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75043: LD_ADDR_VAR 0 5
75047: PUSH
75048: LD_VAR 0 1
75052: PUSH
75053: LD_INT 4
75055: MINUS
75056: PUSH
75057: LD_VAR 0 2
75061: PUSH
75062: LD_INT 4
75064: MINUS
75065: PUSH
75066: LD_INT 2
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: LIST
75073: PUSH
75074: LD_VAR 0 1
75078: PUSH
75079: LD_INT 3
75081: MINUS
75082: PUSH
75083: LD_VAR 0 2
75087: PUSH
75088: LD_INT 1
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: LIST
75095: PUSH
75096: LD_VAR 0 1
75100: PUSH
75101: LD_INT 4
75103: PLUS
75104: PUSH
75105: LD_VAR 0 2
75109: PUSH
75110: LD_INT 4
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: LIST
75117: PUSH
75118: LD_VAR 0 1
75122: PUSH
75123: LD_INT 3
75125: PLUS
75126: PUSH
75127: LD_VAR 0 2
75131: PUSH
75132: LD_INT 3
75134: PLUS
75135: PUSH
75136: LD_INT 5
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: LIST
75143: PUSH
75144: LD_VAR 0 1
75148: PUSH
75149: LD_VAR 0 2
75153: PUSH
75154: LD_INT 4
75156: PLUS
75157: PUSH
75158: LD_INT 0
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: LIST
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: ST_TO_ADDR
// end ; 1 :
75173: GO 75873
75175: LD_INT 1
75177: DOUBLE
75178: EQUAL
75179: IFTRUE 75183
75181: GO 75316
75183: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75184: LD_ADDR_VAR 0 5
75188: PUSH
75189: LD_VAR 0 1
75193: PUSH
75194: LD_VAR 0 2
75198: PUSH
75199: LD_INT 4
75201: MINUS
75202: PUSH
75203: LD_INT 3
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: LIST
75210: PUSH
75211: LD_VAR 0 1
75215: PUSH
75216: LD_INT 3
75218: MINUS
75219: PUSH
75220: LD_VAR 0 2
75224: PUSH
75225: LD_INT 3
75227: MINUS
75228: PUSH
75229: LD_INT 2
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: LIST
75236: PUSH
75237: LD_VAR 0 1
75241: PUSH
75242: LD_INT 4
75244: MINUS
75245: PUSH
75246: LD_VAR 0 2
75250: PUSH
75251: LD_INT 1
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: LIST
75258: PUSH
75259: LD_VAR 0 1
75263: PUSH
75264: LD_VAR 0 2
75268: PUSH
75269: LD_INT 3
75271: PLUS
75272: PUSH
75273: LD_INT 0
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: LIST
75280: PUSH
75281: LD_VAR 0 1
75285: PUSH
75286: LD_INT 4
75288: PLUS
75289: PUSH
75290: LD_VAR 0 2
75294: PUSH
75295: LD_INT 4
75297: PLUS
75298: PUSH
75299: LD_INT 5
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: LIST
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: ST_TO_ADDR
// end ; 2 :
75314: GO 75873
75316: LD_INT 2
75318: DOUBLE
75319: EQUAL
75320: IFTRUE 75324
75322: GO 75453
75324: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75325: LD_ADDR_VAR 0 5
75329: PUSH
75330: LD_VAR 0 1
75334: PUSH
75335: LD_VAR 0 2
75339: PUSH
75340: LD_INT 3
75342: MINUS
75343: PUSH
75344: LD_INT 3
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: LIST
75351: PUSH
75352: LD_VAR 0 1
75356: PUSH
75357: LD_INT 4
75359: PLUS
75360: PUSH
75361: LD_VAR 0 2
75365: PUSH
75366: LD_INT 4
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: LIST
75373: PUSH
75374: LD_VAR 0 1
75378: PUSH
75379: LD_VAR 0 2
75383: PUSH
75384: LD_INT 4
75386: PLUS
75387: PUSH
75388: LD_INT 0
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: LIST
75395: PUSH
75396: LD_VAR 0 1
75400: PUSH
75401: LD_INT 3
75403: MINUS
75404: PUSH
75405: LD_VAR 0 2
75409: PUSH
75410: LD_INT 1
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: LIST
75417: PUSH
75418: LD_VAR 0 1
75422: PUSH
75423: LD_INT 4
75425: MINUS
75426: PUSH
75427: LD_VAR 0 2
75431: PUSH
75432: LD_INT 4
75434: MINUS
75435: PUSH
75436: LD_INT 2
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: LIST
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: ST_TO_ADDR
// end ; 3 :
75451: GO 75873
75453: LD_INT 3
75455: DOUBLE
75456: EQUAL
75457: IFTRUE 75461
75459: GO 75594
75461: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75462: LD_ADDR_VAR 0 5
75466: PUSH
75467: LD_VAR 0 1
75471: PUSH
75472: LD_INT 3
75474: PLUS
75475: PUSH
75476: LD_VAR 0 2
75480: PUSH
75481: LD_INT 4
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: LIST
75488: PUSH
75489: LD_VAR 0 1
75493: PUSH
75494: LD_INT 4
75496: PLUS
75497: PUSH
75498: LD_VAR 0 2
75502: PUSH
75503: LD_INT 4
75505: PLUS
75506: PUSH
75507: LD_INT 5
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: LIST
75514: PUSH
75515: LD_VAR 0 1
75519: PUSH
75520: LD_INT 4
75522: MINUS
75523: PUSH
75524: LD_VAR 0 2
75528: PUSH
75529: LD_INT 1
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: LIST
75536: PUSH
75537: LD_VAR 0 1
75541: PUSH
75542: LD_VAR 0 2
75546: PUSH
75547: LD_INT 4
75549: MINUS
75550: PUSH
75551: LD_INT 3
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: LIST
75558: PUSH
75559: LD_VAR 0 1
75563: PUSH
75564: LD_INT 3
75566: MINUS
75567: PUSH
75568: LD_VAR 0 2
75572: PUSH
75573: LD_INT 3
75575: MINUS
75576: PUSH
75577: LD_INT 2
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: LIST
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: ST_TO_ADDR
// end ; 4 :
75592: GO 75873
75594: LD_INT 4
75596: DOUBLE
75597: EQUAL
75598: IFTRUE 75602
75600: GO 75735
75602: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75603: LD_ADDR_VAR 0 5
75607: PUSH
75608: LD_VAR 0 1
75612: PUSH
75613: LD_VAR 0 2
75617: PUSH
75618: LD_INT 4
75620: PLUS
75621: PUSH
75622: LD_INT 0
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: LIST
75629: PUSH
75630: LD_VAR 0 1
75634: PUSH
75635: LD_INT 3
75637: PLUS
75638: PUSH
75639: LD_VAR 0 2
75643: PUSH
75644: LD_INT 3
75646: PLUS
75647: PUSH
75648: LD_INT 5
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: LIST
75655: PUSH
75656: LD_VAR 0 1
75660: PUSH
75661: LD_INT 4
75663: PLUS
75664: PUSH
75665: LD_VAR 0 2
75669: PUSH
75670: LD_INT 4
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: LIST
75677: PUSH
75678: LD_VAR 0 1
75682: PUSH
75683: LD_VAR 0 2
75687: PUSH
75688: LD_INT 3
75690: MINUS
75691: PUSH
75692: LD_INT 3
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: LIST
75699: PUSH
75700: LD_VAR 0 1
75704: PUSH
75705: LD_INT 4
75707: MINUS
75708: PUSH
75709: LD_VAR 0 2
75713: PUSH
75714: LD_INT 4
75716: MINUS
75717: PUSH
75718: LD_INT 2
75720: PUSH
75721: EMPTY
75722: LIST
75723: LIST
75724: LIST
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: ST_TO_ADDR
// end ; 5 :
75733: GO 75873
75735: LD_INT 5
75737: DOUBLE
75738: EQUAL
75739: IFTRUE 75743
75741: GO 75872
75743: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75744: LD_ADDR_VAR 0 5
75748: PUSH
75749: LD_VAR 0 1
75753: PUSH
75754: LD_INT 4
75756: MINUS
75757: PUSH
75758: LD_VAR 0 2
75762: PUSH
75763: LD_INT 1
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: LIST
75770: PUSH
75771: LD_VAR 0 1
75775: PUSH
75776: LD_VAR 0 2
75780: PUSH
75781: LD_INT 4
75783: MINUS
75784: PUSH
75785: LD_INT 3
75787: PUSH
75788: EMPTY
75789: LIST
75790: LIST
75791: LIST
75792: PUSH
75793: LD_VAR 0 1
75797: PUSH
75798: LD_INT 4
75800: PLUS
75801: PUSH
75802: LD_VAR 0 2
75806: PUSH
75807: LD_INT 4
75809: PLUS
75810: PUSH
75811: LD_INT 5
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: LIST
75818: PUSH
75819: LD_VAR 0 1
75823: PUSH
75824: LD_INT 3
75826: PLUS
75827: PUSH
75828: LD_VAR 0 2
75832: PUSH
75833: LD_INT 4
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: LIST
75840: PUSH
75841: LD_VAR 0 1
75845: PUSH
75846: LD_VAR 0 2
75850: PUSH
75851: LD_INT 3
75853: PLUS
75854: PUSH
75855: LD_INT 0
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: LIST
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: ST_TO_ADDR
// end ; end ;
75870: GO 75873
75872: POP
// result := list ;
75873: LD_ADDR_VAR 0 4
75877: PUSH
75878: LD_VAR 0 5
75882: ST_TO_ADDR
// end ;
75883: LD_VAR 0 4
75887: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75888: LD_INT 0
75890: PPUSH
75891: PPUSH
75892: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75893: LD_VAR 0 1
75897: NOT
75898: PUSH
75899: LD_VAR 0 2
75903: PUSH
75904: LD_INT 1
75906: PUSH
75907: LD_INT 2
75909: PUSH
75910: LD_INT 3
75912: PUSH
75913: LD_INT 4
75915: PUSH
75916: EMPTY
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: IN
75922: NOT
75923: OR
75924: IFFALSE 75928
// exit ;
75926: GO 76020
// tmp := [ ] ;
75928: LD_ADDR_VAR 0 5
75932: PUSH
75933: EMPTY
75934: ST_TO_ADDR
// for i in units do
75935: LD_ADDR_VAR 0 4
75939: PUSH
75940: LD_VAR 0 1
75944: PUSH
75945: FOR_IN
75946: IFFALSE 75989
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75948: LD_ADDR_VAR 0 5
75952: PUSH
75953: LD_VAR 0 5
75957: PPUSH
75958: LD_VAR 0 5
75962: PUSH
75963: LD_INT 1
75965: PLUS
75966: PPUSH
75967: LD_VAR 0 4
75971: PPUSH
75972: LD_VAR 0 2
75976: PPUSH
75977: CALL_OW 259
75981: PPUSH
75982: CALL_OW 2
75986: ST_TO_ADDR
75987: GO 75945
75989: POP
75990: POP
// if not tmp then
75991: LD_VAR 0 5
75995: NOT
75996: IFFALSE 76000
// exit ;
75998: GO 76020
// result := SortListByListDesc ( units , tmp ) ;
76000: LD_ADDR_VAR 0 3
76004: PUSH
76005: LD_VAR 0 1
76009: PPUSH
76010: LD_VAR 0 5
76014: PPUSH
76015: CALL_OW 77
76019: ST_TO_ADDR
// end ;
76020: LD_VAR 0 3
76024: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76025: LD_INT 0
76027: PPUSH
76028: PPUSH
76029: PPUSH
// result := false ;
76030: LD_ADDR_VAR 0 3
76034: PUSH
76035: LD_INT 0
76037: ST_TO_ADDR
// x := GetX ( building ) ;
76038: LD_ADDR_VAR 0 4
76042: PUSH
76043: LD_VAR 0 2
76047: PPUSH
76048: CALL_OW 250
76052: ST_TO_ADDR
// y := GetY ( building ) ;
76053: LD_ADDR_VAR 0 5
76057: PUSH
76058: LD_VAR 0 2
76062: PPUSH
76063: CALL_OW 251
76067: ST_TO_ADDR
// if not building or not x or not y then
76068: LD_VAR 0 2
76072: NOT
76073: PUSH
76074: LD_VAR 0 4
76078: NOT
76079: OR
76080: PUSH
76081: LD_VAR 0 5
76085: NOT
76086: OR
76087: IFFALSE 76091
// exit ;
76089: GO 76183
// if GetTaskList ( unit ) then
76091: LD_VAR 0 1
76095: PPUSH
76096: CALL_OW 437
76100: IFFALSE 76183
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76102: LD_STRING e
76104: PUSH
76105: LD_VAR 0 1
76109: PPUSH
76110: CALL_OW 437
76114: PUSH
76115: LD_INT 1
76117: ARRAY
76118: PUSH
76119: LD_INT 1
76121: ARRAY
76122: EQUAL
76123: PUSH
76124: LD_VAR 0 4
76128: PUSH
76129: LD_VAR 0 1
76133: PPUSH
76134: CALL_OW 437
76138: PUSH
76139: LD_INT 1
76141: ARRAY
76142: PUSH
76143: LD_INT 2
76145: ARRAY
76146: EQUAL
76147: AND
76148: PUSH
76149: LD_VAR 0 5
76153: PUSH
76154: LD_VAR 0 1
76158: PPUSH
76159: CALL_OW 437
76163: PUSH
76164: LD_INT 1
76166: ARRAY
76167: PUSH
76168: LD_INT 3
76170: ARRAY
76171: EQUAL
76172: AND
76173: IFFALSE 76183
// result := true end ;
76175: LD_ADDR_VAR 0 3
76179: PUSH
76180: LD_INT 1
76182: ST_TO_ADDR
// end ;
76183: LD_VAR 0 3
76187: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76188: LD_INT 0
76190: PPUSH
// result := false ;
76191: LD_ADDR_VAR 0 4
76195: PUSH
76196: LD_INT 0
76198: ST_TO_ADDR
// if GetTaskList ( unit ) then
76199: LD_VAR 0 1
76203: PPUSH
76204: CALL_OW 437
76208: IFFALSE 76291
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76210: LD_STRING M
76212: PUSH
76213: LD_VAR 0 1
76217: PPUSH
76218: CALL_OW 437
76222: PUSH
76223: LD_INT 1
76225: ARRAY
76226: PUSH
76227: LD_INT 1
76229: ARRAY
76230: EQUAL
76231: PUSH
76232: LD_VAR 0 2
76236: PUSH
76237: LD_VAR 0 1
76241: PPUSH
76242: CALL_OW 437
76246: PUSH
76247: LD_INT 1
76249: ARRAY
76250: PUSH
76251: LD_INT 2
76253: ARRAY
76254: EQUAL
76255: AND
76256: PUSH
76257: LD_VAR 0 3
76261: PUSH
76262: LD_VAR 0 1
76266: PPUSH
76267: CALL_OW 437
76271: PUSH
76272: LD_INT 1
76274: ARRAY
76275: PUSH
76276: LD_INT 3
76278: ARRAY
76279: EQUAL
76280: AND
76281: IFFALSE 76291
// result := true ;
76283: LD_ADDR_VAR 0 4
76287: PUSH
76288: LD_INT 1
76290: ST_TO_ADDR
// end ; end ;
76291: LD_VAR 0 4
76295: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76296: LD_INT 0
76298: PPUSH
76299: PPUSH
76300: PPUSH
76301: PPUSH
// if not unit or not area then
76302: LD_VAR 0 1
76306: NOT
76307: PUSH
76308: LD_VAR 0 2
76312: NOT
76313: OR
76314: IFFALSE 76318
// exit ;
76316: GO 76482
// tmp := AreaToList ( area , i ) ;
76318: LD_ADDR_VAR 0 6
76322: PUSH
76323: LD_VAR 0 2
76327: PPUSH
76328: LD_VAR 0 5
76332: PPUSH
76333: CALL_OW 517
76337: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76338: LD_ADDR_VAR 0 5
76342: PUSH
76343: DOUBLE
76344: LD_INT 1
76346: DEC
76347: ST_TO_ADDR
76348: LD_VAR 0 6
76352: PUSH
76353: LD_INT 1
76355: ARRAY
76356: PUSH
76357: FOR_TO
76358: IFFALSE 76480
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76360: LD_ADDR_VAR 0 7
76364: PUSH
76365: LD_VAR 0 6
76369: PUSH
76370: LD_INT 1
76372: ARRAY
76373: PUSH
76374: LD_VAR 0 5
76378: ARRAY
76379: PUSH
76380: LD_VAR 0 6
76384: PUSH
76385: LD_INT 2
76387: ARRAY
76388: PUSH
76389: LD_VAR 0 5
76393: ARRAY
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76399: LD_VAR 0 7
76403: PUSH
76404: LD_INT 1
76406: ARRAY
76407: PPUSH
76408: LD_VAR 0 7
76412: PUSH
76413: LD_INT 2
76415: ARRAY
76416: PPUSH
76417: CALL_OW 428
76421: PUSH
76422: LD_INT 0
76424: EQUAL
76425: IFFALSE 76478
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76427: LD_VAR 0 1
76431: PPUSH
76432: LD_VAR 0 7
76436: PUSH
76437: LD_INT 1
76439: ARRAY
76440: PPUSH
76441: LD_VAR 0 7
76445: PUSH
76446: LD_INT 2
76448: ARRAY
76449: PPUSH
76450: LD_VAR 0 3
76454: PPUSH
76455: CALL_OW 48
// result := IsPlaced ( unit ) ;
76459: LD_ADDR_VAR 0 4
76463: PUSH
76464: LD_VAR 0 1
76468: PPUSH
76469: CALL_OW 305
76473: ST_TO_ADDR
// exit ;
76474: POP
76475: POP
76476: GO 76482
// end ; end ;
76478: GO 76357
76480: POP
76481: POP
// end ;
76482: LD_VAR 0 4
76486: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76487: LD_INT 0
76489: PPUSH
76490: PPUSH
76491: PPUSH
// if not side or side > 8 then
76492: LD_VAR 0 1
76496: NOT
76497: PUSH
76498: LD_VAR 0 1
76502: PUSH
76503: LD_INT 8
76505: GREATER
76506: OR
76507: IFFALSE 76511
// exit ;
76509: GO 76698
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76511: LD_ADDR_VAR 0 4
76515: PUSH
76516: LD_INT 22
76518: PUSH
76519: LD_VAR 0 1
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: LD_INT 21
76530: PUSH
76531: LD_INT 3
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: PPUSH
76542: CALL_OW 69
76546: ST_TO_ADDR
// if not tmp then
76547: LD_VAR 0 4
76551: NOT
76552: IFFALSE 76556
// exit ;
76554: GO 76698
// enable_addtolog := true ;
76556: LD_ADDR_OWVAR 81
76560: PUSH
76561: LD_INT 1
76563: ST_TO_ADDR
// AddToLog ( [ ) ;
76564: LD_STRING [
76566: PPUSH
76567: CALL_OW 561
// for i in tmp do
76571: LD_ADDR_VAR 0 3
76575: PUSH
76576: LD_VAR 0 4
76580: PUSH
76581: FOR_IN
76582: IFFALSE 76689
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76584: LD_STRING [
76586: PUSH
76587: LD_VAR 0 3
76591: PPUSH
76592: CALL_OW 266
76596: STR
76597: PUSH
76598: LD_STRING , 
76600: STR
76601: PUSH
76602: LD_VAR 0 3
76606: PPUSH
76607: CALL_OW 250
76611: STR
76612: PUSH
76613: LD_STRING , 
76615: STR
76616: PUSH
76617: LD_VAR 0 3
76621: PPUSH
76622: CALL_OW 251
76626: STR
76627: PUSH
76628: LD_STRING , 
76630: STR
76631: PUSH
76632: LD_VAR 0 3
76636: PPUSH
76637: CALL_OW 254
76641: STR
76642: PUSH
76643: LD_STRING , 
76645: STR
76646: PUSH
76647: LD_VAR 0 3
76651: PPUSH
76652: LD_INT 1
76654: PPUSH
76655: CALL_OW 268
76659: STR
76660: PUSH
76661: LD_STRING , 
76663: STR
76664: PUSH
76665: LD_VAR 0 3
76669: PPUSH
76670: LD_INT 2
76672: PPUSH
76673: CALL_OW 268
76677: STR
76678: PUSH
76679: LD_STRING ],
76681: STR
76682: PPUSH
76683: CALL_OW 561
// end ;
76687: GO 76581
76689: POP
76690: POP
// AddToLog ( ]; ) ;
76691: LD_STRING ];
76693: PPUSH
76694: CALL_OW 561
// end ;
76698: LD_VAR 0 2
76702: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76703: LD_INT 0
76705: PPUSH
76706: PPUSH
76707: PPUSH
76708: PPUSH
76709: PPUSH
// if not area or not rate or not max then
76710: LD_VAR 0 1
76714: NOT
76715: PUSH
76716: LD_VAR 0 2
76720: NOT
76721: OR
76722: PUSH
76723: LD_VAR 0 4
76727: NOT
76728: OR
76729: IFFALSE 76733
// exit ;
76731: GO 76922
// while 1 do
76733: LD_INT 1
76735: IFFALSE 76922
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76737: LD_ADDR_VAR 0 9
76741: PUSH
76742: LD_VAR 0 1
76746: PPUSH
76747: LD_INT 1
76749: PPUSH
76750: CALL_OW 287
76754: PUSH
76755: LD_INT 10
76757: MUL
76758: ST_TO_ADDR
// r := rate / 10 ;
76759: LD_ADDR_VAR 0 7
76763: PUSH
76764: LD_VAR 0 2
76768: PUSH
76769: LD_INT 10
76771: DIVREAL
76772: ST_TO_ADDR
// time := 1 1$00 ;
76773: LD_ADDR_VAR 0 8
76777: PUSH
76778: LD_INT 2100
76780: ST_TO_ADDR
// if amount < min then
76781: LD_VAR 0 9
76785: PUSH
76786: LD_VAR 0 3
76790: LESS
76791: IFFALSE 76809
// r := r * 2 else
76793: LD_ADDR_VAR 0 7
76797: PUSH
76798: LD_VAR 0 7
76802: PUSH
76803: LD_INT 2
76805: MUL
76806: ST_TO_ADDR
76807: GO 76835
// if amount > max then
76809: LD_VAR 0 9
76813: PUSH
76814: LD_VAR 0 4
76818: GREATER
76819: IFFALSE 76835
// r := r / 2 ;
76821: LD_ADDR_VAR 0 7
76825: PUSH
76826: LD_VAR 0 7
76830: PUSH
76831: LD_INT 2
76833: DIVREAL
76834: ST_TO_ADDR
// time := time / r ;
76835: LD_ADDR_VAR 0 8
76839: PUSH
76840: LD_VAR 0 8
76844: PUSH
76845: LD_VAR 0 7
76849: DIVREAL
76850: ST_TO_ADDR
// if time < 0 then
76851: LD_VAR 0 8
76855: PUSH
76856: LD_INT 0
76858: LESS
76859: IFFALSE 76876
// time := time * - 1 ;
76861: LD_ADDR_VAR 0 8
76865: PUSH
76866: LD_VAR 0 8
76870: PUSH
76871: LD_INT 1
76873: NEG
76874: MUL
76875: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76876: LD_VAR 0 8
76880: PUSH
76881: LD_INT 35
76883: PPUSH
76884: LD_INT 875
76886: PPUSH
76887: CALL_OW 12
76891: PLUS
76892: PPUSH
76893: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76897: LD_INT 1
76899: PPUSH
76900: LD_INT 5
76902: PPUSH
76903: CALL_OW 12
76907: PPUSH
76908: LD_VAR 0 1
76912: PPUSH
76913: LD_INT 1
76915: PPUSH
76916: CALL_OW 55
// end ;
76920: GO 76733
// end ;
76922: LD_VAR 0 5
76926: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76927: LD_INT 0
76929: PPUSH
76930: PPUSH
76931: PPUSH
76932: PPUSH
76933: PPUSH
76934: PPUSH
76935: PPUSH
76936: PPUSH
// if not turrets or not factories then
76937: LD_VAR 0 1
76941: NOT
76942: PUSH
76943: LD_VAR 0 2
76947: NOT
76948: OR
76949: IFFALSE 76953
// exit ;
76951: GO 77260
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76953: LD_ADDR_VAR 0 10
76957: PUSH
76958: LD_INT 5
76960: PUSH
76961: LD_INT 6
76963: PUSH
76964: EMPTY
76965: LIST
76966: LIST
76967: PUSH
76968: LD_INT 2
76970: PUSH
76971: LD_INT 4
76973: PUSH
76974: EMPTY
76975: LIST
76976: LIST
76977: PUSH
76978: LD_INT 3
76980: PUSH
76981: LD_INT 5
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: LIST
76992: PUSH
76993: LD_INT 24
76995: PUSH
76996: LD_INT 25
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: PUSH
77003: LD_INT 23
77005: PUSH
77006: LD_INT 27
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: LD_INT 42
77019: PUSH
77020: LD_INT 43
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: PUSH
77027: LD_INT 44
77029: PUSH
77030: LD_INT 46
77032: PUSH
77033: EMPTY
77034: LIST
77035: LIST
77036: PUSH
77037: LD_INT 45
77039: PUSH
77040: LD_INT 47
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: PUSH
77047: EMPTY
77048: LIST
77049: LIST
77050: LIST
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: LIST
77056: ST_TO_ADDR
// result := [ ] ;
77057: LD_ADDR_VAR 0 3
77061: PUSH
77062: EMPTY
77063: ST_TO_ADDR
// for i in turrets do
77064: LD_ADDR_VAR 0 4
77068: PUSH
77069: LD_VAR 0 1
77073: PUSH
77074: FOR_IN
77075: IFFALSE 77258
// begin nat := GetNation ( i ) ;
77077: LD_ADDR_VAR 0 7
77081: PUSH
77082: LD_VAR 0 4
77086: PPUSH
77087: CALL_OW 248
77091: ST_TO_ADDR
// weapon := 0 ;
77092: LD_ADDR_VAR 0 8
77096: PUSH
77097: LD_INT 0
77099: ST_TO_ADDR
// if not nat then
77100: LD_VAR 0 7
77104: NOT
77105: IFFALSE 77109
// continue ;
77107: GO 77074
// for j in list [ nat ] do
77109: LD_ADDR_VAR 0 5
77113: PUSH
77114: LD_VAR 0 10
77118: PUSH
77119: LD_VAR 0 7
77123: ARRAY
77124: PUSH
77125: FOR_IN
77126: IFFALSE 77167
// if GetBWeapon ( i ) = j [ 1 ] then
77128: LD_VAR 0 4
77132: PPUSH
77133: CALL_OW 269
77137: PUSH
77138: LD_VAR 0 5
77142: PUSH
77143: LD_INT 1
77145: ARRAY
77146: EQUAL
77147: IFFALSE 77165
// begin weapon := j [ 2 ] ;
77149: LD_ADDR_VAR 0 8
77153: PUSH
77154: LD_VAR 0 5
77158: PUSH
77159: LD_INT 2
77161: ARRAY
77162: ST_TO_ADDR
// break ;
77163: GO 77167
// end ;
77165: GO 77125
77167: POP
77168: POP
// if not weapon then
77169: LD_VAR 0 8
77173: NOT
77174: IFFALSE 77178
// continue ;
77176: GO 77074
// for k in factories do
77178: LD_ADDR_VAR 0 6
77182: PUSH
77183: LD_VAR 0 2
77187: PUSH
77188: FOR_IN
77189: IFFALSE 77254
// begin weapons := AvailableWeaponList ( k ) ;
77191: LD_ADDR_VAR 0 9
77195: PUSH
77196: LD_VAR 0 6
77200: PPUSH
77201: CALL_OW 478
77205: ST_TO_ADDR
// if not weapons then
77206: LD_VAR 0 9
77210: NOT
77211: IFFALSE 77215
// continue ;
77213: GO 77188
// if weapon in weapons then
77215: LD_VAR 0 8
77219: PUSH
77220: LD_VAR 0 9
77224: IN
77225: IFFALSE 77252
// begin result := [ i , weapon ] ;
77227: LD_ADDR_VAR 0 3
77231: PUSH
77232: LD_VAR 0 4
77236: PUSH
77237: LD_VAR 0 8
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: ST_TO_ADDR
// exit ;
77246: POP
77247: POP
77248: POP
77249: POP
77250: GO 77260
// end ; end ;
77252: GO 77188
77254: POP
77255: POP
// end ;
77256: GO 77074
77258: POP
77259: POP
// end ;
77260: LD_VAR 0 3
77264: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77265: LD_INT 0
77267: PPUSH
// if not side or side > 8 then
77268: LD_VAR 0 3
77272: NOT
77273: PUSH
77274: LD_VAR 0 3
77278: PUSH
77279: LD_INT 8
77281: GREATER
77282: OR
77283: IFFALSE 77287
// exit ;
77285: GO 77346
// if not range then
77287: LD_VAR 0 4
77291: NOT
77292: IFFALSE 77303
// range := - 12 ;
77294: LD_ADDR_VAR 0 4
77298: PUSH
77299: LD_INT 12
77301: NEG
77302: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77303: LD_VAR 0 1
77307: PPUSH
77308: LD_VAR 0 2
77312: PPUSH
77313: LD_VAR 0 3
77317: PPUSH
77318: LD_VAR 0 4
77322: PPUSH
77323: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77327: LD_VAR 0 1
77331: PPUSH
77332: LD_VAR 0 2
77336: PPUSH
77337: LD_VAR 0 3
77341: PPUSH
77342: CALL_OW 331
// end ;
77346: LD_VAR 0 5
77350: RET
// export function Video ( mode ) ; begin
77351: LD_INT 0
77353: PPUSH
// ingame_video = mode ;
77354: LD_ADDR_OWVAR 52
77358: PUSH
77359: LD_VAR 0 1
77363: ST_TO_ADDR
// interface_hidden = mode ;
77364: LD_ADDR_OWVAR 54
77368: PUSH
77369: LD_VAR 0 1
77373: ST_TO_ADDR
// end ;
77374: LD_VAR 0 2
77378: RET
// export function Join ( array , element ) ; begin
77379: LD_INT 0
77381: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77382: LD_ADDR_VAR 0 3
77386: PUSH
77387: LD_VAR 0 1
77391: PPUSH
77392: LD_VAR 0 1
77396: PUSH
77397: LD_INT 1
77399: PLUS
77400: PPUSH
77401: LD_VAR 0 2
77405: PPUSH
77406: CALL_OW 1
77410: ST_TO_ADDR
// end ;
77411: LD_VAR 0 3
77415: RET
// export function JoinUnion ( array , element ) ; begin
77416: LD_INT 0
77418: PPUSH
// result := array union element ;
77419: LD_ADDR_VAR 0 3
77423: PUSH
77424: LD_VAR 0 1
77428: PUSH
77429: LD_VAR 0 2
77433: UNION
77434: ST_TO_ADDR
// end ;
77435: LD_VAR 0 3
77439: RET
// export function GetBehemoths ( side ) ; begin
77440: LD_INT 0
77442: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77443: LD_ADDR_VAR 0 2
77447: PUSH
77448: LD_INT 22
77450: PUSH
77451: LD_VAR 0 1
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: PUSH
77460: LD_INT 31
77462: PUSH
77463: LD_INT 25
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PPUSH
77474: CALL_OW 69
77478: ST_TO_ADDR
// end ;
77479: LD_VAR 0 2
77483: RET
// export function Shuffle ( array ) ; var i , index ; begin
77484: LD_INT 0
77486: PPUSH
77487: PPUSH
77488: PPUSH
// result := [ ] ;
77489: LD_ADDR_VAR 0 2
77493: PUSH
77494: EMPTY
77495: ST_TO_ADDR
// if not array then
77496: LD_VAR 0 1
77500: NOT
77501: IFFALSE 77505
// exit ;
77503: GO 77604
// Randomize ;
77505: CALL_OW 10
// for i = array downto 1 do
77509: LD_ADDR_VAR 0 3
77513: PUSH
77514: DOUBLE
77515: LD_VAR 0 1
77519: INC
77520: ST_TO_ADDR
77521: LD_INT 1
77523: PUSH
77524: FOR_DOWNTO
77525: IFFALSE 77602
// begin index := rand ( 1 , array ) ;
77527: LD_ADDR_VAR 0 4
77531: PUSH
77532: LD_INT 1
77534: PPUSH
77535: LD_VAR 0 1
77539: PPUSH
77540: CALL_OW 12
77544: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77545: LD_ADDR_VAR 0 2
77549: PUSH
77550: LD_VAR 0 2
77554: PPUSH
77555: LD_VAR 0 2
77559: PUSH
77560: LD_INT 1
77562: PLUS
77563: PPUSH
77564: LD_VAR 0 1
77568: PUSH
77569: LD_VAR 0 4
77573: ARRAY
77574: PPUSH
77575: CALL_OW 2
77579: ST_TO_ADDR
// array := Delete ( array , index ) ;
77580: LD_ADDR_VAR 0 1
77584: PUSH
77585: LD_VAR 0 1
77589: PPUSH
77590: LD_VAR 0 4
77594: PPUSH
77595: CALL_OW 3
77599: ST_TO_ADDR
// end ;
77600: GO 77524
77602: POP
77603: POP
// end ;
77604: LD_VAR 0 2
77608: RET
// export function GetBaseMaterials ( base ) ; begin
77609: LD_INT 0
77611: PPUSH
// result := [ 0 , 0 , 0 ] ;
77612: LD_ADDR_VAR 0 2
77616: PUSH
77617: LD_INT 0
77619: PUSH
77620: LD_INT 0
77622: PUSH
77623: LD_INT 0
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: LIST
77630: ST_TO_ADDR
// if not base then
77631: LD_VAR 0 1
77635: NOT
77636: IFFALSE 77640
// exit ;
77638: GO 77689
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77640: LD_ADDR_VAR 0 2
77644: PUSH
77645: LD_VAR 0 1
77649: PPUSH
77650: LD_INT 1
77652: PPUSH
77653: CALL_OW 275
77657: PUSH
77658: LD_VAR 0 1
77662: PPUSH
77663: LD_INT 2
77665: PPUSH
77666: CALL_OW 275
77670: PUSH
77671: LD_VAR 0 1
77675: PPUSH
77676: LD_INT 3
77678: PPUSH
77679: CALL_OW 275
77683: PUSH
77684: EMPTY
77685: LIST
77686: LIST
77687: LIST
77688: ST_TO_ADDR
// end ;
77689: LD_VAR 0 2
77693: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77694: LD_INT 0
77696: PPUSH
77697: PPUSH
// result := array ;
77698: LD_ADDR_VAR 0 3
77702: PUSH
77703: LD_VAR 0 1
77707: ST_TO_ADDR
// if size >= result then
77708: LD_VAR 0 2
77712: PUSH
77713: LD_VAR 0 3
77717: GREATEREQUAL
77718: IFFALSE 77722
// exit ;
77720: GO 77772
// if size then
77722: LD_VAR 0 2
77726: IFFALSE 77772
// for i := array downto size do
77728: LD_ADDR_VAR 0 4
77732: PUSH
77733: DOUBLE
77734: LD_VAR 0 1
77738: INC
77739: ST_TO_ADDR
77740: LD_VAR 0 2
77744: PUSH
77745: FOR_DOWNTO
77746: IFFALSE 77770
// result := Delete ( result , result ) ;
77748: LD_ADDR_VAR 0 3
77752: PUSH
77753: LD_VAR 0 3
77757: PPUSH
77758: LD_VAR 0 3
77762: PPUSH
77763: CALL_OW 3
77767: ST_TO_ADDR
77768: GO 77745
77770: POP
77771: POP
// end ;
77772: LD_VAR 0 3
77776: RET
// export function ComExit ( unit ) ; var tmp ; begin
77777: LD_INT 0
77779: PPUSH
77780: PPUSH
// if not IsInUnit ( unit ) then
77781: LD_VAR 0 1
77785: PPUSH
77786: CALL_OW 310
77790: NOT
77791: IFFALSE 77795
// exit ;
77793: GO 77855
// tmp := IsInUnit ( unit ) ;
77795: LD_ADDR_VAR 0 3
77799: PUSH
77800: LD_VAR 0 1
77804: PPUSH
77805: CALL_OW 310
77809: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77810: LD_VAR 0 3
77814: PPUSH
77815: CALL_OW 247
77819: PUSH
77820: LD_INT 2
77822: EQUAL
77823: IFFALSE 77836
// ComExitVehicle ( unit ) else
77825: LD_VAR 0 1
77829: PPUSH
77830: CALL_OW 121
77834: GO 77845
// ComExitBuilding ( unit ) ;
77836: LD_VAR 0 1
77840: PPUSH
77841: CALL_OW 122
// result := tmp ;
77845: LD_ADDR_VAR 0 2
77849: PUSH
77850: LD_VAR 0 3
77854: ST_TO_ADDR
// end ;
77855: LD_VAR 0 2
77859: RET
// export function ComExitAll ( units ) ; var i ; begin
77860: LD_INT 0
77862: PPUSH
77863: PPUSH
// if not units then
77864: LD_VAR 0 1
77868: NOT
77869: IFFALSE 77873
// exit ;
77871: GO 77899
// for i in units do
77873: LD_ADDR_VAR 0 3
77877: PUSH
77878: LD_VAR 0 1
77882: PUSH
77883: FOR_IN
77884: IFFALSE 77897
// ComExit ( i ) ;
77886: LD_VAR 0 3
77890: PPUSH
77891: CALL 77777 0 1
77895: GO 77883
77897: POP
77898: POP
// end ;
77899: LD_VAR 0 2
77903: RET
// export function ResetHc ; begin
77904: LD_INT 0
77906: PPUSH
// InitHc ;
77907: CALL_OW 19
// hc_importance := 0 ;
77911: LD_ADDR_OWVAR 32
77915: PUSH
77916: LD_INT 0
77918: ST_TO_ADDR
// end ;
77919: LD_VAR 0 1
77923: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77924: LD_INT 0
77926: PPUSH
77927: PPUSH
77928: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77929: LD_ADDR_VAR 0 6
77933: PUSH
77934: LD_VAR 0 1
77938: PUSH
77939: LD_VAR 0 3
77943: PLUS
77944: PUSH
77945: LD_INT 2
77947: DIV
77948: ST_TO_ADDR
// if _x < 0 then
77949: LD_VAR 0 6
77953: PUSH
77954: LD_INT 0
77956: LESS
77957: IFFALSE 77974
// _x := _x * - 1 ;
77959: LD_ADDR_VAR 0 6
77963: PUSH
77964: LD_VAR 0 6
77968: PUSH
77969: LD_INT 1
77971: NEG
77972: MUL
77973: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77974: LD_ADDR_VAR 0 7
77978: PUSH
77979: LD_VAR 0 2
77983: PUSH
77984: LD_VAR 0 4
77988: PLUS
77989: PUSH
77990: LD_INT 2
77992: DIV
77993: ST_TO_ADDR
// if _y < 0 then
77994: LD_VAR 0 7
77998: PUSH
77999: LD_INT 0
78001: LESS
78002: IFFALSE 78019
// _y := _y * - 1 ;
78004: LD_ADDR_VAR 0 7
78008: PUSH
78009: LD_VAR 0 7
78013: PUSH
78014: LD_INT 1
78016: NEG
78017: MUL
78018: ST_TO_ADDR
// result := [ _x , _y ] ;
78019: LD_ADDR_VAR 0 5
78023: PUSH
78024: LD_VAR 0 6
78028: PUSH
78029: LD_VAR 0 7
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: ST_TO_ADDR
// end ;
78038: LD_VAR 0 5
78042: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78043: LD_INT 0
78045: PPUSH
78046: PPUSH
78047: PPUSH
78048: PPUSH
// task := GetTaskList ( unit ) ;
78049: LD_ADDR_VAR 0 7
78053: PUSH
78054: LD_VAR 0 1
78058: PPUSH
78059: CALL_OW 437
78063: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78064: LD_VAR 0 7
78068: NOT
78069: PUSH
78070: LD_VAR 0 1
78074: PPUSH
78075: LD_VAR 0 2
78079: PPUSH
78080: CALL_OW 308
78084: NOT
78085: AND
78086: IFFALSE 78090
// exit ;
78088: GO 78208
// if IsInArea ( unit , area ) then
78090: LD_VAR 0 1
78094: PPUSH
78095: LD_VAR 0 2
78099: PPUSH
78100: CALL_OW 308
78104: IFFALSE 78122
// begin ComMoveToArea ( unit , goAway ) ;
78106: LD_VAR 0 1
78110: PPUSH
78111: LD_VAR 0 3
78115: PPUSH
78116: CALL_OW 113
// exit ;
78120: GO 78208
// end ; if task [ 1 ] [ 1 ] <> M then
78122: LD_VAR 0 7
78126: PUSH
78127: LD_INT 1
78129: ARRAY
78130: PUSH
78131: LD_INT 1
78133: ARRAY
78134: PUSH
78135: LD_STRING M
78137: NONEQUAL
78138: IFFALSE 78142
// exit ;
78140: GO 78208
// x := task [ 1 ] [ 2 ] ;
78142: LD_ADDR_VAR 0 5
78146: PUSH
78147: LD_VAR 0 7
78151: PUSH
78152: LD_INT 1
78154: ARRAY
78155: PUSH
78156: LD_INT 2
78158: ARRAY
78159: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78160: LD_ADDR_VAR 0 6
78164: PUSH
78165: LD_VAR 0 7
78169: PUSH
78170: LD_INT 1
78172: ARRAY
78173: PUSH
78174: LD_INT 3
78176: ARRAY
78177: ST_TO_ADDR
// if InArea ( x , y , area ) then
78178: LD_VAR 0 5
78182: PPUSH
78183: LD_VAR 0 6
78187: PPUSH
78188: LD_VAR 0 2
78192: PPUSH
78193: CALL_OW 309
78197: IFFALSE 78208
// ComStop ( unit ) ;
78199: LD_VAR 0 1
78203: PPUSH
78204: CALL_OW 141
// end ;
78208: LD_VAR 0 4
78212: RET
// export function Abs ( value ) ; begin
78213: LD_INT 0
78215: PPUSH
// result := value ;
78216: LD_ADDR_VAR 0 2
78220: PUSH
78221: LD_VAR 0 1
78225: ST_TO_ADDR
// if value < 0 then
78226: LD_VAR 0 1
78230: PUSH
78231: LD_INT 0
78233: LESS
78234: IFFALSE 78251
// result := value * - 1 ;
78236: LD_ADDR_VAR 0 2
78240: PUSH
78241: LD_VAR 0 1
78245: PUSH
78246: LD_INT 1
78248: NEG
78249: MUL
78250: ST_TO_ADDR
// end ;
78251: LD_VAR 0 2
78255: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78256: LD_INT 0
78258: PPUSH
78259: PPUSH
78260: PPUSH
78261: PPUSH
78262: PPUSH
78263: PPUSH
78264: PPUSH
78265: PPUSH
// if not unit or not building then
78266: LD_VAR 0 1
78270: NOT
78271: PUSH
78272: LD_VAR 0 2
78276: NOT
78277: OR
78278: IFFALSE 78282
// exit ;
78280: GO 78508
// x := GetX ( building ) ;
78282: LD_ADDR_VAR 0 4
78286: PUSH
78287: LD_VAR 0 2
78291: PPUSH
78292: CALL_OW 250
78296: ST_TO_ADDR
// y := GetY ( building ) ;
78297: LD_ADDR_VAR 0 6
78301: PUSH
78302: LD_VAR 0 2
78306: PPUSH
78307: CALL_OW 251
78311: ST_TO_ADDR
// d := GetDir ( building ) ;
78312: LD_ADDR_VAR 0 8
78316: PUSH
78317: LD_VAR 0 2
78321: PPUSH
78322: CALL_OW 254
78326: ST_TO_ADDR
// r := 4 ;
78327: LD_ADDR_VAR 0 9
78331: PUSH
78332: LD_INT 4
78334: ST_TO_ADDR
// for i := 1 to 5 do
78335: LD_ADDR_VAR 0 10
78339: PUSH
78340: DOUBLE
78341: LD_INT 1
78343: DEC
78344: ST_TO_ADDR
78345: LD_INT 5
78347: PUSH
78348: FOR_TO
78349: IFFALSE 78506
// begin _x := ShiftX ( x , d , r + i ) ;
78351: LD_ADDR_VAR 0 5
78355: PUSH
78356: LD_VAR 0 4
78360: PPUSH
78361: LD_VAR 0 8
78365: PPUSH
78366: LD_VAR 0 9
78370: PUSH
78371: LD_VAR 0 10
78375: PLUS
78376: PPUSH
78377: CALL_OW 272
78381: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78382: LD_ADDR_VAR 0 7
78386: PUSH
78387: LD_VAR 0 6
78391: PPUSH
78392: LD_VAR 0 8
78396: PPUSH
78397: LD_VAR 0 9
78401: PUSH
78402: LD_VAR 0 10
78406: PLUS
78407: PPUSH
78408: CALL_OW 273
78412: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78413: LD_VAR 0 5
78417: PPUSH
78418: LD_VAR 0 7
78422: PPUSH
78423: CALL_OW 488
78427: PUSH
78428: LD_VAR 0 5
78432: PPUSH
78433: LD_VAR 0 7
78437: PPUSH
78438: CALL_OW 428
78442: PPUSH
78443: CALL_OW 247
78447: PUSH
78448: LD_INT 3
78450: PUSH
78451: LD_INT 2
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: IN
78458: NOT
78459: AND
78460: IFFALSE 78504
// begin ComMoveXY ( unit , _x , _y ) ;
78462: LD_VAR 0 1
78466: PPUSH
78467: LD_VAR 0 5
78471: PPUSH
78472: LD_VAR 0 7
78476: PPUSH
78477: CALL_OW 111
// result := [ _x , _y ] ;
78481: LD_ADDR_VAR 0 3
78485: PUSH
78486: LD_VAR 0 5
78490: PUSH
78491: LD_VAR 0 7
78495: PUSH
78496: EMPTY
78497: LIST
78498: LIST
78499: ST_TO_ADDR
// exit ;
78500: POP
78501: POP
78502: GO 78508
// end ; end ;
78504: GO 78348
78506: POP
78507: POP
// end ;
78508: LD_VAR 0 3
78512: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78513: LD_INT 0
78515: PPUSH
78516: PPUSH
78517: PPUSH
// result := 0 ;
78518: LD_ADDR_VAR 0 3
78522: PUSH
78523: LD_INT 0
78525: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78526: LD_VAR 0 1
78530: PUSH
78531: LD_INT 0
78533: LESS
78534: PUSH
78535: LD_VAR 0 1
78539: PUSH
78540: LD_INT 8
78542: GREATER
78543: OR
78544: PUSH
78545: LD_VAR 0 2
78549: PUSH
78550: LD_INT 0
78552: LESS
78553: OR
78554: PUSH
78555: LD_VAR 0 2
78559: PUSH
78560: LD_INT 8
78562: GREATER
78563: OR
78564: IFFALSE 78568
// exit ;
78566: GO 78643
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78568: LD_ADDR_VAR 0 4
78572: PUSH
78573: LD_INT 22
78575: PUSH
78576: LD_VAR 0 2
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: PPUSH
78585: CALL_OW 69
78589: PUSH
78590: FOR_IN
78591: IFFALSE 78641
// begin un := UnitShoot ( i ) ;
78593: LD_ADDR_VAR 0 5
78597: PUSH
78598: LD_VAR 0 4
78602: PPUSH
78603: CALL_OW 504
78607: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78608: LD_VAR 0 5
78612: PPUSH
78613: CALL_OW 255
78617: PUSH
78618: LD_VAR 0 1
78622: EQUAL
78623: IFFALSE 78639
// begin result := un ;
78625: LD_ADDR_VAR 0 3
78629: PUSH
78630: LD_VAR 0 5
78634: ST_TO_ADDR
// exit ;
78635: POP
78636: POP
78637: GO 78643
// end ; end ;
78639: GO 78590
78641: POP
78642: POP
// end ;
78643: LD_VAR 0 3
78647: RET
// export function GetCargoBay ( units ) ; begin
78648: LD_INT 0
78650: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78651: LD_ADDR_VAR 0 2
78655: PUSH
78656: LD_VAR 0 1
78660: PPUSH
78661: LD_INT 2
78663: PUSH
78664: LD_INT 34
78666: PUSH
78667: LD_INT 12
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: PUSH
78674: LD_INT 34
78676: PUSH
78677: LD_INT 51
78679: PUSH
78680: EMPTY
78681: LIST
78682: LIST
78683: PUSH
78684: LD_INT 34
78686: PUSH
78687: LD_INT 32
78689: PUSH
78690: EMPTY
78691: LIST
78692: LIST
78693: PUSH
78694: LD_INT 34
78696: PUSH
78697: LD_INT 89
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: PPUSH
78711: CALL_OW 72
78715: ST_TO_ADDR
// end ;
78716: LD_VAR 0 2
78720: RET
// export function Negate ( value ) ; begin
78721: LD_INT 0
78723: PPUSH
// result := not value ;
78724: LD_ADDR_VAR 0 2
78728: PUSH
78729: LD_VAR 0 1
78733: NOT
78734: ST_TO_ADDR
// end ;
78735: LD_VAR 0 2
78739: RET
// export function Inc ( value ) ; begin
78740: LD_INT 0
78742: PPUSH
// result := value + 1 ;
78743: LD_ADDR_VAR 0 2
78747: PUSH
78748: LD_VAR 0 1
78752: PUSH
78753: LD_INT 1
78755: PLUS
78756: ST_TO_ADDR
// end ;
78757: LD_VAR 0 2
78761: RET
// export function Dec ( value ) ; begin
78762: LD_INT 0
78764: PPUSH
// result := value - 1 ;
78765: LD_ADDR_VAR 0 2
78769: PUSH
78770: LD_VAR 0 1
78774: PUSH
78775: LD_INT 1
78777: MINUS
78778: ST_TO_ADDR
// end ;
78779: LD_VAR 0 2
78783: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78784: LD_INT 0
78786: PPUSH
78787: PPUSH
78788: PPUSH
78789: PPUSH
78790: PPUSH
78791: PPUSH
78792: PPUSH
78793: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78794: LD_VAR 0 1
78798: PPUSH
78799: LD_VAR 0 2
78803: PPUSH
78804: CALL_OW 488
78808: NOT
78809: PUSH
78810: LD_VAR 0 3
78814: PPUSH
78815: LD_VAR 0 4
78819: PPUSH
78820: CALL_OW 488
78824: NOT
78825: OR
78826: IFFALSE 78839
// begin result := - 1 ;
78828: LD_ADDR_VAR 0 5
78832: PUSH
78833: LD_INT 1
78835: NEG
78836: ST_TO_ADDR
// exit ;
78837: GO 79074
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78839: LD_ADDR_VAR 0 12
78843: PUSH
78844: LD_VAR 0 1
78848: PPUSH
78849: LD_VAR 0 2
78853: PPUSH
78854: LD_VAR 0 3
78858: PPUSH
78859: LD_VAR 0 4
78863: PPUSH
78864: CALL 77924 0 4
78868: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78869: LD_ADDR_VAR 0 11
78873: PUSH
78874: LD_VAR 0 1
78878: PPUSH
78879: LD_VAR 0 2
78883: PPUSH
78884: LD_VAR 0 12
78888: PUSH
78889: LD_INT 1
78891: ARRAY
78892: PPUSH
78893: LD_VAR 0 12
78897: PUSH
78898: LD_INT 2
78900: ARRAY
78901: PPUSH
78902: CALL_OW 298
78906: ST_TO_ADDR
// distance := 9999 ;
78907: LD_ADDR_VAR 0 10
78911: PUSH
78912: LD_INT 9999
78914: ST_TO_ADDR
// for i := 0 to 5 do
78915: LD_ADDR_VAR 0 6
78919: PUSH
78920: DOUBLE
78921: LD_INT 0
78923: DEC
78924: ST_TO_ADDR
78925: LD_INT 5
78927: PUSH
78928: FOR_TO
78929: IFFALSE 79072
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78931: LD_ADDR_VAR 0 7
78935: PUSH
78936: LD_VAR 0 1
78940: PPUSH
78941: LD_VAR 0 6
78945: PPUSH
78946: LD_VAR 0 11
78950: PPUSH
78951: CALL_OW 272
78955: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78956: LD_ADDR_VAR 0 8
78960: PUSH
78961: LD_VAR 0 2
78965: PPUSH
78966: LD_VAR 0 6
78970: PPUSH
78971: LD_VAR 0 11
78975: PPUSH
78976: CALL_OW 273
78980: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78981: LD_VAR 0 7
78985: PPUSH
78986: LD_VAR 0 8
78990: PPUSH
78991: CALL_OW 488
78995: NOT
78996: IFFALSE 79000
// continue ;
78998: GO 78928
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79000: LD_ADDR_VAR 0 9
79004: PUSH
79005: LD_VAR 0 12
79009: PUSH
79010: LD_INT 1
79012: ARRAY
79013: PPUSH
79014: LD_VAR 0 12
79018: PUSH
79019: LD_INT 2
79021: ARRAY
79022: PPUSH
79023: LD_VAR 0 7
79027: PPUSH
79028: LD_VAR 0 8
79032: PPUSH
79033: CALL_OW 298
79037: ST_TO_ADDR
// if tmp < distance then
79038: LD_VAR 0 9
79042: PUSH
79043: LD_VAR 0 10
79047: LESS
79048: IFFALSE 79070
// begin result := i ;
79050: LD_ADDR_VAR 0 5
79054: PUSH
79055: LD_VAR 0 6
79059: ST_TO_ADDR
// distance := tmp ;
79060: LD_ADDR_VAR 0 10
79064: PUSH
79065: LD_VAR 0 9
79069: ST_TO_ADDR
// end ; end ;
79070: GO 78928
79072: POP
79073: POP
// end ;
79074: LD_VAR 0 5
79078: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79079: LD_INT 0
79081: PPUSH
79082: PPUSH
// if not driver or not IsInUnit ( driver ) then
79083: LD_VAR 0 1
79087: NOT
79088: PUSH
79089: LD_VAR 0 1
79093: PPUSH
79094: CALL_OW 310
79098: NOT
79099: OR
79100: IFFALSE 79104
// exit ;
79102: GO 79194
// vehicle := IsInUnit ( driver ) ;
79104: LD_ADDR_VAR 0 3
79108: PUSH
79109: LD_VAR 0 1
79113: PPUSH
79114: CALL_OW 310
79118: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79119: LD_VAR 0 1
79123: PPUSH
79124: LD_STRING \
79126: PUSH
79127: LD_INT 0
79129: PUSH
79130: LD_INT 0
79132: PUSH
79133: LD_INT 0
79135: PUSH
79136: LD_INT 0
79138: PUSH
79139: LD_INT 0
79141: PUSH
79142: LD_INT 0
79144: PUSH
79145: EMPTY
79146: LIST
79147: LIST
79148: LIST
79149: LIST
79150: LIST
79151: LIST
79152: LIST
79153: PUSH
79154: LD_STRING E
79156: PUSH
79157: LD_INT 0
79159: PUSH
79160: LD_INT 0
79162: PUSH
79163: LD_VAR 0 3
79167: PUSH
79168: LD_INT 0
79170: PUSH
79171: LD_INT 0
79173: PUSH
79174: LD_INT 0
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: LIST
79184: LIST
79185: PUSH
79186: EMPTY
79187: LIST
79188: LIST
79189: PPUSH
79190: CALL_OW 446
// end ;
79194: LD_VAR 0 2
79198: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79199: LD_INT 0
79201: PPUSH
79202: PPUSH
// if not driver or not IsInUnit ( driver ) then
79203: LD_VAR 0 1
79207: NOT
79208: PUSH
79209: LD_VAR 0 1
79213: PPUSH
79214: CALL_OW 310
79218: NOT
79219: OR
79220: IFFALSE 79224
// exit ;
79222: GO 79314
// vehicle := IsInUnit ( driver ) ;
79224: LD_ADDR_VAR 0 3
79228: PUSH
79229: LD_VAR 0 1
79233: PPUSH
79234: CALL_OW 310
79238: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79239: LD_VAR 0 1
79243: PPUSH
79244: LD_STRING \
79246: PUSH
79247: LD_INT 0
79249: PUSH
79250: LD_INT 0
79252: PUSH
79253: LD_INT 0
79255: PUSH
79256: LD_INT 0
79258: PUSH
79259: LD_INT 0
79261: PUSH
79262: LD_INT 0
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: LIST
79269: LIST
79270: LIST
79271: LIST
79272: LIST
79273: PUSH
79274: LD_STRING E
79276: PUSH
79277: LD_INT 0
79279: PUSH
79280: LD_INT 0
79282: PUSH
79283: LD_VAR 0 3
79287: PUSH
79288: LD_INT 0
79290: PUSH
79291: LD_INT 0
79293: PUSH
79294: LD_INT 0
79296: PUSH
79297: EMPTY
79298: LIST
79299: LIST
79300: LIST
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: PUSH
79306: EMPTY
79307: LIST
79308: LIST
79309: PPUSH
79310: CALL_OW 447
// end ;
79314: LD_VAR 0 2
79318: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79319: LD_INT 0
79321: PPUSH
79322: PPUSH
79323: PPUSH
// tmp := [ ] ;
79324: LD_ADDR_VAR 0 5
79328: PUSH
79329: EMPTY
79330: ST_TO_ADDR
// for i in units do
79331: LD_ADDR_VAR 0 4
79335: PUSH
79336: LD_VAR 0 1
79340: PUSH
79341: FOR_IN
79342: IFFALSE 79380
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79344: LD_ADDR_VAR 0 5
79348: PUSH
79349: LD_VAR 0 5
79353: PPUSH
79354: LD_VAR 0 5
79358: PUSH
79359: LD_INT 1
79361: PLUS
79362: PPUSH
79363: LD_VAR 0 4
79367: PPUSH
79368: CALL_OW 256
79372: PPUSH
79373: CALL_OW 2
79377: ST_TO_ADDR
79378: GO 79341
79380: POP
79381: POP
// if not tmp then
79382: LD_VAR 0 5
79386: NOT
79387: IFFALSE 79391
// exit ;
79389: GO 79439
// if asc then
79391: LD_VAR 0 2
79395: IFFALSE 79419
// result := SortListByListAsc ( units , tmp ) else
79397: LD_ADDR_VAR 0 3
79401: PUSH
79402: LD_VAR 0 1
79406: PPUSH
79407: LD_VAR 0 5
79411: PPUSH
79412: CALL_OW 76
79416: ST_TO_ADDR
79417: GO 79439
// result := SortListByListDesc ( units , tmp ) ;
79419: LD_ADDR_VAR 0 3
79423: PUSH
79424: LD_VAR 0 1
79428: PPUSH
79429: LD_VAR 0 5
79433: PPUSH
79434: CALL_OW 77
79438: ST_TO_ADDR
// end ;
79439: LD_VAR 0 3
79443: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79444: LD_INT 0
79446: PPUSH
79447: PPUSH
// task := GetTaskList ( mech ) ;
79448: LD_ADDR_VAR 0 4
79452: PUSH
79453: LD_VAR 0 1
79457: PPUSH
79458: CALL_OW 437
79462: ST_TO_ADDR
// if not task then
79463: LD_VAR 0 4
79467: NOT
79468: IFFALSE 79472
// exit ;
79470: GO 79514
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79472: LD_ADDR_VAR 0 3
79476: PUSH
79477: LD_VAR 0 4
79481: PUSH
79482: LD_INT 1
79484: ARRAY
79485: PUSH
79486: LD_INT 1
79488: ARRAY
79489: PUSH
79490: LD_STRING r
79492: EQUAL
79493: PUSH
79494: LD_VAR 0 4
79498: PUSH
79499: LD_INT 1
79501: ARRAY
79502: PUSH
79503: LD_INT 4
79505: ARRAY
79506: PUSH
79507: LD_VAR 0 2
79511: EQUAL
79512: AND
79513: ST_TO_ADDR
// end ;
79514: LD_VAR 0 3
79518: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79519: LD_INT 0
79521: PPUSH
// SetDir ( unit , d ) ;
79522: LD_VAR 0 1
79526: PPUSH
79527: LD_VAR 0 4
79531: PPUSH
79532: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79536: LD_VAR 0 1
79540: PPUSH
79541: LD_VAR 0 2
79545: PPUSH
79546: LD_VAR 0 3
79550: PPUSH
79551: LD_VAR 0 5
79555: PPUSH
79556: CALL_OW 48
// end ;
79560: LD_VAR 0 6
79564: RET
// export function ToNaturalNumber ( number ) ; begin
79565: LD_INT 0
79567: PPUSH
// result := number div 1 ;
79568: LD_ADDR_VAR 0 2
79572: PUSH
79573: LD_VAR 0 1
79577: PUSH
79578: LD_INT 1
79580: DIV
79581: ST_TO_ADDR
// if number < 0 then
79582: LD_VAR 0 1
79586: PUSH
79587: LD_INT 0
79589: LESS
79590: IFFALSE 79600
// result := 0 ;
79592: LD_ADDR_VAR 0 2
79596: PUSH
79597: LD_INT 0
79599: ST_TO_ADDR
// end ;
79600: LD_VAR 0 2
79604: RET
// export function SortByClass ( units , class ) ; var un ; begin
79605: LD_INT 0
79607: PPUSH
79608: PPUSH
// if not units or not class then
79609: LD_VAR 0 1
79613: NOT
79614: PUSH
79615: LD_VAR 0 2
79619: NOT
79620: OR
79621: IFFALSE 79625
// exit ;
79623: GO 79720
// result := [ ] ;
79625: LD_ADDR_VAR 0 3
79629: PUSH
79630: EMPTY
79631: ST_TO_ADDR
// for un in units do
79632: LD_ADDR_VAR 0 4
79636: PUSH
79637: LD_VAR 0 1
79641: PUSH
79642: FOR_IN
79643: IFFALSE 79718
// if GetClass ( un ) = class then
79645: LD_VAR 0 4
79649: PPUSH
79650: CALL_OW 257
79654: PUSH
79655: LD_VAR 0 2
79659: EQUAL
79660: IFFALSE 79687
// result := Insert ( result , 1 , un ) else
79662: LD_ADDR_VAR 0 3
79666: PUSH
79667: LD_VAR 0 3
79671: PPUSH
79672: LD_INT 1
79674: PPUSH
79675: LD_VAR 0 4
79679: PPUSH
79680: CALL_OW 2
79684: ST_TO_ADDR
79685: GO 79716
// result := Replace ( result , result + 1 , un ) ;
79687: LD_ADDR_VAR 0 3
79691: PUSH
79692: LD_VAR 0 3
79696: PPUSH
79697: LD_VAR 0 3
79701: PUSH
79702: LD_INT 1
79704: PLUS
79705: PPUSH
79706: LD_VAR 0 4
79710: PPUSH
79711: CALL_OW 1
79715: ST_TO_ADDR
79716: GO 79642
79718: POP
79719: POP
// end ;
79720: LD_VAR 0 3
79724: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79725: LD_INT 0
79727: PPUSH
79728: PPUSH
79729: PPUSH
79730: PPUSH
79731: PPUSH
79732: PPUSH
79733: PPUSH
// result := [ ] ;
79734: LD_ADDR_VAR 0 4
79738: PUSH
79739: EMPTY
79740: ST_TO_ADDR
// if x - r < 0 then
79741: LD_VAR 0 1
79745: PUSH
79746: LD_VAR 0 3
79750: MINUS
79751: PUSH
79752: LD_INT 0
79754: LESS
79755: IFFALSE 79767
// min_x := 0 else
79757: LD_ADDR_VAR 0 8
79761: PUSH
79762: LD_INT 0
79764: ST_TO_ADDR
79765: GO 79783
// min_x := x - r ;
79767: LD_ADDR_VAR 0 8
79771: PUSH
79772: LD_VAR 0 1
79776: PUSH
79777: LD_VAR 0 3
79781: MINUS
79782: ST_TO_ADDR
// if y - r < 0 then
79783: LD_VAR 0 2
79787: PUSH
79788: LD_VAR 0 3
79792: MINUS
79793: PUSH
79794: LD_INT 0
79796: LESS
79797: IFFALSE 79809
// min_y := 0 else
79799: LD_ADDR_VAR 0 7
79803: PUSH
79804: LD_INT 0
79806: ST_TO_ADDR
79807: GO 79825
// min_y := y - r ;
79809: LD_ADDR_VAR 0 7
79813: PUSH
79814: LD_VAR 0 2
79818: PUSH
79819: LD_VAR 0 3
79823: MINUS
79824: ST_TO_ADDR
// max_x := x + r ;
79825: LD_ADDR_VAR 0 9
79829: PUSH
79830: LD_VAR 0 1
79834: PUSH
79835: LD_VAR 0 3
79839: PLUS
79840: ST_TO_ADDR
// max_y := y + r ;
79841: LD_ADDR_VAR 0 10
79845: PUSH
79846: LD_VAR 0 2
79850: PUSH
79851: LD_VAR 0 3
79855: PLUS
79856: ST_TO_ADDR
// for _x = min_x to max_x do
79857: LD_ADDR_VAR 0 5
79861: PUSH
79862: DOUBLE
79863: LD_VAR 0 8
79867: DEC
79868: ST_TO_ADDR
79869: LD_VAR 0 9
79873: PUSH
79874: FOR_TO
79875: IFFALSE 79976
// for _y = min_y to max_y do
79877: LD_ADDR_VAR 0 6
79881: PUSH
79882: DOUBLE
79883: LD_VAR 0 7
79887: DEC
79888: ST_TO_ADDR
79889: LD_VAR 0 10
79893: PUSH
79894: FOR_TO
79895: IFFALSE 79972
// begin if not ValidHex ( _x , _y ) then
79897: LD_VAR 0 5
79901: PPUSH
79902: LD_VAR 0 6
79906: PPUSH
79907: CALL_OW 488
79911: NOT
79912: IFFALSE 79916
// continue ;
79914: GO 79894
// if GetResourceTypeXY ( _x , _y ) then
79916: LD_VAR 0 5
79920: PPUSH
79921: LD_VAR 0 6
79925: PPUSH
79926: CALL_OW 283
79930: IFFALSE 79970
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79932: LD_ADDR_VAR 0 4
79936: PUSH
79937: LD_VAR 0 4
79941: PPUSH
79942: LD_VAR 0 4
79946: PUSH
79947: LD_INT 1
79949: PLUS
79950: PPUSH
79951: LD_VAR 0 5
79955: PUSH
79956: LD_VAR 0 6
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PPUSH
79965: CALL_OW 1
79969: ST_TO_ADDR
// end ;
79970: GO 79894
79972: POP
79973: POP
79974: GO 79874
79976: POP
79977: POP
// end ;
79978: LD_VAR 0 4
79982: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79983: LD_INT 0
79985: PPUSH
79986: PPUSH
79987: PPUSH
79988: PPUSH
79989: PPUSH
79990: PPUSH
79991: PPUSH
79992: PPUSH
// if not units then
79993: LD_VAR 0 1
79997: NOT
79998: IFFALSE 80002
// exit ;
80000: GO 80526
// result := UnitFilter ( units , [ f_ok ] ) ;
80002: LD_ADDR_VAR 0 3
80006: PUSH
80007: LD_VAR 0 1
80011: PPUSH
80012: LD_INT 50
80014: PUSH
80015: EMPTY
80016: LIST
80017: PPUSH
80018: CALL_OW 72
80022: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80023: LD_ADDR_VAR 0 8
80027: PUSH
80028: LD_VAR 0 1
80032: PUSH
80033: LD_INT 1
80035: ARRAY
80036: PPUSH
80037: CALL_OW 255
80041: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80042: LD_ADDR_VAR 0 10
80046: PUSH
80047: LD_INT 29
80049: PUSH
80050: LD_INT 91
80052: PUSH
80053: LD_INT 49
80055: PUSH
80056: EMPTY
80057: LIST
80058: LIST
80059: LIST
80060: ST_TO_ADDR
// if not result then
80061: LD_VAR 0 3
80065: NOT
80066: IFFALSE 80070
// exit ;
80068: GO 80526
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80070: LD_ADDR_VAR 0 5
80074: PUSH
80075: LD_INT 81
80077: PUSH
80078: LD_VAR 0 8
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: PPUSH
80087: CALL_OW 69
80091: ST_TO_ADDR
// for i in result do
80092: LD_ADDR_VAR 0 4
80096: PUSH
80097: LD_VAR 0 3
80101: PUSH
80102: FOR_IN
80103: IFFALSE 80524
// begin tag := GetTag ( i ) + 1 ;
80105: LD_ADDR_VAR 0 9
80109: PUSH
80110: LD_VAR 0 4
80114: PPUSH
80115: CALL_OW 110
80119: PUSH
80120: LD_INT 1
80122: PLUS
80123: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80124: LD_ADDR_VAR 0 7
80128: PUSH
80129: LD_VAR 0 4
80133: PPUSH
80134: CALL_OW 250
80138: PPUSH
80139: LD_VAR 0 4
80143: PPUSH
80144: CALL_OW 251
80148: PPUSH
80149: LD_INT 6
80151: PPUSH
80152: CALL 79725 0 3
80156: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80157: LD_VAR 0 4
80161: PPUSH
80162: CALL_OW 247
80166: PUSH
80167: LD_INT 2
80169: EQUAL
80170: PUSH
80171: LD_VAR 0 7
80175: AND
80176: PUSH
80177: LD_VAR 0 4
80181: PPUSH
80182: CALL_OW 264
80186: PUSH
80187: LD_VAR 0 10
80191: IN
80192: NOT
80193: AND
80194: IFFALSE 80233
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80196: LD_VAR 0 4
80200: PPUSH
80201: LD_VAR 0 7
80205: PUSH
80206: LD_INT 1
80208: ARRAY
80209: PUSH
80210: LD_INT 1
80212: ARRAY
80213: PPUSH
80214: LD_VAR 0 7
80218: PUSH
80219: LD_INT 1
80221: ARRAY
80222: PUSH
80223: LD_INT 2
80225: ARRAY
80226: PPUSH
80227: CALL_OW 116
80231: GO 80522
// if path > tag then
80233: LD_VAR 0 2
80237: PUSH
80238: LD_VAR 0 9
80242: GREATER
80243: IFFALSE 80451
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80245: LD_ADDR_VAR 0 6
80249: PUSH
80250: LD_VAR 0 5
80254: PPUSH
80255: LD_INT 91
80257: PUSH
80258: LD_VAR 0 4
80262: PUSH
80263: LD_INT 8
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: LIST
80270: PPUSH
80271: CALL_OW 72
80275: ST_TO_ADDR
// if nearEnemy then
80276: LD_VAR 0 6
80280: IFFALSE 80349
// begin if GetWeapon ( i ) = ru_time_lapser then
80282: LD_VAR 0 4
80286: PPUSH
80287: CALL_OW 264
80291: PUSH
80292: LD_INT 49
80294: EQUAL
80295: IFFALSE 80323
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80297: LD_VAR 0 4
80301: PPUSH
80302: LD_VAR 0 6
80306: PPUSH
80307: LD_VAR 0 4
80311: PPUSH
80312: CALL_OW 74
80316: PPUSH
80317: CALL_OW 112
80321: GO 80347
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80323: LD_VAR 0 4
80327: PPUSH
80328: LD_VAR 0 6
80332: PPUSH
80333: LD_VAR 0 4
80337: PPUSH
80338: CALL_OW 74
80342: PPUSH
80343: CALL_OW 115
// end else
80347: GO 80449
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80349: LD_VAR 0 4
80353: PPUSH
80354: LD_VAR 0 2
80358: PUSH
80359: LD_VAR 0 9
80363: ARRAY
80364: PUSH
80365: LD_INT 1
80367: ARRAY
80368: PPUSH
80369: LD_VAR 0 2
80373: PUSH
80374: LD_VAR 0 9
80378: ARRAY
80379: PUSH
80380: LD_INT 2
80382: ARRAY
80383: PPUSH
80384: CALL_OW 297
80388: PUSH
80389: LD_INT 6
80391: GREATER
80392: IFFALSE 80435
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80394: LD_VAR 0 4
80398: PPUSH
80399: LD_VAR 0 2
80403: PUSH
80404: LD_VAR 0 9
80408: ARRAY
80409: PUSH
80410: LD_INT 1
80412: ARRAY
80413: PPUSH
80414: LD_VAR 0 2
80418: PUSH
80419: LD_VAR 0 9
80423: ARRAY
80424: PUSH
80425: LD_INT 2
80427: ARRAY
80428: PPUSH
80429: CALL_OW 114
80433: GO 80449
// SetTag ( i , tag ) ;
80435: LD_VAR 0 4
80439: PPUSH
80440: LD_VAR 0 9
80444: PPUSH
80445: CALL_OW 109
// end else
80449: GO 80522
// if enemy then
80451: LD_VAR 0 5
80455: IFFALSE 80522
// begin if GetWeapon ( i ) = ru_time_lapser then
80457: LD_VAR 0 4
80461: PPUSH
80462: CALL_OW 264
80466: PUSH
80467: LD_INT 49
80469: EQUAL
80470: IFFALSE 80498
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80472: LD_VAR 0 4
80476: PPUSH
80477: LD_VAR 0 5
80481: PPUSH
80482: LD_VAR 0 4
80486: PPUSH
80487: CALL_OW 74
80491: PPUSH
80492: CALL_OW 112
80496: GO 80522
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80498: LD_VAR 0 4
80502: PPUSH
80503: LD_VAR 0 5
80507: PPUSH
80508: LD_VAR 0 4
80512: PPUSH
80513: CALL_OW 74
80517: PPUSH
80518: CALL_OW 115
// end ; end ;
80522: GO 80102
80524: POP
80525: POP
// end ;
80526: LD_VAR 0 3
80530: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80531: LD_INT 0
80533: PPUSH
80534: PPUSH
80535: PPUSH
// if not unit or IsInUnit ( unit ) then
80536: LD_VAR 0 1
80540: NOT
80541: PUSH
80542: LD_VAR 0 1
80546: PPUSH
80547: CALL_OW 310
80551: OR
80552: IFFALSE 80556
// exit ;
80554: GO 80647
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80556: LD_ADDR_VAR 0 4
80560: PUSH
80561: LD_VAR 0 1
80565: PPUSH
80566: CALL_OW 250
80570: PPUSH
80571: LD_VAR 0 2
80575: PPUSH
80576: LD_INT 1
80578: PPUSH
80579: CALL_OW 272
80583: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80584: LD_ADDR_VAR 0 5
80588: PUSH
80589: LD_VAR 0 1
80593: PPUSH
80594: CALL_OW 251
80598: PPUSH
80599: LD_VAR 0 2
80603: PPUSH
80604: LD_INT 1
80606: PPUSH
80607: CALL_OW 273
80611: ST_TO_ADDR
// if ValidHex ( x , y ) then
80612: LD_VAR 0 4
80616: PPUSH
80617: LD_VAR 0 5
80621: PPUSH
80622: CALL_OW 488
80626: IFFALSE 80647
// ComTurnXY ( unit , x , y ) ;
80628: LD_VAR 0 1
80632: PPUSH
80633: LD_VAR 0 4
80637: PPUSH
80638: LD_VAR 0 5
80642: PPUSH
80643: CALL_OW 118
// end ;
80647: LD_VAR 0 3
80651: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80652: LD_INT 0
80654: PPUSH
80655: PPUSH
// result := false ;
80656: LD_ADDR_VAR 0 3
80660: PUSH
80661: LD_INT 0
80663: ST_TO_ADDR
// if not units then
80664: LD_VAR 0 2
80668: NOT
80669: IFFALSE 80673
// exit ;
80671: GO 80718
// for i in units do
80673: LD_ADDR_VAR 0 4
80677: PUSH
80678: LD_VAR 0 2
80682: PUSH
80683: FOR_IN
80684: IFFALSE 80716
// if See ( side , i ) then
80686: LD_VAR 0 1
80690: PPUSH
80691: LD_VAR 0 4
80695: PPUSH
80696: CALL_OW 292
80700: IFFALSE 80714
// begin result := true ;
80702: LD_ADDR_VAR 0 3
80706: PUSH
80707: LD_INT 1
80709: ST_TO_ADDR
// exit ;
80710: POP
80711: POP
80712: GO 80718
// end ;
80714: GO 80683
80716: POP
80717: POP
// end ;
80718: LD_VAR 0 3
80722: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80723: LD_INT 0
80725: PPUSH
80726: PPUSH
80727: PPUSH
80728: PPUSH
// if not unit or not points then
80729: LD_VAR 0 1
80733: NOT
80734: PUSH
80735: LD_VAR 0 2
80739: NOT
80740: OR
80741: IFFALSE 80745
// exit ;
80743: GO 80835
// dist := 99999 ;
80745: LD_ADDR_VAR 0 5
80749: PUSH
80750: LD_INT 99999
80752: ST_TO_ADDR
// for i in points do
80753: LD_ADDR_VAR 0 4
80757: PUSH
80758: LD_VAR 0 2
80762: PUSH
80763: FOR_IN
80764: IFFALSE 80833
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80766: LD_ADDR_VAR 0 6
80770: PUSH
80771: LD_VAR 0 1
80775: PPUSH
80776: LD_VAR 0 4
80780: PUSH
80781: LD_INT 1
80783: ARRAY
80784: PPUSH
80785: LD_VAR 0 4
80789: PUSH
80790: LD_INT 2
80792: ARRAY
80793: PPUSH
80794: CALL_OW 297
80798: ST_TO_ADDR
// if tmpDist < dist then
80799: LD_VAR 0 6
80803: PUSH
80804: LD_VAR 0 5
80808: LESS
80809: IFFALSE 80831
// begin result := i ;
80811: LD_ADDR_VAR 0 3
80815: PUSH
80816: LD_VAR 0 4
80820: ST_TO_ADDR
// dist := tmpDist ;
80821: LD_ADDR_VAR 0 5
80825: PUSH
80826: LD_VAR 0 6
80830: ST_TO_ADDR
// end ; end ;
80831: GO 80763
80833: POP
80834: POP
// end ;
80835: LD_VAR 0 3
80839: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80840: LD_INT 0
80842: PPUSH
// uc_side := side ;
80843: LD_ADDR_OWVAR 20
80847: PUSH
80848: LD_VAR 0 1
80852: ST_TO_ADDR
// uc_nation := 3 ;
80853: LD_ADDR_OWVAR 21
80857: PUSH
80858: LD_INT 3
80860: ST_TO_ADDR
// vc_chassis := 25 ;
80861: LD_ADDR_OWVAR 37
80865: PUSH
80866: LD_INT 25
80868: ST_TO_ADDR
// vc_engine := engine_siberite ;
80869: LD_ADDR_OWVAR 39
80873: PUSH
80874: LD_INT 3
80876: ST_TO_ADDR
// vc_control := control_computer ;
80877: LD_ADDR_OWVAR 38
80881: PUSH
80882: LD_INT 3
80884: ST_TO_ADDR
// vc_weapon := 59 ;
80885: LD_ADDR_OWVAR 40
80889: PUSH
80890: LD_INT 59
80892: ST_TO_ADDR
// result := CreateVehicle ;
80893: LD_ADDR_VAR 0 5
80897: PUSH
80898: CALL_OW 45
80902: ST_TO_ADDR
// SetDir ( result , d ) ;
80903: LD_VAR 0 5
80907: PPUSH
80908: LD_VAR 0 4
80912: PPUSH
80913: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80917: LD_VAR 0 5
80921: PPUSH
80922: LD_VAR 0 2
80926: PPUSH
80927: LD_VAR 0 3
80931: PPUSH
80932: LD_INT 0
80934: PPUSH
80935: CALL_OW 48
// end ;
80939: LD_VAR 0 5
80943: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80944: LD_INT 0
80946: PPUSH
80947: PPUSH
80948: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80949: LD_ADDR_VAR 0 2
80953: PUSH
80954: LD_INT 0
80956: PUSH
80957: LD_INT 0
80959: PUSH
80960: LD_INT 0
80962: PUSH
80963: LD_INT 0
80965: PUSH
80966: EMPTY
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80972: LD_VAR 0 1
80976: NOT
80977: PUSH
80978: LD_VAR 0 1
80982: PPUSH
80983: CALL_OW 264
80987: PUSH
80988: LD_INT 12
80990: PUSH
80991: LD_INT 51
80993: PUSH
80994: LD_INT 32
80996: PUSH
80997: LD_INT 89
80999: PUSH
81000: EMPTY
81001: LIST
81002: LIST
81003: LIST
81004: LIST
81005: IN
81006: NOT
81007: OR
81008: IFFALSE 81012
// exit ;
81010: GO 81110
// for i := 1 to 3 do
81012: LD_ADDR_VAR 0 3
81016: PUSH
81017: DOUBLE
81018: LD_INT 1
81020: DEC
81021: ST_TO_ADDR
81022: LD_INT 3
81024: PUSH
81025: FOR_TO
81026: IFFALSE 81108
// begin tmp := GetCargo ( cargo , i ) ;
81028: LD_ADDR_VAR 0 4
81032: PUSH
81033: LD_VAR 0 1
81037: PPUSH
81038: LD_VAR 0 3
81042: PPUSH
81043: CALL_OW 289
81047: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81048: LD_ADDR_VAR 0 2
81052: PUSH
81053: LD_VAR 0 2
81057: PPUSH
81058: LD_VAR 0 3
81062: PPUSH
81063: LD_VAR 0 4
81067: PPUSH
81068: CALL_OW 1
81072: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81073: LD_ADDR_VAR 0 2
81077: PUSH
81078: LD_VAR 0 2
81082: PPUSH
81083: LD_INT 4
81085: PPUSH
81086: LD_VAR 0 2
81090: PUSH
81091: LD_INT 4
81093: ARRAY
81094: PUSH
81095: LD_VAR 0 4
81099: PLUS
81100: PPUSH
81101: CALL_OW 1
81105: ST_TO_ADDR
// end ;
81106: GO 81025
81108: POP
81109: POP
// end ;
81110: LD_VAR 0 2
81114: RET
// export function Length ( array ) ; begin
81115: LD_INT 0
81117: PPUSH
// result := array + 0 ;
81118: LD_ADDR_VAR 0 2
81122: PUSH
81123: LD_VAR 0 1
81127: PUSH
81128: LD_INT 0
81130: PLUS
81131: ST_TO_ADDR
// end ;
81132: LD_VAR 0 2
81136: RET
// export function PrepareArray ( array ) ; begin
81137: LD_INT 0
81139: PPUSH
// result := array diff 0 ;
81140: LD_ADDR_VAR 0 2
81144: PUSH
81145: LD_VAR 0 1
81149: PUSH
81150: LD_INT 0
81152: DIFF
81153: ST_TO_ADDR
// if not result [ 1 ] then
81154: LD_VAR 0 2
81158: PUSH
81159: LD_INT 1
81161: ARRAY
81162: NOT
81163: IFFALSE 81183
// result := Delete ( result , 1 ) ;
81165: LD_ADDR_VAR 0 2
81169: PUSH
81170: LD_VAR 0 2
81174: PPUSH
81175: LD_INT 1
81177: PPUSH
81178: CALL_OW 3
81182: ST_TO_ADDR
// end ;
81183: LD_VAR 0 2
81187: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81188: LD_INT 0
81190: PPUSH
81191: PPUSH
81192: PPUSH
81193: PPUSH
// sibRocketRange := 25 ;
81194: LD_ADDR_VAR 0 6
81198: PUSH
81199: LD_INT 25
81201: ST_TO_ADDR
// result := false ;
81202: LD_ADDR_VAR 0 4
81206: PUSH
81207: LD_INT 0
81209: ST_TO_ADDR
// for i := 0 to 5 do
81210: LD_ADDR_VAR 0 5
81214: PUSH
81215: DOUBLE
81216: LD_INT 0
81218: DEC
81219: ST_TO_ADDR
81220: LD_INT 5
81222: PUSH
81223: FOR_TO
81224: IFFALSE 81291
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81226: LD_VAR 0 1
81230: PPUSH
81231: LD_VAR 0 5
81235: PPUSH
81236: LD_VAR 0 6
81240: PPUSH
81241: CALL_OW 272
81245: PPUSH
81246: LD_VAR 0 2
81250: PPUSH
81251: LD_VAR 0 5
81255: PPUSH
81256: LD_VAR 0 6
81260: PPUSH
81261: CALL_OW 273
81265: PPUSH
81266: LD_VAR 0 3
81270: PPUSH
81271: CALL_OW 309
81275: IFFALSE 81289
// begin result := true ;
81277: LD_ADDR_VAR 0 4
81281: PUSH
81282: LD_INT 1
81284: ST_TO_ADDR
// exit ;
81285: POP
81286: POP
81287: GO 81293
// end ;
81289: GO 81223
81291: POP
81292: POP
// end ;
81293: LD_VAR 0 4
81297: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81298: LD_INT 0
81300: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81301: LD_VAR 0 1
81305: PPUSH
81306: LD_VAR 0 2
81310: PPUSH
81311: LD_INT 0
81313: PPUSH
81314: LD_INT 0
81316: PPUSH
81317: LD_INT 1
81319: PPUSH
81320: LD_INT 0
81322: PPUSH
81323: CALL_OW 587
// end ; end_of_file
81327: LD_VAR 0 3
81331: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81332: LD_VAR 0 1
81336: PUSH
81337: LD_INT 200
81339: DOUBLE
81340: GREATEREQUAL
81341: IFFALSE 81349
81343: LD_INT 299
81345: DOUBLE
81346: LESSEQUAL
81347: IFTRUE 81351
81349: GO 81383
81351: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81352: LD_VAR 0 1
81356: PPUSH
81357: LD_VAR 0 2
81361: PPUSH
81362: LD_VAR 0 3
81366: PPUSH
81367: LD_VAR 0 4
81371: PPUSH
81372: LD_VAR 0 5
81376: PPUSH
81377: CALL 36017 0 5
81381: GO 81460
81383: LD_INT 300
81385: DOUBLE
81386: GREATEREQUAL
81387: IFFALSE 81395
81389: LD_INT 399
81391: DOUBLE
81392: LESSEQUAL
81393: IFTRUE 81397
81395: GO 81459
81397: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81398: LD_VAR 0 1
81402: PPUSH
81403: LD_VAR 0 2
81407: PPUSH
81408: LD_VAR 0 3
81412: PPUSH
81413: LD_VAR 0 4
81417: PPUSH
81418: LD_VAR 0 5
81422: PPUSH
81423: LD_VAR 0 6
81427: PPUSH
81428: LD_VAR 0 7
81432: PPUSH
81433: LD_VAR 0 8
81437: PPUSH
81438: LD_VAR 0 9
81442: PPUSH
81443: LD_VAR 0 10
81447: PPUSH
81448: LD_VAR 0 11
81452: PPUSH
81453: CALL 32350 0 11
81457: GO 81460
81459: POP
// end ;
81460: PPOPN 11
81462: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81463: LD_VAR 0 1
81467: PPUSH
81468: LD_VAR 0 2
81472: PPUSH
81473: LD_VAR 0 3
81477: PPUSH
81478: LD_VAR 0 4
81482: PPUSH
81483: LD_VAR 0 5
81487: PPUSH
81488: CALL 35753 0 5
// end ; end_of_file
81492: PPOPN 5
81494: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81495: LD_VAR 0 1
81499: PPUSH
81500: LD_VAR 0 2
81504: PPUSH
81505: LD_VAR 0 3
81509: PPUSH
81510: LD_VAR 0 4
81514: PPUSH
81515: LD_VAR 0 5
81519: PPUSH
81520: LD_VAR 0 6
81524: PPUSH
81525: CALL 20043 0 6
// end ;
81529: PPOPN 6
81531: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81532: LD_INT 0
81534: PPUSH
// begin if not units then
81535: LD_VAR 0 1
81539: NOT
81540: IFFALSE 81544
// exit ;
81542: GO 81544
// end ;
81544: PPOPN 7
81546: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81547: CALL 20014 0 0
// end ;
81551: PPOPN 1
81553: END
