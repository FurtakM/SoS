// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4074 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 8949 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 45
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 35774 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 35774 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 35774 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 35774 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 35774 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 35774 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 35774 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 35774 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 35774 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 35774 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 35774 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3084
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 70
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 31
2647: PPUSH
2648: LD_INT 108
2650: PPUSH
2651: LD_INT 50
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2661: LD_INT 35
2663: PPUSH
2664: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2668: LD_INT 22
2670: PUSH
2671: LD_INT 5
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 4
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 57
2693: PUSH
2694: EMPTY
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: IFFALSE 2661
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_INT 22
2719: PUSH
2720: LD_INT 5
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 30
2729: PUSH
2730: LD_INT 4
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 57
2742: PUSH
2743: EMPTY
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PUSH
2760: LD_INT 1
2762: ARRAY
2763: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_EXP 39
2773: PPUSH
2774: LD_INT 25
2776: PUSH
2777: LD_INT 1
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 72
2788: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2789: LD_VAR 0 2
2793: PPUSH
2794: LD_VAR 0 3
2798: PPUSH
2799: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2803: LD_INT 35
2805: PPUSH
2806: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2810: LD_INT 22
2812: PUSH
2813: LD_INT 5
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: LD_INT 31
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 57
2835: PUSH
2836: EMPTY
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: PPUSH
2848: CALL_OW 69
2852: PUSH
2853: LD_INT 2
2855: GREATEREQUAL
2856: IFFALSE 2803
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: LD_EXP 39
2867: PPUSH
2868: LD_INT 25
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 72
2882: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2883: LD_VAR 0 2
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_INT 5
2894: PPUSH
2895: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 2
2906: ARRAY
2907: PUSH
2908: LD_VAR 0 2
2912: PUSH
2913: LD_INT 3
2915: ARRAY
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2930: LD_VAR 0 2
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PUSH
2939: LD_VAR 0 2
2943: PUSH
2944: LD_INT 3
2946: ARRAY
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 2
2966: ARRAY
2967: PUSH
2968: LD_VAR 0 2
2972: PUSH
2973: LD_INT 3
2975: ARRAY
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 5
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 30
3002: PUSH
3003: LD_INT 31
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 69
3018: ST_TO_ADDR
// for i := 1 to 2 do
3019: LD_ADDR_VAR 0 1
3023: PUSH
3024: DOUBLE
3025: LD_INT 1
3027: DEC
3028: ST_TO_ADDR
3029: LD_INT 2
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3067
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3035: LD_VAR 0 2
3039: PUSH
3040: LD_VAR 0 1
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ARRAY
3049: PPUSH
3050: LD_VAR 0 4
3054: PUSH
3055: LD_VAR 0 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 180
3065: GO 3032
3067: POP
3068: POP
// wait ( 1 1$00 ) ;
3069: LD_INT 2100
3071: PPUSH
3072: CALL_OW 67
// farmerBaseReady := true ;
3076: LD_ADDR_EXP 4
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// end ;
3084: PPOPN 4
3086: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3087: LD_EXP 4
3091: PUSH
3092: LD_EXP 11
3096: NOT
3097: AND
3098: IFFALSE 3620
3100: GO 3102
3102: DISABLE
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// begin enable ;
3110: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: LD_EXP 39
3120: PPUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PUSH
3136: LD_EXP 36
3140: ADD
3141: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_EXP 39
3151: PPUSH
3152: LD_INT 25
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PPUSH
3162: CALL_OW 72
3166: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3167: LD_ADDR_VAR 0 5
3171: PUSH
3172: LD_INT 22
3174: PUSH
3175: LD_INT 5
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 21
3184: PUSH
3185: LD_INT 3
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 24
3197: PUSH
3198: LD_INT 1000
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3219: LD_ADDR_VAR 0 4
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 5
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 4
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3253: LD_VAR 0 4
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: CALL_OW 302
3266: IFFALSE 3330
// for i in sol do
3268: LD_ADDR_VAR 0 1
3272: PUSH
3273: LD_VAR 0 3
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3328
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 256
3290: PUSH
3291: LD_INT 999
3293: LESS
3294: PUSH
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 310
3304: NOT
3305: AND
3306: IFFALSE 3326
// ComEnterUnit ( i , arm [ 1 ] ) ;
3308: LD_VAR 0 1
3312: PPUSH
3313: LD_VAR 0 4
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: CALL_OW 120
3326: GO 3278
3328: POP
3329: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3330: LD_VAR 0 2
3334: NOT
3335: PUSH
3336: LD_INT 22
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 21
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: NOT
3365: AND
3366: IFFALSE 3458
// begin uc_side := 5 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 5
3375: ST_TO_ADDR
// uc_nation := 2 ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 2
3383: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3384: LD_INT 0
3386: PPUSH
3387: LD_INT 2
3389: PPUSH
3390: LD_INT 2
3392: PPUSH
3393: CALL_OW 380
// eng := CreateHuman ;
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: CALL_OW 44
3406: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3407: LD_VAR 0 2
3411: PPUSH
3412: LD_INT 102
3414: PPUSH
3415: LD_INT 8
3417: PPUSH
3418: LD_INT 0
3420: PPUSH
3421: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3425: LD_VAR 0 2
3429: PPUSH
3430: LD_INT 110
3432: PPUSH
3433: LD_INT 60
3435: PPUSH
3436: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3440: LD_ADDR_EXP 39
3444: PUSH
3445: LD_EXP 39
3449: PUSH
3450: LD_VAR 0 2
3454: UNION
3455: ST_TO_ADDR
// end else
3456: GO 3620
// begin for i in eng do
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3618
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3471: LD_INT 10
3473: PPUSH
3474: LD_INT 1
3476: PPUSH
3477: CALL_OW 287
3481: IFFALSE 3532
// begin if IsInUnit ( i ) then
3483: LD_VAR 0 1
3487: PPUSH
3488: CALL_OW 310
3492: IFFALSE 3503
// ComExitBuilding ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_INT 10
3510: PPUSH
3511: CALL_OW 308
3515: NOT
3516: IFFALSE 3530
// AddComMoveToArea ( i , collectFarmerArea ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 10
3525: PPUSH
3526: CALL_OW 173
// end else
3530: GO 3616
// begin if damagedBuilding then
3532: LD_VAR 0 5
3536: IFFALSE 3580
// begin if IsInUnit ( i ) then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 310
3547: IFFALSE 3560
// ComExitBuilding ( i ) else
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 122
3558: GO 3578
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_VAR 0 5
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: CALL_OW 130
// end else
3578: GO 3616
// if not IsInUnit ( i ) and not HasTask ( i ) then
3580: LD_VAR 0 1
3584: PPUSH
3585: CALL_OW 310
3589: NOT
3590: PUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL_OW 314
3600: NOT
3601: AND
3602: IFFALSE 3616
// ComEnterUnit ( i , arDepot ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_INT 5
3611: PPUSH
3612: CALL_OW 120
// end ; end ;
3616: GO 3468
3618: POP
3619: POP
// end ; end ;
3620: PPOPN 5
3622: END
// export function StartCargoEvacuation ; begin
3623: LD_INT 0
3625: PPUSH
// while omarCargoCounter > 0 do
3626: LD_EXP 21
3630: PUSH
3631: LD_INT 0
3633: GREATER
3634: IFFALSE 3951
// begin wait ( 0 0$40 ) ;
3636: LD_INT 1400
3638: PPUSH
3639: CALL_OW 67
// omarCargo := PrepareCargo ;
3643: LD_ADDR_EXP 43
3647: PUSH
3648: CALL 3956 0 0
3652: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3653: LD_EXP 43
3657: PPUSH
3658: LD_INT 0
3660: PPUSH
3661: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3665: LD_EXP 43
3669: PPUSH
3670: LD_INT 107
3672: PPUSH
3673: LD_INT 59
3675: PPUSH
3676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3680: LD_INT 35
3682: PPUSH
3683: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3687: LD_EXP 43
3691: PPUSH
3692: LD_INT 107
3694: PPUSH
3695: LD_INT 59
3697: PPUSH
3698: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 302
3711: NOT
3712: PUSH
3713: LD_EXP 43
3717: PPUSH
3718: CALL_OW 301
3722: OR
3723: IFFALSE 3727
// continue ;
3725: GO 3680
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3727: LD_EXP 43
3731: PPUSH
3732: LD_INT 107
3734: PPUSH
3735: LD_INT 59
3737: PPUSH
3738: CALL_OW 307
3742: PUSH
3743: LD_EXP 43
3747: PPUSH
3748: LD_INT 5
3750: PPUSH
3751: CALL_OW 296
3755: PUSH
3756: LD_INT 6
3758: LESS
3759: OR
3760: IFFALSE 3680
// SetTag ( omarCargo , 1 ) ;
3762: LD_EXP 43
3766: PPUSH
3767: LD_INT 1
3769: PPUSH
3770: CALL_OW 109
// wait ( 0 0$05 ) ;
3774: LD_INT 175
3776: PPUSH
3777: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3781: LD_EXP 43
3785: PPUSH
3786: LD_INT 5
3788: PPUSH
3789: LD_INT 1
3791: PPUSH
3792: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3796: LD_EXP 43
3800: PPUSH
3801: LD_INT 103
3803: PPUSH
3804: LD_INT 9
3806: PPUSH
3807: CALL_OW 171
// wait ( 0 0$1 ) ;
3811: LD_INT 35
3813: PPUSH
3814: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3818: LD_EXP 43
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 100
3828: PPUSH
3829: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3840: LD_EXP 43
3844: PPUSH
3845: LD_INT 103
3847: PPUSH
3848: LD_INT 9
3850: PPUSH
3851: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3855: LD_EXP 43
3859: PPUSH
3860: CALL_OW 302
3864: NOT
3865: PUSH
3866: LD_EXP 43
3870: PPUSH
3871: CALL_OW 301
3875: OR
3876: IFFALSE 3880
// continue ;
3878: GO 3833
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3880: LD_EXP 43
3884: PPUSH
3885: LD_INT 103
3887: PPUSH
3888: LD_INT 9
3890: PPUSH
3891: CALL_OW 307
3895: PUSH
3896: LD_EXP 43
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: CALL_OW 308
3908: OR
3909: PUSH
3910: LD_EXP 43
3914: PPUSH
3915: CALL_OW 110
3919: PUSH
3920: LD_INT 0
3922: GREATER
3923: AND
3924: IFFALSE 3833
// RemoveUnit ( omarCargo ) ;
3926: LD_EXP 43
3930: PPUSH
3931: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
3935: LD_ADDR_EXP 21
3939: PUSH
3940: LD_EXP 21
3944: PUSH
3945: LD_INT 1
3947: MINUS
3948: ST_TO_ADDR
// end ;
3949: GO 3626
// end ;
3951: LD_VAR 0 1
3955: RET
// export function PrepareCargo ; var un , veh ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_INT 5
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: LD_INT 13
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 32
3983: PPUSH
3984: LD_INT 80
3986: PPUSH
3987: CALL 313 0 7
3991: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3992: LD_VAR 0 3
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4004: LD_VAR 0 3
4008: PPUSH
4009: LD_INT 101
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 2
4030: PPUSH
4031: CALL_OW 380
// un := CreateHuman ;
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: CALL_OW 44
4044: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_VAR 0 3
4054: PPUSH
4055: CALL_OW 52
// result := veh ;
4059: LD_ADDR_VAR 0 1
4063: PUSH
4064: LD_VAR 0 3
4068: ST_TO_ADDR
// end ; end_of_file
4069: LD_VAR 0 1
4073: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// usForces := [ ] ;
4079: LD_ADDR_EXP 44
4083: PUSH
4084: EMPTY
4085: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4086: LD_ADDR_EXP 46
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: LD_INT 32
4096: PUSH
4097: LD_INT 27
4099: PUSH
4100: LD_INT 1
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 4
4111: PUSH
4112: LD_INT 43
4114: PUSH
4115: LD_INT 24
4117: PUSH
4118: LD_INT 5
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 27
4129: PUSH
4130: LD_INT 29
4132: PUSH
4133: LD_INT 21
4135: PUSH
4136: LD_INT 0
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4150: LD_INT 11
4152: PPUSH
4153: CALL_OW 274
4157: PPUSH
4158: LD_INT 1
4160: PPUSH
4161: LD_INT 150
4163: PUSH
4164: LD_INT 120
4166: PUSH
4167: LD_INT 100
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: PUSH
4175: LD_OWVAR 67
4179: ARRAY
4180: PPUSH
4181: CALL_OW 277
// if Difficulty = 1 then
4185: LD_OWVAR 67
4189: PUSH
4190: LD_INT 1
4192: EQUAL
4193: IFFALSE 4202
// RemoveUnit ( hillBun ) ;
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 64
// uc_side := 1 ;
4202: LD_ADDR_OWVAR 20
4206: PUSH
4207: LD_INT 1
4209: ST_TO_ADDR
// uc_nation := 1 ;
4210: LD_ADDR_OWVAR 21
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// hc_gallery :=  ;
4218: LD_ADDR_OWVAR 33
4222: PUSH
4223: LD_STRING 
4225: ST_TO_ADDR
// hc_name :=  ;
4226: LD_ADDR_OWVAR 26
4230: PUSH
4231: LD_STRING 
4233: ST_TO_ADDR
// hc_importance := 0 ;
4234: LD_ADDR_OWVAR 32
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4242: LD_INT 1
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: CALL_OW 380
// usCommander := CreateHuman ;
4255: LD_ADDR_EXP 45
4259: PUSH
4260: CALL_OW 44
4264: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4265: LD_EXP 45
4269: PPUSH
4270: LD_INT 11
4272: PPUSH
4273: CALL_OW 52
// if Difficulty > 1 then
4277: LD_OWVAR 67
4281: PUSH
4282: LD_INT 1
4284: GREATER
4285: IFFALSE 4367
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4287: LD_INT 0
4289: PPUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 1
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: LD_OWVAR 67
4311: ARRAY
4312: PPUSH
4313: CALL_OW 380
// un := CreateHuman ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: CALL_OW 44
4326: ST_TO_ADDR
// usForces := usForces union un ;
4327: LD_ADDR_EXP 44
4331: PUSH
4332: LD_EXP 44
4336: PUSH
4337: LD_VAR 0 3
4341: UNION
4342: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4343: LD_VAR 0 3
4347: PPUSH
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4355: LD_VAR 0 3
4359: PPUSH
4360: LD_INT 14
4362: PPUSH
4363: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4367: LD_ADDR_VAR 0 2
4371: PUSH
4372: DOUBLE
4373: LD_INT 1
4375: DEC
4376: ST_TO_ADDR
4377: LD_INT 2
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PUSH
4397: FOR_TO
4398: IFFALSE 4540
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4400: LD_INT 0
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_INT 1
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_OWVAR 67
4424: ARRAY
4425: PPUSH
4426: CALL_OW 380
// un := CreateHuman ;
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// usForces := usForces union un ;
4440: LD_ADDR_EXP 44
4444: PUSH
4445: LD_EXP 44
4449: PUSH
4450: LD_VAR 0 3
4454: UNION
4455: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4456: LD_VAR 0 3
4460: PPUSH
4461: LD_INT 39
4463: PPUSH
4464: LD_INT 24
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 50
// if i < 3 then
4477: LD_VAR 0 2
4481: PUSH
4482: LD_INT 3
4484: LESS
4485: IFFALSE 4538
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 22
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 58
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: LD_INT 30
4510: PUSH
4511: LD_INT 31
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: PUSH
4528: LD_VAR 0 2
4532: ARRAY
4533: PPUSH
4534: CALL_OW 120
// end ;
4538: GO 4397
4540: POP
4541: POP
// for i := 1 to 2 do
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_INT 2
4554: PUSH
4555: FOR_TO
4556: IFFALSE 4620
// begin PrepareHuman ( false , 2 , 2 ) ;
4558: LD_INT 0
4560: PPUSH
4561: LD_INT 2
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: CALL_OW 380
// un := CreateHuman ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: CALL_OW 44
4580: ST_TO_ADDR
// usForces := usForces union un ;
4581: LD_ADDR_EXP 44
4585: PUSH
4586: LD_EXP 44
4590: PUSH
4591: LD_VAR 0 3
4595: UNION
4596: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_INT 39
4604: PPUSH
4605: LD_INT 24
4607: PPUSH
4608: LD_INT 4
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 50
// end ;
4618: GO 4555
4620: POP
4621: POP
// PrepareHuman ( false , 4 , 1 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 4
4627: PPUSH
4628: LD_INT 1
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: LD_VAR 0 1
4686: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4687: LD_EXP 44
4691: PUSH
4692: LD_EXP 6
4696: NOT
4697: AND
4698: PUSH
4699: LD_EXP 14
4703: NOT
4704: AND
4705: IFFALSE 5136
4707: GO 4709
4709: DISABLE
4710: LD_INT 0
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
// begin enable ;
4717: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4718: LD_ADDR_VAR 0 3
4722: PUSH
4723: LD_EXP 44
4727: PPUSH
4728: LD_INT 25
4730: PUSH
4731: LD_INT 2
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 72
4742: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: LD_EXP 44
4752: PPUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 72
4767: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_EXP 44
4777: PPUSH
4778: LD_INT 25
4780: PUSH
4781: LD_INT 4
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PPUSH
4788: CALL_OW 72
4792: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4793: LD_INT 7
4795: PPUSH
4796: LD_INT 22
4798: PUSH
4799: LD_INT 2
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PUSH
4811: LD_INT 1
4813: EQUAL
4814: IFFALSE 4890
// for i in sol do
4816: LD_ADDR_VAR 0 1
4820: PUSH
4821: LD_VAR 0 4
4825: PUSH
4826: FOR_IN
4827: IFFALSE 4888
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4829: LD_VAR 0 1
4833: PPUSH
4834: CALL_OW 310
4838: NOT
4839: PUSH
4840: LD_VAR 0 1
4844: PPUSH
4845: CALL_OW 310
4849: PPUSH
4850: CALL_OW 266
4854: PUSH
4855: LD_INT 4
4857: EQUAL
4858: NOT
4859: OR
4860: IFFALSE 4886
// begin ComExitBuilding ( i ) ;
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4871: LD_VAR 0 1
4875: PPUSH
4876: LD_INT 37
4878: PPUSH
4879: LD_INT 23
4881: PPUSH
4882: CALL_OW 174
// end ;
4886: GO 4826
4888: POP
4889: POP
// if eng then
4890: LD_VAR 0 3
4894: IFFALSE 5136
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 95
4913: PUSH
4914: LD_INT 7
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 3
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: LD_INT 24
4936: PUSH
4937: LD_INT 1000
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: PPUSH
4954: CALL_OW 69
4958: ST_TO_ADDR
// if b then
4959: LD_VAR 0 2
4963: IFFALSE 4994
// begin ComExitBuilding ( eng ) ;
4965: LD_VAR 0 3
4969: PPUSH
4970: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4974: LD_VAR 0 3
4978: PPUSH
4979: LD_VAR 0 2
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: CALL_OW 190
// end else
4992: GO 5136
// begin for i in eng do
4994: LD_ADDR_VAR 0 1
4998: PUSH
4999: LD_VAR 0 3
5003: PUSH
5004: FOR_IN
5005: IFFALSE 5134
// if not HasTask ( i ) then
5007: LD_VAR 0 1
5011: PPUSH
5012: CALL_OW 314
5016: NOT
5017: IFFALSE 5132
// begin if americanBuildList then
5019: LD_EXP 46
5023: IFFALSE 5108
// begin if IsInUnit ( i ) then
5025: LD_VAR 0 1
5029: PPUSH
5030: CALL_OW 310
5034: IFFALSE 5045
// ComExitBuilding ( i ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5045: LD_VAR 0 1
5049: PPUSH
5050: LD_EXP 46
5054: PUSH
5055: LD_INT 1
5057: ARRAY
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: PPUSH
5063: LD_EXP 46
5067: PUSH
5068: LD_INT 1
5070: ARRAY
5071: PUSH
5072: LD_INT 2
5074: ARRAY
5075: PPUSH
5076: LD_EXP 46
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PUSH
5085: LD_INT 3
5087: ARRAY
5088: PPUSH
5089: LD_EXP 46
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PUSH
5098: LD_INT 4
5100: ARRAY
5101: PPUSH
5102: CALL_OW 205
// end else
5106: GO 5132
// if not IsInUnit ( i ) then
5108: LD_VAR 0 1
5112: PPUSH
5113: CALL_OW 310
5117: NOT
5118: IFFALSE 5132
// ComEnterUnit ( i , usDepot ) ;
5120: LD_VAR 0 1
5124: PPUSH
5125: LD_INT 11
5127: PPUSH
5128: CALL_OW 120
// end ;
5132: GO 5004
5134: POP
5135: POP
// end ; end ; end ;
5136: PPOPN 5
5138: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5139: LD_INT 0
5141: PPUSH
5142: PPUSH
5143: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5144: LD_ADDR_VAR 0 3
5148: PUSH
5149: LD_INT 35
5151: PUSH
5152: LD_INT 45
5154: PUSH
5155: LD_INT 48
5157: PUSH
5158: LD_EXP 58
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// for i in tech do
5169: LD_ADDR_VAR 0 4
5173: PUSH
5174: LD_VAR 0 3
5178: PUSH
5179: FOR_IN
5180: IFFALSE 5198
// AddComResearch ( lab , i ) ;
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_VAR 0 4
5191: PPUSH
5192: CALL_OW 184
5196: GO 5179
5198: POP
5199: POP
// end ;
5200: LD_VAR 0 2
5204: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5205: LD_EXP 12
5209: PUSH
5210: LD_EXP 23
5214: PUSH
5215: LD_EXP 27
5219: LESSEQUAL
5220: AND
5221: IFFALSE 5246
5223: GO 5225
5225: DISABLE
// begin enable ;
5226: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5227: LD_INT 35
5229: PPUSH
5230: LD_INT 2065
5232: PPUSH
5233: CALL_OW 12
5237: PPUSH
5238: CALL_OW 67
// SendConvoy ;
5242: CALL 5344 0 0
// end ;
5246: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5247: LD_EXP 6
5251: PUSH
5252: LD_EXP 18
5256: AND
5257: IFFALSE 5343
5259: GO 5261
5261: DISABLE
// begin if americanHasEscaped then
5262: LD_EXP 8
5266: IFFALSE 5277
// wait ( 3 3$20 ) else
5268: LD_INT 7000
5270: PPUSH
5271: CALL_OW 67
5275: GO 5284
// wait ( 6 6$40 ) ;
5277: LD_INT 14000
5279: PPUSH
5280: CALL_OW 67
// SendAttack ;
5284: CALL 6087 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5288: LD_INT 14000
5290: PUSH
5291: LD_INT 11900
5293: PUSH
5294: LD_INT 9800
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_OWVAR 67
5306: ARRAY
5307: PPUSH
5308: CALL_OW 67
// SendAttack ;
5312: CALL 6087 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5316: LD_EXP 19
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PUSH
5335: LD_OWVAR 67
5339: ARRAY
5340: LESS
5341: IFFALSE 5288
// end ;
5343: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5344: LD_INT 0
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
// road := rand ( 1 , 2 ) ;
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: LD_INT 1
5361: PPUSH
5362: LD_INT 2
5364: PPUSH
5365: CALL_OW 12
5369: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5370: LD_ADDR_VAR 0 8
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: LD_INT 8
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5391: LD_ADDR_VAR 0 5
5395: PUSH
5396: LD_INT 35
5398: PUSH
5399: LD_INT 66
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 101
5412: PUSH
5413: LD_INT 8
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5428: LD_ADDR_VAR 0 6
5432: PUSH
5433: LD_INT 34
5435: PUSH
5436: LD_INT 67
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 38
5445: PUSH
5446: LD_INT 62
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 43
5455: PUSH
5456: LD_INT 54
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: LD_INT 57
5465: PUSH
5466: LD_INT 57
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 77
5475: PUSH
5476: LD_INT 71
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 86
5485: PUSH
5486: LD_INT 60
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 89
5495: PUSH
5496: LD_INT 35
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 93
5505: PUSH
5506: LD_INT 17
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 97
5515: PUSH
5516: LD_INT 10
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 103
5525: PUSH
5526: LD_INT 9
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: ST_TO_ADDR
// if road = 2 then
5545: LD_VAR 0 4
5549: PUSH
5550: LD_INT 2
5552: EQUAL
5553: IFFALSE 5570
// points := ReverseArray ( points ) ;
5555: LD_ADDR_VAR 0 6
5559: PUSH
5560: LD_VAR 0 6
5564: PPUSH
5565: CALL 973 0 1
5569: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5570: LD_INT 4
5572: PPUSH
5573: LD_INT 1
5575: PPUSH
5576: LD_INT 2
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 12
5587: PPUSH
5588: LD_INT 80
5590: PPUSH
5591: CALL 313 0 7
// veh := CreateVehicle ;
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: CALL_OW 45
5604: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: LD_VAR 0 5
5614: PUSH
5615: LD_VAR 0 4
5619: ARRAY
5620: PUSH
5621: LD_INT 3
5623: ARRAY
5624: PPUSH
5625: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5629: LD_VAR 0 3
5633: PPUSH
5634: LD_VAR 0 5
5638: PUSH
5639: LD_VAR 0 4
5643: ARRAY
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PPUSH
5649: LD_VAR 0 5
5653: PUSH
5654: LD_VAR 0 4
5658: ARRAY
5659: PUSH
5660: LD_INT 2
5662: ARRAY
5663: PPUSH
5664: LD_INT 0
5666: PPUSH
5667: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5671: LD_INT 0
5673: PPUSH
5674: LD_INT 1
5676: PPUSH
5677: LD_OWVAR 67
5681: PPUSH
5682: CALL_OW 380
// un := CreateHuman ;
5686: LD_ADDR_VAR 0 2
5690: PUSH
5691: CALL_OW 44
5695: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5710: LD_INT 60
5712: PUSH
5713: LD_INT 56
5715: PUSH
5716: LD_INT 52
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_OWVAR 67
5728: ARRAY
5729: PPUSH
5730: CALL_OW 13
5734: PUSH
5735: LD_OWVAR 1
5739: PUSH
5740: LD_INT 30
5742: MOD
5743: PLUS
5744: PUSH
5745: LD_EXP 23
5749: PUSH
5750: LD_INT 4
5752: LESS
5753: OR
5754: IFFALSE 5771
// SetCargo ( veh , mat_cans , 100 ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: LD_INT 1
5763: PPUSH
5764: LD_INT 100
5766: PPUSH
5767: CALL_OW 290
// for i := 2 to points do
5771: LD_ADDR_VAR 0 7
5775: PUSH
5776: DOUBLE
5777: LD_INT 2
5779: DEC
5780: ST_TO_ADDR
5781: LD_VAR 0 6
5785: PUSH
5786: FOR_TO
5787: IFFALSE 5830
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_VAR 0 6
5798: PUSH
5799: LD_VAR 0 7
5803: ARRAY
5804: PUSH
5805: LD_INT 1
5807: ARRAY
5808: PPUSH
5809: LD_VAR 0 6
5813: PUSH
5814: LD_VAR 0 7
5818: ARRAY
5819: PUSH
5820: LD_INT 2
5822: ARRAY
5823: PPUSH
5824: CALL_OW 171
5828: GO 5786
5830: POP
5831: POP
// convoyCounter := convoyCounter + 1 ;
5832: LD_ADDR_EXP 23
5836: PUSH
5837: LD_EXP 23
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5846: LD_INT 35
5848: PPUSH
5849: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5853: LD_VAR 0 3
5857: PPUSH
5858: CALL_OW 314
5862: NOT
5863: PUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 302
5873: AND
5874: IFFALSE 5915
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5876: LD_VAR 0 3
5880: PPUSH
5881: LD_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PPUSH
5896: LD_VAR 0 6
5900: PUSH
5901: LD_VAR 0 6
5905: ARRAY
5906: PUSH
5907: LD_INT 2
5909: ARRAY
5910: PPUSH
5911: CALL_OW 111
// if not IsInUnit ( un ) then
5915: LD_VAR 0 2
5919: PPUSH
5920: CALL_OW 310
5924: NOT
5925: IFFALSE 5966
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5927: LD_VAR 0 2
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: PPUSH
5947: LD_VAR 0 6
5951: PUSH
5952: LD_VAR 0 6
5956: ARRAY
5957: PUSH
5958: LD_INT 2
5960: ARRAY
5961: PPUSH
5962: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5966: LD_VAR 0 3
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 308
5980: PUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: LD_VAR 0 8
5990: PPUSH
5991: CALL_OW 308
5995: OR
5996: IFFALSE 5846
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
5998: LD_VAR 0 2
6002: PPUSH
6003: CALL_OW 302
6007: PUSH
6008: LD_VAR 0 3
6012: PPUSH
6013: CALL_OW 302
6017: NOT
6018: AND
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: AND
6035: IFFALSE 6046
// RemoveUnit ( un ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_VAR 0 8
6055: PPUSH
6056: CALL_OW 308
6060: PUSH
6061: LD_VAR 0 3
6065: PPUSH
6066: CALL_OW 302
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( veh ) ;
6073: LD_VAR 0 3
6077: PPUSH
6078: CALL_OW 64
// end ;
6082: LD_VAR 0 1
6086: RET
// export function SendAttack ; var un , veh , i ; begin
6087: LD_INT 0
6089: PPUSH
6090: PPUSH
6091: PPUSH
6092: PPUSH
// IncomingAttack ;
6093: CALL 14834 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6097: LD_INT 2100
6099: PPUSH
6100: LD_INT 3500
6102: PPUSH
6103: CALL_OW 12
6107: PPUSH
6108: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6112: LD_ADDR_VAR 0 4
6116: PUSH
6117: DOUBLE
6118: LD_INT 1
6120: DEC
6121: ST_TO_ADDR
6122: LD_INT 3
6124: PUSH
6125: LD_INT 4
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_OWVAR 67
6140: ARRAY
6141: PUSH
6142: LD_EXP 19
6146: PUSH
6147: LD_INT 3
6149: DIV
6150: PLUS
6151: PUSH
6152: FOR_TO
6153: IFFALSE 6265
// begin uc_side := 1 ;
6155: LD_ADDR_OWVAR 20
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// uc_nation := 1 ;
6163: LD_ADDR_OWVAR 21
6167: PUSH
6168: LD_INT 1
6170: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6171: LD_INT 0
6173: PPUSH
6174: LD_INT 1
6176: PPUSH
6177: LD_INT 2
6179: PUSH
6180: LD_INT 3
6182: PUSH
6183: LD_INT 4
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PUSH
6191: LD_OWVAR 67
6195: ARRAY
6196: PPUSH
6197: CALL_OW 380
// un := CreateHuman ;
6201: LD_ADDR_VAR 0 2
6205: PUSH
6206: CALL_OW 44
6210: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6211: LD_VAR 0 2
6215: PPUSH
6216: LD_INT 37
6218: PPUSH
6219: LD_INT 70
6221: PPUSH
6222: LD_INT 3
6224: PPUSH
6225: LD_INT 0
6227: PPUSH
6228: CALL_OW 50
// usAttackers := usAttackers union un ;
6232: LD_ADDR_EXP 47
6236: PUSH
6237: LD_EXP 47
6241: PUSH
6242: LD_VAR 0 2
6246: UNION
6247: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6248: LD_VAR 0 2
6252: PPUSH
6253: LD_INT 40
6255: PPUSH
6256: LD_INT 65
6258: PPUSH
6259: CALL_OW 111
// end ;
6263: GO 6152
6265: POP
6266: POP
// uc_side := 1 ;
6267: LD_ADDR_OWVAR 20
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// uc_nation := 1 ;
6275: LD_ADDR_OWVAR 21
6279: PUSH
6280: LD_INT 1
6282: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6283: LD_INT 0
6285: PPUSH
6286: LD_INT 4
6288: PPUSH
6289: LD_INT 2
6291: PPUSH
6292: CALL_OW 380
// un := CreateHuman ;
6296: LD_ADDR_VAR 0 2
6300: PUSH
6301: CALL_OW 44
6305: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6306: LD_VAR 0 2
6310: PPUSH
6311: LD_INT 37
6313: PPUSH
6314: LD_INT 70
6316: PPUSH
6317: LD_INT 3
6319: PPUSH
6320: LD_INT 0
6322: PPUSH
6323: CALL_OW 50
// usAttackers := usAttackers union un ;
6327: LD_ADDR_EXP 47
6331: PUSH
6332: LD_EXP 47
6336: PUSH
6337: LD_VAR 0 2
6341: UNION
6342: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6343: LD_VAR 0 2
6347: PPUSH
6348: LD_INT 40
6350: PPUSH
6351: LD_INT 65
6353: PPUSH
6354: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6358: LD_ADDR_VAR 0 4
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_OWVAR 67
6372: PUSH
6373: LD_EXP 19
6377: PUSH
6378: LD_INT 4
6380: DIV
6381: PLUS
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6557
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6386: LD_ADDR_VAR 0 3
6390: PUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: LD_INT 2
6399: PPUSH
6400: LD_INT 1
6402: PPUSH
6403: LD_INT 1
6405: PPUSH
6406: LD_INT 4
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: CALL_OW 12
6430: ARRAY
6431: PPUSH
6432: LD_INT 90
6434: PPUSH
6435: CALL 313 0 7
6439: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 35
6447: PPUSH
6448: LD_INT 65
6450: PPUSH
6451: LD_INT 0
6453: PPUSH
6454: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6458: LD_INT 0
6460: PPUSH
6461: LD_INT 3
6463: PPUSH
6464: LD_OWVAR 67
6468: PUSH
6469: LD_INT 1
6471: PLUS
6472: PPUSH
6473: CALL_OW 380
// un := CreateHuman ;
6477: LD_ADDR_VAR 0 2
6481: PUSH
6482: CALL_OW 44
6486: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6487: LD_VAR 0 2
6491: PPUSH
6492: LD_VAR 0 3
6496: PPUSH
6497: CALL_OW 52
// usAttackers := usAttackers union un ;
6501: LD_ADDR_EXP 47
6505: PUSH
6506: LD_EXP 47
6510: PUSH
6511: LD_VAR 0 2
6515: UNION
6516: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6517: LD_VAR 0 3
6521: PPUSH
6522: LD_INT 39
6524: PPUSH
6525: LD_INT 60
6527: PPUSH
6528: CALL_OW 111
// wait ( 0 0$3 ) ;
6532: LD_INT 105
6534: PPUSH
6535: CALL_OW 67
// usAttackers := usAttackers union veh ;
6539: LD_ADDR_EXP 47
6543: PUSH
6544: LD_EXP 47
6548: PUSH
6549: LD_VAR 0 3
6553: UNION
6554: ST_TO_ADDR
// end ;
6555: GO 6383
6557: POP
6558: POP
// attackWave := attackWave + 1 ;
6559: LD_ADDR_EXP 19
6563: PUSH
6564: LD_EXP 19
6568: PUSH
6569: LD_INT 1
6571: PLUS
6572: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6573: LD_EXP 24
6577: PPUSH
6578: CALL_OW 427
// end ;
6582: LD_VAR 0 1
6586: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6587: LD_INT 0
6589: PPUSH
6590: PPUSH
6591: PPUSH
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
// if retreatAllowed then
6600: LD_EXP 11
6604: IFFALSE 6616
// strategy := 2 else
6606: LD_ADDR_VAR 0 5
6610: PUSH
6611: LD_INT 2
6613: ST_TO_ADDR
6614: GO 6632
// strategy := rand ( 0 , 2 ) ;
6616: LD_ADDR_VAR 0 5
6620: PUSH
6621: LD_INT 0
6623: PPUSH
6624: LD_INT 2
6626: PPUSH
6627: CALL_OW 12
6631: ST_TO_ADDR
// attackFormula := [ ] ;
6632: LD_ADDR_VAR 0 6
6636: PUSH
6637: EMPTY
6638: ST_TO_ADDR
// case strategy of 0 :
6639: LD_VAR 0 5
6643: PUSH
6644: LD_INT 0
6646: DOUBLE
6647: EQUAL
6648: IFTRUE 6652
6650: GO 6982
6652: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6653: LD_INT 11
6655: PPUSH
6656: LD_INT 22
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 30
6668: PUSH
6669: LD_INT 4
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 70
6684: NOT
6685: IFFALSE 6757
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6687: LD_ADDR_VAR 0 6
6691: PUSH
6692: LD_INT 41
6694: PUSH
6695: LD_INT 34
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: PUSH
6705: LD_INT 53
6707: PUSH
6708: LD_INT 62
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 37
6717: PUSH
6718: LD_INT 63
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 44
6727: PUSH
6728: LD_INT 45
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 37
6737: PUSH
6738: LD_INT 28
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: ST_TO_ADDR
6755: GO 6980
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6757: LD_INT 12
6759: PPUSH
6760: LD_INT 22
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: LD_INT 30
6775: PUSH
6776: LD_INT 4
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 30
6785: PUSH
6786: LD_INT 31
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 30
6795: PUSH
6796: LD_INT 32
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PPUSH
6813: CALL_OW 70
6817: NOT
6818: IFFALSE 6901
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_INT 27
6827: PUSH
6828: LD_INT 42
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 27
6837: PUSH
6838: LD_INT 32
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 53
6851: PUSH
6852: LD_INT 62
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 37
6861: PUSH
6862: LD_INT 63
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 44
6871: PUSH
6872: LD_INT 45
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 37
6881: PUSH
6882: LD_INT 28
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: ST_TO_ADDR
6899: GO 6980
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6901: LD_ADDR_VAR 0 6
6905: PUSH
6906: LD_INT 71
6908: PUSH
6909: LD_INT 67
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 54
6918: PUSH
6919: LD_INT 35
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 63
6932: PUSH
6933: LD_INT 40
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 37
6942: PUSH
6943: LD_INT 63
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 44
6952: PUSH
6953: LD_INT 45
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 37
6962: PUSH
6963: LD_INT 28
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
// end ; 1 :
6980: GO 7185
6982: LD_INT 1
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7094
6990: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
6991: LD_ADDR_VAR 0 6
6995: PUSH
6996: LD_INT 71
6998: PUSH
6999: LD_INT 67
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 82
7008: PUSH
7009: LD_INT 23
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 53
7018: PUSH
7019: LD_INT 7
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 43
7028: PUSH
7029: LD_INT 10
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 53
7044: PUSH
7045: LD_INT 62
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 37
7054: PUSH
7055: LD_INT 63
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 44
7064: PUSH
7065: LD_INT 45
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 37
7074: PUSH
7075: LD_INT 28
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 7185
7094: LD_INT 2
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7184
7102: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 90
7110: PUSH
7111: LD_INT 59
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 108
7120: PUSH
7121: LD_INT 64
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 82
7134: PUSH
7135: LD_INT 75
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 73
7144: PUSH
7145: LD_INT 67
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 101
7154: PUSH
7155: LD_INT 65
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 108
7164: PUSH
7165: LD_INT 62
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: ST_TO_ADDR
7182: GO 7185
7184: POP
// if not attackFormula then
7185: LD_VAR 0 6
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 8836
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7194: LD_ADDR_VAR 0 7
7198: PUSH
7199: LD_EXP 47
7203: PPUSH
7204: LD_INT 25
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 72
7218: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7219: LD_ADDR_VAR 0 8
7223: PUSH
7224: LD_EXP 47
7228: PPUSH
7229: LD_INT 25
7231: PUSH
7232: LD_INT 4
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PPUSH
7239: CALL_OW 72
7243: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7244: LD_ADDR_VAR 0 9
7248: PUSH
7249: LD_EXP 47
7253: PPUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 3
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 72
7268: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7269: LD_ADDR_VAR 0 10
7273: PUSH
7274: LD_EXP 47
7278: PPUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 72
7293: ST_TO_ADDR
// if sci then
7294: LD_VAR 0 8
7298: IFFALSE 7335
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7300: LD_VAR 0 8
7304: PPUSH
7305: LD_VAR 0 6
7309: PUSH
7310: LD_INT 2
7312: ARRAY
7313: PUSH
7314: LD_INT 1
7316: ARRAY
7317: PPUSH
7318: LD_VAR 0 6
7322: PUSH
7323: LD_INT 2
7325: ARRAY
7326: PUSH
7327: LD_INT 2
7329: ARRAY
7330: PPUSH
7331: CALL_OW 111
// repeat wait ( 10 ) ;
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7342: LD_ADDR_VAR 0 7
7346: PUSH
7347: LD_EXP 47
7351: PPUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 72
7366: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7367: LD_ADDR_VAR 0 8
7371: PUSH
7372: LD_EXP 47
7376: PPUSH
7377: LD_INT 25
7379: PUSH
7380: LD_INT 4
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PPUSH
7387: CALL_OW 72
7391: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7392: LD_ADDR_VAR 0 9
7396: PUSH
7397: LD_EXP 47
7401: PPUSH
7402: LD_INT 25
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL_OW 72
7416: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7417: LD_ADDR_VAR 0 10
7421: PUSH
7422: LD_EXP 47
7426: PPUSH
7427: LD_INT 21
7429: PUSH
7430: LD_INT 2
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 72
7441: ST_TO_ADDR
// if sol then
7442: LD_VAR 0 7
7446: IFFALSE 7867
// begin for i in sol do
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: LD_VAR 0 7
7457: PUSH
7458: FOR_IN
7459: IFFALSE 7865
// begin tag := GetTag ( i ) ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: LD_VAR 0 2
7470: PPUSH
7471: CALL_OW 110
7475: ST_TO_ADDR
// if not tag then
7476: LD_VAR 0 4
7480: NOT
7481: IFFALSE 7590
// begin if GetLives ( i ) = 1000 then
7483: LD_VAR 0 2
7487: PPUSH
7488: CALL_OW 256
7492: PUSH
7493: LD_INT 1000
7495: EQUAL
7496: IFFALSE 7512
// SetTag ( i , 1 ) else
7498: LD_VAR 0 2
7502: PPUSH
7503: LD_INT 1
7505: PPUSH
7506: CALL_OW 109
7510: GO 7588
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7512: LD_VAR 0 2
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 6
7534: PUSH
7535: LD_INT 2
7537: ARRAY
7538: PUSH
7539: LD_INT 2
7541: ARRAY
7542: PPUSH
7543: CALL_OW 297
7547: PUSH
7548: LD_INT 10
7550: GREATER
7551: IFFALSE 7588
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7553: LD_VAR 0 2
7557: PPUSH
7558: LD_VAR 0 6
7562: PUSH
7563: LD_INT 2
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_VAR 0 6
7575: PUSH
7576: LD_INT 2
7578: ARRAY
7579: PUSH
7580: LD_INT 2
7582: ARRAY
7583: PPUSH
7584: CALL_OW 111
// end else
7588: GO 7863
// begin if GetLives ( i ) < 760 then
7590: LD_VAR 0 2
7594: PPUSH
7595: CALL_OW 256
7599: PUSH
7600: LD_INT 760
7602: LESS
7603: IFFALSE 7654
// begin SetTag ( i , 0 ) ;
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7617: LD_VAR 0 2
7621: PPUSH
7622: LD_VAR 0 6
7626: PUSH
7627: LD_INT 2
7629: ARRAY
7630: PUSH
7631: LD_INT 1
7633: ARRAY
7634: PPUSH
7635: LD_VAR 0 6
7639: PUSH
7640: LD_INT 2
7642: ARRAY
7643: PUSH
7644: LD_INT 2
7646: ARRAY
7647: PPUSH
7648: CALL_OW 111
// end else
7652: GO 7863
// if tag <= attackFormula [ 1 ] then
7654: LD_VAR 0 4
7658: PUSH
7659: LD_VAR 0 6
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: LESSEQUAL
7668: IFFALSE 7829
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 6
7679: PUSH
7680: LD_INT 1
7682: ARRAY
7683: PUSH
7684: LD_VAR 0 4
7688: ARRAY
7689: PUSH
7690: LD_INT 1
7692: ARRAY
7693: PPUSH
7694: LD_VAR 0 6
7698: PUSH
7699: LD_INT 1
7701: ARRAY
7702: PUSH
7703: LD_VAR 0 4
7707: ARRAY
7708: PUSH
7709: LD_INT 2
7711: ARRAY
7712: PPUSH
7713: CALL_OW 297
7717: PUSH
7718: LD_INT 6
7720: GREATER
7721: IFFALSE 7772
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_VAR 0 6
7732: PUSH
7733: LD_INT 1
7735: ARRAY
7736: PUSH
7737: LD_VAR 0 4
7741: ARRAY
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PPUSH
7747: LD_VAR 0 6
7751: PUSH
7752: LD_INT 1
7754: ARRAY
7755: PUSH
7756: LD_VAR 0 4
7760: ARRAY
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PPUSH
7766: CALL_OW 114
7770: GO 7827
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7772: LD_INT 81
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 91
7784: PUSH
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 10
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: NOT
7807: IFFALSE 7827
// SetTag ( i , tag + 1 ) ;
7809: LD_VAR 0 2
7813: PPUSH
7814: LD_VAR 0 4
7818: PUSH
7819: LD_INT 1
7821: PLUS
7822: PPUSH
7823: CALL_OW 109
// end else
7827: GO 7863
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7829: LD_VAR 0 2
7833: PPUSH
7834: LD_INT 81
7836: PUSH
7837: LD_INT 1
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PPUSH
7844: CALL_OW 69
7848: PPUSH
7849: LD_VAR 0 2
7853: PPUSH
7854: CALL_OW 74
7858: PPUSH
7859: CALL_OW 115
// end ; end ;
7863: GO 7458
7865: POP
7866: POP
// end ; if sci then
7867: LD_VAR 0 8
7871: IFFALSE 8140
// begin if not sol and not mech then
7873: LD_VAR 0 7
7877: NOT
7878: PUSH
7879: LD_VAR 0 9
7883: NOT
7884: AND
7885: IFFALSE 7937
// begin for i in sci do
7887: LD_ADDR_VAR 0 2
7891: PUSH
7892: LD_VAR 0 8
7896: PUSH
7897: FOR_IN
7898: IFFALSE 7933
// begin usForces := usForces union i ;
7900: LD_ADDR_EXP 44
7904: PUSH
7905: LD_EXP 44
7909: PUSH
7910: LD_VAR 0 2
7914: UNION
7915: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7916: LD_VAR 0 2
7920: PPUSH
7921: LD_INT 34
7923: PPUSH
7924: LD_INT 68
7926: PPUSH
7927: CALL_OW 111
// end ;
7931: GO 7897
7933: POP
7934: POP
// end else
7935: GO 8140
// for i in sci do
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: LD_VAR 0 8
7946: PUSH
7947: FOR_IN
7948: IFFALSE 8138
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7950: LD_VAR 0 2
7954: PPUSH
7955: LD_VAR 0 6
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PUSH
7964: LD_INT 1
7966: ARRAY
7967: PPUSH
7968: LD_VAR 0 6
7972: PUSH
7973: LD_INT 2
7975: ARRAY
7976: PUSH
7977: LD_INT 2
7979: ARRAY
7980: PPUSH
7981: CALL_OW 297
7985: PUSH
7986: LD_INT 10
7988: GREATER
7989: IFFALSE 8028
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
7991: LD_VAR 0 2
7995: PPUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 2
8003: ARRAY
8004: PUSH
8005: LD_INT 1
8007: ARRAY
8008: PPUSH
8009: LD_VAR 0 6
8013: PUSH
8014: LD_INT 2
8016: ARRAY
8017: PUSH
8018: LD_INT 2
8020: ARRAY
8021: PPUSH
8022: CALL_OW 111
8026: GO 8136
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8028: LD_VAR 0 7
8032: PPUSH
8033: LD_INT 3
8035: PUSH
8036: LD_INT 24
8038: PUSH
8039: LD_INT 1000
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 91
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 10
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 72
8074: IFFALSE 8136
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8076: LD_VAR 0 2
8080: PPUSH
8081: LD_VAR 0 7
8085: PPUSH
8086: LD_INT 3
8088: PUSH
8089: LD_INT 24
8091: PUSH
8092: LD_INT 1000
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 91
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 10
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 72
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: CALL_OW 128
8136: GO 7947
8138: POP
8139: POP
// end ; if mech then
8140: LD_VAR 0 9
8144: IFFALSE 8818
// begin for i in mech do
8146: LD_ADDR_VAR 0 2
8150: PUSH
8151: LD_VAR 0 9
8155: PUSH
8156: FOR_IN
8157: IFFALSE 8816
// begin tag := GetTag ( i ) ;
8159: LD_ADDR_VAR 0 4
8163: PUSH
8164: LD_VAR 0 2
8168: PPUSH
8169: CALL_OW 110
8173: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8174: LD_ADDR_VAR 0 11
8178: PUSH
8179: LD_VAR 0 2
8183: PPUSH
8184: CALL_OW 310
8188: ST_TO_ADDR
// if not tag then
8189: LD_VAR 0 4
8193: NOT
8194: IFFALSE 8529
// begin if veh then
8196: LD_VAR 0 11
8200: IFFALSE 8371
// begin if GetLives ( veh ) = 1000 then
8202: LD_VAR 0 11
8206: PPUSH
8207: CALL_OW 256
8211: PUSH
8212: LD_INT 1000
8214: EQUAL
8215: IFFALSE 8231
// SetTag ( i , 1 ) else
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_INT 1
8224: PPUSH
8225: CALL_OW 109
8229: GO 8369
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8231: LD_VAR 0 11
8235: PPUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_INT 3
8243: ARRAY
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: PPUSH
8249: LD_VAR 0 6
8253: PUSH
8254: LD_INT 3
8256: ARRAY
8257: PUSH
8258: LD_INT 2
8260: ARRAY
8261: PPUSH
8262: CALL_OW 297
8266: PUSH
8267: LD_INT 7
8269: GREATER
8270: IFFALSE 8309
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8272: LD_VAR 0 11
8276: PPUSH
8277: LD_VAR 0 6
8281: PUSH
8282: LD_INT 3
8284: ARRAY
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 6
8294: PUSH
8295: LD_INT 3
8297: ARRAY
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: PPUSH
8303: CALL_OW 111
8307: GO 8369
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8309: LD_INT 81
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 91
8321: PUSH
8322: LD_VAR 0 2
8326: PUSH
8327: LD_INT 10
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: NOT
8344: IFFALSE 8369
// begin ComExitVehicle ( i ) ;
8346: LD_VAR 0 2
8350: PPUSH
8351: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8355: LD_VAR 0 2
8359: PPUSH
8360: LD_VAR 0 11
8364: PPUSH
8365: CALL_OW 189
// end ; end else
8369: GO 8527
// if GetLives ( i ) < 400 then
8371: LD_VAR 0 2
8375: PPUSH
8376: CALL_OW 256
8380: PUSH
8381: LD_INT 400
8383: LESS
8384: IFFALSE 8435
// begin usAttackers := usAttackers diff i ;
8386: LD_ADDR_EXP 47
8390: PUSH
8391: LD_EXP 47
8395: PUSH
8396: LD_VAR 0 2
8400: DIFF
8401: ST_TO_ADDR
// usForces := usForces union i ;
8402: LD_ADDR_EXP 44
8406: PUSH
8407: LD_EXP 44
8411: PUSH
8412: LD_VAR 0 2
8416: UNION
8417: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_INT 34
8425: PPUSH
8426: LD_INT 68
8428: PPUSH
8429: CALL_OW 111
// end else
8433: GO 8527
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
8435: LD_VAR 0 10
8439: PPUSH
8440: LD_INT 58
8442: PUSH
8443: EMPTY
8444: LIST
8445: PUSH
8446: LD_INT 24
8448: PUSH
8449: LD_INT 1000
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: PUSH
8465: LD_VAR 0 2
8469: PPUSH
8470: CALL_OW 314
8474: NOT
8475: AND
8476: IFFALSE 8527
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: LD_VAR 0 10
8487: PPUSH
8488: LD_INT 58
8490: PUSH
8491: EMPTY
8492: LIST
8493: PUSH
8494: LD_INT 24
8496: PUSH
8497: LD_INT 250
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PPUSH
8508: CALL_OW 72
8512: PPUSH
8513: LD_VAR 0 2
8517: PPUSH
8518: CALL_OW 74
8522: PPUSH
8523: CALL_OW 120
// end else
8527: GO 8814
// begin if veh and GetLives ( veh ) < 760 then
8529: LD_VAR 0 11
8533: PUSH
8534: LD_VAR 0 11
8538: PPUSH
8539: CALL_OW 256
8543: PUSH
8544: LD_INT 760
8546: LESS
8547: AND
8548: IFFALSE 8599
// begin SetTag ( i , 0 ) ;
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_INT 0
8557: PPUSH
8558: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8562: LD_VAR 0 11
8566: PPUSH
8567: LD_VAR 0 6
8571: PUSH
8572: LD_INT 3
8574: ARRAY
8575: PUSH
8576: LD_INT 1
8578: ARRAY
8579: PPUSH
8580: LD_VAR 0 6
8584: PUSH
8585: LD_INT 3
8587: ARRAY
8588: PUSH
8589: LD_INT 2
8591: ARRAY
8592: PPUSH
8593: CALL_OW 111
// end else
8597: GO 8814
// if veh then
8599: LD_VAR 0 11
8603: IFFALSE 8814
// if tag <= attackFormula [ 4 ] then
8605: LD_VAR 0 4
8609: PUSH
8610: LD_VAR 0 6
8614: PUSH
8615: LD_INT 4
8617: ARRAY
8618: LESSEQUAL
8619: IFFALSE 8780
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8621: LD_VAR 0 11
8625: PPUSH
8626: LD_VAR 0 6
8630: PUSH
8631: LD_INT 4
8633: ARRAY
8634: PUSH
8635: LD_VAR 0 4
8639: ARRAY
8640: PUSH
8641: LD_INT 1
8643: ARRAY
8644: PPUSH
8645: LD_VAR 0 6
8649: PUSH
8650: LD_INT 4
8652: ARRAY
8653: PUSH
8654: LD_VAR 0 4
8658: ARRAY
8659: PUSH
8660: LD_INT 2
8662: ARRAY
8663: PPUSH
8664: CALL_OW 297
8668: PUSH
8669: LD_INT 6
8671: GREATER
8672: IFFALSE 8723
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8674: LD_VAR 0 11
8678: PPUSH
8679: LD_VAR 0 6
8683: PUSH
8684: LD_INT 4
8686: ARRAY
8687: PUSH
8688: LD_VAR 0 4
8692: ARRAY
8693: PUSH
8694: LD_INT 1
8696: ARRAY
8697: PPUSH
8698: LD_VAR 0 6
8702: PUSH
8703: LD_INT 4
8705: ARRAY
8706: PUSH
8707: LD_VAR 0 4
8711: ARRAY
8712: PUSH
8713: LD_INT 2
8715: ARRAY
8716: PPUSH
8717: CALL_OW 114
8721: GO 8778
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8723: LD_INT 81
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 91
8735: PUSH
8736: LD_VAR 0 11
8740: PUSH
8741: LD_INT 10
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 69
8757: NOT
8758: IFFALSE 8778
// SetTag ( i , tag + 1 ) ;
8760: LD_VAR 0 2
8764: PPUSH
8765: LD_VAR 0 4
8769: PUSH
8770: LD_INT 1
8772: PLUS
8773: PPUSH
8774: CALL_OW 109
// end else
8778: GO 8814
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8780: LD_VAR 0 11
8784: PPUSH
8785: LD_INT 81
8787: PUSH
8788: LD_INT 1
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PPUSH
8795: CALL_OW 69
8799: PPUSH
8800: LD_VAR 0 2
8804: PPUSH
8805: CALL_OW 74
8809: PPUSH
8810: CALL_OW 115
// end ; end ;
8814: GO 8156
8816: POP
8817: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8818: LD_EXP 47
8822: PPUSH
8823: LD_INT 52
8825: PUSH
8826: EMPTY
8827: LIST
8828: PPUSH
8829: CALL_OW 72
8833: NOT
8834: IFFALSE 7335
// end ;
8836: LD_VAR 0 1
8840: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8841: LD_INT 22
8843: PUSH
8844: LD_INT 1
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 32
8853: PUSH
8854: LD_INT 1
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PPUSH
8865: CALL_OW 69
8869: IFFALSE 8946
8871: GO 8873
8873: DISABLE
8874: LD_INT 0
8876: PPUSH
// begin enable ;
8877: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_INT 1
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 32
8895: PUSH
8896: LD_INT 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: PUSH
8912: FOR_IN
8913: IFFALSE 8944
// if GetFuel ( i ) < 10 then
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 261
8924: PUSH
8925: LD_INT 10
8927: LESS
8928: IFFALSE 8942
// SetFuel ( i , 10 ) ;
8930: LD_VAR 0 1
8934: PPUSH
8935: LD_INT 10
8937: PPUSH
8938: CALL_OW 240
8942: GO 8912
8944: POP
8945: POP
// end ; end_of_file
8946: PPOPN 1
8948: END
// export function Action ; var hasAll , i , tmp ; begin
8949: LD_INT 0
8951: PPUSH
8952: PPUSH
8953: PPUSH
8954: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
8955: LD_ADDR_VAR 0 2
8959: PUSH
8960: LD_INT 22
8962: PUSH
8963: LD_INT 2
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 21
8972: PUSH
8973: LD_INT 1
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 23
8982: PUSH
8983: LD_INT 2
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: LIST
8994: PPUSH
8995: CALL_OW 69
8999: PUSH
9000: LD_INT 7
9002: GREATEREQUAL
9003: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9004: LD_VAR 0 2
9008: PPUSH
9009: LD_STRING 03_HasAll
9011: PPUSH
9012: CALL_OW 39
// Video ( true ) ;
9016: LD_INT 1
9018: PPUSH
9019: CALL 71735 0 1
// CenterNowOnUnits ( Heike ) ;
9023: LD_EXP 28
9027: PPUSH
9028: CALL_OW 87
// wait ( 0 0$2 ) ;
9032: LD_INT 70
9034: PPUSH
9035: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9039: LD_EXP 36
9043: PPUSH
9044: LD_STRING DF-1-start
9046: PPUSH
9047: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9051: LD_EXP 28
9055: PPUSH
9056: LD_EXP 36
9060: PPUSH
9061: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9065: LD_EXP 28
9069: PPUSH
9070: LD_STRING DH-1-start
9072: PPUSH
9073: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9077: LD_EXP 37
9081: PPUSH
9082: LD_INT 92
9084: PPUSH
9085: LD_INT 21
9087: PPUSH
9088: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9092: LD_EXP 32
9096: PPUSH
9097: LD_INT 94
9099: PPUSH
9100: LD_INT 23
9102: PPUSH
9103: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9107: LD_EXP 40
9111: PUSH
9112: LD_INT 1
9114: ARRAY
9115: PPUSH
9116: LD_INT 90
9118: PPUSH
9119: LD_INT 23
9121: PPUSH
9122: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9126: LD_EXP 40
9130: PUSH
9131: LD_INT 2
9133: ARRAY
9134: PPUSH
9135: LD_INT 93
9137: PPUSH
9138: LD_INT 25
9140: PPUSH
9141: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9145: LD_EXP 40
9149: PPUSH
9150: LD_EXP 37
9154: PPUSH
9155: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9159: LD_EXP 37
9163: PUSH
9164: LD_EXP 32
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PPUSH
9173: LD_EXP 28
9177: PPUSH
9178: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9182: LD_EXP 28
9186: PPUSH
9187: LD_EXP 37
9191: PPUSH
9192: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9196: LD_INT 35
9198: PPUSH
9199: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9203: LD_EXP 37
9207: PPUSH
9208: LD_INT 92
9210: PPUSH
9211: LD_INT 21
9213: PPUSH
9214: CALL_OW 307
9218: IFFALSE 9196
// Say ( Omar , DO-1-start ) ;
9220: LD_EXP 37
9224: PPUSH
9225: LD_STRING DO-1-start
9227: PPUSH
9228: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9232: LD_EXP 28
9236: PPUSH
9237: LD_STRING DH-2-start
9239: PPUSH
9240: CALL_OW 88
// if hasAll then
9244: LD_VAR 0 2
9248: IFFALSE 9376
// begin Say ( Omar , DO-2-start ) ;
9250: LD_EXP 37
9254: PPUSH
9255: LD_STRING DO-2-start
9257: PPUSH
9258: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9262: LD_EXP 37
9266: PPUSH
9267: LD_STRING DO-3-start
9269: PPUSH
9270: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9274: LD_EXP 28
9278: PPUSH
9279: LD_STRING DH-3-start
9281: PPUSH
9282: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9286: LD_EXP 36
9290: PPUSH
9291: LD_STRING DF-2-start
9293: PPUSH
9294: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9298: LD_EXP 37
9302: PPUSH
9303: LD_EXP 36
9307: PPUSH
9308: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9312: LD_EXP 37
9316: PPUSH
9317: LD_STRING DO-4-start
9319: PPUSH
9320: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9324: LD_EXP 36
9328: PPUSH
9329: LD_STRING DF-3-start
9331: PPUSH
9332: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9336: LD_EXP 37
9340: PPUSH
9341: LD_STRING DO-5-start
9343: PPUSH
9344: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9348: LD_EXP 36
9352: PPUSH
9353: LD_STRING DF-4-start
9355: PPUSH
9356: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9360: LD_EXP 37
9364: PPUSH
9365: LD_EXP 28
9369: PPUSH
9370: CALL_OW 119
// end else
9374: GO 9476
// begin Say ( Omar , DO-2-start-a ) ;
9376: LD_EXP 37
9380: PPUSH
9381: LD_STRING DO-2-start-a
9383: PPUSH
9384: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9388: LD_EXP 37
9392: PPUSH
9393: LD_STRING DO-3-start-a
9395: PPUSH
9396: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9400: LD_EXP 28
9404: PPUSH
9405: LD_STRING DH-3-start-a
9407: PPUSH
9408: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9412: LD_EXP 36
9416: PPUSH
9417: LD_STRING DF-2-start-a
9419: PPUSH
9420: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9424: LD_EXP 37
9428: PPUSH
9429: LD_EXP 36
9433: PPUSH
9434: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9438: LD_EXP 37
9442: PPUSH
9443: LD_STRING DO-4-start-a
9445: PPUSH
9446: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9450: LD_EXP 36
9454: PPUSH
9455: LD_STRING DF-3-start-a
9457: PPUSH
9458: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9462: LD_EXP 37
9466: PPUSH
9467: LD_EXP 28
9471: PPUSH
9472: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9476: LD_INT 10
9478: PPUSH
9479: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9483: LD_EXP 37
9487: PPUSH
9488: LD_STRING DO-1-mission
9490: PPUSH
9491: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9495: LD_EXP 37
9499: PPUSH
9500: LD_STRING DO-2-mission
9502: PPUSH
9503: CALL_OW 88
// if not hasAll then
9507: LD_VAR 0 2
9511: NOT
9512: IFFALSE 9526
// Say ( Omar , DO-3-mission ) ;
9514: LD_EXP 37
9518: PPUSH
9519: LD_STRING DO-3-mission
9521: PPUSH
9522: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9526: LD_EXP 37
9530: PPUSH
9531: LD_STRING DO-4-mission
9533: PPUSH
9534: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9538: LD_EXP 28
9542: PPUSH
9543: LD_STRING DH-1-mission
9545: PPUSH
9546: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9550: LD_EXP 36
9554: PPUSH
9555: LD_STRING DF-1-mission
9557: PPUSH
9558: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9562: LD_EXP 37
9566: PPUSH
9567: LD_STRING DO-5-mission
9569: PPUSH
9570: CALL_OW 88
// if not hasAll then
9574: LD_VAR 0 2
9578: NOT
9579: IFFALSE 9714
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9581: LD_ADDR_VAR 0 4
9585: PUSH
9586: LD_INT 22
9588: PUSH
9589: LD_INT 2
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 21
9598: PUSH
9599: LD_INT 1
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 23
9608: PUSH
9609: LD_INT 2
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: PPUSH
9621: CALL_OW 69
9625: ST_TO_ADDR
// for i := 7 downto tmp do
9626: LD_ADDR_VAR 0 3
9630: PUSH
9631: DOUBLE
9632: LD_INT 7
9634: INC
9635: ST_TO_ADDR
9636: LD_VAR 0 4
9640: PUSH
9641: FOR_DOWNTO
9642: IFFALSE 9712
// begin if omarSquad < 3 then
9644: LD_EXP 40
9648: PUSH
9649: LD_INT 3
9651: LESS
9652: IFFALSE 9656
// break ;
9654: GO 9712
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9656: LD_EXP 40
9660: PUSH
9661: LD_INT 3
9663: ARRAY
9664: PPUSH
9665: LD_INT 2
9667: PPUSH
9668: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9672: LD_ADDR_EXP 42
9676: PUSH
9677: LD_EXP 42
9681: PUSH
9682: LD_EXP 40
9686: PUSH
9687: LD_INT 3
9689: ARRAY
9690: UNION
9691: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9692: LD_ADDR_EXP 40
9696: PUSH
9697: LD_EXP 40
9701: PPUSH
9702: LD_INT 3
9704: PPUSH
9705: CALL_OW 3
9709: ST_TO_ADDR
// end ;
9710: GO 9641
9712: POP
9713: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9714: LD_EXP 37
9718: PUSH
9719: LD_EXP 40
9723: ADD
9724: PPUSH
9725: LD_INT 103
9727: PPUSH
9728: LD_INT 9
9730: PPUSH
9731: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9735: LD_VAR 0 2
9739: PUSH
9740: LD_EXP 33
9744: PPUSH
9745: CALL_OW 302
9749: AND
9750: IFFALSE 9811
// begin wait ( 0 0$3 ) ;
9752: LD_INT 105
9754: PPUSH
9755: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9759: LD_EXP 33
9763: PPUSH
9764: LD_EXP 36
9768: PPUSH
9769: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9773: LD_EXP 33
9777: PPUSH
9778: LD_STRING DK-1-side
9780: PPUSH
9781: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9785: LD_EXP 36
9789: PPUSH
9790: LD_EXP 33
9794: PPUSH
9795: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9799: LD_EXP 36
9803: PPUSH
9804: LD_STRING DF-1-side
9806: PPUSH
9807: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9811: LD_INT 22
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PPUSH
9826: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9830: LD_EXP 36
9834: PUSH
9835: LD_EXP 39
9839: ADD
9840: PPUSH
9841: LD_INT 108
9843: PPUSH
9844: LD_INT 62
9846: PPUSH
9847: CALL_OW 111
// gameStarted := true ;
9851: LD_ADDR_EXP 3
9855: PUSH
9856: LD_INT 1
9858: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9859: LD_INT 105
9861: PPUSH
9862: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9866: LD_EXP 28
9870: PPUSH
9871: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9875: LD_EXP 28
9879: PPUSH
9880: LD_EXP 32
9884: PPUSH
9885: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9889: LD_INT 22
9891: PUSH
9892: LD_INT 2
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 69
9903: PUSH
9904: LD_EXP 28
9908: DIFF
9909: PPUSH
9910: LD_EXP 28
9914: PPUSH
9915: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
9919: LD_EXP 28
9923: PPUSH
9924: LD_STRING DH-1-explore
9926: PPUSH
9927: CALL_OW 88
// if Givi then
9931: LD_EXP 29
9935: IFFALSE 9951
// Say ( Givi , DG-1-explore ) else
9937: LD_EXP 29
9941: PPUSH
9942: LD_STRING DG-1-explore
9944: PPUSH
9945: CALL_OW 88
9949: GO 9988
// if heikeSecondSquad then
9951: LD_EXP 42
9955: IFFALSE 9988
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
9957: LD_EXP 42
9961: PPUSH
9962: LD_INT 26
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PPUSH
9972: CALL_OW 72
9976: PUSH
9977: LD_INT 1
9979: ARRAY
9980: PPUSH
9981: LD_STRING DArm-1-explore
9983: PPUSH
9984: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
9988: LD_EXP 32
9992: PPUSH
9993: LD_STRING DA-1-explore
9995: PPUSH
9996: CALL_OW 88
// if Sophia then
10000: LD_EXP 34
10004: IFFALSE 10082
// begin Say ( Sophia , DS-2-explore ) ;
10006: LD_EXP 34
10010: PPUSH
10011: LD_STRING DS-2-explore
10013: PPUSH
10014: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10018: LD_EXP 32
10022: PPUSH
10023: LD_STRING DA-2-explore
10025: PPUSH
10026: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10030: LD_EXP 34
10034: PPUSH
10035: LD_EXP 32
10039: PPUSH
10040: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10044: LD_EXP 32
10048: PPUSH
10049: LD_EXP 34
10053: PPUSH
10054: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10058: LD_EXP 34
10062: PPUSH
10063: LD_STRING DS-3-explore
10065: PPUSH
10066: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10070: LD_EXP 32
10074: PPUSH
10075: LD_STRING DA-3-explore
10077: PPUSH
10078: CALL_OW 88
// end ; if Mike then
10082: LD_EXP 30
10086: IFFALSE 10142
// begin Say ( Mike , DM-1-explore ) ;
10088: LD_EXP 30
10092: PPUSH
10093: LD_STRING DM-1-explore
10095: PPUSH
10096: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10100: LD_EXP 28
10104: PPUSH
10105: LD_STRING DH-2-explore
10107: PPUSH
10108: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10112: LD_EXP 30
10116: PPUSH
10117: LD_STRING DM-2-explore
10119: PPUSH
10120: CALL_OW 88
// if Kaia then
10124: LD_EXP 33
10128: IFFALSE 10142
// Say ( Kaia , DK-1-explore ) ;
10130: LD_EXP 33
10134: PPUSH
10135: LD_STRING DK-1-explore
10137: PPUSH
10138: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10142: LD_INT 22
10144: PUSH
10145: LD_INT 2
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PPUSH
10152: CALL_OW 69
10156: PPUSH
10157: CALL_OW 139
// Video ( false ) ;
10161: LD_INT 0
10163: PPUSH
10164: CALL 71735 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10168: LD_STRING BuildBase
10170: PPUSH
10171: CALL_OW 337
// SaveForQuickRestart ;
10175: CALL_OW 22
// end ;
10179: LD_VAR 0 1
10183: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10184: LD_EXP 5
10188: NOT
10189: PUSH
10190: LD_EXP 6
10194: NOT
10195: AND
10196: PUSH
10197: LD_INT 5
10199: PPUSH
10200: LD_INT 22
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 70
10214: AND
10215: PUSH
10216: LD_EXP 6
10220: NOT
10221: AND
10222: IFFALSE 10307
10224: GO 10226
10226: DISABLE
// begin if Mike then
10227: LD_EXP 30
10231: IFFALSE 10247
// Say ( Mike , DM-1-scout ) else
10233: LD_EXP 30
10237: PPUSH
10238: LD_STRING DM-1-scout
10240: PPUSH
10241: CALL_OW 88
10245: GO 10278
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10247: LD_EXP 42
10251: PPUSH
10252: LD_INT 26
10254: PUSH
10255: LD_INT 1
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PPUSH
10262: CALL_OW 72
10266: PUSH
10267: LD_INT 1
10269: ARRAY
10270: PPUSH
10271: LD_STRING DArm-1-explore
10273: PPUSH
10274: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10278: LD_INT 54
10280: PPUSH
10281: LD_INT 35
10283: PPUSH
10284: LD_INT 2
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10294: LD_INT 54
10296: PPUSH
10297: LD_INT 35
10299: PPUSH
10300: LD_INT 2
10302: PPUSH
10303: CALL_OW 331
// end ;
10307: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10308: LD_INT 6
10310: PPUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 70
10325: PUSH
10326: LD_EXP 6
10330: NOT
10331: AND
10332: IFFALSE 10586
10334: GO 10336
10336: DISABLE
10337: LD_INT 0
10339: PPUSH
10340: PPUSH
10341: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10342: LD_ADDR_VAR 0 1
10346: PUSH
10347: LD_EXP 42
10351: PPUSH
10352: LD_INT 26
10354: PUSH
10355: LD_INT 1
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 72
10366: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10367: LD_ADDR_VAR 0 2
10371: PUSH
10372: LD_EXP 42
10376: PPUSH
10377: LD_INT 26
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 72
10391: ST_TO_ADDR
// DialogueOn ;
10392: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10396: LD_INT 36
10398: PPUSH
10399: LD_INT 22
10401: PPUSH
10402: LD_INT 2
10404: PPUSH
10405: LD_INT 8
10407: PPUSH
10408: CALL_OW 330
// dwait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 68
// speakerOk := false ;
10419: LD_ADDR_VAR 0 3
10423: PUSH
10424: LD_INT 0
10426: ST_TO_ADDR
// if Mike then
10427: LD_EXP 30
10431: IFFALSE 10453
// speakerOk := Say ( Mike , DM-1-spot ) else
10433: LD_ADDR_VAR 0 3
10437: PUSH
10438: LD_EXP 30
10442: PPUSH
10443: LD_STRING DM-1-spot
10445: PPUSH
10446: CALL_OW 88
10450: ST_TO_ADDR
10451: GO 10481
// if randomMen then
10453: LD_VAR 0 1
10457: IFFALSE 10481
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10459: LD_ADDR_VAR 0 3
10463: PUSH
10464: LD_VAR 0 1
10468: PUSH
10469: LD_INT 1
10471: ARRAY
10472: PPUSH
10473: LD_STRING DArm-1-spot-a
10475: PPUSH
10476: CALL_OW 88
10480: ST_TO_ADDR
// if speakerOk then
10481: LD_VAR 0 3
10485: IFFALSE 10529
// begin if Givi then
10487: LD_EXP 29
10491: IFFALSE 10507
// Say ( Givi , DG-1-spot ) else
10493: LD_EXP 29
10497: PPUSH
10498: LD_STRING DG-1-spot
10500: PPUSH
10501: CALL_OW 88
10505: GO 10529
// if randomWomen then
10507: LD_VAR 0 2
10511: IFFALSE 10529
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10513: LD_VAR 0 2
10517: PUSH
10518: LD_INT 1
10520: ARRAY
10521: PPUSH
10522: LD_STRING DArf-1-spot-a
10524: PPUSH
10525: CALL_OW 88
// end ; if Mike then
10529: LD_EXP 30
10533: IFFALSE 10549
// Say ( Heike , DH-1-spot ) else
10535: LD_EXP 28
10539: PPUSH
10540: LD_STRING DH-1-spot
10542: PPUSH
10543: CALL_OW 88
10547: GO 10561
// Say ( Heike , DH-1-spot-a ) ;
10549: LD_EXP 28
10553: PPUSH
10554: LD_STRING DH-1-spot-a
10556: PPUSH
10557: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10561: LD_INT 36
10563: PPUSH
10564: LD_INT 22
10566: PPUSH
10567: LD_INT 2
10569: PPUSH
10570: CALL_OW 331
// DialogueOff ;
10574: CALL_OW 7
// americanBaseSpoted := true ;
10578: LD_ADDR_EXP 5
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// end ;
10586: PPOPN 3
10588: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10589: LD_EXP 5
10593: NOT
10594: PUSH
10595: LD_INT 22
10597: PUSH
10598: LD_INT 2
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 101
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PPUSH
10619: CALL_OW 69
10623: AND
10624: PUSH
10625: LD_EXP 6
10629: NOT
10630: AND
10631: IFFALSE 10717
10633: GO 10635
10635: DISABLE
10636: LD_INT 0
10638: PPUSH
// begin americanBaseSpoted := true ;
10639: LD_ADDR_EXP 5
10643: PUSH
10644: LD_INT 1
10646: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10647: LD_ADDR_VAR 0 1
10651: PUSH
10652: LD_EXP 42
10656: PPUSH
10657: LD_INT 26
10659: PUSH
10660: LD_INT 1
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PPUSH
10667: CALL_OW 72
10671: ST_TO_ADDR
// if not randomMen then
10672: LD_VAR 0 1
10676: NOT
10677: IFFALSE 10681
// exit ;
10679: GO 10717
// DialogueOn ;
10681: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10685: LD_VAR 0 1
10689: PUSH
10690: LD_INT 1
10692: ARRAY
10693: PPUSH
10694: LD_STRING DArm-1-spot-a
10696: PPUSH
10697: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10701: LD_EXP 28
10705: PPUSH
10706: LD_STRING DH-1-spot-a
10708: PPUSH
10709: CALL_OW 88
// DialogueOff ;
10713: CALL_OW 7
// end ;
10717: PPOPN 1
10719: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10720: LD_INT 11
10722: PPUSH
10723: CALL_OW 255
10727: PUSH
10728: LD_INT 2
10730: EQUAL
10731: PUSH
10732: LD_INT 7
10734: PPUSH
10735: LD_INT 22
10737: PUSH
10738: LD_INT 1
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 3
10747: PUSH
10748: LD_INT 50
10750: PUSH
10751: EMPTY
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 30
10760: PUSH
10761: LD_INT 31
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 70
10777: OR
10778: PUSH
10779: LD_INT 7
10781: PPUSH
10782: LD_INT 22
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 70
10796: PUSH
10797: LD_INT 1
10799: GREATER
10800: OR
10801: PUSH
10802: LD_EXP 44
10806: PUSH
10807: LD_INT 4
10809: LESSEQUAL
10810: OR
10811: IFFALSE 11337
10813: GO 10815
10815: DISABLE
10816: LD_INT 0
10818: PPUSH
10819: PPUSH
// begin wait ( 0 0$3 ) ;
10820: LD_INT 105
10822: PPUSH
10823: CALL_OW 67
// americanStartRun := true ;
10827: LD_ADDR_EXP 14
10831: PUSH
10832: LD_INT 1
10834: ST_TO_ADDR
// if IsOk ( usCommander ) then
10835: LD_EXP 45
10839: PPUSH
10840: CALL_OW 302
10844: IFFALSE 10874
// begin usForces := usForces union usCommander ;
10846: LD_ADDR_EXP 44
10850: PUSH
10851: LD_EXP 44
10855: PUSH
10856: LD_EXP 45
10860: UNION
10861: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10862: LD_EXP 45
10866: PPUSH
10867: LD_STRING DUsm-1-assault
10869: PPUSH
10870: CALL_OW 88
// end ; for i in usForces do
10874: LD_ADDR_VAR 0 1
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: FOR_IN
10885: IFFALSE 10931
// begin if IsInUnit ( i ) then
10887: LD_VAR 0 1
10891: PPUSH
10892: CALL_OW 310
10896: IFFALSE 10907
// ComExitBuilding ( i ) ;
10898: LD_VAR 0 1
10902: PPUSH
10903: CALL_OW 122
// wait ( 3 ) ;
10907: LD_INT 3
10909: PPUSH
10910: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10914: LD_VAR 0 1
10918: PPUSH
10919: LD_INT 34
10921: PPUSH
10922: LD_INT 67
10924: PPUSH
10925: CALL_OW 111
// end ;
10929: GO 10884
10931: POP
10932: POP
// Say ( Heike , DH-1-assault ) ;
10933: LD_EXP 28
10937: PPUSH
10938: LD_STRING DH-1-assault
10940: PPUSH
10941: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10945: LD_INT 35
10947: PPUSH
10948: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10952: LD_VAR 0 1
10956: PPUSH
10957: LD_INT 34
10959: PPUSH
10960: LD_INT 67
10962: PPUSH
10963: CALL_OW 111
// until not usForces ;
10967: LD_EXP 44
10971: NOT
10972: IFFALSE 10945
// music_nat := 2 ;
10974: LD_ADDR_OWVAR 71
10978: PUSH
10979: LD_INT 2
10981: ST_TO_ADDR
// music_class := music_victory ;
10982: LD_ADDR_OWVAR 72
10986: PUSH
10987: LD_INT 4
10989: ST_TO_ADDR
// if not americanHasEscaped then
10990: LD_EXP 8
10994: NOT
10995: IFFALSE 11016
// begin Say ( Heike , DH-2-assault ) ;
10997: LD_EXP 28
11001: PPUSH
11002: LD_STRING DH-2-assault
11004: PPUSH
11005: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11009: LD_STRING ACH_CLEAN
11011: PPUSH
11012: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11016: LD_INT 70
11018: PPUSH
11019: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11023: LD_INT 35
11025: PPUSH
11026: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11030: LD_INT 22
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 21
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 3
11052: PUSH
11053: LD_INT 50
11055: PUSH
11056: EMPTY
11057: LIST
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 69
11072: NOT
11073: IFFALSE 11023
// InGameOn ;
11075: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11079: LD_INT 11
11081: PPUSH
11082: CALL_OW 255
11086: PUSH
11087: LD_INT 2
11089: EQUAL
11090: NOT
11091: IFFALSE 11103
// SetSide ( usDepot , 2 ) ;
11093: LD_INT 11
11095: PPUSH
11096: LD_INT 2
11098: PPUSH
11099: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11103: LD_INT 35
11105: PPUSH
11106: LD_INT 22
11108: PPUSH
11109: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11113: LD_EXP 28
11117: PPUSH
11118: LD_INT 35
11120: PPUSH
11121: LD_INT 22
11123: PPUSH
11124: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11128: LD_EXP 28
11132: PPUSH
11133: LD_INT 38
11135: PPUSH
11136: LD_INT 25
11138: PPUSH
11139: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11143: LD_EXP 41
11147: PUSH
11148: LD_EXP 42
11152: UNION
11153: PPUSH
11154: LD_INT 39
11156: PPUSH
11157: LD_INT 26
11159: PPUSH
11160: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11164: LD_EXP 41
11168: PUSH
11169: LD_EXP 42
11173: UNION
11174: PPUSH
11175: LD_EXP 28
11179: PPUSH
11180: CALL_OW 179
// p := 0 ;
11184: LD_ADDR_VAR 0 2
11188: PUSH
11189: LD_INT 0
11191: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11192: LD_INT 35
11194: PPUSH
11195: CALL_OW 67
// p := p + 1 ;
11199: LD_ADDR_VAR 0 2
11203: PUSH
11204: LD_VAR 0 2
11208: PUSH
11209: LD_INT 1
11211: PLUS
11212: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11213: LD_EXP 28
11217: PPUSH
11218: CALL_OW 314
11222: NOT
11223: PUSH
11224: LD_VAR 0 2
11228: PUSH
11229: LD_INT 10
11231: GREATER
11232: OR
11233: IFFALSE 11192
// Say ( Heike , DH-1-capture ) ;
11235: LD_EXP 28
11239: PPUSH
11240: LD_STRING DH-1-capture
11242: PPUSH
11243: CALL_OW 88
// if Markov then
11247: LD_EXP 35
11251: IFFALSE 11265
// Say ( Markov , DMar-1-capture ) ;
11253: LD_EXP 35
11257: PPUSH
11258: LD_STRING DMar-1-capture
11260: PPUSH
11261: CALL_OW 88
// if Sophia then
11265: LD_EXP 34
11269: IFFALSE 11295
// begin Say ( Heike , DH-2-capture ) ;
11271: LD_EXP 28
11275: PPUSH
11276: LD_STRING DH-2-capture
11278: PPUSH
11279: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11283: LD_EXP 34
11287: PPUSH
11288: LD_STRING DS-1-capture
11290: PPUSH
11291: CALL_OW 88
// end ; InGameOff ;
11295: CALL_OW 9
// music_nat := music_auto ;
11299: LD_ADDR_OWVAR 71
11303: PUSH
11304: LD_INT 0
11306: ST_TO_ADDR
// music_class := music_auto ;
11307: LD_ADDR_OWVAR 72
11311: PUSH
11312: LD_INT 0
11314: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11315: LD_STRING ConstructBase
11317: PPUSH
11318: CALL_OW 337
// wait ( 0 0$3 ) ;
11322: LD_INT 105
11324: PPUSH
11325: CALL_OW 67
// americanBaseCaptured := true ;
11329: LD_ADDR_EXP 6
11333: PUSH
11334: LD_INT 1
11336: ST_TO_ADDR
// end ;
11337: PPOPN 2
11339: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11340: LD_EXP 13
11344: PUSH
11345: LD_INT 3
11347: GREATEREQUAL
11348: IFFALSE 11360
11350: GO 11352
11352: DISABLE
// SetAchievement ( ACH_ENG ) ;
11353: LD_STRING ACH_ENG
11355: PPUSH
11356: CALL_OW 543
11360: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11361: LD_INT 22
11363: PUSH
11364: LD_INT 2
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 25
11373: PUSH
11374: LD_INT 15
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PPUSH
11385: CALL_OW 69
11389: PUSH
11390: LD_INT 4
11392: GREATEREQUAL
11393: IFFALSE 11405
11395: GO 11397
11397: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11398: LD_STRING ACH_APEGEN
11400: PPUSH
11401: CALL_OW 543
11405: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11406: LD_INT 22
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 30
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 3
11428: PUSH
11429: LD_INT 57
11431: PUSH
11432: EMPTY
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PPUSH
11444: CALL_OW 69
11448: IFFALSE 11691
11450: GO 11452
11452: DISABLE
// begin workshopBuilded := true ;
11453: LD_ADDR_EXP 10
11457: PUSH
11458: LD_INT 1
11460: ST_TO_ADDR
// if IsOk ( Markov ) then
11461: LD_EXP 35
11465: PPUSH
11466: CALL_OW 302
11470: IFFALSE 11529
// begin Say ( Heike , DH-1-shop-a ) ;
11472: LD_EXP 28
11476: PPUSH
11477: LD_STRING DH-1-shop-a
11479: PPUSH
11480: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11484: LD_INT 47
11486: PPUSH
11487: LD_INT 2
11489: PPUSH
11490: CALL_OW 321
11494: PUSH
11495: LD_INT 2
11497: EQUAL
11498: PUSH
11499: LD_INT 45
11501: PPUSH
11502: LD_INT 2
11504: PPUSH
11505: CALL_OW 321
11509: PUSH
11510: LD_INT 2
11512: EQUAL
11513: AND
11514: NOT
11515: IFFALSE 11529
// Say ( Markov , DMar-1-shop-a ) ;
11517: LD_EXP 35
11521: PPUSH
11522: LD_STRING DMar-1-shop-a
11524: PPUSH
11525: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11529: LD_INT 35
11531: PPUSH
11532: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11536: LD_INT 47
11538: PPUSH
11539: LD_INT 2
11541: PPUSH
11542: CALL_OW 321
11546: PUSH
11547: LD_INT 2
11549: EQUAL
11550: PUSH
11551: LD_INT 45
11553: PPUSH
11554: LD_INT 2
11556: PPUSH
11557: CALL_OW 321
11561: PUSH
11562: LD_INT 2
11564: EQUAL
11565: OR
11566: IFFALSE 11529
// DialogueOn ;
11568: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11572: LD_EXP 35
11576: PPUSH
11577: LD_STRING DMar-1-shop
11579: PPUSH
11580: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11584: LD_EXP 28
11588: PPUSH
11589: LD_STRING DH-1-shop
11591: PPUSH
11592: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11596: LD_EXP 35
11600: PPUSH
11601: LD_STRING DMar-2-shop
11603: PPUSH
11604: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11608: LD_EXP 35
11612: PPUSH
11613: LD_STRING DMar-3-shop
11615: PPUSH
11616: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11620: LD_EXP 28
11624: PPUSH
11625: LD_STRING DH-2-shop
11627: PPUSH
11628: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11632: LD_EXP 35
11636: PPUSH
11637: LD_STRING DMar-4-shop
11639: PPUSH
11640: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11644: LD_EXP 28
11648: PPUSH
11649: LD_STRING DH-3-shop
11651: PPUSH
11652: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11656: LD_EXP 35
11660: PPUSH
11661: LD_STRING DMar-5-shop
11663: PPUSH
11664: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11668: LD_EXP 28
11672: PPUSH
11673: LD_STRING DH-4-shop
11675: PPUSH
11676: CALL_OW 88
// DialogueOff ;
11680: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11684: LD_STRING ConstructVeh
11686: PPUSH
11687: CALL_OW 337
// end ;
11691: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11692: LD_INT 2
11694: PPUSH
11695: LD_INT 2
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL 35837 0 3
11705: PUSH
11706: LD_INT 0
11708: EQUAL
11709: IFFALSE 11721
11711: GO 11713
11713: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11714: LD_STRING Techs
11716: PPUSH
11717: CALL_OW 337
11721: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11722: LD_EXP 35
11726: PPUSH
11727: CALL_OW 302
11731: PUSH
11732: LD_INT 22
11734: PUSH
11735: LD_INT 2
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: LD_INT 34
11747: PUSH
11748: LD_INT 22
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 35
11757: PUSH
11758: LD_INT 22
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 69
11778: AND
11779: IFFALSE 11886
11781: GO 11783
11783: DISABLE
// begin DialogueOn ;
11784: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11788: LD_INT 22
11790: PUSH
11791: LD_INT 2
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 2
11800: PUSH
11801: LD_INT 34
11803: PUSH
11804: LD_INT 22
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 35
11813: PUSH
11814: LD_INT 22
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 69
11834: PPUSH
11835: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11839: LD_INT 10
11841: PPUSH
11842: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11846: LD_EXP 28
11850: PPUSH
11851: LD_STRING DH-1-bal
11853: PPUSH
11854: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
11858: LD_EXP 35
11862: PPUSH
11863: LD_STRING DMar-1-bal
11865: PPUSH
11866: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
11870: LD_EXP 28
11874: PPUSH
11875: LD_STRING DH-2-bal
11877: PPUSH
11878: CALL_OW 88
// DialogueOff ;
11882: CALL_OW 7
// end ;
11886: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
11887: LD_EXP 32
11891: PPUSH
11892: CALL_OW 302
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 6
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PPUSH
11921: CALL_OW 69
11925: AND
11926: IFFALSE 11987
11928: GO 11930
11930: DISABLE
// begin DialogueOn ;
11931: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
11935: LD_EXP 32
11939: PPUSH
11940: LD_STRING DA-1-lab
11942: PPUSH
11943: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
11947: LD_EXP 28
11951: PPUSH
11952: LD_STRING DH-1-lab
11954: PPUSH
11955: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
11959: LD_EXP 32
11963: PPUSH
11964: LD_STRING DA-2-lab
11966: PPUSH
11967: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
11971: LD_EXP 28
11975: PPUSH
11976: LD_STRING DH-2-lab
11978: PPUSH
11979: CALL_OW 88
// DialogueOff ;
11983: CALL_OW 7
// end ;
11987: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
11988: LD_EXP 33
11992: PPUSH
11993: CALL_OW 302
11997: PUSH
11998: LD_INT 22
12000: PUSH
12001: LD_INT 2
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 25
12010: PUSH
12011: LD_INT 15
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PPUSH
12022: CALL_OW 69
12026: AND
12027: PUSH
12028: LD_INT 81
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: NOT
12043: AND
12044: IFFALSE 12226
12046: GO 12048
12048: DISABLE
12049: LD_INT 0
12051: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12052: LD_ADDR_VAR 0 1
12056: PUSH
12057: LD_INT 22
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 25
12069: PUSH
12070: LD_INT 15
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PPUSH
12081: CALL_OW 69
12085: ST_TO_ADDR
// InGameOn ;
12086: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12090: LD_VAR 0 1
12094: PUSH
12095: LD_INT 1
12097: ARRAY
12098: PPUSH
12099: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12103: LD_VAR 0 1
12107: PUSH
12108: LD_INT 1
12110: ARRAY
12111: PPUSH
12112: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12116: LD_EXP 33
12120: PPUSH
12121: LD_STRING DK-1-apesol
12123: PPUSH
12124: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12128: LD_VAR 0 1
12132: PUSH
12133: LD_INT 1
12135: ARRAY
12136: PPUSH
12137: LD_INT 35
12139: PPUSH
12140: LD_INT 28
12142: PPUSH
12143: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12147: LD_VAR 0 1
12151: PUSH
12152: LD_INT 1
12154: ARRAY
12155: PPUSH
12156: LD_INT 36
12158: PPUSH
12159: LD_INT 17
12161: PPUSH
12162: CALL_OW 171
// DialogueOn ;
12166: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12170: LD_EXP 32
12174: PPUSH
12175: LD_STRING DA-1-apesol
12177: PPUSH
12178: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12182: LD_EXP 33
12186: PPUSH
12187: LD_STRING DK-2-apesol
12189: PPUSH
12190: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12194: LD_EXP 32
12198: PPUSH
12199: LD_STRING DA-2-apesol
12201: PPUSH
12202: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12206: LD_EXP 33
12210: PPUSH
12211: LD_STRING DK-3-apesol
12213: PPUSH
12214: CALL_OW 88
// DialogueOff ;
12218: CALL_OW 7
// InGameOff ;
12222: CALL_OW 9
// end ;
12226: PPOPN 1
12228: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12229: LD_EXP 34
12233: PPUSH
12234: CALL_OW 302
12238: PUSH
12239: LD_INT 22
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 25
12251: PUSH
12252: LD_INT 16
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PPUSH
12263: CALL_OW 69
12267: AND
12268: PUSH
12269: LD_INT 81
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 69
12283: NOT
12284: AND
12285: IFFALSE 12548
12287: GO 12289
12289: DISABLE
12290: LD_INT 0
12292: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12293: LD_ADDR_VAR 0 1
12297: PUSH
12298: LD_INT 22
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 25
12310: PUSH
12311: LD_INT 16
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PPUSH
12322: CALL_OW 69
12326: ST_TO_ADDR
// InGameOn ;
12327: CALL_OW 8
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12331: LD_INT 5
12333: PPUSH
12334: LD_INT 35
12336: PPUSH
12337: LD_INT 22
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12347: LD_EXP 34
12351: PPUSH
12352: LD_VAR 0 1
12356: PUSH
12357: LD_INT 1
12359: ARRAY
12360: PPUSH
12361: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12365: LD_VAR 0 1
12369: PUSH
12370: LD_INT 1
12372: ARRAY
12373: PPUSH
12374: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12378: LD_VAR 0 1
12382: PUSH
12383: LD_INT 1
12385: ARRAY
12386: PPUSH
12387: CALL_OW 122
// wait ( 0 0$2 ) ;
12391: LD_INT 70
12393: PPUSH
12394: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12398: LD_EXP 34
12402: PPUSH
12403: LD_STRING DS-1-apeeng
12405: PPUSH
12406: CALL_OW 88
// if IsOk ( Kamil ) then
12410: LD_EXP 31
12414: PPUSH
12415: CALL_OW 302
12419: IFFALSE 12544
// begin Say ( Kamil , DKam-1-apeeng ) ;
12421: LD_EXP 31
12425: PPUSH
12426: LD_STRING DKam-1-apeeng
12428: PPUSH
12429: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12433: LD_EXP 34
12437: PPUSH
12438: LD_STRING DS-2-apeeng
12440: PPUSH
12441: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12445: LD_EXP 31
12449: PPUSH
12450: LD_STRING DKam-2-apeeng
12452: PPUSH
12453: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12457: LD_EXP 34
12461: PPUSH
12462: LD_STRING DS-3-apeeng
12464: PPUSH
12465: CALL_OW 88
// if not IsOK ( Kaia ) then
12469: LD_EXP 33
12473: PPUSH
12474: CALL_OW 302
12478: NOT
12479: IFFALSE 12487
// begin InGameOff ;
12481: CALL_OW 9
// exit ;
12485: GO 12548
// end ; Say ( Kaia , DK-1-apeeng ) ;
12487: LD_EXP 33
12491: PPUSH
12492: LD_STRING DK-1-apeeng
12494: PPUSH
12495: CALL_OW 88
// if not IsOk ( Givi ) then
12499: LD_EXP 29
12503: PPUSH
12504: CALL_OW 302
12508: NOT
12509: IFFALSE 12520
// begin Video ( false ) ;
12511: LD_INT 0
12513: PPUSH
12514: CALL 71735 0 1
// exit ;
12518: GO 12548
// end ; Say ( Givi , DG-1-apeeng ) ;
12520: LD_EXP 29
12524: PPUSH
12525: LD_STRING DG-1-apeeng
12527: PPUSH
12528: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12532: LD_EXP 33
12536: PPUSH
12537: LD_STRING DK-2-apeeng
12539: PPUSH
12540: CALL_OW 88
// end ; InGameOff ;
12544: CALL_OW 9
// end ;
12548: PPOPN 1
12550: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12551: LD_EXP 4
12555: PUSH
12556: LD_INT 22
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 30
12568: PUSH
12569: LD_INT 0
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 69
12584: AND
12585: IFFALSE 12750
12587: GO 12589
12589: DISABLE
// begin wait ( 0 0$10 ) ;
12590: LD_INT 350
12592: PPUSH
12593: CALL_OW 67
// DialogueOn ;
12597: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12601: LD_EXP 36
12605: PPUSH
12606: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12610: LD_EXP 36
12614: PPUSH
12615: LD_STRING DF-1-distribution
12617: PPUSH
12618: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12622: LD_EXP 28
12626: PPUSH
12627: LD_STRING DH-2-distribution
12629: PPUSH
12630: CALL_OW 88
// if IsOk ( Kaia ) then
12634: LD_EXP 33
12638: PPUSH
12639: CALL_OW 302
12643: IFFALSE 12704
// begin Say ( Kaia , DK-1-distribution ) ;
12645: LD_EXP 33
12649: PPUSH
12650: LD_STRING DK-1-distribution
12652: PPUSH
12653: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12657: LD_EXP 28
12661: PPUSH
12662: LD_STRING DH-1-distribution
12664: PPUSH
12665: CALL_OW 88
// if IsOk ( Givi ) then
12669: LD_EXP 29
12673: PPUSH
12674: CALL_OW 302
12678: IFFALSE 12704
// begin Say ( Givi , DG-1-distribution ) ;
12680: LD_EXP 29
12684: PPUSH
12685: LD_STRING DG-1-distribution
12687: PPUSH
12688: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12692: LD_EXP 28
12696: PPUSH
12697: LD_STRING DH-3-distribution
12699: PPUSH
12700: CALL_OW 88
// end ; end ; DialogueOff ;
12704: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12708: LD_STRING Crates1
12710: PPUSH
12711: CALL_OW 337
// farmerRequestedCrates := 300 ;
12715: LD_ADDR_EXP 16
12719: PUSH
12720: LD_INT 300
12722: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12723: LD_STRING FarmerCrates
12725: PPUSH
12726: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12730: LD_INT 10
12732: PPUSH
12733: LD_INT 1
12735: PPUSH
12736: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12740: LD_INT 108
12742: PPUSH
12743: LD_INT 61
12745: PPUSH
12746: CALL_OW 86
// end ;
12750: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12751: LD_EXP 6
12755: PUSH
12756: LD_INT 22
12758: PUSH
12759: LD_INT 2
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: LD_INT 57
12771: PUSH
12772: EMPTY
12773: LIST
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 2
12781: PUSH
12782: LD_INT 30
12784: PUSH
12785: LD_INT 6
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 30
12794: PUSH
12795: LD_INT 7
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: PPUSH
12812: CALL_OW 69
12816: AND
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 3
12830: PUSH
12831: LD_INT 57
12833: PUSH
12834: EMPTY
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 30
12843: PUSH
12844: LD_INT 4
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: LIST
12855: PPUSH
12856: CALL_OW 69
12860: AND
12861: IFFALSE 13025
12863: GO 12865
12865: DISABLE
12866: LD_INT 0
12868: PPUSH
// begin wait ( 0 0$10 ) ;
12869: LD_INT 350
12871: PPUSH
12872: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
12876: LD_ADDR_VAR 0 1
12880: PUSH
12881: LD_EXP 42
12885: PPUSH
12886: LD_INT 26
12888: PUSH
12889: LD_INT 1
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 25
12898: PUSH
12899: LD_INT 2
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 72
12914: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
12915: LD_EXP 28
12919: PPUSH
12920: LD_STRING DH-1-task
12922: PPUSH
12923: CALL_OW 88
// if IsOk ( Sophia ) then
12927: LD_EXP 34
12931: PPUSH
12932: CALL_OW 302
12936: IFFALSE 12976
// begin Say ( Sophia , DS-1-task ) ;
12938: LD_EXP 34
12942: PPUSH
12943: LD_STRING DS-1-task
12945: PPUSH
12946: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
12950: LD_EXP 34
12954: PPUSH
12955: LD_STRING DS-2-task
12957: PPUSH
12958: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
12962: LD_EXP 28
12966: PPUSH
12967: LD_STRING DH-2-task
12969: PPUSH
12970: CALL_OW 88
// end else
12974: GO 13010
// if eng then
12976: LD_VAR 0 1
12980: IFFALSE 13010
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
12982: LD_VAR 0 1
12986: PUSH
12987: LD_INT 1
12989: ARRAY
12990: PPUSH
12991: LD_STRING DArm-1-task
12993: PPUSH
12994: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
12998: LD_EXP 28
13002: PPUSH
13003: LD_STRING DH-2-task
13005: PPUSH
13006: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13010: LD_STRING BaseConstructed
13012: PPUSH
13013: CALL_OW 337
// allowConvoys := true ;
13017: LD_ADDR_EXP 12
13021: PUSH
13022: LD_INT 1
13024: ST_TO_ADDR
// end ;
13025: PPOPN 1
13027: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13028: LD_INT 22
13030: PUSH
13031: LD_INT 4
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 34
13040: PUSH
13041: LD_INT 12
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 69
13056: IFFALSE 13224
13058: GO 13060
13060: DISABLE
13061: LD_INT 0
13063: PPUSH
13064: PPUSH
13065: PPUSH
// begin wait ( 0 0$2 ) ;
13066: LD_INT 70
13068: PPUSH
13069: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13073: LD_ADDR_VAR 0 1
13077: PUSH
13078: LD_INT 22
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 34
13090: PUSH
13091: LD_INT 12
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 69
13106: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13107: LD_ADDR_VAR 0 2
13111: PUSH
13112: LD_VAR 0 1
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: PPUSH
13121: CALL_OW 250
13125: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13126: LD_ADDR_VAR 0 3
13130: PUSH
13131: LD_VAR 0 1
13135: PUSH
13136: LD_INT 1
13138: ARRAY
13139: PPUSH
13140: CALL_OW 251
13144: ST_TO_ADDR
// DialogueOn ;
13145: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13149: LD_VAR 0 2
13153: PPUSH
13154: LD_VAR 0 3
13158: PPUSH
13159: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13163: LD_VAR 0 2
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: LD_INT 2
13175: PPUSH
13176: LD_INT 6
13178: NEG
13179: PPUSH
13180: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13184: LD_INT 10
13186: PPUSH
13187: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13191: LD_EXP 28
13195: PPUSH
13196: LD_STRING DH-1-seecargo
13198: PPUSH
13199: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13203: LD_VAR 0 2
13207: PPUSH
13208: LD_VAR 0 3
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: CALL_OW 331
// DialogueOff ;
13220: CALL_OW 7
// end ;
13224: PPOPN 3
13226: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13227: LD_EXP 4
13231: PUSH
13232: LD_EXP 15
13236: PUSH
13237: LD_INT 300
13239: GREATEREQUAL
13240: AND
13241: IFFALSE 13313
13243: GO 13245
13245: DISABLE
// begin DialogueOn ;
13246: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13250: LD_EXP 36
13254: PPUSH
13255: LD_STRING DF-1-delivery-2
13257: PPUSH
13258: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13262: LD_EXP 28
13266: PPUSH
13267: LD_STRING DH-1-delivery-2
13269: PPUSH
13270: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13274: LD_EXP 36
13278: PPUSH
13279: LD_STRING DF-2-delivery-2
13281: PPUSH
13282: CALL_OW 94
// DialogueOff ;
13286: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13290: LD_STRING Crates2
13292: PPUSH
13293: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13297: LD_ADDR_EXP 17
13301: PUSH
13302: LD_INT 63000
13304: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13305: LD_ADDR_EXP 16
13309: PUSH
13310: LD_INT 600
13312: ST_TO_ADDR
// end ;
13313: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13314: LD_EXP 4
13318: PUSH
13319: LD_EXP 15
13323: PUSH
13324: LD_INT 600
13326: GREATEREQUAL
13327: AND
13328: PUSH
13329: LD_OWVAR 67
13333: PUSH
13334: LD_INT 1
13336: GREATER
13337: AND
13338: IFFALSE 13504
13340: GO 13342
13342: DISABLE
// begin DialogueOn ;
13343: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13347: LD_EXP 36
13351: PPUSH
13352: LD_STRING DF-1-delivery-3
13354: PPUSH
13355: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13359: LD_EXP 28
13363: PPUSH
13364: LD_STRING DH-1-delivery-3
13366: PPUSH
13367: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13371: LD_EXP 36
13375: PPUSH
13376: LD_STRING DF-2-delivery-3
13378: PPUSH
13379: CALL_OW 94
// if IsOk ( Kaia ) then
13383: LD_EXP 33
13387: PPUSH
13388: CALL_OW 302
13392: IFFALSE 13442
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13394: LD_EXP 33
13398: PPUSH
13399: LD_STRING DK-1-delivery-3
13401: PPUSH
13402: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13406: LD_EXP 28
13410: PPUSH
13411: LD_STRING DH-2-delivery-3
13413: PPUSH
13414: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13418: LD_EXP 29
13422: PPUSH
13423: LD_STRING DG-1-delivery-3
13425: PPUSH
13426: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13430: LD_EXP 30
13434: PPUSH
13435: LD_STRING DM-1-delivery-3
13437: PPUSH
13438: CALL_OW 88
// end ; DialogueOff ;
13442: CALL_OW 7
// if Difficulty = 2 then
13446: LD_OWVAR 67
13450: PUSH
13451: LD_INT 2
13453: EQUAL
13454: IFFALSE 13481
// begin ChangeMissionObjectives ( Crates3 ) ;
13456: LD_STRING Crates3
13458: PPUSH
13459: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13463: LD_ADDR_EXP 17
13467: PUSH
13468: LD_INT 63000
13470: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13471: LD_ADDR_EXP 16
13475: PUSH
13476: LD_INT 900
13478: ST_TO_ADDR
// end else
13479: GO 13504
// begin ChangeMissionObjectives ( Crates4 ) ;
13481: LD_STRING Crates4
13483: PPUSH
13484: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13488: LD_ADDR_EXP 17
13492: PUSH
13493: LD_INT 63000
13495: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13496: LD_ADDR_EXP 16
13500: PUSH
13501: LD_INT 1200
13503: ST_TO_ADDR
// end ; end ;
13504: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13505: LD_EXP 4
13509: PUSH
13510: LD_EXP 15
13514: PUSH
13515: LD_INT 600
13517: PUSH
13518: LD_INT 900
13520: PUSH
13521: LD_INT 1200
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_OWVAR 67
13533: ARRAY
13534: GREATEREQUAL
13535: AND
13536: PUSH
13537: LD_EXP 16
13541: PUSH
13542: LD_EXP 17
13546: LESSEQUAL
13547: AND
13548: IFFALSE 13615
13550: GO 13552
13552: DISABLE
// begin retreatAllowed := true ;
13553: LD_ADDR_EXP 11
13557: PUSH
13558: LD_INT 1
13560: ST_TO_ADDR
// display_strings := [ ] ;
13561: LD_ADDR_OWVAR 47
13565: PUSH
13566: EMPTY
13567: ST_TO_ADDR
// DialogueOn ;
13568: CALL_OW 6
// InGameOn ;
13572: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13576: LD_EXP 37
13580: PPUSH
13581: LD_STRING DO-radio-end
13583: PPUSH
13584: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13588: LD_EXP 28
13592: PPUSH
13593: LD_STRING DH-1-radio-end
13595: PPUSH
13596: CALL_OW 88
// InGameOff ;
13600: CALL_OW 9
// DialogueOff ;
13604: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13608: LD_STRING Retreat
13610: PPUSH
13611: CALL_OW 337
// end ;
13615: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13616: LD_EXP 11
13620: IFFALSE 13751
13622: GO 13624
13624: DISABLE
13625: LD_INT 0
13627: PPUSH
13628: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13629: LD_INT 10
13631: PPUSH
13632: LD_INT 0
13634: PPUSH
13635: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13639: LD_ADDR_VAR 0 1
13643: PUSH
13644: LD_EXP 39
13648: PPUSH
13649: LD_INT 25
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PPUSH
13659: CALL_OW 72
13663: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13664: LD_VAR 0 1
13668: PUSH
13669: LD_INT 102
13671: PPUSH
13672: LD_INT 69
13674: PPUSH
13675: CALL_OW 428
13679: PUSH
13680: LD_INT 0
13682: EQUAL
13683: AND
13684: IFFALSE 13751
// begin for i in tmp do
13686: LD_ADDR_VAR 0 2
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: FOR_IN
13697: IFFALSE 13721
// if IsInUnit ( i ) then
13699: LD_VAR 0 2
13703: PPUSH
13704: CALL_OW 310
13708: IFFALSE 13719
// ComExitBuilding ( i ) ;
13710: LD_VAR 0 2
13714: PPUSH
13715: CALL_OW 122
13719: GO 13696
13721: POP
13722: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13723: LD_VAR 0 1
13727: PPUSH
13728: LD_INT 31
13730: PPUSH
13731: LD_INT 102
13733: PPUSH
13734: LD_INT 69
13736: PPUSH
13737: LD_INT 2
13739: PPUSH
13740: CALL_OW 205
// wait ( 0 0$3 ) ;
13744: LD_INT 105
13746: PPUSH
13747: CALL_OW 67
// end ; end ;
13751: PPOPN 2
13753: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13754: LD_EXP 11
13758: NOT
13759: PUSH
13760: LD_INT 5
13762: PPUSH
13763: CALL_OW 301
13767: AND
13768: IFFALSE 13800
13770: GO 13772
13772: DISABLE
// begin DialogueOn ;
13773: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13777: LD_EXP 36
13781: PPUSH
13782: LD_STRING DF-1-failure
13784: PPUSH
13785: CALL_OW 94
// DialogueOff ;
13789: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13793: LD_STRING FarmerDepot
13795: PPUSH
13796: CALL_OW 104
// end ;
13800: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13801: LD_EXP 11
13805: PUSH
13806: LD_EXP 28
13810: PPUSH
13811: LD_EXP 36
13815: PPUSH
13816: CALL_OW 296
13820: PUSH
13821: LD_INT 6
13823: LESS
13824: AND
13825: PUSH
13826: LD_INT 81
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 21
13838: PUSH
13839: LD_INT 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PPUSH
13850: CALL_OW 69
13854: NOT
13855: AND
13856: IFFALSE 14477
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
13865: PPUSH
// begin allowConvoys := false ;
13866: LD_ADDR_EXP 12
13870: PUSH
13871: LD_INT 0
13873: ST_TO_ADDR
// InGameOn ;
13874: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
13878: LD_EXP 28
13882: PPUSH
13883: LD_EXP 36
13887: PPUSH
13888: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
13892: LD_EXP 36
13896: PPUSH
13897: LD_EXP 28
13901: PPUSH
13902: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
13906: LD_EXP 36
13910: PPUSH
13911: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
13915: LD_EXP 28
13919: PPUSH
13920: LD_STRING DH-1-end
13922: PPUSH
13923: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
13927: LD_EXP 36
13931: PPUSH
13932: LD_STRING DF-1-end
13934: PPUSH
13935: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
13939: LD_EXP 36
13943: PPUSH
13944: LD_STRING DF-2-end
13946: PPUSH
13947: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
13951: LD_EXP 28
13955: PPUSH
13956: LD_STRING DH-2-end
13958: PPUSH
13959: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
13963: LD_EXP 36
13967: PPUSH
13968: LD_STRING DF-3-end
13970: PPUSH
13971: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
13975: LD_EXP 28
13979: PPUSH
13980: LD_STRING DH-3-end
13982: PPUSH
13983: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
13987: LD_EXP 29
13991: PPUSH
13992: LD_STRING DG-1-end
13994: PPUSH
13995: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
13999: LD_EXP 28
14003: PPUSH
14004: LD_STRING DH-4-end
14006: PPUSH
14007: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14011: LD_EXP 36
14015: PPUSH
14016: LD_STRING DF-4-end
14018: PPUSH
14019: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14023: LD_EXP 28
14027: PPUSH
14028: LD_STRING DH-5-end
14030: PPUSH
14031: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14035: LD_EXP 36
14039: PPUSH
14040: LD_STRING DF-5-end
14042: PPUSH
14043: CALL_OW 88
// InGameOff ;
14047: CALL_OW 9
// allowCargoEvacuation := true ;
14051: LD_ADDR_EXP 7
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: LD_INT 3
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: PUSH
14078: LD_OWVAR 67
14082: ARRAY
14083: ST_TO_ADDR
// if farmerSquad < max then
14084: LD_EXP 39
14088: PUSH
14089: LD_VAR 0 2
14093: LESS
14094: IFFALSE 14106
// max := farmerSquad ;
14096: LD_ADDR_VAR 0 2
14100: PUSH
14101: LD_EXP 39
14105: ST_TO_ADDR
// for i := 1 to max do
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: DOUBLE
14112: LD_INT 1
14114: DEC
14115: ST_TO_ADDR
14116: LD_VAR 0 2
14120: PUSH
14121: FOR_TO
14122: IFFALSE 14160
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14124: LD_EXP 39
14128: PUSH
14129: LD_INT 1
14131: ARRAY
14132: PPUSH
14133: LD_INT 2
14135: PPUSH
14136: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14140: LD_ADDR_EXP 39
14144: PUSH
14145: LD_EXP 39
14149: PPUSH
14150: LD_INT 1
14152: PPUSH
14153: CALL_OW 3
14157: ST_TO_ADDR
// end ;
14158: GO 14121
14160: POP
14161: POP
// for i in Farmer ^ farmerSquad do
14162: LD_ADDR_VAR 0 1
14166: PUSH
14167: LD_EXP 36
14171: PUSH
14172: LD_EXP 39
14176: ADD
14177: PUSH
14178: FOR_IN
14179: IFFALSE 14218
// begin if IsInUnit ( i ) then
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 310
14190: IFFALSE 14201
// ComExitBuilding ( i ) ;
14192: LD_VAR 0 1
14196: PPUSH
14197: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14201: LD_VAR 0 1
14205: PPUSH
14206: LD_INT 102
14208: PPUSH
14209: LD_INT 7
14211: PPUSH
14212: CALL_OW 171
// end ;
14216: GO 14178
14218: POP
14219: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14220: LD_ADDR_VAR 0 1
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 5
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 21
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: PUSH
14254: LD_INT 5
14256: DIFF
14257: PUSH
14258: FOR_IN
14259: IFFALSE 14275
// SetSide ( i , 2 ) ;
14261: LD_VAR 0 1
14265: PPUSH
14266: LD_INT 2
14268: PPUSH
14269: CALL_OW 235
14273: GO 14258
14275: POP
14276: POP
// repeat wait ( 0 0$1 ) ;
14277: LD_INT 35
14279: PPUSH
14280: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14284: LD_ADDR_VAR 0 3
14288: PUSH
14289: LD_EXP 36
14293: PUSH
14294: LD_EXP 39
14298: ADD
14299: PPUSH
14300: LD_INT 95
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 72
14314: ST_TO_ADDR
// if tmp then
14315: LD_VAR 0 3
14319: IFFALSE 14363
// for i in tmp do
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_VAR 0 3
14330: PUSH
14331: FOR_IN
14332: IFFALSE 14361
// begin farmerSquad := farmerSquad diff i ;
14334: LD_ADDR_EXP 39
14338: PUSH
14339: LD_EXP 39
14343: PUSH
14344: LD_VAR 0 1
14348: DIFF
14349: ST_TO_ADDR
// RemoveUnit ( i ) ;
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 64
// end ;
14359: GO 14331
14361: POP
14362: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14363: LD_EXP 39
14367: PUSH
14368: EMPTY
14369: EQUAL
14370: PUSH
14371: LD_EXP 36
14375: PPUSH
14376: CALL_OW 305
14380: NOT
14381: AND
14382: IFFALSE 14277
// if farmerHumanLoseCounter = 0 then
14384: LD_EXP 20
14388: PUSH
14389: LD_INT 0
14391: EQUAL
14392: IFFALSE 14401
// SetAchievement ( ACH_BABY ) ;
14394: LD_STRING ACH_BABY
14396: PPUSH
14397: CALL_OW 543
// wait ( 1 1$00 ) ;
14401: LD_INT 2100
14403: PPUSH
14404: CALL_OW 67
// SendAttack ;
14408: CALL 6087 0 0
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14412: LD_ADDR_VAR 0 1
14416: PUSH
14417: DOUBLE
14418: LD_INT 1
14420: DEC
14421: ST_TO_ADDR
14422: LD_INT 2
14424: PUSH
14425: LD_INT 3
14427: PUSH
14428: LD_INT 4
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: PUSH
14436: LD_OWVAR 67
14440: ARRAY
14441: PUSH
14442: FOR_TO
14443: IFFALSE 14475
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14445: LD_INT 4200
14447: PUSH
14448: LD_INT 3500
14450: PUSH
14451: LD_INT 3150
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: LD_OWVAR 67
14463: ARRAY
14464: PPUSH
14465: CALL_OW 67
// SendAttack ;
14469: CALL 6087 0 0
// end ;
14473: GO 14442
14475: POP
14476: POP
// end ;
14477: PPOPN 3
14479: END
// every 0 0$1 trigger allowCargoEvacuation do
14480: LD_EXP 7
14484: IFFALSE 14493
14486: GO 14488
14488: DISABLE
// StartCargoEvacuation ;
14489: CALL 3623 0 0
14493: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14494: LD_EXP 17
14498: PUSH
14499: LD_INT 18900
14501: LESSEQUAL
14502: IFFALSE 14551
14504: GO 14506
14506: DISABLE
// begin DialogueOn ;
14507: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14511: LD_EXP 36
14515: PPUSH
14516: LD_STRING DF-1-distribution-a
14518: PPUSH
14519: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14523: LD_EXP 28
14527: PPUSH
14528: LD_STRING DH-1-distribution-a
14530: PPUSH
14531: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14535: LD_EXP 36
14539: PPUSH
14540: LD_STRING DF-2-distribution-a
14542: PPUSH
14543: CALL_OW 94
// DialogueOff ;
14547: CALL_OW 7
// end ;
14551: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14552: LD_EXP 17
14556: PUSH
14557: LD_INT 0
14559: LESSEQUAL
14560: IFFALSE 14592
14562: GO 14564
14564: DISABLE
// begin DialogueOn ;
14565: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14569: LD_EXP 36
14573: PPUSH
14574: LD_STRING DF-3-distribution-a
14576: PPUSH
14577: CALL_OW 94
// YouLost ( Distribution ) ;
14581: LD_STRING Distribution
14583: PPUSH
14584: CALL_OW 104
// DialogueOff ;
14588: CALL_OW 7
// end ;
14592: END
// every 0 0$1 trigger vehCounter >= 2 do
14593: LD_EXP 22
14597: PUSH
14598: LD_INT 2
14600: GREATEREQUAL
14601: IFFALSE 14613
14603: GO 14605
14605: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14606: LD_STRING VehConstructed
14608: PPUSH
14609: CALL_OW 337
14613: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14614: LD_INT 22
14616: PUSH
14617: LD_INT 2
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 34
14626: PUSH
14627: LD_INT 12
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PPUSH
14638: CALL_OW 69
14642: IFFALSE 14702
14644: GO 14646
14646: DISABLE
// begin DialogueOn ;
14647: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14651: LD_EXP 28
14655: PPUSH
14656: LD_STRING DH-1-truck
14658: PPUSH
14659: CALL_OW 88
// if IsOk ( Markov ) then
14663: LD_EXP 35
14667: PPUSH
14668: CALL_OW 302
14672: IFFALSE 14698
// begin Say ( Markov , DMar-1-truck ) ;
14674: LD_EXP 35
14678: PPUSH
14679: LD_STRING DMar-1-truck
14681: PPUSH
14682: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14686: LD_EXP 28
14690: PPUSH
14691: LD_STRING DH-2-truck
14693: PPUSH
14694: CALL_OW 88
// end ; DialogueOff ;
14698: CALL_OW 7
// end ;
14702: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
14707: PPUSH
// if IsOk ( Givi ) then
14708: LD_EXP 29
14712: PPUSH
14713: CALL_OW 302
14717: IFFALSE 14733
// begin Say ( Givi , DG-1-nocargo ) ;
14719: LD_EXP 29
14723: PPUSH
14724: LD_STRING DG-1-nocargo
14726: PPUSH
14727: CALL_OW 88
// exit ;
14731: GO 14829
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14733: LD_ADDR_VAR 0 2
14737: PUSH
14738: LD_EXP 42
14742: PPUSH
14743: LD_INT 26
14745: PUSH
14746: LD_INT 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 72
14757: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14758: LD_ADDR_VAR 0 3
14762: PUSH
14763: LD_EXP 42
14767: PPUSH
14768: LD_INT 26
14770: PUSH
14771: LD_INT 2
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 72
14782: ST_TO_ADDR
// if randomMen then
14783: LD_VAR 0 2
14787: IFFALSE 14807
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14789: LD_VAR 0 2
14793: PUSH
14794: LD_INT 1
14796: ARRAY
14797: PPUSH
14798: LD_STRING DArm-1-nocargo
14800: PPUSH
14801: CALL_OW 88
14805: GO 14829
// if randomWomen then
14807: LD_VAR 0 3
14811: IFFALSE 14829
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14813: LD_VAR 0 3
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: LD_STRING DArf-1-nocargo
14824: PPUSH
14825: CALL_OW 88
// end ;
14829: LD_VAR 0 1
14833: RET
// export function IncomingAttack ; begin
14834: LD_INT 0
14836: PPUSH
// if attackWave = 1 then
14837: LD_EXP 19
14841: PUSH
14842: LD_INT 1
14844: EQUAL
14845: IFFALSE 14916
// begin DialogueOn ;
14847: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14851: LD_EXP 37
14855: PPUSH
14856: LD_STRING DO-1-radio-1
14858: PPUSH
14859: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
14863: LD_EXP 28
14867: PPUSH
14868: LD_STRING DH-1-radio-1-
14870: PPUSH
14871: CALL_OW 88
// if IsOk ( Markov ) then
14875: LD_EXP 35
14879: PPUSH
14880: CALL_OW 302
14884: IFFALSE 14910
// begin Say ( Markov , DMar-1-radio-1 ) ;
14886: LD_EXP 35
14890: PPUSH
14891: LD_STRING DMar-1-radio-1
14893: PPUSH
14894: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
14898: LD_EXP 28
14902: PPUSH
14903: LD_STRING DH-2-radio-1
14905: PPUSH
14906: CALL_OW 88
// end ; DialogueOff ;
14910: CALL_OW 7
// end else
14914: GO 14940
// begin SayRadio ( Omar , DO-1-radio-u ) ;
14916: LD_EXP 37
14920: PPUSH
14921: LD_STRING DO-1-radio-u
14923: PPUSH
14924: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
14928: LD_EXP 28
14932: PPUSH
14933: LD_STRING DH-1-radio-u
14935: PPUSH
14936: CALL_OW 88
// end ; end ;
14940: LD_VAR 0 1
14944: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
14945: LD_EXP 44
14949: PPUSH
14950: LD_INT 95
14952: PUSH
14953: LD_INT 8
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 72
14964: IFFALSE 15067
14966: GO 14968
14968: DISABLE
14969: LD_INT 0
14971: PPUSH
// begin enable ;
14972: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
14973: LD_ADDR_VAR 0 1
14977: PUSH
14978: LD_EXP 44
14982: PPUSH
14983: LD_INT 95
14985: PUSH
14986: LD_INT 8
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 72
14997: PUSH
14998: FOR_IN
14999: IFFALSE 15028
// begin usForces := usForces diff i ;
15001: LD_ADDR_EXP 44
15005: PUSH
15006: LD_EXP 44
15010: PUSH
15011: LD_VAR 0 1
15015: DIFF
15016: ST_TO_ADDR
// RemoveUnit ( i ) ;
15017: LD_VAR 0 1
15021: PPUSH
15022: CALL_OW 64
// end ;
15026: GO 14998
15028: POP
15029: POP
// if not americanHasEscaped and attackWave = 1 then
15030: LD_EXP 8
15034: NOT
15035: PUSH
15036: LD_EXP 19
15040: PUSH
15041: LD_INT 1
15043: EQUAL
15044: AND
15045: IFFALSE 15067
// begin americanHasEscaped := true ;
15047: LD_ADDR_EXP 8
15051: PUSH
15052: LD_INT 1
15054: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15055: LD_EXP 28
15059: PPUSH
15060: LD_STRING DH-2-assault-a
15062: PPUSH
15063: CALL_OW 88
// end ; end ;
15067: PPOPN 1
15069: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15070: LD_INT 4
15072: PPUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 70
15087: PUSH
15088: LD_EXP 11
15092: NOT
15093: AND
15094: IFFALSE 15111
15096: GO 15098
15098: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15099: LD_EXP 36
15103: PPUSH
15104: LD_STRING DF-1-attack
15106: PPUSH
15107: CALL_OW 94
15111: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15112: LD_INT 5
15114: PPUSH
15115: CALL_OW 255
15119: PUSH
15120: LD_INT 2
15122: EQUAL
15123: IFFALSE 15135
15125: GO 15127
15127: DISABLE
// YouLost ( Attack ) ;
15128: LD_STRING Attack
15130: PPUSH
15131: CALL_OW 104
15135: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15136: LD_INT 22
15138: PUSH
15139: LD_INT 1
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 21
15148: PUSH
15149: LD_INT 1
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PPUSH
15160: CALL_OW 69
15164: NOT
15165: PUSH
15166: LD_INT 22
15168: PUSH
15169: LD_INT 4
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: NOT
15181: AND
15182: PUSH
15183: LD_EXP 11
15187: NOT
15188: AND
15189: PUSH
15190: LD_EXP 15
15194: PUSH
15195: LD_INT 90
15197: GREATER
15198: AND
15199: PUSH
15200: LD_INT 7
15202: PPUSH
15203: LD_INT 22
15205: PUSH
15206: LD_INT 2
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 21
15215: PUSH
15216: LD_INT 1
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL_OW 70
15231: AND
15232: PUSH
15233: LD_INT 22
15235: PUSH
15236: LD_INT 2
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 50
15245: PUSH
15246: EMPTY
15247: LIST
15248: PUSH
15249: LD_INT 30
15251: PUSH
15252: LD_INT 0
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PPUSH
15264: CALL_OW 69
15268: AND
15269: IFFALSE 16062
15271: GO 15273
15273: DISABLE
15274: LD_INT 0
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
// begin depot := usDepot ;
15281: LD_ADDR_VAR 0 5
15285: PUSH
15286: LD_INT 11
15288: ST_TO_ADDR
// if not depot then
15289: LD_VAR 0 5
15293: NOT
15294: IFFALSE 15334
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_INT 2
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 30
15313: PUSH
15314: LD_INT 0
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15334: LD_ADDR_VAR 0 1
15338: PUSH
15339: LD_EXP 42
15343: PPUSH
15344: LD_INT 26
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 72
15358: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15359: LD_ADDR_VAR 0 2
15363: PUSH
15364: LD_EXP 42
15368: PPUSH
15369: LD_INT 26
15371: PUSH
15372: LD_INT 2
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 72
15383: ST_TO_ADDR
// if IsOk ( Kaia ) then
15384: LD_EXP 33
15388: PPUSH
15389: CALL_OW 302
15393: IFFALSE 15414
// speaker := [ Kaia , DK ] else
15395: LD_ADDR_VAR 0 3
15399: PUSH
15400: LD_EXP 33
15404: PUSH
15405: LD_STRING DK
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: ST_TO_ADDR
15412: GO 15494
// if randomMen then
15414: LD_VAR 0 1
15418: IFFALSE 15453
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15420: LD_ADDR_VAR 0 3
15424: PUSH
15425: LD_VAR 0 1
15429: PUSH
15430: LD_INT 1
15432: PPUSH
15433: LD_VAR 0 1
15437: PPUSH
15438: CALL_OW 12
15442: ARRAY
15443: PUSH
15444: LD_STRING DArm
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: ST_TO_ADDR
15451: GO 15494
// if randomWomen then
15453: LD_VAR 0 2
15457: IFFALSE 15492
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15459: LD_ADDR_VAR 0 3
15463: PUSH
15464: LD_VAR 0 2
15468: PUSH
15469: LD_INT 1
15471: PPUSH
15472: LD_VAR 0 2
15476: PPUSH
15477: CALL_OW 12
15481: ARRAY
15482: PUSH
15483: LD_STRING DArf
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: ST_TO_ADDR
15490: GO 15494
// exit ;
15492: GO 16062
// if IsInUnit ( speaker [ 1 ] ) then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 1
15501: ARRAY
15502: PPUSH
15503: CALL_OW 310
15507: IFFALSE 15530
// place := IsInUnit ( speaker [ 1 ] ) else
15509: LD_ADDR_VAR 0 4
15513: PUSH
15514: LD_VAR 0 3
15518: PUSH
15519: LD_INT 1
15521: ARRAY
15522: PPUSH
15523: CALL_OW 310
15527: ST_TO_ADDR
15528: GO 15544
// place := speaker [ 1 ] ;
15530: LD_ADDR_VAR 0 4
15534: PUSH
15535: LD_VAR 0 3
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15544: LD_VAR 0 4
15548: PPUSH
15549: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15553: LD_VAR 0 4
15557: PPUSH
15558: CALL_OW 250
15562: PPUSH
15563: LD_VAR 0 4
15567: PPUSH
15568: CALL_OW 251
15572: PPUSH
15573: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15577: LD_INT 70
15579: PPUSH
15580: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15584: LD_EXP 38
15588: PPUSH
15589: CALL_OW 305
15593: NOT
15594: IFFALSE 15598
// exit ;
15596: GO 16062
// allowConvoys := false ;
15598: LD_ADDR_EXP 12
15602: PUSH
15603: LD_INT 0
15605: ST_TO_ADDR
// InGameOn ;
15606: CALL_OW 8
// wait ( 0 0$1 ) ;
15610: LD_INT 35
15612: PPUSH
15613: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15617: LD_EXP 38
15621: PPUSH
15622: LD_STRING DI-1-land
15624: PPUSH
15625: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15629: LD_VAR 0 3
15633: PUSH
15634: LD_INT 1
15636: ARRAY
15637: PPUSH
15638: CALL_OW 310
15642: IFFALSE 15657
// ComExit ( speaker [ 1 ] ) ;
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 1
15651: ARRAY
15652: PPUSH
15653: CALL 72151 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15657: LD_VAR 0 3
15661: PUSH
15662: LD_INT 1
15664: ARRAY
15665: PPUSH
15666: LD_EXP 38
15670: PPUSH
15671: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15675: LD_VAR 0 3
15679: PUSH
15680: LD_INT 1
15682: ARRAY
15683: PPUSH
15684: LD_EXP 38
15688: PPUSH
15689: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15693: LD_EXP 38
15697: PPUSH
15698: LD_VAR 0 3
15702: PUSH
15703: LD_INT 1
15705: ARRAY
15706: PPUSH
15707: CALL_OW 119
// wait ( 0 0$1 ) ;
15711: LD_INT 35
15713: PPUSH
15714: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15718: LD_VAR 0 3
15722: PUSH
15723: LD_INT 1
15725: ARRAY
15726: PPUSH
15727: LD_VAR 0 3
15731: PUSH
15732: LD_INT 2
15734: ARRAY
15735: PUSH
15736: LD_STRING -1-land
15738: STR
15739: PPUSH
15740: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15744: LD_EXP 38
15748: PPUSH
15749: LD_STRING DI-2-land
15751: PPUSH
15752: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 1
15763: ARRAY
15764: PPUSH
15765: LD_VAR 0 3
15769: PUSH
15770: LD_INT 2
15772: ARRAY
15773: PUSH
15774: LD_STRING -2-land
15776: STR
15777: PPUSH
15778: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 1
15789: ARRAY
15790: PPUSH
15791: LD_VAR 0 3
15795: PUSH
15796: LD_INT 2
15798: ARRAY
15799: PUSH
15800: LD_STRING -3-land
15802: STR
15803: PPUSH
15804: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15808: LD_EXP 28
15812: PPUSH
15813: LD_STRING DH-1-land
15815: PPUSH
15816: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
15820: LD_VAR 0 5
15824: PPUSH
15825: CALL_OW 313
15829: PUSH
15830: LD_INT 6
15832: EQUAL
15833: IFFALSE 15853
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
15835: LD_VAR 0 5
15839: PPUSH
15840: CALL_OW 313
15844: PUSH
15845: LD_INT 1
15847: ARRAY
15848: PPUSH
15849: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15853: LD_EXP 38
15857: PPUSH
15858: LD_INT 2
15860: PPUSH
15861: CALL_OW 235
// CenterOnUnits ( depot ) ;
15865: LD_VAR 0 5
15869: PPUSH
15870: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
15874: LD_EXP 38
15878: PPUSH
15879: LD_VAR 0 5
15883: PPUSH
15884: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
15888: LD_VAR 0 3
15892: PUSH
15893: LD_INT 1
15895: ARRAY
15896: PPUSH
15897: LD_VAR 0 5
15901: PPUSH
15902: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15906: LD_INT 35
15908: PPUSH
15909: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
15913: LD_EXP 38
15917: PPUSH
15918: CALL_OW 310
15922: PUSH
15923: LD_EXP 38
15927: PPUSH
15928: CALL_OW 302
15932: NOT
15933: OR
15934: PUSH
15935: LD_VAR 0 5
15939: PPUSH
15940: CALL_OW 302
15944: NOT
15945: OR
15946: IFFALSE 15906
// InGameOff ;
15948: CALL_OW 9
// if not IsOk ( Ibrahim ) then
15952: LD_EXP 38
15956: PPUSH
15957: CALL_OW 302
15961: NOT
15962: IFFALSE 15966
// exit ;
15964: GO 16062
// if not IsOk ( depot ) then
15966: LD_VAR 0 5
15970: PPUSH
15971: CALL_OW 302
15975: NOT
15976: IFFALSE 16039
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
15978: LD_EXP 38
15982: PPUSH
15983: LD_INT 30
15985: PPUSH
15986: LD_INT 1
15988: PPUSH
15989: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15993: LD_INT 35
15995: PPUSH
15996: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16000: LD_EXP 38
16004: PPUSH
16005: LD_INT 30
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 307
16015: PUSH
16016: LD_EXP 38
16020: PPUSH
16021: CALL_OW 301
16025: OR
16026: IFFALSE 15993
// RemoveUnit ( Ibrahim ) ;
16028: LD_EXP 38
16032: PPUSH
16033: CALL_OW 64
// exit ;
16037: GO 16062
// end ; ibrahimInDepot := true ;
16039: LD_ADDR_EXP 25
16043: PUSH
16044: LD_INT 1
16046: ST_TO_ADDR
// allowConvoys := true ;
16047: LD_ADDR_EXP 12
16051: PUSH
16052: LD_INT 1
16054: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16055: LD_STRING IbrahimInDepot
16057: PPUSH
16058: CALL_OW 97
// end ;
16062: PPOPN 5
16064: END
// export function IbrahimQuery ; begin
16065: LD_INT 0
16067: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16068: LD_STRING IbrahimQuery
16070: PPUSH
16071: CALL_OW 97
16075: PUSH
16076: LD_INT 1
16078: DOUBLE
16079: EQUAL
16080: IFTRUE 16084
16082: GO 16360
16084: POP
// begin allowConvoys := false ;
16085: LD_ADDR_EXP 12
16089: PUSH
16090: LD_INT 0
16092: ST_TO_ADDR
// ibrahimInDepot := false ;
16093: LD_ADDR_EXP 25
16097: PUSH
16098: LD_INT 0
16100: ST_TO_ADDR
// InGameOn ;
16101: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16105: LD_EXP 28
16109: PPUSH
16110: CALL_OW 87
// wait ( 0 0$1 ) ;
16114: LD_INT 35
16116: PPUSH
16117: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16121: LD_EXP 28
16125: PPUSH
16126: LD_STRING DH-1-interrogation
16128: PPUSH
16129: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16133: LD_EXP 38
16137: PPUSH
16138: LD_STRING DI-1-interrogation
16140: PPUSH
16141: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16145: LD_EXP 28
16149: PPUSH
16150: LD_STRING DH-2-interrogation
16152: PPUSH
16153: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16157: LD_EXP 38
16161: PPUSH
16162: LD_STRING DI-2-interrogation
16164: PPUSH
16165: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16169: LD_EXP 28
16173: PPUSH
16174: LD_STRING DH-3-interrogation
16176: PPUSH
16177: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16181: LD_EXP 38
16185: PPUSH
16186: LD_STRING DI-3-interrogation
16188: PPUSH
16189: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16193: LD_EXP 28
16197: PPUSH
16198: LD_STRING DH-4-interrogation
16200: PPUSH
16201: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16205: LD_EXP 38
16209: PPUSH
16210: LD_STRING DI-4-interrogation
16212: PPUSH
16213: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16217: LD_EXP 28
16221: PPUSH
16222: LD_STRING DH-5-interrogation
16224: PPUSH
16225: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16229: LD_EXP 38
16233: PPUSH
16234: LD_STRING DI-5-interrogation
16236: PPUSH
16237: CALL_OW 88
// wait ( 0 0$1 ) ;
16241: LD_INT 35
16243: PPUSH
16244: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16248: LD_STRING IbrahimDecisionQuery
16250: PPUSH
16251: CALL_OW 97
16255: PUSH
16256: LD_INT 1
16258: DOUBLE
16259: EQUAL
16260: IFTRUE 16264
16262: GO 16288
16264: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16265: LD_EXP 38
16269: PPUSH
16270: LD_STRING DI-1-kill
16272: PPUSH
16273: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16277: LD_EXP 38
16281: PPUSH
16282: CALL_OW 66
// end ; 2 :
16286: GO 16354
16288: LD_INT 2
16290: DOUBLE
16291: EQUAL
16292: IFTRUE 16296
16294: GO 16353
16296: POP
// begin SetSide ( Ibrahim , 6 ) ;
16297: LD_EXP 38
16301: PPUSH
16302: LD_INT 6
16304: PPUSH
16305: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16309: LD_EXP 38
16313: PPUSH
16314: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16318: LD_EXP 38
16322: PPUSH
16323: LD_INT 66
16325: PPUSH
16326: LD_INT 2
16328: PPUSH
16329: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16333: LD_EXP 38
16337: PPUSH
16338: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16342: LD_EXP 28
16346: PPUSH
16347: CALL_OW 122
// end ; end ;
16351: GO 16354
16353: POP
// InGameOff ;
16354: CALL_OW 9
// end ; 2 :
16358: GO 16374
16360: LD_INT 2
16362: DOUBLE
16363: EQUAL
16364: IFTRUE 16368
16366: GO 16373
16368: POP
// exit ; end ;
16369: GO 16412
16371: GO 16374
16373: POP
// allowConvoys := true ;
16374: LD_ADDR_EXP 12
16378: PUSH
16379: LD_INT 1
16381: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16382: LD_INT 5250
16384: PPUSH
16385: CALL_OW 67
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16389: LD_EXP 38
16393: PPUSH
16394: LD_INT 38
16396: PPUSH
16397: LD_INT 28
16399: PPUSH
16400: CALL_OW 111
// ibrahimIsFree := true ;
16404: LD_ADDR_EXP 26
16408: PUSH
16409: LD_INT 1
16411: ST_TO_ADDR
// end ;
16412: LD_VAR 0 1
16416: RET
// every 0 0$1 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot , x , y ;
16417: LD_EXP 26
16421: PUSH
16422: LD_EXP 38
16426: PPUSH
16427: CALL_OW 302
16431: AND
16432: PUSH
16433: LD_INT 6
16435: PPUSH
16436: LD_EXP 28
16440: PPUSH
16441: CALL_OW 292
16445: AND
16446: PUSH
16447: LD_INT 22
16449: PUSH
16450: LD_INT 4
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PPUSH
16457: CALL_OW 69
16461: NOT
16462: AND
16463: PUSH
16464: LD_INT 22
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 21
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PPUSH
16488: CALL_OW 69
16492: NOT
16493: AND
16494: IFFALSE 17254
16496: GO 16498
16498: DISABLE
16499: LD_INT 0
16501: PPUSH
16502: PPUSH
16503: PPUSH
16504: PPUSH
16505: PPUSH
16506: PPUSH
// begin allowConvoys := false ;
16507: LD_ADDR_EXP 12
16511: PUSH
16512: LD_INT 0
16514: ST_TO_ADDR
// depot := usDepot ;
16515: LD_ADDR_VAR 0 4
16519: PUSH
16520: LD_INT 11
16522: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16523: LD_INT 11
16525: NOT
16526: PUSH
16527: LD_INT 22
16529: PUSH
16530: LD_INT 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 50
16539: PUSH
16540: EMPTY
16541: LIST
16542: PUSH
16543: LD_INT 30
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: PPUSH
16558: CALL_OW 69
16562: AND
16563: IFFALSE 16610
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16565: LD_ADDR_VAR 0 4
16569: PUSH
16570: LD_INT 22
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 50
16582: PUSH
16583: EMPTY
16584: LIST
16585: PUSH
16586: LD_INT 30
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: PPUSH
16601: CALL_OW 69
16605: PUSH
16606: LD_INT 1
16608: ARRAY
16609: ST_TO_ADDR
// InGameOn ;
16610: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16614: LD_EXP 38
16618: PPUSH
16619: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16623: LD_EXP 28
16627: PPUSH
16628: LD_EXP 38
16632: PPUSH
16633: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16637: LD_EXP 38
16641: PPUSH
16642: LD_EXP 28
16646: PPUSH
16647: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16651: LD_EXP 38
16655: PPUSH
16656: LD_STRING DI-1-free
16658: PPUSH
16659: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16663: LD_EXP 28
16667: PPUSH
16668: LD_STRING DH-1-free
16670: PPUSH
16671: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16675: LD_EXP 38
16679: PPUSH
16680: LD_STRING DI-2-free
16682: PPUSH
16683: CALL_OW 88
// changeClass := 0 ;
16687: LD_ADDR_VAR 0 1
16691: PUSH
16692: LD_INT 0
16694: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16695: LD_STRING IbrahimJoinQuery
16697: PPUSH
16698: CALL_OW 97
16702: PUSH
16703: LD_INT 1
16705: DOUBLE
16706: EQUAL
16707: IFTRUE 16711
16709: GO 16722
16711: POP
// begin changeClass := 1 ;
16712: LD_ADDR_VAR 0 1
16716: PUSH
16717: LD_INT 1
16719: ST_TO_ADDR
// end ; 2 :
16720: GO 16962
16722: LD_INT 2
16724: DOUBLE
16725: EQUAL
16726: IFTRUE 16730
16728: GO 16882
16730: POP
// begin Say ( Heike , DH-1-decline ) ;
16731: LD_EXP 28
16735: PPUSH
16736: LD_STRING DH-1-decline
16738: PPUSH
16739: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16743: LD_EXP 38
16747: PPUSH
16748: LD_STRING DI-1-decline
16750: PPUSH
16751: CALL_OW 88
// InGameOff ;
16755: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16759: LD_EXP 38
16763: PPUSH
16764: LD_INT 30
16766: PPUSH
16767: LD_INT 1
16769: PPUSH
16770: CALL_OW 111
// p := 0 ;
16774: LD_ADDR_VAR 0 3
16778: PUSH
16779: LD_INT 0
16781: ST_TO_ADDR
// repeat p := p + 1 ;
16782: LD_ADDR_VAR 0 3
16786: PUSH
16787: LD_VAR 0 3
16791: PUSH
16792: LD_INT 1
16794: PLUS
16795: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16796: LD_INT 35
16798: PPUSH
16799: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
16803: LD_EXP 38
16807: PPUSH
16808: LD_INT 30
16810: PPUSH
16811: LD_INT 1
16813: PPUSH
16814: CALL_OW 307
16818: PUSH
16819: LD_INT 22
16821: PUSH
16822: LD_INT 2
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 101
16831: PUSH
16832: LD_INT 6
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PPUSH
16843: CALL_OW 69
16847: NOT
16848: OR
16849: PUSH
16850: LD_VAR 0 3
16854: PUSH
16855: LD_INT 10
16857: GREATER
16858: OR
16859: IFFALSE 16782
// RemoveUnit ( Ibrahim ) ;
16861: LD_EXP 38
16865: PPUSH
16866: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
16870: LD_INT 1
16872: PPUSH
16873: LD_STRING 03_IbrahimHasEscaped
16875: PPUSH
16876: CALL_OW 39
// end ; 3 :
16880: GO 16962
16882: LD_INT 3
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 16961
16890: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
16891: LD_EXP 28
16895: PPUSH
16896: LD_STRING DH-1-radio-hq
16898: PPUSH
16899: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
16903: LD_EXP 37
16907: PPUSH
16908: LD_STRING DO-1-radio-hq
16910: PPUSH
16911: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
16915: LD_EXP 28
16919: PPUSH
16920: LD_STRING DH-2-radio-hq
16922: PPUSH
16923: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
16927: LD_EXP 37
16931: PPUSH
16932: LD_STRING DO-2-radio-hq
16934: PPUSH
16935: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
16939: LD_EXP 28
16943: PPUSH
16944: LD_STRING DH-3-radio-hq
16946: PPUSH
16947: CALL_OW 88
// changeClass := 1 ;
16951: LD_ADDR_VAR 0 1
16955: PUSH
16956: LD_INT 1
16958: ST_TO_ADDR
// end ; end ;
16959: GO 16962
16961: POP
// if changeClass then
16962: LD_VAR 0 1
16966: IFFALSE 17254
// begin Say ( Heike , DH-1-agree ) ;
16968: LD_EXP 28
16972: PPUSH
16973: LD_STRING DH-1-agree
16975: PPUSH
16976: CALL_OW 88
// if IsOk ( Givi ) then
16980: LD_EXP 29
16984: PPUSH
16985: CALL_OW 302
16989: IFFALSE 17027
// begin Say ( Givi , DG-1-agree ) ;
16991: LD_EXP 29
16995: PPUSH
16996: LD_STRING DG-1-agree
16998: PPUSH
16999: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17003: LD_EXP 28
17007: PPUSH
17008: LD_STRING DH-2-agree
17010: PPUSH
17011: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17015: LD_EXP 29
17019: PPUSH
17020: LD_STRING DG-2-agree
17022: PPUSH
17023: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17027: LD_VAR 0 4
17031: PPUSH
17032: CALL_OW 313
17036: PUSH
17037: LD_INT 6
17039: EQUAL
17040: IFFALSE 17060
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17042: LD_VAR 0 4
17046: PPUSH
17047: CALL_OW 313
17051: PUSH
17052: LD_INT 1
17054: ARRAY
17055: PPUSH
17056: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17060: LD_EXP 38
17064: PPUSH
17065: LD_INT 2
17067: PPUSH
17068: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17072: LD_ADDR_VAR 0 5
17076: PUSH
17077: LD_EXP 38
17081: PPUSH
17082: CALL_OW 250
17086: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17087: LD_ADDR_VAR 0 6
17091: PUSH
17092: LD_EXP 38
17096: PPUSH
17097: CALL_OW 251
17101: ST_TO_ADDR
// if depot then
17102: LD_VAR 0 4
17106: IFFALSE 17155
// begin ComEnterUnit ( Ibrahim , depot ) ;
17108: LD_EXP 38
17112: PPUSH
17113: LD_VAR 0 4
17117: PPUSH
17118: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17122: LD_INT 35
17124: PPUSH
17125: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17129: LD_EXP 38
17133: PPUSH
17134: CALL_OW 310
17138: IFFALSE 17122
// b := IsInUnit ( Ibrahim ) ;
17140: LD_ADDR_VAR 0 2
17144: PUSH
17145: LD_EXP 38
17149: PPUSH
17150: CALL_OW 310
17154: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17155: LD_EXP 38
17159: PPUSH
17160: CALL_OW 64
// uc_side := 2 ;
17164: LD_ADDR_OWVAR 20
17168: PUSH
17169: LD_INT 2
17171: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17172: LD_ADDR_EXP 38
17176: PUSH
17177: LD_STRING Ibrahim
17179: PPUSH
17180: LD_INT 0
17182: PPUSH
17183: LD_STRING 
17185: PPUSH
17186: CALL 35774 0 3
17190: ST_TO_ADDR
// if depot then
17191: LD_VAR 0 4
17195: IFFALSE 17213
// PlaceHumanInUnit ( Ibrahim , b ) else
17197: LD_EXP 38
17201: PPUSH
17202: LD_VAR 0 2
17206: PPUSH
17207: CALL_OW 52
17211: GO 17235
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17213: LD_EXP 38
17217: PPUSH
17218: LD_VAR 0 5
17222: PPUSH
17223: LD_VAR 0 6
17227: PPUSH
17228: LD_INT 0
17230: PPUSH
17231: CALL_OW 48
// InGameOff ;
17235: CALL_OW 9
// allowConvoys := true ;
17239: LD_ADDR_EXP 12
17243: PUSH
17244: LD_INT 1
17246: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17247: LD_STRING ACH_IBRAHIM
17249: PPUSH
17250: CALL_OW 543
// end ; end ;
17254: PPOPN 6
17256: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17257: LD_EXP 33
17261: PPUSH
17262: CALL_OW 256
17266: PUSH
17267: LD_INT 3
17269: LESS
17270: IFFALSE 17337
17272: GO 17274
17274: DISABLE
// begin DialogueOn ;
17275: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17279: LD_EXP 33
17283: PPUSH
17284: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17288: LD_EXP 33
17292: PPUSH
17293: LD_STRING DK-keydeath-1
17295: PPUSH
17296: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17300: LD_EXP 28
17304: PPUSH
17305: LD_STRING DH-keydeath-2
17307: PPUSH
17308: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17312: LD_EXP 28
17316: PPUSH
17317: LD_STRING DH-keydeath-3
17319: PPUSH
17320: CALL_OW 88
// DialogueOff ;
17324: CALL_OW 7
// KillUnit ( Kaia ) ;
17328: LD_EXP 33
17332: PPUSH
17333: CALL_OW 66
// end ;
17337: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 do
17338: LD_EXP 11
17342: PUSH
17343: LD_EXP 21
17347: PUSH
17348: LD_INT 1
17350: LESS
17351: AND
17352: PUSH
17353: LD_INT 22
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 25
17365: PUSH
17366: LD_INT 1
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PPUSH
17377: CALL_OW 69
17381: PUSH
17382: LD_INT 0
17384: EQUAL
17385: AND
17386: IFFALSE 17777
17388: GO 17390
17390: DISABLE
// begin DialogueOn ;
17391: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17395: LD_EXP 28
17399: PPUSH
17400: LD_STRING DH-1-final
17402: PPUSH
17403: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17407: LD_OWVAR 1
17411: PUSH
17412: LD_INT 126000
17414: PUSH
17415: LD_INT 115500
17417: PUSH
17418: LD_INT 105000
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: PUSH
17426: LD_OWVAR 67
17430: ARRAY
17431: LESSEQUAL
17432: IFFALSE 17446
// AddMedal ( med1 , 1 ) else
17434: LD_STRING med1
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: CALL_OW 101
17444: GO 17457
// AddMedal ( med1 , - 1 ) ;
17446: LD_STRING med1
17448: PPUSH
17449: LD_INT 1
17451: NEG
17452: PPUSH
17453: CALL_OW 101
// if vehCounter >= 2 then
17457: LD_EXP 22
17461: PUSH
17462: LD_INT 2
17464: GREATEREQUAL
17465: IFFALSE 17479
// AddMedal ( med2 , 1 ) else
17467: LD_STRING med2
17469: PPUSH
17470: LD_INT 1
17472: PPUSH
17473: CALL_OW 101
17477: GO 17490
// AddMedal ( med2 , - 1 ) ;
17479: LD_STRING med2
17481: PPUSH
17482: LD_INT 1
17484: NEG
17485: PPUSH
17486: CALL_OW 101
// if deadCounter = 0 then
17490: LD_EXP 9
17494: PUSH
17495: LD_INT 0
17497: EQUAL
17498: IFFALSE 17512
// AddMedal ( med3 , 1 ) else
17500: LD_STRING med3
17502: PPUSH
17503: LD_INT 1
17505: PPUSH
17506: CALL_OW 101
17510: GO 17523
// AddMedal ( med3 , - 1 ) ;
17512: LD_STRING med3
17514: PPUSH
17515: LD_INT 1
17517: NEG
17518: PPUSH
17519: CALL_OW 101
// GiveMedals ( MAIN ) ;
17523: LD_STRING MAIN
17525: PPUSH
17526: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17530: LD_INT 22
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 23
17542: PUSH
17543: LD_INT 2
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 21
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: PPUSH
17565: CALL_OW 69
17569: PPUSH
17570: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17574: LD_EXP 28
17578: PPUSH
17579: LD_STRING 03_Heike
17581: PPUSH
17582: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17586: LD_EXP 32
17590: PPUSH
17591: LD_STRING 03_Aviradze
17593: PPUSH
17594: CALL_OW 38
// if Givi then
17598: LD_EXP 29
17602: IFFALSE 17616
// SaveCharacters ( Givi , 03_Givi ) ;
17604: LD_EXP 29
17608: PPUSH
17609: LD_STRING 03_Givi
17611: PPUSH
17612: CALL_OW 38
// if Mike then
17616: LD_EXP 30
17620: IFFALSE 17634
// SaveCharacters ( Mike , 03_Mike ) ;
17622: LD_EXP 30
17626: PPUSH
17627: LD_STRING 03_Mike
17629: PPUSH
17630: CALL_OW 38
// if Kamil then
17634: LD_EXP 31
17638: IFFALSE 17652
// SaveCharacters ( Kamil , 03_Kamil ) ;
17640: LD_EXP 31
17644: PPUSH
17645: LD_STRING 03_Kamil
17647: PPUSH
17648: CALL_OW 38
// if Kaia then
17652: LD_EXP 33
17656: IFFALSE 17670
// SaveCharacters ( Kaia , 03_Kaia ) ;
17658: LD_EXP 33
17662: PPUSH
17663: LD_STRING 03_Kaia
17665: PPUSH
17666: CALL_OW 38
// if Sophia then
17670: LD_EXP 34
17674: IFFALSE 17688
// SaveCharacters ( Sophia , 03_Sophia ) ;
17676: LD_EXP 34
17680: PPUSH
17681: LD_STRING 03_Sophia
17683: PPUSH
17684: CALL_OW 38
// if Markov then
17688: LD_EXP 35
17692: IFFALSE 17706
// SaveCharacters ( Markov , 03_Markov ) ;
17694: LD_EXP 35
17698: PPUSH
17699: LD_STRING 03_Markov
17701: PPUSH
17702: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17706: LD_EXP 38
17710: PUSH
17711: LD_EXP 38
17715: PPUSH
17716: CALL_OW 255
17720: PUSH
17721: LD_INT 2
17723: EQUAL
17724: AND
17725: IFFALSE 17739
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17727: LD_EXP 38
17731: PPUSH
17732: LD_STRING 03_Ibrahim
17734: PPUSH
17735: CALL_OW 38
// if heikeSecondSquad then
17739: LD_EXP 42
17743: IFFALSE 17757
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17745: LD_EXP 42
17749: PPUSH
17750: LD_STRING 03_others
17752: PPUSH
17753: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17757: LD_EXP 9
17761: PPUSH
17762: LD_STRING 03_DeadCounter
17764: PPUSH
17765: CALL_OW 39
// YouWin ;
17769: CALL_OW 103
// DialogueOff ;
17773: CALL_OW 7
// end ; end_of_file
17777: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17778: LD_VAR 0 1
17782: PUSH
17783: LD_EXP 28
17787: EQUAL
17788: IFFALSE 17797
// YouLost ( Heike ) ;
17790: LD_STRING Heike
17792: PPUSH
17793: CALL_OW 104
// if un = Aviradze then
17797: LD_VAR 0 1
17801: PUSH
17802: LD_EXP 32
17806: EQUAL
17807: IFFALSE 17816
// YouLost ( Aviradze ) ;
17809: LD_STRING Aviradze
17811: PPUSH
17812: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17816: LD_VAR 0 1
17820: PUSH
17821: LD_INT 11
17823: EQUAL
17824: PUSH
17825: LD_EXP 11
17829: NOT
17830: AND
17831: IFFALSE 17840
// YouLost ( Depot ) ;
17833: LD_STRING Depot
17835: PPUSH
17836: CALL_OW 104
// if un = arDepot then
17840: LD_VAR 0 1
17844: PUSH
17845: LD_INT 5
17847: EQUAL
17848: IFFALSE 17857
// YouLost ( FarmerDepot ) ;
17850: LD_STRING FarmerDepot
17852: PPUSH
17853: CALL_OW 104
// if un = Farmer then
17857: LD_VAR 0 1
17861: PUSH
17862: LD_EXP 36
17866: EQUAL
17867: IFFALSE 17876
// YouLost ( Farmer ) ;
17869: LD_STRING Farmer
17871: PPUSH
17872: CALL_OW 104
// if un in usForces then
17876: LD_VAR 0 1
17880: PUSH
17881: LD_EXP 44
17885: IN
17886: IFFALSE 17904
// usForces := usForces diff un ;
17888: LD_ADDR_EXP 44
17892: PUSH
17893: LD_EXP 44
17897: PUSH
17898: LD_VAR 0 1
17902: DIFF
17903: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17904: LD_VAR 0 1
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 23
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 21
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: LIST
17943: PPUSH
17944: CALL_OW 69
17948: IN
17949: IFFALSE 17965
// deadCounter := deadCounter + 1 ;
17951: LD_ADDR_EXP 9
17955: PUSH
17956: LD_EXP 9
17960: PUSH
17961: LD_INT 1
17963: PLUS
17964: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
17965: LD_VAR 0 1
17969: PUSH
17970: LD_INT 22
17972: PUSH
17973: LD_INT 4
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 34
17982: PUSH
17983: LD_INT 12
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PPUSH
17994: CALL_OW 69
17998: IN
17999: PUSH
18000: LD_EXP 18
18004: NOT
18005: AND
18006: IFFALSE 18016
// firstConvoyDestroyed := true ;
18008: LD_ADDR_EXP 18
18012: PUSH
18013: LD_INT 1
18015: ST_TO_ADDR
// if un in usAttackers then
18016: LD_VAR 0 1
18020: PUSH
18021: LD_EXP 47
18025: IN
18026: IFFALSE 18044
// usAttackers := usAttackers diff un ;
18028: LD_ADDR_EXP 47
18032: PUSH
18033: LD_EXP 47
18037: PUSH
18038: LD_VAR 0 1
18042: DIFF
18043: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18044: LD_VAR 0 1
18048: PUSH
18049: LD_INT 22
18051: PUSH
18052: LD_INT 5
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 21
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PPUSH
18073: CALL_OW 69
18077: IN
18078: IFFALSE 18094
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18080: LD_ADDR_EXP 20
18084: PUSH
18085: LD_EXP 20
18089: PUSH
18090: LD_INT 1
18092: PLUS
18093: ST_TO_ADDR
// end ;
18094: PPOPN 1
18096: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18097: LD_VAR 0 2
18101: PUSH
18102: LD_EXP 38
18106: EQUAL
18107: PUSH
18108: LD_EXP 25
18112: AND
18113: IFFALSE 18259
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18115: LD_INT 22
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 30
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 50
18137: PUSH
18138: EMPTY
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 69
18150: IFFALSE 18192
// begin InGameOn ;
18152: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18156: LD_EXP 38
18160: PPUSH
18161: LD_INT 11
18163: PPUSH
18164: CALL_OW 120
// repeat wait ( 3 ) ;
18168: LD_INT 3
18170: PPUSH
18171: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18175: LD_EXP 38
18179: PPUSH
18180: CALL_OW 310
18184: IFFALSE 18168
// InGameOff ;
18186: CALL_OW 9
// end else
18190: GO 18259
// begin ibrahimInDepot := false ;
18192: LD_ADDR_EXP 25
18196: PUSH
18197: LD_INT 0
18199: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18200: LD_EXP 38
18204: PPUSH
18205: LD_INT 30
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18215: LD_INT 35
18217: PPUSH
18218: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18222: LD_EXP 38
18226: PPUSH
18227: LD_INT 30
18229: PPUSH
18230: LD_INT 1
18232: PPUSH
18233: CALL_OW 307
18237: PUSH
18238: LD_EXP 38
18242: PPUSH
18243: CALL_OW 301
18247: OR
18248: IFFALSE 18215
// RemoveUnit ( Ibrahim ) ;
18250: LD_EXP 38
18254: PPUSH
18255: CALL_OW 64
// end ; end ; end ;
18259: PPOPN 2
18261: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18262: LD_VAR 0 2
18266: PUSH
18267: LD_EXP 28
18271: EQUAL
18272: PUSH
18273: LD_VAR 0 1
18277: PUSH
18278: LD_INT 11
18280: EQUAL
18281: AND
18282: PUSH
18283: LD_EXP 25
18287: AND
18288: IFFALSE 18294
// IbrahimQuery ;
18290: CALL 16065 0 0
// end ;
18294: PPOPN 2
18296: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18297: LD_VAR 0 1
18301: PPUSH
18302: CALL_OW 141
// if oldId in usAttackers then
18306: LD_VAR 0 2
18310: PUSH
18311: LD_EXP 47
18315: IN
18316: IFFALSE 18334
// usAttackers := usAttackers diff oldId ;
18318: LD_ADDR_EXP 47
18322: PUSH
18323: LD_EXP 47
18327: PUSH
18328: LD_VAR 0 2
18332: DIFF
18333: ST_TO_ADDR
// if newId in usAttackers then
18334: LD_VAR 0 1
18338: PUSH
18339: LD_EXP 47
18343: IN
18344: IFFALSE 18362
// usAttackers := usAttackers diff newId ;
18346: LD_ADDR_EXP 47
18350: PUSH
18351: LD_EXP 47
18355: PUSH
18356: LD_VAR 0 1
18360: DIFF
18361: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18362: LD_VAR 0 3
18366: PUSH
18367: LD_INT 4
18369: EQUAL
18370: PUSH
18371: LD_EXP 18
18375: NOT
18376: AND
18377: IFFALSE 18387
// firstConvoyDestroyed := true ;
18379: LD_ADDR_EXP 18
18383: PUSH
18384: LD_INT 1
18386: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 264
18396: PUSH
18397: LD_INT 12
18399: EQUAL
18400: IFFALSE 18438
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18402: LD_ADDR_EXP 13
18406: PUSH
18407: LD_EXP 13
18411: PUSH
18412: LD_INT 1
18414: PLUS
18415: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_INT 1
18423: PPUSH
18424: CALL_OW 289
18428: PUSH
18429: LD_INT 0
18431: EQUAL
18432: IFFALSE 18438
// EmptyCargoDialog ;
18434: CALL 14703 0 0
// end ; end ;
18438: PPOPN 4
18440: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18441: LD_VAR 0 1
18445: PUSH
18446: LD_INT 2
18448: EQUAL
18449: PUSH
18450: LD_VAR 0 2
18454: PUSH
18455: LD_INT 5
18457: EQUAL
18458: AND
18459: IFFALSE 18468
// YouLost ( Attack ) ;
18461: LD_STRING Attack
18463: PPUSH
18464: CALL_OW 104
// end ;
18468: PPOPN 2
18470: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18471: LD_VAR 0 1
18475: PPUSH
18476: CALL_OW 255
18480: PUSH
18481: LD_INT 1
18483: EQUAL
18484: PUSH
18485: LD_EXP 6
18489: NOT
18490: AND
18491: IFFALSE 18625
// begin if GetBType ( b ) = b_lab then
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 266
18502: PUSH
18503: LD_INT 6
18505: EQUAL
18506: IFFALSE 18546
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18508: LD_EXP 44
18512: PPUSH
18513: LD_INT 25
18515: PUSH
18516: LD_INT 4
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 72
18527: PPUSH
18528: LD_VAR 0 1
18532: PPUSH
18533: CALL_OW 120
// AmLabResearch ( b ) ;
18537: LD_VAR 0 1
18541: PPUSH
18542: CALL 5139 0 1
// end ; if GetBType ( b ) = b_armoury then
18546: LD_VAR 0 1
18550: PPUSH
18551: CALL_OW 266
18555: PUSH
18556: LD_INT 4
18558: EQUAL
18559: IFFALSE 18607
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18561: LD_EXP 44
18565: PPUSH
18566: LD_INT 25
18568: PUSH
18569: LD_INT 1
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 3
18578: PUSH
18579: LD_INT 54
18581: PUSH
18582: EMPTY
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PPUSH
18593: CALL_OW 72
18597: PPUSH
18598: LD_VAR 0 1
18602: PPUSH
18603: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18607: LD_ADDR_EXP 46
18611: PUSH
18612: LD_EXP 46
18616: PPUSH
18617: LD_INT 1
18619: PPUSH
18620: CALL_OW 3
18624: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 255
18634: PUSH
18635: LD_INT 5
18637: EQUAL
18638: IFFALSE 18652
// SetBLevel ( b , 5 ) ;
18640: LD_VAR 0 1
18644: PPUSH
18645: LD_INT 5
18647: PPUSH
18648: CALL_OW 241
// end ;
18652: PPOPN 1
18654: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18655: LD_VAR 0 1
18659: PPUSH
18660: CALL_OW 255
18664: PUSH
18665: LD_INT 2
18667: EQUAL
18668: IFFALSE 18684
// vehCounter := vehCounter + 1 ;
18670: LD_ADDR_EXP 22
18674: PUSH
18675: LD_EXP 22
18679: PUSH
18680: LD_INT 1
18682: PLUS
18683: ST_TO_ADDR
// end ;
18684: PPOPN 2
18686: END
// on SailEvent ( event ) do begin if event = eventAttack then
18687: LD_VAR 0 1
18691: PUSH
18692: LD_EXP 24
18696: EQUAL
18697: IFFALSE 18703
// AmericanAttack ;
18699: CALL 6587 0 0
// end ; end_of_file
18703: PPOPN 1
18705: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18706: LD_OWVAR 1
18710: PUSH
18711: LD_INT 10500
18713: PUSH
18714: LD_INT 9800
18716: PUSH
18717: LD_INT 9450
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: LIST
18724: PUSH
18725: LD_OWVAR 67
18729: ARRAY
18730: LESSEQUAL
18731: IFFALSE 18758
18733: GO 18735
18735: DISABLE
// begin enable ;
18736: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18737: LD_INT 1
18739: PPUSH
18740: LD_INT 5
18742: PPUSH
18743: CALL_OW 12
18747: PPUSH
18748: LD_INT 9
18750: PPUSH
18751: LD_INT 1
18753: PPUSH
18754: CALL_OW 55
// end ;
18758: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
18759: LD_EXP 6
18763: PUSH
18764: LD_OWVAR 1
18768: PUSH
18769: LD_INT 56700
18771: PUSH
18772: LD_INT 55650
18774: PUSH
18775: LD_INT 54600
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: PUSH
18783: LD_OWVAR 67
18787: ARRAY
18788: LESSEQUAL
18789: AND
18790: IFFALSE 18817
18792: GO 18794
18794: DISABLE
// begin enable ;
18795: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
18796: LD_INT 3
18798: PPUSH
18799: LD_INT 5
18801: PPUSH
18802: CALL_OW 12
18806: PPUSH
18807: LD_INT 9
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: CALL_OW 55
// end ; end_of_file
18817: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18818: LD_EXP 11
18822: NOT
18823: PUSH
18824: LD_EXP 16
18828: AND
18829: PUSH
18830: LD_EXP 4
18834: AND
18835: PUSH
18836: LD_EXP 15
18840: PUSH
18841: LD_EXP 16
18845: LESSEQUAL
18846: AND
18847: IFFALSE 18937
18849: GO 18851
18851: DISABLE
// begin enable ;
18852: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
18853: LD_ADDR_OWVAR 47
18857: PUSH
18858: LD_STRING #X103-1
18860: PUSH
18861: LD_EXP 16
18865: PUSH
18866: LD_EXP 15
18870: MINUS
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18876: LD_ADDR_EXP 15
18880: PUSH
18881: LD_INT 5
18883: PPUSH
18884: CALL_OW 274
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 275
18896: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18897: LD_INT 10
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: CALL_OW 287
18907: PUSH
18908: LD_INT 0
18910: EQUAL
18911: IFFALSE 18929
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
18913: LD_ADDR_EXP 17
18917: PUSH
18918: LD_EXP 17
18922: PUSH
18923: LD_INT 35
18925: MINUS
18926: ST_TO_ADDR
18927: GO 18937
// farmerCratesCounter := 30 30$00 ;
18929: LD_ADDR_EXP 17
18933: PUSH
18934: LD_INT 63000
18936: ST_TO_ADDR
// end ; end_of_file
18937: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18938: LD_INT 0
18940: PPUSH
// ar_miner := 81 ;
18941: LD_ADDR_EXP 55
18945: PUSH
18946: LD_INT 81
18948: ST_TO_ADDR
// ar_crane := 88 ;
18949: LD_ADDR_EXP 54
18953: PUSH
18954: LD_INT 88
18956: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18957: LD_ADDR_EXP 49
18961: PUSH
18962: LD_INT 89
18964: ST_TO_ADDR
// us_hack := 99 ;
18965: LD_ADDR_EXP 50
18969: PUSH
18970: LD_INT 99
18972: ST_TO_ADDR
// us_artillery := 97 ;
18973: LD_ADDR_EXP 51
18977: PUSH
18978: LD_INT 97
18980: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18981: LD_ADDR_EXP 52
18985: PUSH
18986: LD_INT 91
18988: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18989: LD_ADDR_EXP 53
18993: PUSH
18994: LD_INT 92
18996: ST_TO_ADDR
// ru_radar := 98 ;
18997: LD_ADDR_EXP 48
19001: PUSH
19002: LD_INT 98
19004: ST_TO_ADDR
// tech_Artillery := 80 ;
19005: LD_ADDR_EXP 56
19009: PUSH
19010: LD_INT 80
19012: ST_TO_ADDR
// tech_RadMat := 81 ;
19013: LD_ADDR_EXP 57
19017: PUSH
19018: LD_INT 81
19020: ST_TO_ADDR
// tech_BasicTools := 82 ;
19021: LD_ADDR_EXP 58
19025: PUSH
19026: LD_INT 82
19028: ST_TO_ADDR
// tech_Cargo := 83 ;
19029: LD_ADDR_EXP 59
19033: PUSH
19034: LD_INT 83
19036: ST_TO_ADDR
// tech_Track := 84 ;
19037: LD_ADDR_EXP 60
19041: PUSH
19042: LD_INT 84
19044: ST_TO_ADDR
// tech_Crane := 85 ;
19045: LD_ADDR_EXP 61
19049: PUSH
19050: LD_INT 85
19052: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19053: LD_ADDR_EXP 62
19057: PUSH
19058: LD_INT 86
19060: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19061: LD_ADDR_EXP 63
19065: PUSH
19066: LD_INT 87
19068: ST_TO_ADDR
// end ;
19069: LD_VAR 0 1
19073: RET
// every 1 do
19074: GO 19076
19076: DISABLE
// InitGlobalVariables ; end_of_file
19077: CALL 18938 0 0
19081: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19082: LD_VAR 0 2
19086: PUSH
19087: LD_INT 100
19089: EQUAL
19090: IFFALSE 20039
// begin if not StreamModeActive then
19092: LD_EXP 64
19096: NOT
19097: IFFALSE 19107
// StreamModeActive := true ;
19099: LD_ADDR_EXP 64
19103: PUSH
19104: LD_INT 1
19106: ST_TO_ADDR
// if p3 = 0 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 0
19114: EQUAL
19115: IFFALSE 19121
// InitStreamMode ;
19117: CALL 20197 0 0
// if p3 = 1 then
19121: LD_VAR 0 3
19125: PUSH
19126: LD_INT 1
19128: EQUAL
19129: IFFALSE 19139
// sRocket := true ;
19131: LD_ADDR_EXP 69
19135: PUSH
19136: LD_INT 1
19138: ST_TO_ADDR
// if p3 = 2 then
19139: LD_VAR 0 3
19143: PUSH
19144: LD_INT 2
19146: EQUAL
19147: IFFALSE 19157
// sSpeed := true ;
19149: LD_ADDR_EXP 68
19153: PUSH
19154: LD_INT 1
19156: ST_TO_ADDR
// if p3 = 3 then
19157: LD_VAR 0 3
19161: PUSH
19162: LD_INT 3
19164: EQUAL
19165: IFFALSE 19175
// sEngine := true ;
19167: LD_ADDR_EXP 70
19171: PUSH
19172: LD_INT 1
19174: ST_TO_ADDR
// if p3 = 4 then
19175: LD_VAR 0 3
19179: PUSH
19180: LD_INT 4
19182: EQUAL
19183: IFFALSE 19193
// sSpec := true ;
19185: LD_ADDR_EXP 67
19189: PUSH
19190: LD_INT 1
19192: ST_TO_ADDR
// if p3 = 5 then
19193: LD_VAR 0 3
19197: PUSH
19198: LD_INT 5
19200: EQUAL
19201: IFFALSE 19211
// sLevel := true ;
19203: LD_ADDR_EXP 71
19207: PUSH
19208: LD_INT 1
19210: ST_TO_ADDR
// if p3 = 6 then
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 6
19218: EQUAL
19219: IFFALSE 19229
// sArmoury := true ;
19221: LD_ADDR_EXP 72
19225: PUSH
19226: LD_INT 1
19228: ST_TO_ADDR
// if p3 = 7 then
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 7
19236: EQUAL
19237: IFFALSE 19247
// sRadar := true ;
19239: LD_ADDR_EXP 73
19243: PUSH
19244: LD_INT 1
19246: ST_TO_ADDR
// if p3 = 8 then
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 8
19254: EQUAL
19255: IFFALSE 19265
// sBunker := true ;
19257: LD_ADDR_EXP 74
19261: PUSH
19262: LD_INT 1
19264: ST_TO_ADDR
// if p3 = 9 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 9
19272: EQUAL
19273: IFFALSE 19283
// sHack := true ;
19275: LD_ADDR_EXP 75
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 10 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 10
19290: EQUAL
19291: IFFALSE 19301
// sFire := true ;
19293: LD_ADDR_EXP 76
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 11 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 11
19308: EQUAL
19309: IFFALSE 19319
// sRefresh := true ;
19311: LD_ADDR_EXP 77
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 12 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 12
19326: EQUAL
19327: IFFALSE 19337
// sExp := true ;
19329: LD_ADDR_EXP 78
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 13 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 13
19344: EQUAL
19345: IFFALSE 19355
// sDepot := true ;
19347: LD_ADDR_EXP 79
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 14 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 14
19362: EQUAL
19363: IFFALSE 19373
// sFlag := true ;
19365: LD_ADDR_EXP 80
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 15 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 15
19380: EQUAL
19381: IFFALSE 19391
// sKamikadze := true ;
19383: LD_ADDR_EXP 88
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 16 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 16
19398: EQUAL
19399: IFFALSE 19409
// sTroll := true ;
19401: LD_ADDR_EXP 89
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 17 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 17
19416: EQUAL
19417: IFFALSE 19427
// sSlow := true ;
19419: LD_ADDR_EXP 90
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 18 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 18
19434: EQUAL
19435: IFFALSE 19445
// sLack := true ;
19437: LD_ADDR_EXP 91
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 19 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 19
19452: EQUAL
19453: IFFALSE 19463
// sTank := true ;
19455: LD_ADDR_EXP 93
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 20 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 20
19470: EQUAL
19471: IFFALSE 19481
// sRemote := true ;
19473: LD_ADDR_EXP 94
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 21 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 21
19488: EQUAL
19489: IFFALSE 19499
// sPowell := true ;
19491: LD_ADDR_EXP 95
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 22 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 22
19506: EQUAL
19507: IFFALSE 19517
// sTeleport := true ;
19509: LD_ADDR_EXP 98
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 23 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 23
19524: EQUAL
19525: IFFALSE 19535
// sOilTower := true ;
19527: LD_ADDR_EXP 100
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 24 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 24
19542: EQUAL
19543: IFFALSE 19553
// sShovel := true ;
19545: LD_ADDR_EXP 101
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 25 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 25
19560: EQUAL
19561: IFFALSE 19571
// sSheik := true ;
19563: LD_ADDR_EXP 102
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 26 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 26
19578: EQUAL
19579: IFFALSE 19589
// sEarthquake := true ;
19581: LD_ADDR_EXP 104
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 27 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 27
19596: EQUAL
19597: IFFALSE 19607
// sAI := true ;
19599: LD_ADDR_EXP 105
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 28 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 28
19614: EQUAL
19615: IFFALSE 19625
// sCargo := true ;
19617: LD_ADDR_EXP 108
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 29 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 29
19632: EQUAL
19633: IFFALSE 19643
// sDLaser := true ;
19635: LD_ADDR_EXP 109
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 30 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 30
19650: EQUAL
19651: IFFALSE 19661
// sExchange := true ;
19653: LD_ADDR_EXP 110
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 31 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 31
19668: EQUAL
19669: IFFALSE 19679
// sFac := true ;
19671: LD_ADDR_EXP 111
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 32 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 32
19686: EQUAL
19687: IFFALSE 19697
// sPower := true ;
19689: LD_ADDR_EXP 112
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 33 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 33
19704: EQUAL
19705: IFFALSE 19715
// sRandom := true ;
19707: LD_ADDR_EXP 113
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 34 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 34
19722: EQUAL
19723: IFFALSE 19733
// sShield := true ;
19725: LD_ADDR_EXP 114
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 35 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 35
19740: EQUAL
19741: IFFALSE 19751
// sTime := true ;
19743: LD_ADDR_EXP 115
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 36 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 36
19758: EQUAL
19759: IFFALSE 19769
// sTools := true ;
19761: LD_ADDR_EXP 116
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 101 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 101
19776: EQUAL
19777: IFFALSE 19787
// sSold := true ;
19779: LD_ADDR_EXP 81
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 102 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 102
19794: EQUAL
19795: IFFALSE 19805
// sDiff := true ;
19797: LD_ADDR_EXP 82
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 103 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 103
19812: EQUAL
19813: IFFALSE 19823
// sFog := true ;
19815: LD_ADDR_EXP 85
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 104 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 104
19830: EQUAL
19831: IFFALSE 19841
// sReset := true ;
19833: LD_ADDR_EXP 86
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 105 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 105
19848: EQUAL
19849: IFFALSE 19859
// sSun := true ;
19851: LD_ADDR_EXP 87
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 106 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 106
19866: EQUAL
19867: IFFALSE 19877
// sTiger := true ;
19869: LD_ADDR_EXP 83
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 107 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 107
19884: EQUAL
19885: IFFALSE 19895
// sBomb := true ;
19887: LD_ADDR_EXP 84
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 108 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 108
19902: EQUAL
19903: IFFALSE 19913
// sWound := true ;
19905: LD_ADDR_EXP 92
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 109 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 109
19920: EQUAL
19921: IFFALSE 19931
// sBetray := true ;
19923: LD_ADDR_EXP 96
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 110 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 110
19938: EQUAL
19939: IFFALSE 19949
// sContamin := true ;
19941: LD_ADDR_EXP 97
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 111 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 111
19956: EQUAL
19957: IFFALSE 19967
// sOil := true ;
19959: LD_ADDR_EXP 99
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 112 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 112
19974: EQUAL
19975: IFFALSE 19985
// sStu := true ;
19977: LD_ADDR_EXP 103
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 113 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 113
19992: EQUAL
19993: IFFALSE 20003
// sBazooka := true ;
19995: LD_ADDR_EXP 106
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 114 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 114
20010: EQUAL
20011: IFFALSE 20021
// sMortar := true ;
20013: LD_ADDR_EXP 107
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 115 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 115
20028: EQUAL
20029: IFFALSE 20039
// sRanger := true ;
20031: LD_ADDR_EXP 117
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// end ; if p2 = 101 then
20039: LD_VAR 0 2
20043: PUSH
20044: LD_INT 101
20046: EQUAL
20047: IFFALSE 20175
// begin case p3 of 1 :
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 1
20056: DOUBLE
20057: EQUAL
20058: IFTRUE 20062
20060: GO 20069
20062: POP
// hHackUnlimitedResources ; 2 :
20063: CALL 31210 0 0
20067: GO 20175
20069: LD_INT 2
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20084
20077: POP
// hHackSetLevel10 ; 3 :
20078: CALL 31343 0 0
20082: GO 20175
20084: LD_INT 3
20086: DOUBLE
20087: EQUAL
20088: IFTRUE 20092
20090: GO 20099
20092: POP
// hHackSetLevel10YourUnits ; 4 :
20093: CALL 31428 0 0
20097: GO 20175
20099: LD_INT 4
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20114
20107: POP
// hHackInvincible ; 5 :
20108: CALL 31876 0 0
20112: GO 20175
20114: LD_INT 5
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20129
20122: POP
// hHackInvisible ; 6 :
20123: CALL 31987 0 0
20127: GO 20175
20129: LD_INT 6
20131: DOUBLE
20132: EQUAL
20133: IFTRUE 20137
20135: GO 20144
20137: POP
// hHackChangeYourSide ; 7 :
20138: CALL 32044 0 0
20142: GO 20175
20144: LD_INT 7
20146: DOUBLE
20147: EQUAL
20148: IFTRUE 20152
20150: GO 20159
20152: POP
// hHackChangeUnitSide ; 8 :
20153: CALL 32086 0 0
20157: GO 20175
20159: LD_INT 8
20161: DOUBLE
20162: EQUAL
20163: IFTRUE 20167
20165: GO 20174
20167: POP
// hHackFog ; end ;
20168: CALL 32187 0 0
20172: GO 20175
20174: POP
// end ; end ;
20175: PPOPN 6
20177: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20178: GO 20180
20180: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20181: LD_STRING initStreamRollete();
20183: PPUSH
20184: CALL_OW 559
// InitStreamMode ;
20188: CALL 20197 0 0
// DefineStreamItems ( ) ;
20192: CALL 20637 0 0
// end ;
20196: END
// function InitStreamMode ; begin
20197: LD_INT 0
20199: PPUSH
// streamModeActive := false ;
20200: LD_ADDR_EXP 64
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// normalCounter := 36 ;
20208: LD_ADDR_EXP 65
20212: PUSH
20213: LD_INT 36
20215: ST_TO_ADDR
// hardcoreCounter := 16 ;
20216: LD_ADDR_EXP 66
20220: PUSH
20221: LD_INT 16
20223: ST_TO_ADDR
// sRocket := false ;
20224: LD_ADDR_EXP 69
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sSpeed := false ;
20232: LD_ADDR_EXP 68
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sEngine := false ;
20240: LD_ADDR_EXP 70
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sSpec := false ;
20248: LD_ADDR_EXP 67
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sLevel := false ;
20256: LD_ADDR_EXP 71
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sArmoury := false ;
20264: LD_ADDR_EXP 72
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sRadar := false ;
20272: LD_ADDR_EXP 73
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// sBunker := false ;
20280: LD_ADDR_EXP 74
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// sHack := false ;
20288: LD_ADDR_EXP 75
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// sFire := false ;
20296: LD_ADDR_EXP 76
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// sRefresh := false ;
20304: LD_ADDR_EXP 77
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// sExp := false ;
20312: LD_ADDR_EXP 78
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// sDepot := false ;
20320: LD_ADDR_EXP 79
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// sFlag := false ;
20328: LD_ADDR_EXP 80
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// sKamikadze := false ;
20336: LD_ADDR_EXP 88
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// sTroll := false ;
20344: LD_ADDR_EXP 89
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// sSlow := false ;
20352: LD_ADDR_EXP 90
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// sLack := false ;
20360: LD_ADDR_EXP 91
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// sTank := false ;
20368: LD_ADDR_EXP 93
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// sRemote := false ;
20376: LD_ADDR_EXP 94
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// sPowell := false ;
20384: LD_ADDR_EXP 95
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// sTeleport := false ;
20392: LD_ADDR_EXP 98
20396: PUSH
20397: LD_INT 0
20399: ST_TO_ADDR
// sOilTower := false ;
20400: LD_ADDR_EXP 100
20404: PUSH
20405: LD_INT 0
20407: ST_TO_ADDR
// sShovel := false ;
20408: LD_ADDR_EXP 101
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
// sSheik := false ;
20416: LD_ADDR_EXP 102
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// sEarthquake := false ;
20424: LD_ADDR_EXP 104
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// sAI := false ;
20432: LD_ADDR_EXP 105
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
// sCargo := false ;
20440: LD_ADDR_EXP 108
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
// sDLaser := false ;
20448: LD_ADDR_EXP 109
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// sExchange := false ;
20456: LD_ADDR_EXP 110
20460: PUSH
20461: LD_INT 0
20463: ST_TO_ADDR
// sFac := false ;
20464: LD_ADDR_EXP 111
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// sPower := false ;
20472: LD_ADDR_EXP 112
20476: PUSH
20477: LD_INT 0
20479: ST_TO_ADDR
// sRandom := false ;
20480: LD_ADDR_EXP 113
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// sShield := false ;
20488: LD_ADDR_EXP 114
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// sTime := false ;
20496: LD_ADDR_EXP 115
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// sTools := false ;
20504: LD_ADDR_EXP 116
20508: PUSH
20509: LD_INT 0
20511: ST_TO_ADDR
// sSold := false ;
20512: LD_ADDR_EXP 81
20516: PUSH
20517: LD_INT 0
20519: ST_TO_ADDR
// sDiff := false ;
20520: LD_ADDR_EXP 82
20524: PUSH
20525: LD_INT 0
20527: ST_TO_ADDR
// sFog := false ;
20528: LD_ADDR_EXP 85
20532: PUSH
20533: LD_INT 0
20535: ST_TO_ADDR
// sReset := false ;
20536: LD_ADDR_EXP 86
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// sSun := false ;
20544: LD_ADDR_EXP 87
20548: PUSH
20549: LD_INT 0
20551: ST_TO_ADDR
// sTiger := false ;
20552: LD_ADDR_EXP 83
20556: PUSH
20557: LD_INT 0
20559: ST_TO_ADDR
// sBomb := false ;
20560: LD_ADDR_EXP 84
20564: PUSH
20565: LD_INT 0
20567: ST_TO_ADDR
// sWound := false ;
20568: LD_ADDR_EXP 92
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// sBetray := false ;
20576: LD_ADDR_EXP 96
20580: PUSH
20581: LD_INT 0
20583: ST_TO_ADDR
// sContamin := false ;
20584: LD_ADDR_EXP 97
20588: PUSH
20589: LD_INT 0
20591: ST_TO_ADDR
// sOil := false ;
20592: LD_ADDR_EXP 99
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// sStu := false ;
20600: LD_ADDR_EXP 103
20604: PUSH
20605: LD_INT 0
20607: ST_TO_ADDR
// sBazooka := false ;
20608: LD_ADDR_EXP 106
20612: PUSH
20613: LD_INT 0
20615: ST_TO_ADDR
// sMortar := false ;
20616: LD_ADDR_EXP 107
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
// sRanger := false ;
20624: LD_ADDR_EXP 117
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// end ;
20632: LD_VAR 0 1
20636: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
20641: PPUSH
20642: PPUSH
20643: PPUSH
// result := [ ] ;
20644: LD_ADDR_VAR 0 1
20648: PUSH
20649: EMPTY
20650: ST_TO_ADDR
// if campaign_id = 1 then
20651: LD_OWVAR 69
20655: PUSH
20656: LD_INT 1
20658: EQUAL
20659: IFFALSE 23597
// begin case mission_number of 1 :
20661: LD_OWVAR 70
20665: PUSH
20666: LD_INT 1
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 20738
20674: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20675: LD_ADDR_VAR 0 1
20679: PUSH
20680: LD_INT 2
20682: PUSH
20683: LD_INT 4
20685: PUSH
20686: LD_INT 11
20688: PUSH
20689: LD_INT 12
20691: PUSH
20692: LD_INT 15
20694: PUSH
20695: LD_INT 16
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 23
20703: PUSH
20704: LD_INT 26
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 101
20720: PUSH
20721: LD_INT 102
20723: PUSH
20724: LD_INT 106
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: ST_TO_ADDR
20736: GO 23595
20738: LD_INT 2
20740: DOUBLE
20741: EQUAL
20742: IFTRUE 20746
20744: GO 20818
20746: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20747: LD_ADDR_VAR 0 1
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 4
20757: PUSH
20758: LD_INT 11
20760: PUSH
20761: LD_INT 12
20763: PUSH
20764: LD_INT 15
20766: PUSH
20767: LD_INT 16
20769: PUSH
20770: LD_INT 22
20772: PUSH
20773: LD_INT 23
20775: PUSH
20776: LD_INT 26
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 101
20792: PUSH
20793: LD_INT 102
20795: PUSH
20796: LD_INT 105
20798: PUSH
20799: LD_INT 106
20801: PUSH
20802: LD_INT 108
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: ST_TO_ADDR
20816: GO 23595
20818: LD_INT 3
20820: DOUBLE
20821: EQUAL
20822: IFTRUE 20826
20824: GO 20902
20826: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20827: LD_ADDR_VAR 0 1
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 4
20837: PUSH
20838: LD_INT 5
20840: PUSH
20841: LD_INT 11
20843: PUSH
20844: LD_INT 12
20846: PUSH
20847: LD_INT 15
20849: PUSH
20850: LD_INT 16
20852: PUSH
20853: LD_INT 22
20855: PUSH
20856: LD_INT 26
20858: PUSH
20859: LD_INT 36
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 101
20876: PUSH
20877: LD_INT 102
20879: PUSH
20880: LD_INT 105
20882: PUSH
20883: LD_INT 106
20885: PUSH
20886: LD_INT 108
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: ST_TO_ADDR
20900: GO 23595
20902: LD_INT 4
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 20994
20910: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20911: LD_ADDR_VAR 0 1
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 4
20921: PUSH
20922: LD_INT 5
20924: PUSH
20925: LD_INT 8
20927: PUSH
20928: LD_INT 11
20930: PUSH
20931: LD_INT 12
20933: PUSH
20934: LD_INT 15
20936: PUSH
20937: LD_INT 16
20939: PUSH
20940: LD_INT 22
20942: PUSH
20943: LD_INT 23
20945: PUSH
20946: LD_INT 26
20948: PUSH
20949: LD_INT 36
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 101
20968: PUSH
20969: LD_INT 102
20971: PUSH
20972: LD_INT 105
20974: PUSH
20975: LD_INT 106
20977: PUSH
20978: LD_INT 108
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: ST_TO_ADDR
20992: GO 23595
20994: LD_INT 5
20996: DOUBLE
20997: EQUAL
20998: IFTRUE 21002
21000: GO 21102
21002: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21003: LD_ADDR_VAR 0 1
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: LD_INT 4
21013: PUSH
21014: LD_INT 5
21016: PUSH
21017: LD_INT 6
21019: PUSH
21020: LD_INT 8
21022: PUSH
21023: LD_INT 11
21025: PUSH
21026: LD_INT 12
21028: PUSH
21029: LD_INT 15
21031: PUSH
21032: LD_INT 16
21034: PUSH
21035: LD_INT 22
21037: PUSH
21038: LD_INT 23
21040: PUSH
21041: LD_INT 25
21043: PUSH
21044: LD_INT 26
21046: PUSH
21047: LD_INT 36
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 101
21068: PUSH
21069: LD_INT 102
21071: PUSH
21072: LD_INT 105
21074: PUSH
21075: LD_INT 106
21077: PUSH
21078: LD_INT 108
21080: PUSH
21081: LD_INT 109
21083: PUSH
21084: LD_INT 112
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: ST_TO_ADDR
21100: GO 23595
21102: LD_INT 6
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21230
21110: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21111: LD_ADDR_VAR 0 1
21115: PUSH
21116: LD_INT 2
21118: PUSH
21119: LD_INT 4
21121: PUSH
21122: LD_INT 5
21124: PUSH
21125: LD_INT 6
21127: PUSH
21128: LD_INT 8
21130: PUSH
21131: LD_INT 11
21133: PUSH
21134: LD_INT 12
21136: PUSH
21137: LD_INT 15
21139: PUSH
21140: LD_INT 16
21142: PUSH
21143: LD_INT 20
21145: PUSH
21146: LD_INT 21
21148: PUSH
21149: LD_INT 22
21151: PUSH
21152: LD_INT 23
21154: PUSH
21155: LD_INT 25
21157: PUSH
21158: LD_INT 26
21160: PUSH
21161: LD_INT 30
21163: PUSH
21164: LD_INT 31
21166: PUSH
21167: LD_INT 32
21169: PUSH
21170: LD_INT 36
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 101
21196: PUSH
21197: LD_INT 102
21199: PUSH
21200: LD_INT 105
21202: PUSH
21203: LD_INT 106
21205: PUSH
21206: LD_INT 108
21208: PUSH
21209: LD_INT 109
21211: PUSH
21212: LD_INT 112
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: ST_TO_ADDR
21228: GO 23595
21230: LD_INT 7
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21338
21238: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 4
21249: PUSH
21250: LD_INT 5
21252: PUSH
21253: LD_INT 7
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 15
21264: PUSH
21265: LD_INT 16
21267: PUSH
21268: LD_INT 20
21270: PUSH
21271: LD_INT 21
21273: PUSH
21274: LD_INT 22
21276: PUSH
21277: LD_INT 23
21279: PUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 26
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 101
21304: PUSH
21305: LD_INT 102
21307: PUSH
21308: LD_INT 103
21310: PUSH
21311: LD_INT 105
21313: PUSH
21314: LD_INT 106
21316: PUSH
21317: LD_INT 108
21319: PUSH
21320: LD_INT 112
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: ST_TO_ADDR
21336: GO 23595
21338: LD_INT 8
21340: DOUBLE
21341: EQUAL
21342: IFTRUE 21346
21344: GO 21474
21346: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21347: LD_ADDR_VAR 0 1
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: LD_INT 4
21357: PUSH
21358: LD_INT 5
21360: PUSH
21361: LD_INT 6
21363: PUSH
21364: LD_INT 7
21366: PUSH
21367: LD_INT 8
21369: PUSH
21370: LD_INT 11
21372: PUSH
21373: LD_INT 12
21375: PUSH
21376: LD_INT 15
21378: PUSH
21379: LD_INT 16
21381: PUSH
21382: LD_INT 20
21384: PUSH
21385: LD_INT 21
21387: PUSH
21388: LD_INT 22
21390: PUSH
21391: LD_INT 23
21393: PUSH
21394: LD_INT 25
21396: PUSH
21397: LD_INT 26
21399: PUSH
21400: LD_INT 30
21402: PUSH
21403: LD_INT 31
21405: PUSH
21406: LD_INT 32
21408: PUSH
21409: LD_INT 36
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 101
21436: PUSH
21437: LD_INT 102
21439: PUSH
21440: LD_INT 103
21442: PUSH
21443: LD_INT 105
21445: PUSH
21446: LD_INT 106
21448: PUSH
21449: LD_INT 108
21451: PUSH
21452: LD_INT 109
21454: PUSH
21455: LD_INT 112
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: ST_TO_ADDR
21472: GO 23595
21474: LD_INT 9
21476: DOUBLE
21477: EQUAL
21478: IFTRUE 21482
21480: GO 21618
21482: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21483: LD_ADDR_VAR 0 1
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 4
21493: PUSH
21494: LD_INT 5
21496: PUSH
21497: LD_INT 6
21499: PUSH
21500: LD_INT 7
21502: PUSH
21503: LD_INT 8
21505: PUSH
21506: LD_INT 11
21508: PUSH
21509: LD_INT 12
21511: PUSH
21512: LD_INT 15
21514: PUSH
21515: LD_INT 16
21517: PUSH
21518: LD_INT 20
21520: PUSH
21521: LD_INT 21
21523: PUSH
21524: LD_INT 22
21526: PUSH
21527: LD_INT 23
21529: PUSH
21530: LD_INT 25
21532: PUSH
21533: LD_INT 26
21535: PUSH
21536: LD_INT 28
21538: PUSH
21539: LD_INT 30
21541: PUSH
21542: LD_INT 31
21544: PUSH
21545: LD_INT 32
21547: PUSH
21548: LD_INT 36
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 101
21576: PUSH
21577: LD_INT 102
21579: PUSH
21580: LD_INT 103
21582: PUSH
21583: LD_INT 105
21585: PUSH
21586: LD_INT 106
21588: PUSH
21589: LD_INT 108
21591: PUSH
21592: LD_INT 109
21594: PUSH
21595: LD_INT 112
21597: PUSH
21598: LD_INT 114
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: ST_TO_ADDR
21616: GO 23595
21618: LD_INT 10
21620: DOUBLE
21621: EQUAL
21622: IFTRUE 21626
21624: GO 21810
21626: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21627: LD_ADDR_VAR 0 1
21631: PUSH
21632: LD_INT 2
21634: PUSH
21635: LD_INT 4
21637: PUSH
21638: LD_INT 5
21640: PUSH
21641: LD_INT 6
21643: PUSH
21644: LD_INT 7
21646: PUSH
21647: LD_INT 8
21649: PUSH
21650: LD_INT 9
21652: PUSH
21653: LD_INT 10
21655: PUSH
21656: LD_INT 11
21658: PUSH
21659: LD_INT 12
21661: PUSH
21662: LD_INT 13
21664: PUSH
21665: LD_INT 14
21667: PUSH
21668: LD_INT 15
21670: PUSH
21671: LD_INT 16
21673: PUSH
21674: LD_INT 17
21676: PUSH
21677: LD_INT 18
21679: PUSH
21680: LD_INT 19
21682: PUSH
21683: LD_INT 20
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 22
21691: PUSH
21692: LD_INT 23
21694: PUSH
21695: LD_INT 24
21697: PUSH
21698: LD_INT 25
21700: PUSH
21701: LD_INT 26
21703: PUSH
21704: LD_INT 28
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_INT 31
21712: PUSH
21713: LD_INT 32
21715: PUSH
21716: LD_INT 36
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 101
21752: PUSH
21753: LD_INT 102
21755: PUSH
21756: LD_INT 103
21758: PUSH
21759: LD_INT 104
21761: PUSH
21762: LD_INT 105
21764: PUSH
21765: LD_INT 106
21767: PUSH
21768: LD_INT 107
21770: PUSH
21771: LD_INT 108
21773: PUSH
21774: LD_INT 109
21776: PUSH
21777: LD_INT 110
21779: PUSH
21780: LD_INT 111
21782: PUSH
21783: LD_INT 112
21785: PUSH
21786: LD_INT 114
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: ST_TO_ADDR
21808: GO 23595
21810: LD_INT 11
21812: DOUBLE
21813: EQUAL
21814: IFTRUE 21818
21816: GO 22010
21818: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21819: LD_ADDR_VAR 0 1
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 3
21829: PUSH
21830: LD_INT 4
21832: PUSH
21833: LD_INT 5
21835: PUSH
21836: LD_INT 6
21838: PUSH
21839: LD_INT 7
21841: PUSH
21842: LD_INT 8
21844: PUSH
21845: LD_INT 9
21847: PUSH
21848: LD_INT 10
21850: PUSH
21851: LD_INT 11
21853: PUSH
21854: LD_INT 12
21856: PUSH
21857: LD_INT 13
21859: PUSH
21860: LD_INT 14
21862: PUSH
21863: LD_INT 15
21865: PUSH
21866: LD_INT 16
21868: PUSH
21869: LD_INT 17
21871: PUSH
21872: LD_INT 18
21874: PUSH
21875: LD_INT 19
21877: PUSH
21878: LD_INT 20
21880: PUSH
21881: LD_INT 21
21883: PUSH
21884: LD_INT 22
21886: PUSH
21887: LD_INT 23
21889: PUSH
21890: LD_INT 24
21892: PUSH
21893: LD_INT 25
21895: PUSH
21896: LD_INT 26
21898: PUSH
21899: LD_INT 28
21901: PUSH
21902: LD_INT 30
21904: PUSH
21905: LD_INT 31
21907: PUSH
21908: LD_INT 32
21910: PUSH
21911: LD_INT 34
21913: PUSH
21914: LD_INT 36
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 101
21952: PUSH
21953: LD_INT 102
21955: PUSH
21956: LD_INT 103
21958: PUSH
21959: LD_INT 104
21961: PUSH
21962: LD_INT 105
21964: PUSH
21965: LD_INT 106
21967: PUSH
21968: LD_INT 107
21970: PUSH
21971: LD_INT 108
21973: PUSH
21974: LD_INT 109
21976: PUSH
21977: LD_INT 110
21979: PUSH
21980: LD_INT 111
21982: PUSH
21983: LD_INT 112
21985: PUSH
21986: LD_INT 114
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: ST_TO_ADDR
22008: GO 23595
22010: LD_INT 12
22012: DOUBLE
22013: EQUAL
22014: IFTRUE 22018
22016: GO 22226
22018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22019: LD_ADDR_VAR 0 1
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: LD_INT 2
22029: PUSH
22030: LD_INT 3
22032: PUSH
22033: LD_INT 4
22035: PUSH
22036: LD_INT 5
22038: PUSH
22039: LD_INT 6
22041: PUSH
22042: LD_INT 7
22044: PUSH
22045: LD_INT 8
22047: PUSH
22048: LD_INT 9
22050: PUSH
22051: LD_INT 10
22053: PUSH
22054: LD_INT 11
22056: PUSH
22057: LD_INT 12
22059: PUSH
22060: LD_INT 13
22062: PUSH
22063: LD_INT 14
22065: PUSH
22066: LD_INT 15
22068: PUSH
22069: LD_INT 16
22071: PUSH
22072: LD_INT 17
22074: PUSH
22075: LD_INT 18
22077: PUSH
22078: LD_INT 19
22080: PUSH
22081: LD_INT 20
22083: PUSH
22084: LD_INT 21
22086: PUSH
22087: LD_INT 22
22089: PUSH
22090: LD_INT 23
22092: PUSH
22093: LD_INT 24
22095: PUSH
22096: LD_INT 25
22098: PUSH
22099: LD_INT 26
22101: PUSH
22102: LD_INT 27
22104: PUSH
22105: LD_INT 28
22107: PUSH
22108: LD_INT 30
22110: PUSH
22111: LD_INT 31
22113: PUSH
22114: LD_INT 32
22116: PUSH
22117: LD_INT 33
22119: PUSH
22120: LD_INT 34
22122: PUSH
22123: LD_INT 36
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 101
22164: PUSH
22165: LD_INT 102
22167: PUSH
22168: LD_INT 103
22170: PUSH
22171: LD_INT 104
22173: PUSH
22174: LD_INT 105
22176: PUSH
22177: LD_INT 106
22179: PUSH
22180: LD_INT 107
22182: PUSH
22183: LD_INT 108
22185: PUSH
22186: LD_INT 109
22188: PUSH
22189: LD_INT 110
22191: PUSH
22192: LD_INT 111
22194: PUSH
22195: LD_INT 112
22197: PUSH
22198: LD_INT 113
22200: PUSH
22201: LD_INT 114
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: ST_TO_ADDR
22224: GO 23595
22226: LD_INT 13
22228: DOUBLE
22229: EQUAL
22230: IFTRUE 22234
22232: GO 22430
22234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: LD_INT 3
22248: PUSH
22249: LD_INT 4
22251: PUSH
22252: LD_INT 5
22254: PUSH
22255: LD_INT 8
22257: PUSH
22258: LD_INT 9
22260: PUSH
22261: LD_INT 10
22263: PUSH
22264: LD_INT 11
22266: PUSH
22267: LD_INT 12
22269: PUSH
22270: LD_INT 14
22272: PUSH
22273: LD_INT 15
22275: PUSH
22276: LD_INT 16
22278: PUSH
22279: LD_INT 17
22281: PUSH
22282: LD_INT 18
22284: PUSH
22285: LD_INT 19
22287: PUSH
22288: LD_INT 20
22290: PUSH
22291: LD_INT 21
22293: PUSH
22294: LD_INT 22
22296: PUSH
22297: LD_INT 23
22299: PUSH
22300: LD_INT 24
22302: PUSH
22303: LD_INT 25
22305: PUSH
22306: LD_INT 26
22308: PUSH
22309: LD_INT 27
22311: PUSH
22312: LD_INT 28
22314: PUSH
22315: LD_INT 30
22317: PUSH
22318: LD_INT 31
22320: PUSH
22321: LD_INT 32
22323: PUSH
22324: LD_INT 33
22326: PUSH
22327: LD_INT 34
22329: PUSH
22330: LD_INT 36
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 101
22368: PUSH
22369: LD_INT 102
22371: PUSH
22372: LD_INT 103
22374: PUSH
22375: LD_INT 104
22377: PUSH
22378: LD_INT 105
22380: PUSH
22381: LD_INT 106
22383: PUSH
22384: LD_INT 107
22386: PUSH
22387: LD_INT 108
22389: PUSH
22390: LD_INT 109
22392: PUSH
22393: LD_INT 110
22395: PUSH
22396: LD_INT 111
22398: PUSH
22399: LD_INT 112
22401: PUSH
22402: LD_INT 113
22404: PUSH
22405: LD_INT 114
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: ST_TO_ADDR
22428: GO 23595
22430: LD_INT 14
22432: DOUBLE
22433: EQUAL
22434: IFTRUE 22438
22436: GO 22650
22438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22439: LD_ADDR_VAR 0 1
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: LD_INT 2
22449: PUSH
22450: LD_INT 3
22452: PUSH
22453: LD_INT 4
22455: PUSH
22456: LD_INT 5
22458: PUSH
22459: LD_INT 6
22461: PUSH
22462: LD_INT 7
22464: PUSH
22465: LD_INT 8
22467: PUSH
22468: LD_INT 9
22470: PUSH
22471: LD_INT 10
22473: PUSH
22474: LD_INT 11
22476: PUSH
22477: LD_INT 12
22479: PUSH
22480: LD_INT 13
22482: PUSH
22483: LD_INT 14
22485: PUSH
22486: LD_INT 15
22488: PUSH
22489: LD_INT 16
22491: PUSH
22492: LD_INT 17
22494: PUSH
22495: LD_INT 18
22497: PUSH
22498: LD_INT 19
22500: PUSH
22501: LD_INT 20
22503: PUSH
22504: LD_INT 21
22506: PUSH
22507: LD_INT 22
22509: PUSH
22510: LD_INT 23
22512: PUSH
22513: LD_INT 24
22515: PUSH
22516: LD_INT 25
22518: PUSH
22519: LD_INT 26
22521: PUSH
22522: LD_INT 27
22524: PUSH
22525: LD_INT 28
22527: PUSH
22528: LD_INT 29
22530: PUSH
22531: LD_INT 30
22533: PUSH
22534: LD_INT 31
22536: PUSH
22537: LD_INT 32
22539: PUSH
22540: LD_INT 33
22542: PUSH
22543: LD_INT 34
22545: PUSH
22546: LD_INT 36
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 101
22588: PUSH
22589: LD_INT 102
22591: PUSH
22592: LD_INT 103
22594: PUSH
22595: LD_INT 104
22597: PUSH
22598: LD_INT 105
22600: PUSH
22601: LD_INT 106
22603: PUSH
22604: LD_INT 107
22606: PUSH
22607: LD_INT 108
22609: PUSH
22610: LD_INT 109
22612: PUSH
22613: LD_INT 110
22615: PUSH
22616: LD_INT 111
22618: PUSH
22619: LD_INT 112
22621: PUSH
22622: LD_INT 113
22624: PUSH
22625: LD_INT 114
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: ST_TO_ADDR
22648: GO 23595
22650: LD_INT 15
22652: DOUBLE
22653: EQUAL
22654: IFTRUE 22658
22656: GO 22870
22658: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22659: LD_ADDR_VAR 0 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: LD_INT 3
22672: PUSH
22673: LD_INT 4
22675: PUSH
22676: LD_INT 5
22678: PUSH
22679: LD_INT 6
22681: PUSH
22682: LD_INT 7
22684: PUSH
22685: LD_INT 8
22687: PUSH
22688: LD_INT 9
22690: PUSH
22691: LD_INT 10
22693: PUSH
22694: LD_INT 11
22696: PUSH
22697: LD_INT 12
22699: PUSH
22700: LD_INT 13
22702: PUSH
22703: LD_INT 14
22705: PUSH
22706: LD_INT 15
22708: PUSH
22709: LD_INT 16
22711: PUSH
22712: LD_INT 17
22714: PUSH
22715: LD_INT 18
22717: PUSH
22718: LD_INT 19
22720: PUSH
22721: LD_INT 20
22723: PUSH
22724: LD_INT 21
22726: PUSH
22727: LD_INT 22
22729: PUSH
22730: LD_INT 23
22732: PUSH
22733: LD_INT 24
22735: PUSH
22736: LD_INT 25
22738: PUSH
22739: LD_INT 26
22741: PUSH
22742: LD_INT 27
22744: PUSH
22745: LD_INT 28
22747: PUSH
22748: LD_INT 29
22750: PUSH
22751: LD_INT 30
22753: PUSH
22754: LD_INT 31
22756: PUSH
22757: LD_INT 32
22759: PUSH
22760: LD_INT 33
22762: PUSH
22763: LD_INT 34
22765: PUSH
22766: LD_INT 36
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 101
22808: PUSH
22809: LD_INT 102
22811: PUSH
22812: LD_INT 103
22814: PUSH
22815: LD_INT 104
22817: PUSH
22818: LD_INT 105
22820: PUSH
22821: LD_INT 106
22823: PUSH
22824: LD_INT 107
22826: PUSH
22827: LD_INT 108
22829: PUSH
22830: LD_INT 109
22832: PUSH
22833: LD_INT 110
22835: PUSH
22836: LD_INT 111
22838: PUSH
22839: LD_INT 112
22841: PUSH
22842: LD_INT 113
22844: PUSH
22845: LD_INT 114
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: ST_TO_ADDR
22868: GO 23595
22870: LD_INT 16
22872: DOUBLE
22873: EQUAL
22874: IFTRUE 22878
22876: GO 23002
22878: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22879: LD_ADDR_VAR 0 1
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 4
22889: PUSH
22890: LD_INT 5
22892: PUSH
22893: LD_INT 7
22895: PUSH
22896: LD_INT 11
22898: PUSH
22899: LD_INT 12
22901: PUSH
22902: LD_INT 15
22904: PUSH
22905: LD_INT 16
22907: PUSH
22908: LD_INT 20
22910: PUSH
22911: LD_INT 21
22913: PUSH
22914: LD_INT 22
22916: PUSH
22917: LD_INT 23
22919: PUSH
22920: LD_INT 25
22922: PUSH
22923: LD_INT 26
22925: PUSH
22926: LD_INT 30
22928: PUSH
22929: LD_INT 31
22931: PUSH
22932: LD_INT 32
22934: PUSH
22935: LD_INT 33
22937: PUSH
22938: LD_INT 34
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 101
22964: PUSH
22965: LD_INT 102
22967: PUSH
22968: LD_INT 103
22970: PUSH
22971: LD_INT 106
22973: PUSH
22974: LD_INT 108
22976: PUSH
22977: LD_INT 112
22979: PUSH
22980: LD_INT 113
22982: PUSH
22983: LD_INT 114
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: ST_TO_ADDR
23000: GO 23595
23002: LD_INT 17
23004: DOUBLE
23005: EQUAL
23006: IFTRUE 23010
23008: GO 23222
23010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23011: LD_ADDR_VAR 0 1
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: LD_INT 5
23030: PUSH
23031: LD_INT 6
23033: PUSH
23034: LD_INT 7
23036: PUSH
23037: LD_INT 8
23039: PUSH
23040: LD_INT 9
23042: PUSH
23043: LD_INT 10
23045: PUSH
23046: LD_INT 11
23048: PUSH
23049: LD_INT 12
23051: PUSH
23052: LD_INT 13
23054: PUSH
23055: LD_INT 14
23057: PUSH
23058: LD_INT 15
23060: PUSH
23061: LD_INT 16
23063: PUSH
23064: LD_INT 17
23066: PUSH
23067: LD_INT 18
23069: PUSH
23070: LD_INT 19
23072: PUSH
23073: LD_INT 20
23075: PUSH
23076: LD_INT 21
23078: PUSH
23079: LD_INT 22
23081: PUSH
23082: LD_INT 23
23084: PUSH
23085: LD_INT 24
23087: PUSH
23088: LD_INT 25
23090: PUSH
23091: LD_INT 26
23093: PUSH
23094: LD_INT 27
23096: PUSH
23097: LD_INT 28
23099: PUSH
23100: LD_INT 29
23102: PUSH
23103: LD_INT 30
23105: PUSH
23106: LD_INT 31
23108: PUSH
23109: LD_INT 32
23111: PUSH
23112: LD_INT 33
23114: PUSH
23115: LD_INT 34
23117: PUSH
23118: LD_INT 36
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 101
23160: PUSH
23161: LD_INT 102
23163: PUSH
23164: LD_INT 103
23166: PUSH
23167: LD_INT 104
23169: PUSH
23170: LD_INT 105
23172: PUSH
23173: LD_INT 106
23175: PUSH
23176: LD_INT 107
23178: PUSH
23179: LD_INT 108
23181: PUSH
23182: LD_INT 109
23184: PUSH
23185: LD_INT 110
23187: PUSH
23188: LD_INT 111
23190: PUSH
23191: LD_INT 112
23193: PUSH
23194: LD_INT 113
23196: PUSH
23197: LD_INT 114
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: ST_TO_ADDR
23220: GO 23595
23222: LD_INT 18
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23366
23230: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23231: LD_ADDR_VAR 0 1
23235: PUSH
23236: LD_INT 2
23238: PUSH
23239: LD_INT 4
23241: PUSH
23242: LD_INT 5
23244: PUSH
23245: LD_INT 7
23247: PUSH
23248: LD_INT 11
23250: PUSH
23251: LD_INT 12
23253: PUSH
23254: LD_INT 15
23256: PUSH
23257: LD_INT 16
23259: PUSH
23260: LD_INT 20
23262: PUSH
23263: LD_INT 21
23265: PUSH
23266: LD_INT 22
23268: PUSH
23269: LD_INT 23
23271: PUSH
23272: LD_INT 25
23274: PUSH
23275: LD_INT 26
23277: PUSH
23278: LD_INT 30
23280: PUSH
23281: LD_INT 31
23283: PUSH
23284: LD_INT 32
23286: PUSH
23287: LD_INT 33
23289: PUSH
23290: LD_INT 34
23292: PUSH
23293: LD_INT 35
23295: PUSH
23296: LD_INT 36
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 101
23324: PUSH
23325: LD_INT 102
23327: PUSH
23328: LD_INT 103
23330: PUSH
23331: LD_INT 106
23333: PUSH
23334: LD_INT 108
23336: PUSH
23337: LD_INT 112
23339: PUSH
23340: LD_INT 113
23342: PUSH
23343: LD_INT 114
23345: PUSH
23346: LD_INT 115
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: ST_TO_ADDR
23364: GO 23595
23366: LD_INT 19
23368: DOUBLE
23369: EQUAL
23370: IFTRUE 23374
23372: GO 23594
23374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23375: LD_ADDR_VAR 0 1
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 3
23388: PUSH
23389: LD_INT 4
23391: PUSH
23392: LD_INT 5
23394: PUSH
23395: LD_INT 6
23397: PUSH
23398: LD_INT 7
23400: PUSH
23401: LD_INT 8
23403: PUSH
23404: LD_INT 9
23406: PUSH
23407: LD_INT 10
23409: PUSH
23410: LD_INT 11
23412: PUSH
23413: LD_INT 12
23415: PUSH
23416: LD_INT 13
23418: PUSH
23419: LD_INT 14
23421: PUSH
23422: LD_INT 15
23424: PUSH
23425: LD_INT 16
23427: PUSH
23428: LD_INT 17
23430: PUSH
23431: LD_INT 18
23433: PUSH
23434: LD_INT 19
23436: PUSH
23437: LD_INT 20
23439: PUSH
23440: LD_INT 21
23442: PUSH
23443: LD_INT 22
23445: PUSH
23446: LD_INT 23
23448: PUSH
23449: LD_INT 24
23451: PUSH
23452: LD_INT 25
23454: PUSH
23455: LD_INT 26
23457: PUSH
23458: LD_INT 27
23460: PUSH
23461: LD_INT 28
23463: PUSH
23464: LD_INT 29
23466: PUSH
23467: LD_INT 30
23469: PUSH
23470: LD_INT 31
23472: PUSH
23473: LD_INT 32
23475: PUSH
23476: LD_INT 33
23478: PUSH
23479: LD_INT 34
23481: PUSH
23482: LD_INT 35
23484: PUSH
23485: LD_INT 36
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 101
23528: PUSH
23529: LD_INT 102
23531: PUSH
23532: LD_INT 103
23534: PUSH
23535: LD_INT 104
23537: PUSH
23538: LD_INT 105
23540: PUSH
23541: LD_INT 106
23543: PUSH
23544: LD_INT 107
23546: PUSH
23547: LD_INT 108
23549: PUSH
23550: LD_INT 109
23552: PUSH
23553: LD_INT 110
23555: PUSH
23556: LD_INT 111
23558: PUSH
23559: LD_INT 112
23561: PUSH
23562: LD_INT 113
23564: PUSH
23565: LD_INT 114
23567: PUSH
23568: LD_INT 115
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: ST_TO_ADDR
23592: GO 23595
23594: POP
// end else
23595: GO 23814
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23597: LD_ADDR_VAR 0 1
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: LD_INT 3
23610: PUSH
23611: LD_INT 4
23613: PUSH
23614: LD_INT 5
23616: PUSH
23617: LD_INT 6
23619: PUSH
23620: LD_INT 7
23622: PUSH
23623: LD_INT 8
23625: PUSH
23626: LD_INT 9
23628: PUSH
23629: LD_INT 10
23631: PUSH
23632: LD_INT 11
23634: PUSH
23635: LD_INT 12
23637: PUSH
23638: LD_INT 13
23640: PUSH
23641: LD_INT 14
23643: PUSH
23644: LD_INT 15
23646: PUSH
23647: LD_INT 16
23649: PUSH
23650: LD_INT 17
23652: PUSH
23653: LD_INT 18
23655: PUSH
23656: LD_INT 19
23658: PUSH
23659: LD_INT 20
23661: PUSH
23662: LD_INT 21
23664: PUSH
23665: LD_INT 22
23667: PUSH
23668: LD_INT 23
23670: PUSH
23671: LD_INT 24
23673: PUSH
23674: LD_INT 25
23676: PUSH
23677: LD_INT 26
23679: PUSH
23680: LD_INT 27
23682: PUSH
23683: LD_INT 28
23685: PUSH
23686: LD_INT 29
23688: PUSH
23689: LD_INT 30
23691: PUSH
23692: LD_INT 31
23694: PUSH
23695: LD_INT 32
23697: PUSH
23698: LD_INT 33
23700: PUSH
23701: LD_INT 34
23703: PUSH
23704: LD_INT 35
23706: PUSH
23707: LD_INT 36
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 101
23750: PUSH
23751: LD_INT 102
23753: PUSH
23754: LD_INT 103
23756: PUSH
23757: LD_INT 104
23759: PUSH
23760: LD_INT 105
23762: PUSH
23763: LD_INT 106
23765: PUSH
23766: LD_INT 107
23768: PUSH
23769: LD_INT 108
23771: PUSH
23772: LD_INT 109
23774: PUSH
23775: LD_INT 110
23777: PUSH
23778: LD_INT 111
23780: PUSH
23781: LD_INT 112
23783: PUSH
23784: LD_INT 113
23786: PUSH
23787: LD_INT 114
23789: PUSH
23790: LD_INT 115
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: ST_TO_ADDR
// if result then
23814: LD_VAR 0 1
23818: IFFALSE 24107
// begin normal :=  ;
23820: LD_ADDR_VAR 0 3
23824: PUSH
23825: LD_STRING 
23827: ST_TO_ADDR
// hardcore :=  ;
23828: LD_ADDR_VAR 0 4
23832: PUSH
23833: LD_STRING 
23835: ST_TO_ADDR
// for i = 1 to normalCounter do
23836: LD_ADDR_VAR 0 5
23840: PUSH
23841: DOUBLE
23842: LD_INT 1
23844: DEC
23845: ST_TO_ADDR
23846: LD_EXP 65
23850: PUSH
23851: FOR_TO
23852: IFFALSE 23953
// begin tmp := 0 ;
23854: LD_ADDR_VAR 0 2
23858: PUSH
23859: LD_STRING 0
23861: ST_TO_ADDR
// if result [ 1 ] then
23862: LD_VAR 0 1
23866: PUSH
23867: LD_INT 1
23869: ARRAY
23870: IFFALSE 23935
// if result [ 1 ] [ 1 ] = i then
23872: LD_VAR 0 1
23876: PUSH
23877: LD_INT 1
23879: ARRAY
23880: PUSH
23881: LD_INT 1
23883: ARRAY
23884: PUSH
23885: LD_VAR 0 5
23889: EQUAL
23890: IFFALSE 23935
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23892: LD_ADDR_VAR 0 1
23896: PUSH
23897: LD_VAR 0 1
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: LD_VAR 0 1
23909: PUSH
23910: LD_INT 1
23912: ARRAY
23913: PPUSH
23914: LD_INT 1
23916: PPUSH
23917: CALL_OW 3
23921: PPUSH
23922: CALL_OW 1
23926: ST_TO_ADDR
// tmp := 1 ;
23927: LD_ADDR_VAR 0 2
23931: PUSH
23932: LD_STRING 1
23934: ST_TO_ADDR
// end ; normal := normal & tmp ;
23935: LD_ADDR_VAR 0 3
23939: PUSH
23940: LD_VAR 0 3
23944: PUSH
23945: LD_VAR 0 2
23949: STR
23950: ST_TO_ADDR
// end ;
23951: GO 23851
23953: POP
23954: POP
// for i = 1 to hardcoreCounter do
23955: LD_ADDR_VAR 0 5
23959: PUSH
23960: DOUBLE
23961: LD_INT 1
23963: DEC
23964: ST_TO_ADDR
23965: LD_EXP 66
23969: PUSH
23970: FOR_TO
23971: IFFALSE 24076
// begin tmp := 0 ;
23973: LD_ADDR_VAR 0 2
23977: PUSH
23978: LD_STRING 0
23980: ST_TO_ADDR
// if result [ 2 ] then
23981: LD_VAR 0 1
23985: PUSH
23986: LD_INT 2
23988: ARRAY
23989: IFFALSE 24058
// if result [ 2 ] [ 1 ] = 100 + i then
23991: LD_VAR 0 1
23995: PUSH
23996: LD_INT 2
23998: ARRAY
23999: PUSH
24000: LD_INT 1
24002: ARRAY
24003: PUSH
24004: LD_INT 100
24006: PUSH
24007: LD_VAR 0 5
24011: PLUS
24012: EQUAL
24013: IFFALSE 24058
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24015: LD_ADDR_VAR 0 1
24019: PUSH
24020: LD_VAR 0 1
24024: PPUSH
24025: LD_INT 2
24027: PPUSH
24028: LD_VAR 0 1
24032: PUSH
24033: LD_INT 2
24035: ARRAY
24036: PPUSH
24037: LD_INT 1
24039: PPUSH
24040: CALL_OW 3
24044: PPUSH
24045: CALL_OW 1
24049: ST_TO_ADDR
// tmp := 1 ;
24050: LD_ADDR_VAR 0 2
24054: PUSH
24055: LD_STRING 1
24057: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24058: LD_ADDR_VAR 0 4
24062: PUSH
24063: LD_VAR 0 4
24067: PUSH
24068: LD_VAR 0 2
24072: STR
24073: ST_TO_ADDR
// end ;
24074: GO 23970
24076: POP
24077: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24078: LD_STRING getStreamItemsFromMission("
24080: PUSH
24081: LD_VAR 0 3
24085: STR
24086: PUSH
24087: LD_STRING ","
24089: STR
24090: PUSH
24091: LD_VAR 0 4
24095: STR
24096: PUSH
24097: LD_STRING ")
24099: STR
24100: PPUSH
24101: CALL_OW 559
// end else
24105: GO 24114
// ToLua ( getStreamItemsFromMission("","") ) ;
24107: LD_STRING getStreamItemsFromMission("","")
24109: PPUSH
24110: CALL_OW 559
// end ;
24114: LD_VAR 0 1
24118: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24119: LD_EXP 64
24123: PUSH
24124: LD_EXP 69
24128: AND
24129: IFFALSE 24253
24131: GO 24133
24133: DISABLE
24134: LD_INT 0
24136: PPUSH
24137: PPUSH
// begin enable ;
24138: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: LD_INT 22
24146: PUSH
24147: LD_OWVAR 2
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: LD_INT 34
24161: PUSH
24162: LD_INT 7
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 34
24171: PUSH
24172: LD_INT 45
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 34
24181: PUSH
24182: LD_INT 28
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 34
24191: PUSH
24192: LD_INT 47
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PPUSH
24210: CALL_OW 69
24214: ST_TO_ADDR
// if not tmp then
24215: LD_VAR 0 2
24219: NOT
24220: IFFALSE 24224
// exit ;
24222: GO 24253
// for i in tmp do
24224: LD_ADDR_VAR 0 1
24228: PUSH
24229: LD_VAR 0 2
24233: PUSH
24234: FOR_IN
24235: IFFALSE 24251
// begin SetLives ( i , 0 ) ;
24237: LD_VAR 0 1
24241: PPUSH
24242: LD_INT 0
24244: PPUSH
24245: CALL_OW 234
// end ;
24249: GO 24234
24251: POP
24252: POP
// end ;
24253: PPOPN 2
24255: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24256: LD_EXP 64
24260: PUSH
24261: LD_EXP 70
24265: AND
24266: IFFALSE 24350
24268: GO 24270
24270: DISABLE
24271: LD_INT 0
24273: PPUSH
24274: PPUSH
// begin enable ;
24275: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24276: LD_ADDR_VAR 0 2
24280: PUSH
24281: LD_INT 22
24283: PUSH
24284: LD_OWVAR 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 32
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 69
24311: ST_TO_ADDR
// if not tmp then
24312: LD_VAR 0 2
24316: NOT
24317: IFFALSE 24321
// exit ;
24319: GO 24350
// for i in tmp do
24321: LD_ADDR_VAR 0 1
24325: PUSH
24326: LD_VAR 0 2
24330: PUSH
24331: FOR_IN
24332: IFFALSE 24348
// begin SetLives ( i , 0 ) ;
24334: LD_VAR 0 1
24338: PPUSH
24339: LD_INT 0
24341: PPUSH
24342: CALL_OW 234
// end ;
24346: GO 24331
24348: POP
24349: POP
// end ;
24350: PPOPN 2
24352: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24353: LD_EXP 64
24357: PUSH
24358: LD_EXP 67
24362: AND
24363: IFFALSE 24456
24365: GO 24367
24367: DISABLE
24368: LD_INT 0
24370: PPUSH
// begin enable ;
24371: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24372: LD_ADDR_VAR 0 1
24376: PUSH
24377: LD_INT 22
24379: PUSH
24380: LD_OWVAR 2
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 25
24394: PUSH
24395: LD_INT 5
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 25
24404: PUSH
24405: LD_INT 9
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 25
24414: PUSH
24415: LD_INT 8
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL_OW 69
24436: PUSH
24437: FOR_IN
24438: IFFALSE 24454
// begin SetClass ( i , 1 ) ;
24440: LD_VAR 0 1
24444: PPUSH
24445: LD_INT 1
24447: PPUSH
24448: CALL_OW 336
// end ;
24452: GO 24437
24454: POP
24455: POP
// end ;
24456: PPOPN 1
24458: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24459: LD_EXP 64
24463: PUSH
24464: LD_EXP 68
24468: AND
24469: PUSH
24470: LD_OWVAR 65
24474: PUSH
24475: LD_INT 7
24477: LESS
24478: AND
24479: IFFALSE 24493
24481: GO 24483
24483: DISABLE
// begin enable ;
24484: ENABLE
// game_speed := 7 ;
24485: LD_ADDR_OWVAR 65
24489: PUSH
24490: LD_INT 7
24492: ST_TO_ADDR
// end ;
24493: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24494: LD_EXP 64
24498: PUSH
24499: LD_EXP 71
24503: AND
24504: IFFALSE 24706
24506: GO 24508
24508: DISABLE
24509: LD_INT 0
24511: PPUSH
24512: PPUSH
24513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24514: LD_ADDR_VAR 0 3
24518: PUSH
24519: LD_INT 81
24521: PUSH
24522: LD_OWVAR 2
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 21
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PPUSH
24545: CALL_OW 69
24549: ST_TO_ADDR
// if not tmp then
24550: LD_VAR 0 3
24554: NOT
24555: IFFALSE 24559
// exit ;
24557: GO 24706
// if tmp > 5 then
24559: LD_VAR 0 3
24563: PUSH
24564: LD_INT 5
24566: GREATER
24567: IFFALSE 24579
// k := 5 else
24569: LD_ADDR_VAR 0 2
24573: PUSH
24574: LD_INT 5
24576: ST_TO_ADDR
24577: GO 24589
// k := tmp ;
24579: LD_ADDR_VAR 0 2
24583: PUSH
24584: LD_VAR 0 3
24588: ST_TO_ADDR
// for i := 1 to k do
24589: LD_ADDR_VAR 0 1
24593: PUSH
24594: DOUBLE
24595: LD_INT 1
24597: DEC
24598: ST_TO_ADDR
24599: LD_VAR 0 2
24603: PUSH
24604: FOR_TO
24605: IFFALSE 24704
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24607: LD_VAR 0 3
24611: PUSH
24612: LD_VAR 0 1
24616: ARRAY
24617: PPUSH
24618: LD_VAR 0 1
24622: PUSH
24623: LD_INT 4
24625: MOD
24626: PUSH
24627: LD_INT 1
24629: PLUS
24630: PPUSH
24631: CALL_OW 259
24635: PUSH
24636: LD_INT 10
24638: LESS
24639: IFFALSE 24702
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24641: LD_VAR 0 3
24645: PUSH
24646: LD_VAR 0 1
24650: ARRAY
24651: PPUSH
24652: LD_VAR 0 1
24656: PUSH
24657: LD_INT 4
24659: MOD
24660: PUSH
24661: LD_INT 1
24663: PLUS
24664: PPUSH
24665: LD_VAR 0 3
24669: PUSH
24670: LD_VAR 0 1
24674: ARRAY
24675: PPUSH
24676: LD_VAR 0 1
24680: PUSH
24681: LD_INT 4
24683: MOD
24684: PUSH
24685: LD_INT 1
24687: PLUS
24688: PPUSH
24689: CALL_OW 259
24693: PUSH
24694: LD_INT 1
24696: PLUS
24697: PPUSH
24698: CALL_OW 237
24702: GO 24604
24704: POP
24705: POP
// end ;
24706: PPOPN 3
24708: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24709: LD_EXP 64
24713: PUSH
24714: LD_EXP 72
24718: AND
24719: IFFALSE 24739
24721: GO 24723
24723: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24724: LD_INT 4
24726: PPUSH
24727: LD_OWVAR 2
24731: PPUSH
24732: LD_INT 0
24734: PPUSH
24735: CALL_OW 324
24739: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24740: LD_EXP 64
24744: PUSH
24745: LD_EXP 101
24749: AND
24750: IFFALSE 24770
24752: GO 24754
24754: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24755: LD_INT 19
24757: PPUSH
24758: LD_OWVAR 2
24762: PPUSH
24763: LD_INT 0
24765: PPUSH
24766: CALL_OW 324
24770: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24771: LD_EXP 64
24775: PUSH
24776: LD_EXP 73
24780: AND
24781: IFFALSE 24883
24783: GO 24785
24785: DISABLE
24786: LD_INT 0
24788: PPUSH
24789: PPUSH
// begin enable ;
24790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24791: LD_ADDR_VAR 0 2
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_OWVAR 2
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 34
24813: PUSH
24814: LD_INT 11
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 34
24823: PUSH
24824: LD_INT 30
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PPUSH
24840: CALL_OW 69
24844: ST_TO_ADDR
// if not tmp then
24845: LD_VAR 0 2
24849: NOT
24850: IFFALSE 24854
// exit ;
24852: GO 24883
// for i in tmp do
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: LD_VAR 0 2
24863: PUSH
24864: FOR_IN
24865: IFFALSE 24881
// begin SetLives ( i , 0 ) ;
24867: LD_VAR 0 1
24871: PPUSH
24872: LD_INT 0
24874: PPUSH
24875: CALL_OW 234
// end ;
24879: GO 24864
24881: POP
24882: POP
// end ;
24883: PPOPN 2
24885: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24886: LD_EXP 64
24890: PUSH
24891: LD_EXP 74
24895: AND
24896: IFFALSE 24916
24898: GO 24900
24900: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24901: LD_INT 32
24903: PPUSH
24904: LD_OWVAR 2
24908: PPUSH
24909: LD_INT 0
24911: PPUSH
24912: CALL_OW 324
24916: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24917: LD_EXP 64
24921: PUSH
24922: LD_EXP 75
24926: AND
24927: IFFALSE 25108
24929: GO 24931
24931: DISABLE
24932: LD_INT 0
24934: PPUSH
24935: PPUSH
24936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24937: LD_ADDR_VAR 0 2
24941: PUSH
24942: LD_INT 22
24944: PUSH
24945: LD_OWVAR 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 33
24956: PUSH
24957: LD_INT 3
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PPUSH
24968: CALL_OW 69
24972: ST_TO_ADDR
// if not tmp then
24973: LD_VAR 0 2
24977: NOT
24978: IFFALSE 24982
// exit ;
24980: GO 25108
// side := 0 ;
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: LD_INT 0
24989: ST_TO_ADDR
// for i := 1 to 8 do
24990: LD_ADDR_VAR 0 1
24994: PUSH
24995: DOUBLE
24996: LD_INT 1
24998: DEC
24999: ST_TO_ADDR
25000: LD_INT 8
25002: PUSH
25003: FOR_TO
25004: IFFALSE 25052
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25006: LD_OWVAR 2
25010: PUSH
25011: LD_VAR 0 1
25015: NONEQUAL
25016: PUSH
25017: LD_OWVAR 2
25021: PPUSH
25022: LD_VAR 0 1
25026: PPUSH
25027: CALL_OW 81
25031: PUSH
25032: LD_INT 2
25034: EQUAL
25035: AND
25036: IFFALSE 25050
// begin side := i ;
25038: LD_ADDR_VAR 0 3
25042: PUSH
25043: LD_VAR 0 1
25047: ST_TO_ADDR
// break ;
25048: GO 25052
// end ;
25050: GO 25003
25052: POP
25053: POP
// if not side then
25054: LD_VAR 0 3
25058: NOT
25059: IFFALSE 25063
// exit ;
25061: GO 25108
// for i := 1 to tmp do
25063: LD_ADDR_VAR 0 1
25067: PUSH
25068: DOUBLE
25069: LD_INT 1
25071: DEC
25072: ST_TO_ADDR
25073: LD_VAR 0 2
25077: PUSH
25078: FOR_TO
25079: IFFALSE 25106
// if Prob ( 60 ) then
25081: LD_INT 60
25083: PPUSH
25084: CALL_OW 13
25088: IFFALSE 25104
// SetSide ( i , side ) ;
25090: LD_VAR 0 1
25094: PPUSH
25095: LD_VAR 0 3
25099: PPUSH
25100: CALL_OW 235
25104: GO 25078
25106: POP
25107: POP
// end ;
25108: PPOPN 3
25110: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25111: LD_EXP 64
25115: PUSH
25116: LD_EXP 77
25120: AND
25121: IFFALSE 25240
25123: GO 25125
25125: DISABLE
25126: LD_INT 0
25128: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25129: LD_ADDR_VAR 0 1
25133: PUSH
25134: LD_INT 22
25136: PUSH
25137: LD_OWVAR 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 3
25158: PUSH
25159: LD_INT 23
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: PPUSH
25178: CALL_OW 69
25182: PUSH
25183: FOR_IN
25184: IFFALSE 25238
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25186: LD_VAR 0 1
25190: PPUSH
25191: CALL_OW 257
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: LD_INT 3
25204: PUSH
25205: LD_INT 4
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: IN
25214: IFFALSE 25236
// SetClass ( un , rand ( 1 , 4 ) ) ;
25216: LD_VAR 0 1
25220: PPUSH
25221: LD_INT 1
25223: PPUSH
25224: LD_INT 4
25226: PPUSH
25227: CALL_OW 12
25231: PPUSH
25232: CALL_OW 336
25236: GO 25183
25238: POP
25239: POP
// end ;
25240: PPOPN 1
25242: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25243: LD_EXP 64
25247: PUSH
25248: LD_EXP 76
25252: AND
25253: IFFALSE 25332
25255: GO 25257
25257: DISABLE
25258: LD_INT 0
25260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25261: LD_ADDR_VAR 0 1
25265: PUSH
25266: LD_INT 22
25268: PUSH
25269: LD_OWVAR 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 21
25280: PUSH
25281: LD_INT 3
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 69
25296: ST_TO_ADDR
// if not tmp then
25297: LD_VAR 0 1
25301: NOT
25302: IFFALSE 25306
// exit ;
25304: GO 25332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25306: LD_VAR 0 1
25310: PUSH
25311: LD_INT 1
25313: PPUSH
25314: LD_VAR 0 1
25318: PPUSH
25319: CALL_OW 12
25323: ARRAY
25324: PPUSH
25325: LD_INT 100
25327: PPUSH
25328: CALL_OW 234
// end ;
25332: PPOPN 1
25334: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25335: LD_EXP 64
25339: PUSH
25340: LD_EXP 78
25344: AND
25345: IFFALSE 25443
25347: GO 25349
25349: DISABLE
25350: LD_INT 0
25352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25353: LD_ADDR_VAR 0 1
25357: PUSH
25358: LD_INT 22
25360: PUSH
25361: LD_OWVAR 2
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 21
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PPUSH
25384: CALL_OW 69
25388: ST_TO_ADDR
// if not tmp then
25389: LD_VAR 0 1
25393: NOT
25394: IFFALSE 25398
// exit ;
25396: GO 25443
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25398: LD_VAR 0 1
25402: PUSH
25403: LD_INT 1
25405: PPUSH
25406: LD_VAR 0 1
25410: PPUSH
25411: CALL_OW 12
25415: ARRAY
25416: PPUSH
25417: LD_INT 1
25419: PPUSH
25420: LD_INT 4
25422: PPUSH
25423: CALL_OW 12
25427: PPUSH
25428: LD_INT 3000
25430: PPUSH
25431: LD_INT 9000
25433: PPUSH
25434: CALL_OW 12
25438: PPUSH
25439: CALL_OW 492
// end ;
25443: PPOPN 1
25445: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25446: LD_EXP 64
25450: PUSH
25451: LD_EXP 79
25455: AND
25456: IFFALSE 25476
25458: GO 25460
25460: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25461: LD_INT 1
25463: PPUSH
25464: LD_OWVAR 2
25468: PPUSH
25469: LD_INT 0
25471: PPUSH
25472: CALL_OW 324
25476: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25477: LD_EXP 64
25481: PUSH
25482: LD_EXP 80
25486: AND
25487: IFFALSE 25570
25489: GO 25491
25491: DISABLE
25492: LD_INT 0
25494: PPUSH
25495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25496: LD_ADDR_VAR 0 2
25500: PUSH
25501: LD_INT 22
25503: PUSH
25504: LD_OWVAR 2
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 21
25515: PUSH
25516: LD_INT 3
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PPUSH
25527: CALL_OW 69
25531: ST_TO_ADDR
// if not tmp then
25532: LD_VAR 0 2
25536: NOT
25537: IFFALSE 25541
// exit ;
25539: GO 25570
// for i in tmp do
25541: LD_ADDR_VAR 0 1
25545: PUSH
25546: LD_VAR 0 2
25550: PUSH
25551: FOR_IN
25552: IFFALSE 25568
// SetBLevel ( i , 10 ) ;
25554: LD_VAR 0 1
25558: PPUSH
25559: LD_INT 10
25561: PPUSH
25562: CALL_OW 241
25566: GO 25551
25568: POP
25569: POP
// end ;
25570: PPOPN 2
25572: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25573: LD_EXP 64
25577: PUSH
25578: LD_EXP 81
25582: AND
25583: IFFALSE 25694
25585: GO 25587
25587: DISABLE
25588: LD_INT 0
25590: PPUSH
25591: PPUSH
25592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: LD_INT 22
25600: PUSH
25601: LD_OWVAR 2
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 25
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PPUSH
25624: CALL_OW 69
25628: ST_TO_ADDR
// if not tmp then
25629: LD_VAR 0 3
25633: NOT
25634: IFFALSE 25638
// exit ;
25636: GO 25694
// un := tmp [ rand ( 1 , tmp ) ] ;
25638: LD_ADDR_VAR 0 2
25642: PUSH
25643: LD_VAR 0 3
25647: PUSH
25648: LD_INT 1
25650: PPUSH
25651: LD_VAR 0 3
25655: PPUSH
25656: CALL_OW 12
25660: ARRAY
25661: ST_TO_ADDR
// if Crawls ( un ) then
25662: LD_VAR 0 2
25666: PPUSH
25667: CALL_OW 318
25671: IFFALSE 25682
// ComWalk ( un ) ;
25673: LD_VAR 0 2
25677: PPUSH
25678: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25682: LD_VAR 0 2
25686: PPUSH
25687: LD_INT 5
25689: PPUSH
25690: CALL_OW 336
// end ;
25694: PPOPN 3
25696: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25697: LD_EXP 64
25701: PUSH
25702: LD_EXP 82
25706: AND
25707: PUSH
25708: LD_OWVAR 67
25712: PUSH
25713: LD_INT 3
25715: LESS
25716: AND
25717: IFFALSE 25736
25719: GO 25721
25721: DISABLE
// Difficulty := Difficulty + 1 ;
25722: LD_ADDR_OWVAR 67
25726: PUSH
25727: LD_OWVAR 67
25731: PUSH
25732: LD_INT 1
25734: PLUS
25735: ST_TO_ADDR
25736: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25737: LD_EXP 64
25741: PUSH
25742: LD_EXP 83
25746: AND
25747: IFFALSE 25850
25749: GO 25751
25751: DISABLE
25752: LD_INT 0
25754: PPUSH
// begin for i := 1 to 5 do
25755: LD_ADDR_VAR 0 1
25759: PUSH
25760: DOUBLE
25761: LD_INT 1
25763: DEC
25764: ST_TO_ADDR
25765: LD_INT 5
25767: PUSH
25768: FOR_TO
25769: IFFALSE 25848
// begin uc_nation := nation_nature ;
25771: LD_ADDR_OWVAR 21
25775: PUSH
25776: LD_INT 0
25778: ST_TO_ADDR
// uc_side := 0 ;
25779: LD_ADDR_OWVAR 20
25783: PUSH
25784: LD_INT 0
25786: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25787: LD_ADDR_OWVAR 29
25791: PUSH
25792: LD_INT 12
25794: PUSH
25795: LD_INT 12
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: ST_TO_ADDR
// hc_agressivity := 20 ;
25802: LD_ADDR_OWVAR 35
25806: PUSH
25807: LD_INT 20
25809: ST_TO_ADDR
// hc_class := class_tiger ;
25810: LD_ADDR_OWVAR 28
25814: PUSH
25815: LD_INT 14
25817: ST_TO_ADDR
// hc_gallery :=  ;
25818: LD_ADDR_OWVAR 33
25822: PUSH
25823: LD_STRING 
25825: ST_TO_ADDR
// hc_name :=  ;
25826: LD_ADDR_OWVAR 26
25830: PUSH
25831: LD_STRING 
25833: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25834: CALL_OW 44
25838: PPUSH
25839: LD_INT 0
25841: PPUSH
25842: CALL_OW 51
// end ;
25846: GO 25768
25848: POP
25849: POP
// end ;
25850: PPOPN 1
25852: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25853: LD_EXP 64
25857: PUSH
25858: LD_EXP 84
25862: AND
25863: IFFALSE 25872
25865: GO 25867
25867: DISABLE
// StreamSibBomb ;
25868: CALL 25873 0 0
25872: END
// export function StreamSibBomb ; var i , x , y ; begin
25873: LD_INT 0
25875: PPUSH
25876: PPUSH
25877: PPUSH
25878: PPUSH
// result := false ;
25879: LD_ADDR_VAR 0 1
25883: PUSH
25884: LD_INT 0
25886: ST_TO_ADDR
// for i := 1 to 16 do
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: DOUBLE
25893: LD_INT 1
25895: DEC
25896: ST_TO_ADDR
25897: LD_INT 16
25899: PUSH
25900: FOR_TO
25901: IFFALSE 26100
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_INT 10
25910: PUSH
25911: LD_INT 20
25913: PUSH
25914: LD_INT 30
25916: PUSH
25917: LD_INT 40
25919: PUSH
25920: LD_INT 50
25922: PUSH
25923: LD_INT 60
25925: PUSH
25926: LD_INT 70
25928: PUSH
25929: LD_INT 80
25931: PUSH
25932: LD_INT 90
25934: PUSH
25935: LD_INT 100
25937: PUSH
25938: LD_INT 110
25940: PUSH
25941: LD_INT 120
25943: PUSH
25944: LD_INT 130
25946: PUSH
25947: LD_INT 140
25949: PUSH
25950: LD_INT 150
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PPUSH
25973: LD_INT 15
25975: PPUSH
25976: CALL_OW 12
25980: ARRAY
25981: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25982: LD_ADDR_VAR 0 4
25986: PUSH
25987: LD_INT 10
25989: PUSH
25990: LD_INT 20
25992: PUSH
25993: LD_INT 30
25995: PUSH
25996: LD_INT 40
25998: PUSH
25999: LD_INT 50
26001: PUSH
26002: LD_INT 60
26004: PUSH
26005: LD_INT 70
26007: PUSH
26008: LD_INT 80
26010: PUSH
26011: LD_INT 90
26013: PUSH
26014: LD_INT 100
26016: PUSH
26017: LD_INT 110
26019: PUSH
26020: LD_INT 120
26022: PUSH
26023: LD_INT 130
26025: PUSH
26026: LD_INT 140
26028: PUSH
26029: LD_INT 150
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PPUSH
26052: LD_INT 15
26054: PPUSH
26055: CALL_OW 12
26059: ARRAY
26060: ST_TO_ADDR
// if ValidHex ( x , y ) then
26061: LD_VAR 0 3
26065: PPUSH
26066: LD_VAR 0 4
26070: PPUSH
26071: CALL_OW 488
26075: IFFALSE 26098
// begin result := [ x , y ] ;
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_VAR 0 3
26086: PUSH
26087: LD_VAR 0 4
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: ST_TO_ADDR
// break ;
26096: GO 26100
// end ; end ;
26098: GO 25900
26100: POP
26101: POP
// if result then
26102: LD_VAR 0 1
26106: IFFALSE 26166
// begin ToLua ( playSibBomb() ) ;
26108: LD_STRING playSibBomb()
26110: PPUSH
26111: CALL_OW 559
// wait ( 0 0$14 ) ;
26115: LD_INT 490
26117: PPUSH
26118: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26122: LD_VAR 0 1
26126: PUSH
26127: LD_INT 1
26129: ARRAY
26130: PPUSH
26131: LD_VAR 0 1
26135: PUSH
26136: LD_INT 2
26138: ARRAY
26139: PPUSH
26140: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26144: LD_VAR 0 1
26148: PUSH
26149: LD_INT 1
26151: ARRAY
26152: PPUSH
26153: LD_VAR 0 1
26157: PUSH
26158: LD_INT 2
26160: ARRAY
26161: PPUSH
26162: CALL_OW 429
// end ; end ;
26166: LD_VAR 0 1
26170: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26171: LD_EXP 64
26175: PUSH
26176: LD_EXP 86
26180: AND
26181: IFFALSE 26193
26183: GO 26185
26185: DISABLE
// YouLost (  ) ;
26186: LD_STRING 
26188: PPUSH
26189: CALL_OW 104
26193: END
// every 0 0$1 trigger StreamModeActive and sFog do
26194: LD_EXP 64
26198: PUSH
26199: LD_EXP 85
26203: AND
26204: IFFALSE 26218
26206: GO 26208
26208: DISABLE
// FogOff ( your_side ) ;
26209: LD_OWVAR 2
26213: PPUSH
26214: CALL_OW 344
26218: END
// every 0 0$1 trigger StreamModeActive and sSun do
26219: LD_EXP 64
26223: PUSH
26224: LD_EXP 87
26228: AND
26229: IFFALSE 26257
26231: GO 26233
26233: DISABLE
// begin solar_recharge_percent := 0 ;
26234: LD_ADDR_OWVAR 79
26238: PUSH
26239: LD_INT 0
26241: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26242: LD_INT 10500
26244: PPUSH
26245: CALL_OW 67
// solar_recharge_percent := 100 ;
26249: LD_ADDR_OWVAR 79
26253: PUSH
26254: LD_INT 100
26256: ST_TO_ADDR
// end ;
26257: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26258: LD_EXP 64
26262: PUSH
26263: LD_EXP 88
26267: AND
26268: IFFALSE 26507
26270: GO 26272
26272: DISABLE
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
26277: PPUSH
// begin tmp := [ ] ;
26278: LD_ADDR_VAR 0 3
26282: PUSH
26283: EMPTY
26284: ST_TO_ADDR
// for i := 1 to 6 do
26285: LD_ADDR_VAR 0 1
26289: PUSH
26290: DOUBLE
26291: LD_INT 1
26293: DEC
26294: ST_TO_ADDR
26295: LD_INT 6
26297: PUSH
26298: FOR_TO
26299: IFFALSE 26404
// begin uc_nation := nation_nature ;
26301: LD_ADDR_OWVAR 21
26305: PUSH
26306: LD_INT 0
26308: ST_TO_ADDR
// uc_side := 0 ;
26309: LD_ADDR_OWVAR 20
26313: PUSH
26314: LD_INT 0
26316: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26317: LD_ADDR_OWVAR 29
26321: PUSH
26322: LD_INT 12
26324: PUSH
26325: LD_INT 12
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: ST_TO_ADDR
// hc_agressivity := 20 ;
26332: LD_ADDR_OWVAR 35
26336: PUSH
26337: LD_INT 20
26339: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26340: LD_ADDR_OWVAR 28
26344: PUSH
26345: LD_INT 17
26347: ST_TO_ADDR
// hc_gallery :=  ;
26348: LD_ADDR_OWVAR 33
26352: PUSH
26353: LD_STRING 
26355: ST_TO_ADDR
// hc_name :=  ;
26356: LD_ADDR_OWVAR 26
26360: PUSH
26361: LD_STRING 
26363: ST_TO_ADDR
// un := CreateHuman ;
26364: LD_ADDR_VAR 0 2
26368: PUSH
26369: CALL_OW 44
26373: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26374: LD_VAR 0 2
26378: PPUSH
26379: LD_INT 1
26381: PPUSH
26382: CALL_OW 51
// tmp := tmp ^ un ;
26386: LD_ADDR_VAR 0 3
26390: PUSH
26391: LD_VAR 0 3
26395: PUSH
26396: LD_VAR 0 2
26400: ADD
26401: ST_TO_ADDR
// end ;
26402: GO 26298
26404: POP
26405: POP
// repeat wait ( 0 0$1 ) ;
26406: LD_INT 35
26408: PPUSH
26409: CALL_OW 67
// for un in tmp do
26413: LD_ADDR_VAR 0 2
26417: PUSH
26418: LD_VAR 0 3
26422: PUSH
26423: FOR_IN
26424: IFFALSE 26498
// begin if IsDead ( un ) then
26426: LD_VAR 0 2
26430: PPUSH
26431: CALL_OW 301
26435: IFFALSE 26455
// begin tmp := tmp diff un ;
26437: LD_ADDR_VAR 0 3
26441: PUSH
26442: LD_VAR 0 3
26446: PUSH
26447: LD_VAR 0 2
26451: DIFF
26452: ST_TO_ADDR
// continue ;
26453: GO 26423
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26455: LD_VAR 0 2
26459: PPUSH
26460: LD_INT 3
26462: PUSH
26463: LD_INT 22
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: PPUSH
26482: LD_VAR 0 2
26486: PPUSH
26487: CALL_OW 74
26491: PPUSH
26492: CALL_OW 115
// end ;
26496: GO 26423
26498: POP
26499: POP
// until not tmp ;
26500: LD_VAR 0 3
26504: NOT
26505: IFFALSE 26406
// end ;
26507: PPOPN 3
26509: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26510: LD_EXP 64
26514: PUSH
26515: LD_EXP 89
26519: AND
26520: IFFALSE 26574
26522: GO 26524
26524: DISABLE
// begin ToLua ( displayTroll(); ) ;
26525: LD_STRING displayTroll();
26527: PPUSH
26528: CALL_OW 559
// wait ( 3 3$00 ) ;
26532: LD_INT 6300
26534: PPUSH
26535: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26539: LD_STRING hideTroll();
26541: PPUSH
26542: CALL_OW 559
// wait ( 1 1$00 ) ;
26546: LD_INT 2100
26548: PPUSH
26549: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26553: LD_STRING displayTroll();
26555: PPUSH
26556: CALL_OW 559
// wait ( 1 1$00 ) ;
26560: LD_INT 2100
26562: PPUSH
26563: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26567: LD_STRING hideTroll();
26569: PPUSH
26570: CALL_OW 559
// end ;
26574: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26575: LD_EXP 64
26579: PUSH
26580: LD_EXP 90
26584: AND
26585: IFFALSE 26648
26587: GO 26589
26589: DISABLE
26590: LD_INT 0
26592: PPUSH
// begin p := 0 ;
26593: LD_ADDR_VAR 0 1
26597: PUSH
26598: LD_INT 0
26600: ST_TO_ADDR
// repeat game_speed := 1 ;
26601: LD_ADDR_OWVAR 65
26605: PUSH
26606: LD_INT 1
26608: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26609: LD_INT 35
26611: PPUSH
26612: CALL_OW 67
// p := p + 1 ;
26616: LD_ADDR_VAR 0 1
26620: PUSH
26621: LD_VAR 0 1
26625: PUSH
26626: LD_INT 1
26628: PLUS
26629: ST_TO_ADDR
// until p >= 60 ;
26630: LD_VAR 0 1
26634: PUSH
26635: LD_INT 60
26637: GREATEREQUAL
26638: IFFALSE 26601
// game_speed := 4 ;
26640: LD_ADDR_OWVAR 65
26644: PUSH
26645: LD_INT 4
26647: ST_TO_ADDR
// end ;
26648: PPOPN 1
26650: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26651: LD_EXP 64
26655: PUSH
26656: LD_EXP 91
26660: AND
26661: IFFALSE 26807
26663: GO 26665
26665: DISABLE
26666: LD_INT 0
26668: PPUSH
26669: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26670: LD_ADDR_VAR 0 1
26674: PUSH
26675: LD_INT 22
26677: PUSH
26678: LD_OWVAR 2
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: LD_INT 30
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 30
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: LIST
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PPUSH
26719: CALL_OW 69
26723: ST_TO_ADDR
// if not depot then
26724: LD_VAR 0 1
26728: NOT
26729: IFFALSE 26733
// exit ;
26731: GO 26807
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26733: LD_ADDR_VAR 0 2
26737: PUSH
26738: LD_VAR 0 1
26742: PUSH
26743: LD_INT 1
26745: PPUSH
26746: LD_VAR 0 1
26750: PPUSH
26751: CALL_OW 12
26755: ARRAY
26756: PPUSH
26757: CALL_OW 274
26761: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_INT 1
26769: PPUSH
26770: LD_INT 0
26772: PPUSH
26773: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_INT 2
26784: PPUSH
26785: LD_INT 0
26787: PPUSH
26788: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26792: LD_VAR 0 2
26796: PPUSH
26797: LD_INT 3
26799: PPUSH
26800: LD_INT 0
26802: PPUSH
26803: CALL_OW 277
// end ;
26807: PPOPN 2
26809: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26810: LD_EXP 64
26814: PUSH
26815: LD_EXP 92
26819: AND
26820: IFFALSE 26917
26822: GO 26824
26824: DISABLE
26825: LD_INT 0
26827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26828: LD_ADDR_VAR 0 1
26832: PUSH
26833: LD_INT 22
26835: PUSH
26836: LD_OWVAR 2
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 21
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 3
26857: PUSH
26858: LD_INT 23
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: PPUSH
26877: CALL_OW 69
26881: ST_TO_ADDR
// if not tmp then
26882: LD_VAR 0 1
26886: NOT
26887: IFFALSE 26891
// exit ;
26889: GO 26917
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26891: LD_VAR 0 1
26895: PUSH
26896: LD_INT 1
26898: PPUSH
26899: LD_VAR 0 1
26903: PPUSH
26904: CALL_OW 12
26908: ARRAY
26909: PPUSH
26910: LD_INT 200
26912: PPUSH
26913: CALL_OW 234
// end ;
26917: PPOPN 1
26919: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26920: LD_EXP 64
26924: PUSH
26925: LD_EXP 93
26929: AND
26930: IFFALSE 27009
26932: GO 26934
26934: DISABLE
26935: LD_INT 0
26937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26938: LD_ADDR_VAR 0 1
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_OWVAR 2
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PPUSH
26969: CALL_OW 69
26973: ST_TO_ADDR
// if not tmp then
26974: LD_VAR 0 1
26978: NOT
26979: IFFALSE 26983
// exit ;
26981: GO 27009
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 1
26990: PPUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL_OW 12
27000: ARRAY
27001: PPUSH
27002: LD_INT 60
27004: PPUSH
27005: CALL_OW 234
// end ;
27009: PPOPN 1
27011: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27012: LD_EXP 64
27016: PUSH
27017: LD_EXP 94
27021: AND
27022: IFFALSE 27121
27024: GO 27026
27026: DISABLE
27027: LD_INT 0
27029: PPUSH
27030: PPUSH
// begin enable ;
27031: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27032: LD_ADDR_VAR 0 1
27036: PUSH
27037: LD_INT 22
27039: PUSH
27040: LD_OWVAR 2
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 61
27051: PUSH
27052: EMPTY
27053: LIST
27054: PUSH
27055: LD_INT 33
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: PPUSH
27070: CALL_OW 69
27074: ST_TO_ADDR
// if not tmp then
27075: LD_VAR 0 1
27079: NOT
27080: IFFALSE 27084
// exit ;
27082: GO 27121
// for i in tmp do
27084: LD_ADDR_VAR 0 2
27088: PUSH
27089: LD_VAR 0 1
27093: PUSH
27094: FOR_IN
27095: IFFALSE 27119
// if IsControledBy ( i ) then
27097: LD_VAR 0 2
27101: PPUSH
27102: CALL_OW 312
27106: IFFALSE 27117
// ComUnlink ( i ) ;
27108: LD_VAR 0 2
27112: PPUSH
27113: CALL_OW 136
27117: GO 27094
27119: POP
27120: POP
// end ;
27121: PPOPN 2
27123: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27124: LD_EXP 64
27128: PUSH
27129: LD_EXP 95
27133: AND
27134: IFFALSE 27274
27136: GO 27138
27138: DISABLE
27139: LD_INT 0
27141: PPUSH
27142: PPUSH
// begin ToLua ( displayPowell(); ) ;
27143: LD_STRING displayPowell();
27145: PPUSH
27146: CALL_OW 559
// uc_side := 0 ;
27150: LD_ADDR_OWVAR 20
27154: PUSH
27155: LD_INT 0
27157: ST_TO_ADDR
// uc_nation := 2 ;
27158: LD_ADDR_OWVAR 21
27162: PUSH
27163: LD_INT 2
27165: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27166: LD_ADDR_OWVAR 37
27170: PUSH
27171: LD_INT 14
27173: ST_TO_ADDR
// vc_engine := engine_siberite ;
27174: LD_ADDR_OWVAR 39
27178: PUSH
27179: LD_INT 3
27181: ST_TO_ADDR
// vc_control := control_apeman ;
27182: LD_ADDR_OWVAR 38
27186: PUSH
27187: LD_INT 5
27189: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27190: LD_ADDR_OWVAR 40
27194: PUSH
27195: LD_INT 29
27197: ST_TO_ADDR
// un := CreateVehicle ;
27198: LD_ADDR_VAR 0 2
27202: PUSH
27203: CALL_OW 45
27207: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27208: LD_VAR 0 2
27212: PPUSH
27213: LD_INT 1
27215: PPUSH
27216: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27220: LD_INT 35
27222: PPUSH
27223: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27227: LD_VAR 0 2
27231: PPUSH
27232: LD_INT 22
27234: PUSH
27235: LD_OWVAR 2
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PPUSH
27244: CALL_OW 69
27248: PPUSH
27249: LD_VAR 0 2
27253: PPUSH
27254: CALL_OW 74
27258: PPUSH
27259: CALL_OW 115
// until IsDead ( un ) ;
27263: LD_VAR 0 2
27267: PPUSH
27268: CALL_OW 301
27272: IFFALSE 27220
// end ;
27274: PPOPN 2
27276: END
// every 0 0$1 trigger StreamModeActive and sStu do
27277: LD_EXP 64
27281: PUSH
27282: LD_EXP 103
27286: AND
27287: IFFALSE 27303
27289: GO 27291
27291: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27292: LD_STRING displayStucuk();
27294: PPUSH
27295: CALL_OW 559
// ResetFog ;
27299: CALL_OW 335
// end ;
27303: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27304: LD_EXP 64
27308: PUSH
27309: LD_EXP 96
27313: AND
27314: IFFALSE 27455
27316: GO 27318
27318: DISABLE
27319: LD_INT 0
27321: PPUSH
27322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27323: LD_ADDR_VAR 0 2
27327: PUSH
27328: LD_INT 22
27330: PUSH
27331: LD_OWVAR 2
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 21
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PPUSH
27354: CALL_OW 69
27358: ST_TO_ADDR
// if not tmp then
27359: LD_VAR 0 2
27363: NOT
27364: IFFALSE 27368
// exit ;
27366: GO 27455
// un := tmp [ rand ( 1 , tmp ) ] ;
27368: LD_ADDR_VAR 0 1
27372: PUSH
27373: LD_VAR 0 2
27377: PUSH
27378: LD_INT 1
27380: PPUSH
27381: LD_VAR 0 2
27385: PPUSH
27386: CALL_OW 12
27390: ARRAY
27391: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27392: LD_VAR 0 1
27396: PPUSH
27397: LD_INT 0
27399: PPUSH
27400: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27404: LD_VAR 0 1
27408: PPUSH
27409: LD_OWVAR 3
27413: PUSH
27414: LD_VAR 0 1
27418: DIFF
27419: PPUSH
27420: LD_VAR 0 1
27424: PPUSH
27425: CALL_OW 74
27429: PPUSH
27430: CALL_OW 115
// wait ( 0 0$20 ) ;
27434: LD_INT 700
27436: PPUSH
27437: CALL_OW 67
// SetSide ( un , your_side ) ;
27441: LD_VAR 0 1
27445: PPUSH
27446: LD_OWVAR 2
27450: PPUSH
27451: CALL_OW 235
// end ;
27455: PPOPN 2
27457: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27458: LD_EXP 64
27462: PUSH
27463: LD_EXP 97
27467: AND
27468: IFFALSE 27574
27470: GO 27472
27472: DISABLE
27473: LD_INT 0
27475: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27476: LD_ADDR_VAR 0 1
27480: PUSH
27481: LD_INT 22
27483: PUSH
27484: LD_OWVAR 2
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 30
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 30
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PPUSH
27525: CALL_OW 69
27529: ST_TO_ADDR
// if not depot then
27530: LD_VAR 0 1
27534: NOT
27535: IFFALSE 27539
// exit ;
27537: GO 27574
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27539: LD_VAR 0 1
27543: PUSH
27544: LD_INT 1
27546: ARRAY
27547: PPUSH
27548: CALL_OW 250
27552: PPUSH
27553: LD_VAR 0 1
27557: PUSH
27558: LD_INT 1
27560: ARRAY
27561: PPUSH
27562: CALL_OW 251
27566: PPUSH
27567: LD_INT 70
27569: PPUSH
27570: CALL_OW 495
// end ;
27574: PPOPN 1
27576: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27577: LD_EXP 64
27581: PUSH
27582: LD_EXP 98
27586: AND
27587: IFFALSE 27798
27589: GO 27591
27591: DISABLE
27592: LD_INT 0
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27599: LD_ADDR_VAR 0 5
27603: PUSH
27604: LD_INT 22
27606: PUSH
27607: LD_OWVAR 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 21
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PPUSH
27630: CALL_OW 69
27634: ST_TO_ADDR
// if not tmp then
27635: LD_VAR 0 5
27639: NOT
27640: IFFALSE 27644
// exit ;
27642: GO 27798
// for i in tmp do
27644: LD_ADDR_VAR 0 1
27648: PUSH
27649: LD_VAR 0 5
27653: PUSH
27654: FOR_IN
27655: IFFALSE 27796
// begin d := rand ( 0 , 5 ) ;
27657: LD_ADDR_VAR 0 4
27661: PUSH
27662: LD_INT 0
27664: PPUSH
27665: LD_INT 5
27667: PPUSH
27668: CALL_OW 12
27672: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27673: LD_ADDR_VAR 0 2
27677: PUSH
27678: LD_VAR 0 1
27682: PPUSH
27683: CALL_OW 250
27687: PPUSH
27688: LD_VAR 0 4
27692: PPUSH
27693: LD_INT 3
27695: PPUSH
27696: LD_INT 12
27698: PPUSH
27699: CALL_OW 12
27703: PPUSH
27704: CALL_OW 272
27708: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27709: LD_ADDR_VAR 0 3
27713: PUSH
27714: LD_VAR 0 1
27718: PPUSH
27719: CALL_OW 251
27723: PPUSH
27724: LD_VAR 0 4
27728: PPUSH
27729: LD_INT 3
27731: PPUSH
27732: LD_INT 12
27734: PPUSH
27735: CALL_OW 12
27739: PPUSH
27740: CALL_OW 273
27744: ST_TO_ADDR
// if ValidHex ( x , y ) then
27745: LD_VAR 0 2
27749: PPUSH
27750: LD_VAR 0 3
27754: PPUSH
27755: CALL_OW 488
27759: IFFALSE 27794
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27761: LD_VAR 0 1
27765: PPUSH
27766: LD_VAR 0 2
27770: PPUSH
27771: LD_VAR 0 3
27775: PPUSH
27776: LD_INT 3
27778: PPUSH
27779: LD_INT 6
27781: PPUSH
27782: CALL_OW 12
27786: PPUSH
27787: LD_INT 1
27789: PPUSH
27790: CALL_OW 483
// end ;
27794: GO 27654
27796: POP
27797: POP
// end ;
27798: PPOPN 5
27800: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27801: LD_EXP 64
27805: PUSH
27806: LD_EXP 99
27810: AND
27811: IFFALSE 27905
27813: GO 27815
27815: DISABLE
27816: LD_INT 0
27818: PPUSH
27819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27820: LD_ADDR_VAR 0 2
27824: PUSH
27825: LD_INT 22
27827: PUSH
27828: LD_OWVAR 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 32
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 21
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: PPUSH
27862: CALL_OW 69
27866: ST_TO_ADDR
// if not tmp then
27867: LD_VAR 0 2
27871: NOT
27872: IFFALSE 27876
// exit ;
27874: GO 27905
// for i in tmp do
27876: LD_ADDR_VAR 0 1
27880: PUSH
27881: LD_VAR 0 2
27885: PUSH
27886: FOR_IN
27887: IFFALSE 27903
// SetFuel ( i , 0 ) ;
27889: LD_VAR 0 1
27893: PPUSH
27894: LD_INT 0
27896: PPUSH
27897: CALL_OW 240
27901: GO 27886
27903: POP
27904: POP
// end ;
27905: PPOPN 2
27907: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27908: LD_EXP 64
27912: PUSH
27913: LD_EXP 100
27917: AND
27918: IFFALSE 27984
27920: GO 27922
27922: DISABLE
27923: LD_INT 0
27925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27926: LD_ADDR_VAR 0 1
27930: PUSH
27931: LD_INT 22
27933: PUSH
27934: LD_OWVAR 2
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 30
27945: PUSH
27946: LD_INT 29
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PPUSH
27957: CALL_OW 69
27961: ST_TO_ADDR
// if not tmp then
27962: LD_VAR 0 1
27966: NOT
27967: IFFALSE 27971
// exit ;
27969: GO 27984
// DestroyUnit ( tmp [ 1 ] ) ;
27971: LD_VAR 0 1
27975: PUSH
27976: LD_INT 1
27978: ARRAY
27979: PPUSH
27980: CALL_OW 65
// end ;
27984: PPOPN 1
27986: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27987: LD_EXP 64
27991: PUSH
27992: LD_EXP 102
27996: AND
27997: IFFALSE 28126
27999: GO 28001
28001: DISABLE
28002: LD_INT 0
28004: PPUSH
// begin uc_side := 0 ;
28005: LD_ADDR_OWVAR 20
28009: PUSH
28010: LD_INT 0
28012: ST_TO_ADDR
// uc_nation := nation_arabian ;
28013: LD_ADDR_OWVAR 21
28017: PUSH
28018: LD_INT 2
28020: ST_TO_ADDR
// hc_gallery :=  ;
28021: LD_ADDR_OWVAR 33
28025: PUSH
28026: LD_STRING 
28028: ST_TO_ADDR
// hc_name :=  ;
28029: LD_ADDR_OWVAR 26
28033: PUSH
28034: LD_STRING 
28036: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28037: LD_INT 1
28039: PPUSH
28040: LD_INT 11
28042: PPUSH
28043: LD_INT 10
28045: PPUSH
28046: CALL_OW 380
// un := CreateHuman ;
28050: LD_ADDR_VAR 0 1
28054: PUSH
28055: CALL_OW 44
28059: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28060: LD_VAR 0 1
28064: PPUSH
28065: LD_INT 1
28067: PPUSH
28068: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28072: LD_INT 35
28074: PPUSH
28075: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28079: LD_VAR 0 1
28083: PPUSH
28084: LD_INT 22
28086: PUSH
28087: LD_OWVAR 2
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PPUSH
28096: CALL_OW 69
28100: PPUSH
28101: LD_VAR 0 1
28105: PPUSH
28106: CALL_OW 74
28110: PPUSH
28111: CALL_OW 115
// until IsDead ( un ) ;
28115: LD_VAR 0 1
28119: PPUSH
28120: CALL_OW 301
28124: IFFALSE 28072
// end ;
28126: PPOPN 1
28128: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28129: LD_EXP 64
28133: PUSH
28134: LD_EXP 104
28138: AND
28139: IFFALSE 28151
28141: GO 28143
28143: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28144: LD_STRING earthquake(getX(game), 0, 32)
28146: PPUSH
28147: CALL_OW 559
28151: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28152: LD_EXP 64
28156: PUSH
28157: LD_EXP 105
28161: AND
28162: IFFALSE 28253
28164: GO 28166
28166: DISABLE
28167: LD_INT 0
28169: PPUSH
// begin enable ;
28170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28171: LD_ADDR_VAR 0 1
28175: PUSH
28176: LD_INT 22
28178: PUSH
28179: LD_OWVAR 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 21
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 33
28200: PUSH
28201: LD_INT 3
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: PPUSH
28213: CALL_OW 69
28217: ST_TO_ADDR
// if not tmp then
28218: LD_VAR 0 1
28222: NOT
28223: IFFALSE 28227
// exit ;
28225: GO 28253
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28227: LD_VAR 0 1
28231: PUSH
28232: LD_INT 1
28234: PPUSH
28235: LD_VAR 0 1
28239: PPUSH
28240: CALL_OW 12
28244: ARRAY
28245: PPUSH
28246: LD_INT 1
28248: PPUSH
28249: CALL_OW 234
// end ;
28253: PPOPN 1
28255: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28256: LD_EXP 64
28260: PUSH
28261: LD_EXP 106
28265: AND
28266: IFFALSE 28407
28268: GO 28270
28270: DISABLE
28271: LD_INT 0
28273: PPUSH
28274: PPUSH
28275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_INT 22
28283: PUSH
28284: LD_OWVAR 2
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 25
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PPUSH
28307: CALL_OW 69
28311: ST_TO_ADDR
// if not tmp then
28312: LD_VAR 0 3
28316: NOT
28317: IFFALSE 28321
// exit ;
28319: GO 28407
// un := tmp [ rand ( 1 , tmp ) ] ;
28321: LD_ADDR_VAR 0 2
28325: PUSH
28326: LD_VAR 0 3
28330: PUSH
28331: LD_INT 1
28333: PPUSH
28334: LD_VAR 0 3
28338: PPUSH
28339: CALL_OW 12
28343: ARRAY
28344: ST_TO_ADDR
// if Crawls ( un ) then
28345: LD_VAR 0 2
28349: PPUSH
28350: CALL_OW 318
28354: IFFALSE 28365
// ComWalk ( un ) ;
28356: LD_VAR 0 2
28360: PPUSH
28361: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28365: LD_VAR 0 2
28369: PPUSH
28370: LD_INT 9
28372: PPUSH
28373: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28377: LD_INT 28
28379: PPUSH
28380: LD_OWVAR 2
28384: PPUSH
28385: LD_INT 2
28387: PPUSH
28388: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28392: LD_INT 29
28394: PPUSH
28395: LD_OWVAR 2
28399: PPUSH
28400: LD_INT 2
28402: PPUSH
28403: CALL_OW 322
// end ;
28407: PPOPN 3
28409: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28410: LD_EXP 64
28414: PUSH
28415: LD_EXP 107
28419: AND
28420: IFFALSE 28531
28422: GO 28424
28424: DISABLE
28425: LD_INT 0
28427: PPUSH
28428: PPUSH
28429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28430: LD_ADDR_VAR 0 3
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 25
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not tmp then
28466: LD_VAR 0 3
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28531
// un := tmp [ rand ( 1 , tmp ) ] ;
28475: LD_ADDR_VAR 0 2
28479: PUSH
28480: LD_VAR 0 3
28484: PUSH
28485: LD_INT 1
28487: PPUSH
28488: LD_VAR 0 3
28492: PPUSH
28493: CALL_OW 12
28497: ARRAY
28498: ST_TO_ADDR
// if Crawls ( un ) then
28499: LD_VAR 0 2
28503: PPUSH
28504: CALL_OW 318
28508: IFFALSE 28519
// ComWalk ( un ) ;
28510: LD_VAR 0 2
28514: PPUSH
28515: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28519: LD_VAR 0 2
28523: PPUSH
28524: LD_INT 8
28526: PPUSH
28527: CALL_OW 336
// end ;
28531: PPOPN 3
28533: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28534: LD_EXP 64
28538: PUSH
28539: LD_EXP 108
28543: AND
28544: IFFALSE 28688
28546: GO 28548
28548: DISABLE
28549: LD_INT 0
28551: PPUSH
28552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28553: LD_ADDR_VAR 0 2
28557: PUSH
28558: LD_INT 22
28560: PUSH
28561: LD_OWVAR 2
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 21
28572: PUSH
28573: LD_INT 2
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: LD_INT 34
28585: PUSH
28586: LD_INT 12
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 34
28595: PUSH
28596: LD_INT 51
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 34
28605: PUSH
28606: LD_INT 32
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: LIST
28623: PPUSH
28624: CALL_OW 69
28628: ST_TO_ADDR
// if not tmp then
28629: LD_VAR 0 2
28633: NOT
28634: IFFALSE 28638
// exit ;
28636: GO 28688
// for i in tmp do
28638: LD_ADDR_VAR 0 1
28642: PUSH
28643: LD_VAR 0 2
28647: PUSH
28648: FOR_IN
28649: IFFALSE 28686
// if GetCargo ( i , mat_artifact ) = 0 then
28651: LD_VAR 0 1
28655: PPUSH
28656: LD_INT 4
28658: PPUSH
28659: CALL_OW 289
28663: PUSH
28664: LD_INT 0
28666: EQUAL
28667: IFFALSE 28684
// SetCargo ( i , mat_siberit , 100 ) ;
28669: LD_VAR 0 1
28673: PPUSH
28674: LD_INT 3
28676: PPUSH
28677: LD_INT 100
28679: PPUSH
28680: CALL_OW 290
28684: GO 28648
28686: POP
28687: POP
// end ;
28688: PPOPN 2
28690: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28691: LD_EXP 64
28695: PUSH
28696: LD_EXP 109
28700: AND
28701: IFFALSE 28884
28703: GO 28705
28705: DISABLE
28706: LD_INT 0
28708: PPUSH
28709: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28710: LD_ADDR_VAR 0 2
28714: PUSH
28715: LD_INT 22
28717: PUSH
28718: LD_OWVAR 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PPUSH
28727: CALL_OW 69
28731: ST_TO_ADDR
// if not tmp then
28732: LD_VAR 0 2
28736: NOT
28737: IFFALSE 28741
// exit ;
28739: GO 28884
// for i := 1 to 2 do
28741: LD_ADDR_VAR 0 1
28745: PUSH
28746: DOUBLE
28747: LD_INT 1
28749: DEC
28750: ST_TO_ADDR
28751: LD_INT 2
28753: PUSH
28754: FOR_TO
28755: IFFALSE 28882
// begin uc_side := your_side ;
28757: LD_ADDR_OWVAR 20
28761: PUSH
28762: LD_OWVAR 2
28766: ST_TO_ADDR
// uc_nation := nation_american ;
28767: LD_ADDR_OWVAR 21
28771: PUSH
28772: LD_INT 1
28774: ST_TO_ADDR
// vc_chassis := us_morphling ;
28775: LD_ADDR_OWVAR 37
28779: PUSH
28780: LD_INT 5
28782: ST_TO_ADDR
// vc_engine := engine_siberite ;
28783: LD_ADDR_OWVAR 39
28787: PUSH
28788: LD_INT 3
28790: ST_TO_ADDR
// vc_control := control_computer ;
28791: LD_ADDR_OWVAR 38
28795: PUSH
28796: LD_INT 3
28798: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28799: LD_ADDR_OWVAR 40
28803: PUSH
28804: LD_INT 10
28806: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28807: LD_VAR 0 2
28811: PUSH
28812: LD_INT 1
28814: ARRAY
28815: PPUSH
28816: CALL_OW 310
28820: NOT
28821: IFFALSE 28868
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28823: CALL_OW 45
28827: PPUSH
28828: LD_VAR 0 2
28832: PUSH
28833: LD_INT 1
28835: ARRAY
28836: PPUSH
28837: CALL_OW 250
28841: PPUSH
28842: LD_VAR 0 2
28846: PUSH
28847: LD_INT 1
28849: ARRAY
28850: PPUSH
28851: CALL_OW 251
28855: PPUSH
28856: LD_INT 12
28858: PPUSH
28859: LD_INT 1
28861: PPUSH
28862: CALL_OW 50
28866: GO 28880
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28868: CALL_OW 45
28872: PPUSH
28873: LD_INT 1
28875: PPUSH
28876: CALL_OW 51
// end ;
28880: GO 28754
28882: POP
28883: POP
// end ;
28884: PPOPN 2
28886: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28887: LD_EXP 64
28891: PUSH
28892: LD_EXP 110
28896: AND
28897: IFFALSE 29119
28899: GO 28901
28901: DISABLE
28902: LD_INT 0
28904: PPUSH
28905: PPUSH
28906: PPUSH
28907: PPUSH
28908: PPUSH
28909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28910: LD_ADDR_VAR 0 6
28914: PUSH
28915: LD_INT 22
28917: PUSH
28918: LD_OWVAR 2
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 21
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: LD_INT 23
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: PPUSH
28959: CALL_OW 69
28963: ST_TO_ADDR
// if not tmp then
28964: LD_VAR 0 6
28968: NOT
28969: IFFALSE 28973
// exit ;
28971: GO 29119
// s1 := rand ( 1 , 4 ) ;
28973: LD_ADDR_VAR 0 2
28977: PUSH
28978: LD_INT 1
28980: PPUSH
28981: LD_INT 4
28983: PPUSH
28984: CALL_OW 12
28988: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28989: LD_ADDR_VAR 0 4
28993: PUSH
28994: LD_VAR 0 6
28998: PUSH
28999: LD_INT 1
29001: ARRAY
29002: PPUSH
29003: LD_VAR 0 2
29007: PPUSH
29008: CALL_OW 259
29012: ST_TO_ADDR
// if s1 = 1 then
29013: LD_VAR 0 2
29017: PUSH
29018: LD_INT 1
29020: EQUAL
29021: IFFALSE 29041
// s2 := rand ( 2 , 4 ) else
29023: LD_ADDR_VAR 0 3
29027: PUSH
29028: LD_INT 2
29030: PPUSH
29031: LD_INT 4
29033: PPUSH
29034: CALL_OW 12
29038: ST_TO_ADDR
29039: GO 29049
// s2 := 1 ;
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 1
29048: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29049: LD_ADDR_VAR 0 5
29053: PUSH
29054: LD_VAR 0 6
29058: PUSH
29059: LD_INT 1
29061: ARRAY
29062: PPUSH
29063: LD_VAR 0 3
29067: PPUSH
29068: CALL_OW 259
29072: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29073: LD_VAR 0 6
29077: PUSH
29078: LD_INT 1
29080: ARRAY
29081: PPUSH
29082: LD_VAR 0 2
29086: PPUSH
29087: LD_VAR 0 5
29091: PPUSH
29092: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29096: LD_VAR 0 6
29100: PUSH
29101: LD_INT 1
29103: ARRAY
29104: PPUSH
29105: LD_VAR 0 3
29109: PPUSH
29110: LD_VAR 0 4
29114: PPUSH
29115: CALL_OW 237
// end ;
29119: PPOPN 6
29121: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29122: LD_EXP 64
29126: PUSH
29127: LD_EXP 111
29131: AND
29132: IFFALSE 29211
29134: GO 29136
29136: DISABLE
29137: LD_INT 0
29139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29140: LD_ADDR_VAR 0 1
29144: PUSH
29145: LD_INT 22
29147: PUSH
29148: LD_OWVAR 2
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 30
29159: PUSH
29160: LD_INT 3
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PPUSH
29171: CALL_OW 69
29175: ST_TO_ADDR
// if not tmp then
29176: LD_VAR 0 1
29180: NOT
29181: IFFALSE 29185
// exit ;
29183: GO 29211
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29185: LD_VAR 0 1
29189: PUSH
29190: LD_INT 1
29192: PPUSH
29193: LD_VAR 0 1
29197: PPUSH
29198: CALL_OW 12
29202: ARRAY
29203: PPUSH
29204: LD_INT 1
29206: PPUSH
29207: CALL_OW 234
// end ;
29211: PPOPN 1
29213: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29214: LD_EXP 64
29218: PUSH
29219: LD_EXP 112
29223: AND
29224: IFFALSE 29336
29226: GO 29228
29228: DISABLE
29229: LD_INT 0
29231: PPUSH
29232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29233: LD_ADDR_VAR 0 2
29237: PUSH
29238: LD_INT 22
29240: PUSH
29241: LD_OWVAR 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: LD_INT 30
29255: PUSH
29256: LD_INT 27
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 30
29265: PUSH
29266: LD_INT 26
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 30
29275: PUSH
29276: LD_INT 28
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PPUSH
29293: CALL_OW 69
29297: ST_TO_ADDR
// if not tmp then
29298: LD_VAR 0 2
29302: NOT
29303: IFFALSE 29307
// exit ;
29305: GO 29336
// for i in tmp do
29307: LD_ADDR_VAR 0 1
29311: PUSH
29312: LD_VAR 0 2
29316: PUSH
29317: FOR_IN
29318: IFFALSE 29334
// SetLives ( i , 1 ) ;
29320: LD_VAR 0 1
29324: PPUSH
29325: LD_INT 1
29327: PPUSH
29328: CALL_OW 234
29332: GO 29317
29334: POP
29335: POP
// end ;
29336: PPOPN 2
29338: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29339: LD_EXP 64
29343: PUSH
29344: LD_EXP 113
29348: AND
29349: IFFALSE 29623
29351: GO 29353
29353: DISABLE
29354: LD_INT 0
29356: PPUSH
29357: PPUSH
29358: PPUSH
// begin i := rand ( 1 , 7 ) ;
29359: LD_ADDR_VAR 0 1
29363: PUSH
29364: LD_INT 1
29366: PPUSH
29367: LD_INT 7
29369: PPUSH
29370: CALL_OW 12
29374: ST_TO_ADDR
// case i of 1 :
29375: LD_VAR 0 1
29379: PUSH
29380: LD_INT 1
29382: DOUBLE
29383: EQUAL
29384: IFTRUE 29388
29386: GO 29398
29388: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29389: LD_STRING earthquake(getX(game), 0, 32)
29391: PPUSH
29392: CALL_OW 559
29396: GO 29623
29398: LD_INT 2
29400: DOUBLE
29401: EQUAL
29402: IFTRUE 29406
29404: GO 29420
29406: POP
// begin ToLua ( displayStucuk(); ) ;
29407: LD_STRING displayStucuk();
29409: PPUSH
29410: CALL_OW 559
// ResetFog ;
29414: CALL_OW 335
// end ; 3 :
29418: GO 29623
29420: LD_INT 3
29422: DOUBLE
29423: EQUAL
29424: IFTRUE 29428
29426: GO 29532
29428: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29429: LD_ADDR_VAR 0 2
29433: PUSH
29434: LD_INT 22
29436: PUSH
29437: LD_OWVAR 2
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 25
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PPUSH
29460: CALL_OW 69
29464: ST_TO_ADDR
// if not tmp then
29465: LD_VAR 0 2
29469: NOT
29470: IFFALSE 29474
// exit ;
29472: GO 29623
// un := tmp [ rand ( 1 , tmp ) ] ;
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_VAR 0 2
29483: PUSH
29484: LD_INT 1
29486: PPUSH
29487: LD_VAR 0 2
29491: PPUSH
29492: CALL_OW 12
29496: ARRAY
29497: ST_TO_ADDR
// if Crawls ( un ) then
29498: LD_VAR 0 3
29502: PPUSH
29503: CALL_OW 318
29507: IFFALSE 29518
// ComWalk ( un ) ;
29509: LD_VAR 0 3
29513: PPUSH
29514: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29518: LD_VAR 0 3
29522: PPUSH
29523: LD_INT 8
29525: PPUSH
29526: CALL_OW 336
// end ; 4 :
29530: GO 29623
29532: LD_INT 4
29534: DOUBLE
29535: EQUAL
29536: IFTRUE 29540
29538: GO 29601
29540: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: LD_INT 22
29548: PUSH
29549: LD_OWVAR 2
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 30
29560: PUSH
29561: LD_INT 29
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PPUSH
29572: CALL_OW 69
29576: ST_TO_ADDR
// if not tmp then
29577: LD_VAR 0 2
29581: NOT
29582: IFFALSE 29586
// exit ;
29584: GO 29623
// DestroyUnit ( tmp [ 1 ] ) ;
29586: LD_VAR 0 2
29590: PUSH
29591: LD_INT 1
29593: ARRAY
29594: PPUSH
29595: CALL_OW 65
// end ; 5 .. 7 :
29599: GO 29623
29601: LD_INT 5
29603: DOUBLE
29604: GREATEREQUAL
29605: IFFALSE 29613
29607: LD_INT 7
29609: DOUBLE
29610: LESSEQUAL
29611: IFTRUE 29615
29613: GO 29622
29615: POP
// StreamSibBomb ; end ;
29616: CALL 25873 0 0
29620: GO 29623
29622: POP
// end ;
29623: PPOPN 3
29625: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29626: LD_EXP 64
29630: PUSH
29631: LD_EXP 114
29635: AND
29636: IFFALSE 29792
29638: GO 29640
29640: DISABLE
29641: LD_INT 0
29643: PPUSH
29644: PPUSH
29645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29646: LD_ADDR_VAR 0 2
29650: PUSH
29651: LD_INT 81
29653: PUSH
29654: LD_OWVAR 2
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: PUSH
29666: LD_INT 21
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 21
29678: PUSH
29679: LD_INT 2
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PPUSH
29695: CALL_OW 69
29699: ST_TO_ADDR
// if not tmp then
29700: LD_VAR 0 2
29704: NOT
29705: IFFALSE 29709
// exit ;
29707: GO 29792
// p := 0 ;
29709: LD_ADDR_VAR 0 3
29713: PUSH
29714: LD_INT 0
29716: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29717: LD_INT 35
29719: PPUSH
29720: CALL_OW 67
// p := p + 1 ;
29724: LD_ADDR_VAR 0 3
29728: PUSH
29729: LD_VAR 0 3
29733: PUSH
29734: LD_INT 1
29736: PLUS
29737: ST_TO_ADDR
// for i in tmp do
29738: LD_ADDR_VAR 0 1
29742: PUSH
29743: LD_VAR 0 2
29747: PUSH
29748: FOR_IN
29749: IFFALSE 29780
// if GetLives ( i ) < 1000 then
29751: LD_VAR 0 1
29755: PPUSH
29756: CALL_OW 256
29760: PUSH
29761: LD_INT 1000
29763: LESS
29764: IFFALSE 29778
// SetLives ( i , 1000 ) ;
29766: LD_VAR 0 1
29770: PPUSH
29771: LD_INT 1000
29773: PPUSH
29774: CALL_OW 234
29778: GO 29748
29780: POP
29781: POP
// until p > 20 ;
29782: LD_VAR 0 3
29786: PUSH
29787: LD_INT 20
29789: GREATER
29790: IFFALSE 29717
// end ;
29792: PPOPN 3
29794: END
// every 0 0$1 trigger StreamModeActive and sTime do
29795: LD_EXP 64
29799: PUSH
29800: LD_EXP 115
29804: AND
29805: IFFALSE 29840
29807: GO 29809
29809: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29810: LD_INT 28
29812: PPUSH
29813: LD_OWVAR 2
29817: PPUSH
29818: LD_INT 2
29820: PPUSH
29821: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29825: LD_INT 30
29827: PPUSH
29828: LD_OWVAR 2
29832: PPUSH
29833: LD_INT 2
29835: PPUSH
29836: CALL_OW 322
// end ;
29840: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29841: LD_EXP 64
29845: PUSH
29846: LD_EXP 116
29850: AND
29851: IFFALSE 29972
29853: GO 29855
29855: DISABLE
29856: LD_INT 0
29858: PPUSH
29859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29860: LD_ADDR_VAR 0 2
29864: PUSH
29865: LD_INT 22
29867: PUSH
29868: LD_OWVAR 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 21
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 3
29889: PUSH
29890: LD_INT 23
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL_OW 69
29913: ST_TO_ADDR
// if not tmp then
29914: LD_VAR 0 2
29918: NOT
29919: IFFALSE 29923
// exit ;
29921: GO 29972
// for i in tmp do
29923: LD_ADDR_VAR 0 1
29927: PUSH
29928: LD_VAR 0 2
29932: PUSH
29933: FOR_IN
29934: IFFALSE 29970
// begin if Crawls ( i ) then
29936: LD_VAR 0 1
29940: PPUSH
29941: CALL_OW 318
29945: IFFALSE 29956
// ComWalk ( i ) ;
29947: LD_VAR 0 1
29951: PPUSH
29952: CALL_OW 138
// SetClass ( i , 2 ) ;
29956: LD_VAR 0 1
29960: PPUSH
29961: LD_INT 2
29963: PPUSH
29964: CALL_OW 336
// end ;
29968: GO 29933
29970: POP
29971: POP
// end ;
29972: PPOPN 2
29974: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29975: LD_EXP 64
29979: PUSH
29980: LD_EXP 117
29984: AND
29985: IFFALSE 30266
29987: GO 29989
29989: DISABLE
29990: LD_INT 0
29992: PPUSH
29993: PPUSH
29994: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29995: LD_OWVAR 2
29999: PPUSH
30000: LD_INT 9
30002: PPUSH
30003: LD_INT 1
30005: PPUSH
30006: LD_INT 1
30008: PPUSH
30009: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30013: LD_INT 9
30015: PPUSH
30016: LD_OWVAR 2
30020: PPUSH
30021: CALL_OW 343
// uc_side := 9 ;
30025: LD_ADDR_OWVAR 20
30029: PUSH
30030: LD_INT 9
30032: ST_TO_ADDR
// uc_nation := 2 ;
30033: LD_ADDR_OWVAR 21
30037: PUSH
30038: LD_INT 2
30040: ST_TO_ADDR
// hc_name := Dark Warrior ;
30041: LD_ADDR_OWVAR 26
30045: PUSH
30046: LD_STRING Dark Warrior
30048: ST_TO_ADDR
// hc_gallery :=  ;
30049: LD_ADDR_OWVAR 33
30053: PUSH
30054: LD_STRING 
30056: ST_TO_ADDR
// hc_noskilllimit := true ;
30057: LD_ADDR_OWVAR 76
30061: PUSH
30062: LD_INT 1
30064: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30065: LD_ADDR_OWVAR 31
30069: PUSH
30070: LD_INT 30
30072: PUSH
30073: LD_INT 30
30075: PUSH
30076: LD_INT 30
30078: PUSH
30079: LD_INT 30
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: ST_TO_ADDR
// un := CreateHuman ;
30088: LD_ADDR_VAR 0 3
30092: PUSH
30093: CALL_OW 44
30097: ST_TO_ADDR
// hc_noskilllimit := false ;
30098: LD_ADDR_OWVAR 76
30102: PUSH
30103: LD_INT 0
30105: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30106: LD_VAR 0 3
30110: PPUSH
30111: LD_INT 1
30113: PPUSH
30114: CALL_OW 51
// p := 0 ;
30118: LD_ADDR_VAR 0 2
30122: PUSH
30123: LD_INT 0
30125: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30126: LD_INT 35
30128: PPUSH
30129: CALL_OW 67
// p := p + 1 ;
30133: LD_ADDR_VAR 0 2
30137: PUSH
30138: LD_VAR 0 2
30142: PUSH
30143: LD_INT 1
30145: PLUS
30146: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30147: LD_VAR 0 3
30151: PPUSH
30152: CALL_OW 256
30156: PUSH
30157: LD_INT 1000
30159: LESS
30160: IFFALSE 30174
// SetLives ( un , 1000 ) ;
30162: LD_VAR 0 3
30166: PPUSH
30167: LD_INT 1000
30169: PPUSH
30170: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30174: LD_VAR 0 3
30178: PPUSH
30179: LD_INT 81
30181: PUSH
30182: LD_OWVAR 2
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 91
30193: PUSH
30194: LD_VAR 0 3
30198: PUSH
30199: LD_INT 30
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PPUSH
30211: CALL_OW 69
30215: PPUSH
30216: LD_VAR 0 3
30220: PPUSH
30221: CALL_OW 74
30225: PPUSH
30226: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30230: LD_VAR 0 2
30234: PUSH
30235: LD_INT 60
30237: GREATER
30238: PUSH
30239: LD_VAR 0 3
30243: PPUSH
30244: CALL_OW 301
30248: OR
30249: IFFALSE 30126
// if un then
30251: LD_VAR 0 3
30255: IFFALSE 30266
// RemoveUnit ( un ) ;
30257: LD_VAR 0 3
30261: PPUSH
30262: CALL_OW 64
// end ;
30266: PPOPN 3
30268: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30269: LD_INT 0
30271: PPUSH
// case cmd of 301 :
30272: LD_VAR 0 1
30276: PUSH
30277: LD_INT 301
30279: DOUBLE
30280: EQUAL
30281: IFTRUE 30285
30283: GO 30317
30285: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30286: LD_VAR 0 6
30290: PPUSH
30291: LD_VAR 0 7
30295: PPUSH
30296: LD_VAR 0 8
30300: PPUSH
30301: LD_VAR 0 4
30305: PPUSH
30306: LD_VAR 0 5
30310: PPUSH
30311: CALL 31518 0 5
30315: GO 30438
30317: LD_INT 302
30319: DOUBLE
30320: EQUAL
30321: IFTRUE 30325
30323: GO 30362
30325: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30326: LD_VAR 0 6
30330: PPUSH
30331: LD_VAR 0 7
30335: PPUSH
30336: LD_VAR 0 8
30340: PPUSH
30341: LD_VAR 0 9
30345: PPUSH
30346: LD_VAR 0 4
30350: PPUSH
30351: LD_VAR 0 5
30355: PPUSH
30356: CALL 31609 0 6
30360: GO 30438
30362: LD_INT 303
30364: DOUBLE
30365: EQUAL
30366: IFTRUE 30370
30368: GO 30407
30370: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30371: LD_VAR 0 6
30375: PPUSH
30376: LD_VAR 0 7
30380: PPUSH
30381: LD_VAR 0 8
30385: PPUSH
30386: LD_VAR 0 9
30390: PPUSH
30391: LD_VAR 0 4
30395: PPUSH
30396: LD_VAR 0 5
30400: PPUSH
30401: CALL 30443 0 6
30405: GO 30438
30407: LD_INT 304
30409: DOUBLE
30410: EQUAL
30411: IFTRUE 30415
30413: GO 30437
30415: POP
// hHackTeleport ( unit , x , y ) ; end ;
30416: LD_VAR 0 2
30420: PPUSH
30421: LD_VAR 0 4
30425: PPUSH
30426: LD_VAR 0 5
30430: PPUSH
30431: CALL 32202 0 3
30435: GO 30438
30437: POP
// end ;
30438: LD_VAR 0 12
30442: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30443: LD_INT 0
30445: PPUSH
30446: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30447: LD_VAR 0 1
30451: PUSH
30452: LD_INT 1
30454: LESS
30455: PUSH
30456: LD_VAR 0 1
30460: PUSH
30461: LD_INT 3
30463: GREATER
30464: OR
30465: PUSH
30466: LD_VAR 0 5
30470: PPUSH
30471: LD_VAR 0 6
30475: PPUSH
30476: CALL_OW 428
30480: OR
30481: IFFALSE 30485
// exit ;
30483: GO 31205
// uc_side := your_side ;
30485: LD_ADDR_OWVAR 20
30489: PUSH
30490: LD_OWVAR 2
30494: ST_TO_ADDR
// uc_nation := nation ;
30495: LD_ADDR_OWVAR 21
30499: PUSH
30500: LD_VAR 0 1
30504: ST_TO_ADDR
// bc_level = 1 ;
30505: LD_ADDR_OWVAR 43
30509: PUSH
30510: LD_INT 1
30512: ST_TO_ADDR
// case btype of 1 :
30513: LD_VAR 0 2
30517: PUSH
30518: LD_INT 1
30520: DOUBLE
30521: EQUAL
30522: IFTRUE 30526
30524: GO 30537
30526: POP
// bc_type := b_depot ; 2 :
30527: LD_ADDR_OWVAR 42
30531: PUSH
30532: LD_INT 0
30534: ST_TO_ADDR
30535: GO 31149
30537: LD_INT 2
30539: DOUBLE
30540: EQUAL
30541: IFTRUE 30545
30543: GO 30556
30545: POP
// bc_type := b_warehouse ; 3 :
30546: LD_ADDR_OWVAR 42
30550: PUSH
30551: LD_INT 1
30553: ST_TO_ADDR
30554: GO 31149
30556: LD_INT 3
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30575
30564: POP
// bc_type := b_lab ; 4 .. 9 :
30565: LD_ADDR_OWVAR 42
30569: PUSH
30570: LD_INT 6
30572: ST_TO_ADDR
30573: GO 31149
30575: LD_INT 4
30577: DOUBLE
30578: GREATEREQUAL
30579: IFFALSE 30587
30581: LD_INT 9
30583: DOUBLE
30584: LESSEQUAL
30585: IFTRUE 30589
30587: GO 30641
30589: POP
// begin bc_type := b_lab_half ;
30590: LD_ADDR_OWVAR 42
30594: PUSH
30595: LD_INT 7
30597: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30598: LD_ADDR_OWVAR 44
30602: PUSH
30603: LD_INT 10
30605: PUSH
30606: LD_INT 11
30608: PUSH
30609: LD_INT 12
30611: PUSH
30612: LD_INT 15
30614: PUSH
30615: LD_INT 14
30617: PUSH
30618: LD_INT 13
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: PUSH
30629: LD_VAR 0 2
30633: PUSH
30634: LD_INT 3
30636: MINUS
30637: ARRAY
30638: ST_TO_ADDR
// end ; 10 .. 13 :
30639: GO 31149
30641: LD_INT 10
30643: DOUBLE
30644: GREATEREQUAL
30645: IFFALSE 30653
30647: LD_INT 13
30649: DOUBLE
30650: LESSEQUAL
30651: IFTRUE 30655
30653: GO 30732
30655: POP
// begin bc_type := b_lab_full ;
30656: LD_ADDR_OWVAR 42
30660: PUSH
30661: LD_INT 8
30663: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30664: LD_ADDR_OWVAR 44
30668: PUSH
30669: LD_INT 10
30671: PUSH
30672: LD_INT 12
30674: PUSH
30675: LD_INT 14
30677: PUSH
30678: LD_INT 13
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: PUSH
30687: LD_VAR 0 2
30691: PUSH
30692: LD_INT 9
30694: MINUS
30695: ARRAY
30696: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30697: LD_ADDR_OWVAR 45
30701: PUSH
30702: LD_INT 11
30704: PUSH
30705: LD_INT 15
30707: PUSH
30708: LD_INT 12
30710: PUSH
30711: LD_INT 15
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: PUSH
30720: LD_VAR 0 2
30724: PUSH
30725: LD_INT 9
30727: MINUS
30728: ARRAY
30729: ST_TO_ADDR
// end ; 14 :
30730: GO 31149
30732: LD_INT 14
30734: DOUBLE
30735: EQUAL
30736: IFTRUE 30740
30738: GO 30751
30740: POP
// bc_type := b_workshop ; 15 :
30741: LD_ADDR_OWVAR 42
30745: PUSH
30746: LD_INT 2
30748: ST_TO_ADDR
30749: GO 31149
30751: LD_INT 15
30753: DOUBLE
30754: EQUAL
30755: IFTRUE 30759
30757: GO 30770
30759: POP
// bc_type := b_factory ; 16 :
30760: LD_ADDR_OWVAR 42
30764: PUSH
30765: LD_INT 3
30767: ST_TO_ADDR
30768: GO 31149
30770: LD_INT 16
30772: DOUBLE
30773: EQUAL
30774: IFTRUE 30778
30776: GO 30789
30778: POP
// bc_type := b_ext_gun ; 17 :
30779: LD_ADDR_OWVAR 42
30783: PUSH
30784: LD_INT 17
30786: ST_TO_ADDR
30787: GO 31149
30789: LD_INT 17
30791: DOUBLE
30792: EQUAL
30793: IFTRUE 30797
30795: GO 30825
30797: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30798: LD_ADDR_OWVAR 42
30802: PUSH
30803: LD_INT 19
30805: PUSH
30806: LD_INT 23
30808: PUSH
30809: LD_INT 19
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: PUSH
30817: LD_VAR 0 1
30821: ARRAY
30822: ST_TO_ADDR
30823: GO 31149
30825: LD_INT 18
30827: DOUBLE
30828: EQUAL
30829: IFTRUE 30833
30831: GO 30844
30833: POP
// bc_type := b_ext_radar ; 19 :
30834: LD_ADDR_OWVAR 42
30838: PUSH
30839: LD_INT 20
30841: ST_TO_ADDR
30842: GO 31149
30844: LD_INT 19
30846: DOUBLE
30847: EQUAL
30848: IFTRUE 30852
30850: GO 30863
30852: POP
// bc_type := b_ext_radio ; 20 :
30853: LD_ADDR_OWVAR 42
30857: PUSH
30858: LD_INT 22
30860: ST_TO_ADDR
30861: GO 31149
30863: LD_INT 20
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30882
30871: POP
// bc_type := b_ext_siberium ; 21 :
30872: LD_ADDR_OWVAR 42
30876: PUSH
30877: LD_INT 21
30879: ST_TO_ADDR
30880: GO 31149
30882: LD_INT 21
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30890
30888: GO 30901
30890: POP
// bc_type := b_ext_computer ; 22 :
30891: LD_ADDR_OWVAR 42
30895: PUSH
30896: LD_INT 24
30898: ST_TO_ADDR
30899: GO 31149
30901: LD_INT 22
30903: DOUBLE
30904: EQUAL
30905: IFTRUE 30909
30907: GO 30920
30909: POP
// bc_type := b_ext_track ; 23 :
30910: LD_ADDR_OWVAR 42
30914: PUSH
30915: LD_INT 16
30917: ST_TO_ADDR
30918: GO 31149
30920: LD_INT 23
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30939
30928: POP
// bc_type := b_ext_laser ; 24 :
30929: LD_ADDR_OWVAR 42
30933: PUSH
30934: LD_INT 25
30936: ST_TO_ADDR
30937: GO 31149
30939: LD_INT 24
30941: DOUBLE
30942: EQUAL
30943: IFTRUE 30947
30945: GO 30958
30947: POP
// bc_type := b_control_tower ; 25 :
30948: LD_ADDR_OWVAR 42
30952: PUSH
30953: LD_INT 36
30955: ST_TO_ADDR
30956: GO 31149
30958: LD_INT 25
30960: DOUBLE
30961: EQUAL
30962: IFTRUE 30966
30964: GO 30977
30966: POP
// bc_type := b_breastwork ; 26 :
30967: LD_ADDR_OWVAR 42
30971: PUSH
30972: LD_INT 31
30974: ST_TO_ADDR
30975: GO 31149
30977: LD_INT 26
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 30996
30985: POP
// bc_type := b_bunker ; 27 :
30986: LD_ADDR_OWVAR 42
30990: PUSH
30991: LD_INT 32
30993: ST_TO_ADDR
30994: GO 31149
30996: LD_INT 27
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31015
31004: POP
// bc_type := b_turret ; 28 :
31005: LD_ADDR_OWVAR 42
31009: PUSH
31010: LD_INT 33
31012: ST_TO_ADDR
31013: GO 31149
31015: LD_INT 28
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31034
31023: POP
// bc_type := b_armoury ; 29 :
31024: LD_ADDR_OWVAR 42
31028: PUSH
31029: LD_INT 4
31031: ST_TO_ADDR
31032: GO 31149
31034: LD_INT 29
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31053
31042: POP
// bc_type := b_barracks ; 30 :
31043: LD_ADDR_OWVAR 42
31047: PUSH
31048: LD_INT 5
31050: ST_TO_ADDR
31051: GO 31149
31053: LD_INT 30
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31072
31061: POP
// bc_type := b_solar_power ; 31 :
31062: LD_ADDR_OWVAR 42
31066: PUSH
31067: LD_INT 27
31069: ST_TO_ADDR
31070: GO 31149
31072: LD_INT 31
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31091
31080: POP
// bc_type := b_oil_power ; 32 :
31081: LD_ADDR_OWVAR 42
31085: PUSH
31086: LD_INT 26
31088: ST_TO_ADDR
31089: GO 31149
31091: LD_INT 32
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31099
31097: GO 31110
31099: POP
// bc_type := b_siberite_power ; 33 :
31100: LD_ADDR_OWVAR 42
31104: PUSH
31105: LD_INT 28
31107: ST_TO_ADDR
31108: GO 31149
31110: LD_INT 33
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31129
31118: POP
// bc_type := b_oil_mine ; 34 :
31119: LD_ADDR_OWVAR 42
31123: PUSH
31124: LD_INT 29
31126: ST_TO_ADDR
31127: GO 31149
31129: LD_INT 34
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31148
31137: POP
// bc_type := b_siberite_mine ; end ;
31138: LD_ADDR_OWVAR 42
31142: PUSH
31143: LD_INT 30
31145: ST_TO_ADDR
31146: GO 31149
31148: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31149: LD_ADDR_VAR 0 8
31153: PUSH
31154: LD_VAR 0 5
31158: PPUSH
31159: LD_VAR 0 6
31163: PPUSH
31164: LD_VAR 0 3
31168: PPUSH
31169: CALL_OW 47
31173: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31174: LD_OWVAR 42
31178: PUSH
31179: LD_INT 32
31181: PUSH
31182: LD_INT 33
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: IN
31189: IFFALSE 31205
// PlaceWeaponTurret ( b , weapon ) ;
31191: LD_VAR 0 8
31195: PPUSH
31196: LD_VAR 0 4
31200: PPUSH
31201: CALL_OW 431
// end ;
31205: LD_VAR 0 7
31209: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31210: LD_INT 0
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31216: LD_ADDR_VAR 0 4
31220: PUSH
31221: LD_INT 22
31223: PUSH
31224: LD_OWVAR 2
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 2
31235: PUSH
31236: LD_INT 30
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 30
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PPUSH
31265: CALL_OW 69
31269: ST_TO_ADDR
// if not tmp then
31270: LD_VAR 0 4
31274: NOT
31275: IFFALSE 31279
// exit ;
31277: GO 31338
// for i in tmp do
31279: LD_ADDR_VAR 0 2
31283: PUSH
31284: LD_VAR 0 4
31288: PUSH
31289: FOR_IN
31290: IFFALSE 31336
// for j = 1 to 3 do
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: DOUBLE
31298: LD_INT 1
31300: DEC
31301: ST_TO_ADDR
31302: LD_INT 3
31304: PUSH
31305: FOR_TO
31306: IFFALSE 31332
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31308: LD_VAR 0 2
31312: PPUSH
31313: CALL_OW 274
31317: PPUSH
31318: LD_VAR 0 3
31322: PPUSH
31323: LD_INT 99999
31325: PPUSH
31326: CALL_OW 277
31330: GO 31305
31332: POP
31333: POP
31334: GO 31289
31336: POP
31337: POP
// end ;
31338: LD_VAR 0 1
31342: RET
// export function hHackSetLevel10 ; var i , j ; begin
31343: LD_INT 0
31345: PPUSH
31346: PPUSH
31347: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31348: LD_ADDR_VAR 0 2
31352: PUSH
31353: LD_INT 21
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PPUSH
31363: CALL_OW 69
31367: PUSH
31368: FOR_IN
31369: IFFALSE 31421
// if IsSelected ( i ) then
31371: LD_VAR 0 2
31375: PPUSH
31376: CALL_OW 306
31380: IFFALSE 31419
// begin for j := 1 to 4 do
31382: LD_ADDR_VAR 0 3
31386: PUSH
31387: DOUBLE
31388: LD_INT 1
31390: DEC
31391: ST_TO_ADDR
31392: LD_INT 4
31394: PUSH
31395: FOR_TO
31396: IFFALSE 31417
// SetSkill ( i , j , 10 ) ;
31398: LD_VAR 0 2
31402: PPUSH
31403: LD_VAR 0 3
31407: PPUSH
31408: LD_INT 10
31410: PPUSH
31411: CALL_OW 237
31415: GO 31395
31417: POP
31418: POP
// end ;
31419: GO 31368
31421: POP
31422: POP
// end ;
31423: LD_VAR 0 1
31427: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31428: LD_INT 0
31430: PPUSH
31431: PPUSH
31432: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31433: LD_ADDR_VAR 0 2
31437: PUSH
31438: LD_INT 22
31440: PUSH
31441: LD_OWVAR 2
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 21
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PPUSH
31464: CALL_OW 69
31468: PUSH
31469: FOR_IN
31470: IFFALSE 31511
// begin for j := 1 to 4 do
31472: LD_ADDR_VAR 0 3
31476: PUSH
31477: DOUBLE
31478: LD_INT 1
31480: DEC
31481: ST_TO_ADDR
31482: LD_INT 4
31484: PUSH
31485: FOR_TO
31486: IFFALSE 31507
// SetSkill ( i , j , 10 ) ;
31488: LD_VAR 0 2
31492: PPUSH
31493: LD_VAR 0 3
31497: PPUSH
31498: LD_INT 10
31500: PPUSH
31501: CALL_OW 237
31505: GO 31485
31507: POP
31508: POP
// end ;
31509: GO 31469
31511: POP
31512: POP
// end ;
31513: LD_VAR 0 1
31517: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31518: LD_INT 0
31520: PPUSH
// uc_side := your_side ;
31521: LD_ADDR_OWVAR 20
31525: PUSH
31526: LD_OWVAR 2
31530: ST_TO_ADDR
// uc_nation := nation ;
31531: LD_ADDR_OWVAR 21
31535: PUSH
31536: LD_VAR 0 1
31540: ST_TO_ADDR
// InitHc ;
31541: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31545: LD_INT 0
31547: PPUSH
31548: LD_VAR 0 2
31552: PPUSH
31553: LD_VAR 0 3
31557: PPUSH
31558: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31562: LD_VAR 0 4
31566: PPUSH
31567: LD_VAR 0 5
31571: PPUSH
31572: CALL_OW 428
31576: PUSH
31577: LD_INT 0
31579: EQUAL
31580: IFFALSE 31604
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31582: CALL_OW 44
31586: PPUSH
31587: LD_VAR 0 4
31591: PPUSH
31592: LD_VAR 0 5
31596: PPUSH
31597: LD_INT 1
31599: PPUSH
31600: CALL_OW 48
// end ;
31604: LD_VAR 0 6
31608: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31609: LD_INT 0
31611: PPUSH
31612: PPUSH
// uc_side := your_side ;
31613: LD_ADDR_OWVAR 20
31617: PUSH
31618: LD_OWVAR 2
31622: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31623: LD_VAR 0 1
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: LD_INT 3
31636: PUSH
31637: LD_INT 4
31639: PUSH
31640: LD_INT 5
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: IN
31650: IFFALSE 31662
// uc_nation := nation_american else
31652: LD_ADDR_OWVAR 21
31656: PUSH
31657: LD_INT 1
31659: ST_TO_ADDR
31660: GO 31705
// if chassis in [ 11 , 12 , 13 , 14 ] then
31662: LD_VAR 0 1
31666: PUSH
31667: LD_INT 11
31669: PUSH
31670: LD_INT 12
31672: PUSH
31673: LD_INT 13
31675: PUSH
31676: LD_INT 14
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: IN
31685: IFFALSE 31697
// uc_nation := nation_arabian else
31687: LD_ADDR_OWVAR 21
31691: PUSH
31692: LD_INT 2
31694: ST_TO_ADDR
31695: GO 31705
// uc_nation := nation_russian ;
31697: LD_ADDR_OWVAR 21
31701: PUSH
31702: LD_INT 3
31704: ST_TO_ADDR
// vc_chassis := chassis ;
31705: LD_ADDR_OWVAR 37
31709: PUSH
31710: LD_VAR 0 1
31714: ST_TO_ADDR
// vc_engine := engine ;
31715: LD_ADDR_OWVAR 39
31719: PUSH
31720: LD_VAR 0 2
31724: ST_TO_ADDR
// vc_control := control ;
31725: LD_ADDR_OWVAR 38
31729: PUSH
31730: LD_VAR 0 3
31734: ST_TO_ADDR
// vc_weapon := weapon ;
31735: LD_ADDR_OWVAR 40
31739: PUSH
31740: LD_VAR 0 4
31744: ST_TO_ADDR
// un := CreateVehicle ;
31745: LD_ADDR_VAR 0 8
31749: PUSH
31750: CALL_OW 45
31754: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31755: LD_VAR 0 8
31759: PPUSH
31760: LD_INT 0
31762: PPUSH
31763: LD_INT 5
31765: PPUSH
31766: CALL_OW 12
31770: PPUSH
31771: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31775: LD_VAR 0 8
31779: PPUSH
31780: LD_VAR 0 5
31784: PPUSH
31785: LD_VAR 0 6
31789: PPUSH
31790: LD_INT 1
31792: PPUSH
31793: CALL_OW 48
// end ;
31797: LD_VAR 0 7
31801: RET
// export hInvincible ; every 1 do
31802: GO 31804
31804: DISABLE
// hInvincible := [ ] ;
31805: LD_ADDR_EXP 118
31809: PUSH
31810: EMPTY
31811: ST_TO_ADDR
31812: END
// every 10 do var i ;
31813: GO 31815
31815: DISABLE
31816: LD_INT 0
31818: PPUSH
// begin enable ;
31819: ENABLE
// if not hInvincible then
31820: LD_EXP 118
31824: NOT
31825: IFFALSE 31829
// exit ;
31827: GO 31873
// for i in hInvincible do
31829: LD_ADDR_VAR 0 1
31833: PUSH
31834: LD_EXP 118
31838: PUSH
31839: FOR_IN
31840: IFFALSE 31871
// if GetLives ( i ) < 1000 then
31842: LD_VAR 0 1
31846: PPUSH
31847: CALL_OW 256
31851: PUSH
31852: LD_INT 1000
31854: LESS
31855: IFFALSE 31869
// SetLives ( i , 1000 ) ;
31857: LD_VAR 0 1
31861: PPUSH
31862: LD_INT 1000
31864: PPUSH
31865: CALL_OW 234
31869: GO 31839
31871: POP
31872: POP
// end ;
31873: PPOPN 1
31875: END
// export function hHackInvincible ; var i ; begin
31876: LD_INT 0
31878: PPUSH
31879: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31880: LD_ADDR_VAR 0 2
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: LD_INT 21
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 21
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: PPUSH
31913: CALL_OW 69
31917: PUSH
31918: FOR_IN
31919: IFFALSE 31980
// if IsSelected ( i ) then
31921: LD_VAR 0 2
31925: PPUSH
31926: CALL_OW 306
31930: IFFALSE 31978
// begin if i in hInvincible then
31932: LD_VAR 0 2
31936: PUSH
31937: LD_EXP 118
31941: IN
31942: IFFALSE 31962
// hInvincible := hInvincible diff i else
31944: LD_ADDR_EXP 118
31948: PUSH
31949: LD_EXP 118
31953: PUSH
31954: LD_VAR 0 2
31958: DIFF
31959: ST_TO_ADDR
31960: GO 31978
// hInvincible := hInvincible union i ;
31962: LD_ADDR_EXP 118
31966: PUSH
31967: LD_EXP 118
31971: PUSH
31972: LD_VAR 0 2
31976: UNION
31977: ST_TO_ADDR
// end ;
31978: GO 31918
31980: POP
31981: POP
// end ;
31982: LD_VAR 0 1
31986: RET
// export function hHackInvisible ; var i , j ; begin
31987: LD_INT 0
31989: PPUSH
31990: PPUSH
31991: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31992: LD_ADDR_VAR 0 2
31996: PUSH
31997: LD_INT 21
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PPUSH
32007: CALL_OW 69
32011: PUSH
32012: FOR_IN
32013: IFFALSE 32037
// if IsSelected ( i ) then
32015: LD_VAR 0 2
32019: PPUSH
32020: CALL_OW 306
32024: IFFALSE 32035
// ComForceInvisible ( i ) ;
32026: LD_VAR 0 2
32030: PPUSH
32031: CALL_OW 496
32035: GO 32012
32037: POP
32038: POP
// end ;
32039: LD_VAR 0 1
32043: RET
// export function hHackChangeYourSide ; begin
32044: LD_INT 0
32046: PPUSH
// if your_side = 8 then
32047: LD_OWVAR 2
32051: PUSH
32052: LD_INT 8
32054: EQUAL
32055: IFFALSE 32067
// your_side := 0 else
32057: LD_ADDR_OWVAR 2
32061: PUSH
32062: LD_INT 0
32064: ST_TO_ADDR
32065: GO 32081
// your_side := your_side + 1 ;
32067: LD_ADDR_OWVAR 2
32071: PUSH
32072: LD_OWVAR 2
32076: PUSH
32077: LD_INT 1
32079: PLUS
32080: ST_TO_ADDR
// end ;
32081: LD_VAR 0 1
32085: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32086: LD_INT 0
32088: PPUSH
32089: PPUSH
32090: PPUSH
// for i in all_units do
32091: LD_ADDR_VAR 0 2
32095: PUSH
32096: LD_OWVAR 3
32100: PUSH
32101: FOR_IN
32102: IFFALSE 32180
// if IsSelected ( i ) then
32104: LD_VAR 0 2
32108: PPUSH
32109: CALL_OW 306
32113: IFFALSE 32178
// begin j := GetSide ( i ) ;
32115: LD_ADDR_VAR 0 3
32119: PUSH
32120: LD_VAR 0 2
32124: PPUSH
32125: CALL_OW 255
32129: ST_TO_ADDR
// if j = 8 then
32130: LD_VAR 0 3
32134: PUSH
32135: LD_INT 8
32137: EQUAL
32138: IFFALSE 32150
// j := 0 else
32140: LD_ADDR_VAR 0 3
32144: PUSH
32145: LD_INT 0
32147: ST_TO_ADDR
32148: GO 32164
// j := j + 1 ;
32150: LD_ADDR_VAR 0 3
32154: PUSH
32155: LD_VAR 0 3
32159: PUSH
32160: LD_INT 1
32162: PLUS
32163: ST_TO_ADDR
// SetSide ( i , j ) ;
32164: LD_VAR 0 2
32168: PPUSH
32169: LD_VAR 0 3
32173: PPUSH
32174: CALL_OW 235
// end ;
32178: GO 32101
32180: POP
32181: POP
// end ;
32182: LD_VAR 0 1
32186: RET
// export function hHackFog ; begin
32187: LD_INT 0
32189: PPUSH
// FogOff ( true ) ;
32190: LD_INT 1
32192: PPUSH
32193: CALL_OW 344
// end ;
32197: LD_VAR 0 1
32201: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32202: LD_INT 0
32204: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32205: LD_VAR 0 1
32209: PPUSH
32210: LD_VAR 0 2
32214: PPUSH
32215: LD_VAR 0 3
32219: PPUSH
32220: LD_INT 1
32222: PPUSH
32223: LD_INT 1
32225: PPUSH
32226: CALL_OW 483
// CenterOnXY ( x , y ) ;
32230: LD_VAR 0 2
32234: PPUSH
32235: LD_VAR 0 3
32239: PPUSH
32240: CALL_OW 84
// end ; end_of_file
32244: LD_VAR 0 4
32248: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32249: LD_INT 0
32251: PPUSH
32252: PPUSH
32253: PPUSH
32254: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32255: LD_VAR 0 1
32259: PPUSH
32260: CALL_OW 264
32264: PUSH
32265: LD_EXP 52
32269: EQUAL
32270: IFFALSE 32342
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32272: LD_INT 68
32274: PPUSH
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 255
32284: PPUSH
32285: CALL_OW 321
32289: PUSH
32290: LD_INT 2
32292: EQUAL
32293: IFFALSE 32305
// eff := 70 else
32295: LD_ADDR_VAR 0 4
32299: PUSH
32300: LD_INT 70
32302: ST_TO_ADDR
32303: GO 32313
// eff := 30 ;
32305: LD_ADDR_VAR 0 4
32309: PUSH
32310: LD_INT 30
32312: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32313: LD_VAR 0 1
32317: PPUSH
32318: CALL_OW 250
32322: PPUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: CALL_OW 251
32332: PPUSH
32333: LD_VAR 0 4
32337: PPUSH
32338: CALL_OW 495
// end ; end ;
32342: LD_VAR 0 2
32346: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32347: LD_INT 0
32349: PPUSH
// end ;
32350: LD_VAR 0 4
32354: RET
// export function SOS_Command ( cmd ) ; begin
32355: LD_INT 0
32357: PPUSH
// end ;
32358: LD_VAR 0 2
32362: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32363: LD_INT 0
32365: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32366: LD_VAR 0 1
32370: PUSH
32371: LD_INT 250
32373: EQUAL
32374: PUSH
32375: LD_VAR 0 2
32379: PPUSH
32380: CALL_OW 264
32384: PUSH
32385: LD_EXP 55
32389: EQUAL
32390: AND
32391: IFFALSE 32412
// MinerPlaceMine ( unit , x , y ) ;
32393: LD_VAR 0 2
32397: PPUSH
32398: LD_VAR 0 4
32402: PPUSH
32403: LD_VAR 0 5
32407: PPUSH
32408: CALL 34709 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32412: LD_VAR 0 1
32416: PUSH
32417: LD_INT 251
32419: EQUAL
32420: PUSH
32421: LD_VAR 0 2
32425: PPUSH
32426: CALL_OW 264
32430: PUSH
32431: LD_EXP 55
32435: EQUAL
32436: AND
32437: IFFALSE 32458
// MinerDetonateMine ( unit , x , y ) ;
32439: LD_VAR 0 2
32443: PPUSH
32444: LD_VAR 0 4
32448: PPUSH
32449: LD_VAR 0 5
32453: PPUSH
32454: CALL 34986 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32458: LD_VAR 0 1
32462: PUSH
32463: LD_INT 252
32465: EQUAL
32466: PUSH
32467: LD_VAR 0 2
32471: PPUSH
32472: CALL_OW 264
32476: PUSH
32477: LD_EXP 55
32481: EQUAL
32482: AND
32483: IFFALSE 32504
// MinerCreateMinefield ( unit , x , y ) ;
32485: LD_VAR 0 2
32489: PPUSH
32490: LD_VAR 0 4
32494: PPUSH
32495: LD_VAR 0 5
32499: PPUSH
32500: CALL 35403 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32504: LD_VAR 0 1
32508: PUSH
32509: LD_INT 254
32511: EQUAL
32512: PUSH
32513: LD_VAR 0 2
32517: PPUSH
32518: CALL_OW 264
32522: PUSH
32523: LD_EXP 50
32527: EQUAL
32528: AND
32529: PUSH
32530: LD_VAR 0 3
32534: PPUSH
32535: CALL_OW 263
32539: PUSH
32540: LD_INT 3
32542: EQUAL
32543: AND
32544: IFFALSE 32560
// HackDestroyVehicle ( unit , selectedUnit ) ;
32546: LD_VAR 0 2
32550: PPUSH
32551: LD_VAR 0 3
32555: PPUSH
32556: CALL 34069 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32560: LD_VAR 0 1
32564: PUSH
32565: LD_INT 255
32567: EQUAL
32568: PUSH
32569: LD_VAR 0 2
32573: PPUSH
32574: CALL_OW 264
32578: PUSH
32579: LD_INT 14
32581: PUSH
32582: LD_INT 53
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: IN
32589: AND
32590: PUSH
32591: LD_VAR 0 4
32595: PPUSH
32596: LD_VAR 0 5
32600: PPUSH
32601: CALL_OW 488
32605: AND
32606: IFFALSE 32630
// CutTreeXYR ( unit , x , y , 12 ) ;
32608: LD_VAR 0 2
32612: PPUSH
32613: LD_VAR 0 4
32617: PPUSH
32618: LD_VAR 0 5
32622: PPUSH
32623: LD_INT 12
32625: PPUSH
32626: CALL 32635 0 4
// end ;
32630: LD_VAR 0 6
32634: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32635: LD_INT 0
32637: PPUSH
32638: PPUSH
32639: PPUSH
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
32645: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32646: LD_VAR 0 1
32650: NOT
32651: PUSH
32652: LD_VAR 0 2
32656: PPUSH
32657: LD_VAR 0 3
32661: PPUSH
32662: CALL_OW 488
32666: NOT
32667: OR
32668: PUSH
32669: LD_VAR 0 4
32673: NOT
32674: OR
32675: IFFALSE 32679
// exit ;
32677: GO 33019
// list := [ ] ;
32679: LD_ADDR_VAR 0 13
32683: PUSH
32684: EMPTY
32685: ST_TO_ADDR
// if x - r < 0 then
32686: LD_VAR 0 2
32690: PUSH
32691: LD_VAR 0 4
32695: MINUS
32696: PUSH
32697: LD_INT 0
32699: LESS
32700: IFFALSE 32712
// min_x := 0 else
32702: LD_ADDR_VAR 0 7
32706: PUSH
32707: LD_INT 0
32709: ST_TO_ADDR
32710: GO 32728
// min_x := x - r ;
32712: LD_ADDR_VAR 0 7
32716: PUSH
32717: LD_VAR 0 2
32721: PUSH
32722: LD_VAR 0 4
32726: MINUS
32727: ST_TO_ADDR
// if y - r < 0 then
32728: LD_VAR 0 3
32732: PUSH
32733: LD_VAR 0 4
32737: MINUS
32738: PUSH
32739: LD_INT 0
32741: LESS
32742: IFFALSE 32754
// min_y := 0 else
32744: LD_ADDR_VAR 0 8
32748: PUSH
32749: LD_INT 0
32751: ST_TO_ADDR
32752: GO 32770
// min_y := y - r ;
32754: LD_ADDR_VAR 0 8
32758: PUSH
32759: LD_VAR 0 3
32763: PUSH
32764: LD_VAR 0 4
32768: MINUS
32769: ST_TO_ADDR
// max_x := x + r ;
32770: LD_ADDR_VAR 0 9
32774: PUSH
32775: LD_VAR 0 2
32779: PUSH
32780: LD_VAR 0 4
32784: PLUS
32785: ST_TO_ADDR
// max_y := y + r ;
32786: LD_ADDR_VAR 0 10
32790: PUSH
32791: LD_VAR 0 3
32795: PUSH
32796: LD_VAR 0 4
32800: PLUS
32801: ST_TO_ADDR
// for _x = min_x to max_x do
32802: LD_ADDR_VAR 0 11
32806: PUSH
32807: DOUBLE
32808: LD_VAR 0 7
32812: DEC
32813: ST_TO_ADDR
32814: LD_VAR 0 9
32818: PUSH
32819: FOR_TO
32820: IFFALSE 32937
// for _y = min_y to max_y do
32822: LD_ADDR_VAR 0 12
32826: PUSH
32827: DOUBLE
32828: LD_VAR 0 8
32832: DEC
32833: ST_TO_ADDR
32834: LD_VAR 0 10
32838: PUSH
32839: FOR_TO
32840: IFFALSE 32933
// begin if not ValidHex ( _x , _y ) then
32842: LD_VAR 0 11
32846: PPUSH
32847: LD_VAR 0 12
32851: PPUSH
32852: CALL_OW 488
32856: NOT
32857: IFFALSE 32861
// continue ;
32859: GO 32839
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32861: LD_VAR 0 11
32865: PPUSH
32866: LD_VAR 0 12
32870: PPUSH
32871: CALL_OW 351
32875: PUSH
32876: LD_VAR 0 11
32880: PPUSH
32881: LD_VAR 0 12
32885: PPUSH
32886: CALL_OW 554
32890: AND
32891: IFFALSE 32931
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32893: LD_ADDR_VAR 0 13
32897: PUSH
32898: LD_VAR 0 13
32902: PPUSH
32903: LD_VAR 0 13
32907: PUSH
32908: LD_INT 1
32910: PLUS
32911: PPUSH
32912: LD_VAR 0 11
32916: PUSH
32917: LD_VAR 0 12
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PPUSH
32926: CALL_OW 2
32930: ST_TO_ADDR
// end ;
32931: GO 32839
32933: POP
32934: POP
32935: GO 32819
32937: POP
32938: POP
// if not list then
32939: LD_VAR 0 13
32943: NOT
32944: IFFALSE 32948
// exit ;
32946: GO 33019
// for i in list do
32948: LD_ADDR_VAR 0 6
32952: PUSH
32953: LD_VAR 0 13
32957: PUSH
32958: FOR_IN
32959: IFFALSE 33017
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32961: LD_VAR 0 1
32965: PPUSH
32966: LD_STRING M
32968: PUSH
32969: LD_VAR 0 6
32973: PUSH
32974: LD_INT 1
32976: ARRAY
32977: PUSH
32978: LD_VAR 0 6
32982: PUSH
32983: LD_INT 2
32985: ARRAY
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: PPUSH
33011: CALL_OW 447
33015: GO 32958
33017: POP
33018: POP
// end ;
33019: LD_VAR 0 5
33023: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33024: LD_EXP 119
33028: NOT
33029: IFFALSE 33079
33031: GO 33033
33033: DISABLE
// begin initHack := true ;
33034: LD_ADDR_EXP 119
33038: PUSH
33039: LD_INT 1
33041: ST_TO_ADDR
// hackTanks := [ ] ;
33042: LD_ADDR_EXP 120
33046: PUSH
33047: EMPTY
33048: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33049: LD_ADDR_EXP 121
33053: PUSH
33054: EMPTY
33055: ST_TO_ADDR
// hackLimit := 3 ;
33056: LD_ADDR_EXP 122
33060: PUSH
33061: LD_INT 3
33063: ST_TO_ADDR
// hackDist := 12 ;
33064: LD_ADDR_EXP 123
33068: PUSH
33069: LD_INT 12
33071: ST_TO_ADDR
// hackCounter := [ ] ;
33072: LD_ADDR_EXP 124
33076: PUSH
33077: EMPTY
33078: ST_TO_ADDR
// end ;
33079: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33080: LD_EXP 119
33084: PUSH
33085: LD_INT 34
33087: PUSH
33088: LD_EXP 50
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PPUSH
33097: CALL_OW 69
33101: AND
33102: IFFALSE 33357
33104: GO 33106
33106: DISABLE
33107: LD_INT 0
33109: PPUSH
33110: PPUSH
// begin enable ;
33111: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33112: LD_ADDR_VAR 0 1
33116: PUSH
33117: LD_INT 34
33119: PUSH
33120: LD_EXP 50
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PPUSH
33129: CALL_OW 69
33133: PUSH
33134: FOR_IN
33135: IFFALSE 33355
// begin if not i in hackTanks then
33137: LD_VAR 0 1
33141: PUSH
33142: LD_EXP 120
33146: IN
33147: NOT
33148: IFFALSE 33231
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33150: LD_ADDR_EXP 120
33154: PUSH
33155: LD_EXP 120
33159: PPUSH
33160: LD_EXP 120
33164: PUSH
33165: LD_INT 1
33167: PLUS
33168: PPUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 1
33178: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33179: LD_ADDR_EXP 121
33183: PUSH
33184: LD_EXP 121
33188: PPUSH
33189: LD_EXP 121
33193: PUSH
33194: LD_INT 1
33196: PLUS
33197: PPUSH
33198: EMPTY
33199: PPUSH
33200: CALL_OW 1
33204: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33205: LD_ADDR_EXP 124
33209: PUSH
33210: LD_EXP 124
33214: PPUSH
33215: LD_EXP 124
33219: PUSH
33220: LD_INT 1
33222: PLUS
33223: PPUSH
33224: EMPTY
33225: PPUSH
33226: CALL_OW 1
33230: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33231: LD_VAR 0 1
33235: PPUSH
33236: CALL_OW 302
33240: NOT
33241: IFFALSE 33254
// begin HackUnlinkAll ( i ) ;
33243: LD_VAR 0 1
33247: PPUSH
33248: CALL 33360 0 1
// continue ;
33252: GO 33134
// end ; HackCheckCapturedStatus ( i ) ;
33254: LD_VAR 0 1
33258: PPUSH
33259: CALL 33803 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33263: LD_ADDR_VAR 0 2
33267: PUSH
33268: LD_INT 81
33270: PUSH
33271: LD_VAR 0 1
33275: PPUSH
33276: CALL_OW 255
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 33
33287: PUSH
33288: LD_INT 3
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 91
33297: PUSH
33298: LD_VAR 0 1
33302: PUSH
33303: LD_EXP 123
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 50
33315: PUSH
33316: EMPTY
33317: LIST
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: PPUSH
33325: CALL_OW 69
33329: ST_TO_ADDR
// if not tmp then
33330: LD_VAR 0 2
33334: NOT
33335: IFFALSE 33339
// continue ;
33337: GO 33134
// HackLink ( i , tmp ) ;
33339: LD_VAR 0 1
33343: PPUSH
33344: LD_VAR 0 2
33348: PPUSH
33349: CALL 33496 0 2
// end ;
33353: GO 33134
33355: POP
33356: POP
// end ;
33357: PPOPN 2
33359: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33360: LD_INT 0
33362: PPUSH
33363: PPUSH
33364: PPUSH
// if not hack in hackTanks then
33365: LD_VAR 0 1
33369: PUSH
33370: LD_EXP 120
33374: IN
33375: NOT
33376: IFFALSE 33380
// exit ;
33378: GO 33491
// index := GetElementIndex ( hackTanks , hack ) ;
33380: LD_ADDR_VAR 0 4
33384: PUSH
33385: LD_EXP 120
33389: PPUSH
33390: LD_VAR 0 1
33394: PPUSH
33395: CALL 40505 0 2
33399: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33400: LD_EXP 121
33404: PUSH
33405: LD_VAR 0 4
33409: ARRAY
33410: IFFALSE 33491
// begin for i in hackTanksCaptured [ index ] do
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_EXP 121
33421: PUSH
33422: LD_VAR 0 4
33426: ARRAY
33427: PUSH
33428: FOR_IN
33429: IFFALSE 33455
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33431: LD_VAR 0 3
33435: PUSH
33436: LD_INT 1
33438: ARRAY
33439: PPUSH
33440: LD_VAR 0 3
33444: PUSH
33445: LD_INT 2
33447: ARRAY
33448: PPUSH
33449: CALL_OW 235
33453: GO 33428
33455: POP
33456: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33457: LD_ADDR_EXP 121
33461: PUSH
33462: LD_EXP 121
33466: PPUSH
33467: LD_VAR 0 4
33471: PPUSH
33472: EMPTY
33473: PPUSH
33474: CALL_OW 1
33478: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33479: LD_VAR 0 1
33483: PPUSH
33484: LD_INT 0
33486: PPUSH
33487: CALL_OW 505
// end ; end ;
33491: LD_VAR 0 2
33495: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33496: LD_INT 0
33498: PPUSH
33499: PPUSH
33500: PPUSH
// if not hack in hackTanks or not vehicles then
33501: LD_VAR 0 1
33505: PUSH
33506: LD_EXP 120
33510: IN
33511: NOT
33512: PUSH
33513: LD_VAR 0 2
33517: NOT
33518: OR
33519: IFFALSE 33523
// exit ;
33521: GO 33798
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33523: LD_ADDR_VAR 0 2
33527: PUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: LD_VAR 0 2
33537: PPUSH
33538: LD_INT 1
33540: PPUSH
33541: LD_INT 1
33543: PPUSH
33544: CALL 41155 0 4
33548: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33549: LD_ADDR_VAR 0 5
33553: PUSH
33554: LD_EXP 120
33558: PPUSH
33559: LD_VAR 0 1
33563: PPUSH
33564: CALL 40505 0 2
33568: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33569: LD_EXP 121
33573: PUSH
33574: LD_VAR 0 5
33578: ARRAY
33579: PUSH
33580: LD_EXP 122
33584: LESS
33585: IFFALSE 33774
// begin for i := 1 to vehicles do
33587: LD_ADDR_VAR 0 4
33591: PUSH
33592: DOUBLE
33593: LD_INT 1
33595: DEC
33596: ST_TO_ADDR
33597: LD_VAR 0 2
33601: PUSH
33602: FOR_TO
33603: IFFALSE 33772
// begin if hackTanksCaptured [ index ] = hackLimit then
33605: LD_EXP 121
33609: PUSH
33610: LD_VAR 0 5
33614: ARRAY
33615: PUSH
33616: LD_EXP 122
33620: EQUAL
33621: IFFALSE 33625
// break ;
33623: GO 33772
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33625: LD_ADDR_EXP 124
33629: PUSH
33630: LD_EXP 124
33634: PPUSH
33635: LD_VAR 0 5
33639: PPUSH
33640: LD_EXP 124
33644: PUSH
33645: LD_VAR 0 5
33649: ARRAY
33650: PUSH
33651: LD_INT 1
33653: PLUS
33654: PPUSH
33655: CALL_OW 1
33659: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33660: LD_ADDR_EXP 121
33664: PUSH
33665: LD_EXP 121
33669: PPUSH
33670: LD_VAR 0 5
33674: PUSH
33675: LD_EXP 121
33679: PUSH
33680: LD_VAR 0 5
33684: ARRAY
33685: PUSH
33686: LD_INT 1
33688: PLUS
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PPUSH
33694: LD_VAR 0 2
33698: PUSH
33699: LD_VAR 0 4
33703: ARRAY
33704: PUSH
33705: LD_VAR 0 2
33709: PUSH
33710: LD_VAR 0 4
33714: ARRAY
33715: PPUSH
33716: CALL_OW 255
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PPUSH
33725: CALL 40720 0 3
33729: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33730: LD_VAR 0 2
33734: PUSH
33735: LD_VAR 0 4
33739: ARRAY
33740: PPUSH
33741: LD_VAR 0 1
33745: PPUSH
33746: CALL_OW 255
33750: PPUSH
33751: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33755: LD_VAR 0 2
33759: PUSH
33760: LD_VAR 0 4
33764: ARRAY
33765: PPUSH
33766: CALL_OW 141
// end ;
33770: GO 33602
33772: POP
33773: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33774: LD_VAR 0 1
33778: PPUSH
33779: LD_EXP 121
33783: PUSH
33784: LD_VAR 0 5
33788: ARRAY
33789: PUSH
33790: LD_INT 0
33792: PLUS
33793: PPUSH
33794: CALL_OW 505
// end ;
33798: LD_VAR 0 3
33802: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33803: LD_INT 0
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
// if not hack in hackTanks then
33809: LD_VAR 0 1
33813: PUSH
33814: LD_EXP 120
33818: IN
33819: NOT
33820: IFFALSE 33824
// exit ;
33822: GO 34064
// index := GetElementIndex ( hackTanks , hack ) ;
33824: LD_ADDR_VAR 0 4
33828: PUSH
33829: LD_EXP 120
33833: PPUSH
33834: LD_VAR 0 1
33838: PPUSH
33839: CALL 40505 0 2
33843: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: DOUBLE
33850: LD_EXP 121
33854: PUSH
33855: LD_VAR 0 4
33859: ARRAY
33860: INC
33861: ST_TO_ADDR
33862: LD_INT 1
33864: PUSH
33865: FOR_DOWNTO
33866: IFFALSE 34038
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33868: LD_ADDR_VAR 0 5
33872: PUSH
33873: LD_EXP 121
33877: PUSH
33878: LD_VAR 0 4
33882: ARRAY
33883: PUSH
33884: LD_VAR 0 3
33888: ARRAY
33889: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33890: LD_VAR 0 5
33894: PUSH
33895: LD_INT 1
33897: ARRAY
33898: PPUSH
33899: CALL_OW 302
33903: NOT
33904: PUSH
33905: LD_VAR 0 5
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: PPUSH
33914: CALL_OW 255
33918: PUSH
33919: LD_VAR 0 1
33923: PPUSH
33924: CALL_OW 255
33928: NONEQUAL
33929: OR
33930: IFFALSE 34036
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33932: LD_VAR 0 5
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: PPUSH
33941: CALL_OW 305
33945: PUSH
33946: LD_VAR 0 5
33950: PUSH
33951: LD_INT 1
33953: ARRAY
33954: PPUSH
33955: CALL_OW 255
33959: PUSH
33960: LD_VAR 0 1
33964: PPUSH
33965: CALL_OW 255
33969: EQUAL
33970: AND
33971: IFFALSE 33995
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33973: LD_VAR 0 5
33977: PUSH
33978: LD_INT 1
33980: ARRAY
33981: PPUSH
33982: LD_VAR 0 5
33986: PUSH
33987: LD_INT 2
33989: ARRAY
33990: PPUSH
33991: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33995: LD_ADDR_EXP 121
33999: PUSH
34000: LD_EXP 121
34004: PPUSH
34005: LD_VAR 0 4
34009: PPUSH
34010: LD_EXP 121
34014: PUSH
34015: LD_VAR 0 4
34019: ARRAY
34020: PPUSH
34021: LD_VAR 0 3
34025: PPUSH
34026: CALL_OW 3
34030: PPUSH
34031: CALL_OW 1
34035: ST_TO_ADDR
// end ; end ;
34036: GO 33865
34038: POP
34039: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34040: LD_VAR 0 1
34044: PPUSH
34045: LD_EXP 121
34049: PUSH
34050: LD_VAR 0 4
34054: ARRAY
34055: PUSH
34056: LD_INT 0
34058: PLUS
34059: PPUSH
34060: CALL_OW 505
// end ;
34064: LD_VAR 0 2
34068: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34069: LD_INT 0
34071: PPUSH
34072: PPUSH
34073: PPUSH
34074: PPUSH
// if not hack in hackTanks then
34075: LD_VAR 0 1
34079: PUSH
34080: LD_EXP 120
34084: IN
34085: NOT
34086: IFFALSE 34090
// exit ;
34088: GO 34175
// index := GetElementIndex ( hackTanks , hack ) ;
34090: LD_ADDR_VAR 0 5
34094: PUSH
34095: LD_EXP 120
34099: PPUSH
34100: LD_VAR 0 1
34104: PPUSH
34105: CALL 40505 0 2
34109: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34110: LD_ADDR_VAR 0 4
34114: PUSH
34115: DOUBLE
34116: LD_INT 1
34118: DEC
34119: ST_TO_ADDR
34120: LD_EXP 121
34124: PUSH
34125: LD_VAR 0 5
34129: ARRAY
34130: PUSH
34131: FOR_TO
34132: IFFALSE 34173
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34134: LD_EXP 121
34138: PUSH
34139: LD_VAR 0 5
34143: ARRAY
34144: PUSH
34145: LD_VAR 0 4
34149: ARRAY
34150: PUSH
34151: LD_INT 1
34153: ARRAY
34154: PUSH
34155: LD_VAR 0 2
34159: EQUAL
34160: IFFALSE 34171
// KillUnit ( vehicle ) ;
34162: LD_VAR 0 2
34166: PPUSH
34167: CALL_OW 66
34171: GO 34131
34173: POP
34174: POP
// end ;
34175: LD_VAR 0 3
34179: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34180: LD_EXP 125
34184: NOT
34185: IFFALSE 34220
34187: GO 34189
34189: DISABLE
// begin initMiner := true ;
34190: LD_ADDR_EXP 125
34194: PUSH
34195: LD_INT 1
34197: ST_TO_ADDR
// minersList := [ ] ;
34198: LD_ADDR_EXP 126
34202: PUSH
34203: EMPTY
34204: ST_TO_ADDR
// minerMinesList := [ ] ;
34205: LD_ADDR_EXP 127
34209: PUSH
34210: EMPTY
34211: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34212: LD_ADDR_EXP 128
34216: PUSH
34217: LD_INT 5
34219: ST_TO_ADDR
// end ;
34220: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34221: LD_EXP 125
34225: PUSH
34226: LD_INT 34
34228: PUSH
34229: LD_EXP 55
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PPUSH
34238: CALL_OW 69
34242: AND
34243: IFFALSE 34706
34245: GO 34247
34247: DISABLE
34248: LD_INT 0
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
// begin enable ;
34254: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34255: LD_ADDR_VAR 0 1
34259: PUSH
34260: LD_INT 34
34262: PUSH
34263: LD_EXP 55
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PPUSH
34272: CALL_OW 69
34276: PUSH
34277: FOR_IN
34278: IFFALSE 34350
// begin if not i in minersList then
34280: LD_VAR 0 1
34284: PUSH
34285: LD_EXP 126
34289: IN
34290: NOT
34291: IFFALSE 34348
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34293: LD_ADDR_EXP 126
34297: PUSH
34298: LD_EXP 126
34302: PPUSH
34303: LD_EXP 126
34307: PUSH
34308: LD_INT 1
34310: PLUS
34311: PPUSH
34312: LD_VAR 0 1
34316: PPUSH
34317: CALL_OW 1
34321: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34322: LD_ADDR_EXP 127
34326: PUSH
34327: LD_EXP 127
34331: PPUSH
34332: LD_EXP 127
34336: PUSH
34337: LD_INT 1
34339: PLUS
34340: PPUSH
34341: EMPTY
34342: PPUSH
34343: CALL_OW 1
34347: ST_TO_ADDR
// end end ;
34348: GO 34277
34350: POP
34351: POP
// for i := minerMinesList downto 1 do
34352: LD_ADDR_VAR 0 1
34356: PUSH
34357: DOUBLE
34358: LD_EXP 127
34362: INC
34363: ST_TO_ADDR
34364: LD_INT 1
34366: PUSH
34367: FOR_DOWNTO
34368: IFFALSE 34704
// begin if IsLive ( minersList [ i ] ) then
34370: LD_EXP 126
34374: PUSH
34375: LD_VAR 0 1
34379: ARRAY
34380: PPUSH
34381: CALL_OW 300
34385: IFFALSE 34413
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34387: LD_EXP 126
34391: PUSH
34392: LD_VAR 0 1
34396: ARRAY
34397: PPUSH
34398: LD_EXP 127
34402: PUSH
34403: LD_VAR 0 1
34407: ARRAY
34408: PPUSH
34409: CALL_OW 505
// if not minerMinesList [ i ] then
34413: LD_EXP 127
34417: PUSH
34418: LD_VAR 0 1
34422: ARRAY
34423: NOT
34424: IFFALSE 34428
// continue ;
34426: GO 34367
// for j := minerMinesList [ i ] downto 1 do
34428: LD_ADDR_VAR 0 2
34432: PUSH
34433: DOUBLE
34434: LD_EXP 127
34438: PUSH
34439: LD_VAR 0 1
34443: ARRAY
34444: INC
34445: ST_TO_ADDR
34446: LD_INT 1
34448: PUSH
34449: FOR_DOWNTO
34450: IFFALSE 34700
// begin side := GetSide ( minersList [ i ] ) ;
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_EXP 126
34461: PUSH
34462: LD_VAR 0 1
34466: ARRAY
34467: PPUSH
34468: CALL_OW 255
34472: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34473: LD_ADDR_VAR 0 4
34477: PUSH
34478: LD_EXP 127
34482: PUSH
34483: LD_VAR 0 1
34487: ARRAY
34488: PUSH
34489: LD_VAR 0 2
34493: ARRAY
34494: PUSH
34495: LD_INT 1
34497: ARRAY
34498: PPUSH
34499: LD_EXP 127
34503: PUSH
34504: LD_VAR 0 1
34508: ARRAY
34509: PUSH
34510: LD_VAR 0 2
34514: ARRAY
34515: PUSH
34516: LD_INT 2
34518: ARRAY
34519: PPUSH
34520: CALL_OW 428
34524: ST_TO_ADDR
// if not tmp then
34525: LD_VAR 0 4
34529: NOT
34530: IFFALSE 34534
// continue ;
34532: GO 34449
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34534: LD_VAR 0 4
34538: PUSH
34539: LD_INT 81
34541: PUSH
34542: LD_VAR 0 3
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PPUSH
34551: CALL_OW 69
34555: IN
34556: PUSH
34557: LD_EXP 127
34561: PUSH
34562: LD_VAR 0 1
34566: ARRAY
34567: PUSH
34568: LD_VAR 0 2
34572: ARRAY
34573: PUSH
34574: LD_INT 1
34576: ARRAY
34577: PPUSH
34578: LD_EXP 127
34582: PUSH
34583: LD_VAR 0 1
34587: ARRAY
34588: PUSH
34589: LD_VAR 0 2
34593: ARRAY
34594: PUSH
34595: LD_INT 2
34597: ARRAY
34598: PPUSH
34599: CALL_OW 458
34603: AND
34604: IFFALSE 34698
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34606: LD_EXP 127
34610: PUSH
34611: LD_VAR 0 1
34615: ARRAY
34616: PUSH
34617: LD_VAR 0 2
34621: ARRAY
34622: PUSH
34623: LD_INT 1
34625: ARRAY
34626: PPUSH
34627: LD_EXP 127
34631: PUSH
34632: LD_VAR 0 1
34636: ARRAY
34637: PUSH
34638: LD_VAR 0 2
34642: ARRAY
34643: PUSH
34644: LD_INT 2
34646: ARRAY
34647: PPUSH
34648: LD_VAR 0 3
34652: PPUSH
34653: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34657: LD_ADDR_EXP 127
34661: PUSH
34662: LD_EXP 127
34666: PPUSH
34667: LD_VAR 0 1
34671: PPUSH
34672: LD_EXP 127
34676: PUSH
34677: LD_VAR 0 1
34681: ARRAY
34682: PPUSH
34683: LD_VAR 0 2
34687: PPUSH
34688: CALL_OW 3
34692: PPUSH
34693: CALL_OW 1
34697: ST_TO_ADDR
// end ; end ;
34698: GO 34449
34700: POP
34701: POP
// end ;
34702: GO 34367
34704: POP
34705: POP
// end ;
34706: PPOPN 4
34708: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34709: LD_INT 0
34711: PPUSH
34712: PPUSH
// result := false ;
34713: LD_ADDR_VAR 0 4
34717: PUSH
34718: LD_INT 0
34720: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34721: LD_VAR 0 1
34725: PPUSH
34726: CALL_OW 264
34730: PUSH
34731: LD_EXP 55
34735: EQUAL
34736: NOT
34737: IFFALSE 34741
// exit ;
34739: GO 34981
// index := GetElementIndex ( minersList , unit ) ;
34741: LD_ADDR_VAR 0 5
34745: PUSH
34746: LD_EXP 126
34750: PPUSH
34751: LD_VAR 0 1
34755: PPUSH
34756: CALL 40505 0 2
34760: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34761: LD_EXP 127
34765: PUSH
34766: LD_VAR 0 5
34770: ARRAY
34771: PUSH
34772: LD_EXP 128
34776: GREATEREQUAL
34777: IFFALSE 34781
// exit ;
34779: GO 34981
// ComMoveXY ( unit , x , y ) ;
34781: LD_VAR 0 1
34785: PPUSH
34786: LD_VAR 0 2
34790: PPUSH
34791: LD_VAR 0 3
34795: PPUSH
34796: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34800: LD_INT 35
34802: PPUSH
34803: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34807: LD_VAR 0 1
34811: PPUSH
34812: LD_VAR 0 2
34816: PPUSH
34817: LD_VAR 0 3
34821: PPUSH
34822: CALL 70569 0 3
34826: NOT
34827: PUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: CALL_OW 314
34837: AND
34838: IFFALSE 34842
// exit ;
34840: GO 34981
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34842: LD_VAR 0 2
34846: PPUSH
34847: LD_VAR 0 3
34851: PPUSH
34852: CALL_OW 428
34856: PUSH
34857: LD_VAR 0 1
34861: EQUAL
34862: PUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: CALL_OW 314
34872: NOT
34873: AND
34874: IFFALSE 34800
// PlaySoundXY ( x , y , PlantMine ) ;
34876: LD_VAR 0 2
34880: PPUSH
34881: LD_VAR 0 3
34885: PPUSH
34886: LD_STRING PlantMine
34888: PPUSH
34889: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34893: LD_VAR 0 2
34897: PPUSH
34898: LD_VAR 0 3
34902: PPUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: CALL_OW 255
34912: PPUSH
34913: LD_INT 0
34915: PPUSH
34916: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34920: LD_ADDR_EXP 127
34924: PUSH
34925: LD_EXP 127
34929: PPUSH
34930: LD_VAR 0 5
34934: PUSH
34935: LD_EXP 127
34939: PUSH
34940: LD_VAR 0 5
34944: ARRAY
34945: PUSH
34946: LD_INT 1
34948: PLUS
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PPUSH
34954: LD_VAR 0 2
34958: PUSH
34959: LD_VAR 0 3
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PPUSH
34968: CALL 40720 0 3
34972: ST_TO_ADDR
// result := true ;
34973: LD_ADDR_VAR 0 4
34977: PUSH
34978: LD_INT 1
34980: ST_TO_ADDR
// end ;
34981: LD_VAR 0 4
34985: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34986: LD_INT 0
34988: PPUSH
34989: PPUSH
34990: PPUSH
// if not unit in minersList then
34991: LD_VAR 0 1
34995: PUSH
34996: LD_EXP 126
35000: IN
35001: NOT
35002: IFFALSE 35006
// exit ;
35004: GO 35398
// index := GetElementIndex ( minersList , unit ) ;
35006: LD_ADDR_VAR 0 6
35010: PUSH
35011: LD_EXP 126
35015: PPUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: CALL 40505 0 2
35025: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35026: LD_ADDR_VAR 0 5
35030: PUSH
35031: DOUBLE
35032: LD_EXP 127
35036: PUSH
35037: LD_VAR 0 6
35041: ARRAY
35042: INC
35043: ST_TO_ADDR
35044: LD_INT 1
35046: PUSH
35047: FOR_DOWNTO
35048: IFFALSE 35209
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35050: LD_EXP 127
35054: PUSH
35055: LD_VAR 0 6
35059: ARRAY
35060: PUSH
35061: LD_VAR 0 5
35065: ARRAY
35066: PUSH
35067: LD_INT 1
35069: ARRAY
35070: PUSH
35071: LD_VAR 0 2
35075: EQUAL
35076: PUSH
35077: LD_EXP 127
35081: PUSH
35082: LD_VAR 0 6
35086: ARRAY
35087: PUSH
35088: LD_VAR 0 5
35092: ARRAY
35093: PUSH
35094: LD_INT 2
35096: ARRAY
35097: PUSH
35098: LD_VAR 0 3
35102: EQUAL
35103: AND
35104: IFFALSE 35207
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35106: LD_EXP 127
35110: PUSH
35111: LD_VAR 0 6
35115: ARRAY
35116: PUSH
35117: LD_VAR 0 5
35121: ARRAY
35122: PUSH
35123: LD_INT 1
35125: ARRAY
35126: PPUSH
35127: LD_EXP 127
35131: PUSH
35132: LD_VAR 0 6
35136: ARRAY
35137: PUSH
35138: LD_VAR 0 5
35142: ARRAY
35143: PUSH
35144: LD_INT 2
35146: ARRAY
35147: PPUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL_OW 255
35157: PPUSH
35158: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35162: LD_ADDR_EXP 127
35166: PUSH
35167: LD_EXP 127
35171: PPUSH
35172: LD_VAR 0 6
35176: PPUSH
35177: LD_EXP 127
35181: PUSH
35182: LD_VAR 0 6
35186: ARRAY
35187: PPUSH
35188: LD_VAR 0 5
35192: PPUSH
35193: CALL_OW 3
35197: PPUSH
35198: CALL_OW 1
35202: ST_TO_ADDR
// exit ;
35203: POP
35204: POP
35205: GO 35398
// end ; end ;
35207: GO 35047
35209: POP
35210: POP
// for i := minerMinesList [ index ] downto 1 do
35211: LD_ADDR_VAR 0 5
35215: PUSH
35216: DOUBLE
35217: LD_EXP 127
35221: PUSH
35222: LD_VAR 0 6
35226: ARRAY
35227: INC
35228: ST_TO_ADDR
35229: LD_INT 1
35231: PUSH
35232: FOR_DOWNTO
35233: IFFALSE 35396
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35235: LD_EXP 127
35239: PUSH
35240: LD_VAR 0 6
35244: ARRAY
35245: PUSH
35246: LD_VAR 0 5
35250: ARRAY
35251: PUSH
35252: LD_INT 1
35254: ARRAY
35255: PPUSH
35256: LD_EXP 127
35260: PUSH
35261: LD_VAR 0 6
35265: ARRAY
35266: PUSH
35267: LD_VAR 0 5
35271: ARRAY
35272: PUSH
35273: LD_INT 2
35275: ARRAY
35276: PPUSH
35277: LD_VAR 0 2
35281: PPUSH
35282: LD_VAR 0 3
35286: PPUSH
35287: CALL_OW 298
35291: PUSH
35292: LD_INT 6
35294: LESS
35295: IFFALSE 35394
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35297: LD_EXP 127
35301: PUSH
35302: LD_VAR 0 6
35306: ARRAY
35307: PUSH
35308: LD_VAR 0 5
35312: ARRAY
35313: PUSH
35314: LD_INT 1
35316: ARRAY
35317: PPUSH
35318: LD_EXP 127
35322: PUSH
35323: LD_VAR 0 6
35327: ARRAY
35328: PUSH
35329: LD_VAR 0 5
35333: ARRAY
35334: PUSH
35335: LD_INT 2
35337: ARRAY
35338: PPUSH
35339: LD_VAR 0 1
35343: PPUSH
35344: CALL_OW 255
35348: PPUSH
35349: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35353: LD_ADDR_EXP 127
35357: PUSH
35358: LD_EXP 127
35362: PPUSH
35363: LD_VAR 0 6
35367: PPUSH
35368: LD_EXP 127
35372: PUSH
35373: LD_VAR 0 6
35377: ARRAY
35378: PPUSH
35379: LD_VAR 0 5
35383: PPUSH
35384: CALL_OW 3
35388: PPUSH
35389: CALL_OW 1
35393: ST_TO_ADDR
// end ; end ;
35394: GO 35232
35396: POP
35397: POP
// end ;
35398: LD_VAR 0 4
35402: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35403: LD_INT 0
35405: PPUSH
35406: PPUSH
35407: PPUSH
35408: PPUSH
35409: PPUSH
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35414: LD_VAR 0 1
35418: PPUSH
35419: CALL_OW 264
35423: PUSH
35424: LD_EXP 55
35428: EQUAL
35429: NOT
35430: PUSH
35431: LD_VAR 0 1
35435: PUSH
35436: LD_EXP 126
35440: IN
35441: NOT
35442: OR
35443: IFFALSE 35447
// exit ;
35445: GO 35769
// index := GetElementIndex ( minersList , unit ) ;
35447: LD_ADDR_VAR 0 6
35451: PUSH
35452: LD_EXP 126
35456: PPUSH
35457: LD_VAR 0 1
35461: PPUSH
35462: CALL 40505 0 2
35466: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35467: LD_ADDR_VAR 0 8
35471: PUSH
35472: LD_EXP 128
35476: PUSH
35477: LD_EXP 127
35481: PUSH
35482: LD_VAR 0 6
35486: ARRAY
35487: MINUS
35488: ST_TO_ADDR
// if not minesFreeAmount then
35489: LD_VAR 0 8
35493: NOT
35494: IFFALSE 35498
// exit ;
35496: GO 35769
// tmp := [ ] ;
35498: LD_ADDR_VAR 0 7
35502: PUSH
35503: EMPTY
35504: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35505: LD_ADDR_VAR 0 5
35509: PUSH
35510: DOUBLE
35511: LD_INT 1
35513: DEC
35514: ST_TO_ADDR
35515: LD_VAR 0 8
35519: PUSH
35520: FOR_TO
35521: IFFALSE 35716
// begin _d := rand ( 0 , 5 ) ;
35523: LD_ADDR_VAR 0 11
35527: PUSH
35528: LD_INT 0
35530: PPUSH
35531: LD_INT 5
35533: PPUSH
35534: CALL_OW 12
35538: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35539: LD_ADDR_VAR 0 12
35543: PUSH
35544: LD_INT 2
35546: PPUSH
35547: LD_INT 6
35549: PPUSH
35550: CALL_OW 12
35554: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35555: LD_ADDR_VAR 0 9
35559: PUSH
35560: LD_VAR 0 2
35564: PPUSH
35565: LD_VAR 0 11
35569: PPUSH
35570: LD_VAR 0 12
35574: PPUSH
35575: CALL_OW 272
35579: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35580: LD_ADDR_VAR 0 10
35584: PUSH
35585: LD_VAR 0 3
35589: PPUSH
35590: LD_VAR 0 11
35594: PPUSH
35595: LD_VAR 0 12
35599: PPUSH
35600: CALL_OW 273
35604: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35605: LD_VAR 0 9
35609: PPUSH
35610: LD_VAR 0 10
35614: PPUSH
35615: CALL_OW 488
35619: PUSH
35620: LD_VAR 0 9
35624: PUSH
35625: LD_VAR 0 10
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_VAR 0 7
35638: IN
35639: NOT
35640: AND
35641: PUSH
35642: LD_VAR 0 9
35646: PPUSH
35647: LD_VAR 0 10
35651: PPUSH
35652: CALL_OW 458
35656: NOT
35657: AND
35658: IFFALSE 35700
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35660: LD_ADDR_VAR 0 7
35664: PUSH
35665: LD_VAR 0 7
35669: PPUSH
35670: LD_VAR 0 7
35674: PUSH
35675: LD_INT 1
35677: PLUS
35678: PPUSH
35679: LD_VAR 0 9
35683: PUSH
35684: LD_VAR 0 10
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PPUSH
35693: CALL_OW 1
35697: ST_TO_ADDR
35698: GO 35714
// i := i - 1 ;
35700: LD_ADDR_VAR 0 5
35704: PUSH
35705: LD_VAR 0 5
35709: PUSH
35710: LD_INT 1
35712: MINUS
35713: ST_TO_ADDR
// end ;
35714: GO 35520
35716: POP
35717: POP
// for i in tmp do
35718: LD_ADDR_VAR 0 5
35722: PUSH
35723: LD_VAR 0 7
35727: PUSH
35728: FOR_IN
35729: IFFALSE 35767
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35731: LD_VAR 0 1
35735: PPUSH
35736: LD_VAR 0 5
35740: PUSH
35741: LD_INT 1
35743: ARRAY
35744: PPUSH
35745: LD_VAR 0 5
35749: PUSH
35750: LD_INT 2
35752: ARRAY
35753: PPUSH
35754: CALL 34709 0 3
35758: NOT
35759: IFFALSE 35765
// exit ;
35761: POP
35762: POP
35763: GO 35769
35765: GO 35728
35767: POP
35768: POP
// end ; end_of_file
35769: LD_VAR 0 4
35773: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35774: LD_INT 0
35776: PPUSH
35777: PPUSH
// if exist_mode then
35778: LD_VAR 0 2
35782: IFFALSE 35807
// unit := CreateCharacter ( prefix & ident ) else
35784: LD_ADDR_VAR 0 5
35788: PUSH
35789: LD_VAR 0 3
35793: PUSH
35794: LD_VAR 0 1
35798: STR
35799: PPUSH
35800: CALL_OW 34
35804: ST_TO_ADDR
35805: GO 35822
// unit := NewCharacter ( ident ) ;
35807: LD_ADDR_VAR 0 5
35811: PUSH
35812: LD_VAR 0 1
35816: PPUSH
35817: CALL_OW 25
35821: ST_TO_ADDR
// result := unit ;
35822: LD_ADDR_VAR 0 4
35826: PUSH
35827: LD_VAR 0 5
35831: ST_TO_ADDR
// end ;
35832: LD_VAR 0 4
35836: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35837: LD_INT 0
35839: PPUSH
35840: PPUSH
// if not side or not nation then
35841: LD_VAR 0 1
35845: NOT
35846: PUSH
35847: LD_VAR 0 2
35851: NOT
35852: OR
35853: IFFALSE 35857
// exit ;
35855: GO 36621
// case nation of nation_american :
35857: LD_VAR 0 2
35861: PUSH
35862: LD_INT 1
35864: DOUBLE
35865: EQUAL
35866: IFTRUE 35870
35868: GO 36084
35870: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35871: LD_ADDR_VAR 0 4
35875: PUSH
35876: LD_INT 35
35878: PUSH
35879: LD_INT 45
35881: PUSH
35882: LD_INT 46
35884: PUSH
35885: LD_INT 47
35887: PUSH
35888: LD_INT 82
35890: PUSH
35891: LD_INT 83
35893: PUSH
35894: LD_INT 84
35896: PUSH
35897: LD_INT 85
35899: PUSH
35900: LD_INT 86
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: LD_INT 6
35911: PUSH
35912: LD_INT 15
35914: PUSH
35915: LD_INT 16
35917: PUSH
35918: LD_INT 7
35920: PUSH
35921: LD_INT 12
35923: PUSH
35924: LD_INT 13
35926: PUSH
35927: LD_INT 10
35929: PUSH
35930: LD_INT 14
35932: PUSH
35933: LD_INT 20
35935: PUSH
35936: LD_INT 21
35938: PUSH
35939: LD_INT 22
35941: PUSH
35942: LD_INT 25
35944: PUSH
35945: LD_INT 32
35947: PUSH
35948: LD_INT 27
35950: PUSH
35951: LD_INT 36
35953: PUSH
35954: LD_INT 69
35956: PUSH
35957: LD_INT 39
35959: PUSH
35960: LD_INT 34
35962: PUSH
35963: LD_INT 40
35965: PUSH
35966: LD_INT 48
35968: PUSH
35969: LD_INT 49
35971: PUSH
35972: LD_INT 50
35974: PUSH
35975: LD_INT 51
35977: PUSH
35978: LD_INT 52
35980: PUSH
35981: LD_INT 53
35983: PUSH
35984: LD_INT 54
35986: PUSH
35987: LD_INT 55
35989: PUSH
35990: LD_INT 56
35992: PUSH
35993: LD_INT 57
35995: PUSH
35996: LD_INT 58
35998: PUSH
35999: LD_INT 59
36001: PUSH
36002: LD_INT 60
36004: PUSH
36005: LD_INT 61
36007: PUSH
36008: LD_INT 62
36010: PUSH
36011: LD_INT 80
36013: PUSH
36014: LD_INT 82
36016: PUSH
36017: LD_INT 83
36019: PUSH
36020: LD_INT 84
36022: PUSH
36023: LD_INT 85
36025: PUSH
36026: LD_INT 86
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: ST_TO_ADDR
36082: GO 36545
36084: LD_INT 2
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36314
36092: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36093: LD_ADDR_VAR 0 4
36097: PUSH
36098: LD_INT 35
36100: PUSH
36101: LD_INT 45
36103: PUSH
36104: LD_INT 46
36106: PUSH
36107: LD_INT 47
36109: PUSH
36110: LD_INT 82
36112: PUSH
36113: LD_INT 83
36115: PUSH
36116: LD_INT 84
36118: PUSH
36119: LD_INT 85
36121: PUSH
36122: LD_INT 87
36124: PUSH
36125: LD_INT 70
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 11
36133: PUSH
36134: LD_INT 3
36136: PUSH
36137: LD_INT 4
36139: PUSH
36140: LD_INT 5
36142: PUSH
36143: LD_INT 6
36145: PUSH
36146: LD_INT 15
36148: PUSH
36149: LD_INT 18
36151: PUSH
36152: LD_INT 7
36154: PUSH
36155: LD_INT 17
36157: PUSH
36158: LD_INT 8
36160: PUSH
36161: LD_INT 20
36163: PUSH
36164: LD_INT 21
36166: PUSH
36167: LD_INT 22
36169: PUSH
36170: LD_INT 72
36172: PUSH
36173: LD_INT 26
36175: PUSH
36176: LD_INT 69
36178: PUSH
36179: LD_INT 39
36181: PUSH
36182: LD_INT 40
36184: PUSH
36185: LD_INT 41
36187: PUSH
36188: LD_INT 42
36190: PUSH
36191: LD_INT 43
36193: PUSH
36194: LD_INT 48
36196: PUSH
36197: LD_INT 49
36199: PUSH
36200: LD_INT 50
36202: PUSH
36203: LD_INT 51
36205: PUSH
36206: LD_INT 52
36208: PUSH
36209: LD_INT 53
36211: PUSH
36212: LD_INT 54
36214: PUSH
36215: LD_INT 55
36217: PUSH
36218: LD_INT 56
36220: PUSH
36221: LD_INT 60
36223: PUSH
36224: LD_INT 61
36226: PUSH
36227: LD_INT 62
36229: PUSH
36230: LD_INT 66
36232: PUSH
36233: LD_INT 67
36235: PUSH
36236: LD_INT 68
36238: PUSH
36239: LD_INT 81
36241: PUSH
36242: LD_INT 82
36244: PUSH
36245: LD_INT 83
36247: PUSH
36248: LD_INT 84
36250: PUSH
36251: LD_INT 85
36253: PUSH
36254: LD_INT 87
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: ST_TO_ADDR
36312: GO 36545
36314: LD_INT 3
36316: DOUBLE
36317: EQUAL
36318: IFTRUE 36322
36320: GO 36544
36322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36323: LD_ADDR_VAR 0 4
36327: PUSH
36328: LD_INT 46
36330: PUSH
36331: LD_INT 47
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 82
36342: PUSH
36343: LD_INT 83
36345: PUSH
36346: LD_INT 84
36348: PUSH
36349: LD_INT 85
36351: PUSH
36352: LD_INT 86
36354: PUSH
36355: LD_INT 11
36357: PUSH
36358: LD_INT 9
36360: PUSH
36361: LD_INT 20
36363: PUSH
36364: LD_INT 19
36366: PUSH
36367: LD_INT 21
36369: PUSH
36370: LD_INT 24
36372: PUSH
36373: LD_INT 22
36375: PUSH
36376: LD_INT 25
36378: PUSH
36379: LD_INT 28
36381: PUSH
36382: LD_INT 29
36384: PUSH
36385: LD_INT 30
36387: PUSH
36388: LD_INT 31
36390: PUSH
36391: LD_INT 37
36393: PUSH
36394: LD_INT 38
36396: PUSH
36397: LD_INT 32
36399: PUSH
36400: LD_INT 27
36402: PUSH
36403: LD_INT 33
36405: PUSH
36406: LD_INT 69
36408: PUSH
36409: LD_INT 39
36411: PUSH
36412: LD_INT 34
36414: PUSH
36415: LD_INT 40
36417: PUSH
36418: LD_INT 71
36420: PUSH
36421: LD_INT 23
36423: PUSH
36424: LD_INT 44
36426: PUSH
36427: LD_INT 48
36429: PUSH
36430: LD_INT 49
36432: PUSH
36433: LD_INT 50
36435: PUSH
36436: LD_INT 51
36438: PUSH
36439: LD_INT 52
36441: PUSH
36442: LD_INT 53
36444: PUSH
36445: LD_INT 54
36447: PUSH
36448: LD_INT 55
36450: PUSH
36451: LD_INT 56
36453: PUSH
36454: LD_INT 57
36456: PUSH
36457: LD_INT 58
36459: PUSH
36460: LD_INT 59
36462: PUSH
36463: LD_INT 63
36465: PUSH
36466: LD_INT 64
36468: PUSH
36469: LD_INT 65
36471: PUSH
36472: LD_INT 82
36474: PUSH
36475: LD_INT 83
36477: PUSH
36478: LD_INT 84
36480: PUSH
36481: LD_INT 85
36483: PUSH
36484: LD_INT 86
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
36542: GO 36545
36544: POP
// if state > - 1 and state < 3 then
36545: LD_VAR 0 3
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: GREATER
36554: PUSH
36555: LD_VAR 0 3
36559: PUSH
36560: LD_INT 3
36562: LESS
36563: AND
36564: IFFALSE 36621
// for i in result do
36566: LD_ADDR_VAR 0 5
36570: PUSH
36571: LD_VAR 0 4
36575: PUSH
36576: FOR_IN
36577: IFFALSE 36619
// if GetTech ( i , side ) <> state then
36579: LD_VAR 0 5
36583: PPUSH
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 321
36593: PUSH
36594: LD_VAR 0 3
36598: NONEQUAL
36599: IFFALSE 36617
// result := result diff i ;
36601: LD_ADDR_VAR 0 4
36605: PUSH
36606: LD_VAR 0 4
36610: PUSH
36611: LD_VAR 0 5
36615: DIFF
36616: ST_TO_ADDR
36617: GO 36576
36619: POP
36620: POP
// end ;
36621: LD_VAR 0 4
36625: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36626: LD_INT 0
36628: PPUSH
36629: PPUSH
36630: PPUSH
// result := true ;
36631: LD_ADDR_VAR 0 3
36635: PUSH
36636: LD_INT 1
36638: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36639: LD_ADDR_VAR 0 5
36643: PUSH
36644: LD_VAR 0 2
36648: PPUSH
36649: CALL_OW 480
36653: ST_TO_ADDR
// if not tmp then
36654: LD_VAR 0 5
36658: NOT
36659: IFFALSE 36663
// exit ;
36661: GO 36712
// for i in tmp do
36663: LD_ADDR_VAR 0 4
36667: PUSH
36668: LD_VAR 0 5
36672: PUSH
36673: FOR_IN
36674: IFFALSE 36710
// if GetTech ( i , side ) <> state_researched then
36676: LD_VAR 0 4
36680: PPUSH
36681: LD_VAR 0 1
36685: PPUSH
36686: CALL_OW 321
36690: PUSH
36691: LD_INT 2
36693: NONEQUAL
36694: IFFALSE 36708
// begin result := false ;
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 0
36703: ST_TO_ADDR
// exit ;
36704: POP
36705: POP
36706: GO 36712
// end ;
36708: GO 36673
36710: POP
36711: POP
// end ;
36712: LD_VAR 0 3
36716: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36717: LD_INT 0
36719: PPUSH
36720: PPUSH
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
36729: PPUSH
36730: PPUSH
36731: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36732: LD_VAR 0 1
36736: NOT
36737: PUSH
36738: LD_VAR 0 1
36742: PPUSH
36743: CALL_OW 257
36747: PUSH
36748: LD_INT 9
36750: NONEQUAL
36751: OR
36752: IFFALSE 36756
// exit ;
36754: GO 37329
// side := GetSide ( unit ) ;
36756: LD_ADDR_VAR 0 9
36760: PUSH
36761: LD_VAR 0 1
36765: PPUSH
36766: CALL_OW 255
36770: ST_TO_ADDR
// tech_space := tech_spacanom ;
36771: LD_ADDR_VAR 0 12
36775: PUSH
36776: LD_INT 29
36778: ST_TO_ADDR
// tech_time := tech_taurad ;
36779: LD_ADDR_VAR 0 13
36783: PUSH
36784: LD_INT 28
36786: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36787: LD_ADDR_VAR 0 11
36791: PUSH
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 310
36801: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36802: LD_VAR 0 11
36806: PPUSH
36807: CALL_OW 247
36811: PUSH
36812: LD_INT 2
36814: EQUAL
36815: IFFALSE 36819
// exit ;
36817: GO 37329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36819: LD_ADDR_VAR 0 8
36823: PUSH
36824: LD_INT 81
36826: PUSH
36827: LD_VAR 0 9
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: LD_INT 21
36841: PUSH
36842: LD_INT 3
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PPUSH
36857: CALL_OW 69
36861: ST_TO_ADDR
// if not tmp then
36862: LD_VAR 0 8
36866: NOT
36867: IFFALSE 36871
// exit ;
36869: GO 37329
// if in_unit then
36871: LD_VAR 0 11
36875: IFFALSE 36899
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36877: LD_ADDR_VAR 0 10
36881: PUSH
36882: LD_VAR 0 8
36886: PPUSH
36887: LD_VAR 0 11
36891: PPUSH
36892: CALL_OW 74
36896: ST_TO_ADDR
36897: GO 36919
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36899: LD_ADDR_VAR 0 10
36903: PUSH
36904: LD_VAR 0 8
36908: PPUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 74
36918: ST_TO_ADDR
// if not enemy then
36919: LD_VAR 0 10
36923: NOT
36924: IFFALSE 36928
// exit ;
36926: GO 37329
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36928: LD_VAR 0 11
36932: PUSH
36933: LD_VAR 0 11
36937: PPUSH
36938: LD_VAR 0 10
36942: PPUSH
36943: CALL_OW 296
36947: PUSH
36948: LD_INT 13
36950: GREATER
36951: AND
36952: PUSH
36953: LD_VAR 0 1
36957: PPUSH
36958: LD_VAR 0 10
36962: PPUSH
36963: CALL_OW 296
36967: PUSH
36968: LD_INT 12
36970: GREATER
36971: OR
36972: IFFALSE 36976
// exit ;
36974: GO 37329
// missile := [ 1 ] ;
36976: LD_ADDR_VAR 0 14
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: EMPTY
36985: LIST
36986: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36987: LD_VAR 0 9
36991: PPUSH
36992: LD_VAR 0 12
36996: PPUSH
36997: CALL_OW 325
37001: IFFALSE 37030
// missile := Insert ( missile , missile + 1 , 2 ) ;
37003: LD_ADDR_VAR 0 14
37007: PUSH
37008: LD_VAR 0 14
37012: PPUSH
37013: LD_VAR 0 14
37017: PUSH
37018: LD_INT 1
37020: PLUS
37021: PPUSH
37022: LD_INT 2
37024: PPUSH
37025: CALL_OW 2
37029: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37030: LD_VAR 0 9
37034: PPUSH
37035: LD_VAR 0 13
37039: PPUSH
37040: CALL_OW 325
37044: PUSH
37045: LD_VAR 0 10
37049: PPUSH
37050: CALL_OW 255
37054: PPUSH
37055: LD_VAR 0 13
37059: PPUSH
37060: CALL_OW 325
37064: NOT
37065: AND
37066: IFFALSE 37095
// missile := Insert ( missile , missile + 1 , 3 ) ;
37068: LD_ADDR_VAR 0 14
37072: PUSH
37073: LD_VAR 0 14
37077: PPUSH
37078: LD_VAR 0 14
37082: PUSH
37083: LD_INT 1
37085: PLUS
37086: PPUSH
37087: LD_INT 3
37089: PPUSH
37090: CALL_OW 2
37094: ST_TO_ADDR
// if missile < 2 then
37095: LD_VAR 0 14
37099: PUSH
37100: LD_INT 2
37102: LESS
37103: IFFALSE 37107
// exit ;
37105: GO 37329
// x := GetX ( enemy ) ;
37107: LD_ADDR_VAR 0 4
37111: PUSH
37112: LD_VAR 0 10
37116: PPUSH
37117: CALL_OW 250
37121: ST_TO_ADDR
// y := GetY ( enemy ) ;
37122: LD_ADDR_VAR 0 5
37126: PUSH
37127: LD_VAR 0 10
37131: PPUSH
37132: CALL_OW 251
37136: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37137: LD_ADDR_VAR 0 6
37141: PUSH
37142: LD_VAR 0 4
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PPUSH
37151: LD_INT 1
37153: PPUSH
37154: CALL_OW 12
37158: PLUS
37159: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37160: LD_ADDR_VAR 0 7
37164: PUSH
37165: LD_VAR 0 5
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PPUSH
37174: LD_INT 1
37176: PPUSH
37177: CALL_OW 12
37181: PLUS
37182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37183: LD_VAR 0 6
37187: PPUSH
37188: LD_VAR 0 7
37192: PPUSH
37193: CALL_OW 488
37197: NOT
37198: IFFALSE 37220
// begin _x := x ;
37200: LD_ADDR_VAR 0 6
37204: PUSH
37205: LD_VAR 0 4
37209: ST_TO_ADDR
// _y := y ;
37210: LD_ADDR_VAR 0 7
37214: PUSH
37215: LD_VAR 0 5
37219: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37220: LD_ADDR_VAR 0 3
37224: PUSH
37225: LD_INT 1
37227: PPUSH
37228: LD_VAR 0 14
37232: PPUSH
37233: CALL_OW 12
37237: ST_TO_ADDR
// case i of 1 :
37238: LD_VAR 0 3
37242: PUSH
37243: LD_INT 1
37245: DOUBLE
37246: EQUAL
37247: IFTRUE 37251
37249: GO 37268
37251: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37252: LD_VAR 0 1
37256: PPUSH
37257: LD_VAR 0 10
37261: PPUSH
37262: CALL_OW 115
37266: GO 37329
37268: LD_INT 2
37270: DOUBLE
37271: EQUAL
37272: IFTRUE 37276
37274: GO 37298
37276: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37277: LD_VAR 0 1
37281: PPUSH
37282: LD_VAR 0 6
37286: PPUSH
37287: LD_VAR 0 7
37291: PPUSH
37292: CALL_OW 153
37296: GO 37329
37298: LD_INT 3
37300: DOUBLE
37301: EQUAL
37302: IFTRUE 37306
37304: GO 37328
37306: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37307: LD_VAR 0 1
37311: PPUSH
37312: LD_VAR 0 6
37316: PPUSH
37317: LD_VAR 0 7
37321: PPUSH
37322: CALL_OW 154
37326: GO 37329
37328: POP
// end ;
37329: LD_VAR 0 2
37333: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37334: LD_INT 0
37336: PPUSH
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
// if not unit or not building then
37342: LD_VAR 0 1
37346: NOT
37347: PUSH
37348: LD_VAR 0 2
37352: NOT
37353: OR
37354: IFFALSE 37358
// exit ;
37356: GO 37516
// x := GetX ( building ) ;
37358: LD_ADDR_VAR 0 5
37362: PUSH
37363: LD_VAR 0 2
37367: PPUSH
37368: CALL_OW 250
37372: ST_TO_ADDR
// y := GetY ( building ) ;
37373: LD_ADDR_VAR 0 6
37377: PUSH
37378: LD_VAR 0 2
37382: PPUSH
37383: CALL_OW 251
37387: ST_TO_ADDR
// for i = 0 to 5 do
37388: LD_ADDR_VAR 0 4
37392: PUSH
37393: DOUBLE
37394: LD_INT 0
37396: DEC
37397: ST_TO_ADDR
37398: LD_INT 5
37400: PUSH
37401: FOR_TO
37402: IFFALSE 37514
// begin _x := ShiftX ( x , i , 3 ) ;
37404: LD_ADDR_VAR 0 7
37408: PUSH
37409: LD_VAR 0 5
37413: PPUSH
37414: LD_VAR 0 4
37418: PPUSH
37419: LD_INT 3
37421: PPUSH
37422: CALL_OW 272
37426: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37427: LD_ADDR_VAR 0 8
37431: PUSH
37432: LD_VAR 0 6
37436: PPUSH
37437: LD_VAR 0 4
37441: PPUSH
37442: LD_INT 3
37444: PPUSH
37445: CALL_OW 273
37449: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37450: LD_VAR 0 7
37454: PPUSH
37455: LD_VAR 0 8
37459: PPUSH
37460: CALL_OW 488
37464: NOT
37465: IFFALSE 37469
// continue ;
37467: GO 37401
// if HexInfo ( _x , _y ) = 0 then
37469: LD_VAR 0 7
37473: PPUSH
37474: LD_VAR 0 8
37478: PPUSH
37479: CALL_OW 428
37483: PUSH
37484: LD_INT 0
37486: EQUAL
37487: IFFALSE 37512
// begin ComMoveXY ( unit , _x , _y ) ;
37489: LD_VAR 0 1
37493: PPUSH
37494: LD_VAR 0 7
37498: PPUSH
37499: LD_VAR 0 8
37503: PPUSH
37504: CALL_OW 111
// exit ;
37508: POP
37509: POP
37510: GO 37516
// end ; end ;
37512: GO 37401
37514: POP
37515: POP
// end ;
37516: LD_VAR 0 3
37520: RET
// export function ScanBase ( side , base_area ) ; begin
37521: LD_INT 0
37523: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37524: LD_ADDR_VAR 0 3
37528: PUSH
37529: LD_VAR 0 2
37533: PPUSH
37534: LD_INT 81
37536: PUSH
37537: LD_VAR 0 1
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PPUSH
37546: CALL_OW 70
37550: ST_TO_ADDR
// end ;
37551: LD_VAR 0 3
37555: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37556: LD_INT 0
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
// result := false ;
37562: LD_ADDR_VAR 0 2
37566: PUSH
37567: LD_INT 0
37569: ST_TO_ADDR
// side := GetSide ( unit ) ;
37570: LD_ADDR_VAR 0 3
37574: PUSH
37575: LD_VAR 0 1
37579: PPUSH
37580: CALL_OW 255
37584: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37585: LD_ADDR_VAR 0 4
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL_OW 248
37599: ST_TO_ADDR
// case nat of 1 :
37600: LD_VAR 0 4
37604: PUSH
37605: LD_INT 1
37607: DOUBLE
37608: EQUAL
37609: IFTRUE 37613
37611: GO 37624
37613: POP
// tech := tech_lassight ; 2 :
37614: LD_ADDR_VAR 0 5
37618: PUSH
37619: LD_INT 12
37621: ST_TO_ADDR
37622: GO 37663
37624: LD_INT 2
37626: DOUBLE
37627: EQUAL
37628: IFTRUE 37632
37630: GO 37643
37632: POP
// tech := tech_mortar ; 3 :
37633: LD_ADDR_VAR 0 5
37637: PUSH
37638: LD_INT 41
37640: ST_TO_ADDR
37641: GO 37663
37643: LD_INT 3
37645: DOUBLE
37646: EQUAL
37647: IFTRUE 37651
37649: GO 37662
37651: POP
// tech := tech_bazooka ; end ;
37652: LD_ADDR_VAR 0 5
37656: PUSH
37657: LD_INT 44
37659: ST_TO_ADDR
37660: GO 37663
37662: POP
// if Researched ( side , tech ) then
37663: LD_VAR 0 3
37667: PPUSH
37668: LD_VAR 0 5
37672: PPUSH
37673: CALL_OW 325
37677: IFFALSE 37704
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37679: LD_ADDR_VAR 0 2
37683: PUSH
37684: LD_INT 5
37686: PUSH
37687: LD_INT 8
37689: PUSH
37690: LD_INT 9
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: PUSH
37698: LD_VAR 0 4
37702: ARRAY
37703: ST_TO_ADDR
// end ;
37704: LD_VAR 0 2
37708: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37709: LD_INT 0
37711: PPUSH
37712: PPUSH
37713: PPUSH
// if not mines then
37714: LD_VAR 0 2
37718: NOT
37719: IFFALSE 37723
// exit ;
37721: GO 37867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37723: LD_ADDR_VAR 0 5
37727: PUSH
37728: LD_INT 81
37730: PUSH
37731: LD_VAR 0 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 3
37742: PUSH
37743: LD_INT 21
37745: PUSH
37746: LD_INT 3
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PPUSH
37761: CALL_OW 69
37765: ST_TO_ADDR
// for i in mines do
37766: LD_ADDR_VAR 0 4
37770: PUSH
37771: LD_VAR 0 2
37775: PUSH
37776: FOR_IN
37777: IFFALSE 37865
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37779: LD_VAR 0 4
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: PPUSH
37788: LD_VAR 0 4
37792: PUSH
37793: LD_INT 2
37795: ARRAY
37796: PPUSH
37797: CALL_OW 458
37801: NOT
37802: IFFALSE 37806
// continue ;
37804: GO 37776
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37806: LD_VAR 0 4
37810: PUSH
37811: LD_INT 1
37813: ARRAY
37814: PPUSH
37815: LD_VAR 0 4
37819: PUSH
37820: LD_INT 2
37822: ARRAY
37823: PPUSH
37824: CALL_OW 428
37828: PUSH
37829: LD_VAR 0 5
37833: IN
37834: IFFALSE 37863
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37836: LD_VAR 0 4
37840: PUSH
37841: LD_INT 1
37843: ARRAY
37844: PPUSH
37845: LD_VAR 0 4
37849: PUSH
37850: LD_INT 2
37852: ARRAY
37853: PPUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 456
// end ;
37863: GO 37776
37865: POP
37866: POP
// end ;
37867: LD_VAR 0 3
37871: RET
// export function Count ( array ) ; var i ; begin
37872: LD_INT 0
37874: PPUSH
37875: PPUSH
// result := 0 ;
37876: LD_ADDR_VAR 0 2
37880: PUSH
37881: LD_INT 0
37883: ST_TO_ADDR
// for i in array do
37884: LD_ADDR_VAR 0 3
37888: PUSH
37889: LD_VAR 0 1
37893: PUSH
37894: FOR_IN
37895: IFFALSE 37919
// if i then
37897: LD_VAR 0 3
37901: IFFALSE 37917
// result := result + 1 ;
37903: LD_ADDR_VAR 0 2
37907: PUSH
37908: LD_VAR 0 2
37912: PUSH
37913: LD_INT 1
37915: PLUS
37916: ST_TO_ADDR
37917: GO 37894
37919: POP
37920: POP
// end ;
37921: LD_VAR 0 2
37925: RET
// export function IsEmpty ( building ) ; begin
37926: LD_INT 0
37928: PPUSH
// if not building then
37929: LD_VAR 0 1
37933: NOT
37934: IFFALSE 37938
// exit ;
37936: GO 37981
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37938: LD_ADDR_VAR 0 2
37942: PUSH
37943: LD_VAR 0 1
37947: PUSH
37948: LD_INT 22
37950: PUSH
37951: LD_VAR 0 1
37955: PPUSH
37956: CALL_OW 255
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 58
37967: PUSH
37968: EMPTY
37969: LIST
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PPUSH
37975: CALL_OW 69
37979: IN
37980: ST_TO_ADDR
// end ;
37981: LD_VAR 0 2
37985: RET
// export function IsNotFull ( building ) ; begin
37986: LD_INT 0
37988: PPUSH
// if not building then
37989: LD_VAR 0 1
37993: NOT
37994: IFFALSE 37998
// exit ;
37996: GO 38017
// result := UnitsInside ( building ) < 6 ;
37998: LD_ADDR_VAR 0 2
38002: PUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 313
38012: PUSH
38013: LD_INT 6
38015: LESS
38016: ST_TO_ADDR
// end ;
38017: LD_VAR 0 2
38021: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38022: LD_INT 0
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
// tmp := [ ] ;
38028: LD_ADDR_VAR 0 3
38032: PUSH
38033: EMPTY
38034: ST_TO_ADDR
// list := [ ] ;
38035: LD_ADDR_VAR 0 5
38039: PUSH
38040: EMPTY
38041: ST_TO_ADDR
// for i = 16 to 25 do
38042: LD_ADDR_VAR 0 4
38046: PUSH
38047: DOUBLE
38048: LD_INT 16
38050: DEC
38051: ST_TO_ADDR
38052: LD_INT 25
38054: PUSH
38055: FOR_TO
38056: IFFALSE 38129
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_VAR 0 3
38067: PUSH
38068: LD_INT 22
38070: PUSH
38071: LD_VAR 0 1
38075: PPUSH
38076: CALL_OW 255
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 91
38087: PUSH
38088: LD_VAR 0 1
38092: PUSH
38093: LD_INT 6
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 30
38103: PUSH
38104: LD_VAR 0 4
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: PPUSH
38121: CALL_OW 69
38125: ADD
38126: ST_TO_ADDR
38127: GO 38055
38129: POP
38130: POP
// for i = 1 to tmp do
38131: LD_ADDR_VAR 0 4
38135: PUSH
38136: DOUBLE
38137: LD_INT 1
38139: DEC
38140: ST_TO_ADDR
38141: LD_VAR 0 3
38145: PUSH
38146: FOR_TO
38147: IFFALSE 38235
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38149: LD_ADDR_VAR 0 5
38153: PUSH
38154: LD_VAR 0 5
38158: PUSH
38159: LD_VAR 0 3
38163: PUSH
38164: LD_VAR 0 4
38168: ARRAY
38169: PPUSH
38170: CALL_OW 266
38174: PUSH
38175: LD_VAR 0 3
38179: PUSH
38180: LD_VAR 0 4
38184: ARRAY
38185: PPUSH
38186: CALL_OW 250
38190: PUSH
38191: LD_VAR 0 3
38195: PUSH
38196: LD_VAR 0 4
38200: ARRAY
38201: PPUSH
38202: CALL_OW 251
38206: PUSH
38207: LD_VAR 0 3
38211: PUSH
38212: LD_VAR 0 4
38216: ARRAY
38217: PPUSH
38218: CALL_OW 254
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: PUSH
38229: EMPTY
38230: LIST
38231: ADD
38232: ST_TO_ADDR
38233: GO 38146
38235: POP
38236: POP
// result := list ;
38237: LD_ADDR_VAR 0 2
38241: PUSH
38242: LD_VAR 0 5
38246: ST_TO_ADDR
// end ;
38247: LD_VAR 0 2
38251: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38252: LD_INT 0
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
38260: PPUSH
// if not factory then
38261: LD_VAR 0 1
38265: NOT
38266: IFFALSE 38270
// exit ;
38268: GO 38863
// if control = control_apeman then
38270: LD_VAR 0 4
38274: PUSH
38275: LD_INT 5
38277: EQUAL
38278: IFFALSE 38387
// begin tmp := UnitsInside ( factory ) ;
38280: LD_ADDR_VAR 0 8
38284: PUSH
38285: LD_VAR 0 1
38289: PPUSH
38290: CALL_OW 313
38294: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38295: LD_VAR 0 8
38299: PPUSH
38300: LD_INT 25
38302: PUSH
38303: LD_INT 12
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PPUSH
38310: CALL_OW 72
38314: NOT
38315: IFFALSE 38325
// control := control_manual ;
38317: LD_ADDR_VAR 0 4
38321: PUSH
38322: LD_INT 1
38324: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38325: LD_ADDR_VAR 0 8
38329: PUSH
38330: LD_VAR 0 1
38334: PPUSH
38335: CALL 38022 0 1
38339: ST_TO_ADDR
// if tmp then
38340: LD_VAR 0 8
38344: IFFALSE 38387
// begin for i in tmp do
38346: LD_ADDR_VAR 0 7
38350: PUSH
38351: LD_VAR 0 8
38355: PUSH
38356: FOR_IN
38357: IFFALSE 38385
// if i [ 1 ] = b_ext_radio then
38359: LD_VAR 0 7
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: PUSH
38368: LD_INT 22
38370: EQUAL
38371: IFFALSE 38383
// begin control := control_remote ;
38373: LD_ADDR_VAR 0 4
38377: PUSH
38378: LD_INT 2
38380: ST_TO_ADDR
// break ;
38381: GO 38385
// end ;
38383: GO 38356
38385: POP
38386: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38387: LD_VAR 0 1
38391: PPUSH
38392: LD_VAR 0 2
38396: PPUSH
38397: LD_VAR 0 3
38401: PPUSH
38402: LD_VAR 0 4
38406: PPUSH
38407: LD_VAR 0 5
38411: PPUSH
38412: CALL_OW 448
38416: IFFALSE 38451
// begin result := [ chassis , engine , control , weapon ] ;
38418: LD_ADDR_VAR 0 6
38422: PUSH
38423: LD_VAR 0 2
38427: PUSH
38428: LD_VAR 0 3
38432: PUSH
38433: LD_VAR 0 4
38437: PUSH
38438: LD_VAR 0 5
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: ST_TO_ADDR
// exit ;
38449: GO 38863
// end ; _chassis := AvailableChassisList ( factory ) ;
38451: LD_ADDR_VAR 0 9
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 475
38465: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38466: LD_ADDR_VAR 0 11
38470: PUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 476
38480: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38481: LD_ADDR_VAR 0 12
38485: PUSH
38486: LD_VAR 0 1
38490: PPUSH
38491: CALL_OW 477
38495: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38496: LD_ADDR_VAR 0 10
38500: PUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: CALL_OW 478
38510: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38511: LD_VAR 0 9
38515: NOT
38516: PUSH
38517: LD_VAR 0 11
38521: NOT
38522: OR
38523: PUSH
38524: LD_VAR 0 12
38528: NOT
38529: OR
38530: PUSH
38531: LD_VAR 0 10
38535: NOT
38536: OR
38537: IFFALSE 38572
// begin result := [ chassis , engine , control , weapon ] ;
38539: LD_ADDR_VAR 0 6
38543: PUSH
38544: LD_VAR 0 2
38548: PUSH
38549: LD_VAR 0 3
38553: PUSH
38554: LD_VAR 0 4
38558: PUSH
38559: LD_VAR 0 5
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: ST_TO_ADDR
// exit ;
38570: GO 38863
// end ; if not chassis in _chassis then
38572: LD_VAR 0 2
38576: PUSH
38577: LD_VAR 0 9
38581: IN
38582: NOT
38583: IFFALSE 38609
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38585: LD_ADDR_VAR 0 2
38589: PUSH
38590: LD_VAR 0 9
38594: PUSH
38595: LD_INT 1
38597: PPUSH
38598: LD_VAR 0 9
38602: PPUSH
38603: CALL_OW 12
38607: ARRAY
38608: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38609: LD_VAR 0 2
38613: PPUSH
38614: LD_VAR 0 3
38618: PPUSH
38619: CALL 38868 0 2
38623: NOT
38624: IFFALSE 38683
// repeat engine := _engine [ 1 ] ;
38626: LD_ADDR_VAR 0 3
38630: PUSH
38631: LD_VAR 0 11
38635: PUSH
38636: LD_INT 1
38638: ARRAY
38639: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38640: LD_ADDR_VAR 0 11
38644: PUSH
38645: LD_VAR 0 11
38649: PPUSH
38650: LD_INT 1
38652: PPUSH
38653: CALL_OW 3
38657: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38658: LD_VAR 0 2
38662: PPUSH
38663: LD_VAR 0 3
38667: PPUSH
38668: CALL 38868 0 2
38672: PUSH
38673: LD_VAR 0 11
38677: PUSH
38678: EMPTY
38679: EQUAL
38680: OR
38681: IFFALSE 38626
// if not control in _control then
38683: LD_VAR 0 4
38687: PUSH
38688: LD_VAR 0 12
38692: IN
38693: NOT
38694: IFFALSE 38720
// control := _control [ rand ( 1 , _control ) ] ;
38696: LD_ADDR_VAR 0 4
38700: PUSH
38701: LD_VAR 0 12
38705: PUSH
38706: LD_INT 1
38708: PPUSH
38709: LD_VAR 0 12
38713: PPUSH
38714: CALL_OW 12
38718: ARRAY
38719: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38720: LD_VAR 0 2
38724: PPUSH
38725: LD_VAR 0 5
38729: PPUSH
38730: CALL 39088 0 2
38734: NOT
38735: IFFALSE 38794
// repeat weapon := _weapon [ 1 ] ;
38737: LD_ADDR_VAR 0 5
38741: PUSH
38742: LD_VAR 0 10
38746: PUSH
38747: LD_INT 1
38749: ARRAY
38750: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38751: LD_ADDR_VAR 0 10
38755: PUSH
38756: LD_VAR 0 10
38760: PPUSH
38761: LD_INT 1
38763: PPUSH
38764: CALL_OW 3
38768: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38769: LD_VAR 0 2
38773: PPUSH
38774: LD_VAR 0 5
38778: PPUSH
38779: CALL 39088 0 2
38783: PUSH
38784: LD_VAR 0 10
38788: PUSH
38789: EMPTY
38790: EQUAL
38791: OR
38792: IFFALSE 38737
// result := [ ] ;
38794: LD_ADDR_VAR 0 6
38798: PUSH
38799: EMPTY
38800: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38801: LD_VAR 0 1
38805: PPUSH
38806: LD_VAR 0 2
38810: PPUSH
38811: LD_VAR 0 3
38815: PPUSH
38816: LD_VAR 0 4
38820: PPUSH
38821: LD_VAR 0 5
38825: PPUSH
38826: CALL_OW 448
38830: IFFALSE 38863
// result := [ chassis , engine , control , weapon ] ;
38832: LD_ADDR_VAR 0 6
38836: PUSH
38837: LD_VAR 0 2
38841: PUSH
38842: LD_VAR 0 3
38846: PUSH
38847: LD_VAR 0 4
38851: PUSH
38852: LD_VAR 0 5
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: ST_TO_ADDR
// end ;
38863: LD_VAR 0 6
38867: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38868: LD_INT 0
38870: PPUSH
// if not chassis or not engine then
38871: LD_VAR 0 1
38875: NOT
38876: PUSH
38877: LD_VAR 0 2
38881: NOT
38882: OR
38883: IFFALSE 38887
// exit ;
38885: GO 39083
// case engine of engine_solar :
38887: LD_VAR 0 2
38891: PUSH
38892: LD_INT 2
38894: DOUBLE
38895: EQUAL
38896: IFTRUE 38900
38898: GO 38938
38900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38901: LD_ADDR_VAR 0 3
38905: PUSH
38906: LD_INT 11
38908: PUSH
38909: LD_INT 12
38911: PUSH
38912: LD_INT 13
38914: PUSH
38915: LD_INT 14
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: ST_TO_ADDR
38936: GO 39067
38938: LD_INT 1
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 39008
38946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38947: LD_ADDR_VAR 0 3
38951: PUSH
38952: LD_INT 11
38954: PUSH
38955: LD_INT 12
38957: PUSH
38958: LD_INT 13
38960: PUSH
38961: LD_INT 14
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: LD_INT 4
38975: PUSH
38976: LD_INT 5
38978: PUSH
38979: LD_INT 21
38981: PUSH
38982: LD_INT 23
38984: PUSH
38985: LD_INT 22
38987: PUSH
38988: LD_INT 24
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: ST_TO_ADDR
39006: GO 39067
39008: LD_INT 3
39010: DOUBLE
39011: EQUAL
39012: IFTRUE 39016
39014: GO 39066
39016: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39017: LD_ADDR_VAR 0 3
39021: PUSH
39022: LD_INT 13
39024: PUSH
39025: LD_INT 14
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: LD_INT 4
39036: PUSH
39037: LD_INT 5
39039: PUSH
39040: LD_INT 21
39042: PUSH
39043: LD_INT 22
39045: PUSH
39046: LD_INT 23
39048: PUSH
39049: LD_INT 24
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: ST_TO_ADDR
39064: GO 39067
39066: POP
// result := ( chassis in result ) ;
39067: LD_ADDR_VAR 0 3
39071: PUSH
39072: LD_VAR 0 1
39076: PUSH
39077: LD_VAR 0 3
39081: IN
39082: ST_TO_ADDR
// end ;
39083: LD_VAR 0 3
39087: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39088: LD_INT 0
39090: PPUSH
// if not chassis or not weapon then
39091: LD_VAR 0 1
39095: NOT
39096: PUSH
39097: LD_VAR 0 2
39101: NOT
39102: OR
39103: IFFALSE 39107
// exit ;
39105: GO 40133
// case weapon of us_machine_gun :
39107: LD_VAR 0 2
39111: PUSH
39112: LD_INT 2
39114: DOUBLE
39115: EQUAL
39116: IFTRUE 39120
39118: GO 39150
39120: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39121: LD_ADDR_VAR 0 3
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: LD_INT 3
39134: PUSH
39135: LD_INT 4
39137: PUSH
39138: LD_INT 5
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: ST_TO_ADDR
39148: GO 40117
39150: LD_INT 3
39152: DOUBLE
39153: EQUAL
39154: IFTRUE 39158
39156: GO 39188
39158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39159: LD_ADDR_VAR 0 3
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: LD_INT 4
39175: PUSH
39176: LD_INT 5
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: ST_TO_ADDR
39186: GO 40117
39188: LD_INT 11
39190: DOUBLE
39191: EQUAL
39192: IFTRUE 39196
39194: GO 39226
39196: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39197: LD_ADDR_VAR 0 3
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: LD_INT 3
39210: PUSH
39211: LD_INT 4
39213: PUSH
39214: LD_INT 5
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: ST_TO_ADDR
39224: GO 40117
39226: LD_INT 4
39228: DOUBLE
39229: EQUAL
39230: IFTRUE 39234
39232: GO 39260
39234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39235: LD_ADDR_VAR 0 3
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: LD_INT 4
39248: PUSH
39249: LD_INT 5
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: ST_TO_ADDR
39258: GO 40117
39260: LD_INT 5
39262: DOUBLE
39263: EQUAL
39264: IFTRUE 39268
39266: GO 39294
39268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: LD_INT 4
39282: PUSH
39283: LD_INT 5
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
39292: GO 40117
39294: LD_INT 9
39296: DOUBLE
39297: EQUAL
39298: IFTRUE 39302
39300: GO 39328
39302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: LD_INT 4
39316: PUSH
39317: LD_INT 5
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: ST_TO_ADDR
39326: GO 40117
39328: LD_INT 7
39330: DOUBLE
39331: EQUAL
39332: IFTRUE 39336
39334: GO 39362
39336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: LD_INT 4
39350: PUSH
39351: LD_INT 5
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
39360: GO 40117
39362: LD_INT 12
39364: DOUBLE
39365: EQUAL
39366: IFTRUE 39370
39368: GO 39396
39370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 3
39381: PUSH
39382: LD_INT 4
39384: PUSH
39385: LD_INT 5
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
39394: GO 40117
39396: LD_INT 13
39398: DOUBLE
39399: EQUAL
39400: IFTRUE 39404
39402: GO 39430
39404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39405: LD_ADDR_VAR 0 3
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: LD_INT 4
39418: PUSH
39419: LD_INT 5
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
39428: GO 40117
39430: LD_INT 14
39432: DOUBLE
39433: EQUAL
39434: IFTRUE 39438
39436: GO 39456
39438: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39439: LD_ADDR_VAR 0 3
39443: PUSH
39444: LD_INT 4
39446: PUSH
39447: LD_INT 5
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: ST_TO_ADDR
39454: GO 40117
39456: LD_INT 6
39458: DOUBLE
39459: EQUAL
39460: IFTRUE 39464
39462: GO 39482
39464: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39465: LD_ADDR_VAR 0 3
39469: PUSH
39470: LD_INT 4
39472: PUSH
39473: LD_INT 5
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: ST_TO_ADDR
39480: GO 40117
39482: LD_INT 10
39484: DOUBLE
39485: EQUAL
39486: IFTRUE 39490
39488: GO 39508
39490: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39491: LD_ADDR_VAR 0 3
39495: PUSH
39496: LD_INT 4
39498: PUSH
39499: LD_INT 5
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: ST_TO_ADDR
39506: GO 40117
39508: LD_INT 22
39510: DOUBLE
39511: EQUAL
39512: IFTRUE 39516
39514: GO 39542
39516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39517: LD_ADDR_VAR 0 3
39521: PUSH
39522: LD_INT 11
39524: PUSH
39525: LD_INT 12
39527: PUSH
39528: LD_INT 13
39530: PUSH
39531: LD_INT 14
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
39540: GO 40117
39542: LD_INT 23
39544: DOUBLE
39545: EQUAL
39546: IFTRUE 39550
39548: GO 39576
39550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39551: LD_ADDR_VAR 0 3
39555: PUSH
39556: LD_INT 11
39558: PUSH
39559: LD_INT 12
39561: PUSH
39562: LD_INT 13
39564: PUSH
39565: LD_INT 14
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: ST_TO_ADDR
39574: GO 40117
39576: LD_INT 24
39578: DOUBLE
39579: EQUAL
39580: IFTRUE 39584
39582: GO 39610
39584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39585: LD_ADDR_VAR 0 3
39589: PUSH
39590: LD_INT 11
39592: PUSH
39593: LD_INT 12
39595: PUSH
39596: LD_INT 13
39598: PUSH
39599: LD_INT 14
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
39608: GO 40117
39610: LD_INT 30
39612: DOUBLE
39613: EQUAL
39614: IFTRUE 39618
39616: GO 39644
39618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39619: LD_ADDR_VAR 0 3
39623: PUSH
39624: LD_INT 11
39626: PUSH
39627: LD_INT 12
39629: PUSH
39630: LD_INT 13
39632: PUSH
39633: LD_INT 14
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: ST_TO_ADDR
39642: GO 40117
39644: LD_INT 25
39646: DOUBLE
39647: EQUAL
39648: IFTRUE 39652
39650: GO 39670
39652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39653: LD_ADDR_VAR 0 3
39657: PUSH
39658: LD_INT 13
39660: PUSH
39661: LD_INT 14
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: ST_TO_ADDR
39668: GO 40117
39670: LD_INT 27
39672: DOUBLE
39673: EQUAL
39674: IFTRUE 39678
39676: GO 39696
39678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39679: LD_ADDR_VAR 0 3
39683: PUSH
39684: LD_INT 13
39686: PUSH
39687: LD_INT 14
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: ST_TO_ADDR
39694: GO 40117
39696: LD_INT 28
39698: DOUBLE
39699: EQUAL
39700: IFTRUE 39704
39702: GO 39722
39704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39705: LD_ADDR_VAR 0 3
39709: PUSH
39710: LD_INT 13
39712: PUSH
39713: LD_INT 14
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: ST_TO_ADDR
39720: GO 40117
39722: LD_INT 29
39724: DOUBLE
39725: EQUAL
39726: IFTRUE 39730
39728: GO 39748
39730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39731: LD_ADDR_VAR 0 3
39735: PUSH
39736: LD_INT 13
39738: PUSH
39739: LD_INT 14
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: ST_TO_ADDR
39746: GO 40117
39748: LD_INT 31
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39756
39754: GO 39774
39756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39757: LD_ADDR_VAR 0 3
39761: PUSH
39762: LD_INT 13
39764: PUSH
39765: LD_INT 14
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: ST_TO_ADDR
39772: GO 40117
39774: LD_INT 26
39776: DOUBLE
39777: EQUAL
39778: IFTRUE 39782
39780: GO 39800
39782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39783: LD_ADDR_VAR 0 3
39787: PUSH
39788: LD_INT 13
39790: PUSH
39791: LD_INT 14
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: ST_TO_ADDR
39798: GO 40117
39800: LD_INT 42
39802: DOUBLE
39803: EQUAL
39804: IFTRUE 39808
39806: GO 39834
39808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39809: LD_ADDR_VAR 0 3
39813: PUSH
39814: LD_INT 21
39816: PUSH
39817: LD_INT 22
39819: PUSH
39820: LD_INT 23
39822: PUSH
39823: LD_INT 24
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: ST_TO_ADDR
39832: GO 40117
39834: LD_INT 43
39836: DOUBLE
39837: EQUAL
39838: IFTRUE 39842
39840: GO 39868
39842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39843: LD_ADDR_VAR 0 3
39847: PUSH
39848: LD_INT 21
39850: PUSH
39851: LD_INT 22
39853: PUSH
39854: LD_INT 23
39856: PUSH
39857: LD_INT 24
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
39866: GO 40117
39868: LD_INT 44
39870: DOUBLE
39871: EQUAL
39872: IFTRUE 39876
39874: GO 39902
39876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39877: LD_ADDR_VAR 0 3
39881: PUSH
39882: LD_INT 21
39884: PUSH
39885: LD_INT 22
39887: PUSH
39888: LD_INT 23
39890: PUSH
39891: LD_INT 24
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: ST_TO_ADDR
39900: GO 40117
39902: LD_INT 45
39904: DOUBLE
39905: EQUAL
39906: IFTRUE 39910
39908: GO 39936
39910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39911: LD_ADDR_VAR 0 3
39915: PUSH
39916: LD_INT 21
39918: PUSH
39919: LD_INT 22
39921: PUSH
39922: LD_INT 23
39924: PUSH
39925: LD_INT 24
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: ST_TO_ADDR
39934: GO 40117
39936: LD_INT 49
39938: DOUBLE
39939: EQUAL
39940: IFTRUE 39944
39942: GO 39970
39944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39945: LD_ADDR_VAR 0 3
39949: PUSH
39950: LD_INT 21
39952: PUSH
39953: LD_INT 22
39955: PUSH
39956: LD_INT 23
39958: PUSH
39959: LD_INT 24
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
39968: GO 40117
39970: LD_INT 51
39972: DOUBLE
39973: EQUAL
39974: IFTRUE 39978
39976: GO 40004
39978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_INT 21
39986: PUSH
39987: LD_INT 22
39989: PUSH
39990: LD_INT 23
39992: PUSH
39993: LD_INT 24
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
40002: GO 40117
40004: LD_INT 52
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40012
40010: GO 40038
40012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: LD_INT 21
40020: PUSH
40021: LD_INT 22
40023: PUSH
40024: LD_INT 23
40026: PUSH
40027: LD_INT 24
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: ST_TO_ADDR
40036: GO 40117
40038: LD_INT 53
40040: DOUBLE
40041: EQUAL
40042: IFTRUE 40046
40044: GO 40064
40046: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_INT 23
40054: PUSH
40055: LD_INT 24
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: ST_TO_ADDR
40062: GO 40117
40064: LD_INT 46
40066: DOUBLE
40067: EQUAL
40068: IFTRUE 40072
40070: GO 40090
40072: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40073: LD_ADDR_VAR 0 3
40077: PUSH
40078: LD_INT 23
40080: PUSH
40081: LD_INT 24
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: ST_TO_ADDR
40088: GO 40117
40090: LD_INT 47
40092: DOUBLE
40093: EQUAL
40094: IFTRUE 40098
40096: GO 40116
40098: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40099: LD_ADDR_VAR 0 3
40103: PUSH
40104: LD_INT 23
40106: PUSH
40107: LD_INT 24
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: ST_TO_ADDR
40114: GO 40117
40116: POP
// result := ( chassis in result ) ;
40117: LD_ADDR_VAR 0 3
40121: PUSH
40122: LD_VAR 0 1
40126: PUSH
40127: LD_VAR 0 3
40131: IN
40132: ST_TO_ADDR
// end ;
40133: LD_VAR 0 3
40137: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40138: LD_INT 0
40140: PPUSH
40141: PPUSH
40142: PPUSH
40143: PPUSH
40144: PPUSH
40145: PPUSH
40146: PPUSH
// result := array ;
40147: LD_ADDR_VAR 0 5
40151: PUSH
40152: LD_VAR 0 1
40156: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40157: LD_VAR 0 1
40161: NOT
40162: PUSH
40163: LD_VAR 0 2
40167: NOT
40168: OR
40169: PUSH
40170: LD_VAR 0 3
40174: NOT
40175: OR
40176: PUSH
40177: LD_VAR 0 2
40181: PUSH
40182: LD_VAR 0 1
40186: GREATER
40187: OR
40188: PUSH
40189: LD_VAR 0 3
40193: PUSH
40194: LD_VAR 0 1
40198: GREATER
40199: OR
40200: IFFALSE 40204
// exit ;
40202: GO 40500
// if direction then
40204: LD_VAR 0 4
40208: IFFALSE 40272
// begin d := 1 ;
40210: LD_ADDR_VAR 0 9
40214: PUSH
40215: LD_INT 1
40217: ST_TO_ADDR
// if i_from > i_to then
40218: LD_VAR 0 2
40222: PUSH
40223: LD_VAR 0 3
40227: GREATER
40228: IFFALSE 40254
// length := ( array - i_from ) + i_to else
40230: LD_ADDR_VAR 0 11
40234: PUSH
40235: LD_VAR 0 1
40239: PUSH
40240: LD_VAR 0 2
40244: MINUS
40245: PUSH
40246: LD_VAR 0 3
40250: PLUS
40251: ST_TO_ADDR
40252: GO 40270
// length := i_to - i_from ;
40254: LD_ADDR_VAR 0 11
40258: PUSH
40259: LD_VAR 0 3
40263: PUSH
40264: LD_VAR 0 2
40268: MINUS
40269: ST_TO_ADDR
// end else
40270: GO 40333
// begin d := - 1 ;
40272: LD_ADDR_VAR 0 9
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: ST_TO_ADDR
// if i_from > i_to then
40281: LD_VAR 0 2
40285: PUSH
40286: LD_VAR 0 3
40290: GREATER
40291: IFFALSE 40311
// length := i_from - i_to else
40293: LD_ADDR_VAR 0 11
40297: PUSH
40298: LD_VAR 0 2
40302: PUSH
40303: LD_VAR 0 3
40307: MINUS
40308: ST_TO_ADDR
40309: GO 40333
// length := ( array - i_to ) + i_from ;
40311: LD_ADDR_VAR 0 11
40315: PUSH
40316: LD_VAR 0 1
40320: PUSH
40321: LD_VAR 0 3
40325: MINUS
40326: PUSH
40327: LD_VAR 0 2
40331: PLUS
40332: ST_TO_ADDR
// end ; if not length then
40333: LD_VAR 0 11
40337: NOT
40338: IFFALSE 40342
// exit ;
40340: GO 40500
// tmp := array ;
40342: LD_ADDR_VAR 0 10
40346: PUSH
40347: LD_VAR 0 1
40351: ST_TO_ADDR
// for i = 1 to length do
40352: LD_ADDR_VAR 0 6
40356: PUSH
40357: DOUBLE
40358: LD_INT 1
40360: DEC
40361: ST_TO_ADDR
40362: LD_VAR 0 11
40366: PUSH
40367: FOR_TO
40368: IFFALSE 40488
// begin for j = 1 to array do
40370: LD_ADDR_VAR 0 7
40374: PUSH
40375: DOUBLE
40376: LD_INT 1
40378: DEC
40379: ST_TO_ADDR
40380: LD_VAR 0 1
40384: PUSH
40385: FOR_TO
40386: IFFALSE 40474
// begin k := j + d ;
40388: LD_ADDR_VAR 0 8
40392: PUSH
40393: LD_VAR 0 7
40397: PUSH
40398: LD_VAR 0 9
40402: PLUS
40403: ST_TO_ADDR
// if k > array then
40404: LD_VAR 0 8
40408: PUSH
40409: LD_VAR 0 1
40413: GREATER
40414: IFFALSE 40424
// k := 1 ;
40416: LD_ADDR_VAR 0 8
40420: PUSH
40421: LD_INT 1
40423: ST_TO_ADDR
// if not k then
40424: LD_VAR 0 8
40428: NOT
40429: IFFALSE 40441
// k := array ;
40431: LD_ADDR_VAR 0 8
40435: PUSH
40436: LD_VAR 0 1
40440: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40441: LD_ADDR_VAR 0 10
40445: PUSH
40446: LD_VAR 0 10
40450: PPUSH
40451: LD_VAR 0 8
40455: PPUSH
40456: LD_VAR 0 1
40460: PUSH
40461: LD_VAR 0 7
40465: ARRAY
40466: PPUSH
40467: CALL_OW 1
40471: ST_TO_ADDR
// end ;
40472: GO 40385
40474: POP
40475: POP
// array := tmp ;
40476: LD_ADDR_VAR 0 1
40480: PUSH
40481: LD_VAR 0 10
40485: ST_TO_ADDR
// end ;
40486: GO 40367
40488: POP
40489: POP
// result := array ;
40490: LD_ADDR_VAR 0 5
40494: PUSH
40495: LD_VAR 0 1
40499: ST_TO_ADDR
// end ;
40500: LD_VAR 0 5
40504: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40505: LD_INT 0
40507: PPUSH
40508: PPUSH
// result := 0 ;
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: LD_INT 0
40516: ST_TO_ADDR
// if not array or not value in array then
40517: LD_VAR 0 1
40521: NOT
40522: PUSH
40523: LD_VAR 0 2
40527: PUSH
40528: LD_VAR 0 1
40532: IN
40533: NOT
40534: OR
40535: IFFALSE 40539
// exit ;
40537: GO 40593
// for i = 1 to array do
40539: LD_ADDR_VAR 0 4
40543: PUSH
40544: DOUBLE
40545: LD_INT 1
40547: DEC
40548: ST_TO_ADDR
40549: LD_VAR 0 1
40553: PUSH
40554: FOR_TO
40555: IFFALSE 40591
// if value = array [ i ] then
40557: LD_VAR 0 2
40561: PUSH
40562: LD_VAR 0 1
40566: PUSH
40567: LD_VAR 0 4
40571: ARRAY
40572: EQUAL
40573: IFFALSE 40589
// begin result := i ;
40575: LD_ADDR_VAR 0 3
40579: PUSH
40580: LD_VAR 0 4
40584: ST_TO_ADDR
// exit ;
40585: POP
40586: POP
40587: GO 40593
// end ;
40589: GO 40554
40591: POP
40592: POP
// end ;
40593: LD_VAR 0 3
40597: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40598: LD_INT 0
40600: PPUSH
// vc_chassis := chassis ;
40601: LD_ADDR_OWVAR 37
40605: PUSH
40606: LD_VAR 0 1
40610: ST_TO_ADDR
// vc_engine := engine ;
40611: LD_ADDR_OWVAR 39
40615: PUSH
40616: LD_VAR 0 2
40620: ST_TO_ADDR
// vc_control := control ;
40621: LD_ADDR_OWVAR 38
40625: PUSH
40626: LD_VAR 0 3
40630: ST_TO_ADDR
// vc_weapon := weapon ;
40631: LD_ADDR_OWVAR 40
40635: PUSH
40636: LD_VAR 0 4
40640: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40641: LD_ADDR_OWVAR 41
40645: PUSH
40646: LD_VAR 0 5
40650: ST_TO_ADDR
// end ;
40651: LD_VAR 0 6
40655: RET
// export function WantPlant ( unit ) ; var task ; begin
40656: LD_INT 0
40658: PPUSH
40659: PPUSH
// result := false ;
40660: LD_ADDR_VAR 0 2
40664: PUSH
40665: LD_INT 0
40667: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40668: LD_ADDR_VAR 0 3
40672: PUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL_OW 437
40682: ST_TO_ADDR
// if task then
40683: LD_VAR 0 3
40687: IFFALSE 40715
// if task [ 1 ] [ 1 ] = p then
40689: LD_VAR 0 3
40693: PUSH
40694: LD_INT 1
40696: ARRAY
40697: PUSH
40698: LD_INT 1
40700: ARRAY
40701: PUSH
40702: LD_STRING p
40704: EQUAL
40705: IFFALSE 40715
// result := true ;
40707: LD_ADDR_VAR 0 2
40711: PUSH
40712: LD_INT 1
40714: ST_TO_ADDR
// end ;
40715: LD_VAR 0 2
40719: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40720: LD_INT 0
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
// if pos < 1 then
40726: LD_VAR 0 2
40730: PUSH
40731: LD_INT 1
40733: LESS
40734: IFFALSE 40738
// exit ;
40736: GO 41041
// if pos = 1 then
40738: LD_VAR 0 2
40742: PUSH
40743: LD_INT 1
40745: EQUAL
40746: IFFALSE 40779
// result := Replace ( arr , pos [ 1 ] , value ) else
40748: LD_ADDR_VAR 0 4
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: LD_VAR 0 2
40762: PUSH
40763: LD_INT 1
40765: ARRAY
40766: PPUSH
40767: LD_VAR 0 3
40771: PPUSH
40772: CALL_OW 1
40776: ST_TO_ADDR
40777: GO 41041
// begin tmp := arr ;
40779: LD_ADDR_VAR 0 6
40783: PUSH
40784: LD_VAR 0 1
40788: ST_TO_ADDR
// s_arr := [ tmp ] ;
40789: LD_ADDR_VAR 0 7
40793: PUSH
40794: LD_VAR 0 6
40798: PUSH
40799: EMPTY
40800: LIST
40801: ST_TO_ADDR
// for i = 1 to pos - 1 do
40802: LD_ADDR_VAR 0 5
40806: PUSH
40807: DOUBLE
40808: LD_INT 1
40810: DEC
40811: ST_TO_ADDR
40812: LD_VAR 0 2
40816: PUSH
40817: LD_INT 1
40819: MINUS
40820: PUSH
40821: FOR_TO
40822: IFFALSE 40867
// begin tmp := tmp [ pos [ i ] ] ;
40824: LD_ADDR_VAR 0 6
40828: PUSH
40829: LD_VAR 0 6
40833: PUSH
40834: LD_VAR 0 2
40838: PUSH
40839: LD_VAR 0 5
40843: ARRAY
40844: ARRAY
40845: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40846: LD_ADDR_VAR 0 7
40850: PUSH
40851: LD_VAR 0 7
40855: PUSH
40856: LD_VAR 0 6
40860: PUSH
40861: EMPTY
40862: LIST
40863: ADD
40864: ST_TO_ADDR
// end ;
40865: GO 40821
40867: POP
40868: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40869: LD_ADDR_VAR 0 6
40873: PUSH
40874: LD_VAR 0 6
40878: PPUSH
40879: LD_VAR 0 2
40883: PUSH
40884: LD_VAR 0 2
40888: ARRAY
40889: PPUSH
40890: LD_VAR 0 3
40894: PPUSH
40895: CALL_OW 1
40899: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40900: LD_ADDR_VAR 0 7
40904: PUSH
40905: LD_VAR 0 7
40909: PPUSH
40910: LD_VAR 0 7
40914: PPUSH
40915: LD_VAR 0 6
40919: PPUSH
40920: CALL_OW 1
40924: ST_TO_ADDR
// for i = s_arr downto 2 do
40925: LD_ADDR_VAR 0 5
40929: PUSH
40930: DOUBLE
40931: LD_VAR 0 7
40935: INC
40936: ST_TO_ADDR
40937: LD_INT 2
40939: PUSH
40940: FOR_DOWNTO
40941: IFFALSE 41025
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40943: LD_ADDR_VAR 0 6
40947: PUSH
40948: LD_VAR 0 7
40952: PUSH
40953: LD_VAR 0 5
40957: PUSH
40958: LD_INT 1
40960: MINUS
40961: ARRAY
40962: PPUSH
40963: LD_VAR 0 2
40967: PUSH
40968: LD_VAR 0 5
40972: PUSH
40973: LD_INT 1
40975: MINUS
40976: ARRAY
40977: PPUSH
40978: LD_VAR 0 7
40982: PUSH
40983: LD_VAR 0 5
40987: ARRAY
40988: PPUSH
40989: CALL_OW 1
40993: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40994: LD_ADDR_VAR 0 7
40998: PUSH
40999: LD_VAR 0 7
41003: PPUSH
41004: LD_VAR 0 5
41008: PUSH
41009: LD_INT 1
41011: MINUS
41012: PPUSH
41013: LD_VAR 0 6
41017: PPUSH
41018: CALL_OW 1
41022: ST_TO_ADDR
// end ;
41023: GO 40940
41025: POP
41026: POP
// result := s_arr [ 1 ] ;
41027: LD_ADDR_VAR 0 4
41031: PUSH
41032: LD_VAR 0 7
41036: PUSH
41037: LD_INT 1
41039: ARRAY
41040: ST_TO_ADDR
// end ; end ;
41041: LD_VAR 0 4
41045: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41046: LD_INT 0
41048: PPUSH
41049: PPUSH
// if not list then
41050: LD_VAR 0 1
41054: NOT
41055: IFFALSE 41059
// exit ;
41057: GO 41150
// i := list [ pos1 ] ;
41059: LD_ADDR_VAR 0 5
41063: PUSH
41064: LD_VAR 0 1
41068: PUSH
41069: LD_VAR 0 2
41073: ARRAY
41074: ST_TO_ADDR
// if not i then
41075: LD_VAR 0 5
41079: NOT
41080: IFFALSE 41084
// exit ;
41082: GO 41150
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41084: LD_ADDR_VAR 0 1
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: LD_VAR 0 2
41098: PPUSH
41099: LD_VAR 0 1
41103: PUSH
41104: LD_VAR 0 3
41108: ARRAY
41109: PPUSH
41110: CALL_OW 1
41114: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41115: LD_ADDR_VAR 0 1
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_VAR 0 5
41134: PPUSH
41135: CALL_OW 1
41139: ST_TO_ADDR
// result := list ;
41140: LD_ADDR_VAR 0 4
41144: PUSH
41145: LD_VAR 0 1
41149: ST_TO_ADDR
// end ;
41150: LD_VAR 0 4
41154: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41155: LD_INT 0
41157: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41158: LD_ADDR_VAR 0 5
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 250
41172: PPUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 251
41182: PPUSH
41183: LD_VAR 0 2
41187: PPUSH
41188: LD_VAR 0 3
41192: PPUSH
41193: LD_VAR 0 4
41197: PPUSH
41198: CALL 41208 0 5
41202: ST_TO_ADDR
// end ;
41203: LD_VAR 0 5
41207: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41208: LD_INT 0
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
// if not list then
41214: LD_VAR 0 3
41218: NOT
41219: IFFALSE 41223
// exit ;
41221: GO 41611
// result := [ ] ;
41223: LD_ADDR_VAR 0 6
41227: PUSH
41228: EMPTY
41229: ST_TO_ADDR
// for i in list do
41230: LD_ADDR_VAR 0 7
41234: PUSH
41235: LD_VAR 0 3
41239: PUSH
41240: FOR_IN
41241: IFFALSE 41443
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41243: LD_ADDR_VAR 0 9
41247: PUSH
41248: LD_VAR 0 7
41252: PPUSH
41253: LD_VAR 0 1
41257: PPUSH
41258: LD_VAR 0 2
41262: PPUSH
41263: CALL_OW 297
41267: ST_TO_ADDR
// if not result then
41268: LD_VAR 0 6
41272: NOT
41273: IFFALSE 41299
// result := [ [ i , tmp ] ] else
41275: LD_ADDR_VAR 0 6
41279: PUSH
41280: LD_VAR 0 7
41284: PUSH
41285: LD_VAR 0 9
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: EMPTY
41295: LIST
41296: ST_TO_ADDR
41297: GO 41441
// begin if result [ result ] [ 2 ] < tmp then
41299: LD_VAR 0 6
41303: PUSH
41304: LD_VAR 0 6
41308: ARRAY
41309: PUSH
41310: LD_INT 2
41312: ARRAY
41313: PUSH
41314: LD_VAR 0 9
41318: LESS
41319: IFFALSE 41361
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41321: LD_ADDR_VAR 0 6
41325: PUSH
41326: LD_VAR 0 6
41330: PPUSH
41331: LD_VAR 0 6
41335: PUSH
41336: LD_INT 1
41338: PLUS
41339: PPUSH
41340: LD_VAR 0 7
41344: PUSH
41345: LD_VAR 0 9
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PPUSH
41354: CALL_OW 2
41358: ST_TO_ADDR
41359: GO 41441
// for j = 1 to result do
41361: LD_ADDR_VAR 0 8
41365: PUSH
41366: DOUBLE
41367: LD_INT 1
41369: DEC
41370: ST_TO_ADDR
41371: LD_VAR 0 6
41375: PUSH
41376: FOR_TO
41377: IFFALSE 41439
// begin if tmp < result [ j ] [ 2 ] then
41379: LD_VAR 0 9
41383: PUSH
41384: LD_VAR 0 6
41388: PUSH
41389: LD_VAR 0 8
41393: ARRAY
41394: PUSH
41395: LD_INT 2
41397: ARRAY
41398: LESS
41399: IFFALSE 41437
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41401: LD_ADDR_VAR 0 6
41405: PUSH
41406: LD_VAR 0 6
41410: PPUSH
41411: LD_VAR 0 8
41415: PPUSH
41416: LD_VAR 0 7
41420: PUSH
41421: LD_VAR 0 9
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PPUSH
41430: CALL_OW 2
41434: ST_TO_ADDR
// break ;
41435: GO 41439
// end ; end ;
41437: GO 41376
41439: POP
41440: POP
// end ; end ;
41441: GO 41240
41443: POP
41444: POP
// if result and not asc then
41445: LD_VAR 0 6
41449: PUSH
41450: LD_VAR 0 4
41454: NOT
41455: AND
41456: IFFALSE 41531
// begin tmp := result ;
41458: LD_ADDR_VAR 0 9
41462: PUSH
41463: LD_VAR 0 6
41467: ST_TO_ADDR
// for i = tmp downto 1 do
41468: LD_ADDR_VAR 0 7
41472: PUSH
41473: DOUBLE
41474: LD_VAR 0 9
41478: INC
41479: ST_TO_ADDR
41480: LD_INT 1
41482: PUSH
41483: FOR_DOWNTO
41484: IFFALSE 41529
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41486: LD_ADDR_VAR 0 6
41490: PUSH
41491: LD_VAR 0 6
41495: PPUSH
41496: LD_VAR 0 9
41500: PUSH
41501: LD_VAR 0 7
41505: MINUS
41506: PUSH
41507: LD_INT 1
41509: PLUS
41510: PPUSH
41511: LD_VAR 0 9
41515: PUSH
41516: LD_VAR 0 7
41520: ARRAY
41521: PPUSH
41522: CALL_OW 1
41526: ST_TO_ADDR
41527: GO 41483
41529: POP
41530: POP
// end ; tmp := [ ] ;
41531: LD_ADDR_VAR 0 9
41535: PUSH
41536: EMPTY
41537: ST_TO_ADDR
// if mode then
41538: LD_VAR 0 5
41542: IFFALSE 41611
// begin for i = 1 to result do
41544: LD_ADDR_VAR 0 7
41548: PUSH
41549: DOUBLE
41550: LD_INT 1
41552: DEC
41553: ST_TO_ADDR
41554: LD_VAR 0 6
41558: PUSH
41559: FOR_TO
41560: IFFALSE 41599
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41562: LD_ADDR_VAR 0 9
41566: PUSH
41567: LD_VAR 0 9
41571: PPUSH
41572: LD_VAR 0 7
41576: PPUSH
41577: LD_VAR 0 6
41581: PUSH
41582: LD_VAR 0 7
41586: ARRAY
41587: PUSH
41588: LD_INT 1
41590: ARRAY
41591: PPUSH
41592: CALL_OW 1
41596: ST_TO_ADDR
41597: GO 41559
41599: POP
41600: POP
// result := tmp ;
41601: LD_ADDR_VAR 0 6
41605: PUSH
41606: LD_VAR 0 9
41610: ST_TO_ADDR
// end ; end ;
41611: LD_VAR 0 6
41615: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41616: LD_INT 0
41618: PPUSH
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
41623: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41624: LD_ADDR_VAR 0 5
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: ST_TO_ADDR
// if not x or not y then
41646: LD_VAR 0 2
41650: NOT
41651: PUSH
41652: LD_VAR 0 3
41656: NOT
41657: OR
41658: IFFALSE 41662
// exit ;
41660: GO 43308
// if not range then
41662: LD_VAR 0 4
41666: NOT
41667: IFFALSE 41677
// range := 10 ;
41669: LD_ADDR_VAR 0 4
41673: PUSH
41674: LD_INT 10
41676: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41677: LD_ADDR_VAR 0 8
41681: PUSH
41682: LD_INT 81
41684: PUSH
41685: LD_VAR 0 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 92
41696: PUSH
41697: LD_VAR 0 2
41701: PUSH
41702: LD_VAR 0 3
41706: PUSH
41707: LD_VAR 0 4
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 3
41720: PUSH
41721: LD_INT 21
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: PPUSH
41740: CALL_OW 69
41744: ST_TO_ADDR
// if not tmp then
41745: LD_VAR 0 8
41749: NOT
41750: IFFALSE 41754
// exit ;
41752: GO 43308
// for i in tmp do
41754: LD_ADDR_VAR 0 6
41758: PUSH
41759: LD_VAR 0 8
41763: PUSH
41764: FOR_IN
41765: IFFALSE 43283
// begin points := [ 0 , 0 , 0 ] ;
41767: LD_ADDR_VAR 0 9
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
// bpoints := 1 ;
41786: LD_ADDR_VAR 0 10
41790: PUSH
41791: LD_INT 1
41793: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41794: LD_VAR 0 6
41798: PPUSH
41799: CALL_OW 247
41803: PUSH
41804: LD_INT 1
41806: DOUBLE
41807: EQUAL
41808: IFTRUE 41812
41810: GO 42390
41812: POP
// begin if GetClass ( i ) = 1 then
41813: LD_VAR 0 6
41817: PPUSH
41818: CALL_OW 257
41822: PUSH
41823: LD_INT 1
41825: EQUAL
41826: IFFALSE 41847
// points := [ 10 , 5 , 3 ] ;
41828: LD_ADDR_VAR 0 9
41832: PUSH
41833: LD_INT 10
41835: PUSH
41836: LD_INT 5
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41847: LD_VAR 0 6
41851: PPUSH
41852: CALL_OW 257
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 4
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: IN
41871: IFFALSE 41892
// points := [ 3 , 2 , 1 ] ;
41873: LD_ADDR_VAR 0 9
41877: PUSH
41878: LD_INT 3
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41892: LD_VAR 0 6
41896: PPUSH
41897: CALL_OW 257
41901: PUSH
41902: LD_INT 5
41904: EQUAL
41905: IFFALSE 41926
// points := [ 130 , 5 , 2 ] ;
41907: LD_ADDR_VAR 0 9
41911: PUSH
41912: LD_INT 130
41914: PUSH
41915: LD_INT 5
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41926: LD_VAR 0 6
41930: PPUSH
41931: CALL_OW 257
41935: PUSH
41936: LD_INT 8
41938: EQUAL
41939: IFFALSE 41960
// points := [ 35 , 35 , 30 ] ;
41941: LD_ADDR_VAR 0 9
41945: PUSH
41946: LD_INT 35
41948: PUSH
41949: LD_INT 35
41951: PUSH
41952: LD_INT 30
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41960: LD_VAR 0 6
41964: PPUSH
41965: CALL_OW 257
41969: PUSH
41970: LD_INT 9
41972: EQUAL
41973: IFFALSE 41994
// points := [ 20 , 55 , 40 ] ;
41975: LD_ADDR_VAR 0 9
41979: PUSH
41980: LD_INT 20
41982: PUSH
41983: LD_INT 55
41985: PUSH
41986: LD_INT 40
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41994: LD_VAR 0 6
41998: PPUSH
41999: CALL_OW 257
42003: PUSH
42004: LD_INT 12
42006: PUSH
42007: LD_INT 16
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: IN
42014: IFFALSE 42035
// points := [ 5 , 3 , 2 ] ;
42016: LD_ADDR_VAR 0 9
42020: PUSH
42021: LD_INT 5
42023: PUSH
42024: LD_INT 3
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42035: LD_VAR 0 6
42039: PPUSH
42040: CALL_OW 257
42044: PUSH
42045: LD_INT 17
42047: EQUAL
42048: IFFALSE 42069
// points := [ 100 , 50 , 75 ] ;
42050: LD_ADDR_VAR 0 9
42054: PUSH
42055: LD_INT 100
42057: PUSH
42058: LD_INT 50
42060: PUSH
42061: LD_INT 75
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42069: LD_VAR 0 6
42073: PPUSH
42074: CALL_OW 257
42078: PUSH
42079: LD_INT 15
42081: EQUAL
42082: IFFALSE 42103
// points := [ 10 , 5 , 3 ] ;
42084: LD_ADDR_VAR 0 9
42088: PUSH
42089: LD_INT 10
42091: PUSH
42092: LD_INT 5
42094: PUSH
42095: LD_INT 3
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42103: LD_VAR 0 6
42107: PPUSH
42108: CALL_OW 257
42112: PUSH
42113: LD_INT 14
42115: EQUAL
42116: IFFALSE 42137
// points := [ 10 , 0 , 0 ] ;
42118: LD_ADDR_VAR 0 9
42122: PUSH
42123: LD_INT 10
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42137: LD_VAR 0 6
42141: PPUSH
42142: CALL_OW 257
42146: PUSH
42147: LD_INT 11
42149: EQUAL
42150: IFFALSE 42171
// points := [ 30 , 10 , 5 ] ;
42152: LD_ADDR_VAR 0 9
42156: PUSH
42157: LD_INT 30
42159: PUSH
42160: LD_INT 10
42162: PUSH
42163: LD_INT 5
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42171: LD_VAR 0 1
42175: PPUSH
42176: LD_INT 5
42178: PPUSH
42179: CALL_OW 321
42183: PUSH
42184: LD_INT 2
42186: EQUAL
42187: IFFALSE 42204
// bpoints := bpoints * 1.8 ;
42189: LD_ADDR_VAR 0 10
42193: PUSH
42194: LD_VAR 0 10
42198: PUSH
42199: LD_REAL  1.80000000000000E+0000
42202: MUL
42203: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42204: LD_VAR 0 6
42208: PPUSH
42209: CALL_OW 257
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 3
42222: PUSH
42223: LD_INT 4
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: IN
42232: PUSH
42233: LD_VAR 0 1
42237: PPUSH
42238: LD_INT 51
42240: PPUSH
42241: CALL_OW 321
42245: PUSH
42246: LD_INT 2
42248: EQUAL
42249: AND
42250: IFFALSE 42267
// bpoints := bpoints * 1.2 ;
42252: LD_ADDR_VAR 0 10
42256: PUSH
42257: LD_VAR 0 10
42261: PUSH
42262: LD_REAL  1.20000000000000E+0000
42265: MUL
42266: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42267: LD_VAR 0 6
42271: PPUSH
42272: CALL_OW 257
42276: PUSH
42277: LD_INT 5
42279: PUSH
42280: LD_INT 7
42282: PUSH
42283: LD_INT 9
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: IN
42291: PUSH
42292: LD_VAR 0 1
42296: PPUSH
42297: LD_INT 52
42299: PPUSH
42300: CALL_OW 321
42304: PUSH
42305: LD_INT 2
42307: EQUAL
42308: AND
42309: IFFALSE 42326
// bpoints := bpoints * 1.5 ;
42311: LD_ADDR_VAR 0 10
42315: PUSH
42316: LD_VAR 0 10
42320: PUSH
42321: LD_REAL  1.50000000000000E+0000
42324: MUL
42325: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42326: LD_VAR 0 1
42330: PPUSH
42331: LD_INT 66
42333: PPUSH
42334: CALL_OW 321
42338: PUSH
42339: LD_INT 2
42341: EQUAL
42342: IFFALSE 42359
// bpoints := bpoints * 1.1 ;
42344: LD_ADDR_VAR 0 10
42348: PUSH
42349: LD_VAR 0 10
42353: PUSH
42354: LD_REAL  1.10000000000000E+0000
42357: MUL
42358: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42359: LD_ADDR_VAR 0 10
42363: PUSH
42364: LD_VAR 0 10
42368: PUSH
42369: LD_VAR 0 6
42373: PPUSH
42374: LD_INT 1
42376: PPUSH
42377: CALL_OW 259
42381: PUSH
42382: LD_REAL  1.15000000000000E+0000
42385: MUL
42386: MUL
42387: ST_TO_ADDR
// end ; unit_vehicle :
42388: GO 43212
42390: LD_INT 2
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 43200
42398: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42399: LD_VAR 0 6
42403: PPUSH
42404: CALL_OW 264
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 42
42414: PUSH
42415: LD_INT 24
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: IN
42423: IFFALSE 42444
// points := [ 25 , 5 , 3 ] ;
42425: LD_ADDR_VAR 0 9
42429: PUSH
42430: LD_INT 25
42432: PUSH
42433: LD_INT 5
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42444: LD_VAR 0 6
42448: PPUSH
42449: CALL_OW 264
42453: PUSH
42454: LD_INT 4
42456: PUSH
42457: LD_INT 43
42459: PUSH
42460: LD_INT 25
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: IN
42468: IFFALSE 42489
// points := [ 40 , 15 , 5 ] ;
42470: LD_ADDR_VAR 0 9
42474: PUSH
42475: LD_INT 40
42477: PUSH
42478: LD_INT 15
42480: PUSH
42481: LD_INT 5
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42489: LD_VAR 0 6
42493: PPUSH
42494: CALL_OW 264
42498: PUSH
42499: LD_INT 3
42501: PUSH
42502: LD_INT 23
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: IN
42509: IFFALSE 42530
// points := [ 7 , 25 , 8 ] ;
42511: LD_ADDR_VAR 0 9
42515: PUSH
42516: LD_INT 7
42518: PUSH
42519: LD_INT 25
42521: PUSH
42522: LD_INT 8
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42530: LD_VAR 0 6
42534: PPUSH
42535: CALL_OW 264
42539: PUSH
42540: LD_INT 5
42542: PUSH
42543: LD_INT 27
42545: PUSH
42546: LD_INT 44
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: IN
42554: IFFALSE 42575
// points := [ 14 , 50 , 16 ] ;
42556: LD_ADDR_VAR 0 9
42560: PUSH
42561: LD_INT 14
42563: PUSH
42564: LD_INT 50
42566: PUSH
42567: LD_INT 16
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42575: LD_VAR 0 6
42579: PPUSH
42580: CALL_OW 264
42584: PUSH
42585: LD_INT 6
42587: PUSH
42588: LD_INT 46
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: IN
42595: IFFALSE 42616
// points := [ 32 , 120 , 70 ] ;
42597: LD_ADDR_VAR 0 9
42601: PUSH
42602: LD_INT 32
42604: PUSH
42605: LD_INT 120
42607: PUSH
42608: LD_INT 70
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42616: LD_VAR 0 6
42620: PPUSH
42621: CALL_OW 264
42625: PUSH
42626: LD_INT 7
42628: PUSH
42629: LD_INT 28
42631: PUSH
42632: LD_INT 45
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: IN
42640: IFFALSE 42661
// points := [ 35 , 20 , 45 ] ;
42642: LD_ADDR_VAR 0 9
42646: PUSH
42647: LD_INT 35
42649: PUSH
42650: LD_INT 20
42652: PUSH
42653: LD_INT 45
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42661: LD_VAR 0 6
42665: PPUSH
42666: CALL_OW 264
42670: PUSH
42671: LD_INT 47
42673: PUSH
42674: EMPTY
42675: LIST
42676: IN
42677: IFFALSE 42698
// points := [ 67 , 45 , 75 ] ;
42679: LD_ADDR_VAR 0 9
42683: PUSH
42684: LD_INT 67
42686: PUSH
42687: LD_INT 45
42689: PUSH
42690: LD_INT 75
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42698: LD_VAR 0 6
42702: PPUSH
42703: CALL_OW 264
42707: PUSH
42708: LD_INT 26
42710: PUSH
42711: EMPTY
42712: LIST
42713: IN
42714: IFFALSE 42735
// points := [ 120 , 30 , 80 ] ;
42716: LD_ADDR_VAR 0 9
42720: PUSH
42721: LD_INT 120
42723: PUSH
42724: LD_INT 30
42726: PUSH
42727: LD_INT 80
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42735: LD_VAR 0 6
42739: PPUSH
42740: CALL_OW 264
42744: PUSH
42745: LD_INT 22
42747: PUSH
42748: EMPTY
42749: LIST
42750: IN
42751: IFFALSE 42772
// points := [ 40 , 1 , 1 ] ;
42753: LD_ADDR_VAR 0 9
42757: PUSH
42758: LD_INT 40
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42772: LD_VAR 0 6
42776: PPUSH
42777: CALL_OW 264
42781: PUSH
42782: LD_INT 29
42784: PUSH
42785: EMPTY
42786: LIST
42787: IN
42788: IFFALSE 42809
// points := [ 70 , 200 , 400 ] ;
42790: LD_ADDR_VAR 0 9
42794: PUSH
42795: LD_INT 70
42797: PUSH
42798: LD_INT 200
42800: PUSH
42801: LD_INT 400
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42809: LD_VAR 0 6
42813: PPUSH
42814: CALL_OW 264
42818: PUSH
42819: LD_INT 14
42821: PUSH
42822: LD_INT 53
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: IN
42829: IFFALSE 42850
// points := [ 40 , 10 , 20 ] ;
42831: LD_ADDR_VAR 0 9
42835: PUSH
42836: LD_INT 40
42838: PUSH
42839: LD_INT 10
42841: PUSH
42842: LD_INT 20
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42850: LD_VAR 0 6
42854: PPUSH
42855: CALL_OW 264
42859: PUSH
42860: LD_INT 9
42862: PUSH
42863: EMPTY
42864: LIST
42865: IN
42866: IFFALSE 42887
// points := [ 5 , 70 , 20 ] ;
42868: LD_ADDR_VAR 0 9
42872: PUSH
42873: LD_INT 5
42875: PUSH
42876: LD_INT 70
42878: PUSH
42879: LD_INT 20
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42887: LD_VAR 0 6
42891: PPUSH
42892: CALL_OW 264
42896: PUSH
42897: LD_INT 10
42899: PUSH
42900: EMPTY
42901: LIST
42902: IN
42903: IFFALSE 42924
// points := [ 35 , 110 , 70 ] ;
42905: LD_ADDR_VAR 0 9
42909: PUSH
42910: LD_INT 35
42912: PUSH
42913: LD_INT 110
42915: PUSH
42916: LD_INT 70
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42924: LD_VAR 0 6
42928: PPUSH
42929: CALL_OW 265
42933: PUSH
42934: LD_INT 25
42936: EQUAL
42937: IFFALSE 42958
// points := [ 80 , 65 , 100 ] ;
42939: LD_ADDR_VAR 0 9
42943: PUSH
42944: LD_INT 80
42946: PUSH
42947: LD_INT 65
42949: PUSH
42950: LD_INT 100
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42958: LD_VAR 0 6
42962: PPUSH
42963: CALL_OW 263
42967: PUSH
42968: LD_INT 1
42970: EQUAL
42971: IFFALSE 43006
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42973: LD_ADDR_VAR 0 10
42977: PUSH
42978: LD_VAR 0 10
42982: PUSH
42983: LD_VAR 0 6
42987: PPUSH
42988: CALL_OW 311
42992: PPUSH
42993: LD_INT 3
42995: PPUSH
42996: CALL_OW 259
43000: PUSH
43001: LD_INT 4
43003: MUL
43004: MUL
43005: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43006: LD_VAR 0 6
43010: PPUSH
43011: CALL_OW 263
43015: PUSH
43016: LD_INT 2
43018: EQUAL
43019: IFFALSE 43070
// begin j := IsControledBy ( i ) ;
43021: LD_ADDR_VAR 0 7
43025: PUSH
43026: LD_VAR 0 6
43030: PPUSH
43031: CALL_OW 312
43035: ST_TO_ADDR
// if j then
43036: LD_VAR 0 7
43040: IFFALSE 43070
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43042: LD_ADDR_VAR 0 10
43046: PUSH
43047: LD_VAR 0 10
43051: PUSH
43052: LD_VAR 0 7
43056: PPUSH
43057: LD_INT 3
43059: PPUSH
43060: CALL_OW 259
43064: PUSH
43065: LD_INT 3
43067: MUL
43068: MUL
43069: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43070: LD_VAR 0 6
43074: PPUSH
43075: CALL_OW 264
43079: PUSH
43080: LD_INT 5
43082: PUSH
43083: LD_INT 6
43085: PUSH
43086: LD_INT 46
43088: PUSH
43089: LD_INT 44
43091: PUSH
43092: LD_INT 47
43094: PUSH
43095: LD_INT 45
43097: PUSH
43098: LD_INT 28
43100: PUSH
43101: LD_INT 7
43103: PUSH
43104: LD_INT 27
43106: PUSH
43107: LD_INT 29
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: IN
43122: PUSH
43123: LD_VAR 0 1
43127: PPUSH
43128: LD_INT 52
43130: PPUSH
43131: CALL_OW 321
43135: PUSH
43136: LD_INT 2
43138: EQUAL
43139: AND
43140: IFFALSE 43157
// bpoints := bpoints * 1.2 ;
43142: LD_ADDR_VAR 0 10
43146: PUSH
43147: LD_VAR 0 10
43151: PUSH
43152: LD_REAL  1.20000000000000E+0000
43155: MUL
43156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43157: LD_VAR 0 6
43161: PPUSH
43162: CALL_OW 264
43166: PUSH
43167: LD_INT 6
43169: PUSH
43170: LD_INT 46
43172: PUSH
43173: LD_INT 47
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: IN
43181: IFFALSE 43198
// bpoints := bpoints * 1.2 ;
43183: LD_ADDR_VAR 0 10
43187: PUSH
43188: LD_VAR 0 10
43192: PUSH
43193: LD_REAL  1.20000000000000E+0000
43196: MUL
43197: ST_TO_ADDR
// end ; unit_building :
43198: GO 43212
43200: LD_INT 3
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 43211
43208: POP
// ; end ;
43209: GO 43212
43211: POP
// for j = 1 to 3 do
43212: LD_ADDR_VAR 0 7
43216: PUSH
43217: DOUBLE
43218: LD_INT 1
43220: DEC
43221: ST_TO_ADDR
43222: LD_INT 3
43224: PUSH
43225: FOR_TO
43226: IFFALSE 43279
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43228: LD_ADDR_VAR 0 5
43232: PUSH
43233: LD_VAR 0 5
43237: PPUSH
43238: LD_VAR 0 7
43242: PPUSH
43243: LD_VAR 0 5
43247: PUSH
43248: LD_VAR 0 7
43252: ARRAY
43253: PUSH
43254: LD_VAR 0 9
43258: PUSH
43259: LD_VAR 0 7
43263: ARRAY
43264: PUSH
43265: LD_VAR 0 10
43269: MUL
43270: PLUS
43271: PPUSH
43272: CALL_OW 1
43276: ST_TO_ADDR
43277: GO 43225
43279: POP
43280: POP
// end ;
43281: GO 41764
43283: POP
43284: POP
// result := Replace ( result , 4 , tmp ) ;
43285: LD_ADDR_VAR 0 5
43289: PUSH
43290: LD_VAR 0 5
43294: PPUSH
43295: LD_INT 4
43297: PPUSH
43298: LD_VAR 0 8
43302: PPUSH
43303: CALL_OW 1
43307: ST_TO_ADDR
// end ;
43308: LD_VAR 0 5
43312: RET
// export function DangerAtRange ( unit , range ) ; begin
43313: LD_INT 0
43315: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_VAR 0 1
43325: PPUSH
43326: CALL_OW 255
43330: PPUSH
43331: LD_VAR 0 1
43335: PPUSH
43336: CALL_OW 250
43340: PPUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: CALL_OW 251
43350: PPUSH
43351: LD_VAR 0 2
43355: PPUSH
43356: CALL 41616 0 4
43360: ST_TO_ADDR
// end ;
43361: LD_VAR 0 3
43365: RET
// export function DangerInArea ( side , area ) ; begin
43366: LD_INT 0
43368: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_VAR 0 2
43378: PPUSH
43379: LD_INT 81
43381: PUSH
43382: LD_VAR 0 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PPUSH
43391: CALL_OW 70
43395: ST_TO_ADDR
// end ;
43396: LD_VAR 0 3
43400: RET
// export function IsExtension ( b ) ; begin
43401: LD_INT 0
43403: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43404: LD_ADDR_VAR 0 2
43408: PUSH
43409: LD_VAR 0 1
43413: PUSH
43414: LD_INT 23
43416: PUSH
43417: LD_INT 20
43419: PUSH
43420: LD_INT 22
43422: PUSH
43423: LD_INT 17
43425: PUSH
43426: LD_INT 24
43428: PUSH
43429: LD_INT 21
43431: PUSH
43432: LD_INT 19
43434: PUSH
43435: LD_INT 16
43437: PUSH
43438: LD_INT 25
43440: PUSH
43441: LD_INT 18
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: IN
43456: ST_TO_ADDR
// end ;
43457: LD_VAR 0 2
43461: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
43462: LD_INT 0
43464: PPUSH
43465: PPUSH
43466: PPUSH
// result := [ ] ;
43467: LD_ADDR_VAR 0 3
43471: PUSH
43472: EMPTY
43473: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43474: LD_ADDR_VAR 0 4
43478: PUSH
43479: LD_VAR 0 2
43483: PPUSH
43484: LD_INT 21
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PPUSH
43494: CALL_OW 70
43498: ST_TO_ADDR
// if not tmp then
43499: LD_VAR 0 4
43503: NOT
43504: IFFALSE 43508
// exit ;
43506: GO 43566
// for i in tmp do
43508: LD_ADDR_VAR 0 5
43512: PUSH
43513: LD_VAR 0 4
43517: PUSH
43518: FOR_IN
43519: IFFALSE 43554
// if GetBase ( i ) <> base then
43521: LD_VAR 0 5
43525: PPUSH
43526: CALL_OW 274
43530: PUSH
43531: LD_VAR 0 1
43535: NONEQUAL
43536: IFFALSE 43552
// ComLinkToBase ( base , i ) ;
43538: LD_VAR 0 1
43542: PPUSH
43543: LD_VAR 0 5
43547: PPUSH
43548: CALL_OW 169
43552: GO 43518
43554: POP
43555: POP
// result := tmp ;
43556: LD_ADDR_VAR 0 3
43560: PUSH
43561: LD_VAR 0 4
43565: ST_TO_ADDR
// end ;
43566: LD_VAR 0 3
43570: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43571: LD_INT 0
43573: PPUSH
43574: PPUSH
// if BuildingStatus ( b ) = bs_build then
43575: LD_VAR 0 2
43579: PPUSH
43580: CALL_OW 461
43584: PUSH
43585: LD_INT 1
43587: EQUAL
43588: IFFALSE 43648
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43590: LD_VAR 0 1
43594: PPUSH
43595: LD_STRING h
43597: PUSH
43598: LD_VAR 0 2
43602: PPUSH
43603: CALL_OW 250
43607: PUSH
43608: LD_VAR 0 2
43612: PPUSH
43613: CALL_OW 251
43617: PUSH
43618: LD_VAR 0 2
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: PUSH
43641: EMPTY
43642: LIST
43643: PPUSH
43644: CALL_OW 446
// end ;
43648: LD_VAR 0 3
43652: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43653: LD_INT 0
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43661: LD_VAR 0 1
43665: NOT
43666: PUSH
43667: LD_VAR 0 1
43671: PPUSH
43672: CALL_OW 263
43676: PUSH
43677: LD_INT 2
43679: EQUAL
43680: NOT
43681: OR
43682: IFFALSE 43686
// exit ;
43684: GO 44002
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43686: LD_ADDR_VAR 0 6
43690: PUSH
43691: LD_INT 22
43693: PUSH
43694: LD_VAR 0 1
43698: PPUSH
43699: CALL_OW 255
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 30
43713: PUSH
43714: LD_INT 36
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 34
43723: PUSH
43724: LD_INT 31
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PPUSH
43740: CALL_OW 69
43744: ST_TO_ADDR
// if not tmp then
43745: LD_VAR 0 6
43749: NOT
43750: IFFALSE 43754
// exit ;
43752: GO 44002
// result := [ ] ;
43754: LD_ADDR_VAR 0 2
43758: PUSH
43759: EMPTY
43760: ST_TO_ADDR
// for i in tmp do
43761: LD_ADDR_VAR 0 3
43765: PUSH
43766: LD_VAR 0 6
43770: PUSH
43771: FOR_IN
43772: IFFALSE 43843
// begin t := UnitsInside ( i ) ;
43774: LD_ADDR_VAR 0 4
43778: PUSH
43779: LD_VAR 0 3
43783: PPUSH
43784: CALL_OW 313
43788: ST_TO_ADDR
// if t then
43789: LD_VAR 0 4
43793: IFFALSE 43841
// for j in t do
43795: LD_ADDR_VAR 0 7
43799: PUSH
43800: LD_VAR 0 4
43804: PUSH
43805: FOR_IN
43806: IFFALSE 43839
// result := Insert ( result , result + 1 , j ) ;
43808: LD_ADDR_VAR 0 2
43812: PUSH
43813: LD_VAR 0 2
43817: PPUSH
43818: LD_VAR 0 2
43822: PUSH
43823: LD_INT 1
43825: PLUS
43826: PPUSH
43827: LD_VAR 0 7
43831: PPUSH
43832: CALL_OW 2
43836: ST_TO_ADDR
43837: GO 43805
43839: POP
43840: POP
// end ;
43841: GO 43771
43843: POP
43844: POP
// if not result then
43845: LD_VAR 0 2
43849: NOT
43850: IFFALSE 43854
// exit ;
43852: GO 44002
// mech := result [ 1 ] ;
43854: LD_ADDR_VAR 0 5
43858: PUSH
43859: LD_VAR 0 2
43863: PUSH
43864: LD_INT 1
43866: ARRAY
43867: ST_TO_ADDR
// if result > 1 then
43868: LD_VAR 0 2
43872: PUSH
43873: LD_INT 1
43875: GREATER
43876: IFFALSE 43988
// for i = 2 to result do
43878: LD_ADDR_VAR 0 3
43882: PUSH
43883: DOUBLE
43884: LD_INT 2
43886: DEC
43887: ST_TO_ADDR
43888: LD_VAR 0 2
43892: PUSH
43893: FOR_TO
43894: IFFALSE 43986
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43896: LD_ADDR_VAR 0 4
43900: PUSH
43901: LD_VAR 0 2
43905: PUSH
43906: LD_VAR 0 3
43910: ARRAY
43911: PPUSH
43912: LD_INT 3
43914: PPUSH
43915: CALL_OW 259
43919: PUSH
43920: LD_VAR 0 2
43924: PUSH
43925: LD_VAR 0 3
43929: ARRAY
43930: PPUSH
43931: CALL_OW 432
43935: MINUS
43936: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43937: LD_VAR 0 4
43941: PUSH
43942: LD_VAR 0 5
43946: PPUSH
43947: LD_INT 3
43949: PPUSH
43950: CALL_OW 259
43954: PUSH
43955: LD_VAR 0 5
43959: PPUSH
43960: CALL_OW 432
43964: MINUS
43965: GREATEREQUAL
43966: IFFALSE 43984
// mech := result [ i ] ;
43968: LD_ADDR_VAR 0 5
43972: PUSH
43973: LD_VAR 0 2
43977: PUSH
43978: LD_VAR 0 3
43982: ARRAY
43983: ST_TO_ADDR
// end ;
43984: GO 43893
43986: POP
43987: POP
// ComLinkTo ( vehicle , mech ) ;
43988: LD_VAR 0 1
43992: PPUSH
43993: LD_VAR 0 5
43997: PPUSH
43998: CALL_OW 135
// end ;
44002: LD_VAR 0 2
44006: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44007: LD_INT 0
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
44016: PPUSH
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
44021: PPUSH
// result := [ ] ;
44022: LD_ADDR_VAR 0 7
44026: PUSH
44027: EMPTY
44028: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44029: LD_VAR 0 1
44033: PPUSH
44034: CALL_OW 266
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: IN
44049: NOT
44050: IFFALSE 44054
// exit ;
44052: GO 45685
// if name then
44054: LD_VAR 0 3
44058: IFFALSE 44074
// SetBName ( base_dep , name ) ;
44060: LD_VAR 0 1
44064: PPUSH
44065: LD_VAR 0 3
44069: PPUSH
44070: CALL_OW 500
// base := GetBase ( base_dep ) ;
44074: LD_ADDR_VAR 0 15
44078: PUSH
44079: LD_VAR 0 1
44083: PPUSH
44084: CALL_OW 274
44088: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44089: LD_ADDR_VAR 0 16
44093: PUSH
44094: LD_VAR 0 1
44098: PPUSH
44099: CALL_OW 255
44103: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44104: LD_ADDR_VAR 0 17
44108: PUSH
44109: LD_VAR 0 1
44113: PPUSH
44114: CALL_OW 248
44118: ST_TO_ADDR
// if sources then
44119: LD_VAR 0 5
44123: IFFALSE 44170
// for i = 1 to 3 do
44125: LD_ADDR_VAR 0 8
44129: PUSH
44130: DOUBLE
44131: LD_INT 1
44133: DEC
44134: ST_TO_ADDR
44135: LD_INT 3
44137: PUSH
44138: FOR_TO
44139: IFFALSE 44168
// AddResourceType ( base , i , sources [ i ] ) ;
44141: LD_VAR 0 15
44145: PPUSH
44146: LD_VAR 0 8
44150: PPUSH
44151: LD_VAR 0 5
44155: PUSH
44156: LD_VAR 0 8
44160: ARRAY
44161: PPUSH
44162: CALL_OW 276
44166: GO 44138
44168: POP
44169: POP
// buildings := GetBaseBuildings ( base , area ) ;
44170: LD_ADDR_VAR 0 18
44174: PUSH
44175: LD_VAR 0 15
44179: PPUSH
44180: LD_VAR 0 2
44184: PPUSH
44185: CALL 43462 0 2
44189: ST_TO_ADDR
// InitHc ;
44190: CALL_OW 19
// InitUc ;
44194: CALL_OW 18
// uc_side := side ;
44198: LD_ADDR_OWVAR 20
44202: PUSH
44203: LD_VAR 0 16
44207: ST_TO_ADDR
// uc_nation := nation ;
44208: LD_ADDR_OWVAR 21
44212: PUSH
44213: LD_VAR 0 17
44217: ST_TO_ADDR
// if buildings then
44218: LD_VAR 0 18
44222: IFFALSE 45544
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44224: LD_ADDR_VAR 0 19
44228: PUSH
44229: LD_VAR 0 18
44233: PPUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 30
44239: PUSH
44240: LD_INT 29
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 30
44249: PUSH
44250: LD_INT 30
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: PPUSH
44262: CALL_OW 72
44266: ST_TO_ADDR
// if tmp then
44267: LD_VAR 0 19
44271: IFFALSE 44319
// for i in tmp do
44273: LD_ADDR_VAR 0 8
44277: PUSH
44278: LD_VAR 0 19
44282: PUSH
44283: FOR_IN
44284: IFFALSE 44317
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44286: LD_VAR 0 8
44290: PPUSH
44291: CALL_OW 250
44295: PPUSH
44296: LD_VAR 0 8
44300: PPUSH
44301: CALL_OW 251
44305: PPUSH
44306: LD_VAR 0 16
44310: PPUSH
44311: CALL_OW 441
44315: GO 44283
44317: POP
44318: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44319: LD_VAR 0 18
44323: PPUSH
44324: LD_INT 2
44326: PUSH
44327: LD_INT 30
44329: PUSH
44330: LD_INT 32
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 30
44339: PUSH
44340: LD_INT 33
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: PPUSH
44352: CALL_OW 72
44356: IFFALSE 44444
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44358: LD_ADDR_VAR 0 8
44362: PUSH
44363: LD_VAR 0 18
44367: PPUSH
44368: LD_INT 2
44370: PUSH
44371: LD_INT 30
44373: PUSH
44374: LD_INT 32
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 30
44383: PUSH
44384: LD_INT 33
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: PPUSH
44396: CALL_OW 72
44400: PUSH
44401: FOR_IN
44402: IFFALSE 44442
// begin if not GetBWeapon ( i ) then
44404: LD_VAR 0 8
44408: PPUSH
44409: CALL_OW 269
44413: NOT
44414: IFFALSE 44440
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44416: LD_VAR 0 8
44420: PPUSH
44421: LD_VAR 0 8
44425: PPUSH
44426: LD_VAR 0 2
44430: PPUSH
44431: CALL 45690 0 2
44435: PPUSH
44436: CALL_OW 431
// end ;
44440: GO 44401
44442: POP
44443: POP
// end ; for i = 1 to personel do
44444: LD_ADDR_VAR 0 8
44448: PUSH
44449: DOUBLE
44450: LD_INT 1
44452: DEC
44453: ST_TO_ADDR
44454: LD_VAR 0 6
44458: PUSH
44459: FOR_TO
44460: IFFALSE 45524
// begin if i > 4 then
44462: LD_VAR 0 8
44466: PUSH
44467: LD_INT 4
44469: GREATER
44470: IFFALSE 44474
// break ;
44472: GO 45524
// case i of 1 :
44474: LD_VAR 0 8
44478: PUSH
44479: LD_INT 1
44481: DOUBLE
44482: EQUAL
44483: IFTRUE 44487
44485: GO 44567
44487: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44488: LD_ADDR_VAR 0 12
44492: PUSH
44493: LD_VAR 0 18
44497: PPUSH
44498: LD_INT 22
44500: PUSH
44501: LD_VAR 0 16
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 58
44512: PUSH
44513: EMPTY
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 30
44521: PUSH
44522: LD_INT 32
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 30
44531: PUSH
44532: LD_INT 4
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 30
44541: PUSH
44542: LD_INT 5
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: PPUSH
44560: CALL_OW 72
44564: ST_TO_ADDR
44565: GO 44789
44567: LD_INT 2
44569: DOUBLE
44570: EQUAL
44571: IFTRUE 44575
44573: GO 44637
44575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44576: LD_ADDR_VAR 0 12
44580: PUSH
44581: LD_VAR 0 18
44585: PPUSH
44586: LD_INT 22
44588: PUSH
44589: LD_VAR 0 16
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 30
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 30
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PPUSH
44630: CALL_OW 72
44634: ST_TO_ADDR
44635: GO 44789
44637: LD_INT 3
44639: DOUBLE
44640: EQUAL
44641: IFTRUE 44645
44643: GO 44707
44645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44646: LD_ADDR_VAR 0 12
44650: PUSH
44651: LD_VAR 0 18
44655: PPUSH
44656: LD_INT 22
44658: PUSH
44659: LD_VAR 0 16
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 30
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 30
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PPUSH
44700: CALL_OW 72
44704: ST_TO_ADDR
44705: GO 44789
44707: LD_INT 4
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44715
44713: GO 44788
44715: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44716: LD_ADDR_VAR 0 12
44720: PUSH
44721: LD_VAR 0 18
44725: PPUSH
44726: LD_INT 22
44728: PUSH
44729: LD_VAR 0 16
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 30
44743: PUSH
44744: LD_INT 6
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 30
44753: PUSH
44754: LD_INT 7
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 30
44763: PUSH
44764: LD_INT 8
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PPUSH
44781: CALL_OW 72
44785: ST_TO_ADDR
44786: GO 44789
44788: POP
// if i = 1 then
44789: LD_VAR 0 8
44793: PUSH
44794: LD_INT 1
44796: EQUAL
44797: IFFALSE 44908
// begin tmp := [ ] ;
44799: LD_ADDR_VAR 0 19
44803: PUSH
44804: EMPTY
44805: ST_TO_ADDR
// for j in f do
44806: LD_ADDR_VAR 0 9
44810: PUSH
44811: LD_VAR 0 12
44815: PUSH
44816: FOR_IN
44817: IFFALSE 44890
// if GetBType ( j ) = b_bunker then
44819: LD_VAR 0 9
44823: PPUSH
44824: CALL_OW 266
44828: PUSH
44829: LD_INT 32
44831: EQUAL
44832: IFFALSE 44859
// tmp := Insert ( tmp , 1 , j ) else
44834: LD_ADDR_VAR 0 19
44838: PUSH
44839: LD_VAR 0 19
44843: PPUSH
44844: LD_INT 1
44846: PPUSH
44847: LD_VAR 0 9
44851: PPUSH
44852: CALL_OW 2
44856: ST_TO_ADDR
44857: GO 44888
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44859: LD_ADDR_VAR 0 19
44863: PUSH
44864: LD_VAR 0 19
44868: PPUSH
44869: LD_VAR 0 19
44873: PUSH
44874: LD_INT 1
44876: PLUS
44877: PPUSH
44878: LD_VAR 0 9
44882: PPUSH
44883: CALL_OW 2
44887: ST_TO_ADDR
44888: GO 44816
44890: POP
44891: POP
// if tmp then
44892: LD_VAR 0 19
44896: IFFALSE 44908
// f := tmp ;
44898: LD_ADDR_VAR 0 12
44902: PUSH
44903: LD_VAR 0 19
44907: ST_TO_ADDR
// end ; x := personel [ i ] ;
44908: LD_ADDR_VAR 0 13
44912: PUSH
44913: LD_VAR 0 6
44917: PUSH
44918: LD_VAR 0 8
44922: ARRAY
44923: ST_TO_ADDR
// if x = - 1 then
44924: LD_VAR 0 13
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: EQUAL
44933: IFFALSE 45142
// begin for j in f do
44935: LD_ADDR_VAR 0 9
44939: PUSH
44940: LD_VAR 0 12
44944: PUSH
44945: FOR_IN
44946: IFFALSE 45138
// repeat InitHc ;
44948: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44952: LD_VAR 0 9
44956: PPUSH
44957: CALL_OW 266
44961: PUSH
44962: LD_INT 5
44964: EQUAL
44965: IFFALSE 45035
// begin if UnitsInside ( j ) < 3 then
44967: LD_VAR 0 9
44971: PPUSH
44972: CALL_OW 313
44976: PUSH
44977: LD_INT 3
44979: LESS
44980: IFFALSE 45016
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44982: LD_INT 0
44984: PPUSH
44985: LD_INT 5
44987: PUSH
44988: LD_INT 8
44990: PUSH
44991: LD_INT 9
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: PUSH
44999: LD_VAR 0 17
45003: ARRAY
45004: PPUSH
45005: LD_VAR 0 4
45009: PPUSH
45010: CALL_OW 380
45014: GO 45033
// PrepareHuman ( false , i , skill ) ;
45016: LD_INT 0
45018: PPUSH
45019: LD_VAR 0 8
45023: PPUSH
45024: LD_VAR 0 4
45028: PPUSH
45029: CALL_OW 380
// end else
45033: GO 45052
// PrepareHuman ( false , i , skill ) ;
45035: LD_INT 0
45037: PPUSH
45038: LD_VAR 0 8
45042: PPUSH
45043: LD_VAR 0 4
45047: PPUSH
45048: CALL_OW 380
// un := CreateHuman ;
45052: LD_ADDR_VAR 0 14
45056: PUSH
45057: CALL_OW 44
45061: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45062: LD_ADDR_VAR 0 7
45066: PUSH
45067: LD_VAR 0 7
45071: PPUSH
45072: LD_INT 1
45074: PPUSH
45075: LD_VAR 0 14
45079: PPUSH
45080: CALL_OW 2
45084: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45085: LD_VAR 0 14
45089: PPUSH
45090: LD_VAR 0 9
45094: PPUSH
45095: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45099: LD_VAR 0 9
45103: PPUSH
45104: CALL_OW 313
45108: PUSH
45109: LD_INT 6
45111: EQUAL
45112: PUSH
45113: LD_VAR 0 9
45117: PPUSH
45118: CALL_OW 266
45122: PUSH
45123: LD_INT 32
45125: PUSH
45126: LD_INT 31
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: IN
45133: OR
45134: IFFALSE 44948
45136: GO 44945
45138: POP
45139: POP
// end else
45140: GO 45522
// for j = 1 to x do
45142: LD_ADDR_VAR 0 9
45146: PUSH
45147: DOUBLE
45148: LD_INT 1
45150: DEC
45151: ST_TO_ADDR
45152: LD_VAR 0 13
45156: PUSH
45157: FOR_TO
45158: IFFALSE 45520
// begin InitHc ;
45160: CALL_OW 19
// if not f then
45164: LD_VAR 0 12
45168: NOT
45169: IFFALSE 45258
// begin PrepareHuman ( false , i , skill ) ;
45171: LD_INT 0
45173: PPUSH
45174: LD_VAR 0 8
45178: PPUSH
45179: LD_VAR 0 4
45183: PPUSH
45184: CALL_OW 380
// un := CreateHuman ;
45188: LD_ADDR_VAR 0 14
45192: PUSH
45193: CALL_OW 44
45197: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45198: LD_ADDR_VAR 0 7
45202: PUSH
45203: LD_VAR 0 7
45207: PPUSH
45208: LD_INT 1
45210: PPUSH
45211: LD_VAR 0 14
45215: PPUSH
45216: CALL_OW 2
45220: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45221: LD_VAR 0 14
45225: PPUSH
45226: LD_VAR 0 1
45230: PPUSH
45231: CALL_OW 250
45235: PPUSH
45236: LD_VAR 0 1
45240: PPUSH
45241: CALL_OW 251
45245: PPUSH
45246: LD_INT 10
45248: PPUSH
45249: LD_INT 0
45251: PPUSH
45252: CALL_OW 50
// continue ;
45256: GO 45157
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45258: LD_VAR 0 12
45262: PUSH
45263: LD_INT 1
45265: ARRAY
45266: PPUSH
45267: CALL_OW 313
45271: PUSH
45272: LD_VAR 0 12
45276: PUSH
45277: LD_INT 1
45279: ARRAY
45280: PPUSH
45281: CALL_OW 266
45285: PUSH
45286: LD_INT 32
45288: PUSH
45289: LD_INT 31
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: IN
45296: AND
45297: PUSH
45298: LD_VAR 0 12
45302: PUSH
45303: LD_INT 1
45305: ARRAY
45306: PPUSH
45307: CALL_OW 313
45311: PUSH
45312: LD_INT 6
45314: EQUAL
45315: OR
45316: IFFALSE 45336
// f := Delete ( f , 1 ) ;
45318: LD_ADDR_VAR 0 12
45322: PUSH
45323: LD_VAR 0 12
45327: PPUSH
45328: LD_INT 1
45330: PPUSH
45331: CALL_OW 3
45335: ST_TO_ADDR
// if not f then
45336: LD_VAR 0 12
45340: NOT
45341: IFFALSE 45359
// begin x := x + 2 ;
45343: LD_ADDR_VAR 0 13
45347: PUSH
45348: LD_VAR 0 13
45352: PUSH
45353: LD_INT 2
45355: PLUS
45356: ST_TO_ADDR
// continue ;
45357: GO 45157
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45359: LD_VAR 0 12
45363: PUSH
45364: LD_INT 1
45366: ARRAY
45367: PPUSH
45368: CALL_OW 266
45372: PUSH
45373: LD_INT 5
45375: EQUAL
45376: IFFALSE 45450
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45378: LD_VAR 0 12
45382: PUSH
45383: LD_INT 1
45385: ARRAY
45386: PPUSH
45387: CALL_OW 313
45391: PUSH
45392: LD_INT 3
45394: LESS
45395: IFFALSE 45431
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45397: LD_INT 0
45399: PPUSH
45400: LD_INT 5
45402: PUSH
45403: LD_INT 8
45405: PUSH
45406: LD_INT 9
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: PUSH
45414: LD_VAR 0 17
45418: ARRAY
45419: PPUSH
45420: LD_VAR 0 4
45424: PPUSH
45425: CALL_OW 380
45429: GO 45448
// PrepareHuman ( false , i , skill ) ;
45431: LD_INT 0
45433: PPUSH
45434: LD_VAR 0 8
45438: PPUSH
45439: LD_VAR 0 4
45443: PPUSH
45444: CALL_OW 380
// end else
45448: GO 45467
// PrepareHuman ( false , i , skill ) ;
45450: LD_INT 0
45452: PPUSH
45453: LD_VAR 0 8
45457: PPUSH
45458: LD_VAR 0 4
45462: PPUSH
45463: CALL_OW 380
// un := CreateHuman ;
45467: LD_ADDR_VAR 0 14
45471: PUSH
45472: CALL_OW 44
45476: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45477: LD_ADDR_VAR 0 7
45481: PUSH
45482: LD_VAR 0 7
45486: PPUSH
45487: LD_INT 1
45489: PPUSH
45490: LD_VAR 0 14
45494: PPUSH
45495: CALL_OW 2
45499: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45500: LD_VAR 0 14
45504: PPUSH
45505: LD_VAR 0 12
45509: PUSH
45510: LD_INT 1
45512: ARRAY
45513: PPUSH
45514: CALL_OW 52
// end ;
45518: GO 45157
45520: POP
45521: POP
// end ;
45522: GO 44459
45524: POP
45525: POP
// result := result ^ buildings ;
45526: LD_ADDR_VAR 0 7
45530: PUSH
45531: LD_VAR 0 7
45535: PUSH
45536: LD_VAR 0 18
45540: ADD
45541: ST_TO_ADDR
// end else
45542: GO 45685
// begin for i = 1 to personel do
45544: LD_ADDR_VAR 0 8
45548: PUSH
45549: DOUBLE
45550: LD_INT 1
45552: DEC
45553: ST_TO_ADDR
45554: LD_VAR 0 6
45558: PUSH
45559: FOR_TO
45560: IFFALSE 45683
// begin if i > 4 then
45562: LD_VAR 0 8
45566: PUSH
45567: LD_INT 4
45569: GREATER
45570: IFFALSE 45574
// break ;
45572: GO 45683
// x := personel [ i ] ;
45574: LD_ADDR_VAR 0 13
45578: PUSH
45579: LD_VAR 0 6
45583: PUSH
45584: LD_VAR 0 8
45588: ARRAY
45589: ST_TO_ADDR
// if x = - 1 then
45590: LD_VAR 0 13
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: EQUAL
45599: IFFALSE 45603
// continue ;
45601: GO 45559
// PrepareHuman ( false , i , skill ) ;
45603: LD_INT 0
45605: PPUSH
45606: LD_VAR 0 8
45610: PPUSH
45611: LD_VAR 0 4
45615: PPUSH
45616: CALL_OW 380
// un := CreateHuman ;
45620: LD_ADDR_VAR 0 14
45624: PUSH
45625: CALL_OW 44
45629: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45630: LD_VAR 0 14
45634: PPUSH
45635: LD_VAR 0 1
45639: PPUSH
45640: CALL_OW 250
45644: PPUSH
45645: LD_VAR 0 1
45649: PPUSH
45650: CALL_OW 251
45654: PPUSH
45655: LD_INT 10
45657: PPUSH
45658: LD_INT 0
45660: PPUSH
45661: CALL_OW 50
// result := result ^ un ;
45665: LD_ADDR_VAR 0 7
45669: PUSH
45670: LD_VAR 0 7
45674: PUSH
45675: LD_VAR 0 14
45679: ADD
45680: ST_TO_ADDR
// end ;
45681: GO 45559
45683: POP
45684: POP
// end ; end ;
45685: LD_VAR 0 7
45689: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45690: LD_INT 0
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
// result := false ;
45708: LD_ADDR_VAR 0 3
45712: PUSH
45713: LD_INT 0
45715: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45716: LD_VAR 0 1
45720: NOT
45721: PUSH
45722: LD_VAR 0 1
45726: PPUSH
45727: CALL_OW 266
45731: PUSH
45732: LD_INT 32
45734: PUSH
45735: LD_INT 33
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: IN
45742: NOT
45743: OR
45744: IFFALSE 45748
// exit ;
45746: GO 46884
// nat := GetNation ( tower ) ;
45748: LD_ADDR_VAR 0 12
45752: PUSH
45753: LD_VAR 0 1
45757: PPUSH
45758: CALL_OW 248
45762: ST_TO_ADDR
// side := GetSide ( tower ) ;
45763: LD_ADDR_VAR 0 16
45767: PUSH
45768: LD_VAR 0 1
45772: PPUSH
45773: CALL_OW 255
45777: ST_TO_ADDR
// x := GetX ( tower ) ;
45778: LD_ADDR_VAR 0 10
45782: PUSH
45783: LD_VAR 0 1
45787: PPUSH
45788: CALL_OW 250
45792: ST_TO_ADDR
// y := GetY ( tower ) ;
45793: LD_ADDR_VAR 0 11
45797: PUSH
45798: LD_VAR 0 1
45802: PPUSH
45803: CALL_OW 251
45807: ST_TO_ADDR
// if not x or not y then
45808: LD_VAR 0 10
45812: NOT
45813: PUSH
45814: LD_VAR 0 11
45818: NOT
45819: OR
45820: IFFALSE 45824
// exit ;
45822: GO 46884
// weapon := 0 ;
45824: LD_ADDR_VAR 0 18
45828: PUSH
45829: LD_INT 0
45831: ST_TO_ADDR
// fac_list := [ ] ;
45832: LD_ADDR_VAR 0 17
45836: PUSH
45837: EMPTY
45838: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
45839: LD_ADDR_VAR 0 6
45843: PUSH
45844: LD_VAR 0 1
45848: PPUSH
45849: CALL_OW 274
45853: PPUSH
45854: LD_VAR 0 2
45858: PPUSH
45859: CALL 43462 0 2
45863: PPUSH
45864: LD_INT 30
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PPUSH
45874: CALL_OW 72
45878: ST_TO_ADDR
// if not factories then
45879: LD_VAR 0 6
45883: NOT
45884: IFFALSE 45888
// exit ;
45886: GO 46884
// for i in factories do
45888: LD_ADDR_VAR 0 8
45892: PUSH
45893: LD_VAR 0 6
45897: PUSH
45898: FOR_IN
45899: IFFALSE 45924
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45901: LD_ADDR_VAR 0 17
45905: PUSH
45906: LD_VAR 0 17
45910: PUSH
45911: LD_VAR 0 8
45915: PPUSH
45916: CALL_OW 478
45920: UNION
45921: ST_TO_ADDR
45922: GO 45898
45924: POP
45925: POP
// if not fac_list then
45926: LD_VAR 0 17
45930: NOT
45931: IFFALSE 45935
// exit ;
45933: GO 46884
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45935: LD_ADDR_VAR 0 5
45939: PUSH
45940: LD_INT 4
45942: PUSH
45943: LD_INT 5
45945: PUSH
45946: LD_INT 9
45948: PUSH
45949: LD_INT 10
45951: PUSH
45952: LD_INT 6
45954: PUSH
45955: LD_INT 7
45957: PUSH
45958: LD_INT 11
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 27
45972: PUSH
45973: LD_INT 28
45975: PUSH
45976: LD_INT 26
45978: PUSH
45979: LD_INT 30
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 43
45990: PUSH
45991: LD_INT 44
45993: PUSH
45994: LD_INT 46
45996: PUSH
45997: LD_INT 45
45999: PUSH
46000: LD_INT 47
46002: PUSH
46003: LD_INT 49
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: PUSH
46019: LD_VAR 0 12
46023: ARRAY
46024: ST_TO_ADDR
// for i in list do
46025: LD_ADDR_VAR 0 8
46029: PUSH
46030: LD_VAR 0 5
46034: PUSH
46035: FOR_IN
46036: IFFALSE 46069
// if not i in fac_list then
46038: LD_VAR 0 8
46042: PUSH
46043: LD_VAR 0 17
46047: IN
46048: NOT
46049: IFFALSE 46067
// list := list diff i ;
46051: LD_ADDR_VAR 0 5
46055: PUSH
46056: LD_VAR 0 5
46060: PUSH
46061: LD_VAR 0 8
46065: DIFF
46066: ST_TO_ADDR
46067: GO 46035
46069: POP
46070: POP
// if not list then
46071: LD_VAR 0 5
46075: NOT
46076: IFFALSE 46080
// exit ;
46078: GO 46884
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46080: LD_VAR 0 12
46084: PUSH
46085: LD_INT 3
46087: EQUAL
46088: PUSH
46089: LD_INT 49
46091: PUSH
46092: LD_VAR 0 5
46096: IN
46097: AND
46098: PUSH
46099: LD_INT 31
46101: PPUSH
46102: LD_VAR 0 16
46106: PPUSH
46107: CALL_OW 321
46111: PUSH
46112: LD_INT 2
46114: EQUAL
46115: AND
46116: IFFALSE 46176
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46118: LD_INT 22
46120: PUSH
46121: LD_VAR 0 16
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 35
46132: PUSH
46133: LD_INT 49
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 91
46142: PUSH
46143: LD_VAR 0 1
46147: PUSH
46148: LD_INT 10
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: PPUSH
46161: CALL_OW 69
46165: NOT
46166: IFFALSE 46176
// weapon := ru_time_lapser ;
46168: LD_ADDR_VAR 0 18
46172: PUSH
46173: LD_INT 49
46175: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46176: LD_VAR 0 12
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: IN
46191: PUSH
46192: LD_INT 11
46194: PUSH
46195: LD_VAR 0 5
46199: IN
46200: PUSH
46201: LD_INT 30
46203: PUSH
46204: LD_VAR 0 5
46208: IN
46209: OR
46210: AND
46211: PUSH
46212: LD_INT 6
46214: PPUSH
46215: LD_VAR 0 16
46219: PPUSH
46220: CALL_OW 321
46224: PUSH
46225: LD_INT 2
46227: EQUAL
46228: AND
46229: IFFALSE 46394
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46231: LD_INT 22
46233: PUSH
46234: LD_VAR 0 16
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: LD_INT 35
46248: PUSH
46249: LD_INT 11
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 35
46258: PUSH
46259: LD_INT 30
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 91
46273: PUSH
46274: LD_VAR 0 1
46278: PUSH
46279: LD_INT 18
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: PPUSH
46292: CALL_OW 69
46296: NOT
46297: PUSH
46298: LD_INT 22
46300: PUSH
46301: LD_VAR 0 16
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 30
46315: PUSH
46316: LD_INT 32
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 30
46325: PUSH
46326: LD_INT 33
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 91
46340: PUSH
46341: LD_VAR 0 1
46345: PUSH
46346: LD_INT 12
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: LIST
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: PUSH
46359: EMPTY
46360: LIST
46361: PPUSH
46362: CALL_OW 69
46366: PUSH
46367: LD_INT 2
46369: GREATER
46370: AND
46371: IFFALSE 46394
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46373: LD_ADDR_VAR 0 18
46377: PUSH
46378: LD_INT 11
46380: PUSH
46381: LD_INT 30
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_VAR 0 12
46392: ARRAY
46393: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46394: LD_VAR 0 18
46398: NOT
46399: PUSH
46400: LD_INT 40
46402: PPUSH
46403: LD_VAR 0 16
46407: PPUSH
46408: CALL_OW 321
46412: PUSH
46413: LD_INT 2
46415: EQUAL
46416: AND
46417: PUSH
46418: LD_INT 7
46420: PUSH
46421: LD_VAR 0 5
46425: IN
46426: PUSH
46427: LD_INT 28
46429: PUSH
46430: LD_VAR 0 5
46434: IN
46435: OR
46436: PUSH
46437: LD_INT 45
46439: PUSH
46440: LD_VAR 0 5
46444: IN
46445: OR
46446: AND
46447: IFFALSE 46701
// begin hex := GetHexInfo ( x , y ) ;
46449: LD_ADDR_VAR 0 4
46453: PUSH
46454: LD_VAR 0 10
46458: PPUSH
46459: LD_VAR 0 11
46463: PPUSH
46464: CALL_OW 546
46468: ST_TO_ADDR
// if hex [ 1 ] then
46469: LD_VAR 0 4
46473: PUSH
46474: LD_INT 1
46476: ARRAY
46477: IFFALSE 46481
// exit ;
46479: GO 46884
// height := hex [ 2 ] ;
46481: LD_ADDR_VAR 0 15
46485: PUSH
46486: LD_VAR 0 4
46490: PUSH
46491: LD_INT 2
46493: ARRAY
46494: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46495: LD_ADDR_VAR 0 14
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: LD_INT 3
46508: PUSH
46509: LD_INT 5
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: ST_TO_ADDR
// for i in tmp do
46518: LD_ADDR_VAR 0 8
46522: PUSH
46523: LD_VAR 0 14
46527: PUSH
46528: FOR_IN
46529: IFFALSE 46699
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46531: LD_ADDR_VAR 0 9
46535: PUSH
46536: LD_VAR 0 10
46540: PPUSH
46541: LD_VAR 0 8
46545: PPUSH
46546: LD_INT 5
46548: PPUSH
46549: CALL_OW 272
46553: PUSH
46554: LD_VAR 0 11
46558: PPUSH
46559: LD_VAR 0 8
46563: PPUSH
46564: LD_INT 5
46566: PPUSH
46567: CALL_OW 273
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46576: LD_VAR 0 9
46580: PUSH
46581: LD_INT 1
46583: ARRAY
46584: PPUSH
46585: LD_VAR 0 9
46589: PUSH
46590: LD_INT 2
46592: ARRAY
46593: PPUSH
46594: CALL_OW 488
46598: IFFALSE 46697
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46600: LD_ADDR_VAR 0 4
46604: PUSH
46605: LD_VAR 0 9
46609: PUSH
46610: LD_INT 1
46612: ARRAY
46613: PPUSH
46614: LD_VAR 0 9
46618: PUSH
46619: LD_INT 2
46621: ARRAY
46622: PPUSH
46623: CALL_OW 546
46627: ST_TO_ADDR
// if hex [ 1 ] then
46628: LD_VAR 0 4
46632: PUSH
46633: LD_INT 1
46635: ARRAY
46636: IFFALSE 46640
// continue ;
46638: GO 46528
// h := hex [ 2 ] ;
46640: LD_ADDR_VAR 0 13
46644: PUSH
46645: LD_VAR 0 4
46649: PUSH
46650: LD_INT 2
46652: ARRAY
46653: ST_TO_ADDR
// if h + 7 < height then
46654: LD_VAR 0 13
46658: PUSH
46659: LD_INT 7
46661: PLUS
46662: PUSH
46663: LD_VAR 0 15
46667: LESS
46668: IFFALSE 46697
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46670: LD_ADDR_VAR 0 18
46674: PUSH
46675: LD_INT 7
46677: PUSH
46678: LD_INT 28
46680: PUSH
46681: LD_INT 45
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: PUSH
46689: LD_VAR 0 12
46693: ARRAY
46694: ST_TO_ADDR
// break ;
46695: GO 46699
// end ; end ; end ;
46697: GO 46528
46699: POP
46700: POP
// end ; if not weapon then
46701: LD_VAR 0 18
46705: NOT
46706: IFFALSE 46766
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46708: LD_ADDR_VAR 0 5
46712: PUSH
46713: LD_VAR 0 5
46717: PUSH
46718: LD_INT 11
46720: PUSH
46721: LD_INT 30
46723: PUSH
46724: LD_INT 49
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: DIFF
46732: ST_TO_ADDR
// if not list then
46733: LD_VAR 0 5
46737: NOT
46738: IFFALSE 46742
// exit ;
46740: GO 46884
// weapon := list [ rand ( 1 , list ) ] ;
46742: LD_ADDR_VAR 0 18
46746: PUSH
46747: LD_VAR 0 5
46751: PUSH
46752: LD_INT 1
46754: PPUSH
46755: LD_VAR 0 5
46759: PPUSH
46760: CALL_OW 12
46764: ARRAY
46765: ST_TO_ADDR
// end ; if weapon then
46766: LD_VAR 0 18
46770: IFFALSE 46884
// begin tmp := CostOfWeapon ( weapon ) ;
46772: LD_ADDR_VAR 0 14
46776: PUSH
46777: LD_VAR 0 18
46781: PPUSH
46782: CALL_OW 451
46786: ST_TO_ADDR
// j := GetBase ( tower ) ;
46787: LD_ADDR_VAR 0 9
46791: PUSH
46792: LD_VAR 0 1
46796: PPUSH
46797: CALL_OW 274
46801: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46802: LD_VAR 0 9
46806: PPUSH
46807: LD_INT 1
46809: PPUSH
46810: CALL_OW 275
46814: PUSH
46815: LD_VAR 0 14
46819: PUSH
46820: LD_INT 1
46822: ARRAY
46823: GREATEREQUAL
46824: PUSH
46825: LD_VAR 0 9
46829: PPUSH
46830: LD_INT 2
46832: PPUSH
46833: CALL_OW 275
46837: PUSH
46838: LD_VAR 0 14
46842: PUSH
46843: LD_INT 2
46845: ARRAY
46846: GREATEREQUAL
46847: AND
46848: PUSH
46849: LD_VAR 0 9
46853: PPUSH
46854: LD_INT 3
46856: PPUSH
46857: CALL_OW 275
46861: PUSH
46862: LD_VAR 0 14
46866: PUSH
46867: LD_INT 3
46869: ARRAY
46870: GREATEREQUAL
46871: AND
46872: IFFALSE 46884
// result := weapon ;
46874: LD_ADDR_VAR 0 3
46878: PUSH
46879: LD_VAR 0 18
46883: ST_TO_ADDR
// end ; end ;
46884: LD_VAR 0 3
46888: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46889: LD_INT 0
46891: PPUSH
46892: PPUSH
// result := true ;
46893: LD_ADDR_VAR 0 3
46897: PUSH
46898: LD_INT 1
46900: ST_TO_ADDR
// if array1 = array2 then
46901: LD_VAR 0 1
46905: PUSH
46906: LD_VAR 0 2
46910: EQUAL
46911: IFFALSE 46971
// begin for i = 1 to array1 do
46913: LD_ADDR_VAR 0 4
46917: PUSH
46918: DOUBLE
46919: LD_INT 1
46921: DEC
46922: ST_TO_ADDR
46923: LD_VAR 0 1
46927: PUSH
46928: FOR_TO
46929: IFFALSE 46967
// if array1 [ i ] <> array2 [ i ] then
46931: LD_VAR 0 1
46935: PUSH
46936: LD_VAR 0 4
46940: ARRAY
46941: PUSH
46942: LD_VAR 0 2
46946: PUSH
46947: LD_VAR 0 4
46951: ARRAY
46952: NONEQUAL
46953: IFFALSE 46965
// begin result := false ;
46955: LD_ADDR_VAR 0 3
46959: PUSH
46960: LD_INT 0
46962: ST_TO_ADDR
// break ;
46963: GO 46967
// end ;
46965: GO 46928
46967: POP
46968: POP
// end else
46969: GO 46979
// result := false ;
46971: LD_ADDR_VAR 0 3
46975: PUSH
46976: LD_INT 0
46978: ST_TO_ADDR
// end ;
46979: LD_VAR 0 3
46983: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46984: LD_INT 0
46986: PPUSH
46987: PPUSH
46988: PPUSH
// pom := GetBase ( fac ) ;
46989: LD_ADDR_VAR 0 5
46993: PUSH
46994: LD_VAR 0 1
46998: PPUSH
46999: CALL_OW 274
47003: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47004: LD_ADDR_VAR 0 4
47008: PUSH
47009: LD_VAR 0 2
47013: PUSH
47014: LD_INT 1
47016: ARRAY
47017: PPUSH
47018: LD_VAR 0 2
47022: PUSH
47023: LD_INT 2
47025: ARRAY
47026: PPUSH
47027: LD_VAR 0 2
47031: PUSH
47032: LD_INT 3
47034: ARRAY
47035: PPUSH
47036: LD_VAR 0 2
47040: PUSH
47041: LD_INT 4
47043: ARRAY
47044: PPUSH
47045: CALL_OW 449
47049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47050: LD_ADDR_VAR 0 3
47054: PUSH
47055: LD_VAR 0 5
47059: PPUSH
47060: LD_INT 1
47062: PPUSH
47063: CALL_OW 275
47067: PUSH
47068: LD_VAR 0 4
47072: PUSH
47073: LD_INT 1
47075: ARRAY
47076: GREATEREQUAL
47077: PUSH
47078: LD_VAR 0 5
47082: PPUSH
47083: LD_INT 2
47085: PPUSH
47086: CALL_OW 275
47090: PUSH
47091: LD_VAR 0 4
47095: PUSH
47096: LD_INT 2
47098: ARRAY
47099: GREATEREQUAL
47100: AND
47101: PUSH
47102: LD_VAR 0 5
47106: PPUSH
47107: LD_INT 3
47109: PPUSH
47110: CALL_OW 275
47114: PUSH
47115: LD_VAR 0 4
47119: PUSH
47120: LD_INT 3
47122: ARRAY
47123: GREATEREQUAL
47124: AND
47125: ST_TO_ADDR
// end ;
47126: LD_VAR 0 3
47130: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47131: LD_INT 0
47133: PPUSH
47134: PPUSH
47135: PPUSH
47136: PPUSH
// pom := GetBase ( building ) ;
47137: LD_ADDR_VAR 0 3
47141: PUSH
47142: LD_VAR 0 1
47146: PPUSH
47147: CALL_OW 274
47151: ST_TO_ADDR
// if not pom then
47152: LD_VAR 0 3
47156: NOT
47157: IFFALSE 47161
// exit ;
47159: GO 47331
// btype := GetBType ( building ) ;
47161: LD_ADDR_VAR 0 5
47165: PUSH
47166: LD_VAR 0 1
47170: PPUSH
47171: CALL_OW 266
47175: ST_TO_ADDR
// if btype = b_armoury then
47176: LD_VAR 0 5
47180: PUSH
47181: LD_INT 4
47183: EQUAL
47184: IFFALSE 47194
// btype := b_barracks ;
47186: LD_ADDR_VAR 0 5
47190: PUSH
47191: LD_INT 5
47193: ST_TO_ADDR
// if btype = b_depot then
47194: LD_VAR 0 5
47198: PUSH
47199: LD_INT 0
47201: EQUAL
47202: IFFALSE 47212
// btype := b_warehouse ;
47204: LD_ADDR_VAR 0 5
47208: PUSH
47209: LD_INT 1
47211: ST_TO_ADDR
// if btype = b_workshop then
47212: LD_VAR 0 5
47216: PUSH
47217: LD_INT 2
47219: EQUAL
47220: IFFALSE 47230
// btype := b_factory ;
47222: LD_ADDR_VAR 0 5
47226: PUSH
47227: LD_INT 3
47229: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47230: LD_ADDR_VAR 0 4
47234: PUSH
47235: LD_VAR 0 5
47239: PPUSH
47240: LD_VAR 0 1
47244: PPUSH
47245: CALL_OW 248
47249: PPUSH
47250: CALL_OW 450
47254: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47255: LD_ADDR_VAR 0 2
47259: PUSH
47260: LD_VAR 0 3
47264: PPUSH
47265: LD_INT 1
47267: PPUSH
47268: CALL_OW 275
47272: PUSH
47273: LD_VAR 0 4
47277: PUSH
47278: LD_INT 1
47280: ARRAY
47281: GREATEREQUAL
47282: PUSH
47283: LD_VAR 0 3
47287: PPUSH
47288: LD_INT 2
47290: PPUSH
47291: CALL_OW 275
47295: PUSH
47296: LD_VAR 0 4
47300: PUSH
47301: LD_INT 2
47303: ARRAY
47304: GREATEREQUAL
47305: AND
47306: PUSH
47307: LD_VAR 0 3
47311: PPUSH
47312: LD_INT 3
47314: PPUSH
47315: CALL_OW 275
47319: PUSH
47320: LD_VAR 0 4
47324: PUSH
47325: LD_INT 3
47327: ARRAY
47328: GREATEREQUAL
47329: AND
47330: ST_TO_ADDR
// end ;
47331: LD_VAR 0 2
47335: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47336: LD_INT 0
47338: PPUSH
47339: PPUSH
47340: PPUSH
// pom := GetBase ( building ) ;
47341: LD_ADDR_VAR 0 4
47345: PUSH
47346: LD_VAR 0 1
47350: PPUSH
47351: CALL_OW 274
47355: ST_TO_ADDR
// if not pom then
47356: LD_VAR 0 4
47360: NOT
47361: IFFALSE 47365
// exit ;
47363: GO 47466
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47365: LD_ADDR_VAR 0 5
47369: PUSH
47370: LD_VAR 0 2
47374: PPUSH
47375: LD_VAR 0 1
47379: PPUSH
47380: CALL_OW 248
47384: PPUSH
47385: CALL_OW 450
47389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47390: LD_ADDR_VAR 0 3
47394: PUSH
47395: LD_VAR 0 4
47399: PPUSH
47400: LD_INT 1
47402: PPUSH
47403: CALL_OW 275
47407: PUSH
47408: LD_VAR 0 5
47412: PUSH
47413: LD_INT 1
47415: ARRAY
47416: GREATEREQUAL
47417: PUSH
47418: LD_VAR 0 4
47422: PPUSH
47423: LD_INT 2
47425: PPUSH
47426: CALL_OW 275
47430: PUSH
47431: LD_VAR 0 5
47435: PUSH
47436: LD_INT 2
47438: ARRAY
47439: GREATEREQUAL
47440: AND
47441: PUSH
47442: LD_VAR 0 4
47446: PPUSH
47447: LD_INT 3
47449: PPUSH
47450: CALL_OW 275
47454: PUSH
47455: LD_VAR 0 5
47459: PUSH
47460: LD_INT 3
47462: ARRAY
47463: GREATEREQUAL
47464: AND
47465: ST_TO_ADDR
// end ;
47466: LD_VAR 0 3
47470: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
47471: LD_INT 0
47473: PPUSH
47474: PPUSH
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
47479: PPUSH
47480: PPUSH
47481: PPUSH
47482: PPUSH
// result := false ;
47483: LD_ADDR_VAR 0 6
47487: PUSH
47488: LD_INT 0
47490: ST_TO_ADDR
// if not base or not btype or not x or not y then
47491: LD_VAR 0 1
47495: NOT
47496: PUSH
47497: LD_VAR 0 2
47501: NOT
47502: OR
47503: PUSH
47504: LD_VAR 0 3
47508: NOT
47509: OR
47510: PUSH
47511: LD_VAR 0 4
47515: NOT
47516: OR
47517: IFFALSE 47521
// exit ;
47519: GO 48130
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47521: LD_ADDR_VAR 0 12
47525: PUSH
47526: LD_VAR 0 2
47530: PPUSH
47531: LD_VAR 0 3
47535: PPUSH
47536: LD_VAR 0 4
47540: PPUSH
47541: LD_VAR 0 5
47545: PPUSH
47546: LD_VAR 0 1
47550: PUSH
47551: LD_INT 1
47553: ARRAY
47554: PPUSH
47555: CALL_OW 248
47559: PPUSH
47560: LD_INT 0
47562: PPUSH
47563: CALL 48967 0 6
47567: ST_TO_ADDR
// if not hexes then
47568: LD_VAR 0 12
47572: NOT
47573: IFFALSE 47577
// exit ;
47575: GO 48130
// for i = 1 to hexes do
47577: LD_ADDR_VAR 0 7
47581: PUSH
47582: DOUBLE
47583: LD_INT 1
47585: DEC
47586: ST_TO_ADDR
47587: LD_VAR 0 12
47591: PUSH
47592: FOR_TO
47593: IFFALSE 48128
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47595: LD_ADDR_VAR 0 11
47599: PUSH
47600: LD_VAR 0 12
47604: PUSH
47605: LD_VAR 0 7
47609: ARRAY
47610: PUSH
47611: LD_INT 1
47613: ARRAY
47614: PPUSH
47615: LD_VAR 0 12
47619: PUSH
47620: LD_VAR 0 7
47624: ARRAY
47625: PUSH
47626: LD_INT 2
47628: ARRAY
47629: PPUSH
47630: CALL_OW 428
47634: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47635: LD_VAR 0 12
47639: PUSH
47640: LD_VAR 0 7
47644: ARRAY
47645: PUSH
47646: LD_INT 1
47648: ARRAY
47649: PPUSH
47650: LD_VAR 0 12
47654: PUSH
47655: LD_VAR 0 7
47659: ARRAY
47660: PUSH
47661: LD_INT 2
47663: ARRAY
47664: PPUSH
47665: CALL_OW 351
47669: PUSH
47670: LD_VAR 0 12
47674: PUSH
47675: LD_VAR 0 7
47679: ARRAY
47680: PUSH
47681: LD_INT 1
47683: ARRAY
47684: PPUSH
47685: LD_VAR 0 12
47689: PUSH
47690: LD_VAR 0 7
47694: ARRAY
47695: PUSH
47696: LD_INT 2
47698: ARRAY
47699: PPUSH
47700: CALL_OW 488
47704: NOT
47705: OR
47706: PUSH
47707: LD_VAR 0 11
47711: PPUSH
47712: CALL_OW 247
47716: PUSH
47717: LD_INT 3
47719: EQUAL
47720: OR
47721: IFFALSE 47727
// exit ;
47723: POP
47724: POP
47725: GO 48130
// if not tmp or not tmp in base then
47727: LD_VAR 0 11
47731: NOT
47732: PUSH
47733: LD_VAR 0 11
47737: PUSH
47738: LD_VAR 0 1
47742: IN
47743: NOT
47744: OR
47745: IFFALSE 47749
// continue ;
47747: GO 47592
// result := true ;
47749: LD_ADDR_VAR 0 6
47753: PUSH
47754: LD_INT 1
47756: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47757: LD_ADDR_VAR 0 15
47761: PUSH
47762: LD_VAR 0 1
47766: PPUSH
47767: LD_INT 22
47769: PUSH
47770: LD_VAR 0 11
47774: PPUSH
47775: CALL_OW 255
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: LD_INT 30
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 30
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PPUSH
47816: CALL_OW 72
47820: ST_TO_ADDR
// if dep then
47821: LD_VAR 0 15
47825: IFFALSE 47961
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47827: LD_ADDR_VAR 0 14
47831: PUSH
47832: LD_VAR 0 15
47836: PUSH
47837: LD_INT 1
47839: ARRAY
47840: PPUSH
47841: CALL_OW 250
47845: PPUSH
47846: LD_VAR 0 15
47850: PUSH
47851: LD_INT 1
47853: ARRAY
47854: PPUSH
47855: CALL_OW 254
47859: PPUSH
47860: LD_INT 5
47862: PPUSH
47863: CALL_OW 272
47867: PUSH
47868: LD_VAR 0 15
47872: PUSH
47873: LD_INT 1
47875: ARRAY
47876: PPUSH
47877: CALL_OW 251
47881: PPUSH
47882: LD_VAR 0 15
47886: PUSH
47887: LD_INT 1
47889: ARRAY
47890: PPUSH
47891: CALL_OW 254
47895: PPUSH
47896: LD_INT 5
47898: PPUSH
47899: CALL_OW 273
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47908: LD_VAR 0 14
47912: PUSH
47913: LD_INT 1
47915: ARRAY
47916: PPUSH
47917: LD_VAR 0 14
47921: PUSH
47922: LD_INT 2
47924: ARRAY
47925: PPUSH
47926: CALL_OW 488
47930: IFFALSE 47961
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47932: LD_VAR 0 11
47936: PPUSH
47937: LD_VAR 0 14
47941: PUSH
47942: LD_INT 1
47944: ARRAY
47945: PPUSH
47946: LD_VAR 0 14
47950: PUSH
47951: LD_INT 2
47953: ARRAY
47954: PPUSH
47955: CALL_OW 111
// continue ;
47959: GO 47592
// end ; end ; r := GetDir ( tmp ) ;
47961: LD_ADDR_VAR 0 13
47965: PUSH
47966: LD_VAR 0 11
47970: PPUSH
47971: CALL_OW 254
47975: ST_TO_ADDR
// if r = 5 then
47976: LD_VAR 0 13
47980: PUSH
47981: LD_INT 5
47983: EQUAL
47984: IFFALSE 47994
// r := 0 ;
47986: LD_ADDR_VAR 0 13
47990: PUSH
47991: LD_INT 0
47993: ST_TO_ADDR
// for j = r to 5 do
47994: LD_ADDR_VAR 0 8
47998: PUSH
47999: DOUBLE
48000: LD_VAR 0 13
48004: DEC
48005: ST_TO_ADDR
48006: LD_INT 5
48008: PUSH
48009: FOR_TO
48010: IFFALSE 48124
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48012: LD_ADDR_VAR 0 9
48016: PUSH
48017: LD_VAR 0 11
48021: PPUSH
48022: CALL_OW 250
48026: PPUSH
48027: LD_VAR 0 8
48031: PPUSH
48032: LD_INT 2
48034: PPUSH
48035: CALL_OW 272
48039: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48040: LD_ADDR_VAR 0 10
48044: PUSH
48045: LD_VAR 0 11
48049: PPUSH
48050: CALL_OW 251
48054: PPUSH
48055: LD_VAR 0 8
48059: PPUSH
48060: LD_INT 2
48062: PPUSH
48063: CALL_OW 273
48067: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48068: LD_VAR 0 9
48072: PPUSH
48073: LD_VAR 0 10
48077: PPUSH
48078: CALL_OW 488
48082: PUSH
48083: LD_VAR 0 9
48087: PPUSH
48088: LD_VAR 0 10
48092: PPUSH
48093: CALL_OW 428
48097: NOT
48098: AND
48099: IFFALSE 48122
// begin ComMoveXY ( tmp , _x , _y ) ;
48101: LD_VAR 0 11
48105: PPUSH
48106: LD_VAR 0 9
48110: PPUSH
48111: LD_VAR 0 10
48115: PPUSH
48116: CALL_OW 111
// break ;
48120: GO 48124
// end ; end ;
48122: GO 48009
48124: POP
48125: POP
// end ;
48126: GO 47592
48128: POP
48129: POP
// end ;
48130: LD_VAR 0 6
48134: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48135: LD_INT 0
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
48141: PPUSH
48142: PPUSH
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
// result := false ;
48147: LD_ADDR_VAR 0 6
48151: PUSH
48152: LD_INT 0
48154: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48155: LD_VAR 0 1
48159: NOT
48160: PUSH
48161: LD_VAR 0 1
48165: PPUSH
48166: CALL_OW 266
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: IN
48181: NOT
48182: OR
48183: PUSH
48184: LD_VAR 0 2
48188: NOT
48189: OR
48190: PUSH
48191: LD_VAR 0 5
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: LD_INT 4
48210: PUSH
48211: LD_INT 5
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: IN
48222: NOT
48223: OR
48224: PUSH
48225: LD_VAR 0 3
48229: PPUSH
48230: LD_VAR 0 4
48234: PPUSH
48235: CALL_OW 488
48239: NOT
48240: OR
48241: IFFALSE 48245
// exit ;
48243: GO 48962
// pom := GetBase ( depot ) ;
48245: LD_ADDR_VAR 0 10
48249: PUSH
48250: LD_VAR 0 1
48254: PPUSH
48255: CALL_OW 274
48259: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48260: LD_ADDR_VAR 0 11
48264: PUSH
48265: LD_VAR 0 2
48269: PPUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 248
48279: PPUSH
48280: CALL_OW 450
48284: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48285: LD_VAR 0 10
48289: PPUSH
48290: LD_INT 1
48292: PPUSH
48293: CALL_OW 275
48297: PUSH
48298: LD_VAR 0 11
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: GREATEREQUAL
48307: PUSH
48308: LD_VAR 0 10
48312: PPUSH
48313: LD_INT 2
48315: PPUSH
48316: CALL_OW 275
48320: PUSH
48321: LD_VAR 0 11
48325: PUSH
48326: LD_INT 2
48328: ARRAY
48329: GREATEREQUAL
48330: AND
48331: PUSH
48332: LD_VAR 0 10
48336: PPUSH
48337: LD_INT 3
48339: PPUSH
48340: CALL_OW 275
48344: PUSH
48345: LD_VAR 0 11
48349: PUSH
48350: LD_INT 3
48352: ARRAY
48353: GREATEREQUAL
48354: AND
48355: NOT
48356: IFFALSE 48360
// exit ;
48358: GO 48962
// if GetBType ( depot ) = b_depot then
48360: LD_VAR 0 1
48364: PPUSH
48365: CALL_OW 266
48369: PUSH
48370: LD_INT 0
48372: EQUAL
48373: IFFALSE 48385
// dist := 28 else
48375: LD_ADDR_VAR 0 14
48379: PUSH
48380: LD_INT 28
48382: ST_TO_ADDR
48383: GO 48393
// dist := 36 ;
48385: LD_ADDR_VAR 0 14
48389: PUSH
48390: LD_INT 36
48392: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48393: LD_VAR 0 1
48397: PPUSH
48398: LD_VAR 0 3
48402: PPUSH
48403: LD_VAR 0 4
48407: PPUSH
48408: CALL_OW 297
48412: PUSH
48413: LD_VAR 0 14
48417: GREATER
48418: IFFALSE 48422
// exit ;
48420: GO 48962
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48422: LD_ADDR_VAR 0 12
48426: PUSH
48427: LD_VAR 0 2
48431: PPUSH
48432: LD_VAR 0 3
48436: PPUSH
48437: LD_VAR 0 4
48441: PPUSH
48442: LD_VAR 0 5
48446: PPUSH
48447: LD_VAR 0 1
48451: PPUSH
48452: CALL_OW 248
48456: PPUSH
48457: LD_INT 0
48459: PPUSH
48460: CALL 48967 0 6
48464: ST_TO_ADDR
// if not hexes then
48465: LD_VAR 0 12
48469: NOT
48470: IFFALSE 48474
// exit ;
48472: GO 48962
// hex := GetHexInfo ( x , y ) ;
48474: LD_ADDR_VAR 0 15
48478: PUSH
48479: LD_VAR 0 3
48483: PPUSH
48484: LD_VAR 0 4
48488: PPUSH
48489: CALL_OW 546
48493: ST_TO_ADDR
// if hex [ 1 ] then
48494: LD_VAR 0 15
48498: PUSH
48499: LD_INT 1
48501: ARRAY
48502: IFFALSE 48506
// exit ;
48504: GO 48962
// height := hex [ 2 ] ;
48506: LD_ADDR_VAR 0 13
48510: PUSH
48511: LD_VAR 0 15
48515: PUSH
48516: LD_INT 2
48518: ARRAY
48519: ST_TO_ADDR
// for i = 1 to hexes do
48520: LD_ADDR_VAR 0 7
48524: PUSH
48525: DOUBLE
48526: LD_INT 1
48528: DEC
48529: ST_TO_ADDR
48530: LD_VAR 0 12
48534: PUSH
48535: FOR_TO
48536: IFFALSE 48866
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48538: LD_VAR 0 12
48542: PUSH
48543: LD_VAR 0 7
48547: ARRAY
48548: PUSH
48549: LD_INT 1
48551: ARRAY
48552: PPUSH
48553: LD_VAR 0 12
48557: PUSH
48558: LD_VAR 0 7
48562: ARRAY
48563: PUSH
48564: LD_INT 2
48566: ARRAY
48567: PPUSH
48568: CALL_OW 488
48572: NOT
48573: PUSH
48574: LD_VAR 0 12
48578: PUSH
48579: LD_VAR 0 7
48583: ARRAY
48584: PUSH
48585: LD_INT 1
48587: ARRAY
48588: PPUSH
48589: LD_VAR 0 12
48593: PUSH
48594: LD_VAR 0 7
48598: ARRAY
48599: PUSH
48600: LD_INT 2
48602: ARRAY
48603: PPUSH
48604: CALL_OW 428
48608: PUSH
48609: LD_INT 0
48611: GREATER
48612: OR
48613: PUSH
48614: LD_VAR 0 12
48618: PUSH
48619: LD_VAR 0 7
48623: ARRAY
48624: PUSH
48625: LD_INT 1
48627: ARRAY
48628: PPUSH
48629: LD_VAR 0 12
48633: PUSH
48634: LD_VAR 0 7
48638: ARRAY
48639: PUSH
48640: LD_INT 2
48642: ARRAY
48643: PPUSH
48644: CALL_OW 351
48648: OR
48649: IFFALSE 48655
// exit ;
48651: POP
48652: POP
48653: GO 48962
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48655: LD_ADDR_VAR 0 8
48659: PUSH
48660: LD_VAR 0 12
48664: PUSH
48665: LD_VAR 0 7
48669: ARRAY
48670: PUSH
48671: LD_INT 1
48673: ARRAY
48674: PPUSH
48675: LD_VAR 0 12
48679: PUSH
48680: LD_VAR 0 7
48684: ARRAY
48685: PUSH
48686: LD_INT 2
48688: ARRAY
48689: PPUSH
48690: CALL_OW 546
48694: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48695: LD_VAR 0 8
48699: PUSH
48700: LD_INT 1
48702: ARRAY
48703: PUSH
48704: LD_VAR 0 8
48708: PUSH
48709: LD_INT 2
48711: ARRAY
48712: PUSH
48713: LD_VAR 0 13
48717: PUSH
48718: LD_INT 2
48720: PLUS
48721: GREATER
48722: OR
48723: PUSH
48724: LD_VAR 0 8
48728: PUSH
48729: LD_INT 2
48731: ARRAY
48732: PUSH
48733: LD_VAR 0 13
48737: PUSH
48738: LD_INT 2
48740: MINUS
48741: LESS
48742: OR
48743: PUSH
48744: LD_VAR 0 8
48748: PUSH
48749: LD_INT 3
48751: ARRAY
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 8
48758: PUSH
48759: LD_INT 9
48761: PUSH
48762: LD_INT 10
48764: PUSH
48765: LD_INT 11
48767: PUSH
48768: LD_INT 12
48770: PUSH
48771: LD_INT 13
48773: PUSH
48774: LD_INT 16
48776: PUSH
48777: LD_INT 17
48779: PUSH
48780: LD_INT 18
48782: PUSH
48783: LD_INT 19
48785: PUSH
48786: LD_INT 20
48788: PUSH
48789: LD_INT 21
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: IN
48807: NOT
48808: OR
48809: PUSH
48810: LD_VAR 0 8
48814: PUSH
48815: LD_INT 5
48817: ARRAY
48818: NOT
48819: OR
48820: PUSH
48821: LD_VAR 0 8
48825: PUSH
48826: LD_INT 6
48828: ARRAY
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 7
48838: PUSH
48839: LD_INT 9
48841: PUSH
48842: LD_INT 10
48844: PUSH
48845: LD_INT 11
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: IN
48856: NOT
48857: OR
48858: IFFALSE 48864
// exit ;
48860: POP
48861: POP
48862: GO 48962
// end ;
48864: GO 48535
48866: POP
48867: POP
// side := GetSide ( depot ) ;
48868: LD_ADDR_VAR 0 9
48872: PUSH
48873: LD_VAR 0 1
48877: PPUSH
48878: CALL_OW 255
48882: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48883: LD_VAR 0 9
48887: PPUSH
48888: LD_VAR 0 3
48892: PPUSH
48893: LD_VAR 0 4
48897: PPUSH
48898: LD_INT 20
48900: PPUSH
48901: CALL 41616 0 4
48905: PUSH
48906: LD_INT 4
48908: ARRAY
48909: IFFALSE 48913
// exit ;
48911: GO 48962
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48913: LD_VAR 0 2
48917: PUSH
48918: LD_INT 29
48920: PUSH
48921: LD_INT 30
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: IN
48928: PUSH
48929: LD_VAR 0 3
48933: PPUSH
48934: LD_VAR 0 4
48938: PPUSH
48939: LD_VAR 0 9
48943: PPUSH
48944: CALL_OW 440
48948: NOT
48949: AND
48950: IFFALSE 48954
// exit ;
48952: GO 48962
// result := true ;
48954: LD_ADDR_VAR 0 6
48958: PUSH
48959: LD_INT 1
48961: ST_TO_ADDR
// end ;
48962: LD_VAR 0 6
48966: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48967: LD_INT 0
48969: PPUSH
48970: PPUSH
48971: PPUSH
48972: PPUSH
48973: PPUSH
48974: PPUSH
48975: PPUSH
48976: PPUSH
48977: PPUSH
48978: PPUSH
48979: PPUSH
48980: PPUSH
48981: PPUSH
48982: PPUSH
48983: PPUSH
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
48992: PPUSH
48993: PPUSH
48994: PPUSH
48995: PPUSH
48996: PPUSH
48997: PPUSH
48998: PPUSH
48999: PPUSH
49000: PPUSH
49001: PPUSH
49002: PPUSH
49003: PPUSH
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
// result = [ ] ;
49027: LD_ADDR_VAR 0 7
49031: PUSH
49032: EMPTY
49033: ST_TO_ADDR
// temp_list = [ ] ;
49034: LD_ADDR_VAR 0 9
49038: PUSH
49039: EMPTY
49040: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49041: LD_VAR 0 4
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: LD_INT 3
49057: PUSH
49058: LD_INT 4
49060: PUSH
49061: LD_INT 5
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: IN
49072: NOT
49073: PUSH
49074: LD_VAR 0 1
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: IN
49089: PUSH
49090: LD_VAR 0 5
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: IN
49109: NOT
49110: AND
49111: OR
49112: IFFALSE 49116
// exit ;
49114: GO 67507
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49116: LD_VAR 0 1
49120: PUSH
49121: LD_INT 6
49123: PUSH
49124: LD_INT 7
49126: PUSH
49127: LD_INT 8
49129: PUSH
49130: LD_INT 13
49132: PUSH
49133: LD_INT 12
49135: PUSH
49136: LD_INT 15
49138: PUSH
49139: LD_INT 11
49141: PUSH
49142: LD_INT 14
49144: PUSH
49145: LD_INT 10
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: IN
49159: IFFALSE 49169
// btype = b_lab ;
49161: LD_ADDR_VAR 0 1
49165: PUSH
49166: LD_INT 6
49168: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49169: LD_VAR 0 6
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: LIST
49187: IN
49188: NOT
49189: PUSH
49190: LD_VAR 0 1
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: LD_INT 6
49209: PUSH
49210: LD_INT 36
49212: PUSH
49213: LD_INT 4
49215: PUSH
49216: LD_INT 5
49218: PUSH
49219: LD_INT 31
49221: PUSH
49222: LD_INT 32
49224: PUSH
49225: LD_INT 33
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: IN
49241: NOT
49242: PUSH
49243: LD_VAR 0 6
49247: PUSH
49248: LD_INT 1
49250: EQUAL
49251: AND
49252: OR
49253: PUSH
49254: LD_VAR 0 1
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: IN
49269: NOT
49270: PUSH
49271: LD_VAR 0 6
49275: PUSH
49276: LD_INT 2
49278: EQUAL
49279: AND
49280: OR
49281: IFFALSE 49291
// mode = 0 ;
49283: LD_ADDR_VAR 0 6
49287: PUSH
49288: LD_INT 0
49290: ST_TO_ADDR
// case mode of 0 :
49291: LD_VAR 0 6
49295: PUSH
49296: LD_INT 0
49298: DOUBLE
49299: EQUAL
49300: IFTRUE 49304
49302: GO 60757
49304: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49305: LD_ADDR_VAR 0 11
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49498: LD_ADDR_VAR 0 12
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49694: LD_ADDR_VAR 0 13
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49893: LD_ADDR_VAR 0 14
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 3
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50089: LD_ADDR_VAR 0 15
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50282: LD_ADDR_VAR 0 16
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: LD_INT 3
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50475: LD_ADDR_VAR 0 17
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50705: LD_ADDR_VAR 0 18
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50935: LD_ADDR_VAR 0 19
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51165: LD_ADDR_VAR 0 20
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51395: LD_ADDR_VAR 0 21
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51625: LD_ADDR_VAR 0 22
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51855: LD_ADDR_VAR 0 23
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: LD_INT 3
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52135: LD_ADDR_VAR 0 24
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 2
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52411: LD_ADDR_VAR 0 25
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52685: LD_ADDR_VAR 0 26
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52961: LD_ADDR_VAR 0 27
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53241: LD_ADDR_VAR 0 28
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: LD_INT 3
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53523: LD_ADDR_VAR 0 29
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53802: LD_ADDR_VAR 0 30
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 3
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 3
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 3
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54080: LD_ADDR_VAR 0 31
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 3
54323: NEG
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54358: LD_ADDR_VAR 0 32
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 3
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54636: LD_ADDR_VAR 0 33
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54915: LD_ADDR_VAR 0 34
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 3
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55195: LD_ADDR_VAR 0 35
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55307: LD_ADDR_VAR 0 36
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55419: LD_ADDR_VAR 0 37
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55531: LD_ADDR_VAR 0 38
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55643: LD_ADDR_VAR 0 39
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55755: LD_ADDR_VAR 0 40
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55867: LD_ADDR_VAR 0 41
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: NEG
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56217: LD_ADDR_VAR 0 42
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 3
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: LD_INT 3
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56567: LD_ADDR_VAR 0 43
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 3
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 3
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 3
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 3
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 3
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56915: LD_ADDR_VAR 0 44
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: NEG
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57265: LD_ADDR_VAR 0 45
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57615: LD_ADDR_VAR 0 46
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 3
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57963: LD_ADDR_VAR 0 47
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58114: LD_ADDR_VAR 0 48
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58261: LD_ADDR_VAR 0 49
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58405: LD_ADDR_VAR 0 50
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 2
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58549: LD_ADDR_VAR 0 51
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58696: LD_ADDR_VAR 0 52
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: LD_INT 2
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58847: LD_ADDR_VAR 0 53
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59077: LD_ADDR_VAR 0 54
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 2
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59307: LD_ADDR_VAR 0 55
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59537: LD_ADDR_VAR 0 56
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 2
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59767: LD_ADDR_VAR 0 57
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 2
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59997: LD_ADDR_VAR 0 58
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60227: LD_ADDR_VAR 0 59
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60315: LD_ADDR_VAR 0 60
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60403: LD_ADDR_VAR 0 61
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60491: LD_ADDR_VAR 0 62
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60579: LD_ADDR_VAR 0 63
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60667: LD_ADDR_VAR 0 64
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: ST_TO_ADDR
// end ; 1 :
60755: GO 66652
60757: LD_INT 1
60759: DOUBLE
60760: EQUAL
60761: IFTRUE 60765
60763: GO 63388
60765: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60766: LD_ADDR_VAR 0 11
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60810: LD_ADDR_VAR 0 12
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60851: LD_ADDR_VAR 0 13
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: LIST
60890: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60891: LD_ADDR_VAR 0 14
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 3
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60932: LD_ADDR_VAR 0 15
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 3
60961: NEG
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: LIST
60975: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60976: LD_ADDR_VAR 0 16
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: LD_INT 3
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 3
60995: NEG
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: LD_INT 3
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61022: LD_ADDR_VAR 0 17
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: LD_INT 3
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: LIST
61065: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61066: LD_ADDR_VAR 0 18
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 3
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 3
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61107: LD_ADDR_VAR 0 19
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: LD_INT 3
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61147: LD_ADDR_VAR 0 20
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: LIST
61187: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61188: LD_ADDR_VAR 0 21
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: NEG
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 3
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61232: LD_ADDR_VAR 0 22
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61278: LD_ADDR_VAR 0 23
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 3
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 4
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61322: LD_ADDR_VAR 0 24
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61363: LD_ADDR_VAR 0 25
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 4
61380: PUSH
61381: LD_INT 3
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: LD_INT 4
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: LIST
61402: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61403: LD_ADDR_VAR 0 26
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61444: LD_ADDR_VAR 0 27
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 4
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: LIST
61487: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61488: LD_ADDR_VAR 0 28
61492: PUSH
61493: LD_INT 3
61495: NEG
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 3
61507: NEG
61508: PUSH
61509: LD_INT 4
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 4
61519: NEG
61520: PUSH
61521: LD_INT 3
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61534: LD_ADDR_VAR 0 29
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: LD_INT 4
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 4
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 3
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 5
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: LD_INT 5
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: LD_INT 4
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: LD_INT 6
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: LD_INT 6
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: LD_INT 5
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61689: LD_ADDR_VAR 0 30
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 3
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 4
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 4
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 4
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 5
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 5
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 5
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 6
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 6
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61832: LD_ADDR_VAR 0 31
61836: PUSH
61837: LD_INT 3
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 3
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: LD_INT 3
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 4
61869: PUSH
61870: LD_INT 3
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 4
61879: PUSH
61880: LD_INT 4
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 3
61889: PUSH
61890: LD_INT 4
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 5
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 5
61909: PUSH
61910: LD_INT 5
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: PUSH
61920: LD_INT 5
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 6
61929: PUSH
61930: LD_INT 5
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 6
61939: PUSH
61940: LD_INT 6
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 5
61949: PUSH
61950: LD_INT 6
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61971: LD_ADDR_VAR 0 32
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: LD_INT 4
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 4
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 5
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 5
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 4
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: LD_INT 6
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 6
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: LD_INT 5
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62114: LD_ADDR_VAR 0 33
62118: PUSH
62119: LD_INT 2
62121: NEG
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 3
62143: NEG
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 3
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 4
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 4
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 4
62189: NEG
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 5
62200: NEG
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 5
62211: NEG
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 5
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 6
62234: NEG
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 6
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62269: LD_ADDR_VAR 0 34
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: LD_INT 3
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 3
62312: NEG
62313: PUSH
62314: LD_INT 4
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 4
62324: NEG
62325: PUSH
62326: LD_INT 3
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 4
62336: NEG
62337: PUSH
62338: LD_INT 4
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 4
62348: NEG
62349: PUSH
62350: LD_INT 5
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 5
62360: NEG
62361: PUSH
62362: LD_INT 4
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 5
62372: NEG
62373: PUSH
62374: LD_INT 5
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 5
62384: NEG
62385: PUSH
62386: LD_INT 6
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 6
62396: NEG
62397: PUSH
62398: LD_INT 5
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 6
62408: NEG
62409: PUSH
62410: LD_INT 6
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62432: LD_ADDR_VAR 0 41
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62476: LD_ADDR_VAR 0 42
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62517: LD_ADDR_VAR 0 43
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62557: LD_ADDR_VAR 0 44
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62598: LD_ADDR_VAR 0 45
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 3
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62642: LD_ADDR_VAR 0 46
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: LD_INT 3
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62688: LD_ADDR_VAR 0 47
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 3
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62721: LD_ADDR_VAR 0 48
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 2
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62752: LD_ADDR_VAR 0 49
62756: PUSH
62757: LD_INT 3
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62781: LD_ADDR_VAR 0 50
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62810: LD_ADDR_VAR 0 51
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 2
62828: NEG
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62841: LD_ADDR_VAR 0 52
62845: PUSH
62846: LD_INT 3
62848: NEG
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62874: LD_ADDR_VAR 0 53
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 3
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: LIST
62917: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62918: LD_ADDR_VAR 0 54
62922: PUSH
62923: LD_INT 2
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62959: LD_ADDR_VAR 0 55
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 3
62976: PUSH
62977: LD_INT 3
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: LD_INT 3
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62999: LD_ADDR_VAR 0 56
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 3
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: LD_INT 3
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63040: LD_ADDR_VAR 0 57
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 3
63058: NEG
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 3
63069: NEG
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63084: LD_ADDR_VAR 0 58
63088: PUSH
63089: LD_INT 2
63091: NEG
63092: PUSH
63093: LD_INT 3
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 3
63103: NEG
63104: PUSH
63105: LD_INT 2
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: NEG
63116: PUSH
63117: LD_INT 3
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63130: LD_ADDR_VAR 0 59
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63174: LD_ADDR_VAR 0 60
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63215: LD_ADDR_VAR 0 61
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: LD_INT 2
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: LIST
63254: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63255: LD_ADDR_VAR 0 62
63259: PUSH
63260: LD_INT 1
63262: PUSH
63263: LD_INT 2
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 2
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63296: LD_ADDR_VAR 0 63
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 2
63314: NEG
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 2
63325: NEG
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63340: LD_ADDR_VAR 0 64
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: LD_INT 2
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: LIST
63385: ST_TO_ADDR
// end ; 2 :
63386: GO 66652
63388: LD_INT 2
63390: DOUBLE
63391: EQUAL
63392: IFTRUE 63396
63394: GO 66651
63396: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63397: LD_ADDR_VAR 0 29
63401: PUSH
63402: LD_INT 4
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 4
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 5
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 5
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 4
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 3
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 3
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 5
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 3
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 3
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 4
63517: PUSH
63518: LD_INT 3
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 4
63527: PUSH
63528: LD_INT 4
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 3
63537: PUSH
63538: LD_INT 4
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: PUSH
63548: LD_INT 3
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 4
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: LD_INT 4
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: LD_INT 4
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 4
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: LD_INT 5
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 5
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: LD_INT 4
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 1
63648: NEG
63649: PUSH
63650: LD_INT 3
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 5
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 3
63680: NEG
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 3
63691: NEG
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: NEG
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 3
63725: NEG
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 4
63736: NEG
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 4
63747: NEG
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 4
63759: NEG
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: LD_INT 2
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 4
63782: NEG
63783: PUSH
63784: LD_INT 4
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 4
63794: NEG
63795: PUSH
63796: LD_INT 5
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 4
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 3
63818: NEG
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 4
63830: NEG
63831: PUSH
63832: LD_INT 3
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 5
63842: NEG
63843: PUSH
63844: LD_INT 4
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 5
63854: NEG
63855: PUSH
63856: LD_INT 5
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: NEG
63867: PUSH
63868: LD_INT 5
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 5
63878: NEG
63879: PUSH
63880: LD_INT 3
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63935: LD_ADDR_VAR 0 30
63939: PUSH
63940: LD_INT 4
63942: PUSH
63943: LD_INT 4
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 4
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 5
63962: PUSH
63963: LD_INT 4
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 5
63972: PUSH
63973: LD_INT 5
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 4
63982: PUSH
63983: LD_INT 5
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 3
63992: PUSH
63993: LD_INT 4
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 3
64002: PUSH
64003: LD_INT 3
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 5
64012: PUSH
64013: LD_INT 3
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: LD_INT 5
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: LD_INT 3
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: PUSH
64053: LD_INT 3
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: LD_INT 4
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: LD_INT 4
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: LD_INT 3
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 2
64104: PUSH
64105: LD_INT 4
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 4
64125: NEG
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 4
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 3
64148: NEG
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 3
64159: NEG
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 4
64170: NEG
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 5
64181: NEG
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 5
64192: NEG
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 5
64204: NEG
64205: PUSH
64206: LD_INT 2
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 3
64216: NEG
64217: PUSH
64218: LD_INT 2
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 3
64227: NEG
64228: PUSH
64229: LD_INT 3
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 3
64239: NEG
64240: PUSH
64241: LD_INT 4
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: NEG
64252: PUSH
64253: LD_INT 3
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 2
64263: NEG
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 3
64275: NEG
64276: PUSH
64277: LD_INT 2
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 4
64287: NEG
64288: PUSH
64289: LD_INT 3
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 4
64299: NEG
64300: PUSH
64301: LD_INT 4
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 2
64311: NEG
64312: PUSH
64313: LD_INT 4
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 4
64323: NEG
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 4
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 5
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 4
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: LD_INT 3
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: LD_INT 3
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: LD_INT 4
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 5
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: LD_INT 3
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 2
64425: NEG
64426: PUSH
64427: LD_INT 5
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64482: LD_ADDR_VAR 0 31
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 4
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 3
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: LD_INT 4
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: LD_INT 5
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 5
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: LD_INT 4
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: LD_INT 5
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 2
64571: NEG
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 3
64582: NEG
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: NEG
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 2
64605: NEG
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 3
64627: NEG
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 4
64638: NEG
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 4
64649: NEG
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 4
64661: NEG
64662: PUSH
64663: LD_INT 2
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: LD_INT 2
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 4
64684: NEG
64685: PUSH
64686: LD_INT 4
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 4
64696: NEG
64697: PUSH
64698: LD_INT 5
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 3
64708: NEG
64709: PUSH
64710: LD_INT 4
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 3
64720: NEG
64721: PUSH
64722: LD_INT 3
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 4
64732: NEG
64733: PUSH
64734: LD_INT 3
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 5
64744: NEG
64745: PUSH
64746: LD_INT 4
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 5
64756: NEG
64757: PUSH
64758: LD_INT 5
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: LD_INT 5
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 5
64780: NEG
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 3
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_INT 4
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: LD_INT 2
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: LD_INT 2
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: LD_INT 3
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: LD_INT 4
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PUSH
64884: LD_INT 4
64886: NEG
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 4
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 4
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 5
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 5
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 4
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 3
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: LD_INT 2
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 5
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65032: LD_ADDR_VAR 0 32
65036: PUSH
65037: LD_INT 4
65039: NEG
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 4
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 3
65073: NEG
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 4
65084: NEG
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 5
65095: NEG
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 5
65106: NEG
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 5
65118: NEG
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 3
65130: NEG
65131: PUSH
65132: LD_INT 2
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 3
65153: NEG
65154: PUSH
65155: LD_INT 4
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: NEG
65166: PUSH
65167: LD_INT 3
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 2
65177: NEG
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 3
65189: NEG
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 4
65201: NEG
65202: PUSH
65203: LD_INT 3
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 4
65213: NEG
65214: PUSH
65215: LD_INT 4
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: NEG
65226: PUSH
65227: LD_INT 4
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 4
65237: NEG
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 0
65249: PUSH
65250: LD_INT 4
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: LD_INT 5
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: LD_INT 4
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: LD_INT 3
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: LD_INT 3
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 4
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: LD_INT 5
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 2
65328: PUSH
65329: LD_INT 3
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: LD_INT 5
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 3
65351: PUSH
65352: LD_INT 0
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 3
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 4
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 4
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 4
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 4
65444: PUSH
65445: LD_INT 4
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 4
65454: PUSH
65455: LD_INT 3
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 5
65464: PUSH
65465: LD_INT 4
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 5
65474: PUSH
65475: LD_INT 5
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 4
65484: PUSH
65485: LD_INT 5
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 3
65494: PUSH
65495: LD_INT 4
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 3
65504: PUSH
65505: LD_INT 3
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 5
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: LD_INT 5
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65579: LD_ADDR_VAR 0 33
65583: PUSH
65584: LD_INT 4
65586: NEG
65587: PUSH
65588: LD_INT 4
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 4
65598: NEG
65599: PUSH
65600: LD_INT 5
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: LD_INT 4
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 3
65622: NEG
65623: PUSH
65624: LD_INT 3
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 4
65634: NEG
65635: PUSH
65636: LD_INT 3
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 5
65646: NEG
65647: PUSH
65648: LD_INT 4
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 5
65658: NEG
65659: PUSH
65660: LD_INT 5
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: LD_INT 5
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 5
65682: NEG
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: LD_INT 4
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: PUSH
65717: LD_INT 3
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: LD_INT 2
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 2
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: LD_INT 3
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: NEG
65762: PUSH
65763: LD_INT 4
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 2
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: LD_INT 4
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 4
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 4
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 5
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 5
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 4
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 3
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 3
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 5
65879: PUSH
65880: LD_INT 2
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 4
65909: PUSH
65910: LD_INT 3
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 4
65919: PUSH
65920: LD_INT 4
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 3
65929: PUSH
65930: LD_INT 4
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: LD_INT 2
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 4
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 2
65969: PUSH
65970: LD_INT 4
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 4
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 3
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: LD_INT 5
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: LD_INT 5
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: LD_INT 4
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 2
66051: PUSH
66052: LD_INT 5
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 2
66061: NEG
66062: PUSH
66063: LD_INT 3
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66117: LD_ADDR_VAR 0 34
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: LD_INT 4
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 5
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: LD_INT 4
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: LD_INT 3
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: LD_INT 4
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: LD_INT 5
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 2
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: LD_INT 5
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 3
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 3
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 4
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 4
66257: PUSH
66258: LD_INT 1
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 3
66267: PUSH
66268: LD_INT 1
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 2
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 2
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: LD_INT 2
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 4
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 4
66319: PUSH
66320: LD_INT 4
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 4
66329: PUSH
66330: LD_INT 3
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 5
66339: PUSH
66340: LD_INT 4
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 5
66349: PUSH
66350: LD_INT 5
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 4
66359: PUSH
66360: LD_INT 5
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 3
66369: PUSH
66370: LD_INT 4
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 3
66379: PUSH
66380: LD_INT 3
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 5
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 3
66399: PUSH
66400: LD_INT 5
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 0
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: LD_INT 2
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 1
66439: PUSH
66440: LD_INT 4
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: LD_INT 4
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: LD_INT 3
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 4
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 4
66502: NEG
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 4
66513: NEG
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 3
66525: NEG
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 4
66547: NEG
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 5
66558: NEG
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 5
66569: NEG
66570: PUSH
66571: LD_INT 1
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 5
66581: NEG
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 3
66593: NEG
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: ST_TO_ADDR
// end ; end ;
66649: GO 66652
66651: POP
// case btype of b_depot , b_warehouse :
66652: LD_VAR 0 1
66656: PUSH
66657: LD_INT 0
66659: DOUBLE
66660: EQUAL
66661: IFTRUE 66671
66663: LD_INT 1
66665: DOUBLE
66666: EQUAL
66667: IFTRUE 66671
66669: GO 66872
66671: POP
// case nation of nation_american :
66672: LD_VAR 0 5
66676: PUSH
66677: LD_INT 1
66679: DOUBLE
66680: EQUAL
66681: IFTRUE 66685
66683: GO 66741
66685: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66686: LD_ADDR_VAR 0 9
66690: PUSH
66691: LD_VAR 0 11
66695: PUSH
66696: LD_VAR 0 12
66700: PUSH
66701: LD_VAR 0 13
66705: PUSH
66706: LD_VAR 0 14
66710: PUSH
66711: LD_VAR 0 15
66715: PUSH
66716: LD_VAR 0 16
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: PUSH
66729: LD_VAR 0 4
66733: PUSH
66734: LD_INT 1
66736: PLUS
66737: ARRAY
66738: ST_TO_ADDR
66739: GO 66870
66741: LD_INT 2
66743: DOUBLE
66744: EQUAL
66745: IFTRUE 66749
66747: GO 66805
66749: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66750: LD_ADDR_VAR 0 9
66754: PUSH
66755: LD_VAR 0 17
66759: PUSH
66760: LD_VAR 0 18
66764: PUSH
66765: LD_VAR 0 19
66769: PUSH
66770: LD_VAR 0 20
66774: PUSH
66775: LD_VAR 0 21
66779: PUSH
66780: LD_VAR 0 22
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: PUSH
66793: LD_VAR 0 4
66797: PUSH
66798: LD_INT 1
66800: PLUS
66801: ARRAY
66802: ST_TO_ADDR
66803: GO 66870
66805: LD_INT 3
66807: DOUBLE
66808: EQUAL
66809: IFTRUE 66813
66811: GO 66869
66813: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66814: LD_ADDR_VAR 0 9
66818: PUSH
66819: LD_VAR 0 23
66823: PUSH
66824: LD_VAR 0 24
66828: PUSH
66829: LD_VAR 0 25
66833: PUSH
66834: LD_VAR 0 26
66838: PUSH
66839: LD_VAR 0 27
66843: PUSH
66844: LD_VAR 0 28
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: PUSH
66857: LD_VAR 0 4
66861: PUSH
66862: LD_INT 1
66864: PLUS
66865: ARRAY
66866: ST_TO_ADDR
66867: GO 66870
66869: POP
66870: GO 67425
66872: LD_INT 2
66874: DOUBLE
66875: EQUAL
66876: IFTRUE 66886
66878: LD_INT 3
66880: DOUBLE
66881: EQUAL
66882: IFTRUE 66886
66884: GO 66942
66886: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66887: LD_ADDR_VAR 0 9
66891: PUSH
66892: LD_VAR 0 29
66896: PUSH
66897: LD_VAR 0 30
66901: PUSH
66902: LD_VAR 0 31
66906: PUSH
66907: LD_VAR 0 32
66911: PUSH
66912: LD_VAR 0 33
66916: PUSH
66917: LD_VAR 0 34
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: PUSH
66930: LD_VAR 0 4
66934: PUSH
66935: LD_INT 1
66937: PLUS
66938: ARRAY
66939: ST_TO_ADDR
66940: GO 67425
66942: LD_INT 16
66944: DOUBLE
66945: EQUAL
66946: IFTRUE 67004
66948: LD_INT 17
66950: DOUBLE
66951: EQUAL
66952: IFTRUE 67004
66954: LD_INT 18
66956: DOUBLE
66957: EQUAL
66958: IFTRUE 67004
66960: LD_INT 19
66962: DOUBLE
66963: EQUAL
66964: IFTRUE 67004
66966: LD_INT 22
66968: DOUBLE
66969: EQUAL
66970: IFTRUE 67004
66972: LD_INT 20
66974: DOUBLE
66975: EQUAL
66976: IFTRUE 67004
66978: LD_INT 21
66980: DOUBLE
66981: EQUAL
66982: IFTRUE 67004
66984: LD_INT 23
66986: DOUBLE
66987: EQUAL
66988: IFTRUE 67004
66990: LD_INT 24
66992: DOUBLE
66993: EQUAL
66994: IFTRUE 67004
66996: LD_INT 25
66998: DOUBLE
66999: EQUAL
67000: IFTRUE 67004
67002: GO 67060
67004: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67005: LD_ADDR_VAR 0 9
67009: PUSH
67010: LD_VAR 0 35
67014: PUSH
67015: LD_VAR 0 36
67019: PUSH
67020: LD_VAR 0 37
67024: PUSH
67025: LD_VAR 0 38
67029: PUSH
67030: LD_VAR 0 39
67034: PUSH
67035: LD_VAR 0 40
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: PUSH
67048: LD_VAR 0 4
67052: PUSH
67053: LD_INT 1
67055: PLUS
67056: ARRAY
67057: ST_TO_ADDR
67058: GO 67425
67060: LD_INT 6
67062: DOUBLE
67063: EQUAL
67064: IFTRUE 67116
67066: LD_INT 7
67068: DOUBLE
67069: EQUAL
67070: IFTRUE 67116
67072: LD_INT 8
67074: DOUBLE
67075: EQUAL
67076: IFTRUE 67116
67078: LD_INT 13
67080: DOUBLE
67081: EQUAL
67082: IFTRUE 67116
67084: LD_INT 12
67086: DOUBLE
67087: EQUAL
67088: IFTRUE 67116
67090: LD_INT 15
67092: DOUBLE
67093: EQUAL
67094: IFTRUE 67116
67096: LD_INT 11
67098: DOUBLE
67099: EQUAL
67100: IFTRUE 67116
67102: LD_INT 14
67104: DOUBLE
67105: EQUAL
67106: IFTRUE 67116
67108: LD_INT 10
67110: DOUBLE
67111: EQUAL
67112: IFTRUE 67116
67114: GO 67172
67116: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67117: LD_ADDR_VAR 0 9
67121: PUSH
67122: LD_VAR 0 41
67126: PUSH
67127: LD_VAR 0 42
67131: PUSH
67132: LD_VAR 0 43
67136: PUSH
67137: LD_VAR 0 44
67141: PUSH
67142: LD_VAR 0 45
67146: PUSH
67147: LD_VAR 0 46
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: PUSH
67160: LD_VAR 0 4
67164: PUSH
67165: LD_INT 1
67167: PLUS
67168: ARRAY
67169: ST_TO_ADDR
67170: GO 67425
67172: LD_INT 36
67174: DOUBLE
67175: EQUAL
67176: IFTRUE 67180
67178: GO 67236
67180: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67181: LD_ADDR_VAR 0 9
67185: PUSH
67186: LD_VAR 0 47
67190: PUSH
67191: LD_VAR 0 48
67195: PUSH
67196: LD_VAR 0 49
67200: PUSH
67201: LD_VAR 0 50
67205: PUSH
67206: LD_VAR 0 51
67210: PUSH
67211: LD_VAR 0 52
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: PUSH
67224: LD_VAR 0 4
67228: PUSH
67229: LD_INT 1
67231: PLUS
67232: ARRAY
67233: ST_TO_ADDR
67234: GO 67425
67236: LD_INT 4
67238: DOUBLE
67239: EQUAL
67240: IFTRUE 67262
67242: LD_INT 5
67244: DOUBLE
67245: EQUAL
67246: IFTRUE 67262
67248: LD_INT 34
67250: DOUBLE
67251: EQUAL
67252: IFTRUE 67262
67254: LD_INT 37
67256: DOUBLE
67257: EQUAL
67258: IFTRUE 67262
67260: GO 67318
67262: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67263: LD_ADDR_VAR 0 9
67267: PUSH
67268: LD_VAR 0 53
67272: PUSH
67273: LD_VAR 0 54
67277: PUSH
67278: LD_VAR 0 55
67282: PUSH
67283: LD_VAR 0 56
67287: PUSH
67288: LD_VAR 0 57
67292: PUSH
67293: LD_VAR 0 58
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: PUSH
67306: LD_VAR 0 4
67310: PUSH
67311: LD_INT 1
67313: PLUS
67314: ARRAY
67315: ST_TO_ADDR
67316: GO 67425
67318: LD_INT 31
67320: DOUBLE
67321: EQUAL
67322: IFTRUE 67368
67324: LD_INT 32
67326: DOUBLE
67327: EQUAL
67328: IFTRUE 67368
67330: LD_INT 33
67332: DOUBLE
67333: EQUAL
67334: IFTRUE 67368
67336: LD_INT 27
67338: DOUBLE
67339: EQUAL
67340: IFTRUE 67368
67342: LD_INT 26
67344: DOUBLE
67345: EQUAL
67346: IFTRUE 67368
67348: LD_INT 28
67350: DOUBLE
67351: EQUAL
67352: IFTRUE 67368
67354: LD_INT 29
67356: DOUBLE
67357: EQUAL
67358: IFTRUE 67368
67360: LD_INT 30
67362: DOUBLE
67363: EQUAL
67364: IFTRUE 67368
67366: GO 67424
67368: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67369: LD_ADDR_VAR 0 9
67373: PUSH
67374: LD_VAR 0 59
67378: PUSH
67379: LD_VAR 0 60
67383: PUSH
67384: LD_VAR 0 61
67388: PUSH
67389: LD_VAR 0 62
67393: PUSH
67394: LD_VAR 0 63
67398: PUSH
67399: LD_VAR 0 64
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: PUSH
67412: LD_VAR 0 4
67416: PUSH
67417: LD_INT 1
67419: PLUS
67420: ARRAY
67421: ST_TO_ADDR
67422: GO 67425
67424: POP
// temp_list2 = [ ] ;
67425: LD_ADDR_VAR 0 10
67429: PUSH
67430: EMPTY
67431: ST_TO_ADDR
// for i in temp_list do
67432: LD_ADDR_VAR 0 8
67436: PUSH
67437: LD_VAR 0 9
67441: PUSH
67442: FOR_IN
67443: IFFALSE 67495
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67445: LD_ADDR_VAR 0 10
67449: PUSH
67450: LD_VAR 0 10
67454: PUSH
67455: LD_VAR 0 8
67459: PUSH
67460: LD_INT 1
67462: ARRAY
67463: PUSH
67464: LD_VAR 0 2
67468: PLUS
67469: PUSH
67470: LD_VAR 0 8
67474: PUSH
67475: LD_INT 2
67477: ARRAY
67478: PUSH
67479: LD_VAR 0 3
67483: PLUS
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: EMPTY
67490: LIST
67491: ADD
67492: ST_TO_ADDR
67493: GO 67442
67495: POP
67496: POP
// result = temp_list2 ;
67497: LD_ADDR_VAR 0 7
67501: PUSH
67502: LD_VAR 0 10
67506: ST_TO_ADDR
// end ;
67507: LD_VAR 0 7
67511: RET
// export function EnemyInRange ( unit , dist ) ; begin
67512: LD_INT 0
67514: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67515: LD_ADDR_VAR 0 3
67519: PUSH
67520: LD_VAR 0 1
67524: PPUSH
67525: CALL_OW 255
67529: PPUSH
67530: LD_VAR 0 1
67534: PPUSH
67535: CALL_OW 250
67539: PPUSH
67540: LD_VAR 0 1
67544: PPUSH
67545: CALL_OW 251
67549: PPUSH
67550: LD_VAR 0 2
67554: PPUSH
67555: CALL 41616 0 4
67559: PUSH
67560: LD_INT 4
67562: ARRAY
67563: ST_TO_ADDR
// end ;
67564: LD_VAR 0 3
67568: RET
// export function PlayerSeeMe ( unit ) ; begin
67569: LD_INT 0
67571: PPUSH
// result := See ( your_side , unit ) ;
67572: LD_ADDR_VAR 0 2
67576: PUSH
67577: LD_OWVAR 2
67581: PPUSH
67582: LD_VAR 0 1
67586: PPUSH
67587: CALL_OW 292
67591: ST_TO_ADDR
// end ;
67592: LD_VAR 0 2
67596: RET
// export function ReverseDir ( unit ) ; begin
67597: LD_INT 0
67599: PPUSH
// if not unit then
67600: LD_VAR 0 1
67604: NOT
67605: IFFALSE 67609
// exit ;
67607: GO 67632
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67609: LD_ADDR_VAR 0 2
67613: PUSH
67614: LD_VAR 0 1
67618: PPUSH
67619: CALL_OW 254
67623: PUSH
67624: LD_INT 3
67626: PLUS
67627: PUSH
67628: LD_INT 6
67630: MOD
67631: ST_TO_ADDR
// end ;
67632: LD_VAR 0 2
67636: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67637: LD_INT 0
67639: PPUSH
67640: PPUSH
67641: PPUSH
67642: PPUSH
67643: PPUSH
// if not hexes then
67644: LD_VAR 0 2
67648: NOT
67649: IFFALSE 67653
// exit ;
67651: GO 67801
// dist := 9999 ;
67653: LD_ADDR_VAR 0 5
67657: PUSH
67658: LD_INT 9999
67660: ST_TO_ADDR
// for i = 1 to hexes do
67661: LD_ADDR_VAR 0 4
67665: PUSH
67666: DOUBLE
67667: LD_INT 1
67669: DEC
67670: ST_TO_ADDR
67671: LD_VAR 0 2
67675: PUSH
67676: FOR_TO
67677: IFFALSE 67789
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67679: LD_VAR 0 1
67683: PPUSH
67684: LD_VAR 0 2
67688: PUSH
67689: LD_VAR 0 4
67693: ARRAY
67694: PUSH
67695: LD_INT 1
67697: ARRAY
67698: PPUSH
67699: LD_VAR 0 2
67703: PUSH
67704: LD_VAR 0 4
67708: ARRAY
67709: PUSH
67710: LD_INT 2
67712: ARRAY
67713: PPUSH
67714: CALL_OW 297
67718: PUSH
67719: LD_VAR 0 5
67723: LESS
67724: IFFALSE 67787
// begin hex := hexes [ i ] ;
67726: LD_ADDR_VAR 0 7
67730: PUSH
67731: LD_VAR 0 2
67735: PUSH
67736: LD_VAR 0 4
67740: ARRAY
67741: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67742: LD_ADDR_VAR 0 5
67746: PUSH
67747: LD_VAR 0 1
67751: PPUSH
67752: LD_VAR 0 2
67756: PUSH
67757: LD_VAR 0 4
67761: ARRAY
67762: PUSH
67763: LD_INT 1
67765: ARRAY
67766: PPUSH
67767: LD_VAR 0 2
67771: PUSH
67772: LD_VAR 0 4
67776: ARRAY
67777: PUSH
67778: LD_INT 2
67780: ARRAY
67781: PPUSH
67782: CALL_OW 297
67786: ST_TO_ADDR
// end ; end ;
67787: GO 67676
67789: POP
67790: POP
// result := hex ;
67791: LD_ADDR_VAR 0 3
67795: PUSH
67796: LD_VAR 0 7
67800: ST_TO_ADDR
// end ;
67801: LD_VAR 0 3
67805: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67806: LD_INT 0
67808: PPUSH
67809: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67810: LD_VAR 0 1
67814: NOT
67815: PUSH
67816: LD_VAR 0 1
67820: PUSH
67821: LD_INT 21
67823: PUSH
67824: LD_INT 2
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 23
67833: PUSH
67834: LD_INT 2
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PPUSH
67845: CALL_OW 69
67849: IN
67850: NOT
67851: OR
67852: IFFALSE 67856
// exit ;
67854: GO 67903
// for i = 1 to 3 do
67856: LD_ADDR_VAR 0 3
67860: PUSH
67861: DOUBLE
67862: LD_INT 1
67864: DEC
67865: ST_TO_ADDR
67866: LD_INT 3
67868: PUSH
67869: FOR_TO
67870: IFFALSE 67901
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67872: LD_VAR 0 1
67876: PPUSH
67877: CALL_OW 250
67881: PPUSH
67882: LD_VAR 0 1
67886: PPUSH
67887: CALL_OW 251
67891: PPUSH
67892: LD_INT 1
67894: PPUSH
67895: CALL_OW 453
67899: GO 67869
67901: POP
67902: POP
// end ;
67903: LD_VAR 0 2
67907: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67908: LD_INT 0
67910: PPUSH
67911: PPUSH
67912: PPUSH
67913: PPUSH
67914: PPUSH
67915: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67916: LD_VAR 0 1
67920: NOT
67921: PUSH
67922: LD_VAR 0 2
67926: NOT
67927: OR
67928: PUSH
67929: LD_VAR 0 1
67933: PPUSH
67934: CALL_OW 314
67938: OR
67939: IFFALSE 67943
// exit ;
67941: GO 68384
// x := GetX ( enemy_unit ) ;
67943: LD_ADDR_VAR 0 7
67947: PUSH
67948: LD_VAR 0 2
67952: PPUSH
67953: CALL_OW 250
67957: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67958: LD_ADDR_VAR 0 8
67962: PUSH
67963: LD_VAR 0 2
67967: PPUSH
67968: CALL_OW 251
67972: ST_TO_ADDR
// if not x or not y then
67973: LD_VAR 0 7
67977: NOT
67978: PUSH
67979: LD_VAR 0 8
67983: NOT
67984: OR
67985: IFFALSE 67989
// exit ;
67987: GO 68384
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67989: LD_ADDR_VAR 0 6
67993: PUSH
67994: LD_VAR 0 7
67998: PPUSH
67999: LD_INT 0
68001: PPUSH
68002: LD_INT 4
68004: PPUSH
68005: CALL_OW 272
68009: PUSH
68010: LD_VAR 0 8
68014: PPUSH
68015: LD_INT 0
68017: PPUSH
68018: LD_INT 4
68020: PPUSH
68021: CALL_OW 273
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_VAR 0 7
68034: PPUSH
68035: LD_INT 1
68037: PPUSH
68038: LD_INT 4
68040: PPUSH
68041: CALL_OW 272
68045: PUSH
68046: LD_VAR 0 8
68050: PPUSH
68051: LD_INT 1
68053: PPUSH
68054: LD_INT 4
68056: PPUSH
68057: CALL_OW 273
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_VAR 0 7
68070: PPUSH
68071: LD_INT 2
68073: PPUSH
68074: LD_INT 4
68076: PPUSH
68077: CALL_OW 272
68081: PUSH
68082: LD_VAR 0 8
68086: PPUSH
68087: LD_INT 2
68089: PPUSH
68090: LD_INT 4
68092: PPUSH
68093: CALL_OW 273
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_VAR 0 7
68106: PPUSH
68107: LD_INT 3
68109: PPUSH
68110: LD_INT 4
68112: PPUSH
68113: CALL_OW 272
68117: PUSH
68118: LD_VAR 0 8
68122: PPUSH
68123: LD_INT 3
68125: PPUSH
68126: LD_INT 4
68128: PPUSH
68129: CALL_OW 273
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_VAR 0 7
68142: PPUSH
68143: LD_INT 4
68145: PPUSH
68146: LD_INT 4
68148: PPUSH
68149: CALL_OW 272
68153: PUSH
68154: LD_VAR 0 8
68158: PPUSH
68159: LD_INT 4
68161: PPUSH
68162: LD_INT 4
68164: PPUSH
68165: CALL_OW 273
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_VAR 0 7
68178: PPUSH
68179: LD_INT 5
68181: PPUSH
68182: LD_INT 4
68184: PPUSH
68185: CALL_OW 272
68189: PUSH
68190: LD_VAR 0 8
68194: PPUSH
68195: LD_INT 5
68197: PPUSH
68198: LD_INT 4
68200: PPUSH
68201: CALL_OW 273
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: ST_TO_ADDR
// for i = tmp downto 1 do
68218: LD_ADDR_VAR 0 4
68222: PUSH
68223: DOUBLE
68224: LD_VAR 0 6
68228: INC
68229: ST_TO_ADDR
68230: LD_INT 1
68232: PUSH
68233: FOR_DOWNTO
68234: IFFALSE 68335
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68236: LD_VAR 0 6
68240: PUSH
68241: LD_VAR 0 4
68245: ARRAY
68246: PUSH
68247: LD_INT 1
68249: ARRAY
68250: PPUSH
68251: LD_VAR 0 6
68255: PUSH
68256: LD_VAR 0 4
68260: ARRAY
68261: PUSH
68262: LD_INT 2
68264: ARRAY
68265: PPUSH
68266: CALL_OW 488
68270: NOT
68271: PUSH
68272: LD_VAR 0 6
68276: PUSH
68277: LD_VAR 0 4
68281: ARRAY
68282: PUSH
68283: LD_INT 1
68285: ARRAY
68286: PPUSH
68287: LD_VAR 0 6
68291: PUSH
68292: LD_VAR 0 4
68296: ARRAY
68297: PUSH
68298: LD_INT 2
68300: ARRAY
68301: PPUSH
68302: CALL_OW 428
68306: PUSH
68307: LD_INT 0
68309: NONEQUAL
68310: OR
68311: IFFALSE 68333
// tmp := Delete ( tmp , i ) ;
68313: LD_ADDR_VAR 0 6
68317: PUSH
68318: LD_VAR 0 6
68322: PPUSH
68323: LD_VAR 0 4
68327: PPUSH
68328: CALL_OW 3
68332: ST_TO_ADDR
68333: GO 68233
68335: POP
68336: POP
// j := GetClosestHex ( unit , tmp ) ;
68337: LD_ADDR_VAR 0 5
68341: PUSH
68342: LD_VAR 0 1
68346: PPUSH
68347: LD_VAR 0 6
68351: PPUSH
68352: CALL 67637 0 2
68356: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68357: LD_VAR 0 1
68361: PPUSH
68362: LD_VAR 0 5
68366: PUSH
68367: LD_INT 1
68369: ARRAY
68370: PPUSH
68371: LD_VAR 0 5
68375: PUSH
68376: LD_INT 2
68378: ARRAY
68379: PPUSH
68380: CALL_OW 111
// end ;
68384: LD_VAR 0 3
68388: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68389: LD_INT 0
68391: PPUSH
68392: PPUSH
68393: PPUSH
// uc_side = 0 ;
68394: LD_ADDR_OWVAR 20
68398: PUSH
68399: LD_INT 0
68401: ST_TO_ADDR
// uc_nation = 0 ;
68402: LD_ADDR_OWVAR 21
68406: PUSH
68407: LD_INT 0
68409: ST_TO_ADDR
// InitHc ;
68410: CALL_OW 19
// InitVc ;
68414: CALL_OW 20
// if mastodonts then
68418: LD_VAR 0 6
68422: IFFALSE 68489
// for i = 1 to mastodonts do
68424: LD_ADDR_VAR 0 11
68428: PUSH
68429: DOUBLE
68430: LD_INT 1
68432: DEC
68433: ST_TO_ADDR
68434: LD_VAR 0 6
68438: PUSH
68439: FOR_TO
68440: IFFALSE 68487
// begin vc_chassis := 31 ;
68442: LD_ADDR_OWVAR 37
68446: PUSH
68447: LD_INT 31
68449: ST_TO_ADDR
// vc_control := control_rider ;
68450: LD_ADDR_OWVAR 38
68454: PUSH
68455: LD_INT 4
68457: ST_TO_ADDR
// animal := CreateVehicle ;
68458: LD_ADDR_VAR 0 12
68462: PUSH
68463: CALL_OW 45
68467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68468: LD_VAR 0 12
68472: PPUSH
68473: LD_VAR 0 8
68477: PPUSH
68478: LD_INT 0
68480: PPUSH
68481: CALL 70677 0 3
// end ;
68485: GO 68439
68487: POP
68488: POP
// if horses then
68489: LD_VAR 0 5
68493: IFFALSE 68560
// for i = 1 to horses do
68495: LD_ADDR_VAR 0 11
68499: PUSH
68500: DOUBLE
68501: LD_INT 1
68503: DEC
68504: ST_TO_ADDR
68505: LD_VAR 0 5
68509: PUSH
68510: FOR_TO
68511: IFFALSE 68558
// begin hc_class := 21 ;
68513: LD_ADDR_OWVAR 28
68517: PUSH
68518: LD_INT 21
68520: ST_TO_ADDR
// hc_gallery :=  ;
68521: LD_ADDR_OWVAR 33
68525: PUSH
68526: LD_STRING 
68528: ST_TO_ADDR
// animal := CreateHuman ;
68529: LD_ADDR_VAR 0 12
68533: PUSH
68534: CALL_OW 44
68538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68539: LD_VAR 0 12
68543: PPUSH
68544: LD_VAR 0 8
68548: PPUSH
68549: LD_INT 0
68551: PPUSH
68552: CALL 70677 0 3
// end ;
68556: GO 68510
68558: POP
68559: POP
// if birds then
68560: LD_VAR 0 1
68564: IFFALSE 68631
// for i = 1 to birds do
68566: LD_ADDR_VAR 0 11
68570: PUSH
68571: DOUBLE
68572: LD_INT 1
68574: DEC
68575: ST_TO_ADDR
68576: LD_VAR 0 1
68580: PUSH
68581: FOR_TO
68582: IFFALSE 68629
// begin hc_class = 18 ;
68584: LD_ADDR_OWVAR 28
68588: PUSH
68589: LD_INT 18
68591: ST_TO_ADDR
// hc_gallery =  ;
68592: LD_ADDR_OWVAR 33
68596: PUSH
68597: LD_STRING 
68599: ST_TO_ADDR
// animal := CreateHuman ;
68600: LD_ADDR_VAR 0 12
68604: PUSH
68605: CALL_OW 44
68609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68610: LD_VAR 0 12
68614: PPUSH
68615: LD_VAR 0 8
68619: PPUSH
68620: LD_INT 0
68622: PPUSH
68623: CALL 70677 0 3
// end ;
68627: GO 68581
68629: POP
68630: POP
// if tigers then
68631: LD_VAR 0 2
68635: IFFALSE 68719
// for i = 1 to tigers do
68637: LD_ADDR_VAR 0 11
68641: PUSH
68642: DOUBLE
68643: LD_INT 1
68645: DEC
68646: ST_TO_ADDR
68647: LD_VAR 0 2
68651: PUSH
68652: FOR_TO
68653: IFFALSE 68717
// begin hc_class = class_tiger ;
68655: LD_ADDR_OWVAR 28
68659: PUSH
68660: LD_INT 14
68662: ST_TO_ADDR
// hc_gallery =  ;
68663: LD_ADDR_OWVAR 33
68667: PUSH
68668: LD_STRING 
68670: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68671: LD_ADDR_OWVAR 35
68675: PUSH
68676: LD_INT 7
68678: NEG
68679: PPUSH
68680: LD_INT 7
68682: PPUSH
68683: CALL_OW 12
68687: ST_TO_ADDR
// animal := CreateHuman ;
68688: LD_ADDR_VAR 0 12
68692: PUSH
68693: CALL_OW 44
68697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68698: LD_VAR 0 12
68702: PPUSH
68703: LD_VAR 0 8
68707: PPUSH
68708: LD_INT 0
68710: PPUSH
68711: CALL 70677 0 3
// end ;
68715: GO 68652
68717: POP
68718: POP
// if apemans then
68719: LD_VAR 0 3
68723: IFFALSE 68846
// for i = 1 to apemans do
68725: LD_ADDR_VAR 0 11
68729: PUSH
68730: DOUBLE
68731: LD_INT 1
68733: DEC
68734: ST_TO_ADDR
68735: LD_VAR 0 3
68739: PUSH
68740: FOR_TO
68741: IFFALSE 68844
// begin hc_class = class_apeman ;
68743: LD_ADDR_OWVAR 28
68747: PUSH
68748: LD_INT 12
68750: ST_TO_ADDR
// hc_gallery =  ;
68751: LD_ADDR_OWVAR 33
68755: PUSH
68756: LD_STRING 
68758: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68759: LD_ADDR_OWVAR 35
68763: PUSH
68764: LD_INT 5
68766: NEG
68767: PPUSH
68768: LD_INT 5
68770: PPUSH
68771: CALL_OW 12
68775: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68776: LD_ADDR_OWVAR 31
68780: PUSH
68781: LD_INT 1
68783: PPUSH
68784: LD_INT 3
68786: PPUSH
68787: CALL_OW 12
68791: PUSH
68792: LD_INT 1
68794: PPUSH
68795: LD_INT 3
68797: PPUSH
68798: CALL_OW 12
68802: PUSH
68803: LD_INT 0
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// animal := CreateHuman ;
68815: LD_ADDR_VAR 0 12
68819: PUSH
68820: CALL_OW 44
68824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68825: LD_VAR 0 12
68829: PPUSH
68830: LD_VAR 0 8
68834: PPUSH
68835: LD_INT 0
68837: PPUSH
68838: CALL 70677 0 3
// end ;
68842: GO 68740
68844: POP
68845: POP
// if enchidnas then
68846: LD_VAR 0 4
68850: IFFALSE 68917
// for i = 1 to enchidnas do
68852: LD_ADDR_VAR 0 11
68856: PUSH
68857: DOUBLE
68858: LD_INT 1
68860: DEC
68861: ST_TO_ADDR
68862: LD_VAR 0 4
68866: PUSH
68867: FOR_TO
68868: IFFALSE 68915
// begin hc_class = 13 ;
68870: LD_ADDR_OWVAR 28
68874: PUSH
68875: LD_INT 13
68877: ST_TO_ADDR
// hc_gallery =  ;
68878: LD_ADDR_OWVAR 33
68882: PUSH
68883: LD_STRING 
68885: ST_TO_ADDR
// animal := CreateHuman ;
68886: LD_ADDR_VAR 0 12
68890: PUSH
68891: CALL_OW 44
68895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68896: LD_VAR 0 12
68900: PPUSH
68901: LD_VAR 0 8
68905: PPUSH
68906: LD_INT 0
68908: PPUSH
68909: CALL 70677 0 3
// end ;
68913: GO 68867
68915: POP
68916: POP
// if fishes then
68917: LD_VAR 0 7
68921: IFFALSE 68988
// for i = 1 to fishes do
68923: LD_ADDR_VAR 0 11
68927: PUSH
68928: DOUBLE
68929: LD_INT 1
68931: DEC
68932: ST_TO_ADDR
68933: LD_VAR 0 7
68937: PUSH
68938: FOR_TO
68939: IFFALSE 68986
// begin hc_class = 20 ;
68941: LD_ADDR_OWVAR 28
68945: PUSH
68946: LD_INT 20
68948: ST_TO_ADDR
// hc_gallery =  ;
68949: LD_ADDR_OWVAR 33
68953: PUSH
68954: LD_STRING 
68956: ST_TO_ADDR
// animal := CreateHuman ;
68957: LD_ADDR_VAR 0 12
68961: PUSH
68962: CALL_OW 44
68966: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68967: LD_VAR 0 12
68971: PPUSH
68972: LD_VAR 0 9
68976: PPUSH
68977: LD_INT 0
68979: PPUSH
68980: CALL 70677 0 3
// end ;
68984: GO 68938
68986: POP
68987: POP
// end ;
68988: LD_VAR 0 10
68992: RET
// export function WantHeal ( sci , unit ) ; begin
68993: LD_INT 0
68995: PPUSH
// if GetTaskList ( sci ) > 0 then
68996: LD_VAR 0 1
69000: PPUSH
69001: CALL_OW 437
69005: PUSH
69006: LD_INT 0
69008: GREATER
69009: IFFALSE 69079
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69011: LD_VAR 0 1
69015: PPUSH
69016: CALL_OW 437
69020: PUSH
69021: LD_INT 1
69023: ARRAY
69024: PUSH
69025: LD_INT 1
69027: ARRAY
69028: PUSH
69029: LD_STRING l
69031: EQUAL
69032: PUSH
69033: LD_VAR 0 1
69037: PPUSH
69038: CALL_OW 437
69042: PUSH
69043: LD_INT 1
69045: ARRAY
69046: PUSH
69047: LD_INT 4
69049: ARRAY
69050: PUSH
69051: LD_VAR 0 2
69055: EQUAL
69056: AND
69057: IFFALSE 69069
// result := true else
69059: LD_ADDR_VAR 0 3
69063: PUSH
69064: LD_INT 1
69066: ST_TO_ADDR
69067: GO 69077
// result := false ;
69069: LD_ADDR_VAR 0 3
69073: PUSH
69074: LD_INT 0
69076: ST_TO_ADDR
// end else
69077: GO 69087
// result := false ;
69079: LD_ADDR_VAR 0 3
69083: PUSH
69084: LD_INT 0
69086: ST_TO_ADDR
// end ;
69087: LD_VAR 0 3
69091: RET
// export function HealTarget ( sci ) ; begin
69092: LD_INT 0
69094: PPUSH
// if not sci then
69095: LD_VAR 0 1
69099: NOT
69100: IFFALSE 69104
// exit ;
69102: GO 69169
// result := 0 ;
69104: LD_ADDR_VAR 0 2
69108: PUSH
69109: LD_INT 0
69111: ST_TO_ADDR
// if GetTaskList ( sci ) then
69112: LD_VAR 0 1
69116: PPUSH
69117: CALL_OW 437
69121: IFFALSE 69169
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69123: LD_VAR 0 1
69127: PPUSH
69128: CALL_OW 437
69132: PUSH
69133: LD_INT 1
69135: ARRAY
69136: PUSH
69137: LD_INT 1
69139: ARRAY
69140: PUSH
69141: LD_STRING l
69143: EQUAL
69144: IFFALSE 69169
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69146: LD_ADDR_VAR 0 2
69150: PUSH
69151: LD_VAR 0 1
69155: PPUSH
69156: CALL_OW 437
69160: PUSH
69161: LD_INT 1
69163: ARRAY
69164: PUSH
69165: LD_INT 4
69167: ARRAY
69168: ST_TO_ADDR
// end ;
69169: LD_VAR 0 2
69173: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69174: LD_INT 0
69176: PPUSH
69177: PPUSH
69178: PPUSH
69179: PPUSH
// if not base_units then
69180: LD_VAR 0 1
69184: NOT
69185: IFFALSE 69189
// exit ;
69187: GO 69276
// result := false ;
69189: LD_ADDR_VAR 0 2
69193: PUSH
69194: LD_INT 0
69196: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69197: LD_ADDR_VAR 0 5
69201: PUSH
69202: LD_VAR 0 1
69206: PPUSH
69207: LD_INT 21
69209: PUSH
69210: LD_INT 3
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PPUSH
69217: CALL_OW 72
69221: ST_TO_ADDR
// if not tmp then
69222: LD_VAR 0 5
69226: NOT
69227: IFFALSE 69231
// exit ;
69229: GO 69276
// for i in tmp do
69231: LD_ADDR_VAR 0 3
69235: PUSH
69236: LD_VAR 0 5
69240: PUSH
69241: FOR_IN
69242: IFFALSE 69274
// begin result := EnemyInRange ( i , 22 ) ;
69244: LD_ADDR_VAR 0 2
69248: PUSH
69249: LD_VAR 0 3
69253: PPUSH
69254: LD_INT 22
69256: PPUSH
69257: CALL 67512 0 2
69261: ST_TO_ADDR
// if result then
69262: LD_VAR 0 2
69266: IFFALSE 69272
// exit ;
69268: POP
69269: POP
69270: GO 69276
// end ;
69272: GO 69241
69274: POP
69275: POP
// end ;
69276: LD_VAR 0 2
69280: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69281: LD_INT 0
69283: PPUSH
69284: PPUSH
// if not units then
69285: LD_VAR 0 1
69289: NOT
69290: IFFALSE 69294
// exit ;
69292: GO 69364
// result := [ ] ;
69294: LD_ADDR_VAR 0 3
69298: PUSH
69299: EMPTY
69300: ST_TO_ADDR
// for i in units do
69301: LD_ADDR_VAR 0 4
69305: PUSH
69306: LD_VAR 0 1
69310: PUSH
69311: FOR_IN
69312: IFFALSE 69362
// if GetTag ( i ) = tag then
69314: LD_VAR 0 4
69318: PPUSH
69319: CALL_OW 110
69323: PUSH
69324: LD_VAR 0 2
69328: EQUAL
69329: IFFALSE 69360
// result := Insert ( result , result + 1 , i ) ;
69331: LD_ADDR_VAR 0 3
69335: PUSH
69336: LD_VAR 0 3
69340: PPUSH
69341: LD_VAR 0 3
69345: PUSH
69346: LD_INT 1
69348: PLUS
69349: PPUSH
69350: LD_VAR 0 4
69354: PPUSH
69355: CALL_OW 2
69359: ST_TO_ADDR
69360: GO 69311
69362: POP
69363: POP
// end ;
69364: LD_VAR 0 3
69368: RET
// export function IsDriver ( un ) ; begin
69369: LD_INT 0
69371: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69372: LD_ADDR_VAR 0 2
69376: PUSH
69377: LD_VAR 0 1
69381: PUSH
69382: LD_INT 55
69384: PUSH
69385: EMPTY
69386: LIST
69387: PPUSH
69388: CALL_OW 69
69392: IN
69393: ST_TO_ADDR
// end ;
69394: LD_VAR 0 2
69398: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69399: LD_INT 0
69401: PPUSH
69402: PPUSH
// list := [ ] ;
69403: LD_ADDR_VAR 0 5
69407: PUSH
69408: EMPTY
69409: ST_TO_ADDR
// case d of 0 :
69410: LD_VAR 0 3
69414: PUSH
69415: LD_INT 0
69417: DOUBLE
69418: EQUAL
69419: IFTRUE 69423
69421: GO 69556
69423: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69424: LD_ADDR_VAR 0 5
69428: PUSH
69429: LD_VAR 0 1
69433: PUSH
69434: LD_INT 4
69436: MINUS
69437: PUSH
69438: LD_VAR 0 2
69442: PUSH
69443: LD_INT 4
69445: MINUS
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: LIST
69454: PUSH
69455: LD_VAR 0 1
69459: PUSH
69460: LD_INT 3
69462: MINUS
69463: PUSH
69464: LD_VAR 0 2
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: PUSH
69477: LD_VAR 0 1
69481: PUSH
69482: LD_INT 4
69484: PLUS
69485: PUSH
69486: LD_VAR 0 2
69490: PUSH
69491: LD_INT 4
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: LIST
69498: PUSH
69499: LD_VAR 0 1
69503: PUSH
69504: LD_INT 3
69506: PLUS
69507: PUSH
69508: LD_VAR 0 2
69512: PUSH
69513: LD_INT 3
69515: PLUS
69516: PUSH
69517: LD_INT 5
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: PUSH
69525: LD_VAR 0 1
69529: PUSH
69530: LD_VAR 0 2
69534: PUSH
69535: LD_INT 4
69537: PLUS
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: LIST
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: ST_TO_ADDR
// end ; 1 :
69554: GO 70254
69556: LD_INT 1
69558: DOUBLE
69559: EQUAL
69560: IFTRUE 69564
69562: GO 69697
69564: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69565: LD_ADDR_VAR 0 5
69569: PUSH
69570: LD_VAR 0 1
69574: PUSH
69575: LD_VAR 0 2
69579: PUSH
69580: LD_INT 4
69582: MINUS
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: LIST
69591: PUSH
69592: LD_VAR 0 1
69596: PUSH
69597: LD_INT 3
69599: MINUS
69600: PUSH
69601: LD_VAR 0 2
69605: PUSH
69606: LD_INT 3
69608: MINUS
69609: PUSH
69610: LD_INT 2
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: LIST
69617: PUSH
69618: LD_VAR 0 1
69622: PUSH
69623: LD_INT 4
69625: MINUS
69626: PUSH
69627: LD_VAR 0 2
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: PUSH
69640: LD_VAR 0 1
69644: PUSH
69645: LD_VAR 0 2
69649: PUSH
69650: LD_INT 3
69652: PLUS
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: LIST
69661: PUSH
69662: LD_VAR 0 1
69666: PUSH
69667: LD_INT 4
69669: PLUS
69670: PUSH
69671: LD_VAR 0 2
69675: PUSH
69676: LD_INT 4
69678: PLUS
69679: PUSH
69680: LD_INT 5
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: ST_TO_ADDR
// end ; 2 :
69695: GO 70254
69697: LD_INT 2
69699: DOUBLE
69700: EQUAL
69701: IFTRUE 69705
69703: GO 69834
69705: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69706: LD_ADDR_VAR 0 5
69710: PUSH
69711: LD_VAR 0 1
69715: PUSH
69716: LD_VAR 0 2
69720: PUSH
69721: LD_INT 3
69723: MINUS
69724: PUSH
69725: LD_INT 3
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: LIST
69732: PUSH
69733: LD_VAR 0 1
69737: PUSH
69738: LD_INT 4
69740: PLUS
69741: PUSH
69742: LD_VAR 0 2
69746: PUSH
69747: LD_INT 4
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: PUSH
69755: LD_VAR 0 1
69759: PUSH
69760: LD_VAR 0 2
69764: PUSH
69765: LD_INT 4
69767: PLUS
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: LIST
69776: PUSH
69777: LD_VAR 0 1
69781: PUSH
69782: LD_INT 3
69784: MINUS
69785: PUSH
69786: LD_VAR 0 2
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: LIST
69798: PUSH
69799: LD_VAR 0 1
69803: PUSH
69804: LD_INT 4
69806: MINUS
69807: PUSH
69808: LD_VAR 0 2
69812: PUSH
69813: LD_INT 4
69815: MINUS
69816: PUSH
69817: LD_INT 2
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: LIST
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: ST_TO_ADDR
// end ; 3 :
69832: GO 70254
69834: LD_INT 3
69836: DOUBLE
69837: EQUAL
69838: IFTRUE 69842
69840: GO 69975
69842: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69843: LD_ADDR_VAR 0 5
69847: PUSH
69848: LD_VAR 0 1
69852: PUSH
69853: LD_INT 3
69855: PLUS
69856: PUSH
69857: LD_VAR 0 2
69861: PUSH
69862: LD_INT 4
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: PUSH
69870: LD_VAR 0 1
69874: PUSH
69875: LD_INT 4
69877: PLUS
69878: PUSH
69879: LD_VAR 0 2
69883: PUSH
69884: LD_INT 4
69886: PLUS
69887: PUSH
69888: LD_INT 5
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: LIST
69895: PUSH
69896: LD_VAR 0 1
69900: PUSH
69901: LD_INT 4
69903: MINUS
69904: PUSH
69905: LD_VAR 0 2
69909: PUSH
69910: LD_INT 1
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: LIST
69917: PUSH
69918: LD_VAR 0 1
69922: PUSH
69923: LD_VAR 0 2
69927: PUSH
69928: LD_INT 4
69930: MINUS
69931: PUSH
69932: LD_INT 3
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: LIST
69939: PUSH
69940: LD_VAR 0 1
69944: PUSH
69945: LD_INT 3
69947: MINUS
69948: PUSH
69949: LD_VAR 0 2
69953: PUSH
69954: LD_INT 3
69956: MINUS
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: LIST
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: ST_TO_ADDR
// end ; 4 :
69973: GO 70254
69975: LD_INT 4
69977: DOUBLE
69978: EQUAL
69979: IFTRUE 69983
69981: GO 70116
69983: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69984: LD_ADDR_VAR 0 5
69988: PUSH
69989: LD_VAR 0 1
69993: PUSH
69994: LD_VAR 0 2
69998: PUSH
69999: LD_INT 4
70001: PLUS
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: PUSH
70011: LD_VAR 0 1
70015: PUSH
70016: LD_INT 3
70018: PLUS
70019: PUSH
70020: LD_VAR 0 2
70024: PUSH
70025: LD_INT 3
70027: PLUS
70028: PUSH
70029: LD_INT 5
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: PUSH
70037: LD_VAR 0 1
70041: PUSH
70042: LD_INT 4
70044: PLUS
70045: PUSH
70046: LD_VAR 0 2
70050: PUSH
70051: LD_INT 4
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: LIST
70058: PUSH
70059: LD_VAR 0 1
70063: PUSH
70064: LD_VAR 0 2
70068: PUSH
70069: LD_INT 3
70071: MINUS
70072: PUSH
70073: LD_INT 3
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: LIST
70080: PUSH
70081: LD_VAR 0 1
70085: PUSH
70086: LD_INT 4
70088: MINUS
70089: PUSH
70090: LD_VAR 0 2
70094: PUSH
70095: LD_INT 4
70097: MINUS
70098: PUSH
70099: LD_INT 2
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: ST_TO_ADDR
// end ; 5 :
70114: GO 70254
70116: LD_INT 5
70118: DOUBLE
70119: EQUAL
70120: IFTRUE 70124
70122: GO 70253
70124: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70125: LD_ADDR_VAR 0 5
70129: PUSH
70130: LD_VAR 0 1
70134: PUSH
70135: LD_INT 4
70137: MINUS
70138: PUSH
70139: LD_VAR 0 2
70143: PUSH
70144: LD_INT 1
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: LIST
70151: PUSH
70152: LD_VAR 0 1
70156: PUSH
70157: LD_VAR 0 2
70161: PUSH
70162: LD_INT 4
70164: MINUS
70165: PUSH
70166: LD_INT 3
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: LIST
70173: PUSH
70174: LD_VAR 0 1
70178: PUSH
70179: LD_INT 4
70181: PLUS
70182: PUSH
70183: LD_VAR 0 2
70187: PUSH
70188: LD_INT 4
70190: PLUS
70191: PUSH
70192: LD_INT 5
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: LIST
70199: PUSH
70200: LD_VAR 0 1
70204: PUSH
70205: LD_INT 3
70207: PLUS
70208: PUSH
70209: LD_VAR 0 2
70213: PUSH
70214: LD_INT 4
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: LIST
70221: PUSH
70222: LD_VAR 0 1
70226: PUSH
70227: LD_VAR 0 2
70231: PUSH
70232: LD_INT 3
70234: PLUS
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: LIST
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: ST_TO_ADDR
// end ; end ;
70251: GO 70254
70253: POP
// result := list ;
70254: LD_ADDR_VAR 0 4
70258: PUSH
70259: LD_VAR 0 5
70263: ST_TO_ADDR
// end ;
70264: LD_VAR 0 4
70268: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70269: LD_INT 0
70271: PPUSH
70272: PPUSH
70273: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70274: LD_VAR 0 1
70278: NOT
70279: PUSH
70280: LD_VAR 0 2
70284: PUSH
70285: LD_INT 1
70287: PUSH
70288: LD_INT 2
70290: PUSH
70291: LD_INT 3
70293: PUSH
70294: LD_INT 4
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: IN
70303: NOT
70304: OR
70305: IFFALSE 70309
// exit ;
70307: GO 70401
// tmp := [ ] ;
70309: LD_ADDR_VAR 0 5
70313: PUSH
70314: EMPTY
70315: ST_TO_ADDR
// for i in units do
70316: LD_ADDR_VAR 0 4
70320: PUSH
70321: LD_VAR 0 1
70325: PUSH
70326: FOR_IN
70327: IFFALSE 70370
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70329: LD_ADDR_VAR 0 5
70333: PUSH
70334: LD_VAR 0 5
70338: PPUSH
70339: LD_VAR 0 5
70343: PUSH
70344: LD_INT 1
70346: PLUS
70347: PPUSH
70348: LD_VAR 0 4
70352: PPUSH
70353: LD_VAR 0 2
70357: PPUSH
70358: CALL_OW 259
70362: PPUSH
70363: CALL_OW 2
70367: ST_TO_ADDR
70368: GO 70326
70370: POP
70371: POP
// if not tmp then
70372: LD_VAR 0 5
70376: NOT
70377: IFFALSE 70381
// exit ;
70379: GO 70401
// result := SortListByListDesc ( units , tmp ) ;
70381: LD_ADDR_VAR 0 3
70385: PUSH
70386: LD_VAR 0 1
70390: PPUSH
70391: LD_VAR 0 5
70395: PPUSH
70396: CALL_OW 77
70400: ST_TO_ADDR
// end ;
70401: LD_VAR 0 3
70405: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70406: LD_INT 0
70408: PPUSH
70409: PPUSH
70410: PPUSH
// result := false ;
70411: LD_ADDR_VAR 0 3
70415: PUSH
70416: LD_INT 0
70418: ST_TO_ADDR
// x := GetX ( building ) ;
70419: LD_ADDR_VAR 0 4
70423: PUSH
70424: LD_VAR 0 2
70428: PPUSH
70429: CALL_OW 250
70433: ST_TO_ADDR
// y := GetY ( building ) ;
70434: LD_ADDR_VAR 0 5
70438: PUSH
70439: LD_VAR 0 2
70443: PPUSH
70444: CALL_OW 251
70448: ST_TO_ADDR
// if not building or not x or not y then
70449: LD_VAR 0 2
70453: NOT
70454: PUSH
70455: LD_VAR 0 4
70459: NOT
70460: OR
70461: PUSH
70462: LD_VAR 0 5
70466: NOT
70467: OR
70468: IFFALSE 70472
// exit ;
70470: GO 70564
// if GetTaskList ( unit ) then
70472: LD_VAR 0 1
70476: PPUSH
70477: CALL_OW 437
70481: IFFALSE 70564
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70483: LD_STRING e
70485: PUSH
70486: LD_VAR 0 1
70490: PPUSH
70491: CALL_OW 437
70495: PUSH
70496: LD_INT 1
70498: ARRAY
70499: PUSH
70500: LD_INT 1
70502: ARRAY
70503: EQUAL
70504: PUSH
70505: LD_VAR 0 4
70509: PUSH
70510: LD_VAR 0 1
70514: PPUSH
70515: CALL_OW 437
70519: PUSH
70520: LD_INT 1
70522: ARRAY
70523: PUSH
70524: LD_INT 2
70526: ARRAY
70527: EQUAL
70528: AND
70529: PUSH
70530: LD_VAR 0 5
70534: PUSH
70535: LD_VAR 0 1
70539: PPUSH
70540: CALL_OW 437
70544: PUSH
70545: LD_INT 1
70547: ARRAY
70548: PUSH
70549: LD_INT 3
70551: ARRAY
70552: EQUAL
70553: AND
70554: IFFALSE 70564
// result := true end ;
70556: LD_ADDR_VAR 0 3
70560: PUSH
70561: LD_INT 1
70563: ST_TO_ADDR
// end ;
70564: LD_VAR 0 3
70568: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70569: LD_INT 0
70571: PPUSH
// result := false ;
70572: LD_ADDR_VAR 0 4
70576: PUSH
70577: LD_INT 0
70579: ST_TO_ADDR
// if GetTaskList ( unit ) then
70580: LD_VAR 0 1
70584: PPUSH
70585: CALL_OW 437
70589: IFFALSE 70672
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70591: LD_STRING M
70593: PUSH
70594: LD_VAR 0 1
70598: PPUSH
70599: CALL_OW 437
70603: PUSH
70604: LD_INT 1
70606: ARRAY
70607: PUSH
70608: LD_INT 1
70610: ARRAY
70611: EQUAL
70612: PUSH
70613: LD_VAR 0 2
70617: PUSH
70618: LD_VAR 0 1
70622: PPUSH
70623: CALL_OW 437
70627: PUSH
70628: LD_INT 1
70630: ARRAY
70631: PUSH
70632: LD_INT 2
70634: ARRAY
70635: EQUAL
70636: AND
70637: PUSH
70638: LD_VAR 0 3
70642: PUSH
70643: LD_VAR 0 1
70647: PPUSH
70648: CALL_OW 437
70652: PUSH
70653: LD_INT 1
70655: ARRAY
70656: PUSH
70657: LD_INT 3
70659: ARRAY
70660: EQUAL
70661: AND
70662: IFFALSE 70672
// result := true ;
70664: LD_ADDR_VAR 0 4
70668: PUSH
70669: LD_INT 1
70671: ST_TO_ADDR
// end ; end ;
70672: LD_VAR 0 4
70676: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70677: LD_INT 0
70679: PPUSH
70680: PPUSH
70681: PPUSH
70682: PPUSH
// if not unit or not area then
70683: LD_VAR 0 1
70687: NOT
70688: PUSH
70689: LD_VAR 0 2
70693: NOT
70694: OR
70695: IFFALSE 70699
// exit ;
70697: GO 70863
// tmp := AreaToList ( area , i ) ;
70699: LD_ADDR_VAR 0 6
70703: PUSH
70704: LD_VAR 0 2
70708: PPUSH
70709: LD_VAR 0 5
70713: PPUSH
70714: CALL_OW 517
70718: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70719: LD_ADDR_VAR 0 5
70723: PUSH
70724: DOUBLE
70725: LD_INT 1
70727: DEC
70728: ST_TO_ADDR
70729: LD_VAR 0 6
70733: PUSH
70734: LD_INT 1
70736: ARRAY
70737: PUSH
70738: FOR_TO
70739: IFFALSE 70861
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70741: LD_ADDR_VAR 0 7
70745: PUSH
70746: LD_VAR 0 6
70750: PUSH
70751: LD_INT 1
70753: ARRAY
70754: PUSH
70755: LD_VAR 0 5
70759: ARRAY
70760: PUSH
70761: LD_VAR 0 6
70765: PUSH
70766: LD_INT 2
70768: ARRAY
70769: PUSH
70770: LD_VAR 0 5
70774: ARRAY
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70780: LD_VAR 0 7
70784: PUSH
70785: LD_INT 1
70787: ARRAY
70788: PPUSH
70789: LD_VAR 0 7
70793: PUSH
70794: LD_INT 2
70796: ARRAY
70797: PPUSH
70798: CALL_OW 428
70802: PUSH
70803: LD_INT 0
70805: EQUAL
70806: IFFALSE 70859
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70808: LD_VAR 0 1
70812: PPUSH
70813: LD_VAR 0 7
70817: PUSH
70818: LD_INT 1
70820: ARRAY
70821: PPUSH
70822: LD_VAR 0 7
70826: PUSH
70827: LD_INT 2
70829: ARRAY
70830: PPUSH
70831: LD_VAR 0 3
70835: PPUSH
70836: CALL_OW 48
// result := IsPlaced ( unit ) ;
70840: LD_ADDR_VAR 0 4
70844: PUSH
70845: LD_VAR 0 1
70849: PPUSH
70850: CALL_OW 305
70854: ST_TO_ADDR
// exit ;
70855: POP
70856: POP
70857: GO 70863
// end ; end ;
70859: GO 70738
70861: POP
70862: POP
// end ;
70863: LD_VAR 0 4
70867: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70868: LD_INT 0
70870: PPUSH
70871: PPUSH
70872: PPUSH
// if not side or side > 8 then
70873: LD_VAR 0 1
70877: NOT
70878: PUSH
70879: LD_VAR 0 1
70883: PUSH
70884: LD_INT 8
70886: GREATER
70887: OR
70888: IFFALSE 70892
// exit ;
70890: GO 71079
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70892: LD_ADDR_VAR 0 4
70896: PUSH
70897: LD_INT 22
70899: PUSH
70900: LD_VAR 0 1
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 21
70911: PUSH
70912: LD_INT 3
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PPUSH
70923: CALL_OW 69
70927: ST_TO_ADDR
// if not tmp then
70928: LD_VAR 0 4
70932: NOT
70933: IFFALSE 70937
// exit ;
70935: GO 71079
// enable_addtolog := true ;
70937: LD_ADDR_OWVAR 81
70941: PUSH
70942: LD_INT 1
70944: ST_TO_ADDR
// AddToLog ( [ ) ;
70945: LD_STRING [
70947: PPUSH
70948: CALL_OW 561
// for i in tmp do
70952: LD_ADDR_VAR 0 3
70956: PUSH
70957: LD_VAR 0 4
70961: PUSH
70962: FOR_IN
70963: IFFALSE 71070
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70965: LD_STRING [
70967: PUSH
70968: LD_VAR 0 3
70972: PPUSH
70973: CALL_OW 266
70977: STR
70978: PUSH
70979: LD_STRING , 
70981: STR
70982: PUSH
70983: LD_VAR 0 3
70987: PPUSH
70988: CALL_OW 250
70992: STR
70993: PUSH
70994: LD_STRING , 
70996: STR
70997: PUSH
70998: LD_VAR 0 3
71002: PPUSH
71003: CALL_OW 251
71007: STR
71008: PUSH
71009: LD_STRING , 
71011: STR
71012: PUSH
71013: LD_VAR 0 3
71017: PPUSH
71018: CALL_OW 254
71022: STR
71023: PUSH
71024: LD_STRING , 
71026: STR
71027: PUSH
71028: LD_VAR 0 3
71032: PPUSH
71033: LD_INT 1
71035: PPUSH
71036: CALL_OW 268
71040: STR
71041: PUSH
71042: LD_STRING , 
71044: STR
71045: PUSH
71046: LD_VAR 0 3
71050: PPUSH
71051: LD_INT 2
71053: PPUSH
71054: CALL_OW 268
71058: STR
71059: PUSH
71060: LD_STRING ],
71062: STR
71063: PPUSH
71064: CALL_OW 561
// end ;
71068: GO 70962
71070: POP
71071: POP
// AddToLog ( ]; ) ;
71072: LD_STRING ];
71074: PPUSH
71075: CALL_OW 561
// end ;
71079: LD_VAR 0 2
71083: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71084: LD_INT 0
71086: PPUSH
71087: PPUSH
71088: PPUSH
71089: PPUSH
71090: PPUSH
// if not area or not rate or not max then
71091: LD_VAR 0 1
71095: NOT
71096: PUSH
71097: LD_VAR 0 2
71101: NOT
71102: OR
71103: PUSH
71104: LD_VAR 0 4
71108: NOT
71109: OR
71110: IFFALSE 71114
// exit ;
71112: GO 71306
// while 1 do
71114: LD_INT 1
71116: IFFALSE 71306
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71118: LD_ADDR_VAR 0 9
71122: PUSH
71123: LD_VAR 0 1
71127: PPUSH
71128: LD_INT 1
71130: PPUSH
71131: CALL_OW 287
71135: PUSH
71136: LD_INT 10
71138: MUL
71139: ST_TO_ADDR
// r := rate / 10 ;
71140: LD_ADDR_VAR 0 7
71144: PUSH
71145: LD_VAR 0 2
71149: PUSH
71150: LD_INT 10
71152: DIVREAL
71153: ST_TO_ADDR
// time := 1 1$00 ;
71154: LD_ADDR_VAR 0 8
71158: PUSH
71159: LD_INT 2100
71161: ST_TO_ADDR
// if amount < min then
71162: LD_VAR 0 9
71166: PUSH
71167: LD_VAR 0 3
71171: LESS
71172: IFFALSE 71190
// r := r * 2 else
71174: LD_ADDR_VAR 0 7
71178: PUSH
71179: LD_VAR 0 7
71183: PUSH
71184: LD_INT 2
71186: MUL
71187: ST_TO_ADDR
71188: GO 71216
// if amount > max then
71190: LD_VAR 0 9
71194: PUSH
71195: LD_VAR 0 4
71199: GREATER
71200: IFFALSE 71216
// r := r / 2 ;
71202: LD_ADDR_VAR 0 7
71206: PUSH
71207: LD_VAR 0 7
71211: PUSH
71212: LD_INT 2
71214: DIVREAL
71215: ST_TO_ADDR
// time := time / r ;
71216: LD_ADDR_VAR 0 8
71220: PUSH
71221: LD_VAR 0 8
71225: PUSH
71226: LD_VAR 0 7
71230: DIVREAL
71231: ST_TO_ADDR
// if time < 0 then
71232: LD_VAR 0 8
71236: PUSH
71237: LD_INT 0
71239: LESS
71240: IFFALSE 71257
// time := time * - 1 ;
71242: LD_ADDR_VAR 0 8
71246: PUSH
71247: LD_VAR 0 8
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: MUL
71256: ST_TO_ADDR
// wait ( time ) ;
71257: LD_VAR 0 8
71261: PPUSH
71262: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71266: LD_INT 35
71268: PPUSH
71269: LD_INT 875
71271: PPUSH
71272: CALL_OW 12
71276: PPUSH
71277: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71281: LD_INT 1
71283: PPUSH
71284: LD_INT 5
71286: PPUSH
71287: CALL_OW 12
71291: PPUSH
71292: LD_VAR 0 1
71296: PPUSH
71297: LD_INT 1
71299: PPUSH
71300: CALL_OW 55
// end ;
71304: GO 71114
// end ;
71306: LD_VAR 0 5
71310: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71311: LD_INT 0
71313: PPUSH
71314: PPUSH
71315: PPUSH
71316: PPUSH
71317: PPUSH
71318: PPUSH
71319: PPUSH
71320: PPUSH
// if not turrets or not factories then
71321: LD_VAR 0 1
71325: NOT
71326: PUSH
71327: LD_VAR 0 2
71331: NOT
71332: OR
71333: IFFALSE 71337
// exit ;
71335: GO 71644
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71337: LD_ADDR_VAR 0 10
71341: PUSH
71342: LD_INT 5
71344: PUSH
71345: LD_INT 6
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 2
71354: PUSH
71355: LD_INT 4
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 3
71364: PUSH
71365: LD_INT 5
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 24
71379: PUSH
71380: LD_INT 25
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 23
71389: PUSH
71390: LD_INT 27
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 42
71403: PUSH
71404: LD_INT 43
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 44
71413: PUSH
71414: LD_INT 46
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 45
71423: PUSH
71424: LD_INT 47
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: LIST
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: LIST
71440: ST_TO_ADDR
// result := [ ] ;
71441: LD_ADDR_VAR 0 3
71445: PUSH
71446: EMPTY
71447: ST_TO_ADDR
// for i in turrets do
71448: LD_ADDR_VAR 0 4
71452: PUSH
71453: LD_VAR 0 1
71457: PUSH
71458: FOR_IN
71459: IFFALSE 71642
// begin nat := GetNation ( i ) ;
71461: LD_ADDR_VAR 0 7
71465: PUSH
71466: LD_VAR 0 4
71470: PPUSH
71471: CALL_OW 248
71475: ST_TO_ADDR
// weapon := 0 ;
71476: LD_ADDR_VAR 0 8
71480: PUSH
71481: LD_INT 0
71483: ST_TO_ADDR
// if not nat then
71484: LD_VAR 0 7
71488: NOT
71489: IFFALSE 71493
// continue ;
71491: GO 71458
// for j in list [ nat ] do
71493: LD_ADDR_VAR 0 5
71497: PUSH
71498: LD_VAR 0 10
71502: PUSH
71503: LD_VAR 0 7
71507: ARRAY
71508: PUSH
71509: FOR_IN
71510: IFFALSE 71551
// if GetBWeapon ( i ) = j [ 1 ] then
71512: LD_VAR 0 4
71516: PPUSH
71517: CALL_OW 269
71521: PUSH
71522: LD_VAR 0 5
71526: PUSH
71527: LD_INT 1
71529: ARRAY
71530: EQUAL
71531: IFFALSE 71549
// begin weapon := j [ 2 ] ;
71533: LD_ADDR_VAR 0 8
71537: PUSH
71538: LD_VAR 0 5
71542: PUSH
71543: LD_INT 2
71545: ARRAY
71546: ST_TO_ADDR
// break ;
71547: GO 71551
// end ;
71549: GO 71509
71551: POP
71552: POP
// if not weapon then
71553: LD_VAR 0 8
71557: NOT
71558: IFFALSE 71562
// continue ;
71560: GO 71458
// for k in factories do
71562: LD_ADDR_VAR 0 6
71566: PUSH
71567: LD_VAR 0 2
71571: PUSH
71572: FOR_IN
71573: IFFALSE 71638
// begin weapons := AvailableWeaponList ( k ) ;
71575: LD_ADDR_VAR 0 9
71579: PUSH
71580: LD_VAR 0 6
71584: PPUSH
71585: CALL_OW 478
71589: ST_TO_ADDR
// if not weapons then
71590: LD_VAR 0 9
71594: NOT
71595: IFFALSE 71599
// continue ;
71597: GO 71572
// if weapon in weapons then
71599: LD_VAR 0 8
71603: PUSH
71604: LD_VAR 0 9
71608: IN
71609: IFFALSE 71636
// begin result := [ i , weapon ] ;
71611: LD_ADDR_VAR 0 3
71615: PUSH
71616: LD_VAR 0 4
71620: PUSH
71621: LD_VAR 0 8
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: ST_TO_ADDR
// exit ;
71630: POP
71631: POP
71632: POP
71633: POP
71634: GO 71644
// end ; end ;
71636: GO 71572
71638: POP
71639: POP
// end ;
71640: GO 71458
71642: POP
71643: POP
// end ;
71644: LD_VAR 0 3
71648: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71649: LD_INT 0
71651: PPUSH
// if not side or side > 8 then
71652: LD_VAR 0 3
71656: NOT
71657: PUSH
71658: LD_VAR 0 3
71662: PUSH
71663: LD_INT 8
71665: GREATER
71666: OR
71667: IFFALSE 71671
// exit ;
71669: GO 71730
// if not range then
71671: LD_VAR 0 4
71675: NOT
71676: IFFALSE 71687
// range := - 12 ;
71678: LD_ADDR_VAR 0 4
71682: PUSH
71683: LD_INT 12
71685: NEG
71686: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71687: LD_VAR 0 1
71691: PPUSH
71692: LD_VAR 0 2
71696: PPUSH
71697: LD_VAR 0 3
71701: PPUSH
71702: LD_VAR 0 4
71706: PPUSH
71707: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71711: LD_VAR 0 1
71715: PPUSH
71716: LD_VAR 0 2
71720: PPUSH
71721: LD_VAR 0 3
71725: PPUSH
71726: CALL_OW 331
// end ;
71730: LD_VAR 0 5
71734: RET
// export function Video ( mode ) ; begin
71735: LD_INT 0
71737: PPUSH
// ingame_video = mode ;
71738: LD_ADDR_OWVAR 52
71742: PUSH
71743: LD_VAR 0 1
71747: ST_TO_ADDR
// interface_hidden = mode ;
71748: LD_ADDR_OWVAR 54
71752: PUSH
71753: LD_VAR 0 1
71757: ST_TO_ADDR
// end ;
71758: LD_VAR 0 2
71762: RET
// export function Join ( array , element ) ; begin
71763: LD_INT 0
71765: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71766: LD_ADDR_VAR 0 3
71770: PUSH
71771: LD_VAR 0 1
71775: PPUSH
71776: LD_VAR 0 1
71780: PUSH
71781: LD_INT 1
71783: PLUS
71784: PPUSH
71785: LD_VAR 0 2
71789: PPUSH
71790: CALL_OW 1
71794: ST_TO_ADDR
// end ;
71795: LD_VAR 0 3
71799: RET
// export function JoinUnion ( array , element ) ; begin
71800: LD_INT 0
71802: PPUSH
// result := array union element ;
71803: LD_ADDR_VAR 0 3
71807: PUSH
71808: LD_VAR 0 1
71812: PUSH
71813: LD_VAR 0 2
71817: UNION
71818: ST_TO_ADDR
// end ;
71819: LD_VAR 0 3
71823: RET
// export function GetBehemoths ( side ) ; begin
71824: LD_INT 0
71826: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71827: LD_ADDR_VAR 0 2
71831: PUSH
71832: LD_INT 22
71834: PUSH
71835: LD_VAR 0 1
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 31
71846: PUSH
71847: LD_INT 25
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PPUSH
71858: CALL_OW 69
71862: ST_TO_ADDR
// end ;
71863: LD_VAR 0 2
71867: RET
// export function Shuffle ( array ) ; var i , index ; begin
71868: LD_INT 0
71870: PPUSH
71871: PPUSH
71872: PPUSH
// result := [ ] ;
71873: LD_ADDR_VAR 0 2
71877: PUSH
71878: EMPTY
71879: ST_TO_ADDR
// if not array then
71880: LD_VAR 0 1
71884: NOT
71885: IFFALSE 71889
// exit ;
71887: GO 71988
// Randomize ;
71889: CALL_OW 10
// for i = array downto 1 do
71893: LD_ADDR_VAR 0 3
71897: PUSH
71898: DOUBLE
71899: LD_VAR 0 1
71903: INC
71904: ST_TO_ADDR
71905: LD_INT 1
71907: PUSH
71908: FOR_DOWNTO
71909: IFFALSE 71986
// begin index := rand ( 1 , array ) ;
71911: LD_ADDR_VAR 0 4
71915: PUSH
71916: LD_INT 1
71918: PPUSH
71919: LD_VAR 0 1
71923: PPUSH
71924: CALL_OW 12
71928: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71929: LD_ADDR_VAR 0 2
71933: PUSH
71934: LD_VAR 0 2
71938: PPUSH
71939: LD_VAR 0 2
71943: PUSH
71944: LD_INT 1
71946: PLUS
71947: PPUSH
71948: LD_VAR 0 1
71952: PUSH
71953: LD_VAR 0 4
71957: ARRAY
71958: PPUSH
71959: CALL_OW 2
71963: ST_TO_ADDR
// array := Delete ( array , index ) ;
71964: LD_ADDR_VAR 0 1
71968: PUSH
71969: LD_VAR 0 1
71973: PPUSH
71974: LD_VAR 0 4
71978: PPUSH
71979: CALL_OW 3
71983: ST_TO_ADDR
// end ;
71984: GO 71908
71986: POP
71987: POP
// end ;
71988: LD_VAR 0 2
71992: RET
// export function GetBaseMaterials ( base ) ; begin
71993: LD_INT 0
71995: PPUSH
// result := [ 0 , 0 , 0 ] ;
71996: LD_ADDR_VAR 0 2
72000: PUSH
72001: LD_INT 0
72003: PUSH
72004: LD_INT 0
72006: PUSH
72007: LD_INT 0
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: LIST
72014: ST_TO_ADDR
// if not base then
72015: LD_VAR 0 1
72019: NOT
72020: IFFALSE 72024
// exit ;
72022: GO 72073
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72024: LD_ADDR_VAR 0 2
72028: PUSH
72029: LD_VAR 0 1
72033: PPUSH
72034: LD_INT 1
72036: PPUSH
72037: CALL_OW 275
72041: PUSH
72042: LD_VAR 0 1
72046: PPUSH
72047: LD_INT 2
72049: PPUSH
72050: CALL_OW 275
72054: PUSH
72055: LD_VAR 0 1
72059: PPUSH
72060: LD_INT 3
72062: PPUSH
72063: CALL_OW 275
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: LIST
72072: ST_TO_ADDR
// end ;
72073: LD_VAR 0 2
72077: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72078: LD_INT 0
72080: PPUSH
72081: PPUSH
// result := array ;
72082: LD_ADDR_VAR 0 3
72086: PUSH
72087: LD_VAR 0 1
72091: ST_TO_ADDR
// if size > 0 then
72092: LD_VAR 0 2
72096: PUSH
72097: LD_INT 0
72099: GREATER
72100: IFFALSE 72146
// for i := array downto size do
72102: LD_ADDR_VAR 0 4
72106: PUSH
72107: DOUBLE
72108: LD_VAR 0 1
72112: INC
72113: ST_TO_ADDR
72114: LD_VAR 0 2
72118: PUSH
72119: FOR_DOWNTO
72120: IFFALSE 72144
// result := Delete ( result , result ) ;
72122: LD_ADDR_VAR 0 3
72126: PUSH
72127: LD_VAR 0 3
72131: PPUSH
72132: LD_VAR 0 3
72136: PPUSH
72137: CALL_OW 3
72141: ST_TO_ADDR
72142: GO 72119
72144: POP
72145: POP
// end ;
72146: LD_VAR 0 3
72150: RET
// export function ComExit ( unit ) ; var tmp ; begin
72151: LD_INT 0
72153: PPUSH
72154: PPUSH
// if not IsInUnit ( unit ) then
72155: LD_VAR 0 1
72159: PPUSH
72160: CALL_OW 310
72164: NOT
72165: IFFALSE 72169
// exit ;
72167: GO 72229
// tmp := IsInUnit ( unit ) ;
72169: LD_ADDR_VAR 0 3
72173: PUSH
72174: LD_VAR 0 1
72178: PPUSH
72179: CALL_OW 310
72183: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72184: LD_VAR 0 3
72188: PPUSH
72189: CALL_OW 247
72193: PUSH
72194: LD_INT 2
72196: EQUAL
72197: IFFALSE 72210
// ComExitVehicle ( unit ) else
72199: LD_VAR 0 1
72203: PPUSH
72204: CALL_OW 121
72208: GO 72219
// ComExitBuilding ( unit ) ;
72210: LD_VAR 0 1
72214: PPUSH
72215: CALL_OW 122
// result := tmp ;
72219: LD_ADDR_VAR 0 2
72223: PUSH
72224: LD_VAR 0 3
72228: ST_TO_ADDR
// end ;
72229: LD_VAR 0 2
72233: RET
// export function ResetHc ; begin
72234: LD_INT 0
72236: PPUSH
// InitHc ;
72237: CALL_OW 19
// hc_importance := 0 ;
72241: LD_ADDR_OWVAR 32
72245: PUSH
72246: LD_INT 0
72248: ST_TO_ADDR
// end ;
72249: LD_VAR 0 1
72253: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72254: LD_INT 0
72256: PPUSH
72257: PPUSH
72258: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72259: LD_ADDR_VAR 0 6
72263: PUSH
72264: LD_VAR 0 1
72268: PUSH
72269: LD_VAR 0 3
72273: PLUS
72274: PUSH
72275: LD_INT 2
72277: DIV
72278: ST_TO_ADDR
// if _x < 0 then
72279: LD_VAR 0 6
72283: PUSH
72284: LD_INT 0
72286: LESS
72287: IFFALSE 72304
// _x := _x * - 1 ;
72289: LD_ADDR_VAR 0 6
72293: PUSH
72294: LD_VAR 0 6
72298: PUSH
72299: LD_INT 1
72301: NEG
72302: MUL
72303: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72304: LD_ADDR_VAR 0 7
72308: PUSH
72309: LD_VAR 0 2
72313: PUSH
72314: LD_VAR 0 4
72318: PLUS
72319: PUSH
72320: LD_INT 2
72322: DIV
72323: ST_TO_ADDR
// if _y < 0 then
72324: LD_VAR 0 7
72328: PUSH
72329: LD_INT 0
72331: LESS
72332: IFFALSE 72349
// _y := _y * - 1 ;
72334: LD_ADDR_VAR 0 7
72338: PUSH
72339: LD_VAR 0 7
72343: PUSH
72344: LD_INT 1
72346: NEG
72347: MUL
72348: ST_TO_ADDR
// result := [ _x , _y ] ;
72349: LD_ADDR_VAR 0 5
72353: PUSH
72354: LD_VAR 0 6
72358: PUSH
72359: LD_VAR 0 7
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: ST_TO_ADDR
// end ;
72368: LD_VAR 0 5
72372: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72373: LD_INT 0
72375: PPUSH
72376: PPUSH
72377: PPUSH
72378: PPUSH
// task := GetTaskList ( unit ) ;
72379: LD_ADDR_VAR 0 7
72383: PUSH
72384: LD_VAR 0 1
72388: PPUSH
72389: CALL_OW 437
72393: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72394: LD_VAR 0 7
72398: NOT
72399: PUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: LD_VAR 0 2
72409: PPUSH
72410: CALL_OW 308
72414: NOT
72415: AND
72416: IFFALSE 72420
// exit ;
72418: GO 72538
// if IsInArea ( unit , area ) then
72420: LD_VAR 0 1
72424: PPUSH
72425: LD_VAR 0 2
72429: PPUSH
72430: CALL_OW 308
72434: IFFALSE 72452
// begin ComMoveToArea ( unit , goAway ) ;
72436: LD_VAR 0 1
72440: PPUSH
72441: LD_VAR 0 3
72445: PPUSH
72446: CALL_OW 113
// exit ;
72450: GO 72538
// end ; if task [ 1 ] [ 1 ] <> M then
72452: LD_VAR 0 7
72456: PUSH
72457: LD_INT 1
72459: ARRAY
72460: PUSH
72461: LD_INT 1
72463: ARRAY
72464: PUSH
72465: LD_STRING M
72467: NONEQUAL
72468: IFFALSE 72472
// exit ;
72470: GO 72538
// x := task [ 1 ] [ 2 ] ;
72472: LD_ADDR_VAR 0 5
72476: PUSH
72477: LD_VAR 0 7
72481: PUSH
72482: LD_INT 1
72484: ARRAY
72485: PUSH
72486: LD_INT 2
72488: ARRAY
72489: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72490: LD_ADDR_VAR 0 6
72494: PUSH
72495: LD_VAR 0 7
72499: PUSH
72500: LD_INT 1
72502: ARRAY
72503: PUSH
72504: LD_INT 3
72506: ARRAY
72507: ST_TO_ADDR
// if InArea ( x , y , area ) then
72508: LD_VAR 0 5
72512: PPUSH
72513: LD_VAR 0 6
72517: PPUSH
72518: LD_VAR 0 2
72522: PPUSH
72523: CALL_OW 309
72527: IFFALSE 72538
// ComStop ( unit ) ;
72529: LD_VAR 0 1
72533: PPUSH
72534: CALL_OW 141
// end ;
72538: LD_VAR 0 4
72542: RET
// export function Abs ( value ) ; begin
72543: LD_INT 0
72545: PPUSH
// result := value ;
72546: LD_ADDR_VAR 0 2
72550: PUSH
72551: LD_VAR 0 1
72555: ST_TO_ADDR
// if value < 0 then
72556: LD_VAR 0 1
72560: PUSH
72561: LD_INT 0
72563: LESS
72564: IFFALSE 72581
// result := value * - 1 ;
72566: LD_ADDR_VAR 0 2
72570: PUSH
72571: LD_VAR 0 1
72575: PUSH
72576: LD_INT 1
72578: NEG
72579: MUL
72580: ST_TO_ADDR
// end ;
72581: LD_VAR 0 2
72585: RET
