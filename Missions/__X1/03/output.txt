// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 637 0 0
// PrepareArabian ;
  12: CALL 996 0 0
// PrepareAmerican ;
  16: CALL 4057 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9176 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// end ; end_of_file
 336: LD_VAR 0 1
 340: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 341: LD_INT 0
 343: PPUSH
// uc_side := side ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_VAR 0 1
 353: ST_TO_ADDR
// uc_nation := nation ;
 354: LD_ADDR_OWVAR 21
 358: PUSH
 359: LD_VAR 0 2
 363: ST_TO_ADDR
// vc_chassis := chassis ;
 364: LD_ADDR_OWVAR 37
 368: PUSH
 369: LD_VAR 0 3
 373: ST_TO_ADDR
// vc_engine := engine ;
 374: LD_ADDR_OWVAR 39
 378: PUSH
 379: LD_VAR 0 4
 383: ST_TO_ADDR
// vc_control := control ;
 384: LD_ADDR_OWVAR 38
 388: PUSH
 389: LD_VAR 0 5
 393: ST_TO_ADDR
// vc_weapon := weapon ;
 394: LD_ADDR_OWVAR 40
 398: PUSH
 399: LD_VAR 0 6
 403: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 404: LD_ADDR_OWVAR 41
 408: PUSH
 409: LD_VAR 0 7
 413: ST_TO_ADDR
// result := CreateVehicle ;
 414: LD_ADDR_VAR 0 8
 418: PUSH
 419: CALL_OW 45
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 8
 428: RET
// export function SayX ( units , ident ) ; var i ; begin
 429: LD_INT 0
 431: PPUSH
 432: PPUSH
// result := false ;
 433: LD_ADDR_VAR 0 3
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// if not units then
 441: LD_VAR 0 1
 445: NOT
 446: IFFALSE 450
// exit ;
 448: GO 504
// for i in units do
 450: LD_ADDR_VAR 0 4
 454: PUSH
 455: LD_VAR 0 1
 459: PUSH
 460: FOR_IN
 461: IFFALSE 502
// if IsOk ( i ) then
 463: LD_VAR 0 4
 467: PPUSH
 468: CALL_OW 302
 472: IFFALSE 500
// begin Say ( i , ident ) ;
 474: LD_VAR 0 4
 478: PPUSH
 479: LD_VAR 0 2
 483: PPUSH
 484: CALL_OW 88
// result := i ;
 488: LD_ADDR_VAR 0 3
 492: PUSH
 493: LD_VAR 0 4
 497: ST_TO_ADDR
// break ;
 498: GO 502
// end ;
 500: GO 460
 502: POP
 503: POP
// end ;
 504: LD_VAR 0 3
 508: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 509: LD_INT 0
 511: PPUSH
 512: PPUSH
// InitUc ;
 513: CALL_OW 18
// InitHc ;
 517: CALL_OW 19
// uc_side := 0 ;
 521: LD_ADDR_OWVAR 20
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// uc_nation := 0 ;
 529: LD_ADDR_OWVAR 21
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// for i = 1 to amount do
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: DOUBLE
 543: LD_INT 1
 545: DEC
 546: ST_TO_ADDR
 547: LD_VAR 0 2
 551: PUSH
 552: FOR_TO
 553: IFFALSE 626
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 555: LD_ADDR_OWVAR 29
 559: PUSH
 560: LD_INT 9
 562: PPUSH
 563: LD_INT 12
 565: PPUSH
 566: CALL_OW 12
 570: PUSH
 571: LD_INT 9
 573: PPUSH
 574: LD_INT 12
 576: PPUSH
 577: CALL_OW 12
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: ST_TO_ADDR
// hc_agressivity := 0 ;
 586: LD_ADDR_OWVAR 35
 590: PUSH
 591: LD_INT 0
 593: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 594: LD_INT 0
 596: PPUSH
 597: LD_INT 12
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 607: CALL_OW 44
 611: PPUSH
 612: LD_VAR 0 1
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// end ;
 624: GO 552
 626: POP
 627: POP
// InitHc ;
 628: CALL_OW 19
// end ;
 632: LD_VAR 0 3
 636: RET
// export function CreateNature ; var i ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 641: LD_INT 2
 643: PPUSH
 644: LD_INT 5
 646: PUSH
 647: LD_INT 4
 649: PUSH
 650: LD_INT 4
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_OWVAR 67
 666: ARRAY
 667: PPUSH
 668: CALL 509 0 2
// for i := 1 to 2 do
 672: LD_ADDR_VAR 0 2
 676: PUSH
 677: DOUBLE
 678: LD_INT 1
 680: DEC
 681: ST_TO_ADDR
 682: LD_INT 2
 684: PUSH
 685: FOR_TO
 686: IFFALSE 721
// begin hc_class := 21 ;
 688: LD_ADDR_OWVAR 28
 692: PUSH
 693: LD_INT 21
 695: ST_TO_ADDR
// hc_gallery :=  ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING 
 703: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 704: CALL_OW 44
 708: PPUSH
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 685
 721: POP
 722: POP
// for i := 1 to 2 do
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: DOUBLE
 729: LD_INT 1
 731: DEC
 732: ST_TO_ADDR
 733: LD_INT 2
 735: PUSH
 736: FOR_TO
 737: IFFALSE 772
// begin hc_class := 18 ;
 739: LD_ADDR_OWVAR 28
 743: PUSH
 744: LD_INT 18
 746: ST_TO_ADDR
// hc_gallery :=  ;
 747: LD_ADDR_OWVAR 33
 751: PUSH
 752: LD_STRING 
 754: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 755: CALL_OW 44
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 49
// end ;
 770: GO 736
 772: POP
 773: POP
// for i := 1 to 2 do
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: DOUBLE
 780: LD_INT 1
 782: DEC
 783: ST_TO_ADDR
 784: LD_INT 2
 786: PUSH
 787: FOR_TO
 788: IFFALSE 823
// begin hc_class := 13 ;
 790: LD_ADDR_OWVAR 28
 794: PUSH
 795: LD_INT 13
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 806: CALL_OW 44
 810: PPUSH
 811: LD_INT 2
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 787
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 1
 829: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
// if not observer or not unit then
 835: LD_VAR 0 1
 839: NOT
 840: PUSH
 841: LD_VAR 0 2
 845: NOT
 846: OR
 847: IFFALSE 851
// exit ;
 849: GO 899
// if not See ( GetSide ( observer ) , unit ) then
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: PPUSH
 861: LD_VAR 0 2
 865: PPUSH
 866: CALL_OW 292
 870: NOT
 871: IFFALSE 875
// exit ;
 873: GO 899
// result := GetDistUnits ( observer , unit ) < 12 ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: LD_VAR 0 1
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 296
 894: PUSH
 895: LD_INT 12
 897: LESS
 898: ST_TO_ADDR
// end ;
 899: LD_VAR 0 3
 903: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 904: LD_INT 0
 906: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 488
 929: PUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 428
 952: PUSH
 953: LD_INT 0
 955: EQUAL
 956: AND
 957: IFFALSE 991
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 959: LD_VAR 0 1
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: LD_VAR 0 3
 986: PPUSH
 987: CALL_OW 48
// end ; end_of_file
 991: LD_VAR 0 4
 995: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
 996: LD_INT 0
 998: PPUSH
 999: PPUSH
1000: PPUSH
1001: PPUSH
// uc_side := 5 ;
1002: LD_ADDR_OWVAR 20
1006: PUSH
1007: LD_INT 5
1009: ST_TO_ADDR
// uc_nation := 2 ;
1010: LD_ADDR_OWVAR 21
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1018: LD_INT 5
1020: PPUSH
1021: CALL_OW 274
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: LD_INT 65
1031: PPUSH
1032: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1036: LD_ADDR_EXP 38
1040: PUSH
1041: LD_STRING Farmer
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: LD_STRING 
1049: PPUSH
1050: CALL 40121 0 3
1054: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1055: LD_ADDR_EXP 39
1059: PUSH
1060: LD_STRING Omar
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: LD_STRING 
1068: PPUSH
1069: CALL 40121 0 3
1073: ST_TO_ADDR
// omarSquad := [ ] ;
1074: LD_ADDR_EXP 42
1078: PUSH
1079: EMPTY
1080: ST_TO_ADDR
// heikeSquad := [ ] ;
1081: LD_ADDR_EXP 43
1085: PUSH
1086: EMPTY
1087: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1088: LD_ADDR_EXP 44
1092: PUSH
1093: EMPTY
1094: ST_TO_ADDR
// omarCargo := [ ] ;
1095: LD_ADDR_EXP 45
1099: PUSH
1100: EMPTY
1101: ST_TO_ADDR
// for i := 1 to 5 do
1102: LD_ADDR_VAR 0 2
1106: PUSH
1107: DOUBLE
1108: LD_INT 1
1110: DEC
1111: ST_TO_ADDR
1112: LD_INT 5
1114: PUSH
1115: FOR_TO
1116: IFFALSE 1274
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1118: LD_INT 0
1120: PPUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 2
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_VAR 0 2
1147: ARRAY
1148: PPUSH
1149: LD_INT 3
1151: PPUSH
1152: CALL_OW 380
// un := CreateHuman ;
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: CALL_OW 44
1165: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1166: LD_ADDR_EXP 42
1170: PUSH
1171: LD_EXP 42
1175: PUSH
1176: LD_VAR 0 3
1180: UNION
1181: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 87
1189: PUSH
1190: LD_INT 30
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 91
1199: PUSH
1200: LD_INT 32
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 15
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: LD_INT 79
1219: PUSH
1220: LD_INT 14
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 82
1229: PUSH
1230: LD_INT 13
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL 904 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1257: LD_VAR 0 3
1261: PPUSH
1262: LD_INT 93
1264: PPUSH
1265: LD_INT 21
1267: PPUSH
1268: CALL_OW 118
// end ;
1272: GO 1115
1274: POP
1275: POP
// uc_side := 2 ;
1276: LD_ADDR_OWVAR 20
1280: PUSH
1281: LD_INT 2
1283: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1284: LD_ADDR_EXP 30
1288: PUSH
1289: LD_STRING Heike
1291: PPUSH
1292: LD_EXP 1
1296: NOT
1297: PPUSH
1298: LD_EXP 2
1302: PPUSH
1303: CALL 40121 0 3
1307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1308: LD_ADDR_EXP 34
1312: PUSH
1313: LD_STRING Aviradze
1315: PPUSH
1316: LD_EXP 1
1320: NOT
1321: PPUSH
1322: LD_EXP 2
1326: PPUSH
1327: CALL 40121 0 3
1331: ST_TO_ADDR
// tmp := [ ] ;
1332: LD_ADDR_VAR 0 4
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1339: LD_ADDR_EXP 31
1343: PUSH
1344: LD_STRING Givi
1346: PPUSH
1347: LD_EXP 1
1351: NOT
1352: PPUSH
1353: LD_EXP 2
1357: PPUSH
1358: CALL 40121 0 3
1362: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1363: LD_ADDR_EXP 32
1367: PUSH
1368: LD_STRING Mike
1370: PPUSH
1371: LD_EXP 1
1375: NOT
1376: PPUSH
1377: LD_EXP 2
1381: PPUSH
1382: CALL 40121 0 3
1386: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1387: LD_ADDR_EXP 33
1391: PUSH
1392: LD_STRING Kamil
1394: PPUSH
1395: LD_EXP 1
1399: NOT
1400: PPUSH
1401: LD_EXP 2
1405: PPUSH
1406: CALL 40121 0 3
1410: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1411: LD_ADDR_EXP 35
1415: PUSH
1416: LD_STRING Kaia
1418: PPUSH
1419: LD_EXP 1
1423: NOT
1424: PPUSH
1425: LD_EXP 2
1429: PPUSH
1430: CALL 40121 0 3
1434: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1435: LD_ADDR_EXP 36
1439: PUSH
1440: LD_STRING Sophia
1442: PPUSH
1443: LD_EXP 1
1447: NOT
1448: PPUSH
1449: LD_EXP 2
1453: PPUSH
1454: CALL 40121 0 3
1458: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1459: LD_ADDR_EXP 37
1463: PUSH
1464: LD_STRING Markov
1466: PPUSH
1467: LD_EXP 1
1471: NOT
1472: PPUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 40121 0 3
1482: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1483: LD_ADDR_EXP 44
1487: PUSH
1488: LD_STRING 02_others
1490: PPUSH
1491: CALL_OW 31
1495: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_EXP 32
1505: PUSH
1506: LD_EXP 33
1510: PUSH
1511: LD_EXP 35
1515: PUSH
1516: LD_EXP 36
1520: PUSH
1521: LD_EXP 37
1525: PUSH
1526: LD_EXP 31
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_EXP 44
1543: ADD
1544: PUSH
1545: LD_INT 0
1547: DIFF
1548: ST_TO_ADDR
// heikeSquad := tmp ;
1549: LD_ADDR_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1559: LD_EXP 43
1563: PPUSH
1564: LD_INT 25
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 72
1578: PUSH
1579: LD_INT 3
1581: LESS
1582: IFFALSE 1632
// begin SetClass ( Kaia , 1 ) ;
1584: LD_EXP 35
1588: PPUSH
1589: LD_INT 1
1591: PPUSH
1592: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1596: LD_EXP 32
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1608: LD_EXP 31
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1620: LD_EXP 30
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_VAR 0 4
1641: PUSH
1642: LD_STRING 02_ape
1644: PPUSH
1645: CALL_OW 31
1649: UNION
1650: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1651: LD_EXP 30
1655: PPUSH
1656: LD_INT 92
1658: PPUSH
1659: LD_INT 17
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1669: LD_EXP 38
1673: PPUSH
1674: LD_INT 95
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1687: LD_EXP 39
1691: PPUSH
1692: LD_INT 89
1694: PPUSH
1695: LD_INT 25
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1705: LD_EXP 34
1709: PPUSH
1710: LD_INT 92
1712: PPUSH
1713: LD_INT 27
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1723: LD_EXP 39
1727: PPUSH
1728: LD_EXP 34
1732: PPUSH
1733: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1737: LD_EXP 34
1741: PPUSH
1742: LD_EXP 39
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1751: LD_EXP 30
1755: PUSH
1756: LD_EXP 38
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PPUSH
1765: LD_EXP 39
1769: PPUSH
1770: CALL_OW 119
// if tmp then
1774: LD_VAR 0 4
1778: IFFALSE 1832
// for i in tmp do
1780: LD_ADDR_VAR 0 2
1784: PUSH
1785: LD_VAR 0 4
1789: PUSH
1790: FOR_IN
1791: IFFALSE 1830
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1793: LD_VAR 0 2
1797: PPUSH
1798: LD_INT 94
1800: PPUSH
1801: LD_INT 14
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1814: LD_VAR 0 2
1818: PPUSH
1819: LD_EXP 30
1823: PPUSH
1824: CALL_OW 119
// end ;
1828: GO 1790
1830: POP
1831: POP
// farmerSquad := [ ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: EMPTY
1838: ST_TO_ADDR
// uc_side := 5 ;
1839: LD_ADDR_OWVAR 20
1843: PUSH
1844: LD_INT 5
1846: ST_TO_ADDR
// uc_nation := 2 ;
1847: LD_ADDR_OWVAR 21
1851: PUSH
1852: LD_INT 2
1854: ST_TO_ADDR
// for i := 1 to 4 do
1855: LD_ADDR_VAR 0 2
1859: PUSH
1860: DOUBLE
1861: LD_INT 1
1863: DEC
1864: ST_TO_ADDR
1865: LD_INT 4
1867: PUSH
1868: FOR_TO
1869: IFFALSE 1947
// begin PrepareHuman ( false , 1 , 2 ) ;
1871: LD_INT 0
1873: PPUSH
1874: LD_INT 1
1876: PPUSH
1877: LD_INT 2
1879: PPUSH
1880: CALL_OW 380
// un := CreateHuman ;
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: CALL_OW 44
1893: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1894: LD_VAR 0 3
1898: PPUSH
1899: LD_INT 102
1901: PPUSH
1902: LD_INT 27
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1915: LD_ADDR_EXP 41
1919: PUSH
1920: LD_EXP 41
1924: PUSH
1925: LD_VAR 0 3
1929: UNION
1930: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_EXP 39
1940: PPUSH
1941: CALL_OW 119
// end ;
1945: GO 1868
1947: POP
1948: POP
// for i := 1 to 2 do
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: DOUBLE
1955: LD_INT 1
1957: DEC
1958: ST_TO_ADDR
1959: LD_INT 2
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2041
// begin PrepareHuman ( false , 2 , 2 ) ;
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 2
1970: PPUSH
1971: LD_INT 2
1973: PPUSH
1974: CALL_OW 380
// un := CreateHuman ;
1978: LD_ADDR_VAR 0 3
1982: PUSH
1983: CALL_OW 44
1987: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1988: LD_VAR 0 3
1992: PPUSH
1993: LD_INT 108
1995: PPUSH
1996: LD_INT 62
1998: PPUSH
1999: LD_INT 2
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2009: LD_ADDR_EXP 41
2013: PUSH
2014: LD_EXP 41
2018: PUSH
2019: LD_VAR 0 3
2023: UNION
2024: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2025: LD_VAR 0 3
2029: PPUSH
2030: LD_EXP 39
2034: PPUSH
2035: CALL_OW 119
// end ;
2039: GO 1962
2041: POP
2042: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2043: LD_INT 109
2045: PPUSH
2046: LD_INT 63
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 15
2054: NEG
2055: PPUSH
2056: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2060: LD_INT 109
2062: PPUSH
2063: LD_INT 63
2065: PPUSH
2066: LD_INT 2
2068: PPUSH
2069: CALL_OW 331
// end ;
2073: LD_VAR 0 1
2077: RET
// export function PrepareIbrahim ( x , y ) ; begin
2078: LD_INT 0
2080: PPUSH
// uc_side := 6 ;
2081: LD_ADDR_OWVAR 20
2085: PUSH
2086: LD_INT 6
2088: ST_TO_ADDR
// uc_nation := 3 ;
2089: LD_ADDR_OWVAR 21
2093: PUSH
2094: LD_INT 3
2096: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2097: LD_ADDR_EXP 40
2101: PUSH
2102: LD_STRING IbrahimRu
2104: PPUSH
2105: LD_INT 0
2107: PPUSH
2108: LD_STRING 
2110: PPUSH
2111: CALL 40121 0 3
2115: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2116: LD_EXP 40
2120: PPUSH
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_INT 8
2133: PPUSH
2134: LD_INT 1
2136: PPUSH
2137: CALL_OW 50
// end ;
2141: LD_VAR 0 3
2145: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2146: LD_EXP 39
2150: PUSH
2151: LD_EXP 42
2155: ADD
2156: PPUSH
2157: LD_INT 95
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PPUSH
2167: CALL_OW 72
2171: IFFALSE 2227
2173: GO 2175
2175: DISABLE
2176: LD_INT 0
2178: PPUSH
// begin enable ;
2179: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2180: LD_ADDR_VAR 0 1
2184: PUSH
2185: LD_EXP 39
2189: PUSH
2190: LD_EXP 42
2194: ADD
2195: PPUSH
2196: LD_INT 95
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PPUSH
2206: CALL_OW 72
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2225
// RemoveUnit ( i ) ;
2214: LD_VAR 0 1
2218: PPUSH
2219: CALL_OW 64
2223: GO 2211
2225: POP
2226: POP
// end ;
2227: PPOPN 1
2229: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2230: LD_EXP 3
2234: PUSH
2235: LD_EXP 38
2239: PPUSH
2240: LD_INT 4
2242: PPUSH
2243: CALL_OW 308
2247: AND
2248: IFFALSE 3052
2250: GO 2252
2252: DISABLE
2253: LD_INT 0
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2259: LD_EXP 38
2263: PPUSH
2264: LD_INT 110
2266: PPUSH
2267: LD_INT 60
2269: PPUSH
2270: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2274: LD_EXP 38
2278: PPUSH
2279: LD_INT 110
2281: PPUSH
2282: LD_INT 61
2284: PPUSH
2285: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_EXP 41
2298: PPUSH
2299: LD_INT 25
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 72
2313: ST_TO_ADDR
// if tmp then
2314: LD_VAR 0 2
2318: IFFALSE 2412
// begin for i := 1 to 2 do
2320: LD_ADDR_VAR 0 1
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 2
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2410
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2336: LD_VAR 0 2
2340: PUSH
2341: LD_VAR 0 1
2345: ARRAY
2346: PPUSH
2347: LD_INT 5
2349: PPUSH
2350: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2354: LD_VAR 0 2
2358: PUSH
2359: LD_VAR 0 1
2363: ARRAY
2364: PPUSH
2365: LD_INT 2
2367: PPUSH
2368: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: PPUSH
2383: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2387: LD_VAR 0 2
2391: PUSH
2392: LD_VAR 0 1
2396: ARRAY
2397: PPUSH
2398: LD_INT 107
2400: PPUSH
2401: LD_INT 66
2403: PPUSH
2404: CALL_OW 171
// end ;
2408: GO 2333
2410: POP
2411: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: LD_EXP 41
2421: PPUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: PPUSH
2432: CALL_OW 72
2436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2437: LD_INT 35
2439: PPUSH
2440: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2444: LD_ADDR_VAR 0 2
2448: PUSH
2449: LD_EXP 41
2453: PPUSH
2454: LD_INT 25
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PPUSH
2464: CALL_OW 72
2468: ST_TO_ADDR
// until tmp ;
2469: LD_VAR 0 2
2473: IFFALSE 2437
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 31
2482: PPUSH
2483: LD_INT 102
2485: PPUSH
2486: LD_INT 69
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2503: LD_EXP 41
2507: PPUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 60
2513: PUSH
2514: EMPTY
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 25
2523: PUSH
2524: LD_INT 2
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PPUSH
2535: CALL_OW 72
2539: IFFALSE 2496
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2541: LD_ADDR_VAR 0 2
2545: PUSH
2546: LD_EXP 41
2550: PPUSH
2551: LD_INT 25
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PPUSH
2561: CALL_OW 72
2565: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2566: LD_VAR 0 2
2570: PPUSH
2571: LD_INT 6
2573: PPUSH
2574: LD_INT 116
2576: PPUSH
2577: LD_INT 55
2579: PPUSH
2580: LD_INT 4
2582: PPUSH
2583: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2587: LD_VAR 0 2
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 116
2597: PPUSH
2598: LD_INT 70
2600: PPUSH
2601: LD_INT 5
2603: PPUSH
2604: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2608: LD_VAR 0 2
2612: PPUSH
2613: LD_INT 31
2615: PPUSH
2616: LD_INT 109
2618: PPUSH
2619: LD_INT 50
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2629: LD_INT 35
2631: PPUSH
2632: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2636: LD_INT 22
2638: PUSH
2639: LD_INT 5
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 30
2648: PUSH
2649: LD_INT 4
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: IFFALSE 2629
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2680: LD_ADDR_VAR 0 3
2684: PUSH
2685: LD_INT 22
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 30
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 3
2707: PUSH
2708: LD_INT 57
2710: PUSH
2711: EMPTY
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: LD_INT 1
2730: ARRAY
2731: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2732: LD_ADDR_VAR 0 2
2736: PUSH
2737: LD_EXP 41
2741: PPUSH
2742: LD_INT 25
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: CALL_OW 72
2756: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2771: LD_INT 35
2773: PPUSH
2774: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2778: LD_INT 22
2780: PUSH
2781: LD_INT 5
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 30
2790: PUSH
2791: LD_INT 31
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 3
2800: PUSH
2801: LD_INT 57
2803: PUSH
2804: EMPTY
2805: LIST
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: PPUSH
2816: CALL_OW 69
2820: PUSH
2821: LD_INT 2
2823: GREATEREQUAL
2824: IFFALSE 2771
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2826: LD_ADDR_VAR 0 2
2830: PUSH
2831: LD_EXP 41
2835: PPUSH
2836: LD_INT 25
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 72
2850: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2851: LD_VAR 0 2
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: PPUSH
2860: LD_INT 5
2862: PPUSH
2863: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2867: LD_VAR 0 2
2871: PUSH
2872: LD_INT 2
2874: ARRAY
2875: PUSH
2876: LD_VAR 0 2
2880: PUSH
2881: LD_INT 3
2883: ARRAY
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: LD_VAR 0 3
2893: PPUSH
2894: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2898: LD_VAR 0 2
2902: PUSH
2903: LD_INT 2
2905: ARRAY
2906: PUSH
2907: LD_VAR 0 2
2911: PUSH
2912: LD_INT 3
2914: ARRAY
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2927: LD_VAR 0 2
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PUSH
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 3
2943: ARRAY
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 5
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 30
2970: PUSH
2971: LD_INT 31
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// for i := 1 to 2 do
2987: LD_ADDR_VAR 0 1
2991: PUSH
2992: DOUBLE
2993: LD_INT 1
2995: DEC
2996: ST_TO_ADDR
2997: LD_INT 2
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3035
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3003: LD_VAR 0 2
3007: PUSH
3008: LD_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PLUS
3016: ARRAY
3017: PPUSH
3018: LD_VAR 0 4
3022: PUSH
3023: LD_VAR 0 1
3027: ARRAY
3028: PPUSH
3029: CALL_OW 180
3033: GO 3000
3035: POP
3036: POP
// wait ( 1 1$00 ) ;
3037: LD_INT 2100
3039: PPUSH
3040: CALL_OW 67
// farmerBaseReady := true ;
3044: LD_ADDR_EXP 4
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// end ;
3052: PPOPN 4
3054: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3055: LD_EXP 4
3059: PUSH
3060: LD_EXP 12
3064: NOT
3065: AND
3066: IFFALSE 3588
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
3074: PPUSH
3075: PPUSH
3076: PPUSH
3077: PPUSH
// begin enable ;
3078: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: LD_EXP 41
3088: PPUSH
3089: LD_INT 25
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 72
3103: PUSH
3104: LD_EXP 38
3108: ADD
3109: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3110: LD_ADDR_VAR 0 2
3114: PUSH
3115: LD_EXP 41
3119: PPUSH
3120: LD_INT 25
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: LD_INT 22
3142: PUSH
3143: LD_INT 5
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 24
3165: PUSH
3166: LD_INT 1000
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 5
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 30
3204: PUSH
3205: LD_INT 4
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PPUSH
3216: CALL_OW 69
3220: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3221: LD_VAR 0 4
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PPUSH
3230: CALL_OW 302
3234: IFFALSE 3298
// for i in sol do
3236: LD_ADDR_VAR 0 1
3240: PUSH
3241: LD_VAR 0 3
3245: PUSH
3246: FOR_IN
3247: IFFALSE 3296
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3249: LD_VAR 0 1
3253: PPUSH
3254: CALL_OW 256
3258: PUSH
3259: LD_INT 999
3261: LESS
3262: PUSH
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 310
3272: NOT
3273: AND
3274: IFFALSE 3294
// ComEnterUnit ( i , arm [ 1 ] ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 120
3294: GO 3246
3296: POP
3297: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3298: LD_VAR 0 2
3302: NOT
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 1
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 1
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: NOT
3333: AND
3334: IFFALSE 3426
// begin uc_side := 5 ;
3336: LD_ADDR_OWVAR 20
3340: PUSH
3341: LD_INT 5
3343: ST_TO_ADDR
// uc_nation := 2 ;
3344: LD_ADDR_OWVAR 21
3348: PUSH
3349: LD_INT 2
3351: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3352: LD_INT 0
3354: PPUSH
3355: LD_INT 2
3357: PPUSH
3358: LD_INT 2
3360: PPUSH
3361: CALL_OW 380
// eng := CreateHuman ;
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3375: LD_VAR 0 2
3379: PPUSH
3380: LD_INT 102
3382: PPUSH
3383: LD_INT 8
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_INT 110
3400: PPUSH
3401: LD_INT 60
3403: PPUSH
3404: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3408: LD_ADDR_EXP 41
3412: PUSH
3413: LD_EXP 41
3417: PUSH
3418: LD_VAR 0 2
3422: UNION
3423: ST_TO_ADDR
// end else
3424: GO 3588
// begin for i in eng do
3426: LD_ADDR_VAR 0 1
3430: PUSH
3431: LD_VAR 0 2
3435: PUSH
3436: FOR_IN
3437: IFFALSE 3586
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3439: LD_INT 10
3441: PPUSH
3442: LD_INT 1
3444: PPUSH
3445: CALL_OW 287
3449: IFFALSE 3500
// begin if IsInUnit ( i ) then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 310
3460: IFFALSE 3471
// ComExitBuilding ( i ) ;
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 10
3478: PPUSH
3479: CALL_OW 308
3483: NOT
3484: IFFALSE 3498
// AddComMoveToArea ( i , collectFarmerArea ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: LD_INT 10
3493: PPUSH
3494: CALL_OW 173
// end else
3498: GO 3584
// begin if damagedBuilding then
3500: LD_VAR 0 5
3504: IFFALSE 3548
// begin if IsInUnit ( i ) then
3506: LD_VAR 0 1
3510: PPUSH
3511: CALL_OW 310
3515: IFFALSE 3528
// ComExitBuilding ( i ) else
3517: LD_VAR 0 1
3521: PPUSH
3522: CALL_OW 122
3526: GO 3546
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_VAR 0 5
3537: PUSH
3538: LD_INT 1
3540: ARRAY
3541: PPUSH
3542: CALL_OW 130
// end else
3546: GO 3584
// if not IsInUnit ( i ) and not HasTask ( i ) then
3548: LD_VAR 0 1
3552: PPUSH
3553: CALL_OW 310
3557: NOT
3558: PUSH
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 314
3568: NOT
3569: AND
3570: IFFALSE 3584
// ComEnterUnit ( i , arDepot ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 5
3579: PPUSH
3580: CALL_OW 120
// end ; end ;
3584: GO 3436
3586: POP
3587: POP
// end ; end ;
3588: PPOPN 5
3590: END
// export function CargoEvacuation ; begin
3591: LD_INT 0
3593: PPUSH
// wait ( 0 0$3 ) ;
3594: LD_INT 105
3596: PPUSH
3597: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3601: LD_ADDR_EXP 22
3605: PUSH
3606: LD_EXP 22
3610: PUSH
3611: LD_INT 1
3613: MINUS
3614: ST_TO_ADDR
// if omarCargoCounter = 0 then
3615: LD_EXP 22
3619: PUSH
3620: LD_INT 0
3622: EQUAL
3623: IFFALSE 3627
// exit ;
3625: GO 3934
// if omarCargo then
3627: LD_EXP 45
3631: IFFALSE 3642
// RemoveUnit ( omarCargo ) ;
3633: LD_EXP 45
3637: PPUSH
3638: CALL_OW 64
// omarCargo := PrepareCargo ;
3642: LD_ADDR_EXP 45
3646: PUSH
3647: CALL 3939 0 0
3651: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3652: LD_EXP 45
3656: PPUSH
3657: LD_INT 0
3659: PPUSH
3660: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3664: LD_EXP 45
3668: PPUSH
3669: LD_INT 107
3671: PPUSH
3672: LD_INT 59
3674: PPUSH
3675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3679: LD_INT 35
3681: PPUSH
3682: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 45
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3701: LD_EXP 45
3705: PPUSH
3706: CALL_OW 302
3710: NOT
3711: PUSH
3712: LD_EXP 45
3716: PPUSH
3717: CALL_OW 301
3721: OR
3722: IFFALSE 3726
// exit ;
3724: GO 3934
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3726: LD_EXP 45
3730: PPUSH
3731: LD_INT 107
3733: PPUSH
3734: LD_INT 59
3736: PPUSH
3737: CALL_OW 307
3741: PUSH
3742: LD_EXP 45
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: CALL_OW 296
3754: PUSH
3755: LD_INT 6
3757: LESS
3758: OR
3759: IFFALSE 3679
// SetTag ( omarCargo , 1 ) ;
3761: LD_EXP 45
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 109
// wait ( 0 0$03 ) ;
3773: LD_INT 105
3775: PPUSH
3776: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3780: LD_EXP 45
3784: PPUSH
3785: LD_INT 5
3787: PPUSH
3788: LD_INT 1
3790: PPUSH
3791: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3795: LD_EXP 45
3799: PPUSH
3800: LD_INT 103
3802: PPUSH
3803: LD_INT 9
3805: PPUSH
3806: CALL_OW 171
// wait ( 0 0$1 ) ;
3810: LD_INT 35
3812: PPUSH
3813: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3817: LD_EXP 45
3821: PPUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 100
3827: PPUSH
3828: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3832: LD_INT 35
3834: PPUSH
3835: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3839: LD_EXP 45
3843: PPUSH
3844: LD_INT 103
3846: PPUSH
3847: LD_INT 9
3849: PPUSH
3850: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3854: LD_EXP 45
3858: PPUSH
3859: CALL_OW 302
3863: NOT
3864: PUSH
3865: LD_EXP 45
3869: PPUSH
3870: CALL_OW 301
3874: OR
3875: IFFALSE 3879
// exit ;
3877: GO 3934
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3879: LD_EXP 45
3883: PPUSH
3884: LD_INT 103
3886: PPUSH
3887: LD_INT 9
3889: PPUSH
3890: CALL_OW 307
3894: PUSH
3895: LD_EXP 45
3899: PPUSH
3900: LD_INT 3
3902: PPUSH
3903: CALL_OW 308
3907: OR
3908: PUSH
3909: LD_EXP 45
3913: PPUSH
3914: CALL_OW 110
3918: PUSH
3919: LD_INT 0
3921: GREATER
3922: AND
3923: IFFALSE 3832
// RemoveUnit ( omarCargo ) ;
3925: LD_EXP 45
3929: PPUSH
3930: CALL_OW 64
// end ;
3934: LD_VAR 0 1
3938: RET
// export function PrepareCargo ; var un , veh ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3944: LD_ADDR_VAR 0 3
3948: PUSH
3949: LD_INT 5
3951: PPUSH
3952: LD_INT 2
3954: PPUSH
3955: LD_INT 14
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: LD_INT 32
3966: PPUSH
3967: LD_INT 80
3969: PPUSH
3970: CALL 341 0 7
3974: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_INT 4
3982: PPUSH
3983: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 101
3994: PPUSH
3995: LD_INT 8
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4005: LD_INT 0
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 4
4013: PPUSH
4014: CALL_OW 380
// un := CreateHuman ;
4018: LD_ADDR_VAR 0 2
4022: PUSH
4023: CALL_OW 44
4027: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4028: LD_VAR 0 2
4032: PPUSH
4033: LD_VAR 0 3
4037: PPUSH
4038: CALL_OW 52
// result := veh ;
4042: LD_ADDR_VAR 0 1
4046: PUSH
4047: LD_VAR 0 3
4051: ST_TO_ADDR
// end ; end_of_file
4052: LD_VAR 0 1
4056: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
4061: PPUSH
// usForces := [ ] ;
4062: LD_ADDR_EXP 46
4066: PUSH
4067: EMPTY
4068: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4069: LD_ADDR_EXP 48
4073: PUSH
4074: LD_INT 6
4076: PUSH
4077: LD_INT 32
4079: PUSH
4080: LD_INT 27
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 4
4094: PUSH
4095: LD_INT 43
4097: PUSH
4098: LD_INT 24
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_INT 27
4112: PUSH
4113: LD_INT 29
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4133: LD_INT 11
4135: PPUSH
4136: CALL_OW 274
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_INT 150
4146: PUSH
4147: LD_INT 120
4149: PUSH
4150: LD_INT 100
4152: PUSH
4153: LD_INT 80
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: PUSH
4162: LD_OWVAR 67
4166: ARRAY
4167: PPUSH
4168: CALL_OW 277
// if Difficulty = 1 then
4172: LD_OWVAR 67
4176: PUSH
4177: LD_INT 1
4179: EQUAL
4180: IFFALSE 4189
// RemoveUnit ( hillBun ) ;
4182: LD_INT 14
4184: PPUSH
4185: CALL_OW 64
// uc_side := 1 ;
4189: LD_ADDR_OWVAR 20
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// uc_nation := 1 ;
4197: LD_ADDR_OWVAR 21
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// hc_gallery :=  ;
4205: LD_ADDR_OWVAR 33
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// hc_name :=  ;
4213: LD_ADDR_OWVAR 26
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_importance := 0 ;
4221: LD_ADDR_OWVAR 32
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 380
// usCommander := CreateHuman ;
4242: LD_ADDR_EXP 47
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4252: LD_EXP 47
4256: PPUSH
4257: LD_INT 11
4259: PPUSH
4260: CALL_OW 52
// if Difficulty > 1 then
4264: LD_OWVAR 67
4268: PUSH
4269: LD_INT 1
4271: GREATER
4272: IFFALSE 4354
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 1
4279: PPUSH
4280: LD_INT 1
4282: PUSH
4283: LD_INT 2
4285: PUSH
4286: LD_INT 3
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_OWVAR 67
4298: ARRAY
4299: PPUSH
4300: CALL_OW 380
// un := CreateHuman ;
4304: LD_ADDR_VAR 0 3
4308: PUSH
4309: CALL_OW 44
4313: ST_TO_ADDR
// usForces := usForces union un ;
4314: LD_ADDR_EXP 46
4318: PUSH
4319: LD_EXP 46
4323: PUSH
4324: LD_VAR 0 3
4328: UNION
4329: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4330: LD_VAR 0 3
4334: PPUSH
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_INT 14
4349: PPUSH
4350: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4354: LD_ADDR_VAR 0 2
4358: PUSH
4359: DOUBLE
4360: LD_INT 1
4362: DEC
4363: ST_TO_ADDR
4364: LD_INT 2
4366: PUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: LD_OWVAR 67
4386: ARRAY
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4535
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4391: LD_INT 0
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 1
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_OWVAR 67
4419: ARRAY
4420: PPUSH
4421: CALL_OW 380
// un := CreateHuman ;
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: CALL_OW 44
4434: ST_TO_ADDR
// usForces := usForces union un ;
4435: LD_ADDR_EXP 46
4439: PUSH
4440: LD_EXP 46
4444: PUSH
4445: LD_VAR 0 3
4449: UNION
4450: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: LD_INT 39
4458: PPUSH
4459: LD_INT 24
4461: PPUSH
4462: LD_INT 4
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: CALL_OW 50
// if i < 3 then
4472: LD_VAR 0 2
4476: PUSH
4477: LD_INT 3
4479: LESS
4480: IFFALSE 4533
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4482: LD_VAR 0 3
4486: PPUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 58
4499: PUSH
4500: EMPTY
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 31
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: PUSH
4523: LD_VAR 0 2
4527: ARRAY
4528: PPUSH
4529: CALL_OW 120
// end ;
4533: GO 4388
4535: POP
4536: POP
// for i := 1 to 2 do
4537: LD_ADDR_VAR 0 2
4541: PUSH
4542: DOUBLE
4543: LD_INT 1
4545: DEC
4546: ST_TO_ADDR
4547: LD_INT 2
4549: PUSH
4550: FOR_TO
4551: IFFALSE 4615
// begin PrepareHuman ( false , 2 , 2 ) ;
4553: LD_INT 0
4555: PPUSH
4556: LD_INT 2
4558: PPUSH
4559: LD_INT 2
4561: PPUSH
4562: CALL_OW 380
// un := CreateHuman ;
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// usForces := usForces union un ;
4576: LD_ADDR_EXP 46
4580: PUSH
4581: LD_EXP 46
4585: PUSH
4586: LD_VAR 0 3
4590: UNION
4591: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4592: LD_VAR 0 3
4596: PPUSH
4597: LD_INT 39
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 4
4605: PPUSH
4606: LD_INT 0
4608: PPUSH
4609: CALL_OW 50
// end ;
4613: GO 4550
4615: POP
4616: POP
// PrepareHuman ( false , 4 , 1 ) ;
4617: LD_INT 0
4619: PPUSH
4620: LD_INT 4
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 380
// un := CreateHuman ;
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: CALL_OW 44
4639: ST_TO_ADDR
// usForces := usForces union un ;
4640: LD_ADDR_EXP 46
4644: PUSH
4645: LD_EXP 46
4649: PUSH
4650: LD_VAR 0 3
4654: UNION
4655: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4656: LD_VAR 0 3
4660: PPUSH
4661: LD_INT 39
4663: PPUSH
4664: LD_INT 24
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 50
// end ;
4677: LD_VAR 0 1
4681: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4682: LD_EXP 46
4686: PUSH
4687: LD_EXP 7
4691: NOT
4692: AND
4693: PUSH
4694: LD_EXP 15
4698: NOT
4699: AND
4700: IFFALSE 5131
4702: GO 4704
4704: DISABLE
4705: LD_INT 0
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
// begin enable ;
4712: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4713: LD_ADDR_VAR 0 3
4717: PUSH
4718: LD_EXP 46
4722: PPUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 72
4737: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4738: LD_ADDR_VAR 0 4
4742: PUSH
4743: LD_EXP 46
4747: PPUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 72
4762: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4763: LD_ADDR_VAR 0 5
4767: PUSH
4768: LD_EXP 46
4772: PPUSH
4773: LD_INT 25
4775: PUSH
4776: LD_INT 4
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PPUSH
4783: CALL_OW 72
4787: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4788: LD_INT 7
4790: PPUSH
4791: LD_INT 22
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PPUSH
4801: CALL_OW 70
4805: PUSH
4806: LD_INT 1
4808: EQUAL
4809: IFFALSE 4885
// for i in sol do
4811: LD_ADDR_VAR 0 1
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: FOR_IN
4822: IFFALSE 4883
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4824: LD_VAR 0 1
4828: PPUSH
4829: CALL_OW 310
4833: NOT
4834: PUSH
4835: LD_VAR 0 1
4839: PPUSH
4840: CALL_OW 310
4844: PPUSH
4845: CALL_OW 266
4849: PUSH
4850: LD_INT 4
4852: EQUAL
4853: NOT
4854: OR
4855: IFFALSE 4881
// begin ComExitBuilding ( i ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_INT 37
4873: PPUSH
4874: LD_INT 23
4876: PPUSH
4877: CALL_OW 174
// end ;
4881: GO 4821
4883: POP
4884: POP
// if eng then
4885: LD_VAR 0 3
4889: IFFALSE 5131
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 22
4898: PUSH
4899: LD_INT 1
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 95
4908: PUSH
4909: LD_INT 7
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 21
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 24
4931: PUSH
4932: LD_INT 1000
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: PPUSH
4949: CALL_OW 69
4953: ST_TO_ADDR
// if b then
4954: LD_VAR 0 2
4958: IFFALSE 4989
// begin ComExitBuilding ( eng ) ;
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4969: LD_VAR 0 3
4973: PPUSH
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 190
// end else
4987: GO 5131
// begin for i in eng do
4989: LD_ADDR_VAR 0 1
4993: PUSH
4994: LD_VAR 0 3
4998: PUSH
4999: FOR_IN
5000: IFFALSE 5129
// if not HasTask ( i ) then
5002: LD_VAR 0 1
5006: PPUSH
5007: CALL_OW 314
5011: NOT
5012: IFFALSE 5127
// begin if americanBuildList then
5014: LD_EXP 48
5018: IFFALSE 5103
// begin if IsInUnit ( i ) then
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 310
5029: IFFALSE 5040
// ComExitBuilding ( i ) ;
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_EXP 48
5049: PUSH
5050: LD_INT 1
5052: ARRAY
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_INT 1
5065: ARRAY
5066: PUSH
5067: LD_INT 2
5069: ARRAY
5070: PPUSH
5071: LD_EXP 48
5075: PUSH
5076: LD_INT 1
5078: ARRAY
5079: PUSH
5080: LD_INT 3
5082: ARRAY
5083: PPUSH
5084: LD_EXP 48
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: PUSH
5093: LD_INT 4
5095: ARRAY
5096: PPUSH
5097: CALL_OW 205
// end else
5101: GO 5127
// if not IsInUnit ( i ) then
5103: LD_VAR 0 1
5107: PPUSH
5108: CALL_OW 310
5112: NOT
5113: IFFALSE 5127
// ComEnterUnit ( i , usDepot ) ;
5115: LD_VAR 0 1
5119: PPUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 120
// end ;
5127: GO 4999
5129: POP
5130: POP
// end ; end ; end ;
5131: PPOPN 5
5133: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5134: LD_INT 0
5136: PPUSH
5137: PPUSH
5138: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 35
5146: PUSH
5147: LD_INT 45
5149: PUSH
5150: LD_INT 48
5152: PUSH
5153: LD_INT 82
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: ST_TO_ADDR
// for i in tech do
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 3
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5191
// AddComResearch ( lab , i ) ;
5175: LD_VAR 0 1
5179: PPUSH
5180: LD_VAR 0 4
5184: PPUSH
5185: CALL_OW 184
5189: GO 5172
5191: POP
5192: POP
// end ;
5193: LD_VAR 0 2
5197: RET
// every 4 4$00 + 4 4$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5198: LD_EXP 13
5202: PUSH
5203: LD_EXP 24
5207: PUSH
5208: LD_EXP 28
5212: LESSEQUAL
5213: AND
5214: IFFALSE 5239
5216: GO 5218
5218: DISABLE
// begin enable ;
5219: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5220: LD_INT 35
5222: PPUSH
5223: LD_INT 2065
5225: PPUSH
5226: CALL_OW 12
5230: PPUSH
5231: CALL_OW 67
// SendConvoy ;
5235: CALL 5345 0 0
// end ;
5239: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5240: LD_EXP 7
5244: PUSH
5245: LD_EXP 19
5249: AND
5250: IFFALSE 5344
5252: GO 5254
5254: DISABLE
// begin if americanHasEscaped then
5255: LD_EXP 9
5259: IFFALSE 5270
// wait ( 3 3$20 ) else
5261: LD_INT 7000
5263: PPUSH
5264: CALL_OW 67
5268: GO 5277
// wait ( 6 6$40 ) ;
5270: LD_INT 14000
5272: PPUSH
5273: CALL_OW 67
// SendAttack ;
5277: CALL 6118 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 5 5$20 , 4 4$50 ] [ Difficulty ] ) ;
5281: LD_INT 14000
5283: PUSH
5284: LD_INT 11900
5286: PUSH
5287: LD_INT 11200
5289: PUSH
5290: LD_INT 10150
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_OWVAR 67
5303: ARRAY
5304: PPUSH
5305: CALL_OW 67
// SendAttack ;
5309: CALL 6118 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5313: LD_EXP 20
5317: PUSH
5318: LD_INT 5
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_OWVAR 67
5340: ARRAY
5341: LESS
5342: IFFALSE 5281
// end ;
5344: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5345: LD_INT 0
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
5354: PPUSH
// road := rand ( 1 , 2 ) ;
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: CALL_OW 12
5370: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5371: LD_ADDR_VAR 0 8
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 8
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_VAR 0 4
5390: ARRAY
5391: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5392: LD_ADDR_VAR 0 5
5396: PUSH
5397: LD_INT 35
5399: PUSH
5400: LD_INT 66
5402: PUSH
5403: LD_INT 1
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 101
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: LD_INT 4
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5429: LD_ADDR_VAR 0 6
5433: PUSH
5434: LD_INT 34
5436: PUSH
5437: LD_INT 67
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 38
5446: PUSH
5447: LD_INT 62
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 43
5456: PUSH
5457: LD_INT 54
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 57
5466: PUSH
5467: LD_INT 57
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 77
5476: PUSH
5477: LD_INT 71
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 86
5486: PUSH
5487: LD_INT 60
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 89
5496: PUSH
5497: LD_INT 35
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 93
5506: PUSH
5507: LD_INT 17
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 97
5516: PUSH
5517: LD_INT 10
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 103
5526: PUSH
5527: LD_INT 9
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: ST_TO_ADDR
// if road = 2 then
5546: LD_VAR 0 4
5550: PUSH
5551: LD_INT 2
5553: EQUAL
5554: IFFALSE 5571
// points := ReverseArray ( points ) ;
5556: LD_ADDR_VAR 0 6
5560: PUSH
5561: LD_VAR 0 6
5565: PPUSH
5566: CALL 72877 0 1
5570: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5571: LD_INT 4
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_INT 2
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 12
5588: PPUSH
5589: LD_INT 80
5591: PPUSH
5592: CALL 341 0 7
// veh := CreateVehicle ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: CALL_OW 45
5605: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_VAR 0 5
5615: PUSH
5616: LD_VAR 0 4
5620: ARRAY
5621: PUSH
5622: LD_INT 3
5624: ARRAY
5625: PPUSH
5626: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5630: LD_VAR 0 3
5634: PPUSH
5635: LD_VAR 0 5
5639: PUSH
5640: LD_VAR 0 4
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: ARRAY
5649: PPUSH
5650: LD_VAR 0 5
5654: PUSH
5655: LD_VAR 0 4
5659: ARRAY
5660: PUSH
5661: LD_INT 2
5663: ARRAY
5664: PPUSH
5665: LD_INT 0
5667: PPUSH
5668: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5672: LD_INT 0
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_OWVAR 67
5682: PPUSH
5683: CALL_OW 380
// un := CreateHuman ;
5687: LD_ADDR_VAR 0 2
5691: PUSH
5692: CALL_OW 44
5696: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_VAR 0 3
5706: PPUSH
5707: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5711: LD_INT 70
5713: PUSH
5714: LD_INT 66
5716: PUSH
5717: LD_INT 62
5719: PUSH
5720: LD_INT 58
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: PUSH
5729: LD_OWVAR 67
5733: ARRAY
5734: PPUSH
5735: CALL_OW 13
5739: PUSH
5740: LD_OWVAR 1
5744: PUSH
5745: LD_INT 30
5747: MOD
5748: PLUS
5749: PUSH
5750: LD_EXP 24
5754: PUSH
5755: LD_INT 4
5757: LESS
5758: OR
5759: IFFALSE 5776
// SetCargo ( veh , mat_cans , 100 ) ;
5761: LD_VAR 0 3
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 100
5771: PPUSH
5772: CALL_OW 290
// for i := 2 to points do
5776: LD_ADDR_VAR 0 7
5780: PUSH
5781: DOUBLE
5782: LD_INT 2
5784: DEC
5785: ST_TO_ADDR
5786: LD_VAR 0 6
5790: PUSH
5791: FOR_TO
5792: IFFALSE 5835
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5794: LD_VAR 0 3
5798: PPUSH
5799: LD_VAR 0 6
5803: PUSH
5804: LD_VAR 0 7
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: ARRAY
5813: PPUSH
5814: LD_VAR 0 6
5818: PUSH
5819: LD_VAR 0 7
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: CALL_OW 171
5833: GO 5791
5835: POP
5836: POP
// convoyCounter := convoyCounter + 1 ;
5837: LD_ADDR_EXP 24
5841: PUSH
5842: LD_EXP 24
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5851: LD_INT 35
5853: PPUSH
5854: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5858: LD_VAR 0 3
5862: PPUSH
5863: CALL_OW 255
5867: PUSH
5868: LD_INT 4
5870: NONEQUAL
5871: IFFALSE 5884
// begin ComStop ( veh ) ;
5873: LD_VAR 0 3
5877: PPUSH
5878: CALL_OW 141
// exit ;
5882: GO 6113
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5884: LD_VAR 0 3
5888: PPUSH
5889: CALL_OW 314
5893: NOT
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: CALL_OW 302
5904: AND
5905: IFFALSE 5946
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5907: LD_VAR 0 3
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_VAR 0 6
5921: ARRAY
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_VAR 0 6
5931: PUSH
5932: LD_VAR 0 6
5936: ARRAY
5937: PUSH
5938: LD_INT 2
5940: ARRAY
5941: PPUSH
5942: CALL_OW 111
// if not IsInUnit ( un ) then
5946: LD_VAR 0 2
5950: PPUSH
5951: CALL_OW 310
5955: NOT
5956: IFFALSE 5997
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_VAR 0 6
5967: PUSH
5968: LD_VAR 0 6
5972: ARRAY
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: LD_VAR 0 6
5982: PUSH
5983: LD_VAR 0 6
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_VAR 0 8
6006: PPUSH
6007: CALL_OW 308
6011: PUSH
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_VAR 0 8
6021: PPUSH
6022: CALL_OW 308
6026: OR
6027: IFFALSE 5851
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6029: LD_VAR 0 2
6033: PPUSH
6034: CALL_OW 302
6038: PUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: CALL_OW 302
6048: NOT
6049: AND
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: LD_VAR 0 8
6060: PPUSH
6061: CALL_OW 308
6065: AND
6066: IFFALSE 6077
// RemoveUnit ( un ) ;
6068: LD_VAR 0 2
6072: PPUSH
6073: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 8
6086: PPUSH
6087: CALL_OW 308
6091: PUSH
6092: LD_VAR 0 3
6096: PPUSH
6097: CALL_OW 302
6101: AND
6102: IFFALSE 6113
// RemoveUnit ( veh ) ;
6104: LD_VAR 0 3
6108: PPUSH
6109: CALL_OW 64
// end ;
6113: LD_VAR 0 1
6117: RET
// export function SendAttack ; var un , veh , i ; begin
6118: LD_INT 0
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
// if blockAttack then
6124: LD_EXP 29
6128: IFFALSE 6151
// begin repeat wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// until not blockAttack ;
6137: LD_EXP 29
6141: NOT
6142: IFFALSE 6130
// wait ( 0 0$5 ) ;
6144: LD_INT 175
6146: PPUSH
6147: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: PUSH
6180: LD_INT 10
6182: GREATER
6183: IFFALSE 6226
// begin repeat wait ( 0 0$1 ) ;
6185: LD_INT 35
6187: PPUSH
6188: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6192: LD_INT 22
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: PUSH
6221: LD_INT 10
6223: LESSEQUAL
6224: IFFALSE 6185
// end ; IncomingAttack ;
6226: CALL 15540 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6230: LD_INT 2100
6232: PPUSH
6233: LD_INT 3500
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: CALL_OW 67
// if blockAttack then
6245: LD_EXP 29
6249: IFFALSE 6272
// begin repeat wait ( 0 0$1 ) ;
6251: LD_INT 35
6253: PPUSH
6254: CALL_OW 67
// until not blockAttack ;
6258: LD_EXP 29
6262: NOT
6263: IFFALSE 6251
// wait ( 0 0$5 ) ;
6265: LD_INT 175
6267: PPUSH
6268: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6272: LD_ADDR_VAR 0 4
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 5
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_OWVAR 67
6304: ARRAY
6305: PUSH
6306: LD_EXP 20
6310: PUSH
6311: LD_INT 3
6313: DIV
6314: PLUS
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6433
// begin uc_side := 1 ;
6319: LD_ADDR_OWVAR 20
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// uc_nation := 1 ;
6327: LD_ADDR_OWVAR 21
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6335: LD_INT 0
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 2
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: LD_INT 4
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_OWVAR 67
6363: ARRAY
6364: PPUSH
6365: CALL_OW 380
// un := CreateHuman ;
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: CALL_OW 44
6378: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6379: LD_VAR 0 2
6383: PPUSH
6384: LD_INT 37
6386: PPUSH
6387: LD_INT 70
6389: PPUSH
6390: LD_INT 3
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: CALL_OW 50
// usAttackers := usAttackers union un ;
6400: LD_ADDR_EXP 49
6404: PUSH
6405: LD_EXP 49
6409: PUSH
6410: LD_VAR 0 2
6414: UNION
6415: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6416: LD_VAR 0 2
6420: PPUSH
6421: LD_INT 40
6423: PPUSH
6424: LD_INT 65
6426: PPUSH
6427: CALL_OW 111
// end ;
6431: GO 6316
6433: POP
6434: POP
// uc_side := 1 ;
6435: LD_ADDR_OWVAR 20
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// uc_nation := 1 ;
6443: LD_ADDR_OWVAR 21
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6451: LD_INT 0
6453: PPUSH
6454: LD_INT 4
6456: PPUSH
6457: LD_INT 2
6459: PPUSH
6460: CALL_OW 380
// un := CreateHuman ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: CALL_OW 44
6473: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6474: LD_VAR 0 2
6478: PPUSH
6479: LD_INT 37
6481: PPUSH
6482: LD_INT 70
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: LD_INT 0
6490: PPUSH
6491: CALL_OW 50
// usAttackers := usAttackers union un ;
6495: LD_ADDR_EXP 49
6499: PUSH
6500: LD_EXP 49
6504: PUSH
6505: LD_VAR 0 2
6509: UNION
6510: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6511: LD_VAR 0 2
6515: PPUSH
6516: LD_INT 40
6518: PPUSH
6519: LD_INT 65
6521: PPUSH
6522: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6526: LD_ADDR_VAR 0 4
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_OWVAR 67
6540: PUSH
6541: LD_EXP 20
6545: PUSH
6546: LD_INT 4
6548: DIV
6549: PLUS
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6748
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_INT 1
6561: PPUSH
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 3
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: CALL_OW 12
6589: ARRAY
6590: PPUSH
6591: LD_INT 1
6593: PPUSH
6594: LD_INT 1
6596: PPUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: ARRAY
6622: PPUSH
6623: LD_INT 90
6625: PPUSH
6626: CALL 341 0 7
6630: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6631: LD_VAR 0 3
6635: PPUSH
6636: LD_INT 35
6638: PPUSH
6639: LD_INT 65
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6649: LD_INT 0
6651: PPUSH
6652: LD_INT 3
6654: PPUSH
6655: LD_OWVAR 67
6659: PUSH
6660: LD_INT 1
6662: PLUS
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6678: LD_VAR 0 2
6682: PPUSH
6683: LD_VAR 0 3
6687: PPUSH
6688: CALL_OW 52
// usAttackers := usAttackers union un ;
6692: LD_ADDR_EXP 49
6696: PUSH
6697: LD_EXP 49
6701: PUSH
6702: LD_VAR 0 2
6706: UNION
6707: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6708: LD_VAR 0 3
6712: PPUSH
6713: LD_INT 39
6715: PPUSH
6716: LD_INT 60
6718: PPUSH
6719: CALL_OW 111
// wait ( 0 0$3 ) ;
6723: LD_INT 105
6725: PPUSH
6726: CALL_OW 67
// usAttackers := usAttackers union veh ;
6730: LD_ADDR_EXP 49
6734: PUSH
6735: LD_EXP 49
6739: PUSH
6740: LD_VAR 0 3
6744: UNION
6745: ST_TO_ADDR
// end ;
6746: GO 6551
6748: POP
6749: POP
// attackWave := attackWave + 1 ;
6750: LD_ADDR_EXP 20
6754: PUSH
6755: LD_EXP 20
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6764: LD_EXP 25
6768: PPUSH
6769: CALL_OW 427
// end ;
6773: LD_VAR 0 1
6777: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6778: LD_INT 0
6780: PPUSH
6781: PPUSH
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
// if retreatAllowed then
6791: LD_EXP 12
6795: IFFALSE 6807
// strategy := 2 else
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: LD_INT 2
6804: ST_TO_ADDR
6805: GO 6823
// strategy := rand ( 0 , 2 ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 0
6814: PPUSH
6815: LD_INT 2
6817: PPUSH
6818: CALL_OW 12
6822: ST_TO_ADDR
// attackFormula := [ ] ;
6823: LD_ADDR_VAR 0 6
6827: PUSH
6828: EMPTY
6829: ST_TO_ADDR
// case strategy of 0 :
6830: LD_VAR 0 5
6834: PUSH
6835: LD_INT 0
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 7173
6843: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6844: LD_INT 11
6846: PPUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 30
6859: PUSH
6860: LD_INT 4
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 70
6875: NOT
6876: IFFALSE 6948
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_INT 41
6885: PUSH
6886: LD_INT 34
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: PUSH
6896: LD_INT 53
6898: PUSH
6899: LD_INT 62
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 37
6908: PUSH
6909: LD_INT 63
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 44
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 37
6928: PUSH
6929: LD_INT 28
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
6946: GO 7171
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6948: LD_INT 12
6950: PPUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 2
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 2
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 32
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 70
7008: NOT
7009: IFFALSE 7092
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7011: LD_ADDR_VAR 0 6
7015: PUSH
7016: LD_INT 27
7018: PUSH
7019: LD_INT 42
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 27
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 53
7042: PUSH
7043: LD_INT 62
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 37
7052: PUSH
7053: LD_INT 63
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 44
7062: PUSH
7063: LD_INT 45
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 37
7072: PUSH
7073: LD_INT 28
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7171
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_INT 71
7099: PUSH
7100: LD_INT 67
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 54
7109: PUSH
7110: LD_INT 35
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 63
7123: PUSH
7124: LD_INT 40
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 37
7133: PUSH
7134: LD_INT 63
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 44
7143: PUSH
7144: LD_INT 45
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 37
7153: PUSH
7154: LD_INT 28
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: ST_TO_ADDR
// end ; 1 :
7171: GO 7376
7173: LD_INT 1
7175: DOUBLE
7176: EQUAL
7177: IFTRUE 7181
7179: GO 7285
7181: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7182: LD_ADDR_VAR 0 6
7186: PUSH
7187: LD_INT 71
7189: PUSH
7190: LD_INT 67
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 82
7199: PUSH
7200: LD_INT 23
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 53
7209: PUSH
7210: LD_INT 7
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 43
7219: PUSH
7220: LD_INT 10
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 53
7235: PUSH
7236: LD_INT 62
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 37
7245: PUSH
7246: LD_INT 63
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 44
7255: PUSH
7256: LD_INT 45
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 37
7265: PUSH
7266: LD_INT 28
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: ST_TO_ADDR
7283: GO 7376
7285: LD_INT 2
7287: DOUBLE
7288: EQUAL
7289: IFTRUE 7293
7291: GO 7375
7293: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7294: LD_ADDR_VAR 0 6
7298: PUSH
7299: LD_INT 90
7301: PUSH
7302: LD_INT 59
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 108
7311: PUSH
7312: LD_INT 64
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 82
7325: PUSH
7326: LD_INT 75
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 73
7335: PUSH
7336: LD_INT 67
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 101
7345: PUSH
7346: LD_INT 65
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 108
7355: PUSH
7356: LD_INT 62
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
7373: GO 7376
7375: POP
// if not attackFormula then
7376: LD_VAR 0 6
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 9063
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7385: LD_ADDR_VAR 0 7
7389: PUSH
7390: LD_EXP 49
7394: PPUSH
7395: LD_INT 25
7397: PUSH
7398: LD_INT 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PPUSH
7405: CALL_OW 72
7409: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7410: LD_ADDR_VAR 0 8
7414: PUSH
7415: LD_EXP 49
7419: PPUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 4
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 72
7434: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7435: LD_ADDR_VAR 0 9
7439: PUSH
7440: LD_EXP 49
7444: PPUSH
7445: LD_INT 25
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 72
7459: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7460: LD_ADDR_VAR 0 10
7464: PUSH
7465: LD_EXP 49
7469: PPUSH
7470: LD_INT 21
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: ST_TO_ADDR
// if sci then
7485: LD_VAR 0 8
7489: IFFALSE 7526
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7491: LD_VAR 0 8
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: LD_VAR 0 6
7513: PUSH
7514: LD_INT 2
7516: ARRAY
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: PPUSH
7522: CALL_OW 111
// repeat wait ( 10 ) ;
7526: LD_INT 10
7528: PPUSH
7529: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7533: LD_ADDR_VAR 0 7
7537: PUSH
7538: LD_EXP 49
7542: PPUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 72
7557: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7558: LD_ADDR_VAR 0 8
7562: PUSH
7563: LD_EXP 49
7567: PPUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 72
7582: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7583: LD_ADDR_VAR 0 9
7587: PUSH
7588: LD_EXP 49
7592: PPUSH
7593: LD_INT 25
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 72
7607: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7608: LD_ADDR_VAR 0 10
7612: PUSH
7613: LD_EXP 49
7617: PPUSH
7618: LD_INT 21
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 72
7632: ST_TO_ADDR
// if sol then
7633: LD_VAR 0 7
7637: IFFALSE 8058
// begin for i in sol do
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_VAR 0 7
7648: PUSH
7649: FOR_IN
7650: IFFALSE 8056
// begin tag := GetTag ( i ) ;
7652: LD_ADDR_VAR 0 4
7656: PUSH
7657: LD_VAR 0 2
7661: PPUSH
7662: CALL_OW 110
7666: ST_TO_ADDR
// if not tag then
7667: LD_VAR 0 4
7671: NOT
7672: IFFALSE 7781
// begin if GetLives ( i ) = 1000 then
7674: LD_VAR 0 2
7678: PPUSH
7679: CALL_OW 256
7683: PUSH
7684: LD_INT 1000
7686: EQUAL
7687: IFFALSE 7703
// SetTag ( i , 1 ) else
7689: LD_VAR 0 2
7693: PPUSH
7694: LD_INT 1
7696: PPUSH
7697: CALL_OW 109
7701: GO 7779
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7703: LD_VAR 0 2
7707: PPUSH
7708: LD_VAR 0 6
7712: PUSH
7713: LD_INT 2
7715: ARRAY
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: ARRAY
7729: PUSH
7730: LD_INT 2
7732: ARRAY
7733: PPUSH
7734: CALL_OW 297
7738: PUSH
7739: LD_INT 10
7741: GREATER
7742: IFFALSE 7779
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_VAR 0 6
7753: PUSH
7754: LD_INT 2
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PUSH
7771: LD_INT 2
7773: ARRAY
7774: PPUSH
7775: CALL_OW 111
// end else
7779: GO 8054
// begin if GetLives ( i ) < 760 then
7781: LD_VAR 0 2
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 760
7793: LESS
7794: IFFALSE 7845
// begin SetTag ( i , 0 ) ;
7796: LD_VAR 0 2
7800: PPUSH
7801: LD_INT 0
7803: PPUSH
7804: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7808: LD_VAR 0 2
7812: PPUSH
7813: LD_VAR 0 6
7817: PUSH
7818: LD_INT 2
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_VAR 0 6
7830: PUSH
7831: LD_INT 2
7833: ARRAY
7834: PUSH
7835: LD_INT 2
7837: ARRAY
7838: PPUSH
7839: CALL_OW 111
// end else
7843: GO 8054
// if tag <= attackFormula [ 1 ] then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 6
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: LESSEQUAL
7859: IFFALSE 8020
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 6
7870: PUSH
7871: LD_INT 1
7873: ARRAY
7874: PUSH
7875: LD_VAR 0 4
7879: ARRAY
7880: PUSH
7881: LD_INT 1
7883: ARRAY
7884: PPUSH
7885: LD_VAR 0 6
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PUSH
7900: LD_INT 2
7902: ARRAY
7903: PPUSH
7904: CALL_OW 297
7908: PUSH
7909: LD_INT 6
7911: GREATER
7912: IFFALSE 7963
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7914: LD_VAR 0 2
7918: PPUSH
7919: LD_VAR 0 6
7923: PUSH
7924: LD_INT 1
7926: ARRAY
7927: PUSH
7928: LD_VAR 0 4
7932: ARRAY
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 6
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PUSH
7947: LD_VAR 0 4
7951: ARRAY
7952: PUSH
7953: LD_INT 2
7955: ARRAY
7956: PPUSH
7957: CALL_OW 114
7961: GO 8018
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7963: LD_INT 81
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 91
7975: PUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 10
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PPUSH
7993: CALL_OW 69
7997: NOT
7998: IFFALSE 8018
// SetTag ( i , tag + 1 ) ;
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: PLUS
8013: PPUSH
8014: CALL_OW 109
// end else
8018: GO 8054
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 81
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PPUSH
8035: CALL_OW 69
8039: PPUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 74
8049: PPUSH
8050: CALL_OW 115
// end ; end ;
8054: GO 7649
8056: POP
8057: POP
// end ; if sci then
8058: LD_VAR 0 8
8062: IFFALSE 8331
// begin if not sol and not mech then
8064: LD_VAR 0 7
8068: NOT
8069: PUSH
8070: LD_VAR 0 9
8074: NOT
8075: AND
8076: IFFALSE 8128
// begin for i in sci do
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_VAR 0 8
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8124
// begin usForces := usForces union i ;
8091: LD_ADDR_EXP 46
8095: PUSH
8096: LD_EXP 46
8100: PUSH
8101: LD_VAR 0 2
8105: UNION
8106: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8107: LD_VAR 0 2
8111: PPUSH
8112: LD_INT 34
8114: PPUSH
8115: LD_INT 68
8117: PPUSH
8118: CALL_OW 111
// end ;
8122: GO 8088
8124: POP
8125: POP
// end else
8126: GO 8331
// for i in sci do
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 8
8137: PUSH
8138: FOR_IN
8139: IFFALSE 8329
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_VAR 0 6
8150: PUSH
8151: LD_INT 2
8153: ARRAY
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 6
8163: PUSH
8164: LD_INT 2
8166: ARRAY
8167: PUSH
8168: LD_INT 2
8170: ARRAY
8171: PPUSH
8172: CALL_OW 297
8176: PUSH
8177: LD_INT 10
8179: GREATER
8180: IFFALSE 8219
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_VAR 0 6
8191: PUSH
8192: LD_INT 2
8194: ARRAY
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 6
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PPUSH
8213: CALL_OW 111
8217: GO 8327
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8219: LD_VAR 0 7
8223: PPUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: LD_INT 1000
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 91
8243: PUSH
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 10
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: IFFALSE 8327
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_VAR 0 7
8276: PPUSH
8277: LD_INT 3
8279: PUSH
8280: LD_INT 24
8282: PUSH
8283: LD_INT 1000
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 91
8296: PUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 10
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 72
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: CALL_OW 128
8327: GO 8138
8329: POP
8330: POP
// end ; if mech then
8331: LD_VAR 0 9
8335: IFFALSE 9045
// begin for i in mech do
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_VAR 0 9
8346: PUSH
8347: FOR_IN
8348: IFFALSE 9043
// begin tag := GetTag ( i ) ;
8350: LD_ADDR_VAR 0 4
8354: PUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 110
8364: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8365: LD_ADDR_VAR 0 11
8369: PUSH
8370: LD_VAR 0 2
8374: PPUSH
8375: CALL_OW 310
8379: ST_TO_ADDR
// if not tag then
8380: LD_VAR 0 4
8384: NOT
8385: IFFALSE 8756
// begin if veh then
8387: LD_VAR 0 11
8391: IFFALSE 8562
// begin if GetLives ( veh ) = 1000 then
8393: LD_VAR 0 11
8397: PPUSH
8398: CALL_OW 256
8402: PUSH
8403: LD_INT 1000
8405: EQUAL
8406: IFFALSE 8422
// SetTag ( i , 1 ) else
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 1
8415: PPUSH
8416: CALL_OW 109
8420: GO 8560
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8422: LD_VAR 0 11
8426: PPUSH
8427: LD_VAR 0 6
8431: PUSH
8432: LD_INT 3
8434: ARRAY
8435: PUSH
8436: LD_INT 1
8438: ARRAY
8439: PPUSH
8440: LD_VAR 0 6
8444: PUSH
8445: LD_INT 3
8447: ARRAY
8448: PUSH
8449: LD_INT 2
8451: ARRAY
8452: PPUSH
8453: CALL_OW 297
8457: PUSH
8458: LD_INT 8
8460: GREATER
8461: IFFALSE 8500
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8463: LD_VAR 0 11
8467: PPUSH
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 6
8485: PUSH
8486: LD_INT 3
8488: ARRAY
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 111
8498: GO 8560
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8500: LD_INT 81
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 91
8512: PUSH
8513: LD_VAR 0 2
8517: PUSH
8518: LD_INT 12
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: NOT
8535: IFFALSE 8560
// begin ComExitVehicle ( i ) ;
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: LD_VAR 0 11
8555: PPUSH
8556: CALL_OW 189
// end ; end else
8560: GO 8754
// if GetLives ( i ) < 400 then
8562: LD_VAR 0 2
8566: PPUSH
8567: CALL_OW 256
8571: PUSH
8572: LD_INT 400
8574: LESS
8575: IFFALSE 8626
// begin usAttackers := usAttackers diff i ;
8577: LD_ADDR_EXP 49
8581: PUSH
8582: LD_EXP 49
8586: PUSH
8587: LD_VAR 0 2
8591: DIFF
8592: ST_TO_ADDR
// usForces := usForces union i ;
8593: LD_ADDR_EXP 46
8597: PUSH
8598: LD_EXP 46
8602: PUSH
8603: LD_VAR 0 2
8607: UNION
8608: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 34
8616: PPUSH
8617: LD_INT 68
8619: PPUSH
8620: CALL_OW 111
// end else
8624: GO 8754
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8626: LD_VAR 0 10
8630: PPUSH
8631: LD_INT 58
8633: PUSH
8634: EMPTY
8635: LIST
8636: PUSH
8637: LD_INT 24
8639: PUSH
8640: LD_INT 1000
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 72
8655: PUSH
8656: LD_VAR 0 2
8660: PPUSH
8661: CALL_OW 314
8665: NOT
8666: AND
8667: PUSH
8668: LD_INT 81
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 91
8680: PUSH
8681: LD_VAR 0 2
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: OR
8703: IFFALSE 8754
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8705: LD_VAR 0 2
8709: PPUSH
8710: LD_VAR 0 10
8714: PPUSH
8715: LD_INT 58
8717: PUSH
8718: EMPTY
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 250
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL_OW 72
8739: PPUSH
8740: LD_VAR 0 2
8744: PPUSH
8745: CALL_OW 74
8749: PPUSH
8750: CALL_OW 120
// end else
8754: GO 9041
// begin if veh and GetLives ( veh ) < 760 then
8756: LD_VAR 0 11
8760: PUSH
8761: LD_VAR 0 11
8765: PPUSH
8766: CALL_OW 256
8770: PUSH
8771: LD_INT 760
8773: LESS
8774: AND
8775: IFFALSE 8826
// begin SetTag ( i , 0 ) ;
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 0
8784: PPUSH
8785: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8789: LD_VAR 0 11
8793: PPUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 3
8801: ARRAY
8802: PUSH
8803: LD_INT 1
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 6
8811: PUSH
8812: LD_INT 3
8814: ARRAY
8815: PUSH
8816: LD_INT 2
8818: ARRAY
8819: PPUSH
8820: CALL_OW 111
// end else
8824: GO 9041
// if veh then
8826: LD_VAR 0 11
8830: IFFALSE 9041
// if tag <= attackFormula [ 4 ] then
8832: LD_VAR 0 4
8836: PUSH
8837: LD_VAR 0 6
8841: PUSH
8842: LD_INT 4
8844: ARRAY
8845: LESSEQUAL
8846: IFFALSE 9007
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8848: LD_VAR 0 11
8852: PPUSH
8853: LD_VAR 0 6
8857: PUSH
8858: LD_INT 4
8860: ARRAY
8861: PUSH
8862: LD_VAR 0 4
8866: ARRAY
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_INT 4
8879: ARRAY
8880: PUSH
8881: LD_VAR 0 4
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: PPUSH
8891: CALL_OW 297
8895: PUSH
8896: LD_INT 6
8898: GREATER
8899: IFFALSE 8950
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8901: LD_VAR 0 11
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 4
8913: ARRAY
8914: PUSH
8915: LD_VAR 0 4
8919: ARRAY
8920: PUSH
8921: LD_INT 1
8923: ARRAY
8924: PPUSH
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 4
8932: ARRAY
8933: PUSH
8934: LD_VAR 0 4
8938: ARRAY
8939: PUSH
8940: LD_INT 2
8942: ARRAY
8943: PPUSH
8944: CALL_OW 114
8948: GO 9005
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8950: LD_INT 81
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 91
8962: PUSH
8963: LD_VAR 0 11
8967: PUSH
8968: LD_INT 10
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 69
8984: NOT
8985: IFFALSE 9005
// SetTag ( i , tag + 1 ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_VAR 0 4
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: PPUSH
9001: CALL_OW 109
// end else
9005: GO 9041
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9007: LD_VAR 0 11
9011: PPUSH
9012: LD_INT 81
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PPUSH
9022: CALL_OW 69
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL_OW 74
9036: PPUSH
9037: CALL_OW 115
// end ; end ;
9041: GO 8347
9043: POP
9044: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9045: LD_EXP 49
9049: PPUSH
9050: LD_INT 52
9052: PUSH
9053: EMPTY
9054: LIST
9055: PPUSH
9056: CALL_OW 72
9060: NOT
9061: IFFALSE 7526
// end ;
9063: LD_VAR 0 1
9067: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9068: LD_INT 22
9070: PUSH
9071: LD_INT 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 32
9080: PUSH
9081: LD_INT 1
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: IFFALSE 9173
9098: GO 9100
9100: DISABLE
9101: LD_INT 0
9103: PPUSH
// begin enable ;
9104: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 32
9122: PUSH
9123: LD_INT 1
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9171
// if GetFuel ( i ) < 10 then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 261
9151: PUSH
9152: LD_INT 10
9154: LESS
9155: IFFALSE 9169
// SetFuel ( i , 10 ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_INT 10
9164: PPUSH
9165: CALL_OW 240
9169: GO 9139
9171: POP
9172: POP
// end ; end_of_file
9173: PPOPN 1
9175: END
// export function Action ; var hasAll , i , tmp ; begin
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9182: LD_ADDR_VAR 0 2
9186: PUSH
9187: LD_INT 22
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 21
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 23
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 69
9226: PUSH
9227: LD_INT 7
9229: GREATEREQUAL
9230: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_STRING 03_HasAll
9238: PPUSH
9239: CALL_OW 39
// Video ( true ) ;
9243: LD_INT 1
9245: PPUSH
9246: CALL 77561 0 1
// CenterNowOnUnits ( Heike ) ;
9250: LD_EXP 30
9254: PPUSH
9255: CALL_OW 87
// wait ( 0 0$2 ) ;
9259: LD_INT 70
9261: PPUSH
9262: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9266: LD_EXP 38
9270: PPUSH
9271: LD_STRING DF-1-start
9273: PPUSH
9274: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9278: LD_EXP 30
9282: PPUSH
9283: LD_EXP 38
9287: PPUSH
9288: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DH-1-start
9299: PPUSH
9300: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9304: LD_EXP 39
9308: PPUSH
9309: LD_INT 92
9311: PPUSH
9312: LD_INT 21
9314: PPUSH
9315: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9319: LD_EXP 34
9323: PPUSH
9324: LD_INT 94
9326: PPUSH
9327: LD_INT 23
9329: PPUSH
9330: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9334: LD_EXP 42
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_INT 90
9345: PPUSH
9346: LD_INT 23
9348: PPUSH
9349: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9353: LD_EXP 42
9357: PUSH
9358: LD_INT 2
9360: ARRAY
9361: PPUSH
9362: LD_INT 93
9364: PPUSH
9365: LD_INT 25
9367: PPUSH
9368: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9372: LD_EXP 42
9376: PPUSH
9377: LD_EXP 39
9381: PPUSH
9382: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9386: LD_EXP 39
9390: PUSH
9391: LD_EXP 34
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PPUSH
9400: LD_EXP 30
9404: PPUSH
9405: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9409: LD_EXP 30
9413: PPUSH
9414: LD_EXP 39
9418: PPUSH
9419: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9423: LD_INT 35
9425: PPUSH
9426: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9430: LD_EXP 39
9434: PPUSH
9435: LD_INT 92
9437: PPUSH
9438: LD_INT 21
9440: PPUSH
9441: CALL_OW 307
9445: IFFALSE 9423
// Say ( Omar , DO-1-start ) ;
9447: LD_EXP 39
9451: PPUSH
9452: LD_STRING DO-1-start
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9459: LD_EXP 30
9463: PPUSH
9464: LD_STRING DH-2-start
9466: PPUSH
9467: CALL_OW 88
// if hasAll then
9471: LD_VAR 0 2
9475: IFFALSE 9603
// begin Say ( Omar , DO-2-start ) ;
9477: LD_EXP 39
9481: PPUSH
9482: LD_STRING DO-2-start
9484: PPUSH
9485: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9489: LD_EXP 39
9493: PPUSH
9494: LD_STRING DO-3-start
9496: PPUSH
9497: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9501: LD_EXP 30
9505: PPUSH
9506: LD_STRING DH-3-start
9508: PPUSH
9509: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9513: LD_EXP 38
9517: PPUSH
9518: LD_STRING DF-2-start
9520: PPUSH
9521: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9525: LD_EXP 39
9529: PPUSH
9530: LD_EXP 38
9534: PPUSH
9535: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9539: LD_EXP 39
9543: PPUSH
9544: LD_STRING DO-4-start
9546: PPUSH
9547: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9551: LD_EXP 38
9555: PPUSH
9556: LD_STRING DF-3-start
9558: PPUSH
9559: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9563: LD_EXP 39
9567: PPUSH
9568: LD_STRING DO-5-start
9570: PPUSH
9571: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9575: LD_EXP 38
9579: PPUSH
9580: LD_STRING DF-4-start
9582: PPUSH
9583: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9587: LD_EXP 39
9591: PPUSH
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 119
// end else
9601: GO 9703
// begin Say ( Omar , DO-2-start-a ) ;
9603: LD_EXP 39
9607: PPUSH
9608: LD_STRING DO-2-start-a
9610: PPUSH
9611: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9615: LD_EXP 39
9619: PPUSH
9620: LD_STRING DO-3-start-a
9622: PPUSH
9623: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9627: LD_EXP 30
9631: PPUSH
9632: LD_STRING DH-3-start-a
9634: PPUSH
9635: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9639: LD_EXP 38
9643: PPUSH
9644: LD_STRING DF-2-start-a
9646: PPUSH
9647: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9651: LD_EXP 39
9655: PPUSH
9656: LD_EXP 38
9660: PPUSH
9661: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9665: LD_EXP 39
9669: PPUSH
9670: LD_STRING DO-4-start-a
9672: PPUSH
9673: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9677: LD_EXP 38
9681: PPUSH
9682: LD_STRING DF-3-start-a
9684: PPUSH
9685: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9689: LD_EXP 39
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9703: LD_INT 10
9705: PPUSH
9706: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9710: LD_EXP 39
9714: PPUSH
9715: LD_STRING DO-1-mission
9717: PPUSH
9718: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9722: LD_EXP 39
9726: PPUSH
9727: LD_STRING DO-2-mission
9729: PPUSH
9730: CALL_OW 88
// if not hasAll then
9734: LD_VAR 0 2
9738: NOT
9739: IFFALSE 9753
// Say ( Omar , DO-3-mission ) ;
9741: LD_EXP 39
9745: PPUSH
9746: LD_STRING DO-3-mission
9748: PPUSH
9749: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9753: LD_EXP 39
9757: PPUSH
9758: LD_STRING DO-4-mission
9760: PPUSH
9761: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9765: LD_EXP 30
9769: PPUSH
9770: LD_STRING DH-1-mission
9772: PPUSH
9773: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9777: LD_EXP 38
9781: PPUSH
9782: LD_STRING DF-1-mission
9784: PPUSH
9785: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9789: LD_EXP 39
9793: PPUSH
9794: LD_STRING DO-5-mission
9796: PPUSH
9797: CALL_OW 88
// if not hasAll then
9801: LD_VAR 0 2
9805: NOT
9806: IFFALSE 9941
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9808: LD_ADDR_VAR 0 4
9812: PUSH
9813: LD_INT 22
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 1
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 69
9852: ST_TO_ADDR
// for i := 7 downto tmp do
9853: LD_ADDR_VAR 0 3
9857: PUSH
9858: DOUBLE
9859: LD_INT 7
9861: INC
9862: ST_TO_ADDR
9863: LD_VAR 0 4
9867: PUSH
9868: FOR_DOWNTO
9869: IFFALSE 9939
// begin if omarSquad < 3 then
9871: LD_EXP 42
9875: PUSH
9876: LD_INT 3
9878: LESS
9879: IFFALSE 9883
// break ;
9881: GO 9939
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9883: LD_EXP 42
9887: PUSH
9888: LD_INT 3
9890: ARRAY
9891: PPUSH
9892: LD_INT 2
9894: PPUSH
9895: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9899: LD_ADDR_EXP 44
9903: PUSH
9904: LD_EXP 44
9908: PUSH
9909: LD_EXP 42
9913: PUSH
9914: LD_INT 3
9916: ARRAY
9917: UNION
9918: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9919: LD_ADDR_EXP 42
9923: PUSH
9924: LD_EXP 42
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: CALL_OW 3
9936: ST_TO_ADDR
// end ;
9937: GO 9868
9939: POP
9940: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9941: LD_EXP 39
9945: PUSH
9946: LD_EXP 42
9950: ADD
9951: PPUSH
9952: LD_INT 103
9954: PPUSH
9955: LD_INT 9
9957: PPUSH
9958: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9962: LD_VAR 0 2
9966: PUSH
9967: LD_EXP 35
9971: PPUSH
9972: CALL_OW 302
9976: AND
9977: IFFALSE 10038
// begin wait ( 0 0$3 ) ;
9979: LD_INT 105
9981: PPUSH
9982: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9986: LD_EXP 35
9990: PPUSH
9991: LD_EXP 38
9995: PPUSH
9996: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10000: LD_EXP 35
10004: PPUSH
10005: LD_STRING DK-1-side
10007: PPUSH
10008: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10012: LD_EXP 38
10016: PPUSH
10017: LD_EXP 35
10021: PPUSH
10022: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10026: LD_EXP 38
10030: PPUSH
10031: LD_STRING DF-1-side
10033: PPUSH
10034: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: PPUSH
10053: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10057: LD_EXP 38
10061: PUSH
10062: LD_EXP 41
10066: ADD
10067: PPUSH
10068: LD_INT 108
10070: PPUSH
10071: LD_INT 62
10073: PPUSH
10074: CALL_OW 111
// gameStarted := true ;
10078: LD_ADDR_EXP 3
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10086: LD_INT 105
10088: PPUSH
10089: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10093: LD_EXP 30
10097: PPUSH
10098: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10102: LD_EXP 30
10106: PPUSH
10107: LD_EXP 34
10111: PPUSH
10112: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10116: LD_INT 22
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 69
10130: PUSH
10131: LD_EXP 30
10135: DIFF
10136: PPUSH
10137: LD_EXP 30
10141: PPUSH
10142: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10146: LD_EXP 30
10150: PPUSH
10151: LD_STRING DH-1-explore
10153: PPUSH
10154: CALL_OW 88
// if Givi then
10158: LD_EXP 31
10162: IFFALSE 10178
// Say ( Givi , DG-1-explore ) else
10164: LD_EXP 31
10168: PPUSH
10169: LD_STRING DG-1-explore
10171: PPUSH
10172: CALL_OW 88
10176: GO 10215
// if heikeSecondSquad then
10178: LD_EXP 44
10182: IFFALSE 10215
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10184: LD_EXP 44
10188: PPUSH
10189: LD_INT 26
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 72
10203: PUSH
10204: LD_INT 1
10206: ARRAY
10207: PPUSH
10208: LD_STRING DArm-1-explore
10210: PPUSH
10211: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10215: LD_EXP 34
10219: PPUSH
10220: LD_STRING DA-1-explore
10222: PPUSH
10223: CALL_OW 88
// if Sophia then
10227: LD_EXP 36
10231: IFFALSE 10309
// begin Say ( Sophia , DS-2-explore ) ;
10233: LD_EXP 36
10237: PPUSH
10238: LD_STRING DS-2-explore
10240: PPUSH
10241: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10245: LD_EXP 34
10249: PPUSH
10250: LD_STRING DA-2-explore
10252: PPUSH
10253: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_EXP 34
10266: PPUSH
10267: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10271: LD_EXP 34
10275: PPUSH
10276: LD_EXP 36
10280: PPUSH
10281: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10285: LD_EXP 36
10289: PPUSH
10290: LD_STRING DS-3-explore
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10297: LD_EXP 34
10301: PPUSH
10302: LD_STRING DA-3-explore
10304: PPUSH
10305: CALL_OW 88
// end ; if Mike then
10309: LD_EXP 32
10313: IFFALSE 10369
// begin Say ( Mike , DM-1-explore ) ;
10315: LD_EXP 32
10319: PPUSH
10320: LD_STRING DM-1-explore
10322: PPUSH
10323: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10327: LD_EXP 30
10331: PPUSH
10332: LD_STRING DH-2-explore
10334: PPUSH
10335: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10339: LD_EXP 32
10343: PPUSH
10344: LD_STRING DM-2-explore
10346: PPUSH
10347: CALL_OW 88
// if Kaia then
10351: LD_EXP 35
10355: IFFALSE 10369
// Say ( Kaia , DK-1-explore ) ;
10357: LD_EXP 35
10361: PPUSH
10362: LD_STRING DK-1-explore
10364: PPUSH
10365: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: PPUSH
10384: CALL_OW 139
// Video ( false ) ;
10388: LD_INT 0
10390: PPUSH
10391: CALL 77561 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10395: LD_STRING BuildBase
10397: PPUSH
10398: CALL_OW 337
// SaveForQuickRestart ;
10402: CALL_OW 22
// end ;
10406: LD_VAR 0 1
10410: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10411: LD_EXP 5
10415: PUSH
10416: LD_EXP 7
10420: NOT
10421: AND
10422: IFFALSE 10609
10424: GO 10426
10426: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10427: LD_EXP 47
10431: PPUSH
10432: LD_STRING DUsm-4-assault
10434: PPUSH
10435: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10446: LD_INT 22
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 1
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 50
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: LD_INT 95
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: IFFALSE 10439
// if not IsOk ( usCommander ) or americanBaseCaptured then
10494: LD_EXP 47
10498: PPUSH
10499: CALL_OW 302
10503: NOT
10504: PUSH
10505: LD_EXP 7
10509: OR
10510: IFFALSE 10514
// exit ;
10512: GO 10609
// repeat wait ( 0 0$1 ) ;
10514: LD_INT 35
10516: PPUSH
10517: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10521: LD_INT 22
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 50
10543: PUSH
10544: EMPTY
10545: LIST
10546: PUSH
10547: LD_INT 95
10549: PUSH
10550: LD_INT 7
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: NOT
10568: IFFALSE 10514
// wait ( 0 0$3 ) ;
10570: LD_INT 105
10572: PPUSH
10573: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10577: LD_EXP 47
10581: PPUSH
10582: CALL_OW 302
10586: NOT
10587: PUSH
10588: LD_EXP 7
10592: OR
10593: IFFALSE 10597
// exit ;
10595: GO 10609
// Say ( usCommander , DUsm-3-assault ) ;
10597: LD_EXP 47
10601: PPUSH
10602: LD_STRING DUsm-3-assault
10604: PPUSH
10605: CALL_OW 88
// end ;
10609: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10610: LD_EXP 6
10614: NOT
10615: PUSH
10616: LD_EXP 7
10620: NOT
10621: AND
10622: PUSH
10623: LD_INT 5
10625: PPUSH
10626: LD_INT 22
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 70
10640: AND
10641: PUSH
10642: LD_EXP 7
10646: NOT
10647: AND
10648: IFFALSE 10733
10650: GO 10652
10652: DISABLE
// begin if Mike then
10653: LD_EXP 32
10657: IFFALSE 10673
// Say ( Mike , DM-1-scout ) else
10659: LD_EXP 32
10663: PPUSH
10664: LD_STRING DM-1-scout
10666: PPUSH
10667: CALL_OW 88
10671: GO 10704
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10673: LD_EXP 44
10677: PPUSH
10678: LD_INT 26
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PPUSH
10688: CALL_OW 72
10692: PUSH
10693: LD_INT 1
10695: ARRAY
10696: PPUSH
10697: LD_STRING DArm-1-explore
10699: PPUSH
10700: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10704: LD_INT 54
10706: PPUSH
10707: LD_INT 35
10709: PPUSH
10710: LD_INT 2
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10720: LD_INT 54
10722: PPUSH
10723: LD_INT 35
10725: PPUSH
10726: LD_INT 2
10728: PPUSH
10729: CALL_OW 331
// end ;
10733: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10734: LD_INT 6
10736: PPUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 70
10751: PUSH
10752: LD_EXP 7
10756: NOT
10757: AND
10758: IFFALSE 11012
10760: GO 10762
10762: DISABLE
10763: LD_INT 0
10765: PPUSH
10766: PPUSH
10767: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_EXP 44
10777: PPUSH
10778: LD_INT 26
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 72
10792: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: LD_EXP 44
10802: PPUSH
10803: LD_INT 26
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 72
10817: ST_TO_ADDR
// DialogueOn ;
10818: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10822: LD_INT 36
10824: PPUSH
10825: LD_INT 22
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: LD_INT 8
10833: PPUSH
10834: CALL_OW 330
// dwait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 68
// speakerOk := false ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_INT 0
10852: ST_TO_ADDR
// if Mike then
10853: LD_EXP 32
10857: IFFALSE 10879
// speakerOk := Say ( Mike , DM-1-spot ) else
10859: LD_ADDR_VAR 0 3
10863: PUSH
10864: LD_EXP 32
10868: PPUSH
10869: LD_STRING DM-1-spot
10871: PPUSH
10872: CALL_OW 88
10876: ST_TO_ADDR
10877: GO 10907
// if randomMen then
10879: LD_VAR 0 1
10883: IFFALSE 10907
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_VAR 0 1
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: LD_STRING DArm-1-spot-a
10901: PPUSH
10902: CALL_OW 88
10906: ST_TO_ADDR
// if speakerOk then
10907: LD_VAR 0 3
10911: IFFALSE 10955
// begin if Givi then
10913: LD_EXP 31
10917: IFFALSE 10933
// Say ( Givi , DG-1-spot ) else
10919: LD_EXP 31
10923: PPUSH
10924: LD_STRING DG-1-spot
10926: PPUSH
10927: CALL_OW 88
10931: GO 10955
// if randomWomen then
10933: LD_VAR 0 2
10937: IFFALSE 10955
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: PPUSH
10948: LD_STRING DArf-1-spot-a
10950: PPUSH
10951: CALL_OW 88
// end ; if Mike then
10955: LD_EXP 32
10959: IFFALSE 10975
// Say ( Heike , DH-1-spot ) else
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING DH-1-spot
10968: PPUSH
10969: CALL_OW 88
10973: GO 10987
// Say ( Heike , DH-1-spot-a ) ;
10975: LD_EXP 30
10979: PPUSH
10980: LD_STRING DH-1-spot-a
10982: PPUSH
10983: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10987: LD_INT 36
10989: PPUSH
10990: LD_INT 22
10992: PPUSH
10993: LD_INT 2
10995: PPUSH
10996: CALL_OW 331
// DialogueOff ;
11000: CALL_OW 7
// americanBaseSpoted := true ;
11004: LD_ADDR_EXP 6
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// end ;
11012: PPOPN 3
11014: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11015: LD_EXP 6
11019: NOT
11020: PUSH
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 69
11049: AND
11050: PUSH
11051: LD_EXP 7
11055: NOT
11056: AND
11057: IFFALSE 11143
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
// begin americanBaseSpoted := true ;
11065: LD_ADDR_EXP 6
11069: PUSH
11070: LD_INT 1
11072: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11073: LD_ADDR_VAR 0 1
11077: PUSH
11078: LD_EXP 44
11082: PPUSH
11083: LD_INT 26
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 72
11097: ST_TO_ADDR
// if not randomMen then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11143
// DialogueOn ;
11107: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 1
11118: ARRAY
11119: PPUSH
11120: LD_STRING DArm-1-spot-a
11122: PPUSH
11123: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11127: LD_EXP 30
11131: PPUSH
11132: LD_STRING DH-1-spot-a
11134: PPUSH
11135: CALL_OW 88
// DialogueOff ;
11139: CALL_OW 7
// end ;
11143: PPOPN 1
11145: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11146: LD_INT 11
11148: PPUSH
11149: CALL_OW 255
11153: PUSH
11154: LD_INT 2
11156: EQUAL
11157: PUSH
11158: LD_INT 7
11160: PPUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 1
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: LD_INT 50
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 30
11186: PUSH
11187: LD_INT 31
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: OR
11204: PUSH
11205: LD_INT 7
11207: PPUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 70
11222: PUSH
11223: LD_INT 2
11225: GREATER
11226: OR
11227: PUSH
11228: LD_EXP 46
11232: PUSH
11233: LD_INT 4
11235: LESSEQUAL
11236: OR
11237: IFFALSE 11828
11239: GO 11241
11241: DISABLE
11242: LD_INT 0
11244: PPUSH
11245: PPUSH
// begin wait ( 0 0$3 ) ;
11246: LD_INT 105
11248: PPUSH
11249: CALL_OW 67
// americanStartRun := true ;
11253: LD_ADDR_EXP 15
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if IsOk ( usCommander ) then
11261: LD_EXP 47
11265: PPUSH
11266: CALL_OW 302
11270: IFFALSE 11300
// begin usForces := usForces union usCommander ;
11272: LD_ADDR_EXP 46
11276: PUSH
11277: LD_EXP 46
11281: PUSH
11282: LD_EXP 47
11286: UNION
11287: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11288: LD_EXP 47
11292: PPUSH
11293: LD_STRING DUsm-1-assault
11295: PPUSH
11296: CALL_OW 88
// end ; for i in usForces do
11300: LD_ADDR_VAR 0 1
11304: PUSH
11305: LD_EXP 46
11309: PUSH
11310: FOR_IN
11311: IFFALSE 11357
// begin if IsInUnit ( i ) then
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 310
11322: IFFALSE 11333
// ComExitBuilding ( i ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 122
// wait ( 3 ) ;
11333: LD_INT 3
11335: PPUSH
11336: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_INT 34
11347: PPUSH
11348: LD_INT 67
11350: PPUSH
11351: CALL_OW 111
// end ;
11355: GO 11310
11357: POP
11358: POP
// Say ( Heike , DH-1-assault ) ;
11359: LD_EXP 30
11363: PPUSH
11364: LD_STRING DH-1-assault
11366: PPUSH
11367: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11371: LD_INT 35
11373: PPUSH
11374: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 34
11385: PPUSH
11386: LD_INT 67
11388: PPUSH
11389: CALL_OW 111
// until not usForces ;
11393: LD_EXP 46
11397: NOT
11398: IFFALSE 11371
// music_nat := 2 ;
11400: LD_ADDR_OWVAR 71
11404: PUSH
11405: LD_INT 2
11407: ST_TO_ADDR
// music_class := music_victory ;
11408: LD_ADDR_OWVAR 72
11412: PUSH
11413: LD_INT 4
11415: ST_TO_ADDR
// if not americanHasEscaped then
11416: LD_EXP 9
11420: NOT
11421: IFFALSE 11442
// begin Say ( Heike , DH-2-assault ) ;
11423: LD_EXP 30
11427: PPUSH
11428: LD_STRING DH-2-assault
11430: PPUSH
11431: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11435: LD_STRING ACH_CLEAN
11437: PPUSH
11438: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11449: LD_INT 35
11451: PPUSH
11452: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11456: LD_INT 22
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 50
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: NOT
11499: IFFALSE 11449
// InGameOn ;
11501: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11505: LD_INT 11
11507: PPUSH
11508: CALL_OW 255
11512: PUSH
11513: LD_INT 2
11515: EQUAL
11516: NOT
11517: IFFALSE 11529
// SetSide ( usDepot , 2 ) ;
11519: LD_INT 11
11521: PPUSH
11522: LD_INT 2
11524: PPUSH
11525: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11529: LD_INT 35
11531: PPUSH
11532: LD_INT 22
11534: PPUSH
11535: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11539: LD_EXP 30
11543: PPUSH
11544: LD_INT 35
11546: PPUSH
11547: LD_INT 22
11549: PPUSH
11550: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11554: LD_EXP 30
11558: PPUSH
11559: LD_INT 38
11561: PPUSH
11562: LD_INT 25
11564: PPUSH
11565: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11569: LD_EXP 34
11573: PUSH
11574: LD_EXP 43
11578: UNION
11579: PUSH
11580: LD_EXP 44
11584: UNION
11585: PPUSH
11586: LD_INT 39
11588: PPUSH
11589: LD_INT 26
11591: PPUSH
11592: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11596: LD_EXP 34
11600: PUSH
11601: LD_EXP 43
11605: UNION
11606: PUSH
11607: LD_EXP 44
11611: UNION
11612: PPUSH
11613: LD_EXP 30
11617: PPUSH
11618: CALL_OW 179
// p := 0 ;
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// p := p + 1 ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_INT 1
11649: PLUS
11650: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11651: LD_EXP 30
11655: PPUSH
11656: CALL_OW 314
11660: NOT
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: LD_INT 10
11669: GREATER
11670: OR
11671: IFFALSE 11630
// Say ( Heike , DH-1-capture ) ;
11673: LD_EXP 30
11677: PPUSH
11678: LD_STRING DH-1-capture
11680: PPUSH
11681: CALL_OW 88
// if Markov then
11685: LD_EXP 37
11689: IFFALSE 11703
// Say ( Markov , DMar-1-capture ) ;
11691: LD_EXP 37
11695: PPUSH
11696: LD_STRING DMar-1-capture
11698: PPUSH
11699: CALL_OW 88
// if Sophia then
11703: LD_EXP 36
11707: IFFALSE 11733
// begin Say ( Heike , DH-2-capture ) ;
11709: LD_EXP 30
11713: PPUSH
11714: LD_STRING DH-2-capture
11716: PPUSH
11717: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11721: LD_EXP 36
11725: PPUSH
11726: LD_STRING DS-1-capture
11728: PPUSH
11729: CALL_OW 88
// end ; InGameOff ;
11733: CALL_OW 9
// music_nat := music_auto ;
11737: LD_ADDR_OWVAR 71
11741: PUSH
11742: LD_INT 0
11744: ST_TO_ADDR
// music_class := music_auto ;
11745: LD_ADDR_OWVAR 72
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11753: LD_STRING ConstructBase
11755: PPUSH
11756: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PPUSH
11789: CALL_OW 69
11793: PUSH
11794: FOR_IN
11795: IFFALSE 11811
// SetSide ( i , 2 ) ;
11797: LD_VAR 0 1
11801: PPUSH
11802: LD_INT 2
11804: PPUSH
11805: CALL_OW 235
11809: GO 11794
11811: POP
11812: POP
// wait ( 0 0$3 ) ;
11813: LD_INT 105
11815: PPUSH
11816: CALL_OW 67
// americanBaseCaptured := true ;
11820: LD_ADDR_EXP 7
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// end ;
11828: PPOPN 2
11830: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11831: LD_EXP 14
11835: PUSH
11836: LD_INT 3
11838: GREATEREQUAL
11839: IFFALSE 11851
11841: GO 11843
11843: DISABLE
// SetAchievement ( ACH_ENG ) ;
11844: LD_STRING ACH_ENG
11846: PPUSH
11847: CALL_OW 543
11851: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11852: LD_INT 22
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 25
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: PUSH
11881: LD_INT 4
11883: GREATEREQUAL
11884: IFFALSE 11896
11886: GO 11888
11888: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11889: LD_STRING ACH_APEGEN
11891: PPUSH
11892: CALL_OW 543
11896: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11897: LD_INT 22
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 57
11922: PUSH
11923: EMPTY
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: IFFALSE 12204
11941: GO 11943
11943: DISABLE
// begin workshopBuilded := true ;
11944: LD_ADDR_EXP 11
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if IsOk ( Markov ) then
11952: LD_EXP 37
11956: PPUSH
11957: CALL_OW 302
11961: IFFALSE 12020
// begin Say ( Heike , DH-1-shop-a ) ;
11963: LD_EXP 30
11967: PPUSH
11968: LD_STRING DH-1-shop-a
11970: PPUSH
11971: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11975: LD_INT 47
11977: PPUSH
11978: LD_INT 2
11980: PPUSH
11981: CALL_OW 321
11985: PUSH
11986: LD_INT 2
11988: EQUAL
11989: PUSH
11990: LD_INT 45
11992: PPUSH
11993: LD_INT 2
11995: PPUSH
11996: CALL_OW 321
12000: PUSH
12001: LD_INT 2
12003: EQUAL
12004: AND
12005: NOT
12006: IFFALSE 12020
// Say ( Markov , DMar-1-shop-a ) ;
12008: LD_EXP 37
12012: PPUSH
12013: LD_STRING DMar-1-shop-a
12015: PPUSH
12016: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12020: LD_INT 35
12022: PPUSH
12023: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12027: LD_INT 47
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 321
12037: PUSH
12038: LD_INT 2
12040: EQUAL
12041: PUSH
12042: LD_INT 45
12044: PPUSH
12045: LD_INT 2
12047: PPUSH
12048: CALL_OW 321
12052: PUSH
12053: LD_INT 2
12055: EQUAL
12056: OR
12057: IFFALSE 12020
// if IsOk ( Markov ) and IsOk ( Heike ) then
12059: LD_EXP 37
12063: PPUSH
12064: CALL_OW 302
12068: PUSH
12069: LD_EXP 30
12073: PPUSH
12074: CALL_OW 302
12078: AND
12079: IFFALSE 12197
// begin DialogueOn ;
12081: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12085: LD_EXP 37
12089: PPUSH
12090: LD_STRING DMar-1-shop
12092: PPUSH
12093: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12097: LD_EXP 30
12101: PPUSH
12102: LD_STRING DH-1-shop
12104: PPUSH
12105: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12109: LD_EXP 37
12113: PPUSH
12114: LD_STRING DMar-2-shop
12116: PPUSH
12117: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12121: LD_EXP 37
12125: PPUSH
12126: LD_STRING DMar-3-shop
12128: PPUSH
12129: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12133: LD_EXP 30
12137: PPUSH
12138: LD_STRING DH-2-shop
12140: PPUSH
12141: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12145: LD_EXP 37
12149: PPUSH
12150: LD_STRING DMar-4-shop
12152: PPUSH
12153: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12157: LD_EXP 30
12161: PPUSH
12162: LD_STRING DH-3-shop
12164: PPUSH
12165: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12169: LD_EXP 37
12173: PPUSH
12174: LD_STRING DMar-5-shop
12176: PPUSH
12177: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12181: LD_EXP 30
12185: PPUSH
12186: LD_STRING DH-4-shop
12188: PPUSH
12189: CALL_OW 88
// DialogueOff ;
12193: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12197: LD_STRING ConstructVeh
12199: PPUSH
12200: CALL_OW 337
// end ;
12204: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12205: LD_INT 2
12207: PPUSH
12208: LD_INT 2
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL 40184 0 3
12218: PUSH
12219: LD_INT 0
12221: EQUAL
12222: IFFALSE 12234
12224: GO 12226
12226: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12227: LD_STRING Techs
12229: PPUSH
12230: CALL_OW 337
12234: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12235: LD_EXP 37
12239: PPUSH
12240: CALL_OW 302
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 34
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 35
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: AND
12292: IFFALSE 12399
12294: GO 12296
12296: DISABLE
// begin DialogueOn ;
12297: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12301: LD_INT 22
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 35
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 69
12347: PPUSH
12348: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12352: LD_INT 10
12354: PPUSH
12355: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12359: LD_EXP 30
12363: PPUSH
12364: LD_STRING DH-1-bal
12366: PPUSH
12367: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12371: LD_EXP 37
12375: PPUSH
12376: LD_STRING DMar-1-bal
12378: PPUSH
12379: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12383: LD_EXP 30
12387: PPUSH
12388: LD_STRING DH-2-bal
12390: PPUSH
12391: CALL_OW 88
// DialogueOff ;
12395: CALL_OW 7
// end ;
12399: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12400: LD_EXP 34
12404: PPUSH
12405: CALL_OW 302
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: LD_INT 6
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 69
12438: AND
12439: IFFALSE 12500
12441: GO 12443
12443: DISABLE
// begin DialogueOn ;
12444: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12448: LD_EXP 34
12452: PPUSH
12453: LD_STRING DA-1-lab
12455: PPUSH
12456: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12460: LD_EXP 30
12464: PPUSH
12465: LD_STRING DH-1-lab
12467: PPUSH
12468: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12472: LD_EXP 34
12476: PPUSH
12477: LD_STRING DA-2-lab
12479: PPUSH
12480: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12484: LD_EXP 30
12488: PPUSH
12489: LD_STRING DH-2-lab
12491: PPUSH
12492: CALL_OW 88
// DialogueOff ;
12496: CALL_OW 7
// end ;
12500: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12501: LD_EXP 35
12505: PPUSH
12506: CALL_OW 302
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 25
12523: PUSH
12524: LD_INT 15
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: AND
12540: PUSH
12541: LD_INT 81
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: NOT
12556: AND
12557: IFFALSE 12746
12559: GO 12561
12561: DISABLE
12562: LD_INT 0
12564: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 25
12582: PUSH
12583: LD_INT 15
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 69
12598: ST_TO_ADDR
// InGameOn ;
12599: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12603: LD_VAR 0 1
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12629: LD_EXP 35
12633: PPUSH
12634: LD_STRING DK-1-apesol
12636: PPUSH
12637: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12641: LD_VAR 0 1
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PPUSH
12650: LD_INT 35
12652: PPUSH
12653: LD_INT 28
12655: PPUSH
12656: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 1
12667: ARRAY
12668: PPUSH
12669: LD_INT 36
12671: PPUSH
12672: LD_INT 17
12674: PPUSH
12675: CALL_OW 171
// wait ( 0 0$2 ) ;
12679: LD_INT 70
12681: PPUSH
12682: CALL_OW 67
// DialogueOn ;
12686: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12690: LD_EXP 34
12694: PPUSH
12695: LD_STRING DA-1-apesol
12697: PPUSH
12698: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12702: LD_EXP 35
12706: PPUSH
12707: LD_STRING DK-2-apesol
12709: PPUSH
12710: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12714: LD_EXP 34
12718: PPUSH
12719: LD_STRING DA-2-apesol
12721: PPUSH
12722: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DK-3-apesol
12733: PPUSH
12734: CALL_OW 88
// DialogueOff ;
12738: CALL_OW 7
// InGameOff ;
12742: CALL_OW 9
// end ;
12746: PPOPN 1
12748: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12749: LD_EXP 36
12753: PPUSH
12754: CALL_OW 302
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 16
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: AND
12788: PUSH
12789: LD_INT 81
12791: PUSH
12792: LD_INT 2
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: NOT
12804: AND
12805: IFFALSE 13119
12807: GO 12809
12809: DISABLE
12810: LD_INT 0
12812: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 25
12830: PUSH
12831: LD_INT 16
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: ST_TO_ADDR
// blockAttack := true ;
12847: LD_ADDR_EXP 29
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// InGameOn ;
12855: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12859: LD_INT 35
12861: PPUSH
12862: LD_INT 22
12864: PPUSH
12865: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12869: LD_INT 5
12871: PPUSH
12872: LD_INT 35
12874: PPUSH
12875: LD_INT 22
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12885: LD_EXP 36
12889: PPUSH
12890: LD_VAR 0 1
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PPUSH
12912: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12916: LD_VAR 0 1
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: CALL_OW 122
// wait ( 0 0$2 ) ;
12929: LD_INT 70
12931: PPUSH
12932: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12936: LD_EXP 36
12940: PPUSH
12941: LD_STRING DS-1-apeeng
12943: PPUSH
12944: CALL_OW 88
// if IsOk ( Kamil ) then
12948: LD_EXP 33
12952: PPUSH
12953: CALL_OW 302
12957: IFFALSE 13107
// begin Say ( Kamil , DKam-1-apeeng ) ;
12959: LD_EXP 33
12963: PPUSH
12964: LD_STRING DKam-1-apeeng
12966: PPUSH
12967: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12971: LD_EXP 36
12975: PPUSH
12976: LD_STRING DS-2-apeeng
12978: PPUSH
12979: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12983: LD_EXP 33
12987: PPUSH
12988: LD_STRING DKam-2-apeeng
12990: PPUSH
12991: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12995: LD_EXP 36
12999: PPUSH
13000: LD_STRING DS-3-apeeng
13002: PPUSH
13003: CALL_OW 88
// if not IsOK ( Kaia ) then
13007: LD_EXP 35
13011: PPUSH
13012: CALL_OW 302
13016: NOT
13017: IFFALSE 13033
// begin InGameOff ;
13019: CALL_OW 9
// blockAttack := false ;
13023: LD_ADDR_EXP 29
13027: PUSH
13028: LD_INT 0
13030: ST_TO_ADDR
// exit ;
13031: GO 13119
// end ; Say ( Kaia , DK-1-apeeng ) ;
13033: LD_EXP 35
13037: PPUSH
13038: LD_STRING DK-1-apeeng
13040: PPUSH
13041: CALL_OW 88
// if not IsOk ( Givi ) then
13045: LD_EXP 31
13049: PPUSH
13050: CALL_OW 302
13054: NOT
13055: IFFALSE 13071
// begin InGameOff ;
13057: CALL_OW 9
// blockAttack := false ;
13061: LD_ADDR_EXP 29
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// exit ;
13069: GO 13119
// end ; Say ( Givi , DG-1-apeeng ) ;
13071: LD_EXP 31
13075: PPUSH
13076: LD_STRING DG-1-apeeng
13078: PPUSH
13079: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13083: LD_EXP 35
13087: PPUSH
13088: LD_STRING DK-2-apeeng
13090: PPUSH
13091: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13095: LD_EXP 35
13099: PPUSH
13100: LD_STRING DK-3-apeeng
13102: PPUSH
13103: CALL_OW 88
// end ; InGameOff ;
13107: CALL_OW 9
// blockAttack := false ;
13111: LD_ADDR_EXP 29
13115: PUSH
13116: LD_INT 0
13118: ST_TO_ADDR
// end ;
13119: PPOPN 1
13121: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13122: LD_EXP 4
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 30
13139: PUSH
13140: LD_INT 0
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: AND
13156: IFFALSE 13337
13158: GO 13160
13160: DISABLE
// begin blockAttack := true ;
13161: LD_ADDR_EXP 29
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13169: LD_INT 350
13171: PPUSH
13172: CALL_OW 67
// DialogueOn ;
13176: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13180: LD_EXP 38
13184: PPUSH
13185: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13189: LD_EXP 38
13193: PPUSH
13194: LD_STRING DF-1-distribution
13196: PPUSH
13197: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13201: LD_EXP 30
13205: PPUSH
13206: LD_STRING DH-2-distribution
13208: PPUSH
13209: CALL_OW 88
// if IsOk ( Kaia ) then
13213: LD_EXP 35
13217: PPUSH
13218: CALL_OW 302
13222: IFFALSE 13283
// begin Say ( Kaia , DK-1-distribution ) ;
13224: LD_EXP 35
13228: PPUSH
13229: LD_STRING DK-1-distribution
13231: PPUSH
13232: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13236: LD_EXP 30
13240: PPUSH
13241: LD_STRING DH-1-distribution
13243: PPUSH
13244: CALL_OW 88
// if IsOk ( Givi ) then
13248: LD_EXP 31
13252: PPUSH
13253: CALL_OW 302
13257: IFFALSE 13283
// begin Say ( Givi , DG-1-distribution ) ;
13259: LD_EXP 31
13263: PPUSH
13264: LD_STRING DG-1-distribution
13266: PPUSH
13267: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13271: LD_EXP 30
13275: PPUSH
13276: LD_STRING DH-3-distribution
13278: PPUSH
13279: CALL_OW 88
// end ; end ; DialogueOff ;
13283: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13287: LD_STRING Crates1
13289: PPUSH
13290: CALL_OW 337
// farmerRequestedCrates := 300 ;
13294: LD_ADDR_EXP 17
13298: PUSH
13299: LD_INT 300
13301: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13302: LD_STRING FarmerCrates
13304: PPUSH
13305: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13309: LD_INT 10
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 424
// blockAttack := false ;
13319: LD_ADDR_EXP 29
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13327: LD_INT 108
13329: PPUSH
13330: LD_INT 61
13332: PPUSH
13333: CALL_OW 86
// end ;
13337: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13338: LD_EXP 7
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 57
13358: PUSH
13359: EMPTY
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 30
13371: PUSH
13372: LD_INT 6
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: LD_INT 7
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: AND
13404: PUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 3
13417: PUSH
13418: LD_INT 57
13420: PUSH
13421: EMPTY
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: AND
13448: IFFALSE 13612
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
// begin wait ( 0 0$10 ) ;
13456: LD_INT 350
13458: PPUSH
13459: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_EXP 44
13472: PPUSH
13473: LD_INT 26
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 25
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 72
13501: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13502: LD_EXP 30
13506: PPUSH
13507: LD_STRING DH-1-task
13509: PPUSH
13510: CALL_OW 88
// if IsOk ( Sophia ) then
13514: LD_EXP 36
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13563
// begin Say ( Sophia , DS-1-task ) ;
13525: LD_EXP 36
13529: PPUSH
13530: LD_STRING DS-1-task
13532: PPUSH
13533: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13537: LD_EXP 36
13541: PPUSH
13542: LD_STRING DS-2-task
13544: PPUSH
13545: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13549: LD_EXP 30
13553: PPUSH
13554: LD_STRING DH-2-task
13556: PPUSH
13557: CALL_OW 88
// end else
13561: GO 13597
// if eng then
13563: LD_VAR 0 1
13567: IFFALSE 13597
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13569: LD_VAR 0 1
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: LD_STRING DArm-1-task
13580: PPUSH
13581: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13585: LD_EXP 30
13589: PPUSH
13590: LD_STRING DH-2-task
13592: PPUSH
13593: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13597: LD_STRING BaseConstructed
13599: PPUSH
13600: CALL_OW 337
// allowConvoys := true ;
13604: LD_ADDR_EXP 13
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// end ;
13612: PPOPN 1
13614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13615: LD_INT 22
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 34
13627: PUSH
13628: LD_INT 12
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 69
13643: IFFALSE 13811
13645: GO 13647
13647: DISABLE
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
13652: PPUSH
// begin wait ( 0 0$2 ) ;
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 12
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 250
13712: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 251
13731: ST_TO_ADDR
// DialogueOn ;
13732: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13736: LD_VAR 0 2
13740: PPUSH
13741: LD_VAR 0 3
13745: PPUSH
13746: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13750: LD_VAR 0 2
13754: PPUSH
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: LD_INT 6
13765: NEG
13766: PPUSH
13767: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13771: LD_INT 10
13773: PPUSH
13774: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13778: LD_EXP 30
13782: PPUSH
13783: LD_STRING DH-1-seecargo
13785: PPUSH
13786: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 2
13802: PPUSH
13803: CALL_OW 331
// DialogueOff ;
13807: CALL_OW 7
// end ;
13811: PPOPN 3
13813: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13814: LD_EXP 4
13818: PUSH
13819: LD_EXP 16
13823: PUSH
13824: LD_INT 300
13826: GREATEREQUAL
13827: AND
13828: IFFALSE 13900
13830: GO 13832
13832: DISABLE
// begin DialogueOn ;
13833: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13837: LD_EXP 38
13841: PPUSH
13842: LD_STRING DF-1-delivery-2
13844: PPUSH
13845: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13849: LD_EXP 30
13853: PPUSH
13854: LD_STRING DH-1-delivery-2
13856: PPUSH
13857: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13861: LD_EXP 38
13865: PPUSH
13866: LD_STRING DF-2-delivery-2
13868: PPUSH
13869: CALL_OW 94
// DialogueOff ;
13873: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13877: LD_STRING Crates2
13879: PPUSH
13880: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13884: LD_ADDR_EXP 18
13888: PUSH
13889: LD_INT 63000
13891: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13892: LD_ADDR_EXP 17
13896: PUSH
13897: LD_INT 600
13899: ST_TO_ADDR
// end ;
13900: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13901: LD_EXP 4
13905: PUSH
13906: LD_EXP 16
13910: PUSH
13911: LD_INT 600
13913: GREATEREQUAL
13914: AND
13915: PUSH
13916: LD_OWVAR 67
13920: PUSH
13921: LD_INT 1
13923: GREATER
13924: AND
13925: IFFALSE 14125
13927: GO 13929
13929: DISABLE
// begin DialogueOn ;
13930: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13934: LD_EXP 38
13938: PPUSH
13939: LD_STRING DF-1-delivery-3
13941: PPUSH
13942: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13946: LD_EXP 30
13950: PPUSH
13951: LD_STRING DH-1-delivery-3
13953: PPUSH
13954: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13958: LD_EXP 38
13962: PPUSH
13963: LD_STRING DF-2-delivery-3
13965: PPUSH
13966: CALL_OW 94
// if IsOk ( Kaia ) then
13970: LD_EXP 35
13974: PPUSH
13975: CALL_OW 302
13979: IFFALSE 14029
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13981: LD_EXP 35
13985: PPUSH
13986: LD_STRING DK-1-delivery-3
13988: PPUSH
13989: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13993: LD_EXP 30
13997: PPUSH
13998: LD_STRING DH-2-delivery-3
14000: PPUSH
14001: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14005: LD_EXP 31
14009: PPUSH
14010: LD_STRING DG-1-delivery-3
14012: PPUSH
14013: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14017: LD_EXP 32
14021: PPUSH
14022: LD_STRING DM-1-delivery-3
14024: PPUSH
14025: CALL_OW 88
// end ; DialogueOff ;
14029: CALL_OW 7
// case Difficulty of 2 :
14033: LD_OWVAR 67
14037: PUSH
14038: LD_INT 2
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14064
14046: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14047: LD_STRING Crates3
14049: PPUSH
14050: CALL_OW 337
// farmerRequestedCrates := 900 ;
14054: LD_ADDR_EXP 17
14058: PUSH
14059: LD_INT 900
14061: ST_TO_ADDR
// end ; 3 :
14062: GO 14117
14064: LD_INT 3
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14090
14072: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14073: LD_STRING Crates4
14075: PPUSH
14076: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14080: LD_ADDR_EXP 17
14084: PUSH
14085: LD_INT 1200
14087: ST_TO_ADDR
// end ; 4 :
14088: GO 14117
14090: LD_INT 4
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14116
14098: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14099: LD_STRING Crates5
14101: PPUSH
14102: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14106: LD_ADDR_EXP 17
14110: PUSH
14111: LD_INT 1400
14113: ST_TO_ADDR
// end ; end ;
14114: GO 14117
14116: POP
// farmerCratesCounter := 30 30$00 ;
14117: LD_ADDR_EXP 18
14121: PUSH
14122: LD_INT 63000
14124: ST_TO_ADDR
// end ;
14125: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14126: LD_EXP 4
14130: PUSH
14131: LD_EXP 16
14135: PUSH
14136: LD_INT 600
14138: PUSH
14139: LD_INT 900
14141: PUSH
14142: LD_INT 1200
14144: PUSH
14145: LD_INT 1400
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_OWVAR 67
14158: ARRAY
14159: GREATEREQUAL
14160: AND
14161: IFFALSE 14247
14163: GO 14165
14165: DISABLE
// begin retreatAllowed := true ;
14166: LD_ADDR_EXP 12
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// display_strings := [ ] ;
14174: LD_ADDR_OWVAR 47
14178: PUSH
14179: EMPTY
14180: ST_TO_ADDR
// DialogueOn ;
14181: CALL_OW 6
// InGameOn ;
14185: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14189: LD_EXP 39
14193: PPUSH
14194: LD_STRING DO-radio-end
14196: PPUSH
14197: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14201: LD_EXP 30
14205: PPUSH
14206: LD_STRING DH-1-radio-end
14208: PPUSH
14209: CALL_OW 88
// InGameOff ;
14213: CALL_OW 9
// DialogueOff ;
14217: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14221: LD_STRING Retreat
14223: PPUSH
14224: CALL_OW 337
// wait ( 0 0$2 ) ;
14228: LD_INT 70
14230: PPUSH
14231: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14235: LD_EXP 30
14239: PPUSH
14240: LD_STRING DH-2-radio-end
14242: PPUSH
14243: CALL_OW 88
// end ;
14247: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14248: LD_EXP 12
14252: IFFALSE 14383
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14261: LD_INT 10
14263: PPUSH
14264: LD_INT 0
14266: PPUSH
14267: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: LD_EXP 41
14280: PPUSH
14281: LD_INT 25
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 72
14295: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 102
14303: PPUSH
14304: LD_INT 69
14306: PPUSH
14307: CALL_OW 428
14311: PUSH
14312: LD_INT 0
14314: EQUAL
14315: AND
14316: IFFALSE 14383
// begin for i in tmp do
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_VAR 0 1
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14353
// if IsInUnit ( i ) then
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 310
14340: IFFALSE 14351
// ComExitBuilding ( i ) ;
14342: LD_VAR 0 2
14346: PPUSH
14347: CALL_OW 122
14351: GO 14328
14353: POP
14354: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_INT 31
14362: PPUSH
14363: LD_INT 102
14365: PPUSH
14366: LD_INT 69
14368: PPUSH
14369: LD_INT 2
14371: PPUSH
14372: CALL_OW 205
// wait ( 0 0$3 ) ;
14376: LD_INT 105
14378: PPUSH
14379: CALL_OW 67
// end ; end ;
14383: PPOPN 2
14385: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14386: LD_EXP 12
14390: NOT
14391: PUSH
14392: LD_INT 5
14394: PPUSH
14395: CALL_OW 301
14399: AND
14400: IFFALSE 14432
14402: GO 14404
14404: DISABLE
// begin DialogueOn ;
14405: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14409: LD_EXP 38
14413: PPUSH
14414: LD_STRING DF-1-failure
14416: PPUSH
14417: CALL_OW 94
// DialogueOff ;
14421: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14425: LD_STRING FarmerDepot
14427: PPUSH
14428: CALL_OW 104
// end ;
14432: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14433: LD_EXP 12
14437: PUSH
14438: LD_EXP 30
14442: PPUSH
14443: LD_EXP 38
14447: PPUSH
14448: CALL_OW 296
14452: PUSH
14453: LD_INT 12
14455: LESS
14456: AND
14457: PUSH
14458: LD_INT 81
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: NOT
14487: AND
14488: IFFALSE 15172
14490: GO 14492
14492: DISABLE
14493: LD_INT 0
14495: PPUSH
14496: PPUSH
14497: PPUSH
// begin allowConvoys := false ;
14498: LD_ADDR_EXP 13
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// InGameOn ;
14506: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14510: LD_EXP 30
14514: PPUSH
14515: LD_EXP 38
14519: PPUSH
14520: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14524: LD_EXP 38
14528: PPUSH
14529: LD_EXP 30
14533: PPUSH
14534: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14538: LD_EXP 38
14542: PPUSH
14543: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14547: LD_EXP 30
14551: PPUSH
14552: LD_STRING DH-1-end
14554: PPUSH
14555: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14559: LD_EXP 38
14563: PPUSH
14564: LD_STRING DF-1-end
14566: PPUSH
14567: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14571: LD_EXP 38
14575: PPUSH
14576: LD_STRING DF-2-end
14578: PPUSH
14579: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14583: LD_EXP 30
14587: PPUSH
14588: LD_STRING DH-2-end
14590: PPUSH
14591: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14595: LD_EXP 38
14599: PPUSH
14600: LD_STRING DF-3-end
14602: PPUSH
14603: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14607: LD_EXP 30
14611: PPUSH
14612: LD_STRING DH-3-end
14614: PPUSH
14615: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14619: LD_EXP 31
14623: PPUSH
14624: LD_STRING DG-1-end
14626: PPUSH
14627: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14631: LD_EXP 30
14635: PPUSH
14636: LD_STRING DH-4-end
14638: PPUSH
14639: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14643: LD_EXP 38
14647: PPUSH
14648: LD_STRING DF-4-end
14650: PPUSH
14651: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14655: LD_EXP 30
14659: PPUSH
14660: LD_STRING DH-5-end
14662: PPUSH
14663: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14667: LD_EXP 38
14671: PPUSH
14672: LD_STRING DF-5-end
14674: PPUSH
14675: CALL_OW 88
// InGameOff ;
14679: CALL_OW 9
// allowCargoEvacuation := true ;
14683: LD_ADDR_EXP 8
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_INT 4
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_OWVAR 67
14718: ARRAY
14719: ST_TO_ADDR
// if farmerSquad < max then
14720: LD_EXP 41
14724: PUSH
14725: LD_VAR 0 2
14729: LESS
14730: IFFALSE 14742
// max := farmerSquad ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_EXP 41
14741: ST_TO_ADDR
// for i := 1 to max do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14796
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14760: LD_EXP 41
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: LD_INT 2
14771: PPUSH
14772: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14776: LD_ADDR_EXP 41
14780: PUSH
14781: LD_EXP 41
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 3
14793: ST_TO_ADDR
// end ;
14794: GO 14757
14796: POP
14797: POP
// for i in Farmer ^ farmerSquad do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_EXP 38
14807: PUSH
14808: LD_EXP 41
14812: ADD
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14854
// begin if IsInUnit ( i ) then
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 310
14826: IFFALSE 14837
// ComExitBuilding ( i ) ;
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14837: LD_VAR 0 1
14841: PPUSH
14842: LD_INT 102
14844: PPUSH
14845: LD_INT 7
14847: PPUSH
14848: CALL_OW 171
// end ;
14852: GO 14814
14854: POP
14855: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: LD_INT 5
14892: DIFF
14893: PUSH
14894: FOR_IN
14895: IFFALSE 14911
// SetSide ( i , 2 ) ;
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 2
14904: PPUSH
14905: CALL_OW 235
14909: GO 14894
14911: POP
14912: POP
// wait ( 0 0$2 ) ;
14913: LD_INT 70
14915: PPUSH
14916: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14920: LD_EXP 30
14924: PPUSH
14925: LD_STRING DH-6-end
14927: PPUSH
14928: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14932: LD_INT 35
14934: PPUSH
14935: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14939: LD_ADDR_VAR 0 3
14943: PUSH
14944: LD_EXP 38
14948: PUSH
14949: LD_EXP 41
14953: ADD
14954: PPUSH
14955: LD_INT 95
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 72
14969: ST_TO_ADDR
// if tmp then
14970: LD_VAR 0 3
14974: IFFALSE 15018
// for i in tmp do
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_VAR 0 3
14985: PUSH
14986: FOR_IN
14987: IFFALSE 15016
// begin farmerSquad := farmerSquad diff i ;
14989: LD_ADDR_EXP 41
14993: PUSH
14994: LD_EXP 41
14998: PUSH
14999: LD_VAR 0 1
15003: DIFF
15004: ST_TO_ADDR
// RemoveUnit ( i ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 64
// end ;
15014: GO 14986
15016: POP
15017: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15018: LD_EXP 41
15022: PUSH
15023: EMPTY
15024: EQUAL
15025: PUSH
15026: LD_EXP 38
15030: PPUSH
15031: CALL_OW 305
15035: NOT
15036: AND
15037: IFFALSE 14932
// if farmerHumanLoseCounter = 0 then
15039: LD_EXP 21
15043: PUSH
15044: LD_INT 0
15046: EQUAL
15047: IFFALSE 15056
// SetAchievement ( ACH_BABY ) ;
15049: LD_STRING ACH_BABY
15051: PPUSH
15052: CALL_OW 543
// wait ( 1 1$00 ) ;
15056: LD_INT 2100
15058: PPUSH
15059: CALL_OW 67
// SendAttack ;
15063: CALL 6118 0 0
// Say ( Heike , DH-7-end ) ;
15067: LD_EXP 30
15071: PPUSH
15072: LD_STRING DH-7-end
15074: PPUSH
15075: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: DOUBLE
15085: LD_INT 1
15087: DEC
15088: ST_TO_ADDR
15089: LD_INT 2
15091: PUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 4
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: PUSH
15107: LD_OWVAR 67
15111: ARRAY
15112: PUSH
15113: FOR_TO
15114: IFFALSE 15170
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15116: LD_INT 4200
15118: PUSH
15119: LD_INT 3500
15121: PUSH
15122: LD_INT 3150
15124: PUSH
15125: LD_INT 2800
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: PUSH
15134: LD_OWVAR 67
15138: ARRAY
15139: PPUSH
15140: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15144: LD_EXP 12
15148: PUSH
15149: LD_EXP 22
15153: PUSH
15154: LD_INT 1
15156: LESS
15157: AND
15158: IFFALSE 15164
// exit ;
15160: POP
15161: POP
15162: GO 15172
// SendAttack ;
15164: CALL 6118 0 0
// end ;
15168: GO 15113
15170: POP
15171: POP
// end ;
15172: PPOPN 3
15174: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15175: LD_EXP 8
15179: PUSH
15180: LD_EXP 22
15184: PUSH
15185: LD_INT 0
15187: GREATER
15188: AND
15189: IFFALSE 15199
15191: GO 15193
15193: DISABLE
// begin enable ;
15194: ENABLE
// CargoEvacuation ;
15195: CALL 3591 0 0
// end ;
15199: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15200: LD_EXP 18
15204: PUSH
15205: LD_INT 18900
15207: LESSEQUAL
15208: IFFALSE 15257
15210: GO 15212
15212: DISABLE
// begin DialogueOn ;
15213: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15217: LD_EXP 38
15221: PPUSH
15222: LD_STRING DF-1-distribution-a
15224: PPUSH
15225: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15229: LD_EXP 30
15233: PPUSH
15234: LD_STRING DH-1-distribution-a
15236: PPUSH
15237: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15241: LD_EXP 38
15245: PPUSH
15246: LD_STRING DF-2-distribution-a
15248: PPUSH
15249: CALL_OW 94
// DialogueOff ;
15253: CALL_OW 7
// end ;
15257: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15258: LD_EXP 18
15262: PUSH
15263: LD_INT 0
15265: LESSEQUAL
15266: IFFALSE 15298
15268: GO 15270
15270: DISABLE
// begin DialogueOn ;
15271: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15275: LD_EXP 38
15279: PPUSH
15280: LD_STRING DF-3-distribution-a
15282: PPUSH
15283: CALL_OW 94
// YouLost ( Distribution ) ;
15287: LD_STRING Distribution
15289: PPUSH
15290: CALL_OW 104
// DialogueOff ;
15294: CALL_OW 7
// end ;
15298: END
// every 0 0$1 trigger vehCounter >= 2 do
15299: LD_EXP 23
15303: PUSH
15304: LD_INT 2
15306: GREATEREQUAL
15307: IFFALSE 15319
15309: GO 15311
15311: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15312: LD_STRING VehConstructed
15314: PPUSH
15315: CALL_OW 337
15319: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15320: LD_INT 22
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 12
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: IFFALSE 15408
15350: GO 15352
15352: DISABLE
// begin DialogueOn ;
15353: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15357: LD_EXP 30
15361: PPUSH
15362: LD_STRING DH-1-truck
15364: PPUSH
15365: CALL_OW 88
// if IsOk ( Markov ) then
15369: LD_EXP 37
15373: PPUSH
15374: CALL_OW 302
15378: IFFALSE 15404
// begin Say ( Markov , DMar-1-truck ) ;
15380: LD_EXP 37
15384: PPUSH
15385: LD_STRING DMar-1-truck
15387: PPUSH
15388: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15392: LD_EXP 30
15396: PPUSH
15397: LD_STRING DH-2-truck
15399: PPUSH
15400: CALL_OW 88
// end ; DialogueOff ;
15404: CALL_OW 7
// end ;
15408: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if IsOk ( Givi ) then
15414: LD_EXP 31
15418: PPUSH
15419: CALL_OW 302
15423: IFFALSE 15439
// begin Say ( Givi , DG-1-nocargo ) ;
15425: LD_EXP 31
15429: PPUSH
15430: LD_STRING DG-1-nocargo
15432: PPUSH
15433: CALL_OW 88
// exit ;
15437: GO 15535
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15439: LD_ADDR_VAR 0 2
15443: PUSH
15444: LD_EXP 44
15448: PPUSH
15449: LD_INT 26
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PPUSH
15459: CALL_OW 72
15463: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15464: LD_ADDR_VAR 0 3
15468: PUSH
15469: LD_EXP 44
15473: PPUSH
15474: LD_INT 26
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: ST_TO_ADDR
// if randomMen then
15489: LD_VAR 0 2
15493: IFFALSE 15513
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15495: LD_VAR 0 2
15499: PUSH
15500: LD_INT 1
15502: ARRAY
15503: PPUSH
15504: LD_STRING DArm-1-nocargo
15506: PPUSH
15507: CALL_OW 88
15511: GO 15535
// if randomWomen then
15513: LD_VAR 0 3
15517: IFFALSE 15535
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15519: LD_VAR 0 3
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: LD_STRING DArf-1-nocargo
15530: PPUSH
15531: CALL_OW 88
// end ;
15535: LD_VAR 0 1
15539: RET
// export function IncomingAttack ; begin
15540: LD_INT 0
15542: PPUSH
// if attackWave = 1 then
15543: LD_EXP 20
15547: PUSH
15548: LD_INT 1
15550: EQUAL
15551: IFFALSE 15622
// begin DialogueOn ;
15553: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15557: LD_EXP 39
15561: PPUSH
15562: LD_STRING DO-1-radio-1
15564: PPUSH
15565: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15569: LD_EXP 30
15573: PPUSH
15574: LD_STRING DH-1-radio-1-
15576: PPUSH
15577: CALL_OW 88
// if IsOk ( Markov ) then
15581: LD_EXP 37
15585: PPUSH
15586: CALL_OW 302
15590: IFFALSE 15616
// begin Say ( Markov , DMar-1-radio-1 ) ;
15592: LD_EXP 37
15596: PPUSH
15597: LD_STRING DMar-1-radio-1
15599: PPUSH
15600: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15604: LD_EXP 30
15608: PPUSH
15609: LD_STRING DH-2-radio-1
15611: PPUSH
15612: CALL_OW 88
// end ; DialogueOff ;
15616: CALL_OW 7
// end else
15620: GO 15646
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15622: LD_EXP 39
15626: PPUSH
15627: LD_STRING DO-1-radio-u
15629: PPUSH
15630: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15634: LD_EXP 30
15638: PPUSH
15639: LD_STRING DH-1-radio-u
15641: PPUSH
15642: CALL_OW 88
// end ; end ;
15646: LD_VAR 0 1
15650: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15651: LD_EXP 46
15655: PPUSH
15656: LD_INT 95
15658: PUSH
15659: LD_INT 8
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 72
15670: IFFALSE 15773
15672: GO 15674
15674: DISABLE
15675: LD_INT 0
15677: PPUSH
// begin enable ;
15678: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_EXP 46
15688: PPUSH
15689: LD_INT 95
15691: PUSH
15692: LD_INT 8
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 72
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15734
// begin usForces := usForces diff i ;
15707: LD_ADDR_EXP 46
15711: PUSH
15712: LD_EXP 46
15716: PUSH
15717: LD_VAR 0 1
15721: DIFF
15722: ST_TO_ADDR
// RemoveUnit ( i ) ;
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 64
// end ;
15732: GO 15704
15734: POP
15735: POP
// if not americanHasEscaped and attackWave = 1 then
15736: LD_EXP 9
15740: NOT
15741: PUSH
15742: LD_EXP 20
15746: PUSH
15747: LD_INT 1
15749: EQUAL
15750: AND
15751: IFFALSE 15773
// begin americanHasEscaped := true ;
15753: LD_ADDR_EXP 9
15757: PUSH
15758: LD_INT 1
15760: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15761: LD_EXP 30
15765: PPUSH
15766: LD_STRING DH-2-assault-a
15768: PPUSH
15769: CALL_OW 88
// end ; end ;
15773: PPOPN 1
15775: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15776: LD_INT 4
15778: PPUSH
15779: LD_INT 22
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 70
15793: PUSH
15794: LD_EXP 12
15798: NOT
15799: AND
15800: IFFALSE 15817
15802: GO 15804
15804: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15805: LD_EXP 38
15809: PPUSH
15810: LD_STRING DF-1-attack
15812: PPUSH
15813: CALL_OW 94
15817: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15818: LD_INT 5
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 2
15828: EQUAL
15829: IFFALSE 15845
15831: GO 15833
15833: DISABLE
// begin enable ;
15834: ENABLE
// SetSide ( arDepot , 5 ) ;
15835: LD_INT 5
15837: PPUSH
15838: LD_INT 5
15840: PPUSH
15841: CALL_OW 235
// end ;
15845: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: NOT
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_INT 4
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: NOT
15891: AND
15892: PUSH
15893: LD_EXP 12
15897: NOT
15898: AND
15899: PUSH
15900: LD_EXP 16
15904: PUSH
15905: LD_INT 90
15907: GREATER
15908: AND
15909: PUSH
15910: LD_INT 7
15912: PPUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 70
15941: AND
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 50
15955: PUSH
15956: EMPTY
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 69
15978: AND
15979: IFFALSE 16788
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
// begin depot := usDepot ;
15991: LD_ADDR_VAR 0 5
15995: PUSH
15996: LD_INT 11
15998: ST_TO_ADDR
// if not depot then
15999: LD_VAR 0 5
16003: NOT
16004: IFFALSE 16044
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16006: LD_ADDR_VAR 0 5
16010: PUSH
16011: LD_INT 22
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16044: LD_ADDR_VAR 0 1
16048: PUSH
16049: LD_EXP 44
16053: PPUSH
16054: LD_INT 26
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 72
16068: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_EXP 44
16078: PPUSH
16079: LD_INT 26
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 72
16093: ST_TO_ADDR
// if IsOk ( Kaia ) then
16094: LD_EXP 35
16098: PPUSH
16099: CALL_OW 302
16103: IFFALSE 16124
// speaker := [ Kaia , DK ] else
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_EXP 35
16114: PUSH
16115: LD_STRING DK
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: ST_TO_ADDR
16122: GO 16204
// if randomMen then
16124: LD_VAR 0 1
16128: IFFALSE 16163
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: PUSH
16140: LD_INT 1
16142: PPUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PUSH
16154: LD_STRING DArm
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: ST_TO_ADDR
16161: GO 16204
// if randomWomen then
16163: LD_VAR 0 2
16167: IFFALSE 16202
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16169: LD_ADDR_VAR 0 3
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PPUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: CALL_OW 12
16191: ARRAY
16192: PUSH
16193: LD_STRING DArf
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: ST_TO_ADDR
16200: GO 16204
// exit ;
16202: GO 16788
// if IsInUnit ( speaker [ 1 ] ) then
16204: LD_VAR 0 3
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: PPUSH
16213: CALL_OW 310
16217: IFFALSE 16240
// place := IsInUnit ( speaker [ 1 ] ) else
16219: LD_ADDR_VAR 0 4
16223: PUSH
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 1
16231: ARRAY
16232: PPUSH
16233: CALL_OW 310
16237: ST_TO_ADDR
16238: GO 16254
// place := speaker [ 1 ] ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 1
16252: ARRAY
16253: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16254: LD_VAR 0 4
16258: PPUSH
16259: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 250
16272: PPUSH
16273: LD_VAR 0 4
16277: PPUSH
16278: CALL_OW 251
16282: PPUSH
16283: CALL 2078 0 2
// wait ( 0 0$2 ) ;
16287: LD_INT 70
16289: PPUSH
16290: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16294: LD_EXP 40
16298: PPUSH
16299: CALL_OW 305
16303: NOT
16304: IFFALSE 16308
// exit ;
16306: GO 16788
// allowConvoys := false ;
16308: LD_ADDR_EXP 13
16312: PUSH
16313: LD_INT 0
16315: ST_TO_ADDR
// blockAttack := true ;
16316: LD_ADDR_EXP 29
16320: PUSH
16321: LD_INT 1
16323: ST_TO_ADDR
// InGameOn ;
16324: CALL_OW 8
// wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16335: LD_EXP 40
16339: PPUSH
16340: LD_STRING DI-1-land
16342: PPUSH
16343: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 310
16360: IFFALSE 16375
// ComExit ( speaker [ 1 ] ) ;
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: CALL 77987 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16375: LD_VAR 0 3
16379: PUSH
16380: LD_INT 1
16382: ARRAY
16383: PPUSH
16384: LD_EXP 40
16388: PPUSH
16389: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: LD_EXP 40
16406: PPUSH
16407: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16411: LD_EXP 40
16415: PPUSH
16416: LD_VAR 0 3
16420: PUSH
16421: LD_INT 1
16423: ARRAY
16424: PPUSH
16425: CALL_OW 119
// wait ( 0 0$1 ) ;
16429: LD_INT 35
16431: PPUSH
16432: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16436: LD_VAR 0 3
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 3
16449: PUSH
16450: LD_INT 2
16452: ARRAY
16453: PUSH
16454: LD_STRING -1-land
16456: STR
16457: PPUSH
16458: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16462: LD_EXP 40
16466: PPUSH
16467: LD_STRING DI-2-land
16469: PPUSH
16470: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16474: LD_VAR 0 3
16478: PUSH
16479: LD_INT 1
16481: ARRAY
16482: PPUSH
16483: LD_VAR 0 3
16487: PUSH
16488: LD_INT 2
16490: ARRAY
16491: PUSH
16492: LD_STRING -2-land
16494: STR
16495: PPUSH
16496: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16500: LD_VAR 0 3
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 2
16516: ARRAY
16517: PUSH
16518: LD_STRING -3-land
16520: STR
16521: PPUSH
16522: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16526: LD_EXP 30
16530: PPUSH
16531: LD_STRING DH-1-land
16533: PPUSH
16534: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16538: LD_VAR 0 5
16542: PPUSH
16543: CALL_OW 313
16547: PUSH
16548: LD_INT 6
16550: EQUAL
16551: IFFALSE 16571
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16553: LD_VAR 0 5
16557: PPUSH
16558: CALL_OW 313
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16571: LD_EXP 40
16575: PPUSH
16576: LD_INT 2
16578: PPUSH
16579: CALL_OW 235
// CenterOnUnits ( depot ) ;
16583: LD_VAR 0 5
16587: PPUSH
16588: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16592: LD_EXP 40
16596: PPUSH
16597: LD_VAR 0 5
16601: PPUSH
16602: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: LD_VAR 0 5
16619: PPUSH
16620: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16631: LD_EXP 40
16635: PPUSH
16636: CALL_OW 310
16640: PUSH
16641: LD_EXP 40
16645: PPUSH
16646: CALL_OW 302
16650: NOT
16651: OR
16652: PUSH
16653: LD_VAR 0 5
16657: PPUSH
16658: CALL_OW 302
16662: NOT
16663: OR
16664: IFFALSE 16624
// InGameOff ;
16666: CALL_OW 9
// blockAttack := false ;
16670: LD_ADDR_EXP 29
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16678: LD_EXP 40
16682: PPUSH
16683: CALL_OW 302
16687: NOT
16688: IFFALSE 16692
// exit ;
16690: GO 16788
// if not IsOk ( depot ) then
16692: LD_VAR 0 5
16696: PPUSH
16697: CALL_OW 302
16701: NOT
16702: IFFALSE 16765
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16704: LD_EXP 40
16708: PPUSH
16709: LD_INT 30
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16719: LD_INT 35
16721: PPUSH
16722: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16726: LD_EXP 40
16730: PPUSH
16731: LD_INT 30
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 307
16741: PUSH
16742: LD_EXP 40
16746: PPUSH
16747: CALL_OW 301
16751: OR
16752: IFFALSE 16719
// RemoveUnit ( Ibrahim ) ;
16754: LD_EXP 40
16758: PPUSH
16759: CALL_OW 64
// exit ;
16763: GO 16788
// end ; ibrahimInDepot := true ;
16765: LD_ADDR_EXP 26
16769: PUSH
16770: LD_INT 1
16772: ST_TO_ADDR
// allowConvoys := true ;
16773: LD_ADDR_EXP 13
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16781: LD_STRING IbrahimInDepot
16783: PPUSH
16784: CALL_OW 97
// end ;
16788: PPOPN 5
16790: END
// export function IbrahimQuery ; begin
16791: LD_INT 0
16793: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16794: LD_STRING IbrahimQuery
16796: PPUSH
16797: CALL_OW 97
16801: PUSH
16802: LD_INT 1
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 17180
16810: POP
// begin allowConvoys := false ;
16811: LD_ADDR_EXP 13
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// ibrahimInDepot := false ;
16819: LD_ADDR_EXP 26
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// InGameOn ;
16827: CALL_OW 8
// DialogueOn ;
16831: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16835: LD_EXP 30
16839: PPUSH
16840: CALL_OW 87
// wait ( 0 0$1 ) ;
16844: LD_INT 35
16846: PPUSH
16847: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16851: LD_EXP 30
16855: PPUSH
16856: LD_STRING DH-1-interrogation
16858: PPUSH
16859: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16863: LD_EXP 40
16867: PPUSH
16868: LD_STRING DI-1-interrogation
16870: PPUSH
16871: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16875: LD_EXP 30
16879: PPUSH
16880: LD_STRING DH-2-interrogation
16882: PPUSH
16883: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16887: LD_EXP 40
16891: PPUSH
16892: LD_STRING DI-2-interrogation
16894: PPUSH
16895: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16899: LD_EXP 30
16903: PPUSH
16904: LD_STRING DH-3-interrogation
16906: PPUSH
16907: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16911: LD_EXP 40
16915: PPUSH
16916: LD_STRING DI-3-interrogation
16918: PPUSH
16919: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16923: LD_EXP 30
16927: PPUSH
16928: LD_STRING DH-4-interrogation
16930: PPUSH
16931: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16935: LD_EXP 40
16939: PPUSH
16940: LD_STRING DI-4-interrogation
16942: PPUSH
16943: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16947: LD_EXP 30
16951: PPUSH
16952: LD_STRING DH-5-interrogation
16954: PPUSH
16955: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16959: LD_EXP 40
16963: PPUSH
16964: LD_STRING DI-5-interrogation
16966: PPUSH
16967: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16971: LD_INT 10
16973: PPUSH
16974: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16978: LD_EXP 30
16982: PPUSH
16983: LD_STRING DH-6-interrogation
16985: PPUSH
16986: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16990: LD_EXP 40
16994: PPUSH
16995: LD_STRING DI-6-interrogation
16997: PPUSH
16998: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17002: LD_EXP 40
17006: PPUSH
17007: LD_STRING DI-7-interrogation
17009: PPUSH
17010: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17014: LD_EXP 30
17018: PPUSH
17019: LD_STRING DH-7-interrogation
17021: PPUSH
17022: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17026: LD_INT 10
17028: PPUSH
17029: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17033: LD_EXP 30
17037: PPUSH
17038: LD_STRING DH-8-interrogation
17040: PPUSH
17041: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17045: LD_EXP 40
17049: PPUSH
17050: LD_STRING DI-8-interrogation
17052: PPUSH
17053: CALL_OW 88
// wait ( 0 0$1 ) ;
17057: LD_INT 35
17059: PPUSH
17060: CALL_OW 67
// DialogueOff ;
17064: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17068: LD_STRING IbrahimDecisionQuery
17070: PPUSH
17071: CALL_OW 97
17075: PUSH
17076: LD_INT 1
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17108
17084: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17085: LD_EXP 40
17089: PPUSH
17090: LD_STRING DI-1-kill
17092: PPUSH
17093: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17097: LD_EXP 40
17101: PPUSH
17102: CALL_OW 66
// end ; 2 :
17106: GO 17174
17108: LD_INT 2
17110: DOUBLE
17111: EQUAL
17112: IFTRUE 17116
17114: GO 17173
17116: POP
// begin SetSide ( Ibrahim , 6 ) ;
17117: LD_EXP 40
17121: PPUSH
17122: LD_INT 6
17124: PPUSH
17125: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17129: LD_EXP 40
17133: PPUSH
17134: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17138: LD_EXP 40
17142: PPUSH
17143: LD_INT 66
17145: PPUSH
17146: LD_INT 2
17148: PPUSH
17149: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17153: LD_EXP 40
17157: PPUSH
17158: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17162: LD_EXP 30
17166: PPUSH
17167: CALL_OW 122
// end ; end ;
17171: GO 17174
17173: POP
// InGameOff ;
17174: CALL_OW 9
// end ; 2 :
17178: GO 17194
17180: LD_INT 2
17182: DOUBLE
17183: EQUAL
17184: IFTRUE 17188
17186: GO 17193
17188: POP
// exit ; end ;
17189: GO 17278
17191: GO 17194
17193: POP
// allowConvoys := true ;
17194: LD_ADDR_EXP 13
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// blockAttack := false ;
17202: LD_ADDR_EXP 29
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17210: LD_INT 5250
17212: PPUSH
17213: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17217: LD_INT 35
17219: PPUSH
17220: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17224: LD_INT 81
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: NOT
17253: IFFALSE 17217
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17255: LD_EXP 40
17259: PPUSH
17260: LD_INT 34
17262: PPUSH
17263: LD_INT 21
17265: PPUSH
17266: CALL_OW 111
// ibrahimIsFree := true ;
17270: LD_ADDR_EXP 27
17274: PUSH
17275: LD_INT 1
17277: ST_TO_ADDR
// end ;
17278: LD_VAR 0 1
17282: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17283: LD_EXP 27
17287: PUSH
17288: LD_EXP 40
17292: PPUSH
17293: CALL_OW 302
17297: AND
17298: PUSH
17299: LD_INT 2
17301: PPUSH
17302: LD_EXP 40
17306: PPUSH
17307: CALL_OW 292
17311: AND
17312: IFFALSE 18124
17314: GO 17316
17316: DISABLE
17317: LD_INT 0
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
// begin wait ( 0 0$10 ) ;
17325: LD_INT 350
17327: PPUSH
17328: CALL_OW 67
// allowConvoys := false ;
17332: LD_ADDR_EXP 13
17336: PUSH
17337: LD_INT 0
17339: ST_TO_ADDR
// blockAttack := true ;
17340: LD_ADDR_EXP 29
17344: PUSH
17345: LD_INT 1
17347: ST_TO_ADDR
// depot := usDepot ;
17348: LD_ADDR_VAR 0 4
17352: PUSH
17353: LD_INT 11
17355: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17356: LD_INT 11
17358: NOT
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_INT 2
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 50
17372: PUSH
17373: EMPTY
17374: LIST
17375: PUSH
17376: LD_INT 30
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: PPUSH
17391: CALL_OW 69
17395: AND
17396: IFFALSE 17443
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17398: LD_ADDR_VAR 0 4
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 50
17415: PUSH
17416: EMPTY
17417: LIST
17418: PUSH
17419: LD_INT 30
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: PUSH
17439: LD_INT 1
17441: ARRAY
17442: ST_TO_ADDR
// InGameOn ;
17443: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17447: LD_EXP 40
17451: PPUSH
17452: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17456: LD_EXP 30
17460: PPUSH
17461: LD_EXP 40
17465: PPUSH
17466: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17470: LD_EXP 40
17474: PPUSH
17475: LD_EXP 30
17479: PPUSH
17480: CALL_OW 119
// DialogueOn ;
17484: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17488: LD_EXP 40
17492: PPUSH
17493: LD_STRING DI-1-free
17495: PPUSH
17496: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17500: LD_EXP 30
17504: PPUSH
17505: LD_STRING DH-1-free
17507: PPUSH
17508: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17512: LD_EXP 40
17516: PPUSH
17517: LD_STRING DI-2-free
17519: PPUSH
17520: CALL_OW 88
// changeClass := 0 ;
17524: LD_ADDR_VAR 0 1
17528: PUSH
17529: LD_INT 0
17531: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17532: LD_STRING IbrahimJoinQuery
17534: PPUSH
17535: CALL_OW 97
17539: PUSH
17540: LD_INT 1
17542: DOUBLE
17543: EQUAL
17544: IFTRUE 17548
17546: GO 17559
17548: POP
// begin changeClass := 1 ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_INT 1
17556: ST_TO_ADDR
// end ; 2 :
17557: GO 17811
17559: LD_INT 2
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17731
17567: POP
// begin Say ( Heike , DH-1-decline ) ;
17568: LD_EXP 30
17572: PPUSH
17573: LD_STRING DH-1-decline
17575: PPUSH
17576: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17580: LD_EXP 40
17584: PPUSH
17585: LD_STRING DI-1-decline
17587: PPUSH
17588: CALL_OW 88
// DialogueOff ;
17592: CALL_OW 7
// InGameOff ;
17596: CALL_OW 9
// blockAttack := false ;
17600: LD_ADDR_EXP 29
17604: PUSH
17605: LD_INT 0
17607: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17608: LD_EXP 40
17612: PPUSH
17613: LD_INT 30
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 111
// p := 0 ;
17623: LD_ADDR_VAR 0 3
17627: PUSH
17628: LD_INT 0
17630: ST_TO_ADDR
// repeat p := p + 1 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_VAR 0 3
17640: PUSH
17641: LD_INT 1
17643: PLUS
17644: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17645: LD_INT 35
17647: PPUSH
17648: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17652: LD_EXP 40
17656: PPUSH
17657: LD_INT 30
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: CALL_OW 307
17667: PUSH
17668: LD_INT 22
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 101
17680: PUSH
17681: LD_INT 6
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PPUSH
17692: CALL_OW 69
17696: NOT
17697: OR
17698: PUSH
17699: LD_VAR 0 3
17703: PUSH
17704: LD_INT 10
17706: GREATER
17707: OR
17708: IFFALSE 17631
// RemoveUnit ( Ibrahim ) ;
17710: LD_EXP 40
17714: PPUSH
17715: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17719: LD_INT 1
17721: PPUSH
17722: LD_STRING 03_IbrahimHasEscaped
17724: PPUSH
17725: CALL_OW 39
// end ; 3 :
17729: GO 17811
17731: LD_INT 3
17733: DOUBLE
17734: EQUAL
17735: IFTRUE 17739
17737: GO 17810
17739: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17740: LD_EXP 30
17744: PPUSH
17745: LD_STRING DH-1-radio-hq
17747: PPUSH
17748: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17752: LD_EXP 39
17756: PPUSH
17757: LD_STRING DO-1-radio-hq
17759: PPUSH
17760: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17764: LD_EXP 30
17768: PPUSH
17769: LD_STRING DH-2-radio-hq
17771: PPUSH
17772: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17776: LD_EXP 39
17780: PPUSH
17781: LD_STRING DO-2-radio-hq
17783: PPUSH
17784: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17788: LD_EXP 30
17792: PPUSH
17793: LD_STRING DH-3-radio-hq
17795: PPUSH
17796: CALL_OW 88
// changeClass := 1 ;
17800: LD_ADDR_VAR 0 1
17804: PUSH
17805: LD_INT 1
17807: ST_TO_ADDR
// end ; end ;
17808: GO 17811
17810: POP
// if changeClass then
17811: LD_VAR 0 1
17815: IFFALSE 18124
// begin Say ( Heike , DH-1-agree ) ;
17817: LD_EXP 30
17821: PPUSH
17822: LD_STRING DH-1-agree
17824: PPUSH
17825: CALL_OW 88
// if IsOk ( Givi ) then
17829: LD_EXP 31
17833: PPUSH
17834: CALL_OW 302
17838: IFFALSE 17876
// begin Say ( Givi , DG-1-agree ) ;
17840: LD_EXP 31
17844: PPUSH
17845: LD_STRING DG-1-agree
17847: PPUSH
17848: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17852: LD_EXP 30
17856: PPUSH
17857: LD_STRING DH-2-agree
17859: PPUSH
17860: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17864: LD_EXP 31
17868: PPUSH
17869: LD_STRING DG-2-agree
17871: PPUSH
17872: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17876: LD_EXP 40
17880: PPUSH
17881: CALL_OW 87
// DialogueOff ;
17885: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17889: LD_VAR 0 4
17893: PPUSH
17894: CALL_OW 313
17898: PUSH
17899: LD_INT 6
17901: EQUAL
17902: IFFALSE 17922
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17904: LD_VAR 0 4
17908: PPUSH
17909: CALL_OW 313
17913: PUSH
17914: LD_INT 1
17916: ARRAY
17917: PPUSH
17918: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17922: LD_EXP 40
17926: PPUSH
17927: LD_INT 2
17929: PPUSH
17930: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17934: LD_ADDR_VAR 0 5
17938: PUSH
17939: LD_EXP 40
17943: PPUSH
17944: CALL_OW 250
17948: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17949: LD_ADDR_VAR 0 6
17953: PUSH
17954: LD_EXP 40
17958: PPUSH
17959: CALL_OW 251
17963: ST_TO_ADDR
// if depot then
17964: LD_VAR 0 4
17968: IFFALSE 18017
// begin ComEnterUnit ( Ibrahim , depot ) ;
17970: LD_EXP 40
17974: PPUSH
17975: LD_VAR 0 4
17979: PPUSH
17980: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17984: LD_INT 35
17986: PPUSH
17987: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17991: LD_EXP 40
17995: PPUSH
17996: CALL_OW 310
18000: IFFALSE 17984
// b := IsInUnit ( Ibrahim ) ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_EXP 40
18011: PPUSH
18012: CALL_OW 310
18016: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18017: LD_EXP 40
18021: PPUSH
18022: CALL_OW 64
// uc_side := 2 ;
18026: LD_ADDR_OWVAR 20
18030: PUSH
18031: LD_INT 2
18033: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18034: LD_ADDR_EXP 40
18038: PUSH
18039: LD_STRING Ibrahim
18041: PPUSH
18042: LD_INT 0
18044: PPUSH
18045: LD_STRING 
18047: PPUSH
18048: CALL 40121 0 3
18052: ST_TO_ADDR
// if depot then
18053: LD_VAR 0 4
18057: IFFALSE 18075
// PlaceHumanInUnit ( Ibrahim , b ) else
18059: LD_EXP 40
18063: PPUSH
18064: LD_VAR 0 2
18068: PPUSH
18069: CALL_OW 52
18073: GO 18097
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18075: LD_EXP 40
18079: PPUSH
18080: LD_VAR 0 5
18084: PPUSH
18085: LD_VAR 0 6
18089: PPUSH
18090: LD_INT 0
18092: PPUSH
18093: CALL_OW 48
// InGameOff ;
18097: CALL_OW 9
// allowConvoys := true ;
18101: LD_ADDR_EXP 13
18105: PUSH
18106: LD_INT 1
18108: ST_TO_ADDR
// blockAttack := false ;
18109: LD_ADDR_EXP 29
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18117: LD_STRING ACH_IBRAHIM
18119: PPUSH
18120: CALL_OW 543
// end ; end ;
18124: PPOPN 6
18126: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18127: LD_EXP 35
18131: PPUSH
18132: CALL_OW 256
18136: PUSH
18137: LD_INT 3
18139: LESS
18140: IFFALSE 18207
18142: GO 18144
18144: DISABLE
// begin DialogueOn ;
18145: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18149: LD_EXP 35
18153: PPUSH
18154: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18158: LD_EXP 35
18162: PPUSH
18163: LD_STRING DK-keydeath-1
18165: PPUSH
18166: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18170: LD_EXP 30
18174: PPUSH
18175: LD_STRING DH-keydeath-2
18177: PPUSH
18178: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18182: LD_EXP 30
18186: PPUSH
18187: LD_STRING DH-keydeath-3
18189: PPUSH
18190: CALL_OW 88
// DialogueOff ;
18194: CALL_OW 7
// KillUnit ( Kaia ) ;
18198: LD_EXP 35
18202: PPUSH
18203: CALL_OW 66
// end ;
18207: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18208: LD_EXP 12
18212: PUSH
18213: LD_EXP 22
18217: PUSH
18218: LD_INT 1
18220: LESS
18221: AND
18222: IFFALSE 18779
18224: GO 18226
18226: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18227: LD_INT 22
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: LD_INT 25
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 25
18252: PUSH
18253: LD_INT 3
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 69
18273: IFFALSE 18351
// begin ChangeSideFog ( 1 , 2 ) ;
18275: LD_INT 1
18277: PPUSH
18278: LD_INT 2
18280: PPUSH
18281: CALL_OW 343
// Query ( DestroyEnemy ) ;
18285: LD_STRING DestroyEnemy
18287: PPUSH
18288: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18292: LD_INT 35
18294: PPUSH
18295: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18299: LD_INT 22
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: LD_INT 25
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 25
18324: PUSH
18325: LD_INT 3
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PPUSH
18341: CALL_OW 69
18345: PUSH
18346: LD_INT 0
18348: EQUAL
18349: IFFALSE 18292
// end ; if tick <= 45 45$00 then
18351: LD_OWVAR 1
18355: PUSH
18356: LD_INT 94500
18358: LESSEQUAL
18359: IFFALSE 18368
// SetAchievement ( ACH_HSPEED_3 ) ;
18361: LD_STRING ACH_HSPEED_3
18363: PPUSH
18364: CALL_OW 543
// DialogueOn ;
18368: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18372: LD_EXP 30
18376: PPUSH
18377: LD_STRING DH-1-final
18379: PPUSH
18380: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18384: LD_OWVAR 1
18388: PUSH
18389: LD_INT 138600
18391: PUSH
18392: LD_INT 134400
18394: PUSH
18395: LD_INT 130200
18397: PUSH
18398: LD_INT 126000
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: PUSH
18407: LD_OWVAR 67
18411: ARRAY
18412: LESSEQUAL
18413: IFFALSE 18427
// AddMedal ( med1 , 1 ) else
18415: LD_STRING med1
18417: PPUSH
18418: LD_INT 1
18420: PPUSH
18421: CALL_OW 101
18425: GO 18438
// AddMedal ( med1 , - 1 ) ;
18427: LD_STRING med1
18429: PPUSH
18430: LD_INT 1
18432: NEG
18433: PPUSH
18434: CALL_OW 101
// if vehCounter >= 2 then
18438: LD_EXP 23
18442: PUSH
18443: LD_INT 2
18445: GREATEREQUAL
18446: IFFALSE 18460
// AddMedal ( med2 , 1 ) else
18448: LD_STRING med2
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL_OW 101
18458: GO 18471
// AddMedal ( med2 , - 1 ) ;
18460: LD_STRING med2
18462: PPUSH
18463: LD_INT 1
18465: NEG
18466: PPUSH
18467: CALL_OW 101
// if deadCounter = 0 then
18471: LD_EXP 10
18475: PUSH
18476: LD_INT 0
18478: EQUAL
18479: IFFALSE 18493
// AddMedal ( med3 , 1 ) else
18481: LD_STRING med3
18483: PPUSH
18484: LD_INT 1
18486: PPUSH
18487: CALL_OW 101
18491: GO 18504
// AddMedal ( med3 , - 1 ) ;
18493: LD_STRING med3
18495: PPUSH
18496: LD_INT 1
18498: NEG
18499: PPUSH
18500: CALL_OW 101
// GiveMedals ( MAIN ) ;
18504: LD_STRING MAIN
18506: PPUSH
18507: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18511: LD_INT 22
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 23
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 21
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: PPUSH
18551: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18555: LD_EXP 30
18559: PPUSH
18560: LD_STRING 03_Heike
18562: PPUSH
18563: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18567: LD_EXP 34
18571: PPUSH
18572: LD_STRING 03_Aviradze
18574: PPUSH
18575: CALL_OW 38
// if Givi then
18579: LD_EXP 31
18583: IFFALSE 18597
// SaveCharacters ( Givi , 03_Givi ) ;
18585: LD_EXP 31
18589: PPUSH
18590: LD_STRING 03_Givi
18592: PPUSH
18593: CALL_OW 38
// if Mike then
18597: LD_EXP 32
18601: IFFALSE 18615
// SaveCharacters ( Mike , 03_Mike ) ;
18603: LD_EXP 32
18607: PPUSH
18608: LD_STRING 03_Mike
18610: PPUSH
18611: CALL_OW 38
// if Kamil then
18615: LD_EXP 33
18619: IFFALSE 18633
// SaveCharacters ( Kamil , 03_Kamil ) ;
18621: LD_EXP 33
18625: PPUSH
18626: LD_STRING 03_Kamil
18628: PPUSH
18629: CALL_OW 38
// if Kaia then
18633: LD_EXP 35
18637: IFFALSE 18651
// SaveCharacters ( Kaia , 03_Kaia ) ;
18639: LD_EXP 35
18643: PPUSH
18644: LD_STRING 03_Kaia
18646: PPUSH
18647: CALL_OW 38
// if Sophia then
18651: LD_EXP 36
18655: IFFALSE 18669
// SaveCharacters ( Sophia , 03_Sophia ) ;
18657: LD_EXP 36
18661: PPUSH
18662: LD_STRING 03_Sophia
18664: PPUSH
18665: CALL_OW 38
// if Markov then
18669: LD_EXP 37
18673: IFFALSE 18687
// SaveCharacters ( Markov , 03_Markov ) ;
18675: LD_EXP 37
18679: PPUSH
18680: LD_STRING 03_Markov
18682: PPUSH
18683: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18687: LD_EXP 40
18691: PUSH
18692: LD_EXP 40
18696: PPUSH
18697: CALL_OW 255
18701: PUSH
18702: LD_INT 2
18704: EQUAL
18705: AND
18706: IFFALSE 18727
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18708: LD_STRING enableBioCharacter(BIO_IBRA)
18710: PPUSH
18711: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18715: LD_EXP 40
18719: PPUSH
18720: LD_STRING 03_Ibrahim
18722: PPUSH
18723: CALL_OW 38
// end ; if heikeSecondSquad then
18727: LD_EXP 44
18731: IFFALSE 18745
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18733: LD_EXP 44
18737: PPUSH
18738: LD_STRING 03_others
18740: PPUSH
18741: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18745: LD_EXP 10
18749: PPUSH
18750: LD_STRING 03_DeadCounter
18752: PPUSH
18753: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18757: LD_STRING enableBioCharacter(BIO_OMAR)
18759: PPUSH
18760: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18764: LD_STRING enableBioCharacter(BIO_FARM)
18766: PPUSH
18767: CALL_OW 559
// YouWin ;
18771: CALL_OW 103
// DialogueOff ;
18775: CALL_OW 7
// end ; end_of_file
18779: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL 35832 0 1
// if un = Heike then
18789: LD_VAR 0 1
18793: PUSH
18794: LD_EXP 30
18798: EQUAL
18799: IFFALSE 18808
// YouLost ( Heike ) ;
18801: LD_STRING Heike
18803: PPUSH
18804: CALL_OW 104
// if un = Aviradze then
18808: LD_VAR 0 1
18812: PUSH
18813: LD_EXP 34
18817: EQUAL
18818: IFFALSE 18827
// YouLost ( Aviradze ) ;
18820: LD_STRING Aviradze
18822: PPUSH
18823: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18827: LD_VAR 0 1
18831: PUSH
18832: LD_INT 11
18834: EQUAL
18835: PUSH
18836: LD_EXP 12
18840: NOT
18841: AND
18842: IFFALSE 18851
// YouLost ( Depot ) ;
18844: LD_STRING Depot
18846: PPUSH
18847: CALL_OW 104
// if un = arDepot then
18851: LD_VAR 0 1
18855: PUSH
18856: LD_INT 5
18858: EQUAL
18859: IFFALSE 18868
// YouLost ( FarmerDepot ) ;
18861: LD_STRING FarmerDepot
18863: PPUSH
18864: CALL_OW 104
// if un = Farmer then
18868: LD_VAR 0 1
18872: PUSH
18873: LD_EXP 38
18877: EQUAL
18878: IFFALSE 18887
// YouLost ( Farmer ) ;
18880: LD_STRING Farmer
18882: PPUSH
18883: CALL_OW 104
// if un in usForces then
18887: LD_VAR 0 1
18891: PUSH
18892: LD_EXP 46
18896: IN
18897: IFFALSE 18915
// usForces := usForces diff un ;
18899: LD_ADDR_EXP 46
18903: PUSH
18904: LD_EXP 46
18908: PUSH
18909: LD_VAR 0 1
18913: DIFF
18914: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18915: LD_VAR 0 1
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 23
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: IN
18960: IFFALSE 18976
// deadCounter := deadCounter + 1 ;
18962: LD_ADDR_EXP 10
18966: PUSH
18967: LD_EXP 10
18971: PUSH
18972: LD_INT 1
18974: PLUS
18975: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18976: LD_VAR 0 1
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_INT 4
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 34
18993: PUSH
18994: LD_INT 12
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 69
19009: IN
19010: PUSH
19011: LD_EXP 19
19015: NOT
19016: AND
19017: IFFALSE 19027
// firstConvoyDestroyed := true ;
19019: LD_ADDR_EXP 19
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
// if un in usAttackers then
19027: LD_VAR 0 1
19031: PUSH
19032: LD_EXP 49
19036: IN
19037: IFFALSE 19055
// usAttackers := usAttackers diff un ;
19039: LD_ADDR_EXP 49
19043: PUSH
19044: LD_EXP 49
19048: PUSH
19049: LD_VAR 0 1
19053: DIFF
19054: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19055: LD_VAR 0 1
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 21
19072: PUSH
19073: LD_INT 1
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 69
19088: IN
19089: IFFALSE 19105
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19091: LD_ADDR_EXP 21
19095: PUSH
19096: LD_EXP 21
19100: PUSH
19101: LD_INT 1
19103: PLUS
19104: ST_TO_ADDR
// end ;
19105: PPOPN 1
19107: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19108: LD_VAR 0 2
19112: PUSH
19113: LD_EXP 40
19117: EQUAL
19118: PUSH
19119: LD_EXP 26
19123: AND
19124: IFFALSE 19309
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19126: LD_INT 22
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 30
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 50
19148: PUSH
19149: EMPTY
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: IFFALSE 19215
// begin InGameOn ;
19163: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19167: LD_EXP 40
19171: PPUSH
19172: LD_INT 11
19174: PPUSH
19175: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19179: LD_INT 35
19181: PPUSH
19182: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19186: LD_EXP 40
19190: PPUSH
19191: LD_INT 11
19193: PPUSH
19194: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19198: LD_EXP 40
19202: PPUSH
19203: CALL_OW 310
19207: IFFALSE 19179
// InGameOff ;
19209: CALL_OW 9
// end else
19213: GO 19309
// begin SetSide ( Ibrahim , 6 ) ;
19215: LD_EXP 40
19219: PPUSH
19220: LD_INT 6
19222: PPUSH
19223: CALL_OW 235
// ibrahimInDepot := false ;
19227: LD_ADDR_EXP 26
19231: PUSH
19232: LD_INT 0
19234: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19235: LD_EXP 40
19239: PPUSH
19240: LD_INT 30
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19250: LD_INT 35
19252: PPUSH
19253: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19257: LD_EXP 40
19261: PPUSH
19262: LD_INT 30
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19272: LD_EXP 40
19276: PPUSH
19277: LD_INT 30
19279: PPUSH
19280: LD_INT 1
19282: PPUSH
19283: CALL_OW 307
19287: PUSH
19288: LD_EXP 40
19292: PPUSH
19293: CALL_OW 301
19297: OR
19298: IFFALSE 19250
// RemoveUnit ( Ibrahim ) ;
19300: LD_EXP 40
19304: PPUSH
19305: CALL_OW 64
// end ; end ; end ;
19309: PPOPN 2
19311: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19312: LD_VAR 0 2
19316: PUSH
19317: LD_EXP 30
19321: EQUAL
19322: PUSH
19323: LD_VAR 0 1
19327: PUSH
19328: LD_INT 11
19330: EQUAL
19331: AND
19332: PUSH
19333: LD_EXP 26
19337: AND
19338: IFFALSE 19344
// IbrahimQuery ;
19340: CALL 16791 0 0
// end ;
19344: PPOPN 2
19346: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 141
// if oldId in usAttackers then
19356: LD_VAR 0 2
19360: PUSH
19361: LD_EXP 49
19365: IN
19366: IFFALSE 19384
// usAttackers := usAttackers diff oldId ;
19368: LD_ADDR_EXP 49
19372: PUSH
19373: LD_EXP 49
19377: PUSH
19378: LD_VAR 0 2
19382: DIFF
19383: ST_TO_ADDR
// if newId in usAttackers then
19384: LD_VAR 0 1
19388: PUSH
19389: LD_EXP 49
19393: IN
19394: IFFALSE 19412
// usAttackers := usAttackers diff newId ;
19396: LD_ADDR_EXP 49
19400: PUSH
19401: LD_EXP 49
19405: PUSH
19406: LD_VAR 0 1
19410: DIFF
19411: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19412: LD_VAR 0 3
19416: PUSH
19417: LD_INT 4
19419: EQUAL
19420: PUSH
19421: LD_EXP 19
19425: NOT
19426: AND
19427: IFFALSE 19437
// firstConvoyDestroyed := true ;
19429: LD_ADDR_EXP 19
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19437: LD_VAR 0 1
19441: PPUSH
19442: CALL_OW 264
19446: PUSH
19447: LD_INT 12
19449: EQUAL
19450: IFFALSE 19488
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19452: LD_ADDR_EXP 14
19456: PUSH
19457: LD_EXP 14
19461: PUSH
19462: LD_INT 1
19464: PLUS
19465: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19466: LD_VAR 0 1
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 289
19478: PUSH
19479: LD_INT 0
19481: EQUAL
19482: IFFALSE 19488
// EmptyCargoDialog ;
19484: CALL 15409 0 0
// end ; end ;
19488: PPOPN 4
19490: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19491: LD_VAR 0 1
19495: PUSH
19496: LD_INT 2
19498: EQUAL
19499: PUSH
19500: LD_VAR 0 2
19504: PUSH
19505: LD_INT 5
19507: EQUAL
19508: AND
19509: IFFALSE 19518
// YouLost ( Attack ) ;
19511: LD_STRING Attack
19513: PPUSH
19514: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 2
19525: EQUAL
19526: PUSH
19527: LD_VAR 0 2
19531: PUSH
19532: LD_INT 1
19534: EQUAL
19535: AND
19536: IFFALSE 19546
// americanContact := true ;
19538: LD_ADDR_EXP 5
19542: PUSH
19543: LD_INT 1
19545: ST_TO_ADDR
// end ;
19546: PPOPN 2
19548: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19549: LD_VAR 0 1
19553: PPUSH
19554: CALL_OW 255
19558: PUSH
19559: LD_INT 1
19561: EQUAL
19562: PUSH
19563: LD_EXP 7
19567: NOT
19568: AND
19569: IFFALSE 19703
// begin if GetBType ( b ) = b_lab then
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 266
19580: PUSH
19581: LD_INT 6
19583: EQUAL
19584: IFFALSE 19624
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19586: LD_EXP 46
19590: PPUSH
19591: LD_INT 25
19593: PUSH
19594: LD_INT 4
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 72
19605: PPUSH
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 120
// AmLabResearch ( b ) ;
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL 5134 0 1
// end ; if GetBType ( b ) = b_armoury then
19624: LD_VAR 0 1
19628: PPUSH
19629: CALL_OW 266
19633: PUSH
19634: LD_INT 4
19636: EQUAL
19637: IFFALSE 19685
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19639: LD_EXP 46
19643: PPUSH
19644: LD_INT 25
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 3
19656: PUSH
19657: LD_INT 54
19659: PUSH
19660: EMPTY
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 72
19675: PPUSH
19676: LD_VAR 0 1
19680: PPUSH
19681: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19685: LD_ADDR_EXP 48
19689: PUSH
19690: LD_EXP 48
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 3
19702: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19703: LD_VAR 0 1
19707: PPUSH
19708: CALL_OW 255
19712: PUSH
19713: LD_INT 5
19715: EQUAL
19716: IFFALSE 19730
// SetBLevel ( b , 5 ) ;
19718: LD_VAR 0 1
19722: PPUSH
19723: LD_INT 5
19725: PPUSH
19726: CALL_OW 241
// end ;
19730: PPOPN 1
19732: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19733: LD_VAR 0 1
19737: PPUSH
19738: CALL_OW 255
19742: PUSH
19743: LD_INT 2
19745: EQUAL
19746: IFFALSE 19762
// vehCounter := vehCounter + 1 ;
19748: LD_ADDR_EXP 23
19752: PUSH
19753: LD_EXP 23
19757: PUSH
19758: LD_INT 1
19760: PLUS
19761: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19762: LD_VAR 0 1
19766: PPUSH
19767: LD_VAR 0 2
19771: PPUSH
19772: CALL 35952 0 2
// end ;
19776: PPOPN 2
19778: END
// on SailEvent ( event ) do begin if event = eventAttack then
19779: LD_VAR 0 1
19783: PUSH
19784: LD_EXP 25
19788: EQUAL
19789: IFFALSE 19795
// AmericanAttack ;
19791: CALL 6778 0 0
// end ; end_of_file
19795: PPOPN 1
19797: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19798: LD_OWVAR 1
19802: PUSH
19803: LD_INT 10500
19805: PUSH
19806: LD_INT 9800
19808: PUSH
19809: LD_INT 9450
19811: PUSH
19812: LD_INT 9100
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: PUSH
19821: LD_OWVAR 67
19825: ARRAY
19826: LESSEQUAL
19827: IFFALSE 19854
19829: GO 19831
19831: DISABLE
// begin enable ;
19832: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19833: LD_INT 1
19835: PPUSH
19836: LD_INT 5
19838: PPUSH
19839: CALL_OW 12
19843: PPUSH
19844: LD_INT 9
19846: PPUSH
19847: LD_INT 1
19849: PPUSH
19850: CALL_OW 55
// end ;
19854: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19855: LD_EXP 7
19859: PUSH
19860: LD_OWVAR 1
19864: PUSH
19865: LD_INT 94500
19867: LESSEQUAL
19868: AND
19869: IFFALSE 19896
19871: GO 19873
19873: DISABLE
// begin enable ;
19874: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19875: LD_INT 3
19877: PPUSH
19878: LD_INT 5
19880: PPUSH
19881: CALL_OW 12
19885: PPUSH
19886: LD_INT 9
19888: PPUSH
19889: LD_INT 1
19891: PPUSH
19892: CALL_OW 55
// end ; end_of_file
19896: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19897: LD_EXP 12
19901: NOT
19902: PUSH
19903: LD_EXP 17
19907: AND
19908: PUSH
19909: LD_EXP 4
19913: AND
19914: PUSH
19915: LD_EXP 16
19919: PUSH
19920: LD_EXP 17
19924: LESSEQUAL
19925: AND
19926: IFFALSE 20037
19928: GO 19930
19930: DISABLE
// begin enable ;
19931: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19932: LD_ADDR_OWVAR 47
19936: PUSH
19937: LD_STRING #X103-1
19939: PUSH
19940: LD_EXP 17
19944: PUSH
19945: LD_EXP 16
19949: MINUS
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19955: LD_ADDR_EXP 16
19959: PUSH
19960: LD_INT 5
19962: PPUSH
19963: CALL_OW 274
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: CALL_OW 275
19975: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19976: LD_INT 10
19978: PPUSH
19979: LD_INT 1
19981: PPUSH
19982: CALL_OW 287
19986: PUSH
19987: LD_INT 0
19989: EQUAL
19990: IFFALSE 20008
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19992: LD_ADDR_EXP 18
19996: PUSH
19997: LD_EXP 18
20001: PUSH
20002: LD_INT 35
20004: MINUS
20005: ST_TO_ADDR
20006: GO 20037
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20008: LD_ADDR_EXP 18
20012: PUSH
20013: LD_INT 42000
20015: PUSH
20016: LD_INT 31500
20018: PUSH
20019: LD_INT 25200
20021: PUSH
20022: LD_INT 21000
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: PUSH
20031: LD_OWVAR 67
20035: ARRAY
20036: ST_TO_ADDR
// end ; end_of_file
20037: END
// export globalGameSaveCounter ; every 0 0$1 do
20038: GO 20040
20040: DISABLE
// begin enable ;
20041: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20042: LD_STRING updateTimer(
20044: PUSH
20045: LD_OWVAR 1
20049: STR
20050: PUSH
20051: LD_STRING );
20053: STR
20054: PPUSH
20055: CALL_OW 559
// end ;
20059: END
// every 0 0$1 do
20060: GO 20062
20062: DISABLE
// begin globalGameSaveCounter := 0 ;
20063: LD_ADDR_EXP 50
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20071: LD_STRING setGameSaveCounter(0)
20073: PPUSH
20074: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20078: LD_STRING initStreamRollete();
20080: PPUSH
20081: CALL_OW 559
// InitStreamMode ;
20085: CALL 21411 0 0
// DefineStreamItems ( false ) ;
20089: LD_INT 0
20091: PPUSH
20092: CALL 21875 0 1
// end ;
20096: END
// export function SOS_MapStart ( ) ; begin
20097: LD_INT 0
20099: PPUSH
// if streamModeActive then
20100: LD_EXP 51
20104: IFFALSE 20113
// DefineStreamItems ( true ) ;
20106: LD_INT 1
20108: PPUSH
20109: CALL 21875 0 1
// UpdateLuaVariables ( ) ;
20113: CALL 20130 0 0
// UpdateFactoryWaypoints ( ) ;
20117: CALL 34736 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20121: CALL 34993 0 0
// end ;
20125: LD_VAR 0 1
20129: RET
// function UpdateLuaVariables ( ) ; begin
20130: LD_INT 0
20132: PPUSH
// if globalGameSaveCounter then
20133: LD_EXP 50
20137: IFFALSE 20171
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20139: LD_ADDR_EXP 50
20143: PUSH
20144: LD_EXP 50
20148: PPUSH
20149: CALL 78950 0 1
20153: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20154: LD_STRING setGameSaveCounter(
20156: PUSH
20157: LD_EXP 50
20161: STR
20162: PUSH
20163: LD_STRING )
20165: STR
20166: PPUSH
20167: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20171: LD_STRING setGameDifficulty(
20173: PUSH
20174: LD_OWVAR 67
20178: STR
20179: PUSH
20180: LD_STRING )
20182: STR
20183: PPUSH
20184: CALL_OW 559
// end ;
20188: LD_VAR 0 1
20192: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20193: LD_INT 0
20195: PPUSH
// if p2 = stream_mode then
20196: LD_VAR 0 2
20200: PUSH
20201: LD_INT 100
20203: EQUAL
20204: IFFALSE 21207
// begin if not StreamModeActive then
20206: LD_EXP 51
20210: NOT
20211: IFFALSE 20221
// StreamModeActive := true ;
20213: LD_ADDR_EXP 51
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// if p3 = 0 then
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 0
20228: EQUAL
20229: IFFALSE 20235
// InitStreamMode ;
20231: CALL 21411 0 0
// if p3 = 1 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 1
20242: EQUAL
20243: IFFALSE 20253
// sRocket := true ;
20245: LD_ADDR_EXP 56
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 2 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 2
20260: EQUAL
20261: IFFALSE 20271
// sSpeed := true ;
20263: LD_ADDR_EXP 55
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 3 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 3
20278: EQUAL
20279: IFFALSE 20289
// sEngine := true ;
20281: LD_ADDR_EXP 57
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 4 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 4
20296: EQUAL
20297: IFFALSE 20307
// sSpec := true ;
20299: LD_ADDR_EXP 54
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 5 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 5
20314: EQUAL
20315: IFFALSE 20325
// sLevel := true ;
20317: LD_ADDR_EXP 58
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 6 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 6
20332: EQUAL
20333: IFFALSE 20343
// sArmoury := true ;
20335: LD_ADDR_EXP 59
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 7 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 7
20350: EQUAL
20351: IFFALSE 20361
// sRadar := true ;
20353: LD_ADDR_EXP 60
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 8 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 8
20368: EQUAL
20369: IFFALSE 20379
// sBunker := true ;
20371: LD_ADDR_EXP 61
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 9 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 9
20386: EQUAL
20387: IFFALSE 20397
// sHack := true ;
20389: LD_ADDR_EXP 62
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 10 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 10
20404: EQUAL
20405: IFFALSE 20415
// sFire := true ;
20407: LD_ADDR_EXP 63
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 11 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 11
20422: EQUAL
20423: IFFALSE 20433
// sRefresh := true ;
20425: LD_ADDR_EXP 64
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 12 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 12
20440: EQUAL
20441: IFFALSE 20451
// sExp := true ;
20443: LD_ADDR_EXP 65
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 13 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 13
20458: EQUAL
20459: IFFALSE 20469
// sDepot := true ;
20461: LD_ADDR_EXP 66
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 14 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 14
20476: EQUAL
20477: IFFALSE 20487
// sFlag := true ;
20479: LD_ADDR_EXP 67
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 15 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 15
20494: EQUAL
20495: IFFALSE 20505
// sKamikadze := true ;
20497: LD_ADDR_EXP 75
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 16 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 16
20512: EQUAL
20513: IFFALSE 20523
// sTroll := true ;
20515: LD_ADDR_EXP 76
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 17 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 17
20530: EQUAL
20531: IFFALSE 20541
// sSlow := true ;
20533: LD_ADDR_EXP 77
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 18 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 18
20548: EQUAL
20549: IFFALSE 20559
// sLack := true ;
20551: LD_ADDR_EXP 78
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 19 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 19
20566: EQUAL
20567: IFFALSE 20577
// sTank := true ;
20569: LD_ADDR_EXP 80
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 20 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 20
20584: EQUAL
20585: IFFALSE 20595
// sRemote := true ;
20587: LD_ADDR_EXP 81
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 21 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 21
20602: EQUAL
20603: IFFALSE 20613
// sPowell := true ;
20605: LD_ADDR_EXP 82
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 22 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 22
20620: EQUAL
20621: IFFALSE 20631
// sTeleport := true ;
20623: LD_ADDR_EXP 85
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 23 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 23
20638: EQUAL
20639: IFFALSE 20649
// sOilTower := true ;
20641: LD_ADDR_EXP 87
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 24 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 24
20656: EQUAL
20657: IFFALSE 20667
// sShovel := true ;
20659: LD_ADDR_EXP 88
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 25 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 25
20674: EQUAL
20675: IFFALSE 20685
// sSheik := true ;
20677: LD_ADDR_EXP 89
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 26 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 26
20692: EQUAL
20693: IFFALSE 20703
// sEarthquake := true ;
20695: LD_ADDR_EXP 91
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 27 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 27
20710: EQUAL
20711: IFFALSE 20721
// sAI := true ;
20713: LD_ADDR_EXP 92
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 28 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 28
20728: EQUAL
20729: IFFALSE 20739
// sCargo := true ;
20731: LD_ADDR_EXP 95
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 29 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 29
20746: EQUAL
20747: IFFALSE 20757
// sDLaser := true ;
20749: LD_ADDR_EXP 96
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 30 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 30
20764: EQUAL
20765: IFFALSE 20775
// sExchange := true ;
20767: LD_ADDR_EXP 97
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 31 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 31
20782: EQUAL
20783: IFFALSE 20793
// sFac := true ;
20785: LD_ADDR_EXP 98
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 32 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 32
20800: EQUAL
20801: IFFALSE 20811
// sPower := true ;
20803: LD_ADDR_EXP 99
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 33 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 33
20818: EQUAL
20819: IFFALSE 20829
// sRandom := true ;
20821: LD_ADDR_EXP 100
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 34 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 34
20836: EQUAL
20837: IFFALSE 20847
// sShield := true ;
20839: LD_ADDR_EXP 101
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 35 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 35
20854: EQUAL
20855: IFFALSE 20865
// sTime := true ;
20857: LD_ADDR_EXP 102
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 36 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 36
20872: EQUAL
20873: IFFALSE 20883
// sTools := true ;
20875: LD_ADDR_EXP 103
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 101 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 101
20890: EQUAL
20891: IFFALSE 20901
// sSold := true ;
20893: LD_ADDR_EXP 68
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 102 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 102
20908: EQUAL
20909: IFFALSE 20919
// sDiff := true ;
20911: LD_ADDR_EXP 69
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 103 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 103
20926: EQUAL
20927: IFFALSE 20937
// sFog := true ;
20929: LD_ADDR_EXP 72
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 104 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 104
20944: EQUAL
20945: IFFALSE 20955
// sReset := true ;
20947: LD_ADDR_EXP 73
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 105 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 105
20962: EQUAL
20963: IFFALSE 20973
// sSun := true ;
20965: LD_ADDR_EXP 74
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 106 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 106
20980: EQUAL
20981: IFFALSE 20991
// sTiger := true ;
20983: LD_ADDR_EXP 70
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 107 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 107
20998: EQUAL
20999: IFFALSE 21009
// sBomb := true ;
21001: LD_ADDR_EXP 71
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 108 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 108
21016: EQUAL
21017: IFFALSE 21027
// sWound := true ;
21019: LD_ADDR_EXP 79
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 109 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 109
21034: EQUAL
21035: IFFALSE 21045
// sBetray := true ;
21037: LD_ADDR_EXP 83
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 110 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 110
21052: EQUAL
21053: IFFALSE 21063
// sContamin := true ;
21055: LD_ADDR_EXP 84
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 111 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 111
21070: EQUAL
21071: IFFALSE 21081
// sOil := true ;
21073: LD_ADDR_EXP 86
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 112 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 112
21088: EQUAL
21089: IFFALSE 21099
// sStu := true ;
21091: LD_ADDR_EXP 90
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 113 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 113
21106: EQUAL
21107: IFFALSE 21117
// sBazooka := true ;
21109: LD_ADDR_EXP 93
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 114 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 114
21124: EQUAL
21125: IFFALSE 21135
// sMortar := true ;
21127: LD_ADDR_EXP 94
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 115 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 115
21142: EQUAL
21143: IFFALSE 21153
// sRanger := true ;
21145: LD_ADDR_EXP 104
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 116 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 116
21160: EQUAL
21161: IFFALSE 21171
// sComputer := true ;
21163: LD_ADDR_EXP 105
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 117 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 117
21178: EQUAL
21179: IFFALSE 21189
// s30 := true ;
21181: LD_ADDR_EXP 106
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 118 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 118
21196: EQUAL
21197: IFFALSE 21207
// s60 := true ;
21199: LD_ADDR_EXP 107
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// end ; if p2 = hack_mode then
21207: LD_VAR 0 2
21211: PUSH
21212: LD_INT 101
21214: EQUAL
21215: IFFALSE 21343
// begin case p3 of 1 :
21217: LD_VAR 0 3
21221: PUSH
21222: LD_INT 1
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21237
21230: POP
// hHackUnlimitedResources ; 2 :
21231: CALL 33482 0 0
21235: GO 21343
21237: LD_INT 2
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21252
21245: POP
// hHackSetLevel10 ; 3 :
21246: CALL 33615 0 0
21250: GO 21343
21252: LD_INT 3
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21267
21260: POP
// hHackSetLevel10YourUnits ; 4 :
21261: CALL 33700 0 0
21265: GO 21343
21267: LD_INT 4
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21282
21275: POP
// hHackInvincible ; 5 :
21276: CALL 34148 0 0
21280: GO 21343
21282: LD_INT 5
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21297
21290: POP
// hHackInvisible ; 6 :
21291: CALL 34259 0 0
21295: GO 21343
21297: LD_INT 6
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21312
21305: POP
// hHackChangeYourSide ; 7 :
21306: CALL 34316 0 0
21310: GO 21343
21312: LD_INT 7
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21327
21320: POP
// hHackChangeUnitSide ; 8 :
21321: CALL 34358 0 0
21325: GO 21343
21327: LD_INT 8
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21342
21335: POP
// hHackFog ; end ;
21336: CALL 34459 0 0
21340: GO 21343
21342: POP
// end ; if p2 = game_save_mode then
21343: LD_VAR 0 2
21347: PUSH
21348: LD_INT 102
21350: EQUAL
21351: IFFALSE 21406
// begin if p3 = 1 then
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 1
21360: EQUAL
21361: IFFALSE 21373
// globalGameSaveCounter := p4 ;
21363: LD_ADDR_EXP 50
21367: PUSH
21368: LD_VAR 0 4
21372: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21373: LD_VAR 0 3
21377: PUSH
21378: LD_INT 2
21380: EQUAL
21381: PUSH
21382: LD_EXP 50
21386: AND
21387: IFFALSE 21406
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21389: LD_STRING setGameSaveCounter(
21391: PUSH
21392: LD_EXP 50
21396: STR
21397: PUSH
21398: LD_STRING )
21400: STR
21401: PPUSH
21402: CALL_OW 559
// end ; end ;
21406: LD_VAR 0 7
21410: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21411: LD_INT 0
21413: PPUSH
// streamModeActive := false ;
21414: LD_ADDR_EXP 51
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// normalCounter := 36 ;
21422: LD_ADDR_EXP 52
21426: PUSH
21427: LD_INT 36
21429: ST_TO_ADDR
// hardcoreCounter := 18 ;
21430: LD_ADDR_EXP 53
21434: PUSH
21435: LD_INT 18
21437: ST_TO_ADDR
// sRocket := false ;
21438: LD_ADDR_EXP 56
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sSpeed := false ;
21446: LD_ADDR_EXP 55
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sEngine := false ;
21454: LD_ADDR_EXP 57
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sSpec := false ;
21462: LD_ADDR_EXP 54
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sLevel := false ;
21470: LD_ADDR_EXP 58
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sArmoury := false ;
21478: LD_ADDR_EXP 59
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sRadar := false ;
21486: LD_ADDR_EXP 60
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sBunker := false ;
21494: LD_ADDR_EXP 61
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sHack := false ;
21502: LD_ADDR_EXP 62
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sFire := false ;
21510: LD_ADDR_EXP 63
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sRefresh := false ;
21518: LD_ADDR_EXP 64
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// sExp := false ;
21526: LD_ADDR_EXP 65
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// sDepot := false ;
21534: LD_ADDR_EXP 66
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sFlag := false ;
21542: LD_ADDR_EXP 67
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sKamikadze := false ;
21550: LD_ADDR_EXP 75
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sTroll := false ;
21558: LD_ADDR_EXP 76
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sSlow := false ;
21566: LD_ADDR_EXP 77
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// sLack := false ;
21574: LD_ADDR_EXP 78
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// sTank := false ;
21582: LD_ADDR_EXP 80
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// sRemote := false ;
21590: LD_ADDR_EXP 81
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// sPowell := false ;
21598: LD_ADDR_EXP 82
21602: PUSH
21603: LD_INT 0
21605: ST_TO_ADDR
// sTeleport := false ;
21606: LD_ADDR_EXP 85
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// sOilTower := false ;
21614: LD_ADDR_EXP 87
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// sShovel := false ;
21622: LD_ADDR_EXP 88
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// sSheik := false ;
21630: LD_ADDR_EXP 89
21634: PUSH
21635: LD_INT 0
21637: ST_TO_ADDR
// sEarthquake := false ;
21638: LD_ADDR_EXP 91
21642: PUSH
21643: LD_INT 0
21645: ST_TO_ADDR
// sAI := false ;
21646: LD_ADDR_EXP 92
21650: PUSH
21651: LD_INT 0
21653: ST_TO_ADDR
// sCargo := false ;
21654: LD_ADDR_EXP 95
21658: PUSH
21659: LD_INT 0
21661: ST_TO_ADDR
// sDLaser := false ;
21662: LD_ADDR_EXP 96
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
// sExchange := false ;
21670: LD_ADDR_EXP 97
21674: PUSH
21675: LD_INT 0
21677: ST_TO_ADDR
// sFac := false ;
21678: LD_ADDR_EXP 98
21682: PUSH
21683: LD_INT 0
21685: ST_TO_ADDR
// sPower := false ;
21686: LD_ADDR_EXP 99
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
// sRandom := false ;
21694: LD_ADDR_EXP 100
21698: PUSH
21699: LD_INT 0
21701: ST_TO_ADDR
// sShield := false ;
21702: LD_ADDR_EXP 101
21706: PUSH
21707: LD_INT 0
21709: ST_TO_ADDR
// sTime := false ;
21710: LD_ADDR_EXP 102
21714: PUSH
21715: LD_INT 0
21717: ST_TO_ADDR
// sTools := false ;
21718: LD_ADDR_EXP 103
21722: PUSH
21723: LD_INT 0
21725: ST_TO_ADDR
// sSold := false ;
21726: LD_ADDR_EXP 68
21730: PUSH
21731: LD_INT 0
21733: ST_TO_ADDR
// sDiff := false ;
21734: LD_ADDR_EXP 69
21738: PUSH
21739: LD_INT 0
21741: ST_TO_ADDR
// sFog := false ;
21742: LD_ADDR_EXP 72
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
// sReset := false ;
21750: LD_ADDR_EXP 73
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// sSun := false ;
21758: LD_ADDR_EXP 74
21762: PUSH
21763: LD_INT 0
21765: ST_TO_ADDR
// sTiger := false ;
21766: LD_ADDR_EXP 70
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// sBomb := false ;
21774: LD_ADDR_EXP 71
21778: PUSH
21779: LD_INT 0
21781: ST_TO_ADDR
// sWound := false ;
21782: LD_ADDR_EXP 79
21786: PUSH
21787: LD_INT 0
21789: ST_TO_ADDR
// sBetray := false ;
21790: LD_ADDR_EXP 83
21794: PUSH
21795: LD_INT 0
21797: ST_TO_ADDR
// sContamin := false ;
21798: LD_ADDR_EXP 84
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// sOil := false ;
21806: LD_ADDR_EXP 86
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// sStu := false ;
21814: LD_ADDR_EXP 90
21818: PUSH
21819: LD_INT 0
21821: ST_TO_ADDR
// sBazooka := false ;
21822: LD_ADDR_EXP 93
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// sMortar := false ;
21830: LD_ADDR_EXP 94
21834: PUSH
21835: LD_INT 0
21837: ST_TO_ADDR
// sRanger := false ;
21838: LD_ADDR_EXP 104
21842: PUSH
21843: LD_INT 0
21845: ST_TO_ADDR
// sComputer := false ;
21846: LD_ADDR_EXP 105
21850: PUSH
21851: LD_INT 0
21853: ST_TO_ADDR
// s30 := false ;
21854: LD_ADDR_EXP 106
21858: PUSH
21859: LD_INT 0
21861: ST_TO_ADDR
// s60 := false ;
21862: LD_ADDR_EXP 107
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// end ;
21870: LD_VAR 0 1
21874: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
// result := [ ] ;
21884: LD_ADDR_VAR 0 2
21888: PUSH
21889: EMPTY
21890: ST_TO_ADDR
// if campaign_id = 1 then
21891: LD_OWVAR 69
21895: PUSH
21896: LD_INT 1
21898: EQUAL
21899: IFFALSE 25065
// begin case mission_number of 1 :
21901: LD_OWVAR 70
21905: PUSH
21906: LD_INT 1
21908: DOUBLE
21909: EQUAL
21910: IFTRUE 21914
21912: GO 21990
21914: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: LD_INT 4
21925: PUSH
21926: LD_INT 11
21928: PUSH
21929: LD_INT 12
21931: PUSH
21932: LD_INT 15
21934: PUSH
21935: LD_INT 16
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_INT 23
21943: PUSH
21944: LD_INT 26
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 101
21960: PUSH
21961: LD_INT 102
21963: PUSH
21964: LD_INT 106
21966: PUSH
21967: LD_INT 116
21969: PUSH
21970: LD_INT 117
21972: PUSH
21973: LD_INT 118
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: ST_TO_ADDR
21988: GO 25063
21990: LD_INT 2
21992: DOUBLE
21993: EQUAL
21994: IFTRUE 21998
21996: GO 22082
21998: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21999: LD_ADDR_VAR 0 2
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: LD_INT 4
22009: PUSH
22010: LD_INT 11
22012: PUSH
22013: LD_INT 12
22015: PUSH
22016: LD_INT 15
22018: PUSH
22019: LD_INT 16
22021: PUSH
22022: LD_INT 22
22024: PUSH
22025: LD_INT 23
22027: PUSH
22028: LD_INT 26
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 101
22044: PUSH
22045: LD_INT 102
22047: PUSH
22048: LD_INT 105
22050: PUSH
22051: LD_INT 106
22053: PUSH
22054: LD_INT 108
22056: PUSH
22057: LD_INT 116
22059: PUSH
22060: LD_INT 117
22062: PUSH
22063: LD_INT 118
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: ST_TO_ADDR
22080: GO 25063
22082: LD_INT 3
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22178
22090: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22091: LD_ADDR_VAR 0 2
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 4
22101: PUSH
22102: LD_INT 5
22104: PUSH
22105: LD_INT 11
22107: PUSH
22108: LD_INT 12
22110: PUSH
22111: LD_INT 15
22113: PUSH
22114: LD_INT 16
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_INT 26
22122: PUSH
22123: LD_INT 36
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 101
22140: PUSH
22141: LD_INT 102
22143: PUSH
22144: LD_INT 105
22146: PUSH
22147: LD_INT 106
22149: PUSH
22150: LD_INT 108
22152: PUSH
22153: LD_INT 116
22155: PUSH
22156: LD_INT 117
22158: PUSH
22159: LD_INT 118
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: ST_TO_ADDR
22176: GO 25063
22178: LD_INT 4
22180: DOUBLE
22181: EQUAL
22182: IFTRUE 22186
22184: GO 22282
22186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 4
22197: PUSH
22198: LD_INT 5
22200: PUSH
22201: LD_INT 8
22203: PUSH
22204: LD_INT 11
22206: PUSH
22207: LD_INT 12
22209: PUSH
22210: LD_INT 15
22212: PUSH
22213: LD_INT 16
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: LD_INT 23
22221: PUSH
22222: LD_INT 26
22224: PUSH
22225: LD_INT 36
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 101
22244: PUSH
22245: LD_INT 102
22247: PUSH
22248: LD_INT 105
22250: PUSH
22251: LD_INT 106
22253: PUSH
22254: LD_INT 108
22256: PUSH
22257: LD_INT 116
22259: PUSH
22260: LD_INT 117
22262: PUSH
22263: LD_INT 118
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: ST_TO_ADDR
22280: GO 25063
22282: LD_INT 5
22284: DOUBLE
22285: EQUAL
22286: IFTRUE 22290
22288: GO 22402
22290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 4
22301: PUSH
22302: LD_INT 5
22304: PUSH
22305: LD_INT 6
22307: PUSH
22308: LD_INT 8
22310: PUSH
22311: LD_INT 11
22313: PUSH
22314: LD_INT 12
22316: PUSH
22317: LD_INT 15
22319: PUSH
22320: LD_INT 16
22322: PUSH
22323: LD_INT 22
22325: PUSH
22326: LD_INT 23
22328: PUSH
22329: LD_INT 25
22331: PUSH
22332: LD_INT 26
22334: PUSH
22335: LD_INT 36
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 101
22356: PUSH
22357: LD_INT 102
22359: PUSH
22360: LD_INT 105
22362: PUSH
22363: LD_INT 106
22365: PUSH
22366: LD_INT 108
22368: PUSH
22369: LD_INT 109
22371: PUSH
22372: LD_INT 112
22374: PUSH
22375: LD_INT 116
22377: PUSH
22378: LD_INT 117
22380: PUSH
22381: LD_INT 118
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: ST_TO_ADDR
22400: GO 25063
22402: LD_INT 6
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22542
22410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22411: LD_ADDR_VAR 0 2
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: LD_INT 5
22424: PUSH
22425: LD_INT 6
22427: PUSH
22428: LD_INT 8
22430: PUSH
22431: LD_INT 11
22433: PUSH
22434: LD_INT 12
22436: PUSH
22437: LD_INT 15
22439: PUSH
22440: LD_INT 16
22442: PUSH
22443: LD_INT 20
22445: PUSH
22446: LD_INT 21
22448: PUSH
22449: LD_INT 22
22451: PUSH
22452: LD_INT 23
22454: PUSH
22455: LD_INT 25
22457: PUSH
22458: LD_INT 26
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 31
22466: PUSH
22467: LD_INT 32
22469: PUSH
22470: LD_INT 36
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 101
22496: PUSH
22497: LD_INT 102
22499: PUSH
22500: LD_INT 105
22502: PUSH
22503: LD_INT 106
22505: PUSH
22506: LD_INT 108
22508: PUSH
22509: LD_INT 109
22511: PUSH
22512: LD_INT 112
22514: PUSH
22515: LD_INT 116
22517: PUSH
22518: LD_INT 117
22520: PUSH
22521: LD_INT 118
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: ST_TO_ADDR
22540: GO 25063
22542: LD_INT 7
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22662
22550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22551: LD_ADDR_VAR 0 2
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: LD_INT 4
22561: PUSH
22562: LD_INT 5
22564: PUSH
22565: LD_INT 7
22567: PUSH
22568: LD_INT 11
22570: PUSH
22571: LD_INT 12
22573: PUSH
22574: LD_INT 15
22576: PUSH
22577: LD_INT 16
22579: PUSH
22580: LD_INT 20
22582: PUSH
22583: LD_INT 21
22585: PUSH
22586: LD_INT 22
22588: PUSH
22589: LD_INT 23
22591: PUSH
22592: LD_INT 25
22594: PUSH
22595: LD_INT 26
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 101
22616: PUSH
22617: LD_INT 102
22619: PUSH
22620: LD_INT 103
22622: PUSH
22623: LD_INT 105
22625: PUSH
22626: LD_INT 106
22628: PUSH
22629: LD_INT 108
22631: PUSH
22632: LD_INT 112
22634: PUSH
22635: LD_INT 116
22637: PUSH
22638: LD_INT 117
22640: PUSH
22641: LD_INT 118
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: ST_TO_ADDR
22660: GO 25063
22662: LD_INT 8
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22810
22670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: LD_INT 4
22681: PUSH
22682: LD_INT 5
22684: PUSH
22685: LD_INT 6
22687: PUSH
22688: LD_INT 7
22690: PUSH
22691: LD_INT 8
22693: PUSH
22694: LD_INT 11
22696: PUSH
22697: LD_INT 12
22699: PUSH
22700: LD_INT 15
22702: PUSH
22703: LD_INT 16
22705: PUSH
22706: LD_INT 20
22708: PUSH
22709: LD_INT 21
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 23
22717: PUSH
22718: LD_INT 25
22720: PUSH
22721: LD_INT 26
22723: PUSH
22724: LD_INT 30
22726: PUSH
22727: LD_INT 31
22729: PUSH
22730: LD_INT 32
22732: PUSH
22733: LD_INT 36
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 101
22760: PUSH
22761: LD_INT 102
22763: PUSH
22764: LD_INT 103
22766: PUSH
22767: LD_INT 105
22769: PUSH
22770: LD_INT 106
22772: PUSH
22773: LD_INT 108
22775: PUSH
22776: LD_INT 109
22778: PUSH
22779: LD_INT 112
22781: PUSH
22782: LD_INT 116
22784: PUSH
22785: LD_INT 117
22787: PUSH
22788: LD_INT 118
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: ST_TO_ADDR
22808: GO 25063
22810: LD_INT 9
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 22966
22818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22819: LD_ADDR_VAR 0 2
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: LD_INT 6
22835: PUSH
22836: LD_INT 7
22838: PUSH
22839: LD_INT 8
22841: PUSH
22842: LD_INT 11
22844: PUSH
22845: LD_INT 12
22847: PUSH
22848: LD_INT 15
22850: PUSH
22851: LD_INT 16
22853: PUSH
22854: LD_INT 20
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 22
22862: PUSH
22863: LD_INT 23
22865: PUSH
22866: LD_INT 25
22868: PUSH
22869: LD_INT 26
22871: PUSH
22872: LD_INT 28
22874: PUSH
22875: LD_INT 30
22877: PUSH
22878: LD_INT 31
22880: PUSH
22881: LD_INT 32
22883: PUSH
22884: LD_INT 36
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 101
22912: PUSH
22913: LD_INT 102
22915: PUSH
22916: LD_INT 103
22918: PUSH
22919: LD_INT 105
22921: PUSH
22922: LD_INT 106
22924: PUSH
22925: LD_INT 108
22927: PUSH
22928: LD_INT 109
22930: PUSH
22931: LD_INT 112
22933: PUSH
22934: LD_INT 114
22936: PUSH
22937: LD_INT 116
22939: PUSH
22940: LD_INT 117
22942: PUSH
22943: LD_INT 118
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: ST_TO_ADDR
22964: GO 25063
22966: LD_INT 10
22968: DOUBLE
22969: EQUAL
22970: IFTRUE 22974
22972: GO 23170
22974: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22975: LD_ADDR_VAR 0 2
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: LD_INT 4
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: LD_INT 6
22991: PUSH
22992: LD_INT 7
22994: PUSH
22995: LD_INT 8
22997: PUSH
22998: LD_INT 9
23000: PUSH
23001: LD_INT 10
23003: PUSH
23004: LD_INT 11
23006: PUSH
23007: LD_INT 12
23009: PUSH
23010: LD_INT 13
23012: PUSH
23013: LD_INT 14
23015: PUSH
23016: LD_INT 15
23018: PUSH
23019: LD_INT 16
23021: PUSH
23022: LD_INT 17
23024: PUSH
23025: LD_INT 18
23027: PUSH
23028: LD_INT 19
23030: PUSH
23031: LD_INT 20
23033: PUSH
23034: LD_INT 21
23036: PUSH
23037: LD_INT 22
23039: PUSH
23040: LD_INT 23
23042: PUSH
23043: LD_INT 24
23045: PUSH
23046: LD_INT 25
23048: PUSH
23049: LD_INT 26
23051: PUSH
23052: LD_INT 28
23054: PUSH
23055: LD_INT 30
23057: PUSH
23058: LD_INT 31
23060: PUSH
23061: LD_INT 32
23063: PUSH
23064: LD_INT 36
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 101
23100: PUSH
23101: LD_INT 102
23103: PUSH
23104: LD_INT 103
23106: PUSH
23107: LD_INT 104
23109: PUSH
23110: LD_INT 105
23112: PUSH
23113: LD_INT 106
23115: PUSH
23116: LD_INT 107
23118: PUSH
23119: LD_INT 108
23121: PUSH
23122: LD_INT 109
23124: PUSH
23125: LD_INT 110
23127: PUSH
23128: LD_INT 111
23130: PUSH
23131: LD_INT 112
23133: PUSH
23134: LD_INT 114
23136: PUSH
23137: LD_INT 116
23139: PUSH
23140: LD_INT 117
23142: PUSH
23143: LD_INT 118
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: ST_TO_ADDR
23168: GO 25063
23170: LD_INT 11
23172: DOUBLE
23173: EQUAL
23174: IFTRUE 23178
23176: GO 23382
23178: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: LD_INT 4
23192: PUSH
23193: LD_INT 5
23195: PUSH
23196: LD_INT 6
23198: PUSH
23199: LD_INT 7
23201: PUSH
23202: LD_INT 8
23204: PUSH
23205: LD_INT 9
23207: PUSH
23208: LD_INT 10
23210: PUSH
23211: LD_INT 11
23213: PUSH
23214: LD_INT 12
23216: PUSH
23217: LD_INT 13
23219: PUSH
23220: LD_INT 14
23222: PUSH
23223: LD_INT 15
23225: PUSH
23226: LD_INT 16
23228: PUSH
23229: LD_INT 17
23231: PUSH
23232: LD_INT 18
23234: PUSH
23235: LD_INT 19
23237: PUSH
23238: LD_INT 20
23240: PUSH
23241: LD_INT 21
23243: PUSH
23244: LD_INT 22
23246: PUSH
23247: LD_INT 23
23249: PUSH
23250: LD_INT 24
23252: PUSH
23253: LD_INT 25
23255: PUSH
23256: LD_INT 26
23258: PUSH
23259: LD_INT 28
23261: PUSH
23262: LD_INT 30
23264: PUSH
23265: LD_INT 31
23267: PUSH
23268: LD_INT 32
23270: PUSH
23271: LD_INT 34
23273: PUSH
23274: LD_INT 36
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 101
23312: PUSH
23313: LD_INT 102
23315: PUSH
23316: LD_INT 103
23318: PUSH
23319: LD_INT 104
23321: PUSH
23322: LD_INT 105
23324: PUSH
23325: LD_INT 106
23327: PUSH
23328: LD_INT 107
23330: PUSH
23331: LD_INT 108
23333: PUSH
23334: LD_INT 109
23336: PUSH
23337: LD_INT 110
23339: PUSH
23340: LD_INT 111
23342: PUSH
23343: LD_INT 112
23345: PUSH
23346: LD_INT 114
23348: PUSH
23349: LD_INT 116
23351: PUSH
23352: LD_INT 117
23354: PUSH
23355: LD_INT 118
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: ST_TO_ADDR
23380: GO 25063
23382: LD_INT 12
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23610
23390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23391: LD_ADDR_VAR 0 2
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 3
23404: PUSH
23405: LD_INT 4
23407: PUSH
23408: LD_INT 5
23410: PUSH
23411: LD_INT 6
23413: PUSH
23414: LD_INT 7
23416: PUSH
23417: LD_INT 8
23419: PUSH
23420: LD_INT 9
23422: PUSH
23423: LD_INT 10
23425: PUSH
23426: LD_INT 11
23428: PUSH
23429: LD_INT 12
23431: PUSH
23432: LD_INT 13
23434: PUSH
23435: LD_INT 14
23437: PUSH
23438: LD_INT 15
23440: PUSH
23441: LD_INT 16
23443: PUSH
23444: LD_INT 17
23446: PUSH
23447: LD_INT 18
23449: PUSH
23450: LD_INT 19
23452: PUSH
23453: LD_INT 20
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: LD_INT 25
23470: PUSH
23471: LD_INT 26
23473: PUSH
23474: LD_INT 27
23476: PUSH
23477: LD_INT 28
23479: PUSH
23480: LD_INT 30
23482: PUSH
23483: LD_INT 31
23485: PUSH
23486: LD_INT 32
23488: PUSH
23489: LD_INT 33
23491: PUSH
23492: LD_INT 34
23494: PUSH
23495: LD_INT 36
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 101
23536: PUSH
23537: LD_INT 102
23539: PUSH
23540: LD_INT 103
23542: PUSH
23543: LD_INT 104
23545: PUSH
23546: LD_INT 105
23548: PUSH
23549: LD_INT 106
23551: PUSH
23552: LD_INT 107
23554: PUSH
23555: LD_INT 108
23557: PUSH
23558: LD_INT 109
23560: PUSH
23561: LD_INT 110
23563: PUSH
23564: LD_INT 111
23566: PUSH
23567: LD_INT 112
23569: PUSH
23570: LD_INT 113
23572: PUSH
23573: LD_INT 114
23575: PUSH
23576: LD_INT 116
23578: PUSH
23579: LD_INT 117
23581: PUSH
23582: LD_INT 118
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 25063
23610: LD_INT 13
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23826
23618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23619: LD_ADDR_VAR 0 2
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: LD_INT 3
23632: PUSH
23633: LD_INT 4
23635: PUSH
23636: LD_INT 5
23638: PUSH
23639: LD_INT 8
23641: PUSH
23642: LD_INT 9
23644: PUSH
23645: LD_INT 10
23647: PUSH
23648: LD_INT 11
23650: PUSH
23651: LD_INT 12
23653: PUSH
23654: LD_INT 14
23656: PUSH
23657: LD_INT 15
23659: PUSH
23660: LD_INT 16
23662: PUSH
23663: LD_INT 17
23665: PUSH
23666: LD_INT 18
23668: PUSH
23669: LD_INT 19
23671: PUSH
23672: LD_INT 20
23674: PUSH
23675: LD_INT 21
23677: PUSH
23678: LD_INT 22
23680: PUSH
23681: LD_INT 23
23683: PUSH
23684: LD_INT 24
23686: PUSH
23687: LD_INT 25
23689: PUSH
23690: LD_INT 26
23692: PUSH
23693: LD_INT 27
23695: PUSH
23696: LD_INT 28
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 31
23704: PUSH
23705: LD_INT 32
23707: PUSH
23708: LD_INT 33
23710: PUSH
23711: LD_INT 34
23713: PUSH
23714: LD_INT 36
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 101
23752: PUSH
23753: LD_INT 102
23755: PUSH
23756: LD_INT 103
23758: PUSH
23759: LD_INT 104
23761: PUSH
23762: LD_INT 105
23764: PUSH
23765: LD_INT 106
23767: PUSH
23768: LD_INT 107
23770: PUSH
23771: LD_INT 108
23773: PUSH
23774: LD_INT 109
23776: PUSH
23777: LD_INT 110
23779: PUSH
23780: LD_INT 111
23782: PUSH
23783: LD_INT 112
23785: PUSH
23786: LD_INT 113
23788: PUSH
23789: LD_INT 114
23791: PUSH
23792: LD_INT 116
23794: PUSH
23795: LD_INT 117
23797: PUSH
23798: LD_INT 118
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: ST_TO_ADDR
23824: GO 25063
23826: LD_INT 14
23828: DOUBLE
23829: EQUAL
23830: IFTRUE 23834
23832: GO 24058
23834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23835: LD_ADDR_VAR 0 2
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: LD_INT 4
23851: PUSH
23852: LD_INT 5
23854: PUSH
23855: LD_INT 6
23857: PUSH
23858: LD_INT 7
23860: PUSH
23861: LD_INT 8
23863: PUSH
23864: LD_INT 9
23866: PUSH
23867: LD_INT 10
23869: PUSH
23870: LD_INT 11
23872: PUSH
23873: LD_INT 12
23875: PUSH
23876: LD_INT 13
23878: PUSH
23879: LD_INT 14
23881: PUSH
23882: LD_INT 15
23884: PUSH
23885: LD_INT 16
23887: PUSH
23888: LD_INT 17
23890: PUSH
23891: LD_INT 18
23893: PUSH
23894: LD_INT 19
23896: PUSH
23897: LD_INT 20
23899: PUSH
23900: LD_INT 21
23902: PUSH
23903: LD_INT 22
23905: PUSH
23906: LD_INT 23
23908: PUSH
23909: LD_INT 24
23911: PUSH
23912: LD_INT 25
23914: PUSH
23915: LD_INT 26
23917: PUSH
23918: LD_INT 27
23920: PUSH
23921: LD_INT 28
23923: PUSH
23924: LD_INT 29
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 31
23932: PUSH
23933: LD_INT 32
23935: PUSH
23936: LD_INT 33
23938: PUSH
23939: LD_INT 34
23941: PUSH
23942: LD_INT 36
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 101
23984: PUSH
23985: LD_INT 102
23987: PUSH
23988: LD_INT 103
23990: PUSH
23991: LD_INT 104
23993: PUSH
23994: LD_INT 105
23996: PUSH
23997: LD_INT 106
23999: PUSH
24000: LD_INT 107
24002: PUSH
24003: LD_INT 108
24005: PUSH
24006: LD_INT 109
24008: PUSH
24009: LD_INT 110
24011: PUSH
24012: LD_INT 111
24014: PUSH
24015: LD_INT 112
24017: PUSH
24018: LD_INT 113
24020: PUSH
24021: LD_INT 114
24023: PUSH
24024: LD_INT 116
24026: PUSH
24027: LD_INT 117
24029: PUSH
24030: LD_INT 118
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: ST_TO_ADDR
24056: GO 25063
24058: LD_INT 15
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24290
24066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24067: LD_ADDR_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 3
24080: PUSH
24081: LD_INT 4
24083: PUSH
24084: LD_INT 5
24086: PUSH
24087: LD_INT 6
24089: PUSH
24090: LD_INT 7
24092: PUSH
24093: LD_INT 8
24095: PUSH
24096: LD_INT 9
24098: PUSH
24099: LD_INT 10
24101: PUSH
24102: LD_INT 11
24104: PUSH
24105: LD_INT 12
24107: PUSH
24108: LD_INT 13
24110: PUSH
24111: LD_INT 14
24113: PUSH
24114: LD_INT 15
24116: PUSH
24117: LD_INT 16
24119: PUSH
24120: LD_INT 17
24122: PUSH
24123: LD_INT 18
24125: PUSH
24126: LD_INT 19
24128: PUSH
24129: LD_INT 20
24131: PUSH
24132: LD_INT 21
24134: PUSH
24135: LD_INT 22
24137: PUSH
24138: LD_INT 23
24140: PUSH
24141: LD_INT 24
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 26
24149: PUSH
24150: LD_INT 27
24152: PUSH
24153: LD_INT 28
24155: PUSH
24156: LD_INT 29
24158: PUSH
24159: LD_INT 30
24161: PUSH
24162: LD_INT 31
24164: PUSH
24165: LD_INT 32
24167: PUSH
24168: LD_INT 33
24170: PUSH
24171: LD_INT 34
24173: PUSH
24174: LD_INT 36
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 101
24216: PUSH
24217: LD_INT 102
24219: PUSH
24220: LD_INT 103
24222: PUSH
24223: LD_INT 104
24225: PUSH
24226: LD_INT 105
24228: PUSH
24229: LD_INT 106
24231: PUSH
24232: LD_INT 107
24234: PUSH
24235: LD_INT 108
24237: PUSH
24238: LD_INT 109
24240: PUSH
24241: LD_INT 110
24243: PUSH
24244: LD_INT 111
24246: PUSH
24247: LD_INT 112
24249: PUSH
24250: LD_INT 113
24252: PUSH
24253: LD_INT 114
24255: PUSH
24256: LD_INT 116
24258: PUSH
24259: LD_INT 117
24261: PUSH
24262: LD_INT 118
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: ST_TO_ADDR
24288: GO 25063
24290: LD_INT 16
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24434
24298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24299: LD_ADDR_VAR 0 2
24303: PUSH
24304: LD_INT 2
24306: PUSH
24307: LD_INT 4
24309: PUSH
24310: LD_INT 5
24312: PUSH
24313: LD_INT 7
24315: PUSH
24316: LD_INT 11
24318: PUSH
24319: LD_INT 12
24321: PUSH
24322: LD_INT 15
24324: PUSH
24325: LD_INT 16
24327: PUSH
24328: LD_INT 20
24330: PUSH
24331: LD_INT 21
24333: PUSH
24334: LD_INT 22
24336: PUSH
24337: LD_INT 23
24339: PUSH
24340: LD_INT 25
24342: PUSH
24343: LD_INT 26
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 31
24351: PUSH
24352: LD_INT 32
24354: PUSH
24355: LD_INT 33
24357: PUSH
24358: LD_INT 34
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 101
24384: PUSH
24385: LD_INT 102
24387: PUSH
24388: LD_INT 103
24390: PUSH
24391: LD_INT 106
24393: PUSH
24394: LD_INT 108
24396: PUSH
24397: LD_INT 112
24399: PUSH
24400: LD_INT 113
24402: PUSH
24403: LD_INT 114
24405: PUSH
24406: LD_INT 116
24408: PUSH
24409: LD_INT 117
24411: PUSH
24412: LD_INT 118
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: ST_TO_ADDR
24432: GO 25063
24434: LD_INT 17
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24666
24442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24443: LD_ADDR_VAR 0 2
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 3
24456: PUSH
24457: LD_INT 4
24459: PUSH
24460: LD_INT 5
24462: PUSH
24463: LD_INT 6
24465: PUSH
24466: LD_INT 7
24468: PUSH
24469: LD_INT 8
24471: PUSH
24472: LD_INT 9
24474: PUSH
24475: LD_INT 10
24477: PUSH
24478: LD_INT 11
24480: PUSH
24481: LD_INT 12
24483: PUSH
24484: LD_INT 13
24486: PUSH
24487: LD_INT 14
24489: PUSH
24490: LD_INT 15
24492: PUSH
24493: LD_INT 16
24495: PUSH
24496: LD_INT 17
24498: PUSH
24499: LD_INT 18
24501: PUSH
24502: LD_INT 19
24504: PUSH
24505: LD_INT 20
24507: PUSH
24508: LD_INT 21
24510: PUSH
24511: LD_INT 22
24513: PUSH
24514: LD_INT 23
24516: PUSH
24517: LD_INT 24
24519: PUSH
24520: LD_INT 25
24522: PUSH
24523: LD_INT 26
24525: PUSH
24526: LD_INT 27
24528: PUSH
24529: LD_INT 28
24531: PUSH
24532: LD_INT 29
24534: PUSH
24535: LD_INT 30
24537: PUSH
24538: LD_INT 31
24540: PUSH
24541: LD_INT 32
24543: PUSH
24544: LD_INT 33
24546: PUSH
24547: LD_INT 34
24549: PUSH
24550: LD_INT 36
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 101
24592: PUSH
24593: LD_INT 102
24595: PUSH
24596: LD_INT 103
24598: PUSH
24599: LD_INT 104
24601: PUSH
24602: LD_INT 105
24604: PUSH
24605: LD_INT 106
24607: PUSH
24608: LD_INT 107
24610: PUSH
24611: LD_INT 108
24613: PUSH
24614: LD_INT 109
24616: PUSH
24617: LD_INT 110
24619: PUSH
24620: LD_INT 111
24622: PUSH
24623: LD_INT 112
24625: PUSH
24626: LD_INT 113
24628: PUSH
24629: LD_INT 114
24631: PUSH
24632: LD_INT 116
24634: PUSH
24635: LD_INT 117
24637: PUSH
24638: LD_INT 118
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: ST_TO_ADDR
24664: GO 25063
24666: LD_INT 18
24668: DOUBLE
24669: EQUAL
24670: IFTRUE 24674
24672: GO 24822
24674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24675: LD_ADDR_VAR 0 2
24679: PUSH
24680: LD_INT 2
24682: PUSH
24683: LD_INT 4
24685: PUSH
24686: LD_INT 5
24688: PUSH
24689: LD_INT 7
24691: PUSH
24692: LD_INT 11
24694: PUSH
24695: LD_INT 12
24697: PUSH
24698: LD_INT 15
24700: PUSH
24701: LD_INT 16
24703: PUSH
24704: LD_INT 20
24706: PUSH
24707: LD_INT 21
24709: PUSH
24710: LD_INT 22
24712: PUSH
24713: LD_INT 23
24715: PUSH
24716: LD_INT 25
24718: PUSH
24719: LD_INT 26
24721: PUSH
24722: LD_INT 30
24724: PUSH
24725: LD_INT 31
24727: PUSH
24728: LD_INT 32
24730: PUSH
24731: LD_INT 33
24733: PUSH
24734: LD_INT 34
24736: PUSH
24737: LD_INT 35
24739: PUSH
24740: LD_INT 36
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 101
24768: PUSH
24769: LD_INT 102
24771: PUSH
24772: LD_INT 103
24774: PUSH
24775: LD_INT 106
24777: PUSH
24778: LD_INT 108
24780: PUSH
24781: LD_INT 112
24783: PUSH
24784: LD_INT 113
24786: PUSH
24787: LD_INT 114
24789: PUSH
24790: LD_INT 115
24792: PUSH
24793: LD_INT 116
24795: PUSH
24796: LD_INT 117
24798: PUSH
24799: LD_INT 118
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 25063
24822: LD_INT 19
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 25062
24830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24831: LD_ADDR_VAR 0 2
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: LD_INT 4
24847: PUSH
24848: LD_INT 5
24850: PUSH
24851: LD_INT 6
24853: PUSH
24854: LD_INT 7
24856: PUSH
24857: LD_INT 8
24859: PUSH
24860: LD_INT 9
24862: PUSH
24863: LD_INT 10
24865: PUSH
24866: LD_INT 11
24868: PUSH
24869: LD_INT 12
24871: PUSH
24872: LD_INT 13
24874: PUSH
24875: LD_INT 14
24877: PUSH
24878: LD_INT 15
24880: PUSH
24881: LD_INT 16
24883: PUSH
24884: LD_INT 17
24886: PUSH
24887: LD_INT 18
24889: PUSH
24890: LD_INT 19
24892: PUSH
24893: LD_INT 20
24895: PUSH
24896: LD_INT 21
24898: PUSH
24899: LD_INT 22
24901: PUSH
24902: LD_INT 23
24904: PUSH
24905: LD_INT 24
24907: PUSH
24908: LD_INT 25
24910: PUSH
24911: LD_INT 26
24913: PUSH
24914: LD_INT 27
24916: PUSH
24917: LD_INT 28
24919: PUSH
24920: LD_INT 29
24922: PUSH
24923: LD_INT 30
24925: PUSH
24926: LD_INT 31
24928: PUSH
24929: LD_INT 32
24931: PUSH
24932: LD_INT 33
24934: PUSH
24935: LD_INT 34
24937: PUSH
24938: LD_INT 35
24940: PUSH
24941: LD_INT 36
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 101
24984: PUSH
24985: LD_INT 102
24987: PUSH
24988: LD_INT 103
24990: PUSH
24991: LD_INT 104
24993: PUSH
24994: LD_INT 105
24996: PUSH
24997: LD_INT 106
24999: PUSH
25000: LD_INT 107
25002: PUSH
25003: LD_INT 108
25005: PUSH
25006: LD_INT 109
25008: PUSH
25009: LD_INT 110
25011: PUSH
25012: LD_INT 111
25014: PUSH
25015: LD_INT 112
25017: PUSH
25018: LD_INT 113
25020: PUSH
25021: LD_INT 114
25023: PUSH
25024: LD_INT 115
25026: PUSH
25027: LD_INT 116
25029: PUSH
25030: LD_INT 117
25032: PUSH
25033: LD_INT 118
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: ST_TO_ADDR
25060: GO 25063
25062: POP
// end else
25063: GO 25294
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25065: LD_ADDR_VAR 0 2
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: LD_INT 4
25081: PUSH
25082: LD_INT 5
25084: PUSH
25085: LD_INT 6
25087: PUSH
25088: LD_INT 7
25090: PUSH
25091: LD_INT 8
25093: PUSH
25094: LD_INT 9
25096: PUSH
25097: LD_INT 10
25099: PUSH
25100: LD_INT 11
25102: PUSH
25103: LD_INT 12
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: LD_INT 14
25111: PUSH
25112: LD_INT 15
25114: PUSH
25115: LD_INT 16
25117: PUSH
25118: LD_INT 17
25120: PUSH
25121: LD_INT 18
25123: PUSH
25124: LD_INT 19
25126: PUSH
25127: LD_INT 20
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 22
25135: PUSH
25136: LD_INT 23
25138: PUSH
25139: LD_INT 24
25141: PUSH
25142: LD_INT 25
25144: PUSH
25145: LD_INT 26
25147: PUSH
25148: LD_INT 27
25150: PUSH
25151: LD_INT 28
25153: PUSH
25154: LD_INT 29
25156: PUSH
25157: LD_INT 30
25159: PUSH
25160: LD_INT 31
25162: PUSH
25163: LD_INT 32
25165: PUSH
25166: LD_INT 33
25168: PUSH
25169: LD_INT 34
25171: PUSH
25172: LD_INT 35
25174: PUSH
25175: LD_INT 36
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 101
25218: PUSH
25219: LD_INT 102
25221: PUSH
25222: LD_INT 103
25224: PUSH
25225: LD_INT 104
25227: PUSH
25228: LD_INT 105
25230: PUSH
25231: LD_INT 106
25233: PUSH
25234: LD_INT 107
25236: PUSH
25237: LD_INT 108
25239: PUSH
25240: LD_INT 109
25242: PUSH
25243: LD_INT 110
25245: PUSH
25246: LD_INT 111
25248: PUSH
25249: LD_INT 112
25251: PUSH
25252: LD_INT 113
25254: PUSH
25255: LD_INT 114
25257: PUSH
25258: LD_INT 115
25260: PUSH
25261: LD_INT 116
25263: PUSH
25264: LD_INT 117
25266: PUSH
25267: LD_INT 118
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: ST_TO_ADDR
// if result then
25294: LD_VAR 0 2
25298: IFFALSE 26084
// begin normal :=  ;
25300: LD_ADDR_VAR 0 5
25304: PUSH
25305: LD_STRING 
25307: ST_TO_ADDR
// hardcore :=  ;
25308: LD_ADDR_VAR 0 6
25312: PUSH
25313: LD_STRING 
25315: ST_TO_ADDR
// active :=  ;
25316: LD_ADDR_VAR 0 7
25320: PUSH
25321: LD_STRING 
25323: ST_TO_ADDR
// for i = 1 to normalCounter do
25324: LD_ADDR_VAR 0 8
25328: PUSH
25329: DOUBLE
25330: LD_INT 1
25332: DEC
25333: ST_TO_ADDR
25334: LD_EXP 52
25338: PUSH
25339: FOR_TO
25340: IFFALSE 25441
// begin tmp := 0 ;
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_STRING 0
25349: ST_TO_ADDR
// if result [ 1 ] then
25350: LD_VAR 0 2
25354: PUSH
25355: LD_INT 1
25357: ARRAY
25358: IFFALSE 25423
// if result [ 1 ] [ 1 ] = i then
25360: LD_VAR 0 2
25364: PUSH
25365: LD_INT 1
25367: ARRAY
25368: PUSH
25369: LD_INT 1
25371: ARRAY
25372: PUSH
25373: LD_VAR 0 8
25377: EQUAL
25378: IFFALSE 25423
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25380: LD_ADDR_VAR 0 2
25384: PUSH
25385: LD_VAR 0 2
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: LD_VAR 0 2
25397: PUSH
25398: LD_INT 1
25400: ARRAY
25401: PPUSH
25402: LD_INT 1
25404: PPUSH
25405: CALL_OW 3
25409: PPUSH
25410: CALL_OW 1
25414: ST_TO_ADDR
// tmp := 1 ;
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_STRING 1
25422: ST_TO_ADDR
// end ; normal := normal & tmp ;
25423: LD_ADDR_VAR 0 5
25427: PUSH
25428: LD_VAR 0 5
25432: PUSH
25433: LD_VAR 0 3
25437: STR
25438: ST_TO_ADDR
// end ;
25439: GO 25339
25441: POP
25442: POP
// for i = 1 to hardcoreCounter do
25443: LD_ADDR_VAR 0 8
25447: PUSH
25448: DOUBLE
25449: LD_INT 1
25451: DEC
25452: ST_TO_ADDR
25453: LD_EXP 53
25457: PUSH
25458: FOR_TO
25459: IFFALSE 25564
// begin tmp := 0 ;
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_STRING 0
25468: ST_TO_ADDR
// if result [ 2 ] then
25469: LD_VAR 0 2
25473: PUSH
25474: LD_INT 2
25476: ARRAY
25477: IFFALSE 25546
// if result [ 2 ] [ 1 ] = 100 + i then
25479: LD_VAR 0 2
25483: PUSH
25484: LD_INT 2
25486: ARRAY
25487: PUSH
25488: LD_INT 1
25490: ARRAY
25491: PUSH
25492: LD_INT 100
25494: PUSH
25495: LD_VAR 0 8
25499: PLUS
25500: EQUAL
25501: IFFALSE 25546
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25503: LD_ADDR_VAR 0 2
25507: PUSH
25508: LD_VAR 0 2
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: LD_VAR 0 2
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: PPUSH
25525: LD_INT 1
25527: PPUSH
25528: CALL_OW 3
25532: PPUSH
25533: CALL_OW 1
25537: ST_TO_ADDR
// tmp := 1 ;
25538: LD_ADDR_VAR 0 3
25542: PUSH
25543: LD_STRING 1
25545: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25546: LD_ADDR_VAR 0 6
25550: PUSH
25551: LD_VAR 0 6
25555: PUSH
25556: LD_VAR 0 3
25560: STR
25561: ST_TO_ADDR
// end ;
25562: GO 25458
25564: POP
25565: POP
// if isGameLoad then
25566: LD_VAR 0 1
25570: IFFALSE 26045
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25572: LD_ADDR_VAR 0 4
25576: PUSH
25577: LD_EXP 56
25581: PUSH
25582: LD_EXP 55
25586: PUSH
25587: LD_EXP 57
25591: PUSH
25592: LD_EXP 54
25596: PUSH
25597: LD_EXP 58
25601: PUSH
25602: LD_EXP 59
25606: PUSH
25607: LD_EXP 60
25611: PUSH
25612: LD_EXP 61
25616: PUSH
25617: LD_EXP 62
25621: PUSH
25622: LD_EXP 63
25626: PUSH
25627: LD_EXP 64
25631: PUSH
25632: LD_EXP 65
25636: PUSH
25637: LD_EXP 66
25641: PUSH
25642: LD_EXP 67
25646: PUSH
25647: LD_EXP 75
25651: PUSH
25652: LD_EXP 76
25656: PUSH
25657: LD_EXP 77
25661: PUSH
25662: LD_EXP 78
25666: PUSH
25667: LD_EXP 80
25671: PUSH
25672: LD_EXP 81
25676: PUSH
25677: LD_EXP 82
25681: PUSH
25682: LD_EXP 85
25686: PUSH
25687: LD_EXP 87
25691: PUSH
25692: LD_EXP 88
25696: PUSH
25697: LD_EXP 89
25701: PUSH
25702: LD_EXP 91
25706: PUSH
25707: LD_EXP 92
25711: PUSH
25712: LD_EXP 95
25716: PUSH
25717: LD_EXP 96
25721: PUSH
25722: LD_EXP 97
25726: PUSH
25727: LD_EXP 98
25731: PUSH
25732: LD_EXP 99
25736: PUSH
25737: LD_EXP 100
25741: PUSH
25742: LD_EXP 101
25746: PUSH
25747: LD_EXP 102
25751: PUSH
25752: LD_EXP 103
25756: PUSH
25757: LD_EXP 68
25761: PUSH
25762: LD_EXP 69
25766: PUSH
25767: LD_EXP 72
25771: PUSH
25772: LD_EXP 73
25776: PUSH
25777: LD_EXP 74
25781: PUSH
25782: LD_EXP 70
25786: PUSH
25787: LD_EXP 71
25791: PUSH
25792: LD_EXP 79
25796: PUSH
25797: LD_EXP 83
25801: PUSH
25802: LD_EXP 84
25806: PUSH
25807: LD_EXP 86
25811: PUSH
25812: LD_EXP 90
25816: PUSH
25817: LD_EXP 93
25821: PUSH
25822: LD_EXP 94
25826: PUSH
25827: LD_EXP 104
25831: PUSH
25832: LD_EXP 105
25836: PUSH
25837: LD_EXP 106
25841: PUSH
25842: LD_EXP 107
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: ST_TO_ADDR
// tmp :=  ;
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_STRING 
25910: ST_TO_ADDR
// for i = 1 to normalCounter do
25911: LD_ADDR_VAR 0 8
25915: PUSH
25916: DOUBLE
25917: LD_INT 1
25919: DEC
25920: ST_TO_ADDR
25921: LD_EXP 52
25925: PUSH
25926: FOR_TO
25927: IFFALSE 25963
// begin if flags [ i ] then
25929: LD_VAR 0 4
25933: PUSH
25934: LD_VAR 0 8
25938: ARRAY
25939: IFFALSE 25961
// tmp := tmp & i & ; ;
25941: LD_ADDR_VAR 0 3
25945: PUSH
25946: LD_VAR 0 3
25950: PUSH
25951: LD_VAR 0 8
25955: STR
25956: PUSH
25957: LD_STRING ;
25959: STR
25960: ST_TO_ADDR
// end ;
25961: GO 25926
25963: POP
25964: POP
// for i = 1 to hardcoreCounter do
25965: LD_ADDR_VAR 0 8
25969: PUSH
25970: DOUBLE
25971: LD_INT 1
25973: DEC
25974: ST_TO_ADDR
25975: LD_EXP 53
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26027
// begin if flags [ normalCounter + i ] then
25983: LD_VAR 0 4
25987: PUSH
25988: LD_EXP 52
25992: PUSH
25993: LD_VAR 0 8
25997: PLUS
25998: ARRAY
25999: IFFALSE 26025
// tmp := tmp & ( 100 + i ) & ; ;
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_VAR 0 3
26010: PUSH
26011: LD_INT 100
26013: PUSH
26014: LD_VAR 0 8
26018: PLUS
26019: STR
26020: PUSH
26021: LD_STRING ;
26023: STR
26024: ST_TO_ADDR
// end ;
26025: GO 25980
26027: POP
26028: POP
// if tmp then
26029: LD_VAR 0 3
26033: IFFALSE 26045
// active := tmp ;
26035: LD_ADDR_VAR 0 7
26039: PUSH
26040: LD_VAR 0 3
26044: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26045: LD_STRING getStreamItemsFromMission("
26047: PUSH
26048: LD_VAR 0 5
26052: STR
26053: PUSH
26054: LD_STRING ","
26056: STR
26057: PUSH
26058: LD_VAR 0 6
26062: STR
26063: PUSH
26064: LD_STRING ","
26066: STR
26067: PUSH
26068: LD_VAR 0 7
26072: STR
26073: PUSH
26074: LD_STRING ")
26076: STR
26077: PPUSH
26078: CALL_OW 559
// end else
26082: GO 26091
// ToLua ( getStreamItemsFromMission("","","") ) ;
26084: LD_STRING getStreamItemsFromMission("","","")
26086: PPUSH
26087: CALL_OW 559
// end ;
26091: LD_VAR 0 2
26095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26096: LD_EXP 51
26100: PUSH
26101: LD_EXP 56
26105: AND
26106: IFFALSE 26230
26108: GO 26110
26110: DISABLE
26111: LD_INT 0
26113: PPUSH
26114: PPUSH
// begin enable ;
26115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26116: LD_ADDR_VAR 0 2
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_OWVAR 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: LD_INT 34
26138: PUSH
26139: LD_INT 7
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 34
26148: PUSH
26149: LD_INT 45
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 34
26158: PUSH
26159: LD_INT 28
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 34
26168: PUSH
26169: LD_INT 47
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL_OW 69
26191: ST_TO_ADDR
// if not tmp then
26192: LD_VAR 0 2
26196: NOT
26197: IFFALSE 26201
// exit ;
26199: GO 26230
// for i in tmp do
26201: LD_ADDR_VAR 0 1
26205: PUSH
26206: LD_VAR 0 2
26210: PUSH
26211: FOR_IN
26212: IFFALSE 26228
// begin SetLives ( i , 0 ) ;
26214: LD_VAR 0 1
26218: PPUSH
26219: LD_INT 0
26221: PPUSH
26222: CALL_OW 234
// end ;
26226: GO 26211
26228: POP
26229: POP
// end ;
26230: PPOPN 2
26232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26233: LD_EXP 51
26237: PUSH
26238: LD_EXP 57
26242: AND
26243: IFFALSE 26327
26245: GO 26247
26247: DISABLE
26248: LD_INT 0
26250: PPUSH
26251: PPUSH
// begin enable ;
26252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26253: LD_ADDR_VAR 0 2
26257: PUSH
26258: LD_INT 22
26260: PUSH
26261: LD_OWVAR 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 32
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PPUSH
26284: CALL_OW 69
26288: ST_TO_ADDR
// if not tmp then
26289: LD_VAR 0 2
26293: NOT
26294: IFFALSE 26298
// exit ;
26296: GO 26327
// for i in tmp do
26298: LD_ADDR_VAR 0 1
26302: PUSH
26303: LD_VAR 0 2
26307: PUSH
26308: FOR_IN
26309: IFFALSE 26325
// begin SetLives ( i , 0 ) ;
26311: LD_VAR 0 1
26315: PPUSH
26316: LD_INT 0
26318: PPUSH
26319: CALL_OW 234
// end ;
26323: GO 26308
26325: POP
26326: POP
// end ;
26327: PPOPN 2
26329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26330: LD_EXP 51
26334: PUSH
26335: LD_EXP 54
26339: AND
26340: IFFALSE 26433
26342: GO 26344
26344: DISABLE
26345: LD_INT 0
26347: PPUSH
// begin enable ;
26348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26349: LD_ADDR_VAR 0 1
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: LD_INT 25
26371: PUSH
26372: LD_INT 5
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 25
26381: PUSH
26382: LD_INT 9
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 25
26391: PUSH
26392: LD_INT 8
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: PUSH
26414: FOR_IN
26415: IFFALSE 26431
// begin SetClass ( i , 1 ) ;
26417: LD_VAR 0 1
26421: PPUSH
26422: LD_INT 1
26424: PPUSH
26425: CALL_OW 336
// end ;
26429: GO 26414
26431: POP
26432: POP
// end ;
26433: PPOPN 1
26435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26436: LD_EXP 51
26440: PUSH
26441: LD_EXP 55
26445: AND
26446: PUSH
26447: LD_OWVAR 65
26451: PUSH
26452: LD_INT 7
26454: LESS
26455: AND
26456: IFFALSE 26470
26458: GO 26460
26460: DISABLE
// begin enable ;
26461: ENABLE
// game_speed := 7 ;
26462: LD_ADDR_OWVAR 65
26466: PUSH
26467: LD_INT 7
26469: ST_TO_ADDR
// end ;
26470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26471: LD_EXP 51
26475: PUSH
26476: LD_EXP 58
26480: AND
26481: IFFALSE 26683
26483: GO 26485
26485: DISABLE
26486: LD_INT 0
26488: PPUSH
26489: PPUSH
26490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26491: LD_ADDR_VAR 0 3
26495: PUSH
26496: LD_INT 81
26498: PUSH
26499: LD_OWVAR 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 21
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PPUSH
26522: CALL_OW 69
26526: ST_TO_ADDR
// if not tmp then
26527: LD_VAR 0 3
26531: NOT
26532: IFFALSE 26536
// exit ;
26534: GO 26683
// if tmp > 5 then
26536: LD_VAR 0 3
26540: PUSH
26541: LD_INT 5
26543: GREATER
26544: IFFALSE 26556
// k := 5 else
26546: LD_ADDR_VAR 0 2
26550: PUSH
26551: LD_INT 5
26553: ST_TO_ADDR
26554: GO 26566
// k := tmp ;
26556: LD_ADDR_VAR 0 2
26560: PUSH
26561: LD_VAR 0 3
26565: ST_TO_ADDR
// for i := 1 to k do
26566: LD_ADDR_VAR 0 1
26570: PUSH
26571: DOUBLE
26572: LD_INT 1
26574: DEC
26575: ST_TO_ADDR
26576: LD_VAR 0 2
26580: PUSH
26581: FOR_TO
26582: IFFALSE 26681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26584: LD_VAR 0 3
26588: PUSH
26589: LD_VAR 0 1
26593: ARRAY
26594: PPUSH
26595: LD_VAR 0 1
26599: PUSH
26600: LD_INT 4
26602: MOD
26603: PUSH
26604: LD_INT 1
26606: PLUS
26607: PPUSH
26608: CALL_OW 259
26612: PUSH
26613: LD_INT 10
26615: LESS
26616: IFFALSE 26679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26618: LD_VAR 0 3
26622: PUSH
26623: LD_VAR 0 1
26627: ARRAY
26628: PPUSH
26629: LD_VAR 0 1
26633: PUSH
26634: LD_INT 4
26636: MOD
26637: PUSH
26638: LD_INT 1
26640: PLUS
26641: PPUSH
26642: LD_VAR 0 3
26646: PUSH
26647: LD_VAR 0 1
26651: ARRAY
26652: PPUSH
26653: LD_VAR 0 1
26657: PUSH
26658: LD_INT 4
26660: MOD
26661: PUSH
26662: LD_INT 1
26664: PLUS
26665: PPUSH
26666: CALL_OW 259
26670: PUSH
26671: LD_INT 1
26673: PLUS
26674: PPUSH
26675: CALL_OW 237
26679: GO 26581
26681: POP
26682: POP
// end ;
26683: PPOPN 3
26685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26686: LD_EXP 51
26690: PUSH
26691: LD_EXP 59
26695: AND
26696: IFFALSE 26716
26698: GO 26700
26700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26701: LD_INT 4
26703: PPUSH
26704: LD_OWVAR 2
26708: PPUSH
26709: LD_INT 0
26711: PPUSH
26712: CALL_OW 324
26716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26717: LD_EXP 51
26721: PUSH
26722: LD_EXP 88
26726: AND
26727: IFFALSE 26747
26729: GO 26731
26731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26732: LD_INT 19
26734: PPUSH
26735: LD_OWVAR 2
26739: PPUSH
26740: LD_INT 0
26742: PPUSH
26743: CALL_OW 324
26747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26748: LD_EXP 51
26752: PUSH
26753: LD_EXP 60
26757: AND
26758: IFFALSE 26860
26760: GO 26762
26762: DISABLE
26763: LD_INT 0
26765: PPUSH
26766: PPUSH
// begin enable ;
26767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26768: LD_ADDR_VAR 0 2
26772: PUSH
26773: LD_INT 22
26775: PUSH
26776: LD_OWVAR 2
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 34
26790: PUSH
26791: LD_INT 11
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 34
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: ST_TO_ADDR
// if not tmp then
26822: LD_VAR 0 2
26826: NOT
26827: IFFALSE 26831
// exit ;
26829: GO 26860
// for i in tmp do
26831: LD_ADDR_VAR 0 1
26835: PUSH
26836: LD_VAR 0 2
26840: PUSH
26841: FOR_IN
26842: IFFALSE 26858
// begin SetLives ( i , 0 ) ;
26844: LD_VAR 0 1
26848: PPUSH
26849: LD_INT 0
26851: PPUSH
26852: CALL_OW 234
// end ;
26856: GO 26841
26858: POP
26859: POP
// end ;
26860: PPOPN 2
26862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26863: LD_EXP 51
26867: PUSH
26868: LD_EXP 61
26872: AND
26873: IFFALSE 26893
26875: GO 26877
26877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26878: LD_INT 32
26880: PPUSH
26881: LD_OWVAR 2
26885: PPUSH
26886: LD_INT 0
26888: PPUSH
26889: CALL_OW 324
26893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26894: LD_EXP 51
26898: PUSH
26899: LD_EXP 62
26903: AND
26904: IFFALSE 27085
26906: GO 26908
26908: DISABLE
26909: LD_INT 0
26911: PPUSH
26912: PPUSH
26913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: LD_INT 22
26921: PUSH
26922: LD_OWVAR 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 33
26933: PUSH
26934: LD_INT 3
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PPUSH
26945: CALL_OW 69
26949: ST_TO_ADDR
// if not tmp then
26950: LD_VAR 0 2
26954: NOT
26955: IFFALSE 26959
// exit ;
26957: GO 27085
// side := 0 ;
26959: LD_ADDR_VAR 0 3
26963: PUSH
26964: LD_INT 0
26966: ST_TO_ADDR
// for i := 1 to 8 do
26967: LD_ADDR_VAR 0 1
26971: PUSH
26972: DOUBLE
26973: LD_INT 1
26975: DEC
26976: ST_TO_ADDR
26977: LD_INT 8
26979: PUSH
26980: FOR_TO
26981: IFFALSE 27029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26983: LD_OWVAR 2
26987: PUSH
26988: LD_VAR 0 1
26992: NONEQUAL
26993: PUSH
26994: LD_OWVAR 2
26998: PPUSH
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 81
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: AND
27013: IFFALSE 27027
// begin side := i ;
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_VAR 0 1
27024: ST_TO_ADDR
// break ;
27025: GO 27029
// end ;
27027: GO 26980
27029: POP
27030: POP
// if not side then
27031: LD_VAR 0 3
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27085
// for i := 1 to tmp do
27040: LD_ADDR_VAR 0 1
27044: PUSH
27045: DOUBLE
27046: LD_INT 1
27048: DEC
27049: ST_TO_ADDR
27050: LD_VAR 0 2
27054: PUSH
27055: FOR_TO
27056: IFFALSE 27083
// if Prob ( 60 ) then
27058: LD_INT 60
27060: PPUSH
27061: CALL_OW 13
27065: IFFALSE 27081
// SetSide ( i , side ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_VAR 0 3
27076: PPUSH
27077: CALL_OW 235
27081: GO 27055
27083: POP
27084: POP
// end ;
27085: PPOPN 3
27087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27088: LD_EXP 51
27092: PUSH
27093: LD_EXP 64
27097: AND
27098: IFFALSE 27217
27100: GO 27102
27102: DISABLE
27103: LD_INT 0
27105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27106: LD_ADDR_VAR 0 1
27110: PUSH
27111: LD_INT 22
27113: PUSH
27114: LD_OWVAR 2
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 21
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: LD_INT 23
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: PPUSH
27155: CALL_OW 69
27159: PUSH
27160: FOR_IN
27161: IFFALSE 27215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 257
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: LD_INT 3
27181: PUSH
27182: LD_INT 4
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: IN
27191: IFFALSE 27213
// SetClass ( un , rand ( 1 , 4 ) ) ;
27193: LD_VAR 0 1
27197: PPUSH
27198: LD_INT 1
27200: PPUSH
27201: LD_INT 4
27203: PPUSH
27204: CALL_OW 12
27208: PPUSH
27209: CALL_OW 336
27213: GO 27160
27215: POP
27216: POP
// end ;
27217: PPOPN 1
27219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27220: LD_EXP 51
27224: PUSH
27225: LD_EXP 63
27229: AND
27230: IFFALSE 27309
27232: GO 27234
27234: DISABLE
27235: LD_INT 0
27237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27238: LD_ADDR_VAR 0 1
27242: PUSH
27243: LD_INT 22
27245: PUSH
27246: LD_OWVAR 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 21
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: ST_TO_ADDR
// if not tmp then
27274: LD_VAR 0 1
27278: NOT
27279: IFFALSE 27283
// exit ;
27281: GO 27309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27283: LD_VAR 0 1
27287: PUSH
27288: LD_INT 1
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 12
27300: ARRAY
27301: PPUSH
27302: LD_INT 100
27304: PPUSH
27305: CALL_OW 234
// end ;
27309: PPOPN 1
27311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27312: LD_EXP 51
27316: PUSH
27317: LD_EXP 65
27321: AND
27322: IFFALSE 27420
27324: GO 27326
27326: DISABLE
27327: LD_INT 0
27329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27330: LD_ADDR_VAR 0 1
27334: PUSH
27335: LD_INT 22
27337: PUSH
27338: LD_OWVAR 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 21
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PPUSH
27361: CALL_OW 69
27365: ST_TO_ADDR
// if not tmp then
27366: LD_VAR 0 1
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27375: LD_VAR 0 1
27379: PUSH
27380: LD_INT 1
27382: PPUSH
27383: LD_VAR 0 1
27387: PPUSH
27388: CALL_OW 12
27392: ARRAY
27393: PPUSH
27394: LD_INT 1
27396: PPUSH
27397: LD_INT 4
27399: PPUSH
27400: CALL_OW 12
27404: PPUSH
27405: LD_INT 3000
27407: PPUSH
27408: LD_INT 9000
27410: PPUSH
27411: CALL_OW 12
27415: PPUSH
27416: CALL_OW 492
// end ;
27420: PPOPN 1
27422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27423: LD_EXP 51
27427: PUSH
27428: LD_EXP 66
27432: AND
27433: IFFALSE 27453
27435: GO 27437
27437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27438: LD_INT 1
27440: PPUSH
27441: LD_OWVAR 2
27445: PPUSH
27446: LD_INT 0
27448: PPUSH
27449: CALL_OW 324
27453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27454: LD_EXP 51
27458: PUSH
27459: LD_EXP 67
27463: AND
27464: IFFALSE 27547
27466: GO 27468
27468: DISABLE
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27473: LD_ADDR_VAR 0 2
27477: PUSH
27478: LD_INT 22
27480: PUSH
27481: LD_OWVAR 2
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 21
27492: PUSH
27493: LD_INT 3
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PPUSH
27504: CALL_OW 69
27508: ST_TO_ADDR
// if not tmp then
27509: LD_VAR 0 2
27513: NOT
27514: IFFALSE 27518
// exit ;
27516: GO 27547
// for i in tmp do
27518: LD_ADDR_VAR 0 1
27522: PUSH
27523: LD_VAR 0 2
27527: PUSH
27528: FOR_IN
27529: IFFALSE 27545
// SetBLevel ( i , 10 ) ;
27531: LD_VAR 0 1
27535: PPUSH
27536: LD_INT 10
27538: PPUSH
27539: CALL_OW 241
27543: GO 27528
27545: POP
27546: POP
// end ;
27547: PPOPN 2
27549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27550: LD_EXP 51
27554: PUSH
27555: LD_EXP 68
27559: AND
27560: IFFALSE 27671
27562: GO 27564
27564: DISABLE
27565: LD_INT 0
27567: PPUSH
27568: PPUSH
27569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27570: LD_ADDR_VAR 0 3
27574: PUSH
27575: LD_INT 22
27577: PUSH
27578: LD_OWVAR 2
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 25
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: ST_TO_ADDR
// if not tmp then
27606: LD_VAR 0 3
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 27671
// un := tmp [ rand ( 1 , tmp ) ] ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: LD_VAR 0 3
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_VAR 0 3
27632: PPUSH
27633: CALL_OW 12
27637: ARRAY
27638: ST_TO_ADDR
// if Crawls ( un ) then
27639: LD_VAR 0 2
27643: PPUSH
27644: CALL_OW 318
27648: IFFALSE 27659
// ComWalk ( un ) ;
27650: LD_VAR 0 2
27654: PPUSH
27655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27659: LD_VAR 0 2
27663: PPUSH
27664: LD_INT 5
27666: PPUSH
27667: CALL_OW 336
// end ;
27671: PPOPN 3
27673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27674: LD_EXP 51
27678: PUSH
27679: LD_EXP 69
27683: AND
27684: PUSH
27685: LD_OWVAR 67
27689: PUSH
27690: LD_INT 4
27692: LESS
27693: AND
27694: IFFALSE 27713
27696: GO 27698
27698: DISABLE
// begin Difficulty := Difficulty + 1 ;
27699: LD_ADDR_OWVAR 67
27703: PUSH
27704: LD_OWVAR 67
27708: PUSH
27709: LD_INT 1
27711: PLUS
27712: ST_TO_ADDR
// end ;
27713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27714: LD_EXP 51
27718: PUSH
27719: LD_EXP 70
27723: AND
27724: IFFALSE 27827
27726: GO 27728
27728: DISABLE
27729: LD_INT 0
27731: PPUSH
// begin for i := 1 to 5 do
27732: LD_ADDR_VAR 0 1
27736: PUSH
27737: DOUBLE
27738: LD_INT 1
27740: DEC
27741: ST_TO_ADDR
27742: LD_INT 5
27744: PUSH
27745: FOR_TO
27746: IFFALSE 27825
// begin uc_nation := nation_nature ;
27748: LD_ADDR_OWVAR 21
27752: PUSH
27753: LD_INT 0
27755: ST_TO_ADDR
// uc_side := 0 ;
27756: LD_ADDR_OWVAR 20
27760: PUSH
27761: LD_INT 0
27763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27764: LD_ADDR_OWVAR 29
27768: PUSH
27769: LD_INT 12
27771: PUSH
27772: LD_INT 12
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: ST_TO_ADDR
// hc_agressivity := 20 ;
27779: LD_ADDR_OWVAR 35
27783: PUSH
27784: LD_INT 20
27786: ST_TO_ADDR
// hc_class := class_tiger ;
27787: LD_ADDR_OWVAR 28
27791: PUSH
27792: LD_INT 14
27794: ST_TO_ADDR
// hc_gallery :=  ;
27795: LD_ADDR_OWVAR 33
27799: PUSH
27800: LD_STRING 
27802: ST_TO_ADDR
// hc_name :=  ;
27803: LD_ADDR_OWVAR 26
27807: PUSH
27808: LD_STRING 
27810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27811: CALL_OW 44
27815: PPUSH
27816: LD_INT 0
27818: PPUSH
27819: CALL_OW 51
// end ;
27823: GO 27745
27825: POP
27826: POP
// end ;
27827: PPOPN 1
27829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27830: LD_EXP 51
27834: PUSH
27835: LD_EXP 71
27839: AND
27840: IFFALSE 27849
27842: GO 27844
27844: DISABLE
// StreamSibBomb ;
27845: CALL 27850 0 0
27849: END
// export function StreamSibBomb ; var i , x , y ; begin
27850: LD_INT 0
27852: PPUSH
27853: PPUSH
27854: PPUSH
27855: PPUSH
// result := false ;
27856: LD_ADDR_VAR 0 1
27860: PUSH
27861: LD_INT 0
27863: ST_TO_ADDR
// for i := 1 to 16 do
27864: LD_ADDR_VAR 0 2
27868: PUSH
27869: DOUBLE
27870: LD_INT 1
27872: DEC
27873: ST_TO_ADDR
27874: LD_INT 16
27876: PUSH
27877: FOR_TO
27878: IFFALSE 28077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_INT 10
27887: PUSH
27888: LD_INT 20
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 40
27896: PUSH
27897: LD_INT 50
27899: PUSH
27900: LD_INT 60
27902: PUSH
27903: LD_INT 70
27905: PUSH
27906: LD_INT 80
27908: PUSH
27909: LD_INT 90
27911: PUSH
27912: LD_INT 100
27914: PUSH
27915: LD_INT 110
27917: PUSH
27918: LD_INT 120
27920: PUSH
27921: LD_INT 130
27923: PUSH
27924: LD_INT 140
27926: PUSH
27927: LD_INT 150
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PPUSH
27950: LD_INT 15
27952: PPUSH
27953: CALL_OW 12
27957: ARRAY
27958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27959: LD_ADDR_VAR 0 4
27963: PUSH
27964: LD_INT 10
27966: PUSH
27967: LD_INT 20
27969: PUSH
27970: LD_INT 30
27972: PUSH
27973: LD_INT 40
27975: PUSH
27976: LD_INT 50
27978: PUSH
27979: LD_INT 60
27981: PUSH
27982: LD_INT 70
27984: PUSH
27985: LD_INT 80
27987: PUSH
27988: LD_INT 90
27990: PUSH
27991: LD_INT 100
27993: PUSH
27994: LD_INT 110
27996: PUSH
27997: LD_INT 120
27999: PUSH
28000: LD_INT 130
28002: PUSH
28003: LD_INT 140
28005: PUSH
28006: LD_INT 150
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PPUSH
28029: LD_INT 15
28031: PPUSH
28032: CALL_OW 12
28036: ARRAY
28037: ST_TO_ADDR
// if ValidHex ( x , y ) then
28038: LD_VAR 0 3
28042: PPUSH
28043: LD_VAR 0 4
28047: PPUSH
28048: CALL_OW 488
28052: IFFALSE 28075
// begin result := [ x , y ] ;
28054: LD_ADDR_VAR 0 1
28058: PUSH
28059: LD_VAR 0 3
28063: PUSH
28064: LD_VAR 0 4
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: ST_TO_ADDR
// break ;
28073: GO 28077
// end ; end ;
28075: GO 27877
28077: POP
28078: POP
// if result then
28079: LD_VAR 0 1
28083: IFFALSE 28143
// begin ToLua ( playSibBomb() ) ;
28085: LD_STRING playSibBomb()
28087: PPUSH
28088: CALL_OW 559
// wait ( 0 0$14 ) ;
28092: LD_INT 490
28094: PPUSH
28095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28099: LD_VAR 0 1
28103: PUSH
28104: LD_INT 1
28106: ARRAY
28107: PPUSH
28108: LD_VAR 0 1
28112: PUSH
28113: LD_INT 2
28115: ARRAY
28116: PPUSH
28117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28121: LD_VAR 0 1
28125: PUSH
28126: LD_INT 1
28128: ARRAY
28129: PPUSH
28130: LD_VAR 0 1
28134: PUSH
28135: LD_INT 2
28137: ARRAY
28138: PPUSH
28139: CALL_OW 429
// end ; end ;
28143: LD_VAR 0 1
28147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28148: LD_EXP 51
28152: PUSH
28153: LD_EXP 73
28157: AND
28158: IFFALSE 28170
28160: GO 28162
28162: DISABLE
// YouLost (  ) ;
28163: LD_STRING 
28165: PPUSH
28166: CALL_OW 104
28170: END
// every 0 0$1 trigger StreamModeActive and sFog do
28171: LD_EXP 51
28175: PUSH
28176: LD_EXP 72
28180: AND
28181: IFFALSE 28195
28183: GO 28185
28185: DISABLE
// FogOff ( your_side ) ;
28186: LD_OWVAR 2
28190: PPUSH
28191: CALL_OW 344
28195: END
// every 0 0$1 trigger StreamModeActive and sSun do
28196: LD_EXP 51
28200: PUSH
28201: LD_EXP 74
28205: AND
28206: IFFALSE 28234
28208: GO 28210
28210: DISABLE
// begin solar_recharge_percent := 0 ;
28211: LD_ADDR_OWVAR 79
28215: PUSH
28216: LD_INT 0
28218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28219: LD_INT 10500
28221: PPUSH
28222: CALL_OW 67
// solar_recharge_percent := 100 ;
28226: LD_ADDR_OWVAR 79
28230: PUSH
28231: LD_INT 100
28233: ST_TO_ADDR
// end ;
28234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28235: LD_EXP 51
28239: PUSH
28240: LD_EXP 75
28244: AND
28245: IFFALSE 28484
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
28254: PPUSH
// begin tmp := [ ] ;
28255: LD_ADDR_VAR 0 3
28259: PUSH
28260: EMPTY
28261: ST_TO_ADDR
// for i := 1 to 6 do
28262: LD_ADDR_VAR 0 1
28266: PUSH
28267: DOUBLE
28268: LD_INT 1
28270: DEC
28271: ST_TO_ADDR
28272: LD_INT 6
28274: PUSH
28275: FOR_TO
28276: IFFALSE 28381
// begin uc_nation := nation_nature ;
28278: LD_ADDR_OWVAR 21
28282: PUSH
28283: LD_INT 0
28285: ST_TO_ADDR
// uc_side := 0 ;
28286: LD_ADDR_OWVAR 20
28290: PUSH
28291: LD_INT 0
28293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28294: LD_ADDR_OWVAR 29
28298: PUSH
28299: LD_INT 12
28301: PUSH
28302: LD_INT 12
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// hc_agressivity := 20 ;
28309: LD_ADDR_OWVAR 35
28313: PUSH
28314: LD_INT 20
28316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28317: LD_ADDR_OWVAR 28
28321: PUSH
28322: LD_INT 17
28324: ST_TO_ADDR
// hc_gallery :=  ;
28325: LD_ADDR_OWVAR 33
28329: PUSH
28330: LD_STRING 
28332: ST_TO_ADDR
// hc_name :=  ;
28333: LD_ADDR_OWVAR 26
28337: PUSH
28338: LD_STRING 
28340: ST_TO_ADDR
// un := CreateHuman ;
28341: LD_ADDR_VAR 0 2
28345: PUSH
28346: CALL_OW 44
28350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28351: LD_VAR 0 2
28355: PPUSH
28356: LD_INT 1
28358: PPUSH
28359: CALL_OW 51
// tmp := tmp ^ un ;
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_VAR 0 3
28372: PUSH
28373: LD_VAR 0 2
28377: ADD
28378: ST_TO_ADDR
// end ;
28379: GO 28275
28381: POP
28382: POP
// repeat wait ( 0 0$1 ) ;
28383: LD_INT 35
28385: PPUSH
28386: CALL_OW 67
// for un in tmp do
28390: LD_ADDR_VAR 0 2
28394: PUSH
28395: LD_VAR 0 3
28399: PUSH
28400: FOR_IN
28401: IFFALSE 28475
// begin if IsDead ( un ) then
28403: LD_VAR 0 2
28407: PPUSH
28408: CALL_OW 301
28412: IFFALSE 28432
// begin tmp := tmp diff un ;
28414: LD_ADDR_VAR 0 3
28418: PUSH
28419: LD_VAR 0 3
28423: PUSH
28424: LD_VAR 0 2
28428: DIFF
28429: ST_TO_ADDR
// continue ;
28430: GO 28400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28432: LD_VAR 0 2
28436: PPUSH
28437: LD_INT 3
28439: PUSH
28440: LD_INT 22
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 69
28458: PPUSH
28459: LD_VAR 0 2
28463: PPUSH
28464: CALL_OW 74
28468: PPUSH
28469: CALL_OW 115
// end ;
28473: GO 28400
28475: POP
28476: POP
// until not tmp ;
28477: LD_VAR 0 3
28481: NOT
28482: IFFALSE 28383
// end ;
28484: PPOPN 3
28486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28487: LD_EXP 51
28491: PUSH
28492: LD_EXP 76
28496: AND
28497: IFFALSE 28551
28499: GO 28501
28501: DISABLE
// begin ToLua ( displayTroll(); ) ;
28502: LD_STRING displayTroll();
28504: PPUSH
28505: CALL_OW 559
// wait ( 3 3$00 ) ;
28509: LD_INT 6300
28511: PPUSH
28512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28516: LD_STRING hideTroll();
28518: PPUSH
28519: CALL_OW 559
// wait ( 1 1$00 ) ;
28523: LD_INT 2100
28525: PPUSH
28526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28530: LD_STRING displayTroll();
28532: PPUSH
28533: CALL_OW 559
// wait ( 1 1$00 ) ;
28537: LD_INT 2100
28539: PPUSH
28540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28544: LD_STRING hideTroll();
28546: PPUSH
28547: CALL_OW 559
// end ;
28551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28552: LD_EXP 51
28556: PUSH
28557: LD_EXP 77
28561: AND
28562: IFFALSE 28625
28564: GO 28566
28566: DISABLE
28567: LD_INT 0
28569: PPUSH
// begin p := 0 ;
28570: LD_ADDR_VAR 0 1
28574: PUSH
28575: LD_INT 0
28577: ST_TO_ADDR
// repeat game_speed := 1 ;
28578: LD_ADDR_OWVAR 65
28582: PUSH
28583: LD_INT 1
28585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28586: LD_INT 35
28588: PPUSH
28589: CALL_OW 67
// p := p + 1 ;
28593: LD_ADDR_VAR 0 1
28597: PUSH
28598: LD_VAR 0 1
28602: PUSH
28603: LD_INT 1
28605: PLUS
28606: ST_TO_ADDR
// until p >= 60 ;
28607: LD_VAR 0 1
28611: PUSH
28612: LD_INT 60
28614: GREATEREQUAL
28615: IFFALSE 28578
// game_speed := 4 ;
28617: LD_ADDR_OWVAR 65
28621: PUSH
28622: LD_INT 4
28624: ST_TO_ADDR
// end ;
28625: PPOPN 1
28627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28628: LD_EXP 51
28632: PUSH
28633: LD_EXP 78
28637: AND
28638: IFFALSE 28784
28640: GO 28642
28642: DISABLE
28643: LD_INT 0
28645: PPUSH
28646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28647: LD_ADDR_VAR 0 1
28651: PUSH
28652: LD_INT 22
28654: PUSH
28655: LD_OWVAR 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 30
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 30
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 69
28700: ST_TO_ADDR
// if not depot then
28701: LD_VAR 0 1
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 28784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28710: LD_ADDR_VAR 0 2
28714: PUSH
28715: LD_VAR 0 1
28719: PUSH
28720: LD_INT 1
28722: PPUSH
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 12
28732: ARRAY
28733: PPUSH
28734: CALL_OW 274
28738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28739: LD_VAR 0 2
28743: PPUSH
28744: LD_INT 1
28746: PPUSH
28747: LD_INT 0
28749: PPUSH
28750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28754: LD_VAR 0 2
28758: PPUSH
28759: LD_INT 2
28761: PPUSH
28762: LD_INT 0
28764: PPUSH
28765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28769: LD_VAR 0 2
28773: PPUSH
28774: LD_INT 3
28776: PPUSH
28777: LD_INT 0
28779: PPUSH
28780: CALL_OW 277
// end ;
28784: PPOPN 2
28786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28787: LD_EXP 51
28791: PUSH
28792: LD_EXP 79
28796: AND
28797: IFFALSE 28894
28799: GO 28801
28801: DISABLE
28802: LD_INT 0
28804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28805: LD_ADDR_VAR 0 1
28809: PUSH
28810: LD_INT 22
28812: PUSH
28813: LD_OWVAR 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 21
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 3
28834: PUSH
28835: LD_INT 23
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: PPUSH
28854: CALL_OW 69
28858: ST_TO_ADDR
// if not tmp then
28859: LD_VAR 0 1
28863: NOT
28864: IFFALSE 28868
// exit ;
28866: GO 28894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28868: LD_VAR 0 1
28872: PUSH
28873: LD_INT 1
28875: PPUSH
28876: LD_VAR 0 1
28880: PPUSH
28881: CALL_OW 12
28885: ARRAY
28886: PPUSH
28887: LD_INT 200
28889: PPUSH
28890: CALL_OW 234
// end ;
28894: PPOPN 1
28896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28897: LD_EXP 51
28901: PUSH
28902: LD_EXP 80
28906: AND
28907: IFFALSE 28986
28909: GO 28911
28911: DISABLE
28912: LD_INT 0
28914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28915: LD_ADDR_VAR 0 1
28919: PUSH
28920: LD_INT 22
28922: PUSH
28923: LD_OWVAR 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PPUSH
28946: CALL_OW 69
28950: ST_TO_ADDR
// if not tmp then
28951: LD_VAR 0 1
28955: NOT
28956: IFFALSE 28960
// exit ;
28958: GO 28986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28960: LD_VAR 0 1
28964: PUSH
28965: LD_INT 1
28967: PPUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 12
28977: ARRAY
28978: PPUSH
28979: LD_INT 60
28981: PPUSH
28982: CALL_OW 234
// end ;
28986: PPOPN 1
28988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28989: LD_EXP 51
28993: PUSH
28994: LD_EXP 81
28998: AND
28999: IFFALSE 29098
29001: GO 29003
29003: DISABLE
29004: LD_INT 0
29006: PPUSH
29007: PPUSH
// begin enable ;
29008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29009: LD_ADDR_VAR 0 1
29013: PUSH
29014: LD_INT 22
29016: PUSH
29017: LD_OWVAR 2
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 61
29028: PUSH
29029: EMPTY
29030: LIST
29031: PUSH
29032: LD_INT 33
29034: PUSH
29035: LD_INT 2
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: ST_TO_ADDR
// if not tmp then
29052: LD_VAR 0 1
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29098
// for i in tmp do
29061: LD_ADDR_VAR 0 2
29065: PUSH
29066: LD_VAR 0 1
29070: PUSH
29071: FOR_IN
29072: IFFALSE 29096
// if IsControledBy ( i ) then
29074: LD_VAR 0 2
29078: PPUSH
29079: CALL_OW 312
29083: IFFALSE 29094
// ComUnlink ( i ) ;
29085: LD_VAR 0 2
29089: PPUSH
29090: CALL_OW 136
29094: GO 29071
29096: POP
29097: POP
// end ;
29098: PPOPN 2
29100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29101: LD_EXP 51
29105: PUSH
29106: LD_EXP 82
29110: AND
29111: IFFALSE 29251
29113: GO 29115
29115: DISABLE
29116: LD_INT 0
29118: PPUSH
29119: PPUSH
// begin ToLua ( displayPowell(); ) ;
29120: LD_STRING displayPowell();
29122: PPUSH
29123: CALL_OW 559
// uc_side := 0 ;
29127: LD_ADDR_OWVAR 20
29131: PUSH
29132: LD_INT 0
29134: ST_TO_ADDR
// uc_nation := 2 ;
29135: LD_ADDR_OWVAR 21
29139: PUSH
29140: LD_INT 2
29142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29143: LD_ADDR_OWVAR 37
29147: PUSH
29148: LD_INT 14
29150: ST_TO_ADDR
// vc_engine := engine_siberite ;
29151: LD_ADDR_OWVAR 39
29155: PUSH
29156: LD_INT 3
29158: ST_TO_ADDR
// vc_control := control_apeman ;
29159: LD_ADDR_OWVAR 38
29163: PUSH
29164: LD_INT 5
29166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29167: LD_ADDR_OWVAR 40
29171: PUSH
29172: LD_INT 29
29174: ST_TO_ADDR
// un := CreateVehicle ;
29175: LD_ADDR_VAR 0 2
29179: PUSH
29180: CALL_OW 45
29184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29185: LD_VAR 0 2
29189: PPUSH
29190: LD_INT 1
29192: PPUSH
29193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29197: LD_INT 35
29199: PPUSH
29200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29204: LD_VAR 0 2
29208: PPUSH
29209: LD_INT 22
29211: PUSH
29212: LD_OWVAR 2
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 69
29225: PPUSH
29226: LD_VAR 0 2
29230: PPUSH
29231: CALL_OW 74
29235: PPUSH
29236: CALL_OW 115
// until IsDead ( un ) ;
29240: LD_VAR 0 2
29244: PPUSH
29245: CALL_OW 301
29249: IFFALSE 29197
// end ;
29251: PPOPN 2
29253: END
// every 0 0$1 trigger StreamModeActive and sStu do
29254: LD_EXP 51
29258: PUSH
29259: LD_EXP 90
29263: AND
29264: IFFALSE 29280
29266: GO 29268
29268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29269: LD_STRING displayStucuk();
29271: PPUSH
29272: CALL_OW 559
// ResetFog ;
29276: CALL_OW 335
// end ;
29280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29281: LD_EXP 51
29285: PUSH
29286: LD_EXP 83
29290: AND
29291: IFFALSE 29432
29293: GO 29295
29295: DISABLE
29296: LD_INT 0
29298: PPUSH
29299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_INT 22
29307: PUSH
29308: LD_OWVAR 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 21
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PPUSH
29331: CALL_OW 69
29335: ST_TO_ADDR
// if not tmp then
29336: LD_VAR 0 2
29340: NOT
29341: IFFALSE 29345
// exit ;
29343: GO 29432
// un := tmp [ rand ( 1 , tmp ) ] ;
29345: LD_ADDR_VAR 0 1
29349: PUSH
29350: LD_VAR 0 2
29354: PUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_VAR 0 2
29362: PPUSH
29363: CALL_OW 12
29367: ARRAY
29368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29369: LD_VAR 0 1
29373: PPUSH
29374: LD_INT 0
29376: PPUSH
29377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29381: LD_VAR 0 1
29385: PPUSH
29386: LD_OWVAR 3
29390: PUSH
29391: LD_VAR 0 1
29395: DIFF
29396: PPUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 74
29406: PPUSH
29407: CALL_OW 115
// wait ( 0 0$20 ) ;
29411: LD_INT 700
29413: PPUSH
29414: CALL_OW 67
// SetSide ( un , your_side ) ;
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_OWVAR 2
29427: PPUSH
29428: CALL_OW 235
// end ;
29432: PPOPN 2
29434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29435: LD_EXP 51
29439: PUSH
29440: LD_EXP 84
29444: AND
29445: IFFALSE 29551
29447: GO 29449
29449: DISABLE
29450: LD_INT 0
29452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29453: LD_ADDR_VAR 0 1
29457: PUSH
29458: LD_INT 22
29460: PUSH
29461: LD_OWVAR 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: LD_INT 30
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 30
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PPUSH
29502: CALL_OW 69
29506: ST_TO_ADDR
// if not depot then
29507: LD_VAR 0 1
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 29551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29516: LD_VAR 0 1
29520: PUSH
29521: LD_INT 1
29523: ARRAY
29524: PPUSH
29525: CALL_OW 250
29529: PPUSH
29530: LD_VAR 0 1
29534: PUSH
29535: LD_INT 1
29537: ARRAY
29538: PPUSH
29539: CALL_OW 251
29543: PPUSH
29544: LD_INT 70
29546: PPUSH
29547: CALL_OW 495
// end ;
29551: PPOPN 1
29553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29554: LD_EXP 51
29558: PUSH
29559: LD_EXP 85
29563: AND
29564: IFFALSE 29775
29566: GO 29568
29568: DISABLE
29569: LD_INT 0
29571: PPUSH
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29576: LD_ADDR_VAR 0 5
29580: PUSH
29581: LD_INT 22
29583: PUSH
29584: LD_OWVAR 2
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 21
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PPUSH
29607: CALL_OW 69
29611: ST_TO_ADDR
// if not tmp then
29612: LD_VAR 0 5
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 29775
// for i in tmp do
29621: LD_ADDR_VAR 0 1
29625: PUSH
29626: LD_VAR 0 5
29630: PUSH
29631: FOR_IN
29632: IFFALSE 29773
// begin d := rand ( 0 , 5 ) ;
29634: LD_ADDR_VAR 0 4
29638: PUSH
29639: LD_INT 0
29641: PPUSH
29642: LD_INT 5
29644: PPUSH
29645: CALL_OW 12
29649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_VAR 0 1
29659: PPUSH
29660: CALL_OW 250
29664: PPUSH
29665: LD_VAR 0 4
29669: PPUSH
29670: LD_INT 3
29672: PPUSH
29673: LD_INT 12
29675: PPUSH
29676: CALL_OW 12
29680: PPUSH
29681: CALL_OW 272
29685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29686: LD_ADDR_VAR 0 3
29690: PUSH
29691: LD_VAR 0 1
29695: PPUSH
29696: CALL_OW 251
29700: PPUSH
29701: LD_VAR 0 4
29705: PPUSH
29706: LD_INT 3
29708: PPUSH
29709: LD_INT 12
29711: PPUSH
29712: CALL_OW 12
29716: PPUSH
29717: CALL_OW 273
29721: ST_TO_ADDR
// if ValidHex ( x , y ) then
29722: LD_VAR 0 2
29726: PPUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: CALL_OW 488
29736: IFFALSE 29771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29738: LD_VAR 0 1
29742: PPUSH
29743: LD_VAR 0 2
29747: PPUSH
29748: LD_VAR 0 3
29752: PPUSH
29753: LD_INT 3
29755: PPUSH
29756: LD_INT 6
29758: PPUSH
29759: CALL_OW 12
29763: PPUSH
29764: LD_INT 1
29766: PPUSH
29767: CALL_OW 483
// end ;
29771: GO 29631
29773: POP
29774: POP
// end ;
29775: PPOPN 5
29777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29778: LD_EXP 51
29782: PUSH
29783: LD_EXP 86
29787: AND
29788: IFFALSE 29882
29790: GO 29792
29792: DISABLE
29793: LD_INT 0
29795: PPUSH
29796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29797: LD_ADDR_VAR 0 2
29801: PUSH
29802: LD_INT 22
29804: PUSH
29805: LD_OWVAR 2
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 32
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 21
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: PPUSH
29839: CALL_OW 69
29843: ST_TO_ADDR
// if not tmp then
29844: LD_VAR 0 2
29848: NOT
29849: IFFALSE 29853
// exit ;
29851: GO 29882
// for i in tmp do
29853: LD_ADDR_VAR 0 1
29857: PUSH
29858: LD_VAR 0 2
29862: PUSH
29863: FOR_IN
29864: IFFALSE 29880
// SetFuel ( i , 0 ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: LD_INT 0
29873: PPUSH
29874: CALL_OW 240
29878: GO 29863
29880: POP
29881: POP
// end ;
29882: PPOPN 2
29884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29885: LD_EXP 51
29889: PUSH
29890: LD_EXP 87
29894: AND
29895: IFFALSE 29961
29897: GO 29899
29899: DISABLE
29900: LD_INT 0
29902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29903: LD_ADDR_VAR 0 1
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_OWVAR 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 30
29922: PUSH
29923: LD_INT 29
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PPUSH
29934: CALL_OW 69
29938: ST_TO_ADDR
// if not tmp then
29939: LD_VAR 0 1
29943: NOT
29944: IFFALSE 29948
// exit ;
29946: GO 29961
// DestroyUnit ( tmp [ 1 ] ) ;
29948: LD_VAR 0 1
29952: PUSH
29953: LD_INT 1
29955: ARRAY
29956: PPUSH
29957: CALL_OW 65
// end ;
29961: PPOPN 1
29963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29964: LD_EXP 51
29968: PUSH
29969: LD_EXP 89
29973: AND
29974: IFFALSE 30103
29976: GO 29978
29978: DISABLE
29979: LD_INT 0
29981: PPUSH
// begin uc_side := 0 ;
29982: LD_ADDR_OWVAR 20
29986: PUSH
29987: LD_INT 0
29989: ST_TO_ADDR
// uc_nation := nation_arabian ;
29990: LD_ADDR_OWVAR 21
29994: PUSH
29995: LD_INT 2
29997: ST_TO_ADDR
// hc_gallery :=  ;
29998: LD_ADDR_OWVAR 33
30002: PUSH
30003: LD_STRING 
30005: ST_TO_ADDR
// hc_name :=  ;
30006: LD_ADDR_OWVAR 26
30010: PUSH
30011: LD_STRING 
30013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30014: LD_INT 1
30016: PPUSH
30017: LD_INT 11
30019: PPUSH
30020: LD_INT 10
30022: PPUSH
30023: CALL_OW 380
// un := CreateHuman ;
30027: LD_ADDR_VAR 0 1
30031: PUSH
30032: CALL_OW 44
30036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30037: LD_VAR 0 1
30041: PPUSH
30042: LD_INT 1
30044: PPUSH
30045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30049: LD_INT 35
30051: PPUSH
30052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30056: LD_VAR 0 1
30060: PPUSH
30061: LD_INT 22
30063: PUSH
30064: LD_OWVAR 2
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PPUSH
30073: CALL_OW 69
30077: PPUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 74
30087: PPUSH
30088: CALL_OW 115
// until IsDead ( un ) ;
30092: LD_VAR 0 1
30096: PPUSH
30097: CALL_OW 301
30101: IFFALSE 30049
// end ;
30103: PPOPN 1
30105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30106: LD_EXP 51
30110: PUSH
30111: LD_EXP 91
30115: AND
30116: IFFALSE 30128
30118: GO 30120
30120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30121: LD_STRING earthquake(getX(game), 0, 32)
30123: PPUSH
30124: CALL_OW 559
30128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30129: LD_EXP 51
30133: PUSH
30134: LD_EXP 92
30138: AND
30139: IFFALSE 30230
30141: GO 30143
30143: DISABLE
30144: LD_INT 0
30146: PPUSH
// begin enable ;
30147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30148: LD_ADDR_VAR 0 1
30152: PUSH
30153: LD_INT 22
30155: PUSH
30156: LD_OWVAR 2
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 21
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 33
30177: PUSH
30178: LD_INT 3
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: PPUSH
30190: CALL_OW 69
30194: ST_TO_ADDR
// if not tmp then
30195: LD_VAR 0 1
30199: NOT
30200: IFFALSE 30204
// exit ;
30202: GO 30230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30204: LD_VAR 0 1
30208: PUSH
30209: LD_INT 1
30211: PPUSH
30212: LD_VAR 0 1
30216: PPUSH
30217: CALL_OW 12
30221: ARRAY
30222: PPUSH
30223: LD_INT 1
30225: PPUSH
30226: CALL_OW 234
// end ;
30230: PPOPN 1
30232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30233: LD_EXP 51
30237: PUSH
30238: LD_EXP 93
30242: AND
30243: IFFALSE 30384
30245: GO 30247
30247: DISABLE
30248: LD_INT 0
30250: PPUSH
30251: PPUSH
30252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30253: LD_ADDR_VAR 0 3
30257: PUSH
30258: LD_INT 22
30260: PUSH
30261: LD_OWVAR 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 25
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PPUSH
30284: CALL_OW 69
30288: ST_TO_ADDR
// if not tmp then
30289: LD_VAR 0 3
30293: NOT
30294: IFFALSE 30298
// exit ;
30296: GO 30384
// un := tmp [ rand ( 1 , tmp ) ] ;
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: LD_VAR 0 3
30307: PUSH
30308: LD_INT 1
30310: PPUSH
30311: LD_VAR 0 3
30315: PPUSH
30316: CALL_OW 12
30320: ARRAY
30321: ST_TO_ADDR
// if Crawls ( un ) then
30322: LD_VAR 0 2
30326: PPUSH
30327: CALL_OW 318
30331: IFFALSE 30342
// ComWalk ( un ) ;
30333: LD_VAR 0 2
30337: PPUSH
30338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30342: LD_VAR 0 2
30346: PPUSH
30347: LD_INT 9
30349: PPUSH
30350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30354: LD_INT 28
30356: PPUSH
30357: LD_OWVAR 2
30361: PPUSH
30362: LD_INT 2
30364: PPUSH
30365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30369: LD_INT 29
30371: PPUSH
30372: LD_OWVAR 2
30376: PPUSH
30377: LD_INT 2
30379: PPUSH
30380: CALL_OW 322
// end ;
30384: PPOPN 3
30386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30387: LD_EXP 51
30391: PUSH
30392: LD_EXP 94
30396: AND
30397: IFFALSE 30508
30399: GO 30401
30401: DISABLE
30402: LD_INT 0
30404: PPUSH
30405: PPUSH
30406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30407: LD_ADDR_VAR 0 3
30411: PUSH
30412: LD_INT 22
30414: PUSH
30415: LD_OWVAR 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 25
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 69
30442: ST_TO_ADDR
// if not tmp then
30443: LD_VAR 0 3
30447: NOT
30448: IFFALSE 30452
// exit ;
30450: GO 30508
// un := tmp [ rand ( 1 , tmp ) ] ;
30452: LD_ADDR_VAR 0 2
30456: PUSH
30457: LD_VAR 0 3
30461: PUSH
30462: LD_INT 1
30464: PPUSH
30465: LD_VAR 0 3
30469: PPUSH
30470: CALL_OW 12
30474: ARRAY
30475: ST_TO_ADDR
// if Crawls ( un ) then
30476: LD_VAR 0 2
30480: PPUSH
30481: CALL_OW 318
30485: IFFALSE 30496
// ComWalk ( un ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_INT 8
30503: PPUSH
30504: CALL_OW 336
// end ;
30508: PPOPN 3
30510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30511: LD_EXP 51
30515: PUSH
30516: LD_EXP 95
30520: AND
30521: IFFALSE 30665
30523: GO 30525
30525: DISABLE
30526: LD_INT 0
30528: PPUSH
30529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30530: LD_ADDR_VAR 0 2
30534: PUSH
30535: LD_INT 22
30537: PUSH
30538: LD_OWVAR 2
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 21
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 34
30562: PUSH
30563: LD_INT 12
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 34
30572: PUSH
30573: LD_INT 51
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 34
30582: PUSH
30583: LD_INT 32
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: PPUSH
30601: CALL_OW 69
30605: ST_TO_ADDR
// if not tmp then
30606: LD_VAR 0 2
30610: NOT
30611: IFFALSE 30615
// exit ;
30613: GO 30665
// for i in tmp do
30615: LD_ADDR_VAR 0 1
30619: PUSH
30620: LD_VAR 0 2
30624: PUSH
30625: FOR_IN
30626: IFFALSE 30663
// if GetCargo ( i , mat_artifact ) = 0 then
30628: LD_VAR 0 1
30632: PPUSH
30633: LD_INT 4
30635: PPUSH
30636: CALL_OW 289
30640: PUSH
30641: LD_INT 0
30643: EQUAL
30644: IFFALSE 30661
// SetCargo ( i , mat_siberit , 100 ) ;
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_INT 3
30653: PPUSH
30654: LD_INT 100
30656: PPUSH
30657: CALL_OW 290
30661: GO 30625
30663: POP
30664: POP
// end ;
30665: PPOPN 2
30667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30668: LD_EXP 51
30672: PUSH
30673: LD_EXP 96
30677: AND
30678: IFFALSE 30861
30680: GO 30682
30682: DISABLE
30683: LD_INT 0
30685: PPUSH
30686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30687: LD_ADDR_VAR 0 2
30691: PUSH
30692: LD_INT 22
30694: PUSH
30695: LD_OWVAR 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PPUSH
30704: CALL_OW 69
30708: ST_TO_ADDR
// if not tmp then
30709: LD_VAR 0 2
30713: NOT
30714: IFFALSE 30718
// exit ;
30716: GO 30861
// for i := 1 to 2 do
30718: LD_ADDR_VAR 0 1
30722: PUSH
30723: DOUBLE
30724: LD_INT 1
30726: DEC
30727: ST_TO_ADDR
30728: LD_INT 2
30730: PUSH
30731: FOR_TO
30732: IFFALSE 30859
// begin uc_side := your_side ;
30734: LD_ADDR_OWVAR 20
30738: PUSH
30739: LD_OWVAR 2
30743: ST_TO_ADDR
// uc_nation := nation_american ;
30744: LD_ADDR_OWVAR 21
30748: PUSH
30749: LD_INT 1
30751: ST_TO_ADDR
// vc_chassis := us_morphling ;
30752: LD_ADDR_OWVAR 37
30756: PUSH
30757: LD_INT 5
30759: ST_TO_ADDR
// vc_engine := engine_siberite ;
30760: LD_ADDR_OWVAR 39
30764: PUSH
30765: LD_INT 3
30767: ST_TO_ADDR
// vc_control := control_computer ;
30768: LD_ADDR_OWVAR 38
30772: PUSH
30773: LD_INT 3
30775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30776: LD_ADDR_OWVAR 40
30780: PUSH
30781: LD_INT 10
30783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30784: LD_VAR 0 2
30788: PUSH
30789: LD_INT 1
30791: ARRAY
30792: PPUSH
30793: CALL_OW 310
30797: NOT
30798: IFFALSE 30845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30800: CALL_OW 45
30804: PPUSH
30805: LD_VAR 0 2
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: PPUSH
30814: CALL_OW 250
30818: PPUSH
30819: LD_VAR 0 2
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: CALL_OW 251
30832: PPUSH
30833: LD_INT 12
30835: PPUSH
30836: LD_INT 1
30838: PPUSH
30839: CALL_OW 50
30843: GO 30857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30845: CALL_OW 45
30849: PPUSH
30850: LD_INT 1
30852: PPUSH
30853: CALL_OW 51
// end ;
30857: GO 30731
30859: POP
30860: POP
// end ;
30861: PPOPN 2
30863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30864: LD_EXP 51
30868: PUSH
30869: LD_EXP 97
30873: AND
30874: IFFALSE 31096
30876: GO 30878
30878: DISABLE
30879: LD_INT 0
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30887: LD_ADDR_VAR 0 6
30891: PUSH
30892: LD_INT 22
30894: PUSH
30895: LD_OWVAR 2
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 21
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 23
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: PPUSH
30936: CALL_OW 69
30940: ST_TO_ADDR
// if not tmp then
30941: LD_VAR 0 6
30945: NOT
30946: IFFALSE 30950
// exit ;
30948: GO 31096
// s1 := rand ( 1 , 4 ) ;
30950: LD_ADDR_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: PPUSH
30958: LD_INT 4
30960: PPUSH
30961: CALL_OW 12
30965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30966: LD_ADDR_VAR 0 4
30970: PUSH
30971: LD_VAR 0 6
30975: PUSH
30976: LD_INT 1
30978: ARRAY
30979: PPUSH
30980: LD_VAR 0 2
30984: PPUSH
30985: CALL_OW 259
30989: ST_TO_ADDR
// if s1 = 1 then
30990: LD_VAR 0 2
30994: PUSH
30995: LD_INT 1
30997: EQUAL
30998: IFFALSE 31018
// s2 := rand ( 2 , 4 ) else
31000: LD_ADDR_VAR 0 3
31004: PUSH
31005: LD_INT 2
31007: PPUSH
31008: LD_INT 4
31010: PPUSH
31011: CALL_OW 12
31015: ST_TO_ADDR
31016: GO 31026
// s2 := 1 ;
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_INT 1
31025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31026: LD_ADDR_VAR 0 5
31030: PUSH
31031: LD_VAR 0 6
31035: PUSH
31036: LD_INT 1
31038: ARRAY
31039: PPUSH
31040: LD_VAR 0 3
31044: PPUSH
31045: CALL_OW 259
31049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31050: LD_VAR 0 6
31054: PUSH
31055: LD_INT 1
31057: ARRAY
31058: PPUSH
31059: LD_VAR 0 2
31063: PPUSH
31064: LD_VAR 0 5
31068: PPUSH
31069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31073: LD_VAR 0 6
31077: PUSH
31078: LD_INT 1
31080: ARRAY
31081: PPUSH
31082: LD_VAR 0 3
31086: PPUSH
31087: LD_VAR 0 4
31091: PPUSH
31092: CALL_OW 237
// end ;
31096: PPOPN 6
31098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31099: LD_EXP 51
31103: PUSH
31104: LD_EXP 98
31108: AND
31109: IFFALSE 31188
31111: GO 31113
31113: DISABLE
31114: LD_INT 0
31116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31117: LD_ADDR_VAR 0 1
31121: PUSH
31122: LD_INT 22
31124: PUSH
31125: LD_OWVAR 2
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 30
31136: PUSH
31137: LD_INT 3
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PPUSH
31148: CALL_OW 69
31152: ST_TO_ADDR
// if not tmp then
31153: LD_VAR 0 1
31157: NOT
31158: IFFALSE 31162
// exit ;
31160: GO 31188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31162: LD_VAR 0 1
31166: PUSH
31167: LD_INT 1
31169: PPUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: CALL_OW 12
31179: ARRAY
31180: PPUSH
31181: LD_INT 1
31183: PPUSH
31184: CALL_OW 234
// end ;
31188: PPOPN 1
31190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31191: LD_EXP 51
31195: PUSH
31196: LD_EXP 99
31200: AND
31201: IFFALSE 31313
31203: GO 31205
31205: DISABLE
31206: LD_INT 0
31208: PPUSH
31209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31210: LD_ADDR_VAR 0 2
31214: PUSH
31215: LD_INT 22
31217: PUSH
31218: LD_OWVAR 2
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 27
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 30
31242: PUSH
31243: LD_INT 26
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 28
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PPUSH
31270: CALL_OW 69
31274: ST_TO_ADDR
// if not tmp then
31275: LD_VAR 0 2
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 31313
// for i in tmp do
31284: LD_ADDR_VAR 0 1
31288: PUSH
31289: LD_VAR 0 2
31293: PUSH
31294: FOR_IN
31295: IFFALSE 31311
// SetLives ( i , 1 ) ;
31297: LD_VAR 0 1
31301: PPUSH
31302: LD_INT 1
31304: PPUSH
31305: CALL_OW 234
31309: GO 31294
31311: POP
31312: POP
// end ;
31313: PPOPN 2
31315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31316: LD_EXP 51
31320: PUSH
31321: LD_EXP 100
31325: AND
31326: IFFALSE 31613
31328: GO 31330
31330: DISABLE
31331: LD_INT 0
31333: PPUSH
31334: PPUSH
31335: PPUSH
// begin i := rand ( 1 , 7 ) ;
31336: LD_ADDR_VAR 0 1
31340: PUSH
31341: LD_INT 1
31343: PPUSH
31344: LD_INT 7
31346: PPUSH
31347: CALL_OW 12
31351: ST_TO_ADDR
// case i of 1 :
31352: LD_VAR 0 1
31356: PUSH
31357: LD_INT 1
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31375
31365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31366: LD_STRING earthquake(getX(game), 0, 32)
31368: PPUSH
31369: CALL_OW 559
31373: GO 31613
31375: LD_INT 2
31377: DOUBLE
31378: EQUAL
31379: IFTRUE 31383
31381: GO 31397
31383: POP
// begin ToLua ( displayStucuk(); ) ;
31384: LD_STRING displayStucuk();
31386: PPUSH
31387: CALL_OW 559
// ResetFog ;
31391: CALL_OW 335
// end ; 3 :
31395: GO 31613
31397: LD_INT 3
31399: DOUBLE
31400: EQUAL
31401: IFTRUE 31405
31403: GO 31509
31405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31406: LD_ADDR_VAR 0 2
31410: PUSH
31411: LD_INT 22
31413: PUSH
31414: LD_OWVAR 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 25
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PPUSH
31437: CALL_OW 69
31441: ST_TO_ADDR
// if not tmp then
31442: LD_VAR 0 2
31446: NOT
31447: IFFALSE 31451
// exit ;
31449: GO 31613
// un := tmp [ rand ( 1 , tmp ) ] ;
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_VAR 0 2
31460: PUSH
31461: LD_INT 1
31463: PPUSH
31464: LD_VAR 0 2
31468: PPUSH
31469: CALL_OW 12
31473: ARRAY
31474: ST_TO_ADDR
// if Crawls ( un ) then
31475: LD_VAR 0 3
31479: PPUSH
31480: CALL_OW 318
31484: IFFALSE 31495
// ComWalk ( un ) ;
31486: LD_VAR 0 3
31490: PPUSH
31491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31495: LD_VAR 0 3
31499: PPUSH
31500: LD_INT 8
31502: PPUSH
31503: CALL_OW 336
// end ; 4 :
31507: GO 31613
31509: LD_INT 4
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31591
31517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31518: LD_ADDR_VAR 0 2
31522: PUSH
31523: LD_INT 22
31525: PUSH
31526: LD_OWVAR 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 30
31537: PUSH
31538: LD_INT 29
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 69
31553: ST_TO_ADDR
// if not tmp then
31554: LD_VAR 0 2
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31613
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31563: LD_VAR 0 2
31567: PUSH
31568: LD_INT 1
31570: ARRAY
31571: PPUSH
31572: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31576: LD_VAR 0 2
31580: PUSH
31581: LD_INT 1
31583: ARRAY
31584: PPUSH
31585: CALL_OW 65
// end ; 5 .. 7 :
31589: GO 31613
31591: LD_INT 5
31593: DOUBLE
31594: GREATEREQUAL
31595: IFFALSE 31603
31597: LD_INT 7
31599: DOUBLE
31600: LESSEQUAL
31601: IFTRUE 31605
31603: GO 31612
31605: POP
// StreamSibBomb ; end ;
31606: CALL 27850 0 0
31610: GO 31613
31612: POP
// end ;
31613: PPOPN 3
31615: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31616: LD_EXP 51
31620: PUSH
31621: LD_EXP 101
31625: AND
31626: IFFALSE 31782
31628: GO 31630
31630: DISABLE
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
31635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31636: LD_ADDR_VAR 0 2
31640: PUSH
31641: LD_INT 81
31643: PUSH
31644: LD_OWVAR 2
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 21
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 21
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PPUSH
31685: CALL_OW 69
31689: ST_TO_ADDR
// if not tmp then
31690: LD_VAR 0 2
31694: NOT
31695: IFFALSE 31699
// exit ;
31697: GO 31782
// p := 0 ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_INT 0
31706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31707: LD_INT 35
31709: PPUSH
31710: CALL_OW 67
// p := p + 1 ;
31714: LD_ADDR_VAR 0 3
31718: PUSH
31719: LD_VAR 0 3
31723: PUSH
31724: LD_INT 1
31726: PLUS
31727: ST_TO_ADDR
// for i in tmp do
31728: LD_ADDR_VAR 0 1
31732: PUSH
31733: LD_VAR 0 2
31737: PUSH
31738: FOR_IN
31739: IFFALSE 31770
// if GetLives ( i ) < 1000 then
31741: LD_VAR 0 1
31745: PPUSH
31746: CALL_OW 256
31750: PUSH
31751: LD_INT 1000
31753: LESS
31754: IFFALSE 31768
// SetLives ( i , 1000 ) ;
31756: LD_VAR 0 1
31760: PPUSH
31761: LD_INT 1000
31763: PPUSH
31764: CALL_OW 234
31768: GO 31738
31770: POP
31771: POP
// until p > 20 ;
31772: LD_VAR 0 3
31776: PUSH
31777: LD_INT 20
31779: GREATER
31780: IFFALSE 31707
// end ;
31782: PPOPN 3
31784: END
// every 0 0$1 trigger StreamModeActive and sTime do
31785: LD_EXP 51
31789: PUSH
31790: LD_EXP 102
31794: AND
31795: IFFALSE 31830
31797: GO 31799
31799: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31800: LD_INT 28
31802: PPUSH
31803: LD_OWVAR 2
31807: PPUSH
31808: LD_INT 2
31810: PPUSH
31811: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31815: LD_INT 30
31817: PPUSH
31818: LD_OWVAR 2
31822: PPUSH
31823: LD_INT 2
31825: PPUSH
31826: CALL_OW 322
// end ;
31830: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31831: LD_EXP 51
31835: PUSH
31836: LD_EXP 103
31840: AND
31841: IFFALSE 31962
31843: GO 31845
31845: DISABLE
31846: LD_INT 0
31848: PPUSH
31849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31850: LD_ADDR_VAR 0 2
31854: PUSH
31855: LD_INT 22
31857: PUSH
31858: LD_OWVAR 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 21
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 3
31879: PUSH
31880: LD_INT 23
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: PPUSH
31899: CALL_OW 69
31903: ST_TO_ADDR
// if not tmp then
31904: LD_VAR 0 2
31908: NOT
31909: IFFALSE 31913
// exit ;
31911: GO 31962
// for i in tmp do
31913: LD_ADDR_VAR 0 1
31917: PUSH
31918: LD_VAR 0 2
31922: PUSH
31923: FOR_IN
31924: IFFALSE 31960
// begin if Crawls ( i ) then
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 318
31935: IFFALSE 31946
// ComWalk ( i ) ;
31937: LD_VAR 0 1
31941: PPUSH
31942: CALL_OW 138
// SetClass ( i , 2 ) ;
31946: LD_VAR 0 1
31950: PPUSH
31951: LD_INT 2
31953: PPUSH
31954: CALL_OW 336
// end ;
31958: GO 31923
31960: POP
31961: POP
// end ;
31962: PPOPN 2
31964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31965: LD_EXP 51
31969: PUSH
31970: LD_EXP 104
31974: AND
31975: IFFALSE 32263
31977: GO 31979
31979: DISABLE
31980: LD_INT 0
31982: PPUSH
31983: PPUSH
31984: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31985: LD_OWVAR 2
31989: PPUSH
31990: LD_INT 9
31992: PPUSH
31993: LD_INT 1
31995: PPUSH
31996: LD_INT 1
31998: PPUSH
31999: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32003: LD_INT 9
32005: PPUSH
32006: LD_OWVAR 2
32010: PPUSH
32011: CALL_OW 343
// uc_side := 9 ;
32015: LD_ADDR_OWVAR 20
32019: PUSH
32020: LD_INT 9
32022: ST_TO_ADDR
// uc_nation := 2 ;
32023: LD_ADDR_OWVAR 21
32027: PUSH
32028: LD_INT 2
32030: ST_TO_ADDR
// hc_name := Dark Warrior ;
32031: LD_ADDR_OWVAR 26
32035: PUSH
32036: LD_STRING Dark Warrior
32038: ST_TO_ADDR
// hc_gallery :=  ;
32039: LD_ADDR_OWVAR 33
32043: PUSH
32044: LD_STRING 
32046: ST_TO_ADDR
// hc_noskilllimit := true ;
32047: LD_ADDR_OWVAR 76
32051: PUSH
32052: LD_INT 1
32054: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32055: LD_ADDR_OWVAR 31
32059: PUSH
32060: LD_INT 30
32062: PUSH
32063: LD_INT 30
32065: PUSH
32066: LD_INT 30
32068: PUSH
32069: LD_INT 30
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// un := CreateHuman ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: CALL_OW 44
32087: ST_TO_ADDR
// hc_noskilllimit := false ;
32088: LD_ADDR_OWVAR 76
32092: PUSH
32093: LD_INT 0
32095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32096: LD_VAR 0 3
32100: PPUSH
32101: LD_INT 1
32103: PPUSH
32104: CALL_OW 51
// ToLua ( playRanger() ) ;
32108: LD_STRING playRanger()
32110: PPUSH
32111: CALL_OW 559
// p := 0 ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_INT 0
32122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32123: LD_INT 35
32125: PPUSH
32126: CALL_OW 67
// p := p + 1 ;
32130: LD_ADDR_VAR 0 2
32134: PUSH
32135: LD_VAR 0 2
32139: PUSH
32140: LD_INT 1
32142: PLUS
32143: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32144: LD_VAR 0 3
32148: PPUSH
32149: CALL_OW 256
32153: PUSH
32154: LD_INT 1000
32156: LESS
32157: IFFALSE 32171
// SetLives ( un , 1000 ) ;
32159: LD_VAR 0 3
32163: PPUSH
32164: LD_INT 1000
32166: PPUSH
32167: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32171: LD_VAR 0 3
32175: PPUSH
32176: LD_INT 81
32178: PUSH
32179: LD_OWVAR 2
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 91
32190: PUSH
32191: LD_VAR 0 3
32195: PUSH
32196: LD_INT 30
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PPUSH
32208: CALL_OW 69
32212: PPUSH
32213: LD_VAR 0 3
32217: PPUSH
32218: CALL_OW 74
32222: PPUSH
32223: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32227: LD_VAR 0 2
32231: PUSH
32232: LD_INT 80
32234: GREATER
32235: PUSH
32236: LD_VAR 0 3
32240: PPUSH
32241: CALL_OW 301
32245: OR
32246: IFFALSE 32123
// if un then
32248: LD_VAR 0 3
32252: IFFALSE 32263
// RemoveUnit ( un ) ;
32254: LD_VAR 0 3
32258: PPUSH
32259: CALL_OW 64
// end ;
32263: PPOPN 3
32265: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32266: LD_EXP 105
32270: IFFALSE 32386
32272: GO 32274
32274: DISABLE
32275: LD_INT 0
32277: PPUSH
32278: PPUSH
32279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32280: LD_ADDR_VAR 0 2
32284: PUSH
32285: LD_INT 81
32287: PUSH
32288: LD_OWVAR 2
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 21
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PPUSH
32311: CALL_OW 69
32315: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32316: LD_STRING playComputer()
32318: PPUSH
32319: CALL_OW 559
// if not tmp then
32323: LD_VAR 0 2
32327: NOT
32328: IFFALSE 32332
// exit ;
32330: GO 32386
// for i in tmp do
32332: LD_ADDR_VAR 0 1
32336: PUSH
32337: LD_VAR 0 2
32341: PUSH
32342: FOR_IN
32343: IFFALSE 32384
// for j := 1 to 4 do
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: DOUBLE
32351: LD_INT 1
32353: DEC
32354: ST_TO_ADDR
32355: LD_INT 4
32357: PUSH
32358: FOR_TO
32359: IFFALSE 32380
// SetSkill ( i , j , 10 ) ;
32361: LD_VAR 0 1
32365: PPUSH
32366: LD_VAR 0 3
32370: PPUSH
32371: LD_INT 10
32373: PPUSH
32374: CALL_OW 237
32378: GO 32358
32380: POP
32381: POP
32382: GO 32342
32384: POP
32385: POP
// end ;
32386: PPOPN 3
32388: END
// every 0 0$1 trigger s30 do var i , tmp ;
32389: LD_EXP 106
32393: IFFALSE 32462
32395: GO 32397
32397: DISABLE
32398: LD_INT 0
32400: PPUSH
32401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32402: LD_ADDR_VAR 0 2
32406: PUSH
32407: LD_INT 22
32409: PUSH
32410: LD_OWVAR 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PPUSH
32419: CALL_OW 69
32423: ST_TO_ADDR
// if not tmp then
32424: LD_VAR 0 2
32428: NOT
32429: IFFALSE 32433
// exit ;
32431: GO 32462
// for i in tmp do
32433: LD_ADDR_VAR 0 1
32437: PUSH
32438: LD_VAR 0 2
32442: PUSH
32443: FOR_IN
32444: IFFALSE 32460
// SetLives ( i , 300 ) ;
32446: LD_VAR 0 1
32450: PPUSH
32451: LD_INT 300
32453: PPUSH
32454: CALL_OW 234
32458: GO 32443
32460: POP
32461: POP
// end ;
32462: PPOPN 2
32464: END
// every 0 0$1 trigger s60 do var i , tmp ;
32465: LD_EXP 107
32469: IFFALSE 32538
32471: GO 32473
32473: DISABLE
32474: LD_INT 0
32476: PPUSH
32477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32478: LD_ADDR_VAR 0 2
32482: PUSH
32483: LD_INT 22
32485: PUSH
32486: LD_OWVAR 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PPUSH
32495: CALL_OW 69
32499: ST_TO_ADDR
// if not tmp then
32500: LD_VAR 0 2
32504: NOT
32505: IFFALSE 32509
// exit ;
32507: GO 32538
// for i in tmp do
32509: LD_ADDR_VAR 0 1
32513: PUSH
32514: LD_VAR 0 2
32518: PUSH
32519: FOR_IN
32520: IFFALSE 32536
// SetLives ( i , 600 ) ;
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_INT 600
32529: PPUSH
32530: CALL_OW 234
32534: GO 32519
32536: POP
32537: POP
// end ;
32538: PPOPN 2
32540: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32541: LD_INT 0
32543: PPUSH
// case cmd of 301 :
32544: LD_VAR 0 1
32548: PUSH
32549: LD_INT 301
32551: DOUBLE
32552: EQUAL
32553: IFTRUE 32557
32555: GO 32589
32557: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32558: LD_VAR 0 6
32562: PPUSH
32563: LD_VAR 0 7
32567: PPUSH
32568: LD_VAR 0 8
32572: PPUSH
32573: LD_VAR 0 4
32577: PPUSH
32578: LD_VAR 0 5
32582: PPUSH
32583: CALL 33790 0 5
32587: GO 32710
32589: LD_INT 302
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32597
32595: GO 32634
32597: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32598: LD_VAR 0 6
32602: PPUSH
32603: LD_VAR 0 7
32607: PPUSH
32608: LD_VAR 0 8
32612: PPUSH
32613: LD_VAR 0 9
32617: PPUSH
32618: LD_VAR 0 4
32622: PPUSH
32623: LD_VAR 0 5
32627: PPUSH
32628: CALL 33881 0 6
32632: GO 32710
32634: LD_INT 303
32636: DOUBLE
32637: EQUAL
32638: IFTRUE 32642
32640: GO 32679
32642: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32643: LD_VAR 0 6
32647: PPUSH
32648: LD_VAR 0 7
32652: PPUSH
32653: LD_VAR 0 8
32657: PPUSH
32658: LD_VAR 0 9
32662: PPUSH
32663: LD_VAR 0 4
32667: PPUSH
32668: LD_VAR 0 5
32672: PPUSH
32673: CALL 32715 0 6
32677: GO 32710
32679: LD_INT 304
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32709
32687: POP
// hHackTeleport ( unit , x , y ) ; end ;
32688: LD_VAR 0 2
32692: PPUSH
32693: LD_VAR 0 4
32697: PPUSH
32698: LD_VAR 0 5
32702: PPUSH
32703: CALL 34474 0 3
32707: GO 32710
32709: POP
// end ;
32710: LD_VAR 0 12
32714: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32715: LD_INT 0
32717: PPUSH
32718: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32719: LD_VAR 0 1
32723: PUSH
32724: LD_INT 1
32726: LESS
32727: PUSH
32728: LD_VAR 0 1
32732: PUSH
32733: LD_INT 3
32735: GREATER
32736: OR
32737: PUSH
32738: LD_VAR 0 5
32742: PPUSH
32743: LD_VAR 0 6
32747: PPUSH
32748: CALL_OW 428
32752: OR
32753: IFFALSE 32757
// exit ;
32755: GO 33477
// uc_side := your_side ;
32757: LD_ADDR_OWVAR 20
32761: PUSH
32762: LD_OWVAR 2
32766: ST_TO_ADDR
// uc_nation := nation ;
32767: LD_ADDR_OWVAR 21
32771: PUSH
32772: LD_VAR 0 1
32776: ST_TO_ADDR
// bc_level = 1 ;
32777: LD_ADDR_OWVAR 43
32781: PUSH
32782: LD_INT 1
32784: ST_TO_ADDR
// case btype of 1 :
32785: LD_VAR 0 2
32789: PUSH
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32809
32798: POP
// bc_type := b_depot ; 2 :
32799: LD_ADDR_OWVAR 42
32803: PUSH
32804: LD_INT 0
32806: ST_TO_ADDR
32807: GO 33421
32809: LD_INT 2
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32828
32817: POP
// bc_type := b_warehouse ; 3 :
32818: LD_ADDR_OWVAR 42
32822: PUSH
32823: LD_INT 1
32825: ST_TO_ADDR
32826: GO 33421
32828: LD_INT 3
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32847
32836: POP
// bc_type := b_lab ; 4 .. 9 :
32837: LD_ADDR_OWVAR 42
32841: PUSH
32842: LD_INT 6
32844: ST_TO_ADDR
32845: GO 33421
32847: LD_INT 4
32849: DOUBLE
32850: GREATEREQUAL
32851: IFFALSE 32859
32853: LD_INT 9
32855: DOUBLE
32856: LESSEQUAL
32857: IFTRUE 32861
32859: GO 32913
32861: POP
// begin bc_type := b_lab_half ;
32862: LD_ADDR_OWVAR 42
32866: PUSH
32867: LD_INT 7
32869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32870: LD_ADDR_OWVAR 44
32874: PUSH
32875: LD_INT 10
32877: PUSH
32878: LD_INT 11
32880: PUSH
32881: LD_INT 12
32883: PUSH
32884: LD_INT 15
32886: PUSH
32887: LD_INT 14
32889: PUSH
32890: LD_INT 13
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: PUSH
32901: LD_VAR 0 2
32905: PUSH
32906: LD_INT 3
32908: MINUS
32909: ARRAY
32910: ST_TO_ADDR
// end ; 10 .. 13 :
32911: GO 33421
32913: LD_INT 10
32915: DOUBLE
32916: GREATEREQUAL
32917: IFFALSE 32925
32919: LD_INT 13
32921: DOUBLE
32922: LESSEQUAL
32923: IFTRUE 32927
32925: GO 33004
32927: POP
// begin bc_type := b_lab_full ;
32928: LD_ADDR_OWVAR 42
32932: PUSH
32933: LD_INT 8
32935: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32936: LD_ADDR_OWVAR 44
32940: PUSH
32941: LD_INT 10
32943: PUSH
32944: LD_INT 12
32946: PUSH
32947: LD_INT 14
32949: PUSH
32950: LD_INT 13
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: PUSH
32959: LD_VAR 0 2
32963: PUSH
32964: LD_INT 9
32966: MINUS
32967: ARRAY
32968: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32969: LD_ADDR_OWVAR 45
32973: PUSH
32974: LD_INT 11
32976: PUSH
32977: LD_INT 15
32979: PUSH
32980: LD_INT 12
32982: PUSH
32983: LD_INT 15
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: PUSH
32992: LD_VAR 0 2
32996: PUSH
32997: LD_INT 9
32999: MINUS
33000: ARRAY
33001: ST_TO_ADDR
// end ; 14 :
33002: GO 33421
33004: LD_INT 14
33006: DOUBLE
33007: EQUAL
33008: IFTRUE 33012
33010: GO 33023
33012: POP
// bc_type := b_workshop ; 15 :
33013: LD_ADDR_OWVAR 42
33017: PUSH
33018: LD_INT 2
33020: ST_TO_ADDR
33021: GO 33421
33023: LD_INT 15
33025: DOUBLE
33026: EQUAL
33027: IFTRUE 33031
33029: GO 33042
33031: POP
// bc_type := b_factory ; 16 :
33032: LD_ADDR_OWVAR 42
33036: PUSH
33037: LD_INT 3
33039: ST_TO_ADDR
33040: GO 33421
33042: LD_INT 16
33044: DOUBLE
33045: EQUAL
33046: IFTRUE 33050
33048: GO 33061
33050: POP
// bc_type := b_ext_gun ; 17 :
33051: LD_ADDR_OWVAR 42
33055: PUSH
33056: LD_INT 17
33058: ST_TO_ADDR
33059: GO 33421
33061: LD_INT 17
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33069
33067: GO 33097
33069: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33070: LD_ADDR_OWVAR 42
33074: PUSH
33075: LD_INT 19
33077: PUSH
33078: LD_INT 23
33080: PUSH
33081: LD_INT 19
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: PUSH
33089: LD_VAR 0 1
33093: ARRAY
33094: ST_TO_ADDR
33095: GO 33421
33097: LD_INT 18
33099: DOUBLE
33100: EQUAL
33101: IFTRUE 33105
33103: GO 33116
33105: POP
// bc_type := b_ext_radar ; 19 :
33106: LD_ADDR_OWVAR 42
33110: PUSH
33111: LD_INT 20
33113: ST_TO_ADDR
33114: GO 33421
33116: LD_INT 19
33118: DOUBLE
33119: EQUAL
33120: IFTRUE 33124
33122: GO 33135
33124: POP
// bc_type := b_ext_radio ; 20 :
33125: LD_ADDR_OWVAR 42
33129: PUSH
33130: LD_INT 22
33132: ST_TO_ADDR
33133: GO 33421
33135: LD_INT 20
33137: DOUBLE
33138: EQUAL
33139: IFTRUE 33143
33141: GO 33154
33143: POP
// bc_type := b_ext_siberium ; 21 :
33144: LD_ADDR_OWVAR 42
33148: PUSH
33149: LD_INT 21
33151: ST_TO_ADDR
33152: GO 33421
33154: LD_INT 21
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33173
33162: POP
// bc_type := b_ext_computer ; 22 :
33163: LD_ADDR_OWVAR 42
33167: PUSH
33168: LD_INT 24
33170: ST_TO_ADDR
33171: GO 33421
33173: LD_INT 22
33175: DOUBLE
33176: EQUAL
33177: IFTRUE 33181
33179: GO 33192
33181: POP
// bc_type := b_ext_track ; 23 :
33182: LD_ADDR_OWVAR 42
33186: PUSH
33187: LD_INT 16
33189: ST_TO_ADDR
33190: GO 33421
33192: LD_INT 23
33194: DOUBLE
33195: EQUAL
33196: IFTRUE 33200
33198: GO 33211
33200: POP
// bc_type := b_ext_laser ; 24 :
33201: LD_ADDR_OWVAR 42
33205: PUSH
33206: LD_INT 25
33208: ST_TO_ADDR
33209: GO 33421
33211: LD_INT 24
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33219
33217: GO 33230
33219: POP
// bc_type := b_control_tower ; 25 :
33220: LD_ADDR_OWVAR 42
33224: PUSH
33225: LD_INT 36
33227: ST_TO_ADDR
33228: GO 33421
33230: LD_INT 25
33232: DOUBLE
33233: EQUAL
33234: IFTRUE 33238
33236: GO 33249
33238: POP
// bc_type := b_breastwork ; 26 :
33239: LD_ADDR_OWVAR 42
33243: PUSH
33244: LD_INT 31
33246: ST_TO_ADDR
33247: GO 33421
33249: LD_INT 26
33251: DOUBLE
33252: EQUAL
33253: IFTRUE 33257
33255: GO 33268
33257: POP
// bc_type := b_bunker ; 27 :
33258: LD_ADDR_OWVAR 42
33262: PUSH
33263: LD_INT 32
33265: ST_TO_ADDR
33266: GO 33421
33268: LD_INT 27
33270: DOUBLE
33271: EQUAL
33272: IFTRUE 33276
33274: GO 33287
33276: POP
// bc_type := b_turret ; 28 :
33277: LD_ADDR_OWVAR 42
33281: PUSH
33282: LD_INT 33
33284: ST_TO_ADDR
33285: GO 33421
33287: LD_INT 28
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33295
33293: GO 33306
33295: POP
// bc_type := b_armoury ; 29 :
33296: LD_ADDR_OWVAR 42
33300: PUSH
33301: LD_INT 4
33303: ST_TO_ADDR
33304: GO 33421
33306: LD_INT 29
33308: DOUBLE
33309: EQUAL
33310: IFTRUE 33314
33312: GO 33325
33314: POP
// bc_type := b_barracks ; 30 :
33315: LD_ADDR_OWVAR 42
33319: PUSH
33320: LD_INT 5
33322: ST_TO_ADDR
33323: GO 33421
33325: LD_INT 30
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33333
33331: GO 33344
33333: POP
// bc_type := b_solar_power ; 31 :
33334: LD_ADDR_OWVAR 42
33338: PUSH
33339: LD_INT 27
33341: ST_TO_ADDR
33342: GO 33421
33344: LD_INT 31
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33352
33350: GO 33363
33352: POP
// bc_type := b_oil_power ; 32 :
33353: LD_ADDR_OWVAR 42
33357: PUSH
33358: LD_INT 26
33360: ST_TO_ADDR
33361: GO 33421
33363: LD_INT 32
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33371
33369: GO 33382
33371: POP
// bc_type := b_siberite_power ; 33 :
33372: LD_ADDR_OWVAR 42
33376: PUSH
33377: LD_INT 28
33379: ST_TO_ADDR
33380: GO 33421
33382: LD_INT 33
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33390
33388: GO 33401
33390: POP
// bc_type := b_oil_mine ; 34 :
33391: LD_ADDR_OWVAR 42
33395: PUSH
33396: LD_INT 29
33398: ST_TO_ADDR
33399: GO 33421
33401: LD_INT 34
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33420
33409: POP
// bc_type := b_siberite_mine ; end ;
33410: LD_ADDR_OWVAR 42
33414: PUSH
33415: LD_INT 30
33417: ST_TO_ADDR
33418: GO 33421
33420: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33421: LD_ADDR_VAR 0 8
33425: PUSH
33426: LD_VAR 0 5
33430: PPUSH
33431: LD_VAR 0 6
33435: PPUSH
33436: LD_VAR 0 3
33440: PPUSH
33441: CALL_OW 47
33445: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33446: LD_OWVAR 42
33450: PUSH
33451: LD_INT 32
33453: PUSH
33454: LD_INT 33
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: IN
33461: IFFALSE 33477
// PlaceWeaponTurret ( b , weapon ) ;
33463: LD_VAR 0 8
33467: PPUSH
33468: LD_VAR 0 4
33472: PPUSH
33473: CALL_OW 431
// end ;
33477: LD_VAR 0 7
33481: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33482: LD_INT 0
33484: PPUSH
33485: PPUSH
33486: PPUSH
33487: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33488: LD_ADDR_VAR 0 4
33492: PUSH
33493: LD_INT 22
33495: PUSH
33496: LD_OWVAR 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: LD_INT 30
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 30
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PPUSH
33537: CALL_OW 69
33541: ST_TO_ADDR
// if not tmp then
33542: LD_VAR 0 4
33546: NOT
33547: IFFALSE 33551
// exit ;
33549: GO 33610
// for i in tmp do
33551: LD_ADDR_VAR 0 2
33555: PUSH
33556: LD_VAR 0 4
33560: PUSH
33561: FOR_IN
33562: IFFALSE 33608
// for j = 1 to 3 do
33564: LD_ADDR_VAR 0 3
33568: PUSH
33569: DOUBLE
33570: LD_INT 1
33572: DEC
33573: ST_TO_ADDR
33574: LD_INT 3
33576: PUSH
33577: FOR_TO
33578: IFFALSE 33604
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33580: LD_VAR 0 2
33584: PPUSH
33585: CALL_OW 274
33589: PPUSH
33590: LD_VAR 0 3
33594: PPUSH
33595: LD_INT 99999
33597: PPUSH
33598: CALL_OW 277
33602: GO 33577
33604: POP
33605: POP
33606: GO 33561
33608: POP
33609: POP
// end ;
33610: LD_VAR 0 1
33614: RET
// export function hHackSetLevel10 ; var i , j ; begin
33615: LD_INT 0
33617: PPUSH
33618: PPUSH
33619: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33620: LD_ADDR_VAR 0 2
33624: PUSH
33625: LD_INT 21
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PPUSH
33635: CALL_OW 69
33639: PUSH
33640: FOR_IN
33641: IFFALSE 33693
// if IsSelected ( i ) then
33643: LD_VAR 0 2
33647: PPUSH
33648: CALL_OW 306
33652: IFFALSE 33691
// begin for j := 1 to 4 do
33654: LD_ADDR_VAR 0 3
33658: PUSH
33659: DOUBLE
33660: LD_INT 1
33662: DEC
33663: ST_TO_ADDR
33664: LD_INT 4
33666: PUSH
33667: FOR_TO
33668: IFFALSE 33689
// SetSkill ( i , j , 10 ) ;
33670: LD_VAR 0 2
33674: PPUSH
33675: LD_VAR 0 3
33679: PPUSH
33680: LD_INT 10
33682: PPUSH
33683: CALL_OW 237
33687: GO 33667
33689: POP
33690: POP
// end ;
33691: GO 33640
33693: POP
33694: POP
// end ;
33695: LD_VAR 0 1
33699: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33700: LD_INT 0
33702: PPUSH
33703: PPUSH
33704: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33705: LD_ADDR_VAR 0 2
33709: PUSH
33710: LD_INT 22
33712: PUSH
33713: LD_OWVAR 2
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 21
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PPUSH
33736: CALL_OW 69
33740: PUSH
33741: FOR_IN
33742: IFFALSE 33783
// begin for j := 1 to 4 do
33744: LD_ADDR_VAR 0 3
33748: PUSH
33749: DOUBLE
33750: LD_INT 1
33752: DEC
33753: ST_TO_ADDR
33754: LD_INT 4
33756: PUSH
33757: FOR_TO
33758: IFFALSE 33779
// SetSkill ( i , j , 10 ) ;
33760: LD_VAR 0 2
33764: PPUSH
33765: LD_VAR 0 3
33769: PPUSH
33770: LD_INT 10
33772: PPUSH
33773: CALL_OW 237
33777: GO 33757
33779: POP
33780: POP
// end ;
33781: GO 33741
33783: POP
33784: POP
// end ;
33785: LD_VAR 0 1
33789: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33790: LD_INT 0
33792: PPUSH
// uc_side := your_side ;
33793: LD_ADDR_OWVAR 20
33797: PUSH
33798: LD_OWVAR 2
33802: ST_TO_ADDR
// uc_nation := nation ;
33803: LD_ADDR_OWVAR 21
33807: PUSH
33808: LD_VAR 0 1
33812: ST_TO_ADDR
// InitHc ;
33813: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33817: LD_INT 0
33819: PPUSH
33820: LD_VAR 0 2
33824: PPUSH
33825: LD_VAR 0 3
33829: PPUSH
33830: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33834: LD_VAR 0 4
33838: PPUSH
33839: LD_VAR 0 5
33843: PPUSH
33844: CALL_OW 428
33848: PUSH
33849: LD_INT 0
33851: EQUAL
33852: IFFALSE 33876
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33854: CALL_OW 44
33858: PPUSH
33859: LD_VAR 0 4
33863: PPUSH
33864: LD_VAR 0 5
33868: PPUSH
33869: LD_INT 1
33871: PPUSH
33872: CALL_OW 48
// end ;
33876: LD_VAR 0 6
33880: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33881: LD_INT 0
33883: PPUSH
33884: PPUSH
// uc_side := your_side ;
33885: LD_ADDR_OWVAR 20
33889: PUSH
33890: LD_OWVAR 2
33894: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33895: LD_VAR 0 1
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 3
33908: PUSH
33909: LD_INT 4
33911: PUSH
33912: LD_INT 5
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: IN
33922: IFFALSE 33934
// uc_nation := nation_american else
33924: LD_ADDR_OWVAR 21
33928: PUSH
33929: LD_INT 1
33931: ST_TO_ADDR
33932: GO 33977
// if chassis in [ 11 , 12 , 13 , 14 ] then
33934: LD_VAR 0 1
33938: PUSH
33939: LD_INT 11
33941: PUSH
33942: LD_INT 12
33944: PUSH
33945: LD_INT 13
33947: PUSH
33948: LD_INT 14
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: IN
33957: IFFALSE 33969
// uc_nation := nation_arabian else
33959: LD_ADDR_OWVAR 21
33963: PUSH
33964: LD_INT 2
33966: ST_TO_ADDR
33967: GO 33977
// uc_nation := nation_russian ;
33969: LD_ADDR_OWVAR 21
33973: PUSH
33974: LD_INT 3
33976: ST_TO_ADDR
// vc_chassis := chassis ;
33977: LD_ADDR_OWVAR 37
33981: PUSH
33982: LD_VAR 0 1
33986: ST_TO_ADDR
// vc_engine := engine ;
33987: LD_ADDR_OWVAR 39
33991: PUSH
33992: LD_VAR 0 2
33996: ST_TO_ADDR
// vc_control := control ;
33997: LD_ADDR_OWVAR 38
34001: PUSH
34002: LD_VAR 0 3
34006: ST_TO_ADDR
// vc_weapon := weapon ;
34007: LD_ADDR_OWVAR 40
34011: PUSH
34012: LD_VAR 0 4
34016: ST_TO_ADDR
// un := CreateVehicle ;
34017: LD_ADDR_VAR 0 8
34021: PUSH
34022: CALL_OW 45
34026: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34027: LD_VAR 0 8
34031: PPUSH
34032: LD_INT 0
34034: PPUSH
34035: LD_INT 5
34037: PPUSH
34038: CALL_OW 12
34042: PPUSH
34043: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34047: LD_VAR 0 8
34051: PPUSH
34052: LD_VAR 0 5
34056: PPUSH
34057: LD_VAR 0 6
34061: PPUSH
34062: LD_INT 1
34064: PPUSH
34065: CALL_OW 48
// end ;
34069: LD_VAR 0 7
34073: RET
// export hInvincible ; every 1 do
34074: GO 34076
34076: DISABLE
// hInvincible := [ ] ;
34077: LD_ADDR_EXP 108
34081: PUSH
34082: EMPTY
34083: ST_TO_ADDR
34084: END
// every 10 do var i ;
34085: GO 34087
34087: DISABLE
34088: LD_INT 0
34090: PPUSH
// begin enable ;
34091: ENABLE
// if not hInvincible then
34092: LD_EXP 108
34096: NOT
34097: IFFALSE 34101
// exit ;
34099: GO 34145
// for i in hInvincible do
34101: LD_ADDR_VAR 0 1
34105: PUSH
34106: LD_EXP 108
34110: PUSH
34111: FOR_IN
34112: IFFALSE 34143
// if GetLives ( i ) < 1000 then
34114: LD_VAR 0 1
34118: PPUSH
34119: CALL_OW 256
34123: PUSH
34124: LD_INT 1000
34126: LESS
34127: IFFALSE 34141
// SetLives ( i , 1000 ) ;
34129: LD_VAR 0 1
34133: PPUSH
34134: LD_INT 1000
34136: PPUSH
34137: CALL_OW 234
34141: GO 34111
34143: POP
34144: POP
// end ;
34145: PPOPN 1
34147: END
// export function hHackInvincible ; var i ; begin
34148: LD_INT 0
34150: PPUSH
34151: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34152: LD_ADDR_VAR 0 2
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 21
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 21
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: LIST
34184: PPUSH
34185: CALL_OW 69
34189: PUSH
34190: FOR_IN
34191: IFFALSE 34252
// if IsSelected ( i ) then
34193: LD_VAR 0 2
34197: PPUSH
34198: CALL_OW 306
34202: IFFALSE 34250
// begin if i in hInvincible then
34204: LD_VAR 0 2
34208: PUSH
34209: LD_EXP 108
34213: IN
34214: IFFALSE 34234
// hInvincible := hInvincible diff i else
34216: LD_ADDR_EXP 108
34220: PUSH
34221: LD_EXP 108
34225: PUSH
34226: LD_VAR 0 2
34230: DIFF
34231: ST_TO_ADDR
34232: GO 34250
// hInvincible := hInvincible union i ;
34234: LD_ADDR_EXP 108
34238: PUSH
34239: LD_EXP 108
34243: PUSH
34244: LD_VAR 0 2
34248: UNION
34249: ST_TO_ADDR
// end ;
34250: GO 34190
34252: POP
34253: POP
// end ;
34254: LD_VAR 0 1
34258: RET
// export function hHackInvisible ; var i , j ; begin
34259: LD_INT 0
34261: PPUSH
34262: PPUSH
34263: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34264: LD_ADDR_VAR 0 2
34268: PUSH
34269: LD_INT 21
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PPUSH
34279: CALL_OW 69
34283: PUSH
34284: FOR_IN
34285: IFFALSE 34309
// if IsSelected ( i ) then
34287: LD_VAR 0 2
34291: PPUSH
34292: CALL_OW 306
34296: IFFALSE 34307
// ComForceInvisible ( i ) ;
34298: LD_VAR 0 2
34302: PPUSH
34303: CALL_OW 496
34307: GO 34284
34309: POP
34310: POP
// end ;
34311: LD_VAR 0 1
34315: RET
// export function hHackChangeYourSide ; begin
34316: LD_INT 0
34318: PPUSH
// if your_side = 8 then
34319: LD_OWVAR 2
34323: PUSH
34324: LD_INT 8
34326: EQUAL
34327: IFFALSE 34339
// your_side := 0 else
34329: LD_ADDR_OWVAR 2
34333: PUSH
34334: LD_INT 0
34336: ST_TO_ADDR
34337: GO 34353
// your_side := your_side + 1 ;
34339: LD_ADDR_OWVAR 2
34343: PUSH
34344: LD_OWVAR 2
34348: PUSH
34349: LD_INT 1
34351: PLUS
34352: ST_TO_ADDR
// end ;
34353: LD_VAR 0 1
34357: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34358: LD_INT 0
34360: PPUSH
34361: PPUSH
34362: PPUSH
// for i in all_units do
34363: LD_ADDR_VAR 0 2
34367: PUSH
34368: LD_OWVAR 3
34372: PUSH
34373: FOR_IN
34374: IFFALSE 34452
// if IsSelected ( i ) then
34376: LD_VAR 0 2
34380: PPUSH
34381: CALL_OW 306
34385: IFFALSE 34450
// begin j := GetSide ( i ) ;
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_VAR 0 2
34396: PPUSH
34397: CALL_OW 255
34401: ST_TO_ADDR
// if j = 8 then
34402: LD_VAR 0 3
34406: PUSH
34407: LD_INT 8
34409: EQUAL
34410: IFFALSE 34422
// j := 0 else
34412: LD_ADDR_VAR 0 3
34416: PUSH
34417: LD_INT 0
34419: ST_TO_ADDR
34420: GO 34436
// j := j + 1 ;
34422: LD_ADDR_VAR 0 3
34426: PUSH
34427: LD_VAR 0 3
34431: PUSH
34432: LD_INT 1
34434: PLUS
34435: ST_TO_ADDR
// SetSide ( i , j ) ;
34436: LD_VAR 0 2
34440: PPUSH
34441: LD_VAR 0 3
34445: PPUSH
34446: CALL_OW 235
// end ;
34450: GO 34373
34452: POP
34453: POP
// end ;
34454: LD_VAR 0 1
34458: RET
// export function hHackFog ; begin
34459: LD_INT 0
34461: PPUSH
// FogOff ( true ) ;
34462: LD_INT 1
34464: PPUSH
34465: CALL_OW 344
// end ;
34469: LD_VAR 0 1
34473: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34474: LD_INT 0
34476: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34477: LD_VAR 0 1
34481: PPUSH
34482: LD_VAR 0 2
34486: PPUSH
34487: LD_VAR 0 3
34491: PPUSH
34492: LD_INT 1
34494: PPUSH
34495: LD_INT 1
34497: PPUSH
34498: CALL_OW 483
// CenterOnXY ( x , y ) ;
34502: LD_VAR 0 2
34506: PPUSH
34507: LD_VAR 0 3
34511: PPUSH
34512: CALL_OW 84
// end ;
34516: LD_VAR 0 4
34520: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34521: LD_INT 0
34523: PPUSH
34524: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34525: LD_VAR 0 1
34529: NOT
34530: PUSH
34531: LD_VAR 0 2
34535: PPUSH
34536: LD_VAR 0 3
34540: PPUSH
34541: CALL_OW 488
34545: NOT
34546: OR
34547: PUSH
34548: LD_VAR 0 1
34552: PPUSH
34553: CALL_OW 266
34557: PUSH
34558: LD_INT 3
34560: NONEQUAL
34561: PUSH
34562: LD_VAR 0 1
34566: PPUSH
34567: CALL_OW 247
34571: PUSH
34572: LD_INT 1
34574: EQUAL
34575: NOT
34576: AND
34577: OR
34578: IFFALSE 34582
// exit ;
34580: GO 34731
// if GetType ( factory ) = unit_human then
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 247
34591: PUSH
34592: LD_INT 1
34594: EQUAL
34595: IFFALSE 34612
// factory := IsInUnit ( factory ) ;
34597: LD_ADDR_VAR 0 1
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 310
34611: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 266
34621: PUSH
34622: LD_INT 3
34624: NONEQUAL
34625: IFFALSE 34629
// exit ;
34627: GO 34731
// if HexInfo ( x , y ) = factory then
34629: LD_VAR 0 2
34633: PPUSH
34634: LD_VAR 0 3
34638: PPUSH
34639: CALL_OW 428
34643: PUSH
34644: LD_VAR 0 1
34648: EQUAL
34649: IFFALSE 34676
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34651: LD_ADDR_EXP 109
34655: PUSH
34656: LD_EXP 109
34660: PPUSH
34661: LD_VAR 0 1
34665: PPUSH
34666: LD_INT 0
34668: PPUSH
34669: CALL_OW 1
34673: ST_TO_ADDR
34674: GO 34727
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34676: LD_ADDR_EXP 109
34680: PUSH
34681: LD_EXP 109
34685: PPUSH
34686: LD_VAR 0 1
34690: PPUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 255
34700: PUSH
34701: LD_VAR 0 1
34705: PUSH
34706: LD_VAR 0 2
34710: PUSH
34711: LD_VAR 0 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: PPUSH
34722: CALL_OW 1
34726: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34727: CALL 34736 0 0
// end ;
34731: LD_VAR 0 4
34735: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34736: LD_INT 0
34738: PPUSH
34739: PPUSH
34740: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34741: LD_STRING resetFactoryWaypoint();
34743: PPUSH
34744: CALL_OW 559
// if factoryWaypoints then
34748: LD_EXP 109
34752: IFFALSE 34878
// begin list := PrepareArray ( factoryWaypoints ) ;
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_EXP 109
34763: PPUSH
34764: CALL 81347 0 1
34768: ST_TO_ADDR
// for i := 1 to list do
34769: LD_ADDR_VAR 0 2
34773: PUSH
34774: DOUBLE
34775: LD_INT 1
34777: DEC
34778: ST_TO_ADDR
34779: LD_VAR 0 3
34783: PUSH
34784: FOR_TO
34785: IFFALSE 34876
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34787: LD_STRING setFactoryWaypointXY(
34789: PUSH
34790: LD_VAR 0 3
34794: PUSH
34795: LD_VAR 0 2
34799: ARRAY
34800: PUSH
34801: LD_INT 1
34803: ARRAY
34804: STR
34805: PUSH
34806: LD_STRING ,
34808: STR
34809: PUSH
34810: LD_VAR 0 3
34814: PUSH
34815: LD_VAR 0 2
34819: ARRAY
34820: PUSH
34821: LD_INT 2
34823: ARRAY
34824: STR
34825: PUSH
34826: LD_STRING ,
34828: STR
34829: PUSH
34830: LD_VAR 0 3
34834: PUSH
34835: LD_VAR 0 2
34839: ARRAY
34840: PUSH
34841: LD_INT 3
34843: ARRAY
34844: STR
34845: PUSH
34846: LD_STRING ,
34848: STR
34849: PUSH
34850: LD_VAR 0 3
34854: PUSH
34855: LD_VAR 0 2
34859: ARRAY
34860: PUSH
34861: LD_INT 4
34863: ARRAY
34864: STR
34865: PUSH
34866: LD_STRING )
34868: STR
34869: PPUSH
34870: CALL_OW 559
34874: GO 34784
34876: POP
34877: POP
// end ; end ;
34878: LD_VAR 0 1
34882: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34883: LD_INT 0
34885: PPUSH
// if HexInfo ( x , y ) = warehouse then
34886: LD_VAR 0 2
34890: PPUSH
34891: LD_VAR 0 3
34895: PPUSH
34896: CALL_OW 428
34900: PUSH
34901: LD_VAR 0 1
34905: EQUAL
34906: IFFALSE 34933
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34908: LD_ADDR_EXP 110
34912: PUSH
34913: LD_EXP 110
34917: PPUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: LD_INT 0
34925: PPUSH
34926: CALL_OW 1
34930: ST_TO_ADDR
34931: GO 34984
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34933: LD_ADDR_EXP 110
34937: PUSH
34938: LD_EXP 110
34942: PPUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: LD_VAR 0 1
34952: PPUSH
34953: CALL_OW 255
34957: PUSH
34958: LD_VAR 0 1
34962: PUSH
34963: LD_VAR 0 2
34967: PUSH
34968: LD_VAR 0 3
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: PPUSH
34979: CALL_OW 1
34983: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34984: CALL 34993 0 0
// end ;
34988: LD_VAR 0 4
34992: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34993: LD_INT 0
34995: PPUSH
34996: PPUSH
34997: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34998: LD_STRING resetWarehouseGatheringPoints();
35000: PPUSH
35001: CALL_OW 559
// if warehouseGatheringPoints then
35005: LD_EXP 110
35009: IFFALSE 35135
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35011: LD_ADDR_VAR 0 3
35015: PUSH
35016: LD_EXP 110
35020: PPUSH
35021: CALL 81347 0 1
35025: ST_TO_ADDR
// for i := 1 to list do
35026: LD_ADDR_VAR 0 2
35030: PUSH
35031: DOUBLE
35032: LD_INT 1
35034: DEC
35035: ST_TO_ADDR
35036: LD_VAR 0 3
35040: PUSH
35041: FOR_TO
35042: IFFALSE 35133
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35044: LD_STRING setWarehouseGatheringPointXY(
35046: PUSH
35047: LD_VAR 0 3
35051: PUSH
35052: LD_VAR 0 2
35056: ARRAY
35057: PUSH
35058: LD_INT 1
35060: ARRAY
35061: STR
35062: PUSH
35063: LD_STRING ,
35065: STR
35066: PUSH
35067: LD_VAR 0 3
35071: PUSH
35072: LD_VAR 0 2
35076: ARRAY
35077: PUSH
35078: LD_INT 2
35080: ARRAY
35081: STR
35082: PUSH
35083: LD_STRING ,
35085: STR
35086: PUSH
35087: LD_VAR 0 3
35091: PUSH
35092: LD_VAR 0 2
35096: ARRAY
35097: PUSH
35098: LD_INT 3
35100: ARRAY
35101: STR
35102: PUSH
35103: LD_STRING ,
35105: STR
35106: PUSH
35107: LD_VAR 0 3
35111: PUSH
35112: LD_VAR 0 2
35116: ARRAY
35117: PUSH
35118: LD_INT 4
35120: ARRAY
35121: STR
35122: PUSH
35123: LD_STRING )
35125: STR
35126: PPUSH
35127: CALL_OW 559
35131: GO 35041
35133: POP
35134: POP
// end ; end ;
35135: LD_VAR 0 1
35139: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35140: LD_EXP 110
35144: IFFALSE 35829
35146: GO 35148
35148: DISABLE
35149: LD_INT 0
35151: PPUSH
35152: PPUSH
35153: PPUSH
35154: PPUSH
35155: PPUSH
35156: PPUSH
35157: PPUSH
35158: PPUSH
35159: PPUSH
// begin enable ;
35160: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_EXP 110
35170: PPUSH
35171: CALL 81347 0 1
35175: ST_TO_ADDR
// if not list then
35176: LD_VAR 0 3
35180: NOT
35181: IFFALSE 35185
// exit ;
35183: GO 35829
// for i := 1 to list do
35185: LD_ADDR_VAR 0 1
35189: PUSH
35190: DOUBLE
35191: LD_INT 1
35193: DEC
35194: ST_TO_ADDR
35195: LD_VAR 0 3
35199: PUSH
35200: FOR_TO
35201: IFFALSE 35827
// begin depot := list [ i ] [ 2 ] ;
35203: LD_ADDR_VAR 0 8
35207: PUSH
35208: LD_VAR 0 3
35212: PUSH
35213: LD_VAR 0 1
35217: ARRAY
35218: PUSH
35219: LD_INT 2
35221: ARRAY
35222: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35223: LD_ADDR_VAR 0 5
35227: PUSH
35228: LD_VAR 0 3
35232: PUSH
35233: LD_VAR 0 1
35237: ARRAY
35238: PUSH
35239: LD_INT 1
35241: ARRAY
35242: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35243: LD_VAR 0 8
35247: PPUSH
35248: CALL_OW 301
35252: PUSH
35253: LD_VAR 0 5
35257: PUSH
35258: LD_VAR 0 8
35262: PPUSH
35263: CALL_OW 255
35267: NONEQUAL
35268: OR
35269: IFFALSE 35298
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35271: LD_ADDR_EXP 110
35275: PUSH
35276: LD_EXP 110
35280: PPUSH
35281: LD_VAR 0 8
35285: PPUSH
35286: LD_INT 0
35288: PPUSH
35289: CALL_OW 1
35293: ST_TO_ADDR
// exit ;
35294: POP
35295: POP
35296: GO 35829
// end ; x := list [ i ] [ 3 ] ;
35298: LD_ADDR_VAR 0 6
35302: PUSH
35303: LD_VAR 0 3
35307: PUSH
35308: LD_VAR 0 1
35312: ARRAY
35313: PUSH
35314: LD_INT 3
35316: ARRAY
35317: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35318: LD_ADDR_VAR 0 7
35322: PUSH
35323: LD_VAR 0 3
35327: PUSH
35328: LD_VAR 0 1
35332: ARRAY
35333: PUSH
35334: LD_INT 4
35336: ARRAY
35337: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_VAR 0 6
35347: PPUSH
35348: LD_VAR 0 7
35352: PPUSH
35353: LD_INT 16
35355: PPUSH
35356: CALL 79935 0 3
35360: ST_TO_ADDR
// if not cratesNearbyPoint then
35361: LD_VAR 0 9
35365: NOT
35366: IFFALSE 35372
// exit ;
35368: POP
35369: POP
35370: GO 35829
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35372: LD_ADDR_VAR 0 4
35376: PUSH
35377: LD_INT 22
35379: PUSH
35380: LD_VAR 0 5
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 3
35391: PUSH
35392: LD_INT 60
35394: PUSH
35395: EMPTY
35396: LIST
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 91
35404: PUSH
35405: LD_VAR 0 8
35409: PUSH
35410: LD_INT 6
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: LD_INT 25
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 25
35433: PUSH
35434: LD_INT 16
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: PPUSH
35452: CALL_OW 69
35456: PUSH
35457: LD_VAR 0 8
35461: PPUSH
35462: CALL_OW 313
35466: PPUSH
35467: LD_INT 3
35469: PUSH
35470: LD_INT 60
35472: PUSH
35473: EMPTY
35474: LIST
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 25
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 25
35495: PUSH
35496: LD_INT 16
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PPUSH
35512: CALL_OW 72
35516: UNION
35517: ST_TO_ADDR
// if tmp then
35518: LD_VAR 0 4
35522: IFFALSE 35602
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35524: LD_ADDR_VAR 0 4
35528: PUSH
35529: LD_VAR 0 4
35533: PPUSH
35534: LD_INT 3
35536: PPUSH
35537: CALL 77904 0 2
35541: ST_TO_ADDR
// for j in tmp do
35542: LD_ADDR_VAR 0 2
35546: PUSH
35547: LD_VAR 0 4
35551: PUSH
35552: FOR_IN
35553: IFFALSE 35596
// begin if IsInUnit ( j ) then
35555: LD_VAR 0 2
35559: PPUSH
35560: CALL_OW 310
35564: IFFALSE 35575
// ComExit ( j ) ;
35566: LD_VAR 0 2
35570: PPUSH
35571: CALL 77987 0 1
// AddComCollect ( j , x , y ) ;
35575: LD_VAR 0 2
35579: PPUSH
35580: LD_VAR 0 6
35584: PPUSH
35585: LD_VAR 0 7
35589: PPUSH
35590: CALL_OW 177
// end ;
35594: GO 35552
35596: POP
35597: POP
// exit ;
35598: POP
35599: POP
35600: GO 35829
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35602: LD_ADDR_VAR 0 4
35606: PUSH
35607: LD_INT 22
35609: PUSH
35610: LD_VAR 0 5
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 91
35621: PUSH
35622: LD_VAR 0 8
35626: PUSH
35627: LD_INT 8
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 34
35640: PUSH
35641: LD_INT 12
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 34
35650: PUSH
35651: LD_INT 51
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 34
35660: PUSH
35661: LD_INT 32
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 34
35670: PUSH
35671: LD_INT 89
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: PPUSH
35690: CALL_OW 69
35694: ST_TO_ADDR
// if tmp then
35695: LD_VAR 0 4
35699: IFFALSE 35825
// begin for j in tmp do
35701: LD_ADDR_VAR 0 2
35705: PUSH
35706: LD_VAR 0 4
35710: PUSH
35711: FOR_IN
35712: IFFALSE 35823
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35714: LD_VAR 0 2
35718: PPUSH
35719: CALL_OW 262
35723: PUSH
35724: LD_INT 3
35726: EQUAL
35727: PUSH
35728: LD_VAR 0 2
35732: PPUSH
35733: CALL_OW 261
35737: PUSH
35738: LD_INT 20
35740: GREATER
35741: OR
35742: PUSH
35743: LD_VAR 0 2
35747: PPUSH
35748: CALL_OW 314
35752: NOT
35753: AND
35754: PUSH
35755: LD_VAR 0 2
35759: PPUSH
35760: CALL_OW 263
35764: PUSH
35765: LD_INT 1
35767: NONEQUAL
35768: PUSH
35769: LD_VAR 0 2
35773: PPUSH
35774: CALL_OW 311
35778: OR
35779: AND
35780: IFFALSE 35821
// begin ComCollect ( j , x , y ) ;
35782: LD_VAR 0 2
35786: PPUSH
35787: LD_VAR 0 6
35791: PPUSH
35792: LD_VAR 0 7
35796: PPUSH
35797: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35801: LD_VAR 0 2
35805: PPUSH
35806: LD_VAR 0 8
35810: PPUSH
35811: CALL_OW 172
// exit ;
35815: POP
35816: POP
35817: POP
35818: POP
35819: GO 35829
// end ;
35821: GO 35711
35823: POP
35824: POP
// end ; end ;
35825: GO 35200
35827: POP
35828: POP
// end ; end_of_file
35829: PPOPN 9
35831: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35832: LD_INT 0
35834: PPUSH
35835: PPUSH
35836: PPUSH
35837: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35838: LD_VAR 0 1
35842: PPUSH
35843: CALL_OW 264
35847: PUSH
35848: LD_INT 91
35850: EQUAL
35851: IFFALSE 35923
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35853: LD_INT 68
35855: PPUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL_OW 255
35865: PPUSH
35866: CALL_OW 321
35870: PUSH
35871: LD_INT 2
35873: EQUAL
35874: IFFALSE 35886
// eff := 70 else
35876: LD_ADDR_VAR 0 4
35880: PUSH
35881: LD_INT 70
35883: ST_TO_ADDR
35884: GO 35894
// eff := 30 ;
35886: LD_ADDR_VAR 0 4
35890: PUSH
35891: LD_INT 30
35893: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35894: LD_VAR 0 1
35898: PPUSH
35899: CALL_OW 250
35903: PPUSH
35904: LD_VAR 0 1
35908: PPUSH
35909: CALL_OW 251
35913: PPUSH
35914: LD_VAR 0 4
35918: PPUSH
35919: CALL_OW 495
// end ; end ;
35923: LD_VAR 0 2
35927: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35928: LD_INT 0
35930: PPUSH
// end ;
35931: LD_VAR 0 4
35935: RET
// export function SOS_Command ( cmd ) ; begin
35936: LD_INT 0
35938: PPUSH
// end ;
35939: LD_VAR 0 2
35943: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35944: LD_INT 0
35946: PPUSH
// end ;
35947: LD_VAR 0 6
35951: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35952: LD_INT 0
35954: PPUSH
35955: PPUSH
// if not vehicle or not factory then
35956: LD_VAR 0 1
35960: NOT
35961: PUSH
35962: LD_VAR 0 2
35966: NOT
35967: OR
35968: IFFALSE 35972
// exit ;
35970: GO 36203
// if factoryWaypoints >= factory then
35972: LD_EXP 109
35976: PUSH
35977: LD_VAR 0 2
35981: GREATEREQUAL
35982: IFFALSE 36203
// if factoryWaypoints [ factory ] then
35984: LD_EXP 109
35988: PUSH
35989: LD_VAR 0 2
35993: ARRAY
35994: IFFALSE 36203
// begin if GetControl ( vehicle ) = control_manual then
35996: LD_VAR 0 1
36000: PPUSH
36001: CALL_OW 263
36005: PUSH
36006: LD_INT 1
36008: EQUAL
36009: IFFALSE 36090
// begin driver := IsDrivenBy ( vehicle ) ;
36011: LD_ADDR_VAR 0 4
36015: PUSH
36016: LD_VAR 0 1
36020: PPUSH
36021: CALL_OW 311
36025: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36026: LD_VAR 0 4
36030: PPUSH
36031: LD_EXP 109
36035: PUSH
36036: LD_VAR 0 2
36040: ARRAY
36041: PUSH
36042: LD_INT 3
36044: ARRAY
36045: PPUSH
36046: LD_EXP 109
36050: PUSH
36051: LD_VAR 0 2
36055: ARRAY
36056: PUSH
36057: LD_INT 4
36059: ARRAY
36060: PPUSH
36061: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36065: LD_VAR 0 4
36069: PPUSH
36070: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36074: LD_VAR 0 4
36078: PPUSH
36079: LD_VAR 0 2
36083: PPUSH
36084: CALL_OW 180
// end else
36088: GO 36203
// if GetControl ( vehicle ) = control_remote then
36090: LD_VAR 0 1
36094: PPUSH
36095: CALL_OW 263
36099: PUSH
36100: LD_INT 2
36102: EQUAL
36103: IFFALSE 36164
// begin wait ( 0 0$2 ) ;
36105: LD_INT 70
36107: PPUSH
36108: CALL_OW 67
// if Connect ( vehicle ) then
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL 48227 0 1
36121: IFFALSE 36162
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36123: LD_VAR 0 1
36127: PPUSH
36128: LD_EXP 109
36132: PUSH
36133: LD_VAR 0 2
36137: ARRAY
36138: PUSH
36139: LD_INT 3
36141: ARRAY
36142: PPUSH
36143: LD_EXP 109
36147: PUSH
36148: LD_VAR 0 2
36152: ARRAY
36153: PUSH
36154: LD_INT 4
36156: ARRAY
36157: PPUSH
36158: CALL_OW 171
// end else
36162: GO 36203
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36164: LD_VAR 0 1
36168: PPUSH
36169: LD_EXP 109
36173: PUSH
36174: LD_VAR 0 2
36178: ARRAY
36179: PUSH
36180: LD_INT 3
36182: ARRAY
36183: PPUSH
36184: LD_EXP 109
36188: PUSH
36189: LD_VAR 0 2
36193: ARRAY
36194: PUSH
36195: LD_INT 4
36197: ARRAY
36198: PPUSH
36199: CALL_OW 171
// end ; end ;
36203: LD_VAR 0 3
36207: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36208: LD_INT 0
36210: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36211: LD_VAR 0 1
36215: PUSH
36216: LD_INT 250
36218: EQUAL
36219: PUSH
36220: LD_VAR 0 2
36224: PPUSH
36225: CALL_OW 264
36229: PUSH
36230: LD_INT 81
36232: EQUAL
36233: AND
36234: IFFALSE 36255
// MinerPlaceMine ( unit , x , y ) ;
36236: LD_VAR 0 2
36240: PPUSH
36241: LD_VAR 0 4
36245: PPUSH
36246: LD_VAR 0 5
36250: PPUSH
36251: CALL 38640 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36255: LD_VAR 0 1
36259: PUSH
36260: LD_INT 251
36262: EQUAL
36263: PUSH
36264: LD_VAR 0 2
36268: PPUSH
36269: CALL_OW 264
36273: PUSH
36274: LD_INT 81
36276: EQUAL
36277: AND
36278: IFFALSE 36299
// MinerDetonateMine ( unit , x , y ) ;
36280: LD_VAR 0 2
36284: PPUSH
36285: LD_VAR 0 4
36289: PPUSH
36290: LD_VAR 0 5
36294: PPUSH
36295: CALL 38915 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36299: LD_VAR 0 1
36303: PUSH
36304: LD_INT 252
36306: EQUAL
36307: PUSH
36308: LD_VAR 0 2
36312: PPUSH
36313: CALL_OW 264
36317: PUSH
36318: LD_INT 81
36320: EQUAL
36321: AND
36322: IFFALSE 36343
// MinerCreateMinefield ( unit , x , y ) ;
36324: LD_VAR 0 2
36328: PPUSH
36329: LD_VAR 0 4
36333: PPUSH
36334: LD_VAR 0 5
36338: PPUSH
36339: CALL 39332 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36343: LD_VAR 0 1
36347: PUSH
36348: LD_INT 253
36350: EQUAL
36351: PUSH
36352: LD_VAR 0 2
36356: PPUSH
36357: CALL_OW 257
36361: PUSH
36362: LD_INT 5
36364: EQUAL
36365: AND
36366: IFFALSE 36387
// ComBinocular ( unit , x , y ) ;
36368: LD_VAR 0 2
36372: PPUSH
36373: LD_VAR 0 4
36377: PPUSH
36378: LD_VAR 0 5
36382: PPUSH
36383: CALL 39701 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36387: LD_VAR 0 1
36391: PUSH
36392: LD_INT 254
36394: EQUAL
36395: PUSH
36396: LD_VAR 0 2
36400: PPUSH
36401: CALL_OW 264
36405: PUSH
36406: LD_INT 99
36408: EQUAL
36409: AND
36410: PUSH
36411: LD_VAR 0 3
36415: PPUSH
36416: CALL_OW 263
36420: PUSH
36421: LD_INT 3
36423: EQUAL
36424: AND
36425: IFFALSE 36441
// HackDestroyVehicle ( unit , selectedUnit ) ;
36427: LD_VAR 0 2
36431: PPUSH
36432: LD_VAR 0 3
36436: PPUSH
36437: CALL 38004 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36441: LD_VAR 0 1
36445: PUSH
36446: LD_INT 255
36448: EQUAL
36449: PUSH
36450: LD_VAR 0 2
36454: PPUSH
36455: CALL_OW 264
36459: PUSH
36460: LD_INT 14
36462: PUSH
36463: LD_INT 53
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: IN
36470: AND
36471: PUSH
36472: LD_VAR 0 4
36476: PPUSH
36477: LD_VAR 0 5
36481: PPUSH
36482: CALL_OW 488
36486: AND
36487: IFFALSE 36511
// CutTreeXYR ( unit , x , y , 12 ) ;
36489: LD_VAR 0 2
36493: PPUSH
36494: LD_VAR 0 4
36498: PPUSH
36499: LD_VAR 0 5
36503: PPUSH
36504: LD_INT 12
36506: PPUSH
36507: CALL 36574 0 4
// if cmd = 256 then
36511: LD_VAR 0 1
36515: PUSH
36516: LD_INT 256
36518: EQUAL
36519: IFFALSE 36540
// SetFactoryWaypoint ( unit , x , y ) ;
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_VAR 0 4
36530: PPUSH
36531: LD_VAR 0 5
36535: PPUSH
36536: CALL 34521 0 3
// if cmd = 257 then
36540: LD_VAR 0 1
36544: PUSH
36545: LD_INT 257
36547: EQUAL
36548: IFFALSE 36569
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36550: LD_VAR 0 2
36554: PPUSH
36555: LD_VAR 0 4
36559: PPUSH
36560: LD_VAR 0 5
36564: PPUSH
36565: CALL 34883 0 3
// end ;
36569: LD_VAR 0 6
36573: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36574: LD_INT 0
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
36583: PPUSH
36584: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36585: LD_VAR 0 1
36589: NOT
36590: PUSH
36591: LD_VAR 0 2
36595: PPUSH
36596: LD_VAR 0 3
36600: PPUSH
36601: CALL_OW 488
36605: NOT
36606: OR
36607: PUSH
36608: LD_VAR 0 4
36612: NOT
36613: OR
36614: IFFALSE 36618
// exit ;
36616: GO 36958
// list := [ ] ;
36618: LD_ADDR_VAR 0 13
36622: PUSH
36623: EMPTY
36624: ST_TO_ADDR
// if x - r < 0 then
36625: LD_VAR 0 2
36629: PUSH
36630: LD_VAR 0 4
36634: MINUS
36635: PUSH
36636: LD_INT 0
36638: LESS
36639: IFFALSE 36651
// min_x := 0 else
36641: LD_ADDR_VAR 0 7
36645: PUSH
36646: LD_INT 0
36648: ST_TO_ADDR
36649: GO 36667
// min_x := x - r ;
36651: LD_ADDR_VAR 0 7
36655: PUSH
36656: LD_VAR 0 2
36660: PUSH
36661: LD_VAR 0 4
36665: MINUS
36666: ST_TO_ADDR
// if y - r < 0 then
36667: LD_VAR 0 3
36671: PUSH
36672: LD_VAR 0 4
36676: MINUS
36677: PUSH
36678: LD_INT 0
36680: LESS
36681: IFFALSE 36693
// min_y := 0 else
36683: LD_ADDR_VAR 0 8
36687: PUSH
36688: LD_INT 0
36690: ST_TO_ADDR
36691: GO 36709
// min_y := y - r ;
36693: LD_ADDR_VAR 0 8
36697: PUSH
36698: LD_VAR 0 3
36702: PUSH
36703: LD_VAR 0 4
36707: MINUS
36708: ST_TO_ADDR
// max_x := x + r ;
36709: LD_ADDR_VAR 0 9
36713: PUSH
36714: LD_VAR 0 2
36718: PUSH
36719: LD_VAR 0 4
36723: PLUS
36724: ST_TO_ADDR
// max_y := y + r ;
36725: LD_ADDR_VAR 0 10
36729: PUSH
36730: LD_VAR 0 3
36734: PUSH
36735: LD_VAR 0 4
36739: PLUS
36740: ST_TO_ADDR
// for _x = min_x to max_x do
36741: LD_ADDR_VAR 0 11
36745: PUSH
36746: DOUBLE
36747: LD_VAR 0 7
36751: DEC
36752: ST_TO_ADDR
36753: LD_VAR 0 9
36757: PUSH
36758: FOR_TO
36759: IFFALSE 36876
// for _y = min_y to max_y do
36761: LD_ADDR_VAR 0 12
36765: PUSH
36766: DOUBLE
36767: LD_VAR 0 8
36771: DEC
36772: ST_TO_ADDR
36773: LD_VAR 0 10
36777: PUSH
36778: FOR_TO
36779: IFFALSE 36872
// begin if not ValidHex ( _x , _y ) then
36781: LD_VAR 0 11
36785: PPUSH
36786: LD_VAR 0 12
36790: PPUSH
36791: CALL_OW 488
36795: NOT
36796: IFFALSE 36800
// continue ;
36798: GO 36778
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36800: LD_VAR 0 11
36804: PPUSH
36805: LD_VAR 0 12
36809: PPUSH
36810: CALL_OW 351
36814: PUSH
36815: LD_VAR 0 11
36819: PPUSH
36820: LD_VAR 0 12
36824: PPUSH
36825: CALL_OW 554
36829: AND
36830: IFFALSE 36870
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36832: LD_ADDR_VAR 0 13
36836: PUSH
36837: LD_VAR 0 13
36841: PPUSH
36842: LD_VAR 0 13
36846: PUSH
36847: LD_INT 1
36849: PLUS
36850: PPUSH
36851: LD_VAR 0 11
36855: PUSH
36856: LD_VAR 0 12
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PPUSH
36865: CALL_OW 2
36869: ST_TO_ADDR
// end ;
36870: GO 36778
36872: POP
36873: POP
36874: GO 36758
36876: POP
36877: POP
// if not list then
36878: LD_VAR 0 13
36882: NOT
36883: IFFALSE 36887
// exit ;
36885: GO 36958
// for i in list do
36887: LD_ADDR_VAR 0 6
36891: PUSH
36892: LD_VAR 0 13
36896: PUSH
36897: FOR_IN
36898: IFFALSE 36956
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36900: LD_VAR 0 1
36904: PPUSH
36905: LD_STRING M
36907: PUSH
36908: LD_VAR 0 6
36912: PUSH
36913: LD_INT 1
36915: ARRAY
36916: PUSH
36917: LD_VAR 0 6
36921: PUSH
36922: LD_INT 2
36924: ARRAY
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: PPUSH
36950: CALL_OW 447
36954: GO 36897
36956: POP
36957: POP
// end ;
36958: LD_VAR 0 5
36962: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36963: LD_EXP 112
36967: NOT
36968: IFFALSE 37018
36970: GO 36972
36972: DISABLE
// begin initHack := true ;
36973: LD_ADDR_EXP 112
36977: PUSH
36978: LD_INT 1
36980: ST_TO_ADDR
// hackTanks := [ ] ;
36981: LD_ADDR_EXP 113
36985: PUSH
36986: EMPTY
36987: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36988: LD_ADDR_EXP 114
36992: PUSH
36993: EMPTY
36994: ST_TO_ADDR
// hackLimit := 3 ;
36995: LD_ADDR_EXP 115
36999: PUSH
37000: LD_INT 3
37002: ST_TO_ADDR
// hackDist := 12 ;
37003: LD_ADDR_EXP 116
37007: PUSH
37008: LD_INT 12
37010: ST_TO_ADDR
// hackCounter := [ ] ;
37011: LD_ADDR_EXP 117
37015: PUSH
37016: EMPTY
37017: ST_TO_ADDR
// end ;
37018: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37019: LD_EXP 112
37023: PUSH
37024: LD_INT 34
37026: PUSH
37027: LD_INT 99
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PPUSH
37034: CALL_OW 69
37038: AND
37039: IFFALSE 37292
37041: GO 37043
37043: DISABLE
37044: LD_INT 0
37046: PPUSH
37047: PPUSH
// begin enable ;
37048: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37049: LD_ADDR_VAR 0 1
37053: PUSH
37054: LD_INT 34
37056: PUSH
37057: LD_INT 99
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PPUSH
37064: CALL_OW 69
37068: PUSH
37069: FOR_IN
37070: IFFALSE 37290
// begin if not i in hackTanks then
37072: LD_VAR 0 1
37076: PUSH
37077: LD_EXP 113
37081: IN
37082: NOT
37083: IFFALSE 37166
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37085: LD_ADDR_EXP 113
37089: PUSH
37090: LD_EXP 113
37094: PPUSH
37095: LD_EXP 113
37099: PUSH
37100: LD_INT 1
37102: PLUS
37103: PPUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: CALL_OW 1
37113: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37114: LD_ADDR_EXP 114
37118: PUSH
37119: LD_EXP 114
37123: PPUSH
37124: LD_EXP 114
37128: PUSH
37129: LD_INT 1
37131: PLUS
37132: PPUSH
37133: EMPTY
37134: PPUSH
37135: CALL_OW 1
37139: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37140: LD_ADDR_EXP 117
37144: PUSH
37145: LD_EXP 117
37149: PPUSH
37150: LD_EXP 117
37154: PUSH
37155: LD_INT 1
37157: PLUS
37158: PPUSH
37159: EMPTY
37160: PPUSH
37161: CALL_OW 1
37165: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 302
37175: NOT
37176: IFFALSE 37189
// begin HackUnlinkAll ( i ) ;
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL 37295 0 1
// continue ;
37187: GO 37069
// end ; HackCheckCapturedStatus ( i ) ;
37189: LD_VAR 0 1
37193: PPUSH
37194: CALL 37738 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37198: LD_ADDR_VAR 0 2
37202: PUSH
37203: LD_INT 81
37205: PUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 255
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 33
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 91
37232: PUSH
37233: LD_VAR 0 1
37237: PUSH
37238: LD_EXP 116
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 50
37250: PUSH
37251: EMPTY
37252: LIST
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: PPUSH
37260: CALL_OW 69
37264: ST_TO_ADDR
// if not tmp then
37265: LD_VAR 0 2
37269: NOT
37270: IFFALSE 37274
// continue ;
37272: GO 37069
// HackLink ( i , tmp ) ;
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: CALL 37431 0 2
// end ;
37288: GO 37069
37290: POP
37291: POP
// end ;
37292: PPOPN 2
37294: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37295: LD_INT 0
37297: PPUSH
37298: PPUSH
37299: PPUSH
// if not hack in hackTanks then
37300: LD_VAR 0 1
37304: PUSH
37305: LD_EXP 113
37309: IN
37310: NOT
37311: IFFALSE 37315
// exit ;
37313: GO 37426
// index := GetElementIndex ( hackTanks , hack ) ;
37315: LD_ADDR_VAR 0 4
37319: PUSH
37320: LD_EXP 113
37324: PPUSH
37325: LD_VAR 0 1
37329: PPUSH
37330: CALL 45043 0 2
37334: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37335: LD_EXP 114
37339: PUSH
37340: LD_VAR 0 4
37344: ARRAY
37345: IFFALSE 37426
// begin for i in hackTanksCaptured [ index ] do
37347: LD_ADDR_VAR 0 3
37351: PUSH
37352: LD_EXP 114
37356: PUSH
37357: LD_VAR 0 4
37361: ARRAY
37362: PUSH
37363: FOR_IN
37364: IFFALSE 37390
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37366: LD_VAR 0 3
37370: PUSH
37371: LD_INT 1
37373: ARRAY
37374: PPUSH
37375: LD_VAR 0 3
37379: PUSH
37380: LD_INT 2
37382: ARRAY
37383: PPUSH
37384: CALL_OW 235
37388: GO 37363
37390: POP
37391: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37392: LD_ADDR_EXP 114
37396: PUSH
37397: LD_EXP 114
37401: PPUSH
37402: LD_VAR 0 4
37406: PPUSH
37407: EMPTY
37408: PPUSH
37409: CALL_OW 1
37413: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37414: LD_VAR 0 1
37418: PPUSH
37419: LD_INT 0
37421: PPUSH
37422: CALL_OW 505
// end ; end ;
37426: LD_VAR 0 2
37430: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37431: LD_INT 0
37433: PPUSH
37434: PPUSH
37435: PPUSH
// if not hack in hackTanks or not vehicles then
37436: LD_VAR 0 1
37440: PUSH
37441: LD_EXP 113
37445: IN
37446: NOT
37447: PUSH
37448: LD_VAR 0 2
37452: NOT
37453: OR
37454: IFFALSE 37458
// exit ;
37456: GO 37733
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37458: LD_ADDR_VAR 0 2
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: LD_VAR 0 2
37472: PPUSH
37473: LD_INT 1
37475: PPUSH
37476: LD_INT 1
37478: PPUSH
37479: CALL 45693 0 4
37483: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37484: LD_ADDR_VAR 0 5
37488: PUSH
37489: LD_EXP 113
37493: PPUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: CALL 45043 0 2
37503: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37504: LD_EXP 114
37508: PUSH
37509: LD_VAR 0 5
37513: ARRAY
37514: PUSH
37515: LD_EXP 115
37519: LESS
37520: IFFALSE 37709
// begin for i := 1 to vehicles do
37522: LD_ADDR_VAR 0 4
37526: PUSH
37527: DOUBLE
37528: LD_INT 1
37530: DEC
37531: ST_TO_ADDR
37532: LD_VAR 0 2
37536: PUSH
37537: FOR_TO
37538: IFFALSE 37707
// begin if hackTanksCaptured [ index ] = hackLimit then
37540: LD_EXP 114
37544: PUSH
37545: LD_VAR 0 5
37549: ARRAY
37550: PUSH
37551: LD_EXP 115
37555: EQUAL
37556: IFFALSE 37560
// break ;
37558: GO 37707
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37560: LD_ADDR_EXP 117
37564: PUSH
37565: LD_EXP 117
37569: PPUSH
37570: LD_VAR 0 5
37574: PPUSH
37575: LD_EXP 117
37579: PUSH
37580: LD_VAR 0 5
37584: ARRAY
37585: PUSH
37586: LD_INT 1
37588: PLUS
37589: PPUSH
37590: CALL_OW 1
37594: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37595: LD_ADDR_EXP 114
37599: PUSH
37600: LD_EXP 114
37604: PPUSH
37605: LD_VAR 0 5
37609: PUSH
37610: LD_EXP 114
37614: PUSH
37615: LD_VAR 0 5
37619: ARRAY
37620: PUSH
37621: LD_INT 1
37623: PLUS
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PPUSH
37629: LD_VAR 0 2
37633: PUSH
37634: LD_VAR 0 4
37638: ARRAY
37639: PUSH
37640: LD_VAR 0 2
37644: PUSH
37645: LD_VAR 0 4
37649: ARRAY
37650: PPUSH
37651: CALL_OW 255
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PPUSH
37660: CALL 45258 0 3
37664: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37665: LD_VAR 0 2
37669: PUSH
37670: LD_VAR 0 4
37674: ARRAY
37675: PPUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: CALL_OW 255
37685: PPUSH
37686: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37690: LD_VAR 0 2
37694: PUSH
37695: LD_VAR 0 4
37699: ARRAY
37700: PPUSH
37701: CALL_OW 141
// end ;
37705: GO 37537
37707: POP
37708: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37709: LD_VAR 0 1
37713: PPUSH
37714: LD_EXP 114
37718: PUSH
37719: LD_VAR 0 5
37723: ARRAY
37724: PUSH
37725: LD_INT 0
37727: PLUS
37728: PPUSH
37729: CALL_OW 505
// end ;
37733: LD_VAR 0 3
37737: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37738: LD_INT 0
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
// if not hack in hackTanks then
37744: LD_VAR 0 1
37748: PUSH
37749: LD_EXP 113
37753: IN
37754: NOT
37755: IFFALSE 37759
// exit ;
37757: GO 37999
// index := GetElementIndex ( hackTanks , hack ) ;
37759: LD_ADDR_VAR 0 4
37763: PUSH
37764: LD_EXP 113
37768: PPUSH
37769: LD_VAR 0 1
37773: PPUSH
37774: CALL 45043 0 2
37778: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37779: LD_ADDR_VAR 0 3
37783: PUSH
37784: DOUBLE
37785: LD_EXP 114
37789: PUSH
37790: LD_VAR 0 4
37794: ARRAY
37795: INC
37796: ST_TO_ADDR
37797: LD_INT 1
37799: PUSH
37800: FOR_DOWNTO
37801: IFFALSE 37973
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37803: LD_ADDR_VAR 0 5
37807: PUSH
37808: LD_EXP 114
37812: PUSH
37813: LD_VAR 0 4
37817: ARRAY
37818: PUSH
37819: LD_VAR 0 3
37823: ARRAY
37824: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37825: LD_VAR 0 5
37829: PUSH
37830: LD_INT 1
37832: ARRAY
37833: PPUSH
37834: CALL_OW 302
37838: NOT
37839: PUSH
37840: LD_VAR 0 5
37844: PUSH
37845: LD_INT 1
37847: ARRAY
37848: PPUSH
37849: CALL_OW 255
37853: PUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 255
37863: NONEQUAL
37864: OR
37865: IFFALSE 37971
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37867: LD_VAR 0 5
37871: PUSH
37872: LD_INT 1
37874: ARRAY
37875: PPUSH
37876: CALL_OW 305
37880: PUSH
37881: LD_VAR 0 5
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: PPUSH
37890: CALL_OW 255
37894: PUSH
37895: LD_VAR 0 1
37899: PPUSH
37900: CALL_OW 255
37904: EQUAL
37905: AND
37906: IFFALSE 37930
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37908: LD_VAR 0 5
37912: PUSH
37913: LD_INT 1
37915: ARRAY
37916: PPUSH
37917: LD_VAR 0 5
37921: PUSH
37922: LD_INT 2
37924: ARRAY
37925: PPUSH
37926: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37930: LD_ADDR_EXP 114
37934: PUSH
37935: LD_EXP 114
37939: PPUSH
37940: LD_VAR 0 4
37944: PPUSH
37945: LD_EXP 114
37949: PUSH
37950: LD_VAR 0 4
37954: ARRAY
37955: PPUSH
37956: LD_VAR 0 3
37960: PPUSH
37961: CALL_OW 3
37965: PPUSH
37966: CALL_OW 1
37970: ST_TO_ADDR
// end ; end ;
37971: GO 37800
37973: POP
37974: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37975: LD_VAR 0 1
37979: PPUSH
37980: LD_EXP 114
37984: PUSH
37985: LD_VAR 0 4
37989: ARRAY
37990: PUSH
37991: LD_INT 0
37993: PLUS
37994: PPUSH
37995: CALL_OW 505
// end ;
37999: LD_VAR 0 2
38003: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38004: LD_INT 0
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
// if not hack in hackTanks then
38010: LD_VAR 0 1
38014: PUSH
38015: LD_EXP 113
38019: IN
38020: NOT
38021: IFFALSE 38025
// exit ;
38023: GO 38110
// index := GetElementIndex ( hackTanks , hack ) ;
38025: LD_ADDR_VAR 0 5
38029: PUSH
38030: LD_EXP 113
38034: PPUSH
38035: LD_VAR 0 1
38039: PPUSH
38040: CALL 45043 0 2
38044: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38045: LD_ADDR_VAR 0 4
38049: PUSH
38050: DOUBLE
38051: LD_INT 1
38053: DEC
38054: ST_TO_ADDR
38055: LD_EXP 114
38059: PUSH
38060: LD_VAR 0 5
38064: ARRAY
38065: PUSH
38066: FOR_TO
38067: IFFALSE 38108
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38069: LD_EXP 114
38073: PUSH
38074: LD_VAR 0 5
38078: ARRAY
38079: PUSH
38080: LD_VAR 0 4
38084: ARRAY
38085: PUSH
38086: LD_INT 1
38088: ARRAY
38089: PUSH
38090: LD_VAR 0 2
38094: EQUAL
38095: IFFALSE 38106
// KillUnit ( vehicle ) ;
38097: LD_VAR 0 2
38101: PPUSH
38102: CALL_OW 66
38106: GO 38066
38108: POP
38109: POP
// end ;
38110: LD_VAR 0 3
38114: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38115: LD_EXP 118
38119: NOT
38120: IFFALSE 38155
38122: GO 38124
38124: DISABLE
// begin initMiner := true ;
38125: LD_ADDR_EXP 118
38129: PUSH
38130: LD_INT 1
38132: ST_TO_ADDR
// minersList := [ ] ;
38133: LD_ADDR_EXP 119
38137: PUSH
38138: EMPTY
38139: ST_TO_ADDR
// minerMinesList := [ ] ;
38140: LD_ADDR_EXP 120
38144: PUSH
38145: EMPTY
38146: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38147: LD_ADDR_EXP 121
38151: PUSH
38152: LD_INT 5
38154: ST_TO_ADDR
// end ;
38155: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38156: LD_EXP 118
38160: PUSH
38161: LD_INT 34
38163: PUSH
38164: LD_INT 81
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PPUSH
38171: CALL_OW 69
38175: AND
38176: IFFALSE 38637
38178: GO 38180
38180: DISABLE
38181: LD_INT 0
38183: PPUSH
38184: PPUSH
38185: PPUSH
38186: PPUSH
// begin enable ;
38187: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38188: LD_ADDR_VAR 0 1
38192: PUSH
38193: LD_INT 34
38195: PUSH
38196: LD_INT 81
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PPUSH
38203: CALL_OW 69
38207: PUSH
38208: FOR_IN
38209: IFFALSE 38281
// begin if not i in minersList then
38211: LD_VAR 0 1
38215: PUSH
38216: LD_EXP 119
38220: IN
38221: NOT
38222: IFFALSE 38279
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38224: LD_ADDR_EXP 119
38228: PUSH
38229: LD_EXP 119
38233: PPUSH
38234: LD_EXP 119
38238: PUSH
38239: LD_INT 1
38241: PLUS
38242: PPUSH
38243: LD_VAR 0 1
38247: PPUSH
38248: CALL_OW 1
38252: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38253: LD_ADDR_EXP 120
38257: PUSH
38258: LD_EXP 120
38262: PPUSH
38263: LD_EXP 120
38267: PUSH
38268: LD_INT 1
38270: PLUS
38271: PPUSH
38272: EMPTY
38273: PPUSH
38274: CALL_OW 1
38278: ST_TO_ADDR
// end end ;
38279: GO 38208
38281: POP
38282: POP
// for i := minerMinesList downto 1 do
38283: LD_ADDR_VAR 0 1
38287: PUSH
38288: DOUBLE
38289: LD_EXP 120
38293: INC
38294: ST_TO_ADDR
38295: LD_INT 1
38297: PUSH
38298: FOR_DOWNTO
38299: IFFALSE 38635
// begin if IsLive ( minersList [ i ] ) then
38301: LD_EXP 119
38305: PUSH
38306: LD_VAR 0 1
38310: ARRAY
38311: PPUSH
38312: CALL_OW 300
38316: IFFALSE 38344
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38318: LD_EXP 119
38322: PUSH
38323: LD_VAR 0 1
38327: ARRAY
38328: PPUSH
38329: LD_EXP 120
38333: PUSH
38334: LD_VAR 0 1
38338: ARRAY
38339: PPUSH
38340: CALL_OW 505
// if not minerMinesList [ i ] then
38344: LD_EXP 120
38348: PUSH
38349: LD_VAR 0 1
38353: ARRAY
38354: NOT
38355: IFFALSE 38359
// continue ;
38357: GO 38298
// for j := minerMinesList [ i ] downto 1 do
38359: LD_ADDR_VAR 0 2
38363: PUSH
38364: DOUBLE
38365: LD_EXP 120
38369: PUSH
38370: LD_VAR 0 1
38374: ARRAY
38375: INC
38376: ST_TO_ADDR
38377: LD_INT 1
38379: PUSH
38380: FOR_DOWNTO
38381: IFFALSE 38631
// begin side := GetSide ( minersList [ i ] ) ;
38383: LD_ADDR_VAR 0 3
38387: PUSH
38388: LD_EXP 119
38392: PUSH
38393: LD_VAR 0 1
38397: ARRAY
38398: PPUSH
38399: CALL_OW 255
38403: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38404: LD_ADDR_VAR 0 4
38408: PUSH
38409: LD_EXP 120
38413: PUSH
38414: LD_VAR 0 1
38418: ARRAY
38419: PUSH
38420: LD_VAR 0 2
38424: ARRAY
38425: PUSH
38426: LD_INT 1
38428: ARRAY
38429: PPUSH
38430: LD_EXP 120
38434: PUSH
38435: LD_VAR 0 1
38439: ARRAY
38440: PUSH
38441: LD_VAR 0 2
38445: ARRAY
38446: PUSH
38447: LD_INT 2
38449: ARRAY
38450: PPUSH
38451: CALL_OW 428
38455: ST_TO_ADDR
// if not tmp then
38456: LD_VAR 0 4
38460: NOT
38461: IFFALSE 38465
// continue ;
38463: GO 38380
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38465: LD_VAR 0 4
38469: PUSH
38470: LD_INT 81
38472: PUSH
38473: LD_VAR 0 3
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PPUSH
38482: CALL_OW 69
38486: IN
38487: PUSH
38488: LD_EXP 120
38492: PUSH
38493: LD_VAR 0 1
38497: ARRAY
38498: PUSH
38499: LD_VAR 0 2
38503: ARRAY
38504: PUSH
38505: LD_INT 1
38507: ARRAY
38508: PPUSH
38509: LD_EXP 120
38513: PUSH
38514: LD_VAR 0 1
38518: ARRAY
38519: PUSH
38520: LD_VAR 0 2
38524: ARRAY
38525: PUSH
38526: LD_INT 2
38528: ARRAY
38529: PPUSH
38530: CALL_OW 458
38534: AND
38535: IFFALSE 38629
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38537: LD_EXP 120
38541: PUSH
38542: LD_VAR 0 1
38546: ARRAY
38547: PUSH
38548: LD_VAR 0 2
38552: ARRAY
38553: PUSH
38554: LD_INT 1
38556: ARRAY
38557: PPUSH
38558: LD_EXP 120
38562: PUSH
38563: LD_VAR 0 1
38567: ARRAY
38568: PUSH
38569: LD_VAR 0 2
38573: ARRAY
38574: PUSH
38575: LD_INT 2
38577: ARRAY
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38588: LD_ADDR_EXP 120
38592: PUSH
38593: LD_EXP 120
38597: PPUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_EXP 120
38607: PUSH
38608: LD_VAR 0 1
38612: ARRAY
38613: PPUSH
38614: LD_VAR 0 2
38618: PPUSH
38619: CALL_OW 3
38623: PPUSH
38624: CALL_OW 1
38628: ST_TO_ADDR
// end ; end ;
38629: GO 38380
38631: POP
38632: POP
// end ;
38633: GO 38298
38635: POP
38636: POP
// end ;
38637: PPOPN 4
38639: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38640: LD_INT 0
38642: PPUSH
38643: PPUSH
// result := false ;
38644: LD_ADDR_VAR 0 4
38648: PUSH
38649: LD_INT 0
38651: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38652: LD_VAR 0 1
38656: PPUSH
38657: CALL_OW 264
38661: PUSH
38662: LD_INT 81
38664: EQUAL
38665: NOT
38666: IFFALSE 38670
// exit ;
38668: GO 38910
// index := GetElementIndex ( minersList , unit ) ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_EXP 119
38679: PPUSH
38680: LD_VAR 0 1
38684: PPUSH
38685: CALL 45043 0 2
38689: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38690: LD_EXP 120
38694: PUSH
38695: LD_VAR 0 5
38699: ARRAY
38700: PUSH
38701: LD_EXP 121
38705: GREATEREQUAL
38706: IFFALSE 38710
// exit ;
38708: GO 38910
// ComMoveXY ( unit , x , y ) ;
38710: LD_VAR 0 1
38714: PPUSH
38715: LD_VAR 0 2
38719: PPUSH
38720: LD_VAR 0 3
38724: PPUSH
38725: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38729: LD_INT 35
38731: PPUSH
38732: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38736: LD_VAR 0 1
38740: PPUSH
38741: LD_VAR 0 2
38745: PPUSH
38746: LD_VAR 0 3
38750: PPUSH
38751: CALL 76398 0 3
38755: NOT
38756: PUSH
38757: LD_VAR 0 1
38761: PPUSH
38762: CALL_OW 314
38766: AND
38767: IFFALSE 38771
// exit ;
38769: GO 38910
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38771: LD_VAR 0 2
38775: PPUSH
38776: LD_VAR 0 3
38780: PPUSH
38781: CALL_OW 428
38785: PUSH
38786: LD_VAR 0 1
38790: EQUAL
38791: PUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: CALL_OW 314
38801: NOT
38802: AND
38803: IFFALSE 38729
// PlaySoundXY ( x , y , PlantMine ) ;
38805: LD_VAR 0 2
38809: PPUSH
38810: LD_VAR 0 3
38814: PPUSH
38815: LD_STRING PlantMine
38817: PPUSH
38818: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38822: LD_VAR 0 2
38826: PPUSH
38827: LD_VAR 0 3
38831: PPUSH
38832: LD_VAR 0 1
38836: PPUSH
38837: CALL_OW 255
38841: PPUSH
38842: LD_INT 0
38844: PPUSH
38845: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38849: LD_ADDR_EXP 120
38853: PUSH
38854: LD_EXP 120
38858: PPUSH
38859: LD_VAR 0 5
38863: PUSH
38864: LD_EXP 120
38868: PUSH
38869: LD_VAR 0 5
38873: ARRAY
38874: PUSH
38875: LD_INT 1
38877: PLUS
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PPUSH
38883: LD_VAR 0 2
38887: PUSH
38888: LD_VAR 0 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PPUSH
38897: CALL 45258 0 3
38901: ST_TO_ADDR
// result := true ;
38902: LD_ADDR_VAR 0 4
38906: PUSH
38907: LD_INT 1
38909: ST_TO_ADDR
// end ;
38910: LD_VAR 0 4
38914: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38915: LD_INT 0
38917: PPUSH
38918: PPUSH
38919: PPUSH
// if not unit in minersList then
38920: LD_VAR 0 1
38924: PUSH
38925: LD_EXP 119
38929: IN
38930: NOT
38931: IFFALSE 38935
// exit ;
38933: GO 39327
// index := GetElementIndex ( minersList , unit ) ;
38935: LD_ADDR_VAR 0 6
38939: PUSH
38940: LD_EXP 119
38944: PPUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL 45043 0 2
38954: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38955: LD_ADDR_VAR 0 5
38959: PUSH
38960: DOUBLE
38961: LD_EXP 120
38965: PUSH
38966: LD_VAR 0 6
38970: ARRAY
38971: INC
38972: ST_TO_ADDR
38973: LD_INT 1
38975: PUSH
38976: FOR_DOWNTO
38977: IFFALSE 39138
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38979: LD_EXP 120
38983: PUSH
38984: LD_VAR 0 6
38988: ARRAY
38989: PUSH
38990: LD_VAR 0 5
38994: ARRAY
38995: PUSH
38996: LD_INT 1
38998: ARRAY
38999: PUSH
39000: LD_VAR 0 2
39004: EQUAL
39005: PUSH
39006: LD_EXP 120
39010: PUSH
39011: LD_VAR 0 6
39015: ARRAY
39016: PUSH
39017: LD_VAR 0 5
39021: ARRAY
39022: PUSH
39023: LD_INT 2
39025: ARRAY
39026: PUSH
39027: LD_VAR 0 3
39031: EQUAL
39032: AND
39033: IFFALSE 39136
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39035: LD_EXP 120
39039: PUSH
39040: LD_VAR 0 6
39044: ARRAY
39045: PUSH
39046: LD_VAR 0 5
39050: ARRAY
39051: PUSH
39052: LD_INT 1
39054: ARRAY
39055: PPUSH
39056: LD_EXP 120
39060: PUSH
39061: LD_VAR 0 6
39065: ARRAY
39066: PUSH
39067: LD_VAR 0 5
39071: ARRAY
39072: PUSH
39073: LD_INT 2
39075: ARRAY
39076: PPUSH
39077: LD_VAR 0 1
39081: PPUSH
39082: CALL_OW 255
39086: PPUSH
39087: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39091: LD_ADDR_EXP 120
39095: PUSH
39096: LD_EXP 120
39100: PPUSH
39101: LD_VAR 0 6
39105: PPUSH
39106: LD_EXP 120
39110: PUSH
39111: LD_VAR 0 6
39115: ARRAY
39116: PPUSH
39117: LD_VAR 0 5
39121: PPUSH
39122: CALL_OW 3
39126: PPUSH
39127: CALL_OW 1
39131: ST_TO_ADDR
// exit ;
39132: POP
39133: POP
39134: GO 39327
// end ; end ;
39136: GO 38976
39138: POP
39139: POP
// for i := minerMinesList [ index ] downto 1 do
39140: LD_ADDR_VAR 0 5
39144: PUSH
39145: DOUBLE
39146: LD_EXP 120
39150: PUSH
39151: LD_VAR 0 6
39155: ARRAY
39156: INC
39157: ST_TO_ADDR
39158: LD_INT 1
39160: PUSH
39161: FOR_DOWNTO
39162: IFFALSE 39325
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39164: LD_EXP 120
39168: PUSH
39169: LD_VAR 0 6
39173: ARRAY
39174: PUSH
39175: LD_VAR 0 5
39179: ARRAY
39180: PUSH
39181: LD_INT 1
39183: ARRAY
39184: PPUSH
39185: LD_EXP 120
39189: PUSH
39190: LD_VAR 0 6
39194: ARRAY
39195: PUSH
39196: LD_VAR 0 5
39200: ARRAY
39201: PUSH
39202: LD_INT 2
39204: ARRAY
39205: PPUSH
39206: LD_VAR 0 2
39210: PPUSH
39211: LD_VAR 0 3
39215: PPUSH
39216: CALL_OW 298
39220: PUSH
39221: LD_INT 6
39223: LESS
39224: IFFALSE 39323
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39226: LD_EXP 120
39230: PUSH
39231: LD_VAR 0 6
39235: ARRAY
39236: PUSH
39237: LD_VAR 0 5
39241: ARRAY
39242: PUSH
39243: LD_INT 1
39245: ARRAY
39246: PPUSH
39247: LD_EXP 120
39251: PUSH
39252: LD_VAR 0 6
39256: ARRAY
39257: PUSH
39258: LD_VAR 0 5
39262: ARRAY
39263: PUSH
39264: LD_INT 2
39266: ARRAY
39267: PPUSH
39268: LD_VAR 0 1
39272: PPUSH
39273: CALL_OW 255
39277: PPUSH
39278: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39282: LD_ADDR_EXP 120
39286: PUSH
39287: LD_EXP 120
39291: PPUSH
39292: LD_VAR 0 6
39296: PPUSH
39297: LD_EXP 120
39301: PUSH
39302: LD_VAR 0 6
39306: ARRAY
39307: PPUSH
39308: LD_VAR 0 5
39312: PPUSH
39313: CALL_OW 3
39317: PPUSH
39318: CALL_OW 1
39322: ST_TO_ADDR
// end ; end ;
39323: GO 39161
39325: POP
39326: POP
// end ;
39327: LD_VAR 0 4
39331: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39332: LD_INT 0
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 264
39352: PUSH
39353: LD_INT 81
39355: EQUAL
39356: NOT
39357: PUSH
39358: LD_VAR 0 1
39362: PUSH
39363: LD_EXP 119
39367: IN
39368: NOT
39369: OR
39370: IFFALSE 39374
// exit ;
39372: GO 39696
// index := GetElementIndex ( minersList , unit ) ;
39374: LD_ADDR_VAR 0 6
39378: PUSH
39379: LD_EXP 119
39383: PPUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL 45043 0 2
39393: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39394: LD_ADDR_VAR 0 8
39398: PUSH
39399: LD_EXP 121
39403: PUSH
39404: LD_EXP 120
39408: PUSH
39409: LD_VAR 0 6
39413: ARRAY
39414: MINUS
39415: ST_TO_ADDR
// if not minesFreeAmount then
39416: LD_VAR 0 8
39420: NOT
39421: IFFALSE 39425
// exit ;
39423: GO 39696
// tmp := [ ] ;
39425: LD_ADDR_VAR 0 7
39429: PUSH
39430: EMPTY
39431: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39432: LD_ADDR_VAR 0 5
39436: PUSH
39437: DOUBLE
39438: LD_INT 1
39440: DEC
39441: ST_TO_ADDR
39442: LD_VAR 0 8
39446: PUSH
39447: FOR_TO
39448: IFFALSE 39643
// begin _d := rand ( 0 , 5 ) ;
39450: LD_ADDR_VAR 0 11
39454: PUSH
39455: LD_INT 0
39457: PPUSH
39458: LD_INT 5
39460: PPUSH
39461: CALL_OW 12
39465: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39466: LD_ADDR_VAR 0 12
39470: PUSH
39471: LD_INT 2
39473: PPUSH
39474: LD_INT 6
39476: PPUSH
39477: CALL_OW 12
39481: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39482: LD_ADDR_VAR 0 9
39486: PUSH
39487: LD_VAR 0 2
39491: PPUSH
39492: LD_VAR 0 11
39496: PPUSH
39497: LD_VAR 0 12
39501: PPUSH
39502: CALL_OW 272
39506: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39507: LD_ADDR_VAR 0 10
39511: PUSH
39512: LD_VAR 0 3
39516: PPUSH
39517: LD_VAR 0 11
39521: PPUSH
39522: LD_VAR 0 12
39526: PPUSH
39527: CALL_OW 273
39531: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39532: LD_VAR 0 9
39536: PPUSH
39537: LD_VAR 0 10
39541: PPUSH
39542: CALL_OW 488
39546: PUSH
39547: LD_VAR 0 9
39551: PUSH
39552: LD_VAR 0 10
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_VAR 0 7
39565: IN
39566: NOT
39567: AND
39568: PUSH
39569: LD_VAR 0 9
39573: PPUSH
39574: LD_VAR 0 10
39578: PPUSH
39579: CALL_OW 458
39583: NOT
39584: AND
39585: IFFALSE 39627
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39587: LD_ADDR_VAR 0 7
39591: PUSH
39592: LD_VAR 0 7
39596: PPUSH
39597: LD_VAR 0 7
39601: PUSH
39602: LD_INT 1
39604: PLUS
39605: PPUSH
39606: LD_VAR 0 9
39610: PUSH
39611: LD_VAR 0 10
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PPUSH
39620: CALL_OW 1
39624: ST_TO_ADDR
39625: GO 39641
// i := i - 1 ;
39627: LD_ADDR_VAR 0 5
39631: PUSH
39632: LD_VAR 0 5
39636: PUSH
39637: LD_INT 1
39639: MINUS
39640: ST_TO_ADDR
// end ;
39641: GO 39447
39643: POP
39644: POP
// for i in tmp do
39645: LD_ADDR_VAR 0 5
39649: PUSH
39650: LD_VAR 0 7
39654: PUSH
39655: FOR_IN
39656: IFFALSE 39694
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39658: LD_VAR 0 1
39662: PPUSH
39663: LD_VAR 0 5
39667: PUSH
39668: LD_INT 1
39670: ARRAY
39671: PPUSH
39672: LD_VAR 0 5
39676: PUSH
39677: LD_INT 2
39679: ARRAY
39680: PPUSH
39681: CALL 38640 0 3
39685: NOT
39686: IFFALSE 39692
// exit ;
39688: POP
39689: POP
39690: GO 39696
39692: GO 39655
39694: POP
39695: POP
// end ;
39696: LD_VAR 0 4
39700: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39701: LD_INT 0
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
// if not GetClass ( unit ) = class_sniper then
39710: LD_VAR 0 1
39714: PPUSH
39715: CALL_OW 257
39719: PUSH
39720: LD_INT 5
39722: EQUAL
39723: NOT
39724: IFFALSE 39728
// exit ;
39726: GO 40116
// dist := 8 ;
39728: LD_ADDR_VAR 0 5
39732: PUSH
39733: LD_INT 8
39735: ST_TO_ADDR
// viewRange := 12 ;
39736: LD_ADDR_VAR 0 7
39740: PUSH
39741: LD_INT 12
39743: ST_TO_ADDR
// side := GetSide ( unit ) ;
39744: LD_ADDR_VAR 0 6
39748: PUSH
39749: LD_VAR 0 1
39753: PPUSH
39754: CALL_OW 255
39758: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39759: LD_INT 61
39761: PPUSH
39762: LD_VAR 0 6
39766: PPUSH
39767: CALL_OW 321
39771: PUSH
39772: LD_INT 2
39774: EQUAL
39775: IFFALSE 39785
// viewRange := 16 ;
39777: LD_ADDR_VAR 0 7
39781: PUSH
39782: LD_INT 16
39784: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39785: LD_VAR 0 1
39789: PPUSH
39790: LD_VAR 0 2
39794: PPUSH
39795: LD_VAR 0 3
39799: PPUSH
39800: CALL_OW 297
39804: PUSH
39805: LD_VAR 0 5
39809: GREATER
39810: IFFALSE 39889
// begin ComMoveXY ( unit , x , y ) ;
39812: LD_VAR 0 1
39816: PPUSH
39817: LD_VAR 0 2
39821: PPUSH
39822: LD_VAR 0 3
39826: PPUSH
39827: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39831: LD_INT 35
39833: PPUSH
39834: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39838: LD_VAR 0 1
39842: PPUSH
39843: LD_VAR 0 2
39847: PPUSH
39848: LD_VAR 0 3
39852: PPUSH
39853: CALL 76398 0 3
39857: NOT
39858: IFFALSE 39862
// exit ;
39860: GO 40116
// until GetDistUnitXY ( unit , x , y ) < dist ;
39862: LD_VAR 0 1
39866: PPUSH
39867: LD_VAR 0 2
39871: PPUSH
39872: LD_VAR 0 3
39876: PPUSH
39877: CALL_OW 297
39881: PUSH
39882: LD_VAR 0 5
39886: LESS
39887: IFFALSE 39831
// end ; ComTurnXY ( unit , x , y ) ;
39889: LD_VAR 0 1
39893: PPUSH
39894: LD_VAR 0 2
39898: PPUSH
39899: LD_VAR 0 3
39903: PPUSH
39904: CALL_OW 118
// wait ( 5 ) ;
39908: LD_INT 5
39910: PPUSH
39911: CALL_OW 67
// _d := GetDir ( unit ) ;
39915: LD_ADDR_VAR 0 10
39919: PUSH
39920: LD_VAR 0 1
39924: PPUSH
39925: CALL_OW 254
39929: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39930: LD_ADDR_VAR 0 8
39934: PUSH
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 250
39944: PPUSH
39945: LD_VAR 0 10
39949: PPUSH
39950: LD_VAR 0 5
39954: PPUSH
39955: CALL_OW 272
39959: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39960: LD_ADDR_VAR 0 9
39964: PUSH
39965: LD_VAR 0 1
39969: PPUSH
39970: CALL_OW 251
39974: PPUSH
39975: LD_VAR 0 10
39979: PPUSH
39980: LD_VAR 0 5
39984: PPUSH
39985: CALL_OW 273
39989: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39990: LD_VAR 0 8
39994: PPUSH
39995: LD_VAR 0 9
39999: PPUSH
40000: CALL_OW 488
40004: NOT
40005: IFFALSE 40009
// exit ;
40007: GO 40116
// ComAnimCustom ( unit , 1 ) ;
40009: LD_VAR 0 1
40013: PPUSH
40014: LD_INT 1
40016: PPUSH
40017: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40021: LD_VAR 0 8
40025: PPUSH
40026: LD_VAR 0 9
40030: PPUSH
40031: LD_VAR 0 6
40035: PPUSH
40036: LD_VAR 0 7
40040: PPUSH
40041: CALL_OW 330
// repeat wait ( 1 ) ;
40045: LD_INT 1
40047: PPUSH
40048: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40052: LD_VAR 0 1
40056: PPUSH
40057: CALL_OW 316
40061: PUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 314
40071: OR
40072: PUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 302
40082: NOT
40083: OR
40084: PUSH
40085: LD_VAR 0 1
40089: PPUSH
40090: CALL_OW 301
40094: OR
40095: IFFALSE 40045
// RemoveSeeing ( _x , _y , side ) ;
40097: LD_VAR 0 8
40101: PPUSH
40102: LD_VAR 0 9
40106: PPUSH
40107: LD_VAR 0 6
40111: PPUSH
40112: CALL_OW 331
// end ; end_of_file
40116: LD_VAR 0 4
40120: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40121: LD_INT 0
40123: PPUSH
40124: PPUSH
// if exist_mode then
40125: LD_VAR 0 2
40129: IFFALSE 40154
// unit := CreateCharacter ( prefix & ident ) else
40131: LD_ADDR_VAR 0 5
40135: PUSH
40136: LD_VAR 0 3
40140: PUSH
40141: LD_VAR 0 1
40145: STR
40146: PPUSH
40147: CALL_OW 34
40151: ST_TO_ADDR
40152: GO 40169
// unit := NewCharacter ( ident ) ;
40154: LD_ADDR_VAR 0 5
40158: PUSH
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 25
40168: ST_TO_ADDR
// result := unit ;
40169: LD_ADDR_VAR 0 4
40173: PUSH
40174: LD_VAR 0 5
40178: ST_TO_ADDR
// end ;
40179: LD_VAR 0 4
40183: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40184: LD_INT 0
40186: PPUSH
40187: PPUSH
// if not side or not nation then
40188: LD_VAR 0 1
40192: NOT
40193: PUSH
40194: LD_VAR 0 2
40198: NOT
40199: OR
40200: IFFALSE 40204
// exit ;
40202: GO 40972
// case nation of nation_american :
40204: LD_VAR 0 2
40208: PUSH
40209: LD_INT 1
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40431
40217: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40218: LD_ADDR_VAR 0 4
40222: PUSH
40223: LD_INT 35
40225: PUSH
40226: LD_INT 45
40228: PUSH
40229: LD_INT 46
40231: PUSH
40232: LD_INT 47
40234: PUSH
40235: LD_INT 82
40237: PUSH
40238: LD_INT 83
40240: PUSH
40241: LD_INT 84
40243: PUSH
40244: LD_INT 85
40246: PUSH
40247: LD_INT 86
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 6
40258: PUSH
40259: LD_INT 15
40261: PUSH
40262: LD_INT 16
40264: PUSH
40265: LD_INT 7
40267: PUSH
40268: LD_INT 12
40270: PUSH
40271: LD_INT 13
40273: PUSH
40274: LD_INT 10
40276: PUSH
40277: LD_INT 14
40279: PUSH
40280: LD_INT 20
40282: PUSH
40283: LD_INT 21
40285: PUSH
40286: LD_INT 22
40288: PUSH
40289: LD_INT 25
40291: PUSH
40292: LD_INT 32
40294: PUSH
40295: LD_INT 27
40297: PUSH
40298: LD_INT 36
40300: PUSH
40301: LD_INT 69
40303: PUSH
40304: LD_INT 39
40306: PUSH
40307: LD_INT 34
40309: PUSH
40310: LD_INT 40
40312: PUSH
40313: LD_INT 48
40315: PUSH
40316: LD_INT 49
40318: PUSH
40319: LD_INT 50
40321: PUSH
40322: LD_INT 51
40324: PUSH
40325: LD_INT 52
40327: PUSH
40328: LD_INT 53
40330: PUSH
40331: LD_INT 54
40333: PUSH
40334: LD_INT 55
40336: PUSH
40337: LD_INT 56
40339: PUSH
40340: LD_INT 57
40342: PUSH
40343: LD_INT 58
40345: PUSH
40346: LD_INT 59
40348: PUSH
40349: LD_INT 60
40351: PUSH
40352: LD_INT 61
40354: PUSH
40355: LD_INT 62
40357: PUSH
40358: LD_INT 80
40360: PUSH
40361: LD_INT 82
40363: PUSH
40364: LD_INT 83
40366: PUSH
40367: LD_INT 84
40369: PUSH
40370: LD_INT 85
40372: PUSH
40373: LD_INT 86
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
40429: GO 40896
40431: LD_INT 2
40433: DOUBLE
40434: EQUAL
40435: IFTRUE 40439
40437: GO 40665
40439: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40440: LD_ADDR_VAR 0 4
40444: PUSH
40445: LD_INT 35
40447: PUSH
40448: LD_INT 45
40450: PUSH
40451: LD_INT 46
40453: PUSH
40454: LD_INT 47
40456: PUSH
40457: LD_INT 82
40459: PUSH
40460: LD_INT 83
40462: PUSH
40463: LD_INT 84
40465: PUSH
40466: LD_INT 85
40468: PUSH
40469: LD_INT 87
40471: PUSH
40472: LD_INT 70
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 11
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: LD_INT 4
40486: PUSH
40487: LD_INT 5
40489: PUSH
40490: LD_INT 6
40492: PUSH
40493: LD_INT 15
40495: PUSH
40496: LD_INT 18
40498: PUSH
40499: LD_INT 7
40501: PUSH
40502: LD_INT 17
40504: PUSH
40505: LD_INT 8
40507: PUSH
40508: LD_INT 20
40510: PUSH
40511: LD_INT 21
40513: PUSH
40514: LD_INT 22
40516: PUSH
40517: LD_INT 72
40519: PUSH
40520: LD_INT 26
40522: PUSH
40523: LD_INT 69
40525: PUSH
40526: LD_INT 39
40528: PUSH
40529: LD_INT 40
40531: PUSH
40532: LD_INT 41
40534: PUSH
40535: LD_INT 42
40537: PUSH
40538: LD_INT 43
40540: PUSH
40541: LD_INT 48
40543: PUSH
40544: LD_INT 49
40546: PUSH
40547: LD_INT 50
40549: PUSH
40550: LD_INT 51
40552: PUSH
40553: LD_INT 52
40555: PUSH
40556: LD_INT 53
40558: PUSH
40559: LD_INT 54
40561: PUSH
40562: LD_INT 55
40564: PUSH
40565: LD_INT 56
40567: PUSH
40568: LD_INT 60
40570: PUSH
40571: LD_INT 61
40573: PUSH
40574: LD_INT 62
40576: PUSH
40577: LD_INT 66
40579: PUSH
40580: LD_INT 67
40582: PUSH
40583: LD_INT 68
40585: PUSH
40586: LD_INT 81
40588: PUSH
40589: LD_INT 82
40591: PUSH
40592: LD_INT 83
40594: PUSH
40595: LD_INT 84
40597: PUSH
40598: LD_INT 85
40600: PUSH
40601: LD_INT 87
40603: PUSH
40604: LD_INT 88
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: ST_TO_ADDR
40663: GO 40896
40665: LD_INT 3
40667: DOUBLE
40668: EQUAL
40669: IFTRUE 40673
40671: GO 40895
40673: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40674: LD_ADDR_VAR 0 4
40678: PUSH
40679: LD_INT 46
40681: PUSH
40682: LD_INT 47
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: LD_INT 82
40693: PUSH
40694: LD_INT 83
40696: PUSH
40697: LD_INT 84
40699: PUSH
40700: LD_INT 85
40702: PUSH
40703: LD_INT 86
40705: PUSH
40706: LD_INT 11
40708: PUSH
40709: LD_INT 9
40711: PUSH
40712: LD_INT 20
40714: PUSH
40715: LD_INT 19
40717: PUSH
40718: LD_INT 21
40720: PUSH
40721: LD_INT 24
40723: PUSH
40724: LD_INT 22
40726: PUSH
40727: LD_INT 25
40729: PUSH
40730: LD_INT 28
40732: PUSH
40733: LD_INT 29
40735: PUSH
40736: LD_INT 30
40738: PUSH
40739: LD_INT 31
40741: PUSH
40742: LD_INT 37
40744: PUSH
40745: LD_INT 38
40747: PUSH
40748: LD_INT 32
40750: PUSH
40751: LD_INT 27
40753: PUSH
40754: LD_INT 33
40756: PUSH
40757: LD_INT 69
40759: PUSH
40760: LD_INT 39
40762: PUSH
40763: LD_INT 34
40765: PUSH
40766: LD_INT 40
40768: PUSH
40769: LD_INT 71
40771: PUSH
40772: LD_INT 23
40774: PUSH
40775: LD_INT 44
40777: PUSH
40778: LD_INT 48
40780: PUSH
40781: LD_INT 49
40783: PUSH
40784: LD_INT 50
40786: PUSH
40787: LD_INT 51
40789: PUSH
40790: LD_INT 52
40792: PUSH
40793: LD_INT 53
40795: PUSH
40796: LD_INT 54
40798: PUSH
40799: LD_INT 55
40801: PUSH
40802: LD_INT 56
40804: PUSH
40805: LD_INT 57
40807: PUSH
40808: LD_INT 58
40810: PUSH
40811: LD_INT 59
40813: PUSH
40814: LD_INT 63
40816: PUSH
40817: LD_INT 64
40819: PUSH
40820: LD_INT 65
40822: PUSH
40823: LD_INT 82
40825: PUSH
40826: LD_INT 83
40828: PUSH
40829: LD_INT 84
40831: PUSH
40832: LD_INT 85
40834: PUSH
40835: LD_INT 86
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: ST_TO_ADDR
40893: GO 40896
40895: POP
// if state > - 1 and state < 3 then
40896: LD_VAR 0 3
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: GREATER
40905: PUSH
40906: LD_VAR 0 3
40910: PUSH
40911: LD_INT 3
40913: LESS
40914: AND
40915: IFFALSE 40972
// for i in result do
40917: LD_ADDR_VAR 0 5
40921: PUSH
40922: LD_VAR 0 4
40926: PUSH
40927: FOR_IN
40928: IFFALSE 40970
// if GetTech ( i , side ) <> state then
40930: LD_VAR 0 5
40934: PPUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: CALL_OW 321
40944: PUSH
40945: LD_VAR 0 3
40949: NONEQUAL
40950: IFFALSE 40968
// result := result diff i ;
40952: LD_ADDR_VAR 0 4
40956: PUSH
40957: LD_VAR 0 4
40961: PUSH
40962: LD_VAR 0 5
40966: DIFF
40967: ST_TO_ADDR
40968: GO 40927
40970: POP
40971: POP
// end ;
40972: LD_VAR 0 4
40976: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40977: LD_INT 0
40979: PPUSH
40980: PPUSH
40981: PPUSH
// result := true ;
40982: LD_ADDR_VAR 0 3
40986: PUSH
40987: LD_INT 1
40989: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40990: LD_ADDR_VAR 0 5
40994: PUSH
40995: LD_VAR 0 2
40999: PPUSH
41000: CALL_OW 480
41004: ST_TO_ADDR
// if not tmp then
41005: LD_VAR 0 5
41009: NOT
41010: IFFALSE 41014
// exit ;
41012: GO 41063
// for i in tmp do
41014: LD_ADDR_VAR 0 4
41018: PUSH
41019: LD_VAR 0 5
41023: PUSH
41024: FOR_IN
41025: IFFALSE 41061
// if GetTech ( i , side ) <> state_researched then
41027: LD_VAR 0 4
41031: PPUSH
41032: LD_VAR 0 1
41036: PPUSH
41037: CALL_OW 321
41041: PUSH
41042: LD_INT 2
41044: NONEQUAL
41045: IFFALSE 41059
// begin result := false ;
41047: LD_ADDR_VAR 0 3
41051: PUSH
41052: LD_INT 0
41054: ST_TO_ADDR
// exit ;
41055: POP
41056: POP
41057: GO 41063
// end ;
41059: GO 41024
41061: POP
41062: POP
// end ;
41063: LD_VAR 0 3
41067: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41068: LD_INT 0
41070: PPUSH
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41083: LD_VAR 0 1
41087: NOT
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: CALL_OW 257
41098: PUSH
41099: LD_INT 9
41101: NONEQUAL
41102: OR
41103: IFFALSE 41107
// exit ;
41105: GO 41680
// side := GetSide ( unit ) ;
41107: LD_ADDR_VAR 0 9
41111: PUSH
41112: LD_VAR 0 1
41116: PPUSH
41117: CALL_OW 255
41121: ST_TO_ADDR
// tech_space := tech_spacanom ;
41122: LD_ADDR_VAR 0 12
41126: PUSH
41127: LD_INT 29
41129: ST_TO_ADDR
// tech_time := tech_taurad ;
41130: LD_ADDR_VAR 0 13
41134: PUSH
41135: LD_INT 28
41137: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41138: LD_ADDR_VAR 0 11
41142: PUSH
41143: LD_VAR 0 1
41147: PPUSH
41148: CALL_OW 310
41152: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41153: LD_VAR 0 11
41157: PPUSH
41158: CALL_OW 247
41162: PUSH
41163: LD_INT 2
41165: EQUAL
41166: IFFALSE 41170
// exit ;
41168: GO 41680
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41170: LD_ADDR_VAR 0 8
41174: PUSH
41175: LD_INT 81
41177: PUSH
41178: LD_VAR 0 9
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 3
41189: PUSH
41190: LD_INT 21
41192: PUSH
41193: LD_INT 3
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PPUSH
41208: CALL_OW 69
41212: ST_TO_ADDR
// if not tmp then
41213: LD_VAR 0 8
41217: NOT
41218: IFFALSE 41222
// exit ;
41220: GO 41680
// if in_unit then
41222: LD_VAR 0 11
41226: IFFALSE 41250
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41228: LD_ADDR_VAR 0 10
41232: PUSH
41233: LD_VAR 0 8
41237: PPUSH
41238: LD_VAR 0 11
41242: PPUSH
41243: CALL_OW 74
41247: ST_TO_ADDR
41248: GO 41270
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41250: LD_ADDR_VAR 0 10
41254: PUSH
41255: LD_VAR 0 8
41259: PPUSH
41260: LD_VAR 0 1
41264: PPUSH
41265: CALL_OW 74
41269: ST_TO_ADDR
// if not enemy then
41270: LD_VAR 0 10
41274: NOT
41275: IFFALSE 41279
// exit ;
41277: GO 41680
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41279: LD_VAR 0 11
41283: PUSH
41284: LD_VAR 0 11
41288: PPUSH
41289: LD_VAR 0 10
41293: PPUSH
41294: CALL_OW 296
41298: PUSH
41299: LD_INT 13
41301: GREATER
41302: AND
41303: PUSH
41304: LD_VAR 0 1
41308: PPUSH
41309: LD_VAR 0 10
41313: PPUSH
41314: CALL_OW 296
41318: PUSH
41319: LD_INT 12
41321: GREATER
41322: OR
41323: IFFALSE 41327
// exit ;
41325: GO 41680
// missile := [ 1 ] ;
41327: LD_ADDR_VAR 0 14
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41338: LD_VAR 0 9
41342: PPUSH
41343: LD_VAR 0 12
41347: PPUSH
41348: CALL_OW 325
41352: IFFALSE 41381
// missile := Replace ( missile , missile + 1 , 2 ) ;
41354: LD_ADDR_VAR 0 14
41358: PUSH
41359: LD_VAR 0 14
41363: PPUSH
41364: LD_VAR 0 14
41368: PUSH
41369: LD_INT 1
41371: PLUS
41372: PPUSH
41373: LD_INT 2
41375: PPUSH
41376: CALL_OW 1
41380: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41381: LD_VAR 0 9
41385: PPUSH
41386: LD_VAR 0 13
41390: PPUSH
41391: CALL_OW 325
41395: PUSH
41396: LD_VAR 0 10
41400: PPUSH
41401: CALL_OW 255
41405: PPUSH
41406: LD_VAR 0 13
41410: PPUSH
41411: CALL_OW 325
41415: NOT
41416: AND
41417: IFFALSE 41446
// missile := Replace ( missile , missile + 1 , 3 ) ;
41419: LD_ADDR_VAR 0 14
41423: PUSH
41424: LD_VAR 0 14
41428: PPUSH
41429: LD_VAR 0 14
41433: PUSH
41434: LD_INT 1
41436: PLUS
41437: PPUSH
41438: LD_INT 3
41440: PPUSH
41441: CALL_OW 1
41445: ST_TO_ADDR
// if missile < 2 then
41446: LD_VAR 0 14
41450: PUSH
41451: LD_INT 2
41453: LESS
41454: IFFALSE 41458
// exit ;
41456: GO 41680
// x := GetX ( enemy ) ;
41458: LD_ADDR_VAR 0 4
41462: PUSH
41463: LD_VAR 0 10
41467: PPUSH
41468: CALL_OW 250
41472: ST_TO_ADDR
// y := GetY ( enemy ) ;
41473: LD_ADDR_VAR 0 5
41477: PUSH
41478: LD_VAR 0 10
41482: PPUSH
41483: CALL_OW 251
41487: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41488: LD_ADDR_VAR 0 6
41492: PUSH
41493: LD_VAR 0 4
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PPUSH
41502: LD_INT 1
41504: PPUSH
41505: CALL_OW 12
41509: PLUS
41510: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41511: LD_ADDR_VAR 0 7
41515: PUSH
41516: LD_VAR 0 5
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PPUSH
41525: LD_INT 1
41527: PPUSH
41528: CALL_OW 12
41532: PLUS
41533: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41534: LD_VAR 0 6
41538: PPUSH
41539: LD_VAR 0 7
41543: PPUSH
41544: CALL_OW 488
41548: NOT
41549: IFFALSE 41571
// begin _x := x ;
41551: LD_ADDR_VAR 0 6
41555: PUSH
41556: LD_VAR 0 4
41560: ST_TO_ADDR
// _y := y ;
41561: LD_ADDR_VAR 0 7
41565: PUSH
41566: LD_VAR 0 5
41570: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41571: LD_ADDR_VAR 0 3
41575: PUSH
41576: LD_INT 1
41578: PPUSH
41579: LD_VAR 0 14
41583: PPUSH
41584: CALL_OW 12
41588: ST_TO_ADDR
// case i of 1 :
41589: LD_VAR 0 3
41593: PUSH
41594: LD_INT 1
41596: DOUBLE
41597: EQUAL
41598: IFTRUE 41602
41600: GO 41619
41602: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41603: LD_VAR 0 1
41607: PPUSH
41608: LD_VAR 0 10
41612: PPUSH
41613: CALL_OW 115
41617: GO 41680
41619: LD_INT 2
41621: DOUBLE
41622: EQUAL
41623: IFTRUE 41627
41625: GO 41649
41627: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41628: LD_VAR 0 1
41632: PPUSH
41633: LD_VAR 0 6
41637: PPUSH
41638: LD_VAR 0 7
41642: PPUSH
41643: CALL_OW 153
41647: GO 41680
41649: LD_INT 3
41651: DOUBLE
41652: EQUAL
41653: IFTRUE 41657
41655: GO 41679
41657: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41658: LD_VAR 0 1
41662: PPUSH
41663: LD_VAR 0 6
41667: PPUSH
41668: LD_VAR 0 7
41672: PPUSH
41673: CALL_OW 154
41677: GO 41680
41679: POP
// end ;
41680: LD_VAR 0 2
41684: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41685: LD_INT 0
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
// if not unit or not building then
41693: LD_VAR 0 1
41697: NOT
41698: PUSH
41699: LD_VAR 0 2
41703: NOT
41704: OR
41705: IFFALSE 41709
// exit ;
41707: GO 41867
// x := GetX ( building ) ;
41709: LD_ADDR_VAR 0 5
41713: PUSH
41714: LD_VAR 0 2
41718: PPUSH
41719: CALL_OW 250
41723: ST_TO_ADDR
// y := GetY ( building ) ;
41724: LD_ADDR_VAR 0 6
41728: PUSH
41729: LD_VAR 0 2
41733: PPUSH
41734: CALL_OW 251
41738: ST_TO_ADDR
// for i = 0 to 5 do
41739: LD_ADDR_VAR 0 4
41743: PUSH
41744: DOUBLE
41745: LD_INT 0
41747: DEC
41748: ST_TO_ADDR
41749: LD_INT 5
41751: PUSH
41752: FOR_TO
41753: IFFALSE 41865
// begin _x := ShiftX ( x , i , 3 ) ;
41755: LD_ADDR_VAR 0 7
41759: PUSH
41760: LD_VAR 0 5
41764: PPUSH
41765: LD_VAR 0 4
41769: PPUSH
41770: LD_INT 3
41772: PPUSH
41773: CALL_OW 272
41777: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41778: LD_ADDR_VAR 0 8
41782: PUSH
41783: LD_VAR 0 6
41787: PPUSH
41788: LD_VAR 0 4
41792: PPUSH
41793: LD_INT 3
41795: PPUSH
41796: CALL_OW 273
41800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41801: LD_VAR 0 7
41805: PPUSH
41806: LD_VAR 0 8
41810: PPUSH
41811: CALL_OW 488
41815: NOT
41816: IFFALSE 41820
// continue ;
41818: GO 41752
// if HexInfo ( _x , _y ) = 0 then
41820: LD_VAR 0 7
41824: PPUSH
41825: LD_VAR 0 8
41829: PPUSH
41830: CALL_OW 428
41834: PUSH
41835: LD_INT 0
41837: EQUAL
41838: IFFALSE 41863
// begin ComMoveXY ( unit , _x , _y ) ;
41840: LD_VAR 0 1
41844: PPUSH
41845: LD_VAR 0 7
41849: PPUSH
41850: LD_VAR 0 8
41854: PPUSH
41855: CALL_OW 111
// exit ;
41859: POP
41860: POP
41861: GO 41867
// end ; end ;
41863: GO 41752
41865: POP
41866: POP
// end ;
41867: LD_VAR 0 3
41871: RET
// export function ScanBase ( side , base_area ) ; begin
41872: LD_INT 0
41874: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41875: LD_ADDR_VAR 0 3
41879: PUSH
41880: LD_VAR 0 2
41884: PPUSH
41885: LD_INT 81
41887: PUSH
41888: LD_VAR 0 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PPUSH
41897: CALL_OW 70
41901: ST_TO_ADDR
// end ;
41902: LD_VAR 0 3
41906: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41907: LD_INT 0
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
// result := false ;
41913: LD_ADDR_VAR 0 2
41917: PUSH
41918: LD_INT 0
41920: ST_TO_ADDR
// side := GetSide ( unit ) ;
41921: LD_ADDR_VAR 0 3
41925: PUSH
41926: LD_VAR 0 1
41930: PPUSH
41931: CALL_OW 255
41935: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41936: LD_ADDR_VAR 0 4
41940: PUSH
41941: LD_VAR 0 1
41945: PPUSH
41946: CALL_OW 248
41950: ST_TO_ADDR
// case nat of 1 :
41951: LD_VAR 0 4
41955: PUSH
41956: LD_INT 1
41958: DOUBLE
41959: EQUAL
41960: IFTRUE 41964
41962: GO 41975
41964: POP
// tech := tech_lassight ; 2 :
41965: LD_ADDR_VAR 0 5
41969: PUSH
41970: LD_INT 12
41972: ST_TO_ADDR
41973: GO 42014
41975: LD_INT 2
41977: DOUBLE
41978: EQUAL
41979: IFTRUE 41983
41981: GO 41994
41983: POP
// tech := tech_mortar ; 3 :
41984: LD_ADDR_VAR 0 5
41988: PUSH
41989: LD_INT 41
41991: ST_TO_ADDR
41992: GO 42014
41994: LD_INT 3
41996: DOUBLE
41997: EQUAL
41998: IFTRUE 42002
42000: GO 42013
42002: POP
// tech := tech_bazooka ; end ;
42003: LD_ADDR_VAR 0 5
42007: PUSH
42008: LD_INT 44
42010: ST_TO_ADDR
42011: GO 42014
42013: POP
// if Researched ( side , tech ) then
42014: LD_VAR 0 3
42018: PPUSH
42019: LD_VAR 0 5
42023: PPUSH
42024: CALL_OW 325
42028: IFFALSE 42055
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42030: LD_ADDR_VAR 0 2
42034: PUSH
42035: LD_INT 5
42037: PUSH
42038: LD_INT 8
42040: PUSH
42041: LD_INT 9
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: PUSH
42049: LD_VAR 0 4
42053: ARRAY
42054: ST_TO_ADDR
// end ;
42055: LD_VAR 0 2
42059: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42060: LD_INT 0
42062: PPUSH
42063: PPUSH
42064: PPUSH
// if not mines then
42065: LD_VAR 0 2
42069: NOT
42070: IFFALSE 42074
// exit ;
42072: GO 42218
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42074: LD_ADDR_VAR 0 5
42078: PUSH
42079: LD_INT 81
42081: PUSH
42082: LD_VAR 0 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: LD_INT 21
42096: PUSH
42097: LD_INT 3
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PPUSH
42112: CALL_OW 69
42116: ST_TO_ADDR
// for i in mines do
42117: LD_ADDR_VAR 0 4
42121: PUSH
42122: LD_VAR 0 2
42126: PUSH
42127: FOR_IN
42128: IFFALSE 42216
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42130: LD_VAR 0 4
42134: PUSH
42135: LD_INT 1
42137: ARRAY
42138: PPUSH
42139: LD_VAR 0 4
42143: PUSH
42144: LD_INT 2
42146: ARRAY
42147: PPUSH
42148: CALL_OW 458
42152: NOT
42153: IFFALSE 42157
// continue ;
42155: GO 42127
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42157: LD_VAR 0 4
42161: PUSH
42162: LD_INT 1
42164: ARRAY
42165: PPUSH
42166: LD_VAR 0 4
42170: PUSH
42171: LD_INT 2
42173: ARRAY
42174: PPUSH
42175: CALL_OW 428
42179: PUSH
42180: LD_VAR 0 5
42184: IN
42185: IFFALSE 42214
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42187: LD_VAR 0 4
42191: PUSH
42192: LD_INT 1
42194: ARRAY
42195: PPUSH
42196: LD_VAR 0 4
42200: PUSH
42201: LD_INT 2
42203: ARRAY
42204: PPUSH
42205: LD_VAR 0 1
42209: PPUSH
42210: CALL_OW 456
// end ;
42214: GO 42127
42216: POP
42217: POP
// end ;
42218: LD_VAR 0 3
42222: RET
// export function Count ( array ) ; var i ; begin
42223: LD_INT 0
42225: PPUSH
42226: PPUSH
// result := 0 ;
42227: LD_ADDR_VAR 0 2
42231: PUSH
42232: LD_INT 0
42234: ST_TO_ADDR
// for i in array do
42235: LD_ADDR_VAR 0 3
42239: PUSH
42240: LD_VAR 0 1
42244: PUSH
42245: FOR_IN
42246: IFFALSE 42270
// if i then
42248: LD_VAR 0 3
42252: IFFALSE 42268
// result := result + 1 ;
42254: LD_ADDR_VAR 0 2
42258: PUSH
42259: LD_VAR 0 2
42263: PUSH
42264: LD_INT 1
42266: PLUS
42267: ST_TO_ADDR
42268: GO 42245
42270: POP
42271: POP
// end ;
42272: LD_VAR 0 2
42276: RET
// export function IsEmpty ( building ) ; begin
42277: LD_INT 0
42279: PPUSH
// if not building then
42280: LD_VAR 0 1
42284: NOT
42285: IFFALSE 42289
// exit ;
42287: GO 42332
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42289: LD_ADDR_VAR 0 2
42293: PUSH
42294: LD_VAR 0 1
42298: PUSH
42299: LD_INT 22
42301: PUSH
42302: LD_VAR 0 1
42306: PPUSH
42307: CALL_OW 255
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 58
42318: PUSH
42319: EMPTY
42320: LIST
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PPUSH
42326: CALL_OW 69
42330: IN
42331: ST_TO_ADDR
// end ;
42332: LD_VAR 0 2
42336: RET
// export function IsNotFull ( building ) ; var places ; begin
42337: LD_INT 0
42339: PPUSH
42340: PPUSH
// if not building then
42341: LD_VAR 0 1
42345: NOT
42346: IFFALSE 42350
// exit ;
42348: GO 42521
// result := false ;
42350: LD_ADDR_VAR 0 2
42354: PUSH
42355: LD_INT 0
42357: ST_TO_ADDR
// places := 0 ;
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_INT 0
42365: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42366: LD_VAR 0 1
42370: PPUSH
42371: CALL_OW 266
42375: PUSH
42376: LD_INT 0
42378: DOUBLE
42379: EQUAL
42380: IFTRUE 42438
42382: LD_INT 1
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42438
42388: LD_INT 6
42390: DOUBLE
42391: EQUAL
42392: IFTRUE 42438
42394: LD_INT 7
42396: DOUBLE
42397: EQUAL
42398: IFTRUE 42438
42400: LD_INT 8
42402: DOUBLE
42403: EQUAL
42404: IFTRUE 42438
42406: LD_INT 4
42408: DOUBLE
42409: EQUAL
42410: IFTRUE 42438
42412: LD_INT 5
42414: DOUBLE
42415: EQUAL
42416: IFTRUE 42438
42418: LD_INT 2
42420: DOUBLE
42421: EQUAL
42422: IFTRUE 42438
42424: LD_INT 3
42426: DOUBLE
42427: EQUAL
42428: IFTRUE 42438
42430: LD_INT 35
42432: DOUBLE
42433: EQUAL
42434: IFTRUE 42438
42436: GO 42449
42438: POP
// places := 6 ; b_bunker , b_breastwork :
42439: LD_ADDR_VAR 0 3
42443: PUSH
42444: LD_INT 6
42446: ST_TO_ADDR
42447: GO 42494
42449: LD_INT 32
42451: DOUBLE
42452: EQUAL
42453: IFTRUE 42463
42455: LD_INT 31
42457: DOUBLE
42458: EQUAL
42459: IFTRUE 42463
42461: GO 42474
42463: POP
// places := 1 ; b_control_tower :
42464: LD_ADDR_VAR 0 3
42468: PUSH
42469: LD_INT 1
42471: ST_TO_ADDR
42472: GO 42494
42474: LD_INT 36
42476: DOUBLE
42477: EQUAL
42478: IFTRUE 42482
42480: GO 42493
42482: POP
// places := 3 ; end ;
42483: LD_ADDR_VAR 0 3
42487: PUSH
42488: LD_INT 3
42490: ST_TO_ADDR
42491: GO 42494
42493: POP
// if places then
42494: LD_VAR 0 3
42498: IFFALSE 42521
// result := UnitsInside ( building ) < places ;
42500: LD_ADDR_VAR 0 2
42504: PUSH
42505: LD_VAR 0 1
42509: PPUSH
42510: CALL_OW 313
42514: PUSH
42515: LD_VAR 0 3
42519: LESS
42520: ST_TO_ADDR
// end ;
42521: LD_VAR 0 2
42525: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42526: LD_INT 0
42528: PPUSH
42529: PPUSH
42530: PPUSH
42531: PPUSH
// tmp := [ ] ;
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: EMPTY
42538: ST_TO_ADDR
// list := [ ] ;
42539: LD_ADDR_VAR 0 5
42543: PUSH
42544: EMPTY
42545: ST_TO_ADDR
// for i = 16 to 25 do
42546: LD_ADDR_VAR 0 4
42550: PUSH
42551: DOUBLE
42552: LD_INT 16
42554: DEC
42555: ST_TO_ADDR
42556: LD_INT 25
42558: PUSH
42559: FOR_TO
42560: IFFALSE 42633
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42562: LD_ADDR_VAR 0 3
42566: PUSH
42567: LD_VAR 0 3
42571: PUSH
42572: LD_INT 22
42574: PUSH
42575: LD_VAR 0 1
42579: PPUSH
42580: CALL_OW 255
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 91
42591: PUSH
42592: LD_VAR 0 1
42596: PUSH
42597: LD_INT 6
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 30
42607: PUSH
42608: LD_VAR 0 4
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: PUSH
42622: EMPTY
42623: LIST
42624: PPUSH
42625: CALL_OW 69
42629: ADD
42630: ST_TO_ADDR
42631: GO 42559
42633: POP
42634: POP
// for i = 1 to tmp do
42635: LD_ADDR_VAR 0 4
42639: PUSH
42640: DOUBLE
42641: LD_INT 1
42643: DEC
42644: ST_TO_ADDR
42645: LD_VAR 0 3
42649: PUSH
42650: FOR_TO
42651: IFFALSE 42739
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42653: LD_ADDR_VAR 0 5
42657: PUSH
42658: LD_VAR 0 5
42662: PUSH
42663: LD_VAR 0 3
42667: PUSH
42668: LD_VAR 0 4
42672: ARRAY
42673: PPUSH
42674: CALL_OW 266
42678: PUSH
42679: LD_VAR 0 3
42683: PUSH
42684: LD_VAR 0 4
42688: ARRAY
42689: PPUSH
42690: CALL_OW 250
42694: PUSH
42695: LD_VAR 0 3
42699: PUSH
42700: LD_VAR 0 4
42704: ARRAY
42705: PPUSH
42706: CALL_OW 251
42710: PUSH
42711: LD_VAR 0 3
42715: PUSH
42716: LD_VAR 0 4
42720: ARRAY
42721: PPUSH
42722: CALL_OW 254
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: PUSH
42733: EMPTY
42734: LIST
42735: ADD
42736: ST_TO_ADDR
42737: GO 42650
42739: POP
42740: POP
// result := list ;
42741: LD_ADDR_VAR 0 2
42745: PUSH
42746: LD_VAR 0 5
42750: ST_TO_ADDR
// end ;
42751: LD_VAR 0 2
42755: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42756: LD_INT 0
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
// if not factory then
42765: LD_VAR 0 1
42769: NOT
42770: IFFALSE 42774
// exit ;
42772: GO 43367
// if control = control_apeman then
42774: LD_VAR 0 4
42778: PUSH
42779: LD_INT 5
42781: EQUAL
42782: IFFALSE 42891
// begin tmp := UnitsInside ( factory ) ;
42784: LD_ADDR_VAR 0 8
42788: PUSH
42789: LD_VAR 0 1
42793: PPUSH
42794: CALL_OW 313
42798: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42799: LD_VAR 0 8
42803: PPUSH
42804: LD_INT 25
42806: PUSH
42807: LD_INT 12
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PPUSH
42814: CALL_OW 72
42818: NOT
42819: IFFALSE 42829
// control := control_manual ;
42821: LD_ADDR_VAR 0 4
42825: PUSH
42826: LD_INT 1
42828: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42829: LD_ADDR_VAR 0 8
42833: PUSH
42834: LD_VAR 0 1
42838: PPUSH
42839: CALL 42526 0 1
42843: ST_TO_ADDR
// if tmp then
42844: LD_VAR 0 8
42848: IFFALSE 42891
// begin for i in tmp do
42850: LD_ADDR_VAR 0 7
42854: PUSH
42855: LD_VAR 0 8
42859: PUSH
42860: FOR_IN
42861: IFFALSE 42889
// if i [ 1 ] = b_ext_radio then
42863: LD_VAR 0 7
42867: PUSH
42868: LD_INT 1
42870: ARRAY
42871: PUSH
42872: LD_INT 22
42874: EQUAL
42875: IFFALSE 42887
// begin control := control_remote ;
42877: LD_ADDR_VAR 0 4
42881: PUSH
42882: LD_INT 2
42884: ST_TO_ADDR
// break ;
42885: GO 42889
// end ;
42887: GO 42860
42889: POP
42890: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42891: LD_VAR 0 1
42895: PPUSH
42896: LD_VAR 0 2
42900: PPUSH
42901: LD_VAR 0 3
42905: PPUSH
42906: LD_VAR 0 4
42910: PPUSH
42911: LD_VAR 0 5
42915: PPUSH
42916: CALL_OW 448
42920: IFFALSE 42955
// begin result := [ chassis , engine , control , weapon ] ;
42922: LD_ADDR_VAR 0 6
42926: PUSH
42927: LD_VAR 0 2
42931: PUSH
42932: LD_VAR 0 3
42936: PUSH
42937: LD_VAR 0 4
42941: PUSH
42942: LD_VAR 0 5
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: ST_TO_ADDR
// exit ;
42953: GO 43367
// end ; _chassis := AvailableChassisList ( factory ) ;
42955: LD_ADDR_VAR 0 9
42959: PUSH
42960: LD_VAR 0 1
42964: PPUSH
42965: CALL_OW 475
42969: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42970: LD_ADDR_VAR 0 11
42974: PUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 476
42984: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42985: LD_ADDR_VAR 0 12
42989: PUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: CALL_OW 477
42999: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43000: LD_ADDR_VAR 0 10
43004: PUSH
43005: LD_VAR 0 1
43009: PPUSH
43010: CALL_OW 478
43014: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43015: LD_VAR 0 9
43019: NOT
43020: PUSH
43021: LD_VAR 0 11
43025: NOT
43026: OR
43027: PUSH
43028: LD_VAR 0 12
43032: NOT
43033: OR
43034: PUSH
43035: LD_VAR 0 10
43039: NOT
43040: OR
43041: IFFALSE 43076
// begin result := [ chassis , engine , control , weapon ] ;
43043: LD_ADDR_VAR 0 6
43047: PUSH
43048: LD_VAR 0 2
43052: PUSH
43053: LD_VAR 0 3
43057: PUSH
43058: LD_VAR 0 4
43062: PUSH
43063: LD_VAR 0 5
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: ST_TO_ADDR
// exit ;
43074: GO 43367
// end ; if not chassis in _chassis then
43076: LD_VAR 0 2
43080: PUSH
43081: LD_VAR 0 9
43085: IN
43086: NOT
43087: IFFALSE 43113
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43089: LD_ADDR_VAR 0 2
43093: PUSH
43094: LD_VAR 0 9
43098: PUSH
43099: LD_INT 1
43101: PPUSH
43102: LD_VAR 0 9
43106: PPUSH
43107: CALL_OW 12
43111: ARRAY
43112: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43113: LD_VAR 0 2
43117: PPUSH
43118: LD_VAR 0 3
43122: PPUSH
43123: CALL 43372 0 2
43127: NOT
43128: IFFALSE 43187
// repeat engine := _engine [ 1 ] ;
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: LD_VAR 0 11
43139: PUSH
43140: LD_INT 1
43142: ARRAY
43143: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43144: LD_ADDR_VAR 0 11
43148: PUSH
43149: LD_VAR 0 11
43153: PPUSH
43154: LD_INT 1
43156: PPUSH
43157: CALL_OW 3
43161: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43162: LD_VAR 0 2
43166: PPUSH
43167: LD_VAR 0 3
43171: PPUSH
43172: CALL 43372 0 2
43176: PUSH
43177: LD_VAR 0 11
43181: PUSH
43182: EMPTY
43183: EQUAL
43184: OR
43185: IFFALSE 43130
// if not control in _control then
43187: LD_VAR 0 4
43191: PUSH
43192: LD_VAR 0 12
43196: IN
43197: NOT
43198: IFFALSE 43224
// control := _control [ rand ( 1 , _control ) ] ;
43200: LD_ADDR_VAR 0 4
43204: PUSH
43205: LD_VAR 0 12
43209: PUSH
43210: LD_INT 1
43212: PPUSH
43213: LD_VAR 0 12
43217: PPUSH
43218: CALL_OW 12
43222: ARRAY
43223: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43224: LD_VAR 0 2
43228: PPUSH
43229: LD_VAR 0 5
43233: PPUSH
43234: CALL 43592 0 2
43238: NOT
43239: IFFALSE 43298
// repeat weapon := _weapon [ 1 ] ;
43241: LD_ADDR_VAR 0 5
43245: PUSH
43246: LD_VAR 0 10
43250: PUSH
43251: LD_INT 1
43253: ARRAY
43254: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43255: LD_ADDR_VAR 0 10
43259: PUSH
43260: LD_VAR 0 10
43264: PPUSH
43265: LD_INT 1
43267: PPUSH
43268: CALL_OW 3
43272: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43273: LD_VAR 0 2
43277: PPUSH
43278: LD_VAR 0 5
43282: PPUSH
43283: CALL 43592 0 2
43287: PUSH
43288: LD_VAR 0 10
43292: PUSH
43293: EMPTY
43294: EQUAL
43295: OR
43296: IFFALSE 43241
// result := [ ] ;
43298: LD_ADDR_VAR 0 6
43302: PUSH
43303: EMPTY
43304: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43305: LD_VAR 0 1
43309: PPUSH
43310: LD_VAR 0 2
43314: PPUSH
43315: LD_VAR 0 3
43319: PPUSH
43320: LD_VAR 0 4
43324: PPUSH
43325: LD_VAR 0 5
43329: PPUSH
43330: CALL_OW 448
43334: IFFALSE 43367
// result := [ chassis , engine , control , weapon ] ;
43336: LD_ADDR_VAR 0 6
43340: PUSH
43341: LD_VAR 0 2
43345: PUSH
43346: LD_VAR 0 3
43350: PUSH
43351: LD_VAR 0 4
43355: PUSH
43356: LD_VAR 0 5
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: ST_TO_ADDR
// end ;
43367: LD_VAR 0 6
43371: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43372: LD_INT 0
43374: PPUSH
// if not chassis or not engine then
43375: LD_VAR 0 1
43379: NOT
43380: PUSH
43381: LD_VAR 0 2
43385: NOT
43386: OR
43387: IFFALSE 43391
// exit ;
43389: GO 43587
// case engine of engine_solar :
43391: LD_VAR 0 2
43395: PUSH
43396: LD_INT 2
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43404
43402: GO 43442
43404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_INT 11
43412: PUSH
43413: LD_INT 12
43415: PUSH
43416: LD_INT 13
43418: PUSH
43419: LD_INT 14
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
43440: GO 43571
43442: LD_INT 1
43444: DOUBLE
43445: EQUAL
43446: IFTRUE 43450
43448: GO 43512
43450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43451: LD_ADDR_VAR 0 3
43455: PUSH
43456: LD_INT 11
43458: PUSH
43459: LD_INT 12
43461: PUSH
43462: LD_INT 13
43464: PUSH
43465: LD_INT 14
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: LD_INT 4
43479: PUSH
43480: LD_INT 5
43482: PUSH
43483: LD_INT 21
43485: PUSH
43486: LD_INT 23
43488: PUSH
43489: LD_INT 22
43491: PUSH
43492: LD_INT 24
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: ST_TO_ADDR
43510: GO 43571
43512: LD_INT 3
43514: DOUBLE
43515: EQUAL
43516: IFTRUE 43520
43518: GO 43570
43520: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_INT 13
43528: PUSH
43529: LD_INT 14
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 3
43537: PUSH
43538: LD_INT 4
43540: PUSH
43541: LD_INT 5
43543: PUSH
43544: LD_INT 21
43546: PUSH
43547: LD_INT 22
43549: PUSH
43550: LD_INT 23
43552: PUSH
43553: LD_INT 24
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
43568: GO 43571
43570: POP
// result := ( chassis in result ) ;
43571: LD_ADDR_VAR 0 3
43575: PUSH
43576: LD_VAR 0 1
43580: PUSH
43581: LD_VAR 0 3
43585: IN
43586: ST_TO_ADDR
// end ;
43587: LD_VAR 0 3
43591: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43592: LD_INT 0
43594: PPUSH
// if not chassis or not weapon then
43595: LD_VAR 0 1
43599: NOT
43600: PUSH
43601: LD_VAR 0 2
43605: NOT
43606: OR
43607: IFFALSE 43611
// exit ;
43609: GO 44671
// case weapon of us_machine_gun :
43611: LD_VAR 0 2
43615: PUSH
43616: LD_INT 2
43618: DOUBLE
43619: EQUAL
43620: IFTRUE 43624
43622: GO 43654
43624: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43625: LD_ADDR_VAR 0 3
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 3
43638: PUSH
43639: LD_INT 4
43641: PUSH
43642: LD_INT 5
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
43652: GO 44655
43654: LD_INT 3
43656: DOUBLE
43657: EQUAL
43658: IFTRUE 43662
43660: GO 43692
43662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43663: LD_ADDR_VAR 0 3
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: LD_INT 3
43676: PUSH
43677: LD_INT 4
43679: PUSH
43680: LD_INT 5
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
43690: GO 44655
43692: LD_INT 11
43694: DOUBLE
43695: EQUAL
43696: IFTRUE 43700
43698: GO 43730
43700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43701: LD_ADDR_VAR 0 3
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 3
43714: PUSH
43715: LD_INT 4
43717: PUSH
43718: LD_INT 5
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: ST_TO_ADDR
43728: GO 44655
43730: LD_INT 4
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43764
43738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: LD_INT 3
43749: PUSH
43750: LD_INT 4
43752: PUSH
43753: LD_INT 5
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
43762: GO 44655
43764: LD_INT 5
43766: DOUBLE
43767: EQUAL
43768: IFTRUE 43772
43770: GO 43798
43772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 4
43786: PUSH
43787: LD_INT 5
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
43796: GO 44655
43798: LD_INT 9
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 43832
43806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: LD_INT 4
43820: PUSH
43821: LD_INT 5
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: ST_TO_ADDR
43830: GO 44655
43832: LD_INT 7
43834: DOUBLE
43835: EQUAL
43836: IFTRUE 43840
43838: GO 43866
43840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43841: LD_ADDR_VAR 0 3
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 3
43851: PUSH
43852: LD_INT 4
43854: PUSH
43855: LD_INT 5
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
43864: GO 44655
43866: LD_INT 12
43868: DOUBLE
43869: EQUAL
43870: IFTRUE 43874
43872: GO 43900
43874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43875: LD_ADDR_VAR 0 3
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: LD_INT 4
43888: PUSH
43889: LD_INT 5
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: ST_TO_ADDR
43898: GO 44655
43900: LD_INT 13
43902: DOUBLE
43903: EQUAL
43904: IFTRUE 43908
43906: GO 43934
43908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43909: LD_ADDR_VAR 0 3
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 4
43922: PUSH
43923: LD_INT 5
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
43932: GO 44655
43934: LD_INT 14
43936: DOUBLE
43937: EQUAL
43938: IFTRUE 43942
43940: GO 43960
43942: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_INT 4
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: ST_TO_ADDR
43958: GO 44655
43960: LD_INT 6
43962: DOUBLE
43963: EQUAL
43964: IFTRUE 43968
43966: GO 43986
43968: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43969: LD_ADDR_VAR 0 3
43973: PUSH
43974: LD_INT 4
43976: PUSH
43977: LD_INT 5
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: ST_TO_ADDR
43984: GO 44655
43986: LD_INT 10
43988: DOUBLE
43989: EQUAL
43990: IFTRUE 43994
43992: GO 44012
43994: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43995: LD_ADDR_VAR 0 3
43999: PUSH
44000: LD_INT 4
44002: PUSH
44003: LD_INT 5
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: ST_TO_ADDR
44010: GO 44655
44012: LD_INT 22
44014: DOUBLE
44015: EQUAL
44016: IFTRUE 44020
44018: GO 44046
44020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44021: LD_ADDR_VAR 0 3
44025: PUSH
44026: LD_INT 11
44028: PUSH
44029: LD_INT 12
44031: PUSH
44032: LD_INT 13
44034: PUSH
44035: LD_INT 14
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
44044: GO 44655
44046: LD_INT 23
44048: DOUBLE
44049: EQUAL
44050: IFTRUE 44054
44052: GO 44080
44054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44055: LD_ADDR_VAR 0 3
44059: PUSH
44060: LD_INT 11
44062: PUSH
44063: LD_INT 12
44065: PUSH
44066: LD_INT 13
44068: PUSH
44069: LD_INT 14
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: ST_TO_ADDR
44078: GO 44655
44080: LD_INT 24
44082: DOUBLE
44083: EQUAL
44084: IFTRUE 44088
44086: GO 44114
44088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44089: LD_ADDR_VAR 0 3
44093: PUSH
44094: LD_INT 11
44096: PUSH
44097: LD_INT 12
44099: PUSH
44100: LD_INT 13
44102: PUSH
44103: LD_INT 14
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: ST_TO_ADDR
44112: GO 44655
44114: LD_INT 30
44116: DOUBLE
44117: EQUAL
44118: IFTRUE 44122
44120: GO 44148
44122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44123: LD_ADDR_VAR 0 3
44127: PUSH
44128: LD_INT 11
44130: PUSH
44131: LD_INT 12
44133: PUSH
44134: LD_INT 13
44136: PUSH
44137: LD_INT 14
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: ST_TO_ADDR
44146: GO 44655
44148: LD_INT 25
44150: DOUBLE
44151: EQUAL
44152: IFTRUE 44156
44154: GO 44174
44156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44157: LD_ADDR_VAR 0 3
44161: PUSH
44162: LD_INT 13
44164: PUSH
44165: LD_INT 14
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: ST_TO_ADDR
44172: GO 44655
44174: LD_INT 27
44176: DOUBLE
44177: EQUAL
44178: IFTRUE 44182
44180: GO 44200
44182: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44183: LD_ADDR_VAR 0 3
44187: PUSH
44188: LD_INT 13
44190: PUSH
44191: LD_INT 14
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: ST_TO_ADDR
44198: GO 44655
44200: LD_INT 92
44202: DOUBLE
44203: EQUAL
44204: IFTRUE 44208
44206: GO 44234
44208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44209: LD_ADDR_VAR 0 3
44213: PUSH
44214: LD_INT 11
44216: PUSH
44217: LD_INT 12
44219: PUSH
44220: LD_INT 13
44222: PUSH
44223: LD_INT 14
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: ST_TO_ADDR
44232: GO 44655
44234: LD_INT 28
44236: DOUBLE
44237: EQUAL
44238: IFTRUE 44242
44240: GO 44260
44242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44243: LD_ADDR_VAR 0 3
44247: PUSH
44248: LD_INT 13
44250: PUSH
44251: LD_INT 14
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: ST_TO_ADDR
44258: GO 44655
44260: LD_INT 29
44262: DOUBLE
44263: EQUAL
44264: IFTRUE 44268
44266: GO 44286
44268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44269: LD_ADDR_VAR 0 3
44273: PUSH
44274: LD_INT 13
44276: PUSH
44277: LD_INT 14
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: ST_TO_ADDR
44284: GO 44655
44286: LD_INT 31
44288: DOUBLE
44289: EQUAL
44290: IFTRUE 44294
44292: GO 44312
44294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44295: LD_ADDR_VAR 0 3
44299: PUSH
44300: LD_INT 13
44302: PUSH
44303: LD_INT 14
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: ST_TO_ADDR
44310: GO 44655
44312: LD_INT 26
44314: DOUBLE
44315: EQUAL
44316: IFTRUE 44320
44318: GO 44338
44320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44321: LD_ADDR_VAR 0 3
44325: PUSH
44326: LD_INT 13
44328: PUSH
44329: LD_INT 14
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: ST_TO_ADDR
44336: GO 44655
44338: LD_INT 42
44340: DOUBLE
44341: EQUAL
44342: IFTRUE 44346
44344: GO 44372
44346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44347: LD_ADDR_VAR 0 3
44351: PUSH
44352: LD_INT 21
44354: PUSH
44355: LD_INT 22
44357: PUSH
44358: LD_INT 23
44360: PUSH
44361: LD_INT 24
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
44370: GO 44655
44372: LD_INT 43
44374: DOUBLE
44375: EQUAL
44376: IFTRUE 44380
44378: GO 44406
44380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44381: LD_ADDR_VAR 0 3
44385: PUSH
44386: LD_INT 21
44388: PUSH
44389: LD_INT 22
44391: PUSH
44392: LD_INT 23
44394: PUSH
44395: LD_INT 24
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: ST_TO_ADDR
44404: GO 44655
44406: LD_INT 44
44408: DOUBLE
44409: EQUAL
44410: IFTRUE 44414
44412: GO 44440
44414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44415: LD_ADDR_VAR 0 3
44419: PUSH
44420: LD_INT 21
44422: PUSH
44423: LD_INT 22
44425: PUSH
44426: LD_INT 23
44428: PUSH
44429: LD_INT 24
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: ST_TO_ADDR
44438: GO 44655
44440: LD_INT 45
44442: DOUBLE
44443: EQUAL
44444: IFTRUE 44448
44446: GO 44474
44448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44449: LD_ADDR_VAR 0 3
44453: PUSH
44454: LD_INT 21
44456: PUSH
44457: LD_INT 22
44459: PUSH
44460: LD_INT 23
44462: PUSH
44463: LD_INT 24
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
44472: GO 44655
44474: LD_INT 49
44476: DOUBLE
44477: EQUAL
44478: IFTRUE 44482
44480: GO 44508
44482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44483: LD_ADDR_VAR 0 3
44487: PUSH
44488: LD_INT 21
44490: PUSH
44491: LD_INT 22
44493: PUSH
44494: LD_INT 23
44496: PUSH
44497: LD_INT 24
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
44506: GO 44655
44508: LD_INT 51
44510: DOUBLE
44511: EQUAL
44512: IFTRUE 44516
44514: GO 44542
44516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44517: LD_ADDR_VAR 0 3
44521: PUSH
44522: LD_INT 21
44524: PUSH
44525: LD_INT 22
44527: PUSH
44528: LD_INT 23
44530: PUSH
44531: LD_INT 24
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
44540: GO 44655
44542: LD_INT 52
44544: DOUBLE
44545: EQUAL
44546: IFTRUE 44550
44548: GO 44576
44550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44551: LD_ADDR_VAR 0 3
44555: PUSH
44556: LD_INT 21
44558: PUSH
44559: LD_INT 22
44561: PUSH
44562: LD_INT 23
44564: PUSH
44565: LD_INT 24
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
44574: GO 44655
44576: LD_INT 53
44578: DOUBLE
44579: EQUAL
44580: IFTRUE 44584
44582: GO 44602
44584: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44585: LD_ADDR_VAR 0 3
44589: PUSH
44590: LD_INT 23
44592: PUSH
44593: LD_INT 24
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: ST_TO_ADDR
44600: GO 44655
44602: LD_INT 46
44604: DOUBLE
44605: EQUAL
44606: IFTRUE 44610
44608: GO 44628
44610: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44611: LD_ADDR_VAR 0 3
44615: PUSH
44616: LD_INT 23
44618: PUSH
44619: LD_INT 24
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: ST_TO_ADDR
44626: GO 44655
44628: LD_INT 47
44630: DOUBLE
44631: EQUAL
44632: IFTRUE 44636
44634: GO 44654
44636: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44637: LD_ADDR_VAR 0 3
44641: PUSH
44642: LD_INT 23
44644: PUSH
44645: LD_INT 24
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: ST_TO_ADDR
44652: GO 44655
44654: POP
// result := ( chassis in result ) ;
44655: LD_ADDR_VAR 0 3
44659: PUSH
44660: LD_VAR 0 1
44664: PUSH
44665: LD_VAR 0 3
44669: IN
44670: ST_TO_ADDR
// end ;
44671: LD_VAR 0 3
44675: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44676: LD_INT 0
44678: PPUSH
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
// result := array ;
44685: LD_ADDR_VAR 0 5
44689: PUSH
44690: LD_VAR 0 1
44694: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44695: LD_VAR 0 1
44699: NOT
44700: PUSH
44701: LD_VAR 0 2
44705: NOT
44706: OR
44707: PUSH
44708: LD_VAR 0 3
44712: NOT
44713: OR
44714: PUSH
44715: LD_VAR 0 2
44719: PUSH
44720: LD_VAR 0 1
44724: GREATER
44725: OR
44726: PUSH
44727: LD_VAR 0 3
44731: PUSH
44732: LD_VAR 0 1
44736: GREATER
44737: OR
44738: IFFALSE 44742
// exit ;
44740: GO 45038
// if direction then
44742: LD_VAR 0 4
44746: IFFALSE 44810
// begin d := 1 ;
44748: LD_ADDR_VAR 0 9
44752: PUSH
44753: LD_INT 1
44755: ST_TO_ADDR
// if i_from > i_to then
44756: LD_VAR 0 2
44760: PUSH
44761: LD_VAR 0 3
44765: GREATER
44766: IFFALSE 44792
// length := ( array - i_from ) + i_to else
44768: LD_ADDR_VAR 0 11
44772: PUSH
44773: LD_VAR 0 1
44777: PUSH
44778: LD_VAR 0 2
44782: MINUS
44783: PUSH
44784: LD_VAR 0 3
44788: PLUS
44789: ST_TO_ADDR
44790: GO 44808
// length := i_to - i_from ;
44792: LD_ADDR_VAR 0 11
44796: PUSH
44797: LD_VAR 0 3
44801: PUSH
44802: LD_VAR 0 2
44806: MINUS
44807: ST_TO_ADDR
// end else
44808: GO 44871
// begin d := - 1 ;
44810: LD_ADDR_VAR 0 9
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: ST_TO_ADDR
// if i_from > i_to then
44819: LD_VAR 0 2
44823: PUSH
44824: LD_VAR 0 3
44828: GREATER
44829: IFFALSE 44849
// length := i_from - i_to else
44831: LD_ADDR_VAR 0 11
44835: PUSH
44836: LD_VAR 0 2
44840: PUSH
44841: LD_VAR 0 3
44845: MINUS
44846: ST_TO_ADDR
44847: GO 44871
// length := ( array - i_to ) + i_from ;
44849: LD_ADDR_VAR 0 11
44853: PUSH
44854: LD_VAR 0 1
44858: PUSH
44859: LD_VAR 0 3
44863: MINUS
44864: PUSH
44865: LD_VAR 0 2
44869: PLUS
44870: ST_TO_ADDR
// end ; if not length then
44871: LD_VAR 0 11
44875: NOT
44876: IFFALSE 44880
// exit ;
44878: GO 45038
// tmp := array ;
44880: LD_ADDR_VAR 0 10
44884: PUSH
44885: LD_VAR 0 1
44889: ST_TO_ADDR
// for i = 1 to length do
44890: LD_ADDR_VAR 0 6
44894: PUSH
44895: DOUBLE
44896: LD_INT 1
44898: DEC
44899: ST_TO_ADDR
44900: LD_VAR 0 11
44904: PUSH
44905: FOR_TO
44906: IFFALSE 45026
// begin for j = 1 to array do
44908: LD_ADDR_VAR 0 7
44912: PUSH
44913: DOUBLE
44914: LD_INT 1
44916: DEC
44917: ST_TO_ADDR
44918: LD_VAR 0 1
44922: PUSH
44923: FOR_TO
44924: IFFALSE 45012
// begin k := j + d ;
44926: LD_ADDR_VAR 0 8
44930: PUSH
44931: LD_VAR 0 7
44935: PUSH
44936: LD_VAR 0 9
44940: PLUS
44941: ST_TO_ADDR
// if k > array then
44942: LD_VAR 0 8
44946: PUSH
44947: LD_VAR 0 1
44951: GREATER
44952: IFFALSE 44962
// k := 1 ;
44954: LD_ADDR_VAR 0 8
44958: PUSH
44959: LD_INT 1
44961: ST_TO_ADDR
// if not k then
44962: LD_VAR 0 8
44966: NOT
44967: IFFALSE 44979
// k := array ;
44969: LD_ADDR_VAR 0 8
44973: PUSH
44974: LD_VAR 0 1
44978: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44979: LD_ADDR_VAR 0 10
44983: PUSH
44984: LD_VAR 0 10
44988: PPUSH
44989: LD_VAR 0 8
44993: PPUSH
44994: LD_VAR 0 1
44998: PUSH
44999: LD_VAR 0 7
45003: ARRAY
45004: PPUSH
45005: CALL_OW 1
45009: ST_TO_ADDR
// end ;
45010: GO 44923
45012: POP
45013: POP
// array := tmp ;
45014: LD_ADDR_VAR 0 1
45018: PUSH
45019: LD_VAR 0 10
45023: ST_TO_ADDR
// end ;
45024: GO 44905
45026: POP
45027: POP
// result := array ;
45028: LD_ADDR_VAR 0 5
45032: PUSH
45033: LD_VAR 0 1
45037: ST_TO_ADDR
// end ;
45038: LD_VAR 0 5
45042: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45043: LD_INT 0
45045: PPUSH
45046: PPUSH
// result := 0 ;
45047: LD_ADDR_VAR 0 3
45051: PUSH
45052: LD_INT 0
45054: ST_TO_ADDR
// if not array or not value in array then
45055: LD_VAR 0 1
45059: NOT
45060: PUSH
45061: LD_VAR 0 2
45065: PUSH
45066: LD_VAR 0 1
45070: IN
45071: NOT
45072: OR
45073: IFFALSE 45077
// exit ;
45075: GO 45131
// for i = 1 to array do
45077: LD_ADDR_VAR 0 4
45081: PUSH
45082: DOUBLE
45083: LD_INT 1
45085: DEC
45086: ST_TO_ADDR
45087: LD_VAR 0 1
45091: PUSH
45092: FOR_TO
45093: IFFALSE 45129
// if value = array [ i ] then
45095: LD_VAR 0 2
45099: PUSH
45100: LD_VAR 0 1
45104: PUSH
45105: LD_VAR 0 4
45109: ARRAY
45110: EQUAL
45111: IFFALSE 45127
// begin result := i ;
45113: LD_ADDR_VAR 0 3
45117: PUSH
45118: LD_VAR 0 4
45122: ST_TO_ADDR
// exit ;
45123: POP
45124: POP
45125: GO 45131
// end ;
45127: GO 45092
45129: POP
45130: POP
// end ;
45131: LD_VAR 0 3
45135: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45136: LD_INT 0
45138: PPUSH
// vc_chassis := chassis ;
45139: LD_ADDR_OWVAR 37
45143: PUSH
45144: LD_VAR 0 1
45148: ST_TO_ADDR
// vc_engine := engine ;
45149: LD_ADDR_OWVAR 39
45153: PUSH
45154: LD_VAR 0 2
45158: ST_TO_ADDR
// vc_control := control ;
45159: LD_ADDR_OWVAR 38
45163: PUSH
45164: LD_VAR 0 3
45168: ST_TO_ADDR
// vc_weapon := weapon ;
45169: LD_ADDR_OWVAR 40
45173: PUSH
45174: LD_VAR 0 4
45178: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45179: LD_ADDR_OWVAR 41
45183: PUSH
45184: LD_VAR 0 5
45188: ST_TO_ADDR
// end ;
45189: LD_VAR 0 6
45193: RET
// export function WantPlant ( unit ) ; var task ; begin
45194: LD_INT 0
45196: PPUSH
45197: PPUSH
// result := false ;
45198: LD_ADDR_VAR 0 2
45202: PUSH
45203: LD_INT 0
45205: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45206: LD_ADDR_VAR 0 3
45210: PUSH
45211: LD_VAR 0 1
45215: PPUSH
45216: CALL_OW 437
45220: ST_TO_ADDR
// if task then
45221: LD_VAR 0 3
45225: IFFALSE 45253
// if task [ 1 ] [ 1 ] = p then
45227: LD_VAR 0 3
45231: PUSH
45232: LD_INT 1
45234: ARRAY
45235: PUSH
45236: LD_INT 1
45238: ARRAY
45239: PUSH
45240: LD_STRING p
45242: EQUAL
45243: IFFALSE 45253
// result := true ;
45245: LD_ADDR_VAR 0 2
45249: PUSH
45250: LD_INT 1
45252: ST_TO_ADDR
// end ;
45253: LD_VAR 0 2
45257: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45258: LD_INT 0
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
// if pos < 1 then
45264: LD_VAR 0 2
45268: PUSH
45269: LD_INT 1
45271: LESS
45272: IFFALSE 45276
// exit ;
45274: GO 45579
// if pos = 1 then
45276: LD_VAR 0 2
45280: PUSH
45281: LD_INT 1
45283: EQUAL
45284: IFFALSE 45317
// result := Replace ( arr , pos [ 1 ] , value ) else
45286: LD_ADDR_VAR 0 4
45290: PUSH
45291: LD_VAR 0 1
45295: PPUSH
45296: LD_VAR 0 2
45300: PUSH
45301: LD_INT 1
45303: ARRAY
45304: PPUSH
45305: LD_VAR 0 3
45309: PPUSH
45310: CALL_OW 1
45314: ST_TO_ADDR
45315: GO 45579
// begin tmp := arr ;
45317: LD_ADDR_VAR 0 6
45321: PUSH
45322: LD_VAR 0 1
45326: ST_TO_ADDR
// s_arr := [ tmp ] ;
45327: LD_ADDR_VAR 0 7
45331: PUSH
45332: LD_VAR 0 6
45336: PUSH
45337: EMPTY
45338: LIST
45339: ST_TO_ADDR
// for i = 1 to pos - 1 do
45340: LD_ADDR_VAR 0 5
45344: PUSH
45345: DOUBLE
45346: LD_INT 1
45348: DEC
45349: ST_TO_ADDR
45350: LD_VAR 0 2
45354: PUSH
45355: LD_INT 1
45357: MINUS
45358: PUSH
45359: FOR_TO
45360: IFFALSE 45405
// begin tmp := tmp [ pos [ i ] ] ;
45362: LD_ADDR_VAR 0 6
45366: PUSH
45367: LD_VAR 0 6
45371: PUSH
45372: LD_VAR 0 2
45376: PUSH
45377: LD_VAR 0 5
45381: ARRAY
45382: ARRAY
45383: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45384: LD_ADDR_VAR 0 7
45388: PUSH
45389: LD_VAR 0 7
45393: PUSH
45394: LD_VAR 0 6
45398: PUSH
45399: EMPTY
45400: LIST
45401: ADD
45402: ST_TO_ADDR
// end ;
45403: GO 45359
45405: POP
45406: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45407: LD_ADDR_VAR 0 6
45411: PUSH
45412: LD_VAR 0 6
45416: PPUSH
45417: LD_VAR 0 2
45421: PUSH
45422: LD_VAR 0 2
45426: ARRAY
45427: PPUSH
45428: LD_VAR 0 3
45432: PPUSH
45433: CALL_OW 1
45437: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45438: LD_ADDR_VAR 0 7
45442: PUSH
45443: LD_VAR 0 7
45447: PPUSH
45448: LD_VAR 0 7
45452: PPUSH
45453: LD_VAR 0 6
45457: PPUSH
45458: CALL_OW 1
45462: ST_TO_ADDR
// for i = s_arr downto 2 do
45463: LD_ADDR_VAR 0 5
45467: PUSH
45468: DOUBLE
45469: LD_VAR 0 7
45473: INC
45474: ST_TO_ADDR
45475: LD_INT 2
45477: PUSH
45478: FOR_DOWNTO
45479: IFFALSE 45563
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45481: LD_ADDR_VAR 0 6
45485: PUSH
45486: LD_VAR 0 7
45490: PUSH
45491: LD_VAR 0 5
45495: PUSH
45496: LD_INT 1
45498: MINUS
45499: ARRAY
45500: PPUSH
45501: LD_VAR 0 2
45505: PUSH
45506: LD_VAR 0 5
45510: PUSH
45511: LD_INT 1
45513: MINUS
45514: ARRAY
45515: PPUSH
45516: LD_VAR 0 7
45520: PUSH
45521: LD_VAR 0 5
45525: ARRAY
45526: PPUSH
45527: CALL_OW 1
45531: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45532: LD_ADDR_VAR 0 7
45536: PUSH
45537: LD_VAR 0 7
45541: PPUSH
45542: LD_VAR 0 5
45546: PUSH
45547: LD_INT 1
45549: MINUS
45550: PPUSH
45551: LD_VAR 0 6
45555: PPUSH
45556: CALL_OW 1
45560: ST_TO_ADDR
// end ;
45561: GO 45478
45563: POP
45564: POP
// result := s_arr [ 1 ] ;
45565: LD_ADDR_VAR 0 4
45569: PUSH
45570: LD_VAR 0 7
45574: PUSH
45575: LD_INT 1
45577: ARRAY
45578: ST_TO_ADDR
// end ; end ;
45579: LD_VAR 0 4
45583: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45584: LD_INT 0
45586: PPUSH
45587: PPUSH
// if not list then
45588: LD_VAR 0 1
45592: NOT
45593: IFFALSE 45597
// exit ;
45595: GO 45688
// i := list [ pos1 ] ;
45597: LD_ADDR_VAR 0 5
45601: PUSH
45602: LD_VAR 0 1
45606: PUSH
45607: LD_VAR 0 2
45611: ARRAY
45612: ST_TO_ADDR
// if not i then
45613: LD_VAR 0 5
45617: NOT
45618: IFFALSE 45622
// exit ;
45620: GO 45688
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45622: LD_ADDR_VAR 0 1
45626: PUSH
45627: LD_VAR 0 1
45631: PPUSH
45632: LD_VAR 0 2
45636: PPUSH
45637: LD_VAR 0 1
45641: PUSH
45642: LD_VAR 0 3
45646: ARRAY
45647: PPUSH
45648: CALL_OW 1
45652: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45653: LD_ADDR_VAR 0 1
45657: PUSH
45658: LD_VAR 0 1
45662: PPUSH
45663: LD_VAR 0 3
45667: PPUSH
45668: LD_VAR 0 5
45672: PPUSH
45673: CALL_OW 1
45677: ST_TO_ADDR
// result := list ;
45678: LD_ADDR_VAR 0 4
45682: PUSH
45683: LD_VAR 0 1
45687: ST_TO_ADDR
// end ;
45688: LD_VAR 0 4
45692: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45693: LD_INT 0
45695: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45696: LD_ADDR_VAR 0 5
45700: PUSH
45701: LD_VAR 0 1
45705: PPUSH
45706: CALL_OW 250
45710: PPUSH
45711: LD_VAR 0 1
45715: PPUSH
45716: CALL_OW 251
45720: PPUSH
45721: LD_VAR 0 2
45725: PPUSH
45726: LD_VAR 0 3
45730: PPUSH
45731: LD_VAR 0 4
45735: PPUSH
45736: CALL 45746 0 5
45740: ST_TO_ADDR
// end ;
45741: LD_VAR 0 5
45745: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45746: LD_INT 0
45748: PPUSH
45749: PPUSH
45750: PPUSH
45751: PPUSH
// if not list then
45752: LD_VAR 0 3
45756: NOT
45757: IFFALSE 45761
// exit ;
45759: GO 46149
// result := [ ] ;
45761: LD_ADDR_VAR 0 6
45765: PUSH
45766: EMPTY
45767: ST_TO_ADDR
// for i in list do
45768: LD_ADDR_VAR 0 7
45772: PUSH
45773: LD_VAR 0 3
45777: PUSH
45778: FOR_IN
45779: IFFALSE 45981
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45781: LD_ADDR_VAR 0 9
45785: PUSH
45786: LD_VAR 0 7
45790: PPUSH
45791: LD_VAR 0 1
45795: PPUSH
45796: LD_VAR 0 2
45800: PPUSH
45801: CALL_OW 297
45805: ST_TO_ADDR
// if not result then
45806: LD_VAR 0 6
45810: NOT
45811: IFFALSE 45837
// result := [ [ i , tmp ] ] else
45813: LD_ADDR_VAR 0 6
45817: PUSH
45818: LD_VAR 0 7
45822: PUSH
45823: LD_VAR 0 9
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: EMPTY
45833: LIST
45834: ST_TO_ADDR
45835: GO 45979
// begin if result [ result ] [ 2 ] < tmp then
45837: LD_VAR 0 6
45841: PUSH
45842: LD_VAR 0 6
45846: ARRAY
45847: PUSH
45848: LD_INT 2
45850: ARRAY
45851: PUSH
45852: LD_VAR 0 9
45856: LESS
45857: IFFALSE 45899
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45859: LD_ADDR_VAR 0 6
45863: PUSH
45864: LD_VAR 0 6
45868: PPUSH
45869: LD_VAR 0 6
45873: PUSH
45874: LD_INT 1
45876: PLUS
45877: PPUSH
45878: LD_VAR 0 7
45882: PUSH
45883: LD_VAR 0 9
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PPUSH
45892: CALL_OW 2
45896: ST_TO_ADDR
45897: GO 45979
// for j = 1 to result do
45899: LD_ADDR_VAR 0 8
45903: PUSH
45904: DOUBLE
45905: LD_INT 1
45907: DEC
45908: ST_TO_ADDR
45909: LD_VAR 0 6
45913: PUSH
45914: FOR_TO
45915: IFFALSE 45977
// begin if tmp < result [ j ] [ 2 ] then
45917: LD_VAR 0 9
45921: PUSH
45922: LD_VAR 0 6
45926: PUSH
45927: LD_VAR 0 8
45931: ARRAY
45932: PUSH
45933: LD_INT 2
45935: ARRAY
45936: LESS
45937: IFFALSE 45975
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45939: LD_ADDR_VAR 0 6
45943: PUSH
45944: LD_VAR 0 6
45948: PPUSH
45949: LD_VAR 0 8
45953: PPUSH
45954: LD_VAR 0 7
45958: PUSH
45959: LD_VAR 0 9
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PPUSH
45968: CALL_OW 2
45972: ST_TO_ADDR
// break ;
45973: GO 45977
// end ; end ;
45975: GO 45914
45977: POP
45978: POP
// end ; end ;
45979: GO 45778
45981: POP
45982: POP
// if result and not asc then
45983: LD_VAR 0 6
45987: PUSH
45988: LD_VAR 0 4
45992: NOT
45993: AND
45994: IFFALSE 46069
// begin tmp := result ;
45996: LD_ADDR_VAR 0 9
46000: PUSH
46001: LD_VAR 0 6
46005: ST_TO_ADDR
// for i = tmp downto 1 do
46006: LD_ADDR_VAR 0 7
46010: PUSH
46011: DOUBLE
46012: LD_VAR 0 9
46016: INC
46017: ST_TO_ADDR
46018: LD_INT 1
46020: PUSH
46021: FOR_DOWNTO
46022: IFFALSE 46067
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46024: LD_ADDR_VAR 0 6
46028: PUSH
46029: LD_VAR 0 6
46033: PPUSH
46034: LD_VAR 0 9
46038: PUSH
46039: LD_VAR 0 7
46043: MINUS
46044: PUSH
46045: LD_INT 1
46047: PLUS
46048: PPUSH
46049: LD_VAR 0 9
46053: PUSH
46054: LD_VAR 0 7
46058: ARRAY
46059: PPUSH
46060: CALL_OW 1
46064: ST_TO_ADDR
46065: GO 46021
46067: POP
46068: POP
// end ; tmp := [ ] ;
46069: LD_ADDR_VAR 0 9
46073: PUSH
46074: EMPTY
46075: ST_TO_ADDR
// if mode then
46076: LD_VAR 0 5
46080: IFFALSE 46149
// begin for i = 1 to result do
46082: LD_ADDR_VAR 0 7
46086: PUSH
46087: DOUBLE
46088: LD_INT 1
46090: DEC
46091: ST_TO_ADDR
46092: LD_VAR 0 6
46096: PUSH
46097: FOR_TO
46098: IFFALSE 46137
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46100: LD_ADDR_VAR 0 9
46104: PUSH
46105: LD_VAR 0 9
46109: PPUSH
46110: LD_VAR 0 7
46114: PPUSH
46115: LD_VAR 0 6
46119: PUSH
46120: LD_VAR 0 7
46124: ARRAY
46125: PUSH
46126: LD_INT 1
46128: ARRAY
46129: PPUSH
46130: CALL_OW 1
46134: ST_TO_ADDR
46135: GO 46097
46137: POP
46138: POP
// result := tmp ;
46139: LD_ADDR_VAR 0 6
46143: PUSH
46144: LD_VAR 0 9
46148: ST_TO_ADDR
// end ; end ;
46149: LD_VAR 0 6
46153: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46154: LD_INT 0
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
46161: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46162: LD_ADDR_VAR 0 5
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// if not x or not y then
46184: LD_VAR 0 2
46188: NOT
46189: PUSH
46190: LD_VAR 0 3
46194: NOT
46195: OR
46196: IFFALSE 46200
// exit ;
46198: GO 47850
// if not range then
46200: LD_VAR 0 4
46204: NOT
46205: IFFALSE 46215
// range := 10 ;
46207: LD_ADDR_VAR 0 4
46211: PUSH
46212: LD_INT 10
46214: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46215: LD_ADDR_VAR 0 8
46219: PUSH
46220: LD_INT 81
46222: PUSH
46223: LD_VAR 0 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 92
46234: PUSH
46235: LD_VAR 0 2
46239: PUSH
46240: LD_VAR 0 3
46244: PUSH
46245: LD_VAR 0 4
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 3
46258: PUSH
46259: LD_INT 21
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: PPUSH
46278: CALL_OW 69
46282: ST_TO_ADDR
// if not tmp then
46283: LD_VAR 0 8
46287: NOT
46288: IFFALSE 46292
// exit ;
46290: GO 47850
// for i in tmp do
46292: LD_ADDR_VAR 0 6
46296: PUSH
46297: LD_VAR 0 8
46301: PUSH
46302: FOR_IN
46303: IFFALSE 47825
// begin points := [ 0 , 0 , 0 ] ;
46305: LD_ADDR_VAR 0 9
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: ST_TO_ADDR
// bpoints := 1 ;
46324: LD_ADDR_VAR 0 10
46328: PUSH
46329: LD_INT 1
46331: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46332: LD_VAR 0 6
46336: PPUSH
46337: CALL_OW 247
46341: PUSH
46342: LD_INT 1
46344: DOUBLE
46345: EQUAL
46346: IFTRUE 46350
46348: GO 46928
46350: POP
// begin if GetClass ( i ) = 1 then
46351: LD_VAR 0 6
46355: PPUSH
46356: CALL_OW 257
46360: PUSH
46361: LD_INT 1
46363: EQUAL
46364: IFFALSE 46385
// points := [ 10 , 5 , 3 ] ;
46366: LD_ADDR_VAR 0 9
46370: PUSH
46371: LD_INT 10
46373: PUSH
46374: LD_INT 5
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: LIST
46384: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46385: LD_VAR 0 6
46389: PPUSH
46390: CALL_OW 257
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 4
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: IN
46409: IFFALSE 46430
// points := [ 3 , 2 , 1 ] ;
46411: LD_ADDR_VAR 0 9
46415: PUSH
46416: LD_INT 3
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46430: LD_VAR 0 6
46434: PPUSH
46435: CALL_OW 257
46439: PUSH
46440: LD_INT 5
46442: EQUAL
46443: IFFALSE 46464
// points := [ 130 , 5 , 2 ] ;
46445: LD_ADDR_VAR 0 9
46449: PUSH
46450: LD_INT 130
46452: PUSH
46453: LD_INT 5
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46464: LD_VAR 0 6
46468: PPUSH
46469: CALL_OW 257
46473: PUSH
46474: LD_INT 8
46476: EQUAL
46477: IFFALSE 46498
// points := [ 35 , 35 , 30 ] ;
46479: LD_ADDR_VAR 0 9
46483: PUSH
46484: LD_INT 35
46486: PUSH
46487: LD_INT 35
46489: PUSH
46490: LD_INT 30
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46498: LD_VAR 0 6
46502: PPUSH
46503: CALL_OW 257
46507: PUSH
46508: LD_INT 9
46510: EQUAL
46511: IFFALSE 46532
// points := [ 20 , 55 , 40 ] ;
46513: LD_ADDR_VAR 0 9
46517: PUSH
46518: LD_INT 20
46520: PUSH
46521: LD_INT 55
46523: PUSH
46524: LD_INT 40
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46532: LD_VAR 0 6
46536: PPUSH
46537: CALL_OW 257
46541: PUSH
46542: LD_INT 12
46544: PUSH
46545: LD_INT 16
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: IN
46552: IFFALSE 46573
// points := [ 5 , 3 , 2 ] ;
46554: LD_ADDR_VAR 0 9
46558: PUSH
46559: LD_INT 5
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46573: LD_VAR 0 6
46577: PPUSH
46578: CALL_OW 257
46582: PUSH
46583: LD_INT 17
46585: EQUAL
46586: IFFALSE 46607
// points := [ 100 , 50 , 75 ] ;
46588: LD_ADDR_VAR 0 9
46592: PUSH
46593: LD_INT 100
46595: PUSH
46596: LD_INT 50
46598: PUSH
46599: LD_INT 75
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46607: LD_VAR 0 6
46611: PPUSH
46612: CALL_OW 257
46616: PUSH
46617: LD_INT 15
46619: EQUAL
46620: IFFALSE 46641
// points := [ 10 , 5 , 3 ] ;
46622: LD_ADDR_VAR 0 9
46626: PUSH
46627: LD_INT 10
46629: PUSH
46630: LD_INT 5
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46641: LD_VAR 0 6
46645: PPUSH
46646: CALL_OW 257
46650: PUSH
46651: LD_INT 14
46653: EQUAL
46654: IFFALSE 46675
// points := [ 10 , 0 , 0 ] ;
46656: LD_ADDR_VAR 0 9
46660: PUSH
46661: LD_INT 10
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46675: LD_VAR 0 6
46679: PPUSH
46680: CALL_OW 257
46684: PUSH
46685: LD_INT 11
46687: EQUAL
46688: IFFALSE 46709
// points := [ 30 , 10 , 5 ] ;
46690: LD_ADDR_VAR 0 9
46694: PUSH
46695: LD_INT 30
46697: PUSH
46698: LD_INT 10
46700: PUSH
46701: LD_INT 5
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46709: LD_VAR 0 1
46713: PPUSH
46714: LD_INT 5
46716: PPUSH
46717: CALL_OW 321
46721: PUSH
46722: LD_INT 2
46724: EQUAL
46725: IFFALSE 46742
// bpoints := bpoints * 1.8 ;
46727: LD_ADDR_VAR 0 10
46731: PUSH
46732: LD_VAR 0 10
46736: PUSH
46737: LD_REAL  1.80000000000000E+0000
46740: MUL
46741: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46742: LD_VAR 0 6
46746: PPUSH
46747: CALL_OW 257
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: LD_INT 4
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: IN
46770: PUSH
46771: LD_VAR 0 1
46775: PPUSH
46776: LD_INT 51
46778: PPUSH
46779: CALL_OW 321
46783: PUSH
46784: LD_INT 2
46786: EQUAL
46787: AND
46788: IFFALSE 46805
// bpoints := bpoints * 1.2 ;
46790: LD_ADDR_VAR 0 10
46794: PUSH
46795: LD_VAR 0 10
46799: PUSH
46800: LD_REAL  1.20000000000000E+0000
46803: MUL
46804: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46805: LD_VAR 0 6
46809: PPUSH
46810: CALL_OW 257
46814: PUSH
46815: LD_INT 5
46817: PUSH
46818: LD_INT 7
46820: PUSH
46821: LD_INT 9
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: IN
46829: PUSH
46830: LD_VAR 0 1
46834: PPUSH
46835: LD_INT 52
46837: PPUSH
46838: CALL_OW 321
46842: PUSH
46843: LD_INT 2
46845: EQUAL
46846: AND
46847: IFFALSE 46864
// bpoints := bpoints * 1.5 ;
46849: LD_ADDR_VAR 0 10
46853: PUSH
46854: LD_VAR 0 10
46858: PUSH
46859: LD_REAL  1.50000000000000E+0000
46862: MUL
46863: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46864: LD_VAR 0 1
46868: PPUSH
46869: LD_INT 66
46871: PPUSH
46872: CALL_OW 321
46876: PUSH
46877: LD_INT 2
46879: EQUAL
46880: IFFALSE 46897
// bpoints := bpoints * 1.1 ;
46882: LD_ADDR_VAR 0 10
46886: PUSH
46887: LD_VAR 0 10
46891: PUSH
46892: LD_REAL  1.10000000000000E+0000
46895: MUL
46896: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46897: LD_ADDR_VAR 0 10
46901: PUSH
46902: LD_VAR 0 10
46906: PUSH
46907: LD_VAR 0 6
46911: PPUSH
46912: LD_INT 1
46914: PPUSH
46915: CALL_OW 259
46919: PUSH
46920: LD_REAL  1.15000000000000E+0000
46923: MUL
46924: MUL
46925: ST_TO_ADDR
// end ; unit_vehicle :
46926: GO 47754
46928: LD_INT 2
46930: DOUBLE
46931: EQUAL
46932: IFTRUE 46936
46934: GO 47742
46936: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46937: LD_VAR 0 6
46941: PPUSH
46942: CALL_OW 264
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 42
46952: PUSH
46953: LD_INT 24
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: IN
46961: IFFALSE 46982
// points := [ 25 , 5 , 3 ] ;
46963: LD_ADDR_VAR 0 9
46967: PUSH
46968: LD_INT 25
46970: PUSH
46971: LD_INT 5
46973: PUSH
46974: LD_INT 3
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46982: LD_VAR 0 6
46986: PPUSH
46987: CALL_OW 264
46991: PUSH
46992: LD_INT 4
46994: PUSH
46995: LD_INT 43
46997: PUSH
46998: LD_INT 25
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: IN
47006: IFFALSE 47027
// points := [ 40 , 15 , 5 ] ;
47008: LD_ADDR_VAR 0 9
47012: PUSH
47013: LD_INT 40
47015: PUSH
47016: LD_INT 15
47018: PUSH
47019: LD_INT 5
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47027: LD_VAR 0 6
47031: PPUSH
47032: CALL_OW 264
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 23
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: IN
47047: IFFALSE 47068
// points := [ 7 , 25 , 8 ] ;
47049: LD_ADDR_VAR 0 9
47053: PUSH
47054: LD_INT 7
47056: PUSH
47057: LD_INT 25
47059: PUSH
47060: LD_INT 8
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47068: LD_VAR 0 6
47072: PPUSH
47073: CALL_OW 264
47077: PUSH
47078: LD_INT 5
47080: PUSH
47081: LD_INT 27
47083: PUSH
47084: LD_INT 44
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: IN
47092: IFFALSE 47113
// points := [ 14 , 50 , 16 ] ;
47094: LD_ADDR_VAR 0 9
47098: PUSH
47099: LD_INT 14
47101: PUSH
47102: LD_INT 50
47104: PUSH
47105: LD_INT 16
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47113: LD_VAR 0 6
47117: PPUSH
47118: CALL_OW 264
47122: PUSH
47123: LD_INT 6
47125: PUSH
47126: LD_INT 46
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: IN
47133: IFFALSE 47154
// points := [ 32 , 120 , 70 ] ;
47135: LD_ADDR_VAR 0 9
47139: PUSH
47140: LD_INT 32
47142: PUSH
47143: LD_INT 120
47145: PUSH
47146: LD_INT 70
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47154: LD_VAR 0 6
47158: PPUSH
47159: CALL_OW 264
47163: PUSH
47164: LD_INT 7
47166: PUSH
47167: LD_INT 28
47169: PUSH
47170: LD_INT 45
47172: PUSH
47173: LD_INT 92
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: IN
47182: IFFALSE 47203
// points := [ 35 , 20 , 45 ] ;
47184: LD_ADDR_VAR 0 9
47188: PUSH
47189: LD_INT 35
47191: PUSH
47192: LD_INT 20
47194: PUSH
47195: LD_INT 45
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47203: LD_VAR 0 6
47207: PPUSH
47208: CALL_OW 264
47212: PUSH
47213: LD_INT 47
47215: PUSH
47216: EMPTY
47217: LIST
47218: IN
47219: IFFALSE 47240
// points := [ 67 , 45 , 75 ] ;
47221: LD_ADDR_VAR 0 9
47225: PUSH
47226: LD_INT 67
47228: PUSH
47229: LD_INT 45
47231: PUSH
47232: LD_INT 75
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47240: LD_VAR 0 6
47244: PPUSH
47245: CALL_OW 264
47249: PUSH
47250: LD_INT 26
47252: PUSH
47253: EMPTY
47254: LIST
47255: IN
47256: IFFALSE 47277
// points := [ 120 , 30 , 80 ] ;
47258: LD_ADDR_VAR 0 9
47262: PUSH
47263: LD_INT 120
47265: PUSH
47266: LD_INT 30
47268: PUSH
47269: LD_INT 80
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47277: LD_VAR 0 6
47281: PPUSH
47282: CALL_OW 264
47286: PUSH
47287: LD_INT 22
47289: PUSH
47290: EMPTY
47291: LIST
47292: IN
47293: IFFALSE 47314
// points := [ 40 , 1 , 1 ] ;
47295: LD_ADDR_VAR 0 9
47299: PUSH
47300: LD_INT 40
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47314: LD_VAR 0 6
47318: PPUSH
47319: CALL_OW 264
47323: PUSH
47324: LD_INT 29
47326: PUSH
47327: EMPTY
47328: LIST
47329: IN
47330: IFFALSE 47351
// points := [ 70 , 200 , 400 ] ;
47332: LD_ADDR_VAR 0 9
47336: PUSH
47337: LD_INT 70
47339: PUSH
47340: LD_INT 200
47342: PUSH
47343: LD_INT 400
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47351: LD_VAR 0 6
47355: PPUSH
47356: CALL_OW 264
47360: PUSH
47361: LD_INT 14
47363: PUSH
47364: LD_INT 53
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: IN
47371: IFFALSE 47392
// points := [ 40 , 10 , 20 ] ;
47373: LD_ADDR_VAR 0 9
47377: PUSH
47378: LD_INT 40
47380: PUSH
47381: LD_INT 10
47383: PUSH
47384: LD_INT 20
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47392: LD_VAR 0 6
47396: PPUSH
47397: CALL_OW 264
47401: PUSH
47402: LD_INT 9
47404: PUSH
47405: EMPTY
47406: LIST
47407: IN
47408: IFFALSE 47429
// points := [ 5 , 70 , 20 ] ;
47410: LD_ADDR_VAR 0 9
47414: PUSH
47415: LD_INT 5
47417: PUSH
47418: LD_INT 70
47420: PUSH
47421: LD_INT 20
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47429: LD_VAR 0 6
47433: PPUSH
47434: CALL_OW 264
47438: PUSH
47439: LD_INT 10
47441: PUSH
47442: EMPTY
47443: LIST
47444: IN
47445: IFFALSE 47466
// points := [ 35 , 110 , 70 ] ;
47447: LD_ADDR_VAR 0 9
47451: PUSH
47452: LD_INT 35
47454: PUSH
47455: LD_INT 110
47457: PUSH
47458: LD_INT 70
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47466: LD_VAR 0 6
47470: PPUSH
47471: CALL_OW 265
47475: PUSH
47476: LD_INT 25
47478: EQUAL
47479: IFFALSE 47500
// points := [ 80 , 65 , 100 ] ;
47481: LD_ADDR_VAR 0 9
47485: PUSH
47486: LD_INT 80
47488: PUSH
47489: LD_INT 65
47491: PUSH
47492: LD_INT 100
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47500: LD_VAR 0 6
47504: PPUSH
47505: CALL_OW 263
47509: PUSH
47510: LD_INT 1
47512: EQUAL
47513: IFFALSE 47548
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47515: LD_ADDR_VAR 0 10
47519: PUSH
47520: LD_VAR 0 10
47524: PUSH
47525: LD_VAR 0 6
47529: PPUSH
47530: CALL_OW 311
47534: PPUSH
47535: LD_INT 3
47537: PPUSH
47538: CALL_OW 259
47542: PUSH
47543: LD_INT 4
47545: MUL
47546: MUL
47547: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47548: LD_VAR 0 6
47552: PPUSH
47553: CALL_OW 263
47557: PUSH
47558: LD_INT 2
47560: EQUAL
47561: IFFALSE 47612
// begin j := IsControledBy ( i ) ;
47563: LD_ADDR_VAR 0 7
47567: PUSH
47568: LD_VAR 0 6
47572: PPUSH
47573: CALL_OW 312
47577: ST_TO_ADDR
// if j then
47578: LD_VAR 0 7
47582: IFFALSE 47612
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47584: LD_ADDR_VAR 0 10
47588: PUSH
47589: LD_VAR 0 10
47593: PUSH
47594: LD_VAR 0 7
47598: PPUSH
47599: LD_INT 3
47601: PPUSH
47602: CALL_OW 259
47606: PUSH
47607: LD_INT 3
47609: MUL
47610: MUL
47611: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47612: LD_VAR 0 6
47616: PPUSH
47617: CALL_OW 264
47621: PUSH
47622: LD_INT 5
47624: PUSH
47625: LD_INT 6
47627: PUSH
47628: LD_INT 46
47630: PUSH
47631: LD_INT 44
47633: PUSH
47634: LD_INT 47
47636: PUSH
47637: LD_INT 45
47639: PUSH
47640: LD_INT 28
47642: PUSH
47643: LD_INT 7
47645: PUSH
47646: LD_INT 27
47648: PUSH
47649: LD_INT 29
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: IN
47664: PUSH
47665: LD_VAR 0 1
47669: PPUSH
47670: LD_INT 52
47672: PPUSH
47673: CALL_OW 321
47677: PUSH
47678: LD_INT 2
47680: EQUAL
47681: AND
47682: IFFALSE 47699
// bpoints := bpoints * 1.2 ;
47684: LD_ADDR_VAR 0 10
47688: PUSH
47689: LD_VAR 0 10
47693: PUSH
47694: LD_REAL  1.20000000000000E+0000
47697: MUL
47698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47699: LD_VAR 0 6
47703: PPUSH
47704: CALL_OW 264
47708: PUSH
47709: LD_INT 6
47711: PUSH
47712: LD_INT 46
47714: PUSH
47715: LD_INT 47
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: IN
47723: IFFALSE 47740
// bpoints := bpoints * 1.2 ;
47725: LD_ADDR_VAR 0 10
47729: PUSH
47730: LD_VAR 0 10
47734: PUSH
47735: LD_REAL  1.20000000000000E+0000
47738: MUL
47739: ST_TO_ADDR
// end ; unit_building :
47740: GO 47754
47742: LD_INT 3
47744: DOUBLE
47745: EQUAL
47746: IFTRUE 47750
47748: GO 47753
47750: POP
// ; end ;
47751: GO 47754
47753: POP
// for j = 1 to 3 do
47754: LD_ADDR_VAR 0 7
47758: PUSH
47759: DOUBLE
47760: LD_INT 1
47762: DEC
47763: ST_TO_ADDR
47764: LD_INT 3
47766: PUSH
47767: FOR_TO
47768: IFFALSE 47821
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47770: LD_ADDR_VAR 0 5
47774: PUSH
47775: LD_VAR 0 5
47779: PPUSH
47780: LD_VAR 0 7
47784: PPUSH
47785: LD_VAR 0 5
47789: PUSH
47790: LD_VAR 0 7
47794: ARRAY
47795: PUSH
47796: LD_VAR 0 9
47800: PUSH
47801: LD_VAR 0 7
47805: ARRAY
47806: PUSH
47807: LD_VAR 0 10
47811: MUL
47812: PLUS
47813: PPUSH
47814: CALL_OW 1
47818: ST_TO_ADDR
47819: GO 47767
47821: POP
47822: POP
// end ;
47823: GO 46302
47825: POP
47826: POP
// result := Replace ( result , 4 , tmp ) ;
47827: LD_ADDR_VAR 0 5
47831: PUSH
47832: LD_VAR 0 5
47836: PPUSH
47837: LD_INT 4
47839: PPUSH
47840: LD_VAR 0 8
47844: PPUSH
47845: CALL_OW 1
47849: ST_TO_ADDR
// end ;
47850: LD_VAR 0 5
47854: RET
// export function DangerAtRange ( unit , range ) ; begin
47855: LD_INT 0
47857: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47858: LD_ADDR_VAR 0 3
47862: PUSH
47863: LD_VAR 0 1
47867: PPUSH
47868: CALL_OW 255
47872: PPUSH
47873: LD_VAR 0 1
47877: PPUSH
47878: CALL_OW 250
47882: PPUSH
47883: LD_VAR 0 1
47887: PPUSH
47888: CALL_OW 251
47892: PPUSH
47893: LD_VAR 0 2
47897: PPUSH
47898: CALL 46154 0 4
47902: ST_TO_ADDR
// end ;
47903: LD_VAR 0 3
47907: RET
// export function DangerInArea ( side , area ) ; begin
47908: LD_INT 0
47910: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47911: LD_ADDR_VAR 0 3
47915: PUSH
47916: LD_VAR 0 2
47920: PPUSH
47921: LD_INT 81
47923: PUSH
47924: LD_VAR 0 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PPUSH
47933: CALL_OW 70
47937: ST_TO_ADDR
// end ;
47938: LD_VAR 0 3
47942: RET
// export function IsExtension ( b ) ; begin
47943: LD_INT 0
47945: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47946: LD_ADDR_VAR 0 2
47950: PUSH
47951: LD_VAR 0 1
47955: PUSH
47956: LD_INT 23
47958: PUSH
47959: LD_INT 20
47961: PUSH
47962: LD_INT 22
47964: PUSH
47965: LD_INT 17
47967: PUSH
47968: LD_INT 24
47970: PUSH
47971: LD_INT 21
47973: PUSH
47974: LD_INT 19
47976: PUSH
47977: LD_INT 16
47979: PUSH
47980: LD_INT 25
47982: PUSH
47983: LD_INT 18
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: IN
47998: ST_TO_ADDR
// end ;
47999: LD_VAR 0 2
48003: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48004: LD_INT 0
48006: PPUSH
48007: PPUSH
48008: PPUSH
// result := [ ] ;
48009: LD_ADDR_VAR 0 4
48013: PUSH
48014: EMPTY
48015: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48016: LD_ADDR_VAR 0 5
48020: PUSH
48021: LD_VAR 0 2
48025: PPUSH
48026: LD_INT 21
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PPUSH
48036: CALL_OW 70
48040: ST_TO_ADDR
// if not tmp then
48041: LD_VAR 0 5
48045: NOT
48046: IFFALSE 48050
// exit ;
48048: GO 48114
// if checkLink then
48050: LD_VAR 0 3
48054: IFFALSE 48104
// begin for i in tmp do
48056: LD_ADDR_VAR 0 6
48060: PUSH
48061: LD_VAR 0 5
48065: PUSH
48066: FOR_IN
48067: IFFALSE 48102
// if GetBase ( i ) <> base then
48069: LD_VAR 0 6
48073: PPUSH
48074: CALL_OW 274
48078: PUSH
48079: LD_VAR 0 1
48083: NONEQUAL
48084: IFFALSE 48100
// ComLinkToBase ( base , i ) ;
48086: LD_VAR 0 1
48090: PPUSH
48091: LD_VAR 0 6
48095: PPUSH
48096: CALL_OW 169
48100: GO 48066
48102: POP
48103: POP
// end ; result := tmp ;
48104: LD_ADDR_VAR 0 4
48108: PUSH
48109: LD_VAR 0 5
48113: ST_TO_ADDR
// end ;
48114: LD_VAR 0 4
48118: RET
// export function ComComplete ( units , b ) ; var i ; begin
48119: LD_INT 0
48121: PPUSH
48122: PPUSH
// if not units then
48123: LD_VAR 0 1
48127: NOT
48128: IFFALSE 48132
// exit ;
48130: GO 48222
// for i in units do
48132: LD_ADDR_VAR 0 4
48136: PUSH
48137: LD_VAR 0 1
48141: PUSH
48142: FOR_IN
48143: IFFALSE 48220
// if BuildingStatus ( b ) = bs_build then
48145: LD_VAR 0 2
48149: PPUSH
48150: CALL_OW 461
48154: PUSH
48155: LD_INT 1
48157: EQUAL
48158: IFFALSE 48218
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48160: LD_VAR 0 4
48164: PPUSH
48165: LD_STRING h
48167: PUSH
48168: LD_VAR 0 2
48172: PPUSH
48173: CALL_OW 250
48177: PUSH
48178: LD_VAR 0 2
48182: PPUSH
48183: CALL_OW 251
48187: PUSH
48188: LD_VAR 0 2
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: PUSH
48211: EMPTY
48212: LIST
48213: PPUSH
48214: CALL_OW 446
48218: GO 48142
48220: POP
48221: POP
// end ;
48222: LD_VAR 0 3
48226: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48227: LD_INT 0
48229: PPUSH
48230: PPUSH
48231: PPUSH
48232: PPUSH
48233: PPUSH
48234: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48235: LD_VAR 0 1
48239: NOT
48240: PUSH
48241: LD_VAR 0 1
48245: PPUSH
48246: CALL_OW 263
48250: PUSH
48251: LD_INT 2
48253: NONEQUAL
48254: OR
48255: IFFALSE 48259
// exit ;
48257: GO 48575
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48259: LD_ADDR_VAR 0 6
48263: PUSH
48264: LD_INT 22
48266: PUSH
48267: LD_VAR 0 1
48271: PPUSH
48272: CALL_OW 255
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 30
48286: PUSH
48287: LD_INT 36
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 34
48296: PUSH
48297: LD_INT 31
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PPUSH
48313: CALL_OW 69
48317: ST_TO_ADDR
// if not tmp then
48318: LD_VAR 0 6
48322: NOT
48323: IFFALSE 48327
// exit ;
48325: GO 48575
// result := [ ] ;
48327: LD_ADDR_VAR 0 2
48331: PUSH
48332: EMPTY
48333: ST_TO_ADDR
// for i in tmp do
48334: LD_ADDR_VAR 0 3
48338: PUSH
48339: LD_VAR 0 6
48343: PUSH
48344: FOR_IN
48345: IFFALSE 48416
// begin t := UnitsInside ( i ) ;
48347: LD_ADDR_VAR 0 4
48351: PUSH
48352: LD_VAR 0 3
48356: PPUSH
48357: CALL_OW 313
48361: ST_TO_ADDR
// if t then
48362: LD_VAR 0 4
48366: IFFALSE 48414
// for j in t do
48368: LD_ADDR_VAR 0 7
48372: PUSH
48373: LD_VAR 0 4
48377: PUSH
48378: FOR_IN
48379: IFFALSE 48412
// result := Replace ( result , result + 1 , j ) ;
48381: LD_ADDR_VAR 0 2
48385: PUSH
48386: LD_VAR 0 2
48390: PPUSH
48391: LD_VAR 0 2
48395: PUSH
48396: LD_INT 1
48398: PLUS
48399: PPUSH
48400: LD_VAR 0 7
48404: PPUSH
48405: CALL_OW 1
48409: ST_TO_ADDR
48410: GO 48378
48412: POP
48413: POP
// end ;
48414: GO 48344
48416: POP
48417: POP
// if not result then
48418: LD_VAR 0 2
48422: NOT
48423: IFFALSE 48427
// exit ;
48425: GO 48575
// mech := result [ 1 ] ;
48427: LD_ADDR_VAR 0 5
48431: PUSH
48432: LD_VAR 0 2
48436: PUSH
48437: LD_INT 1
48439: ARRAY
48440: ST_TO_ADDR
// if result > 1 then
48441: LD_VAR 0 2
48445: PUSH
48446: LD_INT 1
48448: GREATER
48449: IFFALSE 48561
// begin for i = 2 to result do
48451: LD_ADDR_VAR 0 3
48455: PUSH
48456: DOUBLE
48457: LD_INT 2
48459: DEC
48460: ST_TO_ADDR
48461: LD_VAR 0 2
48465: PUSH
48466: FOR_TO
48467: IFFALSE 48559
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48469: LD_ADDR_VAR 0 4
48473: PUSH
48474: LD_VAR 0 2
48478: PUSH
48479: LD_VAR 0 3
48483: ARRAY
48484: PPUSH
48485: LD_INT 3
48487: PPUSH
48488: CALL_OW 259
48492: PUSH
48493: LD_VAR 0 2
48497: PUSH
48498: LD_VAR 0 3
48502: ARRAY
48503: PPUSH
48504: CALL_OW 432
48508: MINUS
48509: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48510: LD_VAR 0 4
48514: PUSH
48515: LD_VAR 0 5
48519: PPUSH
48520: LD_INT 3
48522: PPUSH
48523: CALL_OW 259
48527: PUSH
48528: LD_VAR 0 5
48532: PPUSH
48533: CALL_OW 432
48537: MINUS
48538: GREATEREQUAL
48539: IFFALSE 48557
// mech := result [ i ] ;
48541: LD_ADDR_VAR 0 5
48545: PUSH
48546: LD_VAR 0 2
48550: PUSH
48551: LD_VAR 0 3
48555: ARRAY
48556: ST_TO_ADDR
// end ;
48557: GO 48466
48559: POP
48560: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48561: LD_VAR 0 1
48565: PPUSH
48566: LD_VAR 0 5
48570: PPUSH
48571: CALL_OW 135
// end ;
48575: LD_VAR 0 2
48579: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48580: LD_INT 0
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
48591: PPUSH
48592: PPUSH
48593: PPUSH
48594: PPUSH
// result := [ ] ;
48595: LD_ADDR_VAR 0 7
48599: PUSH
48600: EMPTY
48601: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48602: LD_VAR 0 1
48606: PPUSH
48607: CALL_OW 266
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: IN
48622: NOT
48623: IFFALSE 48627
// exit ;
48625: GO 50261
// if name then
48627: LD_VAR 0 3
48631: IFFALSE 48647
// SetBName ( base_dep , name ) ;
48633: LD_VAR 0 1
48637: PPUSH
48638: LD_VAR 0 3
48642: PPUSH
48643: CALL_OW 500
// base := GetBase ( base_dep ) ;
48647: LD_ADDR_VAR 0 15
48651: PUSH
48652: LD_VAR 0 1
48656: PPUSH
48657: CALL_OW 274
48661: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48662: LD_ADDR_VAR 0 16
48666: PUSH
48667: LD_VAR 0 1
48671: PPUSH
48672: CALL_OW 255
48676: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48677: LD_ADDR_VAR 0 17
48681: PUSH
48682: LD_VAR 0 1
48686: PPUSH
48687: CALL_OW 248
48691: ST_TO_ADDR
// if sources then
48692: LD_VAR 0 5
48696: IFFALSE 48743
// for i = 1 to 3 do
48698: LD_ADDR_VAR 0 8
48702: PUSH
48703: DOUBLE
48704: LD_INT 1
48706: DEC
48707: ST_TO_ADDR
48708: LD_INT 3
48710: PUSH
48711: FOR_TO
48712: IFFALSE 48741
// AddResourceType ( base , i , sources [ i ] ) ;
48714: LD_VAR 0 15
48718: PPUSH
48719: LD_VAR 0 8
48723: PPUSH
48724: LD_VAR 0 5
48728: PUSH
48729: LD_VAR 0 8
48733: ARRAY
48734: PPUSH
48735: CALL_OW 276
48739: GO 48711
48741: POP
48742: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48743: LD_ADDR_VAR 0 18
48747: PUSH
48748: LD_VAR 0 15
48752: PPUSH
48753: LD_VAR 0 2
48757: PPUSH
48758: LD_INT 1
48760: PPUSH
48761: CALL 48004 0 3
48765: ST_TO_ADDR
// InitHc ;
48766: CALL_OW 19
// InitUc ;
48770: CALL_OW 18
// uc_side := side ;
48774: LD_ADDR_OWVAR 20
48778: PUSH
48779: LD_VAR 0 16
48783: ST_TO_ADDR
// uc_nation := nation ;
48784: LD_ADDR_OWVAR 21
48788: PUSH
48789: LD_VAR 0 17
48793: ST_TO_ADDR
// if buildings then
48794: LD_VAR 0 18
48798: IFFALSE 50120
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48800: LD_ADDR_VAR 0 19
48804: PUSH
48805: LD_VAR 0 18
48809: PPUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 30
48815: PUSH
48816: LD_INT 29
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 30
48825: PUSH
48826: LD_INT 30
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: PPUSH
48838: CALL_OW 72
48842: ST_TO_ADDR
// if tmp then
48843: LD_VAR 0 19
48847: IFFALSE 48895
// for i in tmp do
48849: LD_ADDR_VAR 0 8
48853: PUSH
48854: LD_VAR 0 19
48858: PUSH
48859: FOR_IN
48860: IFFALSE 48893
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48862: LD_VAR 0 8
48866: PPUSH
48867: CALL_OW 250
48871: PPUSH
48872: LD_VAR 0 8
48876: PPUSH
48877: CALL_OW 251
48881: PPUSH
48882: LD_VAR 0 16
48886: PPUSH
48887: CALL_OW 441
48891: GO 48859
48893: POP
48894: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48895: LD_VAR 0 18
48899: PPUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 30
48905: PUSH
48906: LD_INT 32
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 30
48915: PUSH
48916: LD_INT 33
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: PPUSH
48928: CALL_OW 72
48932: IFFALSE 49020
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48934: LD_ADDR_VAR 0 8
48938: PUSH
48939: LD_VAR 0 18
48943: PPUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 30
48949: PUSH
48950: LD_INT 32
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 30
48959: PUSH
48960: LD_INT 33
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: PPUSH
48972: CALL_OW 72
48976: PUSH
48977: FOR_IN
48978: IFFALSE 49018
// begin if not GetBWeapon ( i ) then
48980: LD_VAR 0 8
48984: PPUSH
48985: CALL_OW 269
48989: NOT
48990: IFFALSE 49016
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48992: LD_VAR 0 8
48996: PPUSH
48997: LD_VAR 0 8
49001: PPUSH
49002: LD_VAR 0 2
49006: PPUSH
49007: CALL 50266 0 2
49011: PPUSH
49012: CALL_OW 431
// end ;
49016: GO 48977
49018: POP
49019: POP
// end ; for i = 1 to personel do
49020: LD_ADDR_VAR 0 8
49024: PUSH
49025: DOUBLE
49026: LD_INT 1
49028: DEC
49029: ST_TO_ADDR
49030: LD_VAR 0 6
49034: PUSH
49035: FOR_TO
49036: IFFALSE 50100
// begin if i > 4 then
49038: LD_VAR 0 8
49042: PUSH
49043: LD_INT 4
49045: GREATER
49046: IFFALSE 49050
// break ;
49048: GO 50100
// case i of 1 :
49050: LD_VAR 0 8
49054: PUSH
49055: LD_INT 1
49057: DOUBLE
49058: EQUAL
49059: IFTRUE 49063
49061: GO 49143
49063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49064: LD_ADDR_VAR 0 12
49068: PUSH
49069: LD_VAR 0 18
49073: PPUSH
49074: LD_INT 22
49076: PUSH
49077: LD_VAR 0 16
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 58
49088: PUSH
49089: EMPTY
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 30
49097: PUSH
49098: LD_INT 32
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 30
49107: PUSH
49108: LD_INT 4
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 30
49117: PUSH
49118: LD_INT 5
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: PPUSH
49136: CALL_OW 72
49140: ST_TO_ADDR
49141: GO 49365
49143: LD_INT 2
49145: DOUBLE
49146: EQUAL
49147: IFTRUE 49151
49149: GO 49213
49151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49152: LD_ADDR_VAR 0 12
49156: PUSH
49157: LD_VAR 0 18
49161: PPUSH
49162: LD_INT 22
49164: PUSH
49165: LD_VAR 0 16
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 30
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 30
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PPUSH
49206: CALL_OW 72
49210: ST_TO_ADDR
49211: GO 49365
49213: LD_INT 3
49215: DOUBLE
49216: EQUAL
49217: IFTRUE 49221
49219: GO 49283
49221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49222: LD_ADDR_VAR 0 12
49226: PUSH
49227: LD_VAR 0 18
49231: PPUSH
49232: LD_INT 22
49234: PUSH
49235: LD_VAR 0 16
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 30
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 30
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PPUSH
49276: CALL_OW 72
49280: ST_TO_ADDR
49281: GO 49365
49283: LD_INT 4
49285: DOUBLE
49286: EQUAL
49287: IFTRUE 49291
49289: GO 49364
49291: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49292: LD_ADDR_VAR 0 12
49296: PUSH
49297: LD_VAR 0 18
49301: PPUSH
49302: LD_INT 22
49304: PUSH
49305: LD_VAR 0 16
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 30
49319: PUSH
49320: LD_INT 6
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 30
49329: PUSH
49330: LD_INT 7
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 30
49339: PUSH
49340: LD_INT 8
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PPUSH
49357: CALL_OW 72
49361: ST_TO_ADDR
49362: GO 49365
49364: POP
// if i = 1 then
49365: LD_VAR 0 8
49369: PUSH
49370: LD_INT 1
49372: EQUAL
49373: IFFALSE 49484
// begin tmp := [ ] ;
49375: LD_ADDR_VAR 0 19
49379: PUSH
49380: EMPTY
49381: ST_TO_ADDR
// for j in f do
49382: LD_ADDR_VAR 0 9
49386: PUSH
49387: LD_VAR 0 12
49391: PUSH
49392: FOR_IN
49393: IFFALSE 49466
// if GetBType ( j ) = b_bunker then
49395: LD_VAR 0 9
49399: PPUSH
49400: CALL_OW 266
49404: PUSH
49405: LD_INT 32
49407: EQUAL
49408: IFFALSE 49435
// tmp := Insert ( tmp , 1 , j ) else
49410: LD_ADDR_VAR 0 19
49414: PUSH
49415: LD_VAR 0 19
49419: PPUSH
49420: LD_INT 1
49422: PPUSH
49423: LD_VAR 0 9
49427: PPUSH
49428: CALL_OW 2
49432: ST_TO_ADDR
49433: GO 49464
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49435: LD_ADDR_VAR 0 19
49439: PUSH
49440: LD_VAR 0 19
49444: PPUSH
49445: LD_VAR 0 19
49449: PUSH
49450: LD_INT 1
49452: PLUS
49453: PPUSH
49454: LD_VAR 0 9
49458: PPUSH
49459: CALL_OW 2
49463: ST_TO_ADDR
49464: GO 49392
49466: POP
49467: POP
// if tmp then
49468: LD_VAR 0 19
49472: IFFALSE 49484
// f := tmp ;
49474: LD_ADDR_VAR 0 12
49478: PUSH
49479: LD_VAR 0 19
49483: ST_TO_ADDR
// end ; x := personel [ i ] ;
49484: LD_ADDR_VAR 0 13
49488: PUSH
49489: LD_VAR 0 6
49493: PUSH
49494: LD_VAR 0 8
49498: ARRAY
49499: ST_TO_ADDR
// if x = - 1 then
49500: LD_VAR 0 13
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: EQUAL
49509: IFFALSE 49718
// begin for j in f do
49511: LD_ADDR_VAR 0 9
49515: PUSH
49516: LD_VAR 0 12
49520: PUSH
49521: FOR_IN
49522: IFFALSE 49714
// repeat InitHc ;
49524: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49528: LD_VAR 0 9
49532: PPUSH
49533: CALL_OW 266
49537: PUSH
49538: LD_INT 5
49540: EQUAL
49541: IFFALSE 49611
// begin if UnitsInside ( j ) < 3 then
49543: LD_VAR 0 9
49547: PPUSH
49548: CALL_OW 313
49552: PUSH
49553: LD_INT 3
49555: LESS
49556: IFFALSE 49592
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49558: LD_INT 0
49560: PPUSH
49561: LD_INT 5
49563: PUSH
49564: LD_INT 8
49566: PUSH
49567: LD_INT 9
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: PUSH
49575: LD_VAR 0 17
49579: ARRAY
49580: PPUSH
49581: LD_VAR 0 4
49585: PPUSH
49586: CALL_OW 380
49590: GO 49609
// PrepareHuman ( false , i , skill ) ;
49592: LD_INT 0
49594: PPUSH
49595: LD_VAR 0 8
49599: PPUSH
49600: LD_VAR 0 4
49604: PPUSH
49605: CALL_OW 380
// end else
49609: GO 49628
// PrepareHuman ( false , i , skill ) ;
49611: LD_INT 0
49613: PPUSH
49614: LD_VAR 0 8
49618: PPUSH
49619: LD_VAR 0 4
49623: PPUSH
49624: CALL_OW 380
// un := CreateHuman ;
49628: LD_ADDR_VAR 0 14
49632: PUSH
49633: CALL_OW 44
49637: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49638: LD_ADDR_VAR 0 7
49642: PUSH
49643: LD_VAR 0 7
49647: PPUSH
49648: LD_INT 1
49650: PPUSH
49651: LD_VAR 0 14
49655: PPUSH
49656: CALL_OW 2
49660: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49661: LD_VAR 0 14
49665: PPUSH
49666: LD_VAR 0 9
49670: PPUSH
49671: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49675: LD_VAR 0 9
49679: PPUSH
49680: CALL_OW 313
49684: PUSH
49685: LD_INT 6
49687: EQUAL
49688: PUSH
49689: LD_VAR 0 9
49693: PPUSH
49694: CALL_OW 266
49698: PUSH
49699: LD_INT 32
49701: PUSH
49702: LD_INT 31
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: IN
49709: OR
49710: IFFALSE 49524
49712: GO 49521
49714: POP
49715: POP
// end else
49716: GO 50098
// for j = 1 to x do
49718: LD_ADDR_VAR 0 9
49722: PUSH
49723: DOUBLE
49724: LD_INT 1
49726: DEC
49727: ST_TO_ADDR
49728: LD_VAR 0 13
49732: PUSH
49733: FOR_TO
49734: IFFALSE 50096
// begin InitHc ;
49736: CALL_OW 19
// if not f then
49740: LD_VAR 0 12
49744: NOT
49745: IFFALSE 49834
// begin PrepareHuman ( false , i , skill ) ;
49747: LD_INT 0
49749: PPUSH
49750: LD_VAR 0 8
49754: PPUSH
49755: LD_VAR 0 4
49759: PPUSH
49760: CALL_OW 380
// un := CreateHuman ;
49764: LD_ADDR_VAR 0 14
49768: PUSH
49769: CALL_OW 44
49773: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49774: LD_ADDR_VAR 0 7
49778: PUSH
49779: LD_VAR 0 7
49783: PPUSH
49784: LD_INT 1
49786: PPUSH
49787: LD_VAR 0 14
49791: PPUSH
49792: CALL_OW 2
49796: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49797: LD_VAR 0 14
49801: PPUSH
49802: LD_VAR 0 1
49806: PPUSH
49807: CALL_OW 250
49811: PPUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: CALL_OW 251
49821: PPUSH
49822: LD_INT 10
49824: PPUSH
49825: LD_INT 0
49827: PPUSH
49828: CALL_OW 50
// continue ;
49832: GO 49733
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49834: LD_VAR 0 12
49838: PUSH
49839: LD_INT 1
49841: ARRAY
49842: PPUSH
49843: CALL_OW 313
49847: PUSH
49848: LD_VAR 0 12
49852: PUSH
49853: LD_INT 1
49855: ARRAY
49856: PPUSH
49857: CALL_OW 266
49861: PUSH
49862: LD_INT 32
49864: PUSH
49865: LD_INT 31
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: IN
49872: AND
49873: PUSH
49874: LD_VAR 0 12
49878: PUSH
49879: LD_INT 1
49881: ARRAY
49882: PPUSH
49883: CALL_OW 313
49887: PUSH
49888: LD_INT 6
49890: EQUAL
49891: OR
49892: IFFALSE 49912
// f := Delete ( f , 1 ) ;
49894: LD_ADDR_VAR 0 12
49898: PUSH
49899: LD_VAR 0 12
49903: PPUSH
49904: LD_INT 1
49906: PPUSH
49907: CALL_OW 3
49911: ST_TO_ADDR
// if not f then
49912: LD_VAR 0 12
49916: NOT
49917: IFFALSE 49935
// begin x := x + 2 ;
49919: LD_ADDR_VAR 0 13
49923: PUSH
49924: LD_VAR 0 13
49928: PUSH
49929: LD_INT 2
49931: PLUS
49932: ST_TO_ADDR
// continue ;
49933: GO 49733
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49935: LD_VAR 0 12
49939: PUSH
49940: LD_INT 1
49942: ARRAY
49943: PPUSH
49944: CALL_OW 266
49948: PUSH
49949: LD_INT 5
49951: EQUAL
49952: IFFALSE 50026
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49954: LD_VAR 0 12
49958: PUSH
49959: LD_INT 1
49961: ARRAY
49962: PPUSH
49963: CALL_OW 313
49967: PUSH
49968: LD_INT 3
49970: LESS
49971: IFFALSE 50007
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49973: LD_INT 0
49975: PPUSH
49976: LD_INT 5
49978: PUSH
49979: LD_INT 8
49981: PUSH
49982: LD_INT 9
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: LIST
49989: PUSH
49990: LD_VAR 0 17
49994: ARRAY
49995: PPUSH
49996: LD_VAR 0 4
50000: PPUSH
50001: CALL_OW 380
50005: GO 50024
// PrepareHuman ( false , i , skill ) ;
50007: LD_INT 0
50009: PPUSH
50010: LD_VAR 0 8
50014: PPUSH
50015: LD_VAR 0 4
50019: PPUSH
50020: CALL_OW 380
// end else
50024: GO 50043
// PrepareHuman ( false , i , skill ) ;
50026: LD_INT 0
50028: PPUSH
50029: LD_VAR 0 8
50033: PPUSH
50034: LD_VAR 0 4
50038: PPUSH
50039: CALL_OW 380
// un := CreateHuman ;
50043: LD_ADDR_VAR 0 14
50047: PUSH
50048: CALL_OW 44
50052: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50053: LD_ADDR_VAR 0 7
50057: PUSH
50058: LD_VAR 0 7
50062: PPUSH
50063: LD_INT 1
50065: PPUSH
50066: LD_VAR 0 14
50070: PPUSH
50071: CALL_OW 2
50075: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50076: LD_VAR 0 14
50080: PPUSH
50081: LD_VAR 0 12
50085: PUSH
50086: LD_INT 1
50088: ARRAY
50089: PPUSH
50090: CALL_OW 52
// end ;
50094: GO 49733
50096: POP
50097: POP
// end ;
50098: GO 49035
50100: POP
50101: POP
// result := result ^ buildings ;
50102: LD_ADDR_VAR 0 7
50106: PUSH
50107: LD_VAR 0 7
50111: PUSH
50112: LD_VAR 0 18
50116: ADD
50117: ST_TO_ADDR
// end else
50118: GO 50261
// begin for i = 1 to personel do
50120: LD_ADDR_VAR 0 8
50124: PUSH
50125: DOUBLE
50126: LD_INT 1
50128: DEC
50129: ST_TO_ADDR
50130: LD_VAR 0 6
50134: PUSH
50135: FOR_TO
50136: IFFALSE 50259
// begin if i > 4 then
50138: LD_VAR 0 8
50142: PUSH
50143: LD_INT 4
50145: GREATER
50146: IFFALSE 50150
// break ;
50148: GO 50259
// x := personel [ i ] ;
50150: LD_ADDR_VAR 0 13
50154: PUSH
50155: LD_VAR 0 6
50159: PUSH
50160: LD_VAR 0 8
50164: ARRAY
50165: ST_TO_ADDR
// if x = - 1 then
50166: LD_VAR 0 13
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: EQUAL
50175: IFFALSE 50179
// continue ;
50177: GO 50135
// PrepareHuman ( false , i , skill ) ;
50179: LD_INT 0
50181: PPUSH
50182: LD_VAR 0 8
50186: PPUSH
50187: LD_VAR 0 4
50191: PPUSH
50192: CALL_OW 380
// un := CreateHuman ;
50196: LD_ADDR_VAR 0 14
50200: PUSH
50201: CALL_OW 44
50205: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50206: LD_VAR 0 14
50210: PPUSH
50211: LD_VAR 0 1
50215: PPUSH
50216: CALL_OW 250
50220: PPUSH
50221: LD_VAR 0 1
50225: PPUSH
50226: CALL_OW 251
50230: PPUSH
50231: LD_INT 10
50233: PPUSH
50234: LD_INT 0
50236: PPUSH
50237: CALL_OW 50
// result := result ^ un ;
50241: LD_ADDR_VAR 0 7
50245: PUSH
50246: LD_VAR 0 7
50250: PUSH
50251: LD_VAR 0 14
50255: ADD
50256: ST_TO_ADDR
// end ;
50257: GO 50135
50259: POP
50260: POP
// end ; end ;
50261: LD_VAR 0 7
50265: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50266: LD_INT 0
50268: PPUSH
50269: PPUSH
50270: PPUSH
50271: PPUSH
50272: PPUSH
50273: PPUSH
50274: PPUSH
50275: PPUSH
50276: PPUSH
50277: PPUSH
50278: PPUSH
50279: PPUSH
50280: PPUSH
50281: PPUSH
50282: PPUSH
50283: PPUSH
// result := false ;
50284: LD_ADDR_VAR 0 3
50288: PUSH
50289: LD_INT 0
50291: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50292: LD_VAR 0 1
50296: NOT
50297: PUSH
50298: LD_VAR 0 1
50302: PPUSH
50303: CALL_OW 266
50307: PUSH
50308: LD_INT 32
50310: PUSH
50311: LD_INT 33
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: IN
50318: NOT
50319: OR
50320: IFFALSE 50324
// exit ;
50322: GO 51433
// nat := GetNation ( tower ) ;
50324: LD_ADDR_VAR 0 12
50328: PUSH
50329: LD_VAR 0 1
50333: PPUSH
50334: CALL_OW 248
50338: ST_TO_ADDR
// side := GetSide ( tower ) ;
50339: LD_ADDR_VAR 0 16
50343: PUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: CALL_OW 255
50353: ST_TO_ADDR
// x := GetX ( tower ) ;
50354: LD_ADDR_VAR 0 10
50358: PUSH
50359: LD_VAR 0 1
50363: PPUSH
50364: CALL_OW 250
50368: ST_TO_ADDR
// y := GetY ( tower ) ;
50369: LD_ADDR_VAR 0 11
50373: PUSH
50374: LD_VAR 0 1
50378: PPUSH
50379: CALL_OW 251
50383: ST_TO_ADDR
// if not x or not y then
50384: LD_VAR 0 10
50388: NOT
50389: PUSH
50390: LD_VAR 0 11
50394: NOT
50395: OR
50396: IFFALSE 50400
// exit ;
50398: GO 51433
// weapon := 0 ;
50400: LD_ADDR_VAR 0 18
50404: PUSH
50405: LD_INT 0
50407: ST_TO_ADDR
// fac_list := [ ] ;
50408: LD_ADDR_VAR 0 17
50412: PUSH
50413: EMPTY
50414: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50415: LD_ADDR_VAR 0 6
50419: PUSH
50420: LD_VAR 0 1
50424: PPUSH
50425: CALL_OW 274
50429: PPUSH
50430: LD_VAR 0 2
50434: PPUSH
50435: LD_INT 0
50437: PPUSH
50438: CALL 48004 0 3
50442: PPUSH
50443: LD_INT 30
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PPUSH
50453: CALL_OW 72
50457: ST_TO_ADDR
// if not factories then
50458: LD_VAR 0 6
50462: NOT
50463: IFFALSE 50467
// exit ;
50465: GO 51433
// for i in factories do
50467: LD_ADDR_VAR 0 8
50471: PUSH
50472: LD_VAR 0 6
50476: PUSH
50477: FOR_IN
50478: IFFALSE 50503
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50480: LD_ADDR_VAR 0 17
50484: PUSH
50485: LD_VAR 0 17
50489: PUSH
50490: LD_VAR 0 8
50494: PPUSH
50495: CALL_OW 478
50499: UNION
50500: ST_TO_ADDR
50501: GO 50477
50503: POP
50504: POP
// if not fac_list then
50505: LD_VAR 0 17
50509: NOT
50510: IFFALSE 50514
// exit ;
50512: GO 51433
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50514: LD_ADDR_VAR 0 5
50518: PUSH
50519: LD_INT 4
50521: PUSH
50522: LD_INT 5
50524: PUSH
50525: LD_INT 9
50527: PUSH
50528: LD_INT 10
50530: PUSH
50531: LD_INT 6
50533: PUSH
50534: LD_INT 7
50536: PUSH
50537: LD_INT 11
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 27
50551: PUSH
50552: LD_INT 28
50554: PUSH
50555: LD_INT 26
50557: PUSH
50558: LD_INT 30
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 43
50569: PUSH
50570: LD_INT 44
50572: PUSH
50573: LD_INT 46
50575: PUSH
50576: LD_INT 45
50578: PUSH
50579: LD_INT 47
50581: PUSH
50582: LD_INT 49
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: PUSH
50598: LD_VAR 0 12
50602: ARRAY
50603: ST_TO_ADDR
// list := list isect fac_list ;
50604: LD_ADDR_VAR 0 5
50608: PUSH
50609: LD_VAR 0 5
50613: PUSH
50614: LD_VAR 0 17
50618: ISECT
50619: ST_TO_ADDR
// if not list then
50620: LD_VAR 0 5
50624: NOT
50625: IFFALSE 50629
// exit ;
50627: GO 51433
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50629: LD_VAR 0 12
50633: PUSH
50634: LD_INT 3
50636: EQUAL
50637: PUSH
50638: LD_INT 49
50640: PUSH
50641: LD_VAR 0 5
50645: IN
50646: AND
50647: PUSH
50648: LD_INT 31
50650: PPUSH
50651: LD_VAR 0 16
50655: PPUSH
50656: CALL_OW 321
50660: PUSH
50661: LD_INT 2
50663: EQUAL
50664: AND
50665: IFFALSE 50725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50667: LD_INT 22
50669: PUSH
50670: LD_VAR 0 16
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 35
50681: PUSH
50682: LD_INT 49
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 91
50691: PUSH
50692: LD_VAR 0 1
50696: PUSH
50697: LD_INT 10
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: PPUSH
50710: CALL_OW 69
50714: NOT
50715: IFFALSE 50725
// weapon := ru_time_lapser ;
50717: LD_ADDR_VAR 0 18
50721: PUSH
50722: LD_INT 49
50724: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50725: LD_VAR 0 12
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: IN
50740: PUSH
50741: LD_INT 11
50743: PUSH
50744: LD_VAR 0 5
50748: IN
50749: PUSH
50750: LD_INT 30
50752: PUSH
50753: LD_VAR 0 5
50757: IN
50758: OR
50759: AND
50760: PUSH
50761: LD_INT 6
50763: PPUSH
50764: LD_VAR 0 16
50768: PPUSH
50769: CALL_OW 321
50773: PUSH
50774: LD_INT 2
50776: EQUAL
50777: AND
50778: IFFALSE 50943
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50780: LD_INT 22
50782: PUSH
50783: LD_VAR 0 16
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: LD_INT 35
50797: PUSH
50798: LD_INT 11
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 35
50807: PUSH
50808: LD_INT 30
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 91
50822: PUSH
50823: LD_VAR 0 1
50827: PUSH
50828: LD_INT 18
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: PPUSH
50841: CALL_OW 69
50845: NOT
50846: PUSH
50847: LD_INT 22
50849: PUSH
50850: LD_VAR 0 16
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: LD_INT 30
50864: PUSH
50865: LD_INT 32
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 30
50874: PUSH
50875: LD_INT 33
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 91
50889: PUSH
50890: LD_VAR 0 1
50894: PUSH
50895: LD_INT 12
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: PUSH
50908: EMPTY
50909: LIST
50910: PPUSH
50911: CALL_OW 69
50915: PUSH
50916: LD_INT 2
50918: GREATER
50919: AND
50920: IFFALSE 50943
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50922: LD_ADDR_VAR 0 18
50926: PUSH
50927: LD_INT 11
50929: PUSH
50930: LD_INT 30
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_VAR 0 12
50941: ARRAY
50942: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50943: LD_VAR 0 18
50947: NOT
50948: PUSH
50949: LD_INT 40
50951: PPUSH
50952: LD_VAR 0 16
50956: PPUSH
50957: CALL_OW 321
50961: PUSH
50962: LD_INT 2
50964: EQUAL
50965: AND
50966: PUSH
50967: LD_INT 7
50969: PUSH
50970: LD_VAR 0 5
50974: IN
50975: PUSH
50976: LD_INT 28
50978: PUSH
50979: LD_VAR 0 5
50983: IN
50984: OR
50985: PUSH
50986: LD_INT 45
50988: PUSH
50989: LD_VAR 0 5
50993: IN
50994: OR
50995: AND
50996: IFFALSE 51250
// begin hex := GetHexInfo ( x , y ) ;
50998: LD_ADDR_VAR 0 4
51002: PUSH
51003: LD_VAR 0 10
51007: PPUSH
51008: LD_VAR 0 11
51012: PPUSH
51013: CALL_OW 546
51017: ST_TO_ADDR
// if hex [ 1 ] then
51018: LD_VAR 0 4
51022: PUSH
51023: LD_INT 1
51025: ARRAY
51026: IFFALSE 51030
// exit ;
51028: GO 51433
// height := hex [ 2 ] ;
51030: LD_ADDR_VAR 0 15
51034: PUSH
51035: LD_VAR 0 4
51039: PUSH
51040: LD_INT 2
51042: ARRAY
51043: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51044: LD_ADDR_VAR 0 14
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 5
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: ST_TO_ADDR
// for i in tmp do
51067: LD_ADDR_VAR 0 8
51071: PUSH
51072: LD_VAR 0 14
51076: PUSH
51077: FOR_IN
51078: IFFALSE 51248
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51080: LD_ADDR_VAR 0 9
51084: PUSH
51085: LD_VAR 0 10
51089: PPUSH
51090: LD_VAR 0 8
51094: PPUSH
51095: LD_INT 5
51097: PPUSH
51098: CALL_OW 272
51102: PUSH
51103: LD_VAR 0 11
51107: PPUSH
51108: LD_VAR 0 8
51112: PPUSH
51113: LD_INT 5
51115: PPUSH
51116: CALL_OW 273
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51125: LD_VAR 0 9
51129: PUSH
51130: LD_INT 1
51132: ARRAY
51133: PPUSH
51134: LD_VAR 0 9
51138: PUSH
51139: LD_INT 2
51141: ARRAY
51142: PPUSH
51143: CALL_OW 488
51147: IFFALSE 51246
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51149: LD_ADDR_VAR 0 4
51153: PUSH
51154: LD_VAR 0 9
51158: PUSH
51159: LD_INT 1
51161: ARRAY
51162: PPUSH
51163: LD_VAR 0 9
51167: PUSH
51168: LD_INT 2
51170: ARRAY
51171: PPUSH
51172: CALL_OW 546
51176: ST_TO_ADDR
// if hex [ 1 ] then
51177: LD_VAR 0 4
51181: PUSH
51182: LD_INT 1
51184: ARRAY
51185: IFFALSE 51189
// continue ;
51187: GO 51077
// h := hex [ 2 ] ;
51189: LD_ADDR_VAR 0 13
51193: PUSH
51194: LD_VAR 0 4
51198: PUSH
51199: LD_INT 2
51201: ARRAY
51202: ST_TO_ADDR
// if h + 7 < height then
51203: LD_VAR 0 13
51207: PUSH
51208: LD_INT 7
51210: PLUS
51211: PUSH
51212: LD_VAR 0 15
51216: LESS
51217: IFFALSE 51246
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51219: LD_ADDR_VAR 0 18
51223: PUSH
51224: LD_INT 7
51226: PUSH
51227: LD_INT 28
51229: PUSH
51230: LD_INT 45
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: PUSH
51238: LD_VAR 0 12
51242: ARRAY
51243: ST_TO_ADDR
// break ;
51244: GO 51248
// end ; end ; end ;
51246: GO 51077
51248: POP
51249: POP
// end ; if not weapon then
51250: LD_VAR 0 18
51254: NOT
51255: IFFALSE 51315
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51257: LD_ADDR_VAR 0 5
51261: PUSH
51262: LD_VAR 0 5
51266: PUSH
51267: LD_INT 11
51269: PUSH
51270: LD_INT 30
51272: PUSH
51273: LD_INT 49
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: DIFF
51281: ST_TO_ADDR
// if not list then
51282: LD_VAR 0 5
51286: NOT
51287: IFFALSE 51291
// exit ;
51289: GO 51433
// weapon := list [ rand ( 1 , list ) ] ;
51291: LD_ADDR_VAR 0 18
51295: PUSH
51296: LD_VAR 0 5
51300: PUSH
51301: LD_INT 1
51303: PPUSH
51304: LD_VAR 0 5
51308: PPUSH
51309: CALL_OW 12
51313: ARRAY
51314: ST_TO_ADDR
// end ; if weapon then
51315: LD_VAR 0 18
51319: IFFALSE 51433
// begin tmp := CostOfWeapon ( weapon ) ;
51321: LD_ADDR_VAR 0 14
51325: PUSH
51326: LD_VAR 0 18
51330: PPUSH
51331: CALL_OW 451
51335: ST_TO_ADDR
// j := GetBase ( tower ) ;
51336: LD_ADDR_VAR 0 9
51340: PUSH
51341: LD_VAR 0 1
51345: PPUSH
51346: CALL_OW 274
51350: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51351: LD_VAR 0 9
51355: PPUSH
51356: LD_INT 1
51358: PPUSH
51359: CALL_OW 275
51363: PUSH
51364: LD_VAR 0 14
51368: PUSH
51369: LD_INT 1
51371: ARRAY
51372: GREATEREQUAL
51373: PUSH
51374: LD_VAR 0 9
51378: PPUSH
51379: LD_INT 2
51381: PPUSH
51382: CALL_OW 275
51386: PUSH
51387: LD_VAR 0 14
51391: PUSH
51392: LD_INT 2
51394: ARRAY
51395: GREATEREQUAL
51396: AND
51397: PUSH
51398: LD_VAR 0 9
51402: PPUSH
51403: LD_INT 3
51405: PPUSH
51406: CALL_OW 275
51410: PUSH
51411: LD_VAR 0 14
51415: PUSH
51416: LD_INT 3
51418: ARRAY
51419: GREATEREQUAL
51420: AND
51421: IFFALSE 51433
// result := weapon ;
51423: LD_ADDR_VAR 0 3
51427: PUSH
51428: LD_VAR 0 18
51432: ST_TO_ADDR
// end ; end ;
51433: LD_VAR 0 3
51437: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51438: LD_INT 0
51440: PPUSH
51441: PPUSH
// result := true ;
51442: LD_ADDR_VAR 0 3
51446: PUSH
51447: LD_INT 1
51449: ST_TO_ADDR
// if array1 = array2 then
51450: LD_VAR 0 1
51454: PUSH
51455: LD_VAR 0 2
51459: EQUAL
51460: IFFALSE 51520
// begin for i = 1 to array1 do
51462: LD_ADDR_VAR 0 4
51466: PUSH
51467: DOUBLE
51468: LD_INT 1
51470: DEC
51471: ST_TO_ADDR
51472: LD_VAR 0 1
51476: PUSH
51477: FOR_TO
51478: IFFALSE 51516
// if array1 [ i ] <> array2 [ i ] then
51480: LD_VAR 0 1
51484: PUSH
51485: LD_VAR 0 4
51489: ARRAY
51490: PUSH
51491: LD_VAR 0 2
51495: PUSH
51496: LD_VAR 0 4
51500: ARRAY
51501: NONEQUAL
51502: IFFALSE 51514
// begin result := false ;
51504: LD_ADDR_VAR 0 3
51508: PUSH
51509: LD_INT 0
51511: ST_TO_ADDR
// break ;
51512: GO 51516
// end ;
51514: GO 51477
51516: POP
51517: POP
// end else
51518: GO 51528
// result := false ;
51520: LD_ADDR_VAR 0 3
51524: PUSH
51525: LD_INT 0
51527: ST_TO_ADDR
// end ;
51528: LD_VAR 0 3
51532: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51533: LD_INT 0
51535: PPUSH
51536: PPUSH
// if not array1 or not array2 then
51537: LD_VAR 0 1
51541: NOT
51542: PUSH
51543: LD_VAR 0 2
51547: NOT
51548: OR
51549: IFFALSE 51553
// exit ;
51551: GO 51617
// result := true ;
51553: LD_ADDR_VAR 0 3
51557: PUSH
51558: LD_INT 1
51560: ST_TO_ADDR
// for i = 1 to array1 do
51561: LD_ADDR_VAR 0 4
51565: PUSH
51566: DOUBLE
51567: LD_INT 1
51569: DEC
51570: ST_TO_ADDR
51571: LD_VAR 0 1
51575: PUSH
51576: FOR_TO
51577: IFFALSE 51615
// if array1 [ i ] <> array2 [ i ] then
51579: LD_VAR 0 1
51583: PUSH
51584: LD_VAR 0 4
51588: ARRAY
51589: PUSH
51590: LD_VAR 0 2
51594: PUSH
51595: LD_VAR 0 4
51599: ARRAY
51600: NONEQUAL
51601: IFFALSE 51613
// begin result := false ;
51603: LD_ADDR_VAR 0 3
51607: PUSH
51608: LD_INT 0
51610: ST_TO_ADDR
// break ;
51611: GO 51615
// end ;
51613: GO 51576
51615: POP
51616: POP
// end ;
51617: LD_VAR 0 3
51621: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51622: LD_INT 0
51624: PPUSH
51625: PPUSH
51626: PPUSH
// pom := GetBase ( fac ) ;
51627: LD_ADDR_VAR 0 5
51631: PUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: CALL_OW 274
51641: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51642: LD_ADDR_VAR 0 4
51646: PUSH
51647: LD_VAR 0 2
51651: PUSH
51652: LD_INT 1
51654: ARRAY
51655: PPUSH
51656: LD_VAR 0 2
51660: PUSH
51661: LD_INT 2
51663: ARRAY
51664: PPUSH
51665: LD_VAR 0 2
51669: PUSH
51670: LD_INT 3
51672: ARRAY
51673: PPUSH
51674: LD_VAR 0 2
51678: PUSH
51679: LD_INT 4
51681: ARRAY
51682: PPUSH
51683: CALL_OW 449
51687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51688: LD_ADDR_VAR 0 3
51692: PUSH
51693: LD_VAR 0 5
51697: PPUSH
51698: LD_INT 1
51700: PPUSH
51701: CALL_OW 275
51705: PUSH
51706: LD_VAR 0 4
51710: PUSH
51711: LD_INT 1
51713: ARRAY
51714: GREATEREQUAL
51715: PUSH
51716: LD_VAR 0 5
51720: PPUSH
51721: LD_INT 2
51723: PPUSH
51724: CALL_OW 275
51728: PUSH
51729: LD_VAR 0 4
51733: PUSH
51734: LD_INT 2
51736: ARRAY
51737: GREATEREQUAL
51738: AND
51739: PUSH
51740: LD_VAR 0 5
51744: PPUSH
51745: LD_INT 3
51747: PPUSH
51748: CALL_OW 275
51752: PUSH
51753: LD_VAR 0 4
51757: PUSH
51758: LD_INT 3
51760: ARRAY
51761: GREATEREQUAL
51762: AND
51763: ST_TO_ADDR
// end ;
51764: LD_VAR 0 3
51768: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51769: LD_INT 0
51771: PPUSH
51772: PPUSH
51773: PPUSH
51774: PPUSH
// pom := GetBase ( building ) ;
51775: LD_ADDR_VAR 0 3
51779: PUSH
51780: LD_VAR 0 1
51784: PPUSH
51785: CALL_OW 274
51789: ST_TO_ADDR
// if not pom then
51790: LD_VAR 0 3
51794: NOT
51795: IFFALSE 51799
// exit ;
51797: GO 51969
// btype := GetBType ( building ) ;
51799: LD_ADDR_VAR 0 5
51803: PUSH
51804: LD_VAR 0 1
51808: PPUSH
51809: CALL_OW 266
51813: ST_TO_ADDR
// if btype = b_armoury then
51814: LD_VAR 0 5
51818: PUSH
51819: LD_INT 4
51821: EQUAL
51822: IFFALSE 51832
// btype := b_barracks ;
51824: LD_ADDR_VAR 0 5
51828: PUSH
51829: LD_INT 5
51831: ST_TO_ADDR
// if btype = b_depot then
51832: LD_VAR 0 5
51836: PUSH
51837: LD_INT 0
51839: EQUAL
51840: IFFALSE 51850
// btype := b_warehouse ;
51842: LD_ADDR_VAR 0 5
51846: PUSH
51847: LD_INT 1
51849: ST_TO_ADDR
// if btype = b_workshop then
51850: LD_VAR 0 5
51854: PUSH
51855: LD_INT 2
51857: EQUAL
51858: IFFALSE 51868
// btype := b_factory ;
51860: LD_ADDR_VAR 0 5
51864: PUSH
51865: LD_INT 3
51867: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51868: LD_ADDR_VAR 0 4
51872: PUSH
51873: LD_VAR 0 5
51877: PPUSH
51878: LD_VAR 0 1
51882: PPUSH
51883: CALL_OW 248
51887: PPUSH
51888: CALL_OW 450
51892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51893: LD_ADDR_VAR 0 2
51897: PUSH
51898: LD_VAR 0 3
51902: PPUSH
51903: LD_INT 1
51905: PPUSH
51906: CALL_OW 275
51910: PUSH
51911: LD_VAR 0 4
51915: PUSH
51916: LD_INT 1
51918: ARRAY
51919: GREATEREQUAL
51920: PUSH
51921: LD_VAR 0 3
51925: PPUSH
51926: LD_INT 2
51928: PPUSH
51929: CALL_OW 275
51933: PUSH
51934: LD_VAR 0 4
51938: PUSH
51939: LD_INT 2
51941: ARRAY
51942: GREATEREQUAL
51943: AND
51944: PUSH
51945: LD_VAR 0 3
51949: PPUSH
51950: LD_INT 3
51952: PPUSH
51953: CALL_OW 275
51957: PUSH
51958: LD_VAR 0 4
51962: PUSH
51963: LD_INT 3
51965: ARRAY
51966: GREATEREQUAL
51967: AND
51968: ST_TO_ADDR
// end ;
51969: LD_VAR 0 2
51973: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51974: LD_INT 0
51976: PPUSH
51977: PPUSH
51978: PPUSH
// pom := GetBase ( building ) ;
51979: LD_ADDR_VAR 0 4
51983: PUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 274
51993: ST_TO_ADDR
// if not pom then
51994: LD_VAR 0 4
51998: NOT
51999: IFFALSE 52003
// exit ;
52001: GO 52104
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52003: LD_ADDR_VAR 0 5
52007: PUSH
52008: LD_VAR 0 2
52012: PPUSH
52013: LD_VAR 0 1
52017: PPUSH
52018: CALL_OW 248
52022: PPUSH
52023: CALL_OW 450
52027: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_VAR 0 4
52037: PPUSH
52038: LD_INT 1
52040: PPUSH
52041: CALL_OW 275
52045: PUSH
52046: LD_VAR 0 5
52050: PUSH
52051: LD_INT 1
52053: ARRAY
52054: GREATEREQUAL
52055: PUSH
52056: LD_VAR 0 4
52060: PPUSH
52061: LD_INT 2
52063: PPUSH
52064: CALL_OW 275
52068: PUSH
52069: LD_VAR 0 5
52073: PUSH
52074: LD_INT 2
52076: ARRAY
52077: GREATEREQUAL
52078: AND
52079: PUSH
52080: LD_VAR 0 4
52084: PPUSH
52085: LD_INT 3
52087: PPUSH
52088: CALL_OW 275
52092: PUSH
52093: LD_VAR 0 5
52097: PUSH
52098: LD_INT 3
52100: ARRAY
52101: GREATEREQUAL
52102: AND
52103: ST_TO_ADDR
// end ;
52104: LD_VAR 0 3
52108: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52109: LD_INT 0
52111: PPUSH
52112: PPUSH
52113: PPUSH
52114: PPUSH
52115: PPUSH
52116: PPUSH
52117: PPUSH
52118: PPUSH
52119: PPUSH
52120: PPUSH
52121: PPUSH
// result := false ;
52122: LD_ADDR_VAR 0 8
52126: PUSH
52127: LD_INT 0
52129: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52130: LD_VAR 0 5
52134: NOT
52135: PUSH
52136: LD_VAR 0 1
52140: NOT
52141: OR
52142: PUSH
52143: LD_VAR 0 2
52147: NOT
52148: OR
52149: PUSH
52150: LD_VAR 0 3
52154: NOT
52155: OR
52156: IFFALSE 52160
// exit ;
52158: GO 52974
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52160: LD_ADDR_VAR 0 14
52164: PUSH
52165: LD_VAR 0 1
52169: PPUSH
52170: LD_VAR 0 2
52174: PPUSH
52175: LD_VAR 0 3
52179: PPUSH
52180: LD_VAR 0 4
52184: PPUSH
52185: LD_VAR 0 5
52189: PUSH
52190: LD_INT 1
52192: ARRAY
52193: PPUSH
52194: CALL_OW 248
52198: PPUSH
52199: LD_INT 0
52201: PPUSH
52202: CALL 54207 0 6
52206: ST_TO_ADDR
// if not hexes then
52207: LD_VAR 0 14
52211: NOT
52212: IFFALSE 52216
// exit ;
52214: GO 52974
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52216: LD_ADDR_VAR 0 17
52220: PUSH
52221: LD_VAR 0 5
52225: PPUSH
52226: LD_INT 22
52228: PUSH
52229: LD_VAR 0 13
52233: PPUSH
52234: CALL_OW 255
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 30
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 30
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: LIST
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PPUSH
52275: CALL_OW 72
52279: ST_TO_ADDR
// for i = 1 to hexes do
52280: LD_ADDR_VAR 0 9
52284: PUSH
52285: DOUBLE
52286: LD_INT 1
52288: DEC
52289: ST_TO_ADDR
52290: LD_VAR 0 14
52294: PUSH
52295: FOR_TO
52296: IFFALSE 52972
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52298: LD_ADDR_VAR 0 13
52302: PUSH
52303: LD_VAR 0 14
52307: PUSH
52308: LD_VAR 0 9
52312: ARRAY
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: PPUSH
52318: LD_VAR 0 14
52322: PUSH
52323: LD_VAR 0 9
52327: ARRAY
52328: PUSH
52329: LD_INT 2
52331: ARRAY
52332: PPUSH
52333: CALL_OW 428
52337: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52338: LD_VAR 0 14
52342: PUSH
52343: LD_VAR 0 9
52347: ARRAY
52348: PUSH
52349: LD_INT 1
52351: ARRAY
52352: PPUSH
52353: LD_VAR 0 14
52357: PUSH
52358: LD_VAR 0 9
52362: ARRAY
52363: PUSH
52364: LD_INT 2
52366: ARRAY
52367: PPUSH
52368: CALL_OW 351
52372: PUSH
52373: LD_VAR 0 14
52377: PUSH
52378: LD_VAR 0 9
52382: ARRAY
52383: PUSH
52384: LD_INT 1
52386: ARRAY
52387: PPUSH
52388: LD_VAR 0 14
52392: PUSH
52393: LD_VAR 0 9
52397: ARRAY
52398: PUSH
52399: LD_INT 2
52401: ARRAY
52402: PPUSH
52403: CALL_OW 488
52407: NOT
52408: OR
52409: PUSH
52410: LD_VAR 0 13
52414: PPUSH
52415: CALL_OW 247
52419: PUSH
52420: LD_INT 3
52422: EQUAL
52423: OR
52424: IFFALSE 52430
// exit ;
52426: POP
52427: POP
52428: GO 52974
// if not tmp then
52430: LD_VAR 0 13
52434: NOT
52435: IFFALSE 52439
// continue ;
52437: GO 52295
// result := true ;
52439: LD_ADDR_VAR 0 8
52443: PUSH
52444: LD_INT 1
52446: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52447: LD_VAR 0 6
52451: PUSH
52452: LD_VAR 0 13
52456: PPUSH
52457: CALL_OW 247
52461: PUSH
52462: LD_INT 2
52464: EQUAL
52465: AND
52466: PUSH
52467: LD_VAR 0 13
52471: PPUSH
52472: CALL_OW 263
52476: PUSH
52477: LD_INT 1
52479: EQUAL
52480: AND
52481: IFFALSE 52645
// begin if IsDrivenBy ( tmp ) then
52483: LD_VAR 0 13
52487: PPUSH
52488: CALL_OW 311
52492: IFFALSE 52496
// continue ;
52494: GO 52295
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52496: LD_VAR 0 6
52500: PPUSH
52501: LD_INT 3
52503: PUSH
52504: LD_INT 60
52506: PUSH
52507: EMPTY
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: PUSH
52517: LD_INT 55
52519: PUSH
52520: EMPTY
52521: LIST
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PPUSH
52531: CALL_OW 72
52535: IFFALSE 52643
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52537: LD_ADDR_VAR 0 18
52541: PUSH
52542: LD_VAR 0 6
52546: PPUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 60
52552: PUSH
52553: EMPTY
52554: LIST
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: LD_INT 55
52565: PUSH
52566: EMPTY
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PPUSH
52577: CALL_OW 72
52581: PUSH
52582: LD_INT 1
52584: ARRAY
52585: ST_TO_ADDR
// if IsInUnit ( driver ) then
52586: LD_VAR 0 18
52590: PPUSH
52591: CALL_OW 310
52595: IFFALSE 52606
// ComExit ( driver ) ;
52597: LD_VAR 0 18
52601: PPUSH
52602: CALL 77987 0 1
// AddComEnterUnit ( driver , tmp ) ;
52606: LD_VAR 0 18
52610: PPUSH
52611: LD_VAR 0 13
52615: PPUSH
52616: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52620: LD_VAR 0 18
52624: PPUSH
52625: LD_VAR 0 7
52629: PPUSH
52630: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52634: LD_VAR 0 18
52638: PPUSH
52639: CALL_OW 181
// end ; continue ;
52643: GO 52295
// end ; if not cleaners or not tmp in cleaners then
52645: LD_VAR 0 6
52649: NOT
52650: PUSH
52651: LD_VAR 0 13
52655: PUSH
52656: LD_VAR 0 6
52660: IN
52661: NOT
52662: OR
52663: IFFALSE 52970
// begin if dep then
52665: LD_VAR 0 17
52669: IFFALSE 52805
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52671: LD_ADDR_VAR 0 16
52675: PUSH
52676: LD_VAR 0 17
52680: PUSH
52681: LD_INT 1
52683: ARRAY
52684: PPUSH
52685: CALL_OW 250
52689: PPUSH
52690: LD_VAR 0 17
52694: PUSH
52695: LD_INT 1
52697: ARRAY
52698: PPUSH
52699: CALL_OW 254
52703: PPUSH
52704: LD_INT 5
52706: PPUSH
52707: CALL_OW 272
52711: PUSH
52712: LD_VAR 0 17
52716: PUSH
52717: LD_INT 1
52719: ARRAY
52720: PPUSH
52721: CALL_OW 251
52725: PPUSH
52726: LD_VAR 0 17
52730: PUSH
52731: LD_INT 1
52733: ARRAY
52734: PPUSH
52735: CALL_OW 254
52739: PPUSH
52740: LD_INT 5
52742: PPUSH
52743: CALL_OW 273
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52752: LD_VAR 0 16
52756: PUSH
52757: LD_INT 1
52759: ARRAY
52760: PPUSH
52761: LD_VAR 0 16
52765: PUSH
52766: LD_INT 2
52768: ARRAY
52769: PPUSH
52770: CALL_OW 488
52774: IFFALSE 52805
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52776: LD_VAR 0 13
52780: PPUSH
52781: LD_VAR 0 16
52785: PUSH
52786: LD_INT 1
52788: ARRAY
52789: PPUSH
52790: LD_VAR 0 16
52794: PUSH
52795: LD_INT 2
52797: ARRAY
52798: PPUSH
52799: CALL_OW 111
// continue ;
52803: GO 52295
// end ; end ; r := GetDir ( tmp ) ;
52805: LD_ADDR_VAR 0 15
52809: PUSH
52810: LD_VAR 0 13
52814: PPUSH
52815: CALL_OW 254
52819: ST_TO_ADDR
// if r = 5 then
52820: LD_VAR 0 15
52824: PUSH
52825: LD_INT 5
52827: EQUAL
52828: IFFALSE 52838
// r := 0 ;
52830: LD_ADDR_VAR 0 15
52834: PUSH
52835: LD_INT 0
52837: ST_TO_ADDR
// for j = r to 5 do
52838: LD_ADDR_VAR 0 10
52842: PUSH
52843: DOUBLE
52844: LD_VAR 0 15
52848: DEC
52849: ST_TO_ADDR
52850: LD_INT 5
52852: PUSH
52853: FOR_TO
52854: IFFALSE 52968
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52856: LD_ADDR_VAR 0 11
52860: PUSH
52861: LD_VAR 0 13
52865: PPUSH
52866: CALL_OW 250
52870: PPUSH
52871: LD_VAR 0 10
52875: PPUSH
52876: LD_INT 2
52878: PPUSH
52879: CALL_OW 272
52883: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52884: LD_ADDR_VAR 0 12
52888: PUSH
52889: LD_VAR 0 13
52893: PPUSH
52894: CALL_OW 251
52898: PPUSH
52899: LD_VAR 0 10
52903: PPUSH
52904: LD_INT 2
52906: PPUSH
52907: CALL_OW 273
52911: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52912: LD_VAR 0 11
52916: PPUSH
52917: LD_VAR 0 12
52921: PPUSH
52922: CALL_OW 488
52926: PUSH
52927: LD_VAR 0 11
52931: PPUSH
52932: LD_VAR 0 12
52936: PPUSH
52937: CALL_OW 428
52941: NOT
52942: AND
52943: IFFALSE 52966
// begin ComMoveXY ( tmp , _x , _y ) ;
52945: LD_VAR 0 13
52949: PPUSH
52950: LD_VAR 0 11
52954: PPUSH
52955: LD_VAR 0 12
52959: PPUSH
52960: CALL_OW 111
// break ;
52964: GO 52968
// end ; end ;
52966: GO 52853
52968: POP
52969: POP
// end ; end ;
52970: GO 52295
52972: POP
52973: POP
// end ;
52974: LD_VAR 0 8
52978: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52979: LD_INT 0
52981: PPUSH
// result := true ;
52982: LD_ADDR_VAR 0 3
52986: PUSH
52987: LD_INT 1
52989: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52990: LD_VAR 0 2
52994: PUSH
52995: LD_INT 24
52997: DOUBLE
52998: EQUAL
52999: IFTRUE 53009
53001: LD_INT 33
53003: DOUBLE
53004: EQUAL
53005: IFTRUE 53009
53007: GO 53034
53009: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53010: LD_ADDR_VAR 0 3
53014: PUSH
53015: LD_INT 32
53017: PPUSH
53018: LD_VAR 0 1
53022: PPUSH
53023: CALL_OW 321
53027: PUSH
53028: LD_INT 2
53030: EQUAL
53031: ST_TO_ADDR
53032: GO 53350
53034: LD_INT 20
53036: DOUBLE
53037: EQUAL
53038: IFTRUE 53042
53040: GO 53067
53042: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53043: LD_ADDR_VAR 0 3
53047: PUSH
53048: LD_INT 6
53050: PPUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: CALL_OW 321
53060: PUSH
53061: LD_INT 2
53063: EQUAL
53064: ST_TO_ADDR
53065: GO 53350
53067: LD_INT 22
53069: DOUBLE
53070: EQUAL
53071: IFTRUE 53081
53073: LD_INT 36
53075: DOUBLE
53076: EQUAL
53077: IFTRUE 53081
53079: GO 53106
53081: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53082: LD_ADDR_VAR 0 3
53086: PUSH
53087: LD_INT 15
53089: PPUSH
53090: LD_VAR 0 1
53094: PPUSH
53095: CALL_OW 321
53099: PUSH
53100: LD_INT 2
53102: EQUAL
53103: ST_TO_ADDR
53104: GO 53350
53106: LD_INT 30
53108: DOUBLE
53109: EQUAL
53110: IFTRUE 53114
53112: GO 53139
53114: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53115: LD_ADDR_VAR 0 3
53119: PUSH
53120: LD_INT 20
53122: PPUSH
53123: LD_VAR 0 1
53127: PPUSH
53128: CALL_OW 321
53132: PUSH
53133: LD_INT 2
53135: EQUAL
53136: ST_TO_ADDR
53137: GO 53350
53139: LD_INT 28
53141: DOUBLE
53142: EQUAL
53143: IFTRUE 53153
53145: LD_INT 21
53147: DOUBLE
53148: EQUAL
53149: IFTRUE 53153
53151: GO 53178
53153: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53154: LD_ADDR_VAR 0 3
53158: PUSH
53159: LD_INT 21
53161: PPUSH
53162: LD_VAR 0 1
53166: PPUSH
53167: CALL_OW 321
53171: PUSH
53172: LD_INT 2
53174: EQUAL
53175: ST_TO_ADDR
53176: GO 53350
53178: LD_INT 16
53180: DOUBLE
53181: EQUAL
53182: IFTRUE 53186
53184: GO 53211
53186: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53187: LD_ADDR_VAR 0 3
53191: PUSH
53192: LD_INT 84
53194: PPUSH
53195: LD_VAR 0 1
53199: PPUSH
53200: CALL_OW 321
53204: PUSH
53205: LD_INT 2
53207: EQUAL
53208: ST_TO_ADDR
53209: GO 53350
53211: LD_INT 19
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53225
53217: LD_INT 23
53219: DOUBLE
53220: EQUAL
53221: IFTRUE 53225
53223: GO 53250
53225: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53226: LD_ADDR_VAR 0 3
53230: PUSH
53231: LD_INT 83
53233: PPUSH
53234: LD_VAR 0 1
53238: PPUSH
53239: CALL_OW 321
53243: PUSH
53244: LD_INT 2
53246: EQUAL
53247: ST_TO_ADDR
53248: GO 53350
53250: LD_INT 17
53252: DOUBLE
53253: EQUAL
53254: IFTRUE 53258
53256: GO 53283
53258: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53259: LD_ADDR_VAR 0 3
53263: PUSH
53264: LD_INT 39
53266: PPUSH
53267: LD_VAR 0 1
53271: PPUSH
53272: CALL_OW 321
53276: PUSH
53277: LD_INT 2
53279: EQUAL
53280: ST_TO_ADDR
53281: GO 53350
53283: LD_INT 18
53285: DOUBLE
53286: EQUAL
53287: IFTRUE 53291
53289: GO 53316
53291: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53292: LD_ADDR_VAR 0 3
53296: PUSH
53297: LD_INT 40
53299: PPUSH
53300: LD_VAR 0 1
53304: PPUSH
53305: CALL_OW 321
53309: PUSH
53310: LD_INT 2
53312: EQUAL
53313: ST_TO_ADDR
53314: GO 53350
53316: LD_INT 27
53318: DOUBLE
53319: EQUAL
53320: IFTRUE 53324
53322: GO 53349
53324: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53325: LD_ADDR_VAR 0 3
53329: PUSH
53330: LD_INT 35
53332: PPUSH
53333: LD_VAR 0 1
53337: PPUSH
53338: CALL_OW 321
53342: PUSH
53343: LD_INT 2
53345: EQUAL
53346: ST_TO_ADDR
53347: GO 53350
53349: POP
// end ;
53350: LD_VAR 0 3
53354: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53355: LD_INT 0
53357: PPUSH
53358: PPUSH
53359: PPUSH
53360: PPUSH
53361: PPUSH
53362: PPUSH
53363: PPUSH
53364: PPUSH
53365: PPUSH
53366: PPUSH
53367: PPUSH
// result := false ;
53368: LD_ADDR_VAR 0 6
53372: PUSH
53373: LD_INT 0
53375: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53376: LD_VAR 0 1
53380: NOT
53381: PUSH
53382: LD_VAR 0 1
53386: PPUSH
53387: CALL_OW 266
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: IN
53402: NOT
53403: OR
53404: PUSH
53405: LD_VAR 0 2
53409: NOT
53410: OR
53411: PUSH
53412: LD_VAR 0 5
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: LD_INT 3
53428: PUSH
53429: LD_INT 4
53431: PUSH
53432: LD_INT 5
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: IN
53443: NOT
53444: OR
53445: PUSH
53446: LD_VAR 0 3
53450: PPUSH
53451: LD_VAR 0 4
53455: PPUSH
53456: CALL_OW 488
53460: NOT
53461: OR
53462: IFFALSE 53466
// exit ;
53464: GO 54202
// side := GetSide ( depot ) ;
53466: LD_ADDR_VAR 0 9
53470: PUSH
53471: LD_VAR 0 1
53475: PPUSH
53476: CALL_OW 255
53480: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53481: LD_VAR 0 9
53485: PPUSH
53486: LD_VAR 0 2
53490: PPUSH
53491: CALL 52979 0 2
53495: NOT
53496: IFFALSE 53500
// exit ;
53498: GO 54202
// pom := GetBase ( depot ) ;
53500: LD_ADDR_VAR 0 10
53504: PUSH
53505: LD_VAR 0 1
53509: PPUSH
53510: CALL_OW 274
53514: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53515: LD_ADDR_VAR 0 11
53519: PUSH
53520: LD_VAR 0 2
53524: PPUSH
53525: LD_VAR 0 1
53529: PPUSH
53530: CALL_OW 248
53534: PPUSH
53535: CALL_OW 450
53539: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53540: LD_VAR 0 10
53544: PPUSH
53545: LD_INT 1
53547: PPUSH
53548: CALL_OW 275
53552: PUSH
53553: LD_VAR 0 11
53557: PUSH
53558: LD_INT 1
53560: ARRAY
53561: GREATEREQUAL
53562: PUSH
53563: LD_VAR 0 10
53567: PPUSH
53568: LD_INT 2
53570: PPUSH
53571: CALL_OW 275
53575: PUSH
53576: LD_VAR 0 11
53580: PUSH
53581: LD_INT 2
53583: ARRAY
53584: GREATEREQUAL
53585: AND
53586: PUSH
53587: LD_VAR 0 10
53591: PPUSH
53592: LD_INT 3
53594: PPUSH
53595: CALL_OW 275
53599: PUSH
53600: LD_VAR 0 11
53604: PUSH
53605: LD_INT 3
53607: ARRAY
53608: GREATEREQUAL
53609: AND
53610: NOT
53611: IFFALSE 53615
// exit ;
53613: GO 54202
// if GetBType ( depot ) = b_depot then
53615: LD_VAR 0 1
53619: PPUSH
53620: CALL_OW 266
53624: PUSH
53625: LD_INT 0
53627: EQUAL
53628: IFFALSE 53640
// dist := 28 else
53630: LD_ADDR_VAR 0 14
53634: PUSH
53635: LD_INT 28
53637: ST_TO_ADDR
53638: GO 53648
// dist := 36 ;
53640: LD_ADDR_VAR 0 14
53644: PUSH
53645: LD_INT 36
53647: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53648: LD_VAR 0 1
53652: PPUSH
53653: LD_VAR 0 3
53657: PPUSH
53658: LD_VAR 0 4
53662: PPUSH
53663: CALL_OW 297
53667: PUSH
53668: LD_VAR 0 14
53672: GREATER
53673: IFFALSE 53677
// exit ;
53675: GO 54202
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53677: LD_ADDR_VAR 0 12
53681: PUSH
53682: LD_VAR 0 2
53686: PPUSH
53687: LD_VAR 0 3
53691: PPUSH
53692: LD_VAR 0 4
53696: PPUSH
53697: LD_VAR 0 5
53701: PPUSH
53702: LD_VAR 0 1
53706: PPUSH
53707: CALL_OW 248
53711: PPUSH
53712: LD_INT 0
53714: PPUSH
53715: CALL 54207 0 6
53719: ST_TO_ADDR
// if not hexes then
53720: LD_VAR 0 12
53724: NOT
53725: IFFALSE 53729
// exit ;
53727: GO 54202
// hex := GetHexInfo ( x , y ) ;
53729: LD_ADDR_VAR 0 15
53733: PUSH
53734: LD_VAR 0 3
53738: PPUSH
53739: LD_VAR 0 4
53743: PPUSH
53744: CALL_OW 546
53748: ST_TO_ADDR
// if hex [ 1 ] then
53749: LD_VAR 0 15
53753: PUSH
53754: LD_INT 1
53756: ARRAY
53757: IFFALSE 53761
// exit ;
53759: GO 54202
// height := hex [ 2 ] ;
53761: LD_ADDR_VAR 0 13
53765: PUSH
53766: LD_VAR 0 15
53770: PUSH
53771: LD_INT 2
53773: ARRAY
53774: ST_TO_ADDR
// for i = 1 to hexes do
53775: LD_ADDR_VAR 0 7
53779: PUSH
53780: DOUBLE
53781: LD_INT 1
53783: DEC
53784: ST_TO_ADDR
53785: LD_VAR 0 12
53789: PUSH
53790: FOR_TO
53791: IFFALSE 54121
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53793: LD_VAR 0 12
53797: PUSH
53798: LD_VAR 0 7
53802: ARRAY
53803: PUSH
53804: LD_INT 1
53806: ARRAY
53807: PPUSH
53808: LD_VAR 0 12
53812: PUSH
53813: LD_VAR 0 7
53817: ARRAY
53818: PUSH
53819: LD_INT 2
53821: ARRAY
53822: PPUSH
53823: CALL_OW 488
53827: NOT
53828: PUSH
53829: LD_VAR 0 12
53833: PUSH
53834: LD_VAR 0 7
53838: ARRAY
53839: PUSH
53840: LD_INT 1
53842: ARRAY
53843: PPUSH
53844: LD_VAR 0 12
53848: PUSH
53849: LD_VAR 0 7
53853: ARRAY
53854: PUSH
53855: LD_INT 2
53857: ARRAY
53858: PPUSH
53859: CALL_OW 428
53863: PUSH
53864: LD_INT 0
53866: GREATER
53867: OR
53868: PUSH
53869: LD_VAR 0 12
53873: PUSH
53874: LD_VAR 0 7
53878: ARRAY
53879: PUSH
53880: LD_INT 1
53882: ARRAY
53883: PPUSH
53884: LD_VAR 0 12
53888: PUSH
53889: LD_VAR 0 7
53893: ARRAY
53894: PUSH
53895: LD_INT 2
53897: ARRAY
53898: PPUSH
53899: CALL_OW 351
53903: OR
53904: IFFALSE 53910
// exit ;
53906: POP
53907: POP
53908: GO 54202
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53910: LD_ADDR_VAR 0 8
53914: PUSH
53915: LD_VAR 0 12
53919: PUSH
53920: LD_VAR 0 7
53924: ARRAY
53925: PUSH
53926: LD_INT 1
53928: ARRAY
53929: PPUSH
53930: LD_VAR 0 12
53934: PUSH
53935: LD_VAR 0 7
53939: ARRAY
53940: PUSH
53941: LD_INT 2
53943: ARRAY
53944: PPUSH
53945: CALL_OW 546
53949: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53950: LD_VAR 0 8
53954: PUSH
53955: LD_INT 1
53957: ARRAY
53958: PUSH
53959: LD_VAR 0 8
53963: PUSH
53964: LD_INT 2
53966: ARRAY
53967: PUSH
53968: LD_VAR 0 13
53972: PUSH
53973: LD_INT 2
53975: PLUS
53976: GREATER
53977: OR
53978: PUSH
53979: LD_VAR 0 8
53983: PUSH
53984: LD_INT 2
53986: ARRAY
53987: PUSH
53988: LD_VAR 0 13
53992: PUSH
53993: LD_INT 2
53995: MINUS
53996: LESS
53997: OR
53998: PUSH
53999: LD_VAR 0 8
54003: PUSH
54004: LD_INT 3
54006: ARRAY
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 8
54013: PUSH
54014: LD_INT 9
54016: PUSH
54017: LD_INT 10
54019: PUSH
54020: LD_INT 11
54022: PUSH
54023: LD_INT 12
54025: PUSH
54026: LD_INT 13
54028: PUSH
54029: LD_INT 16
54031: PUSH
54032: LD_INT 17
54034: PUSH
54035: LD_INT 18
54037: PUSH
54038: LD_INT 19
54040: PUSH
54041: LD_INT 20
54043: PUSH
54044: LD_INT 21
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: IN
54062: NOT
54063: OR
54064: PUSH
54065: LD_VAR 0 8
54069: PUSH
54070: LD_INT 5
54072: ARRAY
54073: NOT
54074: OR
54075: PUSH
54076: LD_VAR 0 8
54080: PUSH
54081: LD_INT 6
54083: ARRAY
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: LD_INT 7
54093: PUSH
54094: LD_INT 9
54096: PUSH
54097: LD_INT 10
54099: PUSH
54100: LD_INT 11
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: IN
54111: NOT
54112: OR
54113: IFFALSE 54119
// exit ;
54115: POP
54116: POP
54117: GO 54202
// end ;
54119: GO 53790
54121: POP
54122: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54123: LD_VAR 0 9
54127: PPUSH
54128: LD_VAR 0 3
54132: PPUSH
54133: LD_VAR 0 4
54137: PPUSH
54138: LD_INT 20
54140: PPUSH
54141: CALL 46154 0 4
54145: PUSH
54146: LD_INT 4
54148: ARRAY
54149: IFFALSE 54153
// exit ;
54151: GO 54202
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54153: LD_VAR 0 2
54157: PUSH
54158: LD_INT 29
54160: PUSH
54161: LD_INT 30
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: IN
54168: PUSH
54169: LD_VAR 0 3
54173: PPUSH
54174: LD_VAR 0 4
54178: PPUSH
54179: LD_VAR 0 9
54183: PPUSH
54184: CALL_OW 440
54188: NOT
54189: AND
54190: IFFALSE 54194
// exit ;
54192: GO 54202
// result := true ;
54194: LD_ADDR_VAR 0 6
54198: PUSH
54199: LD_INT 1
54201: ST_TO_ADDR
// end ;
54202: LD_VAR 0 6
54206: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54207: LD_INT 0
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
54221: PPUSH
54222: PPUSH
54223: PPUSH
54224: PPUSH
54225: PPUSH
54226: PPUSH
54227: PPUSH
54228: PPUSH
54229: PPUSH
54230: PPUSH
54231: PPUSH
54232: PPUSH
54233: PPUSH
54234: PPUSH
54235: PPUSH
54236: PPUSH
54237: PPUSH
54238: PPUSH
54239: PPUSH
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
54244: PPUSH
54245: PPUSH
54246: PPUSH
54247: PPUSH
54248: PPUSH
54249: PPUSH
54250: PPUSH
54251: PPUSH
54252: PPUSH
54253: PPUSH
54254: PPUSH
54255: PPUSH
54256: PPUSH
54257: PPUSH
54258: PPUSH
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
// result = [ ] ;
54267: LD_ADDR_VAR 0 7
54271: PUSH
54272: EMPTY
54273: ST_TO_ADDR
// temp_list = [ ] ;
54274: LD_ADDR_VAR 0 9
54278: PUSH
54279: EMPTY
54280: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54281: LD_VAR 0 4
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: LD_INT 4
54300: PUSH
54301: LD_INT 5
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: IN
54312: NOT
54313: PUSH
54314: LD_VAR 0 1
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: IN
54329: PUSH
54330: LD_VAR 0 5
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: LIST
54348: IN
54349: NOT
54350: AND
54351: OR
54352: IFFALSE 54356
// exit ;
54354: GO 72747
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54356: LD_VAR 0 1
54360: PUSH
54361: LD_INT 6
54363: PUSH
54364: LD_INT 7
54366: PUSH
54367: LD_INT 8
54369: PUSH
54370: LD_INT 13
54372: PUSH
54373: LD_INT 12
54375: PUSH
54376: LD_INT 15
54378: PUSH
54379: LD_INT 11
54381: PUSH
54382: LD_INT 14
54384: PUSH
54385: LD_INT 10
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: IN
54399: IFFALSE 54409
// btype = b_lab ;
54401: LD_ADDR_VAR 0 1
54405: PUSH
54406: LD_INT 6
54408: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54409: LD_VAR 0 6
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: IN
54428: NOT
54429: PUSH
54430: LD_VAR 0 1
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 6
54449: PUSH
54450: LD_INT 36
54452: PUSH
54453: LD_INT 4
54455: PUSH
54456: LD_INT 5
54458: PUSH
54459: LD_INT 31
54461: PUSH
54462: LD_INT 32
54464: PUSH
54465: LD_INT 33
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: IN
54481: NOT
54482: PUSH
54483: LD_VAR 0 6
54487: PUSH
54488: LD_INT 1
54490: EQUAL
54491: AND
54492: OR
54493: PUSH
54494: LD_VAR 0 1
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: IN
54509: NOT
54510: PUSH
54511: LD_VAR 0 6
54515: PUSH
54516: LD_INT 2
54518: EQUAL
54519: AND
54520: OR
54521: IFFALSE 54531
// mode = 0 ;
54523: LD_ADDR_VAR 0 6
54527: PUSH
54528: LD_INT 0
54530: ST_TO_ADDR
// case mode of 0 :
54531: LD_VAR 0 6
54535: PUSH
54536: LD_INT 0
54538: DOUBLE
54539: EQUAL
54540: IFTRUE 54544
54542: GO 65997
54544: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54545: LD_ADDR_VAR 0 11
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: LD_INT 3
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54738: LD_ADDR_VAR 0 12
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 3
54895: NEG
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 3
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54934: LD_ADDR_VAR 0 13
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55133: LD_ADDR_VAR 0 14
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: LD_INT 3
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 3
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55329: LD_ADDR_VAR 0 15
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55522: LD_ADDR_VAR 0 16
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55715: LD_ADDR_VAR 0 17
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55945: LD_ADDR_VAR 0 18
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56175: LD_ADDR_VAR 0 19
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56405: LD_ADDR_VAR 0 20
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56635: LD_ADDR_VAR 0 21
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56865: LD_ADDR_VAR 0 22
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57095: LD_ADDR_VAR 0 23
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57375: LD_ADDR_VAR 0 24
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57651: LD_ADDR_VAR 0 25
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57925: LD_ADDR_VAR 0 26
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58201: LD_ADDR_VAR 0 27
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58481: LD_ADDR_VAR 0 28
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: LD_INT 3
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58763: LD_ADDR_VAR 0 29
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59042: LD_ADDR_VAR 0 30
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: NEG
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59320: LD_ADDR_VAR 0 31
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59598: LD_ADDR_VAR 0 32
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: LD_INT 2
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: LD_INT 3
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 3
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59876: LD_ADDR_VAR 0 33
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: LD_INT 3
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: NEG
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60155: LD_ADDR_VAR 0 34
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 2
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: NEG
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60435: LD_ADDR_VAR 0 35
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60547: LD_ADDR_VAR 0 36
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 1
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60659: LD_ADDR_VAR 0 37
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60771: LD_ADDR_VAR 0 38
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 2
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60883: LD_ADDR_VAR 0 39
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60995: LD_ADDR_VAR 0 40
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 1
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61107: LD_ADDR_VAR 0 41
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 2
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: LD_INT 2
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 3
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: NEG
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: LD_INT 2
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61457: LD_ADDR_VAR 0 42
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: LD_INT 3
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 3
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: LD_INT 2
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: LD_INT 3
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61807: LD_ADDR_VAR 0 43
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: LD_INT 2
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 3
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 2
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 3
62103: NEG
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62155: LD_ADDR_VAR 0 44
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 2
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: LD_INT 2
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 3
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 3
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: LD_INT 3
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 3
62429: NEG
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 3
62440: NEG
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 3
62452: NEG
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: LD_INT 3
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62505: LD_ADDR_VAR 0 45
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: NEG
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 2
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 2
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 3
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 3
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: LD_INT 3
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: LD_INT 3
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: LD_INT 3
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: NEG
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 3
62814: NEG
62815: PUSH
62816: LD_INT 3
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62855: LD_ADDR_VAR 0 46
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: LD_INT 2
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 2
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 3
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: LD_INT 3
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: LD_INT 3
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: LD_INT 2
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 2
63140: NEG
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63203: LD_ADDR_VAR 0 47
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 2
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: NEG
63331: PUSH
63332: LD_INT 2
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63354: LD_ADDR_VAR 0 48
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: NEG
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 1
63435: NEG
63436: PUSH
63437: LD_INT 2
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 2
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 2
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63501: LD_ADDR_VAR 0 49
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63645: LD_ADDR_VAR 0 50
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 1
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63789: LD_ADDR_VAR 0 51
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: LD_INT 1
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63936: LD_ADDR_VAR 0 52
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: NEG
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 2
64040: NEG
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64087: LD_ADDR_VAR 0 53
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 2
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 2
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: PUSH
64223: LD_INT 2
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: LD_INT 2
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 2
64263: NEG
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 2
64274: NEG
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: NEG
64287: PUSH
64288: LD_INT 2
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64317: LD_ADDR_VAR 0 54
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 2
64452: PUSH
64453: LD_INT 2
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 2
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: NEG
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: NEG
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: LD_INT 2
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64547: LD_ADDR_VAR 0 55
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: LD_INT 2
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 2
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: LD_INT 2
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 2
64723: NEG
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64777: LD_ADDR_VAR 0 56
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: LD_INT 1
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: NEG
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: LD_INT 2
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: LD_INT 2
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: LD_INT 2
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 2
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 2
64953: NEG
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: NEG
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: LD_INT 2
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65007: LD_ADDR_VAR 0 57
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: LD_INT 2
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: LD_INT 2
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 1
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: LD_INT 2
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 2
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 2
65183: NEG
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65237: LD_ADDR_VAR 0 58
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: LD_INT 1
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: LD_INT 2
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: LD_INT 2
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: LD_INT 2
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: NEG
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 2
65424: NEG
65425: PUSH
65426: LD_INT 1
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 2
65436: NEG
65437: PUSH
65438: LD_INT 2
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65467: LD_ADDR_VAR 0 59
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 1
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 1
65536: NEG
65537: PUSH
65538: LD_INT 1
65540: NEG
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65555: LD_ADDR_VAR 0 60
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65643: LD_ADDR_VAR 0 61
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 1
65712: NEG
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65731: LD_ADDR_VAR 0 62
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: PUSH
65770: LD_INT 1
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 1
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65819: LD_ADDR_VAR 0 63
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: LD_INT 1
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65907: LD_ADDR_VAR 0 64
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: ST_TO_ADDR
// end ; 1 :
65995: GO 71892
65997: LD_INT 1
65999: DOUBLE
66000: EQUAL
66001: IFTRUE 66005
66003: GO 68628
66005: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66006: LD_ADDR_VAR 0 11
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: LD_INT 3
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: LD_INT 2
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66050: LD_ADDR_VAR 0 12
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 3
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 3
66078: PUSH
66079: LD_INT 1
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: LIST
66090: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66091: LD_ADDR_VAR 0 13
66095: PUSH
66096: LD_INT 3
66098: PUSH
66099: LD_INT 2
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 3
66108: PUSH
66109: LD_INT 3
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 2
66118: PUSH
66119: LD_INT 3
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66131: LD_ADDR_VAR 0 14
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: LD_INT 3
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 3
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: NEG
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66172: LD_ADDR_VAR 0 15
66176: PUSH
66177: LD_INT 2
66179: NEG
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 3
66190: NEG
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 3
66201: NEG
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66216: LD_ADDR_VAR 0 16
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 3
66235: NEG
66236: PUSH
66237: LD_INT 2
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 3
66247: NEG
66248: PUSH
66249: LD_INT 3
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66262: LD_ADDR_VAR 0 17
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: PUSH
66271: LD_INT 3
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: LD_INT 3
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: LIST
66305: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66306: LD_ADDR_VAR 0 18
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 3
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66347: LD_ADDR_VAR 0 19
66351: PUSH
66352: LD_INT 3
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: PUSH
66365: LD_INT 3
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66387: LD_ADDR_VAR 0 20
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: LD_INT 3
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 3
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66428: LD_ADDR_VAR 0 21
66432: PUSH
66433: LD_INT 2
66435: NEG
66436: PUSH
66437: LD_INT 1
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 3
66446: NEG
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 3
66457: NEG
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66472: LD_ADDR_VAR 0 22
66476: PUSH
66477: LD_INT 2
66479: NEG
66480: PUSH
66481: LD_INT 3
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: NEG
66492: PUSH
66493: LD_INT 2
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 3
66503: NEG
66504: PUSH
66505: LD_INT 3
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66518: LD_ADDR_VAR 0 23
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 3
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: LD_INT 4
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 3
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66562: LD_ADDR_VAR 0 24
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 3
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 4
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: LIST
66602: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66603: LD_ADDR_VAR 0 25
66607: PUSH
66608: LD_INT 3
66610: PUSH
66611: LD_INT 3
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 4
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: LD_INT 4
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66643: LD_ADDR_VAR 0 26
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 3
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: LD_INT 4
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: LD_INT 3
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: LIST
66683: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66684: LD_ADDR_VAR 0 27
66688: PUSH
66689: LD_INT 3
66691: NEG
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 4
66713: NEG
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66728: LD_ADDR_VAR 0 28
66732: PUSH
66733: LD_INT 3
66735: NEG
66736: PUSH
66737: LD_INT 3
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: LD_INT 4
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 4
66759: NEG
66760: PUSH
66761: LD_INT 3
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66774: LD_ADDR_VAR 0 29
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: LD_INT 3
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: NEG
66816: PUSH
66817: LD_INT 4
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 0
66827: PUSH
66828: LD_INT 4
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: LD_INT 3
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: LD_INT 5
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: LD_INT 5
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: LD_INT 4
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 1
66883: NEG
66884: PUSH
66885: LD_INT 6
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: LD_INT 6
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 1
66906: PUSH
66907: LD_INT 5
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66929: LD_ADDR_VAR 0 30
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: LD_INT 0
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 4
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 4
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 4
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 5
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 5
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 5
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 6
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 6
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67072: LD_ADDR_VAR 0 31
67076: PUSH
67077: LD_INT 3
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 3
67089: PUSH
67090: LD_INT 3
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 2
67099: PUSH
67100: LD_INT 3
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 4
67109: PUSH
67110: LD_INT 3
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 4
67119: PUSH
67120: LD_INT 4
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: LD_INT 4
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 5
67139: PUSH
67140: LD_INT 4
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 5
67149: PUSH
67150: LD_INT 5
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 4
67159: PUSH
67160: LD_INT 5
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 6
67169: PUSH
67170: LD_INT 5
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 6
67179: PUSH
67180: LD_INT 6
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 5
67189: PUSH
67190: LD_INT 6
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67211: LD_ADDR_VAR 0 32
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: LD_INT 3
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: LD_INT 3
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 1
67238: NEG
67239: PUSH
67240: LD_INT 2
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: LD_INT 4
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: LD_INT 4
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: NEG
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: LD_INT 5
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: LD_INT 5
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: LD_INT 4
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: PUSH
67312: LD_INT 6
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: LD_INT 6
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: LD_INT 5
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67354: LD_ADDR_VAR 0 33
67358: PUSH
67359: LD_INT 2
67361: NEG
67362: PUSH
67363: LD_INT 1
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 3
67372: NEG
67373: PUSH
67374: LD_INT 0
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 3
67395: NEG
67396: PUSH
67397: LD_INT 1
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 4
67406: NEG
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 4
67417: NEG
67418: PUSH
67419: LD_INT 1
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 4
67429: NEG
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 5
67440: NEG
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 5
67451: NEG
67452: PUSH
67453: LD_INT 1
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 5
67463: NEG
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 6
67474: NEG
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 6
67485: NEG
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67509: LD_ADDR_VAR 0 34
67513: PUSH
67514: LD_INT 2
67516: NEG
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 3
67528: NEG
67529: PUSH
67530: LD_INT 2
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 3
67540: NEG
67541: PUSH
67542: LD_INT 3
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: NEG
67553: PUSH
67554: LD_INT 4
67556: NEG
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: LD_INT 3
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 4
67576: NEG
67577: PUSH
67578: LD_INT 4
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 4
67588: NEG
67589: PUSH
67590: LD_INT 5
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 5
67600: NEG
67601: PUSH
67602: LD_INT 4
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 5
67612: NEG
67613: PUSH
67614: LD_INT 5
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 5
67624: NEG
67625: PUSH
67626: LD_INT 6
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 6
67636: NEG
67637: PUSH
67638: LD_INT 5
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 6
67648: NEG
67649: PUSH
67650: LD_INT 6
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67672: LD_ADDR_VAR 0 41
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: LD_INT 2
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: NEG
67691: PUSH
67692: LD_INT 3
67694: NEG
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 2
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67716: LD_ADDR_VAR 0 42
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: LIST
67756: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67757: LD_ADDR_VAR 0 43
67761: PUSH
67762: LD_INT 2
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 3
67774: PUSH
67775: LD_INT 2
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 2
67784: PUSH
67785: LD_INT 3
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: LIST
67796: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67797: LD_ADDR_VAR 0 44
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 2
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 1
67814: PUSH
67815: LD_INT 3
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 1
67824: NEG
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: LIST
67837: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67838: LD_ADDR_VAR 0 45
67842: PUSH
67843: LD_INT 2
67845: NEG
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 2
67856: NEG
67857: PUSH
67858: LD_INT 1
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 3
67867: NEG
67868: PUSH
67869: LD_INT 1
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: LIST
67881: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67882: LD_ADDR_VAR 0 46
67886: PUSH
67887: LD_INT 2
67889: NEG
67890: PUSH
67891: LD_INT 2
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 2
67901: NEG
67902: PUSH
67903: LD_INT 3
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: LD_INT 2
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: LIST
67927: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67928: LD_ADDR_VAR 0 47
67932: PUSH
67933: LD_INT 2
67935: NEG
67936: PUSH
67937: LD_INT 3
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: LD_INT 3
67951: NEG
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67961: LD_ADDR_VAR 0 48
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 2
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: LD_INT 1
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67992: LD_ADDR_VAR 0 49
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68021: LD_ADDR_VAR 0 50
68025: PUSH
68026: LD_INT 2
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: LD_INT 3
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68050: LD_ADDR_VAR 0 51
68054: PUSH
68055: LD_INT 1
68057: NEG
68058: PUSH
68059: LD_INT 2
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 2
68068: NEG
68069: PUSH
68070: LD_INT 1
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68081: LD_ADDR_VAR 0 52
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 3
68100: NEG
68101: PUSH
68102: LD_INT 2
68104: NEG
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68114: LD_ADDR_VAR 0 53
68118: PUSH
68119: LD_INT 1
68121: NEG
68122: PUSH
68123: LD_INT 3
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: LD_INT 3
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: PUSH
68145: LD_INT 2
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68158: LD_ADDR_VAR 0 54
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 3
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: LIST
68198: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68199: LD_ADDR_VAR 0 55
68203: PUSH
68204: LD_INT 3
68206: PUSH
68207: LD_INT 2
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 3
68216: PUSH
68217: LD_INT 3
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 2
68226: PUSH
68227: LD_INT 3
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: LIST
68238: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68239: LD_ADDR_VAR 0 56
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: LD_INT 3
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 1
68266: NEG
68267: PUSH
68268: LD_INT 2
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68280: LD_ADDR_VAR 0 57
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: LD_INT 1
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 3
68298: NEG
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 3
68309: NEG
68310: PUSH
68311: LD_INT 1
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: LIST
68323: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68324: LD_ADDR_VAR 0 58
68328: PUSH
68329: LD_INT 2
68331: NEG
68332: PUSH
68333: LD_INT 3
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 3
68343: NEG
68344: PUSH
68345: LD_INT 2
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 3
68355: NEG
68356: PUSH
68357: LD_INT 3
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: LIST
68369: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68370: LD_ADDR_VAR 0 59
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: LD_INT 2
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 1
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68414: LD_ADDR_VAR 0 60
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: LD_INT 1
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 2
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 2
68442: PUSH
68443: LD_INT 1
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: LIST
68454: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68455: LD_ADDR_VAR 0 61
68459: PUSH
68460: LD_INT 2
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 2
68472: PUSH
68473: LD_INT 2
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 1
68482: PUSH
68483: LD_INT 2
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: LIST
68494: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68495: LD_ADDR_VAR 0 62
68499: PUSH
68500: LD_INT 1
68502: PUSH
68503: LD_INT 2
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 0
68512: PUSH
68513: LD_INT 2
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 1
68522: NEG
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68536: LD_ADDR_VAR 0 63
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 2
68554: NEG
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 2
68565: NEG
68566: PUSH
68567: LD_INT 1
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: LIST
68579: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68580: LD_ADDR_VAR 0 64
68584: PUSH
68585: LD_INT 1
68587: NEG
68588: PUSH
68589: LD_INT 2
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 2
68599: NEG
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 2
68611: NEG
68612: PUSH
68613: LD_INT 2
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: LIST
68625: ST_TO_ADDR
// end ; 2 :
68626: GO 71892
68628: LD_INT 2
68630: DOUBLE
68631: EQUAL
68632: IFTRUE 68636
68634: GO 71891
68636: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68637: LD_ADDR_VAR 0 29
68641: PUSH
68642: LD_INT 4
68644: PUSH
68645: LD_INT 0
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 4
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 5
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 5
68675: PUSH
68676: LD_INT 1
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 4
68685: PUSH
68686: LD_INT 1
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 3
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 3
68705: PUSH
68706: LD_INT 1
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 5
68727: PUSH
68728: LD_INT 2
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 3
68737: PUSH
68738: LD_INT 3
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 2
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 4
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 4
68767: PUSH
68768: LD_INT 4
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 3
68777: PUSH
68778: LD_INT 4
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 2
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 2
68797: PUSH
68798: LD_INT 2
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 4
68807: PUSH
68808: LD_INT 2
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 2
68817: PUSH
68818: LD_INT 4
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 4
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: LD_INT 3
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: LD_INT 4
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: LD_INT 5
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 5
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: LD_INT 4
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 1
68888: NEG
68889: PUSH
68890: LD_INT 3
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 2
68899: PUSH
68900: LD_INT 5
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 2
68909: NEG
68910: PUSH
68911: LD_INT 3
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 3
68920: NEG
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 3
68931: NEG
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 2
68943: NEG
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 2
68954: NEG
68955: PUSH
68956: LD_INT 1
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 3
68965: NEG
68966: PUSH
68967: LD_INT 1
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 4
68976: NEG
68977: PUSH
68978: LD_INT 0
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 4
68987: NEG
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 4
68999: NEG
69000: PUSH
69001: LD_INT 2
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 2
69011: NEG
69012: PUSH
69013: LD_INT 2
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 4
69022: NEG
69023: PUSH
69024: LD_INT 4
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: LD_INT 5
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: LD_INT 4
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 3
69058: NEG
69059: PUSH
69060: LD_INT 3
69062: NEG
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 4
69070: NEG
69071: PUSH
69072: LD_INT 3
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 5
69082: NEG
69083: PUSH
69084: LD_INT 4
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 5
69094: NEG
69095: PUSH
69096: LD_INT 5
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: LD_INT 5
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 5
69118: NEG
69119: PUSH
69120: LD_INT 3
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69175: LD_ADDR_VAR 0 30
69179: PUSH
69180: LD_INT 4
69182: PUSH
69183: LD_INT 4
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 4
69192: PUSH
69193: LD_INT 3
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 5
69202: PUSH
69203: LD_INT 4
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 5
69212: PUSH
69213: LD_INT 5
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 4
69222: PUSH
69223: LD_INT 5
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 3
69232: PUSH
69233: LD_INT 4
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 3
69242: PUSH
69243: LD_INT 3
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 5
69252: PUSH
69253: LD_INT 3
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 3
69262: PUSH
69263: LD_INT 5
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: LD_INT 3
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_INT 2
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: LD_INT 3
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: LD_INT 4
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 0
69312: PUSH
69313: LD_INT 4
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 1
69322: NEG
69323: PUSH
69324: LD_INT 3
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: LD_INT 2
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: PUSH
69345: LD_INT 4
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: LD_INT 2
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 4
69365: NEG
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 4
69376: NEG
69377: PUSH
69378: LD_INT 1
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 3
69388: NEG
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 3
69399: NEG
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 4
69410: NEG
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 5
69421: NEG
69422: PUSH
69423: LD_INT 0
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 5
69432: NEG
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 5
69444: NEG
69445: PUSH
69446: LD_INT 2
69448: NEG
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 3
69456: NEG
69457: PUSH
69458: LD_INT 2
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 3
69467: NEG
69468: PUSH
69469: LD_INT 3
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 3
69479: NEG
69480: PUSH
69481: LD_INT 4
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 2
69491: NEG
69492: PUSH
69493: LD_INT 3
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 2
69503: NEG
69504: PUSH
69505: LD_INT 2
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 3
69515: NEG
69516: PUSH
69517: LD_INT 2
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 4
69527: NEG
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 4
69539: NEG
69540: PUSH
69541: LD_INT 4
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 2
69551: NEG
69552: PUSH
69553: LD_INT 4
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 4
69563: NEG
69564: PUSH
69565: LD_INT 2
69567: NEG
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 0
69575: PUSH
69576: LD_INT 4
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 0
69586: PUSH
69587: LD_INT 5
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 1
69597: PUSH
69598: LD_INT 4
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 1
69608: PUSH
69609: LD_INT 3
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: NEG
69631: PUSH
69632: LD_INT 4
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 1
69642: NEG
69643: PUSH
69644: LD_INT 5
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: LD_INT 3
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 2
69665: NEG
69666: PUSH
69667: LD_INT 5
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69722: LD_ADDR_VAR 0 31
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 3
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: PUSH
69750: LD_INT 4
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 1
69759: PUSH
69760: LD_INT 5
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 5
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: NEG
69780: PUSH
69781: LD_INT 4
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 1
69790: NEG
69791: PUSH
69792: LD_INT 3
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 2
69801: PUSH
69802: LD_INT 5
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 2
69811: NEG
69812: PUSH
69813: LD_INT 3
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 3
69822: NEG
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 3
69833: NEG
69834: PUSH
69835: LD_INT 1
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 2
69845: NEG
69846: PUSH
69847: LD_INT 0
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 2
69856: NEG
69857: PUSH
69858: LD_INT 1
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 3
69867: NEG
69868: PUSH
69869: LD_INT 1
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 4
69878: NEG
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 4
69889: NEG
69890: PUSH
69891: LD_INT 1
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 4
69901: NEG
69902: PUSH
69903: LD_INT 2
69905: NEG
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 2
69913: NEG
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 4
69924: NEG
69925: PUSH
69926: LD_INT 4
69928: NEG
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 4
69936: NEG
69937: PUSH
69938: LD_INT 5
69940: NEG
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 3
69948: NEG
69949: PUSH
69950: LD_INT 4
69952: NEG
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 3
69960: NEG
69961: PUSH
69962: LD_INT 3
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 4
69972: NEG
69973: PUSH
69974: LD_INT 3
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 5
69984: NEG
69985: PUSH
69986: LD_INT 4
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 5
69996: NEG
69997: PUSH
69998: LD_INT 5
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: LD_INT 5
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 5
70020: NEG
70021: PUSH
70022: LD_INT 3
70024: NEG
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: LD_INT 3
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 0
70043: PUSH
70044: LD_INT 4
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 1
70054: PUSH
70055: LD_INT 3
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 1
70065: PUSH
70066: LD_INT 2
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 0
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 1
70087: NEG
70088: PUSH
70089: LD_INT 3
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 1
70099: NEG
70100: PUSH
70101: LD_INT 4
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: LD_INT 2
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 2
70122: NEG
70123: PUSH
70124: LD_INT 4
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 4
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: LD_INT 1
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 5
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 5
70165: PUSH
70166: LD_INT 1
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 4
70175: PUSH
70176: LD_INT 1
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 3
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 3
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 3
70206: PUSH
70207: LD_INT 2
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 5
70217: PUSH
70218: LD_INT 2
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70272: LD_ADDR_VAR 0 32
70276: PUSH
70277: LD_INT 4
70279: NEG
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 4
70290: NEG
70291: PUSH
70292: LD_INT 1
70294: NEG
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 3
70302: NEG
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 3
70313: NEG
70314: PUSH
70315: LD_INT 1
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 4
70324: NEG
70325: PUSH
70326: LD_INT 1
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 5
70335: NEG
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 5
70346: NEG
70347: PUSH
70348: LD_INT 1
70350: NEG
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 5
70358: NEG
70359: PUSH
70360: LD_INT 2
70362: NEG
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 3
70370: NEG
70371: PUSH
70372: LD_INT 2
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 3
70381: NEG
70382: PUSH
70383: LD_INT 3
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 3
70393: NEG
70394: PUSH
70395: LD_INT 4
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 2
70405: NEG
70406: PUSH
70407: LD_INT 3
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 2
70417: NEG
70418: PUSH
70419: LD_INT 2
70421: NEG
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 3
70429: NEG
70430: PUSH
70431: LD_INT 2
70433: NEG
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 4
70441: NEG
70442: PUSH
70443: LD_INT 3
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: NEG
70454: PUSH
70455: LD_INT 4
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 2
70465: NEG
70466: PUSH
70467: LD_INT 4
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 4
70477: NEG
70478: PUSH
70479: LD_INT 2
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: LD_INT 4
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: LD_INT 5
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 1
70511: PUSH
70512: LD_INT 4
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: LD_INT 3
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 0
70533: PUSH
70534: LD_INT 3
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 1
70544: NEG
70545: PUSH
70546: LD_INT 4
70548: NEG
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 1
70556: NEG
70557: PUSH
70558: LD_INT 5
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 2
70568: PUSH
70569: LD_INT 3
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 2
70579: NEG
70580: PUSH
70581: LD_INT 5
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 3
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 3
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 4
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 4
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 3
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 2
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 2
70652: PUSH
70653: LD_INT 1
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 2
70663: PUSH
70664: LD_INT 2
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: LD_INT 2
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 4
70684: PUSH
70685: LD_INT 4
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 4
70694: PUSH
70695: LD_INT 3
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 5
70704: PUSH
70705: LD_INT 4
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 5
70714: PUSH
70715: LD_INT 5
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 4
70724: PUSH
70725: LD_INT 5
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 3
70734: PUSH
70735: LD_INT 4
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 3
70744: PUSH
70745: LD_INT 3
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 5
70754: PUSH
70755: LD_INT 3
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 3
70764: PUSH
70765: LD_INT 5
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70819: LD_ADDR_VAR 0 33
70823: PUSH
70824: LD_INT 4
70826: NEG
70827: PUSH
70828: LD_INT 4
70830: NEG
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 4
70838: NEG
70839: PUSH
70840: LD_INT 5
70842: NEG
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 3
70850: NEG
70851: PUSH
70852: LD_INT 4
70854: NEG
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 3
70862: NEG
70863: PUSH
70864: LD_INT 3
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 4
70874: NEG
70875: PUSH
70876: LD_INT 3
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 5
70886: NEG
70887: PUSH
70888: LD_INT 4
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 5
70898: NEG
70899: PUSH
70900: LD_INT 5
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 3
70910: NEG
70911: PUSH
70912: LD_INT 5
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 5
70922: NEG
70923: PUSH
70924: LD_INT 3
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 3
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_INT 4
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: PUSH
70957: LD_INT 3
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 1
70967: PUSH
70968: LD_INT 2
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 0
70978: PUSH
70979: LD_INT 2
70981: NEG
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 1
70989: NEG
70990: PUSH
70991: LD_INT 3
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: LD_INT 4
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 2
71013: PUSH
71014: LD_INT 2
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 2
71024: NEG
71025: PUSH
71026: LD_INT 4
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 4
71036: PUSH
71037: LD_INT 0
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 4
71046: PUSH
71047: LD_INT 1
71049: NEG
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 5
71057: PUSH
71058: LD_INT 0
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 5
71067: PUSH
71068: LD_INT 1
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 4
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 3
71087: PUSH
71088: LD_INT 0
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 3
71097: PUSH
71098: LD_INT 1
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: LD_INT 2
71111: NEG
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 5
71119: PUSH
71120: LD_INT 2
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 3
71129: PUSH
71130: LD_INT 3
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: LD_INT 2
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 4
71149: PUSH
71150: LD_INT 3
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 4
71159: PUSH
71160: LD_INT 4
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 3
71169: PUSH
71170: LD_INT 4
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 2
71179: PUSH
71180: LD_INT 3
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 2
71189: PUSH
71190: LD_INT 2
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 4
71199: PUSH
71200: LD_INT 2
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 2
71209: PUSH
71210: LD_INT 4
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 0
71219: PUSH
71220: LD_INT 4
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: LD_INT 3
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 1
71239: PUSH
71240: LD_INT 4
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 1
71249: PUSH
71250: LD_INT 5
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 0
71259: PUSH
71260: LD_INT 5
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 1
71269: NEG
71270: PUSH
71271: LD_INT 4
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 1
71280: NEG
71281: PUSH
71282: LD_INT 3
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 2
71291: PUSH
71292: LD_INT 5
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 2
71301: NEG
71302: PUSH
71303: LD_INT 3
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71357: LD_ADDR_VAR 0 34
71361: PUSH
71362: LD_INT 0
71364: PUSH
71365: LD_INT 4
71367: NEG
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: LD_INT 5
71378: NEG
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 1
71386: PUSH
71387: LD_INT 4
71389: NEG
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 1
71397: PUSH
71398: LD_INT 3
71400: NEG
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: LD_INT 3
71411: NEG
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 1
71419: NEG
71420: PUSH
71421: LD_INT 4
71423: NEG
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 1
71431: NEG
71432: PUSH
71433: LD_INT 5
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 2
71443: PUSH
71444: LD_INT 3
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 2
71454: NEG
71455: PUSH
71456: LD_INT 5
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 3
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 3
71476: PUSH
71477: LD_INT 1
71479: NEG
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 4
71487: PUSH
71488: LD_INT 0
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 4
71497: PUSH
71498: LD_INT 1
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 3
71507: PUSH
71508: LD_INT 1
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 2
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 2
71527: PUSH
71528: LD_INT 1
71530: NEG
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 2
71538: PUSH
71539: LD_INT 2
71541: NEG
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 4
71549: PUSH
71550: LD_INT 2
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 4
71559: PUSH
71560: LD_INT 4
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 4
71569: PUSH
71570: LD_INT 3
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 5
71579: PUSH
71580: LD_INT 4
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 5
71589: PUSH
71590: LD_INT 5
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 4
71599: PUSH
71600: LD_INT 5
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 3
71609: PUSH
71610: LD_INT 4
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 3
71619: PUSH
71620: LD_INT 3
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 5
71629: PUSH
71630: LD_INT 3
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 3
71639: PUSH
71640: LD_INT 5
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 0
71649: PUSH
71650: LD_INT 3
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: LD_INT 2
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 1
71669: PUSH
71670: LD_INT 3
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 1
71679: PUSH
71680: LD_INT 4
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 0
71689: PUSH
71690: LD_INT 4
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 1
71699: NEG
71700: PUSH
71701: LD_INT 3
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 1
71710: NEG
71711: PUSH
71712: LD_INT 2
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 2
71721: PUSH
71722: LD_INT 4
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 2
71731: NEG
71732: PUSH
71733: LD_INT 2
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 4
71742: NEG
71743: PUSH
71744: LD_INT 0
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 4
71753: NEG
71754: PUSH
71755: LD_INT 1
71757: NEG
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 3
71765: NEG
71766: PUSH
71767: LD_INT 0
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 3
71776: NEG
71777: PUSH
71778: LD_INT 1
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 4
71787: NEG
71788: PUSH
71789: LD_INT 1
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 5
71798: NEG
71799: PUSH
71800: LD_INT 0
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 5
71809: NEG
71810: PUSH
71811: LD_INT 1
71813: NEG
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 5
71821: NEG
71822: PUSH
71823: LD_INT 2
71825: NEG
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 3
71833: NEG
71834: PUSH
71835: LD_INT 2
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: ST_TO_ADDR
// end ; end ;
71889: GO 71892
71891: POP
// case btype of b_depot , b_warehouse :
71892: LD_VAR 0 1
71896: PUSH
71897: LD_INT 0
71899: DOUBLE
71900: EQUAL
71901: IFTRUE 71911
71903: LD_INT 1
71905: DOUBLE
71906: EQUAL
71907: IFTRUE 71911
71909: GO 72112
71911: POP
// case nation of nation_american :
71912: LD_VAR 0 5
71916: PUSH
71917: LD_INT 1
71919: DOUBLE
71920: EQUAL
71921: IFTRUE 71925
71923: GO 71981
71925: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71926: LD_ADDR_VAR 0 9
71930: PUSH
71931: LD_VAR 0 11
71935: PUSH
71936: LD_VAR 0 12
71940: PUSH
71941: LD_VAR 0 13
71945: PUSH
71946: LD_VAR 0 14
71950: PUSH
71951: LD_VAR 0 15
71955: PUSH
71956: LD_VAR 0 16
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: PUSH
71969: LD_VAR 0 4
71973: PUSH
71974: LD_INT 1
71976: PLUS
71977: ARRAY
71978: ST_TO_ADDR
71979: GO 72110
71981: LD_INT 2
71983: DOUBLE
71984: EQUAL
71985: IFTRUE 71989
71987: GO 72045
71989: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71990: LD_ADDR_VAR 0 9
71994: PUSH
71995: LD_VAR 0 17
71999: PUSH
72000: LD_VAR 0 18
72004: PUSH
72005: LD_VAR 0 19
72009: PUSH
72010: LD_VAR 0 20
72014: PUSH
72015: LD_VAR 0 21
72019: PUSH
72020: LD_VAR 0 22
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: PUSH
72033: LD_VAR 0 4
72037: PUSH
72038: LD_INT 1
72040: PLUS
72041: ARRAY
72042: ST_TO_ADDR
72043: GO 72110
72045: LD_INT 3
72047: DOUBLE
72048: EQUAL
72049: IFTRUE 72053
72051: GO 72109
72053: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72054: LD_ADDR_VAR 0 9
72058: PUSH
72059: LD_VAR 0 23
72063: PUSH
72064: LD_VAR 0 24
72068: PUSH
72069: LD_VAR 0 25
72073: PUSH
72074: LD_VAR 0 26
72078: PUSH
72079: LD_VAR 0 27
72083: PUSH
72084: LD_VAR 0 28
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: PUSH
72097: LD_VAR 0 4
72101: PUSH
72102: LD_INT 1
72104: PLUS
72105: ARRAY
72106: ST_TO_ADDR
72107: GO 72110
72109: POP
72110: GO 72665
72112: LD_INT 2
72114: DOUBLE
72115: EQUAL
72116: IFTRUE 72126
72118: LD_INT 3
72120: DOUBLE
72121: EQUAL
72122: IFTRUE 72126
72124: GO 72182
72126: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72127: LD_ADDR_VAR 0 9
72131: PUSH
72132: LD_VAR 0 29
72136: PUSH
72137: LD_VAR 0 30
72141: PUSH
72142: LD_VAR 0 31
72146: PUSH
72147: LD_VAR 0 32
72151: PUSH
72152: LD_VAR 0 33
72156: PUSH
72157: LD_VAR 0 34
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: PUSH
72170: LD_VAR 0 4
72174: PUSH
72175: LD_INT 1
72177: PLUS
72178: ARRAY
72179: ST_TO_ADDR
72180: GO 72665
72182: LD_INT 16
72184: DOUBLE
72185: EQUAL
72186: IFTRUE 72244
72188: LD_INT 17
72190: DOUBLE
72191: EQUAL
72192: IFTRUE 72244
72194: LD_INT 18
72196: DOUBLE
72197: EQUAL
72198: IFTRUE 72244
72200: LD_INT 19
72202: DOUBLE
72203: EQUAL
72204: IFTRUE 72244
72206: LD_INT 22
72208: DOUBLE
72209: EQUAL
72210: IFTRUE 72244
72212: LD_INT 20
72214: DOUBLE
72215: EQUAL
72216: IFTRUE 72244
72218: LD_INT 21
72220: DOUBLE
72221: EQUAL
72222: IFTRUE 72244
72224: LD_INT 23
72226: DOUBLE
72227: EQUAL
72228: IFTRUE 72244
72230: LD_INT 24
72232: DOUBLE
72233: EQUAL
72234: IFTRUE 72244
72236: LD_INT 25
72238: DOUBLE
72239: EQUAL
72240: IFTRUE 72244
72242: GO 72300
72244: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72245: LD_ADDR_VAR 0 9
72249: PUSH
72250: LD_VAR 0 35
72254: PUSH
72255: LD_VAR 0 36
72259: PUSH
72260: LD_VAR 0 37
72264: PUSH
72265: LD_VAR 0 38
72269: PUSH
72270: LD_VAR 0 39
72274: PUSH
72275: LD_VAR 0 40
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: PUSH
72288: LD_VAR 0 4
72292: PUSH
72293: LD_INT 1
72295: PLUS
72296: ARRAY
72297: ST_TO_ADDR
72298: GO 72665
72300: LD_INT 6
72302: DOUBLE
72303: EQUAL
72304: IFTRUE 72356
72306: LD_INT 7
72308: DOUBLE
72309: EQUAL
72310: IFTRUE 72356
72312: LD_INT 8
72314: DOUBLE
72315: EQUAL
72316: IFTRUE 72356
72318: LD_INT 13
72320: DOUBLE
72321: EQUAL
72322: IFTRUE 72356
72324: LD_INT 12
72326: DOUBLE
72327: EQUAL
72328: IFTRUE 72356
72330: LD_INT 15
72332: DOUBLE
72333: EQUAL
72334: IFTRUE 72356
72336: LD_INT 11
72338: DOUBLE
72339: EQUAL
72340: IFTRUE 72356
72342: LD_INT 14
72344: DOUBLE
72345: EQUAL
72346: IFTRUE 72356
72348: LD_INT 10
72350: DOUBLE
72351: EQUAL
72352: IFTRUE 72356
72354: GO 72412
72356: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72357: LD_ADDR_VAR 0 9
72361: PUSH
72362: LD_VAR 0 41
72366: PUSH
72367: LD_VAR 0 42
72371: PUSH
72372: LD_VAR 0 43
72376: PUSH
72377: LD_VAR 0 44
72381: PUSH
72382: LD_VAR 0 45
72386: PUSH
72387: LD_VAR 0 46
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: PUSH
72400: LD_VAR 0 4
72404: PUSH
72405: LD_INT 1
72407: PLUS
72408: ARRAY
72409: ST_TO_ADDR
72410: GO 72665
72412: LD_INT 36
72414: DOUBLE
72415: EQUAL
72416: IFTRUE 72420
72418: GO 72476
72420: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72421: LD_ADDR_VAR 0 9
72425: PUSH
72426: LD_VAR 0 47
72430: PUSH
72431: LD_VAR 0 48
72435: PUSH
72436: LD_VAR 0 49
72440: PUSH
72441: LD_VAR 0 50
72445: PUSH
72446: LD_VAR 0 51
72450: PUSH
72451: LD_VAR 0 52
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: PUSH
72464: LD_VAR 0 4
72468: PUSH
72469: LD_INT 1
72471: PLUS
72472: ARRAY
72473: ST_TO_ADDR
72474: GO 72665
72476: LD_INT 4
72478: DOUBLE
72479: EQUAL
72480: IFTRUE 72502
72482: LD_INT 5
72484: DOUBLE
72485: EQUAL
72486: IFTRUE 72502
72488: LD_INT 34
72490: DOUBLE
72491: EQUAL
72492: IFTRUE 72502
72494: LD_INT 37
72496: DOUBLE
72497: EQUAL
72498: IFTRUE 72502
72500: GO 72558
72502: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72503: LD_ADDR_VAR 0 9
72507: PUSH
72508: LD_VAR 0 53
72512: PUSH
72513: LD_VAR 0 54
72517: PUSH
72518: LD_VAR 0 55
72522: PUSH
72523: LD_VAR 0 56
72527: PUSH
72528: LD_VAR 0 57
72532: PUSH
72533: LD_VAR 0 58
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: PUSH
72546: LD_VAR 0 4
72550: PUSH
72551: LD_INT 1
72553: PLUS
72554: ARRAY
72555: ST_TO_ADDR
72556: GO 72665
72558: LD_INT 31
72560: DOUBLE
72561: EQUAL
72562: IFTRUE 72608
72564: LD_INT 32
72566: DOUBLE
72567: EQUAL
72568: IFTRUE 72608
72570: LD_INT 33
72572: DOUBLE
72573: EQUAL
72574: IFTRUE 72608
72576: LD_INT 27
72578: DOUBLE
72579: EQUAL
72580: IFTRUE 72608
72582: LD_INT 26
72584: DOUBLE
72585: EQUAL
72586: IFTRUE 72608
72588: LD_INT 28
72590: DOUBLE
72591: EQUAL
72592: IFTRUE 72608
72594: LD_INT 29
72596: DOUBLE
72597: EQUAL
72598: IFTRUE 72608
72600: LD_INT 30
72602: DOUBLE
72603: EQUAL
72604: IFTRUE 72608
72606: GO 72664
72608: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72609: LD_ADDR_VAR 0 9
72613: PUSH
72614: LD_VAR 0 59
72618: PUSH
72619: LD_VAR 0 60
72623: PUSH
72624: LD_VAR 0 61
72628: PUSH
72629: LD_VAR 0 62
72633: PUSH
72634: LD_VAR 0 63
72638: PUSH
72639: LD_VAR 0 64
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: PUSH
72652: LD_VAR 0 4
72656: PUSH
72657: LD_INT 1
72659: PLUS
72660: ARRAY
72661: ST_TO_ADDR
72662: GO 72665
72664: POP
// temp_list2 = [ ] ;
72665: LD_ADDR_VAR 0 10
72669: PUSH
72670: EMPTY
72671: ST_TO_ADDR
// for i in temp_list do
72672: LD_ADDR_VAR 0 8
72676: PUSH
72677: LD_VAR 0 9
72681: PUSH
72682: FOR_IN
72683: IFFALSE 72735
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72685: LD_ADDR_VAR 0 10
72689: PUSH
72690: LD_VAR 0 10
72694: PUSH
72695: LD_VAR 0 8
72699: PUSH
72700: LD_INT 1
72702: ARRAY
72703: PUSH
72704: LD_VAR 0 2
72708: PLUS
72709: PUSH
72710: LD_VAR 0 8
72714: PUSH
72715: LD_INT 2
72717: ARRAY
72718: PUSH
72719: LD_VAR 0 3
72723: PLUS
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: EMPTY
72730: LIST
72731: ADD
72732: ST_TO_ADDR
72733: GO 72682
72735: POP
72736: POP
// result = temp_list2 ;
72737: LD_ADDR_VAR 0 7
72741: PUSH
72742: LD_VAR 0 10
72746: ST_TO_ADDR
// end ;
72747: LD_VAR 0 7
72751: RET
// export function EnemyInRange ( unit , dist ) ; begin
72752: LD_INT 0
72754: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72755: LD_ADDR_VAR 0 3
72759: PUSH
72760: LD_VAR 0 1
72764: PPUSH
72765: CALL_OW 255
72769: PPUSH
72770: LD_VAR 0 1
72774: PPUSH
72775: CALL_OW 250
72779: PPUSH
72780: LD_VAR 0 1
72784: PPUSH
72785: CALL_OW 251
72789: PPUSH
72790: LD_VAR 0 2
72794: PPUSH
72795: CALL 46154 0 4
72799: PUSH
72800: LD_INT 4
72802: ARRAY
72803: ST_TO_ADDR
// end ;
72804: LD_VAR 0 3
72808: RET
// export function PlayerSeeMe ( unit ) ; begin
72809: LD_INT 0
72811: PPUSH
// result := See ( your_side , unit ) ;
72812: LD_ADDR_VAR 0 2
72816: PUSH
72817: LD_OWVAR 2
72821: PPUSH
72822: LD_VAR 0 1
72826: PPUSH
72827: CALL_OW 292
72831: ST_TO_ADDR
// end ;
72832: LD_VAR 0 2
72836: RET
// export function ReverseDir ( unit ) ; begin
72837: LD_INT 0
72839: PPUSH
// if not unit then
72840: LD_VAR 0 1
72844: NOT
72845: IFFALSE 72849
// exit ;
72847: GO 72872
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72849: LD_ADDR_VAR 0 2
72853: PUSH
72854: LD_VAR 0 1
72858: PPUSH
72859: CALL_OW 254
72863: PUSH
72864: LD_INT 3
72866: PLUS
72867: PUSH
72868: LD_INT 6
72870: MOD
72871: ST_TO_ADDR
// end ;
72872: LD_VAR 0 2
72876: RET
// export function ReverseArray ( array ) ; var i ; begin
72877: LD_INT 0
72879: PPUSH
72880: PPUSH
// if not array then
72881: LD_VAR 0 1
72885: NOT
72886: IFFALSE 72890
// exit ;
72888: GO 72945
// result := [ ] ;
72890: LD_ADDR_VAR 0 2
72894: PUSH
72895: EMPTY
72896: ST_TO_ADDR
// for i := array downto 1 do
72897: LD_ADDR_VAR 0 3
72901: PUSH
72902: DOUBLE
72903: LD_VAR 0 1
72907: INC
72908: ST_TO_ADDR
72909: LD_INT 1
72911: PUSH
72912: FOR_DOWNTO
72913: IFFALSE 72943
// result := Join ( result , array [ i ] ) ;
72915: LD_ADDR_VAR 0 2
72919: PUSH
72920: LD_VAR 0 2
72924: PPUSH
72925: LD_VAR 0 1
72929: PUSH
72930: LD_VAR 0 3
72934: ARRAY
72935: PPUSH
72936: CALL 77589 0 2
72940: ST_TO_ADDR
72941: GO 72912
72943: POP
72944: POP
// end ;
72945: LD_VAR 0 2
72949: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72950: LD_INT 0
72952: PPUSH
72953: PPUSH
72954: PPUSH
72955: PPUSH
72956: PPUSH
72957: PPUSH
// if not unit or not hexes then
72958: LD_VAR 0 1
72962: NOT
72963: PUSH
72964: LD_VAR 0 2
72968: NOT
72969: OR
72970: IFFALSE 72974
// exit ;
72972: GO 73097
// dist := 9999 ;
72974: LD_ADDR_VAR 0 5
72978: PUSH
72979: LD_INT 9999
72981: ST_TO_ADDR
// for i = 1 to hexes do
72982: LD_ADDR_VAR 0 4
72986: PUSH
72987: DOUBLE
72988: LD_INT 1
72990: DEC
72991: ST_TO_ADDR
72992: LD_VAR 0 2
72996: PUSH
72997: FOR_TO
72998: IFFALSE 73085
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73000: LD_ADDR_VAR 0 6
73004: PUSH
73005: LD_VAR 0 1
73009: PPUSH
73010: LD_VAR 0 2
73014: PUSH
73015: LD_VAR 0 4
73019: ARRAY
73020: PUSH
73021: LD_INT 1
73023: ARRAY
73024: PPUSH
73025: LD_VAR 0 2
73029: PUSH
73030: LD_VAR 0 4
73034: ARRAY
73035: PUSH
73036: LD_INT 2
73038: ARRAY
73039: PPUSH
73040: CALL_OW 297
73044: ST_TO_ADDR
// if tdist < dist then
73045: LD_VAR 0 6
73049: PUSH
73050: LD_VAR 0 5
73054: LESS
73055: IFFALSE 73083
// begin hex := hexes [ i ] ;
73057: LD_ADDR_VAR 0 8
73061: PUSH
73062: LD_VAR 0 2
73066: PUSH
73067: LD_VAR 0 4
73071: ARRAY
73072: ST_TO_ADDR
// dist := tdist ;
73073: LD_ADDR_VAR 0 5
73077: PUSH
73078: LD_VAR 0 6
73082: ST_TO_ADDR
// end ; end ;
73083: GO 72997
73085: POP
73086: POP
// result := hex ;
73087: LD_ADDR_VAR 0 3
73091: PUSH
73092: LD_VAR 0 8
73096: ST_TO_ADDR
// end ;
73097: LD_VAR 0 3
73101: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73102: LD_INT 0
73104: PPUSH
73105: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73106: LD_VAR 0 1
73110: NOT
73111: PUSH
73112: LD_VAR 0 1
73116: PUSH
73117: LD_INT 21
73119: PUSH
73120: LD_INT 2
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 23
73129: PUSH
73130: LD_INT 2
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PPUSH
73141: CALL_OW 69
73145: IN
73146: NOT
73147: OR
73148: IFFALSE 73152
// exit ;
73150: GO 73199
// for i = 1 to 3 do
73152: LD_ADDR_VAR 0 3
73156: PUSH
73157: DOUBLE
73158: LD_INT 1
73160: DEC
73161: ST_TO_ADDR
73162: LD_INT 3
73164: PUSH
73165: FOR_TO
73166: IFFALSE 73197
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73168: LD_VAR 0 1
73172: PPUSH
73173: CALL_OW 250
73177: PPUSH
73178: LD_VAR 0 1
73182: PPUSH
73183: CALL_OW 251
73187: PPUSH
73188: LD_INT 1
73190: PPUSH
73191: CALL_OW 453
73195: GO 73165
73197: POP
73198: POP
// end ;
73199: LD_VAR 0 2
73203: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73204: LD_INT 0
73206: PPUSH
73207: PPUSH
73208: PPUSH
73209: PPUSH
73210: PPUSH
73211: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73212: LD_VAR 0 1
73216: NOT
73217: PUSH
73218: LD_VAR 0 2
73222: NOT
73223: OR
73224: PUSH
73225: LD_VAR 0 1
73229: PPUSH
73230: CALL_OW 314
73234: OR
73235: IFFALSE 73239
// exit ;
73237: GO 73706
// if GetLives ( i ) < 250 then
73239: LD_VAR 0 4
73243: PPUSH
73244: CALL_OW 256
73248: PUSH
73249: LD_INT 250
73251: LESS
73252: IFFALSE 73265
// begin ComAutodestruct ( i ) ;
73254: LD_VAR 0 4
73258: PPUSH
73259: CALL 73102 0 1
// exit ;
73263: GO 73706
// end ; x := GetX ( enemy_unit ) ;
73265: LD_ADDR_VAR 0 7
73269: PUSH
73270: LD_VAR 0 2
73274: PPUSH
73275: CALL_OW 250
73279: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73280: LD_ADDR_VAR 0 8
73284: PUSH
73285: LD_VAR 0 2
73289: PPUSH
73290: CALL_OW 251
73294: ST_TO_ADDR
// if not x or not y then
73295: LD_VAR 0 7
73299: NOT
73300: PUSH
73301: LD_VAR 0 8
73305: NOT
73306: OR
73307: IFFALSE 73311
// exit ;
73309: GO 73706
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73311: LD_ADDR_VAR 0 6
73315: PUSH
73316: LD_VAR 0 7
73320: PPUSH
73321: LD_INT 0
73323: PPUSH
73324: LD_INT 4
73326: PPUSH
73327: CALL_OW 272
73331: PUSH
73332: LD_VAR 0 8
73336: PPUSH
73337: LD_INT 0
73339: PPUSH
73340: LD_INT 4
73342: PPUSH
73343: CALL_OW 273
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_VAR 0 7
73356: PPUSH
73357: LD_INT 1
73359: PPUSH
73360: LD_INT 4
73362: PPUSH
73363: CALL_OW 272
73367: PUSH
73368: LD_VAR 0 8
73372: PPUSH
73373: LD_INT 1
73375: PPUSH
73376: LD_INT 4
73378: PPUSH
73379: CALL_OW 273
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_VAR 0 7
73392: PPUSH
73393: LD_INT 2
73395: PPUSH
73396: LD_INT 4
73398: PPUSH
73399: CALL_OW 272
73403: PUSH
73404: LD_VAR 0 8
73408: PPUSH
73409: LD_INT 2
73411: PPUSH
73412: LD_INT 4
73414: PPUSH
73415: CALL_OW 273
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: LD_VAR 0 7
73428: PPUSH
73429: LD_INT 3
73431: PPUSH
73432: LD_INT 4
73434: PPUSH
73435: CALL_OW 272
73439: PUSH
73440: LD_VAR 0 8
73444: PPUSH
73445: LD_INT 3
73447: PPUSH
73448: LD_INT 4
73450: PPUSH
73451: CALL_OW 273
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: PUSH
73460: LD_VAR 0 7
73464: PPUSH
73465: LD_INT 4
73467: PPUSH
73468: LD_INT 4
73470: PPUSH
73471: CALL_OW 272
73475: PUSH
73476: LD_VAR 0 8
73480: PPUSH
73481: LD_INT 4
73483: PPUSH
73484: LD_INT 4
73486: PPUSH
73487: CALL_OW 273
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_VAR 0 7
73500: PPUSH
73501: LD_INT 5
73503: PPUSH
73504: LD_INT 4
73506: PPUSH
73507: CALL_OW 272
73511: PUSH
73512: LD_VAR 0 8
73516: PPUSH
73517: LD_INT 5
73519: PPUSH
73520: LD_INT 4
73522: PPUSH
73523: CALL_OW 273
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: ST_TO_ADDR
// for i = tmp downto 1 do
73540: LD_ADDR_VAR 0 4
73544: PUSH
73545: DOUBLE
73546: LD_VAR 0 6
73550: INC
73551: ST_TO_ADDR
73552: LD_INT 1
73554: PUSH
73555: FOR_DOWNTO
73556: IFFALSE 73657
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73558: LD_VAR 0 6
73562: PUSH
73563: LD_VAR 0 4
73567: ARRAY
73568: PUSH
73569: LD_INT 1
73571: ARRAY
73572: PPUSH
73573: LD_VAR 0 6
73577: PUSH
73578: LD_VAR 0 4
73582: ARRAY
73583: PUSH
73584: LD_INT 2
73586: ARRAY
73587: PPUSH
73588: CALL_OW 488
73592: NOT
73593: PUSH
73594: LD_VAR 0 6
73598: PUSH
73599: LD_VAR 0 4
73603: ARRAY
73604: PUSH
73605: LD_INT 1
73607: ARRAY
73608: PPUSH
73609: LD_VAR 0 6
73613: PUSH
73614: LD_VAR 0 4
73618: ARRAY
73619: PUSH
73620: LD_INT 2
73622: ARRAY
73623: PPUSH
73624: CALL_OW 428
73628: PUSH
73629: LD_INT 0
73631: NONEQUAL
73632: OR
73633: IFFALSE 73655
// tmp := Delete ( tmp , i ) ;
73635: LD_ADDR_VAR 0 6
73639: PUSH
73640: LD_VAR 0 6
73644: PPUSH
73645: LD_VAR 0 4
73649: PPUSH
73650: CALL_OW 3
73654: ST_TO_ADDR
73655: GO 73555
73657: POP
73658: POP
// j := GetClosestHex ( unit , tmp ) ;
73659: LD_ADDR_VAR 0 5
73663: PUSH
73664: LD_VAR 0 1
73668: PPUSH
73669: LD_VAR 0 6
73673: PPUSH
73674: CALL 72950 0 2
73678: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73679: LD_VAR 0 1
73683: PPUSH
73684: LD_VAR 0 5
73688: PUSH
73689: LD_INT 1
73691: ARRAY
73692: PPUSH
73693: LD_VAR 0 5
73697: PUSH
73698: LD_INT 2
73700: ARRAY
73701: PPUSH
73702: CALL_OW 111
// end ;
73706: LD_VAR 0 3
73710: RET
// export function PrepareApemanSoldier ( ) ; begin
73711: LD_INT 0
73713: PPUSH
// uc_nation := 0 ;
73714: LD_ADDR_OWVAR 21
73718: PUSH
73719: LD_INT 0
73721: ST_TO_ADDR
// hc_sex := sex_male ;
73722: LD_ADDR_OWVAR 27
73726: PUSH
73727: LD_INT 1
73729: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73730: LD_ADDR_OWVAR 28
73734: PUSH
73735: LD_INT 15
73737: ST_TO_ADDR
// hc_gallery :=  ;
73738: LD_ADDR_OWVAR 33
73742: PUSH
73743: LD_STRING 
73745: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73746: LD_ADDR_OWVAR 31
73750: PUSH
73751: LD_INT 0
73753: PPUSH
73754: LD_INT 3
73756: PPUSH
73757: CALL_OW 12
73761: PUSH
73762: LD_INT 0
73764: PPUSH
73765: LD_INT 3
73767: PPUSH
73768: CALL_OW 12
73772: PUSH
73773: LD_INT 0
73775: PUSH
73776: LD_INT 0
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: ST_TO_ADDR
// end ;
73785: LD_VAR 0 1
73789: RET
// export function PrepareApemanEngineer ( ) ; begin
73790: LD_INT 0
73792: PPUSH
// uc_nation := 0 ;
73793: LD_ADDR_OWVAR 21
73797: PUSH
73798: LD_INT 0
73800: ST_TO_ADDR
// hc_sex := sex_male ;
73801: LD_ADDR_OWVAR 27
73805: PUSH
73806: LD_INT 1
73808: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73809: LD_ADDR_OWVAR 28
73813: PUSH
73814: LD_INT 16
73816: ST_TO_ADDR
// hc_gallery :=  ;
73817: LD_ADDR_OWVAR 33
73821: PUSH
73822: LD_STRING 
73824: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73825: LD_ADDR_OWVAR 31
73829: PUSH
73830: LD_INT 0
73832: PPUSH
73833: LD_INT 3
73835: PPUSH
73836: CALL_OW 12
73840: PUSH
73841: LD_INT 0
73843: PPUSH
73844: LD_INT 3
73846: PPUSH
73847: CALL_OW 12
73851: PUSH
73852: LD_INT 0
73854: PUSH
73855: LD_INT 0
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: ST_TO_ADDR
// end ;
73864: LD_VAR 0 1
73868: RET
// export function PrepareApeman ( agressivity ) ; begin
73869: LD_INT 0
73871: PPUSH
// uc_side := 0 ;
73872: LD_ADDR_OWVAR 20
73876: PUSH
73877: LD_INT 0
73879: ST_TO_ADDR
// uc_nation := 0 ;
73880: LD_ADDR_OWVAR 21
73884: PUSH
73885: LD_INT 0
73887: ST_TO_ADDR
// hc_sex := sex_male ;
73888: LD_ADDR_OWVAR 27
73892: PUSH
73893: LD_INT 1
73895: ST_TO_ADDR
// hc_class := class_apeman ;
73896: LD_ADDR_OWVAR 28
73900: PUSH
73901: LD_INT 12
73903: ST_TO_ADDR
// hc_gallery :=  ;
73904: LD_ADDR_OWVAR 33
73908: PUSH
73909: LD_STRING 
73911: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73912: LD_ADDR_OWVAR 35
73916: PUSH
73917: LD_VAR 0 1
73921: NEG
73922: PPUSH
73923: LD_VAR 0 1
73927: PPUSH
73928: CALL_OW 12
73932: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73933: LD_ADDR_OWVAR 31
73937: PUSH
73938: LD_INT 0
73940: PPUSH
73941: LD_INT 3
73943: PPUSH
73944: CALL_OW 12
73948: PUSH
73949: LD_INT 0
73951: PPUSH
73952: LD_INT 3
73954: PPUSH
73955: CALL_OW 12
73959: PUSH
73960: LD_INT 0
73962: PUSH
73963: LD_INT 0
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: ST_TO_ADDR
// end ;
73972: LD_VAR 0 2
73976: RET
// export function PrepareTiger ( agressivity ) ; begin
73977: LD_INT 0
73979: PPUSH
// uc_side := 0 ;
73980: LD_ADDR_OWVAR 20
73984: PUSH
73985: LD_INT 0
73987: ST_TO_ADDR
// uc_nation := 0 ;
73988: LD_ADDR_OWVAR 21
73992: PUSH
73993: LD_INT 0
73995: ST_TO_ADDR
// hc_class := class_tiger ;
73996: LD_ADDR_OWVAR 28
74000: PUSH
74001: LD_INT 14
74003: ST_TO_ADDR
// hc_gallery :=  ;
74004: LD_ADDR_OWVAR 33
74008: PUSH
74009: LD_STRING 
74011: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74012: LD_ADDR_OWVAR 35
74016: PUSH
74017: LD_VAR 0 1
74021: NEG
74022: PPUSH
74023: LD_VAR 0 1
74027: PPUSH
74028: CALL_OW 12
74032: ST_TO_ADDR
// end ;
74033: LD_VAR 0 2
74037: RET
// export function PrepareEnchidna ( ) ; begin
74038: LD_INT 0
74040: PPUSH
// uc_side := 0 ;
74041: LD_ADDR_OWVAR 20
74045: PUSH
74046: LD_INT 0
74048: ST_TO_ADDR
// uc_nation := 0 ;
74049: LD_ADDR_OWVAR 21
74053: PUSH
74054: LD_INT 0
74056: ST_TO_ADDR
// hc_class := class_baggie ;
74057: LD_ADDR_OWVAR 28
74061: PUSH
74062: LD_INT 13
74064: ST_TO_ADDR
// hc_gallery :=  ;
74065: LD_ADDR_OWVAR 33
74069: PUSH
74070: LD_STRING 
74072: ST_TO_ADDR
// end ;
74073: LD_VAR 0 1
74077: RET
// export function PrepareFrog ( ) ; begin
74078: LD_INT 0
74080: PPUSH
// uc_side := 0 ;
74081: LD_ADDR_OWVAR 20
74085: PUSH
74086: LD_INT 0
74088: ST_TO_ADDR
// uc_nation := 0 ;
74089: LD_ADDR_OWVAR 21
74093: PUSH
74094: LD_INT 0
74096: ST_TO_ADDR
// hc_class := class_frog ;
74097: LD_ADDR_OWVAR 28
74101: PUSH
74102: LD_INT 19
74104: ST_TO_ADDR
// hc_gallery :=  ;
74105: LD_ADDR_OWVAR 33
74109: PUSH
74110: LD_STRING 
74112: ST_TO_ADDR
// end ;
74113: LD_VAR 0 1
74117: RET
// export function PrepareFish ( ) ; begin
74118: LD_INT 0
74120: PPUSH
// uc_side := 0 ;
74121: LD_ADDR_OWVAR 20
74125: PUSH
74126: LD_INT 0
74128: ST_TO_ADDR
// uc_nation := 0 ;
74129: LD_ADDR_OWVAR 21
74133: PUSH
74134: LD_INT 0
74136: ST_TO_ADDR
// hc_class := class_fish ;
74137: LD_ADDR_OWVAR 28
74141: PUSH
74142: LD_INT 20
74144: ST_TO_ADDR
// hc_gallery :=  ;
74145: LD_ADDR_OWVAR 33
74149: PUSH
74150: LD_STRING 
74152: ST_TO_ADDR
// end ;
74153: LD_VAR 0 1
74157: RET
// export function PrepareBird ( ) ; begin
74158: LD_INT 0
74160: PPUSH
// uc_side := 0 ;
74161: LD_ADDR_OWVAR 20
74165: PUSH
74166: LD_INT 0
74168: ST_TO_ADDR
// uc_nation := 0 ;
74169: LD_ADDR_OWVAR 21
74173: PUSH
74174: LD_INT 0
74176: ST_TO_ADDR
// hc_class := class_phororhacos ;
74177: LD_ADDR_OWVAR 28
74181: PUSH
74182: LD_INT 18
74184: ST_TO_ADDR
// hc_gallery :=  ;
74185: LD_ADDR_OWVAR 33
74189: PUSH
74190: LD_STRING 
74192: ST_TO_ADDR
// end ;
74193: LD_VAR 0 1
74197: RET
// export function PrepareHorse ( ) ; begin
74198: LD_INT 0
74200: PPUSH
// uc_side := 0 ;
74201: LD_ADDR_OWVAR 20
74205: PUSH
74206: LD_INT 0
74208: ST_TO_ADDR
// uc_nation := 0 ;
74209: LD_ADDR_OWVAR 21
74213: PUSH
74214: LD_INT 0
74216: ST_TO_ADDR
// hc_class := class_horse ;
74217: LD_ADDR_OWVAR 28
74221: PUSH
74222: LD_INT 21
74224: ST_TO_ADDR
// hc_gallery :=  ;
74225: LD_ADDR_OWVAR 33
74229: PUSH
74230: LD_STRING 
74232: ST_TO_ADDR
// end ;
74233: LD_VAR 0 1
74237: RET
// export function PrepareMastodont ( ) ; begin
74238: LD_INT 0
74240: PPUSH
// uc_side := 0 ;
74241: LD_ADDR_OWVAR 20
74245: PUSH
74246: LD_INT 0
74248: ST_TO_ADDR
// uc_nation := 0 ;
74249: LD_ADDR_OWVAR 21
74253: PUSH
74254: LD_INT 0
74256: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74257: LD_ADDR_OWVAR 37
74261: PUSH
74262: LD_INT 31
74264: ST_TO_ADDR
// vc_control := control_rider ;
74265: LD_ADDR_OWVAR 38
74269: PUSH
74270: LD_INT 4
74272: ST_TO_ADDR
// end ;
74273: LD_VAR 0 1
74277: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74278: LD_INT 0
74280: PPUSH
74281: PPUSH
74282: PPUSH
// uc_side = 0 ;
74283: LD_ADDR_OWVAR 20
74287: PUSH
74288: LD_INT 0
74290: ST_TO_ADDR
// uc_nation = 0 ;
74291: LD_ADDR_OWVAR 21
74295: PUSH
74296: LD_INT 0
74298: ST_TO_ADDR
// InitHc_All ( ) ;
74299: CALL_OW 584
// InitVc ;
74303: CALL_OW 20
// if mastodonts then
74307: LD_VAR 0 6
74311: IFFALSE 74378
// for i = 1 to mastodonts do
74313: LD_ADDR_VAR 0 11
74317: PUSH
74318: DOUBLE
74319: LD_INT 1
74321: DEC
74322: ST_TO_ADDR
74323: LD_VAR 0 6
74327: PUSH
74328: FOR_TO
74329: IFFALSE 74376
// begin vc_chassis := 31 ;
74331: LD_ADDR_OWVAR 37
74335: PUSH
74336: LD_INT 31
74338: ST_TO_ADDR
// vc_control := control_rider ;
74339: LD_ADDR_OWVAR 38
74343: PUSH
74344: LD_INT 4
74346: ST_TO_ADDR
// animal := CreateVehicle ;
74347: LD_ADDR_VAR 0 12
74351: PUSH
74352: CALL_OW 45
74356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74357: LD_VAR 0 12
74361: PPUSH
74362: LD_VAR 0 8
74366: PPUSH
74367: LD_INT 0
74369: PPUSH
74370: CALL 76506 0 3
// end ;
74374: GO 74328
74376: POP
74377: POP
// if horses then
74378: LD_VAR 0 5
74382: IFFALSE 74449
// for i = 1 to horses do
74384: LD_ADDR_VAR 0 11
74388: PUSH
74389: DOUBLE
74390: LD_INT 1
74392: DEC
74393: ST_TO_ADDR
74394: LD_VAR 0 5
74398: PUSH
74399: FOR_TO
74400: IFFALSE 74447
// begin hc_class := 21 ;
74402: LD_ADDR_OWVAR 28
74406: PUSH
74407: LD_INT 21
74409: ST_TO_ADDR
// hc_gallery :=  ;
74410: LD_ADDR_OWVAR 33
74414: PUSH
74415: LD_STRING 
74417: ST_TO_ADDR
// animal := CreateHuman ;
74418: LD_ADDR_VAR 0 12
74422: PUSH
74423: CALL_OW 44
74427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74428: LD_VAR 0 12
74432: PPUSH
74433: LD_VAR 0 8
74437: PPUSH
74438: LD_INT 0
74440: PPUSH
74441: CALL 76506 0 3
// end ;
74445: GO 74399
74447: POP
74448: POP
// if birds then
74449: LD_VAR 0 1
74453: IFFALSE 74520
// for i = 1 to birds do
74455: LD_ADDR_VAR 0 11
74459: PUSH
74460: DOUBLE
74461: LD_INT 1
74463: DEC
74464: ST_TO_ADDR
74465: LD_VAR 0 1
74469: PUSH
74470: FOR_TO
74471: IFFALSE 74518
// begin hc_class = 18 ;
74473: LD_ADDR_OWVAR 28
74477: PUSH
74478: LD_INT 18
74480: ST_TO_ADDR
// hc_gallery =  ;
74481: LD_ADDR_OWVAR 33
74485: PUSH
74486: LD_STRING 
74488: ST_TO_ADDR
// animal := CreateHuman ;
74489: LD_ADDR_VAR 0 12
74493: PUSH
74494: CALL_OW 44
74498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74499: LD_VAR 0 12
74503: PPUSH
74504: LD_VAR 0 8
74508: PPUSH
74509: LD_INT 0
74511: PPUSH
74512: CALL 76506 0 3
// end ;
74516: GO 74470
74518: POP
74519: POP
// if tigers then
74520: LD_VAR 0 2
74524: IFFALSE 74608
// for i = 1 to tigers do
74526: LD_ADDR_VAR 0 11
74530: PUSH
74531: DOUBLE
74532: LD_INT 1
74534: DEC
74535: ST_TO_ADDR
74536: LD_VAR 0 2
74540: PUSH
74541: FOR_TO
74542: IFFALSE 74606
// begin hc_class = class_tiger ;
74544: LD_ADDR_OWVAR 28
74548: PUSH
74549: LD_INT 14
74551: ST_TO_ADDR
// hc_gallery =  ;
74552: LD_ADDR_OWVAR 33
74556: PUSH
74557: LD_STRING 
74559: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74560: LD_ADDR_OWVAR 35
74564: PUSH
74565: LD_INT 7
74567: NEG
74568: PPUSH
74569: LD_INT 7
74571: PPUSH
74572: CALL_OW 12
74576: ST_TO_ADDR
// animal := CreateHuman ;
74577: LD_ADDR_VAR 0 12
74581: PUSH
74582: CALL_OW 44
74586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74587: LD_VAR 0 12
74591: PPUSH
74592: LD_VAR 0 8
74596: PPUSH
74597: LD_INT 0
74599: PPUSH
74600: CALL 76506 0 3
// end ;
74604: GO 74541
74606: POP
74607: POP
// if apemans then
74608: LD_VAR 0 3
74612: IFFALSE 74735
// for i = 1 to apemans do
74614: LD_ADDR_VAR 0 11
74618: PUSH
74619: DOUBLE
74620: LD_INT 1
74622: DEC
74623: ST_TO_ADDR
74624: LD_VAR 0 3
74628: PUSH
74629: FOR_TO
74630: IFFALSE 74733
// begin hc_class = class_apeman ;
74632: LD_ADDR_OWVAR 28
74636: PUSH
74637: LD_INT 12
74639: ST_TO_ADDR
// hc_gallery =  ;
74640: LD_ADDR_OWVAR 33
74644: PUSH
74645: LD_STRING 
74647: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74648: LD_ADDR_OWVAR 35
74652: PUSH
74653: LD_INT 2
74655: NEG
74656: PPUSH
74657: LD_INT 2
74659: PPUSH
74660: CALL_OW 12
74664: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74665: LD_ADDR_OWVAR 31
74669: PUSH
74670: LD_INT 1
74672: PPUSH
74673: LD_INT 3
74675: PPUSH
74676: CALL_OW 12
74680: PUSH
74681: LD_INT 1
74683: PPUSH
74684: LD_INT 3
74686: PPUSH
74687: CALL_OW 12
74691: PUSH
74692: LD_INT 0
74694: PUSH
74695: LD_INT 0
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: ST_TO_ADDR
// animal := CreateHuman ;
74704: LD_ADDR_VAR 0 12
74708: PUSH
74709: CALL_OW 44
74713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74714: LD_VAR 0 12
74718: PPUSH
74719: LD_VAR 0 8
74723: PPUSH
74724: LD_INT 0
74726: PPUSH
74727: CALL 76506 0 3
// end ;
74731: GO 74629
74733: POP
74734: POP
// if enchidnas then
74735: LD_VAR 0 4
74739: IFFALSE 74806
// for i = 1 to enchidnas do
74741: LD_ADDR_VAR 0 11
74745: PUSH
74746: DOUBLE
74747: LD_INT 1
74749: DEC
74750: ST_TO_ADDR
74751: LD_VAR 0 4
74755: PUSH
74756: FOR_TO
74757: IFFALSE 74804
// begin hc_class = 13 ;
74759: LD_ADDR_OWVAR 28
74763: PUSH
74764: LD_INT 13
74766: ST_TO_ADDR
// hc_gallery =  ;
74767: LD_ADDR_OWVAR 33
74771: PUSH
74772: LD_STRING 
74774: ST_TO_ADDR
// animal := CreateHuman ;
74775: LD_ADDR_VAR 0 12
74779: PUSH
74780: CALL_OW 44
74784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74785: LD_VAR 0 12
74789: PPUSH
74790: LD_VAR 0 8
74794: PPUSH
74795: LD_INT 0
74797: PPUSH
74798: CALL 76506 0 3
// end ;
74802: GO 74756
74804: POP
74805: POP
// if fishes then
74806: LD_VAR 0 7
74810: IFFALSE 74877
// for i = 1 to fishes do
74812: LD_ADDR_VAR 0 11
74816: PUSH
74817: DOUBLE
74818: LD_INT 1
74820: DEC
74821: ST_TO_ADDR
74822: LD_VAR 0 7
74826: PUSH
74827: FOR_TO
74828: IFFALSE 74875
// begin hc_class = 20 ;
74830: LD_ADDR_OWVAR 28
74834: PUSH
74835: LD_INT 20
74837: ST_TO_ADDR
// hc_gallery =  ;
74838: LD_ADDR_OWVAR 33
74842: PUSH
74843: LD_STRING 
74845: ST_TO_ADDR
// animal := CreateHuman ;
74846: LD_ADDR_VAR 0 12
74850: PUSH
74851: CALL_OW 44
74855: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74856: LD_VAR 0 12
74860: PPUSH
74861: LD_VAR 0 9
74865: PPUSH
74866: LD_INT 0
74868: PPUSH
74869: CALL 76506 0 3
// end ;
74873: GO 74827
74875: POP
74876: POP
// end ;
74877: LD_VAR 0 10
74881: RET
// export function WantHeal ( sci , unit ) ; begin
74882: LD_INT 0
74884: PPUSH
// if GetTaskList ( sci ) > 0 then
74885: LD_VAR 0 1
74889: PPUSH
74890: CALL_OW 437
74894: PUSH
74895: LD_INT 0
74897: GREATER
74898: IFFALSE 74968
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74900: LD_VAR 0 1
74904: PPUSH
74905: CALL_OW 437
74909: PUSH
74910: LD_INT 1
74912: ARRAY
74913: PUSH
74914: LD_INT 1
74916: ARRAY
74917: PUSH
74918: LD_STRING l
74920: EQUAL
74921: PUSH
74922: LD_VAR 0 1
74926: PPUSH
74927: CALL_OW 437
74931: PUSH
74932: LD_INT 1
74934: ARRAY
74935: PUSH
74936: LD_INT 4
74938: ARRAY
74939: PUSH
74940: LD_VAR 0 2
74944: EQUAL
74945: AND
74946: IFFALSE 74958
// result := true else
74948: LD_ADDR_VAR 0 3
74952: PUSH
74953: LD_INT 1
74955: ST_TO_ADDR
74956: GO 74966
// result := false ;
74958: LD_ADDR_VAR 0 3
74962: PUSH
74963: LD_INT 0
74965: ST_TO_ADDR
// end else
74966: GO 74976
// result := false ;
74968: LD_ADDR_VAR 0 3
74972: PUSH
74973: LD_INT 0
74975: ST_TO_ADDR
// end ;
74976: LD_VAR 0 3
74980: RET
// export function HealTarget ( sci ) ; begin
74981: LD_INT 0
74983: PPUSH
// if not sci then
74984: LD_VAR 0 1
74988: NOT
74989: IFFALSE 74993
// exit ;
74991: GO 75058
// result := 0 ;
74993: LD_ADDR_VAR 0 2
74997: PUSH
74998: LD_INT 0
75000: ST_TO_ADDR
// if GetTaskList ( sci ) then
75001: LD_VAR 0 1
75005: PPUSH
75006: CALL_OW 437
75010: IFFALSE 75058
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75012: LD_VAR 0 1
75016: PPUSH
75017: CALL_OW 437
75021: PUSH
75022: LD_INT 1
75024: ARRAY
75025: PUSH
75026: LD_INT 1
75028: ARRAY
75029: PUSH
75030: LD_STRING l
75032: EQUAL
75033: IFFALSE 75058
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75035: LD_ADDR_VAR 0 2
75039: PUSH
75040: LD_VAR 0 1
75044: PPUSH
75045: CALL_OW 437
75049: PUSH
75050: LD_INT 1
75052: ARRAY
75053: PUSH
75054: LD_INT 4
75056: ARRAY
75057: ST_TO_ADDR
// end ;
75058: LD_VAR 0 2
75062: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75063: LD_INT 0
75065: PPUSH
75066: PPUSH
75067: PPUSH
75068: PPUSH
// if not base_units then
75069: LD_VAR 0 1
75073: NOT
75074: IFFALSE 75078
// exit ;
75076: GO 75165
// result := false ;
75078: LD_ADDR_VAR 0 2
75082: PUSH
75083: LD_INT 0
75085: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75086: LD_ADDR_VAR 0 5
75090: PUSH
75091: LD_VAR 0 1
75095: PPUSH
75096: LD_INT 21
75098: PUSH
75099: LD_INT 3
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PPUSH
75106: CALL_OW 72
75110: ST_TO_ADDR
// if not tmp then
75111: LD_VAR 0 5
75115: NOT
75116: IFFALSE 75120
// exit ;
75118: GO 75165
// for i in tmp do
75120: LD_ADDR_VAR 0 3
75124: PUSH
75125: LD_VAR 0 5
75129: PUSH
75130: FOR_IN
75131: IFFALSE 75163
// begin result := EnemyInRange ( i , 22 ) ;
75133: LD_ADDR_VAR 0 2
75137: PUSH
75138: LD_VAR 0 3
75142: PPUSH
75143: LD_INT 22
75145: PPUSH
75146: CALL 72752 0 2
75150: ST_TO_ADDR
// if result then
75151: LD_VAR 0 2
75155: IFFALSE 75161
// exit ;
75157: POP
75158: POP
75159: GO 75165
// end ;
75161: GO 75130
75163: POP
75164: POP
// end ;
75165: LD_VAR 0 2
75169: RET
// export function FilterByTag ( units , tag ) ; begin
75170: LD_INT 0
75172: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75173: LD_ADDR_VAR 0 3
75177: PUSH
75178: LD_VAR 0 1
75182: PPUSH
75183: LD_INT 120
75185: PUSH
75186: LD_VAR 0 2
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PPUSH
75195: CALL_OW 72
75199: ST_TO_ADDR
// end ;
75200: LD_VAR 0 3
75204: RET
// export function IsDriver ( un ) ; begin
75205: LD_INT 0
75207: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75208: LD_ADDR_VAR 0 2
75212: PUSH
75213: LD_VAR 0 1
75217: PUSH
75218: LD_INT 55
75220: PUSH
75221: EMPTY
75222: LIST
75223: PPUSH
75224: CALL_OW 69
75228: IN
75229: ST_TO_ADDR
// end ;
75230: LD_VAR 0 2
75234: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75235: LD_INT 0
75237: PPUSH
75238: PPUSH
// list := [ ] ;
75239: LD_ADDR_VAR 0 5
75243: PUSH
75244: EMPTY
75245: ST_TO_ADDR
// case d of 0 :
75246: LD_VAR 0 3
75250: PUSH
75251: LD_INT 0
75253: DOUBLE
75254: EQUAL
75255: IFTRUE 75259
75257: GO 75392
75259: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75260: LD_ADDR_VAR 0 5
75264: PUSH
75265: LD_VAR 0 1
75269: PUSH
75270: LD_INT 4
75272: MINUS
75273: PUSH
75274: LD_VAR 0 2
75278: PUSH
75279: LD_INT 4
75281: MINUS
75282: PUSH
75283: LD_INT 2
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: LIST
75290: PUSH
75291: LD_VAR 0 1
75295: PUSH
75296: LD_INT 3
75298: MINUS
75299: PUSH
75300: LD_VAR 0 2
75304: PUSH
75305: LD_INT 1
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: LIST
75312: PUSH
75313: LD_VAR 0 1
75317: PUSH
75318: LD_INT 4
75320: PLUS
75321: PUSH
75322: LD_VAR 0 2
75326: PUSH
75327: LD_INT 4
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: LIST
75334: PUSH
75335: LD_VAR 0 1
75339: PUSH
75340: LD_INT 3
75342: PLUS
75343: PUSH
75344: LD_VAR 0 2
75348: PUSH
75349: LD_INT 3
75351: PLUS
75352: PUSH
75353: LD_INT 5
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: PUSH
75361: LD_VAR 0 1
75365: PUSH
75366: LD_VAR 0 2
75370: PUSH
75371: LD_INT 4
75373: PLUS
75374: PUSH
75375: LD_INT 0
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: LIST
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: ST_TO_ADDR
// end ; 1 :
75390: GO 76090
75392: LD_INT 1
75394: DOUBLE
75395: EQUAL
75396: IFTRUE 75400
75398: GO 75533
75400: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75401: LD_ADDR_VAR 0 5
75405: PUSH
75406: LD_VAR 0 1
75410: PUSH
75411: LD_VAR 0 2
75415: PUSH
75416: LD_INT 4
75418: MINUS
75419: PUSH
75420: LD_INT 3
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: LIST
75427: PUSH
75428: LD_VAR 0 1
75432: PUSH
75433: LD_INT 3
75435: MINUS
75436: PUSH
75437: LD_VAR 0 2
75441: PUSH
75442: LD_INT 3
75444: MINUS
75445: PUSH
75446: LD_INT 2
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: LIST
75453: PUSH
75454: LD_VAR 0 1
75458: PUSH
75459: LD_INT 4
75461: MINUS
75462: PUSH
75463: LD_VAR 0 2
75467: PUSH
75468: LD_INT 1
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: LIST
75475: PUSH
75476: LD_VAR 0 1
75480: PUSH
75481: LD_VAR 0 2
75485: PUSH
75486: LD_INT 3
75488: PLUS
75489: PUSH
75490: LD_INT 0
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: LIST
75497: PUSH
75498: LD_VAR 0 1
75502: PUSH
75503: LD_INT 4
75505: PLUS
75506: PUSH
75507: LD_VAR 0 2
75511: PUSH
75512: LD_INT 4
75514: PLUS
75515: PUSH
75516: LD_INT 5
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: LIST
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: ST_TO_ADDR
// end ; 2 :
75531: GO 76090
75533: LD_INT 2
75535: DOUBLE
75536: EQUAL
75537: IFTRUE 75541
75539: GO 75670
75541: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75542: LD_ADDR_VAR 0 5
75546: PUSH
75547: LD_VAR 0 1
75551: PUSH
75552: LD_VAR 0 2
75556: PUSH
75557: LD_INT 3
75559: MINUS
75560: PUSH
75561: LD_INT 3
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: LIST
75568: PUSH
75569: LD_VAR 0 1
75573: PUSH
75574: LD_INT 4
75576: PLUS
75577: PUSH
75578: LD_VAR 0 2
75582: PUSH
75583: LD_INT 4
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: LIST
75590: PUSH
75591: LD_VAR 0 1
75595: PUSH
75596: LD_VAR 0 2
75600: PUSH
75601: LD_INT 4
75603: PLUS
75604: PUSH
75605: LD_INT 0
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: LIST
75612: PUSH
75613: LD_VAR 0 1
75617: PUSH
75618: LD_INT 3
75620: MINUS
75621: PUSH
75622: LD_VAR 0 2
75626: PUSH
75627: LD_INT 1
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: LIST
75634: PUSH
75635: LD_VAR 0 1
75639: PUSH
75640: LD_INT 4
75642: MINUS
75643: PUSH
75644: LD_VAR 0 2
75648: PUSH
75649: LD_INT 4
75651: MINUS
75652: PUSH
75653: LD_INT 2
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: LIST
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: ST_TO_ADDR
// end ; 3 :
75668: GO 76090
75670: LD_INT 3
75672: DOUBLE
75673: EQUAL
75674: IFTRUE 75678
75676: GO 75811
75678: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75679: LD_ADDR_VAR 0 5
75683: PUSH
75684: LD_VAR 0 1
75688: PUSH
75689: LD_INT 3
75691: PLUS
75692: PUSH
75693: LD_VAR 0 2
75697: PUSH
75698: LD_INT 4
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: LIST
75705: PUSH
75706: LD_VAR 0 1
75710: PUSH
75711: LD_INT 4
75713: PLUS
75714: PUSH
75715: LD_VAR 0 2
75719: PUSH
75720: LD_INT 4
75722: PLUS
75723: PUSH
75724: LD_INT 5
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: LIST
75731: PUSH
75732: LD_VAR 0 1
75736: PUSH
75737: LD_INT 4
75739: MINUS
75740: PUSH
75741: LD_VAR 0 2
75745: PUSH
75746: LD_INT 1
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: LIST
75753: PUSH
75754: LD_VAR 0 1
75758: PUSH
75759: LD_VAR 0 2
75763: PUSH
75764: LD_INT 4
75766: MINUS
75767: PUSH
75768: LD_INT 3
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: LIST
75775: PUSH
75776: LD_VAR 0 1
75780: PUSH
75781: LD_INT 3
75783: MINUS
75784: PUSH
75785: LD_VAR 0 2
75789: PUSH
75790: LD_INT 3
75792: MINUS
75793: PUSH
75794: LD_INT 2
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: LIST
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: ST_TO_ADDR
// end ; 4 :
75809: GO 76090
75811: LD_INT 4
75813: DOUBLE
75814: EQUAL
75815: IFTRUE 75819
75817: GO 75952
75819: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75820: LD_ADDR_VAR 0 5
75824: PUSH
75825: LD_VAR 0 1
75829: PUSH
75830: LD_VAR 0 2
75834: PUSH
75835: LD_INT 4
75837: PLUS
75838: PUSH
75839: LD_INT 0
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: LIST
75846: PUSH
75847: LD_VAR 0 1
75851: PUSH
75852: LD_INT 3
75854: PLUS
75855: PUSH
75856: LD_VAR 0 2
75860: PUSH
75861: LD_INT 3
75863: PLUS
75864: PUSH
75865: LD_INT 5
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: LIST
75872: PUSH
75873: LD_VAR 0 1
75877: PUSH
75878: LD_INT 4
75880: PLUS
75881: PUSH
75882: LD_VAR 0 2
75886: PUSH
75887: LD_INT 4
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: LIST
75894: PUSH
75895: LD_VAR 0 1
75899: PUSH
75900: LD_VAR 0 2
75904: PUSH
75905: LD_INT 3
75907: MINUS
75908: PUSH
75909: LD_INT 3
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: LIST
75916: PUSH
75917: LD_VAR 0 1
75921: PUSH
75922: LD_INT 4
75924: MINUS
75925: PUSH
75926: LD_VAR 0 2
75930: PUSH
75931: LD_INT 4
75933: MINUS
75934: PUSH
75935: LD_INT 2
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: LIST
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: LIST
75947: LIST
75948: LIST
75949: ST_TO_ADDR
// end ; 5 :
75950: GO 76090
75952: LD_INT 5
75954: DOUBLE
75955: EQUAL
75956: IFTRUE 75960
75958: GO 76089
75960: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75961: LD_ADDR_VAR 0 5
75965: PUSH
75966: LD_VAR 0 1
75970: PUSH
75971: LD_INT 4
75973: MINUS
75974: PUSH
75975: LD_VAR 0 2
75979: PUSH
75980: LD_INT 1
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: LIST
75987: PUSH
75988: LD_VAR 0 1
75992: PUSH
75993: LD_VAR 0 2
75997: PUSH
75998: LD_INT 4
76000: MINUS
76001: PUSH
76002: LD_INT 3
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: LIST
76009: PUSH
76010: LD_VAR 0 1
76014: PUSH
76015: LD_INT 4
76017: PLUS
76018: PUSH
76019: LD_VAR 0 2
76023: PUSH
76024: LD_INT 4
76026: PLUS
76027: PUSH
76028: LD_INT 5
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: LIST
76035: PUSH
76036: LD_VAR 0 1
76040: PUSH
76041: LD_INT 3
76043: PLUS
76044: PUSH
76045: LD_VAR 0 2
76049: PUSH
76050: LD_INT 4
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: LIST
76057: PUSH
76058: LD_VAR 0 1
76062: PUSH
76063: LD_VAR 0 2
76067: PUSH
76068: LD_INT 3
76070: PLUS
76071: PUSH
76072: LD_INT 0
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: LIST
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: ST_TO_ADDR
// end ; end ;
76087: GO 76090
76089: POP
// result := list ;
76090: LD_ADDR_VAR 0 4
76094: PUSH
76095: LD_VAR 0 5
76099: ST_TO_ADDR
// end ;
76100: LD_VAR 0 4
76104: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76105: LD_INT 0
76107: PPUSH
76108: PPUSH
76109: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76110: LD_VAR 0 1
76114: NOT
76115: PUSH
76116: LD_VAR 0 2
76120: PUSH
76121: LD_INT 1
76123: PUSH
76124: LD_INT 2
76126: PUSH
76127: LD_INT 3
76129: PUSH
76130: LD_INT 4
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: IN
76139: NOT
76140: OR
76141: IFFALSE 76145
// exit ;
76143: GO 76228
// tmp := [ ] ;
76145: LD_ADDR_VAR 0 5
76149: PUSH
76150: EMPTY
76151: ST_TO_ADDR
// for i in units do
76152: LD_ADDR_VAR 0 4
76156: PUSH
76157: LD_VAR 0 1
76161: PUSH
76162: FOR_IN
76163: IFFALSE 76197
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76165: LD_ADDR_VAR 0 5
76169: PUSH
76170: LD_VAR 0 5
76174: PPUSH
76175: LD_VAR 0 4
76179: PPUSH
76180: LD_VAR 0 2
76184: PPUSH
76185: CALL_OW 259
76189: PPUSH
76190: CALL 77589 0 2
76194: ST_TO_ADDR
76195: GO 76162
76197: POP
76198: POP
// if not tmp then
76199: LD_VAR 0 5
76203: NOT
76204: IFFALSE 76208
// exit ;
76206: GO 76228
// result := SortListByListDesc ( units , tmp ) ;
76208: LD_ADDR_VAR 0 3
76212: PUSH
76213: LD_VAR 0 1
76217: PPUSH
76218: LD_VAR 0 5
76222: PPUSH
76223: CALL_OW 77
76227: ST_TO_ADDR
// end ;
76228: LD_VAR 0 3
76232: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76233: LD_INT 0
76235: PPUSH
76236: PPUSH
76237: PPUSH
// result := false ;
76238: LD_ADDR_VAR 0 3
76242: PUSH
76243: LD_INT 0
76245: ST_TO_ADDR
// if not building then
76246: LD_VAR 0 2
76250: NOT
76251: IFFALSE 76255
// exit ;
76253: GO 76393
// x := GetX ( building ) ;
76255: LD_ADDR_VAR 0 4
76259: PUSH
76260: LD_VAR 0 2
76264: PPUSH
76265: CALL_OW 250
76269: ST_TO_ADDR
// y := GetY ( building ) ;
76270: LD_ADDR_VAR 0 5
76274: PUSH
76275: LD_VAR 0 2
76279: PPUSH
76280: CALL_OW 251
76284: ST_TO_ADDR
// if not x or not y then
76285: LD_VAR 0 4
76289: NOT
76290: PUSH
76291: LD_VAR 0 5
76295: NOT
76296: OR
76297: IFFALSE 76301
// exit ;
76299: GO 76393
// if GetTaskList ( unit ) then
76301: LD_VAR 0 1
76305: PPUSH
76306: CALL_OW 437
76310: IFFALSE 76393
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76312: LD_STRING e
76314: PUSH
76315: LD_VAR 0 1
76319: PPUSH
76320: CALL_OW 437
76324: PUSH
76325: LD_INT 1
76327: ARRAY
76328: PUSH
76329: LD_INT 1
76331: ARRAY
76332: EQUAL
76333: PUSH
76334: LD_VAR 0 4
76338: PUSH
76339: LD_VAR 0 1
76343: PPUSH
76344: CALL_OW 437
76348: PUSH
76349: LD_INT 1
76351: ARRAY
76352: PUSH
76353: LD_INT 2
76355: ARRAY
76356: EQUAL
76357: AND
76358: PUSH
76359: LD_VAR 0 5
76363: PUSH
76364: LD_VAR 0 1
76368: PPUSH
76369: CALL_OW 437
76373: PUSH
76374: LD_INT 1
76376: ARRAY
76377: PUSH
76378: LD_INT 3
76380: ARRAY
76381: EQUAL
76382: AND
76383: IFFALSE 76393
// result := true end ;
76385: LD_ADDR_VAR 0 3
76389: PUSH
76390: LD_INT 1
76392: ST_TO_ADDR
// end ;
76393: LD_VAR 0 3
76397: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76398: LD_INT 0
76400: PPUSH
// result := false ;
76401: LD_ADDR_VAR 0 4
76405: PUSH
76406: LD_INT 0
76408: ST_TO_ADDR
// if GetTaskList ( unit ) then
76409: LD_VAR 0 1
76413: PPUSH
76414: CALL_OW 437
76418: IFFALSE 76501
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76420: LD_STRING M
76422: PUSH
76423: LD_VAR 0 1
76427: PPUSH
76428: CALL_OW 437
76432: PUSH
76433: LD_INT 1
76435: ARRAY
76436: PUSH
76437: LD_INT 1
76439: ARRAY
76440: EQUAL
76441: PUSH
76442: LD_VAR 0 2
76446: PUSH
76447: LD_VAR 0 1
76451: PPUSH
76452: CALL_OW 437
76456: PUSH
76457: LD_INT 1
76459: ARRAY
76460: PUSH
76461: LD_INT 2
76463: ARRAY
76464: EQUAL
76465: AND
76466: PUSH
76467: LD_VAR 0 3
76471: PUSH
76472: LD_VAR 0 1
76476: PPUSH
76477: CALL_OW 437
76481: PUSH
76482: LD_INT 1
76484: ARRAY
76485: PUSH
76486: LD_INT 3
76488: ARRAY
76489: EQUAL
76490: AND
76491: IFFALSE 76501
// result := true ;
76493: LD_ADDR_VAR 0 4
76497: PUSH
76498: LD_INT 1
76500: ST_TO_ADDR
// end ; end ;
76501: LD_VAR 0 4
76505: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76506: LD_INT 0
76508: PPUSH
76509: PPUSH
76510: PPUSH
76511: PPUSH
// if not unit or not area then
76512: LD_VAR 0 1
76516: NOT
76517: PUSH
76518: LD_VAR 0 2
76522: NOT
76523: OR
76524: IFFALSE 76528
// exit ;
76526: GO 76692
// tmp := AreaToList ( area , i ) ;
76528: LD_ADDR_VAR 0 6
76532: PUSH
76533: LD_VAR 0 2
76537: PPUSH
76538: LD_VAR 0 5
76542: PPUSH
76543: CALL_OW 517
76547: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76548: LD_ADDR_VAR 0 5
76552: PUSH
76553: DOUBLE
76554: LD_INT 1
76556: DEC
76557: ST_TO_ADDR
76558: LD_VAR 0 6
76562: PUSH
76563: LD_INT 1
76565: ARRAY
76566: PUSH
76567: FOR_TO
76568: IFFALSE 76690
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76570: LD_ADDR_VAR 0 7
76574: PUSH
76575: LD_VAR 0 6
76579: PUSH
76580: LD_INT 1
76582: ARRAY
76583: PUSH
76584: LD_VAR 0 5
76588: ARRAY
76589: PUSH
76590: LD_VAR 0 6
76594: PUSH
76595: LD_INT 2
76597: ARRAY
76598: PUSH
76599: LD_VAR 0 5
76603: ARRAY
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76609: LD_VAR 0 7
76613: PUSH
76614: LD_INT 1
76616: ARRAY
76617: PPUSH
76618: LD_VAR 0 7
76622: PUSH
76623: LD_INT 2
76625: ARRAY
76626: PPUSH
76627: CALL_OW 428
76631: PUSH
76632: LD_INT 0
76634: EQUAL
76635: IFFALSE 76688
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76637: LD_VAR 0 1
76641: PPUSH
76642: LD_VAR 0 7
76646: PUSH
76647: LD_INT 1
76649: ARRAY
76650: PPUSH
76651: LD_VAR 0 7
76655: PUSH
76656: LD_INT 2
76658: ARRAY
76659: PPUSH
76660: LD_VAR 0 3
76664: PPUSH
76665: CALL_OW 48
// result := IsPlaced ( unit ) ;
76669: LD_ADDR_VAR 0 4
76673: PUSH
76674: LD_VAR 0 1
76678: PPUSH
76679: CALL_OW 305
76683: ST_TO_ADDR
// exit ;
76684: POP
76685: POP
76686: GO 76692
// end ; end ;
76688: GO 76567
76690: POP
76691: POP
// end ;
76692: LD_VAR 0 4
76696: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76697: LD_INT 0
76699: PPUSH
76700: PPUSH
76701: PPUSH
// if not side or side > 8 then
76702: LD_VAR 0 1
76706: NOT
76707: PUSH
76708: LD_VAR 0 1
76712: PUSH
76713: LD_INT 8
76715: GREATER
76716: OR
76717: IFFALSE 76721
// exit ;
76719: GO 76908
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76721: LD_ADDR_VAR 0 4
76725: PUSH
76726: LD_INT 22
76728: PUSH
76729: LD_VAR 0 1
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 21
76740: PUSH
76741: LD_INT 3
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: PPUSH
76752: CALL_OW 69
76756: ST_TO_ADDR
// if not tmp then
76757: LD_VAR 0 4
76761: NOT
76762: IFFALSE 76766
// exit ;
76764: GO 76908
// enable_addtolog := true ;
76766: LD_ADDR_OWVAR 81
76770: PUSH
76771: LD_INT 1
76773: ST_TO_ADDR
// AddToLog ( [ ) ;
76774: LD_STRING [
76776: PPUSH
76777: CALL_OW 561
// for i in tmp do
76781: LD_ADDR_VAR 0 3
76785: PUSH
76786: LD_VAR 0 4
76790: PUSH
76791: FOR_IN
76792: IFFALSE 76899
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76794: LD_STRING [
76796: PUSH
76797: LD_VAR 0 3
76801: PPUSH
76802: CALL_OW 266
76806: STR
76807: PUSH
76808: LD_STRING , 
76810: STR
76811: PUSH
76812: LD_VAR 0 3
76816: PPUSH
76817: CALL_OW 250
76821: STR
76822: PUSH
76823: LD_STRING , 
76825: STR
76826: PUSH
76827: LD_VAR 0 3
76831: PPUSH
76832: CALL_OW 251
76836: STR
76837: PUSH
76838: LD_STRING , 
76840: STR
76841: PUSH
76842: LD_VAR 0 3
76846: PPUSH
76847: CALL_OW 254
76851: STR
76852: PUSH
76853: LD_STRING , 
76855: STR
76856: PUSH
76857: LD_VAR 0 3
76861: PPUSH
76862: LD_INT 1
76864: PPUSH
76865: CALL_OW 268
76869: STR
76870: PUSH
76871: LD_STRING , 
76873: STR
76874: PUSH
76875: LD_VAR 0 3
76879: PPUSH
76880: LD_INT 2
76882: PPUSH
76883: CALL_OW 268
76887: STR
76888: PUSH
76889: LD_STRING ],
76891: STR
76892: PPUSH
76893: CALL_OW 561
// end ;
76897: GO 76791
76899: POP
76900: POP
// AddToLog ( ]; ) ;
76901: LD_STRING ];
76903: PPUSH
76904: CALL_OW 561
// end ;
76908: LD_VAR 0 2
76912: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76913: LD_INT 0
76915: PPUSH
76916: PPUSH
76917: PPUSH
76918: PPUSH
76919: PPUSH
// if not area or not rate or not max then
76920: LD_VAR 0 1
76924: NOT
76925: PUSH
76926: LD_VAR 0 2
76930: NOT
76931: OR
76932: PUSH
76933: LD_VAR 0 4
76937: NOT
76938: OR
76939: IFFALSE 76943
// exit ;
76941: GO 77132
// while 1 do
76943: LD_INT 1
76945: IFFALSE 77132
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76947: LD_ADDR_VAR 0 9
76951: PUSH
76952: LD_VAR 0 1
76956: PPUSH
76957: LD_INT 1
76959: PPUSH
76960: CALL_OW 287
76964: PUSH
76965: LD_INT 10
76967: MUL
76968: ST_TO_ADDR
// r := rate / 10 ;
76969: LD_ADDR_VAR 0 7
76973: PUSH
76974: LD_VAR 0 2
76978: PUSH
76979: LD_INT 10
76981: DIVREAL
76982: ST_TO_ADDR
// time := 1 1$00 ;
76983: LD_ADDR_VAR 0 8
76987: PUSH
76988: LD_INT 2100
76990: ST_TO_ADDR
// if amount < min then
76991: LD_VAR 0 9
76995: PUSH
76996: LD_VAR 0 3
77000: LESS
77001: IFFALSE 77019
// r := r * 2 else
77003: LD_ADDR_VAR 0 7
77007: PUSH
77008: LD_VAR 0 7
77012: PUSH
77013: LD_INT 2
77015: MUL
77016: ST_TO_ADDR
77017: GO 77045
// if amount > max then
77019: LD_VAR 0 9
77023: PUSH
77024: LD_VAR 0 4
77028: GREATER
77029: IFFALSE 77045
// r := r / 2 ;
77031: LD_ADDR_VAR 0 7
77035: PUSH
77036: LD_VAR 0 7
77040: PUSH
77041: LD_INT 2
77043: DIVREAL
77044: ST_TO_ADDR
// time := time / r ;
77045: LD_ADDR_VAR 0 8
77049: PUSH
77050: LD_VAR 0 8
77054: PUSH
77055: LD_VAR 0 7
77059: DIVREAL
77060: ST_TO_ADDR
// if time < 0 then
77061: LD_VAR 0 8
77065: PUSH
77066: LD_INT 0
77068: LESS
77069: IFFALSE 77086
// time := time * - 1 ;
77071: LD_ADDR_VAR 0 8
77075: PUSH
77076: LD_VAR 0 8
77080: PUSH
77081: LD_INT 1
77083: NEG
77084: MUL
77085: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77086: LD_VAR 0 8
77090: PUSH
77091: LD_INT 35
77093: PPUSH
77094: LD_INT 875
77096: PPUSH
77097: CALL_OW 12
77101: PLUS
77102: PPUSH
77103: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77107: LD_INT 1
77109: PPUSH
77110: LD_INT 5
77112: PPUSH
77113: CALL_OW 12
77117: PPUSH
77118: LD_VAR 0 1
77122: PPUSH
77123: LD_INT 1
77125: PPUSH
77126: CALL_OW 55
// end ;
77130: GO 76943
// end ;
77132: LD_VAR 0 5
77136: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77137: LD_INT 0
77139: PPUSH
77140: PPUSH
77141: PPUSH
77142: PPUSH
77143: PPUSH
77144: PPUSH
77145: PPUSH
77146: PPUSH
// if not turrets or not factories then
77147: LD_VAR 0 1
77151: NOT
77152: PUSH
77153: LD_VAR 0 2
77157: NOT
77158: OR
77159: IFFALSE 77163
// exit ;
77161: GO 77470
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77163: LD_ADDR_VAR 0 10
77167: PUSH
77168: LD_INT 5
77170: PUSH
77171: LD_INT 6
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: LD_INT 2
77180: PUSH
77181: LD_INT 4
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PUSH
77188: LD_INT 3
77190: PUSH
77191: LD_INT 5
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: PUSH
77198: EMPTY
77199: LIST
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 24
77205: PUSH
77206: LD_INT 25
77208: PUSH
77209: EMPTY
77210: LIST
77211: LIST
77212: PUSH
77213: LD_INT 23
77215: PUSH
77216: LD_INT 27
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 42
77229: PUSH
77230: LD_INT 43
77232: PUSH
77233: EMPTY
77234: LIST
77235: LIST
77236: PUSH
77237: LD_INT 44
77239: PUSH
77240: LD_INT 46
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: PUSH
77247: LD_INT 45
77249: PUSH
77250: LD_INT 47
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: LIST
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: LIST
77266: ST_TO_ADDR
// result := [ ] ;
77267: LD_ADDR_VAR 0 3
77271: PUSH
77272: EMPTY
77273: ST_TO_ADDR
// for i in turrets do
77274: LD_ADDR_VAR 0 4
77278: PUSH
77279: LD_VAR 0 1
77283: PUSH
77284: FOR_IN
77285: IFFALSE 77468
// begin nat := GetNation ( i ) ;
77287: LD_ADDR_VAR 0 7
77291: PUSH
77292: LD_VAR 0 4
77296: PPUSH
77297: CALL_OW 248
77301: ST_TO_ADDR
// weapon := 0 ;
77302: LD_ADDR_VAR 0 8
77306: PUSH
77307: LD_INT 0
77309: ST_TO_ADDR
// if not nat then
77310: LD_VAR 0 7
77314: NOT
77315: IFFALSE 77319
// continue ;
77317: GO 77284
// for j in list [ nat ] do
77319: LD_ADDR_VAR 0 5
77323: PUSH
77324: LD_VAR 0 10
77328: PUSH
77329: LD_VAR 0 7
77333: ARRAY
77334: PUSH
77335: FOR_IN
77336: IFFALSE 77377
// if GetBWeapon ( i ) = j [ 1 ] then
77338: LD_VAR 0 4
77342: PPUSH
77343: CALL_OW 269
77347: PUSH
77348: LD_VAR 0 5
77352: PUSH
77353: LD_INT 1
77355: ARRAY
77356: EQUAL
77357: IFFALSE 77375
// begin weapon := j [ 2 ] ;
77359: LD_ADDR_VAR 0 8
77363: PUSH
77364: LD_VAR 0 5
77368: PUSH
77369: LD_INT 2
77371: ARRAY
77372: ST_TO_ADDR
// break ;
77373: GO 77377
// end ;
77375: GO 77335
77377: POP
77378: POP
// if not weapon then
77379: LD_VAR 0 8
77383: NOT
77384: IFFALSE 77388
// continue ;
77386: GO 77284
// for k in factories do
77388: LD_ADDR_VAR 0 6
77392: PUSH
77393: LD_VAR 0 2
77397: PUSH
77398: FOR_IN
77399: IFFALSE 77464
// begin weapons := AvailableWeaponList ( k ) ;
77401: LD_ADDR_VAR 0 9
77405: PUSH
77406: LD_VAR 0 6
77410: PPUSH
77411: CALL_OW 478
77415: ST_TO_ADDR
// if not weapons then
77416: LD_VAR 0 9
77420: NOT
77421: IFFALSE 77425
// continue ;
77423: GO 77398
// if weapon in weapons then
77425: LD_VAR 0 8
77429: PUSH
77430: LD_VAR 0 9
77434: IN
77435: IFFALSE 77462
// begin result := [ i , weapon ] ;
77437: LD_ADDR_VAR 0 3
77441: PUSH
77442: LD_VAR 0 4
77446: PUSH
77447: LD_VAR 0 8
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: ST_TO_ADDR
// exit ;
77456: POP
77457: POP
77458: POP
77459: POP
77460: GO 77470
// end ; end ;
77462: GO 77398
77464: POP
77465: POP
// end ;
77466: GO 77284
77468: POP
77469: POP
// end ;
77470: LD_VAR 0 3
77474: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77475: LD_INT 0
77477: PPUSH
// if not side or side > 8 then
77478: LD_VAR 0 3
77482: NOT
77483: PUSH
77484: LD_VAR 0 3
77488: PUSH
77489: LD_INT 8
77491: GREATER
77492: OR
77493: IFFALSE 77497
// exit ;
77495: GO 77556
// if not range then
77497: LD_VAR 0 4
77501: NOT
77502: IFFALSE 77513
// range := - 12 ;
77504: LD_ADDR_VAR 0 4
77508: PUSH
77509: LD_INT 12
77511: NEG
77512: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77513: LD_VAR 0 1
77517: PPUSH
77518: LD_VAR 0 2
77522: PPUSH
77523: LD_VAR 0 3
77527: PPUSH
77528: LD_VAR 0 4
77532: PPUSH
77533: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77537: LD_VAR 0 1
77541: PPUSH
77542: LD_VAR 0 2
77546: PPUSH
77547: LD_VAR 0 3
77551: PPUSH
77552: CALL_OW 331
// end ;
77556: LD_VAR 0 5
77560: RET
// export function Video ( mode ) ; begin
77561: LD_INT 0
77563: PPUSH
// ingame_video = mode ;
77564: LD_ADDR_OWVAR 52
77568: PUSH
77569: LD_VAR 0 1
77573: ST_TO_ADDR
// interface_hidden = mode ;
77574: LD_ADDR_OWVAR 54
77578: PUSH
77579: LD_VAR 0 1
77583: ST_TO_ADDR
// end ;
77584: LD_VAR 0 2
77588: RET
// export function Join ( array , element ) ; begin
77589: LD_INT 0
77591: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77592: LD_ADDR_VAR 0 3
77596: PUSH
77597: LD_VAR 0 1
77601: PPUSH
77602: LD_VAR 0 1
77606: PUSH
77607: LD_INT 1
77609: PLUS
77610: PPUSH
77611: LD_VAR 0 2
77615: PPUSH
77616: CALL_OW 1
77620: ST_TO_ADDR
// end ;
77621: LD_VAR 0 3
77625: RET
// export function JoinUnion ( array , element ) ; begin
77626: LD_INT 0
77628: PPUSH
// result := array union element ;
77629: LD_ADDR_VAR 0 3
77633: PUSH
77634: LD_VAR 0 1
77638: PUSH
77639: LD_VAR 0 2
77643: UNION
77644: ST_TO_ADDR
// end ;
77645: LD_VAR 0 3
77649: RET
// export function GetBehemoths ( side ) ; begin
77650: LD_INT 0
77652: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77653: LD_ADDR_VAR 0 2
77657: PUSH
77658: LD_INT 22
77660: PUSH
77661: LD_VAR 0 1
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PUSH
77670: LD_INT 31
77672: PUSH
77673: LD_INT 25
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PPUSH
77684: CALL_OW 69
77688: ST_TO_ADDR
// end ;
77689: LD_VAR 0 2
77693: RET
// export function Shuffle ( array ) ; var i , index ; begin
77694: LD_INT 0
77696: PPUSH
77697: PPUSH
77698: PPUSH
// result := [ ] ;
77699: LD_ADDR_VAR 0 2
77703: PUSH
77704: EMPTY
77705: ST_TO_ADDR
// if not array then
77706: LD_VAR 0 1
77710: NOT
77711: IFFALSE 77715
// exit ;
77713: GO 77814
// Randomize ;
77715: CALL_OW 10
// for i = array downto 1 do
77719: LD_ADDR_VAR 0 3
77723: PUSH
77724: DOUBLE
77725: LD_VAR 0 1
77729: INC
77730: ST_TO_ADDR
77731: LD_INT 1
77733: PUSH
77734: FOR_DOWNTO
77735: IFFALSE 77812
// begin index := rand ( 1 , array ) ;
77737: LD_ADDR_VAR 0 4
77741: PUSH
77742: LD_INT 1
77744: PPUSH
77745: LD_VAR 0 1
77749: PPUSH
77750: CALL_OW 12
77754: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77755: LD_ADDR_VAR 0 2
77759: PUSH
77760: LD_VAR 0 2
77764: PPUSH
77765: LD_VAR 0 2
77769: PUSH
77770: LD_INT 1
77772: PLUS
77773: PPUSH
77774: LD_VAR 0 1
77778: PUSH
77779: LD_VAR 0 4
77783: ARRAY
77784: PPUSH
77785: CALL_OW 2
77789: ST_TO_ADDR
// array := Delete ( array , index ) ;
77790: LD_ADDR_VAR 0 1
77794: PUSH
77795: LD_VAR 0 1
77799: PPUSH
77800: LD_VAR 0 4
77804: PPUSH
77805: CALL_OW 3
77809: ST_TO_ADDR
// end ;
77810: GO 77734
77812: POP
77813: POP
// end ;
77814: LD_VAR 0 2
77818: RET
// export function GetBaseMaterials ( base ) ; begin
77819: LD_INT 0
77821: PPUSH
// result := [ 0 , 0 , 0 ] ;
77822: LD_ADDR_VAR 0 2
77826: PUSH
77827: LD_INT 0
77829: PUSH
77830: LD_INT 0
77832: PUSH
77833: LD_INT 0
77835: PUSH
77836: EMPTY
77837: LIST
77838: LIST
77839: LIST
77840: ST_TO_ADDR
// if not base then
77841: LD_VAR 0 1
77845: NOT
77846: IFFALSE 77850
// exit ;
77848: GO 77899
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77850: LD_ADDR_VAR 0 2
77854: PUSH
77855: LD_VAR 0 1
77859: PPUSH
77860: LD_INT 1
77862: PPUSH
77863: CALL_OW 275
77867: PUSH
77868: LD_VAR 0 1
77872: PPUSH
77873: LD_INT 2
77875: PPUSH
77876: CALL_OW 275
77880: PUSH
77881: LD_VAR 0 1
77885: PPUSH
77886: LD_INT 3
77888: PPUSH
77889: CALL_OW 275
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: LIST
77898: ST_TO_ADDR
// end ;
77899: LD_VAR 0 2
77903: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77904: LD_INT 0
77906: PPUSH
77907: PPUSH
// result := array ;
77908: LD_ADDR_VAR 0 3
77912: PUSH
77913: LD_VAR 0 1
77917: ST_TO_ADDR
// if size >= result then
77918: LD_VAR 0 2
77922: PUSH
77923: LD_VAR 0 3
77927: GREATEREQUAL
77928: IFFALSE 77932
// exit ;
77930: GO 77982
// if size then
77932: LD_VAR 0 2
77936: IFFALSE 77982
// for i := array downto size do
77938: LD_ADDR_VAR 0 4
77942: PUSH
77943: DOUBLE
77944: LD_VAR 0 1
77948: INC
77949: ST_TO_ADDR
77950: LD_VAR 0 2
77954: PUSH
77955: FOR_DOWNTO
77956: IFFALSE 77980
// result := Delete ( result , result ) ;
77958: LD_ADDR_VAR 0 3
77962: PUSH
77963: LD_VAR 0 3
77967: PPUSH
77968: LD_VAR 0 3
77972: PPUSH
77973: CALL_OW 3
77977: ST_TO_ADDR
77978: GO 77955
77980: POP
77981: POP
// end ;
77982: LD_VAR 0 3
77986: RET
// export function ComExit ( unit ) ; var tmp ; begin
77987: LD_INT 0
77989: PPUSH
77990: PPUSH
// if not IsInUnit ( unit ) then
77991: LD_VAR 0 1
77995: PPUSH
77996: CALL_OW 310
78000: NOT
78001: IFFALSE 78005
// exit ;
78003: GO 78065
// tmp := IsInUnit ( unit ) ;
78005: LD_ADDR_VAR 0 3
78009: PUSH
78010: LD_VAR 0 1
78014: PPUSH
78015: CALL_OW 310
78019: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78020: LD_VAR 0 3
78024: PPUSH
78025: CALL_OW 247
78029: PUSH
78030: LD_INT 2
78032: EQUAL
78033: IFFALSE 78046
// ComExitVehicle ( unit ) else
78035: LD_VAR 0 1
78039: PPUSH
78040: CALL_OW 121
78044: GO 78055
// ComExitBuilding ( unit ) ;
78046: LD_VAR 0 1
78050: PPUSH
78051: CALL_OW 122
// result := tmp ;
78055: LD_ADDR_VAR 0 2
78059: PUSH
78060: LD_VAR 0 3
78064: ST_TO_ADDR
// end ;
78065: LD_VAR 0 2
78069: RET
// export function ComExitAll ( units ) ; var i ; begin
78070: LD_INT 0
78072: PPUSH
78073: PPUSH
// if not units then
78074: LD_VAR 0 1
78078: NOT
78079: IFFALSE 78083
// exit ;
78081: GO 78109
// for i in units do
78083: LD_ADDR_VAR 0 3
78087: PUSH
78088: LD_VAR 0 1
78092: PUSH
78093: FOR_IN
78094: IFFALSE 78107
// ComExit ( i ) ;
78096: LD_VAR 0 3
78100: PPUSH
78101: CALL 77987 0 1
78105: GO 78093
78107: POP
78108: POP
// end ;
78109: LD_VAR 0 2
78113: RET
// export function ResetHc ; begin
78114: LD_INT 0
78116: PPUSH
// InitHc ;
78117: CALL_OW 19
// hc_importance := 0 ;
78121: LD_ADDR_OWVAR 32
78125: PUSH
78126: LD_INT 0
78128: ST_TO_ADDR
// end ;
78129: LD_VAR 0 1
78133: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78134: LD_INT 0
78136: PPUSH
78137: PPUSH
78138: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78139: LD_ADDR_VAR 0 6
78143: PUSH
78144: LD_VAR 0 1
78148: PUSH
78149: LD_VAR 0 3
78153: PLUS
78154: PUSH
78155: LD_INT 2
78157: DIV
78158: ST_TO_ADDR
// if _x < 0 then
78159: LD_VAR 0 6
78163: PUSH
78164: LD_INT 0
78166: LESS
78167: IFFALSE 78184
// _x := _x * - 1 ;
78169: LD_ADDR_VAR 0 6
78173: PUSH
78174: LD_VAR 0 6
78178: PUSH
78179: LD_INT 1
78181: NEG
78182: MUL
78183: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78184: LD_ADDR_VAR 0 7
78188: PUSH
78189: LD_VAR 0 2
78193: PUSH
78194: LD_VAR 0 4
78198: PLUS
78199: PUSH
78200: LD_INT 2
78202: DIV
78203: ST_TO_ADDR
// if _y < 0 then
78204: LD_VAR 0 7
78208: PUSH
78209: LD_INT 0
78211: LESS
78212: IFFALSE 78229
// _y := _y * - 1 ;
78214: LD_ADDR_VAR 0 7
78218: PUSH
78219: LD_VAR 0 7
78223: PUSH
78224: LD_INT 1
78226: NEG
78227: MUL
78228: ST_TO_ADDR
// result := [ _x , _y ] ;
78229: LD_ADDR_VAR 0 5
78233: PUSH
78234: LD_VAR 0 6
78238: PUSH
78239: LD_VAR 0 7
78243: PUSH
78244: EMPTY
78245: LIST
78246: LIST
78247: ST_TO_ADDR
// end ;
78248: LD_VAR 0 5
78252: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78253: LD_INT 0
78255: PPUSH
78256: PPUSH
78257: PPUSH
78258: PPUSH
// task := GetTaskList ( unit ) ;
78259: LD_ADDR_VAR 0 7
78263: PUSH
78264: LD_VAR 0 1
78268: PPUSH
78269: CALL_OW 437
78273: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78274: LD_VAR 0 7
78278: NOT
78279: PUSH
78280: LD_VAR 0 1
78284: PPUSH
78285: LD_VAR 0 2
78289: PPUSH
78290: CALL_OW 308
78294: NOT
78295: AND
78296: IFFALSE 78300
// exit ;
78298: GO 78418
// if IsInArea ( unit , area ) then
78300: LD_VAR 0 1
78304: PPUSH
78305: LD_VAR 0 2
78309: PPUSH
78310: CALL_OW 308
78314: IFFALSE 78332
// begin ComMoveToArea ( unit , goAway ) ;
78316: LD_VAR 0 1
78320: PPUSH
78321: LD_VAR 0 3
78325: PPUSH
78326: CALL_OW 113
// exit ;
78330: GO 78418
// end ; if task [ 1 ] [ 1 ] <> M then
78332: LD_VAR 0 7
78336: PUSH
78337: LD_INT 1
78339: ARRAY
78340: PUSH
78341: LD_INT 1
78343: ARRAY
78344: PUSH
78345: LD_STRING M
78347: NONEQUAL
78348: IFFALSE 78352
// exit ;
78350: GO 78418
// x := task [ 1 ] [ 2 ] ;
78352: LD_ADDR_VAR 0 5
78356: PUSH
78357: LD_VAR 0 7
78361: PUSH
78362: LD_INT 1
78364: ARRAY
78365: PUSH
78366: LD_INT 2
78368: ARRAY
78369: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78370: LD_ADDR_VAR 0 6
78374: PUSH
78375: LD_VAR 0 7
78379: PUSH
78380: LD_INT 1
78382: ARRAY
78383: PUSH
78384: LD_INT 3
78386: ARRAY
78387: ST_TO_ADDR
// if InArea ( x , y , area ) then
78388: LD_VAR 0 5
78392: PPUSH
78393: LD_VAR 0 6
78397: PPUSH
78398: LD_VAR 0 2
78402: PPUSH
78403: CALL_OW 309
78407: IFFALSE 78418
// ComStop ( unit ) ;
78409: LD_VAR 0 1
78413: PPUSH
78414: CALL_OW 141
// end ;
78418: LD_VAR 0 4
78422: RET
// export function Abs ( value ) ; begin
78423: LD_INT 0
78425: PPUSH
// result := value ;
78426: LD_ADDR_VAR 0 2
78430: PUSH
78431: LD_VAR 0 1
78435: ST_TO_ADDR
// if value < 0 then
78436: LD_VAR 0 1
78440: PUSH
78441: LD_INT 0
78443: LESS
78444: IFFALSE 78461
// result := value * - 1 ;
78446: LD_ADDR_VAR 0 2
78450: PUSH
78451: LD_VAR 0 1
78455: PUSH
78456: LD_INT 1
78458: NEG
78459: MUL
78460: ST_TO_ADDR
// end ;
78461: LD_VAR 0 2
78465: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78466: LD_INT 0
78468: PPUSH
78469: PPUSH
78470: PPUSH
78471: PPUSH
78472: PPUSH
78473: PPUSH
78474: PPUSH
78475: PPUSH
// if not unit or not building then
78476: LD_VAR 0 1
78480: NOT
78481: PUSH
78482: LD_VAR 0 2
78486: NOT
78487: OR
78488: IFFALSE 78492
// exit ;
78490: GO 78718
// x := GetX ( building ) ;
78492: LD_ADDR_VAR 0 4
78496: PUSH
78497: LD_VAR 0 2
78501: PPUSH
78502: CALL_OW 250
78506: ST_TO_ADDR
// y := GetY ( building ) ;
78507: LD_ADDR_VAR 0 6
78511: PUSH
78512: LD_VAR 0 2
78516: PPUSH
78517: CALL_OW 251
78521: ST_TO_ADDR
// d := GetDir ( building ) ;
78522: LD_ADDR_VAR 0 8
78526: PUSH
78527: LD_VAR 0 2
78531: PPUSH
78532: CALL_OW 254
78536: ST_TO_ADDR
// r := 4 ;
78537: LD_ADDR_VAR 0 9
78541: PUSH
78542: LD_INT 4
78544: ST_TO_ADDR
// for i := 1 to 5 do
78545: LD_ADDR_VAR 0 10
78549: PUSH
78550: DOUBLE
78551: LD_INT 1
78553: DEC
78554: ST_TO_ADDR
78555: LD_INT 5
78557: PUSH
78558: FOR_TO
78559: IFFALSE 78716
// begin _x := ShiftX ( x , d , r + i ) ;
78561: LD_ADDR_VAR 0 5
78565: PUSH
78566: LD_VAR 0 4
78570: PPUSH
78571: LD_VAR 0 8
78575: PPUSH
78576: LD_VAR 0 9
78580: PUSH
78581: LD_VAR 0 10
78585: PLUS
78586: PPUSH
78587: CALL_OW 272
78591: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78592: LD_ADDR_VAR 0 7
78596: PUSH
78597: LD_VAR 0 6
78601: PPUSH
78602: LD_VAR 0 8
78606: PPUSH
78607: LD_VAR 0 9
78611: PUSH
78612: LD_VAR 0 10
78616: PLUS
78617: PPUSH
78618: CALL_OW 273
78622: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78623: LD_VAR 0 5
78627: PPUSH
78628: LD_VAR 0 7
78632: PPUSH
78633: CALL_OW 488
78637: PUSH
78638: LD_VAR 0 5
78642: PPUSH
78643: LD_VAR 0 7
78647: PPUSH
78648: CALL_OW 428
78652: PPUSH
78653: CALL_OW 247
78657: PUSH
78658: LD_INT 3
78660: PUSH
78661: LD_INT 2
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: IN
78668: NOT
78669: AND
78670: IFFALSE 78714
// begin ComMoveXY ( unit , _x , _y ) ;
78672: LD_VAR 0 1
78676: PPUSH
78677: LD_VAR 0 5
78681: PPUSH
78682: LD_VAR 0 7
78686: PPUSH
78687: CALL_OW 111
// result := [ _x , _y ] ;
78691: LD_ADDR_VAR 0 3
78695: PUSH
78696: LD_VAR 0 5
78700: PUSH
78701: LD_VAR 0 7
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: ST_TO_ADDR
// exit ;
78710: POP
78711: POP
78712: GO 78718
// end ; end ;
78714: GO 78558
78716: POP
78717: POP
// end ;
78718: LD_VAR 0 3
78722: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78723: LD_INT 0
78725: PPUSH
78726: PPUSH
78727: PPUSH
// result := 0 ;
78728: LD_ADDR_VAR 0 3
78732: PUSH
78733: LD_INT 0
78735: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78736: LD_VAR 0 1
78740: PUSH
78741: LD_INT 0
78743: LESS
78744: PUSH
78745: LD_VAR 0 1
78749: PUSH
78750: LD_INT 8
78752: GREATER
78753: OR
78754: PUSH
78755: LD_VAR 0 2
78759: PUSH
78760: LD_INT 0
78762: LESS
78763: OR
78764: PUSH
78765: LD_VAR 0 2
78769: PUSH
78770: LD_INT 8
78772: GREATER
78773: OR
78774: IFFALSE 78778
// exit ;
78776: GO 78853
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78778: LD_ADDR_VAR 0 4
78782: PUSH
78783: LD_INT 22
78785: PUSH
78786: LD_VAR 0 2
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: PPUSH
78795: CALL_OW 69
78799: PUSH
78800: FOR_IN
78801: IFFALSE 78851
// begin un := UnitShoot ( i ) ;
78803: LD_ADDR_VAR 0 5
78807: PUSH
78808: LD_VAR 0 4
78812: PPUSH
78813: CALL_OW 504
78817: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78818: LD_VAR 0 5
78822: PPUSH
78823: CALL_OW 255
78827: PUSH
78828: LD_VAR 0 1
78832: EQUAL
78833: IFFALSE 78849
// begin result := un ;
78835: LD_ADDR_VAR 0 3
78839: PUSH
78840: LD_VAR 0 5
78844: ST_TO_ADDR
// exit ;
78845: POP
78846: POP
78847: GO 78853
// end ; end ;
78849: GO 78800
78851: POP
78852: POP
// end ;
78853: LD_VAR 0 3
78857: RET
// export function GetCargoBay ( units ) ; begin
78858: LD_INT 0
78860: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78861: LD_ADDR_VAR 0 2
78865: PUSH
78866: LD_VAR 0 1
78870: PPUSH
78871: LD_INT 2
78873: PUSH
78874: LD_INT 34
78876: PUSH
78877: LD_INT 12
78879: PUSH
78880: EMPTY
78881: LIST
78882: LIST
78883: PUSH
78884: LD_INT 34
78886: PUSH
78887: LD_INT 51
78889: PUSH
78890: EMPTY
78891: LIST
78892: LIST
78893: PUSH
78894: LD_INT 34
78896: PUSH
78897: LD_INT 32
78899: PUSH
78900: EMPTY
78901: LIST
78902: LIST
78903: PUSH
78904: LD_INT 34
78906: PUSH
78907: LD_INT 89
78909: PUSH
78910: EMPTY
78911: LIST
78912: LIST
78913: PUSH
78914: EMPTY
78915: LIST
78916: LIST
78917: LIST
78918: LIST
78919: LIST
78920: PPUSH
78921: CALL_OW 72
78925: ST_TO_ADDR
// end ;
78926: LD_VAR 0 2
78930: RET
// export function Negate ( value ) ; begin
78931: LD_INT 0
78933: PPUSH
// result := not value ;
78934: LD_ADDR_VAR 0 2
78938: PUSH
78939: LD_VAR 0 1
78943: NOT
78944: ST_TO_ADDR
// end ;
78945: LD_VAR 0 2
78949: RET
// export function Inc ( value ) ; begin
78950: LD_INT 0
78952: PPUSH
// result := value + 1 ;
78953: LD_ADDR_VAR 0 2
78957: PUSH
78958: LD_VAR 0 1
78962: PUSH
78963: LD_INT 1
78965: PLUS
78966: ST_TO_ADDR
// end ;
78967: LD_VAR 0 2
78971: RET
// export function Dec ( value ) ; begin
78972: LD_INT 0
78974: PPUSH
// result := value - 1 ;
78975: LD_ADDR_VAR 0 2
78979: PUSH
78980: LD_VAR 0 1
78984: PUSH
78985: LD_INT 1
78987: MINUS
78988: ST_TO_ADDR
// end ;
78989: LD_VAR 0 2
78993: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78994: LD_INT 0
78996: PPUSH
78997: PPUSH
78998: PPUSH
78999: PPUSH
79000: PPUSH
79001: PPUSH
79002: PPUSH
79003: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79004: LD_VAR 0 1
79008: PPUSH
79009: LD_VAR 0 2
79013: PPUSH
79014: CALL_OW 488
79018: NOT
79019: PUSH
79020: LD_VAR 0 3
79024: PPUSH
79025: LD_VAR 0 4
79029: PPUSH
79030: CALL_OW 488
79034: NOT
79035: OR
79036: IFFALSE 79049
// begin result := - 1 ;
79038: LD_ADDR_VAR 0 5
79042: PUSH
79043: LD_INT 1
79045: NEG
79046: ST_TO_ADDR
// exit ;
79047: GO 79284
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79049: LD_ADDR_VAR 0 12
79053: PUSH
79054: LD_VAR 0 1
79058: PPUSH
79059: LD_VAR 0 2
79063: PPUSH
79064: LD_VAR 0 3
79068: PPUSH
79069: LD_VAR 0 4
79073: PPUSH
79074: CALL 78134 0 4
79078: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79079: LD_ADDR_VAR 0 11
79083: PUSH
79084: LD_VAR 0 1
79088: PPUSH
79089: LD_VAR 0 2
79093: PPUSH
79094: LD_VAR 0 12
79098: PUSH
79099: LD_INT 1
79101: ARRAY
79102: PPUSH
79103: LD_VAR 0 12
79107: PUSH
79108: LD_INT 2
79110: ARRAY
79111: PPUSH
79112: CALL_OW 298
79116: ST_TO_ADDR
// distance := 9999 ;
79117: LD_ADDR_VAR 0 10
79121: PUSH
79122: LD_INT 9999
79124: ST_TO_ADDR
// for i := 0 to 5 do
79125: LD_ADDR_VAR 0 6
79129: PUSH
79130: DOUBLE
79131: LD_INT 0
79133: DEC
79134: ST_TO_ADDR
79135: LD_INT 5
79137: PUSH
79138: FOR_TO
79139: IFFALSE 79282
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79141: LD_ADDR_VAR 0 7
79145: PUSH
79146: LD_VAR 0 1
79150: PPUSH
79151: LD_VAR 0 6
79155: PPUSH
79156: LD_VAR 0 11
79160: PPUSH
79161: CALL_OW 272
79165: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79166: LD_ADDR_VAR 0 8
79170: PUSH
79171: LD_VAR 0 2
79175: PPUSH
79176: LD_VAR 0 6
79180: PPUSH
79181: LD_VAR 0 11
79185: PPUSH
79186: CALL_OW 273
79190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79191: LD_VAR 0 7
79195: PPUSH
79196: LD_VAR 0 8
79200: PPUSH
79201: CALL_OW 488
79205: NOT
79206: IFFALSE 79210
// continue ;
79208: GO 79138
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79210: LD_ADDR_VAR 0 9
79214: PUSH
79215: LD_VAR 0 12
79219: PUSH
79220: LD_INT 1
79222: ARRAY
79223: PPUSH
79224: LD_VAR 0 12
79228: PUSH
79229: LD_INT 2
79231: ARRAY
79232: PPUSH
79233: LD_VAR 0 7
79237: PPUSH
79238: LD_VAR 0 8
79242: PPUSH
79243: CALL_OW 298
79247: ST_TO_ADDR
// if tmp < distance then
79248: LD_VAR 0 9
79252: PUSH
79253: LD_VAR 0 10
79257: LESS
79258: IFFALSE 79280
// begin result := i ;
79260: LD_ADDR_VAR 0 5
79264: PUSH
79265: LD_VAR 0 6
79269: ST_TO_ADDR
// distance := tmp ;
79270: LD_ADDR_VAR 0 10
79274: PUSH
79275: LD_VAR 0 9
79279: ST_TO_ADDR
// end ; end ;
79280: GO 79138
79282: POP
79283: POP
// end ;
79284: LD_VAR 0 5
79288: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79289: LD_INT 0
79291: PPUSH
79292: PPUSH
// if not driver or not IsInUnit ( driver ) then
79293: LD_VAR 0 1
79297: NOT
79298: PUSH
79299: LD_VAR 0 1
79303: PPUSH
79304: CALL_OW 310
79308: NOT
79309: OR
79310: IFFALSE 79314
// exit ;
79312: GO 79404
// vehicle := IsInUnit ( driver ) ;
79314: LD_ADDR_VAR 0 3
79318: PUSH
79319: LD_VAR 0 1
79323: PPUSH
79324: CALL_OW 310
79328: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79329: LD_VAR 0 1
79333: PPUSH
79334: LD_STRING \
79336: PUSH
79337: LD_INT 0
79339: PUSH
79340: LD_INT 0
79342: PUSH
79343: LD_INT 0
79345: PUSH
79346: LD_INT 0
79348: PUSH
79349: LD_INT 0
79351: PUSH
79352: LD_INT 0
79354: PUSH
79355: EMPTY
79356: LIST
79357: LIST
79358: LIST
79359: LIST
79360: LIST
79361: LIST
79362: LIST
79363: PUSH
79364: LD_STRING E
79366: PUSH
79367: LD_INT 0
79369: PUSH
79370: LD_INT 0
79372: PUSH
79373: LD_VAR 0 3
79377: PUSH
79378: LD_INT 0
79380: PUSH
79381: LD_INT 0
79383: PUSH
79384: LD_INT 0
79386: PUSH
79387: EMPTY
79388: LIST
79389: LIST
79390: LIST
79391: LIST
79392: LIST
79393: LIST
79394: LIST
79395: PUSH
79396: EMPTY
79397: LIST
79398: LIST
79399: PPUSH
79400: CALL_OW 446
// end ;
79404: LD_VAR 0 2
79408: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79409: LD_INT 0
79411: PPUSH
79412: PPUSH
// if not driver or not IsInUnit ( driver ) then
79413: LD_VAR 0 1
79417: NOT
79418: PUSH
79419: LD_VAR 0 1
79423: PPUSH
79424: CALL_OW 310
79428: NOT
79429: OR
79430: IFFALSE 79434
// exit ;
79432: GO 79524
// vehicle := IsInUnit ( driver ) ;
79434: LD_ADDR_VAR 0 3
79438: PUSH
79439: LD_VAR 0 1
79443: PPUSH
79444: CALL_OW 310
79448: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79449: LD_VAR 0 1
79453: PPUSH
79454: LD_STRING \
79456: PUSH
79457: LD_INT 0
79459: PUSH
79460: LD_INT 0
79462: PUSH
79463: LD_INT 0
79465: PUSH
79466: LD_INT 0
79468: PUSH
79469: LD_INT 0
79471: PUSH
79472: LD_INT 0
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: PUSH
79484: LD_STRING E
79486: PUSH
79487: LD_INT 0
79489: PUSH
79490: LD_INT 0
79492: PUSH
79493: LD_VAR 0 3
79497: PUSH
79498: LD_INT 0
79500: PUSH
79501: LD_INT 0
79503: PUSH
79504: LD_INT 0
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: LIST
79511: LIST
79512: LIST
79513: LIST
79514: LIST
79515: PUSH
79516: EMPTY
79517: LIST
79518: LIST
79519: PPUSH
79520: CALL_OW 447
// end ;
79524: LD_VAR 0 2
79528: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79529: LD_INT 0
79531: PPUSH
79532: PPUSH
79533: PPUSH
// tmp := [ ] ;
79534: LD_ADDR_VAR 0 5
79538: PUSH
79539: EMPTY
79540: ST_TO_ADDR
// for i in units do
79541: LD_ADDR_VAR 0 4
79545: PUSH
79546: LD_VAR 0 1
79550: PUSH
79551: FOR_IN
79552: IFFALSE 79590
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79554: LD_ADDR_VAR 0 5
79558: PUSH
79559: LD_VAR 0 5
79563: PPUSH
79564: LD_VAR 0 5
79568: PUSH
79569: LD_INT 1
79571: PLUS
79572: PPUSH
79573: LD_VAR 0 4
79577: PPUSH
79578: CALL_OW 256
79582: PPUSH
79583: CALL_OW 2
79587: ST_TO_ADDR
79588: GO 79551
79590: POP
79591: POP
// if not tmp then
79592: LD_VAR 0 5
79596: NOT
79597: IFFALSE 79601
// exit ;
79599: GO 79649
// if asc then
79601: LD_VAR 0 2
79605: IFFALSE 79629
// result := SortListByListAsc ( units , tmp ) else
79607: LD_ADDR_VAR 0 3
79611: PUSH
79612: LD_VAR 0 1
79616: PPUSH
79617: LD_VAR 0 5
79621: PPUSH
79622: CALL_OW 76
79626: ST_TO_ADDR
79627: GO 79649
// result := SortListByListDesc ( units , tmp ) ;
79629: LD_ADDR_VAR 0 3
79633: PUSH
79634: LD_VAR 0 1
79638: PPUSH
79639: LD_VAR 0 5
79643: PPUSH
79644: CALL_OW 77
79648: ST_TO_ADDR
// end ;
79649: LD_VAR 0 3
79653: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79654: LD_INT 0
79656: PPUSH
79657: PPUSH
// task := GetTaskList ( mech ) ;
79658: LD_ADDR_VAR 0 4
79662: PUSH
79663: LD_VAR 0 1
79667: PPUSH
79668: CALL_OW 437
79672: ST_TO_ADDR
// if not task then
79673: LD_VAR 0 4
79677: NOT
79678: IFFALSE 79682
// exit ;
79680: GO 79724
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79682: LD_ADDR_VAR 0 3
79686: PUSH
79687: LD_VAR 0 4
79691: PUSH
79692: LD_INT 1
79694: ARRAY
79695: PUSH
79696: LD_INT 1
79698: ARRAY
79699: PUSH
79700: LD_STRING r
79702: EQUAL
79703: PUSH
79704: LD_VAR 0 4
79708: PUSH
79709: LD_INT 1
79711: ARRAY
79712: PUSH
79713: LD_INT 4
79715: ARRAY
79716: PUSH
79717: LD_VAR 0 2
79721: EQUAL
79722: AND
79723: ST_TO_ADDR
// end ;
79724: LD_VAR 0 3
79728: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79729: LD_INT 0
79731: PPUSH
// SetDir ( unit , d ) ;
79732: LD_VAR 0 1
79736: PPUSH
79737: LD_VAR 0 4
79741: PPUSH
79742: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79746: LD_VAR 0 1
79750: PPUSH
79751: LD_VAR 0 2
79755: PPUSH
79756: LD_VAR 0 3
79760: PPUSH
79761: LD_VAR 0 5
79765: PPUSH
79766: CALL_OW 48
// end ;
79770: LD_VAR 0 6
79774: RET
// export function ToNaturalNumber ( number ) ; begin
79775: LD_INT 0
79777: PPUSH
// result := number div 1 ;
79778: LD_ADDR_VAR 0 2
79782: PUSH
79783: LD_VAR 0 1
79787: PUSH
79788: LD_INT 1
79790: DIV
79791: ST_TO_ADDR
// if number < 0 then
79792: LD_VAR 0 1
79796: PUSH
79797: LD_INT 0
79799: LESS
79800: IFFALSE 79810
// result := 0 ;
79802: LD_ADDR_VAR 0 2
79806: PUSH
79807: LD_INT 0
79809: ST_TO_ADDR
// end ;
79810: LD_VAR 0 2
79814: RET
// export function SortByClass ( units , class ) ; var un ; begin
79815: LD_INT 0
79817: PPUSH
79818: PPUSH
// if not units or not class then
79819: LD_VAR 0 1
79823: NOT
79824: PUSH
79825: LD_VAR 0 2
79829: NOT
79830: OR
79831: IFFALSE 79835
// exit ;
79833: GO 79930
// result := [ ] ;
79835: LD_ADDR_VAR 0 3
79839: PUSH
79840: EMPTY
79841: ST_TO_ADDR
// for un in units do
79842: LD_ADDR_VAR 0 4
79846: PUSH
79847: LD_VAR 0 1
79851: PUSH
79852: FOR_IN
79853: IFFALSE 79928
// if GetClass ( un ) = class then
79855: LD_VAR 0 4
79859: PPUSH
79860: CALL_OW 257
79864: PUSH
79865: LD_VAR 0 2
79869: EQUAL
79870: IFFALSE 79897
// result := Insert ( result , 1 , un ) else
79872: LD_ADDR_VAR 0 3
79876: PUSH
79877: LD_VAR 0 3
79881: PPUSH
79882: LD_INT 1
79884: PPUSH
79885: LD_VAR 0 4
79889: PPUSH
79890: CALL_OW 2
79894: ST_TO_ADDR
79895: GO 79926
// result := Replace ( result , result + 1 , un ) ;
79897: LD_ADDR_VAR 0 3
79901: PUSH
79902: LD_VAR 0 3
79906: PPUSH
79907: LD_VAR 0 3
79911: PUSH
79912: LD_INT 1
79914: PLUS
79915: PPUSH
79916: LD_VAR 0 4
79920: PPUSH
79921: CALL_OW 1
79925: ST_TO_ADDR
79926: GO 79852
79928: POP
79929: POP
// end ;
79930: LD_VAR 0 3
79934: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79935: LD_INT 0
79937: PPUSH
79938: PPUSH
79939: PPUSH
79940: PPUSH
79941: PPUSH
79942: PPUSH
79943: PPUSH
// result := [ ] ;
79944: LD_ADDR_VAR 0 4
79948: PUSH
79949: EMPTY
79950: ST_TO_ADDR
// if x - r < 0 then
79951: LD_VAR 0 1
79955: PUSH
79956: LD_VAR 0 3
79960: MINUS
79961: PUSH
79962: LD_INT 0
79964: LESS
79965: IFFALSE 79977
// min_x := 0 else
79967: LD_ADDR_VAR 0 8
79971: PUSH
79972: LD_INT 0
79974: ST_TO_ADDR
79975: GO 79993
// min_x := x - r ;
79977: LD_ADDR_VAR 0 8
79981: PUSH
79982: LD_VAR 0 1
79986: PUSH
79987: LD_VAR 0 3
79991: MINUS
79992: ST_TO_ADDR
// if y - r < 0 then
79993: LD_VAR 0 2
79997: PUSH
79998: LD_VAR 0 3
80002: MINUS
80003: PUSH
80004: LD_INT 0
80006: LESS
80007: IFFALSE 80019
// min_y := 0 else
80009: LD_ADDR_VAR 0 7
80013: PUSH
80014: LD_INT 0
80016: ST_TO_ADDR
80017: GO 80035
// min_y := y - r ;
80019: LD_ADDR_VAR 0 7
80023: PUSH
80024: LD_VAR 0 2
80028: PUSH
80029: LD_VAR 0 3
80033: MINUS
80034: ST_TO_ADDR
// max_x := x + r ;
80035: LD_ADDR_VAR 0 9
80039: PUSH
80040: LD_VAR 0 1
80044: PUSH
80045: LD_VAR 0 3
80049: PLUS
80050: ST_TO_ADDR
// max_y := y + r ;
80051: LD_ADDR_VAR 0 10
80055: PUSH
80056: LD_VAR 0 2
80060: PUSH
80061: LD_VAR 0 3
80065: PLUS
80066: ST_TO_ADDR
// for _x = min_x to max_x do
80067: LD_ADDR_VAR 0 5
80071: PUSH
80072: DOUBLE
80073: LD_VAR 0 8
80077: DEC
80078: ST_TO_ADDR
80079: LD_VAR 0 9
80083: PUSH
80084: FOR_TO
80085: IFFALSE 80186
// for _y = min_y to max_y do
80087: LD_ADDR_VAR 0 6
80091: PUSH
80092: DOUBLE
80093: LD_VAR 0 7
80097: DEC
80098: ST_TO_ADDR
80099: LD_VAR 0 10
80103: PUSH
80104: FOR_TO
80105: IFFALSE 80182
// begin if not ValidHex ( _x , _y ) then
80107: LD_VAR 0 5
80111: PPUSH
80112: LD_VAR 0 6
80116: PPUSH
80117: CALL_OW 488
80121: NOT
80122: IFFALSE 80126
// continue ;
80124: GO 80104
// if GetResourceTypeXY ( _x , _y ) then
80126: LD_VAR 0 5
80130: PPUSH
80131: LD_VAR 0 6
80135: PPUSH
80136: CALL_OW 283
80140: IFFALSE 80180
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80142: LD_ADDR_VAR 0 4
80146: PUSH
80147: LD_VAR 0 4
80151: PPUSH
80152: LD_VAR 0 4
80156: PUSH
80157: LD_INT 1
80159: PLUS
80160: PPUSH
80161: LD_VAR 0 5
80165: PUSH
80166: LD_VAR 0 6
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: PPUSH
80175: CALL_OW 1
80179: ST_TO_ADDR
// end ;
80180: GO 80104
80182: POP
80183: POP
80184: GO 80084
80186: POP
80187: POP
// end ;
80188: LD_VAR 0 4
80192: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80193: LD_INT 0
80195: PPUSH
80196: PPUSH
80197: PPUSH
80198: PPUSH
80199: PPUSH
80200: PPUSH
80201: PPUSH
80202: PPUSH
// if not units then
80203: LD_VAR 0 1
80207: NOT
80208: IFFALSE 80212
// exit ;
80210: GO 80736
// result := UnitFilter ( units , [ f_ok ] ) ;
80212: LD_ADDR_VAR 0 3
80216: PUSH
80217: LD_VAR 0 1
80221: PPUSH
80222: LD_INT 50
80224: PUSH
80225: EMPTY
80226: LIST
80227: PPUSH
80228: CALL_OW 72
80232: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80233: LD_ADDR_VAR 0 8
80237: PUSH
80238: LD_VAR 0 1
80242: PUSH
80243: LD_INT 1
80245: ARRAY
80246: PPUSH
80247: CALL_OW 255
80251: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80252: LD_ADDR_VAR 0 10
80256: PUSH
80257: LD_INT 29
80259: PUSH
80260: LD_INT 91
80262: PUSH
80263: LD_INT 49
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: LIST
80270: ST_TO_ADDR
// if not result then
80271: LD_VAR 0 3
80275: NOT
80276: IFFALSE 80280
// exit ;
80278: GO 80736
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80280: LD_ADDR_VAR 0 5
80284: PUSH
80285: LD_INT 81
80287: PUSH
80288: LD_VAR 0 8
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PPUSH
80297: CALL_OW 69
80301: ST_TO_ADDR
// for i in result do
80302: LD_ADDR_VAR 0 4
80306: PUSH
80307: LD_VAR 0 3
80311: PUSH
80312: FOR_IN
80313: IFFALSE 80734
// begin tag := GetTag ( i ) + 1 ;
80315: LD_ADDR_VAR 0 9
80319: PUSH
80320: LD_VAR 0 4
80324: PPUSH
80325: CALL_OW 110
80329: PUSH
80330: LD_INT 1
80332: PLUS
80333: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80334: LD_ADDR_VAR 0 7
80338: PUSH
80339: LD_VAR 0 4
80343: PPUSH
80344: CALL_OW 250
80348: PPUSH
80349: LD_VAR 0 4
80353: PPUSH
80354: CALL_OW 251
80358: PPUSH
80359: LD_INT 6
80361: PPUSH
80362: CALL 79935 0 3
80366: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80367: LD_VAR 0 4
80371: PPUSH
80372: CALL_OW 247
80376: PUSH
80377: LD_INT 2
80379: EQUAL
80380: PUSH
80381: LD_VAR 0 7
80385: AND
80386: PUSH
80387: LD_VAR 0 4
80391: PPUSH
80392: CALL_OW 264
80396: PUSH
80397: LD_VAR 0 10
80401: IN
80402: NOT
80403: AND
80404: IFFALSE 80443
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80406: LD_VAR 0 4
80410: PPUSH
80411: LD_VAR 0 7
80415: PUSH
80416: LD_INT 1
80418: ARRAY
80419: PUSH
80420: LD_INT 1
80422: ARRAY
80423: PPUSH
80424: LD_VAR 0 7
80428: PUSH
80429: LD_INT 1
80431: ARRAY
80432: PUSH
80433: LD_INT 2
80435: ARRAY
80436: PPUSH
80437: CALL_OW 116
80441: GO 80732
// if path > tag then
80443: LD_VAR 0 2
80447: PUSH
80448: LD_VAR 0 9
80452: GREATER
80453: IFFALSE 80661
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80455: LD_ADDR_VAR 0 6
80459: PUSH
80460: LD_VAR 0 5
80464: PPUSH
80465: LD_INT 91
80467: PUSH
80468: LD_VAR 0 4
80472: PUSH
80473: LD_INT 8
80475: PUSH
80476: EMPTY
80477: LIST
80478: LIST
80479: LIST
80480: PPUSH
80481: CALL_OW 72
80485: ST_TO_ADDR
// if nearEnemy then
80486: LD_VAR 0 6
80490: IFFALSE 80559
// begin if GetWeapon ( i ) = ru_time_lapser then
80492: LD_VAR 0 4
80496: PPUSH
80497: CALL_OW 264
80501: PUSH
80502: LD_INT 49
80504: EQUAL
80505: IFFALSE 80533
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80507: LD_VAR 0 4
80511: PPUSH
80512: LD_VAR 0 6
80516: PPUSH
80517: LD_VAR 0 4
80521: PPUSH
80522: CALL_OW 74
80526: PPUSH
80527: CALL_OW 112
80531: GO 80557
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80533: LD_VAR 0 4
80537: PPUSH
80538: LD_VAR 0 6
80542: PPUSH
80543: LD_VAR 0 4
80547: PPUSH
80548: CALL_OW 74
80552: PPUSH
80553: CALL_OW 115
// end else
80557: GO 80659
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80559: LD_VAR 0 4
80563: PPUSH
80564: LD_VAR 0 2
80568: PUSH
80569: LD_VAR 0 9
80573: ARRAY
80574: PUSH
80575: LD_INT 1
80577: ARRAY
80578: PPUSH
80579: LD_VAR 0 2
80583: PUSH
80584: LD_VAR 0 9
80588: ARRAY
80589: PUSH
80590: LD_INT 2
80592: ARRAY
80593: PPUSH
80594: CALL_OW 297
80598: PUSH
80599: LD_INT 6
80601: GREATER
80602: IFFALSE 80645
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80604: LD_VAR 0 4
80608: PPUSH
80609: LD_VAR 0 2
80613: PUSH
80614: LD_VAR 0 9
80618: ARRAY
80619: PUSH
80620: LD_INT 1
80622: ARRAY
80623: PPUSH
80624: LD_VAR 0 2
80628: PUSH
80629: LD_VAR 0 9
80633: ARRAY
80634: PUSH
80635: LD_INT 2
80637: ARRAY
80638: PPUSH
80639: CALL_OW 114
80643: GO 80659
// SetTag ( i , tag ) ;
80645: LD_VAR 0 4
80649: PPUSH
80650: LD_VAR 0 9
80654: PPUSH
80655: CALL_OW 109
// end else
80659: GO 80732
// if enemy then
80661: LD_VAR 0 5
80665: IFFALSE 80732
// begin if GetWeapon ( i ) = ru_time_lapser then
80667: LD_VAR 0 4
80671: PPUSH
80672: CALL_OW 264
80676: PUSH
80677: LD_INT 49
80679: EQUAL
80680: IFFALSE 80708
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80682: LD_VAR 0 4
80686: PPUSH
80687: LD_VAR 0 5
80691: PPUSH
80692: LD_VAR 0 4
80696: PPUSH
80697: CALL_OW 74
80701: PPUSH
80702: CALL_OW 112
80706: GO 80732
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80708: LD_VAR 0 4
80712: PPUSH
80713: LD_VAR 0 5
80717: PPUSH
80718: LD_VAR 0 4
80722: PPUSH
80723: CALL_OW 74
80727: PPUSH
80728: CALL_OW 115
// end ; end ;
80732: GO 80312
80734: POP
80735: POP
// end ;
80736: LD_VAR 0 3
80740: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80741: LD_INT 0
80743: PPUSH
80744: PPUSH
80745: PPUSH
// if not unit or IsInUnit ( unit ) then
80746: LD_VAR 0 1
80750: NOT
80751: PUSH
80752: LD_VAR 0 1
80756: PPUSH
80757: CALL_OW 310
80761: OR
80762: IFFALSE 80766
// exit ;
80764: GO 80857
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80766: LD_ADDR_VAR 0 4
80770: PUSH
80771: LD_VAR 0 1
80775: PPUSH
80776: CALL_OW 250
80780: PPUSH
80781: LD_VAR 0 2
80785: PPUSH
80786: LD_INT 1
80788: PPUSH
80789: CALL_OW 272
80793: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80794: LD_ADDR_VAR 0 5
80798: PUSH
80799: LD_VAR 0 1
80803: PPUSH
80804: CALL_OW 251
80808: PPUSH
80809: LD_VAR 0 2
80813: PPUSH
80814: LD_INT 1
80816: PPUSH
80817: CALL_OW 273
80821: ST_TO_ADDR
// if ValidHex ( x , y ) then
80822: LD_VAR 0 4
80826: PPUSH
80827: LD_VAR 0 5
80831: PPUSH
80832: CALL_OW 488
80836: IFFALSE 80857
// ComTurnXY ( unit , x , y ) ;
80838: LD_VAR 0 1
80842: PPUSH
80843: LD_VAR 0 4
80847: PPUSH
80848: LD_VAR 0 5
80852: PPUSH
80853: CALL_OW 118
// end ;
80857: LD_VAR 0 3
80861: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80862: LD_INT 0
80864: PPUSH
80865: PPUSH
// result := false ;
80866: LD_ADDR_VAR 0 3
80870: PUSH
80871: LD_INT 0
80873: ST_TO_ADDR
// if not units then
80874: LD_VAR 0 2
80878: NOT
80879: IFFALSE 80883
// exit ;
80881: GO 80928
// for i in units do
80883: LD_ADDR_VAR 0 4
80887: PUSH
80888: LD_VAR 0 2
80892: PUSH
80893: FOR_IN
80894: IFFALSE 80926
// if See ( side , i ) then
80896: LD_VAR 0 1
80900: PPUSH
80901: LD_VAR 0 4
80905: PPUSH
80906: CALL_OW 292
80910: IFFALSE 80924
// begin result := true ;
80912: LD_ADDR_VAR 0 3
80916: PUSH
80917: LD_INT 1
80919: ST_TO_ADDR
// exit ;
80920: POP
80921: POP
80922: GO 80928
// end ;
80924: GO 80893
80926: POP
80927: POP
// end ;
80928: LD_VAR 0 3
80932: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80933: LD_INT 0
80935: PPUSH
80936: PPUSH
80937: PPUSH
80938: PPUSH
// if not unit or not points then
80939: LD_VAR 0 1
80943: NOT
80944: PUSH
80945: LD_VAR 0 2
80949: NOT
80950: OR
80951: IFFALSE 80955
// exit ;
80953: GO 81045
// dist := 99999 ;
80955: LD_ADDR_VAR 0 5
80959: PUSH
80960: LD_INT 99999
80962: ST_TO_ADDR
// for i in points do
80963: LD_ADDR_VAR 0 4
80967: PUSH
80968: LD_VAR 0 2
80972: PUSH
80973: FOR_IN
80974: IFFALSE 81043
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80976: LD_ADDR_VAR 0 6
80980: PUSH
80981: LD_VAR 0 1
80985: PPUSH
80986: LD_VAR 0 4
80990: PUSH
80991: LD_INT 1
80993: ARRAY
80994: PPUSH
80995: LD_VAR 0 4
80999: PUSH
81000: LD_INT 2
81002: ARRAY
81003: PPUSH
81004: CALL_OW 297
81008: ST_TO_ADDR
// if tmpDist < dist then
81009: LD_VAR 0 6
81013: PUSH
81014: LD_VAR 0 5
81018: LESS
81019: IFFALSE 81041
// begin result := i ;
81021: LD_ADDR_VAR 0 3
81025: PUSH
81026: LD_VAR 0 4
81030: ST_TO_ADDR
// dist := tmpDist ;
81031: LD_ADDR_VAR 0 5
81035: PUSH
81036: LD_VAR 0 6
81040: ST_TO_ADDR
// end ; end ;
81041: GO 80973
81043: POP
81044: POP
// end ;
81045: LD_VAR 0 3
81049: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81050: LD_INT 0
81052: PPUSH
// uc_side := side ;
81053: LD_ADDR_OWVAR 20
81057: PUSH
81058: LD_VAR 0 1
81062: ST_TO_ADDR
// uc_nation := 3 ;
81063: LD_ADDR_OWVAR 21
81067: PUSH
81068: LD_INT 3
81070: ST_TO_ADDR
// vc_chassis := 25 ;
81071: LD_ADDR_OWVAR 37
81075: PUSH
81076: LD_INT 25
81078: ST_TO_ADDR
// vc_engine := engine_siberite ;
81079: LD_ADDR_OWVAR 39
81083: PUSH
81084: LD_INT 3
81086: ST_TO_ADDR
// vc_control := control_computer ;
81087: LD_ADDR_OWVAR 38
81091: PUSH
81092: LD_INT 3
81094: ST_TO_ADDR
// vc_weapon := 59 ;
81095: LD_ADDR_OWVAR 40
81099: PUSH
81100: LD_INT 59
81102: ST_TO_ADDR
// result := CreateVehicle ;
81103: LD_ADDR_VAR 0 5
81107: PUSH
81108: CALL_OW 45
81112: ST_TO_ADDR
// SetDir ( result , d ) ;
81113: LD_VAR 0 5
81117: PPUSH
81118: LD_VAR 0 4
81122: PPUSH
81123: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81127: LD_VAR 0 5
81131: PPUSH
81132: LD_VAR 0 2
81136: PPUSH
81137: LD_VAR 0 3
81141: PPUSH
81142: LD_INT 0
81144: PPUSH
81145: CALL_OW 48
// end ;
81149: LD_VAR 0 5
81153: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81154: LD_INT 0
81156: PPUSH
81157: PPUSH
81158: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81159: LD_ADDR_VAR 0 2
81163: PUSH
81164: LD_INT 0
81166: PUSH
81167: LD_INT 0
81169: PUSH
81170: LD_INT 0
81172: PUSH
81173: LD_INT 0
81175: PUSH
81176: EMPTY
81177: LIST
81178: LIST
81179: LIST
81180: LIST
81181: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81182: LD_VAR 0 1
81186: NOT
81187: PUSH
81188: LD_VAR 0 1
81192: PPUSH
81193: CALL_OW 264
81197: PUSH
81198: LD_INT 12
81200: PUSH
81201: LD_INT 51
81203: PUSH
81204: LD_INT 32
81206: PUSH
81207: LD_INT 89
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: LIST
81214: LIST
81215: IN
81216: NOT
81217: OR
81218: IFFALSE 81222
// exit ;
81220: GO 81320
// for i := 1 to 3 do
81222: LD_ADDR_VAR 0 3
81226: PUSH
81227: DOUBLE
81228: LD_INT 1
81230: DEC
81231: ST_TO_ADDR
81232: LD_INT 3
81234: PUSH
81235: FOR_TO
81236: IFFALSE 81318
// begin tmp := GetCargo ( cargo , i ) ;
81238: LD_ADDR_VAR 0 4
81242: PUSH
81243: LD_VAR 0 1
81247: PPUSH
81248: LD_VAR 0 3
81252: PPUSH
81253: CALL_OW 289
81257: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81258: LD_ADDR_VAR 0 2
81262: PUSH
81263: LD_VAR 0 2
81267: PPUSH
81268: LD_VAR 0 3
81272: PPUSH
81273: LD_VAR 0 4
81277: PPUSH
81278: CALL_OW 1
81282: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81283: LD_ADDR_VAR 0 2
81287: PUSH
81288: LD_VAR 0 2
81292: PPUSH
81293: LD_INT 4
81295: PPUSH
81296: LD_VAR 0 2
81300: PUSH
81301: LD_INT 4
81303: ARRAY
81304: PUSH
81305: LD_VAR 0 4
81309: PLUS
81310: PPUSH
81311: CALL_OW 1
81315: ST_TO_ADDR
// end ;
81316: GO 81235
81318: POP
81319: POP
// end ;
81320: LD_VAR 0 2
81324: RET
// export function Length ( array ) ; begin
81325: LD_INT 0
81327: PPUSH
// result := array + 0 ;
81328: LD_ADDR_VAR 0 2
81332: PUSH
81333: LD_VAR 0 1
81337: PUSH
81338: LD_INT 0
81340: PLUS
81341: ST_TO_ADDR
// end ;
81342: LD_VAR 0 2
81346: RET
// export function PrepareArray ( array ) ; begin
81347: LD_INT 0
81349: PPUSH
// result := array diff 0 ;
81350: LD_ADDR_VAR 0 2
81354: PUSH
81355: LD_VAR 0 1
81359: PUSH
81360: LD_INT 0
81362: DIFF
81363: ST_TO_ADDR
// if not result [ 1 ] then
81364: LD_VAR 0 2
81368: PUSH
81369: LD_INT 1
81371: ARRAY
81372: NOT
81373: IFFALSE 81393
// result := Delete ( result , 1 ) ;
81375: LD_ADDR_VAR 0 2
81379: PUSH
81380: LD_VAR 0 2
81384: PPUSH
81385: LD_INT 1
81387: PPUSH
81388: CALL_OW 3
81392: ST_TO_ADDR
// end ;
81393: LD_VAR 0 2
81397: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81398: LD_INT 0
81400: PPUSH
81401: PPUSH
81402: PPUSH
81403: PPUSH
// sibRocketRange := 25 ;
81404: LD_ADDR_VAR 0 6
81408: PUSH
81409: LD_INT 25
81411: ST_TO_ADDR
// result := false ;
81412: LD_ADDR_VAR 0 4
81416: PUSH
81417: LD_INT 0
81419: ST_TO_ADDR
// for i := 0 to 5 do
81420: LD_ADDR_VAR 0 5
81424: PUSH
81425: DOUBLE
81426: LD_INT 0
81428: DEC
81429: ST_TO_ADDR
81430: LD_INT 5
81432: PUSH
81433: FOR_TO
81434: IFFALSE 81501
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81436: LD_VAR 0 1
81440: PPUSH
81441: LD_VAR 0 5
81445: PPUSH
81446: LD_VAR 0 6
81450: PPUSH
81451: CALL_OW 272
81455: PPUSH
81456: LD_VAR 0 2
81460: PPUSH
81461: LD_VAR 0 5
81465: PPUSH
81466: LD_VAR 0 6
81470: PPUSH
81471: CALL_OW 273
81475: PPUSH
81476: LD_VAR 0 3
81480: PPUSH
81481: CALL_OW 309
81485: IFFALSE 81499
// begin result := true ;
81487: LD_ADDR_VAR 0 4
81491: PUSH
81492: LD_INT 1
81494: ST_TO_ADDR
// exit ;
81495: POP
81496: POP
81497: GO 81503
// end ;
81499: GO 81433
81501: POP
81502: POP
// end ;
81503: LD_VAR 0 4
81507: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81508: LD_INT 0
81510: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81511: LD_VAR 0 1
81515: PPUSH
81516: LD_VAR 0 2
81520: PPUSH
81521: LD_INT 0
81523: PPUSH
81524: LD_INT 0
81526: PPUSH
81527: LD_INT 1
81529: PPUSH
81530: LD_INT 0
81532: PPUSH
81533: CALL_OW 587
// end ; end_of_file
81537: LD_VAR 0 3
81541: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81542: LD_VAR 0 1
81546: PUSH
81547: LD_INT 200
81549: DOUBLE
81550: GREATEREQUAL
81551: IFFALSE 81559
81553: LD_INT 299
81555: DOUBLE
81556: LESSEQUAL
81557: IFTRUE 81561
81559: GO 81593
81561: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81562: LD_VAR 0 1
81566: PPUSH
81567: LD_VAR 0 2
81571: PPUSH
81572: LD_VAR 0 3
81576: PPUSH
81577: LD_VAR 0 4
81581: PPUSH
81582: LD_VAR 0 5
81586: PPUSH
81587: CALL 36208 0 5
81591: GO 81670
81593: LD_INT 300
81595: DOUBLE
81596: GREATEREQUAL
81597: IFFALSE 81605
81599: LD_INT 399
81601: DOUBLE
81602: LESSEQUAL
81603: IFTRUE 81607
81605: GO 81669
81607: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81608: LD_VAR 0 1
81612: PPUSH
81613: LD_VAR 0 2
81617: PPUSH
81618: LD_VAR 0 3
81622: PPUSH
81623: LD_VAR 0 4
81627: PPUSH
81628: LD_VAR 0 5
81632: PPUSH
81633: LD_VAR 0 6
81637: PPUSH
81638: LD_VAR 0 7
81642: PPUSH
81643: LD_VAR 0 8
81647: PPUSH
81648: LD_VAR 0 9
81652: PPUSH
81653: LD_VAR 0 10
81657: PPUSH
81658: LD_VAR 0 11
81662: PPUSH
81663: CALL 32541 0 11
81667: GO 81670
81669: POP
// end ;
81670: PPOPN 11
81672: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81673: LD_VAR 0 1
81677: PPUSH
81678: LD_VAR 0 2
81682: PPUSH
81683: LD_VAR 0 3
81687: PPUSH
81688: LD_VAR 0 4
81692: PPUSH
81693: LD_VAR 0 5
81697: PPUSH
81698: CALL 35944 0 5
// end ; end_of_file
81702: PPOPN 5
81704: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81705: LD_VAR 0 1
81709: PPUSH
81710: LD_VAR 0 2
81714: PPUSH
81715: LD_VAR 0 3
81719: PPUSH
81720: LD_VAR 0 4
81724: PPUSH
81725: LD_VAR 0 5
81729: PPUSH
81730: LD_VAR 0 6
81734: PPUSH
81735: CALL 20193 0 6
// end ;
81739: PPOPN 6
81741: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81742: LD_INT 0
81744: PPUSH
// begin if not units then
81745: LD_VAR 0 1
81749: NOT
81750: IFFALSE 81754
// exit ;
81752: GO 81754
// end ;
81754: PPOPN 7
81756: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81757: CALL 20097 0 0
// end ;
81761: PPOPN 1
81763: END
