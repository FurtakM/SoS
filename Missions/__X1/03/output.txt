// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1004 0 0
// PrepareAmerican ;
  16: CALL 4065 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9184 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ; end_of_file
 999: LD_VAR 0 4
1003: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
// uc_side := 5 ;
1010: LD_ADDR_OWVAR 20
1014: PUSH
1015: LD_INT 5
1017: ST_TO_ADDR
// uc_nation := 2 ;
1018: LD_ADDR_OWVAR 21
1022: PUSH
1023: LD_INT 2
1025: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1026: LD_INT 5
1028: PPUSH
1029: CALL_OW 274
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 65
1039: PPUSH
1040: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1044: LD_ADDR_EXP 39
1048: PUSH
1049: LD_STRING Farmer
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: LD_STRING 
1057: PPUSH
1058: CALL 40803 0 3
1062: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Omar
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: LD_STRING 
1076: PPUSH
1077: CALL 40803 0 3
1081: ST_TO_ADDR
// omarSquad := [ ] ;
1082: LD_ADDR_EXP 43
1086: PUSH
1087: EMPTY
1088: ST_TO_ADDR
// heikeSquad := [ ] ;
1089: LD_ADDR_EXP 44
1093: PUSH
1094: EMPTY
1095: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1096: LD_ADDR_EXP 45
1100: PUSH
1101: EMPTY
1102: ST_TO_ADDR
// omarCargo := [ ] ;
1103: LD_ADDR_EXP 46
1107: PUSH
1108: EMPTY
1109: ST_TO_ADDR
// for i := 1 to 5 do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_INT 5
1122: PUSH
1123: FOR_TO
1124: IFFALSE 1282
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1126: LD_INT 0
1128: PPUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 2
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 3
1159: PPUSH
1160: CALL_OW 380
// un := CreateHuman ;
1164: LD_ADDR_VAR 0 3
1168: PUSH
1169: CALL_OW 44
1173: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1174: LD_ADDR_EXP 43
1178: PUSH
1179: LD_EXP 43
1183: PUSH
1184: LD_VAR 0 3
1188: UNION
1189: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1190: LD_VAR 0 3
1194: PPUSH
1195: LD_INT 87
1197: PUSH
1198: LD_INT 30
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 91
1207: PUSH
1208: LD_INT 32
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 82
1217: PUSH
1218: LD_INT 15
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 79
1227: PUSH
1228: LD_INT 14
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 82
1237: PUSH
1238: LD_INT 13
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_VAR 0 2
1256: ARRAY
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL 912 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1265: LD_VAR 0 3
1269: PPUSH
1270: LD_INT 93
1272: PPUSH
1273: LD_INT 21
1275: PPUSH
1276: CALL_OW 118
// end ;
1280: GO 1123
1282: POP
1283: POP
// uc_side := 2 ;
1284: LD_ADDR_OWVAR 20
1288: PUSH
1289: LD_INT 2
1291: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1292: LD_ADDR_EXP 31
1296: PUSH
1297: LD_STRING Heike
1299: PPUSH
1300: LD_EXP 1
1304: NOT
1305: PPUSH
1306: LD_EXP 2
1310: PPUSH
1311: CALL 40803 0 3
1315: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1316: LD_ADDR_EXP 35
1320: PUSH
1321: LD_STRING Aviradze
1323: PPUSH
1324: LD_EXP 1
1328: NOT
1329: PPUSH
1330: LD_EXP 2
1334: PPUSH
1335: CALL 40803 0 3
1339: ST_TO_ADDR
// tmp := [ ] ;
1340: LD_ADDR_VAR 0 4
1344: PUSH
1345: EMPTY
1346: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_STRING Givi
1354: PPUSH
1355: LD_EXP 1
1359: NOT
1360: PPUSH
1361: LD_EXP 2
1365: PPUSH
1366: CALL 40803 0 3
1370: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1371: LD_ADDR_EXP 33
1375: PUSH
1376: LD_STRING Mike
1378: PPUSH
1379: LD_EXP 1
1383: NOT
1384: PPUSH
1385: LD_EXP 2
1389: PPUSH
1390: CALL 40803 0 3
1394: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1395: LD_ADDR_EXP 34
1399: PUSH
1400: LD_STRING Kamil
1402: PPUSH
1403: LD_EXP 1
1407: NOT
1408: PPUSH
1409: LD_EXP 2
1413: PPUSH
1414: CALL 40803 0 3
1418: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1419: LD_ADDR_EXP 36
1423: PUSH
1424: LD_STRING Kaia
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_EXP 2
1437: PPUSH
1438: CALL 40803 0 3
1442: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1443: LD_ADDR_EXP 37
1447: PUSH
1448: LD_STRING Sophia
1450: PPUSH
1451: LD_EXP 1
1455: NOT
1456: PPUSH
1457: LD_EXP 2
1461: PPUSH
1462: CALL 40803 0 3
1466: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1467: LD_ADDR_EXP 38
1471: PUSH
1472: LD_STRING Markov
1474: PPUSH
1475: LD_EXP 1
1479: NOT
1480: PPUSH
1481: LD_EXP 2
1485: PPUSH
1486: CALL 40803 0 3
1490: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1491: LD_ADDR_EXP 45
1495: PUSH
1496: LD_STRING 02_others
1498: PPUSH
1499: CALL_OW 31
1503: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 33
1513: PUSH
1514: LD_EXP 34
1518: PUSH
1519: LD_EXP 36
1523: PUSH
1524: LD_EXP 37
1528: PUSH
1529: LD_EXP 38
1533: PUSH
1534: LD_EXP 32
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_EXP 45
1551: ADD
1552: PUSH
1553: LD_INT 0
1555: DIFF
1556: ST_TO_ADDR
// heikeSquad := tmp ;
1557: LD_ADDR_EXP 44
1561: PUSH
1562: LD_VAR 0 4
1566: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1567: LD_EXP 44
1571: PPUSH
1572: LD_INT 25
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 72
1586: PUSH
1587: LD_INT 3
1589: LESS
1590: IFFALSE 1640
// begin SetClass ( Kaia , 1 ) ;
1592: LD_EXP 36
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1604: LD_EXP 33
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1616: LD_EXP 32
1620: PPUSH
1621: LD_INT 1
1623: PPUSH
1624: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1628: LD_EXP 31
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1640: LD_ADDR_VAR 0 4
1644: PUSH
1645: LD_VAR 0 4
1649: PUSH
1650: LD_STRING 02_ape
1652: PPUSH
1653: CALL_OW 31
1657: UNION
1658: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1659: LD_EXP 31
1663: PPUSH
1664: LD_INT 92
1666: PPUSH
1667: LD_INT 17
1669: PPUSH
1670: LD_INT 0
1672: PPUSH
1673: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1677: LD_EXP 39
1681: PPUSH
1682: LD_INT 95
1684: PPUSH
1685: LD_INT 19
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1695: LD_EXP 40
1699: PPUSH
1700: LD_INT 89
1702: PPUSH
1703: LD_INT 25
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1713: LD_EXP 35
1717: PPUSH
1718: LD_INT 92
1720: PPUSH
1721: LD_INT 27
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1731: LD_EXP 40
1735: PPUSH
1736: LD_EXP 35
1740: PPUSH
1741: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1745: LD_EXP 35
1749: PPUSH
1750: LD_EXP 40
1754: PPUSH
1755: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1759: LD_EXP 31
1763: PUSH
1764: LD_EXP 39
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PPUSH
1773: LD_EXP 40
1777: PPUSH
1778: CALL_OW 119
// if tmp then
1782: LD_VAR 0 4
1786: IFFALSE 1840
// for i in tmp do
1788: LD_ADDR_VAR 0 2
1792: PUSH
1793: LD_VAR 0 4
1797: PUSH
1798: FOR_IN
1799: IFFALSE 1838
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1801: LD_VAR 0 2
1805: PPUSH
1806: LD_INT 94
1808: PPUSH
1809: LD_INT 14
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1822: LD_VAR 0 2
1826: PPUSH
1827: LD_EXP 31
1831: PPUSH
1832: CALL_OW 119
// end ;
1836: GO 1798
1838: POP
1839: POP
// farmerSquad := [ ] ;
1840: LD_ADDR_EXP 42
1844: PUSH
1845: EMPTY
1846: ST_TO_ADDR
// uc_side := 5 ;
1847: LD_ADDR_OWVAR 20
1851: PUSH
1852: LD_INT 5
1854: ST_TO_ADDR
// uc_nation := 2 ;
1855: LD_ADDR_OWVAR 21
1859: PUSH
1860: LD_INT 2
1862: ST_TO_ADDR
// for i := 1 to 4 do
1863: LD_ADDR_VAR 0 2
1867: PUSH
1868: DOUBLE
1869: LD_INT 1
1871: DEC
1872: ST_TO_ADDR
1873: LD_INT 4
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1955
// begin PrepareHuman ( false , 1 , 2 ) ;
1879: LD_INT 0
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 380
// un := CreateHuman ;
1892: LD_ADDR_VAR 0 3
1896: PUSH
1897: CALL_OW 44
1901: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1902: LD_VAR 0 3
1906: PPUSH
1907: LD_INT 102
1909: PPUSH
1910: LD_INT 27
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1923: LD_ADDR_EXP 42
1927: PUSH
1928: LD_EXP 42
1932: PUSH
1933: LD_VAR 0 3
1937: UNION
1938: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1939: LD_VAR 0 3
1943: PPUSH
1944: LD_EXP 40
1948: PPUSH
1949: CALL_OW 119
// end ;
1953: GO 1876
1955: POP
1956: POP
// for i := 1 to 2 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_INT 2
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2049
// begin PrepareHuman ( false , 2 , 2 ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 380
// un := CreateHuman ;
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: CALL_OW 44
1995: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1996: LD_VAR 0 3
2000: PPUSH
2001: LD_INT 108
2003: PPUSH
2004: LD_INT 62
2006: PPUSH
2007: LD_INT 2
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2017: LD_ADDR_EXP 42
2021: PUSH
2022: LD_EXP 42
2026: PUSH
2027: LD_VAR 0 3
2031: UNION
2032: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_EXP 40
2042: PPUSH
2043: CALL_OW 119
// end ;
2047: GO 1970
2049: POP
2050: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2051: LD_INT 109
2053: PPUSH
2054: LD_INT 63
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 15
2062: NEG
2063: PPUSH
2064: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2068: LD_INT 109
2070: PPUSH
2071: LD_INT 63
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: CALL_OW 331
// end ;
2081: LD_VAR 0 1
2085: RET
// export function PrepareIbrahim ( x , y ) ; begin
2086: LD_INT 0
2088: PPUSH
// uc_side := 6 ;
2089: LD_ADDR_OWVAR 20
2093: PUSH
2094: LD_INT 6
2096: ST_TO_ADDR
// uc_nation := 3 ;
2097: LD_ADDR_OWVAR 21
2101: PUSH
2102: LD_INT 3
2104: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2105: LD_ADDR_EXP 41
2109: PUSH
2110: LD_STRING IbrahimRu
2112: PPUSH
2113: LD_INT 0
2115: PPUSH
2116: LD_STRING 
2118: PPUSH
2119: CALL 40803 0 3
2123: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2124: LD_EXP 41
2128: PPUSH
2129: LD_VAR 0 1
2133: PPUSH
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 50
// end ;
2149: LD_VAR 0 3
2153: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2154: LD_EXP 40
2158: PUSH
2159: LD_EXP 43
2163: ADD
2164: PPUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 72
2179: IFFALSE 2235
2181: GO 2183
2183: DISABLE
2184: LD_INT 0
2186: PPUSH
// begin enable ;
2187: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2188: LD_ADDR_VAR 0 1
2192: PUSH
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 43
2202: ADD
2203: PPUSH
2204: LD_INT 95
2206: PUSH
2207: LD_INT 3
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PPUSH
2214: CALL_OW 72
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2233
// RemoveUnit ( i ) ;
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 64
2231: GO 2219
2233: POP
2234: POP
// end ;
2235: PPOPN 1
2237: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2238: LD_EXP 3
2242: PUSH
2243: LD_EXP 39
2247: PPUSH
2248: LD_INT 4
2250: PPUSH
2251: CALL_OW 308
2255: AND
2256: IFFALSE 3060
2258: GO 2260
2260: DISABLE
2261: LD_INT 0
2263: PPUSH
2264: PPUSH
2265: PPUSH
2266: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2267: LD_EXP 39
2271: PPUSH
2272: LD_INT 110
2274: PPUSH
2275: LD_INT 60
2277: PPUSH
2278: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2282: LD_EXP 39
2286: PPUSH
2287: LD_INT 110
2289: PPUSH
2290: LD_INT 61
2292: PPUSH
2293: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_EXP 42
2306: PPUSH
2307: LD_INT 25
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 72
2321: ST_TO_ADDR
// if tmp then
2322: LD_VAR 0 2
2326: IFFALSE 2420
// begin for i := 1 to 2 do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_INT 2
2340: PUSH
2341: FOR_TO
2342: IFFALSE 2418
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2344: LD_VAR 0 2
2348: PUSH
2349: LD_VAR 0 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 5
2357: PPUSH
2358: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2362: LD_VAR 0 2
2366: PUSH
2367: LD_VAR 0 1
2371: ARRAY
2372: PPUSH
2373: LD_INT 2
2375: PPUSH
2376: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2380: LD_VAR 0 2
2384: PUSH
2385: LD_VAR 0 1
2389: ARRAY
2390: PPUSH
2391: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2395: LD_VAR 0 2
2399: PUSH
2400: LD_VAR 0 1
2404: ARRAY
2405: PPUSH
2406: LD_INT 107
2408: PPUSH
2409: LD_INT 66
2411: PPUSH
2412: CALL_OW 171
// end ;
2416: GO 2341
2418: POP
2419: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 42
2429: PPUSH
2430: LD_INT 25
2432: PUSH
2433: LD_INT 2
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL_OW 72
2444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_EXP 42
2461: PPUSH
2462: LD_INT 25
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 72
2476: ST_TO_ADDR
// until tmp ;
2477: LD_VAR 0 2
2481: IFFALSE 2445
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2483: LD_VAR 0 2
2487: PPUSH
2488: LD_INT 31
2490: PPUSH
2491: LD_INT 102
2493: PPUSH
2494: LD_INT 69
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2504: LD_INT 35
2506: PPUSH
2507: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2511: LD_EXP 42
2515: PPUSH
2516: LD_INT 3
2518: PUSH
2519: LD_INT 60
2521: PUSH
2522: EMPTY
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: LD_INT 25
2531: PUSH
2532: LD_INT 2
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PPUSH
2543: CALL_OW 72
2547: IFFALSE 2504
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: LD_EXP 42
2558: PPUSH
2559: LD_INT 25
2561: PUSH
2562: LD_INT 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 72
2573: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2574: LD_VAR 0 2
2578: PPUSH
2579: LD_INT 6
2581: PPUSH
2582: LD_INT 116
2584: PPUSH
2585: LD_INT 55
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2595: LD_VAR 0 2
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 116
2605: PPUSH
2606: LD_INT 70
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 31
2623: PPUSH
2624: LD_INT 109
2626: PPUSH
2627: LD_INT 50
2629: PPUSH
2630: LD_INT 2
2632: PPUSH
2633: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2637: LD_INT 35
2639: PPUSH
2640: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2644: LD_INT 22
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 30
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 57
2669: PUSH
2670: EMPTY
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PPUSH
2682: CALL_OW 69
2686: IFFALSE 2637
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2688: LD_ADDR_VAR 0 3
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 30
2705: PUSH
2706: LD_INT 4
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 57
2718: PUSH
2719: EMPTY
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: LD_EXP 42
2749: PPUSH
2750: LD_INT 25
2752: PUSH
2753: LD_INT 1
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 72
2764: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2779: LD_INT 35
2781: PPUSH
2782: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 31
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 57
2811: PUSH
2812: EMPTY
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 69
2828: PUSH
2829: LD_INT 2
2831: GREATEREQUAL
2832: IFFALSE 2779
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2834: LD_ADDR_VAR 0 2
2838: PUSH
2839: LD_EXP 42
2843: PPUSH
2844: LD_INT 25
2846: PUSH
2847: LD_INT 2
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 72
2858: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2859: LD_VAR 0 2
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: PPUSH
2868: LD_INT 5
2870: PPUSH
2871: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2875: LD_VAR 0 2
2879: PUSH
2880: LD_INT 2
2882: ARRAY
2883: PUSH
2884: LD_VAR 0 2
2888: PUSH
2889: LD_INT 3
2891: ARRAY
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PUSH
2915: LD_VAR 0 2
2919: PUSH
2920: LD_INT 3
2922: ARRAY
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2935: LD_VAR 0 2
2939: PUSH
2940: LD_INT 2
2942: ARRAY
2943: PUSH
2944: LD_VAR 0 2
2948: PUSH
2949: LD_INT 3
2951: ARRAY
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PPUSH
2957: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2961: LD_ADDR_VAR 0 4
2965: PUSH
2966: LD_INT 22
2968: PUSH
2969: LD_INT 5
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 31
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// for i := 1 to 2 do
2995: LD_ADDR_VAR 0 1
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 2
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3043
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3011: LD_VAR 0 2
3015: PUSH
3016: LD_VAR 0 1
3020: PUSH
3021: LD_INT 1
3023: PLUS
3024: ARRAY
3025: PPUSH
3026: LD_VAR 0 4
3030: PUSH
3031: LD_VAR 0 1
3035: ARRAY
3036: PPUSH
3037: CALL_OW 180
3041: GO 3008
3043: POP
3044: POP
// wait ( 1 1$00 ) ;
3045: LD_INT 2100
3047: PPUSH
3048: CALL_OW 67
// farmerBaseReady := true ;
3052: LD_ADDR_EXP 4
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// end ;
3060: PPOPN 4
3062: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3063: LD_EXP 4
3067: PUSH
3068: LD_EXP 12
3072: NOT
3073: AND
3074: IFFALSE 3596
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
// begin enable ;
3086: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: LD_EXP 42
3096: PPUSH
3097: LD_INT 25
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 72
3111: PUSH
3112: LD_EXP 39
3116: ADD
3117: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_EXP 42
3127: PPUSH
3128: LD_INT 25
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 72
3142: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3143: LD_ADDR_VAR 0 5
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 5
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 21
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 24
3173: PUSH
3174: LD_INT 1000
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3195: LD_ADDR_VAR 0 4
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 30
3212: PUSH
3213: LD_INT 4
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3229: LD_VAR 0 4
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: CALL_OW 302
3242: IFFALSE 3306
// for i in sol do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: LD_VAR 0 3
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3304
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3257: LD_VAR 0 1
3261: PPUSH
3262: CALL_OW 256
3266: PUSH
3267: LD_INT 999
3269: LESS
3270: PUSH
3271: LD_VAR 0 1
3275: PPUSH
3276: CALL_OW 310
3280: NOT
3281: AND
3282: IFFALSE 3302
// ComEnterUnit ( i , arm [ 1 ] ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: PPUSH
3298: CALL_OW 120
3302: GO 3254
3304: POP
3305: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3306: LD_VAR 0 2
3310: NOT
3311: PUSH
3312: LD_INT 22
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 21
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 69
3340: NOT
3341: AND
3342: IFFALSE 3434
// begin uc_side := 5 ;
3344: LD_ADDR_OWVAR 20
3348: PUSH
3349: LD_INT 5
3351: ST_TO_ADDR
// uc_nation := 2 ;
3352: LD_ADDR_OWVAR 21
3356: PUSH
3357: LD_INT 2
3359: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_INT 2
3368: PPUSH
3369: CALL_OW 380
// eng := CreateHuman ;
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_INT 102
3390: PPUSH
3391: LD_INT 8
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_INT 110
3408: PPUSH
3409: LD_INT 60
3411: PPUSH
3412: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3416: LD_ADDR_EXP 42
3420: PUSH
3421: LD_EXP 42
3425: PUSH
3426: LD_VAR 0 2
3430: UNION
3431: ST_TO_ADDR
// end else
3432: GO 3596
// begin for i in eng do
3434: LD_ADDR_VAR 0 1
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: FOR_IN
3445: IFFALSE 3594
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3447: LD_INT 10
3449: PPUSH
3450: LD_INT 1
3452: PPUSH
3453: CALL_OW 287
3457: IFFALSE 3508
// begin if IsInUnit ( i ) then
3459: LD_VAR 0 1
3463: PPUSH
3464: CALL_OW 310
3468: IFFALSE 3479
// ComExitBuilding ( i ) ;
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 10
3486: PPUSH
3487: CALL_OW 308
3491: NOT
3492: IFFALSE 3506
// AddComMoveToArea ( i , collectFarmerArea ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 10
3501: PPUSH
3502: CALL_OW 173
// end else
3506: GO 3592
// begin if damagedBuilding then
3508: LD_VAR 0 5
3512: IFFALSE 3556
// begin if IsInUnit ( i ) then
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: IFFALSE 3536
// ComExitBuilding ( i ) else
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 122
3534: GO 3554
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_VAR 0 5
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 130
// end else
3554: GO 3592
// if not IsInUnit ( i ) and not HasTask ( i ) then
3556: LD_VAR 0 1
3560: PPUSH
3561: CALL_OW 310
3565: NOT
3566: PUSH
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 314
3576: NOT
3577: AND
3578: IFFALSE 3592
// ComEnterUnit ( i , arDepot ) ;
3580: LD_VAR 0 1
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: CALL_OW 120
// end ; end ;
3592: GO 3444
3594: POP
3595: POP
// end ; end ;
3596: PPOPN 5
3598: END
// export function CargoEvacuation ; begin
3599: LD_INT 0
3601: PPUSH
// wait ( 0 0$3 ) ;
3602: LD_INT 105
3604: PPUSH
3605: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3609: LD_ADDR_EXP 22
3613: PUSH
3614: LD_EXP 22
3618: PUSH
3619: LD_INT 1
3621: MINUS
3622: ST_TO_ADDR
// if omarCargoCounter = 0 then
3623: LD_EXP 22
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3635
// exit ;
3633: GO 3942
// if omarCargo then
3635: LD_EXP 46
3639: IFFALSE 3650
// RemoveUnit ( omarCargo ) ;
3641: LD_EXP 46
3645: PPUSH
3646: CALL_OW 64
// omarCargo := PrepareCargo ;
3650: LD_ADDR_EXP 46
3654: PUSH
3655: CALL 3947 0 0
3659: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3660: LD_EXP 46
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3672: LD_EXP 46
3676: PPUSH
3677: LD_INT 107
3679: PPUSH
3680: LD_INT 59
3682: PPUSH
3683: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_INT 107
3701: PPUSH
3702: LD_INT 59
3704: PPUSH
3705: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3709: LD_EXP 46
3713: PPUSH
3714: CALL_OW 302
3718: NOT
3719: PUSH
3720: LD_EXP 46
3724: PPUSH
3725: CALL_OW 301
3729: OR
3730: IFFALSE 3734
// exit ;
3732: GO 3942
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3734: LD_EXP 46
3738: PPUSH
3739: LD_INT 107
3741: PPUSH
3742: LD_INT 59
3744: PPUSH
3745: CALL_OW 307
3749: PUSH
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: CALL_OW 296
3762: PUSH
3763: LD_INT 6
3765: LESS
3766: OR
3767: IFFALSE 3687
// SetTag ( omarCargo , 1 ) ;
3769: LD_EXP 46
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL_OW 109
// wait ( 0 0$03 ) ;
3781: LD_INT 105
3783: PPUSH
3784: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3788: LD_EXP 46
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3803: LD_EXP 46
3807: PPUSH
3808: LD_INT 103
3810: PPUSH
3811: LD_INT 9
3813: PPUSH
3814: CALL_OW 171
// wait ( 0 0$1 ) ;
3818: LD_INT 35
3820: PPUSH
3821: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3825: LD_EXP 46
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 100
3835: PPUSH
3836: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3847: LD_EXP 46
3851: PPUSH
3852: LD_INT 103
3854: PPUSH
3855: LD_INT 9
3857: PPUSH
3858: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3862: LD_EXP 46
3866: PPUSH
3867: CALL_OW 302
3871: NOT
3872: PUSH
3873: LD_EXP 46
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3887
// exit ;
3885: GO 3942
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3887: LD_EXP 46
3891: PPUSH
3892: LD_INT 103
3894: PPUSH
3895: LD_INT 9
3897: PPUSH
3898: CALL_OW 307
3902: PUSH
3903: LD_EXP 46
3907: PPUSH
3908: LD_INT 3
3910: PPUSH
3911: CALL_OW 308
3915: OR
3916: PUSH
3917: LD_EXP 46
3921: PPUSH
3922: CALL_OW 110
3926: PUSH
3927: LD_INT 0
3929: GREATER
3930: AND
3931: IFFALSE 3840
// RemoveUnit ( omarCargo ) ;
3933: LD_EXP 46
3937: PPUSH
3938: CALL_OW 64
// end ;
3942: LD_VAR 0 1
3946: RET
// export function PrepareCargo ; var un , veh ; begin
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
3951: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: LD_INT 5
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: LD_INT 14
3965: PPUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 32
3974: PPUSH
3975: LD_INT 80
3977: PPUSH
3978: CALL 349 0 7
3982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_INT 4
3990: PPUSH
3991: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 101
4002: PPUSH
4003: LD_INT 8
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 4
4021: PPUSH
4022: CALL_OW 380
// un := CreateHuman ;
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: CALL_OW 44
4035: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: CALL_OW 52
// result := veh ;
4050: LD_ADDR_VAR 0 1
4054: PUSH
4055: LD_VAR 0 3
4059: ST_TO_ADDR
// end ; end_of_file
4060: LD_VAR 0 1
4064: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4065: LD_INT 0
4067: PPUSH
4068: PPUSH
4069: PPUSH
// usForces := [ ] ;
4070: LD_ADDR_EXP 47
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4077: LD_ADDR_EXP 49
4081: PUSH
4082: LD_INT 6
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 27
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: LD_INT 43
4105: PUSH
4106: LD_INT 24
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 27
4120: PUSH
4121: LD_INT 29
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 0
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4141: LD_INT 11
4143: PPUSH
4144: CALL_OW 274
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 150
4154: PUSH
4155: LD_INT 120
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: LD_INT 80
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_OWVAR 67
4174: ARRAY
4175: PPUSH
4176: CALL_OW 277
// if Difficulty = 1 then
4180: LD_OWVAR 67
4184: PUSH
4185: LD_INT 1
4187: EQUAL
4188: IFFALSE 4197
// RemoveUnit ( hillBun ) ;
4190: LD_INT 14
4192: PPUSH
4193: CALL_OW 64
// uc_side := 1 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// uc_nation := 1 ;
4205: LD_ADDR_OWVAR 21
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// hc_gallery :=  ;
4213: LD_ADDR_OWVAR 33
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_name :=  ;
4221: LD_ADDR_OWVAR 26
4225: PUSH
4226: LD_STRING 
4228: ST_TO_ADDR
// hc_importance := 0 ;
4229: LD_ADDR_OWVAR 32
4233: PUSH
4234: LD_INT 0
4236: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: CALL_OW 380
// usCommander := CreateHuman ;
4250: LD_ADDR_EXP 48
4254: PUSH
4255: CALL_OW 44
4259: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4260: LD_EXP 48
4264: PPUSH
4265: LD_INT 11
4267: PPUSH
4268: CALL_OW 52
// if Difficulty > 1 then
4272: LD_OWVAR 67
4276: PUSH
4277: LD_INT 1
4279: GREATER
4280: IFFALSE 4362
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: PPUSH
4308: CALL_OW 380
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// usForces := usForces union un ;
4322: LD_ADDR_EXP 47
4326: PUSH
4327: LD_EXP 47
4331: PUSH
4332: LD_VAR 0 3
4336: UNION
4337: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4350: LD_VAR 0 3
4354: PPUSH
4355: LD_INT 14
4357: PPUSH
4358: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 2
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: LD_INT 4
4380: PUSH
4381: LD_INT 4
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4543
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4399: LD_INT 0
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 1
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: LD_INT 3
4413: PUSH
4414: LD_INT 3
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: LD_OWVAR 67
4427: ARRAY
4428: PPUSH
4429: CALL_OW 380
// un := CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// usForces := usForces union un ;
4443: LD_ADDR_EXP 47
4447: PUSH
4448: LD_EXP 47
4452: PUSH
4453: LD_VAR 0 3
4457: UNION
4458: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 39
4466: PPUSH
4467: LD_INT 24
4469: PPUSH
4470: LD_INT 4
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL_OW 50
// if i < 3 then
4480: LD_VAR 0 2
4484: PUSH
4485: LD_INT 3
4487: LESS
4488: IFFALSE 4541
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 58
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: LD_INT 30
4513: PUSH
4514: LD_INT 31
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 69
4530: PUSH
4531: LD_VAR 0 2
4535: ARRAY
4536: PPUSH
4537: CALL_OW 120
// end ;
4541: GO 4396
4543: POP
4544: POP
// for i := 1 to 2 do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 2
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4623
// begin PrepareHuman ( false , 2 , 2 ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: CALL_OW 380
// un := CreateHuman ;
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: CALL_OW 44
4583: ST_TO_ADDR
// usForces := usForces union un ;
4584: LD_ADDR_EXP 47
4588: PUSH
4589: LD_EXP 47
4593: PUSH
4594: LD_VAR 0 3
4598: UNION
4599: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4600: LD_VAR 0 3
4604: PPUSH
4605: LD_INT 39
4607: PPUSH
4608: LD_INT 24
4610: PPUSH
4611: LD_INT 4
4613: PPUSH
4614: LD_INT 0
4616: PPUSH
4617: CALL_OW 50
// end ;
4621: GO 4558
4623: POP
4624: POP
// PrepareHuman ( false , 4 , 1 ) ;
4625: LD_INT 0
4627: PPUSH
4628: LD_INT 4
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL_OW 380
// un := CreateHuman ;
4638: LD_ADDR_VAR 0 3
4642: PUSH
4643: CALL_OW 44
4647: ST_TO_ADDR
// usForces := usForces union un ;
4648: LD_ADDR_EXP 47
4652: PUSH
4653: LD_EXP 47
4657: PUSH
4658: LD_VAR 0 3
4662: UNION
4663: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_INT 39
4671: PPUSH
4672: LD_INT 24
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: LD_INT 0
4680: PPUSH
4681: CALL_OW 50
// end ;
4685: LD_VAR 0 1
4689: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4690: LD_EXP 47
4694: PUSH
4695: LD_EXP 7
4699: NOT
4700: AND
4701: PUSH
4702: LD_EXP 15
4706: NOT
4707: AND
4708: IFFALSE 5139
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
// begin enable ;
4720: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: LD_EXP 47
4730: PPUSH
4731: LD_INT 25
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 72
4745: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4746: LD_ADDR_VAR 0 4
4750: PUSH
4751: LD_EXP 47
4755: PPUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: CALL_OW 72
4770: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4771: LD_ADDR_VAR 0 5
4775: PUSH
4776: LD_EXP 47
4780: PPUSH
4781: LD_INT 25
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 72
4795: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4796: LD_INT 7
4798: PPUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 70
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4893
// for i in sol do
4819: LD_ADDR_VAR 0 1
4823: PUSH
4824: LD_VAR 0 4
4828: PUSH
4829: FOR_IN
4830: IFFALSE 4891
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 310
4841: NOT
4842: PUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 310
4852: PPUSH
4853: CALL_OW 266
4857: PUSH
4858: LD_INT 4
4860: EQUAL
4861: NOT
4862: OR
4863: IFFALSE 4889
// begin ComExitBuilding ( i ) ;
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4874: LD_VAR 0 1
4878: PPUSH
4879: LD_INT 37
4881: PPUSH
4882: LD_INT 23
4884: PPUSH
4885: CALL_OW 174
// end ;
4889: GO 4829
4891: POP
4892: POP
// if eng then
4893: LD_VAR 0 3
4897: IFFALSE 5139
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: LD_INT 22
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 95
4916: PUSH
4917: LD_INT 7
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: LD_INT 24
4939: PUSH
4940: LD_INT 1000
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: ST_TO_ADDR
// if b then
4962: LD_VAR 0 2
4966: IFFALSE 4997
// begin ComExitBuilding ( eng ) ;
4968: LD_VAR 0 3
4972: PPUSH
4973: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4977: LD_VAR 0 3
4981: PPUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: CALL_OW 190
// end else
4995: GO 5139
// begin for i in eng do
4997: LD_ADDR_VAR 0 1
5001: PUSH
5002: LD_VAR 0 3
5006: PUSH
5007: FOR_IN
5008: IFFALSE 5137
// if not HasTask ( i ) then
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 314
5019: NOT
5020: IFFALSE 5135
// begin if americanBuildList then
5022: LD_EXP 49
5026: IFFALSE 5111
// begin if IsInUnit ( i ) then
5028: LD_VAR 0 1
5032: PPUSH
5033: CALL_OW 310
5037: IFFALSE 5048
// ComExitBuilding ( i ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5048: LD_VAR 0 1
5052: PPUSH
5053: LD_EXP 49
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PPUSH
5066: LD_EXP 49
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PUSH
5075: LD_INT 2
5077: ARRAY
5078: PPUSH
5079: LD_EXP 49
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_EXP 49
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 205
// end else
5109: GO 5135
// if not IsInUnit ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 310
5120: NOT
5121: IFFALSE 5135
// ComEnterUnit ( i , usDepot ) ;
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 120
// end ;
5135: GO 5007
5137: POP
5138: POP
// end ; end ; end ;
5139: PPOPN 5
5141: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5142: LD_INT 0
5144: PPUSH
5145: PPUSH
5146: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: LD_INT 35
5154: PUSH
5155: LD_INT 45
5157: PUSH
5158: LD_INT 48
5160: PUSH
5161: LD_INT 82
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: ST_TO_ADDR
// for i in tech do
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 3
5179: PUSH
5180: FOR_IN
5181: IFFALSE 5199
// AddComResearch ( lab , i ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_VAR 0 4
5192: PPUSH
5193: CALL_OW 184
5197: GO 5180
5199: POP
5200: POP
// end ;
5201: LD_VAR 0 2
5205: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5206: LD_EXP 13
5210: PUSH
5211: LD_EXP 24
5215: PUSH
5216: LD_EXP 28
5220: LESSEQUAL
5221: AND
5222: IFFALSE 5247
5224: GO 5226
5226: DISABLE
// begin enable ;
5227: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5228: LD_INT 35
5230: PPUSH
5231: LD_INT 2065
5233: PPUSH
5234: CALL_OW 12
5238: PPUSH
5239: CALL_OW 67
// SendConvoy ;
5243: CALL 5353 0 0
// end ;
5247: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5248: LD_EXP 7
5252: PUSH
5253: LD_EXP 19
5257: AND
5258: IFFALSE 5352
5260: GO 5262
5262: DISABLE
// begin if americanHasEscaped then
5263: LD_EXP 9
5267: IFFALSE 5278
// wait ( 3 3$20 ) else
5269: LD_INT 7000
5271: PPUSH
5272: CALL_OW 67
5276: GO 5285
// wait ( 6 6$40 ) ;
5278: LD_INT 14000
5280: PPUSH
5281: CALL_OW 67
// SendAttack ;
5285: CALL 6126 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5289: LD_INT 16100
5291: PUSH
5292: LD_INT 14000
5294: PUSH
5295: LD_INT 13300
5297: PUSH
5298: LD_INT 12250
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: PPUSH
5313: CALL_OW 67
// SendAttack ;
5317: CALL 6126 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5321: LD_EXP 20
5325: PUSH
5326: LD_INT 5
5328: PUSH
5329: LD_INT 6
5331: PUSH
5332: LD_INT 7
5334: PUSH
5335: LD_INT 8
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: PUSH
5344: LD_OWVAR 67
5348: ARRAY
5349: LESS
5350: IFFALSE 5289
// end ;
5352: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
// road := rand ( 1 , 2 ) ;
5363: LD_ADDR_VAR 0 4
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 2
5373: PPUSH
5374: CALL_OW 12
5378: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5379: LD_ADDR_VAR 0 8
5383: PUSH
5384: LD_INT 3
5386: PUSH
5387: LD_INT 8
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_VAR 0 4
5398: ARRAY
5399: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_INT 35
5407: PUSH
5408: LD_INT 66
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 101
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 4
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5437: LD_ADDR_VAR 0 6
5441: PUSH
5442: LD_INT 34
5444: PUSH
5445: LD_INT 67
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 38
5454: PUSH
5455: LD_INT 62
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 43
5464: PUSH
5465: LD_INT 54
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 57
5474: PUSH
5475: LD_INT 57
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 77
5484: PUSH
5485: LD_INT 71
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 86
5494: PUSH
5495: LD_INT 60
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 89
5504: PUSH
5505: LD_INT 35
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 93
5514: PUSH
5515: LD_INT 17
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 97
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 103
5534: PUSH
5535: LD_INT 9
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: ST_TO_ADDR
// if road = 2 then
5554: LD_VAR 0 4
5558: PUSH
5559: LD_INT 2
5561: EQUAL
5562: IFFALSE 5579
// points := ReverseArray ( points ) ;
5564: LD_ADDR_VAR 0 6
5568: PUSH
5569: LD_VAR 0 6
5573: PPUSH
5574: CALL 73781 0 1
5578: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5579: LD_INT 4
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 2
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 12
5596: PPUSH
5597: LD_INT 80
5599: PPUSH
5600: CALL 349 0 7
// veh := CreateVehicle ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: CALL_OW 45
5613: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_VAR 0 5
5623: PUSH
5624: LD_VAR 0 4
5628: ARRAY
5629: PUSH
5630: LD_INT 3
5632: ARRAY
5633: PPUSH
5634: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_VAR 0 5
5647: PUSH
5648: LD_VAR 0 4
5652: ARRAY
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 5
5662: PUSH
5663: LD_VAR 0 4
5667: ARRAY
5668: PUSH
5669: LD_INT 2
5671: ARRAY
5672: PPUSH
5673: LD_INT 0
5675: PPUSH
5676: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5680: LD_INT 0
5682: PPUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PPUSH
5691: CALL_OW 380
// un := CreateHuman ;
5695: LD_ADDR_VAR 0 2
5699: PUSH
5700: CALL_OW 44
5704: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5705: LD_VAR 0 2
5709: PPUSH
5710: LD_VAR 0 3
5714: PPUSH
5715: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5719: LD_INT 70
5721: PUSH
5722: LD_INT 66
5724: PUSH
5725: LD_INT 62
5727: PUSH
5728: LD_INT 58
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: LD_OWVAR 67
5741: ARRAY
5742: PPUSH
5743: CALL_OW 13
5747: PUSH
5748: LD_OWVAR 1
5752: PUSH
5753: LD_INT 30
5755: MOD
5756: PLUS
5757: PUSH
5758: LD_EXP 24
5762: PUSH
5763: LD_INT 4
5765: LESS
5766: OR
5767: IFFALSE 5784
// SetCargo ( veh , mat_cans , 100 ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 100
5779: PPUSH
5780: CALL_OW 290
// for i := 2 to points do
5784: LD_ADDR_VAR 0 7
5788: PUSH
5789: DOUBLE
5790: LD_INT 2
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 6
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5843
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5802: LD_VAR 0 3
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_VAR 0 7
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_VAR 0 6
5826: PUSH
5827: LD_VAR 0 7
5831: ARRAY
5832: PUSH
5833: LD_INT 2
5835: ARRAY
5836: PPUSH
5837: CALL_OW 171
5841: GO 5799
5843: POP
5844: POP
// convoyCounter := convoyCounter + 1 ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_EXP 24
5854: PUSH
5855: LD_INT 1
5857: PLUS
5858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5859: LD_INT 35
5861: PPUSH
5862: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5866: LD_VAR 0 3
5870: PPUSH
5871: CALL_OW 255
5875: PUSH
5876: LD_INT 4
5878: NONEQUAL
5879: IFFALSE 5892
// begin ComStop ( veh ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: CALL_OW 141
// exit ;
5890: GO 6121
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 314
5901: NOT
5902: PUSH
5903: LD_VAR 0 3
5907: PPUSH
5908: CALL_OW 302
5912: AND
5913: IFFALSE 5954
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5915: LD_VAR 0 3
5919: PPUSH
5920: LD_VAR 0 6
5924: PUSH
5925: LD_VAR 0 6
5929: ARRAY
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: LD_VAR 0 6
5939: PUSH
5940: LD_VAR 0 6
5944: ARRAY
5945: PUSH
5946: LD_INT 2
5948: ARRAY
5949: PPUSH
5950: CALL_OW 111
// if not IsInUnit ( un ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 310
5963: NOT
5964: IFFALSE 6005
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_VAR 0 6
5975: PUSH
5976: LD_VAR 0 6
5980: ARRAY
5981: PUSH
5982: LD_INT 1
5984: ARRAY
5985: PPUSH
5986: LD_VAR 0 6
5990: PUSH
5991: LD_VAR 0 6
5995: ARRAY
5996: PUSH
5997: LD_INT 2
5999: ARRAY
6000: PPUSH
6001: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_VAR 0 8
6014: PPUSH
6015: CALL_OW 308
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: OR
6035: IFFALSE 5859
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 302
6046: PUSH
6047: LD_VAR 0 3
6051: PPUSH
6052: CALL_OW 302
6056: NOT
6057: AND
6058: PUSH
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_VAR 0 8
6068: PPUSH
6069: CALL_OW 308
6073: AND
6074: IFFALSE 6085
// RemoveUnit ( un ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6085: LD_VAR 0 3
6089: PPUSH
6090: LD_VAR 0 8
6094: PPUSH
6095: CALL_OW 308
6099: PUSH
6100: LD_VAR 0 3
6104: PPUSH
6105: CALL_OW 302
6109: AND
6110: IFFALSE 6121
// RemoveUnit ( veh ) ;
6112: LD_VAR 0 3
6116: PPUSH
6117: CALL_OW 64
// end ;
6121: LD_VAR 0 1
6125: RET
// export function SendAttack ; var un , veh , i ; begin
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
// if blockAttack then
6132: LD_EXP 29
6136: IFFALSE 6159
// begin repeat wait ( 0 0$1 ) ;
6138: LD_INT 35
6140: PPUSH
6141: CALL_OW 67
// until not blockAttack ;
6145: LD_EXP 29
6149: NOT
6150: IFFALSE 6138
// wait ( 0 0$5 ) ;
6152: LD_INT 175
6154: PPUSH
6155: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 21
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_INT 10
6190: GREATER
6191: IFFALSE 6234
// begin repeat wait ( 0 0$1 ) ;
6193: LD_INT 35
6195: PPUSH
6196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PPUSH
6224: CALL_OW 69
6228: PUSH
6229: LD_INT 10
6231: LESSEQUAL
6232: IFFALSE 6193
// end ; IncomingAttack ;
6234: CALL 15576 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6238: LD_INT 2100
6240: PPUSH
6241: LD_INT 3500
6243: PPUSH
6244: CALL_OW 12
6248: PPUSH
6249: CALL_OW 67
// if blockAttack then
6253: LD_EXP 29
6257: IFFALSE 6280
// begin repeat wait ( 0 0$1 ) ;
6259: LD_INT 35
6261: PPUSH
6262: CALL_OW 67
// until not blockAttack ;
6266: LD_EXP 29
6270: NOT
6271: IFFALSE 6259
// wait ( 0 0$5 ) ;
6273: LD_INT 175
6275: PPUSH
6276: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6280: LD_ADDR_VAR 0 4
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_OWVAR 67
6312: ARRAY
6313: PUSH
6314: LD_EXP 20
6318: PUSH
6319: LD_INT 3
6321: DIV
6322: PLUS
6323: PUSH
6324: FOR_TO
6325: IFFALSE 6441
// begin uc_side := 1 ;
6327: LD_ADDR_OWVAR 20
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// uc_nation := 1 ;
6335: LD_ADDR_OWVAR 21
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6343: LD_INT 0
6345: PPUSH
6346: LD_INT 1
6348: PPUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: CALL_OW 380
// un := CreateHuman ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: CALL_OW 44
6386: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 37
6394: PPUSH
6395: LD_INT 70
6397: PPUSH
6398: LD_INT 3
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 50
// usAttackers := usAttackers union un ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PUSH
6418: LD_VAR 0 2
6422: UNION
6423: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_INT 40
6431: PPUSH
6432: LD_INT 65
6434: PPUSH
6435: CALL_OW 111
// end ;
6439: GO 6324
6441: POP
6442: POP
// uc_side := 1 ;
6443: LD_ADDR_OWVAR 20
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// uc_nation := 1 ;
6451: LD_ADDR_OWVAR 21
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6459: LD_INT 0
6461: PPUSH
6462: LD_INT 4
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: CALL_OW 380
// un := CreateHuman ;
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: CALL_OW 44
6481: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6482: LD_VAR 0 2
6486: PPUSH
6487: LD_INT 37
6489: PPUSH
6490: LD_INT 70
6492: PPUSH
6493: LD_INT 3
6495: PPUSH
6496: LD_INT 0
6498: PPUSH
6499: CALL_OW 50
// usAttackers := usAttackers union un ;
6503: LD_ADDR_EXP 50
6507: PUSH
6508: LD_EXP 50
6512: PUSH
6513: LD_VAR 0 2
6517: UNION
6518: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_INT 40
6526: PPUSH
6527: LD_INT 65
6529: PPUSH
6530: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6534: LD_ADDR_VAR 0 4
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_OWVAR 67
6548: PUSH
6549: LD_EXP 20
6553: PUSH
6554: LD_INT 4
6556: DIV
6557: PLUS
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6756
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 1
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: CALL_OW 12
6597: ARRAY
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 2
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: LD_INT 90
6633: PPUSH
6634: CALL 349 0 7
6638: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6639: LD_VAR 0 3
6643: PPUSH
6644: LD_INT 35
6646: PPUSH
6647: LD_INT 65
6649: PPUSH
6650: LD_INT 0
6652: PPUSH
6653: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6657: LD_INT 0
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 1
6670: PLUS
6671: PPUSH
6672: CALL_OW 380
// un := CreateHuman ;
6676: LD_ADDR_VAR 0 2
6680: PUSH
6681: CALL_OW 44
6685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 3
6695: PPUSH
6696: CALL_OW 52
// usAttackers := usAttackers union un ;
6700: LD_ADDR_EXP 50
6704: PUSH
6705: LD_EXP 50
6709: PUSH
6710: LD_VAR 0 2
6714: UNION
6715: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6716: LD_VAR 0 3
6720: PPUSH
6721: LD_INT 39
6723: PPUSH
6724: LD_INT 60
6726: PPUSH
6727: CALL_OW 111
// wait ( 0 0$3 ) ;
6731: LD_INT 105
6733: PPUSH
6734: CALL_OW 67
// usAttackers := usAttackers union veh ;
6738: LD_ADDR_EXP 50
6742: PUSH
6743: LD_EXP 50
6747: PUSH
6748: LD_VAR 0 3
6752: UNION
6753: ST_TO_ADDR
// end ;
6754: GO 6559
6756: POP
6757: POP
// attackWave := attackWave + 1 ;
6758: LD_ADDR_EXP 20
6762: PUSH
6763: LD_EXP 20
6767: PUSH
6768: LD_INT 1
6770: PLUS
6771: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6772: LD_EXP 25
6776: PPUSH
6777: CALL_OW 427
// end ;
6781: LD_VAR 0 1
6785: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
// if retreatAllowed then
6799: LD_EXP 12
6803: IFFALSE 6815
// strategy := 2 else
6805: LD_ADDR_VAR 0 5
6809: PUSH
6810: LD_INT 2
6812: ST_TO_ADDR
6813: GO 6831
// strategy := rand ( 0 , 2 ) ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 0
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 12
6830: ST_TO_ADDR
// attackFormula := [ ] ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: EMPTY
6837: ST_TO_ADDR
// case strategy of 0 :
6838: LD_VAR 0 5
6842: PUSH
6843: LD_INT 0
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 7181
6851: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6852: LD_INT 11
6854: PPUSH
6855: LD_INT 22
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 30
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PPUSH
6879: CALL_OW 70
6883: NOT
6884: IFFALSE 6956
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_INT 41
6893: PUSH
6894: LD_INT 34
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: LD_INT 53
6906: PUSH
6907: LD_INT 62
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 37
6916: PUSH
6917: LD_INT 63
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 44
6926: PUSH
6927: LD_INT 45
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 37
6936: PUSH
6937: LD_INT 28
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: ST_TO_ADDR
6954: GO 7179
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6956: LD_INT 12
6958: PPUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 30
6984: PUSH
6985: LD_INT 31
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 32
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 70
7016: NOT
7017: IFFALSE 7100
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7019: LD_ADDR_VAR 0 6
7023: PUSH
7024: LD_INT 27
7026: PUSH
7027: LD_INT 42
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 27
7036: PUSH
7037: LD_INT 32
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 53
7050: PUSH
7051: LD_INT 62
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 37
7060: PUSH
7061: LD_INT 63
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 44
7070: PUSH
7071: LD_INT 45
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 37
7080: PUSH
7081: LD_INT 28
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: ST_TO_ADDR
7098: GO 7179
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7100: LD_ADDR_VAR 0 6
7104: PUSH
7105: LD_INT 71
7107: PUSH
7108: LD_INT 67
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 54
7117: PUSH
7118: LD_INT 35
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 63
7131: PUSH
7132: LD_INT 40
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 37
7141: PUSH
7142: LD_INT 63
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 44
7151: PUSH
7152: LD_INT 45
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 37
7161: PUSH
7162: LD_INT 28
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
// end ; 1 :
7179: GO 7384
7181: LD_INT 1
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7293
7189: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7190: LD_ADDR_VAR 0 6
7194: PUSH
7195: LD_INT 71
7197: PUSH
7198: LD_INT 67
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 82
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 53
7217: PUSH
7218: LD_INT 7
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 43
7227: PUSH
7228: LD_INT 10
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 53
7243: PUSH
7244: LD_INT 62
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 37
7253: PUSH
7254: LD_INT 63
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 44
7263: PUSH
7264: LD_INT 45
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 37
7273: PUSH
7274: LD_INT 28
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
7291: GO 7384
7293: LD_INT 2
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7383
7301: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: LD_INT 90
7309: PUSH
7310: LD_INT 59
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 108
7319: PUSH
7320: LD_INT 64
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 82
7333: PUSH
7334: LD_INT 75
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 73
7343: PUSH
7344: LD_INT 67
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 65
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 108
7363: PUSH
7364: LD_INT 62
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 7384
7383: POP
// if not attackFormula then
7384: LD_VAR 0 6
7388: NOT
7389: IFFALSE 7393
// exit ;
7391: GO 9071
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_EXP 50
7402: PPUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 72
7417: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7418: LD_ADDR_VAR 0 8
7422: PUSH
7423: LD_EXP 50
7427: PPUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 72
7442: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: LD_EXP 50
7452: PPUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 72
7467: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7468: LD_ADDR_VAR 0 10
7472: PUSH
7473: LD_EXP 50
7477: PPUSH
7478: LD_INT 21
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 72
7492: ST_TO_ADDR
// if sci then
7493: LD_VAR 0 8
7497: IFFALSE 7534
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7499: LD_VAR 0 8
7503: PPUSH
7504: LD_VAR 0 6
7508: PUSH
7509: LD_INT 2
7511: ARRAY
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 2
7528: ARRAY
7529: PPUSH
7530: CALL_OW 111
// repeat wait ( 10 ) ;
7534: LD_INT 10
7536: PPUSH
7537: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7541: LD_ADDR_VAR 0 7
7545: PUSH
7546: LD_EXP 50
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: LD_EXP 50
7575: PPUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 4
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 72
7590: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7591: LD_ADDR_VAR 0 9
7595: PUSH
7596: LD_EXP 50
7600: PPUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7616: LD_ADDR_VAR 0 10
7620: PUSH
7621: LD_EXP 50
7625: PPUSH
7626: LD_INT 21
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 72
7640: ST_TO_ADDR
// if sol then
7641: LD_VAR 0 7
7645: IFFALSE 8066
// begin for i in sol do
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_VAR 0 7
7656: PUSH
7657: FOR_IN
7658: IFFALSE 8064
// begin tag := GetTag ( i ) ;
7660: LD_ADDR_VAR 0 4
7664: PUSH
7665: LD_VAR 0 2
7669: PPUSH
7670: CALL_OW 110
7674: ST_TO_ADDR
// if not tag then
7675: LD_VAR 0 4
7679: NOT
7680: IFFALSE 7789
// begin if GetLives ( i ) = 1000 then
7682: LD_VAR 0 2
7686: PPUSH
7687: CALL_OW 256
7691: PUSH
7692: LD_INT 1000
7694: EQUAL
7695: IFFALSE 7711
// SetTag ( i , 1 ) else
7697: LD_VAR 0 2
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 109
7709: GO 7787
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7711: LD_VAR 0 2
7715: PPUSH
7716: LD_VAR 0 6
7720: PUSH
7721: LD_INT 2
7723: ARRAY
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: LD_VAR 0 6
7733: PUSH
7734: LD_INT 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PPUSH
7742: CALL_OW 297
7746: PUSH
7747: LD_INT 10
7749: GREATER
7750: IFFALSE 7787
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PUSH
7766: LD_INT 1
7768: ARRAY
7769: PPUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 2
7777: ARRAY
7778: PUSH
7779: LD_INT 2
7781: ARRAY
7782: PPUSH
7783: CALL_OW 111
// end else
7787: GO 8062
// begin if GetLives ( i ) < 760 then
7789: LD_VAR 0 2
7793: PPUSH
7794: CALL_OW 256
7798: PUSH
7799: LD_INT 760
7801: LESS
7802: IFFALSE 7853
// begin SetTag ( i , 0 ) ;
7804: LD_VAR 0 2
7808: PPUSH
7809: LD_INT 0
7811: PPUSH
7812: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7816: LD_VAR 0 2
7820: PPUSH
7821: LD_VAR 0 6
7825: PUSH
7826: LD_INT 2
7828: ARRAY
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 2
7841: ARRAY
7842: PUSH
7843: LD_INT 2
7845: ARRAY
7846: PPUSH
7847: CALL_OW 111
// end else
7851: GO 8062
// if tag <= attackFormula [ 1 ] then
7853: LD_VAR 0 4
7857: PUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: LESSEQUAL
7867: IFFALSE 8028
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7869: LD_VAR 0 2
7873: PPUSH
7874: LD_VAR 0 6
7878: PUSH
7879: LD_INT 1
7881: ARRAY
7882: PUSH
7883: LD_VAR 0 4
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_VAR 0 6
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PUSH
7908: LD_INT 2
7910: ARRAY
7911: PPUSH
7912: CALL_OW 297
7916: PUSH
7917: LD_INT 6
7919: GREATER
7920: IFFALSE 7971
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7922: LD_VAR 0 2
7926: PPUSH
7927: LD_VAR 0 6
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PUSH
7936: LD_VAR 0 4
7940: ARRAY
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: LD_VAR 0 6
7950: PUSH
7951: LD_INT 1
7953: ARRAY
7954: PUSH
7955: LD_VAR 0 4
7959: ARRAY
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 114
7969: GO 8026
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7971: LD_INT 81
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 91
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 69
8005: NOT
8006: IFFALSE 8026
// SetTag ( i , tag + 1 ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_VAR 0 4
8017: PUSH
8018: LD_INT 1
8020: PLUS
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8062
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 81
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 69
8047: PPUSH
8048: LD_VAR 0 2
8052: PPUSH
8053: CALL_OW 74
8057: PPUSH
8058: CALL_OW 115
// end ; end ;
8062: GO 7657
8064: POP
8065: POP
// end ; if sci then
8066: LD_VAR 0 8
8070: IFFALSE 8339
// begin if not sol and not mech then
8072: LD_VAR 0 7
8076: NOT
8077: PUSH
8078: LD_VAR 0 9
8082: NOT
8083: AND
8084: IFFALSE 8136
// begin for i in sci do
8086: LD_ADDR_VAR 0 2
8090: PUSH
8091: LD_VAR 0 8
8095: PUSH
8096: FOR_IN
8097: IFFALSE 8132
// begin usForces := usForces union i ;
8099: LD_ADDR_EXP 47
8103: PUSH
8104: LD_EXP 47
8108: PUSH
8109: LD_VAR 0 2
8113: UNION
8114: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_INT 34
8122: PPUSH
8123: LD_INT 68
8125: PPUSH
8126: CALL_OW 111
// end ;
8130: GO 8096
8132: POP
8133: POP
// end else
8134: GO 8339
// for i in sci do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_VAR 0 8
8145: PUSH
8146: FOR_IN
8147: IFFALSE 8337
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_VAR 0 6
8158: PUSH
8159: LD_INT 2
8161: ARRAY
8162: PUSH
8163: LD_INT 1
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 6
8171: PUSH
8172: LD_INT 2
8174: ARRAY
8175: PUSH
8176: LD_INT 2
8178: ARRAY
8179: PPUSH
8180: CALL_OW 297
8184: PUSH
8185: LD_INT 10
8187: GREATER
8188: IFFALSE 8227
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8190: LD_VAR 0 2
8194: PPUSH
8195: LD_VAR 0 6
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: LD_VAR 0 6
8212: PUSH
8213: LD_INT 2
8215: ARRAY
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: PPUSH
8221: CALL_OW 111
8225: GO 8335
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 1000
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 91
8251: PUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 72
8273: IFFALSE 8335
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8275: LD_VAR 0 2
8279: PPUSH
8280: LD_VAR 0 7
8284: PPUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 24
8290: PUSH
8291: LD_INT 1000
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 91
8304: PUSH
8305: LD_VAR 0 2
8309: PUSH
8310: LD_INT 10
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 72
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: PPUSH
8331: CALL_OW 128
8335: GO 8146
8337: POP
8338: POP
// end ; if mech then
8339: LD_VAR 0 9
8343: IFFALSE 9053
// begin for i in mech do
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_VAR 0 9
8354: PUSH
8355: FOR_IN
8356: IFFALSE 9051
// begin tag := GetTag ( i ) ;
8358: LD_ADDR_VAR 0 4
8362: PUSH
8363: LD_VAR 0 2
8367: PPUSH
8368: CALL_OW 110
8372: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8373: LD_ADDR_VAR 0 11
8377: PUSH
8378: LD_VAR 0 2
8382: PPUSH
8383: CALL_OW 310
8387: ST_TO_ADDR
// if not tag then
8388: LD_VAR 0 4
8392: NOT
8393: IFFALSE 8764
// begin if veh then
8395: LD_VAR 0 11
8399: IFFALSE 8570
// begin if GetLives ( veh ) = 1000 then
8401: LD_VAR 0 11
8405: PPUSH
8406: CALL_OW 256
8410: PUSH
8411: LD_INT 1000
8413: EQUAL
8414: IFFALSE 8430
// SetTag ( i , 1 ) else
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 109
8428: GO 8568
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8430: LD_VAR 0 11
8434: PPUSH
8435: LD_VAR 0 6
8439: PUSH
8440: LD_INT 3
8442: ARRAY
8443: PUSH
8444: LD_INT 1
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 3
8455: ARRAY
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 297
8465: PUSH
8466: LD_INT 8
8468: GREATER
8469: IFFALSE 8508
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8471: LD_VAR 0 11
8475: PPUSH
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 3
8483: ARRAY
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_INT 3
8496: ARRAY
8497: PUSH
8498: LD_INT 2
8500: ARRAY
8501: PPUSH
8502: CALL_OW 111
8506: GO 8568
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8508: LD_INT 81
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 91
8520: PUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 12
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL_OW 69
8542: NOT
8543: IFFALSE 8568
// begin ComExitVehicle ( i ) ;
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_VAR 0 11
8563: PPUSH
8564: CALL_OW 189
// end ; end else
8568: GO 8762
// if GetLives ( i ) < 400 then
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 256
8579: PUSH
8580: LD_INT 400
8582: LESS
8583: IFFALSE 8634
// begin usAttackers := usAttackers diff i ;
8585: LD_ADDR_EXP 50
8589: PUSH
8590: LD_EXP 50
8594: PUSH
8595: LD_VAR 0 2
8599: DIFF
8600: ST_TO_ADDR
// usForces := usForces union i ;
8601: LD_ADDR_EXP 47
8605: PUSH
8606: LD_EXP 47
8610: PUSH
8611: LD_VAR 0 2
8615: UNION
8616: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8617: LD_VAR 0 2
8621: PPUSH
8622: LD_INT 34
8624: PPUSH
8625: LD_INT 68
8627: PPUSH
8628: CALL_OW 111
// end else
8632: GO 8762
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8634: LD_VAR 0 10
8638: PPUSH
8639: LD_INT 58
8641: PUSH
8642: EMPTY
8643: LIST
8644: PUSH
8645: LD_INT 24
8647: PUSH
8648: LD_INT 1000
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 72
8663: PUSH
8664: LD_VAR 0 2
8668: PPUSH
8669: CALL_OW 314
8673: NOT
8674: AND
8675: PUSH
8676: LD_INT 81
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 91
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: LD_INT 9
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: OR
8711: IFFALSE 8762
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: LD_VAR 0 10
8722: PPUSH
8723: LD_INT 58
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 250
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PPUSH
8743: CALL_OW 72
8747: PPUSH
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 74
8757: PPUSH
8758: CALL_OW 120
// end else
8762: GO 9049
// begin if veh and GetLives ( veh ) < 760 then
8764: LD_VAR 0 11
8768: PUSH
8769: LD_VAR 0 11
8773: PPUSH
8774: CALL_OW 256
8778: PUSH
8779: LD_INT 760
8781: LESS
8782: AND
8783: IFFALSE 8834
// begin SetTag ( i , 0 ) ;
8785: LD_VAR 0 2
8789: PPUSH
8790: LD_INT 0
8792: PPUSH
8793: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8797: LD_VAR 0 11
8801: PPUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_INT 3
8809: ARRAY
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PUSH
8824: LD_INT 2
8826: ARRAY
8827: PPUSH
8828: CALL_OW 111
// end else
8832: GO 9049
// if veh then
8834: LD_VAR 0 11
8838: IFFALSE 9049
// if tag <= attackFormula [ 4 ] then
8840: LD_VAR 0 4
8844: PUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: LESSEQUAL
8854: IFFALSE 9015
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8856: LD_VAR 0 11
8860: PPUSH
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 4
8868: ARRAY
8869: PUSH
8870: LD_VAR 0 4
8874: ARRAY
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: LD_VAR 0 6
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PUSH
8889: LD_VAR 0 4
8893: ARRAY
8894: PUSH
8895: LD_INT 2
8897: ARRAY
8898: PPUSH
8899: CALL_OW 297
8903: PUSH
8904: LD_INT 6
8906: GREATER
8907: IFFALSE 8958
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8909: LD_VAR 0 11
8913: PPUSH
8914: LD_VAR 0 6
8918: PUSH
8919: LD_INT 4
8921: ARRAY
8922: PUSH
8923: LD_VAR 0 4
8927: ARRAY
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: PPUSH
8933: LD_VAR 0 6
8937: PUSH
8938: LD_INT 4
8940: ARRAY
8941: PUSH
8942: LD_VAR 0 4
8946: ARRAY
8947: PUSH
8948: LD_INT 2
8950: ARRAY
8951: PPUSH
8952: CALL_OW 114
8956: GO 9013
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8958: LD_INT 81
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 91
8970: PUSH
8971: LD_VAR 0 11
8975: PUSH
8976: LD_INT 10
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: NOT
8993: IFFALSE 9013
// SetTag ( i , tag + 1 ) ;
8995: LD_VAR 0 2
8999: PPUSH
9000: LD_VAR 0 4
9004: PUSH
9005: LD_INT 1
9007: PLUS
9008: PPUSH
9009: CALL_OW 109
// end else
9013: GO 9049
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9015: LD_VAR 0 11
9019: PPUSH
9020: LD_INT 81
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end ; end ;
9049: GO 8355
9051: POP
9052: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9053: LD_EXP 50
9057: PPUSH
9058: LD_INT 52
9060: PUSH
9061: EMPTY
9062: LIST
9063: PPUSH
9064: CALL_OW 72
9068: NOT
9069: IFFALSE 7534
// end ;
9071: LD_VAR 0 1
9075: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9076: LD_INT 22
9078: PUSH
9079: LD_INT 1
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: LD_INT 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: IFFALSE 9181
9106: GO 9108
9108: DISABLE
9109: LD_INT 0
9111: PPUSH
// begin enable ;
9112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 1
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9179
// if GetFuel ( i ) < 10 then
9150: LD_VAR 0 1
9154: PPUSH
9155: CALL_OW 261
9159: PUSH
9160: LD_INT 10
9162: LESS
9163: IFFALSE 9177
// SetFuel ( i , 10 ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_INT 10
9172: PPUSH
9173: CALL_OW 240
9177: GO 9147
9179: POP
9180: POP
// end ; end_of_file
9181: PPOPN 1
9183: END
// export function Action ; var hasAll , i , tmp ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 21
9207: PUSH
9208: LD_INT 1
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 23
9217: PUSH
9218: LD_INT 2
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: PUSH
9235: LD_INT 7
9237: GREATEREQUAL
9238: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_STRING 03_HasAll
9246: PPUSH
9247: CALL_OW 39
// Video ( true ) ;
9251: LD_INT 1
9253: PPUSH
9254: CALL 78477 0 1
// CenterNowOnUnits ( Heike ) ;
9258: LD_EXP 31
9262: PPUSH
9263: CALL_OW 87
// wait ( 0 0$2 ) ;
9267: LD_INT 70
9269: PPUSH
9270: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9274: LD_EXP 39
9278: PPUSH
9279: LD_STRING DF-1-start
9281: PPUSH
9282: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9286: LD_EXP 31
9290: PPUSH
9291: LD_EXP 39
9295: PPUSH
9296: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9300: LD_EXP 31
9304: PPUSH
9305: LD_STRING DH-1-start
9307: PPUSH
9308: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9312: LD_EXP 40
9316: PPUSH
9317: LD_INT 92
9319: PPUSH
9320: LD_INT 21
9322: PPUSH
9323: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9327: LD_EXP 35
9331: PPUSH
9332: LD_INT 94
9334: PPUSH
9335: LD_INT 23
9337: PPUSH
9338: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9342: LD_EXP 43
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: LD_INT 90
9353: PPUSH
9354: LD_INT 23
9356: PPUSH
9357: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9361: LD_EXP 43
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: LD_INT 93
9372: PPUSH
9373: LD_INT 25
9375: PPUSH
9376: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9380: LD_EXP 43
9384: PPUSH
9385: LD_EXP 40
9389: PPUSH
9390: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9394: LD_EXP 40
9398: PUSH
9399: LD_EXP 35
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PPUSH
9408: LD_EXP 31
9412: PPUSH
9413: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9417: LD_EXP 31
9421: PPUSH
9422: LD_EXP 40
9426: PPUSH
9427: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9431: LD_INT 35
9433: PPUSH
9434: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9438: LD_EXP 40
9442: PPUSH
9443: LD_INT 92
9445: PPUSH
9446: LD_INT 21
9448: PPUSH
9449: CALL_OW 307
9453: IFFALSE 9431
// Say ( Omar , DO-1-start ) ;
9455: LD_EXP 40
9459: PPUSH
9460: LD_STRING DO-1-start
9462: PPUSH
9463: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9467: LD_EXP 31
9471: PPUSH
9472: LD_STRING DH-2-start
9474: PPUSH
9475: CALL_OW 88
// if hasAll then
9479: LD_VAR 0 2
9483: IFFALSE 9611
// begin Say ( Omar , DO-2-start ) ;
9485: LD_EXP 40
9489: PPUSH
9490: LD_STRING DO-2-start
9492: PPUSH
9493: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9497: LD_EXP 40
9501: PPUSH
9502: LD_STRING DO-3-start
9504: PPUSH
9505: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9509: LD_EXP 31
9513: PPUSH
9514: LD_STRING DH-3-start
9516: PPUSH
9517: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9521: LD_EXP 39
9525: PPUSH
9526: LD_STRING DF-2-start
9528: PPUSH
9529: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9533: LD_EXP 40
9537: PPUSH
9538: LD_EXP 39
9542: PPUSH
9543: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9547: LD_EXP 40
9551: PPUSH
9552: LD_STRING DO-4-start
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9559: LD_EXP 39
9563: PPUSH
9564: LD_STRING DF-3-start
9566: PPUSH
9567: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9571: LD_EXP 40
9575: PPUSH
9576: LD_STRING DO-5-start
9578: PPUSH
9579: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9583: LD_EXP 39
9587: PPUSH
9588: LD_STRING DF-4-start
9590: PPUSH
9591: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9595: LD_EXP 40
9599: PPUSH
9600: LD_EXP 31
9604: PPUSH
9605: CALL_OW 119
// end else
9609: GO 9711
// begin Say ( Omar , DO-2-start-a ) ;
9611: LD_EXP 40
9615: PPUSH
9616: LD_STRING DO-2-start-a
9618: PPUSH
9619: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9623: LD_EXP 40
9627: PPUSH
9628: LD_STRING DO-3-start-a
9630: PPUSH
9631: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9635: LD_EXP 31
9639: PPUSH
9640: LD_STRING DH-3-start-a
9642: PPUSH
9643: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9647: LD_EXP 39
9651: PPUSH
9652: LD_STRING DF-2-start-a
9654: PPUSH
9655: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_EXP 39
9668: PPUSH
9669: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9673: LD_EXP 40
9677: PPUSH
9678: LD_STRING DO-4-start-a
9680: PPUSH
9681: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9685: LD_EXP 39
9689: PPUSH
9690: LD_STRING DF-3-start-a
9692: PPUSH
9693: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9697: LD_EXP 40
9701: PPUSH
9702: LD_EXP 31
9706: PPUSH
9707: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9711: LD_INT 10
9713: PPUSH
9714: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9718: LD_EXP 40
9722: PPUSH
9723: LD_STRING DO-1-mission
9725: PPUSH
9726: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9730: LD_EXP 40
9734: PPUSH
9735: LD_STRING DO-2-mission
9737: PPUSH
9738: CALL_OW 88
// if not hasAll then
9742: LD_VAR 0 2
9746: NOT
9747: IFFALSE 9761
// Say ( Omar , DO-3-mission ) ;
9749: LD_EXP 40
9753: PPUSH
9754: LD_STRING DO-3-mission
9756: PPUSH
9757: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9761: LD_EXP 40
9765: PPUSH
9766: LD_STRING DO-4-mission
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9773: LD_EXP 31
9777: PPUSH
9778: LD_STRING DH-1-mission
9780: PPUSH
9781: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9785: LD_EXP 39
9789: PPUSH
9790: LD_STRING DF-1-mission
9792: PPUSH
9793: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9797: LD_EXP 40
9801: PPUSH
9802: LD_STRING DO-5-mission
9804: PPUSH
9805: CALL_OW 88
// if not hasAll then
9809: LD_VAR 0 2
9813: NOT
9814: IFFALSE 9949
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 23
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: ST_TO_ADDR
// for i := 7 downto tmp do
9861: LD_ADDR_VAR 0 3
9865: PUSH
9866: DOUBLE
9867: LD_INT 7
9869: INC
9870: ST_TO_ADDR
9871: LD_VAR 0 4
9875: PUSH
9876: FOR_DOWNTO
9877: IFFALSE 9947
// begin if omarSquad < 3 then
9879: LD_EXP 43
9883: PUSH
9884: LD_INT 3
9886: LESS
9887: IFFALSE 9891
// break ;
9889: GO 9947
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9891: LD_EXP 43
9895: PUSH
9896: LD_INT 3
9898: ARRAY
9899: PPUSH
9900: LD_INT 2
9902: PPUSH
9903: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9907: LD_ADDR_EXP 45
9911: PUSH
9912: LD_EXP 45
9916: PUSH
9917: LD_EXP 43
9921: PUSH
9922: LD_INT 3
9924: ARRAY
9925: UNION
9926: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9927: LD_ADDR_EXP 43
9931: PUSH
9932: LD_EXP 43
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: CALL_OW 3
9944: ST_TO_ADDR
// end ;
9945: GO 9876
9947: POP
9948: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9949: LD_EXP 40
9953: PUSH
9954: LD_EXP 43
9958: ADD
9959: PPUSH
9960: LD_INT 103
9962: PPUSH
9963: LD_INT 9
9965: PPUSH
9966: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9970: LD_VAR 0 2
9974: PUSH
9975: LD_EXP 36
9979: PPUSH
9980: CALL_OW 302
9984: AND
9985: IFFALSE 10046
// begin wait ( 0 0$3 ) ;
9987: LD_INT 105
9989: PPUSH
9990: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9994: LD_EXP 36
9998: PPUSH
9999: LD_EXP 39
10003: PPUSH
10004: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10008: LD_EXP 36
10012: PPUSH
10013: LD_STRING DK-1-side
10015: PPUSH
10016: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10020: LD_EXP 39
10024: PPUSH
10025: LD_EXP 36
10029: PPUSH
10030: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10034: LD_EXP 39
10038: PPUSH
10039: LD_STRING DF-1-side
10041: PPUSH
10042: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10046: LD_INT 22
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 69
10060: PPUSH
10061: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10065: LD_EXP 39
10069: PUSH
10070: LD_EXP 42
10074: ADD
10075: PPUSH
10076: LD_INT 108
10078: PPUSH
10079: LD_INT 62
10081: PPUSH
10082: CALL_OW 111
// gameStarted := true ;
10086: LD_ADDR_EXP 3
10090: PUSH
10091: LD_INT 1
10093: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10094: LD_INT 105
10096: PPUSH
10097: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10101: LD_EXP 31
10105: PPUSH
10106: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10110: LD_EXP 31
10114: PPUSH
10115: LD_EXP 35
10119: PPUSH
10120: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10124: LD_INT 22
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: CALL_OW 69
10138: PUSH
10139: LD_EXP 31
10143: DIFF
10144: PPUSH
10145: LD_EXP 31
10149: PPUSH
10150: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10154: LD_EXP 31
10158: PPUSH
10159: LD_STRING DH-1-explore
10161: PPUSH
10162: CALL_OW 88
// if Givi then
10166: LD_EXP 32
10170: IFFALSE 10186
// Say ( Givi , DG-1-explore ) else
10172: LD_EXP 32
10176: PPUSH
10177: LD_STRING DG-1-explore
10179: PPUSH
10180: CALL_OW 88
10184: GO 10223
// if heikeSecondSquad then
10186: LD_EXP 45
10190: IFFALSE 10223
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10192: LD_EXP 45
10196: PPUSH
10197: LD_INT 26
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 72
10211: PUSH
10212: LD_INT 1
10214: ARRAY
10215: PPUSH
10216: LD_STRING DArm-1-explore
10218: PPUSH
10219: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10223: LD_EXP 35
10227: PPUSH
10228: LD_STRING DA-1-explore
10230: PPUSH
10231: CALL_OW 88
// if Sophia then
10235: LD_EXP 37
10239: IFFALSE 10317
// begin Say ( Sophia , DS-2-explore ) ;
10241: LD_EXP 37
10245: PPUSH
10246: LD_STRING DS-2-explore
10248: PPUSH
10249: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10253: LD_EXP 35
10257: PPUSH
10258: LD_STRING DA-2-explore
10260: PPUSH
10261: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 35
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10293: LD_EXP 37
10297: PPUSH
10298: LD_STRING DS-3-explore
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10305: LD_EXP 35
10309: PPUSH
10310: LD_STRING DA-3-explore
10312: PPUSH
10313: CALL_OW 88
// end ; if Mike then
10317: LD_EXP 33
10321: IFFALSE 10377
// begin Say ( Mike , DM-1-explore ) ;
10323: LD_EXP 33
10327: PPUSH
10328: LD_STRING DM-1-explore
10330: PPUSH
10331: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_STRING DH-2-explore
10342: PPUSH
10343: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10347: LD_EXP 33
10351: PPUSH
10352: LD_STRING DM-2-explore
10354: PPUSH
10355: CALL_OW 88
// if Kaia then
10359: LD_EXP 36
10363: IFFALSE 10377
// Say ( Kaia , DK-1-explore ) ;
10365: LD_EXP 36
10369: PPUSH
10370: LD_STRING DK-1-explore
10372: PPUSH
10373: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10377: LD_INT 22
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: CALL_OW 139
// Video ( false ) ;
10396: LD_INT 0
10398: PPUSH
10399: CALL 78477 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10403: LD_STRING BuildBase
10405: PPUSH
10406: CALL_OW 337
// SaveForQuickRestart ;
10410: CALL_OW 22
// end ;
10414: LD_VAR 0 1
10418: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10419: LD_EXP 5
10423: PUSH
10424: LD_EXP 7
10428: NOT
10429: AND
10430: IFFALSE 10617
10432: GO 10434
10434: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10435: LD_EXP 48
10439: PPUSH
10440: LD_STRING DUsm-4-assault
10442: PPUSH
10443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10447: LD_INT 35
10449: PPUSH
10450: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10454: LD_INT 22
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 50
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 95
10482: PUSH
10483: LD_INT 7
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: IFFALSE 10447
// if not IsOk ( usCommander ) or americanBaseCaptured then
10502: LD_EXP 48
10506: PPUSH
10507: CALL_OW 302
10511: NOT
10512: PUSH
10513: LD_EXP 7
10517: OR
10518: IFFALSE 10522
// exit ;
10520: GO 10617
// repeat wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 50
10551: PUSH
10552: EMPTY
10553: LIST
10554: PUSH
10555: LD_INT 95
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: NOT
10576: IFFALSE 10522
// wait ( 0 0$3 ) ;
10578: LD_INT 105
10580: PPUSH
10581: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10585: LD_EXP 48
10589: PPUSH
10590: CALL_OW 302
10594: NOT
10595: PUSH
10596: LD_EXP 7
10600: OR
10601: IFFALSE 10605
// exit ;
10603: GO 10617
// Say ( usCommander , DUsm-3-assault ) ;
10605: LD_EXP 48
10609: PPUSH
10610: LD_STRING DUsm-3-assault
10612: PPUSH
10613: CALL_OW 88
// end ;
10617: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseCaptured do
10618: LD_EXP 6
10622: NOT
10623: PUSH
10624: LD_EXP 7
10628: NOT
10629: AND
10630: PUSH
10631: LD_INT 5
10633: PPUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 21
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 70
10662: AND
10663: PUSH
10664: LD_EXP 7
10668: NOT
10669: AND
10670: IFFALSE 10755
10672: GO 10674
10674: DISABLE
// begin if Mike then
10675: LD_EXP 33
10679: IFFALSE 10695
// Say ( Mike , DM-1-scout ) else
10681: LD_EXP 33
10685: PPUSH
10686: LD_STRING DM-1-scout
10688: PPUSH
10689: CALL_OW 88
10693: GO 10726
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10695: LD_EXP 45
10699: PPUSH
10700: LD_INT 26
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 72
10714: PUSH
10715: LD_INT 1
10717: ARRAY
10718: PPUSH
10719: LD_STRING DArm-1-explore
10721: PPUSH
10722: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10726: LD_INT 54
10728: PPUSH
10729: LD_INT 35
10731: PPUSH
10732: LD_INT 2
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10742: LD_INT 54
10744: PPUSH
10745: LD_INT 35
10747: PPUSH
10748: LD_INT 2
10750: PPUSH
10751: CALL_OW 331
// end ;
10755: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseSpoted and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10756: LD_INT 6
10758: PPUSH
10759: LD_INT 22
10761: PUSH
10762: LD_INT 2
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PPUSH
10783: CALL_OW 70
10787: PUSH
10788: LD_EXP 6
10792: NOT
10793: AND
10794: PUSH
10795: LD_EXP 7
10799: NOT
10800: AND
10801: IFFALSE 11055
10803: GO 10805
10805: DISABLE
10806: LD_INT 0
10808: PPUSH
10809: PPUSH
10810: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10811: LD_ADDR_VAR 0 1
10815: PUSH
10816: LD_EXP 45
10820: PPUSH
10821: LD_INT 26
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 72
10835: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_EXP 45
10845: PPUSH
10846: LD_INT 26
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 72
10860: ST_TO_ADDR
// DialogueOn ;
10861: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10865: LD_INT 36
10867: PPUSH
10868: LD_INT 22
10870: PPUSH
10871: LD_INT 2
10873: PPUSH
10874: LD_INT 8
10876: PPUSH
10877: CALL_OW 330
// dwait ( 0 0$1 ) ;
10881: LD_INT 35
10883: PPUSH
10884: CALL_OW 68
// speakerOk := false ;
10888: LD_ADDR_VAR 0 3
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// if Mike then
10896: LD_EXP 33
10900: IFFALSE 10922
// speakerOk := Say ( Mike , DM-1-spot ) else
10902: LD_ADDR_VAR 0 3
10906: PUSH
10907: LD_EXP 33
10911: PPUSH
10912: LD_STRING DM-1-spot
10914: PPUSH
10915: CALL_OW 88
10919: ST_TO_ADDR
10920: GO 10950
// if randomMen then
10922: LD_VAR 0 1
10926: IFFALSE 10950
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: LD_VAR 0 1
10937: PUSH
10938: LD_INT 1
10940: ARRAY
10941: PPUSH
10942: LD_STRING DArm-1-spot-a
10944: PPUSH
10945: CALL_OW 88
10949: ST_TO_ADDR
// if speakerOk then
10950: LD_VAR 0 3
10954: IFFALSE 10998
// begin if Givi then
10956: LD_EXP 32
10960: IFFALSE 10976
// Say ( Givi , DG-1-spot ) else
10962: LD_EXP 32
10966: PPUSH
10967: LD_STRING DG-1-spot
10969: PPUSH
10970: CALL_OW 88
10974: GO 10998
// if randomWomen then
10976: LD_VAR 0 2
10980: IFFALSE 10998
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10982: LD_VAR 0 2
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: PPUSH
10991: LD_STRING DArf-1-spot-a
10993: PPUSH
10994: CALL_OW 88
// end ; if Mike then
10998: LD_EXP 33
11002: IFFALSE 11018
// Say ( Heike , DH-1-spot ) else
11004: LD_EXP 31
11008: PPUSH
11009: LD_STRING DH-1-spot
11011: PPUSH
11012: CALL_OW 88
11016: GO 11030
// Say ( Heike , DH-1-spot-a ) ;
11018: LD_EXP 31
11022: PPUSH
11023: LD_STRING DH-1-spot-a
11025: PPUSH
11026: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11030: LD_INT 36
11032: PPUSH
11033: LD_INT 22
11035: PPUSH
11036: LD_INT 2
11038: PPUSH
11039: CALL_OW 331
// DialogueOff ;
11043: CALL_OW 7
// americanBaseSpoted := true ;
11047: LD_ADDR_EXP 6
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// end ;
11055: PPOPN 3
11057: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11058: LD_EXP 6
11062: NOT
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 101
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: AND
11093: PUSH
11094: LD_EXP 7
11098: NOT
11099: AND
11100: IFFALSE 11186
11102: GO 11104
11104: DISABLE
11105: LD_INT 0
11107: PPUSH
// begin americanBaseSpoted := true ;
11108: LD_ADDR_EXP 6
11112: PUSH
11113: LD_INT 1
11115: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11116: LD_ADDR_VAR 0 1
11120: PUSH
11121: LD_EXP 45
11125: PPUSH
11126: LD_INT 26
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 72
11140: ST_TO_ADDR
// if not randomMen then
11141: LD_VAR 0 1
11145: NOT
11146: IFFALSE 11150
// exit ;
11148: GO 11186
// DialogueOn ;
11150: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11154: LD_VAR 0 1
11158: PUSH
11159: LD_INT 1
11161: ARRAY
11162: PPUSH
11163: LD_STRING DArm-1-spot-a
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11170: LD_EXP 31
11174: PPUSH
11175: LD_STRING DH-1-spot-a
11177: PPUSH
11178: CALL_OW 88
// DialogueOff ;
11182: CALL_OW 7
// end ;
11186: PPOPN 1
11188: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11189: LD_INT 11
11191: PPUSH
11192: CALL_OW 255
11196: PUSH
11197: LD_INT 2
11199: EQUAL
11200: PUSH
11201: LD_INT 7
11203: PPUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: LD_INT 50
11219: PUSH
11220: EMPTY
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 30
11229: PUSH
11230: LD_INT 31
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 70
11246: OR
11247: PUSH
11248: LD_INT 7
11250: PPUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 70
11265: PUSH
11266: LD_INT 2
11268: GREATER
11269: OR
11270: PUSH
11271: LD_EXP 47
11275: PUSH
11276: LD_INT 4
11278: LESSEQUAL
11279: OR
11280: IFFALSE 11864
11282: GO 11284
11284: DISABLE
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
// begin wait ( 0 0$3 ) ;
11289: LD_INT 105
11291: PPUSH
11292: CALL_OW 67
// americanStartRun := true ;
11296: LD_ADDR_EXP 15
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// if IsOk ( usCommander ) then
11304: LD_EXP 48
11308: PPUSH
11309: CALL_OW 302
11313: IFFALSE 11343
// begin usForces := usForces union usCommander ;
11315: LD_ADDR_EXP 47
11319: PUSH
11320: LD_EXP 47
11324: PUSH
11325: LD_EXP 48
11329: UNION
11330: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11331: LD_EXP 48
11335: PPUSH
11336: LD_STRING DUsm-1-assault
11338: PPUSH
11339: CALL_OW 88
// end ; for i in usForces do
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_EXP 47
11352: PUSH
11353: FOR_IN
11354: IFFALSE 11400
// begin if IsInUnit ( i ) then
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 310
11365: IFFALSE 11376
// ComExitBuilding ( i ) ;
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 122
// wait ( 3 ) ;
11376: LD_INT 3
11378: PPUSH
11379: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 34
11390: PPUSH
11391: LD_INT 67
11393: PPUSH
11394: CALL_OW 111
// end ;
11398: GO 11353
11400: POP
11401: POP
// Say ( Heike , DH-1-assault ) ;
11402: LD_EXP 31
11406: PPUSH
11407: LD_STRING DH-1-assault
11409: PPUSH
11410: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11414: LD_INT 35
11416: PPUSH
11417: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: LD_INT 34
11428: PPUSH
11429: LD_INT 67
11431: PPUSH
11432: CALL_OW 111
// until not usForces ;
11436: LD_EXP 47
11440: NOT
11441: IFFALSE 11414
// music_nat := 2 ;
11443: LD_ADDR_OWVAR 71
11447: PUSH
11448: LD_INT 2
11450: ST_TO_ADDR
// music_class := music_victory ;
11451: LD_ADDR_OWVAR 72
11455: PUSH
11456: LD_INT 4
11458: ST_TO_ADDR
// if not americanHasEscaped then
11459: LD_EXP 9
11463: NOT
11464: IFFALSE 11485
// begin Say ( Heike , DH-2-assault ) ;
11466: LD_EXP 31
11470: PPUSH
11471: LD_STRING DH-2-assault
11473: PPUSH
11474: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11478: LD_STRING ACH_CLEAN
11480: PPUSH
11481: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11485: LD_INT 70
11487: PPUSH
11488: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11492: LD_INT 35
11494: PPUSH
11495: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11499: LD_INT 22
11501: PUSH
11502: LD_INT 2
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 50
11524: PUSH
11525: EMPTY
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: NOT
11542: IFFALSE 11492
// InGameOn ;
11544: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11548: LD_INT 11
11550: PPUSH
11551: CALL_OW 255
11555: PUSH
11556: LD_INT 2
11558: EQUAL
11559: NOT
11560: IFFALSE 11572
// SetSide ( usDepot , 2 ) ;
11562: LD_INT 11
11564: PPUSH
11565: LD_INT 2
11567: PPUSH
11568: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11572: LD_INT 35
11574: PPUSH
11575: LD_INT 22
11577: PPUSH
11578: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11582: LD_EXP 31
11586: PPUSH
11587: LD_INT 35
11589: PPUSH
11590: LD_INT 22
11592: PPUSH
11593: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11597: LD_EXP 31
11601: PPUSH
11602: LD_INT 38
11604: PPUSH
11605: LD_INT 25
11607: PPUSH
11608: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11612: LD_EXP 35
11616: PUSH
11617: LD_EXP 44
11621: UNION
11622: PUSH
11623: LD_EXP 45
11627: UNION
11628: PPUSH
11629: LD_INT 39
11631: PPUSH
11632: LD_INT 26
11634: PPUSH
11635: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11639: LD_EXP 35
11643: PUSH
11644: LD_EXP 44
11648: UNION
11649: PUSH
11650: LD_EXP 45
11654: UNION
11655: PPUSH
11656: LD_EXP 31
11660: PPUSH
11661: CALL_OW 179
// p := 0 ;
11665: LD_ADDR_VAR 0 2
11669: PUSH
11670: LD_INT 0
11672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11673: LD_INT 35
11675: PPUSH
11676: CALL_OW 67
// p := p + 1 ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_VAR 0 2
11689: PUSH
11690: LD_INT 1
11692: PLUS
11693: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11694: LD_EXP 31
11698: PPUSH
11699: CALL_OW 314
11703: NOT
11704: PUSH
11705: LD_VAR 0 2
11709: PUSH
11710: LD_INT 10
11712: GREATER
11713: OR
11714: IFFALSE 11673
// Say ( Heike , DH-1-capture ) ;
11716: LD_EXP 31
11720: PPUSH
11721: LD_STRING DH-1-capture
11723: PPUSH
11724: CALL_OW 88
// if Markov then
11728: LD_EXP 38
11732: IFFALSE 11746
// Say ( Markov , DMar-1-capture ) ;
11734: LD_EXP 38
11738: PPUSH
11739: LD_STRING DMar-1-capture
11741: PPUSH
11742: CALL_OW 88
// if Sophia then
11746: LD_EXP 37
11750: IFFALSE 11776
// begin Say ( Heike , DH-2-capture ) ;
11752: LD_EXP 31
11756: PPUSH
11757: LD_STRING DH-2-capture
11759: PPUSH
11760: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11764: LD_EXP 37
11768: PPUSH
11769: LD_STRING DS-1-capture
11771: PPUSH
11772: CALL_OW 88
// end ; americanBaseCaptured := true ;
11776: LD_ADDR_EXP 7
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// InGameOff ;
11784: CALL_OW 9
// music_nat := music_auto ;
11788: LD_ADDR_OWVAR 71
11792: PUSH
11793: LD_INT 0
11795: ST_TO_ADDR
// music_class := music_auto ;
11796: LD_ADDR_OWVAR 72
11800: PUSH
11801: LD_INT 0
11803: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11804: LD_STRING ConstructBase
11806: PPUSH
11807: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: LD_INT 22
11818: PUSH
11819: LD_INT 1
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 3
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 69
11844: PUSH
11845: FOR_IN
11846: IFFALSE 11862
// SetSide ( i , 2 ) ;
11848: LD_VAR 0 1
11852: PPUSH
11853: LD_INT 2
11855: PPUSH
11856: CALL_OW 235
11860: GO 11845
11862: POP
11863: POP
// end ;
11864: PPOPN 2
11866: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11867: LD_EXP 14
11871: PUSH
11872: LD_INT 3
11874: GREATEREQUAL
11875: IFFALSE 11887
11877: GO 11879
11879: DISABLE
// SetAchievement ( ACH_ENG ) ;
11880: LD_STRING ACH_ENG
11882: PPUSH
11883: CALL_OW 543
11887: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11888: LD_INT 22
11890: PUSH
11891: LD_INT 2
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 25
11900: PUSH
11901: LD_INT 15
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PPUSH
11912: CALL_OW 69
11916: PUSH
11917: LD_INT 4
11919: GREATEREQUAL
11920: IFFALSE 11932
11922: GO 11924
11924: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11925: LD_STRING ACH_APEGEN
11927: PPUSH
11928: CALL_OW 543
11932: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11933: LD_INT 22
11935: PUSH
11936: LD_INT 2
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 30
11945: PUSH
11946: LD_INT 2
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: LD_INT 57
11958: PUSH
11959: EMPTY
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 69
11975: IFFALSE 12240
11977: GO 11979
11979: DISABLE
// begin workshopBuilded := true ;
11980: LD_ADDR_EXP 11
11984: PUSH
11985: LD_INT 1
11987: ST_TO_ADDR
// if IsOk ( Markov ) then
11988: LD_EXP 38
11992: PPUSH
11993: CALL_OW 302
11997: IFFALSE 12056
// begin Say ( Heike , DH-1-shop-a ) ;
11999: LD_EXP 31
12003: PPUSH
12004: LD_STRING DH-1-shop-a
12006: PPUSH
12007: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12011: LD_INT 47
12013: PPUSH
12014: LD_INT 2
12016: PPUSH
12017: CALL_OW 321
12021: PUSH
12022: LD_INT 2
12024: EQUAL
12025: PUSH
12026: LD_INT 45
12028: PPUSH
12029: LD_INT 2
12031: PPUSH
12032: CALL_OW 321
12036: PUSH
12037: LD_INT 2
12039: EQUAL
12040: AND
12041: NOT
12042: IFFALSE 12056
// Say ( Markov , DMar-1-shop-a ) ;
12044: LD_EXP 38
12048: PPUSH
12049: LD_STRING DMar-1-shop-a
12051: PPUSH
12052: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12056: LD_INT 35
12058: PPUSH
12059: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12063: LD_INT 47
12065: PPUSH
12066: LD_INT 2
12068: PPUSH
12069: CALL_OW 321
12073: PUSH
12074: LD_INT 2
12076: EQUAL
12077: PUSH
12078: LD_INT 45
12080: PPUSH
12081: LD_INT 2
12083: PPUSH
12084: CALL_OW 321
12088: PUSH
12089: LD_INT 2
12091: EQUAL
12092: OR
12093: IFFALSE 12056
// if IsOk ( Markov ) and IsOk ( Heike ) then
12095: LD_EXP 38
12099: PPUSH
12100: CALL_OW 302
12104: PUSH
12105: LD_EXP 31
12109: PPUSH
12110: CALL_OW 302
12114: AND
12115: IFFALSE 12233
// begin DialogueOn ;
12117: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12121: LD_EXP 38
12125: PPUSH
12126: LD_STRING DMar-1-shop
12128: PPUSH
12129: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12133: LD_EXP 31
12137: PPUSH
12138: LD_STRING DH-1-shop
12140: PPUSH
12141: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12145: LD_EXP 38
12149: PPUSH
12150: LD_STRING DMar-2-shop
12152: PPUSH
12153: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12157: LD_EXP 38
12161: PPUSH
12162: LD_STRING DMar-3-shop
12164: PPUSH
12165: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12169: LD_EXP 31
12173: PPUSH
12174: LD_STRING DH-2-shop
12176: PPUSH
12177: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12181: LD_EXP 38
12185: PPUSH
12186: LD_STRING DMar-4-shop
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12193: LD_EXP 31
12197: PPUSH
12198: LD_STRING DH-3-shop
12200: PPUSH
12201: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12205: LD_EXP 38
12209: PPUSH
12210: LD_STRING DMar-5-shop
12212: PPUSH
12213: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12217: LD_EXP 31
12221: PPUSH
12222: LD_STRING DH-4-shop
12224: PPUSH
12225: CALL_OW 88
// DialogueOff ;
12229: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12233: LD_STRING ConstructVeh
12235: PPUSH
12236: CALL_OW 337
// end ;
12240: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12241: LD_INT 2
12243: PPUSH
12244: LD_INT 2
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL 40866 0 3
12254: PUSH
12255: LD_INT 0
12257: EQUAL
12258: IFFALSE 12270
12260: GO 12262
12262: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12263: LD_STRING Techs
12265: PPUSH
12266: CALL_OW 337
12270: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12271: LD_EXP 38
12275: PPUSH
12276: CALL_OW 302
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_INT 2
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 34
12296: PUSH
12297: LD_INT 22
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 35
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: AND
12328: IFFALSE 12435
12330: GO 12332
12332: DISABLE
// begin DialogueOn ;
12333: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12337: LD_INT 22
12339: PUSH
12340: LD_INT 2
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 2
12349: PUSH
12350: LD_INT 34
12352: PUSH
12353: LD_INT 22
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 35
12362: PUSH
12363: LD_INT 22
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 69
12383: PPUSH
12384: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12388: LD_INT 10
12390: PPUSH
12391: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12395: LD_EXP 31
12399: PPUSH
12400: LD_STRING DH-1-bal
12402: PPUSH
12403: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12407: LD_EXP 38
12411: PPUSH
12412: LD_STRING DMar-1-bal
12414: PPUSH
12415: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12419: LD_EXP 31
12423: PPUSH
12424: LD_STRING DH-2-bal
12426: PPUSH
12427: CALL_OW 88
// DialogueOff ;
12431: CALL_OW 7
// end ;
12435: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12436: LD_EXP 35
12440: PPUSH
12441: CALL_OW 302
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_INT 2
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 30
12458: PUSH
12459: LD_INT 6
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: AND
12475: IFFALSE 12536
12477: GO 12479
12479: DISABLE
// begin DialogueOn ;
12480: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12484: LD_EXP 35
12488: PPUSH
12489: LD_STRING DA-1-lab
12491: PPUSH
12492: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12496: LD_EXP 31
12500: PPUSH
12501: LD_STRING DH-1-lab
12503: PPUSH
12504: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12508: LD_EXP 35
12512: PPUSH
12513: LD_STRING DA-2-lab
12515: PPUSH
12516: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12520: LD_EXP 31
12524: PPUSH
12525: LD_STRING DH-2-lab
12527: PPUSH
12528: CALL_OW 88
// DialogueOff ;
12532: CALL_OW 7
// end ;
12536: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12537: LD_EXP 36
12541: PPUSH
12542: CALL_OW 302
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 25
12559: PUSH
12560: LD_INT 15
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PPUSH
12571: CALL_OW 69
12575: AND
12576: PUSH
12577: LD_INT 81
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 69
12591: NOT
12592: AND
12593: IFFALSE 12782
12595: GO 12597
12597: DISABLE
12598: LD_INT 0
12600: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 25
12618: PUSH
12619: LD_INT 15
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 69
12634: ST_TO_ADDR
// InGameOn ;
12635: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12639: LD_VAR 0 1
12643: PUSH
12644: LD_INT 1
12646: ARRAY
12647: PPUSH
12648: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12652: LD_VAR 0 1
12656: PUSH
12657: LD_INT 1
12659: ARRAY
12660: PPUSH
12661: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12665: LD_EXP 36
12669: PPUSH
12670: LD_STRING DK-1-apesol
12672: PPUSH
12673: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12677: LD_VAR 0 1
12681: PUSH
12682: LD_INT 1
12684: ARRAY
12685: PPUSH
12686: LD_INT 35
12688: PPUSH
12689: LD_INT 28
12691: PPUSH
12692: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12696: LD_VAR 0 1
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PPUSH
12705: LD_INT 36
12707: PPUSH
12708: LD_INT 17
12710: PPUSH
12711: CALL_OW 171
// wait ( 0 0$2 ) ;
12715: LD_INT 70
12717: PPUSH
12718: CALL_OW 67
// DialogueOn ;
12722: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DA-1-apesol
12733: PPUSH
12734: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12738: LD_EXP 36
12742: PPUSH
12743: LD_STRING DK-2-apesol
12745: PPUSH
12746: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12750: LD_EXP 35
12754: PPUSH
12755: LD_STRING DA-2-apesol
12757: PPUSH
12758: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12762: LD_EXP 36
12766: PPUSH
12767: LD_STRING DK-3-apesol
12769: PPUSH
12770: CALL_OW 88
// DialogueOff ;
12774: CALL_OW 7
// InGameOff ;
12778: CALL_OW 9
// end ;
12782: PPOPN 1
12784: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12785: LD_EXP 37
12789: PPUSH
12790: CALL_OW 302
12794: PUSH
12795: LD_INT 22
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 25
12807: PUSH
12808: LD_INT 16
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 69
12823: AND
12824: PUSH
12825: LD_INT 81
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: NOT
12840: AND
12841: IFFALSE 13155
12843: GO 12845
12845: DISABLE
12846: LD_INT 0
12848: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12849: LD_ADDR_VAR 0 1
12853: PUSH
12854: LD_INT 22
12856: PUSH
12857: LD_INT 2
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 25
12866: PUSH
12867: LD_INT 16
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 69
12882: ST_TO_ADDR
// blockAttack := true ;
12883: LD_ADDR_EXP 29
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// InGameOn ;
12891: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12895: LD_INT 35
12897: PPUSH
12898: LD_INT 22
12900: PPUSH
12901: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12905: LD_INT 5
12907: PPUSH
12908: LD_INT 35
12910: PPUSH
12911: LD_INT 22
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12921: LD_EXP 37
12925: PPUSH
12926: LD_VAR 0 1
12930: PUSH
12931: LD_INT 1
12933: ARRAY
12934: PPUSH
12935: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12939: LD_VAR 0 1
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12952: LD_VAR 0 1
12956: PUSH
12957: LD_INT 1
12959: ARRAY
12960: PPUSH
12961: CALL_OW 122
// wait ( 0 0$2 ) ;
12965: LD_INT 70
12967: PPUSH
12968: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12972: LD_EXP 37
12976: PPUSH
12977: LD_STRING DS-1-apeeng
12979: PPUSH
12980: CALL_OW 88
// if IsOk ( Kamil ) then
12984: LD_EXP 34
12988: PPUSH
12989: CALL_OW 302
12993: IFFALSE 13143
// begin Say ( Kamil , DKam-1-apeeng ) ;
12995: LD_EXP 34
12999: PPUSH
13000: LD_STRING DKam-1-apeeng
13002: PPUSH
13003: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13007: LD_EXP 37
13011: PPUSH
13012: LD_STRING DS-2-apeeng
13014: PPUSH
13015: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13019: LD_EXP 34
13023: PPUSH
13024: LD_STRING DKam-2-apeeng
13026: PPUSH
13027: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13031: LD_EXP 37
13035: PPUSH
13036: LD_STRING DS-3-apeeng
13038: PPUSH
13039: CALL_OW 88
// if not IsOK ( Kaia ) then
13043: LD_EXP 36
13047: PPUSH
13048: CALL_OW 302
13052: NOT
13053: IFFALSE 13069
// begin InGameOff ;
13055: CALL_OW 9
// blockAttack := false ;
13059: LD_ADDR_EXP 29
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// exit ;
13067: GO 13155
// end ; Say ( Kaia , DK-1-apeeng ) ;
13069: LD_EXP 36
13073: PPUSH
13074: LD_STRING DK-1-apeeng
13076: PPUSH
13077: CALL_OW 88
// if not IsOk ( Givi ) then
13081: LD_EXP 32
13085: PPUSH
13086: CALL_OW 302
13090: NOT
13091: IFFALSE 13107
// begin InGameOff ;
13093: CALL_OW 9
// blockAttack := false ;
13097: LD_ADDR_EXP 29
13101: PUSH
13102: LD_INT 0
13104: ST_TO_ADDR
// exit ;
13105: GO 13155
// end ; Say ( Givi , DG-1-apeeng ) ;
13107: LD_EXP 32
13111: PPUSH
13112: LD_STRING DG-1-apeeng
13114: PPUSH
13115: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13119: LD_EXP 36
13123: PPUSH
13124: LD_STRING DK-2-apeeng
13126: PPUSH
13127: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13131: LD_EXP 36
13135: PPUSH
13136: LD_STRING DK-3-apeeng
13138: PPUSH
13139: CALL_OW 88
// end ; InGameOff ;
13143: CALL_OW 9
// blockAttack := false ;
13147: LD_ADDR_EXP 29
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// end ;
13155: PPOPN 1
13157: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13158: LD_EXP 4
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 30
13175: PUSH
13176: LD_INT 0
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: AND
13192: IFFALSE 13373
13194: GO 13196
13196: DISABLE
// begin blockAttack := true ;
13197: LD_ADDR_EXP 29
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13205: LD_INT 350
13207: PPUSH
13208: CALL_OW 67
// DialogueOn ;
13212: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13216: LD_EXP 39
13220: PPUSH
13221: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13225: LD_EXP 39
13229: PPUSH
13230: LD_STRING DF-1-distribution
13232: PPUSH
13233: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13237: LD_EXP 31
13241: PPUSH
13242: LD_STRING DH-2-distribution
13244: PPUSH
13245: CALL_OW 88
// if IsOk ( Kaia ) then
13249: LD_EXP 36
13253: PPUSH
13254: CALL_OW 302
13258: IFFALSE 13319
// begin Say ( Kaia , DK-1-distribution ) ;
13260: LD_EXP 36
13264: PPUSH
13265: LD_STRING DK-1-distribution
13267: PPUSH
13268: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13272: LD_EXP 31
13276: PPUSH
13277: LD_STRING DH-1-distribution
13279: PPUSH
13280: CALL_OW 88
// if IsOk ( Givi ) then
13284: LD_EXP 32
13288: PPUSH
13289: CALL_OW 302
13293: IFFALSE 13319
// begin Say ( Givi , DG-1-distribution ) ;
13295: LD_EXP 32
13299: PPUSH
13300: LD_STRING DG-1-distribution
13302: PPUSH
13303: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13307: LD_EXP 31
13311: PPUSH
13312: LD_STRING DH-3-distribution
13314: PPUSH
13315: CALL_OW 88
// end ; end ; DialogueOff ;
13319: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13323: LD_STRING Crates1
13325: PPUSH
13326: CALL_OW 337
// farmerRequestedCrates := 300 ;
13330: LD_ADDR_EXP 17
13334: PUSH
13335: LD_INT 300
13337: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13338: LD_STRING FarmerCrates
13340: PPUSH
13341: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13345: LD_INT 10
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: CALL_OW 424
// blockAttack := false ;
13355: LD_ADDR_EXP 29
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13363: LD_INT 108
13365: PPUSH
13366: LD_INT 61
13368: PPUSH
13369: CALL_OW 86
// end ;
13373: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13374: LD_EXP 7
13378: PUSH
13379: LD_INT 22
13381: PUSH
13382: LD_INT 2
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: LD_INT 57
13394: PUSH
13395: EMPTY
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: LD_INT 30
13407: PUSH
13408: LD_INT 6
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: LD_INT 7
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: AND
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 3
13453: PUSH
13454: LD_INT 57
13456: PUSH
13457: EMPTY
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 30
13466: PUSH
13467: LD_INT 4
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PPUSH
13479: CALL_OW 69
13483: AND
13484: IFFALSE 13648
13486: GO 13488
13488: DISABLE
13489: LD_INT 0
13491: PPUSH
// begin wait ( 0 0$10 ) ;
13492: LD_INT 350
13494: PPUSH
13495: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13499: LD_ADDR_VAR 0 1
13503: PUSH
13504: LD_EXP 45
13508: PPUSH
13509: LD_INT 26
13511: PUSH
13512: LD_INT 1
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 25
13521: PUSH
13522: LD_INT 2
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PPUSH
13533: CALL_OW 72
13537: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13538: LD_EXP 31
13542: PPUSH
13543: LD_STRING DH-1-task
13545: PPUSH
13546: CALL_OW 88
// if IsOk ( Sophia ) then
13550: LD_EXP 37
13554: PPUSH
13555: CALL_OW 302
13559: IFFALSE 13599
// begin Say ( Sophia , DS-1-task ) ;
13561: LD_EXP 37
13565: PPUSH
13566: LD_STRING DS-1-task
13568: PPUSH
13569: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13573: LD_EXP 37
13577: PPUSH
13578: LD_STRING DS-2-task
13580: PPUSH
13581: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13585: LD_EXP 31
13589: PPUSH
13590: LD_STRING DH-2-task
13592: PPUSH
13593: CALL_OW 88
// end else
13597: GO 13633
// if eng then
13599: LD_VAR 0 1
13603: IFFALSE 13633
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13605: LD_VAR 0 1
13609: PUSH
13610: LD_INT 1
13612: ARRAY
13613: PPUSH
13614: LD_STRING DArm-1-task
13616: PPUSH
13617: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13621: LD_EXP 31
13625: PPUSH
13626: LD_STRING DH-2-task
13628: PPUSH
13629: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13633: LD_STRING BaseConstructed
13635: PPUSH
13636: CALL_OW 337
// allowConvoys := true ;
13640: LD_ADDR_EXP 13
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// end ;
13648: PPOPN 1
13650: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13651: LD_INT 22
13653: PUSH
13654: LD_INT 4
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 34
13663: PUSH
13664: LD_INT 12
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 69
13679: IFFALSE 13847
13681: GO 13683
13683: DISABLE
13684: LD_INT 0
13686: PPUSH
13687: PPUSH
13688: PPUSH
// begin wait ( 0 0$2 ) ;
13689: LD_INT 70
13691: PPUSH
13692: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13696: LD_ADDR_VAR 0 1
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_INT 4
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 34
13713: PUSH
13714: LD_INT 12
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PPUSH
13725: CALL_OW 69
13729: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_VAR 0 1
13739: PUSH
13740: LD_INT 1
13742: ARRAY
13743: PPUSH
13744: CALL_OW 250
13748: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: LD_VAR 0 1
13758: PUSH
13759: LD_INT 1
13761: ARRAY
13762: PPUSH
13763: CALL_OW 251
13767: ST_TO_ADDR
// DialogueOn ;
13768: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13772: LD_VAR 0 2
13776: PPUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13786: LD_VAR 0 2
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 2
13798: PPUSH
13799: LD_INT 6
13801: NEG
13802: PPUSH
13803: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13807: LD_INT 10
13809: PPUSH
13810: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13814: LD_EXP 31
13818: PPUSH
13819: LD_STRING DH-1-seecargo
13821: PPUSH
13822: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13826: LD_VAR 0 2
13830: PPUSH
13831: LD_VAR 0 3
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 331
// DialogueOff ;
13843: CALL_OW 7
// end ;
13847: PPOPN 3
13849: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13850: LD_EXP 4
13854: PUSH
13855: LD_EXP 16
13859: PUSH
13860: LD_INT 300
13862: GREATEREQUAL
13863: AND
13864: IFFALSE 13936
13866: GO 13868
13868: DISABLE
// begin DialogueOn ;
13869: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13873: LD_EXP 39
13877: PPUSH
13878: LD_STRING DF-1-delivery-2
13880: PPUSH
13881: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13885: LD_EXP 31
13889: PPUSH
13890: LD_STRING DH-1-delivery-2
13892: PPUSH
13893: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13897: LD_EXP 39
13901: PPUSH
13902: LD_STRING DF-2-delivery-2
13904: PPUSH
13905: CALL_OW 94
// DialogueOff ;
13909: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13913: LD_STRING Crates2
13915: PPUSH
13916: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13920: LD_ADDR_EXP 18
13924: PUSH
13925: LD_INT 63000
13927: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13928: LD_ADDR_EXP 17
13932: PUSH
13933: LD_INT 600
13935: ST_TO_ADDR
// end ;
13936: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13937: LD_EXP 4
13941: PUSH
13942: LD_EXP 16
13946: PUSH
13947: LD_INT 600
13949: GREATEREQUAL
13950: AND
13951: PUSH
13952: LD_OWVAR 67
13956: PUSH
13957: LD_INT 1
13959: GREATER
13960: AND
13961: IFFALSE 14161
13963: GO 13965
13965: DISABLE
// begin DialogueOn ;
13966: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13970: LD_EXP 39
13974: PPUSH
13975: LD_STRING DF-1-delivery-3
13977: PPUSH
13978: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13982: LD_EXP 31
13986: PPUSH
13987: LD_STRING DH-1-delivery-3
13989: PPUSH
13990: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13994: LD_EXP 39
13998: PPUSH
13999: LD_STRING DF-2-delivery-3
14001: PPUSH
14002: CALL_OW 94
// if IsOk ( Kaia ) then
14006: LD_EXP 36
14010: PPUSH
14011: CALL_OW 302
14015: IFFALSE 14065
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14017: LD_EXP 36
14021: PPUSH
14022: LD_STRING DK-1-delivery-3
14024: PPUSH
14025: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14029: LD_EXP 31
14033: PPUSH
14034: LD_STRING DH-2-delivery-3
14036: PPUSH
14037: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14041: LD_EXP 32
14045: PPUSH
14046: LD_STRING DG-1-delivery-3
14048: PPUSH
14049: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14053: LD_EXP 33
14057: PPUSH
14058: LD_STRING DM-1-delivery-3
14060: PPUSH
14061: CALL_OW 88
// end ; DialogueOff ;
14065: CALL_OW 7
// case Difficulty of 2 :
14069: LD_OWVAR 67
14073: PUSH
14074: LD_INT 2
14076: DOUBLE
14077: EQUAL
14078: IFTRUE 14082
14080: GO 14100
14082: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14083: LD_STRING Crates3
14085: PPUSH
14086: CALL_OW 337
// farmerRequestedCrates := 900 ;
14090: LD_ADDR_EXP 17
14094: PUSH
14095: LD_INT 900
14097: ST_TO_ADDR
// end ; 3 :
14098: GO 14153
14100: LD_INT 3
14102: DOUBLE
14103: EQUAL
14104: IFTRUE 14108
14106: GO 14126
14108: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14109: LD_STRING Crates4
14111: PPUSH
14112: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14116: LD_ADDR_EXP 17
14120: PUSH
14121: LD_INT 1200
14123: ST_TO_ADDR
// end ; 4 :
14124: GO 14153
14126: LD_INT 4
14128: DOUBLE
14129: EQUAL
14130: IFTRUE 14134
14132: GO 14152
14134: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14135: LD_STRING Crates5
14137: PPUSH
14138: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14142: LD_ADDR_EXP 17
14146: PUSH
14147: LD_INT 1400
14149: ST_TO_ADDR
// end ; end ;
14150: GO 14153
14152: POP
// farmerCratesCounter := 30 30$00 ;
14153: LD_ADDR_EXP 18
14157: PUSH
14158: LD_INT 63000
14160: ST_TO_ADDR
// end ;
14161: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14162: LD_EXP 4
14166: PUSH
14167: LD_EXP 16
14171: PUSH
14172: LD_INT 600
14174: PUSH
14175: LD_INT 900
14177: PUSH
14178: LD_INT 1200
14180: PUSH
14181: LD_INT 1400
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: AND
14197: IFFALSE 14283
14199: GO 14201
14201: DISABLE
// begin retreatAllowed := true ;
14202: LD_ADDR_EXP 12
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// display_strings := [ ] ;
14210: LD_ADDR_OWVAR 47
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// DialogueOn ;
14217: CALL_OW 6
// InGameOn ;
14221: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14225: LD_EXP 40
14229: PPUSH
14230: LD_STRING DO-radio-end
14232: PPUSH
14233: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14237: LD_EXP 31
14241: PPUSH
14242: LD_STRING DH-1-radio-end
14244: PPUSH
14245: CALL_OW 88
// InGameOff ;
14249: CALL_OW 9
// DialogueOff ;
14253: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14257: LD_STRING Retreat
14259: PPUSH
14260: CALL_OW 337
// wait ( 0 0$2 ) ;
14264: LD_INT 70
14266: PPUSH
14267: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14271: LD_EXP 31
14275: PPUSH
14276: LD_STRING DH-2-radio-end
14278: PPUSH
14279: CALL_OW 88
// end ;
14283: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14284: LD_EXP 12
14288: IFFALSE 14419
14290: GO 14292
14292: DISABLE
14293: LD_INT 0
14295: PPUSH
14296: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14297: LD_INT 10
14299: PPUSH
14300: LD_INT 0
14302: PPUSH
14303: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14307: LD_ADDR_VAR 0 1
14311: PUSH
14312: LD_EXP 42
14316: PPUSH
14317: LD_INT 25
14319: PUSH
14320: LD_INT 2
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 72
14331: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14332: LD_VAR 0 1
14336: PUSH
14337: LD_INT 102
14339: PPUSH
14340: LD_INT 69
14342: PPUSH
14343: CALL_OW 428
14347: PUSH
14348: LD_INT 0
14350: EQUAL
14351: AND
14352: IFFALSE 14419
// begin for i in tmp do
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_VAR 0 1
14363: PUSH
14364: FOR_IN
14365: IFFALSE 14389
// if IsInUnit ( i ) then
14367: LD_VAR 0 2
14371: PPUSH
14372: CALL_OW 310
14376: IFFALSE 14387
// ComExitBuilding ( i ) ;
14378: LD_VAR 0 2
14382: PPUSH
14383: CALL_OW 122
14387: GO 14364
14389: POP
14390: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14391: LD_VAR 0 1
14395: PPUSH
14396: LD_INT 31
14398: PPUSH
14399: LD_INT 102
14401: PPUSH
14402: LD_INT 69
14404: PPUSH
14405: LD_INT 2
14407: PPUSH
14408: CALL_OW 205
// wait ( 0 0$3 ) ;
14412: LD_INT 105
14414: PPUSH
14415: CALL_OW 67
// end ; end ;
14419: PPOPN 2
14421: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14422: LD_EXP 12
14426: NOT
14427: PUSH
14428: LD_INT 5
14430: PPUSH
14431: CALL_OW 301
14435: AND
14436: IFFALSE 14468
14438: GO 14440
14440: DISABLE
// begin DialogueOn ;
14441: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14445: LD_EXP 39
14449: PPUSH
14450: LD_STRING DF-1-failure
14452: PPUSH
14453: CALL_OW 94
// DialogueOff ;
14457: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14461: LD_STRING FarmerDepot
14463: PPUSH
14464: CALL_OW 104
// end ;
14468: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14469: LD_EXP 12
14473: PUSH
14474: LD_EXP 31
14478: PPUSH
14479: LD_EXP 39
14483: PPUSH
14484: CALL_OW 296
14488: PUSH
14489: LD_INT 12
14491: LESS
14492: AND
14493: PUSH
14494: LD_INT 81
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 21
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PPUSH
14518: CALL_OW 69
14522: NOT
14523: AND
14524: IFFALSE 15208
14526: GO 14528
14528: DISABLE
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
14533: PPUSH
// begin allowConvoys := false ;
14534: LD_ADDR_EXP 13
14538: PUSH
14539: LD_INT 0
14541: ST_TO_ADDR
// InGameOn ;
14542: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14546: LD_EXP 31
14550: PPUSH
14551: LD_EXP 39
14555: PPUSH
14556: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14560: LD_EXP 39
14564: PPUSH
14565: LD_EXP 31
14569: PPUSH
14570: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14574: LD_EXP 39
14578: PPUSH
14579: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14583: LD_EXP 31
14587: PPUSH
14588: LD_STRING DH-1-end
14590: PPUSH
14591: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14595: LD_EXP 39
14599: PPUSH
14600: LD_STRING DF-1-end
14602: PPUSH
14603: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14607: LD_EXP 39
14611: PPUSH
14612: LD_STRING DF-2-end
14614: PPUSH
14615: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14619: LD_EXP 31
14623: PPUSH
14624: LD_STRING DH-2-end
14626: PPUSH
14627: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14631: LD_EXP 39
14635: PPUSH
14636: LD_STRING DF-3-end
14638: PPUSH
14639: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14643: LD_EXP 31
14647: PPUSH
14648: LD_STRING DH-3-end
14650: PPUSH
14651: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14655: LD_EXP 32
14659: PPUSH
14660: LD_STRING DG-1-end
14662: PPUSH
14663: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14667: LD_EXP 31
14671: PPUSH
14672: LD_STRING DH-4-end
14674: PPUSH
14675: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14679: LD_EXP 39
14683: PPUSH
14684: LD_STRING DF-4-end
14686: PPUSH
14687: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14691: LD_EXP 31
14695: PPUSH
14696: LD_STRING DH-5-end
14698: PPUSH
14699: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14703: LD_EXP 39
14707: PPUSH
14708: LD_STRING DF-5-end
14710: PPUSH
14711: CALL_OW 88
// InGameOff ;
14715: CALL_OW 9
// allowCargoEvacuation := true ;
14719: LD_ADDR_EXP 8
14723: PUSH
14724: LD_INT 1
14726: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14727: LD_ADDR_VAR 0 2
14731: PUSH
14732: LD_INT 4
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 2
14740: PUSH
14741: LD_INT 1
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: LD_OWVAR 67
14754: ARRAY
14755: ST_TO_ADDR
// if farmerSquad < max then
14756: LD_EXP 42
14760: PUSH
14761: LD_VAR 0 2
14765: LESS
14766: IFFALSE 14778
// max := farmerSquad ;
14768: LD_ADDR_VAR 0 2
14772: PUSH
14773: LD_EXP 42
14777: ST_TO_ADDR
// for i := 1 to max do
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: DOUBLE
14784: LD_INT 1
14786: DEC
14787: ST_TO_ADDR
14788: LD_VAR 0 2
14792: PUSH
14793: FOR_TO
14794: IFFALSE 14832
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14796: LD_EXP 42
14800: PUSH
14801: LD_INT 1
14803: ARRAY
14804: PPUSH
14805: LD_INT 2
14807: PPUSH
14808: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14812: LD_ADDR_EXP 42
14816: PUSH
14817: LD_EXP 42
14821: PPUSH
14822: LD_INT 1
14824: PPUSH
14825: CALL_OW 3
14829: ST_TO_ADDR
// end ;
14830: GO 14793
14832: POP
14833: POP
// for i in Farmer ^ farmerSquad do
14834: LD_ADDR_VAR 0 1
14838: PUSH
14839: LD_EXP 39
14843: PUSH
14844: LD_EXP 42
14848: ADD
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14890
// begin if IsInUnit ( i ) then
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 310
14862: IFFALSE 14873
// ComExitBuilding ( i ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_INT 102
14880: PPUSH
14881: LD_INT 7
14883: PPUSH
14884: CALL_OW 171
// end ;
14888: GO 14850
14890: POP
14891: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14892: LD_ADDR_VAR 0 1
14896: PUSH
14897: LD_INT 22
14899: PUSH
14900: LD_INT 5
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 21
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_INT 5
14928: DIFF
14929: PUSH
14930: FOR_IN
14931: IFFALSE 14947
// SetSide ( i , 2 ) ;
14933: LD_VAR 0 1
14937: PPUSH
14938: LD_INT 2
14940: PPUSH
14941: CALL_OW 235
14945: GO 14930
14947: POP
14948: POP
// wait ( 0 0$2 ) ;
14949: LD_INT 70
14951: PPUSH
14952: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14956: LD_EXP 31
14960: PPUSH
14961: LD_STRING DH-6-end
14963: PPUSH
14964: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14968: LD_INT 35
14970: PPUSH
14971: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14975: LD_ADDR_VAR 0 3
14979: PUSH
14980: LD_EXP 39
14984: PUSH
14985: LD_EXP 42
14989: ADD
14990: PPUSH
14991: LD_INT 95
14993: PUSH
14994: LD_INT 3
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 72
15005: ST_TO_ADDR
// if tmp then
15006: LD_VAR 0 3
15010: IFFALSE 15054
// for i in tmp do
15012: LD_ADDR_VAR 0 1
15016: PUSH
15017: LD_VAR 0 3
15021: PUSH
15022: FOR_IN
15023: IFFALSE 15052
// begin farmerSquad := farmerSquad diff i ;
15025: LD_ADDR_EXP 42
15029: PUSH
15030: LD_EXP 42
15034: PUSH
15035: LD_VAR 0 1
15039: DIFF
15040: ST_TO_ADDR
// RemoveUnit ( i ) ;
15041: LD_VAR 0 1
15045: PPUSH
15046: CALL_OW 64
// end ;
15050: GO 15022
15052: POP
15053: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15054: LD_EXP 42
15058: PUSH
15059: EMPTY
15060: EQUAL
15061: PUSH
15062: LD_EXP 39
15066: PPUSH
15067: CALL_OW 305
15071: NOT
15072: AND
15073: IFFALSE 14968
// if farmerHumanLoseCounter = 0 then
15075: LD_EXP 21
15079: PUSH
15080: LD_INT 0
15082: EQUAL
15083: IFFALSE 15092
// SetAchievement ( ACH_BABY ) ;
15085: LD_STRING ACH_BABY
15087: PPUSH
15088: CALL_OW 543
// wait ( 1 1$00 ) ;
15092: LD_INT 2100
15094: PPUSH
15095: CALL_OW 67
// SendAttack ;
15099: CALL 6126 0 0
// Say ( Heike , DH-7-end ) ;
15103: LD_EXP 31
15107: PPUSH
15108: LD_STRING DH-7-end
15110: PPUSH
15111: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15115: LD_ADDR_VAR 0 1
15119: PUSH
15120: DOUBLE
15121: LD_INT 1
15123: DEC
15124: ST_TO_ADDR
15125: LD_INT 2
15127: PUSH
15128: LD_INT 3
15130: PUSH
15131: LD_INT 3
15133: PUSH
15134: LD_INT 4
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: PUSH
15143: LD_OWVAR 67
15147: ARRAY
15148: PUSH
15149: FOR_TO
15150: IFFALSE 15206
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15152: LD_INT 4200
15154: PUSH
15155: LD_INT 3500
15157: PUSH
15158: LD_INT 3150
15160: PUSH
15161: LD_INT 2800
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: LD_OWVAR 67
15174: ARRAY
15175: PPUSH
15176: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15180: LD_EXP 12
15184: PUSH
15185: LD_EXP 22
15189: PUSH
15190: LD_INT 1
15192: LESS
15193: AND
15194: IFFALSE 15200
// exit ;
15196: POP
15197: POP
15198: GO 15208
// SendAttack ;
15200: CALL 6126 0 0
// end ;
15204: GO 15149
15206: POP
15207: POP
// end ;
15208: PPOPN 3
15210: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15211: LD_EXP 8
15215: PUSH
15216: LD_EXP 22
15220: PUSH
15221: LD_INT 0
15223: GREATER
15224: AND
15225: IFFALSE 15235
15227: GO 15229
15229: DISABLE
// begin enable ;
15230: ENABLE
// CargoEvacuation ;
15231: CALL 3599 0 0
// end ;
15235: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15236: LD_EXP 18
15240: PUSH
15241: LD_INT 18900
15243: LESSEQUAL
15244: IFFALSE 15293
15246: GO 15248
15248: DISABLE
// begin DialogueOn ;
15249: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15253: LD_EXP 39
15257: PPUSH
15258: LD_STRING DF-1-distribution-a
15260: PPUSH
15261: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15265: LD_EXP 31
15269: PPUSH
15270: LD_STRING DH-1-distribution-a
15272: PPUSH
15273: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15277: LD_EXP 39
15281: PPUSH
15282: LD_STRING DF-2-distribution-a
15284: PPUSH
15285: CALL_OW 94
// DialogueOff ;
15289: CALL_OW 7
// end ;
15293: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15294: LD_EXP 18
15298: PUSH
15299: LD_INT 0
15301: LESSEQUAL
15302: IFFALSE 15334
15304: GO 15306
15306: DISABLE
// begin DialogueOn ;
15307: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15311: LD_EXP 39
15315: PPUSH
15316: LD_STRING DF-3-distribution-a
15318: PPUSH
15319: CALL_OW 94
// YouLost ( Distribution ) ;
15323: LD_STRING Distribution
15325: PPUSH
15326: CALL_OW 104
// DialogueOff ;
15330: CALL_OW 7
// end ;
15334: END
// every 0 0$1 trigger vehCounter >= 2 do
15335: LD_EXP 23
15339: PUSH
15340: LD_INT 2
15342: GREATEREQUAL
15343: IFFALSE 15355
15345: GO 15347
15347: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15348: LD_STRING VehConstructed
15350: PPUSH
15351: CALL_OW 337
15355: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15356: LD_INT 22
15358: PUSH
15359: LD_INT 2
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 34
15368: PUSH
15369: LD_INT 12
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 69
15384: IFFALSE 15444
15386: GO 15388
15388: DISABLE
// begin DialogueOn ;
15389: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15393: LD_EXP 31
15397: PPUSH
15398: LD_STRING DH-1-truck
15400: PPUSH
15401: CALL_OW 88
// if IsOk ( Markov ) then
15405: LD_EXP 38
15409: PPUSH
15410: CALL_OW 302
15414: IFFALSE 15440
// begin Say ( Markov , DMar-1-truck ) ;
15416: LD_EXP 38
15420: PPUSH
15421: LD_STRING DMar-1-truck
15423: PPUSH
15424: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15428: LD_EXP 31
15432: PPUSH
15433: LD_STRING DH-2-truck
15435: PPUSH
15436: CALL_OW 88
// end ; DialogueOff ;
15440: CALL_OW 7
// end ;
15444: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15445: LD_INT 0
15447: PPUSH
15448: PPUSH
15449: PPUSH
// if IsOk ( Givi ) then
15450: LD_EXP 32
15454: PPUSH
15455: CALL_OW 302
15459: IFFALSE 15475
// begin Say ( Givi , DG-1-nocargo ) ;
15461: LD_EXP 32
15465: PPUSH
15466: LD_STRING DG-1-nocargo
15468: PPUSH
15469: CALL_OW 88
// exit ;
15473: GO 15571
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: LD_EXP 45
15484: PPUSH
15485: LD_INT 26
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 72
15499: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15500: LD_ADDR_VAR 0 3
15504: PUSH
15505: LD_EXP 45
15509: PPUSH
15510: LD_INT 26
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 72
15524: ST_TO_ADDR
// if randomMen then
15525: LD_VAR 0 2
15529: IFFALSE 15549
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15531: LD_VAR 0 2
15535: PUSH
15536: LD_INT 1
15538: ARRAY
15539: PPUSH
15540: LD_STRING DArm-1-nocargo
15542: PPUSH
15543: CALL_OW 88
15547: GO 15571
// if randomWomen then
15549: LD_VAR 0 3
15553: IFFALSE 15571
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15555: LD_VAR 0 3
15559: PUSH
15560: LD_INT 1
15562: ARRAY
15563: PPUSH
15564: LD_STRING DArf-1-nocargo
15566: PPUSH
15567: CALL_OW 88
// end ;
15571: LD_VAR 0 1
15575: RET
// export function IncomingAttack ; begin
15576: LD_INT 0
15578: PPUSH
// if attackWave = 1 then
15579: LD_EXP 20
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: IFFALSE 15658
// begin DialogueOn ;
15589: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15593: LD_EXP 40
15597: PPUSH
15598: LD_STRING DO-1-radio-1
15600: PPUSH
15601: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15605: LD_EXP 31
15609: PPUSH
15610: LD_STRING DH-1-radio-1-
15612: PPUSH
15613: CALL_OW 88
// if IsOk ( Markov ) then
15617: LD_EXP 38
15621: PPUSH
15622: CALL_OW 302
15626: IFFALSE 15652
// begin Say ( Markov , DMar-1-radio-1 ) ;
15628: LD_EXP 38
15632: PPUSH
15633: LD_STRING DMar-1-radio-1
15635: PPUSH
15636: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15640: LD_EXP 31
15644: PPUSH
15645: LD_STRING DH-2-radio-1
15647: PPUSH
15648: CALL_OW 88
// end ; DialogueOff ;
15652: CALL_OW 7
// end else
15656: GO 15682
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15658: LD_EXP 40
15662: PPUSH
15663: LD_STRING DO-1-radio-u
15665: PPUSH
15666: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15670: LD_EXP 31
15674: PPUSH
15675: LD_STRING DH-1-radio-u
15677: PPUSH
15678: CALL_OW 88
// end ; end ;
15682: LD_VAR 0 1
15686: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15687: LD_EXP 47
15691: PPUSH
15692: LD_INT 95
15694: PUSH
15695: LD_INT 8
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 72
15706: IFFALSE 15809
15708: GO 15710
15710: DISABLE
15711: LD_INT 0
15713: PPUSH
// begin enable ;
15714: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15715: LD_ADDR_VAR 0 1
15719: PUSH
15720: LD_EXP 47
15724: PPUSH
15725: LD_INT 95
15727: PUSH
15728: LD_INT 8
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 72
15739: PUSH
15740: FOR_IN
15741: IFFALSE 15770
// begin usForces := usForces diff i ;
15743: LD_ADDR_EXP 47
15747: PUSH
15748: LD_EXP 47
15752: PUSH
15753: LD_VAR 0 1
15757: DIFF
15758: ST_TO_ADDR
// RemoveUnit ( i ) ;
15759: LD_VAR 0 1
15763: PPUSH
15764: CALL_OW 64
// end ;
15768: GO 15740
15770: POP
15771: POP
// if not americanHasEscaped and attackWave = 1 then
15772: LD_EXP 9
15776: NOT
15777: PUSH
15778: LD_EXP 20
15782: PUSH
15783: LD_INT 1
15785: EQUAL
15786: AND
15787: IFFALSE 15809
// begin americanHasEscaped := true ;
15789: LD_ADDR_EXP 9
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15797: LD_EXP 31
15801: PPUSH
15802: LD_STRING DH-2-assault-a
15804: PPUSH
15805: CALL_OW 88
// end ; end ;
15809: PPOPN 1
15811: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15812: LD_INT 4
15814: PPUSH
15815: LD_INT 22
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PPUSH
15825: CALL_OW 70
15829: PUSH
15830: LD_EXP 12
15834: NOT
15835: AND
15836: IFFALSE 15853
15838: GO 15840
15840: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15841: LD_EXP 39
15845: PPUSH
15846: LD_STRING DF-1-attack
15848: PPUSH
15849: CALL_OW 94
15853: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15854: LD_INT 5
15856: PPUSH
15857: CALL_OW 255
15861: PUSH
15862: LD_INT 2
15864: EQUAL
15865: IFFALSE 15881
15867: GO 15869
15869: DISABLE
// begin enable ;
15870: ENABLE
// SetSide ( arDepot , 5 ) ;
15871: LD_INT 5
15873: PPUSH
15874: LD_INT 5
15876: PPUSH
15877: CALL_OW 235
// end ;
15881: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15882: LD_INT 22
15884: PUSH
15885: LD_INT 1
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 21
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: NOT
15911: PUSH
15912: LD_INT 22
15914: PUSH
15915: LD_INT 4
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PPUSH
15922: CALL_OW 69
15926: NOT
15927: AND
15928: PUSH
15929: LD_EXP 12
15933: NOT
15934: AND
15935: PUSH
15936: LD_EXP 16
15940: PUSH
15941: LD_INT 90
15943: GREATER
15944: AND
15945: PUSH
15946: LD_INT 7
15948: PPUSH
15949: LD_INT 22
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 70
15977: AND
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_INT 2
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 50
15991: PUSH
15992: EMPTY
15993: LIST
15994: PUSH
15995: LD_INT 30
15997: PUSH
15998: LD_INT 0
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: PPUSH
16010: CALL_OW 69
16014: AND
16015: IFFALSE 16824
16017: GO 16019
16019: DISABLE
16020: LD_INT 0
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
16026: PPUSH
// begin depot := usDepot ;
16027: LD_ADDR_VAR 0 5
16031: PUSH
16032: LD_INT 11
16034: ST_TO_ADDR
// if not depot then
16035: LD_VAR 0 5
16039: NOT
16040: IFFALSE 16080
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16042: LD_ADDR_VAR 0 5
16046: PUSH
16047: LD_INT 22
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 30
16059: PUSH
16060: LD_INT 0
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PPUSH
16071: CALL_OW 69
16075: PUSH
16076: LD_INT 1
16078: ARRAY
16079: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16080: LD_ADDR_VAR 0 1
16084: PUSH
16085: LD_EXP 45
16089: PPUSH
16090: LD_INT 26
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 72
16104: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16105: LD_ADDR_VAR 0 2
16109: PUSH
16110: LD_EXP 45
16114: PPUSH
16115: LD_INT 26
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 72
16129: ST_TO_ADDR
// if IsOk ( Kaia ) then
16130: LD_EXP 36
16134: PPUSH
16135: CALL_OW 302
16139: IFFALSE 16160
// speaker := [ Kaia , DK ] else
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_EXP 36
16150: PUSH
16151: LD_STRING DK
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: ST_TO_ADDR
16158: GO 16240
// if randomMen then
16160: LD_VAR 0 1
16164: IFFALSE 16199
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16166: LD_ADDR_VAR 0 3
16170: PUSH
16171: LD_VAR 0 1
16175: PUSH
16176: LD_INT 1
16178: PPUSH
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 12
16188: ARRAY
16189: PUSH
16190: LD_STRING DArm
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: ST_TO_ADDR
16197: GO 16240
// if randomWomen then
16199: LD_VAR 0 2
16203: IFFALSE 16238
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_VAR 0 2
16214: PUSH
16215: LD_INT 1
16217: PPUSH
16218: LD_VAR 0 2
16222: PPUSH
16223: CALL_OW 12
16227: ARRAY
16228: PUSH
16229: LD_STRING DArf
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: ST_TO_ADDR
16236: GO 16240
// exit ;
16238: GO 16824
// if IsInUnit ( speaker [ 1 ] ) then
16240: LD_VAR 0 3
16244: PUSH
16245: LD_INT 1
16247: ARRAY
16248: PPUSH
16249: CALL_OW 310
16253: IFFALSE 16276
// place := IsInUnit ( speaker [ 1 ] ) else
16255: LD_ADDR_VAR 0 4
16259: PUSH
16260: LD_VAR 0 3
16264: PUSH
16265: LD_INT 1
16267: ARRAY
16268: PPUSH
16269: CALL_OW 310
16273: ST_TO_ADDR
16274: GO 16290
// place := speaker [ 1 ] ;
16276: LD_ADDR_VAR 0 4
16280: PUSH
16281: LD_VAR 0 3
16285: PUSH
16286: LD_INT 1
16288: ARRAY
16289: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16290: LD_VAR 0 4
16294: PPUSH
16295: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16299: LD_VAR 0 4
16303: PPUSH
16304: CALL_OW 250
16308: PPUSH
16309: LD_VAR 0 4
16313: PPUSH
16314: CALL_OW 251
16318: PPUSH
16319: CALL 2086 0 2
// wait ( 0 0$2 ) ;
16323: LD_INT 70
16325: PPUSH
16326: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16330: LD_EXP 41
16334: PPUSH
16335: CALL_OW 305
16339: NOT
16340: IFFALSE 16344
// exit ;
16342: GO 16824
// allowConvoys := false ;
16344: LD_ADDR_EXP 13
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// blockAttack := true ;
16352: LD_ADDR_EXP 29
16356: PUSH
16357: LD_INT 1
16359: ST_TO_ADDR
// InGameOn ;
16360: CALL_OW 8
// wait ( 0 0$1 ) ;
16364: LD_INT 35
16366: PPUSH
16367: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16371: LD_EXP 41
16375: PPUSH
16376: LD_STRING DI-1-land
16378: PPUSH
16379: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16383: LD_VAR 0 3
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PPUSH
16392: CALL_OW 310
16396: IFFALSE 16411
// ComExit ( speaker [ 1 ] ) ;
16398: LD_VAR 0 3
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: PPUSH
16407: CALL 78903 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16411: LD_VAR 0 3
16415: PUSH
16416: LD_INT 1
16418: ARRAY
16419: PPUSH
16420: LD_EXP 41
16424: PPUSH
16425: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16429: LD_VAR 0 3
16433: PUSH
16434: LD_INT 1
16436: ARRAY
16437: PPUSH
16438: LD_EXP 41
16442: PPUSH
16443: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16447: LD_EXP 41
16451: PPUSH
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 1
16459: ARRAY
16460: PPUSH
16461: CALL_OW 119
// wait ( 0 0$1 ) ;
16465: LD_INT 35
16467: PPUSH
16468: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16472: LD_VAR 0 3
16476: PUSH
16477: LD_INT 1
16479: ARRAY
16480: PPUSH
16481: LD_VAR 0 3
16485: PUSH
16486: LD_INT 2
16488: ARRAY
16489: PUSH
16490: LD_STRING -1-land
16492: STR
16493: PPUSH
16494: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16498: LD_EXP 41
16502: PPUSH
16503: LD_STRING DI-2-land
16505: PPUSH
16506: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16510: LD_VAR 0 3
16514: PUSH
16515: LD_INT 1
16517: ARRAY
16518: PPUSH
16519: LD_VAR 0 3
16523: PUSH
16524: LD_INT 2
16526: ARRAY
16527: PUSH
16528: LD_STRING -2-land
16530: STR
16531: PPUSH
16532: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16536: LD_VAR 0 3
16540: PUSH
16541: LD_INT 1
16543: ARRAY
16544: PPUSH
16545: LD_VAR 0 3
16549: PUSH
16550: LD_INT 2
16552: ARRAY
16553: PUSH
16554: LD_STRING -3-land
16556: STR
16557: PPUSH
16558: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16562: LD_EXP 31
16566: PPUSH
16567: LD_STRING DH-1-land
16569: PPUSH
16570: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16574: LD_VAR 0 5
16578: PPUSH
16579: CALL_OW 313
16583: PUSH
16584: LD_INT 6
16586: EQUAL
16587: IFFALSE 16607
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16589: LD_VAR 0 5
16593: PPUSH
16594: CALL_OW 313
16598: PUSH
16599: LD_INT 1
16601: ARRAY
16602: PPUSH
16603: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16607: LD_EXP 41
16611: PPUSH
16612: LD_INT 2
16614: PPUSH
16615: CALL_OW 235
// CenterOnUnits ( depot ) ;
16619: LD_VAR 0 5
16623: PPUSH
16624: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16628: LD_EXP 41
16632: PPUSH
16633: LD_VAR 0 5
16637: PPUSH
16638: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16642: LD_VAR 0 3
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PPUSH
16651: LD_VAR 0 5
16655: PPUSH
16656: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16660: LD_INT 35
16662: PPUSH
16663: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16667: LD_EXP 41
16671: PPUSH
16672: CALL_OW 310
16676: PUSH
16677: LD_EXP 41
16681: PPUSH
16682: CALL_OW 302
16686: NOT
16687: OR
16688: PUSH
16689: LD_VAR 0 5
16693: PPUSH
16694: CALL_OW 302
16698: NOT
16699: OR
16700: IFFALSE 16660
// InGameOff ;
16702: CALL_OW 9
// blockAttack := false ;
16706: LD_ADDR_EXP 29
16710: PUSH
16711: LD_INT 0
16713: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16714: LD_EXP 41
16718: PPUSH
16719: CALL_OW 302
16723: NOT
16724: IFFALSE 16728
// exit ;
16726: GO 16824
// if not IsOk ( depot ) then
16728: LD_VAR 0 5
16732: PPUSH
16733: CALL_OW 302
16737: NOT
16738: IFFALSE 16801
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16740: LD_EXP 41
16744: PPUSH
16745: LD_INT 30
16747: PPUSH
16748: LD_INT 1
16750: PPUSH
16751: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16755: LD_INT 35
16757: PPUSH
16758: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16762: LD_EXP 41
16766: PPUSH
16767: LD_INT 30
16769: PPUSH
16770: LD_INT 1
16772: PPUSH
16773: CALL_OW 307
16777: PUSH
16778: LD_EXP 41
16782: PPUSH
16783: CALL_OW 301
16787: OR
16788: IFFALSE 16755
// RemoveUnit ( Ibrahim ) ;
16790: LD_EXP 41
16794: PPUSH
16795: CALL_OW 64
// exit ;
16799: GO 16824
// end ; ibrahimInDepot := true ;
16801: LD_ADDR_EXP 26
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// allowConvoys := true ;
16809: LD_ADDR_EXP 13
16813: PUSH
16814: LD_INT 1
16816: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16817: LD_STRING IbrahimInDepot
16819: PPUSH
16820: CALL_OW 97
// end ;
16824: PPOPN 5
16826: END
// export function IbrahimQuery ; begin
16827: LD_INT 0
16829: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16830: LD_STRING IbrahimQuery
16832: PPUSH
16833: CALL_OW 97
16837: PUSH
16838: LD_INT 1
16840: DOUBLE
16841: EQUAL
16842: IFTRUE 16846
16844: GO 17216
16846: POP
// begin allowConvoys := false ;
16847: LD_ADDR_EXP 13
16851: PUSH
16852: LD_INT 0
16854: ST_TO_ADDR
// ibrahimInDepot := false ;
16855: LD_ADDR_EXP 26
16859: PUSH
16860: LD_INT 0
16862: ST_TO_ADDR
// InGameOn ;
16863: CALL_OW 8
// DialogueOn ;
16867: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16871: LD_EXP 31
16875: PPUSH
16876: CALL_OW 87
// wait ( 0 0$1 ) ;
16880: LD_INT 35
16882: PPUSH
16883: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16887: LD_EXP 31
16891: PPUSH
16892: LD_STRING DH-1-interrogation
16894: PPUSH
16895: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16899: LD_EXP 41
16903: PPUSH
16904: LD_STRING DI-1-interrogation
16906: PPUSH
16907: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16911: LD_EXP 31
16915: PPUSH
16916: LD_STRING DH-2-interrogation
16918: PPUSH
16919: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16923: LD_EXP 41
16927: PPUSH
16928: LD_STRING DI-2-interrogation
16930: PPUSH
16931: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16935: LD_EXP 31
16939: PPUSH
16940: LD_STRING DH-3-interrogation
16942: PPUSH
16943: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16947: LD_EXP 41
16951: PPUSH
16952: LD_STRING DI-3-interrogation
16954: PPUSH
16955: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16959: LD_EXP 31
16963: PPUSH
16964: LD_STRING DH-4-interrogation
16966: PPUSH
16967: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16971: LD_EXP 41
16975: PPUSH
16976: LD_STRING DI-4-interrogation
16978: PPUSH
16979: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16983: LD_EXP 31
16987: PPUSH
16988: LD_STRING DH-5-interrogation
16990: PPUSH
16991: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16995: LD_EXP 41
16999: PPUSH
17000: LD_STRING DI-5-interrogation
17002: PPUSH
17003: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17007: LD_INT 10
17009: PPUSH
17010: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
17014: LD_EXP 31
17018: PPUSH
17019: LD_STRING DH-6-interrogation
17021: PPUSH
17022: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
17026: LD_EXP 41
17030: PPUSH
17031: LD_STRING DI-6-interrogation
17033: PPUSH
17034: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17038: LD_EXP 41
17042: PPUSH
17043: LD_STRING DI-7-interrogation
17045: PPUSH
17046: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17050: LD_EXP 31
17054: PPUSH
17055: LD_STRING DH-7-interrogation
17057: PPUSH
17058: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17062: LD_INT 10
17064: PPUSH
17065: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17069: LD_EXP 31
17073: PPUSH
17074: LD_STRING DH-8-interrogation
17076: PPUSH
17077: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17081: LD_EXP 41
17085: PPUSH
17086: LD_STRING DI-8-interrogation
17088: PPUSH
17089: CALL_OW 88
// wait ( 0 0$1 ) ;
17093: LD_INT 35
17095: PPUSH
17096: CALL_OW 67
// DialogueOff ;
17100: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17104: LD_STRING IbrahimDecisionQuery
17106: PPUSH
17107: CALL_OW 97
17111: PUSH
17112: LD_INT 1
17114: DOUBLE
17115: EQUAL
17116: IFTRUE 17120
17118: GO 17144
17120: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17121: LD_EXP 41
17125: PPUSH
17126: LD_STRING DI-1-kill
17128: PPUSH
17129: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17133: LD_EXP 41
17137: PPUSH
17138: CALL_OW 66
// end ; 2 :
17142: GO 17210
17144: LD_INT 2
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17209
17152: POP
// begin SetSide ( Ibrahim , 6 ) ;
17153: LD_EXP 41
17157: PPUSH
17158: LD_INT 6
17160: PPUSH
17161: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17165: LD_EXP 41
17169: PPUSH
17170: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17174: LD_EXP 41
17178: PPUSH
17179: LD_INT 66
17181: PPUSH
17182: LD_INT 2
17184: PPUSH
17185: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17189: LD_EXP 41
17193: PPUSH
17194: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17198: LD_EXP 31
17202: PPUSH
17203: CALL_OW 122
// end ; end ;
17207: GO 17210
17209: POP
// InGameOff ;
17210: CALL_OW 9
// end ; 2 :
17214: GO 17230
17216: LD_INT 2
17218: DOUBLE
17219: EQUAL
17220: IFTRUE 17224
17222: GO 17229
17224: POP
// exit ; end ;
17225: GO 17314
17227: GO 17230
17229: POP
// allowConvoys := true ;
17230: LD_ADDR_EXP 13
17234: PUSH
17235: LD_INT 1
17237: ST_TO_ADDR
// blockAttack := false ;
17238: LD_ADDR_EXP 29
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17246: LD_INT 5250
17248: PPUSH
17249: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17253: LD_INT 35
17255: PPUSH
17256: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17260: LD_INT 81
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 21
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PPUSH
17284: CALL_OW 69
17288: NOT
17289: IFFALSE 17253
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17291: LD_EXP 41
17295: PPUSH
17296: LD_INT 34
17298: PPUSH
17299: LD_INT 21
17301: PPUSH
17302: CALL_OW 111
// ibrahimIsFree := true ;
17306: LD_ADDR_EXP 27
17310: PUSH
17311: LD_INT 1
17313: ST_TO_ADDR
// end ;
17314: LD_VAR 0 1
17318: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17319: LD_EXP 27
17323: PUSH
17324: LD_EXP 41
17328: PPUSH
17329: CALL_OW 302
17333: AND
17334: PUSH
17335: LD_INT 2
17337: PPUSH
17338: LD_EXP 41
17342: PPUSH
17343: CALL_OW 292
17347: AND
17348: IFFALSE 18160
17350: GO 17352
17352: DISABLE
17353: LD_INT 0
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
// begin wait ( 0 0$10 ) ;
17361: LD_INT 350
17363: PPUSH
17364: CALL_OW 67
// allowConvoys := false ;
17368: LD_ADDR_EXP 13
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// blockAttack := true ;
17376: LD_ADDR_EXP 29
17380: PUSH
17381: LD_INT 1
17383: ST_TO_ADDR
// depot := usDepot ;
17384: LD_ADDR_VAR 0 4
17388: PUSH
17389: LD_INT 11
17391: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17392: LD_INT 11
17394: NOT
17395: PUSH
17396: LD_INT 22
17398: PUSH
17399: LD_INT 2
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 50
17408: PUSH
17409: EMPTY
17410: LIST
17411: PUSH
17412: LD_INT 30
17414: PUSH
17415: LD_INT 0
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: PPUSH
17427: CALL_OW 69
17431: AND
17432: IFFALSE 17479
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17434: LD_ADDR_VAR 0 4
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_INT 2
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 50
17451: PUSH
17452: EMPTY
17453: LIST
17454: PUSH
17455: LD_INT 30
17457: PUSH
17458: LD_INT 0
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 69
17474: PUSH
17475: LD_INT 1
17477: ARRAY
17478: ST_TO_ADDR
// InGameOn ;
17479: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17483: LD_EXP 41
17487: PPUSH
17488: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17492: LD_EXP 31
17496: PPUSH
17497: LD_EXP 41
17501: PPUSH
17502: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17506: LD_EXP 41
17510: PPUSH
17511: LD_EXP 31
17515: PPUSH
17516: CALL_OW 119
// DialogueOn ;
17520: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17524: LD_EXP 41
17528: PPUSH
17529: LD_STRING DI-1-free
17531: PPUSH
17532: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17536: LD_EXP 31
17540: PPUSH
17541: LD_STRING DH-1-free
17543: PPUSH
17544: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17548: LD_EXP 41
17552: PPUSH
17553: LD_STRING DI-2-free
17555: PPUSH
17556: CALL_OW 88
// changeClass := 0 ;
17560: LD_ADDR_VAR 0 1
17564: PUSH
17565: LD_INT 0
17567: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17568: LD_STRING IbrahimJoinQuery
17570: PPUSH
17571: CALL_OW 97
17575: PUSH
17576: LD_INT 1
17578: DOUBLE
17579: EQUAL
17580: IFTRUE 17584
17582: GO 17595
17584: POP
// begin changeClass := 1 ;
17585: LD_ADDR_VAR 0 1
17589: PUSH
17590: LD_INT 1
17592: ST_TO_ADDR
// end ; 2 :
17593: GO 17847
17595: LD_INT 2
17597: DOUBLE
17598: EQUAL
17599: IFTRUE 17603
17601: GO 17767
17603: POP
// begin Say ( Heike , DH-1-decline ) ;
17604: LD_EXP 31
17608: PPUSH
17609: LD_STRING DH-1-decline
17611: PPUSH
17612: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17616: LD_EXP 41
17620: PPUSH
17621: LD_STRING DI-1-decline
17623: PPUSH
17624: CALL_OW 88
// DialogueOff ;
17628: CALL_OW 7
// InGameOff ;
17632: CALL_OW 9
// blockAttack := false ;
17636: LD_ADDR_EXP 29
17640: PUSH
17641: LD_INT 0
17643: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17644: LD_EXP 41
17648: PPUSH
17649: LD_INT 30
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: CALL_OW 111
// p := 0 ;
17659: LD_ADDR_VAR 0 3
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// repeat p := p + 1 ;
17667: LD_ADDR_VAR 0 3
17671: PUSH
17672: LD_VAR 0 3
17676: PUSH
17677: LD_INT 1
17679: PLUS
17680: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17681: LD_INT 35
17683: PPUSH
17684: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17688: LD_EXP 41
17692: PPUSH
17693: LD_INT 30
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: CALL_OW 307
17703: PUSH
17704: LD_INT 22
17706: PUSH
17707: LD_INT 2
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 101
17716: PUSH
17717: LD_INT 6
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PPUSH
17728: CALL_OW 69
17732: NOT
17733: OR
17734: PUSH
17735: LD_VAR 0 3
17739: PUSH
17740: LD_INT 10
17742: GREATER
17743: OR
17744: IFFALSE 17667
// RemoveUnit ( Ibrahim ) ;
17746: LD_EXP 41
17750: PPUSH
17751: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17755: LD_INT 1
17757: PPUSH
17758: LD_STRING 03_IbrahimHasEscaped
17760: PPUSH
17761: CALL_OW 39
// end ; 3 :
17765: GO 17847
17767: LD_INT 3
17769: DOUBLE
17770: EQUAL
17771: IFTRUE 17775
17773: GO 17846
17775: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17776: LD_EXP 31
17780: PPUSH
17781: LD_STRING DH-1-radio-hq
17783: PPUSH
17784: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17788: LD_EXP 40
17792: PPUSH
17793: LD_STRING DO-1-radio-hq
17795: PPUSH
17796: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17800: LD_EXP 31
17804: PPUSH
17805: LD_STRING DH-2-radio-hq
17807: PPUSH
17808: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17812: LD_EXP 40
17816: PPUSH
17817: LD_STRING DO-2-radio-hq
17819: PPUSH
17820: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17824: LD_EXP 31
17828: PPUSH
17829: LD_STRING DH-3-radio-hq
17831: PPUSH
17832: CALL_OW 88
// changeClass := 1 ;
17836: LD_ADDR_VAR 0 1
17840: PUSH
17841: LD_INT 1
17843: ST_TO_ADDR
// end ; end ;
17844: GO 17847
17846: POP
// if changeClass then
17847: LD_VAR 0 1
17851: IFFALSE 18160
// begin Say ( Heike , DH-1-agree ) ;
17853: LD_EXP 31
17857: PPUSH
17858: LD_STRING DH-1-agree
17860: PPUSH
17861: CALL_OW 88
// if IsOk ( Givi ) then
17865: LD_EXP 32
17869: PPUSH
17870: CALL_OW 302
17874: IFFALSE 17912
// begin Say ( Givi , DG-1-agree ) ;
17876: LD_EXP 32
17880: PPUSH
17881: LD_STRING DG-1-agree
17883: PPUSH
17884: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17888: LD_EXP 31
17892: PPUSH
17893: LD_STRING DH-2-agree
17895: PPUSH
17896: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17900: LD_EXP 32
17904: PPUSH
17905: LD_STRING DG-2-agree
17907: PPUSH
17908: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17912: LD_EXP 41
17916: PPUSH
17917: CALL_OW 87
// DialogueOff ;
17921: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17925: LD_VAR 0 4
17929: PPUSH
17930: CALL_OW 313
17934: PUSH
17935: LD_INT 6
17937: EQUAL
17938: IFFALSE 17958
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17940: LD_VAR 0 4
17944: PPUSH
17945: CALL_OW 313
17949: PUSH
17950: LD_INT 1
17952: ARRAY
17953: PPUSH
17954: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17958: LD_EXP 41
17962: PPUSH
17963: LD_INT 2
17965: PPUSH
17966: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17970: LD_ADDR_VAR 0 5
17974: PUSH
17975: LD_EXP 41
17979: PPUSH
17980: CALL_OW 250
17984: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17985: LD_ADDR_VAR 0 6
17989: PUSH
17990: LD_EXP 41
17994: PPUSH
17995: CALL_OW 251
17999: ST_TO_ADDR
// if depot then
18000: LD_VAR 0 4
18004: IFFALSE 18053
// begin ComEnterUnit ( Ibrahim , depot ) ;
18006: LD_EXP 41
18010: PPUSH
18011: LD_VAR 0 4
18015: PPUSH
18016: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18020: LD_INT 35
18022: PPUSH
18023: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18027: LD_EXP 41
18031: PPUSH
18032: CALL_OW 310
18036: IFFALSE 18020
// b := IsInUnit ( Ibrahim ) ;
18038: LD_ADDR_VAR 0 2
18042: PUSH
18043: LD_EXP 41
18047: PPUSH
18048: CALL_OW 310
18052: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18053: LD_EXP 41
18057: PPUSH
18058: CALL_OW 64
// uc_side := 2 ;
18062: LD_ADDR_OWVAR 20
18066: PUSH
18067: LD_INT 2
18069: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18070: LD_ADDR_EXP 41
18074: PUSH
18075: LD_STRING Ibrahim
18077: PPUSH
18078: LD_INT 0
18080: PPUSH
18081: LD_STRING 
18083: PPUSH
18084: CALL 40803 0 3
18088: ST_TO_ADDR
// if depot then
18089: LD_VAR 0 4
18093: IFFALSE 18111
// PlaceHumanInUnit ( Ibrahim , b ) else
18095: LD_EXP 41
18099: PPUSH
18100: LD_VAR 0 2
18104: PPUSH
18105: CALL_OW 52
18109: GO 18133
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18111: LD_EXP 41
18115: PPUSH
18116: LD_VAR 0 5
18120: PPUSH
18121: LD_VAR 0 6
18125: PPUSH
18126: LD_INT 0
18128: PPUSH
18129: CALL_OW 48
// InGameOff ;
18133: CALL_OW 9
// allowConvoys := true ;
18137: LD_ADDR_EXP 13
18141: PUSH
18142: LD_INT 1
18144: ST_TO_ADDR
// blockAttack := false ;
18145: LD_ADDR_EXP 29
18149: PUSH
18150: LD_INT 0
18152: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18153: LD_STRING ACH_IBRAHIM
18155: PPUSH
18156: CALL_OW 543
// end ; end ;
18160: PPOPN 6
18162: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18163: LD_EXP 36
18167: PPUSH
18168: CALL_OW 256
18172: PUSH
18173: LD_INT 3
18175: LESS
18176: IFFALSE 18243
18178: GO 18180
18180: DISABLE
// begin DialogueOn ;
18181: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18185: LD_EXP 36
18189: PPUSH
18190: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18194: LD_EXP 36
18198: PPUSH
18199: LD_STRING DK-keydeath-1
18201: PPUSH
18202: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18206: LD_EXP 31
18210: PPUSH
18211: LD_STRING DH-keydeath-2
18213: PPUSH
18214: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18218: LD_EXP 31
18222: PPUSH
18223: LD_STRING DH-keydeath-3
18225: PPUSH
18226: CALL_OW 88
// DialogueOff ;
18230: CALL_OW 7
// KillUnit ( Kaia ) ;
18234: LD_EXP 36
18238: PPUSH
18239: CALL_OW 66
// end ;
18243: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18244: LD_EXP 12
18248: PUSH
18249: LD_EXP 22
18253: PUSH
18254: LD_INT 1
18256: LESS
18257: AND
18258: IFFALSE 18827
18260: GO 18262
18262: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18263: LD_INT 22
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 25
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 25
18288: PUSH
18289: LD_INT 3
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: IFFALSE 18387
// begin ChangeSideFog ( 1 , 2 ) ;
18311: LD_INT 1
18313: PPUSH
18314: LD_INT 2
18316: PPUSH
18317: CALL_OW 343
// Query ( DestroyEnemy ) ;
18321: LD_STRING DestroyEnemy
18323: PPUSH
18324: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18328: LD_INT 35
18330: PPUSH
18331: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18335: LD_INT 22
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 25
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 25
18360: PUSH
18361: LD_INT 3
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: PUSH
18382: LD_INT 0
18384: EQUAL
18385: IFFALSE 18328
// end ; if tick <= 45 45$00 then
18387: LD_OWVAR 1
18391: PUSH
18392: LD_INT 94500
18394: LESSEQUAL
18395: IFFALSE 18404
// SetAchievement ( ACH_HSPEED_3 ) ;
18397: LD_STRING ACH_HSPEED_3
18399: PPUSH
18400: CALL_OW 543
// DialogueOn ;
18404: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18408: LD_EXP 31
18412: PPUSH
18413: LD_STRING DH-1-final
18415: PPUSH
18416: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18420: LD_OWVAR 1
18424: PUSH
18425: LD_INT 138600
18427: PUSH
18428: LD_INT 134400
18430: PUSH
18431: LD_INT 130200
18433: PUSH
18434: LD_INT 126000
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: PUSH
18443: LD_OWVAR 67
18447: ARRAY
18448: LESSEQUAL
18449: IFFALSE 18463
// AddMedal ( med1 , 1 ) else
18451: LD_STRING med1
18453: PPUSH
18454: LD_INT 1
18456: PPUSH
18457: CALL_OW 101
18461: GO 18474
// AddMedal ( med1 , - 1 ) ;
18463: LD_STRING med1
18465: PPUSH
18466: LD_INT 1
18468: NEG
18469: PPUSH
18470: CALL_OW 101
// if vehCounter >= 2 then
18474: LD_EXP 23
18478: PUSH
18479: LD_INT 2
18481: GREATEREQUAL
18482: IFFALSE 18496
// AddMedal ( med2 , 1 ) else
18484: LD_STRING med2
18486: PPUSH
18487: LD_INT 1
18489: PPUSH
18490: CALL_OW 101
18494: GO 18507
// AddMedal ( med2 , - 1 ) ;
18496: LD_STRING med2
18498: PPUSH
18499: LD_INT 1
18501: NEG
18502: PPUSH
18503: CALL_OW 101
// if deadCounter = 0 then
18507: LD_EXP 10
18511: PUSH
18512: LD_INT 0
18514: EQUAL
18515: IFFALSE 18529
// AddMedal ( med3 , 1 ) else
18517: LD_STRING med3
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: CALL_OW 101
18527: GO 18540
// AddMedal ( med3 , - 1 ) ;
18529: LD_STRING med3
18531: PPUSH
18532: LD_INT 1
18534: NEG
18535: PPUSH
18536: CALL_OW 101
// GiveMedals ( MAIN ) ;
18540: LD_STRING MAIN
18542: PPUSH
18543: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18547: LD_INT 22
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 23
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 21
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: PPUSH
18582: CALL_OW 69
18586: PPUSH
18587: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18591: LD_EXP 31
18595: PPUSH
18596: LD_STRING 03_Heike
18598: PPUSH
18599: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18603: LD_EXP 35
18607: PPUSH
18608: LD_STRING 03_Aviradze
18610: PPUSH
18611: CALL_OW 38
// if Givi then
18615: LD_EXP 32
18619: IFFALSE 18633
// SaveCharacters ( Givi , 03_Givi ) ;
18621: LD_EXP 32
18625: PPUSH
18626: LD_STRING 03_Givi
18628: PPUSH
18629: CALL_OW 38
// if Mike then
18633: LD_EXP 33
18637: IFFALSE 18651
// SaveCharacters ( Mike , 03_Mike ) ;
18639: LD_EXP 33
18643: PPUSH
18644: LD_STRING 03_Mike
18646: PPUSH
18647: CALL_OW 38
// if Kamil then
18651: LD_EXP 34
18655: IFFALSE 18669
// SaveCharacters ( Kamil , 03_Kamil ) ;
18657: LD_EXP 34
18661: PPUSH
18662: LD_STRING 03_Kamil
18664: PPUSH
18665: CALL_OW 38
// if Kaia then
18669: LD_EXP 36
18673: IFFALSE 18687
// SaveCharacters ( Kaia , 03_Kaia ) ;
18675: LD_EXP 36
18679: PPUSH
18680: LD_STRING 03_Kaia
18682: PPUSH
18683: CALL_OW 38
// if Sophia then
18687: LD_EXP 37
18691: IFFALSE 18705
// SaveCharacters ( Sophia , 03_Sophia ) ;
18693: LD_EXP 37
18697: PPUSH
18698: LD_STRING 03_Sophia
18700: PPUSH
18701: CALL_OW 38
// if Markov then
18705: LD_EXP 38
18709: IFFALSE 18723
// SaveCharacters ( Markov , 03_Markov ) ;
18711: LD_EXP 38
18715: PPUSH
18716: LD_STRING 03_Markov
18718: PPUSH
18719: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18723: LD_EXP 41
18727: PUSH
18728: LD_EXP 41
18732: PPUSH
18733: CALL_OW 255
18737: PUSH
18738: LD_INT 2
18740: EQUAL
18741: AND
18742: IFFALSE 18763
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18744: LD_STRING enableBioCharacter(BIO_IBRA)
18746: PPUSH
18747: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18751: LD_EXP 41
18755: PPUSH
18756: LD_STRING 03_Ibrahim
18758: PPUSH
18759: CALL_OW 38
// end ; if heikeSecondSquad then
18763: LD_EXP 45
18767: IFFALSE 18781
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18769: LD_EXP 45
18773: PPUSH
18774: LD_STRING 03_others
18776: PPUSH
18777: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18781: LD_EXP 10
18785: PPUSH
18786: LD_STRING 03_DeadCounter
18788: PPUSH
18789: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
18793: LD_EXP 30
18797: PPUSH
18798: LD_STRING 03_CargoRecycled
18800: PPUSH
18801: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18805: LD_STRING enableBioCharacter(BIO_OMAR)
18807: PPUSH
18808: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18812: LD_STRING enableBioCharacter(BIO_FARM)
18814: PPUSH
18815: CALL_OW 559
// YouWin ;
18819: CALL_OW 103
// DialogueOff ;
18823: CALL_OW 7
// end ; end_of_file
18827: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL 35909 0 1
// if un = Heike then
18837: LD_VAR 0 1
18841: PUSH
18842: LD_EXP 31
18846: EQUAL
18847: IFFALSE 18856
// YouLost ( Heike ) ;
18849: LD_STRING Heike
18851: PPUSH
18852: CALL_OW 104
// if un = Aviradze then
18856: LD_VAR 0 1
18860: PUSH
18861: LD_EXP 35
18865: EQUAL
18866: IFFALSE 18875
// YouLost ( Aviradze ) ;
18868: LD_STRING Aviradze
18870: PPUSH
18871: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18875: LD_VAR 0 1
18879: PUSH
18880: LD_INT 11
18882: EQUAL
18883: PUSH
18884: LD_EXP 12
18888: NOT
18889: AND
18890: IFFALSE 18899
// YouLost ( Depot ) ;
18892: LD_STRING Depot
18894: PPUSH
18895: CALL_OW 104
// if un = arDepot then
18899: LD_VAR 0 1
18903: PUSH
18904: LD_INT 5
18906: EQUAL
18907: IFFALSE 18916
// YouLost ( FarmerDepot ) ;
18909: LD_STRING FarmerDepot
18911: PPUSH
18912: CALL_OW 104
// if un = Farmer then
18916: LD_VAR 0 1
18920: PUSH
18921: LD_EXP 39
18925: EQUAL
18926: IFFALSE 18935
// YouLost ( Farmer ) ;
18928: LD_STRING Farmer
18930: PPUSH
18931: CALL_OW 104
// if un in usForces then
18935: LD_VAR 0 1
18939: PUSH
18940: LD_EXP 47
18944: IN
18945: IFFALSE 18963
// usForces := usForces diff un ;
18947: LD_ADDR_EXP 47
18951: PUSH
18952: LD_EXP 47
18956: PUSH
18957: LD_VAR 0 1
18961: DIFF
18962: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18963: LD_VAR 0 1
18967: PUSH
18968: LD_INT 22
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 23
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 21
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: IN
19008: IFFALSE 19024
// deadCounter := deadCounter + 1 ;
19010: LD_ADDR_EXP 10
19014: PUSH
19015: LD_EXP 10
19019: PUSH
19020: LD_INT 1
19022: PLUS
19023: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
19024: LD_VAR 0 1
19028: PUSH
19029: LD_INT 22
19031: PUSH
19032: LD_INT 4
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 34
19041: PUSH
19042: LD_INT 12
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: CALL_OW 69
19057: IN
19058: PUSH
19059: LD_EXP 19
19063: NOT
19064: AND
19065: IFFALSE 19075
// firstConvoyDestroyed := true ;
19067: LD_ADDR_EXP 19
19071: PUSH
19072: LD_INT 1
19074: ST_TO_ADDR
// if un in usAttackers then
19075: LD_VAR 0 1
19079: PUSH
19080: LD_EXP 50
19084: IN
19085: IFFALSE 19103
// usAttackers := usAttackers diff un ;
19087: LD_ADDR_EXP 50
19091: PUSH
19092: LD_EXP 50
19096: PUSH
19097: LD_VAR 0 1
19101: DIFF
19102: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19103: LD_VAR 0 1
19107: PUSH
19108: LD_INT 22
19110: PUSH
19111: LD_INT 5
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 21
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: IN
19137: IFFALSE 19153
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19139: LD_ADDR_EXP 21
19143: PUSH
19144: LD_EXP 21
19148: PUSH
19149: LD_INT 1
19151: PLUS
19152: ST_TO_ADDR
// end ;
19153: PPOPN 1
19155: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19156: LD_VAR 0 2
19160: PUSH
19161: LD_EXP 41
19165: EQUAL
19166: PUSH
19167: LD_EXP 26
19171: AND
19172: IFFALSE 19357
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19174: LD_INT 22
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 30
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 50
19196: PUSH
19197: EMPTY
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: PPUSH
19205: CALL_OW 69
19209: IFFALSE 19263
// begin InGameOn ;
19211: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19215: LD_EXP 41
19219: PPUSH
19220: LD_INT 11
19222: PPUSH
19223: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19227: LD_INT 35
19229: PPUSH
19230: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19234: LD_EXP 41
19238: PPUSH
19239: LD_INT 11
19241: PPUSH
19242: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19246: LD_EXP 41
19250: PPUSH
19251: CALL_OW 310
19255: IFFALSE 19227
// InGameOff ;
19257: CALL_OW 9
// end else
19261: GO 19357
// begin SetSide ( Ibrahim , 6 ) ;
19263: LD_EXP 41
19267: PPUSH
19268: LD_INT 6
19270: PPUSH
19271: CALL_OW 235
// ibrahimInDepot := false ;
19275: LD_ADDR_EXP 26
19279: PUSH
19280: LD_INT 0
19282: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19283: LD_EXP 41
19287: PPUSH
19288: LD_INT 30
19290: PPUSH
19291: LD_INT 1
19293: PPUSH
19294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19298: LD_INT 35
19300: PPUSH
19301: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19305: LD_EXP 41
19309: PPUSH
19310: LD_INT 30
19312: PPUSH
19313: LD_INT 1
19315: PPUSH
19316: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19320: LD_EXP 41
19324: PPUSH
19325: LD_INT 30
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: CALL_OW 307
19335: PUSH
19336: LD_EXP 41
19340: PPUSH
19341: CALL_OW 301
19345: OR
19346: IFFALSE 19298
// RemoveUnit ( Ibrahim ) ;
19348: LD_EXP 41
19352: PPUSH
19353: CALL_OW 64
// end ; end ; end ;
19357: PPOPN 2
19359: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19360: LD_VAR 0 2
19364: PUSH
19365: LD_EXP 31
19369: EQUAL
19370: PUSH
19371: LD_VAR 0 1
19375: PUSH
19376: LD_INT 11
19378: EQUAL
19379: AND
19380: PUSH
19381: LD_EXP 26
19385: AND
19386: IFFALSE 19392
// IbrahimQuery ;
19388: CALL 16827 0 0
// end ;
19392: PPOPN 2
19394: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 141
// if oldId in usAttackers then
19404: LD_VAR 0 2
19408: PUSH
19409: LD_EXP 50
19413: IN
19414: IFFALSE 19432
// usAttackers := usAttackers diff oldId ;
19416: LD_ADDR_EXP 50
19420: PUSH
19421: LD_EXP 50
19425: PUSH
19426: LD_VAR 0 2
19430: DIFF
19431: ST_TO_ADDR
// if newId in usAttackers then
19432: LD_VAR 0 1
19436: PUSH
19437: LD_EXP 50
19441: IN
19442: IFFALSE 19460
// usAttackers := usAttackers diff newId ;
19444: LD_ADDR_EXP 50
19448: PUSH
19449: LD_EXP 50
19453: PUSH
19454: LD_VAR 0 1
19458: DIFF
19459: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19460: LD_VAR 0 3
19464: PUSH
19465: LD_INT 4
19467: EQUAL
19468: PUSH
19469: LD_EXP 19
19473: NOT
19474: AND
19475: IFFALSE 19485
// firstConvoyDestroyed := true ;
19477: LD_ADDR_EXP 19
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19485: LD_VAR 0 1
19489: PPUSH
19490: CALL_OW 264
19494: PUSH
19495: LD_INT 12
19497: EQUAL
19498: IFFALSE 19536
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19500: LD_ADDR_EXP 14
19504: PUSH
19505: LD_EXP 14
19509: PUSH
19510: LD_INT 1
19512: PLUS
19513: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19514: LD_VAR 0 1
19518: PPUSH
19519: LD_INT 1
19521: PPUSH
19522: CALL_OW 289
19526: PUSH
19527: LD_INT 0
19529: EQUAL
19530: IFFALSE 19536
// EmptyCargoDialog ;
19532: CALL 15445 0 0
// end ; end ;
19536: PPOPN 4
19538: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 2
19546: EQUAL
19547: PUSH
19548: LD_VAR 0 2
19552: PUSH
19553: LD_INT 5
19555: EQUAL
19556: AND
19557: IFFALSE 19566
// YouLost ( Attack ) ;
19559: LD_STRING Attack
19561: PPUSH
19562: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19566: LD_VAR 0 1
19570: PUSH
19571: LD_INT 2
19573: EQUAL
19574: PUSH
19575: LD_VAR 0 2
19579: PUSH
19580: LD_INT 1
19582: EQUAL
19583: AND
19584: IFFALSE 19594
// americanContact := true ;
19586: LD_ADDR_EXP 5
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// end ;
19594: PPOPN 2
19596: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19597: LD_VAR 0 1
19601: PPUSH
19602: CALL_OW 255
19606: PUSH
19607: LD_INT 1
19609: EQUAL
19610: PUSH
19611: LD_EXP 7
19615: NOT
19616: AND
19617: IFFALSE 19751
// begin if GetBType ( b ) = b_lab then
19619: LD_VAR 0 1
19623: PPUSH
19624: CALL_OW 266
19628: PUSH
19629: LD_INT 6
19631: EQUAL
19632: IFFALSE 19672
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19634: LD_EXP 47
19638: PPUSH
19639: LD_INT 25
19641: PUSH
19642: LD_INT 4
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 72
19653: PPUSH
19654: LD_VAR 0 1
19658: PPUSH
19659: CALL_OW 120
// AmLabResearch ( b ) ;
19663: LD_VAR 0 1
19667: PPUSH
19668: CALL 5142 0 1
// end ; if GetBType ( b ) = b_armoury then
19672: LD_VAR 0 1
19676: PPUSH
19677: CALL_OW 266
19681: PUSH
19682: LD_INT 4
19684: EQUAL
19685: IFFALSE 19733
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19687: LD_EXP 47
19691: PPUSH
19692: LD_INT 25
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 3
19704: PUSH
19705: LD_INT 54
19707: PUSH
19708: EMPTY
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 72
19723: PPUSH
19724: LD_VAR 0 1
19728: PPUSH
19729: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19733: LD_ADDR_EXP 49
19737: PUSH
19738: LD_EXP 49
19742: PPUSH
19743: LD_INT 1
19745: PPUSH
19746: CALL_OW 3
19750: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19751: LD_VAR 0 1
19755: PPUSH
19756: CALL_OW 255
19760: PUSH
19761: LD_INT 5
19763: EQUAL
19764: IFFALSE 19778
// SetBLevel ( b , 5 ) ;
19766: LD_VAR 0 1
19770: PPUSH
19771: LD_INT 5
19773: PPUSH
19774: CALL_OW 241
// end ;
19778: PPOPN 1
19780: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
19781: LD_VAR 0 11
19785: PUSH
19786: LD_INT 12
19788: EQUAL
19789: IFFALSE 19799
// cargoRecycled := true ;
19791: LD_ADDR_EXP 30
19795: PUSH
19796: LD_INT 1
19798: ST_TO_ADDR
// end ;
19799: PPOPN 11
19801: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL_OW 255
19811: PUSH
19812: LD_INT 2
19814: EQUAL
19815: IFFALSE 19831
// vehCounter := vehCounter + 1 ;
19817: LD_ADDR_EXP 23
19821: PUSH
19822: LD_EXP 23
19826: PUSH
19827: LD_INT 1
19829: PLUS
19830: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19831: LD_VAR 0 1
19835: PPUSH
19836: LD_VAR 0 2
19840: PPUSH
19841: CALL 36029 0 2
// end ;
19845: PPOPN 2
19847: END
// on SailEvent ( event ) do begin if event = eventAttack then
19848: LD_VAR 0 1
19852: PUSH
19853: LD_EXP 25
19857: EQUAL
19858: IFFALSE 19864
// AmericanAttack ;
19860: CALL 6786 0 0
// end ; end_of_file
19864: PPOPN 1
19866: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19867: LD_OWVAR 1
19871: PUSH
19872: LD_INT 10500
19874: PUSH
19875: LD_INT 9800
19877: PUSH
19878: LD_INT 9450
19880: PUSH
19881: LD_INT 9100
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: LD_OWVAR 67
19894: ARRAY
19895: LESSEQUAL
19896: IFFALSE 19923
19898: GO 19900
19900: DISABLE
// begin enable ;
19901: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19902: LD_INT 1
19904: PPUSH
19905: LD_INT 5
19907: PPUSH
19908: CALL_OW 12
19912: PPUSH
19913: LD_INT 9
19915: PPUSH
19916: LD_INT 1
19918: PPUSH
19919: CALL_OW 55
// end ;
19923: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19924: LD_EXP 7
19928: PUSH
19929: LD_OWVAR 1
19933: PUSH
19934: LD_INT 94500
19936: LESSEQUAL
19937: AND
19938: IFFALSE 19965
19940: GO 19942
19942: DISABLE
// begin enable ;
19943: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19944: LD_INT 3
19946: PPUSH
19947: LD_INT 5
19949: PPUSH
19950: CALL_OW 12
19954: PPUSH
19955: LD_INT 9
19957: PPUSH
19958: LD_INT 1
19960: PPUSH
19961: CALL_OW 55
// end ; end_of_file
19965: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19966: LD_EXP 12
19970: NOT
19971: PUSH
19972: LD_EXP 17
19976: AND
19977: PUSH
19978: LD_EXP 4
19982: AND
19983: PUSH
19984: LD_EXP 16
19988: PUSH
19989: LD_EXP 17
19993: LESSEQUAL
19994: AND
19995: IFFALSE 20106
19997: GO 19999
19999: DISABLE
// begin enable ;
20000: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
20001: LD_ADDR_OWVAR 47
20005: PUSH
20006: LD_STRING #X103-1
20008: PUSH
20009: LD_EXP 17
20013: PUSH
20014: LD_EXP 16
20018: MINUS
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
20024: LD_ADDR_EXP 16
20028: PUSH
20029: LD_INT 5
20031: PPUSH
20032: CALL_OW 274
20036: PPUSH
20037: LD_INT 1
20039: PPUSH
20040: CALL_OW 275
20044: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20045: LD_INT 10
20047: PPUSH
20048: LD_INT 1
20050: PPUSH
20051: CALL_OW 287
20055: PUSH
20056: LD_INT 0
20058: EQUAL
20059: IFFALSE 20077
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20061: LD_ADDR_EXP 18
20065: PUSH
20066: LD_EXP 18
20070: PUSH
20071: LD_INT 35
20073: MINUS
20074: ST_TO_ADDR
20075: GO 20106
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20077: LD_ADDR_EXP 18
20081: PUSH
20082: LD_INT 42000
20084: PUSH
20085: LD_INT 31500
20087: PUSH
20088: LD_INT 25200
20090: PUSH
20091: LD_INT 21000
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: PUSH
20100: LD_OWVAR 67
20104: ARRAY
20105: ST_TO_ADDR
// end ; end_of_file
20106: END
// export globalGameSaveCounter ; every 0 0$1 do
20107: GO 20109
20109: DISABLE
// begin enable ;
20110: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20111: LD_STRING updateTimer(
20113: PUSH
20114: LD_OWVAR 1
20118: STR
20119: PUSH
20120: LD_STRING );
20122: STR
20123: PPUSH
20124: CALL_OW 559
// end ;
20128: END
// every 0 0$1 do
20129: GO 20131
20131: DISABLE
// begin globalGameSaveCounter := 0 ;
20132: LD_ADDR_EXP 51
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20140: LD_STRING setGameSaveCounter(0)
20142: PPUSH
20143: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20147: LD_STRING initStreamRollete();
20149: PPUSH
20150: CALL_OW 559
// InitStreamMode ;
20154: CALL 21480 0 0
// DefineStreamItems ( false ) ;
20158: LD_INT 0
20160: PPUSH
20161: CALL 21944 0 1
// end ;
20165: END
// export function SOS_MapStart ( ) ; begin
20166: LD_INT 0
20168: PPUSH
// if streamModeActive then
20169: LD_EXP 52
20173: IFFALSE 20182
// DefineStreamItems ( true ) ;
20175: LD_INT 1
20177: PPUSH
20178: CALL 21944 0 1
// UpdateLuaVariables ( ) ;
20182: CALL 20199 0 0
// UpdateFactoryWaypoints ( ) ;
20186: CALL 34813 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20190: CALL 35070 0 0
// end ;
20194: LD_VAR 0 1
20198: RET
// function UpdateLuaVariables ( ) ; begin
20199: LD_INT 0
20201: PPUSH
// if globalGameSaveCounter then
20202: LD_EXP 51
20206: IFFALSE 20240
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20208: LD_ADDR_EXP 51
20212: PUSH
20213: LD_EXP 51
20217: PPUSH
20218: CALL 79866 0 1
20222: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20223: LD_STRING setGameSaveCounter(
20225: PUSH
20226: LD_EXP 51
20230: STR
20231: PUSH
20232: LD_STRING )
20234: STR
20235: PPUSH
20236: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20240: LD_STRING setGameDifficulty(
20242: PUSH
20243: LD_OWVAR 67
20247: STR
20248: PUSH
20249: LD_STRING )
20251: STR
20252: PPUSH
20253: CALL_OW 559
// end ;
20257: LD_VAR 0 1
20261: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20262: LD_INT 0
20264: PPUSH
// if p2 = stream_mode then
20265: LD_VAR 0 2
20269: PUSH
20270: LD_INT 100
20272: EQUAL
20273: IFFALSE 21276
// begin if not StreamModeActive then
20275: LD_EXP 52
20279: NOT
20280: IFFALSE 20290
// StreamModeActive := true ;
20282: LD_ADDR_EXP 52
20286: PUSH
20287: LD_INT 1
20289: ST_TO_ADDR
// if p3 = 0 then
20290: LD_VAR 0 3
20294: PUSH
20295: LD_INT 0
20297: EQUAL
20298: IFFALSE 20304
// InitStreamMode ;
20300: CALL 21480 0 0
// if p3 = 1 then
20304: LD_VAR 0 3
20308: PUSH
20309: LD_INT 1
20311: EQUAL
20312: IFFALSE 20322
// sRocket := true ;
20314: LD_ADDR_EXP 57
20318: PUSH
20319: LD_INT 1
20321: ST_TO_ADDR
// if p3 = 2 then
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 2
20329: EQUAL
20330: IFFALSE 20340
// sSpeed := true ;
20332: LD_ADDR_EXP 56
20336: PUSH
20337: LD_INT 1
20339: ST_TO_ADDR
// if p3 = 3 then
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 3
20347: EQUAL
20348: IFFALSE 20358
// sEngine := true ;
20350: LD_ADDR_EXP 58
20354: PUSH
20355: LD_INT 1
20357: ST_TO_ADDR
// if p3 = 4 then
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 4
20365: EQUAL
20366: IFFALSE 20376
// sSpec := true ;
20368: LD_ADDR_EXP 55
20372: PUSH
20373: LD_INT 1
20375: ST_TO_ADDR
// if p3 = 5 then
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 5
20383: EQUAL
20384: IFFALSE 20394
// sLevel := true ;
20386: LD_ADDR_EXP 59
20390: PUSH
20391: LD_INT 1
20393: ST_TO_ADDR
// if p3 = 6 then
20394: LD_VAR 0 3
20398: PUSH
20399: LD_INT 6
20401: EQUAL
20402: IFFALSE 20412
// sArmoury := true ;
20404: LD_ADDR_EXP 60
20408: PUSH
20409: LD_INT 1
20411: ST_TO_ADDR
// if p3 = 7 then
20412: LD_VAR 0 3
20416: PUSH
20417: LD_INT 7
20419: EQUAL
20420: IFFALSE 20430
// sRadar := true ;
20422: LD_ADDR_EXP 61
20426: PUSH
20427: LD_INT 1
20429: ST_TO_ADDR
// if p3 = 8 then
20430: LD_VAR 0 3
20434: PUSH
20435: LD_INT 8
20437: EQUAL
20438: IFFALSE 20448
// sBunker := true ;
20440: LD_ADDR_EXP 62
20444: PUSH
20445: LD_INT 1
20447: ST_TO_ADDR
// if p3 = 9 then
20448: LD_VAR 0 3
20452: PUSH
20453: LD_INT 9
20455: EQUAL
20456: IFFALSE 20466
// sHack := true ;
20458: LD_ADDR_EXP 63
20462: PUSH
20463: LD_INT 1
20465: ST_TO_ADDR
// if p3 = 10 then
20466: LD_VAR 0 3
20470: PUSH
20471: LD_INT 10
20473: EQUAL
20474: IFFALSE 20484
// sFire := true ;
20476: LD_ADDR_EXP 64
20480: PUSH
20481: LD_INT 1
20483: ST_TO_ADDR
// if p3 = 11 then
20484: LD_VAR 0 3
20488: PUSH
20489: LD_INT 11
20491: EQUAL
20492: IFFALSE 20502
// sRefresh := true ;
20494: LD_ADDR_EXP 65
20498: PUSH
20499: LD_INT 1
20501: ST_TO_ADDR
// if p3 = 12 then
20502: LD_VAR 0 3
20506: PUSH
20507: LD_INT 12
20509: EQUAL
20510: IFFALSE 20520
// sExp := true ;
20512: LD_ADDR_EXP 66
20516: PUSH
20517: LD_INT 1
20519: ST_TO_ADDR
// if p3 = 13 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 13
20527: EQUAL
20528: IFFALSE 20538
// sDepot := true ;
20530: LD_ADDR_EXP 67
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// if p3 = 14 then
20538: LD_VAR 0 3
20542: PUSH
20543: LD_INT 14
20545: EQUAL
20546: IFFALSE 20556
// sFlag := true ;
20548: LD_ADDR_EXP 68
20552: PUSH
20553: LD_INT 1
20555: ST_TO_ADDR
// if p3 = 15 then
20556: LD_VAR 0 3
20560: PUSH
20561: LD_INT 15
20563: EQUAL
20564: IFFALSE 20574
// sKamikadze := true ;
20566: LD_ADDR_EXP 76
20570: PUSH
20571: LD_INT 1
20573: ST_TO_ADDR
// if p3 = 16 then
20574: LD_VAR 0 3
20578: PUSH
20579: LD_INT 16
20581: EQUAL
20582: IFFALSE 20592
// sTroll := true ;
20584: LD_ADDR_EXP 77
20588: PUSH
20589: LD_INT 1
20591: ST_TO_ADDR
// if p3 = 17 then
20592: LD_VAR 0 3
20596: PUSH
20597: LD_INT 17
20599: EQUAL
20600: IFFALSE 20610
// sSlow := true ;
20602: LD_ADDR_EXP 78
20606: PUSH
20607: LD_INT 1
20609: ST_TO_ADDR
// if p3 = 18 then
20610: LD_VAR 0 3
20614: PUSH
20615: LD_INT 18
20617: EQUAL
20618: IFFALSE 20628
// sLack := true ;
20620: LD_ADDR_EXP 79
20624: PUSH
20625: LD_INT 1
20627: ST_TO_ADDR
// if p3 = 19 then
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 19
20635: EQUAL
20636: IFFALSE 20646
// sTank := true ;
20638: LD_ADDR_EXP 81
20642: PUSH
20643: LD_INT 1
20645: ST_TO_ADDR
// if p3 = 20 then
20646: LD_VAR 0 3
20650: PUSH
20651: LD_INT 20
20653: EQUAL
20654: IFFALSE 20664
// sRemote := true ;
20656: LD_ADDR_EXP 82
20660: PUSH
20661: LD_INT 1
20663: ST_TO_ADDR
// if p3 = 21 then
20664: LD_VAR 0 3
20668: PUSH
20669: LD_INT 21
20671: EQUAL
20672: IFFALSE 20682
// sPowell := true ;
20674: LD_ADDR_EXP 83
20678: PUSH
20679: LD_INT 1
20681: ST_TO_ADDR
// if p3 = 22 then
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 22
20689: EQUAL
20690: IFFALSE 20700
// sTeleport := true ;
20692: LD_ADDR_EXP 86
20696: PUSH
20697: LD_INT 1
20699: ST_TO_ADDR
// if p3 = 23 then
20700: LD_VAR 0 3
20704: PUSH
20705: LD_INT 23
20707: EQUAL
20708: IFFALSE 20718
// sOilTower := true ;
20710: LD_ADDR_EXP 88
20714: PUSH
20715: LD_INT 1
20717: ST_TO_ADDR
// if p3 = 24 then
20718: LD_VAR 0 3
20722: PUSH
20723: LD_INT 24
20725: EQUAL
20726: IFFALSE 20736
// sShovel := true ;
20728: LD_ADDR_EXP 89
20732: PUSH
20733: LD_INT 1
20735: ST_TO_ADDR
// if p3 = 25 then
20736: LD_VAR 0 3
20740: PUSH
20741: LD_INT 25
20743: EQUAL
20744: IFFALSE 20754
// sSheik := true ;
20746: LD_ADDR_EXP 90
20750: PUSH
20751: LD_INT 1
20753: ST_TO_ADDR
// if p3 = 26 then
20754: LD_VAR 0 3
20758: PUSH
20759: LD_INT 26
20761: EQUAL
20762: IFFALSE 20772
// sEarthquake := true ;
20764: LD_ADDR_EXP 92
20768: PUSH
20769: LD_INT 1
20771: ST_TO_ADDR
// if p3 = 27 then
20772: LD_VAR 0 3
20776: PUSH
20777: LD_INT 27
20779: EQUAL
20780: IFFALSE 20790
// sAI := true ;
20782: LD_ADDR_EXP 93
20786: PUSH
20787: LD_INT 1
20789: ST_TO_ADDR
// if p3 = 28 then
20790: LD_VAR 0 3
20794: PUSH
20795: LD_INT 28
20797: EQUAL
20798: IFFALSE 20808
// sCargo := true ;
20800: LD_ADDR_EXP 96
20804: PUSH
20805: LD_INT 1
20807: ST_TO_ADDR
// if p3 = 29 then
20808: LD_VAR 0 3
20812: PUSH
20813: LD_INT 29
20815: EQUAL
20816: IFFALSE 20826
// sDLaser := true ;
20818: LD_ADDR_EXP 97
20822: PUSH
20823: LD_INT 1
20825: ST_TO_ADDR
// if p3 = 30 then
20826: LD_VAR 0 3
20830: PUSH
20831: LD_INT 30
20833: EQUAL
20834: IFFALSE 20844
// sExchange := true ;
20836: LD_ADDR_EXP 98
20840: PUSH
20841: LD_INT 1
20843: ST_TO_ADDR
// if p3 = 31 then
20844: LD_VAR 0 3
20848: PUSH
20849: LD_INT 31
20851: EQUAL
20852: IFFALSE 20862
// sFac := true ;
20854: LD_ADDR_EXP 99
20858: PUSH
20859: LD_INT 1
20861: ST_TO_ADDR
// if p3 = 32 then
20862: LD_VAR 0 3
20866: PUSH
20867: LD_INT 32
20869: EQUAL
20870: IFFALSE 20880
// sPower := true ;
20872: LD_ADDR_EXP 100
20876: PUSH
20877: LD_INT 1
20879: ST_TO_ADDR
// if p3 = 33 then
20880: LD_VAR 0 3
20884: PUSH
20885: LD_INT 33
20887: EQUAL
20888: IFFALSE 20898
// sRandom := true ;
20890: LD_ADDR_EXP 101
20894: PUSH
20895: LD_INT 1
20897: ST_TO_ADDR
// if p3 = 34 then
20898: LD_VAR 0 3
20902: PUSH
20903: LD_INT 34
20905: EQUAL
20906: IFFALSE 20916
// sShield := true ;
20908: LD_ADDR_EXP 102
20912: PUSH
20913: LD_INT 1
20915: ST_TO_ADDR
// if p3 = 35 then
20916: LD_VAR 0 3
20920: PUSH
20921: LD_INT 35
20923: EQUAL
20924: IFFALSE 20934
// sTime := true ;
20926: LD_ADDR_EXP 103
20930: PUSH
20931: LD_INT 1
20933: ST_TO_ADDR
// if p3 = 36 then
20934: LD_VAR 0 3
20938: PUSH
20939: LD_INT 36
20941: EQUAL
20942: IFFALSE 20952
// sTools := true ;
20944: LD_ADDR_EXP 104
20948: PUSH
20949: LD_INT 1
20951: ST_TO_ADDR
// if p3 = 101 then
20952: LD_VAR 0 3
20956: PUSH
20957: LD_INT 101
20959: EQUAL
20960: IFFALSE 20970
// sSold := true ;
20962: LD_ADDR_EXP 69
20966: PUSH
20967: LD_INT 1
20969: ST_TO_ADDR
// if p3 = 102 then
20970: LD_VAR 0 3
20974: PUSH
20975: LD_INT 102
20977: EQUAL
20978: IFFALSE 20988
// sDiff := true ;
20980: LD_ADDR_EXP 70
20984: PUSH
20985: LD_INT 1
20987: ST_TO_ADDR
// if p3 = 103 then
20988: LD_VAR 0 3
20992: PUSH
20993: LD_INT 103
20995: EQUAL
20996: IFFALSE 21006
// sFog := true ;
20998: LD_ADDR_EXP 73
21002: PUSH
21003: LD_INT 1
21005: ST_TO_ADDR
// if p3 = 104 then
21006: LD_VAR 0 3
21010: PUSH
21011: LD_INT 104
21013: EQUAL
21014: IFFALSE 21024
// sReset := true ;
21016: LD_ADDR_EXP 74
21020: PUSH
21021: LD_INT 1
21023: ST_TO_ADDR
// if p3 = 105 then
21024: LD_VAR 0 3
21028: PUSH
21029: LD_INT 105
21031: EQUAL
21032: IFFALSE 21042
// sSun := true ;
21034: LD_ADDR_EXP 75
21038: PUSH
21039: LD_INT 1
21041: ST_TO_ADDR
// if p3 = 106 then
21042: LD_VAR 0 3
21046: PUSH
21047: LD_INT 106
21049: EQUAL
21050: IFFALSE 21060
// sTiger := true ;
21052: LD_ADDR_EXP 71
21056: PUSH
21057: LD_INT 1
21059: ST_TO_ADDR
// if p3 = 107 then
21060: LD_VAR 0 3
21064: PUSH
21065: LD_INT 107
21067: EQUAL
21068: IFFALSE 21078
// sBomb := true ;
21070: LD_ADDR_EXP 72
21074: PUSH
21075: LD_INT 1
21077: ST_TO_ADDR
// if p3 = 108 then
21078: LD_VAR 0 3
21082: PUSH
21083: LD_INT 108
21085: EQUAL
21086: IFFALSE 21096
// sWound := true ;
21088: LD_ADDR_EXP 80
21092: PUSH
21093: LD_INT 1
21095: ST_TO_ADDR
// if p3 = 109 then
21096: LD_VAR 0 3
21100: PUSH
21101: LD_INT 109
21103: EQUAL
21104: IFFALSE 21114
// sBetray := true ;
21106: LD_ADDR_EXP 84
21110: PUSH
21111: LD_INT 1
21113: ST_TO_ADDR
// if p3 = 110 then
21114: LD_VAR 0 3
21118: PUSH
21119: LD_INT 110
21121: EQUAL
21122: IFFALSE 21132
// sContamin := true ;
21124: LD_ADDR_EXP 85
21128: PUSH
21129: LD_INT 1
21131: ST_TO_ADDR
// if p3 = 111 then
21132: LD_VAR 0 3
21136: PUSH
21137: LD_INT 111
21139: EQUAL
21140: IFFALSE 21150
// sOil := true ;
21142: LD_ADDR_EXP 87
21146: PUSH
21147: LD_INT 1
21149: ST_TO_ADDR
// if p3 = 112 then
21150: LD_VAR 0 3
21154: PUSH
21155: LD_INT 112
21157: EQUAL
21158: IFFALSE 21168
// sStu := true ;
21160: LD_ADDR_EXP 91
21164: PUSH
21165: LD_INT 1
21167: ST_TO_ADDR
// if p3 = 113 then
21168: LD_VAR 0 3
21172: PUSH
21173: LD_INT 113
21175: EQUAL
21176: IFFALSE 21186
// sBazooka := true ;
21178: LD_ADDR_EXP 94
21182: PUSH
21183: LD_INT 1
21185: ST_TO_ADDR
// if p3 = 114 then
21186: LD_VAR 0 3
21190: PUSH
21191: LD_INT 114
21193: EQUAL
21194: IFFALSE 21204
// sMortar := true ;
21196: LD_ADDR_EXP 95
21200: PUSH
21201: LD_INT 1
21203: ST_TO_ADDR
// if p3 = 115 then
21204: LD_VAR 0 3
21208: PUSH
21209: LD_INT 115
21211: EQUAL
21212: IFFALSE 21222
// sRanger := true ;
21214: LD_ADDR_EXP 105
21218: PUSH
21219: LD_INT 1
21221: ST_TO_ADDR
// if p3 = 116 then
21222: LD_VAR 0 3
21226: PUSH
21227: LD_INT 116
21229: EQUAL
21230: IFFALSE 21240
// sComputer := true ;
21232: LD_ADDR_EXP 106
21236: PUSH
21237: LD_INT 1
21239: ST_TO_ADDR
// if p3 = 117 then
21240: LD_VAR 0 3
21244: PUSH
21245: LD_INT 117
21247: EQUAL
21248: IFFALSE 21258
// s30 := true ;
21250: LD_ADDR_EXP 107
21254: PUSH
21255: LD_INT 1
21257: ST_TO_ADDR
// if p3 = 118 then
21258: LD_VAR 0 3
21262: PUSH
21263: LD_INT 118
21265: EQUAL
21266: IFFALSE 21276
// s60 := true ;
21268: LD_ADDR_EXP 108
21272: PUSH
21273: LD_INT 1
21275: ST_TO_ADDR
// end ; if p2 = hack_mode then
21276: LD_VAR 0 2
21280: PUSH
21281: LD_INT 101
21283: EQUAL
21284: IFFALSE 21412
// begin case p3 of 1 :
21286: LD_VAR 0 3
21290: PUSH
21291: LD_INT 1
21293: DOUBLE
21294: EQUAL
21295: IFTRUE 21299
21297: GO 21306
21299: POP
// hHackUnlimitedResources ; 2 :
21300: CALL 33559 0 0
21304: GO 21412
21306: LD_INT 2
21308: DOUBLE
21309: EQUAL
21310: IFTRUE 21314
21312: GO 21321
21314: POP
// hHackSetLevel10 ; 3 :
21315: CALL 33692 0 0
21319: GO 21412
21321: LD_INT 3
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21336
21329: POP
// hHackSetLevel10YourUnits ; 4 :
21330: CALL 33777 0 0
21334: GO 21412
21336: LD_INT 4
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21351
21344: POP
// hHackInvincible ; 5 :
21345: CALL 34225 0 0
21349: GO 21412
21351: LD_INT 5
21353: DOUBLE
21354: EQUAL
21355: IFTRUE 21359
21357: GO 21366
21359: POP
// hHackInvisible ; 6 :
21360: CALL 34336 0 0
21364: GO 21412
21366: LD_INT 6
21368: DOUBLE
21369: EQUAL
21370: IFTRUE 21374
21372: GO 21381
21374: POP
// hHackChangeYourSide ; 7 :
21375: CALL 34393 0 0
21379: GO 21412
21381: LD_INT 7
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21396
21389: POP
// hHackChangeUnitSide ; 8 :
21390: CALL 34435 0 0
21394: GO 21412
21396: LD_INT 8
21398: DOUBLE
21399: EQUAL
21400: IFTRUE 21404
21402: GO 21411
21404: POP
// hHackFog ; end ;
21405: CALL 34536 0 0
21409: GO 21412
21411: POP
// end ; if p2 = game_save_mode then
21412: LD_VAR 0 2
21416: PUSH
21417: LD_INT 102
21419: EQUAL
21420: IFFALSE 21475
// begin if p3 = 1 then
21422: LD_VAR 0 3
21426: PUSH
21427: LD_INT 1
21429: EQUAL
21430: IFFALSE 21442
// globalGameSaveCounter := p4 ;
21432: LD_ADDR_EXP 51
21436: PUSH
21437: LD_VAR 0 4
21441: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 2
21449: EQUAL
21450: PUSH
21451: LD_EXP 51
21455: AND
21456: IFFALSE 21475
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21458: LD_STRING setGameSaveCounter(
21460: PUSH
21461: LD_EXP 51
21465: STR
21466: PUSH
21467: LD_STRING )
21469: STR
21470: PPUSH
21471: CALL_OW 559
// end ; end ;
21475: LD_VAR 0 7
21479: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21480: LD_INT 0
21482: PPUSH
// streamModeActive := false ;
21483: LD_ADDR_EXP 52
21487: PUSH
21488: LD_INT 0
21490: ST_TO_ADDR
// normalCounter := 36 ;
21491: LD_ADDR_EXP 53
21495: PUSH
21496: LD_INT 36
21498: ST_TO_ADDR
// hardcoreCounter := 18 ;
21499: LD_ADDR_EXP 54
21503: PUSH
21504: LD_INT 18
21506: ST_TO_ADDR
// sRocket := false ;
21507: LD_ADDR_EXP 57
21511: PUSH
21512: LD_INT 0
21514: ST_TO_ADDR
// sSpeed := false ;
21515: LD_ADDR_EXP 56
21519: PUSH
21520: LD_INT 0
21522: ST_TO_ADDR
// sEngine := false ;
21523: LD_ADDR_EXP 58
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// sSpec := false ;
21531: LD_ADDR_EXP 55
21535: PUSH
21536: LD_INT 0
21538: ST_TO_ADDR
// sLevel := false ;
21539: LD_ADDR_EXP 59
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// sArmoury := false ;
21547: LD_ADDR_EXP 60
21551: PUSH
21552: LD_INT 0
21554: ST_TO_ADDR
// sRadar := false ;
21555: LD_ADDR_EXP 61
21559: PUSH
21560: LD_INT 0
21562: ST_TO_ADDR
// sBunker := false ;
21563: LD_ADDR_EXP 62
21567: PUSH
21568: LD_INT 0
21570: ST_TO_ADDR
// sHack := false ;
21571: LD_ADDR_EXP 63
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
// sFire := false ;
21579: LD_ADDR_EXP 64
21583: PUSH
21584: LD_INT 0
21586: ST_TO_ADDR
// sRefresh := false ;
21587: LD_ADDR_EXP 65
21591: PUSH
21592: LD_INT 0
21594: ST_TO_ADDR
// sExp := false ;
21595: LD_ADDR_EXP 66
21599: PUSH
21600: LD_INT 0
21602: ST_TO_ADDR
// sDepot := false ;
21603: LD_ADDR_EXP 67
21607: PUSH
21608: LD_INT 0
21610: ST_TO_ADDR
// sFlag := false ;
21611: LD_ADDR_EXP 68
21615: PUSH
21616: LD_INT 0
21618: ST_TO_ADDR
// sKamikadze := false ;
21619: LD_ADDR_EXP 76
21623: PUSH
21624: LD_INT 0
21626: ST_TO_ADDR
// sTroll := false ;
21627: LD_ADDR_EXP 77
21631: PUSH
21632: LD_INT 0
21634: ST_TO_ADDR
// sSlow := false ;
21635: LD_ADDR_EXP 78
21639: PUSH
21640: LD_INT 0
21642: ST_TO_ADDR
// sLack := false ;
21643: LD_ADDR_EXP 79
21647: PUSH
21648: LD_INT 0
21650: ST_TO_ADDR
// sTank := false ;
21651: LD_ADDR_EXP 81
21655: PUSH
21656: LD_INT 0
21658: ST_TO_ADDR
// sRemote := false ;
21659: LD_ADDR_EXP 82
21663: PUSH
21664: LD_INT 0
21666: ST_TO_ADDR
// sPowell := false ;
21667: LD_ADDR_EXP 83
21671: PUSH
21672: LD_INT 0
21674: ST_TO_ADDR
// sTeleport := false ;
21675: LD_ADDR_EXP 86
21679: PUSH
21680: LD_INT 0
21682: ST_TO_ADDR
// sOilTower := false ;
21683: LD_ADDR_EXP 88
21687: PUSH
21688: LD_INT 0
21690: ST_TO_ADDR
// sShovel := false ;
21691: LD_ADDR_EXP 89
21695: PUSH
21696: LD_INT 0
21698: ST_TO_ADDR
// sSheik := false ;
21699: LD_ADDR_EXP 90
21703: PUSH
21704: LD_INT 0
21706: ST_TO_ADDR
// sEarthquake := false ;
21707: LD_ADDR_EXP 92
21711: PUSH
21712: LD_INT 0
21714: ST_TO_ADDR
// sAI := false ;
21715: LD_ADDR_EXP 93
21719: PUSH
21720: LD_INT 0
21722: ST_TO_ADDR
// sCargo := false ;
21723: LD_ADDR_EXP 96
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
// sDLaser := false ;
21731: LD_ADDR_EXP 97
21735: PUSH
21736: LD_INT 0
21738: ST_TO_ADDR
// sExchange := false ;
21739: LD_ADDR_EXP 98
21743: PUSH
21744: LD_INT 0
21746: ST_TO_ADDR
// sFac := false ;
21747: LD_ADDR_EXP 99
21751: PUSH
21752: LD_INT 0
21754: ST_TO_ADDR
// sPower := false ;
21755: LD_ADDR_EXP 100
21759: PUSH
21760: LD_INT 0
21762: ST_TO_ADDR
// sRandom := false ;
21763: LD_ADDR_EXP 101
21767: PUSH
21768: LD_INT 0
21770: ST_TO_ADDR
// sShield := false ;
21771: LD_ADDR_EXP 102
21775: PUSH
21776: LD_INT 0
21778: ST_TO_ADDR
// sTime := false ;
21779: LD_ADDR_EXP 103
21783: PUSH
21784: LD_INT 0
21786: ST_TO_ADDR
// sTools := false ;
21787: LD_ADDR_EXP 104
21791: PUSH
21792: LD_INT 0
21794: ST_TO_ADDR
// sSold := false ;
21795: LD_ADDR_EXP 69
21799: PUSH
21800: LD_INT 0
21802: ST_TO_ADDR
// sDiff := false ;
21803: LD_ADDR_EXP 70
21807: PUSH
21808: LD_INT 0
21810: ST_TO_ADDR
// sFog := false ;
21811: LD_ADDR_EXP 73
21815: PUSH
21816: LD_INT 0
21818: ST_TO_ADDR
// sReset := false ;
21819: LD_ADDR_EXP 74
21823: PUSH
21824: LD_INT 0
21826: ST_TO_ADDR
// sSun := false ;
21827: LD_ADDR_EXP 75
21831: PUSH
21832: LD_INT 0
21834: ST_TO_ADDR
// sTiger := false ;
21835: LD_ADDR_EXP 71
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// sBomb := false ;
21843: LD_ADDR_EXP 72
21847: PUSH
21848: LD_INT 0
21850: ST_TO_ADDR
// sWound := false ;
21851: LD_ADDR_EXP 80
21855: PUSH
21856: LD_INT 0
21858: ST_TO_ADDR
// sBetray := false ;
21859: LD_ADDR_EXP 84
21863: PUSH
21864: LD_INT 0
21866: ST_TO_ADDR
// sContamin := false ;
21867: LD_ADDR_EXP 85
21871: PUSH
21872: LD_INT 0
21874: ST_TO_ADDR
// sOil := false ;
21875: LD_ADDR_EXP 87
21879: PUSH
21880: LD_INT 0
21882: ST_TO_ADDR
// sStu := false ;
21883: LD_ADDR_EXP 91
21887: PUSH
21888: LD_INT 0
21890: ST_TO_ADDR
// sBazooka := false ;
21891: LD_ADDR_EXP 94
21895: PUSH
21896: LD_INT 0
21898: ST_TO_ADDR
// sMortar := false ;
21899: LD_ADDR_EXP 95
21903: PUSH
21904: LD_INT 0
21906: ST_TO_ADDR
// sRanger := false ;
21907: LD_ADDR_EXP 105
21911: PUSH
21912: LD_INT 0
21914: ST_TO_ADDR
// sComputer := false ;
21915: LD_ADDR_EXP 106
21919: PUSH
21920: LD_INT 0
21922: ST_TO_ADDR
// s30 := false ;
21923: LD_ADDR_EXP 107
21927: PUSH
21928: LD_INT 0
21930: ST_TO_ADDR
// s60 := false ;
21931: LD_ADDR_EXP 108
21935: PUSH
21936: LD_INT 0
21938: ST_TO_ADDR
// end ;
21939: LD_VAR 0 1
21943: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21944: LD_INT 0
21946: PPUSH
21947: PPUSH
21948: PPUSH
21949: PPUSH
21950: PPUSH
21951: PPUSH
21952: PPUSH
// result := [ ] ;
21953: LD_ADDR_VAR 0 2
21957: PUSH
21958: EMPTY
21959: ST_TO_ADDR
// if campaign_id = 1 then
21960: LD_OWVAR 69
21964: PUSH
21965: LD_INT 1
21967: EQUAL
21968: IFFALSE 25134
// begin case mission_number of 1 :
21970: LD_OWVAR 70
21974: PUSH
21975: LD_INT 1
21977: DOUBLE
21978: EQUAL
21979: IFTRUE 21983
21981: GO 22059
21983: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21984: LD_ADDR_VAR 0 2
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 4
21994: PUSH
21995: LD_INT 11
21997: PUSH
21998: LD_INT 12
22000: PUSH
22001: LD_INT 15
22003: PUSH
22004: LD_INT 16
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_INT 23
22012: PUSH
22013: LD_INT 26
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 101
22029: PUSH
22030: LD_INT 102
22032: PUSH
22033: LD_INT 106
22035: PUSH
22036: LD_INT 116
22038: PUSH
22039: LD_INT 117
22041: PUSH
22042: LD_INT 118
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: ST_TO_ADDR
22057: GO 25132
22059: LD_INT 2
22061: DOUBLE
22062: EQUAL
22063: IFTRUE 22067
22065: GO 22151
22067: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22068: LD_ADDR_VAR 0 2
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: LD_INT 4
22078: PUSH
22079: LD_INT 11
22081: PUSH
22082: LD_INT 12
22084: PUSH
22085: LD_INT 15
22087: PUSH
22088: LD_INT 16
22090: PUSH
22091: LD_INT 22
22093: PUSH
22094: LD_INT 23
22096: PUSH
22097: LD_INT 26
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 101
22113: PUSH
22114: LD_INT 102
22116: PUSH
22117: LD_INT 105
22119: PUSH
22120: LD_INT 106
22122: PUSH
22123: LD_INT 108
22125: PUSH
22126: LD_INT 116
22128: PUSH
22129: LD_INT 117
22131: PUSH
22132: LD_INT 118
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: ST_TO_ADDR
22149: GO 25132
22151: LD_INT 3
22153: DOUBLE
22154: EQUAL
22155: IFTRUE 22159
22157: GO 22247
22159: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22160: LD_ADDR_VAR 0 2
22164: PUSH
22165: LD_INT 2
22167: PUSH
22168: LD_INT 4
22170: PUSH
22171: LD_INT 5
22173: PUSH
22174: LD_INT 11
22176: PUSH
22177: LD_INT 12
22179: PUSH
22180: LD_INT 15
22182: PUSH
22183: LD_INT 16
22185: PUSH
22186: LD_INT 22
22188: PUSH
22189: LD_INT 26
22191: PUSH
22192: LD_INT 36
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 101
22209: PUSH
22210: LD_INT 102
22212: PUSH
22213: LD_INT 105
22215: PUSH
22216: LD_INT 106
22218: PUSH
22219: LD_INT 108
22221: PUSH
22222: LD_INT 116
22224: PUSH
22225: LD_INT 117
22227: PUSH
22228: LD_INT 118
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: ST_TO_ADDR
22245: GO 25132
22247: LD_INT 4
22249: DOUBLE
22250: EQUAL
22251: IFTRUE 22255
22253: GO 22351
22255: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22256: LD_ADDR_VAR 0 2
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: LD_INT 4
22266: PUSH
22267: LD_INT 5
22269: PUSH
22270: LD_INT 8
22272: PUSH
22273: LD_INT 11
22275: PUSH
22276: LD_INT 12
22278: PUSH
22279: LD_INT 15
22281: PUSH
22282: LD_INT 16
22284: PUSH
22285: LD_INT 22
22287: PUSH
22288: LD_INT 23
22290: PUSH
22291: LD_INT 26
22293: PUSH
22294: LD_INT 36
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 101
22313: PUSH
22314: LD_INT 102
22316: PUSH
22317: LD_INT 105
22319: PUSH
22320: LD_INT 106
22322: PUSH
22323: LD_INT 108
22325: PUSH
22326: LD_INT 116
22328: PUSH
22329: LD_INT 117
22331: PUSH
22332: LD_INT 118
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: ST_TO_ADDR
22349: GO 25132
22351: LD_INT 5
22353: DOUBLE
22354: EQUAL
22355: IFTRUE 22359
22357: GO 22471
22359: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22360: LD_ADDR_VAR 0 2
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: LD_INT 4
22370: PUSH
22371: LD_INT 5
22373: PUSH
22374: LD_INT 6
22376: PUSH
22377: LD_INT 8
22379: PUSH
22380: LD_INT 11
22382: PUSH
22383: LD_INT 12
22385: PUSH
22386: LD_INT 15
22388: PUSH
22389: LD_INT 16
22391: PUSH
22392: LD_INT 22
22394: PUSH
22395: LD_INT 23
22397: PUSH
22398: LD_INT 25
22400: PUSH
22401: LD_INT 26
22403: PUSH
22404: LD_INT 36
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 101
22425: PUSH
22426: LD_INT 102
22428: PUSH
22429: LD_INT 105
22431: PUSH
22432: LD_INT 106
22434: PUSH
22435: LD_INT 108
22437: PUSH
22438: LD_INT 109
22440: PUSH
22441: LD_INT 112
22443: PUSH
22444: LD_INT 116
22446: PUSH
22447: LD_INT 117
22449: PUSH
22450: LD_INT 118
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: ST_TO_ADDR
22469: GO 25132
22471: LD_INT 6
22473: DOUBLE
22474: EQUAL
22475: IFTRUE 22479
22477: GO 22611
22479: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22480: LD_ADDR_VAR 0 2
22484: PUSH
22485: LD_INT 2
22487: PUSH
22488: LD_INT 4
22490: PUSH
22491: LD_INT 5
22493: PUSH
22494: LD_INT 6
22496: PUSH
22497: LD_INT 8
22499: PUSH
22500: LD_INT 11
22502: PUSH
22503: LD_INT 12
22505: PUSH
22506: LD_INT 15
22508: PUSH
22509: LD_INT 16
22511: PUSH
22512: LD_INT 20
22514: PUSH
22515: LD_INT 21
22517: PUSH
22518: LD_INT 22
22520: PUSH
22521: LD_INT 23
22523: PUSH
22524: LD_INT 25
22526: PUSH
22527: LD_INT 26
22529: PUSH
22530: LD_INT 30
22532: PUSH
22533: LD_INT 31
22535: PUSH
22536: LD_INT 32
22538: PUSH
22539: LD_INT 36
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 101
22565: PUSH
22566: LD_INT 102
22568: PUSH
22569: LD_INT 105
22571: PUSH
22572: LD_INT 106
22574: PUSH
22575: LD_INT 108
22577: PUSH
22578: LD_INT 109
22580: PUSH
22581: LD_INT 112
22583: PUSH
22584: LD_INT 116
22586: PUSH
22587: LD_INT 117
22589: PUSH
22590: LD_INT 118
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: ST_TO_ADDR
22609: GO 25132
22611: LD_INT 7
22613: DOUBLE
22614: EQUAL
22615: IFTRUE 22619
22617: GO 22731
22619: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22620: LD_ADDR_VAR 0 2
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 4
22630: PUSH
22631: LD_INT 5
22633: PUSH
22634: LD_INT 7
22636: PUSH
22637: LD_INT 11
22639: PUSH
22640: LD_INT 12
22642: PUSH
22643: LD_INT 15
22645: PUSH
22646: LD_INT 16
22648: PUSH
22649: LD_INT 20
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 22
22657: PUSH
22658: LD_INT 23
22660: PUSH
22661: LD_INT 25
22663: PUSH
22664: LD_INT 26
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 101
22685: PUSH
22686: LD_INT 102
22688: PUSH
22689: LD_INT 103
22691: PUSH
22692: LD_INT 105
22694: PUSH
22695: LD_INT 106
22697: PUSH
22698: LD_INT 108
22700: PUSH
22701: LD_INT 112
22703: PUSH
22704: LD_INT 116
22706: PUSH
22707: LD_INT 117
22709: PUSH
22710: LD_INT 118
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: ST_TO_ADDR
22729: GO 25132
22731: LD_INT 8
22733: DOUBLE
22734: EQUAL
22735: IFTRUE 22739
22737: GO 22879
22739: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22740: LD_ADDR_VAR 0 2
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 4
22750: PUSH
22751: LD_INT 5
22753: PUSH
22754: LD_INT 6
22756: PUSH
22757: LD_INT 7
22759: PUSH
22760: LD_INT 8
22762: PUSH
22763: LD_INT 11
22765: PUSH
22766: LD_INT 12
22768: PUSH
22769: LD_INT 15
22771: PUSH
22772: LD_INT 16
22774: PUSH
22775: LD_INT 20
22777: PUSH
22778: LD_INT 21
22780: PUSH
22781: LD_INT 22
22783: PUSH
22784: LD_INT 23
22786: PUSH
22787: LD_INT 25
22789: PUSH
22790: LD_INT 26
22792: PUSH
22793: LD_INT 30
22795: PUSH
22796: LD_INT 31
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: LD_INT 36
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 101
22829: PUSH
22830: LD_INT 102
22832: PUSH
22833: LD_INT 103
22835: PUSH
22836: LD_INT 105
22838: PUSH
22839: LD_INT 106
22841: PUSH
22842: LD_INT 108
22844: PUSH
22845: LD_INT 109
22847: PUSH
22848: LD_INT 112
22850: PUSH
22851: LD_INT 116
22853: PUSH
22854: LD_INT 117
22856: PUSH
22857: LD_INT 118
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: ST_TO_ADDR
22877: GO 25132
22879: LD_INT 9
22881: DOUBLE
22882: EQUAL
22883: IFTRUE 22887
22885: GO 23035
22887: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22888: LD_ADDR_VAR 0 2
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: LD_INT 4
22898: PUSH
22899: LD_INT 5
22901: PUSH
22902: LD_INT 6
22904: PUSH
22905: LD_INT 7
22907: PUSH
22908: LD_INT 8
22910: PUSH
22911: LD_INT 11
22913: PUSH
22914: LD_INT 12
22916: PUSH
22917: LD_INT 15
22919: PUSH
22920: LD_INT 16
22922: PUSH
22923: LD_INT 20
22925: PUSH
22926: LD_INT 21
22928: PUSH
22929: LD_INT 22
22931: PUSH
22932: LD_INT 23
22934: PUSH
22935: LD_INT 25
22937: PUSH
22938: LD_INT 26
22940: PUSH
22941: LD_INT 28
22943: PUSH
22944: LD_INT 30
22946: PUSH
22947: LD_INT 31
22949: PUSH
22950: LD_INT 32
22952: PUSH
22953: LD_INT 36
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 101
22981: PUSH
22982: LD_INT 102
22984: PUSH
22985: LD_INT 103
22987: PUSH
22988: LD_INT 105
22990: PUSH
22991: LD_INT 106
22993: PUSH
22994: LD_INT 108
22996: PUSH
22997: LD_INT 109
22999: PUSH
23000: LD_INT 112
23002: PUSH
23003: LD_INT 114
23005: PUSH
23006: LD_INT 116
23008: PUSH
23009: LD_INT 117
23011: PUSH
23012: LD_INT 118
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: ST_TO_ADDR
23033: GO 25132
23035: LD_INT 10
23037: DOUBLE
23038: EQUAL
23039: IFTRUE 23043
23041: GO 23239
23043: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23044: LD_ADDR_VAR 0 2
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: LD_INT 4
23054: PUSH
23055: LD_INT 5
23057: PUSH
23058: LD_INT 6
23060: PUSH
23061: LD_INT 7
23063: PUSH
23064: LD_INT 8
23066: PUSH
23067: LD_INT 9
23069: PUSH
23070: LD_INT 10
23072: PUSH
23073: LD_INT 11
23075: PUSH
23076: LD_INT 12
23078: PUSH
23079: LD_INT 13
23081: PUSH
23082: LD_INT 14
23084: PUSH
23085: LD_INT 15
23087: PUSH
23088: LD_INT 16
23090: PUSH
23091: LD_INT 17
23093: PUSH
23094: LD_INT 18
23096: PUSH
23097: LD_INT 19
23099: PUSH
23100: LD_INT 20
23102: PUSH
23103: LD_INT 21
23105: PUSH
23106: LD_INT 22
23108: PUSH
23109: LD_INT 23
23111: PUSH
23112: LD_INT 24
23114: PUSH
23115: LD_INT 25
23117: PUSH
23118: LD_INT 26
23120: PUSH
23121: LD_INT 28
23123: PUSH
23124: LD_INT 30
23126: PUSH
23127: LD_INT 31
23129: PUSH
23130: LD_INT 32
23132: PUSH
23133: LD_INT 36
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 101
23169: PUSH
23170: LD_INT 102
23172: PUSH
23173: LD_INT 103
23175: PUSH
23176: LD_INT 104
23178: PUSH
23179: LD_INT 105
23181: PUSH
23182: LD_INT 106
23184: PUSH
23185: LD_INT 107
23187: PUSH
23188: LD_INT 108
23190: PUSH
23191: LD_INT 109
23193: PUSH
23194: LD_INT 110
23196: PUSH
23197: LD_INT 111
23199: PUSH
23200: LD_INT 112
23202: PUSH
23203: LD_INT 114
23205: PUSH
23206: LD_INT 116
23208: PUSH
23209: LD_INT 117
23211: PUSH
23212: LD_INT 118
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: ST_TO_ADDR
23237: GO 25132
23239: LD_INT 11
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23451
23247: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: LD_INT 3
23258: PUSH
23259: LD_INT 4
23261: PUSH
23262: LD_INT 5
23264: PUSH
23265: LD_INT 6
23267: PUSH
23268: LD_INT 7
23270: PUSH
23271: LD_INT 8
23273: PUSH
23274: LD_INT 9
23276: PUSH
23277: LD_INT 10
23279: PUSH
23280: LD_INT 11
23282: PUSH
23283: LD_INT 12
23285: PUSH
23286: LD_INT 13
23288: PUSH
23289: LD_INT 14
23291: PUSH
23292: LD_INT 15
23294: PUSH
23295: LD_INT 16
23297: PUSH
23298: LD_INT 17
23300: PUSH
23301: LD_INT 18
23303: PUSH
23304: LD_INT 19
23306: PUSH
23307: LD_INT 20
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 22
23315: PUSH
23316: LD_INT 23
23318: PUSH
23319: LD_INT 24
23321: PUSH
23322: LD_INT 25
23324: PUSH
23325: LD_INT 26
23327: PUSH
23328: LD_INT 28
23330: PUSH
23331: LD_INT 30
23333: PUSH
23334: LD_INT 31
23336: PUSH
23337: LD_INT 32
23339: PUSH
23340: LD_INT 34
23342: PUSH
23343: LD_INT 36
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 101
23381: PUSH
23382: LD_INT 102
23384: PUSH
23385: LD_INT 103
23387: PUSH
23388: LD_INT 104
23390: PUSH
23391: LD_INT 105
23393: PUSH
23394: LD_INT 106
23396: PUSH
23397: LD_INT 107
23399: PUSH
23400: LD_INT 108
23402: PUSH
23403: LD_INT 109
23405: PUSH
23406: LD_INT 110
23408: PUSH
23409: LD_INT 111
23411: PUSH
23412: LD_INT 112
23414: PUSH
23415: LD_INT 114
23417: PUSH
23418: LD_INT 116
23420: PUSH
23421: LD_INT 117
23423: PUSH
23424: LD_INT 118
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: ST_TO_ADDR
23449: GO 25132
23451: LD_INT 12
23453: DOUBLE
23454: EQUAL
23455: IFTRUE 23459
23457: GO 23679
23459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23460: LD_ADDR_VAR 0 2
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: LD_INT 2
23470: PUSH
23471: LD_INT 3
23473: PUSH
23474: LD_INT 4
23476: PUSH
23477: LD_INT 5
23479: PUSH
23480: LD_INT 6
23482: PUSH
23483: LD_INT 7
23485: PUSH
23486: LD_INT 8
23488: PUSH
23489: LD_INT 9
23491: PUSH
23492: LD_INT 10
23494: PUSH
23495: LD_INT 11
23497: PUSH
23498: LD_INT 12
23500: PUSH
23501: LD_INT 13
23503: PUSH
23504: LD_INT 14
23506: PUSH
23507: LD_INT 15
23509: PUSH
23510: LD_INT 16
23512: PUSH
23513: LD_INT 17
23515: PUSH
23516: LD_INT 18
23518: PUSH
23519: LD_INT 19
23521: PUSH
23522: LD_INT 20
23524: PUSH
23525: LD_INT 21
23527: PUSH
23528: LD_INT 22
23530: PUSH
23531: LD_INT 23
23533: PUSH
23534: LD_INT 24
23536: PUSH
23537: LD_INT 25
23539: PUSH
23540: LD_INT 26
23542: PUSH
23543: LD_INT 27
23545: PUSH
23546: LD_INT 28
23548: PUSH
23549: LD_INT 30
23551: PUSH
23552: LD_INT 31
23554: PUSH
23555: LD_INT 32
23557: PUSH
23558: LD_INT 33
23560: PUSH
23561: LD_INT 34
23563: PUSH
23564: LD_INT 36
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 101
23605: PUSH
23606: LD_INT 102
23608: PUSH
23609: LD_INT 103
23611: PUSH
23612: LD_INT 104
23614: PUSH
23615: LD_INT 105
23617: PUSH
23618: LD_INT 106
23620: PUSH
23621: LD_INT 107
23623: PUSH
23624: LD_INT 108
23626: PUSH
23627: LD_INT 109
23629: PUSH
23630: LD_INT 110
23632: PUSH
23633: LD_INT 111
23635: PUSH
23636: LD_INT 112
23638: PUSH
23639: LD_INT 113
23641: PUSH
23642: LD_INT 114
23644: PUSH
23645: LD_INT 116
23647: PUSH
23648: LD_INT 117
23650: PUSH
23651: LD_INT 118
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: ST_TO_ADDR
23677: GO 25132
23679: LD_INT 13
23681: DOUBLE
23682: EQUAL
23683: IFTRUE 23687
23685: GO 23895
23687: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23688: LD_ADDR_VAR 0 2
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: LD_INT 4
23704: PUSH
23705: LD_INT 5
23707: PUSH
23708: LD_INT 8
23710: PUSH
23711: LD_INT 9
23713: PUSH
23714: LD_INT 10
23716: PUSH
23717: LD_INT 11
23719: PUSH
23720: LD_INT 12
23722: PUSH
23723: LD_INT 14
23725: PUSH
23726: LD_INT 15
23728: PUSH
23729: LD_INT 16
23731: PUSH
23732: LD_INT 17
23734: PUSH
23735: LD_INT 18
23737: PUSH
23738: LD_INT 19
23740: PUSH
23741: LD_INT 20
23743: PUSH
23744: LD_INT 21
23746: PUSH
23747: LD_INT 22
23749: PUSH
23750: LD_INT 23
23752: PUSH
23753: LD_INT 24
23755: PUSH
23756: LD_INT 25
23758: PUSH
23759: LD_INT 26
23761: PUSH
23762: LD_INT 27
23764: PUSH
23765: LD_INT 28
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 31
23773: PUSH
23774: LD_INT 32
23776: PUSH
23777: LD_INT 33
23779: PUSH
23780: LD_INT 34
23782: PUSH
23783: LD_INT 36
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 101
23821: PUSH
23822: LD_INT 102
23824: PUSH
23825: LD_INT 103
23827: PUSH
23828: LD_INT 104
23830: PUSH
23831: LD_INT 105
23833: PUSH
23834: LD_INT 106
23836: PUSH
23837: LD_INT 107
23839: PUSH
23840: LD_INT 108
23842: PUSH
23843: LD_INT 109
23845: PUSH
23846: LD_INT 110
23848: PUSH
23849: LD_INT 111
23851: PUSH
23852: LD_INT 112
23854: PUSH
23855: LD_INT 113
23857: PUSH
23858: LD_INT 114
23860: PUSH
23861: LD_INT 116
23863: PUSH
23864: LD_INT 117
23866: PUSH
23867: LD_INT 118
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: ST_TO_ADDR
23893: GO 25132
23895: LD_INT 14
23897: DOUBLE
23898: EQUAL
23899: IFTRUE 23903
23901: GO 24127
23903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23904: LD_ADDR_VAR 0 2
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: LD_INT 3
23917: PUSH
23918: LD_INT 4
23920: PUSH
23921: LD_INT 5
23923: PUSH
23924: LD_INT 6
23926: PUSH
23927: LD_INT 7
23929: PUSH
23930: LD_INT 8
23932: PUSH
23933: LD_INT 9
23935: PUSH
23936: LD_INT 10
23938: PUSH
23939: LD_INT 11
23941: PUSH
23942: LD_INT 12
23944: PUSH
23945: LD_INT 13
23947: PUSH
23948: LD_INT 14
23950: PUSH
23951: LD_INT 15
23953: PUSH
23954: LD_INT 16
23956: PUSH
23957: LD_INT 17
23959: PUSH
23960: LD_INT 18
23962: PUSH
23963: LD_INT 19
23965: PUSH
23966: LD_INT 20
23968: PUSH
23969: LD_INT 21
23971: PUSH
23972: LD_INT 22
23974: PUSH
23975: LD_INT 23
23977: PUSH
23978: LD_INT 24
23980: PUSH
23981: LD_INT 25
23983: PUSH
23984: LD_INT 26
23986: PUSH
23987: LD_INT 27
23989: PUSH
23990: LD_INT 28
23992: PUSH
23993: LD_INT 29
23995: PUSH
23996: LD_INT 30
23998: PUSH
23999: LD_INT 31
24001: PUSH
24002: LD_INT 32
24004: PUSH
24005: LD_INT 33
24007: PUSH
24008: LD_INT 34
24010: PUSH
24011: LD_INT 36
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 101
24053: PUSH
24054: LD_INT 102
24056: PUSH
24057: LD_INT 103
24059: PUSH
24060: LD_INT 104
24062: PUSH
24063: LD_INT 105
24065: PUSH
24066: LD_INT 106
24068: PUSH
24069: LD_INT 107
24071: PUSH
24072: LD_INT 108
24074: PUSH
24075: LD_INT 109
24077: PUSH
24078: LD_INT 110
24080: PUSH
24081: LD_INT 111
24083: PUSH
24084: LD_INT 112
24086: PUSH
24087: LD_INT 113
24089: PUSH
24090: LD_INT 114
24092: PUSH
24093: LD_INT 116
24095: PUSH
24096: LD_INT 117
24098: PUSH
24099: LD_INT 118
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: ST_TO_ADDR
24125: GO 25132
24127: LD_INT 15
24129: DOUBLE
24130: EQUAL
24131: IFTRUE 24135
24133: GO 24359
24135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24136: LD_ADDR_VAR 0 2
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 2
24146: PUSH
24147: LD_INT 3
24149: PUSH
24150: LD_INT 4
24152: PUSH
24153: LD_INT 5
24155: PUSH
24156: LD_INT 6
24158: PUSH
24159: LD_INT 7
24161: PUSH
24162: LD_INT 8
24164: PUSH
24165: LD_INT 9
24167: PUSH
24168: LD_INT 10
24170: PUSH
24171: LD_INT 11
24173: PUSH
24174: LD_INT 12
24176: PUSH
24177: LD_INT 13
24179: PUSH
24180: LD_INT 14
24182: PUSH
24183: LD_INT 15
24185: PUSH
24186: LD_INT 16
24188: PUSH
24189: LD_INT 17
24191: PUSH
24192: LD_INT 18
24194: PUSH
24195: LD_INT 19
24197: PUSH
24198: LD_INT 20
24200: PUSH
24201: LD_INT 21
24203: PUSH
24204: LD_INT 22
24206: PUSH
24207: LD_INT 23
24209: PUSH
24210: LD_INT 24
24212: PUSH
24213: LD_INT 25
24215: PUSH
24216: LD_INT 26
24218: PUSH
24219: LD_INT 27
24221: PUSH
24222: LD_INT 28
24224: PUSH
24225: LD_INT 29
24227: PUSH
24228: LD_INT 30
24230: PUSH
24231: LD_INT 31
24233: PUSH
24234: LD_INT 32
24236: PUSH
24237: LD_INT 33
24239: PUSH
24240: LD_INT 34
24242: PUSH
24243: LD_INT 36
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 101
24285: PUSH
24286: LD_INT 102
24288: PUSH
24289: LD_INT 103
24291: PUSH
24292: LD_INT 104
24294: PUSH
24295: LD_INT 105
24297: PUSH
24298: LD_INT 106
24300: PUSH
24301: LD_INT 107
24303: PUSH
24304: LD_INT 108
24306: PUSH
24307: LD_INT 109
24309: PUSH
24310: LD_INT 110
24312: PUSH
24313: LD_INT 111
24315: PUSH
24316: LD_INT 112
24318: PUSH
24319: LD_INT 113
24321: PUSH
24322: LD_INT 114
24324: PUSH
24325: LD_INT 116
24327: PUSH
24328: LD_INT 117
24330: PUSH
24331: LD_INT 118
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: ST_TO_ADDR
24357: GO 25132
24359: LD_INT 16
24361: DOUBLE
24362: EQUAL
24363: IFTRUE 24367
24365: GO 24503
24367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24368: LD_ADDR_VAR 0 2
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: LD_INT 4
24378: PUSH
24379: LD_INT 5
24381: PUSH
24382: LD_INT 7
24384: PUSH
24385: LD_INT 11
24387: PUSH
24388: LD_INT 12
24390: PUSH
24391: LD_INT 15
24393: PUSH
24394: LD_INT 16
24396: PUSH
24397: LD_INT 20
24399: PUSH
24400: LD_INT 21
24402: PUSH
24403: LD_INT 22
24405: PUSH
24406: LD_INT 23
24408: PUSH
24409: LD_INT 25
24411: PUSH
24412: LD_INT 26
24414: PUSH
24415: LD_INT 30
24417: PUSH
24418: LD_INT 31
24420: PUSH
24421: LD_INT 32
24423: PUSH
24424: LD_INT 33
24426: PUSH
24427: LD_INT 34
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 101
24453: PUSH
24454: LD_INT 102
24456: PUSH
24457: LD_INT 103
24459: PUSH
24460: LD_INT 106
24462: PUSH
24463: LD_INT 108
24465: PUSH
24466: LD_INT 112
24468: PUSH
24469: LD_INT 113
24471: PUSH
24472: LD_INT 114
24474: PUSH
24475: LD_INT 116
24477: PUSH
24478: LD_INT 117
24480: PUSH
24481: LD_INT 118
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: ST_TO_ADDR
24501: GO 25132
24503: LD_INT 17
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24735
24511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24512: LD_ADDR_VAR 0 2
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: LD_INT 3
24525: PUSH
24526: LD_INT 4
24528: PUSH
24529: LD_INT 5
24531: PUSH
24532: LD_INT 6
24534: PUSH
24535: LD_INT 7
24537: PUSH
24538: LD_INT 8
24540: PUSH
24541: LD_INT 9
24543: PUSH
24544: LD_INT 10
24546: PUSH
24547: LD_INT 11
24549: PUSH
24550: LD_INT 12
24552: PUSH
24553: LD_INT 13
24555: PUSH
24556: LD_INT 14
24558: PUSH
24559: LD_INT 15
24561: PUSH
24562: LD_INT 16
24564: PUSH
24565: LD_INT 17
24567: PUSH
24568: LD_INT 18
24570: PUSH
24571: LD_INT 19
24573: PUSH
24574: LD_INT 20
24576: PUSH
24577: LD_INT 21
24579: PUSH
24580: LD_INT 22
24582: PUSH
24583: LD_INT 23
24585: PUSH
24586: LD_INT 24
24588: PUSH
24589: LD_INT 25
24591: PUSH
24592: LD_INT 26
24594: PUSH
24595: LD_INT 27
24597: PUSH
24598: LD_INT 28
24600: PUSH
24601: LD_INT 29
24603: PUSH
24604: LD_INT 30
24606: PUSH
24607: LD_INT 31
24609: PUSH
24610: LD_INT 32
24612: PUSH
24613: LD_INT 33
24615: PUSH
24616: LD_INT 34
24618: PUSH
24619: LD_INT 36
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 101
24661: PUSH
24662: LD_INT 102
24664: PUSH
24665: LD_INT 103
24667: PUSH
24668: LD_INT 104
24670: PUSH
24671: LD_INT 105
24673: PUSH
24674: LD_INT 106
24676: PUSH
24677: LD_INT 107
24679: PUSH
24680: LD_INT 108
24682: PUSH
24683: LD_INT 109
24685: PUSH
24686: LD_INT 110
24688: PUSH
24689: LD_INT 111
24691: PUSH
24692: LD_INT 112
24694: PUSH
24695: LD_INT 113
24697: PUSH
24698: LD_INT 114
24700: PUSH
24701: LD_INT 116
24703: PUSH
24704: LD_INT 117
24706: PUSH
24707: LD_INT 118
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: ST_TO_ADDR
24733: GO 25132
24735: LD_INT 18
24737: DOUBLE
24738: EQUAL
24739: IFTRUE 24743
24741: GO 24891
24743: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24744: LD_ADDR_VAR 0 2
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: LD_INT 4
24754: PUSH
24755: LD_INT 5
24757: PUSH
24758: LD_INT 7
24760: PUSH
24761: LD_INT 11
24763: PUSH
24764: LD_INT 12
24766: PUSH
24767: LD_INT 15
24769: PUSH
24770: LD_INT 16
24772: PUSH
24773: LD_INT 20
24775: PUSH
24776: LD_INT 21
24778: PUSH
24779: LD_INT 22
24781: PUSH
24782: LD_INT 23
24784: PUSH
24785: LD_INT 25
24787: PUSH
24788: LD_INT 26
24790: PUSH
24791: LD_INT 30
24793: PUSH
24794: LD_INT 31
24796: PUSH
24797: LD_INT 32
24799: PUSH
24800: LD_INT 33
24802: PUSH
24803: LD_INT 34
24805: PUSH
24806: LD_INT 35
24808: PUSH
24809: LD_INT 36
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 101
24837: PUSH
24838: LD_INT 102
24840: PUSH
24841: LD_INT 103
24843: PUSH
24844: LD_INT 106
24846: PUSH
24847: LD_INT 108
24849: PUSH
24850: LD_INT 112
24852: PUSH
24853: LD_INT 113
24855: PUSH
24856: LD_INT 114
24858: PUSH
24859: LD_INT 115
24861: PUSH
24862: LD_INT 116
24864: PUSH
24865: LD_INT 117
24867: PUSH
24868: LD_INT 118
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: ST_TO_ADDR
24889: GO 25132
24891: LD_INT 19
24893: DOUBLE
24894: EQUAL
24895: IFTRUE 24899
24897: GO 25131
24899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24900: LD_ADDR_VAR 0 2
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: LD_INT 3
24913: PUSH
24914: LD_INT 4
24916: PUSH
24917: LD_INT 5
24919: PUSH
24920: LD_INT 6
24922: PUSH
24923: LD_INT 7
24925: PUSH
24926: LD_INT 8
24928: PUSH
24929: LD_INT 9
24931: PUSH
24932: LD_INT 10
24934: PUSH
24935: LD_INT 11
24937: PUSH
24938: LD_INT 12
24940: PUSH
24941: LD_INT 13
24943: PUSH
24944: LD_INT 14
24946: PUSH
24947: LD_INT 15
24949: PUSH
24950: LD_INT 16
24952: PUSH
24953: LD_INT 17
24955: PUSH
24956: LD_INT 18
24958: PUSH
24959: LD_INT 19
24961: PUSH
24962: LD_INT 20
24964: PUSH
24965: LD_INT 21
24967: PUSH
24968: LD_INT 22
24970: PUSH
24971: LD_INT 23
24973: PUSH
24974: LD_INT 24
24976: PUSH
24977: LD_INT 25
24979: PUSH
24980: LD_INT 26
24982: PUSH
24983: LD_INT 27
24985: PUSH
24986: LD_INT 28
24988: PUSH
24989: LD_INT 29
24991: PUSH
24992: LD_INT 30
24994: PUSH
24995: LD_INT 31
24997: PUSH
24998: LD_INT 32
25000: PUSH
25001: LD_INT 33
25003: PUSH
25004: LD_INT 34
25006: PUSH
25007: LD_INT 35
25009: PUSH
25010: LD_INT 36
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 101
25053: PUSH
25054: LD_INT 102
25056: PUSH
25057: LD_INT 103
25059: PUSH
25060: LD_INT 104
25062: PUSH
25063: LD_INT 105
25065: PUSH
25066: LD_INT 106
25068: PUSH
25069: LD_INT 107
25071: PUSH
25072: LD_INT 108
25074: PUSH
25075: LD_INT 109
25077: PUSH
25078: LD_INT 110
25080: PUSH
25081: LD_INT 111
25083: PUSH
25084: LD_INT 112
25086: PUSH
25087: LD_INT 113
25089: PUSH
25090: LD_INT 114
25092: PUSH
25093: LD_INT 115
25095: PUSH
25096: LD_INT 116
25098: PUSH
25099: LD_INT 117
25101: PUSH
25102: LD_INT 118
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: ST_TO_ADDR
25129: GO 25132
25131: POP
// end else
25132: GO 25363
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25134: LD_ADDR_VAR 0 2
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 3
25147: PUSH
25148: LD_INT 4
25150: PUSH
25151: LD_INT 5
25153: PUSH
25154: LD_INT 6
25156: PUSH
25157: LD_INT 7
25159: PUSH
25160: LD_INT 8
25162: PUSH
25163: LD_INT 9
25165: PUSH
25166: LD_INT 10
25168: PUSH
25169: LD_INT 11
25171: PUSH
25172: LD_INT 12
25174: PUSH
25175: LD_INT 13
25177: PUSH
25178: LD_INT 14
25180: PUSH
25181: LD_INT 15
25183: PUSH
25184: LD_INT 16
25186: PUSH
25187: LD_INT 17
25189: PUSH
25190: LD_INT 18
25192: PUSH
25193: LD_INT 19
25195: PUSH
25196: LD_INT 20
25198: PUSH
25199: LD_INT 21
25201: PUSH
25202: LD_INT 22
25204: PUSH
25205: LD_INT 23
25207: PUSH
25208: LD_INT 24
25210: PUSH
25211: LD_INT 25
25213: PUSH
25214: LD_INT 26
25216: PUSH
25217: LD_INT 27
25219: PUSH
25220: LD_INT 28
25222: PUSH
25223: LD_INT 29
25225: PUSH
25226: LD_INT 30
25228: PUSH
25229: LD_INT 31
25231: PUSH
25232: LD_INT 32
25234: PUSH
25235: LD_INT 33
25237: PUSH
25238: LD_INT 34
25240: PUSH
25241: LD_INT 35
25243: PUSH
25244: LD_INT 36
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 101
25287: PUSH
25288: LD_INT 102
25290: PUSH
25291: LD_INT 103
25293: PUSH
25294: LD_INT 104
25296: PUSH
25297: LD_INT 105
25299: PUSH
25300: LD_INT 106
25302: PUSH
25303: LD_INT 107
25305: PUSH
25306: LD_INT 108
25308: PUSH
25309: LD_INT 109
25311: PUSH
25312: LD_INT 110
25314: PUSH
25315: LD_INT 111
25317: PUSH
25318: LD_INT 112
25320: PUSH
25321: LD_INT 113
25323: PUSH
25324: LD_INT 114
25326: PUSH
25327: LD_INT 115
25329: PUSH
25330: LD_INT 116
25332: PUSH
25333: LD_INT 117
25335: PUSH
25336: LD_INT 118
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: ST_TO_ADDR
// if result then
25363: LD_VAR 0 2
25367: IFFALSE 26153
// begin normal :=  ;
25369: LD_ADDR_VAR 0 5
25373: PUSH
25374: LD_STRING 
25376: ST_TO_ADDR
// hardcore :=  ;
25377: LD_ADDR_VAR 0 6
25381: PUSH
25382: LD_STRING 
25384: ST_TO_ADDR
// active :=  ;
25385: LD_ADDR_VAR 0 7
25389: PUSH
25390: LD_STRING 
25392: ST_TO_ADDR
// for i = 1 to normalCounter do
25393: LD_ADDR_VAR 0 8
25397: PUSH
25398: DOUBLE
25399: LD_INT 1
25401: DEC
25402: ST_TO_ADDR
25403: LD_EXP 53
25407: PUSH
25408: FOR_TO
25409: IFFALSE 25510
// begin tmp := 0 ;
25411: LD_ADDR_VAR 0 3
25415: PUSH
25416: LD_STRING 0
25418: ST_TO_ADDR
// if result [ 1 ] then
25419: LD_VAR 0 2
25423: PUSH
25424: LD_INT 1
25426: ARRAY
25427: IFFALSE 25492
// if result [ 1 ] [ 1 ] = i then
25429: LD_VAR 0 2
25433: PUSH
25434: LD_INT 1
25436: ARRAY
25437: PUSH
25438: LD_INT 1
25440: ARRAY
25441: PUSH
25442: LD_VAR 0 8
25446: EQUAL
25447: IFFALSE 25492
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25449: LD_ADDR_VAR 0 2
25453: PUSH
25454: LD_VAR 0 2
25458: PPUSH
25459: LD_INT 1
25461: PPUSH
25462: LD_VAR 0 2
25466: PUSH
25467: LD_INT 1
25469: ARRAY
25470: PPUSH
25471: LD_INT 1
25473: PPUSH
25474: CALL_OW 3
25478: PPUSH
25479: CALL_OW 1
25483: ST_TO_ADDR
// tmp := 1 ;
25484: LD_ADDR_VAR 0 3
25488: PUSH
25489: LD_STRING 1
25491: ST_TO_ADDR
// end ; normal := normal & tmp ;
25492: LD_ADDR_VAR 0 5
25496: PUSH
25497: LD_VAR 0 5
25501: PUSH
25502: LD_VAR 0 3
25506: STR
25507: ST_TO_ADDR
// end ;
25508: GO 25408
25510: POP
25511: POP
// for i = 1 to hardcoreCounter do
25512: LD_ADDR_VAR 0 8
25516: PUSH
25517: DOUBLE
25518: LD_INT 1
25520: DEC
25521: ST_TO_ADDR
25522: LD_EXP 54
25526: PUSH
25527: FOR_TO
25528: IFFALSE 25633
// begin tmp := 0 ;
25530: LD_ADDR_VAR 0 3
25534: PUSH
25535: LD_STRING 0
25537: ST_TO_ADDR
// if result [ 2 ] then
25538: LD_VAR 0 2
25542: PUSH
25543: LD_INT 2
25545: ARRAY
25546: IFFALSE 25615
// if result [ 2 ] [ 1 ] = 100 + i then
25548: LD_VAR 0 2
25552: PUSH
25553: LD_INT 2
25555: ARRAY
25556: PUSH
25557: LD_INT 1
25559: ARRAY
25560: PUSH
25561: LD_INT 100
25563: PUSH
25564: LD_VAR 0 8
25568: PLUS
25569: EQUAL
25570: IFFALSE 25615
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25572: LD_ADDR_VAR 0 2
25576: PUSH
25577: LD_VAR 0 2
25581: PPUSH
25582: LD_INT 2
25584: PPUSH
25585: LD_VAR 0 2
25589: PUSH
25590: LD_INT 2
25592: ARRAY
25593: PPUSH
25594: LD_INT 1
25596: PPUSH
25597: CALL_OW 3
25601: PPUSH
25602: CALL_OW 1
25606: ST_TO_ADDR
// tmp := 1 ;
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: LD_STRING 1
25614: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25615: LD_ADDR_VAR 0 6
25619: PUSH
25620: LD_VAR 0 6
25624: PUSH
25625: LD_VAR 0 3
25629: STR
25630: ST_TO_ADDR
// end ;
25631: GO 25527
25633: POP
25634: POP
// if isGameLoad then
25635: LD_VAR 0 1
25639: IFFALSE 26114
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25641: LD_ADDR_VAR 0 4
25645: PUSH
25646: LD_EXP 57
25650: PUSH
25651: LD_EXP 56
25655: PUSH
25656: LD_EXP 58
25660: PUSH
25661: LD_EXP 55
25665: PUSH
25666: LD_EXP 59
25670: PUSH
25671: LD_EXP 60
25675: PUSH
25676: LD_EXP 61
25680: PUSH
25681: LD_EXP 62
25685: PUSH
25686: LD_EXP 63
25690: PUSH
25691: LD_EXP 64
25695: PUSH
25696: LD_EXP 65
25700: PUSH
25701: LD_EXP 66
25705: PUSH
25706: LD_EXP 67
25710: PUSH
25711: LD_EXP 68
25715: PUSH
25716: LD_EXP 76
25720: PUSH
25721: LD_EXP 77
25725: PUSH
25726: LD_EXP 78
25730: PUSH
25731: LD_EXP 79
25735: PUSH
25736: LD_EXP 81
25740: PUSH
25741: LD_EXP 82
25745: PUSH
25746: LD_EXP 83
25750: PUSH
25751: LD_EXP 86
25755: PUSH
25756: LD_EXP 88
25760: PUSH
25761: LD_EXP 89
25765: PUSH
25766: LD_EXP 90
25770: PUSH
25771: LD_EXP 92
25775: PUSH
25776: LD_EXP 93
25780: PUSH
25781: LD_EXP 96
25785: PUSH
25786: LD_EXP 97
25790: PUSH
25791: LD_EXP 98
25795: PUSH
25796: LD_EXP 99
25800: PUSH
25801: LD_EXP 100
25805: PUSH
25806: LD_EXP 101
25810: PUSH
25811: LD_EXP 102
25815: PUSH
25816: LD_EXP 103
25820: PUSH
25821: LD_EXP 104
25825: PUSH
25826: LD_EXP 69
25830: PUSH
25831: LD_EXP 70
25835: PUSH
25836: LD_EXP 73
25840: PUSH
25841: LD_EXP 74
25845: PUSH
25846: LD_EXP 75
25850: PUSH
25851: LD_EXP 71
25855: PUSH
25856: LD_EXP 72
25860: PUSH
25861: LD_EXP 80
25865: PUSH
25866: LD_EXP 84
25870: PUSH
25871: LD_EXP 85
25875: PUSH
25876: LD_EXP 87
25880: PUSH
25881: LD_EXP 91
25885: PUSH
25886: LD_EXP 94
25890: PUSH
25891: LD_EXP 95
25895: PUSH
25896: LD_EXP 105
25900: PUSH
25901: LD_EXP 106
25905: PUSH
25906: LD_EXP 107
25910: PUSH
25911: LD_EXP 108
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: ST_TO_ADDR
// tmp :=  ;
25972: LD_ADDR_VAR 0 3
25976: PUSH
25977: LD_STRING 
25979: ST_TO_ADDR
// for i = 1 to normalCounter do
25980: LD_ADDR_VAR 0 8
25984: PUSH
25985: DOUBLE
25986: LD_INT 1
25988: DEC
25989: ST_TO_ADDR
25990: LD_EXP 53
25994: PUSH
25995: FOR_TO
25996: IFFALSE 26032
// begin if flags [ i ] then
25998: LD_VAR 0 4
26002: PUSH
26003: LD_VAR 0 8
26007: ARRAY
26008: IFFALSE 26030
// tmp := tmp & i & ; ;
26010: LD_ADDR_VAR 0 3
26014: PUSH
26015: LD_VAR 0 3
26019: PUSH
26020: LD_VAR 0 8
26024: STR
26025: PUSH
26026: LD_STRING ;
26028: STR
26029: ST_TO_ADDR
// end ;
26030: GO 25995
26032: POP
26033: POP
// for i = 1 to hardcoreCounter do
26034: LD_ADDR_VAR 0 8
26038: PUSH
26039: DOUBLE
26040: LD_INT 1
26042: DEC
26043: ST_TO_ADDR
26044: LD_EXP 54
26048: PUSH
26049: FOR_TO
26050: IFFALSE 26096
// begin if flags [ normalCounter + i ] then
26052: LD_VAR 0 4
26056: PUSH
26057: LD_EXP 53
26061: PUSH
26062: LD_VAR 0 8
26066: PLUS
26067: ARRAY
26068: IFFALSE 26094
// tmp := tmp & ( 100 + i ) & ; ;
26070: LD_ADDR_VAR 0 3
26074: PUSH
26075: LD_VAR 0 3
26079: PUSH
26080: LD_INT 100
26082: PUSH
26083: LD_VAR 0 8
26087: PLUS
26088: STR
26089: PUSH
26090: LD_STRING ;
26092: STR
26093: ST_TO_ADDR
// end ;
26094: GO 26049
26096: POP
26097: POP
// if tmp then
26098: LD_VAR 0 3
26102: IFFALSE 26114
// active := tmp ;
26104: LD_ADDR_VAR 0 7
26108: PUSH
26109: LD_VAR 0 3
26113: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26114: LD_STRING getStreamItemsFromMission("
26116: PUSH
26117: LD_VAR 0 5
26121: STR
26122: PUSH
26123: LD_STRING ","
26125: STR
26126: PUSH
26127: LD_VAR 0 6
26131: STR
26132: PUSH
26133: LD_STRING ","
26135: STR
26136: PUSH
26137: LD_VAR 0 7
26141: STR
26142: PUSH
26143: LD_STRING ")
26145: STR
26146: PPUSH
26147: CALL_OW 559
// end else
26151: GO 26160
// ToLua ( getStreamItemsFromMission("","","") ) ;
26153: LD_STRING getStreamItemsFromMission("","","")
26155: PPUSH
26156: CALL_OW 559
// end ;
26160: LD_VAR 0 2
26164: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26165: LD_EXP 52
26169: PUSH
26170: LD_EXP 57
26174: AND
26175: IFFALSE 26299
26177: GO 26179
26179: DISABLE
26180: LD_INT 0
26182: PPUSH
26183: PPUSH
// begin enable ;
26184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26185: LD_ADDR_VAR 0 2
26189: PUSH
26190: LD_INT 22
26192: PUSH
26193: LD_OWVAR 2
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 2
26204: PUSH
26205: LD_INT 34
26207: PUSH
26208: LD_INT 7
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 34
26217: PUSH
26218: LD_INT 45
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 34
26227: PUSH
26228: LD_INT 28
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 34
26237: PUSH
26238: LD_INT 47
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PPUSH
26256: CALL_OW 69
26260: ST_TO_ADDR
// if not tmp then
26261: LD_VAR 0 2
26265: NOT
26266: IFFALSE 26270
// exit ;
26268: GO 26299
// for i in tmp do
26270: LD_ADDR_VAR 0 1
26274: PUSH
26275: LD_VAR 0 2
26279: PUSH
26280: FOR_IN
26281: IFFALSE 26297
// begin SetLives ( i , 0 ) ;
26283: LD_VAR 0 1
26287: PPUSH
26288: LD_INT 0
26290: PPUSH
26291: CALL_OW 234
// end ;
26295: GO 26280
26297: POP
26298: POP
// end ;
26299: PPOPN 2
26301: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26302: LD_EXP 52
26306: PUSH
26307: LD_EXP 58
26311: AND
26312: IFFALSE 26396
26314: GO 26316
26316: DISABLE
26317: LD_INT 0
26319: PPUSH
26320: PPUSH
// begin enable ;
26321: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26322: LD_ADDR_VAR 0 2
26326: PUSH
26327: LD_INT 22
26329: PUSH
26330: LD_OWVAR 2
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 32
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PPUSH
26353: CALL_OW 69
26357: ST_TO_ADDR
// if not tmp then
26358: LD_VAR 0 2
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 26396
// for i in tmp do
26367: LD_ADDR_VAR 0 1
26371: PUSH
26372: LD_VAR 0 2
26376: PUSH
26377: FOR_IN
26378: IFFALSE 26394
// begin SetLives ( i , 0 ) ;
26380: LD_VAR 0 1
26384: PPUSH
26385: LD_INT 0
26387: PPUSH
26388: CALL_OW 234
// end ;
26392: GO 26377
26394: POP
26395: POP
// end ;
26396: PPOPN 2
26398: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26399: LD_EXP 52
26403: PUSH
26404: LD_EXP 55
26408: AND
26409: IFFALSE 26502
26411: GO 26413
26413: DISABLE
26414: LD_INT 0
26416: PPUSH
// begin enable ;
26417: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26418: LD_ADDR_VAR 0 1
26422: PUSH
26423: LD_INT 22
26425: PUSH
26426: LD_OWVAR 2
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: LD_INT 25
26440: PUSH
26441: LD_INT 5
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 25
26450: PUSH
26451: LD_INT 9
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 25
26460: PUSH
26461: LD_INT 8
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PPUSH
26478: CALL_OW 69
26482: PUSH
26483: FOR_IN
26484: IFFALSE 26500
// begin SetClass ( i , 1 ) ;
26486: LD_VAR 0 1
26490: PPUSH
26491: LD_INT 1
26493: PPUSH
26494: CALL_OW 336
// end ;
26498: GO 26483
26500: POP
26501: POP
// end ;
26502: PPOPN 1
26504: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26505: LD_EXP 52
26509: PUSH
26510: LD_EXP 56
26514: AND
26515: PUSH
26516: LD_OWVAR 65
26520: PUSH
26521: LD_INT 7
26523: LESS
26524: AND
26525: IFFALSE 26539
26527: GO 26529
26529: DISABLE
// begin enable ;
26530: ENABLE
// game_speed := 7 ;
26531: LD_ADDR_OWVAR 65
26535: PUSH
26536: LD_INT 7
26538: ST_TO_ADDR
// end ;
26539: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26540: LD_EXP 52
26544: PUSH
26545: LD_EXP 59
26549: AND
26550: IFFALSE 26752
26552: GO 26554
26554: DISABLE
26555: LD_INT 0
26557: PPUSH
26558: PPUSH
26559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26560: LD_ADDR_VAR 0 3
26564: PUSH
26565: LD_INT 81
26567: PUSH
26568: LD_OWVAR 2
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 21
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PPUSH
26591: CALL_OW 69
26595: ST_TO_ADDR
// if not tmp then
26596: LD_VAR 0 3
26600: NOT
26601: IFFALSE 26605
// exit ;
26603: GO 26752
// if tmp > 5 then
26605: LD_VAR 0 3
26609: PUSH
26610: LD_INT 5
26612: GREATER
26613: IFFALSE 26625
// k := 5 else
26615: LD_ADDR_VAR 0 2
26619: PUSH
26620: LD_INT 5
26622: ST_TO_ADDR
26623: GO 26635
// k := tmp ;
26625: LD_ADDR_VAR 0 2
26629: PUSH
26630: LD_VAR 0 3
26634: ST_TO_ADDR
// for i := 1 to k do
26635: LD_ADDR_VAR 0 1
26639: PUSH
26640: DOUBLE
26641: LD_INT 1
26643: DEC
26644: ST_TO_ADDR
26645: LD_VAR 0 2
26649: PUSH
26650: FOR_TO
26651: IFFALSE 26750
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26653: LD_VAR 0 3
26657: PUSH
26658: LD_VAR 0 1
26662: ARRAY
26663: PPUSH
26664: LD_VAR 0 1
26668: PUSH
26669: LD_INT 4
26671: MOD
26672: PUSH
26673: LD_INT 1
26675: PLUS
26676: PPUSH
26677: CALL_OW 259
26681: PUSH
26682: LD_INT 10
26684: LESS
26685: IFFALSE 26748
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26687: LD_VAR 0 3
26691: PUSH
26692: LD_VAR 0 1
26696: ARRAY
26697: PPUSH
26698: LD_VAR 0 1
26702: PUSH
26703: LD_INT 4
26705: MOD
26706: PUSH
26707: LD_INT 1
26709: PLUS
26710: PPUSH
26711: LD_VAR 0 3
26715: PUSH
26716: LD_VAR 0 1
26720: ARRAY
26721: PPUSH
26722: LD_VAR 0 1
26726: PUSH
26727: LD_INT 4
26729: MOD
26730: PUSH
26731: LD_INT 1
26733: PLUS
26734: PPUSH
26735: CALL_OW 259
26739: PUSH
26740: LD_INT 1
26742: PLUS
26743: PPUSH
26744: CALL_OW 237
26748: GO 26650
26750: POP
26751: POP
// end ;
26752: PPOPN 3
26754: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26755: LD_EXP 52
26759: PUSH
26760: LD_EXP 60
26764: AND
26765: IFFALSE 26785
26767: GO 26769
26769: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26770: LD_INT 4
26772: PPUSH
26773: LD_OWVAR 2
26777: PPUSH
26778: LD_INT 0
26780: PPUSH
26781: CALL_OW 324
26785: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26786: LD_EXP 52
26790: PUSH
26791: LD_EXP 89
26795: AND
26796: IFFALSE 26816
26798: GO 26800
26800: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26801: LD_INT 19
26803: PPUSH
26804: LD_OWVAR 2
26808: PPUSH
26809: LD_INT 0
26811: PPUSH
26812: CALL_OW 324
26816: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26817: LD_EXP 52
26821: PUSH
26822: LD_EXP 61
26826: AND
26827: IFFALSE 26929
26829: GO 26831
26831: DISABLE
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
// begin enable ;
26836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26837: LD_ADDR_VAR 0 2
26841: PUSH
26842: LD_INT 22
26844: PUSH
26845: LD_OWVAR 2
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 2
26856: PUSH
26857: LD_INT 34
26859: PUSH
26860: LD_INT 11
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 34
26869: PUSH
26870: LD_INT 30
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PPUSH
26886: CALL_OW 69
26890: ST_TO_ADDR
// if not tmp then
26891: LD_VAR 0 2
26895: NOT
26896: IFFALSE 26900
// exit ;
26898: GO 26929
// for i in tmp do
26900: LD_ADDR_VAR 0 1
26904: PUSH
26905: LD_VAR 0 2
26909: PUSH
26910: FOR_IN
26911: IFFALSE 26927
// begin SetLives ( i , 0 ) ;
26913: LD_VAR 0 1
26917: PPUSH
26918: LD_INT 0
26920: PPUSH
26921: CALL_OW 234
// end ;
26925: GO 26910
26927: POP
26928: POP
// end ;
26929: PPOPN 2
26931: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26932: LD_EXP 52
26936: PUSH
26937: LD_EXP 62
26941: AND
26942: IFFALSE 26962
26944: GO 26946
26946: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26947: LD_INT 32
26949: PPUSH
26950: LD_OWVAR 2
26954: PPUSH
26955: LD_INT 0
26957: PPUSH
26958: CALL_OW 324
26962: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26963: LD_EXP 52
26967: PUSH
26968: LD_EXP 63
26972: AND
26973: IFFALSE 27154
26975: GO 26977
26977: DISABLE
26978: LD_INT 0
26980: PPUSH
26981: PPUSH
26982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26983: LD_ADDR_VAR 0 2
26987: PUSH
26988: LD_INT 22
26990: PUSH
26991: LD_OWVAR 2
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 33
27002: PUSH
27003: LD_INT 3
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PPUSH
27014: CALL_OW 69
27018: ST_TO_ADDR
// if not tmp then
27019: LD_VAR 0 2
27023: NOT
27024: IFFALSE 27028
// exit ;
27026: GO 27154
// side := 0 ;
27028: LD_ADDR_VAR 0 3
27032: PUSH
27033: LD_INT 0
27035: ST_TO_ADDR
// for i := 1 to 8 do
27036: LD_ADDR_VAR 0 1
27040: PUSH
27041: DOUBLE
27042: LD_INT 1
27044: DEC
27045: ST_TO_ADDR
27046: LD_INT 8
27048: PUSH
27049: FOR_TO
27050: IFFALSE 27098
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27052: LD_OWVAR 2
27056: PUSH
27057: LD_VAR 0 1
27061: NONEQUAL
27062: PUSH
27063: LD_OWVAR 2
27067: PPUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 81
27077: PUSH
27078: LD_INT 2
27080: EQUAL
27081: AND
27082: IFFALSE 27096
// begin side := i ;
27084: LD_ADDR_VAR 0 3
27088: PUSH
27089: LD_VAR 0 1
27093: ST_TO_ADDR
// break ;
27094: GO 27098
// end ;
27096: GO 27049
27098: POP
27099: POP
// if not side then
27100: LD_VAR 0 3
27104: NOT
27105: IFFALSE 27109
// exit ;
27107: GO 27154
// for i := 1 to tmp do
27109: LD_ADDR_VAR 0 1
27113: PUSH
27114: DOUBLE
27115: LD_INT 1
27117: DEC
27118: ST_TO_ADDR
27119: LD_VAR 0 2
27123: PUSH
27124: FOR_TO
27125: IFFALSE 27152
// if Prob ( 60 ) then
27127: LD_INT 60
27129: PPUSH
27130: CALL_OW 13
27134: IFFALSE 27150
// SetSide ( i , side ) ;
27136: LD_VAR 0 1
27140: PPUSH
27141: LD_VAR 0 3
27145: PPUSH
27146: CALL_OW 235
27150: GO 27124
27152: POP
27153: POP
// end ;
27154: PPOPN 3
27156: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27157: LD_EXP 52
27161: PUSH
27162: LD_EXP 65
27166: AND
27167: IFFALSE 27286
27169: GO 27171
27171: DISABLE
27172: LD_INT 0
27174: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27175: LD_ADDR_VAR 0 1
27179: PUSH
27180: LD_INT 22
27182: PUSH
27183: LD_OWVAR 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 21
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 3
27204: PUSH
27205: LD_INT 23
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: LIST
27223: PPUSH
27224: CALL_OW 69
27228: PUSH
27229: FOR_IN
27230: IFFALSE 27284
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27232: LD_VAR 0 1
27236: PPUSH
27237: CALL_OW 257
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 3
27250: PUSH
27251: LD_INT 4
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: IN
27260: IFFALSE 27282
// SetClass ( un , rand ( 1 , 4 ) ) ;
27262: LD_VAR 0 1
27266: PPUSH
27267: LD_INT 1
27269: PPUSH
27270: LD_INT 4
27272: PPUSH
27273: CALL_OW 12
27277: PPUSH
27278: CALL_OW 336
27282: GO 27229
27284: POP
27285: POP
// end ;
27286: PPOPN 1
27288: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27289: LD_EXP 52
27293: PUSH
27294: LD_EXP 64
27298: AND
27299: IFFALSE 27378
27301: GO 27303
27303: DISABLE
27304: LD_INT 0
27306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27307: LD_ADDR_VAR 0 1
27311: PUSH
27312: LD_INT 22
27314: PUSH
27315: LD_OWVAR 2
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 21
27326: PUSH
27327: LD_INT 3
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: ST_TO_ADDR
// if not tmp then
27343: LD_VAR 0 1
27347: NOT
27348: IFFALSE 27352
// exit ;
27350: GO 27378
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27352: LD_VAR 0 1
27356: PUSH
27357: LD_INT 1
27359: PPUSH
27360: LD_VAR 0 1
27364: PPUSH
27365: CALL_OW 12
27369: ARRAY
27370: PPUSH
27371: LD_INT 100
27373: PPUSH
27374: CALL_OW 234
// end ;
27378: PPOPN 1
27380: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27381: LD_EXP 52
27385: PUSH
27386: LD_EXP 66
27390: AND
27391: IFFALSE 27489
27393: GO 27395
27395: DISABLE
27396: LD_INT 0
27398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27399: LD_ADDR_VAR 0 1
27403: PUSH
27404: LD_INT 22
27406: PUSH
27407: LD_OWVAR 2
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 21
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PPUSH
27430: CALL_OW 69
27434: ST_TO_ADDR
// if not tmp then
27435: LD_VAR 0 1
27439: NOT
27440: IFFALSE 27444
// exit ;
27442: GO 27489
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27444: LD_VAR 0 1
27448: PUSH
27449: LD_INT 1
27451: PPUSH
27452: LD_VAR 0 1
27456: PPUSH
27457: CALL_OW 12
27461: ARRAY
27462: PPUSH
27463: LD_INT 1
27465: PPUSH
27466: LD_INT 4
27468: PPUSH
27469: CALL_OW 12
27473: PPUSH
27474: LD_INT 3000
27476: PPUSH
27477: LD_INT 9000
27479: PPUSH
27480: CALL_OW 12
27484: PPUSH
27485: CALL_OW 492
// end ;
27489: PPOPN 1
27491: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27492: LD_EXP 52
27496: PUSH
27497: LD_EXP 67
27501: AND
27502: IFFALSE 27522
27504: GO 27506
27506: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27507: LD_INT 1
27509: PPUSH
27510: LD_OWVAR 2
27514: PPUSH
27515: LD_INT 0
27517: PPUSH
27518: CALL_OW 324
27522: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27523: LD_EXP 52
27527: PUSH
27528: LD_EXP 68
27532: AND
27533: IFFALSE 27616
27535: GO 27537
27537: DISABLE
27538: LD_INT 0
27540: PPUSH
27541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27542: LD_ADDR_VAR 0 2
27546: PUSH
27547: LD_INT 22
27549: PUSH
27550: LD_OWVAR 2
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 21
27561: PUSH
27562: LD_INT 3
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PPUSH
27573: CALL_OW 69
27577: ST_TO_ADDR
// if not tmp then
27578: LD_VAR 0 2
27582: NOT
27583: IFFALSE 27587
// exit ;
27585: GO 27616
// for i in tmp do
27587: LD_ADDR_VAR 0 1
27591: PUSH
27592: LD_VAR 0 2
27596: PUSH
27597: FOR_IN
27598: IFFALSE 27614
// SetBLevel ( i , 10 ) ;
27600: LD_VAR 0 1
27604: PPUSH
27605: LD_INT 10
27607: PPUSH
27608: CALL_OW 241
27612: GO 27597
27614: POP
27615: POP
// end ;
27616: PPOPN 2
27618: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27619: LD_EXP 52
27623: PUSH
27624: LD_EXP 69
27628: AND
27629: IFFALSE 27740
27631: GO 27633
27633: DISABLE
27634: LD_INT 0
27636: PPUSH
27637: PPUSH
27638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27639: LD_ADDR_VAR 0 3
27643: PUSH
27644: LD_INT 22
27646: PUSH
27647: LD_OWVAR 2
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 25
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PPUSH
27670: CALL_OW 69
27674: ST_TO_ADDR
// if not tmp then
27675: LD_VAR 0 3
27679: NOT
27680: IFFALSE 27684
// exit ;
27682: GO 27740
// un := tmp [ rand ( 1 , tmp ) ] ;
27684: LD_ADDR_VAR 0 2
27688: PUSH
27689: LD_VAR 0 3
27693: PUSH
27694: LD_INT 1
27696: PPUSH
27697: LD_VAR 0 3
27701: PPUSH
27702: CALL_OW 12
27706: ARRAY
27707: ST_TO_ADDR
// if Crawls ( un ) then
27708: LD_VAR 0 2
27712: PPUSH
27713: CALL_OW 318
27717: IFFALSE 27728
// ComWalk ( un ) ;
27719: LD_VAR 0 2
27723: PPUSH
27724: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27728: LD_VAR 0 2
27732: PPUSH
27733: LD_INT 5
27735: PPUSH
27736: CALL_OW 336
// end ;
27740: PPOPN 3
27742: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27743: LD_EXP 52
27747: PUSH
27748: LD_EXP 70
27752: AND
27753: PUSH
27754: LD_OWVAR 67
27758: PUSH
27759: LD_INT 4
27761: LESS
27762: AND
27763: IFFALSE 27782
27765: GO 27767
27767: DISABLE
// begin Difficulty := Difficulty + 1 ;
27768: LD_ADDR_OWVAR 67
27772: PUSH
27773: LD_OWVAR 67
27777: PUSH
27778: LD_INT 1
27780: PLUS
27781: ST_TO_ADDR
// end ;
27782: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27783: LD_EXP 52
27787: PUSH
27788: LD_EXP 71
27792: AND
27793: IFFALSE 27896
27795: GO 27797
27797: DISABLE
27798: LD_INT 0
27800: PPUSH
// begin for i := 1 to 5 do
27801: LD_ADDR_VAR 0 1
27805: PUSH
27806: DOUBLE
27807: LD_INT 1
27809: DEC
27810: ST_TO_ADDR
27811: LD_INT 5
27813: PUSH
27814: FOR_TO
27815: IFFALSE 27894
// begin uc_nation := nation_nature ;
27817: LD_ADDR_OWVAR 21
27821: PUSH
27822: LD_INT 0
27824: ST_TO_ADDR
// uc_side := 0 ;
27825: LD_ADDR_OWVAR 20
27829: PUSH
27830: LD_INT 0
27832: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27833: LD_ADDR_OWVAR 29
27837: PUSH
27838: LD_INT 12
27840: PUSH
27841: LD_INT 12
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: ST_TO_ADDR
// hc_agressivity := 20 ;
27848: LD_ADDR_OWVAR 35
27852: PUSH
27853: LD_INT 20
27855: ST_TO_ADDR
// hc_class := class_tiger ;
27856: LD_ADDR_OWVAR 28
27860: PUSH
27861: LD_INT 14
27863: ST_TO_ADDR
// hc_gallery :=  ;
27864: LD_ADDR_OWVAR 33
27868: PUSH
27869: LD_STRING 
27871: ST_TO_ADDR
// hc_name :=  ;
27872: LD_ADDR_OWVAR 26
27876: PUSH
27877: LD_STRING 
27879: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27880: CALL_OW 44
27884: PPUSH
27885: LD_INT 0
27887: PPUSH
27888: CALL_OW 51
// end ;
27892: GO 27814
27894: POP
27895: POP
// end ;
27896: PPOPN 1
27898: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27899: LD_EXP 52
27903: PUSH
27904: LD_EXP 72
27908: AND
27909: IFFALSE 27918
27911: GO 27913
27913: DISABLE
// StreamSibBomb ;
27914: CALL 27919 0 0
27918: END
// export function StreamSibBomb ; var i , x , y ; begin
27919: LD_INT 0
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
// result := false ;
27925: LD_ADDR_VAR 0 1
27929: PUSH
27930: LD_INT 0
27932: ST_TO_ADDR
// for i := 1 to 16 do
27933: LD_ADDR_VAR 0 2
27937: PUSH
27938: DOUBLE
27939: LD_INT 1
27941: DEC
27942: ST_TO_ADDR
27943: LD_INT 16
27945: PUSH
27946: FOR_TO
27947: IFFALSE 28146
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27949: LD_ADDR_VAR 0 3
27953: PUSH
27954: LD_INT 10
27956: PUSH
27957: LD_INT 20
27959: PUSH
27960: LD_INT 30
27962: PUSH
27963: LD_INT 40
27965: PUSH
27966: LD_INT 50
27968: PUSH
27969: LD_INT 60
27971: PUSH
27972: LD_INT 70
27974: PUSH
27975: LD_INT 80
27977: PUSH
27978: LD_INT 90
27980: PUSH
27981: LD_INT 100
27983: PUSH
27984: LD_INT 110
27986: PUSH
27987: LD_INT 120
27989: PUSH
27990: LD_INT 130
27992: PUSH
27993: LD_INT 140
27995: PUSH
27996: LD_INT 150
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: PPUSH
28019: LD_INT 15
28021: PPUSH
28022: CALL_OW 12
28026: ARRAY
28027: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28028: LD_ADDR_VAR 0 4
28032: PUSH
28033: LD_INT 10
28035: PUSH
28036: LD_INT 20
28038: PUSH
28039: LD_INT 30
28041: PUSH
28042: LD_INT 40
28044: PUSH
28045: LD_INT 50
28047: PUSH
28048: LD_INT 60
28050: PUSH
28051: LD_INT 70
28053: PUSH
28054: LD_INT 80
28056: PUSH
28057: LD_INT 90
28059: PUSH
28060: LD_INT 100
28062: PUSH
28063: LD_INT 110
28065: PUSH
28066: LD_INT 120
28068: PUSH
28069: LD_INT 130
28071: PUSH
28072: LD_INT 140
28074: PUSH
28075: LD_INT 150
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: PPUSH
28098: LD_INT 15
28100: PPUSH
28101: CALL_OW 12
28105: ARRAY
28106: ST_TO_ADDR
// if ValidHex ( x , y ) then
28107: LD_VAR 0 3
28111: PPUSH
28112: LD_VAR 0 4
28116: PPUSH
28117: CALL_OW 488
28121: IFFALSE 28144
// begin result := [ x , y ] ;
28123: LD_ADDR_VAR 0 1
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_VAR 0 4
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: ST_TO_ADDR
// break ;
28142: GO 28146
// end ; end ;
28144: GO 27946
28146: POP
28147: POP
// if result then
28148: LD_VAR 0 1
28152: IFFALSE 28212
// begin ToLua ( playSibBomb() ) ;
28154: LD_STRING playSibBomb()
28156: PPUSH
28157: CALL_OW 559
// wait ( 0 0$14 ) ;
28161: LD_INT 490
28163: PPUSH
28164: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28168: LD_VAR 0 1
28172: PUSH
28173: LD_INT 1
28175: ARRAY
28176: PPUSH
28177: LD_VAR 0 1
28181: PUSH
28182: LD_INT 2
28184: ARRAY
28185: PPUSH
28186: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28190: LD_VAR 0 1
28194: PUSH
28195: LD_INT 1
28197: ARRAY
28198: PPUSH
28199: LD_VAR 0 1
28203: PUSH
28204: LD_INT 2
28206: ARRAY
28207: PPUSH
28208: CALL_OW 429
// end ; end ;
28212: LD_VAR 0 1
28216: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28217: LD_EXP 52
28221: PUSH
28222: LD_EXP 74
28226: AND
28227: IFFALSE 28239
28229: GO 28231
28231: DISABLE
// YouLost (  ) ;
28232: LD_STRING 
28234: PPUSH
28235: CALL_OW 104
28239: END
// every 0 0$1 trigger StreamModeActive and sFog do
28240: LD_EXP 52
28244: PUSH
28245: LD_EXP 73
28249: AND
28250: IFFALSE 28264
28252: GO 28254
28254: DISABLE
// FogOff ( your_side ) ;
28255: LD_OWVAR 2
28259: PPUSH
28260: CALL_OW 344
28264: END
// every 0 0$1 trigger StreamModeActive and sSun do
28265: LD_EXP 52
28269: PUSH
28270: LD_EXP 75
28274: AND
28275: IFFALSE 28303
28277: GO 28279
28279: DISABLE
// begin solar_recharge_percent := 0 ;
28280: LD_ADDR_OWVAR 79
28284: PUSH
28285: LD_INT 0
28287: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28288: LD_INT 10500
28290: PPUSH
28291: CALL_OW 67
// solar_recharge_percent := 100 ;
28295: LD_ADDR_OWVAR 79
28299: PUSH
28300: LD_INT 100
28302: ST_TO_ADDR
// end ;
28303: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28304: LD_EXP 52
28308: PUSH
28309: LD_EXP 76
28313: AND
28314: IFFALSE 28553
28316: GO 28318
28318: DISABLE
28319: LD_INT 0
28321: PPUSH
28322: PPUSH
28323: PPUSH
// begin tmp := [ ] ;
28324: LD_ADDR_VAR 0 3
28328: PUSH
28329: EMPTY
28330: ST_TO_ADDR
// for i := 1 to 6 do
28331: LD_ADDR_VAR 0 1
28335: PUSH
28336: DOUBLE
28337: LD_INT 1
28339: DEC
28340: ST_TO_ADDR
28341: LD_INT 6
28343: PUSH
28344: FOR_TO
28345: IFFALSE 28450
// begin uc_nation := nation_nature ;
28347: LD_ADDR_OWVAR 21
28351: PUSH
28352: LD_INT 0
28354: ST_TO_ADDR
// uc_side := 0 ;
28355: LD_ADDR_OWVAR 20
28359: PUSH
28360: LD_INT 0
28362: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28363: LD_ADDR_OWVAR 29
28367: PUSH
28368: LD_INT 12
28370: PUSH
28371: LD_INT 12
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: ST_TO_ADDR
// hc_agressivity := 20 ;
28378: LD_ADDR_OWVAR 35
28382: PUSH
28383: LD_INT 20
28385: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28386: LD_ADDR_OWVAR 28
28390: PUSH
28391: LD_INT 17
28393: ST_TO_ADDR
// hc_gallery :=  ;
28394: LD_ADDR_OWVAR 33
28398: PUSH
28399: LD_STRING 
28401: ST_TO_ADDR
// hc_name :=  ;
28402: LD_ADDR_OWVAR 26
28406: PUSH
28407: LD_STRING 
28409: ST_TO_ADDR
// un := CreateHuman ;
28410: LD_ADDR_VAR 0 2
28414: PUSH
28415: CALL_OW 44
28419: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28420: LD_VAR 0 2
28424: PPUSH
28425: LD_INT 1
28427: PPUSH
28428: CALL_OW 51
// tmp := tmp ^ un ;
28432: LD_ADDR_VAR 0 3
28436: PUSH
28437: LD_VAR 0 3
28441: PUSH
28442: LD_VAR 0 2
28446: ADD
28447: ST_TO_ADDR
// end ;
28448: GO 28344
28450: POP
28451: POP
// repeat wait ( 0 0$1 ) ;
28452: LD_INT 35
28454: PPUSH
28455: CALL_OW 67
// for un in tmp do
28459: LD_ADDR_VAR 0 2
28463: PUSH
28464: LD_VAR 0 3
28468: PUSH
28469: FOR_IN
28470: IFFALSE 28544
// begin if IsDead ( un ) then
28472: LD_VAR 0 2
28476: PPUSH
28477: CALL_OW 301
28481: IFFALSE 28501
// begin tmp := tmp diff un ;
28483: LD_ADDR_VAR 0 3
28487: PUSH
28488: LD_VAR 0 3
28492: PUSH
28493: LD_VAR 0 2
28497: DIFF
28498: ST_TO_ADDR
// continue ;
28499: GO 28469
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28501: LD_VAR 0 2
28505: PPUSH
28506: LD_INT 3
28508: PUSH
28509: LD_INT 22
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PPUSH
28523: CALL_OW 69
28527: PPUSH
28528: LD_VAR 0 2
28532: PPUSH
28533: CALL_OW 74
28537: PPUSH
28538: CALL_OW 115
// end ;
28542: GO 28469
28544: POP
28545: POP
// until not tmp ;
28546: LD_VAR 0 3
28550: NOT
28551: IFFALSE 28452
// end ;
28553: PPOPN 3
28555: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28556: LD_EXP 52
28560: PUSH
28561: LD_EXP 77
28565: AND
28566: IFFALSE 28620
28568: GO 28570
28570: DISABLE
// begin ToLua ( displayTroll(); ) ;
28571: LD_STRING displayTroll();
28573: PPUSH
28574: CALL_OW 559
// wait ( 3 3$00 ) ;
28578: LD_INT 6300
28580: PPUSH
28581: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28585: LD_STRING hideTroll();
28587: PPUSH
28588: CALL_OW 559
// wait ( 1 1$00 ) ;
28592: LD_INT 2100
28594: PPUSH
28595: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28599: LD_STRING displayTroll();
28601: PPUSH
28602: CALL_OW 559
// wait ( 1 1$00 ) ;
28606: LD_INT 2100
28608: PPUSH
28609: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28613: LD_STRING hideTroll();
28615: PPUSH
28616: CALL_OW 559
// end ;
28620: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28621: LD_EXP 52
28625: PUSH
28626: LD_EXP 78
28630: AND
28631: IFFALSE 28694
28633: GO 28635
28635: DISABLE
28636: LD_INT 0
28638: PPUSH
// begin p := 0 ;
28639: LD_ADDR_VAR 0 1
28643: PUSH
28644: LD_INT 0
28646: ST_TO_ADDR
// repeat game_speed := 1 ;
28647: LD_ADDR_OWVAR 65
28651: PUSH
28652: LD_INT 1
28654: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28655: LD_INT 35
28657: PPUSH
28658: CALL_OW 67
// p := p + 1 ;
28662: LD_ADDR_VAR 0 1
28666: PUSH
28667: LD_VAR 0 1
28671: PUSH
28672: LD_INT 1
28674: PLUS
28675: ST_TO_ADDR
// until p >= 60 ;
28676: LD_VAR 0 1
28680: PUSH
28681: LD_INT 60
28683: GREATEREQUAL
28684: IFFALSE 28647
// game_speed := 4 ;
28686: LD_ADDR_OWVAR 65
28690: PUSH
28691: LD_INT 4
28693: ST_TO_ADDR
// end ;
28694: PPOPN 1
28696: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28697: LD_EXP 52
28701: PUSH
28702: LD_EXP 79
28706: AND
28707: IFFALSE 28853
28709: GO 28711
28711: DISABLE
28712: LD_INT 0
28714: PPUSH
28715: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28716: LD_ADDR_VAR 0 1
28720: PUSH
28721: LD_INT 22
28723: PUSH
28724: LD_OWVAR 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: LD_INT 30
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 30
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PPUSH
28765: CALL_OW 69
28769: ST_TO_ADDR
// if not depot then
28770: LD_VAR 0 1
28774: NOT
28775: IFFALSE 28779
// exit ;
28777: GO 28853
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28779: LD_ADDR_VAR 0 2
28783: PUSH
28784: LD_VAR 0 1
28788: PUSH
28789: LD_INT 1
28791: PPUSH
28792: LD_VAR 0 1
28796: PPUSH
28797: CALL_OW 12
28801: ARRAY
28802: PPUSH
28803: CALL_OW 274
28807: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28808: LD_VAR 0 2
28812: PPUSH
28813: LD_INT 1
28815: PPUSH
28816: LD_INT 0
28818: PPUSH
28819: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28823: LD_VAR 0 2
28827: PPUSH
28828: LD_INT 2
28830: PPUSH
28831: LD_INT 0
28833: PPUSH
28834: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28838: LD_VAR 0 2
28842: PPUSH
28843: LD_INT 3
28845: PPUSH
28846: LD_INT 0
28848: PPUSH
28849: CALL_OW 277
// end ;
28853: PPOPN 2
28855: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28856: LD_EXP 52
28860: PUSH
28861: LD_EXP 80
28865: AND
28866: IFFALSE 28963
28868: GO 28870
28870: DISABLE
28871: LD_INT 0
28873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28874: LD_ADDR_VAR 0 1
28878: PUSH
28879: LD_INT 22
28881: PUSH
28882: LD_OWVAR 2
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 21
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 3
28903: PUSH
28904: LD_INT 23
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: PPUSH
28923: CALL_OW 69
28927: ST_TO_ADDR
// if not tmp then
28928: LD_VAR 0 1
28932: NOT
28933: IFFALSE 28937
// exit ;
28935: GO 28963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28937: LD_VAR 0 1
28941: PUSH
28942: LD_INT 1
28944: PPUSH
28945: LD_VAR 0 1
28949: PPUSH
28950: CALL_OW 12
28954: ARRAY
28955: PPUSH
28956: LD_INT 200
28958: PPUSH
28959: CALL_OW 234
// end ;
28963: PPOPN 1
28965: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28966: LD_EXP 52
28970: PUSH
28971: LD_EXP 81
28975: AND
28976: IFFALSE 29055
28978: GO 28980
28980: DISABLE
28981: LD_INT 0
28983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28984: LD_ADDR_VAR 0 1
28988: PUSH
28989: LD_INT 22
28991: PUSH
28992: LD_OWVAR 2
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 21
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 69
29019: ST_TO_ADDR
// if not tmp then
29020: LD_VAR 0 1
29024: NOT
29025: IFFALSE 29029
// exit ;
29027: GO 29055
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29029: LD_VAR 0 1
29033: PUSH
29034: LD_INT 1
29036: PPUSH
29037: LD_VAR 0 1
29041: PPUSH
29042: CALL_OW 12
29046: ARRAY
29047: PPUSH
29048: LD_INT 60
29050: PPUSH
29051: CALL_OW 234
// end ;
29055: PPOPN 1
29057: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29058: LD_EXP 52
29062: PUSH
29063: LD_EXP 82
29067: AND
29068: IFFALSE 29167
29070: GO 29072
29072: DISABLE
29073: LD_INT 0
29075: PPUSH
29076: PPUSH
// begin enable ;
29077: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29078: LD_ADDR_VAR 0 1
29082: PUSH
29083: LD_INT 22
29085: PUSH
29086: LD_OWVAR 2
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 61
29097: PUSH
29098: EMPTY
29099: LIST
29100: PUSH
29101: LD_INT 33
29103: PUSH
29104: LD_INT 2
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: PPUSH
29116: CALL_OW 69
29120: ST_TO_ADDR
// if not tmp then
29121: LD_VAR 0 1
29125: NOT
29126: IFFALSE 29130
// exit ;
29128: GO 29167
// for i in tmp do
29130: LD_ADDR_VAR 0 2
29134: PUSH
29135: LD_VAR 0 1
29139: PUSH
29140: FOR_IN
29141: IFFALSE 29165
// if IsControledBy ( i ) then
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 312
29152: IFFALSE 29163
// ComUnlink ( i ) ;
29154: LD_VAR 0 2
29158: PPUSH
29159: CALL_OW 136
29163: GO 29140
29165: POP
29166: POP
// end ;
29167: PPOPN 2
29169: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29170: LD_EXP 52
29174: PUSH
29175: LD_EXP 83
29179: AND
29180: IFFALSE 29320
29182: GO 29184
29184: DISABLE
29185: LD_INT 0
29187: PPUSH
29188: PPUSH
// begin ToLua ( displayPowell(); ) ;
29189: LD_STRING displayPowell();
29191: PPUSH
29192: CALL_OW 559
// uc_side := 0 ;
29196: LD_ADDR_OWVAR 20
29200: PUSH
29201: LD_INT 0
29203: ST_TO_ADDR
// uc_nation := 2 ;
29204: LD_ADDR_OWVAR 21
29208: PUSH
29209: LD_INT 2
29211: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29212: LD_ADDR_OWVAR 37
29216: PUSH
29217: LD_INT 14
29219: ST_TO_ADDR
// vc_engine := engine_siberite ;
29220: LD_ADDR_OWVAR 39
29224: PUSH
29225: LD_INT 3
29227: ST_TO_ADDR
// vc_control := control_apeman ;
29228: LD_ADDR_OWVAR 38
29232: PUSH
29233: LD_INT 5
29235: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29236: LD_ADDR_OWVAR 40
29240: PUSH
29241: LD_INT 29
29243: ST_TO_ADDR
// un := CreateVehicle ;
29244: LD_ADDR_VAR 0 2
29248: PUSH
29249: CALL_OW 45
29253: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29254: LD_VAR 0 2
29258: PPUSH
29259: LD_INT 1
29261: PPUSH
29262: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29266: LD_INT 35
29268: PPUSH
29269: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29273: LD_VAR 0 2
29277: PPUSH
29278: LD_INT 22
29280: PUSH
29281: LD_OWVAR 2
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PPUSH
29290: CALL_OW 69
29294: PPUSH
29295: LD_VAR 0 2
29299: PPUSH
29300: CALL_OW 74
29304: PPUSH
29305: CALL_OW 115
// until IsDead ( un ) ;
29309: LD_VAR 0 2
29313: PPUSH
29314: CALL_OW 301
29318: IFFALSE 29266
// end ;
29320: PPOPN 2
29322: END
// every 0 0$1 trigger StreamModeActive and sStu do
29323: LD_EXP 52
29327: PUSH
29328: LD_EXP 91
29332: AND
29333: IFFALSE 29349
29335: GO 29337
29337: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29338: LD_STRING displayStucuk();
29340: PPUSH
29341: CALL_OW 559
// ResetFog ;
29345: CALL_OW 335
// end ;
29349: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29350: LD_EXP 52
29354: PUSH
29355: LD_EXP 84
29359: AND
29360: IFFALSE 29501
29362: GO 29364
29364: DISABLE
29365: LD_INT 0
29367: PPUSH
29368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29369: LD_ADDR_VAR 0 2
29373: PUSH
29374: LD_INT 22
29376: PUSH
29377: LD_OWVAR 2
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 21
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PPUSH
29400: CALL_OW 69
29404: ST_TO_ADDR
// if not tmp then
29405: LD_VAR 0 2
29409: NOT
29410: IFFALSE 29414
// exit ;
29412: GO 29501
// un := tmp [ rand ( 1 , tmp ) ] ;
29414: LD_ADDR_VAR 0 1
29418: PUSH
29419: LD_VAR 0 2
29423: PUSH
29424: LD_INT 1
29426: PPUSH
29427: LD_VAR 0 2
29431: PPUSH
29432: CALL_OW 12
29436: ARRAY
29437: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29438: LD_VAR 0 1
29442: PPUSH
29443: LD_INT 0
29445: PPUSH
29446: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29450: LD_VAR 0 1
29454: PPUSH
29455: LD_OWVAR 3
29459: PUSH
29460: LD_VAR 0 1
29464: DIFF
29465: PPUSH
29466: LD_VAR 0 1
29470: PPUSH
29471: CALL_OW 74
29475: PPUSH
29476: CALL_OW 115
// wait ( 0 0$20 ) ;
29480: LD_INT 700
29482: PPUSH
29483: CALL_OW 67
// SetSide ( un , your_side ) ;
29487: LD_VAR 0 1
29491: PPUSH
29492: LD_OWVAR 2
29496: PPUSH
29497: CALL_OW 235
// end ;
29501: PPOPN 2
29503: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29504: LD_EXP 52
29508: PUSH
29509: LD_EXP 85
29513: AND
29514: IFFALSE 29620
29516: GO 29518
29518: DISABLE
29519: LD_INT 0
29521: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29522: LD_ADDR_VAR 0 1
29526: PUSH
29527: LD_INT 22
29529: PUSH
29530: LD_OWVAR 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: LD_INT 30
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 30
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PPUSH
29571: CALL_OW 69
29575: ST_TO_ADDR
// if not depot then
29576: LD_VAR 0 1
29580: NOT
29581: IFFALSE 29585
// exit ;
29583: GO 29620
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29585: LD_VAR 0 1
29589: PUSH
29590: LD_INT 1
29592: ARRAY
29593: PPUSH
29594: CALL_OW 250
29598: PPUSH
29599: LD_VAR 0 1
29603: PUSH
29604: LD_INT 1
29606: ARRAY
29607: PPUSH
29608: CALL_OW 251
29612: PPUSH
29613: LD_INT 70
29615: PPUSH
29616: CALL_OW 495
// end ;
29620: PPOPN 1
29622: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29623: LD_EXP 52
29627: PUSH
29628: LD_EXP 86
29632: AND
29633: IFFALSE 29844
29635: GO 29637
29637: DISABLE
29638: LD_INT 0
29640: PPUSH
29641: PPUSH
29642: PPUSH
29643: PPUSH
29644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29645: LD_ADDR_VAR 0 5
29649: PUSH
29650: LD_INT 22
29652: PUSH
29653: LD_OWVAR 2
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 21
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PPUSH
29676: CALL_OW 69
29680: ST_TO_ADDR
// if not tmp then
29681: LD_VAR 0 5
29685: NOT
29686: IFFALSE 29690
// exit ;
29688: GO 29844
// for i in tmp do
29690: LD_ADDR_VAR 0 1
29694: PUSH
29695: LD_VAR 0 5
29699: PUSH
29700: FOR_IN
29701: IFFALSE 29842
// begin d := rand ( 0 , 5 ) ;
29703: LD_ADDR_VAR 0 4
29707: PUSH
29708: LD_INT 0
29710: PPUSH
29711: LD_INT 5
29713: PPUSH
29714: CALL_OW 12
29718: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29719: LD_ADDR_VAR 0 2
29723: PUSH
29724: LD_VAR 0 1
29728: PPUSH
29729: CALL_OW 250
29733: PPUSH
29734: LD_VAR 0 4
29738: PPUSH
29739: LD_INT 3
29741: PPUSH
29742: LD_INT 12
29744: PPUSH
29745: CALL_OW 12
29749: PPUSH
29750: CALL_OW 272
29754: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29755: LD_ADDR_VAR 0 3
29759: PUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: CALL_OW 251
29769: PPUSH
29770: LD_VAR 0 4
29774: PPUSH
29775: LD_INT 3
29777: PPUSH
29778: LD_INT 12
29780: PPUSH
29781: CALL_OW 12
29785: PPUSH
29786: CALL_OW 273
29790: ST_TO_ADDR
// if ValidHex ( x , y ) then
29791: LD_VAR 0 2
29795: PPUSH
29796: LD_VAR 0 3
29800: PPUSH
29801: CALL_OW 488
29805: IFFALSE 29840
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29807: LD_VAR 0 1
29811: PPUSH
29812: LD_VAR 0 2
29816: PPUSH
29817: LD_VAR 0 3
29821: PPUSH
29822: LD_INT 3
29824: PPUSH
29825: LD_INT 6
29827: PPUSH
29828: CALL_OW 12
29832: PPUSH
29833: LD_INT 1
29835: PPUSH
29836: CALL_OW 483
// end ;
29840: GO 29700
29842: POP
29843: POP
// end ;
29844: PPOPN 5
29846: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29847: LD_EXP 52
29851: PUSH
29852: LD_EXP 87
29856: AND
29857: IFFALSE 29951
29859: GO 29861
29861: DISABLE
29862: LD_INT 0
29864: PPUSH
29865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29866: LD_ADDR_VAR 0 2
29870: PUSH
29871: LD_INT 22
29873: PUSH
29874: LD_OWVAR 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 32
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 21
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: PPUSH
29908: CALL_OW 69
29912: ST_TO_ADDR
// if not tmp then
29913: LD_VAR 0 2
29917: NOT
29918: IFFALSE 29922
// exit ;
29920: GO 29951
// for i in tmp do
29922: LD_ADDR_VAR 0 1
29926: PUSH
29927: LD_VAR 0 2
29931: PUSH
29932: FOR_IN
29933: IFFALSE 29949
// SetFuel ( i , 0 ) ;
29935: LD_VAR 0 1
29939: PPUSH
29940: LD_INT 0
29942: PPUSH
29943: CALL_OW 240
29947: GO 29932
29949: POP
29950: POP
// end ;
29951: PPOPN 2
29953: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29954: LD_EXP 52
29958: PUSH
29959: LD_EXP 88
29963: AND
29964: IFFALSE 30030
29966: GO 29968
29968: DISABLE
29969: LD_INT 0
29971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29972: LD_ADDR_VAR 0 1
29976: PUSH
29977: LD_INT 22
29979: PUSH
29980: LD_OWVAR 2
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 30
29991: PUSH
29992: LD_INT 29
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PPUSH
30003: CALL_OW 69
30007: ST_TO_ADDR
// if not tmp then
30008: LD_VAR 0 1
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 30030
// DestroyUnit ( tmp [ 1 ] ) ;
30017: LD_VAR 0 1
30021: PUSH
30022: LD_INT 1
30024: ARRAY
30025: PPUSH
30026: CALL_OW 65
// end ;
30030: PPOPN 1
30032: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30033: LD_EXP 52
30037: PUSH
30038: LD_EXP 90
30042: AND
30043: IFFALSE 30172
30045: GO 30047
30047: DISABLE
30048: LD_INT 0
30050: PPUSH
// begin uc_side := 0 ;
30051: LD_ADDR_OWVAR 20
30055: PUSH
30056: LD_INT 0
30058: ST_TO_ADDR
// uc_nation := nation_arabian ;
30059: LD_ADDR_OWVAR 21
30063: PUSH
30064: LD_INT 2
30066: ST_TO_ADDR
// hc_gallery :=  ;
30067: LD_ADDR_OWVAR 33
30071: PUSH
30072: LD_STRING 
30074: ST_TO_ADDR
// hc_name :=  ;
30075: LD_ADDR_OWVAR 26
30079: PUSH
30080: LD_STRING 
30082: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30083: LD_INT 1
30085: PPUSH
30086: LD_INT 11
30088: PPUSH
30089: LD_INT 10
30091: PPUSH
30092: CALL_OW 380
// un := CreateHuman ;
30096: LD_ADDR_VAR 0 1
30100: PUSH
30101: CALL_OW 44
30105: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30106: LD_VAR 0 1
30110: PPUSH
30111: LD_INT 1
30113: PPUSH
30114: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30118: LD_INT 35
30120: PPUSH
30121: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30125: LD_VAR 0 1
30129: PPUSH
30130: LD_INT 22
30132: PUSH
30133: LD_OWVAR 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PPUSH
30142: CALL_OW 69
30146: PPUSH
30147: LD_VAR 0 1
30151: PPUSH
30152: CALL_OW 74
30156: PPUSH
30157: CALL_OW 115
// until IsDead ( un ) ;
30161: LD_VAR 0 1
30165: PPUSH
30166: CALL_OW 301
30170: IFFALSE 30118
// end ;
30172: PPOPN 1
30174: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30175: LD_EXP 52
30179: PUSH
30180: LD_EXP 92
30184: AND
30185: IFFALSE 30197
30187: GO 30189
30189: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30190: LD_STRING earthquake(getX(game), 0, 32)
30192: PPUSH
30193: CALL_OW 559
30197: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30198: LD_EXP 52
30202: PUSH
30203: LD_EXP 93
30207: AND
30208: IFFALSE 30299
30210: GO 30212
30212: DISABLE
30213: LD_INT 0
30215: PPUSH
// begin enable ;
30216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30217: LD_ADDR_VAR 0 1
30221: PUSH
30222: LD_INT 22
30224: PUSH
30225: LD_OWVAR 2
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 21
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 33
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: PPUSH
30259: CALL_OW 69
30263: ST_TO_ADDR
// if not tmp then
30264: LD_VAR 0 1
30268: NOT
30269: IFFALSE 30273
// exit ;
30271: GO 30299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30273: LD_VAR 0 1
30277: PUSH
30278: LD_INT 1
30280: PPUSH
30281: LD_VAR 0 1
30285: PPUSH
30286: CALL_OW 12
30290: ARRAY
30291: PPUSH
30292: LD_INT 1
30294: PPUSH
30295: CALL_OW 234
// end ;
30299: PPOPN 1
30301: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30302: LD_EXP 52
30306: PUSH
30307: LD_EXP 94
30311: AND
30312: IFFALSE 30453
30314: GO 30316
30316: DISABLE
30317: LD_INT 0
30319: PPUSH
30320: PPUSH
30321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30322: LD_ADDR_VAR 0 3
30326: PUSH
30327: LD_INT 22
30329: PUSH
30330: LD_OWVAR 2
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 25
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PPUSH
30353: CALL_OW 69
30357: ST_TO_ADDR
// if not tmp then
30358: LD_VAR 0 3
30362: NOT
30363: IFFALSE 30367
// exit ;
30365: GO 30453
// un := tmp [ rand ( 1 , tmp ) ] ;
30367: LD_ADDR_VAR 0 2
30371: PUSH
30372: LD_VAR 0 3
30376: PUSH
30377: LD_INT 1
30379: PPUSH
30380: LD_VAR 0 3
30384: PPUSH
30385: CALL_OW 12
30389: ARRAY
30390: ST_TO_ADDR
// if Crawls ( un ) then
30391: LD_VAR 0 2
30395: PPUSH
30396: CALL_OW 318
30400: IFFALSE 30411
// ComWalk ( un ) ;
30402: LD_VAR 0 2
30406: PPUSH
30407: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30411: LD_VAR 0 2
30415: PPUSH
30416: LD_INT 9
30418: PPUSH
30419: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30423: LD_INT 28
30425: PPUSH
30426: LD_OWVAR 2
30430: PPUSH
30431: LD_INT 2
30433: PPUSH
30434: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30438: LD_INT 29
30440: PPUSH
30441: LD_OWVAR 2
30445: PPUSH
30446: LD_INT 2
30448: PPUSH
30449: CALL_OW 322
// end ;
30453: PPOPN 3
30455: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30456: LD_EXP 52
30460: PUSH
30461: LD_EXP 95
30465: AND
30466: IFFALSE 30577
30468: GO 30470
30470: DISABLE
30471: LD_INT 0
30473: PPUSH
30474: PPUSH
30475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30476: LD_ADDR_VAR 0 3
30480: PUSH
30481: LD_INT 22
30483: PUSH
30484: LD_OWVAR 2
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 25
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PPUSH
30507: CALL_OW 69
30511: ST_TO_ADDR
// if not tmp then
30512: LD_VAR 0 3
30516: NOT
30517: IFFALSE 30521
// exit ;
30519: GO 30577
// un := tmp [ rand ( 1 , tmp ) ] ;
30521: LD_ADDR_VAR 0 2
30525: PUSH
30526: LD_VAR 0 3
30530: PUSH
30531: LD_INT 1
30533: PPUSH
30534: LD_VAR 0 3
30538: PPUSH
30539: CALL_OW 12
30543: ARRAY
30544: ST_TO_ADDR
// if Crawls ( un ) then
30545: LD_VAR 0 2
30549: PPUSH
30550: CALL_OW 318
30554: IFFALSE 30565
// ComWalk ( un ) ;
30556: LD_VAR 0 2
30560: PPUSH
30561: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30565: LD_VAR 0 2
30569: PPUSH
30570: LD_INT 8
30572: PPUSH
30573: CALL_OW 336
// end ;
30577: PPOPN 3
30579: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30580: LD_EXP 52
30584: PUSH
30585: LD_EXP 96
30589: AND
30590: IFFALSE 30734
30592: GO 30594
30594: DISABLE
30595: LD_INT 0
30597: PPUSH
30598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30599: LD_ADDR_VAR 0 2
30603: PUSH
30604: LD_INT 22
30606: PUSH
30607: LD_OWVAR 2
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 21
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: LD_INT 34
30631: PUSH
30632: LD_INT 12
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 34
30641: PUSH
30642: LD_INT 51
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 34
30651: PUSH
30652: LD_INT 32
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: PPUSH
30670: CALL_OW 69
30674: ST_TO_ADDR
// if not tmp then
30675: LD_VAR 0 2
30679: NOT
30680: IFFALSE 30684
// exit ;
30682: GO 30734
// for i in tmp do
30684: LD_ADDR_VAR 0 1
30688: PUSH
30689: LD_VAR 0 2
30693: PUSH
30694: FOR_IN
30695: IFFALSE 30732
// if GetCargo ( i , mat_artifact ) = 0 then
30697: LD_VAR 0 1
30701: PPUSH
30702: LD_INT 4
30704: PPUSH
30705: CALL_OW 289
30709: PUSH
30710: LD_INT 0
30712: EQUAL
30713: IFFALSE 30730
// SetCargo ( i , mat_siberit , 100 ) ;
30715: LD_VAR 0 1
30719: PPUSH
30720: LD_INT 3
30722: PPUSH
30723: LD_INT 100
30725: PPUSH
30726: CALL_OW 290
30730: GO 30694
30732: POP
30733: POP
// end ;
30734: PPOPN 2
30736: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30737: LD_EXP 52
30741: PUSH
30742: LD_EXP 97
30746: AND
30747: IFFALSE 30930
30749: GO 30751
30751: DISABLE
30752: LD_INT 0
30754: PPUSH
30755: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30756: LD_ADDR_VAR 0 2
30760: PUSH
30761: LD_INT 22
30763: PUSH
30764: LD_OWVAR 2
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PPUSH
30773: CALL_OW 69
30777: ST_TO_ADDR
// if not tmp then
30778: LD_VAR 0 2
30782: NOT
30783: IFFALSE 30787
// exit ;
30785: GO 30930
// for i := 1 to 2 do
30787: LD_ADDR_VAR 0 1
30791: PUSH
30792: DOUBLE
30793: LD_INT 1
30795: DEC
30796: ST_TO_ADDR
30797: LD_INT 2
30799: PUSH
30800: FOR_TO
30801: IFFALSE 30928
// begin uc_side := your_side ;
30803: LD_ADDR_OWVAR 20
30807: PUSH
30808: LD_OWVAR 2
30812: ST_TO_ADDR
// uc_nation := nation_american ;
30813: LD_ADDR_OWVAR 21
30817: PUSH
30818: LD_INT 1
30820: ST_TO_ADDR
// vc_chassis := us_morphling ;
30821: LD_ADDR_OWVAR 37
30825: PUSH
30826: LD_INT 5
30828: ST_TO_ADDR
// vc_engine := engine_siberite ;
30829: LD_ADDR_OWVAR 39
30833: PUSH
30834: LD_INT 3
30836: ST_TO_ADDR
// vc_control := control_computer ;
30837: LD_ADDR_OWVAR 38
30841: PUSH
30842: LD_INT 3
30844: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30845: LD_ADDR_OWVAR 40
30849: PUSH
30850: LD_INT 10
30852: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30853: LD_VAR 0 2
30857: PUSH
30858: LD_INT 1
30860: ARRAY
30861: PPUSH
30862: CALL_OW 310
30866: NOT
30867: IFFALSE 30914
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30869: CALL_OW 45
30873: PPUSH
30874: LD_VAR 0 2
30878: PUSH
30879: LD_INT 1
30881: ARRAY
30882: PPUSH
30883: CALL_OW 250
30887: PPUSH
30888: LD_VAR 0 2
30892: PUSH
30893: LD_INT 1
30895: ARRAY
30896: PPUSH
30897: CALL_OW 251
30901: PPUSH
30902: LD_INT 12
30904: PPUSH
30905: LD_INT 1
30907: PPUSH
30908: CALL_OW 50
30912: GO 30926
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30914: CALL_OW 45
30918: PPUSH
30919: LD_INT 1
30921: PPUSH
30922: CALL_OW 51
// end ;
30926: GO 30800
30928: POP
30929: POP
// end ;
30930: PPOPN 2
30932: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30933: LD_EXP 52
30937: PUSH
30938: LD_EXP 98
30942: AND
30943: IFFALSE 31165
30945: GO 30947
30947: DISABLE
30948: LD_INT 0
30950: PPUSH
30951: PPUSH
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30956: LD_ADDR_VAR 0 6
30960: PUSH
30961: LD_INT 22
30963: PUSH
30964: LD_OWVAR 2
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 21
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: LD_INT 23
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: PPUSH
31005: CALL_OW 69
31009: ST_TO_ADDR
// if not tmp then
31010: LD_VAR 0 6
31014: NOT
31015: IFFALSE 31019
// exit ;
31017: GO 31165
// s1 := rand ( 1 , 4 ) ;
31019: LD_ADDR_VAR 0 2
31023: PUSH
31024: LD_INT 1
31026: PPUSH
31027: LD_INT 4
31029: PPUSH
31030: CALL_OW 12
31034: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31035: LD_ADDR_VAR 0 4
31039: PUSH
31040: LD_VAR 0 6
31044: PUSH
31045: LD_INT 1
31047: ARRAY
31048: PPUSH
31049: LD_VAR 0 2
31053: PPUSH
31054: CALL_OW 259
31058: ST_TO_ADDR
// if s1 = 1 then
31059: LD_VAR 0 2
31063: PUSH
31064: LD_INT 1
31066: EQUAL
31067: IFFALSE 31087
// s2 := rand ( 2 , 4 ) else
31069: LD_ADDR_VAR 0 3
31073: PUSH
31074: LD_INT 2
31076: PPUSH
31077: LD_INT 4
31079: PPUSH
31080: CALL_OW 12
31084: ST_TO_ADDR
31085: GO 31095
// s2 := 1 ;
31087: LD_ADDR_VAR 0 3
31091: PUSH
31092: LD_INT 1
31094: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31095: LD_ADDR_VAR 0 5
31099: PUSH
31100: LD_VAR 0 6
31104: PUSH
31105: LD_INT 1
31107: ARRAY
31108: PPUSH
31109: LD_VAR 0 3
31113: PPUSH
31114: CALL_OW 259
31118: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31119: LD_VAR 0 6
31123: PUSH
31124: LD_INT 1
31126: ARRAY
31127: PPUSH
31128: LD_VAR 0 2
31132: PPUSH
31133: LD_VAR 0 5
31137: PPUSH
31138: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31142: LD_VAR 0 6
31146: PUSH
31147: LD_INT 1
31149: ARRAY
31150: PPUSH
31151: LD_VAR 0 3
31155: PPUSH
31156: LD_VAR 0 4
31160: PPUSH
31161: CALL_OW 237
// end ;
31165: PPOPN 6
31167: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31168: LD_EXP 52
31172: PUSH
31173: LD_EXP 99
31177: AND
31178: IFFALSE 31257
31180: GO 31182
31182: DISABLE
31183: LD_INT 0
31185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31186: LD_ADDR_VAR 0 1
31190: PUSH
31191: LD_INT 22
31193: PUSH
31194: LD_OWVAR 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 30
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PPUSH
31217: CALL_OW 69
31221: ST_TO_ADDR
// if not tmp then
31222: LD_VAR 0 1
31226: NOT
31227: IFFALSE 31231
// exit ;
31229: GO 31257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31231: LD_VAR 0 1
31235: PUSH
31236: LD_INT 1
31238: PPUSH
31239: LD_VAR 0 1
31243: PPUSH
31244: CALL_OW 12
31248: ARRAY
31249: PPUSH
31250: LD_INT 1
31252: PPUSH
31253: CALL_OW 234
// end ;
31257: PPOPN 1
31259: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31260: LD_EXP 52
31264: PUSH
31265: LD_EXP 100
31269: AND
31270: IFFALSE 31382
31272: GO 31274
31274: DISABLE
31275: LD_INT 0
31277: PPUSH
31278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31279: LD_ADDR_VAR 0 2
31283: PUSH
31284: LD_INT 22
31286: PUSH
31287: LD_OWVAR 2
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 30
31301: PUSH
31302: LD_INT 27
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: LD_INT 26
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 30
31321: PUSH
31322: LD_INT 28
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PPUSH
31339: CALL_OW 69
31343: ST_TO_ADDR
// if not tmp then
31344: LD_VAR 0 2
31348: NOT
31349: IFFALSE 31353
// exit ;
31351: GO 31382
// for i in tmp do
31353: LD_ADDR_VAR 0 1
31357: PUSH
31358: LD_VAR 0 2
31362: PUSH
31363: FOR_IN
31364: IFFALSE 31380
// SetLives ( i , 1 ) ;
31366: LD_VAR 0 1
31370: PPUSH
31371: LD_INT 1
31373: PPUSH
31374: CALL_OW 234
31378: GO 31363
31380: POP
31381: POP
// end ;
31382: PPOPN 2
31384: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31385: LD_EXP 52
31389: PUSH
31390: LD_EXP 101
31394: AND
31395: IFFALSE 31682
31397: GO 31399
31399: DISABLE
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
31404: PPUSH
// begin i := rand ( 1 , 7 ) ;
31405: LD_ADDR_VAR 0 1
31409: PUSH
31410: LD_INT 1
31412: PPUSH
31413: LD_INT 7
31415: PPUSH
31416: CALL_OW 12
31420: ST_TO_ADDR
// case i of 1 :
31421: LD_VAR 0 1
31425: PUSH
31426: LD_INT 1
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31444
31434: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31435: LD_STRING earthquake(getX(game), 0, 32)
31437: PPUSH
31438: CALL_OW 559
31442: GO 31682
31444: LD_INT 2
31446: DOUBLE
31447: EQUAL
31448: IFTRUE 31452
31450: GO 31466
31452: POP
// begin ToLua ( displayStucuk(); ) ;
31453: LD_STRING displayStucuk();
31455: PPUSH
31456: CALL_OW 559
// ResetFog ;
31460: CALL_OW 335
// end ; 3 :
31464: GO 31682
31466: LD_INT 3
31468: DOUBLE
31469: EQUAL
31470: IFTRUE 31474
31472: GO 31578
31474: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31475: LD_ADDR_VAR 0 2
31479: PUSH
31480: LD_INT 22
31482: PUSH
31483: LD_OWVAR 2
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 25
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PPUSH
31506: CALL_OW 69
31510: ST_TO_ADDR
// if not tmp then
31511: LD_VAR 0 2
31515: NOT
31516: IFFALSE 31520
// exit ;
31518: GO 31682
// un := tmp [ rand ( 1 , tmp ) ] ;
31520: LD_ADDR_VAR 0 3
31524: PUSH
31525: LD_VAR 0 2
31529: PUSH
31530: LD_INT 1
31532: PPUSH
31533: LD_VAR 0 2
31537: PPUSH
31538: CALL_OW 12
31542: ARRAY
31543: ST_TO_ADDR
// if Crawls ( un ) then
31544: LD_VAR 0 3
31548: PPUSH
31549: CALL_OW 318
31553: IFFALSE 31564
// ComWalk ( un ) ;
31555: LD_VAR 0 3
31559: PPUSH
31560: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31564: LD_VAR 0 3
31568: PPUSH
31569: LD_INT 8
31571: PPUSH
31572: CALL_OW 336
// end ; 4 :
31576: GO 31682
31578: LD_INT 4
31580: DOUBLE
31581: EQUAL
31582: IFTRUE 31586
31584: GO 31660
31586: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31587: LD_ADDR_VAR 0 2
31591: PUSH
31592: LD_INT 22
31594: PUSH
31595: LD_OWVAR 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 30
31606: PUSH
31607: LD_INT 29
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PPUSH
31618: CALL_OW 69
31622: ST_TO_ADDR
// if not tmp then
31623: LD_VAR 0 2
31627: NOT
31628: IFFALSE 31632
// exit ;
31630: GO 31682
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31632: LD_VAR 0 2
31636: PUSH
31637: LD_INT 1
31639: ARRAY
31640: PPUSH
31641: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31645: LD_VAR 0 2
31649: PUSH
31650: LD_INT 1
31652: ARRAY
31653: PPUSH
31654: CALL_OW 65
// end ; 5 .. 7 :
31658: GO 31682
31660: LD_INT 5
31662: DOUBLE
31663: GREATEREQUAL
31664: IFFALSE 31672
31666: LD_INT 7
31668: DOUBLE
31669: LESSEQUAL
31670: IFTRUE 31674
31672: GO 31681
31674: POP
// StreamSibBomb ; end ;
31675: CALL 27919 0 0
31679: GO 31682
31681: POP
// end ;
31682: PPOPN 3
31684: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31685: LD_EXP 52
31689: PUSH
31690: LD_EXP 102
31694: AND
31695: IFFALSE 31851
31697: GO 31699
31699: DISABLE
31700: LD_INT 0
31702: PPUSH
31703: PPUSH
31704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31705: LD_ADDR_VAR 0 2
31709: PUSH
31710: LD_INT 81
31712: PUSH
31713: LD_OWVAR 2
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: LD_INT 21
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 21
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PPUSH
31754: CALL_OW 69
31758: ST_TO_ADDR
// if not tmp then
31759: LD_VAR 0 2
31763: NOT
31764: IFFALSE 31768
// exit ;
31766: GO 31851
// p := 0 ;
31768: LD_ADDR_VAR 0 3
31772: PUSH
31773: LD_INT 0
31775: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31776: LD_INT 35
31778: PPUSH
31779: CALL_OW 67
// p := p + 1 ;
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_VAR 0 3
31792: PUSH
31793: LD_INT 1
31795: PLUS
31796: ST_TO_ADDR
// for i in tmp do
31797: LD_ADDR_VAR 0 1
31801: PUSH
31802: LD_VAR 0 2
31806: PUSH
31807: FOR_IN
31808: IFFALSE 31839
// if GetLives ( i ) < 1000 then
31810: LD_VAR 0 1
31814: PPUSH
31815: CALL_OW 256
31819: PUSH
31820: LD_INT 1000
31822: LESS
31823: IFFALSE 31837
// SetLives ( i , 1000 ) ;
31825: LD_VAR 0 1
31829: PPUSH
31830: LD_INT 1000
31832: PPUSH
31833: CALL_OW 234
31837: GO 31807
31839: POP
31840: POP
// until p > 20 ;
31841: LD_VAR 0 3
31845: PUSH
31846: LD_INT 20
31848: GREATER
31849: IFFALSE 31776
// end ;
31851: PPOPN 3
31853: END
// every 0 0$1 trigger StreamModeActive and sTime do
31854: LD_EXP 52
31858: PUSH
31859: LD_EXP 103
31863: AND
31864: IFFALSE 31899
31866: GO 31868
31868: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31869: LD_INT 28
31871: PPUSH
31872: LD_OWVAR 2
31876: PPUSH
31877: LD_INT 2
31879: PPUSH
31880: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31884: LD_INT 30
31886: PPUSH
31887: LD_OWVAR 2
31891: PPUSH
31892: LD_INT 2
31894: PPUSH
31895: CALL_OW 322
// end ;
31899: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31900: LD_EXP 52
31904: PUSH
31905: LD_EXP 104
31909: AND
31910: IFFALSE 32031
31912: GO 31914
31914: DISABLE
31915: LD_INT 0
31917: PPUSH
31918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31919: LD_ADDR_VAR 0 2
31923: PUSH
31924: LD_INT 22
31926: PUSH
31927: LD_OWVAR 2
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 21
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 23
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: PPUSH
31968: CALL_OW 69
31972: ST_TO_ADDR
// if not tmp then
31973: LD_VAR 0 2
31977: NOT
31978: IFFALSE 31982
// exit ;
31980: GO 32031
// for i in tmp do
31982: LD_ADDR_VAR 0 1
31986: PUSH
31987: LD_VAR 0 2
31991: PUSH
31992: FOR_IN
31993: IFFALSE 32029
// begin if Crawls ( i ) then
31995: LD_VAR 0 1
31999: PPUSH
32000: CALL_OW 318
32004: IFFALSE 32015
// ComWalk ( i ) ;
32006: LD_VAR 0 1
32010: PPUSH
32011: CALL_OW 138
// SetClass ( i , 2 ) ;
32015: LD_VAR 0 1
32019: PPUSH
32020: LD_INT 2
32022: PPUSH
32023: CALL_OW 336
// end ;
32027: GO 31992
32029: POP
32030: POP
// end ;
32031: PPOPN 2
32033: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32034: LD_EXP 52
32038: PUSH
32039: LD_EXP 105
32043: AND
32044: IFFALSE 32332
32046: GO 32048
32048: DISABLE
32049: LD_INT 0
32051: PPUSH
32052: PPUSH
32053: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32054: LD_OWVAR 2
32058: PPUSH
32059: LD_INT 9
32061: PPUSH
32062: LD_INT 1
32064: PPUSH
32065: LD_INT 1
32067: PPUSH
32068: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32072: LD_INT 9
32074: PPUSH
32075: LD_OWVAR 2
32079: PPUSH
32080: CALL_OW 343
// uc_side := 9 ;
32084: LD_ADDR_OWVAR 20
32088: PUSH
32089: LD_INT 9
32091: ST_TO_ADDR
// uc_nation := 2 ;
32092: LD_ADDR_OWVAR 21
32096: PUSH
32097: LD_INT 2
32099: ST_TO_ADDR
// hc_name := Dark Warrior ;
32100: LD_ADDR_OWVAR 26
32104: PUSH
32105: LD_STRING Dark Warrior
32107: ST_TO_ADDR
// hc_gallery :=  ;
32108: LD_ADDR_OWVAR 33
32112: PUSH
32113: LD_STRING 
32115: ST_TO_ADDR
// hc_noskilllimit := true ;
32116: LD_ADDR_OWVAR 76
32120: PUSH
32121: LD_INT 1
32123: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32124: LD_ADDR_OWVAR 31
32128: PUSH
32129: LD_INT 30
32131: PUSH
32132: LD_INT 30
32134: PUSH
32135: LD_INT 30
32137: PUSH
32138: LD_INT 30
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: ST_TO_ADDR
// un := CreateHuman ;
32147: LD_ADDR_VAR 0 3
32151: PUSH
32152: CALL_OW 44
32156: ST_TO_ADDR
// hc_noskilllimit := false ;
32157: LD_ADDR_OWVAR 76
32161: PUSH
32162: LD_INT 0
32164: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32165: LD_VAR 0 3
32169: PPUSH
32170: LD_INT 1
32172: PPUSH
32173: CALL_OW 51
// ToLua ( playRanger() ) ;
32177: LD_STRING playRanger()
32179: PPUSH
32180: CALL_OW 559
// p := 0 ;
32184: LD_ADDR_VAR 0 2
32188: PUSH
32189: LD_INT 0
32191: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32192: LD_INT 35
32194: PPUSH
32195: CALL_OW 67
// p := p + 1 ;
32199: LD_ADDR_VAR 0 2
32203: PUSH
32204: LD_VAR 0 2
32208: PUSH
32209: LD_INT 1
32211: PLUS
32212: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32213: LD_VAR 0 3
32217: PPUSH
32218: CALL_OW 256
32222: PUSH
32223: LD_INT 1000
32225: LESS
32226: IFFALSE 32240
// SetLives ( un , 1000 ) ;
32228: LD_VAR 0 3
32232: PPUSH
32233: LD_INT 1000
32235: PPUSH
32236: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32240: LD_VAR 0 3
32244: PPUSH
32245: LD_INT 81
32247: PUSH
32248: LD_OWVAR 2
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 91
32259: PUSH
32260: LD_VAR 0 3
32264: PUSH
32265: LD_INT 30
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: LIST
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PPUSH
32277: CALL_OW 69
32281: PPUSH
32282: LD_VAR 0 3
32286: PPUSH
32287: CALL_OW 74
32291: PPUSH
32292: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32296: LD_VAR 0 2
32300: PUSH
32301: LD_INT 80
32303: GREATER
32304: PUSH
32305: LD_VAR 0 3
32309: PPUSH
32310: CALL_OW 301
32314: OR
32315: IFFALSE 32192
// if un then
32317: LD_VAR 0 3
32321: IFFALSE 32332
// RemoveUnit ( un ) ;
32323: LD_VAR 0 3
32327: PPUSH
32328: CALL_OW 64
// end ;
32332: PPOPN 3
32334: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32335: LD_EXP 106
32339: IFFALSE 32455
32341: GO 32343
32343: DISABLE
32344: LD_INT 0
32346: PPUSH
32347: PPUSH
32348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32349: LD_ADDR_VAR 0 2
32353: PUSH
32354: LD_INT 81
32356: PUSH
32357: LD_OWVAR 2
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 21
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PPUSH
32380: CALL_OW 69
32384: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32385: LD_STRING playComputer()
32387: PPUSH
32388: CALL_OW 559
// if not tmp then
32392: LD_VAR 0 2
32396: NOT
32397: IFFALSE 32401
// exit ;
32399: GO 32455
// for i in tmp do
32401: LD_ADDR_VAR 0 1
32405: PUSH
32406: LD_VAR 0 2
32410: PUSH
32411: FOR_IN
32412: IFFALSE 32453
// for j := 1 to 4 do
32414: LD_ADDR_VAR 0 3
32418: PUSH
32419: DOUBLE
32420: LD_INT 1
32422: DEC
32423: ST_TO_ADDR
32424: LD_INT 4
32426: PUSH
32427: FOR_TO
32428: IFFALSE 32449
// SetSkill ( i , j , 10 ) ;
32430: LD_VAR 0 1
32434: PPUSH
32435: LD_VAR 0 3
32439: PPUSH
32440: LD_INT 10
32442: PPUSH
32443: CALL_OW 237
32447: GO 32427
32449: POP
32450: POP
32451: GO 32411
32453: POP
32454: POP
// end ;
32455: PPOPN 3
32457: END
// every 0 0$1 trigger s30 do var i , tmp ;
32458: LD_EXP 107
32462: IFFALSE 32531
32464: GO 32466
32466: DISABLE
32467: LD_INT 0
32469: PPUSH
32470: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32471: LD_ADDR_VAR 0 2
32475: PUSH
32476: LD_INT 22
32478: PUSH
32479: LD_OWVAR 2
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PPUSH
32488: CALL_OW 69
32492: ST_TO_ADDR
// if not tmp then
32493: LD_VAR 0 2
32497: NOT
32498: IFFALSE 32502
// exit ;
32500: GO 32531
// for i in tmp do
32502: LD_ADDR_VAR 0 1
32506: PUSH
32507: LD_VAR 0 2
32511: PUSH
32512: FOR_IN
32513: IFFALSE 32529
// SetLives ( i , 300 ) ;
32515: LD_VAR 0 1
32519: PPUSH
32520: LD_INT 300
32522: PPUSH
32523: CALL_OW 234
32527: GO 32512
32529: POP
32530: POP
// end ;
32531: PPOPN 2
32533: END
// every 0 0$1 trigger s60 do var i , tmp ;
32534: LD_EXP 108
32538: IFFALSE 32607
32540: GO 32542
32542: DISABLE
32543: LD_INT 0
32545: PPUSH
32546: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32547: LD_ADDR_VAR 0 2
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_OWVAR 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PPUSH
32564: CALL_OW 69
32568: ST_TO_ADDR
// if not tmp then
32569: LD_VAR 0 2
32573: NOT
32574: IFFALSE 32578
// exit ;
32576: GO 32607
// for i in tmp do
32578: LD_ADDR_VAR 0 1
32582: PUSH
32583: LD_VAR 0 2
32587: PUSH
32588: FOR_IN
32589: IFFALSE 32605
// SetLives ( i , 600 ) ;
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_INT 600
32598: PPUSH
32599: CALL_OW 234
32603: GO 32588
32605: POP
32606: POP
// end ;
32607: PPOPN 2
32609: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32610: LD_INT 0
32612: PPUSH
// case cmd of 301 :
32613: LD_VAR 0 1
32617: PUSH
32618: LD_INT 301
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32658
32626: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32627: LD_VAR 0 6
32631: PPUSH
32632: LD_VAR 0 7
32636: PPUSH
32637: LD_VAR 0 8
32641: PPUSH
32642: LD_VAR 0 4
32646: PPUSH
32647: LD_VAR 0 5
32651: PPUSH
32652: CALL 33867 0 5
32656: GO 32779
32658: LD_INT 302
32660: DOUBLE
32661: EQUAL
32662: IFTRUE 32666
32664: GO 32703
32666: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32667: LD_VAR 0 6
32671: PPUSH
32672: LD_VAR 0 7
32676: PPUSH
32677: LD_VAR 0 8
32681: PPUSH
32682: LD_VAR 0 9
32686: PPUSH
32687: LD_VAR 0 4
32691: PPUSH
32692: LD_VAR 0 5
32696: PPUSH
32697: CALL 33958 0 6
32701: GO 32779
32703: LD_INT 303
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32711
32709: GO 32748
32711: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32712: LD_VAR 0 6
32716: PPUSH
32717: LD_VAR 0 7
32721: PPUSH
32722: LD_VAR 0 8
32726: PPUSH
32727: LD_VAR 0 9
32731: PPUSH
32732: LD_VAR 0 4
32736: PPUSH
32737: LD_VAR 0 5
32741: PPUSH
32742: CALL 32784 0 6
32746: GO 32779
32748: LD_INT 304
32750: DOUBLE
32751: EQUAL
32752: IFTRUE 32756
32754: GO 32778
32756: POP
// hHackTeleport ( unit , x , y ) ; end ;
32757: LD_VAR 0 2
32761: PPUSH
32762: LD_VAR 0 4
32766: PPUSH
32767: LD_VAR 0 5
32771: PPUSH
32772: CALL 34551 0 3
32776: GO 32779
32778: POP
// end ;
32779: LD_VAR 0 12
32783: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32784: LD_INT 0
32786: PPUSH
32787: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32788: LD_VAR 0 1
32792: PUSH
32793: LD_INT 1
32795: LESS
32796: PUSH
32797: LD_VAR 0 1
32801: PUSH
32802: LD_INT 3
32804: GREATER
32805: OR
32806: PUSH
32807: LD_VAR 0 5
32811: PPUSH
32812: LD_VAR 0 6
32816: PPUSH
32817: CALL_OW 428
32821: OR
32822: IFFALSE 32826
// exit ;
32824: GO 33554
// uc_side := your_side ;
32826: LD_ADDR_OWVAR 20
32830: PUSH
32831: LD_OWVAR 2
32835: ST_TO_ADDR
// uc_nation := nation ;
32836: LD_ADDR_OWVAR 21
32840: PUSH
32841: LD_VAR 0 1
32845: ST_TO_ADDR
// bc_level = 1 ;
32846: LD_ADDR_OWVAR 43
32850: PUSH
32851: LD_INT 1
32853: ST_TO_ADDR
// case btype of 1 :
32854: LD_VAR 0 2
32858: PUSH
32859: LD_INT 1
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32878
32867: POP
// bc_type := b_depot ; 2 :
32868: LD_ADDR_OWVAR 42
32872: PUSH
32873: LD_INT 0
32875: ST_TO_ADDR
32876: GO 33498
32878: LD_INT 2
32880: DOUBLE
32881: EQUAL
32882: IFTRUE 32886
32884: GO 32897
32886: POP
// bc_type := b_warehouse ; 3 :
32887: LD_ADDR_OWVAR 42
32891: PUSH
32892: LD_INT 1
32894: ST_TO_ADDR
32895: GO 33498
32897: LD_INT 3
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32916
32905: POP
// bc_type := b_lab ; 4 .. 9 :
32906: LD_ADDR_OWVAR 42
32910: PUSH
32911: LD_INT 6
32913: ST_TO_ADDR
32914: GO 33498
32916: LD_INT 4
32918: DOUBLE
32919: GREATEREQUAL
32920: IFFALSE 32928
32922: LD_INT 9
32924: DOUBLE
32925: LESSEQUAL
32926: IFTRUE 32930
32928: GO 32990
32930: POP
// begin bc_type := b_lab_half ;
32931: LD_ADDR_OWVAR 42
32935: PUSH
32936: LD_INT 7
32938: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32939: LD_ADDR_OWVAR 44
32943: PUSH
32944: LD_INT 10
32946: PUSH
32947: LD_INT 11
32949: PUSH
32950: LD_INT 12
32952: PUSH
32953: LD_INT 15
32955: PUSH
32956: LD_INT 14
32958: PUSH
32959: LD_INT 13
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: PUSH
32970: LD_VAR 0 2
32974: PUSH
32975: LD_INT 3
32977: MINUS
32978: ARRAY
32979: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32980: LD_ADDR_OWVAR 45
32984: PUSH
32985: LD_INT 9
32987: ST_TO_ADDR
// end ; 10 .. 13 :
32988: GO 33498
32990: LD_INT 10
32992: DOUBLE
32993: GREATEREQUAL
32994: IFFALSE 33002
32996: LD_INT 13
32998: DOUBLE
32999: LESSEQUAL
33000: IFTRUE 33004
33002: GO 33081
33004: POP
// begin bc_type := b_lab_full ;
33005: LD_ADDR_OWVAR 42
33009: PUSH
33010: LD_INT 8
33012: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33013: LD_ADDR_OWVAR 44
33017: PUSH
33018: LD_INT 10
33020: PUSH
33021: LD_INT 12
33023: PUSH
33024: LD_INT 14
33026: PUSH
33027: LD_INT 13
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: PUSH
33036: LD_VAR 0 2
33040: PUSH
33041: LD_INT 9
33043: MINUS
33044: ARRAY
33045: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33046: LD_ADDR_OWVAR 45
33050: PUSH
33051: LD_INT 11
33053: PUSH
33054: LD_INT 15
33056: PUSH
33057: LD_INT 12
33059: PUSH
33060: LD_INT 15
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: PUSH
33069: LD_VAR 0 2
33073: PUSH
33074: LD_INT 9
33076: MINUS
33077: ARRAY
33078: ST_TO_ADDR
// end ; 14 :
33079: GO 33498
33081: LD_INT 14
33083: DOUBLE
33084: EQUAL
33085: IFTRUE 33089
33087: GO 33100
33089: POP
// bc_type := b_workshop ; 15 :
33090: LD_ADDR_OWVAR 42
33094: PUSH
33095: LD_INT 2
33097: ST_TO_ADDR
33098: GO 33498
33100: LD_INT 15
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33108
33106: GO 33119
33108: POP
// bc_type := b_factory ; 16 :
33109: LD_ADDR_OWVAR 42
33113: PUSH
33114: LD_INT 3
33116: ST_TO_ADDR
33117: GO 33498
33119: LD_INT 16
33121: DOUBLE
33122: EQUAL
33123: IFTRUE 33127
33125: GO 33138
33127: POP
// bc_type := b_ext_gun ; 17 :
33128: LD_ADDR_OWVAR 42
33132: PUSH
33133: LD_INT 17
33135: ST_TO_ADDR
33136: GO 33498
33138: LD_INT 17
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33146
33144: GO 33174
33146: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33147: LD_ADDR_OWVAR 42
33151: PUSH
33152: LD_INT 19
33154: PUSH
33155: LD_INT 23
33157: PUSH
33158: LD_INT 19
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: LIST
33165: PUSH
33166: LD_VAR 0 1
33170: ARRAY
33171: ST_TO_ADDR
33172: GO 33498
33174: LD_INT 18
33176: DOUBLE
33177: EQUAL
33178: IFTRUE 33182
33180: GO 33193
33182: POP
// bc_type := b_ext_radar ; 19 :
33183: LD_ADDR_OWVAR 42
33187: PUSH
33188: LD_INT 20
33190: ST_TO_ADDR
33191: GO 33498
33193: LD_INT 19
33195: DOUBLE
33196: EQUAL
33197: IFTRUE 33201
33199: GO 33212
33201: POP
// bc_type := b_ext_radio ; 20 :
33202: LD_ADDR_OWVAR 42
33206: PUSH
33207: LD_INT 22
33209: ST_TO_ADDR
33210: GO 33498
33212: LD_INT 20
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33220
33218: GO 33231
33220: POP
// bc_type := b_ext_siberium ; 21 :
33221: LD_ADDR_OWVAR 42
33225: PUSH
33226: LD_INT 21
33228: ST_TO_ADDR
33229: GO 33498
33231: LD_INT 21
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33239
33237: GO 33250
33239: POP
// bc_type := b_ext_computer ; 22 :
33240: LD_ADDR_OWVAR 42
33244: PUSH
33245: LD_INT 24
33247: ST_TO_ADDR
33248: GO 33498
33250: LD_INT 22
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 33269
33258: POP
// bc_type := b_ext_track ; 23 :
33259: LD_ADDR_OWVAR 42
33263: PUSH
33264: LD_INT 16
33266: ST_TO_ADDR
33267: GO 33498
33269: LD_INT 23
33271: DOUBLE
33272: EQUAL
33273: IFTRUE 33277
33275: GO 33288
33277: POP
// bc_type := b_ext_laser ; 24 :
33278: LD_ADDR_OWVAR 42
33282: PUSH
33283: LD_INT 25
33285: ST_TO_ADDR
33286: GO 33498
33288: LD_INT 24
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33307
33296: POP
// bc_type := b_control_tower ; 25 :
33297: LD_ADDR_OWVAR 42
33301: PUSH
33302: LD_INT 36
33304: ST_TO_ADDR
33305: GO 33498
33307: LD_INT 25
33309: DOUBLE
33310: EQUAL
33311: IFTRUE 33315
33313: GO 33326
33315: POP
// bc_type := b_breastwork ; 26 :
33316: LD_ADDR_OWVAR 42
33320: PUSH
33321: LD_INT 31
33323: ST_TO_ADDR
33324: GO 33498
33326: LD_INT 26
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33334
33332: GO 33345
33334: POP
// bc_type := b_bunker ; 27 :
33335: LD_ADDR_OWVAR 42
33339: PUSH
33340: LD_INT 32
33342: ST_TO_ADDR
33343: GO 33498
33345: LD_INT 27
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33364
33353: POP
// bc_type := b_turret ; 28 :
33354: LD_ADDR_OWVAR 42
33358: PUSH
33359: LD_INT 33
33361: ST_TO_ADDR
33362: GO 33498
33364: LD_INT 28
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33383
33372: POP
// bc_type := b_armoury ; 29 :
33373: LD_ADDR_OWVAR 42
33377: PUSH
33378: LD_INT 4
33380: ST_TO_ADDR
33381: GO 33498
33383: LD_INT 29
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33391
33389: GO 33402
33391: POP
// bc_type := b_barracks ; 30 :
33392: LD_ADDR_OWVAR 42
33396: PUSH
33397: LD_INT 5
33399: ST_TO_ADDR
33400: GO 33498
33402: LD_INT 30
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33410
33408: GO 33421
33410: POP
// bc_type := b_solar_power ; 31 :
33411: LD_ADDR_OWVAR 42
33415: PUSH
33416: LD_INT 27
33418: ST_TO_ADDR
33419: GO 33498
33421: LD_INT 31
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33440
33429: POP
// bc_type := b_oil_power ; 32 :
33430: LD_ADDR_OWVAR 42
33434: PUSH
33435: LD_INT 26
33437: ST_TO_ADDR
33438: GO 33498
33440: LD_INT 32
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33459
33448: POP
// bc_type := b_siberite_power ; 33 :
33449: LD_ADDR_OWVAR 42
33453: PUSH
33454: LD_INT 28
33456: ST_TO_ADDR
33457: GO 33498
33459: LD_INT 33
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33478
33467: POP
// bc_type := b_oil_mine ; 34 :
33468: LD_ADDR_OWVAR 42
33472: PUSH
33473: LD_INT 29
33475: ST_TO_ADDR
33476: GO 33498
33478: LD_INT 34
33480: DOUBLE
33481: EQUAL
33482: IFTRUE 33486
33484: GO 33497
33486: POP
// bc_type := b_siberite_mine ; end ;
33487: LD_ADDR_OWVAR 42
33491: PUSH
33492: LD_INT 30
33494: ST_TO_ADDR
33495: GO 33498
33497: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33498: LD_ADDR_VAR 0 8
33502: PUSH
33503: LD_VAR 0 5
33507: PPUSH
33508: LD_VAR 0 6
33512: PPUSH
33513: LD_VAR 0 3
33517: PPUSH
33518: CALL_OW 47
33522: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33523: LD_OWVAR 42
33527: PUSH
33528: LD_INT 32
33530: PUSH
33531: LD_INT 33
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: IN
33538: IFFALSE 33554
// PlaceWeaponTurret ( b , weapon ) ;
33540: LD_VAR 0 8
33544: PPUSH
33545: LD_VAR 0 4
33549: PPUSH
33550: CALL_OW 431
// end ;
33554: LD_VAR 0 7
33558: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33559: LD_INT 0
33561: PPUSH
33562: PPUSH
33563: PPUSH
33564: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33565: LD_ADDR_VAR 0 4
33569: PUSH
33570: LD_INT 22
33572: PUSH
33573: LD_OWVAR 2
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: LD_INT 30
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 30
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 69
33618: ST_TO_ADDR
// if not tmp then
33619: LD_VAR 0 4
33623: NOT
33624: IFFALSE 33628
// exit ;
33626: GO 33687
// for i in tmp do
33628: LD_ADDR_VAR 0 2
33632: PUSH
33633: LD_VAR 0 4
33637: PUSH
33638: FOR_IN
33639: IFFALSE 33685
// for j = 1 to 3 do
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: DOUBLE
33647: LD_INT 1
33649: DEC
33650: ST_TO_ADDR
33651: LD_INT 3
33653: PUSH
33654: FOR_TO
33655: IFFALSE 33681
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33657: LD_VAR 0 2
33661: PPUSH
33662: CALL_OW 274
33666: PPUSH
33667: LD_VAR 0 3
33671: PPUSH
33672: LD_INT 99999
33674: PPUSH
33675: CALL_OW 277
33679: GO 33654
33681: POP
33682: POP
33683: GO 33638
33685: POP
33686: POP
// end ;
33687: LD_VAR 0 1
33691: RET
// export function hHackSetLevel10 ; var i , j ; begin
33692: LD_INT 0
33694: PPUSH
33695: PPUSH
33696: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33697: LD_ADDR_VAR 0 2
33701: PUSH
33702: LD_INT 21
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PPUSH
33712: CALL_OW 69
33716: PUSH
33717: FOR_IN
33718: IFFALSE 33770
// if IsSelected ( i ) then
33720: LD_VAR 0 2
33724: PPUSH
33725: CALL_OW 306
33729: IFFALSE 33768
// begin for j := 1 to 4 do
33731: LD_ADDR_VAR 0 3
33735: PUSH
33736: DOUBLE
33737: LD_INT 1
33739: DEC
33740: ST_TO_ADDR
33741: LD_INT 4
33743: PUSH
33744: FOR_TO
33745: IFFALSE 33766
// SetSkill ( i , j , 10 ) ;
33747: LD_VAR 0 2
33751: PPUSH
33752: LD_VAR 0 3
33756: PPUSH
33757: LD_INT 10
33759: PPUSH
33760: CALL_OW 237
33764: GO 33744
33766: POP
33767: POP
// end ;
33768: GO 33717
33770: POP
33771: POP
// end ;
33772: LD_VAR 0 1
33776: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33777: LD_INT 0
33779: PPUSH
33780: PPUSH
33781: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33782: LD_ADDR_VAR 0 2
33786: PUSH
33787: LD_INT 22
33789: PUSH
33790: LD_OWVAR 2
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 21
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PPUSH
33813: CALL_OW 69
33817: PUSH
33818: FOR_IN
33819: IFFALSE 33860
// begin for j := 1 to 4 do
33821: LD_ADDR_VAR 0 3
33825: PUSH
33826: DOUBLE
33827: LD_INT 1
33829: DEC
33830: ST_TO_ADDR
33831: LD_INT 4
33833: PUSH
33834: FOR_TO
33835: IFFALSE 33856
// SetSkill ( i , j , 10 ) ;
33837: LD_VAR 0 2
33841: PPUSH
33842: LD_VAR 0 3
33846: PPUSH
33847: LD_INT 10
33849: PPUSH
33850: CALL_OW 237
33854: GO 33834
33856: POP
33857: POP
// end ;
33858: GO 33818
33860: POP
33861: POP
// end ;
33862: LD_VAR 0 1
33866: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33867: LD_INT 0
33869: PPUSH
// uc_side := your_side ;
33870: LD_ADDR_OWVAR 20
33874: PUSH
33875: LD_OWVAR 2
33879: ST_TO_ADDR
// uc_nation := nation ;
33880: LD_ADDR_OWVAR 21
33884: PUSH
33885: LD_VAR 0 1
33889: ST_TO_ADDR
// InitHc ;
33890: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33894: LD_INT 0
33896: PPUSH
33897: LD_VAR 0 2
33901: PPUSH
33902: LD_VAR 0 3
33906: PPUSH
33907: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33911: LD_VAR 0 4
33915: PPUSH
33916: LD_VAR 0 5
33920: PPUSH
33921: CALL_OW 428
33925: PUSH
33926: LD_INT 0
33928: EQUAL
33929: IFFALSE 33953
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33931: CALL_OW 44
33935: PPUSH
33936: LD_VAR 0 4
33940: PPUSH
33941: LD_VAR 0 5
33945: PPUSH
33946: LD_INT 1
33948: PPUSH
33949: CALL_OW 48
// end ;
33953: LD_VAR 0 6
33957: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33958: LD_INT 0
33960: PPUSH
33961: PPUSH
// uc_side := your_side ;
33962: LD_ADDR_OWVAR 20
33966: PUSH
33967: LD_OWVAR 2
33971: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33972: LD_VAR 0 1
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: LD_INT 2
33982: PUSH
33983: LD_INT 3
33985: PUSH
33986: LD_INT 4
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: IN
33999: IFFALSE 34011
// uc_nation := nation_american else
34001: LD_ADDR_OWVAR 21
34005: PUSH
34006: LD_INT 1
34008: ST_TO_ADDR
34009: GO 34054
// if chassis in [ 11 , 12 , 13 , 14 ] then
34011: LD_VAR 0 1
34015: PUSH
34016: LD_INT 11
34018: PUSH
34019: LD_INT 12
34021: PUSH
34022: LD_INT 13
34024: PUSH
34025: LD_INT 14
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: IN
34034: IFFALSE 34046
// uc_nation := nation_arabian else
34036: LD_ADDR_OWVAR 21
34040: PUSH
34041: LD_INT 2
34043: ST_TO_ADDR
34044: GO 34054
// uc_nation := nation_russian ;
34046: LD_ADDR_OWVAR 21
34050: PUSH
34051: LD_INT 3
34053: ST_TO_ADDR
// vc_chassis := chassis ;
34054: LD_ADDR_OWVAR 37
34058: PUSH
34059: LD_VAR 0 1
34063: ST_TO_ADDR
// vc_engine := engine ;
34064: LD_ADDR_OWVAR 39
34068: PUSH
34069: LD_VAR 0 2
34073: ST_TO_ADDR
// vc_control := control ;
34074: LD_ADDR_OWVAR 38
34078: PUSH
34079: LD_VAR 0 3
34083: ST_TO_ADDR
// vc_weapon := weapon ;
34084: LD_ADDR_OWVAR 40
34088: PUSH
34089: LD_VAR 0 4
34093: ST_TO_ADDR
// un := CreateVehicle ;
34094: LD_ADDR_VAR 0 8
34098: PUSH
34099: CALL_OW 45
34103: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34104: LD_VAR 0 8
34108: PPUSH
34109: LD_INT 0
34111: PPUSH
34112: LD_INT 5
34114: PPUSH
34115: CALL_OW 12
34119: PPUSH
34120: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34124: LD_VAR 0 8
34128: PPUSH
34129: LD_VAR 0 5
34133: PPUSH
34134: LD_VAR 0 6
34138: PPUSH
34139: LD_INT 1
34141: PPUSH
34142: CALL_OW 48
// end ;
34146: LD_VAR 0 7
34150: RET
// export hInvincible ; every 1 do
34151: GO 34153
34153: DISABLE
// hInvincible := [ ] ;
34154: LD_ADDR_EXP 109
34158: PUSH
34159: EMPTY
34160: ST_TO_ADDR
34161: END
// every 10 do var i ;
34162: GO 34164
34164: DISABLE
34165: LD_INT 0
34167: PPUSH
// begin enable ;
34168: ENABLE
// if not hInvincible then
34169: LD_EXP 109
34173: NOT
34174: IFFALSE 34178
// exit ;
34176: GO 34222
// for i in hInvincible do
34178: LD_ADDR_VAR 0 1
34182: PUSH
34183: LD_EXP 109
34187: PUSH
34188: FOR_IN
34189: IFFALSE 34220
// if GetLives ( i ) < 1000 then
34191: LD_VAR 0 1
34195: PPUSH
34196: CALL_OW 256
34200: PUSH
34201: LD_INT 1000
34203: LESS
34204: IFFALSE 34218
// SetLives ( i , 1000 ) ;
34206: LD_VAR 0 1
34210: PPUSH
34211: LD_INT 1000
34213: PPUSH
34214: CALL_OW 234
34218: GO 34188
34220: POP
34221: POP
// end ;
34222: PPOPN 1
34224: END
// export function hHackInvincible ; var i ; begin
34225: LD_INT 0
34227: PPUSH
34228: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34229: LD_ADDR_VAR 0 2
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: LD_INT 21
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 21
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: PPUSH
34262: CALL_OW 69
34266: PUSH
34267: FOR_IN
34268: IFFALSE 34329
// if IsSelected ( i ) then
34270: LD_VAR 0 2
34274: PPUSH
34275: CALL_OW 306
34279: IFFALSE 34327
// begin if i in hInvincible then
34281: LD_VAR 0 2
34285: PUSH
34286: LD_EXP 109
34290: IN
34291: IFFALSE 34311
// hInvincible := hInvincible diff i else
34293: LD_ADDR_EXP 109
34297: PUSH
34298: LD_EXP 109
34302: PUSH
34303: LD_VAR 0 2
34307: DIFF
34308: ST_TO_ADDR
34309: GO 34327
// hInvincible := hInvincible union i ;
34311: LD_ADDR_EXP 109
34315: PUSH
34316: LD_EXP 109
34320: PUSH
34321: LD_VAR 0 2
34325: UNION
34326: ST_TO_ADDR
// end ;
34327: GO 34267
34329: POP
34330: POP
// end ;
34331: LD_VAR 0 1
34335: RET
// export function hHackInvisible ; var i , j ; begin
34336: LD_INT 0
34338: PPUSH
34339: PPUSH
34340: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34341: LD_ADDR_VAR 0 2
34345: PUSH
34346: LD_INT 21
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PPUSH
34356: CALL_OW 69
34360: PUSH
34361: FOR_IN
34362: IFFALSE 34386
// if IsSelected ( i ) then
34364: LD_VAR 0 2
34368: PPUSH
34369: CALL_OW 306
34373: IFFALSE 34384
// ComForceInvisible ( i ) ;
34375: LD_VAR 0 2
34379: PPUSH
34380: CALL_OW 496
34384: GO 34361
34386: POP
34387: POP
// end ;
34388: LD_VAR 0 1
34392: RET
// export function hHackChangeYourSide ; begin
34393: LD_INT 0
34395: PPUSH
// if your_side = 8 then
34396: LD_OWVAR 2
34400: PUSH
34401: LD_INT 8
34403: EQUAL
34404: IFFALSE 34416
// your_side := 0 else
34406: LD_ADDR_OWVAR 2
34410: PUSH
34411: LD_INT 0
34413: ST_TO_ADDR
34414: GO 34430
// your_side := your_side + 1 ;
34416: LD_ADDR_OWVAR 2
34420: PUSH
34421: LD_OWVAR 2
34425: PUSH
34426: LD_INT 1
34428: PLUS
34429: ST_TO_ADDR
// end ;
34430: LD_VAR 0 1
34434: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34435: LD_INT 0
34437: PPUSH
34438: PPUSH
34439: PPUSH
// for i in all_units do
34440: LD_ADDR_VAR 0 2
34444: PUSH
34445: LD_OWVAR 3
34449: PUSH
34450: FOR_IN
34451: IFFALSE 34529
// if IsSelected ( i ) then
34453: LD_VAR 0 2
34457: PPUSH
34458: CALL_OW 306
34462: IFFALSE 34527
// begin j := GetSide ( i ) ;
34464: LD_ADDR_VAR 0 3
34468: PUSH
34469: LD_VAR 0 2
34473: PPUSH
34474: CALL_OW 255
34478: ST_TO_ADDR
// if j = 8 then
34479: LD_VAR 0 3
34483: PUSH
34484: LD_INT 8
34486: EQUAL
34487: IFFALSE 34499
// j := 0 else
34489: LD_ADDR_VAR 0 3
34493: PUSH
34494: LD_INT 0
34496: ST_TO_ADDR
34497: GO 34513
// j := j + 1 ;
34499: LD_ADDR_VAR 0 3
34503: PUSH
34504: LD_VAR 0 3
34508: PUSH
34509: LD_INT 1
34511: PLUS
34512: ST_TO_ADDR
// SetSide ( i , j ) ;
34513: LD_VAR 0 2
34517: PPUSH
34518: LD_VAR 0 3
34522: PPUSH
34523: CALL_OW 235
// end ;
34527: GO 34450
34529: POP
34530: POP
// end ;
34531: LD_VAR 0 1
34535: RET
// export function hHackFog ; begin
34536: LD_INT 0
34538: PPUSH
// FogOff ( true ) ;
34539: LD_INT 1
34541: PPUSH
34542: CALL_OW 344
// end ;
34546: LD_VAR 0 1
34550: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34551: LD_INT 0
34553: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34554: LD_VAR 0 1
34558: PPUSH
34559: LD_VAR 0 2
34563: PPUSH
34564: LD_VAR 0 3
34568: PPUSH
34569: LD_INT 1
34571: PPUSH
34572: LD_INT 1
34574: PPUSH
34575: CALL_OW 483
// CenterOnXY ( x , y ) ;
34579: LD_VAR 0 2
34583: PPUSH
34584: LD_VAR 0 3
34588: PPUSH
34589: CALL_OW 84
// end ;
34593: LD_VAR 0 4
34597: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34598: LD_INT 0
34600: PPUSH
34601: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34602: LD_VAR 0 1
34606: NOT
34607: PUSH
34608: LD_VAR 0 2
34612: PPUSH
34613: LD_VAR 0 3
34617: PPUSH
34618: CALL_OW 488
34622: NOT
34623: OR
34624: PUSH
34625: LD_VAR 0 1
34629: PPUSH
34630: CALL_OW 266
34634: PUSH
34635: LD_INT 3
34637: NONEQUAL
34638: PUSH
34639: LD_VAR 0 1
34643: PPUSH
34644: CALL_OW 247
34648: PUSH
34649: LD_INT 1
34651: EQUAL
34652: NOT
34653: AND
34654: OR
34655: IFFALSE 34659
// exit ;
34657: GO 34808
// if GetType ( factory ) = unit_human then
34659: LD_VAR 0 1
34663: PPUSH
34664: CALL_OW 247
34668: PUSH
34669: LD_INT 1
34671: EQUAL
34672: IFFALSE 34689
// factory := IsInUnit ( factory ) ;
34674: LD_ADDR_VAR 0 1
34678: PUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: CALL_OW 310
34688: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34689: LD_VAR 0 1
34693: PPUSH
34694: CALL_OW 266
34698: PUSH
34699: LD_INT 3
34701: NONEQUAL
34702: IFFALSE 34706
// exit ;
34704: GO 34808
// if HexInfo ( x , y ) = factory then
34706: LD_VAR 0 2
34710: PPUSH
34711: LD_VAR 0 3
34715: PPUSH
34716: CALL_OW 428
34720: PUSH
34721: LD_VAR 0 1
34725: EQUAL
34726: IFFALSE 34753
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34728: LD_ADDR_EXP 110
34732: PUSH
34733: LD_EXP 110
34737: PPUSH
34738: LD_VAR 0 1
34742: PPUSH
34743: LD_INT 0
34745: PPUSH
34746: CALL_OW 1
34750: ST_TO_ADDR
34751: GO 34804
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34753: LD_ADDR_EXP 110
34757: PUSH
34758: LD_EXP 110
34762: PPUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: CALL_OW 255
34777: PUSH
34778: LD_VAR 0 1
34782: PUSH
34783: LD_VAR 0 2
34787: PUSH
34788: LD_VAR 0 3
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: PPUSH
34799: CALL_OW 1
34803: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34804: CALL 34813 0 0
// end ;
34808: LD_VAR 0 4
34812: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34813: LD_INT 0
34815: PPUSH
34816: PPUSH
34817: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34818: LD_STRING resetFactoryWaypoint();
34820: PPUSH
34821: CALL_OW 559
// if factoryWaypoints then
34825: LD_EXP 110
34829: IFFALSE 34955
// begin list := PrepareArray ( factoryWaypoints ) ;
34831: LD_ADDR_VAR 0 3
34835: PUSH
34836: LD_EXP 110
34840: PPUSH
34841: CALL 82263 0 1
34845: ST_TO_ADDR
// for i := 1 to list do
34846: LD_ADDR_VAR 0 2
34850: PUSH
34851: DOUBLE
34852: LD_INT 1
34854: DEC
34855: ST_TO_ADDR
34856: LD_VAR 0 3
34860: PUSH
34861: FOR_TO
34862: IFFALSE 34953
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34864: LD_STRING setFactoryWaypointXY(
34866: PUSH
34867: LD_VAR 0 3
34871: PUSH
34872: LD_VAR 0 2
34876: ARRAY
34877: PUSH
34878: LD_INT 1
34880: ARRAY
34881: STR
34882: PUSH
34883: LD_STRING ,
34885: STR
34886: PUSH
34887: LD_VAR 0 3
34891: PUSH
34892: LD_VAR 0 2
34896: ARRAY
34897: PUSH
34898: LD_INT 2
34900: ARRAY
34901: STR
34902: PUSH
34903: LD_STRING ,
34905: STR
34906: PUSH
34907: LD_VAR 0 3
34911: PUSH
34912: LD_VAR 0 2
34916: ARRAY
34917: PUSH
34918: LD_INT 3
34920: ARRAY
34921: STR
34922: PUSH
34923: LD_STRING ,
34925: STR
34926: PUSH
34927: LD_VAR 0 3
34931: PUSH
34932: LD_VAR 0 2
34936: ARRAY
34937: PUSH
34938: LD_INT 4
34940: ARRAY
34941: STR
34942: PUSH
34943: LD_STRING )
34945: STR
34946: PPUSH
34947: CALL_OW 559
34951: GO 34861
34953: POP
34954: POP
// end ; end ;
34955: LD_VAR 0 1
34959: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34960: LD_INT 0
34962: PPUSH
// if HexInfo ( x , y ) = warehouse then
34963: LD_VAR 0 2
34967: PPUSH
34968: LD_VAR 0 3
34972: PPUSH
34973: CALL_OW 428
34977: PUSH
34978: LD_VAR 0 1
34982: EQUAL
34983: IFFALSE 35010
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34985: LD_ADDR_EXP 111
34989: PUSH
34990: LD_EXP 111
34994: PPUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: LD_INT 0
35002: PPUSH
35003: CALL_OW 1
35007: ST_TO_ADDR
35008: GO 35061
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35010: LD_ADDR_EXP 111
35014: PUSH
35015: LD_EXP 111
35019: PPUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: LD_VAR 0 1
35029: PPUSH
35030: CALL_OW 255
35034: PUSH
35035: LD_VAR 0 1
35039: PUSH
35040: LD_VAR 0 2
35044: PUSH
35045: LD_VAR 0 3
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: PPUSH
35056: CALL_OW 1
35060: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35061: CALL 35070 0 0
// end ;
35065: LD_VAR 0 4
35069: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35070: LD_INT 0
35072: PPUSH
35073: PPUSH
35074: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35075: LD_STRING resetWarehouseGatheringPoints();
35077: PPUSH
35078: CALL_OW 559
// if warehouseGatheringPoints then
35082: LD_EXP 111
35086: IFFALSE 35212
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_EXP 111
35097: PPUSH
35098: CALL 82263 0 1
35102: ST_TO_ADDR
// for i := 1 to list do
35103: LD_ADDR_VAR 0 2
35107: PUSH
35108: DOUBLE
35109: LD_INT 1
35111: DEC
35112: ST_TO_ADDR
35113: LD_VAR 0 3
35117: PUSH
35118: FOR_TO
35119: IFFALSE 35210
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35121: LD_STRING setWarehouseGatheringPointXY(
35123: PUSH
35124: LD_VAR 0 3
35128: PUSH
35129: LD_VAR 0 2
35133: ARRAY
35134: PUSH
35135: LD_INT 1
35137: ARRAY
35138: STR
35139: PUSH
35140: LD_STRING ,
35142: STR
35143: PUSH
35144: LD_VAR 0 3
35148: PUSH
35149: LD_VAR 0 2
35153: ARRAY
35154: PUSH
35155: LD_INT 2
35157: ARRAY
35158: STR
35159: PUSH
35160: LD_STRING ,
35162: STR
35163: PUSH
35164: LD_VAR 0 3
35168: PUSH
35169: LD_VAR 0 2
35173: ARRAY
35174: PUSH
35175: LD_INT 3
35177: ARRAY
35178: STR
35179: PUSH
35180: LD_STRING ,
35182: STR
35183: PUSH
35184: LD_VAR 0 3
35188: PUSH
35189: LD_VAR 0 2
35193: ARRAY
35194: PUSH
35195: LD_INT 4
35197: ARRAY
35198: STR
35199: PUSH
35200: LD_STRING )
35202: STR
35203: PPUSH
35204: CALL_OW 559
35208: GO 35118
35210: POP
35211: POP
// end ; end ;
35212: LD_VAR 0 1
35216: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35217: LD_EXP 111
35221: IFFALSE 35906
35223: GO 35225
35225: DISABLE
35226: LD_INT 0
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
// begin enable ;
35237: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35238: LD_ADDR_VAR 0 3
35242: PUSH
35243: LD_EXP 111
35247: PPUSH
35248: CALL 82263 0 1
35252: ST_TO_ADDR
// if not list then
35253: LD_VAR 0 3
35257: NOT
35258: IFFALSE 35262
// exit ;
35260: GO 35906
// for i := 1 to list do
35262: LD_ADDR_VAR 0 1
35266: PUSH
35267: DOUBLE
35268: LD_INT 1
35270: DEC
35271: ST_TO_ADDR
35272: LD_VAR 0 3
35276: PUSH
35277: FOR_TO
35278: IFFALSE 35904
// begin depot := list [ i ] [ 2 ] ;
35280: LD_ADDR_VAR 0 8
35284: PUSH
35285: LD_VAR 0 3
35289: PUSH
35290: LD_VAR 0 1
35294: ARRAY
35295: PUSH
35296: LD_INT 2
35298: ARRAY
35299: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35300: LD_ADDR_VAR 0 5
35304: PUSH
35305: LD_VAR 0 3
35309: PUSH
35310: LD_VAR 0 1
35314: ARRAY
35315: PUSH
35316: LD_INT 1
35318: ARRAY
35319: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35320: LD_VAR 0 8
35324: PPUSH
35325: CALL_OW 301
35329: PUSH
35330: LD_VAR 0 5
35334: PUSH
35335: LD_VAR 0 8
35339: PPUSH
35340: CALL_OW 255
35344: NONEQUAL
35345: OR
35346: IFFALSE 35375
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35348: LD_ADDR_EXP 111
35352: PUSH
35353: LD_EXP 111
35357: PPUSH
35358: LD_VAR 0 8
35362: PPUSH
35363: LD_INT 0
35365: PPUSH
35366: CALL_OW 1
35370: ST_TO_ADDR
// exit ;
35371: POP
35372: POP
35373: GO 35906
// end ; x := list [ i ] [ 3 ] ;
35375: LD_ADDR_VAR 0 6
35379: PUSH
35380: LD_VAR 0 3
35384: PUSH
35385: LD_VAR 0 1
35389: ARRAY
35390: PUSH
35391: LD_INT 3
35393: ARRAY
35394: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35395: LD_ADDR_VAR 0 7
35399: PUSH
35400: LD_VAR 0 3
35404: PUSH
35405: LD_VAR 0 1
35409: ARRAY
35410: PUSH
35411: LD_INT 4
35413: ARRAY
35414: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35415: LD_ADDR_VAR 0 9
35419: PUSH
35420: LD_VAR 0 6
35424: PPUSH
35425: LD_VAR 0 7
35429: PPUSH
35430: LD_INT 16
35432: PPUSH
35433: CALL 80851 0 3
35437: ST_TO_ADDR
// if not cratesNearbyPoint then
35438: LD_VAR 0 9
35442: NOT
35443: IFFALSE 35449
// exit ;
35445: POP
35446: POP
35447: GO 35906
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35449: LD_ADDR_VAR 0 4
35453: PUSH
35454: LD_INT 22
35456: PUSH
35457: LD_VAR 0 5
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: LD_INT 60
35471: PUSH
35472: EMPTY
35473: LIST
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 91
35481: PUSH
35482: LD_VAR 0 8
35486: PUSH
35487: LD_INT 6
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: LD_INT 25
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 25
35510: PUSH
35511: LD_INT 16
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: PPUSH
35529: CALL_OW 69
35533: PUSH
35534: LD_VAR 0 8
35538: PPUSH
35539: CALL_OW 313
35543: PPUSH
35544: LD_INT 3
35546: PUSH
35547: LD_INT 60
35549: PUSH
35550: EMPTY
35551: LIST
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 2
35559: PUSH
35560: LD_INT 25
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 25
35572: PUSH
35573: LD_INT 16
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PPUSH
35589: CALL_OW 72
35593: UNION
35594: ST_TO_ADDR
// if tmp then
35595: LD_VAR 0 4
35599: IFFALSE 35679
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35601: LD_ADDR_VAR 0 4
35605: PUSH
35606: LD_VAR 0 4
35610: PPUSH
35611: LD_INT 3
35613: PPUSH
35614: CALL 78820 0 2
35618: ST_TO_ADDR
// for j in tmp do
35619: LD_ADDR_VAR 0 2
35623: PUSH
35624: LD_VAR 0 4
35628: PUSH
35629: FOR_IN
35630: IFFALSE 35673
// begin if IsInUnit ( j ) then
35632: LD_VAR 0 2
35636: PPUSH
35637: CALL_OW 310
35641: IFFALSE 35652
// ComExit ( j ) ;
35643: LD_VAR 0 2
35647: PPUSH
35648: CALL 78903 0 1
// AddComCollect ( j , x , y ) ;
35652: LD_VAR 0 2
35656: PPUSH
35657: LD_VAR 0 6
35661: PPUSH
35662: LD_VAR 0 7
35666: PPUSH
35667: CALL_OW 177
// end ;
35671: GO 35629
35673: POP
35674: POP
// exit ;
35675: POP
35676: POP
35677: GO 35906
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35679: LD_ADDR_VAR 0 4
35683: PUSH
35684: LD_INT 22
35686: PUSH
35687: LD_VAR 0 5
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 91
35698: PUSH
35699: LD_VAR 0 8
35703: PUSH
35704: LD_INT 8
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: LD_INT 34
35717: PUSH
35718: LD_INT 12
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 34
35727: PUSH
35728: LD_INT 51
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 34
35737: PUSH
35738: LD_INT 32
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 34
35747: PUSH
35748: LD_INT 89
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: PPUSH
35767: CALL_OW 69
35771: ST_TO_ADDR
// if tmp then
35772: LD_VAR 0 4
35776: IFFALSE 35902
// begin for j in tmp do
35778: LD_ADDR_VAR 0 2
35782: PUSH
35783: LD_VAR 0 4
35787: PUSH
35788: FOR_IN
35789: IFFALSE 35900
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35791: LD_VAR 0 2
35795: PPUSH
35796: CALL_OW 262
35800: PUSH
35801: LD_INT 3
35803: EQUAL
35804: PUSH
35805: LD_VAR 0 2
35809: PPUSH
35810: CALL_OW 261
35814: PUSH
35815: LD_INT 20
35817: GREATER
35818: OR
35819: PUSH
35820: LD_VAR 0 2
35824: PPUSH
35825: CALL_OW 314
35829: NOT
35830: AND
35831: PUSH
35832: LD_VAR 0 2
35836: PPUSH
35837: CALL_OW 263
35841: PUSH
35842: LD_INT 1
35844: NONEQUAL
35845: PUSH
35846: LD_VAR 0 2
35850: PPUSH
35851: CALL_OW 311
35855: OR
35856: AND
35857: IFFALSE 35898
// begin ComCollect ( j , x , y ) ;
35859: LD_VAR 0 2
35863: PPUSH
35864: LD_VAR 0 6
35868: PPUSH
35869: LD_VAR 0 7
35873: PPUSH
35874: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35878: LD_VAR 0 2
35882: PPUSH
35883: LD_VAR 0 8
35887: PPUSH
35888: CALL_OW 172
// exit ;
35892: POP
35893: POP
35894: POP
35895: POP
35896: GO 35906
// end ;
35898: GO 35788
35900: POP
35901: POP
// end ; end ;
35902: GO 35277
35904: POP
35905: POP
// end ; end_of_file
35906: PPOPN 9
35908: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35909: LD_INT 0
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 264
35924: PUSH
35925: LD_INT 91
35927: EQUAL
35928: IFFALSE 36000
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35930: LD_INT 68
35932: PPUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 255
35942: PPUSH
35943: CALL_OW 321
35947: PUSH
35948: LD_INT 2
35950: EQUAL
35951: IFFALSE 35963
// eff := 70 else
35953: LD_ADDR_VAR 0 4
35957: PUSH
35958: LD_INT 70
35960: ST_TO_ADDR
35961: GO 35971
// eff := 30 ;
35963: LD_ADDR_VAR 0 4
35967: PUSH
35968: LD_INT 30
35970: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35971: LD_VAR 0 1
35975: PPUSH
35976: CALL_OW 250
35980: PPUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL_OW 251
35990: PPUSH
35991: LD_VAR 0 4
35995: PPUSH
35996: CALL_OW 495
// end ; end ;
36000: LD_VAR 0 2
36004: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36005: LD_INT 0
36007: PPUSH
// end ;
36008: LD_VAR 0 4
36012: RET
// export function SOS_Command ( cmd ) ; begin
36013: LD_INT 0
36015: PPUSH
// end ;
36016: LD_VAR 0 2
36020: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36021: LD_INT 0
36023: PPUSH
// end ;
36024: LD_VAR 0 6
36028: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36029: LD_INT 0
36031: PPUSH
36032: PPUSH
// if not vehicle or not factory then
36033: LD_VAR 0 1
36037: NOT
36038: PUSH
36039: LD_VAR 0 2
36043: NOT
36044: OR
36045: IFFALSE 36049
// exit ;
36047: GO 36280
// if factoryWaypoints >= factory then
36049: LD_EXP 110
36053: PUSH
36054: LD_VAR 0 2
36058: GREATEREQUAL
36059: IFFALSE 36280
// if factoryWaypoints [ factory ] then
36061: LD_EXP 110
36065: PUSH
36066: LD_VAR 0 2
36070: ARRAY
36071: IFFALSE 36280
// begin if GetControl ( vehicle ) = control_manual then
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 263
36082: PUSH
36083: LD_INT 1
36085: EQUAL
36086: IFFALSE 36167
// begin driver := IsDrivenBy ( vehicle ) ;
36088: LD_ADDR_VAR 0 4
36092: PUSH
36093: LD_VAR 0 1
36097: PPUSH
36098: CALL_OW 311
36102: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36103: LD_VAR 0 4
36107: PPUSH
36108: LD_EXP 110
36112: PUSH
36113: LD_VAR 0 2
36117: ARRAY
36118: PUSH
36119: LD_INT 3
36121: ARRAY
36122: PPUSH
36123: LD_EXP 110
36127: PUSH
36128: LD_VAR 0 2
36132: ARRAY
36133: PUSH
36134: LD_INT 4
36136: ARRAY
36137: PPUSH
36138: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36142: LD_VAR 0 4
36146: PPUSH
36147: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36151: LD_VAR 0 4
36155: PPUSH
36156: LD_VAR 0 2
36160: PPUSH
36161: CALL_OW 180
// end else
36165: GO 36280
// if GetControl ( vehicle ) = control_remote then
36167: LD_VAR 0 1
36171: PPUSH
36172: CALL_OW 263
36176: PUSH
36177: LD_INT 2
36179: EQUAL
36180: IFFALSE 36241
// begin wait ( 0 0$2 ) ;
36182: LD_INT 70
36184: PPUSH
36185: CALL_OW 67
// if Connect ( vehicle ) then
36189: LD_VAR 0 1
36193: PPUSH
36194: CALL 49111 0 1
36198: IFFALSE 36239
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36200: LD_VAR 0 1
36204: PPUSH
36205: LD_EXP 110
36209: PUSH
36210: LD_VAR 0 2
36214: ARRAY
36215: PUSH
36216: LD_INT 3
36218: ARRAY
36219: PPUSH
36220: LD_EXP 110
36224: PUSH
36225: LD_VAR 0 2
36229: ARRAY
36230: PUSH
36231: LD_INT 4
36233: ARRAY
36234: PPUSH
36235: CALL_OW 171
// end else
36239: GO 36280
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36241: LD_VAR 0 1
36245: PPUSH
36246: LD_EXP 110
36250: PUSH
36251: LD_VAR 0 2
36255: ARRAY
36256: PUSH
36257: LD_INT 3
36259: ARRAY
36260: PPUSH
36261: LD_EXP 110
36265: PUSH
36266: LD_VAR 0 2
36270: ARRAY
36271: PUSH
36272: LD_INT 4
36274: ARRAY
36275: PPUSH
36276: CALL_OW 171
// end ; end ;
36280: LD_VAR 0 3
36284: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36285: LD_INT 0
36287: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36288: LD_VAR 0 1
36292: PUSH
36293: LD_INT 250
36295: EQUAL
36296: PUSH
36297: LD_VAR 0 2
36301: PPUSH
36302: CALL_OW 264
36306: PUSH
36307: LD_INT 81
36309: EQUAL
36310: AND
36311: IFFALSE 36332
// MinerPlaceMine ( unit , x , y ) ;
36313: LD_VAR 0 2
36317: PPUSH
36318: LD_VAR 0 4
36322: PPUSH
36323: LD_VAR 0 5
36327: PPUSH
36328: CALL 39322 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36332: LD_VAR 0 1
36336: PUSH
36337: LD_INT 251
36339: EQUAL
36340: PUSH
36341: LD_VAR 0 2
36345: PPUSH
36346: CALL_OW 264
36350: PUSH
36351: LD_INT 81
36353: EQUAL
36354: AND
36355: IFFALSE 36376
// MinerDetonateMine ( unit , x , y ) ;
36357: LD_VAR 0 2
36361: PPUSH
36362: LD_VAR 0 4
36366: PPUSH
36367: LD_VAR 0 5
36371: PPUSH
36372: CALL 39597 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36376: LD_VAR 0 1
36380: PUSH
36381: LD_INT 252
36383: EQUAL
36384: PUSH
36385: LD_VAR 0 2
36389: PPUSH
36390: CALL_OW 264
36394: PUSH
36395: LD_INT 81
36397: EQUAL
36398: AND
36399: IFFALSE 36420
// MinerCreateMinefield ( unit , x , y ) ;
36401: LD_VAR 0 2
36405: PPUSH
36406: LD_VAR 0 4
36410: PPUSH
36411: LD_VAR 0 5
36415: PPUSH
36416: CALL 40014 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36420: LD_VAR 0 1
36424: PUSH
36425: LD_INT 253
36427: EQUAL
36428: PUSH
36429: LD_VAR 0 2
36433: PPUSH
36434: CALL_OW 257
36438: PUSH
36439: LD_INT 5
36441: EQUAL
36442: AND
36443: IFFALSE 36464
// ComBinocular ( unit , x , y ) ;
36445: LD_VAR 0 2
36449: PPUSH
36450: LD_VAR 0 4
36454: PPUSH
36455: LD_VAR 0 5
36459: PPUSH
36460: CALL 40383 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36464: LD_VAR 0 1
36468: PUSH
36469: LD_INT 254
36471: EQUAL
36472: PUSH
36473: LD_VAR 0 2
36477: PPUSH
36478: CALL_OW 264
36482: PUSH
36483: LD_INT 99
36485: EQUAL
36486: AND
36487: PUSH
36488: LD_VAR 0 3
36492: PPUSH
36493: CALL_OW 263
36497: PUSH
36498: LD_INT 3
36500: EQUAL
36501: AND
36502: IFFALSE 36518
// HackDestroyVehicle ( unit , selectedUnit ) ;
36504: LD_VAR 0 2
36508: PPUSH
36509: LD_VAR 0 3
36513: PPUSH
36514: CALL 38686 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36518: LD_VAR 0 1
36522: PUSH
36523: LD_INT 255
36525: EQUAL
36526: PUSH
36527: LD_VAR 0 2
36531: PPUSH
36532: CALL_OW 264
36536: PUSH
36537: LD_INT 14
36539: PUSH
36540: LD_INT 53
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: IN
36547: AND
36548: PUSH
36549: LD_VAR 0 4
36553: PPUSH
36554: LD_VAR 0 5
36558: PPUSH
36559: CALL_OW 488
36563: AND
36564: IFFALSE 36588
// CutTreeXYR ( unit , x , y , 12 ) ;
36566: LD_VAR 0 2
36570: PPUSH
36571: LD_VAR 0 4
36575: PPUSH
36576: LD_VAR 0 5
36580: PPUSH
36581: LD_INT 12
36583: PPUSH
36584: CALL 36683 0 4
// if cmd = 256 then
36588: LD_VAR 0 1
36592: PUSH
36593: LD_INT 256
36595: EQUAL
36596: IFFALSE 36617
// SetFactoryWaypoint ( unit , x , y ) ;
36598: LD_VAR 0 2
36602: PPUSH
36603: LD_VAR 0 4
36607: PPUSH
36608: LD_VAR 0 5
36612: PPUSH
36613: CALL 34598 0 3
// if cmd = 257 then
36617: LD_VAR 0 1
36621: PUSH
36622: LD_INT 257
36624: EQUAL
36625: IFFALSE 36646
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36627: LD_VAR 0 2
36631: PPUSH
36632: LD_VAR 0 4
36636: PPUSH
36637: LD_VAR 0 5
36641: PPUSH
36642: CALL 34960 0 3
// if cmd = 258 then
36646: LD_VAR 0 1
36650: PUSH
36651: LD_INT 258
36653: EQUAL
36654: IFFALSE 36678
// BurnTreeXYR ( unit , x , y , 8 ) ;
36656: LD_VAR 0 2
36660: PPUSH
36661: LD_VAR 0 4
36665: PPUSH
36666: LD_VAR 0 5
36670: PPUSH
36671: LD_INT 8
36673: PPUSH
36674: CALL 37077 0 4
// end ;
36678: LD_VAR 0 6
36682: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36683: LD_INT 0
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
36690: PPUSH
36691: PPUSH
36692: PPUSH
36693: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36694: LD_VAR 0 1
36698: PPUSH
36699: CALL_OW 302
36703: NOT
36704: PUSH
36705: LD_VAR 0 2
36709: PPUSH
36710: LD_VAR 0 3
36714: PPUSH
36715: CALL_OW 488
36719: NOT
36720: OR
36721: PUSH
36722: LD_VAR 0 4
36726: NOT
36727: OR
36728: IFFALSE 36732
// exit ;
36730: GO 37072
// list := [ ] ;
36732: LD_ADDR_VAR 0 13
36736: PUSH
36737: EMPTY
36738: ST_TO_ADDR
// if x - r < 0 then
36739: LD_VAR 0 2
36743: PUSH
36744: LD_VAR 0 4
36748: MINUS
36749: PUSH
36750: LD_INT 0
36752: LESS
36753: IFFALSE 36765
// min_x := 0 else
36755: LD_ADDR_VAR 0 7
36759: PUSH
36760: LD_INT 0
36762: ST_TO_ADDR
36763: GO 36781
// min_x := x - r ;
36765: LD_ADDR_VAR 0 7
36769: PUSH
36770: LD_VAR 0 2
36774: PUSH
36775: LD_VAR 0 4
36779: MINUS
36780: ST_TO_ADDR
// if y - r < 0 then
36781: LD_VAR 0 3
36785: PUSH
36786: LD_VAR 0 4
36790: MINUS
36791: PUSH
36792: LD_INT 0
36794: LESS
36795: IFFALSE 36807
// min_y := 0 else
36797: LD_ADDR_VAR 0 8
36801: PUSH
36802: LD_INT 0
36804: ST_TO_ADDR
36805: GO 36823
// min_y := y - r ;
36807: LD_ADDR_VAR 0 8
36811: PUSH
36812: LD_VAR 0 3
36816: PUSH
36817: LD_VAR 0 4
36821: MINUS
36822: ST_TO_ADDR
// max_x := x + r ;
36823: LD_ADDR_VAR 0 9
36827: PUSH
36828: LD_VAR 0 2
36832: PUSH
36833: LD_VAR 0 4
36837: PLUS
36838: ST_TO_ADDR
// max_y := y + r ;
36839: LD_ADDR_VAR 0 10
36843: PUSH
36844: LD_VAR 0 3
36848: PUSH
36849: LD_VAR 0 4
36853: PLUS
36854: ST_TO_ADDR
// for _x = min_x to max_x do
36855: LD_ADDR_VAR 0 11
36859: PUSH
36860: DOUBLE
36861: LD_VAR 0 7
36865: DEC
36866: ST_TO_ADDR
36867: LD_VAR 0 9
36871: PUSH
36872: FOR_TO
36873: IFFALSE 36990
// for _y = min_y to max_y do
36875: LD_ADDR_VAR 0 12
36879: PUSH
36880: DOUBLE
36881: LD_VAR 0 8
36885: DEC
36886: ST_TO_ADDR
36887: LD_VAR 0 10
36891: PUSH
36892: FOR_TO
36893: IFFALSE 36986
// begin if not ValidHex ( _x , _y ) then
36895: LD_VAR 0 11
36899: PPUSH
36900: LD_VAR 0 12
36904: PPUSH
36905: CALL_OW 488
36909: NOT
36910: IFFALSE 36914
// continue ;
36912: GO 36892
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36914: LD_VAR 0 11
36918: PPUSH
36919: LD_VAR 0 12
36923: PPUSH
36924: CALL_OW 351
36928: PUSH
36929: LD_VAR 0 11
36933: PPUSH
36934: LD_VAR 0 12
36938: PPUSH
36939: CALL_OW 554
36943: AND
36944: IFFALSE 36984
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36946: LD_ADDR_VAR 0 13
36950: PUSH
36951: LD_VAR 0 13
36955: PPUSH
36956: LD_VAR 0 13
36960: PUSH
36961: LD_INT 1
36963: PLUS
36964: PPUSH
36965: LD_VAR 0 11
36969: PUSH
36970: LD_VAR 0 12
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PPUSH
36979: CALL_OW 2
36983: ST_TO_ADDR
// end ;
36984: GO 36892
36986: POP
36987: POP
36988: GO 36872
36990: POP
36991: POP
// if not list then
36992: LD_VAR 0 13
36996: NOT
36997: IFFALSE 37001
// exit ;
36999: GO 37072
// for i in list do
37001: LD_ADDR_VAR 0 6
37005: PUSH
37006: LD_VAR 0 13
37010: PUSH
37011: FOR_IN
37012: IFFALSE 37070
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37014: LD_VAR 0 1
37018: PPUSH
37019: LD_STRING M
37021: PUSH
37022: LD_VAR 0 6
37026: PUSH
37027: LD_INT 1
37029: ARRAY
37030: PUSH
37031: LD_VAR 0 6
37035: PUSH
37036: LD_INT 2
37038: ARRAY
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: PPUSH
37064: CALL_OW 447
37068: GO 37011
37070: POP
37071: POP
// end ;
37072: LD_VAR 0 5
37076: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37077: LD_INT 0
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
37086: PPUSH
37087: PPUSH
37088: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 302
37098: NOT
37099: PUSH
37100: LD_VAR 0 2
37104: PPUSH
37105: LD_VAR 0 3
37109: PPUSH
37110: CALL_OW 488
37114: NOT
37115: OR
37116: PUSH
37117: LD_VAR 0 4
37121: NOT
37122: OR
37123: IFFALSE 37127
// exit ;
37125: GO 37640
// list := [ ] ;
37127: LD_ADDR_VAR 0 13
37131: PUSH
37132: EMPTY
37133: ST_TO_ADDR
// if x - r < 0 then
37134: LD_VAR 0 2
37138: PUSH
37139: LD_VAR 0 4
37143: MINUS
37144: PUSH
37145: LD_INT 0
37147: LESS
37148: IFFALSE 37160
// min_x := 0 else
37150: LD_ADDR_VAR 0 7
37154: PUSH
37155: LD_INT 0
37157: ST_TO_ADDR
37158: GO 37176
// min_x := x - r ;
37160: LD_ADDR_VAR 0 7
37164: PUSH
37165: LD_VAR 0 2
37169: PUSH
37170: LD_VAR 0 4
37174: MINUS
37175: ST_TO_ADDR
// if y - r < 0 then
37176: LD_VAR 0 3
37180: PUSH
37181: LD_VAR 0 4
37185: MINUS
37186: PUSH
37187: LD_INT 0
37189: LESS
37190: IFFALSE 37202
// min_y := 0 else
37192: LD_ADDR_VAR 0 8
37196: PUSH
37197: LD_INT 0
37199: ST_TO_ADDR
37200: GO 37218
// min_y := y - r ;
37202: LD_ADDR_VAR 0 8
37206: PUSH
37207: LD_VAR 0 3
37211: PUSH
37212: LD_VAR 0 4
37216: MINUS
37217: ST_TO_ADDR
// max_x := x + r ;
37218: LD_ADDR_VAR 0 9
37222: PUSH
37223: LD_VAR 0 2
37227: PUSH
37228: LD_VAR 0 4
37232: PLUS
37233: ST_TO_ADDR
// max_y := y + r ;
37234: LD_ADDR_VAR 0 10
37238: PUSH
37239: LD_VAR 0 3
37243: PUSH
37244: LD_VAR 0 4
37248: PLUS
37249: ST_TO_ADDR
// for _x = min_x to max_x do
37250: LD_ADDR_VAR 0 11
37254: PUSH
37255: DOUBLE
37256: LD_VAR 0 7
37260: DEC
37261: ST_TO_ADDR
37262: LD_VAR 0 9
37266: PUSH
37267: FOR_TO
37268: IFFALSE 37385
// for _y = min_y to max_y do
37270: LD_ADDR_VAR 0 12
37274: PUSH
37275: DOUBLE
37276: LD_VAR 0 8
37280: DEC
37281: ST_TO_ADDR
37282: LD_VAR 0 10
37286: PUSH
37287: FOR_TO
37288: IFFALSE 37381
// begin if not ValidHex ( _x , _y ) then
37290: LD_VAR 0 11
37294: PPUSH
37295: LD_VAR 0 12
37299: PPUSH
37300: CALL_OW 488
37304: NOT
37305: IFFALSE 37309
// continue ;
37307: GO 37287
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37309: LD_VAR 0 11
37313: PPUSH
37314: LD_VAR 0 12
37318: PPUSH
37319: CALL_OW 351
37323: PUSH
37324: LD_VAR 0 11
37328: PPUSH
37329: LD_VAR 0 12
37333: PPUSH
37334: CALL_OW 554
37338: AND
37339: IFFALSE 37379
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37341: LD_ADDR_VAR 0 13
37345: PUSH
37346: LD_VAR 0 13
37350: PPUSH
37351: LD_VAR 0 13
37355: PUSH
37356: LD_INT 1
37358: PLUS
37359: PPUSH
37360: LD_VAR 0 11
37364: PUSH
37365: LD_VAR 0 12
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PPUSH
37374: CALL_OW 2
37378: ST_TO_ADDR
// end ;
37379: GO 37287
37381: POP
37382: POP
37383: GO 37267
37385: POP
37386: POP
// if not list then
37387: LD_VAR 0 13
37391: NOT
37392: IFFALSE 37396
// exit ;
37394: GO 37640
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37396: LD_ADDR_VAR 0 13
37400: PUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: LD_VAR 0 13
37410: PPUSH
37411: LD_INT 1
37413: PPUSH
37414: LD_INT 1
37416: PPUSH
37417: CALL 46253 0 4
37421: ST_TO_ADDR
// ComStop ( flame ) ;
37422: LD_VAR 0 1
37426: PPUSH
37427: CALL_OW 141
// for i in list do
37431: LD_ADDR_VAR 0 6
37435: PUSH
37436: LD_VAR 0 13
37440: PUSH
37441: FOR_IN
37442: IFFALSE 37473
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37444: LD_VAR 0 1
37448: PPUSH
37449: LD_VAR 0 6
37453: PUSH
37454: LD_INT 1
37456: ARRAY
37457: PPUSH
37458: LD_VAR 0 6
37462: PUSH
37463: LD_INT 2
37465: ARRAY
37466: PPUSH
37467: CALL_OW 176
37471: GO 37441
37473: POP
37474: POP
// repeat wait ( 0 0$1 ) ;
37475: LD_INT 35
37477: PPUSH
37478: CALL_OW 67
// task := GetTaskList ( flame ) ;
37482: LD_ADDR_VAR 0 14
37486: PUSH
37487: LD_VAR 0 1
37491: PPUSH
37492: CALL_OW 437
37496: ST_TO_ADDR
// if not task then
37497: LD_VAR 0 14
37501: NOT
37502: IFFALSE 37506
// exit ;
37504: GO 37640
// if task [ 1 ] [ 1 ] <> | then
37506: LD_VAR 0 14
37510: PUSH
37511: LD_INT 1
37513: ARRAY
37514: PUSH
37515: LD_INT 1
37517: ARRAY
37518: PUSH
37519: LD_STRING |
37521: NONEQUAL
37522: IFFALSE 37526
// exit ;
37524: GO 37640
// _x := task [ 1 ] [ 2 ] ;
37526: LD_ADDR_VAR 0 11
37530: PUSH
37531: LD_VAR 0 14
37535: PUSH
37536: LD_INT 1
37538: ARRAY
37539: PUSH
37540: LD_INT 2
37542: ARRAY
37543: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37544: LD_ADDR_VAR 0 12
37548: PUSH
37549: LD_VAR 0 14
37553: PUSH
37554: LD_INT 1
37556: ARRAY
37557: PUSH
37558: LD_INT 3
37560: ARRAY
37561: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37562: LD_VAR 0 11
37566: PPUSH
37567: LD_VAR 0 12
37571: PPUSH
37572: CALL_OW 351
37576: NOT
37577: PUSH
37578: LD_VAR 0 11
37582: PPUSH
37583: LD_VAR 0 12
37587: PPUSH
37588: CALL_OW 554
37592: NOT
37593: OR
37594: IFFALSE 37628
// begin task := Delete ( task , 1 ) ;
37596: LD_ADDR_VAR 0 14
37600: PUSH
37601: LD_VAR 0 14
37605: PPUSH
37606: LD_INT 1
37608: PPUSH
37609: CALL_OW 3
37613: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37614: LD_VAR 0 1
37618: PPUSH
37619: LD_VAR 0 14
37623: PPUSH
37624: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37628: LD_VAR 0 1
37632: PPUSH
37633: CALL_OW 314
37637: NOT
37638: IFFALSE 37475
// end ;
37640: LD_VAR 0 5
37644: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37645: LD_EXP 113
37649: NOT
37650: IFFALSE 37700
37652: GO 37654
37654: DISABLE
// begin initHack := true ;
37655: LD_ADDR_EXP 113
37659: PUSH
37660: LD_INT 1
37662: ST_TO_ADDR
// hackTanks := [ ] ;
37663: LD_ADDR_EXP 114
37667: PUSH
37668: EMPTY
37669: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37670: LD_ADDR_EXP 115
37674: PUSH
37675: EMPTY
37676: ST_TO_ADDR
// hackLimit := 3 ;
37677: LD_ADDR_EXP 116
37681: PUSH
37682: LD_INT 3
37684: ST_TO_ADDR
// hackDist := 12 ;
37685: LD_ADDR_EXP 117
37689: PUSH
37690: LD_INT 12
37692: ST_TO_ADDR
// hackCounter := [ ] ;
37693: LD_ADDR_EXP 118
37697: PUSH
37698: EMPTY
37699: ST_TO_ADDR
// end ;
37700: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37701: LD_EXP 113
37705: PUSH
37706: LD_INT 34
37708: PUSH
37709: LD_INT 99
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PPUSH
37716: CALL_OW 69
37720: AND
37721: IFFALSE 37974
37723: GO 37725
37725: DISABLE
37726: LD_INT 0
37728: PPUSH
37729: PPUSH
// begin enable ;
37730: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37731: LD_ADDR_VAR 0 1
37735: PUSH
37736: LD_INT 34
37738: PUSH
37739: LD_INT 99
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PPUSH
37746: CALL_OW 69
37750: PUSH
37751: FOR_IN
37752: IFFALSE 37972
// begin if not i in hackTanks then
37754: LD_VAR 0 1
37758: PUSH
37759: LD_EXP 114
37763: IN
37764: NOT
37765: IFFALSE 37848
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37767: LD_ADDR_EXP 114
37771: PUSH
37772: LD_EXP 114
37776: PPUSH
37777: LD_EXP 114
37781: PUSH
37782: LD_INT 1
37784: PLUS
37785: PPUSH
37786: LD_VAR 0 1
37790: PPUSH
37791: CALL_OW 1
37795: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37796: LD_ADDR_EXP 115
37800: PUSH
37801: LD_EXP 115
37805: PPUSH
37806: LD_EXP 115
37810: PUSH
37811: LD_INT 1
37813: PLUS
37814: PPUSH
37815: EMPTY
37816: PPUSH
37817: CALL_OW 1
37821: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37822: LD_ADDR_EXP 118
37826: PUSH
37827: LD_EXP 118
37831: PPUSH
37832: LD_EXP 118
37836: PUSH
37837: LD_INT 1
37839: PLUS
37840: PPUSH
37841: EMPTY
37842: PPUSH
37843: CALL_OW 1
37847: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL_OW 302
37857: NOT
37858: IFFALSE 37871
// begin HackUnlinkAll ( i ) ;
37860: LD_VAR 0 1
37864: PPUSH
37865: CALL 37977 0 1
// continue ;
37869: GO 37751
// end ; HackCheckCapturedStatus ( i ) ;
37871: LD_VAR 0 1
37875: PPUSH
37876: CALL 38420 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37880: LD_ADDR_VAR 0 2
37884: PUSH
37885: LD_INT 81
37887: PUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 255
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 33
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 91
37914: PUSH
37915: LD_VAR 0 1
37919: PUSH
37920: LD_EXP 117
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 50
37932: PUSH
37933: EMPTY
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: PPUSH
37942: CALL_OW 69
37946: ST_TO_ADDR
// if not tmp then
37947: LD_VAR 0 2
37951: NOT
37952: IFFALSE 37956
// continue ;
37954: GO 37751
// HackLink ( i , tmp ) ;
37956: LD_VAR 0 1
37960: PPUSH
37961: LD_VAR 0 2
37965: PPUSH
37966: CALL 38113 0 2
// end ;
37970: GO 37751
37972: POP
37973: POP
// end ;
37974: PPOPN 2
37976: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37977: LD_INT 0
37979: PPUSH
37980: PPUSH
37981: PPUSH
// if not hack in hackTanks then
37982: LD_VAR 0 1
37986: PUSH
37987: LD_EXP 114
37991: IN
37992: NOT
37993: IFFALSE 37997
// exit ;
37995: GO 38108
// index := GetElementIndex ( hackTanks , hack ) ;
37997: LD_ADDR_VAR 0 4
38001: PUSH
38002: LD_EXP 114
38006: PPUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL 45550 0 2
38016: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38017: LD_EXP 115
38021: PUSH
38022: LD_VAR 0 4
38026: ARRAY
38027: IFFALSE 38108
// begin for i in hackTanksCaptured [ index ] do
38029: LD_ADDR_VAR 0 3
38033: PUSH
38034: LD_EXP 115
38038: PUSH
38039: LD_VAR 0 4
38043: ARRAY
38044: PUSH
38045: FOR_IN
38046: IFFALSE 38072
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38048: LD_VAR 0 3
38052: PUSH
38053: LD_INT 1
38055: ARRAY
38056: PPUSH
38057: LD_VAR 0 3
38061: PUSH
38062: LD_INT 2
38064: ARRAY
38065: PPUSH
38066: CALL_OW 235
38070: GO 38045
38072: POP
38073: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38074: LD_ADDR_EXP 115
38078: PUSH
38079: LD_EXP 115
38083: PPUSH
38084: LD_VAR 0 4
38088: PPUSH
38089: EMPTY
38090: PPUSH
38091: CALL_OW 1
38095: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38096: LD_VAR 0 1
38100: PPUSH
38101: LD_INT 0
38103: PPUSH
38104: CALL_OW 505
// end ; end ;
38108: LD_VAR 0 2
38112: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38113: LD_INT 0
38115: PPUSH
38116: PPUSH
38117: PPUSH
// if not hack in hackTanks or not vehicles then
38118: LD_VAR 0 1
38122: PUSH
38123: LD_EXP 114
38127: IN
38128: NOT
38129: PUSH
38130: LD_VAR 0 2
38134: NOT
38135: OR
38136: IFFALSE 38140
// exit ;
38138: GO 38415
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38140: LD_ADDR_VAR 0 2
38144: PUSH
38145: LD_VAR 0 1
38149: PPUSH
38150: LD_VAR 0 2
38154: PPUSH
38155: LD_INT 1
38157: PPUSH
38158: LD_INT 1
38160: PPUSH
38161: CALL 46200 0 4
38165: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38166: LD_ADDR_VAR 0 5
38170: PUSH
38171: LD_EXP 114
38175: PPUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: CALL 45550 0 2
38185: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38186: LD_EXP 115
38190: PUSH
38191: LD_VAR 0 5
38195: ARRAY
38196: PUSH
38197: LD_EXP 116
38201: LESS
38202: IFFALSE 38391
// begin for i := 1 to vehicles do
38204: LD_ADDR_VAR 0 4
38208: PUSH
38209: DOUBLE
38210: LD_INT 1
38212: DEC
38213: ST_TO_ADDR
38214: LD_VAR 0 2
38218: PUSH
38219: FOR_TO
38220: IFFALSE 38389
// begin if hackTanksCaptured [ index ] = hackLimit then
38222: LD_EXP 115
38226: PUSH
38227: LD_VAR 0 5
38231: ARRAY
38232: PUSH
38233: LD_EXP 116
38237: EQUAL
38238: IFFALSE 38242
// break ;
38240: GO 38389
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38242: LD_ADDR_EXP 118
38246: PUSH
38247: LD_EXP 118
38251: PPUSH
38252: LD_VAR 0 5
38256: PPUSH
38257: LD_EXP 118
38261: PUSH
38262: LD_VAR 0 5
38266: ARRAY
38267: PUSH
38268: LD_INT 1
38270: PLUS
38271: PPUSH
38272: CALL_OW 1
38276: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38277: LD_ADDR_EXP 115
38281: PUSH
38282: LD_EXP 115
38286: PPUSH
38287: LD_VAR 0 5
38291: PUSH
38292: LD_EXP 115
38296: PUSH
38297: LD_VAR 0 5
38301: ARRAY
38302: PUSH
38303: LD_INT 1
38305: PLUS
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PPUSH
38311: LD_VAR 0 2
38315: PUSH
38316: LD_VAR 0 4
38320: ARRAY
38321: PUSH
38322: LD_VAR 0 2
38326: PUSH
38327: LD_VAR 0 4
38331: ARRAY
38332: PPUSH
38333: CALL_OW 255
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PPUSH
38342: CALL 45765 0 3
38346: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38347: LD_VAR 0 2
38351: PUSH
38352: LD_VAR 0 4
38356: ARRAY
38357: PPUSH
38358: LD_VAR 0 1
38362: PPUSH
38363: CALL_OW 255
38367: PPUSH
38368: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38372: LD_VAR 0 2
38376: PUSH
38377: LD_VAR 0 4
38381: ARRAY
38382: PPUSH
38383: CALL_OW 141
// end ;
38387: GO 38219
38389: POP
38390: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38391: LD_VAR 0 1
38395: PPUSH
38396: LD_EXP 115
38400: PUSH
38401: LD_VAR 0 5
38405: ARRAY
38406: PUSH
38407: LD_INT 0
38409: PLUS
38410: PPUSH
38411: CALL_OW 505
// end ;
38415: LD_VAR 0 3
38419: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38420: LD_INT 0
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
// if not hack in hackTanks then
38426: LD_VAR 0 1
38430: PUSH
38431: LD_EXP 114
38435: IN
38436: NOT
38437: IFFALSE 38441
// exit ;
38439: GO 38681
// index := GetElementIndex ( hackTanks , hack ) ;
38441: LD_ADDR_VAR 0 4
38445: PUSH
38446: LD_EXP 114
38450: PPUSH
38451: LD_VAR 0 1
38455: PPUSH
38456: CALL 45550 0 2
38460: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38461: LD_ADDR_VAR 0 3
38465: PUSH
38466: DOUBLE
38467: LD_EXP 115
38471: PUSH
38472: LD_VAR 0 4
38476: ARRAY
38477: INC
38478: ST_TO_ADDR
38479: LD_INT 1
38481: PUSH
38482: FOR_DOWNTO
38483: IFFALSE 38655
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38485: LD_ADDR_VAR 0 5
38489: PUSH
38490: LD_EXP 115
38494: PUSH
38495: LD_VAR 0 4
38499: ARRAY
38500: PUSH
38501: LD_VAR 0 3
38505: ARRAY
38506: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38507: LD_VAR 0 5
38511: PUSH
38512: LD_INT 1
38514: ARRAY
38515: PPUSH
38516: CALL_OW 302
38520: NOT
38521: PUSH
38522: LD_VAR 0 5
38526: PUSH
38527: LD_INT 1
38529: ARRAY
38530: PPUSH
38531: CALL_OW 255
38535: PUSH
38536: LD_VAR 0 1
38540: PPUSH
38541: CALL_OW 255
38545: NONEQUAL
38546: OR
38547: IFFALSE 38653
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38549: LD_VAR 0 5
38553: PUSH
38554: LD_INT 1
38556: ARRAY
38557: PPUSH
38558: CALL_OW 305
38562: PUSH
38563: LD_VAR 0 5
38567: PUSH
38568: LD_INT 1
38570: ARRAY
38571: PPUSH
38572: CALL_OW 255
38576: PUSH
38577: LD_VAR 0 1
38581: PPUSH
38582: CALL_OW 255
38586: EQUAL
38587: AND
38588: IFFALSE 38612
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38590: LD_VAR 0 5
38594: PUSH
38595: LD_INT 1
38597: ARRAY
38598: PPUSH
38599: LD_VAR 0 5
38603: PUSH
38604: LD_INT 2
38606: ARRAY
38607: PPUSH
38608: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38612: LD_ADDR_EXP 115
38616: PUSH
38617: LD_EXP 115
38621: PPUSH
38622: LD_VAR 0 4
38626: PPUSH
38627: LD_EXP 115
38631: PUSH
38632: LD_VAR 0 4
38636: ARRAY
38637: PPUSH
38638: LD_VAR 0 3
38642: PPUSH
38643: CALL_OW 3
38647: PPUSH
38648: CALL_OW 1
38652: ST_TO_ADDR
// end ; end ;
38653: GO 38482
38655: POP
38656: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38657: LD_VAR 0 1
38661: PPUSH
38662: LD_EXP 115
38666: PUSH
38667: LD_VAR 0 4
38671: ARRAY
38672: PUSH
38673: LD_INT 0
38675: PLUS
38676: PPUSH
38677: CALL_OW 505
// end ;
38681: LD_VAR 0 2
38685: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38686: LD_INT 0
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
// if not hack in hackTanks then
38692: LD_VAR 0 1
38696: PUSH
38697: LD_EXP 114
38701: IN
38702: NOT
38703: IFFALSE 38707
// exit ;
38705: GO 38792
// index := GetElementIndex ( hackTanks , hack ) ;
38707: LD_ADDR_VAR 0 5
38711: PUSH
38712: LD_EXP 114
38716: PPUSH
38717: LD_VAR 0 1
38721: PPUSH
38722: CALL 45550 0 2
38726: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38727: LD_ADDR_VAR 0 4
38731: PUSH
38732: DOUBLE
38733: LD_INT 1
38735: DEC
38736: ST_TO_ADDR
38737: LD_EXP 115
38741: PUSH
38742: LD_VAR 0 5
38746: ARRAY
38747: PUSH
38748: FOR_TO
38749: IFFALSE 38790
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38751: LD_EXP 115
38755: PUSH
38756: LD_VAR 0 5
38760: ARRAY
38761: PUSH
38762: LD_VAR 0 4
38766: ARRAY
38767: PUSH
38768: LD_INT 1
38770: ARRAY
38771: PUSH
38772: LD_VAR 0 2
38776: EQUAL
38777: IFFALSE 38788
// KillUnit ( vehicle ) ;
38779: LD_VAR 0 2
38783: PPUSH
38784: CALL_OW 66
38788: GO 38748
38790: POP
38791: POP
// end ;
38792: LD_VAR 0 3
38796: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38797: LD_EXP 119
38801: NOT
38802: IFFALSE 38837
38804: GO 38806
38806: DISABLE
// begin initMiner := true ;
38807: LD_ADDR_EXP 119
38811: PUSH
38812: LD_INT 1
38814: ST_TO_ADDR
// minersList := [ ] ;
38815: LD_ADDR_EXP 120
38819: PUSH
38820: EMPTY
38821: ST_TO_ADDR
// minerMinesList := [ ] ;
38822: LD_ADDR_EXP 121
38826: PUSH
38827: EMPTY
38828: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38829: LD_ADDR_EXP 122
38833: PUSH
38834: LD_INT 5
38836: ST_TO_ADDR
// end ;
38837: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38838: LD_EXP 119
38842: PUSH
38843: LD_INT 34
38845: PUSH
38846: LD_INT 81
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PPUSH
38853: CALL_OW 69
38857: AND
38858: IFFALSE 39319
38860: GO 38862
38862: DISABLE
38863: LD_INT 0
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
// begin enable ;
38869: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38870: LD_ADDR_VAR 0 1
38874: PUSH
38875: LD_INT 34
38877: PUSH
38878: LD_INT 81
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PPUSH
38885: CALL_OW 69
38889: PUSH
38890: FOR_IN
38891: IFFALSE 38963
// begin if not i in minersList then
38893: LD_VAR 0 1
38897: PUSH
38898: LD_EXP 120
38902: IN
38903: NOT
38904: IFFALSE 38961
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38906: LD_ADDR_EXP 120
38910: PUSH
38911: LD_EXP 120
38915: PPUSH
38916: LD_EXP 120
38920: PUSH
38921: LD_INT 1
38923: PLUS
38924: PPUSH
38925: LD_VAR 0 1
38929: PPUSH
38930: CALL_OW 1
38934: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38935: LD_ADDR_EXP 121
38939: PUSH
38940: LD_EXP 121
38944: PPUSH
38945: LD_EXP 121
38949: PUSH
38950: LD_INT 1
38952: PLUS
38953: PPUSH
38954: EMPTY
38955: PPUSH
38956: CALL_OW 1
38960: ST_TO_ADDR
// end end ;
38961: GO 38890
38963: POP
38964: POP
// for i := minerMinesList downto 1 do
38965: LD_ADDR_VAR 0 1
38969: PUSH
38970: DOUBLE
38971: LD_EXP 121
38975: INC
38976: ST_TO_ADDR
38977: LD_INT 1
38979: PUSH
38980: FOR_DOWNTO
38981: IFFALSE 39317
// begin if IsLive ( minersList [ i ] ) then
38983: LD_EXP 120
38987: PUSH
38988: LD_VAR 0 1
38992: ARRAY
38993: PPUSH
38994: CALL_OW 300
38998: IFFALSE 39026
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39000: LD_EXP 120
39004: PUSH
39005: LD_VAR 0 1
39009: ARRAY
39010: PPUSH
39011: LD_EXP 121
39015: PUSH
39016: LD_VAR 0 1
39020: ARRAY
39021: PPUSH
39022: CALL_OW 505
// if not minerMinesList [ i ] then
39026: LD_EXP 121
39030: PUSH
39031: LD_VAR 0 1
39035: ARRAY
39036: NOT
39037: IFFALSE 39041
// continue ;
39039: GO 38980
// for j := minerMinesList [ i ] downto 1 do
39041: LD_ADDR_VAR 0 2
39045: PUSH
39046: DOUBLE
39047: LD_EXP 121
39051: PUSH
39052: LD_VAR 0 1
39056: ARRAY
39057: INC
39058: ST_TO_ADDR
39059: LD_INT 1
39061: PUSH
39062: FOR_DOWNTO
39063: IFFALSE 39313
// begin side := GetSide ( minersList [ i ] ) ;
39065: LD_ADDR_VAR 0 3
39069: PUSH
39070: LD_EXP 120
39074: PUSH
39075: LD_VAR 0 1
39079: ARRAY
39080: PPUSH
39081: CALL_OW 255
39085: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39086: LD_ADDR_VAR 0 4
39090: PUSH
39091: LD_EXP 121
39095: PUSH
39096: LD_VAR 0 1
39100: ARRAY
39101: PUSH
39102: LD_VAR 0 2
39106: ARRAY
39107: PUSH
39108: LD_INT 1
39110: ARRAY
39111: PPUSH
39112: LD_EXP 121
39116: PUSH
39117: LD_VAR 0 1
39121: ARRAY
39122: PUSH
39123: LD_VAR 0 2
39127: ARRAY
39128: PUSH
39129: LD_INT 2
39131: ARRAY
39132: PPUSH
39133: CALL_OW 428
39137: ST_TO_ADDR
// if not tmp then
39138: LD_VAR 0 4
39142: NOT
39143: IFFALSE 39147
// continue ;
39145: GO 39062
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39147: LD_VAR 0 4
39151: PUSH
39152: LD_INT 81
39154: PUSH
39155: LD_VAR 0 3
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PPUSH
39164: CALL_OW 69
39168: IN
39169: PUSH
39170: LD_EXP 121
39174: PUSH
39175: LD_VAR 0 1
39179: ARRAY
39180: PUSH
39181: LD_VAR 0 2
39185: ARRAY
39186: PUSH
39187: LD_INT 1
39189: ARRAY
39190: PPUSH
39191: LD_EXP 121
39195: PUSH
39196: LD_VAR 0 1
39200: ARRAY
39201: PUSH
39202: LD_VAR 0 2
39206: ARRAY
39207: PUSH
39208: LD_INT 2
39210: ARRAY
39211: PPUSH
39212: CALL_OW 458
39216: AND
39217: IFFALSE 39311
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39219: LD_EXP 121
39223: PUSH
39224: LD_VAR 0 1
39228: ARRAY
39229: PUSH
39230: LD_VAR 0 2
39234: ARRAY
39235: PUSH
39236: LD_INT 1
39238: ARRAY
39239: PPUSH
39240: LD_EXP 121
39244: PUSH
39245: LD_VAR 0 1
39249: ARRAY
39250: PUSH
39251: LD_VAR 0 2
39255: ARRAY
39256: PUSH
39257: LD_INT 2
39259: ARRAY
39260: PPUSH
39261: LD_VAR 0 3
39265: PPUSH
39266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39270: LD_ADDR_EXP 121
39274: PUSH
39275: LD_EXP 121
39279: PPUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: LD_EXP 121
39289: PUSH
39290: LD_VAR 0 1
39294: ARRAY
39295: PPUSH
39296: LD_VAR 0 2
39300: PPUSH
39301: CALL_OW 3
39305: PPUSH
39306: CALL_OW 1
39310: ST_TO_ADDR
// end ; end ;
39311: GO 39062
39313: POP
39314: POP
// end ;
39315: GO 38980
39317: POP
39318: POP
// end ;
39319: PPOPN 4
39321: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39322: LD_INT 0
39324: PPUSH
39325: PPUSH
// result := false ;
39326: LD_ADDR_VAR 0 4
39330: PUSH
39331: LD_INT 0
39333: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 264
39343: PUSH
39344: LD_INT 81
39346: EQUAL
39347: NOT
39348: IFFALSE 39352
// exit ;
39350: GO 39592
// index := GetElementIndex ( minersList , unit ) ;
39352: LD_ADDR_VAR 0 5
39356: PUSH
39357: LD_EXP 120
39361: PPUSH
39362: LD_VAR 0 1
39366: PPUSH
39367: CALL 45550 0 2
39371: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39372: LD_EXP 121
39376: PUSH
39377: LD_VAR 0 5
39381: ARRAY
39382: PUSH
39383: LD_EXP 122
39387: GREATEREQUAL
39388: IFFALSE 39392
// exit ;
39390: GO 39592
// ComMoveXY ( unit , x , y ) ;
39392: LD_VAR 0 1
39396: PPUSH
39397: LD_VAR 0 2
39401: PPUSH
39402: LD_VAR 0 3
39406: PPUSH
39407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39411: LD_INT 35
39413: PPUSH
39414: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39418: LD_VAR 0 1
39422: PPUSH
39423: LD_VAR 0 2
39427: PPUSH
39428: LD_VAR 0 3
39432: PPUSH
39433: CALL 77302 0 3
39437: NOT
39438: PUSH
39439: LD_VAR 0 1
39443: PPUSH
39444: CALL_OW 314
39448: AND
39449: IFFALSE 39453
// exit ;
39451: GO 39592
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39453: LD_VAR 0 2
39457: PPUSH
39458: LD_VAR 0 3
39462: PPUSH
39463: CALL_OW 428
39467: PUSH
39468: LD_VAR 0 1
39472: EQUAL
39473: PUSH
39474: LD_VAR 0 1
39478: PPUSH
39479: CALL_OW 314
39483: NOT
39484: AND
39485: IFFALSE 39411
// PlaySoundXY ( x , y , PlantMine ) ;
39487: LD_VAR 0 2
39491: PPUSH
39492: LD_VAR 0 3
39496: PPUSH
39497: LD_STRING PlantMine
39499: PPUSH
39500: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39504: LD_VAR 0 2
39508: PPUSH
39509: LD_VAR 0 3
39513: PPUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: CALL_OW 255
39523: PPUSH
39524: LD_INT 0
39526: PPUSH
39527: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39531: LD_ADDR_EXP 121
39535: PUSH
39536: LD_EXP 121
39540: PPUSH
39541: LD_VAR 0 5
39545: PUSH
39546: LD_EXP 121
39550: PUSH
39551: LD_VAR 0 5
39555: ARRAY
39556: PUSH
39557: LD_INT 1
39559: PLUS
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PPUSH
39565: LD_VAR 0 2
39569: PUSH
39570: LD_VAR 0 3
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PPUSH
39579: CALL 45765 0 3
39583: ST_TO_ADDR
// result := true ;
39584: LD_ADDR_VAR 0 4
39588: PUSH
39589: LD_INT 1
39591: ST_TO_ADDR
// end ;
39592: LD_VAR 0 4
39596: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39597: LD_INT 0
39599: PPUSH
39600: PPUSH
39601: PPUSH
// if not unit in minersList then
39602: LD_VAR 0 1
39606: PUSH
39607: LD_EXP 120
39611: IN
39612: NOT
39613: IFFALSE 39617
// exit ;
39615: GO 40009
// index := GetElementIndex ( minersList , unit ) ;
39617: LD_ADDR_VAR 0 6
39621: PUSH
39622: LD_EXP 120
39626: PPUSH
39627: LD_VAR 0 1
39631: PPUSH
39632: CALL 45550 0 2
39636: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39637: LD_ADDR_VAR 0 5
39641: PUSH
39642: DOUBLE
39643: LD_EXP 121
39647: PUSH
39648: LD_VAR 0 6
39652: ARRAY
39653: INC
39654: ST_TO_ADDR
39655: LD_INT 1
39657: PUSH
39658: FOR_DOWNTO
39659: IFFALSE 39820
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39661: LD_EXP 121
39665: PUSH
39666: LD_VAR 0 6
39670: ARRAY
39671: PUSH
39672: LD_VAR 0 5
39676: ARRAY
39677: PUSH
39678: LD_INT 1
39680: ARRAY
39681: PUSH
39682: LD_VAR 0 2
39686: EQUAL
39687: PUSH
39688: LD_EXP 121
39692: PUSH
39693: LD_VAR 0 6
39697: ARRAY
39698: PUSH
39699: LD_VAR 0 5
39703: ARRAY
39704: PUSH
39705: LD_INT 2
39707: ARRAY
39708: PUSH
39709: LD_VAR 0 3
39713: EQUAL
39714: AND
39715: IFFALSE 39818
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39717: LD_EXP 121
39721: PUSH
39722: LD_VAR 0 6
39726: ARRAY
39727: PUSH
39728: LD_VAR 0 5
39732: ARRAY
39733: PUSH
39734: LD_INT 1
39736: ARRAY
39737: PPUSH
39738: LD_EXP 121
39742: PUSH
39743: LD_VAR 0 6
39747: ARRAY
39748: PUSH
39749: LD_VAR 0 5
39753: ARRAY
39754: PUSH
39755: LD_INT 2
39757: ARRAY
39758: PPUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 255
39768: PPUSH
39769: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39773: LD_ADDR_EXP 121
39777: PUSH
39778: LD_EXP 121
39782: PPUSH
39783: LD_VAR 0 6
39787: PPUSH
39788: LD_EXP 121
39792: PUSH
39793: LD_VAR 0 6
39797: ARRAY
39798: PPUSH
39799: LD_VAR 0 5
39803: PPUSH
39804: CALL_OW 3
39808: PPUSH
39809: CALL_OW 1
39813: ST_TO_ADDR
// exit ;
39814: POP
39815: POP
39816: GO 40009
// end ; end ;
39818: GO 39658
39820: POP
39821: POP
// for i := minerMinesList [ index ] downto 1 do
39822: LD_ADDR_VAR 0 5
39826: PUSH
39827: DOUBLE
39828: LD_EXP 121
39832: PUSH
39833: LD_VAR 0 6
39837: ARRAY
39838: INC
39839: ST_TO_ADDR
39840: LD_INT 1
39842: PUSH
39843: FOR_DOWNTO
39844: IFFALSE 40007
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39846: LD_EXP 121
39850: PUSH
39851: LD_VAR 0 6
39855: ARRAY
39856: PUSH
39857: LD_VAR 0 5
39861: ARRAY
39862: PUSH
39863: LD_INT 1
39865: ARRAY
39866: PPUSH
39867: LD_EXP 121
39871: PUSH
39872: LD_VAR 0 6
39876: ARRAY
39877: PUSH
39878: LD_VAR 0 5
39882: ARRAY
39883: PUSH
39884: LD_INT 2
39886: ARRAY
39887: PPUSH
39888: LD_VAR 0 2
39892: PPUSH
39893: LD_VAR 0 3
39897: PPUSH
39898: CALL_OW 298
39902: PUSH
39903: LD_INT 6
39905: LESS
39906: IFFALSE 40005
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39908: LD_EXP 121
39912: PUSH
39913: LD_VAR 0 6
39917: ARRAY
39918: PUSH
39919: LD_VAR 0 5
39923: ARRAY
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: PPUSH
39929: LD_EXP 121
39933: PUSH
39934: LD_VAR 0 6
39938: ARRAY
39939: PUSH
39940: LD_VAR 0 5
39944: ARRAY
39945: PUSH
39946: LD_INT 2
39948: ARRAY
39949: PPUSH
39950: LD_VAR 0 1
39954: PPUSH
39955: CALL_OW 255
39959: PPUSH
39960: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39964: LD_ADDR_EXP 121
39968: PUSH
39969: LD_EXP 121
39973: PPUSH
39974: LD_VAR 0 6
39978: PPUSH
39979: LD_EXP 121
39983: PUSH
39984: LD_VAR 0 6
39988: ARRAY
39989: PPUSH
39990: LD_VAR 0 5
39994: PPUSH
39995: CALL_OW 3
39999: PPUSH
40000: CALL_OW 1
40004: ST_TO_ADDR
// end ; end ;
40005: GO 39843
40007: POP
40008: POP
// end ;
40009: LD_VAR 0 4
40013: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40014: LD_INT 0
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40025: LD_VAR 0 1
40029: PPUSH
40030: CALL_OW 264
40034: PUSH
40035: LD_INT 81
40037: EQUAL
40038: NOT
40039: PUSH
40040: LD_VAR 0 1
40044: PUSH
40045: LD_EXP 120
40049: IN
40050: NOT
40051: OR
40052: IFFALSE 40056
// exit ;
40054: GO 40378
// index := GetElementIndex ( minersList , unit ) ;
40056: LD_ADDR_VAR 0 6
40060: PUSH
40061: LD_EXP 120
40065: PPUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL 45550 0 2
40075: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40076: LD_ADDR_VAR 0 8
40080: PUSH
40081: LD_EXP 122
40085: PUSH
40086: LD_EXP 121
40090: PUSH
40091: LD_VAR 0 6
40095: ARRAY
40096: MINUS
40097: ST_TO_ADDR
// if not minesFreeAmount then
40098: LD_VAR 0 8
40102: NOT
40103: IFFALSE 40107
// exit ;
40105: GO 40378
// tmp := [ ] ;
40107: LD_ADDR_VAR 0 7
40111: PUSH
40112: EMPTY
40113: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40114: LD_ADDR_VAR 0 5
40118: PUSH
40119: DOUBLE
40120: LD_INT 1
40122: DEC
40123: ST_TO_ADDR
40124: LD_VAR 0 8
40128: PUSH
40129: FOR_TO
40130: IFFALSE 40325
// begin _d := rand ( 0 , 5 ) ;
40132: LD_ADDR_VAR 0 11
40136: PUSH
40137: LD_INT 0
40139: PPUSH
40140: LD_INT 5
40142: PPUSH
40143: CALL_OW 12
40147: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40148: LD_ADDR_VAR 0 12
40152: PUSH
40153: LD_INT 2
40155: PPUSH
40156: LD_INT 6
40158: PPUSH
40159: CALL_OW 12
40163: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40164: LD_ADDR_VAR 0 9
40168: PUSH
40169: LD_VAR 0 2
40173: PPUSH
40174: LD_VAR 0 11
40178: PPUSH
40179: LD_VAR 0 12
40183: PPUSH
40184: CALL_OW 272
40188: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40189: LD_ADDR_VAR 0 10
40193: PUSH
40194: LD_VAR 0 3
40198: PPUSH
40199: LD_VAR 0 11
40203: PPUSH
40204: LD_VAR 0 12
40208: PPUSH
40209: CALL_OW 273
40213: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40214: LD_VAR 0 9
40218: PPUSH
40219: LD_VAR 0 10
40223: PPUSH
40224: CALL_OW 488
40228: PUSH
40229: LD_VAR 0 9
40233: PUSH
40234: LD_VAR 0 10
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_VAR 0 7
40247: IN
40248: NOT
40249: AND
40250: PUSH
40251: LD_VAR 0 9
40255: PPUSH
40256: LD_VAR 0 10
40260: PPUSH
40261: CALL_OW 458
40265: NOT
40266: AND
40267: IFFALSE 40309
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40269: LD_ADDR_VAR 0 7
40273: PUSH
40274: LD_VAR 0 7
40278: PPUSH
40279: LD_VAR 0 7
40283: PUSH
40284: LD_INT 1
40286: PLUS
40287: PPUSH
40288: LD_VAR 0 9
40292: PUSH
40293: LD_VAR 0 10
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PPUSH
40302: CALL_OW 1
40306: ST_TO_ADDR
40307: GO 40323
// i := i - 1 ;
40309: LD_ADDR_VAR 0 5
40313: PUSH
40314: LD_VAR 0 5
40318: PUSH
40319: LD_INT 1
40321: MINUS
40322: ST_TO_ADDR
// end ;
40323: GO 40129
40325: POP
40326: POP
// for i in tmp do
40327: LD_ADDR_VAR 0 5
40331: PUSH
40332: LD_VAR 0 7
40336: PUSH
40337: FOR_IN
40338: IFFALSE 40376
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40340: LD_VAR 0 1
40344: PPUSH
40345: LD_VAR 0 5
40349: PUSH
40350: LD_INT 1
40352: ARRAY
40353: PPUSH
40354: LD_VAR 0 5
40358: PUSH
40359: LD_INT 2
40361: ARRAY
40362: PPUSH
40363: CALL 39322 0 3
40367: NOT
40368: IFFALSE 40374
// exit ;
40370: POP
40371: POP
40372: GO 40378
40374: GO 40337
40376: POP
40377: POP
// end ;
40378: LD_VAR 0 4
40382: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40383: LD_INT 0
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
// if not GetClass ( unit ) = class_sniper then
40392: LD_VAR 0 1
40396: PPUSH
40397: CALL_OW 257
40401: PUSH
40402: LD_INT 5
40404: EQUAL
40405: NOT
40406: IFFALSE 40410
// exit ;
40408: GO 40798
// dist := 8 ;
40410: LD_ADDR_VAR 0 5
40414: PUSH
40415: LD_INT 8
40417: ST_TO_ADDR
// viewRange := 12 ;
40418: LD_ADDR_VAR 0 7
40422: PUSH
40423: LD_INT 12
40425: ST_TO_ADDR
// side := GetSide ( unit ) ;
40426: LD_ADDR_VAR 0 6
40430: PUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 255
40440: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40441: LD_INT 61
40443: PPUSH
40444: LD_VAR 0 6
40448: PPUSH
40449: CALL_OW 321
40453: PUSH
40454: LD_INT 2
40456: EQUAL
40457: IFFALSE 40467
// viewRange := 16 ;
40459: LD_ADDR_VAR 0 7
40463: PUSH
40464: LD_INT 16
40466: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40467: LD_VAR 0 1
40471: PPUSH
40472: LD_VAR 0 2
40476: PPUSH
40477: LD_VAR 0 3
40481: PPUSH
40482: CALL_OW 297
40486: PUSH
40487: LD_VAR 0 5
40491: GREATER
40492: IFFALSE 40571
// begin ComMoveXY ( unit , x , y ) ;
40494: LD_VAR 0 1
40498: PPUSH
40499: LD_VAR 0 2
40503: PPUSH
40504: LD_VAR 0 3
40508: PPUSH
40509: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40513: LD_INT 35
40515: PPUSH
40516: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40520: LD_VAR 0 1
40524: PPUSH
40525: LD_VAR 0 2
40529: PPUSH
40530: LD_VAR 0 3
40534: PPUSH
40535: CALL 77302 0 3
40539: NOT
40540: IFFALSE 40544
// exit ;
40542: GO 40798
// until GetDistUnitXY ( unit , x , y ) < dist ;
40544: LD_VAR 0 1
40548: PPUSH
40549: LD_VAR 0 2
40553: PPUSH
40554: LD_VAR 0 3
40558: PPUSH
40559: CALL_OW 297
40563: PUSH
40564: LD_VAR 0 5
40568: LESS
40569: IFFALSE 40513
// end ; ComTurnXY ( unit , x , y ) ;
40571: LD_VAR 0 1
40575: PPUSH
40576: LD_VAR 0 2
40580: PPUSH
40581: LD_VAR 0 3
40585: PPUSH
40586: CALL_OW 118
// wait ( 5 ) ;
40590: LD_INT 5
40592: PPUSH
40593: CALL_OW 67
// _d := GetDir ( unit ) ;
40597: LD_ADDR_VAR 0 10
40601: PUSH
40602: LD_VAR 0 1
40606: PPUSH
40607: CALL_OW 254
40611: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40612: LD_ADDR_VAR 0 8
40616: PUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 250
40626: PPUSH
40627: LD_VAR 0 10
40631: PPUSH
40632: LD_VAR 0 5
40636: PPUSH
40637: CALL_OW 272
40641: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40642: LD_ADDR_VAR 0 9
40646: PUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: CALL_OW 251
40656: PPUSH
40657: LD_VAR 0 10
40661: PPUSH
40662: LD_VAR 0 5
40666: PPUSH
40667: CALL_OW 273
40671: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40672: LD_VAR 0 8
40676: PPUSH
40677: LD_VAR 0 9
40681: PPUSH
40682: CALL_OW 488
40686: NOT
40687: IFFALSE 40691
// exit ;
40689: GO 40798
// ComAnimCustom ( unit , 1 ) ;
40691: LD_VAR 0 1
40695: PPUSH
40696: LD_INT 1
40698: PPUSH
40699: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40703: LD_VAR 0 8
40707: PPUSH
40708: LD_VAR 0 9
40712: PPUSH
40713: LD_VAR 0 6
40717: PPUSH
40718: LD_VAR 0 7
40722: PPUSH
40723: CALL_OW 330
// repeat wait ( 1 ) ;
40727: LD_INT 1
40729: PPUSH
40730: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40734: LD_VAR 0 1
40738: PPUSH
40739: CALL_OW 316
40743: PUSH
40744: LD_VAR 0 1
40748: PPUSH
40749: CALL_OW 314
40753: OR
40754: PUSH
40755: LD_VAR 0 1
40759: PPUSH
40760: CALL_OW 302
40764: NOT
40765: OR
40766: PUSH
40767: LD_VAR 0 1
40771: PPUSH
40772: CALL_OW 301
40776: OR
40777: IFFALSE 40727
// RemoveSeeing ( _x , _y , side ) ;
40779: LD_VAR 0 8
40783: PPUSH
40784: LD_VAR 0 9
40788: PPUSH
40789: LD_VAR 0 6
40793: PPUSH
40794: CALL_OW 331
// end ; end_of_file
40798: LD_VAR 0 4
40802: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40803: LD_INT 0
40805: PPUSH
40806: PPUSH
// if exist_mode then
40807: LD_VAR 0 2
40811: IFFALSE 40836
// unit := CreateCharacter ( prefix & ident ) else
40813: LD_ADDR_VAR 0 5
40817: PUSH
40818: LD_VAR 0 3
40822: PUSH
40823: LD_VAR 0 1
40827: STR
40828: PPUSH
40829: CALL_OW 34
40833: ST_TO_ADDR
40834: GO 40851
// unit := NewCharacter ( ident ) ;
40836: LD_ADDR_VAR 0 5
40840: PUSH
40841: LD_VAR 0 1
40845: PPUSH
40846: CALL_OW 25
40850: ST_TO_ADDR
// result := unit ;
40851: LD_ADDR_VAR 0 4
40855: PUSH
40856: LD_VAR 0 5
40860: ST_TO_ADDR
// end ;
40861: LD_VAR 0 4
40865: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40866: LD_INT 0
40868: PPUSH
40869: PPUSH
// if not side or not nation then
40870: LD_VAR 0 1
40874: NOT
40875: PUSH
40876: LD_VAR 0 2
40880: NOT
40881: OR
40882: IFFALSE 40886
// exit ;
40884: GO 41654
// case nation of nation_american :
40886: LD_VAR 0 2
40890: PUSH
40891: LD_INT 1
40893: DOUBLE
40894: EQUAL
40895: IFTRUE 40899
40897: GO 41113
40899: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40900: LD_ADDR_VAR 0 4
40904: PUSH
40905: LD_INT 35
40907: PUSH
40908: LD_INT 45
40910: PUSH
40911: LD_INT 46
40913: PUSH
40914: LD_INT 47
40916: PUSH
40917: LD_INT 82
40919: PUSH
40920: LD_INT 83
40922: PUSH
40923: LD_INT 84
40925: PUSH
40926: LD_INT 85
40928: PUSH
40929: LD_INT 86
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: LD_INT 6
40940: PUSH
40941: LD_INT 15
40943: PUSH
40944: LD_INT 16
40946: PUSH
40947: LD_INT 7
40949: PUSH
40950: LD_INT 12
40952: PUSH
40953: LD_INT 13
40955: PUSH
40956: LD_INT 10
40958: PUSH
40959: LD_INT 14
40961: PUSH
40962: LD_INT 20
40964: PUSH
40965: LD_INT 21
40967: PUSH
40968: LD_INT 22
40970: PUSH
40971: LD_INT 25
40973: PUSH
40974: LD_INT 32
40976: PUSH
40977: LD_INT 27
40979: PUSH
40980: LD_INT 36
40982: PUSH
40983: LD_INT 69
40985: PUSH
40986: LD_INT 39
40988: PUSH
40989: LD_INT 34
40991: PUSH
40992: LD_INT 40
40994: PUSH
40995: LD_INT 48
40997: PUSH
40998: LD_INT 49
41000: PUSH
41001: LD_INT 50
41003: PUSH
41004: LD_INT 51
41006: PUSH
41007: LD_INT 52
41009: PUSH
41010: LD_INT 53
41012: PUSH
41013: LD_INT 54
41015: PUSH
41016: LD_INT 55
41018: PUSH
41019: LD_INT 56
41021: PUSH
41022: LD_INT 57
41024: PUSH
41025: LD_INT 58
41027: PUSH
41028: LD_INT 59
41030: PUSH
41031: LD_INT 60
41033: PUSH
41034: LD_INT 61
41036: PUSH
41037: LD_INT 62
41039: PUSH
41040: LD_INT 80
41042: PUSH
41043: LD_INT 82
41045: PUSH
41046: LD_INT 83
41048: PUSH
41049: LD_INT 84
41051: PUSH
41052: LD_INT 85
41054: PUSH
41055: LD_INT 86
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: ST_TO_ADDR
41111: GO 41578
41113: LD_INT 2
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41347
41121: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41122: LD_ADDR_VAR 0 4
41126: PUSH
41127: LD_INT 35
41129: PUSH
41130: LD_INT 45
41132: PUSH
41133: LD_INT 46
41135: PUSH
41136: LD_INT 47
41138: PUSH
41139: LD_INT 82
41141: PUSH
41142: LD_INT 83
41144: PUSH
41145: LD_INT 84
41147: PUSH
41148: LD_INT 85
41150: PUSH
41151: LD_INT 87
41153: PUSH
41154: LD_INT 70
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 11
41162: PUSH
41163: LD_INT 3
41165: PUSH
41166: LD_INT 4
41168: PUSH
41169: LD_INT 5
41171: PUSH
41172: LD_INT 6
41174: PUSH
41175: LD_INT 15
41177: PUSH
41178: LD_INT 18
41180: PUSH
41181: LD_INT 7
41183: PUSH
41184: LD_INT 17
41186: PUSH
41187: LD_INT 8
41189: PUSH
41190: LD_INT 20
41192: PUSH
41193: LD_INT 21
41195: PUSH
41196: LD_INT 22
41198: PUSH
41199: LD_INT 72
41201: PUSH
41202: LD_INT 26
41204: PUSH
41205: LD_INT 69
41207: PUSH
41208: LD_INT 39
41210: PUSH
41211: LD_INT 40
41213: PUSH
41214: LD_INT 41
41216: PUSH
41217: LD_INT 42
41219: PUSH
41220: LD_INT 43
41222: PUSH
41223: LD_INT 48
41225: PUSH
41226: LD_INT 49
41228: PUSH
41229: LD_INT 50
41231: PUSH
41232: LD_INT 51
41234: PUSH
41235: LD_INT 52
41237: PUSH
41238: LD_INT 53
41240: PUSH
41241: LD_INT 54
41243: PUSH
41244: LD_INT 55
41246: PUSH
41247: LD_INT 56
41249: PUSH
41250: LD_INT 60
41252: PUSH
41253: LD_INT 61
41255: PUSH
41256: LD_INT 62
41258: PUSH
41259: LD_INT 66
41261: PUSH
41262: LD_INT 67
41264: PUSH
41265: LD_INT 68
41267: PUSH
41268: LD_INT 81
41270: PUSH
41271: LD_INT 82
41273: PUSH
41274: LD_INT 83
41276: PUSH
41277: LD_INT 84
41279: PUSH
41280: LD_INT 85
41282: PUSH
41283: LD_INT 87
41285: PUSH
41286: LD_INT 88
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: ST_TO_ADDR
41345: GO 41578
41347: LD_INT 3
41349: DOUBLE
41350: EQUAL
41351: IFTRUE 41355
41353: GO 41577
41355: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41356: LD_ADDR_VAR 0 4
41360: PUSH
41361: LD_INT 46
41363: PUSH
41364: LD_INT 47
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 82
41375: PUSH
41376: LD_INT 83
41378: PUSH
41379: LD_INT 84
41381: PUSH
41382: LD_INT 85
41384: PUSH
41385: LD_INT 86
41387: PUSH
41388: LD_INT 11
41390: PUSH
41391: LD_INT 9
41393: PUSH
41394: LD_INT 20
41396: PUSH
41397: LD_INT 19
41399: PUSH
41400: LD_INT 21
41402: PUSH
41403: LD_INT 24
41405: PUSH
41406: LD_INT 22
41408: PUSH
41409: LD_INT 25
41411: PUSH
41412: LD_INT 28
41414: PUSH
41415: LD_INT 29
41417: PUSH
41418: LD_INT 30
41420: PUSH
41421: LD_INT 31
41423: PUSH
41424: LD_INT 37
41426: PUSH
41427: LD_INT 38
41429: PUSH
41430: LD_INT 32
41432: PUSH
41433: LD_INT 27
41435: PUSH
41436: LD_INT 33
41438: PUSH
41439: LD_INT 69
41441: PUSH
41442: LD_INT 39
41444: PUSH
41445: LD_INT 34
41447: PUSH
41448: LD_INT 40
41450: PUSH
41451: LD_INT 71
41453: PUSH
41454: LD_INT 23
41456: PUSH
41457: LD_INT 44
41459: PUSH
41460: LD_INT 48
41462: PUSH
41463: LD_INT 49
41465: PUSH
41466: LD_INT 50
41468: PUSH
41469: LD_INT 51
41471: PUSH
41472: LD_INT 52
41474: PUSH
41475: LD_INT 53
41477: PUSH
41478: LD_INT 54
41480: PUSH
41481: LD_INT 55
41483: PUSH
41484: LD_INT 56
41486: PUSH
41487: LD_INT 57
41489: PUSH
41490: LD_INT 58
41492: PUSH
41493: LD_INT 59
41495: PUSH
41496: LD_INT 63
41498: PUSH
41499: LD_INT 64
41501: PUSH
41502: LD_INT 65
41504: PUSH
41505: LD_INT 82
41507: PUSH
41508: LD_INT 83
41510: PUSH
41511: LD_INT 84
41513: PUSH
41514: LD_INT 85
41516: PUSH
41517: LD_INT 86
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: ST_TO_ADDR
41575: GO 41578
41577: POP
// if state > - 1 and state < 3 then
41578: LD_VAR 0 3
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: GREATER
41587: PUSH
41588: LD_VAR 0 3
41592: PUSH
41593: LD_INT 3
41595: LESS
41596: AND
41597: IFFALSE 41654
// for i in result do
41599: LD_ADDR_VAR 0 5
41603: PUSH
41604: LD_VAR 0 4
41608: PUSH
41609: FOR_IN
41610: IFFALSE 41652
// if GetTech ( i , side ) <> state then
41612: LD_VAR 0 5
41616: PPUSH
41617: LD_VAR 0 1
41621: PPUSH
41622: CALL_OW 321
41626: PUSH
41627: LD_VAR 0 3
41631: NONEQUAL
41632: IFFALSE 41650
// result := result diff i ;
41634: LD_ADDR_VAR 0 4
41638: PUSH
41639: LD_VAR 0 4
41643: PUSH
41644: LD_VAR 0 5
41648: DIFF
41649: ST_TO_ADDR
41650: GO 41609
41652: POP
41653: POP
// end ;
41654: LD_VAR 0 4
41658: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41659: LD_INT 0
41661: PPUSH
41662: PPUSH
41663: PPUSH
// result := true ;
41664: LD_ADDR_VAR 0 3
41668: PUSH
41669: LD_INT 1
41671: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41672: LD_ADDR_VAR 0 5
41676: PUSH
41677: LD_VAR 0 2
41681: PPUSH
41682: CALL_OW 480
41686: ST_TO_ADDR
// if not tmp then
41687: LD_VAR 0 5
41691: NOT
41692: IFFALSE 41696
// exit ;
41694: GO 41745
// for i in tmp do
41696: LD_ADDR_VAR 0 4
41700: PUSH
41701: LD_VAR 0 5
41705: PUSH
41706: FOR_IN
41707: IFFALSE 41743
// if GetTech ( i , side ) <> state_researched then
41709: LD_VAR 0 4
41713: PPUSH
41714: LD_VAR 0 1
41718: PPUSH
41719: CALL_OW 321
41723: PUSH
41724: LD_INT 2
41726: NONEQUAL
41727: IFFALSE 41741
// begin result := false ;
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_INT 0
41736: ST_TO_ADDR
// exit ;
41737: POP
41738: POP
41739: GO 41745
// end ;
41741: GO 41706
41743: POP
41744: POP
// end ;
41745: LD_VAR 0 3
41749: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41750: LD_INT 0
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
41756: PPUSH
41757: PPUSH
41758: PPUSH
41759: PPUSH
41760: PPUSH
41761: PPUSH
41762: PPUSH
41763: PPUSH
41764: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41765: LD_VAR 0 1
41769: NOT
41770: PUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: CALL_OW 257
41780: PUSH
41781: LD_INT 9
41783: NONEQUAL
41784: OR
41785: IFFALSE 41789
// exit ;
41787: GO 42362
// side := GetSide ( unit ) ;
41789: LD_ADDR_VAR 0 9
41793: PUSH
41794: LD_VAR 0 1
41798: PPUSH
41799: CALL_OW 255
41803: ST_TO_ADDR
// tech_space := tech_spacanom ;
41804: LD_ADDR_VAR 0 12
41808: PUSH
41809: LD_INT 29
41811: ST_TO_ADDR
// tech_time := tech_taurad ;
41812: LD_ADDR_VAR 0 13
41816: PUSH
41817: LD_INT 28
41819: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41820: LD_ADDR_VAR 0 11
41824: PUSH
41825: LD_VAR 0 1
41829: PPUSH
41830: CALL_OW 310
41834: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41835: LD_VAR 0 11
41839: PPUSH
41840: CALL_OW 247
41844: PUSH
41845: LD_INT 2
41847: EQUAL
41848: IFFALSE 41852
// exit ;
41850: GO 42362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41852: LD_ADDR_VAR 0 8
41856: PUSH
41857: LD_INT 81
41859: PUSH
41860: LD_VAR 0 9
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 21
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PPUSH
41890: CALL_OW 69
41894: ST_TO_ADDR
// if not tmp then
41895: LD_VAR 0 8
41899: NOT
41900: IFFALSE 41904
// exit ;
41902: GO 42362
// if in_unit then
41904: LD_VAR 0 11
41908: IFFALSE 41932
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41910: LD_ADDR_VAR 0 10
41914: PUSH
41915: LD_VAR 0 8
41919: PPUSH
41920: LD_VAR 0 11
41924: PPUSH
41925: CALL_OW 74
41929: ST_TO_ADDR
41930: GO 41952
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41932: LD_ADDR_VAR 0 10
41936: PUSH
41937: LD_VAR 0 8
41941: PPUSH
41942: LD_VAR 0 1
41946: PPUSH
41947: CALL_OW 74
41951: ST_TO_ADDR
// if not enemy then
41952: LD_VAR 0 10
41956: NOT
41957: IFFALSE 41961
// exit ;
41959: GO 42362
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41961: LD_VAR 0 11
41965: PUSH
41966: LD_VAR 0 11
41970: PPUSH
41971: LD_VAR 0 10
41975: PPUSH
41976: CALL_OW 296
41980: PUSH
41981: LD_INT 13
41983: GREATER
41984: AND
41985: PUSH
41986: LD_VAR 0 1
41990: PPUSH
41991: LD_VAR 0 10
41995: PPUSH
41996: CALL_OW 296
42000: PUSH
42001: LD_INT 12
42003: GREATER
42004: OR
42005: IFFALSE 42009
// exit ;
42007: GO 42362
// missile := [ 1 ] ;
42009: LD_ADDR_VAR 0 14
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: EMPTY
42018: LIST
42019: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42020: LD_VAR 0 9
42024: PPUSH
42025: LD_VAR 0 12
42029: PPUSH
42030: CALL_OW 325
42034: IFFALSE 42063
// missile := Replace ( missile , missile + 1 , 2 ) ;
42036: LD_ADDR_VAR 0 14
42040: PUSH
42041: LD_VAR 0 14
42045: PPUSH
42046: LD_VAR 0 14
42050: PUSH
42051: LD_INT 1
42053: PLUS
42054: PPUSH
42055: LD_INT 2
42057: PPUSH
42058: CALL_OW 1
42062: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42063: LD_VAR 0 9
42067: PPUSH
42068: LD_VAR 0 13
42072: PPUSH
42073: CALL_OW 325
42077: PUSH
42078: LD_VAR 0 10
42082: PPUSH
42083: CALL_OW 255
42087: PPUSH
42088: LD_VAR 0 13
42092: PPUSH
42093: CALL_OW 325
42097: NOT
42098: AND
42099: IFFALSE 42128
// missile := Replace ( missile , missile + 1 , 3 ) ;
42101: LD_ADDR_VAR 0 14
42105: PUSH
42106: LD_VAR 0 14
42110: PPUSH
42111: LD_VAR 0 14
42115: PUSH
42116: LD_INT 1
42118: PLUS
42119: PPUSH
42120: LD_INT 3
42122: PPUSH
42123: CALL_OW 1
42127: ST_TO_ADDR
// if missile < 2 then
42128: LD_VAR 0 14
42132: PUSH
42133: LD_INT 2
42135: LESS
42136: IFFALSE 42140
// exit ;
42138: GO 42362
// x := GetX ( enemy ) ;
42140: LD_ADDR_VAR 0 4
42144: PUSH
42145: LD_VAR 0 10
42149: PPUSH
42150: CALL_OW 250
42154: ST_TO_ADDR
// y := GetY ( enemy ) ;
42155: LD_ADDR_VAR 0 5
42159: PUSH
42160: LD_VAR 0 10
42164: PPUSH
42165: CALL_OW 251
42169: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42170: LD_ADDR_VAR 0 6
42174: PUSH
42175: LD_VAR 0 4
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PPUSH
42184: LD_INT 1
42186: PPUSH
42187: CALL_OW 12
42191: PLUS
42192: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42193: LD_ADDR_VAR 0 7
42197: PUSH
42198: LD_VAR 0 5
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PPUSH
42207: LD_INT 1
42209: PPUSH
42210: CALL_OW 12
42214: PLUS
42215: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42216: LD_VAR 0 6
42220: PPUSH
42221: LD_VAR 0 7
42225: PPUSH
42226: CALL_OW 488
42230: NOT
42231: IFFALSE 42253
// begin _x := x ;
42233: LD_ADDR_VAR 0 6
42237: PUSH
42238: LD_VAR 0 4
42242: ST_TO_ADDR
// _y := y ;
42243: LD_ADDR_VAR 0 7
42247: PUSH
42248: LD_VAR 0 5
42252: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42253: LD_ADDR_VAR 0 3
42257: PUSH
42258: LD_INT 1
42260: PPUSH
42261: LD_VAR 0 14
42265: PPUSH
42266: CALL_OW 12
42270: ST_TO_ADDR
// case i of 1 :
42271: LD_VAR 0 3
42275: PUSH
42276: LD_INT 1
42278: DOUBLE
42279: EQUAL
42280: IFTRUE 42284
42282: GO 42301
42284: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42285: LD_VAR 0 1
42289: PPUSH
42290: LD_VAR 0 10
42294: PPUSH
42295: CALL_OW 115
42299: GO 42362
42301: LD_INT 2
42303: DOUBLE
42304: EQUAL
42305: IFTRUE 42309
42307: GO 42331
42309: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42310: LD_VAR 0 1
42314: PPUSH
42315: LD_VAR 0 6
42319: PPUSH
42320: LD_VAR 0 7
42324: PPUSH
42325: CALL_OW 153
42329: GO 42362
42331: LD_INT 3
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42339
42337: GO 42361
42339: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42340: LD_VAR 0 1
42344: PPUSH
42345: LD_VAR 0 6
42349: PPUSH
42350: LD_VAR 0 7
42354: PPUSH
42355: CALL_OW 154
42359: GO 42362
42361: POP
// end ;
42362: LD_VAR 0 2
42366: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42367: LD_INT 0
42369: PPUSH
42370: PPUSH
42371: PPUSH
42372: PPUSH
42373: PPUSH
42374: PPUSH
// if not unit or not building then
42375: LD_VAR 0 1
42379: NOT
42380: PUSH
42381: LD_VAR 0 2
42385: NOT
42386: OR
42387: IFFALSE 42391
// exit ;
42389: GO 42549
// x := GetX ( building ) ;
42391: LD_ADDR_VAR 0 5
42395: PUSH
42396: LD_VAR 0 2
42400: PPUSH
42401: CALL_OW 250
42405: ST_TO_ADDR
// y := GetY ( building ) ;
42406: LD_ADDR_VAR 0 6
42410: PUSH
42411: LD_VAR 0 2
42415: PPUSH
42416: CALL_OW 251
42420: ST_TO_ADDR
// for i = 0 to 5 do
42421: LD_ADDR_VAR 0 4
42425: PUSH
42426: DOUBLE
42427: LD_INT 0
42429: DEC
42430: ST_TO_ADDR
42431: LD_INT 5
42433: PUSH
42434: FOR_TO
42435: IFFALSE 42547
// begin _x := ShiftX ( x , i , 3 ) ;
42437: LD_ADDR_VAR 0 7
42441: PUSH
42442: LD_VAR 0 5
42446: PPUSH
42447: LD_VAR 0 4
42451: PPUSH
42452: LD_INT 3
42454: PPUSH
42455: CALL_OW 272
42459: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42460: LD_ADDR_VAR 0 8
42464: PUSH
42465: LD_VAR 0 6
42469: PPUSH
42470: LD_VAR 0 4
42474: PPUSH
42475: LD_INT 3
42477: PPUSH
42478: CALL_OW 273
42482: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42483: LD_VAR 0 7
42487: PPUSH
42488: LD_VAR 0 8
42492: PPUSH
42493: CALL_OW 488
42497: NOT
42498: IFFALSE 42502
// continue ;
42500: GO 42434
// if HexInfo ( _x , _y ) = 0 then
42502: LD_VAR 0 7
42506: PPUSH
42507: LD_VAR 0 8
42511: PPUSH
42512: CALL_OW 428
42516: PUSH
42517: LD_INT 0
42519: EQUAL
42520: IFFALSE 42545
// begin ComMoveXY ( unit , _x , _y ) ;
42522: LD_VAR 0 1
42526: PPUSH
42527: LD_VAR 0 7
42531: PPUSH
42532: LD_VAR 0 8
42536: PPUSH
42537: CALL_OW 111
// exit ;
42541: POP
42542: POP
42543: GO 42549
// end ; end ;
42545: GO 42434
42547: POP
42548: POP
// end ;
42549: LD_VAR 0 3
42553: RET
// export function ScanBase ( side , base_area ) ; begin
42554: LD_INT 0
42556: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42557: LD_ADDR_VAR 0 3
42561: PUSH
42562: LD_VAR 0 2
42566: PPUSH
42567: LD_INT 81
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PPUSH
42579: CALL_OW 70
42583: ST_TO_ADDR
// end ;
42584: LD_VAR 0 3
42588: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42589: LD_INT 0
42591: PPUSH
42592: PPUSH
42593: PPUSH
42594: PPUSH
// result := false ;
42595: LD_ADDR_VAR 0 2
42599: PUSH
42600: LD_INT 0
42602: ST_TO_ADDR
// side := GetSide ( unit ) ;
42603: LD_ADDR_VAR 0 3
42607: PUSH
42608: LD_VAR 0 1
42612: PPUSH
42613: CALL_OW 255
42617: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42618: LD_ADDR_VAR 0 4
42622: PUSH
42623: LD_VAR 0 1
42627: PPUSH
42628: CALL_OW 248
42632: ST_TO_ADDR
// case nat of 1 :
42633: LD_VAR 0 4
42637: PUSH
42638: LD_INT 1
42640: DOUBLE
42641: EQUAL
42642: IFTRUE 42646
42644: GO 42657
42646: POP
// tech := tech_lassight ; 2 :
42647: LD_ADDR_VAR 0 5
42651: PUSH
42652: LD_INT 12
42654: ST_TO_ADDR
42655: GO 42696
42657: LD_INT 2
42659: DOUBLE
42660: EQUAL
42661: IFTRUE 42665
42663: GO 42676
42665: POP
// tech := tech_mortar ; 3 :
42666: LD_ADDR_VAR 0 5
42670: PUSH
42671: LD_INT 41
42673: ST_TO_ADDR
42674: GO 42696
42676: LD_INT 3
42678: DOUBLE
42679: EQUAL
42680: IFTRUE 42684
42682: GO 42695
42684: POP
// tech := tech_bazooka ; end ;
42685: LD_ADDR_VAR 0 5
42689: PUSH
42690: LD_INT 44
42692: ST_TO_ADDR
42693: GO 42696
42695: POP
// if Researched ( side , tech ) then
42696: LD_VAR 0 3
42700: PPUSH
42701: LD_VAR 0 5
42705: PPUSH
42706: CALL_OW 325
42710: IFFALSE 42737
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42712: LD_ADDR_VAR 0 2
42716: PUSH
42717: LD_INT 5
42719: PUSH
42720: LD_INT 8
42722: PUSH
42723: LD_INT 9
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: PUSH
42731: LD_VAR 0 4
42735: ARRAY
42736: ST_TO_ADDR
// end ;
42737: LD_VAR 0 2
42741: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42742: LD_INT 0
42744: PPUSH
42745: PPUSH
42746: PPUSH
// if not mines then
42747: LD_VAR 0 2
42751: NOT
42752: IFFALSE 42756
// exit ;
42754: GO 42900
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42756: LD_ADDR_VAR 0 5
42760: PUSH
42761: LD_INT 81
42763: PUSH
42764: LD_VAR 0 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: LD_INT 21
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PPUSH
42794: CALL_OW 69
42798: ST_TO_ADDR
// for i in mines do
42799: LD_ADDR_VAR 0 4
42803: PUSH
42804: LD_VAR 0 2
42808: PUSH
42809: FOR_IN
42810: IFFALSE 42898
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42812: LD_VAR 0 4
42816: PUSH
42817: LD_INT 1
42819: ARRAY
42820: PPUSH
42821: LD_VAR 0 4
42825: PUSH
42826: LD_INT 2
42828: ARRAY
42829: PPUSH
42830: CALL_OW 458
42834: NOT
42835: IFFALSE 42839
// continue ;
42837: GO 42809
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42839: LD_VAR 0 4
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: PPUSH
42848: LD_VAR 0 4
42852: PUSH
42853: LD_INT 2
42855: ARRAY
42856: PPUSH
42857: CALL_OW 428
42861: PUSH
42862: LD_VAR 0 5
42866: IN
42867: IFFALSE 42896
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42869: LD_VAR 0 4
42873: PUSH
42874: LD_INT 1
42876: ARRAY
42877: PPUSH
42878: LD_VAR 0 4
42882: PUSH
42883: LD_INT 2
42885: ARRAY
42886: PPUSH
42887: LD_VAR 0 1
42891: PPUSH
42892: CALL_OW 456
// end ;
42896: GO 42809
42898: POP
42899: POP
// end ;
42900: LD_VAR 0 3
42904: RET
// export function Count ( array ) ; begin
42905: LD_INT 0
42907: PPUSH
// result := array + 0 ;
42908: LD_ADDR_VAR 0 2
42912: PUSH
42913: LD_VAR 0 1
42917: PUSH
42918: LD_INT 0
42920: PLUS
42921: ST_TO_ADDR
// end ;
42922: LD_VAR 0 2
42926: RET
// export function IsEmpty ( building ) ; begin
42927: LD_INT 0
42929: PPUSH
// if not building then
42930: LD_VAR 0 1
42934: NOT
42935: IFFALSE 42939
// exit ;
42937: GO 42982
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42939: LD_ADDR_VAR 0 2
42943: PUSH
42944: LD_VAR 0 1
42948: PUSH
42949: LD_INT 22
42951: PUSH
42952: LD_VAR 0 1
42956: PPUSH
42957: CALL_OW 255
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 58
42968: PUSH
42969: EMPTY
42970: LIST
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PPUSH
42976: CALL_OW 69
42980: IN
42981: ST_TO_ADDR
// end ;
42982: LD_VAR 0 2
42986: RET
// export function IsNotFull ( building ) ; var places ; begin
42987: LD_INT 0
42989: PPUSH
42990: PPUSH
// if not building then
42991: LD_VAR 0 1
42995: NOT
42996: IFFALSE 43000
// exit ;
42998: GO 43028
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43000: LD_ADDR_VAR 0 2
43004: PUSH
43005: LD_VAR 0 1
43009: PPUSH
43010: LD_INT 3
43012: PUSH
43013: LD_INT 62
43015: PUSH
43016: EMPTY
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PPUSH
43023: CALL_OW 72
43027: ST_TO_ADDR
// end ;
43028: LD_VAR 0 2
43032: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43033: LD_INT 0
43035: PPUSH
43036: PPUSH
43037: PPUSH
43038: PPUSH
// tmp := [ ] ;
43039: LD_ADDR_VAR 0 3
43043: PUSH
43044: EMPTY
43045: ST_TO_ADDR
// list := [ ] ;
43046: LD_ADDR_VAR 0 5
43050: PUSH
43051: EMPTY
43052: ST_TO_ADDR
// for i = 16 to 25 do
43053: LD_ADDR_VAR 0 4
43057: PUSH
43058: DOUBLE
43059: LD_INT 16
43061: DEC
43062: ST_TO_ADDR
43063: LD_INT 25
43065: PUSH
43066: FOR_TO
43067: IFFALSE 43140
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43069: LD_ADDR_VAR 0 3
43073: PUSH
43074: LD_VAR 0 3
43078: PUSH
43079: LD_INT 22
43081: PUSH
43082: LD_VAR 0 1
43086: PPUSH
43087: CALL_OW 255
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 91
43098: PUSH
43099: LD_VAR 0 1
43103: PUSH
43104: LD_INT 6
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 30
43114: PUSH
43115: LD_VAR 0 4
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: PPUSH
43132: CALL_OW 69
43136: ADD
43137: ST_TO_ADDR
43138: GO 43066
43140: POP
43141: POP
// for i = 1 to tmp do
43142: LD_ADDR_VAR 0 4
43146: PUSH
43147: DOUBLE
43148: LD_INT 1
43150: DEC
43151: ST_TO_ADDR
43152: LD_VAR 0 3
43156: PUSH
43157: FOR_TO
43158: IFFALSE 43246
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43160: LD_ADDR_VAR 0 5
43164: PUSH
43165: LD_VAR 0 5
43169: PUSH
43170: LD_VAR 0 3
43174: PUSH
43175: LD_VAR 0 4
43179: ARRAY
43180: PPUSH
43181: CALL_OW 266
43185: PUSH
43186: LD_VAR 0 3
43190: PUSH
43191: LD_VAR 0 4
43195: ARRAY
43196: PPUSH
43197: CALL_OW 250
43201: PUSH
43202: LD_VAR 0 3
43206: PUSH
43207: LD_VAR 0 4
43211: ARRAY
43212: PPUSH
43213: CALL_OW 251
43217: PUSH
43218: LD_VAR 0 3
43222: PUSH
43223: LD_VAR 0 4
43227: ARRAY
43228: PPUSH
43229: CALL_OW 254
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: PUSH
43240: EMPTY
43241: LIST
43242: ADD
43243: ST_TO_ADDR
43244: GO 43157
43246: POP
43247: POP
// result := list ;
43248: LD_ADDR_VAR 0 2
43252: PUSH
43253: LD_VAR 0 5
43257: ST_TO_ADDR
// end ;
43258: LD_VAR 0 2
43262: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43263: LD_INT 0
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
// if not factory then
43272: LD_VAR 0 1
43276: NOT
43277: IFFALSE 43281
// exit ;
43279: GO 43874
// if control = control_apeman then
43281: LD_VAR 0 4
43285: PUSH
43286: LD_INT 5
43288: EQUAL
43289: IFFALSE 43398
// begin tmp := UnitsInside ( factory ) ;
43291: LD_ADDR_VAR 0 8
43295: PUSH
43296: LD_VAR 0 1
43300: PPUSH
43301: CALL_OW 313
43305: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43306: LD_VAR 0 8
43310: PPUSH
43311: LD_INT 25
43313: PUSH
43314: LD_INT 12
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PPUSH
43321: CALL_OW 72
43325: NOT
43326: IFFALSE 43336
// control := control_manual ;
43328: LD_ADDR_VAR 0 4
43332: PUSH
43333: LD_INT 1
43335: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43336: LD_ADDR_VAR 0 8
43340: PUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: CALL 43033 0 1
43350: ST_TO_ADDR
// if tmp then
43351: LD_VAR 0 8
43355: IFFALSE 43398
// begin for i in tmp do
43357: LD_ADDR_VAR 0 7
43361: PUSH
43362: LD_VAR 0 8
43366: PUSH
43367: FOR_IN
43368: IFFALSE 43396
// if i [ 1 ] = b_ext_radio then
43370: LD_VAR 0 7
43374: PUSH
43375: LD_INT 1
43377: ARRAY
43378: PUSH
43379: LD_INT 22
43381: EQUAL
43382: IFFALSE 43394
// begin control := control_remote ;
43384: LD_ADDR_VAR 0 4
43388: PUSH
43389: LD_INT 2
43391: ST_TO_ADDR
// break ;
43392: GO 43396
// end ;
43394: GO 43367
43396: POP
43397: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43398: LD_VAR 0 1
43402: PPUSH
43403: LD_VAR 0 2
43407: PPUSH
43408: LD_VAR 0 3
43412: PPUSH
43413: LD_VAR 0 4
43417: PPUSH
43418: LD_VAR 0 5
43422: PPUSH
43423: CALL_OW 448
43427: IFFALSE 43462
// begin result := [ chassis , engine , control , weapon ] ;
43429: LD_ADDR_VAR 0 6
43433: PUSH
43434: LD_VAR 0 2
43438: PUSH
43439: LD_VAR 0 3
43443: PUSH
43444: LD_VAR 0 4
43448: PUSH
43449: LD_VAR 0 5
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// exit ;
43460: GO 43874
// end ; _chassis := AvailableChassisList ( factory ) ;
43462: LD_ADDR_VAR 0 9
43466: PUSH
43467: LD_VAR 0 1
43471: PPUSH
43472: CALL_OW 475
43476: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43477: LD_ADDR_VAR 0 11
43481: PUSH
43482: LD_VAR 0 1
43486: PPUSH
43487: CALL_OW 476
43491: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43492: LD_ADDR_VAR 0 12
43496: PUSH
43497: LD_VAR 0 1
43501: PPUSH
43502: CALL_OW 477
43506: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43507: LD_ADDR_VAR 0 10
43511: PUSH
43512: LD_VAR 0 1
43516: PPUSH
43517: CALL_OW 478
43521: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43522: LD_VAR 0 9
43526: NOT
43527: PUSH
43528: LD_VAR 0 11
43532: NOT
43533: OR
43534: PUSH
43535: LD_VAR 0 12
43539: NOT
43540: OR
43541: PUSH
43542: LD_VAR 0 10
43546: NOT
43547: OR
43548: IFFALSE 43583
// begin result := [ chassis , engine , control , weapon ] ;
43550: LD_ADDR_VAR 0 6
43554: PUSH
43555: LD_VAR 0 2
43559: PUSH
43560: LD_VAR 0 3
43564: PUSH
43565: LD_VAR 0 4
43569: PUSH
43570: LD_VAR 0 5
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: ST_TO_ADDR
// exit ;
43581: GO 43874
// end ; if not chassis in _chassis then
43583: LD_VAR 0 2
43587: PUSH
43588: LD_VAR 0 9
43592: IN
43593: NOT
43594: IFFALSE 43620
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43596: LD_ADDR_VAR 0 2
43600: PUSH
43601: LD_VAR 0 9
43605: PUSH
43606: LD_INT 1
43608: PPUSH
43609: LD_VAR 0 9
43613: PPUSH
43614: CALL_OW 12
43618: ARRAY
43619: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43620: LD_VAR 0 2
43624: PPUSH
43625: LD_VAR 0 3
43629: PPUSH
43630: CALL 43879 0 2
43634: NOT
43635: IFFALSE 43694
// repeat engine := _engine [ 1 ] ;
43637: LD_ADDR_VAR 0 3
43641: PUSH
43642: LD_VAR 0 11
43646: PUSH
43647: LD_INT 1
43649: ARRAY
43650: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43651: LD_ADDR_VAR 0 11
43655: PUSH
43656: LD_VAR 0 11
43660: PPUSH
43661: LD_INT 1
43663: PPUSH
43664: CALL_OW 3
43668: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43669: LD_VAR 0 2
43673: PPUSH
43674: LD_VAR 0 3
43678: PPUSH
43679: CALL 43879 0 2
43683: PUSH
43684: LD_VAR 0 11
43688: PUSH
43689: EMPTY
43690: EQUAL
43691: OR
43692: IFFALSE 43637
// if not control in _control then
43694: LD_VAR 0 4
43698: PUSH
43699: LD_VAR 0 12
43703: IN
43704: NOT
43705: IFFALSE 43731
// control := _control [ rand ( 1 , _control ) ] ;
43707: LD_ADDR_VAR 0 4
43711: PUSH
43712: LD_VAR 0 12
43716: PUSH
43717: LD_INT 1
43719: PPUSH
43720: LD_VAR 0 12
43724: PPUSH
43725: CALL_OW 12
43729: ARRAY
43730: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43731: LD_VAR 0 2
43735: PPUSH
43736: LD_VAR 0 5
43740: PPUSH
43741: CALL 44099 0 2
43745: NOT
43746: IFFALSE 43805
// repeat weapon := _weapon [ 1 ] ;
43748: LD_ADDR_VAR 0 5
43752: PUSH
43753: LD_VAR 0 10
43757: PUSH
43758: LD_INT 1
43760: ARRAY
43761: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43762: LD_ADDR_VAR 0 10
43766: PUSH
43767: LD_VAR 0 10
43771: PPUSH
43772: LD_INT 1
43774: PPUSH
43775: CALL_OW 3
43779: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43780: LD_VAR 0 2
43784: PPUSH
43785: LD_VAR 0 5
43789: PPUSH
43790: CALL 44099 0 2
43794: PUSH
43795: LD_VAR 0 10
43799: PUSH
43800: EMPTY
43801: EQUAL
43802: OR
43803: IFFALSE 43748
// result := [ ] ;
43805: LD_ADDR_VAR 0 6
43809: PUSH
43810: EMPTY
43811: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43812: LD_VAR 0 1
43816: PPUSH
43817: LD_VAR 0 2
43821: PPUSH
43822: LD_VAR 0 3
43826: PPUSH
43827: LD_VAR 0 4
43831: PPUSH
43832: LD_VAR 0 5
43836: PPUSH
43837: CALL_OW 448
43841: IFFALSE 43874
// result := [ chassis , engine , control , weapon ] ;
43843: LD_ADDR_VAR 0 6
43847: PUSH
43848: LD_VAR 0 2
43852: PUSH
43853: LD_VAR 0 3
43857: PUSH
43858: LD_VAR 0 4
43862: PUSH
43863: LD_VAR 0 5
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: ST_TO_ADDR
// end ;
43874: LD_VAR 0 6
43878: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43879: LD_INT 0
43881: PPUSH
// if not chassis or not engine then
43882: LD_VAR 0 1
43886: NOT
43887: PUSH
43888: LD_VAR 0 2
43892: NOT
43893: OR
43894: IFFALSE 43898
// exit ;
43896: GO 44094
// case engine of engine_solar :
43898: LD_VAR 0 2
43902: PUSH
43903: LD_INT 2
43905: DOUBLE
43906: EQUAL
43907: IFTRUE 43911
43909: GO 43949
43911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43912: LD_ADDR_VAR 0 3
43916: PUSH
43917: LD_INT 11
43919: PUSH
43920: LD_INT 12
43922: PUSH
43923: LD_INT 13
43925: PUSH
43926: LD_INT 14
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: ST_TO_ADDR
43947: GO 44078
43949: LD_INT 1
43951: DOUBLE
43952: EQUAL
43953: IFTRUE 43957
43955: GO 44019
43957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43958: LD_ADDR_VAR 0 3
43962: PUSH
43963: LD_INT 11
43965: PUSH
43966: LD_INT 12
43968: PUSH
43969: LD_INT 13
43971: PUSH
43972: LD_INT 14
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 3
43983: PUSH
43984: LD_INT 4
43986: PUSH
43987: LD_INT 5
43989: PUSH
43990: LD_INT 21
43992: PUSH
43993: LD_INT 23
43995: PUSH
43996: LD_INT 22
43998: PUSH
43999: LD_INT 24
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: ST_TO_ADDR
44017: GO 44078
44019: LD_INT 3
44021: DOUBLE
44022: EQUAL
44023: IFTRUE 44027
44025: GO 44077
44027: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44028: LD_ADDR_VAR 0 3
44032: PUSH
44033: LD_INT 13
44035: PUSH
44036: LD_INT 14
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: LD_INT 3
44044: PUSH
44045: LD_INT 4
44047: PUSH
44048: LD_INT 5
44050: PUSH
44051: LD_INT 21
44053: PUSH
44054: LD_INT 22
44056: PUSH
44057: LD_INT 23
44059: PUSH
44060: LD_INT 24
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: ST_TO_ADDR
44075: GO 44078
44077: POP
// result := ( chassis in result ) ;
44078: LD_ADDR_VAR 0 3
44082: PUSH
44083: LD_VAR 0 1
44087: PUSH
44088: LD_VAR 0 3
44092: IN
44093: ST_TO_ADDR
// end ;
44094: LD_VAR 0 3
44098: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44099: LD_INT 0
44101: PPUSH
// if not chassis or not weapon then
44102: LD_VAR 0 1
44106: NOT
44107: PUSH
44108: LD_VAR 0 2
44112: NOT
44113: OR
44114: IFFALSE 44118
// exit ;
44116: GO 45178
// case weapon of us_machine_gun :
44118: LD_VAR 0 2
44122: PUSH
44123: LD_INT 2
44125: DOUBLE
44126: EQUAL
44127: IFTRUE 44131
44129: GO 44161
44131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44132: LD_ADDR_VAR 0 3
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: LD_INT 4
44148: PUSH
44149: LD_INT 5
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: ST_TO_ADDR
44159: GO 45162
44161: LD_INT 3
44163: DOUBLE
44164: EQUAL
44165: IFTRUE 44169
44167: GO 44199
44169: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44170: LD_ADDR_VAR 0 3
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: LD_INT 4
44186: PUSH
44187: LD_INT 5
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
44197: GO 45162
44199: LD_INT 11
44201: DOUBLE
44202: EQUAL
44203: IFTRUE 44207
44205: GO 44237
44207: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44208: LD_ADDR_VAR 0 3
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: LD_INT 4
44224: PUSH
44225: LD_INT 5
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: ST_TO_ADDR
44235: GO 45162
44237: LD_INT 4
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44245
44243: GO 44271
44245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44246: LD_ADDR_VAR 0 3
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 3
44256: PUSH
44257: LD_INT 4
44259: PUSH
44260: LD_INT 5
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: ST_TO_ADDR
44269: GO 45162
44271: LD_INT 5
44273: DOUBLE
44274: EQUAL
44275: IFTRUE 44279
44277: GO 44305
44279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44280: LD_ADDR_VAR 0 3
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: LD_INT 4
44293: PUSH
44294: LD_INT 5
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: ST_TO_ADDR
44303: GO 45162
44305: LD_INT 9
44307: DOUBLE
44308: EQUAL
44309: IFTRUE 44313
44311: GO 44339
44313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44314: LD_ADDR_VAR 0 3
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: LD_INT 4
44327: PUSH
44328: LD_INT 5
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
44337: GO 45162
44339: LD_INT 7
44341: DOUBLE
44342: EQUAL
44343: IFTRUE 44347
44345: GO 44373
44347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44348: LD_ADDR_VAR 0 3
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 4
44361: PUSH
44362: LD_INT 5
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: ST_TO_ADDR
44371: GO 45162
44373: LD_INT 12
44375: DOUBLE
44376: EQUAL
44377: IFTRUE 44381
44379: GO 44407
44381: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44382: LD_ADDR_VAR 0 3
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: LD_INT 4
44395: PUSH
44396: LD_INT 5
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
44405: GO 45162
44407: LD_INT 13
44409: DOUBLE
44410: EQUAL
44411: IFTRUE 44415
44413: GO 44441
44415: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44416: LD_ADDR_VAR 0 3
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: LD_INT 3
44426: PUSH
44427: LD_INT 4
44429: PUSH
44430: LD_INT 5
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: ST_TO_ADDR
44439: GO 45162
44441: LD_INT 14
44443: DOUBLE
44444: EQUAL
44445: IFTRUE 44449
44447: GO 44467
44449: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44450: LD_ADDR_VAR 0 3
44454: PUSH
44455: LD_INT 4
44457: PUSH
44458: LD_INT 5
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: ST_TO_ADDR
44465: GO 45162
44467: LD_INT 6
44469: DOUBLE
44470: EQUAL
44471: IFTRUE 44475
44473: GO 44493
44475: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44476: LD_ADDR_VAR 0 3
44480: PUSH
44481: LD_INT 4
44483: PUSH
44484: LD_INT 5
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: ST_TO_ADDR
44491: GO 45162
44493: LD_INT 10
44495: DOUBLE
44496: EQUAL
44497: IFTRUE 44501
44499: GO 44519
44501: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44502: LD_ADDR_VAR 0 3
44506: PUSH
44507: LD_INT 4
44509: PUSH
44510: LD_INT 5
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: ST_TO_ADDR
44517: GO 45162
44519: LD_INT 22
44521: DOUBLE
44522: EQUAL
44523: IFTRUE 44527
44525: GO 44553
44527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44528: LD_ADDR_VAR 0 3
44532: PUSH
44533: LD_INT 11
44535: PUSH
44536: LD_INT 12
44538: PUSH
44539: LD_INT 13
44541: PUSH
44542: LD_INT 14
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: ST_TO_ADDR
44551: GO 45162
44553: LD_INT 23
44555: DOUBLE
44556: EQUAL
44557: IFTRUE 44561
44559: GO 44587
44561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44562: LD_ADDR_VAR 0 3
44566: PUSH
44567: LD_INT 11
44569: PUSH
44570: LD_INT 12
44572: PUSH
44573: LD_INT 13
44575: PUSH
44576: LD_INT 14
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: ST_TO_ADDR
44585: GO 45162
44587: LD_INT 24
44589: DOUBLE
44590: EQUAL
44591: IFTRUE 44595
44593: GO 44621
44595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44596: LD_ADDR_VAR 0 3
44600: PUSH
44601: LD_INT 11
44603: PUSH
44604: LD_INT 12
44606: PUSH
44607: LD_INT 13
44609: PUSH
44610: LD_INT 14
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: ST_TO_ADDR
44619: GO 45162
44621: LD_INT 30
44623: DOUBLE
44624: EQUAL
44625: IFTRUE 44629
44627: GO 44655
44629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44630: LD_ADDR_VAR 0 3
44634: PUSH
44635: LD_INT 11
44637: PUSH
44638: LD_INT 12
44640: PUSH
44641: LD_INT 13
44643: PUSH
44644: LD_INT 14
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: ST_TO_ADDR
44653: GO 45162
44655: LD_INT 25
44657: DOUBLE
44658: EQUAL
44659: IFTRUE 44663
44661: GO 44681
44663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_INT 13
44671: PUSH
44672: LD_INT 14
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: ST_TO_ADDR
44679: GO 45162
44681: LD_INT 27
44683: DOUBLE
44684: EQUAL
44685: IFTRUE 44689
44687: GO 44707
44689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44690: LD_ADDR_VAR 0 3
44694: PUSH
44695: LD_INT 13
44697: PUSH
44698: LD_INT 14
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: ST_TO_ADDR
44705: GO 45162
44707: LD_INT 92
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44715
44713: GO 44741
44715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44716: LD_ADDR_VAR 0 3
44720: PUSH
44721: LD_INT 11
44723: PUSH
44724: LD_INT 12
44726: PUSH
44727: LD_INT 13
44729: PUSH
44730: LD_INT 14
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
44739: GO 45162
44741: LD_INT 28
44743: DOUBLE
44744: EQUAL
44745: IFTRUE 44749
44747: GO 44767
44749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44750: LD_ADDR_VAR 0 3
44754: PUSH
44755: LD_INT 13
44757: PUSH
44758: LD_INT 14
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: ST_TO_ADDR
44765: GO 45162
44767: LD_INT 29
44769: DOUBLE
44770: EQUAL
44771: IFTRUE 44775
44773: GO 44793
44775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44776: LD_ADDR_VAR 0 3
44780: PUSH
44781: LD_INT 13
44783: PUSH
44784: LD_INT 14
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: ST_TO_ADDR
44791: GO 45162
44793: LD_INT 31
44795: DOUBLE
44796: EQUAL
44797: IFTRUE 44801
44799: GO 44819
44801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44802: LD_ADDR_VAR 0 3
44806: PUSH
44807: LD_INT 13
44809: PUSH
44810: LD_INT 14
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: ST_TO_ADDR
44817: GO 45162
44819: LD_INT 26
44821: DOUBLE
44822: EQUAL
44823: IFTRUE 44827
44825: GO 44845
44827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44828: LD_ADDR_VAR 0 3
44832: PUSH
44833: LD_INT 13
44835: PUSH
44836: LD_INT 14
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: ST_TO_ADDR
44843: GO 45162
44845: LD_INT 42
44847: DOUBLE
44848: EQUAL
44849: IFTRUE 44853
44851: GO 44879
44853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44854: LD_ADDR_VAR 0 3
44858: PUSH
44859: LD_INT 21
44861: PUSH
44862: LD_INT 22
44864: PUSH
44865: LD_INT 23
44867: PUSH
44868: LD_INT 24
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
44877: GO 45162
44879: LD_INT 43
44881: DOUBLE
44882: EQUAL
44883: IFTRUE 44887
44885: GO 44913
44887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44888: LD_ADDR_VAR 0 3
44892: PUSH
44893: LD_INT 21
44895: PUSH
44896: LD_INT 22
44898: PUSH
44899: LD_INT 23
44901: PUSH
44902: LD_INT 24
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
44911: GO 45162
44913: LD_INT 44
44915: DOUBLE
44916: EQUAL
44917: IFTRUE 44921
44919: GO 44947
44921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44922: LD_ADDR_VAR 0 3
44926: PUSH
44927: LD_INT 21
44929: PUSH
44930: LD_INT 22
44932: PUSH
44933: LD_INT 23
44935: PUSH
44936: LD_INT 24
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: ST_TO_ADDR
44945: GO 45162
44947: LD_INT 45
44949: DOUBLE
44950: EQUAL
44951: IFTRUE 44955
44953: GO 44981
44955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44956: LD_ADDR_VAR 0 3
44960: PUSH
44961: LD_INT 21
44963: PUSH
44964: LD_INT 22
44966: PUSH
44967: LD_INT 23
44969: PUSH
44970: LD_INT 24
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
44979: GO 45162
44981: LD_INT 49
44983: DOUBLE
44984: EQUAL
44985: IFTRUE 44989
44987: GO 45015
44989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44990: LD_ADDR_VAR 0 3
44994: PUSH
44995: LD_INT 21
44997: PUSH
44998: LD_INT 22
45000: PUSH
45001: LD_INT 23
45003: PUSH
45004: LD_INT 24
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
45013: GO 45162
45015: LD_INT 51
45017: DOUBLE
45018: EQUAL
45019: IFTRUE 45023
45021: GO 45049
45023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45024: LD_ADDR_VAR 0 3
45028: PUSH
45029: LD_INT 21
45031: PUSH
45032: LD_INT 22
45034: PUSH
45035: LD_INT 23
45037: PUSH
45038: LD_INT 24
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: ST_TO_ADDR
45047: GO 45162
45049: LD_INT 52
45051: DOUBLE
45052: EQUAL
45053: IFTRUE 45057
45055: GO 45083
45057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45058: LD_ADDR_VAR 0 3
45062: PUSH
45063: LD_INT 21
45065: PUSH
45066: LD_INT 22
45068: PUSH
45069: LD_INT 23
45071: PUSH
45072: LD_INT 24
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: ST_TO_ADDR
45081: GO 45162
45083: LD_INT 53
45085: DOUBLE
45086: EQUAL
45087: IFTRUE 45091
45089: GO 45109
45091: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45092: LD_ADDR_VAR 0 3
45096: PUSH
45097: LD_INT 23
45099: PUSH
45100: LD_INT 24
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: ST_TO_ADDR
45107: GO 45162
45109: LD_INT 46
45111: DOUBLE
45112: EQUAL
45113: IFTRUE 45117
45115: GO 45135
45117: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45118: LD_ADDR_VAR 0 3
45122: PUSH
45123: LD_INT 23
45125: PUSH
45126: LD_INT 24
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: ST_TO_ADDR
45133: GO 45162
45135: LD_INT 47
45137: DOUBLE
45138: EQUAL
45139: IFTRUE 45143
45141: GO 45161
45143: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45144: LD_ADDR_VAR 0 3
45148: PUSH
45149: LD_INT 23
45151: PUSH
45152: LD_INT 24
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: ST_TO_ADDR
45159: GO 45162
45161: POP
// result := ( chassis in result ) ;
45162: LD_ADDR_VAR 0 3
45166: PUSH
45167: LD_VAR 0 1
45171: PUSH
45172: LD_VAR 0 3
45176: IN
45177: ST_TO_ADDR
// end ;
45178: LD_VAR 0 3
45182: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45183: LD_INT 0
45185: PPUSH
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
// result := array ;
45192: LD_ADDR_VAR 0 5
45196: PUSH
45197: LD_VAR 0 1
45201: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45202: LD_VAR 0 1
45206: NOT
45207: PUSH
45208: LD_VAR 0 2
45212: NOT
45213: OR
45214: PUSH
45215: LD_VAR 0 3
45219: NOT
45220: OR
45221: PUSH
45222: LD_VAR 0 2
45226: PUSH
45227: LD_VAR 0 1
45231: GREATER
45232: OR
45233: PUSH
45234: LD_VAR 0 3
45238: PUSH
45239: LD_VAR 0 1
45243: GREATER
45244: OR
45245: IFFALSE 45249
// exit ;
45247: GO 45545
// if direction then
45249: LD_VAR 0 4
45253: IFFALSE 45317
// begin d := 1 ;
45255: LD_ADDR_VAR 0 9
45259: PUSH
45260: LD_INT 1
45262: ST_TO_ADDR
// if i_from > i_to then
45263: LD_VAR 0 2
45267: PUSH
45268: LD_VAR 0 3
45272: GREATER
45273: IFFALSE 45299
// length := ( array - i_from ) + i_to else
45275: LD_ADDR_VAR 0 11
45279: PUSH
45280: LD_VAR 0 1
45284: PUSH
45285: LD_VAR 0 2
45289: MINUS
45290: PUSH
45291: LD_VAR 0 3
45295: PLUS
45296: ST_TO_ADDR
45297: GO 45315
// length := i_to - i_from ;
45299: LD_ADDR_VAR 0 11
45303: PUSH
45304: LD_VAR 0 3
45308: PUSH
45309: LD_VAR 0 2
45313: MINUS
45314: ST_TO_ADDR
// end else
45315: GO 45378
// begin d := - 1 ;
45317: LD_ADDR_VAR 0 9
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: ST_TO_ADDR
// if i_from > i_to then
45326: LD_VAR 0 2
45330: PUSH
45331: LD_VAR 0 3
45335: GREATER
45336: IFFALSE 45356
// length := i_from - i_to else
45338: LD_ADDR_VAR 0 11
45342: PUSH
45343: LD_VAR 0 2
45347: PUSH
45348: LD_VAR 0 3
45352: MINUS
45353: ST_TO_ADDR
45354: GO 45378
// length := ( array - i_to ) + i_from ;
45356: LD_ADDR_VAR 0 11
45360: PUSH
45361: LD_VAR 0 1
45365: PUSH
45366: LD_VAR 0 3
45370: MINUS
45371: PUSH
45372: LD_VAR 0 2
45376: PLUS
45377: ST_TO_ADDR
// end ; if not length then
45378: LD_VAR 0 11
45382: NOT
45383: IFFALSE 45387
// exit ;
45385: GO 45545
// tmp := array ;
45387: LD_ADDR_VAR 0 10
45391: PUSH
45392: LD_VAR 0 1
45396: ST_TO_ADDR
// for i = 1 to length do
45397: LD_ADDR_VAR 0 6
45401: PUSH
45402: DOUBLE
45403: LD_INT 1
45405: DEC
45406: ST_TO_ADDR
45407: LD_VAR 0 11
45411: PUSH
45412: FOR_TO
45413: IFFALSE 45533
// begin for j = 1 to array do
45415: LD_ADDR_VAR 0 7
45419: PUSH
45420: DOUBLE
45421: LD_INT 1
45423: DEC
45424: ST_TO_ADDR
45425: LD_VAR 0 1
45429: PUSH
45430: FOR_TO
45431: IFFALSE 45519
// begin k := j + d ;
45433: LD_ADDR_VAR 0 8
45437: PUSH
45438: LD_VAR 0 7
45442: PUSH
45443: LD_VAR 0 9
45447: PLUS
45448: ST_TO_ADDR
// if k > array then
45449: LD_VAR 0 8
45453: PUSH
45454: LD_VAR 0 1
45458: GREATER
45459: IFFALSE 45469
// k := 1 ;
45461: LD_ADDR_VAR 0 8
45465: PUSH
45466: LD_INT 1
45468: ST_TO_ADDR
// if not k then
45469: LD_VAR 0 8
45473: NOT
45474: IFFALSE 45486
// k := array ;
45476: LD_ADDR_VAR 0 8
45480: PUSH
45481: LD_VAR 0 1
45485: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45486: LD_ADDR_VAR 0 10
45490: PUSH
45491: LD_VAR 0 10
45495: PPUSH
45496: LD_VAR 0 8
45500: PPUSH
45501: LD_VAR 0 1
45505: PUSH
45506: LD_VAR 0 7
45510: ARRAY
45511: PPUSH
45512: CALL_OW 1
45516: ST_TO_ADDR
// end ;
45517: GO 45430
45519: POP
45520: POP
// array := tmp ;
45521: LD_ADDR_VAR 0 1
45525: PUSH
45526: LD_VAR 0 10
45530: ST_TO_ADDR
// end ;
45531: GO 45412
45533: POP
45534: POP
// result := array ;
45535: LD_ADDR_VAR 0 5
45539: PUSH
45540: LD_VAR 0 1
45544: ST_TO_ADDR
// end ;
45545: LD_VAR 0 5
45549: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45550: LD_INT 0
45552: PPUSH
45553: PPUSH
// result := 0 ;
45554: LD_ADDR_VAR 0 3
45558: PUSH
45559: LD_INT 0
45561: ST_TO_ADDR
// if not array or not value in array then
45562: LD_VAR 0 1
45566: NOT
45567: PUSH
45568: LD_VAR 0 2
45572: PUSH
45573: LD_VAR 0 1
45577: IN
45578: NOT
45579: OR
45580: IFFALSE 45584
// exit ;
45582: GO 45638
// for i = 1 to array do
45584: LD_ADDR_VAR 0 4
45588: PUSH
45589: DOUBLE
45590: LD_INT 1
45592: DEC
45593: ST_TO_ADDR
45594: LD_VAR 0 1
45598: PUSH
45599: FOR_TO
45600: IFFALSE 45636
// if value = array [ i ] then
45602: LD_VAR 0 2
45606: PUSH
45607: LD_VAR 0 1
45611: PUSH
45612: LD_VAR 0 4
45616: ARRAY
45617: EQUAL
45618: IFFALSE 45634
// begin result := i ;
45620: LD_ADDR_VAR 0 3
45624: PUSH
45625: LD_VAR 0 4
45629: ST_TO_ADDR
// exit ;
45630: POP
45631: POP
45632: GO 45638
// end ;
45634: GO 45599
45636: POP
45637: POP
// end ;
45638: LD_VAR 0 3
45642: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45643: LD_INT 0
45645: PPUSH
// vc_chassis := chassis ;
45646: LD_ADDR_OWVAR 37
45650: PUSH
45651: LD_VAR 0 1
45655: ST_TO_ADDR
// vc_engine := engine ;
45656: LD_ADDR_OWVAR 39
45660: PUSH
45661: LD_VAR 0 2
45665: ST_TO_ADDR
// vc_control := control ;
45666: LD_ADDR_OWVAR 38
45670: PUSH
45671: LD_VAR 0 3
45675: ST_TO_ADDR
// vc_weapon := weapon ;
45676: LD_ADDR_OWVAR 40
45680: PUSH
45681: LD_VAR 0 4
45685: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45686: LD_ADDR_OWVAR 41
45690: PUSH
45691: LD_VAR 0 5
45695: ST_TO_ADDR
// end ;
45696: LD_VAR 0 6
45700: RET
// export function WantPlant ( unit ) ; var task ; begin
45701: LD_INT 0
45703: PPUSH
45704: PPUSH
// result := false ;
45705: LD_ADDR_VAR 0 2
45709: PUSH
45710: LD_INT 0
45712: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45713: LD_ADDR_VAR 0 3
45717: PUSH
45718: LD_VAR 0 1
45722: PPUSH
45723: CALL_OW 437
45727: ST_TO_ADDR
// if task then
45728: LD_VAR 0 3
45732: IFFALSE 45760
// if task [ 1 ] [ 1 ] = p then
45734: LD_VAR 0 3
45738: PUSH
45739: LD_INT 1
45741: ARRAY
45742: PUSH
45743: LD_INT 1
45745: ARRAY
45746: PUSH
45747: LD_STRING p
45749: EQUAL
45750: IFFALSE 45760
// result := true ;
45752: LD_ADDR_VAR 0 2
45756: PUSH
45757: LD_INT 1
45759: ST_TO_ADDR
// end ;
45760: LD_VAR 0 2
45764: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45765: LD_INT 0
45767: PPUSH
45768: PPUSH
45769: PPUSH
45770: PPUSH
// if pos < 1 then
45771: LD_VAR 0 2
45775: PUSH
45776: LD_INT 1
45778: LESS
45779: IFFALSE 45783
// exit ;
45781: GO 46086
// if pos = 1 then
45783: LD_VAR 0 2
45787: PUSH
45788: LD_INT 1
45790: EQUAL
45791: IFFALSE 45824
// result := Replace ( arr , pos [ 1 ] , value ) else
45793: LD_ADDR_VAR 0 4
45797: PUSH
45798: LD_VAR 0 1
45802: PPUSH
45803: LD_VAR 0 2
45807: PUSH
45808: LD_INT 1
45810: ARRAY
45811: PPUSH
45812: LD_VAR 0 3
45816: PPUSH
45817: CALL_OW 1
45821: ST_TO_ADDR
45822: GO 46086
// begin tmp := arr ;
45824: LD_ADDR_VAR 0 6
45828: PUSH
45829: LD_VAR 0 1
45833: ST_TO_ADDR
// s_arr := [ tmp ] ;
45834: LD_ADDR_VAR 0 7
45838: PUSH
45839: LD_VAR 0 6
45843: PUSH
45844: EMPTY
45845: LIST
45846: ST_TO_ADDR
// for i = 1 to pos - 1 do
45847: LD_ADDR_VAR 0 5
45851: PUSH
45852: DOUBLE
45853: LD_INT 1
45855: DEC
45856: ST_TO_ADDR
45857: LD_VAR 0 2
45861: PUSH
45862: LD_INT 1
45864: MINUS
45865: PUSH
45866: FOR_TO
45867: IFFALSE 45912
// begin tmp := tmp [ pos [ i ] ] ;
45869: LD_ADDR_VAR 0 6
45873: PUSH
45874: LD_VAR 0 6
45878: PUSH
45879: LD_VAR 0 2
45883: PUSH
45884: LD_VAR 0 5
45888: ARRAY
45889: ARRAY
45890: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45891: LD_ADDR_VAR 0 7
45895: PUSH
45896: LD_VAR 0 7
45900: PUSH
45901: LD_VAR 0 6
45905: PUSH
45906: EMPTY
45907: LIST
45908: ADD
45909: ST_TO_ADDR
// end ;
45910: GO 45866
45912: POP
45913: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45914: LD_ADDR_VAR 0 6
45918: PUSH
45919: LD_VAR 0 6
45923: PPUSH
45924: LD_VAR 0 2
45928: PUSH
45929: LD_VAR 0 2
45933: ARRAY
45934: PPUSH
45935: LD_VAR 0 3
45939: PPUSH
45940: CALL_OW 1
45944: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45945: LD_ADDR_VAR 0 7
45949: PUSH
45950: LD_VAR 0 7
45954: PPUSH
45955: LD_VAR 0 7
45959: PPUSH
45960: LD_VAR 0 6
45964: PPUSH
45965: CALL_OW 1
45969: ST_TO_ADDR
// for i = s_arr downto 2 do
45970: LD_ADDR_VAR 0 5
45974: PUSH
45975: DOUBLE
45976: LD_VAR 0 7
45980: INC
45981: ST_TO_ADDR
45982: LD_INT 2
45984: PUSH
45985: FOR_DOWNTO
45986: IFFALSE 46070
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45988: LD_ADDR_VAR 0 6
45992: PUSH
45993: LD_VAR 0 7
45997: PUSH
45998: LD_VAR 0 5
46002: PUSH
46003: LD_INT 1
46005: MINUS
46006: ARRAY
46007: PPUSH
46008: LD_VAR 0 2
46012: PUSH
46013: LD_VAR 0 5
46017: PUSH
46018: LD_INT 1
46020: MINUS
46021: ARRAY
46022: PPUSH
46023: LD_VAR 0 7
46027: PUSH
46028: LD_VAR 0 5
46032: ARRAY
46033: PPUSH
46034: CALL_OW 1
46038: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46039: LD_ADDR_VAR 0 7
46043: PUSH
46044: LD_VAR 0 7
46048: PPUSH
46049: LD_VAR 0 5
46053: PUSH
46054: LD_INT 1
46056: MINUS
46057: PPUSH
46058: LD_VAR 0 6
46062: PPUSH
46063: CALL_OW 1
46067: ST_TO_ADDR
// end ;
46068: GO 45985
46070: POP
46071: POP
// result := s_arr [ 1 ] ;
46072: LD_ADDR_VAR 0 4
46076: PUSH
46077: LD_VAR 0 7
46081: PUSH
46082: LD_INT 1
46084: ARRAY
46085: ST_TO_ADDR
// end ; end ;
46086: LD_VAR 0 4
46090: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46091: LD_INT 0
46093: PPUSH
46094: PPUSH
// if not list then
46095: LD_VAR 0 1
46099: NOT
46100: IFFALSE 46104
// exit ;
46102: GO 46195
// i := list [ pos1 ] ;
46104: LD_ADDR_VAR 0 5
46108: PUSH
46109: LD_VAR 0 1
46113: PUSH
46114: LD_VAR 0 2
46118: ARRAY
46119: ST_TO_ADDR
// if not i then
46120: LD_VAR 0 5
46124: NOT
46125: IFFALSE 46129
// exit ;
46127: GO 46195
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46129: LD_ADDR_VAR 0 1
46133: PUSH
46134: LD_VAR 0 1
46138: PPUSH
46139: LD_VAR 0 2
46143: PPUSH
46144: LD_VAR 0 1
46148: PUSH
46149: LD_VAR 0 3
46153: ARRAY
46154: PPUSH
46155: CALL_OW 1
46159: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46160: LD_ADDR_VAR 0 1
46164: PUSH
46165: LD_VAR 0 1
46169: PPUSH
46170: LD_VAR 0 3
46174: PPUSH
46175: LD_VAR 0 5
46179: PPUSH
46180: CALL_OW 1
46184: ST_TO_ADDR
// result := list ;
46185: LD_ADDR_VAR 0 4
46189: PUSH
46190: LD_VAR 0 1
46194: ST_TO_ADDR
// end ;
46195: LD_VAR 0 4
46199: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46200: LD_INT 0
46202: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46203: LD_ADDR_VAR 0 5
46207: PUSH
46208: LD_VAR 0 1
46212: PPUSH
46213: CALL_OW 250
46217: PPUSH
46218: LD_VAR 0 1
46222: PPUSH
46223: CALL_OW 251
46227: PPUSH
46228: LD_VAR 0 2
46232: PPUSH
46233: LD_VAR 0 3
46237: PPUSH
46238: LD_VAR 0 4
46242: PPUSH
46243: CALL 46621 0 5
46247: ST_TO_ADDR
// end ;
46248: LD_VAR 0 5
46252: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46253: LD_INT 0
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
// if not list or not unit then
46259: LD_VAR 0 2
46263: NOT
46264: PUSH
46265: LD_VAR 0 1
46269: NOT
46270: OR
46271: IFFALSE 46275
// exit ;
46273: GO 46616
// result := [ ] ;
46275: LD_ADDR_VAR 0 5
46279: PUSH
46280: EMPTY
46281: ST_TO_ADDR
// for i in list do
46282: LD_ADDR_VAR 0 6
46286: PUSH
46287: LD_VAR 0 2
46291: PUSH
46292: FOR_IN
46293: IFFALSE 46511
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46295: LD_ADDR_VAR 0 8
46299: PUSH
46300: LD_VAR 0 1
46304: PPUSH
46305: LD_VAR 0 6
46309: PUSH
46310: LD_INT 1
46312: ARRAY
46313: PPUSH
46314: LD_VAR 0 6
46318: PUSH
46319: LD_INT 2
46321: ARRAY
46322: PPUSH
46323: CALL_OW 297
46327: ST_TO_ADDR
// if not Count ( result ) then
46328: LD_VAR 0 5
46332: PPUSH
46333: CALL 42905 0 1
46337: NOT
46338: IFFALSE 46371
// begin result := Join ( result , [ i , tmp ] ) ;
46340: LD_ADDR_VAR 0 5
46344: PUSH
46345: LD_VAR 0 5
46349: PPUSH
46350: LD_VAR 0 6
46354: PUSH
46355: LD_VAR 0 8
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PPUSH
46364: CALL 78505 0 2
46368: ST_TO_ADDR
// continue ;
46369: GO 46292
// end ; if result [ result ] [ 2 ] <= tmp then
46371: LD_VAR 0 5
46375: PUSH
46376: LD_VAR 0 5
46380: ARRAY
46381: PUSH
46382: LD_INT 2
46384: ARRAY
46385: PUSH
46386: LD_VAR 0 8
46390: LESSEQUAL
46391: IFFALSE 46424
// result := Join ( result , [ i , tmp ] ) else
46393: LD_ADDR_VAR 0 5
46397: PUSH
46398: LD_VAR 0 5
46402: PPUSH
46403: LD_VAR 0 6
46407: PUSH
46408: LD_VAR 0 8
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PPUSH
46417: CALL 78505 0 2
46421: ST_TO_ADDR
46422: GO 46509
// begin for j := 1 to Count ( result ) do
46424: LD_ADDR_VAR 0 7
46428: PUSH
46429: DOUBLE
46430: LD_INT 1
46432: DEC
46433: ST_TO_ADDR
46434: LD_VAR 0 5
46438: PPUSH
46439: CALL 42905 0 1
46443: PUSH
46444: FOR_TO
46445: IFFALSE 46507
// begin if tmp < result [ j ] [ 2 ] then
46447: LD_VAR 0 8
46451: PUSH
46452: LD_VAR 0 5
46456: PUSH
46457: LD_VAR 0 7
46461: ARRAY
46462: PUSH
46463: LD_INT 2
46465: ARRAY
46466: LESS
46467: IFFALSE 46505
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46469: LD_ADDR_VAR 0 5
46473: PUSH
46474: LD_VAR 0 5
46478: PPUSH
46479: LD_VAR 0 7
46483: PPUSH
46484: LD_VAR 0 6
46488: PUSH
46489: LD_VAR 0 8
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PPUSH
46498: CALL_OW 2
46502: ST_TO_ADDR
// break ;
46503: GO 46507
// end ; end ;
46505: GO 46444
46507: POP
46508: POP
// end ; end ;
46509: GO 46292
46511: POP
46512: POP
// if result and not asc then
46513: LD_VAR 0 5
46517: PUSH
46518: LD_VAR 0 3
46522: NOT
46523: AND
46524: IFFALSE 46541
// result := ReverseArray ( result ) ;
46526: LD_ADDR_VAR 0 5
46530: PUSH
46531: LD_VAR 0 5
46535: PPUSH
46536: CALL 73781 0 1
46540: ST_TO_ADDR
// tmp := [ ] ;
46541: LD_ADDR_VAR 0 8
46545: PUSH
46546: EMPTY
46547: ST_TO_ADDR
// if mode then
46548: LD_VAR 0 4
46552: IFFALSE 46616
// begin for i := 1 to result do
46554: LD_ADDR_VAR 0 6
46558: PUSH
46559: DOUBLE
46560: LD_INT 1
46562: DEC
46563: ST_TO_ADDR
46564: LD_VAR 0 5
46568: PUSH
46569: FOR_TO
46570: IFFALSE 46604
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46572: LD_ADDR_VAR 0 8
46576: PUSH
46577: LD_VAR 0 8
46581: PPUSH
46582: LD_VAR 0 5
46586: PUSH
46587: LD_VAR 0 6
46591: ARRAY
46592: PUSH
46593: LD_INT 1
46595: ARRAY
46596: PPUSH
46597: CALL 78505 0 2
46601: ST_TO_ADDR
46602: GO 46569
46604: POP
46605: POP
// result := tmp ;
46606: LD_ADDR_VAR 0 5
46610: PUSH
46611: LD_VAR 0 8
46615: ST_TO_ADDR
// end ; end ;
46616: LD_VAR 0 5
46620: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46621: LD_INT 0
46623: PPUSH
46624: PPUSH
46625: PPUSH
46626: PPUSH
// if not list then
46627: LD_VAR 0 3
46631: NOT
46632: IFFALSE 46636
// exit ;
46634: GO 47024
// result := [ ] ;
46636: LD_ADDR_VAR 0 6
46640: PUSH
46641: EMPTY
46642: ST_TO_ADDR
// for i in list do
46643: LD_ADDR_VAR 0 7
46647: PUSH
46648: LD_VAR 0 3
46652: PUSH
46653: FOR_IN
46654: IFFALSE 46856
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46656: LD_ADDR_VAR 0 9
46660: PUSH
46661: LD_VAR 0 7
46665: PPUSH
46666: LD_VAR 0 1
46670: PPUSH
46671: LD_VAR 0 2
46675: PPUSH
46676: CALL_OW 297
46680: ST_TO_ADDR
// if not result then
46681: LD_VAR 0 6
46685: NOT
46686: IFFALSE 46712
// result := [ [ i , tmp ] ] else
46688: LD_ADDR_VAR 0 6
46692: PUSH
46693: LD_VAR 0 7
46697: PUSH
46698: LD_VAR 0 9
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: ST_TO_ADDR
46710: GO 46854
// begin if result [ result ] [ 2 ] < tmp then
46712: LD_VAR 0 6
46716: PUSH
46717: LD_VAR 0 6
46721: ARRAY
46722: PUSH
46723: LD_INT 2
46725: ARRAY
46726: PUSH
46727: LD_VAR 0 9
46731: LESS
46732: IFFALSE 46774
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46734: LD_ADDR_VAR 0 6
46738: PUSH
46739: LD_VAR 0 6
46743: PPUSH
46744: LD_VAR 0 6
46748: PUSH
46749: LD_INT 1
46751: PLUS
46752: PPUSH
46753: LD_VAR 0 7
46757: PUSH
46758: LD_VAR 0 9
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PPUSH
46767: CALL_OW 2
46771: ST_TO_ADDR
46772: GO 46854
// for j = 1 to result do
46774: LD_ADDR_VAR 0 8
46778: PUSH
46779: DOUBLE
46780: LD_INT 1
46782: DEC
46783: ST_TO_ADDR
46784: LD_VAR 0 6
46788: PUSH
46789: FOR_TO
46790: IFFALSE 46852
// begin if tmp < result [ j ] [ 2 ] then
46792: LD_VAR 0 9
46796: PUSH
46797: LD_VAR 0 6
46801: PUSH
46802: LD_VAR 0 8
46806: ARRAY
46807: PUSH
46808: LD_INT 2
46810: ARRAY
46811: LESS
46812: IFFALSE 46850
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46814: LD_ADDR_VAR 0 6
46818: PUSH
46819: LD_VAR 0 6
46823: PPUSH
46824: LD_VAR 0 8
46828: PPUSH
46829: LD_VAR 0 7
46833: PUSH
46834: LD_VAR 0 9
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PPUSH
46843: CALL_OW 2
46847: ST_TO_ADDR
// break ;
46848: GO 46852
// end ; end ;
46850: GO 46789
46852: POP
46853: POP
// end ; end ;
46854: GO 46653
46856: POP
46857: POP
// if result and not asc then
46858: LD_VAR 0 6
46862: PUSH
46863: LD_VAR 0 4
46867: NOT
46868: AND
46869: IFFALSE 46944
// begin tmp := result ;
46871: LD_ADDR_VAR 0 9
46875: PUSH
46876: LD_VAR 0 6
46880: ST_TO_ADDR
// for i = tmp downto 1 do
46881: LD_ADDR_VAR 0 7
46885: PUSH
46886: DOUBLE
46887: LD_VAR 0 9
46891: INC
46892: ST_TO_ADDR
46893: LD_INT 1
46895: PUSH
46896: FOR_DOWNTO
46897: IFFALSE 46942
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46899: LD_ADDR_VAR 0 6
46903: PUSH
46904: LD_VAR 0 6
46908: PPUSH
46909: LD_VAR 0 9
46913: PUSH
46914: LD_VAR 0 7
46918: MINUS
46919: PUSH
46920: LD_INT 1
46922: PLUS
46923: PPUSH
46924: LD_VAR 0 9
46928: PUSH
46929: LD_VAR 0 7
46933: ARRAY
46934: PPUSH
46935: CALL_OW 1
46939: ST_TO_ADDR
46940: GO 46896
46942: POP
46943: POP
// end ; tmp := [ ] ;
46944: LD_ADDR_VAR 0 9
46948: PUSH
46949: EMPTY
46950: ST_TO_ADDR
// if mode then
46951: LD_VAR 0 5
46955: IFFALSE 47024
// begin for i = 1 to result do
46957: LD_ADDR_VAR 0 7
46961: PUSH
46962: DOUBLE
46963: LD_INT 1
46965: DEC
46966: ST_TO_ADDR
46967: LD_VAR 0 6
46971: PUSH
46972: FOR_TO
46973: IFFALSE 47012
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46975: LD_ADDR_VAR 0 9
46979: PUSH
46980: LD_VAR 0 9
46984: PPUSH
46985: LD_VAR 0 7
46989: PPUSH
46990: LD_VAR 0 6
46994: PUSH
46995: LD_VAR 0 7
46999: ARRAY
47000: PUSH
47001: LD_INT 1
47003: ARRAY
47004: PPUSH
47005: CALL_OW 1
47009: ST_TO_ADDR
47010: GO 46972
47012: POP
47013: POP
// result := tmp ;
47014: LD_ADDR_VAR 0 6
47018: PUSH
47019: LD_VAR 0 9
47023: ST_TO_ADDR
// end ; end ;
47024: LD_VAR 0 6
47028: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47029: LD_INT 0
47031: PPUSH
47032: PPUSH
47033: PPUSH
47034: PPUSH
47035: PPUSH
47036: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47037: LD_ADDR_VAR 0 5
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: ST_TO_ADDR
// if not x or not y then
47059: LD_VAR 0 2
47063: NOT
47064: PUSH
47065: LD_VAR 0 3
47069: NOT
47070: OR
47071: IFFALSE 47075
// exit ;
47073: GO 48725
// if not range then
47075: LD_VAR 0 4
47079: NOT
47080: IFFALSE 47090
// range := 10 ;
47082: LD_ADDR_VAR 0 4
47086: PUSH
47087: LD_INT 10
47089: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47090: LD_ADDR_VAR 0 8
47094: PUSH
47095: LD_INT 81
47097: PUSH
47098: LD_VAR 0 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 92
47109: PUSH
47110: LD_VAR 0 2
47114: PUSH
47115: LD_VAR 0 3
47119: PUSH
47120: LD_VAR 0 4
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: LD_INT 21
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: PPUSH
47153: CALL_OW 69
47157: ST_TO_ADDR
// if not tmp then
47158: LD_VAR 0 8
47162: NOT
47163: IFFALSE 47167
// exit ;
47165: GO 48725
// for i in tmp do
47167: LD_ADDR_VAR 0 6
47171: PUSH
47172: LD_VAR 0 8
47176: PUSH
47177: FOR_IN
47178: IFFALSE 48700
// begin points := [ 0 , 0 , 0 ] ;
47180: LD_ADDR_VAR 0 9
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// bpoints := 1 ;
47199: LD_ADDR_VAR 0 10
47203: PUSH
47204: LD_INT 1
47206: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47207: LD_VAR 0 6
47211: PPUSH
47212: CALL_OW 247
47216: PUSH
47217: LD_INT 1
47219: DOUBLE
47220: EQUAL
47221: IFTRUE 47225
47223: GO 47803
47225: POP
// begin if GetClass ( i ) = 1 then
47226: LD_VAR 0 6
47230: PPUSH
47231: CALL_OW 257
47235: PUSH
47236: LD_INT 1
47238: EQUAL
47239: IFFALSE 47260
// points := [ 10 , 5 , 3 ] ;
47241: LD_ADDR_VAR 0 9
47245: PUSH
47246: LD_INT 10
47248: PUSH
47249: LD_INT 5
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47260: LD_VAR 0 6
47264: PPUSH
47265: CALL_OW 257
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: IN
47284: IFFALSE 47305
// points := [ 3 , 2 , 1 ] ;
47286: LD_ADDR_VAR 0 9
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47305: LD_VAR 0 6
47309: PPUSH
47310: CALL_OW 257
47314: PUSH
47315: LD_INT 5
47317: EQUAL
47318: IFFALSE 47339
// points := [ 130 , 5 , 2 ] ;
47320: LD_ADDR_VAR 0 9
47324: PUSH
47325: LD_INT 130
47327: PUSH
47328: LD_INT 5
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47339: LD_VAR 0 6
47343: PPUSH
47344: CALL_OW 257
47348: PUSH
47349: LD_INT 8
47351: EQUAL
47352: IFFALSE 47373
// points := [ 35 , 35 , 30 ] ;
47354: LD_ADDR_VAR 0 9
47358: PUSH
47359: LD_INT 35
47361: PUSH
47362: LD_INT 35
47364: PUSH
47365: LD_INT 30
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47373: LD_VAR 0 6
47377: PPUSH
47378: CALL_OW 257
47382: PUSH
47383: LD_INT 9
47385: EQUAL
47386: IFFALSE 47407
// points := [ 20 , 55 , 40 ] ;
47388: LD_ADDR_VAR 0 9
47392: PUSH
47393: LD_INT 20
47395: PUSH
47396: LD_INT 55
47398: PUSH
47399: LD_INT 40
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47407: LD_VAR 0 6
47411: PPUSH
47412: CALL_OW 257
47416: PUSH
47417: LD_INT 12
47419: PUSH
47420: LD_INT 16
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: IN
47427: IFFALSE 47448
// points := [ 5 , 3 , 2 ] ;
47429: LD_ADDR_VAR 0 9
47433: PUSH
47434: LD_INT 5
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: LIST
47447: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47448: LD_VAR 0 6
47452: PPUSH
47453: CALL_OW 257
47457: PUSH
47458: LD_INT 17
47460: EQUAL
47461: IFFALSE 47482
// points := [ 100 , 50 , 75 ] ;
47463: LD_ADDR_VAR 0 9
47467: PUSH
47468: LD_INT 100
47470: PUSH
47471: LD_INT 50
47473: PUSH
47474: LD_INT 75
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47482: LD_VAR 0 6
47486: PPUSH
47487: CALL_OW 257
47491: PUSH
47492: LD_INT 15
47494: EQUAL
47495: IFFALSE 47516
// points := [ 10 , 5 , 3 ] ;
47497: LD_ADDR_VAR 0 9
47501: PUSH
47502: LD_INT 10
47504: PUSH
47505: LD_INT 5
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47516: LD_VAR 0 6
47520: PPUSH
47521: CALL_OW 257
47525: PUSH
47526: LD_INT 14
47528: EQUAL
47529: IFFALSE 47550
// points := [ 10 , 0 , 0 ] ;
47531: LD_ADDR_VAR 0 9
47535: PUSH
47536: LD_INT 10
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47550: LD_VAR 0 6
47554: PPUSH
47555: CALL_OW 257
47559: PUSH
47560: LD_INT 11
47562: EQUAL
47563: IFFALSE 47584
// points := [ 30 , 10 , 5 ] ;
47565: LD_ADDR_VAR 0 9
47569: PUSH
47570: LD_INT 30
47572: PUSH
47573: LD_INT 10
47575: PUSH
47576: LD_INT 5
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47584: LD_VAR 0 1
47588: PPUSH
47589: LD_INT 5
47591: PPUSH
47592: CALL_OW 321
47596: PUSH
47597: LD_INT 2
47599: EQUAL
47600: IFFALSE 47617
// bpoints := bpoints * 1.8 ;
47602: LD_ADDR_VAR 0 10
47606: PUSH
47607: LD_VAR 0 10
47611: PUSH
47612: LD_REAL  1.80000000000000E+0000
47615: MUL
47616: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47617: LD_VAR 0 6
47621: PPUSH
47622: CALL_OW 257
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 4
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: IN
47645: PUSH
47646: LD_VAR 0 1
47650: PPUSH
47651: LD_INT 51
47653: PPUSH
47654: CALL_OW 321
47658: PUSH
47659: LD_INT 2
47661: EQUAL
47662: AND
47663: IFFALSE 47680
// bpoints := bpoints * 1.2 ;
47665: LD_ADDR_VAR 0 10
47669: PUSH
47670: LD_VAR 0 10
47674: PUSH
47675: LD_REAL  1.20000000000000E+0000
47678: MUL
47679: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47680: LD_VAR 0 6
47684: PPUSH
47685: CALL_OW 257
47689: PUSH
47690: LD_INT 5
47692: PUSH
47693: LD_INT 7
47695: PUSH
47696: LD_INT 9
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: IN
47704: PUSH
47705: LD_VAR 0 1
47709: PPUSH
47710: LD_INT 52
47712: PPUSH
47713: CALL_OW 321
47717: PUSH
47718: LD_INT 2
47720: EQUAL
47721: AND
47722: IFFALSE 47739
// bpoints := bpoints * 1.5 ;
47724: LD_ADDR_VAR 0 10
47728: PUSH
47729: LD_VAR 0 10
47733: PUSH
47734: LD_REAL  1.50000000000000E+0000
47737: MUL
47738: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47739: LD_VAR 0 1
47743: PPUSH
47744: LD_INT 66
47746: PPUSH
47747: CALL_OW 321
47751: PUSH
47752: LD_INT 2
47754: EQUAL
47755: IFFALSE 47772
// bpoints := bpoints * 1.1 ;
47757: LD_ADDR_VAR 0 10
47761: PUSH
47762: LD_VAR 0 10
47766: PUSH
47767: LD_REAL  1.10000000000000E+0000
47770: MUL
47771: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47772: LD_ADDR_VAR 0 10
47776: PUSH
47777: LD_VAR 0 10
47781: PUSH
47782: LD_VAR 0 6
47786: PPUSH
47787: LD_INT 1
47789: PPUSH
47790: CALL_OW 259
47794: PUSH
47795: LD_REAL  1.15000000000000E+0000
47798: MUL
47799: MUL
47800: ST_TO_ADDR
// end ; unit_vehicle :
47801: GO 48629
47803: LD_INT 2
47805: DOUBLE
47806: EQUAL
47807: IFTRUE 47811
47809: GO 48617
47811: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47812: LD_VAR 0 6
47816: PPUSH
47817: CALL_OW 264
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 42
47827: PUSH
47828: LD_INT 24
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: IN
47836: IFFALSE 47857
// points := [ 25 , 5 , 3 ] ;
47838: LD_ADDR_VAR 0 9
47842: PUSH
47843: LD_INT 25
47845: PUSH
47846: LD_INT 5
47848: PUSH
47849: LD_INT 3
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47857: LD_VAR 0 6
47861: PPUSH
47862: CALL_OW 264
47866: PUSH
47867: LD_INT 4
47869: PUSH
47870: LD_INT 43
47872: PUSH
47873: LD_INT 25
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: IN
47881: IFFALSE 47902
// points := [ 40 , 15 , 5 ] ;
47883: LD_ADDR_VAR 0 9
47887: PUSH
47888: LD_INT 40
47890: PUSH
47891: LD_INT 15
47893: PUSH
47894: LD_INT 5
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47902: LD_VAR 0 6
47906: PPUSH
47907: CALL_OW 264
47911: PUSH
47912: LD_INT 3
47914: PUSH
47915: LD_INT 23
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: IN
47922: IFFALSE 47943
// points := [ 7 , 25 , 8 ] ;
47924: LD_ADDR_VAR 0 9
47928: PUSH
47929: LD_INT 7
47931: PUSH
47932: LD_INT 25
47934: PUSH
47935: LD_INT 8
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47943: LD_VAR 0 6
47947: PPUSH
47948: CALL_OW 264
47952: PUSH
47953: LD_INT 5
47955: PUSH
47956: LD_INT 27
47958: PUSH
47959: LD_INT 44
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: LIST
47966: IN
47967: IFFALSE 47988
// points := [ 14 , 50 , 16 ] ;
47969: LD_ADDR_VAR 0 9
47973: PUSH
47974: LD_INT 14
47976: PUSH
47977: LD_INT 50
47979: PUSH
47980: LD_INT 16
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47988: LD_VAR 0 6
47992: PPUSH
47993: CALL_OW 264
47997: PUSH
47998: LD_INT 6
48000: PUSH
48001: LD_INT 46
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: IN
48008: IFFALSE 48029
// points := [ 32 , 120 , 70 ] ;
48010: LD_ADDR_VAR 0 9
48014: PUSH
48015: LD_INT 32
48017: PUSH
48018: LD_INT 120
48020: PUSH
48021: LD_INT 70
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48029: LD_VAR 0 6
48033: PPUSH
48034: CALL_OW 264
48038: PUSH
48039: LD_INT 7
48041: PUSH
48042: LD_INT 28
48044: PUSH
48045: LD_INT 45
48047: PUSH
48048: LD_INT 92
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: IN
48057: IFFALSE 48078
// points := [ 35 , 20 , 45 ] ;
48059: LD_ADDR_VAR 0 9
48063: PUSH
48064: LD_INT 35
48066: PUSH
48067: LD_INT 20
48069: PUSH
48070: LD_INT 45
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48078: LD_VAR 0 6
48082: PPUSH
48083: CALL_OW 264
48087: PUSH
48088: LD_INT 47
48090: PUSH
48091: EMPTY
48092: LIST
48093: IN
48094: IFFALSE 48115
// points := [ 67 , 45 , 75 ] ;
48096: LD_ADDR_VAR 0 9
48100: PUSH
48101: LD_INT 67
48103: PUSH
48104: LD_INT 45
48106: PUSH
48107: LD_INT 75
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48115: LD_VAR 0 6
48119: PPUSH
48120: CALL_OW 264
48124: PUSH
48125: LD_INT 26
48127: PUSH
48128: EMPTY
48129: LIST
48130: IN
48131: IFFALSE 48152
// points := [ 120 , 30 , 80 ] ;
48133: LD_ADDR_VAR 0 9
48137: PUSH
48138: LD_INT 120
48140: PUSH
48141: LD_INT 30
48143: PUSH
48144: LD_INT 80
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48152: LD_VAR 0 6
48156: PPUSH
48157: CALL_OW 264
48161: PUSH
48162: LD_INT 22
48164: PUSH
48165: EMPTY
48166: LIST
48167: IN
48168: IFFALSE 48189
// points := [ 40 , 1 , 1 ] ;
48170: LD_ADDR_VAR 0 9
48174: PUSH
48175: LD_INT 40
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48189: LD_VAR 0 6
48193: PPUSH
48194: CALL_OW 264
48198: PUSH
48199: LD_INT 29
48201: PUSH
48202: EMPTY
48203: LIST
48204: IN
48205: IFFALSE 48226
// points := [ 70 , 200 , 400 ] ;
48207: LD_ADDR_VAR 0 9
48211: PUSH
48212: LD_INT 70
48214: PUSH
48215: LD_INT 200
48217: PUSH
48218: LD_INT 400
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: LIST
48225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48226: LD_VAR 0 6
48230: PPUSH
48231: CALL_OW 264
48235: PUSH
48236: LD_INT 14
48238: PUSH
48239: LD_INT 53
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: IN
48246: IFFALSE 48267
// points := [ 40 , 10 , 20 ] ;
48248: LD_ADDR_VAR 0 9
48252: PUSH
48253: LD_INT 40
48255: PUSH
48256: LD_INT 10
48258: PUSH
48259: LD_INT 20
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48267: LD_VAR 0 6
48271: PPUSH
48272: CALL_OW 264
48276: PUSH
48277: LD_INT 9
48279: PUSH
48280: EMPTY
48281: LIST
48282: IN
48283: IFFALSE 48304
// points := [ 5 , 70 , 20 ] ;
48285: LD_ADDR_VAR 0 9
48289: PUSH
48290: LD_INT 5
48292: PUSH
48293: LD_INT 70
48295: PUSH
48296: LD_INT 20
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48304: LD_VAR 0 6
48308: PPUSH
48309: CALL_OW 264
48313: PUSH
48314: LD_INT 10
48316: PUSH
48317: EMPTY
48318: LIST
48319: IN
48320: IFFALSE 48341
// points := [ 35 , 110 , 70 ] ;
48322: LD_ADDR_VAR 0 9
48326: PUSH
48327: LD_INT 35
48329: PUSH
48330: LD_INT 110
48332: PUSH
48333: LD_INT 70
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48341: LD_VAR 0 6
48345: PPUSH
48346: CALL_OW 265
48350: PUSH
48351: LD_INT 25
48353: EQUAL
48354: IFFALSE 48375
// points := [ 80 , 65 , 100 ] ;
48356: LD_ADDR_VAR 0 9
48360: PUSH
48361: LD_INT 80
48363: PUSH
48364: LD_INT 65
48366: PUSH
48367: LD_INT 100
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48375: LD_VAR 0 6
48379: PPUSH
48380: CALL_OW 263
48384: PUSH
48385: LD_INT 1
48387: EQUAL
48388: IFFALSE 48423
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48390: LD_ADDR_VAR 0 10
48394: PUSH
48395: LD_VAR 0 10
48399: PUSH
48400: LD_VAR 0 6
48404: PPUSH
48405: CALL_OW 311
48409: PPUSH
48410: LD_INT 3
48412: PPUSH
48413: CALL_OW 259
48417: PUSH
48418: LD_INT 4
48420: MUL
48421: MUL
48422: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48423: LD_VAR 0 6
48427: PPUSH
48428: CALL_OW 263
48432: PUSH
48433: LD_INT 2
48435: EQUAL
48436: IFFALSE 48487
// begin j := IsControledBy ( i ) ;
48438: LD_ADDR_VAR 0 7
48442: PUSH
48443: LD_VAR 0 6
48447: PPUSH
48448: CALL_OW 312
48452: ST_TO_ADDR
// if j then
48453: LD_VAR 0 7
48457: IFFALSE 48487
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48459: LD_ADDR_VAR 0 10
48463: PUSH
48464: LD_VAR 0 10
48468: PUSH
48469: LD_VAR 0 7
48473: PPUSH
48474: LD_INT 3
48476: PPUSH
48477: CALL_OW 259
48481: PUSH
48482: LD_INT 3
48484: MUL
48485: MUL
48486: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48487: LD_VAR 0 6
48491: PPUSH
48492: CALL_OW 264
48496: PUSH
48497: LD_INT 5
48499: PUSH
48500: LD_INT 6
48502: PUSH
48503: LD_INT 46
48505: PUSH
48506: LD_INT 44
48508: PUSH
48509: LD_INT 47
48511: PUSH
48512: LD_INT 45
48514: PUSH
48515: LD_INT 28
48517: PUSH
48518: LD_INT 7
48520: PUSH
48521: LD_INT 27
48523: PUSH
48524: LD_INT 29
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: IN
48539: PUSH
48540: LD_VAR 0 1
48544: PPUSH
48545: LD_INT 52
48547: PPUSH
48548: CALL_OW 321
48552: PUSH
48553: LD_INT 2
48555: EQUAL
48556: AND
48557: IFFALSE 48574
// bpoints := bpoints * 1.2 ;
48559: LD_ADDR_VAR 0 10
48563: PUSH
48564: LD_VAR 0 10
48568: PUSH
48569: LD_REAL  1.20000000000000E+0000
48572: MUL
48573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48574: LD_VAR 0 6
48578: PPUSH
48579: CALL_OW 264
48583: PUSH
48584: LD_INT 6
48586: PUSH
48587: LD_INT 46
48589: PUSH
48590: LD_INT 47
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: IN
48598: IFFALSE 48615
// bpoints := bpoints * 1.2 ;
48600: LD_ADDR_VAR 0 10
48604: PUSH
48605: LD_VAR 0 10
48609: PUSH
48610: LD_REAL  1.20000000000000E+0000
48613: MUL
48614: ST_TO_ADDR
// end ; unit_building :
48615: GO 48629
48617: LD_INT 3
48619: DOUBLE
48620: EQUAL
48621: IFTRUE 48625
48623: GO 48628
48625: POP
// ; end ;
48626: GO 48629
48628: POP
// for j = 1 to 3 do
48629: LD_ADDR_VAR 0 7
48633: PUSH
48634: DOUBLE
48635: LD_INT 1
48637: DEC
48638: ST_TO_ADDR
48639: LD_INT 3
48641: PUSH
48642: FOR_TO
48643: IFFALSE 48696
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48645: LD_ADDR_VAR 0 5
48649: PUSH
48650: LD_VAR 0 5
48654: PPUSH
48655: LD_VAR 0 7
48659: PPUSH
48660: LD_VAR 0 5
48664: PUSH
48665: LD_VAR 0 7
48669: ARRAY
48670: PUSH
48671: LD_VAR 0 9
48675: PUSH
48676: LD_VAR 0 7
48680: ARRAY
48681: PUSH
48682: LD_VAR 0 10
48686: MUL
48687: PLUS
48688: PPUSH
48689: CALL_OW 1
48693: ST_TO_ADDR
48694: GO 48642
48696: POP
48697: POP
// end ;
48698: GO 47177
48700: POP
48701: POP
// result := Replace ( result , 4 , tmp ) ;
48702: LD_ADDR_VAR 0 5
48706: PUSH
48707: LD_VAR 0 5
48711: PPUSH
48712: LD_INT 4
48714: PPUSH
48715: LD_VAR 0 8
48719: PPUSH
48720: CALL_OW 1
48724: ST_TO_ADDR
// end ;
48725: LD_VAR 0 5
48729: RET
// export function DangerAtRange ( unit , range ) ; begin
48730: LD_INT 0
48732: PPUSH
// if not unit then
48733: LD_VAR 0 1
48737: NOT
48738: IFFALSE 48742
// exit ;
48740: GO 48787
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48742: LD_ADDR_VAR 0 3
48746: PUSH
48747: LD_VAR 0 1
48751: PPUSH
48752: CALL_OW 255
48756: PPUSH
48757: LD_VAR 0 1
48761: PPUSH
48762: CALL_OW 250
48766: PPUSH
48767: LD_VAR 0 1
48771: PPUSH
48772: CALL_OW 251
48776: PPUSH
48777: LD_VAR 0 2
48781: PPUSH
48782: CALL 47029 0 4
48786: ST_TO_ADDR
// end ;
48787: LD_VAR 0 3
48791: RET
// export function DangerInArea ( side , area ) ; begin
48792: LD_INT 0
48794: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48795: LD_ADDR_VAR 0 3
48799: PUSH
48800: LD_VAR 0 2
48804: PPUSH
48805: LD_INT 81
48807: PUSH
48808: LD_VAR 0 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PPUSH
48817: CALL_OW 70
48821: ST_TO_ADDR
// end ;
48822: LD_VAR 0 3
48826: RET
// export function IsExtension ( b ) ; begin
48827: LD_INT 0
48829: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48830: LD_ADDR_VAR 0 2
48834: PUSH
48835: LD_VAR 0 1
48839: PUSH
48840: LD_INT 23
48842: PUSH
48843: LD_INT 20
48845: PUSH
48846: LD_INT 22
48848: PUSH
48849: LD_INT 17
48851: PUSH
48852: LD_INT 24
48854: PUSH
48855: LD_INT 21
48857: PUSH
48858: LD_INT 19
48860: PUSH
48861: LD_INT 16
48863: PUSH
48864: LD_INT 25
48866: PUSH
48867: LD_INT 18
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: IN
48882: ST_TO_ADDR
// end ;
48883: LD_VAR 0 2
48887: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48888: LD_INT 0
48890: PPUSH
48891: PPUSH
48892: PPUSH
// result := [ ] ;
48893: LD_ADDR_VAR 0 4
48897: PUSH
48898: EMPTY
48899: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48900: LD_ADDR_VAR 0 5
48904: PUSH
48905: LD_VAR 0 2
48909: PPUSH
48910: LD_INT 21
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PPUSH
48920: CALL_OW 70
48924: ST_TO_ADDR
// if not tmp then
48925: LD_VAR 0 5
48929: NOT
48930: IFFALSE 48934
// exit ;
48932: GO 48998
// if checkLink then
48934: LD_VAR 0 3
48938: IFFALSE 48988
// begin for i in tmp do
48940: LD_ADDR_VAR 0 6
48944: PUSH
48945: LD_VAR 0 5
48949: PUSH
48950: FOR_IN
48951: IFFALSE 48986
// if GetBase ( i ) <> base then
48953: LD_VAR 0 6
48957: PPUSH
48958: CALL_OW 274
48962: PUSH
48963: LD_VAR 0 1
48967: NONEQUAL
48968: IFFALSE 48984
// ComLinkToBase ( base , i ) ;
48970: LD_VAR 0 1
48974: PPUSH
48975: LD_VAR 0 6
48979: PPUSH
48980: CALL_OW 169
48984: GO 48950
48986: POP
48987: POP
// end ; result := tmp ;
48988: LD_ADDR_VAR 0 4
48992: PUSH
48993: LD_VAR 0 5
48997: ST_TO_ADDR
// end ;
48998: LD_VAR 0 4
49002: RET
// export function ComComplete ( units , b ) ; var i ; begin
49003: LD_INT 0
49005: PPUSH
49006: PPUSH
// if not units then
49007: LD_VAR 0 1
49011: NOT
49012: IFFALSE 49016
// exit ;
49014: GO 49106
// for i in units do
49016: LD_ADDR_VAR 0 4
49020: PUSH
49021: LD_VAR 0 1
49025: PUSH
49026: FOR_IN
49027: IFFALSE 49104
// if BuildingStatus ( b ) = bs_build then
49029: LD_VAR 0 2
49033: PPUSH
49034: CALL_OW 461
49038: PUSH
49039: LD_INT 1
49041: EQUAL
49042: IFFALSE 49102
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49044: LD_VAR 0 4
49048: PPUSH
49049: LD_STRING h
49051: PUSH
49052: LD_VAR 0 2
49056: PPUSH
49057: CALL_OW 250
49061: PUSH
49062: LD_VAR 0 2
49066: PPUSH
49067: CALL_OW 251
49071: PUSH
49072: LD_VAR 0 2
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: PUSH
49095: EMPTY
49096: LIST
49097: PPUSH
49098: CALL_OW 446
49102: GO 49026
49104: POP
49105: POP
// end ;
49106: LD_VAR 0 3
49110: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49111: LD_INT 0
49113: PPUSH
49114: PPUSH
49115: PPUSH
49116: PPUSH
49117: PPUSH
49118: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49119: LD_VAR 0 1
49123: NOT
49124: PUSH
49125: LD_VAR 0 1
49129: PPUSH
49130: CALL_OW 263
49134: PUSH
49135: LD_INT 2
49137: NONEQUAL
49138: OR
49139: IFFALSE 49143
// exit ;
49141: GO 49459
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49143: LD_ADDR_VAR 0 6
49147: PUSH
49148: LD_INT 22
49150: PUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: CALL_OW 255
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: LD_INT 30
49170: PUSH
49171: LD_INT 36
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 34
49180: PUSH
49181: LD_INT 31
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PPUSH
49197: CALL_OW 69
49201: ST_TO_ADDR
// if not tmp then
49202: LD_VAR 0 6
49206: NOT
49207: IFFALSE 49211
// exit ;
49209: GO 49459
// result := [ ] ;
49211: LD_ADDR_VAR 0 2
49215: PUSH
49216: EMPTY
49217: ST_TO_ADDR
// for i in tmp do
49218: LD_ADDR_VAR 0 3
49222: PUSH
49223: LD_VAR 0 6
49227: PUSH
49228: FOR_IN
49229: IFFALSE 49300
// begin t := UnitsInside ( i ) ;
49231: LD_ADDR_VAR 0 4
49235: PUSH
49236: LD_VAR 0 3
49240: PPUSH
49241: CALL_OW 313
49245: ST_TO_ADDR
// if t then
49246: LD_VAR 0 4
49250: IFFALSE 49298
// for j in t do
49252: LD_ADDR_VAR 0 7
49256: PUSH
49257: LD_VAR 0 4
49261: PUSH
49262: FOR_IN
49263: IFFALSE 49296
// result := Replace ( result , result + 1 , j ) ;
49265: LD_ADDR_VAR 0 2
49269: PUSH
49270: LD_VAR 0 2
49274: PPUSH
49275: LD_VAR 0 2
49279: PUSH
49280: LD_INT 1
49282: PLUS
49283: PPUSH
49284: LD_VAR 0 7
49288: PPUSH
49289: CALL_OW 1
49293: ST_TO_ADDR
49294: GO 49262
49296: POP
49297: POP
// end ;
49298: GO 49228
49300: POP
49301: POP
// if not result then
49302: LD_VAR 0 2
49306: NOT
49307: IFFALSE 49311
// exit ;
49309: GO 49459
// mech := result [ 1 ] ;
49311: LD_ADDR_VAR 0 5
49315: PUSH
49316: LD_VAR 0 2
49320: PUSH
49321: LD_INT 1
49323: ARRAY
49324: ST_TO_ADDR
// if result > 1 then
49325: LD_VAR 0 2
49329: PUSH
49330: LD_INT 1
49332: GREATER
49333: IFFALSE 49445
// begin for i = 2 to result do
49335: LD_ADDR_VAR 0 3
49339: PUSH
49340: DOUBLE
49341: LD_INT 2
49343: DEC
49344: ST_TO_ADDR
49345: LD_VAR 0 2
49349: PUSH
49350: FOR_TO
49351: IFFALSE 49443
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49353: LD_ADDR_VAR 0 4
49357: PUSH
49358: LD_VAR 0 2
49362: PUSH
49363: LD_VAR 0 3
49367: ARRAY
49368: PPUSH
49369: LD_INT 3
49371: PPUSH
49372: CALL_OW 259
49376: PUSH
49377: LD_VAR 0 2
49381: PUSH
49382: LD_VAR 0 3
49386: ARRAY
49387: PPUSH
49388: CALL_OW 432
49392: MINUS
49393: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49394: LD_VAR 0 4
49398: PUSH
49399: LD_VAR 0 5
49403: PPUSH
49404: LD_INT 3
49406: PPUSH
49407: CALL_OW 259
49411: PUSH
49412: LD_VAR 0 5
49416: PPUSH
49417: CALL_OW 432
49421: MINUS
49422: GREATEREQUAL
49423: IFFALSE 49441
// mech := result [ i ] ;
49425: LD_ADDR_VAR 0 5
49429: PUSH
49430: LD_VAR 0 2
49434: PUSH
49435: LD_VAR 0 3
49439: ARRAY
49440: ST_TO_ADDR
// end ;
49441: GO 49350
49443: POP
49444: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49445: LD_VAR 0 1
49449: PPUSH
49450: LD_VAR 0 5
49454: PPUSH
49455: CALL_OW 135
// end ;
49459: LD_VAR 0 2
49463: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49464: LD_INT 0
49466: PPUSH
49467: PPUSH
49468: PPUSH
49469: PPUSH
49470: PPUSH
49471: PPUSH
49472: PPUSH
49473: PPUSH
49474: PPUSH
49475: PPUSH
49476: PPUSH
49477: PPUSH
49478: PPUSH
// result := [ ] ;
49479: LD_ADDR_VAR 0 7
49483: PUSH
49484: EMPTY
49485: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49486: LD_VAR 0 1
49490: PPUSH
49491: CALL_OW 266
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: IN
49506: NOT
49507: IFFALSE 49511
// exit ;
49509: GO 51145
// if name then
49511: LD_VAR 0 3
49515: IFFALSE 49531
// SetBName ( base_dep , name ) ;
49517: LD_VAR 0 1
49521: PPUSH
49522: LD_VAR 0 3
49526: PPUSH
49527: CALL_OW 500
// base := GetBase ( base_dep ) ;
49531: LD_ADDR_VAR 0 15
49535: PUSH
49536: LD_VAR 0 1
49540: PPUSH
49541: CALL_OW 274
49545: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49546: LD_ADDR_VAR 0 16
49550: PUSH
49551: LD_VAR 0 1
49555: PPUSH
49556: CALL_OW 255
49560: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49561: LD_ADDR_VAR 0 17
49565: PUSH
49566: LD_VAR 0 1
49570: PPUSH
49571: CALL_OW 248
49575: ST_TO_ADDR
// if sources then
49576: LD_VAR 0 5
49580: IFFALSE 49627
// for i = 1 to 3 do
49582: LD_ADDR_VAR 0 8
49586: PUSH
49587: DOUBLE
49588: LD_INT 1
49590: DEC
49591: ST_TO_ADDR
49592: LD_INT 3
49594: PUSH
49595: FOR_TO
49596: IFFALSE 49625
// AddResourceType ( base , i , sources [ i ] ) ;
49598: LD_VAR 0 15
49602: PPUSH
49603: LD_VAR 0 8
49607: PPUSH
49608: LD_VAR 0 5
49612: PUSH
49613: LD_VAR 0 8
49617: ARRAY
49618: PPUSH
49619: CALL_OW 276
49623: GO 49595
49625: POP
49626: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49627: LD_ADDR_VAR 0 18
49631: PUSH
49632: LD_VAR 0 15
49636: PPUSH
49637: LD_VAR 0 2
49641: PPUSH
49642: LD_INT 1
49644: PPUSH
49645: CALL 48888 0 3
49649: ST_TO_ADDR
// InitHc ;
49650: CALL_OW 19
// InitUc ;
49654: CALL_OW 18
// uc_side := side ;
49658: LD_ADDR_OWVAR 20
49662: PUSH
49663: LD_VAR 0 16
49667: ST_TO_ADDR
// uc_nation := nation ;
49668: LD_ADDR_OWVAR 21
49672: PUSH
49673: LD_VAR 0 17
49677: ST_TO_ADDR
// if buildings then
49678: LD_VAR 0 18
49682: IFFALSE 51004
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49684: LD_ADDR_VAR 0 19
49688: PUSH
49689: LD_VAR 0 18
49693: PPUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 30
49699: PUSH
49700: LD_INT 29
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 30
49709: PUSH
49710: LD_INT 30
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: PPUSH
49722: CALL_OW 72
49726: ST_TO_ADDR
// if tmp then
49727: LD_VAR 0 19
49731: IFFALSE 49779
// for i in tmp do
49733: LD_ADDR_VAR 0 8
49737: PUSH
49738: LD_VAR 0 19
49742: PUSH
49743: FOR_IN
49744: IFFALSE 49777
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49746: LD_VAR 0 8
49750: PPUSH
49751: CALL_OW 250
49755: PPUSH
49756: LD_VAR 0 8
49760: PPUSH
49761: CALL_OW 251
49765: PPUSH
49766: LD_VAR 0 16
49770: PPUSH
49771: CALL_OW 441
49775: GO 49743
49777: POP
49778: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49779: LD_VAR 0 18
49783: PPUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 30
49789: PUSH
49790: LD_INT 32
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 30
49799: PUSH
49800: LD_INT 33
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: PPUSH
49812: CALL_OW 72
49816: IFFALSE 49904
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49818: LD_ADDR_VAR 0 8
49822: PUSH
49823: LD_VAR 0 18
49827: PPUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 30
49833: PUSH
49834: LD_INT 32
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 30
49843: PUSH
49844: LD_INT 33
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: PPUSH
49856: CALL_OW 72
49860: PUSH
49861: FOR_IN
49862: IFFALSE 49902
// begin if not GetBWeapon ( i ) then
49864: LD_VAR 0 8
49868: PPUSH
49869: CALL_OW 269
49873: NOT
49874: IFFALSE 49900
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49876: LD_VAR 0 8
49880: PPUSH
49881: LD_VAR 0 8
49885: PPUSH
49886: LD_VAR 0 2
49890: PPUSH
49891: CALL 51150 0 2
49895: PPUSH
49896: CALL_OW 431
// end ;
49900: GO 49861
49902: POP
49903: POP
// end ; for i = 1 to personel do
49904: LD_ADDR_VAR 0 8
49908: PUSH
49909: DOUBLE
49910: LD_INT 1
49912: DEC
49913: ST_TO_ADDR
49914: LD_VAR 0 6
49918: PUSH
49919: FOR_TO
49920: IFFALSE 50984
// begin if i > 4 then
49922: LD_VAR 0 8
49926: PUSH
49927: LD_INT 4
49929: GREATER
49930: IFFALSE 49934
// break ;
49932: GO 50984
// case i of 1 :
49934: LD_VAR 0 8
49938: PUSH
49939: LD_INT 1
49941: DOUBLE
49942: EQUAL
49943: IFTRUE 49947
49945: GO 50027
49947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49948: LD_ADDR_VAR 0 12
49952: PUSH
49953: LD_VAR 0 18
49957: PPUSH
49958: LD_INT 22
49960: PUSH
49961: LD_VAR 0 16
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 58
49972: PUSH
49973: EMPTY
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 30
49981: PUSH
49982: LD_INT 32
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 30
49991: PUSH
49992: LD_INT 4
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 30
50001: PUSH
50002: LD_INT 5
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: PPUSH
50020: CALL_OW 72
50024: ST_TO_ADDR
50025: GO 50249
50027: LD_INT 2
50029: DOUBLE
50030: EQUAL
50031: IFTRUE 50035
50033: GO 50097
50035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50036: LD_ADDR_VAR 0 12
50040: PUSH
50041: LD_VAR 0 18
50045: PPUSH
50046: LD_INT 22
50048: PUSH
50049: LD_VAR 0 16
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: LD_INT 30
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 30
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: LIST
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PPUSH
50090: CALL_OW 72
50094: ST_TO_ADDR
50095: GO 50249
50097: LD_INT 3
50099: DOUBLE
50100: EQUAL
50101: IFTRUE 50105
50103: GO 50167
50105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50106: LD_ADDR_VAR 0 12
50110: PUSH
50111: LD_VAR 0 18
50115: PPUSH
50116: LD_INT 22
50118: PUSH
50119: LD_VAR 0 16
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 30
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 30
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PPUSH
50160: CALL_OW 72
50164: ST_TO_ADDR
50165: GO 50249
50167: LD_INT 4
50169: DOUBLE
50170: EQUAL
50171: IFTRUE 50175
50173: GO 50248
50175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50176: LD_ADDR_VAR 0 12
50180: PUSH
50181: LD_VAR 0 18
50185: PPUSH
50186: LD_INT 22
50188: PUSH
50189: LD_VAR 0 16
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 30
50203: PUSH
50204: LD_INT 6
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 30
50213: PUSH
50214: LD_INT 7
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 30
50223: PUSH
50224: LD_INT 8
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PPUSH
50241: CALL_OW 72
50245: ST_TO_ADDR
50246: GO 50249
50248: POP
// if i = 1 then
50249: LD_VAR 0 8
50253: PUSH
50254: LD_INT 1
50256: EQUAL
50257: IFFALSE 50368
// begin tmp := [ ] ;
50259: LD_ADDR_VAR 0 19
50263: PUSH
50264: EMPTY
50265: ST_TO_ADDR
// for j in f do
50266: LD_ADDR_VAR 0 9
50270: PUSH
50271: LD_VAR 0 12
50275: PUSH
50276: FOR_IN
50277: IFFALSE 50350
// if GetBType ( j ) = b_bunker then
50279: LD_VAR 0 9
50283: PPUSH
50284: CALL_OW 266
50288: PUSH
50289: LD_INT 32
50291: EQUAL
50292: IFFALSE 50319
// tmp := Insert ( tmp , 1 , j ) else
50294: LD_ADDR_VAR 0 19
50298: PUSH
50299: LD_VAR 0 19
50303: PPUSH
50304: LD_INT 1
50306: PPUSH
50307: LD_VAR 0 9
50311: PPUSH
50312: CALL_OW 2
50316: ST_TO_ADDR
50317: GO 50348
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50319: LD_ADDR_VAR 0 19
50323: PUSH
50324: LD_VAR 0 19
50328: PPUSH
50329: LD_VAR 0 19
50333: PUSH
50334: LD_INT 1
50336: PLUS
50337: PPUSH
50338: LD_VAR 0 9
50342: PPUSH
50343: CALL_OW 2
50347: ST_TO_ADDR
50348: GO 50276
50350: POP
50351: POP
// if tmp then
50352: LD_VAR 0 19
50356: IFFALSE 50368
// f := tmp ;
50358: LD_ADDR_VAR 0 12
50362: PUSH
50363: LD_VAR 0 19
50367: ST_TO_ADDR
// end ; x := personel [ i ] ;
50368: LD_ADDR_VAR 0 13
50372: PUSH
50373: LD_VAR 0 6
50377: PUSH
50378: LD_VAR 0 8
50382: ARRAY
50383: ST_TO_ADDR
// if x = - 1 then
50384: LD_VAR 0 13
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: EQUAL
50393: IFFALSE 50602
// begin for j in f do
50395: LD_ADDR_VAR 0 9
50399: PUSH
50400: LD_VAR 0 12
50404: PUSH
50405: FOR_IN
50406: IFFALSE 50598
// repeat InitHc ;
50408: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50412: LD_VAR 0 9
50416: PPUSH
50417: CALL_OW 266
50421: PUSH
50422: LD_INT 5
50424: EQUAL
50425: IFFALSE 50495
// begin if UnitsInside ( j ) < 3 then
50427: LD_VAR 0 9
50431: PPUSH
50432: CALL_OW 313
50436: PUSH
50437: LD_INT 3
50439: LESS
50440: IFFALSE 50476
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50442: LD_INT 0
50444: PPUSH
50445: LD_INT 5
50447: PUSH
50448: LD_INT 8
50450: PUSH
50451: LD_INT 9
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: PUSH
50459: LD_VAR 0 17
50463: ARRAY
50464: PPUSH
50465: LD_VAR 0 4
50469: PPUSH
50470: CALL_OW 380
50474: GO 50493
// PrepareHuman ( false , i , skill ) ;
50476: LD_INT 0
50478: PPUSH
50479: LD_VAR 0 8
50483: PPUSH
50484: LD_VAR 0 4
50488: PPUSH
50489: CALL_OW 380
// end else
50493: GO 50512
// PrepareHuman ( false , i , skill ) ;
50495: LD_INT 0
50497: PPUSH
50498: LD_VAR 0 8
50502: PPUSH
50503: LD_VAR 0 4
50507: PPUSH
50508: CALL_OW 380
// un := CreateHuman ;
50512: LD_ADDR_VAR 0 14
50516: PUSH
50517: CALL_OW 44
50521: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50522: LD_ADDR_VAR 0 7
50526: PUSH
50527: LD_VAR 0 7
50531: PPUSH
50532: LD_INT 1
50534: PPUSH
50535: LD_VAR 0 14
50539: PPUSH
50540: CALL_OW 2
50544: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50545: LD_VAR 0 14
50549: PPUSH
50550: LD_VAR 0 9
50554: PPUSH
50555: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50559: LD_VAR 0 9
50563: PPUSH
50564: CALL_OW 313
50568: PUSH
50569: LD_INT 6
50571: EQUAL
50572: PUSH
50573: LD_VAR 0 9
50577: PPUSH
50578: CALL_OW 266
50582: PUSH
50583: LD_INT 32
50585: PUSH
50586: LD_INT 31
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: IN
50593: OR
50594: IFFALSE 50408
50596: GO 50405
50598: POP
50599: POP
// end else
50600: GO 50982
// for j = 1 to x do
50602: LD_ADDR_VAR 0 9
50606: PUSH
50607: DOUBLE
50608: LD_INT 1
50610: DEC
50611: ST_TO_ADDR
50612: LD_VAR 0 13
50616: PUSH
50617: FOR_TO
50618: IFFALSE 50980
// begin InitHc ;
50620: CALL_OW 19
// if not f then
50624: LD_VAR 0 12
50628: NOT
50629: IFFALSE 50718
// begin PrepareHuman ( false , i , skill ) ;
50631: LD_INT 0
50633: PPUSH
50634: LD_VAR 0 8
50638: PPUSH
50639: LD_VAR 0 4
50643: PPUSH
50644: CALL_OW 380
// un := CreateHuman ;
50648: LD_ADDR_VAR 0 14
50652: PUSH
50653: CALL_OW 44
50657: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50658: LD_ADDR_VAR 0 7
50662: PUSH
50663: LD_VAR 0 7
50667: PPUSH
50668: LD_INT 1
50670: PPUSH
50671: LD_VAR 0 14
50675: PPUSH
50676: CALL_OW 2
50680: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50681: LD_VAR 0 14
50685: PPUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: CALL_OW 250
50695: PPUSH
50696: LD_VAR 0 1
50700: PPUSH
50701: CALL_OW 251
50705: PPUSH
50706: LD_INT 10
50708: PPUSH
50709: LD_INT 0
50711: PPUSH
50712: CALL_OW 50
// continue ;
50716: GO 50617
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50718: LD_VAR 0 12
50722: PUSH
50723: LD_INT 1
50725: ARRAY
50726: PPUSH
50727: CALL_OW 313
50731: PUSH
50732: LD_VAR 0 12
50736: PUSH
50737: LD_INT 1
50739: ARRAY
50740: PPUSH
50741: CALL_OW 266
50745: PUSH
50746: LD_INT 32
50748: PUSH
50749: LD_INT 31
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: IN
50756: AND
50757: PUSH
50758: LD_VAR 0 12
50762: PUSH
50763: LD_INT 1
50765: ARRAY
50766: PPUSH
50767: CALL_OW 313
50771: PUSH
50772: LD_INT 6
50774: EQUAL
50775: OR
50776: IFFALSE 50796
// f := Delete ( f , 1 ) ;
50778: LD_ADDR_VAR 0 12
50782: PUSH
50783: LD_VAR 0 12
50787: PPUSH
50788: LD_INT 1
50790: PPUSH
50791: CALL_OW 3
50795: ST_TO_ADDR
// if not f then
50796: LD_VAR 0 12
50800: NOT
50801: IFFALSE 50819
// begin x := x + 2 ;
50803: LD_ADDR_VAR 0 13
50807: PUSH
50808: LD_VAR 0 13
50812: PUSH
50813: LD_INT 2
50815: PLUS
50816: ST_TO_ADDR
// continue ;
50817: GO 50617
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50819: LD_VAR 0 12
50823: PUSH
50824: LD_INT 1
50826: ARRAY
50827: PPUSH
50828: CALL_OW 266
50832: PUSH
50833: LD_INT 5
50835: EQUAL
50836: IFFALSE 50910
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50838: LD_VAR 0 12
50842: PUSH
50843: LD_INT 1
50845: ARRAY
50846: PPUSH
50847: CALL_OW 313
50851: PUSH
50852: LD_INT 3
50854: LESS
50855: IFFALSE 50891
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50857: LD_INT 0
50859: PPUSH
50860: LD_INT 5
50862: PUSH
50863: LD_INT 8
50865: PUSH
50866: LD_INT 9
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: LIST
50873: PUSH
50874: LD_VAR 0 17
50878: ARRAY
50879: PPUSH
50880: LD_VAR 0 4
50884: PPUSH
50885: CALL_OW 380
50889: GO 50908
// PrepareHuman ( false , i , skill ) ;
50891: LD_INT 0
50893: PPUSH
50894: LD_VAR 0 8
50898: PPUSH
50899: LD_VAR 0 4
50903: PPUSH
50904: CALL_OW 380
// end else
50908: GO 50927
// PrepareHuman ( false , i , skill ) ;
50910: LD_INT 0
50912: PPUSH
50913: LD_VAR 0 8
50917: PPUSH
50918: LD_VAR 0 4
50922: PPUSH
50923: CALL_OW 380
// un := CreateHuman ;
50927: LD_ADDR_VAR 0 14
50931: PUSH
50932: CALL_OW 44
50936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50937: LD_ADDR_VAR 0 7
50941: PUSH
50942: LD_VAR 0 7
50946: PPUSH
50947: LD_INT 1
50949: PPUSH
50950: LD_VAR 0 14
50954: PPUSH
50955: CALL_OW 2
50959: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50960: LD_VAR 0 14
50964: PPUSH
50965: LD_VAR 0 12
50969: PUSH
50970: LD_INT 1
50972: ARRAY
50973: PPUSH
50974: CALL_OW 52
// end ;
50978: GO 50617
50980: POP
50981: POP
// end ;
50982: GO 49919
50984: POP
50985: POP
// result := result ^ buildings ;
50986: LD_ADDR_VAR 0 7
50990: PUSH
50991: LD_VAR 0 7
50995: PUSH
50996: LD_VAR 0 18
51000: ADD
51001: ST_TO_ADDR
// end else
51002: GO 51145
// begin for i = 1 to personel do
51004: LD_ADDR_VAR 0 8
51008: PUSH
51009: DOUBLE
51010: LD_INT 1
51012: DEC
51013: ST_TO_ADDR
51014: LD_VAR 0 6
51018: PUSH
51019: FOR_TO
51020: IFFALSE 51143
// begin if i > 4 then
51022: LD_VAR 0 8
51026: PUSH
51027: LD_INT 4
51029: GREATER
51030: IFFALSE 51034
// break ;
51032: GO 51143
// x := personel [ i ] ;
51034: LD_ADDR_VAR 0 13
51038: PUSH
51039: LD_VAR 0 6
51043: PUSH
51044: LD_VAR 0 8
51048: ARRAY
51049: ST_TO_ADDR
// if x = - 1 then
51050: LD_VAR 0 13
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: EQUAL
51059: IFFALSE 51063
// continue ;
51061: GO 51019
// PrepareHuman ( false , i , skill ) ;
51063: LD_INT 0
51065: PPUSH
51066: LD_VAR 0 8
51070: PPUSH
51071: LD_VAR 0 4
51075: PPUSH
51076: CALL_OW 380
// un := CreateHuman ;
51080: LD_ADDR_VAR 0 14
51084: PUSH
51085: CALL_OW 44
51089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51090: LD_VAR 0 14
51094: PPUSH
51095: LD_VAR 0 1
51099: PPUSH
51100: CALL_OW 250
51104: PPUSH
51105: LD_VAR 0 1
51109: PPUSH
51110: CALL_OW 251
51114: PPUSH
51115: LD_INT 10
51117: PPUSH
51118: LD_INT 0
51120: PPUSH
51121: CALL_OW 50
// result := result ^ un ;
51125: LD_ADDR_VAR 0 7
51129: PUSH
51130: LD_VAR 0 7
51134: PUSH
51135: LD_VAR 0 14
51139: ADD
51140: ST_TO_ADDR
// end ;
51141: GO 51019
51143: POP
51144: POP
// end ; end ;
51145: LD_VAR 0 7
51149: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51150: LD_INT 0
51152: PPUSH
51153: PPUSH
51154: PPUSH
51155: PPUSH
51156: PPUSH
51157: PPUSH
51158: PPUSH
51159: PPUSH
51160: PPUSH
51161: PPUSH
51162: PPUSH
51163: PPUSH
51164: PPUSH
51165: PPUSH
51166: PPUSH
51167: PPUSH
// result := false ;
51168: LD_ADDR_VAR 0 3
51172: PUSH
51173: LD_INT 0
51175: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51176: LD_VAR 0 1
51180: NOT
51181: PUSH
51182: LD_VAR 0 1
51186: PPUSH
51187: CALL_OW 266
51191: PUSH
51192: LD_INT 32
51194: PUSH
51195: LD_INT 33
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: IN
51202: NOT
51203: OR
51204: IFFALSE 51208
// exit ;
51206: GO 52317
// nat := GetNation ( tower ) ;
51208: LD_ADDR_VAR 0 12
51212: PUSH
51213: LD_VAR 0 1
51217: PPUSH
51218: CALL_OW 248
51222: ST_TO_ADDR
// side := GetSide ( tower ) ;
51223: LD_ADDR_VAR 0 16
51227: PUSH
51228: LD_VAR 0 1
51232: PPUSH
51233: CALL_OW 255
51237: ST_TO_ADDR
// x := GetX ( tower ) ;
51238: LD_ADDR_VAR 0 10
51242: PUSH
51243: LD_VAR 0 1
51247: PPUSH
51248: CALL_OW 250
51252: ST_TO_ADDR
// y := GetY ( tower ) ;
51253: LD_ADDR_VAR 0 11
51257: PUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: CALL_OW 251
51267: ST_TO_ADDR
// if not x or not y then
51268: LD_VAR 0 10
51272: NOT
51273: PUSH
51274: LD_VAR 0 11
51278: NOT
51279: OR
51280: IFFALSE 51284
// exit ;
51282: GO 52317
// weapon := 0 ;
51284: LD_ADDR_VAR 0 18
51288: PUSH
51289: LD_INT 0
51291: ST_TO_ADDR
// fac_list := [ ] ;
51292: LD_ADDR_VAR 0 17
51296: PUSH
51297: EMPTY
51298: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51299: LD_ADDR_VAR 0 6
51303: PUSH
51304: LD_VAR 0 1
51308: PPUSH
51309: CALL_OW 274
51313: PPUSH
51314: LD_VAR 0 2
51318: PPUSH
51319: LD_INT 0
51321: PPUSH
51322: CALL 48888 0 3
51326: PPUSH
51327: LD_INT 30
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PPUSH
51337: CALL_OW 72
51341: ST_TO_ADDR
// if not factories then
51342: LD_VAR 0 6
51346: NOT
51347: IFFALSE 51351
// exit ;
51349: GO 52317
// for i in factories do
51351: LD_ADDR_VAR 0 8
51355: PUSH
51356: LD_VAR 0 6
51360: PUSH
51361: FOR_IN
51362: IFFALSE 51387
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51364: LD_ADDR_VAR 0 17
51368: PUSH
51369: LD_VAR 0 17
51373: PUSH
51374: LD_VAR 0 8
51378: PPUSH
51379: CALL_OW 478
51383: UNION
51384: ST_TO_ADDR
51385: GO 51361
51387: POP
51388: POP
// if not fac_list then
51389: LD_VAR 0 17
51393: NOT
51394: IFFALSE 51398
// exit ;
51396: GO 52317
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51398: LD_ADDR_VAR 0 5
51402: PUSH
51403: LD_INT 4
51405: PUSH
51406: LD_INT 5
51408: PUSH
51409: LD_INT 9
51411: PUSH
51412: LD_INT 10
51414: PUSH
51415: LD_INT 6
51417: PUSH
51418: LD_INT 7
51420: PUSH
51421: LD_INT 11
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 27
51435: PUSH
51436: LD_INT 28
51438: PUSH
51439: LD_INT 26
51441: PUSH
51442: LD_INT 30
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 43
51453: PUSH
51454: LD_INT 44
51456: PUSH
51457: LD_INT 46
51459: PUSH
51460: LD_INT 45
51462: PUSH
51463: LD_INT 47
51465: PUSH
51466: LD_INT 49
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: PUSH
51482: LD_VAR 0 12
51486: ARRAY
51487: ST_TO_ADDR
// list := list isect fac_list ;
51488: LD_ADDR_VAR 0 5
51492: PUSH
51493: LD_VAR 0 5
51497: PUSH
51498: LD_VAR 0 17
51502: ISECT
51503: ST_TO_ADDR
// if not list then
51504: LD_VAR 0 5
51508: NOT
51509: IFFALSE 51513
// exit ;
51511: GO 52317
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51513: LD_VAR 0 12
51517: PUSH
51518: LD_INT 3
51520: EQUAL
51521: PUSH
51522: LD_INT 49
51524: PUSH
51525: LD_VAR 0 5
51529: IN
51530: AND
51531: PUSH
51532: LD_INT 31
51534: PPUSH
51535: LD_VAR 0 16
51539: PPUSH
51540: CALL_OW 321
51544: PUSH
51545: LD_INT 2
51547: EQUAL
51548: AND
51549: IFFALSE 51609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51551: LD_INT 22
51553: PUSH
51554: LD_VAR 0 16
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 35
51565: PUSH
51566: LD_INT 49
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 91
51575: PUSH
51576: LD_VAR 0 1
51580: PUSH
51581: LD_INT 10
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: PPUSH
51594: CALL_OW 69
51598: NOT
51599: IFFALSE 51609
// weapon := ru_time_lapser ;
51601: LD_ADDR_VAR 0 18
51605: PUSH
51606: LD_INT 49
51608: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51609: LD_VAR 0 12
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: IN
51624: PUSH
51625: LD_INT 11
51627: PUSH
51628: LD_VAR 0 5
51632: IN
51633: PUSH
51634: LD_INT 30
51636: PUSH
51637: LD_VAR 0 5
51641: IN
51642: OR
51643: AND
51644: PUSH
51645: LD_INT 6
51647: PPUSH
51648: LD_VAR 0 16
51652: PPUSH
51653: CALL_OW 321
51657: PUSH
51658: LD_INT 2
51660: EQUAL
51661: AND
51662: IFFALSE 51827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51664: LD_INT 22
51666: PUSH
51667: LD_VAR 0 16
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 35
51681: PUSH
51682: LD_INT 11
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 35
51691: PUSH
51692: LD_INT 30
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 91
51706: PUSH
51707: LD_VAR 0 1
51711: PUSH
51712: LD_INT 18
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: PPUSH
51725: CALL_OW 69
51729: NOT
51730: PUSH
51731: LD_INT 22
51733: PUSH
51734: LD_VAR 0 16
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: LD_INT 30
51748: PUSH
51749: LD_INT 32
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 30
51758: PUSH
51759: LD_INT 33
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 91
51773: PUSH
51774: LD_VAR 0 1
51778: PUSH
51779: LD_INT 12
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: PPUSH
51795: CALL_OW 69
51799: PUSH
51800: LD_INT 2
51802: GREATER
51803: AND
51804: IFFALSE 51827
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51806: LD_ADDR_VAR 0 18
51810: PUSH
51811: LD_INT 11
51813: PUSH
51814: LD_INT 30
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_VAR 0 12
51825: ARRAY
51826: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51827: LD_VAR 0 18
51831: NOT
51832: PUSH
51833: LD_INT 40
51835: PPUSH
51836: LD_VAR 0 16
51840: PPUSH
51841: CALL_OW 321
51845: PUSH
51846: LD_INT 2
51848: EQUAL
51849: AND
51850: PUSH
51851: LD_INT 7
51853: PUSH
51854: LD_VAR 0 5
51858: IN
51859: PUSH
51860: LD_INT 28
51862: PUSH
51863: LD_VAR 0 5
51867: IN
51868: OR
51869: PUSH
51870: LD_INT 45
51872: PUSH
51873: LD_VAR 0 5
51877: IN
51878: OR
51879: AND
51880: IFFALSE 52134
// begin hex := GetHexInfo ( x , y ) ;
51882: LD_ADDR_VAR 0 4
51886: PUSH
51887: LD_VAR 0 10
51891: PPUSH
51892: LD_VAR 0 11
51896: PPUSH
51897: CALL_OW 546
51901: ST_TO_ADDR
// if hex [ 1 ] then
51902: LD_VAR 0 4
51906: PUSH
51907: LD_INT 1
51909: ARRAY
51910: IFFALSE 51914
// exit ;
51912: GO 52317
// height := hex [ 2 ] ;
51914: LD_ADDR_VAR 0 15
51918: PUSH
51919: LD_VAR 0 4
51923: PUSH
51924: LD_INT 2
51926: ARRAY
51927: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51928: LD_ADDR_VAR 0 14
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: LD_INT 5
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: ST_TO_ADDR
// for i in tmp do
51951: LD_ADDR_VAR 0 8
51955: PUSH
51956: LD_VAR 0 14
51960: PUSH
51961: FOR_IN
51962: IFFALSE 52132
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51964: LD_ADDR_VAR 0 9
51968: PUSH
51969: LD_VAR 0 10
51973: PPUSH
51974: LD_VAR 0 8
51978: PPUSH
51979: LD_INT 5
51981: PPUSH
51982: CALL_OW 272
51986: PUSH
51987: LD_VAR 0 11
51991: PPUSH
51992: LD_VAR 0 8
51996: PPUSH
51997: LD_INT 5
51999: PPUSH
52000: CALL_OW 273
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52009: LD_VAR 0 9
52013: PUSH
52014: LD_INT 1
52016: ARRAY
52017: PPUSH
52018: LD_VAR 0 9
52022: PUSH
52023: LD_INT 2
52025: ARRAY
52026: PPUSH
52027: CALL_OW 488
52031: IFFALSE 52130
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52033: LD_ADDR_VAR 0 4
52037: PUSH
52038: LD_VAR 0 9
52042: PUSH
52043: LD_INT 1
52045: ARRAY
52046: PPUSH
52047: LD_VAR 0 9
52051: PUSH
52052: LD_INT 2
52054: ARRAY
52055: PPUSH
52056: CALL_OW 546
52060: ST_TO_ADDR
// if hex [ 1 ] then
52061: LD_VAR 0 4
52065: PUSH
52066: LD_INT 1
52068: ARRAY
52069: IFFALSE 52073
// continue ;
52071: GO 51961
// h := hex [ 2 ] ;
52073: LD_ADDR_VAR 0 13
52077: PUSH
52078: LD_VAR 0 4
52082: PUSH
52083: LD_INT 2
52085: ARRAY
52086: ST_TO_ADDR
// if h + 7 < height then
52087: LD_VAR 0 13
52091: PUSH
52092: LD_INT 7
52094: PLUS
52095: PUSH
52096: LD_VAR 0 15
52100: LESS
52101: IFFALSE 52130
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52103: LD_ADDR_VAR 0 18
52107: PUSH
52108: LD_INT 7
52110: PUSH
52111: LD_INT 28
52113: PUSH
52114: LD_INT 45
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: PUSH
52122: LD_VAR 0 12
52126: ARRAY
52127: ST_TO_ADDR
// break ;
52128: GO 52132
// end ; end ; end ;
52130: GO 51961
52132: POP
52133: POP
// end ; if not weapon then
52134: LD_VAR 0 18
52138: NOT
52139: IFFALSE 52199
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52141: LD_ADDR_VAR 0 5
52145: PUSH
52146: LD_VAR 0 5
52150: PUSH
52151: LD_INT 11
52153: PUSH
52154: LD_INT 30
52156: PUSH
52157: LD_INT 49
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: DIFF
52165: ST_TO_ADDR
// if not list then
52166: LD_VAR 0 5
52170: NOT
52171: IFFALSE 52175
// exit ;
52173: GO 52317
// weapon := list [ rand ( 1 , list ) ] ;
52175: LD_ADDR_VAR 0 18
52179: PUSH
52180: LD_VAR 0 5
52184: PUSH
52185: LD_INT 1
52187: PPUSH
52188: LD_VAR 0 5
52192: PPUSH
52193: CALL_OW 12
52197: ARRAY
52198: ST_TO_ADDR
// end ; if weapon then
52199: LD_VAR 0 18
52203: IFFALSE 52317
// begin tmp := CostOfWeapon ( weapon ) ;
52205: LD_ADDR_VAR 0 14
52209: PUSH
52210: LD_VAR 0 18
52214: PPUSH
52215: CALL_OW 451
52219: ST_TO_ADDR
// j := GetBase ( tower ) ;
52220: LD_ADDR_VAR 0 9
52224: PUSH
52225: LD_VAR 0 1
52229: PPUSH
52230: CALL_OW 274
52234: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52235: LD_VAR 0 9
52239: PPUSH
52240: LD_INT 1
52242: PPUSH
52243: CALL_OW 275
52247: PUSH
52248: LD_VAR 0 14
52252: PUSH
52253: LD_INT 1
52255: ARRAY
52256: GREATEREQUAL
52257: PUSH
52258: LD_VAR 0 9
52262: PPUSH
52263: LD_INT 2
52265: PPUSH
52266: CALL_OW 275
52270: PUSH
52271: LD_VAR 0 14
52275: PUSH
52276: LD_INT 2
52278: ARRAY
52279: GREATEREQUAL
52280: AND
52281: PUSH
52282: LD_VAR 0 9
52286: PPUSH
52287: LD_INT 3
52289: PPUSH
52290: CALL_OW 275
52294: PUSH
52295: LD_VAR 0 14
52299: PUSH
52300: LD_INT 3
52302: ARRAY
52303: GREATEREQUAL
52304: AND
52305: IFFALSE 52317
// result := weapon ;
52307: LD_ADDR_VAR 0 3
52311: PUSH
52312: LD_VAR 0 18
52316: ST_TO_ADDR
// end ; end ;
52317: LD_VAR 0 3
52321: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52322: LD_INT 0
52324: PPUSH
52325: PPUSH
// result := true ;
52326: LD_ADDR_VAR 0 3
52330: PUSH
52331: LD_INT 1
52333: ST_TO_ADDR
// if array1 = array2 then
52334: LD_VAR 0 1
52338: PUSH
52339: LD_VAR 0 2
52343: EQUAL
52344: IFFALSE 52404
// begin for i = 1 to array1 do
52346: LD_ADDR_VAR 0 4
52350: PUSH
52351: DOUBLE
52352: LD_INT 1
52354: DEC
52355: ST_TO_ADDR
52356: LD_VAR 0 1
52360: PUSH
52361: FOR_TO
52362: IFFALSE 52400
// if array1 [ i ] <> array2 [ i ] then
52364: LD_VAR 0 1
52368: PUSH
52369: LD_VAR 0 4
52373: ARRAY
52374: PUSH
52375: LD_VAR 0 2
52379: PUSH
52380: LD_VAR 0 4
52384: ARRAY
52385: NONEQUAL
52386: IFFALSE 52398
// begin result := false ;
52388: LD_ADDR_VAR 0 3
52392: PUSH
52393: LD_INT 0
52395: ST_TO_ADDR
// break ;
52396: GO 52400
// end ;
52398: GO 52361
52400: POP
52401: POP
// end else
52402: GO 52412
// result := false ;
52404: LD_ADDR_VAR 0 3
52408: PUSH
52409: LD_INT 0
52411: ST_TO_ADDR
// end ;
52412: LD_VAR 0 3
52416: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52417: LD_INT 0
52419: PPUSH
52420: PPUSH
// if not array1 or not array2 then
52421: LD_VAR 0 1
52425: NOT
52426: PUSH
52427: LD_VAR 0 2
52431: NOT
52432: OR
52433: IFFALSE 52437
// exit ;
52435: GO 52501
// result := true ;
52437: LD_ADDR_VAR 0 3
52441: PUSH
52442: LD_INT 1
52444: ST_TO_ADDR
// for i = 1 to array1 do
52445: LD_ADDR_VAR 0 4
52449: PUSH
52450: DOUBLE
52451: LD_INT 1
52453: DEC
52454: ST_TO_ADDR
52455: LD_VAR 0 1
52459: PUSH
52460: FOR_TO
52461: IFFALSE 52499
// if array1 [ i ] <> array2 [ i ] then
52463: LD_VAR 0 1
52467: PUSH
52468: LD_VAR 0 4
52472: ARRAY
52473: PUSH
52474: LD_VAR 0 2
52478: PUSH
52479: LD_VAR 0 4
52483: ARRAY
52484: NONEQUAL
52485: IFFALSE 52497
// begin result := false ;
52487: LD_ADDR_VAR 0 3
52491: PUSH
52492: LD_INT 0
52494: ST_TO_ADDR
// break ;
52495: GO 52499
// end ;
52497: GO 52460
52499: POP
52500: POP
// end ;
52501: LD_VAR 0 3
52505: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52506: LD_INT 0
52508: PPUSH
52509: PPUSH
52510: PPUSH
// pom := GetBase ( fac ) ;
52511: LD_ADDR_VAR 0 5
52515: PUSH
52516: LD_VAR 0 1
52520: PPUSH
52521: CALL_OW 274
52525: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52526: LD_ADDR_VAR 0 4
52530: PUSH
52531: LD_VAR 0 2
52535: PUSH
52536: LD_INT 1
52538: ARRAY
52539: PPUSH
52540: LD_VAR 0 2
52544: PUSH
52545: LD_INT 2
52547: ARRAY
52548: PPUSH
52549: LD_VAR 0 2
52553: PUSH
52554: LD_INT 3
52556: ARRAY
52557: PPUSH
52558: LD_VAR 0 2
52562: PUSH
52563: LD_INT 4
52565: ARRAY
52566: PPUSH
52567: CALL_OW 449
52571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52572: LD_ADDR_VAR 0 3
52576: PUSH
52577: LD_VAR 0 5
52581: PPUSH
52582: LD_INT 1
52584: PPUSH
52585: CALL_OW 275
52589: PUSH
52590: LD_VAR 0 4
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: GREATEREQUAL
52599: PUSH
52600: LD_VAR 0 5
52604: PPUSH
52605: LD_INT 2
52607: PPUSH
52608: CALL_OW 275
52612: PUSH
52613: LD_VAR 0 4
52617: PUSH
52618: LD_INT 2
52620: ARRAY
52621: GREATEREQUAL
52622: AND
52623: PUSH
52624: LD_VAR 0 5
52628: PPUSH
52629: LD_INT 3
52631: PPUSH
52632: CALL_OW 275
52636: PUSH
52637: LD_VAR 0 4
52641: PUSH
52642: LD_INT 3
52644: ARRAY
52645: GREATEREQUAL
52646: AND
52647: ST_TO_ADDR
// end ;
52648: LD_VAR 0 3
52652: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52653: LD_INT 0
52655: PPUSH
52656: PPUSH
52657: PPUSH
52658: PPUSH
// pom := GetBase ( building ) ;
52659: LD_ADDR_VAR 0 3
52663: PUSH
52664: LD_VAR 0 1
52668: PPUSH
52669: CALL_OW 274
52673: ST_TO_ADDR
// if not pom then
52674: LD_VAR 0 3
52678: NOT
52679: IFFALSE 52683
// exit ;
52681: GO 52853
// btype := GetBType ( building ) ;
52683: LD_ADDR_VAR 0 5
52687: PUSH
52688: LD_VAR 0 1
52692: PPUSH
52693: CALL_OW 266
52697: ST_TO_ADDR
// if btype = b_armoury then
52698: LD_VAR 0 5
52702: PUSH
52703: LD_INT 4
52705: EQUAL
52706: IFFALSE 52716
// btype := b_barracks ;
52708: LD_ADDR_VAR 0 5
52712: PUSH
52713: LD_INT 5
52715: ST_TO_ADDR
// if btype = b_depot then
52716: LD_VAR 0 5
52720: PUSH
52721: LD_INT 0
52723: EQUAL
52724: IFFALSE 52734
// btype := b_warehouse ;
52726: LD_ADDR_VAR 0 5
52730: PUSH
52731: LD_INT 1
52733: ST_TO_ADDR
// if btype = b_workshop then
52734: LD_VAR 0 5
52738: PUSH
52739: LD_INT 2
52741: EQUAL
52742: IFFALSE 52752
// btype := b_factory ;
52744: LD_ADDR_VAR 0 5
52748: PUSH
52749: LD_INT 3
52751: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52752: LD_ADDR_VAR 0 4
52756: PUSH
52757: LD_VAR 0 5
52761: PPUSH
52762: LD_VAR 0 1
52766: PPUSH
52767: CALL_OW 248
52771: PPUSH
52772: CALL_OW 450
52776: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52777: LD_ADDR_VAR 0 2
52781: PUSH
52782: LD_VAR 0 3
52786: PPUSH
52787: LD_INT 1
52789: PPUSH
52790: CALL_OW 275
52794: PUSH
52795: LD_VAR 0 4
52799: PUSH
52800: LD_INT 1
52802: ARRAY
52803: GREATEREQUAL
52804: PUSH
52805: LD_VAR 0 3
52809: PPUSH
52810: LD_INT 2
52812: PPUSH
52813: CALL_OW 275
52817: PUSH
52818: LD_VAR 0 4
52822: PUSH
52823: LD_INT 2
52825: ARRAY
52826: GREATEREQUAL
52827: AND
52828: PUSH
52829: LD_VAR 0 3
52833: PPUSH
52834: LD_INT 3
52836: PPUSH
52837: CALL_OW 275
52841: PUSH
52842: LD_VAR 0 4
52846: PUSH
52847: LD_INT 3
52849: ARRAY
52850: GREATEREQUAL
52851: AND
52852: ST_TO_ADDR
// end ;
52853: LD_VAR 0 2
52857: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52858: LD_INT 0
52860: PPUSH
52861: PPUSH
52862: PPUSH
// pom := GetBase ( building ) ;
52863: LD_ADDR_VAR 0 4
52867: PUSH
52868: LD_VAR 0 1
52872: PPUSH
52873: CALL_OW 274
52877: ST_TO_ADDR
// if not pom then
52878: LD_VAR 0 4
52882: NOT
52883: IFFALSE 52887
// exit ;
52885: GO 52988
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52887: LD_ADDR_VAR 0 5
52891: PUSH
52892: LD_VAR 0 2
52896: PPUSH
52897: LD_VAR 0 1
52901: PPUSH
52902: CALL_OW 248
52906: PPUSH
52907: CALL_OW 450
52911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52912: LD_ADDR_VAR 0 3
52916: PUSH
52917: LD_VAR 0 4
52921: PPUSH
52922: LD_INT 1
52924: PPUSH
52925: CALL_OW 275
52929: PUSH
52930: LD_VAR 0 5
52934: PUSH
52935: LD_INT 1
52937: ARRAY
52938: GREATEREQUAL
52939: PUSH
52940: LD_VAR 0 4
52944: PPUSH
52945: LD_INT 2
52947: PPUSH
52948: CALL_OW 275
52952: PUSH
52953: LD_VAR 0 5
52957: PUSH
52958: LD_INT 2
52960: ARRAY
52961: GREATEREQUAL
52962: AND
52963: PUSH
52964: LD_VAR 0 4
52968: PPUSH
52969: LD_INT 3
52971: PPUSH
52972: CALL_OW 275
52976: PUSH
52977: LD_VAR 0 5
52981: PUSH
52982: LD_INT 3
52984: ARRAY
52985: GREATEREQUAL
52986: AND
52987: ST_TO_ADDR
// end ;
52988: LD_VAR 0 3
52992: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52993: LD_INT 0
52995: PPUSH
52996: PPUSH
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
53005: PPUSH
// result := false ;
53006: LD_ADDR_VAR 0 8
53010: PUSH
53011: LD_INT 0
53013: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53014: LD_VAR 0 5
53018: NOT
53019: PUSH
53020: LD_VAR 0 1
53024: NOT
53025: OR
53026: PUSH
53027: LD_VAR 0 2
53031: NOT
53032: OR
53033: PUSH
53034: LD_VAR 0 3
53038: NOT
53039: OR
53040: IFFALSE 53044
// exit ;
53042: GO 53858
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53044: LD_ADDR_VAR 0 14
53048: PUSH
53049: LD_VAR 0 1
53053: PPUSH
53054: LD_VAR 0 2
53058: PPUSH
53059: LD_VAR 0 3
53063: PPUSH
53064: LD_VAR 0 4
53068: PPUSH
53069: LD_VAR 0 5
53073: PUSH
53074: LD_INT 1
53076: ARRAY
53077: PPUSH
53078: CALL_OW 248
53082: PPUSH
53083: LD_INT 0
53085: PPUSH
53086: CALL 55111 0 6
53090: ST_TO_ADDR
// if not hexes then
53091: LD_VAR 0 14
53095: NOT
53096: IFFALSE 53100
// exit ;
53098: GO 53858
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53100: LD_ADDR_VAR 0 17
53104: PUSH
53105: LD_VAR 0 5
53109: PPUSH
53110: LD_INT 22
53112: PUSH
53113: LD_VAR 0 13
53117: PPUSH
53118: CALL_OW 255
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 30
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 30
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PPUSH
53159: CALL_OW 72
53163: ST_TO_ADDR
// for i = 1 to hexes do
53164: LD_ADDR_VAR 0 9
53168: PUSH
53169: DOUBLE
53170: LD_INT 1
53172: DEC
53173: ST_TO_ADDR
53174: LD_VAR 0 14
53178: PUSH
53179: FOR_TO
53180: IFFALSE 53856
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53182: LD_ADDR_VAR 0 13
53186: PUSH
53187: LD_VAR 0 14
53191: PUSH
53192: LD_VAR 0 9
53196: ARRAY
53197: PUSH
53198: LD_INT 1
53200: ARRAY
53201: PPUSH
53202: LD_VAR 0 14
53206: PUSH
53207: LD_VAR 0 9
53211: ARRAY
53212: PUSH
53213: LD_INT 2
53215: ARRAY
53216: PPUSH
53217: CALL_OW 428
53221: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53222: LD_VAR 0 14
53226: PUSH
53227: LD_VAR 0 9
53231: ARRAY
53232: PUSH
53233: LD_INT 1
53235: ARRAY
53236: PPUSH
53237: LD_VAR 0 14
53241: PUSH
53242: LD_VAR 0 9
53246: ARRAY
53247: PUSH
53248: LD_INT 2
53250: ARRAY
53251: PPUSH
53252: CALL_OW 351
53256: PUSH
53257: LD_VAR 0 14
53261: PUSH
53262: LD_VAR 0 9
53266: ARRAY
53267: PUSH
53268: LD_INT 1
53270: ARRAY
53271: PPUSH
53272: LD_VAR 0 14
53276: PUSH
53277: LD_VAR 0 9
53281: ARRAY
53282: PUSH
53283: LD_INT 2
53285: ARRAY
53286: PPUSH
53287: CALL_OW 488
53291: NOT
53292: OR
53293: PUSH
53294: LD_VAR 0 13
53298: PPUSH
53299: CALL_OW 247
53303: PUSH
53304: LD_INT 3
53306: EQUAL
53307: OR
53308: IFFALSE 53314
// exit ;
53310: POP
53311: POP
53312: GO 53858
// if not tmp then
53314: LD_VAR 0 13
53318: NOT
53319: IFFALSE 53323
// continue ;
53321: GO 53179
// result := true ;
53323: LD_ADDR_VAR 0 8
53327: PUSH
53328: LD_INT 1
53330: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53331: LD_VAR 0 6
53335: PUSH
53336: LD_VAR 0 13
53340: PPUSH
53341: CALL_OW 247
53345: PUSH
53346: LD_INT 2
53348: EQUAL
53349: AND
53350: PUSH
53351: LD_VAR 0 13
53355: PPUSH
53356: CALL_OW 263
53360: PUSH
53361: LD_INT 1
53363: EQUAL
53364: AND
53365: IFFALSE 53529
// begin if IsDrivenBy ( tmp ) then
53367: LD_VAR 0 13
53371: PPUSH
53372: CALL_OW 311
53376: IFFALSE 53380
// continue ;
53378: GO 53179
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53380: LD_VAR 0 6
53384: PPUSH
53385: LD_INT 3
53387: PUSH
53388: LD_INT 60
53390: PUSH
53391: EMPTY
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 55
53403: PUSH
53404: EMPTY
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PPUSH
53415: CALL_OW 72
53419: IFFALSE 53527
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53421: LD_ADDR_VAR 0 18
53425: PUSH
53426: LD_VAR 0 6
53430: PPUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 60
53436: PUSH
53437: EMPTY
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: LD_INT 55
53449: PUSH
53450: EMPTY
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PPUSH
53461: CALL_OW 72
53465: PUSH
53466: LD_INT 1
53468: ARRAY
53469: ST_TO_ADDR
// if IsInUnit ( driver ) then
53470: LD_VAR 0 18
53474: PPUSH
53475: CALL_OW 310
53479: IFFALSE 53490
// ComExit ( driver ) ;
53481: LD_VAR 0 18
53485: PPUSH
53486: CALL 78903 0 1
// AddComEnterUnit ( driver , tmp ) ;
53490: LD_VAR 0 18
53494: PPUSH
53495: LD_VAR 0 13
53499: PPUSH
53500: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53504: LD_VAR 0 18
53508: PPUSH
53509: LD_VAR 0 7
53513: PPUSH
53514: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53518: LD_VAR 0 18
53522: PPUSH
53523: CALL_OW 181
// end ; continue ;
53527: GO 53179
// end ; if not cleaners or not tmp in cleaners then
53529: LD_VAR 0 6
53533: NOT
53534: PUSH
53535: LD_VAR 0 13
53539: PUSH
53540: LD_VAR 0 6
53544: IN
53545: NOT
53546: OR
53547: IFFALSE 53854
// begin if dep then
53549: LD_VAR 0 17
53553: IFFALSE 53689
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53555: LD_ADDR_VAR 0 16
53559: PUSH
53560: LD_VAR 0 17
53564: PUSH
53565: LD_INT 1
53567: ARRAY
53568: PPUSH
53569: CALL_OW 250
53573: PPUSH
53574: LD_VAR 0 17
53578: PUSH
53579: LD_INT 1
53581: ARRAY
53582: PPUSH
53583: CALL_OW 254
53587: PPUSH
53588: LD_INT 5
53590: PPUSH
53591: CALL_OW 272
53595: PUSH
53596: LD_VAR 0 17
53600: PUSH
53601: LD_INT 1
53603: ARRAY
53604: PPUSH
53605: CALL_OW 251
53609: PPUSH
53610: LD_VAR 0 17
53614: PUSH
53615: LD_INT 1
53617: ARRAY
53618: PPUSH
53619: CALL_OW 254
53623: PPUSH
53624: LD_INT 5
53626: PPUSH
53627: CALL_OW 273
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53636: LD_VAR 0 16
53640: PUSH
53641: LD_INT 1
53643: ARRAY
53644: PPUSH
53645: LD_VAR 0 16
53649: PUSH
53650: LD_INT 2
53652: ARRAY
53653: PPUSH
53654: CALL_OW 488
53658: IFFALSE 53689
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53660: LD_VAR 0 13
53664: PPUSH
53665: LD_VAR 0 16
53669: PUSH
53670: LD_INT 1
53672: ARRAY
53673: PPUSH
53674: LD_VAR 0 16
53678: PUSH
53679: LD_INT 2
53681: ARRAY
53682: PPUSH
53683: CALL_OW 111
// continue ;
53687: GO 53179
// end ; end ; r := GetDir ( tmp ) ;
53689: LD_ADDR_VAR 0 15
53693: PUSH
53694: LD_VAR 0 13
53698: PPUSH
53699: CALL_OW 254
53703: ST_TO_ADDR
// if r = 5 then
53704: LD_VAR 0 15
53708: PUSH
53709: LD_INT 5
53711: EQUAL
53712: IFFALSE 53722
// r := 0 ;
53714: LD_ADDR_VAR 0 15
53718: PUSH
53719: LD_INT 0
53721: ST_TO_ADDR
// for j = r to 5 do
53722: LD_ADDR_VAR 0 10
53726: PUSH
53727: DOUBLE
53728: LD_VAR 0 15
53732: DEC
53733: ST_TO_ADDR
53734: LD_INT 5
53736: PUSH
53737: FOR_TO
53738: IFFALSE 53852
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53740: LD_ADDR_VAR 0 11
53744: PUSH
53745: LD_VAR 0 13
53749: PPUSH
53750: CALL_OW 250
53754: PPUSH
53755: LD_VAR 0 10
53759: PPUSH
53760: LD_INT 2
53762: PPUSH
53763: CALL_OW 272
53767: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53768: LD_ADDR_VAR 0 12
53772: PUSH
53773: LD_VAR 0 13
53777: PPUSH
53778: CALL_OW 251
53782: PPUSH
53783: LD_VAR 0 10
53787: PPUSH
53788: LD_INT 2
53790: PPUSH
53791: CALL_OW 273
53795: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53796: LD_VAR 0 11
53800: PPUSH
53801: LD_VAR 0 12
53805: PPUSH
53806: CALL_OW 488
53810: PUSH
53811: LD_VAR 0 11
53815: PPUSH
53816: LD_VAR 0 12
53820: PPUSH
53821: CALL_OW 428
53825: NOT
53826: AND
53827: IFFALSE 53850
// begin ComMoveXY ( tmp , _x , _y ) ;
53829: LD_VAR 0 13
53833: PPUSH
53834: LD_VAR 0 11
53838: PPUSH
53839: LD_VAR 0 12
53843: PPUSH
53844: CALL_OW 111
// break ;
53848: GO 53852
// end ; end ;
53850: GO 53737
53852: POP
53853: POP
// end ; end ;
53854: GO 53179
53856: POP
53857: POP
// end ;
53858: LD_VAR 0 8
53862: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53863: LD_INT 0
53865: PPUSH
// result := true ;
53866: LD_ADDR_VAR 0 3
53870: PUSH
53871: LD_INT 1
53873: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53874: LD_VAR 0 2
53878: PUSH
53879: LD_INT 24
53881: DOUBLE
53882: EQUAL
53883: IFTRUE 53893
53885: LD_INT 33
53887: DOUBLE
53888: EQUAL
53889: IFTRUE 53893
53891: GO 53918
53893: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53894: LD_ADDR_VAR 0 3
53898: PUSH
53899: LD_INT 32
53901: PPUSH
53902: LD_VAR 0 1
53906: PPUSH
53907: CALL_OW 321
53911: PUSH
53912: LD_INT 2
53914: EQUAL
53915: ST_TO_ADDR
53916: GO 54234
53918: LD_INT 20
53920: DOUBLE
53921: EQUAL
53922: IFTRUE 53926
53924: GO 53951
53926: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53927: LD_ADDR_VAR 0 3
53931: PUSH
53932: LD_INT 6
53934: PPUSH
53935: LD_VAR 0 1
53939: PPUSH
53940: CALL_OW 321
53944: PUSH
53945: LD_INT 2
53947: EQUAL
53948: ST_TO_ADDR
53949: GO 54234
53951: LD_INT 22
53953: DOUBLE
53954: EQUAL
53955: IFTRUE 53965
53957: LD_INT 36
53959: DOUBLE
53960: EQUAL
53961: IFTRUE 53965
53963: GO 53990
53965: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53966: LD_ADDR_VAR 0 3
53970: PUSH
53971: LD_INT 15
53973: PPUSH
53974: LD_VAR 0 1
53978: PPUSH
53979: CALL_OW 321
53983: PUSH
53984: LD_INT 2
53986: EQUAL
53987: ST_TO_ADDR
53988: GO 54234
53990: LD_INT 30
53992: DOUBLE
53993: EQUAL
53994: IFTRUE 53998
53996: GO 54023
53998: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53999: LD_ADDR_VAR 0 3
54003: PUSH
54004: LD_INT 20
54006: PPUSH
54007: LD_VAR 0 1
54011: PPUSH
54012: CALL_OW 321
54016: PUSH
54017: LD_INT 2
54019: EQUAL
54020: ST_TO_ADDR
54021: GO 54234
54023: LD_INT 28
54025: DOUBLE
54026: EQUAL
54027: IFTRUE 54037
54029: LD_INT 21
54031: DOUBLE
54032: EQUAL
54033: IFTRUE 54037
54035: GO 54062
54037: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54038: LD_ADDR_VAR 0 3
54042: PUSH
54043: LD_INT 21
54045: PPUSH
54046: LD_VAR 0 1
54050: PPUSH
54051: CALL_OW 321
54055: PUSH
54056: LD_INT 2
54058: EQUAL
54059: ST_TO_ADDR
54060: GO 54234
54062: LD_INT 16
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54070
54068: GO 54095
54070: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54071: LD_ADDR_VAR 0 3
54075: PUSH
54076: LD_INT 84
54078: PPUSH
54079: LD_VAR 0 1
54083: PPUSH
54084: CALL_OW 321
54088: PUSH
54089: LD_INT 2
54091: EQUAL
54092: ST_TO_ADDR
54093: GO 54234
54095: LD_INT 19
54097: DOUBLE
54098: EQUAL
54099: IFTRUE 54109
54101: LD_INT 23
54103: DOUBLE
54104: EQUAL
54105: IFTRUE 54109
54107: GO 54134
54109: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54110: LD_ADDR_VAR 0 3
54114: PUSH
54115: LD_INT 83
54117: PPUSH
54118: LD_VAR 0 1
54122: PPUSH
54123: CALL_OW 321
54127: PUSH
54128: LD_INT 2
54130: EQUAL
54131: ST_TO_ADDR
54132: GO 54234
54134: LD_INT 17
54136: DOUBLE
54137: EQUAL
54138: IFTRUE 54142
54140: GO 54167
54142: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54143: LD_ADDR_VAR 0 3
54147: PUSH
54148: LD_INT 39
54150: PPUSH
54151: LD_VAR 0 1
54155: PPUSH
54156: CALL_OW 321
54160: PUSH
54161: LD_INT 2
54163: EQUAL
54164: ST_TO_ADDR
54165: GO 54234
54167: LD_INT 18
54169: DOUBLE
54170: EQUAL
54171: IFTRUE 54175
54173: GO 54200
54175: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54176: LD_ADDR_VAR 0 3
54180: PUSH
54181: LD_INT 40
54183: PPUSH
54184: LD_VAR 0 1
54188: PPUSH
54189: CALL_OW 321
54193: PUSH
54194: LD_INT 2
54196: EQUAL
54197: ST_TO_ADDR
54198: GO 54234
54200: LD_INT 27
54202: DOUBLE
54203: EQUAL
54204: IFTRUE 54208
54206: GO 54233
54208: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54209: LD_ADDR_VAR 0 3
54213: PUSH
54214: LD_INT 35
54216: PPUSH
54217: LD_VAR 0 1
54221: PPUSH
54222: CALL_OW 321
54226: PUSH
54227: LD_INT 2
54229: EQUAL
54230: ST_TO_ADDR
54231: GO 54234
54233: POP
// end ;
54234: LD_VAR 0 3
54238: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54239: LD_INT 0
54241: PPUSH
54242: PPUSH
54243: PPUSH
54244: PPUSH
54245: PPUSH
54246: PPUSH
54247: PPUSH
54248: PPUSH
54249: PPUSH
54250: PPUSH
54251: PPUSH
// result := false ;
54252: LD_ADDR_VAR 0 6
54256: PUSH
54257: LD_INT 0
54259: ST_TO_ADDR
// if btype = b_depot then
54260: LD_VAR 0 2
54264: PUSH
54265: LD_INT 0
54267: EQUAL
54268: IFFALSE 54280
// begin result := true ;
54270: LD_ADDR_VAR 0 6
54274: PUSH
54275: LD_INT 1
54277: ST_TO_ADDR
// exit ;
54278: GO 55106
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54280: LD_VAR 0 1
54284: NOT
54285: PUSH
54286: LD_VAR 0 1
54290: PPUSH
54291: CALL_OW 266
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: IN
54306: NOT
54307: OR
54308: PUSH
54309: LD_VAR 0 2
54313: NOT
54314: OR
54315: PUSH
54316: LD_VAR 0 5
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: LD_INT 4
54335: PUSH
54336: LD_INT 5
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: IN
54347: NOT
54348: OR
54349: PUSH
54350: LD_VAR 0 3
54354: PPUSH
54355: LD_VAR 0 4
54359: PPUSH
54360: CALL_OW 488
54364: NOT
54365: OR
54366: IFFALSE 54370
// exit ;
54368: GO 55106
// side := GetSide ( depot ) ;
54370: LD_ADDR_VAR 0 9
54374: PUSH
54375: LD_VAR 0 1
54379: PPUSH
54380: CALL_OW 255
54384: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54385: LD_VAR 0 9
54389: PPUSH
54390: LD_VAR 0 2
54394: PPUSH
54395: CALL 53863 0 2
54399: NOT
54400: IFFALSE 54404
// exit ;
54402: GO 55106
// pom := GetBase ( depot ) ;
54404: LD_ADDR_VAR 0 10
54408: PUSH
54409: LD_VAR 0 1
54413: PPUSH
54414: CALL_OW 274
54418: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54419: LD_ADDR_VAR 0 11
54423: PUSH
54424: LD_VAR 0 2
54428: PPUSH
54429: LD_VAR 0 1
54433: PPUSH
54434: CALL_OW 248
54438: PPUSH
54439: CALL_OW 450
54443: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54444: LD_VAR 0 10
54448: PPUSH
54449: LD_INT 1
54451: PPUSH
54452: CALL_OW 275
54456: PUSH
54457: LD_VAR 0 11
54461: PUSH
54462: LD_INT 1
54464: ARRAY
54465: GREATEREQUAL
54466: PUSH
54467: LD_VAR 0 10
54471: PPUSH
54472: LD_INT 2
54474: PPUSH
54475: CALL_OW 275
54479: PUSH
54480: LD_VAR 0 11
54484: PUSH
54485: LD_INT 2
54487: ARRAY
54488: GREATEREQUAL
54489: AND
54490: PUSH
54491: LD_VAR 0 10
54495: PPUSH
54496: LD_INT 3
54498: PPUSH
54499: CALL_OW 275
54503: PUSH
54504: LD_VAR 0 11
54508: PUSH
54509: LD_INT 3
54511: ARRAY
54512: GREATEREQUAL
54513: AND
54514: NOT
54515: IFFALSE 54519
// exit ;
54517: GO 55106
// if GetBType ( depot ) = b_depot then
54519: LD_VAR 0 1
54523: PPUSH
54524: CALL_OW 266
54528: PUSH
54529: LD_INT 0
54531: EQUAL
54532: IFFALSE 54544
// dist := 28 else
54534: LD_ADDR_VAR 0 14
54538: PUSH
54539: LD_INT 28
54541: ST_TO_ADDR
54542: GO 54552
// dist := 36 ;
54544: LD_ADDR_VAR 0 14
54548: PUSH
54549: LD_INT 36
54551: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54552: LD_VAR 0 1
54556: PPUSH
54557: LD_VAR 0 3
54561: PPUSH
54562: LD_VAR 0 4
54566: PPUSH
54567: CALL_OW 297
54571: PUSH
54572: LD_VAR 0 14
54576: GREATER
54577: IFFALSE 54581
// exit ;
54579: GO 55106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54581: LD_ADDR_VAR 0 12
54585: PUSH
54586: LD_VAR 0 2
54590: PPUSH
54591: LD_VAR 0 3
54595: PPUSH
54596: LD_VAR 0 4
54600: PPUSH
54601: LD_VAR 0 5
54605: PPUSH
54606: LD_VAR 0 1
54610: PPUSH
54611: CALL_OW 248
54615: PPUSH
54616: LD_INT 0
54618: PPUSH
54619: CALL 55111 0 6
54623: ST_TO_ADDR
// if not hexes then
54624: LD_VAR 0 12
54628: NOT
54629: IFFALSE 54633
// exit ;
54631: GO 55106
// hex := GetHexInfo ( x , y ) ;
54633: LD_ADDR_VAR 0 15
54637: PUSH
54638: LD_VAR 0 3
54642: PPUSH
54643: LD_VAR 0 4
54647: PPUSH
54648: CALL_OW 546
54652: ST_TO_ADDR
// if hex [ 1 ] then
54653: LD_VAR 0 15
54657: PUSH
54658: LD_INT 1
54660: ARRAY
54661: IFFALSE 54665
// exit ;
54663: GO 55106
// height := hex [ 2 ] ;
54665: LD_ADDR_VAR 0 13
54669: PUSH
54670: LD_VAR 0 15
54674: PUSH
54675: LD_INT 2
54677: ARRAY
54678: ST_TO_ADDR
// for i = 1 to hexes do
54679: LD_ADDR_VAR 0 7
54683: PUSH
54684: DOUBLE
54685: LD_INT 1
54687: DEC
54688: ST_TO_ADDR
54689: LD_VAR 0 12
54693: PUSH
54694: FOR_TO
54695: IFFALSE 55025
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54697: LD_VAR 0 12
54701: PUSH
54702: LD_VAR 0 7
54706: ARRAY
54707: PUSH
54708: LD_INT 1
54710: ARRAY
54711: PPUSH
54712: LD_VAR 0 12
54716: PUSH
54717: LD_VAR 0 7
54721: ARRAY
54722: PUSH
54723: LD_INT 2
54725: ARRAY
54726: PPUSH
54727: CALL_OW 488
54731: NOT
54732: PUSH
54733: LD_VAR 0 12
54737: PUSH
54738: LD_VAR 0 7
54742: ARRAY
54743: PUSH
54744: LD_INT 1
54746: ARRAY
54747: PPUSH
54748: LD_VAR 0 12
54752: PUSH
54753: LD_VAR 0 7
54757: ARRAY
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PPUSH
54763: CALL_OW 428
54767: PUSH
54768: LD_INT 0
54770: GREATER
54771: OR
54772: PUSH
54773: LD_VAR 0 12
54777: PUSH
54778: LD_VAR 0 7
54782: ARRAY
54783: PUSH
54784: LD_INT 1
54786: ARRAY
54787: PPUSH
54788: LD_VAR 0 12
54792: PUSH
54793: LD_VAR 0 7
54797: ARRAY
54798: PUSH
54799: LD_INT 2
54801: ARRAY
54802: PPUSH
54803: CALL_OW 351
54807: OR
54808: IFFALSE 54814
// exit ;
54810: POP
54811: POP
54812: GO 55106
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54814: LD_ADDR_VAR 0 8
54818: PUSH
54819: LD_VAR 0 12
54823: PUSH
54824: LD_VAR 0 7
54828: ARRAY
54829: PUSH
54830: LD_INT 1
54832: ARRAY
54833: PPUSH
54834: LD_VAR 0 12
54838: PUSH
54839: LD_VAR 0 7
54843: ARRAY
54844: PUSH
54845: LD_INT 2
54847: ARRAY
54848: PPUSH
54849: CALL_OW 546
54853: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54854: LD_VAR 0 8
54858: PUSH
54859: LD_INT 1
54861: ARRAY
54862: PUSH
54863: LD_VAR 0 8
54867: PUSH
54868: LD_INT 2
54870: ARRAY
54871: PUSH
54872: LD_VAR 0 13
54876: PUSH
54877: LD_INT 2
54879: PLUS
54880: GREATER
54881: OR
54882: PUSH
54883: LD_VAR 0 8
54887: PUSH
54888: LD_INT 2
54890: ARRAY
54891: PUSH
54892: LD_VAR 0 13
54896: PUSH
54897: LD_INT 2
54899: MINUS
54900: LESS
54901: OR
54902: PUSH
54903: LD_VAR 0 8
54907: PUSH
54908: LD_INT 3
54910: ARRAY
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 8
54917: PUSH
54918: LD_INT 9
54920: PUSH
54921: LD_INT 10
54923: PUSH
54924: LD_INT 11
54926: PUSH
54927: LD_INT 12
54929: PUSH
54930: LD_INT 13
54932: PUSH
54933: LD_INT 16
54935: PUSH
54936: LD_INT 17
54938: PUSH
54939: LD_INT 18
54941: PUSH
54942: LD_INT 19
54944: PUSH
54945: LD_INT 20
54947: PUSH
54948: LD_INT 21
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: IN
54966: NOT
54967: OR
54968: PUSH
54969: LD_VAR 0 8
54973: PUSH
54974: LD_INT 5
54976: ARRAY
54977: NOT
54978: OR
54979: PUSH
54980: LD_VAR 0 8
54984: PUSH
54985: LD_INT 6
54987: ARRAY
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 7
54997: PUSH
54998: LD_INT 9
55000: PUSH
55001: LD_INT 10
55003: PUSH
55004: LD_INT 11
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: IN
55015: NOT
55016: OR
55017: IFFALSE 55023
// exit ;
55019: POP
55020: POP
55021: GO 55106
// end ;
55023: GO 54694
55025: POP
55026: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55027: LD_VAR 0 9
55031: PPUSH
55032: LD_VAR 0 3
55036: PPUSH
55037: LD_VAR 0 4
55041: PPUSH
55042: LD_INT 20
55044: PPUSH
55045: CALL 47029 0 4
55049: PUSH
55050: LD_INT 4
55052: ARRAY
55053: IFFALSE 55057
// exit ;
55055: GO 55106
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55057: LD_VAR 0 2
55061: PUSH
55062: LD_INT 29
55064: PUSH
55065: LD_INT 30
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: IN
55072: PUSH
55073: LD_VAR 0 3
55077: PPUSH
55078: LD_VAR 0 4
55082: PPUSH
55083: LD_VAR 0 9
55087: PPUSH
55088: CALL_OW 440
55092: NOT
55093: AND
55094: IFFALSE 55098
// exit ;
55096: GO 55106
// result := true ;
55098: LD_ADDR_VAR 0 6
55102: PUSH
55103: LD_INT 1
55105: ST_TO_ADDR
// end ;
55106: LD_VAR 0 6
55110: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55111: LD_INT 0
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
55126: PPUSH
55127: PPUSH
55128: PPUSH
55129: PPUSH
55130: PPUSH
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
55141: PPUSH
55142: PPUSH
55143: PPUSH
55144: PPUSH
55145: PPUSH
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
55156: PPUSH
55157: PPUSH
55158: PPUSH
55159: PPUSH
55160: PPUSH
55161: PPUSH
55162: PPUSH
55163: PPUSH
55164: PPUSH
55165: PPUSH
55166: PPUSH
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
// result = [ ] ;
55171: LD_ADDR_VAR 0 7
55175: PUSH
55176: EMPTY
55177: ST_TO_ADDR
// temp_list = [ ] ;
55178: LD_ADDR_VAR 0 9
55182: PUSH
55183: EMPTY
55184: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55185: LD_VAR 0 4
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: LD_INT 5
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: IN
55216: NOT
55217: PUSH
55218: LD_VAR 0 1
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: IN
55233: PUSH
55234: LD_VAR 0 5
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: LIST
55252: IN
55253: NOT
55254: AND
55255: OR
55256: IFFALSE 55260
// exit ;
55258: GO 73651
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55260: LD_VAR 0 1
55264: PUSH
55265: LD_INT 6
55267: PUSH
55268: LD_INT 7
55270: PUSH
55271: LD_INT 8
55273: PUSH
55274: LD_INT 13
55276: PUSH
55277: LD_INT 12
55279: PUSH
55280: LD_INT 15
55282: PUSH
55283: LD_INT 11
55285: PUSH
55286: LD_INT 14
55288: PUSH
55289: LD_INT 10
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: IN
55303: IFFALSE 55313
// btype = b_lab ;
55305: LD_ADDR_VAR 0 1
55309: PUSH
55310: LD_INT 6
55312: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55313: LD_VAR 0 6
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: IN
55332: NOT
55333: PUSH
55334: LD_VAR 0 1
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 3
55350: PUSH
55351: LD_INT 6
55353: PUSH
55354: LD_INT 36
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: LD_INT 5
55362: PUSH
55363: LD_INT 31
55365: PUSH
55366: LD_INT 32
55368: PUSH
55369: LD_INT 33
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: IN
55385: NOT
55386: PUSH
55387: LD_VAR 0 6
55391: PUSH
55392: LD_INT 1
55394: EQUAL
55395: AND
55396: OR
55397: PUSH
55398: LD_VAR 0 1
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: LD_INT 3
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: IN
55413: NOT
55414: PUSH
55415: LD_VAR 0 6
55419: PUSH
55420: LD_INT 2
55422: EQUAL
55423: AND
55424: OR
55425: IFFALSE 55435
// mode = 0 ;
55427: LD_ADDR_VAR 0 6
55431: PUSH
55432: LD_INT 0
55434: ST_TO_ADDR
// case mode of 0 :
55435: LD_VAR 0 6
55439: PUSH
55440: LD_INT 0
55442: DOUBLE
55443: EQUAL
55444: IFTRUE 55448
55446: GO 66901
55448: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55449: LD_ADDR_VAR 0 11
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55642: LD_ADDR_VAR 0 12
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55838: LD_ADDR_VAR 0 13
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 3
56009: NEG
56010: PUSH
56011: LD_INT 3
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56037: LD_ADDR_VAR 0 14
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56233: LD_ADDR_VAR 0 15
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56426: LD_ADDR_VAR 0 16
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: LD_INT 3
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56619: LD_ADDR_VAR 0 17
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 2
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56849: LD_ADDR_VAR 0 18
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57079: LD_ADDR_VAR 0 19
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57309: LD_ADDR_VAR 0 20
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57539: LD_ADDR_VAR 0 21
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57769: LD_ADDR_VAR 0 22
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57999: LD_ADDR_VAR 0 23
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58279: LD_ADDR_VAR 0 24
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58555: LD_ADDR_VAR 0 25
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58829: LD_ADDR_VAR 0 26
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59105: LD_ADDR_VAR 0 27
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 2
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59385: LD_ADDR_VAR 0 28
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 3
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: LD_INT 2
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59667: LD_ADDR_VAR 0 29
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 3
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 3
59911: NEG
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59946: LD_ADDR_VAR 0 30
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60224: LD_ADDR_VAR 0 31
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 2
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 3
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 3
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: NEG
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60502: LD_ADDR_VAR 0 32
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 2
60668: NEG
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: LD_INT 3
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60780: LD_ADDR_VAR 0 33
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: LD_INT 3
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61059: LD_ADDR_VAR 0 34
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 2
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 3
61304: NEG
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61339: LD_ADDR_VAR 0 35
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61451: LD_ADDR_VAR 0 36
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 2
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61563: LD_ADDR_VAR 0 37
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61675: LD_ADDR_VAR 0 38
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61787: LD_ADDR_VAR 0 39
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61899: LD_ADDR_VAR 0 40
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62011: LD_ADDR_VAR 0 41
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: LD_INT 3
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: LD_INT 3
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: LD_INT 3
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 2
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 3
62285: NEG
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 3
62296: NEG
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62361: LD_ADDR_VAR 0 42
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 2
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 3
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: LD_INT 3
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: LD_INT 3
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 3
62658: NEG
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 3
62670: NEG
62671: PUSH
62672: LD_INT 3
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62711: LD_ADDR_VAR 0 43
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_INT 3
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: LD_INT 2
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 3
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 3
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: LD_INT 3
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 3
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: NEG
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63059: LD_ADDR_VAR 0 44
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: LD_INT 2
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 2
63225: NEG
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 3
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 3
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 3
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 3
63302: PUSH
63303: LD_INT 3
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: LD_INT 3
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 2
63322: NEG
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 3
63333: NEG
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 3
63344: NEG
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 3
63356: NEG
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63409: LD_ADDR_VAR 0 45
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: LD_INT 2
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: LD_INT 2
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: NEG
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: NEG
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 2
63587: NEG
63588: PUSH
63589: LD_INT 2
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: LD_INT 3
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 3
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 3
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: PUSH
63656: LD_INT 3
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: LD_INT 3
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 3
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 2
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: NEG
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 3
63718: NEG
63719: PUSH
63720: LD_INT 3
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63759: LD_ADDR_VAR 0 46
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: LD_INT 3
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 3
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 3
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 3
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: LD_INT 3
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 3
64055: NEG
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 3
64066: NEG
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64107: LD_ADDR_VAR 0 47
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 2
64234: NEG
64235: PUSH
64236: LD_INT 2
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64258: LD_ADDR_VAR 0 48
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: LD_INT 1
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64405: LD_ADDR_VAR 0 49
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: NEG
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 2
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64549: LD_ADDR_VAR 0 50
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 2
64630: PUSH
64631: LD_INT 1
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 2
64640: PUSH
64641: LD_INT 2
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 2
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64693: LD_ADDR_VAR 0 51
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64840: LD_ADDR_VAR 0 52
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: LD_INT 2
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 2
64955: NEG
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: NEG
64968: PUSH
64969: LD_INT 2
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64991: LD_ADDR_VAR 0 53
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 1
65060: NEG
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: LD_INT 2
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 2
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 2
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 1
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: NEG
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 2
65178: NEG
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65221: LD_ADDR_VAR 0 54
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: NEG
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 2
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 2
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 2
65408: NEG
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: LD_INT 2
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65451: LD_ADDR_VAR 0 55
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 1
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 2
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: LD_INT 2
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: LD_INT 2
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 2
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: LD_INT 1
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: NEG
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 2
65638: NEG
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: LD_INT 2
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65681: LD_ADDR_VAR 0 56
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 2
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 2
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: LD_INT 2
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: LD_INT 1
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: NEG
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: LD_INT 2
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65911: LD_ADDR_VAR 0 57
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 2
66046: PUSH
66047: LD_INT 2
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: LD_INT 2
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66141: LD_ADDR_VAR 0 58
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 0
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: LD_INT 1
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: LD_INT 0
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 2
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: LD_INT 2
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: LD_INT 1
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 2
66317: NEG
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66371: LD_ADDR_VAR 0 59
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: LD_INT 1
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 1
66440: NEG
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66459: LD_ADDR_VAR 0 60
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 1
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 1
66528: NEG
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66547: LD_ADDR_VAR 0 61
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 1
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 1
66605: NEG
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66635: LD_ADDR_VAR 0 62
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 1
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: NEG
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66723: LD_ADDR_VAR 0 63
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: LD_INT 1
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66811: LD_ADDR_VAR 0 64
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 0
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 1
66869: NEG
66870: PUSH
66871: LD_INT 0
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: LD_INT 1
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: ST_TO_ADDR
// end ; 1 :
66899: GO 72796
66901: LD_INT 1
66903: DOUBLE
66904: EQUAL
66905: IFTRUE 66909
66907: GO 69532
66909: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66910: LD_ADDR_VAR 0 11
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: LD_INT 3
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 0
66929: PUSH
66930: LD_INT 3
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 1
66940: PUSH
66941: LD_INT 2
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: LIST
66953: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66954: LD_ADDR_VAR 0 12
66958: PUSH
66959: LD_INT 2
66961: PUSH
66962: LD_INT 1
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 3
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 3
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: LIST
66994: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66995: LD_ADDR_VAR 0 13
66999: PUSH
67000: LD_INT 3
67002: PUSH
67003: LD_INT 2
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 3
67012: PUSH
67013: LD_INT 3
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 2
67022: PUSH
67023: LD_INT 3
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67035: LD_ADDR_VAR 0 14
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: LD_INT 3
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: LD_INT 3
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: NEG
67063: PUSH
67064: LD_INT 2
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: LIST
67075: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67076: LD_ADDR_VAR 0 15
67080: PUSH
67081: LD_INT 2
67083: NEG
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 3
67094: NEG
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67120: LD_ADDR_VAR 0 16
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: LD_INT 3
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 3
67139: NEG
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 3
67151: NEG
67152: PUSH
67153: LD_INT 3
67155: NEG
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67166: LD_ADDR_VAR 0 17
67170: PUSH
67171: LD_INT 1
67173: NEG
67174: PUSH
67175: LD_INT 3
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: LD_INT 2
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: LIST
67209: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67210: LD_ADDR_VAR 0 18
67214: PUSH
67215: LD_INT 2
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: LD_INT 0
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67251: LD_ADDR_VAR 0 19
67255: PUSH
67256: LD_INT 3
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 3
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 2
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67291: LD_ADDR_VAR 0 20
67295: PUSH
67296: LD_INT 1
67298: PUSH
67299: LD_INT 3
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 1
67318: NEG
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67332: LD_ADDR_VAR 0 21
67336: PUSH
67337: LD_INT 2
67339: NEG
67340: PUSH
67341: LD_INT 1
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 3
67350: NEG
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 3
67361: NEG
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67376: LD_ADDR_VAR 0 22
67380: PUSH
67381: LD_INT 2
67383: NEG
67384: PUSH
67385: LD_INT 3
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 3
67395: NEG
67396: PUSH
67397: LD_INT 2
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 3
67407: NEG
67408: PUSH
67409: LD_INT 3
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67422: LD_ADDR_VAR 0 23
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: LD_INT 3
67432: NEG
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 1
67440: NEG
67441: PUSH
67442: LD_INT 4
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 1
67452: PUSH
67453: LD_INT 3
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67466: LD_ADDR_VAR 0 24
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 4
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67507: LD_ADDR_VAR 0 25
67511: PUSH
67512: LD_INT 3
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 4
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 3
67534: PUSH
67535: LD_INT 4
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67547: LD_ADDR_VAR 0 26
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 3
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: LD_INT 4
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 1
67574: NEG
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: LIST
67587: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67588: LD_ADDR_VAR 0 27
67592: PUSH
67593: LD_INT 3
67595: NEG
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: NEG
67607: PUSH
67608: LD_INT 1
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 4
67617: NEG
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: LIST
67631: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67632: LD_ADDR_VAR 0 28
67636: PUSH
67637: LD_INT 3
67639: NEG
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 3
67651: NEG
67652: PUSH
67653: LD_INT 4
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 4
67663: NEG
67664: PUSH
67665: LD_INT 3
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: LIST
67677: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67678: LD_ADDR_VAR 0 29
67682: PUSH
67683: LD_INT 1
67685: NEG
67686: PUSH
67687: LD_INT 3
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: LD_INT 3
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: LD_INT 2
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: LD_INT 4
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: LD_INT 4
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 1
67742: PUSH
67743: LD_INT 3
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: LD_INT 5
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 5
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: LD_INT 4
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 1
67787: NEG
67788: PUSH
67789: LD_INT 6
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: LD_INT 6
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 1
67810: PUSH
67811: LD_INT 5
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67833: LD_ADDR_VAR 0 30
67837: PUSH
67838: LD_INT 2
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 3
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: LD_INT 1
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 4
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 4
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 5
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 5
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 5
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 6
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 6
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67976: LD_ADDR_VAR 0 31
67980: PUSH
67981: LD_INT 3
67983: PUSH
67984: LD_INT 2
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 2
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 4
68013: PUSH
68014: LD_INT 3
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 4
68023: PUSH
68024: LD_INT 4
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: LD_INT 4
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 5
68043: PUSH
68044: LD_INT 4
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 5
68053: PUSH
68054: LD_INT 5
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 4
68063: PUSH
68064: LD_INT 5
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 6
68073: PUSH
68074: LD_INT 5
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 6
68083: PUSH
68084: LD_INT 6
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 5
68093: PUSH
68094: LD_INT 6
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68115: LD_ADDR_VAR 0 32
68119: PUSH
68120: LD_INT 1
68122: PUSH
68123: LD_INT 3
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: LD_INT 3
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: LD_INT 4
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 4
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: NEG
68174: PUSH
68175: LD_INT 3
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: LD_INT 5
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: LD_INT 5
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: LD_INT 4
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: LD_INT 6
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: LD_INT 6
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: NEG
68236: PUSH
68237: LD_INT 5
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68258: LD_ADDR_VAR 0 33
68262: PUSH
68263: LD_INT 2
68265: NEG
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 3
68276: NEG
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 3
68287: NEG
68288: PUSH
68289: LD_INT 1
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 3
68299: NEG
68300: PUSH
68301: LD_INT 1
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 4
68310: NEG
68311: PUSH
68312: LD_INT 0
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 4
68321: NEG
68322: PUSH
68323: LD_INT 1
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 4
68333: NEG
68334: PUSH
68335: LD_INT 1
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 5
68344: NEG
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 5
68355: NEG
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 5
68367: NEG
68368: PUSH
68369: LD_INT 1
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 6
68378: NEG
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 6
68389: NEG
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68413: LD_ADDR_VAR 0 34
68417: PUSH
68418: LD_INT 2
68420: NEG
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 3
68432: NEG
68433: PUSH
68434: LD_INT 2
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 3
68444: NEG
68445: PUSH
68446: LD_INT 3
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 3
68456: NEG
68457: PUSH
68458: LD_INT 4
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: NEG
68469: PUSH
68470: LD_INT 3
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 4
68480: NEG
68481: PUSH
68482: LD_INT 4
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 4
68492: NEG
68493: PUSH
68494: LD_INT 5
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 5
68504: NEG
68505: PUSH
68506: LD_INT 4
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 5
68516: NEG
68517: PUSH
68518: LD_INT 5
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 5
68528: NEG
68529: PUSH
68530: LD_INT 6
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 6
68540: NEG
68541: PUSH
68542: LD_INT 5
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 6
68552: NEG
68553: PUSH
68554: LD_INT 6
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68576: LD_ADDR_VAR 0 41
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: LD_INT 2
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 1
68594: NEG
68595: PUSH
68596: LD_INT 3
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: LD_INT 2
68609: NEG
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: LIST
68619: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68620: LD_ADDR_VAR 0 42
68624: PUSH
68625: LD_INT 2
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 2
68637: PUSH
68638: LD_INT 1
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 3
68648: PUSH
68649: LD_INT 1
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68661: LD_ADDR_VAR 0 43
68665: PUSH
68666: LD_INT 2
68668: PUSH
68669: LD_INT 2
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 3
68678: PUSH
68679: LD_INT 2
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 2
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: LIST
68700: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68701: LD_ADDR_VAR 0 44
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 2
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 1
68718: PUSH
68719: LD_INT 3
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 1
68728: NEG
68729: PUSH
68730: LD_INT 2
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: LIST
68741: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68742: LD_ADDR_VAR 0 45
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 2
68760: NEG
68761: PUSH
68762: LD_INT 1
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: LD_INT 1
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: LIST
68785: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68786: LD_ADDR_VAR 0 46
68790: PUSH
68791: LD_INT 2
68793: NEG
68794: PUSH
68795: LD_INT 2
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 2
68805: NEG
68806: PUSH
68807: LD_INT 3
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 3
68817: NEG
68818: PUSH
68819: LD_INT 2
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: LIST
68831: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68832: LD_ADDR_VAR 0 47
68836: PUSH
68837: LD_INT 2
68839: NEG
68840: PUSH
68841: LD_INT 3
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: PUSH
68853: LD_INT 3
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68865: LD_ADDR_VAR 0 48
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: LD_INT 2
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 2
68883: PUSH
68884: LD_INT 1
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68896: LD_ADDR_VAR 0 49
68900: PUSH
68901: LD_INT 3
68903: PUSH
68904: LD_INT 1
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: PUSH
68914: LD_INT 2
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68925: LD_ADDR_VAR 0 50
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: LD_INT 3
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68954: LD_ADDR_VAR 0 51
68958: PUSH
68959: LD_INT 1
68961: NEG
68962: PUSH
68963: LD_INT 2
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 2
68972: NEG
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68985: LD_ADDR_VAR 0 52
68989: PUSH
68990: LD_INT 3
68992: NEG
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 3
69004: NEG
69005: PUSH
69006: LD_INT 2
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69018: LD_ADDR_VAR 0 53
69022: PUSH
69023: LD_INT 1
69025: NEG
69026: PUSH
69027: LD_INT 3
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: LD_INT 3
69040: NEG
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 1
69048: PUSH
69049: LD_INT 2
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: LIST
69061: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69062: LD_ADDR_VAR 0 54
69066: PUSH
69067: LD_INT 2
69069: PUSH
69070: LD_INT 1
69072: NEG
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 3
69080: PUSH
69081: LD_INT 0
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 3
69090: PUSH
69091: LD_INT 1
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: LIST
69102: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69103: LD_ADDR_VAR 0 55
69107: PUSH
69108: LD_INT 3
69110: PUSH
69111: LD_INT 2
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 3
69120: PUSH
69121: LD_INT 3
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: LD_INT 3
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: LIST
69142: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69143: LD_ADDR_VAR 0 56
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: LD_INT 3
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 0
69160: PUSH
69161: LD_INT 3
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 1
69170: NEG
69171: PUSH
69172: LD_INT 2
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: LIST
69183: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69184: LD_ADDR_VAR 0 57
69188: PUSH
69189: LD_INT 2
69191: NEG
69192: PUSH
69193: LD_INT 1
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 3
69202: NEG
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 3
69213: NEG
69214: PUSH
69215: LD_INT 1
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69228: LD_ADDR_VAR 0 58
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: LD_INT 3
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 3
69247: NEG
69248: PUSH
69249: LD_INT 2
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 3
69259: NEG
69260: PUSH
69261: LD_INT 3
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: LIST
69273: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69274: LD_ADDR_VAR 0 59
69278: PUSH
69279: LD_INT 1
69281: NEG
69282: PUSH
69283: LD_INT 2
69285: NEG
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 2
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 1
69304: PUSH
69305: LD_INT 1
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: LIST
69317: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69318: LD_ADDR_VAR 0 60
69322: PUSH
69323: LD_INT 1
69325: PUSH
69326: LD_INT 1
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 2
69336: PUSH
69337: LD_INT 0
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 2
69346: PUSH
69347: LD_INT 1
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: LIST
69358: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69359: LD_ADDR_VAR 0 61
69363: PUSH
69364: LD_INT 2
69366: PUSH
69367: LD_INT 1
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 2
69376: PUSH
69377: LD_INT 2
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: LD_INT 2
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69399: LD_ADDR_VAR 0 62
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: LD_INT 2
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 0
69416: PUSH
69417: LD_INT 2
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 1
69426: NEG
69427: PUSH
69428: LD_INT 1
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: LIST
69439: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69440: LD_ADDR_VAR 0 63
69444: PUSH
69445: LD_INT 1
69447: NEG
69448: PUSH
69449: LD_INT 1
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 2
69458: NEG
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 2
69469: NEG
69470: PUSH
69471: LD_INT 1
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: LIST
69483: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69484: LD_ADDR_VAR 0 64
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: LD_INT 2
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 2
69503: NEG
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 2
69515: NEG
69516: PUSH
69517: LD_INT 2
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: LIST
69529: ST_TO_ADDR
// end ; 2 :
69530: GO 72796
69532: LD_INT 2
69534: DOUBLE
69535: EQUAL
69536: IFTRUE 69540
69538: GO 72795
69540: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69541: LD_ADDR_VAR 0 29
69545: PUSH
69546: LD_INT 4
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 4
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 5
69569: PUSH
69570: LD_INT 0
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 5
69579: PUSH
69580: LD_INT 1
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 4
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 3
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 3
69609: PUSH
69610: LD_INT 1
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: LD_INT 2
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 5
69631: PUSH
69632: LD_INT 2
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 3
69641: PUSH
69642: LD_INT 3
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 3
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 4
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 4
69671: PUSH
69672: LD_INT 4
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 3
69681: PUSH
69682: LD_INT 4
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 2
69691: PUSH
69692: LD_INT 3
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 2
69701: PUSH
69702: LD_INT 2
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 4
69711: PUSH
69712: LD_INT 2
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: LD_INT 4
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: LD_INT 4
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: LD_INT 3
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 1
69751: PUSH
69752: LD_INT 4
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: PUSH
69762: LD_INT 5
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: LD_INT 5
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: NEG
69782: PUSH
69783: LD_INT 4
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 1
69792: NEG
69793: PUSH
69794: LD_INT 3
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: LD_INT 5
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 2
69813: NEG
69814: PUSH
69815: LD_INT 3
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 3
69824: NEG
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: NEG
69836: PUSH
69837: LD_INT 1
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 2
69858: NEG
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 3
69869: NEG
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 4
69880: NEG
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 4
69891: NEG
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 4
69903: NEG
69904: PUSH
69905: LD_INT 2
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 4
69926: NEG
69927: PUSH
69928: LD_INT 4
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 4
69938: NEG
69939: PUSH
69940: LD_INT 5
69942: NEG
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 3
69950: NEG
69951: PUSH
69952: LD_INT 4
69954: NEG
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 3
69962: NEG
69963: PUSH
69964: LD_INT 3
69966: NEG
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 4
69974: NEG
69975: PUSH
69976: LD_INT 3
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 5
69986: NEG
69987: PUSH
69988: LD_INT 4
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 5
69998: NEG
69999: PUSH
70000: LD_INT 5
70002: NEG
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 3
70010: NEG
70011: PUSH
70012: LD_INT 5
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 5
70022: NEG
70023: PUSH
70024: LD_INT 3
70026: NEG
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70079: LD_ADDR_VAR 0 30
70083: PUSH
70084: LD_INT 4
70086: PUSH
70087: LD_INT 4
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 4
70096: PUSH
70097: LD_INT 3
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 5
70106: PUSH
70107: LD_INT 4
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 5
70116: PUSH
70117: LD_INT 5
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 4
70126: PUSH
70127: LD_INT 5
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 3
70136: PUSH
70137: LD_INT 4
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 5
70156: PUSH
70157: LD_INT 3
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 3
70166: PUSH
70167: LD_INT 5
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: LD_INT 3
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: LD_INT 2
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 1
70196: PUSH
70197: LD_INT 3
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: LD_INT 4
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 0
70216: PUSH
70217: LD_INT 4
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 1
70237: NEG
70238: PUSH
70239: LD_INT 2
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 2
70248: PUSH
70249: LD_INT 4
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 2
70258: NEG
70259: PUSH
70260: LD_INT 2
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 4
70269: NEG
70270: PUSH
70271: LD_INT 0
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 4
70280: NEG
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: LD_INT 0
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 3
70303: NEG
70304: PUSH
70305: LD_INT 1
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 4
70314: NEG
70315: PUSH
70316: LD_INT 1
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 5
70325: NEG
70326: PUSH
70327: LD_INT 0
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 5
70336: NEG
70337: PUSH
70338: LD_INT 1
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 5
70348: NEG
70349: PUSH
70350: LD_INT 2
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: LD_INT 2
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 3
70371: NEG
70372: PUSH
70373: LD_INT 3
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 3
70383: NEG
70384: PUSH
70385: LD_INT 4
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 2
70395: NEG
70396: PUSH
70397: LD_INT 3
70399: NEG
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 2
70407: NEG
70408: PUSH
70409: LD_INT 2
70411: NEG
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 3
70419: NEG
70420: PUSH
70421: LD_INT 2
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 4
70431: NEG
70432: PUSH
70433: LD_INT 3
70435: NEG
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 4
70443: NEG
70444: PUSH
70445: LD_INT 4
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 2
70455: NEG
70456: PUSH
70457: LD_INT 4
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 4
70467: NEG
70468: PUSH
70469: LD_INT 2
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 4
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 0
70490: PUSH
70491: LD_INT 5
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 1
70501: PUSH
70502: LD_INT 4
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 1
70512: PUSH
70513: LD_INT 3
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: LD_INT 3
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: LD_INT 4
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 1
70546: NEG
70547: PUSH
70548: LD_INT 5
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 2
70558: PUSH
70559: LD_INT 3
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 2
70569: NEG
70570: PUSH
70571: LD_INT 5
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70626: LD_ADDR_VAR 0 31
70630: PUSH
70631: LD_INT 0
70633: PUSH
70634: LD_INT 4
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: LD_INT 3
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: PUSH
70654: LD_INT 4
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: LD_INT 5
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: LD_INT 5
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: LD_INT 4
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 1
70694: NEG
70695: PUSH
70696: LD_INT 3
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 2
70705: PUSH
70706: LD_INT 5
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 2
70715: NEG
70716: PUSH
70717: LD_INT 3
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 3
70726: NEG
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 3
70737: NEG
70738: PUSH
70739: LD_INT 1
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 2
70749: NEG
70750: PUSH
70751: LD_INT 0
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 2
70760: NEG
70761: PUSH
70762: LD_INT 1
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 3
70771: NEG
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 4
70782: NEG
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 4
70793: NEG
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 4
70805: NEG
70806: PUSH
70807: LD_INT 2
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 2
70817: NEG
70818: PUSH
70819: LD_INT 2
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 4
70828: NEG
70829: PUSH
70830: LD_INT 4
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 4
70840: NEG
70841: PUSH
70842: LD_INT 5
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: NEG
70853: PUSH
70854: LD_INT 4
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 3
70864: NEG
70865: PUSH
70866: LD_INT 3
70868: NEG
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 4
70876: NEG
70877: PUSH
70878: LD_INT 3
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 5
70888: NEG
70889: PUSH
70890: LD_INT 4
70892: NEG
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 5
70900: NEG
70901: PUSH
70902: LD_INT 5
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 3
70912: NEG
70913: PUSH
70914: LD_INT 5
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 5
70924: NEG
70925: PUSH
70926: LD_INT 3
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 0
70936: PUSH
70937: LD_INT 3
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 0
70947: PUSH
70948: LD_INT 4
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: LD_INT 3
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 1
70969: PUSH
70970: LD_INT 2
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: LD_INT 2
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 1
70991: NEG
70992: PUSH
70993: LD_INT 3
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 1
71003: NEG
71004: PUSH
71005: LD_INT 4
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 2
71015: PUSH
71016: LD_INT 2
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 2
71026: NEG
71027: PUSH
71028: LD_INT 4
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 4
71038: PUSH
71039: LD_INT 0
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 4
71048: PUSH
71049: LD_INT 1
71051: NEG
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 5
71059: PUSH
71060: LD_INT 0
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 5
71069: PUSH
71070: LD_INT 1
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 4
71079: PUSH
71080: LD_INT 1
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 3
71089: PUSH
71090: LD_INT 0
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 3
71099: PUSH
71100: LD_INT 1
71102: NEG
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 3
71110: PUSH
71111: LD_INT 2
71113: NEG
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 5
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71176: LD_ADDR_VAR 0 32
71180: PUSH
71181: LD_INT 4
71183: NEG
71184: PUSH
71185: LD_INT 0
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 4
71194: NEG
71195: PUSH
71196: LD_INT 1
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 3
71206: NEG
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 3
71217: NEG
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 4
71228: NEG
71229: PUSH
71230: LD_INT 1
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 5
71239: NEG
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 5
71250: NEG
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 5
71262: NEG
71263: PUSH
71264: LD_INT 2
71266: NEG
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 3
71274: NEG
71275: PUSH
71276: LD_INT 2
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 3
71285: NEG
71286: PUSH
71287: LD_INT 3
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 3
71297: NEG
71298: PUSH
71299: LD_INT 4
71301: NEG
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 2
71309: NEG
71310: PUSH
71311: LD_INT 3
71313: NEG
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 2
71321: NEG
71322: PUSH
71323: LD_INT 2
71325: NEG
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 3
71333: NEG
71334: PUSH
71335: LD_INT 2
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 4
71345: NEG
71346: PUSH
71347: LD_INT 3
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 4
71357: NEG
71358: PUSH
71359: LD_INT 4
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 2
71369: NEG
71370: PUSH
71371: LD_INT 4
71373: NEG
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 4
71381: NEG
71382: PUSH
71383: LD_INT 2
71385: NEG
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: LD_INT 4
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: LD_INT 5
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 1
71415: PUSH
71416: LD_INT 4
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 1
71426: PUSH
71427: LD_INT 3
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: LD_INT 3
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 1
71448: NEG
71449: PUSH
71450: LD_INT 4
71452: NEG
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 1
71460: NEG
71461: PUSH
71462: LD_INT 5
71464: NEG
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 2
71472: PUSH
71473: LD_INT 3
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 2
71483: NEG
71484: PUSH
71485: LD_INT 5
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 3
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 3
71505: PUSH
71506: LD_INT 1
71508: NEG
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 4
71516: PUSH
71517: LD_INT 0
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: LD_INT 4
71526: PUSH
71527: LD_INT 1
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 3
71536: PUSH
71537: LD_INT 1
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 2
71546: PUSH
71547: LD_INT 0
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: LD_INT 1
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 2
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 4
71578: PUSH
71579: LD_INT 2
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 4
71588: PUSH
71589: LD_INT 4
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 4
71598: PUSH
71599: LD_INT 3
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 5
71608: PUSH
71609: LD_INT 4
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 5
71618: PUSH
71619: LD_INT 5
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 4
71628: PUSH
71629: LD_INT 5
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 3
71638: PUSH
71639: LD_INT 4
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 3
71648: PUSH
71649: LD_INT 3
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 5
71658: PUSH
71659: LD_INT 3
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 3
71668: PUSH
71669: LD_INT 5
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71723: LD_ADDR_VAR 0 33
71727: PUSH
71728: LD_INT 4
71730: NEG
71731: PUSH
71732: LD_INT 4
71734: NEG
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 4
71742: NEG
71743: PUSH
71744: LD_INT 5
71746: NEG
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 3
71754: NEG
71755: PUSH
71756: LD_INT 4
71758: NEG
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 3
71766: NEG
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 4
71778: NEG
71779: PUSH
71780: LD_INT 3
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 5
71790: NEG
71791: PUSH
71792: LD_INT 4
71794: NEG
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 5
71802: NEG
71803: PUSH
71804: LD_INT 5
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 3
71814: NEG
71815: PUSH
71816: LD_INT 5
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 5
71826: NEG
71827: PUSH
71828: LD_INT 3
71830: NEG
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 0
71838: PUSH
71839: LD_INT 3
71841: NEG
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: LD_INT 4
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 1
71860: PUSH
71861: LD_INT 3
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 1
71871: PUSH
71872: LD_INT 2
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 0
71882: PUSH
71883: LD_INT 2
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 1
71893: NEG
71894: PUSH
71895: LD_INT 3
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 1
71905: NEG
71906: PUSH
71907: LD_INT 4
71909: NEG
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 2
71917: PUSH
71918: LD_INT 2
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 2
71928: NEG
71929: PUSH
71930: LD_INT 4
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 4
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 4
71950: PUSH
71951: LD_INT 1
71953: NEG
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 5
71961: PUSH
71962: LD_INT 0
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 5
71971: PUSH
71972: LD_INT 1
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 4
71981: PUSH
71982: LD_INT 1
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 3
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 3
72001: PUSH
72002: LD_INT 1
72004: NEG
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 3
72012: PUSH
72013: LD_INT 2
72015: NEG
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 5
72023: PUSH
72024: LD_INT 2
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 3
72033: PUSH
72034: LD_INT 3
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 3
72043: PUSH
72044: LD_INT 2
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 4
72053: PUSH
72054: LD_INT 3
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 4
72063: PUSH
72064: LD_INT 4
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 3
72073: PUSH
72074: LD_INT 4
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 2
72083: PUSH
72084: LD_INT 3
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 2
72093: PUSH
72094: LD_INT 2
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 4
72103: PUSH
72104: LD_INT 2
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 2
72113: PUSH
72114: LD_INT 4
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 0
72123: PUSH
72124: LD_INT 4
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 0
72133: PUSH
72134: LD_INT 3
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 1
72143: PUSH
72144: LD_INT 4
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 1
72153: PUSH
72154: LD_INT 5
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 0
72163: PUSH
72164: LD_INT 5
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 1
72173: NEG
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 1
72184: NEG
72185: PUSH
72186: LD_INT 3
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 2
72195: PUSH
72196: LD_INT 5
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 2
72205: NEG
72206: PUSH
72207: LD_INT 3
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72261: LD_ADDR_VAR 0 34
72265: PUSH
72266: LD_INT 0
72268: PUSH
72269: LD_INT 4
72271: NEG
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 0
72279: PUSH
72280: LD_INT 5
72282: NEG
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 1
72290: PUSH
72291: LD_INT 4
72293: NEG
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 1
72301: PUSH
72302: LD_INT 3
72304: NEG
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 0
72312: PUSH
72313: LD_INT 3
72315: NEG
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 1
72323: NEG
72324: PUSH
72325: LD_INT 4
72327: NEG
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 1
72335: NEG
72336: PUSH
72337: LD_INT 5
72339: NEG
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 2
72347: PUSH
72348: LD_INT 3
72350: NEG
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 2
72358: NEG
72359: PUSH
72360: LD_INT 5
72362: NEG
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 3
72370: PUSH
72371: LD_INT 0
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 3
72380: PUSH
72381: LD_INT 1
72383: NEG
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 4
72391: PUSH
72392: LD_INT 0
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 4
72401: PUSH
72402: LD_INT 1
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 3
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 2
72421: PUSH
72422: LD_INT 0
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 2
72431: PUSH
72432: LD_INT 1
72434: NEG
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 2
72442: PUSH
72443: LD_INT 2
72445: NEG
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 4
72453: PUSH
72454: LD_INT 2
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 4
72463: PUSH
72464: LD_INT 4
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 4
72473: PUSH
72474: LD_INT 3
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 5
72483: PUSH
72484: LD_INT 4
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 5
72493: PUSH
72494: LD_INT 5
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 4
72503: PUSH
72504: LD_INT 5
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 3
72513: PUSH
72514: LD_INT 4
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 3
72523: PUSH
72524: LD_INT 3
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 5
72533: PUSH
72534: LD_INT 3
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 3
72543: PUSH
72544: LD_INT 5
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 0
72553: PUSH
72554: LD_INT 3
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: LD_INT 2
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 1
72573: PUSH
72574: LD_INT 3
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 1
72583: PUSH
72584: LD_INT 4
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 0
72593: PUSH
72594: LD_INT 4
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 1
72603: NEG
72604: PUSH
72605: LD_INT 3
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 1
72614: NEG
72615: PUSH
72616: LD_INT 2
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 2
72625: PUSH
72626: LD_INT 4
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 2
72635: NEG
72636: PUSH
72637: LD_INT 2
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_INT 4
72646: NEG
72647: PUSH
72648: LD_INT 0
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 4
72657: NEG
72658: PUSH
72659: LD_INT 1
72661: NEG
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 3
72669: NEG
72670: PUSH
72671: LD_INT 0
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 3
72680: NEG
72681: PUSH
72682: LD_INT 1
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 4
72691: NEG
72692: PUSH
72693: LD_INT 1
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 5
72702: NEG
72703: PUSH
72704: LD_INT 0
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 5
72713: NEG
72714: PUSH
72715: LD_INT 1
72717: NEG
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 5
72725: NEG
72726: PUSH
72727: LD_INT 2
72729: NEG
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 3
72737: NEG
72738: PUSH
72739: LD_INT 2
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: ST_TO_ADDR
// end ; end ;
72793: GO 72796
72795: POP
// case btype of b_depot , b_warehouse :
72796: LD_VAR 0 1
72800: PUSH
72801: LD_INT 0
72803: DOUBLE
72804: EQUAL
72805: IFTRUE 72815
72807: LD_INT 1
72809: DOUBLE
72810: EQUAL
72811: IFTRUE 72815
72813: GO 73016
72815: POP
// case nation of nation_american :
72816: LD_VAR 0 5
72820: PUSH
72821: LD_INT 1
72823: DOUBLE
72824: EQUAL
72825: IFTRUE 72829
72827: GO 72885
72829: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72830: LD_ADDR_VAR 0 9
72834: PUSH
72835: LD_VAR 0 11
72839: PUSH
72840: LD_VAR 0 12
72844: PUSH
72845: LD_VAR 0 13
72849: PUSH
72850: LD_VAR 0 14
72854: PUSH
72855: LD_VAR 0 15
72859: PUSH
72860: LD_VAR 0 16
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: PUSH
72873: LD_VAR 0 4
72877: PUSH
72878: LD_INT 1
72880: PLUS
72881: ARRAY
72882: ST_TO_ADDR
72883: GO 73014
72885: LD_INT 2
72887: DOUBLE
72888: EQUAL
72889: IFTRUE 72893
72891: GO 72949
72893: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72894: LD_ADDR_VAR 0 9
72898: PUSH
72899: LD_VAR 0 17
72903: PUSH
72904: LD_VAR 0 18
72908: PUSH
72909: LD_VAR 0 19
72913: PUSH
72914: LD_VAR 0 20
72918: PUSH
72919: LD_VAR 0 21
72923: PUSH
72924: LD_VAR 0 22
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: PUSH
72937: LD_VAR 0 4
72941: PUSH
72942: LD_INT 1
72944: PLUS
72945: ARRAY
72946: ST_TO_ADDR
72947: GO 73014
72949: LD_INT 3
72951: DOUBLE
72952: EQUAL
72953: IFTRUE 72957
72955: GO 73013
72957: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72958: LD_ADDR_VAR 0 9
72962: PUSH
72963: LD_VAR 0 23
72967: PUSH
72968: LD_VAR 0 24
72972: PUSH
72973: LD_VAR 0 25
72977: PUSH
72978: LD_VAR 0 26
72982: PUSH
72983: LD_VAR 0 27
72987: PUSH
72988: LD_VAR 0 28
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: PUSH
73001: LD_VAR 0 4
73005: PUSH
73006: LD_INT 1
73008: PLUS
73009: ARRAY
73010: ST_TO_ADDR
73011: GO 73014
73013: POP
73014: GO 73569
73016: LD_INT 2
73018: DOUBLE
73019: EQUAL
73020: IFTRUE 73030
73022: LD_INT 3
73024: DOUBLE
73025: EQUAL
73026: IFTRUE 73030
73028: GO 73086
73030: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73031: LD_ADDR_VAR 0 9
73035: PUSH
73036: LD_VAR 0 29
73040: PUSH
73041: LD_VAR 0 30
73045: PUSH
73046: LD_VAR 0 31
73050: PUSH
73051: LD_VAR 0 32
73055: PUSH
73056: LD_VAR 0 33
73060: PUSH
73061: LD_VAR 0 34
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: PUSH
73074: LD_VAR 0 4
73078: PUSH
73079: LD_INT 1
73081: PLUS
73082: ARRAY
73083: ST_TO_ADDR
73084: GO 73569
73086: LD_INT 16
73088: DOUBLE
73089: EQUAL
73090: IFTRUE 73148
73092: LD_INT 17
73094: DOUBLE
73095: EQUAL
73096: IFTRUE 73148
73098: LD_INT 18
73100: DOUBLE
73101: EQUAL
73102: IFTRUE 73148
73104: LD_INT 19
73106: DOUBLE
73107: EQUAL
73108: IFTRUE 73148
73110: LD_INT 22
73112: DOUBLE
73113: EQUAL
73114: IFTRUE 73148
73116: LD_INT 20
73118: DOUBLE
73119: EQUAL
73120: IFTRUE 73148
73122: LD_INT 21
73124: DOUBLE
73125: EQUAL
73126: IFTRUE 73148
73128: LD_INT 23
73130: DOUBLE
73131: EQUAL
73132: IFTRUE 73148
73134: LD_INT 24
73136: DOUBLE
73137: EQUAL
73138: IFTRUE 73148
73140: LD_INT 25
73142: DOUBLE
73143: EQUAL
73144: IFTRUE 73148
73146: GO 73204
73148: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73149: LD_ADDR_VAR 0 9
73153: PUSH
73154: LD_VAR 0 35
73158: PUSH
73159: LD_VAR 0 36
73163: PUSH
73164: LD_VAR 0 37
73168: PUSH
73169: LD_VAR 0 38
73173: PUSH
73174: LD_VAR 0 39
73178: PUSH
73179: LD_VAR 0 40
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: PUSH
73192: LD_VAR 0 4
73196: PUSH
73197: LD_INT 1
73199: PLUS
73200: ARRAY
73201: ST_TO_ADDR
73202: GO 73569
73204: LD_INT 6
73206: DOUBLE
73207: EQUAL
73208: IFTRUE 73260
73210: LD_INT 7
73212: DOUBLE
73213: EQUAL
73214: IFTRUE 73260
73216: LD_INT 8
73218: DOUBLE
73219: EQUAL
73220: IFTRUE 73260
73222: LD_INT 13
73224: DOUBLE
73225: EQUAL
73226: IFTRUE 73260
73228: LD_INT 12
73230: DOUBLE
73231: EQUAL
73232: IFTRUE 73260
73234: LD_INT 15
73236: DOUBLE
73237: EQUAL
73238: IFTRUE 73260
73240: LD_INT 11
73242: DOUBLE
73243: EQUAL
73244: IFTRUE 73260
73246: LD_INT 14
73248: DOUBLE
73249: EQUAL
73250: IFTRUE 73260
73252: LD_INT 10
73254: DOUBLE
73255: EQUAL
73256: IFTRUE 73260
73258: GO 73316
73260: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73261: LD_ADDR_VAR 0 9
73265: PUSH
73266: LD_VAR 0 41
73270: PUSH
73271: LD_VAR 0 42
73275: PUSH
73276: LD_VAR 0 43
73280: PUSH
73281: LD_VAR 0 44
73285: PUSH
73286: LD_VAR 0 45
73290: PUSH
73291: LD_VAR 0 46
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: PUSH
73304: LD_VAR 0 4
73308: PUSH
73309: LD_INT 1
73311: PLUS
73312: ARRAY
73313: ST_TO_ADDR
73314: GO 73569
73316: LD_INT 36
73318: DOUBLE
73319: EQUAL
73320: IFTRUE 73324
73322: GO 73380
73324: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73325: LD_ADDR_VAR 0 9
73329: PUSH
73330: LD_VAR 0 47
73334: PUSH
73335: LD_VAR 0 48
73339: PUSH
73340: LD_VAR 0 49
73344: PUSH
73345: LD_VAR 0 50
73349: PUSH
73350: LD_VAR 0 51
73354: PUSH
73355: LD_VAR 0 52
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: PUSH
73368: LD_VAR 0 4
73372: PUSH
73373: LD_INT 1
73375: PLUS
73376: ARRAY
73377: ST_TO_ADDR
73378: GO 73569
73380: LD_INT 4
73382: DOUBLE
73383: EQUAL
73384: IFTRUE 73406
73386: LD_INT 5
73388: DOUBLE
73389: EQUAL
73390: IFTRUE 73406
73392: LD_INT 34
73394: DOUBLE
73395: EQUAL
73396: IFTRUE 73406
73398: LD_INT 37
73400: DOUBLE
73401: EQUAL
73402: IFTRUE 73406
73404: GO 73462
73406: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73407: LD_ADDR_VAR 0 9
73411: PUSH
73412: LD_VAR 0 53
73416: PUSH
73417: LD_VAR 0 54
73421: PUSH
73422: LD_VAR 0 55
73426: PUSH
73427: LD_VAR 0 56
73431: PUSH
73432: LD_VAR 0 57
73436: PUSH
73437: LD_VAR 0 58
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: PUSH
73450: LD_VAR 0 4
73454: PUSH
73455: LD_INT 1
73457: PLUS
73458: ARRAY
73459: ST_TO_ADDR
73460: GO 73569
73462: LD_INT 31
73464: DOUBLE
73465: EQUAL
73466: IFTRUE 73512
73468: LD_INT 32
73470: DOUBLE
73471: EQUAL
73472: IFTRUE 73512
73474: LD_INT 33
73476: DOUBLE
73477: EQUAL
73478: IFTRUE 73512
73480: LD_INT 27
73482: DOUBLE
73483: EQUAL
73484: IFTRUE 73512
73486: LD_INT 26
73488: DOUBLE
73489: EQUAL
73490: IFTRUE 73512
73492: LD_INT 28
73494: DOUBLE
73495: EQUAL
73496: IFTRUE 73512
73498: LD_INT 29
73500: DOUBLE
73501: EQUAL
73502: IFTRUE 73512
73504: LD_INT 30
73506: DOUBLE
73507: EQUAL
73508: IFTRUE 73512
73510: GO 73568
73512: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73513: LD_ADDR_VAR 0 9
73517: PUSH
73518: LD_VAR 0 59
73522: PUSH
73523: LD_VAR 0 60
73527: PUSH
73528: LD_VAR 0 61
73532: PUSH
73533: LD_VAR 0 62
73537: PUSH
73538: LD_VAR 0 63
73542: PUSH
73543: LD_VAR 0 64
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: PUSH
73556: LD_VAR 0 4
73560: PUSH
73561: LD_INT 1
73563: PLUS
73564: ARRAY
73565: ST_TO_ADDR
73566: GO 73569
73568: POP
// temp_list2 = [ ] ;
73569: LD_ADDR_VAR 0 10
73573: PUSH
73574: EMPTY
73575: ST_TO_ADDR
// for i in temp_list do
73576: LD_ADDR_VAR 0 8
73580: PUSH
73581: LD_VAR 0 9
73585: PUSH
73586: FOR_IN
73587: IFFALSE 73639
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73589: LD_ADDR_VAR 0 10
73593: PUSH
73594: LD_VAR 0 10
73598: PUSH
73599: LD_VAR 0 8
73603: PUSH
73604: LD_INT 1
73606: ARRAY
73607: PUSH
73608: LD_VAR 0 2
73612: PLUS
73613: PUSH
73614: LD_VAR 0 8
73618: PUSH
73619: LD_INT 2
73621: ARRAY
73622: PUSH
73623: LD_VAR 0 3
73627: PLUS
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: EMPTY
73634: LIST
73635: ADD
73636: ST_TO_ADDR
73637: GO 73586
73639: POP
73640: POP
// result = temp_list2 ;
73641: LD_ADDR_VAR 0 7
73645: PUSH
73646: LD_VAR 0 10
73650: ST_TO_ADDR
// end ;
73651: LD_VAR 0 7
73655: RET
// export function EnemyInRange ( unit , dist ) ; begin
73656: LD_INT 0
73658: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73659: LD_ADDR_VAR 0 3
73663: PUSH
73664: LD_VAR 0 1
73668: PPUSH
73669: CALL_OW 255
73673: PPUSH
73674: LD_VAR 0 1
73678: PPUSH
73679: CALL_OW 250
73683: PPUSH
73684: LD_VAR 0 1
73688: PPUSH
73689: CALL_OW 251
73693: PPUSH
73694: LD_VAR 0 2
73698: PPUSH
73699: CALL 47029 0 4
73703: PUSH
73704: LD_INT 4
73706: ARRAY
73707: ST_TO_ADDR
// end ;
73708: LD_VAR 0 3
73712: RET
// export function PlayerSeeMe ( unit ) ; begin
73713: LD_INT 0
73715: PPUSH
// result := See ( your_side , unit ) ;
73716: LD_ADDR_VAR 0 2
73720: PUSH
73721: LD_OWVAR 2
73725: PPUSH
73726: LD_VAR 0 1
73730: PPUSH
73731: CALL_OW 292
73735: ST_TO_ADDR
// end ;
73736: LD_VAR 0 2
73740: RET
// export function ReverseDir ( unit ) ; begin
73741: LD_INT 0
73743: PPUSH
// if not unit then
73744: LD_VAR 0 1
73748: NOT
73749: IFFALSE 73753
// exit ;
73751: GO 73776
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73753: LD_ADDR_VAR 0 2
73757: PUSH
73758: LD_VAR 0 1
73762: PPUSH
73763: CALL_OW 254
73767: PUSH
73768: LD_INT 3
73770: PLUS
73771: PUSH
73772: LD_INT 6
73774: MOD
73775: ST_TO_ADDR
// end ;
73776: LD_VAR 0 2
73780: RET
// export function ReverseArray ( array ) ; var i ; begin
73781: LD_INT 0
73783: PPUSH
73784: PPUSH
// if not array then
73785: LD_VAR 0 1
73789: NOT
73790: IFFALSE 73794
// exit ;
73792: GO 73849
// result := [ ] ;
73794: LD_ADDR_VAR 0 2
73798: PUSH
73799: EMPTY
73800: ST_TO_ADDR
// for i := array downto 1 do
73801: LD_ADDR_VAR 0 3
73805: PUSH
73806: DOUBLE
73807: LD_VAR 0 1
73811: INC
73812: ST_TO_ADDR
73813: LD_INT 1
73815: PUSH
73816: FOR_DOWNTO
73817: IFFALSE 73847
// result := Join ( result , array [ i ] ) ;
73819: LD_ADDR_VAR 0 2
73823: PUSH
73824: LD_VAR 0 2
73828: PPUSH
73829: LD_VAR 0 1
73833: PUSH
73834: LD_VAR 0 3
73838: ARRAY
73839: PPUSH
73840: CALL 78505 0 2
73844: ST_TO_ADDR
73845: GO 73816
73847: POP
73848: POP
// end ;
73849: LD_VAR 0 2
73853: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73854: LD_INT 0
73856: PPUSH
73857: PPUSH
73858: PPUSH
73859: PPUSH
73860: PPUSH
73861: PPUSH
// if not unit or not hexes then
73862: LD_VAR 0 1
73866: NOT
73867: PUSH
73868: LD_VAR 0 2
73872: NOT
73873: OR
73874: IFFALSE 73878
// exit ;
73876: GO 74001
// dist := 9999 ;
73878: LD_ADDR_VAR 0 5
73882: PUSH
73883: LD_INT 9999
73885: ST_TO_ADDR
// for i = 1 to hexes do
73886: LD_ADDR_VAR 0 4
73890: PUSH
73891: DOUBLE
73892: LD_INT 1
73894: DEC
73895: ST_TO_ADDR
73896: LD_VAR 0 2
73900: PUSH
73901: FOR_TO
73902: IFFALSE 73989
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73904: LD_ADDR_VAR 0 6
73908: PUSH
73909: LD_VAR 0 1
73913: PPUSH
73914: LD_VAR 0 2
73918: PUSH
73919: LD_VAR 0 4
73923: ARRAY
73924: PUSH
73925: LD_INT 1
73927: ARRAY
73928: PPUSH
73929: LD_VAR 0 2
73933: PUSH
73934: LD_VAR 0 4
73938: ARRAY
73939: PUSH
73940: LD_INT 2
73942: ARRAY
73943: PPUSH
73944: CALL_OW 297
73948: ST_TO_ADDR
// if tdist < dist then
73949: LD_VAR 0 6
73953: PUSH
73954: LD_VAR 0 5
73958: LESS
73959: IFFALSE 73987
// begin hex := hexes [ i ] ;
73961: LD_ADDR_VAR 0 8
73965: PUSH
73966: LD_VAR 0 2
73970: PUSH
73971: LD_VAR 0 4
73975: ARRAY
73976: ST_TO_ADDR
// dist := tdist ;
73977: LD_ADDR_VAR 0 5
73981: PUSH
73982: LD_VAR 0 6
73986: ST_TO_ADDR
// end ; end ;
73987: GO 73901
73989: POP
73990: POP
// result := hex ;
73991: LD_ADDR_VAR 0 3
73995: PUSH
73996: LD_VAR 0 8
74000: ST_TO_ADDR
// end ;
74001: LD_VAR 0 3
74005: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74006: LD_INT 0
74008: PPUSH
74009: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74010: LD_VAR 0 1
74014: NOT
74015: PUSH
74016: LD_VAR 0 1
74020: PUSH
74021: LD_INT 21
74023: PUSH
74024: LD_INT 2
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 23
74033: PUSH
74034: LD_INT 2
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PPUSH
74045: CALL_OW 69
74049: IN
74050: NOT
74051: OR
74052: IFFALSE 74056
// exit ;
74054: GO 74103
// for i = 1 to 3 do
74056: LD_ADDR_VAR 0 3
74060: PUSH
74061: DOUBLE
74062: LD_INT 1
74064: DEC
74065: ST_TO_ADDR
74066: LD_INT 3
74068: PUSH
74069: FOR_TO
74070: IFFALSE 74101
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74072: LD_VAR 0 1
74076: PPUSH
74077: CALL_OW 250
74081: PPUSH
74082: LD_VAR 0 1
74086: PPUSH
74087: CALL_OW 251
74091: PPUSH
74092: LD_INT 1
74094: PPUSH
74095: CALL_OW 453
74099: GO 74069
74101: POP
74102: POP
// end ;
74103: LD_VAR 0 2
74107: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74108: LD_INT 0
74110: PPUSH
74111: PPUSH
74112: PPUSH
74113: PPUSH
74114: PPUSH
74115: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74116: LD_VAR 0 1
74120: NOT
74121: PUSH
74122: LD_VAR 0 2
74126: NOT
74127: OR
74128: PUSH
74129: LD_VAR 0 1
74133: PPUSH
74134: CALL_OW 314
74138: OR
74139: IFFALSE 74143
// exit ;
74141: GO 74610
// if GetLives ( i ) < 250 then
74143: LD_VAR 0 4
74147: PPUSH
74148: CALL_OW 256
74152: PUSH
74153: LD_INT 250
74155: LESS
74156: IFFALSE 74169
// begin ComAutodestruct ( i ) ;
74158: LD_VAR 0 4
74162: PPUSH
74163: CALL 74006 0 1
// exit ;
74167: GO 74610
// end ; x := GetX ( enemy_unit ) ;
74169: LD_ADDR_VAR 0 7
74173: PUSH
74174: LD_VAR 0 2
74178: PPUSH
74179: CALL_OW 250
74183: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74184: LD_ADDR_VAR 0 8
74188: PUSH
74189: LD_VAR 0 2
74193: PPUSH
74194: CALL_OW 251
74198: ST_TO_ADDR
// if not x or not y then
74199: LD_VAR 0 7
74203: NOT
74204: PUSH
74205: LD_VAR 0 8
74209: NOT
74210: OR
74211: IFFALSE 74215
// exit ;
74213: GO 74610
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74215: LD_ADDR_VAR 0 6
74219: PUSH
74220: LD_VAR 0 7
74224: PPUSH
74225: LD_INT 0
74227: PPUSH
74228: LD_INT 4
74230: PPUSH
74231: CALL_OW 272
74235: PUSH
74236: LD_VAR 0 8
74240: PPUSH
74241: LD_INT 0
74243: PPUSH
74244: LD_INT 4
74246: PPUSH
74247: CALL_OW 273
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_VAR 0 7
74260: PPUSH
74261: LD_INT 1
74263: PPUSH
74264: LD_INT 4
74266: PPUSH
74267: CALL_OW 272
74271: PUSH
74272: LD_VAR 0 8
74276: PPUSH
74277: LD_INT 1
74279: PPUSH
74280: LD_INT 4
74282: PPUSH
74283: CALL_OW 273
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_VAR 0 7
74296: PPUSH
74297: LD_INT 2
74299: PPUSH
74300: LD_INT 4
74302: PPUSH
74303: CALL_OW 272
74307: PUSH
74308: LD_VAR 0 8
74312: PPUSH
74313: LD_INT 2
74315: PPUSH
74316: LD_INT 4
74318: PPUSH
74319: CALL_OW 273
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_VAR 0 7
74332: PPUSH
74333: LD_INT 3
74335: PPUSH
74336: LD_INT 4
74338: PPUSH
74339: CALL_OW 272
74343: PUSH
74344: LD_VAR 0 8
74348: PPUSH
74349: LD_INT 3
74351: PPUSH
74352: LD_INT 4
74354: PPUSH
74355: CALL_OW 273
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: LD_VAR 0 7
74368: PPUSH
74369: LD_INT 4
74371: PPUSH
74372: LD_INT 4
74374: PPUSH
74375: CALL_OW 272
74379: PUSH
74380: LD_VAR 0 8
74384: PPUSH
74385: LD_INT 4
74387: PPUSH
74388: LD_INT 4
74390: PPUSH
74391: CALL_OW 273
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_VAR 0 7
74404: PPUSH
74405: LD_INT 5
74407: PPUSH
74408: LD_INT 4
74410: PPUSH
74411: CALL_OW 272
74415: PUSH
74416: LD_VAR 0 8
74420: PPUSH
74421: LD_INT 5
74423: PPUSH
74424: LD_INT 4
74426: PPUSH
74427: CALL_OW 273
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: ST_TO_ADDR
// for i = tmp downto 1 do
74444: LD_ADDR_VAR 0 4
74448: PUSH
74449: DOUBLE
74450: LD_VAR 0 6
74454: INC
74455: ST_TO_ADDR
74456: LD_INT 1
74458: PUSH
74459: FOR_DOWNTO
74460: IFFALSE 74561
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74462: LD_VAR 0 6
74466: PUSH
74467: LD_VAR 0 4
74471: ARRAY
74472: PUSH
74473: LD_INT 1
74475: ARRAY
74476: PPUSH
74477: LD_VAR 0 6
74481: PUSH
74482: LD_VAR 0 4
74486: ARRAY
74487: PUSH
74488: LD_INT 2
74490: ARRAY
74491: PPUSH
74492: CALL_OW 488
74496: NOT
74497: PUSH
74498: LD_VAR 0 6
74502: PUSH
74503: LD_VAR 0 4
74507: ARRAY
74508: PUSH
74509: LD_INT 1
74511: ARRAY
74512: PPUSH
74513: LD_VAR 0 6
74517: PUSH
74518: LD_VAR 0 4
74522: ARRAY
74523: PUSH
74524: LD_INT 2
74526: ARRAY
74527: PPUSH
74528: CALL_OW 428
74532: PUSH
74533: LD_INT 0
74535: NONEQUAL
74536: OR
74537: IFFALSE 74559
// tmp := Delete ( tmp , i ) ;
74539: LD_ADDR_VAR 0 6
74543: PUSH
74544: LD_VAR 0 6
74548: PPUSH
74549: LD_VAR 0 4
74553: PPUSH
74554: CALL_OW 3
74558: ST_TO_ADDR
74559: GO 74459
74561: POP
74562: POP
// j := GetClosestHex ( unit , tmp ) ;
74563: LD_ADDR_VAR 0 5
74567: PUSH
74568: LD_VAR 0 1
74572: PPUSH
74573: LD_VAR 0 6
74577: PPUSH
74578: CALL 73854 0 2
74582: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74583: LD_VAR 0 1
74587: PPUSH
74588: LD_VAR 0 5
74592: PUSH
74593: LD_INT 1
74595: ARRAY
74596: PPUSH
74597: LD_VAR 0 5
74601: PUSH
74602: LD_INT 2
74604: ARRAY
74605: PPUSH
74606: CALL_OW 111
// end ;
74610: LD_VAR 0 3
74614: RET
// export function PrepareApemanSoldier ( ) ; begin
74615: LD_INT 0
74617: PPUSH
// uc_nation := 0 ;
74618: LD_ADDR_OWVAR 21
74622: PUSH
74623: LD_INT 0
74625: ST_TO_ADDR
// hc_sex := sex_male ;
74626: LD_ADDR_OWVAR 27
74630: PUSH
74631: LD_INT 1
74633: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74634: LD_ADDR_OWVAR 28
74638: PUSH
74639: LD_INT 15
74641: ST_TO_ADDR
// hc_gallery :=  ;
74642: LD_ADDR_OWVAR 33
74646: PUSH
74647: LD_STRING 
74649: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74650: LD_ADDR_OWVAR 31
74654: PUSH
74655: LD_INT 0
74657: PPUSH
74658: LD_INT 3
74660: PPUSH
74661: CALL_OW 12
74665: PUSH
74666: LD_INT 0
74668: PPUSH
74669: LD_INT 3
74671: PPUSH
74672: CALL_OW 12
74676: PUSH
74677: LD_INT 0
74679: PUSH
74680: LD_INT 0
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: ST_TO_ADDR
// end ;
74689: LD_VAR 0 1
74693: RET
// export function PrepareApemanEngineer ( ) ; begin
74694: LD_INT 0
74696: PPUSH
// uc_nation := 0 ;
74697: LD_ADDR_OWVAR 21
74701: PUSH
74702: LD_INT 0
74704: ST_TO_ADDR
// hc_sex := sex_male ;
74705: LD_ADDR_OWVAR 27
74709: PUSH
74710: LD_INT 1
74712: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74713: LD_ADDR_OWVAR 28
74717: PUSH
74718: LD_INT 16
74720: ST_TO_ADDR
// hc_gallery :=  ;
74721: LD_ADDR_OWVAR 33
74725: PUSH
74726: LD_STRING 
74728: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74729: LD_ADDR_OWVAR 31
74733: PUSH
74734: LD_INT 0
74736: PPUSH
74737: LD_INT 3
74739: PPUSH
74740: CALL_OW 12
74744: PUSH
74745: LD_INT 0
74747: PPUSH
74748: LD_INT 3
74750: PPUSH
74751: CALL_OW 12
74755: PUSH
74756: LD_INT 0
74758: PUSH
74759: LD_INT 0
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: ST_TO_ADDR
// end ;
74768: LD_VAR 0 1
74772: RET
// export function PrepareApeman ( agressivity ) ; begin
74773: LD_INT 0
74775: PPUSH
// uc_side := 0 ;
74776: LD_ADDR_OWVAR 20
74780: PUSH
74781: LD_INT 0
74783: ST_TO_ADDR
// uc_nation := 0 ;
74784: LD_ADDR_OWVAR 21
74788: PUSH
74789: LD_INT 0
74791: ST_TO_ADDR
// hc_sex := sex_male ;
74792: LD_ADDR_OWVAR 27
74796: PUSH
74797: LD_INT 1
74799: ST_TO_ADDR
// hc_class := class_apeman ;
74800: LD_ADDR_OWVAR 28
74804: PUSH
74805: LD_INT 12
74807: ST_TO_ADDR
// hc_gallery :=  ;
74808: LD_ADDR_OWVAR 33
74812: PUSH
74813: LD_STRING 
74815: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74816: LD_ADDR_OWVAR 35
74820: PUSH
74821: LD_VAR 0 1
74825: NEG
74826: PPUSH
74827: LD_VAR 0 1
74831: PPUSH
74832: CALL_OW 12
74836: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74837: LD_ADDR_OWVAR 31
74841: PUSH
74842: LD_INT 0
74844: PPUSH
74845: LD_INT 3
74847: PPUSH
74848: CALL_OW 12
74852: PUSH
74853: LD_INT 0
74855: PPUSH
74856: LD_INT 3
74858: PPUSH
74859: CALL_OW 12
74863: PUSH
74864: LD_INT 0
74866: PUSH
74867: LD_INT 0
74869: PUSH
74870: EMPTY
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: ST_TO_ADDR
// end ;
74876: LD_VAR 0 2
74880: RET
// export function PrepareTiger ( agressivity ) ; begin
74881: LD_INT 0
74883: PPUSH
// uc_side := 0 ;
74884: LD_ADDR_OWVAR 20
74888: PUSH
74889: LD_INT 0
74891: ST_TO_ADDR
// uc_nation := 0 ;
74892: LD_ADDR_OWVAR 21
74896: PUSH
74897: LD_INT 0
74899: ST_TO_ADDR
// hc_class := class_tiger ;
74900: LD_ADDR_OWVAR 28
74904: PUSH
74905: LD_INT 14
74907: ST_TO_ADDR
// hc_gallery :=  ;
74908: LD_ADDR_OWVAR 33
74912: PUSH
74913: LD_STRING 
74915: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74916: LD_ADDR_OWVAR 35
74920: PUSH
74921: LD_VAR 0 1
74925: NEG
74926: PPUSH
74927: LD_VAR 0 1
74931: PPUSH
74932: CALL_OW 12
74936: ST_TO_ADDR
// end ;
74937: LD_VAR 0 2
74941: RET
// export function PrepareEnchidna ( ) ; begin
74942: LD_INT 0
74944: PPUSH
// uc_side := 0 ;
74945: LD_ADDR_OWVAR 20
74949: PUSH
74950: LD_INT 0
74952: ST_TO_ADDR
// uc_nation := 0 ;
74953: LD_ADDR_OWVAR 21
74957: PUSH
74958: LD_INT 0
74960: ST_TO_ADDR
// hc_class := class_baggie ;
74961: LD_ADDR_OWVAR 28
74965: PUSH
74966: LD_INT 13
74968: ST_TO_ADDR
// hc_gallery :=  ;
74969: LD_ADDR_OWVAR 33
74973: PUSH
74974: LD_STRING 
74976: ST_TO_ADDR
// end ;
74977: LD_VAR 0 1
74981: RET
// export function PrepareFrog ( ) ; begin
74982: LD_INT 0
74984: PPUSH
// uc_side := 0 ;
74985: LD_ADDR_OWVAR 20
74989: PUSH
74990: LD_INT 0
74992: ST_TO_ADDR
// uc_nation := 0 ;
74993: LD_ADDR_OWVAR 21
74997: PUSH
74998: LD_INT 0
75000: ST_TO_ADDR
// hc_class := class_frog ;
75001: LD_ADDR_OWVAR 28
75005: PUSH
75006: LD_INT 19
75008: ST_TO_ADDR
// hc_gallery :=  ;
75009: LD_ADDR_OWVAR 33
75013: PUSH
75014: LD_STRING 
75016: ST_TO_ADDR
// end ;
75017: LD_VAR 0 1
75021: RET
// export function PrepareFish ( ) ; begin
75022: LD_INT 0
75024: PPUSH
// uc_side := 0 ;
75025: LD_ADDR_OWVAR 20
75029: PUSH
75030: LD_INT 0
75032: ST_TO_ADDR
// uc_nation := 0 ;
75033: LD_ADDR_OWVAR 21
75037: PUSH
75038: LD_INT 0
75040: ST_TO_ADDR
// hc_class := class_fish ;
75041: LD_ADDR_OWVAR 28
75045: PUSH
75046: LD_INT 20
75048: ST_TO_ADDR
// hc_gallery :=  ;
75049: LD_ADDR_OWVAR 33
75053: PUSH
75054: LD_STRING 
75056: ST_TO_ADDR
// end ;
75057: LD_VAR 0 1
75061: RET
// export function PrepareBird ( ) ; begin
75062: LD_INT 0
75064: PPUSH
// uc_side := 0 ;
75065: LD_ADDR_OWVAR 20
75069: PUSH
75070: LD_INT 0
75072: ST_TO_ADDR
// uc_nation := 0 ;
75073: LD_ADDR_OWVAR 21
75077: PUSH
75078: LD_INT 0
75080: ST_TO_ADDR
// hc_class := class_phororhacos ;
75081: LD_ADDR_OWVAR 28
75085: PUSH
75086: LD_INT 18
75088: ST_TO_ADDR
// hc_gallery :=  ;
75089: LD_ADDR_OWVAR 33
75093: PUSH
75094: LD_STRING 
75096: ST_TO_ADDR
// end ;
75097: LD_VAR 0 1
75101: RET
// export function PrepareHorse ( ) ; begin
75102: LD_INT 0
75104: PPUSH
// uc_side := 0 ;
75105: LD_ADDR_OWVAR 20
75109: PUSH
75110: LD_INT 0
75112: ST_TO_ADDR
// uc_nation := 0 ;
75113: LD_ADDR_OWVAR 21
75117: PUSH
75118: LD_INT 0
75120: ST_TO_ADDR
// hc_class := class_horse ;
75121: LD_ADDR_OWVAR 28
75125: PUSH
75126: LD_INT 21
75128: ST_TO_ADDR
// hc_gallery :=  ;
75129: LD_ADDR_OWVAR 33
75133: PUSH
75134: LD_STRING 
75136: ST_TO_ADDR
// end ;
75137: LD_VAR 0 1
75141: RET
// export function PrepareMastodont ( ) ; begin
75142: LD_INT 0
75144: PPUSH
// uc_side := 0 ;
75145: LD_ADDR_OWVAR 20
75149: PUSH
75150: LD_INT 0
75152: ST_TO_ADDR
// uc_nation := 0 ;
75153: LD_ADDR_OWVAR 21
75157: PUSH
75158: LD_INT 0
75160: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75161: LD_ADDR_OWVAR 37
75165: PUSH
75166: LD_INT 31
75168: ST_TO_ADDR
// vc_control := control_rider ;
75169: LD_ADDR_OWVAR 38
75173: PUSH
75174: LD_INT 4
75176: ST_TO_ADDR
// end ;
75177: LD_VAR 0 1
75181: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75182: LD_INT 0
75184: PPUSH
75185: PPUSH
75186: PPUSH
// uc_side = 0 ;
75187: LD_ADDR_OWVAR 20
75191: PUSH
75192: LD_INT 0
75194: ST_TO_ADDR
// uc_nation = 0 ;
75195: LD_ADDR_OWVAR 21
75199: PUSH
75200: LD_INT 0
75202: ST_TO_ADDR
// InitHc_All ( ) ;
75203: CALL_OW 584
// InitVc ;
75207: CALL_OW 20
// if mastodonts then
75211: LD_VAR 0 6
75215: IFFALSE 75282
// for i = 1 to mastodonts do
75217: LD_ADDR_VAR 0 11
75221: PUSH
75222: DOUBLE
75223: LD_INT 1
75225: DEC
75226: ST_TO_ADDR
75227: LD_VAR 0 6
75231: PUSH
75232: FOR_TO
75233: IFFALSE 75280
// begin vc_chassis := 31 ;
75235: LD_ADDR_OWVAR 37
75239: PUSH
75240: LD_INT 31
75242: ST_TO_ADDR
// vc_control := control_rider ;
75243: LD_ADDR_OWVAR 38
75247: PUSH
75248: LD_INT 4
75250: ST_TO_ADDR
// animal := CreateVehicle ;
75251: LD_ADDR_VAR 0 12
75255: PUSH
75256: CALL_OW 45
75260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75261: LD_VAR 0 12
75265: PPUSH
75266: LD_VAR 0 8
75270: PPUSH
75271: LD_INT 0
75273: PPUSH
75274: CALL 77410 0 3
// end ;
75278: GO 75232
75280: POP
75281: POP
// if horses then
75282: LD_VAR 0 5
75286: IFFALSE 75353
// for i = 1 to horses do
75288: LD_ADDR_VAR 0 11
75292: PUSH
75293: DOUBLE
75294: LD_INT 1
75296: DEC
75297: ST_TO_ADDR
75298: LD_VAR 0 5
75302: PUSH
75303: FOR_TO
75304: IFFALSE 75351
// begin hc_class := 21 ;
75306: LD_ADDR_OWVAR 28
75310: PUSH
75311: LD_INT 21
75313: ST_TO_ADDR
// hc_gallery :=  ;
75314: LD_ADDR_OWVAR 33
75318: PUSH
75319: LD_STRING 
75321: ST_TO_ADDR
// animal := CreateHuman ;
75322: LD_ADDR_VAR 0 12
75326: PUSH
75327: CALL_OW 44
75331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75332: LD_VAR 0 12
75336: PPUSH
75337: LD_VAR 0 8
75341: PPUSH
75342: LD_INT 0
75344: PPUSH
75345: CALL 77410 0 3
// end ;
75349: GO 75303
75351: POP
75352: POP
// if birds then
75353: LD_VAR 0 1
75357: IFFALSE 75424
// for i = 1 to birds do
75359: LD_ADDR_VAR 0 11
75363: PUSH
75364: DOUBLE
75365: LD_INT 1
75367: DEC
75368: ST_TO_ADDR
75369: LD_VAR 0 1
75373: PUSH
75374: FOR_TO
75375: IFFALSE 75422
// begin hc_class := 18 ;
75377: LD_ADDR_OWVAR 28
75381: PUSH
75382: LD_INT 18
75384: ST_TO_ADDR
// hc_gallery =  ;
75385: LD_ADDR_OWVAR 33
75389: PUSH
75390: LD_STRING 
75392: ST_TO_ADDR
// animal := CreateHuman ;
75393: LD_ADDR_VAR 0 12
75397: PUSH
75398: CALL_OW 44
75402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75403: LD_VAR 0 12
75407: PPUSH
75408: LD_VAR 0 8
75412: PPUSH
75413: LD_INT 0
75415: PPUSH
75416: CALL 77410 0 3
// end ;
75420: GO 75374
75422: POP
75423: POP
// if tigers then
75424: LD_VAR 0 2
75428: IFFALSE 75512
// for i = 1 to tigers do
75430: LD_ADDR_VAR 0 11
75434: PUSH
75435: DOUBLE
75436: LD_INT 1
75438: DEC
75439: ST_TO_ADDR
75440: LD_VAR 0 2
75444: PUSH
75445: FOR_TO
75446: IFFALSE 75510
// begin hc_class = class_tiger ;
75448: LD_ADDR_OWVAR 28
75452: PUSH
75453: LD_INT 14
75455: ST_TO_ADDR
// hc_gallery =  ;
75456: LD_ADDR_OWVAR 33
75460: PUSH
75461: LD_STRING 
75463: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75464: LD_ADDR_OWVAR 35
75468: PUSH
75469: LD_INT 7
75471: NEG
75472: PPUSH
75473: LD_INT 7
75475: PPUSH
75476: CALL_OW 12
75480: ST_TO_ADDR
// animal := CreateHuman ;
75481: LD_ADDR_VAR 0 12
75485: PUSH
75486: CALL_OW 44
75490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75491: LD_VAR 0 12
75495: PPUSH
75496: LD_VAR 0 8
75500: PPUSH
75501: LD_INT 0
75503: PPUSH
75504: CALL 77410 0 3
// end ;
75508: GO 75445
75510: POP
75511: POP
// if apemans then
75512: LD_VAR 0 3
75516: IFFALSE 75639
// for i = 1 to apemans do
75518: LD_ADDR_VAR 0 11
75522: PUSH
75523: DOUBLE
75524: LD_INT 1
75526: DEC
75527: ST_TO_ADDR
75528: LD_VAR 0 3
75532: PUSH
75533: FOR_TO
75534: IFFALSE 75637
// begin hc_class = class_apeman ;
75536: LD_ADDR_OWVAR 28
75540: PUSH
75541: LD_INT 12
75543: ST_TO_ADDR
// hc_gallery =  ;
75544: LD_ADDR_OWVAR 33
75548: PUSH
75549: LD_STRING 
75551: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75552: LD_ADDR_OWVAR 35
75556: PUSH
75557: LD_INT 2
75559: NEG
75560: PPUSH
75561: LD_INT 2
75563: PPUSH
75564: CALL_OW 12
75568: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75569: LD_ADDR_OWVAR 31
75573: PUSH
75574: LD_INT 1
75576: PPUSH
75577: LD_INT 3
75579: PPUSH
75580: CALL_OW 12
75584: PUSH
75585: LD_INT 1
75587: PPUSH
75588: LD_INT 3
75590: PPUSH
75591: CALL_OW 12
75595: PUSH
75596: LD_INT 0
75598: PUSH
75599: LD_INT 0
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: ST_TO_ADDR
// animal := CreateHuman ;
75608: LD_ADDR_VAR 0 12
75612: PUSH
75613: CALL_OW 44
75617: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75618: LD_VAR 0 12
75622: PPUSH
75623: LD_VAR 0 8
75627: PPUSH
75628: LD_INT 0
75630: PPUSH
75631: CALL 77410 0 3
// end ;
75635: GO 75533
75637: POP
75638: POP
// if enchidnas then
75639: LD_VAR 0 4
75643: IFFALSE 75710
// for i = 1 to enchidnas do
75645: LD_ADDR_VAR 0 11
75649: PUSH
75650: DOUBLE
75651: LD_INT 1
75653: DEC
75654: ST_TO_ADDR
75655: LD_VAR 0 4
75659: PUSH
75660: FOR_TO
75661: IFFALSE 75708
// begin hc_class = 13 ;
75663: LD_ADDR_OWVAR 28
75667: PUSH
75668: LD_INT 13
75670: ST_TO_ADDR
// hc_gallery =  ;
75671: LD_ADDR_OWVAR 33
75675: PUSH
75676: LD_STRING 
75678: ST_TO_ADDR
// animal := CreateHuman ;
75679: LD_ADDR_VAR 0 12
75683: PUSH
75684: CALL_OW 44
75688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75689: LD_VAR 0 12
75693: PPUSH
75694: LD_VAR 0 8
75698: PPUSH
75699: LD_INT 0
75701: PPUSH
75702: CALL 77410 0 3
// end ;
75706: GO 75660
75708: POP
75709: POP
// if fishes then
75710: LD_VAR 0 7
75714: IFFALSE 75781
// for i = 1 to fishes do
75716: LD_ADDR_VAR 0 11
75720: PUSH
75721: DOUBLE
75722: LD_INT 1
75724: DEC
75725: ST_TO_ADDR
75726: LD_VAR 0 7
75730: PUSH
75731: FOR_TO
75732: IFFALSE 75779
// begin hc_class = 20 ;
75734: LD_ADDR_OWVAR 28
75738: PUSH
75739: LD_INT 20
75741: ST_TO_ADDR
// hc_gallery =  ;
75742: LD_ADDR_OWVAR 33
75746: PUSH
75747: LD_STRING 
75749: ST_TO_ADDR
// animal := CreateHuman ;
75750: LD_ADDR_VAR 0 12
75754: PUSH
75755: CALL_OW 44
75759: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75760: LD_VAR 0 12
75764: PPUSH
75765: LD_VAR 0 9
75769: PPUSH
75770: LD_INT 0
75772: PPUSH
75773: CALL 77410 0 3
// end ;
75777: GO 75731
75779: POP
75780: POP
// end ;
75781: LD_VAR 0 10
75785: RET
// export function WantHeal ( sci , unit ) ; begin
75786: LD_INT 0
75788: PPUSH
// if GetTaskList ( sci ) > 0 then
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 437
75798: PUSH
75799: LD_INT 0
75801: GREATER
75802: IFFALSE 75872
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75804: LD_VAR 0 1
75808: PPUSH
75809: CALL_OW 437
75813: PUSH
75814: LD_INT 1
75816: ARRAY
75817: PUSH
75818: LD_INT 1
75820: ARRAY
75821: PUSH
75822: LD_STRING l
75824: EQUAL
75825: PUSH
75826: LD_VAR 0 1
75830: PPUSH
75831: CALL_OW 437
75835: PUSH
75836: LD_INT 1
75838: ARRAY
75839: PUSH
75840: LD_INT 4
75842: ARRAY
75843: PUSH
75844: LD_VAR 0 2
75848: EQUAL
75849: AND
75850: IFFALSE 75862
// result := true else
75852: LD_ADDR_VAR 0 3
75856: PUSH
75857: LD_INT 1
75859: ST_TO_ADDR
75860: GO 75870
// result := false ;
75862: LD_ADDR_VAR 0 3
75866: PUSH
75867: LD_INT 0
75869: ST_TO_ADDR
// end else
75870: GO 75880
// result := false ;
75872: LD_ADDR_VAR 0 3
75876: PUSH
75877: LD_INT 0
75879: ST_TO_ADDR
// end ;
75880: LD_VAR 0 3
75884: RET
// export function HealTarget ( sci ) ; begin
75885: LD_INT 0
75887: PPUSH
// if not sci then
75888: LD_VAR 0 1
75892: NOT
75893: IFFALSE 75897
// exit ;
75895: GO 75962
// result := 0 ;
75897: LD_ADDR_VAR 0 2
75901: PUSH
75902: LD_INT 0
75904: ST_TO_ADDR
// if GetTaskList ( sci ) then
75905: LD_VAR 0 1
75909: PPUSH
75910: CALL_OW 437
75914: IFFALSE 75962
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75916: LD_VAR 0 1
75920: PPUSH
75921: CALL_OW 437
75925: PUSH
75926: LD_INT 1
75928: ARRAY
75929: PUSH
75930: LD_INT 1
75932: ARRAY
75933: PUSH
75934: LD_STRING l
75936: EQUAL
75937: IFFALSE 75962
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75939: LD_ADDR_VAR 0 2
75943: PUSH
75944: LD_VAR 0 1
75948: PPUSH
75949: CALL_OW 437
75953: PUSH
75954: LD_INT 1
75956: ARRAY
75957: PUSH
75958: LD_INT 4
75960: ARRAY
75961: ST_TO_ADDR
// end ;
75962: LD_VAR 0 2
75966: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75967: LD_INT 0
75969: PPUSH
75970: PPUSH
75971: PPUSH
75972: PPUSH
// if not base_units then
75973: LD_VAR 0 1
75977: NOT
75978: IFFALSE 75982
// exit ;
75980: GO 76069
// result := false ;
75982: LD_ADDR_VAR 0 2
75986: PUSH
75987: LD_INT 0
75989: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75990: LD_ADDR_VAR 0 5
75994: PUSH
75995: LD_VAR 0 1
75999: PPUSH
76000: LD_INT 21
76002: PUSH
76003: LD_INT 3
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: PPUSH
76010: CALL_OW 72
76014: ST_TO_ADDR
// if not tmp then
76015: LD_VAR 0 5
76019: NOT
76020: IFFALSE 76024
// exit ;
76022: GO 76069
// for i in tmp do
76024: LD_ADDR_VAR 0 3
76028: PUSH
76029: LD_VAR 0 5
76033: PUSH
76034: FOR_IN
76035: IFFALSE 76067
// begin result := EnemyInRange ( i , 22 ) ;
76037: LD_ADDR_VAR 0 2
76041: PUSH
76042: LD_VAR 0 3
76046: PPUSH
76047: LD_INT 22
76049: PPUSH
76050: CALL 73656 0 2
76054: ST_TO_ADDR
// if result then
76055: LD_VAR 0 2
76059: IFFALSE 76065
// exit ;
76061: POP
76062: POP
76063: GO 76069
// end ;
76065: GO 76034
76067: POP
76068: POP
// end ;
76069: LD_VAR 0 2
76073: RET
// export function FilterByTag ( units , tag ) ; begin
76074: LD_INT 0
76076: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76077: LD_ADDR_VAR 0 3
76081: PUSH
76082: LD_VAR 0 1
76086: PPUSH
76087: LD_INT 120
76089: PUSH
76090: LD_VAR 0 2
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PPUSH
76099: CALL_OW 72
76103: ST_TO_ADDR
// end ;
76104: LD_VAR 0 3
76108: RET
// export function IsDriver ( un ) ; begin
76109: LD_INT 0
76111: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76112: LD_ADDR_VAR 0 2
76116: PUSH
76117: LD_VAR 0 1
76121: PUSH
76122: LD_INT 55
76124: PUSH
76125: EMPTY
76126: LIST
76127: PPUSH
76128: CALL_OW 69
76132: IN
76133: ST_TO_ADDR
// end ;
76134: LD_VAR 0 2
76138: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76139: LD_INT 0
76141: PPUSH
76142: PPUSH
// list := [ ] ;
76143: LD_ADDR_VAR 0 5
76147: PUSH
76148: EMPTY
76149: ST_TO_ADDR
// case d of 0 :
76150: LD_VAR 0 3
76154: PUSH
76155: LD_INT 0
76157: DOUBLE
76158: EQUAL
76159: IFTRUE 76163
76161: GO 76296
76163: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76164: LD_ADDR_VAR 0 5
76168: PUSH
76169: LD_VAR 0 1
76173: PUSH
76174: LD_INT 4
76176: MINUS
76177: PUSH
76178: LD_VAR 0 2
76182: PUSH
76183: LD_INT 4
76185: MINUS
76186: PUSH
76187: LD_INT 2
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: LIST
76194: PUSH
76195: LD_VAR 0 1
76199: PUSH
76200: LD_INT 3
76202: MINUS
76203: PUSH
76204: LD_VAR 0 2
76208: PUSH
76209: LD_INT 1
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: LIST
76216: PUSH
76217: LD_VAR 0 1
76221: PUSH
76222: LD_INT 4
76224: PLUS
76225: PUSH
76226: LD_VAR 0 2
76230: PUSH
76231: LD_INT 4
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: LIST
76238: PUSH
76239: LD_VAR 0 1
76243: PUSH
76244: LD_INT 3
76246: PLUS
76247: PUSH
76248: LD_VAR 0 2
76252: PUSH
76253: LD_INT 3
76255: PLUS
76256: PUSH
76257: LD_INT 5
76259: PUSH
76260: EMPTY
76261: LIST
76262: LIST
76263: LIST
76264: PUSH
76265: LD_VAR 0 1
76269: PUSH
76270: LD_VAR 0 2
76274: PUSH
76275: LD_INT 4
76277: PLUS
76278: PUSH
76279: LD_INT 0
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: LIST
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: ST_TO_ADDR
// end ; 1 :
76294: GO 76994
76296: LD_INT 1
76298: DOUBLE
76299: EQUAL
76300: IFTRUE 76304
76302: GO 76437
76304: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76305: LD_ADDR_VAR 0 5
76309: PUSH
76310: LD_VAR 0 1
76314: PUSH
76315: LD_VAR 0 2
76319: PUSH
76320: LD_INT 4
76322: MINUS
76323: PUSH
76324: LD_INT 3
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: LIST
76331: PUSH
76332: LD_VAR 0 1
76336: PUSH
76337: LD_INT 3
76339: MINUS
76340: PUSH
76341: LD_VAR 0 2
76345: PUSH
76346: LD_INT 3
76348: MINUS
76349: PUSH
76350: LD_INT 2
76352: PUSH
76353: EMPTY
76354: LIST
76355: LIST
76356: LIST
76357: PUSH
76358: LD_VAR 0 1
76362: PUSH
76363: LD_INT 4
76365: MINUS
76366: PUSH
76367: LD_VAR 0 2
76371: PUSH
76372: LD_INT 1
76374: PUSH
76375: EMPTY
76376: LIST
76377: LIST
76378: LIST
76379: PUSH
76380: LD_VAR 0 1
76384: PUSH
76385: LD_VAR 0 2
76389: PUSH
76390: LD_INT 3
76392: PLUS
76393: PUSH
76394: LD_INT 0
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: LIST
76401: PUSH
76402: LD_VAR 0 1
76406: PUSH
76407: LD_INT 4
76409: PLUS
76410: PUSH
76411: LD_VAR 0 2
76415: PUSH
76416: LD_INT 4
76418: PLUS
76419: PUSH
76420: LD_INT 5
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: LIST
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: ST_TO_ADDR
// end ; 2 :
76435: GO 76994
76437: LD_INT 2
76439: DOUBLE
76440: EQUAL
76441: IFTRUE 76445
76443: GO 76574
76445: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76446: LD_ADDR_VAR 0 5
76450: PUSH
76451: LD_VAR 0 1
76455: PUSH
76456: LD_VAR 0 2
76460: PUSH
76461: LD_INT 3
76463: MINUS
76464: PUSH
76465: LD_INT 3
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: LIST
76472: PUSH
76473: LD_VAR 0 1
76477: PUSH
76478: LD_INT 4
76480: PLUS
76481: PUSH
76482: LD_VAR 0 2
76486: PUSH
76487: LD_INT 4
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: LIST
76494: PUSH
76495: LD_VAR 0 1
76499: PUSH
76500: LD_VAR 0 2
76504: PUSH
76505: LD_INT 4
76507: PLUS
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: LIST
76516: PUSH
76517: LD_VAR 0 1
76521: PUSH
76522: LD_INT 3
76524: MINUS
76525: PUSH
76526: LD_VAR 0 2
76530: PUSH
76531: LD_INT 1
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: LIST
76538: PUSH
76539: LD_VAR 0 1
76543: PUSH
76544: LD_INT 4
76546: MINUS
76547: PUSH
76548: LD_VAR 0 2
76552: PUSH
76553: LD_INT 4
76555: MINUS
76556: PUSH
76557: LD_INT 2
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: LIST
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: LIST
76569: LIST
76570: LIST
76571: ST_TO_ADDR
// end ; 3 :
76572: GO 76994
76574: LD_INT 3
76576: DOUBLE
76577: EQUAL
76578: IFTRUE 76582
76580: GO 76715
76582: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76583: LD_ADDR_VAR 0 5
76587: PUSH
76588: LD_VAR 0 1
76592: PUSH
76593: LD_INT 3
76595: PLUS
76596: PUSH
76597: LD_VAR 0 2
76601: PUSH
76602: LD_INT 4
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: LIST
76609: PUSH
76610: LD_VAR 0 1
76614: PUSH
76615: LD_INT 4
76617: PLUS
76618: PUSH
76619: LD_VAR 0 2
76623: PUSH
76624: LD_INT 4
76626: PLUS
76627: PUSH
76628: LD_INT 5
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: LIST
76635: PUSH
76636: LD_VAR 0 1
76640: PUSH
76641: LD_INT 4
76643: MINUS
76644: PUSH
76645: LD_VAR 0 2
76649: PUSH
76650: LD_INT 1
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: LIST
76657: PUSH
76658: LD_VAR 0 1
76662: PUSH
76663: LD_VAR 0 2
76667: PUSH
76668: LD_INT 4
76670: MINUS
76671: PUSH
76672: LD_INT 3
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: LIST
76679: PUSH
76680: LD_VAR 0 1
76684: PUSH
76685: LD_INT 3
76687: MINUS
76688: PUSH
76689: LD_VAR 0 2
76693: PUSH
76694: LD_INT 3
76696: MINUS
76697: PUSH
76698: LD_INT 2
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: LIST
76705: PUSH
76706: EMPTY
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: ST_TO_ADDR
// end ; 4 :
76713: GO 76994
76715: LD_INT 4
76717: DOUBLE
76718: EQUAL
76719: IFTRUE 76723
76721: GO 76856
76723: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76724: LD_ADDR_VAR 0 5
76728: PUSH
76729: LD_VAR 0 1
76733: PUSH
76734: LD_VAR 0 2
76738: PUSH
76739: LD_INT 4
76741: PLUS
76742: PUSH
76743: LD_INT 0
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: LIST
76750: PUSH
76751: LD_VAR 0 1
76755: PUSH
76756: LD_INT 3
76758: PLUS
76759: PUSH
76760: LD_VAR 0 2
76764: PUSH
76765: LD_INT 3
76767: PLUS
76768: PUSH
76769: LD_INT 5
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: LIST
76776: PUSH
76777: LD_VAR 0 1
76781: PUSH
76782: LD_INT 4
76784: PLUS
76785: PUSH
76786: LD_VAR 0 2
76790: PUSH
76791: LD_INT 4
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: LIST
76798: PUSH
76799: LD_VAR 0 1
76803: PUSH
76804: LD_VAR 0 2
76808: PUSH
76809: LD_INT 3
76811: MINUS
76812: PUSH
76813: LD_INT 3
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: LIST
76820: PUSH
76821: LD_VAR 0 1
76825: PUSH
76826: LD_INT 4
76828: MINUS
76829: PUSH
76830: LD_VAR 0 2
76834: PUSH
76835: LD_INT 4
76837: MINUS
76838: PUSH
76839: LD_INT 2
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: LIST
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: ST_TO_ADDR
// end ; 5 :
76854: GO 76994
76856: LD_INT 5
76858: DOUBLE
76859: EQUAL
76860: IFTRUE 76864
76862: GO 76993
76864: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76865: LD_ADDR_VAR 0 5
76869: PUSH
76870: LD_VAR 0 1
76874: PUSH
76875: LD_INT 4
76877: MINUS
76878: PUSH
76879: LD_VAR 0 2
76883: PUSH
76884: LD_INT 1
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: LIST
76891: PUSH
76892: LD_VAR 0 1
76896: PUSH
76897: LD_VAR 0 2
76901: PUSH
76902: LD_INT 4
76904: MINUS
76905: PUSH
76906: LD_INT 3
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: LIST
76913: PUSH
76914: LD_VAR 0 1
76918: PUSH
76919: LD_INT 4
76921: PLUS
76922: PUSH
76923: LD_VAR 0 2
76927: PUSH
76928: LD_INT 4
76930: PLUS
76931: PUSH
76932: LD_INT 5
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: LIST
76939: PUSH
76940: LD_VAR 0 1
76944: PUSH
76945: LD_INT 3
76947: PLUS
76948: PUSH
76949: LD_VAR 0 2
76953: PUSH
76954: LD_INT 4
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: LIST
76961: PUSH
76962: LD_VAR 0 1
76966: PUSH
76967: LD_VAR 0 2
76971: PUSH
76972: LD_INT 3
76974: PLUS
76975: PUSH
76976: LD_INT 0
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: LIST
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: ST_TO_ADDR
// end ; end ;
76991: GO 76994
76993: POP
// result := list ;
76994: LD_ADDR_VAR 0 4
76998: PUSH
76999: LD_VAR 0 5
77003: ST_TO_ADDR
// end ;
77004: LD_VAR 0 4
77008: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77009: LD_INT 0
77011: PPUSH
77012: PPUSH
77013: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77014: LD_VAR 0 1
77018: NOT
77019: PUSH
77020: LD_VAR 0 2
77024: PUSH
77025: LD_INT 1
77027: PUSH
77028: LD_INT 2
77030: PUSH
77031: LD_INT 3
77033: PUSH
77034: LD_INT 4
77036: PUSH
77037: EMPTY
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: IN
77043: NOT
77044: OR
77045: IFFALSE 77049
// exit ;
77047: GO 77132
// tmp := [ ] ;
77049: LD_ADDR_VAR 0 5
77053: PUSH
77054: EMPTY
77055: ST_TO_ADDR
// for i in units do
77056: LD_ADDR_VAR 0 4
77060: PUSH
77061: LD_VAR 0 1
77065: PUSH
77066: FOR_IN
77067: IFFALSE 77101
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77069: LD_ADDR_VAR 0 5
77073: PUSH
77074: LD_VAR 0 5
77078: PPUSH
77079: LD_VAR 0 4
77083: PPUSH
77084: LD_VAR 0 2
77088: PPUSH
77089: CALL_OW 259
77093: PPUSH
77094: CALL 78505 0 2
77098: ST_TO_ADDR
77099: GO 77066
77101: POP
77102: POP
// if not tmp then
77103: LD_VAR 0 5
77107: NOT
77108: IFFALSE 77112
// exit ;
77110: GO 77132
// result := SortListByListDesc ( units , tmp ) ;
77112: LD_ADDR_VAR 0 3
77116: PUSH
77117: LD_VAR 0 1
77121: PPUSH
77122: LD_VAR 0 5
77126: PPUSH
77127: CALL_OW 77
77131: ST_TO_ADDR
// end ;
77132: LD_VAR 0 3
77136: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77137: LD_INT 0
77139: PPUSH
77140: PPUSH
77141: PPUSH
// result := false ;
77142: LD_ADDR_VAR 0 3
77146: PUSH
77147: LD_INT 0
77149: ST_TO_ADDR
// if not building then
77150: LD_VAR 0 2
77154: NOT
77155: IFFALSE 77159
// exit ;
77157: GO 77297
// x := GetX ( building ) ;
77159: LD_ADDR_VAR 0 4
77163: PUSH
77164: LD_VAR 0 2
77168: PPUSH
77169: CALL_OW 250
77173: ST_TO_ADDR
// y := GetY ( building ) ;
77174: LD_ADDR_VAR 0 5
77178: PUSH
77179: LD_VAR 0 2
77183: PPUSH
77184: CALL_OW 251
77188: ST_TO_ADDR
// if not x or not y then
77189: LD_VAR 0 4
77193: NOT
77194: PUSH
77195: LD_VAR 0 5
77199: NOT
77200: OR
77201: IFFALSE 77205
// exit ;
77203: GO 77297
// if GetTaskList ( unit ) then
77205: LD_VAR 0 1
77209: PPUSH
77210: CALL_OW 437
77214: IFFALSE 77297
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77216: LD_STRING e
77218: PUSH
77219: LD_VAR 0 1
77223: PPUSH
77224: CALL_OW 437
77228: PUSH
77229: LD_INT 1
77231: ARRAY
77232: PUSH
77233: LD_INT 1
77235: ARRAY
77236: EQUAL
77237: PUSH
77238: LD_VAR 0 4
77242: PUSH
77243: LD_VAR 0 1
77247: PPUSH
77248: CALL_OW 437
77252: PUSH
77253: LD_INT 1
77255: ARRAY
77256: PUSH
77257: LD_INT 2
77259: ARRAY
77260: EQUAL
77261: AND
77262: PUSH
77263: LD_VAR 0 5
77267: PUSH
77268: LD_VAR 0 1
77272: PPUSH
77273: CALL_OW 437
77277: PUSH
77278: LD_INT 1
77280: ARRAY
77281: PUSH
77282: LD_INT 3
77284: ARRAY
77285: EQUAL
77286: AND
77287: IFFALSE 77297
// result := true end ;
77289: LD_ADDR_VAR 0 3
77293: PUSH
77294: LD_INT 1
77296: ST_TO_ADDR
// end ;
77297: LD_VAR 0 3
77301: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77302: LD_INT 0
77304: PPUSH
// result := false ;
77305: LD_ADDR_VAR 0 4
77309: PUSH
77310: LD_INT 0
77312: ST_TO_ADDR
// if GetTaskList ( unit ) then
77313: LD_VAR 0 1
77317: PPUSH
77318: CALL_OW 437
77322: IFFALSE 77405
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77324: LD_STRING M
77326: PUSH
77327: LD_VAR 0 1
77331: PPUSH
77332: CALL_OW 437
77336: PUSH
77337: LD_INT 1
77339: ARRAY
77340: PUSH
77341: LD_INT 1
77343: ARRAY
77344: EQUAL
77345: PUSH
77346: LD_VAR 0 2
77350: PUSH
77351: LD_VAR 0 1
77355: PPUSH
77356: CALL_OW 437
77360: PUSH
77361: LD_INT 1
77363: ARRAY
77364: PUSH
77365: LD_INT 2
77367: ARRAY
77368: EQUAL
77369: AND
77370: PUSH
77371: LD_VAR 0 3
77375: PUSH
77376: LD_VAR 0 1
77380: PPUSH
77381: CALL_OW 437
77385: PUSH
77386: LD_INT 1
77388: ARRAY
77389: PUSH
77390: LD_INT 3
77392: ARRAY
77393: EQUAL
77394: AND
77395: IFFALSE 77405
// result := true ;
77397: LD_ADDR_VAR 0 4
77401: PUSH
77402: LD_INT 1
77404: ST_TO_ADDR
// end ; end ;
77405: LD_VAR 0 4
77409: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77410: LD_INT 0
77412: PPUSH
77413: PPUSH
77414: PPUSH
77415: PPUSH
// if not unit or not area then
77416: LD_VAR 0 1
77420: NOT
77421: PUSH
77422: LD_VAR 0 2
77426: NOT
77427: OR
77428: IFFALSE 77432
// exit ;
77430: GO 77608
// tmp := AreaToList ( area , i ) ;
77432: LD_ADDR_VAR 0 6
77436: PUSH
77437: LD_VAR 0 2
77441: PPUSH
77442: LD_VAR 0 5
77446: PPUSH
77447: CALL_OW 517
77451: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77452: LD_ADDR_VAR 0 5
77456: PUSH
77457: DOUBLE
77458: LD_INT 1
77460: DEC
77461: ST_TO_ADDR
77462: LD_VAR 0 6
77466: PUSH
77467: LD_INT 1
77469: ARRAY
77470: PUSH
77471: FOR_TO
77472: IFFALSE 77606
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77474: LD_ADDR_VAR 0 7
77478: PUSH
77479: LD_VAR 0 6
77483: PUSH
77484: LD_INT 1
77486: ARRAY
77487: PUSH
77488: LD_VAR 0 5
77492: ARRAY
77493: PUSH
77494: LD_VAR 0 6
77498: PUSH
77499: LD_INT 2
77501: ARRAY
77502: PUSH
77503: LD_VAR 0 5
77507: ARRAY
77508: PUSH
77509: EMPTY
77510: LIST
77511: LIST
77512: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77513: LD_INT 92
77515: PUSH
77516: LD_VAR 0 7
77520: PUSH
77521: LD_INT 1
77523: ARRAY
77524: PUSH
77525: LD_VAR 0 7
77529: PUSH
77530: LD_INT 2
77532: ARRAY
77533: PUSH
77534: LD_INT 2
77536: PUSH
77537: EMPTY
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: PPUSH
77543: CALL_OW 69
77547: PUSH
77548: LD_INT 0
77550: EQUAL
77551: IFFALSE 77604
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77553: LD_VAR 0 1
77557: PPUSH
77558: LD_VAR 0 7
77562: PUSH
77563: LD_INT 1
77565: ARRAY
77566: PPUSH
77567: LD_VAR 0 7
77571: PUSH
77572: LD_INT 2
77574: ARRAY
77575: PPUSH
77576: LD_VAR 0 3
77580: PPUSH
77581: CALL_OW 48
// result := IsPlaced ( unit ) ;
77585: LD_ADDR_VAR 0 4
77589: PUSH
77590: LD_VAR 0 1
77594: PPUSH
77595: CALL_OW 305
77599: ST_TO_ADDR
// exit ;
77600: POP
77601: POP
77602: GO 77608
// end ; end ;
77604: GO 77471
77606: POP
77607: POP
// end ;
77608: LD_VAR 0 4
77612: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77613: LD_INT 0
77615: PPUSH
77616: PPUSH
77617: PPUSH
// if not side or side > 8 then
77618: LD_VAR 0 1
77622: NOT
77623: PUSH
77624: LD_VAR 0 1
77628: PUSH
77629: LD_INT 8
77631: GREATER
77632: OR
77633: IFFALSE 77637
// exit ;
77635: GO 77824
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77637: LD_ADDR_VAR 0 4
77641: PUSH
77642: LD_INT 22
77644: PUSH
77645: LD_VAR 0 1
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 21
77656: PUSH
77657: LD_INT 3
77659: PUSH
77660: EMPTY
77661: LIST
77662: LIST
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: PPUSH
77668: CALL_OW 69
77672: ST_TO_ADDR
// if not tmp then
77673: LD_VAR 0 4
77677: NOT
77678: IFFALSE 77682
// exit ;
77680: GO 77824
// enable_addtolog := true ;
77682: LD_ADDR_OWVAR 81
77686: PUSH
77687: LD_INT 1
77689: ST_TO_ADDR
// AddToLog ( [ ) ;
77690: LD_STRING [
77692: PPUSH
77693: CALL_OW 561
// for i in tmp do
77697: LD_ADDR_VAR 0 3
77701: PUSH
77702: LD_VAR 0 4
77706: PUSH
77707: FOR_IN
77708: IFFALSE 77815
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77710: LD_STRING [
77712: PUSH
77713: LD_VAR 0 3
77717: PPUSH
77718: CALL_OW 266
77722: STR
77723: PUSH
77724: LD_STRING , 
77726: STR
77727: PUSH
77728: LD_VAR 0 3
77732: PPUSH
77733: CALL_OW 250
77737: STR
77738: PUSH
77739: LD_STRING , 
77741: STR
77742: PUSH
77743: LD_VAR 0 3
77747: PPUSH
77748: CALL_OW 251
77752: STR
77753: PUSH
77754: LD_STRING , 
77756: STR
77757: PUSH
77758: LD_VAR 0 3
77762: PPUSH
77763: CALL_OW 254
77767: STR
77768: PUSH
77769: LD_STRING , 
77771: STR
77772: PUSH
77773: LD_VAR 0 3
77777: PPUSH
77778: LD_INT 1
77780: PPUSH
77781: CALL_OW 268
77785: STR
77786: PUSH
77787: LD_STRING , 
77789: STR
77790: PUSH
77791: LD_VAR 0 3
77795: PPUSH
77796: LD_INT 2
77798: PPUSH
77799: CALL_OW 268
77803: STR
77804: PUSH
77805: LD_STRING ],
77807: STR
77808: PPUSH
77809: CALL_OW 561
// end ;
77813: GO 77707
77815: POP
77816: POP
// AddToLog ( ]; ) ;
77817: LD_STRING ];
77819: PPUSH
77820: CALL_OW 561
// end ;
77824: LD_VAR 0 2
77828: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77829: LD_INT 0
77831: PPUSH
77832: PPUSH
77833: PPUSH
77834: PPUSH
77835: PPUSH
// if not area or not rate or not max then
77836: LD_VAR 0 1
77840: NOT
77841: PUSH
77842: LD_VAR 0 2
77846: NOT
77847: OR
77848: PUSH
77849: LD_VAR 0 4
77853: NOT
77854: OR
77855: IFFALSE 77859
// exit ;
77857: GO 78048
// while 1 do
77859: LD_INT 1
77861: IFFALSE 78048
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77863: LD_ADDR_VAR 0 9
77867: PUSH
77868: LD_VAR 0 1
77872: PPUSH
77873: LD_INT 1
77875: PPUSH
77876: CALL_OW 287
77880: PUSH
77881: LD_INT 10
77883: MUL
77884: ST_TO_ADDR
// r := rate / 10 ;
77885: LD_ADDR_VAR 0 7
77889: PUSH
77890: LD_VAR 0 2
77894: PUSH
77895: LD_INT 10
77897: DIVREAL
77898: ST_TO_ADDR
// time := 1 1$00 ;
77899: LD_ADDR_VAR 0 8
77903: PUSH
77904: LD_INT 2100
77906: ST_TO_ADDR
// if amount < min then
77907: LD_VAR 0 9
77911: PUSH
77912: LD_VAR 0 3
77916: LESS
77917: IFFALSE 77935
// r := r * 2 else
77919: LD_ADDR_VAR 0 7
77923: PUSH
77924: LD_VAR 0 7
77928: PUSH
77929: LD_INT 2
77931: MUL
77932: ST_TO_ADDR
77933: GO 77961
// if amount > max then
77935: LD_VAR 0 9
77939: PUSH
77940: LD_VAR 0 4
77944: GREATER
77945: IFFALSE 77961
// r := r / 2 ;
77947: LD_ADDR_VAR 0 7
77951: PUSH
77952: LD_VAR 0 7
77956: PUSH
77957: LD_INT 2
77959: DIVREAL
77960: ST_TO_ADDR
// time := time / r ;
77961: LD_ADDR_VAR 0 8
77965: PUSH
77966: LD_VAR 0 8
77970: PUSH
77971: LD_VAR 0 7
77975: DIVREAL
77976: ST_TO_ADDR
// if time < 0 then
77977: LD_VAR 0 8
77981: PUSH
77982: LD_INT 0
77984: LESS
77985: IFFALSE 78002
// time := time * - 1 ;
77987: LD_ADDR_VAR 0 8
77991: PUSH
77992: LD_VAR 0 8
77996: PUSH
77997: LD_INT 1
77999: NEG
78000: MUL
78001: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78002: LD_VAR 0 8
78006: PUSH
78007: LD_INT 35
78009: PPUSH
78010: LD_INT 875
78012: PPUSH
78013: CALL_OW 12
78017: PLUS
78018: PPUSH
78019: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78023: LD_INT 1
78025: PPUSH
78026: LD_INT 5
78028: PPUSH
78029: CALL_OW 12
78033: PPUSH
78034: LD_VAR 0 1
78038: PPUSH
78039: LD_INT 1
78041: PPUSH
78042: CALL_OW 55
// end ;
78046: GO 77859
// end ;
78048: LD_VAR 0 5
78052: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78053: LD_INT 0
78055: PPUSH
78056: PPUSH
78057: PPUSH
78058: PPUSH
78059: PPUSH
78060: PPUSH
78061: PPUSH
78062: PPUSH
// if not turrets or not factories then
78063: LD_VAR 0 1
78067: NOT
78068: PUSH
78069: LD_VAR 0 2
78073: NOT
78074: OR
78075: IFFALSE 78079
// exit ;
78077: GO 78386
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78079: LD_ADDR_VAR 0 10
78083: PUSH
78084: LD_INT 5
78086: PUSH
78087: LD_INT 6
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: PUSH
78094: LD_INT 2
78096: PUSH
78097: LD_INT 4
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: PUSH
78104: LD_INT 3
78106: PUSH
78107: LD_INT 5
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: LIST
78118: PUSH
78119: LD_INT 24
78121: PUSH
78122: LD_INT 25
78124: PUSH
78125: EMPTY
78126: LIST
78127: LIST
78128: PUSH
78129: LD_INT 23
78131: PUSH
78132: LD_INT 27
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: PUSH
78143: LD_INT 42
78145: PUSH
78146: LD_INT 43
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 44
78155: PUSH
78156: LD_INT 46
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: PUSH
78163: LD_INT 45
78165: PUSH
78166: LD_INT 47
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: LIST
78177: PUSH
78178: EMPTY
78179: LIST
78180: LIST
78181: LIST
78182: ST_TO_ADDR
// result := [ ] ;
78183: LD_ADDR_VAR 0 3
78187: PUSH
78188: EMPTY
78189: ST_TO_ADDR
// for i in turrets do
78190: LD_ADDR_VAR 0 4
78194: PUSH
78195: LD_VAR 0 1
78199: PUSH
78200: FOR_IN
78201: IFFALSE 78384
// begin nat := GetNation ( i ) ;
78203: LD_ADDR_VAR 0 7
78207: PUSH
78208: LD_VAR 0 4
78212: PPUSH
78213: CALL_OW 248
78217: ST_TO_ADDR
// weapon := 0 ;
78218: LD_ADDR_VAR 0 8
78222: PUSH
78223: LD_INT 0
78225: ST_TO_ADDR
// if not nat then
78226: LD_VAR 0 7
78230: NOT
78231: IFFALSE 78235
// continue ;
78233: GO 78200
// for j in list [ nat ] do
78235: LD_ADDR_VAR 0 5
78239: PUSH
78240: LD_VAR 0 10
78244: PUSH
78245: LD_VAR 0 7
78249: ARRAY
78250: PUSH
78251: FOR_IN
78252: IFFALSE 78293
// if GetBWeapon ( i ) = j [ 1 ] then
78254: LD_VAR 0 4
78258: PPUSH
78259: CALL_OW 269
78263: PUSH
78264: LD_VAR 0 5
78268: PUSH
78269: LD_INT 1
78271: ARRAY
78272: EQUAL
78273: IFFALSE 78291
// begin weapon := j [ 2 ] ;
78275: LD_ADDR_VAR 0 8
78279: PUSH
78280: LD_VAR 0 5
78284: PUSH
78285: LD_INT 2
78287: ARRAY
78288: ST_TO_ADDR
// break ;
78289: GO 78293
// end ;
78291: GO 78251
78293: POP
78294: POP
// if not weapon then
78295: LD_VAR 0 8
78299: NOT
78300: IFFALSE 78304
// continue ;
78302: GO 78200
// for k in factories do
78304: LD_ADDR_VAR 0 6
78308: PUSH
78309: LD_VAR 0 2
78313: PUSH
78314: FOR_IN
78315: IFFALSE 78380
// begin weapons := AvailableWeaponList ( k ) ;
78317: LD_ADDR_VAR 0 9
78321: PUSH
78322: LD_VAR 0 6
78326: PPUSH
78327: CALL_OW 478
78331: ST_TO_ADDR
// if not weapons then
78332: LD_VAR 0 9
78336: NOT
78337: IFFALSE 78341
// continue ;
78339: GO 78314
// if weapon in weapons then
78341: LD_VAR 0 8
78345: PUSH
78346: LD_VAR 0 9
78350: IN
78351: IFFALSE 78378
// begin result := [ i , weapon ] ;
78353: LD_ADDR_VAR 0 3
78357: PUSH
78358: LD_VAR 0 4
78362: PUSH
78363: LD_VAR 0 8
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: ST_TO_ADDR
// exit ;
78372: POP
78373: POP
78374: POP
78375: POP
78376: GO 78386
// end ; end ;
78378: GO 78314
78380: POP
78381: POP
// end ;
78382: GO 78200
78384: POP
78385: POP
// end ;
78386: LD_VAR 0 3
78390: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78391: LD_INT 0
78393: PPUSH
// if not side or side > 8 then
78394: LD_VAR 0 3
78398: NOT
78399: PUSH
78400: LD_VAR 0 3
78404: PUSH
78405: LD_INT 8
78407: GREATER
78408: OR
78409: IFFALSE 78413
// exit ;
78411: GO 78472
// if not range then
78413: LD_VAR 0 4
78417: NOT
78418: IFFALSE 78429
// range := - 12 ;
78420: LD_ADDR_VAR 0 4
78424: PUSH
78425: LD_INT 12
78427: NEG
78428: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78429: LD_VAR 0 1
78433: PPUSH
78434: LD_VAR 0 2
78438: PPUSH
78439: LD_VAR 0 3
78443: PPUSH
78444: LD_VAR 0 4
78448: PPUSH
78449: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78453: LD_VAR 0 1
78457: PPUSH
78458: LD_VAR 0 2
78462: PPUSH
78463: LD_VAR 0 3
78467: PPUSH
78468: CALL_OW 331
// end ;
78472: LD_VAR 0 5
78476: RET
// export function Video ( mode ) ; begin
78477: LD_INT 0
78479: PPUSH
// ingame_video = mode ;
78480: LD_ADDR_OWVAR 52
78484: PUSH
78485: LD_VAR 0 1
78489: ST_TO_ADDR
// interface_hidden = mode ;
78490: LD_ADDR_OWVAR 54
78494: PUSH
78495: LD_VAR 0 1
78499: ST_TO_ADDR
// end ;
78500: LD_VAR 0 2
78504: RET
// export function Join ( array , element ) ; begin
78505: LD_INT 0
78507: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78508: LD_ADDR_VAR 0 3
78512: PUSH
78513: LD_VAR 0 1
78517: PPUSH
78518: LD_VAR 0 1
78522: PUSH
78523: LD_INT 1
78525: PLUS
78526: PPUSH
78527: LD_VAR 0 2
78531: PPUSH
78532: CALL_OW 1
78536: ST_TO_ADDR
// end ;
78537: LD_VAR 0 3
78541: RET
// export function JoinUnion ( array , element ) ; begin
78542: LD_INT 0
78544: PPUSH
// result := array union element ;
78545: LD_ADDR_VAR 0 3
78549: PUSH
78550: LD_VAR 0 1
78554: PUSH
78555: LD_VAR 0 2
78559: UNION
78560: ST_TO_ADDR
// end ;
78561: LD_VAR 0 3
78565: RET
// export function GetBehemoths ( side ) ; begin
78566: LD_INT 0
78568: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78569: LD_ADDR_VAR 0 2
78573: PUSH
78574: LD_INT 22
78576: PUSH
78577: LD_VAR 0 1
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: PUSH
78586: LD_INT 31
78588: PUSH
78589: LD_INT 25
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PPUSH
78600: CALL_OW 69
78604: ST_TO_ADDR
// end ;
78605: LD_VAR 0 2
78609: RET
// export function Shuffle ( array ) ; var i , index ; begin
78610: LD_INT 0
78612: PPUSH
78613: PPUSH
78614: PPUSH
// result := [ ] ;
78615: LD_ADDR_VAR 0 2
78619: PUSH
78620: EMPTY
78621: ST_TO_ADDR
// if not array then
78622: LD_VAR 0 1
78626: NOT
78627: IFFALSE 78631
// exit ;
78629: GO 78730
// Randomize ;
78631: CALL_OW 10
// for i = array downto 1 do
78635: LD_ADDR_VAR 0 3
78639: PUSH
78640: DOUBLE
78641: LD_VAR 0 1
78645: INC
78646: ST_TO_ADDR
78647: LD_INT 1
78649: PUSH
78650: FOR_DOWNTO
78651: IFFALSE 78728
// begin index := rand ( 1 , array ) ;
78653: LD_ADDR_VAR 0 4
78657: PUSH
78658: LD_INT 1
78660: PPUSH
78661: LD_VAR 0 1
78665: PPUSH
78666: CALL_OW 12
78670: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78671: LD_ADDR_VAR 0 2
78675: PUSH
78676: LD_VAR 0 2
78680: PPUSH
78681: LD_VAR 0 2
78685: PUSH
78686: LD_INT 1
78688: PLUS
78689: PPUSH
78690: LD_VAR 0 1
78694: PUSH
78695: LD_VAR 0 4
78699: ARRAY
78700: PPUSH
78701: CALL_OW 2
78705: ST_TO_ADDR
// array := Delete ( array , index ) ;
78706: LD_ADDR_VAR 0 1
78710: PUSH
78711: LD_VAR 0 1
78715: PPUSH
78716: LD_VAR 0 4
78720: PPUSH
78721: CALL_OW 3
78725: ST_TO_ADDR
// end ;
78726: GO 78650
78728: POP
78729: POP
// end ;
78730: LD_VAR 0 2
78734: RET
// export function GetBaseMaterials ( base ) ; begin
78735: LD_INT 0
78737: PPUSH
// result := [ 0 , 0 , 0 ] ;
78738: LD_ADDR_VAR 0 2
78742: PUSH
78743: LD_INT 0
78745: PUSH
78746: LD_INT 0
78748: PUSH
78749: LD_INT 0
78751: PUSH
78752: EMPTY
78753: LIST
78754: LIST
78755: LIST
78756: ST_TO_ADDR
// if not base then
78757: LD_VAR 0 1
78761: NOT
78762: IFFALSE 78766
// exit ;
78764: GO 78815
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78766: LD_ADDR_VAR 0 2
78770: PUSH
78771: LD_VAR 0 1
78775: PPUSH
78776: LD_INT 1
78778: PPUSH
78779: CALL_OW 275
78783: PUSH
78784: LD_VAR 0 1
78788: PPUSH
78789: LD_INT 2
78791: PPUSH
78792: CALL_OW 275
78796: PUSH
78797: LD_VAR 0 1
78801: PPUSH
78802: LD_INT 3
78804: PPUSH
78805: CALL_OW 275
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: LIST
78814: ST_TO_ADDR
// end ;
78815: LD_VAR 0 2
78819: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78820: LD_INT 0
78822: PPUSH
78823: PPUSH
// result := array ;
78824: LD_ADDR_VAR 0 3
78828: PUSH
78829: LD_VAR 0 1
78833: ST_TO_ADDR
// if size >= result then
78834: LD_VAR 0 2
78838: PUSH
78839: LD_VAR 0 3
78843: GREATEREQUAL
78844: IFFALSE 78848
// exit ;
78846: GO 78898
// if size then
78848: LD_VAR 0 2
78852: IFFALSE 78898
// for i := array downto size do
78854: LD_ADDR_VAR 0 4
78858: PUSH
78859: DOUBLE
78860: LD_VAR 0 1
78864: INC
78865: ST_TO_ADDR
78866: LD_VAR 0 2
78870: PUSH
78871: FOR_DOWNTO
78872: IFFALSE 78896
// result := Delete ( result , result ) ;
78874: LD_ADDR_VAR 0 3
78878: PUSH
78879: LD_VAR 0 3
78883: PPUSH
78884: LD_VAR 0 3
78888: PPUSH
78889: CALL_OW 3
78893: ST_TO_ADDR
78894: GO 78871
78896: POP
78897: POP
// end ;
78898: LD_VAR 0 3
78902: RET
// export function ComExit ( unit ) ; var tmp ; begin
78903: LD_INT 0
78905: PPUSH
78906: PPUSH
// if not IsInUnit ( unit ) then
78907: LD_VAR 0 1
78911: PPUSH
78912: CALL_OW 310
78916: NOT
78917: IFFALSE 78921
// exit ;
78919: GO 78981
// tmp := IsInUnit ( unit ) ;
78921: LD_ADDR_VAR 0 3
78925: PUSH
78926: LD_VAR 0 1
78930: PPUSH
78931: CALL_OW 310
78935: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78936: LD_VAR 0 3
78940: PPUSH
78941: CALL_OW 247
78945: PUSH
78946: LD_INT 2
78948: EQUAL
78949: IFFALSE 78962
// ComExitVehicle ( unit ) else
78951: LD_VAR 0 1
78955: PPUSH
78956: CALL_OW 121
78960: GO 78971
// ComExitBuilding ( unit ) ;
78962: LD_VAR 0 1
78966: PPUSH
78967: CALL_OW 122
// result := tmp ;
78971: LD_ADDR_VAR 0 2
78975: PUSH
78976: LD_VAR 0 3
78980: ST_TO_ADDR
// end ;
78981: LD_VAR 0 2
78985: RET
// export function ComExitAll ( units ) ; var i ; begin
78986: LD_INT 0
78988: PPUSH
78989: PPUSH
// if not units then
78990: LD_VAR 0 1
78994: NOT
78995: IFFALSE 78999
// exit ;
78997: GO 79025
// for i in units do
78999: LD_ADDR_VAR 0 3
79003: PUSH
79004: LD_VAR 0 1
79008: PUSH
79009: FOR_IN
79010: IFFALSE 79023
// ComExit ( i ) ;
79012: LD_VAR 0 3
79016: PPUSH
79017: CALL 78903 0 1
79021: GO 79009
79023: POP
79024: POP
// end ;
79025: LD_VAR 0 2
79029: RET
// export function ResetHc ; begin
79030: LD_INT 0
79032: PPUSH
// InitHc ;
79033: CALL_OW 19
// hc_importance := 0 ;
79037: LD_ADDR_OWVAR 32
79041: PUSH
79042: LD_INT 0
79044: ST_TO_ADDR
// end ;
79045: LD_VAR 0 1
79049: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79050: LD_INT 0
79052: PPUSH
79053: PPUSH
79054: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79055: LD_ADDR_VAR 0 6
79059: PUSH
79060: LD_VAR 0 1
79064: PUSH
79065: LD_VAR 0 3
79069: PLUS
79070: PUSH
79071: LD_INT 2
79073: DIV
79074: ST_TO_ADDR
// if _x < 0 then
79075: LD_VAR 0 6
79079: PUSH
79080: LD_INT 0
79082: LESS
79083: IFFALSE 79100
// _x := _x * - 1 ;
79085: LD_ADDR_VAR 0 6
79089: PUSH
79090: LD_VAR 0 6
79094: PUSH
79095: LD_INT 1
79097: NEG
79098: MUL
79099: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79100: LD_ADDR_VAR 0 7
79104: PUSH
79105: LD_VAR 0 2
79109: PUSH
79110: LD_VAR 0 4
79114: PLUS
79115: PUSH
79116: LD_INT 2
79118: DIV
79119: ST_TO_ADDR
// if _y < 0 then
79120: LD_VAR 0 7
79124: PUSH
79125: LD_INT 0
79127: LESS
79128: IFFALSE 79145
// _y := _y * - 1 ;
79130: LD_ADDR_VAR 0 7
79134: PUSH
79135: LD_VAR 0 7
79139: PUSH
79140: LD_INT 1
79142: NEG
79143: MUL
79144: ST_TO_ADDR
// result := [ _x , _y ] ;
79145: LD_ADDR_VAR 0 5
79149: PUSH
79150: LD_VAR 0 6
79154: PUSH
79155: LD_VAR 0 7
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: ST_TO_ADDR
// end ;
79164: LD_VAR 0 5
79168: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79169: LD_INT 0
79171: PPUSH
79172: PPUSH
79173: PPUSH
79174: PPUSH
// task := GetTaskList ( unit ) ;
79175: LD_ADDR_VAR 0 7
79179: PUSH
79180: LD_VAR 0 1
79184: PPUSH
79185: CALL_OW 437
79189: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79190: LD_VAR 0 7
79194: NOT
79195: PUSH
79196: LD_VAR 0 1
79200: PPUSH
79201: LD_VAR 0 2
79205: PPUSH
79206: CALL_OW 308
79210: NOT
79211: AND
79212: IFFALSE 79216
// exit ;
79214: GO 79334
// if IsInArea ( unit , area ) then
79216: LD_VAR 0 1
79220: PPUSH
79221: LD_VAR 0 2
79225: PPUSH
79226: CALL_OW 308
79230: IFFALSE 79248
// begin ComMoveToArea ( unit , goAway ) ;
79232: LD_VAR 0 1
79236: PPUSH
79237: LD_VAR 0 3
79241: PPUSH
79242: CALL_OW 113
// exit ;
79246: GO 79334
// end ; if task [ 1 ] [ 1 ] <> M then
79248: LD_VAR 0 7
79252: PUSH
79253: LD_INT 1
79255: ARRAY
79256: PUSH
79257: LD_INT 1
79259: ARRAY
79260: PUSH
79261: LD_STRING M
79263: NONEQUAL
79264: IFFALSE 79268
// exit ;
79266: GO 79334
// x := task [ 1 ] [ 2 ] ;
79268: LD_ADDR_VAR 0 5
79272: PUSH
79273: LD_VAR 0 7
79277: PUSH
79278: LD_INT 1
79280: ARRAY
79281: PUSH
79282: LD_INT 2
79284: ARRAY
79285: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79286: LD_ADDR_VAR 0 6
79290: PUSH
79291: LD_VAR 0 7
79295: PUSH
79296: LD_INT 1
79298: ARRAY
79299: PUSH
79300: LD_INT 3
79302: ARRAY
79303: ST_TO_ADDR
// if InArea ( x , y , area ) then
79304: LD_VAR 0 5
79308: PPUSH
79309: LD_VAR 0 6
79313: PPUSH
79314: LD_VAR 0 2
79318: PPUSH
79319: CALL_OW 309
79323: IFFALSE 79334
// ComStop ( unit ) ;
79325: LD_VAR 0 1
79329: PPUSH
79330: CALL_OW 141
// end ;
79334: LD_VAR 0 4
79338: RET
// export function Abs ( value ) ; begin
79339: LD_INT 0
79341: PPUSH
// result := value ;
79342: LD_ADDR_VAR 0 2
79346: PUSH
79347: LD_VAR 0 1
79351: ST_TO_ADDR
// if value < 0 then
79352: LD_VAR 0 1
79356: PUSH
79357: LD_INT 0
79359: LESS
79360: IFFALSE 79377
// result := value * - 1 ;
79362: LD_ADDR_VAR 0 2
79366: PUSH
79367: LD_VAR 0 1
79371: PUSH
79372: LD_INT 1
79374: NEG
79375: MUL
79376: ST_TO_ADDR
// end ;
79377: LD_VAR 0 2
79381: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79382: LD_INT 0
79384: PPUSH
79385: PPUSH
79386: PPUSH
79387: PPUSH
79388: PPUSH
79389: PPUSH
79390: PPUSH
79391: PPUSH
// if not unit or not building then
79392: LD_VAR 0 1
79396: NOT
79397: PUSH
79398: LD_VAR 0 2
79402: NOT
79403: OR
79404: IFFALSE 79408
// exit ;
79406: GO 79634
// x := GetX ( building ) ;
79408: LD_ADDR_VAR 0 4
79412: PUSH
79413: LD_VAR 0 2
79417: PPUSH
79418: CALL_OW 250
79422: ST_TO_ADDR
// y := GetY ( building ) ;
79423: LD_ADDR_VAR 0 6
79427: PUSH
79428: LD_VAR 0 2
79432: PPUSH
79433: CALL_OW 251
79437: ST_TO_ADDR
// d := GetDir ( building ) ;
79438: LD_ADDR_VAR 0 8
79442: PUSH
79443: LD_VAR 0 2
79447: PPUSH
79448: CALL_OW 254
79452: ST_TO_ADDR
// r := 4 ;
79453: LD_ADDR_VAR 0 9
79457: PUSH
79458: LD_INT 4
79460: ST_TO_ADDR
// for i := 1 to 5 do
79461: LD_ADDR_VAR 0 10
79465: PUSH
79466: DOUBLE
79467: LD_INT 1
79469: DEC
79470: ST_TO_ADDR
79471: LD_INT 5
79473: PUSH
79474: FOR_TO
79475: IFFALSE 79632
// begin _x := ShiftX ( x , d , r + i ) ;
79477: LD_ADDR_VAR 0 5
79481: PUSH
79482: LD_VAR 0 4
79486: PPUSH
79487: LD_VAR 0 8
79491: PPUSH
79492: LD_VAR 0 9
79496: PUSH
79497: LD_VAR 0 10
79501: PLUS
79502: PPUSH
79503: CALL_OW 272
79507: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79508: LD_ADDR_VAR 0 7
79512: PUSH
79513: LD_VAR 0 6
79517: PPUSH
79518: LD_VAR 0 8
79522: PPUSH
79523: LD_VAR 0 9
79527: PUSH
79528: LD_VAR 0 10
79532: PLUS
79533: PPUSH
79534: CALL_OW 273
79538: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79539: LD_VAR 0 5
79543: PPUSH
79544: LD_VAR 0 7
79548: PPUSH
79549: CALL_OW 488
79553: PUSH
79554: LD_VAR 0 5
79558: PPUSH
79559: LD_VAR 0 7
79563: PPUSH
79564: CALL_OW 428
79568: PPUSH
79569: CALL_OW 247
79573: PUSH
79574: LD_INT 3
79576: PUSH
79577: LD_INT 2
79579: PUSH
79580: EMPTY
79581: LIST
79582: LIST
79583: IN
79584: NOT
79585: AND
79586: IFFALSE 79630
// begin ComMoveXY ( unit , _x , _y ) ;
79588: LD_VAR 0 1
79592: PPUSH
79593: LD_VAR 0 5
79597: PPUSH
79598: LD_VAR 0 7
79602: PPUSH
79603: CALL_OW 111
// result := [ _x , _y ] ;
79607: LD_ADDR_VAR 0 3
79611: PUSH
79612: LD_VAR 0 5
79616: PUSH
79617: LD_VAR 0 7
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: ST_TO_ADDR
// exit ;
79626: POP
79627: POP
79628: GO 79634
// end ; end ;
79630: GO 79474
79632: POP
79633: POP
// end ;
79634: LD_VAR 0 3
79638: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79639: LD_INT 0
79641: PPUSH
79642: PPUSH
79643: PPUSH
// result := 0 ;
79644: LD_ADDR_VAR 0 3
79648: PUSH
79649: LD_INT 0
79651: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79652: LD_VAR 0 1
79656: PUSH
79657: LD_INT 0
79659: LESS
79660: PUSH
79661: LD_VAR 0 1
79665: PUSH
79666: LD_INT 8
79668: GREATER
79669: OR
79670: PUSH
79671: LD_VAR 0 2
79675: PUSH
79676: LD_INT 0
79678: LESS
79679: OR
79680: PUSH
79681: LD_VAR 0 2
79685: PUSH
79686: LD_INT 8
79688: GREATER
79689: OR
79690: IFFALSE 79694
// exit ;
79692: GO 79769
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79694: LD_ADDR_VAR 0 4
79698: PUSH
79699: LD_INT 22
79701: PUSH
79702: LD_VAR 0 2
79706: PUSH
79707: EMPTY
79708: LIST
79709: LIST
79710: PPUSH
79711: CALL_OW 69
79715: PUSH
79716: FOR_IN
79717: IFFALSE 79767
// begin un := UnitShoot ( i ) ;
79719: LD_ADDR_VAR 0 5
79723: PUSH
79724: LD_VAR 0 4
79728: PPUSH
79729: CALL_OW 504
79733: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79734: LD_VAR 0 5
79738: PPUSH
79739: CALL_OW 255
79743: PUSH
79744: LD_VAR 0 1
79748: EQUAL
79749: IFFALSE 79765
// begin result := un ;
79751: LD_ADDR_VAR 0 3
79755: PUSH
79756: LD_VAR 0 5
79760: ST_TO_ADDR
// exit ;
79761: POP
79762: POP
79763: GO 79769
// end ; end ;
79765: GO 79716
79767: POP
79768: POP
// end ;
79769: LD_VAR 0 3
79773: RET
// export function GetCargoBay ( units ) ; begin
79774: LD_INT 0
79776: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79777: LD_ADDR_VAR 0 2
79781: PUSH
79782: LD_VAR 0 1
79786: PPUSH
79787: LD_INT 2
79789: PUSH
79790: LD_INT 34
79792: PUSH
79793: LD_INT 12
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 34
79802: PUSH
79803: LD_INT 51
79805: PUSH
79806: EMPTY
79807: LIST
79808: LIST
79809: PUSH
79810: LD_INT 34
79812: PUSH
79813: LD_INT 32
79815: PUSH
79816: EMPTY
79817: LIST
79818: LIST
79819: PUSH
79820: LD_INT 34
79822: PUSH
79823: LD_INT 89
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PUSH
79830: EMPTY
79831: LIST
79832: LIST
79833: LIST
79834: LIST
79835: LIST
79836: PPUSH
79837: CALL_OW 72
79841: ST_TO_ADDR
// end ;
79842: LD_VAR 0 2
79846: RET
// export function Negate ( value ) ; begin
79847: LD_INT 0
79849: PPUSH
// result := not value ;
79850: LD_ADDR_VAR 0 2
79854: PUSH
79855: LD_VAR 0 1
79859: NOT
79860: ST_TO_ADDR
// end ;
79861: LD_VAR 0 2
79865: RET
// export function Inc ( value ) ; begin
79866: LD_INT 0
79868: PPUSH
// result := value + 1 ;
79869: LD_ADDR_VAR 0 2
79873: PUSH
79874: LD_VAR 0 1
79878: PUSH
79879: LD_INT 1
79881: PLUS
79882: ST_TO_ADDR
// end ;
79883: LD_VAR 0 2
79887: RET
// export function Dec ( value ) ; begin
79888: LD_INT 0
79890: PPUSH
// result := value - 1 ;
79891: LD_ADDR_VAR 0 2
79895: PUSH
79896: LD_VAR 0 1
79900: PUSH
79901: LD_INT 1
79903: MINUS
79904: ST_TO_ADDR
// end ;
79905: LD_VAR 0 2
79909: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79910: LD_INT 0
79912: PPUSH
79913: PPUSH
79914: PPUSH
79915: PPUSH
79916: PPUSH
79917: PPUSH
79918: PPUSH
79919: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79920: LD_VAR 0 1
79924: PPUSH
79925: LD_VAR 0 2
79929: PPUSH
79930: CALL_OW 488
79934: NOT
79935: PUSH
79936: LD_VAR 0 3
79940: PPUSH
79941: LD_VAR 0 4
79945: PPUSH
79946: CALL_OW 488
79950: NOT
79951: OR
79952: IFFALSE 79965
// begin result := - 1 ;
79954: LD_ADDR_VAR 0 5
79958: PUSH
79959: LD_INT 1
79961: NEG
79962: ST_TO_ADDR
// exit ;
79963: GO 80200
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79965: LD_ADDR_VAR 0 12
79969: PUSH
79970: LD_VAR 0 1
79974: PPUSH
79975: LD_VAR 0 2
79979: PPUSH
79980: LD_VAR 0 3
79984: PPUSH
79985: LD_VAR 0 4
79989: PPUSH
79990: CALL 79050 0 4
79994: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79995: LD_ADDR_VAR 0 11
79999: PUSH
80000: LD_VAR 0 1
80004: PPUSH
80005: LD_VAR 0 2
80009: PPUSH
80010: LD_VAR 0 12
80014: PUSH
80015: LD_INT 1
80017: ARRAY
80018: PPUSH
80019: LD_VAR 0 12
80023: PUSH
80024: LD_INT 2
80026: ARRAY
80027: PPUSH
80028: CALL_OW 298
80032: ST_TO_ADDR
// distance := 9999 ;
80033: LD_ADDR_VAR 0 10
80037: PUSH
80038: LD_INT 9999
80040: ST_TO_ADDR
// for i := 0 to 5 do
80041: LD_ADDR_VAR 0 6
80045: PUSH
80046: DOUBLE
80047: LD_INT 0
80049: DEC
80050: ST_TO_ADDR
80051: LD_INT 5
80053: PUSH
80054: FOR_TO
80055: IFFALSE 80198
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80057: LD_ADDR_VAR 0 7
80061: PUSH
80062: LD_VAR 0 1
80066: PPUSH
80067: LD_VAR 0 6
80071: PPUSH
80072: LD_VAR 0 11
80076: PPUSH
80077: CALL_OW 272
80081: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80082: LD_ADDR_VAR 0 8
80086: PUSH
80087: LD_VAR 0 2
80091: PPUSH
80092: LD_VAR 0 6
80096: PPUSH
80097: LD_VAR 0 11
80101: PPUSH
80102: CALL_OW 273
80106: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80107: LD_VAR 0 7
80111: PPUSH
80112: LD_VAR 0 8
80116: PPUSH
80117: CALL_OW 488
80121: NOT
80122: IFFALSE 80126
// continue ;
80124: GO 80054
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80126: LD_ADDR_VAR 0 9
80130: PUSH
80131: LD_VAR 0 12
80135: PUSH
80136: LD_INT 1
80138: ARRAY
80139: PPUSH
80140: LD_VAR 0 12
80144: PUSH
80145: LD_INT 2
80147: ARRAY
80148: PPUSH
80149: LD_VAR 0 7
80153: PPUSH
80154: LD_VAR 0 8
80158: PPUSH
80159: CALL_OW 298
80163: ST_TO_ADDR
// if tmp < distance then
80164: LD_VAR 0 9
80168: PUSH
80169: LD_VAR 0 10
80173: LESS
80174: IFFALSE 80196
// begin result := i ;
80176: LD_ADDR_VAR 0 5
80180: PUSH
80181: LD_VAR 0 6
80185: ST_TO_ADDR
// distance := tmp ;
80186: LD_ADDR_VAR 0 10
80190: PUSH
80191: LD_VAR 0 9
80195: ST_TO_ADDR
// end ; end ;
80196: GO 80054
80198: POP
80199: POP
// end ;
80200: LD_VAR 0 5
80204: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80205: LD_INT 0
80207: PPUSH
80208: PPUSH
// if not driver or not IsInUnit ( driver ) then
80209: LD_VAR 0 1
80213: NOT
80214: PUSH
80215: LD_VAR 0 1
80219: PPUSH
80220: CALL_OW 310
80224: NOT
80225: OR
80226: IFFALSE 80230
// exit ;
80228: GO 80320
// vehicle := IsInUnit ( driver ) ;
80230: LD_ADDR_VAR 0 3
80234: PUSH
80235: LD_VAR 0 1
80239: PPUSH
80240: CALL_OW 310
80244: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80245: LD_VAR 0 1
80249: PPUSH
80250: LD_STRING \
80252: PUSH
80253: LD_INT 0
80255: PUSH
80256: LD_INT 0
80258: PUSH
80259: LD_INT 0
80261: PUSH
80262: LD_INT 0
80264: PUSH
80265: LD_INT 0
80267: PUSH
80268: LD_INT 0
80270: PUSH
80271: EMPTY
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: LIST
80277: LIST
80278: LIST
80279: PUSH
80280: LD_STRING E
80282: PUSH
80283: LD_INT 0
80285: PUSH
80286: LD_INT 0
80288: PUSH
80289: LD_VAR 0 3
80293: PUSH
80294: LD_INT 0
80296: PUSH
80297: LD_INT 0
80299: PUSH
80300: LD_INT 0
80302: PUSH
80303: EMPTY
80304: LIST
80305: LIST
80306: LIST
80307: LIST
80308: LIST
80309: LIST
80310: LIST
80311: PUSH
80312: EMPTY
80313: LIST
80314: LIST
80315: PPUSH
80316: CALL_OW 446
// end ;
80320: LD_VAR 0 2
80324: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80325: LD_INT 0
80327: PPUSH
80328: PPUSH
// if not driver or not IsInUnit ( driver ) then
80329: LD_VAR 0 1
80333: NOT
80334: PUSH
80335: LD_VAR 0 1
80339: PPUSH
80340: CALL_OW 310
80344: NOT
80345: OR
80346: IFFALSE 80350
// exit ;
80348: GO 80440
// vehicle := IsInUnit ( driver ) ;
80350: LD_ADDR_VAR 0 3
80354: PUSH
80355: LD_VAR 0 1
80359: PPUSH
80360: CALL_OW 310
80364: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80365: LD_VAR 0 1
80369: PPUSH
80370: LD_STRING \
80372: PUSH
80373: LD_INT 0
80375: PUSH
80376: LD_INT 0
80378: PUSH
80379: LD_INT 0
80381: PUSH
80382: LD_INT 0
80384: PUSH
80385: LD_INT 0
80387: PUSH
80388: LD_INT 0
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: LIST
80395: LIST
80396: LIST
80397: LIST
80398: LIST
80399: PUSH
80400: LD_STRING E
80402: PUSH
80403: LD_INT 0
80405: PUSH
80406: LD_INT 0
80408: PUSH
80409: LD_VAR 0 3
80413: PUSH
80414: LD_INT 0
80416: PUSH
80417: LD_INT 0
80419: PUSH
80420: LD_INT 0
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: LIST
80427: LIST
80428: LIST
80429: LIST
80430: LIST
80431: PUSH
80432: EMPTY
80433: LIST
80434: LIST
80435: PPUSH
80436: CALL_OW 447
// end ;
80440: LD_VAR 0 2
80444: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80445: LD_INT 0
80447: PPUSH
80448: PPUSH
80449: PPUSH
// tmp := [ ] ;
80450: LD_ADDR_VAR 0 5
80454: PUSH
80455: EMPTY
80456: ST_TO_ADDR
// for i in units do
80457: LD_ADDR_VAR 0 4
80461: PUSH
80462: LD_VAR 0 1
80466: PUSH
80467: FOR_IN
80468: IFFALSE 80506
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80470: LD_ADDR_VAR 0 5
80474: PUSH
80475: LD_VAR 0 5
80479: PPUSH
80480: LD_VAR 0 5
80484: PUSH
80485: LD_INT 1
80487: PLUS
80488: PPUSH
80489: LD_VAR 0 4
80493: PPUSH
80494: CALL_OW 256
80498: PPUSH
80499: CALL_OW 2
80503: ST_TO_ADDR
80504: GO 80467
80506: POP
80507: POP
// if not tmp then
80508: LD_VAR 0 5
80512: NOT
80513: IFFALSE 80517
// exit ;
80515: GO 80565
// if asc then
80517: LD_VAR 0 2
80521: IFFALSE 80545
// result := SortListByListAsc ( units , tmp ) else
80523: LD_ADDR_VAR 0 3
80527: PUSH
80528: LD_VAR 0 1
80532: PPUSH
80533: LD_VAR 0 5
80537: PPUSH
80538: CALL_OW 76
80542: ST_TO_ADDR
80543: GO 80565
// result := SortListByListDesc ( units , tmp ) ;
80545: LD_ADDR_VAR 0 3
80549: PUSH
80550: LD_VAR 0 1
80554: PPUSH
80555: LD_VAR 0 5
80559: PPUSH
80560: CALL_OW 77
80564: ST_TO_ADDR
// end ;
80565: LD_VAR 0 3
80569: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80570: LD_INT 0
80572: PPUSH
80573: PPUSH
// task := GetTaskList ( mech ) ;
80574: LD_ADDR_VAR 0 4
80578: PUSH
80579: LD_VAR 0 1
80583: PPUSH
80584: CALL_OW 437
80588: ST_TO_ADDR
// if not task then
80589: LD_VAR 0 4
80593: NOT
80594: IFFALSE 80598
// exit ;
80596: GO 80640
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80598: LD_ADDR_VAR 0 3
80602: PUSH
80603: LD_VAR 0 4
80607: PUSH
80608: LD_INT 1
80610: ARRAY
80611: PUSH
80612: LD_INT 1
80614: ARRAY
80615: PUSH
80616: LD_STRING r
80618: EQUAL
80619: PUSH
80620: LD_VAR 0 4
80624: PUSH
80625: LD_INT 1
80627: ARRAY
80628: PUSH
80629: LD_INT 4
80631: ARRAY
80632: PUSH
80633: LD_VAR 0 2
80637: EQUAL
80638: AND
80639: ST_TO_ADDR
// end ;
80640: LD_VAR 0 3
80644: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80645: LD_INT 0
80647: PPUSH
// SetDir ( unit , d ) ;
80648: LD_VAR 0 1
80652: PPUSH
80653: LD_VAR 0 4
80657: PPUSH
80658: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80662: LD_VAR 0 1
80666: PPUSH
80667: LD_VAR 0 2
80671: PPUSH
80672: LD_VAR 0 3
80676: PPUSH
80677: LD_VAR 0 5
80681: PPUSH
80682: CALL_OW 48
// end ;
80686: LD_VAR 0 6
80690: RET
// export function ToNaturalNumber ( number ) ; begin
80691: LD_INT 0
80693: PPUSH
// result := number div 1 ;
80694: LD_ADDR_VAR 0 2
80698: PUSH
80699: LD_VAR 0 1
80703: PUSH
80704: LD_INT 1
80706: DIV
80707: ST_TO_ADDR
// if number < 0 then
80708: LD_VAR 0 1
80712: PUSH
80713: LD_INT 0
80715: LESS
80716: IFFALSE 80726
// result := 0 ;
80718: LD_ADDR_VAR 0 2
80722: PUSH
80723: LD_INT 0
80725: ST_TO_ADDR
// end ;
80726: LD_VAR 0 2
80730: RET
// export function SortByClass ( units , class ) ; var un ; begin
80731: LD_INT 0
80733: PPUSH
80734: PPUSH
// if not units or not class then
80735: LD_VAR 0 1
80739: NOT
80740: PUSH
80741: LD_VAR 0 2
80745: NOT
80746: OR
80747: IFFALSE 80751
// exit ;
80749: GO 80846
// result := [ ] ;
80751: LD_ADDR_VAR 0 3
80755: PUSH
80756: EMPTY
80757: ST_TO_ADDR
// for un in units do
80758: LD_ADDR_VAR 0 4
80762: PUSH
80763: LD_VAR 0 1
80767: PUSH
80768: FOR_IN
80769: IFFALSE 80844
// if GetClass ( un ) = class then
80771: LD_VAR 0 4
80775: PPUSH
80776: CALL_OW 257
80780: PUSH
80781: LD_VAR 0 2
80785: EQUAL
80786: IFFALSE 80813
// result := Insert ( result , 1 , un ) else
80788: LD_ADDR_VAR 0 3
80792: PUSH
80793: LD_VAR 0 3
80797: PPUSH
80798: LD_INT 1
80800: PPUSH
80801: LD_VAR 0 4
80805: PPUSH
80806: CALL_OW 2
80810: ST_TO_ADDR
80811: GO 80842
// result := Replace ( result , result + 1 , un ) ;
80813: LD_ADDR_VAR 0 3
80817: PUSH
80818: LD_VAR 0 3
80822: PPUSH
80823: LD_VAR 0 3
80827: PUSH
80828: LD_INT 1
80830: PLUS
80831: PPUSH
80832: LD_VAR 0 4
80836: PPUSH
80837: CALL_OW 1
80841: ST_TO_ADDR
80842: GO 80768
80844: POP
80845: POP
// end ;
80846: LD_VAR 0 3
80850: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80851: LD_INT 0
80853: PPUSH
80854: PPUSH
80855: PPUSH
80856: PPUSH
80857: PPUSH
80858: PPUSH
80859: PPUSH
// result := [ ] ;
80860: LD_ADDR_VAR 0 4
80864: PUSH
80865: EMPTY
80866: ST_TO_ADDR
// if x - r < 0 then
80867: LD_VAR 0 1
80871: PUSH
80872: LD_VAR 0 3
80876: MINUS
80877: PUSH
80878: LD_INT 0
80880: LESS
80881: IFFALSE 80893
// min_x := 0 else
80883: LD_ADDR_VAR 0 8
80887: PUSH
80888: LD_INT 0
80890: ST_TO_ADDR
80891: GO 80909
// min_x := x - r ;
80893: LD_ADDR_VAR 0 8
80897: PUSH
80898: LD_VAR 0 1
80902: PUSH
80903: LD_VAR 0 3
80907: MINUS
80908: ST_TO_ADDR
// if y - r < 0 then
80909: LD_VAR 0 2
80913: PUSH
80914: LD_VAR 0 3
80918: MINUS
80919: PUSH
80920: LD_INT 0
80922: LESS
80923: IFFALSE 80935
// min_y := 0 else
80925: LD_ADDR_VAR 0 7
80929: PUSH
80930: LD_INT 0
80932: ST_TO_ADDR
80933: GO 80951
// min_y := y - r ;
80935: LD_ADDR_VAR 0 7
80939: PUSH
80940: LD_VAR 0 2
80944: PUSH
80945: LD_VAR 0 3
80949: MINUS
80950: ST_TO_ADDR
// max_x := x + r ;
80951: LD_ADDR_VAR 0 9
80955: PUSH
80956: LD_VAR 0 1
80960: PUSH
80961: LD_VAR 0 3
80965: PLUS
80966: ST_TO_ADDR
// max_y := y + r ;
80967: LD_ADDR_VAR 0 10
80971: PUSH
80972: LD_VAR 0 2
80976: PUSH
80977: LD_VAR 0 3
80981: PLUS
80982: ST_TO_ADDR
// for _x = min_x to max_x do
80983: LD_ADDR_VAR 0 5
80987: PUSH
80988: DOUBLE
80989: LD_VAR 0 8
80993: DEC
80994: ST_TO_ADDR
80995: LD_VAR 0 9
80999: PUSH
81000: FOR_TO
81001: IFFALSE 81102
// for _y = min_y to max_y do
81003: LD_ADDR_VAR 0 6
81007: PUSH
81008: DOUBLE
81009: LD_VAR 0 7
81013: DEC
81014: ST_TO_ADDR
81015: LD_VAR 0 10
81019: PUSH
81020: FOR_TO
81021: IFFALSE 81098
// begin if not ValidHex ( _x , _y ) then
81023: LD_VAR 0 5
81027: PPUSH
81028: LD_VAR 0 6
81032: PPUSH
81033: CALL_OW 488
81037: NOT
81038: IFFALSE 81042
// continue ;
81040: GO 81020
// if GetResourceTypeXY ( _x , _y ) then
81042: LD_VAR 0 5
81046: PPUSH
81047: LD_VAR 0 6
81051: PPUSH
81052: CALL_OW 283
81056: IFFALSE 81096
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81058: LD_ADDR_VAR 0 4
81062: PUSH
81063: LD_VAR 0 4
81067: PPUSH
81068: LD_VAR 0 4
81072: PUSH
81073: LD_INT 1
81075: PLUS
81076: PPUSH
81077: LD_VAR 0 5
81081: PUSH
81082: LD_VAR 0 6
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: PPUSH
81091: CALL_OW 1
81095: ST_TO_ADDR
// end ;
81096: GO 81020
81098: POP
81099: POP
81100: GO 81000
81102: POP
81103: POP
// end ;
81104: LD_VAR 0 4
81108: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81109: LD_INT 0
81111: PPUSH
81112: PPUSH
81113: PPUSH
81114: PPUSH
81115: PPUSH
81116: PPUSH
81117: PPUSH
81118: PPUSH
// if not units then
81119: LD_VAR 0 1
81123: NOT
81124: IFFALSE 81128
// exit ;
81126: GO 81652
// result := UnitFilter ( units , [ f_ok ] ) ;
81128: LD_ADDR_VAR 0 3
81132: PUSH
81133: LD_VAR 0 1
81137: PPUSH
81138: LD_INT 50
81140: PUSH
81141: EMPTY
81142: LIST
81143: PPUSH
81144: CALL_OW 72
81148: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81149: LD_ADDR_VAR 0 8
81153: PUSH
81154: LD_VAR 0 1
81158: PUSH
81159: LD_INT 1
81161: ARRAY
81162: PPUSH
81163: CALL_OW 255
81167: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81168: LD_ADDR_VAR 0 10
81172: PUSH
81173: LD_INT 29
81175: PUSH
81176: LD_INT 91
81178: PUSH
81179: LD_INT 49
81181: PUSH
81182: EMPTY
81183: LIST
81184: LIST
81185: LIST
81186: ST_TO_ADDR
// if not result then
81187: LD_VAR 0 3
81191: NOT
81192: IFFALSE 81196
// exit ;
81194: GO 81652
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81196: LD_ADDR_VAR 0 5
81200: PUSH
81201: LD_INT 81
81203: PUSH
81204: LD_VAR 0 8
81208: PUSH
81209: EMPTY
81210: LIST
81211: LIST
81212: PPUSH
81213: CALL_OW 69
81217: ST_TO_ADDR
// for i in result do
81218: LD_ADDR_VAR 0 4
81222: PUSH
81223: LD_VAR 0 3
81227: PUSH
81228: FOR_IN
81229: IFFALSE 81650
// begin tag := GetTag ( i ) + 1 ;
81231: LD_ADDR_VAR 0 9
81235: PUSH
81236: LD_VAR 0 4
81240: PPUSH
81241: CALL_OW 110
81245: PUSH
81246: LD_INT 1
81248: PLUS
81249: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81250: LD_ADDR_VAR 0 7
81254: PUSH
81255: LD_VAR 0 4
81259: PPUSH
81260: CALL_OW 250
81264: PPUSH
81265: LD_VAR 0 4
81269: PPUSH
81270: CALL_OW 251
81274: PPUSH
81275: LD_INT 6
81277: PPUSH
81278: CALL 80851 0 3
81282: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81283: LD_VAR 0 4
81287: PPUSH
81288: CALL_OW 247
81292: PUSH
81293: LD_INT 2
81295: EQUAL
81296: PUSH
81297: LD_VAR 0 7
81301: AND
81302: PUSH
81303: LD_VAR 0 4
81307: PPUSH
81308: CALL_OW 264
81312: PUSH
81313: LD_VAR 0 10
81317: IN
81318: NOT
81319: AND
81320: IFFALSE 81359
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81322: LD_VAR 0 4
81326: PPUSH
81327: LD_VAR 0 7
81331: PUSH
81332: LD_INT 1
81334: ARRAY
81335: PUSH
81336: LD_INT 1
81338: ARRAY
81339: PPUSH
81340: LD_VAR 0 7
81344: PUSH
81345: LD_INT 1
81347: ARRAY
81348: PUSH
81349: LD_INT 2
81351: ARRAY
81352: PPUSH
81353: CALL_OW 116
81357: GO 81648
// if path > tag then
81359: LD_VAR 0 2
81363: PUSH
81364: LD_VAR 0 9
81368: GREATER
81369: IFFALSE 81577
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81371: LD_ADDR_VAR 0 6
81375: PUSH
81376: LD_VAR 0 5
81380: PPUSH
81381: LD_INT 91
81383: PUSH
81384: LD_VAR 0 4
81388: PUSH
81389: LD_INT 8
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: LIST
81396: PPUSH
81397: CALL_OW 72
81401: ST_TO_ADDR
// if nearEnemy then
81402: LD_VAR 0 6
81406: IFFALSE 81475
// begin if GetWeapon ( i ) = ru_time_lapser then
81408: LD_VAR 0 4
81412: PPUSH
81413: CALL_OW 264
81417: PUSH
81418: LD_INT 49
81420: EQUAL
81421: IFFALSE 81449
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81423: LD_VAR 0 4
81427: PPUSH
81428: LD_VAR 0 6
81432: PPUSH
81433: LD_VAR 0 4
81437: PPUSH
81438: CALL_OW 74
81442: PPUSH
81443: CALL_OW 112
81447: GO 81473
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81449: LD_VAR 0 4
81453: PPUSH
81454: LD_VAR 0 6
81458: PPUSH
81459: LD_VAR 0 4
81463: PPUSH
81464: CALL_OW 74
81468: PPUSH
81469: CALL 82577 0 2
// end else
81473: GO 81575
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81475: LD_VAR 0 4
81479: PPUSH
81480: LD_VAR 0 2
81484: PUSH
81485: LD_VAR 0 9
81489: ARRAY
81490: PUSH
81491: LD_INT 1
81493: ARRAY
81494: PPUSH
81495: LD_VAR 0 2
81499: PUSH
81500: LD_VAR 0 9
81504: ARRAY
81505: PUSH
81506: LD_INT 2
81508: ARRAY
81509: PPUSH
81510: CALL_OW 297
81514: PUSH
81515: LD_INT 6
81517: GREATER
81518: IFFALSE 81561
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81520: LD_VAR 0 4
81524: PPUSH
81525: LD_VAR 0 2
81529: PUSH
81530: LD_VAR 0 9
81534: ARRAY
81535: PUSH
81536: LD_INT 1
81538: ARRAY
81539: PPUSH
81540: LD_VAR 0 2
81544: PUSH
81545: LD_VAR 0 9
81549: ARRAY
81550: PUSH
81551: LD_INT 2
81553: ARRAY
81554: PPUSH
81555: CALL_OW 114
81559: GO 81575
// SetTag ( i , tag ) ;
81561: LD_VAR 0 4
81565: PPUSH
81566: LD_VAR 0 9
81570: PPUSH
81571: CALL_OW 109
// end else
81575: GO 81648
// if enemy then
81577: LD_VAR 0 5
81581: IFFALSE 81648
// begin if GetWeapon ( i ) = ru_time_lapser then
81583: LD_VAR 0 4
81587: PPUSH
81588: CALL_OW 264
81592: PUSH
81593: LD_INT 49
81595: EQUAL
81596: IFFALSE 81624
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81598: LD_VAR 0 4
81602: PPUSH
81603: LD_VAR 0 5
81607: PPUSH
81608: LD_VAR 0 4
81612: PPUSH
81613: CALL_OW 74
81617: PPUSH
81618: CALL_OW 112
81622: GO 81648
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81624: LD_VAR 0 4
81628: PPUSH
81629: LD_VAR 0 5
81633: PPUSH
81634: LD_VAR 0 4
81638: PPUSH
81639: CALL_OW 74
81643: PPUSH
81644: CALL 82577 0 2
// end ; end ;
81648: GO 81228
81650: POP
81651: POP
// end ;
81652: LD_VAR 0 3
81656: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81657: LD_INT 0
81659: PPUSH
81660: PPUSH
81661: PPUSH
// if not unit or IsInUnit ( unit ) then
81662: LD_VAR 0 1
81666: NOT
81667: PUSH
81668: LD_VAR 0 1
81672: PPUSH
81673: CALL_OW 310
81677: OR
81678: IFFALSE 81682
// exit ;
81680: GO 81773
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81682: LD_ADDR_VAR 0 4
81686: PUSH
81687: LD_VAR 0 1
81691: PPUSH
81692: CALL_OW 250
81696: PPUSH
81697: LD_VAR 0 2
81701: PPUSH
81702: LD_INT 1
81704: PPUSH
81705: CALL_OW 272
81709: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81710: LD_ADDR_VAR 0 5
81714: PUSH
81715: LD_VAR 0 1
81719: PPUSH
81720: CALL_OW 251
81724: PPUSH
81725: LD_VAR 0 2
81729: PPUSH
81730: LD_INT 1
81732: PPUSH
81733: CALL_OW 273
81737: ST_TO_ADDR
// if ValidHex ( x , y ) then
81738: LD_VAR 0 4
81742: PPUSH
81743: LD_VAR 0 5
81747: PPUSH
81748: CALL_OW 488
81752: IFFALSE 81773
// ComTurnXY ( unit , x , y ) ;
81754: LD_VAR 0 1
81758: PPUSH
81759: LD_VAR 0 4
81763: PPUSH
81764: LD_VAR 0 5
81768: PPUSH
81769: CALL_OW 118
// end ;
81773: LD_VAR 0 3
81777: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81778: LD_INT 0
81780: PPUSH
81781: PPUSH
// result := false ;
81782: LD_ADDR_VAR 0 3
81786: PUSH
81787: LD_INT 0
81789: ST_TO_ADDR
// if not units then
81790: LD_VAR 0 2
81794: NOT
81795: IFFALSE 81799
// exit ;
81797: GO 81844
// for i in units do
81799: LD_ADDR_VAR 0 4
81803: PUSH
81804: LD_VAR 0 2
81808: PUSH
81809: FOR_IN
81810: IFFALSE 81842
// if See ( side , i ) then
81812: LD_VAR 0 1
81816: PPUSH
81817: LD_VAR 0 4
81821: PPUSH
81822: CALL_OW 292
81826: IFFALSE 81840
// begin result := true ;
81828: LD_ADDR_VAR 0 3
81832: PUSH
81833: LD_INT 1
81835: ST_TO_ADDR
// exit ;
81836: POP
81837: POP
81838: GO 81844
// end ;
81840: GO 81809
81842: POP
81843: POP
// end ;
81844: LD_VAR 0 3
81848: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81849: LD_INT 0
81851: PPUSH
81852: PPUSH
81853: PPUSH
81854: PPUSH
// if not unit or not points then
81855: LD_VAR 0 1
81859: NOT
81860: PUSH
81861: LD_VAR 0 2
81865: NOT
81866: OR
81867: IFFALSE 81871
// exit ;
81869: GO 81961
// dist := 99999 ;
81871: LD_ADDR_VAR 0 5
81875: PUSH
81876: LD_INT 99999
81878: ST_TO_ADDR
// for i in points do
81879: LD_ADDR_VAR 0 4
81883: PUSH
81884: LD_VAR 0 2
81888: PUSH
81889: FOR_IN
81890: IFFALSE 81959
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81892: LD_ADDR_VAR 0 6
81896: PUSH
81897: LD_VAR 0 1
81901: PPUSH
81902: LD_VAR 0 4
81906: PUSH
81907: LD_INT 1
81909: ARRAY
81910: PPUSH
81911: LD_VAR 0 4
81915: PUSH
81916: LD_INT 2
81918: ARRAY
81919: PPUSH
81920: CALL_OW 297
81924: ST_TO_ADDR
// if tmpDist < dist then
81925: LD_VAR 0 6
81929: PUSH
81930: LD_VAR 0 5
81934: LESS
81935: IFFALSE 81957
// begin result := i ;
81937: LD_ADDR_VAR 0 3
81941: PUSH
81942: LD_VAR 0 4
81946: ST_TO_ADDR
// dist := tmpDist ;
81947: LD_ADDR_VAR 0 5
81951: PUSH
81952: LD_VAR 0 6
81956: ST_TO_ADDR
// end ; end ;
81957: GO 81889
81959: POP
81960: POP
// end ;
81961: LD_VAR 0 3
81965: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81966: LD_INT 0
81968: PPUSH
// uc_side := side ;
81969: LD_ADDR_OWVAR 20
81973: PUSH
81974: LD_VAR 0 1
81978: ST_TO_ADDR
// uc_nation := 3 ;
81979: LD_ADDR_OWVAR 21
81983: PUSH
81984: LD_INT 3
81986: ST_TO_ADDR
// vc_chassis := 25 ;
81987: LD_ADDR_OWVAR 37
81991: PUSH
81992: LD_INT 25
81994: ST_TO_ADDR
// vc_engine := engine_siberite ;
81995: LD_ADDR_OWVAR 39
81999: PUSH
82000: LD_INT 3
82002: ST_TO_ADDR
// vc_control := control_computer ;
82003: LD_ADDR_OWVAR 38
82007: PUSH
82008: LD_INT 3
82010: ST_TO_ADDR
// vc_weapon := 59 ;
82011: LD_ADDR_OWVAR 40
82015: PUSH
82016: LD_INT 59
82018: ST_TO_ADDR
// result := CreateVehicle ;
82019: LD_ADDR_VAR 0 5
82023: PUSH
82024: CALL_OW 45
82028: ST_TO_ADDR
// SetDir ( result , d ) ;
82029: LD_VAR 0 5
82033: PPUSH
82034: LD_VAR 0 4
82038: PPUSH
82039: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82043: LD_VAR 0 5
82047: PPUSH
82048: LD_VAR 0 2
82052: PPUSH
82053: LD_VAR 0 3
82057: PPUSH
82058: LD_INT 0
82060: PPUSH
82061: CALL_OW 48
// end ;
82065: LD_VAR 0 5
82069: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82070: LD_INT 0
82072: PPUSH
82073: PPUSH
82074: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82075: LD_ADDR_VAR 0 2
82079: PUSH
82080: LD_INT 0
82082: PUSH
82083: LD_INT 0
82085: PUSH
82086: LD_INT 0
82088: PUSH
82089: LD_INT 0
82091: PUSH
82092: EMPTY
82093: LIST
82094: LIST
82095: LIST
82096: LIST
82097: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82098: LD_VAR 0 1
82102: NOT
82103: PUSH
82104: LD_VAR 0 1
82108: PPUSH
82109: CALL_OW 264
82113: PUSH
82114: LD_INT 12
82116: PUSH
82117: LD_INT 51
82119: PUSH
82120: LD_INT 32
82122: PUSH
82123: LD_INT 89
82125: PUSH
82126: EMPTY
82127: LIST
82128: LIST
82129: LIST
82130: LIST
82131: IN
82132: NOT
82133: OR
82134: IFFALSE 82138
// exit ;
82136: GO 82236
// for i := 1 to 3 do
82138: LD_ADDR_VAR 0 3
82142: PUSH
82143: DOUBLE
82144: LD_INT 1
82146: DEC
82147: ST_TO_ADDR
82148: LD_INT 3
82150: PUSH
82151: FOR_TO
82152: IFFALSE 82234
// begin tmp := GetCargo ( cargo , i ) ;
82154: LD_ADDR_VAR 0 4
82158: PUSH
82159: LD_VAR 0 1
82163: PPUSH
82164: LD_VAR 0 3
82168: PPUSH
82169: CALL_OW 289
82173: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82174: LD_ADDR_VAR 0 2
82178: PUSH
82179: LD_VAR 0 2
82183: PPUSH
82184: LD_VAR 0 3
82188: PPUSH
82189: LD_VAR 0 4
82193: PPUSH
82194: CALL_OW 1
82198: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82199: LD_ADDR_VAR 0 2
82203: PUSH
82204: LD_VAR 0 2
82208: PPUSH
82209: LD_INT 4
82211: PPUSH
82212: LD_VAR 0 2
82216: PUSH
82217: LD_INT 4
82219: ARRAY
82220: PUSH
82221: LD_VAR 0 4
82225: PLUS
82226: PPUSH
82227: CALL_OW 1
82231: ST_TO_ADDR
// end ;
82232: GO 82151
82234: POP
82235: POP
// end ;
82236: LD_VAR 0 2
82240: RET
// export function Length ( array ) ; begin
82241: LD_INT 0
82243: PPUSH
// result := array + 0 ;
82244: LD_ADDR_VAR 0 2
82248: PUSH
82249: LD_VAR 0 1
82253: PUSH
82254: LD_INT 0
82256: PLUS
82257: ST_TO_ADDR
// end ;
82258: LD_VAR 0 2
82262: RET
// export function PrepareArray ( array ) ; begin
82263: LD_INT 0
82265: PPUSH
// result := array diff 0 ;
82266: LD_ADDR_VAR 0 2
82270: PUSH
82271: LD_VAR 0 1
82275: PUSH
82276: LD_INT 0
82278: DIFF
82279: ST_TO_ADDR
// if not result [ 1 ] then
82280: LD_VAR 0 2
82284: PUSH
82285: LD_INT 1
82287: ARRAY
82288: NOT
82289: IFFALSE 82309
// result := Delete ( result , 1 ) ;
82291: LD_ADDR_VAR 0 2
82295: PUSH
82296: LD_VAR 0 2
82300: PPUSH
82301: LD_INT 1
82303: PPUSH
82304: CALL_OW 3
82308: ST_TO_ADDR
// end ;
82309: LD_VAR 0 2
82313: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82314: LD_INT 0
82316: PPUSH
82317: PPUSH
82318: PPUSH
82319: PPUSH
// sibRocketRange := 25 ;
82320: LD_ADDR_VAR 0 6
82324: PUSH
82325: LD_INT 25
82327: ST_TO_ADDR
// result := false ;
82328: LD_ADDR_VAR 0 4
82332: PUSH
82333: LD_INT 0
82335: ST_TO_ADDR
// for i := 0 to 5 do
82336: LD_ADDR_VAR 0 5
82340: PUSH
82341: DOUBLE
82342: LD_INT 0
82344: DEC
82345: ST_TO_ADDR
82346: LD_INT 5
82348: PUSH
82349: FOR_TO
82350: IFFALSE 82417
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82352: LD_VAR 0 1
82356: PPUSH
82357: LD_VAR 0 5
82361: PPUSH
82362: LD_VAR 0 6
82366: PPUSH
82367: CALL_OW 272
82371: PPUSH
82372: LD_VAR 0 2
82376: PPUSH
82377: LD_VAR 0 5
82381: PPUSH
82382: LD_VAR 0 6
82386: PPUSH
82387: CALL_OW 273
82391: PPUSH
82392: LD_VAR 0 3
82396: PPUSH
82397: CALL_OW 309
82401: IFFALSE 82415
// begin result := true ;
82403: LD_ADDR_VAR 0 4
82407: PUSH
82408: LD_INT 1
82410: ST_TO_ADDR
// exit ;
82411: POP
82412: POP
82413: GO 82419
// end ;
82415: GO 82349
82417: POP
82418: POP
// end ;
82419: LD_VAR 0 4
82423: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82424: LD_INT 0
82426: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82427: LD_VAR 0 1
82431: PPUSH
82432: LD_VAR 0 2
82436: PPUSH
82437: LD_INT 0
82439: PPUSH
82440: LD_INT 0
82442: PPUSH
82443: LD_INT 1
82445: PPUSH
82446: LD_INT 0
82448: PPUSH
82449: CALL_OW 587
// end ;
82453: LD_VAR 0 3
82457: RET
// export function CenterOnNow ( unit ) ; begin
82458: LD_INT 0
82460: PPUSH
// result := IsInUnit ( unit ) ;
82461: LD_ADDR_VAR 0 2
82465: PUSH
82466: LD_VAR 0 1
82470: PPUSH
82471: CALL_OW 310
82475: ST_TO_ADDR
// if not result then
82476: LD_VAR 0 2
82480: NOT
82481: IFFALSE 82493
// result := unit ;
82483: LD_ADDR_VAR 0 2
82487: PUSH
82488: LD_VAR 0 1
82492: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82493: LD_VAR 0 1
82497: PPUSH
82498: CALL_OW 87
// end ;
82502: LD_VAR 0 2
82506: RET
// export function ComMoveHex ( unit , hex ) ; begin
82507: LD_INT 0
82509: PPUSH
// if not hex then
82510: LD_VAR 0 2
82514: NOT
82515: IFFALSE 82519
// exit ;
82517: GO 82572
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82519: LD_VAR 0 2
82523: PUSH
82524: LD_INT 1
82526: ARRAY
82527: PPUSH
82528: LD_VAR 0 2
82532: PUSH
82533: LD_INT 2
82535: ARRAY
82536: PPUSH
82537: CALL_OW 428
82541: IFFALSE 82545
// exit ;
82543: GO 82572
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82545: LD_VAR 0 1
82549: PPUSH
82550: LD_VAR 0 2
82554: PUSH
82555: LD_INT 1
82557: ARRAY
82558: PPUSH
82559: LD_VAR 0 2
82563: PUSH
82564: LD_INT 2
82566: ARRAY
82567: PPUSH
82568: CALL_OW 111
// end ;
82572: LD_VAR 0 3
82576: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82577: LD_INT 0
82579: PPUSH
82580: PPUSH
82581: PPUSH
// if not unit or not enemy then
82582: LD_VAR 0 1
82586: NOT
82587: PUSH
82588: LD_VAR 0 2
82592: NOT
82593: OR
82594: IFFALSE 82598
// exit ;
82596: GO 82722
// x := GetX ( enemy ) ;
82598: LD_ADDR_VAR 0 4
82602: PUSH
82603: LD_VAR 0 2
82607: PPUSH
82608: CALL_OW 250
82612: ST_TO_ADDR
// y := GetY ( enemy ) ;
82613: LD_ADDR_VAR 0 5
82617: PUSH
82618: LD_VAR 0 2
82622: PPUSH
82623: CALL_OW 251
82627: ST_TO_ADDR
// if ValidHex ( x , y ) then
82628: LD_VAR 0 4
82632: PPUSH
82633: LD_VAR 0 5
82637: PPUSH
82638: CALL_OW 488
82642: IFFALSE 82722
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82644: LD_VAR 0 2
82648: PPUSH
82649: CALL_OW 247
82653: PUSH
82654: LD_INT 3
82656: PUSH
82657: LD_INT 2
82659: PUSH
82660: EMPTY
82661: LIST
82662: LIST
82663: IN
82664: PUSH
82665: LD_VAR 0 1
82669: PPUSH
82670: CALL_OW 255
82674: PPUSH
82675: LD_VAR 0 2
82679: PPUSH
82680: CALL_OW 292
82684: AND
82685: IFFALSE 82703
// ComAttackUnit ( unit , enemy ) else
82687: LD_VAR 0 1
82691: PPUSH
82692: LD_VAR 0 2
82696: PPUSH
82697: CALL_OW 115
82701: GO 82722
// ComAgressiveMove ( unit , x , y ) ;
82703: LD_VAR 0 1
82707: PPUSH
82708: LD_VAR 0 4
82712: PPUSH
82713: LD_VAR 0 5
82717: PPUSH
82718: CALL_OW 114
// end ;
82722: LD_VAR 0 3
82726: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82727: LD_INT 0
82729: PPUSH
82730: PPUSH
82731: PPUSH
// list := AreaToList ( area , 0 ) ;
82732: LD_ADDR_VAR 0 5
82736: PUSH
82737: LD_VAR 0 1
82741: PPUSH
82742: LD_INT 0
82744: PPUSH
82745: CALL_OW 517
82749: ST_TO_ADDR
// if not list then
82750: LD_VAR 0 5
82754: NOT
82755: IFFALSE 82759
// exit ;
82757: GO 82889
// if all then
82759: LD_VAR 0 2
82763: IFFALSE 82851
// begin for i := 1 to list [ 1 ] do
82765: LD_ADDR_VAR 0 4
82769: PUSH
82770: DOUBLE
82771: LD_INT 1
82773: DEC
82774: ST_TO_ADDR
82775: LD_VAR 0 5
82779: PUSH
82780: LD_INT 1
82782: ARRAY
82783: PUSH
82784: FOR_TO
82785: IFFALSE 82847
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82787: LD_ADDR_VAR 0 3
82791: PUSH
82792: LD_VAR 0 3
82796: PPUSH
82797: LD_VAR 0 3
82801: PUSH
82802: LD_INT 1
82804: PLUS
82805: PPUSH
82806: LD_VAR 0 5
82810: PUSH
82811: LD_INT 1
82813: ARRAY
82814: PUSH
82815: LD_VAR 0 4
82819: ARRAY
82820: PUSH
82821: LD_VAR 0 5
82825: PUSH
82826: LD_INT 2
82828: ARRAY
82829: PUSH
82830: LD_VAR 0 4
82834: ARRAY
82835: PUSH
82836: EMPTY
82837: LIST
82838: LIST
82839: PPUSH
82840: CALL_OW 1
82844: ST_TO_ADDR
82845: GO 82784
82847: POP
82848: POP
// exit ;
82849: GO 82889
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82851: LD_ADDR_VAR 0 3
82855: PUSH
82856: LD_VAR 0 5
82860: PUSH
82861: LD_INT 1
82863: ARRAY
82864: PUSH
82865: LD_INT 1
82867: ARRAY
82868: PUSH
82869: LD_VAR 0 5
82873: PUSH
82874: LD_INT 2
82876: ARRAY
82877: PUSH
82878: LD_INT 1
82880: ARRAY
82881: PUSH
82882: EMPTY
82883: LIST
82884: LIST
82885: PUSH
82886: EMPTY
82887: LIST
82888: ST_TO_ADDR
// end ;
82889: LD_VAR 0 3
82893: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82894: LD_INT 0
82896: PPUSH
82897: PPUSH
// list := AreaToList ( area , 0 ) ;
82898: LD_ADDR_VAR 0 4
82902: PUSH
82903: LD_VAR 0 1
82907: PPUSH
82908: LD_INT 0
82910: PPUSH
82911: CALL_OW 517
82915: ST_TO_ADDR
// if not list then
82916: LD_VAR 0 4
82920: NOT
82921: IFFALSE 82925
// exit ;
82923: GO 82966
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82925: LD_ADDR_VAR 0 3
82929: PUSH
82930: LD_VAR 0 4
82934: PUSH
82935: LD_INT 1
82937: ARRAY
82938: PUSH
82939: LD_INT 1
82941: ARRAY
82942: PUSH
82943: LD_VAR 0 4
82947: PUSH
82948: LD_INT 2
82950: ARRAY
82951: PUSH
82952: LD_INT 1
82954: ARRAY
82955: PUSH
82956: LD_VAR 0 2
82960: PUSH
82961: EMPTY
82962: LIST
82963: LIST
82964: LIST
82965: ST_TO_ADDR
// end ;
82966: LD_VAR 0 3
82970: RET
// export function First ( array ) ; begin
82971: LD_INT 0
82973: PPUSH
// if not array then
82974: LD_VAR 0 1
82978: NOT
82979: IFFALSE 82983
// exit ;
82981: GO 82997
// result := array [ 1 ] ;
82983: LD_ADDR_VAR 0 2
82987: PUSH
82988: LD_VAR 0 1
82992: PUSH
82993: LD_INT 1
82995: ARRAY
82996: ST_TO_ADDR
// end ;
82997: LD_VAR 0 2
83001: RET
// export function Last ( array ) ; begin
83002: LD_INT 0
83004: PPUSH
// if not array then
83005: LD_VAR 0 1
83009: NOT
83010: IFFALSE 83014
// exit ;
83012: GO 83030
// result := array [ array ] ;
83014: LD_ADDR_VAR 0 2
83018: PUSH
83019: LD_VAR 0 1
83023: PUSH
83024: LD_VAR 0 1
83028: ARRAY
83029: ST_TO_ADDR
// end ; end_of_file
83030: LD_VAR 0 2
83034: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83035: LD_VAR 0 1
83039: PUSH
83040: LD_INT 200
83042: DOUBLE
83043: GREATEREQUAL
83044: IFFALSE 83052
83046: LD_INT 299
83048: DOUBLE
83049: LESSEQUAL
83050: IFTRUE 83054
83052: GO 83086
83054: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83055: LD_VAR 0 1
83059: PPUSH
83060: LD_VAR 0 2
83064: PPUSH
83065: LD_VAR 0 3
83069: PPUSH
83070: LD_VAR 0 4
83074: PPUSH
83075: LD_VAR 0 5
83079: PPUSH
83080: CALL 36285 0 5
83084: GO 83163
83086: LD_INT 300
83088: DOUBLE
83089: GREATEREQUAL
83090: IFFALSE 83098
83092: LD_INT 399
83094: DOUBLE
83095: LESSEQUAL
83096: IFTRUE 83100
83098: GO 83162
83100: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83101: LD_VAR 0 1
83105: PPUSH
83106: LD_VAR 0 2
83110: PPUSH
83111: LD_VAR 0 3
83115: PPUSH
83116: LD_VAR 0 4
83120: PPUSH
83121: LD_VAR 0 5
83125: PPUSH
83126: LD_VAR 0 6
83130: PPUSH
83131: LD_VAR 0 7
83135: PPUSH
83136: LD_VAR 0 8
83140: PPUSH
83141: LD_VAR 0 9
83145: PPUSH
83146: LD_VAR 0 10
83150: PPUSH
83151: LD_VAR 0 11
83155: PPUSH
83156: CALL 32610 0 11
83160: GO 83163
83162: POP
// end ;
83163: PPOPN 11
83165: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83166: LD_VAR 0 1
83170: PPUSH
83171: LD_VAR 0 2
83175: PPUSH
83176: LD_VAR 0 3
83180: PPUSH
83181: LD_VAR 0 4
83185: PPUSH
83186: LD_VAR 0 5
83190: PPUSH
83191: CALL 36021 0 5
// end ; end_of_file
83195: PPOPN 5
83197: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83198: LD_VAR 0 1
83202: PPUSH
83203: LD_VAR 0 2
83207: PPUSH
83208: LD_VAR 0 3
83212: PPUSH
83213: LD_VAR 0 4
83217: PPUSH
83218: LD_VAR 0 5
83222: PPUSH
83223: LD_VAR 0 6
83227: PPUSH
83228: CALL 20262 0 6
// end ;
83232: PPOPN 6
83234: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83235: LD_INT 0
83237: PPUSH
// begin if not units then
83238: LD_VAR 0 1
83242: NOT
83243: IFFALSE 83247
// exit ;
83245: GO 83247
// end ;
83247: PPOPN 7
83249: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83250: CALL 20166 0 0
// end ;
83254: PPOPN 1
83256: END
